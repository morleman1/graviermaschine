
stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000165d8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002000  080167a8  080167a8  000177a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080187a8  080187a8  0001a224  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080187a8  080187a8  000197a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080187b0  080187b0  0001a224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080187b0  080187b0  000197b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080187b8  080187b8  000197b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000224  20000000  080187bc  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000059c  20000224  080189e0  0001a224  2**2
                  ALLOC
 10 ._user_heap_stack 00038000  200007c0  080189e0  0001a7c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e1bd  00000000  00000000  0001a254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000428a  00000000  00000000  00038411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b8  00000000  00000000  0003c6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001394  00000000  00000000  0003df58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ab14  00000000  00000000  0003f2ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022de7  00000000  00000000  00069e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b974  00000000  00000000  0008cbe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019855b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000833c  00000000  00000000  001985a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001a08dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000224 	.word	0x20000224
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016790 	.word	0x08016790

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000228 	.word	0x20000228
 800020c:	08016790 	.word	0x08016790

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9be 	b.w	800107c <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	468e      	mov	lr, r1
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	4688      	mov	r8, r1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d14a      	bne.n	8000e2a <__udivmoddi4+0xa6>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4617      	mov	r7, r2
 8000d98:	d962      	bls.n	8000e60 <__udivmoddi4+0xdc>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	b14e      	cbz	r6, 8000db4 <__udivmoddi4+0x30>
 8000da0:	f1c6 0320 	rsb	r3, r6, #32
 8000da4:	fa01 f806 	lsl.w	r8, r1, r6
 8000da8:	fa20 f303 	lsr.w	r3, r0, r3
 8000dac:	40b7      	lsls	r7, r6
 8000dae:	ea43 0808 	orr.w	r8, r3, r8
 8000db2:	40b4      	lsls	r4, r6
 8000db4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000dc0:	0c23      	lsrs	r3, r4, #16
 8000dc2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dca:	fb01 f20c 	mul.w	r2, r1, ip
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x62>
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dd8:	f080 80ea 	bcs.w	8000fb0 <__udivmoddi4+0x22c>
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	f240 80e7 	bls.w	8000fb0 <__udivmoddi4+0x22c>
 8000de2:	3902      	subs	r1, #2
 8000de4:	443b      	add	r3, r7
 8000de6:	1a9a      	subs	r2, r3, r2
 8000de8:	b2a3      	uxth	r3, r4
 8000dea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000df2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000df6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dfa:	459c      	cmp	ip, r3
 8000dfc:	d909      	bls.n	8000e12 <__udivmoddi4+0x8e>
 8000dfe:	18fb      	adds	r3, r7, r3
 8000e00:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e04:	f080 80d6 	bcs.w	8000fb4 <__udivmoddi4+0x230>
 8000e08:	459c      	cmp	ip, r3
 8000e0a:	f240 80d3 	bls.w	8000fb4 <__udivmoddi4+0x230>
 8000e0e:	443b      	add	r3, r7
 8000e10:	3802      	subs	r0, #2
 8000e12:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e16:	eba3 030c 	sub.w	r3, r3, ip
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	b11d      	cbz	r5, 8000e26 <__udivmoddi4+0xa2>
 8000e1e:	40f3      	lsrs	r3, r6
 8000e20:	2200      	movs	r2, #0
 8000e22:	e9c5 3200 	strd	r3, r2, [r5]
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d905      	bls.n	8000e3a <__udivmoddi4+0xb6>
 8000e2e:	b10d      	cbz	r5, 8000e34 <__udivmoddi4+0xb0>
 8000e30:	e9c5 0100 	strd	r0, r1, [r5]
 8000e34:	2100      	movs	r1, #0
 8000e36:	4608      	mov	r0, r1
 8000e38:	e7f5      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e3a:	fab3 f183 	clz	r1, r3
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d146      	bne.n	8000ed0 <__udivmoddi4+0x14c>
 8000e42:	4573      	cmp	r3, lr
 8000e44:	d302      	bcc.n	8000e4c <__udivmoddi4+0xc8>
 8000e46:	4282      	cmp	r2, r0
 8000e48:	f200 8105 	bhi.w	8001056 <__udivmoddi4+0x2d2>
 8000e4c:	1a84      	subs	r4, r0, r2
 8000e4e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e52:	2001      	movs	r0, #1
 8000e54:	4690      	mov	r8, r2
 8000e56:	2d00      	cmp	r5, #0
 8000e58:	d0e5      	beq.n	8000e26 <__udivmoddi4+0xa2>
 8000e5a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e5e:	e7e2      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	f000 8090 	beq.w	8000f86 <__udivmoddi4+0x202>
 8000e66:	fab2 f682 	clz	r6, r2
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	f040 80a4 	bne.w	8000fb8 <__udivmoddi4+0x234>
 8000e70:	1a8a      	subs	r2, r1, r2
 8000e72:	0c03      	lsrs	r3, r0, #16
 8000e74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e78:	b280      	uxth	r0, r0
 8000e7a:	b2bc      	uxth	r4, r7
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e82:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e8a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d907      	bls.n	8000ea2 <__udivmoddi4+0x11e>
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x11c>
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	f200 80e0 	bhi.w	8001060 <__udivmoddi4+0x2dc>
 8000ea0:	46c4      	mov	ip, r8
 8000ea2:	1a9b      	subs	r3, r3, r2
 8000ea4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ea8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000eac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000eb0:	fb02 f404 	mul.w	r4, r2, r4
 8000eb4:	429c      	cmp	r4, r3
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0x144>
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	f102 30ff 	add.w	r0, r2, #4294967295
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0x142>
 8000ec0:	429c      	cmp	r4, r3
 8000ec2:	f200 80ca 	bhi.w	800105a <__udivmoddi4+0x2d6>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	1b1b      	subs	r3, r3, r4
 8000eca:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ece:	e7a5      	b.n	8000e1c <__udivmoddi4+0x98>
 8000ed0:	f1c1 0620 	rsb	r6, r1, #32
 8000ed4:	408b      	lsls	r3, r1
 8000ed6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eda:	431f      	orrs	r7, r3
 8000edc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ee0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ee4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ee8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eec:	4323      	orrs	r3, r4
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	fa1f fc87 	uxth.w	ip, r7
 8000ef6:	fbbe f0f9 	udiv	r0, lr, r9
 8000efa:	0c1c      	lsrs	r4, r3, #16
 8000efc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f00:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f04:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f0e:	d909      	bls.n	8000f24 <__udivmoddi4+0x1a0>
 8000f10:	193c      	adds	r4, r7, r4
 8000f12:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f16:	f080 809c 	bcs.w	8001052 <__udivmoddi4+0x2ce>
 8000f1a:	45a6      	cmp	lr, r4
 8000f1c:	f240 8099 	bls.w	8001052 <__udivmoddi4+0x2ce>
 8000f20:	3802      	subs	r0, #2
 8000f22:	443c      	add	r4, r7
 8000f24:	eba4 040e 	sub.w	r4, r4, lr
 8000f28:	fa1f fe83 	uxth.w	lr, r3
 8000f2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f30:	fb09 4413 	mls	r4, r9, r3, r4
 8000f34:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f38:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f3c:	45a4      	cmp	ip, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1ce>
 8000f40:	193c      	adds	r4, r7, r4
 8000f42:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f46:	f080 8082 	bcs.w	800104e <__udivmoddi4+0x2ca>
 8000f4a:	45a4      	cmp	ip, r4
 8000f4c:	d97f      	bls.n	800104e <__udivmoddi4+0x2ca>
 8000f4e:	3b02      	subs	r3, #2
 8000f50:	443c      	add	r4, r7
 8000f52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f56:	eba4 040c 	sub.w	r4, r4, ip
 8000f5a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f5e:	4564      	cmp	r4, ip
 8000f60:	4673      	mov	r3, lr
 8000f62:	46e1      	mov	r9, ip
 8000f64:	d362      	bcc.n	800102c <__udivmoddi4+0x2a8>
 8000f66:	d05f      	beq.n	8001028 <__udivmoddi4+0x2a4>
 8000f68:	b15d      	cbz	r5, 8000f82 <__udivmoddi4+0x1fe>
 8000f6a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f6e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f72:	fa04 f606 	lsl.w	r6, r4, r6
 8000f76:	fa22 f301 	lsr.w	r3, r2, r1
 8000f7a:	431e      	orrs	r6, r3
 8000f7c:	40cc      	lsrs	r4, r1
 8000f7e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f82:	2100      	movs	r1, #0
 8000f84:	e74f      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000f86:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f8a:	0c01      	lsrs	r1, r0, #16
 8000f8c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f90:	b280      	uxth	r0, r0
 8000f92:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f96:	463b      	mov	r3, r7
 8000f98:	4638      	mov	r0, r7
 8000f9a:	463c      	mov	r4, r7
 8000f9c:	46b8      	mov	r8, r7
 8000f9e:	46be      	mov	lr, r7
 8000fa0:	2620      	movs	r6, #32
 8000fa2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000fa6:	eba2 0208 	sub.w	r2, r2, r8
 8000faa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000fae:	e766      	b.n	8000e7e <__udivmoddi4+0xfa>
 8000fb0:	4601      	mov	r1, r0
 8000fb2:	e718      	b.n	8000de6 <__udivmoddi4+0x62>
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	e72c      	b.n	8000e12 <__udivmoddi4+0x8e>
 8000fb8:	f1c6 0220 	rsb	r2, r6, #32
 8000fbc:	fa2e f302 	lsr.w	r3, lr, r2
 8000fc0:	40b7      	lsls	r7, r6
 8000fc2:	40b1      	lsls	r1, r6
 8000fc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fd2:	b2bc      	uxth	r4, r7
 8000fd4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb08 f904 	mul.w	r9, r8, r4
 8000fe2:	40b0      	lsls	r0, r6
 8000fe4:	4589      	cmp	r9, r1
 8000fe6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fea:	b280      	uxth	r0, r0
 8000fec:	d93e      	bls.n	800106c <__udivmoddi4+0x2e8>
 8000fee:	1879      	adds	r1, r7, r1
 8000ff0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ff4:	d201      	bcs.n	8000ffa <__udivmoddi4+0x276>
 8000ff6:	4589      	cmp	r9, r1
 8000ff8:	d81f      	bhi.n	800103a <__udivmoddi4+0x2b6>
 8000ffa:	eba1 0109 	sub.w	r1, r1, r9
 8000ffe:	fbb1 f9fe 	udiv	r9, r1, lr
 8001002:	fb09 f804 	mul.w	r8, r9, r4
 8001006:	fb0e 1119 	mls	r1, lr, r9, r1
 800100a:	b292      	uxth	r2, r2
 800100c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001010:	4542      	cmp	r2, r8
 8001012:	d229      	bcs.n	8001068 <__udivmoddi4+0x2e4>
 8001014:	18ba      	adds	r2, r7, r2
 8001016:	f109 31ff 	add.w	r1, r9, #4294967295
 800101a:	d2c4      	bcs.n	8000fa6 <__udivmoddi4+0x222>
 800101c:	4542      	cmp	r2, r8
 800101e:	d2c2      	bcs.n	8000fa6 <__udivmoddi4+0x222>
 8001020:	f1a9 0102 	sub.w	r1, r9, #2
 8001024:	443a      	add	r2, r7
 8001026:	e7be      	b.n	8000fa6 <__udivmoddi4+0x222>
 8001028:	45f0      	cmp	r8, lr
 800102a:	d29d      	bcs.n	8000f68 <__udivmoddi4+0x1e4>
 800102c:	ebbe 0302 	subs.w	r3, lr, r2
 8001030:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001034:	3801      	subs	r0, #1
 8001036:	46e1      	mov	r9, ip
 8001038:	e796      	b.n	8000f68 <__udivmoddi4+0x1e4>
 800103a:	eba7 0909 	sub.w	r9, r7, r9
 800103e:	4449      	add	r1, r9
 8001040:	f1a8 0c02 	sub.w	ip, r8, #2
 8001044:	fbb1 f9fe 	udiv	r9, r1, lr
 8001048:	fb09 f804 	mul.w	r8, r9, r4
 800104c:	e7db      	b.n	8001006 <__udivmoddi4+0x282>
 800104e:	4673      	mov	r3, lr
 8001050:	e77f      	b.n	8000f52 <__udivmoddi4+0x1ce>
 8001052:	4650      	mov	r0, sl
 8001054:	e766      	b.n	8000f24 <__udivmoddi4+0x1a0>
 8001056:	4608      	mov	r0, r1
 8001058:	e6fd      	b.n	8000e56 <__udivmoddi4+0xd2>
 800105a:	443b      	add	r3, r7
 800105c:	3a02      	subs	r2, #2
 800105e:	e733      	b.n	8000ec8 <__udivmoddi4+0x144>
 8001060:	f1ac 0c02 	sub.w	ip, ip, #2
 8001064:	443b      	add	r3, r7
 8001066:	e71c      	b.n	8000ea2 <__udivmoddi4+0x11e>
 8001068:	4649      	mov	r1, r9
 800106a:	e79c      	b.n	8000fa6 <__udivmoddi4+0x222>
 800106c:	eba1 0109 	sub.w	r1, r1, r9
 8001070:	46c4      	mov	ip, r8
 8001072:	fbb1 f9fe 	udiv	r9, r1, lr
 8001076:	fb09 f804 	mul.w	r8, r9, r4
 800107a:	e7c4      	b.n	8001006 <__udivmoddi4+0x282>

0800107c <__aeabi_idiv0>:
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop

08001080 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001084:	f3bf 8f4f 	dsb	sy
}
 8001088:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800108a:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <__NVIC_SystemReset+0x24>)
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001092:	4904      	ldr	r1, [pc, #16]	@ (80010a4 <__NVIC_SystemReset+0x24>)
 8001094:	4b04      	ldr	r3, [pc, #16]	@ (80010a8 <__NVIC_SystemReset+0x28>)
 8001096:	4313      	orrs	r3, r2
 8001098:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800109a:	f3bf 8f4f 	dsb	sy
}
 800109e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <__NVIC_SystemReset+0x20>
 80010a4:	e000ed00 	.word	0xe000ed00
 80010a8:	05fa0004 	.word	0x05fa0004

080010ac <ControlSequenceParserConsume>:
#endif

// --------------------------------------------------------------------------------------------------------------------
cspTYPE ControlSequenceParserConsume( char input, cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
#define CHECK_FOR_OVERFLOW(x) do { if ( ((x)+1) > s->maxLength ) \
	                          { s->type = ctrlOVERFLOW; s->length = 0; s->state = ctrlpsIDLE_DETECT; \
	                          return csptCONTROL; } } while(0)

	switch (s->state)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b04      	cmp	r3, #4
 80010be:	f200 8131 	bhi.w	8001324 <ControlSequenceParserConsume+0x278>
 80010c2:	a201      	add	r2, pc, #4	@ (adr r2, 80010c8 <ControlSequenceParserConsume+0x1c>)
 80010c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c8:	080010dd 	.word	0x080010dd
 80010cc:	08001133 	.word	0x08001133
 80010d0:	08001207 	.word	0x08001207
 80010d4:	08001271 	.word	0x08001271
 80010d8:	080012bb 	.word	0x080012bb
	{
	case ctrlpsIDLE_DETECT:
		// default start condition
		s->buff[0] = input;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	691b      	ldr	r3, [r3, #16]
 80010e0:	79fa      	ldrb	r2, [r7, #7]
 80010e2:	701a      	strb	r2, [r3, #0]
		s->buff[1] = ctrlC0_NUL;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	3301      	adds	r3, #1
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
		s->ptr = 0;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	2200      	movs	r2, #0
 80010f2:	605a      	str	r2, [r3, #4]
		s->length = 1;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	2201      	movs	r2, #1
 80010f8:	609a      	str	r2, [r3, #8]

		// escape code takes more than one byte in total length
		if (input == ctrlC0_ESC)
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	2b1b      	cmp	r3, #27
 80010fe:	d10a      	bne.n	8001116 <ControlSequenceParserConsume+0x6a>
		{
			s->state = ctrlpsSTART_C1;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	2201      	movs	r2, #1
 8001104:	701a      	strb	r2, [r3, #0]
			s->ptr = 1;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	2201      	movs	r2, #1
 800110a:	605a      	str	r2, [r3, #4]
			s->type = ctrlC0_ESC;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	221b      	movs	r2, #27
 8001110:	805a      	strh	r2, [r3, #2]
			return csptNONE;
 8001112:	2300      	movs	r3, #0
 8001114:	e107      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		}

		// single length control code
		else if ( ( /* input >= ctrlC0_NUL &&*/ (unsigned char)input <= (unsigned char)ctrlC0_US ) ||
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2b1f      	cmp	r3, #31
 800111a:	d902      	bls.n	8001122 <ControlSequenceParserConsume+0x76>
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001120:	d105      	bne.n	800112e <ControlSequenceParserConsume+0x82>
				  ( input == ctrlC0_DEL ) )
	    {
			s->type = input;
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	b29a      	uxth	r2, r3
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	805a      	strh	r2, [r3, #2]
			return csptCONTROL;
 800112a:	2302      	movs	r3, #2
 800112c:	e0fb      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
	    }

		// only a character, nothing else
		return csptCHARACTER;
 800112e:	2301      	movs	r3, #1
 8001130:	e0f9      	b.n	8001326 <ControlSequenceParserConsume+0x27a>

	case ctrlpsSTART_C1:

		// now we need to check the type of escape sequence
		s->buff[s->ptr++] = input;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	691a      	ldr	r2, [r3, #16]
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	1c58      	adds	r0, r3, #1
 800113c:	6839      	ldr	r1, [r7, #0]
 800113e:	6048      	str	r0, [r1, #4]
 8001140:	4413      	add	r3, r2
 8001142:	79fa      	ldrb	r2, [r7, #7]
 8001144:	701a      	strb	r2, [r3, #0]
		CHECK_FOR_OVERFLOW(s->ptr);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	1c5a      	adds	r2, r3, #1
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	429a      	cmp	r2, r3
 8001152:	d90b      	bls.n	800116c <ControlSequenceParserConsume+0xc0>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	f241 0201 	movw	r2, #4097	@ 0x1001
 800115a:	805a      	strh	r2, [r3, #2]
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
 8001168:	2302      	movs	r3, #2
 800116a:	e0dc      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		if ( input == '[' )
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	2b5b      	cmp	r3, #91	@ 0x5b
 8001170:	d107      	bne.n	8001182 <ControlSequenceParserConsume+0xd6>
		{
			s->type = ctrlC1_CSI;
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8001178:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsHANDLE_CSI;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	2202      	movs	r2, #2
 800117e:	701a      	strb	r2, [r3, #0]
 8001180:	e03f      	b.n	8001202 <ControlSequenceParserConsume+0x156>
		}
		else if ( input == 'X' )
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b58      	cmp	r3, #88	@ 0x58
 8001186:	d107      	bne.n	8001198 <ControlSequenceParserConsume+0xec>
		{
			s->type = ctrlC1_SOS;
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	f240 1203 	movw	r2, #259	@ 0x103
 800118e:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsHANDLE_ST_1;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	2203      	movs	r2, #3
 8001194:	701a      	strb	r2, [r3, #0]
 8001196:	e034      	b.n	8001202 <ControlSequenceParserConsume+0x156>
		}
		else if ( input == '^' )
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	2b5e      	cmp	r3, #94	@ 0x5e
 800119c:	d107      	bne.n	80011ae <ControlSequenceParserConsume+0x102>
		{
			s->type = ctrlC1_PM;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011a4:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsHANDLE_ST_1;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	2203      	movs	r2, #3
 80011aa:	701a      	strb	r2, [r3, #0]
 80011ac:	e029      	b.n	8001202 <ControlSequenceParserConsume+0x156>
		}
		else if ( input == '_' )
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	2b5f      	cmp	r3, #95	@ 0x5f
 80011b2:	d107      	bne.n	80011c4 <ControlSequenceParserConsume+0x118>
		{
			s->type = ctrlC1_APC;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	f240 1205 	movw	r2, #261	@ 0x105
 80011ba:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsHANDLE_ST_1;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	2203      	movs	r2, #3
 80011c0:	701a      	strb	r2, [r3, #0]
 80011c2:	e01e      	b.n	8001202 <ControlSequenceParserConsume+0x156>
		}
		else if ( input == '\\' )
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	2b5c      	cmp	r3, #92	@ 0x5c
 80011c8:	d107      	bne.n	80011da <ControlSequenceParserConsume+0x12e>
		{
			s->type = ctrlC1_ST;
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	f44f 7283 	mov.w	r2, #262	@ 0x106
 80011d0:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsHANDLE_ST_1;
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	2203      	movs	r2, #3
 80011d6:	701a      	strb	r2, [r3, #0]
 80011d8:	e013      	b.n	8001202 <ControlSequenceParserConsume+0x156>
		}
		else if ( input == 'P' )
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2b50      	cmp	r3, #80	@ 0x50
 80011de:	d107      	bne.n	80011f0 <ControlSequenceParserConsume+0x144>
		{
			s->type = ctrlC1_DCS;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	f240 1201 	movw	r2, #257	@ 0x101
 80011e6:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsHANDLE_ST_1;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	2203      	movs	r2, #3
 80011ec:	701a      	strb	r2, [r3, #0]
 80011ee:	e008      	b.n	8001202 <ControlSequenceParserConsume+0x156>
		}
		else
		{
			s->type = ctrlUNKNOWN;
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011f6:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsIDLE_DETECT;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
			return csptCONTROL;
 80011fe:	2302      	movs	r3, #2
 8001200:	e091      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		}
		return csptNONE;
 8001202:	2300      	movs	r3, #0
 8001204:	e08f      	b.n	8001326 <ControlSequenceParserConsume+0x27a>

	// data handling and termination of Control Sequence Introducer
	case ctrlpsHANDLE_CSI:
	{
		s->buff[s->ptr++] = input;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	691a      	ldr	r2, [r3, #16]
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	1c58      	adds	r0, r3, #1
 8001210:	6839      	ldr	r1, [r7, #0]
 8001212:	6048      	str	r0, [r1, #4]
 8001214:	4413      	add	r3, r2
 8001216:	79fa      	ldrb	r2, [r7, #7]
 8001218:	701a      	strb	r2, [r3, #0]
		CHECK_FOR_OVERFLOW(s->ptr);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	1c5a      	adds	r2, r3, #1
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	429a      	cmp	r2, r3
 8001226:	d90b      	bls.n	8001240 <ControlSequenceParserConsume+0x194>
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	f241 0201 	movw	r2, #4097	@ 0x1001
 800122e:	805a      	strh	r2, [r3, #2]
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
 800123c:	2302      	movs	r3, #2
 800123e:	e072      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		if ( input >= 0x40 && input <= 0x7E )
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	2b3f      	cmp	r3, #63	@ 0x3f
 8001244:	d912      	bls.n	800126c <ControlSequenceParserConsume+0x1c0>
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	2b7e      	cmp	r3, #126	@ 0x7e
 800124a:	d80f      	bhi.n	800126c <ControlSequenceParserConsume+0x1c0>
		{
			s->buff[s->ptr] = ctrlC0_NUL;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	691a      	ldr	r2, [r3, #16]
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	4413      	add	r3, r2
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
			s->length = s->ptr;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	609a      	str	r2, [r3, #8]
			s->state = ctrlpsIDLE_DETECT;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
			return csptCONTROL;
 8001268:	2302      	movs	r3, #2
 800126a:	e05c      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		}
		return csptNONE;
 800126c:	2300      	movs	r3, #0
 800126e:	e05a      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
	}

	// first part of ST terminator
	case ctrlpsHANDLE_ST_1:
	{
		s->buff[s->ptr++] = input;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	691a      	ldr	r2, [r3, #16]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	1c58      	adds	r0, r3, #1
 800127a:	6839      	ldr	r1, [r7, #0]
 800127c:	6048      	str	r0, [r1, #4]
 800127e:	4413      	add	r3, r2
 8001280:	79fa      	ldrb	r2, [r7, #7]
 8001282:	701a      	strb	r2, [r3, #0]
		CHECK_FOR_OVERFLOW(s->ptr);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	1c5a      	adds	r2, r3, #1
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	429a      	cmp	r2, r3
 8001290:	d90b      	bls.n	80012aa <ControlSequenceParserConsume+0x1fe>
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	f241 0201 	movw	r2, #4097	@ 0x1001
 8001298:	805a      	strh	r2, [r3, #2]
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
 80012a6:	2302      	movs	r3, #2
 80012a8:	e03d      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		if ( input == '\033' )
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b1b      	cmp	r3, #27
 80012ae:	d102      	bne.n	80012b6 <ControlSequenceParserConsume+0x20a>
		{
			s->state = ctrlpsHANDLE_ST_2;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	2204      	movs	r2, #4
 80012b4:	701a      	strb	r2, [r3, #0]
		}
		return csptNONE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e035      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
	}
	// second part of ST terminator
	case ctrlpsHANDLE_ST_2:
	{
		s->buff[s->ptr++] = input;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	691a      	ldr	r2, [r3, #16]
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	1c58      	adds	r0, r3, #1
 80012c4:	6839      	ldr	r1, [r7, #0]
 80012c6:	6048      	str	r0, [r1, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	79fa      	ldrb	r2, [r7, #7]
 80012cc:	701a      	strb	r2, [r3, #0]
		CHECK_FOR_OVERFLOW(s->ptr);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	1c5a      	adds	r2, r3, #1
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d90b      	bls.n	80012f4 <ControlSequenceParserConsume+0x248>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	f241 0201 	movw	r2, #4097	@ 0x1001
 80012e2:	805a      	strh	r2, [r3, #2]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
 80012f0:	2302      	movs	r3, #2
 80012f2:	e018      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		if ( input != '\\' )
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	2b5c      	cmp	r3, #92	@ 0x5c
 80012f8:	d004      	beq.n	8001304 <ControlSequenceParserConsume+0x258>
		{
			s->state = ctrlpsHANDLE_ST_1;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	2203      	movs	r2, #3
 80012fe:	701a      	strb	r2, [r3, #0]
			s->buff[s->ptr] = ctrlC0_NUL;
			s->length = s->ptr;
			s->state = ctrlpsIDLE_DETECT;
			return csptCONTROL;
		}
		return csptNONE;
 8001300:	2300      	movs	r3, #0
 8001302:	e010      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
			s->buff[s->ptr] = ctrlC0_NUL;
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	691a      	ldr	r2, [r3, #16]
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	4413      	add	r3, r2
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]
			s->length = s->ptr;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	609a      	str	r2, [r3, #8]
			s->state = ctrlpsIDLE_DETECT;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
			return csptCONTROL;
 8001320:	2302      	movs	r3, #2
 8001322:	e000      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
	}
	default:
		return csptCHARACTER;
 8001324:	2301      	movs	r3, #1
	}
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop

08001334 <ProcessCommand>:

// --------------------------------------------------------------------------------------------------------------------
static int ProcessCommand(char* command, int cmdLen, char** args, int numArgs, cmdState_t* c, int* isAlias, char* inputBuffer, int inbuffsz)
// --------------------------------------------------------------------------------------------------------------------
{
 8001334:	b590      	push	{r4, r7, lr}
 8001336:	b0d9      	sub	sp, #356	@ 0x164
 8001338:	af00      	add	r7, sp, #0
 800133a:	f507 74b0 	add.w	r4, r7, #352	@ 0x160
 800133e:	f5a4 74aa 	sub.w	r4, r4, #340	@ 0x154
 8001342:	6020      	str	r0, [r4, #0]
 8001344:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8001348:	f5a0 70ac 	sub.w	r0, r0, #344	@ 0x158
 800134c:	6001      	str	r1, [r0, #0]
 800134e:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8001352:	f5a1 71ae 	sub.w	r1, r1, #348	@ 0x15c
 8001356:	600a      	str	r2, [r1, #0]
 8001358:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 800135c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001360:	6013      	str	r3, [r2, #0]
	// here we have to look for a matching entry and therefore we have to search linearly through
	// our linked list of command entries
	xSemaphoreTakeRecursive( c->lockGuard, -1 );
 8001362:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f04f 31ff 	mov.w	r1, #4294967295
 800136c:	4618      	mov	r0, r3
 800136e:	f00d f9eb 	bl	800e748 <xQueueTakeMutexRecursive>
	cmdEntry_t* pElement = c->commands.lh_first;
 8001372:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
	int found = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
	int result = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
	while ( pElement != NULL )
 8001388:	e17b      	b.n	8001682 <ProcessCommand+0x34e>
	{
		// if string compare result and determined length match, then this must be the function
		if ( strncmp(command, pElement->content.cmd, cmdLen) == 0 && cmdLen == pElement->content.cmdLen )
 800138a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800138e:	f103 0108 	add.w	r1, r3, #8
 8001392:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001396:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80013a0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80013a4:	6818      	ldr	r0, [r3, #0]
 80013a6:	f012 fcf8 	bl	8013d9a <strncmp>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f040 8162 	bne.w	8001676 <ProcessCommand+0x342>
 80013b2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80013b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b8:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 80013bc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	f040 8157 	bne.w	8001676 <ProcessCommand+0x342>
		{
			found = 1;
 80013c8:	2301      	movs	r3, #1
 80013ca:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
			if ( pElement->content.isAlias )
 80013ce:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80013d2:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 8139 	beq.w	800164e <ProcessCommand+0x31a>
			{
				*isAlias = 1;
 80013dc:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80013e0:	2201      	movs	r2, #1
 80013e2:	601a      	str	r2, [r3, #0]
				// first we have to copy the arguments behind the command (as long as we have enough space)
				int currentArg = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
				int stillCopiedLength = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
				char tempInBuff[CONSOLE_LINE_SIZE + 1];
				char* tempArgs[CONSOLE_MAX_NUM_ARGS];
				memset(tempArgs, 0, sizeof(tempArgs));
 80013f0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80013f4:	22b0      	movs	r2, #176	@ 0xb0
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f012 fcb9 	bl	8013d70 <memset>
				for (int i = 0; i < numArgs; i++)
 80013fe:	2300      	movs	r3, #0
 8001400:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8001404:	e01d      	b.n	8001442 <ProcessCommand+0x10e>
				{
					tempArgs[i] = args[i] - inputBuffer + tempInBuff;
 8001406:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8001410:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001414:	6812      	ldr	r2, [r2, #0]
 8001416:	4413      	add	r3, r2
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	461a      	mov	r2, r3
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	441a      	add	r2, r3
 8001428:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001432:	443b      	add	r3, r7
 8001434:	f843 2cd0 	str.w	r2, [r3, #-208]
				for (int i = 0; i < numArgs; i++)
 8001438:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800143c:	3301      	adds	r3, #1
 800143e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8001442:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001446:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800144a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	429a      	cmp	r2, r3
 8001452:	dbd8      	blt.n	8001406 <ProcessCommand+0xd2>
				}
				memcpy(tempInBuff, inputBuffer, inbuffsz);
 8001454:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	f8d7 1178 	ldr.w	r1, [r7, #376]	@ 0x178
 8001460:	4618      	mov	r0, r3
 8001462:	f012 fdeb 	bl	801403c <memcpy>
				while (numArgs > 0)
 8001466:	e0b2      	b.n	80015ce <ProcessCommand+0x29a>
				{
					// all args are NULL-terminated so we can safely use strlen
					int argCopyLen = strlen(tempArgs[currentArg]);
 8001468:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001472:	443b      	add	r3, r7
 8001474:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 8001478:	4618      	mov	r0, r3
 800147a:	f7fe ff29 	bl	80002d0 <strlen>
 800147e:	4603      	mov	r3, r0
 8001480:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
					int additionalTermination = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
					if (*(tempArgs[currentArg] - 1) == '"' || tempArgs[currentArg] == NULL)
 800148a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001494:	443b      	add	r3, r7
 8001496:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 800149a:	3b01      	subs	r3, #1
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b22      	cmp	r3, #34	@ 0x22
 80014a0:	d009      	beq.n	80014b6 <ProcessCommand+0x182>
 80014a2:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80014ac:	443b      	add	r3, r7
 80014ae:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <ProcessCommand+0x188>
					{
						additionalTermination = 1;
 80014b6:	2301      	movs	r3, #1
 80014b8:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
					}
					if ((argCopyLen + pElement->content.helpLen + stillCopiedLength + 1) > inbuffsz)
 80014bc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80014c0:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 80014c4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80014c8:	441a      	add	r2, r3
 80014ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80014ce:	4413      	add	r3, r2
 80014d0:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dc0d      	bgt.n	80014f4 <ProcessCommand+0x1c0>
					{
						printf("\033[31mAlias Argument Substitution Overflow\033[0m");
 80014d8:	487b      	ldr	r0, [pc, #492]	@ (80016c8 <ProcessCommand+0x394>)
 80014da:	f012 f9f3 	bl	80138c4 <iprintf>
						result = -1;
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
 80014e2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
						*isAlias = 0;
 80014e6:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
						return result;
 80014ee:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80014f2:	e0e4      	b.n	80016be <ProcessCommand+0x38a>
					}
					if (additionalTermination)
 80014f4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d011      	beq.n	8001520 <ProcessCommand+0x1ec>
					{
						inputBuffer[pElement->content.helpLen + stillCopiedLength + 1] = '"';
 80014fc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001500:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 8001504:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001508:	4413      	add	r3, r2
 800150a:	3301      	adds	r3, #1
 800150c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001510:	4413      	add	r3, r2
 8001512:	2222      	movs	r2, #34	@ 0x22
 8001514:	701a      	strb	r2, [r3, #0]
						stillCopiedLength += 1;
 8001516:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800151a:	3301      	adds	r3, #1
 800151c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
					}
					memcpy(&inputBuffer[pElement->content.helpLen + stillCopiedLength + 1], tempArgs[currentArg], argCopyLen);
 8001520:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001524:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 8001528:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800152c:	4413      	add	r3, r2
 800152e:	3301      	adds	r3, #1
 8001530:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001534:	18d0      	adds	r0, r2, r3
 8001536:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001540:	443b      	add	r3, r7
 8001542:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 8001546:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 800154a:	4619      	mov	r1, r3
 800154c:	f012 fd76 	bl	801403c <memcpy>
					stillCopiedLength += argCopyLen;
 8001550:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001554:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001558:	4413      	add	r3, r2
 800155a:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
					if (additionalTermination)
 800155e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001562:	2b00      	cmp	r3, #0
 8001564:	d011      	beq.n	800158a <ProcessCommand+0x256>
					{
						inputBuffer[pElement->content.helpLen + stillCopiedLength + 1] = '"';
 8001566:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800156a:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 800156e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001572:	4413      	add	r3, r2
 8001574:	3301      	adds	r3, #1
 8001576:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800157a:	4413      	add	r3, r2
 800157c:	2222      	movs	r2, #34	@ 0x22
 800157e:	701a      	strb	r2, [r3, #0]
						stillCopiedLength += 1;
 8001580:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001584:	3301      	adds	r3, #1
 8001586:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
					}
					inputBuffer[pElement->content.helpLen + stillCopiedLength + 1] = ' ';
 800158a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800158e:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 8001592:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001596:	4413      	add	r3, r2
 8001598:	3301      	adds	r3, #1
 800159a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800159e:	4413      	add	r3, r2
 80015a0:	2220      	movs	r2, #32
 80015a2:	701a      	strb	r2, [r3, #0]
					stillCopiedLength += 1;
 80015a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80015a8:	3301      	adds	r3, #1
 80015aa:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
					numArgs -= 1;
 80015ae:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80015b2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80015b6:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 80015ba:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80015be:	6812      	ldr	r2, [r2, #0]
 80015c0:	3a01      	subs	r2, #1
 80015c2:	601a      	str	r2, [r3, #0]
					currentArg += 1;
 80015c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80015c8:	3301      	adds	r3, #1
 80015ca:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
				while (numArgs > 0)
 80015ce:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80015d2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f73f af45 	bgt.w	8001468 <ProcessCommand+0x134>
				}

				memcpy(inputBuffer, pElement->content.help, pElement->content.helpLen);
 80015de:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80015e2:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 80015e6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80015ea:	f8d3 3254 	ldr.w	r3, [r3, #596]	@ 0x254
 80015ee:	461a      	mov	r2, r3
 80015f0:	f8d7 0178 	ldr.w	r0, [r7, #376]	@ 0x178
 80015f4:	f012 fd22 	bl	801403c <memcpy>
				memset(&inputBuffer[pElement->content.helpLen+ stillCopiedLength], 0, inbuffsz-(pElement->content.helpLen+stillCopiedLength));
 80015f8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80015fc:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 8001600:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001604:	4413      	add	r3, r2
 8001606:	461a      	mov	r2, r3
 8001608:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800160c:	1898      	adds	r0, r3, r2
 800160e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001612:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 8001616:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800161a:	4413      	add	r3, r2
 800161c:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	461a      	mov	r2, r3
 8001624:	2100      	movs	r1, #0
 8001626:	f012 fba3 	bl	8013d70 <memset>
				if (currentArg != 0) inputBuffer[pElement->content.helpLen] = ' ';
 800162a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800162e:	2b00      	cmp	r3, #0
 8001630:	d009      	beq.n	8001646 <ProcessCommand+0x312>
 8001632:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001636:	f8d3 3254 	ldr.w	r3, [r3, #596]	@ 0x254
 800163a:	461a      	mov	r2, r3
 800163c:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001640:	4413      	add	r3, r2
 8001642:	2220      	movs	r2, #32
 8001644:	701a      	strb	r2, [r3, #0]
				result = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
			}
			else
			{
				result = pElement->content.func(numArgs, args, pElement->content.ctx);
			}
			break;
 800164c:	e01e      	b.n	800168c <ProcessCommand+0x358>
				result = pElement->content.func(numArgs, args, pElement->content.ctx);
 800164e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8001658:	6852      	ldr	r2, [r2, #4]
 800165a:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 800165e:	f5a1 71ae 	sub.w	r1, r1, #348	@ 0x15c
 8001662:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8001666:	f5a0 70b0 	sub.w	r0, r0, #352	@ 0x160
 800166a:	6809      	ldr	r1, [r1, #0]
 800166c:	6800      	ldr	r0, [r0, #0]
 800166e:	4798      	blx	r3
 8001670:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
			break;
 8001674:	e00a      	b.n	800168c <ProcessCommand+0x358>
		}

		pElement = pElement->navigate.le_next;
 8001676:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800167a:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 800167e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
	while ( pElement != NULL )
 8001682:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001686:	2b00      	cmp	r3, #0
 8001688:	f47f ae7f 	bne.w	800138a <ProcessCommand+0x56>
	}

	xSemaphoreGiveRecursive( c->lockGuard );
 800168c:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f00d f81c 	bl	800e6d0 <xQueueGiveMutexRecursive>
	if ( found == 0 )
 8001698:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800169c:	2b00      	cmp	r3, #0
 800169e:	d10c      	bne.n	80016ba <ProcessCommand+0x386>
	{
		printf("\033[31mInvalid command\033[0m");
 80016a0:	480a      	ldr	r0, [pc, #40]	@ (80016cc <ProcessCommand+0x398>)
 80016a2:	f012 f90f 	bl	80138c4 <iprintf>
		fflush(stdout);
 80016a6:	4b0a      	ldr	r3, [pc, #40]	@ (80016d0 <ProcessCommand+0x39c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f011 ffc7 	bl	8013640 <fflush>
		result = -1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
	}
	return result;
 80016ba:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
}
 80016be:	4618      	mov	r0, r3
 80016c0:	f507 77b2 	add.w	r7, r7, #356	@ 0x164
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd90      	pop	{r4, r7, pc}
 80016c8:	080167a8 	.word	0x080167a8
 80016cc:	080167d8 	.word	0x080167d8
 80016d0:	200001d4 	.word	0x200001d4

080016d4 <TransformAndProcessTheCommand>:

// --------------------------------------------------------------------------------------------------------------------
static int TransformAndProcessTheCommand(char* lineBuff, int line_size, cmdState_t* cState)
// --------------------------------------------------------------------------------------------------------------------
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b0be      	sub	sp, #248	@ 0xf8
 80016d8:	af04      	add	r7, sp, #16
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
	int numArgs;
	int isAlias;

	char* args[CONSOLE_MAX_NUM_ARGS];
	char* command;
	char* strtokNewIndex = NULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

restart:
	startIdx = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	endIdx = CONSOLE_LINE_SIZE - 1;
 80016ec:	2377      	movs	r3, #119	@ 0x77
 80016ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	numArgs = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	isAlias = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	command = NULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

	memset(args, 0, sizeof(args));
 8001704:	f107 0310 	add.w	r3, r7, #16
 8001708:	22b0      	movs	r2, #176	@ 0xb0
 800170a:	2100      	movs	r1, #0
 800170c:	4618      	mov	r0, r3
 800170e:	f012 fb2f 	bl	8013d70 <memset>

	if ( lineBuff[startIdx] == '\0' ) return 0;
 8001712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	4413      	add	r3, r2
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d10d      	bne.n	800173c <TransformAndProcessTheCommand+0x68>
 8001720:	2300      	movs	r3, #0
 8001722:	e118      	b.n	8001956 <TransformAndProcessTheCommand+0x282>

	while(startIdx < line_size)
	{
		if ( lineBuff[startIdx] != ' ' ) break;
 8001724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	4413      	add	r3, r2
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b20      	cmp	r3, #32
 8001730:	d10a      	bne.n	8001748 <TransformAndProcessTheCommand+0x74>
		startIdx += 1;
 8001732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001736:	3301      	adds	r3, #1
 8001738:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	while(startIdx < line_size)
 800173c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	429a      	cmp	r2, r3
 8001744:	dbee      	blt.n	8001724 <TransformAndProcessTheCommand+0x50>
 8001746:	e014      	b.n	8001772 <TransformAndProcessTheCommand+0x9e>
		if ( lineBuff[startIdx] != ' ' ) break;
 8001748:	bf00      	nop
	}

	while(endIdx > 0)
 800174a:	e012      	b.n	8001772 <TransformAndProcessTheCommand+0x9e>
	{
		if ( lineBuff[endIdx] != '\0' && lineBuff[endIdx] != ' ' ) break;
 800174c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d006      	beq.n	8001768 <TransformAndProcessTheCommand+0x94>
 800175a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	4413      	add	r3, r2
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b20      	cmp	r3, #32
 8001766:	d109      	bne.n	800177c <TransformAndProcessTheCommand+0xa8>
		endIdx -= 1;
 8001768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800176c:	3b01      	subs	r3, #1
 800176e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	while(endIdx > 0)
 8001772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001776:	2b00      	cmp	r3, #0
 8001778:	dce8      	bgt.n	800174c <TransformAndProcessTheCommand+0x78>
 800177a:	e000      	b.n	800177e <TransformAndProcessTheCommand+0xaa>
		if ( lineBuff[endIdx] != '\0' && lineBuff[endIdx] != ' ' ) break;
 800177c:	bf00      	nop
	}

	if ( startIdx <= endIdx )
 800177e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001786:	429a      	cmp	r2, r3
 8001788:	f300 80e4 	bgt.w	8001954 <TransformAndProcessTheCommand+0x280>
	{
		// strtok is safe because we have a nulled safety margin behind the string
		command = strtok(&lineBuff[startIdx], " ");
 800178c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	4972      	ldr	r1, [pc, #456]	@ (8001960 <TransformAndProcessTheCommand+0x28c>)
 8001796:	4618      	mov	r0, r3
 8001798:	f012 fb1e 	bl	8013dd8 <strtok>
 800179c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0

		// some sanity checks before tokenizing
		if ( command == NULL ) return 0;
 80017a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <TransformAndProcessTheCommand+0xd8>
 80017a8:	2300      	movs	r3, #0
 80017aa:	e0d4      	b.n	8001956 <TransformAndProcessTheCommand+0x282>
		if ((int)strnlen(command, line_size) == 0 ) return 0;
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	4619      	mov	r1, r3
 80017b0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 80017b4:	f012 fb03 	bl	8013dbe <strnlen>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <TransformAndProcessTheCommand+0xee>
 80017be:	2300      	movs	r3, #0
 80017c0:	e0c9      	b.n	8001956 <TransformAndProcessTheCommand+0x282>

		int cmdLength = (int)strnlen(command, line_size);
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	4619      	mov	r1, r3
 80017c6:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 80017ca:	f012 faf8 	bl	8013dbe <strnlen>
 80017ce:	4603      	mov	r3, r0
 80017d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

		// now get the arguments
		while((args[numArgs] = strtok(strtokNewIndex, " ")) != NULL && numArgs < CONSOLE_MAX_NUM_ARGS)
 80017d4:	e086      	b.n	80018e4 <TransformAndProcessTheCommand+0x210>
		{
			strtokNewIndex = NULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			if (args[numArgs][0] == '"')
 80017dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	33e8      	adds	r3, #232	@ 0xe8
 80017e4:	443b      	add	r3, r7
 80017e6:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b22      	cmp	r3, #34	@ 0x22
 80017ee:	d174      	bne.n	80018da <TransformAndProcessTheCommand+0x206>
			{
				// move the argument to remove the quotes
				args[numArgs] += 1;
 80017f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	33e8      	adds	r3, #232	@ 0xe8
 80017f8:	443b      	add	r3, r7
 80017fa:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	33e8      	adds	r3, #232	@ 0xe8
 8001808:	443b      	add	r3, r7
 800180a:	f843 2cd8 	str.w	r2, [r3, #-216]
				if (args[numArgs][0] == '"') {
 800180e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	33e8      	adds	r3, #232	@ 0xe8
 8001816:	443b      	add	r3, r7
 8001818:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b22      	cmp	r3, #34	@ 0x22
 8001820:	d113      	bne.n	800184a <TransformAndProcessTheCommand+0x176>
					args[numArgs][0] = '\0';
 8001822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	33e8      	adds	r3, #232	@ 0xe8
 800182a:	443b      	add	r3, r7
 800182c:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]
					// we have to add a plus 2 because there is the '"' char and '\0' from strtok as second
					// char. So we need to add 2 chars to get to the next valid char or the end of the string
					strtokNewIndex = &args[numArgs][2];
 8001834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	33e8      	adds	r3, #232	@ 0xe8
 800183c:	443b      	add	r3, r7
 800183e:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001842:	3302      	adds	r3, #2
 8001844:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001848:	e047      	b.n	80018da <TransformAndProcessTheCommand+0x206>
				}
				else
				{
					// now look for the end of the argument and set new strtok index to this
					// string part
					int firstLen = strlen(args[numArgs]);
 800184a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	33e8      	adds	r3, #232	@ 0xe8
 8001852:	443b      	add	r3, r7
 8001854:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fd39 	bl	80002d0 <strlen>
 800185e:	4603      	mov	r3, r0
 8001860:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
					args[numArgs][firstLen] = ' ';
 8001864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	33e8      	adds	r3, #232	@ 0xe8
 800186c:	443b      	add	r3, r7
 800186e:	f853 2cd8 	ldr.w	r2, [r3, #-216]
 8001872:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001876:	4413      	add	r3, r2
 8001878:	2220      	movs	r2, #32
 800187a:	701a      	strb	r2, [r3, #0]
					char* endChar = &args[numArgs][firstLen-1];
 800187c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	33e8      	adds	r3, #232	@ 0xe8
 8001884:	443b      	add	r3, r7
 8001886:	f853 2cd8 	ldr.w	r2, [r3, #-216]
 800188a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800188e:	3b01      	subs	r3, #1
 8001890:	4413      	add	r3, r2
 8001892:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
					// while loop is safe because we have a nulled safety margin behind the string
					while (*endChar != '\0' && *endChar != '"') endChar += 1;
 8001896:	e004      	b.n	80018a2 <TransformAndProcessTheCommand+0x1ce>
 8001898:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800189c:	3301      	adds	r3, #1
 800189e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80018a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d004      	beq.n	80018b6 <TransformAndProcessTheCommand+0x1e2>
 80018ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b22      	cmp	r3, #34	@ 0x22
 80018b4:	d1f0      	bne.n	8001898 <TransformAndProcessTheCommand+0x1c4>
					if (*endChar == '"') {
 80018b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b22      	cmp	r3, #34	@ 0x22
 80018be:	d108      	bne.n	80018d2 <TransformAndProcessTheCommand+0x1fe>
						*endChar = '\0'; endChar += 1;
 80018c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
 80018c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018cc:	3301      	adds	r3, #1
 80018ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
					}
					strtokNewIndex = endChar;
 80018d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
				}
			}
			numArgs+=1;
 80018da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80018de:	3301      	adds	r3, #1
 80018e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		while((args[numArgs] = strtok(strtokNewIndex, " ")) != NULL && numArgs < CONSOLE_MAX_NUM_ARGS)
 80018e4:	491e      	ldr	r1, [pc, #120]	@ (8001960 <TransformAndProcessTheCommand+0x28c>)
 80018e6:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 80018ea:	f012 fa75 	bl	8013dd8 <strtok>
 80018ee:	4602      	mov	r2, r0
 80018f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	33e8      	adds	r3, #232	@ 0xe8
 80018f8:	443b      	add	r3, r7
 80018fa:	f843 2cd8 	str.w	r2, [r3, #-216]
 80018fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	33e8      	adds	r3, #232	@ 0xe8
 8001906:	443b      	add	r3, r7
 8001908:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d004      	beq.n	800191a <TransformAndProcessTheCommand+0x246>
 8001910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001914:	2b2b      	cmp	r3, #43	@ 0x2b
 8001916:	f77f af5e 	ble.w	80017d6 <TransformAndProcessTheCommand+0x102>
		}

		// now call the command
		int retVal = ProcessCommand(command, cmdLength, args, numArgs, cState, &isAlias, lineBuff, line_size);
 800191a:	f107 0210 	add.w	r2, r7, #16
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	9303      	str	r3, [sp, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	9302      	str	r3, [sp, #8]
 8001926:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001934:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8001938:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 800193c:	f7ff fcfa 	bl	8001334 <ProcessCommand>
 8001940:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
		if ( isAlias )
 8001944:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d000      	beq.n	800194e <TransformAndProcessTheCommand+0x27a>
		{
			// in case it is an alias, the line buffer has been overwritten with the alias and so we have to do
			// this round again
			goto restart;
 800194c:	e6cb      	b.n	80016e6 <TransformAndProcessTheCommand+0x12>
		}
		return retVal;
 800194e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001952:	e000      	b.n	8001956 <TransformAndProcessTheCommand+0x282>
	}

	return 0;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	37e8      	adds	r7, #232	@ 0xe8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	080167f4 	.word	0x080167f4

08001964 <PrintConsoleControl>:

// --------------------------------------------------------------------------------------------------------------------
static void PrintConsoleControl( cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	if ( s->length >= 3 && s->type == ctrlC1_CSI )
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d91d      	bls.n	80019b0 <PrintConsoleControl+0x4c>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	885b      	ldrh	r3, [r3, #2]
 8001978:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800197c:	d118      	bne.n	80019b0 <PrintConsoleControl+0x4c>
	{
		for ( unsigned int i = 0; i < s->length; i ++ )
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	e00a      	b.n	800199a <PrintConsoleControl+0x36>
		{
			putchar(s->buff[i]);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691a      	ldr	r2, [r3, #16]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4413      	add	r3, r2
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f011 ffaa 	bl	80138e8 <putchar>
		for ( unsigned int i = 0; i < s->length; i ++ )
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	3301      	adds	r3, #1
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d3ef      	bcc.n	8001984 <PrintConsoleControl+0x20>
		}
		fflush(stdout);
 80019a4:	4b04      	ldr	r3, [pc, #16]	@ (80019b8 <PrintConsoleControl+0x54>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f011 fe48 	bl	8013640 <fflush>
	}
}
 80019b0:	bf00      	nop
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	200001d4 	.word	0x200001d4

080019bc <ConsoleIsArrowLeft>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleIsArrowLeft( cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
	return ( s->length >= 3 && s->type == ctrlC1_CSI && s->buff[2] == 68);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d90c      	bls.n	80019e6 <ConsoleIsArrowLeft+0x2a>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	885b      	ldrh	r3, [r3, #2]
 80019d0:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80019d4:	d107      	bne.n	80019e6 <ConsoleIsArrowLeft+0x2a>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	3302      	adds	r3, #2
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b44      	cmp	r3, #68	@ 0x44
 80019e0:	d101      	bne.n	80019e6 <ConsoleIsArrowLeft+0x2a>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <ConsoleIsArrowLeft+0x2c>
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <ConsoleIsArrowRight>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleIsArrowRight( cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	return ( s->length >= 3 && s->type == ctrlC1_CSI && s->buff[2] == 67);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d90c      	bls.n	8001a1e <ConsoleIsArrowRight+0x2a>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	885b      	ldrh	r3, [r3, #2]
 8001a08:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001a0c:	d107      	bne.n	8001a1e <ConsoleIsArrowRight+0x2a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	3302      	adds	r3, #2
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b43      	cmp	r3, #67	@ 0x43
 8001a18:	d101      	bne.n	8001a1e <ConsoleIsArrowRight+0x2a>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <ConsoleIsArrowRight+0x2c>
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <ConsoleIsArrowUp>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleIsArrowUp( cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	return ( s->length >= 3 && s->type == ctrlC1_CSI && s->buff[2] == 65);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d90c      	bls.n	8001a56 <ConsoleIsArrowUp+0x2a>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	885b      	ldrh	r3, [r3, #2]
 8001a40:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001a44:	d107      	bne.n	8001a56 <ConsoleIsArrowUp+0x2a>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	3302      	adds	r3, #2
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b41      	cmp	r3, #65	@ 0x41
 8001a50:	d101      	bne.n	8001a56 <ConsoleIsArrowUp+0x2a>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <ConsoleIsArrowUp+0x2c>
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <ConsoleIsArrowDown>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleIsArrowDown( cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
	return ( s->length >= 3 && s->type == ctrlC1_CSI && s->buff[2] == 66);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d90c      	bls.n	8001a8e <ConsoleIsArrowDown+0x2a>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	885b      	ldrh	r3, [r3, #2]
 8001a78:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001a7c:	d107      	bne.n	8001a8e <ConsoleIsArrowDown+0x2a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	3302      	adds	r3, #2
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b42      	cmp	r3, #66	@ 0x42
 8001a88:	d101      	bne.n	8001a8e <ConsoleIsArrowDown+0x2a>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <ConsoleIsArrowDown+0x2c>
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <ConsoleIsEntf>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleIsEntf( cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	return ( s->length >= 4 && s->type == ctrlC1_CSI && s->buff[2] == 51 && s->buff[3] == 126);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d912      	bls.n	8001ad2 <ConsoleIsEntf+0x36>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	885b      	ldrh	r3, [r3, #2]
 8001ab0:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001ab4:	d10d      	bne.n	8001ad2 <ConsoleIsEntf+0x36>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	3302      	adds	r3, #2
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b33      	cmp	r3, #51	@ 0x33
 8001ac0:	d107      	bne.n	8001ad2 <ConsoleIsEntf+0x36>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	3303      	adds	r3, #3
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b7e      	cmp	r3, #126	@ 0x7e
 8001acc:	d101      	bne.n	8001ad2 <ConsoleIsEntf+0x36>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <ConsoleIsEntf+0x38>
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <PrintConsoleArrowLeft>:

// --------------------------------------------------------------------------------------------------------------------
static void PrintConsoleArrowLeft( void )
// --------------------------------------------------------------------------------------------------------------------
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
	putchar('\033');
 8001ae4:	201b      	movs	r0, #27
 8001ae6:	f011 feff 	bl	80138e8 <putchar>
	putchar('[');
 8001aea:	205b      	movs	r0, #91	@ 0x5b
 8001aec:	f011 fefc 	bl	80138e8 <putchar>
	putchar(68);
 8001af0:	2044      	movs	r0, #68	@ 0x44
 8001af2:	f011 fef9 	bl	80138e8 <putchar>
	fflush(stdout);
 8001af6:	4b04      	ldr	r3, [pc, #16]	@ (8001b08 <PrintConsoleArrowLeft+0x28>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f011 fd9f 	bl	8013640 <fflush>
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	200001d4 	.word	0x200001d4

08001b0c <CONSOLE_RedirectStreams>:

// --------------------------------------------------------------------------------------------------------------------
int CONSOLE_RedirectStreams( ConsoleHandle_t h, ConsoleReadStream_t rdFunc, ConsoleWriteStream_t wrFunc,
		void* rdContext, void* wrContext )
// --------------------------------------------------------------------------------------------------------------------
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	@ 0x28
 8001b10:	af02      	add	r7, sp, #8
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	603b      	str	r3, [r7, #0]
#ifndef __NEWLIB__ // so far only newlib is supported
	return -2;
#else
	// we can only exec the real stream redirection when we are the console thread itself and the scheduler is running,
	// otherwise we have to set the request to pending state
	if ( ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) && ( xTaskGetCurrentTaskHandle() == h->tHandle ) )
 8001b1a:	f00e fdd9 	bl	80106d0 <xTaskGetSchedulerState>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d165      	bne.n	8001bf0 <CONSOLE_RedirectStreams+0xe4>
 8001b24:	f00e fdc4 	bl	80106b0 <xTaskGetCurrentTaskHandle>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d15e      	bne.n	8001bf0 <CONSOLE_RedirectStreams+0xe4>
	{
		FILE* rdToClean = NULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
		if ( _impure_ptr->_stdin != &__sf[0])
 8001b36:	4b3c      	ldr	r3, [pc, #240]	@ (8001c28 <CONSOLE_RedirectStreams+0x11c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	4a3b      	ldr	r2, [pc, #236]	@ (8001c2c <CONSOLE_RedirectStreams+0x120>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d003      	beq.n	8001b4a <CONSOLE_RedirectStreams+0x3e>
		{
			rdToClean = _impure_ptr->_stdin;
 8001b42:	4b39      	ldr	r3, [pc, #228]	@ (8001c28 <CONSOLE_RedirectStreams+0x11c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	61fb      	str	r3, [r7, #28]
		}

		FILE* wrToClean = NULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61bb      	str	r3, [r7, #24]
		if ( _impure_ptr->_stdout != &__sf[1])
 8001b4e:	4b36      	ldr	r3, [pc, #216]	@ (8001c28 <CONSOLE_RedirectStreams+0x11c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	4a36      	ldr	r2, [pc, #216]	@ (8001c30 <CONSOLE_RedirectStreams+0x124>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d003      	beq.n	8001b62 <CONSOLE_RedirectStreams+0x56>
		{
			wrToClean = _impure_ptr->_stdout;
 8001b5a:	4b33      	ldr	r3, [pc, #204]	@ (8001c28 <CONSOLE_RedirectStreams+0x11c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	61bb      	str	r3, [r7, #24]
		}

		FILE* myStdOut = &__sf[1];
 8001b62:	4b33      	ldr	r3, [pc, #204]	@ (8001c30 <CONSOLE_RedirectStreams+0x124>)
 8001b64:	617b      	str	r3, [r7, #20]
		if ( wrFunc != NULL )
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00e      	beq.n	8001b8a <CONSOLE_RedirectStreams+0x7e>
		{
			myStdOut = fwopen(wrContext, wrFunc);
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	2300      	movs	r3, #0
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	2100      	movs	r1, #0
 8001b76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001b78:	f012 f8ea 	bl	8013d50 <funopen>
 8001b7c:	6178      	str	r0, [r7, #20]
			if ( myStdOut == NULL ) return -1;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d102      	bne.n	8001b8a <CONSOLE_RedirectStreams+0x7e>
 8001b84:	f04f 33ff 	mov.w	r3, #4294967295
 8001b88:	e049      	b.n	8001c1e <CONSOLE_RedirectStreams+0x112>
		}

		FILE* myStdIn = &__sf[0];
 8001b8a:	4b28      	ldr	r3, [pc, #160]	@ (8001c2c <CONSOLE_RedirectStreams+0x120>)
 8001b8c:	613b      	str	r3, [r7, #16]
		if ( rdFunc != NULL )
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d018      	beq.n	8001bc6 <CONSOLE_RedirectStreams+0xba>
		{
			myStdIn = fropen(rdContext, rdFunc);
 8001b94:	2300      	movs	r3, #0
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	2300      	movs	r3, #0
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	68b9      	ldr	r1, [r7, #8]
 8001b9e:	6838      	ldr	r0, [r7, #0]
 8001ba0:	f012 f8d6 	bl	8013d50 <funopen>
 8001ba4:	6138      	str	r0, [r7, #16]
			if ( myStdIn == NULL )
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10c      	bne.n	8001bc6 <CONSOLE_RedirectStreams+0xba>
			{
				if ( myStdOut != NULL && myStdOut != &__sf[1]) fclose(myStdOut);
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d006      	beq.n	8001bc0 <CONSOLE_RedirectStreams+0xb4>
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	4a1e      	ldr	r2, [pc, #120]	@ (8001c30 <CONSOLE_RedirectStreams+0x124>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d002      	beq.n	8001bc0 <CONSOLE_RedirectStreams+0xb4>
 8001bba:	6978      	ldr	r0, [r7, #20]
 8001bbc:	f011 fc8c 	bl	80134d8 <fclose>
				return -1;
 8001bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc4:	e02b      	b.n	8001c1e <CONSOLE_RedirectStreams+0x112>
			}
		}

		_impure_ptr->_stdin  = myStdIn;
 8001bc6:	4b18      	ldr	r3, [pc, #96]	@ (8001c28 <CONSOLE_RedirectStreams+0x11c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	605a      	str	r2, [r3, #4]
		_impure_ptr->_stdout = myStdOut;
 8001bce:	4b16      	ldr	r3, [pc, #88]	@ (8001c28 <CONSOLE_RedirectStreams+0x11c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	609a      	str	r2, [r3, #8]

		if (wrToClean != NULL) fclose(wrToClean);
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <CONSOLE_RedirectStreams+0xd6>
 8001bdc:	69b8      	ldr	r0, [r7, #24]
 8001bde:	f011 fc7b 	bl	80134d8 <fclose>
		if (rdToClean != NULL) fclose(rdToClean);
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d018      	beq.n	8001c1a <CONSOLE_RedirectStreams+0x10e>
 8001be8:	69f8      	ldr	r0, [r7, #28]
 8001bea:	f011 fc75 	bl	80134d8 <fclose>
	{
 8001bee:	e014      	b.n	8001c1a <CONSOLE_RedirectStreams+0x10e>
	}
	else
	{
		h->pendingRedirect = 1;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
		h->pendingRdStream = rdFunc;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
		h->pendingWrStream = wrFunc;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
		h->pendingRdCtx    = rdContext;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
		h->pendingWrCtx    = wrContext;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c14:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
 8001c18:	e000      	b.n	8001c1c <CONSOLE_RedirectStreams+0x110>
	{
 8001c1a:	bf00      	nop
	}
#endif
	return 0;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3720      	adds	r7, #32
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200001d4 	.word	0x200001d4
 8001c2c:	20000654 	.word	0x20000654
 8001c30:	200006bc 	.word	0x200006bc

08001c34 <ConsoleFunction>:

// --------------------------------------------------------------------------------------------------------------------
static void ConsoleFunction( void * arg )
// --------------------------------------------------------------------------------------------------------------------
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b09a      	sub	sp, #104	@ 0x68
 8001c38:	af02      	add	r7, sp, #8
 8001c3a:	6078      	str	r0, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)arg;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	627b      	str	r3, [r7, #36]	@ 0x24
	if (h == NULL) goto destroy;
 8001c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 84aa 	beq.w	800259c <ConsoleFunction+0x968>

	if( h->pendingRedirect != 0 )
 8001c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d01a      	beq.n	8001c88 <ConsoleFunction+0x54>
	{
		h->pendingRedirect = 0;
 8001c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c54:	2200      	movs	r2, #0
 8001c56:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
		if ( CONSOLE_RedirectStreams(h, h->pendingRdStream, h->pendingWrStream, h->pendingRdCtx, h->pendingWrCtx) )
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5c:	f8d3 1410 	ldr.w	r1, [r3, #1040]	@ 0x410
 8001c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c62:	f8d3 2414 	ldr.w	r2, [r3, #1044]	@ 0x414
 8001c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c68:	f8d3 0418 	ldr.w	r0, [r3, #1048]	@ 0x418
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	4603      	mov	r3, r0
 8001c76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001c78:	f7ff ff48 	bl	8001b0c <CONSOLE_RedirectStreams>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d002      	beq.n	8001c88 <ConsoleFunction+0x54>
		{
			printf("was not able to redirect console streams, requested by user!");
 8001c82:	4892      	ldr	r0, [pc, #584]	@ (8001ecc <ConsoleFunction+0x298>)
 8001c84:	f011 fe1e 	bl	80138c4 <iprintf>
#ifdef WIN32
		"\033[39m      -=   MSVC RTOS SIMULATOR ";
#else
		"\033[39m      -=   ARM RTOS ";
#endif
    printf((char*)headerASCIIArt);
 8001c88:	4891      	ldr	r0, [pc, #580]	@ (8001ed0 <ConsoleFunction+0x29c>)
 8001c8a:	f011 fe1b 	bl	80138c4 <iprintf>
#ifdef EXERCISE
    printf("EXERCISE: ");
    printf(xstr(EXERCISE)));
    printf("\r\n\r\n");
#else
    printf("PLAYGROUND\r\n\r\n");
 8001c8e:	4891      	ldr	r0, [pc, #580]	@ (8001ed4 <ConsoleFunction+0x2a0>)
 8001c90:	f011 fe88 	bl	80139a4 <puts>
#endif

#if CONSOLE_USE_DYNAMIC_USERNAME != 0
	char* usernamePtr = getenv("USERNAME");
 8001c94:	4890      	ldr	r0, [pc, #576]	@ (8001ed8 <ConsoleFunction+0x2a4>)
 8001c96:	f00f fd25 	bl	80116e4 <getenv>
 8001c9a:	65f8      	str	r0, [r7, #92]	@ 0x5c
	if ( usernamePtr == 0 ) usernamePtr = CONSOLE_USERNAME;
 8001c9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <ConsoleFunction+0x72>
 8001ca2:	4b8e      	ldr	r3, [pc, #568]	@ (8001edc <ConsoleFunction+0x2a8>)
 8001ca4:	65fb      	str	r3, [r7, #92]	@ 0x5c
#else
	char* usernamePtr = CONSOLE_USERNAME;
#endif

	char* lineBuff = NULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	65bb      	str	r3, [r7, #88]	@ 0x58
	char* ctrlBuff = malloc(CONSOLE_LINE_SIZE + CONSOLE_SAFETY_SPACE); // make sure we have a little space behind
 8001caa:	207c      	movs	r0, #124	@ 0x7c
 8001cac:	f00f fd62 	bl	8011774 <malloc>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	623b      	str	r3, [r7, #32]
	if (ctrlBuff == NULL) goto exit;
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8406 	beq.w	80024c8 <ConsoleFunction+0x894>

	lineBuff = malloc(CONSOLE_LINE_SIZE + CONSOLE_SAFETY_SPACE); // make sure we have a little space behind
 8001cbc:	207c      	movs	r0, #124	@ 0x7c
 8001cbe:	f00f fd59 	bl	8011774 <malloc>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	65bb      	str	r3, [r7, #88]	@ 0x58
	if (lineBuff == NULL) goto exit;
 8001cc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 83ff 	beq.w	80024cc <ConsoleFunction+0x898>

	memset(ctrlBuff, ctrlC0_NUL, CONSOLE_LINE_SIZE + CONSOLE_SAFETY_SPACE);
 8001cce:	227c      	movs	r2, #124	@ 0x7c
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	6a38      	ldr	r0, [r7, #32]
 8001cd4:	f012 f84c 	bl	8013d70 <memset>
	memset(lineBuff, ctrlC0_NUL, CONSOLE_LINE_SIZE + CONSOLE_SAFETY_SPACE);
 8001cd8:	227c      	movs	r2, #124	@ 0x7c
 8001cda:	2100      	movs	r1, #0
 8001cdc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001cde:	f012 f847 	bl	8013d70 <memset>
	unsigned int lbPtr = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	657b      	str	r3, [r7, #84]	@ 0x54

	printf("\r\nFreeRTOS Console Up and Running\r\n");
 8001ce6:	487e      	ldr	r0, [pc, #504]	@ (8001ee0 <ConsoleFunction+0x2ac>)
 8001ce8:	f011 fe5c 	bl	80139a4 <puts>
	printf("\r\n\r\n-------------------------------------------------------------------\r\n");
 8001cec:	487d      	ldr	r0, [pc, #500]	@ (8001ee4 <ConsoleFunction+0x2b0>)
 8001cee:	f011 fe59 	bl	80139a4 <puts>

	h->pState.buff = ctrlBuff;
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf4:	6a3a      	ldr	r2, [r7, #32]
 8001cf6:	619a      	str	r2, [r3, #24]

	printf("\r\n%s(\033[32m\xE2\x9C\x93\033[0m) $>", usernamePtr);
 8001cf8:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001cfa:	487b      	ldr	r0, [pc, #492]	@ (8001ee8 <ConsoleFunction+0x2b4>)
 8001cfc:	f011 fde2 	bl	80138c4 <iprintf>
	int consoleStartIndex = (int)strlen(usernamePtr)+6;
 8001d00:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001d02:	f7fe fae5 	bl	80002d0 <strlen>
 8001d06:	4603      	mov	r3, r0
 8001d08:	3306      	adds	r3, #6
 8001d0a:	653b      	str	r3, [r7, #80]	@ 0x50
	fflush(stdout);
 8001d0c:	4b77      	ldr	r3, [pc, #476]	@ (8001eec <ConsoleFunction+0x2b8>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f011 fc94 	bl	8013640 <fflush>

	while(h->cancel == 0)
 8001d18:	e3d0      	b.n	80024bc <ConsoleFunction+0x888>
	{
		if( h->pendingRedirect != 0 )
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d01a      	beq.n	8001d5a <ConsoleFunction+0x126>
		{
			h->pendingRedirect = 0;
 8001d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d26:	2200      	movs	r2, #0
 8001d28:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
			if ( CONSOLE_RedirectStreams(h, h->pendingRdStream, h->pendingWrStream, h->pendingRdCtx, h->pendingWrCtx) )
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2e:	f8d3 1410 	ldr.w	r1, [r3, #1040]	@ 0x410
 8001d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d34:	f8d3 2414 	ldr.w	r2, [r3, #1044]	@ 0x414
 8001d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3a:	f8d3 0418 	ldr.w	r0, [r3, #1048]	@ 0x418
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d40:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	4603      	mov	r3, r0
 8001d48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d4a:	f7ff fedf 	bl	8001b0c <CONSOLE_RedirectStreams>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <ConsoleFunction+0x126>
			{
				printf("was not able to redirect console streams, requested by user!");
 8001d54:	485d      	ldr	r0, [pc, #372]	@ (8001ecc <ConsoleFunction+0x298>)
 8001d56:	f011 fdb5 	bl	80138c4 <iprintf>
			}
		}

		int res = EOF;
 8001d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5e:	61fb      	str	r3, [r7, #28]
		while((res = getchar()) == EOF)
 8001d60:	e004      	b.n	8001d6c <ConsoleFunction+0x138>
		{
			if ( h->cancel == 1 ) goto exit;
 8001d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	f000 83b2 	beq.w	80024d0 <ConsoleFunction+0x89c>
		while((res = getchar()) == EOF)
 8001d6c:	f011 fda2 	bl	80138b4 <getchar>
 8001d70:	61f8      	str	r0, [r7, #28]
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d78:	d0f3      	beq.n	8001d62 <ConsoleFunction+0x12e>
		}
		char myChar = res;
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	76fb      	strb	r3, [r7, #27]
		cspTYPE result = ControlSequenceParserConsume(myChar, &h->pState);
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d80:	f103 0208 	add.w	r2, r3, #8
 8001d84:	7efb      	ldrb	r3, [r7, #27]
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff f98f 	bl	80010ac <ControlSequenceParserConsume>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	76bb      	strb	r3, [r7, #26]
		if ( result == csptCHARACTER )
 8001d92:	7ebb      	ldrb	r3, [r7, #26]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	f040 80b3 	bne.w	8001f00 <ConsoleFunction+0x2cc>
		{
			putchar(myChar);
 8001d9a:	7efb      	ldrb	r3, [r7, #27]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f011 fda3 	bl	80138e8 <putchar>
			fflush(stdout);
 8001da2:	4b52      	ldr	r3, [pc, #328]	@ (8001eec <ConsoleFunction+0x2b8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f011 fc49 	bl	8013640 <fflush>

			if ( lineBuff[lbPtr + 1] != '\0' )
 8001dae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db0:	3301      	adds	r3, #1
 8001db2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001db4:	4413      	add	r3, r2
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d061      	beq.n	8001e80 <ConsoleFunction+0x24c>
			{
				putchar(lineBuff[lbPtr]);
 8001dbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc0:	4413      	add	r3, r2
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f011 fd8f 	bl	80138e8 <putchar>
				fflush(stdout);
 8001dca:	4b48      	ldr	r3, [pc, #288]	@ (8001eec <ConsoleFunction+0x2b8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f011 fc35 	bl	8013640 <fflush>

				int tmpPtr = lbPtr + 1;
 8001dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd8:	3301      	adds	r3, #1
 8001dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
				char parking = myChar;
 8001ddc:	7efb      	ldrb	r3, [r7, #27]
 8001dde:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
				char parking2 = lineBuff[lbPtr];
 8001de2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001de4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de6:	4413      	add	r3, r2
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
				while(tmpPtr < CONSOLE_LINE_SIZE)
 8001dee:	e02a      	b.n	8001e46 <ConsoleFunction+0x212>
				{
					putchar(lineBuff[tmpPtr]);
 8001df0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001df2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001df4:	4413      	add	r3, r2
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f011 fd75 	bl	80138e8 <putchar>
					fflush(stdout);
 8001dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8001eec <ConsoleFunction+0x2b8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f011 fc1b 	bl	8013640 <fflush>


					lineBuff[tmpPtr - 1] = parking;
 8001e0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e10:	4413      	add	r3, r2
 8001e12:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8001e16:	701a      	strb	r2, [r3, #0]
					parking = parking2;
 8001e18:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001e1c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
					parking2 = lineBuff[tmpPtr];
 8001e20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e24:	4413      	add	r3, r2
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

					if ( lineBuff[tmpPtr] == '\0' && parking == '\0')
 8001e2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e30:	4413      	add	r3, r2
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d103      	bne.n	8001e40 <ConsoleFunction+0x20c>
 8001e38:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d006      	beq.n	8001e4e <ConsoleFunction+0x21a>
						break;

					tmpPtr += 1;
 8001e40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e42:	3301      	adds	r3, #1
 8001e44:	64fb      	str	r3, [r7, #76]	@ 0x4c
				while(tmpPtr < CONSOLE_LINE_SIZE)
 8001e46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e48:	2b77      	cmp	r3, #119	@ 0x77
 8001e4a:	ddd1      	ble.n	8001df0 <ConsoleFunction+0x1bc>
 8001e4c:	e000      	b.n	8001e50 <ConsoleFunction+0x21c>
						break;
 8001e4e:	bf00      	nop
				}

				printf("\033[%dD", CONSOLE_LINE_SIZE + consoleStartIndex);
 8001e50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e52:	3378      	adds	r3, #120	@ 0x78
 8001e54:	4619      	mov	r1, r3
 8001e56:	4826      	ldr	r0, [pc, #152]	@ (8001ef0 <ConsoleFunction+0x2bc>)
 8001e58:	f011 fd34 	bl	80138c4 <iprintf>
				printf("\033[%dC", consoleStartIndex + lbPtr + 1);
 8001e5c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001e5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e60:	4413      	add	r3, r2
 8001e62:	3301      	adds	r3, #1
 8001e64:	4619      	mov	r1, r3
 8001e66:	4823      	ldr	r0, [pc, #140]	@ (8001ef4 <ConsoleFunction+0x2c0>)
 8001e68:	f011 fd2c 	bl	80138c4 <iprintf>
				lbPtr += 1;
 8001e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e6e:	3301      	adds	r3, #1
 8001e70:	657b      	str	r3, [r7, #84]	@ 0x54
				fflush(stdout);
 8001e72:	4b1e      	ldr	r3, [pc, #120]	@ (8001eec <ConsoleFunction+0x2b8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f011 fbe1 	bl	8013640 <fflush>
 8001e7e:	e007      	b.n	8001e90 <ConsoleFunction+0x25c>
			}
			else
			{
				lineBuff[lbPtr] = myChar;
 8001e80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e84:	4413      	add	r3, r2
 8001e86:	7efa      	ldrb	r2, [r7, #27]
 8001e88:	701a      	strb	r2, [r3, #0]
				lbPtr++;
 8001e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	657b      	str	r3, [r7, #84]	@ 0x54
			}

			if ( lbPtr > CONSOLE_LINE_SIZE )
 8001e90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e92:	2b78      	cmp	r3, #120	@ 0x78
 8001e94:	f240 8312 	bls.w	80024bc <ConsoleFunction+0x888>
			{
				printf("\r\n Buffer Overrun! Clearing input...\r\n");
 8001e98:	4817      	ldr	r0, [pc, #92]	@ (8001ef8 <ConsoleFunction+0x2c4>)
 8001e9a:	f011 fd83 	bl	80139a4 <puts>
				// print new console line and decode the result
				printf("\r\n%s(\033[31m\xE2\x98\x93\033[0m) $>", usernamePtr);
 8001e9e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001ea0:	4816      	ldr	r0, [pc, #88]	@ (8001efc <ConsoleFunction+0x2c8>)
 8001ea2:	f011 fd0f 	bl	80138c4 <iprintf>
				fflush(stdout);
 8001ea6:	4b11      	ldr	r3, [pc, #68]	@ (8001eec <ConsoleFunction+0x2b8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f011 fbc7 	bl	8013640 <fflush>

				// clear the buffer and restore the pointer
				do
				{
					lineBuff[lbPtr] = ctrlC0_NUL;
 8001eb2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eb6:	4413      	add	r3, r2
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
				    if ( lbPtr == 0 ) break;
 8001ebc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 82f7 	beq.w	80024b2 <ConsoleFunction+0x87e>
				    else lbPtr -= 1;
 8001ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	657b      	str	r3, [r7, #84]	@ 0x54
					lineBuff[lbPtr] = ctrlC0_NUL;
 8001eca:	e7f2      	b.n	8001eb2 <ConsoleFunction+0x27e>
 8001ecc:	080167f8 	.word	0x080167f8
 8001ed0:	08017e5c 	.word	0x08017e5c
 8001ed4:	08016838 	.word	0x08016838
 8001ed8:	08016848 	.word	0x08016848
 8001edc:	08016854 	.word	0x08016854
 8001ee0:	0801685c 	.word	0x0801685c
 8001ee4:	08016880 	.word	0x08016880
 8001ee8:	080168cc 	.word	0x080168cc
 8001eec:	200001d4 	.word	0x200001d4
 8001ef0:	080168e4 	.word	0x080168e4
 8001ef4:	080168ec 	.word	0x080168ec
 8001ef8:	080168f4 	.word	0x080168f4
 8001efc:	0801691c 	.word	0x0801691c
				} while (1);
			}
		}
		else if ( result == csptCONTROL )
 8001f00:	7ebb      	ldrb	r3, [r7, #26]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	f040 82da 	bne.w	80024bc <ConsoleFunction+0x888>
		{
			switch (h->pState.type)
 8001f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0a:	895b      	ldrh	r3, [r3, #10]
 8001f0c:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001f10:	f000 8113 	beq.w	800213a <ConsoleFunction+0x506>
 8001f14:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001f18:	f300 82a5 	bgt.w	8002466 <ConsoleFunction+0x832>
 8001f1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f1e:	f000 8093 	beq.w	8002048 <ConsoleFunction+0x414>
 8001f22:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f24:	f300 829f 	bgt.w	8002466 <ConsoleFunction+0x832>
 8001f28:	2b0d      	cmp	r3, #13
 8001f2a:	d008      	beq.n	8001f3e <ConsoleFunction+0x30a>
 8001f2c:	2b0d      	cmp	r3, #13
 8001f2e:	f300 829a 	bgt.w	8002466 <ConsoleFunction+0x832>
 8001f32:	2b09      	cmp	r3, #9
 8001f34:	f000 80e2 	beq.w	80020fc <ConsoleFunction+0x4c8>
 8001f38:	2b0a      	cmp	r3, #10
 8001f3a:	f040 8294 	bne.w	8002466 <ConsoleFunction+0x832>
			{
				// implicit fall through
			case ctrlC0_LF:
			case ctrlC0_CR:
			{
				putchar(h->pState.type);
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f40:	895b      	ldrh	r3, [r3, #10]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f011 fcd0 	bl	80138e8 <putchar>
				fflush(stdout);
 8001f48:	4ba8      	ldr	r3, [pc, #672]	@ (80021ec <ConsoleFunction+0x5b8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f011 fb76 	bl	8013640 <fflush>
					putchar(ctrlC0_CR);
					fflush(stdout);
				}

				// implicit LF on every CR?
				if (1 && h->pState.type == ctrlC0_CR)
 8001f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f56:	895b      	ldrh	r3, [r3, #10]
 8001f58:	2b0d      	cmp	r3, #13
 8001f5a:	d108      	bne.n	8001f6e <ConsoleFunction+0x33a>
				{
					putchar(ctrlC0_LF);
 8001f5c:	200a      	movs	r0, #10
 8001f5e:	f011 fcc3 	bl	80138e8 <putchar>
					fflush(stdout);
 8001f62:	4ba2      	ldr	r3, [pc, #648]	@ (80021ec <ConsoleFunction+0x5b8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f011 fb69 	bl	8013640 <fflush>
				}

				// now adapt the line history accordingly
				memcpy(h->history.lines[h->history.lineHead], lineBuff, CONSOLE_LINE_SIZE);
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f70:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f74:	4613      	mov	r3, r2
 8001f76:	015b      	lsls	r3, r3, #5
 8001f78:	1a9b      	subs	r3, r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	3320      	adds	r3, #32
 8001f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f80:	4413      	add	r3, r2
 8001f82:	3304      	adds	r3, #4
 8001f84:	2278      	movs	r2, #120	@ 0x78
 8001f86:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f012 f857 	bl	801403c <memcpy>
				h->history.lineHead = (h->history.lineHead + 1) % CONSOLE_LINE_HISTORY;
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f90:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001f94:	3301      	adds	r3, #1
 8001f96:	425a      	negs	r2, r3
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	f002 0207 	and.w	r2, r2, #7
 8001fa0:	bf58      	it	pl
 8001fa2:	4253      	negpl	r3, r2
 8001fa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fa6:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
				h->history.linePtr = h->history.lineHead;
 8001faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fac:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

				// parse and execute the command and make sure the output streams
				// are flushed before doing anything else with the result
				int result = TransformAndProcessTheCommand(lineBuff, CONSOLE_LINE_SIZE, &h->cState);
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb8:	461a      	mov	r2, r3
 8001fba:	2178      	movs	r1, #120	@ 0x78
 8001fbc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001fbe:	f7ff fb89 	bl	80016d4 <TransformAndProcessTheCommand>
 8001fc2:	60f8      	str	r0, [r7, #12]
				fflush(stdout);
 8001fc4:	4b89      	ldr	r3, [pc, #548]	@ (80021ec <ConsoleFunction+0x5b8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f011 fb38 	bl	8013640 <fflush>
				fflush(stderr);
 8001fd0:	4b86      	ldr	r3, [pc, #536]	@ (80021ec <ConsoleFunction+0x5b8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f011 fb32 	bl	8013640 <fflush>

#if CONSOLE_USE_DYNAMIC_USERNAME != 0
				// now check if there is a new user name (which is only possible by setenv command
				// which is executed after process command call above...
				usernamePtr = getenv("USERNAME");
 8001fdc:	4884      	ldr	r0, [pc, #528]	@ (80021f0 <ConsoleFunction+0x5bc>)
 8001fde:	f00f fb81 	bl	80116e4 <getenv>
 8001fe2:	65f8      	str	r0, [r7, #92]	@ 0x5c
				if ( usernamePtr == 0 ) usernamePtr = CONSOLE_USERNAME;
 8001fe4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <ConsoleFunction+0x3ba>
 8001fea:	4b82      	ldr	r3, [pc, #520]	@ (80021f4 <ConsoleFunction+0x5c0>)
 8001fec:	65fb      	str	r3, [r7, #92]	@ 0x5c
				consoleStartIndex = (int)strlen(usernamePtr)+6;
 8001fee:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001ff0:	f7fe f96e 	bl	80002d0 <strlen>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	3306      	adds	r3, #6
 8001ff8:	653b      	str	r3, [r7, #80]	@ 0x50
#endif
				// print new console line and decode the result
				printf("\r\n%s(", usernamePtr);
 8001ffa:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001ffc:	487e      	ldr	r0, [pc, #504]	@ (80021f8 <ConsoleFunction+0x5c4>)
 8001ffe:	f011 fc61 	bl	80138c4 <iprintf>
				if (result == 0)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d103      	bne.n	8002010 <ConsoleFunction+0x3dc>
				{
					printf("\033[32m\xE2\x9C\x93\033[0m");
 8002008:	487c      	ldr	r0, [pc, #496]	@ (80021fc <ConsoleFunction+0x5c8>)
 800200a:	f011 fc5b 	bl	80138c4 <iprintf>
 800200e:	e002      	b.n	8002016 <ConsoleFunction+0x3e2>
				}
				else
				{
					printf("\033[31m\xE2\x98\x93\033[0m");
 8002010:	487b      	ldr	r0, [pc, #492]	@ (8002200 <ConsoleFunction+0x5cc>)
 8002012:	f011 fc57 	bl	80138c4 <iprintf>
				}
				printf(") $>");
 8002016:	487b      	ldr	r0, [pc, #492]	@ (8002204 <ConsoleFunction+0x5d0>)
 8002018:	f011 fc54 	bl	80138c4 <iprintf>
				fflush(stdout);
 800201c:	4b73      	ldr	r3, [pc, #460]	@ (80021ec <ConsoleFunction+0x5b8>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	4618      	mov	r0, r3
 8002024:	f011 fb0c 	bl	8013640 <fflush>

				// clear the buffer completely because an alias could change
				// the buffer content way more than the user has entered and so
				// we can not only clear lbPtr--!! as we have a safety space we
				// can set CONSOLE_LINE_SIZE as matching pointer value;
				lbPtr = CONSOLE_LINE_SIZE;
 8002028:	2378      	movs	r3, #120	@ 0x78
 800202a:	657b      	str	r3, [r7, #84]	@ 0x54
				do
				{
					lineBuff[lbPtr] = ctrlC0_NUL;
 800202c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800202e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002030:	4413      	add	r3, r2
 8002032:	2200      	movs	r2, #0
 8002034:	701a      	strb	r2, [r3, #0]
					if (lbPtr == 0) break;
 8002036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <ConsoleFunction+0x410>
					else lbPtr -= 1;
 800203c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800203e:	3b01      	subs	r3, #1
 8002040:	657b      	str	r3, [r7, #84]	@ 0x54
					lineBuff[lbPtr] = ctrlC0_NUL;
 8002042:	e7f3      	b.n	800202c <ConsoleFunction+0x3f8>
					if (lbPtr == 0) break;
 8002044:	bf00      	nop
				} while (1);

				break;
 8002046:	e239      	b.n	80024bc <ConsoleFunction+0x888>
			}
			case ctrlC0_DEL:
			{
				if (lbPtr > 0)
 8002048:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8233 	beq.w	80024b6 <ConsoleFunction+0x882>
				{
					int tmpPtr = lbPtr;
 8002050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002052:	647b      	str	r3, [r7, #68]	@ 0x44
					lbPtr -= 1;
 8002054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002056:	3b01      	subs	r3, #1
 8002058:	657b      	str	r3, [r7, #84]	@ 0x54
					lineBuff[lbPtr] = ctrlC0_NUL;
 800205a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800205c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800205e:	4413      	add	r3, r2
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
					putchar(ctrlC0_DEL);
 8002064:	207f      	movs	r0, #127	@ 0x7f
 8002066:	f011 fc3f 	bl	80138e8 <putchar>
					fflush(stdout);
 800206a:	4b60      	ldr	r3, [pc, #384]	@ (80021ec <ConsoleFunction+0x5b8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	4618      	mov	r0, r3
 8002072:	f011 fae5 	bl	8013640 <fflush>
					while (lineBuff[tmpPtr] != ctrlC0_NUL)
 8002076:	e01c      	b.n	80020b2 <ConsoleFunction+0x47e>
					{
						lineBuff[tmpPtr - 1] = lineBuff[tmpPtr];
 8002078:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800207a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800207c:	441a      	add	r2, r3
 800207e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002080:	3b01      	subs	r3, #1
 8002082:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002084:	440b      	add	r3, r1
 8002086:	7812      	ldrb	r2, [r2, #0]
 8002088:	701a      	strb	r2, [r3, #0]
						putchar(lineBuff[tmpPtr - 1]);
 800208a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800208c:	3b01      	subs	r3, #1
 800208e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002090:	4413      	add	r3, r2
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f011 fc27 	bl	80138e8 <putchar>
						fflush(stdout);
 800209a:	4b54      	ldr	r3, [pc, #336]	@ (80021ec <ConsoleFunction+0x5b8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f011 facd 	bl	8013640 <fflush>
						tmpPtr += 1;
 80020a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020a8:	3301      	adds	r3, #1
 80020aa:	647b      	str	r3, [r7, #68]	@ 0x44
						if (tmpPtr >= CONSOLE_LINE_SIZE) break;
 80020ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020ae:	2b77      	cmp	r3, #119	@ 0x77
 80020b0:	dc06      	bgt.n	80020c0 <ConsoleFunction+0x48c>
					while (lineBuff[tmpPtr] != ctrlC0_NUL)
 80020b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80020b6:	4413      	add	r3, r2
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1dc      	bne.n	8002078 <ConsoleFunction+0x444>
 80020be:	e000      	b.n	80020c2 <ConsoleFunction+0x48e>
						if (tmpPtr >= CONSOLE_LINE_SIZE) break;
 80020c0:	bf00      	nop
					}
					lineBuff[tmpPtr - 1] = ctrlC0_NUL;
 80020c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020c4:	3b01      	subs	r3, #1
 80020c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80020c8:	4413      	add	r3, r2
 80020ca:	2200      	movs	r2, #0
 80020cc:	701a      	strb	r2, [r3, #0]
					putchar(' ');
 80020ce:	2020      	movs	r0, #32
 80020d0:	f011 fc0a 	bl	80138e8 <putchar>
					fflush(stdout);
 80020d4:	4b45      	ldr	r3, [pc, #276]	@ (80021ec <ConsoleFunction+0x5b8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	4618      	mov	r0, r3
 80020dc:	f011 fab0 	bl	8013640 <fflush>

					int moveBack = tmpPtr - lbPtr;
 80020e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80020e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	643b      	str	r3, [r7, #64]	@ 0x40
					for (; moveBack > 0; moveBack--)
 80020e8:	e004      	b.n	80020f4 <ConsoleFunction+0x4c0>
						PrintConsoleArrowLeft();
 80020ea:	f7ff fcf9 	bl	8001ae0 <PrintConsoleArrowLeft>
					for (; moveBack > 0; moveBack--)
 80020ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020f0:	3b01      	subs	r3, #1
 80020f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80020f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	dcf7      	bgt.n	80020ea <ConsoleFunction+0x4b6>
				}
				break;
 80020fa:	e1dc      	b.n	80024b6 <ConsoleFunction+0x882>
			}
			case ctrlC0_TAB:
			{
				int nums = 4 - (lbPtr % 4);
 80020fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	f1c3 0304 	rsb	r3, r3, #4
 8002106:	63fb      	str	r3, [r7, #60]	@ 0x3c
				for (; nums > 0; nums--)
 8002108:	e013      	b.n	8002132 <ConsoleFunction+0x4fe>
				{
					lineBuff[lbPtr] = ' ';
 800210a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800210c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800210e:	4413      	add	r3, r2
 8002110:	2220      	movs	r2, #32
 8002112:	701a      	strb	r2, [r3, #0]
					lbPtr += 1;
 8002114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002116:	3301      	adds	r3, #1
 8002118:	657b      	str	r3, [r7, #84]	@ 0x54
					putchar(' ');
 800211a:	2020      	movs	r0, #32
 800211c:	f011 fbe4 	bl	80138e8 <putchar>
					fflush(stdout);
 8002120:	4b32      	ldr	r3, [pc, #200]	@ (80021ec <ConsoleFunction+0x5b8>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	4618      	mov	r0, r3
 8002128:	f011 fa8a 	bl	8013640 <fflush>
				for (; nums > 0; nums--)
 800212c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800212e:	3b01      	subs	r3, #1
 8002130:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002134:	2b00      	cmp	r3, #0
 8002136:	dce8      	bgt.n	800210a <ConsoleFunction+0x4d6>
				}
				break;
 8002138:	e1c0      	b.n	80024bc <ConsoleFunction+0x888>
			}

			case ctrlC1_CSI:
			{
				if (ConsoleIsArrowLeft(&h->pState))
 800213a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213c:	3308      	adds	r3, #8
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fc3c 	bl	80019bc <ConsoleIsArrowLeft>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00c      	beq.n	8002164 <ConsoleFunction+0x530>
				{
					if (lbPtr > 0)
 800214a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 81b4 	beq.w	80024ba <ConsoleFunction+0x886>
					{
						lbPtr -= 1;
 8002152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002154:	3b01      	subs	r3, #1
 8002156:	657b      	str	r3, [r7, #84]	@ 0x54
						PrintConsoleControl(&h->pState);
 8002158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215a:	3308      	adds	r3, #8
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fc01 	bl	8001964 <PrintConsoleControl>
						}
						fflush(stdout);
					}
				}
				else goto unimp;
				break;
 8002162:	e1aa      	b.n	80024ba <ConsoleFunction+0x886>
				else if (ConsoleIsArrowRight(&h->pState))
 8002164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002166:	3308      	adds	r3, #8
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fc43 	bl	80019f4 <ConsoleIsArrowRight>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d021      	beq.n	80021b8 <ConsoleFunction+0x584>
					if (lbPtr < (CONSOLE_LINE_SIZE - 1))
 8002174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002176:	2b76      	cmp	r3, #118	@ 0x76
 8002178:	f200 819f 	bhi.w	80024ba <ConsoleFunction+0x886>
						if (lineBuff[lbPtr] == ctrlC0_NUL)
 800217c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800217e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002180:	4413      	add	r3, r2
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10e      	bne.n	80021a6 <ConsoleFunction+0x572>
							lineBuff[lbPtr] = ' ';
 8002188:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800218a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800218c:	4413      	add	r3, r2
 800218e:	2220      	movs	r2, #32
 8002190:	701a      	strb	r2, [r3, #0]
							putchar(' ');
 8002192:	2020      	movs	r0, #32
 8002194:	f011 fba8 	bl	80138e8 <putchar>
							fflush(stdout);
 8002198:	4b14      	ldr	r3, [pc, #80]	@ (80021ec <ConsoleFunction+0x5b8>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	4618      	mov	r0, r3
 80021a0:	f011 fa4e 	bl	8013640 <fflush>
 80021a4:	e004      	b.n	80021b0 <ConsoleFunction+0x57c>
							PrintConsoleControl(&h->pState);
 80021a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a8:	3308      	adds	r3, #8
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff fbda 	bl	8001964 <PrintConsoleControl>
						lbPtr += 1;
 80021b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021b2:	3301      	adds	r3, #1
 80021b4:	657b      	str	r3, [r7, #84]	@ 0x54
				break;
 80021b6:	e180      	b.n	80024ba <ConsoleFunction+0x886>
				else if (ConsoleIsEntf(&h->pState))
 80021b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ba:	3308      	adds	r3, #8
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff fc6d 	bl	8001a9c <ConsoleIsEntf>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d061      	beq.n	800228c <ConsoleFunction+0x658>
					if (lbPtr < (CONSOLE_LINE_SIZE - 1))
 80021c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021ca:	2b76      	cmp	r3, #118	@ 0x76
 80021cc:	f200 8175 	bhi.w	80024ba <ConsoleFunction+0x886>
						int tmpPtr = lbPtr + 1;
 80021d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021d2:	3301      	adds	r3, #1
 80021d4:	63bb      	str	r3, [r7, #56]	@ 0x38
						lineBuff[lbPtr] = ' ';
 80021d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80021d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021da:	4413      	add	r3, r2
 80021dc:	2220      	movs	r2, #32
 80021de:	701a      	strb	r2, [r3, #0]
						PrintConsoleControl(&h->pState);
 80021e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e2:	3308      	adds	r3, #8
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fbbd 	bl	8001964 <PrintConsoleControl>
						while (lineBuff[tmpPtr] != ctrlC0_NUL)
 80021ea:	e02a      	b.n	8002242 <ConsoleFunction+0x60e>
 80021ec:	200001d4 	.word	0x200001d4
 80021f0:	08016848 	.word	0x08016848
 80021f4:	08016854 	.word	0x08016854
 80021f8:	08016934 	.word	0x08016934
 80021fc:	0801693c 	.word	0x0801693c
 8002200:	0801694c 	.word	0x0801694c
 8002204:	0801695c 	.word	0x0801695c
							lineBuff[tmpPtr - 1] = lineBuff[tmpPtr];
 8002208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800220a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800220c:	441a      	add	r2, r3
 800220e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002210:	3b01      	subs	r3, #1
 8002212:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002214:	440b      	add	r3, r1
 8002216:	7812      	ldrb	r2, [r2, #0]
 8002218:	701a      	strb	r2, [r3, #0]
							putchar(lineBuff[tmpPtr - 1]);
 800221a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800221c:	3b01      	subs	r3, #1
 800221e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002220:	4413      	add	r3, r2
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f011 fb5f 	bl	80138e8 <putchar>
							fflush(stdout);
 800222a:	4baa      	ldr	r3, [pc, #680]	@ (80024d4 <ConsoleFunction+0x8a0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	4618      	mov	r0, r3
 8002232:	f011 fa05 	bl	8013640 <fflush>
							tmpPtr += 1;
 8002236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002238:	3301      	adds	r3, #1
 800223a:	63bb      	str	r3, [r7, #56]	@ 0x38
							if (tmpPtr >= CONSOLE_LINE_SIZE) break;
 800223c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800223e:	2b77      	cmp	r3, #119	@ 0x77
 8002240:	dc06      	bgt.n	8002250 <ConsoleFunction+0x61c>
						while (lineBuff[tmpPtr] != ctrlC0_NUL)
 8002242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002244:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002246:	4413      	add	r3, r2
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1dc      	bne.n	8002208 <ConsoleFunction+0x5d4>
 800224e:	e000      	b.n	8002252 <ConsoleFunction+0x61e>
							if (tmpPtr >= CONSOLE_LINE_SIZE) break;
 8002250:	bf00      	nop
						lineBuff[tmpPtr - 1] = ctrlC0_NUL;
 8002252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002254:	3b01      	subs	r3, #1
 8002256:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002258:	4413      	add	r3, r2
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
						putchar(' ');
 800225e:	2020      	movs	r0, #32
 8002260:	f011 fb42 	bl	80138e8 <putchar>
						fflush(stdout);
 8002264:	4b9b      	ldr	r3, [pc, #620]	@ (80024d4 <ConsoleFunction+0x8a0>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	4618      	mov	r0, r3
 800226c:	f011 f9e8 	bl	8013640 <fflush>
						int moveBack = tmpPtr - lbPtr;
 8002270:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	637b      	str	r3, [r7, #52]	@ 0x34
						for (; moveBack > 0; moveBack--)
 8002278:	e004      	b.n	8002284 <ConsoleFunction+0x650>
							PrintConsoleArrowLeft();
 800227a:	f7ff fc31 	bl	8001ae0 <PrintConsoleArrowLeft>
						for (; moveBack > 0; moveBack--)
 800227e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002280:	3b01      	subs	r3, #1
 8002282:	637b      	str	r3, [r7, #52]	@ 0x34
 8002284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002286:	2b00      	cmp	r3, #0
 8002288:	dcf7      	bgt.n	800227a <ConsoleFunction+0x646>
				break;
 800228a:	e116      	b.n	80024ba <ConsoleFunction+0x886>
				else if (ConsoleIsArrowUp(&h->pState) || ConsoleIsArrowDown(&h->pState))
 800228c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228e:	3308      	adds	r3, #8
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fbcb 	bl	8001a2c <ConsoleIsArrowUp>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d108      	bne.n	80022ae <ConsoleFunction+0x67a>
 800229c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229e:	3308      	adds	r3, #8
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fbdf 	bl	8001a64 <ConsoleIsArrowDown>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 80db 	beq.w	8002464 <ConsoleFunction+0x830>
					if (ConsoleIsArrowUp(&h->pState))
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b0:	3308      	adds	r3, #8
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff fbba 	bl	8001a2c <ConsoleIsArrowUp>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d010      	beq.n	80022e0 <ConsoleFunction+0x6ac>
						h->history.linePtr -= 1;
 80022be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80022c4:	1e5a      	subs	r2, r3, #1
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
						if (h->history.linePtr < 0) h->history.linePtr = CONSOLE_LINE_HISTORY - 1;
 80022cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ce:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	da14      	bge.n	8002300 <ConsoleFunction+0x6cc>
 80022d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d8:	2207      	movs	r2, #7
 80022da:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 80022de:	e00f      	b.n	8002300 <ConsoleFunction+0x6cc>
						h->history.linePtr += 1;
 80022e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ea:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
						if (h->history.linePtr >= CONSOLE_LINE_HISTORY) h->history.linePtr = 0;
 80022ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80022f4:	2b07      	cmp	r3, #7
 80022f6:	dd03      	ble.n	8002300 <ConsoleFunction+0x6cc>
 80022f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fa:	2200      	movs	r2, #0
 80022fc:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
					if (h->history.linePtr == h->history.lineHead)
 8002300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002302:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002308:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800230c:	429a      	cmp	r2, r3
 800230e:	d134      	bne.n	800237a <ConsoleFunction+0x746>
						int inputLength = (int)strnlen(lineBuff, CONSOLE_LINE_SIZE);
 8002310:	2178      	movs	r1, #120	@ 0x78
 8002312:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002314:	f011 fd53 	bl	8013dbe <strnlen>
 8002318:	4603      	mov	r3, r0
 800231a:	613b      	str	r3, [r7, #16]
						printf("\033[%dD", CONSOLE_LINE_SIZE + consoleStartIndex);
 800231c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800231e:	3378      	adds	r3, #120	@ 0x78
 8002320:	4619      	mov	r1, r3
 8002322:	486d      	ldr	r0, [pc, #436]	@ (80024d8 <ConsoleFunction+0x8a4>)
 8002324:	f011 face 	bl	80138c4 <iprintf>
						printf("\033[%dC", consoleStartIndex);
 8002328:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800232a:	486c      	ldr	r0, [pc, #432]	@ (80024dc <ConsoleFunction+0x8a8>)
 800232c:	f011 faca 	bl	80138c4 <iprintf>
						for (int i = 0; i < inputLength; i++)
 8002330:	2300      	movs	r3, #0
 8002332:	633b      	str	r3, [r7, #48]	@ 0x30
 8002334:	e005      	b.n	8002342 <ConsoleFunction+0x70e>
							putchar(' ');
 8002336:	2020      	movs	r0, #32
 8002338:	f011 fad6 	bl	80138e8 <putchar>
						for (int i = 0; i < inputLength; i++)
 800233c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233e:	3301      	adds	r3, #1
 8002340:	633b      	str	r3, [r7, #48]	@ 0x30
 8002342:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	429a      	cmp	r2, r3
 8002348:	dbf5      	blt.n	8002336 <ConsoleFunction+0x702>
						memset(lineBuff, 0, CONSOLE_LINE_SIZE);
 800234a:	2278      	movs	r2, #120	@ 0x78
 800234c:	2100      	movs	r1, #0
 800234e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002350:	f011 fd0e 	bl	8013d70 <memset>
						lbPtr = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	657b      	str	r3, [r7, #84]	@ 0x54
						printf("\033[%dD", CONSOLE_LINE_SIZE + consoleStartIndex);
 8002358:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800235a:	3378      	adds	r3, #120	@ 0x78
 800235c:	4619      	mov	r1, r3
 800235e:	485e      	ldr	r0, [pc, #376]	@ (80024d8 <ConsoleFunction+0x8a4>)
 8002360:	f011 fab0 	bl	80138c4 <iprintf>
						printf("\033[%dC", consoleStartIndex);
 8002364:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002366:	485d      	ldr	r0, [pc, #372]	@ (80024dc <ConsoleFunction+0x8a8>)
 8002368:	f011 faac 	bl	80138c4 <iprintf>
						fflush(stdout);
 800236c:	4b59      	ldr	r3, [pc, #356]	@ (80024d4 <ConsoleFunction+0x8a0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	4618      	mov	r0, r3
 8002374:	f011 f964 	bl	8013640 <fflush>
					if (h->history.linePtr == h->history.lineHead)
 8002378:	e072      	b.n	8002460 <ConsoleFunction+0x82c>
						int inputLength = (int)strnlen(lineBuff, CONSOLE_LINE_SIZE);
 800237a:	2178      	movs	r1, #120	@ 0x78
 800237c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800237e:	f011 fd1e 	bl	8013dbe <strnlen>
 8002382:	4603      	mov	r3, r0
 8002384:	617b      	str	r3, [r7, #20]
						printf("\033[%dD", CONSOLE_LINE_SIZE + consoleStartIndex);
 8002386:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002388:	3378      	adds	r3, #120	@ 0x78
 800238a:	4619      	mov	r1, r3
 800238c:	4852      	ldr	r0, [pc, #328]	@ (80024d8 <ConsoleFunction+0x8a4>)
 800238e:	f011 fa99 	bl	80138c4 <iprintf>
						printf("\033[%dC", consoleStartIndex);
 8002392:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002394:	4851      	ldr	r0, [pc, #324]	@ (80024dc <ConsoleFunction+0x8a8>)
 8002396:	f011 fa95 	bl	80138c4 <iprintf>
						int i = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	62fb      	str	r3, [r7, #44]	@ 0x2c
						for (; i < inputLength; i++)
 800239e:	e005      	b.n	80023ac <ConsoleFunction+0x778>
							putchar(' ');
 80023a0:	2020      	movs	r0, #32
 80023a2:	f011 faa1 	bl	80138e8 <putchar>
						for (; i < inputLength; i++)
 80023a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a8:	3301      	adds	r3, #1
 80023aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	dbf5      	blt.n	80023a0 <ConsoleFunction+0x76c>
						printf("\033[%dD", CONSOLE_LINE_SIZE + consoleStartIndex);
 80023b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023b6:	3378      	adds	r3, #120	@ 0x78
 80023b8:	4619      	mov	r1, r3
 80023ba:	4847      	ldr	r0, [pc, #284]	@ (80024d8 <ConsoleFunction+0x8a4>)
 80023bc:	f011 fa82 	bl	80138c4 <iprintf>
						printf("\033[%dC", consoleStartIndex);
 80023c0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80023c2:	4846      	ldr	r0, [pc, #280]	@ (80024dc <ConsoleFunction+0x8a8>)
 80023c4:	f011 fa7e 	bl	80138c4 <iprintf>
						fflush(stdout);
 80023c8:	4b42      	ldr	r3, [pc, #264]	@ (80024d4 <ConsoleFunction+0x8a0>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f011 f936 	bl	8013640 <fflush>
						i = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
						memset(lineBuff, 0, CONSOLE_LINE_SIZE);
 80023d8:	2278      	movs	r2, #120	@ 0x78
 80023da:	2100      	movs	r1, #0
 80023dc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80023de:	f011 fcc7 	bl	8013d70 <memset>
						lbPtr = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	657b      	str	r3, [r7, #84]	@ 0x54
						while (h->history.lines[h->history.linePtr][i] != '\0')
 80023e6:	e026      	b.n	8002436 <ConsoleFunction+0x802>
							putchar(h->history.lines[h->history.linePtr][i]);
 80023e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ea:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80023ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023f0:	4613      	mov	r3, r2
 80023f2:	015b      	lsls	r3, r3, #5
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	18ca      	adds	r2, r1, r3
 80023fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023fc:	4413      	add	r3, r2
 80023fe:	3324      	adds	r3, #36	@ 0x24
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f011 fa70 	bl	80138e8 <putchar>
							lineBuff[lbPtr] = h->history.lines[h->history.linePtr][i];
 8002408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800240e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002410:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002412:	4419      	add	r1, r3
 8002414:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002416:	4613      	mov	r3, r2
 8002418:	015b      	lsls	r3, r3, #5
 800241a:	1a9b      	subs	r3, r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	18c2      	adds	r2, r0, r3
 8002420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002422:	4413      	add	r3, r2
 8002424:	3324      	adds	r3, #36	@ 0x24
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	700b      	strb	r3, [r1, #0]
							lbPtr++;
 800242a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800242c:	3301      	adds	r3, #1
 800242e:	657b      	str	r3, [r7, #84]	@ 0x54
							i++;
 8002430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002432:	3301      	adds	r3, #1
 8002434:	62fb      	str	r3, [r7, #44]	@ 0x2c
						while (h->history.lines[h->history.linePtr][i] != '\0')
 8002436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002438:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800243c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800243e:	4613      	mov	r3, r2
 8002440:	015b      	lsls	r3, r3, #5
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	18ca      	adds	r2, r1, r3
 8002448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800244a:	4413      	add	r3, r2
 800244c:	3324      	adds	r3, #36	@ 0x24
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1c9      	bne.n	80023e8 <ConsoleFunction+0x7b4>
						fflush(stdout);
 8002454:	4b1f      	ldr	r3, [pc, #124]	@ (80024d4 <ConsoleFunction+0x8a0>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	4618      	mov	r0, r3
 800245c:	f011 f8f0 	bl	8013640 <fflush>
					if (h->history.linePtr == h->history.lineHead)
 8002460:	bf00      	nop
				break;
 8002462:	e02a      	b.n	80024ba <ConsoleFunction+0x886>
				else goto unimp;
 8002464:	bf00      	nop

			// all other non implemented controls
			default:
			{
			unimp:
				printf("UNIMP-CTRL-SEQ: ");
 8002466:	481e      	ldr	r0, [pc, #120]	@ (80024e0 <ConsoleFunction+0x8ac>)
 8002468:	f011 fa2c 	bl	80138c4 <iprintf>
				for (int i = 0; ctrlBuff[i] != '\0'; i++)
 800246c:	2300      	movs	r3, #0
 800246e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002470:	e00f      	b.n	8002492 <ConsoleFunction+0x85e>
					printf("%2.2x(%d) ", ctrlBuff[i], ctrlBuff[i]);
 8002472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002474:	6a3a      	ldr	r2, [r7, #32]
 8002476:	4413      	add	r3, r2
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	4619      	mov	r1, r3
 800247c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800247e:	6a3a      	ldr	r2, [r7, #32]
 8002480:	4413      	add	r3, r2
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	461a      	mov	r2, r3
 8002486:	4817      	ldr	r0, [pc, #92]	@ (80024e4 <ConsoleFunction+0x8b0>)
 8002488:	f011 fa1c 	bl	80138c4 <iprintf>
				for (int i = 0; ctrlBuff[i] != '\0'; i++)
 800248c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800248e:	3301      	adds	r3, #1
 8002490:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002494:	6a3a      	ldr	r2, [r7, #32]
 8002496:	4413      	add	r3, r2
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1e9      	bne.n	8002472 <ConsoleFunction+0x83e>
				printf("\r\n");
 800249e:	4812      	ldr	r0, [pc, #72]	@ (80024e8 <ConsoleFunction+0x8b4>)
 80024a0:	f011 fa80 	bl	80139a4 <puts>
				fflush(stdout);
 80024a4:	4b0b      	ldr	r3, [pc, #44]	@ (80024d4 <ConsoleFunction+0x8a0>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f011 f8c8 	bl	8013640 <fflush>
				break;
 80024b0:	e004      	b.n	80024bc <ConsoleFunction+0x888>
				    if ( lbPtr == 0 ) break;
 80024b2:	bf00      	nop
 80024b4:	e002      	b.n	80024bc <ConsoleFunction+0x888>
				break;
 80024b6:	bf00      	nop
 80024b8:	e000      	b.n	80024bc <ConsoleFunction+0x888>
				break;
 80024ba:	bf00      	nop
	while(h->cancel == 0)
 80024bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f43f ac2a 	beq.w	8001d1a <ConsoleFunction+0xe6>


		}
	}

exit:
 80024c6:	e004      	b.n	80024d2 <ConsoleFunction+0x89e>
	if (ctrlBuff == NULL) goto exit;
 80024c8:	bf00      	nop
 80024ca:	e012      	b.n	80024f2 <ConsoleFunction+0x8be>
	if (lineBuff == NULL) goto exit;
 80024cc:	bf00      	nop
 80024ce:	e010      	b.n	80024f2 <ConsoleFunction+0x8be>
			if ( h->cancel == 1 ) goto exit;
 80024d0:	bf00      	nop
	while (h->cancel == 0) vTaskDelay(pdTICKS_TO_MS(100));
 80024d2:	e00e      	b.n	80024f2 <ConsoleFunction+0x8be>
 80024d4:	200001d4 	.word	0x200001d4
 80024d8:	080168e4 	.word	0x080168e4
 80024dc:	080168ec 	.word	0x080168ec
 80024e0:	08016964 	.word	0x08016964
 80024e4:	08016978 	.word	0x08016978
 80024e8:	08016984 	.word	0x08016984
 80024ec:	2064      	movs	r0, #100	@ 0x64
 80024ee:	f00d f85f 	bl	800f5b0 <vTaskDelay>
 80024f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f8      	beq.n	80024ec <ConsoleFunction+0x8b8>
	
	printf("Console terminated, cleaning up...");
 80024fa:	482c      	ldr	r0, [pc, #176]	@ (80025ac <ConsoleFunction+0x978>)
 80024fc:	f011 f9e2 	bl	80138c4 <iprintf>
	fflush(stdout);
 8002500:	4b2b      	ldr	r3, [pc, #172]	@ (80025b0 <ConsoleFunction+0x97c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	4618      	mov	r0, r3
 8002508:	f011 f89a 	bl	8013640 <fflush>

	xSemaphoreTakeRecursive(h->cState.lockGuard, -1);
 800250c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f04f 31ff 	mov.w	r1, #4294967295
 8002514:	4618      	mov	r0, r3
 8002516:	f00c f917 	bl	800e748 <xQueueTakeMutexRecursive>
	while (!LIST_EMPTY(&h->cState.commands))
 800251a:	e01c      	b.n	8002556 <ConsoleFunction+0x922>
	{
		cmdEntry_t* pElement = h->cState.commands.lh_first;
 800251c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	60bb      	str	r3, [r7, #8]
		if (pElement != NULL)
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d01b      	beq.n	8002560 <ConsoleFunction+0x92c>
		{
			LIST_REMOVE(pElement, navigate);
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 800252e:	2b00      	cmp	r3, #0
 8002530:	d007      	beq.n	8002542 <ConsoleFunction+0x90e>
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	f8d2 2260 	ldr.w	r2, [r2, #608]	@ 0x260
 800253e:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	f8d2 225c 	ldr.w	r2, [r2, #604]	@ 0x25c
 800254e:	601a      	str	r2, [r3, #0]
			free(pElement);
 8002550:	68b8      	ldr	r0, [r7, #8]
 8002552:	f00f f917 	bl	8011784 <free>
	while (!LIST_EMPTY(&h->cState.commands))
 8002556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1de      	bne.n	800251c <ConsoleFunction+0x8e8>
 800255e:	e000      	b.n	8002562 <ConsoleFunction+0x92e>
		}
		else break;
 8002560:	bf00      	nop
	}

	xSemaphoreGiveRecursive(h->cState.lockGuard);
 8002562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f00c f8b2 	bl	800e6d0 <xQueueGiveMutexRecursive>
	vSemaphoreDelete(h->cState.lockGuard);
 800256c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f00c fc45 	bl	800ee00 <vQueueDelete>
	free(h);
 8002576:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002578:	f00f f904 	bl	8011784 <free>
	
	if (lineBuff != NULL) free(lineBuff);
 800257c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <ConsoleFunction+0x954>
 8002582:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002584:	f00f f8fe 	bl	8011784 <free>
	if (ctrlBuff != NULL) free(ctrlBuff);
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <ConsoleFunction+0x960>
 800258e:	6a38      	ldr	r0, [r7, #32]
 8002590:	f00f f8f8 	bl	8011784 <free>
	printf("done\r\n");
 8002594:	4807      	ldr	r0, [pc, #28]	@ (80025b4 <ConsoleFunction+0x980>)
 8002596:	f011 fa05 	bl	80139a4 <puts>
 800259a:	e000      	b.n	800259e <ConsoleFunction+0x96a>
	if (h == NULL) goto destroy;
 800259c:	bf00      	nop
destroy:
	vTaskDelete(NULL);
 800259e:	2000      	movs	r0, #0
 80025a0:	f00c ff5c 	bl	800f45c <vTaskDelete>
}
 80025a4:	bf00      	nop
 80025a6:	3760      	adds	r7, #96	@ 0x60
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	08016988 	.word	0x08016988
 80025b0:	200001d4 	.word	0x200001d4
 80025b4:	080169ac 	.word	0x080169ac

080025b8 <ConsolePrintHelp>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsolePrintHelp(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08a      	sub	sp, #40	@ 0x28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	61bb      	str	r3, [r7, #24]
	cmdState_t* c = &h->cState;
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	617b      	str	r3, [r7, #20]
	int found = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	627b      	str	r3, [r7, #36]	@ 0x24
	int cmdLen = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	623b      	str	r3, [r7, #32]
	if ( argc > 0 )
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	dd06      	ble.n	80025e8 <ConsolePrintHelp+0x30>
	{
		cmdLen = (int)strlen(argv[0]);
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fd fe76 	bl	80002d0 <strlen>
 80025e4:	4603      	mov	r3, r0
 80025e6:	623b      	str	r3, [r7, #32]
	}
	xSemaphoreTakeRecursive( c->lockGuard, -1 );
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f04f 31ff 	mov.w	r1, #4294967295
 80025f0:	4618      	mov	r0, r3
 80025f2:	f00c f8a9 	bl	800e748 <xQueueTakeMutexRecursive>
	cmdEntry_t* pElement = c->commands.lh_first;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	61fb      	str	r3, [r7, #28]

	printf("HELP FOR:\r\n");
 80025fc:	4831      	ldr	r0, [pc, #196]	@ (80026c4 <ConsolePrintHelp+0x10c>)
 80025fe:	f011 f9d1 	bl	80139a4 <puts>
	printf("-------------------------------------------------------------------\r\n");
 8002602:	4831      	ldr	r0, [pc, #196]	@ (80026c8 <ConsolePrintHelp+0x110>)
 8002604:	f011 f9ce 	bl	80139a4 <puts>
	while ( pElement != NULL )
 8002608:	e048      	b.n	800269c <ConsolePrintHelp+0xe4>
	{
		// if string compare result and determined length match, then this must be the function
		if ( ( argc == 0 ) || ( strncmp(argv[0], pElement->content.cmd, cmdLen) == 0 && cmdLen == pElement->content.cmdLen ) )
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00f      	beq.n	8002630 <ConsolePrintHelp+0x78>
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	6818      	ldr	r0, [r3, #0]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	3308      	adds	r3, #8
 8002618:	6a3a      	ldr	r2, [r7, #32]
 800261a:	4619      	mov	r1, r3
 800261c:	f011 fbbd 	bl	8013d9a <strncmp>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d136      	bne.n	8002694 <ConsolePrintHelp+0xdc>
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800262a:	6a3a      	ldr	r2, [r7, #32]
 800262c:	429a      	cmp	r2, r3
 800262e:	d131      	bne.n	8002694 <ConsolePrintHelp+0xdc>
		{
			found = 1;
 8002630:	2301      	movs	r3, #1
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24
			if ( pElement->content.isAlias ) printf("ALIAS\r\n");
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <ConsolePrintHelp+0x8e>
 800263e:	4823      	ldr	r0, [pc, #140]	@ (80026cc <ConsolePrintHelp+0x114>)
 8002640:	f011 f9b0 	bl	80139a4 <puts>
 8002644:	e002      	b.n	800264c <ConsolePrintHelp+0x94>
			else printf("COMMAND\r\n");
 8002646:	4822      	ldr	r0, [pc, #136]	@ (80026d0 <ConsolePrintHelp+0x118>)
 8002648:	f011 f9ac 	bl	80139a4 <puts>
			printf("%s\r\n\r\n", pElement->content.cmd);
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	3308      	adds	r3, #8
 8002650:	4619      	mov	r1, r3
 8002652:	4820      	ldr	r0, [pc, #128]	@ (80026d4 <ConsolePrintHelp+0x11c>)
 8002654:	f011 f936 	bl	80138c4 <iprintf>
			if ( pElement->content.isAlias )
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00c      	beq.n	800267c <ConsolePrintHelp+0xc4>
			{
				printf("MAPPING\r\n");
 8002662:	481d      	ldr	r0, [pc, #116]	@ (80026d8 <ConsolePrintHelp+0x120>)
 8002664:	f011 f99e 	bl	80139a4 <puts>
				printf("%s -> '%s'\r\n", pElement->content.cmd, pElement->content.help);
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f103 0108 	add.w	r1, r3, #8
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3350      	adds	r3, #80	@ 0x50
 8002672:	461a      	mov	r2, r3
 8002674:	4819      	ldr	r0, [pc, #100]	@ (80026dc <ConsolePrintHelp+0x124>)
 8002676:	f011 f925 	bl	80138c4 <iprintf>
 800267a:	e008      	b.n	800268e <ConsolePrintHelp+0xd6>
			}
			else
			{
				printf("DESCRIPTION\r\n");
 800267c:	4818      	ldr	r0, [pc, #96]	@ (80026e0 <ConsolePrintHelp+0x128>)
 800267e:	f011 f991 	bl	80139a4 <puts>
				printf("%s\r\n", pElement->content.help);
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3350      	adds	r3, #80	@ 0x50
 8002686:	4619      	mov	r1, r3
 8002688:	4816      	ldr	r0, [pc, #88]	@ (80026e4 <ConsolePrintHelp+0x12c>)
 800268a:	f011 f91b 	bl	80138c4 <iprintf>
			}
			printf("-------------------------------------------------------------------\r\n");
 800268e:	480e      	ldr	r0, [pc, #56]	@ (80026c8 <ConsolePrintHelp+0x110>)
 8002690:	f011 f988 	bl	80139a4 <puts>
		}

		pElement = pElement->navigate.le_next;
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 800269a:	61fb      	str	r3, [r7, #28]
	while ( pElement != NULL )
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1b3      	bne.n	800260a <ConsolePrintHelp+0x52>
	}

	xSemaphoreGiveRecursive( c->lockGuard );
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f00c f812 	bl	800e6d0 <xQueueGiveMutexRecursive>
	return -(found == 0);
 80026ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	bf0c      	ite	eq
 80026b2:	2301      	moveq	r3, #1
 80026b4:	2300      	movne	r3, #0
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	425b      	negs	r3, r3
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3728      	adds	r7, #40	@ 0x28
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	080169b4 	.word	0x080169b4
 80026c8:	080169c0 	.word	0x080169c0
 80026cc:	08016a08 	.word	0x08016a08
 80026d0:	08016a10 	.word	0x08016a10
 80026d4:	08016a1c 	.word	0x08016a1c
 80026d8:	08016a24 	.word	0x08016a24
 80026dc:	08016a30 	.word	0x08016a30
 80026e0:	08016a40 	.word	0x08016a40
 80026e4:	08016a50 	.word	0x08016a50

080026e8 <ConsoleExecReset>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleExecReset(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
	(void)argc;
	(void)argv;
	(void)context;
#if defined(__arm__)
	NVIC_SystemReset();
 80026f4:	f7fe fcc4 	bl	8001080 <__NVIC_SystemReset>

080026f8 <ConsolePrintKernelTicks>:
}

// --------------------------------------------------------------------------------------------------------------------
static int ConsolePrintKernelTicks(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
	(void)argc;
	(void)argv;
	(void)context;
	printf("%u", (unsigned int)xTaskGetTickCount());
 8002704:	f00d f9de 	bl	800fac4 <xTaskGetTickCount>
 8002708:	4603      	mov	r3, r0
 800270a:	4619      	mov	r1, r3
 800270c:	4803      	ldr	r0, [pc, #12]	@ (800271c <ConsolePrintKernelTicks+0x24>)
 800270e:	f011 f8d9 	bl	80138c4 <iprintf>
	return 0;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	08016a58 	.word	0x08016a58

08002720 <ConsolePrintTaskStats>:

#if defined(configGENERATE_RUN_TIME_STATS) && (configGENERATE_RUN_TIME_STATS != 0)
// --------------------------------------------------------------------------------------------------------------------
static int ConsolePrintTaskStats(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 8002720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002724:	f2ad 5dc4 	subw	sp, sp, #1476	@ 0x5c4
 8002728:	af06      	add	r7, sp, #24
 800272a:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 800272e:	f2a3 539c 	subw	r3, r3, #1436	@ 0x59c
 8002732:	6018      	str	r0, [r3, #0]
 8002734:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002738:	f5a3 63b4 	sub.w	r3, r3, #1440	@ 0x5a0
 800273c:	6019      	str	r1, [r3, #0]
 800273e:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002742:	f2a3 53a4 	subw	r3, r3, #1444	@ 0x5a4
 8002746:	601a      	str	r2, [r3, #0]
	(void)argc;
	(void)argv;
	(void)context;
	unsigned int numTasks = (unsigned int)uxTaskGetNumberOfTasks();
 8002748:	f00d f9cc 	bl	800fae4 <uxTaskGetNumberOfTasks>
 800274c:	f8c7 05a0 	str.w	r0, [r7, #1440]	@ 0x5a0
	TaskStatus_t tasks[32]; // a maximium of 32 so far
	configRUN_TIME_COUNTER_TYPE totalTime = 0;
 8002750:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002754:	f5a3 63b3 	sub.w	r3, r3, #1432	@ 0x598
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]

	unsigned int numFeedback = uxTaskGetSystemState( tasks, numTasks, &totalTime);
 800275c:	f107 0210 	add.w	r2, r7, #16
 8002760:	f107 0314 	add.w	r3, r7, #20
 8002764:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	@ 0x5a0
 8002768:	4618      	mov	r0, r3
 800276a:	f00d f9c7 	bl	800fafc <uxTaskGetSystemState>
 800276e:	f8c7 059c 	str.w	r0, [r7, #1436]	@ 0x59c
	if (numFeedback > 0)
 8002772:	f8d7 359c 	ldr.w	r3, [r7, #1436]	@ 0x59c
 8002776:	2b00      	cmp	r3, #0
 8002778:	d008      	beq.n	800278c <ConsolePrintTaskStats+0x6c>
	{
		printf("|----|----------|----------|----------|---------|------------|-------|\r\n");
 800277a:	4876      	ldr	r0, [pc, #472]	@ (8002954 <ConsolePrintTaskStats+0x234>)
 800277c:	f011 f912 	bl	80139a4 <puts>
		printf("| ID | NAME     | Prio     | BasePrio | State   | Ticks      | Rel.  |\r\n");
 8002780:	4875      	ldr	r0, [pc, #468]	@ (8002958 <ConsolePrintTaskStats+0x238>)
 8002782:	f011 f90f 	bl	80139a4 <puts>
		printf("|----|----------|----------|----------|---------|------------|-------|\r\n");
 8002786:	4873      	ldr	r0, [pc, #460]	@ (8002954 <ConsolePrintTaskStats+0x234>)
 8002788:	f011 f90c 	bl	80139a4 <puts>
	}
	for (unsigned int i = 0; i < numFeedback; i++ )
 800278c:	2300      	movs	r3, #0
 800278e:	f8c7 35a4 	str.w	r3, [r7, #1444]	@ 0x5a4
 8002792:	e0d0      	b.n	8002936 <ConsolePrintTaskStats+0x216>
	{
		float relativeRuntime = ( (float)tasks[i].ulRunTimeCounter * 100.0f / (float)totalTime );
 8002794:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002798:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 800279c:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 80027a0:	212c      	movs	r1, #44	@ 0x2c
 80027a2:	fb01 f303 	mul.w	r3, r1, r3
 80027a6:	4413      	add	r3, r2
 80027a8:	3318      	adds	r3, #24
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	ee07 3a90 	vmov	s15, r3
 80027b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027b4:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 800295c <ConsolePrintTaskStats+0x23c>
 80027b8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80027bc:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 80027c0:	f5a3 63b3 	sub.w	r3, r3, #1432	@ 0x598
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	ee07 3a90 	vmov	s15, r3
 80027ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027d2:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 80027d6:	edc3 7a00 	vstr	s15, [r3]
		char* state = (tasks[i].eCurrentState == eRunning) ? "RUN    " :
 80027da:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 80027de:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 80027e2:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 80027e6:	212c      	movs	r1, #44	@ 0x2c
 80027e8:	fb01 f303 	mul.w	r3, r1, r3
 80027ec:	4413      	add	r3, r2
 80027ee:	330c      	adds	r3, #12
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d041      	beq.n	800287a <ConsolePrintTaskStats+0x15a>
			(tasks[i].eCurrentState == eReady) ? "READY  " :
 80027f6:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 80027fa:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 80027fe:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 8002802:	212c      	movs	r1, #44	@ 0x2c
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	4413      	add	r3, r2
 800280a:	330c      	adds	r3, #12
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d031      	beq.n	8002876 <ConsolePrintTaskStats+0x156>
			(tasks[i].eCurrentState == eBlocked) ? "BLOCKED" :
 8002812:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002816:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 800281a:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 800281e:	212c      	movs	r1, #44	@ 0x2c
 8002820:	fb01 f303 	mul.w	r3, r1, r3
 8002824:	4413      	add	r3, r2
 8002826:	330c      	adds	r3, #12
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d021      	beq.n	8002872 <ConsolePrintTaskStats+0x152>
			(tasks[i].eCurrentState == eSuspended) ? "SUSPEND" :
 800282e:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002832:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 8002836:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 800283a:	212c      	movs	r1, #44	@ 0x2c
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	4413      	add	r3, r2
 8002842:	330c      	adds	r3, #12
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b03      	cmp	r3, #3
 8002848:	d011      	beq.n	800286e <ConsolePrintTaskStats+0x14e>
			(tasks[i].eCurrentState == eDeleted) ? "DELETED" : "INVALID";
 800284a:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 800284e:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 8002852:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 8002856:	212c      	movs	r1, #44	@ 0x2c
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	4413      	add	r3, r2
 800285e:	330c      	adds	r3, #12
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b04      	cmp	r3, #4
 8002864:	d101      	bne.n	800286a <ConsolePrintTaskStats+0x14a>
 8002866:	4b3e      	ldr	r3, [pc, #248]	@ (8002960 <ConsolePrintTaskStats+0x240>)
 8002868:	e008      	b.n	800287c <ConsolePrintTaskStats+0x15c>
 800286a:	4b3e      	ldr	r3, [pc, #248]	@ (8002964 <ConsolePrintTaskStats+0x244>)
 800286c:	e006      	b.n	800287c <ConsolePrintTaskStats+0x15c>
			(tasks[i].eCurrentState == eSuspended) ? "SUSPEND" :
 800286e:	4b3e      	ldr	r3, [pc, #248]	@ (8002968 <ConsolePrintTaskStats+0x248>)
 8002870:	e004      	b.n	800287c <ConsolePrintTaskStats+0x15c>
			(tasks[i].eCurrentState == eBlocked) ? "BLOCKED" :
 8002872:	4b3e      	ldr	r3, [pc, #248]	@ (800296c <ConsolePrintTaskStats+0x24c>)
 8002874:	e002      	b.n	800287c <ConsolePrintTaskStats+0x15c>
			(tasks[i].eCurrentState == eReady) ? "READY  " :
 8002876:	4b3e      	ldr	r3, [pc, #248]	@ (8002970 <ConsolePrintTaskStats+0x250>)
 8002878:	e000      	b.n	800287c <ConsolePrintTaskStats+0x15c>
		char* state = (tasks[i].eCurrentState == eRunning) ? "RUN    " :
 800287a:	4b3e      	ldr	r3, [pc, #248]	@ (8002974 <ConsolePrintTaskStats+0x254>)
 800287c:	f8c7 3594 	str.w	r3, [r7, #1428]	@ 0x594
		printf("| %2.2d | %-8.8s | %4.4d     | %4.4d     | %s | %10.10u | %5.1f |\r\n",
			(int)tasks[i].xTaskNumber, (char*)tasks[i].pcTaskName, (int)tasks[i].uxCurrentPriority, 
 8002880:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002884:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 8002888:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 800288c:	212c      	movs	r1, #44	@ 0x2c
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	4413      	add	r3, r2
 8002894:	3308      	adds	r3, #8
 8002896:	681b      	ldr	r3, [r3, #0]
		printf("| %2.2d | %-8.8s | %4.4d     | %4.4d     | %s | %10.10u | %5.1f |\r\n",
 8002898:	4698      	mov	r8, r3
			(int)tasks[i].xTaskNumber, (char*)tasks[i].pcTaskName, (int)tasks[i].uxCurrentPriority, 
 800289a:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 800289e:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 80028a2:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 80028a6:	212c      	movs	r1, #44	@ 0x2c
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	3304      	adds	r3, #4
 80028b0:	681d      	ldr	r5, [r3, #0]
 80028b2:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 80028b6:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 80028ba:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 80028be:	212c      	movs	r1, #44	@ 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	3310      	adds	r3, #16
 80028c8:	681b      	ldr	r3, [r3, #0]
		printf("| %2.2d | %-8.8s | %4.4d     | %4.4d     | %s | %10.10u | %5.1f |\r\n",
 80028ca:	4699      	mov	r9, r3
			(int)tasks[i].uxBasePriority, (char*)state, (unsigned int)tasks[i].ulRunTimeCounter,
 80028cc:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 80028d0:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 80028d4:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 80028d8:	212c      	movs	r1, #44	@ 0x2c
 80028da:	fb01 f303 	mul.w	r3, r1, r3
 80028de:	4413      	add	r3, r2
 80028e0:	3314      	adds	r3, #20
 80028e2:	681b      	ldr	r3, [r3, #0]
		printf("| %2.2d | %-8.8s | %4.4d     | %4.4d     | %s | %10.10u | %5.1f |\r\n",
 80028e4:	461e      	mov	r6, r3
			(int)tasks[i].uxBasePriority, (char*)state, (unsigned int)tasks[i].ulRunTimeCounter,
 80028e6:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 80028ea:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 80028ee:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 80028f2:	212c      	movs	r1, #44	@ 0x2c
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	3318      	adds	r3, #24
 80028fc:	681c      	ldr	r4, [r3, #0]
		printf("| %2.2d | %-8.8s | %4.4d     | %4.4d     | %s | %10.10u | %5.1f |\r\n",
 80028fe:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8002902:	6818      	ldr	r0, [r3, #0]
 8002904:	f7fd fe50 	bl	80005a8 <__aeabi_f2d>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002910:	9402      	str	r4, [sp, #8]
 8002912:	f8d7 3594 	ldr.w	r3, [r7, #1428]	@ 0x594
 8002916:	9301      	str	r3, [sp, #4]
 8002918:	9600      	str	r6, [sp, #0]
 800291a:	464b      	mov	r3, r9
 800291c:	462a      	mov	r2, r5
 800291e:	4641      	mov	r1, r8
 8002920:	4815      	ldr	r0, [pc, #84]	@ (8002978 <ConsolePrintTaskStats+0x258>)
 8002922:	f010 ffcf 	bl	80138c4 <iprintf>
			(float)relativeRuntime);
		printf("|----|----------|----------|----------|---------|------------|-------|\r\n");
 8002926:	480b      	ldr	r0, [pc, #44]	@ (8002954 <ConsolePrintTaskStats+0x234>)
 8002928:	f011 f83c 	bl	80139a4 <puts>
	for (unsigned int i = 0; i < numFeedback; i++ )
 800292c:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 8002930:	3301      	adds	r3, #1
 8002932:	f8c7 35a4 	str.w	r3, [r7, #1444]	@ 0x5a4
 8002936:	f8d7 25a4 	ldr.w	r2, [r7, #1444]	@ 0x5a4
 800293a:	f8d7 359c 	ldr.w	r3, [r7, #1436]	@ 0x59c
 800293e:	429a      	cmp	r2, r3
 8002940:	f4ff af28 	bcc.w	8002794 <ConsolePrintTaskStats+0x74>
	}

	return 0;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	f207 57ac 	addw	r7, r7, #1452	@ 0x5ac
 800294c:	46bd      	mov	sp, r7
 800294e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002952:	bf00      	nop
 8002954:	08016a5c 	.word	0x08016a5c
 8002958:	08016aa4 	.word	0x08016aa4
 800295c:	42c80000 	.word	0x42c80000
 8002960:	08016aec 	.word	0x08016aec
 8002964:	08016af4 	.word	0x08016af4
 8002968:	08016afc 	.word	0x08016afc
 800296c:	08016b04 	.word	0x08016b04
 8002970:	08016b0c 	.word	0x08016b0c
 8002974:	08016b14 	.word	0x08016b14
 8002978:	08016b1c 	.word	0x08016b1c

0800297c <ConsolePrintKernelVersion>:
#endif

// --------------------------------------------------------------------------------------------------------------------
static int ConsolePrintKernelVersion(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	617b      	str	r3, [r7, #20]
	(void)h;
	(void)argc;
	(void)argv;

	printf("FreeRTOS Kernel %s", tskKERNEL_VERSION_NUMBER);
 800298c:	4904      	ldr	r1, [pc, #16]	@ (80029a0 <ConsolePrintKernelVersion+0x24>)
 800298e:	4805      	ldr	r0, [pc, #20]	@ (80029a4 <ConsolePrintKernelVersion+0x28>)
 8002990:	f010 ff98 	bl	80138c4 <iprintf>
	return 0;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	08016b60 	.word	0x08016b60
 80029a4:	08016b68 	.word	0x08016b68

080029a8 <ConsoleWhoAmI>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleWhoAmI(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	613b      	str	r3, [r7, #16]
	(void)h;
	(void)argc;
	(void)argv;

#if CONSOLE_USE_DYNAMIC_USERNAME != 0
	char* usernamePtr = getenv("USERNAME");
 80029b8:	4808      	ldr	r0, [pc, #32]	@ (80029dc <ConsoleWhoAmI+0x34>)
 80029ba:	f00e fe93 	bl	80116e4 <getenv>
 80029be:	6178      	str	r0, [r7, #20]
	if ( usernamePtr == 0 ) usernamePtr = CONSOLE_USERNAME;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <ConsoleWhoAmI+0x22>
 80029c6:	4b06      	ldr	r3, [pc, #24]	@ (80029e0 <ConsoleWhoAmI+0x38>)
 80029c8:	617b      	str	r3, [r7, #20]
#else
	char* usernamePtr = CONSOLE_USERNAME;
#endif

	printf("%s", usernamePtr);
 80029ca:	6979      	ldr	r1, [r7, #20]
 80029cc:	4805      	ldr	r0, [pc, #20]	@ (80029e4 <ConsoleWhoAmI+0x3c>)
 80029ce:	f010 ff79 	bl	80138c4 <iprintf>
	return 0;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	08016848 	.word	0x08016848
 80029e0:	08016854 	.word	0x08016854
 80029e4:	08016b7c 	.word	0x08016b7c

080029e8 <ConsoleExit>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleExit(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	617b      	str	r3, [r7, #20]
	(void)h;
	(void)argc;
	(void)argv;

	h->cancel = 1;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2201      	movs	r2, #1
 80029fc:	621a      	str	r2, [r3, #32]
	return 0;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	371c      	adds	r7, #28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <ConsoleMallInfo>:

//---------------------------------------------------------------------------------------------------------------------
static int ConsoleMallInfo(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b090      	sub	sp, #64	@ 0x40
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	(void)h;
	(void)argc;
	(void)argv;

#ifndef WIN32
	struct mallinfo info = mallinfo();
 8002a1c:	f107 0314 	add.w	r3, r7, #20
 8002a20:	4618      	mov	r0, r3
 8002a22:	f00e ff59 	bl	80118d8 <mallinfo>
	printf("arena    : %d\r\n", info.arena);
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	480e      	ldr	r0, [pc, #56]	@ (8002a64 <ConsoleMallInfo+0x58>)
 8002a2c:	f010 ff4a 	bl	80138c4 <iprintf>
	printf("ordblks  : %d\r\n", info.ordblks);
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	4619      	mov	r1, r3
 8002a34:	480c      	ldr	r0, [pc, #48]	@ (8002a68 <ConsoleMallInfo+0x5c>)
 8002a36:	f010 ff45 	bl	80138c4 <iprintf>
	printf("uordblks : %d\r\n", info.uordblks);
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	480b      	ldr	r0, [pc, #44]	@ (8002a6c <ConsoleMallInfo+0x60>)
 8002a40:	f010 ff40 	bl	80138c4 <iprintf>
	printf("fordblks : %d\r\n", info.fordblks);
 8002a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a46:	4619      	mov	r1, r3
 8002a48:	4809      	ldr	r0, [pc, #36]	@ (8002a70 <ConsoleMallInfo+0x64>)
 8002a4a:	f010 ff3b 	bl	80138c4 <iprintf>
	printf("keepcost : %d\r\n", info.keepcost);
 8002a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a50:	4619      	mov	r1, r3
 8002a52:	4808      	ldr	r0, [pc, #32]	@ (8002a74 <ConsoleMallInfo+0x68>)
 8002a54:	f010 ff36 	bl	80138c4 <iprintf>
	return 0;
 8002a58:	2300      	movs	r3, #0
#else
	printf("WIN32 has quite a lot!");
	return -1;
#endif
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3740      	adds	r7, #64	@ 0x40
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	08016b80 	.word	0x08016b80
 8002a68:	08016b90 	.word	0x08016b90
 8002a6c:	08016ba0 	.word	0x08016ba0
 8002a70:	08016bb0 	.word	0x08016bb0
 8002a74:	08016bc0 	.word	0x08016bc0

08002a78 <ConsoleGetEnv>:

//---------------------------------------------------------------------------------------------------------------------
static int ConsoleGetEnv(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	617b      	str	r3, [r7, #20]
	(void)h;

	if ( argc > 0 )
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	dd1a      	ble.n	8002ac4 <ConsoleGetEnv+0x4c>
	{
		char* envValue = getenv(argv[0]);
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f00e fe26 	bl	80116e4 <getenv>
 8002a98:	6138      	str	r0, [r7, #16]
		if ( envValue != NULL )
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <ConsoleGetEnv+0x3a>
		{
			printf("%s=%s", argv[0], envValue);
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	480b      	ldr	r0, [pc, #44]	@ (8002ad8 <ConsoleGetEnv+0x60>)
 8002aaa:	f010 ff0b 	bl	80138c4 <iprintf>
			return 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	e00d      	b.n	8002ace <ConsoleGetEnv+0x56>
		}
		else
		{
			printf("%s is no environment variable", argv[0]);
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4808      	ldr	r0, [pc, #32]	@ (8002adc <ConsoleGetEnv+0x64>)
 8002aba:	f010 ff03 	bl	80138c4 <iprintf>
			return -1;
 8002abe:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac2:	e004      	b.n	8002ace <ConsoleGetEnv+0x56>
		}
	}
	else
	{
		printf("invalid number of arguments");
 8002ac4:	4806      	ldr	r0, [pc, #24]	@ (8002ae0 <ConsoleGetEnv+0x68>)
 8002ac6:	f010 fefd 	bl	80138c4 <iprintf>
		return -1;
 8002aca:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	08016bd0 	.word	0x08016bd0
 8002adc:	08016bd8 	.word	0x08016bd8
 8002ae0:	08016bf8 	.word	0x08016bf8

08002ae4 <ConsoleSetEnv>:

//---------------------------------------------------------------------------------------------------------------------
static int ConsoleSetEnv(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	617b      	str	r3, [r7, #20]
	(void)h;
	if ( argc > 1 )
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	dd1a      	ble.n	8002b30 <ConsoleSetEnv+0x4c>
	{
		int result = setenv(argv[0], argv[1], 1);
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	3304      	adds	r3, #4
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2201      	movs	r2, #1
 8002b06:	4619      	mov	r1, r3
 8002b08:	f00f fd8a 	bl	8012620 <setenv>
 8002b0c:	6138      	str	r0, [r7, #16]
		if ( result == 0 )
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <ConsoleSetEnv+0x34>
		{
			return 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	e010      	b.n	8002b3a <ConsoleSetEnv+0x56>
		}
		else
		{
			printf("could not set %s with value %s", argv[0], argv[1]);
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	6819      	ldr	r1, [r3, #0]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	3304      	adds	r3, #4
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	4807      	ldr	r0, [pc, #28]	@ (8002b44 <ConsoleSetEnv+0x60>)
 8002b26:	f010 fecd 	bl	80138c4 <iprintf>
			return -1;
 8002b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2e:	e004      	b.n	8002b3a <ConsoleSetEnv+0x56>
		}
	}
	else
	{
		printf("invalid number of arguments");
 8002b30:	4805      	ldr	r0, [pc, #20]	@ (8002b48 <ConsoleSetEnv+0x64>)
 8002b32:	f010 fec7 	bl	80138c4 <iprintf>
		return -1;
 8002b36:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	08016c14 	.word	0x08016c14
 8002b48:	08016bf8 	.word	0x08016bf8

08002b4c <ConsoleAliasConfig>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleAliasConfig(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b0a8      	sub	sp, #160	@ 0xa0
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	if ( argc == 0 )
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d105      	bne.n	8002b70 <ConsoleAliasConfig+0x24>
	{
		printf("invalid number of arguments");
 8002b64:	4855      	ldr	r0, [pc, #340]	@ (8002cbc <ConsoleAliasConfig+0x170>)
 8002b66:	f010 fead 	bl	80138c4 <iprintf>
		return -1;
 8002b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6e:	e0a0      	b.n	8002cb2 <ConsoleAliasConfig+0x166>
	}

	if( argc == 1 )
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d114      	bne.n	8002ba0 <ConsoleAliasConfig+0x54>
	{
		if ( CONSOLE_RemoveAliasOrCommand(h, argv[0]) == 0 )
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002b80:	f000 fb60 	bl	8003244 <CONSOLE_RemoveAliasOrCommand>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d104      	bne.n	8002b94 <ConsoleAliasConfig+0x48>
		{
			printf("alias removed successfully");
 8002b8a:	484d      	ldr	r0, [pc, #308]	@ (8002cc0 <ConsoleAliasConfig+0x174>)
 8002b8c:	f010 fe9a 	bl	80138c4 <iprintf>
			return 0;
 8002b90:	2300      	movs	r3, #0
 8002b92:	e08e      	b.n	8002cb2 <ConsoleAliasConfig+0x166>
		}
		else
		{
			printf("alias was not removed");
 8002b94:	484b      	ldr	r0, [pc, #300]	@ (8002cc4 <ConsoleAliasConfig+0x178>)
 8002b96:	f010 fe95 	bl	80138c4 <iprintf>
			return -1;
 8002b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9e:	e088      	b.n	8002cb2 <ConsoleAliasConfig+0x166>
		}
	}
	else
	{
		char aliasBuffer[CONSOLE_LINE_SIZE];
		unsigned int cmdPtr = 1;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		unsigned int buffPtr = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		memset(aliasBuffer, 0, sizeof(aliasBuffer));
 8002bac:	f107 0314 	add.w	r3, r7, #20
 8002bb0:	2278      	movs	r2, #120	@ 0x78
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f011 f8db 	bl	8013d70 <memset>
		for( unsigned int i = 0; i < sizeof(aliasBuffer)/sizeof(*aliasBuffer); i++)
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002bc0:	e05d      	b.n	8002c7e <ConsoleAliasConfig+0x132>
		{
			if ( cmdPtr < (unsigned int)argc )
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d24e      	bcs.n	8002c6a <ConsoleAliasConfig+0x11e>
			{
				int argLen = strnlen(argv[cmdPtr], CONSOLE_LINE_SIZE);
 8002bcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2178      	movs	r1, #120	@ 0x78
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f011 f8ef 	bl	8013dbe <strnlen>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				if ( argLen > 0 )
 8002be6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	dd37      	ble.n	8002c5e <ConsoleAliasConfig+0x112>
				{
					if ( (buffPtr+1) + argLen >= CONSOLE_LINE_SIZE )
 8002bee:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002bf2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	2b77      	cmp	r3, #119	@ 0x77
 8002bfc:	d905      	bls.n	8002c0a <ConsoleAliasConfig+0xbe>
					{
						printf("the sum of the alias parameters is longer than the max line buffer size!");
 8002bfe:	4832      	ldr	r0, [pc, #200]	@ (8002cc8 <ConsoleAliasConfig+0x17c>)
 8002c00:	f010 fe60 	bl	80138c4 <iprintf>
						return -1;
 8002c04:	f04f 33ff 	mov.w	r3, #4294967295
 8002c08:	e053      	b.n	8002cb2 <ConsoleAliasConfig+0x166>
					}
					else
					{
						memcpy(&aliasBuffer[buffPtr], argv[cmdPtr], argLen);
 8002c0a:	f107 0214 	add.w	r2, r7, #20
 8002c0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c12:	18d0      	adds	r0, r2, r3
 8002c14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002c24:	4619      	mov	r1, r3
 8002c26:	f011 fa09 	bl	801403c <memcpy>
						buffPtr += argLen;
 8002c2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c2e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002c32:	4413      	add	r3, r2
 8002c34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
						if ( ( cmdPtr + 1) != (unsigned int)argc )
 8002c38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d012      	beq.n	8002c6a <ConsoleAliasConfig+0x11e>
						{
							aliasBuffer[buffPtr] = ' ';
 8002c44:	f107 0214 	add.w	r2, r7, #20
 8002c48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c4c:	4413      	add	r3, r2
 8002c4e:	2220      	movs	r2, #32
 8002c50:	701a      	strb	r2, [r3, #0]
							buffPtr += 1;
 8002c52:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c56:	3301      	adds	r3, #1
 8002c58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c5c:	e005      	b.n	8002c6a <ConsoleAliasConfig+0x11e>
						}
					}
				}
				else
				{
					printf("at least one of the alias parameters is too long for mapping");
 8002c5e:	481b      	ldr	r0, [pc, #108]	@ (8002ccc <ConsoleAliasConfig+0x180>)
 8002c60:	f010 fe30 	bl	80138c4 <iprintf>
					return -1;
 8002c64:	f04f 33ff 	mov.w	r3, #4294967295
 8002c68:	e023      	b.n	8002cb2 <ConsoleAliasConfig+0x166>
				}
			}
			cmdPtr++;
 8002c6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c6e:	3301      	adds	r3, #1
 8002c70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		for( unsigned int i = 0; i < sizeof(aliasBuffer)/sizeof(*aliasBuffer); i++)
 8002c74:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c78:	3301      	adds	r3, #1
 8002c7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c82:	2b77      	cmp	r3, #119	@ 0x77
 8002c84:	d99d      	bls.n	8002bc2 <ConsoleAliasConfig+0x76>
		}
		if ( CONSOLE_RegisterAlias(h, argv[0], aliasBuffer) == 0 )
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f107 0214 	add.w	r2, r7, #20
 8002c8e:	4619      	mov	r1, r3
 8002c90:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002c94:	f000 fa0d 	bl	80030b2 <CONSOLE_RegisterAlias>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d104      	bne.n	8002ca8 <ConsoleAliasConfig+0x15c>
		{
			printf("alias created successfully");
 8002c9e:	480c      	ldr	r0, [pc, #48]	@ (8002cd0 <ConsoleAliasConfig+0x184>)
 8002ca0:	f010 fe10 	bl	80138c4 <iprintf>
			return 0;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	e004      	b.n	8002cb2 <ConsoleAliasConfig+0x166>
		}
		else
		{
			printf("alias was not created");
 8002ca8:	480a      	ldr	r0, [pc, #40]	@ (8002cd4 <ConsoleAliasConfig+0x188>)
 8002caa:	f010 fe0b 	bl	80138c4 <iprintf>
			return -1;
 8002cae:	f04f 33ff 	mov.w	r3, #4294967295
		}
	}
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	37a0      	adds	r7, #160	@ 0xa0
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	08016bf8 	.word	0x08016bf8
 8002cc0:	08016c34 	.word	0x08016c34
 8002cc4:	08016c50 	.word	0x08016c50
 8002cc8:	08016c68 	.word	0x08016c68
 8002ccc:	08016cb4 	.word	0x08016cb4
 8002cd0:	08016cf4 	.word	0x08016cf4
 8002cd4:	08016d10 	.word	0x08016d10

08002cd8 <ConsoleRegisterBasicCommands>:

// --------------------------------------------------------------------------------------------------------------------
static void ConsoleRegisterBasicCommands( ConsoleHandle_t h )
// --------------------------------------------------------------------------------------------------------------------
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	6078      	str	r0, [r7, #4]
	CONSOLE_RegisterCommand(h, "help",     "<<help>> prints the help of all commands.\r\nIf a <<command>> is passed as argument to help,\r\nonly the help text of this command will be printed on the console.",
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	4b2c      	ldr	r3, [pc, #176]	@ (8002d98 <ConsoleRegisterBasicCommands+0xc0>)
 8002ce6:	4a2d      	ldr	r2, [pc, #180]	@ (8002d9c <ConsoleRegisterBasicCommands+0xc4>)
 8002ce8:	492d      	ldr	r1, [pc, #180]	@ (8002da0 <ConsoleRegisterBasicCommands+0xc8>)
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f912 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsolePrintHelp, h);
	CONSOLE_RegisterCommand(h, "version",  "<<version>> prints the kernel version of the FreeRTOS kernel with which\r\n the current project has been built.",
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8002da4 <ConsoleRegisterBasicCommands+0xcc>)
 8002cf6:	4a2c      	ldr	r2, [pc, #176]	@ (8002da8 <ConsoleRegisterBasicCommands+0xd0>)
 8002cf8:	492c      	ldr	r1, [pc, #176]	@ (8002dac <ConsoleRegisterBasicCommands+0xd4>)
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f90a 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsolePrintKernelVersion, h);
	CONSOLE_RegisterCommand(h, "whoami",   "<<whoami>> prints the current username which is set in this console instance",
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	4b2a      	ldr	r3, [pc, #168]	@ (8002db0 <ConsoleRegisterBasicCommands+0xd8>)
 8002d06:	4a2b      	ldr	r2, [pc, #172]	@ (8002db4 <ConsoleRegisterBasicCommands+0xdc>)
 8002d08:	492b      	ldr	r1, [pc, #172]	@ (8002db8 <ConsoleRegisterBasicCommands+0xe0>)
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f902 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleWhoAmI, h);
	CONSOLE_RegisterCommand(h, "mallinfo", "<<mallinfo>> returns a structure describing the current state of\r\nmemory allocation.  The structure is defined in malloc.h.  The\r\nfollowing fields are defined: <<arena>> is the total amount of space\r\nin the heap; <<ordblks>> is the number of chunks which are not in use;\r\n<<uordblks>> is the total amount of space allocated by <<malloc>>;\r\n<<fordblks>> is the total amount of space not in use; <<keepcost>> is\r\nthe size of the top most memory block.\r\n",
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	4b29      	ldr	r3, [pc, #164]	@ (8002dbc <ConsoleRegisterBasicCommands+0xe4>)
 8002d16:	4a2a      	ldr	r2, [pc, #168]	@ (8002dc0 <ConsoleRegisterBasicCommands+0xe8>)
 8002d18:	492a      	ldr	r1, [pc, #168]	@ (8002dc4 <ConsoleRegisterBasicCommands+0xec>)
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f8fa 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleMallInfo, h);
	CONSOLE_RegisterCommand(h, "getenv",   "<<getenv>> searches the list of environment variable names and values\r\n(using the global pointer ``<<char **environ>>'') for a variable whose\r\nname matches the string at <[name]>.  If a variable name matches,\r\n<<getenv>> returns a pointer to the associated value.",
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	4b28      	ldr	r3, [pc, #160]	@ (8002dc8 <ConsoleRegisterBasicCommands+0xf0>)
 8002d26:	4a29      	ldr	r2, [pc, #164]	@ (8002dcc <ConsoleRegisterBasicCommands+0xf4>)
 8002d28:	4929      	ldr	r1, [pc, #164]	@ (8002dd0 <ConsoleRegisterBasicCommands+0xf8>)
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f8f2 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleGetEnv, h);
	CONSOLE_RegisterCommand(h, "setenv",   "<<setenv>> is similar to <<getenv>> but it sets a global variable\r\nin the list of environment variable names and values",
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	4b27      	ldr	r3, [pc, #156]	@ (8002dd4 <ConsoleRegisterBasicCommands+0xfc>)
 8002d36:	4a28      	ldr	r2, [pc, #160]	@ (8002dd8 <ConsoleRegisterBasicCommands+0x100>)
 8002d38:	4928      	ldr	r1, [pc, #160]	@ (8002ddc <ConsoleRegisterBasicCommands+0x104>)
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f8ea 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleSetEnv, h);
	CONSOLE_RegisterCommand(h, "exit",     "<<exit>> leaves the running console instance and stops the consoel thread.\r\n It clears all given resources.\r\nThere is no console support after calling <<exit>> anymore",
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	4b26      	ldr	r3, [pc, #152]	@ (8002de0 <ConsoleRegisterBasicCommands+0x108>)
 8002d46:	4a27      	ldr	r2, [pc, #156]	@ (8002de4 <ConsoleRegisterBasicCommands+0x10c>)
 8002d48:	4927      	ldr	r1, [pc, #156]	@ (8002de8 <ConsoleRegisterBasicCommands+0x110>)
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f8e2 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleExit, h);
	CONSOLE_RegisterCommand(h, "reset",     "<<reset>> executes a soft reset of the MCU.",
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	4b25      	ldr	r3, [pc, #148]	@ (8002dec <ConsoleRegisterBasicCommands+0x114>)
 8002d56:	4a26      	ldr	r2, [pc, #152]	@ (8002df0 <ConsoleRegisterBasicCommands+0x118>)
 8002d58:	4926      	ldr	r1, [pc, #152]	@ (8002df4 <ConsoleRegisterBasicCommands+0x11c>)
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f8da 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleExecReset, h);
	CONSOLE_RegisterCommand(h, "ticks",     "<<ticks>> prints the time elapsed since system\r\nis running in the unit of ticks.",
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	4b24      	ldr	r3, [pc, #144]	@ (8002df8 <ConsoleRegisterBasicCommands+0x120>)
 8002d66:	4a25      	ldr	r2, [pc, #148]	@ (8002dfc <ConsoleRegisterBasicCommands+0x124>)
 8002d68:	4925      	ldr	r1, [pc, #148]	@ (8002e00 <ConsoleRegisterBasicCommands+0x128>)
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f8d2 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsolePrintKernelTicks, h);
	CONSOLE_RegisterCommand(h, "alias",     "<<alias>>",
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	4b23      	ldr	r3, [pc, #140]	@ (8002e04 <ConsoleRegisterBasicCommands+0x12c>)
 8002d76:	4a24      	ldr	r2, [pc, #144]	@ (8002e08 <ConsoleRegisterBasicCommands+0x130>)
 8002d78:	4924      	ldr	r1, [pc, #144]	@ (8002e0c <ConsoleRegisterBasicCommands+0x134>)
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f8ca 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleAliasConfig, h);
#if defined(configGENERATE_RUN_TIME_STATS) && (configGENERATE_RUN_TIME_STATS != 0)
	CONSOLE_RegisterCommand(h, "tasks",     "<<tasks>> prints information about the active tasks\r\nand prints also runtime information.",
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	4b22      	ldr	r3, [pc, #136]	@ (8002e10 <ConsoleRegisterBasicCommands+0x138>)
 8002d86:	4a23      	ldr	r2, [pc, #140]	@ (8002e14 <ConsoleRegisterBasicCommands+0x13c>)
 8002d88:	4923      	ldr	r1, [pc, #140]	@ (8002e18 <ConsoleRegisterBasicCommands+0x140>)
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f8c2 	bl	8002f14 <CONSOLE_RegisterCommand>
		ConsolePrintTaskStats, h);
#endif
}
 8002d90:	bf00      	nop
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	080025b9 	.word	0x080025b9
 8002d9c:	08016d28 	.word	0x08016d28
 8002da0:	08016dc8 	.word	0x08016dc8
 8002da4:	0800297d 	.word	0x0800297d
 8002da8:	08016dd0 	.word	0x08016dd0
 8002dac:	08016e40 	.word	0x08016e40
 8002db0:	080029a9 	.word	0x080029a9
 8002db4:	08016e48 	.word	0x08016e48
 8002db8:	08016e98 	.word	0x08016e98
 8002dbc:	08002a0d 	.word	0x08002a0d
 8002dc0:	08016ea0 	.word	0x08016ea0
 8002dc4:	08017064 	.word	0x08017064
 8002dc8:	08002a79 	.word	0x08002a79
 8002dcc:	08017070 	.word	0x08017070
 8002dd0:	08017178 	.word	0x08017178
 8002dd4:	08002ae5 	.word	0x08002ae5
 8002dd8:	08017180 	.word	0x08017180
 8002ddc:	080171f8 	.word	0x080171f8
 8002de0:	080029e9 	.word	0x080029e9
 8002de4:	08017200 	.word	0x08017200
 8002de8:	080172a8 	.word	0x080172a8
 8002dec:	080026e9 	.word	0x080026e9
 8002df0:	080172b0 	.word	0x080172b0
 8002df4:	080172dc 	.word	0x080172dc
 8002df8:	080026f9 	.word	0x080026f9
 8002dfc:	080172e4 	.word	0x080172e4
 8002e00:	08017338 	.word	0x08017338
 8002e04:	08002b4d 	.word	0x08002b4d
 8002e08:	08017340 	.word	0x08017340
 8002e0c:	0801734c 	.word	0x0801734c
 8002e10:	08002721 	.word	0x08002721
 8002e14:	08017354 	.word	0x08017354
 8002e18:	080173b0 	.word	0x080173b0

08002e1c <CONSOLE_CreateInstance>:

// --------------------------------------------------------------------------------------------------------------------
ConsoleHandle_t CONSOLE_CreateInstance( unsigned int uxStackDepth, int xPrio )
// --------------------------------------------------------------------------------------------------------------------
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
#define ON_NULL_GOTO_ERROR(x) do { if ((x) == NULL) goto error; } while(0);
	struct ConsoleHandle* h = calloc(sizeof(struct ConsoleHandle), 1);
 8002e26:	2101      	movs	r1, #1
 8002e28:	f44f 6084 	mov.w	r0, #1056	@ 0x420
 8002e2c:	f00e fc3e 	bl	80116ac <calloc>
 8002e30:	4603      	mov	r3, r0
 8002e32:	60fb      	str	r3, [r7, #12]
	ON_NULL_GOTO_ERROR(h);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d051      	beq.n	8002ede <CONSOLE_CreateInstance+0xc2>

	h->cState.lockGuard = xSemaphoreCreateRecursiveMutex();
 8002e3a:	2004      	movs	r0, #4
 8002e3c:	f00b fc2f 	bl	800e69e <xQueueCreateMutex>
 8002e40:	4602      	mov	r2, r0
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	601a      	str	r2, [r3, #0]
	ON_NULL_GOTO_ERROR(h->cState.lockGuard);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d047      	beq.n	8002ede <CONSOLE_CreateInstance+0xc2>
	h->pState.state = ctrlpsIDLE_DETECT;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	721a      	strb	r2, [r3, #8]
	h->pState.length = 0;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	611a      	str	r2, [r3, #16]
	h->pState.maxLength = CONSOLE_LINE_SIZE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2278      	movs	r2, #120	@ 0x78
 8002e5e:	615a      	str	r2, [r3, #20]
	h->pState.type = ctrlUNKNOWN;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002e66:	815a      	strh	r2, [r3, #10]
	h->pState.buff = NULL;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	619a      	str	r2, [r3, #24]
	h->cancel = 0;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	621a      	str	r2, [r3, #32]
	h->pendingRedirect = 0;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
	h->pendingRdStream = NULL;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
	h->pendingWrStream = NULL;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414

	LIST_INIT(&h->cState.commands);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	605a      	str	r2, [r3, #4]
	ConsoleRegisterBasicCommands(h);
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f7ff ff20 	bl	8002cd8 <ConsoleRegisterBasicCommands>

	memset(h->history.lines, 0, sizeof(h->history.lines));
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	3324      	adds	r3, #36	@ 0x24
 8002e9c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f010 ff64 	bl	8013d70 <memset>
	h->history.linePtr = h->history.lineHead = 0;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

	xTaskCreate(ConsoleFunction, "console", uxStackDepth, h, xPrio, &h->tHandle);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	321c      	adds	r2, #28
 8002ec2:	9201      	str	r2, [sp, #4]
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	4910      	ldr	r1, [pc, #64]	@ (8002f0c <CONSOLE_CreateInstance+0xf0>)
 8002ecc:	4810      	ldr	r0, [pc, #64]	@ (8002f10 <CONSOLE_CreateInstance+0xf4>)
 8002ece:	f00c f953 	bl	800f178 <xTaskCreate>
	ON_NULL_GOTO_ERROR(h->tHandle);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <CONSOLE_CreateInstance+0xc2>
	return h;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	e012      	b.n	8002f04 <CONSOLE_CreateInstance+0xe8>

error:
	if ( h != NULL )
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00e      	beq.n	8002f02 <CONSOLE_CreateInstance+0xe6>
	{
		if ( h->cState.lockGuard != NULL )
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d007      	beq.n	8002efc <CONSOLE_CreateInstance+0xe0>
		{
			vSemaphoreDelete(h->cState.lockGuard);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f00b ff85 	bl	800ee00 <vQueueDelete>
			h->cState.lockGuard = NULL;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
		}

		free(h);
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f00e fc41 	bl	8011784 <free>
	}

	return NULL;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	080173b8 	.word	0x080173b8
 8002f10:	08001c35 	.word	0x08001c35

08002f14 <CONSOLE_RegisterCommand>:

// --------------------------------------------------------------------------------------------------------------------
int CONSOLE_RegisterCommand( ConsoleHandle_t h, char* cmd, char* help, CONSOLE_CommandFunc func, void* context )
// --------------------------------------------------------------------------------------------------------------------
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b08c      	sub	sp, #48	@ 0x30
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	603b      	str	r3, [r7, #0]
	int result = -1;
 8002f22:	f04f 33ff 	mov.w	r3, #4294967295
 8002f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if ( cmd == NULL || help == NULL || func == NULL ) return result;
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d005      	beq.n	8002f3a <CONSOLE_RegisterCommand+0x26>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <CONSOLE_RegisterCommand+0x26>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <CONSOLE_RegisterCommand+0x2a>
 8002f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f3c:	e0b5      	b.n	80030aa <CONSOLE_RegisterCommand+0x196>
	if ( *cmd == '\0' || *help == '\0' ) return result;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <CONSOLE_RegisterCommand+0x3a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <CONSOLE_RegisterCommand+0x3e>
 8002f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f50:	e0ab      	b.n	80030aa <CONSOLE_RegisterCommand+0x196>
	int cmdLen  = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	623b      	str	r3, [r7, #32]
	int helpLen = 0;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61fb      	str	r3, [r7, #28]
	if ( (cmdLen  = (int)strnlen(cmd, CONSOLE_COMMAND_MAX_LENGTH+1) )   > CONSOLE_COMMAND_MAX_LENGTH  ) return result;
 8002f5a:	2141      	movs	r1, #65	@ 0x41
 8002f5c:	68b8      	ldr	r0, [r7, #8]
 8002f5e:	f010 ff2e 	bl	8013dbe <strnlen>
 8002f62:	4603      	mov	r3, r0
 8002f64:	623b      	str	r3, [r7, #32]
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	2b40      	cmp	r3, #64	@ 0x40
 8002f6a:	dd01      	ble.n	8002f70 <CONSOLE_RegisterCommand+0x5c>
 8002f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f6e:	e09c      	b.n	80030aa <CONSOLE_RegisterCommand+0x196>
	if ( (helpLen = (int)strnlen(help, CONSOLE_HELP_MAX_LENGTH+1) ) > CONSOLE_HELP_MAX_LENGTH ) return result;
 8002f70:	f240 2101 	movw	r1, #513	@ 0x201
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f010 ff22 	bl	8013dbe <strnlen>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f84:	dd01      	ble.n	8002f8a <CONSOLE_RegisterCommand+0x76>
 8002f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f88:	e08f      	b.n	80030aa <CONSOLE_RegisterCommand+0x196>

	// could be called while the scheduler is not running or suspended, so we must not use to use the lock guard
	if ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) xSemaphoreTakeRecursive( h->cState.lockGuard, -1 );
 8002f8a:	f00d fba1 	bl	80106d0 <xTaskGetSchedulerState>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d106      	bne.n	8002fa2 <CONSOLE_RegisterCommand+0x8e>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f04f 31ff 	mov.w	r1, #4294967295
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f00b fbd3 	bl	800e748 <xQueueTakeMutexRecursive>

	cmdState_t* c = &h->cState;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	61bb      	str	r3, [r7, #24]
	int found = 0;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
	cmdEntry_t* pElement = c->commands.lh_first;
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	627b      	str	r3, [r7, #36]	@ 0x24
	while ( pElement != NULL )
 8002fb0:	e015      	b.n	8002fde <CONSOLE_RegisterCommand+0xca>
	{
		// if string compare result and determined length match, then this must be the function
		if ( strncmp(cmd, pElement->content.cmd, cmdLen) == 0 && cmdLen == pElement->content.cmdLen )
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	3308      	adds	r3, #8
 8002fb6:	6a3a      	ldr	r2, [r7, #32]
 8002fb8:	4619      	mov	r1, r3
 8002fba:	68b8      	ldr	r0, [r7, #8]
 8002fbc:	f010 feed 	bl	8013d9a <strncmp>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d107      	bne.n	8002fd6 <CONSOLE_RegisterCommand+0xc2>
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fca:	6a3a      	ldr	r2, [r7, #32]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d102      	bne.n	8002fd6 <CONSOLE_RegisterCommand+0xc2>
		{
			found = 1;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
			break;
 8002fd4:	e006      	b.n	8002fe4 <CONSOLE_RegisterCommand+0xd0>
		}
		pElement = pElement->navigate.le_next;
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd8:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 8002fdc:	627b      	str	r3, [r7, #36]	@ 0x24
	while ( pElement != NULL )
 8002fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1e6      	bne.n	8002fb2 <CONSOLE_RegisterCommand+0x9e>
	}

	if ( found == 1 )
 8002fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d103      	bne.n	8002ff2 <CONSOLE_RegisterCommand+0xde>
	{
		result = -1;
 8002fea:	f04f 33ff 	mov.w	r3, #4294967295
 8002fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ff0:	e050      	b.n	8003094 <CONSOLE_RegisterCommand+0x180>
	}
	else
	{
		struct cmdEntry *item = malloc(sizeof(struct cmdEntry));
 8002ff2:	f44f 7019 	mov.w	r0, #612	@ 0x264
 8002ff6:	f00e fbbd 	bl	8011774 <malloc>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	617b      	str	r3, [r7, #20]
		if (item == NULL) return result;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <CONSOLE_RegisterCommand+0xf4>
 8003004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003006:	e050      	b.n	80030aa <CONSOLE_RegisterCommand+0x196>
		item->content.isAlias = 0;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	2200      	movs	r2, #0
 800300c:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258
		item->content.cmdLen  = cmdLen;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	6a3a      	ldr	r2, [r7, #32]
 8003014:	64da      	str	r2, [r3, #76]	@ 0x4c
		item->content.helpLen = helpLen;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	69fa      	ldr	r2, [r7, #28]
 800301a:	f8c3 2254 	str.w	r2, [r3, #596]	@ 0x254
		item->content.func    = func;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	601a      	str	r2, [r3, #0]
		item->content.ctx     = context;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003028:	605a      	str	r2, [r3, #4]
		memcpy(item->content.cmd, cmd, cmdLen);
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	3308      	adds	r3, #8
 800302e:	6a3a      	ldr	r2, [r7, #32]
 8003030:	68b9      	ldr	r1, [r7, #8]
 8003032:	4618      	mov	r0, r3
 8003034:	f011 f802 	bl	801403c <memcpy>
		item->content.cmd[cmdLen] = '\0';
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	4413      	add	r3, r2
 800303e:	3308      	adds	r3, #8
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]
		memcpy(item->content.help, help, helpLen);
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	3350      	adds	r3, #80	@ 0x50
 8003048:	69fa      	ldr	r2, [r7, #28]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4618      	mov	r0, r3
 800304e:	f010 fff5 	bl	801403c <memcpy>
		item->content.help[helpLen] = '\0';
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	4413      	add	r3, r2
 8003058:	3350      	adds	r3, #80	@ 0x50
 800305a:	2200      	movs	r2, #0
 800305c:	701a      	strb	r2, [r3, #0]
		LIST_INSERT_HEAD(&h->cState.commands, item, navigate);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 800306e:	2b00      	cmp	r3, #0
 8003070:	d006      	beq.n	8003080 <CONSOLE_RegisterCommand+0x16c>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	f502 7217 	add.w	r2, r2, #604	@ 0x25c
 800307c:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	1d1a      	adds	r2, r3, #4
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
		result = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	// could be called while the scheduler is not running or suspended, so we must not use to use the lock guard
	if ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) xSemaphoreGiveRecursive( h->cState.lockGuard );
 8003094:	f00d fb1c 	bl	80106d0 <xTaskGetSchedulerState>
 8003098:	4603      	mov	r3, r0
 800309a:	2b02      	cmp	r3, #2
 800309c:	d104      	bne.n	80030a8 <CONSOLE_RegisterCommand+0x194>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f00b fb14 	bl	800e6d0 <xQueueGiveMutexRecursive>
	return result;
 80030a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3730      	adds	r7, #48	@ 0x30
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <CONSOLE_RegisterAlias>:


// --------------------------------------------------------------------------------------------------------------------
int CONSOLE_RegisterAlias( ConsoleHandle_t h, char* cmd, char* aliasCmd )
// --------------------------------------------------------------------------------------------------------------------
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b08c      	sub	sp, #48	@ 0x30
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	607a      	str	r2, [r7, #4]
	int result = -1;
 80030be:	f04f 33ff 	mov.w	r3, #4294967295
 80030c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if ( cmd == NULL || aliasCmd == NULL ) return result;
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <CONSOLE_RegisterAlias+0x1e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <CONSOLE_RegisterAlias+0x22>
 80030d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030d2:	e0b3      	b.n	800323c <CONSOLE_RegisterAlias+0x18a>
	if ( *cmd == '\0' || *aliasCmd == '\0' ) return result;
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <CONSOLE_RegisterAlias+0x32>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <CONSOLE_RegisterAlias+0x36>
 80030e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e6:	e0a9      	b.n	800323c <CONSOLE_RegisterAlias+0x18a>
	int cmdLen  = 0;
 80030e8:	2300      	movs	r3, #0
 80030ea:	623b      	str	r3, [r7, #32]
	int aliasCmdLen = 0;
 80030ec:	2300      	movs	r3, #0
 80030ee:	61fb      	str	r3, [r7, #28]
	if ( (cmdLen      = (int)strnlen(cmd, CONSOLE_COMMAND_MAX_LENGTH+1) )      > CONSOLE_COMMAND_MAX_LENGTH ) return result;
 80030f0:	2141      	movs	r1, #65	@ 0x41
 80030f2:	68b8      	ldr	r0, [r7, #8]
 80030f4:	f010 fe63 	bl	8013dbe <strnlen>
 80030f8:	4603      	mov	r3, r0
 80030fa:	623b      	str	r3, [r7, #32]
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	2b40      	cmp	r3, #64	@ 0x40
 8003100:	dd01      	ble.n	8003106 <CONSOLE_RegisterAlias+0x54>
 8003102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003104:	e09a      	b.n	800323c <CONSOLE_RegisterAlias+0x18a>
	if ( (aliasCmdLen = (int)strnlen(aliasCmd, CONSOLE_COMMAND_MAX_LENGTH+1) ) > CONSOLE_COMMAND_MAX_LENGTH ) return result;
 8003106:	2141      	movs	r1, #65	@ 0x41
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f010 fe58 	bl	8013dbe <strnlen>
 800310e:	4603      	mov	r3, r0
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	2b40      	cmp	r3, #64	@ 0x40
 8003116:	dd01      	ble.n	800311c <CONSOLE_RegisterAlias+0x6a>
 8003118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800311a:	e08f      	b.n	800323c <CONSOLE_RegisterAlias+0x18a>

	// could be called while the scheduler is not running or suspended, so we must not use to use the lock guard
	if ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) xSemaphoreTakeRecursive( h->cState.lockGuard, -1 );
 800311c:	f00d fad8 	bl	80106d0 <xTaskGetSchedulerState>
 8003120:	4603      	mov	r3, r0
 8003122:	2b02      	cmp	r3, #2
 8003124:	d106      	bne.n	8003134 <CONSOLE_RegisterAlias+0x82>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f04f 31ff 	mov.w	r1, #4294967295
 800312e:	4618      	mov	r0, r3
 8003130:	f00b fb0a 	bl	800e748 <xQueueTakeMutexRecursive>

	cmdState_t* c = &h->cState;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	61bb      	str	r3, [r7, #24]
	int found = 0;
 8003138:	2300      	movs	r3, #0
 800313a:	62bb      	str	r3, [r7, #40]	@ 0x28
	cmdEntry_t* pElement = c->commands.lh_first;
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	627b      	str	r3, [r7, #36]	@ 0x24
	while ( pElement != NULL )
 8003142:	e015      	b.n	8003170 <CONSOLE_RegisterAlias+0xbe>
	{
		// if string compare result and determined length match, then this must be the function
		if ( strncmp(cmd, pElement->content.cmd, cmdLen) == 0 && cmdLen == pElement->content.cmdLen )
 8003144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003146:	3308      	adds	r3, #8
 8003148:	6a3a      	ldr	r2, [r7, #32]
 800314a:	4619      	mov	r1, r3
 800314c:	68b8      	ldr	r0, [r7, #8]
 800314e:	f010 fe24 	bl	8013d9a <strncmp>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d107      	bne.n	8003168 <CONSOLE_RegisterAlias+0xb6>
 8003158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800315c:	6a3a      	ldr	r2, [r7, #32]
 800315e:	429a      	cmp	r2, r3
 8003160:	d102      	bne.n	8003168 <CONSOLE_RegisterAlias+0xb6>
		{
			found = 1;
 8003162:	2301      	movs	r3, #1
 8003164:	62bb      	str	r3, [r7, #40]	@ 0x28
			break;
 8003166:	e006      	b.n	8003176 <CONSOLE_RegisterAlias+0xc4>
		}
		pElement = pElement->navigate.le_next;
 8003168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316a:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 800316e:	627b      	str	r3, [r7, #36]	@ 0x24
	while ( pElement != NULL )
 8003170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1e6      	bne.n	8003144 <CONSOLE_RegisterAlias+0x92>
	}

	if ( found == 1 )
 8003176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003178:	2b01      	cmp	r3, #1
 800317a:	d103      	bne.n	8003184 <CONSOLE_RegisterAlias+0xd2>
	{
		result = -1;
 800317c:	f04f 33ff 	mov.w	r3, #4294967295
 8003180:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003182:	e050      	b.n	8003226 <CONSOLE_RegisterAlias+0x174>
	}
	else
	{
		struct cmdEntry *item = malloc(sizeof(struct cmdEntry));
 8003184:	f44f 7019 	mov.w	r0, #612	@ 0x264
 8003188:	f00e faf4 	bl	8011774 <malloc>
 800318c:	4603      	mov	r3, r0
 800318e:	617b      	str	r3, [r7, #20]
		if (item == NULL) return result;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <CONSOLE_RegisterAlias+0xe8>
 8003196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003198:	e050      	b.n	800323c <CONSOLE_RegisterAlias+0x18a>
		item->content.isAlias = 1;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2201      	movs	r2, #1
 800319e:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258
		item->content.cmdLen  = cmdLen;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	6a3a      	ldr	r2, [r7, #32]
 80031a6:	64da      	str	r2, [r3, #76]	@ 0x4c
		item->content.helpLen = aliasCmdLen;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	f8c3 2254 	str.w	r2, [r3, #596]	@ 0x254
		item->content.func    = NULL;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
		item->content.ctx     = NULL;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2200      	movs	r2, #0
 80031ba:	605a      	str	r2, [r3, #4]
		memcpy(item->content.cmd, cmd, cmdLen);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	3308      	adds	r3, #8
 80031c0:	6a3a      	ldr	r2, [r7, #32]
 80031c2:	68b9      	ldr	r1, [r7, #8]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f010 ff39 	bl	801403c <memcpy>
		item->content.cmd[cmdLen] = '\0';
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	4413      	add	r3, r2
 80031d0:	3308      	adds	r3, #8
 80031d2:	2200      	movs	r2, #0
 80031d4:	701a      	strb	r2, [r3, #0]
		memcpy(item->content.help, aliasCmd, aliasCmdLen);
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	3350      	adds	r3, #80	@ 0x50
 80031da:	69fa      	ldr	r2, [r7, #28]
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	4618      	mov	r0, r3
 80031e0:	f010 ff2c 	bl	801403c <memcpy>
		item->content.help[aliasCmdLen] = '\0';
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	4413      	add	r3, r2
 80031ea:	3350      	adds	r3, #80	@ 0x50
 80031ec:	2200      	movs	r2, #0
 80031ee:	701a      	strb	r2, [r3, #0]
		LIST_INSERT_HEAD(&h->cState.commands, item, navigate);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 8003200:	2b00      	cmp	r3, #0
 8003202:	d006      	beq.n	8003212 <CONSOLE_RegisterAlias+0x160>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	f502 7217 	add.w	r2, r2, #604	@ 0x25c
 800320e:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	605a      	str	r2, [r3, #4]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1d1a      	adds	r2, r3, #4
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
		result = 0;
 8003222:	2300      	movs	r3, #0
 8003224:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	// could be called while the scheduler is not running or suspended, so we must not use to use the lock guard
	if ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) xSemaphoreGiveRecursive( h->cState.lockGuard );
 8003226:	f00d fa53 	bl	80106d0 <xTaskGetSchedulerState>
 800322a:	4603      	mov	r3, r0
 800322c:	2b02      	cmp	r3, #2
 800322e:	d104      	bne.n	800323a <CONSOLE_RegisterAlias+0x188>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f00b fa4b 	bl	800e6d0 <xQueueGiveMutexRecursive>
	return result;
 800323a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800323c:	4618      	mov	r0, r3
 800323e:	3730      	adds	r7, #48	@ 0x30
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <CONSOLE_RemoveAliasOrCommand>:

// --------------------------------------------------------------------------------------------------------------------
int CONSOLE_RemoveAliasOrCommand( ConsoleHandle_t h, char* cmd)
// --------------------------------------------------------------------------------------------------------------------
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
	int result = -1;
 800324e:	f04f 33ff 	mov.w	r3, #4294967295
 8003252:	61fb      	str	r3, [r7, #28]
	if ( cmd == NULL ) return result;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <CONSOLE_RemoveAliasOrCommand+0x1a>
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	e066      	b.n	800332c <CONSOLE_RemoveAliasOrCommand+0xe8>
	if ( *cmd == '\0' ) return result;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <CONSOLE_RemoveAliasOrCommand+0x26>
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	e060      	b.n	800332c <CONSOLE_RemoveAliasOrCommand+0xe8>
	int cmdLen  = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	613b      	str	r3, [r7, #16]
	if ( (cmdLen      = (int)strnlen(cmd, CONSOLE_COMMAND_MAX_LENGTH+1) ) > CONSOLE_COMMAND_MAX_LENGTH ) return result;
 800326e:	2141      	movs	r1, #65	@ 0x41
 8003270:	6838      	ldr	r0, [r7, #0]
 8003272:	f010 fda4 	bl	8013dbe <strnlen>
 8003276:	4603      	mov	r3, r0
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	2b40      	cmp	r3, #64	@ 0x40
 800327e:	dd01      	ble.n	8003284 <CONSOLE_RemoveAliasOrCommand+0x40>
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	e053      	b.n	800332c <CONSOLE_RemoveAliasOrCommand+0xe8>

	// could be called while the scheduler is not running or suspended, so we must not use to use the lock guard
	if ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) xSemaphoreTakeRecursive( h->cState.lockGuard, -1 );
 8003284:	f00d fa24 	bl	80106d0 <xTaskGetSchedulerState>
 8003288:	4603      	mov	r3, r0
 800328a:	2b02      	cmp	r3, #2
 800328c:	d106      	bne.n	800329c <CONSOLE_RemoveAliasOrCommand+0x58>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f04f 31ff 	mov.w	r1, #4294967295
 8003296:	4618      	mov	r0, r3
 8003298:	f00b fa56 	bl	800e748 <xQueueTakeMutexRecursive>

	cmdState_t* c = &h->cState;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	60fb      	str	r3, [r7, #12]
	int found = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	61bb      	str	r3, [r7, #24]
	cmdEntry_t* pElement = c->commands.lh_first;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	617b      	str	r3, [r7, #20]
	while ( pElement != NULL )
 80032aa:	e015      	b.n	80032d8 <CONSOLE_RemoveAliasOrCommand+0x94>
	{
		// if string compare result and determined length match, then this must be the function
		if ( strncmp(cmd, pElement->content.cmd, cmdLen) == 0 && cmdLen == pElement->content.cmdLen )
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	3308      	adds	r3, #8
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	4619      	mov	r1, r3
 80032b4:	6838      	ldr	r0, [r7, #0]
 80032b6:	f010 fd70 	bl	8013d9a <strncmp>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d107      	bne.n	80032d0 <CONSOLE_RemoveAliasOrCommand+0x8c>
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d102      	bne.n	80032d0 <CONSOLE_RemoveAliasOrCommand+0x8c>
		{
			found = 1;
 80032ca:	2301      	movs	r3, #1
 80032cc:	61bb      	str	r3, [r7, #24]
			break;
 80032ce:	e006      	b.n	80032de <CONSOLE_RemoveAliasOrCommand+0x9a>
		}
		pElement = pElement->navigate.le_next;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 80032d6:	617b      	str	r3, [r7, #20]
	while ( pElement != NULL )
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1e6      	bne.n	80032ac <CONSOLE_RemoveAliasOrCommand+0x68>
	}

	if ( found == 1 )
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d118      	bne.n	8003316 <CONSOLE_RemoveAliasOrCommand+0xd2>
	{
		LIST_REMOVE(pElement, navigate);
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d007      	beq.n	80032fe <CONSOLE_RemoveAliasOrCommand+0xba>
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	f8d2 2260 	ldr.w	r2, [r2, #608]	@ 0x260
 80032fa:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	f8d2 225c 	ldr.w	r2, [r2, #604]	@ 0x25c
 800330a:	601a      	str	r2, [r3, #0]
		free(pElement);
 800330c:	6978      	ldr	r0, [r7, #20]
 800330e:	f00e fa39 	bl	8011784 <free>
		result = 0;
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
	}

	// could be called while the scheduler is not running or suspended, so we must not use to use the lock guard
	if ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) xSemaphoreGiveRecursive( h->cState.lockGuard );
 8003316:	f00d f9db 	bl	80106d0 <xTaskGetSchedulerState>
 800331a:	4603      	mov	r3, r0
 800331c:	2b02      	cmp	r3, #2
 800331e:	d104      	bne.n	800332a <CONSOLE_RemoveAliasOrCommand+0xe6>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f00b f9d3 	bl	800e6d0 <xQueueGiveMutexRecursive>
	return result;
 800332a:	69fb      	ldr	r3, [r7, #28]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3720      	adds	r7, #32
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <SPINDLE_SetDirection>:
int SpindleStop(void);
int SpindleStatus(void);


void SPINDLE_SetDirection(SpindleHandle_t h, void *context, int backward)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  (void)h;
  (void)context;
  spindleContext.direction = backward;
 8003340:	4a08      	ldr	r2, [pc, #32]	@ (8003364 <SPINDLE_SetDirection+0x30>)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6013      	str	r3, [r2, #0]

  if (backward)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <SPINDLE_SetDirection+0x20>
  {
    printf("Setting spindle direction: backward (counter-clockwise)\r\n");
 800334c:	4806      	ldr	r0, [pc, #24]	@ (8003368 <SPINDLE_SetDirection+0x34>)
 800334e:	f010 fb29 	bl	80139a4 <puts>
  }
  else
  {
    printf("Setting spindle direction: forward (clockwise)\r\n");
  }
}
 8003352:	e002      	b.n	800335a <SPINDLE_SetDirection+0x26>
    printf("Setting spindle direction: forward (clockwise)\r\n");
 8003354:	4805      	ldr	r0, [pc, #20]	@ (800336c <SPINDLE_SetDirection+0x38>)
 8003356:	f010 fb25 	bl	80139a4 <puts>
}
 800335a:	bf00      	nop
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20000240 	.word	0x20000240
 8003368:	080173c0 	.word	0x080173c0
 800336c:	080173fc 	.word	0x080173fc

08003370 <SPINDLE_SetDutyCycle>:

void SPINDLE_SetDutyCycle(SpindleHandle_t h, void *context, float dutyCycle)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)h;
  (void)context;
  int arr = TIM2->ARR;
 800337e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003384:	617b      	str	r3, [r7, #20]
  if (spindleContext.direction)
 8003386:	4b19      	ldr	r3, [pc, #100]	@ (80033ec <SPINDLE_SetDutyCycle+0x7c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d014      	beq.n	80033b8 <SPINDLE_SetDutyCycle+0x48>
   {
      TIM2->CCR3 = 0;
 800338e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003392:	2200      	movs	r2, #0
 8003394:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2->CCR4 = (int)((float)arr * dutyCycle);
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	ee07 3a90 	vmov	s15, r3
 800339c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80033a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80033b0:	ee17 2a90 	vmov	r2, s15
 80033b4:	641a      	str	r2, [r3, #64]	@ 0x40
   {
      TIM2->CCR3 = (int)((float)arr * dutyCycle);
      TIM2->CCR4 = 0;
   }
  
}
 80033b6:	e013      	b.n	80033e0 <SPINDLE_SetDutyCycle+0x70>
      TIM2->CCR3 = (int)((float)arr * dutyCycle);
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	ee07 3a90 	vmov	s15, r3
 80033be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80033c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80033d2:	ee17 2a90 	vmov	r2, s15
 80033d6:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2->CCR4 = 0;
 80033d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80033dc:	2200      	movs	r2, #0
 80033de:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80033e0:	bf00      	nop
 80033e2:	371c      	adds	r7, #28
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	20000240 	.word	0x20000240

080033f0 <SPINDLE_EnaPWM>:

void SPINDLE_EnaPWM(SpindleHandle_t h, void *context, int ena)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  (void)h;
  (void)context;

  HAL_GPIO_WritePin(SPINDLE_ENA_L_GPIO_Port, SPINDLE_ENA_L_Pin, ena);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	461a      	mov	r2, r3
 8003402:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003406:	480d      	ldr	r0, [pc, #52]	@ (800343c <SPINDLE_EnaPWM+0x4c>)
 8003408:	f004 f92c 	bl	8007664 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPINDLE_ENA_R_GPIO_Port, SPINDLE_ENA_R_Pin, ena);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003416:	4809      	ldr	r0, [pc, #36]	@ (800343c <SPINDLE_EnaPWM+0x4c>)
 8003418:	f004 f924 	bl	8007664 <HAL_GPIO_WritePin>

  if (ena)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d007      	beq.n	8003432 <SPINDLE_EnaPWM+0x42>
  {
      HAL_TIM_PWM_Start(&spindleContext.timer, TIM_CHANNEL_3);
 8003422:	2108      	movs	r1, #8
 8003424:	4806      	ldr	r0, [pc, #24]	@ (8003440 <SPINDLE_EnaPWM+0x50>)
 8003426:	f007 f97f 	bl	800a728 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&spindleContext.timer, TIM_CHANNEL_4);
 800342a:	210c      	movs	r1, #12
 800342c:	4804      	ldr	r0, [pc, #16]	@ (8003440 <SPINDLE_EnaPWM+0x50>)
 800342e:	f007 f97b 	bl	800a728 <HAL_TIM_PWM_Start>
  }
}
 8003432:	bf00      	nop
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40021000 	.word	0x40021000
 8003440:	20000244 	.word	0x20000244

08003444 <InitSpindle>:

void InitSpindle(ConsoleHandle_t* consoleHandle, TIM_HandleTypeDef* htim)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08a      	sub	sp, #40	@ 0x28
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  // Initialize the spindle parameters
  SpindlePhysicalParams_t s;
  s.maxRPM = 9000.0f;
 800344e:	4b19      	ldr	r3, [pc, #100]	@ (80034b4 <InitSpindle+0x70>)
 8003450:	61bb      	str	r3, [r7, #24]
  s.minRPM = -9000.0f;
 8003452:	4b19      	ldr	r3, [pc, #100]	@ (80034b8 <InitSpindle+0x74>)
 8003454:	623b      	str	r3, [r7, #32]
  s.absMinRPM = 1600.0f;
 8003456:	4b19      	ldr	r3, [pc, #100]	@ (80034bc <InitSpindle+0x78>)
 8003458:	61fb      	str	r3, [r7, #28]
  s.setDirection = SPINDLE_SetDirection;
 800345a:	4b19      	ldr	r3, [pc, #100]	@ (80034c0 <InitSpindle+0x7c>)
 800345c:	60fb      	str	r3, [r7, #12]
  s.setDutyCycle = SPINDLE_SetDutyCycle;
 800345e:	4b19      	ldr	r3, [pc, #100]	@ (80034c4 <InitSpindle+0x80>)
 8003460:	613b      	str	r3, [r7, #16]
  s.enaPWM = SPINDLE_EnaPWM;
 8003462:	4b19      	ldr	r3, [pc, #100]	@ (80034c8 <InitSpindle+0x84>)
 8003464:	617b      	str	r3, [r7, #20]
  s.context = NULL;
 8003466:	2300      	movs	r3, #0
 8003468:	627b      	str	r3, [r7, #36]	@ 0x24

  spindleContext.handle= SPINDLE_CreateInstance(4 * configMINIMAL_STACK_SIZE,
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	f107 030c 	add.w	r3, r7, #12
 8003472:	2104      	movs	r1, #4
 8003474:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003478:	f001 f8fc 	bl	8004674 <SPINDLE_CreateInstance>
 800347c:	4603      	mov	r3, r0
 800347e:	4a13      	ldr	r2, [pc, #76]	@ (80034cc <InitSpindle+0x88>)
 8003480:	6513      	str	r3, [r2, #80]	@ 0x50
                                         configMAX_PRIORITIES - 3,
                                         *consoleHandle, &s);

  if (spindleContext.handle == NULL)
 8003482:	4b12      	ldr	r3, [pc, #72]	@ (80034cc <InitSpindle+0x88>)
 8003484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003486:	2b00      	cmp	r3, #0
 8003488:	d104      	bne.n	8003494 <InitSpindle+0x50>
  {
    printf("Failed to create spindle controller instance\r\n");
 800348a:	4811      	ldr	r0, [pc, #68]	@ (80034d0 <InitSpindle+0x8c>)
 800348c:	f010 fa8a 	bl	80139a4 <puts>
    Error_Handler();
 8003490:	f002 fcf1 	bl	8005e76 <Error_Handler>
  }
  spindleContext.direction = 0;
 8003494:	4b0d      	ldr	r3, [pc, #52]	@ (80034cc <InitSpindle+0x88>)
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]
  spindleContext.timer = *htim;
 800349a:	4b0c      	ldr	r3, [pc, #48]	@ (80034cc <InitSpindle+0x88>)
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	3304      	adds	r3, #4
 80034a0:	4611      	mov	r1, r2
 80034a2:	224c      	movs	r2, #76	@ 0x4c
 80034a4:	4618      	mov	r0, r3
 80034a6:	f010 fdc9 	bl	801403c <memcpy>
 80034aa:	bf00      	nop
 80034ac:	3728      	adds	r7, #40	@ 0x28
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	460ca000 	.word	0x460ca000
 80034b8:	c60ca000 	.word	0xc60ca000
 80034bc:	44c80000 	.word	0x44c80000
 80034c0:	08003335 	.word	0x08003335
 80034c4:	08003371 	.word	0x08003371
 80034c8:	080033f1 	.word	0x080033f1
 80034cc:	20000240 	.word	0x20000240
 80034d0:	0801742c 	.word	0x0801742c

080034d4 <StepLibraryMalloc>:
StepperContext_t StepperContext;


//---------Basic---Functions--------------
static void* StepLibraryMalloc(unsigned int size) 
{ 
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
    return malloc(size); 
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f00e f949 	bl	8011774 <malloc>
 80034e2:	4603      	mov	r3, r0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <StepLibraryFree>:

static void StepLibraryFree(const void* const ptr) 
{ 
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
    free((void*)ptr); 
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f00e f945 	bl	8011784 <free>
}
 80034fa:	bf00      	nop
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
	...

08003504 <StepDriverSpiTransfer>:

static int StepDriverSpiTransfer(void* pIO, char* pRX, const char* pTX, unsigned int length) {
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af02      	add	r7, sp, #8
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	603b      	str	r3, [r7, #0]
    HAL_StatusTypeDef status = 0;
 8003512:	2300      	movs	r3, #0
 8003514:	75fb      	strb	r3, [r7, #23]
    for (unsigned int i = 0; i < length; i++) {
 8003516:	2300      	movs	r3, #0
 8003518:	613b      	str	r3, [r7, #16]
 800351a:	e023      	b.n	8003564 <StepDriverSpiTransfer+0x60>
        HAL_GPIO_WritePin(STEP_SPI_CS_GPIO_Port, STEP_SPI_CS_Pin, 0);
 800351c:	2200      	movs	r2, #0
 800351e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003522:	4818      	ldr	r0, [pc, #96]	@ (8003584 <StepDriverSpiTransfer+0x80>)
 8003524:	f004 f89e 	bl	8007664 <HAL_GPIO_WritePin>
        status |= HAL_SPI_TransmitReceive(pIO, (uint8_t*)pTX + i, (uint8_t*)pRX + i, 1, 10000);
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	18d1      	adds	r1, r2, r3
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	441a      	add	r2, r3
 8003534:	f242 7310 	movw	r3, #10000	@ 0x2710
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	2301      	movs	r3, #1
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f006 f8a9 	bl	8009694 <HAL_SPI_TransmitReceive>
 8003542:	4603      	mov	r3, r0
 8003544:	461a      	mov	r2, r3
 8003546:	7dfb      	ldrb	r3, [r7, #23]
 8003548:	4313      	orrs	r3, r2
 800354a:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(STEP_SPI_CS_GPIO_Port, STEP_SPI_CS_Pin, 1);
 800354c:	2201      	movs	r2, #1
 800354e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003552:	480c      	ldr	r0, [pc, #48]	@ (8003584 <StepDriverSpiTransfer+0x80>)
 8003554:	f004 f886 	bl	8007664 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8003558:	2001      	movs	r0, #1
 800355a:	f003 f9df 	bl	800691c <HAL_Delay>
    for (unsigned int i = 0; i < length; i++) {
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	3301      	adds	r3, #1
 8003562:	613b      	str	r3, [r7, #16]
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	429a      	cmp	r2, r3
 800356a:	d3d7      	bcc.n	800351c <StepDriverSpiTransfer+0x18>
    }
    if (status != HAL_OK) return -1;
 800356c:	7dfb      	ldrb	r3, [r7, #23]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <StepDriverSpiTransfer+0x74>
 8003572:	f04f 33ff 	mov.w	r3, #4294967295
 8003576:	e000      	b.n	800357a <StepDriverSpiTransfer+0x76>
    return 0;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40020c00 	.word	0x40020c00

08003588 <StepDriverReset>:

static void StepDriverReset(void* pGPO, int ena) {
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
    (void)pGPO;
    HAL_GPIO_WritePin(STEP_RSTN_GPIO_Port, STEP_RSTN_Pin, !ena);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	bf0c      	ite	eq
 8003598:	2301      	moveq	r3, #1
 800359a:	2300      	movne	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	461a      	mov	r2, r3
 80035a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80035a4:	4803      	ldr	r0, [pc, #12]	@ (80035b4 <StepDriverReset+0x2c>)
 80035a6:	f004 f85d 	bl	8007664 <HAL_GPIO_WritePin>
    return;
 80035aa:	bf00      	nop
}
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40021400 	.word	0x40021400

080035b8 <StepLibraryDelay>:

static void StepLibraryDelay() 
{ 
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
    return; 
 80035bc:	bf00      	nop
}
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
	...

080035c8 <StepTimerAsync>:

static int StepTimerAsync(void* pPWM, int dir, unsigned int numPulses, void (*doneClb)(L6474_Handle_t), L6474_Handle_t h) {
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	603b      	str	r3, [r7, #0]
    (void)pPWM;
    (void)h;
    StepperContext.is_running = 1;
 80035d6:	4b0d      	ldr	r3, [pc, #52]	@ (800360c <StepTimerAsync+0x44>)
 80035d8:	2201      	movs	r2, #1
 80035da:	60da      	str	r2, [r3, #12]
    StepperContext.done_callback = doneClb;
 80035dc:	4a0b      	ldr	r2, [pc, #44]	@ (800360c <StepTimerAsync+0x44>)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	6153      	str	r3, [r2, #20]
    HAL_GPIO_WritePin(STEP_DIR_GPIO_Port, STEP_DIR_Pin, !!dir);
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	bf14      	ite	ne
 80035e8:	2301      	movne	r3, #1
 80035ea:	2300      	moveq	r3, #0
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	461a      	mov	r2, r3
 80035f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80035f4:	4806      	ldr	r0, [pc, #24]	@ (8003610 <StepTimerAsync+0x48>)
 80035f6:	f004 f835 	bl	8007664 <HAL_GPIO_WritePin>
    start_tim1(numPulses);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fc98 	bl	8003f30 <start_tim1>
    return 0;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	200002b0 	.word	0x200002b0
 8003610:	40021400 	.word	0x40021400

08003614 <StepTimerCancelAsync>:

static int StepTimerCancelAsync(void* pPWM) {
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
    (void)pPWM;
    if (StepperContext.is_running) {
 800361c:	4b0a      	ldr	r3, [pc, #40]	@ (8003648 <StepTimerCancelAsync+0x34>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00b      	beq.n	800363c <StepTimerCancelAsync+0x28>
        HAL_TIM_OnePulse_Stop_IT(StepperContext.htim1, TIM_CHANNEL_1);
 8003624:	4b08      	ldr	r3, [pc, #32]	@ (8003648 <StepTimerCancelAsync+0x34>)
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	2100      	movs	r1, #0
 800362a:	4618      	mov	r0, r3
 800362c:	f007 fbe6 	bl	800adfc <HAL_TIM_OnePulse_Stop_IT>
        StepperContext.done_callback(StepperContext.h);
 8003630:	4b05      	ldr	r3, [pc, #20]	@ (8003648 <StepTimerCancelAsync+0x34>)
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	4a04      	ldr	r2, [pc, #16]	@ (8003648 <StepTimerCancelAsync+0x34>)
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	4610      	mov	r0, r2
 800363a:	4798      	blx	r3
    }
    return 0;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	200002b0 	.word	0x200002b0

0800364c <Reset>:
//---------basic-functions-end-------------

//-----Command-specific-functions---------
static int Reset(StepperContext_t* StepperContext) {
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
    L6474_BaseParameter_t param;
    param.stepMode = smMICRO16;
 8003654:	2304      	movs	r3, #4
 8003656:	733b      	strb	r3, [r7, #12]
    param.OcdTh = ocdth6000mA;
 8003658:	230f      	movs	r3, #15
 800365a:	737b      	strb	r3, [r7, #13]
    param.TimeOnMin = 0x29;
 800365c:	2329      	movs	r3, #41	@ 0x29
 800365e:	73bb      	strb	r3, [r7, #14]
    param.TimeOffMin = 0x29;
 8003660:	2329      	movs	r3, #41	@ 0x29
 8003662:	73fb      	strb	r3, [r7, #15]
    param.TorqueVal = 0x11;
 8003664:	2311      	movs	r3, #17
 8003666:	743b      	strb	r3, [r7, #16]
    param.TFast = 0x19;
 8003668:	2319      	movs	r3, #25
 800366a:	747b      	strb	r3, [r7, #17]

    int result = 0;
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]
    result |= L6474_ResetStandBy(StepperContext->h);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f001 fbe5 	bl	8004e44 <L6474_ResetStandBy>
 800367a:	4602      	mov	r2, r0
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	4313      	orrs	r3, r2
 8003680:	617b      	str	r3, [r7, #20]
    result |= L6474_Initialize(StepperContext->h, &param);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f107 020c 	add.w	r2, r7, #12
 800368a:	4611      	mov	r1, r2
 800368c:	4618      	mov	r0, r3
 800368e:	f001 fc28 	bl	8004ee2 <L6474_Initialize>
 8003692:	4602      	mov	r2, r0
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	4313      	orrs	r3, r2
 8003698:	617b      	str	r3, [r7, #20]
    result |= L6474_SetPowerOutputs(StepperContext->h, 0);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2100      	movs	r1, #0
 80036a0:	4618      	mov	r0, r3
 80036a2:	f001 fda8 	bl	80051f6 <L6474_SetPowerOutputs>
 80036a6:	4602      	mov	r2, r0
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]

    StepperContext->is_powered = 0;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	605a      	str	r2, [r3, #4]
    StepperContext->is_referenced = 0;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	609a      	str	r2, [r3, #8]
    StepperContext->is_running = 0;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	60da      	str	r2, [r3, #12]
    StepperContext->error_code = 0;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	611a      	str	r2, [r3, #16]
    StepperContext->state = scs.REF; // Transition INIT -> REF
 80036c6:	4b05      	ldr	r3, [pc, #20]	@ (80036dc <Reset+0x90>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return result;
 80036d2:	697b      	ldr	r3, [r7, #20]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3718      	adds	r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	20000000 	.word	0x20000000

080036e0 <Reference>:

static int Reference(StepperContext_t* StepperContext, int argc, char** argv) {
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b088      	sub	sp, #32
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
    // Allow reference from REF, DIS, ENA
    if (!(StepperContext->state == scs.REF || StepperContext->state == scs.DIS || StepperContext->state == scs.ENA)) {
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036f2:	461a      	mov	r2, r3
 80036f4:	4b89      	ldr	r3, [pc, #548]	@ (800391c <Reference+0x23c>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d015      	beq.n	8003728 <Reference+0x48>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003702:	461a      	mov	r2, r3
 8003704:	4b85      	ldr	r3, [pc, #532]	@ (800391c <Reference+0x23c>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	429a      	cmp	r2, r3
 800370a:	d00d      	beq.n	8003728 <Reference+0x48>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003712:	461a      	mov	r2, r3
 8003714:	4b81      	ldr	r3, [pc, #516]	@ (800391c <Reference+0x23c>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	429a      	cmp	r2, r3
 800371a:	d005      	beq.n	8003728 <Reference+0x48>
        printf("Reference run not allowed in current state\r\n");
 800371c:	4880      	ldr	r0, [pc, #512]	@ (8003920 <Reference+0x240>)
 800371e:	f010 f941 	bl	80139a4 <puts>
        return -1;
 8003722:	f04f 33ff 	mov.w	r3, #4294967295
 8003726:	e0f5      	b.n	8003914 <Reference+0x234>
    }
    int result = 0;
 8003728:	2300      	movs	r3, #0
 800372a:	617b      	str	r3, [r7, #20]
    int poweroutput = 0;
 800372c:	2300      	movs	r3, #0
 800372e:	61fb      	str	r3, [r7, #28]
    uint32_t timeout_ms = 0;
 8003730:	2300      	movs	r3, #0
 8003732:	61bb      	str	r3, [r7, #24]
    if (argc == 2) {
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2b02      	cmp	r3, #2
 8003738:	d133      	bne.n	80037a2 <Reference+0xc2>
        if (strcmp(argv[1], "-s") == 0) {
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3304      	adds	r3, #4
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4978      	ldr	r1, [pc, #480]	@ (8003924 <Reference+0x244>)
 8003742:	4618      	mov	r0, r3
 8003744:	f7fc fd64 	bl	8000210 <strcmp>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d110      	bne.n	8003770 <Reference+0x90>
            StepperContext->is_referenced = 1;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2201      	movs	r2, #1
 8003752:	609a      	str	r2, [r3, #8]
            L6474_SetAbsolutePosition(StepperContext->h, 0);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2100      	movs	r1, #0
 800375a:	4618      	mov	r0, r3
 800375c:	f001 fdd4 	bl	8005308 <L6474_SetAbsolutePosition>
            StepperContext->state = scs.DIS; // REF -> DIS
 8003760:	4b6e      	ldr	r3, [pc, #440]	@ (800391c <Reference+0x23c>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	b2da      	uxtb	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            return result;
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	e0d1      	b.n	8003914 <Reference+0x234>
        } else if (strcmp(argv[1], "-e") == 0) {
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3304      	adds	r3, #4
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	496c      	ldr	r1, [pc, #432]	@ (8003928 <Reference+0x248>)
 8003778:	4618      	mov	r0, r3
 800377a:	f7fc fd49 	bl	8000210 <strcmp>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d108      	bne.n	8003796 <Reference+0xb6>
            poweroutput = 1;
 8003784:	2301      	movs	r3, #1
 8003786:	61fb      	str	r3, [r7, #28]
            StepperContext->state = scs.ENA; // REF -> ENA
 8003788:	4b64      	ldr	r3, [pc, #400]	@ (800391c <Reference+0x23c>)
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	b2da      	uxtb	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003794:	e025      	b.n	80037e2 <Reference+0x102>
        } else {
            printf("Invalid argument for reference\r\n");
 8003796:	4865      	ldr	r0, [pc, #404]	@ (800392c <Reference+0x24c>)
 8003798:	f010 f904 	bl	80139a4 <puts>
            return -1;
 800379c:	f04f 33ff 	mov.w	r3, #4294967295
 80037a0:	e0b8      	b.n	8003914 <Reference+0x234>
        }
    } else if (argc == 3) {
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2b03      	cmp	r3, #3
 80037a6:	d11c      	bne.n	80037e2 <Reference+0x102>
        if (strcmp(argv[1], "-t") == 0) {
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3304      	adds	r3, #4
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4960      	ldr	r1, [pc, #384]	@ (8003930 <Reference+0x250>)
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fc fd2d 	bl	8000210 <strcmp>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10c      	bne.n	80037d6 <Reference+0xf6>
            timeout_ms = atoi(argv[2]) * 1000;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3308      	adds	r3, #8
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f00d ff6d 	bl	80116a2 <atoi>
 80037c8:	4603      	mov	r3, r0
 80037ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80037ce:	fb02 f303 	mul.w	r3, r2, r3
 80037d2:	61bb      	str	r3, [r7, #24]
 80037d4:	e005      	b.n	80037e2 <Reference+0x102>
        } else {
            printf("Invalid argument for reference\r\n");
 80037d6:	4855      	ldr	r0, [pc, #340]	@ (800392c <Reference+0x24c>)
 80037d8:	f010 f8e4 	bl	80139a4 <puts>
            return -1;
 80037dc:	f04f 33ff 	mov.w	r3, #4294967295
 80037e0:	e098      	b.n	8003914 <Reference+0x234>
        }
    }

    const uint32_t start_time = HAL_GetTick();
 80037e2:	f003 f88f 	bl	8006904 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]
    result |= L6474_SetPowerOutputs(StepperContext->h, 1);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2101      	movs	r1, #1
 80037ee:	4618      	mov	r0, r3
 80037f0:	f001 fd01 	bl	80051f6 <L6474_SetPowerOutputs>
 80037f4:	4602      	mov	r2, r0
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]
    if (HAL_GPIO_ReadPin(REFERENCE_MARK_GPIO_Port, REFERENCE_MARK_Pin) == GPIO_PIN_RESET) {
 80037fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003800:	484c      	ldr	r0, [pc, #304]	@ (8003934 <Reference+0x254>)
 8003802:	f003 ff0f 	bl	8007624 <HAL_GPIO_ReadPin>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d133      	bne.n	8003874 <Reference+0x194>
        set_speed(StepperContext, 500);
 800380c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f000 fa71 	bl	8003cf8 <set_speed>
        L6474_StepIncremental(StepperContext->h, 100000000);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4947      	ldr	r1, [pc, #284]	@ (8003938 <Reference+0x258>)
 800381c:	4618      	mov	r0, r3
 800381e:	f001 fdad 	bl	800537c <L6474_StepIncremental>
        while (HAL_GPIO_ReadPin(REFERENCE_MARK_GPIO_Port, REFERENCE_MARK_Pin) == GPIO_PIN_RESET) {
 8003822:	e01c      	b.n	800385e <Reference+0x17e>
            if (timeout_ms > 0 && HAL_GetTick() - start_time > timeout_ms) {
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d019      	beq.n	800385e <Reference+0x17e>
 800382a:	f003 f86b 	bl	8006904 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	429a      	cmp	r2, r3
 8003838:	d211      	bcs.n	800385e <Reference+0x17e>
                StepTimerCancelAsync(NULL);
 800383a:	2000      	movs	r0, #0
 800383c:	f7ff feea 	bl	8003614 <StepTimerCancelAsync>
                printf("Timeout while waiting for reference switch\r\n");
 8003840:	483e      	ldr	r0, [pc, #248]	@ (800393c <Reference+0x25c>)
 8003842:	f010 f8af 	bl	80139a4 <puts>
                StepperContext->error_code = 1;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2201      	movs	r2, #1
 800384a:	611a      	str	r2, [r3, #16]
                StepperContext->state = scs.FLT;
 800384c:	4b33      	ldr	r3, [pc, #204]	@ (800391c <Reference+0x23c>)
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	b2da      	uxtb	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                return -1;
 8003858:	f04f 33ff 	mov.w	r3, #4294967295
 800385c:	e05a      	b.n	8003914 <Reference+0x234>
        while (HAL_GPIO_ReadPin(REFERENCE_MARK_GPIO_Port, REFERENCE_MARK_Pin) == GPIO_PIN_RESET) {
 800385e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003862:	4834      	ldr	r0, [pc, #208]	@ (8003934 <Reference+0x254>)
 8003864:	f003 fede 	bl	8007624 <HAL_GPIO_ReadPin>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0da      	beq.n	8003824 <Reference+0x144>
            }
        }
        StepTimerCancelAsync(NULL);
 800386e:	2000      	movs	r0, #0
 8003870:	f7ff fed0 	bl	8003614 <StepTimerCancelAsync>
    }
    L6474_StepIncremental(StepperContext->h, -1000000000);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4931      	ldr	r1, [pc, #196]	@ (8003940 <Reference+0x260>)
 800387a:	4618      	mov	r0, r3
 800387c:	f001 fd7e 	bl	800537c <L6474_StepIncremental>
    while (HAL_GPIO_ReadPin(REFERENCE_MARK_GPIO_Port, REFERENCE_MARK_Pin) != GPIO_PIN_RESET) {
 8003880:	e01c      	b.n	80038bc <Reference+0x1dc>
        if (timeout_ms > 0 && HAL_GetTick() - start_time > timeout_ms) {
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d019      	beq.n	80038bc <Reference+0x1dc>
 8003888:	f003 f83c 	bl	8006904 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	429a      	cmp	r2, r3
 8003896:	d211      	bcs.n	80038bc <Reference+0x1dc>
            StepTimerCancelAsync(NULL);
 8003898:	2000      	movs	r0, #0
 800389a:	f7ff febb 	bl	8003614 <StepTimerCancelAsync>
            printf("Timeout while waiting for reference switch\r\n");
 800389e:	4827      	ldr	r0, [pc, #156]	@ (800393c <Reference+0x25c>)
 80038a0:	f010 f880 	bl	80139a4 <puts>
            StepperContext->error_code = 2;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2202      	movs	r2, #2
 80038a8:	611a      	str	r2, [r3, #16]
            StepperContext->state = scs.FLT;
 80038aa:	4b1c      	ldr	r3, [pc, #112]	@ (800391c <Reference+0x23c>)
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            return -1;
 80038b6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ba:	e02b      	b.n	8003914 <Reference+0x234>
    while (HAL_GPIO_ReadPin(REFERENCE_MARK_GPIO_Port, REFERENCE_MARK_Pin) != GPIO_PIN_RESET) {
 80038bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80038c0:	481c      	ldr	r0, [pc, #112]	@ (8003934 <Reference+0x254>)
 80038c2:	f003 feaf 	bl	8007624 <HAL_GPIO_ReadPin>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1da      	bne.n	8003882 <Reference+0x1a2>
        }
    }
    StepTimerCancelAsync(NULL);
 80038cc:	2000      	movs	r0, #0
 80038ce:	f7ff fea1 	bl	8003614 <StepTimerCancelAsync>

    StepperContext->is_referenced = 1;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2201      	movs	r2, #1
 80038d6:	609a      	str	r2, [r3, #8]
    L6474_SetAbsolutePosition(StepperContext->h, 0);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2100      	movs	r1, #0
 80038de:	4618      	mov	r0, r3
 80038e0:	f001 fd12 	bl	8005308 <L6474_SetAbsolutePosition>
    result |= L6474_SetPowerOutputs(StepperContext->h, poweroutput);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	69f9      	ldr	r1, [r7, #28]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f001 fc83 	bl	80051f6 <L6474_SetPowerOutputs>
 80038f0:	4602      	mov	r2, r0
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	617b      	str	r3, [r7, #20]

    // After reference, go to DIS or ENA depending on poweroutput
    StepperContext->state = poweroutput ? scs.ENA : scs.DIS;
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <Reference+0x226>
 80038fe:	4b07      	ldr	r3, [pc, #28]	@ (800391c <Reference+0x23c>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	b2db      	uxtb	r3, r3
 8003904:	e002      	b.n	800390c <Reference+0x22c>
 8003906:	4b05      	ldr	r3, [pc, #20]	@ (800391c <Reference+0x23c>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	b2db      	uxtb	r3, r3
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
    return result;
 8003912:	697b      	ldr	r3, [r7, #20]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3720      	adds	r7, #32
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	20000000 	.word	0x20000000
 8003920:	0801745c 	.word	0x0801745c
 8003924:	08017488 	.word	0x08017488
 8003928:	0801748c 	.word	0x0801748c
 800392c:	08017490 	.word	0x08017490
 8003930:	080174b0 	.word	0x080174b0
 8003934:	40020400 	.word	0x40020400
 8003938:	05f5e100 	.word	0x05f5e100
 800393c:	080174b4 	.word	0x080174b4
 8003940:	c4653600 	.word	0xc4653600

08003944 <Position>:

static int Position( StepperContext_t* StepperContext, int argc, char** argv) {
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
            int position;
        L6474_GetAbsolutePosition(StepperContext->h, &position);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f107 0214 	add.w	r2, r7, #20
 8003958:	4611      	mov	r1, r2
 800395a:	4618      	mov	r0, r3
 800395c:	f001 fc8b 	bl	8005276 <L6474_GetAbsolutePosition>
        printf("Current position: %d\n\r", (position * MM_PER_TURN) / (STEPS_PER_TURN * RESOLUTION));
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	4a07      	ldr	r2, [pc, #28]	@ (8003980 <Position+0x3c>)
 8003964:	fb82 1203 	smull	r1, r2, r2, r3
 8003968:	1212      	asrs	r2, r2, #8
 800396a:	17db      	asrs	r3, r3, #31
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	4619      	mov	r1, r3
 8003970:	4804      	ldr	r0, [pc, #16]	@ (8003984 <Position+0x40>)
 8003972:	f00f ffa7 	bl	80138c4 <iprintf>
        return 0;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	51eb851f 	.word	0x51eb851f
 8003984:	080174e0 	.word	0x080174e0

08003988 <Status>:

static int Status(StepperContext_t* StepperContext, int argc, char** argv) {
 8003988:	b5b0      	push	{r4, r5, r7, lr}
 800398a:	b08c      	sub	sp, #48	@ 0x30
 800398c:	af02      	add	r7, sp, #8
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]

    const char* state_str[] = {"INIT", "REF", "DIS", "ENA", "FLT"};
 8003994:	4b11      	ldr	r3, [pc, #68]	@ (80039dc <Status+0x54>)
 8003996:	f107 0414 	add.w	r4, r7, #20
 800399a:	461d      	mov	r5, r3
 800399c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800399e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039a0:	682b      	ldr	r3, [r5, #0]
 80039a2:	6023      	str	r3, [r4, #0]
        printf("State: %s, Power: %d, Referenced: %d, Running: %d, Error: %d\r\n",
            state_str[StepperContext->state],
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
        printf("State: %s, Power: %d, Referenced: %d, Running: %d, Error: %d\r\n",
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	3328      	adds	r3, #40	@ 0x28
 80039ae:	443b      	add	r3, r7
 80039b0:	f853 1c14 	ldr.w	r1, [r3, #-20]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6858      	ldr	r0, [r3, #4]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	689c      	ldr	r4, [r3, #8]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	6912      	ldr	r2, [r2, #16]
 80039c4:	9201      	str	r2, [sp, #4]
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	4623      	mov	r3, r4
 80039ca:	4602      	mov	r2, r0
 80039cc:	4804      	ldr	r0, [pc, #16]	@ (80039e0 <Status+0x58>)
 80039ce:	f00f ff79 	bl	80138c4 <iprintf>
            StepperContext->is_powered,
            StepperContext->is_referenced,
            StepperContext->is_running,
            StepperContext->error_code);
    return 0;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3728      	adds	r7, #40	@ 0x28
 80039d8:	46bd      	mov	sp, r7
 80039da:	bdb0      	pop	{r4, r5, r7, pc}
 80039dc:	08017550 	.word	0x08017550
 80039e0:	080174f8 	.word	0x080174f8

080039e4 <Move>:

static int Move(StepperContext_t* StepperContext, int argc, char** argv) {
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08e      	sub	sp, #56	@ 0x38
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
    if (StepperContext->state != scs.ENA) {
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80039f6:	461a      	mov	r2, r3
 80039f8:	4b6c      	ldr	r3, [pc, #432]	@ (8003bac <Move+0x1c8>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d009      	beq.n	8003a14 <Move+0x30>
        printf("Stepper not enabled (state=%d)\r\n", StepperContext->state);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a06:	4619      	mov	r1, r3
 8003a08:	4869      	ldr	r0, [pc, #420]	@ (8003bb0 <Move+0x1cc>)
 8003a0a:	f00f ff5b 	bl	80138c4 <iprintf>
        return -1;
 8003a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a12:	e0c7      	b.n	8003ba4 <Move+0x1c0>
    }
    if (StepperContext->is_powered != 1) {
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d005      	beq.n	8003a28 <Move+0x44>
        printf("Stepper not powered\r\n");
 8003a1c:	4865      	ldr	r0, [pc, #404]	@ (8003bb4 <Move+0x1d0>)
 8003a1e:	f00f ffc1 	bl	80139a4 <puts>
        return -1;
 8003a22:	f04f 33ff 	mov.w	r3, #4294967295
 8003a26:	e0bd      	b.n	8003ba4 <Move+0x1c0>
    }
    if (StepperContext->is_referenced != 1) {
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d005      	beq.n	8003a3c <Move+0x58>
        printf("Stepper not referenced\r\n");
 8003a30:	4861      	ldr	r0, [pc, #388]	@ (8003bb8 <Move+0x1d4>)
 8003a32:	f00f ffb7 	bl	80139a4 <puts>
        return -1;
 8003a36:	f04f 33ff 	mov.w	r3, #4294967295
 8003a3a:	e0b3      	b.n	8003ba4 <Move+0x1c0>
    }
    if (argc < 2) {
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	dc05      	bgt.n	8003a4e <Move+0x6a>
        printf("Invalid number of arguments\r\n");
 8003a42:	485e      	ldr	r0, [pc, #376]	@ (8003bbc <Move+0x1d8>)
 8003a44:	f00f ffae 	bl	80139a4 <puts>
        return -1;
 8003a48:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4c:	e0aa      	b.n	8003ba4 <Move+0x1c0>
    }

    int position = atoi(argv[1]);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3304      	adds	r3, #4
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f00d fe24 	bl	80116a2 <atoi>
 8003a5a:	6238      	str	r0, [r7, #32]
    int speed = 1000;
 8003a5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a60:	637b      	str	r3, [r7, #52]	@ 0x34
    int is_async = 0;
 8003a62:	2300      	movs	r3, #0
 8003a64:	633b      	str	r3, [r7, #48]	@ 0x30
    int is_relative = 0;
 8003a66:	2300      	movs	r3, #0
 8003a68:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (int i = 2; i < argc;) {
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a6e:	e04e      	b.n	8003b0e <Move+0x12a>
        if (strcmp(argv[i], "-a") == 0) {
 8003a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	4413      	add	r3, r2
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4951      	ldr	r1, [pc, #324]	@ (8003bc0 <Move+0x1dc>)
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7fc fbc7 	bl	8000210 <strcmp>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d105      	bne.n	8003a94 <Move+0xb0>
            is_async = 1;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	633b      	str	r3, [r7, #48]	@ 0x30
            i++;
 8003a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a8e:	3301      	adds	r3, #1
 8003a90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a92:	e03c      	b.n	8003b0e <Move+0x12a>
        } else if (strcmp(argv[i], "-r") == 0) {
 8003a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4949      	ldr	r1, [pc, #292]	@ (8003bc4 <Move+0x1e0>)
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fc fbb5 	bl	8000210 <strcmp>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d105      	bne.n	8003ab8 <Move+0xd4>
            is_relative = 1;
 8003aac:	2301      	movs	r3, #1
 8003aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
            i++;
 8003ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ab6:	e02a      	b.n	8003b0e <Move+0x12a>
        } else if (strcmp(argv[i], "-s") == 0) {
 8003ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	4413      	add	r3, r2
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4941      	ldr	r1, [pc, #260]	@ (8003bc8 <Move+0x1e4>)
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7fc fba3 	bl	8000210 <strcmp>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d118      	bne.n	8003b02 <Move+0x11e>
            if (i == argc - 1) {
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d105      	bne.n	8003ae6 <Move+0x102>
                printf("Invalid number of arguments\r\n");
 8003ada:	4838      	ldr	r0, [pc, #224]	@ (8003bbc <Move+0x1d8>)
 8003adc:	f00f ff62 	bl	80139a4 <puts>
                return -1;
 8003ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae4:	e05e      	b.n	8003ba4 <Move+0x1c0>
            }
            speed = atoi(argv[i + 1]);
 8003ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae8:	3301      	adds	r3, #1
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	4413      	add	r3, r2
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f00d fdd5 	bl	80116a2 <atoi>
 8003af8:	6378      	str	r0, [r7, #52]	@ 0x34
            i += 2;
 8003afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003afc:	3302      	adds	r3, #2
 8003afe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b00:	e005      	b.n	8003b0e <Move+0x12a>
        } else {
            printf("Invalid Flag\r\n");
 8003b02:	4832      	ldr	r0, [pc, #200]	@ (8003bcc <Move+0x1e8>)
 8003b04:	f00f ff4e 	bl	80139a4 <puts>
            return -1;
 8003b08:	f04f 33ff 	mov.w	r3, #4294967295
 8003b0c:	e04a      	b.n	8003ba4 <Move+0x1c0>
    for (int i = 2; i < argc;) {
 8003b0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	dbac      	blt.n	8003a70 <Move+0x8c>
        }
    }

    int steps_per_second = (speed * STEPS_PER_TURN * RESOLUTION) / (60 * MM_PER_TURN);
 8003b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b18:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8003b1c:	fb02 f303 	mul.w	r3, r2, r3
 8003b20:	4a2b      	ldr	r2, [pc, #172]	@ (8003bd0 <Move+0x1ec>)
 8003b22:	fb82 1203 	smull	r1, r2, r2, r3
 8003b26:	441a      	add	r2, r3
 8003b28:	11d2      	asrs	r2, r2, #7
 8003b2a:	17db      	asrs	r3, r3, #31
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	61fb      	str	r3, [r7, #28]
    if (steps_per_second < 1) {
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	dc05      	bgt.n	8003b42 <Move+0x15e>
        printf("Speed too small\r\n");
 8003b36:	4827      	ldr	r0, [pc, #156]	@ (8003bd4 <Move+0x1f0>)
 8003b38:	f00f ff34 	bl	80139a4 <puts>
        return -1;
 8003b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b40:	e030      	b.n	8003ba4 <Move+0x1c0>
    }
    set_speed(StepperContext, steps_per_second);
 8003b42:	69f9      	ldr	r1, [r7, #28]
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 f8d7 	bl	8003cf8 <set_speed>

    int steps = (position * STEPS_PER_TURN * RESOLUTION) / MM_PER_TURN;
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003b50:	fb02 f303 	mul.w	r3, r2, r3
 8003b54:	627b      	str	r3, [r7, #36]	@ 0x24
    if (!is_relative) {
 8003b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10b      	bne.n	8003b74 <Move+0x190>
        int absolute_position;
        L6474_GetAbsolutePosition(StepperContext->h, &absolute_position);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f107 0214 	add.w	r2, r7, #20
 8003b64:	4611      	mov	r1, r2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f001 fb85 	bl	8005276 <L6474_GetAbsolutePosition>
        steps -= absolute_position;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (is_async) {
 8003b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d007      	beq.n	8003b8a <Move+0x1a6>
        return L6474_StepIncremental(StepperContext->h, steps);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b80:	4618      	mov	r0, r3
 8003b82:	f001 fbfb 	bl	800537c <L6474_StepIncremental>
 8003b86:	4603      	mov	r3, r0
 8003b88:	e00c      	b.n	8003ba4 <Move+0x1c0>
    } else {
        int result = L6474_StepIncremental(StepperContext->h, steps);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b90:	4618      	mov	r0, r3
 8003b92:	f001 fbf3 	bl	800537c <L6474_StepIncremental>
 8003b96:	61b8      	str	r0, [r7, #24]
        while (StepperContext->is_running);
 8003b98:	bf00      	nop
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1fb      	bne.n	8003b9a <Move+0x1b6>
        return result;
 8003ba2:	69bb      	ldr	r3, [r7, #24]
    }
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3738      	adds	r7, #56	@ 0x38
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	20000000 	.word	0x20000000
 8003bb0:	08017564 	.word	0x08017564
 8003bb4:	08017588 	.word	0x08017588
 8003bb8:	080175a0 	.word	0x080175a0
 8003bbc:	080175b8 	.word	0x080175b8
 8003bc0:	080175d8 	.word	0x080175d8
 8003bc4:	080175dc 	.word	0x080175dc
 8003bc8:	08017488 	.word	0x08017488
 8003bcc:	080175e0 	.word	0x080175e0
 8003bd0:	88888889 	.word	0x88888889
 8003bd4:	080175f0 	.word	0x080175f0

08003bd8 <Config>:

static int Config(StepperContext_t* StepperContext, int argc, char** argv) {
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
    if (argc < 2) {
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	dc05      	bgt.n	8003bf6 <Config+0x1e>
        printf("Invalid number of arguments\r\n");
 8003bea:	4810      	ldr	r0, [pc, #64]	@ (8003c2c <Config+0x54>)
 8003bec:	f00f feda 	bl	80139a4 <puts>
        return -1;
 8003bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf4:	e015      	b.n	8003c22 <Config+0x4a>
    }
    if (strcmp(argv[1], "powerena") == 0) {
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	490c      	ldr	r1, [pc, #48]	@ (8003c30 <Config+0x58>)
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fc fb06 	bl	8000210 <strcmp>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <Config+0x40>
        return powerena(StepperContext, argc, argv);
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	68b9      	ldr	r1, [r7, #8]
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 f812 	bl	8003c38 <powerena>
 8003c14:	4603      	mov	r3, r0
 8003c16:	e004      	b.n	8003c22 <Config+0x4a>
    } else {
        printf("Invalid command\r\n");
 8003c18:	4806      	ldr	r0, [pc, #24]	@ (8003c34 <Config+0x5c>)
 8003c1a:	f00f fec3 	bl	80139a4 <puts>
        return -1;
 8003c1e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	080175b8 	.word	0x080175b8
 8003c30:	08017604 	.word	0x08017604
 8003c34:	08017610 	.word	0x08017610

08003c38 <powerena>:

//-----Command-specific-functions-end-----

//-----helper-functions---------
int powerena(StepperContext_t* StepperContext, int argc, char** argv) {
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
    if (argc == 2) {
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d107      	bne.n	8003c5a <powerena+0x22>
        printf("Current Powerstate: %d\r\n", StepperContext->is_powered);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4824      	ldr	r0, [pc, #144]	@ (8003ce4 <powerena+0xac>)
 8003c52:	f00f fe37 	bl	80138c4 <iprintf>
        return 0;
 8003c56:	2300      	movs	r3, #0
 8003c58:	e03f      	b.n	8003cda <powerena+0xa2>
    } else if (argc == 4 && strcmp(argv[2], "-v") == 0) {
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d137      	bne.n	8003cd0 <powerena+0x98>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3308      	adds	r3, #8
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4920      	ldr	r1, [pc, #128]	@ (8003ce8 <powerena+0xb0>)
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fc fad1 	bl	8000210 <strcmp>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d12d      	bne.n	8003cd0 <powerena+0x98>
        int ena = atoi(argv[3]);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	330c      	adds	r3, #12
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f00d fd11 	bl	80116a2 <atoi>
 8003c80:	6178      	str	r0, [r7, #20]
        if (ena != 0 && ena != 1) {
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <powerena+0x62>
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d005      	beq.n	8003c9a <powerena+0x62>
            printf("Invalid argument for powerena\r\n");
 8003c8e:	4817      	ldr	r0, [pc, #92]	@ (8003cec <powerena+0xb4>)
 8003c90:	f00f fe88 	bl	80139a4 <puts>
            return -1;
 8003c94:	f04f 33ff 	mov.w	r3, #4294967295
 8003c98:	e01f      	b.n	8003cda <powerena+0xa2>
        }
        StepperContext->is_powered = ena;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	605a      	str	r2, [r3, #4]
        if (ena) {
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d006      	beq.n	8003cb4 <powerena+0x7c>
            StepperContext->state = scs.ENA; // DIS -> ENA
 8003ca6:	4b12      	ldr	r3, [pc, #72]	@ (8003cf0 <powerena+0xb8>)
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003cb2:	e005      	b.n	8003cc0 <powerena+0x88>
        } else {
            StepperContext->state = scs.DIS; // ENA -> DIS
 8003cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8003cf0 <powerena+0xb8>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }
        return L6474_SetPowerOutputs(StepperContext->h, ena);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6979      	ldr	r1, [r7, #20]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f001 fa95 	bl	80051f6 <L6474_SetPowerOutputs>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	e004      	b.n	8003cda <powerena+0xa2>
    } else {
        printf("Invalid number of arguments\r\n");
 8003cd0:	4808      	ldr	r0, [pc, #32]	@ (8003cf4 <powerena+0xbc>)
 8003cd2:	f00f fe67 	bl	80139a4 <puts>
        return -1;
 8003cd6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	08017624 	.word	0x08017624
 8003ce8:	08017640 	.word	0x08017640
 8003cec:	08017644 	.word	0x08017644
 8003cf0:	20000000 	.word	0x20000000
 8003cf4:	080175b8 	.word	0x080175b8

08003cf8 <set_speed>:

void set_speed(StepperContext_t* StepperContext, int steps_per_second) {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
    int clk = HAL_RCC_GetHCLKFreq();
 8003d02:	f004 faa3 	bl	800824c <HAL_RCC_GetHCLKFreq>
 8003d06:	4603      	mov	r3, r0
 8003d08:	613b      	str	r3, [r7, #16]
    int quotient = clk / (steps_per_second * 2);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	fb92 f3f3 	sdiv	r3, r2, r3
 8003d14:	60fb      	str	r3, [r7, #12]
    int i = 0;
 8003d16:	2300      	movs	r3, #0
 8003d18:	617b      	str	r3, [r7, #20]
    while ((quotient / (i + 1)) > 65535) i++;
 8003d1a:	e002      	b.n	8003d22 <set_speed+0x2a>
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	617b      	str	r3, [r7, #20]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	3301      	adds	r3, #1
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	fb92 f3f3 	sdiv	r3, r2, r3
 8003d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d30:	daf4      	bge.n	8003d1c <set_speed+0x24>
    __HAL_TIM_SET_PRESCALER(StepperContext->htim4, i);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_TIM_SET_AUTORELOAD(StepperContext->htim4, (quotient / (i + 1)) - 1);
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	fb92 f3f3 	sdiv	r3, r2, r3
 8003d46:	1e5a      	subs	r2, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	3301      	adds	r3, #1
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	fb92 f3f3 	sdiv	r3, r2, r3
 8003d5a:	1e5a      	subs	r2, r3, #1
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	60da      	str	r2, [r3, #12]
    StepperContext->htim4->Instance->CCR4 = StepperContext->htim4->Instance->ARR / 2;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	0852      	lsrs	r2, r2, #1
 8003d72:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003d74:	bf00      	nop
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <Initialize>:

static int Initialize(StepperContext_t* StepperContext) {
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
    Reset(StepperContext);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff fc61 	bl	800364c <Reset>
    StepperContext->is_powered = 1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	605a      	str	r2, [r3, #4]
    StepperContext->is_referenced = 1;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	609a      	str	r2, [r3, #8]
    StepperContext->state = scs.INIT;
 8003d96:	4b08      	ldr	r3, [pc, #32]	@ (8003db8 <Initialize+0x3c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    return L6474_SetPowerOutputs(StepperContext->h, 1);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2101      	movs	r1, #1
 8003da8:	4618      	mov	r0, r3
 8003daa:	f001 fa24 	bl	80051f6 <L6474_SetPowerOutputs>
 8003dae:	4603      	mov	r3, r0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	20000000 	.word	0x20000000

08003dbc <StepperHandler>:

static int StepperHandler(int argc, char** argv, void* ctx) {
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
    StepperContext_t* StepperContext = (StepperContext_t*)ctx;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	613b      	str	r3, [r7, #16]
    int result = 0;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	617b      	str	r3, [r7, #20]

    if (argc == 0) {
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d105      	bne.n	8003de2 <StepperHandler+0x26>
        printf("Invalid number of arguments\r\n");
 8003dd6:	484a      	ldr	r0, [pc, #296]	@ (8003f00 <StepperHandler+0x144>)
 8003dd8:	f00f fde4 	bl	80139a4 <puts>
        return -1;
 8003ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8003de0:	e08a      	b.n	8003ef8 <StepperHandler+0x13c>
    }
    if (strcmp(argv[0], "move") == 0) {
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4947      	ldr	r1, [pc, #284]	@ (8003f04 <StepperHandler+0x148>)
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fc fa11 	bl	8000210 <strcmp>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d106      	bne.n	8003e02 <StepperHandler+0x46>
        result = Move(StepperContext, argc, argv);
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	68f9      	ldr	r1, [r7, #12]
 8003df8:	6938      	ldr	r0, [r7, #16]
 8003dfa:	f7ff fdf3 	bl	80039e4 <Move>
 8003dfe:	6178      	str	r0, [r7, #20]
 8003e00:	e06f      	b.n	8003ee2 <StepperHandler+0x126>
    } else if (strcmp(argv[0], "reset") == 0) {
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4940      	ldr	r1, [pc, #256]	@ (8003f08 <StepperHandler+0x14c>)
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7fc fa01 	bl	8000210 <strcmp>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d104      	bne.n	8003e1e <StepperHandler+0x62>
        result = Reset(StepperContext);
 8003e14:	6938      	ldr	r0, [r7, #16]
 8003e16:	f7ff fc19 	bl	800364c <Reset>
 8003e1a:	6178      	str	r0, [r7, #20]
 8003e1c:	e061      	b.n	8003ee2 <StepperHandler+0x126>
    } else if (strcmp(argv[0], "config") == 0) {
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	493a      	ldr	r1, [pc, #232]	@ (8003f0c <StepperHandler+0x150>)
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fc f9f3 	bl	8000210 <strcmp>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d106      	bne.n	8003e3e <StepperHandler+0x82>
        result = Config(StepperContext, argc, argv);
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	68f9      	ldr	r1, [r7, #12]
 8003e34:	6938      	ldr	r0, [r7, #16]
 8003e36:	f7ff fecf 	bl	8003bd8 <Config>
 8003e3a:	6178      	str	r0, [r7, #20]
 8003e3c:	e051      	b.n	8003ee2 <StepperHandler+0x126>
    } else if (strcmp(argv[0], "reference") == 0) {
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4933      	ldr	r1, [pc, #204]	@ (8003f10 <StepperHandler+0x154>)
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7fc f9e3 	bl	8000210 <strcmp>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d106      	bne.n	8003e5e <StepperHandler+0xa2>
        result = Reference(StepperContext, argc, argv);
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	68f9      	ldr	r1, [r7, #12]
 8003e54:	6938      	ldr	r0, [r7, #16]
 8003e56:	f7ff fc43 	bl	80036e0 <Reference>
 8003e5a:	6178      	str	r0, [r7, #20]
 8003e5c:	e041      	b.n	8003ee2 <StepperHandler+0x126>
    } else if (strcmp(argv[0], "cancel") == 0) {
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	492c      	ldr	r1, [pc, #176]	@ (8003f14 <StepperHandler+0x158>)
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fc f9d3 	bl	8000210 <strcmp>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d104      	bne.n	8003e7a <StepperHandler+0xbe>
        result = StepTimerCancelAsync(NULL);
 8003e70:	2000      	movs	r0, #0
 8003e72:	f7ff fbcf 	bl	8003614 <StepTimerCancelAsync>
 8003e76:	6178      	str	r0, [r7, #20]
 8003e78:	e033      	b.n	8003ee2 <StepperHandler+0x126>
    } else if (strcmp(argv[0], "init") == 0) {
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4926      	ldr	r1, [pc, #152]	@ (8003f18 <StepperHandler+0x15c>)
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fc f9c5 	bl	8000210 <strcmp>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d104      	bne.n	8003e96 <StepperHandler+0xda>
        result = Initialize(StepperContext);
 8003e8c:	6938      	ldr	r0, [r7, #16]
 8003e8e:	f7ff ff75 	bl	8003d7c <Initialize>
 8003e92:	6178      	str	r0, [r7, #20]
 8003e94:	e025      	b.n	8003ee2 <StepperHandler+0x126>
    } else if (strcmp(argv[0], "position") == 0) {
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4920      	ldr	r1, [pc, #128]	@ (8003f1c <StepperHandler+0x160>)
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7fc f9b7 	bl	8000210 <strcmp>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d106      	bne.n	8003eb6 <StepperHandler+0xfa>
        result = Position(StepperContext, argc, argv);
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	68f9      	ldr	r1, [r7, #12]
 8003eac:	6938      	ldr	r0, [r7, #16]
 8003eae:	f7ff fd49 	bl	8003944 <Position>
 8003eb2:	6178      	str	r0, [r7, #20]
 8003eb4:	e015      	b.n	8003ee2 <StepperHandler+0x126>
    } else if (strcmp(argv[0], "status") == 0) {
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4919      	ldr	r1, [pc, #100]	@ (8003f20 <StepperHandler+0x164>)
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fc f9a7 	bl	8000210 <strcmp>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d106      	bne.n	8003ed6 <StepperHandler+0x11a>
        result = Status(StepperContext, argc, argv);
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	68f9      	ldr	r1, [r7, #12]
 8003ecc:	6938      	ldr	r0, [r7, #16]
 8003ece:	f7ff fd5b 	bl	8003988 <Status>
 8003ed2:	6178      	str	r0, [r7, #20]
 8003ed4:	e005      	b.n	8003ee2 <StepperHandler+0x126>
    } else {
        printf("Invalid command\r\n");
 8003ed6:	4813      	ldr	r0, [pc, #76]	@ (8003f24 <StepperHandler+0x168>)
 8003ed8:	f00f fd64 	bl	80139a4 <puts>
        return -1;
 8003edc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee0:	e00a      	b.n	8003ef8 <StepperHandler+0x13c>
    }
    if (result == 0) {
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d103      	bne.n	8003ef0 <StepperHandler+0x134>
        printf("OK\r\n");
 8003ee8:	480f      	ldr	r0, [pc, #60]	@ (8003f28 <StepperHandler+0x16c>)
 8003eea:	f00f fd5b 	bl	80139a4 <puts>
 8003eee:	e002      	b.n	8003ef6 <StepperHandler+0x13a>
    } else {
        printf("FAIL\r\n");
 8003ef0:	480e      	ldr	r0, [pc, #56]	@ (8003f2c <StepperHandler+0x170>)
 8003ef2:	f00f fd57 	bl	80139a4 <puts>
    }
    return result;
 8003ef6:	697b      	ldr	r3, [r7, #20]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3718      	adds	r7, #24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	080175b8 	.word	0x080175b8
 8003f04:	08017664 	.word	0x08017664
 8003f08:	0801766c 	.word	0x0801766c
 8003f0c:	08017674 	.word	0x08017674
 8003f10:	0801767c 	.word	0x0801767c
 8003f14:	08017688 	.word	0x08017688
 8003f18:	08017690 	.word	0x08017690
 8003f1c:	08017698 	.word	0x08017698
 8003f20:	080176a4 	.word	0x080176a4
 8003f24:	08017610 	.word	0x08017610
 8003f28:	080176ac 	.word	0x080176ac
 8003f2c:	080176b0 	.word	0x080176b0

08003f30 <start_tim1>:

void start_tim1(unsigned int pulses) {
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
    int current_pulses = (pulses >= 65535) ? 65535 : pulses;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	bf28      	it	cs
 8003f42:	4613      	movcs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]
    StepperContext.remaining_pulses = pulses - current_pulses;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8003fb8 <start_tim1+0x88>)
 8003f50:	619a      	str	r2, [r3, #24]
    if (current_pulses != 1) {
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d025      	beq.n	8003fa4 <start_tim1+0x74>
        HAL_TIM_OnePulse_Stop_IT(StepperContext.htim1, TIM_CHANNEL_1);
 8003f58:	4b17      	ldr	r3, [pc, #92]	@ (8003fb8 <start_tim1+0x88>)
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f006 ff4c 	bl	800adfc <HAL_TIM_OnePulse_Stop_IT>
        __HAL_TIM_SET_AUTORELOAD(StepperContext.htim1, current_pulses);
 8003f64:	4b14      	ldr	r3, [pc, #80]	@ (8003fb8 <start_tim1+0x88>)
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003f6e:	4b12      	ldr	r3, [pc, #72]	@ (8003fb8 <start_tim1+0x88>)
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	60da      	str	r2, [r3, #12]
        HAL_TIM_GenerateEvent(StepperContext.htim1, TIM_EVENTSOURCE_UPDATE);
 8003f76:	4b10      	ldr	r3, [pc, #64]	@ (8003fb8 <start_tim1+0x88>)
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f007 fce9 	bl	800b954 <HAL_TIM_GenerateEvent>
        HAL_TIM_OnePulse_Start_IT(StepperContext.htim1, TIM_CHANNEL_1);
 8003f82:	4b0d      	ldr	r3, [pc, #52]	@ (8003fb8 <start_tim1+0x88>)
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	2100      	movs	r1, #0
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f006 fec5 	bl	800ad18 <HAL_TIM_OnePulse_Start_IT>
        __HAL_TIM_ENABLE(StepperContext.htim1);
 8003f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb8 <start_tim1+0x88>)
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	4b08      	ldr	r3, [pc, #32]	@ (8003fb8 <start_tim1+0x88>)
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f042 0201 	orr.w	r2, r2, #1
 8003fa0:	601a      	str	r2, [r3, #0]
    } else {
        StepperContext.done_callback(StepperContext.h);
    }
}
 8003fa2:	e005      	b.n	8003fb0 <start_tim1+0x80>
        StepperContext.done_callback(StepperContext.h);
 8003fa4:	4b04      	ldr	r3, [pc, #16]	@ (8003fb8 <start_tim1+0x88>)
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	4a03      	ldr	r2, [pc, #12]	@ (8003fb8 <start_tim1+0x88>)
 8003faa:	6812      	ldr	r2, [r2, #0]
 8003fac:	4610      	mov	r0, r2
 8003fae:	4798      	blx	r3
}
 8003fb0:	bf00      	nop
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	200002b0 	.word	0x200002b0

08003fbc <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef* htim) {
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
    if ((StepperContext.done_callback != 0) && ((htim->Instance->SR & (1 << 2)) == 0)) {
 8003fc4:	4b10      	ldr	r3, [pc, #64]	@ (8004008 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d019      	beq.n	8004000 <HAL_TIM_PWM_PulseFinishedCallback+0x44>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	f003 0304 	and.w	r3, r3, #4
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d112      	bne.n	8004000 <HAL_TIM_PWM_PulseFinishedCallback+0x44>
        if (StepperContext.remaining_pulses > 0) {
 8003fda:	4b0b      	ldr	r3, [pc, #44]	@ (8004008 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	dd05      	ble.n	8003fee <HAL_TIM_PWM_PulseFinishedCallback+0x32>
            start_tim1(StepperContext.remaining_pulses);
 8003fe2:	4b09      	ldr	r3, [pc, #36]	@ (8004008 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff ffa2 	bl	8003f30 <start_tim1>
        } else {
            StepperContext.done_callback(StepperContext.h);
            StepperContext.is_running = 0;
        }
    }
}
 8003fec:	e008      	b.n	8004000 <HAL_TIM_PWM_PulseFinishedCallback+0x44>
            StepperContext.done_callback(StepperContext.h);
 8003fee:	4b06      	ldr	r3, [pc, #24]	@ (8004008 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	4a05      	ldr	r2, [pc, #20]	@ (8004008 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8003ff4:	6812      	ldr	r2, [r2, #0]
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	4798      	blx	r3
            StepperContext.is_running = 0;
 8003ffa:	4b03      	ldr	r3, [pc, #12]	@ (8004008 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	60da      	str	r2, [r3, #12]
}
 8004000:	bf00      	nop
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	200002b0 	.word	0x200002b0

0800400c <InitStepper>:

void InitStepper(ConsoleHandle_t hconsole, SPI_HandleTypeDef* hspi1, 
    TIM_HandleTypeDef* htim1, TIM_HandleTypeDef* htim4) {
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af02      	add	r7, sp, #8
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
 8004018:	603b      	str	r3, [r7, #0]

    HAL_GPIO_WritePin(STEP_SPI_CS_GPIO_Port, STEP_SPI_CS_Pin, 1);
 800401a:	2201      	movs	r2, #1
 800401c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004020:	481f      	ldr	r0, [pc, #124]	@ (80040a0 <InitStepper+0x94>)
 8004022:	f003 fb1f 	bl	8007664 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(htim4, TIM_CHANNEL_4);
 8004026:	210c      	movs	r1, #12
 8004028:	6838      	ldr	r0, [r7, #0]
 800402a:	f006 fb7d 	bl	800a728 <HAL_TIM_PWM_Start>

    p.malloc     = StepLibraryMalloc;
 800402e:	4b1d      	ldr	r3, [pc, #116]	@ (80040a4 <InitStepper+0x98>)
 8004030:	4a1d      	ldr	r2, [pc, #116]	@ (80040a8 <InitStepper+0x9c>)
 8004032:	601a      	str	r2, [r3, #0]
    p.free       = StepLibraryFree;
 8004034:	4b1b      	ldr	r3, [pc, #108]	@ (80040a4 <InitStepper+0x98>)
 8004036:	4a1d      	ldr	r2, [pc, #116]	@ (80040ac <InitStepper+0xa0>)
 8004038:	605a      	str	r2, [r3, #4]
    p.transfer   = StepDriverSpiTransfer;
 800403a:	4b1a      	ldr	r3, [pc, #104]	@ (80040a4 <InitStepper+0x98>)
 800403c:	4a1c      	ldr	r2, [pc, #112]	@ (80040b0 <InitStepper+0xa4>)
 800403e:	609a      	str	r2, [r3, #8]
    p.reset      = StepDriverReset;
 8004040:	4b18      	ldr	r3, [pc, #96]	@ (80040a4 <InitStepper+0x98>)
 8004042:	4a1c      	ldr	r2, [pc, #112]	@ (80040b4 <InitStepper+0xa8>)
 8004044:	60da      	str	r2, [r3, #12]
    p.sleep      = StepLibraryDelay;
 8004046:	4b17      	ldr	r3, [pc, #92]	@ (80040a4 <InitStepper+0x98>)
 8004048:	4a1b      	ldr	r2, [pc, #108]	@ (80040b8 <InitStepper+0xac>)
 800404a:	611a      	str	r2, [r3, #16]
    p.stepAsync  = StepTimerAsync;
 800404c:	4b15      	ldr	r3, [pc, #84]	@ (80040a4 <InitStepper+0x98>)
 800404e:	4a1b      	ldr	r2, [pc, #108]	@ (80040bc <InitStepper+0xb0>)
 8004050:	615a      	str	r2, [r3, #20]
    p.cancelStep = StepTimerCancelAsync;
 8004052:	4b14      	ldr	r3, [pc, #80]	@ (80040a4 <InitStepper+0x98>)
 8004054:	4a1a      	ldr	r2, [pc, #104]	@ (80040c0 <InitStepper+0xb4>)
 8004056:	619a      	str	r2, [r3, #24]

    StepperContext.h = L6474_CreateInstance(&p, hspi1, NULL, htim1);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	68b9      	ldr	r1, [r7, #8]
 800405e:	4811      	ldr	r0, [pc, #68]	@ (80040a4 <InitStepper+0x98>)
 8004060:	f000 fe83 	bl	8004d6a <L6474_CreateInstance>
 8004064:	4603      	mov	r3, r0
 8004066:	4a17      	ldr	r2, [pc, #92]	@ (80040c4 <InitStepper+0xb8>)
 8004068:	6013      	str	r3, [r2, #0]
    StepperContext.htim1 = htim1;
 800406a:	4a16      	ldr	r2, [pc, #88]	@ (80040c4 <InitStepper+0xb8>)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	61d3      	str	r3, [r2, #28]
    StepperContext.htim4 = htim4;
 8004070:	4a14      	ldr	r2, [pc, #80]	@ (80040c4 <InitStepper+0xb8>)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	6213      	str	r3, [r2, #32]
    StepperContext.state = scs.INIT;
 8004076:	4b14      	ldr	r3, [pc, #80]	@ (80040c8 <InitStepper+0xbc>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	b2da      	uxtb	r2, r3
 800407c:	4b11      	ldr	r3, [pc, #68]	@ (80040c4 <InitStepper+0xb8>)
 800407e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    StepperContext.error_code = 0;
 8004082:	4b10      	ldr	r3, [pc, #64]	@ (80040c4 <InitStepper+0xb8>)
 8004084:	2200      	movs	r2, #0
 8004086:	611a      	str	r2, [r3, #16]

    CONSOLE_RegisterCommand(hconsole, "stepper", "Stepper main Command", StepperHandler, &StepperContext);
 8004088:	4b0e      	ldr	r3, [pc, #56]	@ (80040c4 <InitStepper+0xb8>)
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	4b0f      	ldr	r3, [pc, #60]	@ (80040cc <InitStepper+0xc0>)
 800408e:	4a10      	ldr	r2, [pc, #64]	@ (80040d0 <InitStepper+0xc4>)
 8004090:	4910      	ldr	r1, [pc, #64]	@ (80040d4 <InitStepper+0xc8>)
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f7fe ff3e 	bl	8002f14 <CONSOLE_RegisterCommand>
}
 8004098:	bf00      	nop
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40020c00 	.word	0x40020c00
 80040a4:	20000294 	.word	0x20000294
 80040a8:	080034d5 	.word	0x080034d5
 80040ac:	080034ed 	.word	0x080034ed
 80040b0:	08003505 	.word	0x08003505
 80040b4:	08003589 	.word	0x08003589
 80040b8:	080035b9 	.word	0x080035b9
 80040bc:	080035c9 	.word	0x080035c9
 80040c0:	08003615 	.word	0x08003615
 80040c4:	200002b0 	.word	0x200002b0
 80040c8:	20000000 	.word	0x20000000
 80040cc:	08003dbd 	.word	0x08003dbd
 80040d0:	080176b8 	.word	0x080176b8
 80040d4:	080176d0 	.word	0x080176d0

080040d8 <SpindleFunction>:
};

// --------------------------------------------------------------------------------------------------------------------
static void SpindleFunction( void * arg )
// --------------------------------------------------------------------------------------------------------------------
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b090      	sub	sp, #64	@ 0x40
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
	CtrlCommand_t cmd;
	StepCommandResponse_t asyncResponse;
	SpindleHandle_t h = (SpindleHandle_t)arg;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	633b      	str	r3, [r7, #48]	@ 0x30
	unsigned int running = 0;
 80040e4:	2300      	movs	r3, #0
 80040e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	unsigned int startupBoost = 0;
 80040e8:	2300      	movs	r3, #0
 80040ea:	63bb      	str	r3, [r7, #56]	@ 0x38

	h->physical.enaPWM(h, h->physical.context, 0);
 80040ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040f2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80040f4:	2200      	movs	r2, #0
 80040f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040f8:	4798      	blx	r3
	h->physical.setDutyCycle(h, h->physical.context, 0.0f );
 80040fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004100:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004102:	ed9f 0aa8 	vldr	s0, [pc, #672]	@ 80043a4 <SpindleFunction+0x2cc>
 8004106:	4611      	mov	r1, r2
 8004108:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800410a:	4798      	blx	r3
	h->currentSpeed = 0;
 800410c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	631a      	str	r2, [r3, #48]	@ 0x30

	// now here comes the command processor part
	while( !h->cancel )
 8004114:	e162      	b.n	80043dc <SpindleFunction+0x304>
	{
		// wait for next command
		if ( xQueueReceive( h->cmdQueue, &cmd, 100) == pdPASS )
 8004116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f107 011c 	add.w	r1, r7, #28
 800411e:	2264      	movs	r2, #100	@ 0x64
 8004120:	4618      	mov	r0, r3
 8004122:	f00a fc67 	bl	800e9f4 <xQueueReceive>
 8004126:	4603      	mov	r3, r0
 8004128:	2b01      	cmp	r3, #1
 800412a:	f040 813d 	bne.w	80043a8 <SpindleFunction+0x2d0>
		{
			if ( cmd.response == NULL || cmd.request.syncEvent == NULL )
 800412e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004130:	2b00      	cmp	r3, #0
 8004132:	d002      	beq.n	800413a <SpindleFunction+0x62>
 8004134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004136:	2b00      	cmp	r3, #0
 8004138:	d102      	bne.n	8004140 <SpindleFunction+0x68>
			{
				cmd.response = &asyncResponse;
 800413a:	f107 030c 	add.w	r3, r7, #12
 800413e:	62fb      	str	r3, [r7, #44]	@ 0x2c
			}
			memset(cmd.response, 0, sizeof(StepCommandResponse_t));
 8004140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004142:	2210      	movs	r2, #16
 8004144:	2100      	movs	r1, #0
 8004146:	4618      	mov	r0, r3
 8004148:	f00f fe12 	bl	8013d70 <memset>
			cmd.response->code = -1;
 800414c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800414e:	f04f 32ff 	mov.w	r2, #4294967295
 8004152:	601a      	str	r2, [r3, #0]
			cmd.response->requestID = cmd.head.requestID;
 8004154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004156:	69fa      	ldr	r2, [r7, #28]
 8004158:	605a      	str	r2, [r3, #4]


			switch ( cmd.head.type )
 800415a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800415e:	2b04      	cmp	r3, #4
 8004160:	f200 8115 	bhi.w	800438e <SpindleFunction+0x2b6>
 8004164:	a201      	add	r2, pc, #4	@ (adr r2, 800416c <SpindleFunction+0x94>)
 8004166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416a:	bf00      	nop
 800416c:	08004181 	.word	0x08004181
 8004170:	08004189 	.word	0x08004189
 8004174:	08004341 	.word	0x08004341
 8004178:	0800438f 	.word	0x0800438f
 800417c:	08004379 	.word	0x08004379
			{
			case cctNONE:
				cmd.response->code = 0;
 8004180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]
				break;
 8004186:	e103      	b.n	8004390 <SpindleFunction+0x2b8>
			case cctSTART:
				cmd.response->code = 0;
 8004188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]
				if ( cmd.request.args.asStart.speed < h->physical.minRPM ) cmd.request.args.asStart.speed = h->physical.minRPM;
 800418e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004194:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004198:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800419c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a0:	d502      	bpl.n	80041a8 <SpindleFunction+0xd0>
 80041a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a6:	627b      	str	r3, [r7, #36]	@ 0x24
				if ( cmd.request.args.asStart.speed > h->physical.maxRPM ) cmd.request.args.asStart.speed = h->physical.maxRPM;
 80041a8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80041ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ae:	edd3 7a08 	vldr	s15, [r3, #32]
 80041b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ba:	dd02      	ble.n	80041c2 <SpindleFunction+0xea>
 80041bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	627b      	str	r3, [r7, #36]	@ 0x24

				if (  cmd.request.args.asStart.speed > 0.0f && cmd.request.args.asStart.speed <  h->physical.absMinRPM ) cmd.request.args.asStart.speed =  h->physical.absMinRPM;
 80041c2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80041c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ce:	dd0c      	ble.n	80041ea <SpindleFunction+0x112>
 80041d0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80041d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80041da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e2:	d502      	bpl.n	80041ea <SpindleFunction+0x112>
 80041e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e8:	627b      	str	r3, [r7, #36]	@ 0x24
				if (  cmd.request.args.asStart.speed < 0.0f && cmd.request.args.asStart.speed > -h->physical.absMinRPM ) cmd.request.args.asStart.speed = -h->physical.absMinRPM;
 80041ea:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80041ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041f6:	d512      	bpl.n	800421e <SpindleFunction+0x146>
 80041f8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80041fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041fe:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004202:	eef1 7a67 	vneg.f32	s15, s15
 8004206:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800420a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800420e:	dd06      	ble.n	800421e <SpindleFunction+0x146>
 8004210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004212:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004216:	eef1 7a67 	vneg.f32	s15, s15
 800421a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

				int directionChange = 0;
 800421e:	2300      	movs	r3, #0
 8004220:	637b      	str	r3, [r7, #52]	@ 0x34
				if ((h->currentSpeed < 0.0f && cmd.request.args.asStart.speed > 0.0f) ||
 8004222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004224:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004228:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800422c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004230:	d506      	bpl.n	8004240 <SpindleFunction+0x168>
 8004232:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004236:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800423a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800423e:	dc0e      	bgt.n	800425e <SpindleFunction+0x186>
					(h->currentSpeed > 0.0f && cmd.request.args.asStart.speed < 0.0f))
 8004240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004242:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
				if ((h->currentSpeed < 0.0f && cmd.request.args.asStart.speed > 0.0f) ||
 8004246:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800424a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800424e:	dd08      	ble.n	8004262 <SpindleFunction+0x18a>
					(h->currentSpeed > 0.0f && cmd.request.args.asStart.speed < 0.0f))
 8004250:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004254:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800425c:	d501      	bpl.n	8004262 <SpindleFunction+0x18a>
					directionChange = 1;
 800425e:	2301      	movs	r3, #1
 8004260:	637b      	str	r3, [r7, #52]	@ 0x34
				h->currentSpeed = cmd.request.args.asStart.speed;
 8004262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004266:	631a      	str	r2, [r3, #48]	@ 0x30


				h->physical.setDirection(h, h->physical.context, h->currentSpeed < 0.0f );
 8004268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800426e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004270:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004272:	edd2 7a0c 	vldr	s15, [r2, #48]	@ 0x30
 8004276:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800427a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800427e:	bf4c      	ite	mi
 8004280:	2201      	movmi	r2, #1
 8004282:	2200      	movpl	r2, #0
 8004284:	b2d2      	uxtb	r2, r2
 8004286:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004288:	4798      	blx	r3
				if ( running == 1 && directionChange == 0 )
 800428a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800428c:	2b01      	cmp	r3, #1
 800428e:	d117      	bne.n	80042c0 <SpindleFunction+0x1e8>
 8004290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004292:	2b00      	cmp	r3, #0
 8004294:	d114      	bne.n	80042c0 <SpindleFunction+0x1e8>
				{
					h->physical.setDutyCycle(h, h->physical.context, ( fabsf(h->currentSpeed) / h->physical.maxRPM) );
 8004296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800429c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800429e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042a0:	edd2 7a0c 	vldr	s15, [r2, #48]	@ 0x30
 80042a4:	eeb0 7ae7 	vabs.f32	s14, s15
 80042a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042aa:	edd2 7a08 	vldr	s15, [r2, #32]
 80042ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80042b2:	eeb0 0a66 	vmov.f32	s0, s13
 80042b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042b8:	4798      	blx	r3
					startupBoost = 0;
 80042ba:	2300      	movs	r3, #0
 80042bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042be:	e020      	b.n	8004302 <SpindleFunction+0x22a>
				}
				else if ( ( running == 0 || directionChange == 1 ) && fabsf(cmd.request.args.asStart.speed) <= (0.25f * h->physical.maxRPM) )
 80042c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <SpindleFunction+0x1f4>
 80042c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d11a      	bne.n	8004302 <SpindleFunction+0x22a>
 80042cc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80042d0:	eeb0 7ae7 	vabs.f32	s14, s15
 80042d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d6:	edd3 7a08 	vldr	s15, [r3, #32]
 80042da:	eef5 6a00 	vmov.f32	s13, #80	@ 0x3e800000  0.250
 80042de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80042e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ea:	d80a      	bhi.n	8004302 <SpindleFunction+0x22a>
				{
					h->physical.setDutyCycle(h, h->physical.context, 0.5f );
 80042ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042f2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80042f4:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80042f8:	4611      	mov	r1, r2
 80042fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042fc:	4798      	blx	r3
					startupBoost = 1;
 80042fe:	2301      	movs	r3, #1
 8004300:	63bb      	str	r3, [r7, #56]	@ 0x38
				}
				if ( startupBoost == 0 )
 8004302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004304:	2b00      	cmp	r3, #0
 8004306:	d111      	bne.n	800432c <SpindleFunction+0x254>
				{
					h->physical.setDutyCycle(h, h->physical.context, ( fabsf(h->currentSpeed) / h->physical.maxRPM ) );
 8004308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800430e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004310:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004312:	edd2 7a0c 	vldr	s15, [r2, #48]	@ 0x30
 8004316:	eeb0 7ae7 	vabs.f32	s14, s15
 800431a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800431c:	edd2 7a08 	vldr	s15, [r2, #32]
 8004320:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004324:	eeb0 0a66 	vmov.f32	s0, s13
 8004328:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800432a:	4798      	blx	r3
				}

				h->physical.enaPWM(h, h->physical.context, 1);
 800432c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004332:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004334:	2201      	movs	r2, #1
 8004336:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004338:	4798      	blx	r3
				running = 1;
 800433a:	2301      	movs	r3, #1
 800433c:	63fb      	str	r3, [r7, #60]	@ 0x3c
				break;
 800433e:	e027      	b.n	8004390 <SpindleFunction+0x2b8>
			case cctSTOP:
				cmd.response->code = 0;
 8004340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]
				h->currentSpeed = 0;
 8004346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	631a      	str	r2, [r3, #48]	@ 0x30
				startupBoost = 0;
 800434e:	2300      	movs	r3, #0
 8004350:	63bb      	str	r3, [r7, #56]	@ 0x38
				running = 0;
 8004352:	2300      	movs	r3, #0
 8004354:	63fb      	str	r3, [r7, #60]	@ 0x3c
				h->physical.setDutyCycle(h, h->physical.context, 0.0f );
 8004356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800435c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800435e:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 80043a4 <SpindleFunction+0x2cc>
 8004362:	4611      	mov	r1, r2
 8004364:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004366:	4798      	blx	r3
				h->physical.enaPWM(h, h->physical.context, 0);
 8004368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800436e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004370:	2200      	movs	r2, #0
 8004372:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004374:	4798      	blx	r3
				break;
 8004376:	e00b      	b.n	8004390 <SpindleFunction+0x2b8>
			case cctSTATUS:
				cmd.response->code = 0;
 8004378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]
				cmd.response->args.asStatus.running = running;
 800437e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004380:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004382:	60da      	str	r2, [r3, #12]
				cmd.response->args.asStatus.speed = h->currentSpeed;
 8004384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004386:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004388:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800438a:	609a      	str	r2, [r3, #8]
				break;
 800438c:	e000      	b.n	8004390 <SpindleFunction+0x2b8>
			default:
				break;
 800438e:	bf00      	nop
			}

			// after processing the command we have to release the caller to keep
			// synchronous calling mechanism. In case there is no sync object, it was##
			// called asynchronously
			if ( cmd.request.syncEvent != NULL )
 8004390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004392:	2b00      	cmp	r3, #0
 8004394:	d022      	beq.n	80043dc <SpindleFunction+0x304>
			{
				xSemaphoreGive(cmd.request.syncEvent);
 8004396:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004398:	2300      	movs	r3, #0
 800439a:	2200      	movs	r2, #0
 800439c:	2100      	movs	r1, #0
 800439e:	f00a fa11 	bl	800e7c4 <xQueueGenericSend>
 80043a2:	e01b      	b.n	80043dc <SpindleFunction+0x304>
 80043a4:	00000000 	.word	0x00000000
		}
		else
		{
			// here we have to do some additional steps to regulate correct rpm in case
			// the low speed boost has been performed
			if ( startupBoost == 1 && running == 1 )
 80043a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d116      	bne.n	80043dc <SpindleFunction+0x304>
 80043ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d113      	bne.n	80043dc <SpindleFunction+0x304>
			{
				startupBoost = 0;
 80043b4:	2300      	movs	r3, #0
 80043b6:	63bb      	str	r3, [r7, #56]	@ 0x38
				h->physical.setDutyCycle(h, h->physical.context, ( fabsf(h->currentSpeed) / h->physical.maxRPM) );
 80043b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043be:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80043c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043c2:	edd2 7a0c 	vldr	s15, [r2, #48]	@ 0x30
 80043c6:	eeb0 7ae7 	vabs.f32	s14, s15
 80043ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043cc:	edd2 7a08 	vldr	s15, [r2, #32]
 80043d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80043d4:	eeb0 0a66 	vmov.f32	s0, s13
 80043d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80043da:	4798      	blx	r3
	while( !h->cancel )
 80043dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f43f ae98 	beq.w	8004116 <SpindleFunction+0x3e>
			}
		}
	}
}
 80043e6:	bf00      	nop
 80043e8:	bf00      	nop
 80043ea:	3740      	adds	r7, #64	@ 0x40
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <GetCommandEvent>:

// --------------------------------------------------------------------------------------------------------------------
static SemaphoreHandle_t GetCommandEvent( SpindleHandle_t h )
// --------------------------------------------------------------------------------------------------------------------
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
	xSemaphoreTakeRecursive( h->syncEventPool.lockGuard, -1 );
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043fc:	f04f 31ff 	mov.w	r1, #4294967295
 8004400:	4618      	mov	r0, r3
 8004402:	f00a f9a1 	bl	800e748 <xQueueTakeMutexRecursive>

	stepSyncEventElement_t* el = LIST_FIRST(&h->syncEventPool.pool);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800440a:	60fb      	str	r3, [r7, #12]
	while ( el != NULL )
 800440c:	e017      	b.n	800443e <GetCommandEvent+0x4e>
	{
		if ( el->content.allocated == 0 )
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d110      	bne.n	8004438 <GetCommandEvent+0x48>
		{
			el->content.allocated = 1;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2201      	movs	r2, #1
 800441a:	601a      	str	r2, [r3, #0]
			// make sure we the event is in held state
			xSemaphoreTake( el->content.event, 0 );
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	2100      	movs	r1, #0
 8004422:	4618      	mov	r0, r3
 8004424:	f00a fbda 	bl	800ebdc <xQueueSemaphoreTake>
			xSemaphoreGiveRecursive( h->syncEventPool.lockGuard );
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800442c:	4618      	mov	r0, r3
 800442e:	f00a f94f 	bl	800e6d0 <xQueueGiveMutexRecursive>
			return el->content.event;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	e00b      	b.n	8004450 <GetCommandEvent+0x60>
		}
		el = LIST_NEXT(el, navigate);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	60fb      	str	r3, [r7, #12]
	while ( el != NULL )
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1e4      	bne.n	800440e <GetCommandEvent+0x1e>
	}

	xSemaphoreGiveRecursive( h->syncEventPool.lockGuard );
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004448:	4618      	mov	r0, r3
 800444a:	f00a f941 	bl	800e6d0 <xQueueGiveMutexRecursive>
	return 0;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <ReleaseCommandEvent>:

// --------------------------------------------------------------------------------------------------------------------
static void ReleaseCommandEvent( SpindleHandle_t h, SemaphoreHandle_t s )
// --------------------------------------------------------------------------------------------------------------------
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
	xSemaphoreTakeRecursive( h->syncEventPool.lockGuard, -1 );
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004466:	f04f 31ff 	mov.w	r1, #4294967295
 800446a:	4618      	mov	r0, r3
 800446c:	f00a f96c 	bl	800e748 <xQueueTakeMutexRecursive>

	stepSyncEventElement_t* el = LIST_FIRST(&h->syncEventPool.pool);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004474:	60fb      	str	r3, [r7, #12]
	while ( el != NULL )
 8004476:	e014      	b.n	80044a2 <ReleaseCommandEvent+0x4a>
	{
		if ( el->content.allocated == 1 && el->content.event == s)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d10d      	bne.n	800449c <ReleaseCommandEvent+0x44>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d108      	bne.n	800449c <ReleaseCommandEvent+0x44>
		{
			el->content.allocated = 0;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]
			xSemaphoreGiveRecursive( h->syncEventPool.lockGuard );
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004494:	4618      	mov	r0, r3
 8004496:	f00a f91b 	bl	800e6d0 <xQueueGiveMutexRecursive>
			return;
 800449a:	e00a      	b.n	80044b2 <ReleaseCommandEvent+0x5a>
		}
		el = LIST_NEXT(el, navigate);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	60fb      	str	r3, [r7, #12]
	while ( el != NULL )
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e7      	bne.n	8004478 <ReleaseCommandEvent+0x20>
	}

	xSemaphoreGiveRecursive( h->syncEventPool.lockGuard );
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ac:	4618      	mov	r0, r3
 80044ae:	f00a f90f 	bl	800e6d0 <xQueueGiveMutexRecursive>
}
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <SpindleConsoleFunction>:

// --------------------------------------------------------------------------------------------------------------------
static int SpindleConsoleFunction( int argc, char** argv, void* ctx )
// --------------------------------------------------------------------------------------------------------------------
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b08e      	sub	sp, #56	@ 0x38
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
	//possible commands are
	//(spindle) start 100
	//(spindle) stop
	//(spindle) status

	SpindleHandle_t h = (SpindleHandle_t)ctx;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	637b      	str	r3, [r7, #52]	@ 0x34
	StepCommandResponse_t response = { 0 };
 80044c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044cc:	2200      	movs	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	605a      	str	r2, [r3, #4]
 80044d2:	609a      	str	r2, [r3, #8]
 80044d4:	60da      	str	r2, [r3, #12]
	CtrlCommand_t cmd;

	cmd.response       = &response;
 80044d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044da:	623b      	str	r3, [r7, #32]
	cmd.head.requestID = h->nextRequestID;
 80044dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	613b      	str	r3, [r7, #16]
	h->nextRequestID += 1;
 80044e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ea:	601a      	str	r2, [r3, #0]

	// first decode the subcommand and all arguments
	if ( argc == 0 )
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d105      	bne.n	80044fe <SpindleConsoleFunction+0x46>
	{
		printf("invalid number of arguments\r\nFAIL");
 80044f2:	484a      	ldr	r0, [pc, #296]	@ (800461c <SpindleConsoleFunction+0x164>)
 80044f4:	f00f f9e6 	bl	80138c4 <iprintf>
		return -1;
 80044f8:	f04f 33ff 	mov.w	r3, #4294967295
 80044fc:	e089      	b.n	8004612 <SpindleConsoleFunction+0x15a>
	}
	if ( strcmp(argv[0], "stop") == 0 )
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4947      	ldr	r1, [pc, #284]	@ (8004620 <SpindleConsoleFunction+0x168>)
 8004504:	4618      	mov	r0, r3
 8004506:	f7fb fe83 	bl	8000210 <strcmp>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d102      	bne.n	8004516 <SpindleConsoleFunction+0x5e>
	{
		// no further arguments
		cmd.head.type = cctSTOP;
 8004510:	2302      	movs	r3, #2
 8004512:	753b      	strb	r3, [r7, #20]
 8004514:	e036      	b.n	8004584 <SpindleConsoleFunction+0xcc>
	}
	else if ( strcmp(argv[0], "start") == 0 )
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4942      	ldr	r1, [pc, #264]	@ (8004624 <SpindleConsoleFunction+0x16c>)
 800451c:	4618      	mov	r0, r3
 800451e:	f7fb fe77 	bl	8000210 <strcmp>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d11b      	bne.n	8004560 <SpindleConsoleFunction+0xa8>
	{
		// rpm value directly after start
		cmd.head.type = cctSTART;
 8004528:	2301      	movs	r3, #1
 800452a:	753b      	strb	r3, [r7, #20]
		cmd.request.args.asStart.speed    = 600.0f;
 800452c:	4b3e      	ldr	r3, [pc, #248]	@ (8004628 <SpindleConsoleFunction+0x170>)
 800452e:	61bb      	str	r3, [r7, #24]
		if ( argc < 2 )
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2b01      	cmp	r3, #1
 8004534:	dc05      	bgt.n	8004542 <SpindleConsoleFunction+0x8a>
		{
			printf("missing RPM value for start command\r\nFAIL");
 8004536:	483d      	ldr	r0, [pc, #244]	@ (800462c <SpindleConsoleFunction+0x174>)
 8004538:	f00f f9c4 	bl	80138c4 <iprintf>
			return -1;
 800453c:	f04f 33ff 	mov.w	r3, #4294967295
 8004540:	e067      	b.n	8004612 <SpindleConsoleFunction+0x15a>
		}

		cmd.request.args.asStart.speed = (float)atof(argv[1]);
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	3304      	adds	r3, #4
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4618      	mov	r0, r3
 800454a:	f00d f8a7 	bl	801169c <atof>
 800454e:	ec53 2b10 	vmov	r2, r3, d0
 8004552:	4610      	mov	r0, r2
 8004554:	4619      	mov	r1, r3
 8004556:	f7fc fb77 	bl	8000c48 <__aeabi_d2f>
 800455a:	4603      	mov	r3, r0
 800455c:	61bb      	str	r3, [r7, #24]
 800455e:	e011      	b.n	8004584 <SpindleConsoleFunction+0xcc>
	}
	else if ( strcmp(argv[0], "status") == 0 )
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4932      	ldr	r1, [pc, #200]	@ (8004630 <SpindleConsoleFunction+0x178>)
 8004566:	4618      	mov	r0, r3
 8004568:	f7fb fe52 	bl	8000210 <strcmp>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d102      	bne.n	8004578 <SpindleConsoleFunction+0xc0>
	{
		// no further arguments, everything in result
		cmd.head.type = cctSTATUS;
 8004572:	2304      	movs	r3, #4
 8004574:	753b      	strb	r3, [r7, #20]
 8004576:	e005      	b.n	8004584 <SpindleConsoleFunction+0xcc>
	}
	else
	{
		printf("passed invalid sub command\r\nFAIL");
 8004578:	482e      	ldr	r0, [pc, #184]	@ (8004634 <SpindleConsoleFunction+0x17c>)
 800457a:	f00f f9a3 	bl	80138c4 <iprintf>
		return -1;
 800457e:	f04f 33ff 	mov.w	r3, #4294967295
 8004582:	e046      	b.n	8004612 <SpindleConsoleFunction+0x15a>
	}

	// now pass the request to the controller
	cmd.request.syncEvent = GetCommandEvent(h);
 8004584:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004586:	f7ff ff33 	bl	80043f0 <GetCommandEvent>
 800458a:	4603      	mov	r3, r0
 800458c:	61fb      	str	r3, [r7, #28]

	if ( pdPASS != xQueueSend( h->cmdQueue, &cmd, -1 ) )
 800458e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004590:	68d8      	ldr	r0, [r3, #12]
 8004592:	f107 0110 	add.w	r1, r7, #16
 8004596:	2300      	movs	r3, #0
 8004598:	f04f 32ff 	mov.w	r2, #4294967295
 800459c:	f00a f912 	bl	800e7c4 <xQueueGenericSend>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d007      	beq.n	80045b6 <SpindleConsoleFunction+0xfe>
	{
		ReleaseCommandEvent(h, cmd.request.syncEvent );
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	4619      	mov	r1, r3
 80045aa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80045ac:	f7ff ff54 	bl	8004458 <ReleaseCommandEvent>
		return -1;
 80045b0:	f04f 33ff 	mov.w	r3, #4294967295
 80045b4:	e02d      	b.n	8004612 <SpindleConsoleFunction+0x15a>
	}

	xSemaphoreTake( cmd.request.syncEvent, -1 );
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	f04f 31ff 	mov.w	r1, #4294967295
 80045bc:	4618      	mov	r0, r3
 80045be:	f00a fb0d 	bl	800ebdc <xQueueSemaphoreTake>
	ReleaseCommandEvent(h, cmd.request.syncEvent );
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	4619      	mov	r1, r3
 80045c6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80045c8:	f7ff ff46 	bl	8004458 <ReleaseCommandEvent>

	// now decode the result in case there is one
	if ( response.code == 0 )
 80045cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d11b      	bne.n	800460a <SpindleConsoleFunction+0x152>
	{
		if ( cmd.head.type == cctSTATUS )
 80045d2:	7d3b      	ldrb	r3, [r7, #20]
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	d114      	bne.n	8004602 <SpindleConsoleFunction+0x14a>
		{
			printf("%d\r\n", !!cmd.response->args.asStatus.running);
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	bf14      	ite	ne
 80045e0:	2301      	movne	r3, #1
 80045e2:	2300      	moveq	r3, #0
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	4619      	mov	r1, r3
 80045e8:	4813      	ldr	r0, [pc, #76]	@ (8004638 <SpindleConsoleFunction+0x180>)
 80045ea:	f00f f96b 	bl	80138c4 <iprintf>
			printf("%d\r\n", (int)cmd.response->args.asStatus.speed);
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80045f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045f8:	ee17 1a90 	vmov	r1, s15
 80045fc:	480e      	ldr	r0, [pc, #56]	@ (8004638 <SpindleConsoleFunction+0x180>)
 80045fe:	f00f f961 	bl	80138c4 <iprintf>
		}
		printf("OK");
 8004602:	480e      	ldr	r0, [pc, #56]	@ (800463c <SpindleConsoleFunction+0x184>)
 8004604:	f00f f95e 	bl	80138c4 <iprintf>
 8004608:	e002      	b.n	8004610 <SpindleConsoleFunction+0x158>
	}
	else
	{
		printf("error returned\r\nFAIL");
 800460a:	480d      	ldr	r0, [pc, #52]	@ (8004640 <SpindleConsoleFunction+0x188>)
 800460c:	f00f f95a 	bl	80138c4 <iprintf>
	}

	// now back to console
	return response.code;
 8004610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004612:	4618      	mov	r0, r3
 8004614:	3738      	adds	r7, #56	@ 0x38
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	080176d8 	.word	0x080176d8
 8004620:	080176fc 	.word	0x080176fc
 8004624:	08017704 	.word	0x08017704
 8004628:	44160000 	.word	0x44160000
 800462c:	0801770c 	.word	0x0801770c
 8004630:	08017738 	.word	0x08017738
 8004634:	08017740 	.word	0x08017740
 8004638:	08017764 	.word	0x08017764
 800463c:	0801776c 	.word	0x0801776c
 8004640:	08017770 	.word	0x08017770

08004644 <SpindleRegisterBasicCommands>:

// --------------------------------------------------------------------------------------------------------------------
static void SpindleRegisterBasicCommands( SpindleHandle_t h, ConsoleHandle_t cH )
// --------------------------------------------------------------------------------------------------------------------
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af02      	add	r7, sp, #8
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
	CONSOLE_RegisterCommand(cH, "spindle", "<<spindle>> is used to control a spindle motor.\r\nValid subcommands are start, stop, status.\r\nStart needs an additional RPM argument!",
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	4b05      	ldr	r3, [pc, #20]	@ (8004668 <SpindleRegisterBasicCommands+0x24>)
 8004654:	4a05      	ldr	r2, [pc, #20]	@ (800466c <SpindleRegisterBasicCommands+0x28>)
 8004656:	4906      	ldr	r1, [pc, #24]	@ (8004670 <SpindleRegisterBasicCommands+0x2c>)
 8004658:	6838      	ldr	r0, [r7, #0]
 800465a:	f7fe fc5b 	bl	8002f14 <CONSOLE_RegisterCommand>
			SpindleConsoleFunction, h);
}
 800465e:	bf00      	nop
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	080044b9 	.word	0x080044b9
 800466c:	08017788 	.word	0x08017788
 8004670:	08017810 	.word	0x08017810

08004674 <SPINDLE_CreateInstance>:

// --------------------------------------------------------------------------------------------------------------------
SpindleHandle_t SPINDLE_CreateInstance( unsigned int uxStackDepth, int xPrio, ConsoleHandle_t cH, SpindlePhysicalParams_t* p )
// --------------------------------------------------------------------------------------------------------------------
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b08c      	sub	sp, #48	@ 0x30
 8004678:	af02      	add	r7, sp, #8
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
 8004680:	603b      	str	r3, [r7, #0]
#define ON_NULL_GOTO_ERROR(x) do { if ((x) == NULL) goto error; } while(0);
	// singleton pattern
	if ( SpindleInstancePointer != NULL ) return SpindleInstancePointer;
 8004682:	4b86      	ldr	r3, [pc, #536]	@ (800489c <SPINDLE_CreateInstance+0x228>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d002      	beq.n	8004690 <SPINDLE_CreateInstance+0x1c>
 800468a:	4b84      	ldr	r3, [pc, #528]	@ (800489c <SPINDLE_CreateInstance+0x228>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	e101      	b.n	8004894 <SPINDLE_CreateInstance+0x220>

	if ( p == NULL || p->enaPWM == NULL || p->setDirection == NULL ||
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d019      	beq.n	80046ca <SPINDLE_CreateInstance+0x56>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d015      	beq.n	80046ca <SPINDLE_CreateInstance+0x56>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d011      	beq.n	80046ca <SPINDLE_CreateInstance+0x56>
	     p->minRPM >= p->maxRPM || p->setDutyCycle == NULL || cH == NULL )
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	ed93 7a05 	vldr	s14, [r3, #20]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	edd3 7a03 	vldr	s15, [r3, #12]
	if ( p == NULL || p->enaPWM == NULL || p->setDirection == NULL ||
 80046b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ba:	da06      	bge.n	80046ca <SPINDLE_CreateInstance+0x56>
	     p->minRPM >= p->maxRPM || p->setDutyCycle == NULL || cH == NULL )
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d002      	beq.n	80046ca <SPINDLE_CreateInstance+0x56>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <SPINDLE_CreateInstance+0x5a>
		return NULL;
 80046ca:	2300      	movs	r3, #0
 80046cc:	e0e2      	b.n	8004894 <SPINDLE_CreateInstance+0x220>

	struct SpindleHandle* h = calloc(sizeof(struct SpindleHandle), 1);
 80046ce:	2101      	movs	r1, #1
 80046d0:	203c      	movs	r0, #60	@ 0x3c
 80046d2:	f00c ffeb 	bl	80116ac <calloc>
 80046d6:	4603      	mov	r3, r0
 80046d8:	61fb      	str	r3, [r7, #28]
	ON_NULL_GOTO_ERROR(h);
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 8082 	beq.w	80047e6 <SPINDLE_CreateInstance+0x172>

	if ( h == NULL ) return NULL;
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <SPINDLE_CreateInstance+0x78>
 80046e8:	2300      	movs	r3, #0
 80046ea:	e0d3      	b.n	8004894 <SPINDLE_CreateInstance+0x220>
	h->consoleH = cH;
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	605a      	str	r2, [r3, #4]
	h->cancel = 0;
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	2200      	movs	r2, #0
 80046f6:	611a      	str	r2, [r3, #16]
	h->nextRequestID = 0;
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]
	h->cmdQueue = xQueueCreate(16, sizeof(CtrlCommand_t));
 80046fe:	2200      	movs	r2, #0
 8004700:	2114      	movs	r1, #20
 8004702:	2010      	movs	r0, #16
 8004704:	f009 ff38 	bl	800e578 <xQueueGenericCreate>
 8004708:	4602      	mov	r2, r0
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	60da      	str	r2, [r3, #12]
	ON_NULL_GOTO_ERROR(h->cmdQueue);
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d067      	beq.n	80047e6 <SPINDLE_CreateInstance+0x172>

	// copy arguments
	memcpy(&h->physical, p, sizeof(SpindlePhysicalParams_t));
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	3314      	adds	r3, #20
 800471a:	221c      	movs	r2, #28
 800471c:	6839      	ldr	r1, [r7, #0]
 800471e:	4618      	mov	r0, r3
 8004720:	f00f fc8c 	bl	801403c <memcpy>

	// now we create the sync event pool
	LIST_INIT(&h->syncEventPool.pool);
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	2200      	movs	r2, #0
 8004728:	639a      	str	r2, [r3, #56]	@ 0x38
	h->syncEventPool.lockGuard = xSemaphoreCreateRecursiveMutex();
 800472a:	2004      	movs	r0, #4
 800472c:	f009 ffb7 	bl	800e69e <xQueueCreateMutex>
 8004730:	4602      	mov	r2, r0
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	635a      	str	r2, [r3, #52]	@ 0x34
	ON_NULL_GOTO_ERROR(h->syncEventPool.lockGuard);
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800473a:	2b00      	cmp	r3, #0
 800473c:	d053      	beq.n	80047e6 <SPINDLE_CreateInstance+0x172>
	for ( int i = 0; i < 8; i++)
 800473e:	2300      	movs	r3, #0
 8004740:	627b      	str	r3, [r7, #36]	@ 0x24
 8004742:	e035      	b.n	80047b0 <SPINDLE_CreateInstance+0x13c>
	{
		stepSyncEventElement_t* el = (stepSyncEventElement_t*)calloc(sizeof(stepSyncEventElement_t), 1);
 8004744:	2101      	movs	r1, #1
 8004746:	2010      	movs	r0, #16
 8004748:	f00c ffb0 	bl	80116ac <calloc>
 800474c:	4603      	mov	r3, r0
 800474e:	61bb      	str	r3, [r7, #24]
		ON_NULL_GOTO_ERROR(el);
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d047      	beq.n	80047e6 <SPINDLE_CreateInstance+0x172>
		el->content.allocated = 0;
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]
		el->content.event = xSemaphoreCreateBinary();
 800475c:	2203      	movs	r2, #3
 800475e:	2100      	movs	r1, #0
 8004760:	2001      	movs	r0, #1
 8004762:	f009 ff09 	bl	800e578 <xQueueGenericCreate>
 8004766:	4602      	mov	r2, r0
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	605a      	str	r2, [r3, #4]
		if (el->content.event == NULL)
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d105      	bne.n	8004780 <SPINDLE_CreateInstance+0x10c>
		{
			free(el);
 8004774:	69b8      	ldr	r0, [r7, #24]
 8004776:	f00d f805 	bl	8011784 <free>
			el = NULL;
 800477a:	2300      	movs	r3, #0
 800477c:	61bb      	str	r3, [r7, #24]
			goto error;
 800477e:	e032      	b.n	80047e6 <SPINDLE_CreateInstance+0x172>
		}
		else
		{
			LIST_INSERT_HEAD(&h->syncEventPool.pool, el, navigate);
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	609a      	str	r2, [r3, #8]
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d004      	beq.n	800479a <SPINDLE_CreateInstance+0x126>
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	3208      	adds	r2, #8
 8004798:	60da      	str	r2, [r3, #12]
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	639a      	str	r2, [r3, #56]	@ 0x38
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	60da      	str	r2, [r3, #12]
	for ( int i = 0; i < 8; i++)
 80047aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ac:	3301      	adds	r3, #1
 80047ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80047b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b2:	2b07      	cmp	r3, #7
 80047b4:	ddc6      	ble.n	8004744 <SPINDLE_CreateInstance+0xd0>
		}
	}

	// setup the console commands
	SpindleRegisterBasicCommands(h, cH);
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	69f8      	ldr	r0, [r7, #28]
 80047ba:	f7ff ff43 	bl	8004644 <SpindleRegisterBasicCommands>
	SpindleInstancePointer = h;
 80047be:	4a37      	ldr	r2, [pc, #220]	@ (800489c <SPINDLE_CreateInstance+0x228>)
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	6013      	str	r3, [r2, #0]

	// setup the task which handles all communications and the RPM generation
	xTaskCreate(SpindleFunction, "spindlectrl", uxStackDepth, h, xPrio, &h->tHandle);
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	69fa      	ldr	r2, [r7, #28]
 80047c8:	3208      	adds	r2, #8
 80047ca:	9201      	str	r2, [sp, #4]
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	4933      	ldr	r1, [pc, #204]	@ (80048a0 <SPINDLE_CreateInstance+0x22c>)
 80047d4:	4833      	ldr	r0, [pc, #204]	@ (80048a4 <SPINDLE_CreateInstance+0x230>)
 80047d6:	f00a fccf 	bl	800f178 <xTaskCreate>
	ON_NULL_GOTO_ERROR(h->tHandle);
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <SPINDLE_CreateInstance+0x172>
	return h;
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	e056      	b.n	8004894 <SPINDLE_CreateInstance+0x220>

error:
	if (h != NULL)
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d052      	beq.n	8004892 <SPINDLE_CreateInstance+0x21e>
	{
		if (h->cmdQueue != NULL)
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d007      	beq.n	8004804 <SPINDLE_CreateInstance+0x190>
		{
			vQueueDelete(h->cmdQueue);
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f00a fb01 	bl	800ee00 <vQueueDelete>
			h->cmdQueue = NULL;
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	2200      	movs	r2, #0
 8004802:	60da      	str	r2, [r3, #12]
		}

		if (h->syncEventPool.lockGuard != NULL)
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004808:	2b00      	cmp	r3, #0
 800480a:	d007      	beq.n	800481c <SPINDLE_CreateInstance+0x1a8>
		{
			vSemaphoreDelete(h->syncEventPool.lockGuard);
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004810:	4618      	mov	r0, r3
 8004812:	f00a faf5 	bl	800ee00 <vQueueDelete>
			h->syncEventPool.lockGuard = NULL;
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	2200      	movs	r2, #0
 800481a:	635a      	str	r2, [r3, #52]	@ 0x34
		}

		// first clean all event elements
		stepSyncEventElement_t* el = NULL;
 800481c:	2300      	movs	r3, #0
 800481e:	623b      	str	r3, [r7, #32]
		stepSyncEventElement_t* tel = NULL;
 8004820:	2300      	movs	r3, #0
 8004822:	617b      	str	r3, [r7, #20]
		for (el = LIST_FIRST(&h->syncEventPool.pool); el && (tel = LIST_NEXT(el, navigate), 1); el = tel)
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004828:	623b      	str	r3, [r7, #32]
 800482a:	e009      	b.n	8004840 <SPINDLE_CreateInstance+0x1cc>
		{
			if (el->content.event != NULL)
			{
				vSemaphoreDelete(el->content.event);
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	4618      	mov	r0, r3
 8004832:	f00a fae5 	bl	800ee00 <vQueueDelete>
				el->content.event = NULL;
 8004836:	6a3b      	ldr	r3, [r7, #32]
 8004838:	2200      	movs	r2, #0
 800483a:	605a      	str	r2, [r3, #4]
		for (el = LIST_FIRST(&h->syncEventPool.pool); el && (tel = LIST_NEXT(el, navigate), 1); el = tel)
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	623b      	str	r3, [r7, #32]
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d01e      	beq.n	8004884 <SPINDLE_CreateInstance+0x210>
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	617b      	str	r3, [r7, #20]
			if (el->content.event != NULL)
 800484c:	6a3b      	ldr	r3, [r7, #32]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d0f3      	beq.n	800483c <SPINDLE_CreateInstance+0x1c8>
 8004854:	e7ea      	b.n	800482c <SPINDLE_CreateInstance+0x1b8>
		}

		// now remove all elements one by one from the list and free them
		while (!LIST_EMPTY(&h->syncEventPool.pool))
		{
			stepSyncEventElement_t* el = LIST_FIRST(&h->syncEventPool.pool);
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485a:	613b      	str	r3, [r7, #16]
			if (el != NULL)
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d010      	beq.n	8004884 <SPINDLE_CreateInstance+0x210>
			{
				LIST_REMOVE(el, navigate);
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d004      	beq.n	8004874 <SPINDLE_CreateInstance+0x200>
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	68d2      	ldr	r2, [r2, #12]
 8004872:	60da      	str	r2, [r3, #12]
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	6892      	ldr	r2, [r2, #8]
 800487c:	601a      	str	r2, [r3, #0]
				free(el);
 800487e:	6938      	ldr	r0, [r7, #16]
 8004880:	f00c ff80 	bl	8011784 <free>
		while (!LIST_EMPTY(&h->syncEventPool.pool))
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1e4      	bne.n	8004856 <SPINDLE_CreateInstance+0x1e2>
			}
		}

		free(h);
 800488c:	69f8      	ldr	r0, [r7, #28]
 800488e:	f00c ff79 	bl	8011784 <free>
	}

	return NULL;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3728      	adds	r7, #40	@ 0x28
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	200002d8 	.word	0x200002d8
 80048a0:	08017818 	.word	0x08017818
 80048a4:	080040d9 	.word	0x080040d9

080048a8 <L6474_HelperLock>:


// --------------------------------------------------------------------------------------------------------------------
static inline int L6474_HelperLock(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
#if defined(LIBL6474_HAS_LOCKING) && LIBL6474_HAS_LOCKING == 1
	return h->platform->lock();
#else
	(void)h;
	return 0;
 80048b0:	2300      	movs	r3, #0
#endif
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <L6474_HelperUnlock>:

// --------------------------------------------------------------------------------------------------------------------
static inline void L6474_HelperUnlock(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
#if defined(LIBL6474_HAS_LOCKING) && LIBL6474_HAS_LOCKING == 1
	h->platform->unlock();
#else
	(void)h;
	return;
 80048c6:	bf00      	nop
#endif
}
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <L6474_HelperReleaseStep>:


// --------------------------------------------------------------------------------------------------------------------
static void L6474_HelperReleaseStep(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b082      	sub	sp, #8
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
	L6474_HelperLock(h);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7ff ffe4 	bl	80048a8 <L6474_HelperLock>
	h->pending = 0;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	605a      	str	r2, [r3, #4]
	L6474_HelperUnlock(h);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7ff ffe9 	bl	80048be <L6474_HelperUnlock>
}
 80048ec:	bf00      	nop
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <L6474_GetStatusCommand>:

// --------------------------------------------------------------------------------------------------------------------
static int L6474_GetStatusCommand(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 80048f4:	b590      	push	{r4, r7, lr}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
	if ( h->state == stRESET )
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d102      	bne.n	800490a <L6474_GetStatusCommand+0x16>
		return errcINV_STATE;
 8004904:	f06f 0302 	mvn.w	r3, #2
 8004908:	e033      	b.n	8004972 <L6474_GetStatusCommand+0x7e>

	int length = STEP_CMD_STA_LENGTH;
 800490a:	2303      	movs	r3, #3
 800490c:	617b      	str	r3, [r7, #20]

	unsigned char rxBuff[STEP_CMD_STA_LENGTH] = { 0 };
 800490e:	f107 030c 	add.w	r3, r7, #12
 8004912:	2100      	movs	r1, #0
 8004914:	460a      	mov	r2, r1
 8004916:	801a      	strh	r2, [r3, #0]
 8004918:	460a      	mov	r2, r1
 800491a:	709a      	strb	r2, [r3, #2]
	unsigned char txBuff[STEP_CMD_STA_LENGTH] = { 0 };
 800491c:	f107 0308 	add.w	r3, r7, #8
 8004920:	2100      	movs	r1, #0
 8004922:	460a      	mov	r2, r1
 8004924:	801a      	strh	r2, [r3, #0]
 8004926:	460a      	mov	r2, r1
 8004928:	709a      	strb	r2, [r3, #2]

	txBuff[0] = STEP_CMD_STA_PREFIX | 0;
 800492a:	23d0      	movs	r3, #208	@ 0xd0
 800492c:	723b      	strb	r3, [r7, #8]
	int ret = h->platform.transfer(h->pIO, (char*)rxBuff, (const char*)txBuff, length);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	69dc      	ldr	r4, [r3, #28]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6898      	ldr	r0, [r3, #8]
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f107 0208 	add.w	r2, r7, #8
 800493c:	f107 010c 	add.w	r1, r7, #12
 8004940:	47a0      	blx	r4
 8004942:	6138      	str	r0, [r7, #16]

	if ( ret != 0 )
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d002      	beq.n	8004950 <L6474_GetStatusCommand+0x5c>
		return errcINTERNAL;
 800494a:	f06f 0303 	mvn.w	r3, #3
 800494e:	e010      	b.n	8004972 <L6474_GetStatusCommand+0x7e>

	ret = (rxBuff[2] << 0 ) | (rxBuff[1] << 8 );
 8004950:	7bbb      	ldrb	r3, [r7, #14]
 8004952:	461a      	mov	r2, r3
 8004954:	7b7b      	ldrb	r3, [r7, #13]
 8004956:	021b      	lsls	r3, r3, #8
 8004958:	4313      	orrs	r3, r2
 800495a:	613b      	str	r3, [r7, #16]
	h->state = ( ret & STATUS_HIGHZ_MASK ) ? stDISABLED : stENABLED;
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <L6474_GetStatusCommand+0x76>
 8004966:	2201      	movs	r2, #1
 8004968:	e000      	b.n	800496c <L6474_GetStatusCommand+0x78>
 800496a:	2202      	movs	r2, #2
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	701a      	strb	r2, [r3, #0]
	return ret;
 8004970:	693b      	ldr	r3, [r7, #16]
}
 8004972:	4618      	mov	r0, r3
 8004974:	371c      	adds	r7, #28
 8004976:	46bd      	mov	sp, r7
 8004978:	bd90      	pop	{r4, r7, pc}
	...

0800497c <L6474_GetParamCommand>:
}

// --------------------------------------------------------------------------------------------------------------------
static int L6474_GetParamCommand(L6474_Handle_t h, int addr)
// --------------------------------------------------------------------------------------------------------------------
{
 800497c:	b590      	push	{r4, r7, lr}
 800497e:	b08b      	sub	sp, #44	@ 0x2c
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
	addr &= STEP_REG_RANGE_MASK;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	f003 031f 	and.w	r3, r3, #31
 800498c:	603b      	str	r3, [r7, #0]
	if( L6474_Parameters[addr].defined == 0 )
 800498e:	4a52      	ldr	r2, [pc, #328]	@ (8004ad8 <L6474_GetParamCommand+0x15c>)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	011b      	lsls	r3, r3, #4
 8004994:	4413      	add	r3, r2
 8004996:	3301      	adds	r3, #1
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d102      	bne.n	80049a4 <L6474_GetParamCommand+0x28>
		return errcINV_ARG;
 800499e:	f04f 33ff 	mov.w	r3, #4294967295
 80049a2:	e094      	b.n	8004ace <L6474_GetParamCommand+0x152>

	if( ( L6474_Parameters[addr].flags & afREAD ) == 0 )
 80049a4:	4a4c      	ldr	r2, [pc, #304]	@ (8004ad8 <L6474_GetParamCommand+0x15c>)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	011b      	lsls	r3, r3, #4
 80049aa:	4413      	add	r3, r2
 80049ac:	330c      	adds	r3, #12
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d102      	bne.n	80049be <L6474_GetParamCommand+0x42>
		return errcFORBIDDEN;
 80049b8:	f06f 0307 	mvn.w	r3, #7
 80049bc:	e087      	b.n	8004ace <L6474_GetParamCommand+0x152>

	if ( h->state == stRESET )
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d102      	bne.n	80049cc <L6474_GetParamCommand+0x50>
		return errcINV_STATE;
 80049c6:	f06f 0302 	mvn.w	r3, #2
 80049ca:	e080      	b.n	8004ace <L6474_GetParamCommand+0x152>

	int length  = L6474_Parameters[addr].length + STEP_CMD_GET_LENGTH;
 80049cc:	4a42      	ldr	r2, [pc, #264]	@ (8004ad8 <L6474_GetParamCommand+0x15c>)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	011b      	lsls	r3, r3, #4
 80049d2:	4413      	add	r3, r2
 80049d4:	3302      	adds	r3, #2
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	3301      	adds	r3, #1
 80049da:	623b      	str	r3, [r7, #32]
	if ( length > STEP_CMD_GET_MAX_PAYLOAD )
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	2b04      	cmp	r3, #4
 80049e0:	dd02      	ble.n	80049e8 <L6474_GetParamCommand+0x6c>
		return errcINTERNAL;
 80049e2:	f06f 0303 	mvn.w	r3, #3
 80049e6:	e072      	b.n	8004ace <L6474_GetParamCommand+0x152>

	unsigned char rxBuff[STEP_CMD_GET_MAX_PAYLOAD] = { STEP_CMD_NOP_PREFIX };
 80049e8:	2300      	movs	r3, #0
 80049ea:	613b      	str	r3, [r7, #16]
	unsigned char txBuff[STEP_CMD_GET_MAX_PAYLOAD] = { STEP_CMD_NOP_PREFIX };
 80049ec:	2300      	movs	r3, #0
 80049ee:	60fb      	str	r3, [r7, #12]

	txBuff[0] = STEP_CMD_GET_PREFIX | addr;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	b25b      	sxtb	r3, r3
 80049f4:	f043 0320 	orr.w	r3, r3, #32
 80049f8:	b25b      	sxtb	r3, r3
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	733b      	strb	r3, [r7, #12]
	int ret = h->platform.transfer(h->pIO, (char*)rxBuff, (const char*)txBuff, length);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	69dc      	ldr	r4, [r3, #28]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6898      	ldr	r0, [r3, #8]
 8004a06:	6a3b      	ldr	r3, [r7, #32]
 8004a08:	f107 020c 	add.w	r2, r7, #12
 8004a0c:	f107 0110 	add.w	r1, r7, #16
 8004a10:	47a0      	blx	r4
 8004a12:	61f8      	str	r0, [r7, #28]

	if ( ret != 0 )
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <L6474_GetParamCommand+0xa4>
		return errcINTERNAL;
 8004a1a:	f06f 0303 	mvn.w	r3, #3
 8004a1e:	e056      	b.n	8004ace <L6474_GetParamCommand+0x152>

	int res = errcNONE;
 8004a20:	2300      	movs	r3, #0
 8004a22:	627b      	str	r3, [r7, #36]	@ 0x24
	unsigned int tmp = 0;
 8004a24:	2300      	movs	r3, #0
 8004a26:	61bb      	str	r3, [r7, #24]
	switch (L6474_Parameters[addr].length)
 8004a28:	4a2b      	ldr	r2, [pc, #172]	@ (8004ad8 <L6474_GetParamCommand+0x15c>)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	011b      	lsls	r3, r3, #4
 8004a2e:	4413      	add	r3, r2
 8004a30:	3302      	adds	r3, #2
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	2b03      	cmp	r3, #3
 8004a36:	d021      	beq.n	8004a7c <L6474_GetParamCommand+0x100>
 8004a38:	2b03      	cmp	r3, #3
 8004a3a:	dc31      	bgt.n	8004aa0 <L6474_GetParamCommand+0x124>
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d002      	beq.n	8004a46 <L6474_GetParamCommand+0xca>
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d00c      	beq.n	8004a5e <L6474_GetParamCommand+0xe2>
 8004a44:	e02c      	b.n	8004aa0 <L6474_GetParamCommand+0x124>
	{
	    case 1:
	    	tmp = ( rxBuff[1] << 0 );
 8004a46:	7c7b      	ldrb	r3, [r7, #17]
 8004a48:	61bb      	str	r3, [r7, #24]
	    	res = tmp & L6474_Parameters[addr].mask;
 8004a4a:	4a23      	ldr	r2, [pc, #140]	@ (8004ad8 <L6474_GetParamCommand+0x15c>)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	011b      	lsls	r3, r3, #4
 8004a50:	4413      	add	r3, r2
 8004a52:	3304      	adds	r3, #4
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	627b      	str	r3, [r7, #36]	@ 0x24
	    	break;
 8004a5c:	e023      	b.n	8004aa6 <L6474_GetParamCommand+0x12a>
	    case 2:
	    	tmp = ( rxBuff[1] << 8 | rxBuff[2] << 0 );
 8004a5e:	7c7b      	ldrb	r3, [r7, #17]
 8004a60:	021b      	lsls	r3, r3, #8
 8004a62:	7cba      	ldrb	r2, [r7, #18]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	61bb      	str	r3, [r7, #24]
	    	res = tmp & L6474_Parameters[addr].mask;
 8004a68:	4a1b      	ldr	r2, [pc, #108]	@ (8004ad8 <L6474_GetParamCommand+0x15c>)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	011b      	lsls	r3, r3, #4
 8004a6e:	4413      	add	r3, r2
 8004a70:	3304      	adds	r3, #4
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	4013      	ands	r3, r2
 8004a78:	627b      	str	r3, [r7, #36]	@ 0x24
	    	//res = ( ( tmp & 0xFF00 ) >> 8 ) | ( ( tmp & 0x00FF ) << 8 );
	    	break;
 8004a7a:	e014      	b.n	8004aa6 <L6474_GetParamCommand+0x12a>
	    case 3:
	    	tmp = ( rxBuff[1] << 16 | rxBuff[2] << 8 | rxBuff[3] << 0 );
 8004a7c:	7c7b      	ldrb	r3, [r7, #17]
 8004a7e:	041a      	lsls	r2, r3, #16
 8004a80:	7cbb      	ldrb	r3, [r7, #18]
 8004a82:	021b      	lsls	r3, r3, #8
 8004a84:	4313      	orrs	r3, r2
 8004a86:	7cfa      	ldrb	r2, [r7, #19]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	61bb      	str	r3, [r7, #24]
	    	res = tmp & L6474_Parameters[addr].mask;
 8004a8c:	4a12      	ldr	r2, [pc, #72]	@ (8004ad8 <L6474_GetParamCommand+0x15c>)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	011b      	lsls	r3, r3, #4
 8004a92:	4413      	add	r3, r2
 8004a94:	3304      	adds	r3, #4
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	627b      	str	r3, [r7, #36]	@ 0x24
	    	//res = ( ( tmp & 0xFF0000 ) >> 16 ) | ( ( tmp & 0x00FF00 ) << 0 ) | ( ( tmp & 0x0000FF ) << 16 );
	    	break;
 8004a9e:	e002      	b.n	8004aa6 <L6474_GetParamCommand+0x12a>
	    default:
	    	return errcINTERNAL;
 8004aa0:	f06f 0303 	mvn.w	r3, #3
 8004aa4:	e013      	b.n	8004ace <L6474_GetParamCommand+0x152>
	}

	int opres = 0;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	617b      	str	r3, [r7, #20]
	if ( ( opres = L6474_GetStatusCommand(h) ) < 0 )
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7ff ff22 	bl	80048f4 <L6474_GetStatusCommand>
 8004ab0:	6178      	str	r0, [r7, #20]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	da01      	bge.n	8004abc <L6474_GetParamCommand+0x140>
		return opres;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	e008      	b.n	8004ace <L6474_GetParamCommand+0x152>

	if ( (opres & ( STATUS_NOTPERF_CMD_MASK | STATUS_WRONG_CMD_MASK ) ) != 0 )
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <L6474_GetParamCommand+0x150>
		return errcDEVICE_STATE;
 8004ac6:	f06f 0305 	mvn.w	r3, #5
 8004aca:	e000      	b.n	8004ace <L6474_GetParamCommand+0x152>

	return res;
 8004acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	372c      	adds	r7, #44	@ 0x2c
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd90      	pop	{r4, r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	0801810c 	.word	0x0801810c

08004adc <L6474_SetParamCommand>:

// --------------------------------------------------------------------------------------------------------------------
static int L6474_SetParamCommand(L6474_Handle_t h, int addr, int value)
// --------------------------------------------------------------------------------------------------------------------
{
 8004adc:	b590      	push	{r4, r7, lr}
 8004ade:	b08b      	sub	sp, #44	@ 0x2c
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
	addr &= STEP_REG_RANGE_MASK;
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	f003 031f 	and.w	r3, r3, #31
 8004aee:	60bb      	str	r3, [r7, #8]
	if( L6474_Parameters[addr].defined == 0 )
 8004af0:	4a58      	ldr	r2, [pc, #352]	@ (8004c54 <L6474_SetParamCommand+0x178>)
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	4413      	add	r3, r2
 8004af8:	3301      	adds	r3, #1
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d102      	bne.n	8004b06 <L6474_SetParamCommand+0x2a>
		return errcINV_ARG;
 8004b00:	f04f 33ff 	mov.w	r3, #4294967295
 8004b04:	e0a2      	b.n	8004c4c <L6474_SetParamCommand+0x170>

	if( ( L6474_Parameters[addr].flags & ( afWRITE | afWRITE_HighZ ) ) == 0 )
 8004b06:	4a53      	ldr	r2, [pc, #332]	@ (8004c54 <L6474_SetParamCommand+0x178>)
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	4413      	add	r3, r2
 8004b0e:	330c      	adds	r3, #12
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	f003 0306 	and.w	r3, r3, #6
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d102      	bne.n	8004b20 <L6474_SetParamCommand+0x44>
		return errcFORBIDDEN;
 8004b1a:	f06f 0307 	mvn.w	r3, #7
 8004b1e:	e095      	b.n	8004c4c <L6474_SetParamCommand+0x170>

	if ( ( h->state == stRESET ) || ( ( h->state == stENABLED ) && ( ( L6474_Parameters[addr].flags & afWRITE_HighZ ) != 0 ) ) )
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00d      	beq.n	8004b44 <L6474_SetParamCommand+0x68>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d10c      	bne.n	8004b4a <L6474_SetParamCommand+0x6e>
 8004b30:	4a48      	ldr	r2, [pc, #288]	@ (8004c54 <L6474_SetParamCommand+0x178>)
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	011b      	lsls	r3, r3, #4
 8004b36:	4413      	add	r3, r2
 8004b38:	330c      	adds	r3, #12
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	f003 0304 	and.w	r3, r3, #4
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <L6474_SetParamCommand+0x6e>
		return errcINV_STATE;
 8004b44:	f06f 0302 	mvn.w	r3, #2
 8004b48:	e080      	b.n	8004c4c <L6474_SetParamCommand+0x170>

	int length  = L6474_Parameters[addr].length + STEP_CMD_SET_LENGTH;
 8004b4a:	4a42      	ldr	r2, [pc, #264]	@ (8004c54 <L6474_SetParamCommand+0x178>)
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	011b      	lsls	r3, r3, #4
 8004b50:	4413      	add	r3, r2
 8004b52:	3302      	adds	r3, #2
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	3301      	adds	r3, #1
 8004b58:	627b      	str	r3, [r7, #36]	@ 0x24
	if ( length > STEP_CMD_SET_MAX_PAYLOAD )
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	dd02      	ble.n	8004b66 <L6474_SetParamCommand+0x8a>
		return errcINTERNAL;
 8004b60:	f06f 0303 	mvn.w	r3, #3
 8004b64:	e072      	b.n	8004c4c <L6474_SetParamCommand+0x170>

	unsigned char rxBuff[STEP_CMD_SET_MAX_PAYLOAD] = { 0 };
 8004b66:	2300      	movs	r3, #0
 8004b68:	617b      	str	r3, [r7, #20]
	unsigned char txBuff[STEP_CMD_SET_MAX_PAYLOAD] = { 0 };
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	613b      	str	r3, [r7, #16]
	unsigned int  tmp = 0;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	623b      	str	r3, [r7, #32]

	txBuff[0] = STEP_CMD_SET_PREFIX | addr;
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	743b      	strb	r3, [r7, #16]

	switch (L6474_Parameters[addr].length)
 8004b78:	4a36      	ldr	r2, [pc, #216]	@ (8004c54 <L6474_SetParamCommand+0x178>)
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	011b      	lsls	r3, r3, #4
 8004b7e:	4413      	add	r3, r2
 8004b80:	3302      	adds	r3, #2
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	2b03      	cmp	r3, #3
 8004b86:	d024      	beq.n	8004bd2 <L6474_SetParamCommand+0xf6>
 8004b88:	2b03      	cmp	r3, #3
 8004b8a:	dc37      	bgt.n	8004bfc <L6474_SetParamCommand+0x120>
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d002      	beq.n	8004b96 <L6474_SetParamCommand+0xba>
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d00d      	beq.n	8004bb0 <L6474_SetParamCommand+0xd4>
 8004b94:	e032      	b.n	8004bfc <L6474_SetParamCommand+0x120>
	{
	    case 1:
	    	tmp = value & L6474_Parameters[addr].mask;
 8004b96:	4a2f      	ldr	r2, [pc, #188]	@ (8004c54 <L6474_SetParamCommand+0x178>)
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	4413      	add	r3, r2
 8004b9e:	3304      	adds	r3, #4
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	623b      	str	r3, [r7, #32]
	    	txBuff[1] = tmp >> 0;
 8004ba8:	6a3b      	ldr	r3, [r7, #32]
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	747b      	strb	r3, [r7, #17]
	    	break;
 8004bae:	e028      	b.n	8004c02 <L6474_SetParamCommand+0x126>
	    case 2:
	    	tmp = value & L6474_Parameters[addr].mask;
 8004bb0:	4a28      	ldr	r2, [pc, #160]	@ (8004c54 <L6474_SetParamCommand+0x178>)
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	011b      	lsls	r3, r3, #4
 8004bb6:	4413      	add	r3, r2
 8004bb8:	3304      	adds	r3, #4
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	623b      	str	r3, [r7, #32]
	    	txBuff[1] = tmp >> 8;
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	0a1b      	lsrs	r3, r3, #8
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	747b      	strb	r3, [r7, #17]
	    	txBuff[2] = tmp >> 0;
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	74bb      	strb	r3, [r7, #18]
	    	break;
 8004bd0:	e017      	b.n	8004c02 <L6474_SetParamCommand+0x126>
	    case 3:
	    	tmp = value & L6474_Parameters[addr].mask;
 8004bd2:	4a20      	ldr	r2, [pc, #128]	@ (8004c54 <L6474_SetParamCommand+0x178>)
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	011b      	lsls	r3, r3, #4
 8004bd8:	4413      	add	r3, r2
 8004bda:	3304      	adds	r3, #4
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4013      	ands	r3, r2
 8004be2:	623b      	str	r3, [r7, #32]
	    	txBuff[1] = tmp >> 16;
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	0c1b      	lsrs	r3, r3, #16
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	747b      	strb	r3, [r7, #17]
	    	txBuff[2] = tmp >> 8;
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	0a1b      	lsrs	r3, r3, #8
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	74bb      	strb	r3, [r7, #18]
	    	txBuff[3] = tmp >> 0;
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	74fb      	strb	r3, [r7, #19]
	    	break;
 8004bfa:	e002      	b.n	8004c02 <L6474_SetParamCommand+0x126>
	    default:
	    	return errcINTERNAL;
 8004bfc:	f06f 0303 	mvn.w	r3, #3
 8004c00:	e024      	b.n	8004c4c <L6474_SetParamCommand+0x170>
	}

	int ret = h->platform.transfer(h->pIO, (char*)rxBuff, (const char*)txBuff, length);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	69dc      	ldr	r4, [r3, #28]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6898      	ldr	r0, [r3, #8]
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0c:	f107 0210 	add.w	r2, r7, #16
 8004c10:	f107 0114 	add.w	r1, r7, #20
 8004c14:	47a0      	blx	r4
 8004c16:	61f8      	str	r0, [r7, #28]

	if ( ret != 0 )
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d002      	beq.n	8004c24 <L6474_SetParamCommand+0x148>
		return errcINTERNAL;
 8004c1e:	f06f 0303 	mvn.w	r3, #3
 8004c22:	e013      	b.n	8004c4c <L6474_SetParamCommand+0x170>

	int res = 0;
 8004c24:	2300      	movs	r3, #0
 8004c26:	61bb      	str	r3, [r7, #24]
	if ( ( res = L6474_GetStatusCommand(h) ) < 0 )
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f7ff fe63 	bl	80048f4 <L6474_GetStatusCommand>
 8004c2e:	61b8      	str	r0, [r7, #24]
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	da01      	bge.n	8004c3a <L6474_SetParamCommand+0x15e>
		return res;
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	e008      	b.n	8004c4c <L6474_SetParamCommand+0x170>

	if ( ( res & ( STATUS_NOTPERF_CMD_MASK | STATUS_WRONG_CMD_MASK ) ) != 0 )
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d002      	beq.n	8004c4a <L6474_SetParamCommand+0x16e>
		return errcDEVICE_STATE;
 8004c44:	f06f 0305 	mvn.w	r3, #5
 8004c48:	e000      	b.n	8004c4c <L6474_SetParamCommand+0x170>

	return errcNONE;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	372c      	adds	r7, #44	@ 0x2c
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd90      	pop	{r4, r7, pc}
 8004c54:	0801810c 	.word	0x0801810c

08004c58 <L6474_EnableCommand>:

// --------------------------------------------------------------------------------------------------------------------
static int L6474_EnableCommand(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 8004c58:	b590      	push	{r4, r7, lr}
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
	if ( h->state == stRESET )
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d102      	bne.n	8004c6e <L6474_EnableCommand+0x16>
		return errcINV_STATE;
 8004c68:	f06f 0302 	mvn.w	r3, #2
 8004c6c:	e033      	b.n	8004cd6 <L6474_EnableCommand+0x7e>

	if ( h->state == stENABLED )
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d101      	bne.n	8004c7a <L6474_EnableCommand+0x22>
		return errcNONE;
 8004c76:	2300      	movs	r3, #0
 8004c78:	e02d      	b.n	8004cd6 <L6474_EnableCommand+0x7e>

	int length = STEP_CMD_ENA_LENGTH;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	617b      	str	r3, [r7, #20]

	unsigned char rxBuff[STEP_CMD_ENA_LENGTH] = { 0 };
 8004c7e:	2300      	movs	r3, #0
 8004c80:	733b      	strb	r3, [r7, #12]
	unsigned char txBuff[STEP_CMD_ENA_LENGTH] = { 0 };
 8004c82:	2300      	movs	r3, #0
 8004c84:	723b      	strb	r3, [r7, #8]

	txBuff[0] = STEP_CMD_ENA_PREFIX | 0;
 8004c86:	23b8      	movs	r3, #184	@ 0xb8
 8004c88:	723b      	strb	r3, [r7, #8]
	int ret = h->platform.transfer(h->pIO, (char*)rxBuff, (const char*)txBuff, length);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	69dc      	ldr	r4, [r3, #28]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6898      	ldr	r0, [r3, #8]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	f107 0208 	add.w	r2, r7, #8
 8004c98:	f107 010c 	add.w	r1, r7, #12
 8004c9c:	47a0      	blx	r4
 8004c9e:	6138      	str	r0, [r7, #16]

	if ( ret != 0 )
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <L6474_EnableCommand+0x54>
		return errcINTERNAL;
 8004ca6:	f06f 0303 	mvn.w	r3, #3
 8004caa:	e014      	b.n	8004cd6 <L6474_EnableCommand+0x7e>

	if ( ( ret = L6474_GetStatusCommand(h) ) < 0 )
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7ff fe21 	bl	80048f4 <L6474_GetStatusCommand>
 8004cb2:	6138      	str	r0, [r7, #16]
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	da01      	bge.n	8004cbe <L6474_EnableCommand+0x66>
		return ret;
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	e00b      	b.n	8004cd6 <L6474_EnableCommand+0x7e>

	if ( ( ret & ( STATUS_NOTPERF_CMD_MASK | STATUS_WRONG_CMD_MASK ) ) != 0 )
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d002      	beq.n	8004cce <L6474_EnableCommand+0x76>
		return errcDEVICE_STATE;
 8004cc8:	f06f 0305 	mvn.w	r3, #5
 8004ccc:	e003      	b.n	8004cd6 <L6474_EnableCommand+0x7e>

	h->state = stENABLED;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2202      	movs	r2, #2
 8004cd2:	701a      	strb	r2, [r3, #0]
	return errcNONE;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	371c      	adds	r7, #28
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd90      	pop	{r4, r7, pc}

08004cde <L6474_DisableCommand>:

// --------------------------------------------------------------------------------------------------------------------
static int L6474_DisableCommand(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 8004cde:	b590      	push	{r4, r7, lr}
 8004ce0:	b087      	sub	sp, #28
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
	if ( h->state == stRESET )
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d102      	bne.n	8004cf4 <L6474_DisableCommand+0x16>
		return errcINV_STATE;
 8004cee:	f06f 0302 	mvn.w	r3, #2
 8004cf2:	e036      	b.n	8004d62 <L6474_DisableCommand+0x84>

	int length = STEP_CMD_DIS_LENGTH;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	617b      	str	r3, [r7, #20]

	unsigned char rxBuff[STEP_CMD_DIS_LENGTH] = { 0 };
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	733b      	strb	r3, [r7, #12]
	unsigned char txBuff[STEP_CMD_DIS_LENGTH] = { 0 };
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	723b      	strb	r3, [r7, #8]

	txBuff[0] = STEP_CMD_DIS_PREFIX | 0;
 8004d00:	23a8      	movs	r3, #168	@ 0xa8
 8004d02:	723b      	strb	r3, [r7, #8]
	int ret = h->platform.transfer(h->pIO, (char*)rxBuff, (const char*)txBuff, length);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	69dc      	ldr	r4, [r3, #28]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6898      	ldr	r0, [r3, #8]
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f107 0208 	add.w	r2, r7, #8
 8004d12:	f107 010c 	add.w	r1, r7, #12
 8004d16:	47a0      	blx	r4
 8004d18:	6138      	str	r0, [r7, #16]

	if ( ret != 0 )
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d002      	beq.n	8004d26 <L6474_DisableCommand+0x48>
		return errcINTERNAL;
 8004d20:	f06f 0303 	mvn.w	r3, #3
 8004d24:	e01d      	b.n	8004d62 <L6474_DisableCommand+0x84>

	if ( ( ret = L6474_GetStatusCommand(h) ) < 0 )
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7ff fde4 	bl	80048f4 <L6474_GetStatusCommand>
 8004d2c:	6138      	str	r0, [r7, #16]
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	da01      	bge.n	8004d38 <L6474_DisableCommand+0x5a>
		return ret;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	e014      	b.n	8004d62 <L6474_DisableCommand+0x84>

	if ( ( ret & ( STATUS_NOTPERF_CMD_MASK | STATUS_WRONG_CMD_MASK ) ) != 0 )
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <L6474_DisableCommand+0x6a>
		return errcDEVICE_STATE;
 8004d42:	f06f 0305 	mvn.w	r3, #5
 8004d46:	e00c      	b.n	8004d62 <L6474_DisableCommand+0x84>

	h->state   = stDISABLED;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	701a      	strb	r2, [r3, #0]
#if defined(LIBL6474_STEP_ASYNC) && ( LIBL6474_STEP_ASYNC == 1 )
	h->pending = 0;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	605a      	str	r2, [r3, #4]
	h->platform.cancelStep(h->pPWM);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	6912      	ldr	r2, [r2, #16]
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	4798      	blx	r3
#endif
	return errcNONE;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	371c      	adds	r7, #28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd90      	pop	{r4, r7, pc}

08004d6a <L6474_CreateInstance>:


// --------------------------------------------------------------------------------------------------------------------
L6474_Handle_t L6474_CreateInstance(L6474x_Platform_t* p, void* pIO, void* pGPO, void* pPWM)
// --------------------------------------------------------------------------------------------------------------------
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b086      	sub	sp, #24
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	60f8      	str	r0, [r7, #12]
 8004d72:	60b9      	str	r1, [r7, #8]
 8004d74:	607a      	str	r2, [r7, #4]
 8004d76:	603b      	str	r3, [r7, #0]
	if ( p == 0 )
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <L6474_CreateInstance+0x18>
		return 0;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	e05c      	b.n	8004e3c <L6474_CreateInstance+0xd2>

	if ( ( p->reset == 0 ) || ( p->malloc == 0 ) || (p->free == 0) || (p->sleep == 0) || ( p->transfer == 0 ) )
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00f      	beq.n	8004daa <L6474_CreateInstance+0x40>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00b      	beq.n	8004daa <L6474_CreateInstance+0x40>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d007      	beq.n	8004daa <L6474_CreateInstance+0x40>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <L6474_CreateInstance+0x40>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <L6474_CreateInstance+0x44>
		return 0;
 8004daa:	2300      	movs	r3, #0
 8004dac:	e046      	b.n	8004e3c <L6474_CreateInstance+0xd2>
	if ( p->getFlag == 0 )
		return 0;
#endif

#if defined(LIBL6474_STEP_ASYNC) && ( LIBL6474_STEP_ASYNC == 1 )
	if ( ( p->cancelStep == 0 ) || ( p->stepAsync == 0 ) )
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <L6474_CreateInstance+0x54>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <L6474_CreateInstance+0x58>
		return 0;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	e03c      	b.n	8004e3c <L6474_CreateInstance+0xd2>
#else
	if ( p->step == 0 )
		return 0;
#endif

	L6474_Handle_t h = p->malloc(sizeof(struct L6474_Handle));
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2030      	movs	r0, #48	@ 0x30
 8004dc8:	4798      	blx	r3
 8004dca:	6178      	str	r0, [r7, #20]
	if ( h == 0 )
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <L6474_CreateInstance+0x6c>
		return 0;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	e032      	b.n	8004e3c <L6474_CreateInstance+0xd2>

	h->pGPO                = pGPO;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	60da      	str	r2, [r3, #12]
	h->pIO                 = pIO;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	609a      	str	r2, [r3, #8]
	h->pPWM                = pPWM;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	683a      	ldr	r2, [r7, #0]
 8004de6:	611a      	str	r2, [r3, #16]
#if defined(LIBL6474_STEP_ASYNC) && ( LIBL6474_STEP_ASYNC == 1 )
	h->platform.cancelStep = p->cancelStep;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	699a      	ldr	r2, [r3, #24]
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	62da      	str	r2, [r3, #44]	@ 0x2c
	h->platform.stepAsync  = p->stepAsync;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	695a      	ldr	r2, [r3, #20]
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	629a      	str	r2, [r3, #40]	@ 0x28
#else
	h->platform.step       = p->step;
#endif
	h->platform.free       = p->free;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	619a      	str	r2, [r3, #24]
	h->platform.malloc     = p->malloc;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	615a      	str	r2, [r3, #20]
	h->platform.reset      = p->reset;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	68da      	ldr	r2, [r3, #12]
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	621a      	str	r2, [r3, #32]
	h->platform.sleep      = p->sleep;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	691a      	ldr	r2, [r3, #16]
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	625a      	str	r2, [r3, #36]	@ 0x24
	h->platform.transfer   = p->transfer;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	61da      	str	r2, [r3, #28]
	h->pending             = 0;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	2200      	movs	r2, #0
 8004e24:	605a      	str	r2, [r3, #4]
	h->state               = stRESET;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	701a      	strb	r2, [r3, #0]

	h->platform.reset(h->pGPO, 1);
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	68d2      	ldr	r2, [r2, #12]
 8004e34:	2101      	movs	r1, #1
 8004e36:	4610      	mov	r0, r2
 8004e38:	4798      	blx	r3

	(void)L6474_NopCommand;
	return h;
 8004e3a:	697b      	ldr	r3, [r7, #20]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <L6474_ResetStandBy>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_ResetStandBy(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
	if ( h == 0 )
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d102      	bne.n	8004e58 <L6474_ResetStandBy+0x14>
		return errcNULL_ARG;
 8004e52:	f06f 0301 	mvn.w	r3, #1
 8004e56:	e040      	b.n	8004eda <L6474_ResetStandBy+0x96>

	if ( L6474_HelperLock(h) != 0 )
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7ff fd25 	bl	80048a8 <L6474_HelperLock>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d002      	beq.n	8004e6a <L6474_ResetStandBy+0x26>
		return errcLOCKING;
 8004e64:	f06f 0304 	mvn.w	r3, #4
 8004e68:	e037      	b.n	8004eda <L6474_ResetStandBy+0x96>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7ff fd42 	bl	80048f4 <L6474_GetStatusCommand>

	if ( h->state == stENABLED )
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d11e      	bne.n	8004eb6 <L6474_ResetStandBy+0x72>
	{
#if defined(LIBL6474_STEP_ASYNC) && ( LIBL6474_STEP_ASYNC == 1 )
		if ( h->pending != 0 )
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00c      	beq.n	8004e9a <L6474_ResetStandBy+0x56>
		{
			h->platform.cancelStep(h->pPWM);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6912      	ldr	r2, [r2, #16]
 8004e88:	4610      	mov	r0, r2
 8004e8a:	4798      	blx	r3
			h->platform.sleep(IN_MILLISEC(1));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e90:	2001      	movs	r0, #1
 8004e92:	4798      	blx	r3
			h->pending = 0;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	605a      	str	r2, [r3, #4]
		}
#endif

		int ret = 0;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60fb      	str	r3, [r7, #12]
		if ( ( ret = L6474_DisableCommand(h) ) != 0 )
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7ff ff1d 	bl	8004cde <L6474_DisableCommand>
 8004ea4:	60f8      	str	r0, [r7, #12]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d004      	beq.n	8004eb6 <L6474_ResetStandBy+0x72>
		{
			L6474_HelperUnlock(h);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7ff fd06 	bl	80048be <L6474_HelperUnlock>
			return ret;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	e011      	b.n	8004eda <L6474_ResetStandBy+0x96>
		}
	}

	h->platform.reset(h->pGPO, 1);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	68d2      	ldr	r2, [r2, #12]
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	4610      	mov	r0, r2
 8004ec2:	4798      	blx	r3
	h->state = stRESET;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	701a      	strb	r2, [r3, #0]

	h->platform.sleep(IN_MILLISEC(1));
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ece:	2001      	movs	r0, #1
 8004ed0:	4798      	blx	r3
	L6474_HelperUnlock(h);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7ff fcf3 	bl	80048be <L6474_HelperUnlock>

	return errcNONE;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <L6474_Initialize>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_Initialize(L6474_Handle_t h, L6474_BaseParameter_t* p)
// --------------------------------------------------------------------------------------------------------------------
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b084      	sub	sp, #16
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	6039      	str	r1, [r7, #0]
	int val = 0;
 8004eec:	2300      	movs	r3, #0
 8004eee:	60fb      	str	r3, [r7, #12]

	if ( h == 0 || p == 0 )
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d002      	beq.n	8004efc <L6474_Initialize+0x1a>
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d102      	bne.n	8004f02 <L6474_Initialize+0x20>
		return errcNULL_ARG;
 8004efc:	f06f 0301 	mvn.w	r3, #1
 8004f00:	e130      	b.n	8005164 <L6474_Initialize+0x282>

	if ( L6474_HelperLock(h) != 0 )
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7ff fcd0 	bl	80048a8 <L6474_HelperLock>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <L6474_Initialize+0x32>
		return errcLOCKING;
 8004f0e:	f06f 0304 	mvn.w	r3, #4
 8004f12:	e127      	b.n	8005164 <L6474_Initialize+0x282>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7ff fced 	bl	80048f4 <L6474_GetStatusCommand>

	if ( h->state != stRESET )
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00b      	beq.n	8004f3a <L6474_Initialize+0x58>
	{
		if ( ( val = L6474_ResetStandBy(h) ) != 0 )
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7ff ff8e 	bl	8004e44 <L6474_ResetStandBy>
 8004f28:	60f8      	str	r0, [r7, #12]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d004      	beq.n	8004f3a <L6474_Initialize+0x58>
		{
			L6474_HelperUnlock(h);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7ff fcc4 	bl	80048be <L6474_HelperUnlock>
			return val;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	e114      	b.n	8005164 <L6474_Initialize+0x282>
		}
	}

	h->platform.reset(h->pGPO, 0);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	68d2      	ldr	r2, [r2, #12]
 8004f42:	2100      	movs	r1, #0
 8004f44:	4610      	mov	r0, r2
 8004f46:	4798      	blx	r3
	h->state = stDISABLED;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	701a      	strb	r2, [r3, #0]

	h->platform.sleep(IN_MILLISEC(10));
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f52:	200a      	movs	r0, #10
 8004f54:	4798      	blx	r3

	//Now we have to write the configuration register
	unsigned int CONFIG = 0x2E88; // reset default value
 8004f56:	f642 6388 	movw	r3, #11912	@ 0x2e88
 8004f5a:	60bb      	str	r3, [r7, #8]
	CONFIG &= ~0xF; // disables all clock outputs and selects internal oscillator
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f023 030f 	bic.w	r3, r3, #15
 8004f62:	60bb      	str	r3, [r7, #8]

#if defined(LIBL6474_DISABLE_OCD) && ( LIBL6474_DISABLE_OCD == 1 )
	CONFIG &= ~(1 << 7); // disable the OCD
#endif

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_CONFIG, CONFIG) ) != 0 )
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	461a      	mov	r2, r3
 8004f68:	2118      	movs	r1, #24
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7ff fdb6 	bl	8004adc <L6474_SetParamCommand>
 8004f70:	60f8      	str	r0, [r7, #12]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00e      	beq.n	8004f96 <L6474_Initialize+0xb4>
	{
		h->platform.reset(h->pGPO, 1);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	68d2      	ldr	r2, [r2, #12]
 8004f80:	2101      	movs	r1, #1
 8004f82:	4610      	mov	r0, r2
 8004f84:	4798      	blx	r3
		h->state = stRESET;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f7ff fc96 	bl	80048be <L6474_HelperUnlock>
		return val;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	e0e6      	b.n	8005164 <L6474_Initialize+0x282>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_OCD_TH, p->OcdTh) ) != 0 )
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	785b      	ldrb	r3, [r3, #1]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	2113      	movs	r1, #19
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7ff fd9c 	bl	8004adc <L6474_SetParamCommand>
 8004fa4:	60f8      	str	r0, [r7, #12]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00e      	beq.n	8004fca <L6474_Initialize+0xe8>
	{
		h->platform.reset(h->pGPO, 1);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	68d2      	ldr	r2, [r2, #12]
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	4610      	mov	r0, r2
 8004fb8:	4798      	blx	r3
		h->state = stRESET;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f7ff fc7c 	bl	80048be <L6474_HelperUnlock>
		return val;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	e0cc      	b.n	8005164 <L6474_Initialize+0x282>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_TVAL, p->TorqueVal) ) != 0 )
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	791b      	ldrb	r3, [r3, #4]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	2109      	movs	r1, #9
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7ff fd82 	bl	8004adc <L6474_SetParamCommand>
 8004fd8:	60f8      	str	r0, [r7, #12]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00e      	beq.n	8004ffe <L6474_Initialize+0x11c>
	{
		h->platform.reset(h->pGPO, 1);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	68d2      	ldr	r2, [r2, #12]
 8004fe8:	2101      	movs	r1, #1
 8004fea:	4610      	mov	r0, r2
 8004fec:	4798      	blx	r3
		h->state = stRESET;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f7ff fc62 	bl	80048be <L6474_HelperUnlock>
		return val;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	e0b2      	b.n	8005164 <L6474_Initialize+0x282>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_TOFF_MIN, p->TimeOffMin) ) != 0 )
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	78db      	ldrb	r3, [r3, #3]
 8005002:	461a      	mov	r2, r3
 8005004:	2110      	movs	r1, #16
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7ff fd68 	bl	8004adc <L6474_SetParamCommand>
 800500c:	60f8      	str	r0, [r7, #12]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00e      	beq.n	8005032 <L6474_Initialize+0x150>
	{
		h->platform.reset(h->pGPO, 1);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	68d2      	ldr	r2, [r2, #12]
 800501c:	2101      	movs	r1, #1
 800501e:	4610      	mov	r0, r2
 8005020:	4798      	blx	r3
		h->state = stRESET;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7ff fc48 	bl	80048be <L6474_HelperUnlock>
		return val;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	e098      	b.n	8005164 <L6474_Initialize+0x282>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_TON_MIN, p->TimeOnMin) ) != 0 )
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	789b      	ldrb	r3, [r3, #2]
 8005036:	461a      	mov	r2, r3
 8005038:	210f      	movs	r1, #15
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7ff fd4e 	bl	8004adc <L6474_SetParamCommand>
 8005040:	60f8      	str	r0, [r7, #12]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00e      	beq.n	8005066 <L6474_Initialize+0x184>
	{
		h->platform.reset(h->pGPO, 1);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	68d2      	ldr	r2, [r2, #12]
 8005050:	2101      	movs	r1, #1
 8005052:	4610      	mov	r0, r2
 8005054:	4798      	blx	r3
		h->state = stRESET;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f7ff fc2e 	bl	80048be <L6474_HelperUnlock>
		return val;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	e07e      	b.n	8005164 <L6474_Initialize+0x282>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_T_FAST, p->TFast) ) != 0 )
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	795b      	ldrb	r3, [r3, #5]
 800506a:	461a      	mov	r2, r3
 800506c:	210e      	movs	r1, #14
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7ff fd34 	bl	8004adc <L6474_SetParamCommand>
 8005074:	60f8      	str	r0, [r7, #12]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00e      	beq.n	800509a <L6474_Initialize+0x1b8>
	{
		h->platform.reset(h->pGPO, 1);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	68d2      	ldr	r2, [r2, #12]
 8005084:	2101      	movs	r1, #1
 8005086:	4610      	mov	r0, r2
 8005088:	4798      	blx	r3
		h->state = stRESET;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f7ff fc14 	bl	80048be <L6474_HelperUnlock>
		return val;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	e064      	b.n	8005164 <L6474_Initialize+0x282>
	}

	if ( ( val = L6474_SetStepMode(h, p->stepMode) ) != 0 )
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	4619      	mov	r1, r3
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f863 	bl	800516c <L6474_SetStepMode>
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00e      	beq.n	80050cc <L6474_Initialize+0x1ea>
	{
		h->platform.reset(h->pGPO, 1);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	68d2      	ldr	r2, [r2, #12]
 80050b6:	2101      	movs	r1, #1
 80050b8:	4610      	mov	r0, r2
 80050ba:	4798      	blx	r3
		h->state = stRESET;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7ff fbfb 	bl	80048be <L6474_HelperUnlock>
		return val;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	e04b      	b.n	8005164 <L6474_Initialize+0x282>
	}

	// enable all alarms
	if ( ( val = L6474_SetParamCommand(h, STEP_REG_ALARM_EN, STEP_MASK_ALARM_EN) ) != 0 )
 80050cc:	22ff      	movs	r2, #255	@ 0xff
 80050ce:	2117      	movs	r1, #23
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7ff fd03 	bl	8004adc <L6474_SetParamCommand>
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00e      	beq.n	80050fc <L6474_Initialize+0x21a>
	{
		h->platform.reset(h->pGPO, 1);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	68d2      	ldr	r2, [r2, #12]
 80050e6:	2101      	movs	r1, #1
 80050e8:	4610      	mov	r0, r2
 80050ea:	4798      	blx	r3
		h->state = stRESET;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7ff fbe3 	bl	80048be <L6474_HelperUnlock>
		return val;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	e033      	b.n	8005164 <L6474_Initialize+0x282>
	}

	if ( ( val = L6474_DisableCommand(h) ) != 0 )
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f7ff fdee 	bl	8004cde <L6474_DisableCommand>
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00e      	beq.n	8005128 <L6474_Initialize+0x246>
	{
		h->platform.reset(h->pGPO, 1);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	68d2      	ldr	r2, [r2, #12]
 8005112:	2101      	movs	r1, #1
 8005114:	4610      	mov	r0, r2
 8005116:	4798      	blx	r3
		h->state = stRESET;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7ff fbcd 	bl	80048be <L6474_HelperUnlock>
		return val;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	e01d      	b.n	8005164 <L6474_Initialize+0x282>
	}

	// now it should not fail when reading status register!
	if ( ( val = L6474_GetStatusCommand(h) ) < 0 )
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7ff fbe3 	bl	80048f4 <L6474_GetStatusCommand>
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2b00      	cmp	r3, #0
 8005134:	da0e      	bge.n	8005154 <L6474_Initialize+0x272>
	{
		h->platform.reset(h->pGPO, 1);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	68d2      	ldr	r2, [r2, #12]
 800513e:	2101      	movs	r1, #1
 8005140:	4610      	mov	r0, r2
 8005142:	4798      	blx	r3
		h->state = stRESET;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7ff fbb7 	bl	80048be <L6474_HelperUnlock>
		return val;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	e007      	b.n	8005164 <L6474_Initialize+0x282>
	}

	L6474_GetParamCommand(h, STEP_REG_CONFIG);
 8005154:	2118      	movs	r1, #24
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7ff fc10 	bl	800497c <L6474_GetParamCommand>

	L6474_HelperUnlock(h);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f7ff fbae 	bl	80048be <L6474_HelperUnlock>
	return errcNONE;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <L6474_SetStepMode>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_SetStepMode(L6474_Handle_t h, L6474x_StepMode_t mode)
// --------------------------------------------------------------------------------------------------------------------
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	460b      	mov	r3, r1
 8005176:	70fb      	strb	r3, [r7, #3]
	int val = 0;
 8005178:	2300      	movs	r3, #0
 800517a:	60fb      	str	r3, [r7, #12]

	if ( h == 0 )
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d102      	bne.n	8005188 <L6474_SetStepMode+0x1c>
		return errcNULL_ARG;
 8005182:	f06f 0301 	mvn.w	r3, #1
 8005186:	e032      	b.n	80051ee <L6474_SetStepMode+0x82>

	if ( mode > smMICRO16 )
 8005188:	78fb      	ldrb	r3, [r7, #3]
 800518a:	2b04      	cmp	r3, #4
 800518c:	d902      	bls.n	8005194 <L6474_SetStepMode+0x28>
		return errcINV_ARG;
 800518e:	f04f 33ff 	mov.w	r3, #4294967295
 8005192:	e02c      	b.n	80051ee <L6474_SetStepMode+0x82>

	// set this bit. is described in the spec.
	mode |= ( 1 << 3 );
 8005194:	78fb      	ldrb	r3, [r7, #3]
 8005196:	f043 0308 	orr.w	r3, r3, #8
 800519a:	70fb      	strb	r3, [r7, #3]

	if ( L6474_HelperLock(h) != 0 )
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f7ff fb83 	bl	80048a8 <L6474_HelperLock>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d002      	beq.n	80051ae <L6474_SetStepMode+0x42>
		return errcLOCKING;
 80051a8:	f06f 0304 	mvn.w	r3, #4
 80051ac:	e01f      	b.n	80051ee <L6474_SetStepMode+0x82>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7ff fba0 	bl	80048f4 <L6474_GetStatusCommand>

	if ( h->state == stRESET )
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d105      	bne.n	80051c8 <L6474_SetStepMode+0x5c>
	{
		L6474_HelperUnlock(h);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f7ff fb7e 	bl	80048be <L6474_HelperUnlock>
		return errcINV_STATE;
 80051c2:	f06f 0302 	mvn.w	r3, #2
 80051c6:	e012      	b.n	80051ee <L6474_SetStepMode+0x82>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_STEP_MODE, ( ( mode & STEP_MASK_STEP_MODE ) << STEP_OFFSET_STEP_MODE ) ) ) != 0 )
 80051c8:	78fb      	ldrb	r3, [r7, #3]
 80051ca:	461a      	mov	r2, r3
 80051cc:	2116      	movs	r1, #22
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7ff fc84 	bl	8004adc <L6474_SetParamCommand>
 80051d4:	60f8      	str	r0, [r7, #12]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d004      	beq.n	80051e6 <L6474_SetStepMode+0x7a>
	{
		L6474_HelperUnlock(h);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7ff fb6e 	bl	80048be <L6474_HelperUnlock>
		return val;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	e003      	b.n	80051ee <L6474_SetStepMode+0x82>
	}

	L6474_HelperUnlock(h);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7ff fb69 	bl	80048be <L6474_HelperUnlock>
	return errcNONE;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <L6474_SetPowerOutputs>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_SetPowerOutputs(L6474_Handle_t h, int ena)
// --------------------------------------------------------------------------------------------------------------------
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b084      	sub	sp, #16
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	6039      	str	r1, [r7, #0]
	int val = 0;
 8005200:	2300      	movs	r3, #0
 8005202:	60fb      	str	r3, [r7, #12]

	if ( h == 0 )
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d102      	bne.n	8005210 <L6474_SetPowerOutputs+0x1a>
		return errcNULL_ARG;
 800520a:	f06f 0301 	mvn.w	r3, #1
 800520e:	e02e      	b.n	800526e <L6474_SetPowerOutputs+0x78>

	if ( L6474_HelperLock(h) != 0 )
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f7ff fb49 	bl	80048a8 <L6474_HelperLock>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d002      	beq.n	8005222 <L6474_SetPowerOutputs+0x2c>
		return errcLOCKING;
 800521c:	f06f 0304 	mvn.w	r3, #4
 8005220:	e025      	b.n	800526e <L6474_SetPowerOutputs+0x78>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7ff fb66 	bl	80048f4 <L6474_GetStatusCommand>

	if ( h->state == stRESET )
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d105      	bne.n	800523c <L6474_SetPowerOutputs+0x46>
	{
		L6474_HelperUnlock(h);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f7ff fb44 	bl	80048be <L6474_HelperUnlock>
		return errcINV_STATE;
 8005236:	f06f 0302 	mvn.w	r3, #2
 800523a:	e018      	b.n	800526e <L6474_SetPowerOutputs+0x78>
	}

	if ( ( val = ( ( ( !!ena ) == 0 ) ? L6474_DisableCommand(h) : L6474_EnableCommand(h) ) ) != 0 )
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d104      	bne.n	800524c <L6474_SetPowerOutputs+0x56>
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7ff fd4b 	bl	8004cde <L6474_DisableCommand>
 8005248:	4603      	mov	r3, r0
 800524a:	e003      	b.n	8005254 <L6474_SetPowerOutputs+0x5e>
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff fd03 	bl	8004c58 <L6474_EnableCommand>
 8005252:	4603      	mov	r3, r0
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d004      	beq.n	8005266 <L6474_SetPowerOutputs+0x70>
	{
		L6474_HelperUnlock(h);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7ff fb2e 	bl	80048be <L6474_HelperUnlock>
		return val;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	e003      	b.n	800526e <L6474_SetPowerOutputs+0x78>
	}

	L6474_HelperUnlock(h);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7ff fb29 	bl	80048be <L6474_HelperUnlock>
	return errcNONE;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <L6474_GetAbsolutePosition>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_GetAbsolutePosition(L6474_Handle_t h, int* position)
// --------------------------------------------------------------------------------------------------------------------
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b084      	sub	sp, #16
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
 800527e:	6039      	str	r1, [r7, #0]
	int val = 0;
 8005280:	2300      	movs	r3, #0
 8005282:	60fb      	str	r3, [r7, #12]

	if ( h == 0 || position == 0 )
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d002      	beq.n	8005290 <L6474_GetAbsolutePosition+0x1a>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d102      	bne.n	8005296 <L6474_GetAbsolutePosition+0x20>
		return errcNULL_ARG;
 8005290:	f06f 0301 	mvn.w	r3, #1
 8005294:	e034      	b.n	8005300 <L6474_GetAbsolutePosition+0x8a>

	if ( L6474_HelperLock(h) != 0 )
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7ff fb06 	bl	80048a8 <L6474_HelperLock>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <L6474_GetAbsolutePosition+0x32>
		return errcLOCKING;
 80052a2:	f06f 0304 	mvn.w	r3, #4
 80052a6:	e02b      	b.n	8005300 <L6474_GetAbsolutePosition+0x8a>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f7ff fb23 	bl	80048f4 <L6474_GetStatusCommand>

	if ( h->state == stRESET )
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d105      	bne.n	80052c2 <L6474_GetAbsolutePosition+0x4c>
	{
		L6474_HelperUnlock(h);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7ff fb01 	bl	80048be <L6474_HelperUnlock>
		return errcINV_STATE;
 80052bc:	f06f 0302 	mvn.w	r3, #2
 80052c0:	e01e      	b.n	8005300 <L6474_GetAbsolutePosition+0x8a>
	}

	if ( ( val = L6474_GetParamCommand(h, STEP_REG_ABS_POS) ) < 0 )
 80052c2:	2101      	movs	r1, #1
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f7ff fb59 	bl	800497c <L6474_GetParamCommand>
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	da04      	bge.n	80052dc <L6474_GetAbsolutePosition+0x66>
	{
		L6474_HelperUnlock(h);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7ff faf3 	bl	80048be <L6474_HelperUnlock>
		return val;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	e011      	b.n	8005300 <L6474_GetAbsolutePosition+0x8a>
	}

	if (val & HIGH_POS_BIT)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d005      	beq.n	80052f2 <L6474_GetAbsolutePosition+0x7c>
		val = -(((~val) + 1) & HIGH_POS_MASK);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	425b      	negs	r3, r3
 80052ea:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80052ee:	425b      	negs	r3, r3
 80052f0:	60fb      	str	r3, [r7, #12]
	*position = val;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	601a      	str	r2, [r3, #0]


	L6474_HelperUnlock(h);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7ff fae0 	bl	80048be <L6474_HelperUnlock>
	return errcNONE;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <L6474_SetAbsolutePosition>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_SetAbsolutePosition(L6474_Handle_t h, int position)
// --------------------------------------------------------------------------------------------------------------------
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
	int val = 0;
 8005312:	2300      	movs	r3, #0
 8005314:	60fb      	str	r3, [r7, #12]

	if ( h == 0 )
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d102      	bne.n	8005322 <L6474_SetAbsolutePosition+0x1a>
		return errcNULL_ARG;
 800531c:	f06f 0301 	mvn.w	r3, #1
 8005320:	e027      	b.n	8005372 <L6474_SetAbsolutePosition+0x6a>

	if ( L6474_HelperLock(h) != 0 )
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7ff fac0 	bl	80048a8 <L6474_HelperLock>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <L6474_SetAbsolutePosition+0x2c>
		return errcLOCKING;
 800532e:	f06f 0304 	mvn.w	r3, #4
 8005332:	e01e      	b.n	8005372 <L6474_SetAbsolutePosition+0x6a>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7ff fadd 	bl	80048f4 <L6474_GetStatusCommand>

	if ( h->state == stRESET )
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d105      	bne.n	800534e <L6474_SetAbsolutePosition+0x46>
	{
		L6474_HelperUnlock(h);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7ff fabb 	bl	80048be <L6474_HelperUnlock>
		return errcINV_STATE;
 8005348:	f06f 0302 	mvn.w	r3, #2
 800534c:	e011      	b.n	8005372 <L6474_SetAbsolutePosition+0x6a>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_ABS_POS, position) ) != 0 )
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	2101      	movs	r1, #1
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7ff fbc2 	bl	8004adc <L6474_SetParamCommand>
 8005358:	60f8      	str	r0, [r7, #12]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d004      	beq.n	800536a <L6474_SetAbsolutePosition+0x62>
	{
		L6474_HelperUnlock(h);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7ff faac 	bl	80048be <L6474_HelperUnlock>
		return val;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	e003      	b.n	8005372 <L6474_SetAbsolutePosition+0x6a>
	}

	L6474_HelperUnlock(h);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7ff faa7 	bl	80048be <L6474_HelperUnlock>
	return errcNONE;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
	...

0800537c <L6474_StepIncremental>:
}

// --------------------------------------------------------------------------------------------------------------------
int L6474_StepIncremental(L6474_Handle_t h, int steps )
// --------------------------------------------------------------------------------------------------------------------
{
 800537c:	b590      	push	{r4, r7, lr}
 800537e:	b087      	sub	sp, #28
 8005380:	af02      	add	r7, sp, #8
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
	if ( h == 0 )
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d102      	bne.n	8005392 <L6474_StepIncremental+0x16>
		return errcNULL_ARG;
 800538c:	f06f 0301 	mvn.w	r3, #1
 8005390:	e050      	b.n	8005434 <L6474_StepIncremental+0xb8>

	if ( steps == 0 )
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d102      	bne.n	800539e <L6474_StepIncremental+0x22>
		return errcNULL_ARG;
 8005398:	f06f 0301 	mvn.w	r3, #1
 800539c:	e04a      	b.n	8005434 <L6474_StepIncremental+0xb8>

	if ( L6474_HelperLock(h) != 0 )
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7ff fa82 	bl	80048a8 <L6474_HelperLock>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d002      	beq.n	80053b0 <L6474_StepIncremental+0x34>
		return errcLOCKING;
 80053aa:	f06f 0304 	mvn.w	r3, #4
 80053ae:	e041      	b.n	8005434 <L6474_StepIncremental+0xb8>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f7ff fa9f 	bl	80048f4 <L6474_GetStatusCommand>

	if ( h->state != stENABLED )
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d005      	beq.n	80053ca <L6474_StepIncremental+0x4e>
	{
		L6474_HelperUnlock(h);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7ff fa7d 	bl	80048be <L6474_HelperUnlock>
		return errcINV_STATE;
 80053c4:	f06f 0302 	mvn.w	r3, #2
 80053c8:	e034      	b.n	8005434 <L6474_StepIncremental+0xb8>
	}

	if ( h->pending != 0 )
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d005      	beq.n	80053de <L6474_StepIncremental+0x62>
	{
		L6474_HelperUnlock(h);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7ff fa73 	bl	80048be <L6474_HelperUnlock>
		return errcPENDING;
 80053d8:	f06f 0306 	mvn.w	r3, #6
 80053dc:	e02a      	b.n	8005434 <L6474_StepIncremental+0xb8>
	}

	int ret = 0;
 80053de:	2300      	movs	r3, #0
 80053e0:	60fb      	str	r3, [r7, #12]
#if defined(LIBL6474_STEP_ASYNC) && ( LIBL6474_STEP_ASYNC == 1 )
	h->pending = 1;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	605a      	str	r2, [r3, #4]
	if ( ( ret = h->platform.stepAsync(h->pPWM, steps >= 0, ( ( steps < 0 ) ? -steps : steps ), L6474_HelperReleaseStep, h) ) != 0 )
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6918      	ldr	r0, [r3, #16]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	43db      	mvns	r3, r3
 80053f4:	0fdb      	lsrs	r3, r3, #31
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	4619      	mov	r1, r3
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	bfb8      	it	lt
 8005400:	425b      	neglt	r3, r3
 8005402:	461a      	mov	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	4b0c      	ldr	r3, [pc, #48]	@ (800543c <L6474_StepIncremental+0xc0>)
 800540a:	47a0      	blx	r4
 800540c:	60f8      	str	r0, [r7, #12]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d002      	beq.n	800541a <L6474_StepIncremental+0x9e>
	{
		h->pending = 0;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	605a      	str	r2, [r3, #4]
	(void)L6474_HelperReleaseStep;
	ret = h->platform.step(h->pPWM,  steps >= 0, ( ( steps < 0 ) ? -steps : steps ) );
	h->pending = 0;
#endif

	if ( ret != 0 )
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d005      	beq.n	800542c <L6474_StepIncremental+0xb0>
	{
		L6474_HelperUnlock(h);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f7ff fa4c 	bl	80048be <L6474_HelperUnlock>
		return errcINTERNAL;
 8005426:	f06f 0303 	mvn.w	r3, #3
 800542a:	e003      	b.n	8005434 <L6474_StepIncremental+0xb8>
	}

	L6474_HelperUnlock(h);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f7ff fa46 	bl	80048be <L6474_HelperUnlock>
	return errcNONE;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	bd90      	pop	{r4, r7, pc}
 800543c:	080048d3 	.word	0x080048d3

08005440 <vApplicationMallocFailedHook>:
void InitTask();


extern void initialise_stdlib_abstraction(void);
void vApplicationMallocFailedHook(void)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8005446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800544a:	b672      	cpsid	i
 800544c:	f383 8811 	msr	BASEPRI, r3
 8005450:	f3bf 8f6f 	isb	sy
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	b662      	cpsie	i
 800545a:	607b      	str	r3, [r7, #4]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800545c:	bf00      	nop
  taskDISABLE_INTERRUPTS();
  __asm volatile("bkpt #0");
 800545e:	be00      	bkpt	0x0000
  for (;;)
 8005460:	bf00      	nop
 8005462:	e7fd      	b.n	8005460 <vApplicationMallocFailedHook+0x20>

08005464 <vApplicationStackOverflowHook>:
    ;
  }
}
/*-----------------------------------------------------------*/
void vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
    __asm volatile
 800546e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005472:	b672      	cpsid	i
 8005474:	f383 8811 	msr	BASEPRI, r3
 8005478:	f3bf 8f6f 	isb	sy
 800547c:	f3bf 8f4f 	dsb	sy
 8005480:	b662      	cpsie	i
 8005482:	60fb      	str	r3, [r7, #12]
}
 8005484:	bf00      	nop
  (void)pcTaskName;
  (void)pxTask;

  taskDISABLE_INTERRUPTS();
  __asm volatile("bkpt #0");
 8005486:	be00      	bkpt	0x0000
  for (;;)
 8005488:	bf00      	nop
 800548a:	e7fd      	b.n	8005488 <vApplicationStackOverflowHook+0x24>

0800548c <InitTask>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void InitTask()
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af02      	add	r7, sp, #8


  consoleHandle = CONSOLE_CreateInstance(4 * configMINIMAL_STACK_SIZE, configMAX_PRIORITIES - 5);
 8005492:	2102      	movs	r1, #2
 8005494:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005498:	f7fd fcc0 	bl	8002e1c <CONSOLE_CreateInstance>
 800549c:	4603      	mov	r3, r0
 800549e:	4a0d      	ldr	r2, [pc, #52]	@ (80054d4 <InitTask+0x48>)
 80054a0:	6013      	str	r3, [r2, #0]

  CONSOLE_RegisterCommand(consoleHandle, "capability", "Shows what the program is capable of", CapabilityFunc, NULL);
 80054a2:	4b0c      	ldr	r3, [pc, #48]	@ (80054d4 <InitTask+0x48>)
 80054a4:	6818      	ldr	r0, [r3, #0]
 80054a6:	2300      	movs	r3, #0
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	4b0b      	ldr	r3, [pc, #44]	@ (80054d8 <InitTask+0x4c>)
 80054ac:	4a0b      	ldr	r2, [pc, #44]	@ (80054dc <InitTask+0x50>)
 80054ae:	490c      	ldr	r1, [pc, #48]	@ (80054e0 <InitTask+0x54>)
 80054b0:	f7fd fd30 	bl	8002f14 <CONSOLE_RegisterCommand>
  InitStepper(consoleHandle, &hspi1, &htim1, &htim4);
 80054b4:	4b07      	ldr	r3, [pc, #28]	@ (80054d4 <InitTask+0x48>)
 80054b6:	6818      	ldr	r0, [r3, #0]
 80054b8:	4b0a      	ldr	r3, [pc, #40]	@ (80054e4 <InitTask+0x58>)
 80054ba:	4a0b      	ldr	r2, [pc, #44]	@ (80054e8 <InitTask+0x5c>)
 80054bc:	490b      	ldr	r1, [pc, #44]	@ (80054ec <InitTask+0x60>)
 80054be:	f7fe fda5 	bl	800400c <InitStepper>
  InitSpindle(consoleHandle, &htim2);
 80054c2:	4b04      	ldr	r3, [pc, #16]	@ (80054d4 <InitTask+0x48>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	490a      	ldr	r1, [pc, #40]	@ (80054f0 <InitTask+0x64>)
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7fd ffbb 	bl	8003444 <InitSpindle>


}
 80054ce:	bf00      	nop
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	200004ac 	.word	0x200004ac
 80054d8:	080054f5 	.word	0x080054f5
 80054dc:	08017898 	.word	0x08017898
 80054e0:	080178c0 	.word	0x080178c0
 80054e4:	200003d8 	.word	0x200003d8
 80054e8:	20000340 	.word	0x20000340
 80054ec:	200002dc 	.word	0x200002dc
 80054f0:	2000038c 	.word	0x2000038c

080054f4 <CapabilityFunc>:

// -------------------------------------------------------------------------------------------------------------------
static int CapabilityFunc(int argc, char **argv, void *ctx)
// --------------------------------------------------------------------------------------------------------------------
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b09c      	sub	sp, #112	@ 0x70
 80054f8:	af18      	add	r7, sp, #96	@ 0x60
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
  (void)argc;
  (void)argv;
  (void)ctx;
  printf("%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\r\nOK",
 8005500:	2300      	movs	r3, #0
 8005502:	9317      	str	r3, [sp, #92]	@ 0x5c
 8005504:	2300      	movs	r3, #0
 8005506:	9316      	str	r3, [sp, #88]	@ 0x58
 8005508:	2300      	movs	r3, #0
 800550a:	9315      	str	r3, [sp, #84]	@ 0x54
 800550c:	2300      	movs	r3, #0
 800550e:	9314      	str	r3, [sp, #80]	@ 0x50
 8005510:	2300      	movs	r3, #0
 8005512:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005514:	2300      	movs	r3, #0
 8005516:	9312      	str	r3, [sp, #72]	@ 0x48
 8005518:	2300      	movs	r3, #0
 800551a:	9311      	str	r3, [sp, #68]	@ 0x44
 800551c:	2300      	movs	r3, #0
 800551e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005520:	2300      	movs	r3, #0
 8005522:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005524:	2300      	movs	r3, #0
 8005526:	930e      	str	r3, [sp, #56]	@ 0x38
 8005528:	2300      	movs	r3, #0
 800552a:	930d      	str	r3, [sp, #52]	@ 0x34
 800552c:	2300      	movs	r3, #0
 800552e:	930c      	str	r3, [sp, #48]	@ 0x30
 8005530:	2300      	movs	r3, #0
 8005532:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005534:	2300      	movs	r3, #0
 8005536:	930a      	str	r3, [sp, #40]	@ 0x28
 8005538:	2300      	movs	r3, #0
 800553a:	9309      	str	r3, [sp, #36]	@ 0x24
 800553c:	2300      	movs	r3, #0
 800553e:	9308      	str	r3, [sp, #32]
 8005540:	2300      	movs	r3, #0
 8005542:	9307      	str	r3, [sp, #28]
 8005544:	2300      	movs	r3, #0
 8005546:	9306      	str	r3, [sp, #24]
 8005548:	2300      	movs	r3, #0
 800554a:	9305      	str	r3, [sp, #20]
 800554c:	2300      	movs	r3, #0
 800554e:	9304      	str	r3, [sp, #16]
 8005550:	2300      	movs	r3, #0
 8005552:	9303      	str	r3, [sp, #12]
 8005554:	2300      	movs	r3, #0
 8005556:	9302      	str	r3, [sp, #8]
 8005558:	2300      	movs	r3, #0
 800555a:	9301      	str	r3, [sp, #4]
 800555c:	2300      	movs	r3, #0
 800555e:	9300      	str	r3, [sp, #0]
 8005560:	2300      	movs	r3, #0
 8005562:	2200      	movs	r2, #0
 8005564:	2100      	movs	r1, #0
 8005566:	4804      	ldr	r0, [pc, #16]	@ (8005578 <CapabilityFunc+0x84>)
 8005568:	f00e f9ac 	bl	80138c4 <iprintf>
         0, // has stepper config posmin
         0, // has stepper config posref
         0, // has stepper config stepsperturn
         0  // has stepper cancel
  );
  return 0;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	080178cc 	.word	0x080178cc

0800557c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8005580:	f000 fc3a 	bl	8005df8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005584:	f001 f96d 	bl	8006862 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005588:	f000 f818 	bl	80055bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800558c:	f000 fab0 	bl	8005af0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8005590:	f000 f87a 	bl	8005688 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8005594:	f000 fa7c 	bl	8005a90 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8005598:	f000 f96a 	bl	8005870 <MX_TIM2_Init>
  MX_TIM1_Init();
 800559c:	f000 f8b2 	bl	8005704 <MX_TIM1_Init>
  MX_TIM4_Init();
 80055a0:	f000 f9e8 	bl	8005974 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */


  printf("System init start\r\n");
 80055a4:	4804      	ldr	r0, [pc, #16]	@ (80055b8 <main+0x3c>)
 80055a6:	f00e f9fd 	bl	80139a4 <puts>

  //(void)CapabilityFunc;

  InitTask();
 80055aa:	f7ff ff6f 	bl	800548c <InitTask>
  vTaskStartScheduler();
 80055ae:	f00a f915 	bl	800f7dc <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80055b2:	bf00      	nop
 80055b4:	e7fd      	b.n	80055b2 <main+0x36>
 80055b6:	bf00      	nop
 80055b8:	08017924 	.word	0x08017924

080055bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b094      	sub	sp, #80	@ 0x50
 80055c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80055c2:	f107 0320 	add.w	r3, r7, #32
 80055c6:	2230      	movs	r2, #48	@ 0x30
 80055c8:	2100      	movs	r1, #0
 80055ca:	4618      	mov	r0, r3
 80055cc:	f00e fbd0 	bl	8013d70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80055d0:	f107 030c 	add.w	r3, r7, #12
 80055d4:	2200      	movs	r2, #0
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	605a      	str	r2, [r3, #4]
 80055da:	609a      	str	r2, [r3, #8]
 80055dc:	60da      	str	r2, [r3, #12]
 80055de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80055e0:	4b27      	ldr	r3, [pc, #156]	@ (8005680 <SystemClock_Config+0xc4>)
 80055e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e4:	4a26      	ldr	r2, [pc, #152]	@ (8005680 <SystemClock_Config+0xc4>)
 80055e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80055ec:	4b24      	ldr	r3, [pc, #144]	@ (8005680 <SystemClock_Config+0xc4>)
 80055ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055f4:	60bb      	str	r3, [r7, #8]
 80055f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80055f8:	4b22      	ldr	r3, [pc, #136]	@ (8005684 <SystemClock_Config+0xc8>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a21      	ldr	r2, [pc, #132]	@ (8005684 <SystemClock_Config+0xc8>)
 80055fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005602:	6013      	str	r3, [r2, #0]
 8005604:	4b1f      	ldr	r3, [pc, #124]	@ (8005684 <SystemClock_Config+0xc8>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800560c:	607b      	str	r3, [r7, #4]
 800560e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005610:	2302      	movs	r3, #2
 8005612:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005614:	2301      	movs	r3, #1
 8005616:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005618:	2310      	movs	r3, #16
 800561a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800561c:	2302      	movs	r3, #2
 800561e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005620:	2300      	movs	r3, #0
 8005622:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005624:	2308      	movs	r3, #8
 8005626:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005628:	23b4      	movs	r3, #180	@ 0xb4
 800562a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800562c:	2302      	movs	r3, #2
 800562e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005630:	2302      	movs	r3, #2
 8005632:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005634:	f107 0320 	add.w	r3, r7, #32
 8005638:	4618      	mov	r0, r3
 800563a:	f002 f83f 	bl	80076bc <HAL_RCC_OscConfig>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d001      	beq.n	8005648 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8005644:	f000 fc17 	bl	8005e76 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005648:	230f      	movs	r3, #15
 800564a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800564c:	2302      	movs	r3, #2
 800564e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005650:	2300      	movs	r3, #0
 8005652:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005654:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8005658:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800565a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800565e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005660:	f107 030c 	add.w	r3, r7, #12
 8005664:	2105      	movs	r1, #5
 8005666:	4618      	mov	r0, r3
 8005668:	f002 fb82 	bl	8007d70 <HAL_RCC_ClockConfig>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8005672:	f000 fc00 	bl	8005e76 <Error_Handler>
  }
}
 8005676:	bf00      	nop
 8005678:	3750      	adds	r7, #80	@ 0x50
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	40023800 	.word	0x40023800
 8005684:	40007000 	.word	0x40007000

08005688 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800568c:	4b1b      	ldr	r3, [pc, #108]	@ (80056fc <MX_SPI1_Init+0x74>)
 800568e:	4a1c      	ldr	r2, [pc, #112]	@ (8005700 <MX_SPI1_Init+0x78>)
 8005690:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005692:	4b1a      	ldr	r3, [pc, #104]	@ (80056fc <MX_SPI1_Init+0x74>)
 8005694:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005698:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800569a:	4b18      	ldr	r3, [pc, #96]	@ (80056fc <MX_SPI1_Init+0x74>)
 800569c:	2200      	movs	r2, #0
 800569e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80056a0:	4b16      	ldr	r3, [pc, #88]	@ (80056fc <MX_SPI1_Init+0x74>)
 80056a2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80056a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80056a8:	4b14      	ldr	r3, [pc, #80]	@ (80056fc <MX_SPI1_Init+0x74>)
 80056aa:	2202      	movs	r2, #2
 80056ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80056ae:	4b13      	ldr	r3, [pc, #76]	@ (80056fc <MX_SPI1_Init+0x74>)
 80056b0:	2201      	movs	r2, #1
 80056b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80056b4:	4b11      	ldr	r3, [pc, #68]	@ (80056fc <MX_SPI1_Init+0x74>)
 80056b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80056bc:	4b0f      	ldr	r3, [pc, #60]	@ (80056fc <MX_SPI1_Init+0x74>)
 80056be:	2220      	movs	r2, #32
 80056c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80056c2:	4b0e      	ldr	r3, [pc, #56]	@ (80056fc <MX_SPI1_Init+0x74>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80056c8:	4b0c      	ldr	r3, [pc, #48]	@ (80056fc <MX_SPI1_Init+0x74>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056ce:	4b0b      	ldr	r3, [pc, #44]	@ (80056fc <MX_SPI1_Init+0x74>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80056d4:	4b09      	ldr	r3, [pc, #36]	@ (80056fc <MX_SPI1_Init+0x74>)
 80056d6:	2207      	movs	r2, #7
 80056d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80056da:	4b08      	ldr	r3, [pc, #32]	@ (80056fc <MX_SPI1_Init+0x74>)
 80056dc:	2200      	movs	r2, #0
 80056de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80056e0:	4b06      	ldr	r3, [pc, #24]	@ (80056fc <MX_SPI1_Init+0x74>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80056e6:	4805      	ldr	r0, [pc, #20]	@ (80056fc <MX_SPI1_Init+0x74>)
 80056e8:	f003 fdc8 	bl	800927c <HAL_SPI_Init>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80056f2:	f000 fbc0 	bl	8005e76 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80056f6:	bf00      	nop
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	200002dc 	.word	0x200002dc
 8005700:	40013000 	.word	0x40013000

08005704 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b09a      	sub	sp, #104	@ 0x68
 8005708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800570a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800570e:	2200      	movs	r2, #0
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	605a      	str	r2, [r3, #4]
 8005714:	609a      	str	r2, [r3, #8]
 8005716:	60da      	str	r2, [r3, #12]
 8005718:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800571a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800571e:	2200      	movs	r2, #0
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	605a      	str	r2, [r3, #4]
 8005724:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005726:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800572a:	2200      	movs	r2, #0
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	605a      	str	r2, [r3, #4]
 8005730:	609a      	str	r2, [r3, #8]
 8005732:	60da      	str	r2, [r3, #12]
 8005734:	611a      	str	r2, [r3, #16]
 8005736:	615a      	str	r2, [r3, #20]
 8005738:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800573a:	463b      	mov	r3, r7
 800573c:	222c      	movs	r2, #44	@ 0x2c
 800573e:	2100      	movs	r1, #0
 8005740:	4618      	mov	r0, r3
 8005742:	f00e fb15 	bl	8013d70 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005746:	4b48      	ldr	r3, [pc, #288]	@ (8005868 <MX_TIM1_Init+0x164>)
 8005748:	4a48      	ldr	r2, [pc, #288]	@ (800586c <MX_TIM1_Init+0x168>)
 800574a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800574c:	4b46      	ldr	r3, [pc, #280]	@ (8005868 <MX_TIM1_Init+0x164>)
 800574e:	2200      	movs	r2, #0
 8005750:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005752:	4b45      	ldr	r3, [pc, #276]	@ (8005868 <MX_TIM1_Init+0x164>)
 8005754:	2200      	movs	r2, #0
 8005756:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8005758:	4b43      	ldr	r3, [pc, #268]	@ (8005868 <MX_TIM1_Init+0x164>)
 800575a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800575e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005760:	4b41      	ldr	r3, [pc, #260]	@ (8005868 <MX_TIM1_Init+0x164>)
 8005762:	2200      	movs	r2, #0
 8005764:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005766:	4b40      	ldr	r3, [pc, #256]	@ (8005868 <MX_TIM1_Init+0x164>)
 8005768:	2200      	movs	r2, #0
 800576a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800576c:	4b3e      	ldr	r3, [pc, #248]	@ (8005868 <MX_TIM1_Init+0x164>)
 800576e:	2200      	movs	r2, #0
 8005770:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005772:	483d      	ldr	r0, [pc, #244]	@ (8005868 <MX_TIM1_Init+0x164>)
 8005774:	f004 fc64 	bl	800a040 <HAL_TIM_Base_Init>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800577e:	f000 fb7a 	bl	8005e76 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8005782:	4839      	ldr	r0, [pc, #228]	@ (8005868 <MX_TIM1_Init+0x164>)
 8005784:	f004 fd7c 	bl	800a280 <HAL_TIM_OC_Init>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800578e:	f000 fb72 	bl	8005e76 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8005792:	2108      	movs	r1, #8
 8005794:	4834      	ldr	r0, [pc, #208]	@ (8005868 <MX_TIM1_Init+0x164>)
 8005796:	f005 f991 	bl	800aabc <HAL_TIM_OnePulse_Init>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d001      	beq.n	80057a4 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 80057a0:	f000 fb69 	bl	8005e76 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80057a4:	2307      	movs	r3, #7
 80057a6:	657b      	str	r3, [r7, #84]	@ 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 80057a8:	2330      	movs	r3, #48	@ 0x30
 80057aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80057ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80057b0:	4619      	mov	r1, r3
 80057b2:	482d      	ldr	r0, [pc, #180]	@ (8005868 <MX_TIM1_Init+0x164>)
 80057b4:	f006 fcb8 	bl	800c128 <HAL_TIM_SlaveConfigSynchro>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80057be:	f000 fb5a 	bl	8005e76 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80057c2:	2310      	movs	r3, #16
 80057c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_ENABLE;
 80057c6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80057ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057cc:	2300      	movs	r3, #0
 80057ce:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80057d0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80057d4:	4619      	mov	r1, r3
 80057d6:	4824      	ldr	r0, [pc, #144]	@ (8005868 <MX_TIM1_Init+0x164>)
 80057d8:	f007 fcae 	bl	800d138 <HAL_TIMEx_MasterConfigSynchronization>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 80057e2:	f000 fb48 	bl	8005e76 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80057e6:	2300      	movs	r3, #0
 80057e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 80057ea:	2300      	movs	r3, #0
 80057ec:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80057ee:	2300      	movs	r3, #0
 80057f0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80057f2:	2300      	movs	r3, #0
 80057f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80057f6:	2300      	movs	r3, #0
 80057f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80057fa:	2300      	movs	r3, #0
 80057fc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80057fe:	2300      	movs	r3, #0
 8005800:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005802:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005806:	2200      	movs	r2, #0
 8005808:	4619      	mov	r1, r3
 800580a:	4817      	ldr	r0, [pc, #92]	@ (8005868 <MX_TIM1_Init+0x164>)
 800580c:	f005 fc7a 	bl	800b104 <HAL_TIM_OC_ConfigChannel>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8005816:	f000 fb2e 	bl	8005e76 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800581a:	2300      	movs	r3, #0
 800581c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800581e:	2300      	movs	r3, #0
 8005820:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005822:	2300      	movs	r3, #0
 8005824:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005826:	2300      	movs	r3, #0
 8005828:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800582a:	2300      	movs	r3, #0
 800582c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800582e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005832:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005834:	2300      	movs	r3, #0
 8005836:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005838:	2300      	movs	r3, #0
 800583a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800583c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005840:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005842:	2300      	movs	r3, #0
 8005844:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005846:	2300      	movs	r3, #0
 8005848:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800584a:	463b      	mov	r3, r7
 800584c:	4619      	mov	r1, r3
 800584e:	4806      	ldr	r0, [pc, #24]	@ (8005868 <MX_TIM1_Init+0x164>)
 8005850:	f007 fdca 	bl	800d3e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800585a:	f000 fb0c 	bl	8005e76 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800585e:	bf00      	nop
 8005860:	3768      	adds	r7, #104	@ 0x68
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	20000340 	.word	0x20000340
 800586c:	40010000 	.word	0x40010000

08005870 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b08e      	sub	sp, #56	@ 0x38
 8005874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005876:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800587a:	2200      	movs	r2, #0
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	605a      	str	r2, [r3, #4]
 8005880:	609a      	str	r2, [r3, #8]
 8005882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005884:	f107 031c 	add.w	r3, r7, #28
 8005888:	2200      	movs	r2, #0
 800588a:	601a      	str	r2, [r3, #0]
 800588c:	605a      	str	r2, [r3, #4]
 800588e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005890:	463b      	mov	r3, r7
 8005892:	2200      	movs	r2, #0
 8005894:	601a      	str	r2, [r3, #0]
 8005896:	605a      	str	r2, [r3, #4]
 8005898:	609a      	str	r2, [r3, #8]
 800589a:	60da      	str	r2, [r3, #12]
 800589c:	611a      	str	r2, [r3, #16]
 800589e:	615a      	str	r2, [r3, #20]
 80058a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80058a2:	4b33      	ldr	r3, [pc, #204]	@ (8005970 <MX_TIM2_Init+0x100>)
 80058a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80058a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80058aa:	4b31      	ldr	r3, [pc, #196]	@ (8005970 <MX_TIM2_Init+0x100>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058b0:	4b2f      	ldr	r3, [pc, #188]	@ (8005970 <MX_TIM2_Init+0x100>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4499;
 80058b6:	4b2e      	ldr	r3, [pc, #184]	@ (8005970 <MX_TIM2_Init+0x100>)
 80058b8:	f241 1293 	movw	r2, #4499	@ 0x1193
 80058bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058be:	4b2c      	ldr	r3, [pc, #176]	@ (8005970 <MX_TIM2_Init+0x100>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058c4:	4b2a      	ldr	r3, [pc, #168]	@ (8005970 <MX_TIM2_Init+0x100>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80058ca:	4829      	ldr	r0, [pc, #164]	@ (8005970 <MX_TIM2_Init+0x100>)
 80058cc:	f004 fbb8 	bl	800a040 <HAL_TIM_Base_Init>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80058d6:	f000 face 	bl	8005e76 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80058da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80058de:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80058e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80058e4:	4619      	mov	r1, r3
 80058e6:	4822      	ldr	r0, [pc, #136]	@ (8005970 <MX_TIM2_Init+0x100>)
 80058e8:	f006 f8cc 	bl	800ba84 <HAL_TIM_ConfigClockSource>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80058f2:	f000 fac0 	bl	8005e76 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80058f6:	481e      	ldr	r0, [pc, #120]	@ (8005970 <MX_TIM2_Init+0x100>)
 80058f8:	f004 fdec 	bl	800a4d4 <HAL_TIM_PWM_Init>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8005902:	f000 fab8 	bl	8005e76 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005906:	2300      	movs	r3, #0
 8005908:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800590a:	2300      	movs	r3, #0
 800590c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800590e:	f107 031c 	add.w	r3, r7, #28
 8005912:	4619      	mov	r1, r3
 8005914:	4816      	ldr	r0, [pc, #88]	@ (8005970 <MX_TIM2_Init+0x100>)
 8005916:	f007 fc0f 	bl	800d138 <HAL_TIMEx_MasterConfigSynchronization>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d001      	beq.n	8005924 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8005920:	f000 faa9 	bl	8005e76 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005924:	2360      	movs	r3, #96	@ 0x60
 8005926:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005928:	2300      	movs	r3, #0
 800592a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800592c:	2300      	movs	r3, #0
 800592e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005930:	2300      	movs	r3, #0
 8005932:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005934:	463b      	mov	r3, r7
 8005936:	2208      	movs	r2, #8
 8005938:	4619      	mov	r1, r3
 800593a:	480d      	ldr	r0, [pc, #52]	@ (8005970 <MX_TIM2_Init+0x100>)
 800593c:	f005 fda2 	bl	800b484 <HAL_TIM_PWM_ConfigChannel>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8005946:	f000 fa96 	bl	8005e76 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800594a:	463b      	mov	r3, r7
 800594c:	220c      	movs	r2, #12
 800594e:	4619      	mov	r1, r3
 8005950:	4807      	ldr	r0, [pc, #28]	@ (8005970 <MX_TIM2_Init+0x100>)
 8005952:	f005 fd97 	bl	800b484 <HAL_TIM_PWM_ConfigChannel>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800595c:	f000 fa8b 	bl	8005e76 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005960:	4803      	ldr	r0, [pc, #12]	@ (8005970 <MX_TIM2_Init+0x100>)
 8005962:	f000 fe43 	bl	80065ec <HAL_TIM_MspPostInit>

}
 8005966:	bf00      	nop
 8005968:	3738      	adds	r7, #56	@ 0x38
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	2000038c 	.word	0x2000038c

08005974 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b094      	sub	sp, #80	@ 0x50
 8005978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800597a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800597e:	2200      	movs	r2, #0
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	605a      	str	r2, [r3, #4]
 8005984:	609a      	str	r2, [r3, #8]
 8005986:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8005988:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800598c:	2200      	movs	r2, #0
 800598e:	601a      	str	r2, [r3, #0]
 8005990:	605a      	str	r2, [r3, #4]
 8005992:	609a      	str	r2, [r3, #8]
 8005994:	60da      	str	r2, [r3, #12]
 8005996:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005998:	f107 0320 	add.w	r3, r7, #32
 800599c:	2200      	movs	r2, #0
 800599e:	601a      	str	r2, [r3, #0]
 80059a0:	605a      	str	r2, [r3, #4]
 80059a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80059a4:	1d3b      	adds	r3, r7, #4
 80059a6:	2200      	movs	r2, #0
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	605a      	str	r2, [r3, #4]
 80059ac:	609a      	str	r2, [r3, #8]
 80059ae:	60da      	str	r2, [r3, #12]
 80059b0:	611a      	str	r2, [r3, #16]
 80059b2:	615a      	str	r2, [r3, #20]
 80059b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80059b6:	4b34      	ldr	r3, [pc, #208]	@ (8005a88 <MX_TIM4_Init+0x114>)
 80059b8:	4a34      	ldr	r2, [pc, #208]	@ (8005a8c <MX_TIM4_Init+0x118>)
 80059ba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 80059bc:	4b32      	ldr	r3, [pc, #200]	@ (8005a88 <MX_TIM4_Init+0x114>)
 80059be:	2201      	movs	r2, #1
 80059c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059c2:	4b31      	ldr	r3, [pc, #196]	@ (8005a88 <MX_TIM4_Init+0x114>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3115;
 80059c8:	4b2f      	ldr	r3, [pc, #188]	@ (8005a88 <MX_TIM4_Init+0x114>)
 80059ca:	f640 422b 	movw	r2, #3115	@ 0xc2b
 80059ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80059d0:	4b2d      	ldr	r3, [pc, #180]	@ (8005a88 <MX_TIM4_Init+0x114>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80059d6:	4b2c      	ldr	r3, [pc, #176]	@ (8005a88 <MX_TIM4_Init+0x114>)
 80059d8:	2280      	movs	r2, #128	@ 0x80
 80059da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80059dc:	482a      	ldr	r0, [pc, #168]	@ (8005a88 <MX_TIM4_Init+0x114>)
 80059de:	f004 fb2f 	bl	800a040 <HAL_TIM_Base_Init>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d001      	beq.n	80059ec <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80059e8:	f000 fa45 	bl	8005e76 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80059ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80059f0:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80059f2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80059f6:	4619      	mov	r1, r3
 80059f8:	4823      	ldr	r0, [pc, #140]	@ (8005a88 <MX_TIM4_Init+0x114>)
 80059fa:	f006 f843 	bl	800ba84 <HAL_TIM_ConfigClockSource>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d001      	beq.n	8005a08 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8005a04:	f000 fa37 	bl	8005e76 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005a08:	481f      	ldr	r0, [pc, #124]	@ (8005a88 <MX_TIM4_Init+0x114>)
 8005a0a:	f004 fd63 	bl	800a4d4 <HAL_TIM_PWM_Init>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d001      	beq.n	8005a18 <MX_TIM4_Init+0xa4>
  {
    Error_Handler();
 8005a14:	f000 fa2f 	bl	8005e76 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8005a18:	2305      	movs	r3, #5
 8005a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8005a20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005a24:	4619      	mov	r1, r3
 8005a26:	4818      	ldr	r0, [pc, #96]	@ (8005a88 <MX_TIM4_Init+0x114>)
 8005a28:	f006 fb7e 	bl	800c128 <HAL_TIM_SlaveConfigSynchro>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 8005a32:	f000 fa20 	bl	8005e76 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005a36:	2320      	movs	r3, #32
 8005a38:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005a3e:	f107 0320 	add.w	r3, r7, #32
 8005a42:	4619      	mov	r1, r3
 8005a44:	4810      	ldr	r0, [pc, #64]	@ (8005a88 <MX_TIM4_Init+0x114>)
 8005a46:	f007 fb77 	bl	800d138 <HAL_TIMEx_MasterConfigSynchronization>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d001      	beq.n	8005a54 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8005a50:	f000 fa11 	bl	8005e76 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a54:	2360      	movs	r3, #96	@ 0x60
 8005a56:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a60:	2300      	movs	r3, #0
 8005a62:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005a64:	1d3b      	adds	r3, r7, #4
 8005a66:	220c      	movs	r2, #12
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4807      	ldr	r0, [pc, #28]	@ (8005a88 <MX_TIM4_Init+0x114>)
 8005a6c:	f005 fd0a 	bl	800b484 <HAL_TIM_PWM_ConfigChannel>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 8005a76:	f000 f9fe 	bl	8005e76 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005a7a:	4803      	ldr	r0, [pc, #12]	@ (8005a88 <MX_TIM4_Init+0x114>)
 8005a7c:	f000 fdb6 	bl	80065ec <HAL_TIM_MspPostInit>

}
 8005a80:	bf00      	nop
 8005a82:	3750      	adds	r7, #80	@ 0x50
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	200003d8 	.word	0x200003d8
 8005a8c:	40000800 	.word	0x40000800

08005a90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005a94:	4b14      	ldr	r3, [pc, #80]	@ (8005ae8 <MX_USART3_UART_Init+0x58>)
 8005a96:	4a15      	ldr	r2, [pc, #84]	@ (8005aec <MX_USART3_UART_Init+0x5c>)
 8005a98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005a9a:	4b13      	ldr	r3, [pc, #76]	@ (8005ae8 <MX_USART3_UART_Init+0x58>)
 8005a9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005aa0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005aa2:	4b11      	ldr	r3, [pc, #68]	@ (8005ae8 <MX_USART3_UART_Init+0x58>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8005ae8 <MX_USART3_UART_Init+0x58>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005aae:	4b0e      	ldr	r3, [pc, #56]	@ (8005ae8 <MX_USART3_UART_Init+0x58>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ae8 <MX_USART3_UART_Init+0x58>)
 8005ab6:	220c      	movs	r2, #12
 8005ab8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005aba:	4b0b      	ldr	r3, [pc, #44]	@ (8005ae8 <MX_USART3_UART_Init+0x58>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ac0:	4b09      	ldr	r3, [pc, #36]	@ (8005ae8 <MX_USART3_UART_Init+0x58>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005ac6:	4b08      	ldr	r3, [pc, #32]	@ (8005ae8 <MX_USART3_UART_Init+0x58>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005acc:	4b06      	ldr	r3, [pc, #24]	@ (8005ae8 <MX_USART3_UART_Init+0x58>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005ad2:	4805      	ldr	r0, [pc, #20]	@ (8005ae8 <MX_USART3_UART_Init+0x58>)
 8005ad4:	f007 fdc8 	bl	800d668 <HAL_UART_Init>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8005ade:	f000 f9ca 	bl	8005e76 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005ae2:	bf00      	nop
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	20000424 	.word	0x20000424
 8005aec:	40004800 	.word	0x40004800

08005af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b08c      	sub	sp, #48	@ 0x30
 8005af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005af6:	f107 031c 	add.w	r3, r7, #28
 8005afa:	2200      	movs	r2, #0
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	605a      	str	r2, [r3, #4]
 8005b00:	609a      	str	r2, [r3, #8]
 8005b02:	60da      	str	r2, [r3, #12]
 8005b04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b06:	4b7d      	ldr	r3, [pc, #500]	@ (8005cfc <MX_GPIO_Init+0x20c>)
 8005b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b0a:	4a7c      	ldr	r2, [pc, #496]	@ (8005cfc <MX_GPIO_Init+0x20c>)
 8005b0c:	f043 0304 	orr.w	r3, r3, #4
 8005b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b12:	4b7a      	ldr	r3, [pc, #488]	@ (8005cfc <MX_GPIO_Init+0x20c>)
 8005b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b16:	f003 0304 	and.w	r3, r3, #4
 8005b1a:	61bb      	str	r3, [r7, #24]
 8005b1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005b1e:	4b77      	ldr	r3, [pc, #476]	@ (8005cfc <MX_GPIO_Init+0x20c>)
 8005b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b22:	4a76      	ldr	r2, [pc, #472]	@ (8005cfc <MX_GPIO_Init+0x20c>)
 8005b24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b2a:	4b74      	ldr	r3, [pc, #464]	@ (8005cfc <MX_GPIO_Init+0x20c>)
 8005b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b32:	617b      	str	r3, [r7, #20]
 8005b34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b36:	4b71      	ldr	r3, [pc, #452]	@ (8005cfc <MX_GPIO_Init+0x20c>)
 8005b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b3a:	4a70      	ldr	r2, [pc, #448]	@ (8005cfc <MX_GPIO_Init+0x20c>)
 8005b3c:	f043 0301 	orr.w	r3, r3, #1
 8005b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b42:	4b6e      	ldr	r3, [pc, #440]	@ (8005cfc <MX_GPIO_Init+0x20c>)
 8005b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	613b      	str	r3, [r7, #16]
 8005b4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b4e:	4b6b      	ldr	r3, [pc, #428]	@ (8005cfc <MX_GPIO_Init+0x20c>)
 8005b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b52:	4a6a      	ldr	r2, [pc, #424]	@ (8005cfc <MX_GPIO_Init+0x20c>)
 8005b54:	f043 0302 	orr.w	r3, r3, #2
 8005b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b5a:	4b68      	ldr	r3, [pc, #416]	@ (8005cfc <MX_GPIO_Init+0x20c>)
 8005b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005b66:	4b65      	ldr	r3, [pc, #404]	@ (8005cfc <MX_GPIO_Init+0x20c>)
 8005b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b6a:	4a64      	ldr	r2, [pc, #400]	@ (8005cfc <MX_GPIO_Init+0x20c>)
 8005b6c:	f043 0320 	orr.w	r3, r3, #32
 8005b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b72:	4b62      	ldr	r3, [pc, #392]	@ (8005cfc <MX_GPIO_Init+0x20c>)
 8005b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b76:	f003 0320 	and.w	r3, r3, #32
 8005b7a:	60bb      	str	r3, [r7, #8]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005b7e:	4b5f      	ldr	r3, [pc, #380]	@ (8005cfc <MX_GPIO_Init+0x20c>)
 8005b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b82:	4a5e      	ldr	r2, [pc, #376]	@ (8005cfc <MX_GPIO_Init+0x20c>)
 8005b84:	f043 0310 	orr.w	r3, r3, #16
 8005b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b8a:	4b5c      	ldr	r3, [pc, #368]	@ (8005cfc <MX_GPIO_Init+0x20c>)
 8005b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b8e:	f003 0310 	and.w	r3, r3, #16
 8005b92:	607b      	str	r3, [r7, #4]
 8005b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005b96:	4b59      	ldr	r3, [pc, #356]	@ (8005cfc <MX_GPIO_Init+0x20c>)
 8005b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b9a:	4a58      	ldr	r2, [pc, #352]	@ (8005cfc <MX_GPIO_Init+0x20c>)
 8005b9c:	f043 0308 	orr.w	r3, r3, #8
 8005ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ba2:	4b56      	ldr	r3, [pc, #344]	@ (8005cfc <MX_GPIO_Init+0x20c>)
 8005ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba6:	f003 0308 	and.w	r3, r3, #8
 8005baa:	603b      	str	r3, [r7, #0]
 8005bac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f244 0181 	movw	r1, #16513	@ 0x4081
 8005bb4:	4852      	ldr	r0, [pc, #328]	@ (8005d00 <MX_GPIO_Init+0x210>)
 8005bb6:	f001 fd55 	bl	8007664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, STEP_RSTN_Pin|STEP_DIR_Pin, GPIO_PIN_RESET);
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8005bc0:	4850      	ldr	r0, [pc, #320]	@ (8005d04 <MX_GPIO_Init+0x214>)
 8005bc2:	f001 fd4f 	bl	8007664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPINDLE_ENA_L_Pin|SPINDLE_ENA_R_Pin, GPIO_PIN_RESET);
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8005bcc:	484e      	ldr	r0, [pc, #312]	@ (8005d08 <MX_GPIO_Init+0x218>)
 8005bce:	f001 fd49 	bl	8007664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEP_SPI_CS_GPIO_Port, STEP_SPI_CS_Pin, GPIO_PIN_SET);
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005bd8:	484c      	ldr	r0, [pc, #304]	@ (8005d0c <MX_GPIO_Init+0x21c>)
 8005bda:	f001 fd43 	bl	8007664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USR_BUTTON_Pin */
  GPIO_InitStruct.Pin = USR_BUTTON_Pin;
 8005bde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005be4:	2300      	movs	r3, #0
 8005be6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005be8:	2300      	movs	r3, #0
 8005bea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USR_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8005bec:	f107 031c 	add.w	r3, r7, #28
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	4847      	ldr	r0, [pc, #284]	@ (8005d10 <MX_GPIO_Init+0x220>)
 8005bf4:	f001 f9a6 	bl	8006f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPINDLE_SI_R_Pin */
  GPIO_InitStruct.Pin = SPINDLE_SI_R_Pin;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c00:	2300      	movs	r3, #0
 8005c02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPINDLE_SI_R_GPIO_Port, &GPIO_InitStruct);
 8005c04:	f107 031c 	add.w	r3, r7, #28
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4842      	ldr	r0, [pc, #264]	@ (8005d14 <MX_GPIO_Init+0x224>)
 8005c0c:	f001 f99a 	bl	8006f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8005c10:	f244 0381 	movw	r3, #16513	@ 0x4081
 8005c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c16:	2301      	movs	r3, #1
 8005c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c22:	f107 031c 	add.w	r3, r7, #28
 8005c26:	4619      	mov	r1, r3
 8005c28:	4835      	ldr	r0, [pc, #212]	@ (8005d00 <MX_GPIO_Init+0x210>)
 8005c2a:	f001 f98b 	bl	8006f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_RSTN_Pin */
  GPIO_InitStruct.Pin = STEP_RSTN_Pin;
 8005c2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c34:	2301      	movs	r3, #1
 8005c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP_RSTN_GPIO_Port, &GPIO_InitStruct);
 8005c40:	f107 031c 	add.w	r3, r7, #28
 8005c44:	4619      	mov	r1, r3
 8005c46:	482f      	ldr	r0, [pc, #188]	@ (8005d04 <MX_GPIO_Init+0x214>)
 8005c48:	f001 f97c 	bl	8006f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_DIR_Pin */
  GPIO_InitStruct.Pin = STEP_DIR_Pin;
 8005c4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c52:	2301      	movs	r3, #1
 8005c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c56:	2300      	movs	r3, #0
 8005c58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP_DIR_GPIO_Port, &GPIO_InitStruct);
 8005c5e:	f107 031c 	add.w	r3, r7, #28
 8005c62:	4619      	mov	r1, r3
 8005c64:	4827      	ldr	r0, [pc, #156]	@ (8005d04 <MX_GPIO_Init+0x214>)
 8005c66:	f001 f96d 	bl	8006f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_FLAG_Pin */
  GPIO_InitStruct.Pin = STEP_FLAG_Pin;
 8005c6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c70:	2300      	movs	r3, #0
 8005c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c74:	2301      	movs	r3, #1
 8005c76:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(STEP_FLAG_GPIO_Port, &GPIO_InitStruct);
 8005c78:	f107 031c 	add.w	r3, r7, #28
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	4821      	ldr	r0, [pc, #132]	@ (8005d04 <MX_GPIO_Init+0x214>)
 8005c80:	f001 f960 	bl	8006f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPINDLE_ENA_L_Pin SPINDLE_ENA_R_Pin */
  GPIO_InitStruct.Pin = SPINDLE_ENA_L_Pin|SPINDLE_ENA_R_Pin;
 8005c84:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8005c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c92:	2300      	movs	r3, #0
 8005c94:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005c96:	f107 031c 	add.w	r3, r7, #28
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	481a      	ldr	r0, [pc, #104]	@ (8005d08 <MX_GPIO_Init+0x218>)
 8005c9e:	f001 f951 	bl	8006f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_SPI_CS_Pin */
  GPIO_InitStruct.Pin = STEP_SPI_CS_Pin;
 8005ca2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cac:	2300      	movs	r3, #0
 8005cae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8005cb4:	f107 031c 	add.w	r3, r7, #28
 8005cb8:	4619      	mov	r1, r3
 8005cba:	4814      	ldr	r0, [pc, #80]	@ (8005d0c <MX_GPIO_Init+0x21c>)
 8005cbc:	f001 f942 	bl	8006f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : REFERENCE_MARK_Pin LIMIT_SWITCH_Pin */
  GPIO_InitStruct.Pin = REFERENCE_MARK_Pin|LIMIT_SWITCH_Pin;
 8005cc0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cce:	f107 031c 	add.w	r3, r7, #28
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	480a      	ldr	r0, [pc, #40]	@ (8005d00 <MX_GPIO_Init+0x210>)
 8005cd6:	f001 f935 	bl	8006f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPINDLE_SI_L_Pin */
  GPIO_InitStruct.Pin = SPINDLE_SI_L_Pin;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPINDLE_SI_L_GPIO_Port, &GPIO_InitStruct);
 8005ce6:	f107 031c 	add.w	r3, r7, #28
 8005cea:	4619      	mov	r1, r3
 8005cec:	4806      	ldr	r0, [pc, #24]	@ (8005d08 <MX_GPIO_Init+0x218>)
 8005cee:	f001 f929 	bl	8006f44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005cf2:	bf00      	nop
 8005cf4:	3730      	adds	r7, #48	@ 0x30
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	40023800 	.word	0x40023800
 8005d00:	40020400 	.word	0x40020400
 8005d04:	40021400 	.word	0x40021400
 8005d08:	40021000 	.word	0x40021000
 8005d0c:	40020c00 	.word	0x40020c00
 8005d10:	40020800 	.word	0x40020800
 8005d14:	40020000 	.word	0x40020000

08005d18 <vAssertCalled>:

/* USER CODE BEGIN 4 */
void vAssertCalled(const char *const pcFileName, unsigned long ulLine)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  volatile uint32_t ulSetToNonZeroInDebuggerToContinue = 0;
 8005d22:	2300      	movs	r3, #0
 8005d24:	60fb      	str	r3, [r7, #12]

  /* Parameters are not used. */
  (void)ulLine;
  (void)pcFileName;

  taskENTER_CRITICAL();
 8005d26:	f00b fbab 	bl	8011480 <vPortEnterCritical>
  {
    /* You can step out of this function to debug the assertion by using
     the debugger to set ulSetToNonZeroInDebuggerToContinue to a non-zero
     value. */
    while (ulSetToNonZeroInDebuggerToContinue == 0)
 8005d2a:	bf00      	nop
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d0fc      	beq.n	8005d2c <vAssertCalled+0x14>
    {
    }
  }
  taskEXIT_CRITICAL();
 8005d32:	f00b fbdd 	bl	80114f0 <vPortExitCritical>
}
 8005d36:	bf00      	nop
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
	...

08005d40 <__stdout_put_char>:

int __stdout_put_char(int ch)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  uint8_t val = ch;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	73fb      	strb	r3, [r7, #15]
  while ((huart3.Instance->ISR & UART_FLAG_TXE) == 0)
 8005d4c:	bf00      	nop
 8005d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d84 <__stdout_put_char+0x44>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	69db      	ldr	r3, [r3, #28]
 8005d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d0f8      	beq.n	8005d4e <__stdout_put_char+0xe>
    ;
  huart3.Instance->TDR = val;
 8005d5c:	4b09      	ldr	r3, [pc, #36]	@ (8005d84 <__stdout_put_char+0x44>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	7bfa      	ldrb	r2, [r7, #15]
 8005d62:	629a      	str	r2, [r3, #40]	@ 0x28
  while ((huart3.Instance->ISR & UART_FLAG_TC) == 0)
 8005d64:	bf00      	nop
 8005d66:	4b07      	ldr	r3, [pc, #28]	@ (8005d84 <__stdout_put_char+0x44>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69db      	ldr	r3, [r3, #28]
 8005d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d0f8      	beq.n	8005d66 <__stdout_put_char+0x26>
    ;
  return 0;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3714      	adds	r7, #20
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	20000424 	.word	0x20000424

08005d88 <__stdin_get_char>:

int __stdin_get_char(void)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	af00      	add	r7, sp, #0
  if (huart3.Instance->ISR & UART_FLAG_ORE)
 8005d8c:	4b19      	ldr	r3, [pc, #100]	@ (8005df4 <__stdin_get_char+0x6c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	f003 0308 	and.w	r3, r3, #8
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <__stdin_get_char+0x1a>
    huart3.Instance->ICR = UART_CLEAR_OREF;
 8005d9a:	4b16      	ldr	r3, [pc, #88]	@ (8005df4 <__stdin_get_char+0x6c>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2208      	movs	r2, #8
 8005da0:	621a      	str	r2, [r3, #32]

  if (huart3.Instance->ISR & UART_FLAG_NE)
 8005da2:	4b14      	ldr	r3, [pc, #80]	@ (8005df4 <__stdin_get_char+0x6c>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	69db      	ldr	r3, [r3, #28]
 8005da8:	f003 0304 	and.w	r3, r3, #4
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d003      	beq.n	8005db8 <__stdin_get_char+0x30>
    huart3.Instance->ICR = UART_CLEAR_NEF;
 8005db0:	4b10      	ldr	r3, [pc, #64]	@ (8005df4 <__stdin_get_char+0x6c>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2204      	movs	r2, #4
 8005db6:	621a      	str	r2, [r3, #32]

  if (huart3.Instance->ISR & UART_FLAG_FE)
 8005db8:	4b0e      	ldr	r3, [pc, #56]	@ (8005df4 <__stdin_get_char+0x6c>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <__stdin_get_char+0x46>
    huart3.Instance->ICR = UART_CLEAR_FEF;
 8005dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8005df4 <__stdin_get_char+0x6c>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	621a      	str	r2, [r3, #32]

  if ((huart3.Instance->ISR & UART_FLAG_RXNE) == 0)
 8005dce:	4b09      	ldr	r3, [pc, #36]	@ (8005df4 <__stdin_get_char+0x6c>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	f003 0320 	and.w	r3, r3, #32
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d102      	bne.n	8005de2 <__stdin_get_char+0x5a>
    return -1;
 8005ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8005de0:	e002      	b.n	8005de8 <__stdin_get_char+0x60>
  return huart3.Instance->RDR;
 8005de2:	4b04      	ldr	r3, [pc, #16]	@ (8005df4 <__stdin_get_char+0x6c>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	20000424 	.word	0x20000424

08005df8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8005dfe:	463b      	mov	r3, r7
 8005e00:	2200      	movs	r2, #0
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	605a      	str	r2, [r3, #4]
 8005e06:	609a      	str	r2, [r3, #8]
 8005e08:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8005e0a:	f000 feeb 	bl	8006be4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8005e12:	2300      	movs	r3, #0
 8005e14:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8005e16:	2300      	movs	r3, #0
 8005e18:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8005e1a:	230d      	movs	r3, #13
 8005e1c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8005e22:	2300      	movs	r3, #0
 8005e24:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 8005e26:	2306      	movs	r3, #6
 8005e28:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8005e32:	2300      	movs	r3, #0
 8005e34:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8005e36:	2300      	movs	r3, #0
 8005e38:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005e3a:	463b      	mov	r3, r7
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 ff09 	bl	8006c54 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8005e42:	2301      	movs	r3, #1
 8005e44:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x60000000;
 8005e46:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8005e4a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8005e4c:	231f      	movs	r3, #31
 8005e4e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8005e50:	2387      	movs	r3, #135	@ 0x87
 8005e52:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8005e54:	2300      	movs	r3, #0
 8005e56:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005e60:	463b      	mov	r3, r7
 8005e62:	4618      	mov	r0, r3
 8005e64:	f000 fef6 	bl	8006c54 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8005e68:	2004      	movs	r0, #4
 8005e6a:	f000 fed3 	bl	8006c14 <HAL_MPU_Enable>

}
 8005e6e:	bf00      	nop
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005e76:	b480      	push	{r7}
 8005e78:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005e7a:	b672      	cpsid	i
}
 8005e7c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005e7e:	bf00      	nop
 8005e80:	e7fd      	b.n	8005e7e <Error_Handler+0x8>
	...

08005e84 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  portENTER_CRITICAL();
 8005e8e:	f00b faf7 	bl	8011480 <vPortEnterCritical>

  printf("HAL_ASSERT: %s:::%u\r\n", (char *)file, (unsigned int)line);
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	6879      	ldr	r1, [r7, #4]
 8005e96:	4805      	ldr	r0, [pc, #20]	@ (8005eac <assert_failed+0x28>)
 8005e98:	f00d fd14 	bl	80138c4 <iprintf>
  assert(0);
 8005e9c:	4b04      	ldr	r3, [pc, #16]	@ (8005eb0 <assert_failed+0x2c>)
 8005e9e:	4a05      	ldr	r2, [pc, #20]	@ (8005eb4 <assert_failed+0x30>)
 8005ea0:	f240 310b 	movw	r1, #779	@ 0x30b
 8005ea4:	4804      	ldr	r0, [pc, #16]	@ (8005eb8 <assert_failed+0x34>)
 8005ea6:	f00b fbdb 	bl	8011660 <__assert_func>
 8005eaa:	bf00      	nop
 8005eac:	08017938 	.word	0x08017938
 8005eb0:	08017950 	.word	0x08017950
 8005eb4:	080182fc 	.word	0x080182fc
 8005eb8:	08017954 	.word	0x08017954

08005ebc <initialise_monitor_handles>:
 * is called. afterwards main would be called.
 */
// ----------------------------------------------------------------------------
void initialise_monitor_handles( void )
// ----------------------------------------------------------------------------
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	af00      	add	r7, sp, #0

}
 8005ec0:	bf00      	nop
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
	...

08005ecc <initialise_stdlib_abstraction>:
 */
// ----------------------------------------------------------------------------
__attribute__((constructor))
void initialise_stdlib_abstraction( void )
// ----------------------------------------------------------------------------
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	af00      	add	r7, sp, #0
    initialise_monitor_handles();
 8005ed0:	f7ff fff4 	bl	8005ebc <initialise_monitor_handles>

#if defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_STDOUT)
    stdioSemaphore = xSemaphoreCreateRecursiveMutex();
 8005ed4:	2004      	movs	r0, #4
 8005ed6:	f008 fbe2 	bl	800e69e <xQueueCreateMutex>
 8005eda:	4603      	mov	r3, r0
 8005edc:	4a15      	ldr	r2, [pc, #84]	@ (8005f34 <initialise_stdlib_abstraction+0x68>)
 8005ede:	6013      	str	r3, [r2, #0]

    if ( stdioSemaphore == 0 )
 8005ee0:	4b14      	ldr	r3, [pc, #80]	@ (8005f34 <initialise_stdlib_abstraction+0x68>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d104      	bne.n	8005ef2 <initialise_stdlib_abstraction+0x26>
    {
        vAssertCalled( __FILE__, __LINE__ );
 8005ee8:	f240 110b 	movw	r1, #267	@ 0x10b
 8005eec:	4812      	ldr	r0, [pc, #72]	@ (8005f38 <initialise_stdlib_abstraction+0x6c>)
 8005eee:	f7ff ff13 	bl	8005d18 <vAssertCalled>
    }
#endif
#if defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_MALLOC)
    mallocSemaphore = xSemaphoreCreateRecursiveMutex();
 8005ef2:	2004      	movs	r0, #4
 8005ef4:	f008 fbd3 	bl	800e69e <xQueueCreateMutex>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	4a10      	ldr	r2, [pc, #64]	@ (8005f3c <initialise_stdlib_abstraction+0x70>)
 8005efc:	6013      	str	r3, [r2, #0]

    if ( mallocSemaphore == 0 )
 8005efe:	4b0f      	ldr	r3, [pc, #60]	@ (8005f3c <initialise_stdlib_abstraction+0x70>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d104      	bne.n	8005f10 <initialise_stdlib_abstraction+0x44>
    {
        vAssertCalled( __FILE__, __LINE__ );
 8005f06:	f240 1113 	movw	r1, #275	@ 0x113
 8005f0a:	480b      	ldr	r0, [pc, #44]	@ (8005f38 <initialise_stdlib_abstraction+0x6c>)
 8005f0c:	f7ff ff04 	bl	8005d18 <vAssertCalled>
    }
#endif
#if defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_ENV)
    envSemaphore = xSemaphoreCreateRecursiveMutex();
 8005f10:	2004      	movs	r0, #4
 8005f12:	f008 fbc4 	bl	800e69e <xQueueCreateMutex>
 8005f16:	4603      	mov	r3, r0
 8005f18:	4a09      	ldr	r2, [pc, #36]	@ (8005f40 <initialise_stdlib_abstraction+0x74>)
 8005f1a:	6013      	str	r3, [r2, #0]

    if ( envSemaphore == 0 )
 8005f1c:	4b08      	ldr	r3, [pc, #32]	@ (8005f40 <initialise_stdlib_abstraction+0x74>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d104      	bne.n	8005f2e <initialise_stdlib_abstraction+0x62>
    {
        vAssertCalled( __FILE__, __LINE__ );
 8005f24:	f240 111b 	movw	r1, #283	@ 0x11b
 8005f28:	4803      	ldr	r0, [pc, #12]	@ (8005f38 <initialise_stdlib_abstraction+0x6c>)
 8005f2a:	f7ff fef5 	bl	8005d18 <vAssertCalled>
    }
#endif
}
 8005f2e:	bf00      	nop
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	200004b0 	.word	0x200004b0
 8005f38:	08017a2c 	.word	0x08017a2c
 8005f3c:	200004b4 	.word	0x200004b4
 8005f40:	200004b8 	.word	0x200004b8

08005f44 <_getpid>:
 * "machine mode"
 */
// ----------------------------------------------------------------------------
int _getpid( void )
// ----------------------------------------------------------------------------
{
 8005f44:	b480      	push	{r7}
 8005f46:	af00      	add	r7, sp, #0
    return 1;
 8005f48:	2301      	movs	r3, #1
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <_kill>:
 * process with PID 1
 */
// ----------------------------------------------------------------------------
int _kill( int pid, int sig )
// ----------------------------------------------------------------------------
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
    ( void )pid;
    ( void )sig;

    if ( _impure_ptr != 0 )
 8005f5e:	4b09      	ldr	r3, [pc, #36]	@ (8005f84 <_kill+0x30>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <_kill+0x1a>
    {
        _impure_ptr->_errno = EINVAL;
 8005f66:	4b07      	ldr	r3, [pc, #28]	@ (8005f84 <_kill+0x30>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2216      	movs	r2, #22
 8005f6c:	601a      	str	r2, [r3, #0]
    }
    errno = EINVAL;
 8005f6e:	f00e f837 	bl	8013fe0 <__errno>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2216      	movs	r2, #22
 8005f76:	601a      	str	r2, [r3, #0]
    return -1;
 8005f78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3708      	adds	r7, #8
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	200001d4 	.word	0x200001d4

08005f88 <_exit>:
 */
// ----------------------------------------------------------------------------
__attribute__( ( noreturn ) )
void _exit ( int status )
// ----------------------------------------------------------------------------
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
    _kill( status, -1 );
 8005f90:	f04f 31ff 	mov.w	r1, #4294967295
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f7ff ffdd 	bl	8005f54 <_kill>
    while ( 1 ) {}
 8005f9a:	bf00      	nop
 8005f9c:	e7fd      	b.n	8005f9a <_exit+0x12>
	...

08005fa0 <_read>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _read( int file, char* ptr, int len )
// ----------------------------------------------------------------------------
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b088      	sub	sp, #32
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
    ( void )file;

    int DataIdx;
    int resLen = 0;
 8005fac:	2300      	movs	r3, #0
 8005fae:	61bb      	str	r3, [r7, #24]

    if ( file == STDIN_FILENO )
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d121      	bne.n	8005ffa <_read+0x5a>
    {
        for ( DataIdx = 0; DataIdx < len; )
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	61fb      	str	r3, [r7, #28]
 8005fba:	e019      	b.n	8005ff0 <_read+0x50>
        {
            int result = __stdin_get_char();
 8005fbc:	f7ff fee4 	bl	8005d88 <__stdin_get_char>
 8005fc0:	6178      	str	r0, [r7, #20]
            if ( result == EOF )
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc8:	d106      	bne.n	8005fd8 <_read+0x38>
            {
                if ( resLen == 0 )
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d124      	bne.n	800601a <_read+0x7a>
                {
                    resLen = EOF;
 8005fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fd4:	61bb      	str	r3, [r7, #24]
                }
                break;
 8005fd6:	e020      	b.n	800601a <_read+0x7a>
            }

            *ptr++ = ( char )result;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	1c5a      	adds	r2, r3, #1
 8005fdc:	60ba      	str	r2, [r7, #8]
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	b2d2      	uxtb	r2, r2
 8005fe2:	701a      	strb	r2, [r3, #0]
            resLen++;
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	61bb      	str	r3, [r7, #24]
            DataIdx++;
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	3301      	adds	r3, #1
 8005fee:	61fb      	str	r3, [r7, #28]
        for ( DataIdx = 0; DataIdx < len; )
 8005ff0:	69fa      	ldr	r2, [r7, #28]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	dbe1      	blt.n	8005fbc <_read+0x1c>
 8005ff8:	e010      	b.n	800601c <_read+0x7c>

        }
    }
    else
    {
        if ( _impure_ptr != 0 )
 8005ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8006028 <_read+0x88>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <_read+0x6a>
        {
            _impure_ptr->_errno = EBADF;
 8006002:	4b09      	ldr	r3, [pc, #36]	@ (8006028 <_read+0x88>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2209      	movs	r2, #9
 8006008:	601a      	str	r2, [r3, #0]
        }
        errno = EBADF;
 800600a:	f00d ffe9 	bl	8013fe0 <__errno>
 800600e:	4603      	mov	r3, r0
 8006010:	2209      	movs	r2, #9
 8006012:	601a      	str	r2, [r3, #0]
        return -1;
 8006014:	f04f 33ff 	mov.w	r3, #4294967295
 8006018:	e001      	b.n	800601e <_read+0x7e>
                break;
 800601a:	bf00      	nop
    }

    return resLen;
 800601c:	69bb      	ldr	r3, [r7, #24]
}
 800601e:	4618      	mov	r0, r3
 8006020:	3720      	adds	r7, #32
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	200001d4 	.word	0x200001d4

0800602c <_write>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _write( int file, char* ptr, int len )
// ----------------------------------------------------------------------------
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
    ( void )file;

    int DataIdx, locked = 0;
 8006038:	2300      	movs	r3, #0
 800603a:	613b      	str	r3, [r7, #16]

    if ( file == STDOUT_FILENO || file == STDERR_FILENO )
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d002      	beq.n	8006048 <_write+0x1c>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2b02      	cmp	r3, #2
 8006046:	d149      	bne.n	80060dc <_write+0xb0>
    {

#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_STDOUT)
        if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006048:	f00a fb42 	bl	80106d0 <xTaskGetSchedulerState>
 800604c:	4603      	mov	r3, r0
 800604e:	2b02      	cmp	r3, #2
 8006050:	d108      	bne.n	8006064 <_write+0x38>
        {
            xSemaphoreTakeRecursive( stdioSemaphore, -1 );
 8006052:	4b2c      	ldr	r3, [pc, #176]	@ (8006104 <_write+0xd8>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f04f 31ff 	mov.w	r1, #4294967295
 800605a:	4618      	mov	r0, r3
 800605c:	f008 fb74 	bl	800e748 <xQueueTakeMutexRecursive>
            locked = 1;
 8006060:	2301      	movs	r3, #1
 8006062:	613b      	str	r3, [r7, #16]
        }
#endif

        if (file == STDERR_FILENO)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b02      	cmp	r3, #2
 8006068:	d10e      	bne.n	8006088 <_write+0x5c>
        {
        	__stdout_put_char('\033');
 800606a:	201b      	movs	r0, #27
 800606c:	f7ff fe68 	bl	8005d40 <__stdout_put_char>
        	__stdout_put_char('[');
 8006070:	205b      	movs	r0, #91	@ 0x5b
 8006072:	f7ff fe65 	bl	8005d40 <__stdout_put_char>
        	__stdout_put_char('3');
 8006076:	2033      	movs	r0, #51	@ 0x33
 8006078:	f7ff fe62 	bl	8005d40 <__stdout_put_char>
        	__stdout_put_char('1');
 800607c:	2031      	movs	r0, #49	@ 0x31
 800607e:	f7ff fe5f 	bl	8005d40 <__stdout_put_char>
        	__stdout_put_char('m');
 8006082:	206d      	movs	r0, #109	@ 0x6d
 8006084:	f7ff fe5c 	bl	8005d40 <__stdout_put_char>
        }
        for ( DataIdx = 0; DataIdx < len; DataIdx++ )
 8006088:	2300      	movs	r3, #0
 800608a:	617b      	str	r3, [r7, #20]
 800608c:	e009      	b.n	80060a2 <_write+0x76>
        {
            __stdout_put_char( ptr[DataIdx] );
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	4413      	add	r3, r2
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	4618      	mov	r0, r3
 8006098:	f7ff fe52 	bl	8005d40 <__stdout_put_char>
        for ( DataIdx = 0; DataIdx < len; DataIdx++ )
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	3301      	adds	r3, #1
 80060a0:	617b      	str	r3, [r7, #20]
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	dbf1      	blt.n	800608e <_write+0x62>
        }
        if (file == STDERR_FILENO)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d10b      	bne.n	80060c8 <_write+0x9c>
        {
        	__stdout_put_char('\033');
 80060b0:	201b      	movs	r0, #27
 80060b2:	f7ff fe45 	bl	8005d40 <__stdout_put_char>
        	__stdout_put_char('[');
 80060b6:	205b      	movs	r0, #91	@ 0x5b
 80060b8:	f7ff fe42 	bl	8005d40 <__stdout_put_char>
        	__stdout_put_char('0');
 80060bc:	2030      	movs	r0, #48	@ 0x30
 80060be:	f7ff fe3f 	bl	8005d40 <__stdout_put_char>
        	__stdout_put_char('m');
 80060c2:	206d      	movs	r0, #109	@ 0x6d
 80060c4:	f7ff fe3c 	bl	8005d40 <__stdout_put_char>
        }

#if defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_STDOUT)
        if ( locked )
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d004      	beq.n	80060d8 <_write+0xac>
        {
            xSemaphoreGiveRecursive( stdioSemaphore );
 80060ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006104 <_write+0xd8>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f008 fafc 	bl	800e6d0 <xQueueGiveMutexRecursive>
        }
#endif

        return len;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	e00e      	b.n	80060fa <_write+0xce>
    }
    else
    {
        if ( _impure_ptr != 0 )
 80060dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006108 <_write+0xdc>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d003      	beq.n	80060ec <_write+0xc0>
        {
            _impure_ptr->_errno = EBADF;
 80060e4:	4b08      	ldr	r3, [pc, #32]	@ (8006108 <_write+0xdc>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2209      	movs	r2, #9
 80060ea:	601a      	str	r2, [r3, #0]
        }
        errno = EBADF;
 80060ec:	f00d ff78 	bl	8013fe0 <__errno>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2209      	movs	r2, #9
 80060f4:	601a      	str	r2, [r3, #0]
        return -1;
 80060f6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3718      	adds	r7, #24
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	200004b0 	.word	0x200004b0
 8006108:	200001d4 	.word	0x200001d4

0800610c <_close>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _close( int file )
// ----------------------------------------------------------------------------
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
    ( void )file;

    return -1;
 8006114:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006118:	4618      	mov	r0, r3
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <_fstat>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _fstat( int file, struct stat* st )
// ----------------------------------------------------------------------------
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
    st->st_dev    = file;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	b21a      	sxth	r2, r3
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	801a      	strh	r2, [r3, #0]
    st->st_size   = 0;
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2200      	movs	r2, #0
 800613a:	611a      	str	r2, [r3, #16]
    st->st_blocks = 0;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	2200      	movs	r2, #0
 8006140:	64da      	str	r2, [r3, #76]	@ 0x4c

    if ( file >= 1 && file <= 3 )
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	dd08      	ble.n	800615a <_fstat+0x36>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b03      	cmp	r3, #3
 800614c:	dc05      	bgt.n	800615a <_fstat+0x36>
    {
        st->st_mode = S_IFCHR;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006154:	605a      	str	r2, [r3, #4]
        return 0;
 8006156:	2300      	movs	r3, #0
 8006158:	e005      	b.n	8006166 <_fstat+0x42>
    }
    else
    {
        st->st_mode = S_IFREG;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006160:	605a      	str	r2, [r3, #4]
        return -1;
 8006162:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8006166:	4618      	mov	r0, r3
 8006168:	370c      	adds	r7, #12
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr

08006172 <_isatty>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _isatty( int file )
// ----------------------------------------------------------------------------
{
 8006172:	b480      	push	{r7}
 8006174:	b083      	sub	sp, #12
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
    // is stdin, stdout or stderror
    if ( file >= 0 && file <= 2 )
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	db04      	blt.n	800618a <_isatty+0x18>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b02      	cmp	r3, #2
 8006184:	dc01      	bgt.n	800618a <_isatty+0x18>
    {
        return file;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	e000      	b.n	800618c <_isatty+0x1a>
    }
    return 0;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <_lseek>:

// ----------------------------------------------------------------------------
int _lseek( int file, int ptr, int dir )
// ----------------------------------------------------------------------------
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
    ( void )file;
    ( void )ptr;
    ( void )dir;

    return 0;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
	...

080061b4 <_sbrk_r>:
static UBaseType_t malLock_uxSavedInterruptStatus;

// ----------------------------------------------------------------------------
void* _sbrk_r( struct _reent* pReent, int incr )
// ----------------------------------------------------------------------------
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b088      	sub	sp, #32
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
    ( void )pReent;
    ( void )incr;
    register char* stack_ptr asm( "sp" );

    // make sure to calculate the correct heap size and bytes remaining at the first call!
    if( TotalHeapSize == 0 )
 80061be:	4b37      	ldr	r3, [pc, #220]	@ (800629c <_sbrk_r+0xe8>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d113      	bne.n	80061ee <_sbrk_r+0x3a>
    {
        TotalHeapSize = heapBytesRemaining = stickyHeapBytesRemaining
                                             = ( int )( ( &__HeapLimit ) - ( &__HeapBase ) )
 80061c6:	4a36      	ldr	r2, [pc, #216]	@ (80062a0 <_sbrk_r+0xec>)
 80061c8:	4b36      	ldr	r3, [pc, #216]	@ (80062a4 <_sbrk_r+0xf0>)
 80061ca:	1ad3      	subs	r3, r2, r3
#ifdef configISR_STACK_SIZE_WORDS
                                               - ( configISR_STACK_SIZE_WORDS * 4 )
 80061cc:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80061d0:	461a      	mov	r2, r3
                                             = ( int )( ( &__HeapLimit ) - ( &__HeapBase ) )
 80061d2:	4b35      	ldr	r3, [pc, #212]	@ (80062a8 <_sbrk_r+0xf4>)
 80061d4:	601a      	str	r2, [r3, #0]
 80061d6:	4a32      	ldr	r2, [pc, #200]	@ (80062a0 <_sbrk_r+0xec>)
 80061d8:	4b32      	ldr	r3, [pc, #200]	@ (80062a4 <_sbrk_r+0xf0>)
 80061da:	1ad3      	subs	r3, r2, r3
                                               - ( configISR_STACK_SIZE_WORDS * 4 )
 80061dc:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
        TotalHeapSize = heapBytesRemaining = stickyHeapBytesRemaining
 80061e0:	4a32      	ldr	r2, [pc, #200]	@ (80062ac <_sbrk_r+0xf8>)
 80061e2:	6013      	str	r3, [r2, #0]
 80061e4:	4b31      	ldr	r3, [pc, #196]	@ (80062ac <_sbrk_r+0xf8>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	461a      	mov	r2, r3
 80061ea:	4b2c      	ldr	r3, [pc, #176]	@ (800629c <_sbrk_r+0xe8>)
 80061ec:	601a      	str	r2, [r3, #0]
#endif
                                               ;
    };
    static char* currentHeapEnd = &__HeapBase;
    char* limit = ( xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED ) ?
 80061ee:	f00a fa6f 	bl	80106d0 <xTaskGetSchedulerState>
 80061f2:	4603      	mov	r3, r0
                  stack_ptr   :  // Before scheduler is started, limit is stack pointer (risky!)
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d101      	bne.n	80061fc <_sbrk_r+0x48>
 80061f8:	466b      	mov	r3, sp
 80061fa:	e000      	b.n	80061fe <_sbrk_r+0x4a>
 80061fc:	4b2c      	ldr	r3, [pc, #176]	@ (80062b0 <_sbrk_r+0xfc>)
    char* limit = ( xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED ) ?
 80061fe:	61fb      	str	r3, [r7, #28]
    __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006200:	f3ef 8305 	mrs	r3, IPSR
 8006204:	613b      	str	r3, [r7, #16]
    if( ulCurrentInterrupt == 0 )
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d102      	bne.n	8006212 <_sbrk_r+0x5e>
        xReturn = pdFALSE;
 800620c:	2300      	movs	r3, #0
 800620e:	60fb      	str	r3, [r7, #12]
 8006210:	e001      	b.n	8006216 <_sbrk_r+0x62>
        xReturn = pdTRUE;
 8006212:	2301      	movs	r3, #1
 8006214:	60fb      	str	r3, [r7, #12]
    return xReturn;
 8006216:	68fb      	ldr	r3, [r7, #12]
                  &__HeapLimit
#ifdef configISR_STACK_SIZE_WORDS
                  - ( configISR_STACK_SIZE_WORDS * 4 )
#endif
                  ; // Once running, OK to reuse all remaining RAM except ISR stack (MSP) stack
    DRN_ENTER_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
 8006218:	61bb      	str	r3, [r7, #24]
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d010      	beq.n	8006242 <_sbrk_r+0x8e>
    __asm volatile
 8006220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006224:	b672      	cpsid	i
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	b662      	cpsie	i
 8006234:	60bb      	str	r3, [r7, #8]
}
 8006236:	bf00      	nop
 8006238:	f240 21c1 	movw	r1, #705	@ 0x2c1
 800623c:	481d      	ldr	r0, [pc, #116]	@ (80062b4 <_sbrk_r+0x100>)
 800623e:	f7ff fd6b 	bl	8005d18 <vAssertCalled>
    if ( currentHeapEnd + incr > limit )
 8006242:	4b1d      	ldr	r3, [pc, #116]	@ (80062b8 <_sbrk_r+0x104>)
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	4413      	add	r3, r2
 800624a:	69fa      	ldr	r2, [r7, #28]
 800624c:	429a      	cmp	r2, r3
 800624e:	d204      	bcs.n	800625a <_sbrk_r+0xa6>
        // Ooops, no more memory available...
#if( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            extern void vApplicationMallocFailedHook( void );
            DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
            vApplicationMallocFailedHook();
 8006250:	f7ff f8f6 	bl	8005440 <vApplicationMallocFailedHook>
#else
        // Default, if you prefer to believe your application will gracefully trap out-of-memory...
        pReent->_errno = ENOMEM; // newlib's thread-specific errno
        DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
#endif
        return ( char* ) -1; // the malloc-family routine that called sbrk will return 0
 8006254:	f04f 33ff 	mov.w	r3, #4294967295
 8006258:	e01b      	b.n	8006292 <_sbrk_r+0xde>
    }

    char* previousHeapEnd = currentHeapEnd;
 800625a:	4b17      	ldr	r3, [pc, #92]	@ (80062b8 <_sbrk_r+0x104>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	617b      	str	r3, [r7, #20]
    currentHeapEnd += incr;
 8006260:	4b15      	ldr	r3, [pc, #84]	@ (80062b8 <_sbrk_r+0x104>)
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	4413      	add	r3, r2
 8006268:	4a13      	ldr	r2, [pc, #76]	@ (80062b8 <_sbrk_r+0x104>)
 800626a:	6013      	str	r3, [r2, #0]
    heapBytesRemaining -= incr;
 800626c:	4b0f      	ldr	r3, [pc, #60]	@ (80062ac <_sbrk_r+0xf8>)
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	4a0d      	ldr	r2, [pc, #52]	@ (80062ac <_sbrk_r+0xf8>)
 8006276:	6013      	str	r3, [r2, #0]

    // implement the statistical feature to provide the minimum free heap size feature
    // of FreeRTOS statistics
    if ( stickyHeapBytesRemaining > xPortGetFreeHeapSize() )
 8006278:	f000 f8d0 	bl	800641c <xPortGetFreeHeapSize>
 800627c:	4602      	mov	r2, r0
 800627e:	4b0a      	ldr	r3, [pc, #40]	@ (80062a8 <_sbrk_r+0xf4>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	429a      	cmp	r2, r3
 8006284:	d204      	bcs.n	8006290 <_sbrk_r+0xdc>
    {
        stickyHeapBytesRemaining = xPortGetFreeHeapSize();
 8006286:	f000 f8c9 	bl	800641c <xPortGetFreeHeapSize>
 800628a:	4603      	mov	r3, r0
 800628c:	4a06      	ldr	r2, [pc, #24]	@ (80062a8 <_sbrk_r+0xf4>)
 800628e:	6013      	str	r3, [r2, #0]
    }

    DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
    return ( char* ) previousHeapEnd;
 8006290:	697b      	ldr	r3, [r7, #20]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3720      	adds	r7, #32
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	200004c4 	.word	0x200004c4
 80062a0:	20050000 	.word	0x20050000
 80062a4:	200007c0 	.word	0x200007c0
 80062a8:	200004c0 	.word	0x200004c0
 80062ac:	200004bc 	.word	0x200004bc
 80062b0:	2004c000 	.word	0x2004c000
 80062b4:	08017a2c 	.word	0x08017a2c
 80062b8:	20000048 	.word	0x20000048

080062bc <__malloc_lock>:
}

// ----------------------------------------------------------------------------
__attribute__( ( weak ) ) void __malloc_lock( struct _reent* r )
// ----------------------------------------------------------------------------
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
    ( void )r;

#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_MALLOC)
    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING  )
 80062c4:	f00a fa04 	bl	80106d0 <xTaskGetSchedulerState>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d106      	bne.n	80062dc <__malloc_lock+0x20>
    {
        xSemaphoreTakeRecursive( mallocSemaphore, -1 );
 80062ce:	4b16      	ldr	r3, [pc, #88]	@ (8006328 <__malloc_lock+0x6c>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f04f 31ff 	mov.w	r1, #4294967295
 80062d6:	4618      	mov	r0, r3
 80062d8:	f008 fa36 	bl	800e748 <xQueueTakeMutexRecursive>
    __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80062dc:	f3ef 8305 	mrs	r3, IPSR
 80062e0:	613b      	str	r3, [r7, #16]
    if( ulCurrentInterrupt == 0 )
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d102      	bne.n	80062ee <__malloc_lock+0x32>
        xReturn = pdFALSE;
 80062e8:	2300      	movs	r3, #0
 80062ea:	60fb      	str	r3, [r7, #12]
 80062ec:	e001      	b.n	80062f2 <__malloc_lock+0x36>
        xReturn = pdTRUE;
 80062ee:	2301      	movs	r3, #1
 80062f0:	60fb      	str	r3, [r7, #12]
    return xReturn;
 80062f2:	68fb      	ldr	r3, [r7, #12]
    }
#endif

    DRN_ENTER_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
 80062f4:	617b      	str	r3, [r7, #20]
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d010      	beq.n	800631e <__malloc_lock+0x62>
    __asm volatile
 80062fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006300:	b672      	cpsid	i
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	b662      	cpsie	i
 8006310:	60bb      	str	r3, [r7, #8]
}
 8006312:	bf00      	nop
 8006314:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8006318:	4804      	ldr	r0, [pc, #16]	@ (800632c <__malloc_lock+0x70>)
 800631a:	f7ff fcfd 	bl	8005d18 <vAssertCalled>
}
 800631e:	bf00      	nop
 8006320:	3718      	adds	r7, #24
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	200004b4 	.word	0x200004b4
 800632c:	08017a2c 	.word	0x08017a2c

08006330 <__malloc_unlock>:

// ----------------------------------------------------------------------------
__attribute__( ( weak ) ) void __malloc_unlock( struct _reent* r )
// ----------------------------------------------------------------------------
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
    ( void )r;

#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_MALLOC)
    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006338:	f00a f9ca 	bl	80106d0 <xTaskGetSchedulerState>
 800633c:	4603      	mov	r3, r0
 800633e:	2b02      	cmp	r3, #2
 8006340:	d104      	bne.n	800634c <__malloc_unlock+0x1c>
    {
        xSemaphoreGiveRecursive( mallocSemaphore );
 8006342:	4b04      	ldr	r3, [pc, #16]	@ (8006354 <__malloc_unlock+0x24>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4618      	mov	r0, r3
 8006348:	f008 f9c2 	bl	800e6d0 <xQueueGiveMutexRecursive>
    }
#endif

    DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
}
 800634c:	bf00      	nop
 800634e:	3708      	adds	r7, #8
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	200004b4 	.word	0x200004b4

08006358 <__env_lock>:

// ----------------------------------------------------------------------------
__attribute__( ( weak ) ) void __env_lock( void )
// ----------------------------------------------------------------------------
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_ENV)
    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800635e:	f00a f9b7 	bl	80106d0 <xTaskGetSchedulerState>
 8006362:	4603      	mov	r3, r0
 8006364:	2b02      	cmp	r3, #2
 8006366:	d106      	bne.n	8006376 <__env_lock+0x1e>
    {
        xSemaphoreTakeRecursive( envSemaphore, -1 );
 8006368:	4b15      	ldr	r3, [pc, #84]	@ (80063c0 <__env_lock+0x68>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f04f 31ff 	mov.w	r1, #4294967295
 8006370:	4618      	mov	r0, r3
 8006372:	f008 f9e9 	bl	800e748 <xQueueTakeMutexRecursive>
    __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006376:	f3ef 8305 	mrs	r3, IPSR
 800637a:	60bb      	str	r3, [r7, #8]
    if( ulCurrentInterrupt == 0 )
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d102      	bne.n	8006388 <__env_lock+0x30>
        xReturn = pdFALSE;
 8006382:	2300      	movs	r3, #0
 8006384:	607b      	str	r3, [r7, #4]
 8006386:	e001      	b.n	800638c <__env_lock+0x34>
        xReturn = pdTRUE;
 8006388:	2301      	movs	r3, #1
 800638a:	607b      	str	r3, [r7, #4]
    return xReturn;
 800638c:	687b      	ldr	r3, [r7, #4]
    }
#endif

    DRN_ENTER_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
 800638e:	60fb      	str	r3, [r7, #12]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d010      	beq.n	80063b8 <__env_lock+0x60>
    __asm volatile
 8006396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800639a:	b672      	cpsid	i
 800639c:	f383 8811 	msr	BASEPRI, r3
 80063a0:	f3bf 8f6f 	isb	sy
 80063a4:	f3bf 8f4f 	dsb	sy
 80063a8:	b662      	cpsie	i
 80063aa:	603b      	str	r3, [r7, #0]
}
 80063ac:	bf00      	nop
 80063ae:	f240 3126 	movw	r1, #806	@ 0x326
 80063b2:	4804      	ldr	r0, [pc, #16]	@ (80063c4 <__env_lock+0x6c>)
 80063b4:	f7ff fcb0 	bl	8005d18 <vAssertCalled>
}
 80063b8:	bf00      	nop
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	200004b8 	.word	0x200004b8
 80063c4:	08017a2c 	.word	0x08017a2c

080063c8 <__env_unlock>:

// ----------------------------------------------------------------------------
__attribute__( ( weak ) ) void __env_unlock( void )
// ----------------------------------------------------------------------------
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	af00      	add	r7, sp, #0
#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_ENV)
    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80063cc:	f00a f980 	bl	80106d0 <xTaskGetSchedulerState>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d104      	bne.n	80063e0 <__env_unlock+0x18>
    {
        xSemaphoreGiveRecursive( envSemaphore );
 80063d6:	4b03      	ldr	r3, [pc, #12]	@ (80063e4 <__env_unlock+0x1c>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4618      	mov	r0, r3
 80063dc:	f008 f978 	bl	800e6d0 <xQueueGiveMutexRecursive>
    }
#endif

    DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
}
 80063e0:	bf00      	nop
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	200004b8 	.word	0x200004b8

080063e8 <pvPortMalloc>:

// ----------------------------------------------------------------------------
void* pvPortMalloc( size_t xSize )
// ----------------------------------------------------------------------------
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
    void* p = malloc( xSize );
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f00b f9bf 	bl	8011774 <malloc>
 80063f6:	4603      	mov	r3, r0
 80063f8:	60fb      	str	r3, [r7, #12]
    return p;
 80063fa:	68fb      	ldr	r3, [r7, #12]
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <vPortFree>:

// ----------------------------------------------------------------------------
void vPortFree( void* pv )
// ----------------------------------------------------------------------------
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
    free( pv );
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f00b f9b9 	bl	8011784 <free>
}
 8006412:	bf00      	nop
 8006414:	3708      	adds	r7, #8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
	...

0800641c <xPortGetFreeHeapSize>:

// ----------------------------------------------------------------------------
size_t xPortGetFreeHeapSize( void )
// ----------------------------------------------------------------------------
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b08c      	sub	sp, #48	@ 0x30
 8006420:	af00      	add	r7, sp, #0
	static int lockGuard = 0;
	if ( lockGuard != 0 ) return stickyHeapBytesRemaining;
 8006422:	4b0d      	ldr	r3, [pc, #52]	@ (8006458 <xPortGetFreeHeapSize+0x3c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d002      	beq.n	8006430 <xPortGetFreeHeapSize+0x14>
 800642a:	4b0c      	ldr	r3, [pc, #48]	@ (800645c <xPortGetFreeHeapSize+0x40>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	e00f      	b.n	8006450 <xPortGetFreeHeapSize+0x34>
	lockGuard = 1;
 8006430:	4b09      	ldr	r3, [pc, #36]	@ (8006458 <xPortGetFreeHeapSize+0x3c>)
 8006432:	2201      	movs	r2, #1
 8006434:	601a      	str	r2, [r3, #0]
    struct mallinfo mi = mallinfo();
 8006436:	1d3b      	adds	r3, r7, #4
 8006438:	4618      	mov	r0, r3
 800643a:	f00b fa4d 	bl	80118d8 <mallinfo>
    size_t result = mi.fordblks + heapBytesRemaining;
 800643e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006440:	4a07      	ldr	r2, [pc, #28]	@ (8006460 <xPortGetFreeHeapSize+0x44>)
 8006442:	6812      	ldr	r2, [r2, #0]
 8006444:	4413      	add	r3, r2
 8006446:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lockGuard = 0;
 8006448:	4b03      	ldr	r3, [pc, #12]	@ (8006458 <xPortGetFreeHeapSize+0x3c>)
 800644a:	2200      	movs	r2, #0
 800644c:	601a      	str	r2, [r3, #0]
    return result;
 800644e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

}
 8006450:	4618      	mov	r0, r3
 8006452:	3730      	adds	r7, #48	@ 0x30
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	200004c8 	.word	0x200004c8
 800645c:	200004c0 	.word	0x200004c0
 8006460:	200004bc 	.word	0x200004bc

08006464 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800646a:	4b0f      	ldr	r3, [pc, #60]	@ (80064a8 <HAL_MspInit+0x44>)
 800646c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800646e:	4a0e      	ldr	r2, [pc, #56]	@ (80064a8 <HAL_MspInit+0x44>)
 8006470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006474:	6413      	str	r3, [r2, #64]	@ 0x40
 8006476:	4b0c      	ldr	r3, [pc, #48]	@ (80064a8 <HAL_MspInit+0x44>)
 8006478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800647e:	607b      	str	r3, [r7, #4]
 8006480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006482:	4b09      	ldr	r3, [pc, #36]	@ (80064a8 <HAL_MspInit+0x44>)
 8006484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006486:	4a08      	ldr	r2, [pc, #32]	@ (80064a8 <HAL_MspInit+0x44>)
 8006488:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800648c:	6453      	str	r3, [r2, #68]	@ 0x44
 800648e:	4b06      	ldr	r3, [pc, #24]	@ (80064a8 <HAL_MspInit+0x44>)
 8006490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006492:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006496:	603b      	str	r3, [r7, #0]
 8006498:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800649a:	bf00      	nop
 800649c:	370c      	adds	r7, #12
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	40023800 	.word	0x40023800

080064ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b08a      	sub	sp, #40	@ 0x28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064b4:	f107 0314 	add.w	r3, r7, #20
 80064b8:	2200      	movs	r2, #0
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	605a      	str	r2, [r3, #4]
 80064be:	609a      	str	r2, [r3, #8]
 80064c0:	60da      	str	r2, [r3, #12]
 80064c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a1b      	ldr	r2, [pc, #108]	@ (8006538 <HAL_SPI_MspInit+0x8c>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d12f      	bne.n	800652e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80064ce:	4b1b      	ldr	r3, [pc, #108]	@ (800653c <HAL_SPI_MspInit+0x90>)
 80064d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064d2:	4a1a      	ldr	r2, [pc, #104]	@ (800653c <HAL_SPI_MspInit+0x90>)
 80064d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80064d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80064da:	4b18      	ldr	r3, [pc, #96]	@ (800653c <HAL_SPI_MspInit+0x90>)
 80064dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80064e2:	613b      	str	r3, [r7, #16]
 80064e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064e6:	4b15      	ldr	r3, [pc, #84]	@ (800653c <HAL_SPI_MspInit+0x90>)
 80064e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ea:	4a14      	ldr	r2, [pc, #80]	@ (800653c <HAL_SPI_MspInit+0x90>)
 80064ec:	f043 0301 	orr.w	r3, r3, #1
 80064f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80064f2:	4b12      	ldr	r3, [pc, #72]	@ (800653c <HAL_SPI_MspInit+0x90>)
 80064f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = STEP_SPI_SCK_Pin|STEP_SPI_MISO_Pin|STEP_SPI_MOSI_Pin;
 80064fe:	23e0      	movs	r3, #224	@ 0xe0
 8006500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006502:	2302      	movs	r3, #2
 8006504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006506:	2300      	movs	r3, #0
 8006508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800650a:	2303      	movs	r3, #3
 800650c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800650e:	2305      	movs	r3, #5
 8006510:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006512:	f107 0314 	add.w	r3, r7, #20
 8006516:	4619      	mov	r1, r3
 8006518:	4809      	ldr	r0, [pc, #36]	@ (8006540 <HAL_SPI_MspInit+0x94>)
 800651a:	f000 fd13 	bl	8006f44 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800651e:	2200      	movs	r2, #0
 8006520:	2105      	movs	r1, #5
 8006522:	2023      	movs	r0, #35	@ 0x23
 8006524:	f000 fb0e 	bl	8006b44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8006528:	2023      	movs	r0, #35	@ 0x23
 800652a:	f000 fb37 	bl	8006b9c <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800652e:	bf00      	nop
 8006530:	3728      	adds	r7, #40	@ 0x28
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	40013000 	.word	0x40013000
 800653c:	40023800 	.word	0x40023800
 8006540:	40020000 	.word	0x40020000

08006544 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a23      	ldr	r2, [pc, #140]	@ (80065e0 <HAL_TIM_Base_MspInit+0x9c>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d11c      	bne.n	8006590 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006556:	4b23      	ldr	r3, [pc, #140]	@ (80065e4 <HAL_TIM_Base_MspInit+0xa0>)
 8006558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800655a:	4a22      	ldr	r2, [pc, #136]	@ (80065e4 <HAL_TIM_Base_MspInit+0xa0>)
 800655c:	f043 0301 	orr.w	r3, r3, #1
 8006560:	6453      	str	r3, [r2, #68]	@ 0x44
 8006562:	4b20      	ldr	r3, [pc, #128]	@ (80065e4 <HAL_TIM_Base_MspInit+0xa0>)
 8006564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	617b      	str	r3, [r7, #20]
 800656c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800656e:	2200      	movs	r2, #0
 8006570:	2100      	movs	r1, #0
 8006572:	2019      	movs	r0, #25
 8006574:	f000 fae6 	bl	8006b44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006578:	2019      	movs	r0, #25
 800657a:	f000 fb0f 	bl	8006b9c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800657e:	2200      	movs	r2, #0
 8006580:	2100      	movs	r1, #0
 8006582:	201b      	movs	r0, #27
 8006584:	f000 fade 	bl	8006b44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8006588:	201b      	movs	r0, #27
 800658a:	f000 fb07 	bl	8006b9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800658e:	e022      	b.n	80065d6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006598:	d10c      	bne.n	80065b4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800659a:	4b12      	ldr	r3, [pc, #72]	@ (80065e4 <HAL_TIM_Base_MspInit+0xa0>)
 800659c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800659e:	4a11      	ldr	r2, [pc, #68]	@ (80065e4 <HAL_TIM_Base_MspInit+0xa0>)
 80065a0:	f043 0301 	orr.w	r3, r3, #1
 80065a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80065a6:	4b0f      	ldr	r3, [pc, #60]	@ (80065e4 <HAL_TIM_Base_MspInit+0xa0>)
 80065a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	613b      	str	r3, [r7, #16]
 80065b0:	693b      	ldr	r3, [r7, #16]
}
 80065b2:	e010      	b.n	80065d6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a0b      	ldr	r2, [pc, #44]	@ (80065e8 <HAL_TIM_Base_MspInit+0xa4>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d10b      	bne.n	80065d6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80065be:	4b09      	ldr	r3, [pc, #36]	@ (80065e4 <HAL_TIM_Base_MspInit+0xa0>)
 80065c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c2:	4a08      	ldr	r2, [pc, #32]	@ (80065e4 <HAL_TIM_Base_MspInit+0xa0>)
 80065c4:	f043 0304 	orr.w	r3, r3, #4
 80065c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80065ca:	4b06      	ldr	r3, [pc, #24]	@ (80065e4 <HAL_TIM_Base_MspInit+0xa0>)
 80065cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ce:	f003 0304 	and.w	r3, r3, #4
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	68fb      	ldr	r3, [r7, #12]
}
 80065d6:	bf00      	nop
 80065d8:	3718      	adds	r7, #24
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	40010000 	.word	0x40010000
 80065e4:	40023800 	.word	0x40023800
 80065e8:	40000800 	.word	0x40000800

080065ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b08a      	sub	sp, #40	@ 0x28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065f4:	f107 0314 	add.w	r3, r7, #20
 80065f8:	2200      	movs	r2, #0
 80065fa:	601a      	str	r2, [r3, #0]
 80065fc:	605a      	str	r2, [r3, #4]
 80065fe:	609a      	str	r2, [r3, #8]
 8006600:	60da      	str	r2, [r3, #12]
 8006602:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800660c:	d11d      	bne.n	800664a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800660e:	4b22      	ldr	r3, [pc, #136]	@ (8006698 <HAL_TIM_MspPostInit+0xac>)
 8006610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006612:	4a21      	ldr	r2, [pc, #132]	@ (8006698 <HAL_TIM_MspPostInit+0xac>)
 8006614:	f043 0302 	orr.w	r3, r3, #2
 8006618:	6313      	str	r3, [r2, #48]	@ 0x30
 800661a:	4b1f      	ldr	r3, [pc, #124]	@ (8006698 <HAL_TIM_MspPostInit+0xac>)
 800661c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800661e:	f003 0302 	and.w	r3, r3, #2
 8006622:	613b      	str	r3, [r7, #16]
 8006624:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = SPINDLE_PWM_L_Pin|SPINDLE_PWM_R_Pin;
 8006626:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800662a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800662c:	2302      	movs	r3, #2
 800662e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006630:	2300      	movs	r3, #0
 8006632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006634:	2300      	movs	r3, #0
 8006636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006638:	2301      	movs	r3, #1
 800663a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800663c:	f107 0314 	add.w	r3, r7, #20
 8006640:	4619      	mov	r1, r3
 8006642:	4816      	ldr	r0, [pc, #88]	@ (800669c <HAL_TIM_MspPostInit+0xb0>)
 8006644:	f000 fc7e 	bl	8006f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8006648:	e021      	b.n	800668e <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a14      	ldr	r2, [pc, #80]	@ (80066a0 <HAL_TIM_MspPostInit+0xb4>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d11c      	bne.n	800668e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006654:	4b10      	ldr	r3, [pc, #64]	@ (8006698 <HAL_TIM_MspPostInit+0xac>)
 8006656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006658:	4a0f      	ldr	r2, [pc, #60]	@ (8006698 <HAL_TIM_MspPostInit+0xac>)
 800665a:	f043 0308 	orr.w	r3, r3, #8
 800665e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006660:	4b0d      	ldr	r3, [pc, #52]	@ (8006698 <HAL_TIM_MspPostInit+0xac>)
 8006662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006664:	f003 0308 	and.w	r3, r3, #8
 8006668:	60fb      	str	r3, [r7, #12]
 800666a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800666c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006672:	2302      	movs	r3, #2
 8006674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006676:	2300      	movs	r3, #0
 8006678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800667a:	2300      	movs	r3, #0
 800667c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800667e:	2302      	movs	r3, #2
 8006680:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006682:	f107 0314 	add.w	r3, r7, #20
 8006686:	4619      	mov	r1, r3
 8006688:	4806      	ldr	r0, [pc, #24]	@ (80066a4 <HAL_TIM_MspPostInit+0xb8>)
 800668a:	f000 fc5b 	bl	8006f44 <HAL_GPIO_Init>
}
 800668e:	bf00      	nop
 8006690:	3728      	adds	r7, #40	@ 0x28
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	40023800 	.word	0x40023800
 800669c:	40020400 	.word	0x40020400
 80066a0:	40000800 	.word	0x40000800
 80066a4:	40020c00 	.word	0x40020c00

080066a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b0aa      	sub	sp, #168	@ 0xa8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066b0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80066b4:	2200      	movs	r2, #0
 80066b6:	601a      	str	r2, [r3, #0]
 80066b8:	605a      	str	r2, [r3, #4]
 80066ba:	609a      	str	r2, [r3, #8]
 80066bc:	60da      	str	r2, [r3, #12]
 80066be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80066c0:	f107 0310 	add.w	r3, r7, #16
 80066c4:	2284      	movs	r2, #132	@ 0x84
 80066c6:	2100      	movs	r1, #0
 80066c8:	4618      	mov	r0, r3
 80066ca:	f00d fb51 	bl	8013d70 <memset>
  if(huart->Instance==USART3)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a22      	ldr	r2, [pc, #136]	@ (800675c <HAL_UART_MspInit+0xb4>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d13c      	bne.n	8006752 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80066d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80066dc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80066de:	2300      	movs	r3, #0
 80066e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80066e2:	f107 0310 	add.w	r3, r7, #16
 80066e6:	4618      	mov	r0, r3
 80066e8:	f001 fde4 	bl	80082b4 <HAL_RCCEx_PeriphCLKConfig>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d001      	beq.n	80066f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80066f2:	f7ff fbc0 	bl	8005e76 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80066f6:	4b1a      	ldr	r3, [pc, #104]	@ (8006760 <HAL_UART_MspInit+0xb8>)
 80066f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066fa:	4a19      	ldr	r2, [pc, #100]	@ (8006760 <HAL_UART_MspInit+0xb8>)
 80066fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006700:	6413      	str	r3, [r2, #64]	@ 0x40
 8006702:	4b17      	ldr	r3, [pc, #92]	@ (8006760 <HAL_UART_MspInit+0xb8>)
 8006704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006706:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800670e:	4b14      	ldr	r3, [pc, #80]	@ (8006760 <HAL_UART_MspInit+0xb8>)
 8006710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006712:	4a13      	ldr	r2, [pc, #76]	@ (8006760 <HAL_UART_MspInit+0xb8>)
 8006714:	f043 0308 	orr.w	r3, r3, #8
 8006718:	6313      	str	r3, [r2, #48]	@ 0x30
 800671a:	4b11      	ldr	r3, [pc, #68]	@ (8006760 <HAL_UART_MspInit+0xb8>)
 800671c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800671e:	f003 0308 	and.w	r3, r3, #8
 8006722:	60bb      	str	r3, [r7, #8]
 8006724:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART_TX_Pin|DEBUG_UART_RX_Pin;
 8006726:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800672a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800672e:	2302      	movs	r3, #2
 8006730:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006734:	2300      	movs	r3, #0
 8006736:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800673a:	2303      	movs	r3, #3
 800673c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006740:	2307      	movs	r3, #7
 8006742:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006746:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800674a:	4619      	mov	r1, r3
 800674c:	4805      	ldr	r0, [pc, #20]	@ (8006764 <HAL_UART_MspInit+0xbc>)
 800674e:	f000 fbf9 	bl	8006f44 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8006752:	bf00      	nop
 8006754:	37a8      	adds	r7, #168	@ 0xa8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	40004800 	.word	0x40004800
 8006760:	40023800 	.word	0x40023800
 8006764:	40020c00 	.word	0x40020c00

08006768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006768:	b480      	push	{r7}
 800676a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800676c:	bf00      	nop
 800676e:	e7fd      	b.n	800676c <NMI_Handler+0x4>

08006770 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006770:	b480      	push	{r7}
 8006772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006774:	bf00      	nop
 8006776:	e7fd      	b.n	8006774 <HardFault_Handler+0x4>

08006778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006778:	b480      	push	{r7}
 800677a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800677c:	bf00      	nop
 800677e:	e7fd      	b.n	800677c <MemManage_Handler+0x4>

08006780 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006780:	b480      	push	{r7}
 8006782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006784:	bf00      	nop
 8006786:	e7fd      	b.n	8006784 <BusFault_Handler+0x4>

08006788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006788:	b480      	push	{r7}
 800678a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800678c:	bf00      	nop
 800678e:	e7fd      	b.n	800678c <UsageFault_Handler+0x4>

08006790 <DebugMon_Handler>:
void DebugMon_Handler(void)
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
#endif
void DebugMon_Handler(void)
{
 8006790:	b480      	push	{r7}
 8006792:	af00      	add	r7, sp, #0
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
}
 8006794:	bf00      	nop
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
#endif
void SysTick_Handler(void)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	af00      	add	r7, sp, #0
  extern void xPortSysTickHandler( void );
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80067a2:	f000 f89b 	bl	80068dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  xPortSysTickHandler();
 80067a6:	f00a ff07 	bl	80115b8 <xPortSysTickHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80067aa:	bf00      	nop
 80067ac:	bd80      	pop	{r7, pc}
	...

080067b0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80067b4:	4802      	ldr	r0, [pc, #8]	@ (80067c0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80067b6:	f004 fb9d 	bl	800aef4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80067ba:	bf00      	nop
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	20000340 	.word	0x20000340

080067c4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80067c8:	4802      	ldr	r0, [pc, #8]	@ (80067d4 <TIM1_CC_IRQHandler+0x10>)
 80067ca:	f004 fb93 	bl	800aef4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80067ce:	bf00      	nop
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	20000340 	.word	0x20000340

080067d8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80067dc:	4802      	ldr	r0, [pc, #8]	@ (80067e8 <SPI1_IRQHandler+0x10>)
 80067de:	f003 f987 	bl	8009af0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80067e2:	bf00      	nop
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	200002dc 	.word	0x200002dc

080067ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80067ec:	b480      	push	{r7}
 80067ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80067f0:	4b06      	ldr	r3, [pc, #24]	@ (800680c <SystemInit+0x20>)
 80067f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067f6:	4a05      	ldr	r2, [pc, #20]	@ (800680c <SystemInit+0x20>)
 80067f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80067fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006800:	bf00      	nop
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	e000ed00 	.word	0xe000ed00

08006810 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006810:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006848 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006814:	f7ff ffea 	bl	80067ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006818:	480c      	ldr	r0, [pc, #48]	@ (800684c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800681a:	490d      	ldr	r1, [pc, #52]	@ (8006850 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800681c:	4a0d      	ldr	r2, [pc, #52]	@ (8006854 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800681e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006820:	e002      	b.n	8006828 <LoopCopyDataInit>

08006822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006826:	3304      	adds	r3, #4

08006828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800682a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800682c:	d3f9      	bcc.n	8006822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800682e:	4a0a      	ldr	r2, [pc, #40]	@ (8006858 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006830:	4c0a      	ldr	r4, [pc, #40]	@ (800685c <LoopFillZerobss+0x22>)
  movs r3, #0
 8006832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006834:	e001      	b.n	800683a <LoopFillZerobss>

08006836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006838:	3204      	adds	r2, #4

0800683a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800683a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800683c:	d3fb      	bcc.n	8006836 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800683e:	f00d fbd5 	bl	8013fec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006842:	f7fe fe9b 	bl	800557c <main>
  bx  lr    
 8006846:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006848:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800684c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006850:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8006854:	080187bc 	.word	0x080187bc
  ldr r2, =_sbss
 8006858:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 800685c:	200007c0 	.word	0x200007c0

08006860 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006860:	e7fe      	b.n	8006860 <ADC_IRQHandler>

08006862 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006866:	2003      	movs	r0, #3
 8006868:	f000 f94c 	bl	8006b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800686c:	200f      	movs	r0, #15
 800686e:	f000 f805 	bl	800687c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006872:	f7ff fdf7 	bl	8006464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	bd80      	pop	{r7, pc}

0800687c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006884:	4b12      	ldr	r3, [pc, #72]	@ (80068d0 <HAL_InitTick+0x54>)
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	4b12      	ldr	r3, [pc, #72]	@ (80068d4 <HAL_InitTick+0x58>)
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	4619      	mov	r1, r3
 800688e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006892:	fbb3 f3f1 	udiv	r3, r3, r1
 8006896:	fbb2 f3f3 	udiv	r3, r2, r3
 800689a:	4618      	mov	r0, r3
 800689c:	f000 f996 	bl	8006bcc <HAL_SYSTICK_Config>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e00e      	b.n	80068c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b0f      	cmp	r3, #15
 80068ae:	d80a      	bhi.n	80068c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80068b0:	2200      	movs	r2, #0
 80068b2:	6879      	ldr	r1, [r7, #4]
 80068b4:	f04f 30ff 	mov.w	r0, #4294967295
 80068b8:	f000 f944 	bl	8006b44 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80068bc:	4a06      	ldr	r2, [pc, #24]	@ (80068d8 <HAL_InitTick+0x5c>)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	e000      	b.n	80068c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	2000004c 	.word	0x2000004c
 80068d4:	20000054 	.word	0x20000054
 80068d8:	20000050 	.word	0x20000050

080068dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80068dc:	b480      	push	{r7}
 80068de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80068e0:	4b06      	ldr	r3, [pc, #24]	@ (80068fc <HAL_IncTick+0x20>)
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	461a      	mov	r2, r3
 80068e6:	4b06      	ldr	r3, [pc, #24]	@ (8006900 <HAL_IncTick+0x24>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4413      	add	r3, r2
 80068ec:	4a04      	ldr	r2, [pc, #16]	@ (8006900 <HAL_IncTick+0x24>)
 80068ee:	6013      	str	r3, [r2, #0]
}
 80068f0:	bf00      	nop
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	20000054 	.word	0x20000054
 8006900:	200004cc 	.word	0x200004cc

08006904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006904:	b480      	push	{r7}
 8006906:	af00      	add	r7, sp, #0
  return uwTick;
 8006908:	4b03      	ldr	r3, [pc, #12]	@ (8006918 <HAL_GetTick+0x14>)
 800690a:	681b      	ldr	r3, [r3, #0]
}
 800690c:	4618      	mov	r0, r3
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	200004cc 	.word	0x200004cc

0800691c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006924:	f7ff ffee 	bl	8006904 <HAL_GetTick>
 8006928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006934:	d005      	beq.n	8006942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006936:	4b0a      	ldr	r3, [pc, #40]	@ (8006960 <HAL_Delay+0x44>)
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	461a      	mov	r2, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4413      	add	r3, r2
 8006940:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006942:	bf00      	nop
 8006944:	f7ff ffde 	bl	8006904 <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	429a      	cmp	r2, r3
 8006952:	d8f7      	bhi.n	8006944 <HAL_Delay+0x28>
  {
  }
}
 8006954:	bf00      	nop
 8006956:	bf00      	nop
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	20000054 	.word	0x20000054

08006964 <__NVIC_SetPriorityGrouping>:
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f003 0307 	and.w	r3, r3, #7
 8006972:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006974:	4b0b      	ldr	r3, [pc, #44]	@ (80069a4 <__NVIC_SetPriorityGrouping+0x40>)
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006980:	4013      	ands	r3, r2
 8006982:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800698c:	4b06      	ldr	r3, [pc, #24]	@ (80069a8 <__NVIC_SetPriorityGrouping+0x44>)
 800698e:	4313      	orrs	r3, r2
 8006990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006992:	4a04      	ldr	r2, [pc, #16]	@ (80069a4 <__NVIC_SetPriorityGrouping+0x40>)
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	60d3      	str	r3, [r2, #12]
}
 8006998:	bf00      	nop
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr
 80069a4:	e000ed00 	.word	0xe000ed00
 80069a8:	05fa0000 	.word	0x05fa0000

080069ac <__NVIC_GetPriorityGrouping>:
{
 80069ac:	b480      	push	{r7}
 80069ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80069b0:	4b04      	ldr	r3, [pc, #16]	@ (80069c4 <__NVIC_GetPriorityGrouping+0x18>)
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	0a1b      	lsrs	r3, r3, #8
 80069b6:	f003 0307 	and.w	r3, r3, #7
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	e000ed00 	.word	0xe000ed00

080069c8 <__NVIC_EnableIRQ>:
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	4603      	mov	r3, r0
 80069d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	db0b      	blt.n	80069f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069da:	79fb      	ldrb	r3, [r7, #7]
 80069dc:	f003 021f 	and.w	r2, r3, #31
 80069e0:	4907      	ldr	r1, [pc, #28]	@ (8006a00 <__NVIC_EnableIRQ+0x38>)
 80069e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069e6:	095b      	lsrs	r3, r3, #5
 80069e8:	2001      	movs	r0, #1
 80069ea:	fa00 f202 	lsl.w	r2, r0, r2
 80069ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80069f2:	bf00      	nop
 80069f4:	370c      	adds	r7, #12
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	e000e100 	.word	0xe000e100

08006a04 <__NVIC_SetPriority>:
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	6039      	str	r1, [r7, #0]
 8006a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	db0a      	blt.n	8006a2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	490c      	ldr	r1, [pc, #48]	@ (8006a50 <__NVIC_SetPriority+0x4c>)
 8006a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a22:	0112      	lsls	r2, r2, #4
 8006a24:	b2d2      	uxtb	r2, r2
 8006a26:	440b      	add	r3, r1
 8006a28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006a2c:	e00a      	b.n	8006a44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	b2da      	uxtb	r2, r3
 8006a32:	4908      	ldr	r1, [pc, #32]	@ (8006a54 <__NVIC_SetPriority+0x50>)
 8006a34:	79fb      	ldrb	r3, [r7, #7]
 8006a36:	f003 030f 	and.w	r3, r3, #15
 8006a3a:	3b04      	subs	r3, #4
 8006a3c:	0112      	lsls	r2, r2, #4
 8006a3e:	b2d2      	uxtb	r2, r2
 8006a40:	440b      	add	r3, r1
 8006a42:	761a      	strb	r2, [r3, #24]
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	e000e100 	.word	0xe000e100
 8006a54:	e000ed00 	.word	0xe000ed00

08006a58 <NVIC_EncodePriority>:
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b089      	sub	sp, #36	@ 0x24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f003 0307 	and.w	r3, r3, #7
 8006a6a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	f1c3 0307 	rsb	r3, r3, #7
 8006a72:	2b04      	cmp	r3, #4
 8006a74:	bf28      	it	cs
 8006a76:	2304      	movcs	r3, #4
 8006a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	3304      	adds	r3, #4
 8006a7e:	2b06      	cmp	r3, #6
 8006a80:	d902      	bls.n	8006a88 <NVIC_EncodePriority+0x30>
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	3b03      	subs	r3, #3
 8006a86:	e000      	b.n	8006a8a <NVIC_EncodePriority+0x32>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	fa02 f303 	lsl.w	r3, r2, r3
 8006a96:	43da      	mvns	r2, r3
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	401a      	ands	r2, r3
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8006aaa:	43d9      	mvns	r1, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ab0:	4313      	orrs	r3, r2
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3724      	adds	r7, #36	@ 0x24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
	...

08006ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ad0:	d301      	bcc.n	8006ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e00f      	b.n	8006af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8006b00 <SysTick_Config+0x40>)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	3b01      	subs	r3, #1
 8006adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006ade:	210f      	movs	r1, #15
 8006ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae4:	f7ff ff8e 	bl	8006a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ae8:	4b05      	ldr	r3, [pc, #20]	@ (8006b00 <SysTick_Config+0x40>)
 8006aea:	2200      	movs	r2, #0
 8006aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006aee:	4b04      	ldr	r3, [pc, #16]	@ (8006b00 <SysTick_Config+0x40>)
 8006af0:	2207      	movs	r2, #7
 8006af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	e000e010 	.word	0xe000e010

08006b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b07      	cmp	r3, #7
 8006b10:	d00f      	beq.n	8006b32 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b06      	cmp	r3, #6
 8006b16:	d00c      	beq.n	8006b32 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2b05      	cmp	r3, #5
 8006b1c:	d009      	beq.n	8006b32 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2b04      	cmp	r3, #4
 8006b22:	d006      	beq.n	8006b32 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b03      	cmp	r3, #3
 8006b28:	d003      	beq.n	8006b32 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006b2a:	2191      	movs	r1, #145	@ 0x91
 8006b2c:	4804      	ldr	r0, [pc, #16]	@ (8006b40 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8006b2e:	f7ff f9a9 	bl	8005e84 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f7ff ff16 	bl	8006964 <__NVIC_SetPriorityGrouping>
}
 8006b38:	bf00      	nop
 8006b3a:	3708      	adds	r7, #8
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	08017a48 	.word	0x08017a48

08006b44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
 8006b50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006b52:	2300      	movs	r3, #0
 8006b54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2b0f      	cmp	r3, #15
 8006b5a:	d903      	bls.n	8006b64 <HAL_NVIC_SetPriority+0x20>
 8006b5c:	21a9      	movs	r1, #169	@ 0xa9
 8006b5e:	480e      	ldr	r0, [pc, #56]	@ (8006b98 <HAL_NVIC_SetPriority+0x54>)
 8006b60:	f7ff f990 	bl	8005e84 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2b0f      	cmp	r3, #15
 8006b68:	d903      	bls.n	8006b72 <HAL_NVIC_SetPriority+0x2e>
 8006b6a:	21aa      	movs	r1, #170	@ 0xaa
 8006b6c:	480a      	ldr	r0, [pc, #40]	@ (8006b98 <HAL_NVIC_SetPriority+0x54>)
 8006b6e:	f7ff f989 	bl	8005e84 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006b72:	f7ff ff1b 	bl	80069ac <__NVIC_GetPriorityGrouping>
 8006b76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	68b9      	ldr	r1, [r7, #8]
 8006b7c:	6978      	ldr	r0, [r7, #20]
 8006b7e:	f7ff ff6b 	bl	8006a58 <NVIC_EncodePriority>
 8006b82:	4602      	mov	r2, r0
 8006b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b88:	4611      	mov	r1, r2
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7ff ff3a 	bl	8006a04 <__NVIC_SetPriority>
}
 8006b90:	bf00      	nop
 8006b92:	3718      	adds	r7, #24
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	08017a48 	.word	0x08017a48

08006b9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8006ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	da03      	bge.n	8006bb6 <HAL_NVIC_EnableIRQ+0x1a>
 8006bae:	21bd      	movs	r1, #189	@ 0xbd
 8006bb0:	4805      	ldr	r0, [pc, #20]	@ (8006bc8 <HAL_NVIC_EnableIRQ+0x2c>)
 8006bb2:	f7ff f967 	bl	8005e84 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7ff ff04 	bl	80069c8 <__NVIC_EnableIRQ>
}
 8006bc0:	bf00      	nop
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	08017a48 	.word	0x08017a48

08006bcc <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f7ff ff73 	bl	8006ac0 <SysTick_Config>
 8006bda:	4603      	mov	r3, r0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006be4:	b480      	push	{r7}
 8006be6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8006be8:	f3bf 8f5f 	dmb	sy
}
 8006bec:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006bee:	4b07      	ldr	r3, [pc, #28]	@ (8006c0c <HAL_MPU_Disable+0x28>)
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf2:	4a06      	ldr	r2, [pc, #24]	@ (8006c0c <HAL_MPU_Disable+0x28>)
 8006bf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bf8:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006bfa:	4b05      	ldr	r3, [pc, #20]	@ (8006c10 <HAL_MPU_Disable+0x2c>)
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	605a      	str	r2, [r3, #4]
}
 8006c00:	bf00      	nop
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	e000ed00 	.word	0xe000ed00
 8006c10:	e000ed90 	.word	0xe000ed90

08006c14 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006c1c:	4a0b      	ldr	r2, [pc, #44]	@ (8006c4c <HAL_MPU_Enable+0x38>)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f043 0301 	orr.w	r3, r3, #1
 8006c24:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006c26:	4b0a      	ldr	r3, [pc, #40]	@ (8006c50 <HAL_MPU_Enable+0x3c>)
 8006c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c2a:	4a09      	ldr	r2, [pc, #36]	@ (8006c50 <HAL_MPU_Enable+0x3c>)
 8006c2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c30:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006c32:	f3bf 8f4f 	dsb	sy
}
 8006c36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006c38:	f3bf 8f6f 	isb	sy
}
 8006c3c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006c3e:	bf00      	nop
 8006c40:	370c      	adds	r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	e000ed90 	.word	0xe000ed90
 8006c50:	e000ed00 	.word	0xe000ed00

08006c54 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	785b      	ldrb	r3, [r3, #1]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d020      	beq.n	8006ca6 <HAL_MPU_ConfigRegion+0x52>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	785b      	ldrb	r3, [r3, #1]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d01c      	beq.n	8006ca6 <HAL_MPU_ConfigRegion+0x52>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	785b      	ldrb	r3, [r3, #1]
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d018      	beq.n	8006ca6 <HAL_MPU_ConfigRegion+0x52>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	785b      	ldrb	r3, [r3, #1]
 8006c78:	2b03      	cmp	r3, #3
 8006c7a:	d014      	beq.n	8006ca6 <HAL_MPU_ConfigRegion+0x52>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	785b      	ldrb	r3, [r3, #1]
 8006c80:	2b04      	cmp	r3, #4
 8006c82:	d010      	beq.n	8006ca6 <HAL_MPU_ConfigRegion+0x52>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	785b      	ldrb	r3, [r3, #1]
 8006c88:	2b05      	cmp	r3, #5
 8006c8a:	d00c      	beq.n	8006ca6 <HAL_MPU_ConfigRegion+0x52>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	785b      	ldrb	r3, [r3, #1]
 8006c90:	2b06      	cmp	r3, #6
 8006c92:	d008      	beq.n	8006ca6 <HAL_MPU_ConfigRegion+0x52>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	785b      	ldrb	r3, [r3, #1]
 8006c98:	2b07      	cmp	r3, #7
 8006c9a:	d004      	beq.n	8006ca6 <HAL_MPU_ConfigRegion+0x52>
 8006c9c:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 8006ca0:	488c      	ldr	r0, [pc, #560]	@ (8006ed4 <HAL_MPU_ConfigRegion+0x280>)
 8006ca2:	f7ff f8ef 	bl	8005e84 <assert_failed>
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d008      	beq.n	8006cc0 <HAL_MPU_ConfigRegion+0x6c>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d004      	beq.n	8006cc0 <HAL_MPU_ConfigRegion+0x6c>
 8006cb6:	f240 114f 	movw	r1, #335	@ 0x14f
 8006cba:	4886      	ldr	r0, [pc, #536]	@ (8006ed4 <HAL_MPU_ConfigRegion+0x280>)
 8006cbc:	f7ff f8e2 	bl	8005e84 <assert_failed>
  assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	7b1b      	ldrb	r3, [r3, #12]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d008      	beq.n	8006cda <HAL_MPU_ConfigRegion+0x86>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	7b1b      	ldrb	r3, [r3, #12]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d004      	beq.n	8006cda <HAL_MPU_ConfigRegion+0x86>
 8006cd0:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8006cd4:	487f      	ldr	r0, [pc, #508]	@ (8006ed4 <HAL_MPU_ConfigRegion+0x280>)
 8006cd6:	f7ff f8d5 	bl	8005e84 <assert_failed>
  assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	7adb      	ldrb	r3, [r3, #11]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d018      	beq.n	8006d14 <HAL_MPU_ConfigRegion+0xc0>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	7adb      	ldrb	r3, [r3, #11]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d014      	beq.n	8006d14 <HAL_MPU_ConfigRegion+0xc0>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	7adb      	ldrb	r3, [r3, #11]
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d010      	beq.n	8006d14 <HAL_MPU_ConfigRegion+0xc0>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	7adb      	ldrb	r3, [r3, #11]
 8006cf6:	2b03      	cmp	r3, #3
 8006cf8:	d00c      	beq.n	8006d14 <HAL_MPU_ConfigRegion+0xc0>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	7adb      	ldrb	r3, [r3, #11]
 8006cfe:	2b05      	cmp	r3, #5
 8006d00:	d008      	beq.n	8006d14 <HAL_MPU_ConfigRegion+0xc0>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	7adb      	ldrb	r3, [r3, #11]
 8006d06:	2b06      	cmp	r3, #6
 8006d08:	d004      	beq.n	8006d14 <HAL_MPU_ConfigRegion+0xc0>
 8006d0a:	f240 1151 	movw	r1, #337	@ 0x151
 8006d0e:	4871      	ldr	r0, [pc, #452]	@ (8006ed4 <HAL_MPU_ConfigRegion+0x280>)
 8006d10:	f7ff f8b8 	bl	8005e84 <assert_failed>
  assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	7a9b      	ldrb	r3, [r3, #10]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00c      	beq.n	8006d36 <HAL_MPU_ConfigRegion+0xe2>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	7a9b      	ldrb	r3, [r3, #10]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d008      	beq.n	8006d36 <HAL_MPU_ConfigRegion+0xe2>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	7a9b      	ldrb	r3, [r3, #10]
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d004      	beq.n	8006d36 <HAL_MPU_ConfigRegion+0xe2>
 8006d2c:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8006d30:	4868      	ldr	r0, [pc, #416]	@ (8006ed4 <HAL_MPU_ConfigRegion+0x280>)
 8006d32:	f7ff f8a7 	bl	8005e84 <assert_failed>
  assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	7b5b      	ldrb	r3, [r3, #13]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d008      	beq.n	8006d50 <HAL_MPU_ConfigRegion+0xfc>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	7b5b      	ldrb	r3, [r3, #13]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d004      	beq.n	8006d50 <HAL_MPU_ConfigRegion+0xfc>
 8006d46:	f240 1153 	movw	r1, #339	@ 0x153
 8006d4a:	4862      	ldr	r0, [pc, #392]	@ (8006ed4 <HAL_MPU_ConfigRegion+0x280>)
 8006d4c:	f7ff f89a 	bl	8005e84 <assert_failed>
  assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	7b9b      	ldrb	r3, [r3, #14]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d008      	beq.n	8006d6a <HAL_MPU_ConfigRegion+0x116>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	7b9b      	ldrb	r3, [r3, #14]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d004      	beq.n	8006d6a <HAL_MPU_ConfigRegion+0x116>
 8006d60:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8006d64:	485b      	ldr	r0, [pc, #364]	@ (8006ed4 <HAL_MPU_ConfigRegion+0x280>)
 8006d66:	f7ff f88d 	bl	8005e84 <assert_failed>
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	7bdb      	ldrb	r3, [r3, #15]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d008      	beq.n	8006d84 <HAL_MPU_ConfigRegion+0x130>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	7bdb      	ldrb	r3, [r3, #15]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d004      	beq.n	8006d84 <HAL_MPU_ConfigRegion+0x130>
 8006d7a:	f240 1155 	movw	r1, #341	@ 0x155
 8006d7e:	4855      	ldr	r0, [pc, #340]	@ (8006ed4 <HAL_MPU_ConfigRegion+0x280>)
 8006d80:	f7ff f880 	bl	8005e84 <assert_failed>
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	7a5b      	ldrb	r3, [r3, #9]
 8006d88:	2bff      	cmp	r3, #255	@ 0xff
 8006d8a:	d104      	bne.n	8006d96 <HAL_MPU_ConfigRegion+0x142>
 8006d8c:	f44f 71ab 	mov.w	r1, #342	@ 0x156
 8006d90:	4850      	ldr	r0, [pc, #320]	@ (8006ed4 <HAL_MPU_ConfigRegion+0x280>)
 8006d92:	f7ff f877 	bl	8005e84 <assert_failed>
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	7a1b      	ldrb	r3, [r3, #8]
 8006d9a:	2b04      	cmp	r3, #4
 8006d9c:	d070      	beq.n	8006e80 <HAL_MPU_ConfigRegion+0x22c>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	7a1b      	ldrb	r3, [r3, #8]
 8006da2:	2b05      	cmp	r3, #5
 8006da4:	d06c      	beq.n	8006e80 <HAL_MPU_ConfigRegion+0x22c>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	7a1b      	ldrb	r3, [r3, #8]
 8006daa:	2b06      	cmp	r3, #6
 8006dac:	d068      	beq.n	8006e80 <HAL_MPU_ConfigRegion+0x22c>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	7a1b      	ldrb	r3, [r3, #8]
 8006db2:	2b07      	cmp	r3, #7
 8006db4:	d064      	beq.n	8006e80 <HAL_MPU_ConfigRegion+0x22c>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	7a1b      	ldrb	r3, [r3, #8]
 8006dba:	2b08      	cmp	r3, #8
 8006dbc:	d060      	beq.n	8006e80 <HAL_MPU_ConfigRegion+0x22c>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	7a1b      	ldrb	r3, [r3, #8]
 8006dc2:	2b09      	cmp	r3, #9
 8006dc4:	d05c      	beq.n	8006e80 <HAL_MPU_ConfigRegion+0x22c>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	7a1b      	ldrb	r3, [r3, #8]
 8006dca:	2b0a      	cmp	r3, #10
 8006dcc:	d058      	beq.n	8006e80 <HAL_MPU_ConfigRegion+0x22c>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	7a1b      	ldrb	r3, [r3, #8]
 8006dd2:	2b0b      	cmp	r3, #11
 8006dd4:	d054      	beq.n	8006e80 <HAL_MPU_ConfigRegion+0x22c>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	7a1b      	ldrb	r3, [r3, #8]
 8006dda:	2b0c      	cmp	r3, #12
 8006ddc:	d050      	beq.n	8006e80 <HAL_MPU_ConfigRegion+0x22c>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	7a1b      	ldrb	r3, [r3, #8]
 8006de2:	2b0d      	cmp	r3, #13
 8006de4:	d04c      	beq.n	8006e80 <HAL_MPU_ConfigRegion+0x22c>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	7a1b      	ldrb	r3, [r3, #8]
 8006dea:	2b0e      	cmp	r3, #14
 8006dec:	d048      	beq.n	8006e80 <HAL_MPU_ConfigRegion+0x22c>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	7a1b      	ldrb	r3, [r3, #8]
 8006df2:	2b0f      	cmp	r3, #15
 8006df4:	d044      	beq.n	8006e80 <HAL_MPU_ConfigRegion+0x22c>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	7a1b      	ldrb	r3, [r3, #8]
 8006dfa:	2b10      	cmp	r3, #16
 8006dfc:	d040      	beq.n	8006e80 <HAL_MPU_ConfigRegion+0x22c>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	7a1b      	ldrb	r3, [r3, #8]
 8006e02:	2b11      	cmp	r3, #17
 8006e04:	d03c      	beq.n	8006e80 <HAL_MPU_ConfigRegion+0x22c>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	7a1b      	ldrb	r3, [r3, #8]
 8006e0a:	2b12      	cmp	r3, #18
 8006e0c:	d038      	beq.n	8006e80 <HAL_MPU_ConfigRegion+0x22c>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	7a1b      	ldrb	r3, [r3, #8]
 8006e12:	2b13      	cmp	r3, #19
 8006e14:	d034      	beq.n	8006e80 <HAL_MPU_ConfigRegion+0x22c>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	7a1b      	ldrb	r3, [r3, #8]
 8006e1a:	2b14      	cmp	r3, #20
 8006e1c:	d030      	beq.n	8006e80 <HAL_MPU_ConfigRegion+0x22c>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	7a1b      	ldrb	r3, [r3, #8]
 8006e22:	2b15      	cmp	r3, #21
 8006e24:	d02c      	beq.n	8006e80 <HAL_MPU_ConfigRegion+0x22c>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	7a1b      	ldrb	r3, [r3, #8]
 8006e2a:	2b16      	cmp	r3, #22
 8006e2c:	d028      	beq.n	8006e80 <HAL_MPU_ConfigRegion+0x22c>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	7a1b      	ldrb	r3, [r3, #8]
 8006e32:	2b17      	cmp	r3, #23
 8006e34:	d024      	beq.n	8006e80 <HAL_MPU_ConfigRegion+0x22c>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	7a1b      	ldrb	r3, [r3, #8]
 8006e3a:	2b18      	cmp	r3, #24
 8006e3c:	d020      	beq.n	8006e80 <HAL_MPU_ConfigRegion+0x22c>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	7a1b      	ldrb	r3, [r3, #8]
 8006e42:	2b19      	cmp	r3, #25
 8006e44:	d01c      	beq.n	8006e80 <HAL_MPU_ConfigRegion+0x22c>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	7a1b      	ldrb	r3, [r3, #8]
 8006e4a:	2b1a      	cmp	r3, #26
 8006e4c:	d018      	beq.n	8006e80 <HAL_MPU_ConfigRegion+0x22c>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	7a1b      	ldrb	r3, [r3, #8]
 8006e52:	2b1b      	cmp	r3, #27
 8006e54:	d014      	beq.n	8006e80 <HAL_MPU_ConfigRegion+0x22c>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	7a1b      	ldrb	r3, [r3, #8]
 8006e5a:	2b1c      	cmp	r3, #28
 8006e5c:	d010      	beq.n	8006e80 <HAL_MPU_ConfigRegion+0x22c>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	7a1b      	ldrb	r3, [r3, #8]
 8006e62:	2b1d      	cmp	r3, #29
 8006e64:	d00c      	beq.n	8006e80 <HAL_MPU_ConfigRegion+0x22c>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	7a1b      	ldrb	r3, [r3, #8]
 8006e6a:	2b1e      	cmp	r3, #30
 8006e6c:	d008      	beq.n	8006e80 <HAL_MPU_ConfigRegion+0x22c>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	7a1b      	ldrb	r3, [r3, #8]
 8006e72:	2b1f      	cmp	r3, #31
 8006e74:	d004      	beq.n	8006e80 <HAL_MPU_ConfigRegion+0x22c>
 8006e76:	f240 1157 	movw	r1, #343	@ 0x157
 8006e7a:	4816      	ldr	r0, [pc, #88]	@ (8006ed4 <HAL_MPU_ConfigRegion+0x280>)
 8006e7c:	f7ff f802 	bl	8005e84 <assert_failed>

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	785a      	ldrb	r2, [r3, #1]
 8006e84:	4b14      	ldr	r3, [pc, #80]	@ (8006ed8 <HAL_MPU_ConfigRegion+0x284>)
 8006e86:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8006e88:	4b13      	ldr	r3, [pc, #76]	@ (8006ed8 <HAL_MPU_ConfigRegion+0x284>)
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	4a12      	ldr	r2, [pc, #72]	@ (8006ed8 <HAL_MPU_ConfigRegion+0x284>)
 8006e8e:	f023 0301 	bic.w	r3, r3, #1
 8006e92:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8006e94:	4a10      	ldr	r2, [pc, #64]	@ (8006ed8 <HAL_MPU_ConfigRegion+0x284>)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	7b1b      	ldrb	r3, [r3, #12]
 8006ea0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	7adb      	ldrb	r3, [r3, #11]
 8006ea6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006ea8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	7a9b      	ldrb	r3, [r3, #10]
 8006eae:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006eb0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	7b5b      	ldrb	r3, [r3, #13]
 8006eb6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006eb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	7b9b      	ldrb	r3, [r3, #14]
 8006ebe:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006ec0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	7bdb      	ldrb	r3, [r3, #15]
 8006ec6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006ec8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	7a5b      	ldrb	r3, [r3, #9]
 8006ece:	021b      	lsls	r3, r3, #8
 8006ed0:	e004      	b.n	8006edc <HAL_MPU_ConfigRegion+0x288>
 8006ed2:	bf00      	nop
 8006ed4:	08017a48 	.word	0x08017a48
 8006ed8:	e000ed90 	.word	0xe000ed90
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006edc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	7a1b      	ldrb	r3, [r3, #8]
 8006ee2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006ee4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	7812      	ldrb	r2, [r2, #0]
 8006eea:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006eec:	4a03      	ldr	r2, [pc, #12]	@ (8006efc <HAL_MPU_ConfigRegion+0x2a8>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006eee:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006ef0:	6113      	str	r3, [r2, #16]
}
 8006ef2:	bf00      	nop
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	e000ed90 	.word	0xe000ed90

08006f00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d004      	beq.n	8006f1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2280      	movs	r2, #128	@ 0x80
 8006f18:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e00c      	b.n	8006f38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2205      	movs	r2, #5
 8006f22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f022 0201 	bic.w	r2, r2, #1
 8006f34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b088      	sub	sp, #32
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006f52:	2300      	movs	r3, #0
 8006f54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006f56:	2300      	movs	r3, #0
 8006f58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a3a      	ldr	r2, [pc, #232]	@ (800704c <HAL_GPIO_Init+0x108>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d02b      	beq.n	8006fbe <HAL_GPIO_Init+0x7a>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a39      	ldr	r2, [pc, #228]	@ (8007050 <HAL_GPIO_Init+0x10c>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d027      	beq.n	8006fbe <HAL_GPIO_Init+0x7a>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a38      	ldr	r2, [pc, #224]	@ (8007054 <HAL_GPIO_Init+0x110>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d023      	beq.n	8006fbe <HAL_GPIO_Init+0x7a>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a37      	ldr	r2, [pc, #220]	@ (8007058 <HAL_GPIO_Init+0x114>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d01f      	beq.n	8006fbe <HAL_GPIO_Init+0x7a>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a36      	ldr	r2, [pc, #216]	@ (800705c <HAL_GPIO_Init+0x118>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d01b      	beq.n	8006fbe <HAL_GPIO_Init+0x7a>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a35      	ldr	r2, [pc, #212]	@ (8007060 <HAL_GPIO_Init+0x11c>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d017      	beq.n	8006fbe <HAL_GPIO_Init+0x7a>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a34      	ldr	r2, [pc, #208]	@ (8007064 <HAL_GPIO_Init+0x120>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d013      	beq.n	8006fbe <HAL_GPIO_Init+0x7a>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a33      	ldr	r2, [pc, #204]	@ (8007068 <HAL_GPIO_Init+0x124>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d00f      	beq.n	8006fbe <HAL_GPIO_Init+0x7a>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a32      	ldr	r2, [pc, #200]	@ (800706c <HAL_GPIO_Init+0x128>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d00b      	beq.n	8006fbe <HAL_GPIO_Init+0x7a>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a31      	ldr	r2, [pc, #196]	@ (8007070 <HAL_GPIO_Init+0x12c>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d007      	beq.n	8006fbe <HAL_GPIO_Init+0x7a>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a30      	ldr	r2, [pc, #192]	@ (8007074 <HAL_GPIO_Init+0x130>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d003      	beq.n	8006fbe <HAL_GPIO_Init+0x7a>
 8006fb6:	21aa      	movs	r1, #170	@ 0xaa
 8006fb8:	482f      	ldr	r0, [pc, #188]	@ (8007078 <HAL_GPIO_Init+0x134>)
 8006fba:	f7fe ff63 	bl	8005e84 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d103      	bne.n	8006fd0 <HAL_GPIO_Init+0x8c>
 8006fc8:	21ab      	movs	r1, #171	@ 0xab
 8006fca:	482b      	ldr	r0, [pc, #172]	@ (8007078 <HAL_GPIO_Init+0x134>)
 8006fcc:	f7fe ff5a 	bl	8005e84 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d035      	beq.n	8007044 <HAL_GPIO_Init+0x100>
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d031      	beq.n	8007044 <HAL_GPIO_Init+0x100>
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	2b11      	cmp	r3, #17
 8006fe6:	d02d      	beq.n	8007044 <HAL_GPIO_Init+0x100>
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d029      	beq.n	8007044 <HAL_GPIO_Init+0x100>
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	2b12      	cmp	r3, #18
 8006ff6:	d025      	beq.n	8007044 <HAL_GPIO_Init+0x100>
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8007000:	d020      	beq.n	8007044 <HAL_GPIO_Init+0x100>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 800700a:	d01b      	beq.n	8007044 <HAL_GPIO_Init+0x100>
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8007014:	d016      	beq.n	8007044 <HAL_GPIO_Init+0x100>
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 800701e:	d011      	beq.n	8007044 <HAL_GPIO_Init+0x100>
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8007028:	d00c      	beq.n	8007044 <HAL_GPIO_Init+0x100>
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8007032:	d007      	beq.n	8007044 <HAL_GPIO_Init+0x100>
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	2b03      	cmp	r3, #3
 800703a:	d003      	beq.n	8007044 <HAL_GPIO_Init+0x100>
 800703c:	21ac      	movs	r1, #172	@ 0xac
 800703e:	480e      	ldr	r0, [pc, #56]	@ (8007078 <HAL_GPIO_Init+0x134>)
 8007040:	f7fe ff20 	bl	8005e84 <assert_failed>

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8007044:	2300      	movs	r3, #0
 8007046:	61fb      	str	r3, [r7, #28]
 8007048:	e2c7      	b.n	80075da <HAL_GPIO_Init+0x696>
 800704a:	bf00      	nop
 800704c:	40020000 	.word	0x40020000
 8007050:	40020400 	.word	0x40020400
 8007054:	40020800 	.word	0x40020800
 8007058:	40020c00 	.word	0x40020c00
 800705c:	40021000 	.word	0x40021000
 8007060:	40021400 	.word	0x40021400
 8007064:	40021800 	.word	0x40021800
 8007068:	40021c00 	.word	0x40021c00
 800706c:	40022000 	.word	0x40022000
 8007070:	40022400 	.word	0x40022400
 8007074:	40022800 	.word	0x40022800
 8007078:	08017a84 	.word	0x08017a84
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800707c:	2201      	movs	r2, #1
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	fa02 f303 	lsl.w	r3, r2, r3
 8007084:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	697a      	ldr	r2, [r7, #20]
 800708c:	4013      	ands	r3, r2
 800708e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	429a      	cmp	r2, r3
 8007096:	f040 829d 	bne.w	80075d4 <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f003 0303 	and.w	r3, r3, #3
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d005      	beq.n	80070b2 <HAL_GPIO_Init+0x16e>
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	f003 0303 	and.w	r3, r3, #3
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d144      	bne.n	800713c <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00f      	beq.n	80070da <HAL_GPIO_Init+0x196>
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d00b      	beq.n	80070da <HAL_GPIO_Init+0x196>
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d007      	beq.n	80070da <HAL_GPIO_Init+0x196>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	2b03      	cmp	r3, #3
 80070d0:	d003      	beq.n	80070da <HAL_GPIO_Init+0x196>
 80070d2:	21bd      	movs	r1, #189	@ 0xbd
 80070d4:	4831      	ldr	r0, [pc, #196]	@ (800719c <HAL_GPIO_Init+0x258>)
 80070d6:	f7fe fed5 	bl	8005e84 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	005b      	lsls	r3, r3, #1
 80070e4:	2203      	movs	r2, #3
 80070e6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ea:	43db      	mvns	r3, r3
 80070ec:	69ba      	ldr	r2, [r7, #24]
 80070ee:	4013      	ands	r3, r2
 80070f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	68da      	ldr	r2, [r3, #12]
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	005b      	lsls	r3, r3, #1
 80070fa:	fa02 f303 	lsl.w	r3, r2, r3
 80070fe:	69ba      	ldr	r2, [r7, #24]
 8007100:	4313      	orrs	r3, r2
 8007102:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	69ba      	ldr	r2, [r7, #24]
 8007108:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007110:	2201      	movs	r2, #1
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	fa02 f303 	lsl.w	r3, r2, r3
 8007118:	43db      	mvns	r3, r3
 800711a:	69ba      	ldr	r2, [r7, #24]
 800711c:	4013      	ands	r3, r2
 800711e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	091b      	lsrs	r3, r3, #4
 8007126:	f003 0201 	and.w	r2, r3, #1
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	fa02 f303 	lsl.w	r3, r2, r3
 8007130:	69ba      	ldr	r2, [r7, #24]
 8007132:	4313      	orrs	r3, r2
 8007134:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	69ba      	ldr	r2, [r7, #24]
 800713a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	f003 0303 	and.w	r3, r3, #3
 8007144:	2b03      	cmp	r3, #3
 8007146:	d02b      	beq.n	80071a0 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00b      	beq.n	8007168 <HAL_GPIO_Init+0x224>
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d007      	beq.n	8007168 <HAL_GPIO_Init+0x224>
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	2b02      	cmp	r3, #2
 800715e:	d003      	beq.n	8007168 <HAL_GPIO_Init+0x224>
 8007160:	21ce      	movs	r1, #206	@ 0xce
 8007162:	480e      	ldr	r0, [pc, #56]	@ (800719c <HAL_GPIO_Init+0x258>)
 8007164:	f7fe fe8e 	bl	8005e84 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	005b      	lsls	r3, r3, #1
 8007172:	2203      	movs	r2, #3
 8007174:	fa02 f303 	lsl.w	r3, r2, r3
 8007178:	43db      	mvns	r3, r3
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	4013      	ands	r3, r2
 800717e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	689a      	ldr	r2, [r3, #8]
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	005b      	lsls	r3, r3, #1
 8007188:	fa02 f303 	lsl.w	r3, r2, r3
 800718c:	69ba      	ldr	r2, [r7, #24]
 800718e:	4313      	orrs	r3, r2
 8007190:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	69ba      	ldr	r2, [r7, #24]
 8007196:	60da      	str	r2, [r3, #12]
 8007198:	e002      	b.n	80071a0 <HAL_GPIO_Init+0x25c>
 800719a:	bf00      	nop
 800719c:	08017a84 	.word	0x08017a84
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f003 0303 	and.w	r3, r3, #3
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	f040 8134 	bne.w	8007416 <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f000 810b 	beq.w	80073ce <HAL_GPIO_Init+0x48a>
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	2b01      	cmp	r3, #1
 80071be:	f000 8106 	beq.w	80073ce <HAL_GPIO_Init+0x48a>
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f000 8101 	beq.w	80073ce <HAL_GPIO_Init+0x48a>
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 80fc 	beq.w	80073ce <HAL_GPIO_Init+0x48a>
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f000 80f7 	beq.w	80073ce <HAL_GPIO_Init+0x48a>
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	f000 80f2 	beq.w	80073ce <HAL_GPIO_Init+0x48a>
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	f000 80ed 	beq.w	80073ce <HAL_GPIO_Init+0x48a>
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	f000 80e8 	beq.w	80073ce <HAL_GPIO_Init+0x48a>
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	2b02      	cmp	r3, #2
 8007204:	f000 80e3 	beq.w	80073ce <HAL_GPIO_Init+0x48a>
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	2b03      	cmp	r3, #3
 800720e:	f000 80de 	beq.w	80073ce <HAL_GPIO_Init+0x48a>
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	2b03      	cmp	r3, #3
 8007218:	f000 80d9 	beq.w	80073ce <HAL_GPIO_Init+0x48a>
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	2b03      	cmp	r3, #3
 8007222:	f000 80d4 	beq.w	80073ce <HAL_GPIO_Init+0x48a>
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	2b03      	cmp	r3, #3
 800722c:	f000 80cf 	beq.w	80073ce <HAL_GPIO_Init+0x48a>
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	2b03      	cmp	r3, #3
 8007236:	f000 80ca 	beq.w	80073ce <HAL_GPIO_Init+0x48a>
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	2b03      	cmp	r3, #3
 8007240:	f000 80c5 	beq.w	80073ce <HAL_GPIO_Init+0x48a>
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	691b      	ldr	r3, [r3, #16]
 8007248:	2b04      	cmp	r3, #4
 800724a:	f000 80c0 	beq.w	80073ce <HAL_GPIO_Init+0x48a>
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	2b04      	cmp	r3, #4
 8007254:	f000 80bb 	beq.w	80073ce <HAL_GPIO_Init+0x48a>
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	2b04      	cmp	r3, #4
 800725e:	f000 80b6 	beq.w	80073ce <HAL_GPIO_Init+0x48a>
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	2b04      	cmp	r3, #4
 8007268:	f000 80b1 	beq.w	80073ce <HAL_GPIO_Init+0x48a>
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	2b04      	cmp	r3, #4
 8007272:	f000 80ac 	beq.w	80073ce <HAL_GPIO_Init+0x48a>
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	2b05      	cmp	r3, #5
 800727c:	f000 80a7 	beq.w	80073ce <HAL_GPIO_Init+0x48a>
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	2b05      	cmp	r3, #5
 8007286:	f000 80a2 	beq.w	80073ce <HAL_GPIO_Init+0x48a>
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	2b05      	cmp	r3, #5
 8007290:	f000 809d 	beq.w	80073ce <HAL_GPIO_Init+0x48a>
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	2b05      	cmp	r3, #5
 800729a:	f000 8098 	beq.w	80073ce <HAL_GPIO_Init+0x48a>
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	2b05      	cmp	r3, #5
 80072a4:	f000 8093 	beq.w	80073ce <HAL_GPIO_Init+0x48a>
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	2b05      	cmp	r3, #5
 80072ae:	f000 808e 	beq.w	80073ce <HAL_GPIO_Init+0x48a>
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	2b06      	cmp	r3, #6
 80072b8:	f000 8089 	beq.w	80073ce <HAL_GPIO_Init+0x48a>
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	2b06      	cmp	r3, #6
 80072c2:	f000 8084 	beq.w	80073ce <HAL_GPIO_Init+0x48a>
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	2b07      	cmp	r3, #7
 80072cc:	d07f      	beq.n	80073ce <HAL_GPIO_Init+0x48a>
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	2b07      	cmp	r3, #7
 80072d4:	d07b      	beq.n	80073ce <HAL_GPIO_Init+0x48a>
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	2b07      	cmp	r3, #7
 80072dc:	d077      	beq.n	80073ce <HAL_GPIO_Init+0x48a>
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	2b07      	cmp	r3, #7
 80072e4:	d073      	beq.n	80073ce <HAL_GPIO_Init+0x48a>
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	2b07      	cmp	r3, #7
 80072ec:	d06f      	beq.n	80073ce <HAL_GPIO_Init+0x48a>
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	2b07      	cmp	r3, #7
 80072f4:	d06b      	beq.n	80073ce <HAL_GPIO_Init+0x48a>
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	2b07      	cmp	r3, #7
 80072fc:	d067      	beq.n	80073ce <HAL_GPIO_Init+0x48a>
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	2b08      	cmp	r3, #8
 8007304:	d063      	beq.n	80073ce <HAL_GPIO_Init+0x48a>
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	2b08      	cmp	r3, #8
 800730c:	d05f      	beq.n	80073ce <HAL_GPIO_Init+0x48a>
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	2b08      	cmp	r3, #8
 8007314:	d05b      	beq.n	80073ce <HAL_GPIO_Init+0x48a>
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	2b08      	cmp	r3, #8
 800731c:	d057      	beq.n	80073ce <HAL_GPIO_Init+0x48a>
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	2b08      	cmp	r3, #8
 8007324:	d053      	beq.n	80073ce <HAL_GPIO_Init+0x48a>
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	2b08      	cmp	r3, #8
 800732c:	d04f      	beq.n	80073ce <HAL_GPIO_Init+0x48a>
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	2b08      	cmp	r3, #8
 8007334:	d04b      	beq.n	80073ce <HAL_GPIO_Init+0x48a>
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	2b09      	cmp	r3, #9
 800733c:	d047      	beq.n	80073ce <HAL_GPIO_Init+0x48a>
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	2b09      	cmp	r3, #9
 8007344:	d043      	beq.n	80073ce <HAL_GPIO_Init+0x48a>
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	2b09      	cmp	r3, #9
 800734c:	d03f      	beq.n	80073ce <HAL_GPIO_Init+0x48a>
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	2b09      	cmp	r3, #9
 8007354:	d03b      	beq.n	80073ce <HAL_GPIO_Init+0x48a>
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	2b09      	cmp	r3, #9
 800735c:	d037      	beq.n	80073ce <HAL_GPIO_Init+0x48a>
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	2b09      	cmp	r3, #9
 8007364:	d033      	beq.n	80073ce <HAL_GPIO_Init+0x48a>
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	2b09      	cmp	r3, #9
 800736c:	d02f      	beq.n	80073ce <HAL_GPIO_Init+0x48a>
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	2b0a      	cmp	r3, #10
 8007374:	d02b      	beq.n	80073ce <HAL_GPIO_Init+0x48a>
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	2b0a      	cmp	r3, #10
 800737c:	d027      	beq.n	80073ce <HAL_GPIO_Init+0x48a>
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	2b0a      	cmp	r3, #10
 8007384:	d023      	beq.n	80073ce <HAL_GPIO_Init+0x48a>
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	2b0a      	cmp	r3, #10
 800738c:	d01f      	beq.n	80073ce <HAL_GPIO_Init+0x48a>
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	2b0b      	cmp	r3, #11
 8007394:	d01b      	beq.n	80073ce <HAL_GPIO_Init+0x48a>
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	2b0c      	cmp	r3, #12
 800739c:	d017      	beq.n	80073ce <HAL_GPIO_Init+0x48a>
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	2b0c      	cmp	r3, #12
 80073a4:	d013      	beq.n	80073ce <HAL_GPIO_Init+0x48a>
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	2b0c      	cmp	r3, #12
 80073ac:	d00f      	beq.n	80073ce <HAL_GPIO_Init+0x48a>
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	2b0f      	cmp	r3, #15
 80073b4:	d00b      	beq.n	80073ce <HAL_GPIO_Init+0x48a>
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	2b0d      	cmp	r3, #13
 80073bc:	d007      	beq.n	80073ce <HAL_GPIO_Init+0x48a>
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	2b0e      	cmp	r3, #14
 80073c4:	d003      	beq.n	80073ce <HAL_GPIO_Init+0x48a>
 80073c6:	21db      	movs	r1, #219	@ 0xdb
 80073c8:	4888      	ldr	r0, [pc, #544]	@ (80075ec <HAL_GPIO_Init+0x6a8>)
 80073ca:	f7fe fd5b 	bl	8005e84 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	08da      	lsrs	r2, r3, #3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	3208      	adds	r2, #8
 80073d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	f003 0307 	and.w	r3, r3, #7
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	220f      	movs	r2, #15
 80073e6:	fa02 f303 	lsl.w	r3, r2, r3
 80073ea:	43db      	mvns	r3, r3
 80073ec:	69ba      	ldr	r2, [r7, #24]
 80073ee:	4013      	ands	r3, r2
 80073f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	691a      	ldr	r2, [r3, #16]
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	f003 0307 	and.w	r3, r3, #7
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007402:	69ba      	ldr	r2, [r7, #24]
 8007404:	4313      	orrs	r3, r2
 8007406:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	08da      	lsrs	r2, r3, #3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	3208      	adds	r2, #8
 8007410:	69b9      	ldr	r1, [r7, #24]
 8007412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	005b      	lsls	r3, r3, #1
 8007420:	2203      	movs	r2, #3
 8007422:	fa02 f303 	lsl.w	r3, r2, r3
 8007426:	43db      	mvns	r3, r3
 8007428:	69ba      	ldr	r2, [r7, #24]
 800742a:	4013      	ands	r3, r2
 800742c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	f003 0203 	and.w	r2, r3, #3
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	005b      	lsls	r3, r3, #1
 800743a:	fa02 f303 	lsl.w	r3, r2, r3
 800743e:	69ba      	ldr	r2, [r7, #24]
 8007440:	4313      	orrs	r3, r2
 8007442:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	69ba      	ldr	r2, [r7, #24]
 8007448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007452:	2b00      	cmp	r3, #0
 8007454:	f000 80be 	beq.w	80075d4 <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007458:	4b65      	ldr	r3, [pc, #404]	@ (80075f0 <HAL_GPIO_Init+0x6ac>)
 800745a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800745c:	4a64      	ldr	r2, [pc, #400]	@ (80075f0 <HAL_GPIO_Init+0x6ac>)
 800745e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007462:	6453      	str	r3, [r2, #68]	@ 0x44
 8007464:	4b62      	ldr	r3, [pc, #392]	@ (80075f0 <HAL_GPIO_Init+0x6ac>)
 8007466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007468:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800746c:	60fb      	str	r3, [r7, #12]
 800746e:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007470:	4a60      	ldr	r2, [pc, #384]	@ (80075f4 <HAL_GPIO_Init+0x6b0>)
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	089b      	lsrs	r3, r3, #2
 8007476:	3302      	adds	r3, #2
 8007478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800747c:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	f003 0303 	and.w	r3, r3, #3
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	220f      	movs	r2, #15
 8007488:	fa02 f303 	lsl.w	r3, r2, r3
 800748c:	43db      	mvns	r3, r3
 800748e:	69ba      	ldr	r2, [r7, #24]
 8007490:	4013      	ands	r3, r2
 8007492:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a58      	ldr	r2, [pc, #352]	@ (80075f8 <HAL_GPIO_Init+0x6b4>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d037      	beq.n	800750c <HAL_GPIO_Init+0x5c8>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a57      	ldr	r2, [pc, #348]	@ (80075fc <HAL_GPIO_Init+0x6b8>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d031      	beq.n	8007508 <HAL_GPIO_Init+0x5c4>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a56      	ldr	r2, [pc, #344]	@ (8007600 <HAL_GPIO_Init+0x6bc>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d02b      	beq.n	8007504 <HAL_GPIO_Init+0x5c0>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a55      	ldr	r2, [pc, #340]	@ (8007604 <HAL_GPIO_Init+0x6c0>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d025      	beq.n	8007500 <HAL_GPIO_Init+0x5bc>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a54      	ldr	r2, [pc, #336]	@ (8007608 <HAL_GPIO_Init+0x6c4>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d01f      	beq.n	80074fc <HAL_GPIO_Init+0x5b8>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a53      	ldr	r2, [pc, #332]	@ (800760c <HAL_GPIO_Init+0x6c8>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d019      	beq.n	80074f8 <HAL_GPIO_Init+0x5b4>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a52      	ldr	r2, [pc, #328]	@ (8007610 <HAL_GPIO_Init+0x6cc>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d013      	beq.n	80074f4 <HAL_GPIO_Init+0x5b0>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a51      	ldr	r2, [pc, #324]	@ (8007614 <HAL_GPIO_Init+0x6d0>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d00d      	beq.n	80074f0 <HAL_GPIO_Init+0x5ac>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a50      	ldr	r2, [pc, #320]	@ (8007618 <HAL_GPIO_Init+0x6d4>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d007      	beq.n	80074ec <HAL_GPIO_Init+0x5a8>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a4f      	ldr	r2, [pc, #316]	@ (800761c <HAL_GPIO_Init+0x6d8>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d101      	bne.n	80074e8 <HAL_GPIO_Init+0x5a4>
 80074e4:	2309      	movs	r3, #9
 80074e6:	e012      	b.n	800750e <HAL_GPIO_Init+0x5ca>
 80074e8:	230a      	movs	r3, #10
 80074ea:	e010      	b.n	800750e <HAL_GPIO_Init+0x5ca>
 80074ec:	2308      	movs	r3, #8
 80074ee:	e00e      	b.n	800750e <HAL_GPIO_Init+0x5ca>
 80074f0:	2307      	movs	r3, #7
 80074f2:	e00c      	b.n	800750e <HAL_GPIO_Init+0x5ca>
 80074f4:	2306      	movs	r3, #6
 80074f6:	e00a      	b.n	800750e <HAL_GPIO_Init+0x5ca>
 80074f8:	2305      	movs	r3, #5
 80074fa:	e008      	b.n	800750e <HAL_GPIO_Init+0x5ca>
 80074fc:	2304      	movs	r3, #4
 80074fe:	e006      	b.n	800750e <HAL_GPIO_Init+0x5ca>
 8007500:	2303      	movs	r3, #3
 8007502:	e004      	b.n	800750e <HAL_GPIO_Init+0x5ca>
 8007504:	2302      	movs	r3, #2
 8007506:	e002      	b.n	800750e <HAL_GPIO_Init+0x5ca>
 8007508:	2301      	movs	r3, #1
 800750a:	e000      	b.n	800750e <HAL_GPIO_Init+0x5ca>
 800750c:	2300      	movs	r3, #0
 800750e:	69fa      	ldr	r2, [r7, #28]
 8007510:	f002 0203 	and.w	r2, r2, #3
 8007514:	0092      	lsls	r2, r2, #2
 8007516:	4093      	lsls	r3, r2
 8007518:	69ba      	ldr	r2, [r7, #24]
 800751a:	4313      	orrs	r3, r2
 800751c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800751e:	4935      	ldr	r1, [pc, #212]	@ (80075f4 <HAL_GPIO_Init+0x6b0>)
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	089b      	lsrs	r3, r3, #2
 8007524:	3302      	adds	r3, #2
 8007526:	69ba      	ldr	r2, [r7, #24]
 8007528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800752c:	4b3c      	ldr	r3, [pc, #240]	@ (8007620 <HAL_GPIO_Init+0x6dc>)
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	43db      	mvns	r3, r3
 8007536:	69ba      	ldr	r2, [r7, #24]
 8007538:	4013      	ands	r3, r2
 800753a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d003      	beq.n	8007550 <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 8007548:	69ba      	ldr	r2, [r7, #24]
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	4313      	orrs	r3, r2
 800754e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007550:	4a33      	ldr	r2, [pc, #204]	@ (8007620 <HAL_GPIO_Init+0x6dc>)
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007556:	4b32      	ldr	r3, [pc, #200]	@ (8007620 <HAL_GPIO_Init+0x6dc>)
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	43db      	mvns	r3, r3
 8007560:	69ba      	ldr	r2, [r7, #24]
 8007562:	4013      	ands	r3, r2
 8007564:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800756e:	2b00      	cmp	r3, #0
 8007570:	d003      	beq.n	800757a <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 8007572:	69ba      	ldr	r2, [r7, #24]
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	4313      	orrs	r3, r2
 8007578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800757a:	4a29      	ldr	r2, [pc, #164]	@ (8007620 <HAL_GPIO_Init+0x6dc>)
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007580:	4b27      	ldr	r3, [pc, #156]	@ (8007620 <HAL_GPIO_Init+0x6dc>)
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	43db      	mvns	r3, r3
 800758a:	69ba      	ldr	r2, [r7, #24]
 800758c:	4013      	ands	r3, r2
 800758e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d003      	beq.n	80075a4 <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 800759c:	69ba      	ldr	r2, [r7, #24]
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80075a4:	4a1e      	ldr	r2, [pc, #120]	@ (8007620 <HAL_GPIO_Init+0x6dc>)
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80075aa:	4b1d      	ldr	r3, [pc, #116]	@ (8007620 <HAL_GPIO_Init+0x6dc>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	43db      	mvns	r3, r3
 80075b4:	69ba      	ldr	r2, [r7, #24]
 80075b6:	4013      	ands	r3, r2
 80075b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d003      	beq.n	80075ce <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 80075c6:	69ba      	ldr	r2, [r7, #24]
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80075ce:	4a14      	ldr	r2, [pc, #80]	@ (8007620 <HAL_GPIO_Init+0x6dc>)
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	3301      	adds	r3, #1
 80075d8:	61fb      	str	r3, [r7, #28]
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	2b0f      	cmp	r3, #15
 80075de:	f67f ad4d 	bls.w	800707c <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 80075e2:	bf00      	nop
 80075e4:	bf00      	nop
 80075e6:	3720      	adds	r7, #32
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	08017a84 	.word	0x08017a84
 80075f0:	40023800 	.word	0x40023800
 80075f4:	40013800 	.word	0x40013800
 80075f8:	40020000 	.word	0x40020000
 80075fc:	40020400 	.word	0x40020400
 8007600:	40020800 	.word	0x40020800
 8007604:	40020c00 	.word	0x40020c00
 8007608:	40021000 	.word	0x40021000
 800760c:	40021400 	.word	0x40021400
 8007610:	40021800 	.word	0x40021800
 8007614:	40021c00 	.word	0x40021c00
 8007618:	40022000 	.word	0x40022000
 800761c:	40022400 	.word	0x40022400
 8007620:	40013c00 	.word	0x40013c00

08007624 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	460b      	mov	r3, r1
 800762e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8007630:	887b      	ldrh	r3, [r7, #2]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d104      	bne.n	8007640 <HAL_GPIO_ReadPin+0x1c>
 8007636:	f240 1177 	movw	r1, #375	@ 0x177
 800763a:	4809      	ldr	r0, [pc, #36]	@ (8007660 <HAL_GPIO_ReadPin+0x3c>)
 800763c:	f7fe fc22 	bl	8005e84 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	691a      	ldr	r2, [r3, #16]
 8007644:	887b      	ldrh	r3, [r7, #2]
 8007646:	4013      	ands	r3, r2
 8007648:	2b00      	cmp	r3, #0
 800764a:	d002      	beq.n	8007652 <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 800764c:	2301      	movs	r3, #1
 800764e:	73fb      	strb	r3, [r7, #15]
 8007650:	e001      	b.n	8007656 <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007652:	2300      	movs	r3, #0
 8007654:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007656:	7bfb      	ldrb	r3, [r7, #15]
}
 8007658:	4618      	mov	r0, r3
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	08017a84 	.word	0x08017a84

08007664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	460b      	mov	r3, r1
 800766e:	807b      	strh	r3, [r7, #2]
 8007670:	4613      	mov	r3, r2
 8007672:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8007674:	887b      	ldrh	r3, [r7, #2]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d104      	bne.n	8007684 <HAL_GPIO_WritePin+0x20>
 800767a:	f240 1197 	movw	r1, #407	@ 0x197
 800767e:	480e      	ldr	r0, [pc, #56]	@ (80076b8 <HAL_GPIO_WritePin+0x54>)
 8007680:	f7fe fc00 	bl	8005e84 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8007684:	787b      	ldrb	r3, [r7, #1]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d007      	beq.n	800769a <HAL_GPIO_WritePin+0x36>
 800768a:	787b      	ldrb	r3, [r7, #1]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d004      	beq.n	800769a <HAL_GPIO_WritePin+0x36>
 8007690:	f44f 71cc 	mov.w	r1, #408	@ 0x198
 8007694:	4808      	ldr	r0, [pc, #32]	@ (80076b8 <HAL_GPIO_WritePin+0x54>)
 8007696:	f7fe fbf5 	bl	8005e84 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800769a:	787b      	ldrb	r3, [r7, #1]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d003      	beq.n	80076a8 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 80076a0:	887a      	ldrh	r2, [r7, #2]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80076a6:	e003      	b.n	80076b0 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80076a8:	887b      	ldrh	r3, [r7, #2]
 80076aa:	041a      	lsls	r2, r3, #16
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	619a      	str	r2, [r3, #24]
}
 80076b0:	bf00      	nop
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	08017a84 	.word	0x08017a84

080076bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80076c4:	2300      	movs	r3, #0
 80076c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d101      	bne.n	80076d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	e345      	b.n	8007d5e <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b0f      	cmp	r3, #15
 80076d8:	d904      	bls.n	80076e4 <HAL_RCC_OscConfig+0x28>
 80076da:	f240 1163 	movw	r1, #355	@ 0x163
 80076de:	4892      	ldr	r0, [pc, #584]	@ (8007928 <HAL_RCC_OscConfig+0x26c>)
 80076e0:	f7fe fbd0 	bl	8005e84 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0301 	and.w	r3, r3, #1
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f000 809a 	beq.w	8007826 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00e      	beq.n	8007718 <HAL_RCC_OscConfig+0x5c>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007702:	d009      	beq.n	8007718 <HAL_RCC_OscConfig+0x5c>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800770c:	d004      	beq.n	8007718 <HAL_RCC_OscConfig+0x5c>
 800770e:	f240 1169 	movw	r1, #361	@ 0x169
 8007712:	4885      	ldr	r0, [pc, #532]	@ (8007928 <HAL_RCC_OscConfig+0x26c>)
 8007714:	f7fe fbb6 	bl	8005e84 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007718:	4b84      	ldr	r3, [pc, #528]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	f003 030c 	and.w	r3, r3, #12
 8007720:	2b04      	cmp	r3, #4
 8007722:	d00c      	beq.n	800773e <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007724:	4b81      	ldr	r3, [pc, #516]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f003 030c 	and.w	r3, r3, #12
 800772c:	2b08      	cmp	r3, #8
 800772e:	d112      	bne.n	8007756 <HAL_RCC_OscConfig+0x9a>
 8007730:	4b7e      	ldr	r3, [pc, #504]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007738:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800773c:	d10b      	bne.n	8007756 <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800773e:	4b7b      	ldr	r3, [pc, #492]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d06c      	beq.n	8007824 <HAL_RCC_OscConfig+0x168>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d168      	bne.n	8007824 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e303      	b.n	8007d5e <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800775e:	d106      	bne.n	800776e <HAL_RCC_OscConfig+0xb2>
 8007760:	4b72      	ldr	r3, [pc, #456]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a71      	ldr	r2, [pc, #452]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 8007766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800776a:	6013      	str	r3, [r2, #0]
 800776c:	e02e      	b.n	80077cc <HAL_RCC_OscConfig+0x110>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d10c      	bne.n	8007790 <HAL_RCC_OscConfig+0xd4>
 8007776:	4b6d      	ldr	r3, [pc, #436]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a6c      	ldr	r2, [pc, #432]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 800777c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007780:	6013      	str	r3, [r2, #0]
 8007782:	4b6a      	ldr	r3, [pc, #424]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a69      	ldr	r2, [pc, #420]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 8007788:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800778c:	6013      	str	r3, [r2, #0]
 800778e:	e01d      	b.n	80077cc <HAL_RCC_OscConfig+0x110>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007798:	d10c      	bne.n	80077b4 <HAL_RCC_OscConfig+0xf8>
 800779a:	4b64      	ldr	r3, [pc, #400]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a63      	ldr	r2, [pc, #396]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 80077a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80077a4:	6013      	str	r3, [r2, #0]
 80077a6:	4b61      	ldr	r3, [pc, #388]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a60      	ldr	r2, [pc, #384]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 80077ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077b0:	6013      	str	r3, [r2, #0]
 80077b2:	e00b      	b.n	80077cc <HAL_RCC_OscConfig+0x110>
 80077b4:	4b5d      	ldr	r3, [pc, #372]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a5c      	ldr	r2, [pc, #368]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 80077ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077be:	6013      	str	r3, [r2, #0]
 80077c0:	4b5a      	ldr	r3, [pc, #360]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a59      	ldr	r2, [pc, #356]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 80077c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80077ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d013      	beq.n	80077fc <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077d4:	f7ff f896 	bl	8006904 <HAL_GetTick>
 80077d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077da:	e008      	b.n	80077ee <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077dc:	f7ff f892 	bl	8006904 <HAL_GetTick>
 80077e0:	4602      	mov	r2, r0
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	2b64      	cmp	r3, #100	@ 0x64
 80077e8:	d901      	bls.n	80077ee <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e2b7      	b.n	8007d5e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077ee:	4b4f      	ldr	r3, [pc, #316]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d0f0      	beq.n	80077dc <HAL_RCC_OscConfig+0x120>
 80077fa:	e014      	b.n	8007826 <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077fc:	f7ff f882 	bl	8006904 <HAL_GetTick>
 8007800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007802:	e008      	b.n	8007816 <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007804:	f7ff f87e 	bl	8006904 <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	2b64      	cmp	r3, #100	@ 0x64
 8007810:	d901      	bls.n	8007816 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8007812:	2303      	movs	r3, #3
 8007814:	e2a3      	b.n	8007d5e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007816:	4b45      	ldr	r3, [pc, #276]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1f0      	bne.n	8007804 <HAL_RCC_OscConfig+0x148>
 8007822:	e000      	b.n	8007826 <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 0302 	and.w	r3, r3, #2
 800782e:	2b00      	cmp	r3, #0
 8007830:	f000 8084 	beq.w	800793c <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d008      	beq.n	800784e <HAL_RCC_OscConfig+0x192>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d004      	beq.n	800784e <HAL_RCC_OscConfig+0x192>
 8007844:	f240 119b 	movw	r1, #411	@ 0x19b
 8007848:	4837      	ldr	r0, [pc, #220]	@ (8007928 <HAL_RCC_OscConfig+0x26c>)
 800784a:	f7fe fb1b 	bl	8005e84 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	2b1f      	cmp	r3, #31
 8007854:	d904      	bls.n	8007860 <HAL_RCC_OscConfig+0x1a4>
 8007856:	f44f 71ce 	mov.w	r1, #412	@ 0x19c
 800785a:	4833      	ldr	r0, [pc, #204]	@ (8007928 <HAL_RCC_OscConfig+0x26c>)
 800785c:	f7fe fb12 	bl	8005e84 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007860:	4b32      	ldr	r3, [pc, #200]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	f003 030c 	and.w	r3, r3, #12
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00b      	beq.n	8007884 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800786c:	4b2f      	ldr	r3, [pc, #188]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	f003 030c 	and.w	r3, r3, #12
 8007874:	2b08      	cmp	r3, #8
 8007876:	d11c      	bne.n	80078b2 <HAL_RCC_OscConfig+0x1f6>
 8007878:	4b2c      	ldr	r3, [pc, #176]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007880:	2b00      	cmp	r3, #0
 8007882:	d116      	bne.n	80078b2 <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007884:	4b29      	ldr	r3, [pc, #164]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0302 	and.w	r3, r3, #2
 800788c:	2b00      	cmp	r3, #0
 800788e:	d005      	beq.n	800789c <HAL_RCC_OscConfig+0x1e0>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d001      	beq.n	800789c <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e260      	b.n	8007d5e <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800789c:	4b23      	ldr	r3, [pc, #140]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	00db      	lsls	r3, r3, #3
 80078aa:	4920      	ldr	r1, [pc, #128]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 80078ac:	4313      	orrs	r3, r2
 80078ae:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078b0:	e044      	b.n	800793c <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d023      	beq.n	8007902 <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078ba:	4b1c      	ldr	r3, [pc, #112]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a1b      	ldr	r2, [pc, #108]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 80078c0:	f043 0301 	orr.w	r3, r3, #1
 80078c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078c6:	f7ff f81d 	bl	8006904 <HAL_GetTick>
 80078ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078cc:	e008      	b.n	80078e0 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078ce:	f7ff f819 	bl	8006904 <HAL_GetTick>
 80078d2:	4602      	mov	r2, r0
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d901      	bls.n	80078e0 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 80078dc:	2303      	movs	r3, #3
 80078de:	e23e      	b.n	8007d5e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078e0:	4b12      	ldr	r3, [pc, #72]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0302 	and.w	r3, r3, #2
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d0f0      	beq.n	80078ce <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078ec:	4b0f      	ldr	r3, [pc, #60]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	00db      	lsls	r3, r3, #3
 80078fa:	490c      	ldr	r1, [pc, #48]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 80078fc:	4313      	orrs	r3, r2
 80078fe:	600b      	str	r3, [r1, #0]
 8007900:	e01c      	b.n	800793c <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007902:	4b0a      	ldr	r3, [pc, #40]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a09      	ldr	r2, [pc, #36]	@ (800792c <HAL_RCC_OscConfig+0x270>)
 8007908:	f023 0301 	bic.w	r3, r3, #1
 800790c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800790e:	f7fe fff9 	bl	8006904 <HAL_GetTick>
 8007912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007914:	e00c      	b.n	8007930 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007916:	f7fe fff5 	bl	8006904 <HAL_GetTick>
 800791a:	4602      	mov	r2, r0
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	2b02      	cmp	r3, #2
 8007922:	d905      	bls.n	8007930 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8007924:	2303      	movs	r3, #3
 8007926:	e21a      	b.n	8007d5e <HAL_RCC_OscConfig+0x6a2>
 8007928:	08017ac0 	.word	0x08017ac0
 800792c:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007930:	4b7e      	ldr	r3, [pc, #504]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 0302 	and.w	r3, r3, #2
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1ec      	bne.n	8007916 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 0308 	and.w	r3, r3, #8
 8007944:	2b00      	cmp	r3, #0
 8007946:	d043      	beq.n	80079d0 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	695b      	ldr	r3, [r3, #20]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d008      	beq.n	8007962 <HAL_RCC_OscConfig+0x2a6>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	695b      	ldr	r3, [r3, #20]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d004      	beq.n	8007962 <HAL_RCC_OscConfig+0x2a6>
 8007958:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 800795c:	4874      	ldr	r0, [pc, #464]	@ (8007b30 <HAL_RCC_OscConfig+0x474>)
 800795e:	f7fe fa91 	bl	8005e84 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d019      	beq.n	800799e <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800796a:	4b70      	ldr	r3, [pc, #448]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 800796c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800796e:	4a6f      	ldr	r2, [pc, #444]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007970:	f043 0301 	orr.w	r3, r3, #1
 8007974:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007976:	f7fe ffc5 	bl	8006904 <HAL_GetTick>
 800797a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800797c:	e008      	b.n	8007990 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800797e:	f7fe ffc1 	bl	8006904 <HAL_GetTick>
 8007982:	4602      	mov	r2, r0
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	2b02      	cmp	r3, #2
 800798a:	d901      	bls.n	8007990 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 800798c:	2303      	movs	r3, #3
 800798e:	e1e6      	b.n	8007d5e <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007990:	4b66      	ldr	r3, [pc, #408]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007992:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007994:	f003 0302 	and.w	r3, r3, #2
 8007998:	2b00      	cmp	r3, #0
 800799a:	d0f0      	beq.n	800797e <HAL_RCC_OscConfig+0x2c2>
 800799c:	e018      	b.n	80079d0 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800799e:	4b63      	ldr	r3, [pc, #396]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 80079a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079a2:	4a62      	ldr	r2, [pc, #392]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 80079a4:	f023 0301 	bic.w	r3, r3, #1
 80079a8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079aa:	f7fe ffab 	bl	8006904 <HAL_GetTick>
 80079ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079b0:	e008      	b.n	80079c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079b2:	f7fe ffa7 	bl	8006904 <HAL_GetTick>
 80079b6:	4602      	mov	r2, r0
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	1ad3      	subs	r3, r2, r3
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d901      	bls.n	80079c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e1cc      	b.n	8007d5e <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079c4:	4b59      	ldr	r3, [pc, #356]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 80079c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079c8:	f003 0302 	and.w	r3, r3, #2
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1f0      	bne.n	80079b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 0304 	and.w	r3, r3, #4
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 80bc 	beq.w	8007b56 <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00c      	beq.n	8007a00 <HAL_RCC_OscConfig+0x344>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d008      	beq.n	8007a00 <HAL_RCC_OscConfig+0x344>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	2b05      	cmp	r3, #5
 80079f4:	d004      	beq.n	8007a00 <HAL_RCC_OscConfig+0x344>
 80079f6:	f240 2106 	movw	r1, #518	@ 0x206
 80079fa:	484d      	ldr	r0, [pc, #308]	@ (8007b30 <HAL_RCC_OscConfig+0x474>)
 80079fc:	f7fe fa42 	bl	8005e84 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a00:	4b4a      	ldr	r3, [pc, #296]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d10d      	bne.n	8007a28 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a0c:	4b47      	ldr	r3, [pc, #284]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a10:	4a46      	ldr	r2, [pc, #280]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007a12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a16:	6413      	str	r3, [r2, #64]	@ 0x40
 8007a18:	4b44      	ldr	r3, [pc, #272]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a20:	60bb      	str	r3, [r7, #8]
 8007a22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a24:	2301      	movs	r3, #1
 8007a26:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a28:	4b42      	ldr	r3, [pc, #264]	@ (8007b34 <HAL_RCC_OscConfig+0x478>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d118      	bne.n	8007a66 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007a34:	4b3f      	ldr	r3, [pc, #252]	@ (8007b34 <HAL_RCC_OscConfig+0x478>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a3e      	ldr	r2, [pc, #248]	@ (8007b34 <HAL_RCC_OscConfig+0x478>)
 8007a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a40:	f7fe ff60 	bl	8006904 <HAL_GetTick>
 8007a44:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a46:	e008      	b.n	8007a5a <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a48:	f7fe ff5c 	bl	8006904 <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	2b64      	cmp	r3, #100	@ 0x64
 8007a54:	d901      	bls.n	8007a5a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e181      	b.n	8007d5e <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a5a:	4b36      	ldr	r3, [pc, #216]	@ (8007b34 <HAL_RCC_OscConfig+0x478>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d0f0      	beq.n	8007a48 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d106      	bne.n	8007a7c <HAL_RCC_OscConfig+0x3c0>
 8007a6e:	4b2f      	ldr	r3, [pc, #188]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a72:	4a2e      	ldr	r2, [pc, #184]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007a74:	f043 0301 	orr.w	r3, r3, #1
 8007a78:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a7a:	e02d      	b.n	8007ad8 <HAL_RCC_OscConfig+0x41c>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10c      	bne.n	8007a9e <HAL_RCC_OscConfig+0x3e2>
 8007a84:	4b29      	ldr	r3, [pc, #164]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a88:	4a28      	ldr	r2, [pc, #160]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007a8a:	f023 0301 	bic.w	r3, r3, #1
 8007a8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a90:	4b26      	ldr	r3, [pc, #152]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a94:	4a25      	ldr	r2, [pc, #148]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007a96:	f023 0304 	bic.w	r3, r3, #4
 8007a9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a9c:	e01c      	b.n	8007ad8 <HAL_RCC_OscConfig+0x41c>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	2b05      	cmp	r3, #5
 8007aa4:	d10c      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x404>
 8007aa6:	4b21      	ldr	r3, [pc, #132]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aaa:	4a20      	ldr	r2, [pc, #128]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007aac:	f043 0304 	orr.w	r3, r3, #4
 8007ab0:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ab6:	4a1d      	ldr	r2, [pc, #116]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007ab8:	f043 0301 	orr.w	r3, r3, #1
 8007abc:	6713      	str	r3, [r2, #112]	@ 0x70
 8007abe:	e00b      	b.n	8007ad8 <HAL_RCC_OscConfig+0x41c>
 8007ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ac4:	4a19      	ldr	r2, [pc, #100]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007ac6:	f023 0301 	bic.w	r3, r3, #1
 8007aca:	6713      	str	r3, [r2, #112]	@ 0x70
 8007acc:	4b17      	ldr	r3, [pc, #92]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ad0:	4a16      	ldr	r2, [pc, #88]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007ad2:	f023 0304 	bic.w	r3, r3, #4
 8007ad6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d015      	beq.n	8007b0c <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ae0:	f7fe ff10 	bl	8006904 <HAL_GetTick>
 8007ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ae6:	e00a      	b.n	8007afe <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ae8:	f7fe ff0c 	bl	8006904 <HAL_GetTick>
 8007aec:	4602      	mov	r2, r0
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d901      	bls.n	8007afe <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8007afa:	2303      	movs	r3, #3
 8007afc:	e12f      	b.n	8007d5e <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007afe:	4b0b      	ldr	r3, [pc, #44]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b02:	f003 0302 	and.w	r3, r3, #2
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d0ee      	beq.n	8007ae8 <HAL_RCC_OscConfig+0x42c>
 8007b0a:	e01b      	b.n	8007b44 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b0c:	f7fe fefa 	bl	8006904 <HAL_GetTick>
 8007b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b12:	e011      	b.n	8007b38 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b14:	f7fe fef6 	bl	8006904 <HAL_GetTick>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d908      	bls.n	8007b38 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e119      	b.n	8007d5e <HAL_RCC_OscConfig+0x6a2>
 8007b2a:	bf00      	nop
 8007b2c:	40023800 	.word	0x40023800
 8007b30:	08017ac0 	.word	0x08017ac0
 8007b34:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b38:	4b8b      	ldr	r3, [pc, #556]	@ (8007d68 <HAL_RCC_OscConfig+0x6ac>)
 8007b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b3c:	f003 0302 	and.w	r3, r3, #2
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1e7      	bne.n	8007b14 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007b44:	7dfb      	ldrb	r3, [r7, #23]
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d105      	bne.n	8007b56 <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b4a:	4b87      	ldr	r3, [pc, #540]	@ (8007d68 <HAL_RCC_OscConfig+0x6ac>)
 8007b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b4e:	4a86      	ldr	r2, [pc, #536]	@ (8007d68 <HAL_RCC_OscConfig+0x6ac>)
 8007b50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b54:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	699b      	ldr	r3, [r3, #24]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00c      	beq.n	8007b78 <HAL_RCC_OscConfig+0x4bc>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d008      	beq.n	8007b78 <HAL_RCC_OscConfig+0x4bc>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	d004      	beq.n	8007b78 <HAL_RCC_OscConfig+0x4bc>
 8007b6e:	f240 214a 	movw	r1, #586	@ 0x24a
 8007b72:	487e      	ldr	r0, [pc, #504]	@ (8007d6c <HAL_RCC_OscConfig+0x6b0>)
 8007b74:	f7fe f986 	bl	8005e84 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	699b      	ldr	r3, [r3, #24]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 80ed 	beq.w	8007d5c <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007b82:	4b79      	ldr	r3, [pc, #484]	@ (8007d68 <HAL_RCC_OscConfig+0x6ac>)
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f003 030c 	and.w	r3, r3, #12
 8007b8a:	2b08      	cmp	r3, #8
 8007b8c:	f000 80b4 	beq.w	8007cf8 <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	699b      	ldr	r3, [r3, #24]
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	f040 8095 	bne.w	8007cc4 <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	69db      	ldr	r3, [r3, #28]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d009      	beq.n	8007bb6 <HAL_RCC_OscConfig+0x4fa>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	69db      	ldr	r3, [r3, #28]
 8007ba6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007baa:	d004      	beq.n	8007bb6 <HAL_RCC_OscConfig+0x4fa>
 8007bac:	f240 2153 	movw	r1, #595	@ 0x253
 8007bb0:	486e      	ldr	r0, [pc, #440]	@ (8007d6c <HAL_RCC_OscConfig+0x6b0>)
 8007bb2:	f7fe f967 	bl	8005e84 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d903      	bls.n	8007bc6 <HAL_RCC_OscConfig+0x50a>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a1b      	ldr	r3, [r3, #32]
 8007bc2:	2b3f      	cmp	r3, #63	@ 0x3f
 8007bc4:	d904      	bls.n	8007bd0 <HAL_RCC_OscConfig+0x514>
 8007bc6:	f44f 7115 	mov.w	r1, #596	@ 0x254
 8007bca:	4868      	ldr	r0, [pc, #416]	@ (8007d6c <HAL_RCC_OscConfig+0x6b0>)
 8007bcc:	f7fe f95a 	bl	8005e84 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bd4:	2b31      	cmp	r3, #49	@ 0x31
 8007bd6:	d904      	bls.n	8007be2 <HAL_RCC_OscConfig+0x526>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bdc:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8007be0:	d904      	bls.n	8007bec <HAL_RCC_OscConfig+0x530>
 8007be2:	f240 2155 	movw	r1, #597	@ 0x255
 8007be6:	4861      	ldr	r0, [pc, #388]	@ (8007d6c <HAL_RCC_OscConfig+0x6b0>)
 8007be8:	f7fe f94c 	bl	8005e84 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	d010      	beq.n	8007c16 <HAL_RCC_OscConfig+0x55a>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bf8:	2b04      	cmp	r3, #4
 8007bfa:	d00c      	beq.n	8007c16 <HAL_RCC_OscConfig+0x55a>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c00:	2b06      	cmp	r3, #6
 8007c02:	d008      	beq.n	8007c16 <HAL_RCC_OscConfig+0x55a>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c08:	2b08      	cmp	r3, #8
 8007c0a:	d004      	beq.n	8007c16 <HAL_RCC_OscConfig+0x55a>
 8007c0c:	f240 2156 	movw	r1, #598	@ 0x256
 8007c10:	4856      	ldr	r0, [pc, #344]	@ (8007d6c <HAL_RCC_OscConfig+0x6b0>)
 8007c12:	f7fe f937 	bl	8005e84 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d903      	bls.n	8007c26 <HAL_RCC_OscConfig+0x56a>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c22:	2b0f      	cmp	r3, #15
 8007c24:	d904      	bls.n	8007c30 <HAL_RCC_OscConfig+0x574>
 8007c26:	f240 2157 	movw	r1, #599	@ 0x257
 8007c2a:	4850      	ldr	r0, [pc, #320]	@ (8007d6c <HAL_RCC_OscConfig+0x6b0>)
 8007c2c:	f7fe f92a 	bl	8005e84 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c30:	4b4d      	ldr	r3, [pc, #308]	@ (8007d68 <HAL_RCC_OscConfig+0x6ac>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a4c      	ldr	r2, [pc, #304]	@ (8007d68 <HAL_RCC_OscConfig+0x6ac>)
 8007c36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c3c:	f7fe fe62 	bl	8006904 <HAL_GetTick>
 8007c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c42:	e008      	b.n	8007c56 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c44:	f7fe fe5e 	bl	8006904 <HAL_GetTick>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	d901      	bls.n	8007c56 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e083      	b.n	8007d5e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c56:	4b44      	ldr	r3, [pc, #272]	@ (8007d68 <HAL_RCC_OscConfig+0x6ac>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1f0      	bne.n	8007c44 <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	69da      	ldr	r2, [r3, #28]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a1b      	ldr	r3, [r3, #32]
 8007c6a:	431a      	orrs	r2, r3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c70:	019b      	lsls	r3, r3, #6
 8007c72:	431a      	orrs	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c78:	085b      	lsrs	r3, r3, #1
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	041b      	lsls	r3, r3, #16
 8007c7e:	431a      	orrs	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c84:	061b      	lsls	r3, r3, #24
 8007c86:	4313      	orrs	r3, r2
 8007c88:	4a37      	ldr	r2, [pc, #220]	@ (8007d68 <HAL_RCC_OscConfig+0x6ac>)
 8007c8a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007c8e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c90:	4b35      	ldr	r3, [pc, #212]	@ (8007d68 <HAL_RCC_OscConfig+0x6ac>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a34      	ldr	r2, [pc, #208]	@ (8007d68 <HAL_RCC_OscConfig+0x6ac>)
 8007c96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c9c:	f7fe fe32 	bl	8006904 <HAL_GetTick>
 8007ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ca2:	e008      	b.n	8007cb6 <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ca4:	f7fe fe2e 	bl	8006904 <HAL_GetTick>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d901      	bls.n	8007cb6 <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	e053      	b.n	8007d5e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cb6:	4b2c      	ldr	r3, [pc, #176]	@ (8007d68 <HAL_RCC_OscConfig+0x6ac>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d0f0      	beq.n	8007ca4 <HAL_RCC_OscConfig+0x5e8>
 8007cc2:	e04b      	b.n	8007d5c <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cc4:	4b28      	ldr	r3, [pc, #160]	@ (8007d68 <HAL_RCC_OscConfig+0x6ac>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a27      	ldr	r2, [pc, #156]	@ (8007d68 <HAL_RCC_OscConfig+0x6ac>)
 8007cca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007cce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cd0:	f7fe fe18 	bl	8006904 <HAL_GetTick>
 8007cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cd6:	e008      	b.n	8007cea <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cd8:	f7fe fe14 	bl	8006904 <HAL_GetTick>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d901      	bls.n	8007cea <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	e039      	b.n	8007d5e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cea:	4b1f      	ldr	r3, [pc, #124]	@ (8007d68 <HAL_RCC_OscConfig+0x6ac>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1f0      	bne.n	8007cd8 <HAL_RCC_OscConfig+0x61c>
 8007cf6:	e031      	b.n	8007d5c <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8007d68 <HAL_RCC_OscConfig+0x6ac>)
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	699b      	ldr	r3, [r3, #24]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d028      	beq.n	8007d58 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d121      	bne.n	8007d58 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d11a      	bne.n	8007d58 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007d28:	4013      	ands	r3, r2
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007d2e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d111      	bne.n	8007d58 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d3e:	085b      	lsrs	r3, r3, #1
 8007d40:	3b01      	subs	r3, #1
 8007d42:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d107      	bne.n	8007d58 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d52:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d001      	beq.n	8007d5c <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e000      	b.n	8007d5e <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3718      	adds	r7, #24
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	40023800 	.word	0x40023800
 8007d6c:	08017ac0 	.word	0x08017ac0

08007d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d101      	bne.n	8007d88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e18c      	b.n	80080a2 <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d003      	beq.n	8007d98 <HAL_RCC_ClockConfig+0x28>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b0f      	cmp	r3, #15
 8007d96:	d904      	bls.n	8007da2 <HAL_RCC_ClockConfig+0x32>
 8007d98:	f240 21dd 	movw	r1, #733	@ 0x2dd
 8007d9c:	4887      	ldr	r0, [pc, #540]	@ (8007fbc <HAL_RCC_ClockConfig+0x24c>)
 8007d9e:	f7fe f871 	bl	8005e84 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d031      	beq.n	8007e0c <HAL_RCC_ClockConfig+0x9c>
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d02e      	beq.n	8007e0c <HAL_RCC_ClockConfig+0x9c>
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d02b      	beq.n	8007e0c <HAL_RCC_ClockConfig+0x9c>
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	2b03      	cmp	r3, #3
 8007db8:	d028      	beq.n	8007e0c <HAL_RCC_ClockConfig+0x9c>
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	2b04      	cmp	r3, #4
 8007dbe:	d025      	beq.n	8007e0c <HAL_RCC_ClockConfig+0x9c>
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	2b05      	cmp	r3, #5
 8007dc4:	d022      	beq.n	8007e0c <HAL_RCC_ClockConfig+0x9c>
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	2b06      	cmp	r3, #6
 8007dca:	d01f      	beq.n	8007e0c <HAL_RCC_ClockConfig+0x9c>
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	2b07      	cmp	r3, #7
 8007dd0:	d01c      	beq.n	8007e0c <HAL_RCC_ClockConfig+0x9c>
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	2b08      	cmp	r3, #8
 8007dd6:	d019      	beq.n	8007e0c <HAL_RCC_ClockConfig+0x9c>
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	2b09      	cmp	r3, #9
 8007ddc:	d016      	beq.n	8007e0c <HAL_RCC_ClockConfig+0x9c>
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	2b0a      	cmp	r3, #10
 8007de2:	d013      	beq.n	8007e0c <HAL_RCC_ClockConfig+0x9c>
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	2b0b      	cmp	r3, #11
 8007de8:	d010      	beq.n	8007e0c <HAL_RCC_ClockConfig+0x9c>
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	2b0c      	cmp	r3, #12
 8007dee:	d00d      	beq.n	8007e0c <HAL_RCC_ClockConfig+0x9c>
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	2b0d      	cmp	r3, #13
 8007df4:	d00a      	beq.n	8007e0c <HAL_RCC_ClockConfig+0x9c>
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	2b0e      	cmp	r3, #14
 8007dfa:	d007      	beq.n	8007e0c <HAL_RCC_ClockConfig+0x9c>
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	2b0f      	cmp	r3, #15
 8007e00:	d004      	beq.n	8007e0c <HAL_RCC_ClockConfig+0x9c>
 8007e02:	f240 21de 	movw	r1, #734	@ 0x2de
 8007e06:	486d      	ldr	r0, [pc, #436]	@ (8007fbc <HAL_RCC_ClockConfig+0x24c>)
 8007e08:	f7fe f83c 	bl	8005e84 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e0c:	4b6c      	ldr	r3, [pc, #432]	@ (8007fc0 <HAL_RCC_ClockConfig+0x250>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 030f 	and.w	r3, r3, #15
 8007e14:	683a      	ldr	r2, [r7, #0]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d910      	bls.n	8007e3c <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e1a:	4b69      	ldr	r3, [pc, #420]	@ (8007fc0 <HAL_RCC_ClockConfig+0x250>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f023 020f 	bic.w	r2, r3, #15
 8007e22:	4967      	ldr	r1, [pc, #412]	@ (8007fc0 <HAL_RCC_ClockConfig+0x250>)
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e2a:	4b65      	ldr	r3, [pc, #404]	@ (8007fc0 <HAL_RCC_ClockConfig+0x250>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 030f 	and.w	r3, r3, #15
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d001      	beq.n	8007e3c <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e132      	b.n	80080a2 <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 0302 	and.w	r3, r3, #2
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d049      	beq.n	8007edc <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 0304 	and.w	r3, r3, #4
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d005      	beq.n	8007e60 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e54:	4b5b      	ldr	r3, [pc, #364]	@ (8007fc4 <HAL_RCC_ClockConfig+0x254>)
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	4a5a      	ldr	r2, [pc, #360]	@ (8007fc4 <HAL_RCC_ClockConfig+0x254>)
 8007e5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007e5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 0308 	and.w	r3, r3, #8
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d005      	beq.n	8007e78 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e6c:	4b55      	ldr	r3, [pc, #340]	@ (8007fc4 <HAL_RCC_ClockConfig+0x254>)
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	4a54      	ldr	r2, [pc, #336]	@ (8007fc4 <HAL_RCC_ClockConfig+0x254>)
 8007e72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007e76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d024      	beq.n	8007eca <HAL_RCC_ClockConfig+0x15a>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	2b80      	cmp	r3, #128	@ 0x80
 8007e86:	d020      	beq.n	8007eca <HAL_RCC_ClockConfig+0x15a>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	2b90      	cmp	r3, #144	@ 0x90
 8007e8e:	d01c      	beq.n	8007eca <HAL_RCC_ClockConfig+0x15a>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	2ba0      	cmp	r3, #160	@ 0xa0
 8007e96:	d018      	beq.n	8007eca <HAL_RCC_ClockConfig+0x15a>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	2bb0      	cmp	r3, #176	@ 0xb0
 8007e9e:	d014      	beq.n	8007eca <HAL_RCC_ClockConfig+0x15a>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ea6:	d010      	beq.n	8007eca <HAL_RCC_ClockConfig+0x15a>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	2bd0      	cmp	r3, #208	@ 0xd0
 8007eae:	d00c      	beq.n	8007eca <HAL_RCC_ClockConfig+0x15a>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	2be0      	cmp	r3, #224	@ 0xe0
 8007eb6:	d008      	beq.n	8007eca <HAL_RCC_ClockConfig+0x15a>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	2bf0      	cmp	r3, #240	@ 0xf0
 8007ebe:	d004      	beq.n	8007eca <HAL_RCC_ClockConfig+0x15a>
 8007ec0:	f240 3102 	movw	r1, #770	@ 0x302
 8007ec4:	483d      	ldr	r0, [pc, #244]	@ (8007fbc <HAL_RCC_ClockConfig+0x24c>)
 8007ec6:	f7fd ffdd 	bl	8005e84 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007eca:	4b3e      	ldr	r3, [pc, #248]	@ (8007fc4 <HAL_RCC_ClockConfig+0x254>)
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	493b      	ldr	r1, [pc, #236]	@ (8007fc4 <HAL_RCC_ClockConfig+0x254>)
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 0301 	and.w	r3, r3, #1
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d051      	beq.n	8007f8c <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00c      	beq.n	8007f0a <HAL_RCC_ClockConfig+0x19a>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d008      	beq.n	8007f0a <HAL_RCC_ClockConfig+0x19a>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d004      	beq.n	8007f0a <HAL_RCC_ClockConfig+0x19a>
 8007f00:	f240 3109 	movw	r1, #777	@ 0x309
 8007f04:	482d      	ldr	r0, [pc, #180]	@ (8007fbc <HAL_RCC_ClockConfig+0x24c>)
 8007f06:	f7fd ffbd 	bl	8005e84 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d107      	bne.n	8007f22 <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f12:	4b2c      	ldr	r3, [pc, #176]	@ (8007fc4 <HAL_RCC_ClockConfig+0x254>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d115      	bne.n	8007f4a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e0bf      	b.n	80080a2 <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d107      	bne.n	8007f3a <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f2a:	4b26      	ldr	r3, [pc, #152]	@ (8007fc4 <HAL_RCC_ClockConfig+0x254>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d109      	bne.n	8007f4a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e0b3      	b.n	80080a2 <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f3a:	4b22      	ldr	r3, [pc, #136]	@ (8007fc4 <HAL_RCC_ClockConfig+0x254>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0302 	and.w	r3, r3, #2
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d101      	bne.n	8007f4a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e0ab      	b.n	80080a2 <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f4a:	4b1e      	ldr	r3, [pc, #120]	@ (8007fc4 <HAL_RCC_ClockConfig+0x254>)
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	f023 0203 	bic.w	r2, r3, #3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	491b      	ldr	r1, [pc, #108]	@ (8007fc4 <HAL_RCC_ClockConfig+0x254>)
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f5c:	f7fe fcd2 	bl	8006904 <HAL_GetTick>
 8007f60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f62:	e00a      	b.n	8007f7a <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f64:	f7fe fcce 	bl	8006904 <HAL_GetTick>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	1ad3      	subs	r3, r2, r3
 8007f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d901      	bls.n	8007f7a <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 8007f76:	2303      	movs	r3, #3
 8007f78:	e093      	b.n	80080a2 <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f7a:	4b12      	ldr	r3, [pc, #72]	@ (8007fc4 <HAL_RCC_ClockConfig+0x254>)
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f003 020c 	and.w	r2, r3, #12
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d1eb      	bne.n	8007f64 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8007fc0 <HAL_RCC_ClockConfig+0x250>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 030f 	and.w	r3, r3, #15
 8007f94:	683a      	ldr	r2, [r7, #0]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d216      	bcs.n	8007fc8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f9a:	4b09      	ldr	r3, [pc, #36]	@ (8007fc0 <HAL_RCC_ClockConfig+0x250>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f023 020f 	bic.w	r2, r3, #15
 8007fa2:	4907      	ldr	r1, [pc, #28]	@ (8007fc0 <HAL_RCC_ClockConfig+0x250>)
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007faa:	4b05      	ldr	r3, [pc, #20]	@ (8007fc0 <HAL_RCC_ClockConfig+0x250>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 030f 	and.w	r3, r3, #15
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d007      	beq.n	8007fc8 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e072      	b.n	80080a2 <HAL_RCC_ClockConfig+0x332>
 8007fbc:	08017ac0 	.word	0x08017ac0
 8007fc0:	40023c00 	.word	0x40023c00
 8007fc4:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 0304 	and.w	r3, r3, #4
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d025      	beq.n	8008020 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d018      	beq.n	800800e <HAL_RCC_ClockConfig+0x29e>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fe4:	d013      	beq.n	800800e <HAL_RCC_ClockConfig+0x29e>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007fee:	d00e      	beq.n	800800e <HAL_RCC_ClockConfig+0x29e>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8007ff8:	d009      	beq.n	800800e <HAL_RCC_ClockConfig+0x29e>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8008002:	d004      	beq.n	800800e <HAL_RCC_ClockConfig+0x29e>
 8008004:	f240 3146 	movw	r1, #838	@ 0x346
 8008008:	4828      	ldr	r0, [pc, #160]	@ (80080ac <HAL_RCC_ClockConfig+0x33c>)
 800800a:	f7fd ff3b 	bl	8005e84 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800800e:	4b28      	ldr	r3, [pc, #160]	@ (80080b0 <HAL_RCC_ClockConfig+0x340>)
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	4925      	ldr	r1, [pc, #148]	@ (80080b0 <HAL_RCC_ClockConfig+0x340>)
 800801c:	4313      	orrs	r3, r2
 800801e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0308 	and.w	r3, r3, #8
 8008028:	2b00      	cmp	r3, #0
 800802a:	d026      	beq.n	800807a <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d018      	beq.n	8008066 <HAL_RCC_ClockConfig+0x2f6>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800803c:	d013      	beq.n	8008066 <HAL_RCC_ClockConfig+0x2f6>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008046:	d00e      	beq.n	8008066 <HAL_RCC_ClockConfig+0x2f6>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8008050:	d009      	beq.n	8008066 <HAL_RCC_ClockConfig+0x2f6>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 800805a:	d004      	beq.n	8008066 <HAL_RCC_ClockConfig+0x2f6>
 800805c:	f240 314d 	movw	r1, #845	@ 0x34d
 8008060:	4812      	ldr	r0, [pc, #72]	@ (80080ac <HAL_RCC_ClockConfig+0x33c>)
 8008062:	f7fd ff0f 	bl	8005e84 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008066:	4b12      	ldr	r3, [pc, #72]	@ (80080b0 <HAL_RCC_ClockConfig+0x340>)
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	00db      	lsls	r3, r3, #3
 8008074:	490e      	ldr	r1, [pc, #56]	@ (80080b0 <HAL_RCC_ClockConfig+0x340>)
 8008076:	4313      	orrs	r3, r2
 8008078:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800807a:	f000 f821 	bl	80080c0 <HAL_RCC_GetSysClockFreq>
 800807e:	4602      	mov	r2, r0
 8008080:	4b0b      	ldr	r3, [pc, #44]	@ (80080b0 <HAL_RCC_ClockConfig+0x340>)
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	091b      	lsrs	r3, r3, #4
 8008086:	f003 030f 	and.w	r3, r3, #15
 800808a:	490a      	ldr	r1, [pc, #40]	@ (80080b4 <HAL_RCC_ClockConfig+0x344>)
 800808c:	5ccb      	ldrb	r3, [r1, r3]
 800808e:	fa22 f303 	lsr.w	r3, r2, r3
 8008092:	4a09      	ldr	r2, [pc, #36]	@ (80080b8 <HAL_RCC_ClockConfig+0x348>)
 8008094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008096:	4b09      	ldr	r3, [pc, #36]	@ (80080bc <HAL_RCC_ClockConfig+0x34c>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4618      	mov	r0, r3
 800809c:	f7fe fbee 	bl	800687c <HAL_InitTick>

  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	08017ac0 	.word	0x08017ac0
 80080b0:	40023800 	.word	0x40023800
 80080b4:	0801830c 	.word	0x0801830c
 80080b8:	2000004c 	.word	0x2000004c
 80080bc:	20000050 	.word	0x20000050

080080c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080c4:	b090      	sub	sp, #64	@ 0x40
 80080c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80080c8:	2300      	movs	r3, #0
 80080ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80080cc:	2300      	movs	r3, #0
 80080ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080d0:	2300      	movs	r3, #0
 80080d2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80080d4:	2300      	movs	r3, #0
 80080d6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80080d8:	4b59      	ldr	r3, [pc, #356]	@ (8008240 <HAL_RCC_GetSysClockFreq+0x180>)
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	f003 030c 	and.w	r3, r3, #12
 80080e0:	2b08      	cmp	r3, #8
 80080e2:	d00d      	beq.n	8008100 <HAL_RCC_GetSysClockFreq+0x40>
 80080e4:	2b08      	cmp	r3, #8
 80080e6:	f200 80a1 	bhi.w	800822c <HAL_RCC_GetSysClockFreq+0x16c>
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d002      	beq.n	80080f4 <HAL_RCC_GetSysClockFreq+0x34>
 80080ee:	2b04      	cmp	r3, #4
 80080f0:	d003      	beq.n	80080fa <HAL_RCC_GetSysClockFreq+0x3a>
 80080f2:	e09b      	b.n	800822c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80080f4:	4b53      	ldr	r3, [pc, #332]	@ (8008244 <HAL_RCC_GetSysClockFreq+0x184>)
 80080f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80080f8:	e09b      	b.n	8008232 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80080fa:	4b53      	ldr	r3, [pc, #332]	@ (8008248 <HAL_RCC_GetSysClockFreq+0x188>)
 80080fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80080fe:	e098      	b.n	8008232 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008100:	4b4f      	ldr	r3, [pc, #316]	@ (8008240 <HAL_RCC_GetSysClockFreq+0x180>)
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008108:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800810a:	4b4d      	ldr	r3, [pc, #308]	@ (8008240 <HAL_RCC_GetSysClockFreq+0x180>)
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008112:	2b00      	cmp	r3, #0
 8008114:	d028      	beq.n	8008168 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008116:	4b4a      	ldr	r3, [pc, #296]	@ (8008240 <HAL_RCC_GetSysClockFreq+0x180>)
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	099b      	lsrs	r3, r3, #6
 800811c:	2200      	movs	r2, #0
 800811e:	623b      	str	r3, [r7, #32]
 8008120:	627a      	str	r2, [r7, #36]	@ 0x24
 8008122:	6a3b      	ldr	r3, [r7, #32]
 8008124:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008128:	2100      	movs	r1, #0
 800812a:	4b47      	ldr	r3, [pc, #284]	@ (8008248 <HAL_RCC_GetSysClockFreq+0x188>)
 800812c:	fb03 f201 	mul.w	r2, r3, r1
 8008130:	2300      	movs	r3, #0
 8008132:	fb00 f303 	mul.w	r3, r0, r3
 8008136:	4413      	add	r3, r2
 8008138:	4a43      	ldr	r2, [pc, #268]	@ (8008248 <HAL_RCC_GetSysClockFreq+0x188>)
 800813a:	fba0 1202 	umull	r1, r2, r0, r2
 800813e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008140:	460a      	mov	r2, r1
 8008142:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008144:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008146:	4413      	add	r3, r2
 8008148:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800814a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800814c:	2200      	movs	r2, #0
 800814e:	61bb      	str	r3, [r7, #24]
 8008150:	61fa      	str	r2, [r7, #28]
 8008152:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008156:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800815a:	f7f8 fdc5 	bl	8000ce8 <__aeabi_uldivmod>
 800815e:	4602      	mov	r2, r0
 8008160:	460b      	mov	r3, r1
 8008162:	4613      	mov	r3, r2
 8008164:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008166:	e053      	b.n	8008210 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008168:	4b35      	ldr	r3, [pc, #212]	@ (8008240 <HAL_RCC_GetSysClockFreq+0x180>)
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	099b      	lsrs	r3, r3, #6
 800816e:	2200      	movs	r2, #0
 8008170:	613b      	str	r3, [r7, #16]
 8008172:	617a      	str	r2, [r7, #20]
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800817a:	f04f 0b00 	mov.w	fp, #0
 800817e:	4652      	mov	r2, sl
 8008180:	465b      	mov	r3, fp
 8008182:	f04f 0000 	mov.w	r0, #0
 8008186:	f04f 0100 	mov.w	r1, #0
 800818a:	0159      	lsls	r1, r3, #5
 800818c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008190:	0150      	lsls	r0, r2, #5
 8008192:	4602      	mov	r2, r0
 8008194:	460b      	mov	r3, r1
 8008196:	ebb2 080a 	subs.w	r8, r2, sl
 800819a:	eb63 090b 	sbc.w	r9, r3, fp
 800819e:	f04f 0200 	mov.w	r2, #0
 80081a2:	f04f 0300 	mov.w	r3, #0
 80081a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80081aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80081ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80081b2:	ebb2 0408 	subs.w	r4, r2, r8
 80081b6:	eb63 0509 	sbc.w	r5, r3, r9
 80081ba:	f04f 0200 	mov.w	r2, #0
 80081be:	f04f 0300 	mov.w	r3, #0
 80081c2:	00eb      	lsls	r3, r5, #3
 80081c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80081c8:	00e2      	lsls	r2, r4, #3
 80081ca:	4614      	mov	r4, r2
 80081cc:	461d      	mov	r5, r3
 80081ce:	eb14 030a 	adds.w	r3, r4, sl
 80081d2:	603b      	str	r3, [r7, #0]
 80081d4:	eb45 030b 	adc.w	r3, r5, fp
 80081d8:	607b      	str	r3, [r7, #4]
 80081da:	f04f 0200 	mov.w	r2, #0
 80081de:	f04f 0300 	mov.w	r3, #0
 80081e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80081e6:	4629      	mov	r1, r5
 80081e8:	028b      	lsls	r3, r1, #10
 80081ea:	4621      	mov	r1, r4
 80081ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80081f0:	4621      	mov	r1, r4
 80081f2:	028a      	lsls	r2, r1, #10
 80081f4:	4610      	mov	r0, r2
 80081f6:	4619      	mov	r1, r3
 80081f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081fa:	2200      	movs	r2, #0
 80081fc:	60bb      	str	r3, [r7, #8]
 80081fe:	60fa      	str	r2, [r7, #12]
 8008200:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008204:	f7f8 fd70 	bl	8000ce8 <__aeabi_uldivmod>
 8008208:	4602      	mov	r2, r0
 800820a:	460b      	mov	r3, r1
 800820c:	4613      	mov	r3, r2
 800820e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008210:	4b0b      	ldr	r3, [pc, #44]	@ (8008240 <HAL_RCC_GetSysClockFreq+0x180>)
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	0c1b      	lsrs	r3, r3, #16
 8008216:	f003 0303 	and.w	r3, r3, #3
 800821a:	3301      	adds	r3, #1
 800821c:	005b      	lsls	r3, r3, #1
 800821e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008220:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008224:	fbb2 f3f3 	udiv	r3, r2, r3
 8008228:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800822a:	e002      	b.n	8008232 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800822c:	4b05      	ldr	r3, [pc, #20]	@ (8008244 <HAL_RCC_GetSysClockFreq+0x184>)
 800822e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008230:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008234:	4618      	mov	r0, r3
 8008236:	3740      	adds	r7, #64	@ 0x40
 8008238:	46bd      	mov	sp, r7
 800823a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800823e:	bf00      	nop
 8008240:	40023800 	.word	0x40023800
 8008244:	00f42400 	.word	0x00f42400
 8008248:	017d7840 	.word	0x017d7840

0800824c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800824c:	b480      	push	{r7}
 800824e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008250:	4b03      	ldr	r3, [pc, #12]	@ (8008260 <HAL_RCC_GetHCLKFreq+0x14>)
 8008252:	681b      	ldr	r3, [r3, #0]
}
 8008254:	4618      	mov	r0, r3
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	2000004c 	.word	0x2000004c

08008264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008268:	f7ff fff0 	bl	800824c <HAL_RCC_GetHCLKFreq>
 800826c:	4602      	mov	r2, r0
 800826e:	4b05      	ldr	r3, [pc, #20]	@ (8008284 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	0a9b      	lsrs	r3, r3, #10
 8008274:	f003 0307 	and.w	r3, r3, #7
 8008278:	4903      	ldr	r1, [pc, #12]	@ (8008288 <HAL_RCC_GetPCLK1Freq+0x24>)
 800827a:	5ccb      	ldrb	r3, [r1, r3]
 800827c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008280:	4618      	mov	r0, r3
 8008282:	bd80      	pop	{r7, pc}
 8008284:	40023800 	.word	0x40023800
 8008288:	0801831c 	.word	0x0801831c

0800828c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008290:	f7ff ffdc 	bl	800824c <HAL_RCC_GetHCLKFreq>
 8008294:	4602      	mov	r2, r0
 8008296:	4b05      	ldr	r3, [pc, #20]	@ (80082ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	0b5b      	lsrs	r3, r3, #13
 800829c:	f003 0307 	and.w	r3, r3, #7
 80082a0:	4903      	ldr	r1, [pc, #12]	@ (80082b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80082a2:	5ccb      	ldrb	r3, [r1, r3]
 80082a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	40023800 	.word	0x40023800
 80082b0:	0801831c 	.word	0x0801831c

080082b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b088      	sub	sp, #32
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80082bc:	2300      	movs	r3, #0
 80082be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80082c0:	2300      	movs	r3, #0
 80082c2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80082c4:	2300      	movs	r3, #0
 80082c6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80082c8:	2300      	movs	r3, #0
 80082ca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80082cc:	2300      	movs	r3, #0
 80082ce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0301 	and.w	r3, r3, #1
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f040 8089 	bne.w	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 0308 	and.w	r3, r3, #8
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	f040 8082 	bne.w	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0310 	and.w	r3, r3, #16
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d17b      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008300:	2b00      	cmp	r3, #0
 8008302:	d175      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800830c:	2b00      	cmp	r3, #0
 800830e:	d16f      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008318:	2b00      	cmp	r3, #0
 800831a:	d169      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008324:	2b00      	cmp	r3, #0
 8008326:	d163      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008330:	2b00      	cmp	r3, #0
 8008332:	d15d      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800833c:	2b00      	cmp	r3, #0
 800833e:	d157      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008348:	2b00      	cmp	r3, #0
 800834a:	d151      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008354:	2b00      	cmp	r3, #0
 8008356:	d14b      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008360:	2b00      	cmp	r3, #0
 8008362:	d145      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800836c:	2b00      	cmp	r3, #0
 800836e:	d13f      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008378:	2b00      	cmp	r3, #0
 800837a:	d139      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008384:	2b00      	cmp	r3, #0
 8008386:	d133      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008390:	2b00      	cmp	r3, #0
 8008392:	d12d      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800839c:	2b00      	cmp	r3, #0
 800839e:	d127      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d121      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d11b      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d115      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10f      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d109      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f003 0320 	and.w	r3, r3, #32
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d103      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80083e8:	2172      	movs	r1, #114	@ 0x72
 80083ea:	4895      	ldr	r0, [pc, #596]	@ (8008640 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80083ec:	f7fd fd4a 	bl	8005e84 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f003 0301 	and.w	r3, r3, #1
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d01f      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008400:	2b00      	cmp	r3, #0
 8008402:	d008      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008408:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800840c:	d003      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x162>
 800840e:	2178      	movs	r1, #120	@ 0x78
 8008410:	488b      	ldr	r0, [pc, #556]	@ (8008640 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8008412:	f7fd fd37 	bl	8005e84 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008416:	4b8b      	ldr	r3, [pc, #556]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	4a8a      	ldr	r2, [pc, #552]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800841c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008420:	6093      	str	r3, [r2, #8]
 8008422:	4b88      	ldr	r3, [pc, #544]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8008424:	689a      	ldr	r2, [r3, #8]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800842a:	4986      	ldr	r1, [pc, #536]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800842c:	4313      	orrs	r3, r2
 800842e:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008434:	2b00      	cmp	r3, #0
 8008436:	d101      	bne.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 8008438:	2301      	movs	r3, #1
 800843a:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d029      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00d      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008454:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008458:	d008      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800845e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008462:	d003      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8008464:	2188      	movs	r1, #136	@ 0x88
 8008466:	4876      	ldr	r0, [pc, #472]	@ (8008640 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8008468:	f7fd fd0c 	bl	8005e84 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800846c:	4b75      	ldr	r3, [pc, #468]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800846e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008472:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800847a:	4972      	ldr	r1, [pc, #456]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800847c:	4313      	orrs	r3, r2
 800847e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008486:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800848a:	d101      	bne.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 800848c:	2301      	movs	r3, #1
 800848e:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008494:	2b00      	cmp	r3, #0
 8008496:	d101      	bne.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 8008498:	2301      	movs	r3, #1
 800849a:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d029      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00d      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x218>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084b8:	d008      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x218>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80084c2:	d003      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x218>
 80084c4:	219c      	movs	r1, #156	@ 0x9c
 80084c6:	485e      	ldr	r0, [pc, #376]	@ (8008640 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80084c8:	f7fd fcdc 	bl	8005e84 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80084cc:	4b5d      	ldr	r3, [pc, #372]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80084ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084da:	495a      	ldr	r1, [pc, #360]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80084dc:	4313      	orrs	r3, r2
 80084de:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084ea:	d101      	bne.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 80084ec:	2301      	movs	r3, #1
 80084ee:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d101      	bne.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 80084f8:	2301      	movs	r3, #1
 80084fa:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008504:	2b00      	cmp	r3, #0
 8008506:	d001      	beq.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 8008508:	2301      	movs	r3, #1
 800850a:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f003 0320 	and.w	r3, r3, #32
 8008514:	2b00      	cmp	r3, #0
 8008516:	f000 8186 	beq.w	8008826 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800851e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008522:	f000 80e4 	beq.w	80086ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800852a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800852e:	f000 80de 	beq.w	80086ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008536:	4a44      	ldr	r2, [pc, #272]	@ (8008648 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8008538:	4293      	cmp	r3, r2
 800853a:	f000 80d8 	beq.w	80086ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008542:	4a42      	ldr	r2, [pc, #264]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8008544:	4293      	cmp	r3, r2
 8008546:	f000 80d2 	beq.w	80086ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800854e:	4a40      	ldr	r2, [pc, #256]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8008550:	4293      	cmp	r3, r2
 8008552:	f000 80cc 	beq.w	80086ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800855a:	4a3e      	ldr	r2, [pc, #248]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 800855c:	4293      	cmp	r3, r2
 800855e:	f000 80c6 	beq.w	80086ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008566:	4a3c      	ldr	r2, [pc, #240]	@ (8008658 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8008568:	4293      	cmp	r3, r2
 800856a:	f000 80c0 	beq.w	80086ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008572:	4a3a      	ldr	r2, [pc, #232]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8008574:	4293      	cmp	r3, r2
 8008576:	f000 80ba 	beq.w	80086ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800857e:	4a38      	ldr	r2, [pc, #224]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8008580:	4293      	cmp	r3, r2
 8008582:	f000 80b4 	beq.w	80086ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800858a:	4a36      	ldr	r2, [pc, #216]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 800858c:	4293      	cmp	r3, r2
 800858e:	f000 80ae 	beq.w	80086ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008596:	4a34      	ldr	r2, [pc, #208]	@ (8008668 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8008598:	4293      	cmp	r3, r2
 800859a:	f000 80a8 	beq.w	80086ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085a2:	4a32      	ldr	r2, [pc, #200]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	f000 80a2 	beq.w	80086ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085ae:	4a30      	ldr	r2, [pc, #192]	@ (8008670 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	f000 809c 	beq.w	80086ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085ba:	4a2e      	ldr	r2, [pc, #184]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	f000 8096 	beq.w	80086ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085c6:	4a2c      	ldr	r2, [pc, #176]	@ (8008678 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	f000 8090 	beq.w	80086ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085d2:	4a2a      	ldr	r2, [pc, #168]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	f000 808a 	beq.w	80086ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085de:	4a28      	ldr	r2, [pc, #160]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	f000 8084 	beq.w	80086ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085ea:	4a26      	ldr	r2, [pc, #152]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d07e      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085f4:	4a24      	ldr	r2, [pc, #144]	@ (8008688 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d079      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085fe:	4a23      	ldr	r2, [pc, #140]	@ (800868c <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d074      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008608:	4a21      	ldr	r2, [pc, #132]	@ (8008690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d06f      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008612:	4a20      	ldr	r2, [pc, #128]	@ (8008694 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d06a      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800861c:	4a1e      	ldr	r2, [pc, #120]	@ (8008698 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d065      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008626:	4a1d      	ldr	r2, [pc, #116]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d060      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008630:	4a1b      	ldr	r2, [pc, #108]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d05b      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800863a:	4a1a      	ldr	r2, [pc, #104]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 800863c:	4293      	cmp	r3, r2
 800863e:	e033      	b.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8008640:	08017af8 	.word	0x08017af8
 8008644:	40023800 	.word	0x40023800
 8008648:	00020300 	.word	0x00020300
 800864c:	00030300 	.word	0x00030300
 8008650:	00040300 	.word	0x00040300
 8008654:	00050300 	.word	0x00050300
 8008658:	00060300 	.word	0x00060300
 800865c:	00070300 	.word	0x00070300
 8008660:	00080300 	.word	0x00080300
 8008664:	00090300 	.word	0x00090300
 8008668:	000a0300 	.word	0x000a0300
 800866c:	000b0300 	.word	0x000b0300
 8008670:	000c0300 	.word	0x000c0300
 8008674:	000d0300 	.word	0x000d0300
 8008678:	000e0300 	.word	0x000e0300
 800867c:	000f0300 	.word	0x000f0300
 8008680:	00100300 	.word	0x00100300
 8008684:	00110300 	.word	0x00110300
 8008688:	00120300 	.word	0x00120300
 800868c:	00130300 	.word	0x00130300
 8008690:	00140300 	.word	0x00140300
 8008694:	00150300 	.word	0x00150300
 8008698:	00160300 	.word	0x00160300
 800869c:	00170300 	.word	0x00170300
 80086a0:	00180300 	.word	0x00180300
 80086a4:	00190300 	.word	0x00190300
 80086a8:	d021      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086ae:	4a4c      	ldr	r2, [pc, #304]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d01c      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086b8:	4a4a      	ldr	r2, [pc, #296]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d017      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086c2:	4a49      	ldr	r2, [pc, #292]	@ (80087e8 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d012      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086cc:	4a47      	ldr	r2, [pc, #284]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d00d      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086d6:	4a46      	ldr	r2, [pc, #280]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d008      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086e0:	4a44      	ldr	r2, [pc, #272]	@ (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d003      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80086e6:	21b7      	movs	r1, #183	@ 0xb7
 80086e8:	4843      	ldr	r0, [pc, #268]	@ (80087f8 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80086ea:	f7fd fbcb 	bl	8005e84 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80086ee:	4b43      	ldr	r3, [pc, #268]	@ (80087fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80086f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086f2:	4a42      	ldr	r2, [pc, #264]	@ (80087fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80086f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80086fa:	4b40      	ldr	r3, [pc, #256]	@ (80087fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80086fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008702:	60bb      	str	r3, [r7, #8]
 8008704:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008706:	4b3e      	ldr	r3, [pc, #248]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a3d      	ldr	r2, [pc, #244]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 800870c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008710:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008712:	f7fe f8f7 	bl	8006904 <HAL_GetTick>
 8008716:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008718:	e009      	b.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800871a:	f7fe f8f3 	bl	8006904 <HAL_GetTick>
 800871e:	4602      	mov	r2, r0
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	1ad3      	subs	r3, r2, r3
 8008724:	2b64      	cmp	r3, #100	@ 0x64
 8008726:	d902      	bls.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 8008728:	2303      	movs	r3, #3
 800872a:	f000 bd9f 	b.w	800926c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800872e:	4b34      	ldr	r3, [pc, #208]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008736:	2b00      	cmp	r3, #0
 8008738:	d0ef      	beq.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800873a:	4b30      	ldr	r3, [pc, #192]	@ (80087fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800873c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800873e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008742:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d036      	beq.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800874e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008752:	693a      	ldr	r2, [r7, #16]
 8008754:	429a      	cmp	r2, r3
 8008756:	d02f      	beq.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008758:	4b28      	ldr	r3, [pc, #160]	@ (80087fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800875a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800875c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008760:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008762:	4b26      	ldr	r3, [pc, #152]	@ (80087fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008766:	4a25      	ldr	r2, [pc, #148]	@ (80087fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800876c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800876e:	4b23      	ldr	r3, [pc, #140]	@ (80087fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008772:	4a22      	ldr	r2, [pc, #136]	@ (80087fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008774:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008778:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800877a:	4a20      	ldr	r2, [pc, #128]	@ (80087fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008780:	4b1e      	ldr	r3, [pc, #120]	@ (80087fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008784:	f003 0301 	and.w	r3, r3, #1
 8008788:	2b01      	cmp	r3, #1
 800878a:	d115      	bne.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800878c:	f7fe f8ba 	bl	8006904 <HAL_GetTick>
 8008790:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008792:	e00b      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008794:	f7fe f8b6 	bl	8006904 <HAL_GetTick>
 8008798:	4602      	mov	r2, r0
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d902      	bls.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80087a6:	2303      	movs	r3, #3
 80087a8:	f000 bd60 	b.w	800926c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087ac:	4b13      	ldr	r3, [pc, #76]	@ (80087fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80087ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087b0:	f003 0302 	and.w	r3, r3, #2
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d0ed      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80087c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087c4:	d120      	bne.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x554>
 80087c6:	4b0d      	ldr	r3, [pc, #52]	@ (80087fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80087d2:	4b0c      	ldr	r3, [pc, #48]	@ (8008804 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80087d4:	400b      	ands	r3, r1
 80087d6:	4909      	ldr	r1, [pc, #36]	@ (80087fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80087d8:	4313      	orrs	r3, r2
 80087da:	608b      	str	r3, [r1, #8]
 80087dc:	e01a      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x560>
 80087de:	bf00      	nop
 80087e0:	001a0300 	.word	0x001a0300
 80087e4:	001b0300 	.word	0x001b0300
 80087e8:	001c0300 	.word	0x001c0300
 80087ec:	001d0300 	.word	0x001d0300
 80087f0:	001e0300 	.word	0x001e0300
 80087f4:	001f0300 	.word	0x001f0300
 80087f8:	08017af8 	.word	0x08017af8
 80087fc:	40023800 	.word	0x40023800
 8008800:	40007000 	.word	0x40007000
 8008804:	0ffffcff 	.word	0x0ffffcff
 8008808:	4b9a      	ldr	r3, [pc, #616]	@ (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	4a99      	ldr	r2, [pc, #612]	@ (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800880e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008812:	6093      	str	r3, [r2, #8]
 8008814:	4b97      	ldr	r3, [pc, #604]	@ (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8008816:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800881c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008820:	4994      	ldr	r1, [pc, #592]	@ (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8008822:	4313      	orrs	r3, r2
 8008824:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 0310 	and.w	r3, r3, #16
 800882e:	2b00      	cmp	r3, #0
 8008830:	d01d      	beq.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008836:	2b00      	cmp	r3, #0
 8008838:	d008      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x598>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800883e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008842:	d003      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8008844:	21f1      	movs	r1, #241	@ 0xf1
 8008846:	488c      	ldr	r0, [pc, #560]	@ (8008a78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8008848:	f7fd fb1c 	bl	8005e84 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800884c:	4b89      	ldr	r3, [pc, #548]	@ (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800884e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008852:	4a88      	ldr	r2, [pc, #544]	@ (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8008854:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008858:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800885c:	4b85      	ldr	r3, [pc, #532]	@ (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800885e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008866:	4983      	ldr	r1, [pc, #524]	@ (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8008868:	4313      	orrs	r3, r2
 800886a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008876:	2b00      	cmp	r3, #0
 8008878:	d01c      	beq.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00d      	beq.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008886:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800888a:	d008      	beq.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008890:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008894:	d003      	beq.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8008896:	21fb      	movs	r1, #251	@ 0xfb
 8008898:	4877      	ldr	r0, [pc, #476]	@ (8008a78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800889a:	f7fd faf3 	bl	8005e84 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800889e:	4b75      	ldr	r3, [pc, #468]	@ (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80088a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088ac:	4971      	ldr	r1, [pc, #452]	@ (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80088ae:	4313      	orrs	r3, r2
 80088b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d01d      	beq.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00e      	beq.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x632>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80088cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80088d0:	d009      	beq.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x632>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80088d6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80088da:	d004      	beq.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x632>
 80088dc:	f240 1105 	movw	r1, #261	@ 0x105
 80088e0:	4865      	ldr	r0, [pc, #404]	@ (8008a78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80088e2:	f7fd facf 	bl	8005e84 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80088e6:	4b63      	ldr	r3, [pc, #396]	@ (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80088e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80088f4:	495f      	ldr	r1, [pc, #380]	@ (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80088f6:	4313      	orrs	r3, r2
 80088f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008904:	2b00      	cmp	r3, #0
 8008906:	d01d      	beq.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800890c:	2b00      	cmp	r3, #0
 800890e:	d00e      	beq.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008914:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008918:	d009      	beq.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x67a>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800891e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008922:	d004      	beq.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8008924:	f240 110f 	movw	r1, #271	@ 0x10f
 8008928:	4853      	ldr	r0, [pc, #332]	@ (8008a78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800892a:	f7fd faab 	bl	8005e84 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800892e:	4b51      	ldr	r3, [pc, #324]	@ (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8008930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008934:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800893c:	494d      	ldr	r1, [pc, #308]	@ (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800893e:	4313      	orrs	r3, r2
 8008940:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800894c:	2b00      	cmp	r3, #0
 800894e:	d01d      	beq.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00e      	beq.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800895c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008960:	d009      	beq.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008966:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800896a:	d004      	beq.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 800896c:	f240 1119 	movw	r1, #281	@ 0x119
 8008970:	4841      	ldr	r0, [pc, #260]	@ (8008a78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8008972:	f7fd fa87 	bl	8005e84 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008976:	4b3f      	ldr	r3, [pc, #252]	@ (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8008978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800897c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008984:	493b      	ldr	r1, [pc, #236]	@ (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8008986:	4313      	orrs	r3, r2
 8008988:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008994:	2b00      	cmp	r3, #0
 8008996:	d01f      	beq.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800899c:	2b00      	cmp	r3, #0
 800899e:	d010      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d00c      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089ac:	2b03      	cmp	r3, #3
 80089ae:	d008      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	d004      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 80089b8:	f240 1123 	movw	r1, #291	@ 0x123
 80089bc:	482e      	ldr	r0, [pc, #184]	@ (8008a78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80089be:	f7fd fa61 	bl	8005e84 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80089c2:	4b2c      	ldr	r3, [pc, #176]	@ (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80089c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089c8:	f023 0203 	bic.w	r2, r3, #3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089d0:	4928      	ldr	r1, [pc, #160]	@ (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80089d2:	4313      	orrs	r3, r2
 80089d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d01f      	beq.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d010      	beq.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x75a>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089f0:	2b04      	cmp	r3, #4
 80089f2:	d00c      	beq.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x75a>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089f8:	2b0c      	cmp	r3, #12
 80089fa:	d008      	beq.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x75a>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a00:	2b08      	cmp	r3, #8
 8008a02:	d004      	beq.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8008a04:	f240 112d 	movw	r1, #301	@ 0x12d
 8008a08:	481b      	ldr	r0, [pc, #108]	@ (8008a78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8008a0a:	f7fd fa3b 	bl	8005e84 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008a0e:	4b19      	ldr	r3, [pc, #100]	@ (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8008a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a14:	f023 020c 	bic.w	r2, r3, #12
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a1c:	4915      	ldr	r1, [pc, #84]	@ (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d025      	beq.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d010      	beq.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a3c:	2b10      	cmp	r3, #16
 8008a3e:	d00c      	beq.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a44:	2b30      	cmp	r3, #48	@ 0x30
 8008a46:	d008      	beq.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a4c:	2b20      	cmp	r3, #32
 8008a4e:	d004      	beq.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8008a50:	f240 1137 	movw	r1, #311	@ 0x137
 8008a54:	4808      	ldr	r0, [pc, #32]	@ (8008a78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8008a56:	f7fd fa15 	bl	8005e84 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008a5a:	4b06      	ldr	r3, [pc, #24]	@ (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8008a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a60:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a68:	4902      	ldr	r1, [pc, #8]	@ (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008a70:	e004      	b.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8008a72:	bf00      	nop
 8008a74:	40023800 	.word	0x40023800
 8008a78:	08017af8 	.word	0x08017af8
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d01f      	beq.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d010      	beq.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a94:	2b40      	cmp	r3, #64	@ 0x40
 8008a96:	d00c      	beq.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a9c:	2bc0      	cmp	r3, #192	@ 0xc0
 8008a9e:	d008      	beq.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008aa4:	2b80      	cmp	r3, #128	@ 0x80
 8008aa6:	d004      	beq.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8008aa8:	f240 1141 	movw	r1, #321	@ 0x141
 8008aac:	48a0      	ldr	r0, [pc, #640]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8008aae:	f7fd f9e9 	bl	8005e84 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008ab2:	4ba0      	ldr	r3, [pc, #640]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8008ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ab8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ac0:	499c      	ldr	r1, [pc, #624]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d022      	beq.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d013      	beq.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ae0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ae4:	d00e      	beq.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008aee:	d009      	beq.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008af4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008af8:	d004      	beq.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8008afa:	f240 114b 	movw	r1, #331	@ 0x14b
 8008afe:	488c      	ldr	r0, [pc, #560]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8008b00:	f7fd f9c0 	bl	8005e84 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008b04:	4b8b      	ldr	r3, [pc, #556]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8008b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b0a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b12:	4988      	ldr	r1, [pc, #544]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8008b14:	4313      	orrs	r3, r2
 8008b16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d022      	beq.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d013      	beq.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b36:	d00e      	beq.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b40:	d009      	beq.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b4a:	d004      	beq.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8008b4c:	f240 1155 	movw	r1, #341	@ 0x155
 8008b50:	4877      	ldr	r0, [pc, #476]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8008b52:	f7fd f997 	bl	8005e84 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008b56:	4b77      	ldr	r3, [pc, #476]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8008b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b5c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b64:	4973      	ldr	r1, [pc, #460]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8008b66:	4313      	orrs	r3, r2
 8008b68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d022      	beq.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d013      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b88:	d00e      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b8e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b92:	d009      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b9c:	d004      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8008b9e:	f240 115f 	movw	r1, #351	@ 0x15f
 8008ba2:	4863      	ldr	r0, [pc, #396]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8008ba4:	f7fd f96e 	bl	8005e84 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008ba8:	4b62      	ldr	r3, [pc, #392]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8008baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bae:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bb6:	495f      	ldr	r1, [pc, #380]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d022      	beq.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d013      	beq.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0x946>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008bda:	d00e      	beq.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0x946>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008be0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008be4:	d009      	beq.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0x946>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008bee:	d004      	beq.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0x946>
 8008bf0:	f240 1169 	movw	r1, #361	@ 0x169
 8008bf4:	484e      	ldr	r0, [pc, #312]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8008bf6:	f7fd f945 	bl	8005e84 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008bfa:	4b4e      	ldr	r3, [pc, #312]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8008bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c00:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c08:	494a      	ldr	r1, [pc, #296]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d018      	beq.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008c24:	d008      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d004      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8008c2e:	f240 1173 	movw	r1, #371	@ 0x173
 8008c32:	483f      	ldr	r0, [pc, #252]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8008c34:	f7fd f926 	bl	8005e84 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008c38:	4b3e      	ldr	r3, [pc, #248]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8008c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c3e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c46:	493b      	ldr	r1, [pc, #236]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d01f      	beq.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c62:	d008      	beq.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d004      	beq.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8008c6c:	f240 117d 	movw	r1, #381	@ 0x17d
 8008c70:	482f      	ldr	r0, [pc, #188]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8008c72:	f7fd f907 	bl	8005e84 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008c76:	4b2f      	ldr	r3, [pc, #188]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8008c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c7c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c84:	492b      	ldr	r1, [pc, #172]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8008c86:	4313      	orrs	r3, r2
 8008c88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c94:	d101      	bne.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 8008c96:	2301      	movs	r3, #1
 8008c98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 0308 	and.w	r3, r3, #8
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d001      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d022      	beq.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d013      	beq.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008cc6:	d00e      	beq.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ccc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008cd0:	d009      	beq.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cd6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008cda:	d004      	beq.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8008cdc:	f240 1195 	movw	r1, #405	@ 0x195
 8008ce0:	4813      	ldr	r0, [pc, #76]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8008ce2:	f7fd f8cf 	bl	8005e84 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ce6:	4b13      	ldr	r3, [pc, #76]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8008ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cec:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cf4:	490f      	ldr	r1, [pc, #60]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d020      	beq.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d12:	d009      	beq.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d004      	beq.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008d1e:	f240 119f 	movw	r1, #415	@ 0x19f
 8008d22:	4803      	ldr	r0, [pc, #12]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8008d24:	f7fd f8ae 	bl	8005e84 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008d28:	4b02      	ldr	r3, [pc, #8]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8008d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d2e:	e003      	b.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0xa84>
 8008d30:	08017af8 	.word	0x08017af8
 8008d34:	40023800 	.word	0x40023800
 8008d38:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d42:	4910      	ldr	r1, [pc, #64]	@ (8008d84 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8008d44:	4313      	orrs	r3, r2
 8008d46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d006      	beq.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	f000 8155 	beq.w	8009008 <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008d5e:	4b09      	ldr	r3, [pc, #36]	@ (8008d84 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a08      	ldr	r2, [pc, #32]	@ (8008d84 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8008d64:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d6a:	f7fd fdcb 	bl	8006904 <HAL_GetTick>
 8008d6e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008d70:	e00a      	b.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008d72:	f7fd fdc7 	bl	8006904 <HAL_GetTick>
 8008d76:	4602      	mov	r2, r0
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	1ad3      	subs	r3, r2, r3
 8008d7c:	2b64      	cmp	r3, #100	@ 0x64
 8008d7e:	d903      	bls.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008d80:	2303      	movs	r3, #3
 8008d82:	e273      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8008d84:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008d88:	4b9a      	ldr	r3, [pc, #616]	@ (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d1ee      	bne.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	2b31      	cmp	r3, #49	@ 0x31
 8008d9a:	d904      	bls.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8008da4:	d904      	bls.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 8008da6:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 8008daa:	4893      	ldr	r0, [pc, #588]	@ (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8008dac:	f7fd f86a 	bl	8005e84 <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 0301 	and.w	r3, r3, #1
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d02e      	beq.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0xb66>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d12a      	bne.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d903      	bls.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0xb20>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	2b07      	cmp	r3, #7
 8008dd2:	d904      	bls.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8008dd4:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8008dd8:	4887      	ldr	r0, [pc, #540]	@ (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8008dda:	f7fd f853 	bl	8005e84 <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008dde:	4b85      	ldr	r3, [pc, #532]	@ (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8008de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008de4:	0c1b      	lsrs	r3, r3, #16
 8008de6:	f003 0303 	and.w	r3, r3, #3
 8008dea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008dec:	4b81      	ldr	r3, [pc, #516]	@ (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8008dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008df2:	0e1b      	lsrs	r3, r3, #24
 8008df4:	f003 030f 	and.w	r3, r3, #15
 8008df8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	019a      	lsls	r2, r3, #6
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	041b      	lsls	r3, r3, #16
 8008e04:	431a      	orrs	r2, r3
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	061b      	lsls	r3, r3, #24
 8008e0a:	431a      	orrs	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	071b      	lsls	r3, r3, #28
 8008e12:	4978      	ldr	r1, [pc, #480]	@ (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8008e14:	4313      	orrs	r3, r2
 8008e16:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d004      	beq.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e2e:	d00a      	beq.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d048      	beq.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e44:	d143      	bne.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d903      	bls.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0xba2>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	68db      	ldr	r3, [r3, #12]
 8008e52:	2b0f      	cmp	r3, #15
 8008e54:	d904      	bls.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008e56:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 8008e5a:	4867      	ldr	r0, [pc, #412]	@ (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8008e5c:	f7fd f812 	bl	8005e84 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d003      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e6c:	2b20      	cmp	r3, #32
 8008e6e:	d904      	bls.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 8008e70:	f44f 71f9 	mov.w	r1, #498	@ 0x1f2
 8008e74:	4860      	ldr	r0, [pc, #384]	@ (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8008e76:	f7fd f805 	bl	8005e84 <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008e7a:	4b5e      	ldr	r3, [pc, #376]	@ (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8008e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e80:	0c1b      	lsrs	r3, r3, #16
 8008e82:	f003 0303 	and.w	r3, r3, #3
 8008e86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008e88:	4b5a      	ldr	r3, [pc, #360]	@ (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8008e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e8e:	0f1b      	lsrs	r3, r3, #28
 8008e90:	f003 0307 	and.w	r3, r3, #7
 8008e94:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	019a      	lsls	r2, r3, #6
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	041b      	lsls	r3, r3, #16
 8008ea0:	431a      	orrs	r2, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	68db      	ldr	r3, [r3, #12]
 8008ea6:	061b      	lsls	r3, r3, #24
 8008ea8:	431a      	orrs	r2, r3
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	071b      	lsls	r3, r3, #28
 8008eae:	4951      	ldr	r1, [pc, #324]	@ (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008eb6:	4b4f      	ldr	r3, [pc, #316]	@ (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8008eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ebc:	f023 021f 	bic.w	r2, r3, #31
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	494b      	ldr	r1, [pc, #300]	@ (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d032      	beq.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	691b      	ldr	r3, [r3, #16]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d010      	beq.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d00c      	beq.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	2b02      	cmp	r3, #2
 8008ef0:	d008      	beq.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	2b03      	cmp	r3, #3
 8008ef8:	d004      	beq.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8008efa:	f240 2105 	movw	r1, #517	@ 0x205
 8008efe:	483e      	ldr	r0, [pc, #248]	@ (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8008f00:	f7fc ffc0 	bl	8005e84 <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008f04:	4b3b      	ldr	r3, [pc, #236]	@ (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8008f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f0a:	0e1b      	lsrs	r3, r3, #24
 8008f0c:	f003 030f 	and.w	r3, r3, #15
 8008f10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008f12:	4b38      	ldr	r3, [pc, #224]	@ (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8008f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f18:	0f1b      	lsrs	r3, r3, #28
 8008f1a:	f003 0307 	and.w	r3, r3, #7
 8008f1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	019a      	lsls	r2, r3, #6
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	691b      	ldr	r3, [r3, #16]
 8008f2a:	041b      	lsls	r3, r3, #16
 8008f2c:	431a      	orrs	r2, r3
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	061b      	lsls	r3, r3, #24
 8008f32:	431a      	orrs	r2, r3
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	071b      	lsls	r3, r3, #28
 8008f38:	492e      	ldr	r1, [pc, #184]	@ (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d040      	beq.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	691b      	ldr	r3, [r3, #16]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d010      	beq.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	691b      	ldr	r3, [r3, #16]
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d00c      	beq.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	d008      	beq.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	691b      	ldr	r3, [r3, #16]
 8008f68:	2b03      	cmp	r3, #3
 8008f6a:	d004      	beq.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8008f6c:	f44f 7105 	mov.w	r1, #532	@ 0x214
 8008f70:	4821      	ldr	r0, [pc, #132]	@ (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8008f72:	f7fc ff87 	bl	8005e84 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d903      	bls.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	2b07      	cmp	r3, #7
 8008f84:	d904      	bls.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8008f86:	f240 2115 	movw	r1, #533	@ 0x215
 8008f8a:	481b      	ldr	r0, [pc, #108]	@ (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8008f8c:	f7fc ff7a 	bl	8005e84 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d903      	bls.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	2b0f      	cmp	r3, #15
 8008f9e:	d904      	bls.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 8008fa0:	f240 2116 	movw	r1, #534	@ 0x216
 8008fa4:	4814      	ldr	r0, [pc, #80]	@ (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8008fa6:	f7fc ff6d 	bl	8005e84 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	019a      	lsls	r2, r3, #6
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	041b      	lsls	r3, r3, #16
 8008fb6:	431a      	orrs	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	061b      	lsls	r3, r3, #24
 8008fbe:	431a      	orrs	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	071b      	lsls	r3, r3, #28
 8008fc6:	490b      	ldr	r1, [pc, #44]	@ (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008fce:	4b09      	ldr	r3, [pc, #36]	@ (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a08      	ldr	r2, [pc, #32]	@ (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8008fd4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008fd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fda:	f7fd fc93 	bl	8006904 <HAL_GetTick>
 8008fde:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008fe0:	e00c      	b.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008fe2:	f7fd fc8f 	bl	8006904 <HAL_GetTick>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	1ad3      	subs	r3, r2, r3
 8008fec:	2b64      	cmp	r3, #100	@ 0x64
 8008fee:	d905      	bls.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	e13b      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8008ff4:	40023800 	.word	0x40023800
 8008ff8:	08017af8 	.word	0x08017af8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008ffc:	4b9d      	ldr	r3, [pc, #628]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009004:	2b00      	cmp	r3, #0
 8009006:	d0ec      	beq.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	2b01      	cmp	r3, #1
 800900c:	f040 812d 	bne.w	800926a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009010:	4b98      	ldr	r3, [pc, #608]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a97      	ldr	r2, [pc, #604]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009016:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800901a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800901c:	f7fd fc72 	bl	8006904 <HAL_GetTick>
 8009020:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009022:	e008      	b.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009024:	f7fd fc6e 	bl	8006904 <HAL_GetTick>
 8009028:	4602      	mov	r2, r0
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	2b64      	cmp	r3, #100	@ 0x64
 8009030:	d901      	bls.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009032:	2303      	movs	r3, #3
 8009034:	e11a      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009036:	4b8f      	ldr	r3, [pc, #572]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800903e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009042:	d0ef      	beq.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	695b      	ldr	r3, [r3, #20]
 8009048:	2b31      	cmp	r3, #49	@ 0x31
 800904a:	d904      	bls.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0xda2>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	695b      	ldr	r3, [r3, #20]
 8009050:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8009054:	d904      	bls.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8009056:	f44f 7111 	mov.w	r1, #580	@ 0x244
 800905a:	4887      	ldr	r0, [pc, #540]	@ (8009278 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 800905c:	f7fc ff12 	bl	8005e84 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009068:	2b00      	cmp	r3, #0
 800906a:	d003      	beq.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009070:	2b00      	cmp	r3, #0
 8009072:	d009      	beq.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800907c:	2b00      	cmp	r3, #0
 800907e:	d048      	beq.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009084:	2b00      	cmp	r3, #0
 8009086:	d144      	bne.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	699b      	ldr	r3, [r3, #24]
 800908c:	2b01      	cmp	r3, #1
 800908e:	d903      	bls.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0xde4>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	699b      	ldr	r3, [r3, #24]
 8009094:	2b0f      	cmp	r3, #15
 8009096:	d904      	bls.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0xdee>
 8009098:	f240 214b 	movw	r1, #587	@ 0x24b
 800909c:	4876      	ldr	r0, [pc, #472]	@ (8009278 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 800909e:	f7fc fef1 	bl	8005e84 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d003      	beq.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ae:	2b20      	cmp	r3, #32
 80090b0:	d904      	bls.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0xe08>
 80090b2:	f240 214d 	movw	r1, #589	@ 0x24d
 80090b6:	4870      	ldr	r0, [pc, #448]	@ (8009278 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80090b8:	f7fc fee4 	bl	8005e84 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80090bc:	4b6d      	ldr	r3, [pc, #436]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80090be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090c2:	0c1b      	lsrs	r3, r3, #16
 80090c4:	f003 0303 	and.w	r3, r3, #3
 80090c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80090ca:	4b6a      	ldr	r3, [pc, #424]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80090cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090d0:	0f1b      	lsrs	r3, r3, #28
 80090d2:	f003 0307 	and.w	r3, r3, #7
 80090d6:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	695b      	ldr	r3, [r3, #20]
 80090dc:	019a      	lsls	r2, r3, #6
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	041b      	lsls	r3, r3, #16
 80090e2:	431a      	orrs	r2, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	699b      	ldr	r3, [r3, #24]
 80090e8:	061b      	lsls	r3, r3, #24
 80090ea:	431a      	orrs	r2, r3
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	071b      	lsls	r3, r3, #28
 80090f0:	4960      	ldr	r1, [pc, #384]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80090f2:	4313      	orrs	r3, r2
 80090f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80090f8:	4b5e      	ldr	r3, [pc, #376]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80090fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090fe:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009106:	3b01      	subs	r3, #1
 8009108:	021b      	lsls	r3, r3, #8
 800910a:	495a      	ldr	r1, [pc, #360]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800910c:	4313      	orrs	r3, r2
 800910e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800911a:	2b00      	cmp	r3, #0
 800911c:	d037      	beq.n	800918e <HAL_RCCEx_PeriphCLKConfig+0xeda>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009122:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009126:	d132      	bne.n	800918e <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6a1b      	ldr	r3, [r3, #32]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d010      	beq.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6a1b      	ldr	r3, [r3, #32]
 8009134:	2b01      	cmp	r3, #1
 8009136:	d00c      	beq.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6a1b      	ldr	r3, [r3, #32]
 800913c:	2b02      	cmp	r3, #2
 800913e:	d008      	beq.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6a1b      	ldr	r3, [r3, #32]
 8009144:	2b03      	cmp	r3, #3
 8009146:	d004      	beq.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8009148:	f44f 7118 	mov.w	r1, #608	@ 0x260
 800914c:	484a      	ldr	r0, [pc, #296]	@ (8009278 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 800914e:	f7fc fe99 	bl	8005e84 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009152:	4b48      	ldr	r3, [pc, #288]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009158:	0e1b      	lsrs	r3, r3, #24
 800915a:	f003 030f 	and.w	r3, r3, #15
 800915e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009160:	4b44      	ldr	r3, [pc, #272]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009166:	0f1b      	lsrs	r3, r3, #28
 8009168:	f003 0307 	and.w	r3, r3, #7
 800916c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	695b      	ldr	r3, [r3, #20]
 8009172:	019a      	lsls	r2, r3, #6
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6a1b      	ldr	r3, [r3, #32]
 8009178:	041b      	lsls	r3, r3, #16
 800917a:	431a      	orrs	r2, r3
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	061b      	lsls	r3, r3, #24
 8009180:	431a      	orrs	r2, r3
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	071b      	lsls	r3, r3, #28
 8009186:	493b      	ldr	r1, [pc, #236]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009188:	4313      	orrs	r3, r2
 800918a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f003 0308 	and.w	r3, r3, #8
 8009196:	2b00      	cmp	r3, #0
 8009198:	d04d      	beq.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	69db      	ldr	r3, [r3, #28]
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d903      	bls.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0xef6>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	69db      	ldr	r3, [r3, #28]
 80091a6:	2b07      	cmp	r3, #7
 80091a8:	d904      	bls.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 80091aa:	f240 216f 	movw	r1, #623	@ 0x26f
 80091ae:	4832      	ldr	r0, [pc, #200]	@ (8009278 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80091b0:	f7fc fe68 	bl	8005e84 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d013      	beq.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091c4:	d00e      	beq.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091ce:	d009      	beq.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80091d8:	d004      	beq.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80091da:	f44f 711c 	mov.w	r1, #624	@ 0x270
 80091de:	4826      	ldr	r0, [pc, #152]	@ (8009278 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80091e0:	f7fc fe50 	bl	8005e84 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80091e4:	4b23      	ldr	r3, [pc, #140]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80091e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091ea:	0e1b      	lsrs	r3, r3, #24
 80091ec:	f003 030f 	and.w	r3, r3, #15
 80091f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80091f2:	4b20      	ldr	r3, [pc, #128]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80091f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091f8:	0c1b      	lsrs	r3, r3, #16
 80091fa:	f003 0303 	and.w	r3, r3, #3
 80091fe:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	695b      	ldr	r3, [r3, #20]
 8009204:	019a      	lsls	r2, r3, #6
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	041b      	lsls	r3, r3, #16
 800920a:	431a      	orrs	r2, r3
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	061b      	lsls	r3, r3, #24
 8009210:	431a      	orrs	r2, r3
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	69db      	ldr	r3, [r3, #28]
 8009216:	071b      	lsls	r3, r3, #28
 8009218:	4916      	ldr	r1, [pc, #88]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800921a:	4313      	orrs	r3, r2
 800921c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009220:	4b14      	ldr	r3, [pc, #80]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009222:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009226:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800922e:	4911      	ldr	r1, [pc, #68]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009230:	4313      	orrs	r3, r2
 8009232:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009236:	4b0f      	ldr	r3, [pc, #60]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a0e      	ldr	r2, [pc, #56]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800923c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009240:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009242:	f7fd fb5f 	bl	8006904 <HAL_GetTick>
 8009246:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009248:	e008      	b.n	800925c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800924a:	f7fd fb5b 	bl	8006904 <HAL_GetTick>
 800924e:	4602      	mov	r2, r0
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	1ad3      	subs	r3, r2, r3
 8009254:	2b64      	cmp	r3, #100	@ 0x64
 8009256:	d901      	bls.n	800925c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009258:	2303      	movs	r3, #3
 800925a:	e007      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800925c:	4b05      	ldr	r3, [pc, #20]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009264:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009268:	d1ef      	bne.n	800924a <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3720      	adds	r7, #32
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	40023800 	.word	0x40023800
 8009278:	08017af8 	.word	0x08017af8

0800927c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d101      	bne.n	800928e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800928a:	2301      	movs	r3, #1
 800928c:	e1fb      	b.n	8009686 <HAL_SPI_Init+0x40a>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a83      	ldr	r2, [pc, #524]	@ (80094a0 <HAL_SPI_Init+0x224>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d01d      	beq.n	80092d4 <HAL_SPI_Init+0x58>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a81      	ldr	r2, [pc, #516]	@ (80094a4 <HAL_SPI_Init+0x228>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d018      	beq.n	80092d4 <HAL_SPI_Init+0x58>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a80      	ldr	r2, [pc, #512]	@ (80094a8 <HAL_SPI_Init+0x22c>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d013      	beq.n	80092d4 <HAL_SPI_Init+0x58>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a7e      	ldr	r2, [pc, #504]	@ (80094ac <HAL_SPI_Init+0x230>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d00e      	beq.n	80092d4 <HAL_SPI_Init+0x58>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a7d      	ldr	r2, [pc, #500]	@ (80094b0 <HAL_SPI_Init+0x234>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d009      	beq.n	80092d4 <HAL_SPI_Init+0x58>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a7b      	ldr	r2, [pc, #492]	@ (80094b4 <HAL_SPI_Init+0x238>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d004      	beq.n	80092d4 <HAL_SPI_Init+0x58>
 80092ca:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 80092ce:	487a      	ldr	r0, [pc, #488]	@ (80094b8 <HAL_SPI_Init+0x23c>)
 80092d0:	f7fc fdd8 	bl	8005e84 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d009      	beq.n	80092f0 <HAL_SPI_Init+0x74>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80092e4:	d004      	beq.n	80092f0 <HAL_SPI_Init+0x74>
 80092e6:	f240 1147 	movw	r1, #327	@ 0x147
 80092ea:	4873      	ldr	r0, [pc, #460]	@ (80094b8 <HAL_SPI_Init+0x23c>)
 80092ec:	f7fc fdca 	bl	8005e84 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00e      	beq.n	8009316 <HAL_SPI_Init+0x9a>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009300:	d009      	beq.n	8009316 <HAL_SPI_Init+0x9a>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800930a:	d004      	beq.n	8009316 <HAL_SPI_Init+0x9a>
 800930c:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8009310:	4869      	ldr	r0, [pc, #420]	@ (80094b8 <HAL_SPI_Init+0x23c>)
 8009312:	f7fc fdb7 	bl	8005e84 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800931e:	d040      	beq.n	80093a2 <HAL_SPI_Init+0x126>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	68db      	ldr	r3, [r3, #12]
 8009324:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8009328:	d03b      	beq.n	80093a2 <HAL_SPI_Init+0x126>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 8009332:	d036      	beq.n	80093a2 <HAL_SPI_Init+0x126>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800933c:	d031      	beq.n	80093a2 <HAL_SPI_Init+0x126>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8009346:	d02c      	beq.n	80093a2 <HAL_SPI_Init+0x126>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009350:	d027      	beq.n	80093a2 <HAL_SPI_Init+0x126>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 800935a:	d022      	beq.n	80093a2 <HAL_SPI_Init+0x126>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009364:	d01d      	beq.n	80093a2 <HAL_SPI_Init+0x126>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800936e:	d018      	beq.n	80093a2 <HAL_SPI_Init+0x126>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009378:	d013      	beq.n	80093a2 <HAL_SPI_Init+0x126>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009382:	d00e      	beq.n	80093a2 <HAL_SPI_Init+0x126>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	68db      	ldr	r3, [r3, #12]
 8009388:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800938c:	d009      	beq.n	80093a2 <HAL_SPI_Init+0x126>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009396:	d004      	beq.n	80093a2 <HAL_SPI_Init+0x126>
 8009398:	f240 1149 	movw	r1, #329	@ 0x149
 800939c:	4846      	ldr	r0, [pc, #280]	@ (80094b8 <HAL_SPI_Init+0x23c>)
 800939e:	f7fc fd71 	bl	8005e84 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093aa:	d00d      	beq.n	80093c8 <HAL_SPI_Init+0x14c>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	699b      	ldr	r3, [r3, #24]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d009      	beq.n	80093c8 <HAL_SPI_Init+0x14c>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	699b      	ldr	r3, [r3, #24]
 80093b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80093bc:	d004      	beq.n	80093c8 <HAL_SPI_Init+0x14c>
 80093be:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 80093c2:	483d      	ldr	r0, [pc, #244]	@ (80094b8 <HAL_SPI_Init+0x23c>)
 80093c4:	f7fc fd5e 	bl	8005e84 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093cc:	2b08      	cmp	r3, #8
 80093ce:	d008      	beq.n	80093e2 <HAL_SPI_Init+0x166>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d004      	beq.n	80093e2 <HAL_SPI_Init+0x166>
 80093d8:	f240 114b 	movw	r1, #331	@ 0x14b
 80093dc:	4836      	ldr	r0, [pc, #216]	@ (80094b8 <HAL_SPI_Init+0x23c>)
 80093de:	f7fc fd51 	bl	8005e84 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	69db      	ldr	r3, [r3, #28]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d020      	beq.n	800942c <HAL_SPI_Init+0x1b0>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	69db      	ldr	r3, [r3, #28]
 80093ee:	2b08      	cmp	r3, #8
 80093f0:	d01c      	beq.n	800942c <HAL_SPI_Init+0x1b0>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	69db      	ldr	r3, [r3, #28]
 80093f6:	2b10      	cmp	r3, #16
 80093f8:	d018      	beq.n	800942c <HAL_SPI_Init+0x1b0>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	69db      	ldr	r3, [r3, #28]
 80093fe:	2b18      	cmp	r3, #24
 8009400:	d014      	beq.n	800942c <HAL_SPI_Init+0x1b0>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	69db      	ldr	r3, [r3, #28]
 8009406:	2b20      	cmp	r3, #32
 8009408:	d010      	beq.n	800942c <HAL_SPI_Init+0x1b0>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	69db      	ldr	r3, [r3, #28]
 800940e:	2b28      	cmp	r3, #40	@ 0x28
 8009410:	d00c      	beq.n	800942c <HAL_SPI_Init+0x1b0>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	69db      	ldr	r3, [r3, #28]
 8009416:	2b30      	cmp	r3, #48	@ 0x30
 8009418:	d008      	beq.n	800942c <HAL_SPI_Init+0x1b0>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	69db      	ldr	r3, [r3, #28]
 800941e:	2b38      	cmp	r3, #56	@ 0x38
 8009420:	d004      	beq.n	800942c <HAL_SPI_Init+0x1b0>
 8009422:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8009426:	4824      	ldr	r0, [pc, #144]	@ (80094b8 <HAL_SPI_Init+0x23c>)
 8009428:	f7fc fd2c 	bl	8005e84 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6a1b      	ldr	r3, [r3, #32]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d008      	beq.n	8009446 <HAL_SPI_Init+0x1ca>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6a1b      	ldr	r3, [r3, #32]
 8009438:	2b80      	cmp	r3, #128	@ 0x80
 800943a:	d004      	beq.n	8009446 <HAL_SPI_Init+0x1ca>
 800943c:	f240 114d 	movw	r1, #333	@ 0x14d
 8009440:	481d      	ldr	r0, [pc, #116]	@ (80094b8 <HAL_SPI_Init+0x23c>)
 8009442:	f7fc fd1f 	bl	8005e84 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800944a:	2b00      	cmp	r3, #0
 800944c:	d008      	beq.n	8009460 <HAL_SPI_Init+0x1e4>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009452:	2b10      	cmp	r3, #16
 8009454:	d004      	beq.n	8009460 <HAL_SPI_Init+0x1e4>
 8009456:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 800945a:	4817      	ldr	r0, [pc, #92]	@ (80094b8 <HAL_SPI_Init+0x23c>)
 800945c:	f7fc fd12 	bl	8005e84 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009464:	2b00      	cmp	r3, #0
 8009466:	d158      	bne.n	800951a <HAL_SPI_Init+0x29e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d008      	beq.n	8009482 <HAL_SPI_Init+0x206>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	691b      	ldr	r3, [r3, #16]
 8009474:	2b02      	cmp	r3, #2
 8009476:	d004      	beq.n	8009482 <HAL_SPI_Init+0x206>
 8009478:	f240 1151 	movw	r1, #337	@ 0x151
 800947c:	480e      	ldr	r0, [pc, #56]	@ (80094b8 <HAL_SPI_Init+0x23c>)
 800947e:	f7fc fd01 	bl	8005e84 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	695b      	ldr	r3, [r3, #20]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d018      	beq.n	80094bc <HAL_SPI_Init+0x240>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	695b      	ldr	r3, [r3, #20]
 800948e:	2b01      	cmp	r3, #1
 8009490:	d014      	beq.n	80094bc <HAL_SPI_Init+0x240>
 8009492:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8009496:	4808      	ldr	r0, [pc, #32]	@ (80094b8 <HAL_SPI_Init+0x23c>)
 8009498:	f7fc fcf4 	bl	8005e84 <assert_failed>
 800949c:	e00e      	b.n	80094bc <HAL_SPI_Init+0x240>
 800949e:	bf00      	nop
 80094a0:	40013000 	.word	0x40013000
 80094a4:	40003800 	.word	0x40003800
 80094a8:	40003c00 	.word	0x40003c00
 80094ac:	40013400 	.word	0x40013400
 80094b0:	40015000 	.word	0x40015000
 80094b4:	40015400 	.word	0x40015400
 80094b8:	08017b34 	.word	0x08017b34

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80094c4:	d125      	bne.n	8009512 <HAL_SPI_Init+0x296>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	69db      	ldr	r3, [r3, #28]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d050      	beq.n	8009570 <HAL_SPI_Init+0x2f4>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	69db      	ldr	r3, [r3, #28]
 80094d2:	2b08      	cmp	r3, #8
 80094d4:	d04c      	beq.n	8009570 <HAL_SPI_Init+0x2f4>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	69db      	ldr	r3, [r3, #28]
 80094da:	2b10      	cmp	r3, #16
 80094dc:	d048      	beq.n	8009570 <HAL_SPI_Init+0x2f4>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	69db      	ldr	r3, [r3, #28]
 80094e2:	2b18      	cmp	r3, #24
 80094e4:	d044      	beq.n	8009570 <HAL_SPI_Init+0x2f4>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	69db      	ldr	r3, [r3, #28]
 80094ea:	2b20      	cmp	r3, #32
 80094ec:	d040      	beq.n	8009570 <HAL_SPI_Init+0x2f4>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	69db      	ldr	r3, [r3, #28]
 80094f2:	2b28      	cmp	r3, #40	@ 0x28
 80094f4:	d03c      	beq.n	8009570 <HAL_SPI_Init+0x2f4>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	69db      	ldr	r3, [r3, #28]
 80094fa:	2b30      	cmp	r3, #48	@ 0x30
 80094fc:	d038      	beq.n	8009570 <HAL_SPI_Init+0x2f4>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	69db      	ldr	r3, [r3, #28]
 8009502:	2b38      	cmp	r3, #56	@ 0x38
 8009504:	d034      	beq.n	8009570 <HAL_SPI_Init+0x2f4>
 8009506:	f44f 71ab 	mov.w	r1, #342	@ 0x156
 800950a:	4861      	ldr	r0, [pc, #388]	@ (8009690 <HAL_SPI_Init+0x414>)
 800950c:	f7fc fcba 	bl	8005e84 <assert_failed>
 8009510:	e02e      	b.n	8009570 <HAL_SPI_Init+0x2f4>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	61da      	str	r2, [r3, #28]
 8009518:	e02a      	b.n	8009570 <HAL_SPI_Init+0x2f4>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	69db      	ldr	r3, [r3, #28]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d020      	beq.n	8009564 <HAL_SPI_Init+0x2e8>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	69db      	ldr	r3, [r3, #28]
 8009526:	2b08      	cmp	r3, #8
 8009528:	d01c      	beq.n	8009564 <HAL_SPI_Init+0x2e8>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	69db      	ldr	r3, [r3, #28]
 800952e:	2b10      	cmp	r3, #16
 8009530:	d018      	beq.n	8009564 <HAL_SPI_Init+0x2e8>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	69db      	ldr	r3, [r3, #28]
 8009536:	2b18      	cmp	r3, #24
 8009538:	d014      	beq.n	8009564 <HAL_SPI_Init+0x2e8>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	69db      	ldr	r3, [r3, #28]
 800953e:	2b20      	cmp	r3, #32
 8009540:	d010      	beq.n	8009564 <HAL_SPI_Init+0x2e8>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	69db      	ldr	r3, [r3, #28]
 8009546:	2b28      	cmp	r3, #40	@ 0x28
 8009548:	d00c      	beq.n	8009564 <HAL_SPI_Init+0x2e8>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	69db      	ldr	r3, [r3, #28]
 800954e:	2b30      	cmp	r3, #48	@ 0x30
 8009550:	d008      	beq.n	8009564 <HAL_SPI_Init+0x2e8>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	69db      	ldr	r3, [r3, #28]
 8009556:	2b38      	cmp	r3, #56	@ 0x38
 8009558:	d004      	beq.n	8009564 <HAL_SPI_Init+0x2e8>
 800955a:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 800955e:	484c      	ldr	r0, [pc, #304]	@ (8009690 <HAL_SPI_Init+0x414>)
 8009560:	f7fc fc90 	bl	8005e84 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800957c:	b2db      	uxtb	r3, r3
 800957e:	2b00      	cmp	r3, #0
 8009580:	d106      	bne.n	8009590 <HAL_SPI_Init+0x314>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f7fc ff8e 	bl	80064ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2202      	movs	r2, #2
 8009594:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80095a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80095b0:	d902      	bls.n	80095b8 <HAL_SPI_Init+0x33c>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80095b2:	2300      	movs	r3, #0
 80095b4:	60fb      	str	r3, [r7, #12]
 80095b6:	e002      	b.n	80095be <HAL_SPI_Init+0x342>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80095b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80095bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80095c6:	d007      	beq.n	80095d8 <HAL_SPI_Init+0x35c>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80095d0:	d002      	beq.n	80095d8 <HAL_SPI_Init+0x35c>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80095e8:	431a      	orrs	r2, r3
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	691b      	ldr	r3, [r3, #16]
 80095ee:	f003 0302 	and.w	r3, r3, #2
 80095f2:	431a      	orrs	r2, r3
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	695b      	ldr	r3, [r3, #20]
 80095f8:	f003 0301 	and.w	r3, r3, #1
 80095fc:	431a      	orrs	r2, r3
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	699b      	ldr	r3, [r3, #24]
 8009602:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009606:	431a      	orrs	r2, r3
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	69db      	ldr	r3, [r3, #28]
 800960c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009610:	431a      	orrs	r2, r3
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a1b      	ldr	r3, [r3, #32]
 8009616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800961a:	ea42 0103 	orr.w	r1, r2, r3
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009622:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	430a      	orrs	r2, r1
 800962c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	699b      	ldr	r3, [r3, #24]
 8009632:	0c1b      	lsrs	r3, r3, #16
 8009634:	f003 0204 	and.w	r2, r3, #4
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800963c:	f003 0310 	and.w	r3, r3, #16
 8009640:	431a      	orrs	r2, r3
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009646:	f003 0308 	and.w	r3, r3, #8
 800964a:	431a      	orrs	r2, r3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009654:	ea42 0103 	orr.w	r1, r2, r3
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	430a      	orrs	r2, r1
 8009664:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	69da      	ldr	r2, [r3, #28]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009674:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	08017b34 	.word	0x08017b34

08009694 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b08a      	sub	sp, #40	@ 0x28
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]
 80096a0:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80096a2:	2301      	movs	r3, #1
 80096a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80096a6:	2300      	movs	r3, #0
 80096a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d004      	beq.n	80096be <HAL_SPI_TransmitReceive+0x2a>
 80096b4:	f240 41fe 	movw	r1, #1278	@ 0x4fe
 80096b8:	4888      	ldr	r0, [pc, #544]	@ (80098dc <HAL_SPI_TransmitReceive+0x248>)
 80096ba:	f7fc fbe3 	bl	8005e84 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d101      	bne.n	80096cc <HAL_SPI_TransmitReceive+0x38>
 80096c8:	2302      	movs	r3, #2
 80096ca:	e20d      	b.n	8009ae8 <HAL_SPI_TransmitReceive+0x454>
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80096d4:	f7fd f916 	bl	8006904 <HAL_GetTick>
 80096d8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80096e0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80096e8:	887b      	ldrh	r3, [r7, #2]
 80096ea:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80096ec:	887b      	ldrh	r3, [r7, #2]
 80096ee:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80096f0:	7efb      	ldrb	r3, [r7, #27]
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d00e      	beq.n	8009714 <HAL_SPI_TransmitReceive+0x80>
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80096fc:	d106      	bne.n	800970c <HAL_SPI_TransmitReceive+0x78>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d102      	bne.n	800970c <HAL_SPI_TransmitReceive+0x78>
 8009706:	7efb      	ldrb	r3, [r7, #27]
 8009708:	2b04      	cmp	r3, #4
 800970a:	d003      	beq.n	8009714 <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 800970c:	2302      	movs	r3, #2
 800970e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8009712:	e1e3      	b.n	8009adc <HAL_SPI_TransmitReceive+0x448>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d005      	beq.n	8009726 <HAL_SPI_TransmitReceive+0x92>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d002      	beq.n	8009726 <HAL_SPI_TransmitReceive+0x92>
 8009720:	887b      	ldrh	r3, [r7, #2]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d103      	bne.n	800972e <HAL_SPI_TransmitReceive+0x9a>
  {
    errorcode = HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800972c:	e1d6      	b.n	8009adc <HAL_SPI_TransmitReceive+0x448>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009734:	b2db      	uxtb	r3, r3
 8009736:	2b04      	cmp	r3, #4
 8009738:	d003      	beq.n	8009742 <HAL_SPI_TransmitReceive+0xae>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2205      	movs	r2, #5
 800973e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2200      	movs	r2, #0
 8009746:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	887a      	ldrh	r2, [r7, #2]
 8009752:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	887a      	ldrh	r2, [r7, #2]
 800975a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	887a      	ldrh	r2, [r7, #2]
 8009768:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	887a      	ldrh	r2, [r7, #2]
 800976e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2200      	movs	r2, #0
 8009774:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2200      	movs	r2, #0
 800977a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009784:	d802      	bhi.n	800978c <HAL_SPI_TransmitReceive+0xf8>
 8009786:	8a3b      	ldrh	r3, [r7, #16]
 8009788:	2b01      	cmp	r3, #1
 800978a:	d908      	bls.n	800979e <HAL_SPI_TransmitReceive+0x10a>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	685a      	ldr	r2, [r3, #4]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800979a:	605a      	str	r2, [r3, #4]
 800979c:	e007      	b.n	80097ae <HAL_SPI_TransmitReceive+0x11a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	685a      	ldr	r2, [r3, #4]
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80097ac:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097b8:	2b40      	cmp	r3, #64	@ 0x40
 80097ba:	d007      	beq.n	80097cc <HAL_SPI_TransmitReceive+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80097ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	68db      	ldr	r3, [r3, #12]
 80097d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80097d4:	f240 8084 	bls.w	80098e0 <HAL_SPI_TransmitReceive+0x24c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d002      	beq.n	80097e6 <HAL_SPI_TransmitReceive+0x152>
 80097e0:	8a7b      	ldrh	r3, [r7, #18]
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d16d      	bne.n	80098c2 <HAL_SPI_TransmitReceive+0x22e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097ea:	881a      	ldrh	r2, [r3, #0]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097f6:	1c9a      	adds	r2, r3, #2
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009800:	b29b      	uxth	r3, r3
 8009802:	3b01      	subs	r3, #1
 8009804:	b29a      	uxth	r2, r3
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800980a:	e05a      	b.n	80098c2 <HAL_SPI_TransmitReceive+0x22e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	f003 0302 	and.w	r3, r3, #2
 8009816:	2b02      	cmp	r3, #2
 8009818:	d11b      	bne.n	8009852 <HAL_SPI_TransmitReceive+0x1be>
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800981e:	b29b      	uxth	r3, r3
 8009820:	2b00      	cmp	r3, #0
 8009822:	d016      	beq.n	8009852 <HAL_SPI_TransmitReceive+0x1be>
 8009824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009826:	2b01      	cmp	r3, #1
 8009828:	d113      	bne.n	8009852 <HAL_SPI_TransmitReceive+0x1be>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800982e:	881a      	ldrh	r2, [r3, #0]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800983a:	1c9a      	adds	r2, r3, #2
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009844:	b29b      	uxth	r3, r3
 8009846:	3b01      	subs	r3, #1
 8009848:	b29a      	uxth	r2, r3
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800984e:	2300      	movs	r3, #0
 8009850:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	f003 0301 	and.w	r3, r3, #1
 800985c:	2b01      	cmp	r3, #1
 800985e:	d11c      	bne.n	800989a <HAL_SPI_TransmitReceive+0x206>
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009866:	b29b      	uxth	r3, r3
 8009868:	2b00      	cmp	r3, #0
 800986a:	d016      	beq.n	800989a <HAL_SPI_TransmitReceive+0x206>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68da      	ldr	r2, [r3, #12]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009876:	b292      	uxth	r2, r2
 8009878:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800987e:	1c9a      	adds	r2, r3, #2
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800988a:	b29b      	uxth	r3, r3
 800988c:	3b01      	subs	r3, #1
 800988e:	b29a      	uxth	r2, r3
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009896:	2301      	movs	r3, #1
 8009898:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800989a:	f7fd f833 	bl	8006904 <HAL_GetTick>
 800989e:	4602      	mov	r2, r0
 80098a0:	69fb      	ldr	r3, [r7, #28]
 80098a2:	1ad3      	subs	r3, r2, r3
 80098a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d80b      	bhi.n	80098c2 <HAL_SPI_TransmitReceive+0x22e>
 80098aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098b0:	d007      	beq.n	80098c2 <HAL_SPI_TransmitReceive+0x22e>
      {
        errorcode = HAL_TIMEOUT;
 80098b2:	2303      	movs	r3, #3
 80098b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80098c0:	e10c      	b.n	8009adc <HAL_SPI_TransmitReceive+0x448>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d19f      	bne.n	800980c <HAL_SPI_TransmitReceive+0x178>
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d199      	bne.n	800980c <HAL_SPI_TransmitReceive+0x178>
 80098d8:	e0e6      	b.n	8009aa8 <HAL_SPI_TransmitReceive+0x414>
 80098da:	bf00      	nop
 80098dc:	08017b34 	.word	0x08017b34
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d003      	beq.n	80098f0 <HAL_SPI_TransmitReceive+0x25c>
 80098e8:	8a7b      	ldrh	r3, [r7, #18]
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	f040 80cf 	bne.w	8009a8e <HAL_SPI_TransmitReceive+0x3fa>
    {
      if (hspi->TxXferCount > 1U)
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d912      	bls.n	8009920 <HAL_SPI_TransmitReceive+0x28c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098fe:	881a      	ldrh	r2, [r3, #0]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800990a:	1c9a      	adds	r2, r3, #2
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009914:	b29b      	uxth	r3, r3
 8009916:	3b02      	subs	r3, #2
 8009918:	b29a      	uxth	r2, r3
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800991e:	e0b6      	b.n	8009a8e <HAL_SPI_TransmitReceive+0x3fa>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	330c      	adds	r3, #12
 800992a:	7812      	ldrb	r2, [r2, #0]
 800992c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009932:	1c5a      	adds	r2, r3, #1
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800993c:	b29b      	uxth	r3, r3
 800993e:	3b01      	subs	r3, #1
 8009940:	b29a      	uxth	r2, r3
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009946:	e0a2      	b.n	8009a8e <HAL_SPI_TransmitReceive+0x3fa>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	f003 0302 	and.w	r3, r3, #2
 8009952:	2b02      	cmp	r3, #2
 8009954:	d134      	bne.n	80099c0 <HAL_SPI_TransmitReceive+0x32c>
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800995a:	b29b      	uxth	r3, r3
 800995c:	2b00      	cmp	r3, #0
 800995e:	d02f      	beq.n	80099c0 <HAL_SPI_TransmitReceive+0x32c>
 8009960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009962:	2b01      	cmp	r3, #1
 8009964:	d12c      	bne.n	80099c0 <HAL_SPI_TransmitReceive+0x32c>
      {
        if (hspi->TxXferCount > 1U)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800996a:	b29b      	uxth	r3, r3
 800996c:	2b01      	cmp	r3, #1
 800996e:	d912      	bls.n	8009996 <HAL_SPI_TransmitReceive+0x302>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009974:	881a      	ldrh	r2, [r3, #0]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009980:	1c9a      	adds	r2, r3, #2
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800998a:	b29b      	uxth	r3, r3
 800998c:	3b02      	subs	r3, #2
 800998e:	b29a      	uxth	r2, r3
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009994:	e012      	b.n	80099bc <HAL_SPI_TransmitReceive+0x328>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	330c      	adds	r3, #12
 80099a0:	7812      	ldrb	r2, [r2, #0]
 80099a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099a8:	1c5a      	adds	r2, r3, #1
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	3b01      	subs	r3, #1
 80099b6:	b29a      	uxth	r2, r3
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80099bc:	2300      	movs	r3, #0
 80099be:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	689b      	ldr	r3, [r3, #8]
 80099c6:	f003 0301 	and.w	r3, r3, #1
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d148      	bne.n	8009a60 <HAL_SPI_TransmitReceive+0x3cc>
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d042      	beq.n	8009a60 <HAL_SPI_TransmitReceive+0x3cc>
      {
        if (hspi->RxXferCount > 1U)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d923      	bls.n	8009a2e <HAL_SPI_TransmitReceive+0x39a>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	68da      	ldr	r2, [r3, #12]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099f0:	b292      	uxth	r2, r2
 80099f2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099f8:	1c9a      	adds	r2, r3, #2
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	3b02      	subs	r3, #2
 8009a08:	b29a      	uxth	r2, r3
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d81f      	bhi.n	8009a5c <HAL_SPI_TransmitReceive+0x3c8>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	685a      	ldr	r2, [r3, #4]
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009a2a:	605a      	str	r2, [r3, #4]
 8009a2c:	e016      	b.n	8009a5c <HAL_SPI_TransmitReceive+0x3c8>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f103 020c 	add.w	r2, r3, #12
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a3a:	7812      	ldrb	r2, [r2, #0]
 8009a3c:	b2d2      	uxtb	r2, r2
 8009a3e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a44:	1c5a      	adds	r2, r3, #1
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	3b01      	subs	r3, #1
 8009a54:	b29a      	uxth	r2, r3
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009a60:	f7fc ff50 	bl	8006904 <HAL_GetTick>
 8009a64:	4602      	mov	r2, r0
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d803      	bhi.n	8009a78 <HAL_SPI_TransmitReceive+0x3e4>
 8009a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a76:	d102      	bne.n	8009a7e <HAL_SPI_TransmitReceive+0x3ea>
 8009a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d107      	bne.n	8009a8e <HAL_SPI_TransmitReceive+0x3fa>
      {
        errorcode = HAL_TIMEOUT;
 8009a7e:	2303      	movs	r3, #3
 8009a80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2201      	movs	r2, #1
 8009a88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8009a8c:	e026      	b.n	8009adc <HAL_SPI_TransmitReceive+0x448>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	f47f af57 	bne.w	8009948 <HAL_SPI_TransmitReceive+0x2b4>
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	f47f af50 	bne.w	8009948 <HAL_SPI_TransmitReceive+0x2b4>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009aa8:	69fa      	ldr	r2, [r7, #28]
 8009aaa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009aac:	68f8      	ldr	r0, [r7, #12]
 8009aae:	f000 fa5d 	bl	8009f6c <SPI_EndRxTxTransaction>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d005      	beq.n	8009ac4 <HAL_SPI_TransmitReceive+0x430>
  {
    errorcode = HAL_ERROR;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2220      	movs	r2, #32
 8009ac2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d003      	beq.n	8009ad4 <HAL_SPI_TransmitReceive+0x440>
  {
    errorcode = HAL_ERROR;
 8009acc:	2301      	movs	r3, #1
 8009ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ad2:	e003      	b.n	8009adc <HAL_SPI_TransmitReceive+0x448>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8009ae4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3728      	adds	r7, #40	@ 0x28
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b088      	sub	sp, #32
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009b08:	69bb      	ldr	r3, [r7, #24]
 8009b0a:	099b      	lsrs	r3, r3, #6
 8009b0c:	f003 0301 	and.w	r3, r3, #1
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d10f      	bne.n	8009b34 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009b14:	69bb      	ldr	r3, [r7, #24]
 8009b16:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d00a      	beq.n	8009b34 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009b1e:	69fb      	ldr	r3, [r7, #28]
 8009b20:	099b      	lsrs	r3, r3, #6
 8009b22:	f003 0301 	and.w	r3, r3, #1
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d004      	beq.n	8009b34 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	4798      	blx	r3
    return;
 8009b32:	e0d7      	b.n	8009ce4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	085b      	lsrs	r3, r3, #1
 8009b38:	f003 0301 	and.w	r3, r3, #1
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d00a      	beq.n	8009b56 <HAL_SPI_IRQHandler+0x66>
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	09db      	lsrs	r3, r3, #7
 8009b44:	f003 0301 	and.w	r3, r3, #1
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d004      	beq.n	8009b56 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	4798      	blx	r3
    return;
 8009b54:	e0c6      	b.n	8009ce4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009b56:	69bb      	ldr	r3, [r7, #24]
 8009b58:	095b      	lsrs	r3, r3, #5
 8009b5a:	f003 0301 	and.w	r3, r3, #1
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d10c      	bne.n	8009b7c <HAL_SPI_IRQHandler+0x8c>
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	099b      	lsrs	r3, r3, #6
 8009b66:	f003 0301 	and.w	r3, r3, #1
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d106      	bne.n	8009b7c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	0a1b      	lsrs	r3, r3, #8
 8009b72:	f003 0301 	and.w	r3, r3, #1
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	f000 80b4 	beq.w	8009ce4 <HAL_SPI_IRQHandler+0x1f4>
 8009b7c:	69fb      	ldr	r3, [r7, #28]
 8009b7e:	095b      	lsrs	r3, r3, #5
 8009b80:	f003 0301 	and.w	r3, r3, #1
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f000 80ad 	beq.w	8009ce4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	099b      	lsrs	r3, r3, #6
 8009b8e:	f003 0301 	and.w	r3, r3, #1
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d023      	beq.n	8009bde <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	2b03      	cmp	r3, #3
 8009ba0:	d011      	beq.n	8009bc6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ba6:	f043 0204 	orr.w	r2, r3, #4
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009bae:	2300      	movs	r3, #0
 8009bb0:	617b      	str	r3, [r7, #20]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	617b      	str	r3, [r7, #20]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	689b      	ldr	r3, [r3, #8]
 8009bc0:	617b      	str	r3, [r7, #20]
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	e00b      	b.n	8009bde <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	613b      	str	r3, [r7, #16]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	613b      	str	r3, [r7, #16]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	613b      	str	r3, [r7, #16]
 8009bda:	693b      	ldr	r3, [r7, #16]
        return;
 8009bdc:	e082      	b.n	8009ce4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	095b      	lsrs	r3, r3, #5
 8009be2:	f003 0301 	and.w	r3, r3, #1
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d014      	beq.n	8009c14 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bee:	f043 0201 	orr.w	r2, r3, #1
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	60fb      	str	r3, [r7, #12]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	689b      	ldr	r3, [r3, #8]
 8009c00:	60fb      	str	r3, [r7, #12]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c10:	601a      	str	r2, [r3, #0]
 8009c12:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	0a1b      	lsrs	r3, r3, #8
 8009c18:	f003 0301 	and.w	r3, r3, #1
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d00c      	beq.n	8009c3a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c24:	f043 0208 	orr.w	r2, r3, #8
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	60bb      	str	r3, [r7, #8]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	60bb      	str	r3, [r7, #8]
 8009c38:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d04f      	beq.n	8009ce2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	685a      	ldr	r2, [r3, #4]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009c50:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2201      	movs	r2, #1
 8009c56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009c5a:	69fb      	ldr	r3, [r7, #28]
 8009c5c:	f003 0302 	and.w	r3, r3, #2
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d104      	bne.n	8009c6e <HAL_SPI_IRQHandler+0x17e>
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	f003 0301 	and.w	r3, r3, #1
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d034      	beq.n	8009cd8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	685a      	ldr	r2, [r3, #4]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f022 0203 	bic.w	r2, r2, #3
 8009c7c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d011      	beq.n	8009caa <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c8a:	4a18      	ldr	r2, [pc, #96]	@ (8009cec <HAL_SPI_IRQHandler+0x1fc>)
 8009c8c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7fd f934 	bl	8006f00 <HAL_DMA_Abort_IT>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d005      	beq.n	8009caa <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ca2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d016      	beq.n	8009ce0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cb6:	4a0d      	ldr	r2, [pc, #52]	@ (8009cec <HAL_SPI_IRQHandler+0x1fc>)
 8009cb8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7fd f91e 	bl	8006f00 <HAL_DMA_Abort_IT>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00a      	beq.n	8009ce0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8009cd6:	e003      	b.n	8009ce0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 f809 	bl	8009cf0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009cde:	e000      	b.n	8009ce2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009ce0:	bf00      	nop
    return;
 8009ce2:	bf00      	nop
  }
}
 8009ce4:	3720      	adds	r7, #32
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	08009d05 	.word	0x08009d05

08009cf0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009cf8:	bf00      	nop
 8009cfa:	370c      	adds	r7, #12
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d10:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009d20:	68f8      	ldr	r0, [r7, #12]
 8009d22:	f7ff ffe5 	bl	8009cf0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009d26:	bf00      	nop
 8009d28:	3710      	adds	r7, #16
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
	...

08009d30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b088      	sub	sp, #32
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	603b      	str	r3, [r7, #0]
 8009d3c:	4613      	mov	r3, r2
 8009d3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009d40:	f7fc fde0 	bl	8006904 <HAL_GetTick>
 8009d44:	4602      	mov	r2, r0
 8009d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d48:	1a9b      	subs	r3, r3, r2
 8009d4a:	683a      	ldr	r2, [r7, #0]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009d50:	f7fc fdd8 	bl	8006904 <HAL_GetTick>
 8009d54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009d56:	4b39      	ldr	r3, [pc, #228]	@ (8009e3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	015b      	lsls	r3, r3, #5
 8009d5c:	0d1b      	lsrs	r3, r3, #20
 8009d5e:	69fa      	ldr	r2, [r7, #28]
 8009d60:	fb02 f303 	mul.w	r3, r2, r3
 8009d64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009d66:	e054      	b.n	8009e12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d6e:	d050      	beq.n	8009e12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009d70:	f7fc fdc8 	bl	8006904 <HAL_GetTick>
 8009d74:	4602      	mov	r2, r0
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	1ad3      	subs	r3, r2, r3
 8009d7a:	69fa      	ldr	r2, [r7, #28]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d902      	bls.n	8009d86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d13d      	bne.n	8009e02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	685a      	ldr	r2, [r3, #4]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009d94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009d9e:	d111      	bne.n	8009dc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009da8:	d004      	beq.n	8009db4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	689b      	ldr	r3, [r3, #8]
 8009dae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009db2:	d107      	bne.n	8009dc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	681a      	ldr	r2, [r3, #0]
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009dc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009dcc:	d10f      	bne.n	8009dee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009ddc:	601a      	str	r2, [r3, #0]
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009dec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2201      	movs	r2, #1
 8009df2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009dfe:	2303      	movs	r3, #3
 8009e00:	e017      	b.n	8009e32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d101      	bne.n	8009e0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	689a      	ldr	r2, [r3, #8]
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	4013      	ands	r3, r2
 8009e1c:	68ba      	ldr	r2, [r7, #8]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	bf0c      	ite	eq
 8009e22:	2301      	moveq	r3, #1
 8009e24:	2300      	movne	r3, #0
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	461a      	mov	r2, r3
 8009e2a:	79fb      	ldrb	r3, [r7, #7]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d19b      	bne.n	8009d68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009e30:	2300      	movs	r3, #0
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3720      	adds	r7, #32
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	2000004c 	.word	0x2000004c

08009e40 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b08a      	sub	sp, #40	@ 0x28
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	607a      	str	r2, [r7, #4]
 8009e4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009e52:	f7fc fd57 	bl	8006904 <HAL_GetTick>
 8009e56:	4602      	mov	r2, r0
 8009e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e5a:	1a9b      	subs	r3, r3, r2
 8009e5c:	683a      	ldr	r2, [r7, #0]
 8009e5e:	4413      	add	r3, r2
 8009e60:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009e62:	f7fc fd4f 	bl	8006904 <HAL_GetTick>
 8009e66:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	330c      	adds	r3, #12
 8009e6e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009e70:	4b3d      	ldr	r3, [pc, #244]	@ (8009f68 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	4613      	mov	r3, r2
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	4413      	add	r3, r2
 8009e7a:	00da      	lsls	r2, r3, #3
 8009e7c:	1ad3      	subs	r3, r2, r3
 8009e7e:	0d1b      	lsrs	r3, r3, #20
 8009e80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e82:	fb02 f303 	mul.w	r3, r2, r3
 8009e86:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009e88:	e060      	b.n	8009f4c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009e90:	d107      	bne.n	8009ea2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d104      	bne.n	8009ea2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009ea0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ea8:	d050      	beq.n	8009f4c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009eaa:	f7fc fd2b 	bl	8006904 <HAL_GetTick>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	6a3b      	ldr	r3, [r7, #32]
 8009eb2:	1ad3      	subs	r3, r2, r3
 8009eb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d902      	bls.n	8009ec0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d13d      	bne.n	8009f3c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	685a      	ldr	r2, [r3, #4]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009ece:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009ed8:	d111      	bne.n	8009efe <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ee2:	d004      	beq.n	8009eee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	689b      	ldr	r3, [r3, #8]
 8009ee8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009eec:	d107      	bne.n	8009efe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009efc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f06:	d10f      	bne.n	8009f28 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009f16:	601a      	str	r2, [r3, #0]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009f26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009f38:	2303      	movs	r3, #3
 8009f3a:	e010      	b.n	8009f5e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d101      	bne.n	8009f46 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009f42:	2300      	movs	r3, #0
 8009f44:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	3b01      	subs	r3, #1
 8009f4a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	689a      	ldr	r2, [r3, #8]
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	4013      	ands	r3, r2
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d196      	bne.n	8009e8a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3728      	adds	r7, #40	@ 0x28
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	2000004c 	.word	0x2000004c

08009f6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b088      	sub	sp, #32
 8009f70:	af02      	add	r7, sp, #8
 8009f72:	60f8      	str	r0, [r7, #12]
 8009f74:	60b9      	str	r1, [r7, #8]
 8009f76:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	9300      	str	r3, [sp, #0]
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	f7ff ff5b 	bl	8009e40 <SPI_WaitFifoStateUntilTimeout>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d007      	beq.n	8009fa0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f94:	f043 0220 	orr.w	r2, r3, #32
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009f9c:	2303      	movs	r3, #3
 8009f9e:	e046      	b.n	800a02e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009fa0:	4b25      	ldr	r3, [pc, #148]	@ (800a038 <SPI_EndRxTxTransaction+0xcc>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a25      	ldr	r2, [pc, #148]	@ (800a03c <SPI_EndRxTxTransaction+0xd0>)
 8009fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8009faa:	0d5b      	lsrs	r3, r3, #21
 8009fac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009fb0:	fb02 f303 	mul.w	r3, r2, r3
 8009fb4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009fbe:	d112      	bne.n	8009fe6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	9300      	str	r3, [sp, #0]
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	2180      	movs	r1, #128	@ 0x80
 8009fca:	68f8      	ldr	r0, [r7, #12]
 8009fcc:	f7ff feb0 	bl	8009d30 <SPI_WaitFlagStateUntilTimeout>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d016      	beq.n	800a004 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fda:	f043 0220 	orr.w	r2, r3, #32
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009fe2:	2303      	movs	r3, #3
 8009fe4:	e023      	b.n	800a02e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d00a      	beq.n	800a002 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	3b01      	subs	r3, #1
 8009ff0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ffc:	2b80      	cmp	r3, #128	@ 0x80
 8009ffe:	d0f2      	beq.n	8009fe6 <SPI_EndRxTxTransaction+0x7a>
 800a000:	e000      	b.n	800a004 <SPI_EndRxTxTransaction+0x98>
        break;
 800a002:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	9300      	str	r3, [sp, #0]
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	2200      	movs	r2, #0
 800a00c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a010:	68f8      	ldr	r0, [r7, #12]
 800a012:	f7ff ff15 	bl	8009e40 <SPI_WaitFifoStateUntilTimeout>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d007      	beq.n	800a02c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a020:	f043 0220 	orr.w	r2, r3, #32
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a028:	2303      	movs	r3, #3
 800a02a:	e000      	b.n	800a02e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3718      	adds	r7, #24
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	2000004c 	.word	0x2000004c
 800a03c:	165e9f81 	.word	0x165e9f81

0800a040 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d101      	bne.n	800a052 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	e0f5      	b.n	800a23e <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4a7c      	ldr	r2, [pc, #496]	@ (800a248 <HAL_TIM_Base_Init+0x208>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d045      	beq.n	800a0e8 <HAL_TIM_Base_Init+0xa8>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a064:	d040      	beq.n	800a0e8 <HAL_TIM_Base_Init+0xa8>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a78      	ldr	r2, [pc, #480]	@ (800a24c <HAL_TIM_Base_Init+0x20c>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d03b      	beq.n	800a0e8 <HAL_TIM_Base_Init+0xa8>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a76      	ldr	r2, [pc, #472]	@ (800a250 <HAL_TIM_Base_Init+0x210>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d036      	beq.n	800a0e8 <HAL_TIM_Base_Init+0xa8>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a75      	ldr	r2, [pc, #468]	@ (800a254 <HAL_TIM_Base_Init+0x214>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d031      	beq.n	800a0e8 <HAL_TIM_Base_Init+0xa8>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a73      	ldr	r2, [pc, #460]	@ (800a258 <HAL_TIM_Base_Init+0x218>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d02c      	beq.n	800a0e8 <HAL_TIM_Base_Init+0xa8>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a72      	ldr	r2, [pc, #456]	@ (800a25c <HAL_TIM_Base_Init+0x21c>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d027      	beq.n	800a0e8 <HAL_TIM_Base_Init+0xa8>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a70      	ldr	r2, [pc, #448]	@ (800a260 <HAL_TIM_Base_Init+0x220>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d022      	beq.n	800a0e8 <HAL_TIM_Base_Init+0xa8>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a6f      	ldr	r2, [pc, #444]	@ (800a264 <HAL_TIM_Base_Init+0x224>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d01d      	beq.n	800a0e8 <HAL_TIM_Base_Init+0xa8>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a6d      	ldr	r2, [pc, #436]	@ (800a268 <HAL_TIM_Base_Init+0x228>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d018      	beq.n	800a0e8 <HAL_TIM_Base_Init+0xa8>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4a6c      	ldr	r2, [pc, #432]	@ (800a26c <HAL_TIM_Base_Init+0x22c>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d013      	beq.n	800a0e8 <HAL_TIM_Base_Init+0xa8>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a6a      	ldr	r2, [pc, #424]	@ (800a270 <HAL_TIM_Base_Init+0x230>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d00e      	beq.n	800a0e8 <HAL_TIM_Base_Init+0xa8>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4a69      	ldr	r2, [pc, #420]	@ (800a274 <HAL_TIM_Base_Init+0x234>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d009      	beq.n	800a0e8 <HAL_TIM_Base_Init+0xa8>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a67      	ldr	r2, [pc, #412]	@ (800a278 <HAL_TIM_Base_Init+0x238>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d004      	beq.n	800a0e8 <HAL_TIM_Base_Init+0xa8>
 800a0de:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800a0e2:	4866      	ldr	r0, [pc, #408]	@ (800a27c <HAL_TIM_Base_Init+0x23c>)
 800a0e4:	f7fb fece 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	689b      	ldr	r3, [r3, #8]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d014      	beq.n	800a11a <HAL_TIM_Base_Init+0xda>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	2b10      	cmp	r3, #16
 800a0f6:	d010      	beq.n	800a11a <HAL_TIM_Base_Init+0xda>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	2b20      	cmp	r3, #32
 800a0fe:	d00c      	beq.n	800a11a <HAL_TIM_Base_Init+0xda>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	2b40      	cmp	r3, #64	@ 0x40
 800a106:	d008      	beq.n	800a11a <HAL_TIM_Base_Init+0xda>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	2b60      	cmp	r3, #96	@ 0x60
 800a10e:	d004      	beq.n	800a11a <HAL_TIM_Base_Init+0xda>
 800a110:	f240 1117 	movw	r1, #279	@ 0x117
 800a114:	4859      	ldr	r0, [pc, #356]	@ (800a27c <HAL_TIM_Base_Init+0x23c>)
 800a116:	f7fb feb5 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	691b      	ldr	r3, [r3, #16]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d00e      	beq.n	800a140 <HAL_TIM_Base_Init+0x100>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	691b      	ldr	r3, [r3, #16]
 800a126:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a12a:	d009      	beq.n	800a140 <HAL_TIM_Base_Init+0x100>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	691b      	ldr	r3, [r3, #16]
 800a130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a134:	d004      	beq.n	800a140 <HAL_TIM_Base_Init+0x100>
 800a136:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800a13a:	4850      	ldr	r0, [pc, #320]	@ (800a27c <HAL_TIM_Base_Init+0x23c>)
 800a13c:	f7fb fea2 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a148:	d004      	beq.n	800a154 <HAL_TIM_Base_Init+0x114>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a41      	ldr	r2, [pc, #260]	@ (800a254 <HAL_TIM_Base_Init+0x214>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d107      	bne.n	800a164 <HAL_TIM_Base_Init+0x124>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	68db      	ldr	r3, [r3, #12]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	bf14      	ite	ne
 800a15c:	2301      	movne	r3, #1
 800a15e:	2300      	moveq	r3, #0
 800a160:	b2db      	uxtb	r3, r3
 800a162:	e00e      	b.n	800a182 <HAL_TIM_Base_Init+0x142>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d006      	beq.n	800a17a <HAL_TIM_Base_Init+0x13a>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a174:	d201      	bcs.n	800a17a <HAL_TIM_Base_Init+0x13a>
 800a176:	2301      	movs	r3, #1
 800a178:	e000      	b.n	800a17c <HAL_TIM_Base_Init+0x13c>
 800a17a:	2300      	movs	r3, #0
 800a17c:	f003 0301 	and.w	r3, r3, #1
 800a180:	b2db      	uxtb	r3, r3
 800a182:	2b00      	cmp	r3, #0
 800a184:	d104      	bne.n	800a190 <HAL_TIM_Base_Init+0x150>
 800a186:	f240 1119 	movw	r1, #281	@ 0x119
 800a18a:	483c      	ldr	r0, [pc, #240]	@ (800a27c <HAL_TIM_Base_Init+0x23c>)
 800a18c:	f7fb fe7a 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	699b      	ldr	r3, [r3, #24]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d008      	beq.n	800a1aa <HAL_TIM_Base_Init+0x16a>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	699b      	ldr	r3, [r3, #24]
 800a19c:	2b80      	cmp	r3, #128	@ 0x80
 800a19e:	d004      	beq.n	800a1aa <HAL_TIM_Base_Init+0x16a>
 800a1a0:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 800a1a4:	4835      	ldr	r0, [pc, #212]	@ (800a27c <HAL_TIM_Base_Init+0x23c>)
 800a1a6:	f7fb fe6d 	bl	8005e84 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d106      	bne.n	800a1c4 <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f7fc f9c0 	bl	8006544 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2202      	movs	r2, #2
 800a1c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	3304      	adds	r3, #4
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	4610      	mov	r0, r2
 800a1d8:	f002 f890 	bl	800c2fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2201      	movs	r2, #1
 800a200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2201      	movs	r2, #1
 800a208:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2201      	movs	r2, #1
 800a210:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2201      	movs	r2, #1
 800a218:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2201      	movs	r2, #1
 800a220:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2201      	movs	r2, #1
 800a228:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2201      	movs	r2, #1
 800a230:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2201      	movs	r2, #1
 800a238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a23c:	2300      	movs	r3, #0
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3708      	adds	r7, #8
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	40010000 	.word	0x40010000
 800a24c:	40000400 	.word	0x40000400
 800a250:	40000800 	.word	0x40000800
 800a254:	40000c00 	.word	0x40000c00
 800a258:	40001000 	.word	0x40001000
 800a25c:	40001400 	.word	0x40001400
 800a260:	40010400 	.word	0x40010400
 800a264:	40014000 	.word	0x40014000
 800a268:	40014400 	.word	0x40014400
 800a26c:	40014800 	.word	0x40014800
 800a270:	40001800 	.word	0x40001800
 800a274:	40001c00 	.word	0x40001c00
 800a278:	40002000 	.word	0x40002000
 800a27c:	08017b6c 	.word	0x08017b6c

0800a280 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b082      	sub	sp, #8
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d101      	bne.n	800a292 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a28e:	2301      	movs	r3, #1
 800a290:	e0f5      	b.n	800a47e <HAL_TIM_OC_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a7c      	ldr	r2, [pc, #496]	@ (800a488 <HAL_TIM_OC_Init+0x208>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d045      	beq.n	800a328 <HAL_TIM_OC_Init+0xa8>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2a4:	d040      	beq.n	800a328 <HAL_TIM_OC_Init+0xa8>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a78      	ldr	r2, [pc, #480]	@ (800a48c <HAL_TIM_OC_Init+0x20c>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d03b      	beq.n	800a328 <HAL_TIM_OC_Init+0xa8>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4a76      	ldr	r2, [pc, #472]	@ (800a490 <HAL_TIM_OC_Init+0x210>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d036      	beq.n	800a328 <HAL_TIM_OC_Init+0xa8>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4a75      	ldr	r2, [pc, #468]	@ (800a494 <HAL_TIM_OC_Init+0x214>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d031      	beq.n	800a328 <HAL_TIM_OC_Init+0xa8>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a73      	ldr	r2, [pc, #460]	@ (800a498 <HAL_TIM_OC_Init+0x218>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d02c      	beq.n	800a328 <HAL_TIM_OC_Init+0xa8>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4a72      	ldr	r2, [pc, #456]	@ (800a49c <HAL_TIM_OC_Init+0x21c>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d027      	beq.n	800a328 <HAL_TIM_OC_Init+0xa8>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a70      	ldr	r2, [pc, #448]	@ (800a4a0 <HAL_TIM_OC_Init+0x220>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d022      	beq.n	800a328 <HAL_TIM_OC_Init+0xa8>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a6f      	ldr	r2, [pc, #444]	@ (800a4a4 <HAL_TIM_OC_Init+0x224>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d01d      	beq.n	800a328 <HAL_TIM_OC_Init+0xa8>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a6d      	ldr	r2, [pc, #436]	@ (800a4a8 <HAL_TIM_OC_Init+0x228>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d018      	beq.n	800a328 <HAL_TIM_OC_Init+0xa8>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a6c      	ldr	r2, [pc, #432]	@ (800a4ac <HAL_TIM_OC_Init+0x22c>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d013      	beq.n	800a328 <HAL_TIM_OC_Init+0xa8>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a6a      	ldr	r2, [pc, #424]	@ (800a4b0 <HAL_TIM_OC_Init+0x230>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d00e      	beq.n	800a328 <HAL_TIM_OC_Init+0xa8>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a69      	ldr	r2, [pc, #420]	@ (800a4b4 <HAL_TIM_OC_Init+0x234>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d009      	beq.n	800a328 <HAL_TIM_OC_Init+0xa8>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4a67      	ldr	r2, [pc, #412]	@ (800a4b8 <HAL_TIM_OC_Init+0x238>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d004      	beq.n	800a328 <HAL_TIM_OC_Init+0xa8>
 800a31e:	f240 2196 	movw	r1, #662	@ 0x296
 800a322:	4866      	ldr	r0, [pc, #408]	@ (800a4bc <HAL_TIM_OC_Init+0x23c>)
 800a324:	f7fb fdae 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	689b      	ldr	r3, [r3, #8]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d014      	beq.n	800a35a <HAL_TIM_OC_Init+0xda>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	2b10      	cmp	r3, #16
 800a336:	d010      	beq.n	800a35a <HAL_TIM_OC_Init+0xda>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	2b20      	cmp	r3, #32
 800a33e:	d00c      	beq.n	800a35a <HAL_TIM_OC_Init+0xda>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	2b40      	cmp	r3, #64	@ 0x40
 800a346:	d008      	beq.n	800a35a <HAL_TIM_OC_Init+0xda>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	2b60      	cmp	r3, #96	@ 0x60
 800a34e:	d004      	beq.n	800a35a <HAL_TIM_OC_Init+0xda>
 800a350:	f240 2197 	movw	r1, #663	@ 0x297
 800a354:	4859      	ldr	r0, [pc, #356]	@ (800a4bc <HAL_TIM_OC_Init+0x23c>)
 800a356:	f7fb fd95 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	691b      	ldr	r3, [r3, #16]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d00e      	beq.n	800a380 <HAL_TIM_OC_Init+0x100>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	691b      	ldr	r3, [r3, #16]
 800a366:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a36a:	d009      	beq.n	800a380 <HAL_TIM_OC_Init+0x100>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	691b      	ldr	r3, [r3, #16]
 800a370:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a374:	d004      	beq.n	800a380 <HAL_TIM_OC_Init+0x100>
 800a376:	f44f 7126 	mov.w	r1, #664	@ 0x298
 800a37a:	4850      	ldr	r0, [pc, #320]	@ (800a4bc <HAL_TIM_OC_Init+0x23c>)
 800a37c:	f7fb fd82 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a388:	d004      	beq.n	800a394 <HAL_TIM_OC_Init+0x114>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a41      	ldr	r2, [pc, #260]	@ (800a494 <HAL_TIM_OC_Init+0x214>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d107      	bne.n	800a3a4 <HAL_TIM_OC_Init+0x124>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	68db      	ldr	r3, [r3, #12]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	bf14      	ite	ne
 800a39c:	2301      	movne	r3, #1
 800a39e:	2300      	moveq	r3, #0
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	e00e      	b.n	800a3c2 <HAL_TIM_OC_Init+0x142>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d006      	beq.n	800a3ba <HAL_TIM_OC_Init+0x13a>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	68db      	ldr	r3, [r3, #12]
 800a3b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3b4:	d201      	bcs.n	800a3ba <HAL_TIM_OC_Init+0x13a>
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e000      	b.n	800a3bc <HAL_TIM_OC_Init+0x13c>
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	f003 0301 	and.w	r3, r3, #1
 800a3c0:	b2db      	uxtb	r3, r3
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d104      	bne.n	800a3d0 <HAL_TIM_OC_Init+0x150>
 800a3c6:	f240 2199 	movw	r1, #665	@ 0x299
 800a3ca:	483c      	ldr	r0, [pc, #240]	@ (800a4bc <HAL_TIM_OC_Init+0x23c>)
 800a3cc:	f7fb fd5a 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	699b      	ldr	r3, [r3, #24]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d008      	beq.n	800a3ea <HAL_TIM_OC_Init+0x16a>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	699b      	ldr	r3, [r3, #24]
 800a3dc:	2b80      	cmp	r3, #128	@ 0x80
 800a3de:	d004      	beq.n	800a3ea <HAL_TIM_OC_Init+0x16a>
 800a3e0:	f240 219a 	movw	r1, #666	@ 0x29a
 800a3e4:	4835      	ldr	r0, [pc, #212]	@ (800a4bc <HAL_TIM_OC_Init+0x23c>)
 800a3e6:	f7fb fd4d 	bl	8005e84 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a3f0:	b2db      	uxtb	r3, r3
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d106      	bne.n	800a404 <HAL_TIM_OC_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 f85e 	bl	800a4c0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2202      	movs	r2, #2
 800a408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681a      	ldr	r2, [r3, #0]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	3304      	adds	r3, #4
 800a414:	4619      	mov	r1, r3
 800a416:	4610      	mov	r0, r2
 800a418:	f001 ff70 	bl	800c2fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2201      	movs	r2, #1
 800a420:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2201      	movs	r2, #1
 800a428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2201      	movs	r2, #1
 800a430:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2201      	movs	r2, #1
 800a438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2201      	movs	r2, #1
 800a440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2201      	movs	r2, #1
 800a448:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2201      	movs	r2, #1
 800a450:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2201      	movs	r2, #1
 800a458:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2201      	movs	r2, #1
 800a460:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2201      	movs	r2, #1
 800a468:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3708      	adds	r7, #8
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	40010000 	.word	0x40010000
 800a48c:	40000400 	.word	0x40000400
 800a490:	40000800 	.word	0x40000800
 800a494:	40000c00 	.word	0x40000c00
 800a498:	40001000 	.word	0x40001000
 800a49c:	40001400 	.word	0x40001400
 800a4a0:	40010400 	.word	0x40010400
 800a4a4:	40014000 	.word	0x40014000
 800a4a8:	40014400 	.word	0x40014400
 800a4ac:	40014800 	.word	0x40014800
 800a4b0:	40001800 	.word	0x40001800
 800a4b4:	40001c00 	.word	0x40001c00
 800a4b8:	40002000 	.word	0x40002000
 800a4bc:	08017b6c 	.word	0x08017b6c

0800a4c0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b083      	sub	sp, #12
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a4c8:	bf00      	nop
 800a4ca:	370c      	adds	r7, #12
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d101      	bne.n	800a4e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e0f5      	b.n	800a6d2 <HAL_TIM_PWM_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a7c      	ldr	r2, [pc, #496]	@ (800a6dc <HAL_TIM_PWM_Init+0x208>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d045      	beq.n	800a57c <HAL_TIM_PWM_Init+0xa8>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4f8:	d040      	beq.n	800a57c <HAL_TIM_PWM_Init+0xa8>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4a78      	ldr	r2, [pc, #480]	@ (800a6e0 <HAL_TIM_PWM_Init+0x20c>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d03b      	beq.n	800a57c <HAL_TIM_PWM_Init+0xa8>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a76      	ldr	r2, [pc, #472]	@ (800a6e4 <HAL_TIM_PWM_Init+0x210>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d036      	beq.n	800a57c <HAL_TIM_PWM_Init+0xa8>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4a75      	ldr	r2, [pc, #468]	@ (800a6e8 <HAL_TIM_PWM_Init+0x214>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d031      	beq.n	800a57c <HAL_TIM_PWM_Init+0xa8>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a73      	ldr	r2, [pc, #460]	@ (800a6ec <HAL_TIM_PWM_Init+0x218>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d02c      	beq.n	800a57c <HAL_TIM_PWM_Init+0xa8>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a72      	ldr	r2, [pc, #456]	@ (800a6f0 <HAL_TIM_PWM_Init+0x21c>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d027      	beq.n	800a57c <HAL_TIM_PWM_Init+0xa8>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a70      	ldr	r2, [pc, #448]	@ (800a6f4 <HAL_TIM_PWM_Init+0x220>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d022      	beq.n	800a57c <HAL_TIM_PWM_Init+0xa8>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a6f      	ldr	r2, [pc, #444]	@ (800a6f8 <HAL_TIM_PWM_Init+0x224>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d01d      	beq.n	800a57c <HAL_TIM_PWM_Init+0xa8>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a6d      	ldr	r2, [pc, #436]	@ (800a6fc <HAL_TIM_PWM_Init+0x228>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d018      	beq.n	800a57c <HAL_TIM_PWM_Init+0xa8>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4a6c      	ldr	r2, [pc, #432]	@ (800a700 <HAL_TIM_PWM_Init+0x22c>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d013      	beq.n	800a57c <HAL_TIM_PWM_Init+0xa8>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4a6a      	ldr	r2, [pc, #424]	@ (800a704 <HAL_TIM_PWM_Init+0x230>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d00e      	beq.n	800a57c <HAL_TIM_PWM_Init+0xa8>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4a69      	ldr	r2, [pc, #420]	@ (800a708 <HAL_TIM_PWM_Init+0x234>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d009      	beq.n	800a57c <HAL_TIM_PWM_Init+0xa8>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4a67      	ldr	r2, [pc, #412]	@ (800a70c <HAL_TIM_PWM_Init+0x238>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d004      	beq.n	800a57c <HAL_TIM_PWM_Init+0xa8>
 800a572:	f240 5133 	movw	r1, #1331	@ 0x533
 800a576:	4866      	ldr	r0, [pc, #408]	@ (800a710 <HAL_TIM_PWM_Init+0x23c>)
 800a578:	f7fb fc84 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	689b      	ldr	r3, [r3, #8]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d014      	beq.n	800a5ae <HAL_TIM_PWM_Init+0xda>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	2b10      	cmp	r3, #16
 800a58a:	d010      	beq.n	800a5ae <HAL_TIM_PWM_Init+0xda>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	2b20      	cmp	r3, #32
 800a592:	d00c      	beq.n	800a5ae <HAL_TIM_PWM_Init+0xda>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	689b      	ldr	r3, [r3, #8]
 800a598:	2b40      	cmp	r3, #64	@ 0x40
 800a59a:	d008      	beq.n	800a5ae <HAL_TIM_PWM_Init+0xda>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	2b60      	cmp	r3, #96	@ 0x60
 800a5a2:	d004      	beq.n	800a5ae <HAL_TIM_PWM_Init+0xda>
 800a5a4:	f240 5134 	movw	r1, #1332	@ 0x534
 800a5a8:	4859      	ldr	r0, [pc, #356]	@ (800a710 <HAL_TIM_PWM_Init+0x23c>)
 800a5aa:	f7fb fc6b 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	691b      	ldr	r3, [r3, #16]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00e      	beq.n	800a5d4 <HAL_TIM_PWM_Init+0x100>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	691b      	ldr	r3, [r3, #16]
 800a5ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5be:	d009      	beq.n	800a5d4 <HAL_TIM_PWM_Init+0x100>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	691b      	ldr	r3, [r3, #16]
 800a5c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5c8:	d004      	beq.n	800a5d4 <HAL_TIM_PWM_Init+0x100>
 800a5ca:	f240 5135 	movw	r1, #1333	@ 0x535
 800a5ce:	4850      	ldr	r0, [pc, #320]	@ (800a710 <HAL_TIM_PWM_Init+0x23c>)
 800a5d0:	f7fb fc58 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5dc:	d004      	beq.n	800a5e8 <HAL_TIM_PWM_Init+0x114>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4a41      	ldr	r2, [pc, #260]	@ (800a6e8 <HAL_TIM_PWM_Init+0x214>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d107      	bne.n	800a5f8 <HAL_TIM_PWM_Init+0x124>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	68db      	ldr	r3, [r3, #12]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	bf14      	ite	ne
 800a5f0:	2301      	movne	r3, #1
 800a5f2:	2300      	moveq	r3, #0
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	e00e      	b.n	800a616 <HAL_TIM_PWM_Init+0x142>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	68db      	ldr	r3, [r3, #12]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d006      	beq.n	800a60e <HAL_TIM_PWM_Init+0x13a>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	68db      	ldr	r3, [r3, #12]
 800a604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a608:	d201      	bcs.n	800a60e <HAL_TIM_PWM_Init+0x13a>
 800a60a:	2301      	movs	r3, #1
 800a60c:	e000      	b.n	800a610 <HAL_TIM_PWM_Init+0x13c>
 800a60e:	2300      	movs	r3, #0
 800a610:	f003 0301 	and.w	r3, r3, #1
 800a614:	b2db      	uxtb	r3, r3
 800a616:	2b00      	cmp	r3, #0
 800a618:	d104      	bne.n	800a624 <HAL_TIM_PWM_Init+0x150>
 800a61a:	f240 5136 	movw	r1, #1334	@ 0x536
 800a61e:	483c      	ldr	r0, [pc, #240]	@ (800a710 <HAL_TIM_PWM_Init+0x23c>)
 800a620:	f7fb fc30 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	699b      	ldr	r3, [r3, #24]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d008      	beq.n	800a63e <HAL_TIM_PWM_Init+0x16a>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	699b      	ldr	r3, [r3, #24]
 800a630:	2b80      	cmp	r3, #128	@ 0x80
 800a632:	d004      	beq.n	800a63e <HAL_TIM_PWM_Init+0x16a>
 800a634:	f240 5137 	movw	r1, #1335	@ 0x537
 800a638:	4835      	ldr	r0, [pc, #212]	@ (800a710 <HAL_TIM_PWM_Init+0x23c>)
 800a63a:	f7fb fc23 	bl	8005e84 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a644:	b2db      	uxtb	r3, r3
 800a646:	2b00      	cmp	r3, #0
 800a648:	d106      	bne.n	800a658 <HAL_TIM_PWM_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 f85e 	bl	800a714 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2202      	movs	r2, #2
 800a65c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	3304      	adds	r3, #4
 800a668:	4619      	mov	r1, r3
 800a66a:	4610      	mov	r0, r2
 800a66c:	f001 fe46 	bl	800c2fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2201      	movs	r2, #1
 800a674:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2201      	movs	r2, #1
 800a67c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2201      	movs	r2, #1
 800a684:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2201      	movs	r2, #1
 800a68c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2201      	movs	r2, #1
 800a694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2201      	movs	r2, #1
 800a69c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a6d0:	2300      	movs	r3, #0
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3708      	adds	r7, #8
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	40010000 	.word	0x40010000
 800a6e0:	40000400 	.word	0x40000400
 800a6e4:	40000800 	.word	0x40000800
 800a6e8:	40000c00 	.word	0x40000c00
 800a6ec:	40001000 	.word	0x40001000
 800a6f0:	40001400 	.word	0x40001400
 800a6f4:	40010400 	.word	0x40010400
 800a6f8:	40014000 	.word	0x40014000
 800a6fc:	40014400 	.word	0x40014400
 800a700:	40014800 	.word	0x40014800
 800a704:	40001800 	.word	0x40001800
 800a708:	40001c00 	.word	0x40001c00
 800a70c:	40002000 	.word	0x40002000
 800a710:	08017b6c 	.word	0x08017b6c

0800a714 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a71c:	bf00      	nop
 800a71e:	370c      	adds	r7, #12
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr

0800a728 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a89      	ldr	r2, [pc, #548]	@ (800a95c <HAL_TIM_PWM_Start+0x234>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d117      	bne.n	800a76c <HAL_TIM_PWM_Start+0x44>
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	f000 80ae 	beq.w	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	2b04      	cmp	r3, #4
 800a748:	f000 80aa 	beq.w	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	2b08      	cmp	r3, #8
 800a750:	f000 80a6 	beq.w	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	2b0c      	cmp	r3, #12
 800a758:	f000 80a2 	beq.w	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	2b10      	cmp	r3, #16
 800a760:	f000 809e 	beq.w	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	2b14      	cmp	r3, #20
 800a768:	f000 809a 	beq.w	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a774:	d10f      	bne.n	800a796 <HAL_TIM_PWM_Start+0x6e>
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	f000 8091 	beq.w	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	2b04      	cmp	r3, #4
 800a782:	f000 808d 	beq.w	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	2b08      	cmp	r3, #8
 800a78a:	f000 8089 	beq.w	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	2b0c      	cmp	r3, #12
 800a792:	f000 8085 	beq.w	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a71      	ldr	r2, [pc, #452]	@ (800a960 <HAL_TIM_PWM_Start+0x238>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d10b      	bne.n	800a7b8 <HAL_TIM_PWM_Start+0x90>
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d07c      	beq.n	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	2b04      	cmp	r3, #4
 800a7aa:	d079      	beq.n	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	2b08      	cmp	r3, #8
 800a7b0:	d076      	beq.n	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	2b0c      	cmp	r3, #12
 800a7b6:	d073      	beq.n	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a69      	ldr	r2, [pc, #420]	@ (800a964 <HAL_TIM_PWM_Start+0x23c>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d10b      	bne.n	800a7da <HAL_TIM_PWM_Start+0xb2>
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d06b      	beq.n	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	2b04      	cmp	r3, #4
 800a7cc:	d068      	beq.n	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	2b08      	cmp	r3, #8
 800a7d2:	d065      	beq.n	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	2b0c      	cmp	r3, #12
 800a7d8:	d062      	beq.n	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a62      	ldr	r2, [pc, #392]	@ (800a968 <HAL_TIM_PWM_Start+0x240>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d10b      	bne.n	800a7fc <HAL_TIM_PWM_Start+0xd4>
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d05a      	beq.n	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	2b04      	cmp	r3, #4
 800a7ee:	d057      	beq.n	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	2b08      	cmp	r3, #8
 800a7f4:	d054      	beq.n	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	2b0c      	cmp	r3, #12
 800a7fa:	d051      	beq.n	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a5a      	ldr	r2, [pc, #360]	@ (800a96c <HAL_TIM_PWM_Start+0x244>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d111      	bne.n	800a82a <HAL_TIM_PWM_Start+0x102>
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d049      	beq.n	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	2b04      	cmp	r3, #4
 800a810:	d046      	beq.n	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	2b08      	cmp	r3, #8
 800a816:	d043      	beq.n	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	2b0c      	cmp	r3, #12
 800a81c:	d040      	beq.n	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	2b10      	cmp	r3, #16
 800a822:	d03d      	beq.n	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	2b14      	cmp	r3, #20
 800a828:	d03a      	beq.n	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4a50      	ldr	r2, [pc, #320]	@ (800a970 <HAL_TIM_PWM_Start+0x248>)
 800a830:	4293      	cmp	r3, r2
 800a832:	d105      	bne.n	800a840 <HAL_TIM_PWM_Start+0x118>
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d032      	beq.n	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	2b04      	cmp	r3, #4
 800a83e:	d02f      	beq.n	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a4b      	ldr	r2, [pc, #300]	@ (800a974 <HAL_TIM_PWM_Start+0x24c>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d102      	bne.n	800a850 <HAL_TIM_PWM_Start+0x128>
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d027      	beq.n	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a48      	ldr	r2, [pc, #288]	@ (800a978 <HAL_TIM_PWM_Start+0x250>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d102      	bne.n	800a860 <HAL_TIM_PWM_Start+0x138>
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d01f      	beq.n	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a45      	ldr	r2, [pc, #276]	@ (800a97c <HAL_TIM_PWM_Start+0x254>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d105      	bne.n	800a876 <HAL_TIM_PWM_Start+0x14e>
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d017      	beq.n	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	2b04      	cmp	r3, #4
 800a874:	d014      	beq.n	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a41      	ldr	r2, [pc, #260]	@ (800a980 <HAL_TIM_PWM_Start+0x258>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d102      	bne.n	800a886 <HAL_TIM_PWM_Start+0x15e>
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d00c      	beq.n	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a3e      	ldr	r2, [pc, #248]	@ (800a984 <HAL_TIM_PWM_Start+0x25c>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d102      	bne.n	800a896 <HAL_TIM_PWM_Start+0x16e>
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d004      	beq.n	800a8a0 <HAL_TIM_PWM_Start+0x178>
 800a896:	f240 51bc 	movw	r1, #1468	@ 0x5bc
 800a89a:	483b      	ldr	r0, [pc, #236]	@ (800a988 <HAL_TIM_PWM_Start+0x260>)
 800a89c:	f7fb faf2 	bl	8005e84 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d109      	bne.n	800a8ba <HAL_TIM_PWM_Start+0x192>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	bf14      	ite	ne
 800a8b2:	2301      	movne	r3, #1
 800a8b4:	2300      	moveq	r3, #0
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	e03c      	b.n	800a934 <HAL_TIM_PWM_Start+0x20c>
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	2b04      	cmp	r3, #4
 800a8be:	d109      	bne.n	800a8d4 <HAL_TIM_PWM_Start+0x1ac>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	bf14      	ite	ne
 800a8cc:	2301      	movne	r3, #1
 800a8ce:	2300      	moveq	r3, #0
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	e02f      	b.n	800a934 <HAL_TIM_PWM_Start+0x20c>
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	2b08      	cmp	r3, #8
 800a8d8:	d109      	bne.n	800a8ee <HAL_TIM_PWM_Start+0x1c6>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	bf14      	ite	ne
 800a8e6:	2301      	movne	r3, #1
 800a8e8:	2300      	moveq	r3, #0
 800a8ea:	b2db      	uxtb	r3, r3
 800a8ec:	e022      	b.n	800a934 <HAL_TIM_PWM_Start+0x20c>
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	2b0c      	cmp	r3, #12
 800a8f2:	d109      	bne.n	800a908 <HAL_TIM_PWM_Start+0x1e0>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a8fa:	b2db      	uxtb	r3, r3
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	bf14      	ite	ne
 800a900:	2301      	movne	r3, #1
 800a902:	2300      	moveq	r3, #0
 800a904:	b2db      	uxtb	r3, r3
 800a906:	e015      	b.n	800a934 <HAL_TIM_PWM_Start+0x20c>
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	2b10      	cmp	r3, #16
 800a90c:	d109      	bne.n	800a922 <HAL_TIM_PWM_Start+0x1fa>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a914:	b2db      	uxtb	r3, r3
 800a916:	2b01      	cmp	r3, #1
 800a918:	bf14      	ite	ne
 800a91a:	2301      	movne	r3, #1
 800a91c:	2300      	moveq	r3, #0
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	e008      	b.n	800a934 <HAL_TIM_PWM_Start+0x20c>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a928:	b2db      	uxtb	r3, r3
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	bf14      	ite	ne
 800a92e:	2301      	movne	r3, #1
 800a930:	2300      	moveq	r3, #0
 800a932:	b2db      	uxtb	r3, r3
 800a934:	2b00      	cmp	r3, #0
 800a936:	d001      	beq.n	800a93c <HAL_TIM_PWM_Start+0x214>
  {
    return HAL_ERROR;
 800a938:	2301      	movs	r3, #1
 800a93a:	e0aa      	b.n	800aa92 <HAL_TIM_PWM_Start+0x36a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d104      	bne.n	800a94c <HAL_TIM_PWM_Start+0x224>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2202      	movs	r2, #2
 800a946:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a94a:	e03b      	b.n	800a9c4 <HAL_TIM_PWM_Start+0x29c>
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	2b04      	cmp	r3, #4
 800a950:	d11c      	bne.n	800a98c <HAL_TIM_PWM_Start+0x264>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2202      	movs	r2, #2
 800a956:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a95a:	e033      	b.n	800a9c4 <HAL_TIM_PWM_Start+0x29c>
 800a95c:	40010000 	.word	0x40010000
 800a960:	40000400 	.word	0x40000400
 800a964:	40000800 	.word	0x40000800
 800a968:	40000c00 	.word	0x40000c00
 800a96c:	40010400 	.word	0x40010400
 800a970:	40014000 	.word	0x40014000
 800a974:	40014400 	.word	0x40014400
 800a978:	40014800 	.word	0x40014800
 800a97c:	40001800 	.word	0x40001800
 800a980:	40001c00 	.word	0x40001c00
 800a984:	40002000 	.word	0x40002000
 800a988:	08017b6c 	.word	0x08017b6c
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	2b08      	cmp	r3, #8
 800a990:	d104      	bne.n	800a99c <HAL_TIM_PWM_Start+0x274>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2202      	movs	r2, #2
 800a996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a99a:	e013      	b.n	800a9c4 <HAL_TIM_PWM_Start+0x29c>
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	2b0c      	cmp	r3, #12
 800a9a0:	d104      	bne.n	800a9ac <HAL_TIM_PWM_Start+0x284>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2202      	movs	r2, #2
 800a9a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a9aa:	e00b      	b.n	800a9c4 <HAL_TIM_PWM_Start+0x29c>
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	2b10      	cmp	r3, #16
 800a9b0:	d104      	bne.n	800a9bc <HAL_TIM_PWM_Start+0x294>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2202      	movs	r2, #2
 800a9b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a9ba:	e003      	b.n	800a9c4 <HAL_TIM_PWM_Start+0x29c>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2202      	movs	r2, #2
 800a9c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	6839      	ldr	r1, [r7, #0]
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f002 fb29 	bl	800d024 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4a31      	ldr	r2, [pc, #196]	@ (800aa9c <HAL_TIM_PWM_Start+0x374>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d004      	beq.n	800a9e6 <HAL_TIM_PWM_Start+0x2be>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4a2f      	ldr	r2, [pc, #188]	@ (800aaa0 <HAL_TIM_PWM_Start+0x378>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d101      	bne.n	800a9ea <HAL_TIM_PWM_Start+0x2c2>
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e000      	b.n	800a9ec <HAL_TIM_PWM_Start+0x2c4>
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d007      	beq.n	800aa00 <HAL_TIM_PWM_Start+0x2d8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a9fe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4a25      	ldr	r2, [pc, #148]	@ (800aa9c <HAL_TIM_PWM_Start+0x374>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d022      	beq.n	800aa50 <HAL_TIM_PWM_Start+0x328>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa12:	d01d      	beq.n	800aa50 <HAL_TIM_PWM_Start+0x328>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4a22      	ldr	r2, [pc, #136]	@ (800aaa4 <HAL_TIM_PWM_Start+0x37c>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d018      	beq.n	800aa50 <HAL_TIM_PWM_Start+0x328>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4a21      	ldr	r2, [pc, #132]	@ (800aaa8 <HAL_TIM_PWM_Start+0x380>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d013      	beq.n	800aa50 <HAL_TIM_PWM_Start+0x328>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a1f      	ldr	r2, [pc, #124]	@ (800aaac <HAL_TIM_PWM_Start+0x384>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d00e      	beq.n	800aa50 <HAL_TIM_PWM_Start+0x328>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4a1a      	ldr	r2, [pc, #104]	@ (800aaa0 <HAL_TIM_PWM_Start+0x378>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d009      	beq.n	800aa50 <HAL_TIM_PWM_Start+0x328>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a1b      	ldr	r2, [pc, #108]	@ (800aab0 <HAL_TIM_PWM_Start+0x388>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d004      	beq.n	800aa50 <HAL_TIM_PWM_Start+0x328>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4a1a      	ldr	r2, [pc, #104]	@ (800aab4 <HAL_TIM_PWM_Start+0x38c>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d115      	bne.n	800aa7c <HAL_TIM_PWM_Start+0x354>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	689a      	ldr	r2, [r3, #8]
 800aa56:	4b18      	ldr	r3, [pc, #96]	@ (800aab8 <HAL_TIM_PWM_Start+0x390>)
 800aa58:	4013      	ands	r3, r2
 800aa5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2b06      	cmp	r3, #6
 800aa60:	d015      	beq.n	800aa8e <HAL_TIM_PWM_Start+0x366>
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa68:	d011      	beq.n	800aa8e <HAL_TIM_PWM_Start+0x366>
    {
      __HAL_TIM_ENABLE(htim);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f042 0201 	orr.w	r2, r2, #1
 800aa78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa7a:	e008      	b.n	800aa8e <HAL_TIM_PWM_Start+0x366>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f042 0201 	orr.w	r2, r2, #1
 800aa8a:	601a      	str	r2, [r3, #0]
 800aa8c:	e000      	b.n	800aa90 <HAL_TIM_PWM_Start+0x368>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aa90:	2300      	movs	r3, #0
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3710      	adds	r7, #16
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	40010000 	.word	0x40010000
 800aaa0:	40010400 	.word	0x40010400
 800aaa4:	40000400 	.word	0x40000400
 800aaa8:	40000800 	.word	0x40000800
 800aaac:	40000c00 	.word	0x40000c00
 800aab0:	40014000 	.word	0x40014000
 800aab4:	40001800 	.word	0x40001800
 800aab8:	00010007 	.word	0x00010007

0800aabc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b082      	sub	sp, #8
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d101      	bne.n	800aad0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800aacc:	2301      	movs	r3, #1
 800aace:	e0f8      	b.n	800acc2 <HAL_TIM_OnePulse_Init+0x206>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a7d      	ldr	r2, [pc, #500]	@ (800accc <HAL_TIM_OnePulse_Init+0x210>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d045      	beq.n	800ab66 <HAL_TIM_OnePulse_Init+0xaa>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aae2:	d040      	beq.n	800ab66 <HAL_TIM_OnePulse_Init+0xaa>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a79      	ldr	r2, [pc, #484]	@ (800acd0 <HAL_TIM_OnePulse_Init+0x214>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d03b      	beq.n	800ab66 <HAL_TIM_OnePulse_Init+0xaa>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4a78      	ldr	r2, [pc, #480]	@ (800acd4 <HAL_TIM_OnePulse_Init+0x218>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d036      	beq.n	800ab66 <HAL_TIM_OnePulse_Init+0xaa>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4a76      	ldr	r2, [pc, #472]	@ (800acd8 <HAL_TIM_OnePulse_Init+0x21c>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d031      	beq.n	800ab66 <HAL_TIM_OnePulse_Init+0xaa>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a75      	ldr	r2, [pc, #468]	@ (800acdc <HAL_TIM_OnePulse_Init+0x220>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d02c      	beq.n	800ab66 <HAL_TIM_OnePulse_Init+0xaa>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a73      	ldr	r2, [pc, #460]	@ (800ace0 <HAL_TIM_OnePulse_Init+0x224>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d027      	beq.n	800ab66 <HAL_TIM_OnePulse_Init+0xaa>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4a72      	ldr	r2, [pc, #456]	@ (800ace4 <HAL_TIM_OnePulse_Init+0x228>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d022      	beq.n	800ab66 <HAL_TIM_OnePulse_Init+0xaa>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a70      	ldr	r2, [pc, #448]	@ (800ace8 <HAL_TIM_OnePulse_Init+0x22c>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d01d      	beq.n	800ab66 <HAL_TIM_OnePulse_Init+0xaa>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4a6f      	ldr	r2, [pc, #444]	@ (800acec <HAL_TIM_OnePulse_Init+0x230>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d018      	beq.n	800ab66 <HAL_TIM_OnePulse_Init+0xaa>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4a6d      	ldr	r2, [pc, #436]	@ (800acf0 <HAL_TIM_OnePulse_Init+0x234>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d013      	beq.n	800ab66 <HAL_TIM_OnePulse_Init+0xaa>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4a6c      	ldr	r2, [pc, #432]	@ (800acf4 <HAL_TIM_OnePulse_Init+0x238>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d00e      	beq.n	800ab66 <HAL_TIM_OnePulse_Init+0xaa>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a6a      	ldr	r2, [pc, #424]	@ (800acf8 <HAL_TIM_OnePulse_Init+0x23c>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d009      	beq.n	800ab66 <HAL_TIM_OnePulse_Init+0xaa>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4a69      	ldr	r2, [pc, #420]	@ (800acfc <HAL_TIM_OnePulse_Init+0x240>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d004      	beq.n	800ab66 <HAL_TIM_OnePulse_Init+0xaa>
 800ab5c:	f640 2158 	movw	r1, #2648	@ 0xa58
 800ab60:	4867      	ldr	r0, [pc, #412]	@ (800ad00 <HAL_TIM_OnePulse_Init+0x244>)
 800ab62:	f7fb f98f 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	689b      	ldr	r3, [r3, #8]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d014      	beq.n	800ab98 <HAL_TIM_OnePulse_Init+0xdc>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	2b10      	cmp	r3, #16
 800ab74:	d010      	beq.n	800ab98 <HAL_TIM_OnePulse_Init+0xdc>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	689b      	ldr	r3, [r3, #8]
 800ab7a:	2b20      	cmp	r3, #32
 800ab7c:	d00c      	beq.n	800ab98 <HAL_TIM_OnePulse_Init+0xdc>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	689b      	ldr	r3, [r3, #8]
 800ab82:	2b40      	cmp	r3, #64	@ 0x40
 800ab84:	d008      	beq.n	800ab98 <HAL_TIM_OnePulse_Init+0xdc>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	689b      	ldr	r3, [r3, #8]
 800ab8a:	2b60      	cmp	r3, #96	@ 0x60
 800ab8c:	d004      	beq.n	800ab98 <HAL_TIM_OnePulse_Init+0xdc>
 800ab8e:	f640 2159 	movw	r1, #2649	@ 0xa59
 800ab92:	485b      	ldr	r0, [pc, #364]	@ (800ad00 <HAL_TIM_OnePulse_Init+0x244>)
 800ab94:	f7fb f976 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	691b      	ldr	r3, [r3, #16]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d00e      	beq.n	800abbe <HAL_TIM_OnePulse_Init+0x102>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aba8:	d009      	beq.n	800abbe <HAL_TIM_OnePulse_Init+0x102>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	691b      	ldr	r3, [r3, #16]
 800abae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abb2:	d004      	beq.n	800abbe <HAL_TIM_OnePulse_Init+0x102>
 800abb4:	f640 215a 	movw	r1, #2650	@ 0xa5a
 800abb8:	4851      	ldr	r0, [pc, #324]	@ (800ad00 <HAL_TIM_OnePulse_Init+0x244>)
 800abba:	f7fb f963 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	2b08      	cmp	r3, #8
 800abc2:	d007      	beq.n	800abd4 <HAL_TIM_OnePulse_Init+0x118>
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d004      	beq.n	800abd4 <HAL_TIM_OnePulse_Init+0x118>
 800abca:	f640 215b 	movw	r1, #2651	@ 0xa5b
 800abce:	484c      	ldr	r0, [pc, #304]	@ (800ad00 <HAL_TIM_OnePulse_Init+0x244>)
 800abd0:	f7fb f958 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abdc:	d004      	beq.n	800abe8 <HAL_TIM_OnePulse_Init+0x12c>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4a3d      	ldr	r2, [pc, #244]	@ (800acd8 <HAL_TIM_OnePulse_Init+0x21c>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d107      	bne.n	800abf8 <HAL_TIM_OnePulse_Init+0x13c>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	68db      	ldr	r3, [r3, #12]
 800abec:	2b00      	cmp	r3, #0
 800abee:	bf14      	ite	ne
 800abf0:	2301      	movne	r3, #1
 800abf2:	2300      	moveq	r3, #0
 800abf4:	b2db      	uxtb	r3, r3
 800abf6:	e00e      	b.n	800ac16 <HAL_TIM_OnePulse_Init+0x15a>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	68db      	ldr	r3, [r3, #12]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d006      	beq.n	800ac0e <HAL_TIM_OnePulse_Init+0x152>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	68db      	ldr	r3, [r3, #12]
 800ac04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac08:	d201      	bcs.n	800ac0e <HAL_TIM_OnePulse_Init+0x152>
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	e000      	b.n	800ac10 <HAL_TIM_OnePulse_Init+0x154>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	f003 0301 	and.w	r3, r3, #1
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d104      	bne.n	800ac24 <HAL_TIM_OnePulse_Init+0x168>
 800ac1a:	f640 215c 	movw	r1, #2652	@ 0xa5c
 800ac1e:	4838      	ldr	r0, [pc, #224]	@ (800ad00 <HAL_TIM_OnePulse_Init+0x244>)
 800ac20:	f7fb f930 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	699b      	ldr	r3, [r3, #24]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d008      	beq.n	800ac3e <HAL_TIM_OnePulse_Init+0x182>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	699b      	ldr	r3, [r3, #24]
 800ac30:	2b80      	cmp	r3, #128	@ 0x80
 800ac32:	d004      	beq.n	800ac3e <HAL_TIM_OnePulse_Init+0x182>
 800ac34:	f640 215d 	movw	r1, #2653	@ 0xa5d
 800ac38:	4831      	ldr	r0, [pc, #196]	@ (800ad00 <HAL_TIM_OnePulse_Init+0x244>)
 800ac3a:	f7fb f923 	bl	8005e84 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d106      	bne.n	800ac58 <HAL_TIM_OnePulse_Init+0x19c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 f856 	bl	800ad04 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2202      	movs	r2, #2
 800ac5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	3304      	adds	r3, #4
 800ac68:	4619      	mov	r1, r3
 800ac6a:	4610      	mov	r0, r2
 800ac6c:	f001 fb46 	bl	800c2fc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f022 0208 	bic.w	r2, r2, #8
 800ac7e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	6819      	ldr	r1, [r3, #0]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	683a      	ldr	r2, [r7, #0]
 800ac8c:	430a      	orrs	r2, r1
 800ac8e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2201      	movs	r2, #1
 800ac94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2201      	movs	r2, #1
 800aca4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2201      	movs	r2, #1
 800acac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2201      	movs	r2, #1
 800acb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2201      	movs	r2, #1
 800acbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800acc0:	2300      	movs	r3, #0
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3708      	adds	r7, #8
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop
 800accc:	40010000 	.word	0x40010000
 800acd0:	40000400 	.word	0x40000400
 800acd4:	40000800 	.word	0x40000800
 800acd8:	40000c00 	.word	0x40000c00
 800acdc:	40001000 	.word	0x40001000
 800ace0:	40001400 	.word	0x40001400
 800ace4:	40010400 	.word	0x40010400
 800ace8:	40014000 	.word	0x40014000
 800acec:	40014400 	.word	0x40014400
 800acf0:	40014800 	.word	0x40014800
 800acf4:	40001800 	.word	0x40001800
 800acf8:	40001c00 	.word	0x40001c00
 800acfc:	40002000 	.word	0x40002000
 800ad00:	08017b6c 	.word	0x08017b6c

0800ad04 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b083      	sub	sp, #12
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800ad0c:	bf00      	nop
 800ad0e:	370c      	adds	r7, #12
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b084      	sub	sp, #16
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ad28:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ad30:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ad38:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ad40:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ad42:	7bfb      	ldrb	r3, [r7, #15]
 800ad44:	2b01      	cmp	r3, #1
 800ad46:	d108      	bne.n	800ad5a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ad48:	7bbb      	ldrb	r3, [r7, #14]
 800ad4a:	2b01      	cmp	r3, #1
 800ad4c:	d105      	bne.n	800ad5a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ad4e:	7b7b      	ldrb	r3, [r7, #13]
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d102      	bne.n	800ad5a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ad54:	7b3b      	ldrb	r3, [r7, #12]
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	d001      	beq.n	800ad5e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e045      	b.n	800adea <HAL_TIM_OnePulse_Start_IT+0xd2>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2202      	movs	r2, #2
 800ad62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2202      	movs	r2, #2
 800ad6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2202      	movs	r2, #2
 800ad72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2202      	movs	r2, #2
 800ad7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	68da      	ldr	r2, [r3, #12]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f042 0202 	orr.w	r2, r2, #2
 800ad8c:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	68da      	ldr	r2, [r3, #12]
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f042 0204 	orr.w	r2, r2, #4
 800ad9c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	2201      	movs	r2, #1
 800ada4:	2100      	movs	r1, #0
 800ada6:	4618      	mov	r0, r3
 800ada8:	f002 f93c 	bl	800d024 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2201      	movs	r2, #1
 800adb2:	2104      	movs	r1, #4
 800adb4:	4618      	mov	r0, r3
 800adb6:	f002 f935 	bl	800d024 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4a0d      	ldr	r2, [pc, #52]	@ (800adf4 <HAL_TIM_OnePulse_Start_IT+0xdc>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d004      	beq.n	800adce <HAL_TIM_OnePulse_Start_IT+0xb6>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4a0b      	ldr	r2, [pc, #44]	@ (800adf8 <HAL_TIM_OnePulse_Start_IT+0xe0>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d101      	bne.n	800add2 <HAL_TIM_OnePulse_Start_IT+0xba>
 800adce:	2301      	movs	r3, #1
 800add0:	e000      	b.n	800add4 <HAL_TIM_OnePulse_Start_IT+0xbc>
 800add2:	2300      	movs	r3, #0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d007      	beq.n	800ade8 <HAL_TIM_OnePulse_Start_IT+0xd0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ade6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800ade8:	2300      	movs	r3, #0
}
 800adea:	4618      	mov	r0, r3
 800adec:	3710      	adds	r7, #16
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	40010000 	.word	0x40010000
 800adf8:	40010400 	.word	0x40010400

0800adfc <HAL_TIM_OnePulse_Stop_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	68da      	ldr	r2, [r3, #12]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f022 0202 	bic.w	r2, r2, #2
 800ae14:	60da      	str	r2, [r3, #12]

  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	68da      	ldr	r2, [r3, #12]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f022 0204 	bic.w	r2, r2, #4
 800ae24:	60da      	str	r2, [r3, #12]
  /* Disable the Capture compare and the Input Capture channels
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
  whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	2100      	movs	r1, #0
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f002 f8f8 	bl	800d024 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	2104      	movs	r1, #4
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f002 f8f1 	bl	800d024 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a29      	ldr	r2, [pc, #164]	@ (800aeec <HAL_TIM_OnePulse_Stop_IT+0xf0>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d004      	beq.n	800ae56 <HAL_TIM_OnePulse_Stop_IT+0x5a>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a27      	ldr	r2, [pc, #156]	@ (800aef0 <HAL_TIM_OnePulse_Stop_IT+0xf4>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d101      	bne.n	800ae5a <HAL_TIM_OnePulse_Stop_IT+0x5e>
 800ae56:	2301      	movs	r3, #1
 800ae58:	e000      	b.n	800ae5c <HAL_TIM_OnePulse_Stop_IT+0x60>
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d017      	beq.n	800ae90 <HAL_TIM_OnePulse_Stop_IT+0x94>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	6a1a      	ldr	r2, [r3, #32]
 800ae66:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ae6a:	4013      	ands	r3, r2
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d10f      	bne.n	800ae90 <HAL_TIM_OnePulse_Stop_IT+0x94>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	6a1a      	ldr	r2, [r3, #32]
 800ae76:	f240 4344 	movw	r3, #1092	@ 0x444
 800ae7a:	4013      	ands	r3, r2
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d107      	bne.n	800ae90 <HAL_TIM_OnePulse_Stop_IT+0x94>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ae8e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	6a1a      	ldr	r2, [r3, #32]
 800ae96:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ae9a:	4013      	ands	r3, r2
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d10f      	bne.n	800aec0 <HAL_TIM_OnePulse_Stop_IT+0xc4>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	6a1a      	ldr	r2, [r3, #32]
 800aea6:	f240 4344 	movw	r3, #1092	@ 0x444
 800aeaa:	4013      	ands	r3, r2
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d107      	bne.n	800aec0 <HAL_TIM_OnePulse_Stop_IT+0xc4>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	681a      	ldr	r2, [r3, #0]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f022 0201 	bic.w	r2, r2, #1
 800aebe:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2201      	movs	r2, #1
 800aec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2201      	movs	r2, #1
 800aecc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2201      	movs	r2, #1
 800aed4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2201      	movs	r2, #1
 800aedc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3708      	adds	r7, #8
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop
 800aeec:	40010000 	.word	0x40010000
 800aef0:	40010400 	.word	0x40010400

0800aef4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	68db      	ldr	r3, [r3, #12]
 800af02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	691b      	ldr	r3, [r3, #16]
 800af0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	f003 0302 	and.w	r3, r3, #2
 800af12:	2b00      	cmp	r3, #0
 800af14:	d020      	beq.n	800af58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f003 0302 	and.w	r3, r3, #2
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d01b      	beq.n	800af58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f06f 0202 	mvn.w	r2, #2
 800af28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2201      	movs	r2, #1
 800af2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	699b      	ldr	r3, [r3, #24]
 800af36:	f003 0303 	and.w	r3, r3, #3
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d003      	beq.n	800af46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f001 f9c8 	bl	800c2d4 <HAL_TIM_IC_CaptureCallback>
 800af44:	e005      	b.n	800af52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f001 f9ba 	bl	800c2c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f7f9 f835 	bl	8003fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2200      	movs	r2, #0
 800af56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	f003 0304 	and.w	r3, r3, #4
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d020      	beq.n	800afa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	f003 0304 	and.w	r3, r3, #4
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d01b      	beq.n	800afa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f06f 0204 	mvn.w	r2, #4
 800af74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2202      	movs	r2, #2
 800af7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	699b      	ldr	r3, [r3, #24]
 800af82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af86:	2b00      	cmp	r3, #0
 800af88:	d003      	beq.n	800af92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f001 f9a2 	bl	800c2d4 <HAL_TIM_IC_CaptureCallback>
 800af90:	e005      	b.n	800af9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f001 f994 	bl	800c2c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f7f9 f80f 	bl	8003fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	f003 0308 	and.w	r3, r3, #8
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d020      	beq.n	800aff0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f003 0308 	and.w	r3, r3, #8
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d01b      	beq.n	800aff0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f06f 0208 	mvn.w	r2, #8
 800afc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2204      	movs	r2, #4
 800afc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	69db      	ldr	r3, [r3, #28]
 800afce:	f003 0303 	and.w	r3, r3, #3
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d003      	beq.n	800afde <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f001 f97c 	bl	800c2d4 <HAL_TIM_IC_CaptureCallback>
 800afdc:	e005      	b.n	800afea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f001 f96e 	bl	800c2c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f7f8 ffe9 	bl	8003fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2200      	movs	r2, #0
 800afee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	f003 0310 	and.w	r3, r3, #16
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d020      	beq.n	800b03c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f003 0310 	and.w	r3, r3, #16
 800b000:	2b00      	cmp	r3, #0
 800b002:	d01b      	beq.n	800b03c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f06f 0210 	mvn.w	r2, #16
 800b00c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2208      	movs	r2, #8
 800b012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	69db      	ldr	r3, [r3, #28]
 800b01a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d003      	beq.n	800b02a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f001 f956 	bl	800c2d4 <HAL_TIM_IC_CaptureCallback>
 800b028:	e005      	b.n	800b036 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f001 f948 	bl	800c2c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f7f8 ffc3 	bl	8003fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2200      	movs	r2, #0
 800b03a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	f003 0301 	and.w	r3, r3, #1
 800b042:	2b00      	cmp	r3, #0
 800b044:	d00c      	beq.n	800b060 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f003 0301 	and.w	r3, r3, #1
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d007      	beq.n	800b060 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f06f 0201 	mvn.w	r2, #1
 800b058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f001 f926 	bl	800c2ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b066:	2b00      	cmp	r3, #0
 800b068:	d104      	bne.n	800b074 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b070:	2b00      	cmp	r3, #0
 800b072:	d00c      	beq.n	800b08e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d007      	beq.n	800b08e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f002 fad9 	bl	800d640 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b094:	2b00      	cmp	r3, #0
 800b096:	d00c      	beq.n	800b0b2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d007      	beq.n	800b0b2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b0aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f002 fad1 	bl	800d654 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d00c      	beq.n	800b0d6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d007      	beq.n	800b0d6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b0ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f001 f909 	bl	800c2e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	f003 0320 	and.w	r3, r3, #32
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d00c      	beq.n	800b0fa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f003 0320 	and.w	r3, r3, #32
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d007      	beq.n	800b0fa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f06f 0220 	mvn.w	r2, #32
 800b0f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f002 fa99 	bl	800d62c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b0fa:	bf00      	nop
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
	...

0800b104 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b086      	sub	sp, #24
 800b108:	af00      	add	r7, sp, #0
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	60b9      	str	r1, [r7, #8]
 800b10e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b110:	2300      	movs	r3, #0
 800b112:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d016      	beq.n	800b148 <HAL_TIM_OC_ConfigChannel+0x44>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2b04      	cmp	r3, #4
 800b11e:	d013      	beq.n	800b148 <HAL_TIM_OC_ConfigChannel+0x44>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2b08      	cmp	r3, #8
 800b124:	d010      	beq.n	800b148 <HAL_TIM_OC_ConfigChannel+0x44>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2b0c      	cmp	r3, #12
 800b12a:	d00d      	beq.n	800b148 <HAL_TIM_OC_ConfigChannel+0x44>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2b10      	cmp	r3, #16
 800b130:	d00a      	beq.n	800b148 <HAL_TIM_OC_ConfigChannel+0x44>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2b14      	cmp	r3, #20
 800b136:	d007      	beq.n	800b148 <HAL_TIM_OC_ConfigChannel+0x44>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2b3c      	cmp	r3, #60	@ 0x3c
 800b13c:	d004      	beq.n	800b148 <HAL_TIM_OC_ConfigChannel+0x44>
 800b13e:	f640 71eb 	movw	r1, #4075	@ 0xfeb
 800b142:	488c      	ldr	r0, [pc, #560]	@ (800b374 <HAL_TIM_OC_ConfigChannel+0x270>)
 800b144:	f7fa fe9e 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d022      	beq.n	800b196 <HAL_TIM_OC_ConfigChannel+0x92>
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	2b10      	cmp	r3, #16
 800b156:	d01e      	beq.n	800b196 <HAL_TIM_OC_ConfigChannel+0x92>
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2b20      	cmp	r3, #32
 800b15e:	d01a      	beq.n	800b196 <HAL_TIM_OC_ConfigChannel+0x92>
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	2b30      	cmp	r3, #48	@ 0x30
 800b166:	d016      	beq.n	800b196 <HAL_TIM_OC_ConfigChannel+0x92>
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	2b50      	cmp	r3, #80	@ 0x50
 800b16e:	d012      	beq.n	800b196 <HAL_TIM_OC_ConfigChannel+0x92>
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	2b40      	cmp	r3, #64	@ 0x40
 800b176:	d00e      	beq.n	800b196 <HAL_TIM_OC_ConfigChannel+0x92>
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b180:	d009      	beq.n	800b196 <HAL_TIM_OC_ConfigChannel+0x92>
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4a7c      	ldr	r2, [pc, #496]	@ (800b378 <HAL_TIM_OC_ConfigChannel+0x274>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	d004      	beq.n	800b196 <HAL_TIM_OC_ConfigChannel+0x92>
 800b18c:	f640 71ec 	movw	r1, #4076	@ 0xfec
 800b190:	4878      	ldr	r0, [pc, #480]	@ (800b374 <HAL_TIM_OC_ConfigChannel+0x270>)
 800b192:	f7fa fe77 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d008      	beq.n	800b1b0 <HAL_TIM_OC_ConfigChannel+0xac>
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	689b      	ldr	r3, [r3, #8]
 800b1a2:	2b02      	cmp	r3, #2
 800b1a4:	d004      	beq.n	800b1b0 <HAL_TIM_OC_ConfigChannel+0xac>
 800b1a6:	f640 71ed 	movw	r1, #4077	@ 0xfed
 800b1aa:	4872      	ldr	r0, [pc, #456]	@ (800b374 <HAL_TIM_OC_ConfigChannel+0x270>)
 800b1ac:	f7fa fe6a 	bl	8005e84 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d101      	bne.n	800b1be <HAL_TIM_OC_ConfigChannel+0xba>
 800b1ba:	2302      	movs	r3, #2
 800b1bc:	e152      	b.n	800b464 <HAL_TIM_OC_ConfigChannel+0x360>
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2b14      	cmp	r3, #20
 800b1ca:	f200 8143 	bhi.w	800b454 <HAL_TIM_OC_ConfigChannel+0x350>
 800b1ce:	a201      	add	r2, pc, #4	@ (adr r2, 800b1d4 <HAL_TIM_OC_ConfigChannel+0xd0>)
 800b1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d4:	0800b229 	.word	0x0800b229
 800b1d8:	0800b455 	.word	0x0800b455
 800b1dc:	0800b455 	.word	0x0800b455
 800b1e0:	0800b455 	.word	0x0800b455
 800b1e4:	0800b2b9 	.word	0x0800b2b9
 800b1e8:	0800b455 	.word	0x0800b455
 800b1ec:	0800b455 	.word	0x0800b455
 800b1f0:	0800b455 	.word	0x0800b455
 800b1f4:	0800b321 	.word	0x0800b321
 800b1f8:	0800b455 	.word	0x0800b455
 800b1fc:	0800b455 	.word	0x0800b455
 800b200:	0800b455 	.word	0x0800b455
 800b204:	0800b3a9 	.word	0x0800b3a9
 800b208:	0800b455 	.word	0x0800b455
 800b20c:	0800b455 	.word	0x0800b455
 800b210:	0800b455 	.word	0x0800b455
 800b214:	0800b3fd 	.word	0x0800b3fd
 800b218:	0800b455 	.word	0x0800b455
 800b21c:	0800b455 	.word	0x0800b455
 800b220:	0800b455 	.word	0x0800b455
 800b224:	0800b429 	.word	0x0800b429
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	4a53      	ldr	r2, [pc, #332]	@ (800b37c <HAL_TIM_OC_ConfigChannel+0x278>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d03b      	beq.n	800b2aa <HAL_TIM_OC_ConfigChannel+0x1a6>
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b23a:	d036      	beq.n	800b2aa <HAL_TIM_OC_ConfigChannel+0x1a6>
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a4f      	ldr	r2, [pc, #316]	@ (800b380 <HAL_TIM_OC_ConfigChannel+0x27c>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d031      	beq.n	800b2aa <HAL_TIM_OC_ConfigChannel+0x1a6>
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a4e      	ldr	r2, [pc, #312]	@ (800b384 <HAL_TIM_OC_ConfigChannel+0x280>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d02c      	beq.n	800b2aa <HAL_TIM_OC_ConfigChannel+0x1a6>
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4a4c      	ldr	r2, [pc, #304]	@ (800b388 <HAL_TIM_OC_ConfigChannel+0x284>)
 800b256:	4293      	cmp	r3, r2
 800b258:	d027      	beq.n	800b2aa <HAL_TIM_OC_ConfigChannel+0x1a6>
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4a4b      	ldr	r2, [pc, #300]	@ (800b38c <HAL_TIM_OC_ConfigChannel+0x288>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d022      	beq.n	800b2aa <HAL_TIM_OC_ConfigChannel+0x1a6>
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4a49      	ldr	r2, [pc, #292]	@ (800b390 <HAL_TIM_OC_ConfigChannel+0x28c>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d01d      	beq.n	800b2aa <HAL_TIM_OC_ConfigChannel+0x1a6>
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4a48      	ldr	r2, [pc, #288]	@ (800b394 <HAL_TIM_OC_ConfigChannel+0x290>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d018      	beq.n	800b2aa <HAL_TIM_OC_ConfigChannel+0x1a6>
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4a46      	ldr	r2, [pc, #280]	@ (800b398 <HAL_TIM_OC_ConfigChannel+0x294>)
 800b27e:	4293      	cmp	r3, r2
 800b280:	d013      	beq.n	800b2aa <HAL_TIM_OC_ConfigChannel+0x1a6>
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	4a45      	ldr	r2, [pc, #276]	@ (800b39c <HAL_TIM_OC_ConfigChannel+0x298>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d00e      	beq.n	800b2aa <HAL_TIM_OC_ConfigChannel+0x1a6>
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4a43      	ldr	r2, [pc, #268]	@ (800b3a0 <HAL_TIM_OC_ConfigChannel+0x29c>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d009      	beq.n	800b2aa <HAL_TIM_OC_ConfigChannel+0x1a6>
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4a42      	ldr	r2, [pc, #264]	@ (800b3a4 <HAL_TIM_OC_ConfigChannel+0x2a0>)
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d004      	beq.n	800b2aa <HAL_TIM_OC_ConfigChannel+0x1a6>
 800b2a0:	f640 71f7 	movw	r1, #4087	@ 0xff7
 800b2a4:	4833      	ldr	r0, [pc, #204]	@ (800b374 <HAL_TIM_OC_ConfigChannel+0x270>)
 800b2a6:	f7fa fded 	bl	8005e84 <assert_failed>

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	68b9      	ldr	r1, [r7, #8]
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f001 f8cf 	bl	800c454 <TIM_OC1_SetConfig>
      break;
 800b2b6:	e0d0      	b.n	800b45a <HAL_TIM_OC_ConfigChannel+0x356>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	4a2f      	ldr	r2, [pc, #188]	@ (800b37c <HAL_TIM_OC_ConfigChannel+0x278>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d027      	beq.n	800b312 <HAL_TIM_OC_ConfigChannel+0x20e>
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2ca:	d022      	beq.n	800b312 <HAL_TIM_OC_ConfigChannel+0x20e>
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a2b      	ldr	r2, [pc, #172]	@ (800b380 <HAL_TIM_OC_ConfigChannel+0x27c>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d01d      	beq.n	800b312 <HAL_TIM_OC_ConfigChannel+0x20e>
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4a2a      	ldr	r2, [pc, #168]	@ (800b384 <HAL_TIM_OC_ConfigChannel+0x280>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d018      	beq.n	800b312 <HAL_TIM_OC_ConfigChannel+0x20e>
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4a28      	ldr	r2, [pc, #160]	@ (800b388 <HAL_TIM_OC_ConfigChannel+0x284>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d013      	beq.n	800b312 <HAL_TIM_OC_ConfigChannel+0x20e>
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	4a27      	ldr	r2, [pc, #156]	@ (800b38c <HAL_TIM_OC_ConfigChannel+0x288>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d00e      	beq.n	800b312 <HAL_TIM_OC_ConfigChannel+0x20e>
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	4a25      	ldr	r2, [pc, #148]	@ (800b390 <HAL_TIM_OC_ConfigChannel+0x28c>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d009      	beq.n	800b312 <HAL_TIM_OC_ConfigChannel+0x20e>
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4a26      	ldr	r2, [pc, #152]	@ (800b39c <HAL_TIM_OC_ConfigChannel+0x298>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d004      	beq.n	800b312 <HAL_TIM_OC_ConfigChannel+0x20e>
 800b308:	f241 0101 	movw	r1, #4097	@ 0x1001
 800b30c:	4819      	ldr	r0, [pc, #100]	@ (800b374 <HAL_TIM_OC_ConfigChannel+0x270>)
 800b30e:	f7fa fdb9 	bl	8005e84 <assert_failed>

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	68b9      	ldr	r1, [r7, #8]
 800b318:	4618      	mov	r0, r3
 800b31a:	f001 f937 	bl	800c58c <TIM_OC2_SetConfig>
      break;
 800b31e:	e09c      	b.n	800b45a <HAL_TIM_OC_ConfigChannel+0x356>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	4a15      	ldr	r2, [pc, #84]	@ (800b37c <HAL_TIM_OC_ConfigChannel+0x278>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d01d      	beq.n	800b366 <HAL_TIM_OC_ConfigChannel+0x262>
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b332:	d018      	beq.n	800b366 <HAL_TIM_OC_ConfigChannel+0x262>
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4a11      	ldr	r2, [pc, #68]	@ (800b380 <HAL_TIM_OC_ConfigChannel+0x27c>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d013      	beq.n	800b366 <HAL_TIM_OC_ConfigChannel+0x262>
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4a10      	ldr	r2, [pc, #64]	@ (800b384 <HAL_TIM_OC_ConfigChannel+0x280>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d00e      	beq.n	800b366 <HAL_TIM_OC_ConfigChannel+0x262>
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4a0e      	ldr	r2, [pc, #56]	@ (800b388 <HAL_TIM_OC_ConfigChannel+0x284>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d009      	beq.n	800b366 <HAL_TIM_OC_ConfigChannel+0x262>
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	4a0d      	ldr	r2, [pc, #52]	@ (800b38c <HAL_TIM_OC_ConfigChannel+0x288>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d004      	beq.n	800b366 <HAL_TIM_OC_ConfigChannel+0x262>
 800b35c:	f241 010b 	movw	r1, #4107	@ 0x100b
 800b360:	4804      	ldr	r0, [pc, #16]	@ (800b374 <HAL_TIM_OC_ConfigChannel+0x270>)
 800b362:	f7fa fd8f 	bl	8005e84 <assert_failed>

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	68b9      	ldr	r1, [r7, #8]
 800b36c:	4618      	mov	r0, r3
 800b36e:	f001 f9ad 	bl	800c6cc <TIM_OC3_SetConfig>
      break;
 800b372:	e072      	b.n	800b45a <HAL_TIM_OC_ConfigChannel+0x356>
 800b374:	08017b6c 	.word	0x08017b6c
 800b378:	00010010 	.word	0x00010010
 800b37c:	40010000 	.word	0x40010000
 800b380:	40000400 	.word	0x40000400
 800b384:	40000800 	.word	0x40000800
 800b388:	40000c00 	.word	0x40000c00
 800b38c:	40010400 	.word	0x40010400
 800b390:	40014000 	.word	0x40014000
 800b394:	40014400 	.word	0x40014400
 800b398:	40014800 	.word	0x40014800
 800b39c:	40001800 	.word	0x40001800
 800b3a0:	40001c00 	.word	0x40001c00
 800b3a4:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4a2f      	ldr	r2, [pc, #188]	@ (800b46c <HAL_TIM_OC_ConfigChannel+0x368>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d01d      	beq.n	800b3ee <HAL_TIM_OC_ConfigChannel+0x2ea>
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3ba:	d018      	beq.n	800b3ee <HAL_TIM_OC_ConfigChannel+0x2ea>
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4a2b      	ldr	r2, [pc, #172]	@ (800b470 <HAL_TIM_OC_ConfigChannel+0x36c>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d013      	beq.n	800b3ee <HAL_TIM_OC_ConfigChannel+0x2ea>
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4a2a      	ldr	r2, [pc, #168]	@ (800b474 <HAL_TIM_OC_ConfigChannel+0x370>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d00e      	beq.n	800b3ee <HAL_TIM_OC_ConfigChannel+0x2ea>
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4a28      	ldr	r2, [pc, #160]	@ (800b478 <HAL_TIM_OC_ConfigChannel+0x374>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d009      	beq.n	800b3ee <HAL_TIM_OC_ConfigChannel+0x2ea>
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4a27      	ldr	r2, [pc, #156]	@ (800b47c <HAL_TIM_OC_ConfigChannel+0x378>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d004      	beq.n	800b3ee <HAL_TIM_OC_ConfigChannel+0x2ea>
 800b3e4:	f241 0115 	movw	r1, #4117	@ 0x1015
 800b3e8:	4825      	ldr	r0, [pc, #148]	@ (800b480 <HAL_TIM_OC_ConfigChannel+0x37c>)
 800b3ea:	f7fa fd4b 	bl	8005e84 <assert_failed>

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	68b9      	ldr	r1, [r7, #8]
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f001 fa09 	bl	800c80c <TIM_OC4_SetConfig>
      break;
 800b3fa:	e02e      	b.n	800b45a <HAL_TIM_OC_ConfigChannel+0x356>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a1a      	ldr	r2, [pc, #104]	@ (800b46c <HAL_TIM_OC_ConfigChannel+0x368>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d009      	beq.n	800b41a <HAL_TIM_OC_ConfigChannel+0x316>
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4a1c      	ldr	r2, [pc, #112]	@ (800b47c <HAL_TIM_OC_ConfigChannel+0x378>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d004      	beq.n	800b41a <HAL_TIM_OC_ConfigChannel+0x316>
 800b410:	f241 011f 	movw	r1, #4127	@ 0x101f
 800b414:	481a      	ldr	r0, [pc, #104]	@ (800b480 <HAL_TIM_OC_ConfigChannel+0x37c>)
 800b416:	f7fa fd35 	bl	8005e84 <assert_failed>

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	68b9      	ldr	r1, [r7, #8]
 800b420:	4618      	mov	r0, r3
 800b422:	f001 fa59 	bl	800c8d8 <TIM_OC5_SetConfig>
      break;
 800b426:	e018      	b.n	800b45a <HAL_TIM_OC_ConfigChannel+0x356>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a0f      	ldr	r2, [pc, #60]	@ (800b46c <HAL_TIM_OC_ConfigChannel+0x368>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d009      	beq.n	800b446 <HAL_TIM_OC_ConfigChannel+0x342>
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a11      	ldr	r2, [pc, #68]	@ (800b47c <HAL_TIM_OC_ConfigChannel+0x378>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d004      	beq.n	800b446 <HAL_TIM_OC_ConfigChannel+0x342>
 800b43c:	f241 0129 	movw	r1, #4137	@ 0x1029
 800b440:	480f      	ldr	r0, [pc, #60]	@ (800b480 <HAL_TIM_OC_ConfigChannel+0x37c>)
 800b442:	f7fa fd1f 	bl	8005e84 <assert_failed>

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	68b9      	ldr	r1, [r7, #8]
 800b44c:	4618      	mov	r0, r3
 800b44e:	f001 fa95 	bl	800c97c <TIM_OC6_SetConfig>
      break;
 800b452:	e002      	b.n	800b45a <HAL_TIM_OC_ConfigChannel+0x356>
    }

    default:
      status = HAL_ERROR;
 800b454:	2301      	movs	r3, #1
 800b456:	75fb      	strb	r3, [r7, #23]
      break;
 800b458:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2200      	movs	r2, #0
 800b45e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b462:	7dfb      	ldrb	r3, [r7, #23]
}
 800b464:	4618      	mov	r0, r3
 800b466:	3718      	adds	r7, #24
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}
 800b46c:	40010000 	.word	0x40010000
 800b470:	40000400 	.word	0x40000400
 800b474:	40000800 	.word	0x40000800
 800b478:	40000c00 	.word	0x40000c00
 800b47c:	40010400 	.word	0x40010400
 800b480:	08017b6c 	.word	0x08017b6c

0800b484 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b086      	sub	sp, #24
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b490:	2300      	movs	r3, #0
 800b492:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d016      	beq.n	800b4c8 <HAL_TIM_PWM_ConfigChannel+0x44>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2b04      	cmp	r3, #4
 800b49e:	d013      	beq.n	800b4c8 <HAL_TIM_PWM_ConfigChannel+0x44>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2b08      	cmp	r3, #8
 800b4a4:	d010      	beq.n	800b4c8 <HAL_TIM_PWM_ConfigChannel+0x44>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2b0c      	cmp	r3, #12
 800b4aa:	d00d      	beq.n	800b4c8 <HAL_TIM_PWM_ConfigChannel+0x44>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2b10      	cmp	r3, #16
 800b4b0:	d00a      	beq.n	800b4c8 <HAL_TIM_PWM_ConfigChannel+0x44>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2b14      	cmp	r3, #20
 800b4b6:	d007      	beq.n	800b4c8 <HAL_TIM_PWM_ConfigChannel+0x44>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2b3c      	cmp	r3, #60	@ 0x3c
 800b4bc:	d004      	beq.n	800b4c8 <HAL_TIM_PWM_ConfigChannel+0x44>
 800b4be:	f241 01b3 	movw	r1, #4275	@ 0x10b3
 800b4c2:	4895      	ldr	r0, [pc, #596]	@ (800b718 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800b4c4:	f7fa fcde 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	2b60      	cmp	r3, #96	@ 0x60
 800b4ce:	d01c      	beq.n	800b50a <HAL_TIM_PWM_ConfigChannel+0x86>
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	2b70      	cmp	r3, #112	@ 0x70
 800b4d6:	d018      	beq.n	800b50a <HAL_TIM_PWM_ConfigChannel+0x86>
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	4a8f      	ldr	r2, [pc, #572]	@ (800b71c <HAL_TIM_PWM_ConfigChannel+0x298>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d013      	beq.n	800b50a <HAL_TIM_PWM_ConfigChannel+0x86>
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4a8e      	ldr	r2, [pc, #568]	@ (800b720 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d00e      	beq.n	800b50a <HAL_TIM_PWM_ConfigChannel+0x86>
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a8c      	ldr	r2, [pc, #560]	@ (800b724 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d009      	beq.n	800b50a <HAL_TIM_PWM_ConfigChannel+0x86>
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a8b      	ldr	r2, [pc, #556]	@ (800b728 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d004      	beq.n	800b50a <HAL_TIM_PWM_ConfigChannel+0x86>
 800b500:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 800b504:	4884      	ldr	r0, [pc, #528]	@ (800b718 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800b506:	f7fa fcbd 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	689b      	ldr	r3, [r3, #8]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d008      	beq.n	800b524 <HAL_TIM_PWM_ConfigChannel+0xa0>
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	689b      	ldr	r3, [r3, #8]
 800b516:	2b02      	cmp	r3, #2
 800b518:	d004      	beq.n	800b524 <HAL_TIM_PWM_ConfigChannel+0xa0>
 800b51a:	f241 01b5 	movw	r1, #4277	@ 0x10b5
 800b51e:	487e      	ldr	r0, [pc, #504]	@ (800b718 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800b520:	f7fa fcb0 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	691b      	ldr	r3, [r3, #16]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d008      	beq.n	800b53e <HAL_TIM_PWM_ConfigChannel+0xba>
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	691b      	ldr	r3, [r3, #16]
 800b530:	2b04      	cmp	r3, #4
 800b532:	d004      	beq.n	800b53e <HAL_TIM_PWM_ConfigChannel+0xba>
 800b534:	f241 01b6 	movw	r1, #4278	@ 0x10b6
 800b538:	4877      	ldr	r0, [pc, #476]	@ (800b718 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800b53a:	f7fa fca3 	bl	8005e84 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b544:	2b01      	cmp	r3, #1
 800b546:	d101      	bne.n	800b54c <HAL_TIM_PWM_ConfigChannel+0xc8>
 800b548:	2302      	movs	r3, #2
 800b54a:	e1f3      	b.n	800b934 <HAL_TIM_PWM_ConfigChannel+0x4b0>
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2201      	movs	r2, #1
 800b550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2b14      	cmp	r3, #20
 800b558:	f200 81e4 	bhi.w	800b924 <HAL_TIM_PWM_ConfigChannel+0x4a0>
 800b55c:	a201      	add	r2, pc, #4	@ (adr r2, 800b564 <HAL_TIM_PWM_ConfigChannel+0xe0>)
 800b55e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b562:	bf00      	nop
 800b564:	0800b5b9 	.word	0x0800b5b9
 800b568:	0800b925 	.word	0x0800b925
 800b56c:	0800b925 	.word	0x0800b925
 800b570:	0800b925 	.word	0x0800b925
 800b574:	0800b67b 	.word	0x0800b67b
 800b578:	0800b925 	.word	0x0800b925
 800b57c:	0800b925 	.word	0x0800b925
 800b580:	0800b925 	.word	0x0800b925
 800b584:	0800b759 	.word	0x0800b759
 800b588:	0800b925 	.word	0x0800b925
 800b58c:	0800b925 	.word	0x0800b925
 800b590:	0800b925 	.word	0x0800b925
 800b594:	0800b7df 	.word	0x0800b7df
 800b598:	0800b925 	.word	0x0800b925
 800b59c:	0800b925 	.word	0x0800b925
 800b5a0:	0800b925 	.word	0x0800b925
 800b5a4:	0800b867 	.word	0x0800b867
 800b5a8:	0800b925 	.word	0x0800b925
 800b5ac:	0800b925 	.word	0x0800b925
 800b5b0:	0800b925 	.word	0x0800b925
 800b5b4:	0800b8c5 	.word	0x0800b8c5
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a5b      	ldr	r2, [pc, #364]	@ (800b72c <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d03b      	beq.n	800b63a <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5ca:	d036      	beq.n	800b63a <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a57      	ldr	r2, [pc, #348]	@ (800b730 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d031      	beq.n	800b63a <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4a56      	ldr	r2, [pc, #344]	@ (800b734 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d02c      	beq.n	800b63a <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4a54      	ldr	r2, [pc, #336]	@ (800b738 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d027      	beq.n	800b63a <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4a53      	ldr	r2, [pc, #332]	@ (800b73c <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d022      	beq.n	800b63a <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	4a51      	ldr	r2, [pc, #324]	@ (800b740 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d01d      	beq.n	800b63a <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	4a50      	ldr	r2, [pc, #320]	@ (800b744 <HAL_TIM_PWM_ConfigChannel+0x2c0>)
 800b604:	4293      	cmp	r3, r2
 800b606:	d018      	beq.n	800b63a <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	4a4e      	ldr	r2, [pc, #312]	@ (800b748 <HAL_TIM_PWM_ConfigChannel+0x2c4>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d013      	beq.n	800b63a <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	4a4d      	ldr	r2, [pc, #308]	@ (800b74c <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d00e      	beq.n	800b63a <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4a4b      	ldr	r2, [pc, #300]	@ (800b750 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d009      	beq.n	800b63a <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	4a4a      	ldr	r2, [pc, #296]	@ (800b754 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 800b62c:	4293      	cmp	r3, r2
 800b62e:	d004      	beq.n	800b63a <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800b630:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 800b634:	4838      	ldr	r0, [pc, #224]	@ (800b718 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800b636:	f7fa fc25 	bl	8005e84 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	68b9      	ldr	r1, [r7, #8]
 800b640:	4618      	mov	r0, r3
 800b642:	f000 ff07 	bl	800c454 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	699a      	ldr	r2, [r3, #24]
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f042 0208 	orr.w	r2, r2, #8
 800b654:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	699a      	ldr	r2, [r3, #24]
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f022 0204 	bic.w	r2, r2, #4
 800b664:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	6999      	ldr	r1, [r3, #24]
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	691a      	ldr	r2, [r3, #16]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	430a      	orrs	r2, r1
 800b676:	619a      	str	r2, [r3, #24]
      break;
 800b678:	e157      	b.n	800b92a <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	4a2b      	ldr	r2, [pc, #172]	@ (800b72c <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d027      	beq.n	800b6d4 <HAL_TIM_PWM_ConfigChannel+0x250>
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b68c:	d022      	beq.n	800b6d4 <HAL_TIM_PWM_ConfigChannel+0x250>
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	4a27      	ldr	r2, [pc, #156]	@ (800b730 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d01d      	beq.n	800b6d4 <HAL_TIM_PWM_ConfigChannel+0x250>
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4a25      	ldr	r2, [pc, #148]	@ (800b734 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d018      	beq.n	800b6d4 <HAL_TIM_PWM_ConfigChannel+0x250>
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	4a24      	ldr	r2, [pc, #144]	@ (800b738 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d013      	beq.n	800b6d4 <HAL_TIM_PWM_ConfigChannel+0x250>
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4a22      	ldr	r2, [pc, #136]	@ (800b73c <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d00e      	beq.n	800b6d4 <HAL_TIM_PWM_ConfigChannel+0x250>
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	4a21      	ldr	r2, [pc, #132]	@ (800b740 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d009      	beq.n	800b6d4 <HAL_TIM_PWM_ConfigChannel+0x250>
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4a21      	ldr	r2, [pc, #132]	@ (800b74c <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d004      	beq.n	800b6d4 <HAL_TIM_PWM_ConfigChannel+0x250>
 800b6ca:	f241 01d1 	movw	r1, #4305	@ 0x10d1
 800b6ce:	4812      	ldr	r0, [pc, #72]	@ (800b718 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800b6d0:	f7fa fbd8 	bl	8005e84 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	68b9      	ldr	r1, [r7, #8]
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f000 ff56 	bl	800c58c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	699a      	ldr	r2, [r3, #24]
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b6ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	699a      	ldr	r2, [r3, #24]
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b6fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	6999      	ldr	r1, [r3, #24]
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	691b      	ldr	r3, [r3, #16]
 800b70a:	021a      	lsls	r2, r3, #8
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	430a      	orrs	r2, r1
 800b712:	619a      	str	r2, [r3, #24]
      break;
 800b714:	e109      	b.n	800b92a <HAL_TIM_PWM_ConfigChannel+0x4a6>
 800b716:	bf00      	nop
 800b718:	08017b6c 	.word	0x08017b6c
 800b71c:	00010040 	.word	0x00010040
 800b720:	00010050 	.word	0x00010050
 800b724:	00010060 	.word	0x00010060
 800b728:	00010070 	.word	0x00010070
 800b72c:	40010000 	.word	0x40010000
 800b730:	40000400 	.word	0x40000400
 800b734:	40000800 	.word	0x40000800
 800b738:	40000c00 	.word	0x40000c00
 800b73c:	40010400 	.word	0x40010400
 800b740:	40014000 	.word	0x40014000
 800b744:	40014400 	.word	0x40014400
 800b748:	40014800 	.word	0x40014800
 800b74c:	40001800 	.word	0x40001800
 800b750:	40001c00 	.word	0x40001c00
 800b754:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	4a77      	ldr	r2, [pc, #476]	@ (800b93c <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	d01d      	beq.n	800b79e <HAL_TIM_PWM_ConfigChannel+0x31a>
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b76a:	d018      	beq.n	800b79e <HAL_TIM_PWM_ConfigChannel+0x31a>
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	4a73      	ldr	r2, [pc, #460]	@ (800b940 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d013      	beq.n	800b79e <HAL_TIM_PWM_ConfigChannel+0x31a>
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4a72      	ldr	r2, [pc, #456]	@ (800b944 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d00e      	beq.n	800b79e <HAL_TIM_PWM_ConfigChannel+0x31a>
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	4a70      	ldr	r2, [pc, #448]	@ (800b948 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 800b786:	4293      	cmp	r3, r2
 800b788:	d009      	beq.n	800b79e <HAL_TIM_PWM_ConfigChannel+0x31a>
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	4a6f      	ldr	r2, [pc, #444]	@ (800b94c <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d004      	beq.n	800b79e <HAL_TIM_PWM_ConfigChannel+0x31a>
 800b794:	f241 01e2 	movw	r1, #4322	@ 0x10e2
 800b798:	486d      	ldr	r0, [pc, #436]	@ (800b950 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800b79a:	f7fa fb73 	bl	8005e84 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	68b9      	ldr	r1, [r7, #8]
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f000 ff91 	bl	800c6cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	69da      	ldr	r2, [r3, #28]
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f042 0208 	orr.w	r2, r2, #8
 800b7b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	69da      	ldr	r2, [r3, #28]
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f022 0204 	bic.w	r2, r2, #4
 800b7c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	69d9      	ldr	r1, [r3, #28]
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	691a      	ldr	r2, [r3, #16]
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	430a      	orrs	r2, r1
 800b7da:	61da      	str	r2, [r3, #28]
      break;
 800b7dc:	e0a5      	b.n	800b92a <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	4a56      	ldr	r2, [pc, #344]	@ (800b93c <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d01d      	beq.n	800b824 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7f0:	d018      	beq.n	800b824 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4a52      	ldr	r2, [pc, #328]	@ (800b940 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d013      	beq.n	800b824 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4a50      	ldr	r2, [pc, #320]	@ (800b944 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d00e      	beq.n	800b824 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	4a4f      	ldr	r2, [pc, #316]	@ (800b948 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d009      	beq.n	800b824 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4a4d      	ldr	r2, [pc, #308]	@ (800b94c <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d004      	beq.n	800b824 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800b81a:	f241 01f3 	movw	r1, #4339	@ 0x10f3
 800b81e:	484c      	ldr	r0, [pc, #304]	@ (800b950 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800b820:	f7fa fb30 	bl	8005e84 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	68b9      	ldr	r1, [r7, #8]
 800b82a:	4618      	mov	r0, r3
 800b82c:	f000 ffee 	bl	800c80c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	69da      	ldr	r2, [r3, #28]
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b83e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	69da      	ldr	r2, [r3, #28]
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b84e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	69d9      	ldr	r1, [r3, #28]
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	691b      	ldr	r3, [r3, #16]
 800b85a:	021a      	lsls	r2, r3, #8
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	430a      	orrs	r2, r1
 800b862:	61da      	str	r2, [r3, #28]
      break;
 800b864:	e061      	b.n	800b92a <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	4a34      	ldr	r2, [pc, #208]	@ (800b93c <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d009      	beq.n	800b884 <HAL_TIM_PWM_ConfigChannel+0x400>
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	4a35      	ldr	r2, [pc, #212]	@ (800b94c <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d004      	beq.n	800b884 <HAL_TIM_PWM_ConfigChannel+0x400>
 800b87a:	f241 1104 	movw	r1, #4356	@ 0x1104
 800b87e:	4834      	ldr	r0, [pc, #208]	@ (800b950 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800b880:	f7fa fb00 	bl	8005e84 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	68b9      	ldr	r1, [r7, #8]
 800b88a:	4618      	mov	r0, r3
 800b88c:	f001 f824 	bl	800c8d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f042 0208 	orr.w	r2, r2, #8
 800b89e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f022 0204 	bic.w	r2, r2, #4
 800b8ae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	691a      	ldr	r2, [r3, #16]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	430a      	orrs	r2, r1
 800b8c0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b8c2:	e032      	b.n	800b92a <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a1c      	ldr	r2, [pc, #112]	@ (800b93c <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d009      	beq.n	800b8e2 <HAL_TIM_PWM_ConfigChannel+0x45e>
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4a1e      	ldr	r2, [pc, #120]	@ (800b94c <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d004      	beq.n	800b8e2 <HAL_TIM_PWM_ConfigChannel+0x45e>
 800b8d8:	f241 1115 	movw	r1, #4373	@ 0x1115
 800b8dc:	481c      	ldr	r0, [pc, #112]	@ (800b950 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800b8de:	f7fa fad1 	bl	8005e84 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	68b9      	ldr	r1, [r7, #8]
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f001 f847 	bl	800c97c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b8fc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b90c:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	691b      	ldr	r3, [r3, #16]
 800b918:	021a      	lsls	r2, r3, #8
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	430a      	orrs	r2, r1
 800b920:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b922:	e002      	b.n	800b92a <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    default:
      status = HAL_ERROR;
 800b924:	2301      	movs	r3, #1
 800b926:	75fb      	strb	r3, [r7, #23]
      break;
 800b928:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2200      	movs	r2, #0
 800b92e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b932:	7dfb      	ldrb	r3, [r7, #23]
}
 800b934:	4618      	mov	r0, r3
 800b936:	3718      	adds	r7, #24
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}
 800b93c:	40010000 	.word	0x40010000
 800b940:	40000400 	.word	0x40000400
 800b944:	40000800 	.word	0x40000800
 800b948:	40000c00 	.word	0x40000c00
 800b94c:	40010400 	.word	0x40010400
 800b950:	08017b6c 	.word	0x08017b6c

0800b954 <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	4a3a      	ldr	r2, [pc, #232]	@ (800ba4c <HAL_TIM_GenerateEvent+0xf8>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d045      	beq.n	800b9f4 <HAL_TIM_GenerateEvent+0xa0>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b970:	d040      	beq.n	800b9f4 <HAL_TIM_GenerateEvent+0xa0>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4a36      	ldr	r2, [pc, #216]	@ (800ba50 <HAL_TIM_GenerateEvent+0xfc>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d03b      	beq.n	800b9f4 <HAL_TIM_GenerateEvent+0xa0>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4a34      	ldr	r2, [pc, #208]	@ (800ba54 <HAL_TIM_GenerateEvent+0x100>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d036      	beq.n	800b9f4 <HAL_TIM_GenerateEvent+0xa0>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4a33      	ldr	r2, [pc, #204]	@ (800ba58 <HAL_TIM_GenerateEvent+0x104>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d031      	beq.n	800b9f4 <HAL_TIM_GenerateEvent+0xa0>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	4a31      	ldr	r2, [pc, #196]	@ (800ba5c <HAL_TIM_GenerateEvent+0x108>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d02c      	beq.n	800b9f4 <HAL_TIM_GenerateEvent+0xa0>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4a30      	ldr	r2, [pc, #192]	@ (800ba60 <HAL_TIM_GenerateEvent+0x10c>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d027      	beq.n	800b9f4 <HAL_TIM_GenerateEvent+0xa0>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	4a2e      	ldr	r2, [pc, #184]	@ (800ba64 <HAL_TIM_GenerateEvent+0x110>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d022      	beq.n	800b9f4 <HAL_TIM_GenerateEvent+0xa0>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4a2d      	ldr	r2, [pc, #180]	@ (800ba68 <HAL_TIM_GenerateEvent+0x114>)
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d01d      	beq.n	800b9f4 <HAL_TIM_GenerateEvent+0xa0>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	4a2b      	ldr	r2, [pc, #172]	@ (800ba6c <HAL_TIM_GenerateEvent+0x118>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d018      	beq.n	800b9f4 <HAL_TIM_GenerateEvent+0xa0>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4a2a      	ldr	r2, [pc, #168]	@ (800ba70 <HAL_TIM_GenerateEvent+0x11c>)
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	d013      	beq.n	800b9f4 <HAL_TIM_GenerateEvent+0xa0>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4a28      	ldr	r2, [pc, #160]	@ (800ba74 <HAL_TIM_GenerateEvent+0x120>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d00e      	beq.n	800b9f4 <HAL_TIM_GenerateEvent+0xa0>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	4a27      	ldr	r2, [pc, #156]	@ (800ba78 <HAL_TIM_GenerateEvent+0x124>)
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d009      	beq.n	800b9f4 <HAL_TIM_GenerateEvent+0xa0>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4a25      	ldr	r2, [pc, #148]	@ (800ba7c <HAL_TIM_GenerateEvent+0x128>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d004      	beq.n	800b9f4 <HAL_TIM_GenerateEvent+0xa0>
 800b9ea:	f241 4184 	movw	r1, #5252	@ 0x1484
 800b9ee:	4824      	ldr	r0, [pc, #144]	@ (800ba80 <HAL_TIM_GenerateEvent+0x12c>)
 800b9f0:	f7fa fa48 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9fa:	d202      	bcs.n	800ba02 <HAL_TIM_GenerateEvent+0xae>
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d104      	bne.n	800ba0c <HAL_TIM_GenerateEvent+0xb8>
 800ba02:	f241 4185 	movw	r1, #5253	@ 0x1485
 800ba06:	481e      	ldr	r0, [pc, #120]	@ (800ba80 <HAL_TIM_GenerateEvent+0x12c>)
 800ba08:	f7fa fa3c 	bl	8005e84 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba12:	2b01      	cmp	r3, #1
 800ba14:	d101      	bne.n	800ba1a <HAL_TIM_GenerateEvent+0xc6>
 800ba16:	2302      	movs	r3, #2
 800ba18:	e014      	b.n	800ba44 <HAL_TIM_GenerateEvent+0xf0>
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2202      	movs	r2, #2
 800ba26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	683a      	ldr	r2, [r7, #0]
 800ba30:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2201      	movs	r2, #1
 800ba36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800ba42:	2300      	movs	r3, #0
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3708      	adds	r7, #8
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}
 800ba4c:	40010000 	.word	0x40010000
 800ba50:	40000400 	.word	0x40000400
 800ba54:	40000800 	.word	0x40000800
 800ba58:	40000c00 	.word	0x40000c00
 800ba5c:	40001000 	.word	0x40001000
 800ba60:	40001400 	.word	0x40001400
 800ba64:	40010400 	.word	0x40010400
 800ba68:	40014000 	.word	0x40014000
 800ba6c:	40014400 	.word	0x40014400
 800ba70:	40014800 	.word	0x40014800
 800ba74:	40001800 	.word	0x40001800
 800ba78:	40001c00 	.word	0x40001c00
 800ba7c:	40002000 	.word	0x40002000
 800ba80:	08017b6c 	.word	0x08017b6c

0800ba84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	d101      	bne.n	800baa0 <HAL_TIM_ConfigClockSource+0x1c>
 800ba9c:	2302      	movs	r3, #2
 800ba9e:	e332      	b.n	800c106 <HAL_TIM_ConfigClockSource+0x682>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2201      	movs	r2, #1
 800baa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2202      	movs	r2, #2
 800baac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bab8:	d029      	beq.n	800bb0e <HAL_TIM_ConfigClockSource+0x8a>
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	2b70      	cmp	r3, #112	@ 0x70
 800bac0:	d025      	beq.n	800bb0e <HAL_TIM_ConfigClockSource+0x8a>
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800baca:	d020      	beq.n	800bb0e <HAL_TIM_ConfigClockSource+0x8a>
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	2b40      	cmp	r3, #64	@ 0x40
 800bad2:	d01c      	beq.n	800bb0e <HAL_TIM_ConfigClockSource+0x8a>
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	2b50      	cmp	r3, #80	@ 0x50
 800bada:	d018      	beq.n	800bb0e <HAL_TIM_ConfigClockSource+0x8a>
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	2b60      	cmp	r3, #96	@ 0x60
 800bae2:	d014      	beq.n	800bb0e <HAL_TIM_ConfigClockSource+0x8a>
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d010      	beq.n	800bb0e <HAL_TIM_ConfigClockSource+0x8a>
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	2b10      	cmp	r3, #16
 800baf2:	d00c      	beq.n	800bb0e <HAL_TIM_ConfigClockSource+0x8a>
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	2b20      	cmp	r3, #32
 800bafa:	d008      	beq.n	800bb0e <HAL_TIM_ConfigClockSource+0x8a>
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	2b30      	cmp	r3, #48	@ 0x30
 800bb02:	d004      	beq.n	800bb0e <HAL_TIM_ConfigClockSource+0x8a>
 800bb04:	f241 5151 	movw	r1, #5457	@ 0x1551
 800bb08:	4893      	ldr	r0, [pc, #588]	@ (800bd58 <HAL_TIM_ConfigClockSource+0x2d4>)
 800bb0a:	f7fa f9bb 	bl	8005e84 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	689b      	ldr	r3, [r3, #8]
 800bb14:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bb16:	68ba      	ldr	r2, [r7, #8]
 800bb18:	4b90      	ldr	r3, [pc, #576]	@ (800bd5c <HAL_TIM_ConfigClockSource+0x2d8>)
 800bb1a:	4013      	ands	r3, r2
 800bb1c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bb24:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	68ba      	ldr	r2, [r7, #8]
 800bb2c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb36:	f000 812d 	beq.w	800bd94 <HAL_TIM_ConfigClockSource+0x310>
 800bb3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb3e:	f200 82d5 	bhi.w	800c0ec <HAL_TIM_ConfigClockSource+0x668>
 800bb42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb46:	d02e      	beq.n	800bba6 <HAL_TIM_ConfigClockSource+0x122>
 800bb48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb4c:	f200 82ce 	bhi.w	800c0ec <HAL_TIM_ConfigClockSource+0x668>
 800bb50:	2b70      	cmp	r3, #112	@ 0x70
 800bb52:	f000 8082 	beq.w	800bc5a <HAL_TIM_ConfigClockSource+0x1d6>
 800bb56:	2b70      	cmp	r3, #112	@ 0x70
 800bb58:	f200 82c8 	bhi.w	800c0ec <HAL_TIM_ConfigClockSource+0x668>
 800bb5c:	2b60      	cmp	r3, #96	@ 0x60
 800bb5e:	f000 81e0 	beq.w	800bf22 <HAL_TIM_ConfigClockSource+0x49e>
 800bb62:	2b60      	cmp	r3, #96	@ 0x60
 800bb64:	f200 82c2 	bhi.w	800c0ec <HAL_TIM_ConfigClockSource+0x668>
 800bb68:	2b50      	cmp	r3, #80	@ 0x50
 800bb6a:	f000 8184 	beq.w	800be76 <HAL_TIM_ConfigClockSource+0x3f2>
 800bb6e:	2b50      	cmp	r3, #80	@ 0x50
 800bb70:	f200 82bc 	bhi.w	800c0ec <HAL_TIM_ConfigClockSource+0x668>
 800bb74:	2b40      	cmp	r3, #64	@ 0x40
 800bb76:	f000 8237 	beq.w	800bfe8 <HAL_TIM_ConfigClockSource+0x564>
 800bb7a:	2b40      	cmp	r3, #64	@ 0x40
 800bb7c:	f200 82b6 	bhi.w	800c0ec <HAL_TIM_ConfigClockSource+0x668>
 800bb80:	2b30      	cmp	r3, #48	@ 0x30
 800bb82:	f000 8287 	beq.w	800c094 <HAL_TIM_ConfigClockSource+0x610>
 800bb86:	2b30      	cmp	r3, #48	@ 0x30
 800bb88:	f200 82b0 	bhi.w	800c0ec <HAL_TIM_ConfigClockSource+0x668>
 800bb8c:	2b20      	cmp	r3, #32
 800bb8e:	f000 8281 	beq.w	800c094 <HAL_TIM_ConfigClockSource+0x610>
 800bb92:	2b20      	cmp	r3, #32
 800bb94:	f200 82aa 	bhi.w	800c0ec <HAL_TIM_ConfigClockSource+0x668>
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	f000 827b 	beq.w	800c094 <HAL_TIM_ConfigClockSource+0x610>
 800bb9e:	2b10      	cmp	r3, #16
 800bba0:	f000 8278 	beq.w	800c094 <HAL_TIM_ConfigClockSource+0x610>
 800bba4:	e2a2      	b.n	800c0ec <HAL_TIM_ConfigClockSource+0x668>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	4a6d      	ldr	r2, [pc, #436]	@ (800bd60 <HAL_TIM_ConfigClockSource+0x2dc>)
 800bbac:	4293      	cmp	r3, r2
 800bbae:	f000 82a0 	beq.w	800c0f2 <HAL_TIM_ConfigClockSource+0x66e>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbba:	f000 829a 	beq.w	800c0f2 <HAL_TIM_ConfigClockSource+0x66e>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	4a68      	ldr	r2, [pc, #416]	@ (800bd64 <HAL_TIM_ConfigClockSource+0x2e0>)
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	f000 8294 	beq.w	800c0f2 <HAL_TIM_ConfigClockSource+0x66e>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	4a66      	ldr	r2, [pc, #408]	@ (800bd68 <HAL_TIM_ConfigClockSource+0x2e4>)
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	f000 828e 	beq.w	800c0f2 <HAL_TIM_ConfigClockSource+0x66e>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	4a64      	ldr	r2, [pc, #400]	@ (800bd6c <HAL_TIM_ConfigClockSource+0x2e8>)
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	f000 8288 	beq.w	800c0f2 <HAL_TIM_ConfigClockSource+0x66e>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	4a62      	ldr	r2, [pc, #392]	@ (800bd70 <HAL_TIM_ConfigClockSource+0x2ec>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	f000 8282 	beq.w	800c0f2 <HAL_TIM_ConfigClockSource+0x66e>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4a60      	ldr	r2, [pc, #384]	@ (800bd74 <HAL_TIM_ConfigClockSource+0x2f0>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	f000 827c 	beq.w	800c0f2 <HAL_TIM_ConfigClockSource+0x66e>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	4a5e      	ldr	r2, [pc, #376]	@ (800bd78 <HAL_TIM_ConfigClockSource+0x2f4>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	f000 8276 	beq.w	800c0f2 <HAL_TIM_ConfigClockSource+0x66e>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	4a5c      	ldr	r2, [pc, #368]	@ (800bd7c <HAL_TIM_ConfigClockSource+0x2f8>)
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	f000 8270 	beq.w	800c0f2 <HAL_TIM_ConfigClockSource+0x66e>
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	4a5a      	ldr	r2, [pc, #360]	@ (800bd80 <HAL_TIM_ConfigClockSource+0x2fc>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	f000 826a 	beq.w	800c0f2 <HAL_TIM_ConfigClockSource+0x66e>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	4a58      	ldr	r2, [pc, #352]	@ (800bd84 <HAL_TIM_ConfigClockSource+0x300>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	f000 8264 	beq.w	800c0f2 <HAL_TIM_ConfigClockSource+0x66e>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4a56      	ldr	r2, [pc, #344]	@ (800bd88 <HAL_TIM_ConfigClockSource+0x304>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	f000 825e 	beq.w	800c0f2 <HAL_TIM_ConfigClockSource+0x66e>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4a54      	ldr	r2, [pc, #336]	@ (800bd8c <HAL_TIM_ConfigClockSource+0x308>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	f000 8258 	beq.w	800c0f2 <HAL_TIM_ConfigClockSource+0x66e>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	4a52      	ldr	r2, [pc, #328]	@ (800bd90 <HAL_TIM_ConfigClockSource+0x30c>)
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	f000 8252 	beq.w	800c0f2 <HAL_TIM_ConfigClockSource+0x66e>
 800bc4e:	f241 515d 	movw	r1, #5469	@ 0x155d
 800bc52:	4841      	ldr	r0, [pc, #260]	@ (800bd58 <HAL_TIM_ConfigClockSource+0x2d4>)
 800bc54:	f7fa f916 	bl	8005e84 <assert_failed>
      break;
 800bc58:	e24b      	b.n	800c0f2 <HAL_TIM_ConfigClockSource+0x66e>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	4a40      	ldr	r2, [pc, #256]	@ (800bd60 <HAL_TIM_ConfigClockSource+0x2dc>)
 800bc60:	4293      	cmp	r3, r2
 800bc62:	d027      	beq.n	800bcb4 <HAL_TIM_ConfigClockSource+0x230>
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc6c:	d022      	beq.n	800bcb4 <HAL_TIM_ConfigClockSource+0x230>
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	4a3c      	ldr	r2, [pc, #240]	@ (800bd64 <HAL_TIM_ConfigClockSource+0x2e0>)
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d01d      	beq.n	800bcb4 <HAL_TIM_ConfigClockSource+0x230>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	4a3a      	ldr	r2, [pc, #232]	@ (800bd68 <HAL_TIM_ConfigClockSource+0x2e4>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d018      	beq.n	800bcb4 <HAL_TIM_ConfigClockSource+0x230>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	4a39      	ldr	r2, [pc, #228]	@ (800bd6c <HAL_TIM_ConfigClockSource+0x2e8>)
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	d013      	beq.n	800bcb4 <HAL_TIM_ConfigClockSource+0x230>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	4a39      	ldr	r2, [pc, #228]	@ (800bd78 <HAL_TIM_ConfigClockSource+0x2f4>)
 800bc92:	4293      	cmp	r3, r2
 800bc94:	d00e      	beq.n	800bcb4 <HAL_TIM_ConfigClockSource+0x230>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	4a38      	ldr	r2, [pc, #224]	@ (800bd7c <HAL_TIM_ConfigClockSource+0x2f8>)
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d009      	beq.n	800bcb4 <HAL_TIM_ConfigClockSource+0x230>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4a38      	ldr	r2, [pc, #224]	@ (800bd88 <HAL_TIM_ConfigClockSource+0x304>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d004      	beq.n	800bcb4 <HAL_TIM_ConfigClockSource+0x230>
 800bcaa:	f241 5164 	movw	r1, #5476	@ 0x1564
 800bcae:	482a      	ldr	r0, [pc, #168]	@ (800bd58 <HAL_TIM_ConfigClockSource+0x2d4>)
 800bcb0:	f7fa f8e8 	bl	8005e84 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	689b      	ldr	r3, [r3, #8]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d013      	beq.n	800bce4 <HAL_TIM_ConfigClockSource+0x260>
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	689b      	ldr	r3, [r3, #8]
 800bcc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bcc4:	d00e      	beq.n	800bce4 <HAL_TIM_ConfigClockSource+0x260>
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	689b      	ldr	r3, [r3, #8]
 800bcca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bcce:	d009      	beq.n	800bce4 <HAL_TIM_ConfigClockSource+0x260>
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	689b      	ldr	r3, [r3, #8]
 800bcd4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bcd8:	d004      	beq.n	800bce4 <HAL_TIM_ConfigClockSource+0x260>
 800bcda:	f241 5167 	movw	r1, #5479	@ 0x1567
 800bcde:	481e      	ldr	r0, [pc, #120]	@ (800bd58 <HAL_TIM_ConfigClockSource+0x2d4>)
 800bce0:	f7fa f8d0 	bl	8005e84 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bcec:	d014      	beq.n	800bd18 <HAL_TIM_ConfigClockSource+0x294>
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d010      	beq.n	800bd18 <HAL_TIM_ConfigClockSource+0x294>
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	685b      	ldr	r3, [r3, #4]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d00c      	beq.n	800bd18 <HAL_TIM_ConfigClockSource+0x294>
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	685b      	ldr	r3, [r3, #4]
 800bd02:	2b02      	cmp	r3, #2
 800bd04:	d008      	beq.n	800bd18 <HAL_TIM_ConfigClockSource+0x294>
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	2b0a      	cmp	r3, #10
 800bd0c:	d004      	beq.n	800bd18 <HAL_TIM_ConfigClockSource+0x294>
 800bd0e:	f241 5168 	movw	r1, #5480	@ 0x1568
 800bd12:	4811      	ldr	r0, [pc, #68]	@ (800bd58 <HAL_TIM_ConfigClockSource+0x2d4>)
 800bd14:	f7fa f8b6 	bl	8005e84 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	68db      	ldr	r3, [r3, #12]
 800bd1c:	2b0f      	cmp	r3, #15
 800bd1e:	d904      	bls.n	800bd2a <HAL_TIM_ConfigClockSource+0x2a6>
 800bd20:	f241 5169 	movw	r1, #5481	@ 0x1569
 800bd24:	480c      	ldr	r0, [pc, #48]	@ (800bd58 <HAL_TIM_ConfigClockSource+0x2d4>)
 800bd26:	f7fa f8ad 	bl	8005e84 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bd3a:	f001 f953 	bl	800cfe4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	689b      	ldr	r3, [r3, #8]
 800bd44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bd4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	68ba      	ldr	r2, [r7, #8]
 800bd54:	609a      	str	r2, [r3, #8]
      break;
 800bd56:	e1cd      	b.n	800c0f4 <HAL_TIM_ConfigClockSource+0x670>
 800bd58:	08017b6c 	.word	0x08017b6c
 800bd5c:	fffeff88 	.word	0xfffeff88
 800bd60:	40010000 	.word	0x40010000
 800bd64:	40000400 	.word	0x40000400
 800bd68:	40000800 	.word	0x40000800
 800bd6c:	40000c00 	.word	0x40000c00
 800bd70:	40001000 	.word	0x40001000
 800bd74:	40001400 	.word	0x40001400
 800bd78:	40010400 	.word	0x40010400
 800bd7c:	40014000 	.word	0x40014000
 800bd80:	40014400 	.word	0x40014400
 800bd84:	40014800 	.word	0x40014800
 800bd88:	40001800 	.word	0x40001800
 800bd8c:	40001c00 	.word	0x40001c00
 800bd90:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	4a8d      	ldr	r2, [pc, #564]	@ (800bfd0 <HAL_TIM_ConfigClockSource+0x54c>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d01d      	beq.n	800bdda <HAL_TIM_ConfigClockSource+0x356>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bda6:	d018      	beq.n	800bdda <HAL_TIM_ConfigClockSource+0x356>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a89      	ldr	r2, [pc, #548]	@ (800bfd4 <HAL_TIM_ConfigClockSource+0x550>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d013      	beq.n	800bdda <HAL_TIM_ConfigClockSource+0x356>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a88      	ldr	r2, [pc, #544]	@ (800bfd8 <HAL_TIM_ConfigClockSource+0x554>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d00e      	beq.n	800bdda <HAL_TIM_ConfigClockSource+0x356>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4a86      	ldr	r2, [pc, #536]	@ (800bfdc <HAL_TIM_ConfigClockSource+0x558>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d009      	beq.n	800bdda <HAL_TIM_ConfigClockSource+0x356>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	4a85      	ldr	r2, [pc, #532]	@ (800bfe0 <HAL_TIM_ConfigClockSource+0x55c>)
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d004      	beq.n	800bdda <HAL_TIM_ConfigClockSource+0x356>
 800bdd0:	f241 517c 	movw	r1, #5500	@ 0x157c
 800bdd4:	4883      	ldr	r0, [pc, #524]	@ (800bfe4 <HAL_TIM_ConfigClockSource+0x560>)
 800bdd6:	f7fa f855 	bl	8005e84 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	689b      	ldr	r3, [r3, #8]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d013      	beq.n	800be0a <HAL_TIM_ConfigClockSource+0x386>
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	689b      	ldr	r3, [r3, #8]
 800bde6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bdea:	d00e      	beq.n	800be0a <HAL_TIM_ConfigClockSource+0x386>
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	689b      	ldr	r3, [r3, #8]
 800bdf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bdf4:	d009      	beq.n	800be0a <HAL_TIM_ConfigClockSource+0x386>
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bdfe:	d004      	beq.n	800be0a <HAL_TIM_ConfigClockSource+0x386>
 800be00:	f241 517f 	movw	r1, #5503	@ 0x157f
 800be04:	4877      	ldr	r0, [pc, #476]	@ (800bfe4 <HAL_TIM_ConfigClockSource+0x560>)
 800be06:	f7fa f83d 	bl	8005e84 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800be12:	d014      	beq.n	800be3e <HAL_TIM_ConfigClockSource+0x3ba>
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	685b      	ldr	r3, [r3, #4]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d010      	beq.n	800be3e <HAL_TIM_ConfigClockSource+0x3ba>
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d00c      	beq.n	800be3e <HAL_TIM_ConfigClockSource+0x3ba>
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	2b02      	cmp	r3, #2
 800be2a:	d008      	beq.n	800be3e <HAL_TIM_ConfigClockSource+0x3ba>
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	685b      	ldr	r3, [r3, #4]
 800be30:	2b0a      	cmp	r3, #10
 800be32:	d004      	beq.n	800be3e <HAL_TIM_ConfigClockSource+0x3ba>
 800be34:	f44f 51ac 	mov.w	r1, #5504	@ 0x1580
 800be38:	486a      	ldr	r0, [pc, #424]	@ (800bfe4 <HAL_TIM_ConfigClockSource+0x560>)
 800be3a:	f7fa f823 	bl	8005e84 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	68db      	ldr	r3, [r3, #12]
 800be42:	2b0f      	cmp	r3, #15
 800be44:	d904      	bls.n	800be50 <HAL_TIM_ConfigClockSource+0x3cc>
 800be46:	f241 5181 	movw	r1, #5505	@ 0x1581
 800be4a:	4866      	ldr	r0, [pc, #408]	@ (800bfe4 <HAL_TIM_ConfigClockSource+0x560>)
 800be4c:	f7fa f81a 	bl	8005e84 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800be60:	f001 f8c0 	bl	800cfe4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	689a      	ldr	r2, [r3, #8]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800be72:	609a      	str	r2, [r3, #8]
      break;
 800be74:	e13e      	b.n	800c0f4 <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	4a55      	ldr	r2, [pc, #340]	@ (800bfd0 <HAL_TIM_ConfigClockSource+0x54c>)
 800be7c:	4293      	cmp	r3, r2
 800be7e:	d01d      	beq.n	800bebc <HAL_TIM_ConfigClockSource+0x438>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be88:	d018      	beq.n	800bebc <HAL_TIM_ConfigClockSource+0x438>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	4a51      	ldr	r2, [pc, #324]	@ (800bfd4 <HAL_TIM_ConfigClockSource+0x550>)
 800be90:	4293      	cmp	r3, r2
 800be92:	d013      	beq.n	800bebc <HAL_TIM_ConfigClockSource+0x438>
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	4a4f      	ldr	r2, [pc, #316]	@ (800bfd8 <HAL_TIM_ConfigClockSource+0x554>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d00e      	beq.n	800bebc <HAL_TIM_ConfigClockSource+0x438>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	4a4e      	ldr	r2, [pc, #312]	@ (800bfdc <HAL_TIM_ConfigClockSource+0x558>)
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d009      	beq.n	800bebc <HAL_TIM_ConfigClockSource+0x438>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	4a4c      	ldr	r2, [pc, #304]	@ (800bfe0 <HAL_TIM_ConfigClockSource+0x55c>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d004      	beq.n	800bebc <HAL_TIM_ConfigClockSource+0x438>
 800beb2:	f241 5190 	movw	r1, #5520	@ 0x1590
 800beb6:	484b      	ldr	r0, [pc, #300]	@ (800bfe4 <HAL_TIM_ConfigClockSource+0x560>)
 800beb8:	f7f9 ffe4 	bl	8005e84 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bec4:	d014      	beq.n	800bef0 <HAL_TIM_ConfigClockSource+0x46c>
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d010      	beq.n	800bef0 <HAL_TIM_ConfigClockSource+0x46c>
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d00c      	beq.n	800bef0 <HAL_TIM_ConfigClockSource+0x46c>
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	2b02      	cmp	r3, #2
 800bedc:	d008      	beq.n	800bef0 <HAL_TIM_ConfigClockSource+0x46c>
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	2b0a      	cmp	r3, #10
 800bee4:	d004      	beq.n	800bef0 <HAL_TIM_ConfigClockSource+0x46c>
 800bee6:	f241 5193 	movw	r1, #5523	@ 0x1593
 800beea:	483e      	ldr	r0, [pc, #248]	@ (800bfe4 <HAL_TIM_ConfigClockSource+0x560>)
 800beec:	f7f9 ffca 	bl	8005e84 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	68db      	ldr	r3, [r3, #12]
 800bef4:	2b0f      	cmp	r3, #15
 800bef6:	d904      	bls.n	800bf02 <HAL_TIM_ConfigClockSource+0x47e>
 800bef8:	f241 5194 	movw	r1, #5524	@ 0x1594
 800befc:	4839      	ldr	r0, [pc, #228]	@ (800bfe4 <HAL_TIM_ConfigClockSource+0x560>)
 800befe:	f7f9 ffc1 	bl	8005e84 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf0e:	461a      	mov	r2, r3
 800bf10:	f000 ffee 	bl	800cef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	2150      	movs	r1, #80	@ 0x50
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f001 f847 	bl	800cfae <TIM_ITRx_SetConfig>
      break;
 800bf20:	e0e8      	b.n	800c0f4 <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4a2a      	ldr	r2, [pc, #168]	@ (800bfd0 <HAL_TIM_ConfigClockSource+0x54c>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d01d      	beq.n	800bf68 <HAL_TIM_ConfigClockSource+0x4e4>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf34:	d018      	beq.n	800bf68 <HAL_TIM_ConfigClockSource+0x4e4>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4a26      	ldr	r2, [pc, #152]	@ (800bfd4 <HAL_TIM_ConfigClockSource+0x550>)
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d013      	beq.n	800bf68 <HAL_TIM_ConfigClockSource+0x4e4>
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4a24      	ldr	r2, [pc, #144]	@ (800bfd8 <HAL_TIM_ConfigClockSource+0x554>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d00e      	beq.n	800bf68 <HAL_TIM_ConfigClockSource+0x4e4>
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	4a23      	ldr	r2, [pc, #140]	@ (800bfdc <HAL_TIM_ConfigClockSource+0x558>)
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d009      	beq.n	800bf68 <HAL_TIM_ConfigClockSource+0x4e4>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	4a21      	ldr	r2, [pc, #132]	@ (800bfe0 <HAL_TIM_ConfigClockSource+0x55c>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d004      	beq.n	800bf68 <HAL_TIM_ConfigClockSource+0x4e4>
 800bf5e:	f44f 51ad 	mov.w	r1, #5536	@ 0x15a0
 800bf62:	4820      	ldr	r0, [pc, #128]	@ (800bfe4 <HAL_TIM_ConfigClockSource+0x560>)
 800bf64:	f7f9 ff8e 	bl	8005e84 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bf70:	d014      	beq.n	800bf9c <HAL_TIM_ConfigClockSource+0x518>
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d010      	beq.n	800bf9c <HAL_TIM_ConfigClockSource+0x518>
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d00c      	beq.n	800bf9c <HAL_TIM_ConfigClockSource+0x518>
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	2b02      	cmp	r3, #2
 800bf88:	d008      	beq.n	800bf9c <HAL_TIM_ConfigClockSource+0x518>
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	2b0a      	cmp	r3, #10
 800bf90:	d004      	beq.n	800bf9c <HAL_TIM_ConfigClockSource+0x518>
 800bf92:	f241 51a3 	movw	r1, #5539	@ 0x15a3
 800bf96:	4813      	ldr	r0, [pc, #76]	@ (800bfe4 <HAL_TIM_ConfigClockSource+0x560>)
 800bf98:	f7f9 ff74 	bl	8005e84 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	2b0f      	cmp	r3, #15
 800bfa2:	d904      	bls.n	800bfae <HAL_TIM_ConfigClockSource+0x52a>
 800bfa4:	f241 51a4 	movw	r1, #5540	@ 0x15a4
 800bfa8:	480e      	ldr	r0, [pc, #56]	@ (800bfe4 <HAL_TIM_ConfigClockSource+0x560>)
 800bfaa:	f7f9 ff6b 	bl	8005e84 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bfba:	461a      	mov	r2, r3
 800bfbc:	f000 ffc7 	bl	800cf4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	2160      	movs	r1, #96	@ 0x60
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f000 fff1 	bl	800cfae <TIM_ITRx_SetConfig>
      break;
 800bfcc:	e092      	b.n	800c0f4 <HAL_TIM_ConfigClockSource+0x670>
 800bfce:	bf00      	nop
 800bfd0:	40010000 	.word	0x40010000
 800bfd4:	40000400 	.word	0x40000400
 800bfd8:	40000800 	.word	0x40000800
 800bfdc:	40000c00 	.word	0x40000c00
 800bfe0:	40010400 	.word	0x40010400
 800bfe4:	08017b6c 	.word	0x08017b6c
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	4a48      	ldr	r2, [pc, #288]	@ (800c110 <HAL_TIM_ConfigClockSource+0x68c>)
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d01d      	beq.n	800c02e <HAL_TIM_ConfigClockSource+0x5aa>
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bffa:	d018      	beq.n	800c02e <HAL_TIM_ConfigClockSource+0x5aa>
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	4a44      	ldr	r2, [pc, #272]	@ (800c114 <HAL_TIM_ConfigClockSource+0x690>)
 800c002:	4293      	cmp	r3, r2
 800c004:	d013      	beq.n	800c02e <HAL_TIM_ConfigClockSource+0x5aa>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4a43      	ldr	r2, [pc, #268]	@ (800c118 <HAL_TIM_ConfigClockSource+0x694>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d00e      	beq.n	800c02e <HAL_TIM_ConfigClockSource+0x5aa>
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4a41      	ldr	r2, [pc, #260]	@ (800c11c <HAL_TIM_ConfigClockSource+0x698>)
 800c016:	4293      	cmp	r3, r2
 800c018:	d009      	beq.n	800c02e <HAL_TIM_ConfigClockSource+0x5aa>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	4a40      	ldr	r2, [pc, #256]	@ (800c120 <HAL_TIM_ConfigClockSource+0x69c>)
 800c020:	4293      	cmp	r3, r2
 800c022:	d004      	beq.n	800c02e <HAL_TIM_ConfigClockSource+0x5aa>
 800c024:	f241 51b0 	movw	r1, #5552	@ 0x15b0
 800c028:	483e      	ldr	r0, [pc, #248]	@ (800c124 <HAL_TIM_ConfigClockSource+0x6a0>)
 800c02a:	f7f9 ff2b 	bl	8005e84 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	685b      	ldr	r3, [r3, #4]
 800c032:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c036:	d014      	beq.n	800c062 <HAL_TIM_ConfigClockSource+0x5de>
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	685b      	ldr	r3, [r3, #4]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d010      	beq.n	800c062 <HAL_TIM_ConfigClockSource+0x5de>
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	685b      	ldr	r3, [r3, #4]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d00c      	beq.n	800c062 <HAL_TIM_ConfigClockSource+0x5de>
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	2b02      	cmp	r3, #2
 800c04e:	d008      	beq.n	800c062 <HAL_TIM_ConfigClockSource+0x5de>
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	2b0a      	cmp	r3, #10
 800c056:	d004      	beq.n	800c062 <HAL_TIM_ConfigClockSource+0x5de>
 800c058:	f241 51b3 	movw	r1, #5555	@ 0x15b3
 800c05c:	4831      	ldr	r0, [pc, #196]	@ (800c124 <HAL_TIM_ConfigClockSource+0x6a0>)
 800c05e:	f7f9 ff11 	bl	8005e84 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	68db      	ldr	r3, [r3, #12]
 800c066:	2b0f      	cmp	r3, #15
 800c068:	d904      	bls.n	800c074 <HAL_TIM_ConfigClockSource+0x5f0>
 800c06a:	f241 51b4 	movw	r1, #5556	@ 0x15b4
 800c06e:	482d      	ldr	r0, [pc, #180]	@ (800c124 <HAL_TIM_ConfigClockSource+0x6a0>)
 800c070:	f7f9 ff08 	bl	8005e84 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c080:	461a      	mov	r2, r3
 800c082:	f000 ff35 	bl	800cef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	2140      	movs	r1, #64	@ 0x40
 800c08c:	4618      	mov	r0, r3
 800c08e:	f000 ff8e 	bl	800cfae <TIM_ITRx_SetConfig>
      break;
 800c092:	e02f      	b.n	800c0f4 <HAL_TIM_ConfigClockSource+0x670>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4a1d      	ldr	r2, [pc, #116]	@ (800c110 <HAL_TIM_ConfigClockSource+0x68c>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d01d      	beq.n	800c0da <HAL_TIM_ConfigClockSource+0x656>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0a6:	d018      	beq.n	800c0da <HAL_TIM_ConfigClockSource+0x656>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4a19      	ldr	r2, [pc, #100]	@ (800c114 <HAL_TIM_ConfigClockSource+0x690>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d013      	beq.n	800c0da <HAL_TIM_ConfigClockSource+0x656>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4a18      	ldr	r2, [pc, #96]	@ (800c118 <HAL_TIM_ConfigClockSource+0x694>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d00e      	beq.n	800c0da <HAL_TIM_ConfigClockSource+0x656>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4a16      	ldr	r2, [pc, #88]	@ (800c11c <HAL_TIM_ConfigClockSource+0x698>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d009      	beq.n	800c0da <HAL_TIM_ConfigClockSource+0x656>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	4a15      	ldr	r2, [pc, #84]	@ (800c120 <HAL_TIM_ConfigClockSource+0x69c>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d004      	beq.n	800c0da <HAL_TIM_ConfigClockSource+0x656>
 800c0d0:	f241 51c3 	movw	r1, #5571	@ 0x15c3
 800c0d4:	4813      	ldr	r0, [pc, #76]	@ (800c124 <HAL_TIM_ConfigClockSource+0x6a0>)
 800c0d6:	f7f9 fed5 	bl	8005e84 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681a      	ldr	r2, [r3, #0]
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	4610      	mov	r0, r2
 800c0e6:	f000 ff62 	bl	800cfae <TIM_ITRx_SetConfig>
      break;
 800c0ea:	e003      	b.n	800c0f4 <HAL_TIM_ConfigClockSource+0x670>
    }

    default:
      status = HAL_ERROR;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	73fb      	strb	r3, [r7, #15]
      break;
 800c0f0:	e000      	b.n	800c0f4 <HAL_TIM_ConfigClockSource+0x670>
      break;
 800c0f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c104:	7bfb      	ldrb	r3, [r7, #15]
}
 800c106:	4618      	mov	r0, r3
 800c108:	3710      	adds	r7, #16
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	40010000 	.word	0x40010000
 800c114:	40000400 	.word	0x40000400
 800c118:	40000800 	.word	0x40000800
 800c11c:	40000c00 	.word	0x40000c00
 800c120:	40010400 	.word	0x40010400
 800c124:	08017b6c 	.word	0x08017b6c

0800c128 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b082      	sub	sp, #8
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	4a55      	ldr	r2, [pc, #340]	@ (800c28c <HAL_TIM_SlaveConfigSynchro+0x164>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	d027      	beq.n	800c18c <HAL_TIM_SlaveConfigSynchro+0x64>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c144:	d022      	beq.n	800c18c <HAL_TIM_SlaveConfigSynchro+0x64>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4a51      	ldr	r2, [pc, #324]	@ (800c290 <HAL_TIM_SlaveConfigSynchro+0x168>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d01d      	beq.n	800c18c <HAL_TIM_SlaveConfigSynchro+0x64>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4a4f      	ldr	r2, [pc, #316]	@ (800c294 <HAL_TIM_SlaveConfigSynchro+0x16c>)
 800c156:	4293      	cmp	r3, r2
 800c158:	d018      	beq.n	800c18c <HAL_TIM_SlaveConfigSynchro+0x64>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	4a4e      	ldr	r2, [pc, #312]	@ (800c298 <HAL_TIM_SlaveConfigSynchro+0x170>)
 800c160:	4293      	cmp	r3, r2
 800c162:	d013      	beq.n	800c18c <HAL_TIM_SlaveConfigSynchro+0x64>
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	4a4c      	ldr	r2, [pc, #304]	@ (800c29c <HAL_TIM_SlaveConfigSynchro+0x174>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d00e      	beq.n	800c18c <HAL_TIM_SlaveConfigSynchro+0x64>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	4a4b      	ldr	r2, [pc, #300]	@ (800c2a0 <HAL_TIM_SlaveConfigSynchro+0x178>)
 800c174:	4293      	cmp	r3, r2
 800c176:	d009      	beq.n	800c18c <HAL_TIM_SlaveConfigSynchro+0x64>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	4a49      	ldr	r2, [pc, #292]	@ (800c2a4 <HAL_TIM_SlaveConfigSynchro+0x17c>)
 800c17e:	4293      	cmp	r3, r2
 800c180:	d004      	beq.n	800c18c <HAL_TIM_SlaveConfigSynchro+0x64>
 800c182:	f241 6103 	movw	r1, #5635	@ 0x1603
 800c186:	4848      	ldr	r0, [pc, #288]	@ (800c2a8 <HAL_TIM_SlaveConfigSynchro+0x180>)
 800c188:	f7f9 fe7c 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d019      	beq.n	800c1c8 <HAL_TIM_SlaveConfigSynchro+0xa0>
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	2b04      	cmp	r3, #4
 800c19a:	d015      	beq.n	800c1c8 <HAL_TIM_SlaveConfigSynchro+0xa0>
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	2b05      	cmp	r3, #5
 800c1a2:	d011      	beq.n	800c1c8 <HAL_TIM_SlaveConfigSynchro+0xa0>
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	2b06      	cmp	r3, #6
 800c1aa:	d00d      	beq.n	800c1c8 <HAL_TIM_SlaveConfigSynchro+0xa0>
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	2b07      	cmp	r3, #7
 800c1b2:	d009      	beq.n	800c1c8 <HAL_TIM_SlaveConfigSynchro+0xa0>
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c1bc:	d004      	beq.n	800c1c8 <HAL_TIM_SlaveConfigSynchro+0xa0>
 800c1be:	f241 6104 	movw	r1, #5636	@ 0x1604
 800c1c2:	4839      	ldr	r0, [pc, #228]	@ (800c2a8 <HAL_TIM_SlaveConfigSynchro+0x180>)
 800c1c4:	f7f9 fe5e 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	685b      	ldr	r3, [r3, #4]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d020      	beq.n	800c212 <HAL_TIM_SlaveConfigSynchro+0xea>
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	2b10      	cmp	r3, #16
 800c1d6:	d01c      	beq.n	800c212 <HAL_TIM_SlaveConfigSynchro+0xea>
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	685b      	ldr	r3, [r3, #4]
 800c1dc:	2b20      	cmp	r3, #32
 800c1de:	d018      	beq.n	800c212 <HAL_TIM_SlaveConfigSynchro+0xea>
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	2b30      	cmp	r3, #48	@ 0x30
 800c1e6:	d014      	beq.n	800c212 <HAL_TIM_SlaveConfigSynchro+0xea>
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	685b      	ldr	r3, [r3, #4]
 800c1ec:	2b40      	cmp	r3, #64	@ 0x40
 800c1ee:	d010      	beq.n	800c212 <HAL_TIM_SlaveConfigSynchro+0xea>
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	685b      	ldr	r3, [r3, #4]
 800c1f4:	2b50      	cmp	r3, #80	@ 0x50
 800c1f6:	d00c      	beq.n	800c212 <HAL_TIM_SlaveConfigSynchro+0xea>
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	685b      	ldr	r3, [r3, #4]
 800c1fc:	2b60      	cmp	r3, #96	@ 0x60
 800c1fe:	d008      	beq.n	800c212 <HAL_TIM_SlaveConfigSynchro+0xea>
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	685b      	ldr	r3, [r3, #4]
 800c204:	2b70      	cmp	r3, #112	@ 0x70
 800c206:	d004      	beq.n	800c212 <HAL_TIM_SlaveConfigSynchro+0xea>
 800c208:	f241 6105 	movw	r1, #5637	@ 0x1605
 800c20c:	4826      	ldr	r0, [pc, #152]	@ (800c2a8 <HAL_TIM_SlaveConfigSynchro+0x180>)
 800c20e:	f7f9 fe39 	bl	8005e84 <assert_failed>

  __HAL_LOCK(htim);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c218:	2b01      	cmp	r3, #1
 800c21a:	d101      	bne.n	800c220 <HAL_TIM_SlaveConfigSynchro+0xf8>
 800c21c:	2302      	movs	r3, #2
 800c21e:	e031      	b.n	800c284 <HAL_TIM_SlaveConfigSynchro+0x15c>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2201      	movs	r2, #1
 800c224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2202      	movs	r2, #2
 800c22c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800c230:	6839      	ldr	r1, [r7, #0]
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 fbf6 	bl	800ca24 <TIM_SlaveTimer_SetConfig>
 800c238:	4603      	mov	r3, r0
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d009      	beq.n	800c252 <HAL_TIM_SlaveConfigSynchro+0x12a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2201      	movs	r2, #1
 800c242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2200      	movs	r2, #0
 800c24a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800c24e:	2301      	movs	r3, #1
 800c250:	e018      	b.n	800c284 <HAL_TIM_SlaveConfigSynchro+0x15c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	68da      	ldr	r2, [r3, #12]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c260:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	68da      	ldr	r2, [r3, #12]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800c270:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2201      	movs	r2, #1
 800c276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2200      	movs	r2, #0
 800c27e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c282:	2300      	movs	r3, #0
}
 800c284:	4618      	mov	r0, r3
 800c286:	3708      	adds	r7, #8
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	40010000 	.word	0x40010000
 800c290:	40000400 	.word	0x40000400
 800c294:	40000800 	.word	0x40000800
 800c298:	40000c00 	.word	0x40000c00
 800c29c:	40010400 	.word	0x40010400
 800c2a0:	40014000 	.word	0x40014000
 800c2a4:	40001800 	.word	0x40001800
 800c2a8:	08017b6c 	.word	0x08017b6c

0800c2ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b083      	sub	sp, #12
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c2b4:	bf00      	nop
 800c2b6:	370c      	adds	r7, #12
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr

0800c2c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b083      	sub	sp, #12
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c2c8:	bf00      	nop
 800c2ca:	370c      	adds	r7, #12
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr

0800c2d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b083      	sub	sp, #12
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c2dc:	bf00      	nop
 800c2de:	370c      	adds	r7, #12
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr

0800c2e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b083      	sub	sp, #12
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c2f0:	bf00      	nop
 800c2f2:	370c      	adds	r7, #12
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr

0800c2fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b085      	sub	sp, #20
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	4a46      	ldr	r2, [pc, #280]	@ (800c428 <TIM_Base_SetConfig+0x12c>)
 800c310:	4293      	cmp	r3, r2
 800c312:	d013      	beq.n	800c33c <TIM_Base_SetConfig+0x40>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c31a:	d00f      	beq.n	800c33c <TIM_Base_SetConfig+0x40>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	4a43      	ldr	r2, [pc, #268]	@ (800c42c <TIM_Base_SetConfig+0x130>)
 800c320:	4293      	cmp	r3, r2
 800c322:	d00b      	beq.n	800c33c <TIM_Base_SetConfig+0x40>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	4a42      	ldr	r2, [pc, #264]	@ (800c430 <TIM_Base_SetConfig+0x134>)
 800c328:	4293      	cmp	r3, r2
 800c32a:	d007      	beq.n	800c33c <TIM_Base_SetConfig+0x40>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	4a41      	ldr	r2, [pc, #260]	@ (800c434 <TIM_Base_SetConfig+0x138>)
 800c330:	4293      	cmp	r3, r2
 800c332:	d003      	beq.n	800c33c <TIM_Base_SetConfig+0x40>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	4a40      	ldr	r2, [pc, #256]	@ (800c438 <TIM_Base_SetConfig+0x13c>)
 800c338:	4293      	cmp	r3, r2
 800c33a:	d108      	bne.n	800c34e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	685b      	ldr	r3, [r3, #4]
 800c348:	68fa      	ldr	r2, [r7, #12]
 800c34a:	4313      	orrs	r3, r2
 800c34c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	4a35      	ldr	r2, [pc, #212]	@ (800c428 <TIM_Base_SetConfig+0x12c>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d02b      	beq.n	800c3ae <TIM_Base_SetConfig+0xb2>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c35c:	d027      	beq.n	800c3ae <TIM_Base_SetConfig+0xb2>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	4a32      	ldr	r2, [pc, #200]	@ (800c42c <TIM_Base_SetConfig+0x130>)
 800c362:	4293      	cmp	r3, r2
 800c364:	d023      	beq.n	800c3ae <TIM_Base_SetConfig+0xb2>
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	4a31      	ldr	r2, [pc, #196]	@ (800c430 <TIM_Base_SetConfig+0x134>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d01f      	beq.n	800c3ae <TIM_Base_SetConfig+0xb2>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	4a30      	ldr	r2, [pc, #192]	@ (800c434 <TIM_Base_SetConfig+0x138>)
 800c372:	4293      	cmp	r3, r2
 800c374:	d01b      	beq.n	800c3ae <TIM_Base_SetConfig+0xb2>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	4a2f      	ldr	r2, [pc, #188]	@ (800c438 <TIM_Base_SetConfig+0x13c>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d017      	beq.n	800c3ae <TIM_Base_SetConfig+0xb2>
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	4a2e      	ldr	r2, [pc, #184]	@ (800c43c <TIM_Base_SetConfig+0x140>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d013      	beq.n	800c3ae <TIM_Base_SetConfig+0xb2>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	4a2d      	ldr	r2, [pc, #180]	@ (800c440 <TIM_Base_SetConfig+0x144>)
 800c38a:	4293      	cmp	r3, r2
 800c38c:	d00f      	beq.n	800c3ae <TIM_Base_SetConfig+0xb2>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	4a2c      	ldr	r2, [pc, #176]	@ (800c444 <TIM_Base_SetConfig+0x148>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d00b      	beq.n	800c3ae <TIM_Base_SetConfig+0xb2>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	4a2b      	ldr	r2, [pc, #172]	@ (800c448 <TIM_Base_SetConfig+0x14c>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d007      	beq.n	800c3ae <TIM_Base_SetConfig+0xb2>
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	4a2a      	ldr	r2, [pc, #168]	@ (800c44c <TIM_Base_SetConfig+0x150>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d003      	beq.n	800c3ae <TIM_Base_SetConfig+0xb2>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	4a29      	ldr	r2, [pc, #164]	@ (800c450 <TIM_Base_SetConfig+0x154>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d108      	bne.n	800c3c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c3b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	68db      	ldr	r3, [r3, #12]
 800c3ba:	68fa      	ldr	r2, [r7, #12]
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	695b      	ldr	r3, [r3, #20]
 800c3ca:	4313      	orrs	r3, r2
 800c3cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	68fa      	ldr	r2, [r7, #12]
 800c3d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	689a      	ldr	r2, [r3, #8]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	4a10      	ldr	r2, [pc, #64]	@ (800c428 <TIM_Base_SetConfig+0x12c>)
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d003      	beq.n	800c3f4 <TIM_Base_SetConfig+0xf8>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	4a12      	ldr	r2, [pc, #72]	@ (800c438 <TIM_Base_SetConfig+0x13c>)
 800c3f0:	4293      	cmp	r3, r2
 800c3f2:	d103      	bne.n	800c3fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	691a      	ldr	r2, [r3, #16]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2201      	movs	r2, #1
 800c400:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	691b      	ldr	r3, [r3, #16]
 800c406:	f003 0301 	and.w	r3, r3, #1
 800c40a:	2b01      	cmp	r3, #1
 800c40c:	d105      	bne.n	800c41a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	691b      	ldr	r3, [r3, #16]
 800c412:	f023 0201 	bic.w	r2, r3, #1
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	611a      	str	r2, [r3, #16]
  }
}
 800c41a:	bf00      	nop
 800c41c:	3714      	adds	r7, #20
 800c41e:	46bd      	mov	sp, r7
 800c420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c424:	4770      	bx	lr
 800c426:	bf00      	nop
 800c428:	40010000 	.word	0x40010000
 800c42c:	40000400 	.word	0x40000400
 800c430:	40000800 	.word	0x40000800
 800c434:	40000c00 	.word	0x40000c00
 800c438:	40010400 	.word	0x40010400
 800c43c:	40014000 	.word	0x40014000
 800c440:	40014400 	.word	0x40014400
 800c444:	40014800 	.word	0x40014800
 800c448:	40001800 	.word	0x40001800
 800c44c:	40001c00 	.word	0x40001c00
 800c450:	40002000 	.word	0x40002000

0800c454 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b086      	sub	sp, #24
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6a1b      	ldr	r3, [r3, #32]
 800c462:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6a1b      	ldr	r3, [r3, #32]
 800c468:	f023 0201 	bic.w	r2, r3, #1
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	685b      	ldr	r3, [r3, #4]
 800c474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	699b      	ldr	r3, [r3, #24]
 800c47a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c47c:	68fa      	ldr	r2, [r7, #12]
 800c47e:	4b3f      	ldr	r3, [pc, #252]	@ (800c57c <TIM_OC1_SetConfig+0x128>)
 800c480:	4013      	ands	r3, r2
 800c482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f023 0303 	bic.w	r3, r3, #3
 800c48a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	68fa      	ldr	r2, [r7, #12]
 800c492:	4313      	orrs	r3, r2
 800c494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	f023 0302 	bic.w	r3, r3, #2
 800c49c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	689b      	ldr	r3, [r3, #8]
 800c4a2:	697a      	ldr	r2, [r7, #20]
 800c4a4:	4313      	orrs	r3, r2
 800c4a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	4a35      	ldr	r2, [pc, #212]	@ (800c580 <TIM_OC1_SetConfig+0x12c>)
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d003      	beq.n	800c4b8 <TIM_OC1_SetConfig+0x64>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	4a34      	ldr	r2, [pc, #208]	@ (800c584 <TIM_OC1_SetConfig+0x130>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d119      	bne.n	800c4ec <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	68db      	ldr	r3, [r3, #12]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d008      	beq.n	800c4d2 <TIM_OC1_SetConfig+0x7e>
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	68db      	ldr	r3, [r3, #12]
 800c4c4:	2b08      	cmp	r3, #8
 800c4c6:	d004      	beq.n	800c4d2 <TIM_OC1_SetConfig+0x7e>
 800c4c8:	f641 3169 	movw	r1, #7017	@ 0x1b69
 800c4cc:	482e      	ldr	r0, [pc, #184]	@ (800c588 <TIM_OC1_SetConfig+0x134>)
 800c4ce:	f7f9 fcd9 	bl	8005e84 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	f023 0308 	bic.w	r3, r3, #8
 800c4d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	68db      	ldr	r3, [r3, #12]
 800c4de:	697a      	ldr	r2, [r7, #20]
 800c4e0:	4313      	orrs	r3, r2
 800c4e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	f023 0304 	bic.w	r3, r3, #4
 800c4ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	4a24      	ldr	r2, [pc, #144]	@ (800c580 <TIM_OC1_SetConfig+0x12c>)
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d003      	beq.n	800c4fc <TIM_OC1_SetConfig+0xa8>
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	4a23      	ldr	r2, [pc, #140]	@ (800c584 <TIM_OC1_SetConfig+0x130>)
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	d12d      	bne.n	800c558 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	699b      	ldr	r3, [r3, #24]
 800c500:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c504:	d008      	beq.n	800c518 <TIM_OC1_SetConfig+0xc4>
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	699b      	ldr	r3, [r3, #24]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d004      	beq.n	800c518 <TIM_OC1_SetConfig+0xc4>
 800c50e:	f641 3176 	movw	r1, #7030	@ 0x1b76
 800c512:	481d      	ldr	r0, [pc, #116]	@ (800c588 <TIM_OC1_SetConfig+0x134>)
 800c514:	f7f9 fcb6 	bl	8005e84 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	695b      	ldr	r3, [r3, #20]
 800c51c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c520:	d008      	beq.n	800c534 <TIM_OC1_SetConfig+0xe0>
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	695b      	ldr	r3, [r3, #20]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d004      	beq.n	800c534 <TIM_OC1_SetConfig+0xe0>
 800c52a:	f641 3177 	movw	r1, #7031	@ 0x1b77
 800c52e:	4816      	ldr	r0, [pc, #88]	@ (800c588 <TIM_OC1_SetConfig+0x134>)
 800c530:	f7f9 fca8 	bl	8005e84 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c53a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c542:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	695b      	ldr	r3, [r3, #20]
 800c548:	693a      	ldr	r2, [r7, #16]
 800c54a:	4313      	orrs	r3, r2
 800c54c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	699b      	ldr	r3, [r3, #24]
 800c552:	693a      	ldr	r2, [r7, #16]
 800c554:	4313      	orrs	r3, r2
 800c556:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	693a      	ldr	r2, [r7, #16]
 800c55c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	68fa      	ldr	r2, [r7, #12]
 800c562:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	685a      	ldr	r2, [r3, #4]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	697a      	ldr	r2, [r7, #20]
 800c570:	621a      	str	r2, [r3, #32]
}
 800c572:	bf00      	nop
 800c574:	3718      	adds	r7, #24
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	fffeff8f 	.word	0xfffeff8f
 800c580:	40010000 	.word	0x40010000
 800c584:	40010400 	.word	0x40010400
 800c588:	08017b6c 	.word	0x08017b6c

0800c58c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b086      	sub	sp, #24
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6a1b      	ldr	r3, [r3, #32]
 800c59a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6a1b      	ldr	r3, [r3, #32]
 800c5a0:	f023 0210 	bic.w	r2, r3, #16
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	685b      	ldr	r3, [r3, #4]
 800c5ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	699b      	ldr	r3, [r3, #24]
 800c5b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c5b4:	68fa      	ldr	r2, [r7, #12]
 800c5b6:	4b41      	ldr	r3, [pc, #260]	@ (800c6bc <TIM_OC2_SetConfig+0x130>)
 800c5b8:	4013      	ands	r3, r2
 800c5ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c5c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	021b      	lsls	r3, r3, #8
 800c5ca:	68fa      	ldr	r2, [r7, #12]
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	f023 0320 	bic.w	r3, r3, #32
 800c5d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	689b      	ldr	r3, [r3, #8]
 800c5dc:	011b      	lsls	r3, r3, #4
 800c5de:	697a      	ldr	r2, [r7, #20]
 800c5e0:	4313      	orrs	r3, r2
 800c5e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	4a36      	ldr	r2, [pc, #216]	@ (800c6c0 <TIM_OC2_SetConfig+0x134>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d003      	beq.n	800c5f4 <TIM_OC2_SetConfig+0x68>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	4a35      	ldr	r2, [pc, #212]	@ (800c6c4 <TIM_OC2_SetConfig+0x138>)
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d11a      	bne.n	800c62a <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	68db      	ldr	r3, [r3, #12]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d008      	beq.n	800c60e <TIM_OC2_SetConfig+0x82>
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	68db      	ldr	r3, [r3, #12]
 800c600:	2b08      	cmp	r3, #8
 800c602:	d004      	beq.n	800c60e <TIM_OC2_SetConfig+0x82>
 800c604:	f641 31b5 	movw	r1, #7093	@ 0x1bb5
 800c608:	482f      	ldr	r0, [pc, #188]	@ (800c6c8 <TIM_OC2_SetConfig+0x13c>)
 800c60a:	f7f9 fc3b 	bl	8005e84 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c614:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	68db      	ldr	r3, [r3, #12]
 800c61a:	011b      	lsls	r3, r3, #4
 800c61c:	697a      	ldr	r2, [r7, #20]
 800c61e:	4313      	orrs	r3, r2
 800c620:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c628:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	4a24      	ldr	r2, [pc, #144]	@ (800c6c0 <TIM_OC2_SetConfig+0x134>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d003      	beq.n	800c63a <TIM_OC2_SetConfig+0xae>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	4a23      	ldr	r2, [pc, #140]	@ (800c6c4 <TIM_OC2_SetConfig+0x138>)
 800c636:	4293      	cmp	r3, r2
 800c638:	d12f      	bne.n	800c69a <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	699b      	ldr	r3, [r3, #24]
 800c63e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c642:	d008      	beq.n	800c656 <TIM_OC2_SetConfig+0xca>
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	699b      	ldr	r3, [r3, #24]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d004      	beq.n	800c656 <TIM_OC2_SetConfig+0xca>
 800c64c:	f641 31c2 	movw	r1, #7106	@ 0x1bc2
 800c650:	481d      	ldr	r0, [pc, #116]	@ (800c6c8 <TIM_OC2_SetConfig+0x13c>)
 800c652:	f7f9 fc17 	bl	8005e84 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	695b      	ldr	r3, [r3, #20]
 800c65a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c65e:	d008      	beq.n	800c672 <TIM_OC2_SetConfig+0xe6>
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	695b      	ldr	r3, [r3, #20]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d004      	beq.n	800c672 <TIM_OC2_SetConfig+0xe6>
 800c668:	f641 31c3 	movw	r1, #7107	@ 0x1bc3
 800c66c:	4816      	ldr	r0, [pc, #88]	@ (800c6c8 <TIM_OC2_SetConfig+0x13c>)
 800c66e:	f7f9 fc09 	bl	8005e84 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	695b      	ldr	r3, [r3, #20]
 800c686:	009b      	lsls	r3, r3, #2
 800c688:	693a      	ldr	r2, [r7, #16]
 800c68a:	4313      	orrs	r3, r2
 800c68c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	699b      	ldr	r3, [r3, #24]
 800c692:	009b      	lsls	r3, r3, #2
 800c694:	693a      	ldr	r2, [r7, #16]
 800c696:	4313      	orrs	r3, r2
 800c698:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	693a      	ldr	r2, [r7, #16]
 800c69e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	68fa      	ldr	r2, [r7, #12]
 800c6a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	685a      	ldr	r2, [r3, #4]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	697a      	ldr	r2, [r7, #20]
 800c6b2:	621a      	str	r2, [r3, #32]
}
 800c6b4:	bf00      	nop
 800c6b6:	3718      	adds	r7, #24
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}
 800c6bc:	feff8fff 	.word	0xfeff8fff
 800c6c0:	40010000 	.word	0x40010000
 800c6c4:	40010400 	.word	0x40010400
 800c6c8:	08017b6c 	.word	0x08017b6c

0800c6cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b086      	sub	sp, #24
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6a1b      	ldr	r3, [r3, #32]
 800c6da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6a1b      	ldr	r3, [r3, #32]
 800c6e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	685b      	ldr	r3, [r3, #4]
 800c6ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	69db      	ldr	r3, [r3, #28]
 800c6f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c6f4:	68fa      	ldr	r2, [r7, #12]
 800c6f6:	4b41      	ldr	r3, [pc, #260]	@ (800c7fc <TIM_OC3_SetConfig+0x130>)
 800c6f8:	4013      	ands	r3, r2
 800c6fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	f023 0303 	bic.w	r3, r3, #3
 800c702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	68fa      	ldr	r2, [r7, #12]
 800c70a:	4313      	orrs	r3, r2
 800c70c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c714:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	689b      	ldr	r3, [r3, #8]
 800c71a:	021b      	lsls	r3, r3, #8
 800c71c:	697a      	ldr	r2, [r7, #20]
 800c71e:	4313      	orrs	r3, r2
 800c720:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	4a36      	ldr	r2, [pc, #216]	@ (800c800 <TIM_OC3_SetConfig+0x134>)
 800c726:	4293      	cmp	r3, r2
 800c728:	d003      	beq.n	800c732 <TIM_OC3_SetConfig+0x66>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	4a35      	ldr	r2, [pc, #212]	@ (800c804 <TIM_OC3_SetConfig+0x138>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	d11a      	bne.n	800c768 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d008      	beq.n	800c74c <TIM_OC3_SetConfig+0x80>
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	68db      	ldr	r3, [r3, #12]
 800c73e:	2b08      	cmp	r3, #8
 800c740:	d004      	beq.n	800c74c <TIM_OC3_SetConfig+0x80>
 800c742:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 800c746:	4830      	ldr	r0, [pc, #192]	@ (800c808 <TIM_OC3_SetConfig+0x13c>)
 800c748:	f7f9 fb9c 	bl	8005e84 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c752:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	68db      	ldr	r3, [r3, #12]
 800c758:	021b      	lsls	r3, r3, #8
 800c75a:	697a      	ldr	r2, [r7, #20]
 800c75c:	4313      	orrs	r3, r2
 800c75e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c766:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	4a25      	ldr	r2, [pc, #148]	@ (800c800 <TIM_OC3_SetConfig+0x134>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d003      	beq.n	800c778 <TIM_OC3_SetConfig+0xac>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	4a24      	ldr	r2, [pc, #144]	@ (800c804 <TIM_OC3_SetConfig+0x138>)
 800c774:	4293      	cmp	r3, r2
 800c776:	d12f      	bne.n	800c7d8 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	699b      	ldr	r3, [r3, #24]
 800c77c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c780:	d008      	beq.n	800c794 <TIM_OC3_SetConfig+0xc8>
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	699b      	ldr	r3, [r3, #24]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d004      	beq.n	800c794 <TIM_OC3_SetConfig+0xc8>
 800c78a:	f641 410d 	movw	r1, #7181	@ 0x1c0d
 800c78e:	481e      	ldr	r0, [pc, #120]	@ (800c808 <TIM_OC3_SetConfig+0x13c>)
 800c790:	f7f9 fb78 	bl	8005e84 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	695b      	ldr	r3, [r3, #20]
 800c798:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c79c:	d008      	beq.n	800c7b0 <TIM_OC3_SetConfig+0xe4>
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	695b      	ldr	r3, [r3, #20]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d004      	beq.n	800c7b0 <TIM_OC3_SetConfig+0xe4>
 800c7a6:	f641 410e 	movw	r1, #7182	@ 0x1c0e
 800c7aa:	4817      	ldr	r0, [pc, #92]	@ (800c808 <TIM_OC3_SetConfig+0x13c>)
 800c7ac:	f7f9 fb6a 	bl	8005e84 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c7b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c7be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	695b      	ldr	r3, [r3, #20]
 800c7c4:	011b      	lsls	r3, r3, #4
 800c7c6:	693a      	ldr	r2, [r7, #16]
 800c7c8:	4313      	orrs	r3, r2
 800c7ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	699b      	ldr	r3, [r3, #24]
 800c7d0:	011b      	lsls	r3, r3, #4
 800c7d2:	693a      	ldr	r2, [r7, #16]
 800c7d4:	4313      	orrs	r3, r2
 800c7d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	693a      	ldr	r2, [r7, #16]
 800c7dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	68fa      	ldr	r2, [r7, #12]
 800c7e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	685a      	ldr	r2, [r3, #4]
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	697a      	ldr	r2, [r7, #20]
 800c7f0:	621a      	str	r2, [r3, #32]
}
 800c7f2:	bf00      	nop
 800c7f4:	3718      	adds	r7, #24
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}
 800c7fa:	bf00      	nop
 800c7fc:	fffeff8f 	.word	0xfffeff8f
 800c800:	40010000 	.word	0x40010000
 800c804:	40010400 	.word	0x40010400
 800c808:	08017b6c 	.word	0x08017b6c

0800c80c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b086      	sub	sp, #24
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
 800c814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6a1b      	ldr	r3, [r3, #32]
 800c81a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6a1b      	ldr	r3, [r3, #32]
 800c820:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	685b      	ldr	r3, [r3, #4]
 800c82c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	69db      	ldr	r3, [r3, #28]
 800c832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c834:	68fa      	ldr	r2, [r7, #12]
 800c836:	4b24      	ldr	r3, [pc, #144]	@ (800c8c8 <TIM_OC4_SetConfig+0xbc>)
 800c838:	4013      	ands	r3, r2
 800c83a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	021b      	lsls	r3, r3, #8
 800c84a:	68fa      	ldr	r2, [r7, #12]
 800c84c:	4313      	orrs	r3, r2
 800c84e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c856:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	689b      	ldr	r3, [r3, #8]
 800c85c:	031b      	lsls	r3, r3, #12
 800c85e:	693a      	ldr	r2, [r7, #16]
 800c860:	4313      	orrs	r3, r2
 800c862:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	4a19      	ldr	r2, [pc, #100]	@ (800c8cc <TIM_OC4_SetConfig+0xc0>)
 800c868:	4293      	cmp	r3, r2
 800c86a:	d003      	beq.n	800c874 <TIM_OC4_SetConfig+0x68>
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	4a18      	ldr	r2, [pc, #96]	@ (800c8d0 <TIM_OC4_SetConfig+0xc4>)
 800c870:	4293      	cmp	r3, r2
 800c872:	d117      	bne.n	800c8a4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	695b      	ldr	r3, [r3, #20]
 800c878:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c87c:	d008      	beq.n	800c890 <TIM_OC4_SetConfig+0x84>
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	695b      	ldr	r3, [r3, #20]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d004      	beq.n	800c890 <TIM_OC4_SetConfig+0x84>
 800c886:	f641 414d 	movw	r1, #7245	@ 0x1c4d
 800c88a:	4812      	ldr	r0, [pc, #72]	@ (800c8d4 <TIM_OC4_SetConfig+0xc8>)
 800c88c:	f7f9 fafa 	bl	8005e84 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c896:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	695b      	ldr	r3, [r3, #20]
 800c89c:	019b      	lsls	r3, r3, #6
 800c89e:	697a      	ldr	r2, [r7, #20]
 800c8a0:	4313      	orrs	r3, r2
 800c8a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	697a      	ldr	r2, [r7, #20]
 800c8a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	68fa      	ldr	r2, [r7, #12]
 800c8ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	685a      	ldr	r2, [r3, #4]
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	693a      	ldr	r2, [r7, #16]
 800c8bc:	621a      	str	r2, [r3, #32]
}
 800c8be:	bf00      	nop
 800c8c0:	3718      	adds	r7, #24
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	feff8fff 	.word	0xfeff8fff
 800c8cc:	40010000 	.word	0x40010000
 800c8d0:	40010400 	.word	0x40010400
 800c8d4:	08017b6c 	.word	0x08017b6c

0800c8d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b087      	sub	sp, #28
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
 800c8e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6a1b      	ldr	r3, [r3, #32]
 800c8e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6a1b      	ldr	r3, [r3, #32]
 800c8ec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c8fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c900:	68fa      	ldr	r2, [r7, #12]
 800c902:	4b1b      	ldr	r3, [pc, #108]	@ (800c970 <TIM_OC5_SetConfig+0x98>)
 800c904:	4013      	ands	r3, r2
 800c906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	68fa      	ldr	r2, [r7, #12]
 800c90e:	4313      	orrs	r3, r2
 800c910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c918:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	689b      	ldr	r3, [r3, #8]
 800c91e:	041b      	lsls	r3, r3, #16
 800c920:	693a      	ldr	r2, [r7, #16]
 800c922:	4313      	orrs	r3, r2
 800c924:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	4a12      	ldr	r2, [pc, #72]	@ (800c974 <TIM_OC5_SetConfig+0x9c>)
 800c92a:	4293      	cmp	r3, r2
 800c92c:	d003      	beq.n	800c936 <TIM_OC5_SetConfig+0x5e>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	4a11      	ldr	r2, [pc, #68]	@ (800c978 <TIM_OC5_SetConfig+0xa0>)
 800c932:	4293      	cmp	r3, r2
 800c934:	d109      	bne.n	800c94a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c93c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	695b      	ldr	r3, [r3, #20]
 800c942:	021b      	lsls	r3, r3, #8
 800c944:	697a      	ldr	r2, [r7, #20]
 800c946:	4313      	orrs	r3, r2
 800c948:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	697a      	ldr	r2, [r7, #20]
 800c94e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	68fa      	ldr	r2, [r7, #12]
 800c954:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	685a      	ldr	r2, [r3, #4]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	693a      	ldr	r2, [r7, #16]
 800c962:	621a      	str	r2, [r3, #32]
}
 800c964:	bf00      	nop
 800c966:	371c      	adds	r7, #28
 800c968:	46bd      	mov	sp, r7
 800c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96e:	4770      	bx	lr
 800c970:	fffeff8f 	.word	0xfffeff8f
 800c974:	40010000 	.word	0x40010000
 800c978:	40010400 	.word	0x40010400

0800c97c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b087      	sub	sp, #28
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6a1b      	ldr	r3, [r3, #32]
 800c98a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6a1b      	ldr	r3, [r3, #32]
 800c990:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c9a4:	68fa      	ldr	r2, [r7, #12]
 800c9a6:	4b1c      	ldr	r3, [pc, #112]	@ (800ca18 <TIM_OC6_SetConfig+0x9c>)
 800c9a8:	4013      	ands	r3, r2
 800c9aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	021b      	lsls	r3, r3, #8
 800c9b2:	68fa      	ldr	r2, [r7, #12]
 800c9b4:	4313      	orrs	r3, r2
 800c9b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c9be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	689b      	ldr	r3, [r3, #8]
 800c9c4:	051b      	lsls	r3, r3, #20
 800c9c6:	693a      	ldr	r2, [r7, #16]
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	4a13      	ldr	r2, [pc, #76]	@ (800ca1c <TIM_OC6_SetConfig+0xa0>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d003      	beq.n	800c9dc <TIM_OC6_SetConfig+0x60>
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	4a12      	ldr	r2, [pc, #72]	@ (800ca20 <TIM_OC6_SetConfig+0xa4>)
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d109      	bne.n	800c9f0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c9e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	695b      	ldr	r3, [r3, #20]
 800c9e8:	029b      	lsls	r3, r3, #10
 800c9ea:	697a      	ldr	r2, [r7, #20]
 800c9ec:	4313      	orrs	r3, r2
 800c9ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	697a      	ldr	r2, [r7, #20]
 800c9f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	68fa      	ldr	r2, [r7, #12]
 800c9fa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	685a      	ldr	r2, [r3, #4]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	693a      	ldr	r2, [r7, #16]
 800ca08:	621a      	str	r2, [r3, #32]
}
 800ca0a:	bf00      	nop
 800ca0c:	371c      	adds	r7, #28
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca14:	4770      	bx	lr
 800ca16:	bf00      	nop
 800ca18:	feff8fff 	.word	0xfeff8fff
 800ca1c:	40010000 	.word	0x40010000
 800ca20:	40010400 	.word	0x40010400

0800ca24 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b086      	sub	sp, #24
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	689b      	ldr	r3, [r3, #8]
 800ca38:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca40:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	685b      	ldr	r3, [r3, #4]
 800ca46:	693a      	ldr	r2, [r7, #16]
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800ca4c:	693a      	ldr	r2, [r7, #16]
 800ca4e:	4b8f      	ldr	r3, [pc, #572]	@ (800cc8c <TIM_SlaveTimer_SetConfig+0x268>)
 800ca50:	4013      	ands	r3, r2
 800ca52:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	693a      	ldr	r2, [r7, #16]
 800ca5a:	4313      	orrs	r3, r2
 800ca5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	693a      	ldr	r2, [r7, #16]
 800ca64:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	685b      	ldr	r3, [r3, #4]
 800ca6a:	2b70      	cmp	r3, #112	@ 0x70
 800ca6c:	d027      	beq.n	800cabe <TIM_SlaveTimer_SetConfig+0x9a>
 800ca6e:	2b70      	cmp	r3, #112	@ 0x70
 800ca70:	f200 821c 	bhi.w	800ceac <TIM_SlaveTimer_SetConfig+0x488>
 800ca74:	2b60      	cmp	r3, #96	@ 0x60
 800ca76:	f000 8191 	beq.w	800cd9c <TIM_SlaveTimer_SetConfig+0x378>
 800ca7a:	2b60      	cmp	r3, #96	@ 0x60
 800ca7c:	f200 8216 	bhi.w	800ceac <TIM_SlaveTimer_SetConfig+0x488>
 800ca80:	2b50      	cmp	r3, #80	@ 0x50
 800ca82:	f000 811d 	beq.w	800ccc0 <TIM_SlaveTimer_SetConfig+0x29c>
 800ca86:	2b50      	cmp	r3, #80	@ 0x50
 800ca88:	f200 8210 	bhi.w	800ceac <TIM_SlaveTimer_SetConfig+0x488>
 800ca8c:	2b40      	cmp	r3, #64	@ 0x40
 800ca8e:	f000 8089 	beq.w	800cba4 <TIM_SlaveTimer_SetConfig+0x180>
 800ca92:	2b40      	cmp	r3, #64	@ 0x40
 800ca94:	f200 820a 	bhi.w	800ceac <TIM_SlaveTimer_SetConfig+0x488>
 800ca98:	2b30      	cmp	r3, #48	@ 0x30
 800ca9a:	f000 81d9 	beq.w	800ce50 <TIM_SlaveTimer_SetConfig+0x42c>
 800ca9e:	2b30      	cmp	r3, #48	@ 0x30
 800caa0:	f200 8204 	bhi.w	800ceac <TIM_SlaveTimer_SetConfig+0x488>
 800caa4:	2b20      	cmp	r3, #32
 800caa6:	f000 81d3 	beq.w	800ce50 <TIM_SlaveTimer_SetConfig+0x42c>
 800caaa:	2b20      	cmp	r3, #32
 800caac:	f200 81fe 	bhi.w	800ceac <TIM_SlaveTimer_SetConfig+0x488>
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	f000 81cd 	beq.w	800ce50 <TIM_SlaveTimer_SetConfig+0x42c>
 800cab6:	2b10      	cmp	r3, #16
 800cab8:	f000 81ca 	beq.w	800ce50 <TIM_SlaveTimer_SetConfig+0x42c>
 800cabc:	e1f6      	b.n	800ceac <TIM_SlaveTimer_SetConfig+0x488>
  {
    case TIM_TS_ETRF:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	4a73      	ldr	r2, [pc, #460]	@ (800cc90 <TIM_SlaveTimer_SetConfig+0x26c>)
 800cac4:	4293      	cmp	r3, r2
 800cac6:	d027      	beq.n	800cb18 <TIM_SlaveTimer_SetConfig+0xf4>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cad0:	d022      	beq.n	800cb18 <TIM_SlaveTimer_SetConfig+0xf4>
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	4a6f      	ldr	r2, [pc, #444]	@ (800cc94 <TIM_SlaveTimer_SetConfig+0x270>)
 800cad8:	4293      	cmp	r3, r2
 800cada:	d01d      	beq.n	800cb18 <TIM_SlaveTimer_SetConfig+0xf4>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4a6d      	ldr	r2, [pc, #436]	@ (800cc98 <TIM_SlaveTimer_SetConfig+0x274>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d018      	beq.n	800cb18 <TIM_SlaveTimer_SetConfig+0xf4>
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	4a6c      	ldr	r2, [pc, #432]	@ (800cc9c <TIM_SlaveTimer_SetConfig+0x278>)
 800caec:	4293      	cmp	r3, r2
 800caee:	d013      	beq.n	800cb18 <TIM_SlaveTimer_SetConfig+0xf4>
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	4a6a      	ldr	r2, [pc, #424]	@ (800cca0 <TIM_SlaveTimer_SetConfig+0x27c>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d00e      	beq.n	800cb18 <TIM_SlaveTimer_SetConfig+0xf4>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	4a69      	ldr	r2, [pc, #420]	@ (800cca4 <TIM_SlaveTimer_SetConfig+0x280>)
 800cb00:	4293      	cmp	r3, r2
 800cb02:	d009      	beq.n	800cb18 <TIM_SlaveTimer_SetConfig+0xf4>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	4a67      	ldr	r2, [pc, #412]	@ (800cca8 <TIM_SlaveTimer_SetConfig+0x284>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d004      	beq.n	800cb18 <TIM_SlaveTimer_SetConfig+0xf4>
 800cb0e:	f641 41f4 	movw	r1, #7412	@ 0x1cf4
 800cb12:	4866      	ldr	r0, [pc, #408]	@ (800ccac <TIM_SlaveTimer_SetConfig+0x288>)
 800cb14:	f7f9 f9b6 	bl	8005e84 <assert_failed>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	68db      	ldr	r3, [r3, #12]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d013      	beq.n	800cb48 <TIM_SlaveTimer_SetConfig+0x124>
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	68db      	ldr	r3, [r3, #12]
 800cb24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb28:	d00e      	beq.n	800cb48 <TIM_SlaveTimer_SetConfig+0x124>
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	68db      	ldr	r3, [r3, #12]
 800cb2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cb32:	d009      	beq.n	800cb48 <TIM_SlaveTimer_SetConfig+0x124>
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	68db      	ldr	r3, [r3, #12]
 800cb38:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cb3c:	d004      	beq.n	800cb48 <TIM_SlaveTimer_SetConfig+0x124>
 800cb3e:	f641 41f5 	movw	r1, #7413	@ 0x1cf5
 800cb42:	485a      	ldr	r0, [pc, #360]	@ (800ccac <TIM_SlaveTimer_SetConfig+0x288>)
 800cb44:	f7f9 f99e 	bl	8005e84 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	689b      	ldr	r3, [r3, #8]
 800cb4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cb50:	d014      	beq.n	800cb7c <TIM_SlaveTimer_SetConfig+0x158>
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	689b      	ldr	r3, [r3, #8]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d010      	beq.n	800cb7c <TIM_SlaveTimer_SetConfig+0x158>
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	689b      	ldr	r3, [r3, #8]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d00c      	beq.n	800cb7c <TIM_SlaveTimer_SetConfig+0x158>
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	689b      	ldr	r3, [r3, #8]
 800cb66:	2b02      	cmp	r3, #2
 800cb68:	d008      	beq.n	800cb7c <TIM_SlaveTimer_SetConfig+0x158>
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	689b      	ldr	r3, [r3, #8]
 800cb6e:	2b0a      	cmp	r3, #10
 800cb70:	d004      	beq.n	800cb7c <TIM_SlaveTimer_SetConfig+0x158>
 800cb72:	f641 41f6 	movw	r1, #7414	@ 0x1cf6
 800cb76:	484d      	ldr	r0, [pc, #308]	@ (800ccac <TIM_SlaveTimer_SetConfig+0x288>)
 800cb78:	f7f9 f984 	bl	8005e84 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	691b      	ldr	r3, [r3, #16]
 800cb80:	2b0f      	cmp	r3, #15
 800cb82:	d904      	bls.n	800cb8e <TIM_SlaveTimer_SetConfig+0x16a>
 800cb84:	f641 41f7 	movw	r1, #7415	@ 0x1cf7
 800cb88:	4848      	ldr	r0, [pc, #288]	@ (800ccac <TIM_SlaveTimer_SetConfig+0x288>)
 800cb8a:	f7f9 f97b 	bl	8005e84 <assert_failed>
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800cb9e:	f000 fa21 	bl	800cfe4 <TIM_ETR_SetConfig>
      break;
 800cba2:	e187      	b.n	800ceb4 <TIM_SlaveTimer_SetConfig+0x490>
    }

    case TIM_TS_TI1F_ED:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	4a39      	ldr	r2, [pc, #228]	@ (800cc90 <TIM_SlaveTimer_SetConfig+0x26c>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d03b      	beq.n	800cc26 <TIM_SlaveTimer_SetConfig+0x202>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cbb6:	d036      	beq.n	800cc26 <TIM_SlaveTimer_SetConfig+0x202>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	4a35      	ldr	r2, [pc, #212]	@ (800cc94 <TIM_SlaveTimer_SetConfig+0x270>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d031      	beq.n	800cc26 <TIM_SlaveTimer_SetConfig+0x202>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	4a34      	ldr	r2, [pc, #208]	@ (800cc98 <TIM_SlaveTimer_SetConfig+0x274>)
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	d02c      	beq.n	800cc26 <TIM_SlaveTimer_SetConfig+0x202>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	4a32      	ldr	r2, [pc, #200]	@ (800cc9c <TIM_SlaveTimer_SetConfig+0x278>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d027      	beq.n	800cc26 <TIM_SlaveTimer_SetConfig+0x202>
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4a31      	ldr	r2, [pc, #196]	@ (800cca0 <TIM_SlaveTimer_SetConfig+0x27c>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d022      	beq.n	800cc26 <TIM_SlaveTimer_SetConfig+0x202>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a2f      	ldr	r2, [pc, #188]	@ (800cca4 <TIM_SlaveTimer_SetConfig+0x280>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d01d      	beq.n	800cc26 <TIM_SlaveTimer_SetConfig+0x202>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	4a30      	ldr	r2, [pc, #192]	@ (800ccb0 <TIM_SlaveTimer_SetConfig+0x28c>)
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d018      	beq.n	800cc26 <TIM_SlaveTimer_SetConfig+0x202>
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	4a2e      	ldr	r2, [pc, #184]	@ (800ccb4 <TIM_SlaveTimer_SetConfig+0x290>)
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d013      	beq.n	800cc26 <TIM_SlaveTimer_SetConfig+0x202>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4a29      	ldr	r2, [pc, #164]	@ (800cca8 <TIM_SlaveTimer_SetConfig+0x284>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d00e      	beq.n	800cc26 <TIM_SlaveTimer_SetConfig+0x202>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4a2a      	ldr	r2, [pc, #168]	@ (800ccb8 <TIM_SlaveTimer_SetConfig+0x294>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d009      	beq.n	800cc26 <TIM_SlaveTimer_SetConfig+0x202>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4a29      	ldr	r2, [pc, #164]	@ (800ccbc <TIM_SlaveTimer_SetConfig+0x298>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d004      	beq.n	800cc26 <TIM_SlaveTimer_SetConfig+0x202>
 800cc1c:	f641 5103 	movw	r1, #7427	@ 0x1d03
 800cc20:	4822      	ldr	r0, [pc, #136]	@ (800ccac <TIM_SlaveTimer_SetConfig+0x288>)
 800cc22:	f7f9 f92f 	bl	8005e84 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	691b      	ldr	r3, [r3, #16]
 800cc2a:	2b0f      	cmp	r3, #15
 800cc2c:	d904      	bls.n	800cc38 <TIM_SlaveTimer_SetConfig+0x214>
 800cc2e:	f641 5104 	movw	r1, #7428	@ 0x1d04
 800cc32:	481e      	ldr	r0, [pc, #120]	@ (800ccac <TIM_SlaveTimer_SetConfig+0x288>)
 800cc34:	f7f9 f926 	bl	8005e84 <assert_failed>

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	2b05      	cmp	r3, #5
 800cc3e:	d101      	bne.n	800cc44 <TIM_SlaveTimer_SetConfig+0x220>
      {
        return HAL_ERROR;
 800cc40:	2301      	movs	r3, #1
 800cc42:	e138      	b.n	800ceb6 <TIM_SlaveTimer_SetConfig+0x492>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	6a1b      	ldr	r3, [r3, #32]
 800cc4a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	6a1a      	ldr	r2, [r3, #32]
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f022 0201 	bic.w	r2, r2, #1
 800cc5a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	699b      	ldr	r3, [r3, #24]
 800cc62:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cc6a:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	691b      	ldr	r3, [r3, #16]
 800cc70:	011b      	lsls	r3, r3, #4
 800cc72:	68ba      	ldr	r2, [r7, #8]
 800cc74:	4313      	orrs	r3, r2
 800cc76:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	68ba      	ldr	r2, [r7, #8]
 800cc7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	68fa      	ldr	r2, [r7, #12]
 800cc86:	621a      	str	r2, [r3, #32]
      break;
 800cc88:	e114      	b.n	800ceb4 <TIM_SlaveTimer_SetConfig+0x490>
 800cc8a:	bf00      	nop
 800cc8c:	fffefff8 	.word	0xfffefff8
 800cc90:	40010000 	.word	0x40010000
 800cc94:	40000400 	.word	0x40000400
 800cc98:	40000800 	.word	0x40000800
 800cc9c:	40000c00 	.word	0x40000c00
 800cca0:	40010400 	.word	0x40010400
 800cca4:	40014000 	.word	0x40014000
 800cca8:	40001800 	.word	0x40001800
 800ccac:	08017b6c 	.word	0x08017b6c
 800ccb0:	40014400 	.word	0x40014400
 800ccb4:	40014800 	.word	0x40014800
 800ccb8:	40001c00 	.word	0x40001c00
 800ccbc:	40002000 	.word	0x40002000
    }

    case TIM_TS_TI1FP1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4a7e      	ldr	r2, [pc, #504]	@ (800cec0 <TIM_SlaveTimer_SetConfig+0x49c>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d03b      	beq.n	800cd42 <TIM_SlaveTimer_SetConfig+0x31e>
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ccd2:	d036      	beq.n	800cd42 <TIM_SlaveTimer_SetConfig+0x31e>
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	4a7a      	ldr	r2, [pc, #488]	@ (800cec4 <TIM_SlaveTimer_SetConfig+0x4a0>)
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d031      	beq.n	800cd42 <TIM_SlaveTimer_SetConfig+0x31e>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	4a79      	ldr	r2, [pc, #484]	@ (800cec8 <TIM_SlaveTimer_SetConfig+0x4a4>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d02c      	beq.n	800cd42 <TIM_SlaveTimer_SetConfig+0x31e>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	4a77      	ldr	r2, [pc, #476]	@ (800cecc <TIM_SlaveTimer_SetConfig+0x4a8>)
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d027      	beq.n	800cd42 <TIM_SlaveTimer_SetConfig+0x31e>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4a76      	ldr	r2, [pc, #472]	@ (800ced0 <TIM_SlaveTimer_SetConfig+0x4ac>)
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d022      	beq.n	800cd42 <TIM_SlaveTimer_SetConfig+0x31e>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4a74      	ldr	r2, [pc, #464]	@ (800ced4 <TIM_SlaveTimer_SetConfig+0x4b0>)
 800cd02:	4293      	cmp	r3, r2
 800cd04:	d01d      	beq.n	800cd42 <TIM_SlaveTimer_SetConfig+0x31e>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	4a73      	ldr	r2, [pc, #460]	@ (800ced8 <TIM_SlaveTimer_SetConfig+0x4b4>)
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d018      	beq.n	800cd42 <TIM_SlaveTimer_SetConfig+0x31e>
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	4a71      	ldr	r2, [pc, #452]	@ (800cedc <TIM_SlaveTimer_SetConfig+0x4b8>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d013      	beq.n	800cd42 <TIM_SlaveTimer_SetConfig+0x31e>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	4a70      	ldr	r2, [pc, #448]	@ (800cee0 <TIM_SlaveTimer_SetConfig+0x4bc>)
 800cd20:	4293      	cmp	r3, r2
 800cd22:	d00e      	beq.n	800cd42 <TIM_SlaveTimer_SetConfig+0x31e>
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	4a6e      	ldr	r2, [pc, #440]	@ (800cee4 <TIM_SlaveTimer_SetConfig+0x4c0>)
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d009      	beq.n	800cd42 <TIM_SlaveTimer_SetConfig+0x31e>
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4a6d      	ldr	r2, [pc, #436]	@ (800cee8 <TIM_SlaveTimer_SetConfig+0x4c4>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d004      	beq.n	800cd42 <TIM_SlaveTimer_SetConfig+0x31e>
 800cd38:	f641 511d 	movw	r1, #7453	@ 0x1d1d
 800cd3c:	486b      	ldr	r0, [pc, #428]	@ (800ceec <TIM_SlaveTimer_SetConfig+0x4c8>)
 800cd3e:	f7f9 f8a1 	bl	8005e84 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	689b      	ldr	r3, [r3, #8]
 800cd46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cd4a:	d014      	beq.n	800cd76 <TIM_SlaveTimer_SetConfig+0x352>
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	689b      	ldr	r3, [r3, #8]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d010      	beq.n	800cd76 <TIM_SlaveTimer_SetConfig+0x352>
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	689b      	ldr	r3, [r3, #8]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d00c      	beq.n	800cd76 <TIM_SlaveTimer_SetConfig+0x352>
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	689b      	ldr	r3, [r3, #8]
 800cd60:	2b02      	cmp	r3, #2
 800cd62:	d008      	beq.n	800cd76 <TIM_SlaveTimer_SetConfig+0x352>
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	689b      	ldr	r3, [r3, #8]
 800cd68:	2b0a      	cmp	r3, #10
 800cd6a:	d004      	beq.n	800cd76 <TIM_SlaveTimer_SetConfig+0x352>
 800cd6c:	f641 511e 	movw	r1, #7454	@ 0x1d1e
 800cd70:	485e      	ldr	r0, [pc, #376]	@ (800ceec <TIM_SlaveTimer_SetConfig+0x4c8>)
 800cd72:	f7f9 f887 	bl	8005e84 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	691b      	ldr	r3, [r3, #16]
 800cd7a:	2b0f      	cmp	r3, #15
 800cd7c:	d904      	bls.n	800cd88 <TIM_SlaveTimer_SetConfig+0x364>
 800cd7e:	f641 511f 	movw	r1, #7455	@ 0x1d1f
 800cd82:	485a      	ldr	r0, [pc, #360]	@ (800ceec <TIM_SlaveTimer_SetConfig+0x4c8>)
 800cd84:	f7f9 f87e 	bl	8005e84 <assert_failed>

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd94:	461a      	mov	r2, r3
 800cd96:	f000 f8ab 	bl	800cef0 <TIM_TI1_ConfigInputStage>
      break;
 800cd9a:	e08b      	b.n	800ceb4 <TIM_SlaveTimer_SetConfig+0x490>
    }

    case TIM_TS_TI2FP2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4a47      	ldr	r2, [pc, #284]	@ (800cec0 <TIM_SlaveTimer_SetConfig+0x49c>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d027      	beq.n	800cdf6 <TIM_SlaveTimer_SetConfig+0x3d2>
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cdae:	d022      	beq.n	800cdf6 <TIM_SlaveTimer_SetConfig+0x3d2>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	4a43      	ldr	r2, [pc, #268]	@ (800cec4 <TIM_SlaveTimer_SetConfig+0x4a0>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d01d      	beq.n	800cdf6 <TIM_SlaveTimer_SetConfig+0x3d2>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	4a42      	ldr	r2, [pc, #264]	@ (800cec8 <TIM_SlaveTimer_SetConfig+0x4a4>)
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	d018      	beq.n	800cdf6 <TIM_SlaveTimer_SetConfig+0x3d2>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	4a40      	ldr	r2, [pc, #256]	@ (800cecc <TIM_SlaveTimer_SetConfig+0x4a8>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d013      	beq.n	800cdf6 <TIM_SlaveTimer_SetConfig+0x3d2>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	4a3f      	ldr	r2, [pc, #252]	@ (800ced0 <TIM_SlaveTimer_SetConfig+0x4ac>)
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	d00e      	beq.n	800cdf6 <TIM_SlaveTimer_SetConfig+0x3d2>
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	4a3d      	ldr	r2, [pc, #244]	@ (800ced4 <TIM_SlaveTimer_SetConfig+0x4b0>)
 800cdde:	4293      	cmp	r3, r2
 800cde0:	d009      	beq.n	800cdf6 <TIM_SlaveTimer_SetConfig+0x3d2>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	4a3e      	ldr	r2, [pc, #248]	@ (800cee0 <TIM_SlaveTimer_SetConfig+0x4bc>)
 800cde8:	4293      	cmp	r3, r2
 800cdea:	d004      	beq.n	800cdf6 <TIM_SlaveTimer_SetConfig+0x3d2>
 800cdec:	f641 512b 	movw	r1, #7467	@ 0x1d2b
 800cdf0:	483e      	ldr	r0, [pc, #248]	@ (800ceec <TIM_SlaveTimer_SetConfig+0x4c8>)
 800cdf2:	f7f9 f847 	bl	8005e84 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	689b      	ldr	r3, [r3, #8]
 800cdfa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cdfe:	d014      	beq.n	800ce2a <TIM_SlaveTimer_SetConfig+0x406>
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	689b      	ldr	r3, [r3, #8]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d010      	beq.n	800ce2a <TIM_SlaveTimer_SetConfig+0x406>
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	689b      	ldr	r3, [r3, #8]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d00c      	beq.n	800ce2a <TIM_SlaveTimer_SetConfig+0x406>
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	689b      	ldr	r3, [r3, #8]
 800ce14:	2b02      	cmp	r3, #2
 800ce16:	d008      	beq.n	800ce2a <TIM_SlaveTimer_SetConfig+0x406>
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	689b      	ldr	r3, [r3, #8]
 800ce1c:	2b0a      	cmp	r3, #10
 800ce1e:	d004      	beq.n	800ce2a <TIM_SlaveTimer_SetConfig+0x406>
 800ce20:	f641 512c 	movw	r1, #7468	@ 0x1d2c
 800ce24:	4831      	ldr	r0, [pc, #196]	@ (800ceec <TIM_SlaveTimer_SetConfig+0x4c8>)
 800ce26:	f7f9 f82d 	bl	8005e84 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	691b      	ldr	r3, [r3, #16]
 800ce2e:	2b0f      	cmp	r3, #15
 800ce30:	d904      	bls.n	800ce3c <TIM_SlaveTimer_SetConfig+0x418>
 800ce32:	f641 512d 	movw	r1, #7469	@ 0x1d2d
 800ce36:	482d      	ldr	r0, [pc, #180]	@ (800ceec <TIM_SlaveTimer_SetConfig+0x4c8>)
 800ce38:	f7f9 f824 	bl	8005e84 <assert_failed>

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ce48:	461a      	mov	r2, r3
 800ce4a:	f000 f880 	bl	800cf4e <TIM_TI2_ConfigInputStage>
      break;
 800ce4e:	e031      	b.n	800ceb4 <TIM_SlaveTimer_SetConfig+0x490>
    case TIM_TS_ITR1:
    case TIM_TS_ITR2:
    case TIM_TS_ITR3:
    {
      /* Check the parameter */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	4a1a      	ldr	r2, [pc, #104]	@ (800cec0 <TIM_SlaveTimer_SetConfig+0x49c>)
 800ce56:	4293      	cmp	r3, r2
 800ce58:	d02b      	beq.n	800ceb2 <TIM_SlaveTimer_SetConfig+0x48e>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce62:	d026      	beq.n	800ceb2 <TIM_SlaveTimer_SetConfig+0x48e>
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	4a16      	ldr	r2, [pc, #88]	@ (800cec4 <TIM_SlaveTimer_SetConfig+0x4a0>)
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d021      	beq.n	800ceb2 <TIM_SlaveTimer_SetConfig+0x48e>
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	4a15      	ldr	r2, [pc, #84]	@ (800cec8 <TIM_SlaveTimer_SetConfig+0x4a4>)
 800ce74:	4293      	cmp	r3, r2
 800ce76:	d01c      	beq.n	800ceb2 <TIM_SlaveTimer_SetConfig+0x48e>
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	4a13      	ldr	r2, [pc, #76]	@ (800cecc <TIM_SlaveTimer_SetConfig+0x4a8>)
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	d017      	beq.n	800ceb2 <TIM_SlaveTimer_SetConfig+0x48e>
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	4a12      	ldr	r2, [pc, #72]	@ (800ced0 <TIM_SlaveTimer_SetConfig+0x4ac>)
 800ce88:	4293      	cmp	r3, r2
 800ce8a:	d012      	beq.n	800ceb2 <TIM_SlaveTimer_SetConfig+0x48e>
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	4a10      	ldr	r2, [pc, #64]	@ (800ced4 <TIM_SlaveTimer_SetConfig+0x4b0>)
 800ce92:	4293      	cmp	r3, r2
 800ce94:	d00d      	beq.n	800ceb2 <TIM_SlaveTimer_SetConfig+0x48e>
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	4a11      	ldr	r2, [pc, #68]	@ (800cee0 <TIM_SlaveTimer_SetConfig+0x4bc>)
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	d008      	beq.n	800ceb2 <TIM_SlaveTimer_SetConfig+0x48e>
 800cea0:	f641 513c 	movw	r1, #7484	@ 0x1d3c
 800cea4:	4811      	ldr	r0, [pc, #68]	@ (800ceec <TIM_SlaveTimer_SetConfig+0x4c8>)
 800cea6:	f7f8 ffed 	bl	8005e84 <assert_failed>
      break;
 800ceaa:	e002      	b.n	800ceb2 <TIM_SlaveTimer_SetConfig+0x48e>
    }

    default:
      status = HAL_ERROR;
 800ceac:	2301      	movs	r3, #1
 800ceae:	75fb      	strb	r3, [r7, #23]
      break;
 800ceb0:	e000      	b.n	800ceb4 <TIM_SlaveTimer_SetConfig+0x490>
      break;
 800ceb2:	bf00      	nop
  }

  return status;
 800ceb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3718      	adds	r7, #24
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
 800cebe:	bf00      	nop
 800cec0:	40010000 	.word	0x40010000
 800cec4:	40000400 	.word	0x40000400
 800cec8:	40000800 	.word	0x40000800
 800cecc:	40000c00 	.word	0x40000c00
 800ced0:	40010400 	.word	0x40010400
 800ced4:	40014000 	.word	0x40014000
 800ced8:	40014400 	.word	0x40014400
 800cedc:	40014800 	.word	0x40014800
 800cee0:	40001800 	.word	0x40001800
 800cee4:	40001c00 	.word	0x40001c00
 800cee8:	40002000 	.word	0x40002000
 800ceec:	08017b6c 	.word	0x08017b6c

0800cef0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cef0:	b480      	push	{r7}
 800cef2:	b087      	sub	sp, #28
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	60f8      	str	r0, [r7, #12]
 800cef8:	60b9      	str	r1, [r7, #8]
 800cefa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	6a1b      	ldr	r3, [r3, #32]
 800cf00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	6a1b      	ldr	r3, [r3, #32]
 800cf06:	f023 0201 	bic.w	r2, r3, #1
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	699b      	ldr	r3, [r3, #24]
 800cf12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cf1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	011b      	lsls	r3, r3, #4
 800cf20:	693a      	ldr	r2, [r7, #16]
 800cf22:	4313      	orrs	r3, r2
 800cf24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	f023 030a 	bic.w	r3, r3, #10
 800cf2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cf2e:	697a      	ldr	r2, [r7, #20]
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	4313      	orrs	r3, r2
 800cf34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	693a      	ldr	r2, [r7, #16]
 800cf3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	697a      	ldr	r2, [r7, #20]
 800cf40:	621a      	str	r2, [r3, #32]
}
 800cf42:	bf00      	nop
 800cf44:	371c      	adds	r7, #28
 800cf46:	46bd      	mov	sp, r7
 800cf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4c:	4770      	bx	lr

0800cf4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cf4e:	b480      	push	{r7}
 800cf50:	b087      	sub	sp, #28
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	60f8      	str	r0, [r7, #12]
 800cf56:	60b9      	str	r1, [r7, #8]
 800cf58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	6a1b      	ldr	r3, [r3, #32]
 800cf5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	6a1b      	ldr	r3, [r3, #32]
 800cf64:	f023 0210 	bic.w	r2, r3, #16
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	699b      	ldr	r3, [r3, #24]
 800cf70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cf72:	693b      	ldr	r3, [r7, #16]
 800cf74:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cf78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	031b      	lsls	r3, r3, #12
 800cf7e:	693a      	ldr	r2, [r7, #16]
 800cf80:	4313      	orrs	r3, r2
 800cf82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cf8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	011b      	lsls	r3, r3, #4
 800cf90:	697a      	ldr	r2, [r7, #20]
 800cf92:	4313      	orrs	r3, r2
 800cf94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	693a      	ldr	r2, [r7, #16]
 800cf9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	697a      	ldr	r2, [r7, #20]
 800cfa0:	621a      	str	r2, [r3, #32]
}
 800cfa2:	bf00      	nop
 800cfa4:	371c      	adds	r7, #28
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfac:	4770      	bx	lr

0800cfae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cfae:	b480      	push	{r7}
 800cfb0:	b085      	sub	sp, #20
 800cfb2:	af00      	add	r7, sp, #0
 800cfb4:	6078      	str	r0, [r7, #4]
 800cfb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	689b      	ldr	r3, [r3, #8]
 800cfbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cfc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cfc6:	683a      	ldr	r2, [r7, #0]
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	4313      	orrs	r3, r2
 800cfcc:	f043 0307 	orr.w	r3, r3, #7
 800cfd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	68fa      	ldr	r2, [r7, #12]
 800cfd6:	609a      	str	r2, [r3, #8]
}
 800cfd8:	bf00      	nop
 800cfda:	3714      	adds	r7, #20
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe2:	4770      	bx	lr

0800cfe4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b087      	sub	sp, #28
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	60f8      	str	r0, [r7, #12]
 800cfec:	60b9      	str	r1, [r7, #8]
 800cfee:	607a      	str	r2, [r7, #4]
 800cff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	689b      	ldr	r3, [r3, #8]
 800cff6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cffe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	021a      	lsls	r2, r3, #8
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	431a      	orrs	r2, r3
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	4313      	orrs	r3, r2
 800d00c:	697a      	ldr	r2, [r7, #20]
 800d00e:	4313      	orrs	r3, r2
 800d010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	697a      	ldr	r2, [r7, #20]
 800d016:	609a      	str	r2, [r3, #8]
}
 800d018:	bf00      	nop
 800d01a:	371c      	adds	r7, #28
 800d01c:	46bd      	mov	sp, r7
 800d01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d022:	4770      	bx	lr

0800d024 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b086      	sub	sp, #24
 800d028:	af00      	add	r7, sp, #0
 800d02a:	60f8      	str	r0, [r7, #12]
 800d02c:	60b9      	str	r1, [r7, #8]
 800d02e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	4a35      	ldr	r2, [pc, #212]	@ (800d108 <TIM_CCxChannelCmd+0xe4>)
 800d034:	4293      	cmp	r3, r2
 800d036:	d030      	beq.n	800d09a <TIM_CCxChannelCmd+0x76>
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d03e:	d02c      	beq.n	800d09a <TIM_CCxChannelCmd+0x76>
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	4a32      	ldr	r2, [pc, #200]	@ (800d10c <TIM_CCxChannelCmd+0xe8>)
 800d044:	4293      	cmp	r3, r2
 800d046:	d028      	beq.n	800d09a <TIM_CCxChannelCmd+0x76>
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	4a31      	ldr	r2, [pc, #196]	@ (800d110 <TIM_CCxChannelCmd+0xec>)
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d024      	beq.n	800d09a <TIM_CCxChannelCmd+0x76>
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	4a30      	ldr	r2, [pc, #192]	@ (800d114 <TIM_CCxChannelCmd+0xf0>)
 800d054:	4293      	cmp	r3, r2
 800d056:	d020      	beq.n	800d09a <TIM_CCxChannelCmd+0x76>
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	4a2f      	ldr	r2, [pc, #188]	@ (800d118 <TIM_CCxChannelCmd+0xf4>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d01c      	beq.n	800d09a <TIM_CCxChannelCmd+0x76>
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	4a2e      	ldr	r2, [pc, #184]	@ (800d11c <TIM_CCxChannelCmd+0xf8>)
 800d064:	4293      	cmp	r3, r2
 800d066:	d018      	beq.n	800d09a <TIM_CCxChannelCmd+0x76>
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	4a2d      	ldr	r2, [pc, #180]	@ (800d120 <TIM_CCxChannelCmd+0xfc>)
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d014      	beq.n	800d09a <TIM_CCxChannelCmd+0x76>
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	4a2c      	ldr	r2, [pc, #176]	@ (800d124 <TIM_CCxChannelCmd+0x100>)
 800d074:	4293      	cmp	r3, r2
 800d076:	d010      	beq.n	800d09a <TIM_CCxChannelCmd+0x76>
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	4a2b      	ldr	r2, [pc, #172]	@ (800d128 <TIM_CCxChannelCmd+0x104>)
 800d07c:	4293      	cmp	r3, r2
 800d07e:	d00c      	beq.n	800d09a <TIM_CCxChannelCmd+0x76>
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	4a2a      	ldr	r2, [pc, #168]	@ (800d12c <TIM_CCxChannelCmd+0x108>)
 800d084:	4293      	cmp	r3, r2
 800d086:	d008      	beq.n	800d09a <TIM_CCxChannelCmd+0x76>
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	4a29      	ldr	r2, [pc, #164]	@ (800d130 <TIM_CCxChannelCmd+0x10c>)
 800d08c:	4293      	cmp	r3, r2
 800d08e:	d004      	beq.n	800d09a <TIM_CCxChannelCmd+0x76>
 800d090:	f641 61a7 	movw	r1, #7847	@ 0x1ea7
 800d094:	4827      	ldr	r0, [pc, #156]	@ (800d134 <TIM_CCxChannelCmd+0x110>)
 800d096:	f7f8 fef5 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d016      	beq.n	800d0ce <TIM_CCxChannelCmd+0xaa>
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	2b04      	cmp	r3, #4
 800d0a4:	d013      	beq.n	800d0ce <TIM_CCxChannelCmd+0xaa>
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	2b08      	cmp	r3, #8
 800d0aa:	d010      	beq.n	800d0ce <TIM_CCxChannelCmd+0xaa>
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	2b0c      	cmp	r3, #12
 800d0b0:	d00d      	beq.n	800d0ce <TIM_CCxChannelCmd+0xaa>
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	2b10      	cmp	r3, #16
 800d0b6:	d00a      	beq.n	800d0ce <TIM_CCxChannelCmd+0xaa>
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	2b14      	cmp	r3, #20
 800d0bc:	d007      	beq.n	800d0ce <TIM_CCxChannelCmd+0xaa>
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	2b3c      	cmp	r3, #60	@ 0x3c
 800d0c2:	d004      	beq.n	800d0ce <TIM_CCxChannelCmd+0xaa>
 800d0c4:	f641 61a8 	movw	r1, #7848	@ 0x1ea8
 800d0c8:	481a      	ldr	r0, [pc, #104]	@ (800d134 <TIM_CCxChannelCmd+0x110>)
 800d0ca:	f7f8 fedb 	bl	8005e84 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d0ce:	68bb      	ldr	r3, [r7, #8]
 800d0d0:	f003 031f 	and.w	r3, r3, #31
 800d0d4:	2201      	movs	r2, #1
 800d0d6:	fa02 f303 	lsl.w	r3, r2, r3
 800d0da:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	6a1a      	ldr	r2, [r3, #32]
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	43db      	mvns	r3, r3
 800d0e4:	401a      	ands	r2, r3
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	6a1a      	ldr	r2, [r3, #32]
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	f003 031f 	and.w	r3, r3, #31
 800d0f4:	6879      	ldr	r1, [r7, #4]
 800d0f6:	fa01 f303 	lsl.w	r3, r1, r3
 800d0fa:	431a      	orrs	r2, r3
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	621a      	str	r2, [r3, #32]
}
 800d100:	bf00      	nop
 800d102:	3718      	adds	r7, #24
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}
 800d108:	40010000 	.word	0x40010000
 800d10c:	40000400 	.word	0x40000400
 800d110:	40000800 	.word	0x40000800
 800d114:	40000c00 	.word	0x40000c00
 800d118:	40010400 	.word	0x40010400
 800d11c:	40014000 	.word	0x40014000
 800d120:	40014400 	.word	0x40014400
 800d124:	40014800 	.word	0x40014800
 800d128:	40001800 	.word	0x40001800
 800d12c:	40001c00 	.word	0x40001c00
 800d130:	40002000 	.word	0x40002000
 800d134:	08017b6c 	.word	0x08017b6c

0800d138 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b084      	sub	sp, #16
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	4a32      	ldr	r2, [pc, #200]	@ (800d210 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800d148:	4293      	cmp	r3, r2
 800d14a:	d027      	beq.n	800d19c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d154:	d022      	beq.n	800d19c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	4a2e      	ldr	r2, [pc, #184]	@ (800d214 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d01d      	beq.n	800d19c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4a2c      	ldr	r2, [pc, #176]	@ (800d218 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d018      	beq.n	800d19c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	4a2b      	ldr	r2, [pc, #172]	@ (800d21c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d170:	4293      	cmp	r3, r2
 800d172:	d013      	beq.n	800d19c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	4a29      	ldr	r2, [pc, #164]	@ (800d220 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d00e      	beq.n	800d19c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	4a28      	ldr	r2, [pc, #160]	@ (800d224 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d184:	4293      	cmp	r3, r2
 800d186:	d009      	beq.n	800d19c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	4a26      	ldr	r2, [pc, #152]	@ (800d228 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d18e:	4293      	cmp	r3, r2
 800d190:	d004      	beq.n	800d19c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800d192:	f240 71ab 	movw	r1, #1963	@ 0x7ab
 800d196:	4825      	ldr	r0, [pc, #148]	@ (800d22c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d198:	f7f8 fe74 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d020      	beq.n	800d1e6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	2b10      	cmp	r3, #16
 800d1aa:	d01c      	beq.n	800d1e6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	2b20      	cmp	r3, #32
 800d1b2:	d018      	beq.n	800d1e6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	2b30      	cmp	r3, #48	@ 0x30
 800d1ba:	d014      	beq.n	800d1e6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	2b40      	cmp	r3, #64	@ 0x40
 800d1c2:	d010      	beq.n	800d1e6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	2b50      	cmp	r3, #80	@ 0x50
 800d1ca:	d00c      	beq.n	800d1e6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	2b60      	cmp	r3, #96	@ 0x60
 800d1d2:	d008      	beq.n	800d1e6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	2b70      	cmp	r3, #112	@ 0x70
 800d1da:	d004      	beq.n	800d1e6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800d1dc:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 800d1e0:	4812      	ldr	r0, [pc, #72]	@ (800d22c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d1e2:	f7f8 fe4f 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	689b      	ldr	r3, [r3, #8]
 800d1ea:	2b80      	cmp	r3, #128	@ 0x80
 800d1ec:	d008      	beq.n	800d200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	689b      	ldr	r3, [r3, #8]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d004      	beq.n	800d200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d1f6:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 800d1fa:	480c      	ldr	r0, [pc, #48]	@ (800d22c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d1fc:	f7f8 fe42 	bl	8005e84 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d206:	2b01      	cmp	r3, #1
 800d208:	d112      	bne.n	800d230 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800d20a:	2302      	movs	r3, #2
 800d20c:	e0d7      	b.n	800d3be <HAL_TIMEx_MasterConfigSynchronization+0x286>
 800d20e:	bf00      	nop
 800d210:	40010000 	.word	0x40010000
 800d214:	40000400 	.word	0x40000400
 800d218:	40000800 	.word	0x40000800
 800d21c:	40000c00 	.word	0x40000c00
 800d220:	40001000 	.word	0x40001000
 800d224:	40001400 	.word	0x40001400
 800d228:	40010400 	.word	0x40010400
 800d22c:	08017ba4 	.word	0x08017ba4
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2201      	movs	r2, #1
 800d234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2202      	movs	r2, #2
 800d23c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	685b      	ldr	r3, [r3, #4]
 800d246:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	689b      	ldr	r3, [r3, #8]
 800d24e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	4a5c      	ldr	r2, [pc, #368]	@ (800d3c8 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800d256:	4293      	cmp	r3, r2
 800d258:	d004      	beq.n	800d264 <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	4a5b      	ldr	r2, [pc, #364]	@ (800d3cc <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800d260:	4293      	cmp	r3, r2
 800d262:	d161      	bne.n	800d328 <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	685b      	ldr	r3, [r3, #4]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d054      	beq.n	800d316 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d274:	d04f      	beq.n	800d316 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d27e:	d04a      	beq.n	800d316 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	685b      	ldr	r3, [r3, #4]
 800d284:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d288:	d045      	beq.n	800d316 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	685b      	ldr	r3, [r3, #4]
 800d28e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d292:	d040      	beq.n	800d316 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	685b      	ldr	r3, [r3, #4]
 800d298:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800d29c:	d03b      	beq.n	800d316 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	685b      	ldr	r3, [r3, #4]
 800d2a2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d2a6:	d036      	beq.n	800d316 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	685b      	ldr	r3, [r3, #4]
 800d2ac:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d2b0:	d031      	beq.n	800d316 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	685b      	ldr	r3, [r3, #4]
 800d2b6:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 800d2ba:	d02c      	beq.n	800d316 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	685b      	ldr	r3, [r3, #4]
 800d2c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d2c4:	d027      	beq.n	800d316 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	685b      	ldr	r3, [r3, #4]
 800d2ca:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 800d2ce:	d022      	beq.n	800d316 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800d2d8:	d01d      	beq.n	800d316 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	685b      	ldr	r3, [r3, #4]
 800d2de:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 800d2e2:	d018      	beq.n	800d316 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	685b      	ldr	r3, [r3, #4]
 800d2e8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d2ec:	d013      	beq.n	800d316 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 800d2f6:	d00e      	beq.n	800d316 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	685b      	ldr	r3, [r3, #4]
 800d2fc:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 800d300:	d009      	beq.n	800d316 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	685b      	ldr	r3, [r3, #4]
 800d306:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 800d30a:	d004      	beq.n	800d316 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800d30c:	f240 71bf 	movw	r1, #1983	@ 0x7bf
 800d310:	482f      	ldr	r0, [pc, #188]	@ (800d3d0 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800d312:	f7f8 fdb7 	bl	8005e84 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d31c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	685b      	ldr	r3, [r3, #4]
 800d322:	68fa      	ldr	r2, [r7, #12]
 800d324:	4313      	orrs	r3, r2
 800d326:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d32e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	68fa      	ldr	r2, [r7, #12]
 800d336:	4313      	orrs	r3, r2
 800d338:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	68fa      	ldr	r2, [r7, #12]
 800d340:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	4a20      	ldr	r2, [pc, #128]	@ (800d3c8 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800d348:	4293      	cmp	r3, r2
 800d34a:	d022      	beq.n	800d392 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d354:	d01d      	beq.n	800d392 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	4a1e      	ldr	r2, [pc, #120]	@ (800d3d4 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d018      	beq.n	800d392 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	4a1c      	ldr	r2, [pc, #112]	@ (800d3d8 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 800d366:	4293      	cmp	r3, r2
 800d368:	d013      	beq.n	800d392 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	4a1b      	ldr	r2, [pc, #108]	@ (800d3dc <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 800d370:	4293      	cmp	r3, r2
 800d372:	d00e      	beq.n	800d392 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4a14      	ldr	r2, [pc, #80]	@ (800d3cc <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800d37a:	4293      	cmp	r3, r2
 800d37c:	d009      	beq.n	800d392 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	4a17      	ldr	r2, [pc, #92]	@ (800d3e0 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 800d384:	4293      	cmp	r3, r2
 800d386:	d004      	beq.n	800d392 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	4a15      	ldr	r2, [pc, #84]	@ (800d3e4 <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 800d38e:	4293      	cmp	r3, r2
 800d390:	d10c      	bne.n	800d3ac <HAL_TIMEx_MasterConfigSynchronization+0x274>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d398:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	689b      	ldr	r3, [r3, #8]
 800d39e:	68ba      	ldr	r2, [r7, #8]
 800d3a0:	4313      	orrs	r3, r2
 800d3a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	68ba      	ldr	r2, [r7, #8]
 800d3aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d3bc:	2300      	movs	r3, #0
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3710      	adds	r7, #16
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}
 800d3c6:	bf00      	nop
 800d3c8:	40010000 	.word	0x40010000
 800d3cc:	40010400 	.word	0x40010400
 800d3d0:	08017ba4 	.word	0x08017ba4
 800d3d4:	40000400 	.word	0x40000400
 800d3d8:	40000800 	.word	0x40000800
 800d3dc:	40000c00 	.word	0x40000c00
 800d3e0:	40014000 	.word	0x40014000
 800d3e4:	40001800 	.word	0x40001800

0800d3e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b084      	sub	sp, #16
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	4a89      	ldr	r2, [pc, #548]	@ (800d620 <HAL_TIMEx_ConfigBreakDeadTime+0x238>)
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	d009      	beq.n	800d414 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	4a87      	ldr	r2, [pc, #540]	@ (800d624 <HAL_TIMEx_ConfigBreakDeadTime+0x23c>)
 800d406:	4293      	cmp	r3, r2
 800d408:	d004      	beq.n	800d414 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800d40a:	f240 71f4 	movw	r1, #2036	@ 0x7f4
 800d40e:	4886      	ldr	r0, [pc, #536]	@ (800d628 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800d410:	f7f8 fd38 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d41c:	d008      	beq.n	800d430 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d004      	beq.n	800d430 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800d426:	f240 71f5 	movw	r1, #2037	@ 0x7f5
 800d42a:	487f      	ldr	r0, [pc, #508]	@ (800d628 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800d42c:	f7f8 fd2a 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	685b      	ldr	r3, [r3, #4]
 800d434:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d438:	d008      	beq.n	800d44c <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	685b      	ldr	r3, [r3, #4]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d004      	beq.n	800d44c <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800d442:	f240 71f6 	movw	r1, #2038	@ 0x7f6
 800d446:	4878      	ldr	r0, [pc, #480]	@ (800d628 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800d448:	f7f8 fd1c 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	689b      	ldr	r3, [r3, #8]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d013      	beq.n	800d47c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	689b      	ldr	r3, [r3, #8]
 800d458:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d45c:	d00e      	beq.n	800d47c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	689b      	ldr	r3, [r3, #8]
 800d462:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d466:	d009      	beq.n	800d47c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	689b      	ldr	r3, [r3, #8]
 800d46c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d470:	d004      	beq.n	800d47c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800d472:	f240 71f7 	movw	r1, #2039	@ 0x7f7
 800d476:	486c      	ldr	r0, [pc, #432]	@ (800d628 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800d478:	f7f8 fd04 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	68db      	ldr	r3, [r3, #12]
 800d480:	2bff      	cmp	r3, #255	@ 0xff
 800d482:	d904      	bls.n	800d48e <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 800d484:	f44f 61ff 	mov.w	r1, #2040	@ 0x7f8
 800d488:	4867      	ldr	r0, [pc, #412]	@ (800d628 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800d48a:	f7f8 fcfb 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	691b      	ldr	r3, [r3, #16]
 800d492:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d496:	d008      	beq.n	800d4aa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	691b      	ldr	r3, [r3, #16]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d004      	beq.n	800d4aa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800d4a0:	f240 71f9 	movw	r1, #2041	@ 0x7f9
 800d4a4:	4860      	ldr	r0, [pc, #384]	@ (800d628 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800d4a6:	f7f8 fced 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	695b      	ldr	r3, [r3, #20]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d009      	beq.n	800d4c6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	695b      	ldr	r3, [r3, #20]
 800d4b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d4ba:	d004      	beq.n	800d4c6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800d4bc:	f240 71fa 	movw	r1, #2042	@ 0x7fa
 800d4c0:	4859      	ldr	r0, [pc, #356]	@ (800d628 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800d4c2:	f7f8 fcdf 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	699b      	ldr	r3, [r3, #24]
 800d4ca:	2b0f      	cmp	r3, #15
 800d4cc:	d904      	bls.n	800d4d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 800d4ce:	f240 71fb 	movw	r1, #2043	@ 0x7fb
 800d4d2:	4855      	ldr	r0, [pc, #340]	@ (800d628 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800d4d4:	f7f8 fcd6 	bl	8005e84 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d4e0:	d008      	beq.n	800d4f4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d004      	beq.n	800d4f4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800d4ea:	f240 71fc 	movw	r1, #2044	@ 0x7fc
 800d4ee:	484e      	ldr	r0, [pc, #312]	@ (800d628 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800d4f0:	f7f8 fcc8 	bl	8005e84 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d4fa:	2b01      	cmp	r3, #1
 800d4fc:	d101      	bne.n	800d502 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
 800d4fe:	2302      	movs	r3, #2
 800d500:	e08a      	b.n	800d618 <HAL_TIMEx_ConfigBreakDeadTime+0x230>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2201      	movs	r2, #1
 800d506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	68db      	ldr	r3, [r3, #12]
 800d514:	4313      	orrs	r3, r2
 800d516:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	689b      	ldr	r3, [r3, #8]
 800d522:	4313      	orrs	r3, r2
 800d524:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	685b      	ldr	r3, [r3, #4]
 800d530:	4313      	orrs	r3, r2
 800d532:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	4313      	orrs	r3, r2
 800d540:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	691b      	ldr	r3, [r3, #16]
 800d54c:	4313      	orrs	r3, r2
 800d54e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	695b      	ldr	r3, [r3, #20]
 800d55a:	4313      	orrs	r3, r2
 800d55c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d568:	4313      	orrs	r3, r2
 800d56a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	699b      	ldr	r3, [r3, #24]
 800d576:	041b      	lsls	r3, r3, #16
 800d578:	4313      	orrs	r3, r2
 800d57a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	4a27      	ldr	r2, [pc, #156]	@ (800d620 <HAL_TIMEx_ConfigBreakDeadTime+0x238>)
 800d582:	4293      	cmp	r3, r2
 800d584:	d004      	beq.n	800d590 <HAL_TIMEx_ConfigBreakDeadTime+0x1a8>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	4a26      	ldr	r2, [pc, #152]	@ (800d624 <HAL_TIMEx_ConfigBreakDeadTime+0x23c>)
 800d58c:	4293      	cmp	r3, r2
 800d58e:	d13a      	bne.n	800d606 <HAL_TIMEx_ConfigBreakDeadTime+0x21e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	69db      	ldr	r3, [r3, #28]
 800d594:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d598:	d008      	beq.n	800d5ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c4>
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	69db      	ldr	r3, [r3, #28]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d004      	beq.n	800d5ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c4>
 800d5a2:	f640 0111 	movw	r1, #2065	@ 0x811
 800d5a6:	4820      	ldr	r0, [pc, #128]	@ (800d628 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800d5a8:	f7f8 fc6c 	bl	8005e84 <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	6a1b      	ldr	r3, [r3, #32]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d009      	beq.n	800d5c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1e0>
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	6a1b      	ldr	r3, [r3, #32]
 800d5b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d5bc:	d004      	beq.n	800d5c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1e0>
 800d5be:	f640 0112 	movw	r1, #2066	@ 0x812
 800d5c2:	4819      	ldr	r0, [pc, #100]	@ (800d628 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800d5c4:	f7f8 fc5e 	bl	8005e84 <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5cc:	2b0f      	cmp	r3, #15
 800d5ce:	d904      	bls.n	800d5da <HAL_TIMEx_ConfigBreakDeadTime+0x1f2>
 800d5d0:	f640 0113 	movw	r1, #2067	@ 0x813
 800d5d4:	4814      	ldr	r0, [pc, #80]	@ (800d628 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800d5d6:	f7f8 fc55 	bl	8005e84 <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5e4:	051b      	lsls	r3, r3, #20
 800d5e6:	4313      	orrs	r3, r2
 800d5e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	69db      	ldr	r3, [r3, #28]
 800d5f4:	4313      	orrs	r3, r2
 800d5f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	6a1b      	ldr	r3, [r3, #32]
 800d602:	4313      	orrs	r3, r2
 800d604:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	68fa      	ldr	r2, [r7, #12]
 800d60c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2200      	movs	r2, #0
 800d612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d616:	2300      	movs	r3, #0
}
 800d618:	4618      	mov	r0, r3
 800d61a:	3710      	adds	r7, #16
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}
 800d620:	40010000 	.word	0x40010000
 800d624:	40010400 	.word	0x40010400
 800d628:	08017ba4 	.word	0x08017ba4

0800d62c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d62c:	b480      	push	{r7}
 800d62e:	b083      	sub	sp, #12
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d634:	bf00      	nop
 800d636:	370c      	adds	r7, #12
 800d638:	46bd      	mov	sp, r7
 800d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63e:	4770      	bx	lr

0800d640 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d640:	b480      	push	{r7}
 800d642:	b083      	sub	sp, #12
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d648:	bf00      	nop
 800d64a:	370c      	adds	r7, #12
 800d64c:	46bd      	mov	sp, r7
 800d64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d652:	4770      	bx	lr

0800d654 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d654:	b480      	push	{r7}
 800d656:	b083      	sub	sp, #12
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d65c:	bf00      	nop
 800d65e:	370c      	adds	r7, #12
 800d660:	46bd      	mov	sp, r7
 800d662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d666:	4770      	bx	lr

0800d668 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b082      	sub	sp, #8
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d101      	bne.n	800d67a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d676:	2301      	movs	r3, #1
 800d678:	e09f      	b.n	800d7ba <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	699b      	ldr	r3, [r3, #24]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d02d      	beq.n	800d6de <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	4a4f      	ldr	r2, [pc, #316]	@ (800d7c4 <HAL_UART_Init+0x15c>)
 800d688:	4293      	cmp	r3, r2
 800d68a:	d055      	beq.n	800d738 <HAL_UART_Init+0xd0>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	4a4d      	ldr	r2, [pc, #308]	@ (800d7c8 <HAL_UART_Init+0x160>)
 800d692:	4293      	cmp	r3, r2
 800d694:	d050      	beq.n	800d738 <HAL_UART_Init+0xd0>
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	4a4c      	ldr	r2, [pc, #304]	@ (800d7cc <HAL_UART_Init+0x164>)
 800d69c:	4293      	cmp	r3, r2
 800d69e:	d04b      	beq.n	800d738 <HAL_UART_Init+0xd0>
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	4a4a      	ldr	r2, [pc, #296]	@ (800d7d0 <HAL_UART_Init+0x168>)
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	d046      	beq.n	800d738 <HAL_UART_Init+0xd0>
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	4a49      	ldr	r2, [pc, #292]	@ (800d7d4 <HAL_UART_Init+0x16c>)
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d041      	beq.n	800d738 <HAL_UART_Init+0xd0>
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4a47      	ldr	r2, [pc, #284]	@ (800d7d8 <HAL_UART_Init+0x170>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d03c      	beq.n	800d738 <HAL_UART_Init+0xd0>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	4a46      	ldr	r2, [pc, #280]	@ (800d7dc <HAL_UART_Init+0x174>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d037      	beq.n	800d738 <HAL_UART_Init+0xd0>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	4a44      	ldr	r2, [pc, #272]	@ (800d7e0 <HAL_UART_Init+0x178>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d032      	beq.n	800d738 <HAL_UART_Init+0xd0>
 800d6d2:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800d6d6:	4843      	ldr	r0, [pc, #268]	@ (800d7e4 <HAL_UART_Init+0x17c>)
 800d6d8:	f7f8 fbd4 	bl	8005e84 <assert_failed>
 800d6dc:	e02c      	b.n	800d738 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	4a38      	ldr	r2, [pc, #224]	@ (800d7c4 <HAL_UART_Init+0x15c>)
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	d027      	beq.n	800d738 <HAL_UART_Init+0xd0>
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	4a36      	ldr	r2, [pc, #216]	@ (800d7c8 <HAL_UART_Init+0x160>)
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d022      	beq.n	800d738 <HAL_UART_Init+0xd0>
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	4a35      	ldr	r2, [pc, #212]	@ (800d7cc <HAL_UART_Init+0x164>)
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	d01d      	beq.n	800d738 <HAL_UART_Init+0xd0>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	4a33      	ldr	r2, [pc, #204]	@ (800d7d0 <HAL_UART_Init+0x168>)
 800d702:	4293      	cmp	r3, r2
 800d704:	d018      	beq.n	800d738 <HAL_UART_Init+0xd0>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	4a32      	ldr	r2, [pc, #200]	@ (800d7d4 <HAL_UART_Init+0x16c>)
 800d70c:	4293      	cmp	r3, r2
 800d70e:	d013      	beq.n	800d738 <HAL_UART_Init+0xd0>
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	4a30      	ldr	r2, [pc, #192]	@ (800d7d8 <HAL_UART_Init+0x170>)
 800d716:	4293      	cmp	r3, r2
 800d718:	d00e      	beq.n	800d738 <HAL_UART_Init+0xd0>
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	4a2f      	ldr	r2, [pc, #188]	@ (800d7dc <HAL_UART_Init+0x174>)
 800d720:	4293      	cmp	r3, r2
 800d722:	d009      	beq.n	800d738 <HAL_UART_Init+0xd0>
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	4a2d      	ldr	r2, [pc, #180]	@ (800d7e0 <HAL_UART_Init+0x178>)
 800d72a:	4293      	cmp	r3, r2
 800d72c:	d004      	beq.n	800d738 <HAL_UART_Init+0xd0>
 800d72e:	f240 1131 	movw	r1, #305	@ 0x131
 800d732:	482c      	ldr	r0, [pc, #176]	@ (800d7e4 <HAL_UART_Init+0x17c>)
 800d734:	f7f8 fba6 	bl	8005e84 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d106      	bne.n	800d74e <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2200      	movs	r2, #0
 800d744:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f7f8 ffad 	bl	80066a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2224      	movs	r2, #36	@ 0x24
 800d752:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	681a      	ldr	r2, [r3, #0]
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	f022 0201 	bic.w	r2, r2, #1
 800d762:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d002      	beq.n	800d772 <HAL_UART_Init+0x10a>
  {
    UART_AdvFeatureConfig(huart);
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f000 fb31 	bl	800ddd4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	f000 f838 	bl	800d7e8 <UART_SetConfig>
 800d778:	4603      	mov	r3, r0
 800d77a:	2b01      	cmp	r3, #1
 800d77c:	d101      	bne.n	800d782 <HAL_UART_Init+0x11a>
  {
    return HAL_ERROR;
 800d77e:	2301      	movs	r3, #1
 800d780:	e01b      	b.n	800d7ba <HAL_UART_Init+0x152>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	685a      	ldr	r2, [r3, #4]
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d790:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	689a      	ldr	r2, [r3, #8]
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d7a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	681a      	ldr	r2, [r3, #0]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	f042 0201 	orr.w	r2, r2, #1
 800d7b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f000 fc66 	bl	800e084 <UART_CheckIdleState>
 800d7b8:	4603      	mov	r3, r0
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3708      	adds	r7, #8
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
 800d7c2:	bf00      	nop
 800d7c4:	40011000 	.word	0x40011000
 800d7c8:	40004400 	.word	0x40004400
 800d7cc:	40004800 	.word	0x40004800
 800d7d0:	40004c00 	.word	0x40004c00
 800d7d4:	40005000 	.word	0x40005000
 800d7d8:	40011400 	.word	0x40011400
 800d7dc:	40007800 	.word	0x40007800
 800d7e0:	40007c00 	.word	0x40007c00
 800d7e4:	08017be0 	.word	0x08017be0

0800d7e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b088      	sub	sp, #32
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	685b      	ldr	r3, [r3, #4]
 800d7f8:	4aa0      	ldr	r2, [pc, #640]	@ (800da7c <UART_SetConfig+0x294>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d904      	bls.n	800d808 <UART_SetConfig+0x20>
 800d7fe:	f640 315f 	movw	r1, #2911	@ 0xb5f
 800d802:	489f      	ldr	r0, [pc, #636]	@ (800da80 <UART_SetConfig+0x298>)
 800d804:	f7f8 fb3e 	bl	8005e84 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	689b      	ldr	r3, [r3, #8]
 800d80c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d810:	d00d      	beq.n	800d82e <UART_SetConfig+0x46>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	689b      	ldr	r3, [r3, #8]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d009      	beq.n	800d82e <UART_SetConfig+0x46>
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	689b      	ldr	r3, [r3, #8]
 800d81e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d822:	d004      	beq.n	800d82e <UART_SetConfig+0x46>
 800d824:	f44f 6136 	mov.w	r1, #2912	@ 0xb60
 800d828:	4895      	ldr	r0, [pc, #596]	@ (800da80 <UART_SetConfig+0x298>)
 800d82a:	f7f8 fb2b 	bl	8005e84 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	68db      	ldr	r3, [r3, #12]
 800d832:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d836:	d012      	beq.n	800d85e <UART_SetConfig+0x76>
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	68db      	ldr	r3, [r3, #12]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d00e      	beq.n	800d85e <UART_SetConfig+0x76>
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	68db      	ldr	r3, [r3, #12]
 800d844:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d848:	d009      	beq.n	800d85e <UART_SetConfig+0x76>
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	68db      	ldr	r3, [r3, #12]
 800d84e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d852:	d004      	beq.n	800d85e <UART_SetConfig+0x76>
 800d854:	f640 3161 	movw	r1, #2913	@ 0xb61
 800d858:	4889      	ldr	r0, [pc, #548]	@ (800da80 <UART_SetConfig+0x298>)
 800d85a:	f7f8 fb13 	bl	8005e84 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6a1b      	ldr	r3, [r3, #32]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d009      	beq.n	800d87a <UART_SetConfig+0x92>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6a1b      	ldr	r3, [r3, #32]
 800d86a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d86e:	d004      	beq.n	800d87a <UART_SetConfig+0x92>
 800d870:	f640 3162 	movw	r1, #2914	@ 0xb62
 800d874:	4882      	ldr	r0, [pc, #520]	@ (800da80 <UART_SetConfig+0x298>)
 800d876:	f7f8 fb05 	bl	8005e84 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	691b      	ldr	r3, [r3, #16]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d00e      	beq.n	800d8a0 <UART_SetConfig+0xb8>
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	691b      	ldr	r3, [r3, #16]
 800d886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d88a:	d009      	beq.n	800d8a0 <UART_SetConfig+0xb8>
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	691b      	ldr	r3, [r3, #16]
 800d890:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800d894:	d004      	beq.n	800d8a0 <UART_SetConfig+0xb8>
 800d896:	f640 3164 	movw	r1, #2916	@ 0xb64
 800d89a:	4879      	ldr	r0, [pc, #484]	@ (800da80 <UART_SetConfig+0x298>)
 800d89c:	f7f8 faf2 	bl	8005e84 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	695b      	ldr	r3, [r3, #20]
 800d8a4:	f023 030c 	bic.w	r3, r3, #12
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d103      	bne.n	800d8b4 <UART_SetConfig+0xcc>
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	695b      	ldr	r3, [r3, #20]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d104      	bne.n	800d8be <UART_SetConfig+0xd6>
 800d8b4:	f640 3165 	movw	r1, #2917	@ 0xb65
 800d8b8:	4871      	ldr	r0, [pc, #452]	@ (800da80 <UART_SetConfig+0x298>)
 800d8ba:	f7f8 fae3 	bl	8005e84 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	699b      	ldr	r3, [r3, #24]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d013      	beq.n	800d8ee <UART_SetConfig+0x106>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	699b      	ldr	r3, [r3, #24]
 800d8ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d8ce:	d00e      	beq.n	800d8ee <UART_SetConfig+0x106>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	699b      	ldr	r3, [r3, #24]
 800d8d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d8d8:	d009      	beq.n	800d8ee <UART_SetConfig+0x106>
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	699b      	ldr	r3, [r3, #24]
 800d8de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d8e2:	d004      	beq.n	800d8ee <UART_SetConfig+0x106>
 800d8e4:	f640 3166 	movw	r1, #2918	@ 0xb66
 800d8e8:	4865      	ldr	r0, [pc, #404]	@ (800da80 <UART_SetConfig+0x298>)
 800d8ea:	f7f8 facb 	bl	8005e84 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	69db      	ldr	r3, [r3, #28]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d009      	beq.n	800d90a <UART_SetConfig+0x122>
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	69db      	ldr	r3, [r3, #28]
 800d8fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d8fe:	d004      	beq.n	800d90a <UART_SetConfig+0x122>
 800d900:	f640 3167 	movw	r1, #2919	@ 0xb67
 800d904:	485e      	ldr	r0, [pc, #376]	@ (800da80 <UART_SetConfig+0x298>)
 800d906:	f7f8 fabd 	bl	8005e84 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	689a      	ldr	r2, [r3, #8]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	691b      	ldr	r3, [r3, #16]
 800d912:	431a      	orrs	r2, r3
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	695b      	ldr	r3, [r3, #20]
 800d918:	431a      	orrs	r2, r3
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	69db      	ldr	r3, [r3, #28]
 800d91e:	4313      	orrs	r3, r2
 800d920:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	681a      	ldr	r2, [r3, #0]
 800d928:	4b56      	ldr	r3, [pc, #344]	@ (800da84 <UART_SetConfig+0x29c>)
 800d92a:	4013      	ands	r3, r2
 800d92c:	687a      	ldr	r2, [r7, #4]
 800d92e:	6812      	ldr	r2, [r2, #0]
 800d930:	6979      	ldr	r1, [r7, #20]
 800d932:	430b      	orrs	r3, r1
 800d934:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	685b      	ldr	r3, [r3, #4]
 800d93c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	68da      	ldr	r2, [r3, #12]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	430a      	orrs	r2, r1
 800d94a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	699b      	ldr	r3, [r3, #24]
 800d950:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6a1b      	ldr	r3, [r3, #32]
 800d956:	697a      	ldr	r2, [r7, #20]
 800d958:	4313      	orrs	r3, r2
 800d95a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	689b      	ldr	r3, [r3, #8]
 800d962:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	697a      	ldr	r2, [r7, #20]
 800d96c:	430a      	orrs	r2, r1
 800d96e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	4a44      	ldr	r2, [pc, #272]	@ (800da88 <UART_SetConfig+0x2a0>)
 800d976:	4293      	cmp	r3, r2
 800d978:	d121      	bne.n	800d9be <UART_SetConfig+0x1d6>
 800d97a:	4b44      	ldr	r3, [pc, #272]	@ (800da8c <UART_SetConfig+0x2a4>)
 800d97c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d980:	f003 0303 	and.w	r3, r3, #3
 800d984:	2b03      	cmp	r3, #3
 800d986:	d817      	bhi.n	800d9b8 <UART_SetConfig+0x1d0>
 800d988:	a201      	add	r2, pc, #4	@ (adr r2, 800d990 <UART_SetConfig+0x1a8>)
 800d98a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d98e:	bf00      	nop
 800d990:	0800d9a1 	.word	0x0800d9a1
 800d994:	0800d9ad 	.word	0x0800d9ad
 800d998:	0800d9a7 	.word	0x0800d9a7
 800d99c:	0800d9b3 	.word	0x0800d9b3
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	77fb      	strb	r3, [r7, #31]
 800d9a4:	e14c      	b.n	800dc40 <UART_SetConfig+0x458>
 800d9a6:	2302      	movs	r3, #2
 800d9a8:	77fb      	strb	r3, [r7, #31]
 800d9aa:	e149      	b.n	800dc40 <UART_SetConfig+0x458>
 800d9ac:	2304      	movs	r3, #4
 800d9ae:	77fb      	strb	r3, [r7, #31]
 800d9b0:	e146      	b.n	800dc40 <UART_SetConfig+0x458>
 800d9b2:	2308      	movs	r3, #8
 800d9b4:	77fb      	strb	r3, [r7, #31]
 800d9b6:	e143      	b.n	800dc40 <UART_SetConfig+0x458>
 800d9b8:	2310      	movs	r3, #16
 800d9ba:	77fb      	strb	r3, [r7, #31]
 800d9bc:	e140      	b.n	800dc40 <UART_SetConfig+0x458>
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	4a33      	ldr	r2, [pc, #204]	@ (800da90 <UART_SetConfig+0x2a8>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d132      	bne.n	800da2e <UART_SetConfig+0x246>
 800d9c8:	4b30      	ldr	r3, [pc, #192]	@ (800da8c <UART_SetConfig+0x2a4>)
 800d9ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9ce:	f003 030c 	and.w	r3, r3, #12
 800d9d2:	2b0c      	cmp	r3, #12
 800d9d4:	d828      	bhi.n	800da28 <UART_SetConfig+0x240>
 800d9d6:	a201      	add	r2, pc, #4	@ (adr r2, 800d9dc <UART_SetConfig+0x1f4>)
 800d9d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9dc:	0800da11 	.word	0x0800da11
 800d9e0:	0800da29 	.word	0x0800da29
 800d9e4:	0800da29 	.word	0x0800da29
 800d9e8:	0800da29 	.word	0x0800da29
 800d9ec:	0800da1d 	.word	0x0800da1d
 800d9f0:	0800da29 	.word	0x0800da29
 800d9f4:	0800da29 	.word	0x0800da29
 800d9f8:	0800da29 	.word	0x0800da29
 800d9fc:	0800da17 	.word	0x0800da17
 800da00:	0800da29 	.word	0x0800da29
 800da04:	0800da29 	.word	0x0800da29
 800da08:	0800da29 	.word	0x0800da29
 800da0c:	0800da23 	.word	0x0800da23
 800da10:	2300      	movs	r3, #0
 800da12:	77fb      	strb	r3, [r7, #31]
 800da14:	e114      	b.n	800dc40 <UART_SetConfig+0x458>
 800da16:	2302      	movs	r3, #2
 800da18:	77fb      	strb	r3, [r7, #31]
 800da1a:	e111      	b.n	800dc40 <UART_SetConfig+0x458>
 800da1c:	2304      	movs	r3, #4
 800da1e:	77fb      	strb	r3, [r7, #31]
 800da20:	e10e      	b.n	800dc40 <UART_SetConfig+0x458>
 800da22:	2308      	movs	r3, #8
 800da24:	77fb      	strb	r3, [r7, #31]
 800da26:	e10b      	b.n	800dc40 <UART_SetConfig+0x458>
 800da28:	2310      	movs	r3, #16
 800da2a:	77fb      	strb	r3, [r7, #31]
 800da2c:	e108      	b.n	800dc40 <UART_SetConfig+0x458>
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	4a18      	ldr	r2, [pc, #96]	@ (800da94 <UART_SetConfig+0x2ac>)
 800da34:	4293      	cmp	r3, r2
 800da36:	d12f      	bne.n	800da98 <UART_SetConfig+0x2b0>
 800da38:	4b14      	ldr	r3, [pc, #80]	@ (800da8c <UART_SetConfig+0x2a4>)
 800da3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da3e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800da42:	2b30      	cmp	r3, #48	@ 0x30
 800da44:	d013      	beq.n	800da6e <UART_SetConfig+0x286>
 800da46:	2b30      	cmp	r3, #48	@ 0x30
 800da48:	d814      	bhi.n	800da74 <UART_SetConfig+0x28c>
 800da4a:	2b20      	cmp	r3, #32
 800da4c:	d009      	beq.n	800da62 <UART_SetConfig+0x27a>
 800da4e:	2b20      	cmp	r3, #32
 800da50:	d810      	bhi.n	800da74 <UART_SetConfig+0x28c>
 800da52:	2b00      	cmp	r3, #0
 800da54:	d002      	beq.n	800da5c <UART_SetConfig+0x274>
 800da56:	2b10      	cmp	r3, #16
 800da58:	d006      	beq.n	800da68 <UART_SetConfig+0x280>
 800da5a:	e00b      	b.n	800da74 <UART_SetConfig+0x28c>
 800da5c:	2300      	movs	r3, #0
 800da5e:	77fb      	strb	r3, [r7, #31]
 800da60:	e0ee      	b.n	800dc40 <UART_SetConfig+0x458>
 800da62:	2302      	movs	r3, #2
 800da64:	77fb      	strb	r3, [r7, #31]
 800da66:	e0eb      	b.n	800dc40 <UART_SetConfig+0x458>
 800da68:	2304      	movs	r3, #4
 800da6a:	77fb      	strb	r3, [r7, #31]
 800da6c:	e0e8      	b.n	800dc40 <UART_SetConfig+0x458>
 800da6e:	2308      	movs	r3, #8
 800da70:	77fb      	strb	r3, [r7, #31]
 800da72:	e0e5      	b.n	800dc40 <UART_SetConfig+0x458>
 800da74:	2310      	movs	r3, #16
 800da76:	77fb      	strb	r3, [r7, #31]
 800da78:	e0e2      	b.n	800dc40 <UART_SetConfig+0x458>
 800da7a:	bf00      	nop
 800da7c:	019bfcc0 	.word	0x019bfcc0
 800da80:	08017be0 	.word	0x08017be0
 800da84:	efff69f3 	.word	0xefff69f3
 800da88:	40011000 	.word	0x40011000
 800da8c:	40023800 	.word	0x40023800
 800da90:	40004400 	.word	0x40004400
 800da94:	40004800 	.word	0x40004800
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4aa5      	ldr	r2, [pc, #660]	@ (800dd34 <UART_SetConfig+0x54c>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d120      	bne.n	800dae4 <UART_SetConfig+0x2fc>
 800daa2:	4ba5      	ldr	r3, [pc, #660]	@ (800dd38 <UART_SetConfig+0x550>)
 800daa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800daa8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800daac:	2bc0      	cmp	r3, #192	@ 0xc0
 800daae:	d013      	beq.n	800dad8 <UART_SetConfig+0x2f0>
 800dab0:	2bc0      	cmp	r3, #192	@ 0xc0
 800dab2:	d814      	bhi.n	800dade <UART_SetConfig+0x2f6>
 800dab4:	2b80      	cmp	r3, #128	@ 0x80
 800dab6:	d009      	beq.n	800dacc <UART_SetConfig+0x2e4>
 800dab8:	2b80      	cmp	r3, #128	@ 0x80
 800daba:	d810      	bhi.n	800dade <UART_SetConfig+0x2f6>
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d002      	beq.n	800dac6 <UART_SetConfig+0x2de>
 800dac0:	2b40      	cmp	r3, #64	@ 0x40
 800dac2:	d006      	beq.n	800dad2 <UART_SetConfig+0x2ea>
 800dac4:	e00b      	b.n	800dade <UART_SetConfig+0x2f6>
 800dac6:	2300      	movs	r3, #0
 800dac8:	77fb      	strb	r3, [r7, #31]
 800daca:	e0b9      	b.n	800dc40 <UART_SetConfig+0x458>
 800dacc:	2302      	movs	r3, #2
 800dace:	77fb      	strb	r3, [r7, #31]
 800dad0:	e0b6      	b.n	800dc40 <UART_SetConfig+0x458>
 800dad2:	2304      	movs	r3, #4
 800dad4:	77fb      	strb	r3, [r7, #31]
 800dad6:	e0b3      	b.n	800dc40 <UART_SetConfig+0x458>
 800dad8:	2308      	movs	r3, #8
 800dada:	77fb      	strb	r3, [r7, #31]
 800dadc:	e0b0      	b.n	800dc40 <UART_SetConfig+0x458>
 800dade:	2310      	movs	r3, #16
 800dae0:	77fb      	strb	r3, [r7, #31]
 800dae2:	e0ad      	b.n	800dc40 <UART_SetConfig+0x458>
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	4a94      	ldr	r2, [pc, #592]	@ (800dd3c <UART_SetConfig+0x554>)
 800daea:	4293      	cmp	r3, r2
 800daec:	d125      	bne.n	800db3a <UART_SetConfig+0x352>
 800daee:	4b92      	ldr	r3, [pc, #584]	@ (800dd38 <UART_SetConfig+0x550>)
 800daf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800daf4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800daf8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dafc:	d017      	beq.n	800db2e <UART_SetConfig+0x346>
 800dafe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800db02:	d817      	bhi.n	800db34 <UART_SetConfig+0x34c>
 800db04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800db08:	d00b      	beq.n	800db22 <UART_SetConfig+0x33a>
 800db0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800db0e:	d811      	bhi.n	800db34 <UART_SetConfig+0x34c>
 800db10:	2b00      	cmp	r3, #0
 800db12:	d003      	beq.n	800db1c <UART_SetConfig+0x334>
 800db14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800db18:	d006      	beq.n	800db28 <UART_SetConfig+0x340>
 800db1a:	e00b      	b.n	800db34 <UART_SetConfig+0x34c>
 800db1c:	2300      	movs	r3, #0
 800db1e:	77fb      	strb	r3, [r7, #31]
 800db20:	e08e      	b.n	800dc40 <UART_SetConfig+0x458>
 800db22:	2302      	movs	r3, #2
 800db24:	77fb      	strb	r3, [r7, #31]
 800db26:	e08b      	b.n	800dc40 <UART_SetConfig+0x458>
 800db28:	2304      	movs	r3, #4
 800db2a:	77fb      	strb	r3, [r7, #31]
 800db2c:	e088      	b.n	800dc40 <UART_SetConfig+0x458>
 800db2e:	2308      	movs	r3, #8
 800db30:	77fb      	strb	r3, [r7, #31]
 800db32:	e085      	b.n	800dc40 <UART_SetConfig+0x458>
 800db34:	2310      	movs	r3, #16
 800db36:	77fb      	strb	r3, [r7, #31]
 800db38:	e082      	b.n	800dc40 <UART_SetConfig+0x458>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	4a80      	ldr	r2, [pc, #512]	@ (800dd40 <UART_SetConfig+0x558>)
 800db40:	4293      	cmp	r3, r2
 800db42:	d125      	bne.n	800db90 <UART_SetConfig+0x3a8>
 800db44:	4b7c      	ldr	r3, [pc, #496]	@ (800dd38 <UART_SetConfig+0x550>)
 800db46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db4a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800db4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800db52:	d017      	beq.n	800db84 <UART_SetConfig+0x39c>
 800db54:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800db58:	d817      	bhi.n	800db8a <UART_SetConfig+0x3a2>
 800db5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800db5e:	d00b      	beq.n	800db78 <UART_SetConfig+0x390>
 800db60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800db64:	d811      	bhi.n	800db8a <UART_SetConfig+0x3a2>
 800db66:	2b00      	cmp	r3, #0
 800db68:	d003      	beq.n	800db72 <UART_SetConfig+0x38a>
 800db6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800db6e:	d006      	beq.n	800db7e <UART_SetConfig+0x396>
 800db70:	e00b      	b.n	800db8a <UART_SetConfig+0x3a2>
 800db72:	2301      	movs	r3, #1
 800db74:	77fb      	strb	r3, [r7, #31]
 800db76:	e063      	b.n	800dc40 <UART_SetConfig+0x458>
 800db78:	2302      	movs	r3, #2
 800db7a:	77fb      	strb	r3, [r7, #31]
 800db7c:	e060      	b.n	800dc40 <UART_SetConfig+0x458>
 800db7e:	2304      	movs	r3, #4
 800db80:	77fb      	strb	r3, [r7, #31]
 800db82:	e05d      	b.n	800dc40 <UART_SetConfig+0x458>
 800db84:	2308      	movs	r3, #8
 800db86:	77fb      	strb	r3, [r7, #31]
 800db88:	e05a      	b.n	800dc40 <UART_SetConfig+0x458>
 800db8a:	2310      	movs	r3, #16
 800db8c:	77fb      	strb	r3, [r7, #31]
 800db8e:	e057      	b.n	800dc40 <UART_SetConfig+0x458>
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	4a6b      	ldr	r2, [pc, #428]	@ (800dd44 <UART_SetConfig+0x55c>)
 800db96:	4293      	cmp	r3, r2
 800db98:	d125      	bne.n	800dbe6 <UART_SetConfig+0x3fe>
 800db9a:	4b67      	ldr	r3, [pc, #412]	@ (800dd38 <UART_SetConfig+0x550>)
 800db9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dba0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800dba4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800dba8:	d017      	beq.n	800dbda <UART_SetConfig+0x3f2>
 800dbaa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800dbae:	d817      	bhi.n	800dbe0 <UART_SetConfig+0x3f8>
 800dbb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dbb4:	d00b      	beq.n	800dbce <UART_SetConfig+0x3e6>
 800dbb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dbba:	d811      	bhi.n	800dbe0 <UART_SetConfig+0x3f8>
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d003      	beq.n	800dbc8 <UART_SetConfig+0x3e0>
 800dbc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dbc4:	d006      	beq.n	800dbd4 <UART_SetConfig+0x3ec>
 800dbc6:	e00b      	b.n	800dbe0 <UART_SetConfig+0x3f8>
 800dbc8:	2300      	movs	r3, #0
 800dbca:	77fb      	strb	r3, [r7, #31]
 800dbcc:	e038      	b.n	800dc40 <UART_SetConfig+0x458>
 800dbce:	2302      	movs	r3, #2
 800dbd0:	77fb      	strb	r3, [r7, #31]
 800dbd2:	e035      	b.n	800dc40 <UART_SetConfig+0x458>
 800dbd4:	2304      	movs	r3, #4
 800dbd6:	77fb      	strb	r3, [r7, #31]
 800dbd8:	e032      	b.n	800dc40 <UART_SetConfig+0x458>
 800dbda:	2308      	movs	r3, #8
 800dbdc:	77fb      	strb	r3, [r7, #31]
 800dbde:	e02f      	b.n	800dc40 <UART_SetConfig+0x458>
 800dbe0:	2310      	movs	r3, #16
 800dbe2:	77fb      	strb	r3, [r7, #31]
 800dbe4:	e02c      	b.n	800dc40 <UART_SetConfig+0x458>
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	4a57      	ldr	r2, [pc, #348]	@ (800dd48 <UART_SetConfig+0x560>)
 800dbec:	4293      	cmp	r3, r2
 800dbee:	d125      	bne.n	800dc3c <UART_SetConfig+0x454>
 800dbf0:	4b51      	ldr	r3, [pc, #324]	@ (800dd38 <UART_SetConfig+0x550>)
 800dbf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dbf6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800dbfa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800dbfe:	d017      	beq.n	800dc30 <UART_SetConfig+0x448>
 800dc00:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800dc04:	d817      	bhi.n	800dc36 <UART_SetConfig+0x44e>
 800dc06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dc0a:	d00b      	beq.n	800dc24 <UART_SetConfig+0x43c>
 800dc0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dc10:	d811      	bhi.n	800dc36 <UART_SetConfig+0x44e>
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d003      	beq.n	800dc1e <UART_SetConfig+0x436>
 800dc16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dc1a:	d006      	beq.n	800dc2a <UART_SetConfig+0x442>
 800dc1c:	e00b      	b.n	800dc36 <UART_SetConfig+0x44e>
 800dc1e:	2300      	movs	r3, #0
 800dc20:	77fb      	strb	r3, [r7, #31]
 800dc22:	e00d      	b.n	800dc40 <UART_SetConfig+0x458>
 800dc24:	2302      	movs	r3, #2
 800dc26:	77fb      	strb	r3, [r7, #31]
 800dc28:	e00a      	b.n	800dc40 <UART_SetConfig+0x458>
 800dc2a:	2304      	movs	r3, #4
 800dc2c:	77fb      	strb	r3, [r7, #31]
 800dc2e:	e007      	b.n	800dc40 <UART_SetConfig+0x458>
 800dc30:	2308      	movs	r3, #8
 800dc32:	77fb      	strb	r3, [r7, #31]
 800dc34:	e004      	b.n	800dc40 <UART_SetConfig+0x458>
 800dc36:	2310      	movs	r3, #16
 800dc38:	77fb      	strb	r3, [r7, #31]
 800dc3a:	e001      	b.n	800dc40 <UART_SetConfig+0x458>
 800dc3c:	2310      	movs	r3, #16
 800dc3e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	69db      	ldr	r3, [r3, #28]
 800dc44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dc48:	d15c      	bne.n	800dd04 <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 800dc4a:	7ffb      	ldrb	r3, [r7, #31]
 800dc4c:	2b08      	cmp	r3, #8
 800dc4e:	d828      	bhi.n	800dca2 <UART_SetConfig+0x4ba>
 800dc50:	a201      	add	r2, pc, #4	@ (adr r2, 800dc58 <UART_SetConfig+0x470>)
 800dc52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc56:	bf00      	nop
 800dc58:	0800dc7d 	.word	0x0800dc7d
 800dc5c:	0800dc85 	.word	0x0800dc85
 800dc60:	0800dc8d 	.word	0x0800dc8d
 800dc64:	0800dca3 	.word	0x0800dca3
 800dc68:	0800dc93 	.word	0x0800dc93
 800dc6c:	0800dca3 	.word	0x0800dca3
 800dc70:	0800dca3 	.word	0x0800dca3
 800dc74:	0800dca3 	.word	0x0800dca3
 800dc78:	0800dc9b 	.word	0x0800dc9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dc7c:	f7fa faf2 	bl	8008264 <HAL_RCC_GetPCLK1Freq>
 800dc80:	61b8      	str	r0, [r7, #24]
        break;
 800dc82:	e013      	b.n	800dcac <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dc84:	f7fa fb02 	bl	800828c <HAL_RCC_GetPCLK2Freq>
 800dc88:	61b8      	str	r0, [r7, #24]
        break;
 800dc8a:	e00f      	b.n	800dcac <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dc8c:	4b2f      	ldr	r3, [pc, #188]	@ (800dd4c <UART_SetConfig+0x564>)
 800dc8e:	61bb      	str	r3, [r7, #24]
        break;
 800dc90:	e00c      	b.n	800dcac <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dc92:	f7fa fa15 	bl	80080c0 <HAL_RCC_GetSysClockFreq>
 800dc96:	61b8      	str	r0, [r7, #24]
        break;
 800dc98:	e008      	b.n	800dcac <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dc9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dc9e:	61bb      	str	r3, [r7, #24]
        break;
 800dca0:	e004      	b.n	800dcac <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800dca2:	2300      	movs	r3, #0
 800dca4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800dca6:	2301      	movs	r3, #1
 800dca8:	77bb      	strb	r3, [r7, #30]
        break;
 800dcaa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dcac:	69bb      	ldr	r3, [r7, #24]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	f000 8082 	beq.w	800ddb8 <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800dcb4:	69bb      	ldr	r3, [r7, #24]
 800dcb6:	005a      	lsls	r2, r3, #1
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	685b      	ldr	r3, [r3, #4]
 800dcbc:	085b      	lsrs	r3, r3, #1
 800dcbe:	441a      	add	r2, r3
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	685b      	ldr	r3, [r3, #4]
 800dcc4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dcc8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dcca:	693b      	ldr	r3, [r7, #16]
 800dccc:	2b0f      	cmp	r3, #15
 800dcce:	d916      	bls.n	800dcfe <UART_SetConfig+0x516>
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dcd6:	d212      	bcs.n	800dcfe <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	b29b      	uxth	r3, r3
 800dcdc:	f023 030f 	bic.w	r3, r3, #15
 800dce0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dce2:	693b      	ldr	r3, [r7, #16]
 800dce4:	085b      	lsrs	r3, r3, #1
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	f003 0307 	and.w	r3, r3, #7
 800dcec:	b29a      	uxth	r2, r3
 800dcee:	89fb      	ldrh	r3, [r7, #14]
 800dcf0:	4313      	orrs	r3, r2
 800dcf2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	89fa      	ldrh	r2, [r7, #14]
 800dcfa:	60da      	str	r2, [r3, #12]
 800dcfc:	e05c      	b.n	800ddb8 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800dcfe:	2301      	movs	r3, #1
 800dd00:	77bb      	strb	r3, [r7, #30]
 800dd02:	e059      	b.n	800ddb8 <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800dd04:	7ffb      	ldrb	r3, [r7, #31]
 800dd06:	2b08      	cmp	r3, #8
 800dd08:	d835      	bhi.n	800dd76 <UART_SetConfig+0x58e>
 800dd0a:	a201      	add	r2, pc, #4	@ (adr r2, 800dd10 <UART_SetConfig+0x528>)
 800dd0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd10:	0800dd51 	.word	0x0800dd51
 800dd14:	0800dd59 	.word	0x0800dd59
 800dd18:	0800dd61 	.word	0x0800dd61
 800dd1c:	0800dd77 	.word	0x0800dd77
 800dd20:	0800dd67 	.word	0x0800dd67
 800dd24:	0800dd77 	.word	0x0800dd77
 800dd28:	0800dd77 	.word	0x0800dd77
 800dd2c:	0800dd77 	.word	0x0800dd77
 800dd30:	0800dd6f 	.word	0x0800dd6f
 800dd34:	40004c00 	.word	0x40004c00
 800dd38:	40023800 	.word	0x40023800
 800dd3c:	40005000 	.word	0x40005000
 800dd40:	40011400 	.word	0x40011400
 800dd44:	40007800 	.word	0x40007800
 800dd48:	40007c00 	.word	0x40007c00
 800dd4c:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dd50:	f7fa fa88 	bl	8008264 <HAL_RCC_GetPCLK1Freq>
 800dd54:	61b8      	str	r0, [r7, #24]
        break;
 800dd56:	e013      	b.n	800dd80 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dd58:	f7fa fa98 	bl	800828c <HAL_RCC_GetPCLK2Freq>
 800dd5c:	61b8      	str	r0, [r7, #24]
        break;
 800dd5e:	e00f      	b.n	800dd80 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dd60:	4b1b      	ldr	r3, [pc, #108]	@ (800ddd0 <UART_SetConfig+0x5e8>)
 800dd62:	61bb      	str	r3, [r7, #24]
        break;
 800dd64:	e00c      	b.n	800dd80 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dd66:	f7fa f9ab 	bl	80080c0 <HAL_RCC_GetSysClockFreq>
 800dd6a:	61b8      	str	r0, [r7, #24]
        break;
 800dd6c:	e008      	b.n	800dd80 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dd72:	61bb      	str	r3, [r7, #24]
        break;
 800dd74:	e004      	b.n	800dd80 <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 800dd76:	2300      	movs	r3, #0
 800dd78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	77bb      	strb	r3, [r7, #30]
        break;
 800dd7e:	bf00      	nop
    }

    if (pclk != 0U)
 800dd80:	69bb      	ldr	r3, [r7, #24]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d018      	beq.n	800ddb8 <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	685b      	ldr	r3, [r3, #4]
 800dd8a:	085a      	lsrs	r2, r3, #1
 800dd8c:	69bb      	ldr	r3, [r7, #24]
 800dd8e:	441a      	add	r2, r3
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	685b      	ldr	r3, [r3, #4]
 800dd94:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd98:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	2b0f      	cmp	r3, #15
 800dd9e:	d909      	bls.n	800ddb4 <UART_SetConfig+0x5cc>
 800dda0:	693b      	ldr	r3, [r7, #16]
 800dda2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dda6:	d205      	bcs.n	800ddb4 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	b29a      	uxth	r2, r3
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	60da      	str	r2, [r3, #12]
 800ddb2:	e001      	b.n	800ddb8 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800ddb4:	2301      	movs	r3, #1
 800ddb6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2200      	movs	r2, #0
 800ddbc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800ddc4:	7fbb      	ldrb	r3, [r7, #30]
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3720      	adds	r7, #32
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}
 800ddce:	bf00      	nop
 800ddd0:	00f42400 	.word	0x00f42400

0800ddd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b082      	sub	sp, #8
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dde0:	2bff      	cmp	r3, #255	@ 0xff
 800dde2:	d904      	bls.n	800ddee <UART_AdvFeatureConfig+0x1a>
 800dde4:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 800dde8:	488e      	ldr	r0, [pc, #568]	@ (800e024 <UART_AdvFeatureConfig+0x250>)
 800ddea:	f7f8 f84b 	bl	8005e84 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddf2:	f003 0308 	and.w	r3, r3, #8
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d018      	beq.n	800de2c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d009      	beq.n	800de16 <UART_AdvFeatureConfig+0x42>
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800de0a:	d004      	beq.n	800de16 <UART_AdvFeatureConfig+0x42>
 800de0c:	f640 31ed 	movw	r1, #3053	@ 0xbed
 800de10:	4884      	ldr	r0, [pc, #528]	@ (800e024 <UART_AdvFeatureConfig+0x250>)
 800de12:	f7f8 f837 	bl	8005e84 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	685b      	ldr	r3, [r3, #4]
 800de1c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	430a      	orrs	r2, r1
 800de2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de30:	f003 0301 	and.w	r3, r3, #1
 800de34:	2b00      	cmp	r3, #0
 800de36:	d018      	beq.n	800de6a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d009      	beq.n	800de54 <UART_AdvFeatureConfig+0x80>
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800de48:	d004      	beq.n	800de54 <UART_AdvFeatureConfig+0x80>
 800de4a:	f640 31f4 	movw	r1, #3060	@ 0xbf4
 800de4e:	4875      	ldr	r0, [pc, #468]	@ (800e024 <UART_AdvFeatureConfig+0x250>)
 800de50:	f7f8 f818 	bl	8005e84 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	685b      	ldr	r3, [r3, #4]
 800de5a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	430a      	orrs	r2, r1
 800de68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de6e:	f003 0302 	and.w	r3, r3, #2
 800de72:	2b00      	cmp	r3, #0
 800de74:	d018      	beq.n	800dea8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d009      	beq.n	800de92 <UART_AdvFeatureConfig+0xbe>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800de86:	d004      	beq.n	800de92 <UART_AdvFeatureConfig+0xbe>
 800de88:	f640 31fb 	movw	r1, #3067	@ 0xbfb
 800de8c:	4865      	ldr	r0, [pc, #404]	@ (800e024 <UART_AdvFeatureConfig+0x250>)
 800de8e:	f7f7 fff9 	bl	8005e84 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	685b      	ldr	r3, [r3, #4]
 800de98:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	430a      	orrs	r2, r1
 800dea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800deac:	f003 0304 	and.w	r3, r3, #4
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d018      	beq.n	800dee6 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d009      	beq.n	800ded0 <UART_AdvFeatureConfig+0xfc>
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dec0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dec4:	d004      	beq.n	800ded0 <UART_AdvFeatureConfig+0xfc>
 800dec6:	f640 4102 	movw	r1, #3074	@ 0xc02
 800deca:	4856      	ldr	r0, [pc, #344]	@ (800e024 <UART_AdvFeatureConfig+0x250>)
 800decc:	f7f7 ffda 	bl	8005e84 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	685b      	ldr	r3, [r3, #4]
 800ded6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	430a      	orrs	r2, r1
 800dee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800deea:	f003 0310 	and.w	r3, r3, #16
 800deee:	2b00      	cmp	r3, #0
 800def0:	d018      	beq.n	800df24 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800def6:	2b00      	cmp	r3, #0
 800def8:	d009      	beq.n	800df0e <UART_AdvFeatureConfig+0x13a>
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800defe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800df02:	d004      	beq.n	800df0e <UART_AdvFeatureConfig+0x13a>
 800df04:	f640 4109 	movw	r1, #3081	@ 0xc09
 800df08:	4846      	ldr	r0, [pc, #280]	@ (800e024 <UART_AdvFeatureConfig+0x250>)
 800df0a:	f7f7 ffbb 	bl	8005e84 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	689b      	ldr	r3, [r3, #8]
 800df14:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	430a      	orrs	r2, r1
 800df22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df28:	f003 0320 	and.w	r3, r3, #32
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d018      	beq.n	800df62 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df34:	2b00      	cmp	r3, #0
 800df36:	d009      	beq.n	800df4c <UART_AdvFeatureConfig+0x178>
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800df40:	d004      	beq.n	800df4c <UART_AdvFeatureConfig+0x178>
 800df42:	f44f 6141 	mov.w	r1, #3088	@ 0xc10
 800df46:	4837      	ldr	r0, [pc, #220]	@ (800e024 <UART_AdvFeatureConfig+0x250>)
 800df48:	f7f7 ff9c 	bl	8005e84 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	689b      	ldr	r3, [r3, #8]
 800df52:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	430a      	orrs	r2, r1
 800df60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d064      	beq.n	800e038 <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	4a2d      	ldr	r2, [pc, #180]	@ (800e028 <UART_AdvFeatureConfig+0x254>)
 800df74:	4293      	cmp	r3, r2
 800df76:	d013      	beq.n	800dfa0 <UART_AdvFeatureConfig+0x1cc>
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	4a2b      	ldr	r2, [pc, #172]	@ (800e02c <UART_AdvFeatureConfig+0x258>)
 800df7e:	4293      	cmp	r3, r2
 800df80:	d00e      	beq.n	800dfa0 <UART_AdvFeatureConfig+0x1cc>
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	4a2a      	ldr	r2, [pc, #168]	@ (800e030 <UART_AdvFeatureConfig+0x25c>)
 800df88:	4293      	cmp	r3, r2
 800df8a:	d009      	beq.n	800dfa0 <UART_AdvFeatureConfig+0x1cc>
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	4a28      	ldr	r2, [pc, #160]	@ (800e034 <UART_AdvFeatureConfig+0x260>)
 800df92:	4293      	cmp	r3, r2
 800df94:	d004      	beq.n	800dfa0 <UART_AdvFeatureConfig+0x1cc>
 800df96:	f640 4117 	movw	r1, #3095	@ 0xc17
 800df9a:	4822      	ldr	r0, [pc, #136]	@ (800e024 <UART_AdvFeatureConfig+0x250>)
 800df9c:	f7f7 ff72 	bl	8005e84 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d009      	beq.n	800dfbc <UART_AdvFeatureConfig+0x1e8>
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dfb0:	d004      	beq.n	800dfbc <UART_AdvFeatureConfig+0x1e8>
 800dfb2:	f640 4118 	movw	r1, #3096	@ 0xc18
 800dfb6:	481b      	ldr	r0, [pc, #108]	@ (800e024 <UART_AdvFeatureConfig+0x250>)
 800dfb8:	f7f7 ff64 	bl	8005e84 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	685b      	ldr	r3, [r3, #4]
 800dfc2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	430a      	orrs	r2, r1
 800dfd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dfda:	d12d      	bne.n	800e038 <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d013      	beq.n	800e00c <UART_AdvFeatureConfig+0x238>
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dfe8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dfec:	d00e      	beq.n	800e00c <UART_AdvFeatureConfig+0x238>
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dff2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dff6:	d009      	beq.n	800e00c <UART_AdvFeatureConfig+0x238>
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dffc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e000:	d004      	beq.n	800e00c <UART_AdvFeatureConfig+0x238>
 800e002:	f640 411d 	movw	r1, #3101	@ 0xc1d
 800e006:	4807      	ldr	r0, [pc, #28]	@ (800e024 <UART_AdvFeatureConfig+0x250>)
 800e008:	f7f7 ff3c 	bl	8005e84 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	685b      	ldr	r3, [r3, #4]
 800e012:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	430a      	orrs	r2, r1
 800e020:	605a      	str	r2, [r3, #4]
 800e022:	e009      	b.n	800e038 <UART_AdvFeatureConfig+0x264>
 800e024:	08017be0 	.word	0x08017be0
 800e028:	40011000 	.word	0x40011000
 800e02c:	40004400 	.word	0x40004400
 800e030:	40004800 	.word	0x40004800
 800e034:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e03c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e040:	2b00      	cmp	r3, #0
 800e042:	d018      	beq.n	800e076 <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d009      	beq.n	800e060 <UART_AdvFeatureConfig+0x28c>
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e050:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800e054:	d004      	beq.n	800e060 <UART_AdvFeatureConfig+0x28c>
 800e056:	f640 4125 	movw	r1, #3109	@ 0xc25
 800e05a:	4809      	ldr	r0, [pc, #36]	@ (800e080 <UART_AdvFeatureConfig+0x2ac>)
 800e05c:	f7f7 ff12 	bl	8005e84 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	685b      	ldr	r3, [r3, #4]
 800e066:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	430a      	orrs	r2, r1
 800e074:	605a      	str	r2, [r3, #4]
  }
}
 800e076:	bf00      	nop
 800e078:	3708      	adds	r7, #8
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
 800e07e:	bf00      	nop
 800e080:	08017be0 	.word	0x08017be0

0800e084 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b08c      	sub	sp, #48	@ 0x30
 800e088:	af02      	add	r7, sp, #8
 800e08a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2200      	movs	r2, #0
 800e090:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e094:	f7f8 fc36 	bl	8006904 <HAL_GetTick>
 800e098:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	f003 0308 	and.w	r3, r3, #8
 800e0a4:	2b08      	cmp	r3, #8
 800e0a6:	d12e      	bne.n	800e106 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e0a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e0ac:	9300      	str	r3, [sp, #0]
 800e0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	f000 f83b 	bl	800e132 <UART_WaitOnFlagUntilTimeout>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d021      	beq.n	800e106 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0c8:	693b      	ldr	r3, [r7, #16]
 800e0ca:	e853 3f00 	ldrex	r3, [r3]
 800e0ce:	60fb      	str	r3, [r7, #12]
   return(result);
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e0d6:	623b      	str	r3, [r7, #32]
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	461a      	mov	r2, r3
 800e0de:	6a3b      	ldr	r3, [r7, #32]
 800e0e0:	61fb      	str	r3, [r7, #28]
 800e0e2:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0e4:	69b9      	ldr	r1, [r7, #24]
 800e0e6:	69fa      	ldr	r2, [r7, #28]
 800e0e8:	e841 2300 	strex	r3, r2, [r1]
 800e0ec:	617b      	str	r3, [r7, #20]
   return(result);
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d1e6      	bne.n	800e0c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2220      	movs	r2, #32
 800e0f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e102:	2303      	movs	r3, #3
 800e104:	e011      	b.n	800e12a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2220      	movs	r2, #32
 800e10a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2220      	movs	r2, #32
 800e110:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2200      	movs	r2, #0
 800e118:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2200      	movs	r2, #0
 800e11e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2200      	movs	r2, #0
 800e124:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800e128:	2300      	movs	r3, #0
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	3728      	adds	r7, #40	@ 0x28
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}

0800e132 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e132:	b580      	push	{r7, lr}
 800e134:	b084      	sub	sp, #16
 800e136:	af00      	add	r7, sp, #0
 800e138:	60f8      	str	r0, [r7, #12]
 800e13a:	60b9      	str	r1, [r7, #8]
 800e13c:	603b      	str	r3, [r7, #0]
 800e13e:	4613      	mov	r3, r2
 800e140:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e142:	e04f      	b.n	800e1e4 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e144:	69bb      	ldr	r3, [r7, #24]
 800e146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e14a:	d04b      	beq.n	800e1e4 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e14c:	f7f8 fbda 	bl	8006904 <HAL_GetTick>
 800e150:	4602      	mov	r2, r0
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	1ad3      	subs	r3, r2, r3
 800e156:	69ba      	ldr	r2, [r7, #24]
 800e158:	429a      	cmp	r2, r3
 800e15a:	d302      	bcc.n	800e162 <UART_WaitOnFlagUntilTimeout+0x30>
 800e15c:	69bb      	ldr	r3, [r7, #24]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d101      	bne.n	800e166 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e162:	2303      	movs	r3, #3
 800e164:	e04e      	b.n	800e204 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	f003 0304 	and.w	r3, r3, #4
 800e170:	2b00      	cmp	r3, #0
 800e172:	d037      	beq.n	800e1e4 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	2b80      	cmp	r3, #128	@ 0x80
 800e178:	d034      	beq.n	800e1e4 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	2b40      	cmp	r3, #64	@ 0x40
 800e17e:	d031      	beq.n	800e1e4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	69db      	ldr	r3, [r3, #28]
 800e186:	f003 0308 	and.w	r3, r3, #8
 800e18a:	2b08      	cmp	r3, #8
 800e18c:	d110      	bne.n	800e1b0 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	2208      	movs	r2, #8
 800e194:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e196:	68f8      	ldr	r0, [r7, #12]
 800e198:	f000 f838 	bl	800e20c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	2208      	movs	r2, #8
 800e1a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	e029      	b.n	800e204 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	69db      	ldr	r3, [r3, #28]
 800e1b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e1ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e1be:	d111      	bne.n	800e1e4 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e1c8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e1ca:	68f8      	ldr	r0, [r7, #12]
 800e1cc:	f000 f81e 	bl	800e20c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	2220      	movs	r2, #32
 800e1d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800e1e0:	2303      	movs	r3, #3
 800e1e2:	e00f      	b.n	800e204 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	69da      	ldr	r2, [r3, #28]
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	4013      	ands	r3, r2
 800e1ee:	68ba      	ldr	r2, [r7, #8]
 800e1f0:	429a      	cmp	r2, r3
 800e1f2:	bf0c      	ite	eq
 800e1f4:	2301      	moveq	r3, #1
 800e1f6:	2300      	movne	r3, #0
 800e1f8:	b2db      	uxtb	r3, r3
 800e1fa:	461a      	mov	r2, r3
 800e1fc:	79fb      	ldrb	r3, [r7, #7]
 800e1fe:	429a      	cmp	r2, r3
 800e200:	d0a0      	beq.n	800e144 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e202:	2300      	movs	r3, #0
}
 800e204:	4618      	mov	r0, r3
 800e206:	3710      	adds	r7, #16
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}

0800e20c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e20c:	b480      	push	{r7}
 800e20e:	b095      	sub	sp, #84	@ 0x54
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e21a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e21c:	e853 3f00 	ldrex	r3, [r3]
 800e220:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e224:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e228:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	461a      	mov	r2, r3
 800e230:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e232:	643b      	str	r3, [r7, #64]	@ 0x40
 800e234:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e236:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e238:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e23a:	e841 2300 	strex	r3, r2, [r1]
 800e23e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e242:	2b00      	cmp	r3, #0
 800e244:	d1e6      	bne.n	800e214 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	3308      	adds	r3, #8
 800e24c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e24e:	6a3b      	ldr	r3, [r7, #32]
 800e250:	e853 3f00 	ldrex	r3, [r3]
 800e254:	61fb      	str	r3, [r7, #28]
   return(result);
 800e256:	69fb      	ldr	r3, [r7, #28]
 800e258:	f023 0301 	bic.w	r3, r3, #1
 800e25c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	3308      	adds	r3, #8
 800e264:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e266:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e268:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e26a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e26c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e26e:	e841 2300 	strex	r3, r2, [r1]
 800e272:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e276:	2b00      	cmp	r3, #0
 800e278:	d1e5      	bne.n	800e246 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e27e:	2b01      	cmp	r3, #1
 800e280:	d118      	bne.n	800e2b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	e853 3f00 	ldrex	r3, [r3]
 800e28e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	f023 0310 	bic.w	r3, r3, #16
 800e296:	647b      	str	r3, [r7, #68]	@ 0x44
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	461a      	mov	r2, r3
 800e29e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2a0:	61bb      	str	r3, [r7, #24]
 800e2a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2a4:	6979      	ldr	r1, [r7, #20]
 800e2a6:	69ba      	ldr	r2, [r7, #24]
 800e2a8:	e841 2300 	strex	r3, r2, [r1]
 800e2ac:	613b      	str	r3, [r7, #16]
   return(result);
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d1e6      	bne.n	800e282 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2220      	movs	r2, #32
 800e2b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2200      	movs	r2, #0
 800e2c0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800e2c8:	bf00      	nop
 800e2ca:	3754      	adds	r7, #84	@ 0x54
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d2:	4770      	bx	lr

0800e2d4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e2d4:	b480      	push	{r7}
 800e2d6:	b083      	sub	sp, #12
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f103 0208 	add.w	r2, r3, #8
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f04f 32ff 	mov.w	r2, #4294967295
 800e2ec:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f103 0208 	add.w	r2, r3, #8
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f103 0208 	add.w	r2, r3, #8
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2200      	movs	r2, #0
 800e306:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 800e308:	bf00      	nop
 800e30a:	370c      	adds	r7, #12
 800e30c:	46bd      	mov	sp, r7
 800e30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e312:	4770      	bx	lr

0800e314 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e314:	b480      	push	{r7}
 800e316:	b083      	sub	sp, #12
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2200      	movs	r2, #0
 800e320:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 800e322:	bf00      	nop
 800e324:	370c      	adds	r7, #12
 800e326:	46bd      	mov	sp, r7
 800e328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32c:	4770      	bx	lr

0800e32e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800e32e:	b480      	push	{r7}
 800e330:	b085      	sub	sp, #20
 800e332:	af00      	add	r7, sp, #0
 800e334:	6078      	str	r0, [r7, #4]
 800e336:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	685b      	ldr	r3, [r3, #4]
 800e33c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	68fa      	ldr	r2, [r7, #12]
 800e342:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	689a      	ldr	r2, [r3, #8]
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	689b      	ldr	r3, [r3, #8]
 800e350:	683a      	ldr	r2, [r7, #0]
 800e352:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	683a      	ldr	r2, [r7, #0]
 800e358:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	687a      	ldr	r2, [r7, #4]
 800e35e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	1c5a      	adds	r2, r3, #1
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 800e36a:	bf00      	nop
 800e36c:	3714      	adds	r7, #20
 800e36e:	46bd      	mov	sp, r7
 800e370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e374:	4770      	bx	lr

0800e376 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800e376:	b480      	push	{r7}
 800e378:	b085      	sub	sp, #20
 800e37a:	af00      	add	r7, sp, #0
 800e37c:	6078      	str	r0, [r7, #4]
 800e37e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e38c:	d103      	bne.n	800e396 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	691b      	ldr	r3, [r3, #16]
 800e392:	60fb      	str	r3, [r7, #12]
 800e394:	e00c      	b.n	800e3b0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	3308      	adds	r3, #8
 800e39a:	60fb      	str	r3, [r7, #12]
 800e39c:	e002      	b.n	800e3a4 <vListInsert+0x2e>
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	685b      	ldr	r3, [r3, #4]
 800e3a2:	60fb      	str	r3, [r7, #12]
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	685b      	ldr	r3, [r3, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	68ba      	ldr	r2, [r7, #8]
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d2f6      	bcs.n	800e39e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	685a      	ldr	r2, [r3, #4]
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	685b      	ldr	r3, [r3, #4]
 800e3bc:	683a      	ldr	r2, [r7, #0]
 800e3be:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	68fa      	ldr	r2, [r7, #12]
 800e3c4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	683a      	ldr	r2, [r7, #0]
 800e3ca:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	687a      	ldr	r2, [r7, #4]
 800e3d0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	1c5a      	adds	r2, r3, #1
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 800e3dc:	bf00      	nop
 800e3de:	3714      	adds	r7, #20
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e6:	4770      	bx	lr

0800e3e8 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e3e8:	b480      	push	{r7}
 800e3ea:	b085      	sub	sp, #20
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	691b      	ldr	r3, [r3, #16]
 800e3f4:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	685b      	ldr	r3, [r3, #4]
 800e3fa:	687a      	ldr	r2, [r7, #4]
 800e3fc:	6892      	ldr	r2, [r2, #8]
 800e3fe:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	689b      	ldr	r3, [r3, #8]
 800e404:	687a      	ldr	r2, [r7, #4]
 800e406:	6852      	ldr	r2, [r2, #4]
 800e408:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	685b      	ldr	r3, [r3, #4]
 800e40e:	687a      	ldr	r2, [r7, #4]
 800e410:	429a      	cmp	r2, r3
 800e412:	d103      	bne.n	800e41c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	689a      	ldr	r2, [r3, #8]
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2200      	movs	r2, #0
 800e420:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	1e5a      	subs	r2, r3, #1
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
}
 800e430:	4618      	mov	r0, r3
 800e432:	3714      	adds	r7, #20
 800e434:	46bd      	mov	sp, r7
 800e436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43a:	4770      	bx	lr

0800e43c <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b086      	sub	sp, #24
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
 800e444:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800e446:	2301      	movs	r3, #1
 800e448:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 800e44e:	693b      	ldr	r3, [r7, #16]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d110      	bne.n	800e476 <xQueueGenericReset+0x3a>
    __asm volatile
 800e454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e458:	b672      	cpsid	i
 800e45a:	f383 8811 	msr	BASEPRI, r3
 800e45e:	f3bf 8f6f 	isb	sy
 800e462:	f3bf 8f4f 	dsb	sy
 800e466:	b662      	cpsie	i
 800e468:	60fb      	str	r3, [r7, #12]
}
 800e46a:	bf00      	nop
 800e46c:	f240 1137 	movw	r1, #311	@ 0x137
 800e470:	483f      	ldr	r0, [pc, #252]	@ (800e570 <xQueueGenericReset+0x134>)
 800e472:	f7f7 fc51 	bl	8005d18 <vAssertCalled>

    if( ( pxQueue != NULL ) &&
 800e476:	693b      	ldr	r3, [r7, #16]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d05d      	beq.n	800e538 <xQueueGenericReset+0xfc>
        ( pxQueue->uxLength >= 1U ) &&
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800e480:	2b00      	cmp	r3, #0
 800e482:	d059      	beq.n	800e538 <xQueueGenericReset+0xfc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800e484:	693b      	ldr	r3, [r7, #16]
 800e486:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e488:	693b      	ldr	r3, [r7, #16]
 800e48a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e48c:	2100      	movs	r1, #0
 800e48e:	fba3 2302 	umull	r2, r3, r3, r2
 800e492:	2b00      	cmp	r3, #0
 800e494:	d000      	beq.n	800e498 <xQueueGenericReset+0x5c>
 800e496:	2101      	movs	r1, #1
 800e498:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d14c      	bne.n	800e538 <xQueueGenericReset+0xfc>
    {
        taskENTER_CRITICAL();
 800e49e:	f002 ffef 	bl	8011480 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e4a2:	693b      	ldr	r3, [r7, #16]
 800e4a4:	681a      	ldr	r2, [r3, #0]
 800e4a6:	693b      	ldr	r3, [r7, #16]
 800e4a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e4aa:	6939      	ldr	r1, [r7, #16]
 800e4ac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e4ae:	fb01 f303 	mul.w	r3, r1, r3
 800e4b2:	441a      	add	r2, r3
 800e4b4:	693b      	ldr	r3, [r7, #16]
 800e4b6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e4b8:	693b      	ldr	r3, [r7, #16]
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800e4be:	693b      	ldr	r3, [r7, #16]
 800e4c0:	681a      	ldr	r2, [r3, #0]
 800e4c2:	693b      	ldr	r3, [r7, #16]
 800e4c4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 800e4c6:	693b      	ldr	r3, [r7, #16]
 800e4c8:	681a      	ldr	r2, [r3, #0]
 800e4ca:	693b      	ldr	r3, [r7, #16]
 800e4cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e4ce:	3b01      	subs	r3, #1
 800e4d0:	6939      	ldr	r1, [r7, #16]
 800e4d2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e4d4:	fb01 f303 	mul.w	r3, r1, r3
 800e4d8:	441a      	add	r2, r3
 800e4da:	693b      	ldr	r3, [r7, #16]
 800e4dc:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800e4de:	693b      	ldr	r3, [r7, #16]
 800e4e0:	22ff      	movs	r2, #255	@ 0xff
 800e4e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800e4e6:	693b      	ldr	r3, [r7, #16]
 800e4e8:	22ff      	movs	r2, #255	@ 0xff
 800e4ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d114      	bne.n	800e51e <xQueueGenericReset+0xe2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e4f4:	693b      	ldr	r3, [r7, #16]
 800e4f6:	691b      	ldr	r3, [r3, #16]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d01a      	beq.n	800e532 <xQueueGenericReset+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e4fc:	693b      	ldr	r3, [r7, #16]
 800e4fe:	3310      	adds	r3, #16
 800e500:	4618      	mov	r0, r3
 800e502:	f001 fdc9 	bl	8010098 <xTaskRemoveFromEventList>
 800e506:	4603      	mov	r3, r0
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d012      	beq.n	800e532 <xQueueGenericReset+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800e50c:	4b19      	ldr	r3, [pc, #100]	@ (800e574 <xQueueGenericReset+0x138>)
 800e50e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e512:	601a      	str	r2, [r3, #0]
 800e514:	f3bf 8f4f 	dsb	sy
 800e518:	f3bf 8f6f 	isb	sy
 800e51c:	e009      	b.n	800e532 <xQueueGenericReset+0xf6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e51e:	693b      	ldr	r3, [r7, #16]
 800e520:	3310      	adds	r3, #16
 800e522:	4618      	mov	r0, r3
 800e524:	f7ff fed6 	bl	800e2d4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e528:	693b      	ldr	r3, [r7, #16]
 800e52a:	3324      	adds	r3, #36	@ 0x24
 800e52c:	4618      	mov	r0, r3
 800e52e:	f7ff fed1 	bl	800e2d4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800e532:	f002 ffdd 	bl	80114f0 <vPortExitCritical>
 800e536:	e001      	b.n	800e53c <xQueueGenericReset+0x100>
    }
    else
    {
        xReturn = pdFAIL;
 800e538:	2300      	movs	r3, #0
 800e53a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800e53c:	697b      	ldr	r3, [r7, #20]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d110      	bne.n	800e564 <xQueueGenericReset+0x128>
    __asm volatile
 800e542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e546:	b672      	cpsid	i
 800e548:	f383 8811 	msr	BASEPRI, r3
 800e54c:	f3bf 8f6f 	isb	sy
 800e550:	f3bf 8f4f 	dsb	sy
 800e554:	b662      	cpsie	i
 800e556:	60bb      	str	r3, [r7, #8]
}
 800e558:	bf00      	nop
 800e55a:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 800e55e:	4804      	ldr	r0, [pc, #16]	@ (800e570 <xQueueGenericReset+0x134>)
 800e560:	f7f7 fbda 	bl	8005d18 <vAssertCalled>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 800e564:	697b      	ldr	r3, [r7, #20]
}
 800e566:	4618      	mov	r0, r3
 800e568:	3718      	adds	r7, #24
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}
 800e56e:	bf00      	nop
 800e570:	08017c1c 	.word	0x08017c1c
 800e574:	e000ed04 	.word	0xe000ed04

0800e578 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800e578:	b580      	push	{r7, lr}
 800e57a:	b08a      	sub	sp, #40	@ 0x28
 800e57c:	af02      	add	r7, sp, #8
 800e57e:	60f8      	str	r0, [r7, #12]
 800e580:	60b9      	str	r1, [r7, #8]
 800e582:	4613      	mov	r3, r2
 800e584:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800e586:	2300      	movs	r3, #0
 800e588:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d02e      	beq.n	800e5ee <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800e590:	2100      	movs	r1, #0
 800e592:	68ba      	ldr	r2, [r7, #8]
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	fba3 2302 	umull	r2, r3, r3, r2
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d000      	beq.n	800e5a0 <xQueueGenericCreate+0x28>
 800e59e:	2101      	movs	r1, #1
 800e5a0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d123      	bne.n	800e5ee <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	68ba      	ldr	r2, [r7, #8]
 800e5aa:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800e5ae:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800e5b2:	d81c      	bhi.n	800e5ee <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	68ba      	ldr	r2, [r7, #8]
 800e5b8:	fb02 f303 	mul.w	r3, r2, r3
 800e5bc:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e5be:	69bb      	ldr	r3, [r7, #24]
 800e5c0:	3350      	adds	r3, #80	@ 0x50
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f7f7 ff10 	bl	80063e8 <pvPortMalloc>
 800e5c8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800e5ca:	69fb      	ldr	r3, [r7, #28]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d022      	beq.n	800e616 <xQueueGenericCreate+0x9e>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e5d0:	69fb      	ldr	r3, [r7, #28]
 800e5d2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	3350      	adds	r3, #80	@ 0x50
 800e5d8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e5da:	79fa      	ldrb	r2, [r7, #7]
 800e5dc:	69fb      	ldr	r3, [r7, #28]
 800e5de:	9300      	str	r3, [sp, #0]
 800e5e0:	4613      	mov	r3, r2
 800e5e2:	697a      	ldr	r2, [r7, #20]
 800e5e4:	68b9      	ldr	r1, [r7, #8]
 800e5e6:	68f8      	ldr	r0, [r7, #12]
 800e5e8:	f000 f81c 	bl	800e624 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800e5ec:	e013      	b.n	800e616 <xQueueGenericCreate+0x9e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800e5ee:	69fb      	ldr	r3, [r7, #28]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d110      	bne.n	800e616 <xQueueGenericCreate+0x9e>
    __asm volatile
 800e5f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5f8:	b672      	cpsid	i
 800e5fa:	f383 8811 	msr	BASEPRI, r3
 800e5fe:	f3bf 8f6f 	isb	sy
 800e602:	f3bf 8f4f 	dsb	sy
 800e606:	b662      	cpsie	i
 800e608:	613b      	str	r3, [r7, #16]
}
 800e60a:	bf00      	nop
 800e60c:	f240 212a 	movw	r1, #554	@ 0x22a
 800e610:	4803      	ldr	r0, [pc, #12]	@ (800e620 <xQueueGenericCreate+0xa8>)
 800e612:	f7f7 fb81 	bl	8005d18 <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 800e616:	69fb      	ldr	r3, [r7, #28]
    }
 800e618:	4618      	mov	r0, r3
 800e61a:	3720      	adds	r7, #32
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}
 800e620:	08017c1c 	.word	0x08017c1c

0800e624 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b084      	sub	sp, #16
 800e628:	af00      	add	r7, sp, #0
 800e62a:	60f8      	str	r0, [r7, #12]
 800e62c:	60b9      	str	r1, [r7, #8]
 800e62e:	607a      	str	r2, [r7, #4]
 800e630:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d103      	bne.n	800e640 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e638:	69bb      	ldr	r3, [r7, #24]
 800e63a:	69ba      	ldr	r2, [r7, #24]
 800e63c:	601a      	str	r2, [r3, #0]
 800e63e:	e002      	b.n	800e646 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e640:	69bb      	ldr	r3, [r7, #24]
 800e642:	687a      	ldr	r2, [r7, #4]
 800e644:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800e646:	69bb      	ldr	r3, [r7, #24]
 800e648:	68fa      	ldr	r2, [r7, #12]
 800e64a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800e64c:	69bb      	ldr	r3, [r7, #24]
 800e64e:	68ba      	ldr	r2, [r7, #8]
 800e650:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e652:	2101      	movs	r1, #1
 800e654:	69b8      	ldr	r0, [r7, #24]
 800e656:	f7ff fef1 	bl	800e43c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800e65a:	69bb      	ldr	r3, [r7, #24]
 800e65c:	78fa      	ldrb	r2, [r7, #3]
 800e65e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800e662:	bf00      	nop
 800e664:	3710      	adds	r7, #16
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}

0800e66a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 800e66a:	b580      	push	{r7, lr}
 800e66c:	b082      	sub	sp, #8
 800e66e:	af00      	add	r7, sp, #0
 800e670:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d00e      	beq.n	800e696 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2200      	movs	r2, #0
 800e67c:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	2200      	movs	r2, #0
 800e682:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2200      	movs	r2, #0
 800e688:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e68a:	2300      	movs	r3, #0
 800e68c:	2200      	movs	r2, #0
 800e68e:	2100      	movs	r1, #0
 800e690:	6878      	ldr	r0, [r7, #4]
 800e692:	f000 f897 	bl	800e7c4 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 800e696:	bf00      	nop
 800e698:	3708      	adds	r7, #8
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}

0800e69e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 800e69e:	b580      	push	{r7, lr}
 800e6a0:	b086      	sub	sp, #24
 800e6a2:	af00      	add	r7, sp, #0
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e6a8:	2301      	movs	r3, #1
 800e6aa:	617b      	str	r3, [r7, #20]
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueCreateMutex( ucQueueType );

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e6b0:	79fb      	ldrb	r3, [r7, #7]
 800e6b2:	461a      	mov	r2, r3
 800e6b4:	6939      	ldr	r1, [r7, #16]
 800e6b6:	6978      	ldr	r0, [r7, #20]
 800e6b8:	f7ff ff5e 	bl	800e578 <xQueueGenericCreate>
 800e6bc:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e6be:	68f8      	ldr	r0, [r7, #12]
 800e6c0:	f7ff ffd3 	bl	800e66a <prvInitialiseMutex>

        traceRETURN_xQueueCreateMutex( xNewQueue );

        return xNewQueue;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
    }
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3718      	adds	r7, #24
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}
	...

0800e6d0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
    {
 800e6d0:	b590      	push	{r4, r7, lr}
 800e6d2:	b087      	sub	sp, #28
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueGiveMutexRecursive( xMutex );

        configASSERT( pxMutex );
 800e6dc:	693b      	ldr	r3, [r7, #16]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d110      	bne.n	800e704 <xQueueGiveMutexRecursive+0x34>
    __asm volatile
 800e6e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6e6:	b672      	cpsid	i
 800e6e8:	f383 8811 	msr	BASEPRI, r3
 800e6ec:	f3bf 8f6f 	isb	sy
 800e6f0:	f3bf 8f4f 	dsb	sy
 800e6f4:	b662      	cpsie	i
 800e6f6:	60fb      	str	r3, [r7, #12]
}
 800e6f8:	bf00      	nop
 800e6fa:	f240 21fb 	movw	r1, #763	@ 0x2fb
 800e6fe:	4811      	ldr	r0, [pc, #68]	@ (800e744 <xQueueGiveMutexRecursive+0x74>)
 800e700:	f7f7 fb0a 	bl	8005d18 <vAssertCalled>
         * change outside of this task.  If this task does not hold the mutex then
         * pxMutexHolder can never coincidentally equal the tasks handle, and as
         * this is the only condition we are interested in it does not matter if
         * pxMutexHolder is accessed simultaneously by another task.  Therefore no
         * mutual exclusion is required to test the pxMutexHolder variable. */
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	689c      	ldr	r4, [r3, #8]
 800e708:	f001 ffd2 	bl	80106b0 <xTaskGetCurrentTaskHandle>
 800e70c:	4603      	mov	r3, r0
 800e70e:	429c      	cmp	r4, r3
 800e710:	d111      	bne.n	800e736 <xQueueGiveMutexRecursive+0x66>
            /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
             * the task handle, therefore no underflow check is required.  Also,
             * uxRecursiveCallCount is only modified by the mutex holder, and as
             * there can only be one, no mutual exclusion is required to modify the
             * uxRecursiveCallCount member. */
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	68db      	ldr	r3, [r3, #12]
 800e716:	1e5a      	subs	r2, r3, #1
 800e718:	693b      	ldr	r3, [r7, #16]
 800e71a:	60da      	str	r2, [r3, #12]

            /* Has the recursive call count unwound to 0? */
            if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	68db      	ldr	r3, [r3, #12]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d105      	bne.n	800e730 <xQueueGiveMutexRecursive+0x60>
            {
                /* Return the mutex.  This will automatically unblock any other
                 * task that might be waiting to access the mutex. */
                ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800e724:	2300      	movs	r3, #0
 800e726:	2200      	movs	r2, #0
 800e728:	2100      	movs	r1, #0
 800e72a:	6938      	ldr	r0, [r7, #16]
 800e72c:	f000 f84a 	bl	800e7c4 <xQueueGenericSend>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            xReturn = pdPASS;
 800e730:	2301      	movs	r3, #1
 800e732:	617b      	str	r3, [r7, #20]
 800e734:	e001      	b.n	800e73a <xQueueGiveMutexRecursive+0x6a>
        }
        else
        {
            /* The mutex cannot be given because the calling task is not the
             * holder. */
            xReturn = pdFAIL;
 800e736:	2300      	movs	r3, #0
 800e738:	617b      	str	r3, [r7, #20]
            traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
        }

        traceRETURN_xQueueGiveMutexRecursive( xReturn );

        return xReturn;
 800e73a:	697b      	ldr	r3, [r7, #20]
    }
 800e73c:	4618      	mov	r0, r3
 800e73e:	371c      	adds	r7, #28
 800e740:	46bd      	mov	sp, r7
 800e742:	bd90      	pop	{r4, r7, pc}
 800e744:	08017c1c 	.word	0x08017c1c

0800e748 <xQueueTakeMutexRecursive>:

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
                                         TickType_t xTicksToWait )
    {
 800e748:	b590      	push	{r4, r7, lr}
 800e74a:	b087      	sub	sp, #28
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
 800e750:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueTakeMutexRecursive( xMutex, xTicksToWait );

        configASSERT( pxMutex );
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d110      	bne.n	800e77e <xQueueTakeMutexRecursive+0x36>
    __asm volatile
 800e75c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e760:	b672      	cpsid	i
 800e762:	f383 8811 	msr	BASEPRI, r3
 800e766:	f3bf 8f6f 	isb	sy
 800e76a:	f3bf 8f4f 	dsb	sy
 800e76e:	b662      	cpsie	i
 800e770:	60fb      	str	r3, [r7, #12]
}
 800e772:	bf00      	nop
 800e774:	f240 3137 	movw	r1, #823	@ 0x337
 800e778:	4811      	ldr	r0, [pc, #68]	@ (800e7c0 <xQueueTakeMutexRecursive+0x78>)
 800e77a:	f7f7 facd 	bl	8005d18 <vAssertCalled>
        /* Comments regarding mutual exclusion as per those within
         * xQueueGiveMutexRecursive(). */

        traceTAKE_MUTEX_RECURSIVE( pxMutex );

        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e77e:	693b      	ldr	r3, [r7, #16]
 800e780:	689c      	ldr	r4, [r3, #8]
 800e782:	f001 ff95 	bl	80106b0 <xTaskGetCurrentTaskHandle>
 800e786:	4603      	mov	r3, r0
 800e788:	429c      	cmp	r4, r3
 800e78a:	d107      	bne.n	800e79c <xQueueTakeMutexRecursive+0x54>
        {
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	68db      	ldr	r3, [r3, #12]
 800e790:	1c5a      	adds	r2, r3, #1
 800e792:	693b      	ldr	r3, [r7, #16]
 800e794:	60da      	str	r2, [r3, #12]
            xReturn = pdPASS;
 800e796:	2301      	movs	r3, #1
 800e798:	617b      	str	r3, [r7, #20]
 800e79a:	e00c      	b.n	800e7b6 <xQueueTakeMutexRecursive+0x6e>
        }
        else
        {
            xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e79c:	6839      	ldr	r1, [r7, #0]
 800e79e:	6938      	ldr	r0, [r7, #16]
 800e7a0:	f000 fa1c 	bl	800ebdc <xQueueSemaphoreTake>
 800e7a4:	6178      	str	r0, [r7, #20]

            /* pdPASS will only be returned if the mutex was successfully
             * obtained.  The calling task may have entered the Blocked state
             * before reaching here. */
            if( xReturn != pdFAIL )
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d004      	beq.n	800e7b6 <xQueueTakeMutexRecursive+0x6e>
            {
                ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e7ac:	693b      	ldr	r3, [r7, #16]
 800e7ae:	68db      	ldr	r3, [r3, #12]
 800e7b0:	1c5a      	adds	r2, r3, #1
 800e7b2:	693b      	ldr	r3, [r7, #16]
 800e7b4:	60da      	str	r2, [r3, #12]
            }
        }

        traceRETURN_xQueueTakeMutexRecursive( xReturn );

        return xReturn;
 800e7b6:	697b      	ldr	r3, [r7, #20]
    }
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	371c      	adds	r7, #28
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd90      	pop	{r4, r7, pc}
 800e7c0:	08017c1c 	.word	0x08017c1c

0800e7c4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b08e      	sub	sp, #56	@ 0x38
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	60f8      	str	r0, [r7, #12]
 800e7cc:	60b9      	str	r1, [r7, #8]
 800e7ce:	607a      	str	r2, [r7, #4]
 800e7d0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 800e7da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d110      	bne.n	800e802 <xQueueGenericSend+0x3e>
    __asm volatile
 800e7e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7e4:	b672      	cpsid	i
 800e7e6:	f383 8811 	msr	BASEPRI, r3
 800e7ea:	f3bf 8f6f 	isb	sy
 800e7ee:	f3bf 8f4f 	dsb	sy
 800e7f2:	b662      	cpsie	i
 800e7f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e7f6:	bf00      	nop
 800e7f8:	f240 31b6 	movw	r1, #950	@ 0x3b6
 800e7fc:	487b      	ldr	r0, [pc, #492]	@ (800e9ec <xQueueGenericSend+0x228>)
 800e7fe:	f7f7 fa8b 	bl	8005d18 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d103      	bne.n	800e810 <xQueueGenericSend+0x4c>
 800e808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e80a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d101      	bne.n	800e814 <xQueueGenericSend+0x50>
 800e810:	2301      	movs	r3, #1
 800e812:	e000      	b.n	800e816 <xQueueGenericSend+0x52>
 800e814:	2300      	movs	r3, #0
 800e816:	2b00      	cmp	r3, #0
 800e818:	d110      	bne.n	800e83c <xQueueGenericSend+0x78>
    __asm volatile
 800e81a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e81e:	b672      	cpsid	i
 800e820:	f383 8811 	msr	BASEPRI, r3
 800e824:	f3bf 8f6f 	isb	sy
 800e828:	f3bf 8f4f 	dsb	sy
 800e82c:	b662      	cpsie	i
 800e82e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e830:	bf00      	nop
 800e832:	f240 31b7 	movw	r1, #951	@ 0x3b7
 800e836:	486d      	ldr	r0, [pc, #436]	@ (800e9ec <xQueueGenericSend+0x228>)
 800e838:	f7f7 fa6e 	bl	8005d18 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	2b02      	cmp	r3, #2
 800e840:	d103      	bne.n	800e84a <xQueueGenericSend+0x86>
 800e842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e846:	2b01      	cmp	r3, #1
 800e848:	d101      	bne.n	800e84e <xQueueGenericSend+0x8a>
 800e84a:	2301      	movs	r3, #1
 800e84c:	e000      	b.n	800e850 <xQueueGenericSend+0x8c>
 800e84e:	2300      	movs	r3, #0
 800e850:	2b00      	cmp	r3, #0
 800e852:	d110      	bne.n	800e876 <xQueueGenericSend+0xb2>
    __asm volatile
 800e854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e858:	b672      	cpsid	i
 800e85a:	f383 8811 	msr	BASEPRI, r3
 800e85e:	f3bf 8f6f 	isb	sy
 800e862:	f3bf 8f4f 	dsb	sy
 800e866:	b662      	cpsie	i
 800e868:	623b      	str	r3, [r7, #32]
}
 800e86a:	bf00      	nop
 800e86c:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
 800e870:	485e      	ldr	r0, [pc, #376]	@ (800e9ec <xQueueGenericSend+0x228>)
 800e872:	f7f7 fa51 	bl	8005d18 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e876:	f001 ff2b 	bl	80106d0 <xTaskGetSchedulerState>
 800e87a:	4603      	mov	r3, r0
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d102      	bne.n	800e886 <xQueueGenericSend+0xc2>
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d101      	bne.n	800e88a <xQueueGenericSend+0xc6>
 800e886:	2301      	movs	r3, #1
 800e888:	e000      	b.n	800e88c <xQueueGenericSend+0xc8>
 800e88a:	2300      	movs	r3, #0
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d110      	bne.n	800e8b2 <xQueueGenericSend+0xee>
    __asm volatile
 800e890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e894:	b672      	cpsid	i
 800e896:	f383 8811 	msr	BASEPRI, r3
 800e89a:	f3bf 8f6f 	isb	sy
 800e89e:	f3bf 8f4f 	dsb	sy
 800e8a2:	b662      	cpsie	i
 800e8a4:	61fb      	str	r3, [r7, #28]
}
 800e8a6:	bf00      	nop
 800e8a8:	f240 31bb 	movw	r1, #955	@ 0x3bb
 800e8ac:	484f      	ldr	r0, [pc, #316]	@ (800e9ec <xQueueGenericSend+0x228>)
 800e8ae:	f7f7 fa33 	bl	8005d18 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800e8b2:	f002 fde5 	bl	8011480 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e8ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d302      	bcc.n	800e8c8 <xQueueGenericSend+0x104>
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	2b02      	cmp	r3, #2
 800e8c6:	d129      	bne.n	800e91c <xQueueGenericSend+0x158>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e8c8:	683a      	ldr	r2, [r7, #0]
 800e8ca:	68b9      	ldr	r1, [r7, #8]
 800e8cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e8ce:	f000 fad3 	bl	800ee78 <prvCopyDataToQueue>
 800e8d2:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e8d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d010      	beq.n	800e8fe <xQueueGenericSend+0x13a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e8dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8de:	3324      	adds	r3, #36	@ 0x24
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f001 fbd9 	bl	8010098 <xTaskRemoveFromEventList>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d013      	beq.n	800e914 <xQueueGenericSend+0x150>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800e8ec:	4b40      	ldr	r3, [pc, #256]	@ (800e9f0 <xQueueGenericSend+0x22c>)
 800e8ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e8f2:	601a      	str	r2, [r3, #0]
 800e8f4:	f3bf 8f4f 	dsb	sy
 800e8f8:	f3bf 8f6f 	isb	sy
 800e8fc:	e00a      	b.n	800e914 <xQueueGenericSend+0x150>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800e8fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e900:	2b00      	cmp	r3, #0
 800e902:	d007      	beq.n	800e914 <xQueueGenericSend+0x150>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800e904:	4b3a      	ldr	r3, [pc, #232]	@ (800e9f0 <xQueueGenericSend+0x22c>)
 800e906:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e90a:	601a      	str	r2, [r3, #0]
 800e90c:	f3bf 8f4f 	dsb	sy
 800e910:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800e914:	f002 fdec 	bl	80114f0 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 800e918:	2301      	movs	r3, #1
 800e91a:	e063      	b.n	800e9e4 <xQueueGenericSend+0x220>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d103      	bne.n	800e92a <xQueueGenericSend+0x166>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800e922:	f002 fde5 	bl	80114f0 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 800e926:	2300      	movs	r3, #0
 800e928:	e05c      	b.n	800e9e4 <xQueueGenericSend+0x220>
                }
                else if( xEntryTimeSet == pdFALSE )
 800e92a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d106      	bne.n	800e93e <xQueueGenericSend+0x17a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800e930:	f107 0314 	add.w	r3, r7, #20
 800e934:	4618      	mov	r0, r3
 800e936:	f001 fc8d 	bl	8010254 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800e93a:	2301      	movs	r3, #1
 800e93c:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800e93e:	f002 fdd7 	bl	80114f0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800e942:	f000 ffa1 	bl	800f888 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800e946:	f002 fd9b 	bl	8011480 <vPortEnterCritical>
 800e94a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e94c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e950:	b25b      	sxtb	r3, r3
 800e952:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e956:	d103      	bne.n	800e960 <xQueueGenericSend+0x19c>
 800e958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e95a:	2200      	movs	r2, #0
 800e95c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e962:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e966:	b25b      	sxtb	r3, r3
 800e968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e96c:	d103      	bne.n	800e976 <xQueueGenericSend+0x1b2>
 800e96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e970:	2200      	movs	r2, #0
 800e972:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e976:	f002 fdbb 	bl	80114f0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e97a:	1d3a      	adds	r2, r7, #4
 800e97c:	f107 0314 	add.w	r3, r7, #20
 800e980:	4611      	mov	r1, r2
 800e982:	4618      	mov	r0, r3
 800e984:	f001 fc7c 	bl	8010280 <xTaskCheckForTimeOut>
 800e988:	4603      	mov	r3, r0
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d124      	bne.n	800e9d8 <xQueueGenericSend+0x214>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e98e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e990:	f000 fb6a 	bl	800f068 <prvIsQueueFull>
 800e994:	4603      	mov	r3, r0
 800e996:	2b00      	cmp	r3, #0
 800e998:	d018      	beq.n	800e9cc <xQueueGenericSend+0x208>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e99c:	3310      	adds	r3, #16
 800e99e:	687a      	ldr	r2, [r7, #4]
 800e9a0:	4611      	mov	r1, r2
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	f001 fafe 	bl	800ffa4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800e9a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e9aa:	f000 faf5 	bl	800ef98 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800e9ae:	f000 ff79 	bl	800f8a4 <xTaskResumeAll>
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	f47f af7c 	bne.w	800e8b2 <xQueueGenericSend+0xee>
                {
                    taskYIELD_WITHIN_API();
 800e9ba:	4b0d      	ldr	r3, [pc, #52]	@ (800e9f0 <xQueueGenericSend+0x22c>)
 800e9bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e9c0:	601a      	str	r2, [r3, #0]
 800e9c2:	f3bf 8f4f 	dsb	sy
 800e9c6:	f3bf 8f6f 	isb	sy
 800e9ca:	e772      	b.n	800e8b2 <xQueueGenericSend+0xee>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800e9cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e9ce:	f000 fae3 	bl	800ef98 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800e9d2:	f000 ff67 	bl	800f8a4 <xTaskResumeAll>
 800e9d6:	e76c      	b.n	800e8b2 <xQueueGenericSend+0xee>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800e9d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e9da:	f000 fadd 	bl	800ef98 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800e9de:	f000 ff61 	bl	800f8a4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 800e9e2:	2300      	movs	r3, #0
        }
    }
}
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	3738      	adds	r7, #56	@ 0x38
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd80      	pop	{r7, pc}
 800e9ec:	08017c1c 	.word	0x08017c1c
 800e9f0:	e000ed04 	.word	0xe000ed04

0800e9f4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b08c      	sub	sp, #48	@ 0x30
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	60f8      	str	r0, [r7, #12]
 800e9fc:	60b9      	str	r1, [r7, #8]
 800e9fe:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800ea00:	2300      	movs	r3, #0
 800ea02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800ea08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d110      	bne.n	800ea30 <xQueueReceive+0x3c>
    __asm volatile
 800ea0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea12:	b672      	cpsid	i
 800ea14:	f383 8811 	msr	BASEPRI, r3
 800ea18:	f3bf 8f6f 	isb	sy
 800ea1c:	f3bf 8f4f 	dsb	sy
 800ea20:	b662      	cpsie	i
 800ea22:	623b      	str	r3, [r7, #32]
}
 800ea24:	bf00      	nop
 800ea26:	f240 51e9 	movw	r1, #1513	@ 0x5e9
 800ea2a:	486a      	ldr	r0, [pc, #424]	@ (800ebd4 <xQueueReceive+0x1e0>)
 800ea2c:	f7f7 f974 	bl	8005d18 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d103      	bne.n	800ea3e <xQueueReceive+0x4a>
 800ea36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d101      	bne.n	800ea42 <xQueueReceive+0x4e>
 800ea3e:	2301      	movs	r3, #1
 800ea40:	e000      	b.n	800ea44 <xQueueReceive+0x50>
 800ea42:	2300      	movs	r3, #0
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d110      	bne.n	800ea6a <xQueueReceive+0x76>
    __asm volatile
 800ea48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea4c:	b672      	cpsid	i
 800ea4e:	f383 8811 	msr	BASEPRI, r3
 800ea52:	f3bf 8f6f 	isb	sy
 800ea56:	f3bf 8f4f 	dsb	sy
 800ea5a:	b662      	cpsie	i
 800ea5c:	61fb      	str	r3, [r7, #28]
}
 800ea5e:	bf00      	nop
 800ea60:	f240 51ed 	movw	r1, #1517	@ 0x5ed
 800ea64:	485b      	ldr	r0, [pc, #364]	@ (800ebd4 <xQueueReceive+0x1e0>)
 800ea66:	f7f7 f957 	bl	8005d18 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ea6a:	f001 fe31 	bl	80106d0 <xTaskGetSchedulerState>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d102      	bne.n	800ea7a <xQueueReceive+0x86>
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d101      	bne.n	800ea7e <xQueueReceive+0x8a>
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	e000      	b.n	800ea80 <xQueueReceive+0x8c>
 800ea7e:	2300      	movs	r3, #0
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d110      	bne.n	800eaa6 <xQueueReceive+0xb2>
    __asm volatile
 800ea84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea88:	b672      	cpsid	i
 800ea8a:	f383 8811 	msr	BASEPRI, r3
 800ea8e:	f3bf 8f6f 	isb	sy
 800ea92:	f3bf 8f4f 	dsb	sy
 800ea96:	b662      	cpsie	i
 800ea98:	61bb      	str	r3, [r7, #24]
}
 800ea9a:	bf00      	nop
 800ea9c:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 800eaa0:	484c      	ldr	r0, [pc, #304]	@ (800ebd4 <xQueueReceive+0x1e0>)
 800eaa2:	f7f7 f939 	bl	8005d18 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800eaa6:	f002 fceb 	bl	8011480 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eaaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eaae:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d01f      	beq.n	800eaf6 <xQueueReceive+0x102>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eab6:	68b9      	ldr	r1, [r7, #8]
 800eab8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eaba:	f000 fa47 	bl	800ef4c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 800eabe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eac0:	1e5a      	subs	r2, r3, #1
 800eac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eac4:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eac8:	691b      	ldr	r3, [r3, #16]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d00f      	beq.n	800eaee <xQueueReceive+0xfa>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ead0:	3310      	adds	r3, #16
 800ead2:	4618      	mov	r0, r3
 800ead4:	f001 fae0 	bl	8010098 <xTaskRemoveFromEventList>
 800ead8:	4603      	mov	r3, r0
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d007      	beq.n	800eaee <xQueueReceive+0xfa>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800eade:	4b3e      	ldr	r3, [pc, #248]	@ (800ebd8 <xQueueReceive+0x1e4>)
 800eae0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eae4:	601a      	str	r2, [r3, #0]
 800eae6:	f3bf 8f4f 	dsb	sy
 800eaea:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800eaee:	f002 fcff 	bl	80114f0 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	e069      	b.n	800ebca <xQueueReceive+0x1d6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d103      	bne.n	800eb04 <xQueueReceive+0x110>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800eafc:	f002 fcf8 	bl	80114f0 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 800eb00:	2300      	movs	r3, #0
 800eb02:	e062      	b.n	800ebca <xQueueReceive+0x1d6>
                }
                else if( xEntryTimeSet == pdFALSE )
 800eb04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d106      	bne.n	800eb18 <xQueueReceive+0x124>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800eb0a:	f107 0310 	add.w	r3, r7, #16
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f001 fba0 	bl	8010254 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800eb14:	2301      	movs	r3, #1
 800eb16:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800eb18:	f002 fcea 	bl	80114f0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800eb1c:	f000 feb4 	bl	800f888 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800eb20:	f002 fcae 	bl	8011480 <vPortEnterCritical>
 800eb24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb26:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eb2a:	b25b      	sxtb	r3, r3
 800eb2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb30:	d103      	bne.n	800eb3a <xQueueReceive+0x146>
 800eb32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb34:	2200      	movs	r2, #0
 800eb36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eb3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eb40:	b25b      	sxtb	r3, r3
 800eb42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb46:	d103      	bne.n	800eb50 <xQueueReceive+0x15c>
 800eb48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800eb50:	f002 fcce 	bl	80114f0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eb54:	1d3a      	adds	r2, r7, #4
 800eb56:	f107 0310 	add.w	r3, r7, #16
 800eb5a:	4611      	mov	r1, r2
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f001 fb8f 	bl	8010280 <xTaskCheckForTimeOut>
 800eb62:	4603      	mov	r3, r0
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d123      	bne.n	800ebb0 <xQueueReceive+0x1bc>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eb68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eb6a:	f000 fa67 	bl	800f03c <prvIsQueueEmpty>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d017      	beq.n	800eba4 <xQueueReceive+0x1b0>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eb74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb76:	3324      	adds	r3, #36	@ 0x24
 800eb78:	687a      	ldr	r2, [r7, #4]
 800eb7a:	4611      	mov	r1, r2
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f001 fa11 	bl	800ffa4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800eb82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eb84:	f000 fa08 	bl	800ef98 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800eb88:	f000 fe8c 	bl	800f8a4 <xTaskResumeAll>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d189      	bne.n	800eaa6 <xQueueReceive+0xb2>
                {
                    taskYIELD_WITHIN_API();
 800eb92:	4b11      	ldr	r3, [pc, #68]	@ (800ebd8 <xQueueReceive+0x1e4>)
 800eb94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb98:	601a      	str	r2, [r3, #0]
 800eb9a:	f3bf 8f4f 	dsb	sy
 800eb9e:	f3bf 8f6f 	isb	sy
 800eba2:	e780      	b.n	800eaa6 <xQueueReceive+0xb2>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800eba4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eba6:	f000 f9f7 	bl	800ef98 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800ebaa:	f000 fe7b 	bl	800f8a4 <xTaskResumeAll>
 800ebae:	e77a      	b.n	800eaa6 <xQueueReceive+0xb2>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800ebb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ebb2:	f000 f9f1 	bl	800ef98 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800ebb6:	f000 fe75 	bl	800f8a4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ebba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ebbc:	f000 fa3e 	bl	800f03c <prvIsQueueEmpty>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	f43f af6f 	beq.w	800eaa6 <xQueueReceive+0xb2>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 800ebc8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	3730      	adds	r7, #48	@ 0x30
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}
 800ebd2:	bf00      	nop
 800ebd4:	08017c1c 	.word	0x08017c1c
 800ebd8:	e000ed04 	.word	0xe000ed04

0800ebdc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b08c      	sub	sp, #48	@ 0x30
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800ebee:	2300      	movs	r3, #0
 800ebf0:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800ebf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d110      	bne.n	800ec1a <xQueueSemaphoreTake+0x3e>
    __asm volatile
 800ebf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebfc:	b672      	cpsid	i
 800ebfe:	f383 8811 	msr	BASEPRI, r3
 800ec02:	f3bf 8f6f 	isb	sy
 800ec06:	f3bf 8f4f 	dsb	sy
 800ec0a:	b662      	cpsie	i
 800ec0c:	61bb      	str	r3, [r7, #24]
}
 800ec0e:	bf00      	nop
 800ec10:	f240 6182 	movw	r1, #1666	@ 0x682
 800ec14:	4878      	ldr	r0, [pc, #480]	@ (800edf8 <xQueueSemaphoreTake+0x21c>)
 800ec16:	f7f7 f87f 	bl	8005d18 <vAssertCalled>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800ec1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d010      	beq.n	800ec44 <xQueueSemaphoreTake+0x68>
    __asm volatile
 800ec22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec26:	b672      	cpsid	i
 800ec28:	f383 8811 	msr	BASEPRI, r3
 800ec2c:	f3bf 8f6f 	isb	sy
 800ec30:	f3bf 8f4f 	dsb	sy
 800ec34:	b662      	cpsie	i
 800ec36:	617b      	str	r3, [r7, #20]
}
 800ec38:	bf00      	nop
 800ec3a:	f240 6186 	movw	r1, #1670	@ 0x686
 800ec3e:	486e      	ldr	r0, [pc, #440]	@ (800edf8 <xQueueSemaphoreTake+0x21c>)
 800ec40:	f7f7 f86a 	bl	8005d18 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ec44:	f001 fd44 	bl	80106d0 <xTaskGetSchedulerState>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d102      	bne.n	800ec54 <xQueueSemaphoreTake+0x78>
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d101      	bne.n	800ec58 <xQueueSemaphoreTake+0x7c>
 800ec54:	2301      	movs	r3, #1
 800ec56:	e000      	b.n	800ec5a <xQueueSemaphoreTake+0x7e>
 800ec58:	2300      	movs	r3, #0
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d110      	bne.n	800ec80 <xQueueSemaphoreTake+0xa4>
    __asm volatile
 800ec5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec62:	b672      	cpsid	i
 800ec64:	f383 8811 	msr	BASEPRI, r3
 800ec68:	f3bf 8f6f 	isb	sy
 800ec6c:	f3bf 8f4f 	dsb	sy
 800ec70:	b662      	cpsie	i
 800ec72:	613b      	str	r3, [r7, #16]
}
 800ec74:	bf00      	nop
 800ec76:	f240 618b 	movw	r1, #1675	@ 0x68b
 800ec7a:	485f      	ldr	r0, [pc, #380]	@ (800edf8 <xQueueSemaphoreTake+0x21c>)
 800ec7c:	f7f7 f84c 	bl	8005d18 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800ec80:	f002 fbfe 	bl	8011480 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ec84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec88:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ec8a:	6a3b      	ldr	r3, [r7, #32]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d024      	beq.n	800ecda <xQueueSemaphoreTake+0xfe>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 800ec90:	6a3b      	ldr	r3, [r7, #32]
 800ec92:	1e5a      	subs	r2, r3, #1
 800ec94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec96:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ec98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d104      	bne.n	800ecaa <xQueueSemaphoreTake+0xce>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800eca0:	f001 ff52 	bl	8010b48 <pvTaskIncrementMutexHeldCount>
 800eca4:	4602      	mov	r2, r0
 800eca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eca8:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ecaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecac:	691b      	ldr	r3, [r3, #16]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d00f      	beq.n	800ecd2 <xQueueSemaphoreTake+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ecb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecb4:	3310      	adds	r3, #16
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f001 f9ee 	bl	8010098 <xTaskRemoveFromEventList>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d007      	beq.n	800ecd2 <xQueueSemaphoreTake+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800ecc2:	4b4e      	ldr	r3, [pc, #312]	@ (800edfc <xQueueSemaphoreTake+0x220>)
 800ecc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ecc8:	601a      	str	r2, [r3, #0]
 800ecca:	f3bf 8f4f 	dsb	sy
 800ecce:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800ecd2:	f002 fc0d 	bl	80114f0 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 800ecd6:	2301      	movs	r3, #1
 800ecd8:	e089      	b.n	800edee <xQueueSemaphoreTake+0x212>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d103      	bne.n	800ece8 <xQueueSemaphoreTake+0x10c>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800ece0:	f002 fc06 	bl	80114f0 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 800ece4:	2300      	movs	r3, #0
 800ece6:	e082      	b.n	800edee <xQueueSemaphoreTake+0x212>
                }
                else if( xEntryTimeSet == pdFALSE )
 800ece8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d106      	bne.n	800ecfc <xQueueSemaphoreTake+0x120>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800ecee:	f107 0308 	add.w	r3, r7, #8
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	f001 faae 	bl	8010254 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800ecf8:	2301      	movs	r3, #1
 800ecfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800ecfc:	f002 fbf8 	bl	80114f0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800ed00:	f000 fdc2 	bl	800f888 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800ed04:	f002 fbbc 	bl	8011480 <vPortEnterCritical>
 800ed08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed0a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ed0e:	b25b      	sxtb	r3, r3
 800ed10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed14:	d103      	bne.n	800ed1e <xQueueSemaphoreTake+0x142>
 800ed16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed18:	2200      	movs	r2, #0
 800ed1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ed1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ed24:	b25b      	sxtb	r3, r3
 800ed26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed2a:	d103      	bne.n	800ed34 <xQueueSemaphoreTake+0x158>
 800ed2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed2e:	2200      	movs	r2, #0
 800ed30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ed34:	f002 fbdc 	bl	80114f0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ed38:	463a      	mov	r2, r7
 800ed3a:	f107 0308 	add.w	r3, r7, #8
 800ed3e:	4611      	mov	r1, r2
 800ed40:	4618      	mov	r0, r3
 800ed42:	f001 fa9d 	bl	8010280 <xTaskCheckForTimeOut>
 800ed46:	4603      	mov	r3, r0
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d132      	bne.n	800edb2 <xQueueSemaphoreTake+0x1d6>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ed4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ed4e:	f000 f975 	bl	800f03c <prvIsQueueEmpty>
 800ed52:	4603      	mov	r3, r0
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d026      	beq.n	800eda6 <xQueueSemaphoreTake+0x1ca>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ed58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d109      	bne.n	800ed74 <xQueueSemaphoreTake+0x198>
                    {
                        taskENTER_CRITICAL();
 800ed60:	f002 fb8e 	bl	8011480 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ed64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed66:	689b      	ldr	r3, [r3, #8]
 800ed68:	4618      	mov	r0, r3
 800ed6a:	f001 fccf 	bl	801070c <xTaskPriorityInherit>
 800ed6e:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 800ed70:	f002 fbbe 	bl	80114f0 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ed74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed76:	3324      	adds	r3, #36	@ 0x24
 800ed78:	683a      	ldr	r2, [r7, #0]
 800ed7a:	4611      	mov	r1, r2
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f001 f911 	bl	800ffa4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800ed82:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ed84:	f000 f908 	bl	800ef98 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800ed88:	f000 fd8c 	bl	800f8a4 <xTaskResumeAll>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	f47f af76 	bne.w	800ec80 <xQueueSemaphoreTake+0xa4>
                {
                    taskYIELD_WITHIN_API();
 800ed94:	4b19      	ldr	r3, [pc, #100]	@ (800edfc <xQueueSemaphoreTake+0x220>)
 800ed96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed9a:	601a      	str	r2, [r3, #0]
 800ed9c:	f3bf 8f4f 	dsb	sy
 800eda0:	f3bf 8f6f 	isb	sy
 800eda4:	e76c      	b.n	800ec80 <xQueueSemaphoreTake+0xa4>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800eda6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eda8:	f000 f8f6 	bl	800ef98 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800edac:	f000 fd7a 	bl	800f8a4 <xTaskResumeAll>
 800edb0:	e766      	b.n	800ec80 <xQueueSemaphoreTake+0xa4>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800edb2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800edb4:	f000 f8f0 	bl	800ef98 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800edb8:	f000 fd74 	bl	800f8a4 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800edbc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800edbe:	f000 f93d 	bl	800f03c <prvIsQueueEmpty>
 800edc2:	4603      	mov	r3, r0
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	f43f af5b 	beq.w	800ec80 <xQueueSemaphoreTake+0xa4>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 800edca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d00d      	beq.n	800edec <xQueueSemaphoreTake+0x210>
                    {
                        taskENTER_CRITICAL();
 800edd0:	f002 fb56 	bl	8011480 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800edd4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800edd6:	f000 f837 	bl	800ee48 <prvGetDisinheritPriorityAfterTimeout>
 800edda:	61f8      	str	r0, [r7, #28]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800eddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edde:	689b      	ldr	r3, [r3, #8]
 800ede0:	69f9      	ldr	r1, [r7, #28]
 800ede2:	4618      	mov	r0, r3
 800ede4:	f001 fde6 	bl	80109b4 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 800ede8:	f002 fb82 	bl	80114f0 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 800edec:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 800edee:	4618      	mov	r0, r3
 800edf0:	3730      	adds	r7, #48	@ 0x30
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}
 800edf6:	bf00      	nop
 800edf8:	08017c1c 	.word	0x08017c1c
 800edfc:	e000ed04 	.word	0xe000ed04

0800ee00 <vQueueDelete>:
    return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b084      	sub	sp, #16
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	60fb      	str	r3, [r7, #12]

    traceENTER_vQueueDelete( xQueue );

    configASSERT( pxQueue );
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d110      	bne.n	800ee34 <vQueueDelete+0x34>
    __asm volatile
 800ee12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee16:	b672      	cpsid	i
 800ee18:	f383 8811 	msr	BASEPRI, r3
 800ee1c:	f3bf 8f6f 	isb	sy
 800ee20:	f3bf 8f4f 	dsb	sy
 800ee24:	b662      	cpsie	i
 800ee26:	60bb      	str	r3, [r7, #8]
}
 800ee28:	bf00      	nop
 800ee2a:	f640 01d4 	movw	r1, #2260	@ 0x8d4
 800ee2e:	4805      	ldr	r0, [pc, #20]	@ (800ee44 <vQueueDelete+0x44>)
 800ee30:	f7f6 ff72 	bl	8005d18 <vAssertCalled>

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
    {
        /* The queue can only have been allocated dynamically - free it
         * again. */
        vPortFree( pxQueue );
 800ee34:	68f8      	ldr	r0, [r7, #12]
 800ee36:	f7f7 fae5 	bl	8006404 <vPortFree>
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

    traceRETURN_vQueueDelete();
}
 800ee3a:	bf00      	nop
 800ee3c:	3710      	adds	r7, #16
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}
 800ee42:	bf00      	nop
 800ee44:	08017c1c 	.word	0x08017c1c

0800ee48 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800ee48:	b480      	push	{r7}
 800ee4a:	b085      	sub	sp, #20
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d006      	beq.n	800ee66 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	f1c3 0307 	rsb	r3, r3, #7
 800ee62:	60fb      	str	r3, [r7, #12]
 800ee64:	e001      	b.n	800ee6a <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ee66:	2300      	movs	r3, #0
 800ee68:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
    }
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	3714      	adds	r7, #20
 800ee70:	46bd      	mov	sp, r7
 800ee72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee76:	4770      	bx	lr

0800ee78 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b086      	sub	sp, #24
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	60f8      	str	r0, [r7, #12]
 800ee80:	60b9      	str	r1, [r7, #8]
 800ee82:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800ee84:	2300      	movs	r3, #0
 800ee86:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee8c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d10d      	bne.n	800eeb2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d14d      	bne.n	800ef3a <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	689b      	ldr	r3, [r3, #8]
 800eea2:	4618      	mov	r0, r3
 800eea4:	f001 fcd2 	bl	801084c <xTaskPriorityDisinherit>
 800eea8:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	2200      	movs	r2, #0
 800eeae:	609a      	str	r2, [r3, #8]
 800eeb0:	e043      	b.n	800ef3a <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d119      	bne.n	800eeec <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	6858      	ldr	r0, [r3, #4]
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eec0:	461a      	mov	r2, r3
 800eec2:	68b9      	ldr	r1, [r7, #8]
 800eec4:	f005 f8ba 	bl	801403c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	685a      	ldr	r2, [r3, #4]
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eed0:	441a      	add	r2, r3
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	685a      	ldr	r2, [r3, #4]
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	689b      	ldr	r3, [r3, #8]
 800eede:	429a      	cmp	r2, r3
 800eee0:	d32b      	bcc.n	800ef3a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	681a      	ldr	r2, [r3, #0]
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	605a      	str	r2, [r3, #4]
 800eeea:	e026      	b.n	800ef3a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	68d8      	ldr	r0, [r3, #12]
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eef4:	461a      	mov	r2, r3
 800eef6:	68b9      	ldr	r1, [r7, #8]
 800eef8:	f005 f8a0 	bl	801403c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	68da      	ldr	r2, [r3, #12]
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef04:	425b      	negs	r3, r3
 800ef06:	441a      	add	r2, r3
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	68da      	ldr	r2, [r3, #12]
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	429a      	cmp	r2, r3
 800ef16:	d207      	bcs.n	800ef28 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	689a      	ldr	r2, [r3, #8]
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef20:	425b      	negs	r3, r3
 800ef22:	441a      	add	r2, r3
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2b02      	cmp	r3, #2
 800ef2c:	d105      	bne.n	800ef3a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ef2e:	693b      	ldr	r3, [r7, #16]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d002      	beq.n	800ef3a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	3b01      	subs	r3, #1
 800ef38:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800ef3a:	693b      	ldr	r3, [r7, #16]
 800ef3c:	1c5a      	adds	r2, r3, #1
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800ef42:	697b      	ldr	r3, [r7, #20]
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	3718      	adds	r7, #24
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}

0800ef4c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b082      	sub	sp, #8
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
 800ef54:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d018      	beq.n	800ef90 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	68da      	ldr	r2, [r3, #12]
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef66:	441a      	add	r2, r3
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	68da      	ldr	r2, [r3, #12]
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	689b      	ldr	r3, [r3, #8]
 800ef74:	429a      	cmp	r2, r3
 800ef76:	d303      	bcc.n	800ef80 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681a      	ldr	r2, [r3, #0]
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	68d9      	ldr	r1, [r3, #12]
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef88:	461a      	mov	r2, r3
 800ef8a:	6838      	ldr	r0, [r7, #0]
 800ef8c:	f005 f856 	bl	801403c <memcpy>
    }
}
 800ef90:	bf00      	nop
 800ef92:	3708      	adds	r7, #8
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}

0800ef98 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b084      	sub	sp, #16
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800efa0:	f002 fa6e 	bl	8011480 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800efaa:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800efac:	e011      	b.n	800efd2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d012      	beq.n	800efdc <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	3324      	adds	r3, #36	@ 0x24
 800efba:	4618      	mov	r0, r3
 800efbc:	f001 f86c 	bl	8010098 <xTaskRemoveFromEventList>
 800efc0:	4603      	mov	r3, r0
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d001      	beq.n	800efca <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800efc6:	f001 f9cf 	bl	8010368 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800efca:	7bfb      	ldrb	r3, [r7, #15]
 800efcc:	3b01      	subs	r3, #1
 800efce:	b2db      	uxtb	r3, r3
 800efd0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800efd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	dce9      	bgt.n	800efae <prvUnlockQueue+0x16>
 800efda:	e000      	b.n	800efde <prvUnlockQueue+0x46>
                    break;
 800efdc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	22ff      	movs	r2, #255	@ 0xff
 800efe2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800efe6:	f002 fa83 	bl	80114f0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800efea:	f002 fa49 	bl	8011480 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eff4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800eff6:	e011      	b.n	800f01c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	691b      	ldr	r3, [r3, #16]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d012      	beq.n	800f026 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	3310      	adds	r3, #16
 800f004:	4618      	mov	r0, r3
 800f006:	f001 f847 	bl	8010098 <xTaskRemoveFromEventList>
 800f00a:	4603      	mov	r3, r0
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d001      	beq.n	800f014 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800f010:	f001 f9aa 	bl	8010368 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800f014:	7bbb      	ldrb	r3, [r7, #14]
 800f016:	3b01      	subs	r3, #1
 800f018:	b2db      	uxtb	r3, r3
 800f01a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800f01c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f020:	2b00      	cmp	r3, #0
 800f022:	dce9      	bgt.n	800eff8 <prvUnlockQueue+0x60>
 800f024:	e000      	b.n	800f028 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800f026:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	22ff      	movs	r2, #255	@ 0xff
 800f02c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800f030:	f002 fa5e 	bl	80114f0 <vPortExitCritical>
}
 800f034:	bf00      	nop
 800f036:	3710      	adds	r7, #16
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}

0800f03c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b084      	sub	sp, #16
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800f044:	f002 fa1c 	bl	8011480 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d102      	bne.n	800f056 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800f050:	2301      	movs	r3, #1
 800f052:	60fb      	str	r3, [r7, #12]
 800f054:	e001      	b.n	800f05a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800f056:	2300      	movs	r3, #0
 800f058:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800f05a:	f002 fa49 	bl	80114f0 <vPortExitCritical>

    return xReturn;
 800f05e:	68fb      	ldr	r3, [r7, #12]
}
 800f060:	4618      	mov	r0, r3
 800f062:	3710      	adds	r7, #16
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}

0800f068 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b084      	sub	sp, #16
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800f070:	f002 fa06 	bl	8011480 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d102      	bne.n	800f086 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800f080:	2301      	movs	r3, #1
 800f082:	60fb      	str	r3, [r7, #12]
 800f084:	e001      	b.n	800f08a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800f086:	2300      	movs	r3, #0
 800f088:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800f08a:	f002 fa31 	bl	80114f0 <vPortExitCritical>

    return xReturn;
 800f08e:	68fb      	ldr	r3, [r7, #12]
}
 800f090:	4618      	mov	r0, r3
 800f092:	3710      	adds	r7, #16
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}

0800f098 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800f098:	b580      	push	{r7, lr}
 800f09a:	b086      	sub	sp, #24
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	60f8      	str	r0, [r7, #12]
 800f0a0:	60b9      	str	r1, [r7, #8]
 800f0a2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800f0a8:	f002 f9ea 	bl	8011480 <vPortEnterCritical>
 800f0ac:	697b      	ldr	r3, [r7, #20]
 800f0ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f0b2:	b25b      	sxtb	r3, r3
 800f0b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0b8:	d103      	bne.n	800f0c2 <vQueueWaitForMessageRestricted+0x2a>
 800f0ba:	697b      	ldr	r3, [r7, #20]
 800f0bc:	2200      	movs	r2, #0
 800f0be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f0c2:	697b      	ldr	r3, [r7, #20]
 800f0c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f0c8:	b25b      	sxtb	r3, r3
 800f0ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0ce:	d103      	bne.n	800f0d8 <vQueueWaitForMessageRestricted+0x40>
 800f0d0:	697b      	ldr	r3, [r7, #20]
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f0d8:	f002 fa0a 	bl	80114f0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f0dc:	697b      	ldr	r3, [r7, #20]
 800f0de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d106      	bne.n	800f0f2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f0e4:	697b      	ldr	r3, [r7, #20]
 800f0e6:	3324      	adds	r3, #36	@ 0x24
 800f0e8:	687a      	ldr	r2, [r7, #4]
 800f0ea:	68b9      	ldr	r1, [r7, #8]
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	f000 ff85 	bl	800fffc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800f0f2:	6978      	ldr	r0, [r7, #20]
 800f0f4:	f7ff ff50 	bl	800ef98 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 800f0f8:	bf00      	nop
 800f0fa:	3718      	adds	r7, #24
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bd80      	pop	{r7, pc}

0800f100 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 800f100:	b580      	push	{r7, lr}
 800f102:	b08a      	sub	sp, #40	@ 0x28
 800f104:	af04      	add	r7, sp, #16
 800f106:	60f8      	str	r0, [r7, #12]
 800f108:	60b9      	str	r1, [r7, #8]
 800f10a:	607a      	str	r2, [r7, #4]
 800f10c:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	009b      	lsls	r3, r3, #2
 800f112:	4618      	mov	r0, r3
 800f114:	f7f7 f968 	bl	80063e8 <pvPortMalloc>
 800f118:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 800f11a:	693b      	ldr	r3, [r7, #16]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d013      	beq.n	800f148 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800f120:	20b0      	movs	r0, #176	@ 0xb0
 800f122:	f7f7 f961 	bl	80063e8 <pvPortMalloc>
 800f126:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 800f128:	697b      	ldr	r3, [r7, #20]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d008      	beq.n	800f140 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800f12e:	22b0      	movs	r2, #176	@ 0xb0
 800f130:	2100      	movs	r1, #0
 800f132:	6978      	ldr	r0, [r7, #20]
 800f134:	f004 fe1c 	bl	8013d70 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800f138:	697b      	ldr	r3, [r7, #20]
 800f13a:	693a      	ldr	r2, [r7, #16]
 800f13c:	631a      	str	r2, [r3, #48]	@ 0x30
 800f13e:	e005      	b.n	800f14c <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800f140:	6938      	ldr	r0, [r7, #16]
 800f142:	f7f7 f95f 	bl	8006404 <vPortFree>
 800f146:	e001      	b.n	800f14c <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800f148:	2300      	movs	r3, #0
 800f14a:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800f14c:	697b      	ldr	r3, [r7, #20]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d00d      	beq.n	800f16e <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f152:	2300      	movs	r3, #0
 800f154:	9303      	str	r3, [sp, #12]
 800f156:	697b      	ldr	r3, [r7, #20]
 800f158:	9302      	str	r3, [sp, #8]
 800f15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f15c:	9301      	str	r3, [sp, #4]
 800f15e:	6a3b      	ldr	r3, [r7, #32]
 800f160:	9300      	str	r3, [sp, #0]
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	687a      	ldr	r2, [r7, #4]
 800f166:	68b9      	ldr	r1, [r7, #8]
 800f168:	68f8      	ldr	r0, [r7, #12]
 800f16a:	f000 f829 	bl	800f1c0 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 800f16e:	697b      	ldr	r3, [r7, #20]
    }
 800f170:	4618      	mov	r0, r3
 800f172:	3718      	adds	r7, #24
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}

0800f178 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800f178:	b580      	push	{r7, lr}
 800f17a:	b088      	sub	sp, #32
 800f17c:	af02      	add	r7, sp, #8
 800f17e:	60f8      	str	r0, [r7, #12]
 800f180:	60b9      	str	r1, [r7, #8]
 800f182:	607a      	str	r2, [r7, #4]
 800f184:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800f186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f188:	9301      	str	r3, [sp, #4]
 800f18a:	6a3b      	ldr	r3, [r7, #32]
 800f18c:	9300      	str	r3, [sp, #0]
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	687a      	ldr	r2, [r7, #4]
 800f192:	68b9      	ldr	r1, [r7, #8]
 800f194:	68f8      	ldr	r0, [r7, #12]
 800f196:	f7ff ffb3 	bl	800f100 <prvCreateTask>
 800f19a:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 800f19c:	693b      	ldr	r3, [r7, #16]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d005      	beq.n	800f1ae <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800f1a2:	6938      	ldr	r0, [r7, #16]
 800f1a4:	f000 f8c2 	bl	800f32c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800f1a8:	2301      	movs	r3, #1
 800f1aa:	617b      	str	r3, [r7, #20]
 800f1ac:	e002      	b.n	800f1b4 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f1ae:	f04f 33ff 	mov.w	r3, #4294967295
 800f1b2:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 800f1b4:	697b      	ldr	r3, [r7, #20]
    }
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	3718      	adds	r7, #24
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}
	...

0800f1c0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b088      	sub	sp, #32
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	60f8      	str	r0, [r7, #12]
 800f1c8:	60b9      	str	r1, [r7, #8]
 800f1ca:	607a      	str	r2, [r7, #4]
 800f1cc:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800f1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1d0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	009b      	lsls	r3, r3, #2
 800f1d6:	461a      	mov	r2, r3
 800f1d8:	21a5      	movs	r1, #165	@ 0xa5
 800f1da:	f004 fdc9 	bl	8013d70 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800f1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f1e2:	6879      	ldr	r1, [r7, #4]
 800f1e4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f1e8:	440b      	add	r3, r1
 800f1ea:	009b      	lsls	r3, r3, #2
 800f1ec:	4413      	add	r3, r2
 800f1ee:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800f1f0:	69bb      	ldr	r3, [r7, #24]
 800f1f2:	f023 0307 	bic.w	r3, r3, #7
 800f1f6:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 800f1f8:	69bb      	ldr	r3, [r7, #24]
 800f1fa:	f003 0307 	and.w	r3, r3, #7
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d010      	beq.n	800f224 <prvInitialiseNewTask+0x64>
    __asm volatile
 800f202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f206:	b672      	cpsid	i
 800f208:	f383 8811 	msr	BASEPRI, r3
 800f20c:	f3bf 8f6f 	isb	sy
 800f210:	f3bf 8f4f 	dsb	sy
 800f214:	b662      	cpsie	i
 800f216:	617b      	str	r3, [r7, #20]
}
 800f218:	bf00      	nop
 800f21a:	f240 712e 	movw	r1, #1838	@ 0x72e
 800f21e:	483f      	ldr	r0, [pc, #252]	@ (800f31c <prvInitialiseNewTask+0x15c>)
 800f220:	f7f6 fd7a 	bl	8005d18 <vAssertCalled>

        #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
        {
            /* Also record the stack's high address, which may assist
             * debugging. */
            pxNewTCB->pxEndOfStack = pxTopOfStack;
 800f224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f226:	69ba      	ldr	r2, [r7, #24]
 800f228:	645a      	str	r2, [r3, #68]	@ 0x44
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d01e      	beq.n	800f26e <prvInitialiseNewTask+0xae>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f230:	2300      	movs	r3, #0
 800f232:	61fb      	str	r3, [r7, #28]
 800f234:	e012      	b.n	800f25c <prvInitialiseNewTask+0x9c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f236:	68ba      	ldr	r2, [r7, #8]
 800f238:	69fb      	ldr	r3, [r7, #28]
 800f23a:	4413      	add	r3, r2
 800f23c:	7819      	ldrb	r1, [r3, #0]
 800f23e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f240:	69fb      	ldr	r3, [r7, #28]
 800f242:	4413      	add	r3, r2
 800f244:	3334      	adds	r3, #52	@ 0x34
 800f246:	460a      	mov	r2, r1
 800f248:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800f24a:	68ba      	ldr	r2, [r7, #8]
 800f24c:	69fb      	ldr	r3, [r7, #28]
 800f24e:	4413      	add	r3, r2
 800f250:	781b      	ldrb	r3, [r3, #0]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d006      	beq.n	800f264 <prvInitialiseNewTask+0xa4>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f256:	69fb      	ldr	r3, [r7, #28]
 800f258:	3301      	adds	r3, #1
 800f25a:	61fb      	str	r3, [r7, #28]
 800f25c:	69fb      	ldr	r3, [r7, #28]
 800f25e:	2b0f      	cmp	r3, #15
 800f260:	d9e9      	bls.n	800f236 <prvInitialiseNewTask+0x76>
 800f262:	e000      	b.n	800f266 <prvInitialiseNewTask+0xa6>
            {
                break;
 800f264:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 800f266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f268:	2200      	movs	r2, #0
 800f26a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800f26e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f270:	2b06      	cmp	r3, #6
 800f272:	d910      	bls.n	800f296 <prvInitialiseNewTask+0xd6>
    __asm volatile
 800f274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f278:	b672      	cpsid	i
 800f27a:	f383 8811 	msr	BASEPRI, r3
 800f27e:	f3bf 8f6f 	isb	sy
 800f282:	f3bf 8f4f 	dsb	sy
 800f286:	b662      	cpsie	i
 800f288:	613b      	str	r3, [r7, #16]
}
 800f28a:	bf00      	nop
 800f28c:	f240 7164 	movw	r1, #1892	@ 0x764
 800f290:	4822      	ldr	r0, [pc, #136]	@ (800f31c <prvInitialiseNewTask+0x15c>)
 800f292:	f7f6 fd41 	bl	8005d18 <vAssertCalled>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f298:	2b06      	cmp	r3, #6
 800f29a:	d901      	bls.n	800f2a0 <prvInitialiseNewTask+0xe0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f29c:	2306      	movs	r3, #6
 800f29e:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800f2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f2a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800f2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f2aa:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f2ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2ae:	3304      	adds	r3, #4
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	f7ff f82f 	bl	800e314 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2b8:	3318      	adds	r3, #24
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7ff f82a 	bl	800e314 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f2c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f2c4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800f2c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2c8:	f1c3 0207 	rsb	r2, r3, #7
 800f2cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2ce:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f2d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f2d4:	625a      	str	r2, [r3, #36]	@ 0x24
    #endif

    #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 800f2d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2d8:	335c      	adds	r3, #92	@ 0x5c
 800f2da:	224c      	movs	r2, #76	@ 0x4c
 800f2dc:	2100      	movs	r1, #0
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f004 fd46 	bl	8013d70 <memset>
 800f2e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2e6:	4a0e      	ldr	r2, [pc, #56]	@ (800f320 <prvInitialiseNewTask+0x160>)
 800f2e8:	661a      	str	r2, [r3, #96]	@ 0x60
 800f2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2ec:	4a0d      	ldr	r2, [pc, #52]	@ (800f324 <prvInitialiseNewTask+0x164>)
 800f2ee:	665a      	str	r2, [r3, #100]	@ 0x64
 800f2f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2f2:	4a0d      	ldr	r2, [pc, #52]	@ (800f328 <prvInitialiseNewTask+0x168>)
 800f2f4:	669a      	str	r2, [r3, #104]	@ 0x68
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f2f6:	683a      	ldr	r2, [r7, #0]
 800f2f8:	68f9      	ldr	r1, [r7, #12]
 800f2fa:	69b8      	ldr	r0, [r7, #24]
 800f2fc:	f001 ff50 	bl	80111a0 <pxPortInitialiseStack>
 800f300:	4602      	mov	r2, r0
 800f302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f304:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 800f306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d002      	beq.n	800f312 <prvInitialiseNewTask+0x152>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f30e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f310:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800f312:	bf00      	nop
 800f314:	3720      	adds	r7, #32
 800f316:	46bd      	mov	sp, r7
 800f318:	bd80      	pop	{r7, pc}
 800f31a:	bf00      	nop
 800f31c:	08017c98 	.word	0x08017c98
 800f320:	20000654 	.word	0x20000654
 800f324:	200006bc 	.word	0x200006bc
 800f328:	20000724 	.word	0x20000724

0800f32c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b084      	sub	sp, #16
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 800f334:	f002 f8a4 	bl	8011480 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 800f338:	4b41      	ldr	r3, [pc, #260]	@ (800f440 <prvAddNewTaskToReadyList+0x114>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	3301      	adds	r3, #1
 800f33e:	4a40      	ldr	r2, [pc, #256]	@ (800f440 <prvAddNewTaskToReadyList+0x114>)
 800f340:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800f342:	4b40      	ldr	r3, [pc, #256]	@ (800f444 <prvAddNewTaskToReadyList+0x118>)
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d109      	bne.n	800f35e <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 800f34a:	4a3e      	ldr	r2, [pc, #248]	@ (800f444 <prvAddNewTaskToReadyList+0x118>)
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f350:	4b3b      	ldr	r3, [pc, #236]	@ (800f440 <prvAddNewTaskToReadyList+0x114>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	2b01      	cmp	r3, #1
 800f356:	d110      	bne.n	800f37a <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 800f358:	f001 f82a 	bl	80103b0 <prvInitialiseTaskLists>
 800f35c:	e00d      	b.n	800f37a <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800f35e:	4b3a      	ldr	r3, [pc, #232]	@ (800f448 <prvAddNewTaskToReadyList+0x11c>)
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d109      	bne.n	800f37a <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f366:	4b37      	ldr	r3, [pc, #220]	@ (800f444 <prvAddNewTaskToReadyList+0x118>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f370:	429a      	cmp	r2, r3
 800f372:	d802      	bhi.n	800f37a <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 800f374:	4a33      	ldr	r2, [pc, #204]	@ (800f444 <prvAddNewTaskToReadyList+0x118>)
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 800f37a:	4b34      	ldr	r3, [pc, #208]	@ (800f44c <prvAddNewTaskToReadyList+0x120>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	3301      	adds	r3, #1
 800f380:	4a32      	ldr	r2, [pc, #200]	@ (800f44c <prvAddNewTaskToReadyList+0x120>)
 800f382:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f384:	4b31      	ldr	r3, [pc, #196]	@ (800f44c <prvAddNewTaskToReadyList+0x120>)
 800f386:	681a      	ldr	r2, [r3, #0]
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	649a      	str	r2, [r3, #72]	@ 0x48
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f390:	2201      	movs	r2, #1
 800f392:	409a      	lsls	r2, r3
 800f394:	4b2e      	ldr	r3, [pc, #184]	@ (800f450 <prvAddNewTaskToReadyList+0x124>)
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	4313      	orrs	r3, r2
 800f39a:	4a2d      	ldr	r2, [pc, #180]	@ (800f450 <prvAddNewTaskToReadyList+0x124>)
 800f39c:	6013      	str	r3, [r2, #0]
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3a2:	492c      	ldr	r1, [pc, #176]	@ (800f454 <prvAddNewTaskToReadyList+0x128>)
 800f3a4:	4613      	mov	r3, r2
 800f3a6:	009b      	lsls	r3, r3, #2
 800f3a8:	4413      	add	r3, r2
 800f3aa:	009b      	lsls	r3, r3, #2
 800f3ac:	440b      	add	r3, r1
 800f3ae:	3304      	adds	r3, #4
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	60fb      	str	r3, [r7, #12]
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	68fa      	ldr	r2, [r7, #12]
 800f3b8:	609a      	str	r2, [r3, #8]
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	689a      	ldr	r2, [r3, #8]
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	60da      	str	r2, [r3, #12]
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	689b      	ldr	r3, [r3, #8]
 800f3c6:	687a      	ldr	r2, [r7, #4]
 800f3c8:	3204      	adds	r2, #4
 800f3ca:	605a      	str	r2, [r3, #4]
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	1d1a      	adds	r2, r3, #4
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	609a      	str	r2, [r3, #8]
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3d8:	4613      	mov	r3, r2
 800f3da:	009b      	lsls	r3, r3, #2
 800f3dc:	4413      	add	r3, r2
 800f3de:	009b      	lsls	r3, r3, #2
 800f3e0:	4a1c      	ldr	r2, [pc, #112]	@ (800f454 <prvAddNewTaskToReadyList+0x128>)
 800f3e2:	441a      	add	r2, r3
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	615a      	str	r2, [r3, #20]
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3ec:	4919      	ldr	r1, [pc, #100]	@ (800f454 <prvAddNewTaskToReadyList+0x128>)
 800f3ee:	4613      	mov	r3, r2
 800f3f0:	009b      	lsls	r3, r3, #2
 800f3f2:	4413      	add	r3, r2
 800f3f4:	009b      	lsls	r3, r3, #2
 800f3f6:	440b      	add	r3, r1
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	687a      	ldr	r2, [r7, #4]
 800f3fc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800f3fe:	1c59      	adds	r1, r3, #1
 800f400:	4814      	ldr	r0, [pc, #80]	@ (800f454 <prvAddNewTaskToReadyList+0x128>)
 800f402:	4613      	mov	r3, r2
 800f404:	009b      	lsls	r3, r3, #2
 800f406:	4413      	add	r3, r2
 800f408:	009b      	lsls	r3, r3, #2
 800f40a:	4403      	add	r3, r0
 800f40c:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800f40e:	f002 f86f 	bl	80114f0 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800f412:	4b0d      	ldr	r3, [pc, #52]	@ (800f448 <prvAddNewTaskToReadyList+0x11c>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d00e      	beq.n	800f438 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800f41a:	4b0a      	ldr	r3, [pc, #40]	@ (800f444 <prvAddNewTaskToReadyList+0x118>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f424:	429a      	cmp	r2, r3
 800f426:	d207      	bcs.n	800f438 <prvAddNewTaskToReadyList+0x10c>
 800f428:	4b0b      	ldr	r3, [pc, #44]	@ (800f458 <prvAddNewTaskToReadyList+0x12c>)
 800f42a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f42e:	601a      	str	r2, [r3, #0]
 800f430:	f3bf 8f4f 	dsb	sy
 800f434:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800f438:	bf00      	nop
 800f43a:	3710      	adds	r7, #16
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}
 800f440:	200005d0 	.word	0x200005d0
 800f444:	200004d0 	.word	0x200004d0
 800f448:	200005dc 	.word	0x200005dc
 800f44c:	200005ec 	.word	0x200005ec
 800f450:	200005d8 	.word	0x200005d8
 800f454:	200004d4 	.word	0x200004d4
 800f458:	e000ed04 	.word	0xe000ed04

0800f45c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b086      	sub	sp, #24
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 800f464:	2300      	movs	r3, #0
 800f466:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 800f468:	f002 f80a 	bl	8011480 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d102      	bne.n	800f478 <vTaskDelete+0x1c>
 800f472:	4b44      	ldr	r3, [pc, #272]	@ (800f584 <vTaskDelete+0x128>)
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	e000      	b.n	800f47a <vTaskDelete+0x1e>
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f47c:	693b      	ldr	r3, [r7, #16]
 800f47e:	3304      	adds	r3, #4
 800f480:	4618      	mov	r0, r3
 800f482:	f7fe ffb1 	bl	800e3e8 <uxListRemove>
 800f486:	4603      	mov	r3, r0
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d115      	bne.n	800f4b8 <vTaskDelete+0x5c>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f48c:	693b      	ldr	r3, [r7, #16]
 800f48e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f490:	493d      	ldr	r1, [pc, #244]	@ (800f588 <vTaskDelete+0x12c>)
 800f492:	4613      	mov	r3, r2
 800f494:	009b      	lsls	r3, r3, #2
 800f496:	4413      	add	r3, r2
 800f498:	009b      	lsls	r3, r3, #2
 800f49a:	440b      	add	r3, r1
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d10a      	bne.n	800f4b8 <vTaskDelete+0x5c>
 800f4a2:	693b      	ldr	r3, [r7, #16]
 800f4a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4a6:	2201      	movs	r2, #1
 800f4a8:	fa02 f303 	lsl.w	r3, r2, r3
 800f4ac:	43da      	mvns	r2, r3
 800f4ae:	4b37      	ldr	r3, [pc, #220]	@ (800f58c <vTaskDelete+0x130>)
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	4013      	ands	r3, r2
 800f4b4:	4a35      	ldr	r2, [pc, #212]	@ (800f58c <vTaskDelete+0x130>)
 800f4b6:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f4b8:	693b      	ldr	r3, [r7, #16]
 800f4ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d004      	beq.n	800f4ca <vTaskDelete+0x6e>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f4c0:	693b      	ldr	r3, [r7, #16]
 800f4c2:	3318      	adds	r3, #24
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f7fe ff8f 	bl	800e3e8 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800f4ca:	4b31      	ldr	r3, [pc, #196]	@ (800f590 <vTaskDelete+0x134>)
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	3301      	adds	r3, #1
 800f4d0:	4a2f      	ldr	r2, [pc, #188]	@ (800f590 <vTaskDelete+0x134>)
 800f4d2:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 800f4d4:	4b2b      	ldr	r3, [pc, #172]	@ (800f584 <vTaskDelete+0x128>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	693a      	ldr	r2, [r7, #16]
 800f4da:	429a      	cmp	r2, r3
 800f4dc:	d101      	bne.n	800f4e2 <vTaskDelete+0x86>
 800f4de:	2301      	movs	r3, #1
 800f4e0:	e000      	b.n	800f4e4 <vTaskDelete+0x88>
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 800f4e6:	4b2b      	ldr	r3, [pc, #172]	@ (800f594 <vTaskDelete+0x138>)
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d010      	beq.n	800f510 <vTaskDelete+0xb4>
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d00d      	beq.n	800f510 <vTaskDelete+0xb4>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800f4f4:	693b      	ldr	r3, [r7, #16]
 800f4f6:	3304      	adds	r3, #4
 800f4f8:	4619      	mov	r1, r3
 800f4fa:	4827      	ldr	r0, [pc, #156]	@ (800f598 <vTaskDelete+0x13c>)
 800f4fc:	f7fe ff17 	bl	800e32e <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 800f500:	4b26      	ldr	r3, [pc, #152]	@ (800f59c <vTaskDelete+0x140>)
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	3301      	adds	r3, #1
 800f506:	4a25      	ldr	r2, [pc, #148]	@ (800f59c <vTaskDelete+0x140>)
 800f508:	6013      	str	r3, [r2, #0]
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 800f50a:	2301      	movs	r3, #1
 800f50c:	617b      	str	r3, [r7, #20]
 800f50e:	e006      	b.n	800f51e <vTaskDelete+0xc2>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 800f510:	4b23      	ldr	r3, [pc, #140]	@ (800f5a0 <vTaskDelete+0x144>)
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	3b01      	subs	r3, #1
 800f516:	4a22      	ldr	r2, [pc, #136]	@ (800f5a0 <vTaskDelete+0x144>)
 800f518:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 800f51a:	f001 f8ad 	bl	8010678 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800f51e:	f001 ffe7 	bl	80114f0 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 800f522:	697b      	ldr	r3, [r7, #20]
 800f524:	2b01      	cmp	r3, #1
 800f526:	d002      	beq.n	800f52e <vTaskDelete+0xd2>
        {
            prvDeleteTCB( pxTCB );
 800f528:	6938      	ldr	r0, [r7, #16]
 800f52a:	f001 f88f 	bl	801064c <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 800f52e:	4b19      	ldr	r3, [pc, #100]	@ (800f594 <vTaskDelete+0x138>)
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d021      	beq.n	800f57a <vTaskDelete+0x11e>
            {
                if( pxTCB == pxCurrentTCB )
 800f536:	4b13      	ldr	r3, [pc, #76]	@ (800f584 <vTaskDelete+0x128>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	693a      	ldr	r2, [r7, #16]
 800f53c:	429a      	cmp	r2, r3
 800f53e:	d11c      	bne.n	800f57a <vTaskDelete+0x11e>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 800f540:	4b18      	ldr	r3, [pc, #96]	@ (800f5a4 <vTaskDelete+0x148>)
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d010      	beq.n	800f56a <vTaskDelete+0x10e>
    __asm volatile
 800f548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f54c:	b672      	cpsid	i
 800f54e:	f383 8811 	msr	BASEPRI, r3
 800f552:	f3bf 8f6f 	isb	sy
 800f556:	f3bf 8f4f 	dsb	sy
 800f55a:	b662      	cpsie	i
 800f55c:	60bb      	str	r3, [r7, #8]
}
 800f55e:	bf00      	nop
 800f560:	f640 1114 	movw	r1, #2324	@ 0x914
 800f564:	4810      	ldr	r0, [pc, #64]	@ (800f5a8 <vTaskDelete+0x14c>)
 800f566:	f7f6 fbd7 	bl	8005d18 <vAssertCalled>
                    taskYIELD_WITHIN_API();
 800f56a:	4b10      	ldr	r3, [pc, #64]	@ (800f5ac <vTaskDelete+0x150>)
 800f56c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f570:	601a      	str	r2, [r3, #0]
 800f572:	f3bf 8f4f 	dsb	sy
 800f576:	f3bf 8f6f 	isb	sy
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
 800f57a:	bf00      	nop
 800f57c:	3718      	adds	r7, #24
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}
 800f582:	bf00      	nop
 800f584:	200004d0 	.word	0x200004d0
 800f588:	200004d4 	.word	0x200004d4
 800f58c:	200005d8 	.word	0x200005d8
 800f590:	200005ec 	.word	0x200005ec
 800f594:	200005dc 	.word	0x200005dc
 800f598:	200005a4 	.word	0x200005a4
 800f59c:	200005b8 	.word	0x200005b8
 800f5a0:	200005d0 	.word	0x200005d0
 800f5a4:	200005f8 	.word	0x200005f8
 800f5a8:	08017c98 	.word	0x08017c98
 800f5ac:	e000ed04 	.word	0xe000ed04

0800f5b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b084      	sub	sp, #16
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d01d      	beq.n	800f5fe <vTaskDelay+0x4e>
        {
            vTaskSuspendAll();
 800f5c2:	f000 f961 	bl	800f888 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 800f5c6:	4b15      	ldr	r3, [pc, #84]	@ (800f61c <vTaskDelay+0x6c>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	2b01      	cmp	r3, #1
 800f5cc:	d010      	beq.n	800f5f0 <vTaskDelay+0x40>
    __asm volatile
 800f5ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5d2:	b672      	cpsid	i
 800f5d4:	f383 8811 	msr	BASEPRI, r3
 800f5d8:	f3bf 8f6f 	isb	sy
 800f5dc:	f3bf 8f4f 	dsb	sy
 800f5e0:	b662      	cpsie	i
 800f5e2:	60bb      	str	r3, [r7, #8]
}
 800f5e4:	bf00      	nop
 800f5e6:	f640 118e 	movw	r1, #2446	@ 0x98e
 800f5ea:	480d      	ldr	r0, [pc, #52]	@ (800f620 <vTaskDelay+0x70>)
 800f5ec:	f7f6 fb94 	bl	8005d18 <vAssertCalled>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f5f0:	2100      	movs	r1, #0
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	f001 fac0 	bl	8010b78 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800f5f8:	f000 f954 	bl	800f8a4 <xTaskResumeAll>
 800f5fc:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d107      	bne.n	800f614 <vTaskDelay+0x64>
        {
            taskYIELD_WITHIN_API();
 800f604:	4b07      	ldr	r3, [pc, #28]	@ (800f624 <vTaskDelay+0x74>)
 800f606:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f60a:	601a      	str	r2, [r3, #0]
 800f60c:	f3bf 8f4f 	dsb	sy
 800f610:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 800f614:	bf00      	nop
 800f616:	3710      	adds	r7, #16
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}
 800f61c:	200005f8 	.word	0x200005f8
 800f620:	08017c98 	.word	0x08017c98
 800f624:	e000ed04 	.word	0xe000ed04

0800f628 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

    eTaskState eTaskGetState( TaskHandle_t xTask )
    {
 800f628:	b580      	push	{r7, lr}
 800f62a:	b08a      	sub	sp, #40	@ 0x28
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
        eTaskState eReturn;
        List_t const * pxStateList;
        List_t const * pxEventList;
        List_t const * pxDelayedList;
        List_t const * pxOverflowedDelayedList;
        const TCB_t * const pxTCB = xTask;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	61fb      	str	r3, [r7, #28]

        traceENTER_eTaskGetState( xTask );

        configASSERT( pxTCB );
 800f634:	69fb      	ldr	r3, [r7, #28]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d110      	bne.n	800f65c <eTaskGetState+0x34>
    __asm volatile
 800f63a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f63e:	b672      	cpsid	i
 800f640:	f383 8811 	msr	BASEPRI, r3
 800f644:	f3bf 8f6f 	isb	sy
 800f648:	f3bf 8f4f 	dsb	sy
 800f64c:	b662      	cpsie	i
 800f64e:	60bb      	str	r3, [r7, #8]
}
 800f650:	bf00      	nop
 800f652:	f44f 611c 	mov.w	r1, #2496	@ 0x9c0
 800f656:	4834      	ldr	r0, [pc, #208]	@ (800f728 <eTaskGetState+0x100>)
 800f658:	f7f6 fb5e 	bl	8005d18 <vAssertCalled>

        #if ( configNUMBER_OF_CORES == 1 )
            if( pxTCB == pxCurrentTCB )
 800f65c:	4b33      	ldr	r3, [pc, #204]	@ (800f72c <eTaskGetState+0x104>)
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	69fa      	ldr	r2, [r7, #28]
 800f662:	429a      	cmp	r2, r3
 800f664:	d103      	bne.n	800f66e <eTaskGetState+0x46>
            {
                /* The task calling this function is querying its own state. */
                eReturn = eRunning;
 800f666:	2300      	movs	r3, #0
 800f668:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f66c:	e056      	b.n	800f71c <eTaskGetState+0xf4>
            }
            else
        #endif
        {
            taskENTER_CRITICAL();
 800f66e:	f001 ff07 	bl	8011480 <vPortEnterCritical>
            {
                pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800f672:	69fb      	ldr	r3, [r7, #28]
 800f674:	695b      	ldr	r3, [r3, #20]
 800f676:	61bb      	str	r3, [r7, #24]
                pxEventList = listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) );
 800f678:	69fb      	ldr	r3, [r7, #28]
 800f67a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f67c:	617b      	str	r3, [r7, #20]
                pxDelayedList = pxDelayedTaskList;
 800f67e:	4b2c      	ldr	r3, [pc, #176]	@ (800f730 <eTaskGetState+0x108>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	613b      	str	r3, [r7, #16]
                pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800f684:	4b2b      	ldr	r3, [pc, #172]	@ (800f734 <eTaskGetState+0x10c>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	60fb      	str	r3, [r7, #12]
            }
            taskEXIT_CRITICAL();
 800f68a:	f001 ff31 	bl	80114f0 <vPortExitCritical>

            if( pxEventList == &xPendingReadyList )
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	4a29      	ldr	r2, [pc, #164]	@ (800f738 <eTaskGetState+0x110>)
 800f692:	4293      	cmp	r3, r2
 800f694:	d103      	bne.n	800f69e <eTaskGetState+0x76>
            {
                /* The task has been placed on the pending ready list, so its
                 * state is eReady regardless of what list the task's state list
                 * item is currently placed on. */
                eReturn = eReady;
 800f696:	2301      	movs	r3, #1
 800f698:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f69c:	e03e      	b.n	800f71c <eTaskGetState+0xf4>
            }
            else if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800f69e:	69ba      	ldr	r2, [r7, #24]
 800f6a0:	693b      	ldr	r3, [r7, #16]
 800f6a2:	429a      	cmp	r2, r3
 800f6a4:	d003      	beq.n	800f6ae <eTaskGetState+0x86>
 800f6a6:	69ba      	ldr	r2, [r7, #24]
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	429a      	cmp	r2, r3
 800f6ac:	d103      	bne.n	800f6b6 <eTaskGetState+0x8e>
            {
                /* The task being queried is referenced from one of the Blocked
                 * lists. */
                eReturn = eBlocked;
 800f6ae:	2302      	movs	r3, #2
 800f6b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f6b4:	e032      	b.n	800f71c <eTaskGetState+0xf4>
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                else if( pxStateList == &xSuspendedTaskList )
 800f6b6:	69bb      	ldr	r3, [r7, #24]
 800f6b8:	4a20      	ldr	r2, [pc, #128]	@ (800f73c <eTaskGetState+0x114>)
 800f6ba:	4293      	cmp	r3, r2
 800f6bc:	d120      	bne.n	800f700 <eTaskGetState+0xd8>
                {
                    /* The task being queried is referenced from the suspended
                     * list.  Is it genuinely suspended or is it blocked
                     * indefinitely? */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800f6be:	69fb      	ldr	r3, [r7, #28]
 800f6c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d118      	bne.n	800f6f8 <eTaskGetState+0xd0>
                            /* The task does not appear on the event list item of
                             * and of the RTOS objects, but could still be in the
                             * blocked state if it is waiting on its notification
                             * rather than waiting on an object.  If not, is
                             * suspended. */
                            eReturn = eSuspended;
 800f6c6:	2303      	movs	r3, #3
 800f6c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                            for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	623b      	str	r3, [r7, #32]
 800f6d0:	e00e      	b.n	800f6f0 <eTaskGetState+0xc8>
                            {
                                if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 800f6d2:	69fa      	ldr	r2, [r7, #28]
 800f6d4:	6a3b      	ldr	r3, [r7, #32]
 800f6d6:	4413      	add	r3, r2
 800f6d8:	33ac      	adds	r3, #172	@ 0xac
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	b2db      	uxtb	r3, r3
 800f6de:	2b01      	cmp	r3, #1
 800f6e0:	d103      	bne.n	800f6ea <eTaskGetState+0xc2>
                                {
                                    eReturn = eBlocked;
 800f6e2:	2302      	movs	r3, #2
 800f6e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                    break;
 800f6e8:	e018      	b.n	800f71c <eTaskGetState+0xf4>
                            for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800f6ea:	6a3b      	ldr	r3, [r7, #32]
 800f6ec:	3301      	adds	r3, #1
 800f6ee:	623b      	str	r3, [r7, #32]
 800f6f0:	6a3b      	ldr	r3, [r7, #32]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	dded      	ble.n	800f6d2 <eTaskGetState+0xaa>
 800f6f6:	e011      	b.n	800f71c <eTaskGetState+0xf4>
                        }
                        #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
                    }
                    else
                    {
                        eReturn = eBlocked;
 800f6f8:	2302      	movs	r3, #2
 800f6fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f6fe:	e00d      	b.n	800f71c <eTaskGetState+0xf4>
                    }
                }
            #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */

            #if ( INCLUDE_vTaskDelete == 1 )
                else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800f700:	69bb      	ldr	r3, [r7, #24]
 800f702:	4a0f      	ldr	r2, [pc, #60]	@ (800f740 <eTaskGetState+0x118>)
 800f704:	4293      	cmp	r3, r2
 800f706:	d002      	beq.n	800f70e <eTaskGetState+0xe6>
 800f708:	69bb      	ldr	r3, [r7, #24]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d103      	bne.n	800f716 <eTaskGetState+0xee>
                {
                    /* The task being queried is referenced from the deleted
                     * tasks list, or it is not referenced from any lists at
                     * all. */
                    eReturn = eDeleted;
 800f70e:	2304      	movs	r3, #4
 800f710:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f714:	e002      	b.n	800f71c <eTaskGetState+0xf4>
            {
                #if ( configNUMBER_OF_CORES == 1 )
                {
                    /* If the task is not in any other state, it must be in the
                     * Ready (including pending ready) state. */
                    eReturn = eReady;
 800f716:	2301      	movs	r3, #1
 800f718:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
        }

        traceRETURN_eTaskGetState( eReturn );

        return eReturn;
 800f71c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
    }
 800f720:	4618      	mov	r0, r3
 800f722:	3728      	adds	r7, #40	@ 0x28
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}
 800f728:	08017c98 	.word	0x08017c98
 800f72c:	200004d0 	.word	0x200004d0
 800f730:	20000588 	.word	0x20000588
 800f734:	2000058c 	.word	0x2000058c
 800f738:	20000590 	.word	0x20000590
 800f73c:	200005bc 	.word	0x200005bc
 800f740:	200005a4 	.word	0x200005a4

0800f744 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b08a      	sub	sp, #40	@ 0x28
 800f748:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 800f74a:	2301      	movs	r3, #1
 800f74c:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 800f74e:	2300      	movs	r3, #0
 800f750:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800f752:	2300      	movs	r3, #0
 800f754:	617b      	str	r3, [r7, #20]
 800f756:	e011      	b.n	800f77c <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 800f758:	4a1d      	ldr	r2, [pc, #116]	@ (800f7d0 <prvCreateIdleTasks+0x8c>)
 800f75a:	697b      	ldr	r3, [r7, #20]
 800f75c:	4413      	add	r3, r2
 800f75e:	7819      	ldrb	r1, [r3, #0]
 800f760:	463a      	mov	r2, r7
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	4413      	add	r3, r2
 800f766:	460a      	mov	r2, r1
 800f768:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 800f76a:	463a      	mov	r2, r7
 800f76c:	697b      	ldr	r3, [r7, #20]
 800f76e:	4413      	add	r3, r2
 800f770:	781b      	ldrb	r3, [r3, #0]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d006      	beq.n	800f784 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800f776:	697b      	ldr	r3, [r7, #20]
 800f778:	3301      	adds	r3, #1
 800f77a:	617b      	str	r3, [r7, #20]
 800f77c:	697b      	ldr	r3, [r7, #20]
 800f77e:	2b0f      	cmp	r3, #15
 800f780:	ddea      	ble.n	800f758 <prvCreateIdleTasks+0x14>
 800f782:	e000      	b.n	800f786 <prvCreateIdleTasks+0x42>
        {
            break;
 800f784:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800f786:	2300      	movs	r3, #0
 800f788:	61bb      	str	r3, [r7, #24]
 800f78a:	e016      	b.n	800f7ba <prvCreateIdleTasks+0x76>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 800f78c:	4b11      	ldr	r3, [pc, #68]	@ (800f7d4 <prvCreateIdleTasks+0x90>)
 800f78e:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 800f790:	69bb      	ldr	r3, [r7, #24]
 800f792:	009b      	lsls	r3, r3, #2
 800f794:	4a10      	ldr	r2, [pc, #64]	@ (800f7d8 <prvCreateIdleTasks+0x94>)
 800f796:	4413      	add	r3, r2
 800f798:	4639      	mov	r1, r7
 800f79a:	9301      	str	r3, [sp, #4]
 800f79c:	2300      	movs	r3, #0
 800f79e:	9300      	str	r3, [sp, #0]
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800f7a6:	6938      	ldr	r0, [r7, #16]
 800f7a8:	f7ff fce6 	bl	800f178 <xTaskCreate>
 800f7ac:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 800f7ae:	69fb      	ldr	r3, [r7, #28]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d006      	beq.n	800f7c2 <prvCreateIdleTasks+0x7e>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800f7b4:	69bb      	ldr	r3, [r7, #24]
 800f7b6:	3301      	adds	r3, #1
 800f7b8:	61bb      	str	r3, [r7, #24]
 800f7ba:	69bb      	ldr	r3, [r7, #24]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	dde5      	ble.n	800f78c <prvCreateIdleTasks+0x48>
 800f7c0:	e000      	b.n	800f7c4 <prvCreateIdleTasks+0x80>
        {
            break;
 800f7c2:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800f7c4:	69fb      	ldr	r3, [r7, #28]
}
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	3720      	adds	r7, #32
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}
 800f7ce:	bf00      	nop
 800f7d0:	08017d14 	.word	0x08017d14
 800f7d4:	08010381 	.word	0x08010381
 800f7d8:	200005f4 	.word	0x200005f4

0800f7dc <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b084      	sub	sp, #16
 800f7e0:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 800f7e2:	f7ff ffaf 	bl	800f744 <prvCreateIdleTasks>
 800f7e6:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	2b01      	cmp	r3, #1
 800f7ec:	d102      	bne.n	800f7f4 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 800f7ee:	f001 fa45 	bl	8010c7c <xTimerCreateTimerTask>
 800f7f2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	2b01      	cmp	r3, #1
 800f7f8:	d11d      	bne.n	800f836 <vTaskStartScheduler+0x5a>
    __asm volatile
 800f7fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7fe:	b672      	cpsid	i
 800f800:	f383 8811 	msr	BASEPRI, r3
 800f804:	f3bf 8f6f 	isb	sy
 800f808:	f3bf 8f4f 	dsb	sy
 800f80c:	b662      	cpsie	i
 800f80e:	60bb      	str	r3, [r7, #8]
}
 800f810:	bf00      	nop

        #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800f812:	4b16      	ldr	r3, [pc, #88]	@ (800f86c <vTaskStartScheduler+0x90>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	335c      	adds	r3, #92	@ 0x5c
 800f818:	4a15      	ldr	r2, [pc, #84]	@ (800f870 <vTaskStartScheduler+0x94>)
 800f81a:	6013      	str	r3, [r2, #0]
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800f81c:	4b15      	ldr	r3, [pc, #84]	@ (800f874 <vTaskStartScheduler+0x98>)
 800f81e:	f04f 32ff 	mov.w	r2, #4294967295
 800f822:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800f824:	4b14      	ldr	r3, [pc, #80]	@ (800f878 <vTaskStartScheduler+0x9c>)
 800f826:	2201      	movs	r2, #1
 800f828:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f82a:	4b14      	ldr	r3, [pc, #80]	@ (800f87c <vTaskStartScheduler+0xa0>)
 800f82c:	2200      	movs	r2, #0
 800f82e:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 800f830:	f001 fd48 	bl	80112c4 <xPortStartScheduler>
 800f834:	e014      	b.n	800f860 <vTaskStartScheduler+0x84>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f83c:	d110      	bne.n	800f860 <vTaskStartScheduler+0x84>
    __asm volatile
 800f83e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f842:	b672      	cpsid	i
 800f844:	f383 8811 	msr	BASEPRI, r3
 800f848:	f3bf 8f6f 	isb	sy
 800f84c:	f3bf 8f4f 	dsb	sy
 800f850:	b662      	cpsie	i
 800f852:	607b      	str	r3, [r7, #4]
}
 800f854:	bf00      	nop
 800f856:	f640 61a9 	movw	r1, #3753	@ 0xea9
 800f85a:	4809      	ldr	r0, [pc, #36]	@ (800f880 <vTaskStartScheduler+0xa4>)
 800f85c:	f7f6 fa5c 	bl	8005d18 <vAssertCalled>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800f860:	4b08      	ldr	r3, [pc, #32]	@ (800f884 <vTaskStartScheduler+0xa8>)
 800f862:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 800f864:	bf00      	nop
 800f866:	3710      	adds	r7, #16
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}
 800f86c:	200004d0 	.word	0x200004d0
 800f870:	200001d4 	.word	0x200001d4
 800f874:	200005f0 	.word	0x200005f0
 800f878:	200005dc 	.word	0x200005dc
 800f87c:	200005d4 	.word	0x200005d4
 800f880:	08017c98 	.word	0x08017c98
 800f884:	08018324 	.word	0x08018324

0800f888 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f888:	b480      	push	{r7}
 800f88a:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 800f88c:	4b04      	ldr	r3, [pc, #16]	@ (800f8a0 <vTaskSuspendAll+0x18>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	3301      	adds	r3, #1
 800f892:	4a03      	ldr	r2, [pc, #12]	@ (800f8a0 <vTaskSuspendAll+0x18>)
 800f894:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 800f896:	bf00      	nop
 800f898:	46bd      	mov	sp, r7
 800f89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89e:	4770      	bx	lr
 800f8a0:	200005f8 	.word	0x200005f8

0800f8a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b088      	sub	sp, #32
 800f8a8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800f8b2:	f001 fde5 	bl	8011480 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800f8ba:	4b78      	ldr	r3, [pc, #480]	@ (800fa9c <xTaskResumeAll+0x1f8>)
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d110      	bne.n	800f8e4 <xTaskResumeAll+0x40>
    __asm volatile
 800f8c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8c6:	b672      	cpsid	i
 800f8c8:	f383 8811 	msr	BASEPRI, r3
 800f8cc:	f3bf 8f6f 	isb	sy
 800f8d0:	f3bf 8f4f 	dsb	sy
 800f8d4:	b662      	cpsie	i
 800f8d6:	603b      	str	r3, [r7, #0]
}
 800f8d8:	bf00      	nop
 800f8da:	f640 718b 	movw	r1, #3979	@ 0xf8b
 800f8de:	4870      	ldr	r0, [pc, #448]	@ (800faa0 <xTaskResumeAll+0x1fc>)
 800f8e0:	f7f6 fa1a 	bl	8005d18 <vAssertCalled>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800f8e4:	4b6d      	ldr	r3, [pc, #436]	@ (800fa9c <xTaskResumeAll+0x1f8>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	3b01      	subs	r3, #1
 800f8ea:	4a6c      	ldr	r2, [pc, #432]	@ (800fa9c <xTaskResumeAll+0x1f8>)
 800f8ec:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800f8ee:	4b6b      	ldr	r3, [pc, #428]	@ (800fa9c <xTaskResumeAll+0x1f8>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	f040 80ca 	bne.w	800fa8c <xTaskResumeAll+0x1e8>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f8f8:	4b6a      	ldr	r3, [pc, #424]	@ (800faa4 <xTaskResumeAll+0x200>)
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	f000 80c5 	beq.w	800fa8c <xTaskResumeAll+0x1e8>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f902:	e08e      	b.n	800fa22 <xTaskResumeAll+0x17e>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f904:	4b68      	ldr	r3, [pc, #416]	@ (800faa8 <xTaskResumeAll+0x204>)
 800f906:	68db      	ldr	r3, [r3, #12]
 800f908:	68db      	ldr	r3, [r3, #12]
 800f90a:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800f90c:	69fb      	ldr	r3, [r7, #28]
 800f90e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f910:	60fb      	str	r3, [r7, #12]
 800f912:	69fb      	ldr	r3, [r7, #28]
 800f914:	69db      	ldr	r3, [r3, #28]
 800f916:	69fa      	ldr	r2, [r7, #28]
 800f918:	6a12      	ldr	r2, [r2, #32]
 800f91a:	609a      	str	r2, [r3, #8]
 800f91c:	69fb      	ldr	r3, [r7, #28]
 800f91e:	6a1b      	ldr	r3, [r3, #32]
 800f920:	69fa      	ldr	r2, [r7, #28]
 800f922:	69d2      	ldr	r2, [r2, #28]
 800f924:	605a      	str	r2, [r3, #4]
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	685a      	ldr	r2, [r3, #4]
 800f92a:	69fb      	ldr	r3, [r7, #28]
 800f92c:	3318      	adds	r3, #24
 800f92e:	429a      	cmp	r2, r3
 800f930:	d103      	bne.n	800f93a <xTaskResumeAll+0x96>
 800f932:	69fb      	ldr	r3, [r7, #28]
 800f934:	6a1a      	ldr	r2, [r3, #32]
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	605a      	str	r2, [r3, #4]
 800f93a:	69fb      	ldr	r3, [r7, #28]
 800f93c:	2200      	movs	r2, #0
 800f93e:	629a      	str	r2, [r3, #40]	@ 0x28
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	1e5a      	subs	r2, r3, #1
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800f94a:	69fb      	ldr	r3, [r7, #28]
 800f94c:	695b      	ldr	r3, [r3, #20]
 800f94e:	60bb      	str	r3, [r7, #8]
 800f950:	69fb      	ldr	r3, [r7, #28]
 800f952:	689b      	ldr	r3, [r3, #8]
 800f954:	69fa      	ldr	r2, [r7, #28]
 800f956:	68d2      	ldr	r2, [r2, #12]
 800f958:	609a      	str	r2, [r3, #8]
 800f95a:	69fb      	ldr	r3, [r7, #28]
 800f95c:	68db      	ldr	r3, [r3, #12]
 800f95e:	69fa      	ldr	r2, [r7, #28]
 800f960:	6892      	ldr	r2, [r2, #8]
 800f962:	605a      	str	r2, [r3, #4]
 800f964:	68bb      	ldr	r3, [r7, #8]
 800f966:	685a      	ldr	r2, [r3, #4]
 800f968:	69fb      	ldr	r3, [r7, #28]
 800f96a:	3304      	adds	r3, #4
 800f96c:	429a      	cmp	r2, r3
 800f96e:	d103      	bne.n	800f978 <xTaskResumeAll+0xd4>
 800f970:	69fb      	ldr	r3, [r7, #28]
 800f972:	68da      	ldr	r2, [r3, #12]
 800f974:	68bb      	ldr	r3, [r7, #8]
 800f976:	605a      	str	r2, [r3, #4]
 800f978:	69fb      	ldr	r3, [r7, #28]
 800f97a:	2200      	movs	r2, #0
 800f97c:	615a      	str	r2, [r3, #20]
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	1e5a      	subs	r2, r3, #1
 800f984:	68bb      	ldr	r3, [r7, #8]
 800f986:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800f988:	69fb      	ldr	r3, [r7, #28]
 800f98a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f98c:	2201      	movs	r2, #1
 800f98e:	409a      	lsls	r2, r3
 800f990:	4b46      	ldr	r3, [pc, #280]	@ (800faac <xTaskResumeAll+0x208>)
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	4313      	orrs	r3, r2
 800f996:	4a45      	ldr	r2, [pc, #276]	@ (800faac <xTaskResumeAll+0x208>)
 800f998:	6013      	str	r3, [r2, #0]
 800f99a:	69fb      	ldr	r3, [r7, #28]
 800f99c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f99e:	4944      	ldr	r1, [pc, #272]	@ (800fab0 <xTaskResumeAll+0x20c>)
 800f9a0:	4613      	mov	r3, r2
 800f9a2:	009b      	lsls	r3, r3, #2
 800f9a4:	4413      	add	r3, r2
 800f9a6:	009b      	lsls	r3, r3, #2
 800f9a8:	440b      	add	r3, r1
 800f9aa:	3304      	adds	r3, #4
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	607b      	str	r3, [r7, #4]
 800f9b0:	69fb      	ldr	r3, [r7, #28]
 800f9b2:	687a      	ldr	r2, [r7, #4]
 800f9b4:	609a      	str	r2, [r3, #8]
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	689a      	ldr	r2, [r3, #8]
 800f9ba:	69fb      	ldr	r3, [r7, #28]
 800f9bc:	60da      	str	r2, [r3, #12]
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	689b      	ldr	r3, [r3, #8]
 800f9c2:	69fa      	ldr	r2, [r7, #28]
 800f9c4:	3204      	adds	r2, #4
 800f9c6:	605a      	str	r2, [r3, #4]
 800f9c8:	69fb      	ldr	r3, [r7, #28]
 800f9ca:	1d1a      	adds	r2, r3, #4
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	609a      	str	r2, [r3, #8]
 800f9d0:	69fb      	ldr	r3, [r7, #28]
 800f9d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f9d4:	4613      	mov	r3, r2
 800f9d6:	009b      	lsls	r3, r3, #2
 800f9d8:	4413      	add	r3, r2
 800f9da:	009b      	lsls	r3, r3, #2
 800f9dc:	4a34      	ldr	r2, [pc, #208]	@ (800fab0 <xTaskResumeAll+0x20c>)
 800f9de:	441a      	add	r2, r3
 800f9e0:	69fb      	ldr	r3, [r7, #28]
 800f9e2:	615a      	str	r2, [r3, #20]
 800f9e4:	69fb      	ldr	r3, [r7, #28]
 800f9e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f9e8:	4931      	ldr	r1, [pc, #196]	@ (800fab0 <xTaskResumeAll+0x20c>)
 800f9ea:	4613      	mov	r3, r2
 800f9ec:	009b      	lsls	r3, r3, #2
 800f9ee:	4413      	add	r3, r2
 800f9f0:	009b      	lsls	r3, r3, #2
 800f9f2:	440b      	add	r3, r1
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	69fa      	ldr	r2, [r7, #28]
 800f9f8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800f9fa:	1c59      	adds	r1, r3, #1
 800f9fc:	482c      	ldr	r0, [pc, #176]	@ (800fab0 <xTaskResumeAll+0x20c>)
 800f9fe:	4613      	mov	r3, r2
 800fa00:	009b      	lsls	r3, r3, #2
 800fa02:	4413      	add	r3, r2
 800fa04:	009b      	lsls	r3, r3, #2
 800fa06:	4403      	add	r3, r0
 800fa08:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fa0a:	69fb      	ldr	r3, [r7, #28]
 800fa0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa0e:	4b29      	ldr	r3, [pc, #164]	@ (800fab4 <xTaskResumeAll+0x210>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa14:	429a      	cmp	r2, r3
 800fa16:	d904      	bls.n	800fa22 <xTaskResumeAll+0x17e>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800fa18:	4a27      	ldr	r2, [pc, #156]	@ (800fab8 <xTaskResumeAll+0x214>)
 800fa1a:	693b      	ldr	r3, [r7, #16]
 800fa1c:	2101      	movs	r1, #1
 800fa1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fa22:	4b21      	ldr	r3, [pc, #132]	@ (800faa8 <xTaskResumeAll+0x204>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	f47f af6c 	bne.w	800f904 <xTaskResumeAll+0x60>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 800fa2c:	69fb      	ldr	r3, [r7, #28]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d001      	beq.n	800fa36 <xTaskResumeAll+0x192>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 800fa32:	f000 fe21 	bl	8010678 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fa36:	4b21      	ldr	r3, [pc, #132]	@ (800fabc <xTaskResumeAll+0x218>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800fa3c:	697b      	ldr	r3, [r7, #20]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d012      	beq.n	800fa68 <xTaskResumeAll+0x1c4>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 800fa42:	f000 f8e1 	bl	800fc08 <xTaskIncrementTick>
 800fa46:	4603      	mov	r3, r0
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d004      	beq.n	800fa56 <xTaskResumeAll+0x1b2>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800fa4c:	4a1a      	ldr	r2, [pc, #104]	@ (800fab8 <xTaskResumeAll+0x214>)
 800fa4e:	693b      	ldr	r3, [r7, #16]
 800fa50:	2101      	movs	r1, #1
 800fa52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 800fa56:	697b      	ldr	r3, [r7, #20]
 800fa58:	3b01      	subs	r3, #1
 800fa5a:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800fa5c:	697b      	ldr	r3, [r7, #20]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d1ef      	bne.n	800fa42 <xTaskResumeAll+0x19e>

                            xPendedTicks = 0;
 800fa62:	4b16      	ldr	r3, [pc, #88]	@ (800fabc <xTaskResumeAll+0x218>)
 800fa64:	2200      	movs	r2, #0
 800fa66:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800fa68:	4a13      	ldr	r2, [pc, #76]	@ (800fab8 <xTaskResumeAll+0x214>)
 800fa6a:	693b      	ldr	r3, [r7, #16]
 800fa6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d00b      	beq.n	800fa8c <xTaskResumeAll+0x1e8>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800fa74:	2301      	movs	r3, #1
 800fa76:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800fa78:	4b0e      	ldr	r3, [pc, #56]	@ (800fab4 <xTaskResumeAll+0x210>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	4b10      	ldr	r3, [pc, #64]	@ (800fac0 <xTaskResumeAll+0x21c>)
 800fa7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa82:	601a      	str	r2, [r3, #0]
 800fa84:	f3bf 8f4f 	dsb	sy
 800fa88:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800fa8c:	f001 fd30 	bl	80114f0 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 800fa90:	69bb      	ldr	r3, [r7, #24]
}
 800fa92:	4618      	mov	r0, r3
 800fa94:	3720      	adds	r7, #32
 800fa96:	46bd      	mov	sp, r7
 800fa98:	bd80      	pop	{r7, pc}
 800fa9a:	bf00      	nop
 800fa9c:	200005f8 	.word	0x200005f8
 800faa0:	08017c98 	.word	0x08017c98
 800faa4:	200005d0 	.word	0x200005d0
 800faa8:	20000590 	.word	0x20000590
 800faac:	200005d8 	.word	0x200005d8
 800fab0:	200004d4 	.word	0x200004d4
 800fab4:	200004d0 	.word	0x200004d0
 800fab8:	200005e4 	.word	0x200005e4
 800fabc:	200005e0 	.word	0x200005e0
 800fac0:	e000ed04 	.word	0xe000ed04

0800fac4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fac4:	b480      	push	{r7}
 800fac6:	b083      	sub	sp, #12
 800fac8:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800faca:	4b05      	ldr	r3, [pc, #20]	@ (800fae0 <xTaskGetTickCount+0x1c>)
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 800fad0:	687b      	ldr	r3, [r7, #4]
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	370c      	adds	r7, #12
 800fad6:	46bd      	mov	sp, r7
 800fad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fadc:	4770      	bx	lr
 800fade:	bf00      	nop
 800fae0:	200005d4 	.word	0x200005d4

0800fae4 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800fae4:	b480      	push	{r7}
 800fae6:	af00      	add	r7, sp, #0

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
 800fae8:	4b03      	ldr	r3, [pc, #12]	@ (800faf8 <uxTaskGetNumberOfTasks+0x14>)
 800faea:	681b      	ldr	r3, [r3, #0]
}
 800faec:	4618      	mov	r0, r3
 800faee:	46bd      	mov	sp, r7
 800faf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf4:	4770      	bx	lr
 800faf6:	bf00      	nop
 800faf8:	200005d0 	.word	0x200005d0

0800fafc <uxTaskGetSystemState>:
#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
                                      const UBaseType_t uxArraySize,
                                      configRUN_TIME_COUNTER_TYPE * const pulTotalRunTime )
    {
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b086      	sub	sp, #24
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	60f8      	str	r0, [r7, #12]
 800fb04:	60b9      	str	r1, [r7, #8]
 800fb06:	607a      	str	r2, [r7, #4]
        UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800fb08:	2300      	movs	r3, #0
 800fb0a:	617b      	str	r3, [r7, #20]
 800fb0c:	2307      	movs	r3, #7
 800fb0e:	613b      	str	r3, [r7, #16]

        traceENTER_uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, pulTotalRunTime );

        vTaskSuspendAll();
 800fb10:	f7ff feba 	bl	800f888 <vTaskSuspendAll>
        {
            /* Is there a space in the array for each task in the system? */
            if( uxArraySize >= uxCurrentNumberOfTasks )
 800fb14:	4b36      	ldr	r3, [pc, #216]	@ (800fbf0 <uxTaskGetSystemState+0xf4>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	68ba      	ldr	r2, [r7, #8]
 800fb1a:	429a      	cmp	r2, r3
 800fb1c:	d360      	bcc.n	800fbe0 <uxTaskGetSystemState+0xe4>
            {
                /* Fill in an TaskStatus_t structure with information on each
                 * task in the Ready state. */
                do
                {
                    uxQueue--;
 800fb1e:	693b      	ldr	r3, [r7, #16]
 800fb20:	3b01      	subs	r3, #1
 800fb22:	613b      	str	r3, [r7, #16]
                    uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady ) );
 800fb24:	697b      	ldr	r3, [r7, #20]
 800fb26:	222c      	movs	r2, #44	@ 0x2c
 800fb28:	fb02 f303 	mul.w	r3, r2, r3
 800fb2c:	68fa      	ldr	r2, [r7, #12]
 800fb2e:	18d0      	adds	r0, r2, r3
 800fb30:	693a      	ldr	r2, [r7, #16]
 800fb32:	4613      	mov	r3, r2
 800fb34:	009b      	lsls	r3, r3, #2
 800fb36:	4413      	add	r3, r2
 800fb38:	009b      	lsls	r3, r3, #2
 800fb3a:	4a2e      	ldr	r2, [pc, #184]	@ (800fbf4 <uxTaskGetSystemState+0xf8>)
 800fb3c:	4413      	add	r3, r2
 800fb3e:	2201      	movs	r2, #1
 800fb40:	4619      	mov	r1, r3
 800fb42:	f000 fd35 	bl	80105b0 <prvListTasksWithinSingleList>
 800fb46:	4602      	mov	r2, r0
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	4413      	add	r3, r2
 800fb4c:	617b      	str	r3, [r7, #20]
                } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY );
 800fb4e:	693b      	ldr	r3, [r7, #16]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d1e4      	bne.n	800fb1e <uxTaskGetSystemState+0x22>

                /* Fill in an TaskStatus_t structure with information on each
                 * task in the Blocked state. */
                uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked ) );
 800fb54:	697b      	ldr	r3, [r7, #20]
 800fb56:	222c      	movs	r2, #44	@ 0x2c
 800fb58:	fb02 f303 	mul.w	r3, r2, r3
 800fb5c:	68fa      	ldr	r2, [r7, #12]
 800fb5e:	4413      	add	r3, r2
 800fb60:	4a25      	ldr	r2, [pc, #148]	@ (800fbf8 <uxTaskGetSystemState+0xfc>)
 800fb62:	6811      	ldr	r1, [r2, #0]
 800fb64:	2202      	movs	r2, #2
 800fb66:	4618      	mov	r0, r3
 800fb68:	f000 fd22 	bl	80105b0 <prvListTasksWithinSingleList>
 800fb6c:	4602      	mov	r2, r0
 800fb6e:	697b      	ldr	r3, [r7, #20]
 800fb70:	4413      	add	r3, r2
 800fb72:	617b      	str	r3, [r7, #20]
                uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked ) );
 800fb74:	697b      	ldr	r3, [r7, #20]
 800fb76:	222c      	movs	r2, #44	@ 0x2c
 800fb78:	fb02 f303 	mul.w	r3, r2, r3
 800fb7c:	68fa      	ldr	r2, [r7, #12]
 800fb7e:	4413      	add	r3, r2
 800fb80:	4a1e      	ldr	r2, [pc, #120]	@ (800fbfc <uxTaskGetSystemState+0x100>)
 800fb82:	6811      	ldr	r1, [r2, #0]
 800fb84:	2202      	movs	r2, #2
 800fb86:	4618      	mov	r0, r3
 800fb88:	f000 fd12 	bl	80105b0 <prvListTasksWithinSingleList>
 800fb8c:	4602      	mov	r2, r0
 800fb8e:	697b      	ldr	r3, [r7, #20]
 800fb90:	4413      	add	r3, r2
 800fb92:	617b      	str	r3, [r7, #20]

                #if ( INCLUDE_vTaskDelete == 1 )
                {
                    /* Fill in an TaskStatus_t structure with information on
                     * each task that has been deleted but not yet cleaned up. */
                    uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted ) );
 800fb94:	697b      	ldr	r3, [r7, #20]
 800fb96:	222c      	movs	r2, #44	@ 0x2c
 800fb98:	fb02 f303 	mul.w	r3, r2, r3
 800fb9c:	68fa      	ldr	r2, [r7, #12]
 800fb9e:	4413      	add	r3, r2
 800fba0:	2204      	movs	r2, #4
 800fba2:	4917      	ldr	r1, [pc, #92]	@ (800fc00 <uxTaskGetSystemState+0x104>)
 800fba4:	4618      	mov	r0, r3
 800fba6:	f000 fd03 	bl	80105b0 <prvListTasksWithinSingleList>
 800fbaa:	4602      	mov	r2, r0
 800fbac:	697b      	ldr	r3, [r7, #20]
 800fbae:	4413      	add	r3, r2
 800fbb0:	617b      	str	r3, [r7, #20]

                #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    /* Fill in an TaskStatus_t structure with information on
                     * each task in the Suspended state. */
                    uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended ) );
 800fbb2:	697b      	ldr	r3, [r7, #20]
 800fbb4:	222c      	movs	r2, #44	@ 0x2c
 800fbb6:	fb02 f303 	mul.w	r3, r2, r3
 800fbba:	68fa      	ldr	r2, [r7, #12]
 800fbbc:	4413      	add	r3, r2
 800fbbe:	2203      	movs	r2, #3
 800fbc0:	4910      	ldr	r1, [pc, #64]	@ (800fc04 <uxTaskGetSystemState+0x108>)
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f000 fcf4 	bl	80105b0 <prvListTasksWithinSingleList>
 800fbc8:	4602      	mov	r2, r0
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	4413      	add	r3, r2
 800fbce:	617b      	str	r3, [r7, #20]
                }
                #endif

                #if ( configGENERATE_RUN_TIME_STATS == 1 )
                {
                    if( pulTotalRunTime != NULL )
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d004      	beq.n	800fbe0 <uxTaskGetSystemState+0xe4>
                    {
                        #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
                            portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
                        #else
                            *pulTotalRunTime = ( configRUN_TIME_COUNTER_TYPE ) portGET_RUN_TIME_COUNTER_VALUE();
 800fbd6:	f7ff ff75 	bl	800fac4 <xTaskGetTickCount>
 800fbda:	4602      	mov	r2, r0
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	601a      	str	r2, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        ( void ) xTaskResumeAll();
 800fbe0:	f7ff fe60 	bl	800f8a4 <xTaskResumeAll>

        traceRETURN_uxTaskGetSystemState( uxTask );

        return uxTask;
 800fbe4:	697b      	ldr	r3, [r7, #20]
    }
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	3718      	adds	r7, #24
 800fbea:	46bd      	mov	sp, r7
 800fbec:	bd80      	pop	{r7, pc}
 800fbee:	bf00      	nop
 800fbf0:	200005d0 	.word	0x200005d0
 800fbf4:	200004d4 	.word	0x200004d4
 800fbf8:	20000588 	.word	0x20000588
 800fbfc:	2000058c 	.word	0x2000058c
 800fc00:	200005a4 	.word	0x200005a4
 800fc04:	200005bc 	.word	0x200005bc

0800fc08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b08a      	sub	sp, #40	@ 0x28
 800fc0c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800fc12:	4b81      	ldr	r3, [pc, #516]	@ (800fe18 <xTaskIncrementTick+0x210>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	f040 80f4 	bne.w	800fe04 <xTaskIncrementTick+0x1fc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fc1c:	4b7f      	ldr	r3, [pc, #508]	@ (800fe1c <xTaskIncrementTick+0x214>)
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	3301      	adds	r3, #1
 800fc22:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800fc24:	4a7d      	ldr	r2, [pc, #500]	@ (800fe1c <xTaskIncrementTick+0x214>)
 800fc26:	6a3b      	ldr	r3, [r7, #32]
 800fc28:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800fc2a:	6a3b      	ldr	r3, [r7, #32]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d126      	bne.n	800fc7e <xTaskIncrementTick+0x76>
        {
            taskSWITCH_DELAYED_LISTS();
 800fc30:	4b7b      	ldr	r3, [pc, #492]	@ (800fe20 <xTaskIncrementTick+0x218>)
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d010      	beq.n	800fc5c <xTaskIncrementTick+0x54>
    __asm volatile
 800fc3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc3e:	b672      	cpsid	i
 800fc40:	f383 8811 	msr	BASEPRI, r3
 800fc44:	f3bf 8f6f 	isb	sy
 800fc48:	f3bf 8f4f 	dsb	sy
 800fc4c:	b662      	cpsie	i
 800fc4e:	607b      	str	r3, [r7, #4]
}
 800fc50:	bf00      	nop
 800fc52:	f241 215f 	movw	r1, #4703	@ 0x125f
 800fc56:	4873      	ldr	r0, [pc, #460]	@ (800fe24 <xTaskIncrementTick+0x21c>)
 800fc58:	f7f6 f85e 	bl	8005d18 <vAssertCalled>
 800fc5c:	4b70      	ldr	r3, [pc, #448]	@ (800fe20 <xTaskIncrementTick+0x218>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	61fb      	str	r3, [r7, #28]
 800fc62:	4b71      	ldr	r3, [pc, #452]	@ (800fe28 <xTaskIncrementTick+0x220>)
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	4a6e      	ldr	r2, [pc, #440]	@ (800fe20 <xTaskIncrementTick+0x218>)
 800fc68:	6013      	str	r3, [r2, #0]
 800fc6a:	4a6f      	ldr	r2, [pc, #444]	@ (800fe28 <xTaskIncrementTick+0x220>)
 800fc6c:	69fb      	ldr	r3, [r7, #28]
 800fc6e:	6013      	str	r3, [r2, #0]
 800fc70:	4b6e      	ldr	r3, [pc, #440]	@ (800fe2c <xTaskIncrementTick+0x224>)
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	3301      	adds	r3, #1
 800fc76:	4a6d      	ldr	r2, [pc, #436]	@ (800fe2c <xTaskIncrementTick+0x224>)
 800fc78:	6013      	str	r3, [r2, #0]
 800fc7a:	f000 fcfd 	bl	8010678 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800fc7e:	4b6c      	ldr	r3, [pc, #432]	@ (800fe30 <xTaskIncrementTick+0x228>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	6a3a      	ldr	r2, [r7, #32]
 800fc84:	429a      	cmp	r2, r3
 800fc86:	f0c0 80a8 	bcc.w	800fdda <xTaskIncrementTick+0x1d2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fc8a:	4b65      	ldr	r3, [pc, #404]	@ (800fe20 <xTaskIncrementTick+0x218>)
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d104      	bne.n	800fc9e <xTaskIncrementTick+0x96>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800fc94:	4b66      	ldr	r3, [pc, #408]	@ (800fe30 <xTaskIncrementTick+0x228>)
 800fc96:	f04f 32ff 	mov.w	r2, #4294967295
 800fc9a:	601a      	str	r2, [r3, #0]
                    break;
 800fc9c:	e09d      	b.n	800fdda <xTaskIncrementTick+0x1d2>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800fc9e:	4b60      	ldr	r3, [pc, #384]	@ (800fe20 <xTaskIncrementTick+0x218>)
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	68db      	ldr	r3, [r3, #12]
 800fca4:	68db      	ldr	r3, [r3, #12]
 800fca6:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fca8:	69bb      	ldr	r3, [r7, #24]
 800fcaa:	685b      	ldr	r3, [r3, #4]
 800fcac:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800fcae:	6a3a      	ldr	r2, [r7, #32]
 800fcb0:	697b      	ldr	r3, [r7, #20]
 800fcb2:	429a      	cmp	r2, r3
 800fcb4:	d203      	bcs.n	800fcbe <xTaskIncrementTick+0xb6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800fcb6:	4a5e      	ldr	r2, [pc, #376]	@ (800fe30 <xTaskIncrementTick+0x228>)
 800fcb8:	697b      	ldr	r3, [r7, #20]
 800fcba:	6013      	str	r3, [r2, #0]
                        break;
 800fcbc:	e08d      	b.n	800fdda <xTaskIncrementTick+0x1d2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800fcbe:	69bb      	ldr	r3, [r7, #24]
 800fcc0:	695b      	ldr	r3, [r3, #20]
 800fcc2:	613b      	str	r3, [r7, #16]
 800fcc4:	69bb      	ldr	r3, [r7, #24]
 800fcc6:	689b      	ldr	r3, [r3, #8]
 800fcc8:	69ba      	ldr	r2, [r7, #24]
 800fcca:	68d2      	ldr	r2, [r2, #12]
 800fccc:	609a      	str	r2, [r3, #8]
 800fcce:	69bb      	ldr	r3, [r7, #24]
 800fcd0:	68db      	ldr	r3, [r3, #12]
 800fcd2:	69ba      	ldr	r2, [r7, #24]
 800fcd4:	6892      	ldr	r2, [r2, #8]
 800fcd6:	605a      	str	r2, [r3, #4]
 800fcd8:	693b      	ldr	r3, [r7, #16]
 800fcda:	685a      	ldr	r2, [r3, #4]
 800fcdc:	69bb      	ldr	r3, [r7, #24]
 800fcde:	3304      	adds	r3, #4
 800fce0:	429a      	cmp	r2, r3
 800fce2:	d103      	bne.n	800fcec <xTaskIncrementTick+0xe4>
 800fce4:	69bb      	ldr	r3, [r7, #24]
 800fce6:	68da      	ldr	r2, [r3, #12]
 800fce8:	693b      	ldr	r3, [r7, #16]
 800fcea:	605a      	str	r2, [r3, #4]
 800fcec:	69bb      	ldr	r3, [r7, #24]
 800fcee:	2200      	movs	r2, #0
 800fcf0:	615a      	str	r2, [r3, #20]
 800fcf2:	693b      	ldr	r3, [r7, #16]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	1e5a      	subs	r2, r3, #1
 800fcf8:	693b      	ldr	r3, [r7, #16]
 800fcfa:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fcfc:	69bb      	ldr	r3, [r7, #24]
 800fcfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d01e      	beq.n	800fd42 <xTaskIncrementTick+0x13a>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800fd04:	69bb      	ldr	r3, [r7, #24]
 800fd06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd08:	60fb      	str	r3, [r7, #12]
 800fd0a:	69bb      	ldr	r3, [r7, #24]
 800fd0c:	69db      	ldr	r3, [r3, #28]
 800fd0e:	69ba      	ldr	r2, [r7, #24]
 800fd10:	6a12      	ldr	r2, [r2, #32]
 800fd12:	609a      	str	r2, [r3, #8]
 800fd14:	69bb      	ldr	r3, [r7, #24]
 800fd16:	6a1b      	ldr	r3, [r3, #32]
 800fd18:	69ba      	ldr	r2, [r7, #24]
 800fd1a:	69d2      	ldr	r2, [r2, #28]
 800fd1c:	605a      	str	r2, [r3, #4]
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	685a      	ldr	r2, [r3, #4]
 800fd22:	69bb      	ldr	r3, [r7, #24]
 800fd24:	3318      	adds	r3, #24
 800fd26:	429a      	cmp	r2, r3
 800fd28:	d103      	bne.n	800fd32 <xTaskIncrementTick+0x12a>
 800fd2a:	69bb      	ldr	r3, [r7, #24]
 800fd2c:	6a1a      	ldr	r2, [r3, #32]
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	605a      	str	r2, [r3, #4]
 800fd32:	69bb      	ldr	r3, [r7, #24]
 800fd34:	2200      	movs	r2, #0
 800fd36:	629a      	str	r2, [r3, #40]	@ 0x28
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	1e5a      	subs	r2, r3, #1
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800fd42:	69bb      	ldr	r3, [r7, #24]
 800fd44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd46:	2201      	movs	r2, #1
 800fd48:	409a      	lsls	r2, r3
 800fd4a:	4b3a      	ldr	r3, [pc, #232]	@ (800fe34 <xTaskIncrementTick+0x22c>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	4313      	orrs	r3, r2
 800fd50:	4a38      	ldr	r2, [pc, #224]	@ (800fe34 <xTaskIncrementTick+0x22c>)
 800fd52:	6013      	str	r3, [r2, #0]
 800fd54:	69bb      	ldr	r3, [r7, #24]
 800fd56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd58:	4937      	ldr	r1, [pc, #220]	@ (800fe38 <xTaskIncrementTick+0x230>)
 800fd5a:	4613      	mov	r3, r2
 800fd5c:	009b      	lsls	r3, r3, #2
 800fd5e:	4413      	add	r3, r2
 800fd60:	009b      	lsls	r3, r3, #2
 800fd62:	440b      	add	r3, r1
 800fd64:	3304      	adds	r3, #4
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	60bb      	str	r3, [r7, #8]
 800fd6a:	69bb      	ldr	r3, [r7, #24]
 800fd6c:	68ba      	ldr	r2, [r7, #8]
 800fd6e:	609a      	str	r2, [r3, #8]
 800fd70:	68bb      	ldr	r3, [r7, #8]
 800fd72:	689a      	ldr	r2, [r3, #8]
 800fd74:	69bb      	ldr	r3, [r7, #24]
 800fd76:	60da      	str	r2, [r3, #12]
 800fd78:	68bb      	ldr	r3, [r7, #8]
 800fd7a:	689b      	ldr	r3, [r3, #8]
 800fd7c:	69ba      	ldr	r2, [r7, #24]
 800fd7e:	3204      	adds	r2, #4
 800fd80:	605a      	str	r2, [r3, #4]
 800fd82:	69bb      	ldr	r3, [r7, #24]
 800fd84:	1d1a      	adds	r2, r3, #4
 800fd86:	68bb      	ldr	r3, [r7, #8]
 800fd88:	609a      	str	r2, [r3, #8]
 800fd8a:	69bb      	ldr	r3, [r7, #24]
 800fd8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd8e:	4613      	mov	r3, r2
 800fd90:	009b      	lsls	r3, r3, #2
 800fd92:	4413      	add	r3, r2
 800fd94:	009b      	lsls	r3, r3, #2
 800fd96:	4a28      	ldr	r2, [pc, #160]	@ (800fe38 <xTaskIncrementTick+0x230>)
 800fd98:	441a      	add	r2, r3
 800fd9a:	69bb      	ldr	r3, [r7, #24]
 800fd9c:	615a      	str	r2, [r3, #20]
 800fd9e:	69bb      	ldr	r3, [r7, #24]
 800fda0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fda2:	4925      	ldr	r1, [pc, #148]	@ (800fe38 <xTaskIncrementTick+0x230>)
 800fda4:	4613      	mov	r3, r2
 800fda6:	009b      	lsls	r3, r3, #2
 800fda8:	4413      	add	r3, r2
 800fdaa:	009b      	lsls	r3, r3, #2
 800fdac:	440b      	add	r3, r1
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	69ba      	ldr	r2, [r7, #24]
 800fdb2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800fdb4:	1c59      	adds	r1, r3, #1
 800fdb6:	4820      	ldr	r0, [pc, #128]	@ (800fe38 <xTaskIncrementTick+0x230>)
 800fdb8:	4613      	mov	r3, r2
 800fdba:	009b      	lsls	r3, r3, #2
 800fdbc:	4413      	add	r3, r2
 800fdbe:	009b      	lsls	r3, r3, #2
 800fdc0:	4403      	add	r3, r0
 800fdc2:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fdc4:	69bb      	ldr	r3, [r7, #24]
 800fdc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fdc8:	4b1c      	ldr	r3, [pc, #112]	@ (800fe3c <xTaskIncrementTick+0x234>)
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdce:	429a      	cmp	r2, r3
 800fdd0:	f67f af5b 	bls.w	800fc8a <xTaskIncrementTick+0x82>
                            {
                                xSwitchRequired = pdTRUE;
 800fdd4:	2301      	movs	r3, #1
 800fdd6:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fdd8:	e757      	b.n	800fc8a <xTaskIncrementTick+0x82>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 800fdda:	4b18      	ldr	r3, [pc, #96]	@ (800fe3c <xTaskIncrementTick+0x234>)
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fde0:	4915      	ldr	r1, [pc, #84]	@ (800fe38 <xTaskIncrementTick+0x230>)
 800fde2:	4613      	mov	r3, r2
 800fde4:	009b      	lsls	r3, r3, #2
 800fde6:	4413      	add	r3, r2
 800fde8:	009b      	lsls	r3, r3, #2
 800fdea:	440b      	add	r3, r1
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	2b01      	cmp	r3, #1
 800fdf0:	d901      	bls.n	800fdf6 <xTaskIncrementTick+0x1ee>
                {
                    xSwitchRequired = pdTRUE;
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 800fdf6:	4b12      	ldr	r3, [pc, #72]	@ (800fe40 <xTaskIncrementTick+0x238>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d007      	beq.n	800fe0e <xTaskIncrementTick+0x206>
                {
                    xSwitchRequired = pdTRUE;
 800fdfe:	2301      	movs	r3, #1
 800fe00:	627b      	str	r3, [r7, #36]	@ 0x24
 800fe02:	e004      	b.n	800fe0e <xTaskIncrementTick+0x206>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 800fe04:	4b0f      	ldr	r3, [pc, #60]	@ (800fe44 <xTaskIncrementTick+0x23c>)
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	3301      	adds	r3, #1
 800fe0a:	4a0e      	ldr	r2, [pc, #56]	@ (800fe44 <xTaskIncrementTick+0x23c>)
 800fe0c:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 800fe0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800fe10:	4618      	mov	r0, r3
 800fe12:	3728      	adds	r7, #40	@ 0x28
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}
 800fe18:	200005f8 	.word	0x200005f8
 800fe1c:	200005d4 	.word	0x200005d4
 800fe20:	20000588 	.word	0x20000588
 800fe24:	08017c98 	.word	0x08017c98
 800fe28:	2000058c 	.word	0x2000058c
 800fe2c:	200005e8 	.word	0x200005e8
 800fe30:	200005f0 	.word	0x200005f0
 800fe34:	200005d8 	.word	0x200005d8
 800fe38:	200004d4 	.word	0x200004d4
 800fe3c:	200004d0 	.word	0x200004d0
 800fe40:	200005e4 	.word	0x200005e4
 800fe44:	200005e0 	.word	0x200005e0

0800fe48 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b088      	sub	sp, #32
 800fe4c:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800fe4e:	4b4c      	ldr	r3, [pc, #304]	@ (800ff80 <vTaskSwitchContext+0x138>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d003      	beq.n	800fe5e <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 800fe56:	4b4b      	ldr	r3, [pc, #300]	@ (800ff84 <vTaskSwitchContext+0x13c>)
 800fe58:	2201      	movs	r2, #1
 800fe5a:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 800fe5c:	e08c      	b.n	800ff78 <vTaskSwitchContext+0x130>
            xYieldPendings[ 0 ] = pdFALSE;
 800fe5e:	4b49      	ldr	r3, [pc, #292]	@ (800ff84 <vTaskSwitchContext+0x13c>)
 800fe60:	2200      	movs	r2, #0
 800fe62:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime[ 0 ] = portGET_RUN_TIME_COUNTER_VALUE();
 800fe64:	f7ff fe2e 	bl	800fac4 <xTaskGetTickCount>
 800fe68:	4603      	mov	r3, r0
 800fe6a:	4a47      	ldr	r2, [pc, #284]	@ (800ff88 <vTaskSwitchContext+0x140>)
 800fe6c:	6013      	str	r3, [r2, #0]
                if( ulTotalRunTime[ 0 ] > ulTaskSwitchedInTime[ 0 ] )
 800fe6e:	4b46      	ldr	r3, [pc, #280]	@ (800ff88 <vTaskSwitchContext+0x140>)
 800fe70:	681a      	ldr	r2, [r3, #0]
 800fe72:	4b46      	ldr	r3, [pc, #280]	@ (800ff8c <vTaskSwitchContext+0x144>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	429a      	cmp	r2, r3
 800fe78:	d909      	bls.n	800fe8e <vTaskSwitchContext+0x46>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime[ 0 ] - ulTaskSwitchedInTime[ 0 ] );
 800fe7a:	4b43      	ldr	r3, [pc, #268]	@ (800ff88 <vTaskSwitchContext+0x140>)
 800fe7c:	681a      	ldr	r2, [r3, #0]
 800fe7e:	4b43      	ldr	r3, [pc, #268]	@ (800ff8c <vTaskSwitchContext+0x144>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	1ad1      	subs	r1, r2, r3
 800fe84:	4b42      	ldr	r3, [pc, #264]	@ (800ff90 <vTaskSwitchContext+0x148>)
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800fe8a:	440a      	add	r2, r1
 800fe8c:	659a      	str	r2, [r3, #88]	@ 0x58
                ulTaskSwitchedInTime[ 0 ] = ulTotalRunTime[ 0 ];
 800fe8e:	4b3e      	ldr	r3, [pc, #248]	@ (800ff88 <vTaskSwitchContext+0x140>)
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	4a3e      	ldr	r2, [pc, #248]	@ (800ff8c <vTaskSwitchContext+0x144>)
 800fe94:	6013      	str	r3, [r2, #0]
            taskCHECK_FOR_STACK_OVERFLOW();
 800fe96:	4b3e      	ldr	r3, [pc, #248]	@ (800ff90 <vTaskSwitchContext+0x148>)
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe9c:	61fb      	str	r3, [r7, #28]
 800fe9e:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800fea2:	61bb      	str	r3, [r7, #24]
 800fea4:	69fb      	ldr	r3, [r7, #28]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	69ba      	ldr	r2, [r7, #24]
 800feaa:	429a      	cmp	r2, r3
 800feac:	d111      	bne.n	800fed2 <vTaskSwitchContext+0x8a>
 800feae:	69fb      	ldr	r3, [r7, #28]
 800feb0:	3304      	adds	r3, #4
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	69ba      	ldr	r2, [r7, #24]
 800feb6:	429a      	cmp	r2, r3
 800feb8:	d10b      	bne.n	800fed2 <vTaskSwitchContext+0x8a>
 800feba:	69fb      	ldr	r3, [r7, #28]
 800febc:	3308      	adds	r3, #8
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	69ba      	ldr	r2, [r7, #24]
 800fec2:	429a      	cmp	r2, r3
 800fec4:	d105      	bne.n	800fed2 <vTaskSwitchContext+0x8a>
 800fec6:	69fb      	ldr	r3, [r7, #28]
 800fec8:	330c      	adds	r3, #12
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	69ba      	ldr	r2, [r7, #24]
 800fece:	429a      	cmp	r2, r3
 800fed0:	d009      	beq.n	800fee6 <vTaskSwitchContext+0x9e>
 800fed2:	4b2f      	ldr	r3, [pc, #188]	@ (800ff90 <vTaskSwitchContext+0x148>)
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	3334      	adds	r3, #52	@ 0x34
 800fed8:	617b      	str	r3, [r7, #20]
 800feda:	4b2d      	ldr	r3, [pc, #180]	@ (800ff90 <vTaskSwitchContext+0x148>)
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	6979      	ldr	r1, [r7, #20]
 800fee0:	4618      	mov	r0, r3
 800fee2:	f7f5 fabf 	bl	8005464 <vApplicationStackOverflowHook>
            taskSELECT_HIGHEST_PRIORITY_TASK();
 800fee6:	4b2b      	ldr	r3, [pc, #172]	@ (800ff94 <vTaskSwitchContext+0x14c>)
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	60bb      	str	r3, [r7, #8]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800feec:	68bb      	ldr	r3, [r7, #8]
 800feee:	fab3 f383 	clz	r3, r3
 800fef2:	71fb      	strb	r3, [r7, #7]
        return ucReturn;
 800fef4:	79fb      	ldrb	r3, [r7, #7]
 800fef6:	f1c3 031f 	rsb	r3, r3, #31
 800fefa:	613b      	str	r3, [r7, #16]
 800fefc:	4926      	ldr	r1, [pc, #152]	@ (800ff98 <vTaskSwitchContext+0x150>)
 800fefe:	693a      	ldr	r2, [r7, #16]
 800ff00:	4613      	mov	r3, r2
 800ff02:	009b      	lsls	r3, r3, #2
 800ff04:	4413      	add	r3, r2
 800ff06:	009b      	lsls	r3, r3, #2
 800ff08:	440b      	add	r3, r1
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d110      	bne.n	800ff32 <vTaskSwitchContext+0xea>
    __asm volatile
 800ff10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff14:	b672      	cpsid	i
 800ff16:	f383 8811 	msr	BASEPRI, r3
 800ff1a:	f3bf 8f6f 	isb	sy
 800ff1e:	f3bf 8f4f 	dsb	sy
 800ff22:	b662      	cpsie	i
 800ff24:	603b      	str	r3, [r7, #0]
}
 800ff26:	bf00      	nop
 800ff28:	f241 31fa 	movw	r1, #5114	@ 0x13fa
 800ff2c:	481b      	ldr	r0, [pc, #108]	@ (800ff9c <vTaskSwitchContext+0x154>)
 800ff2e:	f7f5 fef3 	bl	8005d18 <vAssertCalled>
 800ff32:	693a      	ldr	r2, [r7, #16]
 800ff34:	4613      	mov	r3, r2
 800ff36:	009b      	lsls	r3, r3, #2
 800ff38:	4413      	add	r3, r2
 800ff3a:	009b      	lsls	r3, r3, #2
 800ff3c:	4a16      	ldr	r2, [pc, #88]	@ (800ff98 <vTaskSwitchContext+0x150>)
 800ff3e:	4413      	add	r3, r2
 800ff40:	60fb      	str	r3, [r7, #12]
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	685b      	ldr	r3, [r3, #4]
 800ff46:	685a      	ldr	r2, [r3, #4]
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	605a      	str	r2, [r3, #4]
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	685a      	ldr	r2, [r3, #4]
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	3308      	adds	r3, #8
 800ff54:	429a      	cmp	r2, r3
 800ff56:	d103      	bne.n	800ff60 <vTaskSwitchContext+0x118>
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	68da      	ldr	r2, [r3, #12]
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	605a      	str	r2, [r3, #4]
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	685b      	ldr	r3, [r3, #4]
 800ff64:	68db      	ldr	r3, [r3, #12]
 800ff66:	4a0a      	ldr	r2, [pc, #40]	@ (800ff90 <vTaskSwitchContext+0x148>)
 800ff68:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800ff6a:	4b09      	ldr	r3, [pc, #36]	@ (800ff90 <vTaskSwitchContext+0x148>)
 800ff6c:	681b      	ldr	r3, [r3, #0]
                configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800ff6e:	4b08      	ldr	r3, [pc, #32]	@ (800ff90 <vTaskSwitchContext+0x148>)
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	335c      	adds	r3, #92	@ 0x5c
 800ff74:	4a0a      	ldr	r2, [pc, #40]	@ (800ffa0 <vTaskSwitchContext+0x158>)
 800ff76:	6013      	str	r3, [r2, #0]
    }
 800ff78:	bf00      	nop
 800ff7a:	3720      	adds	r7, #32
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}
 800ff80:	200005f8 	.word	0x200005f8
 800ff84:	200005e4 	.word	0x200005e4
 800ff88:	20000600 	.word	0x20000600
 800ff8c:	200005fc 	.word	0x200005fc
 800ff90:	200004d0 	.word	0x200004d0
 800ff94:	200005d8 	.word	0x200005d8
 800ff98:	200004d4 	.word	0x200004d4
 800ff9c:	08017c98 	.word	0x08017c98
 800ffa0:	200001d4 	.word	0x200001d4

0800ffa4 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b084      	sub	sp, #16
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
 800ffac:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d110      	bne.n	800ffd6 <vTaskPlaceOnEventList+0x32>
    __asm volatile
 800ffb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffb8:	b672      	cpsid	i
 800ffba:	f383 8811 	msr	BASEPRI, r3
 800ffbe:	f3bf 8f6f 	isb	sy
 800ffc2:	f3bf 8f4f 	dsb	sy
 800ffc6:	b662      	cpsie	i
 800ffc8:	60fb      	str	r3, [r7, #12]
}
 800ffca:	bf00      	nop
 800ffcc:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 800ffd0:	4808      	ldr	r0, [pc, #32]	@ (800fff4 <vTaskPlaceOnEventList+0x50>)
 800ffd2:	f7f5 fea1 	bl	8005d18 <vAssertCalled>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ffd6:	4b08      	ldr	r3, [pc, #32]	@ (800fff8 <vTaskPlaceOnEventList+0x54>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	3318      	adds	r3, #24
 800ffdc:	4619      	mov	r1, r3
 800ffde:	6878      	ldr	r0, [r7, #4]
 800ffe0:	f7fe f9c9 	bl	800e376 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ffe4:	2101      	movs	r1, #1
 800ffe6:	6838      	ldr	r0, [r7, #0]
 800ffe8:	f000 fdc6 	bl	8010b78 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 800ffec:	bf00      	nop
 800ffee:	3710      	adds	r7, #16
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}
 800fff4:	08017c98 	.word	0x08017c98
 800fff8:	200004d0 	.word	0x200004d0

0800fffc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b086      	sub	sp, #24
 8010000:	af00      	add	r7, sp, #0
 8010002:	60f8      	str	r0, [r7, #12]
 8010004:	60b9      	str	r1, [r7, #8]
 8010006:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d110      	bne.n	8010030 <vTaskPlaceOnEventListRestricted+0x34>
    __asm volatile
 801000e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010012:	b672      	cpsid	i
 8010014:	f383 8811 	msr	BASEPRI, r3
 8010018:	f3bf 8f6f 	isb	sy
 801001c:	f3bf 8f4f 	dsb	sy
 8010020:	b662      	cpsie	i
 8010022:	613b      	str	r3, [r7, #16]
}
 8010024:	bf00      	nop
 8010026:	f241 41be 	movw	r1, #5310	@ 0x14be
 801002a:	4819      	ldr	r0, [pc, #100]	@ (8010090 <vTaskPlaceOnEventListRestricted+0x94>)
 801002c:	f7f5 fe74 	bl	8005d18 <vAssertCalled>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	685b      	ldr	r3, [r3, #4]
 8010034:	617b      	str	r3, [r7, #20]
 8010036:	4b17      	ldr	r3, [pc, #92]	@ (8010094 <vTaskPlaceOnEventListRestricted+0x98>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	697a      	ldr	r2, [r7, #20]
 801003c:	61da      	str	r2, [r3, #28]
 801003e:	4b15      	ldr	r3, [pc, #84]	@ (8010094 <vTaskPlaceOnEventListRestricted+0x98>)
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	697a      	ldr	r2, [r7, #20]
 8010044:	6892      	ldr	r2, [r2, #8]
 8010046:	621a      	str	r2, [r3, #32]
 8010048:	4b12      	ldr	r3, [pc, #72]	@ (8010094 <vTaskPlaceOnEventListRestricted+0x98>)
 801004a:	681a      	ldr	r2, [r3, #0]
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	689b      	ldr	r3, [r3, #8]
 8010050:	3218      	adds	r2, #24
 8010052:	605a      	str	r2, [r3, #4]
 8010054:	4b0f      	ldr	r3, [pc, #60]	@ (8010094 <vTaskPlaceOnEventListRestricted+0x98>)
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	f103 0218 	add.w	r2, r3, #24
 801005c:	697b      	ldr	r3, [r7, #20]
 801005e:	609a      	str	r2, [r3, #8]
 8010060:	4b0c      	ldr	r3, [pc, #48]	@ (8010094 <vTaskPlaceOnEventListRestricted+0x98>)
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	68fa      	ldr	r2, [r7, #12]
 8010066:	629a      	str	r2, [r3, #40]	@ 0x28
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	1c5a      	adds	r2, r3, #1
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d002      	beq.n	801007e <vTaskPlaceOnEventListRestricted+0x82>
        {
            xTicksToWait = portMAX_DELAY;
 8010078:	f04f 33ff 	mov.w	r3, #4294967295
 801007c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801007e:	6879      	ldr	r1, [r7, #4]
 8010080:	68b8      	ldr	r0, [r7, #8]
 8010082:	f000 fd79 	bl	8010b78 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 8010086:	bf00      	nop
 8010088:	3718      	adds	r7, #24
 801008a:	46bd      	mov	sp, r7
 801008c:	bd80      	pop	{r7, pc}
 801008e:	bf00      	nop
 8010090:	08017c98 	.word	0x08017c98
 8010094:	200004d0 	.word	0x200004d0

08010098 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b08a      	sub	sp, #40	@ 0x28
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	68db      	ldr	r3, [r3, #12]
 80100a4:	68db      	ldr	r3, [r3, #12]
 80100a6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80100a8:	6a3b      	ldr	r3, [r7, #32]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d110      	bne.n	80100d0 <xTaskRemoveFromEventList+0x38>
    __asm volatile
 80100ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100b2:	b672      	cpsid	i
 80100b4:	f383 8811 	msr	BASEPRI, r3
 80100b8:	f3bf 8f6f 	isb	sy
 80100bc:	f3bf 8f4f 	dsb	sy
 80100c0:	b662      	cpsie	i
 80100c2:	60fb      	str	r3, [r7, #12]
}
 80100c4:	bf00      	nop
 80100c6:	f241 41f5 	movw	r1, #5365	@ 0x14f5
 80100ca:	485b      	ldr	r0, [pc, #364]	@ (8010238 <xTaskRemoveFromEventList+0x1a0>)
 80100cc:	f7f5 fe24 	bl	8005d18 <vAssertCalled>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80100d0:	6a3b      	ldr	r3, [r7, #32]
 80100d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100d4:	61fb      	str	r3, [r7, #28]
 80100d6:	6a3b      	ldr	r3, [r7, #32]
 80100d8:	69db      	ldr	r3, [r3, #28]
 80100da:	6a3a      	ldr	r2, [r7, #32]
 80100dc:	6a12      	ldr	r2, [r2, #32]
 80100de:	609a      	str	r2, [r3, #8]
 80100e0:	6a3b      	ldr	r3, [r7, #32]
 80100e2:	6a1b      	ldr	r3, [r3, #32]
 80100e4:	6a3a      	ldr	r2, [r7, #32]
 80100e6:	69d2      	ldr	r2, [r2, #28]
 80100e8:	605a      	str	r2, [r3, #4]
 80100ea:	69fb      	ldr	r3, [r7, #28]
 80100ec:	685a      	ldr	r2, [r3, #4]
 80100ee:	6a3b      	ldr	r3, [r7, #32]
 80100f0:	3318      	adds	r3, #24
 80100f2:	429a      	cmp	r2, r3
 80100f4:	d103      	bne.n	80100fe <xTaskRemoveFromEventList+0x66>
 80100f6:	6a3b      	ldr	r3, [r7, #32]
 80100f8:	6a1a      	ldr	r2, [r3, #32]
 80100fa:	69fb      	ldr	r3, [r7, #28]
 80100fc:	605a      	str	r2, [r3, #4]
 80100fe:	6a3b      	ldr	r3, [r7, #32]
 8010100:	2200      	movs	r2, #0
 8010102:	629a      	str	r2, [r3, #40]	@ 0x28
 8010104:	69fb      	ldr	r3, [r7, #28]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	1e5a      	subs	r2, r3, #1
 801010a:	69fb      	ldr	r3, [r7, #28]
 801010c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 801010e:	4b4b      	ldr	r3, [pc, #300]	@ (801023c <xTaskRemoveFromEventList+0x1a4>)
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d160      	bne.n	80101d8 <xTaskRemoveFromEventList+0x140>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8010116:	6a3b      	ldr	r3, [r7, #32]
 8010118:	695b      	ldr	r3, [r3, #20]
 801011a:	617b      	str	r3, [r7, #20]
 801011c:	6a3b      	ldr	r3, [r7, #32]
 801011e:	689b      	ldr	r3, [r3, #8]
 8010120:	6a3a      	ldr	r2, [r7, #32]
 8010122:	68d2      	ldr	r2, [r2, #12]
 8010124:	609a      	str	r2, [r3, #8]
 8010126:	6a3b      	ldr	r3, [r7, #32]
 8010128:	68db      	ldr	r3, [r3, #12]
 801012a:	6a3a      	ldr	r2, [r7, #32]
 801012c:	6892      	ldr	r2, [r2, #8]
 801012e:	605a      	str	r2, [r3, #4]
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	685a      	ldr	r2, [r3, #4]
 8010134:	6a3b      	ldr	r3, [r7, #32]
 8010136:	3304      	adds	r3, #4
 8010138:	429a      	cmp	r2, r3
 801013a:	d103      	bne.n	8010144 <xTaskRemoveFromEventList+0xac>
 801013c:	6a3b      	ldr	r3, [r7, #32]
 801013e:	68da      	ldr	r2, [r3, #12]
 8010140:	697b      	ldr	r3, [r7, #20]
 8010142:	605a      	str	r2, [r3, #4]
 8010144:	6a3b      	ldr	r3, [r7, #32]
 8010146:	2200      	movs	r2, #0
 8010148:	615a      	str	r2, [r3, #20]
 801014a:	697b      	ldr	r3, [r7, #20]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	1e5a      	subs	r2, r3, #1
 8010150:	697b      	ldr	r3, [r7, #20]
 8010152:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8010154:	6a3b      	ldr	r3, [r7, #32]
 8010156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010158:	2201      	movs	r2, #1
 801015a:	409a      	lsls	r2, r3
 801015c:	4b38      	ldr	r3, [pc, #224]	@ (8010240 <xTaskRemoveFromEventList+0x1a8>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	4313      	orrs	r3, r2
 8010162:	4a37      	ldr	r2, [pc, #220]	@ (8010240 <xTaskRemoveFromEventList+0x1a8>)
 8010164:	6013      	str	r3, [r2, #0]
 8010166:	6a3b      	ldr	r3, [r7, #32]
 8010168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801016a:	4936      	ldr	r1, [pc, #216]	@ (8010244 <xTaskRemoveFromEventList+0x1ac>)
 801016c:	4613      	mov	r3, r2
 801016e:	009b      	lsls	r3, r3, #2
 8010170:	4413      	add	r3, r2
 8010172:	009b      	lsls	r3, r3, #2
 8010174:	440b      	add	r3, r1
 8010176:	3304      	adds	r3, #4
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	613b      	str	r3, [r7, #16]
 801017c:	6a3b      	ldr	r3, [r7, #32]
 801017e:	693a      	ldr	r2, [r7, #16]
 8010180:	609a      	str	r2, [r3, #8]
 8010182:	693b      	ldr	r3, [r7, #16]
 8010184:	689a      	ldr	r2, [r3, #8]
 8010186:	6a3b      	ldr	r3, [r7, #32]
 8010188:	60da      	str	r2, [r3, #12]
 801018a:	693b      	ldr	r3, [r7, #16]
 801018c:	689b      	ldr	r3, [r3, #8]
 801018e:	6a3a      	ldr	r2, [r7, #32]
 8010190:	3204      	adds	r2, #4
 8010192:	605a      	str	r2, [r3, #4]
 8010194:	6a3b      	ldr	r3, [r7, #32]
 8010196:	1d1a      	adds	r2, r3, #4
 8010198:	693b      	ldr	r3, [r7, #16]
 801019a:	609a      	str	r2, [r3, #8]
 801019c:	6a3b      	ldr	r3, [r7, #32]
 801019e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101a0:	4613      	mov	r3, r2
 80101a2:	009b      	lsls	r3, r3, #2
 80101a4:	4413      	add	r3, r2
 80101a6:	009b      	lsls	r3, r3, #2
 80101a8:	4a26      	ldr	r2, [pc, #152]	@ (8010244 <xTaskRemoveFromEventList+0x1ac>)
 80101aa:	441a      	add	r2, r3
 80101ac:	6a3b      	ldr	r3, [r7, #32]
 80101ae:	615a      	str	r2, [r3, #20]
 80101b0:	6a3b      	ldr	r3, [r7, #32]
 80101b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101b4:	4923      	ldr	r1, [pc, #140]	@ (8010244 <xTaskRemoveFromEventList+0x1ac>)
 80101b6:	4613      	mov	r3, r2
 80101b8:	009b      	lsls	r3, r3, #2
 80101ba:	4413      	add	r3, r2
 80101bc:	009b      	lsls	r3, r3, #2
 80101be:	440b      	add	r3, r1
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	6a3a      	ldr	r2, [r7, #32]
 80101c4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80101c6:	1c59      	adds	r1, r3, #1
 80101c8:	481e      	ldr	r0, [pc, #120]	@ (8010244 <xTaskRemoveFromEventList+0x1ac>)
 80101ca:	4613      	mov	r3, r2
 80101cc:	009b      	lsls	r3, r3, #2
 80101ce:	4413      	add	r3, r2
 80101d0:	009b      	lsls	r3, r3, #2
 80101d2:	4403      	add	r3, r0
 80101d4:	6019      	str	r1, [r3, #0]
 80101d6:	e01b      	b.n	8010210 <xTaskRemoveFromEventList+0x178>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80101d8:	4b1b      	ldr	r3, [pc, #108]	@ (8010248 <xTaskRemoveFromEventList+0x1b0>)
 80101da:	685b      	ldr	r3, [r3, #4]
 80101dc:	61bb      	str	r3, [r7, #24]
 80101de:	6a3b      	ldr	r3, [r7, #32]
 80101e0:	69ba      	ldr	r2, [r7, #24]
 80101e2:	61da      	str	r2, [r3, #28]
 80101e4:	69bb      	ldr	r3, [r7, #24]
 80101e6:	689a      	ldr	r2, [r3, #8]
 80101e8:	6a3b      	ldr	r3, [r7, #32]
 80101ea:	621a      	str	r2, [r3, #32]
 80101ec:	69bb      	ldr	r3, [r7, #24]
 80101ee:	689b      	ldr	r3, [r3, #8]
 80101f0:	6a3a      	ldr	r2, [r7, #32]
 80101f2:	3218      	adds	r2, #24
 80101f4:	605a      	str	r2, [r3, #4]
 80101f6:	6a3b      	ldr	r3, [r7, #32]
 80101f8:	f103 0218 	add.w	r2, r3, #24
 80101fc:	69bb      	ldr	r3, [r7, #24]
 80101fe:	609a      	str	r2, [r3, #8]
 8010200:	6a3b      	ldr	r3, [r7, #32]
 8010202:	4a11      	ldr	r2, [pc, #68]	@ (8010248 <xTaskRemoveFromEventList+0x1b0>)
 8010204:	629a      	str	r2, [r3, #40]	@ 0x28
 8010206:	4b10      	ldr	r3, [pc, #64]	@ (8010248 <xTaskRemoveFromEventList+0x1b0>)
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	3301      	adds	r3, #1
 801020c:	4a0e      	ldr	r2, [pc, #56]	@ (8010248 <xTaskRemoveFromEventList+0x1b0>)
 801020e:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010210:	6a3b      	ldr	r3, [r7, #32]
 8010212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010214:	4b0d      	ldr	r3, [pc, #52]	@ (801024c <xTaskRemoveFromEventList+0x1b4>)
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801021a:	429a      	cmp	r2, r3
 801021c:	d905      	bls.n	801022a <xTaskRemoveFromEventList+0x192>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 801021e:	2301      	movs	r3, #1
 8010220:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8010222:	4b0b      	ldr	r3, [pc, #44]	@ (8010250 <xTaskRemoveFromEventList+0x1b8>)
 8010224:	2201      	movs	r2, #1
 8010226:	601a      	str	r2, [r3, #0]
 8010228:	e001      	b.n	801022e <xTaskRemoveFromEventList+0x196>
        }
        else
        {
            xReturn = pdFALSE;
 801022a:	2300      	movs	r3, #0
 801022c:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 801022e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010230:	4618      	mov	r0, r3
 8010232:	3728      	adds	r7, #40	@ 0x28
 8010234:	46bd      	mov	sp, r7
 8010236:	bd80      	pop	{r7, pc}
 8010238:	08017c98 	.word	0x08017c98
 801023c:	200005f8 	.word	0x200005f8
 8010240:	200005d8 	.word	0x200005d8
 8010244:	200004d4 	.word	0x200004d4
 8010248:	20000590 	.word	0x20000590
 801024c:	200004d0 	.word	0x200004d0
 8010250:	200005e4 	.word	0x200005e4

08010254 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010254:	b480      	push	{r7}
 8010256:	b083      	sub	sp, #12
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 801025c:	4b06      	ldr	r3, [pc, #24]	@ (8010278 <vTaskInternalSetTimeOutState+0x24>)
 801025e:	681a      	ldr	r2, [r3, #0]
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8010264:	4b05      	ldr	r3, [pc, #20]	@ (801027c <vTaskInternalSetTimeOutState+0x28>)
 8010266:	681a      	ldr	r2, [r3, #0]
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 801026c:	bf00      	nop
 801026e:	370c      	adds	r7, #12
 8010270:	46bd      	mov	sp, r7
 8010272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010276:	4770      	bx	lr
 8010278:	200005e8 	.word	0x200005e8
 801027c:	200005d4 	.word	0x200005d4

08010280 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8010280:	b580      	push	{r7, lr}
 8010282:	b088      	sub	sp, #32
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
 8010288:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d110      	bne.n	80102b2 <xTaskCheckForTimeOut+0x32>
    __asm volatile
 8010290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010294:	b672      	cpsid	i
 8010296:	f383 8811 	msr	BASEPRI, r3
 801029a:	f3bf 8f6f 	isb	sy
 801029e:	f3bf 8f4f 	dsb	sy
 80102a2:	b662      	cpsie	i
 80102a4:	613b      	str	r3, [r7, #16]
}
 80102a6:	bf00      	nop
 80102a8:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 80102ac:	482b      	ldr	r0, [pc, #172]	@ (801035c <xTaskCheckForTimeOut+0xdc>)
 80102ae:	f7f5 fd33 	bl	8005d18 <vAssertCalled>
    configASSERT( pxTicksToWait );
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d110      	bne.n	80102da <xTaskCheckForTimeOut+0x5a>
    __asm volatile
 80102b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102bc:	b672      	cpsid	i
 80102be:	f383 8811 	msr	BASEPRI, r3
 80102c2:	f3bf 8f6f 	isb	sy
 80102c6:	f3bf 8f4f 	dsb	sy
 80102ca:	b662      	cpsie	i
 80102cc:	60fb      	str	r3, [r7, #12]
}
 80102ce:	bf00      	nop
 80102d0:	f241 51a6 	movw	r1, #5542	@ 0x15a6
 80102d4:	4821      	ldr	r0, [pc, #132]	@ (801035c <xTaskCheckForTimeOut+0xdc>)
 80102d6:	f7f5 fd1f 	bl	8005d18 <vAssertCalled>

    taskENTER_CRITICAL();
 80102da:	f001 f8d1 	bl	8011480 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80102de:	4b20      	ldr	r3, [pc, #128]	@ (8010360 <xTaskCheckForTimeOut+0xe0>)
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	685b      	ldr	r3, [r3, #4]
 80102e8:	69ba      	ldr	r2, [r7, #24]
 80102ea:	1ad3      	subs	r3, r2, r3
 80102ec:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102f6:	d102      	bne.n	80102fe <xTaskCheckForTimeOut+0x7e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80102f8:	2300      	movs	r3, #0
 80102fa:	61fb      	str	r3, [r7, #28]
 80102fc:	e026      	b.n	801034c <xTaskCheckForTimeOut+0xcc>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	681a      	ldr	r2, [r3, #0]
 8010302:	4b18      	ldr	r3, [pc, #96]	@ (8010364 <xTaskCheckForTimeOut+0xe4>)
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	429a      	cmp	r2, r3
 8010308:	d00a      	beq.n	8010320 <xTaskCheckForTimeOut+0xa0>
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	685b      	ldr	r3, [r3, #4]
 801030e:	69ba      	ldr	r2, [r7, #24]
 8010310:	429a      	cmp	r2, r3
 8010312:	d305      	bcc.n	8010320 <xTaskCheckForTimeOut+0xa0>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8010314:	2301      	movs	r3, #1
 8010316:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	2200      	movs	r2, #0
 801031c:	601a      	str	r2, [r3, #0]
 801031e:	e015      	b.n	801034c <xTaskCheckForTimeOut+0xcc>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8010320:	683b      	ldr	r3, [r7, #0]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	697a      	ldr	r2, [r7, #20]
 8010326:	429a      	cmp	r2, r3
 8010328:	d20b      	bcs.n	8010342 <xTaskCheckForTimeOut+0xc2>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 801032a:	683b      	ldr	r3, [r7, #0]
 801032c:	681a      	ldr	r2, [r3, #0]
 801032e:	697b      	ldr	r3, [r7, #20]
 8010330:	1ad2      	subs	r2, r2, r3
 8010332:	683b      	ldr	r3, [r7, #0]
 8010334:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	f7ff ff8c 	bl	8010254 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 801033c:	2300      	movs	r3, #0
 801033e:	61fb      	str	r3, [r7, #28]
 8010340:	e004      	b.n	801034c <xTaskCheckForTimeOut+0xcc>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	2200      	movs	r2, #0
 8010346:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8010348:	2301      	movs	r3, #1
 801034a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 801034c:	f001 f8d0 	bl	80114f0 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8010350:	69fb      	ldr	r3, [r7, #28]
}
 8010352:	4618      	mov	r0, r3
 8010354:	3720      	adds	r7, #32
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}
 801035a:	bf00      	nop
 801035c:	08017c98 	.word	0x08017c98
 8010360:	200005d4 	.word	0x200005d4
 8010364:	200005e8 	.word	0x200005e8

08010368 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010368:	b480      	push	{r7}
 801036a:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 801036c:	4b03      	ldr	r3, [pc, #12]	@ (801037c <vTaskMissedYield+0x14>)
 801036e:	2201      	movs	r2, #1
 8010370:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8010372:	bf00      	nop
 8010374:	46bd      	mov	sp, r7
 8010376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037a:	4770      	bx	lr
 801037c:	200005e4 	.word	0x200005e4

08010380 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b082      	sub	sp, #8
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8010388:	f000 f852 	bl	8010430 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 801038c:	4b06      	ldr	r3, [pc, #24]	@ (80103a8 <prvIdleTask+0x28>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	2b01      	cmp	r3, #1
 8010392:	d9f9      	bls.n	8010388 <prvIdleTask+0x8>
            {
                taskYIELD();
 8010394:	4b05      	ldr	r3, [pc, #20]	@ (80103ac <prvIdleTask+0x2c>)
 8010396:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801039a:	601a      	str	r2, [r3, #0]
 801039c:	f3bf 8f4f 	dsb	sy
 80103a0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80103a4:	e7f0      	b.n	8010388 <prvIdleTask+0x8>
 80103a6:	bf00      	nop
 80103a8:	200004d4 	.word	0x200004d4
 80103ac:	e000ed04 	.word	0xe000ed04

080103b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b082      	sub	sp, #8
 80103b4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80103b6:	2300      	movs	r3, #0
 80103b8:	607b      	str	r3, [r7, #4]
 80103ba:	e00c      	b.n	80103d6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80103bc:	687a      	ldr	r2, [r7, #4]
 80103be:	4613      	mov	r3, r2
 80103c0:	009b      	lsls	r3, r3, #2
 80103c2:	4413      	add	r3, r2
 80103c4:	009b      	lsls	r3, r3, #2
 80103c6:	4a12      	ldr	r2, [pc, #72]	@ (8010410 <prvInitialiseTaskLists+0x60>)
 80103c8:	4413      	add	r3, r2
 80103ca:	4618      	mov	r0, r3
 80103cc:	f7fd ff82 	bl	800e2d4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	3301      	adds	r3, #1
 80103d4:	607b      	str	r3, [r7, #4]
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	2b06      	cmp	r3, #6
 80103da:	d9ef      	bls.n	80103bc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80103dc:	480d      	ldr	r0, [pc, #52]	@ (8010414 <prvInitialiseTaskLists+0x64>)
 80103de:	f7fd ff79 	bl	800e2d4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80103e2:	480d      	ldr	r0, [pc, #52]	@ (8010418 <prvInitialiseTaskLists+0x68>)
 80103e4:	f7fd ff76 	bl	800e2d4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80103e8:	480c      	ldr	r0, [pc, #48]	@ (801041c <prvInitialiseTaskLists+0x6c>)
 80103ea:	f7fd ff73 	bl	800e2d4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80103ee:	480c      	ldr	r0, [pc, #48]	@ (8010420 <prvInitialiseTaskLists+0x70>)
 80103f0:	f7fd ff70 	bl	800e2d4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80103f4:	480b      	ldr	r0, [pc, #44]	@ (8010424 <prvInitialiseTaskLists+0x74>)
 80103f6:	f7fd ff6d 	bl	800e2d4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80103fa:	4b0b      	ldr	r3, [pc, #44]	@ (8010428 <prvInitialiseTaskLists+0x78>)
 80103fc:	4a05      	ldr	r2, [pc, #20]	@ (8010414 <prvInitialiseTaskLists+0x64>)
 80103fe:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010400:	4b0a      	ldr	r3, [pc, #40]	@ (801042c <prvInitialiseTaskLists+0x7c>)
 8010402:	4a05      	ldr	r2, [pc, #20]	@ (8010418 <prvInitialiseTaskLists+0x68>)
 8010404:	601a      	str	r2, [r3, #0]
}
 8010406:	bf00      	nop
 8010408:	3708      	adds	r7, #8
 801040a:	46bd      	mov	sp, r7
 801040c:	bd80      	pop	{r7, pc}
 801040e:	bf00      	nop
 8010410:	200004d4 	.word	0x200004d4
 8010414:	20000560 	.word	0x20000560
 8010418:	20000574 	.word	0x20000574
 801041c:	20000590 	.word	0x20000590
 8010420:	200005a4 	.word	0x200005a4
 8010424:	200005bc 	.word	0x200005bc
 8010428:	20000588 	.word	0x20000588
 801042c:	2000058c 	.word	0x2000058c

08010430 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b082      	sub	sp, #8
 8010434:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010436:	e019      	b.n	801046c <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8010438:	f001 f822 	bl	8011480 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 801043c:	4b10      	ldr	r3, [pc, #64]	@ (8010480 <prvCheckTasksWaitingTermination+0x50>)
 801043e:	68db      	ldr	r3, [r3, #12]
 8010440:	68db      	ldr	r3, [r3, #12]
 8010442:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	3304      	adds	r3, #4
 8010448:	4618      	mov	r0, r3
 801044a:	f7fd ffcd 	bl	800e3e8 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 801044e:	4b0d      	ldr	r3, [pc, #52]	@ (8010484 <prvCheckTasksWaitingTermination+0x54>)
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	3b01      	subs	r3, #1
 8010454:	4a0b      	ldr	r2, [pc, #44]	@ (8010484 <prvCheckTasksWaitingTermination+0x54>)
 8010456:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8010458:	4b0b      	ldr	r3, [pc, #44]	@ (8010488 <prvCheckTasksWaitingTermination+0x58>)
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	3b01      	subs	r3, #1
 801045e:	4a0a      	ldr	r2, [pc, #40]	@ (8010488 <prvCheckTasksWaitingTermination+0x58>)
 8010460:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8010462:	f001 f845 	bl	80114f0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8010466:	6878      	ldr	r0, [r7, #4]
 8010468:	f000 f8f0 	bl	801064c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801046c:	4b06      	ldr	r3, [pc, #24]	@ (8010488 <prvCheckTasksWaitingTermination+0x58>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d1e1      	bne.n	8010438 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8010474:	bf00      	nop
 8010476:	bf00      	nop
 8010478:	3708      	adds	r7, #8
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}
 801047e:	bf00      	nop
 8010480:	200005a4 	.word	0x200005a4
 8010484:	200005d0 	.word	0x200005d0
 8010488:	200005b8 	.word	0x200005b8

0801048c <vTaskGetInfo>:

    void vTaskGetInfo( TaskHandle_t xTask,
                       TaskStatus_t * pxTaskStatus,
                       BaseType_t xGetFreeStackSpace,
                       eTaskState eState )
    {
 801048c:	b580      	push	{r7, lr}
 801048e:	b086      	sub	sp, #24
 8010490:	af00      	add	r7, sp, #0
 8010492:	60f8      	str	r0, [r7, #12]
 8010494:	60b9      	str	r1, [r7, #8]
 8010496:	607a      	str	r2, [r7, #4]
 8010498:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;

        traceENTER_vTaskGetInfo( xTask, pxTaskStatus, xGetFreeStackSpace, eState );

        /* xTask is NULL then get the state of the calling task. */
        pxTCB = prvGetTCBFromHandle( xTask );
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d102      	bne.n	80104a6 <vTaskGetInfo+0x1a>
 80104a0:	4b41      	ldr	r3, [pc, #260]	@ (80105a8 <vTaskGetInfo+0x11c>)
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	e000      	b.n	80104a8 <vTaskGetInfo+0x1c>
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	613b      	str	r3, [r7, #16]

        pxTaskStatus->xHandle = pxTCB;
 80104aa:	68bb      	ldr	r3, [r7, #8]
 80104ac:	693a      	ldr	r2, [r7, #16]
 80104ae:	601a      	str	r2, [r3, #0]
        pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	605a      	str	r2, [r3, #4]
        pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80104ba:	693b      	ldr	r3, [r7, #16]
 80104bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80104be:	68bb      	ldr	r3, [r7, #8]
 80104c0:	611a      	str	r2, [r3, #16]
        pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80104c2:	693b      	ldr	r3, [r7, #16]
 80104c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80104c6:	68bb      	ldr	r3, [r7, #8]
 80104c8:	61da      	str	r2, [r3, #28]
        #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
            pxTaskStatus->pxTopOfStack = ( StackType_t * ) pxTCB->pxTopOfStack;
 80104ca:	693b      	ldr	r3, [r7, #16]
 80104cc:	681a      	ldr	r2, [r3, #0]
 80104ce:	68bb      	ldr	r3, [r7, #8]
 80104d0:	621a      	str	r2, [r3, #32]
            pxTaskStatus->pxEndOfStack = pxTCB->pxEndOfStack;
 80104d2:	693b      	ldr	r3, [r7, #16]
 80104d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	625a      	str	r2, [r3, #36]	@ 0x24
        #endif
        pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 80104da:	693b      	ldr	r3, [r7, #16]
 80104dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80104de:	68bb      	ldr	r3, [r7, #8]
 80104e0:	609a      	str	r2, [r3, #8]
        }
        #endif

        #if ( configUSE_MUTEXES == 1 )
        {
            pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80104e2:	693b      	ldr	r3, [r7, #16]
 80104e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80104e6:	68bb      	ldr	r3, [r7, #8]
 80104e8:	615a      	str	r2, [r3, #20]
        }
        #endif

        #if ( configGENERATE_RUN_TIME_STATS == 1 )
        {
            pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 80104ea:	693b      	ldr	r3, [r7, #16]
 80104ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80104ee:	68bb      	ldr	r3, [r7, #8]
 80104f0:	619a      	str	r2, [r3, #24]
        #endif

        /* Obtaining the task state is a little fiddly, so is only done if the
         * value of eState passed into this function is eInvalid - otherwise the
         * state is just set to whatever is passed in. */
        if( eState != eInvalid )
 80104f2:	78fb      	ldrb	r3, [r7, #3]
 80104f4:	2b05      	cmp	r3, #5
 80104f6:	d03c      	beq.n	8010572 <vTaskGetInfo+0xe6>
        {
            if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
 80104f8:	4b2b      	ldr	r3, [pc, #172]	@ (80105a8 <vTaskGetInfo+0x11c>)
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	693a      	ldr	r2, [r7, #16]
 80104fe:	429a      	cmp	r2, r3
 8010500:	d103      	bne.n	801050a <vTaskGetInfo+0x7e>
            {
                pxTaskStatus->eCurrentState = eRunning;
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	2200      	movs	r2, #0
 8010506:	731a      	strb	r2, [r3, #12]
 8010508:	e03a      	b.n	8010580 <vTaskGetInfo+0xf4>
            }
            else
            {
                pxTaskStatus->eCurrentState = eState;
 801050a:	68bb      	ldr	r3, [r7, #8]
 801050c:	78fa      	ldrb	r2, [r7, #3]
 801050e:	731a      	strb	r2, [r3, #12]
                #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    /* If the task is in the suspended list then there is a
                     *  chance it is actually just blocked indefinitely - so really
                     *  it should be reported as being in the Blocked state. */
                    if( eState == eSuspended )
 8010510:	78fb      	ldrb	r3, [r7, #3]
 8010512:	2b03      	cmp	r3, #3
 8010514:	d120      	bne.n	8010558 <vTaskGetInfo+0xcc>
                    {
                        vTaskSuspendAll();
 8010516:	f7ff f9b7 	bl	800f888 <vTaskSuspendAll>
                        {
                            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801051a:	693b      	ldr	r3, [r7, #16]
 801051c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801051e:	2b00      	cmp	r3, #0
 8010520:	d003      	beq.n	801052a <vTaskGetInfo+0x9e>
                            {
                                pxTaskStatus->eCurrentState = eBlocked;
 8010522:	68bb      	ldr	r3, [r7, #8]
 8010524:	2202      	movs	r2, #2
 8010526:	731a      	strb	r2, [r3, #12]
 8010528:	e014      	b.n	8010554 <vTaskGetInfo+0xc8>
                                    /* The task does not appear on the event list item of
                                     * and of the RTOS objects, but could still be in the
                                     * blocked state if it is waiting on its notification
                                     * rather than waiting on an object.  If not, is
                                     * suspended. */
                                    for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 801052a:	2300      	movs	r3, #0
 801052c:	617b      	str	r3, [r7, #20]
 801052e:	e00e      	b.n	801054e <vTaskGetInfo+0xc2>
                                    {
                                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8010530:	693a      	ldr	r2, [r7, #16]
 8010532:	697b      	ldr	r3, [r7, #20]
 8010534:	4413      	add	r3, r2
 8010536:	33ac      	adds	r3, #172	@ 0xac
 8010538:	781b      	ldrb	r3, [r3, #0]
 801053a:	b2db      	uxtb	r3, r3
 801053c:	2b01      	cmp	r3, #1
 801053e:	d103      	bne.n	8010548 <vTaskGetInfo+0xbc>
                                        {
                                            pxTaskStatus->eCurrentState = eBlocked;
 8010540:	68bb      	ldr	r3, [r7, #8]
 8010542:	2202      	movs	r2, #2
 8010544:	731a      	strb	r2, [r3, #12]
                                            break;
 8010546:	e005      	b.n	8010554 <vTaskGetInfo+0xc8>
                                    for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8010548:	697b      	ldr	r3, [r7, #20]
 801054a:	3301      	adds	r3, #1
 801054c:	617b      	str	r3, [r7, #20]
 801054e:	697b      	ldr	r3, [r7, #20]
 8010550:	2b00      	cmp	r3, #0
 8010552:	dded      	ble.n	8010530 <vTaskGetInfo+0xa4>
                                    }
                                }
                                #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
                            }
                        }
                        ( void ) xTaskResumeAll();
 8010554:	f7ff f9a6 	bl	800f8a4 <xTaskResumeAll>
                #endif /* INCLUDE_vTaskSuspend */

                /* Tasks can be in pending ready list and other state list at the
                 * same time. These tasks are in ready state no matter what state
                 * list the task is in. */
                taskENTER_CRITICAL();
 8010558:	f000 ff92 	bl	8011480 <vPortEnterCritical>
                {
                    if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdFALSE )
 801055c:	693b      	ldr	r3, [r7, #16]
 801055e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010560:	4a12      	ldr	r2, [pc, #72]	@ (80105ac <vTaskGetInfo+0x120>)
 8010562:	4293      	cmp	r3, r2
 8010564:	d102      	bne.n	801056c <vTaskGetInfo+0xe0>
                    {
                        pxTaskStatus->eCurrentState = eReady;
 8010566:	68bb      	ldr	r3, [r7, #8]
 8010568:	2201      	movs	r2, #1
 801056a:	731a      	strb	r2, [r3, #12]
                    }
                }
                taskEXIT_CRITICAL();
 801056c:	f000 ffc0 	bl	80114f0 <vPortExitCritical>
 8010570:	e006      	b.n	8010580 <vTaskGetInfo+0xf4>
            }
        }
        else
        {
            pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8010572:	6938      	ldr	r0, [r7, #16]
 8010574:	f7ff f858 	bl	800f628 <eTaskGetState>
 8010578:	4603      	mov	r3, r0
 801057a:	461a      	mov	r2, r3
 801057c:	68bb      	ldr	r3, [r7, #8]
 801057e:	731a      	strb	r2, [r3, #12]
        }

        /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
         * parameter is provided to allow it to be skipped. */
        if( xGetFreeStackSpace != pdFALSE )
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d008      	beq.n	8010598 <vTaskGetInfo+0x10c>
            {
                pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
            }
            #else
            {
                pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8010586:	693b      	ldr	r3, [r7, #16]
 8010588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801058a:	4618      	mov	r0, r3
 801058c:	f000 f843 	bl	8010616 <prvTaskCheckFreeStackSpace>
 8010590:	4602      	mov	r2, r0
 8010592:	68bb      	ldr	r3, [r7, #8]
 8010594:	629a      	str	r2, [r3, #40]	@ 0x28
        {
            pxTaskStatus->usStackHighWaterMark = 0;
        }

        traceRETURN_vTaskGetInfo();
    }
 8010596:	e002      	b.n	801059e <vTaskGetInfo+0x112>
            pxTaskStatus->usStackHighWaterMark = 0;
 8010598:	68bb      	ldr	r3, [r7, #8]
 801059a:	2200      	movs	r2, #0
 801059c:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 801059e:	bf00      	nop
 80105a0:	3718      	adds	r7, #24
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd80      	pop	{r7, pc}
 80105a6:	bf00      	nop
 80105a8:	200004d0 	.word	0x200004d0
 80105ac:	20000590 	.word	0x20000590

080105b0 <prvListTasksWithinSingleList>:
#if ( configUSE_TRACE_FACILITY == 1 )

    static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
                                                     List_t * pxList,
                                                     eTaskState eState )
    {
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b088      	sub	sp, #32
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	60f8      	str	r0, [r7, #12]
 80105b8:	60b9      	str	r1, [r7, #8]
 80105ba:	4613      	mov	r3, r2
 80105bc:	71fb      	strb	r3, [r7, #7]
        UBaseType_t uxTask = 0;
 80105be:	2300      	movs	r3, #0
 80105c0:	61fb      	str	r3, [r7, #28]
        const ListItem_t * pxEndMarker = listGET_END_MARKER( pxList );
 80105c2:	68bb      	ldr	r3, [r7, #8]
 80105c4:	3308      	adds	r3, #8
 80105c6:	617b      	str	r3, [r7, #20]
        ListItem_t * pxIterator;
        TCB_t * pxTCB = NULL;
 80105c8:	2300      	movs	r3, #0
 80105ca:	613b      	str	r3, [r7, #16]

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80105cc:	68bb      	ldr	r3, [r7, #8]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d01b      	beq.n	801060c <prvListTasksWithinSingleList+0x5c>
        {
            /* Populate an TaskStatus_t structure within the
             * pxTaskStatusArray array for each task that is referenced from
             * pxList.  See the definition of TaskStatus_t in task.h for the
             * meaning of each TaskStatus_t structure member. */
            for( pxIterator = listGET_HEAD_ENTRY( pxList ); pxIterator != pxEndMarker; pxIterator = listGET_NEXT( pxIterator ) )
 80105d4:	68bb      	ldr	r3, [r7, #8]
 80105d6:	68db      	ldr	r3, [r3, #12]
 80105d8:	61bb      	str	r3, [r7, #24]
 80105da:	e013      	b.n	8010604 <prvListTasksWithinSingleList+0x54>
            {
                /* MISRA Ref 11.5.3 [Void pointer assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxTCB = listGET_LIST_ITEM_OWNER( pxIterator );
 80105dc:	69bb      	ldr	r3, [r7, #24]
 80105de:	68db      	ldr	r3, [r3, #12]
 80105e0:	613b      	str	r3, [r7, #16]

                vTaskGetInfo( ( TaskHandle_t ) pxTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 80105e2:	69fb      	ldr	r3, [r7, #28]
 80105e4:	222c      	movs	r2, #44	@ 0x2c
 80105e6:	fb02 f303 	mul.w	r3, r2, r3
 80105ea:	68fa      	ldr	r2, [r7, #12]
 80105ec:	18d1      	adds	r1, r2, r3
 80105ee:	79fb      	ldrb	r3, [r7, #7]
 80105f0:	2201      	movs	r2, #1
 80105f2:	6938      	ldr	r0, [r7, #16]
 80105f4:	f7ff ff4a 	bl	801048c <vTaskGetInfo>
                uxTask++;
 80105f8:	69fb      	ldr	r3, [r7, #28]
 80105fa:	3301      	adds	r3, #1
 80105fc:	61fb      	str	r3, [r7, #28]
            for( pxIterator = listGET_HEAD_ENTRY( pxList ); pxIterator != pxEndMarker; pxIterator = listGET_NEXT( pxIterator ) )
 80105fe:	69bb      	ldr	r3, [r7, #24]
 8010600:	685b      	ldr	r3, [r3, #4]
 8010602:	61bb      	str	r3, [r7, #24]
 8010604:	69ba      	ldr	r2, [r7, #24]
 8010606:	697b      	ldr	r3, [r7, #20]
 8010608:	429a      	cmp	r2, r3
 801060a:	d1e7      	bne.n	80105dc <prvListTasksWithinSingleList+0x2c>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return uxTask;
 801060c:	69fb      	ldr	r3, [r7, #28]
    }
 801060e:	4618      	mov	r0, r3
 8010610:	3720      	adds	r7, #32
 8010612:	46bd      	mov	sp, r7
 8010614:	bd80      	pop	{r7, pc}

08010616 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 8010616:	b480      	push	{r7}
 8010618:	b085      	sub	sp, #20
 801061a:	af00      	add	r7, sp, #0
 801061c:	6078      	str	r0, [r7, #4]
        configSTACK_DEPTH_TYPE uxCount = 0U;
 801061e:	2300      	movs	r3, #0
 8010620:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8010622:	e005      	b.n	8010630 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	3301      	adds	r3, #1
 8010628:	607b      	str	r3, [r7, #4]
            uxCount++;
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	3301      	adds	r3, #1
 801062e:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	781b      	ldrb	r3, [r3, #0]
 8010634:	2ba5      	cmp	r3, #165	@ 0xa5
 8010636:	d0f5      	beq.n	8010624 <prvTaskCheckFreeStackSpace+0xe>
        }

        uxCount /= ( configSTACK_DEPTH_TYPE ) sizeof( StackType_t );
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	089b      	lsrs	r3, r3, #2
 801063c:	60fb      	str	r3, [r7, #12]

        return uxCount;
 801063e:	68fb      	ldr	r3, [r7, #12]
    }
 8010640:	4618      	mov	r0, r3
 8010642:	3714      	adds	r7, #20
 8010644:	46bd      	mov	sp, r7
 8010646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064a:	4770      	bx	lr

0801064c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 801064c:	b580      	push	{r7, lr}
 801064e:	b082      	sub	sp, #8
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
        portCLEAN_UP_TCB( pxTCB );

        #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxTCB->xTLSBlock );
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	335c      	adds	r3, #92	@ 0x5c
 8010658:	4618      	mov	r0, r3
 801065a:	f003 fc2d 	bl	8013eb8 <_reclaim_reent>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010662:	4618      	mov	r0, r3
 8010664:	f7f5 fece 	bl	8006404 <vPortFree>
            vPortFree( pxTCB );
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f7f5 fecb 	bl	8006404 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 801066e:	bf00      	nop
 8010670:	3708      	adds	r7, #8
 8010672:	46bd      	mov	sp, r7
 8010674:	bd80      	pop	{r7, pc}
	...

08010678 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010678:	b480      	push	{r7}
 801067a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801067c:	4b0a      	ldr	r3, [pc, #40]	@ (80106a8 <prvResetNextTaskUnblockTime+0x30>)
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d104      	bne.n	8010690 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8010686:	4b09      	ldr	r3, [pc, #36]	@ (80106ac <prvResetNextTaskUnblockTime+0x34>)
 8010688:	f04f 32ff 	mov.w	r2, #4294967295
 801068c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 801068e:	e005      	b.n	801069c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8010690:	4b05      	ldr	r3, [pc, #20]	@ (80106a8 <prvResetNextTaskUnblockTime+0x30>)
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	68db      	ldr	r3, [r3, #12]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	4a04      	ldr	r2, [pc, #16]	@ (80106ac <prvResetNextTaskUnblockTime+0x34>)
 801069a:	6013      	str	r3, [r2, #0]
}
 801069c:	bf00      	nop
 801069e:	46bd      	mov	sp, r7
 80106a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a4:	4770      	bx	lr
 80106a6:	bf00      	nop
 80106a8:	20000588 	.word	0x20000588
 80106ac:	200005f0 	.word	0x200005f0

080106b0 <xTaskGetCurrentTaskHandle>:

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) || ( configNUMBER_OF_CORES > 1 )

    #if ( configNUMBER_OF_CORES == 1 )
        TaskHandle_t xTaskGetCurrentTaskHandle( void )
        {
 80106b0:	b480      	push	{r7}
 80106b2:	b083      	sub	sp, #12
 80106b4:	af00      	add	r7, sp, #0
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
 80106b6:	4b05      	ldr	r3, [pc, #20]	@ (80106cc <xTaskGetCurrentTaskHandle+0x1c>)
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	607b      	str	r3, [r7, #4]

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
 80106bc:	687b      	ldr	r3, [r7, #4]
        }
 80106be:	4618      	mov	r0, r3
 80106c0:	370c      	adds	r7, #12
 80106c2:	46bd      	mov	sp, r7
 80106c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c8:	4770      	bx	lr
 80106ca:	bf00      	nop
 80106cc:	200004d0 	.word	0x200004d0

080106d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80106d0:	b480      	push	{r7}
 80106d2:	b083      	sub	sp, #12
 80106d4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 80106d6:	4b0b      	ldr	r3, [pc, #44]	@ (8010704 <xTaskGetSchedulerState+0x34>)
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d102      	bne.n	80106e4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80106de:	2301      	movs	r3, #1
 80106e0:	607b      	str	r3, [r7, #4]
 80106e2:	e008      	b.n	80106f6 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80106e4:	4b08      	ldr	r3, [pc, #32]	@ (8010708 <xTaskGetSchedulerState+0x38>)
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d102      	bne.n	80106f2 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 80106ec:	2302      	movs	r3, #2
 80106ee:	607b      	str	r3, [r7, #4]
 80106f0:	e001      	b.n	80106f6 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 80106f2:	2300      	movs	r3, #0
 80106f4:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 80106f6:	687b      	ldr	r3, [r7, #4]
    }
 80106f8:	4618      	mov	r0, r3
 80106fa:	370c      	adds	r7, #12
 80106fc:	46bd      	mov	sp, r7
 80106fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010702:	4770      	bx	lr
 8010704:	200005dc 	.word	0x200005dc
 8010708:	200005f8 	.word	0x200005f8

0801070c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 801070c:	b580      	push	{r7, lr}
 801070e:	b086      	sub	sp, #24
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8010718:	2300      	movs	r3, #0
 801071a:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	2b00      	cmp	r3, #0
 8010720:	f000 8089 	beq.w	8010836 <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010724:	693b      	ldr	r3, [r7, #16]
 8010726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010728:	4b45      	ldr	r3, [pc, #276]	@ (8010840 <xTaskPriorityInherit+0x134>)
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801072e:	429a      	cmp	r2, r3
 8010730:	d278      	bcs.n	8010824 <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8010732:	693b      	ldr	r3, [r7, #16]
 8010734:	699b      	ldr	r3, [r3, #24]
 8010736:	2b00      	cmp	r3, #0
 8010738:	db06      	blt.n	8010748 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 801073a:	4b41      	ldr	r3, [pc, #260]	@ (8010840 <xTaskPriorityInherit+0x134>)
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010740:	f1c3 0207 	rsb	r2, r3, #7
 8010744:	693b      	ldr	r3, [r7, #16]
 8010746:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010748:	693b      	ldr	r3, [r7, #16]
 801074a:	6959      	ldr	r1, [r3, #20]
 801074c:	693b      	ldr	r3, [r7, #16]
 801074e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010750:	4613      	mov	r3, r2
 8010752:	009b      	lsls	r3, r3, #2
 8010754:	4413      	add	r3, r2
 8010756:	009b      	lsls	r3, r3, #2
 8010758:	4a3a      	ldr	r2, [pc, #232]	@ (8010844 <xTaskPriorityInherit+0x138>)
 801075a:	4413      	add	r3, r2
 801075c:	4299      	cmp	r1, r3
 801075e:	d159      	bne.n	8010814 <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010760:	693b      	ldr	r3, [r7, #16]
 8010762:	3304      	adds	r3, #4
 8010764:	4618      	mov	r0, r3
 8010766:	f7fd fe3f 	bl	800e3e8 <uxListRemove>
 801076a:	4603      	mov	r3, r0
 801076c:	2b00      	cmp	r3, #0
 801076e:	d10a      	bne.n	8010786 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8010770:	693b      	ldr	r3, [r7, #16]
 8010772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010774:	2201      	movs	r2, #1
 8010776:	fa02 f303 	lsl.w	r3, r2, r3
 801077a:	43da      	mvns	r2, r3
 801077c:	4b32      	ldr	r3, [pc, #200]	@ (8010848 <xTaskPriorityInherit+0x13c>)
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	4013      	ands	r3, r2
 8010782:	4a31      	ldr	r2, [pc, #196]	@ (8010848 <xTaskPriorityInherit+0x13c>)
 8010784:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010786:	4b2e      	ldr	r3, [pc, #184]	@ (8010840 <xTaskPriorityInherit+0x134>)
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801078c:	693b      	ldr	r3, [r7, #16]
 801078e:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8010790:	693b      	ldr	r3, [r7, #16]
 8010792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010794:	2201      	movs	r2, #1
 8010796:	409a      	lsls	r2, r3
 8010798:	4b2b      	ldr	r3, [pc, #172]	@ (8010848 <xTaskPriorityInherit+0x13c>)
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	4313      	orrs	r3, r2
 801079e:	4a2a      	ldr	r2, [pc, #168]	@ (8010848 <xTaskPriorityInherit+0x13c>)
 80107a0:	6013      	str	r3, [r2, #0]
 80107a2:	693b      	ldr	r3, [r7, #16]
 80107a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107a6:	4927      	ldr	r1, [pc, #156]	@ (8010844 <xTaskPriorityInherit+0x138>)
 80107a8:	4613      	mov	r3, r2
 80107aa:	009b      	lsls	r3, r3, #2
 80107ac:	4413      	add	r3, r2
 80107ae:	009b      	lsls	r3, r3, #2
 80107b0:	440b      	add	r3, r1
 80107b2:	3304      	adds	r3, #4
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	60fb      	str	r3, [r7, #12]
 80107b8:	693b      	ldr	r3, [r7, #16]
 80107ba:	68fa      	ldr	r2, [r7, #12]
 80107bc:	609a      	str	r2, [r3, #8]
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	689a      	ldr	r2, [r3, #8]
 80107c2:	693b      	ldr	r3, [r7, #16]
 80107c4:	60da      	str	r2, [r3, #12]
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	689b      	ldr	r3, [r3, #8]
 80107ca:	693a      	ldr	r2, [r7, #16]
 80107cc:	3204      	adds	r2, #4
 80107ce:	605a      	str	r2, [r3, #4]
 80107d0:	693b      	ldr	r3, [r7, #16]
 80107d2:	1d1a      	adds	r2, r3, #4
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	609a      	str	r2, [r3, #8]
 80107d8:	693b      	ldr	r3, [r7, #16]
 80107da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107dc:	4613      	mov	r3, r2
 80107de:	009b      	lsls	r3, r3, #2
 80107e0:	4413      	add	r3, r2
 80107e2:	009b      	lsls	r3, r3, #2
 80107e4:	4a17      	ldr	r2, [pc, #92]	@ (8010844 <xTaskPriorityInherit+0x138>)
 80107e6:	441a      	add	r2, r3
 80107e8:	693b      	ldr	r3, [r7, #16]
 80107ea:	615a      	str	r2, [r3, #20]
 80107ec:	693b      	ldr	r3, [r7, #16]
 80107ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107f0:	4914      	ldr	r1, [pc, #80]	@ (8010844 <xTaskPriorityInherit+0x138>)
 80107f2:	4613      	mov	r3, r2
 80107f4:	009b      	lsls	r3, r3, #2
 80107f6:	4413      	add	r3, r2
 80107f8:	009b      	lsls	r3, r3, #2
 80107fa:	440b      	add	r3, r1
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	693a      	ldr	r2, [r7, #16]
 8010800:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8010802:	1c59      	adds	r1, r3, #1
 8010804:	480f      	ldr	r0, [pc, #60]	@ (8010844 <xTaskPriorityInherit+0x138>)
 8010806:	4613      	mov	r3, r2
 8010808:	009b      	lsls	r3, r3, #2
 801080a:	4413      	add	r3, r2
 801080c:	009b      	lsls	r3, r3, #2
 801080e:	4403      	add	r3, r0
 8010810:	6019      	str	r1, [r3, #0]
 8010812:	e004      	b.n	801081e <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010814:	4b0a      	ldr	r3, [pc, #40]	@ (8010840 <xTaskPriorityInherit+0x134>)
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801081a:	693b      	ldr	r3, [r7, #16]
 801081c:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 801081e:	2301      	movs	r3, #1
 8010820:	617b      	str	r3, [r7, #20]
 8010822:	e008      	b.n	8010836 <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010824:	693b      	ldr	r3, [r7, #16]
 8010826:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010828:	4b05      	ldr	r3, [pc, #20]	@ (8010840 <xTaskPriorityInherit+0x134>)
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801082e:	429a      	cmp	r2, r3
 8010830:	d201      	bcs.n	8010836 <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8010832:	2301      	movs	r3, #1
 8010834:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 8010836:	697b      	ldr	r3, [r7, #20]
    }
 8010838:	4618      	mov	r0, r3
 801083a:	3718      	adds	r7, #24
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}
 8010840:	200004d0 	.word	0x200004d0
 8010844:	200004d4 	.word	0x200004d4
 8010848:	200005d8 	.word	0x200005d8

0801084c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 801084c:	b580      	push	{r7, lr}
 801084e:	b088      	sub	sp, #32
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8010858:	2300      	movs	r3, #0
 801085a:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	2b00      	cmp	r3, #0
 8010860:	f000 809a 	beq.w	8010998 <xTaskPriorityDisinherit+0x14c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8010864:	4b4f      	ldr	r3, [pc, #316]	@ (80109a4 <xTaskPriorityDisinherit+0x158>)
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	69ba      	ldr	r2, [r7, #24]
 801086a:	429a      	cmp	r2, r3
 801086c:	d010      	beq.n	8010890 <xTaskPriorityDisinherit+0x44>
    __asm volatile
 801086e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010872:	b672      	cpsid	i
 8010874:	f383 8811 	msr	BASEPRI, r3
 8010878:	f3bf 8f6f 	isb	sy
 801087c:	f3bf 8f4f 	dsb	sy
 8010880:	b662      	cpsie	i
 8010882:	613b      	str	r3, [r7, #16]
}
 8010884:	bf00      	nop
 8010886:	f641 2128 	movw	r1, #6696	@ 0x1a28
 801088a:	4847      	ldr	r0, [pc, #284]	@ (80109a8 <xTaskPriorityDisinherit+0x15c>)
 801088c:	f7f5 fa44 	bl	8005d18 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 8010890:	69bb      	ldr	r3, [r7, #24]
 8010892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010894:	2b00      	cmp	r3, #0
 8010896:	d110      	bne.n	80108ba <xTaskPriorityDisinherit+0x6e>
    __asm volatile
 8010898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801089c:	b672      	cpsid	i
 801089e:	f383 8811 	msr	BASEPRI, r3
 80108a2:	f3bf 8f6f 	isb	sy
 80108a6:	f3bf 8f4f 	dsb	sy
 80108aa:	b662      	cpsie	i
 80108ac:	60fb      	str	r3, [r7, #12]
}
 80108ae:	bf00      	nop
 80108b0:	f641 2129 	movw	r1, #6697	@ 0x1a29
 80108b4:	483c      	ldr	r0, [pc, #240]	@ (80109a8 <xTaskPriorityDisinherit+0x15c>)
 80108b6:	f7f5 fa2f 	bl	8005d18 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 80108ba:	69bb      	ldr	r3, [r7, #24]
 80108bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80108be:	1e5a      	subs	r2, r3, #1
 80108c0:	69bb      	ldr	r3, [r7, #24]
 80108c2:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80108c4:	69bb      	ldr	r3, [r7, #24]
 80108c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108c8:	69bb      	ldr	r3, [r7, #24]
 80108ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80108cc:	429a      	cmp	r2, r3
 80108ce:	d063      	beq.n	8010998 <xTaskPriorityDisinherit+0x14c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80108d0:	69bb      	ldr	r3, [r7, #24]
 80108d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d15f      	bne.n	8010998 <xTaskPriorityDisinherit+0x14c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80108d8:	69bb      	ldr	r3, [r7, #24]
 80108da:	3304      	adds	r3, #4
 80108dc:	4618      	mov	r0, r3
 80108de:	f7fd fd83 	bl	800e3e8 <uxListRemove>
 80108e2:	4603      	mov	r3, r0
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d10a      	bne.n	80108fe <xTaskPriorityDisinherit+0xb2>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80108e8:	69bb      	ldr	r3, [r7, #24]
 80108ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108ec:	2201      	movs	r2, #1
 80108ee:	fa02 f303 	lsl.w	r3, r2, r3
 80108f2:	43da      	mvns	r2, r3
 80108f4:	4b2d      	ldr	r3, [pc, #180]	@ (80109ac <xTaskPriorityDisinherit+0x160>)
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	4013      	ands	r3, r2
 80108fa:	4a2c      	ldr	r2, [pc, #176]	@ (80109ac <xTaskPriorityDisinherit+0x160>)
 80108fc:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80108fe:	69bb      	ldr	r3, [r7, #24]
 8010900:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010902:	69bb      	ldr	r3, [r7, #24]
 8010904:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8010906:	69bb      	ldr	r3, [r7, #24]
 8010908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801090a:	f1c3 0207 	rsb	r2, r3, #7
 801090e:	69bb      	ldr	r3, [r7, #24]
 8010910:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8010912:	69bb      	ldr	r3, [r7, #24]
 8010914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010916:	2201      	movs	r2, #1
 8010918:	409a      	lsls	r2, r3
 801091a:	4b24      	ldr	r3, [pc, #144]	@ (80109ac <xTaskPriorityDisinherit+0x160>)
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	4313      	orrs	r3, r2
 8010920:	4a22      	ldr	r2, [pc, #136]	@ (80109ac <xTaskPriorityDisinherit+0x160>)
 8010922:	6013      	str	r3, [r2, #0]
 8010924:	69bb      	ldr	r3, [r7, #24]
 8010926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010928:	4921      	ldr	r1, [pc, #132]	@ (80109b0 <xTaskPriorityDisinherit+0x164>)
 801092a:	4613      	mov	r3, r2
 801092c:	009b      	lsls	r3, r3, #2
 801092e:	4413      	add	r3, r2
 8010930:	009b      	lsls	r3, r3, #2
 8010932:	440b      	add	r3, r1
 8010934:	3304      	adds	r3, #4
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	617b      	str	r3, [r7, #20]
 801093a:	69bb      	ldr	r3, [r7, #24]
 801093c:	697a      	ldr	r2, [r7, #20]
 801093e:	609a      	str	r2, [r3, #8]
 8010940:	697b      	ldr	r3, [r7, #20]
 8010942:	689a      	ldr	r2, [r3, #8]
 8010944:	69bb      	ldr	r3, [r7, #24]
 8010946:	60da      	str	r2, [r3, #12]
 8010948:	697b      	ldr	r3, [r7, #20]
 801094a:	689b      	ldr	r3, [r3, #8]
 801094c:	69ba      	ldr	r2, [r7, #24]
 801094e:	3204      	adds	r2, #4
 8010950:	605a      	str	r2, [r3, #4]
 8010952:	69bb      	ldr	r3, [r7, #24]
 8010954:	1d1a      	adds	r2, r3, #4
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	609a      	str	r2, [r3, #8]
 801095a:	69bb      	ldr	r3, [r7, #24]
 801095c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801095e:	4613      	mov	r3, r2
 8010960:	009b      	lsls	r3, r3, #2
 8010962:	4413      	add	r3, r2
 8010964:	009b      	lsls	r3, r3, #2
 8010966:	4a12      	ldr	r2, [pc, #72]	@ (80109b0 <xTaskPriorityDisinherit+0x164>)
 8010968:	441a      	add	r2, r3
 801096a:	69bb      	ldr	r3, [r7, #24]
 801096c:	615a      	str	r2, [r3, #20]
 801096e:	69bb      	ldr	r3, [r7, #24]
 8010970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010972:	490f      	ldr	r1, [pc, #60]	@ (80109b0 <xTaskPriorityDisinherit+0x164>)
 8010974:	4613      	mov	r3, r2
 8010976:	009b      	lsls	r3, r3, #2
 8010978:	4413      	add	r3, r2
 801097a:	009b      	lsls	r3, r3, #2
 801097c:	440b      	add	r3, r1
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	69ba      	ldr	r2, [r7, #24]
 8010982:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8010984:	1c59      	adds	r1, r3, #1
 8010986:	480a      	ldr	r0, [pc, #40]	@ (80109b0 <xTaskPriorityDisinherit+0x164>)
 8010988:	4613      	mov	r3, r2
 801098a:	009b      	lsls	r3, r3, #2
 801098c:	4413      	add	r3, r2
 801098e:	009b      	lsls	r3, r3, #2
 8010990:	4403      	add	r3, r0
 8010992:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8010994:	2301      	movs	r3, #1
 8010996:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8010998:	69fb      	ldr	r3, [r7, #28]
    }
 801099a:	4618      	mov	r0, r3
 801099c:	3720      	adds	r7, #32
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd80      	pop	{r7, pc}
 80109a2:	bf00      	nop
 80109a4:	200004d0 	.word	0x200004d0
 80109a8:	08017c98 	.word	0x08017c98
 80109ac:	200005d8 	.word	0x200005d8
 80109b0:	200004d4 	.word	0x200004d4

080109b4 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b08a      	sub	sp, #40	@ 0x28
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
 80109bc:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80109c2:	2301      	movs	r3, #1
 80109c4:	61fb      	str	r3, [r7, #28]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	f000 80b0 	beq.w	8010b2e <vTaskPriorityDisinheritAfterTimeout+0x17a>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80109ce:	6a3b      	ldr	r3, [r7, #32]
 80109d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d110      	bne.n	80109f8 <vTaskPriorityDisinheritAfterTimeout+0x44>
    __asm volatile
 80109d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109da:	b672      	cpsid	i
 80109dc:	f383 8811 	msr	BASEPRI, r3
 80109e0:	f3bf 8f6f 	isb	sy
 80109e4:	f3bf 8f4f 	dsb	sy
 80109e8:	b662      	cpsie	i
 80109ea:	613b      	str	r3, [r7, #16]
}
 80109ec:	bf00      	nop
 80109ee:	f641 2186 	movw	r1, #6790	@ 0x1a86
 80109f2:	4851      	ldr	r0, [pc, #324]	@ (8010b38 <vTaskPriorityDisinheritAfterTimeout+0x184>)
 80109f4:	f7f5 f990 	bl	8005d18 <vAssertCalled>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80109f8:	6a3b      	ldr	r3, [r7, #32]
 80109fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80109fc:	683a      	ldr	r2, [r7, #0]
 80109fe:	429a      	cmp	r2, r3
 8010a00:	d902      	bls.n	8010a08 <vTaskPriorityDisinheritAfterTimeout+0x54>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010a02:	683b      	ldr	r3, [r7, #0]
 8010a04:	627b      	str	r3, [r7, #36]	@ 0x24
 8010a06:	e002      	b.n	8010a0e <vTaskPriorityDisinheritAfterTimeout+0x5a>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8010a08:	6a3b      	ldr	r3, [r7, #32]
 8010a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010a0c:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8010a0e:	6a3b      	ldr	r3, [r7, #32]
 8010a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010a14:	429a      	cmp	r2, r3
 8010a16:	f000 808a 	beq.w	8010b2e <vTaskPriorityDisinheritAfterTimeout+0x17a>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010a1a:	6a3b      	ldr	r3, [r7, #32]
 8010a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010a1e:	69fa      	ldr	r2, [r7, #28]
 8010a20:	429a      	cmp	r2, r3
 8010a22:	f040 8084 	bne.w	8010b2e <vTaskPriorityDisinheritAfterTimeout+0x17a>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8010a26:	4b45      	ldr	r3, [pc, #276]	@ (8010b3c <vTaskPriorityDisinheritAfterTimeout+0x188>)
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	6a3a      	ldr	r2, [r7, #32]
 8010a2c:	429a      	cmp	r2, r3
 8010a2e:	d110      	bne.n	8010a52 <vTaskPriorityDisinheritAfterTimeout+0x9e>
    __asm volatile
 8010a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a34:	b672      	cpsid	i
 8010a36:	f383 8811 	msr	BASEPRI, r3
 8010a3a:	f3bf 8f6f 	isb	sy
 8010a3e:	f3bf 8f4f 	dsb	sy
 8010a42:	b662      	cpsie	i
 8010a44:	60fb      	str	r3, [r7, #12]
}
 8010a46:	bf00      	nop
 8010a48:	f641 21a1 	movw	r1, #6817	@ 0x1aa1
 8010a4c:	483a      	ldr	r0, [pc, #232]	@ (8010b38 <vTaskPriorityDisinheritAfterTimeout+0x184>)
 8010a4e:	f7f5 f963 	bl	8005d18 <vAssertCalled>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010a52:	6a3b      	ldr	r3, [r7, #32]
 8010a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a56:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8010a58:	6a3b      	ldr	r3, [r7, #32]
 8010a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010a5c:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8010a5e:	6a3b      	ldr	r3, [r7, #32]
 8010a60:	699b      	ldr	r3, [r3, #24]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	db04      	blt.n	8010a70 <vTaskPriorityDisinheritAfterTimeout+0xbc>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 8010a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a68:	f1c3 0207 	rsb	r2, r3, #7
 8010a6c:	6a3b      	ldr	r3, [r7, #32]
 8010a6e:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010a70:	6a3b      	ldr	r3, [r7, #32]
 8010a72:	6959      	ldr	r1, [r3, #20]
 8010a74:	69ba      	ldr	r2, [r7, #24]
 8010a76:	4613      	mov	r3, r2
 8010a78:	009b      	lsls	r3, r3, #2
 8010a7a:	4413      	add	r3, r2
 8010a7c:	009b      	lsls	r3, r3, #2
 8010a7e:	4a30      	ldr	r2, [pc, #192]	@ (8010b40 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 8010a80:	4413      	add	r3, r2
 8010a82:	4299      	cmp	r1, r3
 8010a84:	d153      	bne.n	8010b2e <vTaskPriorityDisinheritAfterTimeout+0x17a>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010a86:	6a3b      	ldr	r3, [r7, #32]
 8010a88:	3304      	adds	r3, #4
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f7fd fcac 	bl	800e3e8 <uxListRemove>
 8010a90:	4603      	mov	r3, r0
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d10a      	bne.n	8010aac <vTaskPriorityDisinheritAfterTimeout+0xf8>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8010a96:	6a3b      	ldr	r3, [r7, #32]
 8010a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a9a:	2201      	movs	r2, #1
 8010a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8010aa0:	43da      	mvns	r2, r3
 8010aa2:	4b28      	ldr	r3, [pc, #160]	@ (8010b44 <vTaskPriorityDisinheritAfterTimeout+0x190>)
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	4013      	ands	r3, r2
 8010aa8:	4a26      	ldr	r2, [pc, #152]	@ (8010b44 <vTaskPriorityDisinheritAfterTimeout+0x190>)
 8010aaa:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8010aac:	6a3b      	ldr	r3, [r7, #32]
 8010aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ab0:	2201      	movs	r2, #1
 8010ab2:	409a      	lsls	r2, r3
 8010ab4:	4b23      	ldr	r3, [pc, #140]	@ (8010b44 <vTaskPriorityDisinheritAfterTimeout+0x190>)
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	4313      	orrs	r3, r2
 8010aba:	4a22      	ldr	r2, [pc, #136]	@ (8010b44 <vTaskPriorityDisinheritAfterTimeout+0x190>)
 8010abc:	6013      	str	r3, [r2, #0]
 8010abe:	6a3b      	ldr	r3, [r7, #32]
 8010ac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ac2:	491f      	ldr	r1, [pc, #124]	@ (8010b40 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 8010ac4:	4613      	mov	r3, r2
 8010ac6:	009b      	lsls	r3, r3, #2
 8010ac8:	4413      	add	r3, r2
 8010aca:	009b      	lsls	r3, r3, #2
 8010acc:	440b      	add	r3, r1
 8010ace:	3304      	adds	r3, #4
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	617b      	str	r3, [r7, #20]
 8010ad4:	6a3b      	ldr	r3, [r7, #32]
 8010ad6:	697a      	ldr	r2, [r7, #20]
 8010ad8:	609a      	str	r2, [r3, #8]
 8010ada:	697b      	ldr	r3, [r7, #20]
 8010adc:	689a      	ldr	r2, [r3, #8]
 8010ade:	6a3b      	ldr	r3, [r7, #32]
 8010ae0:	60da      	str	r2, [r3, #12]
 8010ae2:	697b      	ldr	r3, [r7, #20]
 8010ae4:	689b      	ldr	r3, [r3, #8]
 8010ae6:	6a3a      	ldr	r2, [r7, #32]
 8010ae8:	3204      	adds	r2, #4
 8010aea:	605a      	str	r2, [r3, #4]
 8010aec:	6a3b      	ldr	r3, [r7, #32]
 8010aee:	1d1a      	adds	r2, r3, #4
 8010af0:	697b      	ldr	r3, [r7, #20]
 8010af2:	609a      	str	r2, [r3, #8]
 8010af4:	6a3b      	ldr	r3, [r7, #32]
 8010af6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010af8:	4613      	mov	r3, r2
 8010afa:	009b      	lsls	r3, r3, #2
 8010afc:	4413      	add	r3, r2
 8010afe:	009b      	lsls	r3, r3, #2
 8010b00:	4a0f      	ldr	r2, [pc, #60]	@ (8010b40 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 8010b02:	441a      	add	r2, r3
 8010b04:	6a3b      	ldr	r3, [r7, #32]
 8010b06:	615a      	str	r2, [r3, #20]
 8010b08:	6a3b      	ldr	r3, [r7, #32]
 8010b0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b0c:	490c      	ldr	r1, [pc, #48]	@ (8010b40 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 8010b0e:	4613      	mov	r3, r2
 8010b10:	009b      	lsls	r3, r3, #2
 8010b12:	4413      	add	r3, r2
 8010b14:	009b      	lsls	r3, r3, #2
 8010b16:	440b      	add	r3, r1
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	6a3a      	ldr	r2, [r7, #32]
 8010b1c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8010b1e:	1c59      	adds	r1, r3, #1
 8010b20:	4807      	ldr	r0, [pc, #28]	@ (8010b40 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 8010b22:	4613      	mov	r3, r2
 8010b24:	009b      	lsls	r3, r3, #2
 8010b26:	4413      	add	r3, r2
 8010b28:	009b      	lsls	r3, r3, #2
 8010b2a:	4403      	add	r3, r0
 8010b2c:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 8010b2e:	bf00      	nop
 8010b30:	3728      	adds	r7, #40	@ 0x28
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bd80      	pop	{r7, pc}
 8010b36:	bf00      	nop
 8010b38:	08017c98 	.word	0x08017c98
 8010b3c:	200004d0 	.word	0x200004d0
 8010b40:	200004d4 	.word	0x200004d4
 8010b44:	200005d8 	.word	0x200005d8

08010b48 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8010b48:	b480      	push	{r7}
 8010b4a:	b083      	sub	sp, #12
 8010b4c:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 8010b4e:	4b09      	ldr	r3, [pc, #36]	@ (8010b74 <pvTaskIncrementMutexHeldCount+0x2c>)
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d004      	beq.n	8010b64 <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b5e:	1c5a      	adds	r2, r3, #1
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 8010b64:	687b      	ldr	r3, [r7, #4]
    }
 8010b66:	4618      	mov	r0, r3
 8010b68:	370c      	adds	r7, #12
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b70:	4770      	bx	lr
 8010b72:	bf00      	nop
 8010b74:	200004d0 	.word	0x200004d0

08010b78 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b088      	sub	sp, #32
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
 8010b80:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8010b82:	4b37      	ldr	r3, [pc, #220]	@ (8010c60 <prvAddCurrentTaskToDelayedList+0xe8>)
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8010b88:	4b36      	ldr	r3, [pc, #216]	@ (8010c64 <prvAddCurrentTaskToDelayedList+0xec>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8010b8e:	4b36      	ldr	r3, [pc, #216]	@ (8010c68 <prvAddCurrentTaskToDelayedList+0xf0>)
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010b94:	4b35      	ldr	r3, [pc, #212]	@ (8010c6c <prvAddCurrentTaskToDelayedList+0xf4>)
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	3304      	adds	r3, #4
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f7fd fc24 	bl	800e3e8 <uxListRemove>
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d10b      	bne.n	8010bbe <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8010ba6:	4b31      	ldr	r3, [pc, #196]	@ (8010c6c <prvAddCurrentTaskToDelayedList+0xf4>)
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bac:	2201      	movs	r2, #1
 8010bae:	fa02 f303 	lsl.w	r3, r2, r3
 8010bb2:	43da      	mvns	r2, r3
 8010bb4:	4b2e      	ldr	r3, [pc, #184]	@ (8010c70 <prvAddCurrentTaskToDelayedList+0xf8>)
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	4013      	ands	r3, r2
 8010bba:	4a2d      	ldr	r2, [pc, #180]	@ (8010c70 <prvAddCurrentTaskToDelayedList+0xf8>)
 8010bbc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bc4:	d124      	bne.n	8010c10 <prvAddCurrentTaskToDelayedList+0x98>
 8010bc6:	683b      	ldr	r3, [r7, #0]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d021      	beq.n	8010c10 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010bcc:	4b29      	ldr	r3, [pc, #164]	@ (8010c74 <prvAddCurrentTaskToDelayedList+0xfc>)
 8010bce:	685b      	ldr	r3, [r3, #4]
 8010bd0:	613b      	str	r3, [r7, #16]
 8010bd2:	4b26      	ldr	r3, [pc, #152]	@ (8010c6c <prvAddCurrentTaskToDelayedList+0xf4>)
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	693a      	ldr	r2, [r7, #16]
 8010bd8:	609a      	str	r2, [r3, #8]
 8010bda:	4b24      	ldr	r3, [pc, #144]	@ (8010c6c <prvAddCurrentTaskToDelayedList+0xf4>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	693a      	ldr	r2, [r7, #16]
 8010be0:	6892      	ldr	r2, [r2, #8]
 8010be2:	60da      	str	r2, [r3, #12]
 8010be4:	4b21      	ldr	r3, [pc, #132]	@ (8010c6c <prvAddCurrentTaskToDelayedList+0xf4>)
 8010be6:	681a      	ldr	r2, [r3, #0]
 8010be8:	693b      	ldr	r3, [r7, #16]
 8010bea:	689b      	ldr	r3, [r3, #8]
 8010bec:	3204      	adds	r2, #4
 8010bee:	605a      	str	r2, [r3, #4]
 8010bf0:	4b1e      	ldr	r3, [pc, #120]	@ (8010c6c <prvAddCurrentTaskToDelayedList+0xf4>)
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	1d1a      	adds	r2, r3, #4
 8010bf6:	693b      	ldr	r3, [r7, #16]
 8010bf8:	609a      	str	r2, [r3, #8]
 8010bfa:	4b1c      	ldr	r3, [pc, #112]	@ (8010c6c <prvAddCurrentTaskToDelayedList+0xf4>)
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	4a1d      	ldr	r2, [pc, #116]	@ (8010c74 <prvAddCurrentTaskToDelayedList+0xfc>)
 8010c00:	615a      	str	r2, [r3, #20]
 8010c02:	4b1c      	ldr	r3, [pc, #112]	@ (8010c74 <prvAddCurrentTaskToDelayedList+0xfc>)
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	3301      	adds	r3, #1
 8010c08:	4a1a      	ldr	r2, [pc, #104]	@ (8010c74 <prvAddCurrentTaskToDelayedList+0xfc>)
 8010c0a:	6013      	str	r3, [r2, #0]
 8010c0c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8010c0e:	e022      	b.n	8010c56 <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8010c10:	69fa      	ldr	r2, [r7, #28]
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	4413      	add	r3, r2
 8010c16:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010c18:	4b14      	ldr	r3, [pc, #80]	@ (8010c6c <prvAddCurrentTaskToDelayedList+0xf4>)
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	68fa      	ldr	r2, [r7, #12]
 8010c1e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8010c20:	68fa      	ldr	r2, [r7, #12]
 8010c22:	69fb      	ldr	r3, [r7, #28]
 8010c24:	429a      	cmp	r2, r3
 8010c26:	d207      	bcs.n	8010c38 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8010c28:	4b10      	ldr	r3, [pc, #64]	@ (8010c6c <prvAddCurrentTaskToDelayedList+0xf4>)
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	3304      	adds	r3, #4
 8010c2e:	4619      	mov	r1, r3
 8010c30:	6978      	ldr	r0, [r7, #20]
 8010c32:	f7fd fba0 	bl	800e376 <vListInsert>
}
 8010c36:	e00e      	b.n	8010c56 <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8010c38:	4b0c      	ldr	r3, [pc, #48]	@ (8010c6c <prvAddCurrentTaskToDelayedList+0xf4>)
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	3304      	adds	r3, #4
 8010c3e:	4619      	mov	r1, r3
 8010c40:	69b8      	ldr	r0, [r7, #24]
 8010c42:	f7fd fb98 	bl	800e376 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8010c46:	4b0c      	ldr	r3, [pc, #48]	@ (8010c78 <prvAddCurrentTaskToDelayedList+0x100>)
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	68fa      	ldr	r2, [r7, #12]
 8010c4c:	429a      	cmp	r2, r3
 8010c4e:	d202      	bcs.n	8010c56 <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8010c50:	4a09      	ldr	r2, [pc, #36]	@ (8010c78 <prvAddCurrentTaskToDelayedList+0x100>)
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	6013      	str	r3, [r2, #0]
}
 8010c56:	bf00      	nop
 8010c58:	3720      	adds	r7, #32
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	bd80      	pop	{r7, pc}
 8010c5e:	bf00      	nop
 8010c60:	200005d4 	.word	0x200005d4
 8010c64:	20000588 	.word	0x20000588
 8010c68:	2000058c 	.word	0x2000058c
 8010c6c:	200004d0 	.word	0x200004d0
 8010c70:	200005d8 	.word	0x200005d8
 8010c74:	200005bc 	.word	0x200005bc
 8010c78:	200005f0 	.word	0x200005f0

08010c7c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b084      	sub	sp, #16
 8010c80:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8010c82:	2300      	movs	r3, #0
 8010c84:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8010c86:	f000 fa61 	bl	801114c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8010c8a:	4b14      	ldr	r3, [pc, #80]	@ (8010cdc <xTimerCreateTimerTask+0x60>)
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d00b      	beq.n	8010caa <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8010c92:	4b13      	ldr	r3, [pc, #76]	@ (8010ce0 <xTimerCreateTimerTask+0x64>)
 8010c94:	9301      	str	r3, [sp, #4]
 8010c96:	2306      	movs	r3, #6
 8010c98:	9300      	str	r3, [sp, #0]
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8010ca0:	4910      	ldr	r1, [pc, #64]	@ (8010ce4 <xTimerCreateTimerTask+0x68>)
 8010ca2:	4811      	ldr	r0, [pc, #68]	@ (8010ce8 <xTimerCreateTimerTask+0x6c>)
 8010ca4:	f7fe fa68 	bl	800f178 <xTaskCreate>
 8010ca8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d110      	bne.n	8010cd2 <xTimerCreateTimerTask+0x56>
    __asm volatile
 8010cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cb4:	b672      	cpsid	i
 8010cb6:	f383 8811 	msr	BASEPRI, r3
 8010cba:	f3bf 8f6f 	isb	sy
 8010cbe:	f3bf 8f4f 	dsb	sy
 8010cc2:	b662      	cpsie	i
 8010cc4:	603b      	str	r3, [r7, #0]
}
 8010cc6:	bf00      	nop
 8010cc8:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 8010ccc:	4807      	ldr	r0, [pc, #28]	@ (8010cec <xTimerCreateTimerTask+0x70>)
 8010cce:	f7f5 f823 	bl	8005d18 <vAssertCalled>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 8010cd2:	687b      	ldr	r3, [r7, #4]
    }
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	3708      	adds	r7, #8
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}
 8010cdc:	20000634 	.word	0x20000634
 8010ce0:	20000638 	.word	0x20000638
 8010ce4:	08017d44 	.word	0x08017d44
 8010ce8:	08010d95 	.word	0x08010d95
 8010cec:	08017d4c 	.word	0x08017d4c

08010cf0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b084      	sub	sp, #16
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	60f8      	str	r0, [r7, #12]
 8010cf8:	60b9      	str	r1, [r7, #8]
 8010cfa:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8010cfc:	e008      	b.n	8010d10 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	699b      	ldr	r3, [r3, #24]
 8010d02:	68ba      	ldr	r2, [r7, #8]
 8010d04:	4413      	add	r3, r2
 8010d06:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	6a1b      	ldr	r3, [r3, #32]
 8010d0c:	68f8      	ldr	r0, [r7, #12]
 8010d0e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	699a      	ldr	r2, [r3, #24]
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	18d1      	adds	r1, r2, r3
 8010d18:	68bb      	ldr	r3, [r7, #8]
 8010d1a:	687a      	ldr	r2, [r7, #4]
 8010d1c:	68f8      	ldr	r0, [r7, #12]
 8010d1e:	f000 f8df 	bl	8010ee0 <prvInsertTimerInActiveList>
 8010d22:	4603      	mov	r3, r0
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d1ea      	bne.n	8010cfe <prvReloadTimer+0xe>
        }
    }
 8010d28:	bf00      	nop
 8010d2a:	bf00      	nop
 8010d2c:	3710      	adds	r7, #16
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	bd80      	pop	{r7, pc}
	...

08010d34 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b084      	sub	sp, #16
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
 8010d3c:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010d3e:	4b14      	ldr	r3, [pc, #80]	@ (8010d90 <prvProcessExpiredTimer+0x5c>)
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	68db      	ldr	r3, [r3, #12]
 8010d44:	68db      	ldr	r3, [r3, #12]
 8010d46:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	3304      	adds	r3, #4
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	f7fd fb4b 	bl	800e3e8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010d58:	f003 0304 	and.w	r3, r3, #4
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d005      	beq.n	8010d6c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8010d60:	683a      	ldr	r2, [r7, #0]
 8010d62:	6879      	ldr	r1, [r7, #4]
 8010d64:	68f8      	ldr	r0, [r7, #12]
 8010d66:	f7ff ffc3 	bl	8010cf0 <prvReloadTimer>
 8010d6a:	e008      	b.n	8010d7e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010d72:	f023 0301 	bic.w	r3, r3, #1
 8010d76:	b2da      	uxtb	r2, r3
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	6a1b      	ldr	r3, [r3, #32]
 8010d82:	68f8      	ldr	r0, [r7, #12]
 8010d84:	4798      	blx	r3
    }
 8010d86:	bf00      	nop
 8010d88:	3710      	adds	r7, #16
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd80      	pop	{r7, pc}
 8010d8e:	bf00      	nop
 8010d90:	2000062c 	.word	0x2000062c

08010d94 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b084      	sub	sp, #16
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010d9c:	f107 0308 	add.w	r3, r7, #8
 8010da0:	4618      	mov	r0, r3
 8010da2:	f000 f859 	bl	8010e58 <prvGetNextExpireTime>
 8010da6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	4619      	mov	r1, r3
 8010dac:	68f8      	ldr	r0, [r7, #12]
 8010dae:	f000 f805 	bl	8010dbc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8010db2:	f000 f8d7 	bl	8010f64 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010db6:	bf00      	nop
 8010db8:	e7f0      	b.n	8010d9c <prvTimerTask+0x8>
	...

08010dbc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b084      	sub	sp, #16
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
 8010dc4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8010dc6:	f7fe fd5f 	bl	800f888 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010dca:	f107 0308 	add.w	r3, r7, #8
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f000 f866 	bl	8010ea0 <prvSampleTimeNow>
 8010dd4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8010dd6:	68bb      	ldr	r3, [r7, #8]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d130      	bne.n	8010e3e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010ddc:	683b      	ldr	r3, [r7, #0]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d10a      	bne.n	8010df8 <prvProcessTimerOrBlockTask+0x3c>
 8010de2:	687a      	ldr	r2, [r7, #4]
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	429a      	cmp	r2, r3
 8010de8:	d806      	bhi.n	8010df8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8010dea:	f7fe fd5b 	bl	800f8a4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010dee:	68f9      	ldr	r1, [r7, #12]
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	f7ff ff9f 	bl	8010d34 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8010df6:	e024      	b.n	8010e42 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d008      	beq.n	8010e10 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010dfe:	4b13      	ldr	r3, [pc, #76]	@ (8010e4c <prvProcessTimerOrBlockTask+0x90>)
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d101      	bne.n	8010e0c <prvProcessTimerOrBlockTask+0x50>
 8010e08:	2301      	movs	r3, #1
 8010e0a:	e000      	b.n	8010e0e <prvProcessTimerOrBlockTask+0x52>
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010e10:	4b0f      	ldr	r3, [pc, #60]	@ (8010e50 <prvProcessTimerOrBlockTask+0x94>)
 8010e12:	6818      	ldr	r0, [r3, #0]
 8010e14:	687a      	ldr	r2, [r7, #4]
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	1ad3      	subs	r3, r2, r3
 8010e1a:	683a      	ldr	r2, [r7, #0]
 8010e1c:	4619      	mov	r1, r3
 8010e1e:	f7fe f93b 	bl	800f098 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8010e22:	f7fe fd3f 	bl	800f8a4 <xTaskResumeAll>
 8010e26:	4603      	mov	r3, r0
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d10a      	bne.n	8010e42 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8010e2c:	4b09      	ldr	r3, [pc, #36]	@ (8010e54 <prvProcessTimerOrBlockTask+0x98>)
 8010e2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010e32:	601a      	str	r2, [r3, #0]
 8010e34:	f3bf 8f4f 	dsb	sy
 8010e38:	f3bf 8f6f 	isb	sy
    }
 8010e3c:	e001      	b.n	8010e42 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8010e3e:	f7fe fd31 	bl	800f8a4 <xTaskResumeAll>
    }
 8010e42:	bf00      	nop
 8010e44:	3710      	adds	r7, #16
 8010e46:	46bd      	mov	sp, r7
 8010e48:	bd80      	pop	{r7, pc}
 8010e4a:	bf00      	nop
 8010e4c:	20000630 	.word	0x20000630
 8010e50:	20000634 	.word	0x20000634
 8010e54:	e000ed04 	.word	0xe000ed04

08010e58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8010e58:	b480      	push	{r7}
 8010e5a:	b085      	sub	sp, #20
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010e60:	4b0e      	ldr	r3, [pc, #56]	@ (8010e9c <prvGetNextExpireTime+0x44>)
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d101      	bne.n	8010e6e <prvGetNextExpireTime+0x16>
 8010e6a:	2201      	movs	r2, #1
 8010e6c:	e000      	b.n	8010e70 <prvGetNextExpireTime+0x18>
 8010e6e:	2200      	movs	r2, #0
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d105      	bne.n	8010e88 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010e7c:	4b07      	ldr	r3, [pc, #28]	@ (8010e9c <prvGetNextExpireTime+0x44>)
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	68db      	ldr	r3, [r3, #12]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	60fb      	str	r3, [r7, #12]
 8010e86:	e001      	b.n	8010e8c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8010e88:	2300      	movs	r3, #0
 8010e8a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8010e8c:	68fb      	ldr	r3, [r7, #12]
    }
 8010e8e:	4618      	mov	r0, r3
 8010e90:	3714      	adds	r7, #20
 8010e92:	46bd      	mov	sp, r7
 8010e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e98:	4770      	bx	lr
 8010e9a:	bf00      	nop
 8010e9c:	2000062c 	.word	0x2000062c

08010ea0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b084      	sub	sp, #16
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8010ea8:	f7fe fe0c 	bl	800fac4 <xTaskGetTickCount>
 8010eac:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8010eae:	4b0b      	ldr	r3, [pc, #44]	@ (8010edc <prvSampleTimeNow+0x3c>)
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	68fa      	ldr	r2, [r7, #12]
 8010eb4:	429a      	cmp	r2, r3
 8010eb6:	d205      	bcs.n	8010ec4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8010eb8:	f000 f922 	bl	8011100 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	2201      	movs	r2, #1
 8010ec0:	601a      	str	r2, [r3, #0]
 8010ec2:	e002      	b.n	8010eca <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8010eca:	4a04      	ldr	r2, [pc, #16]	@ (8010edc <prvSampleTimeNow+0x3c>)
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8010ed0:	68fb      	ldr	r3, [r7, #12]
    }
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	3710      	adds	r7, #16
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	bd80      	pop	{r7, pc}
 8010eda:	bf00      	nop
 8010edc:	2000063c 	.word	0x2000063c

08010ee0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b086      	sub	sp, #24
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	60f8      	str	r0, [r7, #12]
 8010ee8:	60b9      	str	r1, [r7, #8]
 8010eea:	607a      	str	r2, [r7, #4]
 8010eec:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	68ba      	ldr	r2, [r7, #8]
 8010ef6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	68fa      	ldr	r2, [r7, #12]
 8010efc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8010efe:	68ba      	ldr	r2, [r7, #8]
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	429a      	cmp	r2, r3
 8010f04:	d812      	bhi.n	8010f2c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8010f06:	687a      	ldr	r2, [r7, #4]
 8010f08:	683b      	ldr	r3, [r7, #0]
 8010f0a:	1ad2      	subs	r2, r2, r3
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	699b      	ldr	r3, [r3, #24]
 8010f10:	429a      	cmp	r2, r3
 8010f12:	d302      	bcc.n	8010f1a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8010f14:	2301      	movs	r3, #1
 8010f16:	617b      	str	r3, [r7, #20]
 8010f18:	e01b      	b.n	8010f52 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010f1a:	4b10      	ldr	r3, [pc, #64]	@ (8010f5c <prvInsertTimerInActiveList+0x7c>)
 8010f1c:	681a      	ldr	r2, [r3, #0]
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	3304      	adds	r3, #4
 8010f22:	4619      	mov	r1, r3
 8010f24:	4610      	mov	r0, r2
 8010f26:	f7fd fa26 	bl	800e376 <vListInsert>
 8010f2a:	e012      	b.n	8010f52 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010f2c:	687a      	ldr	r2, [r7, #4]
 8010f2e:	683b      	ldr	r3, [r7, #0]
 8010f30:	429a      	cmp	r2, r3
 8010f32:	d206      	bcs.n	8010f42 <prvInsertTimerInActiveList+0x62>
 8010f34:	68ba      	ldr	r2, [r7, #8]
 8010f36:	683b      	ldr	r3, [r7, #0]
 8010f38:	429a      	cmp	r2, r3
 8010f3a:	d302      	bcc.n	8010f42 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8010f3c:	2301      	movs	r3, #1
 8010f3e:	617b      	str	r3, [r7, #20]
 8010f40:	e007      	b.n	8010f52 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010f42:	4b07      	ldr	r3, [pc, #28]	@ (8010f60 <prvInsertTimerInActiveList+0x80>)
 8010f44:	681a      	ldr	r2, [r3, #0]
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	3304      	adds	r3, #4
 8010f4a:	4619      	mov	r1, r3
 8010f4c:	4610      	mov	r0, r2
 8010f4e:	f7fd fa12 	bl	800e376 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8010f52:	697b      	ldr	r3, [r7, #20]
    }
 8010f54:	4618      	mov	r0, r3
 8010f56:	3718      	adds	r7, #24
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	bd80      	pop	{r7, pc}
 8010f5c:	20000630 	.word	0x20000630
 8010f60:	2000062c 	.word	0x2000062c

08010f64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b088      	sub	sp, #32
 8010f68:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8010f6a:	f107 0308 	add.w	r3, r7, #8
 8010f6e:	2200      	movs	r2, #0
 8010f70:	601a      	str	r2, [r3, #0]
 8010f72:	605a      	str	r2, [r3, #4]
 8010f74:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8010f76:	e0ae      	b.n	80110d6 <prvProcessReceivedCommands+0x172>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010f78:	68bb      	ldr	r3, [r7, #8]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	f2c0 80ab 	blt.w	80110d6 <prvProcessReceivedCommands+0x172>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010f80:	693b      	ldr	r3, [r7, #16]
 8010f82:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8010f84:	69fb      	ldr	r3, [r7, #28]
 8010f86:	695b      	ldr	r3, [r3, #20]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d004      	beq.n	8010f96 <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010f8c:	69fb      	ldr	r3, [r7, #28]
 8010f8e:	3304      	adds	r3, #4
 8010f90:	4618      	mov	r0, r3
 8010f92:	f7fd fa29 	bl	800e3e8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010f96:	1d3b      	adds	r3, r7, #4
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f7ff ff81 	bl	8010ea0 <prvSampleTimeNow>
 8010f9e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8010fa0:	68bb      	ldr	r3, [r7, #8]
 8010fa2:	3b01      	subs	r3, #1
 8010fa4:	2b08      	cmp	r3, #8
 8010fa6:	f200 8093 	bhi.w	80110d0 <prvProcessReceivedCommands+0x16c>
 8010faa:	a201      	add	r2, pc, #4	@ (adr r2, 8010fb0 <prvProcessReceivedCommands+0x4c>)
 8010fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fb0:	08010fd5 	.word	0x08010fd5
 8010fb4:	08010fd5 	.word	0x08010fd5
 8010fb8:	0801103d 	.word	0x0801103d
 8010fbc:	08011051 	.word	0x08011051
 8010fc0:	080110a7 	.word	0x080110a7
 8010fc4:	08010fd5 	.word	0x08010fd5
 8010fc8:	08010fd5 	.word	0x08010fd5
 8010fcc:	0801103d 	.word	0x0801103d
 8010fd0:	08011051 	.word	0x08011051
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8010fd4:	69fb      	ldr	r3, [r7, #28]
 8010fd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010fda:	f043 0301 	orr.w	r3, r3, #1
 8010fde:	b2da      	uxtb	r2, r3
 8010fe0:	69fb      	ldr	r3, [r7, #28]
 8010fe2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010fe6:	68fa      	ldr	r2, [r7, #12]
 8010fe8:	69fb      	ldr	r3, [r7, #28]
 8010fea:	699b      	ldr	r3, [r3, #24]
 8010fec:	18d1      	adds	r1, r2, r3
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	69ba      	ldr	r2, [r7, #24]
 8010ff2:	69f8      	ldr	r0, [r7, #28]
 8010ff4:	f7ff ff74 	bl	8010ee0 <prvInsertTimerInActiveList>
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d06a      	beq.n	80110d4 <prvProcessReceivedCommands+0x170>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8010ffe:	69fb      	ldr	r3, [r7, #28]
 8011000:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011004:	f003 0304 	and.w	r3, r3, #4
 8011008:	2b00      	cmp	r3, #0
 801100a:	d009      	beq.n	8011020 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 801100c:	68fa      	ldr	r2, [r7, #12]
 801100e:	69fb      	ldr	r3, [r7, #28]
 8011010:	699b      	ldr	r3, [r3, #24]
 8011012:	4413      	add	r3, r2
 8011014:	69ba      	ldr	r2, [r7, #24]
 8011016:	4619      	mov	r1, r3
 8011018:	69f8      	ldr	r0, [r7, #28]
 801101a:	f7ff fe69 	bl	8010cf0 <prvReloadTimer>
 801101e:	e008      	b.n	8011032 <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8011020:	69fb      	ldr	r3, [r7, #28]
 8011022:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011026:	f023 0301 	bic.w	r3, r3, #1
 801102a:	b2da      	uxtb	r2, r3
 801102c:	69fb      	ldr	r3, [r7, #28]
 801102e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011032:	69fb      	ldr	r3, [r7, #28]
 8011034:	6a1b      	ldr	r3, [r3, #32]
 8011036:	69f8      	ldr	r0, [r7, #28]
 8011038:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 801103a:	e04b      	b.n	80110d4 <prvProcessReceivedCommands+0x170>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 801103c:	69fb      	ldr	r3, [r7, #28]
 801103e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011042:	f023 0301 	bic.w	r3, r3, #1
 8011046:	b2da      	uxtb	r2, r3
 8011048:	69fb      	ldr	r3, [r7, #28]
 801104a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 801104e:	e042      	b.n	80110d6 <prvProcessReceivedCommands+0x172>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8011050:	69fb      	ldr	r3, [r7, #28]
 8011052:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011056:	f043 0301 	orr.w	r3, r3, #1
 801105a:	b2da      	uxtb	r2, r3
 801105c:	69fb      	ldr	r3, [r7, #28]
 801105e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011062:	68fa      	ldr	r2, [r7, #12]
 8011064:	69fb      	ldr	r3, [r7, #28]
 8011066:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011068:	69fb      	ldr	r3, [r7, #28]
 801106a:	699b      	ldr	r3, [r3, #24]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d110      	bne.n	8011092 <prvProcessReceivedCommands+0x12e>
    __asm volatile
 8011070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011074:	b672      	cpsid	i
 8011076:	f383 8811 	msr	BASEPRI, r3
 801107a:	f3bf 8f6f 	isb	sy
 801107e:	f3bf 8f4f 	dsb	sy
 8011082:	b662      	cpsie	i
 8011084:	617b      	str	r3, [r7, #20]
}
 8011086:	bf00      	nop
 8011088:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 801108c:	481a      	ldr	r0, [pc, #104]	@ (80110f8 <prvProcessReceivedCommands+0x194>)
 801108e:	f7f4 fe43 	bl	8005d18 <vAssertCalled>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011092:	69fb      	ldr	r3, [r7, #28]
 8011094:	699a      	ldr	r2, [r3, #24]
 8011096:	69bb      	ldr	r3, [r7, #24]
 8011098:	18d1      	adds	r1, r2, r3
 801109a:	69bb      	ldr	r3, [r7, #24]
 801109c:	69ba      	ldr	r2, [r7, #24]
 801109e:	69f8      	ldr	r0, [r7, #28]
 80110a0:	f7ff ff1e 	bl	8010ee0 <prvInsertTimerInActiveList>
                        break;
 80110a4:	e017      	b.n	80110d6 <prvProcessReceivedCommands+0x172>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80110a6:	69fb      	ldr	r3, [r7, #28]
 80110a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80110ac:	f003 0302 	and.w	r3, r3, #2
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d103      	bne.n	80110bc <prvProcessReceivedCommands+0x158>
                            {
                                vPortFree( pxTimer );
 80110b4:	69f8      	ldr	r0, [r7, #28]
 80110b6:	f7f5 f9a5 	bl	8006404 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80110ba:	e00c      	b.n	80110d6 <prvProcessReceivedCommands+0x172>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80110bc:	69fb      	ldr	r3, [r7, #28]
 80110be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80110c2:	f023 0301 	bic.w	r3, r3, #1
 80110c6:	b2da      	uxtb	r2, r3
 80110c8:	69fb      	ldr	r3, [r7, #28]
 80110ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80110ce:	e002      	b.n	80110d6 <prvProcessReceivedCommands+0x172>

                    default:
                        /* Don't expect to get here. */
                        break;
 80110d0:	bf00      	nop
 80110d2:	e000      	b.n	80110d6 <prvProcessReceivedCommands+0x172>
                        break;
 80110d4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80110d6:	4b09      	ldr	r3, [pc, #36]	@ (80110fc <prvProcessReceivedCommands+0x198>)
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	f107 0108 	add.w	r1, r7, #8
 80110de:	2200      	movs	r2, #0
 80110e0:	4618      	mov	r0, r3
 80110e2:	f7fd fc87 	bl	800e9f4 <xQueueReceive>
 80110e6:	4603      	mov	r3, r0
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	f47f af45 	bne.w	8010f78 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 80110ee:	bf00      	nop
 80110f0:	bf00      	nop
 80110f2:	3720      	adds	r7, #32
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bd80      	pop	{r7, pc}
 80110f8:	08017d4c 	.word	0x08017d4c
 80110fc:	20000634 	.word	0x20000634

08011100 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8011100:	b580      	push	{r7, lr}
 8011102:	b082      	sub	sp, #8
 8011104:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011106:	e009      	b.n	801111c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011108:	4b0e      	ldr	r3, [pc, #56]	@ (8011144 <prvSwitchTimerLists+0x44>)
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	68db      	ldr	r3, [r3, #12]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8011112:	f04f 31ff 	mov.w	r1, #4294967295
 8011116:	6838      	ldr	r0, [r7, #0]
 8011118:	f7ff fe0c 	bl	8010d34 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801111c:	4b09      	ldr	r3, [pc, #36]	@ (8011144 <prvSwitchTimerLists+0x44>)
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d1f0      	bne.n	8011108 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8011126:	4b07      	ldr	r3, [pc, #28]	@ (8011144 <prvSwitchTimerLists+0x44>)
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 801112c:	4b06      	ldr	r3, [pc, #24]	@ (8011148 <prvSwitchTimerLists+0x48>)
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	4a04      	ldr	r2, [pc, #16]	@ (8011144 <prvSwitchTimerLists+0x44>)
 8011132:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8011134:	4a04      	ldr	r2, [pc, #16]	@ (8011148 <prvSwitchTimerLists+0x48>)
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	6013      	str	r3, [r2, #0]
    }
 801113a:	bf00      	nop
 801113c:	3708      	adds	r7, #8
 801113e:	46bd      	mov	sp, r7
 8011140:	bd80      	pop	{r7, pc}
 8011142:	bf00      	nop
 8011144:	2000062c 	.word	0x2000062c
 8011148:	20000630 	.word	0x20000630

0801114c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 801114c:	b580      	push	{r7, lr}
 801114e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8011150:	f000 f996 	bl	8011480 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8011154:	4b0d      	ldr	r3, [pc, #52]	@ (801118c <prvCheckForValidListAndQueue+0x40>)
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d113      	bne.n	8011184 <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 801115c:	480c      	ldr	r0, [pc, #48]	@ (8011190 <prvCheckForValidListAndQueue+0x44>)
 801115e:	f7fd f8b9 	bl	800e2d4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8011162:	480c      	ldr	r0, [pc, #48]	@ (8011194 <prvCheckForValidListAndQueue+0x48>)
 8011164:	f7fd f8b6 	bl	800e2d4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8011168:	4b0b      	ldr	r3, [pc, #44]	@ (8011198 <prvCheckForValidListAndQueue+0x4c>)
 801116a:	4a09      	ldr	r2, [pc, #36]	@ (8011190 <prvCheckForValidListAndQueue+0x44>)
 801116c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 801116e:	4b0b      	ldr	r3, [pc, #44]	@ (801119c <prvCheckForValidListAndQueue+0x50>)
 8011170:	4a08      	ldr	r2, [pc, #32]	@ (8011194 <prvCheckForValidListAndQueue+0x48>)
 8011172:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8011174:	2200      	movs	r2, #0
 8011176:	210c      	movs	r1, #12
 8011178:	2008      	movs	r0, #8
 801117a:	f7fd f9fd 	bl	800e578 <xQueueGenericCreate>
 801117e:	4603      	mov	r3, r0
 8011180:	4a02      	ldr	r2, [pc, #8]	@ (801118c <prvCheckForValidListAndQueue+0x40>)
 8011182:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8011184:	f000 f9b4 	bl	80114f0 <vPortExitCritical>
    }
 8011188:	bf00      	nop
 801118a:	bd80      	pop	{r7, pc}
 801118c:	20000634 	.word	0x20000634
 8011190:	20000604 	.word	0x20000604
 8011194:	20000618 	.word	0x20000618
 8011198:	2000062c 	.word	0x2000062c
 801119c:	20000630 	.word	0x20000630

080111a0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80111a0:	b480      	push	{r7}
 80111a2:	b085      	sub	sp, #20
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	60f8      	str	r0, [r7, #12]
 80111a8:	60b9      	str	r1, [r7, #8]
 80111aa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	3b04      	subs	r3, #4
 80111b0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80111b8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	3b04      	subs	r3, #4
 80111be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80111c0:	68bb      	ldr	r3, [r7, #8]
 80111c2:	f023 0201 	bic.w	r2, r3, #1
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	3b04      	subs	r3, #4
 80111ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80111d0:	4a0c      	ldr	r2, [pc, #48]	@ (8011204 <pxPortInitialiseStack+0x64>)
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	3b14      	subs	r3, #20
 80111da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80111dc:	687a      	ldr	r2, [r7, #4]
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	3b04      	subs	r3, #4
 80111e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	f06f 0202 	mvn.w	r2, #2
 80111ee:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	3b20      	subs	r3, #32
 80111f4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80111f6:	68fb      	ldr	r3, [r7, #12]
}
 80111f8:	4618      	mov	r0, r3
 80111fa:	3714      	adds	r7, #20
 80111fc:	46bd      	mov	sp, r7
 80111fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011202:	4770      	bx	lr
 8011204:	08011209 	.word	0x08011209

08011208 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b084      	sub	sp, #16
 801120c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 801120e:	2300      	movs	r3, #0
 8011210:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8011212:	4b15      	ldr	r3, [pc, #84]	@ (8011268 <prvTaskExitError+0x60>)
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	f1b3 3fff 	cmp.w	r3, #4294967295
 801121a:	d00f      	beq.n	801123c <prvTaskExitError+0x34>
    __asm volatile
 801121c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011220:	b672      	cpsid	i
 8011222:	f383 8811 	msr	BASEPRI, r3
 8011226:	f3bf 8f6f 	isb	sy
 801122a:	f3bf 8f4f 	dsb	sy
 801122e:	b662      	cpsie	i
 8011230:	60fb      	str	r3, [r7, #12]
}
 8011232:	bf00      	nop
 8011234:	21ee      	movs	r1, #238	@ 0xee
 8011236:	480d      	ldr	r0, [pc, #52]	@ (801126c <prvTaskExitError+0x64>)
 8011238:	f7f4 fd6e 	bl	8005d18 <vAssertCalled>
    __asm volatile
 801123c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011240:	b672      	cpsid	i
 8011242:	f383 8811 	msr	BASEPRI, r3
 8011246:	f3bf 8f6f 	isb	sy
 801124a:	f3bf 8f4f 	dsb	sy
 801124e:	b662      	cpsie	i
 8011250:	60bb      	str	r3, [r7, #8]
}
 8011252:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8011254:	bf00      	nop
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d0fc      	beq.n	8011256 <prvTaskExitError+0x4e>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 801125c:	bf00      	nop
 801125e:	bf00      	nop
 8011260:	3710      	adds	r7, #16
 8011262:	46bd      	mov	sp, r7
 8011264:	bd80      	pop	{r7, pc}
 8011266:	bf00      	nop
 8011268:	20000058 	.word	0x20000058
 801126c:	08017dc8 	.word	0x08017dc8

08011270 <SVC_Handler>:
/*-----------------------------------------------------------*/
void vPortSVCHandler( void )
{
	__asm volatile (
 8011270:	4b07      	ldr	r3, [pc, #28]	@ (8011290 <pxCurrentTCBConst2>)
 8011272:	6819      	ldr	r1, [r3, #0]
 8011274:	6808      	ldr	r0, [r1, #0]
 8011276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801127a:	f380 8809 	msr	PSP, r0
 801127e:	f3bf 8f6f 	isb	sy
 8011282:	f04f 0000 	mov.w	r0, #0
 8011286:	f380 8811 	msr	BASEPRI, r0
 801128a:	4770      	bx	lr
 801128c:	f3af 8000 	nop.w

08011290 <pxCurrentTCBConst2>:
 8011290:	200004d0 	.word	0x200004d0
	        "   bx r14                          \n"
	        "                                   \n"
	        "   .align 4                        \n"
	        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
	        );
}
 8011294:	bf00      	nop
 8011296:	bf00      	nop

08011298 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8011298:	4808      	ldr	r0, [pc, #32]	@ (80112bc <prvPortStartFirstTask+0x24>)
 801129a:	6800      	ldr	r0, [r0, #0]
 801129c:	6800      	ldr	r0, [r0, #0]
 801129e:	f380 8808 	msr	MSP, r0
 80112a2:	f04f 0000 	mov.w	r0, #0
 80112a6:	f380 8814 	msr	CONTROL, r0
 80112aa:	b662      	cpsie	i
 80112ac:	b661      	cpsie	f
 80112ae:	f3bf 8f4f 	dsb	sy
 80112b2:	f3bf 8f6f 	isb	sy
 80112b6:	df00      	svc	0
 80112b8:	bf00      	nop
 80112ba:	0000      	.short	0x0000
 80112bc:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80112c0:	bf00      	nop
 80112c2:	bf00      	nop

080112c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b08a      	sub	sp, #40	@ 0x28
 80112c8:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80112ca:	4b62      	ldr	r3, [pc, #392]	@ (8011454 <xPortStartScheduler+0x190>)
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80112d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112d2:	332c      	adds	r3, #44	@ 0x2c
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	4a60      	ldr	r2, [pc, #384]	@ (8011458 <xPortStartScheduler+0x194>)
 80112d8:	4293      	cmp	r3, r2
 80112da:	d010      	beq.n	80112fe <xPortStartScheduler+0x3a>
    __asm volatile
 80112dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112e0:	b672      	cpsid	i
 80112e2:	f383 8811 	msr	BASEPRI, r3
 80112e6:	f3bf 8f6f 	isb	sy
 80112ea:	f3bf 8f4f 	dsb	sy
 80112ee:	b662      	cpsie	i
 80112f0:	61bb      	str	r3, [r7, #24]
}
 80112f2:	bf00      	nop
 80112f4:	f240 114b 	movw	r1, #331	@ 0x14b
 80112f8:	4858      	ldr	r0, [pc, #352]	@ (801145c <xPortStartScheduler+0x198>)
 80112fa:	f7f4 fd0d 	bl	8005d18 <vAssertCalled>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 80112fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011300:	3338      	adds	r3, #56	@ 0x38
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	4a56      	ldr	r2, [pc, #344]	@ (8011460 <xPortStartScheduler+0x19c>)
 8011306:	4293      	cmp	r3, r2
 8011308:	d010      	beq.n	801132c <xPortStartScheduler+0x68>
    __asm volatile
 801130a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801130e:	b672      	cpsid	i
 8011310:	f383 8811 	msr	BASEPRI, r3
 8011314:	f3bf 8f6f 	isb	sy
 8011318:	f3bf 8f4f 	dsb	sy
 801131c:	b662      	cpsie	i
 801131e:	61fb      	str	r3, [r7, #28]
}
 8011320:	bf00      	nop
 8011322:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8011326:	484d      	ldr	r0, [pc, #308]	@ (801145c <xPortStartScheduler+0x198>)
 8011328:	f7f4 fcf6 	bl	8005d18 <vAssertCalled>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 801132c:	2300      	movs	r3, #0
 801132e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011330:	4b4c      	ldr	r3, [pc, #304]	@ (8011464 <xPortStartScheduler+0x1a0>)
 8011332:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8011334:	6a3b      	ldr	r3, [r7, #32]
 8011336:	781b      	ldrb	r3, [r3, #0]
 8011338:	b2db      	uxtb	r3, r3
 801133a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801133c:	6a3b      	ldr	r3, [r7, #32]
 801133e:	22ff      	movs	r2, #255	@ 0xff
 8011340:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011342:	6a3b      	ldr	r3, [r7, #32]
 8011344:	781b      	ldrb	r3, [r3, #0]
 8011346:	b2db      	uxtb	r3, r3
 8011348:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801134a:	79fb      	ldrb	r3, [r7, #7]
 801134c:	b2db      	uxtb	r3, r3
 801134e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8011352:	b2da      	uxtb	r2, r3
 8011354:	4b44      	ldr	r3, [pc, #272]	@ (8011468 <xPortStartScheduler+0x1a4>)
 8011356:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8011358:	4b43      	ldr	r3, [pc, #268]	@ (8011468 <xPortStartScheduler+0x1a4>)
 801135a:	781b      	ldrb	r3, [r3, #0]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d110      	bne.n	8011382 <xPortStartScheduler+0xbe>
    __asm volatile
 8011360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011364:	b672      	cpsid	i
 8011366:	f383 8811 	msr	BASEPRI, r3
 801136a:	f3bf 8f6f 	isb	sy
 801136e:	f3bf 8f4f 	dsb	sy
 8011372:	b662      	cpsie	i
 8011374:	617b      	str	r3, [r7, #20]
}
 8011376:	bf00      	nop
 8011378:	f240 116f 	movw	r1, #367	@ 0x16f
 801137c:	4837      	ldr	r0, [pc, #220]	@ (801145c <xPortStartScheduler+0x198>)
 801137e:	f7f4 fccb 	bl	8005d18 <vAssertCalled>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8011382:	79fb      	ldrb	r3, [r7, #7]
 8011384:	b2db      	uxtb	r3, r3
 8011386:	43db      	mvns	r3, r3
 8011388:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801138c:	2b00      	cmp	r3, #0
 801138e:	d019      	beq.n	80113c4 <xPortStartScheduler+0x100>
    __asm volatile
 8011390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011394:	b672      	cpsid	i
 8011396:	f383 8811 	msr	BASEPRI, r3
 801139a:	f3bf 8f6f 	isb	sy
 801139e:	f3bf 8f4f 	dsb	sy
 80113a2:	b662      	cpsie	i
 80113a4:	613b      	str	r3, [r7, #16]
}
 80113a6:	bf00      	nop
 80113a8:	f240 1173 	movw	r1, #371	@ 0x173
 80113ac:	482b      	ldr	r0, [pc, #172]	@ (801145c <xPortStartScheduler+0x198>)
 80113ae:	f7f4 fcb3 	bl	8005d18 <vAssertCalled>

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80113b2:	e007      	b.n	80113c4 <xPortStartScheduler+0x100>
        {
            ulImplementedPrioBits++;
 80113b4:	68bb      	ldr	r3, [r7, #8]
 80113b6:	3301      	adds	r3, #1
 80113b8:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80113ba:	79fb      	ldrb	r3, [r7, #7]
 80113bc:	b2db      	uxtb	r3, r3
 80113be:	005b      	lsls	r3, r3, #1
 80113c0:	b2db      	uxtb	r3, r3
 80113c2:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80113c4:	79fb      	ldrb	r3, [r7, #7]
 80113c6:	b2db      	uxtb	r3, r3
 80113c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80113cc:	2b80      	cmp	r3, #128	@ 0x80
 80113ce:	d0f1      	beq.n	80113b4 <xPortStartScheduler+0xf0>
        }

        if( ulImplementedPrioBits == 8 )
 80113d0:	68bb      	ldr	r3, [r7, #8]
 80113d2:	2b08      	cmp	r3, #8
 80113d4:	d103      	bne.n	80113de <xPortStartScheduler+0x11a>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80113d6:	4b25      	ldr	r3, [pc, #148]	@ (801146c <xPortStartScheduler+0x1a8>)
 80113d8:	2200      	movs	r2, #0
 80113da:	601a      	str	r2, [r3, #0]
 80113dc:	e004      	b.n	80113e8 <xPortStartScheduler+0x124>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80113de:	68bb      	ldr	r3, [r7, #8]
 80113e0:	f1c3 0307 	rsb	r3, r3, #7
 80113e4:	4a21      	ldr	r2, [pc, #132]	@ (801146c <xPortStartScheduler+0x1a8>)
 80113e6:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80113e8:	4b20      	ldr	r3, [pc, #128]	@ (801146c <xPortStartScheduler+0x1a8>)
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	021b      	lsls	r3, r3, #8
 80113ee:	4a1f      	ldr	r2, [pc, #124]	@ (801146c <xPortStartScheduler+0x1a8>)
 80113f0:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80113f2:	4b1e      	ldr	r3, [pc, #120]	@ (801146c <xPortStartScheduler+0x1a8>)
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80113fa:	4a1c      	ldr	r2, [pc, #112]	@ (801146c <xPortStartScheduler+0x1a8>)
 80113fc:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80113fe:	7bfb      	ldrb	r3, [r7, #15]
 8011400:	b2da      	uxtb	r2, r3
 8011402:	6a3b      	ldr	r3, [r7, #32]
 8011404:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8011406:	4b1a      	ldr	r3, [pc, #104]	@ (8011470 <xPortStartScheduler+0x1ac>)
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	4a19      	ldr	r2, [pc, #100]	@ (8011470 <xPortStartScheduler+0x1ac>)
 801140c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011410:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8011412:	4b17      	ldr	r3, [pc, #92]	@ (8011470 <xPortStartScheduler+0x1ac>)
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	4a16      	ldr	r2, [pc, #88]	@ (8011470 <xPortStartScheduler+0x1ac>)
 8011418:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801141c:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 801141e:	4b15      	ldr	r3, [pc, #84]	@ (8011474 <xPortStartScheduler+0x1b0>)
 8011420:	2200      	movs	r2, #0
 8011422:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8011424:	f000 f8ec 	bl	8011600 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8011428:	4b13      	ldr	r3, [pc, #76]	@ (8011478 <xPortStartScheduler+0x1b4>)
 801142a:	2200      	movs	r2, #0
 801142c:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 801142e:	f000 f90b 	bl	8011648 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011432:	4b12      	ldr	r3, [pc, #72]	@ (801147c <xPortStartScheduler+0x1b8>)
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	4a11      	ldr	r2, [pc, #68]	@ (801147c <xPortStartScheduler+0x1b8>)
 8011438:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801143c:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 801143e:	f7ff ff2b 	bl	8011298 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8011442:	f7fe fd01 	bl	800fe48 <vTaskSwitchContext>
    prvTaskExitError();
 8011446:	f7ff fedf 	bl	8011208 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 801144a:	2300      	movs	r3, #0
}
 801144c:	4618      	mov	r0, r3
 801144e:	3728      	adds	r7, #40	@ 0x28
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}
 8011454:	e000ed08 	.word	0xe000ed08
 8011458:	08011271 	.word	0x08011271
 801145c:	08017dc8 	.word	0x08017dc8
 8011460:	08011551 	.word	0x08011551
 8011464:	e000e400 	.word	0xe000e400
 8011468:	20000640 	.word	0x20000640
 801146c:	20000644 	.word	0x20000644
 8011470:	e000ed20 	.word	0xe000ed20
 8011474:	e000ed1c 	.word	0xe000ed1c
 8011478:	20000058 	.word	0x20000058
 801147c:	e000ef34 	.word	0xe000ef34

08011480 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b082      	sub	sp, #8
 8011484:	af00      	add	r7, sp, #0
    __asm volatile
 8011486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801148a:	b672      	cpsid	i
 801148c:	f383 8811 	msr	BASEPRI, r3
 8011490:	f3bf 8f6f 	isb	sy
 8011494:	f3bf 8f4f 	dsb	sy
 8011498:	b662      	cpsie	i
 801149a:	607b      	str	r3, [r7, #4]
}
 801149c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 801149e:	4b11      	ldr	r3, [pc, #68]	@ (80114e4 <vPortEnterCritical+0x64>)
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	3301      	adds	r3, #1
 80114a4:	4a0f      	ldr	r2, [pc, #60]	@ (80114e4 <vPortEnterCritical+0x64>)
 80114a6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80114a8:	4b0e      	ldr	r3, [pc, #56]	@ (80114e4 <vPortEnterCritical+0x64>)
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	2b01      	cmp	r3, #1
 80114ae:	d115      	bne.n	80114dc <vPortEnterCritical+0x5c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80114b0:	4b0d      	ldr	r3, [pc, #52]	@ (80114e8 <vPortEnterCritical+0x68>)
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	b2db      	uxtb	r3, r3
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d010      	beq.n	80114dc <vPortEnterCritical+0x5c>
    __asm volatile
 80114ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114be:	b672      	cpsid	i
 80114c0:	f383 8811 	msr	BASEPRI, r3
 80114c4:	f3bf 8f6f 	isb	sy
 80114c8:	f3bf 8f4f 	dsb	sy
 80114cc:	b662      	cpsie	i
 80114ce:	603b      	str	r3, [r7, #0]
}
 80114d0:	bf00      	nop
 80114d2:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 80114d6:	4805      	ldr	r0, [pc, #20]	@ (80114ec <vPortEnterCritical+0x6c>)
 80114d8:	f7f4 fc1e 	bl	8005d18 <vAssertCalled>
    }
}
 80114dc:	bf00      	nop
 80114de:	3708      	adds	r7, #8
 80114e0:	46bd      	mov	sp, r7
 80114e2:	bd80      	pop	{r7, pc}
 80114e4:	20000058 	.word	0x20000058
 80114e8:	e000ed04 	.word	0xe000ed04
 80114ec:	08017dc8 	.word	0x08017dc8

080114f0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b082      	sub	sp, #8
 80114f4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80114f6:	4b14      	ldr	r3, [pc, #80]	@ (8011548 <vPortExitCritical+0x58>)
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d110      	bne.n	8011520 <vPortExitCritical+0x30>
    __asm volatile
 80114fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011502:	b672      	cpsid	i
 8011504:	f383 8811 	msr	BASEPRI, r3
 8011508:	f3bf 8f6f 	isb	sy
 801150c:	f3bf 8f4f 	dsb	sy
 8011510:	b662      	cpsie	i
 8011512:	607b      	str	r3, [r7, #4]
}
 8011514:	bf00      	nop
 8011516:	f240 11e3 	movw	r1, #483	@ 0x1e3
 801151a:	480c      	ldr	r0, [pc, #48]	@ (801154c <vPortExitCritical+0x5c>)
 801151c:	f7f4 fbfc 	bl	8005d18 <vAssertCalled>
    uxCriticalNesting--;
 8011520:	4b09      	ldr	r3, [pc, #36]	@ (8011548 <vPortExitCritical+0x58>)
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	3b01      	subs	r3, #1
 8011526:	4a08      	ldr	r2, [pc, #32]	@ (8011548 <vPortExitCritical+0x58>)
 8011528:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 801152a:	4b07      	ldr	r3, [pc, #28]	@ (8011548 <vPortExitCritical+0x58>)
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d105      	bne.n	801153e <vPortExitCritical+0x4e>
 8011532:	2300      	movs	r3, #0
 8011534:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8011536:	683b      	ldr	r3, [r7, #0]
 8011538:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 801153c:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 801153e:	bf00      	nop
 8011540:	3708      	adds	r7, #8
 8011542:	46bd      	mov	sp, r7
 8011544:	bd80      	pop	{r7, pc}
 8011546:	bf00      	nop
 8011548:	20000058 	.word	0x20000058
 801154c:	08017dc8 	.word	0x08017dc8

08011550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8011550:	f3ef 8009 	mrs	r0, PSP
 8011554:	f3bf 8f6f 	isb	sy
 8011558:	4b15      	ldr	r3, [pc, #84]	@ (80115b0 <pxCurrentTCBConst>)
 801155a:	681a      	ldr	r2, [r3, #0]
 801155c:	f01e 0f10 	tst.w	lr, #16
 8011560:	bf08      	it	eq
 8011562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801156a:	6010      	str	r0, [r2, #0]
 801156c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011570:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8011574:	b672      	cpsid	i
 8011576:	f380 8811 	msr	BASEPRI, r0
 801157a:	f3bf 8f4f 	dsb	sy
 801157e:	f3bf 8f6f 	isb	sy
 8011582:	b662      	cpsie	i
 8011584:	f7fe fc60 	bl	800fe48 <vTaskSwitchContext>
 8011588:	f04f 0000 	mov.w	r0, #0
 801158c:	f380 8811 	msr	BASEPRI, r0
 8011590:	bc09      	pop	{r0, r3}
 8011592:	6819      	ldr	r1, [r3, #0]
 8011594:	6808      	ldr	r0, [r1, #0]
 8011596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801159a:	f01e 0f10 	tst.w	lr, #16
 801159e:	bf08      	it	eq
 80115a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80115a4:	f380 8809 	msr	PSP, r0
 80115a8:	f3bf 8f6f 	isb	sy
 80115ac:	4770      	bx	lr
 80115ae:	bf00      	nop

080115b0 <pxCurrentTCBConst>:
 80115b0:	200004d0 	.word	0x200004d0
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80115b4:	bf00      	nop
 80115b6:	bf00      	nop

080115b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b082      	sub	sp, #8
 80115bc:	af00      	add	r7, sp, #0
    __asm volatile
 80115be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115c2:	b672      	cpsid	i
 80115c4:	f383 8811 	msr	BASEPRI, r3
 80115c8:	f3bf 8f6f 	isb	sy
 80115cc:	f3bf 8f4f 	dsb	sy
 80115d0:	b662      	cpsie	i
 80115d2:	607b      	str	r3, [r7, #4]
}
 80115d4:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80115d6:	f7fe fb17 	bl	800fc08 <xTaskIncrementTick>
 80115da:	4603      	mov	r3, r0
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d003      	beq.n	80115e8 <xPortSysTickHandler+0x30>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80115e0:	4b06      	ldr	r3, [pc, #24]	@ (80115fc <xPortSysTickHandler+0x44>)
 80115e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80115e6:	601a      	str	r2, [r3, #0]
 80115e8:	2300      	movs	r3, #0
 80115ea:	603b      	str	r3, [r7, #0]
    __asm volatile
 80115ec:	683b      	ldr	r3, [r7, #0]
 80115ee:	f383 8811 	msr	BASEPRI, r3
}
 80115f2:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 80115f4:	bf00      	nop
 80115f6:	3708      	adds	r7, #8
 80115f8:	46bd      	mov	sp, r7
 80115fa:	bd80      	pop	{r7, pc}
 80115fc:	e000ed04 	.word	0xe000ed04

08011600 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8011600:	b480      	push	{r7}
 8011602:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011604:	4b0b      	ldr	r3, [pc, #44]	@ (8011634 <vPortSetupTimerInterrupt+0x34>)
 8011606:	2200      	movs	r2, #0
 8011608:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801160a:	4b0b      	ldr	r3, [pc, #44]	@ (8011638 <vPortSetupTimerInterrupt+0x38>)
 801160c:	2200      	movs	r2, #0
 801160e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011610:	4b0a      	ldr	r3, [pc, #40]	@ (801163c <vPortSetupTimerInterrupt+0x3c>)
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	4a0a      	ldr	r2, [pc, #40]	@ (8011640 <vPortSetupTimerInterrupt+0x40>)
 8011616:	fba2 2303 	umull	r2, r3, r2, r3
 801161a:	099b      	lsrs	r3, r3, #6
 801161c:	4a09      	ldr	r2, [pc, #36]	@ (8011644 <vPortSetupTimerInterrupt+0x44>)
 801161e:	3b01      	subs	r3, #1
 8011620:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011622:	4b04      	ldr	r3, [pc, #16]	@ (8011634 <vPortSetupTimerInterrupt+0x34>)
 8011624:	2207      	movs	r2, #7
 8011626:	601a      	str	r2, [r3, #0]
}
 8011628:	bf00      	nop
 801162a:	46bd      	mov	sp, r7
 801162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011630:	4770      	bx	lr
 8011632:	bf00      	nop
 8011634:	e000e010 	.word	0xe000e010
 8011638:	e000e018 	.word	0xe000e018
 801163c:	2000004c 	.word	0x2000004c
 8011640:	10624dd3 	.word	0x10624dd3
 8011644:	e000e014 	.word	0xe000e014

08011648 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8011648:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8011658 <vPortEnableVFP+0x10>
 801164c:	6801      	ldr	r1, [r0, #0]
 801164e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8011652:	6001      	str	r1, [r0, #0]
 8011654:	4770      	bx	lr
 8011656:	0000      	.short	0x0000
 8011658:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 801165c:	bf00      	nop
 801165e:	bf00      	nop

08011660 <__assert_func>:
 8011660:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011662:	4614      	mov	r4, r2
 8011664:	461a      	mov	r2, r3
 8011666:	4b09      	ldr	r3, [pc, #36]	@ (801168c <__assert_func+0x2c>)
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	4605      	mov	r5, r0
 801166c:	68d8      	ldr	r0, [r3, #12]
 801166e:	b14c      	cbz	r4, 8011684 <__assert_func+0x24>
 8011670:	4b07      	ldr	r3, [pc, #28]	@ (8011690 <__assert_func+0x30>)
 8011672:	9100      	str	r1, [sp, #0]
 8011674:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011678:	4906      	ldr	r1, [pc, #24]	@ (8011694 <__assert_func+0x34>)
 801167a:	462b      	mov	r3, r5
 801167c:	f002 f8ea 	bl	8013854 <fiprintf>
 8011680:	f002 fcf8 	bl	8014074 <abort>
 8011684:	4b04      	ldr	r3, [pc, #16]	@ (8011698 <__assert_func+0x38>)
 8011686:	461c      	mov	r4, r3
 8011688:	e7f3      	b.n	8011672 <__assert_func+0x12>
 801168a:	bf00      	nop
 801168c:	200001d4 	.word	0x200001d4
 8011690:	08018328 	.word	0x08018328
 8011694:	08018335 	.word	0x08018335
 8011698:	08018363 	.word	0x08018363

0801169c <atof>:
 801169c:	2100      	movs	r1, #0
 801169e:	f000 bf2d 	b.w	80124fc <strtod>

080116a2 <atoi>:
 80116a2:	220a      	movs	r2, #10
 80116a4:	2100      	movs	r1, #0
 80116a6:	f000 bfb1 	b.w	801260c <strtol>
	...

080116ac <calloc>:
 80116ac:	4b02      	ldr	r3, [pc, #8]	@ (80116b8 <calloc+0xc>)
 80116ae:	460a      	mov	r2, r1
 80116b0:	4601      	mov	r1, r0
 80116b2:	6818      	ldr	r0, [r3, #0]
 80116b4:	f000 b802 	b.w	80116bc <_calloc_r>
 80116b8:	200001d4 	.word	0x200001d4

080116bc <_calloc_r>:
 80116bc:	b570      	push	{r4, r5, r6, lr}
 80116be:	fba1 5402 	umull	r5, r4, r1, r2
 80116c2:	b934      	cbnz	r4, 80116d2 <_calloc_r+0x16>
 80116c4:	4629      	mov	r1, r5
 80116c6:	f000 f887 	bl	80117d8 <_malloc_r>
 80116ca:	4606      	mov	r6, r0
 80116cc:	b928      	cbnz	r0, 80116da <_calloc_r+0x1e>
 80116ce:	4630      	mov	r0, r6
 80116d0:	bd70      	pop	{r4, r5, r6, pc}
 80116d2:	220c      	movs	r2, #12
 80116d4:	6002      	str	r2, [r0, #0]
 80116d6:	2600      	movs	r6, #0
 80116d8:	e7f9      	b.n	80116ce <_calloc_r+0x12>
 80116da:	462a      	mov	r2, r5
 80116dc:	4621      	mov	r1, r4
 80116de:	f002 fb47 	bl	8013d70 <memset>
 80116e2:	e7f4      	b.n	80116ce <_calloc_r+0x12>

080116e4 <getenv>:
 80116e4:	b507      	push	{r0, r1, r2, lr}
 80116e6:	4b04      	ldr	r3, [pc, #16]	@ (80116f8 <getenv+0x14>)
 80116e8:	4601      	mov	r1, r0
 80116ea:	aa01      	add	r2, sp, #4
 80116ec:	6818      	ldr	r0, [r3, #0]
 80116ee:	f000 f805 	bl	80116fc <_findenv_r>
 80116f2:	b003      	add	sp, #12
 80116f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80116f8:	200001d4 	.word	0x200001d4

080116fc <_findenv_r>:
 80116fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011700:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8011770 <_findenv_r+0x74>
 8011704:	4606      	mov	r6, r0
 8011706:	4689      	mov	r9, r1
 8011708:	4617      	mov	r7, r2
 801170a:	f7f4 fe25 	bl	8006358 <__env_lock>
 801170e:	f8da 4000 	ldr.w	r4, [sl]
 8011712:	b134      	cbz	r4, 8011722 <_findenv_r+0x26>
 8011714:	464b      	mov	r3, r9
 8011716:	4698      	mov	r8, r3
 8011718:	f813 2b01 	ldrb.w	r2, [r3], #1
 801171c:	b13a      	cbz	r2, 801172e <_findenv_r+0x32>
 801171e:	2a3d      	cmp	r2, #61	@ 0x3d
 8011720:	d1f9      	bne.n	8011716 <_findenv_r+0x1a>
 8011722:	4630      	mov	r0, r6
 8011724:	f7f4 fe50 	bl	80063c8 <__env_unlock>
 8011728:	2000      	movs	r0, #0
 801172a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801172e:	eba8 0809 	sub.w	r8, r8, r9
 8011732:	46a3      	mov	fp, r4
 8011734:	f854 0b04 	ldr.w	r0, [r4], #4
 8011738:	2800      	cmp	r0, #0
 801173a:	d0f2      	beq.n	8011722 <_findenv_r+0x26>
 801173c:	4642      	mov	r2, r8
 801173e:	4649      	mov	r1, r9
 8011740:	f002 fb2b 	bl	8013d9a <strncmp>
 8011744:	2800      	cmp	r0, #0
 8011746:	d1f4      	bne.n	8011732 <_findenv_r+0x36>
 8011748:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801174c:	eb03 0508 	add.w	r5, r3, r8
 8011750:	f813 3008 	ldrb.w	r3, [r3, r8]
 8011754:	2b3d      	cmp	r3, #61	@ 0x3d
 8011756:	d1ec      	bne.n	8011732 <_findenv_r+0x36>
 8011758:	f8da 3000 	ldr.w	r3, [sl]
 801175c:	ebab 0303 	sub.w	r3, fp, r3
 8011760:	109b      	asrs	r3, r3, #2
 8011762:	4630      	mov	r0, r6
 8011764:	603b      	str	r3, [r7, #0]
 8011766:	f7f4 fe2f 	bl	80063c8 <__env_unlock>
 801176a:	1c68      	adds	r0, r5, #1
 801176c:	e7dd      	b.n	801172a <_findenv_r+0x2e>
 801176e:	bf00      	nop
 8011770:	20000044 	.word	0x20000044

08011774 <malloc>:
 8011774:	4b02      	ldr	r3, [pc, #8]	@ (8011780 <malloc+0xc>)
 8011776:	4601      	mov	r1, r0
 8011778:	6818      	ldr	r0, [r3, #0]
 801177a:	f000 b82d 	b.w	80117d8 <_malloc_r>
 801177e:	bf00      	nop
 8011780:	200001d4 	.word	0x200001d4

08011784 <free>:
 8011784:	4b02      	ldr	r3, [pc, #8]	@ (8011790 <free+0xc>)
 8011786:	4601      	mov	r1, r0
 8011788:	6818      	ldr	r0, [r3, #0]
 801178a:	f003 bad5 	b.w	8014d38 <_free_r>
 801178e:	bf00      	nop
 8011790:	200001d4 	.word	0x200001d4

08011794 <sbrk_aligned>:
 8011794:	b570      	push	{r4, r5, r6, lr}
 8011796:	4e0f      	ldr	r6, [pc, #60]	@ (80117d4 <sbrk_aligned+0x40>)
 8011798:	460c      	mov	r4, r1
 801179a:	6831      	ldr	r1, [r6, #0]
 801179c:	4605      	mov	r5, r0
 801179e:	b911      	cbnz	r1, 80117a6 <sbrk_aligned+0x12>
 80117a0:	f7f4 fd08 	bl	80061b4 <_sbrk_r>
 80117a4:	6030      	str	r0, [r6, #0]
 80117a6:	4621      	mov	r1, r4
 80117a8:	4628      	mov	r0, r5
 80117aa:	f7f4 fd03 	bl	80061b4 <_sbrk_r>
 80117ae:	1c43      	adds	r3, r0, #1
 80117b0:	d103      	bne.n	80117ba <sbrk_aligned+0x26>
 80117b2:	f04f 34ff 	mov.w	r4, #4294967295
 80117b6:	4620      	mov	r0, r4
 80117b8:	bd70      	pop	{r4, r5, r6, pc}
 80117ba:	1cc4      	adds	r4, r0, #3
 80117bc:	f024 0403 	bic.w	r4, r4, #3
 80117c0:	42a0      	cmp	r0, r4
 80117c2:	d0f8      	beq.n	80117b6 <sbrk_aligned+0x22>
 80117c4:	1a21      	subs	r1, r4, r0
 80117c6:	4628      	mov	r0, r5
 80117c8:	f7f4 fcf4 	bl	80061b4 <_sbrk_r>
 80117cc:	3001      	adds	r0, #1
 80117ce:	d1f2      	bne.n	80117b6 <sbrk_aligned+0x22>
 80117d0:	e7ef      	b.n	80117b2 <sbrk_aligned+0x1e>
 80117d2:	bf00      	nop
 80117d4:	20000648 	.word	0x20000648

080117d8 <_malloc_r>:
 80117d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80117dc:	1ccd      	adds	r5, r1, #3
 80117de:	f025 0503 	bic.w	r5, r5, #3
 80117e2:	3508      	adds	r5, #8
 80117e4:	2d0c      	cmp	r5, #12
 80117e6:	bf38      	it	cc
 80117e8:	250c      	movcc	r5, #12
 80117ea:	2d00      	cmp	r5, #0
 80117ec:	4606      	mov	r6, r0
 80117ee:	db01      	blt.n	80117f4 <_malloc_r+0x1c>
 80117f0:	42a9      	cmp	r1, r5
 80117f2:	d904      	bls.n	80117fe <_malloc_r+0x26>
 80117f4:	230c      	movs	r3, #12
 80117f6:	6033      	str	r3, [r6, #0]
 80117f8:	2000      	movs	r0, #0
 80117fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80118d4 <_malloc_r+0xfc>
 8011802:	f7f4 fd5b 	bl	80062bc <__malloc_lock>
 8011806:	f8d8 3000 	ldr.w	r3, [r8]
 801180a:	461c      	mov	r4, r3
 801180c:	bb44      	cbnz	r4, 8011860 <_malloc_r+0x88>
 801180e:	4629      	mov	r1, r5
 8011810:	4630      	mov	r0, r6
 8011812:	f7ff ffbf 	bl	8011794 <sbrk_aligned>
 8011816:	1c43      	adds	r3, r0, #1
 8011818:	4604      	mov	r4, r0
 801181a:	d158      	bne.n	80118ce <_malloc_r+0xf6>
 801181c:	f8d8 4000 	ldr.w	r4, [r8]
 8011820:	4627      	mov	r7, r4
 8011822:	2f00      	cmp	r7, #0
 8011824:	d143      	bne.n	80118ae <_malloc_r+0xd6>
 8011826:	2c00      	cmp	r4, #0
 8011828:	d04b      	beq.n	80118c2 <_malloc_r+0xea>
 801182a:	6823      	ldr	r3, [r4, #0]
 801182c:	4639      	mov	r1, r7
 801182e:	4630      	mov	r0, r6
 8011830:	eb04 0903 	add.w	r9, r4, r3
 8011834:	f7f4 fcbe 	bl	80061b4 <_sbrk_r>
 8011838:	4581      	cmp	r9, r0
 801183a:	d142      	bne.n	80118c2 <_malloc_r+0xea>
 801183c:	6821      	ldr	r1, [r4, #0]
 801183e:	1a6d      	subs	r5, r5, r1
 8011840:	4629      	mov	r1, r5
 8011842:	4630      	mov	r0, r6
 8011844:	f7ff ffa6 	bl	8011794 <sbrk_aligned>
 8011848:	3001      	adds	r0, #1
 801184a:	d03a      	beq.n	80118c2 <_malloc_r+0xea>
 801184c:	6823      	ldr	r3, [r4, #0]
 801184e:	442b      	add	r3, r5
 8011850:	6023      	str	r3, [r4, #0]
 8011852:	f8d8 3000 	ldr.w	r3, [r8]
 8011856:	685a      	ldr	r2, [r3, #4]
 8011858:	bb62      	cbnz	r2, 80118b4 <_malloc_r+0xdc>
 801185a:	f8c8 7000 	str.w	r7, [r8]
 801185e:	e00f      	b.n	8011880 <_malloc_r+0xa8>
 8011860:	6822      	ldr	r2, [r4, #0]
 8011862:	1b52      	subs	r2, r2, r5
 8011864:	d420      	bmi.n	80118a8 <_malloc_r+0xd0>
 8011866:	2a0b      	cmp	r2, #11
 8011868:	d917      	bls.n	801189a <_malloc_r+0xc2>
 801186a:	1961      	adds	r1, r4, r5
 801186c:	42a3      	cmp	r3, r4
 801186e:	6025      	str	r5, [r4, #0]
 8011870:	bf18      	it	ne
 8011872:	6059      	strne	r1, [r3, #4]
 8011874:	6863      	ldr	r3, [r4, #4]
 8011876:	bf08      	it	eq
 8011878:	f8c8 1000 	streq.w	r1, [r8]
 801187c:	5162      	str	r2, [r4, r5]
 801187e:	604b      	str	r3, [r1, #4]
 8011880:	4630      	mov	r0, r6
 8011882:	f7f4 fd55 	bl	8006330 <__malloc_unlock>
 8011886:	f104 000b 	add.w	r0, r4, #11
 801188a:	1d23      	adds	r3, r4, #4
 801188c:	f020 0007 	bic.w	r0, r0, #7
 8011890:	1ac2      	subs	r2, r0, r3
 8011892:	bf1c      	itt	ne
 8011894:	1a1b      	subne	r3, r3, r0
 8011896:	50a3      	strne	r3, [r4, r2]
 8011898:	e7af      	b.n	80117fa <_malloc_r+0x22>
 801189a:	6862      	ldr	r2, [r4, #4]
 801189c:	42a3      	cmp	r3, r4
 801189e:	bf0c      	ite	eq
 80118a0:	f8c8 2000 	streq.w	r2, [r8]
 80118a4:	605a      	strne	r2, [r3, #4]
 80118a6:	e7eb      	b.n	8011880 <_malloc_r+0xa8>
 80118a8:	4623      	mov	r3, r4
 80118aa:	6864      	ldr	r4, [r4, #4]
 80118ac:	e7ae      	b.n	801180c <_malloc_r+0x34>
 80118ae:	463c      	mov	r4, r7
 80118b0:	687f      	ldr	r7, [r7, #4]
 80118b2:	e7b6      	b.n	8011822 <_malloc_r+0x4a>
 80118b4:	461a      	mov	r2, r3
 80118b6:	685b      	ldr	r3, [r3, #4]
 80118b8:	42a3      	cmp	r3, r4
 80118ba:	d1fb      	bne.n	80118b4 <_malloc_r+0xdc>
 80118bc:	2300      	movs	r3, #0
 80118be:	6053      	str	r3, [r2, #4]
 80118c0:	e7de      	b.n	8011880 <_malloc_r+0xa8>
 80118c2:	230c      	movs	r3, #12
 80118c4:	6033      	str	r3, [r6, #0]
 80118c6:	4630      	mov	r0, r6
 80118c8:	f7f4 fd32 	bl	8006330 <__malloc_unlock>
 80118cc:	e794      	b.n	80117f8 <_malloc_r+0x20>
 80118ce:	6005      	str	r5, [r0, #0]
 80118d0:	e7d6      	b.n	8011880 <_malloc_r+0xa8>
 80118d2:	bf00      	nop
 80118d4:	2000064c 	.word	0x2000064c

080118d8 <mallinfo>:
 80118d8:	b510      	push	{r4, lr}
 80118da:	4b03      	ldr	r3, [pc, #12]	@ (80118e8 <mallinfo+0x10>)
 80118dc:	4604      	mov	r4, r0
 80118de:	6819      	ldr	r1, [r3, #0]
 80118e0:	f003 fdae 	bl	8015440 <_mallinfo_r>
 80118e4:	4620      	mov	r0, r4
 80118e6:	bd10      	pop	{r4, pc}
 80118e8:	200001d4 	.word	0x200001d4

080118ec <sulp>:
 80118ec:	b570      	push	{r4, r5, r6, lr}
 80118ee:	4604      	mov	r4, r0
 80118f0:	460d      	mov	r5, r1
 80118f2:	ec45 4b10 	vmov	d0, r4, r5
 80118f6:	4616      	mov	r6, r2
 80118f8:	f004 f954 	bl	8015ba4 <__ulp>
 80118fc:	ec51 0b10 	vmov	r0, r1, d0
 8011900:	b17e      	cbz	r6, 8011922 <sulp+0x36>
 8011902:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011906:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801190a:	2b00      	cmp	r3, #0
 801190c:	dd09      	ble.n	8011922 <sulp+0x36>
 801190e:	051b      	lsls	r3, r3, #20
 8011910:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8011914:	2400      	movs	r4, #0
 8011916:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801191a:	4622      	mov	r2, r4
 801191c:	462b      	mov	r3, r5
 801191e:	f7ee fe9b 	bl	8000658 <__aeabi_dmul>
 8011922:	ec41 0b10 	vmov	d0, r0, r1
 8011926:	bd70      	pop	{r4, r5, r6, pc}

08011928 <_strtod_l>:
 8011928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801192c:	b09f      	sub	sp, #124	@ 0x7c
 801192e:	460c      	mov	r4, r1
 8011930:	9217      	str	r2, [sp, #92]	@ 0x5c
 8011932:	2200      	movs	r2, #0
 8011934:	921a      	str	r2, [sp, #104]	@ 0x68
 8011936:	9005      	str	r0, [sp, #20]
 8011938:	f04f 0a00 	mov.w	sl, #0
 801193c:	f04f 0b00 	mov.w	fp, #0
 8011940:	460a      	mov	r2, r1
 8011942:	9219      	str	r2, [sp, #100]	@ 0x64
 8011944:	7811      	ldrb	r1, [r2, #0]
 8011946:	292b      	cmp	r1, #43	@ 0x2b
 8011948:	d04a      	beq.n	80119e0 <_strtod_l+0xb8>
 801194a:	d838      	bhi.n	80119be <_strtod_l+0x96>
 801194c:	290d      	cmp	r1, #13
 801194e:	d832      	bhi.n	80119b6 <_strtod_l+0x8e>
 8011950:	2908      	cmp	r1, #8
 8011952:	d832      	bhi.n	80119ba <_strtod_l+0x92>
 8011954:	2900      	cmp	r1, #0
 8011956:	d03b      	beq.n	80119d0 <_strtod_l+0xa8>
 8011958:	2200      	movs	r2, #0
 801195a:	920e      	str	r2, [sp, #56]	@ 0x38
 801195c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801195e:	782a      	ldrb	r2, [r5, #0]
 8011960:	2a30      	cmp	r2, #48	@ 0x30
 8011962:	f040 80b2 	bne.w	8011aca <_strtod_l+0x1a2>
 8011966:	786a      	ldrb	r2, [r5, #1]
 8011968:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801196c:	2a58      	cmp	r2, #88	@ 0x58
 801196e:	d16e      	bne.n	8011a4e <_strtod_l+0x126>
 8011970:	9302      	str	r3, [sp, #8]
 8011972:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011974:	9301      	str	r3, [sp, #4]
 8011976:	ab1a      	add	r3, sp, #104	@ 0x68
 8011978:	9300      	str	r3, [sp, #0]
 801197a:	4a8f      	ldr	r2, [pc, #572]	@ (8011bb8 <_strtod_l+0x290>)
 801197c:	9805      	ldr	r0, [sp, #20]
 801197e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011980:	a919      	add	r1, sp, #100	@ 0x64
 8011982:	f003 fa8b 	bl	8014e9c <__gethex>
 8011986:	f010 060f 	ands.w	r6, r0, #15
 801198a:	4604      	mov	r4, r0
 801198c:	d005      	beq.n	801199a <_strtod_l+0x72>
 801198e:	2e06      	cmp	r6, #6
 8011990:	d128      	bne.n	80119e4 <_strtod_l+0xbc>
 8011992:	3501      	adds	r5, #1
 8011994:	2300      	movs	r3, #0
 8011996:	9519      	str	r5, [sp, #100]	@ 0x64
 8011998:	930e      	str	r3, [sp, #56]	@ 0x38
 801199a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801199c:	2b00      	cmp	r3, #0
 801199e:	f040 858e 	bne.w	80124be <_strtod_l+0xb96>
 80119a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80119a4:	b1cb      	cbz	r3, 80119da <_strtod_l+0xb2>
 80119a6:	4652      	mov	r2, sl
 80119a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80119ac:	ec43 2b10 	vmov	d0, r2, r3
 80119b0:	b01f      	add	sp, #124	@ 0x7c
 80119b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119b6:	2920      	cmp	r1, #32
 80119b8:	d1ce      	bne.n	8011958 <_strtod_l+0x30>
 80119ba:	3201      	adds	r2, #1
 80119bc:	e7c1      	b.n	8011942 <_strtod_l+0x1a>
 80119be:	292d      	cmp	r1, #45	@ 0x2d
 80119c0:	d1ca      	bne.n	8011958 <_strtod_l+0x30>
 80119c2:	2101      	movs	r1, #1
 80119c4:	910e      	str	r1, [sp, #56]	@ 0x38
 80119c6:	1c51      	adds	r1, r2, #1
 80119c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80119ca:	7852      	ldrb	r2, [r2, #1]
 80119cc:	2a00      	cmp	r2, #0
 80119ce:	d1c5      	bne.n	801195c <_strtod_l+0x34>
 80119d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80119d2:	9419      	str	r4, [sp, #100]	@ 0x64
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	f040 8570 	bne.w	80124ba <_strtod_l+0xb92>
 80119da:	4652      	mov	r2, sl
 80119dc:	465b      	mov	r3, fp
 80119de:	e7e5      	b.n	80119ac <_strtod_l+0x84>
 80119e0:	2100      	movs	r1, #0
 80119e2:	e7ef      	b.n	80119c4 <_strtod_l+0x9c>
 80119e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80119e6:	b13a      	cbz	r2, 80119f8 <_strtod_l+0xd0>
 80119e8:	2135      	movs	r1, #53	@ 0x35
 80119ea:	a81c      	add	r0, sp, #112	@ 0x70
 80119ec:	f004 f9d4 	bl	8015d98 <__copybits>
 80119f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80119f2:	9805      	ldr	r0, [sp, #20]
 80119f4:	f003 fdaa 	bl	801554c <_Bfree>
 80119f8:	3e01      	subs	r6, #1
 80119fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80119fc:	2e04      	cmp	r6, #4
 80119fe:	d806      	bhi.n	8011a0e <_strtod_l+0xe6>
 8011a00:	e8df f006 	tbb	[pc, r6]
 8011a04:	201d0314 	.word	0x201d0314
 8011a08:	14          	.byte	0x14
 8011a09:	00          	.byte	0x00
 8011a0a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8011a0e:	05e1      	lsls	r1, r4, #23
 8011a10:	bf48      	it	mi
 8011a12:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8011a16:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011a1a:	0d1b      	lsrs	r3, r3, #20
 8011a1c:	051b      	lsls	r3, r3, #20
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d1bb      	bne.n	801199a <_strtod_l+0x72>
 8011a22:	f002 fadd 	bl	8013fe0 <__errno>
 8011a26:	2322      	movs	r3, #34	@ 0x22
 8011a28:	6003      	str	r3, [r0, #0]
 8011a2a:	e7b6      	b.n	801199a <_strtod_l+0x72>
 8011a2c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8011a30:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8011a34:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8011a38:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011a3c:	e7e7      	b.n	8011a0e <_strtod_l+0xe6>
 8011a3e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8011bc0 <_strtod_l+0x298>
 8011a42:	e7e4      	b.n	8011a0e <_strtod_l+0xe6>
 8011a44:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8011a48:	f04f 3aff 	mov.w	sl, #4294967295
 8011a4c:	e7df      	b.n	8011a0e <_strtod_l+0xe6>
 8011a4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011a50:	1c5a      	adds	r2, r3, #1
 8011a52:	9219      	str	r2, [sp, #100]	@ 0x64
 8011a54:	785b      	ldrb	r3, [r3, #1]
 8011a56:	2b30      	cmp	r3, #48	@ 0x30
 8011a58:	d0f9      	beq.n	8011a4e <_strtod_l+0x126>
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d09d      	beq.n	801199a <_strtod_l+0x72>
 8011a5e:	2301      	movs	r3, #1
 8011a60:	2700      	movs	r7, #0
 8011a62:	9308      	str	r3, [sp, #32]
 8011a64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011a66:	930c      	str	r3, [sp, #48]	@ 0x30
 8011a68:	970b      	str	r7, [sp, #44]	@ 0x2c
 8011a6a:	46b9      	mov	r9, r7
 8011a6c:	220a      	movs	r2, #10
 8011a6e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8011a70:	7805      	ldrb	r5, [r0, #0]
 8011a72:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8011a76:	b2d9      	uxtb	r1, r3
 8011a78:	2909      	cmp	r1, #9
 8011a7a:	d928      	bls.n	8011ace <_strtod_l+0x1a6>
 8011a7c:	494f      	ldr	r1, [pc, #316]	@ (8011bbc <_strtod_l+0x294>)
 8011a7e:	2201      	movs	r2, #1
 8011a80:	f002 f98b 	bl	8013d9a <strncmp>
 8011a84:	2800      	cmp	r0, #0
 8011a86:	d032      	beq.n	8011aee <_strtod_l+0x1c6>
 8011a88:	2000      	movs	r0, #0
 8011a8a:	462a      	mov	r2, r5
 8011a8c:	900a      	str	r0, [sp, #40]	@ 0x28
 8011a8e:	464d      	mov	r5, r9
 8011a90:	4603      	mov	r3, r0
 8011a92:	2a65      	cmp	r2, #101	@ 0x65
 8011a94:	d001      	beq.n	8011a9a <_strtod_l+0x172>
 8011a96:	2a45      	cmp	r2, #69	@ 0x45
 8011a98:	d114      	bne.n	8011ac4 <_strtod_l+0x19c>
 8011a9a:	b91d      	cbnz	r5, 8011aa4 <_strtod_l+0x17c>
 8011a9c:	9a08      	ldr	r2, [sp, #32]
 8011a9e:	4302      	orrs	r2, r0
 8011aa0:	d096      	beq.n	80119d0 <_strtod_l+0xa8>
 8011aa2:	2500      	movs	r5, #0
 8011aa4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8011aa6:	1c62      	adds	r2, r4, #1
 8011aa8:	9219      	str	r2, [sp, #100]	@ 0x64
 8011aaa:	7862      	ldrb	r2, [r4, #1]
 8011aac:	2a2b      	cmp	r2, #43	@ 0x2b
 8011aae:	d07a      	beq.n	8011ba6 <_strtod_l+0x27e>
 8011ab0:	2a2d      	cmp	r2, #45	@ 0x2d
 8011ab2:	d07e      	beq.n	8011bb2 <_strtod_l+0x28a>
 8011ab4:	f04f 0c00 	mov.w	ip, #0
 8011ab8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8011abc:	2909      	cmp	r1, #9
 8011abe:	f240 8085 	bls.w	8011bcc <_strtod_l+0x2a4>
 8011ac2:	9419      	str	r4, [sp, #100]	@ 0x64
 8011ac4:	f04f 0800 	mov.w	r8, #0
 8011ac8:	e0a5      	b.n	8011c16 <_strtod_l+0x2ee>
 8011aca:	2300      	movs	r3, #0
 8011acc:	e7c8      	b.n	8011a60 <_strtod_l+0x138>
 8011ace:	f1b9 0f08 	cmp.w	r9, #8
 8011ad2:	bfd8      	it	le
 8011ad4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8011ad6:	f100 0001 	add.w	r0, r0, #1
 8011ada:	bfda      	itte	le
 8011adc:	fb02 3301 	mlale	r3, r2, r1, r3
 8011ae0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8011ae2:	fb02 3707 	mlagt	r7, r2, r7, r3
 8011ae6:	f109 0901 	add.w	r9, r9, #1
 8011aea:	9019      	str	r0, [sp, #100]	@ 0x64
 8011aec:	e7bf      	b.n	8011a6e <_strtod_l+0x146>
 8011aee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011af0:	1c5a      	adds	r2, r3, #1
 8011af2:	9219      	str	r2, [sp, #100]	@ 0x64
 8011af4:	785a      	ldrb	r2, [r3, #1]
 8011af6:	f1b9 0f00 	cmp.w	r9, #0
 8011afa:	d03b      	beq.n	8011b74 <_strtod_l+0x24c>
 8011afc:	900a      	str	r0, [sp, #40]	@ 0x28
 8011afe:	464d      	mov	r5, r9
 8011b00:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8011b04:	2b09      	cmp	r3, #9
 8011b06:	d912      	bls.n	8011b2e <_strtod_l+0x206>
 8011b08:	2301      	movs	r3, #1
 8011b0a:	e7c2      	b.n	8011a92 <_strtod_l+0x16a>
 8011b0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011b0e:	1c5a      	adds	r2, r3, #1
 8011b10:	9219      	str	r2, [sp, #100]	@ 0x64
 8011b12:	785a      	ldrb	r2, [r3, #1]
 8011b14:	3001      	adds	r0, #1
 8011b16:	2a30      	cmp	r2, #48	@ 0x30
 8011b18:	d0f8      	beq.n	8011b0c <_strtod_l+0x1e4>
 8011b1a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8011b1e:	2b08      	cmp	r3, #8
 8011b20:	f200 84d2 	bhi.w	80124c8 <_strtod_l+0xba0>
 8011b24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011b26:	900a      	str	r0, [sp, #40]	@ 0x28
 8011b28:	2000      	movs	r0, #0
 8011b2a:	930c      	str	r3, [sp, #48]	@ 0x30
 8011b2c:	4605      	mov	r5, r0
 8011b2e:	3a30      	subs	r2, #48	@ 0x30
 8011b30:	f100 0301 	add.w	r3, r0, #1
 8011b34:	d018      	beq.n	8011b68 <_strtod_l+0x240>
 8011b36:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011b38:	4419      	add	r1, r3
 8011b3a:	910a      	str	r1, [sp, #40]	@ 0x28
 8011b3c:	462e      	mov	r6, r5
 8011b3e:	f04f 0e0a 	mov.w	lr, #10
 8011b42:	1c71      	adds	r1, r6, #1
 8011b44:	eba1 0c05 	sub.w	ip, r1, r5
 8011b48:	4563      	cmp	r3, ip
 8011b4a:	dc15      	bgt.n	8011b78 <_strtod_l+0x250>
 8011b4c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8011b50:	182b      	adds	r3, r5, r0
 8011b52:	2b08      	cmp	r3, #8
 8011b54:	f105 0501 	add.w	r5, r5, #1
 8011b58:	4405      	add	r5, r0
 8011b5a:	dc1a      	bgt.n	8011b92 <_strtod_l+0x26a>
 8011b5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011b5e:	230a      	movs	r3, #10
 8011b60:	fb03 2301 	mla	r3, r3, r1, r2
 8011b64:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011b66:	2300      	movs	r3, #0
 8011b68:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011b6a:	1c51      	adds	r1, r2, #1
 8011b6c:	9119      	str	r1, [sp, #100]	@ 0x64
 8011b6e:	7852      	ldrb	r2, [r2, #1]
 8011b70:	4618      	mov	r0, r3
 8011b72:	e7c5      	b.n	8011b00 <_strtod_l+0x1d8>
 8011b74:	4648      	mov	r0, r9
 8011b76:	e7ce      	b.n	8011b16 <_strtod_l+0x1ee>
 8011b78:	2e08      	cmp	r6, #8
 8011b7a:	dc05      	bgt.n	8011b88 <_strtod_l+0x260>
 8011b7c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8011b7e:	fb0e f606 	mul.w	r6, lr, r6
 8011b82:	960b      	str	r6, [sp, #44]	@ 0x2c
 8011b84:	460e      	mov	r6, r1
 8011b86:	e7dc      	b.n	8011b42 <_strtod_l+0x21a>
 8011b88:	2910      	cmp	r1, #16
 8011b8a:	bfd8      	it	le
 8011b8c:	fb0e f707 	mulle.w	r7, lr, r7
 8011b90:	e7f8      	b.n	8011b84 <_strtod_l+0x25c>
 8011b92:	2b0f      	cmp	r3, #15
 8011b94:	bfdc      	itt	le
 8011b96:	230a      	movle	r3, #10
 8011b98:	fb03 2707 	mlale	r7, r3, r7, r2
 8011b9c:	e7e3      	b.n	8011b66 <_strtod_l+0x23e>
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	930a      	str	r3, [sp, #40]	@ 0x28
 8011ba2:	2301      	movs	r3, #1
 8011ba4:	e77a      	b.n	8011a9c <_strtod_l+0x174>
 8011ba6:	f04f 0c00 	mov.w	ip, #0
 8011baa:	1ca2      	adds	r2, r4, #2
 8011bac:	9219      	str	r2, [sp, #100]	@ 0x64
 8011bae:	78a2      	ldrb	r2, [r4, #2]
 8011bb0:	e782      	b.n	8011ab8 <_strtod_l+0x190>
 8011bb2:	f04f 0c01 	mov.w	ip, #1
 8011bb6:	e7f8      	b.n	8011baa <_strtod_l+0x282>
 8011bb8:	0801856c 	.word	0x0801856c
 8011bbc:	08018364 	.word	0x08018364
 8011bc0:	7ff00000 	.word	0x7ff00000
 8011bc4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011bc6:	1c51      	adds	r1, r2, #1
 8011bc8:	9119      	str	r1, [sp, #100]	@ 0x64
 8011bca:	7852      	ldrb	r2, [r2, #1]
 8011bcc:	2a30      	cmp	r2, #48	@ 0x30
 8011bce:	d0f9      	beq.n	8011bc4 <_strtod_l+0x29c>
 8011bd0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8011bd4:	2908      	cmp	r1, #8
 8011bd6:	f63f af75 	bhi.w	8011ac4 <_strtod_l+0x19c>
 8011bda:	3a30      	subs	r2, #48	@ 0x30
 8011bdc:	9209      	str	r2, [sp, #36]	@ 0x24
 8011bde:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011be0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8011be2:	f04f 080a 	mov.w	r8, #10
 8011be6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011be8:	1c56      	adds	r6, r2, #1
 8011bea:	9619      	str	r6, [sp, #100]	@ 0x64
 8011bec:	7852      	ldrb	r2, [r2, #1]
 8011bee:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8011bf2:	f1be 0f09 	cmp.w	lr, #9
 8011bf6:	d939      	bls.n	8011c6c <_strtod_l+0x344>
 8011bf8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011bfa:	1a76      	subs	r6, r6, r1
 8011bfc:	2e08      	cmp	r6, #8
 8011bfe:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8011c02:	dc03      	bgt.n	8011c0c <_strtod_l+0x2e4>
 8011c04:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011c06:	4588      	cmp	r8, r1
 8011c08:	bfa8      	it	ge
 8011c0a:	4688      	movge	r8, r1
 8011c0c:	f1bc 0f00 	cmp.w	ip, #0
 8011c10:	d001      	beq.n	8011c16 <_strtod_l+0x2ee>
 8011c12:	f1c8 0800 	rsb	r8, r8, #0
 8011c16:	2d00      	cmp	r5, #0
 8011c18:	d14e      	bne.n	8011cb8 <_strtod_l+0x390>
 8011c1a:	9908      	ldr	r1, [sp, #32]
 8011c1c:	4308      	orrs	r0, r1
 8011c1e:	f47f aebc 	bne.w	801199a <_strtod_l+0x72>
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	f47f aed4 	bne.w	80119d0 <_strtod_l+0xa8>
 8011c28:	2a69      	cmp	r2, #105	@ 0x69
 8011c2a:	d028      	beq.n	8011c7e <_strtod_l+0x356>
 8011c2c:	dc25      	bgt.n	8011c7a <_strtod_l+0x352>
 8011c2e:	2a49      	cmp	r2, #73	@ 0x49
 8011c30:	d025      	beq.n	8011c7e <_strtod_l+0x356>
 8011c32:	2a4e      	cmp	r2, #78	@ 0x4e
 8011c34:	f47f aecc 	bne.w	80119d0 <_strtod_l+0xa8>
 8011c38:	499a      	ldr	r1, [pc, #616]	@ (8011ea4 <_strtod_l+0x57c>)
 8011c3a:	a819      	add	r0, sp, #100	@ 0x64
 8011c3c:	f003 fb50 	bl	80152e0 <__match>
 8011c40:	2800      	cmp	r0, #0
 8011c42:	f43f aec5 	beq.w	80119d0 <_strtod_l+0xa8>
 8011c46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011c48:	781b      	ldrb	r3, [r3, #0]
 8011c4a:	2b28      	cmp	r3, #40	@ 0x28
 8011c4c:	d12e      	bne.n	8011cac <_strtod_l+0x384>
 8011c4e:	4996      	ldr	r1, [pc, #600]	@ (8011ea8 <_strtod_l+0x580>)
 8011c50:	aa1c      	add	r2, sp, #112	@ 0x70
 8011c52:	a819      	add	r0, sp, #100	@ 0x64
 8011c54:	f003 fb58 	bl	8015308 <__hexnan>
 8011c58:	2805      	cmp	r0, #5
 8011c5a:	d127      	bne.n	8011cac <_strtod_l+0x384>
 8011c5c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011c5e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8011c62:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8011c66:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8011c6a:	e696      	b.n	801199a <_strtod_l+0x72>
 8011c6c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011c6e:	fb08 2101 	mla	r1, r8, r1, r2
 8011c72:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8011c76:	9209      	str	r2, [sp, #36]	@ 0x24
 8011c78:	e7b5      	b.n	8011be6 <_strtod_l+0x2be>
 8011c7a:	2a6e      	cmp	r2, #110	@ 0x6e
 8011c7c:	e7da      	b.n	8011c34 <_strtod_l+0x30c>
 8011c7e:	498b      	ldr	r1, [pc, #556]	@ (8011eac <_strtod_l+0x584>)
 8011c80:	a819      	add	r0, sp, #100	@ 0x64
 8011c82:	f003 fb2d 	bl	80152e0 <__match>
 8011c86:	2800      	cmp	r0, #0
 8011c88:	f43f aea2 	beq.w	80119d0 <_strtod_l+0xa8>
 8011c8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011c8e:	4988      	ldr	r1, [pc, #544]	@ (8011eb0 <_strtod_l+0x588>)
 8011c90:	3b01      	subs	r3, #1
 8011c92:	a819      	add	r0, sp, #100	@ 0x64
 8011c94:	9319      	str	r3, [sp, #100]	@ 0x64
 8011c96:	f003 fb23 	bl	80152e0 <__match>
 8011c9a:	b910      	cbnz	r0, 8011ca2 <_strtod_l+0x37a>
 8011c9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011c9e:	3301      	adds	r3, #1
 8011ca0:	9319      	str	r3, [sp, #100]	@ 0x64
 8011ca2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8011ec0 <_strtod_l+0x598>
 8011ca6:	f04f 0a00 	mov.w	sl, #0
 8011caa:	e676      	b.n	801199a <_strtod_l+0x72>
 8011cac:	4881      	ldr	r0, [pc, #516]	@ (8011eb4 <_strtod_l+0x58c>)
 8011cae:	f002 f9d3 	bl	8014058 <nan>
 8011cb2:	ec5b ab10 	vmov	sl, fp, d0
 8011cb6:	e670      	b.n	801199a <_strtod_l+0x72>
 8011cb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011cba:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8011cbc:	eba8 0303 	sub.w	r3, r8, r3
 8011cc0:	f1b9 0f00 	cmp.w	r9, #0
 8011cc4:	bf08      	it	eq
 8011cc6:	46a9      	moveq	r9, r5
 8011cc8:	2d10      	cmp	r5, #16
 8011cca:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ccc:	462c      	mov	r4, r5
 8011cce:	bfa8      	it	ge
 8011cd0:	2410      	movge	r4, #16
 8011cd2:	f7ee fc47 	bl	8000564 <__aeabi_ui2d>
 8011cd6:	2d09      	cmp	r5, #9
 8011cd8:	4682      	mov	sl, r0
 8011cda:	468b      	mov	fp, r1
 8011cdc:	dc13      	bgt.n	8011d06 <_strtod_l+0x3de>
 8011cde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	f43f ae5a 	beq.w	801199a <_strtod_l+0x72>
 8011ce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ce8:	dd78      	ble.n	8011ddc <_strtod_l+0x4b4>
 8011cea:	2b16      	cmp	r3, #22
 8011cec:	dc5f      	bgt.n	8011dae <_strtod_l+0x486>
 8011cee:	4972      	ldr	r1, [pc, #456]	@ (8011eb8 <_strtod_l+0x590>)
 8011cf0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011cf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011cf8:	4652      	mov	r2, sl
 8011cfa:	465b      	mov	r3, fp
 8011cfc:	f7ee fcac 	bl	8000658 <__aeabi_dmul>
 8011d00:	4682      	mov	sl, r0
 8011d02:	468b      	mov	fp, r1
 8011d04:	e649      	b.n	801199a <_strtod_l+0x72>
 8011d06:	4b6c      	ldr	r3, [pc, #432]	@ (8011eb8 <_strtod_l+0x590>)
 8011d08:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011d0c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8011d10:	f7ee fca2 	bl	8000658 <__aeabi_dmul>
 8011d14:	4682      	mov	sl, r0
 8011d16:	4638      	mov	r0, r7
 8011d18:	468b      	mov	fp, r1
 8011d1a:	f7ee fc23 	bl	8000564 <__aeabi_ui2d>
 8011d1e:	4602      	mov	r2, r0
 8011d20:	460b      	mov	r3, r1
 8011d22:	4650      	mov	r0, sl
 8011d24:	4659      	mov	r1, fp
 8011d26:	f7ee fae1 	bl	80002ec <__adddf3>
 8011d2a:	2d0f      	cmp	r5, #15
 8011d2c:	4682      	mov	sl, r0
 8011d2e:	468b      	mov	fp, r1
 8011d30:	ddd5      	ble.n	8011cde <_strtod_l+0x3b6>
 8011d32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d34:	1b2c      	subs	r4, r5, r4
 8011d36:	441c      	add	r4, r3
 8011d38:	2c00      	cmp	r4, #0
 8011d3a:	f340 8093 	ble.w	8011e64 <_strtod_l+0x53c>
 8011d3e:	f014 030f 	ands.w	r3, r4, #15
 8011d42:	d00a      	beq.n	8011d5a <_strtod_l+0x432>
 8011d44:	495c      	ldr	r1, [pc, #368]	@ (8011eb8 <_strtod_l+0x590>)
 8011d46:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011d4a:	4652      	mov	r2, sl
 8011d4c:	465b      	mov	r3, fp
 8011d4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d52:	f7ee fc81 	bl	8000658 <__aeabi_dmul>
 8011d56:	4682      	mov	sl, r0
 8011d58:	468b      	mov	fp, r1
 8011d5a:	f034 040f 	bics.w	r4, r4, #15
 8011d5e:	d073      	beq.n	8011e48 <_strtod_l+0x520>
 8011d60:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8011d64:	dd49      	ble.n	8011dfa <_strtod_l+0x4d2>
 8011d66:	2400      	movs	r4, #0
 8011d68:	46a0      	mov	r8, r4
 8011d6a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011d6c:	46a1      	mov	r9, r4
 8011d6e:	9a05      	ldr	r2, [sp, #20]
 8011d70:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8011ec0 <_strtod_l+0x598>
 8011d74:	2322      	movs	r3, #34	@ 0x22
 8011d76:	6013      	str	r3, [r2, #0]
 8011d78:	f04f 0a00 	mov.w	sl, #0
 8011d7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	f43f ae0b 	beq.w	801199a <_strtod_l+0x72>
 8011d84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011d86:	9805      	ldr	r0, [sp, #20]
 8011d88:	f003 fbe0 	bl	801554c <_Bfree>
 8011d8c:	9805      	ldr	r0, [sp, #20]
 8011d8e:	4649      	mov	r1, r9
 8011d90:	f003 fbdc 	bl	801554c <_Bfree>
 8011d94:	9805      	ldr	r0, [sp, #20]
 8011d96:	4641      	mov	r1, r8
 8011d98:	f003 fbd8 	bl	801554c <_Bfree>
 8011d9c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011d9e:	9805      	ldr	r0, [sp, #20]
 8011da0:	f003 fbd4 	bl	801554c <_Bfree>
 8011da4:	9805      	ldr	r0, [sp, #20]
 8011da6:	4621      	mov	r1, r4
 8011da8:	f003 fbd0 	bl	801554c <_Bfree>
 8011dac:	e5f5      	b.n	801199a <_strtod_l+0x72>
 8011dae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011db0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8011db4:	4293      	cmp	r3, r2
 8011db6:	dbbc      	blt.n	8011d32 <_strtod_l+0x40a>
 8011db8:	4c3f      	ldr	r4, [pc, #252]	@ (8011eb8 <_strtod_l+0x590>)
 8011dba:	f1c5 050f 	rsb	r5, r5, #15
 8011dbe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011dc2:	4652      	mov	r2, sl
 8011dc4:	465b      	mov	r3, fp
 8011dc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011dca:	f7ee fc45 	bl	8000658 <__aeabi_dmul>
 8011dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011dd0:	1b5d      	subs	r5, r3, r5
 8011dd2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011dd6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011dda:	e78f      	b.n	8011cfc <_strtod_l+0x3d4>
 8011ddc:	3316      	adds	r3, #22
 8011dde:	dba8      	blt.n	8011d32 <_strtod_l+0x40a>
 8011de0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011de2:	eba3 0808 	sub.w	r8, r3, r8
 8011de6:	4b34      	ldr	r3, [pc, #208]	@ (8011eb8 <_strtod_l+0x590>)
 8011de8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8011dec:	e9d8 2300 	ldrd	r2, r3, [r8]
 8011df0:	4650      	mov	r0, sl
 8011df2:	4659      	mov	r1, fp
 8011df4:	f7ee fd5a 	bl	80008ac <__aeabi_ddiv>
 8011df8:	e782      	b.n	8011d00 <_strtod_l+0x3d8>
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	4f2f      	ldr	r7, [pc, #188]	@ (8011ebc <_strtod_l+0x594>)
 8011dfe:	1124      	asrs	r4, r4, #4
 8011e00:	4650      	mov	r0, sl
 8011e02:	4659      	mov	r1, fp
 8011e04:	461e      	mov	r6, r3
 8011e06:	2c01      	cmp	r4, #1
 8011e08:	dc21      	bgt.n	8011e4e <_strtod_l+0x526>
 8011e0a:	b10b      	cbz	r3, 8011e10 <_strtod_l+0x4e8>
 8011e0c:	4682      	mov	sl, r0
 8011e0e:	468b      	mov	fp, r1
 8011e10:	492a      	ldr	r1, [pc, #168]	@ (8011ebc <_strtod_l+0x594>)
 8011e12:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8011e16:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8011e1a:	4652      	mov	r2, sl
 8011e1c:	465b      	mov	r3, fp
 8011e1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e22:	f7ee fc19 	bl	8000658 <__aeabi_dmul>
 8011e26:	4b26      	ldr	r3, [pc, #152]	@ (8011ec0 <_strtod_l+0x598>)
 8011e28:	460a      	mov	r2, r1
 8011e2a:	400b      	ands	r3, r1
 8011e2c:	4925      	ldr	r1, [pc, #148]	@ (8011ec4 <_strtod_l+0x59c>)
 8011e2e:	428b      	cmp	r3, r1
 8011e30:	4682      	mov	sl, r0
 8011e32:	d898      	bhi.n	8011d66 <_strtod_l+0x43e>
 8011e34:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011e38:	428b      	cmp	r3, r1
 8011e3a:	bf86      	itte	hi
 8011e3c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8011ec8 <_strtod_l+0x5a0>
 8011e40:	f04f 3aff 	movhi.w	sl, #4294967295
 8011e44:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011e48:	2300      	movs	r3, #0
 8011e4a:	9308      	str	r3, [sp, #32]
 8011e4c:	e076      	b.n	8011f3c <_strtod_l+0x614>
 8011e4e:	07e2      	lsls	r2, r4, #31
 8011e50:	d504      	bpl.n	8011e5c <_strtod_l+0x534>
 8011e52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011e56:	f7ee fbff 	bl	8000658 <__aeabi_dmul>
 8011e5a:	2301      	movs	r3, #1
 8011e5c:	3601      	adds	r6, #1
 8011e5e:	1064      	asrs	r4, r4, #1
 8011e60:	3708      	adds	r7, #8
 8011e62:	e7d0      	b.n	8011e06 <_strtod_l+0x4de>
 8011e64:	d0f0      	beq.n	8011e48 <_strtod_l+0x520>
 8011e66:	4264      	negs	r4, r4
 8011e68:	f014 020f 	ands.w	r2, r4, #15
 8011e6c:	d00a      	beq.n	8011e84 <_strtod_l+0x55c>
 8011e6e:	4b12      	ldr	r3, [pc, #72]	@ (8011eb8 <_strtod_l+0x590>)
 8011e70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011e74:	4650      	mov	r0, sl
 8011e76:	4659      	mov	r1, fp
 8011e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e7c:	f7ee fd16 	bl	80008ac <__aeabi_ddiv>
 8011e80:	4682      	mov	sl, r0
 8011e82:	468b      	mov	fp, r1
 8011e84:	1124      	asrs	r4, r4, #4
 8011e86:	d0df      	beq.n	8011e48 <_strtod_l+0x520>
 8011e88:	2c1f      	cmp	r4, #31
 8011e8a:	dd1f      	ble.n	8011ecc <_strtod_l+0x5a4>
 8011e8c:	2400      	movs	r4, #0
 8011e8e:	46a0      	mov	r8, r4
 8011e90:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011e92:	46a1      	mov	r9, r4
 8011e94:	9a05      	ldr	r2, [sp, #20]
 8011e96:	2322      	movs	r3, #34	@ 0x22
 8011e98:	f04f 0a00 	mov.w	sl, #0
 8011e9c:	f04f 0b00 	mov.w	fp, #0
 8011ea0:	6013      	str	r3, [r2, #0]
 8011ea2:	e76b      	b.n	8011d7c <_strtod_l+0x454>
 8011ea4:	08018373 	.word	0x08018373
 8011ea8:	08018558 	.word	0x08018558
 8011eac:	0801836b 	.word	0x0801836b
 8011eb0:	0801841b 	.word	0x0801841b
 8011eb4:	08018363 	.word	0x08018363
 8011eb8:	080186e0 	.word	0x080186e0
 8011ebc:	080186b8 	.word	0x080186b8
 8011ec0:	7ff00000 	.word	0x7ff00000
 8011ec4:	7ca00000 	.word	0x7ca00000
 8011ec8:	7fefffff 	.word	0x7fefffff
 8011ecc:	f014 0310 	ands.w	r3, r4, #16
 8011ed0:	bf18      	it	ne
 8011ed2:	236a      	movne	r3, #106	@ 0x6a
 8011ed4:	4ea9      	ldr	r6, [pc, #676]	@ (801217c <_strtod_l+0x854>)
 8011ed6:	9308      	str	r3, [sp, #32]
 8011ed8:	4650      	mov	r0, sl
 8011eda:	4659      	mov	r1, fp
 8011edc:	2300      	movs	r3, #0
 8011ede:	07e7      	lsls	r7, r4, #31
 8011ee0:	d504      	bpl.n	8011eec <_strtod_l+0x5c4>
 8011ee2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011ee6:	f7ee fbb7 	bl	8000658 <__aeabi_dmul>
 8011eea:	2301      	movs	r3, #1
 8011eec:	1064      	asrs	r4, r4, #1
 8011eee:	f106 0608 	add.w	r6, r6, #8
 8011ef2:	d1f4      	bne.n	8011ede <_strtod_l+0x5b6>
 8011ef4:	b10b      	cbz	r3, 8011efa <_strtod_l+0x5d2>
 8011ef6:	4682      	mov	sl, r0
 8011ef8:	468b      	mov	fp, r1
 8011efa:	9b08      	ldr	r3, [sp, #32]
 8011efc:	b1b3      	cbz	r3, 8011f2c <_strtod_l+0x604>
 8011efe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011f02:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	4659      	mov	r1, fp
 8011f0a:	dd0f      	ble.n	8011f2c <_strtod_l+0x604>
 8011f0c:	2b1f      	cmp	r3, #31
 8011f0e:	dd56      	ble.n	8011fbe <_strtod_l+0x696>
 8011f10:	2b34      	cmp	r3, #52	@ 0x34
 8011f12:	bfde      	ittt	le
 8011f14:	f04f 33ff 	movle.w	r3, #4294967295
 8011f18:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8011f1c:	4093      	lslle	r3, r2
 8011f1e:	f04f 0a00 	mov.w	sl, #0
 8011f22:	bfcc      	ite	gt
 8011f24:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8011f28:	ea03 0b01 	andle.w	fp, r3, r1
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	2300      	movs	r3, #0
 8011f30:	4650      	mov	r0, sl
 8011f32:	4659      	mov	r1, fp
 8011f34:	f7ee fdf8 	bl	8000b28 <__aeabi_dcmpeq>
 8011f38:	2800      	cmp	r0, #0
 8011f3a:	d1a7      	bne.n	8011e8c <_strtod_l+0x564>
 8011f3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011f3e:	9300      	str	r3, [sp, #0]
 8011f40:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011f42:	9805      	ldr	r0, [sp, #20]
 8011f44:	462b      	mov	r3, r5
 8011f46:	464a      	mov	r2, r9
 8011f48:	f003 fb68 	bl	801561c <__s2b>
 8011f4c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011f4e:	2800      	cmp	r0, #0
 8011f50:	f43f af09 	beq.w	8011d66 <_strtod_l+0x43e>
 8011f54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011f56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011f58:	2a00      	cmp	r2, #0
 8011f5a:	eba3 0308 	sub.w	r3, r3, r8
 8011f5e:	bfa8      	it	ge
 8011f60:	2300      	movge	r3, #0
 8011f62:	9312      	str	r3, [sp, #72]	@ 0x48
 8011f64:	2400      	movs	r4, #0
 8011f66:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011f6a:	9316      	str	r3, [sp, #88]	@ 0x58
 8011f6c:	46a0      	mov	r8, r4
 8011f6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011f70:	9805      	ldr	r0, [sp, #20]
 8011f72:	6859      	ldr	r1, [r3, #4]
 8011f74:	f003 faaa 	bl	80154cc <_Balloc>
 8011f78:	4681      	mov	r9, r0
 8011f7a:	2800      	cmp	r0, #0
 8011f7c:	f43f aef7 	beq.w	8011d6e <_strtod_l+0x446>
 8011f80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011f82:	691a      	ldr	r2, [r3, #16]
 8011f84:	3202      	adds	r2, #2
 8011f86:	f103 010c 	add.w	r1, r3, #12
 8011f8a:	0092      	lsls	r2, r2, #2
 8011f8c:	300c      	adds	r0, #12
 8011f8e:	f002 f855 	bl	801403c <memcpy>
 8011f92:	ec4b ab10 	vmov	d0, sl, fp
 8011f96:	9805      	ldr	r0, [sp, #20]
 8011f98:	aa1c      	add	r2, sp, #112	@ 0x70
 8011f9a:	a91b      	add	r1, sp, #108	@ 0x6c
 8011f9c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8011fa0:	f003 fe70 	bl	8015c84 <__d2b>
 8011fa4:	901a      	str	r0, [sp, #104]	@ 0x68
 8011fa6:	2800      	cmp	r0, #0
 8011fa8:	f43f aee1 	beq.w	8011d6e <_strtod_l+0x446>
 8011fac:	9805      	ldr	r0, [sp, #20]
 8011fae:	2101      	movs	r1, #1
 8011fb0:	f003 fbca 	bl	8015748 <__i2b>
 8011fb4:	4680      	mov	r8, r0
 8011fb6:	b948      	cbnz	r0, 8011fcc <_strtod_l+0x6a4>
 8011fb8:	f04f 0800 	mov.w	r8, #0
 8011fbc:	e6d7      	b.n	8011d6e <_strtod_l+0x446>
 8011fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8011fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8011fc6:	ea03 0a0a 	and.w	sl, r3, sl
 8011fca:	e7af      	b.n	8011f2c <_strtod_l+0x604>
 8011fcc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8011fce:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011fd0:	2d00      	cmp	r5, #0
 8011fd2:	bfab      	itete	ge
 8011fd4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8011fd6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8011fd8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8011fda:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8011fdc:	bfac      	ite	ge
 8011fde:	18ef      	addge	r7, r5, r3
 8011fe0:	1b5e      	sublt	r6, r3, r5
 8011fe2:	9b08      	ldr	r3, [sp, #32]
 8011fe4:	1aed      	subs	r5, r5, r3
 8011fe6:	4415      	add	r5, r2
 8011fe8:	4b65      	ldr	r3, [pc, #404]	@ (8012180 <_strtod_l+0x858>)
 8011fea:	3d01      	subs	r5, #1
 8011fec:	429d      	cmp	r5, r3
 8011fee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011ff2:	da50      	bge.n	8012096 <_strtod_l+0x76e>
 8011ff4:	1b5b      	subs	r3, r3, r5
 8011ff6:	2b1f      	cmp	r3, #31
 8011ff8:	eba2 0203 	sub.w	r2, r2, r3
 8011ffc:	f04f 0101 	mov.w	r1, #1
 8012000:	dc3d      	bgt.n	801207e <_strtod_l+0x756>
 8012002:	fa01 f303 	lsl.w	r3, r1, r3
 8012006:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012008:	2300      	movs	r3, #0
 801200a:	9310      	str	r3, [sp, #64]	@ 0x40
 801200c:	18bd      	adds	r5, r7, r2
 801200e:	9b08      	ldr	r3, [sp, #32]
 8012010:	42af      	cmp	r7, r5
 8012012:	4416      	add	r6, r2
 8012014:	441e      	add	r6, r3
 8012016:	463b      	mov	r3, r7
 8012018:	bfa8      	it	ge
 801201a:	462b      	movge	r3, r5
 801201c:	42b3      	cmp	r3, r6
 801201e:	bfa8      	it	ge
 8012020:	4633      	movge	r3, r6
 8012022:	2b00      	cmp	r3, #0
 8012024:	bfc2      	ittt	gt
 8012026:	1aed      	subgt	r5, r5, r3
 8012028:	1af6      	subgt	r6, r6, r3
 801202a:	1aff      	subgt	r7, r7, r3
 801202c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801202e:	2b00      	cmp	r3, #0
 8012030:	dd16      	ble.n	8012060 <_strtod_l+0x738>
 8012032:	4641      	mov	r1, r8
 8012034:	9805      	ldr	r0, [sp, #20]
 8012036:	461a      	mov	r2, r3
 8012038:	f003 fc3e 	bl	80158b8 <__pow5mult>
 801203c:	4680      	mov	r8, r0
 801203e:	2800      	cmp	r0, #0
 8012040:	d0ba      	beq.n	8011fb8 <_strtod_l+0x690>
 8012042:	4601      	mov	r1, r0
 8012044:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012046:	9805      	ldr	r0, [sp, #20]
 8012048:	f003 fb94 	bl	8015774 <__multiply>
 801204c:	900a      	str	r0, [sp, #40]	@ 0x28
 801204e:	2800      	cmp	r0, #0
 8012050:	f43f ae8d 	beq.w	8011d6e <_strtod_l+0x446>
 8012054:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012056:	9805      	ldr	r0, [sp, #20]
 8012058:	f003 fa78 	bl	801554c <_Bfree>
 801205c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801205e:	931a      	str	r3, [sp, #104]	@ 0x68
 8012060:	2d00      	cmp	r5, #0
 8012062:	dc1d      	bgt.n	80120a0 <_strtod_l+0x778>
 8012064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012066:	2b00      	cmp	r3, #0
 8012068:	dd23      	ble.n	80120b2 <_strtod_l+0x78a>
 801206a:	4649      	mov	r1, r9
 801206c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801206e:	9805      	ldr	r0, [sp, #20]
 8012070:	f003 fc22 	bl	80158b8 <__pow5mult>
 8012074:	4681      	mov	r9, r0
 8012076:	b9e0      	cbnz	r0, 80120b2 <_strtod_l+0x78a>
 8012078:	f04f 0900 	mov.w	r9, #0
 801207c:	e677      	b.n	8011d6e <_strtod_l+0x446>
 801207e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8012082:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8012086:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801208a:	35e2      	adds	r5, #226	@ 0xe2
 801208c:	fa01 f305 	lsl.w	r3, r1, r5
 8012090:	9310      	str	r3, [sp, #64]	@ 0x40
 8012092:	9113      	str	r1, [sp, #76]	@ 0x4c
 8012094:	e7ba      	b.n	801200c <_strtod_l+0x6e4>
 8012096:	2300      	movs	r3, #0
 8012098:	9310      	str	r3, [sp, #64]	@ 0x40
 801209a:	2301      	movs	r3, #1
 801209c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801209e:	e7b5      	b.n	801200c <_strtod_l+0x6e4>
 80120a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80120a2:	9805      	ldr	r0, [sp, #20]
 80120a4:	462a      	mov	r2, r5
 80120a6:	f003 fc61 	bl	801596c <__lshift>
 80120aa:	901a      	str	r0, [sp, #104]	@ 0x68
 80120ac:	2800      	cmp	r0, #0
 80120ae:	d1d9      	bne.n	8012064 <_strtod_l+0x73c>
 80120b0:	e65d      	b.n	8011d6e <_strtod_l+0x446>
 80120b2:	2e00      	cmp	r6, #0
 80120b4:	dd07      	ble.n	80120c6 <_strtod_l+0x79e>
 80120b6:	4649      	mov	r1, r9
 80120b8:	9805      	ldr	r0, [sp, #20]
 80120ba:	4632      	mov	r2, r6
 80120bc:	f003 fc56 	bl	801596c <__lshift>
 80120c0:	4681      	mov	r9, r0
 80120c2:	2800      	cmp	r0, #0
 80120c4:	d0d8      	beq.n	8012078 <_strtod_l+0x750>
 80120c6:	2f00      	cmp	r7, #0
 80120c8:	dd08      	ble.n	80120dc <_strtod_l+0x7b4>
 80120ca:	4641      	mov	r1, r8
 80120cc:	9805      	ldr	r0, [sp, #20]
 80120ce:	463a      	mov	r2, r7
 80120d0:	f003 fc4c 	bl	801596c <__lshift>
 80120d4:	4680      	mov	r8, r0
 80120d6:	2800      	cmp	r0, #0
 80120d8:	f43f ae49 	beq.w	8011d6e <_strtod_l+0x446>
 80120dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80120de:	9805      	ldr	r0, [sp, #20]
 80120e0:	464a      	mov	r2, r9
 80120e2:	f003 fccb 	bl	8015a7c <__mdiff>
 80120e6:	4604      	mov	r4, r0
 80120e8:	2800      	cmp	r0, #0
 80120ea:	f43f ae40 	beq.w	8011d6e <_strtod_l+0x446>
 80120ee:	68c3      	ldr	r3, [r0, #12]
 80120f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80120f2:	2300      	movs	r3, #0
 80120f4:	60c3      	str	r3, [r0, #12]
 80120f6:	4641      	mov	r1, r8
 80120f8:	f003 fca4 	bl	8015a44 <__mcmp>
 80120fc:	2800      	cmp	r0, #0
 80120fe:	da45      	bge.n	801218c <_strtod_l+0x864>
 8012100:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012102:	ea53 030a 	orrs.w	r3, r3, sl
 8012106:	d16b      	bne.n	80121e0 <_strtod_l+0x8b8>
 8012108:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801210c:	2b00      	cmp	r3, #0
 801210e:	d167      	bne.n	80121e0 <_strtod_l+0x8b8>
 8012110:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012114:	0d1b      	lsrs	r3, r3, #20
 8012116:	051b      	lsls	r3, r3, #20
 8012118:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801211c:	d960      	bls.n	80121e0 <_strtod_l+0x8b8>
 801211e:	6963      	ldr	r3, [r4, #20]
 8012120:	b913      	cbnz	r3, 8012128 <_strtod_l+0x800>
 8012122:	6923      	ldr	r3, [r4, #16]
 8012124:	2b01      	cmp	r3, #1
 8012126:	dd5b      	ble.n	80121e0 <_strtod_l+0x8b8>
 8012128:	4621      	mov	r1, r4
 801212a:	2201      	movs	r2, #1
 801212c:	9805      	ldr	r0, [sp, #20]
 801212e:	f003 fc1d 	bl	801596c <__lshift>
 8012132:	4641      	mov	r1, r8
 8012134:	4604      	mov	r4, r0
 8012136:	f003 fc85 	bl	8015a44 <__mcmp>
 801213a:	2800      	cmp	r0, #0
 801213c:	dd50      	ble.n	80121e0 <_strtod_l+0x8b8>
 801213e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012142:	9a08      	ldr	r2, [sp, #32]
 8012144:	0d1b      	lsrs	r3, r3, #20
 8012146:	051b      	lsls	r3, r3, #20
 8012148:	2a00      	cmp	r2, #0
 801214a:	d06a      	beq.n	8012222 <_strtod_l+0x8fa>
 801214c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012150:	d867      	bhi.n	8012222 <_strtod_l+0x8fa>
 8012152:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8012156:	f67f ae9d 	bls.w	8011e94 <_strtod_l+0x56c>
 801215a:	4b0a      	ldr	r3, [pc, #40]	@ (8012184 <_strtod_l+0x85c>)
 801215c:	4650      	mov	r0, sl
 801215e:	4659      	mov	r1, fp
 8012160:	2200      	movs	r2, #0
 8012162:	f7ee fa79 	bl	8000658 <__aeabi_dmul>
 8012166:	4b08      	ldr	r3, [pc, #32]	@ (8012188 <_strtod_l+0x860>)
 8012168:	400b      	ands	r3, r1
 801216a:	4682      	mov	sl, r0
 801216c:	468b      	mov	fp, r1
 801216e:	2b00      	cmp	r3, #0
 8012170:	f47f ae08 	bne.w	8011d84 <_strtod_l+0x45c>
 8012174:	9a05      	ldr	r2, [sp, #20]
 8012176:	2322      	movs	r3, #34	@ 0x22
 8012178:	6013      	str	r3, [r2, #0]
 801217a:	e603      	b.n	8011d84 <_strtod_l+0x45c>
 801217c:	08018580 	.word	0x08018580
 8012180:	fffffc02 	.word	0xfffffc02
 8012184:	39500000 	.word	0x39500000
 8012188:	7ff00000 	.word	0x7ff00000
 801218c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8012190:	d165      	bne.n	801225e <_strtod_l+0x936>
 8012192:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012194:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012198:	b35a      	cbz	r2, 80121f2 <_strtod_l+0x8ca>
 801219a:	4a9f      	ldr	r2, [pc, #636]	@ (8012418 <_strtod_l+0xaf0>)
 801219c:	4293      	cmp	r3, r2
 801219e:	d12b      	bne.n	80121f8 <_strtod_l+0x8d0>
 80121a0:	9b08      	ldr	r3, [sp, #32]
 80121a2:	4651      	mov	r1, sl
 80121a4:	b303      	cbz	r3, 80121e8 <_strtod_l+0x8c0>
 80121a6:	4b9d      	ldr	r3, [pc, #628]	@ (801241c <_strtod_l+0xaf4>)
 80121a8:	465a      	mov	r2, fp
 80121aa:	4013      	ands	r3, r2
 80121ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80121b0:	f04f 32ff 	mov.w	r2, #4294967295
 80121b4:	d81b      	bhi.n	80121ee <_strtod_l+0x8c6>
 80121b6:	0d1b      	lsrs	r3, r3, #20
 80121b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80121bc:	fa02 f303 	lsl.w	r3, r2, r3
 80121c0:	4299      	cmp	r1, r3
 80121c2:	d119      	bne.n	80121f8 <_strtod_l+0x8d0>
 80121c4:	4b96      	ldr	r3, [pc, #600]	@ (8012420 <_strtod_l+0xaf8>)
 80121c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80121c8:	429a      	cmp	r2, r3
 80121ca:	d102      	bne.n	80121d2 <_strtod_l+0x8aa>
 80121cc:	3101      	adds	r1, #1
 80121ce:	f43f adce 	beq.w	8011d6e <_strtod_l+0x446>
 80121d2:	4b92      	ldr	r3, [pc, #584]	@ (801241c <_strtod_l+0xaf4>)
 80121d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80121d6:	401a      	ands	r2, r3
 80121d8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80121dc:	f04f 0a00 	mov.w	sl, #0
 80121e0:	9b08      	ldr	r3, [sp, #32]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d1b9      	bne.n	801215a <_strtod_l+0x832>
 80121e6:	e5cd      	b.n	8011d84 <_strtod_l+0x45c>
 80121e8:	f04f 33ff 	mov.w	r3, #4294967295
 80121ec:	e7e8      	b.n	80121c0 <_strtod_l+0x898>
 80121ee:	4613      	mov	r3, r2
 80121f0:	e7e6      	b.n	80121c0 <_strtod_l+0x898>
 80121f2:	ea53 030a 	orrs.w	r3, r3, sl
 80121f6:	d0a2      	beq.n	801213e <_strtod_l+0x816>
 80121f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80121fa:	b1db      	cbz	r3, 8012234 <_strtod_l+0x90c>
 80121fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80121fe:	4213      	tst	r3, r2
 8012200:	d0ee      	beq.n	80121e0 <_strtod_l+0x8b8>
 8012202:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012204:	9a08      	ldr	r2, [sp, #32]
 8012206:	4650      	mov	r0, sl
 8012208:	4659      	mov	r1, fp
 801220a:	b1bb      	cbz	r3, 801223c <_strtod_l+0x914>
 801220c:	f7ff fb6e 	bl	80118ec <sulp>
 8012210:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012214:	ec53 2b10 	vmov	r2, r3, d0
 8012218:	f7ee f868 	bl	80002ec <__adddf3>
 801221c:	4682      	mov	sl, r0
 801221e:	468b      	mov	fp, r1
 8012220:	e7de      	b.n	80121e0 <_strtod_l+0x8b8>
 8012222:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8012226:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801222a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801222e:	f04f 3aff 	mov.w	sl, #4294967295
 8012232:	e7d5      	b.n	80121e0 <_strtod_l+0x8b8>
 8012234:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012236:	ea13 0f0a 	tst.w	r3, sl
 801223a:	e7e1      	b.n	8012200 <_strtod_l+0x8d8>
 801223c:	f7ff fb56 	bl	80118ec <sulp>
 8012240:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012244:	ec53 2b10 	vmov	r2, r3, d0
 8012248:	f7ee f84e 	bl	80002e8 <__aeabi_dsub>
 801224c:	2200      	movs	r2, #0
 801224e:	2300      	movs	r3, #0
 8012250:	4682      	mov	sl, r0
 8012252:	468b      	mov	fp, r1
 8012254:	f7ee fc68 	bl	8000b28 <__aeabi_dcmpeq>
 8012258:	2800      	cmp	r0, #0
 801225a:	d0c1      	beq.n	80121e0 <_strtod_l+0x8b8>
 801225c:	e61a      	b.n	8011e94 <_strtod_l+0x56c>
 801225e:	4641      	mov	r1, r8
 8012260:	4620      	mov	r0, r4
 8012262:	f003 fd67 	bl	8015d34 <__ratio>
 8012266:	ec57 6b10 	vmov	r6, r7, d0
 801226a:	2200      	movs	r2, #0
 801226c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012270:	4630      	mov	r0, r6
 8012272:	4639      	mov	r1, r7
 8012274:	f7ee fc6c 	bl	8000b50 <__aeabi_dcmple>
 8012278:	2800      	cmp	r0, #0
 801227a:	d06f      	beq.n	801235c <_strtod_l+0xa34>
 801227c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801227e:	2b00      	cmp	r3, #0
 8012280:	d17a      	bne.n	8012378 <_strtod_l+0xa50>
 8012282:	f1ba 0f00 	cmp.w	sl, #0
 8012286:	d158      	bne.n	801233a <_strtod_l+0xa12>
 8012288:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801228a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801228e:	2b00      	cmp	r3, #0
 8012290:	d15a      	bne.n	8012348 <_strtod_l+0xa20>
 8012292:	4b64      	ldr	r3, [pc, #400]	@ (8012424 <_strtod_l+0xafc>)
 8012294:	2200      	movs	r2, #0
 8012296:	4630      	mov	r0, r6
 8012298:	4639      	mov	r1, r7
 801229a:	f7ee fc4f 	bl	8000b3c <__aeabi_dcmplt>
 801229e:	2800      	cmp	r0, #0
 80122a0:	d159      	bne.n	8012356 <_strtod_l+0xa2e>
 80122a2:	4630      	mov	r0, r6
 80122a4:	4639      	mov	r1, r7
 80122a6:	4b60      	ldr	r3, [pc, #384]	@ (8012428 <_strtod_l+0xb00>)
 80122a8:	2200      	movs	r2, #0
 80122aa:	f7ee f9d5 	bl	8000658 <__aeabi_dmul>
 80122ae:	4606      	mov	r6, r0
 80122b0:	460f      	mov	r7, r1
 80122b2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80122b6:	9606      	str	r6, [sp, #24]
 80122b8:	9307      	str	r3, [sp, #28]
 80122ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80122be:	4d57      	ldr	r5, [pc, #348]	@ (801241c <_strtod_l+0xaf4>)
 80122c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80122c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80122c6:	401d      	ands	r5, r3
 80122c8:	4b58      	ldr	r3, [pc, #352]	@ (801242c <_strtod_l+0xb04>)
 80122ca:	429d      	cmp	r5, r3
 80122cc:	f040 80b2 	bne.w	8012434 <_strtod_l+0xb0c>
 80122d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80122d2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80122d6:	ec4b ab10 	vmov	d0, sl, fp
 80122da:	f003 fc63 	bl	8015ba4 <__ulp>
 80122de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80122e2:	ec51 0b10 	vmov	r0, r1, d0
 80122e6:	f7ee f9b7 	bl	8000658 <__aeabi_dmul>
 80122ea:	4652      	mov	r2, sl
 80122ec:	465b      	mov	r3, fp
 80122ee:	f7ed fffd 	bl	80002ec <__adddf3>
 80122f2:	460b      	mov	r3, r1
 80122f4:	4949      	ldr	r1, [pc, #292]	@ (801241c <_strtod_l+0xaf4>)
 80122f6:	4a4e      	ldr	r2, [pc, #312]	@ (8012430 <_strtod_l+0xb08>)
 80122f8:	4019      	ands	r1, r3
 80122fa:	4291      	cmp	r1, r2
 80122fc:	4682      	mov	sl, r0
 80122fe:	d942      	bls.n	8012386 <_strtod_l+0xa5e>
 8012300:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012302:	4b47      	ldr	r3, [pc, #284]	@ (8012420 <_strtod_l+0xaf8>)
 8012304:	429a      	cmp	r2, r3
 8012306:	d103      	bne.n	8012310 <_strtod_l+0x9e8>
 8012308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801230a:	3301      	adds	r3, #1
 801230c:	f43f ad2f 	beq.w	8011d6e <_strtod_l+0x446>
 8012310:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8012420 <_strtod_l+0xaf8>
 8012314:	f04f 3aff 	mov.w	sl, #4294967295
 8012318:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801231a:	9805      	ldr	r0, [sp, #20]
 801231c:	f003 f916 	bl	801554c <_Bfree>
 8012320:	9805      	ldr	r0, [sp, #20]
 8012322:	4649      	mov	r1, r9
 8012324:	f003 f912 	bl	801554c <_Bfree>
 8012328:	9805      	ldr	r0, [sp, #20]
 801232a:	4641      	mov	r1, r8
 801232c:	f003 f90e 	bl	801554c <_Bfree>
 8012330:	9805      	ldr	r0, [sp, #20]
 8012332:	4621      	mov	r1, r4
 8012334:	f003 f90a 	bl	801554c <_Bfree>
 8012338:	e619      	b.n	8011f6e <_strtod_l+0x646>
 801233a:	f1ba 0f01 	cmp.w	sl, #1
 801233e:	d103      	bne.n	8012348 <_strtod_l+0xa20>
 8012340:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012342:	2b00      	cmp	r3, #0
 8012344:	f43f ada6 	beq.w	8011e94 <_strtod_l+0x56c>
 8012348:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80123f8 <_strtod_l+0xad0>
 801234c:	4f35      	ldr	r7, [pc, #212]	@ (8012424 <_strtod_l+0xafc>)
 801234e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012352:	2600      	movs	r6, #0
 8012354:	e7b1      	b.n	80122ba <_strtod_l+0x992>
 8012356:	4f34      	ldr	r7, [pc, #208]	@ (8012428 <_strtod_l+0xb00>)
 8012358:	2600      	movs	r6, #0
 801235a:	e7aa      	b.n	80122b2 <_strtod_l+0x98a>
 801235c:	4b32      	ldr	r3, [pc, #200]	@ (8012428 <_strtod_l+0xb00>)
 801235e:	4630      	mov	r0, r6
 8012360:	4639      	mov	r1, r7
 8012362:	2200      	movs	r2, #0
 8012364:	f7ee f978 	bl	8000658 <__aeabi_dmul>
 8012368:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801236a:	4606      	mov	r6, r0
 801236c:	460f      	mov	r7, r1
 801236e:	2b00      	cmp	r3, #0
 8012370:	d09f      	beq.n	80122b2 <_strtod_l+0x98a>
 8012372:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8012376:	e7a0      	b.n	80122ba <_strtod_l+0x992>
 8012378:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012400 <_strtod_l+0xad8>
 801237c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012380:	ec57 6b17 	vmov	r6, r7, d7
 8012384:	e799      	b.n	80122ba <_strtod_l+0x992>
 8012386:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801238a:	9b08      	ldr	r3, [sp, #32]
 801238c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8012390:	2b00      	cmp	r3, #0
 8012392:	d1c1      	bne.n	8012318 <_strtod_l+0x9f0>
 8012394:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012398:	0d1b      	lsrs	r3, r3, #20
 801239a:	051b      	lsls	r3, r3, #20
 801239c:	429d      	cmp	r5, r3
 801239e:	d1bb      	bne.n	8012318 <_strtod_l+0x9f0>
 80123a0:	4630      	mov	r0, r6
 80123a2:	4639      	mov	r1, r7
 80123a4:	f7ee fcb8 	bl	8000d18 <__aeabi_d2lz>
 80123a8:	f7ee f928 	bl	80005fc <__aeabi_l2d>
 80123ac:	4602      	mov	r2, r0
 80123ae:	460b      	mov	r3, r1
 80123b0:	4630      	mov	r0, r6
 80123b2:	4639      	mov	r1, r7
 80123b4:	f7ed ff98 	bl	80002e8 <__aeabi_dsub>
 80123b8:	460b      	mov	r3, r1
 80123ba:	4602      	mov	r2, r0
 80123bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80123c0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80123c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80123c6:	ea46 060a 	orr.w	r6, r6, sl
 80123ca:	431e      	orrs	r6, r3
 80123cc:	d06f      	beq.n	80124ae <_strtod_l+0xb86>
 80123ce:	a30e      	add	r3, pc, #56	@ (adr r3, 8012408 <_strtod_l+0xae0>)
 80123d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123d4:	f7ee fbb2 	bl	8000b3c <__aeabi_dcmplt>
 80123d8:	2800      	cmp	r0, #0
 80123da:	f47f acd3 	bne.w	8011d84 <_strtod_l+0x45c>
 80123de:	a30c      	add	r3, pc, #48	@ (adr r3, 8012410 <_strtod_l+0xae8>)
 80123e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80123e8:	f7ee fbc6 	bl	8000b78 <__aeabi_dcmpgt>
 80123ec:	2800      	cmp	r0, #0
 80123ee:	d093      	beq.n	8012318 <_strtod_l+0x9f0>
 80123f0:	e4c8      	b.n	8011d84 <_strtod_l+0x45c>
 80123f2:	bf00      	nop
 80123f4:	f3af 8000 	nop.w
 80123f8:	00000000 	.word	0x00000000
 80123fc:	bff00000 	.word	0xbff00000
 8012400:	00000000 	.word	0x00000000
 8012404:	3ff00000 	.word	0x3ff00000
 8012408:	94a03595 	.word	0x94a03595
 801240c:	3fdfffff 	.word	0x3fdfffff
 8012410:	35afe535 	.word	0x35afe535
 8012414:	3fe00000 	.word	0x3fe00000
 8012418:	000fffff 	.word	0x000fffff
 801241c:	7ff00000 	.word	0x7ff00000
 8012420:	7fefffff 	.word	0x7fefffff
 8012424:	3ff00000 	.word	0x3ff00000
 8012428:	3fe00000 	.word	0x3fe00000
 801242c:	7fe00000 	.word	0x7fe00000
 8012430:	7c9fffff 	.word	0x7c9fffff
 8012434:	9b08      	ldr	r3, [sp, #32]
 8012436:	b323      	cbz	r3, 8012482 <_strtod_l+0xb5a>
 8012438:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801243c:	d821      	bhi.n	8012482 <_strtod_l+0xb5a>
 801243e:	a328      	add	r3, pc, #160	@ (adr r3, 80124e0 <_strtod_l+0xbb8>)
 8012440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012444:	4630      	mov	r0, r6
 8012446:	4639      	mov	r1, r7
 8012448:	f7ee fb82 	bl	8000b50 <__aeabi_dcmple>
 801244c:	b1a0      	cbz	r0, 8012478 <_strtod_l+0xb50>
 801244e:	4639      	mov	r1, r7
 8012450:	4630      	mov	r0, r6
 8012452:	f7ee fbd9 	bl	8000c08 <__aeabi_d2uiz>
 8012456:	2801      	cmp	r0, #1
 8012458:	bf38      	it	cc
 801245a:	2001      	movcc	r0, #1
 801245c:	f7ee f882 	bl	8000564 <__aeabi_ui2d>
 8012460:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012462:	4606      	mov	r6, r0
 8012464:	460f      	mov	r7, r1
 8012466:	b9fb      	cbnz	r3, 80124a8 <_strtod_l+0xb80>
 8012468:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801246c:	9014      	str	r0, [sp, #80]	@ 0x50
 801246e:	9315      	str	r3, [sp, #84]	@ 0x54
 8012470:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8012474:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012478:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801247a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801247e:	1b5b      	subs	r3, r3, r5
 8012480:	9311      	str	r3, [sp, #68]	@ 0x44
 8012482:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012486:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801248a:	f003 fb8b 	bl	8015ba4 <__ulp>
 801248e:	4650      	mov	r0, sl
 8012490:	ec53 2b10 	vmov	r2, r3, d0
 8012494:	4659      	mov	r1, fp
 8012496:	f7ee f8df 	bl	8000658 <__aeabi_dmul>
 801249a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801249e:	f7ed ff25 	bl	80002ec <__adddf3>
 80124a2:	4682      	mov	sl, r0
 80124a4:	468b      	mov	fp, r1
 80124a6:	e770      	b.n	801238a <_strtod_l+0xa62>
 80124a8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80124ac:	e7e0      	b.n	8012470 <_strtod_l+0xb48>
 80124ae:	a30e      	add	r3, pc, #56	@ (adr r3, 80124e8 <_strtod_l+0xbc0>)
 80124b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124b4:	f7ee fb42 	bl	8000b3c <__aeabi_dcmplt>
 80124b8:	e798      	b.n	80123ec <_strtod_l+0xac4>
 80124ba:	2300      	movs	r3, #0
 80124bc:	930e      	str	r3, [sp, #56]	@ 0x38
 80124be:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80124c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80124c2:	6013      	str	r3, [r2, #0]
 80124c4:	f7ff ba6d 	b.w	80119a2 <_strtod_l+0x7a>
 80124c8:	2a65      	cmp	r2, #101	@ 0x65
 80124ca:	f43f ab68 	beq.w	8011b9e <_strtod_l+0x276>
 80124ce:	2a45      	cmp	r2, #69	@ 0x45
 80124d0:	f43f ab65 	beq.w	8011b9e <_strtod_l+0x276>
 80124d4:	2301      	movs	r3, #1
 80124d6:	f7ff bba0 	b.w	8011c1a <_strtod_l+0x2f2>
 80124da:	bf00      	nop
 80124dc:	f3af 8000 	nop.w
 80124e0:	ffc00000 	.word	0xffc00000
 80124e4:	41dfffff 	.word	0x41dfffff
 80124e8:	94a03595 	.word	0x94a03595
 80124ec:	3fcfffff 	.word	0x3fcfffff

080124f0 <_strtod_r>:
 80124f0:	4b01      	ldr	r3, [pc, #4]	@ (80124f8 <_strtod_r+0x8>)
 80124f2:	f7ff ba19 	b.w	8011928 <_strtod_l>
 80124f6:	bf00      	nop
 80124f8:	20000068 	.word	0x20000068

080124fc <strtod>:
 80124fc:	460a      	mov	r2, r1
 80124fe:	4601      	mov	r1, r0
 8012500:	4802      	ldr	r0, [pc, #8]	@ (801250c <strtod+0x10>)
 8012502:	4b03      	ldr	r3, [pc, #12]	@ (8012510 <strtod+0x14>)
 8012504:	6800      	ldr	r0, [r0, #0]
 8012506:	f7ff ba0f 	b.w	8011928 <_strtod_l>
 801250a:	bf00      	nop
 801250c:	200001d4 	.word	0x200001d4
 8012510:	20000068 	.word	0x20000068

08012514 <_strtol_l.isra.0>:
 8012514:	2b24      	cmp	r3, #36	@ 0x24
 8012516:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801251a:	4686      	mov	lr, r0
 801251c:	4690      	mov	r8, r2
 801251e:	d801      	bhi.n	8012524 <_strtol_l.isra.0+0x10>
 8012520:	2b01      	cmp	r3, #1
 8012522:	d106      	bne.n	8012532 <_strtol_l.isra.0+0x1e>
 8012524:	f001 fd5c 	bl	8013fe0 <__errno>
 8012528:	2316      	movs	r3, #22
 801252a:	6003      	str	r3, [r0, #0]
 801252c:	2000      	movs	r0, #0
 801252e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012532:	4834      	ldr	r0, [pc, #208]	@ (8012604 <_strtol_l.isra.0+0xf0>)
 8012534:	460d      	mov	r5, r1
 8012536:	462a      	mov	r2, r5
 8012538:	f815 4b01 	ldrb.w	r4, [r5], #1
 801253c:	5d06      	ldrb	r6, [r0, r4]
 801253e:	f016 0608 	ands.w	r6, r6, #8
 8012542:	d1f8      	bne.n	8012536 <_strtol_l.isra.0+0x22>
 8012544:	2c2d      	cmp	r4, #45	@ 0x2d
 8012546:	d110      	bne.n	801256a <_strtol_l.isra.0+0x56>
 8012548:	782c      	ldrb	r4, [r5, #0]
 801254a:	2601      	movs	r6, #1
 801254c:	1c95      	adds	r5, r2, #2
 801254e:	f033 0210 	bics.w	r2, r3, #16
 8012552:	d115      	bne.n	8012580 <_strtol_l.isra.0+0x6c>
 8012554:	2c30      	cmp	r4, #48	@ 0x30
 8012556:	d10d      	bne.n	8012574 <_strtol_l.isra.0+0x60>
 8012558:	782a      	ldrb	r2, [r5, #0]
 801255a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801255e:	2a58      	cmp	r2, #88	@ 0x58
 8012560:	d108      	bne.n	8012574 <_strtol_l.isra.0+0x60>
 8012562:	786c      	ldrb	r4, [r5, #1]
 8012564:	3502      	adds	r5, #2
 8012566:	2310      	movs	r3, #16
 8012568:	e00a      	b.n	8012580 <_strtol_l.isra.0+0x6c>
 801256a:	2c2b      	cmp	r4, #43	@ 0x2b
 801256c:	bf04      	itt	eq
 801256e:	782c      	ldrbeq	r4, [r5, #0]
 8012570:	1c95      	addeq	r5, r2, #2
 8012572:	e7ec      	b.n	801254e <_strtol_l.isra.0+0x3a>
 8012574:	2b00      	cmp	r3, #0
 8012576:	d1f6      	bne.n	8012566 <_strtol_l.isra.0+0x52>
 8012578:	2c30      	cmp	r4, #48	@ 0x30
 801257a:	bf14      	ite	ne
 801257c:	230a      	movne	r3, #10
 801257e:	2308      	moveq	r3, #8
 8012580:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012584:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012588:	2200      	movs	r2, #0
 801258a:	fbbc f9f3 	udiv	r9, ip, r3
 801258e:	4610      	mov	r0, r2
 8012590:	fb03 ca19 	mls	sl, r3, r9, ip
 8012594:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8012598:	2f09      	cmp	r7, #9
 801259a:	d80f      	bhi.n	80125bc <_strtol_l.isra.0+0xa8>
 801259c:	463c      	mov	r4, r7
 801259e:	42a3      	cmp	r3, r4
 80125a0:	dd1b      	ble.n	80125da <_strtol_l.isra.0+0xc6>
 80125a2:	1c57      	adds	r7, r2, #1
 80125a4:	d007      	beq.n	80125b6 <_strtol_l.isra.0+0xa2>
 80125a6:	4581      	cmp	r9, r0
 80125a8:	d314      	bcc.n	80125d4 <_strtol_l.isra.0+0xc0>
 80125aa:	d101      	bne.n	80125b0 <_strtol_l.isra.0+0x9c>
 80125ac:	45a2      	cmp	sl, r4
 80125ae:	db11      	blt.n	80125d4 <_strtol_l.isra.0+0xc0>
 80125b0:	fb00 4003 	mla	r0, r0, r3, r4
 80125b4:	2201      	movs	r2, #1
 80125b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80125ba:	e7eb      	b.n	8012594 <_strtol_l.isra.0+0x80>
 80125bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80125c0:	2f19      	cmp	r7, #25
 80125c2:	d801      	bhi.n	80125c8 <_strtol_l.isra.0+0xb4>
 80125c4:	3c37      	subs	r4, #55	@ 0x37
 80125c6:	e7ea      	b.n	801259e <_strtol_l.isra.0+0x8a>
 80125c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80125cc:	2f19      	cmp	r7, #25
 80125ce:	d804      	bhi.n	80125da <_strtol_l.isra.0+0xc6>
 80125d0:	3c57      	subs	r4, #87	@ 0x57
 80125d2:	e7e4      	b.n	801259e <_strtol_l.isra.0+0x8a>
 80125d4:	f04f 32ff 	mov.w	r2, #4294967295
 80125d8:	e7ed      	b.n	80125b6 <_strtol_l.isra.0+0xa2>
 80125da:	1c53      	adds	r3, r2, #1
 80125dc:	d108      	bne.n	80125f0 <_strtol_l.isra.0+0xdc>
 80125de:	2322      	movs	r3, #34	@ 0x22
 80125e0:	f8ce 3000 	str.w	r3, [lr]
 80125e4:	4660      	mov	r0, ip
 80125e6:	f1b8 0f00 	cmp.w	r8, #0
 80125ea:	d0a0      	beq.n	801252e <_strtol_l.isra.0+0x1a>
 80125ec:	1e69      	subs	r1, r5, #1
 80125ee:	e006      	b.n	80125fe <_strtol_l.isra.0+0xea>
 80125f0:	b106      	cbz	r6, 80125f4 <_strtol_l.isra.0+0xe0>
 80125f2:	4240      	negs	r0, r0
 80125f4:	f1b8 0f00 	cmp.w	r8, #0
 80125f8:	d099      	beq.n	801252e <_strtol_l.isra.0+0x1a>
 80125fa:	2a00      	cmp	r2, #0
 80125fc:	d1f6      	bne.n	80125ec <_strtol_l.isra.0+0xd8>
 80125fe:	f8c8 1000 	str.w	r1, [r8]
 8012602:	e794      	b.n	801252e <_strtol_l.isra.0+0x1a>
 8012604:	080185a9 	.word	0x080185a9

08012608 <_strtol_r>:
 8012608:	f7ff bf84 	b.w	8012514 <_strtol_l.isra.0>

0801260c <strtol>:
 801260c:	4613      	mov	r3, r2
 801260e:	460a      	mov	r2, r1
 8012610:	4601      	mov	r1, r0
 8012612:	4802      	ldr	r0, [pc, #8]	@ (801261c <strtol+0x10>)
 8012614:	6800      	ldr	r0, [r0, #0]
 8012616:	f7ff bf7d 	b.w	8012514 <_strtol_l.isra.0>
 801261a:	bf00      	nop
 801261c:	200001d4 	.word	0x200001d4

08012620 <setenv>:
 8012620:	4613      	mov	r3, r2
 8012622:	460a      	mov	r2, r1
 8012624:	4601      	mov	r1, r0
 8012626:	4802      	ldr	r0, [pc, #8]	@ (8012630 <setenv+0x10>)
 8012628:	6800      	ldr	r0, [r0, #0]
 801262a:	f000 b803 	b.w	8012634 <_setenv_r>
 801262e:	bf00      	nop
 8012630:	200001d4 	.word	0x200001d4

08012634 <_setenv_r>:
 8012634:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012638:	460e      	mov	r6, r1
 801263a:	4605      	mov	r5, r0
 801263c:	213d      	movs	r1, #61	@ 0x3d
 801263e:	4630      	mov	r0, r6
 8012640:	4617      	mov	r7, r2
 8012642:	4698      	mov	r8, r3
 8012644:	f001 fb9c 	bl	8013d80 <strchr>
 8012648:	b130      	cbz	r0, 8012658 <_setenv_r+0x24>
 801264a:	f001 fcc9 	bl	8013fe0 <__errno>
 801264e:	2316      	movs	r3, #22
 8012650:	6003      	str	r3, [r0, #0]
 8012652:	f04f 30ff 	mov.w	r0, #4294967295
 8012656:	e014      	b.n	8012682 <_setenv_r+0x4e>
 8012658:	4628      	mov	r0, r5
 801265a:	f7f3 fe7d 	bl	8006358 <__env_lock>
 801265e:	4638      	mov	r0, r7
 8012660:	f7ed fe36 	bl	80002d0 <strlen>
 8012664:	aa01      	add	r2, sp, #4
 8012666:	4681      	mov	r9, r0
 8012668:	4631      	mov	r1, r6
 801266a:	4628      	mov	r0, r5
 801266c:	f7ff f846 	bl	80116fc <_findenv_r>
 8012670:	4604      	mov	r4, r0
 8012672:	b1a8      	cbz	r0, 80126a0 <_setenv_r+0x6c>
 8012674:	f1b8 0f00 	cmp.w	r8, #0
 8012678:	d106      	bne.n	8012688 <_setenv_r+0x54>
 801267a:	4628      	mov	r0, r5
 801267c:	f7f3 fea4 	bl	80063c8 <__env_unlock>
 8012680:	2000      	movs	r0, #0
 8012682:	b003      	add	sp, #12
 8012684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012688:	f7ed fe22 	bl	80002d0 <strlen>
 801268c:	4581      	cmp	r9, r0
 801268e:	d83a      	bhi.n	8012706 <_setenv_r+0xd2>
 8012690:	3c01      	subs	r4, #1
 8012692:	f817 3b01 	ldrb.w	r3, [r7], #1
 8012696:	f804 3f01 	strb.w	r3, [r4, #1]!
 801269a:	2b00      	cmp	r3, #0
 801269c:	d1f9      	bne.n	8012692 <_setenv_r+0x5e>
 801269e:	e7ec      	b.n	801267a <_setenv_r+0x46>
 80126a0:	f8df a0bc 	ldr.w	sl, [pc, #188]	@ 8012760 <_setenv_r+0x12c>
 80126a4:	f8da 1000 	ldr.w	r1, [sl]
 80126a8:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
 80126ac:	b98b      	cbnz	r3, 80126d2 <_setenv_r+0x9e>
 80126ae:	4b2b      	ldr	r3, [pc, #172]	@ (801275c <_setenv_r+0x128>)
 80126b0:	681a      	ldr	r2, [r3, #0]
 80126b2:	f104 0802 	add.w	r8, r4, #2
 80126b6:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80126ba:	b162      	cbz	r2, 80126d6 <_setenv_r+0xa2>
 80126bc:	4642      	mov	r2, r8
 80126be:	4628      	mov	r0, r5
 80126c0:	f003 fbae 	bl	8015e20 <_realloc_r>
 80126c4:	f8ca 0000 	str.w	r0, [sl]
 80126c8:	b9b0      	cbnz	r0, 80126f8 <_setenv_r+0xc4>
 80126ca:	4628      	mov	r0, r5
 80126cc:	f7f3 fe7c 	bl	80063c8 <__env_unlock>
 80126d0:	e7bf      	b.n	8012652 <_setenv_r+0x1e>
 80126d2:	3401      	adds	r4, #1
 80126d4:	e7e8      	b.n	80126a8 <_setenv_r+0x74>
 80126d6:	2201      	movs	r2, #1
 80126d8:	4641      	mov	r1, r8
 80126da:	4628      	mov	r0, r5
 80126dc:	601a      	str	r2, [r3, #0]
 80126de:	f7ff f87b 	bl	80117d8 <_malloc_r>
 80126e2:	4683      	mov	fp, r0
 80126e4:	2800      	cmp	r0, #0
 80126e6:	d0f0      	beq.n	80126ca <_setenv_r+0x96>
 80126e8:	f8da 1000 	ldr.w	r1, [sl]
 80126ec:	f1a8 0208 	sub.w	r2, r8, #8
 80126f0:	f001 fca4 	bl	801403c <memcpy>
 80126f4:	f8ca b000 	str.w	fp, [sl]
 80126f8:	f8da 3000 	ldr.w	r3, [sl]
 80126fc:	4443      	add	r3, r8
 80126fe:	2200      	movs	r2, #0
 8012700:	f843 2c04 	str.w	r2, [r3, #-4]
 8012704:	9401      	str	r4, [sp, #4]
 8012706:	4633      	mov	r3, r6
 8012708:	4619      	mov	r1, r3
 801270a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801270e:	b10a      	cbz	r2, 8012714 <_setenv_r+0xe0>
 8012710:	2a3d      	cmp	r2, #61	@ 0x3d
 8012712:	d1f9      	bne.n	8012708 <_setenv_r+0xd4>
 8012714:	1b89      	subs	r1, r1, r6
 8012716:	4c12      	ldr	r4, [pc, #72]	@ (8012760 <_setenv_r+0x12c>)
 8012718:	f8dd a004 	ldr.w	sl, [sp, #4]
 801271c:	f8d4 8000 	ldr.w	r8, [r4]
 8012720:	4449      	add	r1, r9
 8012722:	3102      	adds	r1, #2
 8012724:	4628      	mov	r0, r5
 8012726:	f7ff f857 	bl	80117d8 <_malloc_r>
 801272a:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 801272e:	2800      	cmp	r0, #0
 8012730:	d0cb      	beq.n	80126ca <_setenv_r+0x96>
 8012732:	6823      	ldr	r3, [r4, #0]
 8012734:	9a01      	ldr	r2, [sp, #4]
 8012736:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801273a:	f816 1b01 	ldrb.w	r1, [r6], #1
 801273e:	7011      	strb	r1, [r2, #0]
 8012740:	4613      	mov	r3, r2
 8012742:	3201      	adds	r2, #1
 8012744:	b109      	cbz	r1, 801274a <_setenv_r+0x116>
 8012746:	293d      	cmp	r1, #61	@ 0x3d
 8012748:	d1f7      	bne.n	801273a <_setenv_r+0x106>
 801274a:	223d      	movs	r2, #61	@ 0x3d
 801274c:	701a      	strb	r2, [r3, #0]
 801274e:	f817 2b01 	ldrb.w	r2, [r7], #1
 8012752:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012756:	2a00      	cmp	r2, #0
 8012758:	d1f9      	bne.n	801274e <_setenv_r+0x11a>
 801275a:	e78e      	b.n	801267a <_setenv_r+0x46>
 801275c:	20000650 	.word	0x20000650
 8012760:	20000044 	.word	0x20000044

08012764 <__cvt>:
 8012764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012768:	ec57 6b10 	vmov	r6, r7, d0
 801276c:	2f00      	cmp	r7, #0
 801276e:	460c      	mov	r4, r1
 8012770:	4619      	mov	r1, r3
 8012772:	463b      	mov	r3, r7
 8012774:	bfbb      	ittet	lt
 8012776:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801277a:	461f      	movlt	r7, r3
 801277c:	2300      	movge	r3, #0
 801277e:	232d      	movlt	r3, #45	@ 0x2d
 8012780:	700b      	strb	r3, [r1, #0]
 8012782:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012784:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8012788:	4691      	mov	r9, r2
 801278a:	f023 0820 	bic.w	r8, r3, #32
 801278e:	bfbc      	itt	lt
 8012790:	4632      	movlt	r2, r6
 8012792:	4616      	movlt	r6, r2
 8012794:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012798:	d005      	beq.n	80127a6 <__cvt+0x42>
 801279a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801279e:	d100      	bne.n	80127a2 <__cvt+0x3e>
 80127a0:	3401      	adds	r4, #1
 80127a2:	2102      	movs	r1, #2
 80127a4:	e000      	b.n	80127a8 <__cvt+0x44>
 80127a6:	2103      	movs	r1, #3
 80127a8:	ab03      	add	r3, sp, #12
 80127aa:	9301      	str	r3, [sp, #4]
 80127ac:	ab02      	add	r3, sp, #8
 80127ae:	9300      	str	r3, [sp, #0]
 80127b0:	ec47 6b10 	vmov	d0, r6, r7
 80127b4:	4653      	mov	r3, sl
 80127b6:	4622      	mov	r2, r4
 80127b8:	f001 fcee 	bl	8014198 <_dtoa_r>
 80127bc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80127c0:	4605      	mov	r5, r0
 80127c2:	d119      	bne.n	80127f8 <__cvt+0x94>
 80127c4:	f019 0f01 	tst.w	r9, #1
 80127c8:	d00e      	beq.n	80127e8 <__cvt+0x84>
 80127ca:	eb00 0904 	add.w	r9, r0, r4
 80127ce:	2200      	movs	r2, #0
 80127d0:	2300      	movs	r3, #0
 80127d2:	4630      	mov	r0, r6
 80127d4:	4639      	mov	r1, r7
 80127d6:	f7ee f9a7 	bl	8000b28 <__aeabi_dcmpeq>
 80127da:	b108      	cbz	r0, 80127e0 <__cvt+0x7c>
 80127dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80127e0:	2230      	movs	r2, #48	@ 0x30
 80127e2:	9b03      	ldr	r3, [sp, #12]
 80127e4:	454b      	cmp	r3, r9
 80127e6:	d31e      	bcc.n	8012826 <__cvt+0xc2>
 80127e8:	9b03      	ldr	r3, [sp, #12]
 80127ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80127ec:	1b5b      	subs	r3, r3, r5
 80127ee:	4628      	mov	r0, r5
 80127f0:	6013      	str	r3, [r2, #0]
 80127f2:	b004      	add	sp, #16
 80127f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80127fc:	eb00 0904 	add.w	r9, r0, r4
 8012800:	d1e5      	bne.n	80127ce <__cvt+0x6a>
 8012802:	7803      	ldrb	r3, [r0, #0]
 8012804:	2b30      	cmp	r3, #48	@ 0x30
 8012806:	d10a      	bne.n	801281e <__cvt+0xba>
 8012808:	2200      	movs	r2, #0
 801280a:	2300      	movs	r3, #0
 801280c:	4630      	mov	r0, r6
 801280e:	4639      	mov	r1, r7
 8012810:	f7ee f98a 	bl	8000b28 <__aeabi_dcmpeq>
 8012814:	b918      	cbnz	r0, 801281e <__cvt+0xba>
 8012816:	f1c4 0401 	rsb	r4, r4, #1
 801281a:	f8ca 4000 	str.w	r4, [sl]
 801281e:	f8da 3000 	ldr.w	r3, [sl]
 8012822:	4499      	add	r9, r3
 8012824:	e7d3      	b.n	80127ce <__cvt+0x6a>
 8012826:	1c59      	adds	r1, r3, #1
 8012828:	9103      	str	r1, [sp, #12]
 801282a:	701a      	strb	r2, [r3, #0]
 801282c:	e7d9      	b.n	80127e2 <__cvt+0x7e>

0801282e <__exponent>:
 801282e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012830:	2900      	cmp	r1, #0
 8012832:	bfba      	itte	lt
 8012834:	4249      	neglt	r1, r1
 8012836:	232d      	movlt	r3, #45	@ 0x2d
 8012838:	232b      	movge	r3, #43	@ 0x2b
 801283a:	2909      	cmp	r1, #9
 801283c:	7002      	strb	r2, [r0, #0]
 801283e:	7043      	strb	r3, [r0, #1]
 8012840:	dd29      	ble.n	8012896 <__exponent+0x68>
 8012842:	f10d 0307 	add.w	r3, sp, #7
 8012846:	461d      	mov	r5, r3
 8012848:	270a      	movs	r7, #10
 801284a:	461a      	mov	r2, r3
 801284c:	fbb1 f6f7 	udiv	r6, r1, r7
 8012850:	fb07 1416 	mls	r4, r7, r6, r1
 8012854:	3430      	adds	r4, #48	@ 0x30
 8012856:	f802 4c01 	strb.w	r4, [r2, #-1]
 801285a:	460c      	mov	r4, r1
 801285c:	2c63      	cmp	r4, #99	@ 0x63
 801285e:	f103 33ff 	add.w	r3, r3, #4294967295
 8012862:	4631      	mov	r1, r6
 8012864:	dcf1      	bgt.n	801284a <__exponent+0x1c>
 8012866:	3130      	adds	r1, #48	@ 0x30
 8012868:	1e94      	subs	r4, r2, #2
 801286a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801286e:	1c41      	adds	r1, r0, #1
 8012870:	4623      	mov	r3, r4
 8012872:	42ab      	cmp	r3, r5
 8012874:	d30a      	bcc.n	801288c <__exponent+0x5e>
 8012876:	f10d 0309 	add.w	r3, sp, #9
 801287a:	1a9b      	subs	r3, r3, r2
 801287c:	42ac      	cmp	r4, r5
 801287e:	bf88      	it	hi
 8012880:	2300      	movhi	r3, #0
 8012882:	3302      	adds	r3, #2
 8012884:	4403      	add	r3, r0
 8012886:	1a18      	subs	r0, r3, r0
 8012888:	b003      	add	sp, #12
 801288a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801288c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012890:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012894:	e7ed      	b.n	8012872 <__exponent+0x44>
 8012896:	2330      	movs	r3, #48	@ 0x30
 8012898:	3130      	adds	r1, #48	@ 0x30
 801289a:	7083      	strb	r3, [r0, #2]
 801289c:	70c1      	strb	r1, [r0, #3]
 801289e:	1d03      	adds	r3, r0, #4
 80128a0:	e7f1      	b.n	8012886 <__exponent+0x58>
	...

080128a4 <_printf_float>:
 80128a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128a8:	b08d      	sub	sp, #52	@ 0x34
 80128aa:	460c      	mov	r4, r1
 80128ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80128b0:	4616      	mov	r6, r2
 80128b2:	461f      	mov	r7, r3
 80128b4:	4605      	mov	r5, r0
 80128b6:	f001 faeb 	bl	8013e90 <_localeconv_r>
 80128ba:	6803      	ldr	r3, [r0, #0]
 80128bc:	9304      	str	r3, [sp, #16]
 80128be:	4618      	mov	r0, r3
 80128c0:	f7ed fd06 	bl	80002d0 <strlen>
 80128c4:	2300      	movs	r3, #0
 80128c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80128c8:	f8d8 3000 	ldr.w	r3, [r8]
 80128cc:	9005      	str	r0, [sp, #20]
 80128ce:	3307      	adds	r3, #7
 80128d0:	f023 0307 	bic.w	r3, r3, #7
 80128d4:	f103 0208 	add.w	r2, r3, #8
 80128d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80128dc:	f8d4 b000 	ldr.w	fp, [r4]
 80128e0:	f8c8 2000 	str.w	r2, [r8]
 80128e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80128e8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80128ec:	9307      	str	r3, [sp, #28]
 80128ee:	f8cd 8018 	str.w	r8, [sp, #24]
 80128f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80128f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80128fa:	4b9c      	ldr	r3, [pc, #624]	@ (8012b6c <_printf_float+0x2c8>)
 80128fc:	f04f 32ff 	mov.w	r2, #4294967295
 8012900:	f7ee f944 	bl	8000b8c <__aeabi_dcmpun>
 8012904:	bb70      	cbnz	r0, 8012964 <_printf_float+0xc0>
 8012906:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801290a:	4b98      	ldr	r3, [pc, #608]	@ (8012b6c <_printf_float+0x2c8>)
 801290c:	f04f 32ff 	mov.w	r2, #4294967295
 8012910:	f7ee f91e 	bl	8000b50 <__aeabi_dcmple>
 8012914:	bb30      	cbnz	r0, 8012964 <_printf_float+0xc0>
 8012916:	2200      	movs	r2, #0
 8012918:	2300      	movs	r3, #0
 801291a:	4640      	mov	r0, r8
 801291c:	4649      	mov	r1, r9
 801291e:	f7ee f90d 	bl	8000b3c <__aeabi_dcmplt>
 8012922:	b110      	cbz	r0, 801292a <_printf_float+0x86>
 8012924:	232d      	movs	r3, #45	@ 0x2d
 8012926:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801292a:	4a91      	ldr	r2, [pc, #580]	@ (8012b70 <_printf_float+0x2cc>)
 801292c:	4b91      	ldr	r3, [pc, #580]	@ (8012b74 <_printf_float+0x2d0>)
 801292e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012932:	bf8c      	ite	hi
 8012934:	4690      	movhi	r8, r2
 8012936:	4698      	movls	r8, r3
 8012938:	2303      	movs	r3, #3
 801293a:	6123      	str	r3, [r4, #16]
 801293c:	f02b 0304 	bic.w	r3, fp, #4
 8012940:	6023      	str	r3, [r4, #0]
 8012942:	f04f 0900 	mov.w	r9, #0
 8012946:	9700      	str	r7, [sp, #0]
 8012948:	4633      	mov	r3, r6
 801294a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801294c:	4621      	mov	r1, r4
 801294e:	4628      	mov	r0, r5
 8012950:	f000 f9d2 	bl	8012cf8 <_printf_common>
 8012954:	3001      	adds	r0, #1
 8012956:	f040 808d 	bne.w	8012a74 <_printf_float+0x1d0>
 801295a:	f04f 30ff 	mov.w	r0, #4294967295
 801295e:	b00d      	add	sp, #52	@ 0x34
 8012960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012964:	4642      	mov	r2, r8
 8012966:	464b      	mov	r3, r9
 8012968:	4640      	mov	r0, r8
 801296a:	4649      	mov	r1, r9
 801296c:	f7ee f90e 	bl	8000b8c <__aeabi_dcmpun>
 8012970:	b140      	cbz	r0, 8012984 <_printf_float+0xe0>
 8012972:	464b      	mov	r3, r9
 8012974:	2b00      	cmp	r3, #0
 8012976:	bfbc      	itt	lt
 8012978:	232d      	movlt	r3, #45	@ 0x2d
 801297a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801297e:	4a7e      	ldr	r2, [pc, #504]	@ (8012b78 <_printf_float+0x2d4>)
 8012980:	4b7e      	ldr	r3, [pc, #504]	@ (8012b7c <_printf_float+0x2d8>)
 8012982:	e7d4      	b.n	801292e <_printf_float+0x8a>
 8012984:	6863      	ldr	r3, [r4, #4]
 8012986:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801298a:	9206      	str	r2, [sp, #24]
 801298c:	1c5a      	adds	r2, r3, #1
 801298e:	d13b      	bne.n	8012a08 <_printf_float+0x164>
 8012990:	2306      	movs	r3, #6
 8012992:	6063      	str	r3, [r4, #4]
 8012994:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8012998:	2300      	movs	r3, #0
 801299a:	6022      	str	r2, [r4, #0]
 801299c:	9303      	str	r3, [sp, #12]
 801299e:	ab0a      	add	r3, sp, #40	@ 0x28
 80129a0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80129a4:	ab09      	add	r3, sp, #36	@ 0x24
 80129a6:	9300      	str	r3, [sp, #0]
 80129a8:	6861      	ldr	r1, [r4, #4]
 80129aa:	ec49 8b10 	vmov	d0, r8, r9
 80129ae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80129b2:	4628      	mov	r0, r5
 80129b4:	f7ff fed6 	bl	8012764 <__cvt>
 80129b8:	9b06      	ldr	r3, [sp, #24]
 80129ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80129bc:	2b47      	cmp	r3, #71	@ 0x47
 80129be:	4680      	mov	r8, r0
 80129c0:	d129      	bne.n	8012a16 <_printf_float+0x172>
 80129c2:	1cc8      	adds	r0, r1, #3
 80129c4:	db02      	blt.n	80129cc <_printf_float+0x128>
 80129c6:	6863      	ldr	r3, [r4, #4]
 80129c8:	4299      	cmp	r1, r3
 80129ca:	dd41      	ble.n	8012a50 <_printf_float+0x1ac>
 80129cc:	f1aa 0a02 	sub.w	sl, sl, #2
 80129d0:	fa5f fa8a 	uxtb.w	sl, sl
 80129d4:	3901      	subs	r1, #1
 80129d6:	4652      	mov	r2, sl
 80129d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80129dc:	9109      	str	r1, [sp, #36]	@ 0x24
 80129de:	f7ff ff26 	bl	801282e <__exponent>
 80129e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80129e4:	1813      	adds	r3, r2, r0
 80129e6:	2a01      	cmp	r2, #1
 80129e8:	4681      	mov	r9, r0
 80129ea:	6123      	str	r3, [r4, #16]
 80129ec:	dc02      	bgt.n	80129f4 <_printf_float+0x150>
 80129ee:	6822      	ldr	r2, [r4, #0]
 80129f0:	07d2      	lsls	r2, r2, #31
 80129f2:	d501      	bpl.n	80129f8 <_printf_float+0x154>
 80129f4:	3301      	adds	r3, #1
 80129f6:	6123      	str	r3, [r4, #16]
 80129f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d0a2      	beq.n	8012946 <_printf_float+0xa2>
 8012a00:	232d      	movs	r3, #45	@ 0x2d
 8012a02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012a06:	e79e      	b.n	8012946 <_printf_float+0xa2>
 8012a08:	9a06      	ldr	r2, [sp, #24]
 8012a0a:	2a47      	cmp	r2, #71	@ 0x47
 8012a0c:	d1c2      	bne.n	8012994 <_printf_float+0xf0>
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d1c0      	bne.n	8012994 <_printf_float+0xf0>
 8012a12:	2301      	movs	r3, #1
 8012a14:	e7bd      	b.n	8012992 <_printf_float+0xee>
 8012a16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012a1a:	d9db      	bls.n	80129d4 <_printf_float+0x130>
 8012a1c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8012a20:	d118      	bne.n	8012a54 <_printf_float+0x1b0>
 8012a22:	2900      	cmp	r1, #0
 8012a24:	6863      	ldr	r3, [r4, #4]
 8012a26:	dd0b      	ble.n	8012a40 <_printf_float+0x19c>
 8012a28:	6121      	str	r1, [r4, #16]
 8012a2a:	b913      	cbnz	r3, 8012a32 <_printf_float+0x18e>
 8012a2c:	6822      	ldr	r2, [r4, #0]
 8012a2e:	07d0      	lsls	r0, r2, #31
 8012a30:	d502      	bpl.n	8012a38 <_printf_float+0x194>
 8012a32:	3301      	adds	r3, #1
 8012a34:	440b      	add	r3, r1
 8012a36:	6123      	str	r3, [r4, #16]
 8012a38:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012a3a:	f04f 0900 	mov.w	r9, #0
 8012a3e:	e7db      	b.n	80129f8 <_printf_float+0x154>
 8012a40:	b913      	cbnz	r3, 8012a48 <_printf_float+0x1a4>
 8012a42:	6822      	ldr	r2, [r4, #0]
 8012a44:	07d2      	lsls	r2, r2, #31
 8012a46:	d501      	bpl.n	8012a4c <_printf_float+0x1a8>
 8012a48:	3302      	adds	r3, #2
 8012a4a:	e7f4      	b.n	8012a36 <_printf_float+0x192>
 8012a4c:	2301      	movs	r3, #1
 8012a4e:	e7f2      	b.n	8012a36 <_printf_float+0x192>
 8012a50:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012a54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012a56:	4299      	cmp	r1, r3
 8012a58:	db05      	blt.n	8012a66 <_printf_float+0x1c2>
 8012a5a:	6823      	ldr	r3, [r4, #0]
 8012a5c:	6121      	str	r1, [r4, #16]
 8012a5e:	07d8      	lsls	r0, r3, #31
 8012a60:	d5ea      	bpl.n	8012a38 <_printf_float+0x194>
 8012a62:	1c4b      	adds	r3, r1, #1
 8012a64:	e7e7      	b.n	8012a36 <_printf_float+0x192>
 8012a66:	2900      	cmp	r1, #0
 8012a68:	bfd4      	ite	le
 8012a6a:	f1c1 0202 	rsble	r2, r1, #2
 8012a6e:	2201      	movgt	r2, #1
 8012a70:	4413      	add	r3, r2
 8012a72:	e7e0      	b.n	8012a36 <_printf_float+0x192>
 8012a74:	6823      	ldr	r3, [r4, #0]
 8012a76:	055a      	lsls	r2, r3, #21
 8012a78:	d407      	bmi.n	8012a8a <_printf_float+0x1e6>
 8012a7a:	6923      	ldr	r3, [r4, #16]
 8012a7c:	4642      	mov	r2, r8
 8012a7e:	4631      	mov	r1, r6
 8012a80:	4628      	mov	r0, r5
 8012a82:	47b8      	blx	r7
 8012a84:	3001      	adds	r0, #1
 8012a86:	d12b      	bne.n	8012ae0 <_printf_float+0x23c>
 8012a88:	e767      	b.n	801295a <_printf_float+0xb6>
 8012a8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012a8e:	f240 80dd 	bls.w	8012c4c <_printf_float+0x3a8>
 8012a92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012a96:	2200      	movs	r2, #0
 8012a98:	2300      	movs	r3, #0
 8012a9a:	f7ee f845 	bl	8000b28 <__aeabi_dcmpeq>
 8012a9e:	2800      	cmp	r0, #0
 8012aa0:	d033      	beq.n	8012b0a <_printf_float+0x266>
 8012aa2:	4a37      	ldr	r2, [pc, #220]	@ (8012b80 <_printf_float+0x2dc>)
 8012aa4:	2301      	movs	r3, #1
 8012aa6:	4631      	mov	r1, r6
 8012aa8:	4628      	mov	r0, r5
 8012aaa:	47b8      	blx	r7
 8012aac:	3001      	adds	r0, #1
 8012aae:	f43f af54 	beq.w	801295a <_printf_float+0xb6>
 8012ab2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012ab6:	4543      	cmp	r3, r8
 8012ab8:	db02      	blt.n	8012ac0 <_printf_float+0x21c>
 8012aba:	6823      	ldr	r3, [r4, #0]
 8012abc:	07d8      	lsls	r0, r3, #31
 8012abe:	d50f      	bpl.n	8012ae0 <_printf_float+0x23c>
 8012ac0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012ac4:	4631      	mov	r1, r6
 8012ac6:	4628      	mov	r0, r5
 8012ac8:	47b8      	blx	r7
 8012aca:	3001      	adds	r0, #1
 8012acc:	f43f af45 	beq.w	801295a <_printf_float+0xb6>
 8012ad0:	f04f 0900 	mov.w	r9, #0
 8012ad4:	f108 38ff 	add.w	r8, r8, #4294967295
 8012ad8:	f104 0a1a 	add.w	sl, r4, #26
 8012adc:	45c8      	cmp	r8, r9
 8012ade:	dc09      	bgt.n	8012af4 <_printf_float+0x250>
 8012ae0:	6823      	ldr	r3, [r4, #0]
 8012ae2:	079b      	lsls	r3, r3, #30
 8012ae4:	f100 8103 	bmi.w	8012cee <_printf_float+0x44a>
 8012ae8:	68e0      	ldr	r0, [r4, #12]
 8012aea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012aec:	4298      	cmp	r0, r3
 8012aee:	bfb8      	it	lt
 8012af0:	4618      	movlt	r0, r3
 8012af2:	e734      	b.n	801295e <_printf_float+0xba>
 8012af4:	2301      	movs	r3, #1
 8012af6:	4652      	mov	r2, sl
 8012af8:	4631      	mov	r1, r6
 8012afa:	4628      	mov	r0, r5
 8012afc:	47b8      	blx	r7
 8012afe:	3001      	adds	r0, #1
 8012b00:	f43f af2b 	beq.w	801295a <_printf_float+0xb6>
 8012b04:	f109 0901 	add.w	r9, r9, #1
 8012b08:	e7e8      	b.n	8012adc <_printf_float+0x238>
 8012b0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	dc39      	bgt.n	8012b84 <_printf_float+0x2e0>
 8012b10:	4a1b      	ldr	r2, [pc, #108]	@ (8012b80 <_printf_float+0x2dc>)
 8012b12:	2301      	movs	r3, #1
 8012b14:	4631      	mov	r1, r6
 8012b16:	4628      	mov	r0, r5
 8012b18:	47b8      	blx	r7
 8012b1a:	3001      	adds	r0, #1
 8012b1c:	f43f af1d 	beq.w	801295a <_printf_float+0xb6>
 8012b20:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012b24:	ea59 0303 	orrs.w	r3, r9, r3
 8012b28:	d102      	bne.n	8012b30 <_printf_float+0x28c>
 8012b2a:	6823      	ldr	r3, [r4, #0]
 8012b2c:	07d9      	lsls	r1, r3, #31
 8012b2e:	d5d7      	bpl.n	8012ae0 <_printf_float+0x23c>
 8012b30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012b34:	4631      	mov	r1, r6
 8012b36:	4628      	mov	r0, r5
 8012b38:	47b8      	blx	r7
 8012b3a:	3001      	adds	r0, #1
 8012b3c:	f43f af0d 	beq.w	801295a <_printf_float+0xb6>
 8012b40:	f04f 0a00 	mov.w	sl, #0
 8012b44:	f104 0b1a 	add.w	fp, r4, #26
 8012b48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b4a:	425b      	negs	r3, r3
 8012b4c:	4553      	cmp	r3, sl
 8012b4e:	dc01      	bgt.n	8012b54 <_printf_float+0x2b0>
 8012b50:	464b      	mov	r3, r9
 8012b52:	e793      	b.n	8012a7c <_printf_float+0x1d8>
 8012b54:	2301      	movs	r3, #1
 8012b56:	465a      	mov	r2, fp
 8012b58:	4631      	mov	r1, r6
 8012b5a:	4628      	mov	r0, r5
 8012b5c:	47b8      	blx	r7
 8012b5e:	3001      	adds	r0, #1
 8012b60:	f43f aefb 	beq.w	801295a <_printf_float+0xb6>
 8012b64:	f10a 0a01 	add.w	sl, sl, #1
 8012b68:	e7ee      	b.n	8012b48 <_printf_float+0x2a4>
 8012b6a:	bf00      	nop
 8012b6c:	7fefffff 	.word	0x7fefffff
 8012b70:	0801836a 	.word	0x0801836a
 8012b74:	08018366 	.word	0x08018366
 8012b78:	08018372 	.word	0x08018372
 8012b7c:	0801836e 	.word	0x0801836e
 8012b80:	08018376 	.word	0x08018376
 8012b84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012b86:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012b8a:	4553      	cmp	r3, sl
 8012b8c:	bfa8      	it	ge
 8012b8e:	4653      	movge	r3, sl
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	4699      	mov	r9, r3
 8012b94:	dc36      	bgt.n	8012c04 <_printf_float+0x360>
 8012b96:	f04f 0b00 	mov.w	fp, #0
 8012b9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012b9e:	f104 021a 	add.w	r2, r4, #26
 8012ba2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012ba4:	9306      	str	r3, [sp, #24]
 8012ba6:	eba3 0309 	sub.w	r3, r3, r9
 8012baa:	455b      	cmp	r3, fp
 8012bac:	dc31      	bgt.n	8012c12 <_printf_float+0x36e>
 8012bae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012bb0:	459a      	cmp	sl, r3
 8012bb2:	dc3a      	bgt.n	8012c2a <_printf_float+0x386>
 8012bb4:	6823      	ldr	r3, [r4, #0]
 8012bb6:	07da      	lsls	r2, r3, #31
 8012bb8:	d437      	bmi.n	8012c2a <_printf_float+0x386>
 8012bba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012bbc:	ebaa 0903 	sub.w	r9, sl, r3
 8012bc0:	9b06      	ldr	r3, [sp, #24]
 8012bc2:	ebaa 0303 	sub.w	r3, sl, r3
 8012bc6:	4599      	cmp	r9, r3
 8012bc8:	bfa8      	it	ge
 8012bca:	4699      	movge	r9, r3
 8012bcc:	f1b9 0f00 	cmp.w	r9, #0
 8012bd0:	dc33      	bgt.n	8012c3a <_printf_float+0x396>
 8012bd2:	f04f 0800 	mov.w	r8, #0
 8012bd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012bda:	f104 0b1a 	add.w	fp, r4, #26
 8012bde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012be0:	ebaa 0303 	sub.w	r3, sl, r3
 8012be4:	eba3 0309 	sub.w	r3, r3, r9
 8012be8:	4543      	cmp	r3, r8
 8012bea:	f77f af79 	ble.w	8012ae0 <_printf_float+0x23c>
 8012bee:	2301      	movs	r3, #1
 8012bf0:	465a      	mov	r2, fp
 8012bf2:	4631      	mov	r1, r6
 8012bf4:	4628      	mov	r0, r5
 8012bf6:	47b8      	blx	r7
 8012bf8:	3001      	adds	r0, #1
 8012bfa:	f43f aeae 	beq.w	801295a <_printf_float+0xb6>
 8012bfe:	f108 0801 	add.w	r8, r8, #1
 8012c02:	e7ec      	b.n	8012bde <_printf_float+0x33a>
 8012c04:	4642      	mov	r2, r8
 8012c06:	4631      	mov	r1, r6
 8012c08:	4628      	mov	r0, r5
 8012c0a:	47b8      	blx	r7
 8012c0c:	3001      	adds	r0, #1
 8012c0e:	d1c2      	bne.n	8012b96 <_printf_float+0x2f2>
 8012c10:	e6a3      	b.n	801295a <_printf_float+0xb6>
 8012c12:	2301      	movs	r3, #1
 8012c14:	4631      	mov	r1, r6
 8012c16:	4628      	mov	r0, r5
 8012c18:	9206      	str	r2, [sp, #24]
 8012c1a:	47b8      	blx	r7
 8012c1c:	3001      	adds	r0, #1
 8012c1e:	f43f ae9c 	beq.w	801295a <_printf_float+0xb6>
 8012c22:	9a06      	ldr	r2, [sp, #24]
 8012c24:	f10b 0b01 	add.w	fp, fp, #1
 8012c28:	e7bb      	b.n	8012ba2 <_printf_float+0x2fe>
 8012c2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012c2e:	4631      	mov	r1, r6
 8012c30:	4628      	mov	r0, r5
 8012c32:	47b8      	blx	r7
 8012c34:	3001      	adds	r0, #1
 8012c36:	d1c0      	bne.n	8012bba <_printf_float+0x316>
 8012c38:	e68f      	b.n	801295a <_printf_float+0xb6>
 8012c3a:	9a06      	ldr	r2, [sp, #24]
 8012c3c:	464b      	mov	r3, r9
 8012c3e:	4442      	add	r2, r8
 8012c40:	4631      	mov	r1, r6
 8012c42:	4628      	mov	r0, r5
 8012c44:	47b8      	blx	r7
 8012c46:	3001      	adds	r0, #1
 8012c48:	d1c3      	bne.n	8012bd2 <_printf_float+0x32e>
 8012c4a:	e686      	b.n	801295a <_printf_float+0xb6>
 8012c4c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012c50:	f1ba 0f01 	cmp.w	sl, #1
 8012c54:	dc01      	bgt.n	8012c5a <_printf_float+0x3b6>
 8012c56:	07db      	lsls	r3, r3, #31
 8012c58:	d536      	bpl.n	8012cc8 <_printf_float+0x424>
 8012c5a:	2301      	movs	r3, #1
 8012c5c:	4642      	mov	r2, r8
 8012c5e:	4631      	mov	r1, r6
 8012c60:	4628      	mov	r0, r5
 8012c62:	47b8      	blx	r7
 8012c64:	3001      	adds	r0, #1
 8012c66:	f43f ae78 	beq.w	801295a <_printf_float+0xb6>
 8012c6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012c6e:	4631      	mov	r1, r6
 8012c70:	4628      	mov	r0, r5
 8012c72:	47b8      	blx	r7
 8012c74:	3001      	adds	r0, #1
 8012c76:	f43f ae70 	beq.w	801295a <_printf_float+0xb6>
 8012c7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012c7e:	2200      	movs	r2, #0
 8012c80:	2300      	movs	r3, #0
 8012c82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012c86:	f7ed ff4f 	bl	8000b28 <__aeabi_dcmpeq>
 8012c8a:	b9c0      	cbnz	r0, 8012cbe <_printf_float+0x41a>
 8012c8c:	4653      	mov	r3, sl
 8012c8e:	f108 0201 	add.w	r2, r8, #1
 8012c92:	4631      	mov	r1, r6
 8012c94:	4628      	mov	r0, r5
 8012c96:	47b8      	blx	r7
 8012c98:	3001      	adds	r0, #1
 8012c9a:	d10c      	bne.n	8012cb6 <_printf_float+0x412>
 8012c9c:	e65d      	b.n	801295a <_printf_float+0xb6>
 8012c9e:	2301      	movs	r3, #1
 8012ca0:	465a      	mov	r2, fp
 8012ca2:	4631      	mov	r1, r6
 8012ca4:	4628      	mov	r0, r5
 8012ca6:	47b8      	blx	r7
 8012ca8:	3001      	adds	r0, #1
 8012caa:	f43f ae56 	beq.w	801295a <_printf_float+0xb6>
 8012cae:	f108 0801 	add.w	r8, r8, #1
 8012cb2:	45d0      	cmp	r8, sl
 8012cb4:	dbf3      	blt.n	8012c9e <_printf_float+0x3fa>
 8012cb6:	464b      	mov	r3, r9
 8012cb8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012cbc:	e6df      	b.n	8012a7e <_printf_float+0x1da>
 8012cbe:	f04f 0800 	mov.w	r8, #0
 8012cc2:	f104 0b1a 	add.w	fp, r4, #26
 8012cc6:	e7f4      	b.n	8012cb2 <_printf_float+0x40e>
 8012cc8:	2301      	movs	r3, #1
 8012cca:	4642      	mov	r2, r8
 8012ccc:	e7e1      	b.n	8012c92 <_printf_float+0x3ee>
 8012cce:	2301      	movs	r3, #1
 8012cd0:	464a      	mov	r2, r9
 8012cd2:	4631      	mov	r1, r6
 8012cd4:	4628      	mov	r0, r5
 8012cd6:	47b8      	blx	r7
 8012cd8:	3001      	adds	r0, #1
 8012cda:	f43f ae3e 	beq.w	801295a <_printf_float+0xb6>
 8012cde:	f108 0801 	add.w	r8, r8, #1
 8012ce2:	68e3      	ldr	r3, [r4, #12]
 8012ce4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012ce6:	1a5b      	subs	r3, r3, r1
 8012ce8:	4543      	cmp	r3, r8
 8012cea:	dcf0      	bgt.n	8012cce <_printf_float+0x42a>
 8012cec:	e6fc      	b.n	8012ae8 <_printf_float+0x244>
 8012cee:	f04f 0800 	mov.w	r8, #0
 8012cf2:	f104 0919 	add.w	r9, r4, #25
 8012cf6:	e7f4      	b.n	8012ce2 <_printf_float+0x43e>

08012cf8 <_printf_common>:
 8012cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cfc:	4616      	mov	r6, r2
 8012cfe:	4698      	mov	r8, r3
 8012d00:	688a      	ldr	r2, [r1, #8]
 8012d02:	690b      	ldr	r3, [r1, #16]
 8012d04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012d08:	4293      	cmp	r3, r2
 8012d0a:	bfb8      	it	lt
 8012d0c:	4613      	movlt	r3, r2
 8012d0e:	6033      	str	r3, [r6, #0]
 8012d10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012d14:	4607      	mov	r7, r0
 8012d16:	460c      	mov	r4, r1
 8012d18:	b10a      	cbz	r2, 8012d1e <_printf_common+0x26>
 8012d1a:	3301      	adds	r3, #1
 8012d1c:	6033      	str	r3, [r6, #0]
 8012d1e:	6823      	ldr	r3, [r4, #0]
 8012d20:	0699      	lsls	r1, r3, #26
 8012d22:	bf42      	ittt	mi
 8012d24:	6833      	ldrmi	r3, [r6, #0]
 8012d26:	3302      	addmi	r3, #2
 8012d28:	6033      	strmi	r3, [r6, #0]
 8012d2a:	6825      	ldr	r5, [r4, #0]
 8012d2c:	f015 0506 	ands.w	r5, r5, #6
 8012d30:	d106      	bne.n	8012d40 <_printf_common+0x48>
 8012d32:	f104 0a19 	add.w	sl, r4, #25
 8012d36:	68e3      	ldr	r3, [r4, #12]
 8012d38:	6832      	ldr	r2, [r6, #0]
 8012d3a:	1a9b      	subs	r3, r3, r2
 8012d3c:	42ab      	cmp	r3, r5
 8012d3e:	dc26      	bgt.n	8012d8e <_printf_common+0x96>
 8012d40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012d44:	6822      	ldr	r2, [r4, #0]
 8012d46:	3b00      	subs	r3, #0
 8012d48:	bf18      	it	ne
 8012d4a:	2301      	movne	r3, #1
 8012d4c:	0692      	lsls	r2, r2, #26
 8012d4e:	d42b      	bmi.n	8012da8 <_printf_common+0xb0>
 8012d50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012d54:	4641      	mov	r1, r8
 8012d56:	4638      	mov	r0, r7
 8012d58:	47c8      	blx	r9
 8012d5a:	3001      	adds	r0, #1
 8012d5c:	d01e      	beq.n	8012d9c <_printf_common+0xa4>
 8012d5e:	6823      	ldr	r3, [r4, #0]
 8012d60:	6922      	ldr	r2, [r4, #16]
 8012d62:	f003 0306 	and.w	r3, r3, #6
 8012d66:	2b04      	cmp	r3, #4
 8012d68:	bf02      	ittt	eq
 8012d6a:	68e5      	ldreq	r5, [r4, #12]
 8012d6c:	6833      	ldreq	r3, [r6, #0]
 8012d6e:	1aed      	subeq	r5, r5, r3
 8012d70:	68a3      	ldr	r3, [r4, #8]
 8012d72:	bf0c      	ite	eq
 8012d74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012d78:	2500      	movne	r5, #0
 8012d7a:	4293      	cmp	r3, r2
 8012d7c:	bfc4      	itt	gt
 8012d7e:	1a9b      	subgt	r3, r3, r2
 8012d80:	18ed      	addgt	r5, r5, r3
 8012d82:	2600      	movs	r6, #0
 8012d84:	341a      	adds	r4, #26
 8012d86:	42b5      	cmp	r5, r6
 8012d88:	d11a      	bne.n	8012dc0 <_printf_common+0xc8>
 8012d8a:	2000      	movs	r0, #0
 8012d8c:	e008      	b.n	8012da0 <_printf_common+0xa8>
 8012d8e:	2301      	movs	r3, #1
 8012d90:	4652      	mov	r2, sl
 8012d92:	4641      	mov	r1, r8
 8012d94:	4638      	mov	r0, r7
 8012d96:	47c8      	blx	r9
 8012d98:	3001      	adds	r0, #1
 8012d9a:	d103      	bne.n	8012da4 <_printf_common+0xac>
 8012d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8012da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012da4:	3501      	adds	r5, #1
 8012da6:	e7c6      	b.n	8012d36 <_printf_common+0x3e>
 8012da8:	18e1      	adds	r1, r4, r3
 8012daa:	1c5a      	adds	r2, r3, #1
 8012dac:	2030      	movs	r0, #48	@ 0x30
 8012dae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012db2:	4422      	add	r2, r4
 8012db4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012db8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012dbc:	3302      	adds	r3, #2
 8012dbe:	e7c7      	b.n	8012d50 <_printf_common+0x58>
 8012dc0:	2301      	movs	r3, #1
 8012dc2:	4622      	mov	r2, r4
 8012dc4:	4641      	mov	r1, r8
 8012dc6:	4638      	mov	r0, r7
 8012dc8:	47c8      	blx	r9
 8012dca:	3001      	adds	r0, #1
 8012dcc:	d0e6      	beq.n	8012d9c <_printf_common+0xa4>
 8012dce:	3601      	adds	r6, #1
 8012dd0:	e7d9      	b.n	8012d86 <_printf_common+0x8e>
	...

08012dd4 <_printf_i>:
 8012dd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012dd8:	7e0f      	ldrb	r7, [r1, #24]
 8012dda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012ddc:	2f78      	cmp	r7, #120	@ 0x78
 8012dde:	4691      	mov	r9, r2
 8012de0:	4680      	mov	r8, r0
 8012de2:	460c      	mov	r4, r1
 8012de4:	469a      	mov	sl, r3
 8012de6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012dea:	d807      	bhi.n	8012dfc <_printf_i+0x28>
 8012dec:	2f62      	cmp	r7, #98	@ 0x62
 8012dee:	d80a      	bhi.n	8012e06 <_printf_i+0x32>
 8012df0:	2f00      	cmp	r7, #0
 8012df2:	f000 80d1 	beq.w	8012f98 <_printf_i+0x1c4>
 8012df6:	2f58      	cmp	r7, #88	@ 0x58
 8012df8:	f000 80b8 	beq.w	8012f6c <_printf_i+0x198>
 8012dfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012e00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012e04:	e03a      	b.n	8012e7c <_printf_i+0xa8>
 8012e06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012e0a:	2b15      	cmp	r3, #21
 8012e0c:	d8f6      	bhi.n	8012dfc <_printf_i+0x28>
 8012e0e:	a101      	add	r1, pc, #4	@ (adr r1, 8012e14 <_printf_i+0x40>)
 8012e10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012e14:	08012e6d 	.word	0x08012e6d
 8012e18:	08012e81 	.word	0x08012e81
 8012e1c:	08012dfd 	.word	0x08012dfd
 8012e20:	08012dfd 	.word	0x08012dfd
 8012e24:	08012dfd 	.word	0x08012dfd
 8012e28:	08012dfd 	.word	0x08012dfd
 8012e2c:	08012e81 	.word	0x08012e81
 8012e30:	08012dfd 	.word	0x08012dfd
 8012e34:	08012dfd 	.word	0x08012dfd
 8012e38:	08012dfd 	.word	0x08012dfd
 8012e3c:	08012dfd 	.word	0x08012dfd
 8012e40:	08012f7f 	.word	0x08012f7f
 8012e44:	08012eab 	.word	0x08012eab
 8012e48:	08012f39 	.word	0x08012f39
 8012e4c:	08012dfd 	.word	0x08012dfd
 8012e50:	08012dfd 	.word	0x08012dfd
 8012e54:	08012fa1 	.word	0x08012fa1
 8012e58:	08012dfd 	.word	0x08012dfd
 8012e5c:	08012eab 	.word	0x08012eab
 8012e60:	08012dfd 	.word	0x08012dfd
 8012e64:	08012dfd 	.word	0x08012dfd
 8012e68:	08012f41 	.word	0x08012f41
 8012e6c:	6833      	ldr	r3, [r6, #0]
 8012e6e:	1d1a      	adds	r2, r3, #4
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	6032      	str	r2, [r6, #0]
 8012e74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012e78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012e7c:	2301      	movs	r3, #1
 8012e7e:	e09c      	b.n	8012fba <_printf_i+0x1e6>
 8012e80:	6833      	ldr	r3, [r6, #0]
 8012e82:	6820      	ldr	r0, [r4, #0]
 8012e84:	1d19      	adds	r1, r3, #4
 8012e86:	6031      	str	r1, [r6, #0]
 8012e88:	0606      	lsls	r6, r0, #24
 8012e8a:	d501      	bpl.n	8012e90 <_printf_i+0xbc>
 8012e8c:	681d      	ldr	r5, [r3, #0]
 8012e8e:	e003      	b.n	8012e98 <_printf_i+0xc4>
 8012e90:	0645      	lsls	r5, r0, #25
 8012e92:	d5fb      	bpl.n	8012e8c <_printf_i+0xb8>
 8012e94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012e98:	2d00      	cmp	r5, #0
 8012e9a:	da03      	bge.n	8012ea4 <_printf_i+0xd0>
 8012e9c:	232d      	movs	r3, #45	@ 0x2d
 8012e9e:	426d      	negs	r5, r5
 8012ea0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012ea4:	4858      	ldr	r0, [pc, #352]	@ (8013008 <_printf_i+0x234>)
 8012ea6:	230a      	movs	r3, #10
 8012ea8:	e011      	b.n	8012ece <_printf_i+0xfa>
 8012eaa:	6821      	ldr	r1, [r4, #0]
 8012eac:	6833      	ldr	r3, [r6, #0]
 8012eae:	0608      	lsls	r0, r1, #24
 8012eb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8012eb4:	d402      	bmi.n	8012ebc <_printf_i+0xe8>
 8012eb6:	0649      	lsls	r1, r1, #25
 8012eb8:	bf48      	it	mi
 8012eba:	b2ad      	uxthmi	r5, r5
 8012ebc:	2f6f      	cmp	r7, #111	@ 0x6f
 8012ebe:	4852      	ldr	r0, [pc, #328]	@ (8013008 <_printf_i+0x234>)
 8012ec0:	6033      	str	r3, [r6, #0]
 8012ec2:	bf14      	ite	ne
 8012ec4:	230a      	movne	r3, #10
 8012ec6:	2308      	moveq	r3, #8
 8012ec8:	2100      	movs	r1, #0
 8012eca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012ece:	6866      	ldr	r6, [r4, #4]
 8012ed0:	60a6      	str	r6, [r4, #8]
 8012ed2:	2e00      	cmp	r6, #0
 8012ed4:	db05      	blt.n	8012ee2 <_printf_i+0x10e>
 8012ed6:	6821      	ldr	r1, [r4, #0]
 8012ed8:	432e      	orrs	r6, r5
 8012eda:	f021 0104 	bic.w	r1, r1, #4
 8012ede:	6021      	str	r1, [r4, #0]
 8012ee0:	d04b      	beq.n	8012f7a <_printf_i+0x1a6>
 8012ee2:	4616      	mov	r6, r2
 8012ee4:	fbb5 f1f3 	udiv	r1, r5, r3
 8012ee8:	fb03 5711 	mls	r7, r3, r1, r5
 8012eec:	5dc7      	ldrb	r7, [r0, r7]
 8012eee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012ef2:	462f      	mov	r7, r5
 8012ef4:	42bb      	cmp	r3, r7
 8012ef6:	460d      	mov	r5, r1
 8012ef8:	d9f4      	bls.n	8012ee4 <_printf_i+0x110>
 8012efa:	2b08      	cmp	r3, #8
 8012efc:	d10b      	bne.n	8012f16 <_printf_i+0x142>
 8012efe:	6823      	ldr	r3, [r4, #0]
 8012f00:	07df      	lsls	r7, r3, #31
 8012f02:	d508      	bpl.n	8012f16 <_printf_i+0x142>
 8012f04:	6923      	ldr	r3, [r4, #16]
 8012f06:	6861      	ldr	r1, [r4, #4]
 8012f08:	4299      	cmp	r1, r3
 8012f0a:	bfde      	ittt	le
 8012f0c:	2330      	movle	r3, #48	@ 0x30
 8012f0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012f12:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012f16:	1b92      	subs	r2, r2, r6
 8012f18:	6122      	str	r2, [r4, #16]
 8012f1a:	f8cd a000 	str.w	sl, [sp]
 8012f1e:	464b      	mov	r3, r9
 8012f20:	aa03      	add	r2, sp, #12
 8012f22:	4621      	mov	r1, r4
 8012f24:	4640      	mov	r0, r8
 8012f26:	f7ff fee7 	bl	8012cf8 <_printf_common>
 8012f2a:	3001      	adds	r0, #1
 8012f2c:	d14a      	bne.n	8012fc4 <_printf_i+0x1f0>
 8012f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8012f32:	b004      	add	sp, #16
 8012f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f38:	6823      	ldr	r3, [r4, #0]
 8012f3a:	f043 0320 	orr.w	r3, r3, #32
 8012f3e:	6023      	str	r3, [r4, #0]
 8012f40:	4832      	ldr	r0, [pc, #200]	@ (801300c <_printf_i+0x238>)
 8012f42:	2778      	movs	r7, #120	@ 0x78
 8012f44:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012f48:	6823      	ldr	r3, [r4, #0]
 8012f4a:	6831      	ldr	r1, [r6, #0]
 8012f4c:	061f      	lsls	r7, r3, #24
 8012f4e:	f851 5b04 	ldr.w	r5, [r1], #4
 8012f52:	d402      	bmi.n	8012f5a <_printf_i+0x186>
 8012f54:	065f      	lsls	r7, r3, #25
 8012f56:	bf48      	it	mi
 8012f58:	b2ad      	uxthmi	r5, r5
 8012f5a:	6031      	str	r1, [r6, #0]
 8012f5c:	07d9      	lsls	r1, r3, #31
 8012f5e:	bf44      	itt	mi
 8012f60:	f043 0320 	orrmi.w	r3, r3, #32
 8012f64:	6023      	strmi	r3, [r4, #0]
 8012f66:	b11d      	cbz	r5, 8012f70 <_printf_i+0x19c>
 8012f68:	2310      	movs	r3, #16
 8012f6a:	e7ad      	b.n	8012ec8 <_printf_i+0xf4>
 8012f6c:	4826      	ldr	r0, [pc, #152]	@ (8013008 <_printf_i+0x234>)
 8012f6e:	e7e9      	b.n	8012f44 <_printf_i+0x170>
 8012f70:	6823      	ldr	r3, [r4, #0]
 8012f72:	f023 0320 	bic.w	r3, r3, #32
 8012f76:	6023      	str	r3, [r4, #0]
 8012f78:	e7f6      	b.n	8012f68 <_printf_i+0x194>
 8012f7a:	4616      	mov	r6, r2
 8012f7c:	e7bd      	b.n	8012efa <_printf_i+0x126>
 8012f7e:	6833      	ldr	r3, [r6, #0]
 8012f80:	6825      	ldr	r5, [r4, #0]
 8012f82:	6961      	ldr	r1, [r4, #20]
 8012f84:	1d18      	adds	r0, r3, #4
 8012f86:	6030      	str	r0, [r6, #0]
 8012f88:	062e      	lsls	r6, r5, #24
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	d501      	bpl.n	8012f92 <_printf_i+0x1be>
 8012f8e:	6019      	str	r1, [r3, #0]
 8012f90:	e002      	b.n	8012f98 <_printf_i+0x1c4>
 8012f92:	0668      	lsls	r0, r5, #25
 8012f94:	d5fb      	bpl.n	8012f8e <_printf_i+0x1ba>
 8012f96:	8019      	strh	r1, [r3, #0]
 8012f98:	2300      	movs	r3, #0
 8012f9a:	6123      	str	r3, [r4, #16]
 8012f9c:	4616      	mov	r6, r2
 8012f9e:	e7bc      	b.n	8012f1a <_printf_i+0x146>
 8012fa0:	6833      	ldr	r3, [r6, #0]
 8012fa2:	1d1a      	adds	r2, r3, #4
 8012fa4:	6032      	str	r2, [r6, #0]
 8012fa6:	681e      	ldr	r6, [r3, #0]
 8012fa8:	6862      	ldr	r2, [r4, #4]
 8012faa:	2100      	movs	r1, #0
 8012fac:	4630      	mov	r0, r6
 8012fae:	f7ed f93f 	bl	8000230 <memchr>
 8012fb2:	b108      	cbz	r0, 8012fb8 <_printf_i+0x1e4>
 8012fb4:	1b80      	subs	r0, r0, r6
 8012fb6:	6060      	str	r0, [r4, #4]
 8012fb8:	6863      	ldr	r3, [r4, #4]
 8012fba:	6123      	str	r3, [r4, #16]
 8012fbc:	2300      	movs	r3, #0
 8012fbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012fc2:	e7aa      	b.n	8012f1a <_printf_i+0x146>
 8012fc4:	6923      	ldr	r3, [r4, #16]
 8012fc6:	4632      	mov	r2, r6
 8012fc8:	4649      	mov	r1, r9
 8012fca:	4640      	mov	r0, r8
 8012fcc:	47d0      	blx	sl
 8012fce:	3001      	adds	r0, #1
 8012fd0:	d0ad      	beq.n	8012f2e <_printf_i+0x15a>
 8012fd2:	6823      	ldr	r3, [r4, #0]
 8012fd4:	079b      	lsls	r3, r3, #30
 8012fd6:	d413      	bmi.n	8013000 <_printf_i+0x22c>
 8012fd8:	68e0      	ldr	r0, [r4, #12]
 8012fda:	9b03      	ldr	r3, [sp, #12]
 8012fdc:	4298      	cmp	r0, r3
 8012fde:	bfb8      	it	lt
 8012fe0:	4618      	movlt	r0, r3
 8012fe2:	e7a6      	b.n	8012f32 <_printf_i+0x15e>
 8012fe4:	2301      	movs	r3, #1
 8012fe6:	4632      	mov	r2, r6
 8012fe8:	4649      	mov	r1, r9
 8012fea:	4640      	mov	r0, r8
 8012fec:	47d0      	blx	sl
 8012fee:	3001      	adds	r0, #1
 8012ff0:	d09d      	beq.n	8012f2e <_printf_i+0x15a>
 8012ff2:	3501      	adds	r5, #1
 8012ff4:	68e3      	ldr	r3, [r4, #12]
 8012ff6:	9903      	ldr	r1, [sp, #12]
 8012ff8:	1a5b      	subs	r3, r3, r1
 8012ffa:	42ab      	cmp	r3, r5
 8012ffc:	dcf2      	bgt.n	8012fe4 <_printf_i+0x210>
 8012ffe:	e7eb      	b.n	8012fd8 <_printf_i+0x204>
 8013000:	2500      	movs	r5, #0
 8013002:	f104 0619 	add.w	r6, r4, #25
 8013006:	e7f5      	b.n	8012ff4 <_printf_i+0x220>
 8013008:	08018378 	.word	0x08018378
 801300c:	08018389 	.word	0x08018389

08013010 <_scanf_float>:
 8013010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013014:	b087      	sub	sp, #28
 8013016:	4691      	mov	r9, r2
 8013018:	9303      	str	r3, [sp, #12]
 801301a:	688b      	ldr	r3, [r1, #8]
 801301c:	1e5a      	subs	r2, r3, #1
 801301e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8013022:	bf81      	itttt	hi
 8013024:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8013028:	eb03 0b05 	addhi.w	fp, r3, r5
 801302c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8013030:	608b      	strhi	r3, [r1, #8]
 8013032:	680b      	ldr	r3, [r1, #0]
 8013034:	460a      	mov	r2, r1
 8013036:	f04f 0500 	mov.w	r5, #0
 801303a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801303e:	f842 3b1c 	str.w	r3, [r2], #28
 8013042:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8013046:	4680      	mov	r8, r0
 8013048:	460c      	mov	r4, r1
 801304a:	bf98      	it	ls
 801304c:	f04f 0b00 	movls.w	fp, #0
 8013050:	9201      	str	r2, [sp, #4]
 8013052:	4616      	mov	r6, r2
 8013054:	46aa      	mov	sl, r5
 8013056:	462f      	mov	r7, r5
 8013058:	9502      	str	r5, [sp, #8]
 801305a:	68a2      	ldr	r2, [r4, #8]
 801305c:	b15a      	cbz	r2, 8013076 <_scanf_float+0x66>
 801305e:	f8d9 3000 	ldr.w	r3, [r9]
 8013062:	781b      	ldrb	r3, [r3, #0]
 8013064:	2b4e      	cmp	r3, #78	@ 0x4e
 8013066:	d863      	bhi.n	8013130 <_scanf_float+0x120>
 8013068:	2b40      	cmp	r3, #64	@ 0x40
 801306a:	d83b      	bhi.n	80130e4 <_scanf_float+0xd4>
 801306c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8013070:	b2c8      	uxtb	r0, r1
 8013072:	280e      	cmp	r0, #14
 8013074:	d939      	bls.n	80130ea <_scanf_float+0xda>
 8013076:	b11f      	cbz	r7, 8013080 <_scanf_float+0x70>
 8013078:	6823      	ldr	r3, [r4, #0]
 801307a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801307e:	6023      	str	r3, [r4, #0]
 8013080:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013084:	f1ba 0f01 	cmp.w	sl, #1
 8013088:	f200 8114 	bhi.w	80132b4 <_scanf_float+0x2a4>
 801308c:	9b01      	ldr	r3, [sp, #4]
 801308e:	429e      	cmp	r6, r3
 8013090:	f200 8105 	bhi.w	801329e <_scanf_float+0x28e>
 8013094:	2001      	movs	r0, #1
 8013096:	b007      	add	sp, #28
 8013098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801309c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80130a0:	2a0d      	cmp	r2, #13
 80130a2:	d8e8      	bhi.n	8013076 <_scanf_float+0x66>
 80130a4:	a101      	add	r1, pc, #4	@ (adr r1, 80130ac <_scanf_float+0x9c>)
 80130a6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80130aa:	bf00      	nop
 80130ac:	080131f5 	.word	0x080131f5
 80130b0:	08013077 	.word	0x08013077
 80130b4:	08013077 	.word	0x08013077
 80130b8:	08013077 	.word	0x08013077
 80130bc:	08013251 	.word	0x08013251
 80130c0:	0801322b 	.word	0x0801322b
 80130c4:	08013077 	.word	0x08013077
 80130c8:	08013077 	.word	0x08013077
 80130cc:	08013203 	.word	0x08013203
 80130d0:	08013077 	.word	0x08013077
 80130d4:	08013077 	.word	0x08013077
 80130d8:	08013077 	.word	0x08013077
 80130dc:	08013077 	.word	0x08013077
 80130e0:	080131bf 	.word	0x080131bf
 80130e4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80130e8:	e7da      	b.n	80130a0 <_scanf_float+0x90>
 80130ea:	290e      	cmp	r1, #14
 80130ec:	d8c3      	bhi.n	8013076 <_scanf_float+0x66>
 80130ee:	a001      	add	r0, pc, #4	@ (adr r0, 80130f4 <_scanf_float+0xe4>)
 80130f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80130f4:	080131af 	.word	0x080131af
 80130f8:	08013077 	.word	0x08013077
 80130fc:	080131af 	.word	0x080131af
 8013100:	0801323f 	.word	0x0801323f
 8013104:	08013077 	.word	0x08013077
 8013108:	08013151 	.word	0x08013151
 801310c:	08013195 	.word	0x08013195
 8013110:	08013195 	.word	0x08013195
 8013114:	08013195 	.word	0x08013195
 8013118:	08013195 	.word	0x08013195
 801311c:	08013195 	.word	0x08013195
 8013120:	08013195 	.word	0x08013195
 8013124:	08013195 	.word	0x08013195
 8013128:	08013195 	.word	0x08013195
 801312c:	08013195 	.word	0x08013195
 8013130:	2b6e      	cmp	r3, #110	@ 0x6e
 8013132:	d809      	bhi.n	8013148 <_scanf_float+0x138>
 8013134:	2b60      	cmp	r3, #96	@ 0x60
 8013136:	d8b1      	bhi.n	801309c <_scanf_float+0x8c>
 8013138:	2b54      	cmp	r3, #84	@ 0x54
 801313a:	d07b      	beq.n	8013234 <_scanf_float+0x224>
 801313c:	2b59      	cmp	r3, #89	@ 0x59
 801313e:	d19a      	bne.n	8013076 <_scanf_float+0x66>
 8013140:	2d07      	cmp	r5, #7
 8013142:	d198      	bne.n	8013076 <_scanf_float+0x66>
 8013144:	2508      	movs	r5, #8
 8013146:	e02f      	b.n	80131a8 <_scanf_float+0x198>
 8013148:	2b74      	cmp	r3, #116	@ 0x74
 801314a:	d073      	beq.n	8013234 <_scanf_float+0x224>
 801314c:	2b79      	cmp	r3, #121	@ 0x79
 801314e:	e7f6      	b.n	801313e <_scanf_float+0x12e>
 8013150:	6821      	ldr	r1, [r4, #0]
 8013152:	05c8      	lsls	r0, r1, #23
 8013154:	d51e      	bpl.n	8013194 <_scanf_float+0x184>
 8013156:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801315a:	6021      	str	r1, [r4, #0]
 801315c:	3701      	adds	r7, #1
 801315e:	f1bb 0f00 	cmp.w	fp, #0
 8013162:	d003      	beq.n	801316c <_scanf_float+0x15c>
 8013164:	3201      	adds	r2, #1
 8013166:	f10b 3bff 	add.w	fp, fp, #4294967295
 801316a:	60a2      	str	r2, [r4, #8]
 801316c:	68a3      	ldr	r3, [r4, #8]
 801316e:	3b01      	subs	r3, #1
 8013170:	60a3      	str	r3, [r4, #8]
 8013172:	6923      	ldr	r3, [r4, #16]
 8013174:	3301      	adds	r3, #1
 8013176:	6123      	str	r3, [r4, #16]
 8013178:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801317c:	3b01      	subs	r3, #1
 801317e:	2b00      	cmp	r3, #0
 8013180:	f8c9 3004 	str.w	r3, [r9, #4]
 8013184:	f340 8082 	ble.w	801328c <_scanf_float+0x27c>
 8013188:	f8d9 3000 	ldr.w	r3, [r9]
 801318c:	3301      	adds	r3, #1
 801318e:	f8c9 3000 	str.w	r3, [r9]
 8013192:	e762      	b.n	801305a <_scanf_float+0x4a>
 8013194:	eb1a 0105 	adds.w	r1, sl, r5
 8013198:	f47f af6d 	bne.w	8013076 <_scanf_float+0x66>
 801319c:	6822      	ldr	r2, [r4, #0]
 801319e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80131a2:	6022      	str	r2, [r4, #0]
 80131a4:	460d      	mov	r5, r1
 80131a6:	468a      	mov	sl, r1
 80131a8:	f806 3b01 	strb.w	r3, [r6], #1
 80131ac:	e7de      	b.n	801316c <_scanf_float+0x15c>
 80131ae:	6822      	ldr	r2, [r4, #0]
 80131b0:	0610      	lsls	r0, r2, #24
 80131b2:	f57f af60 	bpl.w	8013076 <_scanf_float+0x66>
 80131b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80131ba:	6022      	str	r2, [r4, #0]
 80131bc:	e7f4      	b.n	80131a8 <_scanf_float+0x198>
 80131be:	f1ba 0f00 	cmp.w	sl, #0
 80131c2:	d10c      	bne.n	80131de <_scanf_float+0x1ce>
 80131c4:	b977      	cbnz	r7, 80131e4 <_scanf_float+0x1d4>
 80131c6:	6822      	ldr	r2, [r4, #0]
 80131c8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80131cc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80131d0:	d108      	bne.n	80131e4 <_scanf_float+0x1d4>
 80131d2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80131d6:	6022      	str	r2, [r4, #0]
 80131d8:	f04f 0a01 	mov.w	sl, #1
 80131dc:	e7e4      	b.n	80131a8 <_scanf_float+0x198>
 80131de:	f1ba 0f02 	cmp.w	sl, #2
 80131e2:	d050      	beq.n	8013286 <_scanf_float+0x276>
 80131e4:	2d01      	cmp	r5, #1
 80131e6:	d002      	beq.n	80131ee <_scanf_float+0x1de>
 80131e8:	2d04      	cmp	r5, #4
 80131ea:	f47f af44 	bne.w	8013076 <_scanf_float+0x66>
 80131ee:	3501      	adds	r5, #1
 80131f0:	b2ed      	uxtb	r5, r5
 80131f2:	e7d9      	b.n	80131a8 <_scanf_float+0x198>
 80131f4:	f1ba 0f01 	cmp.w	sl, #1
 80131f8:	f47f af3d 	bne.w	8013076 <_scanf_float+0x66>
 80131fc:	f04f 0a02 	mov.w	sl, #2
 8013200:	e7d2      	b.n	80131a8 <_scanf_float+0x198>
 8013202:	b975      	cbnz	r5, 8013222 <_scanf_float+0x212>
 8013204:	2f00      	cmp	r7, #0
 8013206:	f47f af37 	bne.w	8013078 <_scanf_float+0x68>
 801320a:	6822      	ldr	r2, [r4, #0]
 801320c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8013210:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8013214:	f040 8103 	bne.w	801341e <_scanf_float+0x40e>
 8013218:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801321c:	6022      	str	r2, [r4, #0]
 801321e:	2501      	movs	r5, #1
 8013220:	e7c2      	b.n	80131a8 <_scanf_float+0x198>
 8013222:	2d03      	cmp	r5, #3
 8013224:	d0e3      	beq.n	80131ee <_scanf_float+0x1de>
 8013226:	2d05      	cmp	r5, #5
 8013228:	e7df      	b.n	80131ea <_scanf_float+0x1da>
 801322a:	2d02      	cmp	r5, #2
 801322c:	f47f af23 	bne.w	8013076 <_scanf_float+0x66>
 8013230:	2503      	movs	r5, #3
 8013232:	e7b9      	b.n	80131a8 <_scanf_float+0x198>
 8013234:	2d06      	cmp	r5, #6
 8013236:	f47f af1e 	bne.w	8013076 <_scanf_float+0x66>
 801323a:	2507      	movs	r5, #7
 801323c:	e7b4      	b.n	80131a8 <_scanf_float+0x198>
 801323e:	6822      	ldr	r2, [r4, #0]
 8013240:	0591      	lsls	r1, r2, #22
 8013242:	f57f af18 	bpl.w	8013076 <_scanf_float+0x66>
 8013246:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801324a:	6022      	str	r2, [r4, #0]
 801324c:	9702      	str	r7, [sp, #8]
 801324e:	e7ab      	b.n	80131a8 <_scanf_float+0x198>
 8013250:	6822      	ldr	r2, [r4, #0]
 8013252:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8013256:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801325a:	d005      	beq.n	8013268 <_scanf_float+0x258>
 801325c:	0550      	lsls	r0, r2, #21
 801325e:	f57f af0a 	bpl.w	8013076 <_scanf_float+0x66>
 8013262:	2f00      	cmp	r7, #0
 8013264:	f000 80db 	beq.w	801341e <_scanf_float+0x40e>
 8013268:	0591      	lsls	r1, r2, #22
 801326a:	bf58      	it	pl
 801326c:	9902      	ldrpl	r1, [sp, #8]
 801326e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013272:	bf58      	it	pl
 8013274:	1a79      	subpl	r1, r7, r1
 8013276:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801327a:	bf58      	it	pl
 801327c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8013280:	6022      	str	r2, [r4, #0]
 8013282:	2700      	movs	r7, #0
 8013284:	e790      	b.n	80131a8 <_scanf_float+0x198>
 8013286:	f04f 0a03 	mov.w	sl, #3
 801328a:	e78d      	b.n	80131a8 <_scanf_float+0x198>
 801328c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013290:	4649      	mov	r1, r9
 8013292:	4640      	mov	r0, r8
 8013294:	4798      	blx	r3
 8013296:	2800      	cmp	r0, #0
 8013298:	f43f aedf 	beq.w	801305a <_scanf_float+0x4a>
 801329c:	e6eb      	b.n	8013076 <_scanf_float+0x66>
 801329e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80132a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80132a6:	464a      	mov	r2, r9
 80132a8:	4640      	mov	r0, r8
 80132aa:	4798      	blx	r3
 80132ac:	6923      	ldr	r3, [r4, #16]
 80132ae:	3b01      	subs	r3, #1
 80132b0:	6123      	str	r3, [r4, #16]
 80132b2:	e6eb      	b.n	801308c <_scanf_float+0x7c>
 80132b4:	1e6b      	subs	r3, r5, #1
 80132b6:	2b06      	cmp	r3, #6
 80132b8:	d824      	bhi.n	8013304 <_scanf_float+0x2f4>
 80132ba:	2d02      	cmp	r5, #2
 80132bc:	d836      	bhi.n	801332c <_scanf_float+0x31c>
 80132be:	9b01      	ldr	r3, [sp, #4]
 80132c0:	429e      	cmp	r6, r3
 80132c2:	f67f aee7 	bls.w	8013094 <_scanf_float+0x84>
 80132c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80132ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80132ce:	464a      	mov	r2, r9
 80132d0:	4640      	mov	r0, r8
 80132d2:	4798      	blx	r3
 80132d4:	6923      	ldr	r3, [r4, #16]
 80132d6:	3b01      	subs	r3, #1
 80132d8:	6123      	str	r3, [r4, #16]
 80132da:	e7f0      	b.n	80132be <_scanf_float+0x2ae>
 80132dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80132e0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80132e4:	464a      	mov	r2, r9
 80132e6:	4640      	mov	r0, r8
 80132e8:	4798      	blx	r3
 80132ea:	6923      	ldr	r3, [r4, #16]
 80132ec:	3b01      	subs	r3, #1
 80132ee:	6123      	str	r3, [r4, #16]
 80132f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80132f4:	fa5f fa8a 	uxtb.w	sl, sl
 80132f8:	f1ba 0f02 	cmp.w	sl, #2
 80132fc:	d1ee      	bne.n	80132dc <_scanf_float+0x2cc>
 80132fe:	3d03      	subs	r5, #3
 8013300:	b2ed      	uxtb	r5, r5
 8013302:	1b76      	subs	r6, r6, r5
 8013304:	6823      	ldr	r3, [r4, #0]
 8013306:	05da      	lsls	r2, r3, #23
 8013308:	d530      	bpl.n	801336c <_scanf_float+0x35c>
 801330a:	055b      	lsls	r3, r3, #21
 801330c:	d511      	bpl.n	8013332 <_scanf_float+0x322>
 801330e:	9b01      	ldr	r3, [sp, #4]
 8013310:	429e      	cmp	r6, r3
 8013312:	f67f aebf 	bls.w	8013094 <_scanf_float+0x84>
 8013316:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801331a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801331e:	464a      	mov	r2, r9
 8013320:	4640      	mov	r0, r8
 8013322:	4798      	blx	r3
 8013324:	6923      	ldr	r3, [r4, #16]
 8013326:	3b01      	subs	r3, #1
 8013328:	6123      	str	r3, [r4, #16]
 801332a:	e7f0      	b.n	801330e <_scanf_float+0x2fe>
 801332c:	46aa      	mov	sl, r5
 801332e:	46b3      	mov	fp, r6
 8013330:	e7de      	b.n	80132f0 <_scanf_float+0x2e0>
 8013332:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8013336:	6923      	ldr	r3, [r4, #16]
 8013338:	2965      	cmp	r1, #101	@ 0x65
 801333a:	f103 33ff 	add.w	r3, r3, #4294967295
 801333e:	f106 35ff 	add.w	r5, r6, #4294967295
 8013342:	6123      	str	r3, [r4, #16]
 8013344:	d00c      	beq.n	8013360 <_scanf_float+0x350>
 8013346:	2945      	cmp	r1, #69	@ 0x45
 8013348:	d00a      	beq.n	8013360 <_scanf_float+0x350>
 801334a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801334e:	464a      	mov	r2, r9
 8013350:	4640      	mov	r0, r8
 8013352:	4798      	blx	r3
 8013354:	6923      	ldr	r3, [r4, #16]
 8013356:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801335a:	3b01      	subs	r3, #1
 801335c:	1eb5      	subs	r5, r6, #2
 801335e:	6123      	str	r3, [r4, #16]
 8013360:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013364:	464a      	mov	r2, r9
 8013366:	4640      	mov	r0, r8
 8013368:	4798      	blx	r3
 801336a:	462e      	mov	r6, r5
 801336c:	6822      	ldr	r2, [r4, #0]
 801336e:	f012 0210 	ands.w	r2, r2, #16
 8013372:	d001      	beq.n	8013378 <_scanf_float+0x368>
 8013374:	2000      	movs	r0, #0
 8013376:	e68e      	b.n	8013096 <_scanf_float+0x86>
 8013378:	7032      	strb	r2, [r6, #0]
 801337a:	6823      	ldr	r3, [r4, #0]
 801337c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8013380:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013384:	d125      	bne.n	80133d2 <_scanf_float+0x3c2>
 8013386:	9b02      	ldr	r3, [sp, #8]
 8013388:	429f      	cmp	r7, r3
 801338a:	d00a      	beq.n	80133a2 <_scanf_float+0x392>
 801338c:	1bda      	subs	r2, r3, r7
 801338e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8013392:	429e      	cmp	r6, r3
 8013394:	bf28      	it	cs
 8013396:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801339a:	4922      	ldr	r1, [pc, #136]	@ (8013424 <_scanf_float+0x414>)
 801339c:	4630      	mov	r0, r6
 801339e:	f000 fb09 	bl	80139b4 <siprintf>
 80133a2:	9901      	ldr	r1, [sp, #4]
 80133a4:	2200      	movs	r2, #0
 80133a6:	4640      	mov	r0, r8
 80133a8:	f7ff f8a2 	bl	80124f0 <_strtod_r>
 80133ac:	9b03      	ldr	r3, [sp, #12]
 80133ae:	6821      	ldr	r1, [r4, #0]
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	f011 0f02 	tst.w	r1, #2
 80133b6:	ec57 6b10 	vmov	r6, r7, d0
 80133ba:	f103 0204 	add.w	r2, r3, #4
 80133be:	d015      	beq.n	80133ec <_scanf_float+0x3dc>
 80133c0:	9903      	ldr	r1, [sp, #12]
 80133c2:	600a      	str	r2, [r1, #0]
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	e9c3 6700 	strd	r6, r7, [r3]
 80133ca:	68e3      	ldr	r3, [r4, #12]
 80133cc:	3301      	adds	r3, #1
 80133ce:	60e3      	str	r3, [r4, #12]
 80133d0:	e7d0      	b.n	8013374 <_scanf_float+0x364>
 80133d2:	9b04      	ldr	r3, [sp, #16]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d0e4      	beq.n	80133a2 <_scanf_float+0x392>
 80133d8:	9905      	ldr	r1, [sp, #20]
 80133da:	230a      	movs	r3, #10
 80133dc:	3101      	adds	r1, #1
 80133de:	4640      	mov	r0, r8
 80133e0:	f7ff f912 	bl	8012608 <_strtol_r>
 80133e4:	9b04      	ldr	r3, [sp, #16]
 80133e6:	9e05      	ldr	r6, [sp, #20]
 80133e8:	1ac2      	subs	r2, r0, r3
 80133ea:	e7d0      	b.n	801338e <_scanf_float+0x37e>
 80133ec:	f011 0f04 	tst.w	r1, #4
 80133f0:	9903      	ldr	r1, [sp, #12]
 80133f2:	600a      	str	r2, [r1, #0]
 80133f4:	d1e6      	bne.n	80133c4 <_scanf_float+0x3b4>
 80133f6:	681d      	ldr	r5, [r3, #0]
 80133f8:	4632      	mov	r2, r6
 80133fa:	463b      	mov	r3, r7
 80133fc:	4630      	mov	r0, r6
 80133fe:	4639      	mov	r1, r7
 8013400:	f7ed fbc4 	bl	8000b8c <__aeabi_dcmpun>
 8013404:	b128      	cbz	r0, 8013412 <_scanf_float+0x402>
 8013406:	4808      	ldr	r0, [pc, #32]	@ (8013428 <_scanf_float+0x418>)
 8013408:	f000 fe2e 	bl	8014068 <nanf>
 801340c:	ed85 0a00 	vstr	s0, [r5]
 8013410:	e7db      	b.n	80133ca <_scanf_float+0x3ba>
 8013412:	4630      	mov	r0, r6
 8013414:	4639      	mov	r1, r7
 8013416:	f7ed fc17 	bl	8000c48 <__aeabi_d2f>
 801341a:	6028      	str	r0, [r5, #0]
 801341c:	e7d5      	b.n	80133ca <_scanf_float+0x3ba>
 801341e:	2700      	movs	r7, #0
 8013420:	e62e      	b.n	8013080 <_scanf_float+0x70>
 8013422:	bf00      	nop
 8013424:	0801839a 	.word	0x0801839a
 8013428:	08018363 	.word	0x08018363

0801342c <_fclose_r>:
 801342c:	b570      	push	{r4, r5, r6, lr}
 801342e:	4605      	mov	r5, r0
 8013430:	460c      	mov	r4, r1
 8013432:	b1b9      	cbz	r1, 8013464 <_fclose_r+0x38>
 8013434:	b118      	cbz	r0, 801343e <_fclose_r+0x12>
 8013436:	6a03      	ldr	r3, [r0, #32]
 8013438:	b90b      	cbnz	r3, 801343e <_fclose_r+0x12>
 801343a:	f000 f9f3 	bl	8013824 <__sinit>
 801343e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013444:	07d6      	lsls	r6, r2, #31
 8013446:	d404      	bmi.n	8013452 <_fclose_r+0x26>
 8013448:	0598      	lsls	r0, r3, #22
 801344a:	d40e      	bmi.n	801346a <_fclose_r+0x3e>
 801344c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801344e:	f000 fdf3 	bl	8014038 <__retarget_lock_acquire_recursive>
 8013452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013456:	b943      	cbnz	r3, 801346a <_fclose_r+0x3e>
 8013458:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801345a:	07d9      	lsls	r1, r3, #31
 801345c:	d402      	bmi.n	8013464 <_fclose_r+0x38>
 801345e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013460:	f000 fdeb 	bl	801403a <__retarget_lock_release_recursive>
 8013464:	2600      	movs	r6, #0
 8013466:	4630      	mov	r0, r6
 8013468:	bd70      	pop	{r4, r5, r6, pc}
 801346a:	4621      	mov	r1, r4
 801346c:	4628      	mov	r0, r5
 801346e:	f000 f83b 	bl	80134e8 <__sflush_r>
 8013472:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013474:	4606      	mov	r6, r0
 8013476:	b133      	cbz	r3, 8013486 <_fclose_r+0x5a>
 8013478:	6a21      	ldr	r1, [r4, #32]
 801347a:	4628      	mov	r0, r5
 801347c:	4798      	blx	r3
 801347e:	2800      	cmp	r0, #0
 8013480:	bfb8      	it	lt
 8013482:	f04f 36ff 	movlt.w	r6, #4294967295
 8013486:	89a3      	ldrh	r3, [r4, #12]
 8013488:	061a      	lsls	r2, r3, #24
 801348a:	d503      	bpl.n	8013494 <_fclose_r+0x68>
 801348c:	6921      	ldr	r1, [r4, #16]
 801348e:	4628      	mov	r0, r5
 8013490:	f001 fc52 	bl	8014d38 <_free_r>
 8013494:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013496:	b141      	cbz	r1, 80134aa <_fclose_r+0x7e>
 8013498:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801349c:	4299      	cmp	r1, r3
 801349e:	d002      	beq.n	80134a6 <_fclose_r+0x7a>
 80134a0:	4628      	mov	r0, r5
 80134a2:	f001 fc49 	bl	8014d38 <_free_r>
 80134a6:	2300      	movs	r3, #0
 80134a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80134aa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80134ac:	b121      	cbz	r1, 80134b8 <_fclose_r+0x8c>
 80134ae:	4628      	mov	r0, r5
 80134b0:	f001 fc42 	bl	8014d38 <_free_r>
 80134b4:	2300      	movs	r3, #0
 80134b6:	64a3      	str	r3, [r4, #72]	@ 0x48
 80134b8:	f000 f956 	bl	8013768 <__sfp_lock_acquire>
 80134bc:	2300      	movs	r3, #0
 80134be:	81a3      	strh	r3, [r4, #12]
 80134c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80134c2:	07db      	lsls	r3, r3, #31
 80134c4:	d402      	bmi.n	80134cc <_fclose_r+0xa0>
 80134c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80134c8:	f000 fdb7 	bl	801403a <__retarget_lock_release_recursive>
 80134cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80134ce:	f000 fdb2 	bl	8014036 <__retarget_lock_close_recursive>
 80134d2:	f000 f94f 	bl	8013774 <__sfp_lock_release>
 80134d6:	e7c6      	b.n	8013466 <_fclose_r+0x3a>

080134d8 <fclose>:
 80134d8:	4b02      	ldr	r3, [pc, #8]	@ (80134e4 <fclose+0xc>)
 80134da:	4601      	mov	r1, r0
 80134dc:	6818      	ldr	r0, [r3, #0]
 80134de:	f7ff bfa5 	b.w	801342c <_fclose_r>
 80134e2:	bf00      	nop
 80134e4:	200001d4 	.word	0x200001d4

080134e8 <__sflush_r>:
 80134e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80134ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134f0:	0716      	lsls	r6, r2, #28
 80134f2:	4605      	mov	r5, r0
 80134f4:	460c      	mov	r4, r1
 80134f6:	d454      	bmi.n	80135a2 <__sflush_r+0xba>
 80134f8:	684b      	ldr	r3, [r1, #4]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	dc02      	bgt.n	8013504 <__sflush_r+0x1c>
 80134fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013500:	2b00      	cmp	r3, #0
 8013502:	dd48      	ble.n	8013596 <__sflush_r+0xae>
 8013504:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013506:	2e00      	cmp	r6, #0
 8013508:	d045      	beq.n	8013596 <__sflush_r+0xae>
 801350a:	2300      	movs	r3, #0
 801350c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013510:	682f      	ldr	r7, [r5, #0]
 8013512:	6a21      	ldr	r1, [r4, #32]
 8013514:	602b      	str	r3, [r5, #0]
 8013516:	d030      	beq.n	801357a <__sflush_r+0x92>
 8013518:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801351a:	89a3      	ldrh	r3, [r4, #12]
 801351c:	0759      	lsls	r1, r3, #29
 801351e:	d505      	bpl.n	801352c <__sflush_r+0x44>
 8013520:	6863      	ldr	r3, [r4, #4]
 8013522:	1ad2      	subs	r2, r2, r3
 8013524:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013526:	b10b      	cbz	r3, 801352c <__sflush_r+0x44>
 8013528:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801352a:	1ad2      	subs	r2, r2, r3
 801352c:	2300      	movs	r3, #0
 801352e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013530:	6a21      	ldr	r1, [r4, #32]
 8013532:	4628      	mov	r0, r5
 8013534:	47b0      	blx	r6
 8013536:	1c43      	adds	r3, r0, #1
 8013538:	89a3      	ldrh	r3, [r4, #12]
 801353a:	d106      	bne.n	801354a <__sflush_r+0x62>
 801353c:	6829      	ldr	r1, [r5, #0]
 801353e:	291d      	cmp	r1, #29
 8013540:	d82b      	bhi.n	801359a <__sflush_r+0xb2>
 8013542:	4a2a      	ldr	r2, [pc, #168]	@ (80135ec <__sflush_r+0x104>)
 8013544:	40ca      	lsrs	r2, r1
 8013546:	07d6      	lsls	r6, r2, #31
 8013548:	d527      	bpl.n	801359a <__sflush_r+0xb2>
 801354a:	2200      	movs	r2, #0
 801354c:	6062      	str	r2, [r4, #4]
 801354e:	04d9      	lsls	r1, r3, #19
 8013550:	6922      	ldr	r2, [r4, #16]
 8013552:	6022      	str	r2, [r4, #0]
 8013554:	d504      	bpl.n	8013560 <__sflush_r+0x78>
 8013556:	1c42      	adds	r2, r0, #1
 8013558:	d101      	bne.n	801355e <__sflush_r+0x76>
 801355a:	682b      	ldr	r3, [r5, #0]
 801355c:	b903      	cbnz	r3, 8013560 <__sflush_r+0x78>
 801355e:	6560      	str	r0, [r4, #84]	@ 0x54
 8013560:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013562:	602f      	str	r7, [r5, #0]
 8013564:	b1b9      	cbz	r1, 8013596 <__sflush_r+0xae>
 8013566:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801356a:	4299      	cmp	r1, r3
 801356c:	d002      	beq.n	8013574 <__sflush_r+0x8c>
 801356e:	4628      	mov	r0, r5
 8013570:	f001 fbe2 	bl	8014d38 <_free_r>
 8013574:	2300      	movs	r3, #0
 8013576:	6363      	str	r3, [r4, #52]	@ 0x34
 8013578:	e00d      	b.n	8013596 <__sflush_r+0xae>
 801357a:	2301      	movs	r3, #1
 801357c:	4628      	mov	r0, r5
 801357e:	47b0      	blx	r6
 8013580:	4602      	mov	r2, r0
 8013582:	1c50      	adds	r0, r2, #1
 8013584:	d1c9      	bne.n	801351a <__sflush_r+0x32>
 8013586:	682b      	ldr	r3, [r5, #0]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d0c6      	beq.n	801351a <__sflush_r+0x32>
 801358c:	2b1d      	cmp	r3, #29
 801358e:	d001      	beq.n	8013594 <__sflush_r+0xac>
 8013590:	2b16      	cmp	r3, #22
 8013592:	d11e      	bne.n	80135d2 <__sflush_r+0xea>
 8013594:	602f      	str	r7, [r5, #0]
 8013596:	2000      	movs	r0, #0
 8013598:	e022      	b.n	80135e0 <__sflush_r+0xf8>
 801359a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801359e:	b21b      	sxth	r3, r3
 80135a0:	e01b      	b.n	80135da <__sflush_r+0xf2>
 80135a2:	690f      	ldr	r7, [r1, #16]
 80135a4:	2f00      	cmp	r7, #0
 80135a6:	d0f6      	beq.n	8013596 <__sflush_r+0xae>
 80135a8:	0793      	lsls	r3, r2, #30
 80135aa:	680e      	ldr	r6, [r1, #0]
 80135ac:	bf08      	it	eq
 80135ae:	694b      	ldreq	r3, [r1, #20]
 80135b0:	600f      	str	r7, [r1, #0]
 80135b2:	bf18      	it	ne
 80135b4:	2300      	movne	r3, #0
 80135b6:	eba6 0807 	sub.w	r8, r6, r7
 80135ba:	608b      	str	r3, [r1, #8]
 80135bc:	f1b8 0f00 	cmp.w	r8, #0
 80135c0:	dde9      	ble.n	8013596 <__sflush_r+0xae>
 80135c2:	6a21      	ldr	r1, [r4, #32]
 80135c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80135c6:	4643      	mov	r3, r8
 80135c8:	463a      	mov	r2, r7
 80135ca:	4628      	mov	r0, r5
 80135cc:	47b0      	blx	r6
 80135ce:	2800      	cmp	r0, #0
 80135d0:	dc08      	bgt.n	80135e4 <__sflush_r+0xfc>
 80135d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80135d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80135da:	81a3      	strh	r3, [r4, #12]
 80135dc:	f04f 30ff 	mov.w	r0, #4294967295
 80135e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135e4:	4407      	add	r7, r0
 80135e6:	eba8 0800 	sub.w	r8, r8, r0
 80135ea:	e7e7      	b.n	80135bc <__sflush_r+0xd4>
 80135ec:	20400001 	.word	0x20400001

080135f0 <_fflush_r>:
 80135f0:	b538      	push	{r3, r4, r5, lr}
 80135f2:	690b      	ldr	r3, [r1, #16]
 80135f4:	4605      	mov	r5, r0
 80135f6:	460c      	mov	r4, r1
 80135f8:	b913      	cbnz	r3, 8013600 <_fflush_r+0x10>
 80135fa:	2500      	movs	r5, #0
 80135fc:	4628      	mov	r0, r5
 80135fe:	bd38      	pop	{r3, r4, r5, pc}
 8013600:	b118      	cbz	r0, 801360a <_fflush_r+0x1a>
 8013602:	6a03      	ldr	r3, [r0, #32]
 8013604:	b90b      	cbnz	r3, 801360a <_fflush_r+0x1a>
 8013606:	f000 f90d 	bl	8013824 <__sinit>
 801360a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d0f3      	beq.n	80135fa <_fflush_r+0xa>
 8013612:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013614:	07d0      	lsls	r0, r2, #31
 8013616:	d404      	bmi.n	8013622 <_fflush_r+0x32>
 8013618:	0599      	lsls	r1, r3, #22
 801361a:	d402      	bmi.n	8013622 <_fflush_r+0x32>
 801361c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801361e:	f000 fd0b 	bl	8014038 <__retarget_lock_acquire_recursive>
 8013622:	4628      	mov	r0, r5
 8013624:	4621      	mov	r1, r4
 8013626:	f7ff ff5f 	bl	80134e8 <__sflush_r>
 801362a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801362c:	07da      	lsls	r2, r3, #31
 801362e:	4605      	mov	r5, r0
 8013630:	d4e4      	bmi.n	80135fc <_fflush_r+0xc>
 8013632:	89a3      	ldrh	r3, [r4, #12]
 8013634:	059b      	lsls	r3, r3, #22
 8013636:	d4e1      	bmi.n	80135fc <_fflush_r+0xc>
 8013638:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801363a:	f000 fcfe 	bl	801403a <__retarget_lock_release_recursive>
 801363e:	e7dd      	b.n	80135fc <_fflush_r+0xc>

08013640 <fflush>:
 8013640:	4601      	mov	r1, r0
 8013642:	b920      	cbnz	r0, 801364e <fflush+0xe>
 8013644:	4a04      	ldr	r2, [pc, #16]	@ (8013658 <fflush+0x18>)
 8013646:	4905      	ldr	r1, [pc, #20]	@ (801365c <fflush+0x1c>)
 8013648:	4805      	ldr	r0, [pc, #20]	@ (8013660 <fflush+0x20>)
 801364a:	f000 b915 	b.w	8013878 <_fwalk_sglue>
 801364e:	4b05      	ldr	r3, [pc, #20]	@ (8013664 <fflush+0x24>)
 8013650:	6818      	ldr	r0, [r3, #0]
 8013652:	f7ff bfcd 	b.w	80135f0 <_fflush_r>
 8013656:	bf00      	nop
 8013658:	2000005c 	.word	0x2000005c
 801365c:	080135f1 	.word	0x080135f1
 8013660:	200001d8 	.word	0x200001d8
 8013664:	200001d4 	.word	0x200001d4

08013668 <std>:
 8013668:	2300      	movs	r3, #0
 801366a:	b510      	push	{r4, lr}
 801366c:	4604      	mov	r4, r0
 801366e:	e9c0 3300 	strd	r3, r3, [r0]
 8013672:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013676:	6083      	str	r3, [r0, #8]
 8013678:	8181      	strh	r1, [r0, #12]
 801367a:	6643      	str	r3, [r0, #100]	@ 0x64
 801367c:	81c2      	strh	r2, [r0, #14]
 801367e:	6183      	str	r3, [r0, #24]
 8013680:	4619      	mov	r1, r3
 8013682:	2208      	movs	r2, #8
 8013684:	305c      	adds	r0, #92	@ 0x5c
 8013686:	f000 fb73 	bl	8013d70 <memset>
 801368a:	4b0d      	ldr	r3, [pc, #52]	@ (80136c0 <std+0x58>)
 801368c:	6263      	str	r3, [r4, #36]	@ 0x24
 801368e:	4b0d      	ldr	r3, [pc, #52]	@ (80136c4 <std+0x5c>)
 8013690:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013692:	4b0d      	ldr	r3, [pc, #52]	@ (80136c8 <std+0x60>)
 8013694:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013696:	4b0d      	ldr	r3, [pc, #52]	@ (80136cc <std+0x64>)
 8013698:	6323      	str	r3, [r4, #48]	@ 0x30
 801369a:	4b0d      	ldr	r3, [pc, #52]	@ (80136d0 <std+0x68>)
 801369c:	6224      	str	r4, [r4, #32]
 801369e:	429c      	cmp	r4, r3
 80136a0:	d006      	beq.n	80136b0 <std+0x48>
 80136a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80136a6:	4294      	cmp	r4, r2
 80136a8:	d002      	beq.n	80136b0 <std+0x48>
 80136aa:	33d0      	adds	r3, #208	@ 0xd0
 80136ac:	429c      	cmp	r4, r3
 80136ae:	d105      	bne.n	80136bc <std+0x54>
 80136b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80136b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136b8:	f000 bcbc 	b.w	8014034 <__retarget_lock_init_recursive>
 80136bc:	bd10      	pop	{r4, pc}
 80136be:	bf00      	nop
 80136c0:	080139f9 	.word	0x080139f9
 80136c4:	08013a1b 	.word	0x08013a1b
 80136c8:	08013a53 	.word	0x08013a53
 80136cc:	08013a77 	.word	0x08013a77
 80136d0:	20000654 	.word	0x20000654

080136d4 <stdio_exit_handler>:
 80136d4:	4a02      	ldr	r2, [pc, #8]	@ (80136e0 <stdio_exit_handler+0xc>)
 80136d6:	4903      	ldr	r1, [pc, #12]	@ (80136e4 <stdio_exit_handler+0x10>)
 80136d8:	4803      	ldr	r0, [pc, #12]	@ (80136e8 <stdio_exit_handler+0x14>)
 80136da:	f000 b8cd 	b.w	8013878 <_fwalk_sglue>
 80136de:	bf00      	nop
 80136e0:	2000005c 	.word	0x2000005c
 80136e4:	080135f1 	.word	0x080135f1
 80136e8:	200001d8 	.word	0x200001d8

080136ec <cleanup_stdio>:
 80136ec:	6841      	ldr	r1, [r0, #4]
 80136ee:	4b0c      	ldr	r3, [pc, #48]	@ (8013720 <cleanup_stdio+0x34>)
 80136f0:	4299      	cmp	r1, r3
 80136f2:	b510      	push	{r4, lr}
 80136f4:	4604      	mov	r4, r0
 80136f6:	d001      	beq.n	80136fc <cleanup_stdio+0x10>
 80136f8:	f7ff ff7a 	bl	80135f0 <_fflush_r>
 80136fc:	68a1      	ldr	r1, [r4, #8]
 80136fe:	4b09      	ldr	r3, [pc, #36]	@ (8013724 <cleanup_stdio+0x38>)
 8013700:	4299      	cmp	r1, r3
 8013702:	d002      	beq.n	801370a <cleanup_stdio+0x1e>
 8013704:	4620      	mov	r0, r4
 8013706:	f7ff ff73 	bl	80135f0 <_fflush_r>
 801370a:	68e1      	ldr	r1, [r4, #12]
 801370c:	4b06      	ldr	r3, [pc, #24]	@ (8013728 <cleanup_stdio+0x3c>)
 801370e:	4299      	cmp	r1, r3
 8013710:	d004      	beq.n	801371c <cleanup_stdio+0x30>
 8013712:	4620      	mov	r0, r4
 8013714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013718:	f7ff bf6a 	b.w	80135f0 <_fflush_r>
 801371c:	bd10      	pop	{r4, pc}
 801371e:	bf00      	nop
 8013720:	20000654 	.word	0x20000654
 8013724:	200006bc 	.word	0x200006bc
 8013728:	20000724 	.word	0x20000724

0801372c <global_stdio_init.part.0>:
 801372c:	b510      	push	{r4, lr}
 801372e:	4b0b      	ldr	r3, [pc, #44]	@ (801375c <global_stdio_init.part.0+0x30>)
 8013730:	4c0b      	ldr	r4, [pc, #44]	@ (8013760 <global_stdio_init.part.0+0x34>)
 8013732:	4a0c      	ldr	r2, [pc, #48]	@ (8013764 <global_stdio_init.part.0+0x38>)
 8013734:	601a      	str	r2, [r3, #0]
 8013736:	4620      	mov	r0, r4
 8013738:	2200      	movs	r2, #0
 801373a:	2104      	movs	r1, #4
 801373c:	f7ff ff94 	bl	8013668 <std>
 8013740:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013744:	2201      	movs	r2, #1
 8013746:	2109      	movs	r1, #9
 8013748:	f7ff ff8e 	bl	8013668 <std>
 801374c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013750:	2202      	movs	r2, #2
 8013752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013756:	2112      	movs	r1, #18
 8013758:	f7ff bf86 	b.w	8013668 <std>
 801375c:	2000078c 	.word	0x2000078c
 8013760:	20000654 	.word	0x20000654
 8013764:	080136d5 	.word	0x080136d5

08013768 <__sfp_lock_acquire>:
 8013768:	4801      	ldr	r0, [pc, #4]	@ (8013770 <__sfp_lock_acquire+0x8>)
 801376a:	f000 bc65 	b.w	8014038 <__retarget_lock_acquire_recursive>
 801376e:	bf00      	nop
 8013770:	20000794 	.word	0x20000794

08013774 <__sfp_lock_release>:
 8013774:	4801      	ldr	r0, [pc, #4]	@ (801377c <__sfp_lock_release+0x8>)
 8013776:	f000 bc60 	b.w	801403a <__retarget_lock_release_recursive>
 801377a:	bf00      	nop
 801377c:	20000794 	.word	0x20000794

08013780 <__sfp>:
 8013780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013782:	4607      	mov	r7, r0
 8013784:	f7ff fff0 	bl	8013768 <__sfp_lock_acquire>
 8013788:	4b23      	ldr	r3, [pc, #140]	@ (8013818 <__sfp+0x98>)
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	b90b      	cbnz	r3, 8013792 <__sfp+0x12>
 801378e:	f7ff ffcd 	bl	801372c <global_stdio_init.part.0>
 8013792:	4e22      	ldr	r6, [pc, #136]	@ (801381c <__sfp+0x9c>)
 8013794:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013798:	3b01      	subs	r3, #1
 801379a:	d50f      	bpl.n	80137bc <__sfp+0x3c>
 801379c:	6835      	ldr	r5, [r6, #0]
 801379e:	2d00      	cmp	r5, #0
 80137a0:	d137      	bne.n	8013812 <__sfp+0x92>
 80137a2:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 80137a6:	4638      	mov	r0, r7
 80137a8:	f7fe f816 	bl	80117d8 <_malloc_r>
 80137ac:	4604      	mov	r4, r0
 80137ae:	bb28      	cbnz	r0, 80137fc <__sfp+0x7c>
 80137b0:	6030      	str	r0, [r6, #0]
 80137b2:	f7ff ffdf 	bl	8013774 <__sfp_lock_release>
 80137b6:	230c      	movs	r3, #12
 80137b8:	603b      	str	r3, [r7, #0]
 80137ba:	e01b      	b.n	80137f4 <__sfp+0x74>
 80137bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80137c0:	b9d5      	cbnz	r5, 80137f8 <__sfp+0x78>
 80137c2:	4b17      	ldr	r3, [pc, #92]	@ (8013820 <__sfp+0xa0>)
 80137c4:	60e3      	str	r3, [r4, #12]
 80137c6:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80137ca:	6665      	str	r5, [r4, #100]	@ 0x64
 80137cc:	f000 fc32 	bl	8014034 <__retarget_lock_init_recursive>
 80137d0:	f7ff ffd0 	bl	8013774 <__sfp_lock_release>
 80137d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80137d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80137dc:	6025      	str	r5, [r4, #0]
 80137de:	61a5      	str	r5, [r4, #24]
 80137e0:	2208      	movs	r2, #8
 80137e2:	4629      	mov	r1, r5
 80137e4:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 80137e8:	f000 fac2 	bl	8013d70 <memset>
 80137ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 80137f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 80137f4:	4620      	mov	r0, r4
 80137f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137f8:	3468      	adds	r4, #104	@ 0x68
 80137fa:	e7cd      	b.n	8013798 <__sfp+0x18>
 80137fc:	2304      	movs	r3, #4
 80137fe:	6005      	str	r5, [r0, #0]
 8013800:	6043      	str	r3, [r0, #4]
 8013802:	300c      	adds	r0, #12
 8013804:	60a0      	str	r0, [r4, #8]
 8013806:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 801380a:	4629      	mov	r1, r5
 801380c:	f000 fab0 	bl	8013d70 <memset>
 8013810:	6034      	str	r4, [r6, #0]
 8013812:	6836      	ldr	r6, [r6, #0]
 8013814:	e7be      	b.n	8013794 <__sfp+0x14>
 8013816:	bf00      	nop
 8013818:	2000078c 	.word	0x2000078c
 801381c:	2000005c 	.word	0x2000005c
 8013820:	ffff0001 	.word	0xffff0001

08013824 <__sinit>:
 8013824:	b510      	push	{r4, lr}
 8013826:	4604      	mov	r4, r0
 8013828:	f7ff ff9e 	bl	8013768 <__sfp_lock_acquire>
 801382c:	6a23      	ldr	r3, [r4, #32]
 801382e:	b11b      	cbz	r3, 8013838 <__sinit+0x14>
 8013830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013834:	f7ff bf9e 	b.w	8013774 <__sfp_lock_release>
 8013838:	4b04      	ldr	r3, [pc, #16]	@ (801384c <__sinit+0x28>)
 801383a:	6223      	str	r3, [r4, #32]
 801383c:	4b04      	ldr	r3, [pc, #16]	@ (8013850 <__sinit+0x2c>)
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d1f5      	bne.n	8013830 <__sinit+0xc>
 8013844:	f7ff ff72 	bl	801372c <global_stdio_init.part.0>
 8013848:	e7f2      	b.n	8013830 <__sinit+0xc>
 801384a:	bf00      	nop
 801384c:	080136ed 	.word	0x080136ed
 8013850:	2000078c 	.word	0x2000078c

08013854 <fiprintf>:
 8013854:	b40e      	push	{r1, r2, r3}
 8013856:	b503      	push	{r0, r1, lr}
 8013858:	4601      	mov	r1, r0
 801385a:	ab03      	add	r3, sp, #12
 801385c:	4805      	ldr	r0, [pc, #20]	@ (8013874 <fiprintf+0x20>)
 801385e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013862:	6800      	ldr	r0, [r0, #0]
 8013864:	9301      	str	r3, [sp, #4]
 8013866:	f002 fc97 	bl	8016198 <_vfiprintf_r>
 801386a:	b002      	add	sp, #8
 801386c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013870:	b003      	add	sp, #12
 8013872:	4770      	bx	lr
 8013874:	200001d4 	.word	0x200001d4

08013878 <_fwalk_sglue>:
 8013878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801387c:	4607      	mov	r7, r0
 801387e:	4688      	mov	r8, r1
 8013880:	4614      	mov	r4, r2
 8013882:	2600      	movs	r6, #0
 8013884:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013888:	f1b9 0901 	subs.w	r9, r9, #1
 801388c:	d505      	bpl.n	801389a <_fwalk_sglue+0x22>
 801388e:	6824      	ldr	r4, [r4, #0]
 8013890:	2c00      	cmp	r4, #0
 8013892:	d1f7      	bne.n	8013884 <_fwalk_sglue+0xc>
 8013894:	4630      	mov	r0, r6
 8013896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801389a:	89ab      	ldrh	r3, [r5, #12]
 801389c:	2b01      	cmp	r3, #1
 801389e:	d907      	bls.n	80138b0 <_fwalk_sglue+0x38>
 80138a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80138a4:	3301      	adds	r3, #1
 80138a6:	d003      	beq.n	80138b0 <_fwalk_sglue+0x38>
 80138a8:	4629      	mov	r1, r5
 80138aa:	4638      	mov	r0, r7
 80138ac:	47c0      	blx	r8
 80138ae:	4306      	orrs	r6, r0
 80138b0:	3568      	adds	r5, #104	@ 0x68
 80138b2:	e7e9      	b.n	8013888 <_fwalk_sglue+0x10>

080138b4 <getchar>:
 80138b4:	4b02      	ldr	r3, [pc, #8]	@ (80138c0 <getchar+0xc>)
 80138b6:	6818      	ldr	r0, [r3, #0]
 80138b8:	6841      	ldr	r1, [r0, #4]
 80138ba:	f002 bd85 	b.w	80163c8 <_getc_r>
 80138be:	bf00      	nop
 80138c0:	200001d4 	.word	0x200001d4

080138c4 <iprintf>:
 80138c4:	b40f      	push	{r0, r1, r2, r3}
 80138c6:	b507      	push	{r0, r1, r2, lr}
 80138c8:	4906      	ldr	r1, [pc, #24]	@ (80138e4 <iprintf+0x20>)
 80138ca:	ab04      	add	r3, sp, #16
 80138cc:	6808      	ldr	r0, [r1, #0]
 80138ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80138d2:	6881      	ldr	r1, [r0, #8]
 80138d4:	9301      	str	r3, [sp, #4]
 80138d6:	f002 fc5f 	bl	8016198 <_vfiprintf_r>
 80138da:	b003      	add	sp, #12
 80138dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80138e0:	b004      	add	sp, #16
 80138e2:	4770      	bx	lr
 80138e4:	200001d4 	.word	0x200001d4

080138e8 <putchar>:
 80138e8:	4b02      	ldr	r3, [pc, #8]	@ (80138f4 <putchar+0xc>)
 80138ea:	4601      	mov	r1, r0
 80138ec:	6818      	ldr	r0, [r3, #0]
 80138ee:	6882      	ldr	r2, [r0, #8]
 80138f0:	f002 bdf7 	b.w	80164e2 <_putc_r>
 80138f4:	200001d4 	.word	0x200001d4

080138f8 <_puts_r>:
 80138f8:	6a03      	ldr	r3, [r0, #32]
 80138fa:	b570      	push	{r4, r5, r6, lr}
 80138fc:	6884      	ldr	r4, [r0, #8]
 80138fe:	4605      	mov	r5, r0
 8013900:	460e      	mov	r6, r1
 8013902:	b90b      	cbnz	r3, 8013908 <_puts_r+0x10>
 8013904:	f7ff ff8e 	bl	8013824 <__sinit>
 8013908:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801390a:	07db      	lsls	r3, r3, #31
 801390c:	d405      	bmi.n	801391a <_puts_r+0x22>
 801390e:	89a3      	ldrh	r3, [r4, #12]
 8013910:	0598      	lsls	r0, r3, #22
 8013912:	d402      	bmi.n	801391a <_puts_r+0x22>
 8013914:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013916:	f000 fb8f 	bl	8014038 <__retarget_lock_acquire_recursive>
 801391a:	89a3      	ldrh	r3, [r4, #12]
 801391c:	0719      	lsls	r1, r3, #28
 801391e:	d502      	bpl.n	8013926 <_puts_r+0x2e>
 8013920:	6923      	ldr	r3, [r4, #16]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d135      	bne.n	8013992 <_puts_r+0x9a>
 8013926:	4621      	mov	r1, r4
 8013928:	4628      	mov	r0, r5
 801392a:	f000 f8e7 	bl	8013afc <__swsetup_r>
 801392e:	b380      	cbz	r0, 8013992 <_puts_r+0x9a>
 8013930:	f04f 35ff 	mov.w	r5, #4294967295
 8013934:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013936:	07da      	lsls	r2, r3, #31
 8013938:	d405      	bmi.n	8013946 <_puts_r+0x4e>
 801393a:	89a3      	ldrh	r3, [r4, #12]
 801393c:	059b      	lsls	r3, r3, #22
 801393e:	d402      	bmi.n	8013946 <_puts_r+0x4e>
 8013940:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013942:	f000 fb7a 	bl	801403a <__retarget_lock_release_recursive>
 8013946:	4628      	mov	r0, r5
 8013948:	bd70      	pop	{r4, r5, r6, pc}
 801394a:	2b00      	cmp	r3, #0
 801394c:	da04      	bge.n	8013958 <_puts_r+0x60>
 801394e:	69a2      	ldr	r2, [r4, #24]
 8013950:	429a      	cmp	r2, r3
 8013952:	dc17      	bgt.n	8013984 <_puts_r+0x8c>
 8013954:	290a      	cmp	r1, #10
 8013956:	d015      	beq.n	8013984 <_puts_r+0x8c>
 8013958:	6823      	ldr	r3, [r4, #0]
 801395a:	1c5a      	adds	r2, r3, #1
 801395c:	6022      	str	r2, [r4, #0]
 801395e:	7019      	strb	r1, [r3, #0]
 8013960:	68a3      	ldr	r3, [r4, #8]
 8013962:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013966:	3b01      	subs	r3, #1
 8013968:	60a3      	str	r3, [r4, #8]
 801396a:	2900      	cmp	r1, #0
 801396c:	d1ed      	bne.n	801394a <_puts_r+0x52>
 801396e:	2b00      	cmp	r3, #0
 8013970:	da11      	bge.n	8013996 <_puts_r+0x9e>
 8013972:	4622      	mov	r2, r4
 8013974:	210a      	movs	r1, #10
 8013976:	4628      	mov	r0, r5
 8013978:	f000 f881 	bl	8013a7e <__swbuf_r>
 801397c:	3001      	adds	r0, #1
 801397e:	d0d7      	beq.n	8013930 <_puts_r+0x38>
 8013980:	250a      	movs	r5, #10
 8013982:	e7d7      	b.n	8013934 <_puts_r+0x3c>
 8013984:	4622      	mov	r2, r4
 8013986:	4628      	mov	r0, r5
 8013988:	f000 f879 	bl	8013a7e <__swbuf_r>
 801398c:	3001      	adds	r0, #1
 801398e:	d1e7      	bne.n	8013960 <_puts_r+0x68>
 8013990:	e7ce      	b.n	8013930 <_puts_r+0x38>
 8013992:	3e01      	subs	r6, #1
 8013994:	e7e4      	b.n	8013960 <_puts_r+0x68>
 8013996:	6823      	ldr	r3, [r4, #0]
 8013998:	1c5a      	adds	r2, r3, #1
 801399a:	6022      	str	r2, [r4, #0]
 801399c:	220a      	movs	r2, #10
 801399e:	701a      	strb	r2, [r3, #0]
 80139a0:	e7ee      	b.n	8013980 <_puts_r+0x88>
	...

080139a4 <puts>:
 80139a4:	4b02      	ldr	r3, [pc, #8]	@ (80139b0 <puts+0xc>)
 80139a6:	4601      	mov	r1, r0
 80139a8:	6818      	ldr	r0, [r3, #0]
 80139aa:	f7ff bfa5 	b.w	80138f8 <_puts_r>
 80139ae:	bf00      	nop
 80139b0:	200001d4 	.word	0x200001d4

080139b4 <siprintf>:
 80139b4:	b40e      	push	{r1, r2, r3}
 80139b6:	b510      	push	{r4, lr}
 80139b8:	b09d      	sub	sp, #116	@ 0x74
 80139ba:	ab1f      	add	r3, sp, #124	@ 0x7c
 80139bc:	9002      	str	r0, [sp, #8]
 80139be:	9006      	str	r0, [sp, #24]
 80139c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80139c4:	480a      	ldr	r0, [pc, #40]	@ (80139f0 <siprintf+0x3c>)
 80139c6:	9107      	str	r1, [sp, #28]
 80139c8:	9104      	str	r1, [sp, #16]
 80139ca:	490a      	ldr	r1, [pc, #40]	@ (80139f4 <siprintf+0x40>)
 80139cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80139d0:	9105      	str	r1, [sp, #20]
 80139d2:	2400      	movs	r4, #0
 80139d4:	a902      	add	r1, sp, #8
 80139d6:	6800      	ldr	r0, [r0, #0]
 80139d8:	9301      	str	r3, [sp, #4]
 80139da:	941b      	str	r4, [sp, #108]	@ 0x6c
 80139dc:	f002 fab6 	bl	8015f4c <_svfiprintf_r>
 80139e0:	9b02      	ldr	r3, [sp, #8]
 80139e2:	701c      	strb	r4, [r3, #0]
 80139e4:	b01d      	add	sp, #116	@ 0x74
 80139e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80139ea:	b003      	add	sp, #12
 80139ec:	4770      	bx	lr
 80139ee:	bf00      	nop
 80139f0:	200001d4 	.word	0x200001d4
 80139f4:	ffff0208 	.word	0xffff0208

080139f8 <__sread>:
 80139f8:	b510      	push	{r4, lr}
 80139fa:	460c      	mov	r4, r1
 80139fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a00:	f000 faca 	bl	8013f98 <_read_r>
 8013a04:	2800      	cmp	r0, #0
 8013a06:	bfab      	itete	ge
 8013a08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013a0a:	89a3      	ldrhlt	r3, [r4, #12]
 8013a0c:	181b      	addge	r3, r3, r0
 8013a0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013a12:	bfac      	ite	ge
 8013a14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013a16:	81a3      	strhlt	r3, [r4, #12]
 8013a18:	bd10      	pop	{r4, pc}

08013a1a <__swrite>:
 8013a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a1e:	461f      	mov	r7, r3
 8013a20:	898b      	ldrh	r3, [r1, #12]
 8013a22:	05db      	lsls	r3, r3, #23
 8013a24:	4605      	mov	r5, r0
 8013a26:	460c      	mov	r4, r1
 8013a28:	4616      	mov	r6, r2
 8013a2a:	d505      	bpl.n	8013a38 <__swrite+0x1e>
 8013a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a30:	2302      	movs	r3, #2
 8013a32:	2200      	movs	r2, #0
 8013a34:	f000 fa9e 	bl	8013f74 <_lseek_r>
 8013a38:	89a3      	ldrh	r3, [r4, #12]
 8013a3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013a3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013a42:	81a3      	strh	r3, [r4, #12]
 8013a44:	4632      	mov	r2, r6
 8013a46:	463b      	mov	r3, r7
 8013a48:	4628      	mov	r0, r5
 8013a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a4e:	f000 bab5 	b.w	8013fbc <_write_r>

08013a52 <__sseek>:
 8013a52:	b510      	push	{r4, lr}
 8013a54:	460c      	mov	r4, r1
 8013a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a5a:	f000 fa8b 	bl	8013f74 <_lseek_r>
 8013a5e:	1c43      	adds	r3, r0, #1
 8013a60:	89a3      	ldrh	r3, [r4, #12]
 8013a62:	bf15      	itete	ne
 8013a64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013a66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013a6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013a6e:	81a3      	strheq	r3, [r4, #12]
 8013a70:	bf18      	it	ne
 8013a72:	81a3      	strhne	r3, [r4, #12]
 8013a74:	bd10      	pop	{r4, pc}

08013a76 <__sclose>:
 8013a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a7a:	f000 ba0d 	b.w	8013e98 <_close_r>

08013a7e <__swbuf_r>:
 8013a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a80:	460e      	mov	r6, r1
 8013a82:	4614      	mov	r4, r2
 8013a84:	4605      	mov	r5, r0
 8013a86:	b118      	cbz	r0, 8013a90 <__swbuf_r+0x12>
 8013a88:	6a03      	ldr	r3, [r0, #32]
 8013a8a:	b90b      	cbnz	r3, 8013a90 <__swbuf_r+0x12>
 8013a8c:	f7ff feca 	bl	8013824 <__sinit>
 8013a90:	69a3      	ldr	r3, [r4, #24]
 8013a92:	60a3      	str	r3, [r4, #8]
 8013a94:	89a3      	ldrh	r3, [r4, #12]
 8013a96:	071a      	lsls	r2, r3, #28
 8013a98:	d501      	bpl.n	8013a9e <__swbuf_r+0x20>
 8013a9a:	6923      	ldr	r3, [r4, #16]
 8013a9c:	b943      	cbnz	r3, 8013ab0 <__swbuf_r+0x32>
 8013a9e:	4621      	mov	r1, r4
 8013aa0:	4628      	mov	r0, r5
 8013aa2:	f000 f82b 	bl	8013afc <__swsetup_r>
 8013aa6:	b118      	cbz	r0, 8013ab0 <__swbuf_r+0x32>
 8013aa8:	f04f 37ff 	mov.w	r7, #4294967295
 8013aac:	4638      	mov	r0, r7
 8013aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ab0:	6823      	ldr	r3, [r4, #0]
 8013ab2:	6922      	ldr	r2, [r4, #16]
 8013ab4:	1a98      	subs	r0, r3, r2
 8013ab6:	6963      	ldr	r3, [r4, #20]
 8013ab8:	b2f6      	uxtb	r6, r6
 8013aba:	4283      	cmp	r3, r0
 8013abc:	4637      	mov	r7, r6
 8013abe:	dc05      	bgt.n	8013acc <__swbuf_r+0x4e>
 8013ac0:	4621      	mov	r1, r4
 8013ac2:	4628      	mov	r0, r5
 8013ac4:	f7ff fd94 	bl	80135f0 <_fflush_r>
 8013ac8:	2800      	cmp	r0, #0
 8013aca:	d1ed      	bne.n	8013aa8 <__swbuf_r+0x2a>
 8013acc:	68a3      	ldr	r3, [r4, #8]
 8013ace:	3b01      	subs	r3, #1
 8013ad0:	60a3      	str	r3, [r4, #8]
 8013ad2:	6823      	ldr	r3, [r4, #0]
 8013ad4:	1c5a      	adds	r2, r3, #1
 8013ad6:	6022      	str	r2, [r4, #0]
 8013ad8:	701e      	strb	r6, [r3, #0]
 8013ada:	6962      	ldr	r2, [r4, #20]
 8013adc:	1c43      	adds	r3, r0, #1
 8013ade:	429a      	cmp	r2, r3
 8013ae0:	d004      	beq.n	8013aec <__swbuf_r+0x6e>
 8013ae2:	89a3      	ldrh	r3, [r4, #12]
 8013ae4:	07db      	lsls	r3, r3, #31
 8013ae6:	d5e1      	bpl.n	8013aac <__swbuf_r+0x2e>
 8013ae8:	2e0a      	cmp	r6, #10
 8013aea:	d1df      	bne.n	8013aac <__swbuf_r+0x2e>
 8013aec:	4621      	mov	r1, r4
 8013aee:	4628      	mov	r0, r5
 8013af0:	f7ff fd7e 	bl	80135f0 <_fflush_r>
 8013af4:	2800      	cmp	r0, #0
 8013af6:	d0d9      	beq.n	8013aac <__swbuf_r+0x2e>
 8013af8:	e7d6      	b.n	8013aa8 <__swbuf_r+0x2a>
	...

08013afc <__swsetup_r>:
 8013afc:	b538      	push	{r3, r4, r5, lr}
 8013afe:	4b29      	ldr	r3, [pc, #164]	@ (8013ba4 <__swsetup_r+0xa8>)
 8013b00:	4605      	mov	r5, r0
 8013b02:	6818      	ldr	r0, [r3, #0]
 8013b04:	460c      	mov	r4, r1
 8013b06:	b118      	cbz	r0, 8013b10 <__swsetup_r+0x14>
 8013b08:	6a03      	ldr	r3, [r0, #32]
 8013b0a:	b90b      	cbnz	r3, 8013b10 <__swsetup_r+0x14>
 8013b0c:	f7ff fe8a 	bl	8013824 <__sinit>
 8013b10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b14:	0719      	lsls	r1, r3, #28
 8013b16:	d422      	bmi.n	8013b5e <__swsetup_r+0x62>
 8013b18:	06da      	lsls	r2, r3, #27
 8013b1a:	d407      	bmi.n	8013b2c <__swsetup_r+0x30>
 8013b1c:	2209      	movs	r2, #9
 8013b1e:	602a      	str	r2, [r5, #0]
 8013b20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013b24:	81a3      	strh	r3, [r4, #12]
 8013b26:	f04f 30ff 	mov.w	r0, #4294967295
 8013b2a:	e033      	b.n	8013b94 <__swsetup_r+0x98>
 8013b2c:	0758      	lsls	r0, r3, #29
 8013b2e:	d512      	bpl.n	8013b56 <__swsetup_r+0x5a>
 8013b30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013b32:	b141      	cbz	r1, 8013b46 <__swsetup_r+0x4a>
 8013b34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013b38:	4299      	cmp	r1, r3
 8013b3a:	d002      	beq.n	8013b42 <__swsetup_r+0x46>
 8013b3c:	4628      	mov	r0, r5
 8013b3e:	f001 f8fb 	bl	8014d38 <_free_r>
 8013b42:	2300      	movs	r3, #0
 8013b44:	6363      	str	r3, [r4, #52]	@ 0x34
 8013b46:	89a3      	ldrh	r3, [r4, #12]
 8013b48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013b4c:	81a3      	strh	r3, [r4, #12]
 8013b4e:	2300      	movs	r3, #0
 8013b50:	6063      	str	r3, [r4, #4]
 8013b52:	6923      	ldr	r3, [r4, #16]
 8013b54:	6023      	str	r3, [r4, #0]
 8013b56:	89a3      	ldrh	r3, [r4, #12]
 8013b58:	f043 0308 	orr.w	r3, r3, #8
 8013b5c:	81a3      	strh	r3, [r4, #12]
 8013b5e:	6923      	ldr	r3, [r4, #16]
 8013b60:	b94b      	cbnz	r3, 8013b76 <__swsetup_r+0x7a>
 8013b62:	89a3      	ldrh	r3, [r4, #12]
 8013b64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013b68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013b6c:	d003      	beq.n	8013b76 <__swsetup_r+0x7a>
 8013b6e:	4621      	mov	r1, r4
 8013b70:	4628      	mov	r0, r5
 8013b72:	f002 fc7a 	bl	801646a <__smakebuf_r>
 8013b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b7a:	f013 0201 	ands.w	r2, r3, #1
 8013b7e:	d00a      	beq.n	8013b96 <__swsetup_r+0x9a>
 8013b80:	2200      	movs	r2, #0
 8013b82:	60a2      	str	r2, [r4, #8]
 8013b84:	6962      	ldr	r2, [r4, #20]
 8013b86:	4252      	negs	r2, r2
 8013b88:	61a2      	str	r2, [r4, #24]
 8013b8a:	6922      	ldr	r2, [r4, #16]
 8013b8c:	b942      	cbnz	r2, 8013ba0 <__swsetup_r+0xa4>
 8013b8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013b92:	d1c5      	bne.n	8013b20 <__swsetup_r+0x24>
 8013b94:	bd38      	pop	{r3, r4, r5, pc}
 8013b96:	0799      	lsls	r1, r3, #30
 8013b98:	bf58      	it	pl
 8013b9a:	6962      	ldrpl	r2, [r4, #20]
 8013b9c:	60a2      	str	r2, [r4, #8]
 8013b9e:	e7f4      	b.n	8013b8a <__swsetup_r+0x8e>
 8013ba0:	2000      	movs	r0, #0
 8013ba2:	e7f7      	b.n	8013b94 <__swsetup_r+0x98>
 8013ba4:	200001d4 	.word	0x200001d4

08013ba8 <funcloser>:
 8013ba8:	b570      	push	{r4, r5, r6, lr}
 8013baa:	690c      	ldr	r4, [r1, #16]
 8013bac:	4606      	mov	r6, r0
 8013bae:	460d      	mov	r5, r1
 8013bb0:	b184      	cbz	r4, 8013bd4 <funcloser+0x2c>
 8013bb2:	f000 fa15 	bl	8013fe0 <__errno>
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	6003      	str	r3, [r0, #0]
 8013bba:	692b      	ldr	r3, [r5, #16]
 8013bbc:	6828      	ldr	r0, [r5, #0]
 8013bbe:	4798      	blx	r3
 8013bc0:	1e04      	subs	r4, r0, #0
 8013bc2:	da07      	bge.n	8013bd4 <funcloser+0x2c>
 8013bc4:	f000 fa0c 	bl	8013fe0 <__errno>
 8013bc8:	6803      	ldr	r3, [r0, #0]
 8013bca:	b11b      	cbz	r3, 8013bd4 <funcloser+0x2c>
 8013bcc:	f000 fa08 	bl	8013fe0 <__errno>
 8013bd0:	6803      	ldr	r3, [r0, #0]
 8013bd2:	6033      	str	r3, [r6, #0]
 8013bd4:	4630      	mov	r0, r6
 8013bd6:	4629      	mov	r1, r5
 8013bd8:	f001 f8ae 	bl	8014d38 <_free_r>
 8013bdc:	4620      	mov	r0, r4
 8013bde:	bd70      	pop	{r4, r5, r6, pc}

08013be0 <funwriter>:
 8013be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013be2:	460c      	mov	r4, r1
 8013be4:	4616      	mov	r6, r2
 8013be6:	461f      	mov	r7, r3
 8013be8:	4605      	mov	r5, r0
 8013bea:	f000 f9f9 	bl	8013fe0 <__errno>
 8013bee:	2300      	movs	r3, #0
 8013bf0:	6003      	str	r3, [r0, #0]
 8013bf2:	463a      	mov	r2, r7
 8013bf4:	68a3      	ldr	r3, [r4, #8]
 8013bf6:	6820      	ldr	r0, [r4, #0]
 8013bf8:	4631      	mov	r1, r6
 8013bfa:	4798      	blx	r3
 8013bfc:	1e04      	subs	r4, r0, #0
 8013bfe:	da07      	bge.n	8013c10 <funwriter+0x30>
 8013c00:	f000 f9ee 	bl	8013fe0 <__errno>
 8013c04:	6803      	ldr	r3, [r0, #0]
 8013c06:	b11b      	cbz	r3, 8013c10 <funwriter+0x30>
 8013c08:	f000 f9ea 	bl	8013fe0 <__errno>
 8013c0c:	6803      	ldr	r3, [r0, #0]
 8013c0e:	602b      	str	r3, [r5, #0]
 8013c10:	4620      	mov	r0, r4
 8013c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013c14 <funseeker>:
 8013c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c16:	460c      	mov	r4, r1
 8013c18:	4616      	mov	r6, r2
 8013c1a:	461f      	mov	r7, r3
 8013c1c:	4605      	mov	r5, r0
 8013c1e:	f000 f9df 	bl	8013fe0 <__errno>
 8013c22:	2300      	movs	r3, #0
 8013c24:	6003      	str	r3, [r0, #0]
 8013c26:	463a      	mov	r2, r7
 8013c28:	68e3      	ldr	r3, [r4, #12]
 8013c2a:	6820      	ldr	r0, [r4, #0]
 8013c2c:	4631      	mov	r1, r6
 8013c2e:	4798      	blx	r3
 8013c30:	1e04      	subs	r4, r0, #0
 8013c32:	da07      	bge.n	8013c44 <funseeker+0x30>
 8013c34:	f000 f9d4 	bl	8013fe0 <__errno>
 8013c38:	6803      	ldr	r3, [r0, #0]
 8013c3a:	b11b      	cbz	r3, 8013c44 <funseeker+0x30>
 8013c3c:	f000 f9d0 	bl	8013fe0 <__errno>
 8013c40:	6803      	ldr	r3, [r0, #0]
 8013c42:	602b      	str	r3, [r5, #0]
 8013c44:	4620      	mov	r0, r4
 8013c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013c48 <funreader>:
 8013c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c4a:	460c      	mov	r4, r1
 8013c4c:	4616      	mov	r6, r2
 8013c4e:	461f      	mov	r7, r3
 8013c50:	4605      	mov	r5, r0
 8013c52:	f000 f9c5 	bl	8013fe0 <__errno>
 8013c56:	2300      	movs	r3, #0
 8013c58:	6003      	str	r3, [r0, #0]
 8013c5a:	463a      	mov	r2, r7
 8013c5c:	6863      	ldr	r3, [r4, #4]
 8013c5e:	6820      	ldr	r0, [r4, #0]
 8013c60:	4631      	mov	r1, r6
 8013c62:	4798      	blx	r3
 8013c64:	1e04      	subs	r4, r0, #0
 8013c66:	da07      	bge.n	8013c78 <funreader+0x30>
 8013c68:	f000 f9ba 	bl	8013fe0 <__errno>
 8013c6c:	6803      	ldr	r3, [r0, #0]
 8013c6e:	b11b      	cbz	r3, 8013c78 <funreader+0x30>
 8013c70:	f000 f9b6 	bl	8013fe0 <__errno>
 8013c74:	6803      	ldr	r3, [r0, #0]
 8013c76:	602b      	str	r3, [r5, #0]
 8013c78:	4620      	mov	r0, r4
 8013c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013c7c <_funopen_r>:
 8013c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013c84:	4605      	mov	r5, r0
 8013c86:	4689      	mov	r9, r1
 8013c88:	461e      	mov	r6, r3
 8013c8a:	4617      	mov	r7, r2
 8013c8c:	b932      	cbnz	r2, 8013c9c <_funopen_r+0x20>
 8013c8e:	b92b      	cbnz	r3, 8013c9c <_funopen_r+0x20>
 8013c90:	2316      	movs	r3, #22
 8013c92:	6003      	str	r3, [r0, #0]
 8013c94:	2400      	movs	r4, #0
 8013c96:	4620      	mov	r0, r4
 8013c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c9c:	4628      	mov	r0, r5
 8013c9e:	f7ff fd6f 	bl	8013780 <__sfp>
 8013ca2:	4604      	mov	r4, r0
 8013ca4:	2800      	cmp	r0, #0
 8013ca6:	d0f5      	beq.n	8013c94 <_funopen_r+0x18>
 8013ca8:	4628      	mov	r0, r5
 8013caa:	2114      	movs	r1, #20
 8013cac:	f7fd fd94 	bl	80117d8 <_malloc_r>
 8013cb0:	4605      	mov	r5, r0
 8013cb2:	b940      	cbnz	r0, 8013cc6 <_funopen_r+0x4a>
 8013cb4:	f7ff fd58 	bl	8013768 <__sfp_lock_acquire>
 8013cb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013cba:	81a5      	strh	r5, [r4, #12]
 8013cbc:	f000 f9bb 	bl	8014036 <__retarget_lock_close_recursive>
 8013cc0:	f7ff fd58 	bl	8013774 <__sfp_lock_release>
 8013cc4:	e7e6      	b.n	8013c94 <_funopen_r+0x18>
 8013cc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013cc8:	07d8      	lsls	r0, r3, #31
 8013cca:	d405      	bmi.n	8013cd8 <_funopen_r+0x5c>
 8013ccc:	89a3      	ldrh	r3, [r4, #12]
 8013cce:	0599      	lsls	r1, r3, #22
 8013cd0:	d402      	bmi.n	8013cd8 <_funopen_r+0x5c>
 8013cd2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013cd4:	f000 f9b0 	bl	8014038 <__retarget_lock_acquire_recursive>
 8013cd8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013cdc:	81e3      	strh	r3, [r4, #14]
 8013cde:	f8c5 9000 	str.w	r9, [r5]
 8013ce2:	6225      	str	r5, [r4, #32]
 8013ce4:	b327      	cbz	r7, 8013d30 <_funopen_r+0xb4>
 8013ce6:	4b16      	ldr	r3, [pc, #88]	@ (8013d40 <_funopen_r+0xc4>)
 8013ce8:	606f      	str	r7, [r5, #4]
 8013cea:	6263      	str	r3, [r4, #36]	@ 0x24
 8013cec:	b1de      	cbz	r6, 8013d26 <_funopen_r+0xaa>
 8013cee:	2310      	movs	r3, #16
 8013cf0:	81a3      	strh	r3, [r4, #12]
 8013cf2:	4b14      	ldr	r3, [pc, #80]	@ (8013d44 <_funopen_r+0xc8>)
 8013cf4:	60ae      	str	r6, [r5, #8]
 8013cf6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013cf8:	4b13      	ldr	r3, [pc, #76]	@ (8013d48 <_funopen_r+0xcc>)
 8013cfa:	f8c5 800c 	str.w	r8, [r5, #12]
 8013cfe:	f1b8 0f00 	cmp.w	r8, #0
 8013d02:	bf18      	it	ne
 8013d04:	4698      	movne	r8, r3
 8013d06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d08:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 8013d0c:	612b      	str	r3, [r5, #16]
 8013d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8013d4c <_funopen_r+0xd0>)
 8013d10:	6323      	str	r3, [r4, #48]	@ 0x30
 8013d12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013d14:	07da      	lsls	r2, r3, #31
 8013d16:	d4be      	bmi.n	8013c96 <_funopen_r+0x1a>
 8013d18:	89a3      	ldrh	r3, [r4, #12]
 8013d1a:	059b      	lsls	r3, r3, #22
 8013d1c:	d4bb      	bmi.n	8013c96 <_funopen_r+0x1a>
 8013d1e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013d20:	f000 f98b 	bl	801403a <__retarget_lock_release_recursive>
 8013d24:	e7b7      	b.n	8013c96 <_funopen_r+0x1a>
 8013d26:	2304      	movs	r3, #4
 8013d28:	81a3      	strh	r3, [r4, #12]
 8013d2a:	60ae      	str	r6, [r5, #8]
 8013d2c:	62a6      	str	r6, [r4, #40]	@ 0x28
 8013d2e:	e7e3      	b.n	8013cf8 <_funopen_r+0x7c>
 8013d30:	2308      	movs	r3, #8
 8013d32:	81a3      	strh	r3, [r4, #12]
 8013d34:	4b03      	ldr	r3, [pc, #12]	@ (8013d44 <_funopen_r+0xc8>)
 8013d36:	60ae      	str	r6, [r5, #8]
 8013d38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013d3a:	606f      	str	r7, [r5, #4]
 8013d3c:	6267      	str	r7, [r4, #36]	@ 0x24
 8013d3e:	e7db      	b.n	8013cf8 <_funopen_r+0x7c>
 8013d40:	08013c49 	.word	0x08013c49
 8013d44:	08013be1 	.word	0x08013be1
 8013d48:	08013c15 	.word	0x08013c15
 8013d4c:	08013ba9 	.word	0x08013ba9

08013d50 <funopen>:
 8013d50:	b513      	push	{r0, r1, r4, lr}
 8013d52:	9c04      	ldr	r4, [sp, #16]
 8013d54:	e9cd 3400 	strd	r3, r4, [sp]
 8013d58:	4613      	mov	r3, r2
 8013d5a:	460a      	mov	r2, r1
 8013d5c:	4601      	mov	r1, r0
 8013d5e:	4803      	ldr	r0, [pc, #12]	@ (8013d6c <funopen+0x1c>)
 8013d60:	6800      	ldr	r0, [r0, #0]
 8013d62:	f7ff ff8b 	bl	8013c7c <_funopen_r>
 8013d66:	b002      	add	sp, #8
 8013d68:	bd10      	pop	{r4, pc}
 8013d6a:	bf00      	nop
 8013d6c:	200001d4 	.word	0x200001d4

08013d70 <memset>:
 8013d70:	4402      	add	r2, r0
 8013d72:	4603      	mov	r3, r0
 8013d74:	4293      	cmp	r3, r2
 8013d76:	d100      	bne.n	8013d7a <memset+0xa>
 8013d78:	4770      	bx	lr
 8013d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8013d7e:	e7f9      	b.n	8013d74 <memset+0x4>

08013d80 <strchr>:
 8013d80:	b2c9      	uxtb	r1, r1
 8013d82:	4603      	mov	r3, r0
 8013d84:	4618      	mov	r0, r3
 8013d86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013d8a:	b112      	cbz	r2, 8013d92 <strchr+0x12>
 8013d8c:	428a      	cmp	r2, r1
 8013d8e:	d1f9      	bne.n	8013d84 <strchr+0x4>
 8013d90:	4770      	bx	lr
 8013d92:	2900      	cmp	r1, #0
 8013d94:	bf18      	it	ne
 8013d96:	2000      	movne	r0, #0
 8013d98:	4770      	bx	lr

08013d9a <strncmp>:
 8013d9a:	b510      	push	{r4, lr}
 8013d9c:	b16a      	cbz	r2, 8013dba <strncmp+0x20>
 8013d9e:	3901      	subs	r1, #1
 8013da0:	1884      	adds	r4, r0, r2
 8013da2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013da6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013daa:	429a      	cmp	r2, r3
 8013dac:	d103      	bne.n	8013db6 <strncmp+0x1c>
 8013dae:	42a0      	cmp	r0, r4
 8013db0:	d001      	beq.n	8013db6 <strncmp+0x1c>
 8013db2:	2a00      	cmp	r2, #0
 8013db4:	d1f5      	bne.n	8013da2 <strncmp+0x8>
 8013db6:	1ad0      	subs	r0, r2, r3
 8013db8:	bd10      	pop	{r4, pc}
 8013dba:	4610      	mov	r0, r2
 8013dbc:	e7fc      	b.n	8013db8 <strncmp+0x1e>

08013dbe <strnlen>:
 8013dbe:	b510      	push	{r4, lr}
 8013dc0:	4602      	mov	r2, r0
 8013dc2:	4401      	add	r1, r0
 8013dc4:	428a      	cmp	r2, r1
 8013dc6:	4613      	mov	r3, r2
 8013dc8:	d003      	beq.n	8013dd2 <strnlen+0x14>
 8013dca:	781c      	ldrb	r4, [r3, #0]
 8013dcc:	3201      	adds	r2, #1
 8013dce:	2c00      	cmp	r4, #0
 8013dd0:	d1f8      	bne.n	8013dc4 <strnlen+0x6>
 8013dd2:	1a18      	subs	r0, r3, r0
 8013dd4:	bd10      	pop	{r4, pc}
	...

08013dd8 <strtok>:
 8013dd8:	4b16      	ldr	r3, [pc, #88]	@ (8013e34 <strtok+0x5c>)
 8013dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dde:	681f      	ldr	r7, [r3, #0]
 8013de0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8013de2:	4605      	mov	r5, r0
 8013de4:	460e      	mov	r6, r1
 8013de6:	b9ec      	cbnz	r4, 8013e24 <strtok+0x4c>
 8013de8:	2050      	movs	r0, #80	@ 0x50
 8013dea:	f7fd fcc3 	bl	8011774 <malloc>
 8013dee:	4602      	mov	r2, r0
 8013df0:	6478      	str	r0, [r7, #68]	@ 0x44
 8013df2:	b920      	cbnz	r0, 8013dfe <strtok+0x26>
 8013df4:	4b10      	ldr	r3, [pc, #64]	@ (8013e38 <strtok+0x60>)
 8013df6:	4811      	ldr	r0, [pc, #68]	@ (8013e3c <strtok+0x64>)
 8013df8:	215b      	movs	r1, #91	@ 0x5b
 8013dfa:	f7fd fc31 	bl	8011660 <__assert_func>
 8013dfe:	e9c0 4400 	strd	r4, r4, [r0]
 8013e02:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8013e06:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8013e0a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8013e0e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8013e12:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8013e16:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8013e1a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8013e1e:	6184      	str	r4, [r0, #24]
 8013e20:	7704      	strb	r4, [r0, #28]
 8013e22:	6244      	str	r4, [r0, #36]	@ 0x24
 8013e24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013e26:	4631      	mov	r1, r6
 8013e28:	4628      	mov	r0, r5
 8013e2a:	2301      	movs	r3, #1
 8013e2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e30:	f000 b806 	b.w	8013e40 <__strtok_r>
 8013e34:	200001d4 	.word	0x200001d4
 8013e38:	0801839f 	.word	0x0801839f
 8013e3c:	080183b6 	.word	0x080183b6

08013e40 <__strtok_r>:
 8013e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e42:	4604      	mov	r4, r0
 8013e44:	b908      	cbnz	r0, 8013e4a <__strtok_r+0xa>
 8013e46:	6814      	ldr	r4, [r2, #0]
 8013e48:	b144      	cbz	r4, 8013e5c <__strtok_r+0x1c>
 8013e4a:	4620      	mov	r0, r4
 8013e4c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8013e50:	460f      	mov	r7, r1
 8013e52:	f817 6b01 	ldrb.w	r6, [r7], #1
 8013e56:	b91e      	cbnz	r6, 8013e60 <__strtok_r+0x20>
 8013e58:	b965      	cbnz	r5, 8013e74 <__strtok_r+0x34>
 8013e5a:	6015      	str	r5, [r2, #0]
 8013e5c:	2000      	movs	r0, #0
 8013e5e:	e005      	b.n	8013e6c <__strtok_r+0x2c>
 8013e60:	42b5      	cmp	r5, r6
 8013e62:	d1f6      	bne.n	8013e52 <__strtok_r+0x12>
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d1f0      	bne.n	8013e4a <__strtok_r+0xa>
 8013e68:	6014      	str	r4, [r2, #0]
 8013e6a:	7003      	strb	r3, [r0, #0]
 8013e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e6e:	461c      	mov	r4, r3
 8013e70:	e00c      	b.n	8013e8c <__strtok_r+0x4c>
 8013e72:	b91d      	cbnz	r5, 8013e7c <__strtok_r+0x3c>
 8013e74:	4627      	mov	r7, r4
 8013e76:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013e7a:	460e      	mov	r6, r1
 8013e7c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8013e80:	42ab      	cmp	r3, r5
 8013e82:	d1f6      	bne.n	8013e72 <__strtok_r+0x32>
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d0f2      	beq.n	8013e6e <__strtok_r+0x2e>
 8013e88:	2300      	movs	r3, #0
 8013e8a:	703b      	strb	r3, [r7, #0]
 8013e8c:	6014      	str	r4, [r2, #0]
 8013e8e:	e7ed      	b.n	8013e6c <__strtok_r+0x2c>

08013e90 <_localeconv_r>:
 8013e90:	4800      	ldr	r0, [pc, #0]	@ (8013e94 <_localeconv_r+0x4>)
 8013e92:	4770      	bx	lr
 8013e94:	20000158 	.word	0x20000158

08013e98 <_close_r>:
 8013e98:	b538      	push	{r3, r4, r5, lr}
 8013e9a:	4d06      	ldr	r5, [pc, #24]	@ (8013eb4 <_close_r+0x1c>)
 8013e9c:	2300      	movs	r3, #0
 8013e9e:	4604      	mov	r4, r0
 8013ea0:	4608      	mov	r0, r1
 8013ea2:	602b      	str	r3, [r5, #0]
 8013ea4:	f7f2 f932 	bl	800610c <_close>
 8013ea8:	1c43      	adds	r3, r0, #1
 8013eaa:	d102      	bne.n	8013eb2 <_close_r+0x1a>
 8013eac:	682b      	ldr	r3, [r5, #0]
 8013eae:	b103      	cbz	r3, 8013eb2 <_close_r+0x1a>
 8013eb0:	6023      	str	r3, [r4, #0]
 8013eb2:	bd38      	pop	{r3, r4, r5, pc}
 8013eb4:	20000790 	.word	0x20000790

08013eb8 <_reclaim_reent>:
 8013eb8:	4b2d      	ldr	r3, [pc, #180]	@ (8013f70 <_reclaim_reent+0xb8>)
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	4283      	cmp	r3, r0
 8013ebe:	b570      	push	{r4, r5, r6, lr}
 8013ec0:	4604      	mov	r4, r0
 8013ec2:	d053      	beq.n	8013f6c <_reclaim_reent+0xb4>
 8013ec4:	69c3      	ldr	r3, [r0, #28]
 8013ec6:	b31b      	cbz	r3, 8013f10 <_reclaim_reent+0x58>
 8013ec8:	68db      	ldr	r3, [r3, #12]
 8013eca:	b163      	cbz	r3, 8013ee6 <_reclaim_reent+0x2e>
 8013ecc:	2500      	movs	r5, #0
 8013ece:	69e3      	ldr	r3, [r4, #28]
 8013ed0:	68db      	ldr	r3, [r3, #12]
 8013ed2:	5959      	ldr	r1, [r3, r5]
 8013ed4:	b9b1      	cbnz	r1, 8013f04 <_reclaim_reent+0x4c>
 8013ed6:	3504      	adds	r5, #4
 8013ed8:	2d80      	cmp	r5, #128	@ 0x80
 8013eda:	d1f8      	bne.n	8013ece <_reclaim_reent+0x16>
 8013edc:	69e3      	ldr	r3, [r4, #28]
 8013ede:	4620      	mov	r0, r4
 8013ee0:	68d9      	ldr	r1, [r3, #12]
 8013ee2:	f000 ff29 	bl	8014d38 <_free_r>
 8013ee6:	69e3      	ldr	r3, [r4, #28]
 8013ee8:	6819      	ldr	r1, [r3, #0]
 8013eea:	b111      	cbz	r1, 8013ef2 <_reclaim_reent+0x3a>
 8013eec:	4620      	mov	r0, r4
 8013eee:	f000 ff23 	bl	8014d38 <_free_r>
 8013ef2:	69e3      	ldr	r3, [r4, #28]
 8013ef4:	689d      	ldr	r5, [r3, #8]
 8013ef6:	b15d      	cbz	r5, 8013f10 <_reclaim_reent+0x58>
 8013ef8:	4629      	mov	r1, r5
 8013efa:	4620      	mov	r0, r4
 8013efc:	682d      	ldr	r5, [r5, #0]
 8013efe:	f000 ff1b 	bl	8014d38 <_free_r>
 8013f02:	e7f8      	b.n	8013ef6 <_reclaim_reent+0x3e>
 8013f04:	680e      	ldr	r6, [r1, #0]
 8013f06:	4620      	mov	r0, r4
 8013f08:	f000 ff16 	bl	8014d38 <_free_r>
 8013f0c:	4631      	mov	r1, r6
 8013f0e:	e7e1      	b.n	8013ed4 <_reclaim_reent+0x1c>
 8013f10:	6961      	ldr	r1, [r4, #20]
 8013f12:	b111      	cbz	r1, 8013f1a <_reclaim_reent+0x62>
 8013f14:	4620      	mov	r0, r4
 8013f16:	f000 ff0f 	bl	8014d38 <_free_r>
 8013f1a:	69e1      	ldr	r1, [r4, #28]
 8013f1c:	b111      	cbz	r1, 8013f24 <_reclaim_reent+0x6c>
 8013f1e:	4620      	mov	r0, r4
 8013f20:	f000 ff0a 	bl	8014d38 <_free_r>
 8013f24:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013f26:	b111      	cbz	r1, 8013f2e <_reclaim_reent+0x76>
 8013f28:	4620      	mov	r0, r4
 8013f2a:	f000 ff05 	bl	8014d38 <_free_r>
 8013f2e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013f30:	b111      	cbz	r1, 8013f38 <_reclaim_reent+0x80>
 8013f32:	4620      	mov	r0, r4
 8013f34:	f000 ff00 	bl	8014d38 <_free_r>
 8013f38:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8013f3a:	b111      	cbz	r1, 8013f42 <_reclaim_reent+0x8a>
 8013f3c:	4620      	mov	r0, r4
 8013f3e:	f000 fefb 	bl	8014d38 <_free_r>
 8013f42:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8013f44:	b111      	cbz	r1, 8013f4c <_reclaim_reent+0x94>
 8013f46:	4620      	mov	r0, r4
 8013f48:	f000 fef6 	bl	8014d38 <_free_r>
 8013f4c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8013f4e:	b111      	cbz	r1, 8013f56 <_reclaim_reent+0x9e>
 8013f50:	4620      	mov	r0, r4
 8013f52:	f000 fef1 	bl	8014d38 <_free_r>
 8013f56:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8013f58:	b111      	cbz	r1, 8013f60 <_reclaim_reent+0xa8>
 8013f5a:	4620      	mov	r0, r4
 8013f5c:	f000 feec 	bl	8014d38 <_free_r>
 8013f60:	6a23      	ldr	r3, [r4, #32]
 8013f62:	b11b      	cbz	r3, 8013f6c <_reclaim_reent+0xb4>
 8013f64:	4620      	mov	r0, r4
 8013f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f6a:	4718      	bx	r3
 8013f6c:	bd70      	pop	{r4, r5, r6, pc}
 8013f6e:	bf00      	nop
 8013f70:	200001d4 	.word	0x200001d4

08013f74 <_lseek_r>:
 8013f74:	b538      	push	{r3, r4, r5, lr}
 8013f76:	4d07      	ldr	r5, [pc, #28]	@ (8013f94 <_lseek_r+0x20>)
 8013f78:	4604      	mov	r4, r0
 8013f7a:	4608      	mov	r0, r1
 8013f7c:	4611      	mov	r1, r2
 8013f7e:	2200      	movs	r2, #0
 8013f80:	602a      	str	r2, [r5, #0]
 8013f82:	461a      	mov	r2, r3
 8013f84:	f7f2 f908 	bl	8006198 <_lseek>
 8013f88:	1c43      	adds	r3, r0, #1
 8013f8a:	d102      	bne.n	8013f92 <_lseek_r+0x1e>
 8013f8c:	682b      	ldr	r3, [r5, #0]
 8013f8e:	b103      	cbz	r3, 8013f92 <_lseek_r+0x1e>
 8013f90:	6023      	str	r3, [r4, #0]
 8013f92:	bd38      	pop	{r3, r4, r5, pc}
 8013f94:	20000790 	.word	0x20000790

08013f98 <_read_r>:
 8013f98:	b538      	push	{r3, r4, r5, lr}
 8013f9a:	4d07      	ldr	r5, [pc, #28]	@ (8013fb8 <_read_r+0x20>)
 8013f9c:	4604      	mov	r4, r0
 8013f9e:	4608      	mov	r0, r1
 8013fa0:	4611      	mov	r1, r2
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	602a      	str	r2, [r5, #0]
 8013fa6:	461a      	mov	r2, r3
 8013fa8:	f7f1 fffa 	bl	8005fa0 <_read>
 8013fac:	1c43      	adds	r3, r0, #1
 8013fae:	d102      	bne.n	8013fb6 <_read_r+0x1e>
 8013fb0:	682b      	ldr	r3, [r5, #0]
 8013fb2:	b103      	cbz	r3, 8013fb6 <_read_r+0x1e>
 8013fb4:	6023      	str	r3, [r4, #0]
 8013fb6:	bd38      	pop	{r3, r4, r5, pc}
 8013fb8:	20000790 	.word	0x20000790

08013fbc <_write_r>:
 8013fbc:	b538      	push	{r3, r4, r5, lr}
 8013fbe:	4d07      	ldr	r5, [pc, #28]	@ (8013fdc <_write_r+0x20>)
 8013fc0:	4604      	mov	r4, r0
 8013fc2:	4608      	mov	r0, r1
 8013fc4:	4611      	mov	r1, r2
 8013fc6:	2200      	movs	r2, #0
 8013fc8:	602a      	str	r2, [r5, #0]
 8013fca:	461a      	mov	r2, r3
 8013fcc:	f7f2 f82e 	bl	800602c <_write>
 8013fd0:	1c43      	adds	r3, r0, #1
 8013fd2:	d102      	bne.n	8013fda <_write_r+0x1e>
 8013fd4:	682b      	ldr	r3, [r5, #0]
 8013fd6:	b103      	cbz	r3, 8013fda <_write_r+0x1e>
 8013fd8:	6023      	str	r3, [r4, #0]
 8013fda:	bd38      	pop	{r3, r4, r5, pc}
 8013fdc:	20000790 	.word	0x20000790

08013fe0 <__errno>:
 8013fe0:	4b01      	ldr	r3, [pc, #4]	@ (8013fe8 <__errno+0x8>)
 8013fe2:	6818      	ldr	r0, [r3, #0]
 8013fe4:	4770      	bx	lr
 8013fe6:	bf00      	nop
 8013fe8:	200001d4 	.word	0x200001d4

08013fec <__libc_init_array>:
 8013fec:	b570      	push	{r4, r5, r6, lr}
 8013fee:	4d0d      	ldr	r5, [pc, #52]	@ (8014024 <__libc_init_array+0x38>)
 8013ff0:	4c0d      	ldr	r4, [pc, #52]	@ (8014028 <__libc_init_array+0x3c>)
 8013ff2:	1b64      	subs	r4, r4, r5
 8013ff4:	10a4      	asrs	r4, r4, #2
 8013ff6:	2600      	movs	r6, #0
 8013ff8:	42a6      	cmp	r6, r4
 8013ffa:	d109      	bne.n	8014010 <__libc_init_array+0x24>
 8013ffc:	4d0b      	ldr	r5, [pc, #44]	@ (801402c <__libc_init_array+0x40>)
 8013ffe:	4c0c      	ldr	r4, [pc, #48]	@ (8014030 <__libc_init_array+0x44>)
 8014000:	f002 fbc6 	bl	8016790 <_init>
 8014004:	1b64      	subs	r4, r4, r5
 8014006:	10a4      	asrs	r4, r4, #2
 8014008:	2600      	movs	r6, #0
 801400a:	42a6      	cmp	r6, r4
 801400c:	d105      	bne.n	801401a <__libc_init_array+0x2e>
 801400e:	bd70      	pop	{r4, r5, r6, pc}
 8014010:	f855 3b04 	ldr.w	r3, [r5], #4
 8014014:	4798      	blx	r3
 8014016:	3601      	adds	r6, #1
 8014018:	e7ee      	b.n	8013ff8 <__libc_init_array+0xc>
 801401a:	f855 3b04 	ldr.w	r3, [r5], #4
 801401e:	4798      	blx	r3
 8014020:	3601      	adds	r6, #1
 8014022:	e7f2      	b.n	801400a <__libc_init_array+0x1e>
 8014024:	080187b0 	.word	0x080187b0
 8014028:	080187b0 	.word	0x080187b0
 801402c:	080187b0 	.word	0x080187b0
 8014030:	080187b8 	.word	0x080187b8

08014034 <__retarget_lock_init_recursive>:
 8014034:	4770      	bx	lr

08014036 <__retarget_lock_close_recursive>:
 8014036:	4770      	bx	lr

08014038 <__retarget_lock_acquire_recursive>:
 8014038:	4770      	bx	lr

0801403a <__retarget_lock_release_recursive>:
 801403a:	4770      	bx	lr

0801403c <memcpy>:
 801403c:	440a      	add	r2, r1
 801403e:	4291      	cmp	r1, r2
 8014040:	f100 33ff 	add.w	r3, r0, #4294967295
 8014044:	d100      	bne.n	8014048 <memcpy+0xc>
 8014046:	4770      	bx	lr
 8014048:	b510      	push	{r4, lr}
 801404a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801404e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014052:	4291      	cmp	r1, r2
 8014054:	d1f9      	bne.n	801404a <memcpy+0xe>
 8014056:	bd10      	pop	{r4, pc}

08014058 <nan>:
 8014058:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014060 <nan+0x8>
 801405c:	4770      	bx	lr
 801405e:	bf00      	nop
 8014060:	00000000 	.word	0x00000000
 8014064:	7ff80000 	.word	0x7ff80000

08014068 <nanf>:
 8014068:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8014070 <nanf+0x8>
 801406c:	4770      	bx	lr
 801406e:	bf00      	nop
 8014070:	7fc00000 	.word	0x7fc00000

08014074 <abort>:
 8014074:	b508      	push	{r3, lr}
 8014076:	2006      	movs	r0, #6
 8014078:	f002 fac2 	bl	8016600 <raise>
 801407c:	2001      	movs	r0, #1
 801407e:	f7f1 ff83 	bl	8005f88 <_exit>

08014082 <quorem>:
 8014082:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014086:	6903      	ldr	r3, [r0, #16]
 8014088:	690c      	ldr	r4, [r1, #16]
 801408a:	42a3      	cmp	r3, r4
 801408c:	4607      	mov	r7, r0
 801408e:	db7e      	blt.n	801418e <quorem+0x10c>
 8014090:	3c01      	subs	r4, #1
 8014092:	f101 0814 	add.w	r8, r1, #20
 8014096:	00a3      	lsls	r3, r4, #2
 8014098:	f100 0514 	add.w	r5, r0, #20
 801409c:	9300      	str	r3, [sp, #0]
 801409e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80140a2:	9301      	str	r3, [sp, #4]
 80140a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80140a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80140ac:	3301      	adds	r3, #1
 80140ae:	429a      	cmp	r2, r3
 80140b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80140b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80140b8:	d32e      	bcc.n	8014118 <quorem+0x96>
 80140ba:	f04f 0a00 	mov.w	sl, #0
 80140be:	46c4      	mov	ip, r8
 80140c0:	46ae      	mov	lr, r5
 80140c2:	46d3      	mov	fp, sl
 80140c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80140c8:	b298      	uxth	r0, r3
 80140ca:	fb06 a000 	mla	r0, r6, r0, sl
 80140ce:	0c02      	lsrs	r2, r0, #16
 80140d0:	0c1b      	lsrs	r3, r3, #16
 80140d2:	fb06 2303 	mla	r3, r6, r3, r2
 80140d6:	f8de 2000 	ldr.w	r2, [lr]
 80140da:	b280      	uxth	r0, r0
 80140dc:	b292      	uxth	r2, r2
 80140de:	1a12      	subs	r2, r2, r0
 80140e0:	445a      	add	r2, fp
 80140e2:	f8de 0000 	ldr.w	r0, [lr]
 80140e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80140ea:	b29b      	uxth	r3, r3
 80140ec:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80140f0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80140f4:	b292      	uxth	r2, r2
 80140f6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80140fa:	45e1      	cmp	r9, ip
 80140fc:	f84e 2b04 	str.w	r2, [lr], #4
 8014100:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014104:	d2de      	bcs.n	80140c4 <quorem+0x42>
 8014106:	9b00      	ldr	r3, [sp, #0]
 8014108:	58eb      	ldr	r3, [r5, r3]
 801410a:	b92b      	cbnz	r3, 8014118 <quorem+0x96>
 801410c:	9b01      	ldr	r3, [sp, #4]
 801410e:	3b04      	subs	r3, #4
 8014110:	429d      	cmp	r5, r3
 8014112:	461a      	mov	r2, r3
 8014114:	d32f      	bcc.n	8014176 <quorem+0xf4>
 8014116:	613c      	str	r4, [r7, #16]
 8014118:	4638      	mov	r0, r7
 801411a:	f001 fc93 	bl	8015a44 <__mcmp>
 801411e:	2800      	cmp	r0, #0
 8014120:	db25      	blt.n	801416e <quorem+0xec>
 8014122:	4629      	mov	r1, r5
 8014124:	2000      	movs	r0, #0
 8014126:	f858 2b04 	ldr.w	r2, [r8], #4
 801412a:	f8d1 c000 	ldr.w	ip, [r1]
 801412e:	fa1f fe82 	uxth.w	lr, r2
 8014132:	fa1f f38c 	uxth.w	r3, ip
 8014136:	eba3 030e 	sub.w	r3, r3, lr
 801413a:	4403      	add	r3, r0
 801413c:	0c12      	lsrs	r2, r2, #16
 801413e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014142:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014146:	b29b      	uxth	r3, r3
 8014148:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801414c:	45c1      	cmp	r9, r8
 801414e:	f841 3b04 	str.w	r3, [r1], #4
 8014152:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014156:	d2e6      	bcs.n	8014126 <quorem+0xa4>
 8014158:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801415c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014160:	b922      	cbnz	r2, 801416c <quorem+0xea>
 8014162:	3b04      	subs	r3, #4
 8014164:	429d      	cmp	r5, r3
 8014166:	461a      	mov	r2, r3
 8014168:	d30b      	bcc.n	8014182 <quorem+0x100>
 801416a:	613c      	str	r4, [r7, #16]
 801416c:	3601      	adds	r6, #1
 801416e:	4630      	mov	r0, r6
 8014170:	b003      	add	sp, #12
 8014172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014176:	6812      	ldr	r2, [r2, #0]
 8014178:	3b04      	subs	r3, #4
 801417a:	2a00      	cmp	r2, #0
 801417c:	d1cb      	bne.n	8014116 <quorem+0x94>
 801417e:	3c01      	subs	r4, #1
 8014180:	e7c6      	b.n	8014110 <quorem+0x8e>
 8014182:	6812      	ldr	r2, [r2, #0]
 8014184:	3b04      	subs	r3, #4
 8014186:	2a00      	cmp	r2, #0
 8014188:	d1ef      	bne.n	801416a <quorem+0xe8>
 801418a:	3c01      	subs	r4, #1
 801418c:	e7ea      	b.n	8014164 <quorem+0xe2>
 801418e:	2000      	movs	r0, #0
 8014190:	e7ee      	b.n	8014170 <quorem+0xee>
 8014192:	0000      	movs	r0, r0
 8014194:	0000      	movs	r0, r0
	...

08014198 <_dtoa_r>:
 8014198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801419c:	69c7      	ldr	r7, [r0, #28]
 801419e:	b097      	sub	sp, #92	@ 0x5c
 80141a0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80141a4:	ec55 4b10 	vmov	r4, r5, d0
 80141a8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80141aa:	9107      	str	r1, [sp, #28]
 80141ac:	4681      	mov	r9, r0
 80141ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80141b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80141b2:	b97f      	cbnz	r7, 80141d4 <_dtoa_r+0x3c>
 80141b4:	2010      	movs	r0, #16
 80141b6:	f7fd fadd 	bl	8011774 <malloc>
 80141ba:	4602      	mov	r2, r0
 80141bc:	f8c9 001c 	str.w	r0, [r9, #28]
 80141c0:	b920      	cbnz	r0, 80141cc <_dtoa_r+0x34>
 80141c2:	4ba9      	ldr	r3, [pc, #676]	@ (8014468 <_dtoa_r+0x2d0>)
 80141c4:	21ef      	movs	r1, #239	@ 0xef
 80141c6:	48a9      	ldr	r0, [pc, #676]	@ (801446c <_dtoa_r+0x2d4>)
 80141c8:	f7fd fa4a 	bl	8011660 <__assert_func>
 80141cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80141d0:	6007      	str	r7, [r0, #0]
 80141d2:	60c7      	str	r7, [r0, #12]
 80141d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80141d8:	6819      	ldr	r1, [r3, #0]
 80141da:	b159      	cbz	r1, 80141f4 <_dtoa_r+0x5c>
 80141dc:	685a      	ldr	r2, [r3, #4]
 80141de:	604a      	str	r2, [r1, #4]
 80141e0:	2301      	movs	r3, #1
 80141e2:	4093      	lsls	r3, r2
 80141e4:	608b      	str	r3, [r1, #8]
 80141e6:	4648      	mov	r0, r9
 80141e8:	f001 f9b0 	bl	801554c <_Bfree>
 80141ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80141f0:	2200      	movs	r2, #0
 80141f2:	601a      	str	r2, [r3, #0]
 80141f4:	1e2b      	subs	r3, r5, #0
 80141f6:	bfb9      	ittee	lt
 80141f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80141fc:	9305      	strlt	r3, [sp, #20]
 80141fe:	2300      	movge	r3, #0
 8014200:	6033      	strge	r3, [r6, #0]
 8014202:	9f05      	ldr	r7, [sp, #20]
 8014204:	4b9a      	ldr	r3, [pc, #616]	@ (8014470 <_dtoa_r+0x2d8>)
 8014206:	bfbc      	itt	lt
 8014208:	2201      	movlt	r2, #1
 801420a:	6032      	strlt	r2, [r6, #0]
 801420c:	43bb      	bics	r3, r7
 801420e:	d112      	bne.n	8014236 <_dtoa_r+0x9e>
 8014210:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014212:	f242 730f 	movw	r3, #9999	@ 0x270f
 8014216:	6013      	str	r3, [r2, #0]
 8014218:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801421c:	4323      	orrs	r3, r4
 801421e:	f000 855a 	beq.w	8014cd6 <_dtoa_r+0xb3e>
 8014222:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014224:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8014484 <_dtoa_r+0x2ec>
 8014228:	2b00      	cmp	r3, #0
 801422a:	f000 855c 	beq.w	8014ce6 <_dtoa_r+0xb4e>
 801422e:	f10a 0303 	add.w	r3, sl, #3
 8014232:	f000 bd56 	b.w	8014ce2 <_dtoa_r+0xb4a>
 8014236:	ed9d 7b04 	vldr	d7, [sp, #16]
 801423a:	2200      	movs	r2, #0
 801423c:	ec51 0b17 	vmov	r0, r1, d7
 8014240:	2300      	movs	r3, #0
 8014242:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8014246:	f7ec fc6f 	bl	8000b28 <__aeabi_dcmpeq>
 801424a:	4680      	mov	r8, r0
 801424c:	b158      	cbz	r0, 8014266 <_dtoa_r+0xce>
 801424e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014250:	2301      	movs	r3, #1
 8014252:	6013      	str	r3, [r2, #0]
 8014254:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014256:	b113      	cbz	r3, 801425e <_dtoa_r+0xc6>
 8014258:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801425a:	4b86      	ldr	r3, [pc, #536]	@ (8014474 <_dtoa_r+0x2dc>)
 801425c:	6013      	str	r3, [r2, #0]
 801425e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8014488 <_dtoa_r+0x2f0>
 8014262:	f000 bd40 	b.w	8014ce6 <_dtoa_r+0xb4e>
 8014266:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801426a:	aa14      	add	r2, sp, #80	@ 0x50
 801426c:	a915      	add	r1, sp, #84	@ 0x54
 801426e:	4648      	mov	r0, r9
 8014270:	f001 fd08 	bl	8015c84 <__d2b>
 8014274:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8014278:	9002      	str	r0, [sp, #8]
 801427a:	2e00      	cmp	r6, #0
 801427c:	d078      	beq.n	8014370 <_dtoa_r+0x1d8>
 801427e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014280:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8014284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014288:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801428c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8014290:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8014294:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8014298:	4619      	mov	r1, r3
 801429a:	2200      	movs	r2, #0
 801429c:	4b76      	ldr	r3, [pc, #472]	@ (8014478 <_dtoa_r+0x2e0>)
 801429e:	f7ec f823 	bl	80002e8 <__aeabi_dsub>
 80142a2:	a36b      	add	r3, pc, #428	@ (adr r3, 8014450 <_dtoa_r+0x2b8>)
 80142a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142a8:	f7ec f9d6 	bl	8000658 <__aeabi_dmul>
 80142ac:	a36a      	add	r3, pc, #424	@ (adr r3, 8014458 <_dtoa_r+0x2c0>)
 80142ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142b2:	f7ec f81b 	bl	80002ec <__adddf3>
 80142b6:	4604      	mov	r4, r0
 80142b8:	4630      	mov	r0, r6
 80142ba:	460d      	mov	r5, r1
 80142bc:	f7ec f962 	bl	8000584 <__aeabi_i2d>
 80142c0:	a367      	add	r3, pc, #412	@ (adr r3, 8014460 <_dtoa_r+0x2c8>)
 80142c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142c6:	f7ec f9c7 	bl	8000658 <__aeabi_dmul>
 80142ca:	4602      	mov	r2, r0
 80142cc:	460b      	mov	r3, r1
 80142ce:	4620      	mov	r0, r4
 80142d0:	4629      	mov	r1, r5
 80142d2:	f7ec f80b 	bl	80002ec <__adddf3>
 80142d6:	4604      	mov	r4, r0
 80142d8:	460d      	mov	r5, r1
 80142da:	f7ec fc6d 	bl	8000bb8 <__aeabi_d2iz>
 80142de:	2200      	movs	r2, #0
 80142e0:	4607      	mov	r7, r0
 80142e2:	2300      	movs	r3, #0
 80142e4:	4620      	mov	r0, r4
 80142e6:	4629      	mov	r1, r5
 80142e8:	f7ec fc28 	bl	8000b3c <__aeabi_dcmplt>
 80142ec:	b140      	cbz	r0, 8014300 <_dtoa_r+0x168>
 80142ee:	4638      	mov	r0, r7
 80142f0:	f7ec f948 	bl	8000584 <__aeabi_i2d>
 80142f4:	4622      	mov	r2, r4
 80142f6:	462b      	mov	r3, r5
 80142f8:	f7ec fc16 	bl	8000b28 <__aeabi_dcmpeq>
 80142fc:	b900      	cbnz	r0, 8014300 <_dtoa_r+0x168>
 80142fe:	3f01      	subs	r7, #1
 8014300:	2f16      	cmp	r7, #22
 8014302:	d852      	bhi.n	80143aa <_dtoa_r+0x212>
 8014304:	4b5d      	ldr	r3, [pc, #372]	@ (801447c <_dtoa_r+0x2e4>)
 8014306:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801430a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801430e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8014312:	f7ec fc13 	bl	8000b3c <__aeabi_dcmplt>
 8014316:	2800      	cmp	r0, #0
 8014318:	d049      	beq.n	80143ae <_dtoa_r+0x216>
 801431a:	3f01      	subs	r7, #1
 801431c:	2300      	movs	r3, #0
 801431e:	9310      	str	r3, [sp, #64]	@ 0x40
 8014320:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8014322:	1b9b      	subs	r3, r3, r6
 8014324:	1e5a      	subs	r2, r3, #1
 8014326:	bf45      	ittet	mi
 8014328:	f1c3 0301 	rsbmi	r3, r3, #1
 801432c:	9300      	strmi	r3, [sp, #0]
 801432e:	2300      	movpl	r3, #0
 8014330:	2300      	movmi	r3, #0
 8014332:	9206      	str	r2, [sp, #24]
 8014334:	bf54      	ite	pl
 8014336:	9300      	strpl	r3, [sp, #0]
 8014338:	9306      	strmi	r3, [sp, #24]
 801433a:	2f00      	cmp	r7, #0
 801433c:	db39      	blt.n	80143b2 <_dtoa_r+0x21a>
 801433e:	9b06      	ldr	r3, [sp, #24]
 8014340:	970d      	str	r7, [sp, #52]	@ 0x34
 8014342:	443b      	add	r3, r7
 8014344:	9306      	str	r3, [sp, #24]
 8014346:	2300      	movs	r3, #0
 8014348:	9308      	str	r3, [sp, #32]
 801434a:	9b07      	ldr	r3, [sp, #28]
 801434c:	2b09      	cmp	r3, #9
 801434e:	d863      	bhi.n	8014418 <_dtoa_r+0x280>
 8014350:	2b05      	cmp	r3, #5
 8014352:	bfc4      	itt	gt
 8014354:	3b04      	subgt	r3, #4
 8014356:	9307      	strgt	r3, [sp, #28]
 8014358:	9b07      	ldr	r3, [sp, #28]
 801435a:	f1a3 0302 	sub.w	r3, r3, #2
 801435e:	bfcc      	ite	gt
 8014360:	2400      	movgt	r4, #0
 8014362:	2401      	movle	r4, #1
 8014364:	2b03      	cmp	r3, #3
 8014366:	d863      	bhi.n	8014430 <_dtoa_r+0x298>
 8014368:	e8df f003 	tbb	[pc, r3]
 801436c:	2b375452 	.word	0x2b375452
 8014370:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8014374:	441e      	add	r6, r3
 8014376:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801437a:	2b20      	cmp	r3, #32
 801437c:	bfc1      	itttt	gt
 801437e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8014382:	409f      	lslgt	r7, r3
 8014384:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8014388:	fa24 f303 	lsrgt.w	r3, r4, r3
 801438c:	bfd6      	itet	le
 801438e:	f1c3 0320 	rsble	r3, r3, #32
 8014392:	ea47 0003 	orrgt.w	r0, r7, r3
 8014396:	fa04 f003 	lslle.w	r0, r4, r3
 801439a:	f7ec f8e3 	bl	8000564 <__aeabi_ui2d>
 801439e:	2201      	movs	r2, #1
 80143a0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80143a4:	3e01      	subs	r6, #1
 80143a6:	9212      	str	r2, [sp, #72]	@ 0x48
 80143a8:	e776      	b.n	8014298 <_dtoa_r+0x100>
 80143aa:	2301      	movs	r3, #1
 80143ac:	e7b7      	b.n	801431e <_dtoa_r+0x186>
 80143ae:	9010      	str	r0, [sp, #64]	@ 0x40
 80143b0:	e7b6      	b.n	8014320 <_dtoa_r+0x188>
 80143b2:	9b00      	ldr	r3, [sp, #0]
 80143b4:	1bdb      	subs	r3, r3, r7
 80143b6:	9300      	str	r3, [sp, #0]
 80143b8:	427b      	negs	r3, r7
 80143ba:	9308      	str	r3, [sp, #32]
 80143bc:	2300      	movs	r3, #0
 80143be:	930d      	str	r3, [sp, #52]	@ 0x34
 80143c0:	e7c3      	b.n	801434a <_dtoa_r+0x1b2>
 80143c2:	2301      	movs	r3, #1
 80143c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80143c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80143c8:	eb07 0b03 	add.w	fp, r7, r3
 80143cc:	f10b 0301 	add.w	r3, fp, #1
 80143d0:	2b01      	cmp	r3, #1
 80143d2:	9303      	str	r3, [sp, #12]
 80143d4:	bfb8      	it	lt
 80143d6:	2301      	movlt	r3, #1
 80143d8:	e006      	b.n	80143e8 <_dtoa_r+0x250>
 80143da:	2301      	movs	r3, #1
 80143dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80143de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	dd28      	ble.n	8014436 <_dtoa_r+0x29e>
 80143e4:	469b      	mov	fp, r3
 80143e6:	9303      	str	r3, [sp, #12]
 80143e8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80143ec:	2100      	movs	r1, #0
 80143ee:	2204      	movs	r2, #4
 80143f0:	f102 0514 	add.w	r5, r2, #20
 80143f4:	429d      	cmp	r5, r3
 80143f6:	d926      	bls.n	8014446 <_dtoa_r+0x2ae>
 80143f8:	6041      	str	r1, [r0, #4]
 80143fa:	4648      	mov	r0, r9
 80143fc:	f001 f866 	bl	80154cc <_Balloc>
 8014400:	4682      	mov	sl, r0
 8014402:	2800      	cmp	r0, #0
 8014404:	d142      	bne.n	801448c <_dtoa_r+0x2f4>
 8014406:	4b1e      	ldr	r3, [pc, #120]	@ (8014480 <_dtoa_r+0x2e8>)
 8014408:	4602      	mov	r2, r0
 801440a:	f240 11af 	movw	r1, #431	@ 0x1af
 801440e:	e6da      	b.n	80141c6 <_dtoa_r+0x2e>
 8014410:	2300      	movs	r3, #0
 8014412:	e7e3      	b.n	80143dc <_dtoa_r+0x244>
 8014414:	2300      	movs	r3, #0
 8014416:	e7d5      	b.n	80143c4 <_dtoa_r+0x22c>
 8014418:	2401      	movs	r4, #1
 801441a:	2300      	movs	r3, #0
 801441c:	9307      	str	r3, [sp, #28]
 801441e:	9409      	str	r4, [sp, #36]	@ 0x24
 8014420:	f04f 3bff 	mov.w	fp, #4294967295
 8014424:	2200      	movs	r2, #0
 8014426:	f8cd b00c 	str.w	fp, [sp, #12]
 801442a:	2312      	movs	r3, #18
 801442c:	920c      	str	r2, [sp, #48]	@ 0x30
 801442e:	e7db      	b.n	80143e8 <_dtoa_r+0x250>
 8014430:	2301      	movs	r3, #1
 8014432:	9309      	str	r3, [sp, #36]	@ 0x24
 8014434:	e7f4      	b.n	8014420 <_dtoa_r+0x288>
 8014436:	f04f 0b01 	mov.w	fp, #1
 801443a:	f8cd b00c 	str.w	fp, [sp, #12]
 801443e:	465b      	mov	r3, fp
 8014440:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8014444:	e7d0      	b.n	80143e8 <_dtoa_r+0x250>
 8014446:	3101      	adds	r1, #1
 8014448:	0052      	lsls	r2, r2, #1
 801444a:	e7d1      	b.n	80143f0 <_dtoa_r+0x258>
 801444c:	f3af 8000 	nop.w
 8014450:	636f4361 	.word	0x636f4361
 8014454:	3fd287a7 	.word	0x3fd287a7
 8014458:	8b60c8b3 	.word	0x8b60c8b3
 801445c:	3fc68a28 	.word	0x3fc68a28
 8014460:	509f79fb 	.word	0x509f79fb
 8014464:	3fd34413 	.word	0x3fd34413
 8014468:	0801839f 	.word	0x0801839f
 801446c:	08018425 	.word	0x08018425
 8014470:	7ff00000 	.word	0x7ff00000
 8014474:	08018377 	.word	0x08018377
 8014478:	3ff80000 	.word	0x3ff80000
 801447c:	080186e0 	.word	0x080186e0
 8014480:	0801847d 	.word	0x0801847d
 8014484:	08018421 	.word	0x08018421
 8014488:	08018376 	.word	0x08018376
 801448c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014490:	6018      	str	r0, [r3, #0]
 8014492:	9b03      	ldr	r3, [sp, #12]
 8014494:	2b0e      	cmp	r3, #14
 8014496:	f200 80a1 	bhi.w	80145dc <_dtoa_r+0x444>
 801449a:	2c00      	cmp	r4, #0
 801449c:	f000 809e 	beq.w	80145dc <_dtoa_r+0x444>
 80144a0:	2f00      	cmp	r7, #0
 80144a2:	dd33      	ble.n	801450c <_dtoa_r+0x374>
 80144a4:	4b9c      	ldr	r3, [pc, #624]	@ (8014718 <_dtoa_r+0x580>)
 80144a6:	f007 020f 	and.w	r2, r7, #15
 80144aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80144ae:	ed93 7b00 	vldr	d7, [r3]
 80144b2:	05f8      	lsls	r0, r7, #23
 80144b4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80144b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80144bc:	d516      	bpl.n	80144ec <_dtoa_r+0x354>
 80144be:	4b97      	ldr	r3, [pc, #604]	@ (801471c <_dtoa_r+0x584>)
 80144c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80144c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80144c8:	f7ec f9f0 	bl	80008ac <__aeabi_ddiv>
 80144cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80144d0:	f004 040f 	and.w	r4, r4, #15
 80144d4:	2603      	movs	r6, #3
 80144d6:	4d91      	ldr	r5, [pc, #580]	@ (801471c <_dtoa_r+0x584>)
 80144d8:	b954      	cbnz	r4, 80144f0 <_dtoa_r+0x358>
 80144da:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80144de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80144e2:	f7ec f9e3 	bl	80008ac <__aeabi_ddiv>
 80144e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80144ea:	e028      	b.n	801453e <_dtoa_r+0x3a6>
 80144ec:	2602      	movs	r6, #2
 80144ee:	e7f2      	b.n	80144d6 <_dtoa_r+0x33e>
 80144f0:	07e1      	lsls	r1, r4, #31
 80144f2:	d508      	bpl.n	8014506 <_dtoa_r+0x36e>
 80144f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80144f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80144fc:	f7ec f8ac 	bl	8000658 <__aeabi_dmul>
 8014500:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8014504:	3601      	adds	r6, #1
 8014506:	1064      	asrs	r4, r4, #1
 8014508:	3508      	adds	r5, #8
 801450a:	e7e5      	b.n	80144d8 <_dtoa_r+0x340>
 801450c:	f000 80af 	beq.w	801466e <_dtoa_r+0x4d6>
 8014510:	427c      	negs	r4, r7
 8014512:	4b81      	ldr	r3, [pc, #516]	@ (8014718 <_dtoa_r+0x580>)
 8014514:	4d81      	ldr	r5, [pc, #516]	@ (801471c <_dtoa_r+0x584>)
 8014516:	f004 020f 	and.w	r2, r4, #15
 801451a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801451e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014522:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8014526:	f7ec f897 	bl	8000658 <__aeabi_dmul>
 801452a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801452e:	1124      	asrs	r4, r4, #4
 8014530:	2300      	movs	r3, #0
 8014532:	2602      	movs	r6, #2
 8014534:	2c00      	cmp	r4, #0
 8014536:	f040 808f 	bne.w	8014658 <_dtoa_r+0x4c0>
 801453a:	2b00      	cmp	r3, #0
 801453c:	d1d3      	bne.n	80144e6 <_dtoa_r+0x34e>
 801453e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014540:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8014544:	2b00      	cmp	r3, #0
 8014546:	f000 8094 	beq.w	8014672 <_dtoa_r+0x4da>
 801454a:	4b75      	ldr	r3, [pc, #468]	@ (8014720 <_dtoa_r+0x588>)
 801454c:	2200      	movs	r2, #0
 801454e:	4620      	mov	r0, r4
 8014550:	4629      	mov	r1, r5
 8014552:	f7ec faf3 	bl	8000b3c <__aeabi_dcmplt>
 8014556:	2800      	cmp	r0, #0
 8014558:	f000 808b 	beq.w	8014672 <_dtoa_r+0x4da>
 801455c:	9b03      	ldr	r3, [sp, #12]
 801455e:	2b00      	cmp	r3, #0
 8014560:	f000 8087 	beq.w	8014672 <_dtoa_r+0x4da>
 8014564:	f1bb 0f00 	cmp.w	fp, #0
 8014568:	dd34      	ble.n	80145d4 <_dtoa_r+0x43c>
 801456a:	4620      	mov	r0, r4
 801456c:	4b6d      	ldr	r3, [pc, #436]	@ (8014724 <_dtoa_r+0x58c>)
 801456e:	2200      	movs	r2, #0
 8014570:	4629      	mov	r1, r5
 8014572:	f7ec f871 	bl	8000658 <__aeabi_dmul>
 8014576:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801457a:	f107 38ff 	add.w	r8, r7, #4294967295
 801457e:	3601      	adds	r6, #1
 8014580:	465c      	mov	r4, fp
 8014582:	4630      	mov	r0, r6
 8014584:	f7eb fffe 	bl	8000584 <__aeabi_i2d>
 8014588:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801458c:	f7ec f864 	bl	8000658 <__aeabi_dmul>
 8014590:	4b65      	ldr	r3, [pc, #404]	@ (8014728 <_dtoa_r+0x590>)
 8014592:	2200      	movs	r2, #0
 8014594:	f7eb feaa 	bl	80002ec <__adddf3>
 8014598:	4605      	mov	r5, r0
 801459a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801459e:	2c00      	cmp	r4, #0
 80145a0:	d16a      	bne.n	8014678 <_dtoa_r+0x4e0>
 80145a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80145a6:	4b61      	ldr	r3, [pc, #388]	@ (801472c <_dtoa_r+0x594>)
 80145a8:	2200      	movs	r2, #0
 80145aa:	f7eb fe9d 	bl	80002e8 <__aeabi_dsub>
 80145ae:	4602      	mov	r2, r0
 80145b0:	460b      	mov	r3, r1
 80145b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80145b6:	462a      	mov	r2, r5
 80145b8:	4633      	mov	r3, r6
 80145ba:	f7ec fadd 	bl	8000b78 <__aeabi_dcmpgt>
 80145be:	2800      	cmp	r0, #0
 80145c0:	f040 8298 	bne.w	8014af4 <_dtoa_r+0x95c>
 80145c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80145c8:	462a      	mov	r2, r5
 80145ca:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80145ce:	f7ec fab5 	bl	8000b3c <__aeabi_dcmplt>
 80145d2:	bb38      	cbnz	r0, 8014624 <_dtoa_r+0x48c>
 80145d4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80145d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80145dc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80145de:	2b00      	cmp	r3, #0
 80145e0:	f2c0 8157 	blt.w	8014892 <_dtoa_r+0x6fa>
 80145e4:	2f0e      	cmp	r7, #14
 80145e6:	f300 8154 	bgt.w	8014892 <_dtoa_r+0x6fa>
 80145ea:	4b4b      	ldr	r3, [pc, #300]	@ (8014718 <_dtoa_r+0x580>)
 80145ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80145f0:	ed93 7b00 	vldr	d7, [r3]
 80145f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	ed8d 7b00 	vstr	d7, [sp]
 80145fc:	f280 80e5 	bge.w	80147ca <_dtoa_r+0x632>
 8014600:	9b03      	ldr	r3, [sp, #12]
 8014602:	2b00      	cmp	r3, #0
 8014604:	f300 80e1 	bgt.w	80147ca <_dtoa_r+0x632>
 8014608:	d10c      	bne.n	8014624 <_dtoa_r+0x48c>
 801460a:	4b48      	ldr	r3, [pc, #288]	@ (801472c <_dtoa_r+0x594>)
 801460c:	2200      	movs	r2, #0
 801460e:	ec51 0b17 	vmov	r0, r1, d7
 8014612:	f7ec f821 	bl	8000658 <__aeabi_dmul>
 8014616:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801461a:	f7ec faa3 	bl	8000b64 <__aeabi_dcmpge>
 801461e:	2800      	cmp	r0, #0
 8014620:	f000 8266 	beq.w	8014af0 <_dtoa_r+0x958>
 8014624:	2400      	movs	r4, #0
 8014626:	4625      	mov	r5, r4
 8014628:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801462a:	4656      	mov	r6, sl
 801462c:	ea6f 0803 	mvn.w	r8, r3
 8014630:	2700      	movs	r7, #0
 8014632:	4621      	mov	r1, r4
 8014634:	4648      	mov	r0, r9
 8014636:	f000 ff89 	bl	801554c <_Bfree>
 801463a:	2d00      	cmp	r5, #0
 801463c:	f000 80bd 	beq.w	80147ba <_dtoa_r+0x622>
 8014640:	b12f      	cbz	r7, 801464e <_dtoa_r+0x4b6>
 8014642:	42af      	cmp	r7, r5
 8014644:	d003      	beq.n	801464e <_dtoa_r+0x4b6>
 8014646:	4639      	mov	r1, r7
 8014648:	4648      	mov	r0, r9
 801464a:	f000 ff7f 	bl	801554c <_Bfree>
 801464e:	4629      	mov	r1, r5
 8014650:	4648      	mov	r0, r9
 8014652:	f000 ff7b 	bl	801554c <_Bfree>
 8014656:	e0b0      	b.n	80147ba <_dtoa_r+0x622>
 8014658:	07e2      	lsls	r2, r4, #31
 801465a:	d505      	bpl.n	8014668 <_dtoa_r+0x4d0>
 801465c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014660:	f7eb fffa 	bl	8000658 <__aeabi_dmul>
 8014664:	3601      	adds	r6, #1
 8014666:	2301      	movs	r3, #1
 8014668:	1064      	asrs	r4, r4, #1
 801466a:	3508      	adds	r5, #8
 801466c:	e762      	b.n	8014534 <_dtoa_r+0x39c>
 801466e:	2602      	movs	r6, #2
 8014670:	e765      	b.n	801453e <_dtoa_r+0x3a6>
 8014672:	9c03      	ldr	r4, [sp, #12]
 8014674:	46b8      	mov	r8, r7
 8014676:	e784      	b.n	8014582 <_dtoa_r+0x3ea>
 8014678:	4b27      	ldr	r3, [pc, #156]	@ (8014718 <_dtoa_r+0x580>)
 801467a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801467c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014680:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014684:	4454      	add	r4, sl
 8014686:	2900      	cmp	r1, #0
 8014688:	d054      	beq.n	8014734 <_dtoa_r+0x59c>
 801468a:	4929      	ldr	r1, [pc, #164]	@ (8014730 <_dtoa_r+0x598>)
 801468c:	2000      	movs	r0, #0
 801468e:	f7ec f90d 	bl	80008ac <__aeabi_ddiv>
 8014692:	4633      	mov	r3, r6
 8014694:	462a      	mov	r2, r5
 8014696:	f7eb fe27 	bl	80002e8 <__aeabi_dsub>
 801469a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801469e:	4656      	mov	r6, sl
 80146a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80146a4:	f7ec fa88 	bl	8000bb8 <__aeabi_d2iz>
 80146a8:	4605      	mov	r5, r0
 80146aa:	f7eb ff6b 	bl	8000584 <__aeabi_i2d>
 80146ae:	4602      	mov	r2, r0
 80146b0:	460b      	mov	r3, r1
 80146b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80146b6:	f7eb fe17 	bl	80002e8 <__aeabi_dsub>
 80146ba:	3530      	adds	r5, #48	@ 0x30
 80146bc:	4602      	mov	r2, r0
 80146be:	460b      	mov	r3, r1
 80146c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80146c4:	f806 5b01 	strb.w	r5, [r6], #1
 80146c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80146cc:	f7ec fa36 	bl	8000b3c <__aeabi_dcmplt>
 80146d0:	2800      	cmp	r0, #0
 80146d2:	d172      	bne.n	80147ba <_dtoa_r+0x622>
 80146d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80146d8:	4911      	ldr	r1, [pc, #68]	@ (8014720 <_dtoa_r+0x588>)
 80146da:	2000      	movs	r0, #0
 80146dc:	f7eb fe04 	bl	80002e8 <__aeabi_dsub>
 80146e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80146e4:	f7ec fa2a 	bl	8000b3c <__aeabi_dcmplt>
 80146e8:	2800      	cmp	r0, #0
 80146ea:	f040 80b4 	bne.w	8014856 <_dtoa_r+0x6be>
 80146ee:	42a6      	cmp	r6, r4
 80146f0:	f43f af70 	beq.w	80145d4 <_dtoa_r+0x43c>
 80146f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80146f8:	4b0a      	ldr	r3, [pc, #40]	@ (8014724 <_dtoa_r+0x58c>)
 80146fa:	2200      	movs	r2, #0
 80146fc:	f7eb ffac 	bl	8000658 <__aeabi_dmul>
 8014700:	4b08      	ldr	r3, [pc, #32]	@ (8014724 <_dtoa_r+0x58c>)
 8014702:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8014706:	2200      	movs	r2, #0
 8014708:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801470c:	f7eb ffa4 	bl	8000658 <__aeabi_dmul>
 8014710:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014714:	e7c4      	b.n	80146a0 <_dtoa_r+0x508>
 8014716:	bf00      	nop
 8014718:	080186e0 	.word	0x080186e0
 801471c:	080186b8 	.word	0x080186b8
 8014720:	3ff00000 	.word	0x3ff00000
 8014724:	40240000 	.word	0x40240000
 8014728:	401c0000 	.word	0x401c0000
 801472c:	40140000 	.word	0x40140000
 8014730:	3fe00000 	.word	0x3fe00000
 8014734:	4631      	mov	r1, r6
 8014736:	4628      	mov	r0, r5
 8014738:	f7eb ff8e 	bl	8000658 <__aeabi_dmul>
 801473c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8014740:	9413      	str	r4, [sp, #76]	@ 0x4c
 8014742:	4656      	mov	r6, sl
 8014744:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014748:	f7ec fa36 	bl	8000bb8 <__aeabi_d2iz>
 801474c:	4605      	mov	r5, r0
 801474e:	f7eb ff19 	bl	8000584 <__aeabi_i2d>
 8014752:	4602      	mov	r2, r0
 8014754:	460b      	mov	r3, r1
 8014756:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801475a:	f7eb fdc5 	bl	80002e8 <__aeabi_dsub>
 801475e:	3530      	adds	r5, #48	@ 0x30
 8014760:	f806 5b01 	strb.w	r5, [r6], #1
 8014764:	4602      	mov	r2, r0
 8014766:	460b      	mov	r3, r1
 8014768:	42a6      	cmp	r6, r4
 801476a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801476e:	f04f 0200 	mov.w	r2, #0
 8014772:	d124      	bne.n	80147be <_dtoa_r+0x626>
 8014774:	4baf      	ldr	r3, [pc, #700]	@ (8014a34 <_dtoa_r+0x89c>)
 8014776:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801477a:	f7eb fdb7 	bl	80002ec <__adddf3>
 801477e:	4602      	mov	r2, r0
 8014780:	460b      	mov	r3, r1
 8014782:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014786:	f7ec f9f7 	bl	8000b78 <__aeabi_dcmpgt>
 801478a:	2800      	cmp	r0, #0
 801478c:	d163      	bne.n	8014856 <_dtoa_r+0x6be>
 801478e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8014792:	49a8      	ldr	r1, [pc, #672]	@ (8014a34 <_dtoa_r+0x89c>)
 8014794:	2000      	movs	r0, #0
 8014796:	f7eb fda7 	bl	80002e8 <__aeabi_dsub>
 801479a:	4602      	mov	r2, r0
 801479c:	460b      	mov	r3, r1
 801479e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80147a2:	f7ec f9cb 	bl	8000b3c <__aeabi_dcmplt>
 80147a6:	2800      	cmp	r0, #0
 80147a8:	f43f af14 	beq.w	80145d4 <_dtoa_r+0x43c>
 80147ac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80147ae:	1e73      	subs	r3, r6, #1
 80147b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80147b2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80147b6:	2b30      	cmp	r3, #48	@ 0x30
 80147b8:	d0f8      	beq.n	80147ac <_dtoa_r+0x614>
 80147ba:	4647      	mov	r7, r8
 80147bc:	e03b      	b.n	8014836 <_dtoa_r+0x69e>
 80147be:	4b9e      	ldr	r3, [pc, #632]	@ (8014a38 <_dtoa_r+0x8a0>)
 80147c0:	f7eb ff4a 	bl	8000658 <__aeabi_dmul>
 80147c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80147c8:	e7bc      	b.n	8014744 <_dtoa_r+0x5ac>
 80147ca:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80147ce:	4656      	mov	r6, sl
 80147d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80147d4:	4620      	mov	r0, r4
 80147d6:	4629      	mov	r1, r5
 80147d8:	f7ec f868 	bl	80008ac <__aeabi_ddiv>
 80147dc:	f7ec f9ec 	bl	8000bb8 <__aeabi_d2iz>
 80147e0:	4680      	mov	r8, r0
 80147e2:	f7eb fecf 	bl	8000584 <__aeabi_i2d>
 80147e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80147ea:	f7eb ff35 	bl	8000658 <__aeabi_dmul>
 80147ee:	4602      	mov	r2, r0
 80147f0:	460b      	mov	r3, r1
 80147f2:	4620      	mov	r0, r4
 80147f4:	4629      	mov	r1, r5
 80147f6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80147fa:	f7eb fd75 	bl	80002e8 <__aeabi_dsub>
 80147fe:	f806 4b01 	strb.w	r4, [r6], #1
 8014802:	9d03      	ldr	r5, [sp, #12]
 8014804:	eba6 040a 	sub.w	r4, r6, sl
 8014808:	42a5      	cmp	r5, r4
 801480a:	4602      	mov	r2, r0
 801480c:	460b      	mov	r3, r1
 801480e:	d133      	bne.n	8014878 <_dtoa_r+0x6e0>
 8014810:	f7eb fd6c 	bl	80002ec <__adddf3>
 8014814:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014818:	4604      	mov	r4, r0
 801481a:	460d      	mov	r5, r1
 801481c:	f7ec f9ac 	bl	8000b78 <__aeabi_dcmpgt>
 8014820:	b9c0      	cbnz	r0, 8014854 <_dtoa_r+0x6bc>
 8014822:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014826:	4620      	mov	r0, r4
 8014828:	4629      	mov	r1, r5
 801482a:	f7ec f97d 	bl	8000b28 <__aeabi_dcmpeq>
 801482e:	b110      	cbz	r0, 8014836 <_dtoa_r+0x69e>
 8014830:	f018 0f01 	tst.w	r8, #1
 8014834:	d10e      	bne.n	8014854 <_dtoa_r+0x6bc>
 8014836:	9902      	ldr	r1, [sp, #8]
 8014838:	4648      	mov	r0, r9
 801483a:	f000 fe87 	bl	801554c <_Bfree>
 801483e:	2300      	movs	r3, #0
 8014840:	7033      	strb	r3, [r6, #0]
 8014842:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014844:	3701      	adds	r7, #1
 8014846:	601f      	str	r7, [r3, #0]
 8014848:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801484a:	2b00      	cmp	r3, #0
 801484c:	f000 824b 	beq.w	8014ce6 <_dtoa_r+0xb4e>
 8014850:	601e      	str	r6, [r3, #0]
 8014852:	e248      	b.n	8014ce6 <_dtoa_r+0xb4e>
 8014854:	46b8      	mov	r8, r7
 8014856:	4633      	mov	r3, r6
 8014858:	461e      	mov	r6, r3
 801485a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801485e:	2a39      	cmp	r2, #57	@ 0x39
 8014860:	d106      	bne.n	8014870 <_dtoa_r+0x6d8>
 8014862:	459a      	cmp	sl, r3
 8014864:	d1f8      	bne.n	8014858 <_dtoa_r+0x6c0>
 8014866:	2230      	movs	r2, #48	@ 0x30
 8014868:	f108 0801 	add.w	r8, r8, #1
 801486c:	f88a 2000 	strb.w	r2, [sl]
 8014870:	781a      	ldrb	r2, [r3, #0]
 8014872:	3201      	adds	r2, #1
 8014874:	701a      	strb	r2, [r3, #0]
 8014876:	e7a0      	b.n	80147ba <_dtoa_r+0x622>
 8014878:	4b6f      	ldr	r3, [pc, #444]	@ (8014a38 <_dtoa_r+0x8a0>)
 801487a:	2200      	movs	r2, #0
 801487c:	f7eb feec 	bl	8000658 <__aeabi_dmul>
 8014880:	2200      	movs	r2, #0
 8014882:	2300      	movs	r3, #0
 8014884:	4604      	mov	r4, r0
 8014886:	460d      	mov	r5, r1
 8014888:	f7ec f94e 	bl	8000b28 <__aeabi_dcmpeq>
 801488c:	2800      	cmp	r0, #0
 801488e:	d09f      	beq.n	80147d0 <_dtoa_r+0x638>
 8014890:	e7d1      	b.n	8014836 <_dtoa_r+0x69e>
 8014892:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014894:	2a00      	cmp	r2, #0
 8014896:	f000 80ea 	beq.w	8014a6e <_dtoa_r+0x8d6>
 801489a:	9a07      	ldr	r2, [sp, #28]
 801489c:	2a01      	cmp	r2, #1
 801489e:	f300 80cd 	bgt.w	8014a3c <_dtoa_r+0x8a4>
 80148a2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80148a4:	2a00      	cmp	r2, #0
 80148a6:	f000 80c1 	beq.w	8014a2c <_dtoa_r+0x894>
 80148aa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80148ae:	9c08      	ldr	r4, [sp, #32]
 80148b0:	9e00      	ldr	r6, [sp, #0]
 80148b2:	9a00      	ldr	r2, [sp, #0]
 80148b4:	441a      	add	r2, r3
 80148b6:	9200      	str	r2, [sp, #0]
 80148b8:	9a06      	ldr	r2, [sp, #24]
 80148ba:	2101      	movs	r1, #1
 80148bc:	441a      	add	r2, r3
 80148be:	4648      	mov	r0, r9
 80148c0:	9206      	str	r2, [sp, #24]
 80148c2:	f000 ff41 	bl	8015748 <__i2b>
 80148c6:	4605      	mov	r5, r0
 80148c8:	b166      	cbz	r6, 80148e4 <_dtoa_r+0x74c>
 80148ca:	9b06      	ldr	r3, [sp, #24]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	dd09      	ble.n	80148e4 <_dtoa_r+0x74c>
 80148d0:	42b3      	cmp	r3, r6
 80148d2:	9a00      	ldr	r2, [sp, #0]
 80148d4:	bfa8      	it	ge
 80148d6:	4633      	movge	r3, r6
 80148d8:	1ad2      	subs	r2, r2, r3
 80148da:	9200      	str	r2, [sp, #0]
 80148dc:	9a06      	ldr	r2, [sp, #24]
 80148de:	1af6      	subs	r6, r6, r3
 80148e0:	1ad3      	subs	r3, r2, r3
 80148e2:	9306      	str	r3, [sp, #24]
 80148e4:	9b08      	ldr	r3, [sp, #32]
 80148e6:	b30b      	cbz	r3, 801492c <_dtoa_r+0x794>
 80148e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	f000 80c6 	beq.w	8014a7c <_dtoa_r+0x8e4>
 80148f0:	2c00      	cmp	r4, #0
 80148f2:	f000 80c0 	beq.w	8014a76 <_dtoa_r+0x8de>
 80148f6:	4629      	mov	r1, r5
 80148f8:	4622      	mov	r2, r4
 80148fa:	4648      	mov	r0, r9
 80148fc:	f000 ffdc 	bl	80158b8 <__pow5mult>
 8014900:	9a02      	ldr	r2, [sp, #8]
 8014902:	4601      	mov	r1, r0
 8014904:	4605      	mov	r5, r0
 8014906:	4648      	mov	r0, r9
 8014908:	f000 ff34 	bl	8015774 <__multiply>
 801490c:	9902      	ldr	r1, [sp, #8]
 801490e:	4680      	mov	r8, r0
 8014910:	4648      	mov	r0, r9
 8014912:	f000 fe1b 	bl	801554c <_Bfree>
 8014916:	9b08      	ldr	r3, [sp, #32]
 8014918:	1b1b      	subs	r3, r3, r4
 801491a:	9308      	str	r3, [sp, #32]
 801491c:	f000 80b1 	beq.w	8014a82 <_dtoa_r+0x8ea>
 8014920:	9a08      	ldr	r2, [sp, #32]
 8014922:	4641      	mov	r1, r8
 8014924:	4648      	mov	r0, r9
 8014926:	f000 ffc7 	bl	80158b8 <__pow5mult>
 801492a:	9002      	str	r0, [sp, #8]
 801492c:	2101      	movs	r1, #1
 801492e:	4648      	mov	r0, r9
 8014930:	f000 ff0a 	bl	8015748 <__i2b>
 8014934:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014936:	4604      	mov	r4, r0
 8014938:	2b00      	cmp	r3, #0
 801493a:	f000 81d8 	beq.w	8014cee <_dtoa_r+0xb56>
 801493e:	461a      	mov	r2, r3
 8014940:	4601      	mov	r1, r0
 8014942:	4648      	mov	r0, r9
 8014944:	f000 ffb8 	bl	80158b8 <__pow5mult>
 8014948:	9b07      	ldr	r3, [sp, #28]
 801494a:	2b01      	cmp	r3, #1
 801494c:	4604      	mov	r4, r0
 801494e:	f300 809f 	bgt.w	8014a90 <_dtoa_r+0x8f8>
 8014952:	9b04      	ldr	r3, [sp, #16]
 8014954:	2b00      	cmp	r3, #0
 8014956:	f040 8097 	bne.w	8014a88 <_dtoa_r+0x8f0>
 801495a:	9b05      	ldr	r3, [sp, #20]
 801495c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014960:	2b00      	cmp	r3, #0
 8014962:	f040 8093 	bne.w	8014a8c <_dtoa_r+0x8f4>
 8014966:	9b05      	ldr	r3, [sp, #20]
 8014968:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801496c:	0d1b      	lsrs	r3, r3, #20
 801496e:	051b      	lsls	r3, r3, #20
 8014970:	b133      	cbz	r3, 8014980 <_dtoa_r+0x7e8>
 8014972:	9b00      	ldr	r3, [sp, #0]
 8014974:	3301      	adds	r3, #1
 8014976:	9300      	str	r3, [sp, #0]
 8014978:	9b06      	ldr	r3, [sp, #24]
 801497a:	3301      	adds	r3, #1
 801497c:	9306      	str	r3, [sp, #24]
 801497e:	2301      	movs	r3, #1
 8014980:	9308      	str	r3, [sp, #32]
 8014982:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014984:	2b00      	cmp	r3, #0
 8014986:	f000 81b8 	beq.w	8014cfa <_dtoa_r+0xb62>
 801498a:	6923      	ldr	r3, [r4, #16]
 801498c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014990:	6918      	ldr	r0, [r3, #16]
 8014992:	f000 fe8d 	bl	80156b0 <__hi0bits>
 8014996:	f1c0 0020 	rsb	r0, r0, #32
 801499a:	9b06      	ldr	r3, [sp, #24]
 801499c:	4418      	add	r0, r3
 801499e:	f010 001f 	ands.w	r0, r0, #31
 80149a2:	f000 8082 	beq.w	8014aaa <_dtoa_r+0x912>
 80149a6:	f1c0 0320 	rsb	r3, r0, #32
 80149aa:	2b04      	cmp	r3, #4
 80149ac:	dd73      	ble.n	8014a96 <_dtoa_r+0x8fe>
 80149ae:	9b00      	ldr	r3, [sp, #0]
 80149b0:	f1c0 001c 	rsb	r0, r0, #28
 80149b4:	4403      	add	r3, r0
 80149b6:	9300      	str	r3, [sp, #0]
 80149b8:	9b06      	ldr	r3, [sp, #24]
 80149ba:	4403      	add	r3, r0
 80149bc:	4406      	add	r6, r0
 80149be:	9306      	str	r3, [sp, #24]
 80149c0:	9b00      	ldr	r3, [sp, #0]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	dd05      	ble.n	80149d2 <_dtoa_r+0x83a>
 80149c6:	9902      	ldr	r1, [sp, #8]
 80149c8:	461a      	mov	r2, r3
 80149ca:	4648      	mov	r0, r9
 80149cc:	f000 ffce 	bl	801596c <__lshift>
 80149d0:	9002      	str	r0, [sp, #8]
 80149d2:	9b06      	ldr	r3, [sp, #24]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	dd05      	ble.n	80149e4 <_dtoa_r+0x84c>
 80149d8:	4621      	mov	r1, r4
 80149da:	461a      	mov	r2, r3
 80149dc:	4648      	mov	r0, r9
 80149de:	f000 ffc5 	bl	801596c <__lshift>
 80149e2:	4604      	mov	r4, r0
 80149e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d061      	beq.n	8014aae <_dtoa_r+0x916>
 80149ea:	9802      	ldr	r0, [sp, #8]
 80149ec:	4621      	mov	r1, r4
 80149ee:	f001 f829 	bl	8015a44 <__mcmp>
 80149f2:	2800      	cmp	r0, #0
 80149f4:	da5b      	bge.n	8014aae <_dtoa_r+0x916>
 80149f6:	2300      	movs	r3, #0
 80149f8:	9902      	ldr	r1, [sp, #8]
 80149fa:	220a      	movs	r2, #10
 80149fc:	4648      	mov	r0, r9
 80149fe:	f000 fdc7 	bl	8015590 <__multadd>
 8014a02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a04:	9002      	str	r0, [sp, #8]
 8014a06:	f107 38ff 	add.w	r8, r7, #4294967295
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	f000 8177 	beq.w	8014cfe <_dtoa_r+0xb66>
 8014a10:	4629      	mov	r1, r5
 8014a12:	2300      	movs	r3, #0
 8014a14:	220a      	movs	r2, #10
 8014a16:	4648      	mov	r0, r9
 8014a18:	f000 fdba 	bl	8015590 <__multadd>
 8014a1c:	f1bb 0f00 	cmp.w	fp, #0
 8014a20:	4605      	mov	r5, r0
 8014a22:	dc6f      	bgt.n	8014b04 <_dtoa_r+0x96c>
 8014a24:	9b07      	ldr	r3, [sp, #28]
 8014a26:	2b02      	cmp	r3, #2
 8014a28:	dc49      	bgt.n	8014abe <_dtoa_r+0x926>
 8014a2a:	e06b      	b.n	8014b04 <_dtoa_r+0x96c>
 8014a2c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8014a2e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8014a32:	e73c      	b.n	80148ae <_dtoa_r+0x716>
 8014a34:	3fe00000 	.word	0x3fe00000
 8014a38:	40240000 	.word	0x40240000
 8014a3c:	9b03      	ldr	r3, [sp, #12]
 8014a3e:	1e5c      	subs	r4, r3, #1
 8014a40:	9b08      	ldr	r3, [sp, #32]
 8014a42:	42a3      	cmp	r3, r4
 8014a44:	db09      	blt.n	8014a5a <_dtoa_r+0x8c2>
 8014a46:	1b1c      	subs	r4, r3, r4
 8014a48:	9b03      	ldr	r3, [sp, #12]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	f6bf af30 	bge.w	80148b0 <_dtoa_r+0x718>
 8014a50:	9b00      	ldr	r3, [sp, #0]
 8014a52:	9a03      	ldr	r2, [sp, #12]
 8014a54:	1a9e      	subs	r6, r3, r2
 8014a56:	2300      	movs	r3, #0
 8014a58:	e72b      	b.n	80148b2 <_dtoa_r+0x71a>
 8014a5a:	9b08      	ldr	r3, [sp, #32]
 8014a5c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014a5e:	9408      	str	r4, [sp, #32]
 8014a60:	1ae3      	subs	r3, r4, r3
 8014a62:	441a      	add	r2, r3
 8014a64:	9e00      	ldr	r6, [sp, #0]
 8014a66:	9b03      	ldr	r3, [sp, #12]
 8014a68:	920d      	str	r2, [sp, #52]	@ 0x34
 8014a6a:	2400      	movs	r4, #0
 8014a6c:	e721      	b.n	80148b2 <_dtoa_r+0x71a>
 8014a6e:	9c08      	ldr	r4, [sp, #32]
 8014a70:	9e00      	ldr	r6, [sp, #0]
 8014a72:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8014a74:	e728      	b.n	80148c8 <_dtoa_r+0x730>
 8014a76:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8014a7a:	e751      	b.n	8014920 <_dtoa_r+0x788>
 8014a7c:	9a08      	ldr	r2, [sp, #32]
 8014a7e:	9902      	ldr	r1, [sp, #8]
 8014a80:	e750      	b.n	8014924 <_dtoa_r+0x78c>
 8014a82:	f8cd 8008 	str.w	r8, [sp, #8]
 8014a86:	e751      	b.n	801492c <_dtoa_r+0x794>
 8014a88:	2300      	movs	r3, #0
 8014a8a:	e779      	b.n	8014980 <_dtoa_r+0x7e8>
 8014a8c:	9b04      	ldr	r3, [sp, #16]
 8014a8e:	e777      	b.n	8014980 <_dtoa_r+0x7e8>
 8014a90:	2300      	movs	r3, #0
 8014a92:	9308      	str	r3, [sp, #32]
 8014a94:	e779      	b.n	801498a <_dtoa_r+0x7f2>
 8014a96:	d093      	beq.n	80149c0 <_dtoa_r+0x828>
 8014a98:	9a00      	ldr	r2, [sp, #0]
 8014a9a:	331c      	adds	r3, #28
 8014a9c:	441a      	add	r2, r3
 8014a9e:	9200      	str	r2, [sp, #0]
 8014aa0:	9a06      	ldr	r2, [sp, #24]
 8014aa2:	441a      	add	r2, r3
 8014aa4:	441e      	add	r6, r3
 8014aa6:	9206      	str	r2, [sp, #24]
 8014aa8:	e78a      	b.n	80149c0 <_dtoa_r+0x828>
 8014aaa:	4603      	mov	r3, r0
 8014aac:	e7f4      	b.n	8014a98 <_dtoa_r+0x900>
 8014aae:	9b03      	ldr	r3, [sp, #12]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	46b8      	mov	r8, r7
 8014ab4:	dc20      	bgt.n	8014af8 <_dtoa_r+0x960>
 8014ab6:	469b      	mov	fp, r3
 8014ab8:	9b07      	ldr	r3, [sp, #28]
 8014aba:	2b02      	cmp	r3, #2
 8014abc:	dd1e      	ble.n	8014afc <_dtoa_r+0x964>
 8014abe:	f1bb 0f00 	cmp.w	fp, #0
 8014ac2:	f47f adb1 	bne.w	8014628 <_dtoa_r+0x490>
 8014ac6:	4621      	mov	r1, r4
 8014ac8:	465b      	mov	r3, fp
 8014aca:	2205      	movs	r2, #5
 8014acc:	4648      	mov	r0, r9
 8014ace:	f000 fd5f 	bl	8015590 <__multadd>
 8014ad2:	4601      	mov	r1, r0
 8014ad4:	4604      	mov	r4, r0
 8014ad6:	9802      	ldr	r0, [sp, #8]
 8014ad8:	f000 ffb4 	bl	8015a44 <__mcmp>
 8014adc:	2800      	cmp	r0, #0
 8014ade:	f77f ada3 	ble.w	8014628 <_dtoa_r+0x490>
 8014ae2:	4656      	mov	r6, sl
 8014ae4:	2331      	movs	r3, #49	@ 0x31
 8014ae6:	f806 3b01 	strb.w	r3, [r6], #1
 8014aea:	f108 0801 	add.w	r8, r8, #1
 8014aee:	e59f      	b.n	8014630 <_dtoa_r+0x498>
 8014af0:	9c03      	ldr	r4, [sp, #12]
 8014af2:	46b8      	mov	r8, r7
 8014af4:	4625      	mov	r5, r4
 8014af6:	e7f4      	b.n	8014ae2 <_dtoa_r+0x94a>
 8014af8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8014afc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	f000 8101 	beq.w	8014d06 <_dtoa_r+0xb6e>
 8014b04:	2e00      	cmp	r6, #0
 8014b06:	dd05      	ble.n	8014b14 <_dtoa_r+0x97c>
 8014b08:	4629      	mov	r1, r5
 8014b0a:	4632      	mov	r2, r6
 8014b0c:	4648      	mov	r0, r9
 8014b0e:	f000 ff2d 	bl	801596c <__lshift>
 8014b12:	4605      	mov	r5, r0
 8014b14:	9b08      	ldr	r3, [sp, #32]
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d05c      	beq.n	8014bd4 <_dtoa_r+0xa3c>
 8014b1a:	6869      	ldr	r1, [r5, #4]
 8014b1c:	4648      	mov	r0, r9
 8014b1e:	f000 fcd5 	bl	80154cc <_Balloc>
 8014b22:	4606      	mov	r6, r0
 8014b24:	b928      	cbnz	r0, 8014b32 <_dtoa_r+0x99a>
 8014b26:	4b82      	ldr	r3, [pc, #520]	@ (8014d30 <_dtoa_r+0xb98>)
 8014b28:	4602      	mov	r2, r0
 8014b2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8014b2e:	f7ff bb4a 	b.w	80141c6 <_dtoa_r+0x2e>
 8014b32:	692a      	ldr	r2, [r5, #16]
 8014b34:	3202      	adds	r2, #2
 8014b36:	0092      	lsls	r2, r2, #2
 8014b38:	f105 010c 	add.w	r1, r5, #12
 8014b3c:	300c      	adds	r0, #12
 8014b3e:	f7ff fa7d 	bl	801403c <memcpy>
 8014b42:	2201      	movs	r2, #1
 8014b44:	4631      	mov	r1, r6
 8014b46:	4648      	mov	r0, r9
 8014b48:	f000 ff10 	bl	801596c <__lshift>
 8014b4c:	f10a 0301 	add.w	r3, sl, #1
 8014b50:	9300      	str	r3, [sp, #0]
 8014b52:	eb0a 030b 	add.w	r3, sl, fp
 8014b56:	9308      	str	r3, [sp, #32]
 8014b58:	9b04      	ldr	r3, [sp, #16]
 8014b5a:	f003 0301 	and.w	r3, r3, #1
 8014b5e:	462f      	mov	r7, r5
 8014b60:	9306      	str	r3, [sp, #24]
 8014b62:	4605      	mov	r5, r0
 8014b64:	9b00      	ldr	r3, [sp, #0]
 8014b66:	9802      	ldr	r0, [sp, #8]
 8014b68:	4621      	mov	r1, r4
 8014b6a:	f103 3bff 	add.w	fp, r3, #4294967295
 8014b6e:	f7ff fa88 	bl	8014082 <quorem>
 8014b72:	4603      	mov	r3, r0
 8014b74:	3330      	adds	r3, #48	@ 0x30
 8014b76:	9003      	str	r0, [sp, #12]
 8014b78:	4639      	mov	r1, r7
 8014b7a:	9802      	ldr	r0, [sp, #8]
 8014b7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8014b7e:	f000 ff61 	bl	8015a44 <__mcmp>
 8014b82:	462a      	mov	r2, r5
 8014b84:	9004      	str	r0, [sp, #16]
 8014b86:	4621      	mov	r1, r4
 8014b88:	4648      	mov	r0, r9
 8014b8a:	f000 ff77 	bl	8015a7c <__mdiff>
 8014b8e:	68c2      	ldr	r2, [r0, #12]
 8014b90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b92:	4606      	mov	r6, r0
 8014b94:	bb02      	cbnz	r2, 8014bd8 <_dtoa_r+0xa40>
 8014b96:	4601      	mov	r1, r0
 8014b98:	9802      	ldr	r0, [sp, #8]
 8014b9a:	f000 ff53 	bl	8015a44 <__mcmp>
 8014b9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014ba0:	4602      	mov	r2, r0
 8014ba2:	4631      	mov	r1, r6
 8014ba4:	4648      	mov	r0, r9
 8014ba6:	920c      	str	r2, [sp, #48]	@ 0x30
 8014ba8:	9309      	str	r3, [sp, #36]	@ 0x24
 8014baa:	f000 fccf 	bl	801554c <_Bfree>
 8014bae:	9b07      	ldr	r3, [sp, #28]
 8014bb0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8014bb2:	9e00      	ldr	r6, [sp, #0]
 8014bb4:	ea42 0103 	orr.w	r1, r2, r3
 8014bb8:	9b06      	ldr	r3, [sp, #24]
 8014bba:	4319      	orrs	r1, r3
 8014bbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014bbe:	d10d      	bne.n	8014bdc <_dtoa_r+0xa44>
 8014bc0:	2b39      	cmp	r3, #57	@ 0x39
 8014bc2:	d027      	beq.n	8014c14 <_dtoa_r+0xa7c>
 8014bc4:	9a04      	ldr	r2, [sp, #16]
 8014bc6:	2a00      	cmp	r2, #0
 8014bc8:	dd01      	ble.n	8014bce <_dtoa_r+0xa36>
 8014bca:	9b03      	ldr	r3, [sp, #12]
 8014bcc:	3331      	adds	r3, #49	@ 0x31
 8014bce:	f88b 3000 	strb.w	r3, [fp]
 8014bd2:	e52e      	b.n	8014632 <_dtoa_r+0x49a>
 8014bd4:	4628      	mov	r0, r5
 8014bd6:	e7b9      	b.n	8014b4c <_dtoa_r+0x9b4>
 8014bd8:	2201      	movs	r2, #1
 8014bda:	e7e2      	b.n	8014ba2 <_dtoa_r+0xa0a>
 8014bdc:	9904      	ldr	r1, [sp, #16]
 8014bde:	2900      	cmp	r1, #0
 8014be0:	db04      	blt.n	8014bec <_dtoa_r+0xa54>
 8014be2:	9807      	ldr	r0, [sp, #28]
 8014be4:	4301      	orrs	r1, r0
 8014be6:	9806      	ldr	r0, [sp, #24]
 8014be8:	4301      	orrs	r1, r0
 8014bea:	d120      	bne.n	8014c2e <_dtoa_r+0xa96>
 8014bec:	2a00      	cmp	r2, #0
 8014bee:	ddee      	ble.n	8014bce <_dtoa_r+0xa36>
 8014bf0:	9902      	ldr	r1, [sp, #8]
 8014bf2:	9300      	str	r3, [sp, #0]
 8014bf4:	2201      	movs	r2, #1
 8014bf6:	4648      	mov	r0, r9
 8014bf8:	f000 feb8 	bl	801596c <__lshift>
 8014bfc:	4621      	mov	r1, r4
 8014bfe:	9002      	str	r0, [sp, #8]
 8014c00:	f000 ff20 	bl	8015a44 <__mcmp>
 8014c04:	2800      	cmp	r0, #0
 8014c06:	9b00      	ldr	r3, [sp, #0]
 8014c08:	dc02      	bgt.n	8014c10 <_dtoa_r+0xa78>
 8014c0a:	d1e0      	bne.n	8014bce <_dtoa_r+0xa36>
 8014c0c:	07da      	lsls	r2, r3, #31
 8014c0e:	d5de      	bpl.n	8014bce <_dtoa_r+0xa36>
 8014c10:	2b39      	cmp	r3, #57	@ 0x39
 8014c12:	d1da      	bne.n	8014bca <_dtoa_r+0xa32>
 8014c14:	2339      	movs	r3, #57	@ 0x39
 8014c16:	f88b 3000 	strb.w	r3, [fp]
 8014c1a:	4633      	mov	r3, r6
 8014c1c:	461e      	mov	r6, r3
 8014c1e:	3b01      	subs	r3, #1
 8014c20:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014c24:	2a39      	cmp	r2, #57	@ 0x39
 8014c26:	d04e      	beq.n	8014cc6 <_dtoa_r+0xb2e>
 8014c28:	3201      	adds	r2, #1
 8014c2a:	701a      	strb	r2, [r3, #0]
 8014c2c:	e501      	b.n	8014632 <_dtoa_r+0x49a>
 8014c2e:	2a00      	cmp	r2, #0
 8014c30:	dd03      	ble.n	8014c3a <_dtoa_r+0xaa2>
 8014c32:	2b39      	cmp	r3, #57	@ 0x39
 8014c34:	d0ee      	beq.n	8014c14 <_dtoa_r+0xa7c>
 8014c36:	3301      	adds	r3, #1
 8014c38:	e7c9      	b.n	8014bce <_dtoa_r+0xa36>
 8014c3a:	9a00      	ldr	r2, [sp, #0]
 8014c3c:	9908      	ldr	r1, [sp, #32]
 8014c3e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014c42:	428a      	cmp	r2, r1
 8014c44:	d028      	beq.n	8014c98 <_dtoa_r+0xb00>
 8014c46:	9902      	ldr	r1, [sp, #8]
 8014c48:	2300      	movs	r3, #0
 8014c4a:	220a      	movs	r2, #10
 8014c4c:	4648      	mov	r0, r9
 8014c4e:	f000 fc9f 	bl	8015590 <__multadd>
 8014c52:	42af      	cmp	r7, r5
 8014c54:	9002      	str	r0, [sp, #8]
 8014c56:	f04f 0300 	mov.w	r3, #0
 8014c5a:	f04f 020a 	mov.w	r2, #10
 8014c5e:	4639      	mov	r1, r7
 8014c60:	4648      	mov	r0, r9
 8014c62:	d107      	bne.n	8014c74 <_dtoa_r+0xadc>
 8014c64:	f000 fc94 	bl	8015590 <__multadd>
 8014c68:	4607      	mov	r7, r0
 8014c6a:	4605      	mov	r5, r0
 8014c6c:	9b00      	ldr	r3, [sp, #0]
 8014c6e:	3301      	adds	r3, #1
 8014c70:	9300      	str	r3, [sp, #0]
 8014c72:	e777      	b.n	8014b64 <_dtoa_r+0x9cc>
 8014c74:	f000 fc8c 	bl	8015590 <__multadd>
 8014c78:	4629      	mov	r1, r5
 8014c7a:	4607      	mov	r7, r0
 8014c7c:	2300      	movs	r3, #0
 8014c7e:	220a      	movs	r2, #10
 8014c80:	4648      	mov	r0, r9
 8014c82:	f000 fc85 	bl	8015590 <__multadd>
 8014c86:	4605      	mov	r5, r0
 8014c88:	e7f0      	b.n	8014c6c <_dtoa_r+0xad4>
 8014c8a:	f1bb 0f00 	cmp.w	fp, #0
 8014c8e:	bfcc      	ite	gt
 8014c90:	465e      	movgt	r6, fp
 8014c92:	2601      	movle	r6, #1
 8014c94:	4456      	add	r6, sl
 8014c96:	2700      	movs	r7, #0
 8014c98:	9902      	ldr	r1, [sp, #8]
 8014c9a:	9300      	str	r3, [sp, #0]
 8014c9c:	2201      	movs	r2, #1
 8014c9e:	4648      	mov	r0, r9
 8014ca0:	f000 fe64 	bl	801596c <__lshift>
 8014ca4:	4621      	mov	r1, r4
 8014ca6:	9002      	str	r0, [sp, #8]
 8014ca8:	f000 fecc 	bl	8015a44 <__mcmp>
 8014cac:	2800      	cmp	r0, #0
 8014cae:	dcb4      	bgt.n	8014c1a <_dtoa_r+0xa82>
 8014cb0:	d102      	bne.n	8014cb8 <_dtoa_r+0xb20>
 8014cb2:	9b00      	ldr	r3, [sp, #0]
 8014cb4:	07db      	lsls	r3, r3, #31
 8014cb6:	d4b0      	bmi.n	8014c1a <_dtoa_r+0xa82>
 8014cb8:	4633      	mov	r3, r6
 8014cba:	461e      	mov	r6, r3
 8014cbc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014cc0:	2a30      	cmp	r2, #48	@ 0x30
 8014cc2:	d0fa      	beq.n	8014cba <_dtoa_r+0xb22>
 8014cc4:	e4b5      	b.n	8014632 <_dtoa_r+0x49a>
 8014cc6:	459a      	cmp	sl, r3
 8014cc8:	d1a8      	bne.n	8014c1c <_dtoa_r+0xa84>
 8014cca:	2331      	movs	r3, #49	@ 0x31
 8014ccc:	f108 0801 	add.w	r8, r8, #1
 8014cd0:	f88a 3000 	strb.w	r3, [sl]
 8014cd4:	e4ad      	b.n	8014632 <_dtoa_r+0x49a>
 8014cd6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014cd8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8014d34 <_dtoa_r+0xb9c>
 8014cdc:	b11b      	cbz	r3, 8014ce6 <_dtoa_r+0xb4e>
 8014cde:	f10a 0308 	add.w	r3, sl, #8
 8014ce2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8014ce4:	6013      	str	r3, [r2, #0]
 8014ce6:	4650      	mov	r0, sl
 8014ce8:	b017      	add	sp, #92	@ 0x5c
 8014cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cee:	9b07      	ldr	r3, [sp, #28]
 8014cf0:	2b01      	cmp	r3, #1
 8014cf2:	f77f ae2e 	ble.w	8014952 <_dtoa_r+0x7ba>
 8014cf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014cf8:	9308      	str	r3, [sp, #32]
 8014cfa:	2001      	movs	r0, #1
 8014cfc:	e64d      	b.n	801499a <_dtoa_r+0x802>
 8014cfe:	f1bb 0f00 	cmp.w	fp, #0
 8014d02:	f77f aed9 	ble.w	8014ab8 <_dtoa_r+0x920>
 8014d06:	4656      	mov	r6, sl
 8014d08:	9802      	ldr	r0, [sp, #8]
 8014d0a:	4621      	mov	r1, r4
 8014d0c:	f7ff f9b9 	bl	8014082 <quorem>
 8014d10:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8014d14:	f806 3b01 	strb.w	r3, [r6], #1
 8014d18:	eba6 020a 	sub.w	r2, r6, sl
 8014d1c:	4593      	cmp	fp, r2
 8014d1e:	ddb4      	ble.n	8014c8a <_dtoa_r+0xaf2>
 8014d20:	9902      	ldr	r1, [sp, #8]
 8014d22:	2300      	movs	r3, #0
 8014d24:	220a      	movs	r2, #10
 8014d26:	4648      	mov	r0, r9
 8014d28:	f000 fc32 	bl	8015590 <__multadd>
 8014d2c:	9002      	str	r0, [sp, #8]
 8014d2e:	e7eb      	b.n	8014d08 <_dtoa_r+0xb70>
 8014d30:	0801847d 	.word	0x0801847d
 8014d34:	08018418 	.word	0x08018418

08014d38 <_free_r>:
 8014d38:	b538      	push	{r3, r4, r5, lr}
 8014d3a:	4605      	mov	r5, r0
 8014d3c:	2900      	cmp	r1, #0
 8014d3e:	d041      	beq.n	8014dc4 <_free_r+0x8c>
 8014d40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014d44:	1f0c      	subs	r4, r1, #4
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	bfb8      	it	lt
 8014d4a:	18e4      	addlt	r4, r4, r3
 8014d4c:	f7f1 fab6 	bl	80062bc <__malloc_lock>
 8014d50:	4a1d      	ldr	r2, [pc, #116]	@ (8014dc8 <_free_r+0x90>)
 8014d52:	6813      	ldr	r3, [r2, #0]
 8014d54:	b933      	cbnz	r3, 8014d64 <_free_r+0x2c>
 8014d56:	6063      	str	r3, [r4, #4]
 8014d58:	6014      	str	r4, [r2, #0]
 8014d5a:	4628      	mov	r0, r5
 8014d5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014d60:	f7f1 bae6 	b.w	8006330 <__malloc_unlock>
 8014d64:	42a3      	cmp	r3, r4
 8014d66:	d908      	bls.n	8014d7a <_free_r+0x42>
 8014d68:	6820      	ldr	r0, [r4, #0]
 8014d6a:	1821      	adds	r1, r4, r0
 8014d6c:	428b      	cmp	r3, r1
 8014d6e:	bf01      	itttt	eq
 8014d70:	6819      	ldreq	r1, [r3, #0]
 8014d72:	685b      	ldreq	r3, [r3, #4]
 8014d74:	1809      	addeq	r1, r1, r0
 8014d76:	6021      	streq	r1, [r4, #0]
 8014d78:	e7ed      	b.n	8014d56 <_free_r+0x1e>
 8014d7a:	461a      	mov	r2, r3
 8014d7c:	685b      	ldr	r3, [r3, #4]
 8014d7e:	b10b      	cbz	r3, 8014d84 <_free_r+0x4c>
 8014d80:	42a3      	cmp	r3, r4
 8014d82:	d9fa      	bls.n	8014d7a <_free_r+0x42>
 8014d84:	6811      	ldr	r1, [r2, #0]
 8014d86:	1850      	adds	r0, r2, r1
 8014d88:	42a0      	cmp	r0, r4
 8014d8a:	d10b      	bne.n	8014da4 <_free_r+0x6c>
 8014d8c:	6820      	ldr	r0, [r4, #0]
 8014d8e:	4401      	add	r1, r0
 8014d90:	1850      	adds	r0, r2, r1
 8014d92:	4283      	cmp	r3, r0
 8014d94:	6011      	str	r1, [r2, #0]
 8014d96:	d1e0      	bne.n	8014d5a <_free_r+0x22>
 8014d98:	6818      	ldr	r0, [r3, #0]
 8014d9a:	685b      	ldr	r3, [r3, #4]
 8014d9c:	6053      	str	r3, [r2, #4]
 8014d9e:	4408      	add	r0, r1
 8014da0:	6010      	str	r0, [r2, #0]
 8014da2:	e7da      	b.n	8014d5a <_free_r+0x22>
 8014da4:	d902      	bls.n	8014dac <_free_r+0x74>
 8014da6:	230c      	movs	r3, #12
 8014da8:	602b      	str	r3, [r5, #0]
 8014daa:	e7d6      	b.n	8014d5a <_free_r+0x22>
 8014dac:	6820      	ldr	r0, [r4, #0]
 8014dae:	1821      	adds	r1, r4, r0
 8014db0:	428b      	cmp	r3, r1
 8014db2:	bf04      	itt	eq
 8014db4:	6819      	ldreq	r1, [r3, #0]
 8014db6:	685b      	ldreq	r3, [r3, #4]
 8014db8:	6063      	str	r3, [r4, #4]
 8014dba:	bf04      	itt	eq
 8014dbc:	1809      	addeq	r1, r1, r0
 8014dbe:	6021      	streq	r1, [r4, #0]
 8014dc0:	6054      	str	r4, [r2, #4]
 8014dc2:	e7ca      	b.n	8014d5a <_free_r+0x22>
 8014dc4:	bd38      	pop	{r3, r4, r5, pc}
 8014dc6:	bf00      	nop
 8014dc8:	2000064c 	.word	0x2000064c

08014dcc <rshift>:
 8014dcc:	6903      	ldr	r3, [r0, #16]
 8014dce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014dd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014dd6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014dda:	f100 0414 	add.w	r4, r0, #20
 8014dde:	dd45      	ble.n	8014e6c <rshift+0xa0>
 8014de0:	f011 011f 	ands.w	r1, r1, #31
 8014de4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014de8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014dec:	d10c      	bne.n	8014e08 <rshift+0x3c>
 8014dee:	f100 0710 	add.w	r7, r0, #16
 8014df2:	4629      	mov	r1, r5
 8014df4:	42b1      	cmp	r1, r6
 8014df6:	d334      	bcc.n	8014e62 <rshift+0x96>
 8014df8:	1a9b      	subs	r3, r3, r2
 8014dfa:	009b      	lsls	r3, r3, #2
 8014dfc:	1eea      	subs	r2, r5, #3
 8014dfe:	4296      	cmp	r6, r2
 8014e00:	bf38      	it	cc
 8014e02:	2300      	movcc	r3, #0
 8014e04:	4423      	add	r3, r4
 8014e06:	e015      	b.n	8014e34 <rshift+0x68>
 8014e08:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014e0c:	f1c1 0820 	rsb	r8, r1, #32
 8014e10:	40cf      	lsrs	r7, r1
 8014e12:	f105 0e04 	add.w	lr, r5, #4
 8014e16:	46a1      	mov	r9, r4
 8014e18:	4576      	cmp	r6, lr
 8014e1a:	46f4      	mov	ip, lr
 8014e1c:	d815      	bhi.n	8014e4a <rshift+0x7e>
 8014e1e:	1a9a      	subs	r2, r3, r2
 8014e20:	0092      	lsls	r2, r2, #2
 8014e22:	3a04      	subs	r2, #4
 8014e24:	3501      	adds	r5, #1
 8014e26:	42ae      	cmp	r6, r5
 8014e28:	bf38      	it	cc
 8014e2a:	2200      	movcc	r2, #0
 8014e2c:	18a3      	adds	r3, r4, r2
 8014e2e:	50a7      	str	r7, [r4, r2]
 8014e30:	b107      	cbz	r7, 8014e34 <rshift+0x68>
 8014e32:	3304      	adds	r3, #4
 8014e34:	1b1a      	subs	r2, r3, r4
 8014e36:	42a3      	cmp	r3, r4
 8014e38:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014e3c:	bf08      	it	eq
 8014e3e:	2300      	moveq	r3, #0
 8014e40:	6102      	str	r2, [r0, #16]
 8014e42:	bf08      	it	eq
 8014e44:	6143      	streq	r3, [r0, #20]
 8014e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e4a:	f8dc c000 	ldr.w	ip, [ip]
 8014e4e:	fa0c fc08 	lsl.w	ip, ip, r8
 8014e52:	ea4c 0707 	orr.w	r7, ip, r7
 8014e56:	f849 7b04 	str.w	r7, [r9], #4
 8014e5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014e5e:	40cf      	lsrs	r7, r1
 8014e60:	e7da      	b.n	8014e18 <rshift+0x4c>
 8014e62:	f851 cb04 	ldr.w	ip, [r1], #4
 8014e66:	f847 cf04 	str.w	ip, [r7, #4]!
 8014e6a:	e7c3      	b.n	8014df4 <rshift+0x28>
 8014e6c:	4623      	mov	r3, r4
 8014e6e:	e7e1      	b.n	8014e34 <rshift+0x68>

08014e70 <__hexdig_fun>:
 8014e70:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8014e74:	2b09      	cmp	r3, #9
 8014e76:	d802      	bhi.n	8014e7e <__hexdig_fun+0xe>
 8014e78:	3820      	subs	r0, #32
 8014e7a:	b2c0      	uxtb	r0, r0
 8014e7c:	4770      	bx	lr
 8014e7e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8014e82:	2b05      	cmp	r3, #5
 8014e84:	d801      	bhi.n	8014e8a <__hexdig_fun+0x1a>
 8014e86:	3847      	subs	r0, #71	@ 0x47
 8014e88:	e7f7      	b.n	8014e7a <__hexdig_fun+0xa>
 8014e8a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8014e8e:	2b05      	cmp	r3, #5
 8014e90:	d801      	bhi.n	8014e96 <__hexdig_fun+0x26>
 8014e92:	3827      	subs	r0, #39	@ 0x27
 8014e94:	e7f1      	b.n	8014e7a <__hexdig_fun+0xa>
 8014e96:	2000      	movs	r0, #0
 8014e98:	4770      	bx	lr
	...

08014e9c <__gethex>:
 8014e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ea0:	b085      	sub	sp, #20
 8014ea2:	468a      	mov	sl, r1
 8014ea4:	9302      	str	r3, [sp, #8]
 8014ea6:	680b      	ldr	r3, [r1, #0]
 8014ea8:	9001      	str	r0, [sp, #4]
 8014eaa:	4690      	mov	r8, r2
 8014eac:	1c9c      	adds	r4, r3, #2
 8014eae:	46a1      	mov	r9, r4
 8014eb0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8014eb4:	2830      	cmp	r0, #48	@ 0x30
 8014eb6:	d0fa      	beq.n	8014eae <__gethex+0x12>
 8014eb8:	eba9 0303 	sub.w	r3, r9, r3
 8014ebc:	f1a3 0b02 	sub.w	fp, r3, #2
 8014ec0:	f7ff ffd6 	bl	8014e70 <__hexdig_fun>
 8014ec4:	4605      	mov	r5, r0
 8014ec6:	2800      	cmp	r0, #0
 8014ec8:	d168      	bne.n	8014f9c <__gethex+0x100>
 8014eca:	49a0      	ldr	r1, [pc, #640]	@ (801514c <__gethex+0x2b0>)
 8014ecc:	2201      	movs	r2, #1
 8014ece:	4648      	mov	r0, r9
 8014ed0:	f7fe ff63 	bl	8013d9a <strncmp>
 8014ed4:	4607      	mov	r7, r0
 8014ed6:	2800      	cmp	r0, #0
 8014ed8:	d167      	bne.n	8014faa <__gethex+0x10e>
 8014eda:	f899 0001 	ldrb.w	r0, [r9, #1]
 8014ede:	4626      	mov	r6, r4
 8014ee0:	f7ff ffc6 	bl	8014e70 <__hexdig_fun>
 8014ee4:	2800      	cmp	r0, #0
 8014ee6:	d062      	beq.n	8014fae <__gethex+0x112>
 8014ee8:	4623      	mov	r3, r4
 8014eea:	7818      	ldrb	r0, [r3, #0]
 8014eec:	2830      	cmp	r0, #48	@ 0x30
 8014eee:	4699      	mov	r9, r3
 8014ef0:	f103 0301 	add.w	r3, r3, #1
 8014ef4:	d0f9      	beq.n	8014eea <__gethex+0x4e>
 8014ef6:	f7ff ffbb 	bl	8014e70 <__hexdig_fun>
 8014efa:	fab0 f580 	clz	r5, r0
 8014efe:	096d      	lsrs	r5, r5, #5
 8014f00:	f04f 0b01 	mov.w	fp, #1
 8014f04:	464a      	mov	r2, r9
 8014f06:	4616      	mov	r6, r2
 8014f08:	3201      	adds	r2, #1
 8014f0a:	7830      	ldrb	r0, [r6, #0]
 8014f0c:	f7ff ffb0 	bl	8014e70 <__hexdig_fun>
 8014f10:	2800      	cmp	r0, #0
 8014f12:	d1f8      	bne.n	8014f06 <__gethex+0x6a>
 8014f14:	498d      	ldr	r1, [pc, #564]	@ (801514c <__gethex+0x2b0>)
 8014f16:	2201      	movs	r2, #1
 8014f18:	4630      	mov	r0, r6
 8014f1a:	f7fe ff3e 	bl	8013d9a <strncmp>
 8014f1e:	2800      	cmp	r0, #0
 8014f20:	d13f      	bne.n	8014fa2 <__gethex+0x106>
 8014f22:	b944      	cbnz	r4, 8014f36 <__gethex+0x9a>
 8014f24:	1c74      	adds	r4, r6, #1
 8014f26:	4622      	mov	r2, r4
 8014f28:	4616      	mov	r6, r2
 8014f2a:	3201      	adds	r2, #1
 8014f2c:	7830      	ldrb	r0, [r6, #0]
 8014f2e:	f7ff ff9f 	bl	8014e70 <__hexdig_fun>
 8014f32:	2800      	cmp	r0, #0
 8014f34:	d1f8      	bne.n	8014f28 <__gethex+0x8c>
 8014f36:	1ba4      	subs	r4, r4, r6
 8014f38:	00a7      	lsls	r7, r4, #2
 8014f3a:	7833      	ldrb	r3, [r6, #0]
 8014f3c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8014f40:	2b50      	cmp	r3, #80	@ 0x50
 8014f42:	d13e      	bne.n	8014fc2 <__gethex+0x126>
 8014f44:	7873      	ldrb	r3, [r6, #1]
 8014f46:	2b2b      	cmp	r3, #43	@ 0x2b
 8014f48:	d033      	beq.n	8014fb2 <__gethex+0x116>
 8014f4a:	2b2d      	cmp	r3, #45	@ 0x2d
 8014f4c:	d034      	beq.n	8014fb8 <__gethex+0x11c>
 8014f4e:	1c71      	adds	r1, r6, #1
 8014f50:	2400      	movs	r4, #0
 8014f52:	7808      	ldrb	r0, [r1, #0]
 8014f54:	f7ff ff8c 	bl	8014e70 <__hexdig_fun>
 8014f58:	1e43      	subs	r3, r0, #1
 8014f5a:	b2db      	uxtb	r3, r3
 8014f5c:	2b18      	cmp	r3, #24
 8014f5e:	d830      	bhi.n	8014fc2 <__gethex+0x126>
 8014f60:	f1a0 0210 	sub.w	r2, r0, #16
 8014f64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014f68:	f7ff ff82 	bl	8014e70 <__hexdig_fun>
 8014f6c:	f100 3cff 	add.w	ip, r0, #4294967295
 8014f70:	fa5f fc8c 	uxtb.w	ip, ip
 8014f74:	f1bc 0f18 	cmp.w	ip, #24
 8014f78:	f04f 030a 	mov.w	r3, #10
 8014f7c:	d91e      	bls.n	8014fbc <__gethex+0x120>
 8014f7e:	b104      	cbz	r4, 8014f82 <__gethex+0xe6>
 8014f80:	4252      	negs	r2, r2
 8014f82:	4417      	add	r7, r2
 8014f84:	f8ca 1000 	str.w	r1, [sl]
 8014f88:	b1ed      	cbz	r5, 8014fc6 <__gethex+0x12a>
 8014f8a:	f1bb 0f00 	cmp.w	fp, #0
 8014f8e:	bf0c      	ite	eq
 8014f90:	2506      	moveq	r5, #6
 8014f92:	2500      	movne	r5, #0
 8014f94:	4628      	mov	r0, r5
 8014f96:	b005      	add	sp, #20
 8014f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f9c:	2500      	movs	r5, #0
 8014f9e:	462c      	mov	r4, r5
 8014fa0:	e7b0      	b.n	8014f04 <__gethex+0x68>
 8014fa2:	2c00      	cmp	r4, #0
 8014fa4:	d1c7      	bne.n	8014f36 <__gethex+0x9a>
 8014fa6:	4627      	mov	r7, r4
 8014fa8:	e7c7      	b.n	8014f3a <__gethex+0x9e>
 8014faa:	464e      	mov	r6, r9
 8014fac:	462f      	mov	r7, r5
 8014fae:	2501      	movs	r5, #1
 8014fb0:	e7c3      	b.n	8014f3a <__gethex+0x9e>
 8014fb2:	2400      	movs	r4, #0
 8014fb4:	1cb1      	adds	r1, r6, #2
 8014fb6:	e7cc      	b.n	8014f52 <__gethex+0xb6>
 8014fb8:	2401      	movs	r4, #1
 8014fba:	e7fb      	b.n	8014fb4 <__gethex+0x118>
 8014fbc:	fb03 0002 	mla	r0, r3, r2, r0
 8014fc0:	e7ce      	b.n	8014f60 <__gethex+0xc4>
 8014fc2:	4631      	mov	r1, r6
 8014fc4:	e7de      	b.n	8014f84 <__gethex+0xe8>
 8014fc6:	eba6 0309 	sub.w	r3, r6, r9
 8014fca:	3b01      	subs	r3, #1
 8014fcc:	4629      	mov	r1, r5
 8014fce:	2b07      	cmp	r3, #7
 8014fd0:	dc0a      	bgt.n	8014fe8 <__gethex+0x14c>
 8014fd2:	9801      	ldr	r0, [sp, #4]
 8014fd4:	f000 fa7a 	bl	80154cc <_Balloc>
 8014fd8:	4604      	mov	r4, r0
 8014fda:	b940      	cbnz	r0, 8014fee <__gethex+0x152>
 8014fdc:	4b5c      	ldr	r3, [pc, #368]	@ (8015150 <__gethex+0x2b4>)
 8014fde:	4602      	mov	r2, r0
 8014fe0:	21e4      	movs	r1, #228	@ 0xe4
 8014fe2:	485c      	ldr	r0, [pc, #368]	@ (8015154 <__gethex+0x2b8>)
 8014fe4:	f7fc fb3c 	bl	8011660 <__assert_func>
 8014fe8:	3101      	adds	r1, #1
 8014fea:	105b      	asrs	r3, r3, #1
 8014fec:	e7ef      	b.n	8014fce <__gethex+0x132>
 8014fee:	f100 0a14 	add.w	sl, r0, #20
 8014ff2:	2300      	movs	r3, #0
 8014ff4:	4655      	mov	r5, sl
 8014ff6:	469b      	mov	fp, r3
 8014ff8:	45b1      	cmp	r9, r6
 8014ffa:	d337      	bcc.n	801506c <__gethex+0x1d0>
 8014ffc:	f845 bb04 	str.w	fp, [r5], #4
 8015000:	eba5 050a 	sub.w	r5, r5, sl
 8015004:	10ad      	asrs	r5, r5, #2
 8015006:	6125      	str	r5, [r4, #16]
 8015008:	4658      	mov	r0, fp
 801500a:	f000 fb51 	bl	80156b0 <__hi0bits>
 801500e:	016d      	lsls	r5, r5, #5
 8015010:	f8d8 6000 	ldr.w	r6, [r8]
 8015014:	1a2d      	subs	r5, r5, r0
 8015016:	42b5      	cmp	r5, r6
 8015018:	dd54      	ble.n	80150c4 <__gethex+0x228>
 801501a:	1bad      	subs	r5, r5, r6
 801501c:	4629      	mov	r1, r5
 801501e:	4620      	mov	r0, r4
 8015020:	f000 fedd 	bl	8015dde <__any_on>
 8015024:	4681      	mov	r9, r0
 8015026:	b178      	cbz	r0, 8015048 <__gethex+0x1ac>
 8015028:	1e6b      	subs	r3, r5, #1
 801502a:	1159      	asrs	r1, r3, #5
 801502c:	f003 021f 	and.w	r2, r3, #31
 8015030:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8015034:	f04f 0901 	mov.w	r9, #1
 8015038:	fa09 f202 	lsl.w	r2, r9, r2
 801503c:	420a      	tst	r2, r1
 801503e:	d003      	beq.n	8015048 <__gethex+0x1ac>
 8015040:	454b      	cmp	r3, r9
 8015042:	dc36      	bgt.n	80150b2 <__gethex+0x216>
 8015044:	f04f 0902 	mov.w	r9, #2
 8015048:	4629      	mov	r1, r5
 801504a:	4620      	mov	r0, r4
 801504c:	f7ff febe 	bl	8014dcc <rshift>
 8015050:	442f      	add	r7, r5
 8015052:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015056:	42bb      	cmp	r3, r7
 8015058:	da42      	bge.n	80150e0 <__gethex+0x244>
 801505a:	9801      	ldr	r0, [sp, #4]
 801505c:	4621      	mov	r1, r4
 801505e:	f000 fa75 	bl	801554c <_Bfree>
 8015062:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015064:	2300      	movs	r3, #0
 8015066:	6013      	str	r3, [r2, #0]
 8015068:	25a3      	movs	r5, #163	@ 0xa3
 801506a:	e793      	b.n	8014f94 <__gethex+0xf8>
 801506c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8015070:	2a2e      	cmp	r2, #46	@ 0x2e
 8015072:	d012      	beq.n	801509a <__gethex+0x1fe>
 8015074:	2b20      	cmp	r3, #32
 8015076:	d104      	bne.n	8015082 <__gethex+0x1e6>
 8015078:	f845 bb04 	str.w	fp, [r5], #4
 801507c:	f04f 0b00 	mov.w	fp, #0
 8015080:	465b      	mov	r3, fp
 8015082:	7830      	ldrb	r0, [r6, #0]
 8015084:	9303      	str	r3, [sp, #12]
 8015086:	f7ff fef3 	bl	8014e70 <__hexdig_fun>
 801508a:	9b03      	ldr	r3, [sp, #12]
 801508c:	f000 000f 	and.w	r0, r0, #15
 8015090:	4098      	lsls	r0, r3
 8015092:	ea4b 0b00 	orr.w	fp, fp, r0
 8015096:	3304      	adds	r3, #4
 8015098:	e7ae      	b.n	8014ff8 <__gethex+0x15c>
 801509a:	45b1      	cmp	r9, r6
 801509c:	d8ea      	bhi.n	8015074 <__gethex+0x1d8>
 801509e:	492b      	ldr	r1, [pc, #172]	@ (801514c <__gethex+0x2b0>)
 80150a0:	9303      	str	r3, [sp, #12]
 80150a2:	2201      	movs	r2, #1
 80150a4:	4630      	mov	r0, r6
 80150a6:	f7fe fe78 	bl	8013d9a <strncmp>
 80150aa:	9b03      	ldr	r3, [sp, #12]
 80150ac:	2800      	cmp	r0, #0
 80150ae:	d1e1      	bne.n	8015074 <__gethex+0x1d8>
 80150b0:	e7a2      	b.n	8014ff8 <__gethex+0x15c>
 80150b2:	1ea9      	subs	r1, r5, #2
 80150b4:	4620      	mov	r0, r4
 80150b6:	f000 fe92 	bl	8015dde <__any_on>
 80150ba:	2800      	cmp	r0, #0
 80150bc:	d0c2      	beq.n	8015044 <__gethex+0x1a8>
 80150be:	f04f 0903 	mov.w	r9, #3
 80150c2:	e7c1      	b.n	8015048 <__gethex+0x1ac>
 80150c4:	da09      	bge.n	80150da <__gethex+0x23e>
 80150c6:	1b75      	subs	r5, r6, r5
 80150c8:	4621      	mov	r1, r4
 80150ca:	9801      	ldr	r0, [sp, #4]
 80150cc:	462a      	mov	r2, r5
 80150ce:	f000 fc4d 	bl	801596c <__lshift>
 80150d2:	1b7f      	subs	r7, r7, r5
 80150d4:	4604      	mov	r4, r0
 80150d6:	f100 0a14 	add.w	sl, r0, #20
 80150da:	f04f 0900 	mov.w	r9, #0
 80150de:	e7b8      	b.n	8015052 <__gethex+0x1b6>
 80150e0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80150e4:	42bd      	cmp	r5, r7
 80150e6:	dd6f      	ble.n	80151c8 <__gethex+0x32c>
 80150e8:	1bed      	subs	r5, r5, r7
 80150ea:	42ae      	cmp	r6, r5
 80150ec:	dc34      	bgt.n	8015158 <__gethex+0x2bc>
 80150ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80150f2:	2b02      	cmp	r3, #2
 80150f4:	d022      	beq.n	801513c <__gethex+0x2a0>
 80150f6:	2b03      	cmp	r3, #3
 80150f8:	d024      	beq.n	8015144 <__gethex+0x2a8>
 80150fa:	2b01      	cmp	r3, #1
 80150fc:	d115      	bne.n	801512a <__gethex+0x28e>
 80150fe:	42ae      	cmp	r6, r5
 8015100:	d113      	bne.n	801512a <__gethex+0x28e>
 8015102:	2e01      	cmp	r6, #1
 8015104:	d10b      	bne.n	801511e <__gethex+0x282>
 8015106:	9a02      	ldr	r2, [sp, #8]
 8015108:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801510c:	6013      	str	r3, [r2, #0]
 801510e:	2301      	movs	r3, #1
 8015110:	6123      	str	r3, [r4, #16]
 8015112:	f8ca 3000 	str.w	r3, [sl]
 8015116:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015118:	2562      	movs	r5, #98	@ 0x62
 801511a:	601c      	str	r4, [r3, #0]
 801511c:	e73a      	b.n	8014f94 <__gethex+0xf8>
 801511e:	1e71      	subs	r1, r6, #1
 8015120:	4620      	mov	r0, r4
 8015122:	f000 fe5c 	bl	8015dde <__any_on>
 8015126:	2800      	cmp	r0, #0
 8015128:	d1ed      	bne.n	8015106 <__gethex+0x26a>
 801512a:	9801      	ldr	r0, [sp, #4]
 801512c:	4621      	mov	r1, r4
 801512e:	f000 fa0d 	bl	801554c <_Bfree>
 8015132:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015134:	2300      	movs	r3, #0
 8015136:	6013      	str	r3, [r2, #0]
 8015138:	2550      	movs	r5, #80	@ 0x50
 801513a:	e72b      	b.n	8014f94 <__gethex+0xf8>
 801513c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801513e:	2b00      	cmp	r3, #0
 8015140:	d1f3      	bne.n	801512a <__gethex+0x28e>
 8015142:	e7e0      	b.n	8015106 <__gethex+0x26a>
 8015144:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015146:	2b00      	cmp	r3, #0
 8015148:	d1dd      	bne.n	8015106 <__gethex+0x26a>
 801514a:	e7ee      	b.n	801512a <__gethex+0x28e>
 801514c:	08018364 	.word	0x08018364
 8015150:	0801847d 	.word	0x0801847d
 8015154:	0801848e 	.word	0x0801848e
 8015158:	1e6f      	subs	r7, r5, #1
 801515a:	f1b9 0f00 	cmp.w	r9, #0
 801515e:	d130      	bne.n	80151c2 <__gethex+0x326>
 8015160:	b127      	cbz	r7, 801516c <__gethex+0x2d0>
 8015162:	4639      	mov	r1, r7
 8015164:	4620      	mov	r0, r4
 8015166:	f000 fe3a 	bl	8015dde <__any_on>
 801516a:	4681      	mov	r9, r0
 801516c:	117a      	asrs	r2, r7, #5
 801516e:	2301      	movs	r3, #1
 8015170:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8015174:	f007 071f 	and.w	r7, r7, #31
 8015178:	40bb      	lsls	r3, r7
 801517a:	4213      	tst	r3, r2
 801517c:	4629      	mov	r1, r5
 801517e:	4620      	mov	r0, r4
 8015180:	bf18      	it	ne
 8015182:	f049 0902 	orrne.w	r9, r9, #2
 8015186:	f7ff fe21 	bl	8014dcc <rshift>
 801518a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801518e:	1b76      	subs	r6, r6, r5
 8015190:	2502      	movs	r5, #2
 8015192:	f1b9 0f00 	cmp.w	r9, #0
 8015196:	d047      	beq.n	8015228 <__gethex+0x38c>
 8015198:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801519c:	2b02      	cmp	r3, #2
 801519e:	d015      	beq.n	80151cc <__gethex+0x330>
 80151a0:	2b03      	cmp	r3, #3
 80151a2:	d017      	beq.n	80151d4 <__gethex+0x338>
 80151a4:	2b01      	cmp	r3, #1
 80151a6:	d109      	bne.n	80151bc <__gethex+0x320>
 80151a8:	f019 0f02 	tst.w	r9, #2
 80151ac:	d006      	beq.n	80151bc <__gethex+0x320>
 80151ae:	f8da 3000 	ldr.w	r3, [sl]
 80151b2:	ea49 0903 	orr.w	r9, r9, r3
 80151b6:	f019 0f01 	tst.w	r9, #1
 80151ba:	d10e      	bne.n	80151da <__gethex+0x33e>
 80151bc:	f045 0510 	orr.w	r5, r5, #16
 80151c0:	e032      	b.n	8015228 <__gethex+0x38c>
 80151c2:	f04f 0901 	mov.w	r9, #1
 80151c6:	e7d1      	b.n	801516c <__gethex+0x2d0>
 80151c8:	2501      	movs	r5, #1
 80151ca:	e7e2      	b.n	8015192 <__gethex+0x2f6>
 80151cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80151ce:	f1c3 0301 	rsb	r3, r3, #1
 80151d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80151d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d0f0      	beq.n	80151bc <__gethex+0x320>
 80151da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80151de:	f104 0314 	add.w	r3, r4, #20
 80151e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80151e6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80151ea:	f04f 0c00 	mov.w	ip, #0
 80151ee:	4618      	mov	r0, r3
 80151f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80151f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80151f8:	d01b      	beq.n	8015232 <__gethex+0x396>
 80151fa:	3201      	adds	r2, #1
 80151fc:	6002      	str	r2, [r0, #0]
 80151fe:	2d02      	cmp	r5, #2
 8015200:	f104 0314 	add.w	r3, r4, #20
 8015204:	d13c      	bne.n	8015280 <__gethex+0x3e4>
 8015206:	f8d8 2000 	ldr.w	r2, [r8]
 801520a:	3a01      	subs	r2, #1
 801520c:	42b2      	cmp	r2, r6
 801520e:	d109      	bne.n	8015224 <__gethex+0x388>
 8015210:	1171      	asrs	r1, r6, #5
 8015212:	2201      	movs	r2, #1
 8015214:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015218:	f006 061f 	and.w	r6, r6, #31
 801521c:	fa02 f606 	lsl.w	r6, r2, r6
 8015220:	421e      	tst	r6, r3
 8015222:	d13a      	bne.n	801529a <__gethex+0x3fe>
 8015224:	f045 0520 	orr.w	r5, r5, #32
 8015228:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801522a:	601c      	str	r4, [r3, #0]
 801522c:	9b02      	ldr	r3, [sp, #8]
 801522e:	601f      	str	r7, [r3, #0]
 8015230:	e6b0      	b.n	8014f94 <__gethex+0xf8>
 8015232:	4299      	cmp	r1, r3
 8015234:	f843 cc04 	str.w	ip, [r3, #-4]
 8015238:	d8d9      	bhi.n	80151ee <__gethex+0x352>
 801523a:	68a3      	ldr	r3, [r4, #8]
 801523c:	459b      	cmp	fp, r3
 801523e:	db17      	blt.n	8015270 <__gethex+0x3d4>
 8015240:	6861      	ldr	r1, [r4, #4]
 8015242:	9801      	ldr	r0, [sp, #4]
 8015244:	3101      	adds	r1, #1
 8015246:	f000 f941 	bl	80154cc <_Balloc>
 801524a:	4681      	mov	r9, r0
 801524c:	b918      	cbnz	r0, 8015256 <__gethex+0x3ba>
 801524e:	4b1a      	ldr	r3, [pc, #104]	@ (80152b8 <__gethex+0x41c>)
 8015250:	4602      	mov	r2, r0
 8015252:	2184      	movs	r1, #132	@ 0x84
 8015254:	e6c5      	b.n	8014fe2 <__gethex+0x146>
 8015256:	6922      	ldr	r2, [r4, #16]
 8015258:	3202      	adds	r2, #2
 801525a:	f104 010c 	add.w	r1, r4, #12
 801525e:	0092      	lsls	r2, r2, #2
 8015260:	300c      	adds	r0, #12
 8015262:	f7fe feeb 	bl	801403c <memcpy>
 8015266:	4621      	mov	r1, r4
 8015268:	9801      	ldr	r0, [sp, #4]
 801526a:	f000 f96f 	bl	801554c <_Bfree>
 801526e:	464c      	mov	r4, r9
 8015270:	6923      	ldr	r3, [r4, #16]
 8015272:	1c5a      	adds	r2, r3, #1
 8015274:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015278:	6122      	str	r2, [r4, #16]
 801527a:	2201      	movs	r2, #1
 801527c:	615a      	str	r2, [r3, #20]
 801527e:	e7be      	b.n	80151fe <__gethex+0x362>
 8015280:	6922      	ldr	r2, [r4, #16]
 8015282:	455a      	cmp	r2, fp
 8015284:	dd0b      	ble.n	801529e <__gethex+0x402>
 8015286:	2101      	movs	r1, #1
 8015288:	4620      	mov	r0, r4
 801528a:	f7ff fd9f 	bl	8014dcc <rshift>
 801528e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015292:	3701      	adds	r7, #1
 8015294:	42bb      	cmp	r3, r7
 8015296:	f6ff aee0 	blt.w	801505a <__gethex+0x1be>
 801529a:	2501      	movs	r5, #1
 801529c:	e7c2      	b.n	8015224 <__gethex+0x388>
 801529e:	f016 061f 	ands.w	r6, r6, #31
 80152a2:	d0fa      	beq.n	801529a <__gethex+0x3fe>
 80152a4:	4453      	add	r3, sl
 80152a6:	f1c6 0620 	rsb	r6, r6, #32
 80152aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80152ae:	f000 f9ff 	bl	80156b0 <__hi0bits>
 80152b2:	42b0      	cmp	r0, r6
 80152b4:	dbe7      	blt.n	8015286 <__gethex+0x3ea>
 80152b6:	e7f0      	b.n	801529a <__gethex+0x3fe>
 80152b8:	0801847d 	.word	0x0801847d

080152bc <L_shift>:
 80152bc:	f1c2 0208 	rsb	r2, r2, #8
 80152c0:	0092      	lsls	r2, r2, #2
 80152c2:	b570      	push	{r4, r5, r6, lr}
 80152c4:	f1c2 0620 	rsb	r6, r2, #32
 80152c8:	6843      	ldr	r3, [r0, #4]
 80152ca:	6804      	ldr	r4, [r0, #0]
 80152cc:	fa03 f506 	lsl.w	r5, r3, r6
 80152d0:	432c      	orrs	r4, r5
 80152d2:	40d3      	lsrs	r3, r2
 80152d4:	6004      	str	r4, [r0, #0]
 80152d6:	f840 3f04 	str.w	r3, [r0, #4]!
 80152da:	4288      	cmp	r0, r1
 80152dc:	d3f4      	bcc.n	80152c8 <L_shift+0xc>
 80152de:	bd70      	pop	{r4, r5, r6, pc}

080152e0 <__match>:
 80152e0:	b530      	push	{r4, r5, lr}
 80152e2:	6803      	ldr	r3, [r0, #0]
 80152e4:	3301      	adds	r3, #1
 80152e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80152ea:	b914      	cbnz	r4, 80152f2 <__match+0x12>
 80152ec:	6003      	str	r3, [r0, #0]
 80152ee:	2001      	movs	r0, #1
 80152f0:	bd30      	pop	{r4, r5, pc}
 80152f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80152f6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80152fa:	2d19      	cmp	r5, #25
 80152fc:	bf98      	it	ls
 80152fe:	3220      	addls	r2, #32
 8015300:	42a2      	cmp	r2, r4
 8015302:	d0f0      	beq.n	80152e6 <__match+0x6>
 8015304:	2000      	movs	r0, #0
 8015306:	e7f3      	b.n	80152f0 <__match+0x10>

08015308 <__hexnan>:
 8015308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801530c:	680b      	ldr	r3, [r1, #0]
 801530e:	6801      	ldr	r1, [r0, #0]
 8015310:	115e      	asrs	r6, r3, #5
 8015312:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015316:	f013 031f 	ands.w	r3, r3, #31
 801531a:	b087      	sub	sp, #28
 801531c:	bf18      	it	ne
 801531e:	3604      	addne	r6, #4
 8015320:	2500      	movs	r5, #0
 8015322:	1f37      	subs	r7, r6, #4
 8015324:	4682      	mov	sl, r0
 8015326:	4690      	mov	r8, r2
 8015328:	9301      	str	r3, [sp, #4]
 801532a:	f846 5c04 	str.w	r5, [r6, #-4]
 801532e:	46b9      	mov	r9, r7
 8015330:	463c      	mov	r4, r7
 8015332:	9502      	str	r5, [sp, #8]
 8015334:	46ab      	mov	fp, r5
 8015336:	784a      	ldrb	r2, [r1, #1]
 8015338:	1c4b      	adds	r3, r1, #1
 801533a:	9303      	str	r3, [sp, #12]
 801533c:	b342      	cbz	r2, 8015390 <__hexnan+0x88>
 801533e:	4610      	mov	r0, r2
 8015340:	9105      	str	r1, [sp, #20]
 8015342:	9204      	str	r2, [sp, #16]
 8015344:	f7ff fd94 	bl	8014e70 <__hexdig_fun>
 8015348:	2800      	cmp	r0, #0
 801534a:	d151      	bne.n	80153f0 <__hexnan+0xe8>
 801534c:	9a04      	ldr	r2, [sp, #16]
 801534e:	9905      	ldr	r1, [sp, #20]
 8015350:	2a20      	cmp	r2, #32
 8015352:	d818      	bhi.n	8015386 <__hexnan+0x7e>
 8015354:	9b02      	ldr	r3, [sp, #8]
 8015356:	459b      	cmp	fp, r3
 8015358:	dd13      	ble.n	8015382 <__hexnan+0x7a>
 801535a:	454c      	cmp	r4, r9
 801535c:	d206      	bcs.n	801536c <__hexnan+0x64>
 801535e:	2d07      	cmp	r5, #7
 8015360:	dc04      	bgt.n	801536c <__hexnan+0x64>
 8015362:	462a      	mov	r2, r5
 8015364:	4649      	mov	r1, r9
 8015366:	4620      	mov	r0, r4
 8015368:	f7ff ffa8 	bl	80152bc <L_shift>
 801536c:	4544      	cmp	r4, r8
 801536e:	d952      	bls.n	8015416 <__hexnan+0x10e>
 8015370:	2300      	movs	r3, #0
 8015372:	f1a4 0904 	sub.w	r9, r4, #4
 8015376:	f844 3c04 	str.w	r3, [r4, #-4]
 801537a:	f8cd b008 	str.w	fp, [sp, #8]
 801537e:	464c      	mov	r4, r9
 8015380:	461d      	mov	r5, r3
 8015382:	9903      	ldr	r1, [sp, #12]
 8015384:	e7d7      	b.n	8015336 <__hexnan+0x2e>
 8015386:	2a29      	cmp	r2, #41	@ 0x29
 8015388:	d157      	bne.n	801543a <__hexnan+0x132>
 801538a:	3102      	adds	r1, #2
 801538c:	f8ca 1000 	str.w	r1, [sl]
 8015390:	f1bb 0f00 	cmp.w	fp, #0
 8015394:	d051      	beq.n	801543a <__hexnan+0x132>
 8015396:	454c      	cmp	r4, r9
 8015398:	d206      	bcs.n	80153a8 <__hexnan+0xa0>
 801539a:	2d07      	cmp	r5, #7
 801539c:	dc04      	bgt.n	80153a8 <__hexnan+0xa0>
 801539e:	462a      	mov	r2, r5
 80153a0:	4649      	mov	r1, r9
 80153a2:	4620      	mov	r0, r4
 80153a4:	f7ff ff8a 	bl	80152bc <L_shift>
 80153a8:	4544      	cmp	r4, r8
 80153aa:	d936      	bls.n	801541a <__hexnan+0x112>
 80153ac:	f1a8 0204 	sub.w	r2, r8, #4
 80153b0:	4623      	mov	r3, r4
 80153b2:	f853 1b04 	ldr.w	r1, [r3], #4
 80153b6:	f842 1f04 	str.w	r1, [r2, #4]!
 80153ba:	429f      	cmp	r7, r3
 80153bc:	d2f9      	bcs.n	80153b2 <__hexnan+0xaa>
 80153be:	1b3b      	subs	r3, r7, r4
 80153c0:	f023 0303 	bic.w	r3, r3, #3
 80153c4:	3304      	adds	r3, #4
 80153c6:	3401      	adds	r4, #1
 80153c8:	3e03      	subs	r6, #3
 80153ca:	42b4      	cmp	r4, r6
 80153cc:	bf88      	it	hi
 80153ce:	2304      	movhi	r3, #4
 80153d0:	4443      	add	r3, r8
 80153d2:	2200      	movs	r2, #0
 80153d4:	f843 2b04 	str.w	r2, [r3], #4
 80153d8:	429f      	cmp	r7, r3
 80153da:	d2fb      	bcs.n	80153d4 <__hexnan+0xcc>
 80153dc:	683b      	ldr	r3, [r7, #0]
 80153de:	b91b      	cbnz	r3, 80153e8 <__hexnan+0xe0>
 80153e0:	4547      	cmp	r7, r8
 80153e2:	d128      	bne.n	8015436 <__hexnan+0x12e>
 80153e4:	2301      	movs	r3, #1
 80153e6:	603b      	str	r3, [r7, #0]
 80153e8:	2005      	movs	r0, #5
 80153ea:	b007      	add	sp, #28
 80153ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153f0:	3501      	adds	r5, #1
 80153f2:	2d08      	cmp	r5, #8
 80153f4:	f10b 0b01 	add.w	fp, fp, #1
 80153f8:	dd06      	ble.n	8015408 <__hexnan+0x100>
 80153fa:	4544      	cmp	r4, r8
 80153fc:	d9c1      	bls.n	8015382 <__hexnan+0x7a>
 80153fe:	2300      	movs	r3, #0
 8015400:	f844 3c04 	str.w	r3, [r4, #-4]
 8015404:	2501      	movs	r5, #1
 8015406:	3c04      	subs	r4, #4
 8015408:	6822      	ldr	r2, [r4, #0]
 801540a:	f000 000f 	and.w	r0, r0, #15
 801540e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015412:	6020      	str	r0, [r4, #0]
 8015414:	e7b5      	b.n	8015382 <__hexnan+0x7a>
 8015416:	2508      	movs	r5, #8
 8015418:	e7b3      	b.n	8015382 <__hexnan+0x7a>
 801541a:	9b01      	ldr	r3, [sp, #4]
 801541c:	2b00      	cmp	r3, #0
 801541e:	d0dd      	beq.n	80153dc <__hexnan+0xd4>
 8015420:	f1c3 0320 	rsb	r3, r3, #32
 8015424:	f04f 32ff 	mov.w	r2, #4294967295
 8015428:	40da      	lsrs	r2, r3
 801542a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801542e:	4013      	ands	r3, r2
 8015430:	f846 3c04 	str.w	r3, [r6, #-4]
 8015434:	e7d2      	b.n	80153dc <__hexnan+0xd4>
 8015436:	3f04      	subs	r7, #4
 8015438:	e7d0      	b.n	80153dc <__hexnan+0xd4>
 801543a:	2004      	movs	r0, #4
 801543c:	e7d5      	b.n	80153ea <__hexnan+0xe2>
	...

08015440 <_mallinfo_r>:
 8015440:	b570      	push	{r4, r5, r6, lr}
 8015442:	4c16      	ldr	r4, [pc, #88]	@ (801549c <_mallinfo_r+0x5c>)
 8015444:	4605      	mov	r5, r0
 8015446:	4608      	mov	r0, r1
 8015448:	460e      	mov	r6, r1
 801544a:	f7f0 ff37 	bl	80062bc <__malloc_lock>
 801544e:	6823      	ldr	r3, [r4, #0]
 8015450:	b14b      	cbz	r3, 8015466 <_mallinfo_r+0x26>
 8015452:	2100      	movs	r1, #0
 8015454:	4630      	mov	r0, r6
 8015456:	f7f0 fead 	bl	80061b4 <_sbrk_r>
 801545a:	1c42      	adds	r2, r0, #1
 801545c:	bf18      	it	ne
 801545e:	6822      	ldrne	r2, [r4, #0]
 8015460:	4603      	mov	r3, r0
 8015462:	bf18      	it	ne
 8015464:	1a83      	subne	r3, r0, r2
 8015466:	4a0e      	ldr	r2, [pc, #56]	@ (80154a0 <_mallinfo_r+0x60>)
 8015468:	6811      	ldr	r1, [r2, #0]
 801546a:	2200      	movs	r2, #0
 801546c:	b991      	cbnz	r1, 8015494 <_mallinfo_r+0x54>
 801546e:	4c0d      	ldr	r4, [pc, #52]	@ (80154a4 <_mallinfo_r+0x64>)
 8015470:	4630      	mov	r0, r6
 8015472:	6023      	str	r3, [r4, #0]
 8015474:	1a9b      	subs	r3, r3, r2
 8015476:	6222      	str	r2, [r4, #32]
 8015478:	61e3      	str	r3, [r4, #28]
 801547a:	f7f0 ff59 	bl	8006330 <__malloc_unlock>
 801547e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015480:	462e      	mov	r6, r5
 8015482:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015484:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015486:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015488:	e894 0003 	ldmia.w	r4, {r0, r1}
 801548c:	e886 0003 	stmia.w	r6, {r0, r1}
 8015490:	4628      	mov	r0, r5
 8015492:	bd70      	pop	{r4, r5, r6, pc}
 8015494:	6808      	ldr	r0, [r1, #0]
 8015496:	6849      	ldr	r1, [r1, #4]
 8015498:	4402      	add	r2, r0
 801549a:	e7e7      	b.n	801546c <_mallinfo_r+0x2c>
 801549c:	20000648 	.word	0x20000648
 80154a0:	2000064c 	.word	0x2000064c
 80154a4:	20000798 	.word	0x20000798

080154a8 <__ascii_mbtowc>:
 80154a8:	b082      	sub	sp, #8
 80154aa:	b901      	cbnz	r1, 80154ae <__ascii_mbtowc+0x6>
 80154ac:	a901      	add	r1, sp, #4
 80154ae:	b142      	cbz	r2, 80154c2 <__ascii_mbtowc+0x1a>
 80154b0:	b14b      	cbz	r3, 80154c6 <__ascii_mbtowc+0x1e>
 80154b2:	7813      	ldrb	r3, [r2, #0]
 80154b4:	600b      	str	r3, [r1, #0]
 80154b6:	7812      	ldrb	r2, [r2, #0]
 80154b8:	1e10      	subs	r0, r2, #0
 80154ba:	bf18      	it	ne
 80154bc:	2001      	movne	r0, #1
 80154be:	b002      	add	sp, #8
 80154c0:	4770      	bx	lr
 80154c2:	4610      	mov	r0, r2
 80154c4:	e7fb      	b.n	80154be <__ascii_mbtowc+0x16>
 80154c6:	f06f 0001 	mvn.w	r0, #1
 80154ca:	e7f8      	b.n	80154be <__ascii_mbtowc+0x16>

080154cc <_Balloc>:
 80154cc:	b570      	push	{r4, r5, r6, lr}
 80154ce:	69c6      	ldr	r6, [r0, #28]
 80154d0:	4604      	mov	r4, r0
 80154d2:	460d      	mov	r5, r1
 80154d4:	b976      	cbnz	r6, 80154f4 <_Balloc+0x28>
 80154d6:	2010      	movs	r0, #16
 80154d8:	f7fc f94c 	bl	8011774 <malloc>
 80154dc:	4602      	mov	r2, r0
 80154de:	61e0      	str	r0, [r4, #28]
 80154e0:	b920      	cbnz	r0, 80154ec <_Balloc+0x20>
 80154e2:	4b18      	ldr	r3, [pc, #96]	@ (8015544 <_Balloc+0x78>)
 80154e4:	4818      	ldr	r0, [pc, #96]	@ (8015548 <_Balloc+0x7c>)
 80154e6:	216b      	movs	r1, #107	@ 0x6b
 80154e8:	f7fc f8ba 	bl	8011660 <__assert_func>
 80154ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80154f0:	6006      	str	r6, [r0, #0]
 80154f2:	60c6      	str	r6, [r0, #12]
 80154f4:	69e6      	ldr	r6, [r4, #28]
 80154f6:	68f3      	ldr	r3, [r6, #12]
 80154f8:	b183      	cbz	r3, 801551c <_Balloc+0x50>
 80154fa:	69e3      	ldr	r3, [r4, #28]
 80154fc:	68db      	ldr	r3, [r3, #12]
 80154fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015502:	b9b8      	cbnz	r0, 8015534 <_Balloc+0x68>
 8015504:	2101      	movs	r1, #1
 8015506:	fa01 f605 	lsl.w	r6, r1, r5
 801550a:	1d72      	adds	r2, r6, #5
 801550c:	0092      	lsls	r2, r2, #2
 801550e:	4620      	mov	r0, r4
 8015510:	f7fc f8d4 	bl	80116bc <_calloc_r>
 8015514:	b160      	cbz	r0, 8015530 <_Balloc+0x64>
 8015516:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801551a:	e00e      	b.n	801553a <_Balloc+0x6e>
 801551c:	2221      	movs	r2, #33	@ 0x21
 801551e:	2104      	movs	r1, #4
 8015520:	4620      	mov	r0, r4
 8015522:	f7fc f8cb 	bl	80116bc <_calloc_r>
 8015526:	69e3      	ldr	r3, [r4, #28]
 8015528:	60f0      	str	r0, [r6, #12]
 801552a:	68db      	ldr	r3, [r3, #12]
 801552c:	2b00      	cmp	r3, #0
 801552e:	d1e4      	bne.n	80154fa <_Balloc+0x2e>
 8015530:	2000      	movs	r0, #0
 8015532:	bd70      	pop	{r4, r5, r6, pc}
 8015534:	6802      	ldr	r2, [r0, #0]
 8015536:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801553a:	2300      	movs	r3, #0
 801553c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015540:	e7f7      	b.n	8015532 <_Balloc+0x66>
 8015542:	bf00      	nop
 8015544:	0801839f 	.word	0x0801839f
 8015548:	080184ee 	.word	0x080184ee

0801554c <_Bfree>:
 801554c:	b570      	push	{r4, r5, r6, lr}
 801554e:	69c6      	ldr	r6, [r0, #28]
 8015550:	4605      	mov	r5, r0
 8015552:	460c      	mov	r4, r1
 8015554:	b976      	cbnz	r6, 8015574 <_Bfree+0x28>
 8015556:	2010      	movs	r0, #16
 8015558:	f7fc f90c 	bl	8011774 <malloc>
 801555c:	4602      	mov	r2, r0
 801555e:	61e8      	str	r0, [r5, #28]
 8015560:	b920      	cbnz	r0, 801556c <_Bfree+0x20>
 8015562:	4b09      	ldr	r3, [pc, #36]	@ (8015588 <_Bfree+0x3c>)
 8015564:	4809      	ldr	r0, [pc, #36]	@ (801558c <_Bfree+0x40>)
 8015566:	218f      	movs	r1, #143	@ 0x8f
 8015568:	f7fc f87a 	bl	8011660 <__assert_func>
 801556c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015570:	6006      	str	r6, [r0, #0]
 8015572:	60c6      	str	r6, [r0, #12]
 8015574:	b13c      	cbz	r4, 8015586 <_Bfree+0x3a>
 8015576:	69eb      	ldr	r3, [r5, #28]
 8015578:	6862      	ldr	r2, [r4, #4]
 801557a:	68db      	ldr	r3, [r3, #12]
 801557c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015580:	6021      	str	r1, [r4, #0]
 8015582:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015586:	bd70      	pop	{r4, r5, r6, pc}
 8015588:	0801839f 	.word	0x0801839f
 801558c:	080184ee 	.word	0x080184ee

08015590 <__multadd>:
 8015590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015594:	690d      	ldr	r5, [r1, #16]
 8015596:	4607      	mov	r7, r0
 8015598:	460c      	mov	r4, r1
 801559a:	461e      	mov	r6, r3
 801559c:	f101 0c14 	add.w	ip, r1, #20
 80155a0:	2000      	movs	r0, #0
 80155a2:	f8dc 3000 	ldr.w	r3, [ip]
 80155a6:	b299      	uxth	r1, r3
 80155a8:	fb02 6101 	mla	r1, r2, r1, r6
 80155ac:	0c1e      	lsrs	r6, r3, #16
 80155ae:	0c0b      	lsrs	r3, r1, #16
 80155b0:	fb02 3306 	mla	r3, r2, r6, r3
 80155b4:	b289      	uxth	r1, r1
 80155b6:	3001      	adds	r0, #1
 80155b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80155bc:	4285      	cmp	r5, r0
 80155be:	f84c 1b04 	str.w	r1, [ip], #4
 80155c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80155c6:	dcec      	bgt.n	80155a2 <__multadd+0x12>
 80155c8:	b30e      	cbz	r6, 801560e <__multadd+0x7e>
 80155ca:	68a3      	ldr	r3, [r4, #8]
 80155cc:	42ab      	cmp	r3, r5
 80155ce:	dc19      	bgt.n	8015604 <__multadd+0x74>
 80155d0:	6861      	ldr	r1, [r4, #4]
 80155d2:	4638      	mov	r0, r7
 80155d4:	3101      	adds	r1, #1
 80155d6:	f7ff ff79 	bl	80154cc <_Balloc>
 80155da:	4680      	mov	r8, r0
 80155dc:	b928      	cbnz	r0, 80155ea <__multadd+0x5a>
 80155de:	4602      	mov	r2, r0
 80155e0:	4b0c      	ldr	r3, [pc, #48]	@ (8015614 <__multadd+0x84>)
 80155e2:	480d      	ldr	r0, [pc, #52]	@ (8015618 <__multadd+0x88>)
 80155e4:	21ba      	movs	r1, #186	@ 0xba
 80155e6:	f7fc f83b 	bl	8011660 <__assert_func>
 80155ea:	6922      	ldr	r2, [r4, #16]
 80155ec:	3202      	adds	r2, #2
 80155ee:	f104 010c 	add.w	r1, r4, #12
 80155f2:	0092      	lsls	r2, r2, #2
 80155f4:	300c      	adds	r0, #12
 80155f6:	f7fe fd21 	bl	801403c <memcpy>
 80155fa:	4621      	mov	r1, r4
 80155fc:	4638      	mov	r0, r7
 80155fe:	f7ff ffa5 	bl	801554c <_Bfree>
 8015602:	4644      	mov	r4, r8
 8015604:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015608:	3501      	adds	r5, #1
 801560a:	615e      	str	r6, [r3, #20]
 801560c:	6125      	str	r5, [r4, #16]
 801560e:	4620      	mov	r0, r4
 8015610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015614:	0801847d 	.word	0x0801847d
 8015618:	080184ee 	.word	0x080184ee

0801561c <__s2b>:
 801561c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015620:	460c      	mov	r4, r1
 8015622:	4615      	mov	r5, r2
 8015624:	461f      	mov	r7, r3
 8015626:	2209      	movs	r2, #9
 8015628:	3308      	adds	r3, #8
 801562a:	4606      	mov	r6, r0
 801562c:	fb93 f3f2 	sdiv	r3, r3, r2
 8015630:	2100      	movs	r1, #0
 8015632:	2201      	movs	r2, #1
 8015634:	429a      	cmp	r2, r3
 8015636:	db09      	blt.n	801564c <__s2b+0x30>
 8015638:	4630      	mov	r0, r6
 801563a:	f7ff ff47 	bl	80154cc <_Balloc>
 801563e:	b940      	cbnz	r0, 8015652 <__s2b+0x36>
 8015640:	4602      	mov	r2, r0
 8015642:	4b19      	ldr	r3, [pc, #100]	@ (80156a8 <__s2b+0x8c>)
 8015644:	4819      	ldr	r0, [pc, #100]	@ (80156ac <__s2b+0x90>)
 8015646:	21d3      	movs	r1, #211	@ 0xd3
 8015648:	f7fc f80a 	bl	8011660 <__assert_func>
 801564c:	0052      	lsls	r2, r2, #1
 801564e:	3101      	adds	r1, #1
 8015650:	e7f0      	b.n	8015634 <__s2b+0x18>
 8015652:	9b08      	ldr	r3, [sp, #32]
 8015654:	6143      	str	r3, [r0, #20]
 8015656:	2d09      	cmp	r5, #9
 8015658:	f04f 0301 	mov.w	r3, #1
 801565c:	6103      	str	r3, [r0, #16]
 801565e:	dd16      	ble.n	801568e <__s2b+0x72>
 8015660:	f104 0909 	add.w	r9, r4, #9
 8015664:	46c8      	mov	r8, r9
 8015666:	442c      	add	r4, r5
 8015668:	f818 3b01 	ldrb.w	r3, [r8], #1
 801566c:	4601      	mov	r1, r0
 801566e:	3b30      	subs	r3, #48	@ 0x30
 8015670:	220a      	movs	r2, #10
 8015672:	4630      	mov	r0, r6
 8015674:	f7ff ff8c 	bl	8015590 <__multadd>
 8015678:	45a0      	cmp	r8, r4
 801567a:	d1f5      	bne.n	8015668 <__s2b+0x4c>
 801567c:	f1a5 0408 	sub.w	r4, r5, #8
 8015680:	444c      	add	r4, r9
 8015682:	1b2d      	subs	r5, r5, r4
 8015684:	1963      	adds	r3, r4, r5
 8015686:	42bb      	cmp	r3, r7
 8015688:	db04      	blt.n	8015694 <__s2b+0x78>
 801568a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801568e:	340a      	adds	r4, #10
 8015690:	2509      	movs	r5, #9
 8015692:	e7f6      	b.n	8015682 <__s2b+0x66>
 8015694:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015698:	4601      	mov	r1, r0
 801569a:	3b30      	subs	r3, #48	@ 0x30
 801569c:	220a      	movs	r2, #10
 801569e:	4630      	mov	r0, r6
 80156a0:	f7ff ff76 	bl	8015590 <__multadd>
 80156a4:	e7ee      	b.n	8015684 <__s2b+0x68>
 80156a6:	bf00      	nop
 80156a8:	0801847d 	.word	0x0801847d
 80156ac:	080184ee 	.word	0x080184ee

080156b0 <__hi0bits>:
 80156b0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80156b4:	4603      	mov	r3, r0
 80156b6:	bf36      	itet	cc
 80156b8:	0403      	lslcc	r3, r0, #16
 80156ba:	2000      	movcs	r0, #0
 80156bc:	2010      	movcc	r0, #16
 80156be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80156c2:	bf3c      	itt	cc
 80156c4:	021b      	lslcc	r3, r3, #8
 80156c6:	3008      	addcc	r0, #8
 80156c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80156cc:	bf3c      	itt	cc
 80156ce:	011b      	lslcc	r3, r3, #4
 80156d0:	3004      	addcc	r0, #4
 80156d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80156d6:	bf3c      	itt	cc
 80156d8:	009b      	lslcc	r3, r3, #2
 80156da:	3002      	addcc	r0, #2
 80156dc:	2b00      	cmp	r3, #0
 80156de:	db05      	blt.n	80156ec <__hi0bits+0x3c>
 80156e0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80156e4:	f100 0001 	add.w	r0, r0, #1
 80156e8:	bf08      	it	eq
 80156ea:	2020      	moveq	r0, #32
 80156ec:	4770      	bx	lr

080156ee <__lo0bits>:
 80156ee:	6803      	ldr	r3, [r0, #0]
 80156f0:	4602      	mov	r2, r0
 80156f2:	f013 0007 	ands.w	r0, r3, #7
 80156f6:	d00b      	beq.n	8015710 <__lo0bits+0x22>
 80156f8:	07d9      	lsls	r1, r3, #31
 80156fa:	d421      	bmi.n	8015740 <__lo0bits+0x52>
 80156fc:	0798      	lsls	r0, r3, #30
 80156fe:	bf49      	itett	mi
 8015700:	085b      	lsrmi	r3, r3, #1
 8015702:	089b      	lsrpl	r3, r3, #2
 8015704:	2001      	movmi	r0, #1
 8015706:	6013      	strmi	r3, [r2, #0]
 8015708:	bf5c      	itt	pl
 801570a:	6013      	strpl	r3, [r2, #0]
 801570c:	2002      	movpl	r0, #2
 801570e:	4770      	bx	lr
 8015710:	b299      	uxth	r1, r3
 8015712:	b909      	cbnz	r1, 8015718 <__lo0bits+0x2a>
 8015714:	0c1b      	lsrs	r3, r3, #16
 8015716:	2010      	movs	r0, #16
 8015718:	b2d9      	uxtb	r1, r3
 801571a:	b909      	cbnz	r1, 8015720 <__lo0bits+0x32>
 801571c:	3008      	adds	r0, #8
 801571e:	0a1b      	lsrs	r3, r3, #8
 8015720:	0719      	lsls	r1, r3, #28
 8015722:	bf04      	itt	eq
 8015724:	091b      	lsreq	r3, r3, #4
 8015726:	3004      	addeq	r0, #4
 8015728:	0799      	lsls	r1, r3, #30
 801572a:	bf04      	itt	eq
 801572c:	089b      	lsreq	r3, r3, #2
 801572e:	3002      	addeq	r0, #2
 8015730:	07d9      	lsls	r1, r3, #31
 8015732:	d403      	bmi.n	801573c <__lo0bits+0x4e>
 8015734:	085b      	lsrs	r3, r3, #1
 8015736:	f100 0001 	add.w	r0, r0, #1
 801573a:	d003      	beq.n	8015744 <__lo0bits+0x56>
 801573c:	6013      	str	r3, [r2, #0]
 801573e:	4770      	bx	lr
 8015740:	2000      	movs	r0, #0
 8015742:	4770      	bx	lr
 8015744:	2020      	movs	r0, #32
 8015746:	4770      	bx	lr

08015748 <__i2b>:
 8015748:	b510      	push	{r4, lr}
 801574a:	460c      	mov	r4, r1
 801574c:	2101      	movs	r1, #1
 801574e:	f7ff febd 	bl	80154cc <_Balloc>
 8015752:	4602      	mov	r2, r0
 8015754:	b928      	cbnz	r0, 8015762 <__i2b+0x1a>
 8015756:	4b05      	ldr	r3, [pc, #20]	@ (801576c <__i2b+0x24>)
 8015758:	4805      	ldr	r0, [pc, #20]	@ (8015770 <__i2b+0x28>)
 801575a:	f240 1145 	movw	r1, #325	@ 0x145
 801575e:	f7fb ff7f 	bl	8011660 <__assert_func>
 8015762:	2301      	movs	r3, #1
 8015764:	6144      	str	r4, [r0, #20]
 8015766:	6103      	str	r3, [r0, #16]
 8015768:	bd10      	pop	{r4, pc}
 801576a:	bf00      	nop
 801576c:	0801847d 	.word	0x0801847d
 8015770:	080184ee 	.word	0x080184ee

08015774 <__multiply>:
 8015774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015778:	4617      	mov	r7, r2
 801577a:	690a      	ldr	r2, [r1, #16]
 801577c:	693b      	ldr	r3, [r7, #16]
 801577e:	429a      	cmp	r2, r3
 8015780:	bfa8      	it	ge
 8015782:	463b      	movge	r3, r7
 8015784:	4689      	mov	r9, r1
 8015786:	bfa4      	itt	ge
 8015788:	460f      	movge	r7, r1
 801578a:	4699      	movge	r9, r3
 801578c:	693d      	ldr	r5, [r7, #16]
 801578e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015792:	68bb      	ldr	r3, [r7, #8]
 8015794:	6879      	ldr	r1, [r7, #4]
 8015796:	eb05 060a 	add.w	r6, r5, sl
 801579a:	42b3      	cmp	r3, r6
 801579c:	b085      	sub	sp, #20
 801579e:	bfb8      	it	lt
 80157a0:	3101      	addlt	r1, #1
 80157a2:	f7ff fe93 	bl	80154cc <_Balloc>
 80157a6:	b930      	cbnz	r0, 80157b6 <__multiply+0x42>
 80157a8:	4602      	mov	r2, r0
 80157aa:	4b41      	ldr	r3, [pc, #260]	@ (80158b0 <__multiply+0x13c>)
 80157ac:	4841      	ldr	r0, [pc, #260]	@ (80158b4 <__multiply+0x140>)
 80157ae:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80157b2:	f7fb ff55 	bl	8011660 <__assert_func>
 80157b6:	f100 0414 	add.w	r4, r0, #20
 80157ba:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80157be:	4623      	mov	r3, r4
 80157c0:	2200      	movs	r2, #0
 80157c2:	4573      	cmp	r3, lr
 80157c4:	d320      	bcc.n	8015808 <__multiply+0x94>
 80157c6:	f107 0814 	add.w	r8, r7, #20
 80157ca:	f109 0114 	add.w	r1, r9, #20
 80157ce:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80157d2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80157d6:	9302      	str	r3, [sp, #8]
 80157d8:	1beb      	subs	r3, r5, r7
 80157da:	3b15      	subs	r3, #21
 80157dc:	f023 0303 	bic.w	r3, r3, #3
 80157e0:	3304      	adds	r3, #4
 80157e2:	3715      	adds	r7, #21
 80157e4:	42bd      	cmp	r5, r7
 80157e6:	bf38      	it	cc
 80157e8:	2304      	movcc	r3, #4
 80157ea:	9301      	str	r3, [sp, #4]
 80157ec:	9b02      	ldr	r3, [sp, #8]
 80157ee:	9103      	str	r1, [sp, #12]
 80157f0:	428b      	cmp	r3, r1
 80157f2:	d80c      	bhi.n	801580e <__multiply+0x9a>
 80157f4:	2e00      	cmp	r6, #0
 80157f6:	dd03      	ble.n	8015800 <__multiply+0x8c>
 80157f8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d055      	beq.n	80158ac <__multiply+0x138>
 8015800:	6106      	str	r6, [r0, #16]
 8015802:	b005      	add	sp, #20
 8015804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015808:	f843 2b04 	str.w	r2, [r3], #4
 801580c:	e7d9      	b.n	80157c2 <__multiply+0x4e>
 801580e:	f8b1 a000 	ldrh.w	sl, [r1]
 8015812:	f1ba 0f00 	cmp.w	sl, #0
 8015816:	d01f      	beq.n	8015858 <__multiply+0xe4>
 8015818:	46c4      	mov	ip, r8
 801581a:	46a1      	mov	r9, r4
 801581c:	2700      	movs	r7, #0
 801581e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015822:	f8d9 3000 	ldr.w	r3, [r9]
 8015826:	fa1f fb82 	uxth.w	fp, r2
 801582a:	b29b      	uxth	r3, r3
 801582c:	fb0a 330b 	mla	r3, sl, fp, r3
 8015830:	443b      	add	r3, r7
 8015832:	f8d9 7000 	ldr.w	r7, [r9]
 8015836:	0c12      	lsrs	r2, r2, #16
 8015838:	0c3f      	lsrs	r7, r7, #16
 801583a:	fb0a 7202 	mla	r2, sl, r2, r7
 801583e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8015842:	b29b      	uxth	r3, r3
 8015844:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015848:	4565      	cmp	r5, ip
 801584a:	f849 3b04 	str.w	r3, [r9], #4
 801584e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8015852:	d8e4      	bhi.n	801581e <__multiply+0xaa>
 8015854:	9b01      	ldr	r3, [sp, #4]
 8015856:	50e7      	str	r7, [r4, r3]
 8015858:	9b03      	ldr	r3, [sp, #12]
 801585a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801585e:	3104      	adds	r1, #4
 8015860:	f1b9 0f00 	cmp.w	r9, #0
 8015864:	d020      	beq.n	80158a8 <__multiply+0x134>
 8015866:	6823      	ldr	r3, [r4, #0]
 8015868:	4647      	mov	r7, r8
 801586a:	46a4      	mov	ip, r4
 801586c:	f04f 0a00 	mov.w	sl, #0
 8015870:	f8b7 b000 	ldrh.w	fp, [r7]
 8015874:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8015878:	fb09 220b 	mla	r2, r9, fp, r2
 801587c:	4452      	add	r2, sl
 801587e:	b29b      	uxth	r3, r3
 8015880:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015884:	f84c 3b04 	str.w	r3, [ip], #4
 8015888:	f857 3b04 	ldr.w	r3, [r7], #4
 801588c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015890:	f8bc 3000 	ldrh.w	r3, [ip]
 8015894:	fb09 330a 	mla	r3, r9, sl, r3
 8015898:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801589c:	42bd      	cmp	r5, r7
 801589e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80158a2:	d8e5      	bhi.n	8015870 <__multiply+0xfc>
 80158a4:	9a01      	ldr	r2, [sp, #4]
 80158a6:	50a3      	str	r3, [r4, r2]
 80158a8:	3404      	adds	r4, #4
 80158aa:	e79f      	b.n	80157ec <__multiply+0x78>
 80158ac:	3e01      	subs	r6, #1
 80158ae:	e7a1      	b.n	80157f4 <__multiply+0x80>
 80158b0:	0801847d 	.word	0x0801847d
 80158b4:	080184ee 	.word	0x080184ee

080158b8 <__pow5mult>:
 80158b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80158bc:	4615      	mov	r5, r2
 80158be:	f012 0203 	ands.w	r2, r2, #3
 80158c2:	4607      	mov	r7, r0
 80158c4:	460e      	mov	r6, r1
 80158c6:	d007      	beq.n	80158d8 <__pow5mult+0x20>
 80158c8:	4c25      	ldr	r4, [pc, #148]	@ (8015960 <__pow5mult+0xa8>)
 80158ca:	3a01      	subs	r2, #1
 80158cc:	2300      	movs	r3, #0
 80158ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80158d2:	f7ff fe5d 	bl	8015590 <__multadd>
 80158d6:	4606      	mov	r6, r0
 80158d8:	10ad      	asrs	r5, r5, #2
 80158da:	d03d      	beq.n	8015958 <__pow5mult+0xa0>
 80158dc:	69fc      	ldr	r4, [r7, #28]
 80158de:	b97c      	cbnz	r4, 8015900 <__pow5mult+0x48>
 80158e0:	2010      	movs	r0, #16
 80158e2:	f7fb ff47 	bl	8011774 <malloc>
 80158e6:	4602      	mov	r2, r0
 80158e8:	61f8      	str	r0, [r7, #28]
 80158ea:	b928      	cbnz	r0, 80158f8 <__pow5mult+0x40>
 80158ec:	4b1d      	ldr	r3, [pc, #116]	@ (8015964 <__pow5mult+0xac>)
 80158ee:	481e      	ldr	r0, [pc, #120]	@ (8015968 <__pow5mult+0xb0>)
 80158f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80158f4:	f7fb feb4 	bl	8011660 <__assert_func>
 80158f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80158fc:	6004      	str	r4, [r0, #0]
 80158fe:	60c4      	str	r4, [r0, #12]
 8015900:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8015904:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015908:	b94c      	cbnz	r4, 801591e <__pow5mult+0x66>
 801590a:	f240 2171 	movw	r1, #625	@ 0x271
 801590e:	4638      	mov	r0, r7
 8015910:	f7ff ff1a 	bl	8015748 <__i2b>
 8015914:	2300      	movs	r3, #0
 8015916:	f8c8 0008 	str.w	r0, [r8, #8]
 801591a:	4604      	mov	r4, r0
 801591c:	6003      	str	r3, [r0, #0]
 801591e:	f04f 0900 	mov.w	r9, #0
 8015922:	07eb      	lsls	r3, r5, #31
 8015924:	d50a      	bpl.n	801593c <__pow5mult+0x84>
 8015926:	4631      	mov	r1, r6
 8015928:	4622      	mov	r2, r4
 801592a:	4638      	mov	r0, r7
 801592c:	f7ff ff22 	bl	8015774 <__multiply>
 8015930:	4631      	mov	r1, r6
 8015932:	4680      	mov	r8, r0
 8015934:	4638      	mov	r0, r7
 8015936:	f7ff fe09 	bl	801554c <_Bfree>
 801593a:	4646      	mov	r6, r8
 801593c:	106d      	asrs	r5, r5, #1
 801593e:	d00b      	beq.n	8015958 <__pow5mult+0xa0>
 8015940:	6820      	ldr	r0, [r4, #0]
 8015942:	b938      	cbnz	r0, 8015954 <__pow5mult+0x9c>
 8015944:	4622      	mov	r2, r4
 8015946:	4621      	mov	r1, r4
 8015948:	4638      	mov	r0, r7
 801594a:	f7ff ff13 	bl	8015774 <__multiply>
 801594e:	6020      	str	r0, [r4, #0]
 8015950:	f8c0 9000 	str.w	r9, [r0]
 8015954:	4604      	mov	r4, r0
 8015956:	e7e4      	b.n	8015922 <__pow5mult+0x6a>
 8015958:	4630      	mov	r0, r6
 801595a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801595e:	bf00      	nop
 8015960:	080186ac 	.word	0x080186ac
 8015964:	0801839f 	.word	0x0801839f
 8015968:	080184ee 	.word	0x080184ee

0801596c <__lshift>:
 801596c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015970:	460c      	mov	r4, r1
 8015972:	6849      	ldr	r1, [r1, #4]
 8015974:	6923      	ldr	r3, [r4, #16]
 8015976:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801597a:	68a3      	ldr	r3, [r4, #8]
 801597c:	4607      	mov	r7, r0
 801597e:	4691      	mov	r9, r2
 8015980:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015984:	f108 0601 	add.w	r6, r8, #1
 8015988:	42b3      	cmp	r3, r6
 801598a:	db0b      	blt.n	80159a4 <__lshift+0x38>
 801598c:	4638      	mov	r0, r7
 801598e:	f7ff fd9d 	bl	80154cc <_Balloc>
 8015992:	4605      	mov	r5, r0
 8015994:	b948      	cbnz	r0, 80159aa <__lshift+0x3e>
 8015996:	4602      	mov	r2, r0
 8015998:	4b28      	ldr	r3, [pc, #160]	@ (8015a3c <__lshift+0xd0>)
 801599a:	4829      	ldr	r0, [pc, #164]	@ (8015a40 <__lshift+0xd4>)
 801599c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80159a0:	f7fb fe5e 	bl	8011660 <__assert_func>
 80159a4:	3101      	adds	r1, #1
 80159a6:	005b      	lsls	r3, r3, #1
 80159a8:	e7ee      	b.n	8015988 <__lshift+0x1c>
 80159aa:	2300      	movs	r3, #0
 80159ac:	f100 0114 	add.w	r1, r0, #20
 80159b0:	f100 0210 	add.w	r2, r0, #16
 80159b4:	4618      	mov	r0, r3
 80159b6:	4553      	cmp	r3, sl
 80159b8:	db33      	blt.n	8015a22 <__lshift+0xb6>
 80159ba:	6920      	ldr	r0, [r4, #16]
 80159bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80159c0:	f104 0314 	add.w	r3, r4, #20
 80159c4:	f019 091f 	ands.w	r9, r9, #31
 80159c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80159cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80159d0:	d02b      	beq.n	8015a2a <__lshift+0xbe>
 80159d2:	f1c9 0e20 	rsb	lr, r9, #32
 80159d6:	468a      	mov	sl, r1
 80159d8:	2200      	movs	r2, #0
 80159da:	6818      	ldr	r0, [r3, #0]
 80159dc:	fa00 f009 	lsl.w	r0, r0, r9
 80159e0:	4310      	orrs	r0, r2
 80159e2:	f84a 0b04 	str.w	r0, [sl], #4
 80159e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80159ea:	459c      	cmp	ip, r3
 80159ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80159f0:	d8f3      	bhi.n	80159da <__lshift+0x6e>
 80159f2:	ebac 0304 	sub.w	r3, ip, r4
 80159f6:	3b15      	subs	r3, #21
 80159f8:	f023 0303 	bic.w	r3, r3, #3
 80159fc:	3304      	adds	r3, #4
 80159fe:	f104 0015 	add.w	r0, r4, #21
 8015a02:	4560      	cmp	r0, ip
 8015a04:	bf88      	it	hi
 8015a06:	2304      	movhi	r3, #4
 8015a08:	50ca      	str	r2, [r1, r3]
 8015a0a:	b10a      	cbz	r2, 8015a10 <__lshift+0xa4>
 8015a0c:	f108 0602 	add.w	r6, r8, #2
 8015a10:	3e01      	subs	r6, #1
 8015a12:	4638      	mov	r0, r7
 8015a14:	612e      	str	r6, [r5, #16]
 8015a16:	4621      	mov	r1, r4
 8015a18:	f7ff fd98 	bl	801554c <_Bfree>
 8015a1c:	4628      	mov	r0, r5
 8015a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a22:	f842 0f04 	str.w	r0, [r2, #4]!
 8015a26:	3301      	adds	r3, #1
 8015a28:	e7c5      	b.n	80159b6 <__lshift+0x4a>
 8015a2a:	3904      	subs	r1, #4
 8015a2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a30:	f841 2f04 	str.w	r2, [r1, #4]!
 8015a34:	459c      	cmp	ip, r3
 8015a36:	d8f9      	bhi.n	8015a2c <__lshift+0xc0>
 8015a38:	e7ea      	b.n	8015a10 <__lshift+0xa4>
 8015a3a:	bf00      	nop
 8015a3c:	0801847d 	.word	0x0801847d
 8015a40:	080184ee 	.word	0x080184ee

08015a44 <__mcmp>:
 8015a44:	690a      	ldr	r2, [r1, #16]
 8015a46:	4603      	mov	r3, r0
 8015a48:	6900      	ldr	r0, [r0, #16]
 8015a4a:	1a80      	subs	r0, r0, r2
 8015a4c:	b530      	push	{r4, r5, lr}
 8015a4e:	d10e      	bne.n	8015a6e <__mcmp+0x2a>
 8015a50:	3314      	adds	r3, #20
 8015a52:	3114      	adds	r1, #20
 8015a54:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8015a58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015a5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015a60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015a64:	4295      	cmp	r5, r2
 8015a66:	d003      	beq.n	8015a70 <__mcmp+0x2c>
 8015a68:	d205      	bcs.n	8015a76 <__mcmp+0x32>
 8015a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8015a6e:	bd30      	pop	{r4, r5, pc}
 8015a70:	42a3      	cmp	r3, r4
 8015a72:	d3f3      	bcc.n	8015a5c <__mcmp+0x18>
 8015a74:	e7fb      	b.n	8015a6e <__mcmp+0x2a>
 8015a76:	2001      	movs	r0, #1
 8015a78:	e7f9      	b.n	8015a6e <__mcmp+0x2a>
	...

08015a7c <__mdiff>:
 8015a7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a80:	4689      	mov	r9, r1
 8015a82:	4606      	mov	r6, r0
 8015a84:	4611      	mov	r1, r2
 8015a86:	4648      	mov	r0, r9
 8015a88:	4614      	mov	r4, r2
 8015a8a:	f7ff ffdb 	bl	8015a44 <__mcmp>
 8015a8e:	1e05      	subs	r5, r0, #0
 8015a90:	d112      	bne.n	8015ab8 <__mdiff+0x3c>
 8015a92:	4629      	mov	r1, r5
 8015a94:	4630      	mov	r0, r6
 8015a96:	f7ff fd19 	bl	80154cc <_Balloc>
 8015a9a:	4602      	mov	r2, r0
 8015a9c:	b928      	cbnz	r0, 8015aaa <__mdiff+0x2e>
 8015a9e:	4b3f      	ldr	r3, [pc, #252]	@ (8015b9c <__mdiff+0x120>)
 8015aa0:	f240 2137 	movw	r1, #567	@ 0x237
 8015aa4:	483e      	ldr	r0, [pc, #248]	@ (8015ba0 <__mdiff+0x124>)
 8015aa6:	f7fb fddb 	bl	8011660 <__assert_func>
 8015aaa:	2301      	movs	r3, #1
 8015aac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015ab0:	4610      	mov	r0, r2
 8015ab2:	b003      	add	sp, #12
 8015ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ab8:	bfbc      	itt	lt
 8015aba:	464b      	movlt	r3, r9
 8015abc:	46a1      	movlt	r9, r4
 8015abe:	4630      	mov	r0, r6
 8015ac0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8015ac4:	bfba      	itte	lt
 8015ac6:	461c      	movlt	r4, r3
 8015ac8:	2501      	movlt	r5, #1
 8015aca:	2500      	movge	r5, #0
 8015acc:	f7ff fcfe 	bl	80154cc <_Balloc>
 8015ad0:	4602      	mov	r2, r0
 8015ad2:	b918      	cbnz	r0, 8015adc <__mdiff+0x60>
 8015ad4:	4b31      	ldr	r3, [pc, #196]	@ (8015b9c <__mdiff+0x120>)
 8015ad6:	f240 2145 	movw	r1, #581	@ 0x245
 8015ada:	e7e3      	b.n	8015aa4 <__mdiff+0x28>
 8015adc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8015ae0:	6926      	ldr	r6, [r4, #16]
 8015ae2:	60c5      	str	r5, [r0, #12]
 8015ae4:	f109 0310 	add.w	r3, r9, #16
 8015ae8:	f109 0514 	add.w	r5, r9, #20
 8015aec:	f104 0e14 	add.w	lr, r4, #20
 8015af0:	f100 0b14 	add.w	fp, r0, #20
 8015af4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8015af8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8015afc:	9301      	str	r3, [sp, #4]
 8015afe:	46d9      	mov	r9, fp
 8015b00:	f04f 0c00 	mov.w	ip, #0
 8015b04:	9b01      	ldr	r3, [sp, #4]
 8015b06:	f85e 0b04 	ldr.w	r0, [lr], #4
 8015b0a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8015b0e:	9301      	str	r3, [sp, #4]
 8015b10:	fa1f f38a 	uxth.w	r3, sl
 8015b14:	4619      	mov	r1, r3
 8015b16:	b283      	uxth	r3, r0
 8015b18:	1acb      	subs	r3, r1, r3
 8015b1a:	0c00      	lsrs	r0, r0, #16
 8015b1c:	4463      	add	r3, ip
 8015b1e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8015b22:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8015b26:	b29b      	uxth	r3, r3
 8015b28:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8015b2c:	4576      	cmp	r6, lr
 8015b2e:	f849 3b04 	str.w	r3, [r9], #4
 8015b32:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015b36:	d8e5      	bhi.n	8015b04 <__mdiff+0x88>
 8015b38:	1b33      	subs	r3, r6, r4
 8015b3a:	3b15      	subs	r3, #21
 8015b3c:	f023 0303 	bic.w	r3, r3, #3
 8015b40:	3415      	adds	r4, #21
 8015b42:	3304      	adds	r3, #4
 8015b44:	42a6      	cmp	r6, r4
 8015b46:	bf38      	it	cc
 8015b48:	2304      	movcc	r3, #4
 8015b4a:	441d      	add	r5, r3
 8015b4c:	445b      	add	r3, fp
 8015b4e:	461e      	mov	r6, r3
 8015b50:	462c      	mov	r4, r5
 8015b52:	4544      	cmp	r4, r8
 8015b54:	d30e      	bcc.n	8015b74 <__mdiff+0xf8>
 8015b56:	f108 0103 	add.w	r1, r8, #3
 8015b5a:	1b49      	subs	r1, r1, r5
 8015b5c:	f021 0103 	bic.w	r1, r1, #3
 8015b60:	3d03      	subs	r5, #3
 8015b62:	45a8      	cmp	r8, r5
 8015b64:	bf38      	it	cc
 8015b66:	2100      	movcc	r1, #0
 8015b68:	440b      	add	r3, r1
 8015b6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015b6e:	b191      	cbz	r1, 8015b96 <__mdiff+0x11a>
 8015b70:	6117      	str	r7, [r2, #16]
 8015b72:	e79d      	b.n	8015ab0 <__mdiff+0x34>
 8015b74:	f854 1b04 	ldr.w	r1, [r4], #4
 8015b78:	46e6      	mov	lr, ip
 8015b7a:	0c08      	lsrs	r0, r1, #16
 8015b7c:	fa1c fc81 	uxtah	ip, ip, r1
 8015b80:	4471      	add	r1, lr
 8015b82:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8015b86:	b289      	uxth	r1, r1
 8015b88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8015b8c:	f846 1b04 	str.w	r1, [r6], #4
 8015b90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015b94:	e7dd      	b.n	8015b52 <__mdiff+0xd6>
 8015b96:	3f01      	subs	r7, #1
 8015b98:	e7e7      	b.n	8015b6a <__mdiff+0xee>
 8015b9a:	bf00      	nop
 8015b9c:	0801847d 	.word	0x0801847d
 8015ba0:	080184ee 	.word	0x080184ee

08015ba4 <__ulp>:
 8015ba4:	b082      	sub	sp, #8
 8015ba6:	ed8d 0b00 	vstr	d0, [sp]
 8015baa:	9a01      	ldr	r2, [sp, #4]
 8015bac:	4b0f      	ldr	r3, [pc, #60]	@ (8015bec <__ulp+0x48>)
 8015bae:	4013      	ands	r3, r2
 8015bb0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	dc08      	bgt.n	8015bca <__ulp+0x26>
 8015bb8:	425b      	negs	r3, r3
 8015bba:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8015bbe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015bc2:	da04      	bge.n	8015bce <__ulp+0x2a>
 8015bc4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8015bc8:	4113      	asrs	r3, r2
 8015bca:	2200      	movs	r2, #0
 8015bcc:	e008      	b.n	8015be0 <__ulp+0x3c>
 8015bce:	f1a2 0314 	sub.w	r3, r2, #20
 8015bd2:	2b1e      	cmp	r3, #30
 8015bd4:	bfda      	itte	le
 8015bd6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8015bda:	40da      	lsrle	r2, r3
 8015bdc:	2201      	movgt	r2, #1
 8015bde:	2300      	movs	r3, #0
 8015be0:	4619      	mov	r1, r3
 8015be2:	4610      	mov	r0, r2
 8015be4:	ec41 0b10 	vmov	d0, r0, r1
 8015be8:	b002      	add	sp, #8
 8015bea:	4770      	bx	lr
 8015bec:	7ff00000 	.word	0x7ff00000

08015bf0 <__b2d>:
 8015bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bf4:	6906      	ldr	r6, [r0, #16]
 8015bf6:	f100 0814 	add.w	r8, r0, #20
 8015bfa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8015bfe:	1f37      	subs	r7, r6, #4
 8015c00:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015c04:	4610      	mov	r0, r2
 8015c06:	f7ff fd53 	bl	80156b0 <__hi0bits>
 8015c0a:	f1c0 0320 	rsb	r3, r0, #32
 8015c0e:	280a      	cmp	r0, #10
 8015c10:	600b      	str	r3, [r1, #0]
 8015c12:	491b      	ldr	r1, [pc, #108]	@ (8015c80 <__b2d+0x90>)
 8015c14:	dc15      	bgt.n	8015c42 <__b2d+0x52>
 8015c16:	f1c0 0c0b 	rsb	ip, r0, #11
 8015c1a:	fa22 f30c 	lsr.w	r3, r2, ip
 8015c1e:	45b8      	cmp	r8, r7
 8015c20:	ea43 0501 	orr.w	r5, r3, r1
 8015c24:	bf34      	ite	cc
 8015c26:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8015c2a:	2300      	movcs	r3, #0
 8015c2c:	3015      	adds	r0, #21
 8015c2e:	fa02 f000 	lsl.w	r0, r2, r0
 8015c32:	fa23 f30c 	lsr.w	r3, r3, ip
 8015c36:	4303      	orrs	r3, r0
 8015c38:	461c      	mov	r4, r3
 8015c3a:	ec45 4b10 	vmov	d0, r4, r5
 8015c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c42:	45b8      	cmp	r8, r7
 8015c44:	bf3a      	itte	cc
 8015c46:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8015c4a:	f1a6 0708 	subcc.w	r7, r6, #8
 8015c4e:	2300      	movcs	r3, #0
 8015c50:	380b      	subs	r0, #11
 8015c52:	d012      	beq.n	8015c7a <__b2d+0x8a>
 8015c54:	f1c0 0120 	rsb	r1, r0, #32
 8015c58:	fa23 f401 	lsr.w	r4, r3, r1
 8015c5c:	4082      	lsls	r2, r0
 8015c5e:	4322      	orrs	r2, r4
 8015c60:	4547      	cmp	r7, r8
 8015c62:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8015c66:	bf8c      	ite	hi
 8015c68:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8015c6c:	2200      	movls	r2, #0
 8015c6e:	4083      	lsls	r3, r0
 8015c70:	40ca      	lsrs	r2, r1
 8015c72:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8015c76:	4313      	orrs	r3, r2
 8015c78:	e7de      	b.n	8015c38 <__b2d+0x48>
 8015c7a:	ea42 0501 	orr.w	r5, r2, r1
 8015c7e:	e7db      	b.n	8015c38 <__b2d+0x48>
 8015c80:	3ff00000 	.word	0x3ff00000

08015c84 <__d2b>:
 8015c84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015c88:	460f      	mov	r7, r1
 8015c8a:	2101      	movs	r1, #1
 8015c8c:	ec59 8b10 	vmov	r8, r9, d0
 8015c90:	4616      	mov	r6, r2
 8015c92:	f7ff fc1b 	bl	80154cc <_Balloc>
 8015c96:	4604      	mov	r4, r0
 8015c98:	b930      	cbnz	r0, 8015ca8 <__d2b+0x24>
 8015c9a:	4602      	mov	r2, r0
 8015c9c:	4b23      	ldr	r3, [pc, #140]	@ (8015d2c <__d2b+0xa8>)
 8015c9e:	4824      	ldr	r0, [pc, #144]	@ (8015d30 <__d2b+0xac>)
 8015ca0:	f240 310f 	movw	r1, #783	@ 0x30f
 8015ca4:	f7fb fcdc 	bl	8011660 <__assert_func>
 8015ca8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015cac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015cb0:	b10d      	cbz	r5, 8015cb6 <__d2b+0x32>
 8015cb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015cb6:	9301      	str	r3, [sp, #4]
 8015cb8:	f1b8 0300 	subs.w	r3, r8, #0
 8015cbc:	d023      	beq.n	8015d06 <__d2b+0x82>
 8015cbe:	4668      	mov	r0, sp
 8015cc0:	9300      	str	r3, [sp, #0]
 8015cc2:	f7ff fd14 	bl	80156ee <__lo0bits>
 8015cc6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8015cca:	b1d0      	cbz	r0, 8015d02 <__d2b+0x7e>
 8015ccc:	f1c0 0320 	rsb	r3, r0, #32
 8015cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8015cd4:	430b      	orrs	r3, r1
 8015cd6:	40c2      	lsrs	r2, r0
 8015cd8:	6163      	str	r3, [r4, #20]
 8015cda:	9201      	str	r2, [sp, #4]
 8015cdc:	9b01      	ldr	r3, [sp, #4]
 8015cde:	61a3      	str	r3, [r4, #24]
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	bf0c      	ite	eq
 8015ce4:	2201      	moveq	r2, #1
 8015ce6:	2202      	movne	r2, #2
 8015ce8:	6122      	str	r2, [r4, #16]
 8015cea:	b1a5      	cbz	r5, 8015d16 <__d2b+0x92>
 8015cec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8015cf0:	4405      	add	r5, r0
 8015cf2:	603d      	str	r5, [r7, #0]
 8015cf4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8015cf8:	6030      	str	r0, [r6, #0]
 8015cfa:	4620      	mov	r0, r4
 8015cfc:	b003      	add	sp, #12
 8015cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d02:	6161      	str	r1, [r4, #20]
 8015d04:	e7ea      	b.n	8015cdc <__d2b+0x58>
 8015d06:	a801      	add	r0, sp, #4
 8015d08:	f7ff fcf1 	bl	80156ee <__lo0bits>
 8015d0c:	9b01      	ldr	r3, [sp, #4]
 8015d0e:	6163      	str	r3, [r4, #20]
 8015d10:	3020      	adds	r0, #32
 8015d12:	2201      	movs	r2, #1
 8015d14:	e7e8      	b.n	8015ce8 <__d2b+0x64>
 8015d16:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015d1a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8015d1e:	6038      	str	r0, [r7, #0]
 8015d20:	6918      	ldr	r0, [r3, #16]
 8015d22:	f7ff fcc5 	bl	80156b0 <__hi0bits>
 8015d26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015d2a:	e7e5      	b.n	8015cf8 <__d2b+0x74>
 8015d2c:	0801847d 	.word	0x0801847d
 8015d30:	080184ee 	.word	0x080184ee

08015d34 <__ratio>:
 8015d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d38:	b085      	sub	sp, #20
 8015d3a:	e9cd 1000 	strd	r1, r0, [sp]
 8015d3e:	a902      	add	r1, sp, #8
 8015d40:	f7ff ff56 	bl	8015bf0 <__b2d>
 8015d44:	9800      	ldr	r0, [sp, #0]
 8015d46:	a903      	add	r1, sp, #12
 8015d48:	ec55 4b10 	vmov	r4, r5, d0
 8015d4c:	f7ff ff50 	bl	8015bf0 <__b2d>
 8015d50:	9b01      	ldr	r3, [sp, #4]
 8015d52:	6919      	ldr	r1, [r3, #16]
 8015d54:	9b00      	ldr	r3, [sp, #0]
 8015d56:	691b      	ldr	r3, [r3, #16]
 8015d58:	1ac9      	subs	r1, r1, r3
 8015d5a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8015d5e:	1a9b      	subs	r3, r3, r2
 8015d60:	ec5b ab10 	vmov	sl, fp, d0
 8015d64:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	bfce      	itee	gt
 8015d6c:	462a      	movgt	r2, r5
 8015d6e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015d72:	465a      	movle	r2, fp
 8015d74:	462f      	mov	r7, r5
 8015d76:	46d9      	mov	r9, fp
 8015d78:	bfcc      	ite	gt
 8015d7a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8015d7e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8015d82:	464b      	mov	r3, r9
 8015d84:	4652      	mov	r2, sl
 8015d86:	4620      	mov	r0, r4
 8015d88:	4639      	mov	r1, r7
 8015d8a:	f7ea fd8f 	bl	80008ac <__aeabi_ddiv>
 8015d8e:	ec41 0b10 	vmov	d0, r0, r1
 8015d92:	b005      	add	sp, #20
 8015d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015d98 <__copybits>:
 8015d98:	3901      	subs	r1, #1
 8015d9a:	b570      	push	{r4, r5, r6, lr}
 8015d9c:	1149      	asrs	r1, r1, #5
 8015d9e:	6914      	ldr	r4, [r2, #16]
 8015da0:	3101      	adds	r1, #1
 8015da2:	f102 0314 	add.w	r3, r2, #20
 8015da6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015daa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015dae:	1f05      	subs	r5, r0, #4
 8015db0:	42a3      	cmp	r3, r4
 8015db2:	d30c      	bcc.n	8015dce <__copybits+0x36>
 8015db4:	1aa3      	subs	r3, r4, r2
 8015db6:	3b11      	subs	r3, #17
 8015db8:	f023 0303 	bic.w	r3, r3, #3
 8015dbc:	3211      	adds	r2, #17
 8015dbe:	42a2      	cmp	r2, r4
 8015dc0:	bf88      	it	hi
 8015dc2:	2300      	movhi	r3, #0
 8015dc4:	4418      	add	r0, r3
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	4288      	cmp	r0, r1
 8015dca:	d305      	bcc.n	8015dd8 <__copybits+0x40>
 8015dcc:	bd70      	pop	{r4, r5, r6, pc}
 8015dce:	f853 6b04 	ldr.w	r6, [r3], #4
 8015dd2:	f845 6f04 	str.w	r6, [r5, #4]!
 8015dd6:	e7eb      	b.n	8015db0 <__copybits+0x18>
 8015dd8:	f840 3b04 	str.w	r3, [r0], #4
 8015ddc:	e7f4      	b.n	8015dc8 <__copybits+0x30>

08015dde <__any_on>:
 8015dde:	f100 0214 	add.w	r2, r0, #20
 8015de2:	6900      	ldr	r0, [r0, #16]
 8015de4:	114b      	asrs	r3, r1, #5
 8015de6:	4298      	cmp	r0, r3
 8015de8:	b510      	push	{r4, lr}
 8015dea:	db11      	blt.n	8015e10 <__any_on+0x32>
 8015dec:	dd0a      	ble.n	8015e04 <__any_on+0x26>
 8015dee:	f011 011f 	ands.w	r1, r1, #31
 8015df2:	d007      	beq.n	8015e04 <__any_on+0x26>
 8015df4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015df8:	fa24 f001 	lsr.w	r0, r4, r1
 8015dfc:	fa00 f101 	lsl.w	r1, r0, r1
 8015e00:	428c      	cmp	r4, r1
 8015e02:	d10b      	bne.n	8015e1c <__any_on+0x3e>
 8015e04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015e08:	4293      	cmp	r3, r2
 8015e0a:	d803      	bhi.n	8015e14 <__any_on+0x36>
 8015e0c:	2000      	movs	r0, #0
 8015e0e:	bd10      	pop	{r4, pc}
 8015e10:	4603      	mov	r3, r0
 8015e12:	e7f7      	b.n	8015e04 <__any_on+0x26>
 8015e14:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015e18:	2900      	cmp	r1, #0
 8015e1a:	d0f5      	beq.n	8015e08 <__any_on+0x2a>
 8015e1c:	2001      	movs	r0, #1
 8015e1e:	e7f6      	b.n	8015e0e <__any_on+0x30>

08015e20 <_realloc_r>:
 8015e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e24:	4607      	mov	r7, r0
 8015e26:	4614      	mov	r4, r2
 8015e28:	460d      	mov	r5, r1
 8015e2a:	b921      	cbnz	r1, 8015e36 <_realloc_r+0x16>
 8015e2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015e30:	4611      	mov	r1, r2
 8015e32:	f7fb bcd1 	b.w	80117d8 <_malloc_r>
 8015e36:	b92a      	cbnz	r2, 8015e44 <_realloc_r+0x24>
 8015e38:	f7fe ff7e 	bl	8014d38 <_free_r>
 8015e3c:	4625      	mov	r5, r4
 8015e3e:	4628      	mov	r0, r5
 8015e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e44:	f000 fc1a 	bl	801667c <_malloc_usable_size_r>
 8015e48:	4284      	cmp	r4, r0
 8015e4a:	4606      	mov	r6, r0
 8015e4c:	d802      	bhi.n	8015e54 <_realloc_r+0x34>
 8015e4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015e52:	d8f4      	bhi.n	8015e3e <_realloc_r+0x1e>
 8015e54:	4621      	mov	r1, r4
 8015e56:	4638      	mov	r0, r7
 8015e58:	f7fb fcbe 	bl	80117d8 <_malloc_r>
 8015e5c:	4680      	mov	r8, r0
 8015e5e:	b908      	cbnz	r0, 8015e64 <_realloc_r+0x44>
 8015e60:	4645      	mov	r5, r8
 8015e62:	e7ec      	b.n	8015e3e <_realloc_r+0x1e>
 8015e64:	42b4      	cmp	r4, r6
 8015e66:	4622      	mov	r2, r4
 8015e68:	4629      	mov	r1, r5
 8015e6a:	bf28      	it	cs
 8015e6c:	4632      	movcs	r2, r6
 8015e6e:	f7fe f8e5 	bl	801403c <memcpy>
 8015e72:	4629      	mov	r1, r5
 8015e74:	4638      	mov	r0, r7
 8015e76:	f7fe ff5f 	bl	8014d38 <_free_r>
 8015e7a:	e7f1      	b.n	8015e60 <_realloc_r+0x40>

08015e7c <__ascii_wctomb>:
 8015e7c:	4603      	mov	r3, r0
 8015e7e:	4608      	mov	r0, r1
 8015e80:	b141      	cbz	r1, 8015e94 <__ascii_wctomb+0x18>
 8015e82:	2aff      	cmp	r2, #255	@ 0xff
 8015e84:	d904      	bls.n	8015e90 <__ascii_wctomb+0x14>
 8015e86:	228a      	movs	r2, #138	@ 0x8a
 8015e88:	601a      	str	r2, [r3, #0]
 8015e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8015e8e:	4770      	bx	lr
 8015e90:	700a      	strb	r2, [r1, #0]
 8015e92:	2001      	movs	r0, #1
 8015e94:	4770      	bx	lr

08015e96 <__ssputs_r>:
 8015e96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e9a:	688e      	ldr	r6, [r1, #8]
 8015e9c:	461f      	mov	r7, r3
 8015e9e:	42be      	cmp	r6, r7
 8015ea0:	680b      	ldr	r3, [r1, #0]
 8015ea2:	4682      	mov	sl, r0
 8015ea4:	460c      	mov	r4, r1
 8015ea6:	4690      	mov	r8, r2
 8015ea8:	d82d      	bhi.n	8015f06 <__ssputs_r+0x70>
 8015eaa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015eae:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015eb2:	d026      	beq.n	8015f02 <__ssputs_r+0x6c>
 8015eb4:	6965      	ldr	r5, [r4, #20]
 8015eb6:	6909      	ldr	r1, [r1, #16]
 8015eb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015ebc:	eba3 0901 	sub.w	r9, r3, r1
 8015ec0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015ec4:	1c7b      	adds	r3, r7, #1
 8015ec6:	444b      	add	r3, r9
 8015ec8:	106d      	asrs	r5, r5, #1
 8015eca:	429d      	cmp	r5, r3
 8015ecc:	bf38      	it	cc
 8015ece:	461d      	movcc	r5, r3
 8015ed0:	0553      	lsls	r3, r2, #21
 8015ed2:	d527      	bpl.n	8015f24 <__ssputs_r+0x8e>
 8015ed4:	4629      	mov	r1, r5
 8015ed6:	f7fb fc7f 	bl	80117d8 <_malloc_r>
 8015eda:	4606      	mov	r6, r0
 8015edc:	b360      	cbz	r0, 8015f38 <__ssputs_r+0xa2>
 8015ede:	6921      	ldr	r1, [r4, #16]
 8015ee0:	464a      	mov	r2, r9
 8015ee2:	f7fe f8ab 	bl	801403c <memcpy>
 8015ee6:	89a3      	ldrh	r3, [r4, #12]
 8015ee8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015eec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015ef0:	81a3      	strh	r3, [r4, #12]
 8015ef2:	6126      	str	r6, [r4, #16]
 8015ef4:	6165      	str	r5, [r4, #20]
 8015ef6:	444e      	add	r6, r9
 8015ef8:	eba5 0509 	sub.w	r5, r5, r9
 8015efc:	6026      	str	r6, [r4, #0]
 8015efe:	60a5      	str	r5, [r4, #8]
 8015f00:	463e      	mov	r6, r7
 8015f02:	42be      	cmp	r6, r7
 8015f04:	d900      	bls.n	8015f08 <__ssputs_r+0x72>
 8015f06:	463e      	mov	r6, r7
 8015f08:	6820      	ldr	r0, [r4, #0]
 8015f0a:	4632      	mov	r2, r6
 8015f0c:	4641      	mov	r1, r8
 8015f0e:	f000 fb34 	bl	801657a <memmove>
 8015f12:	68a3      	ldr	r3, [r4, #8]
 8015f14:	1b9b      	subs	r3, r3, r6
 8015f16:	60a3      	str	r3, [r4, #8]
 8015f18:	6823      	ldr	r3, [r4, #0]
 8015f1a:	4433      	add	r3, r6
 8015f1c:	6023      	str	r3, [r4, #0]
 8015f1e:	2000      	movs	r0, #0
 8015f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f24:	462a      	mov	r2, r5
 8015f26:	f7ff ff7b 	bl	8015e20 <_realloc_r>
 8015f2a:	4606      	mov	r6, r0
 8015f2c:	2800      	cmp	r0, #0
 8015f2e:	d1e0      	bne.n	8015ef2 <__ssputs_r+0x5c>
 8015f30:	6921      	ldr	r1, [r4, #16]
 8015f32:	4650      	mov	r0, sl
 8015f34:	f7fe ff00 	bl	8014d38 <_free_r>
 8015f38:	230c      	movs	r3, #12
 8015f3a:	f8ca 3000 	str.w	r3, [sl]
 8015f3e:	89a3      	ldrh	r3, [r4, #12]
 8015f40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015f44:	81a3      	strh	r3, [r4, #12]
 8015f46:	f04f 30ff 	mov.w	r0, #4294967295
 8015f4a:	e7e9      	b.n	8015f20 <__ssputs_r+0x8a>

08015f4c <_svfiprintf_r>:
 8015f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f50:	4698      	mov	r8, r3
 8015f52:	898b      	ldrh	r3, [r1, #12]
 8015f54:	061b      	lsls	r3, r3, #24
 8015f56:	b09d      	sub	sp, #116	@ 0x74
 8015f58:	4607      	mov	r7, r0
 8015f5a:	460d      	mov	r5, r1
 8015f5c:	4614      	mov	r4, r2
 8015f5e:	d510      	bpl.n	8015f82 <_svfiprintf_r+0x36>
 8015f60:	690b      	ldr	r3, [r1, #16]
 8015f62:	b973      	cbnz	r3, 8015f82 <_svfiprintf_r+0x36>
 8015f64:	2140      	movs	r1, #64	@ 0x40
 8015f66:	f7fb fc37 	bl	80117d8 <_malloc_r>
 8015f6a:	6028      	str	r0, [r5, #0]
 8015f6c:	6128      	str	r0, [r5, #16]
 8015f6e:	b930      	cbnz	r0, 8015f7e <_svfiprintf_r+0x32>
 8015f70:	230c      	movs	r3, #12
 8015f72:	603b      	str	r3, [r7, #0]
 8015f74:	f04f 30ff 	mov.w	r0, #4294967295
 8015f78:	b01d      	add	sp, #116	@ 0x74
 8015f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f7e:	2340      	movs	r3, #64	@ 0x40
 8015f80:	616b      	str	r3, [r5, #20]
 8015f82:	2300      	movs	r3, #0
 8015f84:	9309      	str	r3, [sp, #36]	@ 0x24
 8015f86:	2320      	movs	r3, #32
 8015f88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015f8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015f90:	2330      	movs	r3, #48	@ 0x30
 8015f92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016130 <_svfiprintf_r+0x1e4>
 8015f96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015f9a:	f04f 0901 	mov.w	r9, #1
 8015f9e:	4623      	mov	r3, r4
 8015fa0:	469a      	mov	sl, r3
 8015fa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015fa6:	b10a      	cbz	r2, 8015fac <_svfiprintf_r+0x60>
 8015fa8:	2a25      	cmp	r2, #37	@ 0x25
 8015faa:	d1f9      	bne.n	8015fa0 <_svfiprintf_r+0x54>
 8015fac:	ebba 0b04 	subs.w	fp, sl, r4
 8015fb0:	d00b      	beq.n	8015fca <_svfiprintf_r+0x7e>
 8015fb2:	465b      	mov	r3, fp
 8015fb4:	4622      	mov	r2, r4
 8015fb6:	4629      	mov	r1, r5
 8015fb8:	4638      	mov	r0, r7
 8015fba:	f7ff ff6c 	bl	8015e96 <__ssputs_r>
 8015fbe:	3001      	adds	r0, #1
 8015fc0:	f000 80a7 	beq.w	8016112 <_svfiprintf_r+0x1c6>
 8015fc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015fc6:	445a      	add	r2, fp
 8015fc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8015fca:	f89a 3000 	ldrb.w	r3, [sl]
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	f000 809f 	beq.w	8016112 <_svfiprintf_r+0x1c6>
 8015fd4:	2300      	movs	r3, #0
 8015fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8015fda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015fde:	f10a 0a01 	add.w	sl, sl, #1
 8015fe2:	9304      	str	r3, [sp, #16]
 8015fe4:	9307      	str	r3, [sp, #28]
 8015fe6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015fea:	931a      	str	r3, [sp, #104]	@ 0x68
 8015fec:	4654      	mov	r4, sl
 8015fee:	2205      	movs	r2, #5
 8015ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ff4:	484e      	ldr	r0, [pc, #312]	@ (8016130 <_svfiprintf_r+0x1e4>)
 8015ff6:	f7ea f91b 	bl	8000230 <memchr>
 8015ffa:	9a04      	ldr	r2, [sp, #16]
 8015ffc:	b9d8      	cbnz	r0, 8016036 <_svfiprintf_r+0xea>
 8015ffe:	06d0      	lsls	r0, r2, #27
 8016000:	bf44      	itt	mi
 8016002:	2320      	movmi	r3, #32
 8016004:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016008:	0711      	lsls	r1, r2, #28
 801600a:	bf44      	itt	mi
 801600c:	232b      	movmi	r3, #43	@ 0x2b
 801600e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016012:	f89a 3000 	ldrb.w	r3, [sl]
 8016016:	2b2a      	cmp	r3, #42	@ 0x2a
 8016018:	d015      	beq.n	8016046 <_svfiprintf_r+0xfa>
 801601a:	9a07      	ldr	r2, [sp, #28]
 801601c:	4654      	mov	r4, sl
 801601e:	2000      	movs	r0, #0
 8016020:	f04f 0c0a 	mov.w	ip, #10
 8016024:	4621      	mov	r1, r4
 8016026:	f811 3b01 	ldrb.w	r3, [r1], #1
 801602a:	3b30      	subs	r3, #48	@ 0x30
 801602c:	2b09      	cmp	r3, #9
 801602e:	d94b      	bls.n	80160c8 <_svfiprintf_r+0x17c>
 8016030:	b1b0      	cbz	r0, 8016060 <_svfiprintf_r+0x114>
 8016032:	9207      	str	r2, [sp, #28]
 8016034:	e014      	b.n	8016060 <_svfiprintf_r+0x114>
 8016036:	eba0 0308 	sub.w	r3, r0, r8
 801603a:	fa09 f303 	lsl.w	r3, r9, r3
 801603e:	4313      	orrs	r3, r2
 8016040:	9304      	str	r3, [sp, #16]
 8016042:	46a2      	mov	sl, r4
 8016044:	e7d2      	b.n	8015fec <_svfiprintf_r+0xa0>
 8016046:	9b03      	ldr	r3, [sp, #12]
 8016048:	1d19      	adds	r1, r3, #4
 801604a:	681b      	ldr	r3, [r3, #0]
 801604c:	9103      	str	r1, [sp, #12]
 801604e:	2b00      	cmp	r3, #0
 8016050:	bfbb      	ittet	lt
 8016052:	425b      	neglt	r3, r3
 8016054:	f042 0202 	orrlt.w	r2, r2, #2
 8016058:	9307      	strge	r3, [sp, #28]
 801605a:	9307      	strlt	r3, [sp, #28]
 801605c:	bfb8      	it	lt
 801605e:	9204      	strlt	r2, [sp, #16]
 8016060:	7823      	ldrb	r3, [r4, #0]
 8016062:	2b2e      	cmp	r3, #46	@ 0x2e
 8016064:	d10a      	bne.n	801607c <_svfiprintf_r+0x130>
 8016066:	7863      	ldrb	r3, [r4, #1]
 8016068:	2b2a      	cmp	r3, #42	@ 0x2a
 801606a:	d132      	bne.n	80160d2 <_svfiprintf_r+0x186>
 801606c:	9b03      	ldr	r3, [sp, #12]
 801606e:	1d1a      	adds	r2, r3, #4
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	9203      	str	r2, [sp, #12]
 8016074:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016078:	3402      	adds	r4, #2
 801607a:	9305      	str	r3, [sp, #20]
 801607c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016140 <_svfiprintf_r+0x1f4>
 8016080:	7821      	ldrb	r1, [r4, #0]
 8016082:	2203      	movs	r2, #3
 8016084:	4650      	mov	r0, sl
 8016086:	f7ea f8d3 	bl	8000230 <memchr>
 801608a:	b138      	cbz	r0, 801609c <_svfiprintf_r+0x150>
 801608c:	9b04      	ldr	r3, [sp, #16]
 801608e:	eba0 000a 	sub.w	r0, r0, sl
 8016092:	2240      	movs	r2, #64	@ 0x40
 8016094:	4082      	lsls	r2, r0
 8016096:	4313      	orrs	r3, r2
 8016098:	3401      	adds	r4, #1
 801609a:	9304      	str	r3, [sp, #16]
 801609c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80160a0:	4824      	ldr	r0, [pc, #144]	@ (8016134 <_svfiprintf_r+0x1e8>)
 80160a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80160a6:	2206      	movs	r2, #6
 80160a8:	f7ea f8c2 	bl	8000230 <memchr>
 80160ac:	2800      	cmp	r0, #0
 80160ae:	d036      	beq.n	801611e <_svfiprintf_r+0x1d2>
 80160b0:	4b21      	ldr	r3, [pc, #132]	@ (8016138 <_svfiprintf_r+0x1ec>)
 80160b2:	bb1b      	cbnz	r3, 80160fc <_svfiprintf_r+0x1b0>
 80160b4:	9b03      	ldr	r3, [sp, #12]
 80160b6:	3307      	adds	r3, #7
 80160b8:	f023 0307 	bic.w	r3, r3, #7
 80160bc:	3308      	adds	r3, #8
 80160be:	9303      	str	r3, [sp, #12]
 80160c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80160c2:	4433      	add	r3, r6
 80160c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80160c6:	e76a      	b.n	8015f9e <_svfiprintf_r+0x52>
 80160c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80160cc:	460c      	mov	r4, r1
 80160ce:	2001      	movs	r0, #1
 80160d0:	e7a8      	b.n	8016024 <_svfiprintf_r+0xd8>
 80160d2:	2300      	movs	r3, #0
 80160d4:	3401      	adds	r4, #1
 80160d6:	9305      	str	r3, [sp, #20]
 80160d8:	4619      	mov	r1, r3
 80160da:	f04f 0c0a 	mov.w	ip, #10
 80160de:	4620      	mov	r0, r4
 80160e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80160e4:	3a30      	subs	r2, #48	@ 0x30
 80160e6:	2a09      	cmp	r2, #9
 80160e8:	d903      	bls.n	80160f2 <_svfiprintf_r+0x1a6>
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d0c6      	beq.n	801607c <_svfiprintf_r+0x130>
 80160ee:	9105      	str	r1, [sp, #20]
 80160f0:	e7c4      	b.n	801607c <_svfiprintf_r+0x130>
 80160f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80160f6:	4604      	mov	r4, r0
 80160f8:	2301      	movs	r3, #1
 80160fa:	e7f0      	b.n	80160de <_svfiprintf_r+0x192>
 80160fc:	ab03      	add	r3, sp, #12
 80160fe:	9300      	str	r3, [sp, #0]
 8016100:	462a      	mov	r2, r5
 8016102:	4b0e      	ldr	r3, [pc, #56]	@ (801613c <_svfiprintf_r+0x1f0>)
 8016104:	a904      	add	r1, sp, #16
 8016106:	4638      	mov	r0, r7
 8016108:	f7fc fbcc 	bl	80128a4 <_printf_float>
 801610c:	1c42      	adds	r2, r0, #1
 801610e:	4606      	mov	r6, r0
 8016110:	d1d6      	bne.n	80160c0 <_svfiprintf_r+0x174>
 8016112:	89ab      	ldrh	r3, [r5, #12]
 8016114:	065b      	lsls	r3, r3, #25
 8016116:	f53f af2d 	bmi.w	8015f74 <_svfiprintf_r+0x28>
 801611a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801611c:	e72c      	b.n	8015f78 <_svfiprintf_r+0x2c>
 801611e:	ab03      	add	r3, sp, #12
 8016120:	9300      	str	r3, [sp, #0]
 8016122:	462a      	mov	r2, r5
 8016124:	4b05      	ldr	r3, [pc, #20]	@ (801613c <_svfiprintf_r+0x1f0>)
 8016126:	a904      	add	r1, sp, #16
 8016128:	4638      	mov	r0, r7
 801612a:	f7fc fe53 	bl	8012dd4 <_printf_i>
 801612e:	e7ed      	b.n	801610c <_svfiprintf_r+0x1c0>
 8016130:	08018547 	.word	0x08018547
 8016134:	08018551 	.word	0x08018551
 8016138:	080128a5 	.word	0x080128a5
 801613c:	08015e97 	.word	0x08015e97
 8016140:	0801854d 	.word	0x0801854d

08016144 <__sfputc_r>:
 8016144:	6893      	ldr	r3, [r2, #8]
 8016146:	3b01      	subs	r3, #1
 8016148:	2b00      	cmp	r3, #0
 801614a:	b410      	push	{r4}
 801614c:	6093      	str	r3, [r2, #8]
 801614e:	da08      	bge.n	8016162 <__sfputc_r+0x1e>
 8016150:	6994      	ldr	r4, [r2, #24]
 8016152:	42a3      	cmp	r3, r4
 8016154:	db01      	blt.n	801615a <__sfputc_r+0x16>
 8016156:	290a      	cmp	r1, #10
 8016158:	d103      	bne.n	8016162 <__sfputc_r+0x1e>
 801615a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801615e:	f7fd bc8e 	b.w	8013a7e <__swbuf_r>
 8016162:	6813      	ldr	r3, [r2, #0]
 8016164:	1c58      	adds	r0, r3, #1
 8016166:	6010      	str	r0, [r2, #0]
 8016168:	7019      	strb	r1, [r3, #0]
 801616a:	4608      	mov	r0, r1
 801616c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016170:	4770      	bx	lr

08016172 <__sfputs_r>:
 8016172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016174:	4606      	mov	r6, r0
 8016176:	460f      	mov	r7, r1
 8016178:	4614      	mov	r4, r2
 801617a:	18d5      	adds	r5, r2, r3
 801617c:	42ac      	cmp	r4, r5
 801617e:	d101      	bne.n	8016184 <__sfputs_r+0x12>
 8016180:	2000      	movs	r0, #0
 8016182:	e007      	b.n	8016194 <__sfputs_r+0x22>
 8016184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016188:	463a      	mov	r2, r7
 801618a:	4630      	mov	r0, r6
 801618c:	f7ff ffda 	bl	8016144 <__sfputc_r>
 8016190:	1c43      	adds	r3, r0, #1
 8016192:	d1f3      	bne.n	801617c <__sfputs_r+0xa>
 8016194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016198 <_vfiprintf_r>:
 8016198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801619c:	460d      	mov	r5, r1
 801619e:	b09d      	sub	sp, #116	@ 0x74
 80161a0:	4614      	mov	r4, r2
 80161a2:	4698      	mov	r8, r3
 80161a4:	4606      	mov	r6, r0
 80161a6:	b118      	cbz	r0, 80161b0 <_vfiprintf_r+0x18>
 80161a8:	6a03      	ldr	r3, [r0, #32]
 80161aa:	b90b      	cbnz	r3, 80161b0 <_vfiprintf_r+0x18>
 80161ac:	f7fd fb3a 	bl	8013824 <__sinit>
 80161b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80161b2:	07d9      	lsls	r1, r3, #31
 80161b4:	d405      	bmi.n	80161c2 <_vfiprintf_r+0x2a>
 80161b6:	89ab      	ldrh	r3, [r5, #12]
 80161b8:	059a      	lsls	r2, r3, #22
 80161ba:	d402      	bmi.n	80161c2 <_vfiprintf_r+0x2a>
 80161bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80161be:	f7fd ff3b 	bl	8014038 <__retarget_lock_acquire_recursive>
 80161c2:	89ab      	ldrh	r3, [r5, #12]
 80161c4:	071b      	lsls	r3, r3, #28
 80161c6:	d501      	bpl.n	80161cc <_vfiprintf_r+0x34>
 80161c8:	692b      	ldr	r3, [r5, #16]
 80161ca:	b99b      	cbnz	r3, 80161f4 <_vfiprintf_r+0x5c>
 80161cc:	4629      	mov	r1, r5
 80161ce:	4630      	mov	r0, r6
 80161d0:	f7fd fc94 	bl	8013afc <__swsetup_r>
 80161d4:	b170      	cbz	r0, 80161f4 <_vfiprintf_r+0x5c>
 80161d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80161d8:	07dc      	lsls	r4, r3, #31
 80161da:	d504      	bpl.n	80161e6 <_vfiprintf_r+0x4e>
 80161dc:	f04f 30ff 	mov.w	r0, #4294967295
 80161e0:	b01d      	add	sp, #116	@ 0x74
 80161e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161e6:	89ab      	ldrh	r3, [r5, #12]
 80161e8:	0598      	lsls	r0, r3, #22
 80161ea:	d4f7      	bmi.n	80161dc <_vfiprintf_r+0x44>
 80161ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80161ee:	f7fd ff24 	bl	801403a <__retarget_lock_release_recursive>
 80161f2:	e7f3      	b.n	80161dc <_vfiprintf_r+0x44>
 80161f4:	2300      	movs	r3, #0
 80161f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80161f8:	2320      	movs	r3, #32
 80161fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80161fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8016202:	2330      	movs	r3, #48	@ 0x30
 8016204:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80163b4 <_vfiprintf_r+0x21c>
 8016208:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801620c:	f04f 0901 	mov.w	r9, #1
 8016210:	4623      	mov	r3, r4
 8016212:	469a      	mov	sl, r3
 8016214:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016218:	b10a      	cbz	r2, 801621e <_vfiprintf_r+0x86>
 801621a:	2a25      	cmp	r2, #37	@ 0x25
 801621c:	d1f9      	bne.n	8016212 <_vfiprintf_r+0x7a>
 801621e:	ebba 0b04 	subs.w	fp, sl, r4
 8016222:	d00b      	beq.n	801623c <_vfiprintf_r+0xa4>
 8016224:	465b      	mov	r3, fp
 8016226:	4622      	mov	r2, r4
 8016228:	4629      	mov	r1, r5
 801622a:	4630      	mov	r0, r6
 801622c:	f7ff ffa1 	bl	8016172 <__sfputs_r>
 8016230:	3001      	adds	r0, #1
 8016232:	f000 80a7 	beq.w	8016384 <_vfiprintf_r+0x1ec>
 8016236:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016238:	445a      	add	r2, fp
 801623a:	9209      	str	r2, [sp, #36]	@ 0x24
 801623c:	f89a 3000 	ldrb.w	r3, [sl]
 8016240:	2b00      	cmp	r3, #0
 8016242:	f000 809f 	beq.w	8016384 <_vfiprintf_r+0x1ec>
 8016246:	2300      	movs	r3, #0
 8016248:	f04f 32ff 	mov.w	r2, #4294967295
 801624c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016250:	f10a 0a01 	add.w	sl, sl, #1
 8016254:	9304      	str	r3, [sp, #16]
 8016256:	9307      	str	r3, [sp, #28]
 8016258:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801625c:	931a      	str	r3, [sp, #104]	@ 0x68
 801625e:	4654      	mov	r4, sl
 8016260:	2205      	movs	r2, #5
 8016262:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016266:	4853      	ldr	r0, [pc, #332]	@ (80163b4 <_vfiprintf_r+0x21c>)
 8016268:	f7e9 ffe2 	bl	8000230 <memchr>
 801626c:	9a04      	ldr	r2, [sp, #16]
 801626e:	b9d8      	cbnz	r0, 80162a8 <_vfiprintf_r+0x110>
 8016270:	06d1      	lsls	r1, r2, #27
 8016272:	bf44      	itt	mi
 8016274:	2320      	movmi	r3, #32
 8016276:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801627a:	0713      	lsls	r3, r2, #28
 801627c:	bf44      	itt	mi
 801627e:	232b      	movmi	r3, #43	@ 0x2b
 8016280:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016284:	f89a 3000 	ldrb.w	r3, [sl]
 8016288:	2b2a      	cmp	r3, #42	@ 0x2a
 801628a:	d015      	beq.n	80162b8 <_vfiprintf_r+0x120>
 801628c:	9a07      	ldr	r2, [sp, #28]
 801628e:	4654      	mov	r4, sl
 8016290:	2000      	movs	r0, #0
 8016292:	f04f 0c0a 	mov.w	ip, #10
 8016296:	4621      	mov	r1, r4
 8016298:	f811 3b01 	ldrb.w	r3, [r1], #1
 801629c:	3b30      	subs	r3, #48	@ 0x30
 801629e:	2b09      	cmp	r3, #9
 80162a0:	d94b      	bls.n	801633a <_vfiprintf_r+0x1a2>
 80162a2:	b1b0      	cbz	r0, 80162d2 <_vfiprintf_r+0x13a>
 80162a4:	9207      	str	r2, [sp, #28]
 80162a6:	e014      	b.n	80162d2 <_vfiprintf_r+0x13a>
 80162a8:	eba0 0308 	sub.w	r3, r0, r8
 80162ac:	fa09 f303 	lsl.w	r3, r9, r3
 80162b0:	4313      	orrs	r3, r2
 80162b2:	9304      	str	r3, [sp, #16]
 80162b4:	46a2      	mov	sl, r4
 80162b6:	e7d2      	b.n	801625e <_vfiprintf_r+0xc6>
 80162b8:	9b03      	ldr	r3, [sp, #12]
 80162ba:	1d19      	adds	r1, r3, #4
 80162bc:	681b      	ldr	r3, [r3, #0]
 80162be:	9103      	str	r1, [sp, #12]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	bfbb      	ittet	lt
 80162c4:	425b      	neglt	r3, r3
 80162c6:	f042 0202 	orrlt.w	r2, r2, #2
 80162ca:	9307      	strge	r3, [sp, #28]
 80162cc:	9307      	strlt	r3, [sp, #28]
 80162ce:	bfb8      	it	lt
 80162d0:	9204      	strlt	r2, [sp, #16]
 80162d2:	7823      	ldrb	r3, [r4, #0]
 80162d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80162d6:	d10a      	bne.n	80162ee <_vfiprintf_r+0x156>
 80162d8:	7863      	ldrb	r3, [r4, #1]
 80162da:	2b2a      	cmp	r3, #42	@ 0x2a
 80162dc:	d132      	bne.n	8016344 <_vfiprintf_r+0x1ac>
 80162de:	9b03      	ldr	r3, [sp, #12]
 80162e0:	1d1a      	adds	r2, r3, #4
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	9203      	str	r2, [sp, #12]
 80162e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80162ea:	3402      	adds	r4, #2
 80162ec:	9305      	str	r3, [sp, #20]
 80162ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80163c4 <_vfiprintf_r+0x22c>
 80162f2:	7821      	ldrb	r1, [r4, #0]
 80162f4:	2203      	movs	r2, #3
 80162f6:	4650      	mov	r0, sl
 80162f8:	f7e9 ff9a 	bl	8000230 <memchr>
 80162fc:	b138      	cbz	r0, 801630e <_vfiprintf_r+0x176>
 80162fe:	9b04      	ldr	r3, [sp, #16]
 8016300:	eba0 000a 	sub.w	r0, r0, sl
 8016304:	2240      	movs	r2, #64	@ 0x40
 8016306:	4082      	lsls	r2, r0
 8016308:	4313      	orrs	r3, r2
 801630a:	3401      	adds	r4, #1
 801630c:	9304      	str	r3, [sp, #16]
 801630e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016312:	4829      	ldr	r0, [pc, #164]	@ (80163b8 <_vfiprintf_r+0x220>)
 8016314:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016318:	2206      	movs	r2, #6
 801631a:	f7e9 ff89 	bl	8000230 <memchr>
 801631e:	2800      	cmp	r0, #0
 8016320:	d03f      	beq.n	80163a2 <_vfiprintf_r+0x20a>
 8016322:	4b26      	ldr	r3, [pc, #152]	@ (80163bc <_vfiprintf_r+0x224>)
 8016324:	bb1b      	cbnz	r3, 801636e <_vfiprintf_r+0x1d6>
 8016326:	9b03      	ldr	r3, [sp, #12]
 8016328:	3307      	adds	r3, #7
 801632a:	f023 0307 	bic.w	r3, r3, #7
 801632e:	3308      	adds	r3, #8
 8016330:	9303      	str	r3, [sp, #12]
 8016332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016334:	443b      	add	r3, r7
 8016336:	9309      	str	r3, [sp, #36]	@ 0x24
 8016338:	e76a      	b.n	8016210 <_vfiprintf_r+0x78>
 801633a:	fb0c 3202 	mla	r2, ip, r2, r3
 801633e:	460c      	mov	r4, r1
 8016340:	2001      	movs	r0, #1
 8016342:	e7a8      	b.n	8016296 <_vfiprintf_r+0xfe>
 8016344:	2300      	movs	r3, #0
 8016346:	3401      	adds	r4, #1
 8016348:	9305      	str	r3, [sp, #20]
 801634a:	4619      	mov	r1, r3
 801634c:	f04f 0c0a 	mov.w	ip, #10
 8016350:	4620      	mov	r0, r4
 8016352:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016356:	3a30      	subs	r2, #48	@ 0x30
 8016358:	2a09      	cmp	r2, #9
 801635a:	d903      	bls.n	8016364 <_vfiprintf_r+0x1cc>
 801635c:	2b00      	cmp	r3, #0
 801635e:	d0c6      	beq.n	80162ee <_vfiprintf_r+0x156>
 8016360:	9105      	str	r1, [sp, #20]
 8016362:	e7c4      	b.n	80162ee <_vfiprintf_r+0x156>
 8016364:	fb0c 2101 	mla	r1, ip, r1, r2
 8016368:	4604      	mov	r4, r0
 801636a:	2301      	movs	r3, #1
 801636c:	e7f0      	b.n	8016350 <_vfiprintf_r+0x1b8>
 801636e:	ab03      	add	r3, sp, #12
 8016370:	9300      	str	r3, [sp, #0]
 8016372:	462a      	mov	r2, r5
 8016374:	4b12      	ldr	r3, [pc, #72]	@ (80163c0 <_vfiprintf_r+0x228>)
 8016376:	a904      	add	r1, sp, #16
 8016378:	4630      	mov	r0, r6
 801637a:	f7fc fa93 	bl	80128a4 <_printf_float>
 801637e:	4607      	mov	r7, r0
 8016380:	1c78      	adds	r0, r7, #1
 8016382:	d1d6      	bne.n	8016332 <_vfiprintf_r+0x19a>
 8016384:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016386:	07d9      	lsls	r1, r3, #31
 8016388:	d405      	bmi.n	8016396 <_vfiprintf_r+0x1fe>
 801638a:	89ab      	ldrh	r3, [r5, #12]
 801638c:	059a      	lsls	r2, r3, #22
 801638e:	d402      	bmi.n	8016396 <_vfiprintf_r+0x1fe>
 8016390:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016392:	f7fd fe52 	bl	801403a <__retarget_lock_release_recursive>
 8016396:	89ab      	ldrh	r3, [r5, #12]
 8016398:	065b      	lsls	r3, r3, #25
 801639a:	f53f af1f 	bmi.w	80161dc <_vfiprintf_r+0x44>
 801639e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80163a0:	e71e      	b.n	80161e0 <_vfiprintf_r+0x48>
 80163a2:	ab03      	add	r3, sp, #12
 80163a4:	9300      	str	r3, [sp, #0]
 80163a6:	462a      	mov	r2, r5
 80163a8:	4b05      	ldr	r3, [pc, #20]	@ (80163c0 <_vfiprintf_r+0x228>)
 80163aa:	a904      	add	r1, sp, #16
 80163ac:	4630      	mov	r0, r6
 80163ae:	f7fc fd11 	bl	8012dd4 <_printf_i>
 80163b2:	e7e4      	b.n	801637e <_vfiprintf_r+0x1e6>
 80163b4:	08018547 	.word	0x08018547
 80163b8:	08018551 	.word	0x08018551
 80163bc:	080128a5 	.word	0x080128a5
 80163c0:	08016173 	.word	0x08016173
 80163c4:	0801854d 	.word	0x0801854d

080163c8 <_getc_r>:
 80163c8:	b538      	push	{r3, r4, r5, lr}
 80163ca:	460c      	mov	r4, r1
 80163cc:	4605      	mov	r5, r0
 80163ce:	b118      	cbz	r0, 80163d8 <_getc_r+0x10>
 80163d0:	6a03      	ldr	r3, [r0, #32]
 80163d2:	b90b      	cbnz	r3, 80163d8 <_getc_r+0x10>
 80163d4:	f7fd fa26 	bl	8013824 <__sinit>
 80163d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80163da:	07d8      	lsls	r0, r3, #31
 80163dc:	d405      	bmi.n	80163ea <_getc_r+0x22>
 80163de:	89a3      	ldrh	r3, [r4, #12]
 80163e0:	0599      	lsls	r1, r3, #22
 80163e2:	d402      	bmi.n	80163ea <_getc_r+0x22>
 80163e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80163e6:	f7fd fe27 	bl	8014038 <__retarget_lock_acquire_recursive>
 80163ea:	6863      	ldr	r3, [r4, #4]
 80163ec:	3b01      	subs	r3, #1
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	6063      	str	r3, [r4, #4]
 80163f2:	da0f      	bge.n	8016414 <_getc_r+0x4c>
 80163f4:	4628      	mov	r0, r5
 80163f6:	4621      	mov	r1, r4
 80163f8:	f000 f8a7 	bl	801654a <__srget_r>
 80163fc:	4605      	mov	r5, r0
 80163fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016400:	07da      	lsls	r2, r3, #31
 8016402:	d405      	bmi.n	8016410 <_getc_r+0x48>
 8016404:	89a3      	ldrh	r3, [r4, #12]
 8016406:	059b      	lsls	r3, r3, #22
 8016408:	d402      	bmi.n	8016410 <_getc_r+0x48>
 801640a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801640c:	f7fd fe15 	bl	801403a <__retarget_lock_release_recursive>
 8016410:	4628      	mov	r0, r5
 8016412:	bd38      	pop	{r3, r4, r5, pc}
 8016414:	6823      	ldr	r3, [r4, #0]
 8016416:	1c5a      	adds	r2, r3, #1
 8016418:	6022      	str	r2, [r4, #0]
 801641a:	781d      	ldrb	r5, [r3, #0]
 801641c:	e7ef      	b.n	80163fe <_getc_r+0x36>

0801641e <__swhatbuf_r>:
 801641e:	b570      	push	{r4, r5, r6, lr}
 8016420:	460c      	mov	r4, r1
 8016422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016426:	2900      	cmp	r1, #0
 8016428:	b096      	sub	sp, #88	@ 0x58
 801642a:	4615      	mov	r5, r2
 801642c:	461e      	mov	r6, r3
 801642e:	da0d      	bge.n	801644c <__swhatbuf_r+0x2e>
 8016430:	89a3      	ldrh	r3, [r4, #12]
 8016432:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016436:	f04f 0100 	mov.w	r1, #0
 801643a:	bf14      	ite	ne
 801643c:	2340      	movne	r3, #64	@ 0x40
 801643e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016442:	2000      	movs	r0, #0
 8016444:	6031      	str	r1, [r6, #0]
 8016446:	602b      	str	r3, [r5, #0]
 8016448:	b016      	add	sp, #88	@ 0x58
 801644a:	bd70      	pop	{r4, r5, r6, pc}
 801644c:	466a      	mov	r2, sp
 801644e:	f000 f8df 	bl	8016610 <_fstat_r>
 8016452:	2800      	cmp	r0, #0
 8016454:	dbec      	blt.n	8016430 <__swhatbuf_r+0x12>
 8016456:	9901      	ldr	r1, [sp, #4]
 8016458:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801645c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016460:	4259      	negs	r1, r3
 8016462:	4159      	adcs	r1, r3
 8016464:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016468:	e7eb      	b.n	8016442 <__swhatbuf_r+0x24>

0801646a <__smakebuf_r>:
 801646a:	898b      	ldrh	r3, [r1, #12]
 801646c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801646e:	079d      	lsls	r5, r3, #30
 8016470:	4606      	mov	r6, r0
 8016472:	460c      	mov	r4, r1
 8016474:	d507      	bpl.n	8016486 <__smakebuf_r+0x1c>
 8016476:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801647a:	6023      	str	r3, [r4, #0]
 801647c:	6123      	str	r3, [r4, #16]
 801647e:	2301      	movs	r3, #1
 8016480:	6163      	str	r3, [r4, #20]
 8016482:	b003      	add	sp, #12
 8016484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016486:	ab01      	add	r3, sp, #4
 8016488:	466a      	mov	r2, sp
 801648a:	f7ff ffc8 	bl	801641e <__swhatbuf_r>
 801648e:	9f00      	ldr	r7, [sp, #0]
 8016490:	4605      	mov	r5, r0
 8016492:	4639      	mov	r1, r7
 8016494:	4630      	mov	r0, r6
 8016496:	f7fb f99f 	bl	80117d8 <_malloc_r>
 801649a:	b948      	cbnz	r0, 80164b0 <__smakebuf_r+0x46>
 801649c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80164a0:	059a      	lsls	r2, r3, #22
 80164a2:	d4ee      	bmi.n	8016482 <__smakebuf_r+0x18>
 80164a4:	f023 0303 	bic.w	r3, r3, #3
 80164a8:	f043 0302 	orr.w	r3, r3, #2
 80164ac:	81a3      	strh	r3, [r4, #12]
 80164ae:	e7e2      	b.n	8016476 <__smakebuf_r+0xc>
 80164b0:	89a3      	ldrh	r3, [r4, #12]
 80164b2:	6020      	str	r0, [r4, #0]
 80164b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80164b8:	81a3      	strh	r3, [r4, #12]
 80164ba:	9b01      	ldr	r3, [sp, #4]
 80164bc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80164c0:	b15b      	cbz	r3, 80164da <__smakebuf_r+0x70>
 80164c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80164c6:	4630      	mov	r0, r6
 80164c8:	f000 f8b4 	bl	8016634 <_isatty_r>
 80164cc:	b128      	cbz	r0, 80164da <__smakebuf_r+0x70>
 80164ce:	89a3      	ldrh	r3, [r4, #12]
 80164d0:	f023 0303 	bic.w	r3, r3, #3
 80164d4:	f043 0301 	orr.w	r3, r3, #1
 80164d8:	81a3      	strh	r3, [r4, #12]
 80164da:	89a3      	ldrh	r3, [r4, #12]
 80164dc:	431d      	orrs	r5, r3
 80164de:	81a5      	strh	r5, [r4, #12]
 80164e0:	e7cf      	b.n	8016482 <__smakebuf_r+0x18>

080164e2 <_putc_r>:
 80164e2:	b570      	push	{r4, r5, r6, lr}
 80164e4:	460d      	mov	r5, r1
 80164e6:	4614      	mov	r4, r2
 80164e8:	4606      	mov	r6, r0
 80164ea:	b118      	cbz	r0, 80164f4 <_putc_r+0x12>
 80164ec:	6a03      	ldr	r3, [r0, #32]
 80164ee:	b90b      	cbnz	r3, 80164f4 <_putc_r+0x12>
 80164f0:	f7fd f998 	bl	8013824 <__sinit>
 80164f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80164f6:	07d8      	lsls	r0, r3, #31
 80164f8:	d405      	bmi.n	8016506 <_putc_r+0x24>
 80164fa:	89a3      	ldrh	r3, [r4, #12]
 80164fc:	0599      	lsls	r1, r3, #22
 80164fe:	d402      	bmi.n	8016506 <_putc_r+0x24>
 8016500:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016502:	f7fd fd99 	bl	8014038 <__retarget_lock_acquire_recursive>
 8016506:	68a3      	ldr	r3, [r4, #8]
 8016508:	3b01      	subs	r3, #1
 801650a:	2b00      	cmp	r3, #0
 801650c:	60a3      	str	r3, [r4, #8]
 801650e:	da05      	bge.n	801651c <_putc_r+0x3a>
 8016510:	69a2      	ldr	r2, [r4, #24]
 8016512:	4293      	cmp	r3, r2
 8016514:	db12      	blt.n	801653c <_putc_r+0x5a>
 8016516:	b2eb      	uxtb	r3, r5
 8016518:	2b0a      	cmp	r3, #10
 801651a:	d00f      	beq.n	801653c <_putc_r+0x5a>
 801651c:	6823      	ldr	r3, [r4, #0]
 801651e:	1c5a      	adds	r2, r3, #1
 8016520:	6022      	str	r2, [r4, #0]
 8016522:	701d      	strb	r5, [r3, #0]
 8016524:	b2ed      	uxtb	r5, r5
 8016526:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016528:	07da      	lsls	r2, r3, #31
 801652a:	d405      	bmi.n	8016538 <_putc_r+0x56>
 801652c:	89a3      	ldrh	r3, [r4, #12]
 801652e:	059b      	lsls	r3, r3, #22
 8016530:	d402      	bmi.n	8016538 <_putc_r+0x56>
 8016532:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016534:	f7fd fd81 	bl	801403a <__retarget_lock_release_recursive>
 8016538:	4628      	mov	r0, r5
 801653a:	bd70      	pop	{r4, r5, r6, pc}
 801653c:	4629      	mov	r1, r5
 801653e:	4622      	mov	r2, r4
 8016540:	4630      	mov	r0, r6
 8016542:	f7fd fa9c 	bl	8013a7e <__swbuf_r>
 8016546:	4605      	mov	r5, r0
 8016548:	e7ed      	b.n	8016526 <_putc_r+0x44>

0801654a <__srget_r>:
 801654a:	b538      	push	{r3, r4, r5, lr}
 801654c:	460c      	mov	r4, r1
 801654e:	4605      	mov	r5, r0
 8016550:	b118      	cbz	r0, 801655a <__srget_r+0x10>
 8016552:	6a03      	ldr	r3, [r0, #32]
 8016554:	b90b      	cbnz	r3, 801655a <__srget_r+0x10>
 8016556:	f7fd f965 	bl	8013824 <__sinit>
 801655a:	4621      	mov	r1, r4
 801655c:	4628      	mov	r0, r5
 801655e:	f000 f8a3 	bl	80166a8 <__srefill_r>
 8016562:	b938      	cbnz	r0, 8016574 <__srget_r+0x2a>
 8016564:	6863      	ldr	r3, [r4, #4]
 8016566:	3b01      	subs	r3, #1
 8016568:	6063      	str	r3, [r4, #4]
 801656a:	6823      	ldr	r3, [r4, #0]
 801656c:	1c5a      	adds	r2, r3, #1
 801656e:	6022      	str	r2, [r4, #0]
 8016570:	7818      	ldrb	r0, [r3, #0]
 8016572:	bd38      	pop	{r3, r4, r5, pc}
 8016574:	f04f 30ff 	mov.w	r0, #4294967295
 8016578:	e7fb      	b.n	8016572 <__srget_r+0x28>

0801657a <memmove>:
 801657a:	4288      	cmp	r0, r1
 801657c:	b510      	push	{r4, lr}
 801657e:	eb01 0402 	add.w	r4, r1, r2
 8016582:	d902      	bls.n	801658a <memmove+0x10>
 8016584:	4284      	cmp	r4, r0
 8016586:	4623      	mov	r3, r4
 8016588:	d807      	bhi.n	801659a <memmove+0x20>
 801658a:	1e43      	subs	r3, r0, #1
 801658c:	42a1      	cmp	r1, r4
 801658e:	d008      	beq.n	80165a2 <memmove+0x28>
 8016590:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016594:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016598:	e7f8      	b.n	801658c <memmove+0x12>
 801659a:	4402      	add	r2, r0
 801659c:	4601      	mov	r1, r0
 801659e:	428a      	cmp	r2, r1
 80165a0:	d100      	bne.n	80165a4 <memmove+0x2a>
 80165a2:	bd10      	pop	{r4, pc}
 80165a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80165a8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80165ac:	e7f7      	b.n	801659e <memmove+0x24>

080165ae <_raise_r>:
 80165ae:	291f      	cmp	r1, #31
 80165b0:	b538      	push	{r3, r4, r5, lr}
 80165b2:	4605      	mov	r5, r0
 80165b4:	460c      	mov	r4, r1
 80165b6:	d904      	bls.n	80165c2 <_raise_r+0x14>
 80165b8:	2316      	movs	r3, #22
 80165ba:	6003      	str	r3, [r0, #0]
 80165bc:	f04f 30ff 	mov.w	r0, #4294967295
 80165c0:	bd38      	pop	{r3, r4, r5, pc}
 80165c2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80165c4:	b112      	cbz	r2, 80165cc <_raise_r+0x1e>
 80165c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80165ca:	b94b      	cbnz	r3, 80165e0 <_raise_r+0x32>
 80165cc:	4628      	mov	r0, r5
 80165ce:	f000 f853 	bl	8016678 <_getpid_r>
 80165d2:	4622      	mov	r2, r4
 80165d4:	4601      	mov	r1, r0
 80165d6:	4628      	mov	r0, r5
 80165d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80165dc:	f000 b83a 	b.w	8016654 <_kill_r>
 80165e0:	2b01      	cmp	r3, #1
 80165e2:	d00a      	beq.n	80165fa <_raise_r+0x4c>
 80165e4:	1c59      	adds	r1, r3, #1
 80165e6:	d103      	bne.n	80165f0 <_raise_r+0x42>
 80165e8:	2316      	movs	r3, #22
 80165ea:	6003      	str	r3, [r0, #0]
 80165ec:	2001      	movs	r0, #1
 80165ee:	e7e7      	b.n	80165c0 <_raise_r+0x12>
 80165f0:	2100      	movs	r1, #0
 80165f2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80165f6:	4620      	mov	r0, r4
 80165f8:	4798      	blx	r3
 80165fa:	2000      	movs	r0, #0
 80165fc:	e7e0      	b.n	80165c0 <_raise_r+0x12>
	...

08016600 <raise>:
 8016600:	4b02      	ldr	r3, [pc, #8]	@ (801660c <raise+0xc>)
 8016602:	4601      	mov	r1, r0
 8016604:	6818      	ldr	r0, [r3, #0]
 8016606:	f7ff bfd2 	b.w	80165ae <_raise_r>
 801660a:	bf00      	nop
 801660c:	200001d4 	.word	0x200001d4

08016610 <_fstat_r>:
 8016610:	b538      	push	{r3, r4, r5, lr}
 8016612:	4d07      	ldr	r5, [pc, #28]	@ (8016630 <_fstat_r+0x20>)
 8016614:	2300      	movs	r3, #0
 8016616:	4604      	mov	r4, r0
 8016618:	4608      	mov	r0, r1
 801661a:	4611      	mov	r1, r2
 801661c:	602b      	str	r3, [r5, #0]
 801661e:	f7ef fd81 	bl	8006124 <_fstat>
 8016622:	1c43      	adds	r3, r0, #1
 8016624:	d102      	bne.n	801662c <_fstat_r+0x1c>
 8016626:	682b      	ldr	r3, [r5, #0]
 8016628:	b103      	cbz	r3, 801662c <_fstat_r+0x1c>
 801662a:	6023      	str	r3, [r4, #0]
 801662c:	bd38      	pop	{r3, r4, r5, pc}
 801662e:	bf00      	nop
 8016630:	20000790 	.word	0x20000790

08016634 <_isatty_r>:
 8016634:	b538      	push	{r3, r4, r5, lr}
 8016636:	4d06      	ldr	r5, [pc, #24]	@ (8016650 <_isatty_r+0x1c>)
 8016638:	2300      	movs	r3, #0
 801663a:	4604      	mov	r4, r0
 801663c:	4608      	mov	r0, r1
 801663e:	602b      	str	r3, [r5, #0]
 8016640:	f7ef fd97 	bl	8006172 <_isatty>
 8016644:	1c43      	adds	r3, r0, #1
 8016646:	d102      	bne.n	801664e <_isatty_r+0x1a>
 8016648:	682b      	ldr	r3, [r5, #0]
 801664a:	b103      	cbz	r3, 801664e <_isatty_r+0x1a>
 801664c:	6023      	str	r3, [r4, #0]
 801664e:	bd38      	pop	{r3, r4, r5, pc}
 8016650:	20000790 	.word	0x20000790

08016654 <_kill_r>:
 8016654:	b538      	push	{r3, r4, r5, lr}
 8016656:	4d07      	ldr	r5, [pc, #28]	@ (8016674 <_kill_r+0x20>)
 8016658:	2300      	movs	r3, #0
 801665a:	4604      	mov	r4, r0
 801665c:	4608      	mov	r0, r1
 801665e:	4611      	mov	r1, r2
 8016660:	602b      	str	r3, [r5, #0]
 8016662:	f7ef fc77 	bl	8005f54 <_kill>
 8016666:	1c43      	adds	r3, r0, #1
 8016668:	d102      	bne.n	8016670 <_kill_r+0x1c>
 801666a:	682b      	ldr	r3, [r5, #0]
 801666c:	b103      	cbz	r3, 8016670 <_kill_r+0x1c>
 801666e:	6023      	str	r3, [r4, #0]
 8016670:	bd38      	pop	{r3, r4, r5, pc}
 8016672:	bf00      	nop
 8016674:	20000790 	.word	0x20000790

08016678 <_getpid_r>:
 8016678:	f7ef bc64 	b.w	8005f44 <_getpid>

0801667c <_malloc_usable_size_r>:
 801667c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016680:	1f18      	subs	r0, r3, #4
 8016682:	2b00      	cmp	r3, #0
 8016684:	bfbc      	itt	lt
 8016686:	580b      	ldrlt	r3, [r1, r0]
 8016688:	18c0      	addlt	r0, r0, r3
 801668a:	4770      	bx	lr

0801668c <lflush>:
 801668c:	898b      	ldrh	r3, [r1, #12]
 801668e:	f003 0309 	and.w	r3, r3, #9
 8016692:	2b09      	cmp	r3, #9
 8016694:	d103      	bne.n	801669e <lflush+0x12>
 8016696:	4b03      	ldr	r3, [pc, #12]	@ (80166a4 <lflush+0x18>)
 8016698:	6818      	ldr	r0, [r3, #0]
 801669a:	f7fc bfa9 	b.w	80135f0 <_fflush_r>
 801669e:	2000      	movs	r0, #0
 80166a0:	4770      	bx	lr
 80166a2:	bf00      	nop
 80166a4:	200001d4 	.word	0x200001d4

080166a8 <__srefill_r>:
 80166a8:	b570      	push	{r4, r5, r6, lr}
 80166aa:	460c      	mov	r4, r1
 80166ac:	4605      	mov	r5, r0
 80166ae:	b118      	cbz	r0, 80166b8 <__srefill_r+0x10>
 80166b0:	6a03      	ldr	r3, [r0, #32]
 80166b2:	b90b      	cbnz	r3, 80166b8 <__srefill_r+0x10>
 80166b4:	f7fd f8b6 	bl	8013824 <__sinit>
 80166b8:	2300      	movs	r3, #0
 80166ba:	6063      	str	r3, [r4, #4]
 80166bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80166c0:	069e      	lsls	r6, r3, #26
 80166c2:	d408      	bmi.n	80166d6 <__srefill_r+0x2e>
 80166c4:	0758      	lsls	r0, r3, #29
 80166c6:	d445      	bmi.n	8016754 <__srefill_r+0xac>
 80166c8:	06d9      	lsls	r1, r3, #27
 80166ca:	d407      	bmi.n	80166dc <__srefill_r+0x34>
 80166cc:	2209      	movs	r2, #9
 80166ce:	602a      	str	r2, [r5, #0]
 80166d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80166d4:	81a3      	strh	r3, [r4, #12]
 80166d6:	f04f 30ff 	mov.w	r0, #4294967295
 80166da:	bd70      	pop	{r4, r5, r6, pc}
 80166dc:	071a      	lsls	r2, r3, #28
 80166de:	d50b      	bpl.n	80166f8 <__srefill_r+0x50>
 80166e0:	4621      	mov	r1, r4
 80166e2:	4628      	mov	r0, r5
 80166e4:	f7fc ff84 	bl	80135f0 <_fflush_r>
 80166e8:	2800      	cmp	r0, #0
 80166ea:	d1f4      	bne.n	80166d6 <__srefill_r+0x2e>
 80166ec:	89a3      	ldrh	r3, [r4, #12]
 80166ee:	60a0      	str	r0, [r4, #8]
 80166f0:	f023 0308 	bic.w	r3, r3, #8
 80166f4:	81a3      	strh	r3, [r4, #12]
 80166f6:	61a0      	str	r0, [r4, #24]
 80166f8:	89a3      	ldrh	r3, [r4, #12]
 80166fa:	f043 0304 	orr.w	r3, r3, #4
 80166fe:	81a3      	strh	r3, [r4, #12]
 8016700:	6923      	ldr	r3, [r4, #16]
 8016702:	b91b      	cbnz	r3, 801670c <__srefill_r+0x64>
 8016704:	4621      	mov	r1, r4
 8016706:	4628      	mov	r0, r5
 8016708:	f7ff feaf 	bl	801646a <__smakebuf_r>
 801670c:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8016710:	07b3      	lsls	r3, r6, #30
 8016712:	d00f      	beq.n	8016734 <__srefill_r+0x8c>
 8016714:	2301      	movs	r3, #1
 8016716:	4a1b      	ldr	r2, [pc, #108]	@ (8016784 <__srefill_r+0xdc>)
 8016718:	491b      	ldr	r1, [pc, #108]	@ (8016788 <__srefill_r+0xe0>)
 801671a:	481c      	ldr	r0, [pc, #112]	@ (801678c <__srefill_r+0xe4>)
 801671c:	81a3      	strh	r3, [r4, #12]
 801671e:	f7fd f8ab 	bl	8013878 <_fwalk_sglue>
 8016722:	81a6      	strh	r6, [r4, #12]
 8016724:	f006 0609 	and.w	r6, r6, #9
 8016728:	2e09      	cmp	r6, #9
 801672a:	d103      	bne.n	8016734 <__srefill_r+0x8c>
 801672c:	4621      	mov	r1, r4
 801672e:	4628      	mov	r0, r5
 8016730:	f7fc feda 	bl	80134e8 <__sflush_r>
 8016734:	6922      	ldr	r2, [r4, #16]
 8016736:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8016738:	6963      	ldr	r3, [r4, #20]
 801673a:	6a21      	ldr	r1, [r4, #32]
 801673c:	6022      	str	r2, [r4, #0]
 801673e:	4628      	mov	r0, r5
 8016740:	47b0      	blx	r6
 8016742:	2800      	cmp	r0, #0
 8016744:	6060      	str	r0, [r4, #4]
 8016746:	dc17      	bgt.n	8016778 <__srefill_r+0xd0>
 8016748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801674c:	d116      	bne.n	801677c <__srefill_r+0xd4>
 801674e:	f043 0320 	orr.w	r3, r3, #32
 8016752:	e7bf      	b.n	80166d4 <__srefill_r+0x2c>
 8016754:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016756:	2900      	cmp	r1, #0
 8016758:	d0d2      	beq.n	8016700 <__srefill_r+0x58>
 801675a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801675e:	4299      	cmp	r1, r3
 8016760:	d002      	beq.n	8016768 <__srefill_r+0xc0>
 8016762:	4628      	mov	r0, r5
 8016764:	f7fe fae8 	bl	8014d38 <_free_r>
 8016768:	2300      	movs	r3, #0
 801676a:	6363      	str	r3, [r4, #52]	@ 0x34
 801676c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801676e:	6063      	str	r3, [r4, #4]
 8016770:	2b00      	cmp	r3, #0
 8016772:	d0c5      	beq.n	8016700 <__srefill_r+0x58>
 8016774:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8016776:	6023      	str	r3, [r4, #0]
 8016778:	2000      	movs	r0, #0
 801677a:	e7ae      	b.n	80166da <__srefill_r+0x32>
 801677c:	2200      	movs	r2, #0
 801677e:	6062      	str	r2, [r4, #4]
 8016780:	e7a6      	b.n	80166d0 <__srefill_r+0x28>
 8016782:	bf00      	nop
 8016784:	2000005c 	.word	0x2000005c
 8016788:	0801668d 	.word	0x0801668d
 801678c:	200001d8 	.word	0x200001d8

08016790 <_init>:
 8016790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016792:	bf00      	nop
 8016794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016796:	bc08      	pop	{r3}
 8016798:	469e      	mov	lr, r3
 801679a:	4770      	bx	lr

0801679c <_fini>:
 801679c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801679e:	bf00      	nop
 80167a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80167a2:	bc08      	pop	{r3}
 80167a4:	469e      	mov	lr, r3
 80167a6:	4770      	bx	lr
