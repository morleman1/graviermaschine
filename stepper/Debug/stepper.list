
stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017188  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002338  08017358  08017358  00018358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019690  08019690  0001b224  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08019690  08019690  0001a690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019698  08019698  0001b224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08019698  08019698  0001a698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080196a0  080196a0  0001a6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000224  20000000  080196a4  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c4  20000224  080198c8  0001b224  2**2
                  ALLOC
 10 ._user_heap_stack 00038000  200007e8  080198c8  0001b7e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e585  00000000  00000000  0001b254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042ab  00000000  00000000  000397d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c0  00000000  00000000  0003da88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013bb  00000000  00000000  0003f348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b608  00000000  00000000  00040703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024628  00000000  00000000  0006bd0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010bb84  00000000  00000000  00090333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019beb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008374  00000000  00000000  0019befc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  001a4270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000224 	.word	0x20000224
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08017340 	.word	0x08017340

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000228 	.word	0x20000228
 800020c:	08017340 	.word	0x08017340

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9be 	b.w	800107c <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	468e      	mov	lr, r1
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	4688      	mov	r8, r1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d14a      	bne.n	8000e2a <__udivmoddi4+0xa6>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4617      	mov	r7, r2
 8000d98:	d962      	bls.n	8000e60 <__udivmoddi4+0xdc>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	b14e      	cbz	r6, 8000db4 <__udivmoddi4+0x30>
 8000da0:	f1c6 0320 	rsb	r3, r6, #32
 8000da4:	fa01 f806 	lsl.w	r8, r1, r6
 8000da8:	fa20 f303 	lsr.w	r3, r0, r3
 8000dac:	40b7      	lsls	r7, r6
 8000dae:	ea43 0808 	orr.w	r8, r3, r8
 8000db2:	40b4      	lsls	r4, r6
 8000db4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000dc0:	0c23      	lsrs	r3, r4, #16
 8000dc2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dca:	fb01 f20c 	mul.w	r2, r1, ip
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x62>
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dd8:	f080 80ea 	bcs.w	8000fb0 <__udivmoddi4+0x22c>
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	f240 80e7 	bls.w	8000fb0 <__udivmoddi4+0x22c>
 8000de2:	3902      	subs	r1, #2
 8000de4:	443b      	add	r3, r7
 8000de6:	1a9a      	subs	r2, r3, r2
 8000de8:	b2a3      	uxth	r3, r4
 8000dea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000df2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000df6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dfa:	459c      	cmp	ip, r3
 8000dfc:	d909      	bls.n	8000e12 <__udivmoddi4+0x8e>
 8000dfe:	18fb      	adds	r3, r7, r3
 8000e00:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e04:	f080 80d6 	bcs.w	8000fb4 <__udivmoddi4+0x230>
 8000e08:	459c      	cmp	ip, r3
 8000e0a:	f240 80d3 	bls.w	8000fb4 <__udivmoddi4+0x230>
 8000e0e:	443b      	add	r3, r7
 8000e10:	3802      	subs	r0, #2
 8000e12:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e16:	eba3 030c 	sub.w	r3, r3, ip
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	b11d      	cbz	r5, 8000e26 <__udivmoddi4+0xa2>
 8000e1e:	40f3      	lsrs	r3, r6
 8000e20:	2200      	movs	r2, #0
 8000e22:	e9c5 3200 	strd	r3, r2, [r5]
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d905      	bls.n	8000e3a <__udivmoddi4+0xb6>
 8000e2e:	b10d      	cbz	r5, 8000e34 <__udivmoddi4+0xb0>
 8000e30:	e9c5 0100 	strd	r0, r1, [r5]
 8000e34:	2100      	movs	r1, #0
 8000e36:	4608      	mov	r0, r1
 8000e38:	e7f5      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e3a:	fab3 f183 	clz	r1, r3
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d146      	bne.n	8000ed0 <__udivmoddi4+0x14c>
 8000e42:	4573      	cmp	r3, lr
 8000e44:	d302      	bcc.n	8000e4c <__udivmoddi4+0xc8>
 8000e46:	4282      	cmp	r2, r0
 8000e48:	f200 8105 	bhi.w	8001056 <__udivmoddi4+0x2d2>
 8000e4c:	1a84      	subs	r4, r0, r2
 8000e4e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e52:	2001      	movs	r0, #1
 8000e54:	4690      	mov	r8, r2
 8000e56:	2d00      	cmp	r5, #0
 8000e58:	d0e5      	beq.n	8000e26 <__udivmoddi4+0xa2>
 8000e5a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e5e:	e7e2      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	f000 8090 	beq.w	8000f86 <__udivmoddi4+0x202>
 8000e66:	fab2 f682 	clz	r6, r2
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	f040 80a4 	bne.w	8000fb8 <__udivmoddi4+0x234>
 8000e70:	1a8a      	subs	r2, r1, r2
 8000e72:	0c03      	lsrs	r3, r0, #16
 8000e74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e78:	b280      	uxth	r0, r0
 8000e7a:	b2bc      	uxth	r4, r7
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e82:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e8a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d907      	bls.n	8000ea2 <__udivmoddi4+0x11e>
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x11c>
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	f200 80e0 	bhi.w	8001060 <__udivmoddi4+0x2dc>
 8000ea0:	46c4      	mov	ip, r8
 8000ea2:	1a9b      	subs	r3, r3, r2
 8000ea4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ea8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000eac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000eb0:	fb02 f404 	mul.w	r4, r2, r4
 8000eb4:	429c      	cmp	r4, r3
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0x144>
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	f102 30ff 	add.w	r0, r2, #4294967295
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0x142>
 8000ec0:	429c      	cmp	r4, r3
 8000ec2:	f200 80ca 	bhi.w	800105a <__udivmoddi4+0x2d6>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	1b1b      	subs	r3, r3, r4
 8000eca:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ece:	e7a5      	b.n	8000e1c <__udivmoddi4+0x98>
 8000ed0:	f1c1 0620 	rsb	r6, r1, #32
 8000ed4:	408b      	lsls	r3, r1
 8000ed6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eda:	431f      	orrs	r7, r3
 8000edc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ee0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ee4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ee8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eec:	4323      	orrs	r3, r4
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	fa1f fc87 	uxth.w	ip, r7
 8000ef6:	fbbe f0f9 	udiv	r0, lr, r9
 8000efa:	0c1c      	lsrs	r4, r3, #16
 8000efc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f00:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f04:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f0e:	d909      	bls.n	8000f24 <__udivmoddi4+0x1a0>
 8000f10:	193c      	adds	r4, r7, r4
 8000f12:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f16:	f080 809c 	bcs.w	8001052 <__udivmoddi4+0x2ce>
 8000f1a:	45a6      	cmp	lr, r4
 8000f1c:	f240 8099 	bls.w	8001052 <__udivmoddi4+0x2ce>
 8000f20:	3802      	subs	r0, #2
 8000f22:	443c      	add	r4, r7
 8000f24:	eba4 040e 	sub.w	r4, r4, lr
 8000f28:	fa1f fe83 	uxth.w	lr, r3
 8000f2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f30:	fb09 4413 	mls	r4, r9, r3, r4
 8000f34:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f38:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f3c:	45a4      	cmp	ip, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1ce>
 8000f40:	193c      	adds	r4, r7, r4
 8000f42:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f46:	f080 8082 	bcs.w	800104e <__udivmoddi4+0x2ca>
 8000f4a:	45a4      	cmp	ip, r4
 8000f4c:	d97f      	bls.n	800104e <__udivmoddi4+0x2ca>
 8000f4e:	3b02      	subs	r3, #2
 8000f50:	443c      	add	r4, r7
 8000f52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f56:	eba4 040c 	sub.w	r4, r4, ip
 8000f5a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f5e:	4564      	cmp	r4, ip
 8000f60:	4673      	mov	r3, lr
 8000f62:	46e1      	mov	r9, ip
 8000f64:	d362      	bcc.n	800102c <__udivmoddi4+0x2a8>
 8000f66:	d05f      	beq.n	8001028 <__udivmoddi4+0x2a4>
 8000f68:	b15d      	cbz	r5, 8000f82 <__udivmoddi4+0x1fe>
 8000f6a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f6e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f72:	fa04 f606 	lsl.w	r6, r4, r6
 8000f76:	fa22 f301 	lsr.w	r3, r2, r1
 8000f7a:	431e      	orrs	r6, r3
 8000f7c:	40cc      	lsrs	r4, r1
 8000f7e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f82:	2100      	movs	r1, #0
 8000f84:	e74f      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000f86:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f8a:	0c01      	lsrs	r1, r0, #16
 8000f8c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f90:	b280      	uxth	r0, r0
 8000f92:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f96:	463b      	mov	r3, r7
 8000f98:	4638      	mov	r0, r7
 8000f9a:	463c      	mov	r4, r7
 8000f9c:	46b8      	mov	r8, r7
 8000f9e:	46be      	mov	lr, r7
 8000fa0:	2620      	movs	r6, #32
 8000fa2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000fa6:	eba2 0208 	sub.w	r2, r2, r8
 8000faa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000fae:	e766      	b.n	8000e7e <__udivmoddi4+0xfa>
 8000fb0:	4601      	mov	r1, r0
 8000fb2:	e718      	b.n	8000de6 <__udivmoddi4+0x62>
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	e72c      	b.n	8000e12 <__udivmoddi4+0x8e>
 8000fb8:	f1c6 0220 	rsb	r2, r6, #32
 8000fbc:	fa2e f302 	lsr.w	r3, lr, r2
 8000fc0:	40b7      	lsls	r7, r6
 8000fc2:	40b1      	lsls	r1, r6
 8000fc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fd2:	b2bc      	uxth	r4, r7
 8000fd4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb08 f904 	mul.w	r9, r8, r4
 8000fe2:	40b0      	lsls	r0, r6
 8000fe4:	4589      	cmp	r9, r1
 8000fe6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fea:	b280      	uxth	r0, r0
 8000fec:	d93e      	bls.n	800106c <__udivmoddi4+0x2e8>
 8000fee:	1879      	adds	r1, r7, r1
 8000ff0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ff4:	d201      	bcs.n	8000ffa <__udivmoddi4+0x276>
 8000ff6:	4589      	cmp	r9, r1
 8000ff8:	d81f      	bhi.n	800103a <__udivmoddi4+0x2b6>
 8000ffa:	eba1 0109 	sub.w	r1, r1, r9
 8000ffe:	fbb1 f9fe 	udiv	r9, r1, lr
 8001002:	fb09 f804 	mul.w	r8, r9, r4
 8001006:	fb0e 1119 	mls	r1, lr, r9, r1
 800100a:	b292      	uxth	r2, r2
 800100c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001010:	4542      	cmp	r2, r8
 8001012:	d229      	bcs.n	8001068 <__udivmoddi4+0x2e4>
 8001014:	18ba      	adds	r2, r7, r2
 8001016:	f109 31ff 	add.w	r1, r9, #4294967295
 800101a:	d2c4      	bcs.n	8000fa6 <__udivmoddi4+0x222>
 800101c:	4542      	cmp	r2, r8
 800101e:	d2c2      	bcs.n	8000fa6 <__udivmoddi4+0x222>
 8001020:	f1a9 0102 	sub.w	r1, r9, #2
 8001024:	443a      	add	r2, r7
 8001026:	e7be      	b.n	8000fa6 <__udivmoddi4+0x222>
 8001028:	45f0      	cmp	r8, lr
 800102a:	d29d      	bcs.n	8000f68 <__udivmoddi4+0x1e4>
 800102c:	ebbe 0302 	subs.w	r3, lr, r2
 8001030:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001034:	3801      	subs	r0, #1
 8001036:	46e1      	mov	r9, ip
 8001038:	e796      	b.n	8000f68 <__udivmoddi4+0x1e4>
 800103a:	eba7 0909 	sub.w	r9, r7, r9
 800103e:	4449      	add	r1, r9
 8001040:	f1a8 0c02 	sub.w	ip, r8, #2
 8001044:	fbb1 f9fe 	udiv	r9, r1, lr
 8001048:	fb09 f804 	mul.w	r8, r9, r4
 800104c:	e7db      	b.n	8001006 <__udivmoddi4+0x282>
 800104e:	4673      	mov	r3, lr
 8001050:	e77f      	b.n	8000f52 <__udivmoddi4+0x1ce>
 8001052:	4650      	mov	r0, sl
 8001054:	e766      	b.n	8000f24 <__udivmoddi4+0x1a0>
 8001056:	4608      	mov	r0, r1
 8001058:	e6fd      	b.n	8000e56 <__udivmoddi4+0xd2>
 800105a:	443b      	add	r3, r7
 800105c:	3a02      	subs	r2, #2
 800105e:	e733      	b.n	8000ec8 <__udivmoddi4+0x144>
 8001060:	f1ac 0c02 	sub.w	ip, ip, #2
 8001064:	443b      	add	r3, r7
 8001066:	e71c      	b.n	8000ea2 <__udivmoddi4+0x11e>
 8001068:	4649      	mov	r1, r9
 800106a:	e79c      	b.n	8000fa6 <__udivmoddi4+0x222>
 800106c:	eba1 0109 	sub.w	r1, r1, r9
 8001070:	46c4      	mov	ip, r8
 8001072:	fbb1 f9fe 	udiv	r9, r1, lr
 8001076:	fb09 f804 	mul.w	r8, r9, r4
 800107a:	e7c4      	b.n	8001006 <__udivmoddi4+0x282>

0800107c <__aeabi_idiv0>:
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop

08001080 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001084:	f3bf 8f4f 	dsb	sy
}
 8001088:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800108a:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <__NVIC_SystemReset+0x24>)
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001092:	4904      	ldr	r1, [pc, #16]	@ (80010a4 <__NVIC_SystemReset+0x24>)
 8001094:	4b04      	ldr	r3, [pc, #16]	@ (80010a8 <__NVIC_SystemReset+0x28>)
 8001096:	4313      	orrs	r3, r2
 8001098:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800109a:	f3bf 8f4f 	dsb	sy
}
 800109e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <__NVIC_SystemReset+0x20>
 80010a4:	e000ed00 	.word	0xe000ed00
 80010a8:	05fa0004 	.word	0x05fa0004

080010ac <ControlSequenceParserConsume>:
#endif

// --------------------------------------------------------------------------------------------------------------------
cspTYPE ControlSequenceParserConsume( char input, cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
#define CHECK_FOR_OVERFLOW(x) do { if ( ((x)+1) > s->maxLength ) \
	                          { s->type = ctrlOVERFLOW; s->length = 0; s->state = ctrlpsIDLE_DETECT; \
	                          return csptCONTROL; } } while(0)

	switch (s->state)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b04      	cmp	r3, #4
 80010be:	f200 8131 	bhi.w	8001324 <ControlSequenceParserConsume+0x278>
 80010c2:	a201      	add	r2, pc, #4	@ (adr r2, 80010c8 <ControlSequenceParserConsume+0x1c>)
 80010c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c8:	080010dd 	.word	0x080010dd
 80010cc:	08001133 	.word	0x08001133
 80010d0:	08001207 	.word	0x08001207
 80010d4:	08001271 	.word	0x08001271
 80010d8:	080012bb 	.word	0x080012bb
	{
	case ctrlpsIDLE_DETECT:
		// default start condition
		s->buff[0] = input;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	691b      	ldr	r3, [r3, #16]
 80010e0:	79fa      	ldrb	r2, [r7, #7]
 80010e2:	701a      	strb	r2, [r3, #0]
		s->buff[1] = ctrlC0_NUL;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	3301      	adds	r3, #1
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
		s->ptr = 0;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	2200      	movs	r2, #0
 80010f2:	605a      	str	r2, [r3, #4]
		s->length = 1;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	2201      	movs	r2, #1
 80010f8:	609a      	str	r2, [r3, #8]

		// escape code takes more than one byte in total length
		if (input == ctrlC0_ESC)
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	2b1b      	cmp	r3, #27
 80010fe:	d10a      	bne.n	8001116 <ControlSequenceParserConsume+0x6a>
		{
			s->state = ctrlpsSTART_C1;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	2201      	movs	r2, #1
 8001104:	701a      	strb	r2, [r3, #0]
			s->ptr = 1;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	2201      	movs	r2, #1
 800110a:	605a      	str	r2, [r3, #4]
			s->type = ctrlC0_ESC;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	221b      	movs	r2, #27
 8001110:	805a      	strh	r2, [r3, #2]
			return csptNONE;
 8001112:	2300      	movs	r3, #0
 8001114:	e107      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		}

		// single length control code
		else if ( ( /* input >= ctrlC0_NUL &&*/ (unsigned char)input <= (unsigned char)ctrlC0_US ) ||
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2b1f      	cmp	r3, #31
 800111a:	d902      	bls.n	8001122 <ControlSequenceParserConsume+0x76>
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001120:	d105      	bne.n	800112e <ControlSequenceParserConsume+0x82>
				  ( input == ctrlC0_DEL ) )
	    {
			s->type = input;
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	b29a      	uxth	r2, r3
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	805a      	strh	r2, [r3, #2]
			return csptCONTROL;
 800112a:	2302      	movs	r3, #2
 800112c:	e0fb      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
	    }

		// only a character, nothing else
		return csptCHARACTER;
 800112e:	2301      	movs	r3, #1
 8001130:	e0f9      	b.n	8001326 <ControlSequenceParserConsume+0x27a>

	case ctrlpsSTART_C1:

		// now we need to check the type of escape sequence
		s->buff[s->ptr++] = input;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	691a      	ldr	r2, [r3, #16]
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	1c58      	adds	r0, r3, #1
 800113c:	6839      	ldr	r1, [r7, #0]
 800113e:	6048      	str	r0, [r1, #4]
 8001140:	4413      	add	r3, r2
 8001142:	79fa      	ldrb	r2, [r7, #7]
 8001144:	701a      	strb	r2, [r3, #0]
		CHECK_FOR_OVERFLOW(s->ptr);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	1c5a      	adds	r2, r3, #1
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	429a      	cmp	r2, r3
 8001152:	d90b      	bls.n	800116c <ControlSequenceParserConsume+0xc0>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	f241 0201 	movw	r2, #4097	@ 0x1001
 800115a:	805a      	strh	r2, [r3, #2]
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
 8001168:	2302      	movs	r3, #2
 800116a:	e0dc      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		if ( input == '[' )
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	2b5b      	cmp	r3, #91	@ 0x5b
 8001170:	d107      	bne.n	8001182 <ControlSequenceParserConsume+0xd6>
		{
			s->type = ctrlC1_CSI;
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8001178:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsHANDLE_CSI;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	2202      	movs	r2, #2
 800117e:	701a      	strb	r2, [r3, #0]
 8001180:	e03f      	b.n	8001202 <ControlSequenceParserConsume+0x156>
		}
		else if ( input == 'X' )
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b58      	cmp	r3, #88	@ 0x58
 8001186:	d107      	bne.n	8001198 <ControlSequenceParserConsume+0xec>
		{
			s->type = ctrlC1_SOS;
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	f240 1203 	movw	r2, #259	@ 0x103
 800118e:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsHANDLE_ST_1;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	2203      	movs	r2, #3
 8001194:	701a      	strb	r2, [r3, #0]
 8001196:	e034      	b.n	8001202 <ControlSequenceParserConsume+0x156>
		}
		else if ( input == '^' )
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	2b5e      	cmp	r3, #94	@ 0x5e
 800119c:	d107      	bne.n	80011ae <ControlSequenceParserConsume+0x102>
		{
			s->type = ctrlC1_PM;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011a4:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsHANDLE_ST_1;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	2203      	movs	r2, #3
 80011aa:	701a      	strb	r2, [r3, #0]
 80011ac:	e029      	b.n	8001202 <ControlSequenceParserConsume+0x156>
		}
		else if ( input == '_' )
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	2b5f      	cmp	r3, #95	@ 0x5f
 80011b2:	d107      	bne.n	80011c4 <ControlSequenceParserConsume+0x118>
		{
			s->type = ctrlC1_APC;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	f240 1205 	movw	r2, #261	@ 0x105
 80011ba:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsHANDLE_ST_1;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	2203      	movs	r2, #3
 80011c0:	701a      	strb	r2, [r3, #0]
 80011c2:	e01e      	b.n	8001202 <ControlSequenceParserConsume+0x156>
		}
		else if ( input == '\\' )
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	2b5c      	cmp	r3, #92	@ 0x5c
 80011c8:	d107      	bne.n	80011da <ControlSequenceParserConsume+0x12e>
		{
			s->type = ctrlC1_ST;
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	f44f 7283 	mov.w	r2, #262	@ 0x106
 80011d0:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsHANDLE_ST_1;
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	2203      	movs	r2, #3
 80011d6:	701a      	strb	r2, [r3, #0]
 80011d8:	e013      	b.n	8001202 <ControlSequenceParserConsume+0x156>
		}
		else if ( input == 'P' )
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2b50      	cmp	r3, #80	@ 0x50
 80011de:	d107      	bne.n	80011f0 <ControlSequenceParserConsume+0x144>
		{
			s->type = ctrlC1_DCS;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	f240 1201 	movw	r2, #257	@ 0x101
 80011e6:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsHANDLE_ST_1;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	2203      	movs	r2, #3
 80011ec:	701a      	strb	r2, [r3, #0]
 80011ee:	e008      	b.n	8001202 <ControlSequenceParserConsume+0x156>
		}
		else
		{
			s->type = ctrlUNKNOWN;
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011f6:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsIDLE_DETECT;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
			return csptCONTROL;
 80011fe:	2302      	movs	r3, #2
 8001200:	e091      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		}
		return csptNONE;
 8001202:	2300      	movs	r3, #0
 8001204:	e08f      	b.n	8001326 <ControlSequenceParserConsume+0x27a>

	// data handling and termination of Control Sequence Introducer
	case ctrlpsHANDLE_CSI:
	{
		s->buff[s->ptr++] = input;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	691a      	ldr	r2, [r3, #16]
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	1c58      	adds	r0, r3, #1
 8001210:	6839      	ldr	r1, [r7, #0]
 8001212:	6048      	str	r0, [r1, #4]
 8001214:	4413      	add	r3, r2
 8001216:	79fa      	ldrb	r2, [r7, #7]
 8001218:	701a      	strb	r2, [r3, #0]
		CHECK_FOR_OVERFLOW(s->ptr);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	1c5a      	adds	r2, r3, #1
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	429a      	cmp	r2, r3
 8001226:	d90b      	bls.n	8001240 <ControlSequenceParserConsume+0x194>
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	f241 0201 	movw	r2, #4097	@ 0x1001
 800122e:	805a      	strh	r2, [r3, #2]
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
 800123c:	2302      	movs	r3, #2
 800123e:	e072      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		if ( input >= 0x40 && input <= 0x7E )
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	2b3f      	cmp	r3, #63	@ 0x3f
 8001244:	d912      	bls.n	800126c <ControlSequenceParserConsume+0x1c0>
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	2b7e      	cmp	r3, #126	@ 0x7e
 800124a:	d80f      	bhi.n	800126c <ControlSequenceParserConsume+0x1c0>
		{
			s->buff[s->ptr] = ctrlC0_NUL;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	691a      	ldr	r2, [r3, #16]
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	4413      	add	r3, r2
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
			s->length = s->ptr;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	609a      	str	r2, [r3, #8]
			s->state = ctrlpsIDLE_DETECT;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
			return csptCONTROL;
 8001268:	2302      	movs	r3, #2
 800126a:	e05c      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		}
		return csptNONE;
 800126c:	2300      	movs	r3, #0
 800126e:	e05a      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
	}

	// first part of ST terminator
	case ctrlpsHANDLE_ST_1:
	{
		s->buff[s->ptr++] = input;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	691a      	ldr	r2, [r3, #16]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	1c58      	adds	r0, r3, #1
 800127a:	6839      	ldr	r1, [r7, #0]
 800127c:	6048      	str	r0, [r1, #4]
 800127e:	4413      	add	r3, r2
 8001280:	79fa      	ldrb	r2, [r7, #7]
 8001282:	701a      	strb	r2, [r3, #0]
		CHECK_FOR_OVERFLOW(s->ptr);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	1c5a      	adds	r2, r3, #1
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	429a      	cmp	r2, r3
 8001290:	d90b      	bls.n	80012aa <ControlSequenceParserConsume+0x1fe>
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	f241 0201 	movw	r2, #4097	@ 0x1001
 8001298:	805a      	strh	r2, [r3, #2]
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
 80012a6:	2302      	movs	r3, #2
 80012a8:	e03d      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		if ( input == '\033' )
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b1b      	cmp	r3, #27
 80012ae:	d102      	bne.n	80012b6 <ControlSequenceParserConsume+0x20a>
		{
			s->state = ctrlpsHANDLE_ST_2;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	2204      	movs	r2, #4
 80012b4:	701a      	strb	r2, [r3, #0]
		}
		return csptNONE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e035      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
	}
	// second part of ST terminator
	case ctrlpsHANDLE_ST_2:
	{
		s->buff[s->ptr++] = input;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	691a      	ldr	r2, [r3, #16]
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	1c58      	adds	r0, r3, #1
 80012c4:	6839      	ldr	r1, [r7, #0]
 80012c6:	6048      	str	r0, [r1, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	79fa      	ldrb	r2, [r7, #7]
 80012cc:	701a      	strb	r2, [r3, #0]
		CHECK_FOR_OVERFLOW(s->ptr);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	1c5a      	adds	r2, r3, #1
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d90b      	bls.n	80012f4 <ControlSequenceParserConsume+0x248>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	f241 0201 	movw	r2, #4097	@ 0x1001
 80012e2:	805a      	strh	r2, [r3, #2]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
 80012f0:	2302      	movs	r3, #2
 80012f2:	e018      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		if ( input != '\\' )
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	2b5c      	cmp	r3, #92	@ 0x5c
 80012f8:	d004      	beq.n	8001304 <ControlSequenceParserConsume+0x258>
		{
			s->state = ctrlpsHANDLE_ST_1;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	2203      	movs	r2, #3
 80012fe:	701a      	strb	r2, [r3, #0]
			s->buff[s->ptr] = ctrlC0_NUL;
			s->length = s->ptr;
			s->state = ctrlpsIDLE_DETECT;
			return csptCONTROL;
		}
		return csptNONE;
 8001300:	2300      	movs	r3, #0
 8001302:	e010      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
			s->buff[s->ptr] = ctrlC0_NUL;
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	691a      	ldr	r2, [r3, #16]
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	4413      	add	r3, r2
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]
			s->length = s->ptr;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	609a      	str	r2, [r3, #8]
			s->state = ctrlpsIDLE_DETECT;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
			return csptCONTROL;
 8001320:	2302      	movs	r3, #2
 8001322:	e000      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
	}
	default:
		return csptCHARACTER;
 8001324:	2301      	movs	r3, #1
	}
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop

08001334 <ProcessCommand>:

// --------------------------------------------------------------------------------------------------------------------
static int ProcessCommand(char* command, int cmdLen, char** args, int numArgs, cmdState_t* c, int* isAlias, char* inputBuffer, int inbuffsz)
// --------------------------------------------------------------------------------------------------------------------
{
 8001334:	b590      	push	{r4, r7, lr}
 8001336:	b0d9      	sub	sp, #356	@ 0x164
 8001338:	af00      	add	r7, sp, #0
 800133a:	f507 74b0 	add.w	r4, r7, #352	@ 0x160
 800133e:	f5a4 74aa 	sub.w	r4, r4, #340	@ 0x154
 8001342:	6020      	str	r0, [r4, #0]
 8001344:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8001348:	f5a0 70ac 	sub.w	r0, r0, #344	@ 0x158
 800134c:	6001      	str	r1, [r0, #0]
 800134e:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8001352:	f5a1 71ae 	sub.w	r1, r1, #348	@ 0x15c
 8001356:	600a      	str	r2, [r1, #0]
 8001358:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 800135c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001360:	6013      	str	r3, [r2, #0]
	// here we have to look for a matching entry and therefore we have to search linearly through
	// our linked list of command entries
	xSemaphoreTakeRecursive( c->lockGuard, -1 );
 8001362:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f04f 31ff 	mov.w	r1, #4294967295
 800136c:	4618      	mov	r0, r3
 800136e:	f00d ffc3 	bl	800f2f8 <xQueueTakeMutexRecursive>
	cmdEntry_t* pElement = c->commands.lh_first;
 8001372:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
	int found = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
	int result = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
	while ( pElement != NULL )
 8001388:	e17b      	b.n	8001682 <ProcessCommand+0x34e>
	{
		// if string compare result and determined length match, then this must be the function
		if ( strncmp(command, pElement->content.cmd, cmdLen) == 0 && cmdLen == pElement->content.cmdLen )
 800138a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800138e:	f103 0108 	add.w	r1, r3, #8
 8001392:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001396:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80013a0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80013a4:	6818      	ldr	r0, [r3, #0]
 80013a6:	f013 fad0 	bl	801494a <strncmp>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f040 8162 	bne.w	8001676 <ProcessCommand+0x342>
 80013b2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80013b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b8:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 80013bc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	f040 8157 	bne.w	8001676 <ProcessCommand+0x342>
		{
			found = 1;
 80013c8:	2301      	movs	r3, #1
 80013ca:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
			if ( pElement->content.isAlias )
 80013ce:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80013d2:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 8139 	beq.w	800164e <ProcessCommand+0x31a>
			{
				*isAlias = 1;
 80013dc:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80013e0:	2201      	movs	r2, #1
 80013e2:	601a      	str	r2, [r3, #0]
				// first we have to copy the arguments behind the command (as long as we have enough space)
				int currentArg = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
				int stillCopiedLength = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
				char tempInBuff[CONSOLE_LINE_SIZE + 1];
				char* tempArgs[CONSOLE_MAX_NUM_ARGS];
				memset(tempArgs, 0, sizeof(tempArgs));
 80013f0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80013f4:	22b0      	movs	r2, #176	@ 0xb0
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f013 fa91 	bl	8014920 <memset>
				for (int i = 0; i < numArgs; i++)
 80013fe:	2300      	movs	r3, #0
 8001400:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8001404:	e01d      	b.n	8001442 <ProcessCommand+0x10e>
				{
					tempArgs[i] = args[i] - inputBuffer + tempInBuff;
 8001406:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8001410:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001414:	6812      	ldr	r2, [r2, #0]
 8001416:	4413      	add	r3, r2
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	461a      	mov	r2, r3
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	441a      	add	r2, r3
 8001428:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001432:	443b      	add	r3, r7
 8001434:	f843 2cd0 	str.w	r2, [r3, #-208]
				for (int i = 0; i < numArgs; i++)
 8001438:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800143c:	3301      	adds	r3, #1
 800143e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8001442:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001446:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800144a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	429a      	cmp	r2, r3
 8001452:	dbd8      	blt.n	8001406 <ProcessCommand+0xd2>
				}
				memcpy(tempInBuff, inputBuffer, inbuffsz);
 8001454:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	f8d7 1178 	ldr.w	r1, [r7, #376]	@ 0x178
 8001460:	4618      	mov	r0, r3
 8001462:	f013 fbc3 	bl	8014bec <memcpy>
				while (numArgs > 0)
 8001466:	e0b2      	b.n	80015ce <ProcessCommand+0x29a>
				{
					// all args are NULL-terminated so we can safely use strlen
					int argCopyLen = strlen(tempArgs[currentArg]);
 8001468:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001472:	443b      	add	r3, r7
 8001474:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 8001478:	4618      	mov	r0, r3
 800147a:	f7fe ff29 	bl	80002d0 <strlen>
 800147e:	4603      	mov	r3, r0
 8001480:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
					int additionalTermination = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
					if (*(tempArgs[currentArg] - 1) == '"' || tempArgs[currentArg] == NULL)
 800148a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001494:	443b      	add	r3, r7
 8001496:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 800149a:	3b01      	subs	r3, #1
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b22      	cmp	r3, #34	@ 0x22
 80014a0:	d009      	beq.n	80014b6 <ProcessCommand+0x182>
 80014a2:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80014ac:	443b      	add	r3, r7
 80014ae:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <ProcessCommand+0x188>
					{
						additionalTermination = 1;
 80014b6:	2301      	movs	r3, #1
 80014b8:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
					}
					if ((argCopyLen + pElement->content.helpLen + stillCopiedLength + 1) > inbuffsz)
 80014bc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80014c0:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 80014c4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80014c8:	441a      	add	r2, r3
 80014ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80014ce:	4413      	add	r3, r2
 80014d0:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dc0d      	bgt.n	80014f4 <ProcessCommand+0x1c0>
					{
						printf("\033[31mAlias Argument Substitution Overflow\033[0m");
 80014d8:	487b      	ldr	r0, [pc, #492]	@ (80016c8 <ProcessCommand+0x394>)
 80014da:	f012 ffcb 	bl	8014474 <iprintf>
						result = -1;
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
 80014e2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
						*isAlias = 0;
 80014e6:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
						return result;
 80014ee:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80014f2:	e0e4      	b.n	80016be <ProcessCommand+0x38a>
					}
					if (additionalTermination)
 80014f4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d011      	beq.n	8001520 <ProcessCommand+0x1ec>
					{
						inputBuffer[pElement->content.helpLen + stillCopiedLength + 1] = '"';
 80014fc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001500:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 8001504:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001508:	4413      	add	r3, r2
 800150a:	3301      	adds	r3, #1
 800150c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001510:	4413      	add	r3, r2
 8001512:	2222      	movs	r2, #34	@ 0x22
 8001514:	701a      	strb	r2, [r3, #0]
						stillCopiedLength += 1;
 8001516:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800151a:	3301      	adds	r3, #1
 800151c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
					}
					memcpy(&inputBuffer[pElement->content.helpLen + stillCopiedLength + 1], tempArgs[currentArg], argCopyLen);
 8001520:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001524:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 8001528:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800152c:	4413      	add	r3, r2
 800152e:	3301      	adds	r3, #1
 8001530:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001534:	18d0      	adds	r0, r2, r3
 8001536:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001540:	443b      	add	r3, r7
 8001542:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 8001546:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 800154a:	4619      	mov	r1, r3
 800154c:	f013 fb4e 	bl	8014bec <memcpy>
					stillCopiedLength += argCopyLen;
 8001550:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001554:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001558:	4413      	add	r3, r2
 800155a:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
					if (additionalTermination)
 800155e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001562:	2b00      	cmp	r3, #0
 8001564:	d011      	beq.n	800158a <ProcessCommand+0x256>
					{
						inputBuffer[pElement->content.helpLen + stillCopiedLength + 1] = '"';
 8001566:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800156a:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 800156e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001572:	4413      	add	r3, r2
 8001574:	3301      	adds	r3, #1
 8001576:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800157a:	4413      	add	r3, r2
 800157c:	2222      	movs	r2, #34	@ 0x22
 800157e:	701a      	strb	r2, [r3, #0]
						stillCopiedLength += 1;
 8001580:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001584:	3301      	adds	r3, #1
 8001586:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
					}
					inputBuffer[pElement->content.helpLen + stillCopiedLength + 1] = ' ';
 800158a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800158e:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 8001592:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001596:	4413      	add	r3, r2
 8001598:	3301      	adds	r3, #1
 800159a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800159e:	4413      	add	r3, r2
 80015a0:	2220      	movs	r2, #32
 80015a2:	701a      	strb	r2, [r3, #0]
					stillCopiedLength += 1;
 80015a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80015a8:	3301      	adds	r3, #1
 80015aa:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
					numArgs -= 1;
 80015ae:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80015b2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80015b6:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 80015ba:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80015be:	6812      	ldr	r2, [r2, #0]
 80015c0:	3a01      	subs	r2, #1
 80015c2:	601a      	str	r2, [r3, #0]
					currentArg += 1;
 80015c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80015c8:	3301      	adds	r3, #1
 80015ca:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
				while (numArgs > 0)
 80015ce:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80015d2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f73f af45 	bgt.w	8001468 <ProcessCommand+0x134>
				}

				memcpy(inputBuffer, pElement->content.help, pElement->content.helpLen);
 80015de:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80015e2:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 80015e6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80015ea:	f8d3 3254 	ldr.w	r3, [r3, #596]	@ 0x254
 80015ee:	461a      	mov	r2, r3
 80015f0:	f8d7 0178 	ldr.w	r0, [r7, #376]	@ 0x178
 80015f4:	f013 fafa 	bl	8014bec <memcpy>
				memset(&inputBuffer[pElement->content.helpLen+ stillCopiedLength], 0, inbuffsz-(pElement->content.helpLen+stillCopiedLength));
 80015f8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80015fc:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 8001600:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001604:	4413      	add	r3, r2
 8001606:	461a      	mov	r2, r3
 8001608:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800160c:	1898      	adds	r0, r3, r2
 800160e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001612:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 8001616:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800161a:	4413      	add	r3, r2
 800161c:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	461a      	mov	r2, r3
 8001624:	2100      	movs	r1, #0
 8001626:	f013 f97b 	bl	8014920 <memset>
				if (currentArg != 0) inputBuffer[pElement->content.helpLen] = ' ';
 800162a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800162e:	2b00      	cmp	r3, #0
 8001630:	d009      	beq.n	8001646 <ProcessCommand+0x312>
 8001632:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001636:	f8d3 3254 	ldr.w	r3, [r3, #596]	@ 0x254
 800163a:	461a      	mov	r2, r3
 800163c:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001640:	4413      	add	r3, r2
 8001642:	2220      	movs	r2, #32
 8001644:	701a      	strb	r2, [r3, #0]
				result = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
			}
			else
			{
				result = pElement->content.func(numArgs, args, pElement->content.ctx);
			}
			break;
 800164c:	e01e      	b.n	800168c <ProcessCommand+0x358>
				result = pElement->content.func(numArgs, args, pElement->content.ctx);
 800164e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8001658:	6852      	ldr	r2, [r2, #4]
 800165a:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 800165e:	f5a1 71ae 	sub.w	r1, r1, #348	@ 0x15c
 8001662:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8001666:	f5a0 70b0 	sub.w	r0, r0, #352	@ 0x160
 800166a:	6809      	ldr	r1, [r1, #0]
 800166c:	6800      	ldr	r0, [r0, #0]
 800166e:	4798      	blx	r3
 8001670:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
			break;
 8001674:	e00a      	b.n	800168c <ProcessCommand+0x358>
		}

		pElement = pElement->navigate.le_next;
 8001676:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800167a:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 800167e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
	while ( pElement != NULL )
 8001682:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001686:	2b00      	cmp	r3, #0
 8001688:	f47f ae7f 	bne.w	800138a <ProcessCommand+0x56>
	}

	xSemaphoreGiveRecursive( c->lockGuard );
 800168c:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f00d fdf4 	bl	800f280 <xQueueGiveMutexRecursive>
	if ( found == 0 )
 8001698:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800169c:	2b00      	cmp	r3, #0
 800169e:	d10c      	bne.n	80016ba <ProcessCommand+0x386>
	{
		printf("\033[31mInvalid command\033[0m");
 80016a0:	480a      	ldr	r0, [pc, #40]	@ (80016cc <ProcessCommand+0x398>)
 80016a2:	f012 fee7 	bl	8014474 <iprintf>
		fflush(stdout);
 80016a6:	4b0a      	ldr	r3, [pc, #40]	@ (80016d0 <ProcessCommand+0x39c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f012 fd9f 	bl	80141f0 <fflush>
		result = -1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
	}
	return result;
 80016ba:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
}
 80016be:	4618      	mov	r0, r3
 80016c0:	f507 77b2 	add.w	r7, r7, #356	@ 0x164
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd90      	pop	{r4, r7, pc}
 80016c8:	08017358 	.word	0x08017358
 80016cc:	08017388 	.word	0x08017388
 80016d0:	200001d4 	.word	0x200001d4

080016d4 <TransformAndProcessTheCommand>:

// --------------------------------------------------------------------------------------------------------------------
static int TransformAndProcessTheCommand(char* lineBuff, int line_size, cmdState_t* cState)
// --------------------------------------------------------------------------------------------------------------------
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b0be      	sub	sp, #248	@ 0xf8
 80016d8:	af04      	add	r7, sp, #16
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
	int numArgs;
	int isAlias;

	char* args[CONSOLE_MAX_NUM_ARGS];
	char* command;
	char* strtokNewIndex = NULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

restart:
	startIdx = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	endIdx = CONSOLE_LINE_SIZE - 1;
 80016ec:	2377      	movs	r3, #119	@ 0x77
 80016ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	numArgs = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	isAlias = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	command = NULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

	memset(args, 0, sizeof(args));
 8001704:	f107 0310 	add.w	r3, r7, #16
 8001708:	22b0      	movs	r2, #176	@ 0xb0
 800170a:	2100      	movs	r1, #0
 800170c:	4618      	mov	r0, r3
 800170e:	f013 f907 	bl	8014920 <memset>

	if ( lineBuff[startIdx] == '\0' ) return 0;
 8001712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	4413      	add	r3, r2
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d10d      	bne.n	800173c <TransformAndProcessTheCommand+0x68>
 8001720:	2300      	movs	r3, #0
 8001722:	e118      	b.n	8001956 <TransformAndProcessTheCommand+0x282>

	while(startIdx < line_size)
	{
		if ( lineBuff[startIdx] != ' ' ) break;
 8001724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	4413      	add	r3, r2
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b20      	cmp	r3, #32
 8001730:	d10a      	bne.n	8001748 <TransformAndProcessTheCommand+0x74>
		startIdx += 1;
 8001732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001736:	3301      	adds	r3, #1
 8001738:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	while(startIdx < line_size)
 800173c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	429a      	cmp	r2, r3
 8001744:	dbee      	blt.n	8001724 <TransformAndProcessTheCommand+0x50>
 8001746:	e014      	b.n	8001772 <TransformAndProcessTheCommand+0x9e>
		if ( lineBuff[startIdx] != ' ' ) break;
 8001748:	bf00      	nop
	}

	while(endIdx > 0)
 800174a:	e012      	b.n	8001772 <TransformAndProcessTheCommand+0x9e>
	{
		if ( lineBuff[endIdx] != '\0' && lineBuff[endIdx] != ' ' ) break;
 800174c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d006      	beq.n	8001768 <TransformAndProcessTheCommand+0x94>
 800175a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	4413      	add	r3, r2
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b20      	cmp	r3, #32
 8001766:	d109      	bne.n	800177c <TransformAndProcessTheCommand+0xa8>
		endIdx -= 1;
 8001768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800176c:	3b01      	subs	r3, #1
 800176e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	while(endIdx > 0)
 8001772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001776:	2b00      	cmp	r3, #0
 8001778:	dce8      	bgt.n	800174c <TransformAndProcessTheCommand+0x78>
 800177a:	e000      	b.n	800177e <TransformAndProcessTheCommand+0xaa>
		if ( lineBuff[endIdx] != '\0' && lineBuff[endIdx] != ' ' ) break;
 800177c:	bf00      	nop
	}

	if ( startIdx <= endIdx )
 800177e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001786:	429a      	cmp	r2, r3
 8001788:	f300 80e4 	bgt.w	8001954 <TransformAndProcessTheCommand+0x280>
	{
		// strtok is safe because we have a nulled safety margin behind the string
		command = strtok(&lineBuff[startIdx], " ");
 800178c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	4972      	ldr	r1, [pc, #456]	@ (8001960 <TransformAndProcessTheCommand+0x28c>)
 8001796:	4618      	mov	r0, r3
 8001798:	f013 f8f6 	bl	8014988 <strtok>
 800179c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0

		// some sanity checks before tokenizing
		if ( command == NULL ) return 0;
 80017a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <TransformAndProcessTheCommand+0xd8>
 80017a8:	2300      	movs	r3, #0
 80017aa:	e0d4      	b.n	8001956 <TransformAndProcessTheCommand+0x282>
		if ((int)strnlen(command, line_size) == 0 ) return 0;
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	4619      	mov	r1, r3
 80017b0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 80017b4:	f013 f8db 	bl	801496e <strnlen>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <TransformAndProcessTheCommand+0xee>
 80017be:	2300      	movs	r3, #0
 80017c0:	e0c9      	b.n	8001956 <TransformAndProcessTheCommand+0x282>

		int cmdLength = (int)strnlen(command, line_size);
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	4619      	mov	r1, r3
 80017c6:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 80017ca:	f013 f8d0 	bl	801496e <strnlen>
 80017ce:	4603      	mov	r3, r0
 80017d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

		// now get the arguments
		while((args[numArgs] = strtok(strtokNewIndex, " ")) != NULL && numArgs < CONSOLE_MAX_NUM_ARGS)
 80017d4:	e086      	b.n	80018e4 <TransformAndProcessTheCommand+0x210>
		{
			strtokNewIndex = NULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			if (args[numArgs][0] == '"')
 80017dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	33e8      	adds	r3, #232	@ 0xe8
 80017e4:	443b      	add	r3, r7
 80017e6:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b22      	cmp	r3, #34	@ 0x22
 80017ee:	d174      	bne.n	80018da <TransformAndProcessTheCommand+0x206>
			{
				// move the argument to remove the quotes
				args[numArgs] += 1;
 80017f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	33e8      	adds	r3, #232	@ 0xe8
 80017f8:	443b      	add	r3, r7
 80017fa:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	33e8      	adds	r3, #232	@ 0xe8
 8001808:	443b      	add	r3, r7
 800180a:	f843 2cd8 	str.w	r2, [r3, #-216]
				if (args[numArgs][0] == '"') {
 800180e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	33e8      	adds	r3, #232	@ 0xe8
 8001816:	443b      	add	r3, r7
 8001818:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b22      	cmp	r3, #34	@ 0x22
 8001820:	d113      	bne.n	800184a <TransformAndProcessTheCommand+0x176>
					args[numArgs][0] = '\0';
 8001822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	33e8      	adds	r3, #232	@ 0xe8
 800182a:	443b      	add	r3, r7
 800182c:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]
					// we have to add a plus 2 because there is the '"' char and '\0' from strtok as second
					// char. So we need to add 2 chars to get to the next valid char or the end of the string
					strtokNewIndex = &args[numArgs][2];
 8001834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	33e8      	adds	r3, #232	@ 0xe8
 800183c:	443b      	add	r3, r7
 800183e:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001842:	3302      	adds	r3, #2
 8001844:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001848:	e047      	b.n	80018da <TransformAndProcessTheCommand+0x206>
				}
				else
				{
					// now look for the end of the argument and set new strtok index to this
					// string part
					int firstLen = strlen(args[numArgs]);
 800184a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	33e8      	adds	r3, #232	@ 0xe8
 8001852:	443b      	add	r3, r7
 8001854:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fd39 	bl	80002d0 <strlen>
 800185e:	4603      	mov	r3, r0
 8001860:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
					args[numArgs][firstLen] = ' ';
 8001864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	33e8      	adds	r3, #232	@ 0xe8
 800186c:	443b      	add	r3, r7
 800186e:	f853 2cd8 	ldr.w	r2, [r3, #-216]
 8001872:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001876:	4413      	add	r3, r2
 8001878:	2220      	movs	r2, #32
 800187a:	701a      	strb	r2, [r3, #0]
					char* endChar = &args[numArgs][firstLen-1];
 800187c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	33e8      	adds	r3, #232	@ 0xe8
 8001884:	443b      	add	r3, r7
 8001886:	f853 2cd8 	ldr.w	r2, [r3, #-216]
 800188a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800188e:	3b01      	subs	r3, #1
 8001890:	4413      	add	r3, r2
 8001892:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
					// while loop is safe because we have a nulled safety margin behind the string
					while (*endChar != '\0' && *endChar != '"') endChar += 1;
 8001896:	e004      	b.n	80018a2 <TransformAndProcessTheCommand+0x1ce>
 8001898:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800189c:	3301      	adds	r3, #1
 800189e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80018a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d004      	beq.n	80018b6 <TransformAndProcessTheCommand+0x1e2>
 80018ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b22      	cmp	r3, #34	@ 0x22
 80018b4:	d1f0      	bne.n	8001898 <TransformAndProcessTheCommand+0x1c4>
					if (*endChar == '"') {
 80018b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b22      	cmp	r3, #34	@ 0x22
 80018be:	d108      	bne.n	80018d2 <TransformAndProcessTheCommand+0x1fe>
						*endChar = '\0'; endChar += 1;
 80018c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
 80018c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018cc:	3301      	adds	r3, #1
 80018ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
					}
					strtokNewIndex = endChar;
 80018d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
				}
			}
			numArgs+=1;
 80018da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80018de:	3301      	adds	r3, #1
 80018e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		while((args[numArgs] = strtok(strtokNewIndex, " ")) != NULL && numArgs < CONSOLE_MAX_NUM_ARGS)
 80018e4:	491e      	ldr	r1, [pc, #120]	@ (8001960 <TransformAndProcessTheCommand+0x28c>)
 80018e6:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 80018ea:	f013 f84d 	bl	8014988 <strtok>
 80018ee:	4602      	mov	r2, r0
 80018f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	33e8      	adds	r3, #232	@ 0xe8
 80018f8:	443b      	add	r3, r7
 80018fa:	f843 2cd8 	str.w	r2, [r3, #-216]
 80018fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	33e8      	adds	r3, #232	@ 0xe8
 8001906:	443b      	add	r3, r7
 8001908:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d004      	beq.n	800191a <TransformAndProcessTheCommand+0x246>
 8001910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001914:	2b2b      	cmp	r3, #43	@ 0x2b
 8001916:	f77f af5e 	ble.w	80017d6 <TransformAndProcessTheCommand+0x102>
		}

		// now call the command
		int retVal = ProcessCommand(command, cmdLength, args, numArgs, cState, &isAlias, lineBuff, line_size);
 800191a:	f107 0210 	add.w	r2, r7, #16
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	9303      	str	r3, [sp, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	9302      	str	r3, [sp, #8]
 8001926:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001934:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8001938:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 800193c:	f7ff fcfa 	bl	8001334 <ProcessCommand>
 8001940:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
		if ( isAlias )
 8001944:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d000      	beq.n	800194e <TransformAndProcessTheCommand+0x27a>
		{
			// in case it is an alias, the line buffer has been overwritten with the alias and so we have to do
			// this round again
			goto restart;
 800194c:	e6cb      	b.n	80016e6 <TransformAndProcessTheCommand+0x12>
		}
		return retVal;
 800194e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001952:	e000      	b.n	8001956 <TransformAndProcessTheCommand+0x282>
	}

	return 0;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	37e8      	adds	r7, #232	@ 0xe8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	080173a4 	.word	0x080173a4

08001964 <PrintConsoleControl>:

// --------------------------------------------------------------------------------------------------------------------
static void PrintConsoleControl( cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	if ( s->length >= 3 && s->type == ctrlC1_CSI )
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d91d      	bls.n	80019b0 <PrintConsoleControl+0x4c>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	885b      	ldrh	r3, [r3, #2]
 8001978:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800197c:	d118      	bne.n	80019b0 <PrintConsoleControl+0x4c>
	{
		for ( unsigned int i = 0; i < s->length; i ++ )
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	e00a      	b.n	800199a <PrintConsoleControl+0x36>
		{
			putchar(s->buff[i]);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691a      	ldr	r2, [r3, #16]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4413      	add	r3, r2
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f012 fd82 	bl	8014498 <putchar>
		for ( unsigned int i = 0; i < s->length; i ++ )
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	3301      	adds	r3, #1
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d3ef      	bcc.n	8001984 <PrintConsoleControl+0x20>
		}
		fflush(stdout);
 80019a4:	4b04      	ldr	r3, [pc, #16]	@ (80019b8 <PrintConsoleControl+0x54>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f012 fc20 	bl	80141f0 <fflush>
	}
}
 80019b0:	bf00      	nop
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	200001d4 	.word	0x200001d4

080019bc <ConsoleIsArrowLeft>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleIsArrowLeft( cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
	return ( s->length >= 3 && s->type == ctrlC1_CSI && s->buff[2] == 68);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d90c      	bls.n	80019e6 <ConsoleIsArrowLeft+0x2a>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	885b      	ldrh	r3, [r3, #2]
 80019d0:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80019d4:	d107      	bne.n	80019e6 <ConsoleIsArrowLeft+0x2a>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	3302      	adds	r3, #2
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b44      	cmp	r3, #68	@ 0x44
 80019e0:	d101      	bne.n	80019e6 <ConsoleIsArrowLeft+0x2a>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <ConsoleIsArrowLeft+0x2c>
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <ConsoleIsArrowRight>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleIsArrowRight( cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	return ( s->length >= 3 && s->type == ctrlC1_CSI && s->buff[2] == 67);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d90c      	bls.n	8001a1e <ConsoleIsArrowRight+0x2a>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	885b      	ldrh	r3, [r3, #2]
 8001a08:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001a0c:	d107      	bne.n	8001a1e <ConsoleIsArrowRight+0x2a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	3302      	adds	r3, #2
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b43      	cmp	r3, #67	@ 0x43
 8001a18:	d101      	bne.n	8001a1e <ConsoleIsArrowRight+0x2a>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <ConsoleIsArrowRight+0x2c>
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <ConsoleIsArrowUp>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleIsArrowUp( cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	return ( s->length >= 3 && s->type == ctrlC1_CSI && s->buff[2] == 65);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d90c      	bls.n	8001a56 <ConsoleIsArrowUp+0x2a>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	885b      	ldrh	r3, [r3, #2]
 8001a40:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001a44:	d107      	bne.n	8001a56 <ConsoleIsArrowUp+0x2a>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	3302      	adds	r3, #2
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b41      	cmp	r3, #65	@ 0x41
 8001a50:	d101      	bne.n	8001a56 <ConsoleIsArrowUp+0x2a>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <ConsoleIsArrowUp+0x2c>
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <ConsoleIsArrowDown>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleIsArrowDown( cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
	return ( s->length >= 3 && s->type == ctrlC1_CSI && s->buff[2] == 66);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d90c      	bls.n	8001a8e <ConsoleIsArrowDown+0x2a>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	885b      	ldrh	r3, [r3, #2]
 8001a78:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001a7c:	d107      	bne.n	8001a8e <ConsoleIsArrowDown+0x2a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	3302      	adds	r3, #2
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b42      	cmp	r3, #66	@ 0x42
 8001a88:	d101      	bne.n	8001a8e <ConsoleIsArrowDown+0x2a>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <ConsoleIsArrowDown+0x2c>
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <ConsoleIsEntf>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleIsEntf( cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	return ( s->length >= 4 && s->type == ctrlC1_CSI && s->buff[2] == 51 && s->buff[3] == 126);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d912      	bls.n	8001ad2 <ConsoleIsEntf+0x36>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	885b      	ldrh	r3, [r3, #2]
 8001ab0:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001ab4:	d10d      	bne.n	8001ad2 <ConsoleIsEntf+0x36>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	3302      	adds	r3, #2
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b33      	cmp	r3, #51	@ 0x33
 8001ac0:	d107      	bne.n	8001ad2 <ConsoleIsEntf+0x36>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	3303      	adds	r3, #3
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b7e      	cmp	r3, #126	@ 0x7e
 8001acc:	d101      	bne.n	8001ad2 <ConsoleIsEntf+0x36>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <ConsoleIsEntf+0x38>
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <PrintConsoleArrowLeft>:

// --------------------------------------------------------------------------------------------------------------------
static void PrintConsoleArrowLeft( void )
// --------------------------------------------------------------------------------------------------------------------
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
	putchar('\033');
 8001ae4:	201b      	movs	r0, #27
 8001ae6:	f012 fcd7 	bl	8014498 <putchar>
	putchar('[');
 8001aea:	205b      	movs	r0, #91	@ 0x5b
 8001aec:	f012 fcd4 	bl	8014498 <putchar>
	putchar(68);
 8001af0:	2044      	movs	r0, #68	@ 0x44
 8001af2:	f012 fcd1 	bl	8014498 <putchar>
	fflush(stdout);
 8001af6:	4b04      	ldr	r3, [pc, #16]	@ (8001b08 <PrintConsoleArrowLeft+0x28>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f012 fb77 	bl	80141f0 <fflush>
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	200001d4 	.word	0x200001d4

08001b0c <CONSOLE_RedirectStreams>:

// --------------------------------------------------------------------------------------------------------------------
int CONSOLE_RedirectStreams( ConsoleHandle_t h, ConsoleReadStream_t rdFunc, ConsoleWriteStream_t wrFunc,
		void* rdContext, void* wrContext )
// --------------------------------------------------------------------------------------------------------------------
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	@ 0x28
 8001b10:	af02      	add	r7, sp, #8
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	603b      	str	r3, [r7, #0]
#ifndef __NEWLIB__ // so far only newlib is supported
	return -2;
#else
	// we can only exec the real stream redirection when we are the console thread itself and the scheduler is running,
	// otherwise we have to set the request to pending state
	if ( ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) && ( xTaskGetCurrentTaskHandle() == h->tHandle ) )
 8001b1a:	f00f fbb1 	bl	8011280 <xTaskGetSchedulerState>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d165      	bne.n	8001bf0 <CONSOLE_RedirectStreams+0xe4>
 8001b24:	f00f fb9c 	bl	8011260 <xTaskGetCurrentTaskHandle>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d15e      	bne.n	8001bf0 <CONSOLE_RedirectStreams+0xe4>
	{
		FILE* rdToClean = NULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
		if ( _impure_ptr->_stdin != &__sf[0])
 8001b36:	4b3c      	ldr	r3, [pc, #240]	@ (8001c28 <CONSOLE_RedirectStreams+0x11c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	4a3b      	ldr	r2, [pc, #236]	@ (8001c2c <CONSOLE_RedirectStreams+0x120>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d003      	beq.n	8001b4a <CONSOLE_RedirectStreams+0x3e>
		{
			rdToClean = _impure_ptr->_stdin;
 8001b42:	4b39      	ldr	r3, [pc, #228]	@ (8001c28 <CONSOLE_RedirectStreams+0x11c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	61fb      	str	r3, [r7, #28]
		}

		FILE* wrToClean = NULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61bb      	str	r3, [r7, #24]
		if ( _impure_ptr->_stdout != &__sf[1])
 8001b4e:	4b36      	ldr	r3, [pc, #216]	@ (8001c28 <CONSOLE_RedirectStreams+0x11c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	4a36      	ldr	r2, [pc, #216]	@ (8001c30 <CONSOLE_RedirectStreams+0x124>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d003      	beq.n	8001b62 <CONSOLE_RedirectStreams+0x56>
		{
			wrToClean = _impure_ptr->_stdout;
 8001b5a:	4b33      	ldr	r3, [pc, #204]	@ (8001c28 <CONSOLE_RedirectStreams+0x11c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	61bb      	str	r3, [r7, #24]
		}

		FILE* myStdOut = &__sf[1];
 8001b62:	4b33      	ldr	r3, [pc, #204]	@ (8001c30 <CONSOLE_RedirectStreams+0x124>)
 8001b64:	617b      	str	r3, [r7, #20]
		if ( wrFunc != NULL )
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00e      	beq.n	8001b8a <CONSOLE_RedirectStreams+0x7e>
		{
			myStdOut = fwopen(wrContext, wrFunc);
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	2300      	movs	r3, #0
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	2100      	movs	r1, #0
 8001b76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001b78:	f012 fec2 	bl	8014900 <funopen>
 8001b7c:	6178      	str	r0, [r7, #20]
			if ( myStdOut == NULL ) return -1;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d102      	bne.n	8001b8a <CONSOLE_RedirectStreams+0x7e>
 8001b84:	f04f 33ff 	mov.w	r3, #4294967295
 8001b88:	e049      	b.n	8001c1e <CONSOLE_RedirectStreams+0x112>
		}

		FILE* myStdIn = &__sf[0];
 8001b8a:	4b28      	ldr	r3, [pc, #160]	@ (8001c2c <CONSOLE_RedirectStreams+0x120>)
 8001b8c:	613b      	str	r3, [r7, #16]
		if ( rdFunc != NULL )
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d018      	beq.n	8001bc6 <CONSOLE_RedirectStreams+0xba>
		{
			myStdIn = fropen(rdContext, rdFunc);
 8001b94:	2300      	movs	r3, #0
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	2300      	movs	r3, #0
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	68b9      	ldr	r1, [r7, #8]
 8001b9e:	6838      	ldr	r0, [r7, #0]
 8001ba0:	f012 feae 	bl	8014900 <funopen>
 8001ba4:	6138      	str	r0, [r7, #16]
			if ( myStdIn == NULL )
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10c      	bne.n	8001bc6 <CONSOLE_RedirectStreams+0xba>
			{
				if ( myStdOut != NULL && myStdOut != &__sf[1]) fclose(myStdOut);
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d006      	beq.n	8001bc0 <CONSOLE_RedirectStreams+0xb4>
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	4a1e      	ldr	r2, [pc, #120]	@ (8001c30 <CONSOLE_RedirectStreams+0x124>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d002      	beq.n	8001bc0 <CONSOLE_RedirectStreams+0xb4>
 8001bba:	6978      	ldr	r0, [r7, #20]
 8001bbc:	f012 fa64 	bl	8014088 <fclose>
				return -1;
 8001bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc4:	e02b      	b.n	8001c1e <CONSOLE_RedirectStreams+0x112>
			}
		}

		_impure_ptr->_stdin  = myStdIn;
 8001bc6:	4b18      	ldr	r3, [pc, #96]	@ (8001c28 <CONSOLE_RedirectStreams+0x11c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	605a      	str	r2, [r3, #4]
		_impure_ptr->_stdout = myStdOut;
 8001bce:	4b16      	ldr	r3, [pc, #88]	@ (8001c28 <CONSOLE_RedirectStreams+0x11c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	609a      	str	r2, [r3, #8]

		if (wrToClean != NULL) fclose(wrToClean);
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <CONSOLE_RedirectStreams+0xd6>
 8001bdc:	69b8      	ldr	r0, [r7, #24]
 8001bde:	f012 fa53 	bl	8014088 <fclose>
		if (rdToClean != NULL) fclose(rdToClean);
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d018      	beq.n	8001c1a <CONSOLE_RedirectStreams+0x10e>
 8001be8:	69f8      	ldr	r0, [r7, #28]
 8001bea:	f012 fa4d 	bl	8014088 <fclose>
	{
 8001bee:	e014      	b.n	8001c1a <CONSOLE_RedirectStreams+0x10e>
	}
	else
	{
		h->pendingRedirect = 1;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
		h->pendingRdStream = rdFunc;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
		h->pendingWrStream = wrFunc;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
		h->pendingRdCtx    = rdContext;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
		h->pendingWrCtx    = wrContext;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c14:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
 8001c18:	e000      	b.n	8001c1c <CONSOLE_RedirectStreams+0x110>
	{
 8001c1a:	bf00      	nop
	}
#endif
	return 0;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3720      	adds	r7, #32
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200001d4 	.word	0x200001d4
 8001c2c:	2000067c 	.word	0x2000067c
 8001c30:	200006e4 	.word	0x200006e4

08001c34 <ConsoleFunction>:

// --------------------------------------------------------------------------------------------------------------------
static void ConsoleFunction( void * arg )
// --------------------------------------------------------------------------------------------------------------------
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b09a      	sub	sp, #104	@ 0x68
 8001c38:	af02      	add	r7, sp, #8
 8001c3a:	6078      	str	r0, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)arg;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	627b      	str	r3, [r7, #36]	@ 0x24
	if (h == NULL) goto destroy;
 8001c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 84aa 	beq.w	800259c <ConsoleFunction+0x968>

	if( h->pendingRedirect != 0 )
 8001c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d01a      	beq.n	8001c88 <ConsoleFunction+0x54>
	{
		h->pendingRedirect = 0;
 8001c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c54:	2200      	movs	r2, #0
 8001c56:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
		if ( CONSOLE_RedirectStreams(h, h->pendingRdStream, h->pendingWrStream, h->pendingRdCtx, h->pendingWrCtx) )
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5c:	f8d3 1410 	ldr.w	r1, [r3, #1040]	@ 0x410
 8001c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c62:	f8d3 2414 	ldr.w	r2, [r3, #1044]	@ 0x414
 8001c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c68:	f8d3 0418 	ldr.w	r0, [r3, #1048]	@ 0x418
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	4603      	mov	r3, r0
 8001c76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001c78:	f7ff ff48 	bl	8001b0c <CONSOLE_RedirectStreams>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d002      	beq.n	8001c88 <ConsoleFunction+0x54>
		{
			printf("was not able to redirect console streams, requested by user!");
 8001c82:	4892      	ldr	r0, [pc, #584]	@ (8001ecc <ConsoleFunction+0x298>)
 8001c84:	f012 fbf6 	bl	8014474 <iprintf>
#ifdef WIN32
		"\033[39m      -=   MSVC RTOS SIMULATOR ";
#else
		"\033[39m      -=   ARM RTOS ";
#endif
    printf((char*)headerASCIIArt);
 8001c88:	4891      	ldr	r0, [pc, #580]	@ (8001ed0 <ConsoleFunction+0x29c>)
 8001c8a:	f012 fbf3 	bl	8014474 <iprintf>
#ifdef EXERCISE
    printf("EXERCISE: ");
    printf(xstr(EXERCISE)));
    printf("\r\n\r\n");
#else
    printf("PLAYGROUND\r\n\r\n");
 8001c8e:	4891      	ldr	r0, [pc, #580]	@ (8001ed4 <ConsoleFunction+0x2a0>)
 8001c90:	f012 fc60 	bl	8014554 <puts>
#endif

#if CONSOLE_USE_DYNAMIC_USERNAME != 0
	char* usernamePtr = getenv("USERNAME");
 8001c94:	4890      	ldr	r0, [pc, #576]	@ (8001ed8 <ConsoleFunction+0x2a4>)
 8001c96:	f010 fafd 	bl	8012294 <getenv>
 8001c9a:	65f8      	str	r0, [r7, #92]	@ 0x5c
	if ( usernamePtr == 0 ) usernamePtr = CONSOLE_USERNAME;
 8001c9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <ConsoleFunction+0x72>
 8001ca2:	4b8e      	ldr	r3, [pc, #568]	@ (8001edc <ConsoleFunction+0x2a8>)
 8001ca4:	65fb      	str	r3, [r7, #92]	@ 0x5c
#else
	char* usernamePtr = CONSOLE_USERNAME;
#endif

	char* lineBuff = NULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	65bb      	str	r3, [r7, #88]	@ 0x58
	char* ctrlBuff = malloc(CONSOLE_LINE_SIZE + CONSOLE_SAFETY_SPACE); // make sure we have a little space behind
 8001caa:	207c      	movs	r0, #124	@ 0x7c
 8001cac:	f010 fb3a 	bl	8012324 <malloc>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	623b      	str	r3, [r7, #32]
	if (ctrlBuff == NULL) goto exit;
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8406 	beq.w	80024c8 <ConsoleFunction+0x894>

	lineBuff = malloc(CONSOLE_LINE_SIZE + CONSOLE_SAFETY_SPACE); // make sure we have a little space behind
 8001cbc:	207c      	movs	r0, #124	@ 0x7c
 8001cbe:	f010 fb31 	bl	8012324 <malloc>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	65bb      	str	r3, [r7, #88]	@ 0x58
	if (lineBuff == NULL) goto exit;
 8001cc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 83ff 	beq.w	80024cc <ConsoleFunction+0x898>

	memset(ctrlBuff, ctrlC0_NUL, CONSOLE_LINE_SIZE + CONSOLE_SAFETY_SPACE);
 8001cce:	227c      	movs	r2, #124	@ 0x7c
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	6a38      	ldr	r0, [r7, #32]
 8001cd4:	f012 fe24 	bl	8014920 <memset>
	memset(lineBuff, ctrlC0_NUL, CONSOLE_LINE_SIZE + CONSOLE_SAFETY_SPACE);
 8001cd8:	227c      	movs	r2, #124	@ 0x7c
 8001cda:	2100      	movs	r1, #0
 8001cdc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001cde:	f012 fe1f 	bl	8014920 <memset>
	unsigned int lbPtr = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	657b      	str	r3, [r7, #84]	@ 0x54

	printf("\r\nFreeRTOS Console Up and Running\r\n");
 8001ce6:	487e      	ldr	r0, [pc, #504]	@ (8001ee0 <ConsoleFunction+0x2ac>)
 8001ce8:	f012 fc34 	bl	8014554 <puts>
	printf("\r\n\r\n-------------------------------------------------------------------\r\n");
 8001cec:	487d      	ldr	r0, [pc, #500]	@ (8001ee4 <ConsoleFunction+0x2b0>)
 8001cee:	f012 fc31 	bl	8014554 <puts>

	h->pState.buff = ctrlBuff;
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf4:	6a3a      	ldr	r2, [r7, #32]
 8001cf6:	619a      	str	r2, [r3, #24]

	printf("\r\n%s(\033[32m\xE2\x9C\x93\033[0m) $>", usernamePtr);
 8001cf8:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001cfa:	487b      	ldr	r0, [pc, #492]	@ (8001ee8 <ConsoleFunction+0x2b4>)
 8001cfc:	f012 fbba 	bl	8014474 <iprintf>
	int consoleStartIndex = (int)strlen(usernamePtr)+6;
 8001d00:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001d02:	f7fe fae5 	bl	80002d0 <strlen>
 8001d06:	4603      	mov	r3, r0
 8001d08:	3306      	adds	r3, #6
 8001d0a:	653b      	str	r3, [r7, #80]	@ 0x50
	fflush(stdout);
 8001d0c:	4b77      	ldr	r3, [pc, #476]	@ (8001eec <ConsoleFunction+0x2b8>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f012 fa6c 	bl	80141f0 <fflush>

	while(h->cancel == 0)
 8001d18:	e3d0      	b.n	80024bc <ConsoleFunction+0x888>
	{
		if( h->pendingRedirect != 0 )
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d01a      	beq.n	8001d5a <ConsoleFunction+0x126>
		{
			h->pendingRedirect = 0;
 8001d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d26:	2200      	movs	r2, #0
 8001d28:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
			if ( CONSOLE_RedirectStreams(h, h->pendingRdStream, h->pendingWrStream, h->pendingRdCtx, h->pendingWrCtx) )
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2e:	f8d3 1410 	ldr.w	r1, [r3, #1040]	@ 0x410
 8001d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d34:	f8d3 2414 	ldr.w	r2, [r3, #1044]	@ 0x414
 8001d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3a:	f8d3 0418 	ldr.w	r0, [r3, #1048]	@ 0x418
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d40:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	4603      	mov	r3, r0
 8001d48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d4a:	f7ff fedf 	bl	8001b0c <CONSOLE_RedirectStreams>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <ConsoleFunction+0x126>
			{
				printf("was not able to redirect console streams, requested by user!");
 8001d54:	485d      	ldr	r0, [pc, #372]	@ (8001ecc <ConsoleFunction+0x298>)
 8001d56:	f012 fb8d 	bl	8014474 <iprintf>
			}
		}

		int res = EOF;
 8001d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5e:	61fb      	str	r3, [r7, #28]
		while((res = getchar()) == EOF)
 8001d60:	e004      	b.n	8001d6c <ConsoleFunction+0x138>
		{
			if ( h->cancel == 1 ) goto exit;
 8001d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	f000 83b2 	beq.w	80024d0 <ConsoleFunction+0x89c>
		while((res = getchar()) == EOF)
 8001d6c:	f012 fb7a 	bl	8014464 <getchar>
 8001d70:	61f8      	str	r0, [r7, #28]
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d78:	d0f3      	beq.n	8001d62 <ConsoleFunction+0x12e>
		}
		char myChar = res;
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	76fb      	strb	r3, [r7, #27]
		cspTYPE result = ControlSequenceParserConsume(myChar, &h->pState);
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d80:	f103 0208 	add.w	r2, r3, #8
 8001d84:	7efb      	ldrb	r3, [r7, #27]
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff f98f 	bl	80010ac <ControlSequenceParserConsume>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	76bb      	strb	r3, [r7, #26]
		if ( result == csptCHARACTER )
 8001d92:	7ebb      	ldrb	r3, [r7, #26]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	f040 80b3 	bne.w	8001f00 <ConsoleFunction+0x2cc>
		{
			putchar(myChar);
 8001d9a:	7efb      	ldrb	r3, [r7, #27]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f012 fb7b 	bl	8014498 <putchar>
			fflush(stdout);
 8001da2:	4b52      	ldr	r3, [pc, #328]	@ (8001eec <ConsoleFunction+0x2b8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f012 fa21 	bl	80141f0 <fflush>

			if ( lineBuff[lbPtr + 1] != '\0' )
 8001dae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db0:	3301      	adds	r3, #1
 8001db2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001db4:	4413      	add	r3, r2
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d061      	beq.n	8001e80 <ConsoleFunction+0x24c>
			{
				putchar(lineBuff[lbPtr]);
 8001dbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc0:	4413      	add	r3, r2
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f012 fb67 	bl	8014498 <putchar>
				fflush(stdout);
 8001dca:	4b48      	ldr	r3, [pc, #288]	@ (8001eec <ConsoleFunction+0x2b8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f012 fa0d 	bl	80141f0 <fflush>

				int tmpPtr = lbPtr + 1;
 8001dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd8:	3301      	adds	r3, #1
 8001dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
				char parking = myChar;
 8001ddc:	7efb      	ldrb	r3, [r7, #27]
 8001dde:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
				char parking2 = lineBuff[lbPtr];
 8001de2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001de4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de6:	4413      	add	r3, r2
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
				while(tmpPtr < CONSOLE_LINE_SIZE)
 8001dee:	e02a      	b.n	8001e46 <ConsoleFunction+0x212>
				{
					putchar(lineBuff[tmpPtr]);
 8001df0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001df2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001df4:	4413      	add	r3, r2
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f012 fb4d 	bl	8014498 <putchar>
					fflush(stdout);
 8001dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8001eec <ConsoleFunction+0x2b8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f012 f9f3 	bl	80141f0 <fflush>


					lineBuff[tmpPtr - 1] = parking;
 8001e0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e10:	4413      	add	r3, r2
 8001e12:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8001e16:	701a      	strb	r2, [r3, #0]
					parking = parking2;
 8001e18:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001e1c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
					parking2 = lineBuff[tmpPtr];
 8001e20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e24:	4413      	add	r3, r2
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

					if ( lineBuff[tmpPtr] == '\0' && parking == '\0')
 8001e2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e30:	4413      	add	r3, r2
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d103      	bne.n	8001e40 <ConsoleFunction+0x20c>
 8001e38:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d006      	beq.n	8001e4e <ConsoleFunction+0x21a>
						break;

					tmpPtr += 1;
 8001e40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e42:	3301      	adds	r3, #1
 8001e44:	64fb      	str	r3, [r7, #76]	@ 0x4c
				while(tmpPtr < CONSOLE_LINE_SIZE)
 8001e46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e48:	2b77      	cmp	r3, #119	@ 0x77
 8001e4a:	ddd1      	ble.n	8001df0 <ConsoleFunction+0x1bc>
 8001e4c:	e000      	b.n	8001e50 <ConsoleFunction+0x21c>
						break;
 8001e4e:	bf00      	nop
				}

				printf("\033[%dD", CONSOLE_LINE_SIZE + consoleStartIndex);
 8001e50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e52:	3378      	adds	r3, #120	@ 0x78
 8001e54:	4619      	mov	r1, r3
 8001e56:	4826      	ldr	r0, [pc, #152]	@ (8001ef0 <ConsoleFunction+0x2bc>)
 8001e58:	f012 fb0c 	bl	8014474 <iprintf>
				printf("\033[%dC", consoleStartIndex + lbPtr + 1);
 8001e5c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001e5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e60:	4413      	add	r3, r2
 8001e62:	3301      	adds	r3, #1
 8001e64:	4619      	mov	r1, r3
 8001e66:	4823      	ldr	r0, [pc, #140]	@ (8001ef4 <ConsoleFunction+0x2c0>)
 8001e68:	f012 fb04 	bl	8014474 <iprintf>
				lbPtr += 1;
 8001e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e6e:	3301      	adds	r3, #1
 8001e70:	657b      	str	r3, [r7, #84]	@ 0x54
				fflush(stdout);
 8001e72:	4b1e      	ldr	r3, [pc, #120]	@ (8001eec <ConsoleFunction+0x2b8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f012 f9b9 	bl	80141f0 <fflush>
 8001e7e:	e007      	b.n	8001e90 <ConsoleFunction+0x25c>
			}
			else
			{
				lineBuff[lbPtr] = myChar;
 8001e80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e84:	4413      	add	r3, r2
 8001e86:	7efa      	ldrb	r2, [r7, #27]
 8001e88:	701a      	strb	r2, [r3, #0]
				lbPtr++;
 8001e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	657b      	str	r3, [r7, #84]	@ 0x54
			}

			if ( lbPtr > CONSOLE_LINE_SIZE )
 8001e90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e92:	2b78      	cmp	r3, #120	@ 0x78
 8001e94:	f240 8312 	bls.w	80024bc <ConsoleFunction+0x888>
			{
				printf("\r\n Buffer Overrun! Clearing input...\r\n");
 8001e98:	4817      	ldr	r0, [pc, #92]	@ (8001ef8 <ConsoleFunction+0x2c4>)
 8001e9a:	f012 fb5b 	bl	8014554 <puts>
				// print new console line and decode the result
				printf("\r\n%s(\033[31m\xE2\x98\x93\033[0m) $>", usernamePtr);
 8001e9e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001ea0:	4816      	ldr	r0, [pc, #88]	@ (8001efc <ConsoleFunction+0x2c8>)
 8001ea2:	f012 fae7 	bl	8014474 <iprintf>
				fflush(stdout);
 8001ea6:	4b11      	ldr	r3, [pc, #68]	@ (8001eec <ConsoleFunction+0x2b8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f012 f99f 	bl	80141f0 <fflush>

				// clear the buffer and restore the pointer
				do
				{
					lineBuff[lbPtr] = ctrlC0_NUL;
 8001eb2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eb6:	4413      	add	r3, r2
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
				    if ( lbPtr == 0 ) break;
 8001ebc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 82f7 	beq.w	80024b2 <ConsoleFunction+0x87e>
				    else lbPtr -= 1;
 8001ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	657b      	str	r3, [r7, #84]	@ 0x54
					lineBuff[lbPtr] = ctrlC0_NUL;
 8001eca:	e7f2      	b.n	8001eb2 <ConsoleFunction+0x27e>
 8001ecc:	080173a8 	.word	0x080173a8
 8001ed0:	08018d40 	.word	0x08018d40
 8001ed4:	080173e8 	.word	0x080173e8
 8001ed8:	080173f8 	.word	0x080173f8
 8001edc:	08017404 	.word	0x08017404
 8001ee0:	0801740c 	.word	0x0801740c
 8001ee4:	08017430 	.word	0x08017430
 8001ee8:	0801747c 	.word	0x0801747c
 8001eec:	200001d4 	.word	0x200001d4
 8001ef0:	08017494 	.word	0x08017494
 8001ef4:	0801749c 	.word	0x0801749c
 8001ef8:	080174a4 	.word	0x080174a4
 8001efc:	080174cc 	.word	0x080174cc
				} while (1);
			}
		}
		else if ( result == csptCONTROL )
 8001f00:	7ebb      	ldrb	r3, [r7, #26]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	f040 82da 	bne.w	80024bc <ConsoleFunction+0x888>
		{
			switch (h->pState.type)
 8001f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0a:	895b      	ldrh	r3, [r3, #10]
 8001f0c:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001f10:	f000 8113 	beq.w	800213a <ConsoleFunction+0x506>
 8001f14:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001f18:	f300 82a5 	bgt.w	8002466 <ConsoleFunction+0x832>
 8001f1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f1e:	f000 8093 	beq.w	8002048 <ConsoleFunction+0x414>
 8001f22:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f24:	f300 829f 	bgt.w	8002466 <ConsoleFunction+0x832>
 8001f28:	2b0d      	cmp	r3, #13
 8001f2a:	d008      	beq.n	8001f3e <ConsoleFunction+0x30a>
 8001f2c:	2b0d      	cmp	r3, #13
 8001f2e:	f300 829a 	bgt.w	8002466 <ConsoleFunction+0x832>
 8001f32:	2b09      	cmp	r3, #9
 8001f34:	f000 80e2 	beq.w	80020fc <ConsoleFunction+0x4c8>
 8001f38:	2b0a      	cmp	r3, #10
 8001f3a:	f040 8294 	bne.w	8002466 <ConsoleFunction+0x832>
			{
				// implicit fall through
			case ctrlC0_LF:
			case ctrlC0_CR:
			{
				putchar(h->pState.type);
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f40:	895b      	ldrh	r3, [r3, #10]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f012 faa8 	bl	8014498 <putchar>
				fflush(stdout);
 8001f48:	4ba8      	ldr	r3, [pc, #672]	@ (80021ec <ConsoleFunction+0x5b8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f012 f94e 	bl	80141f0 <fflush>
					putchar(ctrlC0_CR);
					fflush(stdout);
				}

				// implicit LF on every CR?
				if (1 && h->pState.type == ctrlC0_CR)
 8001f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f56:	895b      	ldrh	r3, [r3, #10]
 8001f58:	2b0d      	cmp	r3, #13
 8001f5a:	d108      	bne.n	8001f6e <ConsoleFunction+0x33a>
				{
					putchar(ctrlC0_LF);
 8001f5c:	200a      	movs	r0, #10
 8001f5e:	f012 fa9b 	bl	8014498 <putchar>
					fflush(stdout);
 8001f62:	4ba2      	ldr	r3, [pc, #648]	@ (80021ec <ConsoleFunction+0x5b8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f012 f941 	bl	80141f0 <fflush>
				}

				// now adapt the line history accordingly
				memcpy(h->history.lines[h->history.lineHead], lineBuff, CONSOLE_LINE_SIZE);
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f70:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f74:	4613      	mov	r3, r2
 8001f76:	015b      	lsls	r3, r3, #5
 8001f78:	1a9b      	subs	r3, r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	3320      	adds	r3, #32
 8001f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f80:	4413      	add	r3, r2
 8001f82:	3304      	adds	r3, #4
 8001f84:	2278      	movs	r2, #120	@ 0x78
 8001f86:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f012 fe2f 	bl	8014bec <memcpy>
				h->history.lineHead = (h->history.lineHead + 1) % CONSOLE_LINE_HISTORY;
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f90:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001f94:	3301      	adds	r3, #1
 8001f96:	425a      	negs	r2, r3
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	f002 0207 	and.w	r2, r2, #7
 8001fa0:	bf58      	it	pl
 8001fa2:	4253      	negpl	r3, r2
 8001fa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fa6:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
				h->history.linePtr = h->history.lineHead;
 8001faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fac:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

				// parse and execute the command and make sure the output streams
				// are flushed before doing anything else with the result
				int result = TransformAndProcessTheCommand(lineBuff, CONSOLE_LINE_SIZE, &h->cState);
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb8:	461a      	mov	r2, r3
 8001fba:	2178      	movs	r1, #120	@ 0x78
 8001fbc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001fbe:	f7ff fb89 	bl	80016d4 <TransformAndProcessTheCommand>
 8001fc2:	60f8      	str	r0, [r7, #12]
				fflush(stdout);
 8001fc4:	4b89      	ldr	r3, [pc, #548]	@ (80021ec <ConsoleFunction+0x5b8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f012 f910 	bl	80141f0 <fflush>
				fflush(stderr);
 8001fd0:	4b86      	ldr	r3, [pc, #536]	@ (80021ec <ConsoleFunction+0x5b8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f012 f90a 	bl	80141f0 <fflush>

#if CONSOLE_USE_DYNAMIC_USERNAME != 0
				// now check if there is a new user name (which is only possible by setenv command
				// which is executed after process command call above...
				usernamePtr = getenv("USERNAME");
 8001fdc:	4884      	ldr	r0, [pc, #528]	@ (80021f0 <ConsoleFunction+0x5bc>)
 8001fde:	f010 f959 	bl	8012294 <getenv>
 8001fe2:	65f8      	str	r0, [r7, #92]	@ 0x5c
				if ( usernamePtr == 0 ) usernamePtr = CONSOLE_USERNAME;
 8001fe4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <ConsoleFunction+0x3ba>
 8001fea:	4b82      	ldr	r3, [pc, #520]	@ (80021f4 <ConsoleFunction+0x5c0>)
 8001fec:	65fb      	str	r3, [r7, #92]	@ 0x5c
				consoleStartIndex = (int)strlen(usernamePtr)+6;
 8001fee:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001ff0:	f7fe f96e 	bl	80002d0 <strlen>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	3306      	adds	r3, #6
 8001ff8:	653b      	str	r3, [r7, #80]	@ 0x50
#endif
				// print new console line and decode the result
				printf("\r\n%s(", usernamePtr);
 8001ffa:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001ffc:	487e      	ldr	r0, [pc, #504]	@ (80021f8 <ConsoleFunction+0x5c4>)
 8001ffe:	f012 fa39 	bl	8014474 <iprintf>
				if (result == 0)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d103      	bne.n	8002010 <ConsoleFunction+0x3dc>
				{
					printf("\033[32m\xE2\x9C\x93\033[0m");
 8002008:	487c      	ldr	r0, [pc, #496]	@ (80021fc <ConsoleFunction+0x5c8>)
 800200a:	f012 fa33 	bl	8014474 <iprintf>
 800200e:	e002      	b.n	8002016 <ConsoleFunction+0x3e2>
				}
				else
				{
					printf("\033[31m\xE2\x98\x93\033[0m");
 8002010:	487b      	ldr	r0, [pc, #492]	@ (8002200 <ConsoleFunction+0x5cc>)
 8002012:	f012 fa2f 	bl	8014474 <iprintf>
				}
				printf(") $>");
 8002016:	487b      	ldr	r0, [pc, #492]	@ (8002204 <ConsoleFunction+0x5d0>)
 8002018:	f012 fa2c 	bl	8014474 <iprintf>
				fflush(stdout);
 800201c:	4b73      	ldr	r3, [pc, #460]	@ (80021ec <ConsoleFunction+0x5b8>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	4618      	mov	r0, r3
 8002024:	f012 f8e4 	bl	80141f0 <fflush>

				// clear the buffer completely because an alias could change
				// the buffer content way more than the user has entered and so
				// we can not only clear lbPtr--!! as we have a safety space we
				// can set CONSOLE_LINE_SIZE as matching pointer value;
				lbPtr = CONSOLE_LINE_SIZE;
 8002028:	2378      	movs	r3, #120	@ 0x78
 800202a:	657b      	str	r3, [r7, #84]	@ 0x54
				do
				{
					lineBuff[lbPtr] = ctrlC0_NUL;
 800202c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800202e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002030:	4413      	add	r3, r2
 8002032:	2200      	movs	r2, #0
 8002034:	701a      	strb	r2, [r3, #0]
					if (lbPtr == 0) break;
 8002036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <ConsoleFunction+0x410>
					else lbPtr -= 1;
 800203c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800203e:	3b01      	subs	r3, #1
 8002040:	657b      	str	r3, [r7, #84]	@ 0x54
					lineBuff[lbPtr] = ctrlC0_NUL;
 8002042:	e7f3      	b.n	800202c <ConsoleFunction+0x3f8>
					if (lbPtr == 0) break;
 8002044:	bf00      	nop
				} while (1);

				break;
 8002046:	e239      	b.n	80024bc <ConsoleFunction+0x888>
			}
			case ctrlC0_DEL:
			{
				if (lbPtr > 0)
 8002048:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8233 	beq.w	80024b6 <ConsoleFunction+0x882>
				{
					int tmpPtr = lbPtr;
 8002050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002052:	647b      	str	r3, [r7, #68]	@ 0x44
					lbPtr -= 1;
 8002054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002056:	3b01      	subs	r3, #1
 8002058:	657b      	str	r3, [r7, #84]	@ 0x54
					lineBuff[lbPtr] = ctrlC0_NUL;
 800205a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800205c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800205e:	4413      	add	r3, r2
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
					putchar(ctrlC0_DEL);
 8002064:	207f      	movs	r0, #127	@ 0x7f
 8002066:	f012 fa17 	bl	8014498 <putchar>
					fflush(stdout);
 800206a:	4b60      	ldr	r3, [pc, #384]	@ (80021ec <ConsoleFunction+0x5b8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	4618      	mov	r0, r3
 8002072:	f012 f8bd 	bl	80141f0 <fflush>
					while (lineBuff[tmpPtr] != ctrlC0_NUL)
 8002076:	e01c      	b.n	80020b2 <ConsoleFunction+0x47e>
					{
						lineBuff[tmpPtr - 1] = lineBuff[tmpPtr];
 8002078:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800207a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800207c:	441a      	add	r2, r3
 800207e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002080:	3b01      	subs	r3, #1
 8002082:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002084:	440b      	add	r3, r1
 8002086:	7812      	ldrb	r2, [r2, #0]
 8002088:	701a      	strb	r2, [r3, #0]
						putchar(lineBuff[tmpPtr - 1]);
 800208a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800208c:	3b01      	subs	r3, #1
 800208e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002090:	4413      	add	r3, r2
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f012 f9ff 	bl	8014498 <putchar>
						fflush(stdout);
 800209a:	4b54      	ldr	r3, [pc, #336]	@ (80021ec <ConsoleFunction+0x5b8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f012 f8a5 	bl	80141f0 <fflush>
						tmpPtr += 1;
 80020a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020a8:	3301      	adds	r3, #1
 80020aa:	647b      	str	r3, [r7, #68]	@ 0x44
						if (tmpPtr >= CONSOLE_LINE_SIZE) break;
 80020ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020ae:	2b77      	cmp	r3, #119	@ 0x77
 80020b0:	dc06      	bgt.n	80020c0 <ConsoleFunction+0x48c>
					while (lineBuff[tmpPtr] != ctrlC0_NUL)
 80020b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80020b6:	4413      	add	r3, r2
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1dc      	bne.n	8002078 <ConsoleFunction+0x444>
 80020be:	e000      	b.n	80020c2 <ConsoleFunction+0x48e>
						if (tmpPtr >= CONSOLE_LINE_SIZE) break;
 80020c0:	bf00      	nop
					}
					lineBuff[tmpPtr - 1] = ctrlC0_NUL;
 80020c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020c4:	3b01      	subs	r3, #1
 80020c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80020c8:	4413      	add	r3, r2
 80020ca:	2200      	movs	r2, #0
 80020cc:	701a      	strb	r2, [r3, #0]
					putchar(' ');
 80020ce:	2020      	movs	r0, #32
 80020d0:	f012 f9e2 	bl	8014498 <putchar>
					fflush(stdout);
 80020d4:	4b45      	ldr	r3, [pc, #276]	@ (80021ec <ConsoleFunction+0x5b8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	4618      	mov	r0, r3
 80020dc:	f012 f888 	bl	80141f0 <fflush>

					int moveBack = tmpPtr - lbPtr;
 80020e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80020e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	643b      	str	r3, [r7, #64]	@ 0x40
					for (; moveBack > 0; moveBack--)
 80020e8:	e004      	b.n	80020f4 <ConsoleFunction+0x4c0>
						PrintConsoleArrowLeft();
 80020ea:	f7ff fcf9 	bl	8001ae0 <PrintConsoleArrowLeft>
					for (; moveBack > 0; moveBack--)
 80020ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020f0:	3b01      	subs	r3, #1
 80020f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80020f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	dcf7      	bgt.n	80020ea <ConsoleFunction+0x4b6>
				}
				break;
 80020fa:	e1dc      	b.n	80024b6 <ConsoleFunction+0x882>
			}
			case ctrlC0_TAB:
			{
				int nums = 4 - (lbPtr % 4);
 80020fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	f1c3 0304 	rsb	r3, r3, #4
 8002106:	63fb      	str	r3, [r7, #60]	@ 0x3c
				for (; nums > 0; nums--)
 8002108:	e013      	b.n	8002132 <ConsoleFunction+0x4fe>
				{
					lineBuff[lbPtr] = ' ';
 800210a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800210c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800210e:	4413      	add	r3, r2
 8002110:	2220      	movs	r2, #32
 8002112:	701a      	strb	r2, [r3, #0]
					lbPtr += 1;
 8002114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002116:	3301      	adds	r3, #1
 8002118:	657b      	str	r3, [r7, #84]	@ 0x54
					putchar(' ');
 800211a:	2020      	movs	r0, #32
 800211c:	f012 f9bc 	bl	8014498 <putchar>
					fflush(stdout);
 8002120:	4b32      	ldr	r3, [pc, #200]	@ (80021ec <ConsoleFunction+0x5b8>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	4618      	mov	r0, r3
 8002128:	f012 f862 	bl	80141f0 <fflush>
				for (; nums > 0; nums--)
 800212c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800212e:	3b01      	subs	r3, #1
 8002130:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002134:	2b00      	cmp	r3, #0
 8002136:	dce8      	bgt.n	800210a <ConsoleFunction+0x4d6>
				}
				break;
 8002138:	e1c0      	b.n	80024bc <ConsoleFunction+0x888>
			}

			case ctrlC1_CSI:
			{
				if (ConsoleIsArrowLeft(&h->pState))
 800213a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213c:	3308      	adds	r3, #8
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fc3c 	bl	80019bc <ConsoleIsArrowLeft>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00c      	beq.n	8002164 <ConsoleFunction+0x530>
				{
					if (lbPtr > 0)
 800214a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 81b4 	beq.w	80024ba <ConsoleFunction+0x886>
					{
						lbPtr -= 1;
 8002152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002154:	3b01      	subs	r3, #1
 8002156:	657b      	str	r3, [r7, #84]	@ 0x54
						PrintConsoleControl(&h->pState);
 8002158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215a:	3308      	adds	r3, #8
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fc01 	bl	8001964 <PrintConsoleControl>
						}
						fflush(stdout);
					}
				}
				else goto unimp;
				break;
 8002162:	e1aa      	b.n	80024ba <ConsoleFunction+0x886>
				else if (ConsoleIsArrowRight(&h->pState))
 8002164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002166:	3308      	adds	r3, #8
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fc43 	bl	80019f4 <ConsoleIsArrowRight>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d021      	beq.n	80021b8 <ConsoleFunction+0x584>
					if (lbPtr < (CONSOLE_LINE_SIZE - 1))
 8002174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002176:	2b76      	cmp	r3, #118	@ 0x76
 8002178:	f200 819f 	bhi.w	80024ba <ConsoleFunction+0x886>
						if (lineBuff[lbPtr] == ctrlC0_NUL)
 800217c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800217e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002180:	4413      	add	r3, r2
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10e      	bne.n	80021a6 <ConsoleFunction+0x572>
							lineBuff[lbPtr] = ' ';
 8002188:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800218a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800218c:	4413      	add	r3, r2
 800218e:	2220      	movs	r2, #32
 8002190:	701a      	strb	r2, [r3, #0]
							putchar(' ');
 8002192:	2020      	movs	r0, #32
 8002194:	f012 f980 	bl	8014498 <putchar>
							fflush(stdout);
 8002198:	4b14      	ldr	r3, [pc, #80]	@ (80021ec <ConsoleFunction+0x5b8>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	4618      	mov	r0, r3
 80021a0:	f012 f826 	bl	80141f0 <fflush>
 80021a4:	e004      	b.n	80021b0 <ConsoleFunction+0x57c>
							PrintConsoleControl(&h->pState);
 80021a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a8:	3308      	adds	r3, #8
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff fbda 	bl	8001964 <PrintConsoleControl>
						lbPtr += 1;
 80021b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021b2:	3301      	adds	r3, #1
 80021b4:	657b      	str	r3, [r7, #84]	@ 0x54
				break;
 80021b6:	e180      	b.n	80024ba <ConsoleFunction+0x886>
				else if (ConsoleIsEntf(&h->pState))
 80021b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ba:	3308      	adds	r3, #8
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff fc6d 	bl	8001a9c <ConsoleIsEntf>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d061      	beq.n	800228c <ConsoleFunction+0x658>
					if (lbPtr < (CONSOLE_LINE_SIZE - 1))
 80021c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021ca:	2b76      	cmp	r3, #118	@ 0x76
 80021cc:	f200 8175 	bhi.w	80024ba <ConsoleFunction+0x886>
						int tmpPtr = lbPtr + 1;
 80021d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021d2:	3301      	adds	r3, #1
 80021d4:	63bb      	str	r3, [r7, #56]	@ 0x38
						lineBuff[lbPtr] = ' ';
 80021d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80021d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021da:	4413      	add	r3, r2
 80021dc:	2220      	movs	r2, #32
 80021de:	701a      	strb	r2, [r3, #0]
						PrintConsoleControl(&h->pState);
 80021e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e2:	3308      	adds	r3, #8
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fbbd 	bl	8001964 <PrintConsoleControl>
						while (lineBuff[tmpPtr] != ctrlC0_NUL)
 80021ea:	e02a      	b.n	8002242 <ConsoleFunction+0x60e>
 80021ec:	200001d4 	.word	0x200001d4
 80021f0:	080173f8 	.word	0x080173f8
 80021f4:	08017404 	.word	0x08017404
 80021f8:	080174e4 	.word	0x080174e4
 80021fc:	080174ec 	.word	0x080174ec
 8002200:	080174fc 	.word	0x080174fc
 8002204:	0801750c 	.word	0x0801750c
							lineBuff[tmpPtr - 1] = lineBuff[tmpPtr];
 8002208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800220a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800220c:	441a      	add	r2, r3
 800220e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002210:	3b01      	subs	r3, #1
 8002212:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002214:	440b      	add	r3, r1
 8002216:	7812      	ldrb	r2, [r2, #0]
 8002218:	701a      	strb	r2, [r3, #0]
							putchar(lineBuff[tmpPtr - 1]);
 800221a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800221c:	3b01      	subs	r3, #1
 800221e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002220:	4413      	add	r3, r2
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f012 f937 	bl	8014498 <putchar>
							fflush(stdout);
 800222a:	4baa      	ldr	r3, [pc, #680]	@ (80024d4 <ConsoleFunction+0x8a0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	4618      	mov	r0, r3
 8002232:	f011 ffdd 	bl	80141f0 <fflush>
							tmpPtr += 1;
 8002236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002238:	3301      	adds	r3, #1
 800223a:	63bb      	str	r3, [r7, #56]	@ 0x38
							if (tmpPtr >= CONSOLE_LINE_SIZE) break;
 800223c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800223e:	2b77      	cmp	r3, #119	@ 0x77
 8002240:	dc06      	bgt.n	8002250 <ConsoleFunction+0x61c>
						while (lineBuff[tmpPtr] != ctrlC0_NUL)
 8002242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002244:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002246:	4413      	add	r3, r2
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1dc      	bne.n	8002208 <ConsoleFunction+0x5d4>
 800224e:	e000      	b.n	8002252 <ConsoleFunction+0x61e>
							if (tmpPtr >= CONSOLE_LINE_SIZE) break;
 8002250:	bf00      	nop
						lineBuff[tmpPtr - 1] = ctrlC0_NUL;
 8002252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002254:	3b01      	subs	r3, #1
 8002256:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002258:	4413      	add	r3, r2
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
						putchar(' ');
 800225e:	2020      	movs	r0, #32
 8002260:	f012 f91a 	bl	8014498 <putchar>
						fflush(stdout);
 8002264:	4b9b      	ldr	r3, [pc, #620]	@ (80024d4 <ConsoleFunction+0x8a0>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	4618      	mov	r0, r3
 800226c:	f011 ffc0 	bl	80141f0 <fflush>
						int moveBack = tmpPtr - lbPtr;
 8002270:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	637b      	str	r3, [r7, #52]	@ 0x34
						for (; moveBack > 0; moveBack--)
 8002278:	e004      	b.n	8002284 <ConsoleFunction+0x650>
							PrintConsoleArrowLeft();
 800227a:	f7ff fc31 	bl	8001ae0 <PrintConsoleArrowLeft>
						for (; moveBack > 0; moveBack--)
 800227e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002280:	3b01      	subs	r3, #1
 8002282:	637b      	str	r3, [r7, #52]	@ 0x34
 8002284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002286:	2b00      	cmp	r3, #0
 8002288:	dcf7      	bgt.n	800227a <ConsoleFunction+0x646>
				break;
 800228a:	e116      	b.n	80024ba <ConsoleFunction+0x886>
				else if (ConsoleIsArrowUp(&h->pState) || ConsoleIsArrowDown(&h->pState))
 800228c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228e:	3308      	adds	r3, #8
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fbcb 	bl	8001a2c <ConsoleIsArrowUp>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d108      	bne.n	80022ae <ConsoleFunction+0x67a>
 800229c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229e:	3308      	adds	r3, #8
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fbdf 	bl	8001a64 <ConsoleIsArrowDown>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 80db 	beq.w	8002464 <ConsoleFunction+0x830>
					if (ConsoleIsArrowUp(&h->pState))
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b0:	3308      	adds	r3, #8
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff fbba 	bl	8001a2c <ConsoleIsArrowUp>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d010      	beq.n	80022e0 <ConsoleFunction+0x6ac>
						h->history.linePtr -= 1;
 80022be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80022c4:	1e5a      	subs	r2, r3, #1
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
						if (h->history.linePtr < 0) h->history.linePtr = CONSOLE_LINE_HISTORY - 1;
 80022cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ce:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	da14      	bge.n	8002300 <ConsoleFunction+0x6cc>
 80022d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d8:	2207      	movs	r2, #7
 80022da:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 80022de:	e00f      	b.n	8002300 <ConsoleFunction+0x6cc>
						h->history.linePtr += 1;
 80022e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ea:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
						if (h->history.linePtr >= CONSOLE_LINE_HISTORY) h->history.linePtr = 0;
 80022ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80022f4:	2b07      	cmp	r3, #7
 80022f6:	dd03      	ble.n	8002300 <ConsoleFunction+0x6cc>
 80022f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fa:	2200      	movs	r2, #0
 80022fc:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
					if (h->history.linePtr == h->history.lineHead)
 8002300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002302:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002308:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800230c:	429a      	cmp	r2, r3
 800230e:	d134      	bne.n	800237a <ConsoleFunction+0x746>
						int inputLength = (int)strnlen(lineBuff, CONSOLE_LINE_SIZE);
 8002310:	2178      	movs	r1, #120	@ 0x78
 8002312:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002314:	f012 fb2b 	bl	801496e <strnlen>
 8002318:	4603      	mov	r3, r0
 800231a:	613b      	str	r3, [r7, #16]
						printf("\033[%dD", CONSOLE_LINE_SIZE + consoleStartIndex);
 800231c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800231e:	3378      	adds	r3, #120	@ 0x78
 8002320:	4619      	mov	r1, r3
 8002322:	486d      	ldr	r0, [pc, #436]	@ (80024d8 <ConsoleFunction+0x8a4>)
 8002324:	f012 f8a6 	bl	8014474 <iprintf>
						printf("\033[%dC", consoleStartIndex);
 8002328:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800232a:	486c      	ldr	r0, [pc, #432]	@ (80024dc <ConsoleFunction+0x8a8>)
 800232c:	f012 f8a2 	bl	8014474 <iprintf>
						for (int i = 0; i < inputLength; i++)
 8002330:	2300      	movs	r3, #0
 8002332:	633b      	str	r3, [r7, #48]	@ 0x30
 8002334:	e005      	b.n	8002342 <ConsoleFunction+0x70e>
							putchar(' ');
 8002336:	2020      	movs	r0, #32
 8002338:	f012 f8ae 	bl	8014498 <putchar>
						for (int i = 0; i < inputLength; i++)
 800233c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233e:	3301      	adds	r3, #1
 8002340:	633b      	str	r3, [r7, #48]	@ 0x30
 8002342:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	429a      	cmp	r2, r3
 8002348:	dbf5      	blt.n	8002336 <ConsoleFunction+0x702>
						memset(lineBuff, 0, CONSOLE_LINE_SIZE);
 800234a:	2278      	movs	r2, #120	@ 0x78
 800234c:	2100      	movs	r1, #0
 800234e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002350:	f012 fae6 	bl	8014920 <memset>
						lbPtr = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	657b      	str	r3, [r7, #84]	@ 0x54
						printf("\033[%dD", CONSOLE_LINE_SIZE + consoleStartIndex);
 8002358:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800235a:	3378      	adds	r3, #120	@ 0x78
 800235c:	4619      	mov	r1, r3
 800235e:	485e      	ldr	r0, [pc, #376]	@ (80024d8 <ConsoleFunction+0x8a4>)
 8002360:	f012 f888 	bl	8014474 <iprintf>
						printf("\033[%dC", consoleStartIndex);
 8002364:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002366:	485d      	ldr	r0, [pc, #372]	@ (80024dc <ConsoleFunction+0x8a8>)
 8002368:	f012 f884 	bl	8014474 <iprintf>
						fflush(stdout);
 800236c:	4b59      	ldr	r3, [pc, #356]	@ (80024d4 <ConsoleFunction+0x8a0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	4618      	mov	r0, r3
 8002374:	f011 ff3c 	bl	80141f0 <fflush>
					if (h->history.linePtr == h->history.lineHead)
 8002378:	e072      	b.n	8002460 <ConsoleFunction+0x82c>
						int inputLength = (int)strnlen(lineBuff, CONSOLE_LINE_SIZE);
 800237a:	2178      	movs	r1, #120	@ 0x78
 800237c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800237e:	f012 faf6 	bl	801496e <strnlen>
 8002382:	4603      	mov	r3, r0
 8002384:	617b      	str	r3, [r7, #20]
						printf("\033[%dD", CONSOLE_LINE_SIZE + consoleStartIndex);
 8002386:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002388:	3378      	adds	r3, #120	@ 0x78
 800238a:	4619      	mov	r1, r3
 800238c:	4852      	ldr	r0, [pc, #328]	@ (80024d8 <ConsoleFunction+0x8a4>)
 800238e:	f012 f871 	bl	8014474 <iprintf>
						printf("\033[%dC", consoleStartIndex);
 8002392:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002394:	4851      	ldr	r0, [pc, #324]	@ (80024dc <ConsoleFunction+0x8a8>)
 8002396:	f012 f86d 	bl	8014474 <iprintf>
						int i = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	62fb      	str	r3, [r7, #44]	@ 0x2c
						for (; i < inputLength; i++)
 800239e:	e005      	b.n	80023ac <ConsoleFunction+0x778>
							putchar(' ');
 80023a0:	2020      	movs	r0, #32
 80023a2:	f012 f879 	bl	8014498 <putchar>
						for (; i < inputLength; i++)
 80023a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a8:	3301      	adds	r3, #1
 80023aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	dbf5      	blt.n	80023a0 <ConsoleFunction+0x76c>
						printf("\033[%dD", CONSOLE_LINE_SIZE + consoleStartIndex);
 80023b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023b6:	3378      	adds	r3, #120	@ 0x78
 80023b8:	4619      	mov	r1, r3
 80023ba:	4847      	ldr	r0, [pc, #284]	@ (80024d8 <ConsoleFunction+0x8a4>)
 80023bc:	f012 f85a 	bl	8014474 <iprintf>
						printf("\033[%dC", consoleStartIndex);
 80023c0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80023c2:	4846      	ldr	r0, [pc, #280]	@ (80024dc <ConsoleFunction+0x8a8>)
 80023c4:	f012 f856 	bl	8014474 <iprintf>
						fflush(stdout);
 80023c8:	4b42      	ldr	r3, [pc, #264]	@ (80024d4 <ConsoleFunction+0x8a0>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f011 ff0e 	bl	80141f0 <fflush>
						i = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
						memset(lineBuff, 0, CONSOLE_LINE_SIZE);
 80023d8:	2278      	movs	r2, #120	@ 0x78
 80023da:	2100      	movs	r1, #0
 80023dc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80023de:	f012 fa9f 	bl	8014920 <memset>
						lbPtr = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	657b      	str	r3, [r7, #84]	@ 0x54
						while (h->history.lines[h->history.linePtr][i] != '\0')
 80023e6:	e026      	b.n	8002436 <ConsoleFunction+0x802>
							putchar(h->history.lines[h->history.linePtr][i]);
 80023e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ea:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80023ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023f0:	4613      	mov	r3, r2
 80023f2:	015b      	lsls	r3, r3, #5
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	18ca      	adds	r2, r1, r3
 80023fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023fc:	4413      	add	r3, r2
 80023fe:	3324      	adds	r3, #36	@ 0x24
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f012 f848 	bl	8014498 <putchar>
							lineBuff[lbPtr] = h->history.lines[h->history.linePtr][i];
 8002408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800240e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002410:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002412:	4419      	add	r1, r3
 8002414:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002416:	4613      	mov	r3, r2
 8002418:	015b      	lsls	r3, r3, #5
 800241a:	1a9b      	subs	r3, r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	18c2      	adds	r2, r0, r3
 8002420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002422:	4413      	add	r3, r2
 8002424:	3324      	adds	r3, #36	@ 0x24
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	700b      	strb	r3, [r1, #0]
							lbPtr++;
 800242a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800242c:	3301      	adds	r3, #1
 800242e:	657b      	str	r3, [r7, #84]	@ 0x54
							i++;
 8002430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002432:	3301      	adds	r3, #1
 8002434:	62fb      	str	r3, [r7, #44]	@ 0x2c
						while (h->history.lines[h->history.linePtr][i] != '\0')
 8002436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002438:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800243c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800243e:	4613      	mov	r3, r2
 8002440:	015b      	lsls	r3, r3, #5
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	18ca      	adds	r2, r1, r3
 8002448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800244a:	4413      	add	r3, r2
 800244c:	3324      	adds	r3, #36	@ 0x24
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1c9      	bne.n	80023e8 <ConsoleFunction+0x7b4>
						fflush(stdout);
 8002454:	4b1f      	ldr	r3, [pc, #124]	@ (80024d4 <ConsoleFunction+0x8a0>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	4618      	mov	r0, r3
 800245c:	f011 fec8 	bl	80141f0 <fflush>
					if (h->history.linePtr == h->history.lineHead)
 8002460:	bf00      	nop
				break;
 8002462:	e02a      	b.n	80024ba <ConsoleFunction+0x886>
				else goto unimp;
 8002464:	bf00      	nop

			// all other non implemented controls
			default:
			{
			unimp:
				printf("UNIMP-CTRL-SEQ: ");
 8002466:	481e      	ldr	r0, [pc, #120]	@ (80024e0 <ConsoleFunction+0x8ac>)
 8002468:	f012 f804 	bl	8014474 <iprintf>
				for (int i = 0; ctrlBuff[i] != '\0'; i++)
 800246c:	2300      	movs	r3, #0
 800246e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002470:	e00f      	b.n	8002492 <ConsoleFunction+0x85e>
					printf("%2.2x(%d) ", ctrlBuff[i], ctrlBuff[i]);
 8002472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002474:	6a3a      	ldr	r2, [r7, #32]
 8002476:	4413      	add	r3, r2
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	4619      	mov	r1, r3
 800247c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800247e:	6a3a      	ldr	r2, [r7, #32]
 8002480:	4413      	add	r3, r2
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	461a      	mov	r2, r3
 8002486:	4817      	ldr	r0, [pc, #92]	@ (80024e4 <ConsoleFunction+0x8b0>)
 8002488:	f011 fff4 	bl	8014474 <iprintf>
				for (int i = 0; ctrlBuff[i] != '\0'; i++)
 800248c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800248e:	3301      	adds	r3, #1
 8002490:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002494:	6a3a      	ldr	r2, [r7, #32]
 8002496:	4413      	add	r3, r2
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1e9      	bne.n	8002472 <ConsoleFunction+0x83e>
				printf("\r\n");
 800249e:	4812      	ldr	r0, [pc, #72]	@ (80024e8 <ConsoleFunction+0x8b4>)
 80024a0:	f012 f858 	bl	8014554 <puts>
				fflush(stdout);
 80024a4:	4b0b      	ldr	r3, [pc, #44]	@ (80024d4 <ConsoleFunction+0x8a0>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f011 fea0 	bl	80141f0 <fflush>
				break;
 80024b0:	e004      	b.n	80024bc <ConsoleFunction+0x888>
				    if ( lbPtr == 0 ) break;
 80024b2:	bf00      	nop
 80024b4:	e002      	b.n	80024bc <ConsoleFunction+0x888>
				break;
 80024b6:	bf00      	nop
 80024b8:	e000      	b.n	80024bc <ConsoleFunction+0x888>
				break;
 80024ba:	bf00      	nop
	while(h->cancel == 0)
 80024bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f43f ac2a 	beq.w	8001d1a <ConsoleFunction+0xe6>


		}
	}

exit:
 80024c6:	e004      	b.n	80024d2 <ConsoleFunction+0x89e>
	if (ctrlBuff == NULL) goto exit;
 80024c8:	bf00      	nop
 80024ca:	e012      	b.n	80024f2 <ConsoleFunction+0x8be>
	if (lineBuff == NULL) goto exit;
 80024cc:	bf00      	nop
 80024ce:	e010      	b.n	80024f2 <ConsoleFunction+0x8be>
			if ( h->cancel == 1 ) goto exit;
 80024d0:	bf00      	nop
	while (h->cancel == 0) vTaskDelay(pdTICKS_TO_MS(100));
 80024d2:	e00e      	b.n	80024f2 <ConsoleFunction+0x8be>
 80024d4:	200001d4 	.word	0x200001d4
 80024d8:	08017494 	.word	0x08017494
 80024dc:	0801749c 	.word	0x0801749c
 80024e0:	08017514 	.word	0x08017514
 80024e4:	08017528 	.word	0x08017528
 80024e8:	08017534 	.word	0x08017534
 80024ec:	2064      	movs	r0, #100	@ 0x64
 80024ee:	f00d fe37 	bl	8010160 <vTaskDelay>
 80024f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f8      	beq.n	80024ec <ConsoleFunction+0x8b8>
	
	printf("Console terminated, cleaning up...");
 80024fa:	482c      	ldr	r0, [pc, #176]	@ (80025ac <ConsoleFunction+0x978>)
 80024fc:	f011 ffba 	bl	8014474 <iprintf>
	fflush(stdout);
 8002500:	4b2b      	ldr	r3, [pc, #172]	@ (80025b0 <ConsoleFunction+0x97c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	4618      	mov	r0, r3
 8002508:	f011 fe72 	bl	80141f0 <fflush>

	xSemaphoreTakeRecursive(h->cState.lockGuard, -1);
 800250c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f04f 31ff 	mov.w	r1, #4294967295
 8002514:	4618      	mov	r0, r3
 8002516:	f00c feef 	bl	800f2f8 <xQueueTakeMutexRecursive>
	while (!LIST_EMPTY(&h->cState.commands))
 800251a:	e01c      	b.n	8002556 <ConsoleFunction+0x922>
	{
		cmdEntry_t* pElement = h->cState.commands.lh_first;
 800251c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	60bb      	str	r3, [r7, #8]
		if (pElement != NULL)
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d01b      	beq.n	8002560 <ConsoleFunction+0x92c>
		{
			LIST_REMOVE(pElement, navigate);
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 800252e:	2b00      	cmp	r3, #0
 8002530:	d007      	beq.n	8002542 <ConsoleFunction+0x90e>
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	f8d2 2260 	ldr.w	r2, [r2, #608]	@ 0x260
 800253e:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	f8d2 225c 	ldr.w	r2, [r2, #604]	@ 0x25c
 800254e:	601a      	str	r2, [r3, #0]
			free(pElement);
 8002550:	68b8      	ldr	r0, [r7, #8]
 8002552:	f00f feef 	bl	8012334 <free>
	while (!LIST_EMPTY(&h->cState.commands))
 8002556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1de      	bne.n	800251c <ConsoleFunction+0x8e8>
 800255e:	e000      	b.n	8002562 <ConsoleFunction+0x92e>
		}
		else break;
 8002560:	bf00      	nop
	}

	xSemaphoreGiveRecursive(h->cState.lockGuard);
 8002562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f00c fe8a 	bl	800f280 <xQueueGiveMutexRecursive>
	vSemaphoreDelete(h->cState.lockGuard);
 800256c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f00d fa1d 	bl	800f9b0 <vQueueDelete>
	free(h);
 8002576:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002578:	f00f fedc 	bl	8012334 <free>
	
	if (lineBuff != NULL) free(lineBuff);
 800257c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <ConsoleFunction+0x954>
 8002582:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002584:	f00f fed6 	bl	8012334 <free>
	if (ctrlBuff != NULL) free(ctrlBuff);
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <ConsoleFunction+0x960>
 800258e:	6a38      	ldr	r0, [r7, #32]
 8002590:	f00f fed0 	bl	8012334 <free>
	printf("done\r\n");
 8002594:	4807      	ldr	r0, [pc, #28]	@ (80025b4 <ConsoleFunction+0x980>)
 8002596:	f011 ffdd 	bl	8014554 <puts>
 800259a:	e000      	b.n	800259e <ConsoleFunction+0x96a>
	if (h == NULL) goto destroy;
 800259c:	bf00      	nop
destroy:
	vTaskDelete(NULL);
 800259e:	2000      	movs	r0, #0
 80025a0:	f00d fd34 	bl	801000c <vTaskDelete>
}
 80025a4:	bf00      	nop
 80025a6:	3760      	adds	r7, #96	@ 0x60
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	08017538 	.word	0x08017538
 80025b0:	200001d4 	.word	0x200001d4
 80025b4:	0801755c 	.word	0x0801755c

080025b8 <ConsolePrintHelp>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsolePrintHelp(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08a      	sub	sp, #40	@ 0x28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	61bb      	str	r3, [r7, #24]
	cmdState_t* c = &h->cState;
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	617b      	str	r3, [r7, #20]
	int found = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	627b      	str	r3, [r7, #36]	@ 0x24
	int cmdLen = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	623b      	str	r3, [r7, #32]
	if ( argc > 0 )
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	dd06      	ble.n	80025e8 <ConsolePrintHelp+0x30>
	{
		cmdLen = (int)strlen(argv[0]);
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fd fe76 	bl	80002d0 <strlen>
 80025e4:	4603      	mov	r3, r0
 80025e6:	623b      	str	r3, [r7, #32]
	}
	xSemaphoreTakeRecursive( c->lockGuard, -1 );
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f04f 31ff 	mov.w	r1, #4294967295
 80025f0:	4618      	mov	r0, r3
 80025f2:	f00c fe81 	bl	800f2f8 <xQueueTakeMutexRecursive>
	cmdEntry_t* pElement = c->commands.lh_first;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	61fb      	str	r3, [r7, #28]

	printf("HELP FOR:\r\n");
 80025fc:	4831      	ldr	r0, [pc, #196]	@ (80026c4 <ConsolePrintHelp+0x10c>)
 80025fe:	f011 ffa9 	bl	8014554 <puts>
	printf("-------------------------------------------------------------------\r\n");
 8002602:	4831      	ldr	r0, [pc, #196]	@ (80026c8 <ConsolePrintHelp+0x110>)
 8002604:	f011 ffa6 	bl	8014554 <puts>
	while ( pElement != NULL )
 8002608:	e048      	b.n	800269c <ConsolePrintHelp+0xe4>
	{
		// if string compare result and determined length match, then this must be the function
		if ( ( argc == 0 ) || ( strncmp(argv[0], pElement->content.cmd, cmdLen) == 0 && cmdLen == pElement->content.cmdLen ) )
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00f      	beq.n	8002630 <ConsolePrintHelp+0x78>
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	6818      	ldr	r0, [r3, #0]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	3308      	adds	r3, #8
 8002618:	6a3a      	ldr	r2, [r7, #32]
 800261a:	4619      	mov	r1, r3
 800261c:	f012 f995 	bl	801494a <strncmp>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d136      	bne.n	8002694 <ConsolePrintHelp+0xdc>
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800262a:	6a3a      	ldr	r2, [r7, #32]
 800262c:	429a      	cmp	r2, r3
 800262e:	d131      	bne.n	8002694 <ConsolePrintHelp+0xdc>
		{
			found = 1;
 8002630:	2301      	movs	r3, #1
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24
			if ( pElement->content.isAlias ) printf("ALIAS\r\n");
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <ConsolePrintHelp+0x8e>
 800263e:	4823      	ldr	r0, [pc, #140]	@ (80026cc <ConsolePrintHelp+0x114>)
 8002640:	f011 ff88 	bl	8014554 <puts>
 8002644:	e002      	b.n	800264c <ConsolePrintHelp+0x94>
			else printf("COMMAND\r\n");
 8002646:	4822      	ldr	r0, [pc, #136]	@ (80026d0 <ConsolePrintHelp+0x118>)
 8002648:	f011 ff84 	bl	8014554 <puts>
			printf("%s\r\n\r\n", pElement->content.cmd);
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	3308      	adds	r3, #8
 8002650:	4619      	mov	r1, r3
 8002652:	4820      	ldr	r0, [pc, #128]	@ (80026d4 <ConsolePrintHelp+0x11c>)
 8002654:	f011 ff0e 	bl	8014474 <iprintf>
			if ( pElement->content.isAlias )
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00c      	beq.n	800267c <ConsolePrintHelp+0xc4>
			{
				printf("MAPPING\r\n");
 8002662:	481d      	ldr	r0, [pc, #116]	@ (80026d8 <ConsolePrintHelp+0x120>)
 8002664:	f011 ff76 	bl	8014554 <puts>
				printf("%s -> '%s'\r\n", pElement->content.cmd, pElement->content.help);
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f103 0108 	add.w	r1, r3, #8
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3350      	adds	r3, #80	@ 0x50
 8002672:	461a      	mov	r2, r3
 8002674:	4819      	ldr	r0, [pc, #100]	@ (80026dc <ConsolePrintHelp+0x124>)
 8002676:	f011 fefd 	bl	8014474 <iprintf>
 800267a:	e008      	b.n	800268e <ConsolePrintHelp+0xd6>
			}
			else
			{
				printf("DESCRIPTION\r\n");
 800267c:	4818      	ldr	r0, [pc, #96]	@ (80026e0 <ConsolePrintHelp+0x128>)
 800267e:	f011 ff69 	bl	8014554 <puts>
				printf("%s\r\n", pElement->content.help);
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3350      	adds	r3, #80	@ 0x50
 8002686:	4619      	mov	r1, r3
 8002688:	4816      	ldr	r0, [pc, #88]	@ (80026e4 <ConsolePrintHelp+0x12c>)
 800268a:	f011 fef3 	bl	8014474 <iprintf>
			}
			printf("-------------------------------------------------------------------\r\n");
 800268e:	480e      	ldr	r0, [pc, #56]	@ (80026c8 <ConsolePrintHelp+0x110>)
 8002690:	f011 ff60 	bl	8014554 <puts>
		}

		pElement = pElement->navigate.le_next;
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 800269a:	61fb      	str	r3, [r7, #28]
	while ( pElement != NULL )
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1b3      	bne.n	800260a <ConsolePrintHelp+0x52>
	}

	xSemaphoreGiveRecursive( c->lockGuard );
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f00c fdea 	bl	800f280 <xQueueGiveMutexRecursive>
	return -(found == 0);
 80026ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	bf0c      	ite	eq
 80026b2:	2301      	moveq	r3, #1
 80026b4:	2300      	movne	r3, #0
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	425b      	negs	r3, r3
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3728      	adds	r7, #40	@ 0x28
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	08017564 	.word	0x08017564
 80026c8:	08017570 	.word	0x08017570
 80026cc:	080175b8 	.word	0x080175b8
 80026d0:	080175c0 	.word	0x080175c0
 80026d4:	080175cc 	.word	0x080175cc
 80026d8:	080175d4 	.word	0x080175d4
 80026dc:	080175e0 	.word	0x080175e0
 80026e0:	080175f0 	.word	0x080175f0
 80026e4:	08017600 	.word	0x08017600

080026e8 <ConsoleExecReset>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleExecReset(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
	(void)argc;
	(void)argv;
	(void)context;
#if defined(__arm__)
	NVIC_SystemReset();
 80026f4:	f7fe fcc4 	bl	8001080 <__NVIC_SystemReset>

080026f8 <ConsolePrintKernelTicks>:
}

// --------------------------------------------------------------------------------------------------------------------
static int ConsolePrintKernelTicks(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
	(void)argc;
	(void)argv;
	(void)context;
	printf("%u", (unsigned int)xTaskGetTickCount());
 8002704:	f00d ffb6 	bl	8010674 <xTaskGetTickCount>
 8002708:	4603      	mov	r3, r0
 800270a:	4619      	mov	r1, r3
 800270c:	4803      	ldr	r0, [pc, #12]	@ (800271c <ConsolePrintKernelTicks+0x24>)
 800270e:	f011 feb1 	bl	8014474 <iprintf>
	return 0;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	08017608 	.word	0x08017608

08002720 <ConsolePrintTaskStats>:

#if defined(configGENERATE_RUN_TIME_STATS) && (configGENERATE_RUN_TIME_STATS != 0)
// --------------------------------------------------------------------------------------------------------------------
static int ConsolePrintTaskStats(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 8002720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002724:	f2ad 5dc4 	subw	sp, sp, #1476	@ 0x5c4
 8002728:	af06      	add	r7, sp, #24
 800272a:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 800272e:	f2a3 539c 	subw	r3, r3, #1436	@ 0x59c
 8002732:	6018      	str	r0, [r3, #0]
 8002734:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002738:	f5a3 63b4 	sub.w	r3, r3, #1440	@ 0x5a0
 800273c:	6019      	str	r1, [r3, #0]
 800273e:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002742:	f2a3 53a4 	subw	r3, r3, #1444	@ 0x5a4
 8002746:	601a      	str	r2, [r3, #0]
	(void)argc;
	(void)argv;
	(void)context;
	unsigned int numTasks = (unsigned int)uxTaskGetNumberOfTasks();
 8002748:	f00d ffa4 	bl	8010694 <uxTaskGetNumberOfTasks>
 800274c:	f8c7 05a0 	str.w	r0, [r7, #1440]	@ 0x5a0
	TaskStatus_t tasks[32]; // a maximium of 32 so far
	configRUN_TIME_COUNTER_TYPE totalTime = 0;
 8002750:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002754:	f5a3 63b3 	sub.w	r3, r3, #1432	@ 0x598
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]

	unsigned int numFeedback = uxTaskGetSystemState( tasks, numTasks, &totalTime);
 800275c:	f107 0210 	add.w	r2, r7, #16
 8002760:	f107 0314 	add.w	r3, r7, #20
 8002764:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	@ 0x5a0
 8002768:	4618      	mov	r0, r3
 800276a:	f00d ff9f 	bl	80106ac <uxTaskGetSystemState>
 800276e:	f8c7 059c 	str.w	r0, [r7, #1436]	@ 0x59c
	if (numFeedback > 0)
 8002772:	f8d7 359c 	ldr.w	r3, [r7, #1436]	@ 0x59c
 8002776:	2b00      	cmp	r3, #0
 8002778:	d008      	beq.n	800278c <ConsolePrintTaskStats+0x6c>
	{
		printf("|----|----------|----------|----------|---------|------------|-------|\r\n");
 800277a:	4876      	ldr	r0, [pc, #472]	@ (8002954 <ConsolePrintTaskStats+0x234>)
 800277c:	f011 feea 	bl	8014554 <puts>
		printf("| ID | NAME     | Prio     | BasePrio | State   | Ticks      | Rel.  |\r\n");
 8002780:	4875      	ldr	r0, [pc, #468]	@ (8002958 <ConsolePrintTaskStats+0x238>)
 8002782:	f011 fee7 	bl	8014554 <puts>
		printf("|----|----------|----------|----------|---------|------------|-------|\r\n");
 8002786:	4873      	ldr	r0, [pc, #460]	@ (8002954 <ConsolePrintTaskStats+0x234>)
 8002788:	f011 fee4 	bl	8014554 <puts>
	}
	for (unsigned int i = 0; i < numFeedback; i++ )
 800278c:	2300      	movs	r3, #0
 800278e:	f8c7 35a4 	str.w	r3, [r7, #1444]	@ 0x5a4
 8002792:	e0d0      	b.n	8002936 <ConsolePrintTaskStats+0x216>
	{
		float relativeRuntime = ( (float)tasks[i].ulRunTimeCounter * 100.0f / (float)totalTime );
 8002794:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002798:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 800279c:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 80027a0:	212c      	movs	r1, #44	@ 0x2c
 80027a2:	fb01 f303 	mul.w	r3, r1, r3
 80027a6:	4413      	add	r3, r2
 80027a8:	3318      	adds	r3, #24
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	ee07 3a90 	vmov	s15, r3
 80027b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027b4:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 800295c <ConsolePrintTaskStats+0x23c>
 80027b8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80027bc:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 80027c0:	f5a3 63b3 	sub.w	r3, r3, #1432	@ 0x598
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	ee07 3a90 	vmov	s15, r3
 80027ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027d2:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 80027d6:	edc3 7a00 	vstr	s15, [r3]
		char* state = (tasks[i].eCurrentState == eRunning) ? "RUN    " :
 80027da:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 80027de:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 80027e2:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 80027e6:	212c      	movs	r1, #44	@ 0x2c
 80027e8:	fb01 f303 	mul.w	r3, r1, r3
 80027ec:	4413      	add	r3, r2
 80027ee:	330c      	adds	r3, #12
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d041      	beq.n	800287a <ConsolePrintTaskStats+0x15a>
			(tasks[i].eCurrentState == eReady) ? "READY  " :
 80027f6:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 80027fa:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 80027fe:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 8002802:	212c      	movs	r1, #44	@ 0x2c
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	4413      	add	r3, r2
 800280a:	330c      	adds	r3, #12
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d031      	beq.n	8002876 <ConsolePrintTaskStats+0x156>
			(tasks[i].eCurrentState == eBlocked) ? "BLOCKED" :
 8002812:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002816:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 800281a:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 800281e:	212c      	movs	r1, #44	@ 0x2c
 8002820:	fb01 f303 	mul.w	r3, r1, r3
 8002824:	4413      	add	r3, r2
 8002826:	330c      	adds	r3, #12
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d021      	beq.n	8002872 <ConsolePrintTaskStats+0x152>
			(tasks[i].eCurrentState == eSuspended) ? "SUSPEND" :
 800282e:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002832:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 8002836:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 800283a:	212c      	movs	r1, #44	@ 0x2c
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	4413      	add	r3, r2
 8002842:	330c      	adds	r3, #12
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b03      	cmp	r3, #3
 8002848:	d011      	beq.n	800286e <ConsolePrintTaskStats+0x14e>
			(tasks[i].eCurrentState == eDeleted) ? "DELETED" : "INVALID";
 800284a:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 800284e:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 8002852:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 8002856:	212c      	movs	r1, #44	@ 0x2c
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	4413      	add	r3, r2
 800285e:	330c      	adds	r3, #12
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b04      	cmp	r3, #4
 8002864:	d101      	bne.n	800286a <ConsolePrintTaskStats+0x14a>
 8002866:	4b3e      	ldr	r3, [pc, #248]	@ (8002960 <ConsolePrintTaskStats+0x240>)
 8002868:	e008      	b.n	800287c <ConsolePrintTaskStats+0x15c>
 800286a:	4b3e      	ldr	r3, [pc, #248]	@ (8002964 <ConsolePrintTaskStats+0x244>)
 800286c:	e006      	b.n	800287c <ConsolePrintTaskStats+0x15c>
			(tasks[i].eCurrentState == eSuspended) ? "SUSPEND" :
 800286e:	4b3e      	ldr	r3, [pc, #248]	@ (8002968 <ConsolePrintTaskStats+0x248>)
 8002870:	e004      	b.n	800287c <ConsolePrintTaskStats+0x15c>
			(tasks[i].eCurrentState == eBlocked) ? "BLOCKED" :
 8002872:	4b3e      	ldr	r3, [pc, #248]	@ (800296c <ConsolePrintTaskStats+0x24c>)
 8002874:	e002      	b.n	800287c <ConsolePrintTaskStats+0x15c>
			(tasks[i].eCurrentState == eReady) ? "READY  " :
 8002876:	4b3e      	ldr	r3, [pc, #248]	@ (8002970 <ConsolePrintTaskStats+0x250>)
 8002878:	e000      	b.n	800287c <ConsolePrintTaskStats+0x15c>
		char* state = (tasks[i].eCurrentState == eRunning) ? "RUN    " :
 800287a:	4b3e      	ldr	r3, [pc, #248]	@ (8002974 <ConsolePrintTaskStats+0x254>)
 800287c:	f8c7 3594 	str.w	r3, [r7, #1428]	@ 0x594
		printf("| %2.2d | %-8.8s | %4.4d     | %4.4d     | %s | %10.10u | %5.1f |\r\n",
			(int)tasks[i].xTaskNumber, (char*)tasks[i].pcTaskName, (int)tasks[i].uxCurrentPriority, 
 8002880:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002884:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 8002888:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 800288c:	212c      	movs	r1, #44	@ 0x2c
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	4413      	add	r3, r2
 8002894:	3308      	adds	r3, #8
 8002896:	681b      	ldr	r3, [r3, #0]
		printf("| %2.2d | %-8.8s | %4.4d     | %4.4d     | %s | %10.10u | %5.1f |\r\n",
 8002898:	4698      	mov	r8, r3
			(int)tasks[i].xTaskNumber, (char*)tasks[i].pcTaskName, (int)tasks[i].uxCurrentPriority, 
 800289a:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 800289e:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 80028a2:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 80028a6:	212c      	movs	r1, #44	@ 0x2c
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	3304      	adds	r3, #4
 80028b0:	681d      	ldr	r5, [r3, #0]
 80028b2:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 80028b6:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 80028ba:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 80028be:	212c      	movs	r1, #44	@ 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	3310      	adds	r3, #16
 80028c8:	681b      	ldr	r3, [r3, #0]
		printf("| %2.2d | %-8.8s | %4.4d     | %4.4d     | %s | %10.10u | %5.1f |\r\n",
 80028ca:	4699      	mov	r9, r3
			(int)tasks[i].uxBasePriority, (char*)state, (unsigned int)tasks[i].ulRunTimeCounter,
 80028cc:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 80028d0:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 80028d4:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 80028d8:	212c      	movs	r1, #44	@ 0x2c
 80028da:	fb01 f303 	mul.w	r3, r1, r3
 80028de:	4413      	add	r3, r2
 80028e0:	3314      	adds	r3, #20
 80028e2:	681b      	ldr	r3, [r3, #0]
		printf("| %2.2d | %-8.8s | %4.4d     | %4.4d     | %s | %10.10u | %5.1f |\r\n",
 80028e4:	461e      	mov	r6, r3
			(int)tasks[i].uxBasePriority, (char*)state, (unsigned int)tasks[i].ulRunTimeCounter,
 80028e6:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 80028ea:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 80028ee:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 80028f2:	212c      	movs	r1, #44	@ 0x2c
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	3318      	adds	r3, #24
 80028fc:	681c      	ldr	r4, [r3, #0]
		printf("| %2.2d | %-8.8s | %4.4d     | %4.4d     | %s | %10.10u | %5.1f |\r\n",
 80028fe:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8002902:	6818      	ldr	r0, [r3, #0]
 8002904:	f7fd fe50 	bl	80005a8 <__aeabi_f2d>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002910:	9402      	str	r4, [sp, #8]
 8002912:	f8d7 3594 	ldr.w	r3, [r7, #1428]	@ 0x594
 8002916:	9301      	str	r3, [sp, #4]
 8002918:	9600      	str	r6, [sp, #0]
 800291a:	464b      	mov	r3, r9
 800291c:	462a      	mov	r2, r5
 800291e:	4641      	mov	r1, r8
 8002920:	4815      	ldr	r0, [pc, #84]	@ (8002978 <ConsolePrintTaskStats+0x258>)
 8002922:	f011 fda7 	bl	8014474 <iprintf>
			(float)relativeRuntime);
		printf("|----|----------|----------|----------|---------|------------|-------|\r\n");
 8002926:	480b      	ldr	r0, [pc, #44]	@ (8002954 <ConsolePrintTaskStats+0x234>)
 8002928:	f011 fe14 	bl	8014554 <puts>
	for (unsigned int i = 0; i < numFeedback; i++ )
 800292c:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 8002930:	3301      	adds	r3, #1
 8002932:	f8c7 35a4 	str.w	r3, [r7, #1444]	@ 0x5a4
 8002936:	f8d7 25a4 	ldr.w	r2, [r7, #1444]	@ 0x5a4
 800293a:	f8d7 359c 	ldr.w	r3, [r7, #1436]	@ 0x59c
 800293e:	429a      	cmp	r2, r3
 8002940:	f4ff af28 	bcc.w	8002794 <ConsolePrintTaskStats+0x74>
	}

	return 0;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	f207 57ac 	addw	r7, r7, #1452	@ 0x5ac
 800294c:	46bd      	mov	sp, r7
 800294e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002952:	bf00      	nop
 8002954:	0801760c 	.word	0x0801760c
 8002958:	08017654 	.word	0x08017654
 800295c:	42c80000 	.word	0x42c80000
 8002960:	0801769c 	.word	0x0801769c
 8002964:	080176a4 	.word	0x080176a4
 8002968:	080176ac 	.word	0x080176ac
 800296c:	080176b4 	.word	0x080176b4
 8002970:	080176bc 	.word	0x080176bc
 8002974:	080176c4 	.word	0x080176c4
 8002978:	080176cc 	.word	0x080176cc

0800297c <ConsolePrintKernelVersion>:
#endif

// --------------------------------------------------------------------------------------------------------------------
static int ConsolePrintKernelVersion(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	617b      	str	r3, [r7, #20]
	(void)h;
	(void)argc;
	(void)argv;

	printf("FreeRTOS Kernel %s", tskKERNEL_VERSION_NUMBER);
 800298c:	4904      	ldr	r1, [pc, #16]	@ (80029a0 <ConsolePrintKernelVersion+0x24>)
 800298e:	4805      	ldr	r0, [pc, #20]	@ (80029a4 <ConsolePrintKernelVersion+0x28>)
 8002990:	f011 fd70 	bl	8014474 <iprintf>
	return 0;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	08017710 	.word	0x08017710
 80029a4:	08017718 	.word	0x08017718

080029a8 <ConsoleWhoAmI>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleWhoAmI(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	613b      	str	r3, [r7, #16]
	(void)h;
	(void)argc;
	(void)argv;

#if CONSOLE_USE_DYNAMIC_USERNAME != 0
	char* usernamePtr = getenv("USERNAME");
 80029b8:	4808      	ldr	r0, [pc, #32]	@ (80029dc <ConsoleWhoAmI+0x34>)
 80029ba:	f00f fc6b 	bl	8012294 <getenv>
 80029be:	6178      	str	r0, [r7, #20]
	if ( usernamePtr == 0 ) usernamePtr = CONSOLE_USERNAME;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <ConsoleWhoAmI+0x22>
 80029c6:	4b06      	ldr	r3, [pc, #24]	@ (80029e0 <ConsoleWhoAmI+0x38>)
 80029c8:	617b      	str	r3, [r7, #20]
#else
	char* usernamePtr = CONSOLE_USERNAME;
#endif

	printf("%s", usernamePtr);
 80029ca:	6979      	ldr	r1, [r7, #20]
 80029cc:	4805      	ldr	r0, [pc, #20]	@ (80029e4 <ConsoleWhoAmI+0x3c>)
 80029ce:	f011 fd51 	bl	8014474 <iprintf>
	return 0;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	080173f8 	.word	0x080173f8
 80029e0:	08017404 	.word	0x08017404
 80029e4:	0801772c 	.word	0x0801772c

080029e8 <ConsoleExit>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleExit(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	617b      	str	r3, [r7, #20]
	(void)h;
	(void)argc;
	(void)argv;

	h->cancel = 1;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2201      	movs	r2, #1
 80029fc:	621a      	str	r2, [r3, #32]
	return 0;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	371c      	adds	r7, #28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <ConsoleMallInfo>:

//---------------------------------------------------------------------------------------------------------------------
static int ConsoleMallInfo(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b090      	sub	sp, #64	@ 0x40
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	(void)h;
	(void)argc;
	(void)argv;

#ifndef WIN32
	struct mallinfo info = mallinfo();
 8002a1c:	f107 0314 	add.w	r3, r7, #20
 8002a20:	4618      	mov	r0, r3
 8002a22:	f00f fd31 	bl	8012488 <mallinfo>
	printf("arena    : %d\r\n", info.arena);
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	480e      	ldr	r0, [pc, #56]	@ (8002a64 <ConsoleMallInfo+0x58>)
 8002a2c:	f011 fd22 	bl	8014474 <iprintf>
	printf("ordblks  : %d\r\n", info.ordblks);
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	4619      	mov	r1, r3
 8002a34:	480c      	ldr	r0, [pc, #48]	@ (8002a68 <ConsoleMallInfo+0x5c>)
 8002a36:	f011 fd1d 	bl	8014474 <iprintf>
	printf("uordblks : %d\r\n", info.uordblks);
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	480b      	ldr	r0, [pc, #44]	@ (8002a6c <ConsoleMallInfo+0x60>)
 8002a40:	f011 fd18 	bl	8014474 <iprintf>
	printf("fordblks : %d\r\n", info.fordblks);
 8002a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a46:	4619      	mov	r1, r3
 8002a48:	4809      	ldr	r0, [pc, #36]	@ (8002a70 <ConsoleMallInfo+0x64>)
 8002a4a:	f011 fd13 	bl	8014474 <iprintf>
	printf("keepcost : %d\r\n", info.keepcost);
 8002a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a50:	4619      	mov	r1, r3
 8002a52:	4808      	ldr	r0, [pc, #32]	@ (8002a74 <ConsoleMallInfo+0x68>)
 8002a54:	f011 fd0e 	bl	8014474 <iprintf>
	return 0;
 8002a58:	2300      	movs	r3, #0
#else
	printf("WIN32 has quite a lot!");
	return -1;
#endif
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3740      	adds	r7, #64	@ 0x40
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	08017730 	.word	0x08017730
 8002a68:	08017740 	.word	0x08017740
 8002a6c:	08017750 	.word	0x08017750
 8002a70:	08017760 	.word	0x08017760
 8002a74:	08017770 	.word	0x08017770

08002a78 <ConsoleGetEnv>:

//---------------------------------------------------------------------------------------------------------------------
static int ConsoleGetEnv(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	617b      	str	r3, [r7, #20]
	(void)h;

	if ( argc > 0 )
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	dd1a      	ble.n	8002ac4 <ConsoleGetEnv+0x4c>
	{
		char* envValue = getenv(argv[0]);
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f00f fbfe 	bl	8012294 <getenv>
 8002a98:	6138      	str	r0, [r7, #16]
		if ( envValue != NULL )
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <ConsoleGetEnv+0x3a>
		{
			printf("%s=%s", argv[0], envValue);
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	480b      	ldr	r0, [pc, #44]	@ (8002ad8 <ConsoleGetEnv+0x60>)
 8002aaa:	f011 fce3 	bl	8014474 <iprintf>
			return 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	e00d      	b.n	8002ace <ConsoleGetEnv+0x56>
		}
		else
		{
			printf("%s is no environment variable", argv[0]);
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4808      	ldr	r0, [pc, #32]	@ (8002adc <ConsoleGetEnv+0x64>)
 8002aba:	f011 fcdb 	bl	8014474 <iprintf>
			return -1;
 8002abe:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac2:	e004      	b.n	8002ace <ConsoleGetEnv+0x56>
		}
	}
	else
	{
		printf("invalid number of arguments");
 8002ac4:	4806      	ldr	r0, [pc, #24]	@ (8002ae0 <ConsoleGetEnv+0x68>)
 8002ac6:	f011 fcd5 	bl	8014474 <iprintf>
		return -1;
 8002aca:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	08017780 	.word	0x08017780
 8002adc:	08017788 	.word	0x08017788
 8002ae0:	080177a8 	.word	0x080177a8

08002ae4 <ConsoleSetEnv>:

//---------------------------------------------------------------------------------------------------------------------
static int ConsoleSetEnv(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	617b      	str	r3, [r7, #20]
	(void)h;
	if ( argc > 1 )
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	dd1a      	ble.n	8002b30 <ConsoleSetEnv+0x4c>
	{
		int result = setenv(argv[0], argv[1], 1);
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	3304      	adds	r3, #4
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2201      	movs	r2, #1
 8002b06:	4619      	mov	r1, r3
 8002b08:	f010 fb62 	bl	80131d0 <setenv>
 8002b0c:	6138      	str	r0, [r7, #16]
		if ( result == 0 )
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <ConsoleSetEnv+0x34>
		{
			return 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	e010      	b.n	8002b3a <ConsoleSetEnv+0x56>
		}
		else
		{
			printf("could not set %s with value %s", argv[0], argv[1]);
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	6819      	ldr	r1, [r3, #0]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	3304      	adds	r3, #4
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	4807      	ldr	r0, [pc, #28]	@ (8002b44 <ConsoleSetEnv+0x60>)
 8002b26:	f011 fca5 	bl	8014474 <iprintf>
			return -1;
 8002b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2e:	e004      	b.n	8002b3a <ConsoleSetEnv+0x56>
		}
	}
	else
	{
		printf("invalid number of arguments");
 8002b30:	4805      	ldr	r0, [pc, #20]	@ (8002b48 <ConsoleSetEnv+0x64>)
 8002b32:	f011 fc9f 	bl	8014474 <iprintf>
		return -1;
 8002b36:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	080177c4 	.word	0x080177c4
 8002b48:	080177a8 	.word	0x080177a8

08002b4c <ConsoleAliasConfig>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleAliasConfig(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b0a8      	sub	sp, #160	@ 0xa0
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	if ( argc == 0 )
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d105      	bne.n	8002b70 <ConsoleAliasConfig+0x24>
	{
		printf("invalid number of arguments");
 8002b64:	4855      	ldr	r0, [pc, #340]	@ (8002cbc <ConsoleAliasConfig+0x170>)
 8002b66:	f011 fc85 	bl	8014474 <iprintf>
		return -1;
 8002b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6e:	e0a0      	b.n	8002cb2 <ConsoleAliasConfig+0x166>
	}

	if( argc == 1 )
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d114      	bne.n	8002ba0 <ConsoleAliasConfig+0x54>
	{
		if ( CONSOLE_RemoveAliasOrCommand(h, argv[0]) == 0 )
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002b80:	f000 fb60 	bl	8003244 <CONSOLE_RemoveAliasOrCommand>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d104      	bne.n	8002b94 <ConsoleAliasConfig+0x48>
		{
			printf("alias removed successfully");
 8002b8a:	484d      	ldr	r0, [pc, #308]	@ (8002cc0 <ConsoleAliasConfig+0x174>)
 8002b8c:	f011 fc72 	bl	8014474 <iprintf>
			return 0;
 8002b90:	2300      	movs	r3, #0
 8002b92:	e08e      	b.n	8002cb2 <ConsoleAliasConfig+0x166>
		}
		else
		{
			printf("alias was not removed");
 8002b94:	484b      	ldr	r0, [pc, #300]	@ (8002cc4 <ConsoleAliasConfig+0x178>)
 8002b96:	f011 fc6d 	bl	8014474 <iprintf>
			return -1;
 8002b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9e:	e088      	b.n	8002cb2 <ConsoleAliasConfig+0x166>
		}
	}
	else
	{
		char aliasBuffer[CONSOLE_LINE_SIZE];
		unsigned int cmdPtr = 1;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		unsigned int buffPtr = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		memset(aliasBuffer, 0, sizeof(aliasBuffer));
 8002bac:	f107 0314 	add.w	r3, r7, #20
 8002bb0:	2278      	movs	r2, #120	@ 0x78
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f011 feb3 	bl	8014920 <memset>
		for( unsigned int i = 0; i < sizeof(aliasBuffer)/sizeof(*aliasBuffer); i++)
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002bc0:	e05d      	b.n	8002c7e <ConsoleAliasConfig+0x132>
		{
			if ( cmdPtr < (unsigned int)argc )
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d24e      	bcs.n	8002c6a <ConsoleAliasConfig+0x11e>
			{
				int argLen = strnlen(argv[cmdPtr], CONSOLE_LINE_SIZE);
 8002bcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2178      	movs	r1, #120	@ 0x78
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f011 fec7 	bl	801496e <strnlen>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				if ( argLen > 0 )
 8002be6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	dd37      	ble.n	8002c5e <ConsoleAliasConfig+0x112>
				{
					if ( (buffPtr+1) + argLen >= CONSOLE_LINE_SIZE )
 8002bee:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002bf2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	2b77      	cmp	r3, #119	@ 0x77
 8002bfc:	d905      	bls.n	8002c0a <ConsoleAliasConfig+0xbe>
					{
						printf("the sum of the alias parameters is longer than the max line buffer size!");
 8002bfe:	4832      	ldr	r0, [pc, #200]	@ (8002cc8 <ConsoleAliasConfig+0x17c>)
 8002c00:	f011 fc38 	bl	8014474 <iprintf>
						return -1;
 8002c04:	f04f 33ff 	mov.w	r3, #4294967295
 8002c08:	e053      	b.n	8002cb2 <ConsoleAliasConfig+0x166>
					}
					else
					{
						memcpy(&aliasBuffer[buffPtr], argv[cmdPtr], argLen);
 8002c0a:	f107 0214 	add.w	r2, r7, #20
 8002c0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c12:	18d0      	adds	r0, r2, r3
 8002c14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002c24:	4619      	mov	r1, r3
 8002c26:	f011 ffe1 	bl	8014bec <memcpy>
						buffPtr += argLen;
 8002c2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c2e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002c32:	4413      	add	r3, r2
 8002c34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
						if ( ( cmdPtr + 1) != (unsigned int)argc )
 8002c38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d012      	beq.n	8002c6a <ConsoleAliasConfig+0x11e>
						{
							aliasBuffer[buffPtr] = ' ';
 8002c44:	f107 0214 	add.w	r2, r7, #20
 8002c48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c4c:	4413      	add	r3, r2
 8002c4e:	2220      	movs	r2, #32
 8002c50:	701a      	strb	r2, [r3, #0]
							buffPtr += 1;
 8002c52:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c56:	3301      	adds	r3, #1
 8002c58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c5c:	e005      	b.n	8002c6a <ConsoleAliasConfig+0x11e>
						}
					}
				}
				else
				{
					printf("at least one of the alias parameters is too long for mapping");
 8002c5e:	481b      	ldr	r0, [pc, #108]	@ (8002ccc <ConsoleAliasConfig+0x180>)
 8002c60:	f011 fc08 	bl	8014474 <iprintf>
					return -1;
 8002c64:	f04f 33ff 	mov.w	r3, #4294967295
 8002c68:	e023      	b.n	8002cb2 <ConsoleAliasConfig+0x166>
				}
			}
			cmdPtr++;
 8002c6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c6e:	3301      	adds	r3, #1
 8002c70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		for( unsigned int i = 0; i < sizeof(aliasBuffer)/sizeof(*aliasBuffer); i++)
 8002c74:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c78:	3301      	adds	r3, #1
 8002c7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c82:	2b77      	cmp	r3, #119	@ 0x77
 8002c84:	d99d      	bls.n	8002bc2 <ConsoleAliasConfig+0x76>
		}
		if ( CONSOLE_RegisterAlias(h, argv[0], aliasBuffer) == 0 )
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f107 0214 	add.w	r2, r7, #20
 8002c8e:	4619      	mov	r1, r3
 8002c90:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002c94:	f000 fa0d 	bl	80030b2 <CONSOLE_RegisterAlias>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d104      	bne.n	8002ca8 <ConsoleAliasConfig+0x15c>
		{
			printf("alias created successfully");
 8002c9e:	480c      	ldr	r0, [pc, #48]	@ (8002cd0 <ConsoleAliasConfig+0x184>)
 8002ca0:	f011 fbe8 	bl	8014474 <iprintf>
			return 0;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	e004      	b.n	8002cb2 <ConsoleAliasConfig+0x166>
		}
		else
		{
			printf("alias was not created");
 8002ca8:	480a      	ldr	r0, [pc, #40]	@ (8002cd4 <ConsoleAliasConfig+0x188>)
 8002caa:	f011 fbe3 	bl	8014474 <iprintf>
			return -1;
 8002cae:	f04f 33ff 	mov.w	r3, #4294967295
		}
	}
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	37a0      	adds	r7, #160	@ 0xa0
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	080177a8 	.word	0x080177a8
 8002cc0:	080177e4 	.word	0x080177e4
 8002cc4:	08017800 	.word	0x08017800
 8002cc8:	08017818 	.word	0x08017818
 8002ccc:	08017864 	.word	0x08017864
 8002cd0:	080178a4 	.word	0x080178a4
 8002cd4:	080178c0 	.word	0x080178c0

08002cd8 <ConsoleRegisterBasicCommands>:

// --------------------------------------------------------------------------------------------------------------------
static void ConsoleRegisterBasicCommands( ConsoleHandle_t h )
// --------------------------------------------------------------------------------------------------------------------
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	6078      	str	r0, [r7, #4]
	CONSOLE_RegisterCommand(h, "help",     "<<help>> prints the help of all commands.\r\nIf a <<command>> is passed as argument to help,\r\nonly the help text of this command will be printed on the console.",
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	4b2c      	ldr	r3, [pc, #176]	@ (8002d98 <ConsoleRegisterBasicCommands+0xc0>)
 8002ce6:	4a2d      	ldr	r2, [pc, #180]	@ (8002d9c <ConsoleRegisterBasicCommands+0xc4>)
 8002ce8:	492d      	ldr	r1, [pc, #180]	@ (8002da0 <ConsoleRegisterBasicCommands+0xc8>)
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f912 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsolePrintHelp, h);
	CONSOLE_RegisterCommand(h, "version",  "<<version>> prints the kernel version of the FreeRTOS kernel with which\r\n the current project has been built.",
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8002da4 <ConsoleRegisterBasicCommands+0xcc>)
 8002cf6:	4a2c      	ldr	r2, [pc, #176]	@ (8002da8 <ConsoleRegisterBasicCommands+0xd0>)
 8002cf8:	492c      	ldr	r1, [pc, #176]	@ (8002dac <ConsoleRegisterBasicCommands+0xd4>)
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f90a 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsolePrintKernelVersion, h);
	CONSOLE_RegisterCommand(h, "whoami",   "<<whoami>> prints the current username which is set in this console instance",
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	4b2a      	ldr	r3, [pc, #168]	@ (8002db0 <ConsoleRegisterBasicCommands+0xd8>)
 8002d06:	4a2b      	ldr	r2, [pc, #172]	@ (8002db4 <ConsoleRegisterBasicCommands+0xdc>)
 8002d08:	492b      	ldr	r1, [pc, #172]	@ (8002db8 <ConsoleRegisterBasicCommands+0xe0>)
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f902 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleWhoAmI, h);
	CONSOLE_RegisterCommand(h, "mallinfo", "<<mallinfo>> returns a structure describing the current state of\r\nmemory allocation.  The structure is defined in malloc.h.  The\r\nfollowing fields are defined: <<arena>> is the total amount of space\r\nin the heap; <<ordblks>> is the number of chunks which are not in use;\r\n<<uordblks>> is the total amount of space allocated by <<malloc>>;\r\n<<fordblks>> is the total amount of space not in use; <<keepcost>> is\r\nthe size of the top most memory block.\r\n",
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	4b29      	ldr	r3, [pc, #164]	@ (8002dbc <ConsoleRegisterBasicCommands+0xe4>)
 8002d16:	4a2a      	ldr	r2, [pc, #168]	@ (8002dc0 <ConsoleRegisterBasicCommands+0xe8>)
 8002d18:	492a      	ldr	r1, [pc, #168]	@ (8002dc4 <ConsoleRegisterBasicCommands+0xec>)
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f8fa 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleMallInfo, h);
	CONSOLE_RegisterCommand(h, "getenv",   "<<getenv>> searches the list of environment variable names and values\r\n(using the global pointer ``<<char **environ>>'') for a variable whose\r\nname matches the string at <[name]>.  If a variable name matches,\r\n<<getenv>> returns a pointer to the associated value.",
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	4b28      	ldr	r3, [pc, #160]	@ (8002dc8 <ConsoleRegisterBasicCommands+0xf0>)
 8002d26:	4a29      	ldr	r2, [pc, #164]	@ (8002dcc <ConsoleRegisterBasicCommands+0xf4>)
 8002d28:	4929      	ldr	r1, [pc, #164]	@ (8002dd0 <ConsoleRegisterBasicCommands+0xf8>)
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f8f2 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleGetEnv, h);
	CONSOLE_RegisterCommand(h, "setenv",   "<<setenv>> is similar to <<getenv>> but it sets a global variable\r\nin the list of environment variable names and values",
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	4b27      	ldr	r3, [pc, #156]	@ (8002dd4 <ConsoleRegisterBasicCommands+0xfc>)
 8002d36:	4a28      	ldr	r2, [pc, #160]	@ (8002dd8 <ConsoleRegisterBasicCommands+0x100>)
 8002d38:	4928      	ldr	r1, [pc, #160]	@ (8002ddc <ConsoleRegisterBasicCommands+0x104>)
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f8ea 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleSetEnv, h);
	CONSOLE_RegisterCommand(h, "exit",     "<<exit>> leaves the running console instance and stops the consoel thread.\r\n It clears all given resources.\r\nThere is no console support after calling <<exit>> anymore",
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	4b26      	ldr	r3, [pc, #152]	@ (8002de0 <ConsoleRegisterBasicCommands+0x108>)
 8002d46:	4a27      	ldr	r2, [pc, #156]	@ (8002de4 <ConsoleRegisterBasicCommands+0x10c>)
 8002d48:	4927      	ldr	r1, [pc, #156]	@ (8002de8 <ConsoleRegisterBasicCommands+0x110>)
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f8e2 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleExit, h);
	CONSOLE_RegisterCommand(h, "reset",     "<<reset>> executes a soft reset of the MCU.",
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	4b25      	ldr	r3, [pc, #148]	@ (8002dec <ConsoleRegisterBasicCommands+0x114>)
 8002d56:	4a26      	ldr	r2, [pc, #152]	@ (8002df0 <ConsoleRegisterBasicCommands+0x118>)
 8002d58:	4926      	ldr	r1, [pc, #152]	@ (8002df4 <ConsoleRegisterBasicCommands+0x11c>)
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f8da 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleExecReset, h);
	CONSOLE_RegisterCommand(h, "ticks",     "<<ticks>> prints the time elapsed since system\r\nis running in the unit of ticks.",
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	4b24      	ldr	r3, [pc, #144]	@ (8002df8 <ConsoleRegisterBasicCommands+0x120>)
 8002d66:	4a25      	ldr	r2, [pc, #148]	@ (8002dfc <ConsoleRegisterBasicCommands+0x124>)
 8002d68:	4925      	ldr	r1, [pc, #148]	@ (8002e00 <ConsoleRegisterBasicCommands+0x128>)
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f8d2 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsolePrintKernelTicks, h);
	CONSOLE_RegisterCommand(h, "alias",     "<<alias>>",
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	4b23      	ldr	r3, [pc, #140]	@ (8002e04 <ConsoleRegisterBasicCommands+0x12c>)
 8002d76:	4a24      	ldr	r2, [pc, #144]	@ (8002e08 <ConsoleRegisterBasicCommands+0x130>)
 8002d78:	4924      	ldr	r1, [pc, #144]	@ (8002e0c <ConsoleRegisterBasicCommands+0x134>)
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f8ca 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleAliasConfig, h);
#if defined(configGENERATE_RUN_TIME_STATS) && (configGENERATE_RUN_TIME_STATS != 0)
	CONSOLE_RegisterCommand(h, "tasks",     "<<tasks>> prints information about the active tasks\r\nand prints also runtime information.",
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	4b22      	ldr	r3, [pc, #136]	@ (8002e10 <ConsoleRegisterBasicCommands+0x138>)
 8002d86:	4a23      	ldr	r2, [pc, #140]	@ (8002e14 <ConsoleRegisterBasicCommands+0x13c>)
 8002d88:	4923      	ldr	r1, [pc, #140]	@ (8002e18 <ConsoleRegisterBasicCommands+0x140>)
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f8c2 	bl	8002f14 <CONSOLE_RegisterCommand>
		ConsolePrintTaskStats, h);
#endif
}
 8002d90:	bf00      	nop
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	080025b9 	.word	0x080025b9
 8002d9c:	080178d8 	.word	0x080178d8
 8002da0:	08017978 	.word	0x08017978
 8002da4:	0800297d 	.word	0x0800297d
 8002da8:	08017980 	.word	0x08017980
 8002dac:	080179f0 	.word	0x080179f0
 8002db0:	080029a9 	.word	0x080029a9
 8002db4:	080179f8 	.word	0x080179f8
 8002db8:	08017a48 	.word	0x08017a48
 8002dbc:	08002a0d 	.word	0x08002a0d
 8002dc0:	08017a50 	.word	0x08017a50
 8002dc4:	08017c14 	.word	0x08017c14
 8002dc8:	08002a79 	.word	0x08002a79
 8002dcc:	08017c20 	.word	0x08017c20
 8002dd0:	08017d28 	.word	0x08017d28
 8002dd4:	08002ae5 	.word	0x08002ae5
 8002dd8:	08017d30 	.word	0x08017d30
 8002ddc:	08017da8 	.word	0x08017da8
 8002de0:	080029e9 	.word	0x080029e9
 8002de4:	08017db0 	.word	0x08017db0
 8002de8:	08017e58 	.word	0x08017e58
 8002dec:	080026e9 	.word	0x080026e9
 8002df0:	08017e60 	.word	0x08017e60
 8002df4:	08017e8c 	.word	0x08017e8c
 8002df8:	080026f9 	.word	0x080026f9
 8002dfc:	08017e94 	.word	0x08017e94
 8002e00:	08017ee8 	.word	0x08017ee8
 8002e04:	08002b4d 	.word	0x08002b4d
 8002e08:	08017ef0 	.word	0x08017ef0
 8002e0c:	08017efc 	.word	0x08017efc
 8002e10:	08002721 	.word	0x08002721
 8002e14:	08017f04 	.word	0x08017f04
 8002e18:	08017f60 	.word	0x08017f60

08002e1c <CONSOLE_CreateInstance>:

// --------------------------------------------------------------------------------------------------------------------
ConsoleHandle_t CONSOLE_CreateInstance( unsigned int uxStackDepth, int xPrio )
// --------------------------------------------------------------------------------------------------------------------
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
#define ON_NULL_GOTO_ERROR(x) do { if ((x) == NULL) goto error; } while(0);
	struct ConsoleHandle* h = calloc(sizeof(struct ConsoleHandle), 1);
 8002e26:	2101      	movs	r1, #1
 8002e28:	f44f 6084 	mov.w	r0, #1056	@ 0x420
 8002e2c:	f00f fa16 	bl	801225c <calloc>
 8002e30:	4603      	mov	r3, r0
 8002e32:	60fb      	str	r3, [r7, #12]
	ON_NULL_GOTO_ERROR(h);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d051      	beq.n	8002ede <CONSOLE_CreateInstance+0xc2>

	h->cState.lockGuard = xSemaphoreCreateRecursiveMutex();
 8002e3a:	2004      	movs	r0, #4
 8002e3c:	f00c fa07 	bl	800f24e <xQueueCreateMutex>
 8002e40:	4602      	mov	r2, r0
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	601a      	str	r2, [r3, #0]
	ON_NULL_GOTO_ERROR(h->cState.lockGuard);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d047      	beq.n	8002ede <CONSOLE_CreateInstance+0xc2>
	h->pState.state = ctrlpsIDLE_DETECT;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	721a      	strb	r2, [r3, #8]
	h->pState.length = 0;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	611a      	str	r2, [r3, #16]
	h->pState.maxLength = CONSOLE_LINE_SIZE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2278      	movs	r2, #120	@ 0x78
 8002e5e:	615a      	str	r2, [r3, #20]
	h->pState.type = ctrlUNKNOWN;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002e66:	815a      	strh	r2, [r3, #10]
	h->pState.buff = NULL;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	619a      	str	r2, [r3, #24]
	h->cancel = 0;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	621a      	str	r2, [r3, #32]
	h->pendingRedirect = 0;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
	h->pendingRdStream = NULL;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
	h->pendingWrStream = NULL;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414

	LIST_INIT(&h->cState.commands);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	605a      	str	r2, [r3, #4]
	ConsoleRegisterBasicCommands(h);
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f7ff ff20 	bl	8002cd8 <ConsoleRegisterBasicCommands>

	memset(h->history.lines, 0, sizeof(h->history.lines));
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	3324      	adds	r3, #36	@ 0x24
 8002e9c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f011 fd3c 	bl	8014920 <memset>
	h->history.linePtr = h->history.lineHead = 0;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

	xTaskCreate(ConsoleFunction, "console", uxStackDepth, h, xPrio, &h->tHandle);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	321c      	adds	r2, #28
 8002ec2:	9201      	str	r2, [sp, #4]
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	4910      	ldr	r1, [pc, #64]	@ (8002f0c <CONSOLE_CreateInstance+0xf0>)
 8002ecc:	4810      	ldr	r0, [pc, #64]	@ (8002f10 <CONSOLE_CreateInstance+0xf4>)
 8002ece:	f00c ff2b 	bl	800fd28 <xTaskCreate>
	ON_NULL_GOTO_ERROR(h->tHandle);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <CONSOLE_CreateInstance+0xc2>
	return h;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	e012      	b.n	8002f04 <CONSOLE_CreateInstance+0xe8>

error:
	if ( h != NULL )
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00e      	beq.n	8002f02 <CONSOLE_CreateInstance+0xe6>
	{
		if ( h->cState.lockGuard != NULL )
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d007      	beq.n	8002efc <CONSOLE_CreateInstance+0xe0>
		{
			vSemaphoreDelete(h->cState.lockGuard);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f00c fd5d 	bl	800f9b0 <vQueueDelete>
			h->cState.lockGuard = NULL;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
		}

		free(h);
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f00f fa19 	bl	8012334 <free>
	}

	return NULL;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	08017f68 	.word	0x08017f68
 8002f10:	08001c35 	.word	0x08001c35

08002f14 <CONSOLE_RegisterCommand>:

// --------------------------------------------------------------------------------------------------------------------
int CONSOLE_RegisterCommand( ConsoleHandle_t h, char* cmd, char* help, CONSOLE_CommandFunc func, void* context )
// --------------------------------------------------------------------------------------------------------------------
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b08c      	sub	sp, #48	@ 0x30
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	603b      	str	r3, [r7, #0]
	int result = -1;
 8002f22:	f04f 33ff 	mov.w	r3, #4294967295
 8002f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if ( cmd == NULL || help == NULL || func == NULL ) return result;
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d005      	beq.n	8002f3a <CONSOLE_RegisterCommand+0x26>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <CONSOLE_RegisterCommand+0x26>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <CONSOLE_RegisterCommand+0x2a>
 8002f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f3c:	e0b5      	b.n	80030aa <CONSOLE_RegisterCommand+0x196>
	if ( *cmd == '\0' || *help == '\0' ) return result;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <CONSOLE_RegisterCommand+0x3a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <CONSOLE_RegisterCommand+0x3e>
 8002f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f50:	e0ab      	b.n	80030aa <CONSOLE_RegisterCommand+0x196>
	int cmdLen  = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	623b      	str	r3, [r7, #32]
	int helpLen = 0;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61fb      	str	r3, [r7, #28]
	if ( (cmdLen  = (int)strnlen(cmd, CONSOLE_COMMAND_MAX_LENGTH+1) )   > CONSOLE_COMMAND_MAX_LENGTH  ) return result;
 8002f5a:	2141      	movs	r1, #65	@ 0x41
 8002f5c:	68b8      	ldr	r0, [r7, #8]
 8002f5e:	f011 fd06 	bl	801496e <strnlen>
 8002f62:	4603      	mov	r3, r0
 8002f64:	623b      	str	r3, [r7, #32]
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	2b40      	cmp	r3, #64	@ 0x40
 8002f6a:	dd01      	ble.n	8002f70 <CONSOLE_RegisterCommand+0x5c>
 8002f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f6e:	e09c      	b.n	80030aa <CONSOLE_RegisterCommand+0x196>
	if ( (helpLen = (int)strnlen(help, CONSOLE_HELP_MAX_LENGTH+1) ) > CONSOLE_HELP_MAX_LENGTH ) return result;
 8002f70:	f240 2101 	movw	r1, #513	@ 0x201
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f011 fcfa 	bl	801496e <strnlen>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f84:	dd01      	ble.n	8002f8a <CONSOLE_RegisterCommand+0x76>
 8002f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f88:	e08f      	b.n	80030aa <CONSOLE_RegisterCommand+0x196>

	// could be called while the scheduler is not running or suspended, so we must not use to use the lock guard
	if ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) xSemaphoreTakeRecursive( h->cState.lockGuard, -1 );
 8002f8a:	f00e f979 	bl	8011280 <xTaskGetSchedulerState>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d106      	bne.n	8002fa2 <CONSOLE_RegisterCommand+0x8e>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f04f 31ff 	mov.w	r1, #4294967295
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f00c f9ab 	bl	800f2f8 <xQueueTakeMutexRecursive>

	cmdState_t* c = &h->cState;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	61bb      	str	r3, [r7, #24]
	int found = 0;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
	cmdEntry_t* pElement = c->commands.lh_first;
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	627b      	str	r3, [r7, #36]	@ 0x24
	while ( pElement != NULL )
 8002fb0:	e015      	b.n	8002fde <CONSOLE_RegisterCommand+0xca>
	{
		// if string compare result and determined length match, then this must be the function
		if ( strncmp(cmd, pElement->content.cmd, cmdLen) == 0 && cmdLen == pElement->content.cmdLen )
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	3308      	adds	r3, #8
 8002fb6:	6a3a      	ldr	r2, [r7, #32]
 8002fb8:	4619      	mov	r1, r3
 8002fba:	68b8      	ldr	r0, [r7, #8]
 8002fbc:	f011 fcc5 	bl	801494a <strncmp>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d107      	bne.n	8002fd6 <CONSOLE_RegisterCommand+0xc2>
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fca:	6a3a      	ldr	r2, [r7, #32]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d102      	bne.n	8002fd6 <CONSOLE_RegisterCommand+0xc2>
		{
			found = 1;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
			break;
 8002fd4:	e006      	b.n	8002fe4 <CONSOLE_RegisterCommand+0xd0>
		}
		pElement = pElement->navigate.le_next;
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd8:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 8002fdc:	627b      	str	r3, [r7, #36]	@ 0x24
	while ( pElement != NULL )
 8002fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1e6      	bne.n	8002fb2 <CONSOLE_RegisterCommand+0x9e>
	}

	if ( found == 1 )
 8002fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d103      	bne.n	8002ff2 <CONSOLE_RegisterCommand+0xde>
	{
		result = -1;
 8002fea:	f04f 33ff 	mov.w	r3, #4294967295
 8002fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ff0:	e050      	b.n	8003094 <CONSOLE_RegisterCommand+0x180>
	}
	else
	{
		struct cmdEntry *item = malloc(sizeof(struct cmdEntry));
 8002ff2:	f44f 7019 	mov.w	r0, #612	@ 0x264
 8002ff6:	f00f f995 	bl	8012324 <malloc>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	617b      	str	r3, [r7, #20]
		if (item == NULL) return result;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <CONSOLE_RegisterCommand+0xf4>
 8003004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003006:	e050      	b.n	80030aa <CONSOLE_RegisterCommand+0x196>
		item->content.isAlias = 0;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	2200      	movs	r2, #0
 800300c:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258
		item->content.cmdLen  = cmdLen;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	6a3a      	ldr	r2, [r7, #32]
 8003014:	64da      	str	r2, [r3, #76]	@ 0x4c
		item->content.helpLen = helpLen;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	69fa      	ldr	r2, [r7, #28]
 800301a:	f8c3 2254 	str.w	r2, [r3, #596]	@ 0x254
		item->content.func    = func;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	601a      	str	r2, [r3, #0]
		item->content.ctx     = context;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003028:	605a      	str	r2, [r3, #4]
		memcpy(item->content.cmd, cmd, cmdLen);
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	3308      	adds	r3, #8
 800302e:	6a3a      	ldr	r2, [r7, #32]
 8003030:	68b9      	ldr	r1, [r7, #8]
 8003032:	4618      	mov	r0, r3
 8003034:	f011 fdda 	bl	8014bec <memcpy>
		item->content.cmd[cmdLen] = '\0';
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	4413      	add	r3, r2
 800303e:	3308      	adds	r3, #8
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]
		memcpy(item->content.help, help, helpLen);
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	3350      	adds	r3, #80	@ 0x50
 8003048:	69fa      	ldr	r2, [r7, #28]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4618      	mov	r0, r3
 800304e:	f011 fdcd 	bl	8014bec <memcpy>
		item->content.help[helpLen] = '\0';
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	4413      	add	r3, r2
 8003058:	3350      	adds	r3, #80	@ 0x50
 800305a:	2200      	movs	r2, #0
 800305c:	701a      	strb	r2, [r3, #0]
		LIST_INSERT_HEAD(&h->cState.commands, item, navigate);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 800306e:	2b00      	cmp	r3, #0
 8003070:	d006      	beq.n	8003080 <CONSOLE_RegisterCommand+0x16c>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	f502 7217 	add.w	r2, r2, #604	@ 0x25c
 800307c:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	1d1a      	adds	r2, r3, #4
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
		result = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	// could be called while the scheduler is not running or suspended, so we must not use to use the lock guard
	if ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) xSemaphoreGiveRecursive( h->cState.lockGuard );
 8003094:	f00e f8f4 	bl	8011280 <xTaskGetSchedulerState>
 8003098:	4603      	mov	r3, r0
 800309a:	2b02      	cmp	r3, #2
 800309c:	d104      	bne.n	80030a8 <CONSOLE_RegisterCommand+0x194>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f00c f8ec 	bl	800f280 <xQueueGiveMutexRecursive>
	return result;
 80030a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3730      	adds	r7, #48	@ 0x30
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <CONSOLE_RegisterAlias>:


// --------------------------------------------------------------------------------------------------------------------
int CONSOLE_RegisterAlias( ConsoleHandle_t h, char* cmd, char* aliasCmd )
// --------------------------------------------------------------------------------------------------------------------
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b08c      	sub	sp, #48	@ 0x30
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	607a      	str	r2, [r7, #4]
	int result = -1;
 80030be:	f04f 33ff 	mov.w	r3, #4294967295
 80030c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if ( cmd == NULL || aliasCmd == NULL ) return result;
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <CONSOLE_RegisterAlias+0x1e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <CONSOLE_RegisterAlias+0x22>
 80030d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030d2:	e0b3      	b.n	800323c <CONSOLE_RegisterAlias+0x18a>
	if ( *cmd == '\0' || *aliasCmd == '\0' ) return result;
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <CONSOLE_RegisterAlias+0x32>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <CONSOLE_RegisterAlias+0x36>
 80030e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e6:	e0a9      	b.n	800323c <CONSOLE_RegisterAlias+0x18a>
	int cmdLen  = 0;
 80030e8:	2300      	movs	r3, #0
 80030ea:	623b      	str	r3, [r7, #32]
	int aliasCmdLen = 0;
 80030ec:	2300      	movs	r3, #0
 80030ee:	61fb      	str	r3, [r7, #28]
	if ( (cmdLen      = (int)strnlen(cmd, CONSOLE_COMMAND_MAX_LENGTH+1) )      > CONSOLE_COMMAND_MAX_LENGTH ) return result;
 80030f0:	2141      	movs	r1, #65	@ 0x41
 80030f2:	68b8      	ldr	r0, [r7, #8]
 80030f4:	f011 fc3b 	bl	801496e <strnlen>
 80030f8:	4603      	mov	r3, r0
 80030fa:	623b      	str	r3, [r7, #32]
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	2b40      	cmp	r3, #64	@ 0x40
 8003100:	dd01      	ble.n	8003106 <CONSOLE_RegisterAlias+0x54>
 8003102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003104:	e09a      	b.n	800323c <CONSOLE_RegisterAlias+0x18a>
	if ( (aliasCmdLen = (int)strnlen(aliasCmd, CONSOLE_COMMAND_MAX_LENGTH+1) ) > CONSOLE_COMMAND_MAX_LENGTH ) return result;
 8003106:	2141      	movs	r1, #65	@ 0x41
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f011 fc30 	bl	801496e <strnlen>
 800310e:	4603      	mov	r3, r0
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	2b40      	cmp	r3, #64	@ 0x40
 8003116:	dd01      	ble.n	800311c <CONSOLE_RegisterAlias+0x6a>
 8003118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800311a:	e08f      	b.n	800323c <CONSOLE_RegisterAlias+0x18a>

	// could be called while the scheduler is not running or suspended, so we must not use to use the lock guard
	if ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) xSemaphoreTakeRecursive( h->cState.lockGuard, -1 );
 800311c:	f00e f8b0 	bl	8011280 <xTaskGetSchedulerState>
 8003120:	4603      	mov	r3, r0
 8003122:	2b02      	cmp	r3, #2
 8003124:	d106      	bne.n	8003134 <CONSOLE_RegisterAlias+0x82>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f04f 31ff 	mov.w	r1, #4294967295
 800312e:	4618      	mov	r0, r3
 8003130:	f00c f8e2 	bl	800f2f8 <xQueueTakeMutexRecursive>

	cmdState_t* c = &h->cState;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	61bb      	str	r3, [r7, #24]
	int found = 0;
 8003138:	2300      	movs	r3, #0
 800313a:	62bb      	str	r3, [r7, #40]	@ 0x28
	cmdEntry_t* pElement = c->commands.lh_first;
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	627b      	str	r3, [r7, #36]	@ 0x24
	while ( pElement != NULL )
 8003142:	e015      	b.n	8003170 <CONSOLE_RegisterAlias+0xbe>
	{
		// if string compare result and determined length match, then this must be the function
		if ( strncmp(cmd, pElement->content.cmd, cmdLen) == 0 && cmdLen == pElement->content.cmdLen )
 8003144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003146:	3308      	adds	r3, #8
 8003148:	6a3a      	ldr	r2, [r7, #32]
 800314a:	4619      	mov	r1, r3
 800314c:	68b8      	ldr	r0, [r7, #8]
 800314e:	f011 fbfc 	bl	801494a <strncmp>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d107      	bne.n	8003168 <CONSOLE_RegisterAlias+0xb6>
 8003158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800315c:	6a3a      	ldr	r2, [r7, #32]
 800315e:	429a      	cmp	r2, r3
 8003160:	d102      	bne.n	8003168 <CONSOLE_RegisterAlias+0xb6>
		{
			found = 1;
 8003162:	2301      	movs	r3, #1
 8003164:	62bb      	str	r3, [r7, #40]	@ 0x28
			break;
 8003166:	e006      	b.n	8003176 <CONSOLE_RegisterAlias+0xc4>
		}
		pElement = pElement->navigate.le_next;
 8003168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316a:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 800316e:	627b      	str	r3, [r7, #36]	@ 0x24
	while ( pElement != NULL )
 8003170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1e6      	bne.n	8003144 <CONSOLE_RegisterAlias+0x92>
	}

	if ( found == 1 )
 8003176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003178:	2b01      	cmp	r3, #1
 800317a:	d103      	bne.n	8003184 <CONSOLE_RegisterAlias+0xd2>
	{
		result = -1;
 800317c:	f04f 33ff 	mov.w	r3, #4294967295
 8003180:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003182:	e050      	b.n	8003226 <CONSOLE_RegisterAlias+0x174>
	}
	else
	{
		struct cmdEntry *item = malloc(sizeof(struct cmdEntry));
 8003184:	f44f 7019 	mov.w	r0, #612	@ 0x264
 8003188:	f00f f8cc 	bl	8012324 <malloc>
 800318c:	4603      	mov	r3, r0
 800318e:	617b      	str	r3, [r7, #20]
		if (item == NULL) return result;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <CONSOLE_RegisterAlias+0xe8>
 8003196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003198:	e050      	b.n	800323c <CONSOLE_RegisterAlias+0x18a>
		item->content.isAlias = 1;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2201      	movs	r2, #1
 800319e:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258
		item->content.cmdLen  = cmdLen;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	6a3a      	ldr	r2, [r7, #32]
 80031a6:	64da      	str	r2, [r3, #76]	@ 0x4c
		item->content.helpLen = aliasCmdLen;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	f8c3 2254 	str.w	r2, [r3, #596]	@ 0x254
		item->content.func    = NULL;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
		item->content.ctx     = NULL;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2200      	movs	r2, #0
 80031ba:	605a      	str	r2, [r3, #4]
		memcpy(item->content.cmd, cmd, cmdLen);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	3308      	adds	r3, #8
 80031c0:	6a3a      	ldr	r2, [r7, #32]
 80031c2:	68b9      	ldr	r1, [r7, #8]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f011 fd11 	bl	8014bec <memcpy>
		item->content.cmd[cmdLen] = '\0';
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	4413      	add	r3, r2
 80031d0:	3308      	adds	r3, #8
 80031d2:	2200      	movs	r2, #0
 80031d4:	701a      	strb	r2, [r3, #0]
		memcpy(item->content.help, aliasCmd, aliasCmdLen);
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	3350      	adds	r3, #80	@ 0x50
 80031da:	69fa      	ldr	r2, [r7, #28]
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	4618      	mov	r0, r3
 80031e0:	f011 fd04 	bl	8014bec <memcpy>
		item->content.help[aliasCmdLen] = '\0';
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	4413      	add	r3, r2
 80031ea:	3350      	adds	r3, #80	@ 0x50
 80031ec:	2200      	movs	r2, #0
 80031ee:	701a      	strb	r2, [r3, #0]
		LIST_INSERT_HEAD(&h->cState.commands, item, navigate);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 8003200:	2b00      	cmp	r3, #0
 8003202:	d006      	beq.n	8003212 <CONSOLE_RegisterAlias+0x160>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	f502 7217 	add.w	r2, r2, #604	@ 0x25c
 800320e:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	605a      	str	r2, [r3, #4]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1d1a      	adds	r2, r3, #4
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
		result = 0;
 8003222:	2300      	movs	r3, #0
 8003224:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	// could be called while the scheduler is not running or suspended, so we must not use to use the lock guard
	if ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) xSemaphoreGiveRecursive( h->cState.lockGuard );
 8003226:	f00e f82b 	bl	8011280 <xTaskGetSchedulerState>
 800322a:	4603      	mov	r3, r0
 800322c:	2b02      	cmp	r3, #2
 800322e:	d104      	bne.n	800323a <CONSOLE_RegisterAlias+0x188>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f00c f823 	bl	800f280 <xQueueGiveMutexRecursive>
	return result;
 800323a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800323c:	4618      	mov	r0, r3
 800323e:	3730      	adds	r7, #48	@ 0x30
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <CONSOLE_RemoveAliasOrCommand>:

// --------------------------------------------------------------------------------------------------------------------
int CONSOLE_RemoveAliasOrCommand( ConsoleHandle_t h, char* cmd)
// --------------------------------------------------------------------------------------------------------------------
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
	int result = -1;
 800324e:	f04f 33ff 	mov.w	r3, #4294967295
 8003252:	61fb      	str	r3, [r7, #28]
	if ( cmd == NULL ) return result;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <CONSOLE_RemoveAliasOrCommand+0x1a>
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	e066      	b.n	800332c <CONSOLE_RemoveAliasOrCommand+0xe8>
	if ( *cmd == '\0' ) return result;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <CONSOLE_RemoveAliasOrCommand+0x26>
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	e060      	b.n	800332c <CONSOLE_RemoveAliasOrCommand+0xe8>
	int cmdLen  = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	613b      	str	r3, [r7, #16]
	if ( (cmdLen      = (int)strnlen(cmd, CONSOLE_COMMAND_MAX_LENGTH+1) ) > CONSOLE_COMMAND_MAX_LENGTH ) return result;
 800326e:	2141      	movs	r1, #65	@ 0x41
 8003270:	6838      	ldr	r0, [r7, #0]
 8003272:	f011 fb7c 	bl	801496e <strnlen>
 8003276:	4603      	mov	r3, r0
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	2b40      	cmp	r3, #64	@ 0x40
 800327e:	dd01      	ble.n	8003284 <CONSOLE_RemoveAliasOrCommand+0x40>
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	e053      	b.n	800332c <CONSOLE_RemoveAliasOrCommand+0xe8>

	// could be called while the scheduler is not running or suspended, so we must not use to use the lock guard
	if ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) xSemaphoreTakeRecursive( h->cState.lockGuard, -1 );
 8003284:	f00d fffc 	bl	8011280 <xTaskGetSchedulerState>
 8003288:	4603      	mov	r3, r0
 800328a:	2b02      	cmp	r3, #2
 800328c:	d106      	bne.n	800329c <CONSOLE_RemoveAliasOrCommand+0x58>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f04f 31ff 	mov.w	r1, #4294967295
 8003296:	4618      	mov	r0, r3
 8003298:	f00c f82e 	bl	800f2f8 <xQueueTakeMutexRecursive>

	cmdState_t* c = &h->cState;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	60fb      	str	r3, [r7, #12]
	int found = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	61bb      	str	r3, [r7, #24]
	cmdEntry_t* pElement = c->commands.lh_first;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	617b      	str	r3, [r7, #20]
	while ( pElement != NULL )
 80032aa:	e015      	b.n	80032d8 <CONSOLE_RemoveAliasOrCommand+0x94>
	{
		// if string compare result and determined length match, then this must be the function
		if ( strncmp(cmd, pElement->content.cmd, cmdLen) == 0 && cmdLen == pElement->content.cmdLen )
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	3308      	adds	r3, #8
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	4619      	mov	r1, r3
 80032b4:	6838      	ldr	r0, [r7, #0]
 80032b6:	f011 fb48 	bl	801494a <strncmp>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d107      	bne.n	80032d0 <CONSOLE_RemoveAliasOrCommand+0x8c>
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d102      	bne.n	80032d0 <CONSOLE_RemoveAliasOrCommand+0x8c>
		{
			found = 1;
 80032ca:	2301      	movs	r3, #1
 80032cc:	61bb      	str	r3, [r7, #24]
			break;
 80032ce:	e006      	b.n	80032de <CONSOLE_RemoveAliasOrCommand+0x9a>
		}
		pElement = pElement->navigate.le_next;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 80032d6:	617b      	str	r3, [r7, #20]
	while ( pElement != NULL )
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1e6      	bne.n	80032ac <CONSOLE_RemoveAliasOrCommand+0x68>
	}

	if ( found == 1 )
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d118      	bne.n	8003316 <CONSOLE_RemoveAliasOrCommand+0xd2>
	{
		LIST_REMOVE(pElement, navigate);
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d007      	beq.n	80032fe <CONSOLE_RemoveAliasOrCommand+0xba>
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	f8d2 2260 	ldr.w	r2, [r2, #608]	@ 0x260
 80032fa:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	f8d2 225c 	ldr.w	r2, [r2, #604]	@ 0x25c
 800330a:	601a      	str	r2, [r3, #0]
		free(pElement);
 800330c:	6978      	ldr	r0, [r7, #20]
 800330e:	f00f f811 	bl	8012334 <free>
		result = 0;
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
	}

	// could be called while the scheduler is not running or suspended, so we must not use to use the lock guard
	if ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) xSemaphoreGiveRecursive( h->cState.lockGuard );
 8003316:	f00d ffb3 	bl	8011280 <xTaskGetSchedulerState>
 800331a:	4603      	mov	r3, r0
 800331c:	2b02      	cmp	r3, #2
 800331e:	d104      	bne.n	800332a <CONSOLE_RemoveAliasOrCommand+0xe6>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f00b ffab 	bl	800f280 <xQueueGiveMutexRecursive>
	return result;
 800332a:	69fb      	ldr	r3, [r7, #28]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3720      	adds	r7, #32
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <SPINDLE_SetDirection>:
int SpindleStop(void);
int SpindleStatus(void);


void SPINDLE_SetDirection(SpindleHandle_t h, void *context, int backward)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  (void)h;
  (void)context;
  spindleContext.direction = backward;
 8003340:	4a08      	ldr	r2, [pc, #32]	@ (8003364 <SPINDLE_SetDirection+0x30>)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6013      	str	r3, [r2, #0]

  if (backward)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <SPINDLE_SetDirection+0x20>
  {
    printf("Setting spindle direction: backward (counter-clockwise)\r\n");
 800334c:	4806      	ldr	r0, [pc, #24]	@ (8003368 <SPINDLE_SetDirection+0x34>)
 800334e:	f011 f901 	bl	8014554 <puts>
  }
  else
  {
    printf("Setting spindle direction: forward (clockwise)\r\n");
  }
}
 8003352:	e002      	b.n	800335a <SPINDLE_SetDirection+0x26>
    printf("Setting spindle direction: forward (clockwise)\r\n");
 8003354:	4805      	ldr	r0, [pc, #20]	@ (800336c <SPINDLE_SetDirection+0x38>)
 8003356:	f011 f8fd 	bl	8014554 <puts>
}
 800335a:	bf00      	nop
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20000240 	.word	0x20000240
 8003368:	08017f70 	.word	0x08017f70
 800336c:	08017fac 	.word	0x08017fac

08003370 <SPINDLE_SetDutyCycle>:

void SPINDLE_SetDutyCycle(SpindleHandle_t h, void *context, float dutyCycle)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)h;
  (void)context;
  int arr = TIM2->ARR;
 800337e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003384:	617b      	str	r3, [r7, #20]
  if (spindleContext.direction)
 8003386:	4b19      	ldr	r3, [pc, #100]	@ (80033ec <SPINDLE_SetDutyCycle+0x7c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d014      	beq.n	80033b8 <SPINDLE_SetDutyCycle+0x48>
   {
      TIM2->CCR3 = 0;
 800338e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003392:	2200      	movs	r2, #0
 8003394:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2->CCR4 = (int)((float)arr * dutyCycle);
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	ee07 3a90 	vmov	s15, r3
 800339c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80033a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80033b0:	ee17 2a90 	vmov	r2, s15
 80033b4:	641a      	str	r2, [r3, #64]	@ 0x40
   {
      TIM2->CCR3 = (int)((float)arr * dutyCycle);
      TIM2->CCR4 = 0;
   }
  
}
 80033b6:	e013      	b.n	80033e0 <SPINDLE_SetDutyCycle+0x70>
      TIM2->CCR3 = (int)((float)arr * dutyCycle);
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	ee07 3a90 	vmov	s15, r3
 80033be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80033c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80033d2:	ee17 2a90 	vmov	r2, s15
 80033d6:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2->CCR4 = 0;
 80033d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80033dc:	2200      	movs	r2, #0
 80033de:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80033e0:	bf00      	nop
 80033e2:	371c      	adds	r7, #28
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	20000240 	.word	0x20000240

080033f0 <SPINDLE_EnaPWM>:

void SPINDLE_EnaPWM(SpindleHandle_t h, void *context, int ena)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  (void)h;
  (void)context;

  HAL_GPIO_WritePin(SPINDLE_ENA_L_GPIO_Port, SPINDLE_ENA_L_Pin, ena);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	461a      	mov	r2, r3
 8003402:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003406:	480d      	ldr	r0, [pc, #52]	@ (800343c <SPINDLE_EnaPWM+0x4c>)
 8003408:	f004 ff04 	bl	8008214 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPINDLE_ENA_R_GPIO_Port, SPINDLE_ENA_R_Pin, ena);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003416:	4809      	ldr	r0, [pc, #36]	@ (800343c <SPINDLE_EnaPWM+0x4c>)
 8003418:	f004 fefc 	bl	8008214 <HAL_GPIO_WritePin>

  if (ena)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d007      	beq.n	8003432 <SPINDLE_EnaPWM+0x42>
  {
      HAL_TIM_PWM_Start(&spindleContext.timer, TIM_CHANNEL_3);
 8003422:	2108      	movs	r1, #8
 8003424:	4806      	ldr	r0, [pc, #24]	@ (8003440 <SPINDLE_EnaPWM+0x50>)
 8003426:	f007 ff57 	bl	800b2d8 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&spindleContext.timer, TIM_CHANNEL_4);
 800342a:	210c      	movs	r1, #12
 800342c:	4804      	ldr	r0, [pc, #16]	@ (8003440 <SPINDLE_EnaPWM+0x50>)
 800342e:	f007 ff53 	bl	800b2d8 <HAL_TIM_PWM_Start>
  }
}
 8003432:	bf00      	nop
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40021000 	.word	0x40021000
 8003440:	20000244 	.word	0x20000244

08003444 <InitSpindle>:

void InitSpindle(ConsoleHandle_t* consoleHandle, TIM_HandleTypeDef* htim)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08a      	sub	sp, #40	@ 0x28
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  // Initialize the spindle parameters
  SpindlePhysicalParams_t s;
  s.maxRPM = 9000.0f;
 800344e:	4b18      	ldr	r3, [pc, #96]	@ (80034b0 <InitSpindle+0x6c>)
 8003450:	61bb      	str	r3, [r7, #24]
  s.minRPM = -9000.0f;
 8003452:	4b18      	ldr	r3, [pc, #96]	@ (80034b4 <InitSpindle+0x70>)
 8003454:	623b      	str	r3, [r7, #32]
  s.absMinRPM = 1600.0f;
 8003456:	4b18      	ldr	r3, [pc, #96]	@ (80034b8 <InitSpindle+0x74>)
 8003458:	61fb      	str	r3, [r7, #28]
  s.setDirection = SPINDLE_SetDirection;
 800345a:	4b18      	ldr	r3, [pc, #96]	@ (80034bc <InitSpindle+0x78>)
 800345c:	60fb      	str	r3, [r7, #12]
  s.setDutyCycle = SPINDLE_SetDutyCycle;
 800345e:	4b18      	ldr	r3, [pc, #96]	@ (80034c0 <InitSpindle+0x7c>)
 8003460:	613b      	str	r3, [r7, #16]
  s.enaPWM = SPINDLE_EnaPWM;
 8003462:	4b18      	ldr	r3, [pc, #96]	@ (80034c4 <InitSpindle+0x80>)
 8003464:	617b      	str	r3, [r7, #20]
  s.context = NULL;
 8003466:	2300      	movs	r3, #0
 8003468:	627b      	str	r3, [r7, #36]	@ 0x24

  spindleContext.handle= SPINDLE_CreateInstance(4 * configMINIMAL_STACK_SIZE,
 800346a:	f107 030c 	add.w	r3, r7, #12
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	2104      	movs	r1, #4
 8003472:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003476:	f001 fdcf 	bl	8005018 <SPINDLE_CreateInstance>
 800347a:	4603      	mov	r3, r0
 800347c:	4a12      	ldr	r2, [pc, #72]	@ (80034c8 <InitSpindle+0x84>)
 800347e:	6513      	str	r3, [r2, #80]	@ 0x50
                                         configMAX_PRIORITIES - 3,
                                         consoleHandle, &s);

  if (spindleContext.handle == NULL)
 8003480:	4b11      	ldr	r3, [pc, #68]	@ (80034c8 <InitSpindle+0x84>)
 8003482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003484:	2b00      	cmp	r3, #0
 8003486:	d104      	bne.n	8003492 <InitSpindle+0x4e>
  {
    printf("Failed to create spindle controller instance\r\n");
 8003488:	4810      	ldr	r0, [pc, #64]	@ (80034cc <InitSpindle+0x88>)
 800348a:	f011 f863 	bl	8014554 <puts>
    Error_Handler();
 800348e:	f003 faca 	bl	8006a26 <Error_Handler>
  }
  spindleContext.direction = 0;
 8003492:	4b0d      	ldr	r3, [pc, #52]	@ (80034c8 <InitSpindle+0x84>)
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]
  spindleContext.timer = *htim;
 8003498:	4b0b      	ldr	r3, [pc, #44]	@ (80034c8 <InitSpindle+0x84>)
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	3304      	adds	r3, #4
 800349e:	4611      	mov	r1, r2
 80034a0:	224c      	movs	r2, #76	@ 0x4c
 80034a2:	4618      	mov	r0, r3
 80034a4:	f011 fba2 	bl	8014bec <memcpy>
}
 80034a8:	bf00      	nop
 80034aa:	3728      	adds	r7, #40	@ 0x28
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	460ca000 	.word	0x460ca000
 80034b4:	c60ca000 	.word	0xc60ca000
 80034b8:	44c80000 	.word	0x44c80000
 80034bc:	08003335 	.word	0x08003335
 80034c0:	08003371 	.word	0x08003371
 80034c4:	080033f1 	.word	0x080033f1
 80034c8:	20000240 	.word	0x20000240
 80034cc:	08017fdc 	.word	0x08017fdc

080034d0 <StepLibraryMalloc>:
static int CalcStepParams()
{
}
//---------Basic---Functions--------------
static void *StepLibraryMalloc(unsigned int size)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
    return malloc(size);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f00e ff23 	bl	8012324 <malloc>
 80034de:	4603      	mov	r3, r0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <StepLibraryFree>:

static void StepLibraryFree(const void *const ptr)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
    free((void *)ptr);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f00e ff1f 	bl	8012334 <free>
}
 80034f6:	bf00      	nop
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
	...

08003500 <StepDriverSpiTransfer>:

static int StepDriverSpiTransfer(void *pIO, char *pRX, const char *pTX, unsigned int length)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af02      	add	r7, sp, #8
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
 800350c:	603b      	str	r3, [r7, #0]
    HAL_StatusTypeDef status = 0;
 800350e:	2300      	movs	r3, #0
 8003510:	75fb      	strb	r3, [r7, #23]
    for (unsigned int i = 0; i < length; i++)
 8003512:	2300      	movs	r3, #0
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	e023      	b.n	8003560 <StepDriverSpiTransfer+0x60>
    {
        HAL_GPIO_WritePin(STEP_SPI_CS_GPIO_Port, STEP_SPI_CS_Pin, 0);
 8003518:	2200      	movs	r2, #0
 800351a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800351e:	4818      	ldr	r0, [pc, #96]	@ (8003580 <StepDriverSpiTransfer+0x80>)
 8003520:	f004 fe78 	bl	8008214 <HAL_GPIO_WritePin>
        status |= HAL_SPI_TransmitReceive(pIO, (uint8_t *)pTX + i, (uint8_t *)pRX + i, 1, HAL_MAX_DELAY);
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	18d1      	adds	r1, r2, r3
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	441a      	add	r2, r3
 8003530:	f04f 33ff 	mov.w	r3, #4294967295
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	2301      	movs	r3, #1
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f006 fe83 	bl	800a244 <HAL_SPI_TransmitReceive>
 800353e:	4603      	mov	r3, r0
 8003540:	461a      	mov	r2, r3
 8003542:	7dfb      	ldrb	r3, [r7, #23]
 8003544:	4313      	orrs	r3, r2
 8003546:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(STEP_SPI_CS_GPIO_Port, STEP_SPI_CS_Pin, 1);
 8003548:	2201      	movs	r2, #1
 800354a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800354e:	480c      	ldr	r0, [pc, #48]	@ (8003580 <StepDriverSpiTransfer+0x80>)
 8003550:	f004 fe60 	bl	8008214 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8003554:	2001      	movs	r0, #1
 8003556:	f003 ffb9 	bl	80074cc <HAL_Delay>
    for (unsigned int i = 0; i < length; i++)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	3301      	adds	r3, #1
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	429a      	cmp	r2, r3
 8003566:	d3d7      	bcc.n	8003518 <StepDriverSpiTransfer+0x18>
    }
    if (status != HAL_OK)
 8003568:	7dfb      	ldrb	r3, [r7, #23]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <StepDriverSpiTransfer+0x74>
        return -1;
 800356e:	f04f 33ff 	mov.w	r3, #4294967295
 8003572:	e000      	b.n	8003576 <StepDriverSpiTransfer+0x76>
    return 0;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40020c00 	.word	0x40020c00

08003584 <StepDriverReset>:

static void StepDriverReset(void *pGPO, int ena)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
    (void)pGPO;
    HAL_GPIO_WritePin(STEP_RSTN_GPIO_Port, STEP_RSTN_Pin, !ena);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	bf0c      	ite	eq
 8003594:	2301      	moveq	r3, #1
 8003596:	2300      	movne	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	461a      	mov	r2, r3
 800359c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80035a0:	4803      	ldr	r0, [pc, #12]	@ (80035b0 <StepDriverReset+0x2c>)
 80035a2:	f004 fe37 	bl	8008214 <HAL_GPIO_WritePin>
    return;
 80035a6:	bf00      	nop
}
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40021400 	.word	0x40021400

080035b4 <StepLibraryDelay>:

static void StepLibraryDelay(unsigned int ms)
{
 80035b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035b8:	b082      	sub	sp, #8
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
    vTaskDelay(pdMS_TO_TICKS(ms));
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	2000      	movs	r0, #0
 80035c2:	460c      	mov	r4, r1
 80035c4:	4605      	mov	r5, r0
 80035c6:	4620      	mov	r0, r4
 80035c8:	4629      	mov	r1, r5
 80035ca:	f04f 0a00 	mov.w	sl, #0
 80035ce:	f04f 0b00 	mov.w	fp, #0
 80035d2:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 80035d6:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 80035da:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 80035de:	4650      	mov	r0, sl
 80035e0:	4659      	mov	r1, fp
 80035e2:	1b02      	subs	r2, r0, r4
 80035e4:	eb61 0305 	sbc.w	r3, r1, r5
 80035e8:	f04f 0000 	mov.w	r0, #0
 80035ec:	f04f 0100 	mov.w	r1, #0
 80035f0:	0099      	lsls	r1, r3, #2
 80035f2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80035f6:	0090      	lsls	r0, r2, #2
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	eb12 0804 	adds.w	r8, r2, r4
 8003600:	eb43 0905 	adc.w	r9, r3, r5
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	f04f 0300 	mov.w	r3, #0
 800360c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003610:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003614:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003618:	4690      	mov	r8, r2
 800361a:	4699      	mov	r9, r3
 800361c:	4640      	mov	r0, r8
 800361e:	4649      	mov	r1, r9
 8003620:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	f7fd fb5e 	bl	8000ce8 <__aeabi_uldivmod>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4613      	mov	r3, r2
 8003632:	4618      	mov	r0, r3
 8003634:	f00c fd94 	bl	8010160 <vTaskDelay>
}
 8003638:	bf00      	nop
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003644 <StepTimerAsync>:

static int StepTimerAsync(void *pPWM, int dir, unsigned int numPulses, void (*doneClb)(L6474_Handle_t), L6474_Handle_t h)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	603b      	str	r3, [r7, #0]
    (void)pPWM;
    (void)h;
    StepperContext.is_running = 1;
 8003652:	4b0d      	ldr	r3, [pc, #52]	@ (8003688 <StepTimerAsync+0x44>)
 8003654:	2201      	movs	r2, #1
 8003656:	60da      	str	r2, [r3, #12]
    StepperContext.done_callback = doneClb;
 8003658:	4a0b      	ldr	r2, [pc, #44]	@ (8003688 <StepTimerAsync+0x44>)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	6153      	str	r3, [r2, #20]
    HAL_GPIO_WritePin(STEP_DIR_GPIO_Port, STEP_DIR_Pin, !!dir);
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	bf14      	ite	ne
 8003664:	2301      	movne	r3, #1
 8003666:	2300      	moveq	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	461a      	mov	r2, r3
 800366c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003670:	4806      	ldr	r0, [pc, #24]	@ (800368c <StepTimerAsync+0x48>)
 8003672:	f004 fdcf 	bl	8008214 <HAL_GPIO_WritePin>
    TimerStart(numPulses);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f001 f85a 	bl	8004730 <TimerStart>
    // UpdateStepperLEDs(StepperContext);

    return 0;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	200002b0 	.word	0x200002b0
 800368c:	40021400 	.word	0x40021400

08003690 <StepTimerCancelAsync>:

static int StepTimerCancelAsync(void *pPWM)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
    (void)pPWM;
    if (StepperContext.is_running)
 8003698:	4b10      	ldr	r3, [pc, #64]	@ (80036dc <StepTimerCancelAsync+0x4c>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d017      	beq.n	80036d0 <StepTimerCancelAsync+0x40>
    {
        if (HAL_TIM_OnePulse_Stop_IT(StepperContext.htim1, TIM_CHANNEL_1) != HAL_OK)
 80036a0:	4b0e      	ldr	r3, [pc, #56]	@ (80036dc <StepTimerCancelAsync+0x4c>)
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	2100      	movs	r1, #0
 80036a6:	4618      	mov	r0, r3
 80036a8:	f008 f980 	bl	800b9ac <HAL_TIM_OnePulse_Stop_IT>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d005      	beq.n	80036be <StepTimerCancelAsync+0x2e>
        {
            printf("Error: Failed to stop the timer\r\n");
 80036b2:	480b      	ldr	r0, [pc, #44]	@ (80036e0 <StepTimerCancelAsync+0x50>)
 80036b4:	f010 ff4e 	bl	8014554 <puts>
            return -1;
 80036b8:	f04f 33ff 	mov.w	r3, #4294967295
 80036bc:	e009      	b.n	80036d2 <StepTimerCancelAsync+0x42>
        }
        StepperContext.done_callback(StepperContext.h);
 80036be:	4b07      	ldr	r3, [pc, #28]	@ (80036dc <StepTimerCancelAsync+0x4c>)
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	4a06      	ldr	r2, [pc, #24]	@ (80036dc <StepTimerCancelAsync+0x4c>)
 80036c4:	6812      	ldr	r2, [r2, #0]
 80036c6:	4610      	mov	r0, r2
 80036c8:	4798      	blx	r3
        StepperContext.is_running = 0;
 80036ca:	4b04      	ldr	r3, [pc, #16]	@ (80036dc <StepTimerCancelAsync+0x4c>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	60da      	str	r2, [r3, #12]
    }
    // UpdateStepperLEDs(StepperContext);

    return 0;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	200002b0 	.word	0x200002b0
 80036e0:	0801800c 	.word	0x0801800c

080036e4 <Reset>:
    return 0;
}
*/
// WIP kind of done, parameters need to  be looked at
static int Reset(StepperContext_t *StepperContext)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
    L6474_BaseParameter_t param;
    param.stepMode = smMICRO16;
 80036ec:	2304      	movs	r3, #4
 80036ee:	733b      	strb	r3, [r7, #12]
    param.OcdTh = ocdth6000mA; // 3000mA ? cause requirements
 80036f0:	230f      	movs	r3, #15
 80036f2:	737b      	strb	r3, [r7, #13]
    param.TimeOnMin = 0x29;
 80036f4:	2329      	movs	r3, #41	@ 0x29
 80036f6:	73bb      	strb	r3, [r7, #14]
    param.TimeOffMin = 0x29;
 80036f8:	2329      	movs	r3, #41	@ 0x29
 80036fa:	73fb      	strb	r3, [r7, #15]
    param.TorqueVal = 0x26;
 80036fc:	2326      	movs	r3, #38	@ 0x26
 80036fe:	743b      	strb	r3, [r7, #16]
    param.TFast = 0x19;
 8003700:	2319      	movs	r3, #25
 8003702:	747b      	strb	r3, [r7, #17]
    int result = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	617b      	str	r3, [r7, #20]

    // result |= L6474_SetBaseParameter(&param); // changable
    result |= L6474_ResetStandBy(StepperContext->h);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f002 f86b 	bl	80057e8 <L6474_ResetStandBy>
 8003712:	4602      	mov	r2, r0
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	4313      	orrs	r3, r2
 8003718:	617b      	str	r3, [r7, #20]
    result |= L6474_Initialize(StepperContext->h, &param);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f107 020c 	add.w	r2, r7, #12
 8003722:	4611      	mov	r1, r2
 8003724:	4618      	mov	r0, r3
 8003726:	f002 f8ae 	bl	8005886 <L6474_Initialize>
 800372a:	4602      	mov	r2, r0
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	4313      	orrs	r3, r2
 8003730:	617b      	str	r3, [r7, #20]
    result |= L6474_SetPowerOutputs(StepperContext->h, 0);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2100      	movs	r1, #0
 8003738:	4618      	mov	r0, r3
 800373a:	f002 fa2e 	bl	8005b9a <L6474_SetPowerOutputs>
 800373e:	4602      	mov	r2, r0
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]

    if (result != 0)
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d005      	beq.n	8003758 <Reset+0x74>
    {
        printf("Failed to reset\r\n");
 800374c:	481e      	ldr	r0, [pc, #120]	@ (80037c8 <Reset+0xe4>)
 800374e:	f010 ff01 	bl	8014554 <puts>
        return -1;
 8003752:	f04f 33ff 	mov.w	r3, #4294967295
 8003756:	e033      	b.n	80037c0 <Reset+0xdc>
        StepperContext->state = scs.FLT;
    }
    StepperContext->is_powered = 0;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	605a      	str	r2, [r3, #4]
    StepperContext->is_referenced = 0;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	609a      	str	r2, [r3, #8]
    StepperContext->is_running = 0;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	60da      	str	r2, [r3, #12]
    StepperContext->error_code = 0;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	611a      	str	r2, [r3, #16]
    StepperContext->pos_min = 0;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	629a      	str	r2, [r3, #40]	@ 0x28
    StepperContext->pos_max = 234200;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a14      	ldr	r2, [pc, #80]	@ (80037cc <Reset+0xe8>)
 800377a:	62da      	str	r2, [r3, #44]	@ 0x2c
    StepperContext->state = scs.REF; // Transition INIT -> REF
 800377c:	4b14      	ldr	r3, [pc, #80]	@ (80037d0 <Reset+0xec>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	b2da      	uxtb	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    StepperContext->mm_per_turn = MM_PER_TURN;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 800378e:	63da      	str	r2, [r3, #60]	@ 0x3c
    StepperContext->steps_per_turn = STEPS_PER_TURN;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a10      	ldr	r2, [pc, #64]	@ (80037d4 <Reset+0xf0>)
 8003794:	641a      	str	r2, [r3, #64]	@ 0x40
    StepperContext->mm_per_step = StepperContext->mm_per_turn / (StepperContext->steps_per_turn * StepperContext->resolution);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80037a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    StepperContext->resolution = 16.0f;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f04f 4283 	mov.w	r2, #1098907648	@ 0x41800000
 80037bc:	645a      	str	r2, [r3, #68]	@ 0x44

    return result;
 80037be:	697b      	ldr	r3, [r7, #20]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	08018030 	.word	0x08018030
 80037cc:	000392d8 	.word	0x000392d8
 80037d0:	20000000 	.word	0x20000000
 80037d4:	43480000 	.word	0x43480000

080037d8 <Reference>:
// Finished but maybe look at it again
static int Reference(StepperContext_t *StepperContext, int argc, char **argv)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08c      	sub	sp, #48	@ 0x30
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
    // Allow reference from REF state only
    if (!(StepperContext->state == scs.REF))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80037ea:	461a      	mov	r2, r3
 80037ec:	4b9e      	ldr	r3, [pc, #632]	@ (8003a68 <Reference+0x290>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d005      	beq.n	8003800 <Reference+0x28>
    {
        printf("Reference run not allowed in current state\r\n");
 80037f4:	489d      	ldr	r0, [pc, #628]	@ (8003a6c <Reference+0x294>)
 80037f6:	f010 fead 	bl	8014554 <puts>
        return -1;
 80037fa:	f04f 33ff 	mov.w	r3, #4294967295
 80037fe:	e1a9      	b.n	8003b54 <Reference+0x37c>
    }
    int step_amt = 0;
 8003800:	2300      	movs	r3, #0
 8003802:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t track_timer_stop = 0;
 8003804:	2300      	movs	r3, #0
 8003806:	61fb      	str	r3, [r7, #28]
    int result = 0;
 8003808:	2300      	movs	r3, #0
 800380a:	62bb      	str	r3, [r7, #40]	@ 0x28
    int poweroutput = 0;
 800380c:	2300      	movs	r3, #0
 800380e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t timeout_ms = 0;
 8003810:	2300      	movs	r3, #0
 8003812:	623b      	str	r3, [r7, #32]
    if (argc == 2)
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2b02      	cmp	r3, #2
 8003818:	d133      	bne.n	8003882 <Reference+0xaa>
    {
        if (strcmp(argv[1], "-s") == 0)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3304      	adds	r3, #4
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4993      	ldr	r1, [pc, #588]	@ (8003a70 <Reference+0x298>)
 8003822:	4618      	mov	r0, r3
 8003824:	f7fc fcf4 	bl	8000210 <strcmp>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d110      	bne.n	8003850 <Reference+0x78>
        {
            StepperContext->is_referenced = 1;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2201      	movs	r2, #1
 8003832:	609a      	str	r2, [r3, #8]
            L6474_SetAbsolutePosition(StepperContext->h, 0);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2100      	movs	r1, #0
 800383a:	4618      	mov	r0, r3
 800383c:	f002 fa36 	bl	8005cac <L6474_SetAbsolutePosition>
            StepperContext->state = scs.DIS; // REF -> DIS
 8003840:	4b89      	ldr	r3, [pc, #548]	@ (8003a68 <Reference+0x290>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	b2da      	uxtb	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            return result;
 800384c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384e:	e181      	b.n	8003b54 <Reference+0x37c>
        }
        else if (strcmp(argv[1], "-e") == 0)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3304      	adds	r3, #4
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4987      	ldr	r1, [pc, #540]	@ (8003a74 <Reference+0x29c>)
 8003858:	4618      	mov	r0, r3
 800385a:	f7fc fcd9 	bl	8000210 <strcmp>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d108      	bne.n	8003876 <Reference+0x9e>
        {
            poweroutput = 1;
 8003864:	2301      	movs	r3, #1
 8003866:	627b      	str	r3, [r7, #36]	@ 0x24
            StepperContext->state = scs.ENA; // REF -> ENA
 8003868:	4b7f      	ldr	r3, [pc, #508]	@ (8003a68 <Reference+0x290>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	b2da      	uxtb	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003874:	e025      	b.n	80038c2 <Reference+0xea>
        }
        else
        {
            printf("Invalid argument for reference\r\n");
 8003876:	4880      	ldr	r0, [pc, #512]	@ (8003a78 <Reference+0x2a0>)
 8003878:	f010 fe6c 	bl	8014554 <puts>
            return -1;
 800387c:	f04f 33ff 	mov.w	r3, #4294967295
 8003880:	e168      	b.n	8003b54 <Reference+0x37c>
        }
    }
    else if (argc == 3)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b03      	cmp	r3, #3
 8003886:	d11c      	bne.n	80038c2 <Reference+0xea>
    {
        if (strcmp(argv[1], "-t") == 0)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3304      	adds	r3, #4
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	497b      	ldr	r1, [pc, #492]	@ (8003a7c <Reference+0x2a4>)
 8003890:	4618      	mov	r0, r3
 8003892:	f7fc fcbd 	bl	8000210 <strcmp>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10c      	bne.n	80038b6 <Reference+0xde>
        {
            timeout_ms = atoi(argv[2]) * 1000; // s to ms
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3308      	adds	r3, #8
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f00e fcd5 	bl	8012252 <atoi>
 80038a8:	4603      	mov	r3, r0
 80038aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80038ae:	fb02 f303 	mul.w	r3, r2, r3
 80038b2:	623b      	str	r3, [r7, #32]
 80038b4:	e005      	b.n	80038c2 <Reference+0xea>
        }
        else
        {
            printf("Invalid argument for reference time\r\n");
 80038b6:	4872      	ldr	r0, [pc, #456]	@ (8003a80 <Reference+0x2a8>)
 80038b8:	f010 fe4c 	bl	8014554 <puts>
            return -1;
 80038bc:	f04f 33ff 	mov.w	r3, #4294967295
 80038c0:	e148      	b.n	8003b54 <Reference+0x37c>
        }
    }

    const uint32_t start_time = HAL_GetTick();
 80038c2:	f003 fdf7 	bl	80074b4 <HAL_GetTick>
 80038c6:	61b8      	str	r0, [r7, #24]
    result |= L6474_SetPowerOutputs(StepperContext->h, 1);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2101      	movs	r1, #1
 80038ce:	4618      	mov	r0, r3
 80038d0:	f002 f963 	bl	8005b9a <L6474_SetPowerOutputs>
 80038d4:	4602      	mov	r2, r0
 80038d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d8:	4313      	orrs	r3, r2
 80038da:	62bb      	str	r3, [r7, #40]	@ 0x28
    StepperContext->is_powered = 1;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2201      	movs	r2, #1
 80038e0:	605a      	str	r2, [r3, #4]
    SetSpeed(StepperContext, 3000);
 80038e2:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 fee0 	bl	80046ac <SetSpeed>

    // If at limit switch, move away from it first
    if (HAL_GPIO_ReadPin(LIMIT_SWITCH_GPIO_Port, LIMIT_SWITCH_Pin) == GPIO_PIN_RESET)
 80038ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80038f0:	4864      	ldr	r0, [pc, #400]	@ (8003a84 <Reference+0x2ac>)
 80038f2:	f004 fc6f 	bl	80081d4 <HAL_GPIO_ReadPin>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d128      	bne.n	800394e <Reference+0x176>
    {
        printf("At limit switch, moving away before reference run...\r\n");
 80038fc:	4862      	ldr	r0, [pc, #392]	@ (8003a88 <Reference+0x2b0>)
 80038fe:	f010 fe29 	bl	8014554 <puts>
        // Move away from limit switch (adjust steps as needed)
        L6474_StepIncremental(StepperContext->h, -5000); // move away 5000 microsteps
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4961      	ldr	r1, [pc, #388]	@ (8003a8c <Reference+0x2b4>)
 8003908:	4618      	mov	r0, r3
 800390a:	f002 fb0f 	bl	8005f2c <L6474_StepIncremental>
        // Wait until limit switch is released
        while (HAL_GPIO_ReadPin(LIMIT_SWITCH_GPIO_Port, LIMIT_SWITCH_Pin) == GPIO_PIN_RESET)
 800390e:	e013      	b.n	8003938 <Reference+0x160>
        {
            if (timeout_ms > 0 && HAL_GetTick() - start_time > timeout_ms)
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d010      	beq.n	8003938 <Reference+0x160>
 8003916:	f003 fdcd 	bl	80074b4 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	6a3a      	ldr	r2, [r7, #32]
 8003922:	429a      	cmp	r2, r3
 8003924:	d208      	bcs.n	8003938 <Reference+0x160>
            {
                StepTimerCancelAsync(NULL);
 8003926:	2000      	movs	r0, #0
 8003928:	f7ff feb2 	bl	8003690 <StepTimerCancelAsync>
                printf("Timeout while moving away from limit switch\r\n");
 800392c:	4858      	ldr	r0, [pc, #352]	@ (8003a90 <Reference+0x2b8>)
 800392e:	f010 fe11 	bl	8014554 <puts>
                return -1;
 8003932:	f04f 33ff 	mov.w	r3, #4294967295
 8003936:	e10d      	b.n	8003b54 <Reference+0x37c>
        while (HAL_GPIO_ReadPin(LIMIT_SWITCH_GPIO_Port, LIMIT_SWITCH_Pin) == GPIO_PIN_RESET)
 8003938:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800393c:	4851      	ldr	r0, [pc, #324]	@ (8003a84 <Reference+0x2ac>)
 800393e:	f004 fc49 	bl	80081d4 <HAL_GPIO_ReadPin>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0e3      	beq.n	8003910 <Reference+0x138>
            }
        }
        StepTimerCancelAsync(NULL);
 8003948:	2000      	movs	r0, #0
 800394a:	f7ff fea1 	bl	8003690 <StepTimerCancelAsync>
    }
    // is ref switch already pressed? wenn == 0 wird er gedrückt
    if (HAL_GPIO_ReadPin(REFERENCE_MARK_GPIO_Port, REFERENCE_MARK_Pin) == GPIO_PIN_RESET)
 800394e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003952:	484c      	ldr	r0, [pc, #304]	@ (8003a84 <Reference+0x2ac>)
 8003954:	f004 fc3e 	bl	80081d4 <HAL_GPIO_ReadPin>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d125      	bne.n	80039aa <Reference+0x1d2>
    {
        // already at reference
        L6474_StepIncremental(StepperContext->h, 100000000);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	494c      	ldr	r1, [pc, #304]	@ (8003a94 <Reference+0x2bc>)
 8003964:	4618      	mov	r0, r3
 8003966:	f002 fae1 	bl	8005f2c <L6474_StepIncremental>
        while (HAL_GPIO_ReadPin(REFERENCE_MARK_GPIO_Port, REFERENCE_MARK_Pin) == GPIO_PIN_RESET)
 800396a:	e013      	b.n	8003994 <Reference+0x1bc>
        {
            if (timeout_ms > 0 && HAL_GetTick() - start_time > timeout_ms)
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d010      	beq.n	8003994 <Reference+0x1bc>
 8003972:	f003 fd9f 	bl	80074b4 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	6a3a      	ldr	r2, [r7, #32]
 800397e:	429a      	cmp	r2, r3
 8003980:	d208      	bcs.n	8003994 <Reference+0x1bc>
            {
                StepTimerCancelAsync(NULL);
 8003982:	2000      	movs	r0, #0
 8003984:	f7ff fe84 	bl	8003690 <StepTimerCancelAsync>
                printf("Timeout while waiting for reference switch\r\n");
 8003988:	4843      	ldr	r0, [pc, #268]	@ (8003a98 <Reference+0x2c0>)
 800398a:	f010 fde3 	bl	8014554 <puts>
                return -1;
 800398e:	f04f 33ff 	mov.w	r3, #4294967295
 8003992:	e0df      	b.n	8003b54 <Reference+0x37c>
        while (HAL_GPIO_ReadPin(REFERENCE_MARK_GPIO_Port, REFERENCE_MARK_Pin) == GPIO_PIN_RESET)
 8003994:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003998:	483a      	ldr	r0, [pc, #232]	@ (8003a84 <Reference+0x2ac>)
 800399a:	f004 fc1b 	bl	80081d4 <HAL_GPIO_ReadPin>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0e3      	beq.n	800396c <Reference+0x194>
            }
        }
        StepTimerCancelAsync(NULL);
 80039a4:	2000      	movs	r0, #0
 80039a6:	f7ff fe73 	bl	8003690 <StepTimerCancelAsync>
    }
    // move to reference switch
    L6474_StepIncremental(StepperContext->h, -1000000000);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	493b      	ldr	r1, [pc, #236]	@ (8003a9c <Reference+0x2c4>)
 80039b0:	4618      	mov	r0, r3
 80039b2:	f002 fabb 	bl	8005f2c <L6474_StepIncremental>

    while (HAL_GPIO_ReadPin(REFERENCE_MARK_GPIO_Port, REFERENCE_MARK_Pin) != GPIO_PIN_RESET)
 80039b6:	e013      	b.n	80039e0 <Reference+0x208>
    {
        if (timeout_ms > 0 && HAL_GetTick() - start_time > timeout_ms)
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d010      	beq.n	80039e0 <Reference+0x208>
 80039be:	f003 fd79 	bl	80074b4 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	6a3a      	ldr	r2, [r7, #32]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d208      	bcs.n	80039e0 <Reference+0x208>
        {
            StepTimerCancelAsync(NULL);
 80039ce:	2000      	movs	r0, #0
 80039d0:	f7ff fe5e 	bl	8003690 <StepTimerCancelAsync>
            printf("Timeout while waiting for reference switch\r\n");
 80039d4:	4830      	ldr	r0, [pc, #192]	@ (8003a98 <Reference+0x2c0>)
 80039d6:	f010 fdbd 	bl	8014554 <puts>
            result = -1;
 80039da:	f04f 33ff 	mov.w	r3, #4294967295
 80039de:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (HAL_GPIO_ReadPin(REFERENCE_MARK_GPIO_Port, REFERENCE_MARK_Pin) != GPIO_PIN_RESET)
 80039e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80039e4:	4827      	ldr	r0, [pc, #156]	@ (8003a84 <Reference+0x2ac>)
 80039e6:	f004 fbf5 	bl	80081d4 <HAL_GPIO_ReadPin>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1e3      	bne.n	80039b8 <Reference+0x1e0>
        }
    }
    StepTimerCancelAsync(NULL);
 80039f0:	2000      	movs	r0, #0
 80039f2:	f7ff fe4d 	bl	8003690 <StepTimerCancelAsync>
    L6474_SetAbsolutePosition(StepperContext->h, 800);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80039fe:	4618      	mov	r0, r3
 8003a00:	f002 f954 	bl	8005cac <L6474_SetAbsolutePosition>
    StepperContext->pos_min = 800; // set reference position
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003a0a:	629a      	str	r2, [r3, #40]	@ 0x28
    StepperContext->pos_ref = 800;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003a12:	631a      	str	r2, [r3, #48]	@ 0x30
    // move to limit switch from reference switch
    const uint32_t track_timer_start = HAL_GetTick();
 8003a14:	f003 fd4e 	bl	80074b4 <HAL_GetTick>
 8003a18:	6178      	str	r0, [r7, #20]
    L6474_StepIncremental(StepperContext->h, 1000000000);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4920      	ldr	r1, [pc, #128]	@ (8003aa0 <Reference+0x2c8>)
 8003a20:	4618      	mov	r0, r3
 8003a22:	f002 fa83 	bl	8005f2c <L6474_StepIncremental>
    while (HAL_GPIO_ReadPin(LIMIT_SWITCH_GPIO_Port, LIMIT_SWITCH_Pin) != GPIO_PIN_RESET)
 8003a26:	e03f      	b.n	8003aa8 <Reference+0x2d0>
    {
        step_amt += 1;
 8003a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (timeout_ms > 0 && HAL_GetTick() - start_time > timeout_ms)
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d039      	beq.n	8003aa8 <Reference+0x2d0>
 8003a34:	f003 fd3e 	bl	80074b4 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	6a3a      	ldr	r2, [r7, #32]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d231      	bcs.n	8003aa8 <Reference+0x2d0>
        {
            StepTimerCancelAsync(NULL);
 8003a44:	2000      	movs	r0, #0
 8003a46:	f7ff fe23 	bl	8003690 <StepTimerCancelAsync>
            printf("Timeout while moving to limit switch\r\n");
 8003a4a:	4816      	ldr	r0, [pc, #88]	@ (8003aa4 <Reference+0x2cc>)
 8003a4c:	f010 fd82 	bl	8014554 <puts>
            StepperContext->error_code = 2;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2202      	movs	r2, #2
 8003a54:	611a      	str	r2, [r3, #16]
            StepperContext->state = scs.FLT;
 8003a56:	4b04      	ldr	r3, [pc, #16]	@ (8003a68 <Reference+0x290>)
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            return -1;
 8003a62:	f04f 33ff 	mov.w	r3, #4294967295
 8003a66:	e075      	b.n	8003b54 <Reference+0x37c>
 8003a68:	20000000 	.word	0x20000000
 8003a6c:	08018044 	.word	0x08018044
 8003a70:	08018070 	.word	0x08018070
 8003a74:	08018074 	.word	0x08018074
 8003a78:	08018078 	.word	0x08018078
 8003a7c:	08018098 	.word	0x08018098
 8003a80:	0801809c 	.word	0x0801809c
 8003a84:	40020400 	.word	0x40020400
 8003a88:	080180c4 	.word	0x080180c4
 8003a8c:	ffffec78 	.word	0xffffec78
 8003a90:	080180fc 	.word	0x080180fc
 8003a94:	05f5e100 	.word	0x05f5e100
 8003a98:	0801812c 	.word	0x0801812c
 8003a9c:	c4653600 	.word	0xc4653600
 8003aa0:	3b9aca00 	.word	0x3b9aca00
 8003aa4:	08018158 	.word	0x08018158
    while (HAL_GPIO_ReadPin(LIMIT_SWITCH_GPIO_Port, LIMIT_SWITCH_Pin) != GPIO_PIN_RESET)
 8003aa8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003aac:	482b      	ldr	r0, [pc, #172]	@ (8003b5c <Reference+0x384>)
 8003aae:	f004 fb91 	bl	80081d4 <HAL_GPIO_ReadPin>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1b7      	bne.n	8003a28 <Reference+0x250>
        }
    }
    track_timer_stop = HAL_GetTick();
 8003ab8:	f003 fcfc 	bl	80074b4 <HAL_GetTick>
 8003abc:	61f8      	str	r0, [r7, #28]
    StepTimerCancelAsync(NULL);
 8003abe:	2000      	movs	r0, #0
 8003ac0:	f7ff fde6 	bl	8003690 <StepTimerCancelAsync>
    L6474_GetAbsolutePosition(StepperContext->h, &StepperContext->pos_max);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	332c      	adds	r3, #44	@ 0x2c
 8003acc:	4619      	mov	r1, r3
 8003ace:	4610      	mov	r0, r2
 8003ad0:	f002 f8a3 	bl	8005c1a <L6474_GetAbsolutePosition>
    // calc parameters from full run
    StepperContext->mm_per_step = ((float)TRACKLENGTH / (StepperContext->pos_max - StepperContext->pos_min));
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	ee07 3a90 	vmov	s15, r3
 8003ae2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ae6:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8003b60 <Reference+0x388>
 8003aea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    StepperContext->mm_per_sec = (TRACKLENGTH / ((track_timer_stop - track_timer_start) / 1000.0f));
 8003af4:	69fa      	ldr	r2, [r7, #28]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	ee07 3a90 	vmov	s15, r3
 8003afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b02:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8003b64 <Reference+0x38c>
 8003b06:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003b0a:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8003b60 <Reference+0x388>
 8003b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    StepperContext->is_referenced = 1;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	609a      	str	r2, [r3, #8]

    result |= L6474_SetPowerOutputs(StepperContext->h, poweroutput); // set power output if -e flag was set
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b24:	4618      	mov	r0, r3
 8003b26:	f002 f838 	bl	8005b9a <L6474_SetPowerOutputs>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	62bb      	str	r3, [r7, #40]	@ 0x28
    StepperContext->is_powered = poweroutput;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b36:	605a      	str	r2, [r3, #4]
    // After reference, go to DIS or ENA depending on poweroutput
    StepperContext->state = poweroutput ? scs.ENA : scs.DIS;
 8003b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <Reference+0x36e>
 8003b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b68 <Reference+0x390>)
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	e002      	b.n	8003b4c <Reference+0x374>
 8003b46:	4b08      	ldr	r3, [pc, #32]	@ (8003b68 <Reference+0x390>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
    return 0; // davor war da result
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3730      	adds	r7, #48	@ 0x30
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40020400 	.word	0x40020400
 8003b60:	43938000 	.word	0x43938000
 8003b64:	447a0000 	.word	0x447a0000
 8003b68:	20000000 	.word	0x20000000

08003b6c <Position>:
// WIP kind of done
static int Position(StepperContext_t *StepperContext, int argc, char **argv)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
    if (StepperContext->state == scs.FLT)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b7e:	461a      	mov	r2, r3
 8003b80:	4b16      	ldr	r3, [pc, #88]	@ (8003bdc <Position+0x70>)
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d105      	bne.n	8003b94 <Position+0x28>
    {
        printf("Stepper in fault state\r\n");
 8003b88:	4815      	ldr	r0, [pc, #84]	@ (8003be0 <Position+0x74>)
 8003b8a:	f010 fce3 	bl	8014554 <puts>
        return -1;
 8003b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b92:	e01f      	b.n	8003bd4 <Position+0x68>
    }
    int position;
    L6474_GetAbsolutePosition(StepperContext->h, &position);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f107 0210 	add.w	r2, r7, #16
 8003b9c:	4611      	mov	r1, r2
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f002 f83b 	bl	8005c1a <L6474_GetAbsolutePosition>
    float mm_position = (position - StepperContext->pos_min) * StepperContext->mm_per_step;
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	ee07 3a90 	vmov	s15, r3
 8003bb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bbe:	edc7 7a05 	vstr	s15, [r7, #20]
    printf("Current position: %.3f\n\r", (mm_position));
 8003bc2:	6978      	ldr	r0, [r7, #20]
 8003bc4:	f7fc fcf0 	bl	80005a8 <__aeabi_f2d>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4805      	ldr	r0, [pc, #20]	@ (8003be4 <Position+0x78>)
 8003bce:	f010 fc51 	bl	8014474 <iprintf>
    return 0;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	20000000 	.word	0x20000000
 8003be0:	08018180 	.word	0x08018180
 8003be4:	08018198 	.word	0x08018198

08003be8 <Status>:

// WIP kind of done
static int Status(StepperContext_t *StepperContext, int argc, char **argv)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
    L6474_Status_t driverStatus;
    L6474_GetStatus(StepperContext->h, &driverStatus);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f107 0210 	add.w	r2, r7, #16
 8003bfc:	4611      	mov	r1, r2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f002 f907 	bl	8005e12 <L6474_GetStatus>

    unsigned int statusBits = 0;
 8003c04:	2300      	movs	r3, #0
 8003c06:	61fb      	str	r3, [r7, #28]
    statusBits |= (driverStatus.DIR ? (1 << 0) : 0);
 8003c08:	7c7b      	ldrb	r3, [r7, #17]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <Status+0x2a>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e000      	b.n	8003c14 <Status+0x2c>
 8003c12:	2300      	movs	r3, #0
 8003c14:	69fa      	ldr	r2, [r7, #28]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	61fb      	str	r3, [r7, #28]
    statusBits |= (driverStatus.HIGHZ ? (1 << 1) : 0);
 8003c1a:	7c3b      	ldrb	r3, [r7, #16]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <Status+0x3c>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e000      	b.n	8003c26 <Status+0x3e>
 8003c24:	2300      	movs	r3, #0
 8003c26:	69fa      	ldr	r2, [r7, #28]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	61fb      	str	r3, [r7, #28]
    statusBits |= (driverStatus.NOTPERF_CMD ? (1 << 2) : 0);
 8003c2c:	7cbb      	ldrb	r3, [r7, #18]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <Status+0x4e>
 8003c32:	2304      	movs	r3, #4
 8003c34:	e000      	b.n	8003c38 <Status+0x50>
 8003c36:	2300      	movs	r3, #0
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	61fb      	str	r3, [r7, #28]
    statusBits |= (driverStatus.OCD ? (1 << 3) : 0);
 8003c3e:	7dfb      	ldrb	r3, [r7, #23]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <Status+0x60>
 8003c44:	2308      	movs	r3, #8
 8003c46:	e000      	b.n	8003c4a <Status+0x62>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	69fa      	ldr	r2, [r7, #28]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	61fb      	str	r3, [r7, #28]
    statusBits |= (driverStatus.ONGOING ? (1 << 4) : 0);
 8003c50:	7e3b      	ldrb	r3, [r7, #24]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <Status+0x72>
 8003c56:	2310      	movs	r3, #16
 8003c58:	e000      	b.n	8003c5c <Status+0x74>
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	61fb      	str	r3, [r7, #28]
    statusBits |= (driverStatus.TH_SD ? (1 << 5) : 0);
 8003c62:	7dbb      	ldrb	r3, [r7, #22]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <Status+0x84>
 8003c68:	2320      	movs	r3, #32
 8003c6a:	e000      	b.n	8003c6e <Status+0x86>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	69fa      	ldr	r2, [r7, #28]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61fb      	str	r3, [r7, #28]
    statusBits |= (driverStatus.TH_WARN ? (1 << 6) : 0);
 8003c74:	7d7b      	ldrb	r3, [r7, #21]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <Status+0x96>
 8003c7a:	2340      	movs	r3, #64	@ 0x40
 8003c7c:	e000      	b.n	8003c80 <Status+0x98>
 8003c7e:	2300      	movs	r3, #0
 8003c80:	69fa      	ldr	r2, [r7, #28]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	61fb      	str	r3, [r7, #28]
    statusBits |= (driverStatus.UVLO ? (1 << 7) : 0);
 8003c86:	7d3b      	ldrb	r3, [r7, #20]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <Status+0xa8>
 8003c8c:	2380      	movs	r3, #128	@ 0x80
 8003c8e:	e000      	b.n	8003c92 <Status+0xaa>
 8003c90:	2300      	movs	r3, #0
 8003c92:	69fa      	ldr	r2, [r7, #28]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	61fb      	str	r3, [r7, #28]
    statusBits |= (driverStatus.WRONG_CMD ? (1 << 8) : 0);
 8003c98:	7cfb      	ldrb	r3, [r7, #19]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <Status+0xbc>
 8003c9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ca2:	e000      	b.n	8003ca6 <Status+0xbe>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	69fa      	ldr	r2, [r7, #28]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	61fb      	str	r3, [r7, #28]

    printf("0x%01X\r\n", StepperContext->state);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4808      	ldr	r0, [pc, #32]	@ (8003cd8 <Status+0xf0>)
 8003cb6:	f010 fbdd 	bl	8014474 <iprintf>
    printf("0x%04X\r\n", statusBits);
 8003cba:	69f9      	ldr	r1, [r7, #28]
 8003cbc:	4807      	ldr	r0, [pc, #28]	@ (8003cdc <Status+0xf4>)
 8003cbe:	f010 fbd9 	bl	8014474 <iprintf>
    printf("%d\r\n", StepperContext->is_running);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4805      	ldr	r0, [pc, #20]	@ (8003ce0 <Status+0xf8>)
 8003cca:	f010 fbd3 	bl	8014474 <iprintf>

    return 0;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3720      	adds	r7, #32
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	080181b4 	.word	0x080181b4
 8003cdc:	080181c0 	.word	0x080181c0
 8003ce0:	080181cc 	.word	0x080181cc

08003ce4 <Move>:
// WIP
static int Move(StepperContext_t *StepperContext, int argc, char **argv)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b090      	sub	sp, #64	@ 0x40
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
    // Preconditions
    if (StepperContext->state != scs.ENA)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	4bb4      	ldr	r3, [pc, #720]	@ (8003fcc <Move+0x2e8>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d009      	beq.n	8003d14 <Move+0x30>
    {
        printf("Error: Stepper not enabled (state=%d)\r\n", StepperContext->state);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003d06:	4619      	mov	r1, r3
 8003d08:	48b1      	ldr	r0, [pc, #708]	@ (8003fd0 <Move+0x2ec>)
 8003d0a:	f010 fbb3 	bl	8014474 <iprintf>
        return -1;
 8003d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d12:	e1b3      	b.n	800407c <Move+0x398>
    }
    if (StepperContext->is_powered != 1)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d005      	beq.n	8003d28 <Move+0x44>
    {
        printf("Error: Stepper not powered\r\n");
 8003d1c:	48ad      	ldr	r0, [pc, #692]	@ (8003fd4 <Move+0x2f0>)
 8003d1e:	f010 fc19 	bl	8014554 <puts>
        return -1;
 8003d22:	f04f 33ff 	mov.w	r3, #4294967295
 8003d26:	e1a9      	b.n	800407c <Move+0x398>
    }
    if (StepperContext->is_referenced != 1)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d005      	beq.n	8003d3c <Move+0x58>
    {
        printf("Error: Stepper not referenced\r\n");
 8003d30:	48a9      	ldr	r0, [pc, #676]	@ (8003fd8 <Move+0x2f4>)
 8003d32:	f010 fc0f 	bl	8014554 <puts>
        return -1;
 8003d36:	f04f 33ff 	mov.w	r3, #4294967295
 8003d3a:	e19f      	b.n	800407c <Move+0x398>
    }
    if (argc < 2)
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	dc05      	bgt.n	8003d4e <Move+0x6a>
    {
        printf("Error: Invalid number of arguments\r\n");
 8003d42:	48a6      	ldr	r0, [pc, #664]	@ (8003fdc <Move+0x2f8>)
 8003d44:	f010 fc06 	bl	8014554 <puts>
        return -1;
 8003d48:	f04f 33ff 	mov.w	r3, #4294967295
 8003d4c:	e196      	b.n	800407c <Move+0x398>
    }

    // Parse arguments
    float target_position = atof(argv[1]);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3304      	adds	r3, #4
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f00e fa79 	bl	801224c <atof>
 8003d5a:	ec53 2b10 	vmov	r2, r3, d0
 8003d5e:	4610      	mov	r0, r2
 8003d60:	4619      	mov	r1, r3
 8003d62:	f7fc ff71 	bl	8000c48 <__aeabi_d2f>
 8003d66:	4603      	mov	r3, r0
 8003d68:	627b      	str	r3, [r7, #36]	@ 0x24
    int help_pos = 0;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	617b      	str	r3, [r7, #20]
    float help_pos_float = 0;
 8003d6e:	f04f 0300 	mov.w	r3, #0
 8003d72:	623b      	str	r3, [r7, #32]
    int speed = 3000; // Default speed in mm/min
 8003d74:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
    int is_relative = 0;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	63bb      	str	r3, [r7, #56]	@ 0x38
    int is_async = 0;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	637b      	str	r3, [r7, #52]	@ 0x34

    for (int i = 2; i < argc;)
 8003d82:	2302      	movs	r3, #2
 8003d84:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d86:	e054      	b.n	8003e32 <Move+0x14e>
    {
        if (strcmp(argv[i], "-s") == 0)
 8003d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	4413      	add	r3, r2
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4993      	ldr	r1, [pc, #588]	@ (8003fe0 <Move+0x2fc>)
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fc fa3b 	bl	8000210 <strcmp>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d118      	bne.n	8003dd2 <Move+0xee>
        {
            if (i == argc - 1)
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d105      	bne.n	8003db6 <Move+0xd2>
            {
                printf("Error: Missing speed value after -s flag\r\n");
 8003daa:	488e      	ldr	r0, [pc, #568]	@ (8003fe4 <Move+0x300>)
 8003dac:	f010 fbd2 	bl	8014554 <puts>
                return -1;
 8003db0:	f04f 33ff 	mov.w	r3, #4294967295
 8003db4:	e162      	b.n	800407c <Move+0x398>
            }
            speed = atoi(argv[i + 1]);
 8003db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db8:	3301      	adds	r3, #1
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f00e fa45 	bl	8012252 <atoi>
 8003dc8:	63f8      	str	r0, [r7, #60]	@ 0x3c
            i += 2;
 8003dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dcc:	3302      	adds	r3, #2
 8003dce:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dd0:	e02f      	b.n	8003e32 <Move+0x14e>
        }
        else if (strcmp(argv[i], "-r") == 0)
 8003dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	4413      	add	r3, r2
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4982      	ldr	r1, [pc, #520]	@ (8003fe8 <Move+0x304>)
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fc fa16 	bl	8000210 <strcmp>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d105      	bne.n	8003df6 <Move+0x112>
        {
            is_relative = 1;
 8003dea:	2301      	movs	r3, #1
 8003dec:	63bb      	str	r3, [r7, #56]	@ 0x38
            i++;
 8003dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df0:	3301      	adds	r3, #1
 8003df2:	633b      	str	r3, [r7, #48]	@ 0x30
 8003df4:	e01d      	b.n	8003e32 <Move+0x14e>
        }
        else if (strcmp(argv[i], "-a") == 0)
 8003df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	497a      	ldr	r1, [pc, #488]	@ (8003fec <Move+0x308>)
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fc fa04 	bl	8000210 <strcmp>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d105      	bne.n	8003e1a <Move+0x136>
        {
            is_async = 1;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	637b      	str	r3, [r7, #52]	@ 0x34
            i++;
 8003e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e14:	3301      	adds	r3, #1
 8003e16:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e18:	e00b      	b.n	8003e32 <Move+0x14e>
        }
        else
        {
            printf("Error: Invalid flag '%s'\r\n", argv[i]);
 8003e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	4413      	add	r3, r2
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4619      	mov	r1, r3
 8003e26:	4872      	ldr	r0, [pc, #456]	@ (8003ff0 <Move+0x30c>)
 8003e28:	f010 fb24 	bl	8014474 <iprintf>
            return -1;
 8003e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e30:	e124      	b.n	800407c <Move+0x398>
    for (int i = 2; i < argc;)
 8003e32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	dba6      	blt.n	8003d88 <Move+0xa4>
        }
    }

    // Cap speed to valid mechanical limits
    if (speed < 1)
 8003e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	dc05      	bgt.n	8003e4c <Move+0x168>
    {
        printf("Error: Speed too low\r\n");
 8003e40:	486c      	ldr	r0, [pc, #432]	@ (8003ff4 <Move+0x310>)
 8003e42:	f010 fb87 	bl	8014554 <puts>
        return -1;
 8003e46:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4a:	e117      	b.n	800407c <Move+0x398>
    }
    int max_speed = (int)(StepperContext->mm_per_sec * 60); // Convert mm/sec to mm/min
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003e52:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8003ff8 <Move+0x314>
 8003e56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e5e:	ee17 3a90 	vmov	r3, s15
 8003e62:	61fb      	str	r3, [r7, #28]
    if (speed > max_speed)
 8003e64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	dd05      	ble.n	8003e78 <Move+0x194>
    {
        printf("Warning: Speed capped to maximum (%d mm/min)\r\n", max_speed);
 8003e6c:	69f9      	ldr	r1, [r7, #28]
 8003e6e:	4863      	ldr	r0, [pc, #396]	@ (8003ffc <Move+0x318>)
 8003e70:	f010 fb00 	bl	8014474 <iprintf>
        speed = max_speed;
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    // Calculate steps per second
    float steps_per_second = (speed * StepperContext->steps_per_turn * StepperContext->resolution) / (60.0f * StepperContext->mm_per_turn);
 8003e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e7a:	ee07 3a90 	vmov	s15, r3
 8003e7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003e88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8003e92:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8003e9c:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8003ff8 <Move+0x314>
 8003ea0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ea4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ea8:	edc7 7a06 	vstr	s15, [r7, #24]
    SetSpeed(StepperContext, steps_per_second);
 8003eac:	edd7 7a06 	vldr	s15, [r7, #24]
 8003eb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003eb4:	ee17 1a90 	vmov	r1, s15
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 fbf7 	bl	80046ac <SetSpeed>
    // total steps to move from 0 to target
    float steps_to_move = (target_position * StepperContext->steps_per_turn * StepperContext->resolution) / StepperContext->mm_per_turn;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8003ec4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003ec8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8003ed2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003edc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ee0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    if (!is_relative)
 8003ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d135      	bne.n	8003f56 <Move+0x272>
    {
        // calc how much to go from current position
        L6474_GetAbsolutePosition(StepperContext->h, &help_pos);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f107 0214 	add.w	r2, r7, #20
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f001 fe90 	bl	8005c1a <L6474_GetAbsolutePosition>
        help_pos_float = (float)help_pos;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	ee07 3a90 	vmov	s15, r3
 8003f00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f04:	edc7 7a08 	vstr	s15, [r7, #32]
        steps_to_move -= help_pos_float;
 8003f08:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003f0c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003f10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f14:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        help_pos_float += steps_to_move;
 8003f18:	ed97 7a08 	vldr	s14, [r7, #32]
 8003f1c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003f20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f24:	edc7 7a08 	vstr	s15, [r7, #32]
        if (help_pos_float < 0 || (int)help_pos_float > StepperContext->pos_max)
 8003f28:	edd7 7a08 	vldr	s15, [r7, #32]
 8003f2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f34:	d409      	bmi.n	8003f4a <Move+0x266>
 8003f36:	edd7 7a08 	vldr	s15, [r7, #32]
 8003f3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f3e:	ee17 2a90 	vmov	r2, s15
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f46:	429a      	cmp	r2, r3
 8003f48:	dd33      	ble.n	8003fb2 <Move+0x2ce>
        {
            printf("Position out of bounds");
 8003f4a:	482d      	ldr	r0, [pc, #180]	@ (8004000 <Move+0x31c>)
 8003f4c:	f010 fa92 	bl	8014474 <iprintf>
            return -1;
 8003f50:	f04f 33ff 	mov.w	r3, #4294967295
 8003f54:	e092      	b.n	800407c <Move+0x398>
        }
    }
    else // wenn relativ
    {
        L6474_GetAbsolutePosition(StepperContext->h, &help_pos);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f107 0214 	add.w	r2, r7, #20
 8003f5e:	4611      	mov	r1, r2
 8003f60:	4618      	mov	r0, r3
 8003f62:	f001 fe5a 	bl	8005c1a <L6474_GetAbsolutePosition>
        help_pos_float = (float)help_pos;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	ee07 3a90 	vmov	s15, r3
 8003f6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f70:	edc7 7a08 	vstr	s15, [r7, #32]
        help_pos_float += steps_to_move;
 8003f74:	ed97 7a08 	vldr	s14, [r7, #32]
 8003f78:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f80:	edc7 7a08 	vstr	s15, [r7, #32]
        if (help_pos_float < 0 || (int)help_pos_float > StepperContext->pos_max)
 8003f84:	edd7 7a08 	vldr	s15, [r7, #32]
 8003f88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f90:	d409      	bmi.n	8003fa6 <Move+0x2c2>
 8003f92:	edd7 7a08 	vldr	s15, [r7, #32]
 8003f96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f9a:	ee17 2a90 	vmov	r2, s15
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	dd05      	ble.n	8003fb2 <Move+0x2ce>
        {
            printf("Position out of bounds");
 8003fa6:	4816      	ldr	r0, [pc, #88]	@ (8004000 <Move+0x31c>)
 8003fa8:	f010 fa64 	bl	8014474 <iprintf>
            return -1;
 8003fac:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb0:	e064      	b.n	800407c <Move+0x398>
        }
    }

    // Prevent multiple asynchronous commands
    if (is_async && StepperContext->is_running)
 8003fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d027      	beq.n	8004008 <Move+0x324>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d023      	beq.n	8004008 <Move+0x324>
    {
        printf("Error: Stepper is already moving asynchronously\r\n");
 8003fc0:	4810      	ldr	r0, [pc, #64]	@ (8004004 <Move+0x320>)
 8003fc2:	f010 fac7 	bl	8014554 <puts>
        return -1;
 8003fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fca:	e057      	b.n	800407c <Move+0x398>
 8003fcc:	20000000 	.word	0x20000000
 8003fd0:	080181d4 	.word	0x080181d4
 8003fd4:	080181fc 	.word	0x080181fc
 8003fd8:	08018218 	.word	0x08018218
 8003fdc:	08018238 	.word	0x08018238
 8003fe0:	08018070 	.word	0x08018070
 8003fe4:	0801825c 	.word	0x0801825c
 8003fe8:	08018288 	.word	0x08018288
 8003fec:	0801828c 	.word	0x0801828c
 8003ff0:	08018290 	.word	0x08018290
 8003ff4:	080182ac 	.word	0x080182ac
 8003ff8:	42700000 	.word	0x42700000
 8003ffc:	080182c4 	.word	0x080182c4
 8004000:	080182f4 	.word	0x080182f4
 8004004:	0801830c 	.word	0x0801830c
    }

    // Perform movement
    int result = 0;
 8004008:	2300      	movs	r3, #0
 800400a:	62bb      	str	r3, [r7, #40]	@ 0x28
    StepperContext->is_running = 1; // Mark stepper as running
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2201      	movs	r2, #1
 8004010:	60da      	str	r2, [r3, #12]
    if (is_async)
 8004012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00c      	beq.n	8004032 <Move+0x34e>
    {
        result = L6474_StepIncremental(StepperContext->h, (int)steps_to_move);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004020:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004024:	ee17 1a90 	vmov	r1, s15
 8004028:	4618      	mov	r0, r3
 800402a:	f001 ff7f 	bl	8005f2c <L6474_StepIncremental>
 800402e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8004030:	e013      	b.n	800405a <Move+0x376>
    }
    else
    {
        result = L6474_StepIncremental(StepperContext->h, (int)steps_to_move);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800403a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800403e:	ee17 1a90 	vmov	r1, s15
 8004042:	4618      	mov	r0, r3
 8004044:	f001 ff72 	bl	8005f2c <L6474_StepIncremental>
 8004048:	62b8      	str	r0, [r7, #40]	@ 0x28
        while (StepperContext->is_running)
 800404a:	e002      	b.n	8004052 <Move+0x36e>
        {
            StepLibraryDelay(1); // Wait for movement to complete
 800404c:	2001      	movs	r0, #1
 800404e:	f7ff fab1 	bl	80035b4 <StepLibraryDelay>
        while (StepperContext->is_running)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f8      	bne.n	800404c <Move+0x368>
        }
    }

    // Check for errors
    if (result != 0)
 800405a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800405c:	2b00      	cmp	r3, #0
 800405e:	d009      	beq.n	8004074 <Move+0x390>
    {
        printf("Error: Movement failed\r\n");
 8004060:	4808      	ldr	r0, [pc, #32]	@ (8004084 <Move+0x3a0>)
 8004062:	f010 fa77 	bl	8014554 <puts>
        StepperContext->state = scsFLT;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2204      	movs	r2, #4
 800406a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        return -1;
 800406e:	f04f 33ff 	mov.w	r3, #4294967295
 8004072:	e003      	b.n	800407c <Move+0x398>
    }

    printf("Movement completed.\r\n");
 8004074:	4804      	ldr	r0, [pc, #16]	@ (8004088 <Move+0x3a4>)
 8004076:	f010 fa6d 	bl	8014554 <puts>
    return 0;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3740      	adds	r7, #64	@ 0x40
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	08018340 	.word	0x08018340
 8004088:	08018358 	.word	0x08018358

0800408c <Config>:
// WIP
static int Config(StepperContext_t *StepperContext, int argc, char **argv)
{
 800408c:	b5b0      	push	{r4, r5, r7, lr}
 800408e:	b090      	sub	sp, #64	@ 0x40
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
    if (argc < 2)
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2b01      	cmp	r3, #1
 800409c:	dc05      	bgt.n	80040aa <Config+0x1e>
    {
        printf("Invalid number of arguments\r\n");
 800409e:	489d      	ldr	r0, [pc, #628]	@ (8004314 <Config+0x288>)
 80040a0:	f010 fa58 	bl	8014554 <puts>
        return -1;
 80040a4:	f04f 33ff 	mov.w	r3, #4294967295
 80040a8:	e2a5      	b.n	80045f6 <Config+0x56a>
    }

    int result = 0;
 80040aa:	2300      	movs	r3, #0
 80040ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    int pos = -1;
 80040ae:	f04f 33ff 	mov.w	r3, #4294967295
 80040b2:	63bb      	str	r3, [r7, #56]	@ 0x38

    for (int i = 0; i < argc; i++)
 80040b4:	2300      	movs	r3, #0
 80040b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80040b8:	e011      	b.n	80040de <Config+0x52>
    {
        if (strcmp(argv[i], "-v") == 0)
 80040ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	4413      	add	r3, r2
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4994      	ldr	r1, [pc, #592]	@ (8004318 <Config+0x28c>)
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fc f8a2 	bl	8000210 <strcmp>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d102      	bne.n	80040d8 <Config+0x4c>
        {
            pos = i;
 80040d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040d4:	63bb      	str	r3, [r7, #56]	@ 0x38
            break;
 80040d6:	e006      	b.n	80040e6 <Config+0x5a>
    for (int i = 0; i < argc; i++)
 80040d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040da:	3301      	adds	r3, #1
 80040dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80040de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	dbe9      	blt.n	80040ba <Config+0x2e>
        }
    }

    if (strcmp(argv[1], "powerena") == 0)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	3304      	adds	r3, #4
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	498b      	ldr	r1, [pc, #556]	@ (800431c <Config+0x290>)
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fc f88e 	bl	8000210 <strcmp>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d129      	bne.n	800414e <Config+0xc2>
    {
        if (pos != -1)
 80040fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004100:	d01e      	beq.n	8004140 <Config+0xb4>
        {
            int ena = atoi(argv[pos + 1]);
 8004102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004104:	3301      	adds	r3, #1
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	4413      	add	r3, r2
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4618      	mov	r0, r3
 8004110:	f00e f89f 	bl	8012252 <atoi>
 8004114:	6238      	str	r0, [r7, #32]
            result = SetPower(ena);
 8004116:	6a38      	ldr	r0, [r7, #32]
 8004118:	f000 fa8c 	bl	8004634 <SetPower>
 800411c:	63f8      	str	r0, [r7, #60]	@ 0x3c
            if (ena)
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d006      	beq.n	8004132 <Config+0xa6>
            {
                StepperContext->state = scs.ENA; // DIS -> ENA
 8004124:	4b7e      	ldr	r3, [pc, #504]	@ (8004320 <Config+0x294>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	b2da      	uxtb	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004130:	e260      	b.n	80045f4 <Config+0x568>
            }
            else
            {
                StepperContext->state = scs.DIS; // ENA -> DIS
 8004132:	4b7b      	ldr	r3, [pc, #492]	@ (8004320 <Config+0x294>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	b2da      	uxtb	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800413e:	e259      	b.n	80045f4 <Config+0x568>
            }
        }
        else
        {
            printf("Current Powerstate: %d\r\n", StepperContext->is_powered);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	4619      	mov	r1, r3
 8004146:	4877      	ldr	r0, [pc, #476]	@ (8004324 <Config+0x298>)
 8004148:	f010 f994 	bl	8014474 <iprintf>
 800414c:	e252      	b.n	80045f4 <Config+0x568>
        }
    }
    else if (strcmp(argv[1], "torque") == 0)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3304      	adds	r3, #4
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4974      	ldr	r1, [pc, #464]	@ (8004328 <Config+0x29c>)
 8004156:	4618      	mov	r0, r3
 8004158:	f7fc f85a 	bl	8000210 <strcmp>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d127      	bne.n	80041b2 <Config+0x126>
    {
        if (pos != -1)
 8004162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004168:	d012      	beq.n	8004190 <Config+0x104>
        {
            result = L6474_SetProperty(StepperContext->h, L6474_PROP_TORQUE, atoi(argv[pos + 1]));
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681c      	ldr	r4, [r3, #0]
 800416e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004170:	3301      	adds	r3, #1
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	4413      	add	r3, r2
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f00e f869 	bl	8012252 <atoi>
 8004180:	4603      	mov	r3, r0
 8004182:	461a      	mov	r2, r3
 8004184:	2109      	movs	r1, #9
 8004186:	4620      	mov	r0, r4
 8004188:	f001 fdc9 	bl	8005d1e <L6474_SetProperty>
 800418c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800418e:	e231      	b.n	80045f4 <Config+0x568>
        }
        else
        {
            int value = 0;
 8004190:	2300      	movs	r3, #0
 8004192:	61fb      	str	r3, [r7, #28]
            result = L6474_GetProperty(StepperContext->h, L6474_PROP_TORQUE, &value);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f107 021c 	add.w	r2, r7, #28
 800419c:	2109      	movs	r1, #9
 800419e:	4618      	mov	r0, r3
 80041a0:	f001 fdf9 	bl	8005d96 <L6474_GetProperty>
 80041a4:	63f8      	str	r0, [r7, #60]	@ 0x3c
            printf("%d\r\n", value);
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	4619      	mov	r1, r3
 80041aa:	4860      	ldr	r0, [pc, #384]	@ (800432c <Config+0x2a0>)
 80041ac:	f010 f962 	bl	8014474 <iprintf>
 80041b0:	e220      	b.n	80045f4 <Config+0x568>
        }
    }
    else if (strcmp(argv[1], "throvercurr") == 0)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3304      	adds	r3, #4
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	495d      	ldr	r1, [pc, #372]	@ (8004330 <Config+0x2a4>)
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fc f828 	bl	8000210 <strcmp>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d127      	bne.n	8004216 <Config+0x18a>
    {
        if (pos != -1)
 80041c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041cc:	d012      	beq.n	80041f4 <Config+0x168>
        {
            result = L6474_SetProperty(StepperContext->h, L6474_PROP_OCDTH, atoi(argv[pos + 1]));
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681c      	ldr	r4, [r3, #0]
 80041d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d4:	3301      	adds	r3, #1
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	4413      	add	r3, r2
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4618      	mov	r0, r3
 80041e0:	f00e f837 	bl	8012252 <atoi>
 80041e4:	4603      	mov	r3, r0
 80041e6:	461a      	mov	r2, r3
 80041e8:	2113      	movs	r1, #19
 80041ea:	4620      	mov	r0, r4
 80041ec:	f001 fd97 	bl	8005d1e <L6474_SetProperty>
 80041f0:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80041f2:	e1ff      	b.n	80045f4 <Config+0x568>
        }
        else
        {
            int value = 0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	61bb      	str	r3, [r7, #24]
            result = L6474_GetProperty(StepperContext->h, L6474_PROP_OCDTH, &value);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f107 0218 	add.w	r2, r7, #24
 8004200:	2113      	movs	r1, #19
 8004202:	4618      	mov	r0, r3
 8004204:	f001 fdc7 	bl	8005d96 <L6474_GetProperty>
 8004208:	63f8      	str	r0, [r7, #60]	@ 0x3c
            printf("%d\r\n", value);
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	4619      	mov	r1, r3
 800420e:	4847      	ldr	r0, [pc, #284]	@ (800432c <Config+0x2a0>)
 8004210:	f010 f930 	bl	8014474 <iprintf>
 8004214:	e1ee      	b.n	80045f4 <Config+0x568>
        }
    }
    else if (strcmp(argv[1], "stepmode") == 0)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	3304      	adds	r3, #4
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4945      	ldr	r1, [pc, #276]	@ (8004334 <Config+0x2a8>)
 800421e:	4618      	mov	r0, r3
 8004220:	f7fb fff6 	bl	8000210 <strcmp>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	f040 808a 	bne.w	8004340 <Config+0x2b4>
    {
        if (pos != -1)
 800422c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800422e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004232:	d066      	beq.n	8004302 <Config+0x276>
        {
            L6474x_StepMode_t step_mode_l;
            switch (atoi(argv[pos + 1]))
 8004234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004236:	3301      	adds	r3, #1
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	4413      	add	r3, r2
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4618      	mov	r0, r3
 8004242:	f00e f806 	bl	8012252 <atoi>
 8004246:	4603      	mov	r3, r0
 8004248:	3b01      	subs	r3, #1
 800424a:	2b0f      	cmp	r3, #15
 800424c:	d836      	bhi.n	80042bc <Config+0x230>
 800424e:	a201      	add	r2, pc, #4	@ (adr r2, 8004254 <Config+0x1c8>)
 8004250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004254:	08004295 	.word	0x08004295
 8004258:	0800429d 	.word	0x0800429d
 800425c:	080042bd 	.word	0x080042bd
 8004260:	080042a5 	.word	0x080042a5
 8004264:	080042bd 	.word	0x080042bd
 8004268:	080042bd 	.word	0x080042bd
 800426c:	080042bd 	.word	0x080042bd
 8004270:	080042ad 	.word	0x080042ad
 8004274:	080042bd 	.word	0x080042bd
 8004278:	080042bd 	.word	0x080042bd
 800427c:	080042bd 	.word	0x080042bd
 8004280:	080042bd 	.word	0x080042bd
 8004284:	080042bd 	.word	0x080042bd
 8004288:	080042bd 	.word	0x080042bd
 800428c:	080042bd 	.word	0x080042bd
 8004290:	080042b5 	.word	0x080042b5
            {
            case 1:
                step_mode_l = smFULL;
 8004294:	2300      	movs	r3, #0
 8004296:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                break;
 800429a:	e015      	b.n	80042c8 <Config+0x23c>
            case 2:
                step_mode_l = smHALF;
 800429c:	2301      	movs	r3, #1
 800429e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                break;
 80042a2:	e011      	b.n	80042c8 <Config+0x23c>
            case 4:
                step_mode_l = smMICRO4;
 80042a4:	2302      	movs	r3, #2
 80042a6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                break;
 80042aa:	e00d      	b.n	80042c8 <Config+0x23c>
            case 8:
                step_mode_l = smMICRO8;
 80042ac:	2303      	movs	r3, #3
 80042ae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                break;
 80042b2:	e009      	b.n	80042c8 <Config+0x23c>
            case 16:
                step_mode_l = smMICRO16;
 80042b4:	2304      	movs	r3, #4
 80042b6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                break;
 80042ba:	e005      	b.n	80042c8 <Config+0x23c>
            default:
                printf("Error: Invalid step mode\r\n");
 80042bc:	481e      	ldr	r0, [pc, #120]	@ (8004338 <Config+0x2ac>)
 80042be:	f010 f949 	bl	8014554 <puts>
                return -1;
 80042c2:	f04f 33ff 	mov.w	r3, #4294967295
 80042c6:	e196      	b.n	80045f6 <Config+0x56a>
            }
            result = L6474_SetStepMode(StepperContext->h, step_mode_l);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80042d0:	4611      	mov	r1, r2
 80042d2:	4618      	mov	r0, r3
 80042d4:	f001 fc1c 	bl	8005b10 <L6474_SetStepMode>
 80042d8:	63f8      	str	r0, [r7, #60]	@ 0x3c
            if (result == 0)
 80042da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f040 8189 	bne.w	80045f4 <Config+0x568>
            {
                StepperContext->step_mode = step_mode_l;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80042e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                StepperContext->is_referenced = 0; // Force a new reference run
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	609a      	str	r2, [r3, #8]
                StepperContext->state = scsREF;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                printf("Step mode updated. Please perform a reference run.\r\n");
 80042fa:	4810      	ldr	r0, [pc, #64]	@ (800433c <Config+0x2b0>)
 80042fc:	f010 f92a 	bl	8014554 <puts>
 8004300:	e178      	b.n	80045f4 <Config+0x568>
            }
        }
        else
        {
            printf("%d\r\n", StepperContext->step_mode);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004308:	4619      	mov	r1, r3
 800430a:	4808      	ldr	r0, [pc, #32]	@ (800432c <Config+0x2a0>)
 800430c:	f010 f8b2 	bl	8014474 <iprintf>
 8004310:	e170      	b.n	80045f4 <Config+0x568>
 8004312:	bf00      	nop
 8004314:	08018370 	.word	0x08018370
 8004318:	08018390 	.word	0x08018390
 800431c:	08018394 	.word	0x08018394
 8004320:	20000000 	.word	0x20000000
 8004324:	080183a0 	.word	0x080183a0
 8004328:	080183bc 	.word	0x080183bc
 800432c:	080181cc 	.word	0x080181cc
 8004330:	080183c4 	.word	0x080183c4
 8004334:	080183d0 	.word	0x080183d0
 8004338:	080183dc 	.word	0x080183dc
 800433c:	080183f8 	.word	0x080183f8
        }
    }
    else if (strcmp(argv[1], "timeon") == 0 || strcmp(argv[1], "timeoff") == 0 || strcmp(argv[1], "timefast") == 0)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3304      	adds	r3, #4
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	49ae      	ldr	r1, [pc, #696]	@ (8004600 <Config+0x574>)
 8004348:	4618      	mov	r0, r3
 800434a:	f7fb ff61 	bl	8000210 <strcmp>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d013      	beq.n	800437c <Config+0x2f0>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3304      	adds	r3, #4
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	49aa      	ldr	r1, [pc, #680]	@ (8004604 <Config+0x578>)
 800435c:	4618      	mov	r0, r3
 800435e:	f7fb ff57 	bl	8000210 <strcmp>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d009      	beq.n	800437c <Config+0x2f0>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3304      	adds	r3, #4
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	49a6      	ldr	r1, [pc, #664]	@ (8004608 <Config+0x57c>)
 8004370:	4618      	mov	r0, r3
 8004372:	f7fb ff4d 	bl	8000210 <strcmp>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d154      	bne.n	8004426 <Config+0x39a>
    {

        int property;
        if (strcmp(argv[1], "timeon") == 0)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3304      	adds	r3, #4
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	499f      	ldr	r1, [pc, #636]	@ (8004600 <Config+0x574>)
 8004384:	4618      	mov	r0, r3
 8004386:	f7fb ff43 	bl	8000210 <strcmp>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d102      	bne.n	8004396 <Config+0x30a>
        {
            property = L6474_PROP_TON;
 8004390:	230f      	movs	r3, #15
 8004392:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004394:	e00e      	b.n	80043b4 <Config+0x328>
        }
        else if (strcmp(argv[1], "timeoff") == 0)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	3304      	adds	r3, #4
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4999      	ldr	r1, [pc, #612]	@ (8004604 <Config+0x578>)
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fb ff36 	bl	8000210 <strcmp>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d102      	bne.n	80043b0 <Config+0x324>
        {
            property = L6474_PROP_TOFF;
 80043aa:	2310      	movs	r3, #16
 80043ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043ae:	e001      	b.n	80043b4 <Config+0x328>
        }
        else
        {
            property = L6474_PROP_TFAST;
 80043b0:	230e      	movs	r3, #14
 80043b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        if (pos != -1)
 80043b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ba:	d022      	beq.n	8004402 <Config+0x376>
        {
            if (StepperContext->state == scs.ENA)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80043c2:	461a      	mov	r2, r3
 80043c4:	4b91      	ldr	r3, [pc, #580]	@ (800460c <Config+0x580>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d105      	bne.n	80043d8 <Config+0x34c>
            {
                printf("Error: Parameter can not be changed in scsENA!\n\r");
 80043cc:	4890      	ldr	r0, [pc, #576]	@ (8004610 <Config+0x584>)
 80043ce:	f010 f851 	bl	8014474 <iprintf>
                return -1;
 80043d2:	f04f 33ff 	mov.w	r3, #4294967295
 80043d6:	e10e      	b.n	80045f6 <Config+0x56a>
            }
            result = L6474_SetProperty(StepperContext->h, property, atoi(argv[pos + 1]));
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681c      	ldr	r4, [r3, #0]
 80043dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043de:	b2dd      	uxtb	r5, r3
 80043e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e2:	3301      	adds	r3, #1
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	4413      	add	r3, r2
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f00d ff30 	bl	8012252 <atoi>
 80043f2:	4603      	mov	r3, r0
 80043f4:	461a      	mov	r2, r3
 80043f6:	4629      	mov	r1, r5
 80043f8:	4620      	mov	r0, r4
 80043fa:	f001 fc90 	bl	8005d1e <L6474_SetProperty>
 80043fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
    {
 8004400:	e0f8      	b.n	80045f4 <Config+0x568>
        }
        else
        {
            int value = 0;
 8004402:	2300      	movs	r3, #0
 8004404:	617b      	str	r3, [r7, #20]
            result = L6474_GetProperty(StepperContext->h, property, &value);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800440c:	b2d1      	uxtb	r1, r2
 800440e:	f107 0214 	add.w	r2, r7, #20
 8004412:	4618      	mov	r0, r3
 8004414:	f001 fcbf 	bl	8005d96 <L6474_GetProperty>
 8004418:	63f8      	str	r0, [r7, #60]	@ 0x3c
            printf("%d\r\n", value);
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	4619      	mov	r1, r3
 800441e:	487d      	ldr	r0, [pc, #500]	@ (8004614 <Config+0x588>)
 8004420:	f010 f828 	bl	8014474 <iprintf>
    {
 8004424:	e0e6      	b.n	80045f4 <Config+0x568>
        }
    }
    else if (strcmp(argv[1], "mmperturn") == 0)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	3304      	adds	r3, #4
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	497a      	ldr	r1, [pc, #488]	@ (8004618 <Config+0x58c>)
 800442e:	4618      	mov	r0, r3
 8004430:	f7fb feee 	bl	8000210 <strcmp>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d121      	bne.n	800447e <Config+0x3f2>
    {
        if (pos != -1)
 800443a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800443c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004440:	d012      	beq.n	8004468 <Config+0x3dc>
        {
            StepperContext->mm_per_turn = atof(argv[pos + 1]);
 8004442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004444:	3301      	adds	r3, #1
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	4413      	add	r3, r2
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f00d fefc 	bl	801224c <atof>
 8004454:	ec53 2b10 	vmov	r2, r3, d0
 8004458:	4610      	mov	r0, r2
 800445a:	4619      	mov	r1, r3
 800445c:	f7fc fbf4 	bl	8000c48 <__aeabi_d2f>
 8004460:	4602      	mov	r2, r0
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004466:	e0c5      	b.n	80045f4 <Config+0x568>
        }
        else
        {
            printf("%f\r\n", StepperContext->mm_per_turn);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800446c:	4618      	mov	r0, r3
 800446e:	f7fc f89b 	bl	80005a8 <__aeabi_f2d>
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	4869      	ldr	r0, [pc, #420]	@ (800461c <Config+0x590>)
 8004478:	f00f fffc 	bl	8014474 <iprintf>
 800447c:	e0ba      	b.n	80045f4 <Config+0x568>
        }
    }
    else if (strcmp(argv[1], "stepsperturn") == 0)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	3304      	adds	r3, #4
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4966      	ldr	r1, [pc, #408]	@ (8004620 <Config+0x594>)
 8004486:	4618      	mov	r0, r3
 8004488:	f7fb fec2 	bl	8000210 <strcmp>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d121      	bne.n	80044d6 <Config+0x44a>
    {
        if (pos != -1)
 8004492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004498:	d012      	beq.n	80044c0 <Config+0x434>
        {
            StepperContext->steps_per_turn = atof(argv[pos + 1]);
 800449a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800449c:	3301      	adds	r3, #1
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	4413      	add	r3, r2
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f00d fed0 	bl	801224c <atof>
 80044ac:	ec53 2b10 	vmov	r2, r3, d0
 80044b0:	4610      	mov	r0, r2
 80044b2:	4619      	mov	r1, r3
 80044b4:	f7fc fbc8 	bl	8000c48 <__aeabi_d2f>
 80044b8:	4602      	mov	r2, r0
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80044be:	e099      	b.n	80045f4 <Config+0x568>
        }
        else
        {
            printf("%f\r\n", StepperContext->steps_per_turn);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7fc f86f 	bl	80005a8 <__aeabi_f2d>
 80044ca:	4602      	mov	r2, r0
 80044cc:	460b      	mov	r3, r1
 80044ce:	4853      	ldr	r0, [pc, #332]	@ (800461c <Config+0x590>)
 80044d0:	f00f ffd0 	bl	8014474 <iprintf>
 80044d4:	e08e      	b.n	80045f4 <Config+0x568>
        }
    }
    else if (strcmp(argv[1], "posmin") == 0 || strcmp(argv[1], "posmax") == 0 || strcmp(argv[1], "posref") == 0)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	3304      	adds	r3, #4
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4951      	ldr	r1, [pc, #324]	@ (8004624 <Config+0x598>)
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fb fe96 	bl	8000210 <strcmp>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d013      	beq.n	8004512 <Config+0x486>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	3304      	adds	r3, #4
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	494d      	ldr	r1, [pc, #308]	@ (8004628 <Config+0x59c>)
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fb fe8c 	bl	8000210 <strcmp>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d009      	beq.n	8004512 <Config+0x486>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	3304      	adds	r3, #4
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4949      	ldr	r1, [pc, #292]	@ (800462c <Config+0x5a0>)
 8004506:	4618      	mov	r0, r3
 8004508:	f7fb fe82 	bl	8000210 <strcmp>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d16a      	bne.n	80045e8 <Config+0x55c>
    {
        int *position_steps;
        if (strcmp(argv[1], "posmin") == 0)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	3304      	adds	r3, #4
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4942      	ldr	r1, [pc, #264]	@ (8004624 <Config+0x598>)
 800451a:	4618      	mov	r0, r3
 800451c:	f7fb fe78 	bl	8000210 <strcmp>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d103      	bne.n	800452e <Config+0x4a2>
        {
            position_steps = &StepperContext->pos_min;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3328      	adds	r3, #40	@ 0x28
 800452a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800452c:	e010      	b.n	8004550 <Config+0x4c4>
        }
        else if (strcmp(argv[1], "posmax") == 0)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	3304      	adds	r3, #4
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	493c      	ldr	r1, [pc, #240]	@ (8004628 <Config+0x59c>)
 8004536:	4618      	mov	r0, r3
 8004538:	f7fb fe6a 	bl	8000210 <strcmp>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d103      	bne.n	800454a <Config+0x4be>
        {
            position_steps = &StepperContext->pos_max;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	332c      	adds	r3, #44	@ 0x2c
 8004546:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004548:	e002      	b.n	8004550 <Config+0x4c4>
        }
        else
        {
            position_steps = &StepperContext->pos_ref;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	3330      	adds	r3, #48	@ 0x30
 800454e:	62bb      	str	r3, [r7, #40]	@ 0x28
        }

        if (pos != -1)
 8004550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004556:	d028      	beq.n	80045aa <Config+0x51e>
        {
            float input = atof(argv[pos + 1]);
 8004558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800455a:	3301      	adds	r3, #1
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	4413      	add	r3, r2
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4618      	mov	r0, r3
 8004566:	f00d fe71 	bl	801224c <atof>
 800456a:	ec53 2b10 	vmov	r2, r3, d0
 800456e:	4610      	mov	r0, r2
 8004570:	4619      	mov	r1, r3
 8004572:	f7fc fb69 	bl	8000c48 <__aeabi_d2f>
 8004576:	4603      	mov	r3, r0
 8004578:	627b      	str	r3, [r7, #36]	@ 0x24
            *position_steps = (int)((input * StepperContext->steps_per_turn * StepperContext->resolution) / StepperContext->mm_per_turn);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8004580:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004584:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800458e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8004598:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800459c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045a0:	ee17 2a90 	vmov	r2, s15
 80045a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a6:	601a      	str	r2, [r3, #0]
    {
 80045a8:	e024      	b.n	80045f4 <Config+0x568>
        }
        else
        {
            printf("%f\r\n", (*position_steps * StepperContext->mm_per_turn) / (StepperContext->steps_per_turn* StepperContext->resolution));
 80045aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	ee07 3a90 	vmov	s15, r3
 80045b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80045bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80045cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80045d4:	ee16 0a90 	vmov	r0, s13
 80045d8:	f7fb ffe6 	bl	80005a8 <__aeabi_f2d>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	480e      	ldr	r0, [pc, #56]	@ (800461c <Config+0x590>)
 80045e2:	f00f ff47 	bl	8014474 <iprintf>
    {
 80045e6:	e005      	b.n	80045f4 <Config+0x568>
        }
    }
    else
    {
        printf("Invalid config parameter\r\n");
 80045e8:	4811      	ldr	r0, [pc, #68]	@ (8004630 <Config+0x5a4>)
 80045ea:	f00f ffb3 	bl	8014554 <puts>
        return -1;
 80045ee:	f04f 33ff 	mov.w	r3, #4294967295
 80045f2:	e000      	b.n	80045f6 <Config+0x56a>
    }

    return result;
 80045f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3740      	adds	r7, #64	@ 0x40
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bdb0      	pop	{r4, r5, r7, pc}
 80045fe:	bf00      	nop
 8004600:	0801842c 	.word	0x0801842c
 8004604:	08018434 	.word	0x08018434
 8004608:	0801843c 	.word	0x0801843c
 800460c:	20000000 	.word	0x20000000
 8004610:	08018448 	.word	0x08018448
 8004614:	080181cc 	.word	0x080181cc
 8004618:	0801847c 	.word	0x0801847c
 800461c:	08018488 	.word	0x08018488
 8004620:	08018490 	.word	0x08018490
 8004624:	080184a0 	.word	0x080184a0
 8004628:	080184a8 	.word	0x080184a8
 800462c:	080184b0 	.word	0x080184b0
 8004630:	080184b8 	.word	0x080184b8

08004634 <SetPower>:

// WIP kind of very done
int SetPower(int ena)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
    if ((StepperContext.state != scs.ENA) && (StepperContext.state != scs.DIS))
 800463c:	4b17      	ldr	r3, [pc, #92]	@ (800469c <SetPower+0x68>)
 800463e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004642:	461a      	mov	r2, r3
 8004644:	4b16      	ldr	r3, [pc, #88]	@ (80046a0 <SetPower+0x6c>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	429a      	cmp	r2, r3
 800464a:	d00d      	beq.n	8004668 <SetPower+0x34>
 800464c:	4b13      	ldr	r3, [pc, #76]	@ (800469c <SetPower+0x68>)
 800464e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004652:	461a      	mov	r2, r3
 8004654:	4b12      	ldr	r3, [pc, #72]	@ (80046a0 <SetPower+0x6c>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	429a      	cmp	r2, r3
 800465a:	d005      	beq.n	8004668 <SetPower+0x34>
    {
        printf("Power can only be set in state ENA or DIS\r\n");
 800465c:	4811      	ldr	r0, [pc, #68]	@ (80046a4 <SetPower+0x70>)
 800465e:	f00f ff79 	bl	8014554 <puts>
        return -1;
 8004662:	f04f 33ff 	mov.w	r3, #4294967295
 8004666:	e015      	b.n	8004694 <SetPower+0x60>
    }
    if (ena != 0 && ena != 1)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d008      	beq.n	8004680 <SetPower+0x4c>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d005      	beq.n	8004680 <SetPower+0x4c>
    {
        printf("Invalid argument for ena\r\n");
 8004674:	480c      	ldr	r0, [pc, #48]	@ (80046a8 <SetPower+0x74>)
 8004676:	f00f ff6d 	bl	8014554 <puts>
        return -1;
 800467a:	f04f 33ff 	mov.w	r3, #4294967295
 800467e:	e009      	b.n	8004694 <SetPower+0x60>
    }
    StepperContext.is_powered = ena;
 8004680:	4a06      	ldr	r2, [pc, #24]	@ (800469c <SetPower+0x68>)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6053      	str	r3, [r2, #4]
    return L6474_SetPowerOutputs(StepperContext.h, ena);
 8004686:	4b05      	ldr	r3, [pc, #20]	@ (800469c <SetPower+0x68>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	4618      	mov	r0, r3
 800468e:	f001 fa84 	bl	8005b9a <L6474_SetPowerOutputs>
 8004692:	4603      	mov	r3, r0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	200002b0 	.word	0x200002b0
 80046a0:	20000000 	.word	0x20000000
 80046a4:	080184d4 	.word	0x080184d4
 80046a8:	08018500 	.word	0x08018500

080046ac <SetSpeed>:
// WIP kind of done
void SetSpeed(StepperContext_t *StepperContext, int steps_per_sec)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
    // Get the system clock frequency (e.g., 72 MHz)
    int clk = HAL_RCC_GetHCLKFreq();
 80046b6:	f004 fba1 	bl	8008dfc <HAL_RCC_GetHCLKFreq>
 80046ba:	4603      	mov	r3, r0
 80046bc:	613b      	str	r3, [r7, #16]

    // Calculate the timer period for the desired step frequency
    // Multiply by 2 because the timer toggles once for the rising edge and once for the falling edge
    int timer_period = clk / (steps_per_sec * 2);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80046c8:	60fb      	str	r3, [r7, #12]

    // Initialize the prescaler to 0
    int i = 0;
 80046ca:	2300      	movs	r3, #0
 80046cc:	617b      	str	r3, [r7, #20]

    // make upscaler bigger until reload value is <= 16 bit
    while ((timer_period / (i + 1)) > 65535)
 80046ce:	e002      	b.n	80046d6 <SetSpeed+0x2a>
        i++;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	3301      	adds	r3, #1
 80046d4:	617b      	str	r3, [r7, #20]
    while ((timer_period / (i + 1)) > 65535)
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	3301      	adds	r3, #1
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80046e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046e4:	daf4      	bge.n	80046d0 <SetSpeed+0x24>

    // Set the prescaler value to slow down the timer's counting rate
    __HAL_TIM_SET_PRESCALER(StepperContext->htim4, i);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	629a      	str	r2, [r3, #40]	@ 0x28

    // Set the auto-reload value to define the timer period
    // Subtract 1 because the timer counts from 0 to ARR
    __HAL_TIM_SET_AUTORELOAD(StepperContext->htim4, (timer_period / (i + 1)) - 1);
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	3301      	adds	r3, #1
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80046fa:	1e5a      	subs	r2, r3, #1
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	3301      	adds	r3, #1
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	fb92 f3f3 	sdiv	r3, r2, r3
 800470e:	1e5a      	subs	r2, r3, #1
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	60da      	str	r2, [r3, #12]

    // ARR = Auto-reload register, we set it to 50% duty cycle
    StepperContext->htim4->Instance->CCR4 = StepperContext->htim4->Instance->ARR / 2;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	0852      	lsrs	r2, r2, #1
 8004726:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004728:	bf00      	nop
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <TimerStart>:
// WIP kind of done
void TimerStart(unsigned int pulse_count)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
    // Limit the number of pulses to a maximum of 16 bit
    int active_pulses = (pulse_count >= 65535) ? 65535 : pulse_count;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800473e:	4293      	cmp	r3, r2
 8004740:	bf28      	it	cs
 8004742:	4613      	movcs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]
    StepperContext.remaining_pulses = pulse_count - active_pulses;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	461a      	mov	r2, r3
 800474e:	4b1a      	ldr	r3, [pc, #104]	@ (80047b8 <TimerStart+0x88>)
 8004750:	619a      	str	r2, [r3, #24]
    if (active_pulses > 1)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b01      	cmp	r3, #1
 8004756:	dd25      	ble.n	80047a4 <TimerStart+0x74>
    {
        // set timer params and start it
        HAL_TIM_OnePulse_Stop_IT(StepperContext.htim1, TIM_CHANNEL_1);
 8004758:	4b17      	ldr	r3, [pc, #92]	@ (80047b8 <TimerStart+0x88>)
 800475a:	69db      	ldr	r3, [r3, #28]
 800475c:	2100      	movs	r1, #0
 800475e:	4618      	mov	r0, r3
 8004760:	f007 f924 	bl	800b9ac <HAL_TIM_OnePulse_Stop_IT>
        __HAL_TIM_SET_AUTORELOAD(StepperContext.htim1, active_pulses);
 8004764:	4b14      	ldr	r3, [pc, #80]	@ (80047b8 <TimerStart+0x88>)
 8004766:	69db      	ldr	r3, [r3, #28]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800476e:	4b12      	ldr	r3, [pc, #72]	@ (80047b8 <TimerStart+0x88>)
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	60da      	str	r2, [r3, #12]
        HAL_TIM_GenerateEvent(StepperContext.htim1, TIM_EVENTSOURCE_UPDATE);
 8004776:	4b10      	ldr	r3, [pc, #64]	@ (80047b8 <TimerStart+0x88>)
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	2101      	movs	r1, #1
 800477c:	4618      	mov	r0, r3
 800477e:	f007 fec1 	bl	800c504 <HAL_TIM_GenerateEvent>
        HAL_TIM_OnePulse_Start_IT(StepperContext.htim1, TIM_CHANNEL_1);
 8004782:	4b0d      	ldr	r3, [pc, #52]	@ (80047b8 <TimerStart+0x88>)
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	2100      	movs	r1, #0
 8004788:	4618      	mov	r0, r3
 800478a:	f007 f89d 	bl	800b8c8 <HAL_TIM_OnePulse_Start_IT>
        __HAL_TIM_ENABLE(StepperContext.htim1);
 800478e:	4b0a      	ldr	r3, [pc, #40]	@ (80047b8 <TimerStart+0x88>)
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	4b08      	ldr	r3, [pc, #32]	@ (80047b8 <TimerStart+0x88>)
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f042 0201 	orr.w	r2, r2, #1
 80047a0:	601a      	str	r2, [r3, #0]
    else
    {
        // signal completion
        StepperContext.done_callback(StepperContext.h);
    }
}
 80047a2:	e005      	b.n	80047b0 <TimerStart+0x80>
        StepperContext.done_callback(StepperContext.h);
 80047a4:	4b04      	ldr	r3, [pc, #16]	@ (80047b8 <TimerStart+0x88>)
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	4a03      	ldr	r2, [pc, #12]	@ (80047b8 <TimerStart+0x88>)
 80047aa:	6812      	ldr	r2, [r2, #0]
 80047ac:	4610      	mov	r0, r2
 80047ae:	4798      	blx	r3
}
 80047b0:	bf00      	nop
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	200002b0 	.word	0x200002b0

080047bc <HAL_TIM_PWM_PulseFinishedCallback>:
// WIP kind of done
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
    // check if pulse is finished
    if ((StepperContext.done_callback != 0) && ((htim->Instance->SR & (1 << 2)) == 0))
 80047c4:	4b13      	ldr	r3, [pc, #76]	@ (8004814 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d01e      	beq.n	800480a <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f003 0304 	and.w	r3, r3, #4
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d117      	bne.n	800480a <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
    {
        StepperContext.steps_done++;
 80047da:	4b0e      	ldr	r3, [pc, #56]	@ (8004814 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 80047dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047de:	3301      	adds	r3, #1
 80047e0:	4a0c      	ldr	r2, [pc, #48]	@ (8004814 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 80047e2:	6493      	str	r3, [r2, #72]	@ 0x48
        // process remaining pulses
        if (StepperContext.remaining_pulses > 0)
 80047e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004814 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	dd05      	ble.n	80047f8 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>
        {
            TimerStart(StepperContext.remaining_pulses);
 80047ec:	4b09      	ldr	r3, [pc, #36]	@ (8004814 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7ff ff9d 	bl	8004730 <TimerStart>
            // finished
            StepperContext.done_callback(StepperContext.h);
            StepperContext.is_running = 0;
        }
    }
}
 80047f6:	e008      	b.n	800480a <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
            StepperContext.done_callback(StepperContext.h);
 80047f8:	4b06      	ldr	r3, [pc, #24]	@ (8004814 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	4a05      	ldr	r2, [pc, #20]	@ (8004814 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 80047fe:	6812      	ldr	r2, [r2, #0]
 8004800:	4610      	mov	r0, r2
 8004802:	4798      	blx	r3
            StepperContext.is_running = 0;
 8004804:	4b03      	ldr	r3, [pc, #12]	@ (8004814 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 8004806:	2200      	movs	r2, #0
 8004808:	60da      	str	r2, [r3, #12]
}
 800480a:	bf00      	nop
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	200002b0 	.word	0x200002b0

08004818 <StepperHandler>:
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
}

static int StepperHandler(int argc, char **argv, void *ctx)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
    StepperContext_t *StepperContext = (StepperContext_t *)ctx;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	613b      	str	r3, [r7, #16]
    int result = 0;
 8004828:	2300      	movs	r3, #0
 800482a:	617b      	str	r3, [r7, #20]

    // UpdateStepperLEDs(StepperContext);

    if (argc == 0)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d105      	bne.n	800483e <StepperHandler+0x26>
    {
        printf("Invalid number of arguments\r\n");
 8004832:	4843      	ldr	r0, [pc, #268]	@ (8004940 <StepperHandler+0x128>)
 8004834:	f00f fe8e 	bl	8014554 <puts>
        return -1;
 8004838:	f04f 33ff 	mov.w	r3, #4294967295
 800483c:	e07c      	b.n	8004938 <StepperHandler+0x120>
    }
    if (strcmp(argv[0], "move") == 0)
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4940      	ldr	r1, [pc, #256]	@ (8004944 <StepperHandler+0x12c>)
 8004844:	4618      	mov	r0, r3
 8004846:	f7fb fce3 	bl	8000210 <strcmp>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d106      	bne.n	800485e <StepperHandler+0x46>
    {
        result = Move(StepperContext, argc, argv);
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	68f9      	ldr	r1, [r7, #12]
 8004854:	6938      	ldr	r0, [r7, #16]
 8004856:	f7ff fa45 	bl	8003ce4 <Move>
 800485a:	6178      	str	r0, [r7, #20]
 800485c:	e061      	b.n	8004922 <StepperHandler+0x10a>
    }
    else if (strcmp(argv[0], "reset") == 0)
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4939      	ldr	r1, [pc, #228]	@ (8004948 <StepperHandler+0x130>)
 8004864:	4618      	mov	r0, r3
 8004866:	f7fb fcd3 	bl	8000210 <strcmp>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d104      	bne.n	800487a <StepperHandler+0x62>
    {
        result = Reset(StepperContext);
 8004870:	6938      	ldr	r0, [r7, #16]
 8004872:	f7fe ff37 	bl	80036e4 <Reset>
 8004876:	6178      	str	r0, [r7, #20]
 8004878:	e053      	b.n	8004922 <StepperHandler+0x10a>
    }
    else if (strcmp(argv[0], "config") == 0)
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4933      	ldr	r1, [pc, #204]	@ (800494c <StepperHandler+0x134>)
 8004880:	4618      	mov	r0, r3
 8004882:	f7fb fcc5 	bl	8000210 <strcmp>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d106      	bne.n	800489a <StepperHandler+0x82>
    {
        result = Config(StepperContext, argc, argv);
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	68f9      	ldr	r1, [r7, #12]
 8004890:	6938      	ldr	r0, [r7, #16]
 8004892:	f7ff fbfb 	bl	800408c <Config>
 8004896:	6178      	str	r0, [r7, #20]
 8004898:	e043      	b.n	8004922 <StepperHandler+0x10a>
    }
    else if (strcmp(argv[0], "reference") == 0)
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	492c      	ldr	r1, [pc, #176]	@ (8004950 <StepperHandler+0x138>)
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fb fcb5 	bl	8000210 <strcmp>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d106      	bne.n	80048ba <StepperHandler+0xa2>
    {
        result = Reference(StepperContext, argc, argv);
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	68f9      	ldr	r1, [r7, #12]
 80048b0:	6938      	ldr	r0, [r7, #16]
 80048b2:	f7fe ff91 	bl	80037d8 <Reference>
 80048b6:	6178      	str	r0, [r7, #20]
 80048b8:	e033      	b.n	8004922 <StepperHandler+0x10a>
    }
    else if (strcmp(argv[0], "cancel") == 0)
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4925      	ldr	r1, [pc, #148]	@ (8004954 <StepperHandler+0x13c>)
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7fb fca5 	bl	8000210 <strcmp>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d104      	bne.n	80048d6 <StepperHandler+0xbe>
    {
        result = StepTimerCancelAsync(NULL);
 80048cc:	2000      	movs	r0, #0
 80048ce:	f7fe fedf 	bl	8003690 <StepTimerCancelAsync>
 80048d2:	6178      	str	r0, [r7, #20]
 80048d4:	e025      	b.n	8004922 <StepperHandler+0x10a>
    }
    else if (strcmp(argv[0], "position") == 0)
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	491f      	ldr	r1, [pc, #124]	@ (8004958 <StepperHandler+0x140>)
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fb fc97 	bl	8000210 <strcmp>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d106      	bne.n	80048f6 <StepperHandler+0xde>
    {
        result = Position(StepperContext, argc, argv);
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	68f9      	ldr	r1, [r7, #12]
 80048ec:	6938      	ldr	r0, [r7, #16]
 80048ee:	f7ff f93d 	bl	8003b6c <Position>
 80048f2:	6178      	str	r0, [r7, #20]
 80048f4:	e015      	b.n	8004922 <StepperHandler+0x10a>
    }
    else if (strcmp(argv[0], "status") == 0)
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4918      	ldr	r1, [pc, #96]	@ (800495c <StepperHandler+0x144>)
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7fb fc87 	bl	8000210 <strcmp>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d106      	bne.n	8004916 <StepperHandler+0xfe>
    {
        result = Status(StepperContext, argc, argv);
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	68f9      	ldr	r1, [r7, #12]
 800490c:	6938      	ldr	r0, [r7, #16]
 800490e:	f7ff f96b 	bl	8003be8 <Status>
 8004912:	6178      	str	r0, [r7, #20]
 8004914:	e005      	b.n	8004922 <StepperHandler+0x10a>
    }
    else
    {
        printf("Invalid command\r\n");
 8004916:	4812      	ldr	r0, [pc, #72]	@ (8004960 <StepperHandler+0x148>)
 8004918:	f00f fe1c 	bl	8014554 <puts>
        return -1;
 800491c:	f04f 33ff 	mov.w	r3, #4294967295
 8004920:	e00a      	b.n	8004938 <StepperHandler+0x120>
    }
    if (result == 0)
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d103      	bne.n	8004930 <StepperHandler+0x118>
    {
        printf("OK\r\n");
 8004928:	480e      	ldr	r0, [pc, #56]	@ (8004964 <StepperHandler+0x14c>)
 800492a:	f00f fe13 	bl	8014554 <puts>
 800492e:	e002      	b.n	8004936 <StepperHandler+0x11e>
    }
    else
    {
        printf("FAIL\r\n");
 8004930:	480d      	ldr	r0, [pc, #52]	@ (8004968 <StepperHandler+0x150>)
 8004932:	f00f fe0f 	bl	8014554 <puts>
    }
    // UpdateStepperLEDs(StepperContext);
    return result;
 8004936:	697b      	ldr	r3, [r7, #20]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3718      	adds	r7, #24
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	08018370 	.word	0x08018370
 8004944:	0801851c 	.word	0x0801851c
 8004948:	08018524 	.word	0x08018524
 800494c:	0801852c 	.word	0x0801852c
 8004950:	08018534 	.word	0x08018534
 8004954:	08018540 	.word	0x08018540
 8004958:	08018548 	.word	0x08018548
 800495c:	08018554 	.word	0x08018554
 8004960:	0801855c 	.word	0x0801855c
 8004964:	08018570 	.word	0x08018570
 8004968:	08018574 	.word	0x08018574

0800496c <InitStepper>:

void InitStepper(ConsoleHandle_t hconsole, SPI_HandleTypeDef *hspi1,
                 TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim4)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af02      	add	r7, sp, #8
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
 8004978:	603b      	str	r3, [r7, #0]

    HAL_GPIO_WritePin(STEP_SPI_CS_GPIO_Port, STEP_SPI_CS_Pin, 1);
 800497a:	2201      	movs	r2, #1
 800497c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004980:	482f      	ldr	r0, [pc, #188]	@ (8004a40 <InitStepper+0xd4>)
 8004982:	f003 fc47 	bl	8008214 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(htim4, TIM_CHANNEL_4);
 8004986:	210c      	movs	r1, #12
 8004988:	6838      	ldr	r0, [r7, #0]
 800498a:	f006 fca5 	bl	800b2d8 <HAL_TIM_PWM_Start>

    p.malloc = StepLibraryMalloc;
 800498e:	4b2d      	ldr	r3, [pc, #180]	@ (8004a44 <InitStepper+0xd8>)
 8004990:	4a2d      	ldr	r2, [pc, #180]	@ (8004a48 <InitStepper+0xdc>)
 8004992:	601a      	str	r2, [r3, #0]
    p.free = StepLibraryFree;
 8004994:	4b2b      	ldr	r3, [pc, #172]	@ (8004a44 <InitStepper+0xd8>)
 8004996:	4a2d      	ldr	r2, [pc, #180]	@ (8004a4c <InitStepper+0xe0>)
 8004998:	605a      	str	r2, [r3, #4]
    p.transfer = StepDriverSpiTransfer;
 800499a:	4b2a      	ldr	r3, [pc, #168]	@ (8004a44 <InitStepper+0xd8>)
 800499c:	4a2c      	ldr	r2, [pc, #176]	@ (8004a50 <InitStepper+0xe4>)
 800499e:	609a      	str	r2, [r3, #8]
    p.reset = StepDriverReset;
 80049a0:	4b28      	ldr	r3, [pc, #160]	@ (8004a44 <InitStepper+0xd8>)
 80049a2:	4a2c      	ldr	r2, [pc, #176]	@ (8004a54 <InitStepper+0xe8>)
 80049a4:	60da      	str	r2, [r3, #12]
    p.sleep = StepLibraryDelay;
 80049a6:	4b27      	ldr	r3, [pc, #156]	@ (8004a44 <InitStepper+0xd8>)
 80049a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004a58 <InitStepper+0xec>)
 80049aa:	611a      	str	r2, [r3, #16]
    // p.step = Step;
    p.stepAsync = StepTimerAsync;
 80049ac:	4b25      	ldr	r3, [pc, #148]	@ (8004a44 <InitStepper+0xd8>)
 80049ae:	4a2b      	ldr	r2, [pc, #172]	@ (8004a5c <InitStepper+0xf0>)
 80049b0:	615a      	str	r2, [r3, #20]
    p.cancelStep = StepTimerCancelAsync;
 80049b2:	4b24      	ldr	r3, [pc, #144]	@ (8004a44 <InitStepper+0xd8>)
 80049b4:	4a2a      	ldr	r2, [pc, #168]	@ (8004a60 <InitStepper+0xf4>)
 80049b6:	619a      	str	r2, [r3, #24]

    StepperContext.h = L6474_CreateInstance(&p, hspi1, NULL, htim1);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	68b9      	ldr	r1, [r7, #8]
 80049be:	4821      	ldr	r0, [pc, #132]	@ (8004a44 <InitStepper+0xd8>)
 80049c0:	f000 fea5 	bl	800570e <L6474_CreateInstance>
 80049c4:	4603      	mov	r3, r0
 80049c6:	4a27      	ldr	r2, [pc, #156]	@ (8004a64 <InitStepper+0xf8>)
 80049c8:	6013      	str	r3, [r2, #0]
    StepperContext.htim1 = htim1;
 80049ca:	4a26      	ldr	r2, [pc, #152]	@ (8004a64 <InitStepper+0xf8>)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	61d3      	str	r3, [r2, #28]
    StepperContext.htim4 = htim4;
 80049d0:	4a24      	ldr	r2, [pc, #144]	@ (8004a64 <InitStepper+0xf8>)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	6213      	str	r3, [r2, #32]
    StepperContext.state = scs.INIT;
 80049d6:	4b24      	ldr	r3, [pc, #144]	@ (8004a68 <InitStepper+0xfc>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	4b21      	ldr	r3, [pc, #132]	@ (8004a64 <InitStepper+0xf8>)
 80049de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    StepperContext.error_code = 0;
 80049e2:	4b20      	ldr	r3, [pc, #128]	@ (8004a64 <InitStepper+0xf8>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	611a      	str	r2, [r3, #16]

    StepperContext.step_mode = smMICRO16;
 80049e8:	4b1e      	ldr	r3, [pc, #120]	@ (8004a64 <InitStepper+0xf8>)
 80049ea:	2204      	movs	r2, #4
 80049ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    StepperContext.mm_per_turn = 4.0f;
 80049f0:	4b1c      	ldr	r3, [pc, #112]	@ (8004a64 <InitStepper+0xf8>)
 80049f2:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 80049f6:	63da      	str	r2, [r3, #60]	@ 0x3c
    StepperContext.steps_per_turn = STEPS_PER_TURN;
 80049f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004a64 <InitStepper+0xf8>)
 80049fa:	4a1c      	ldr	r2, [pc, #112]	@ (8004a6c <InitStepper+0x100>)
 80049fc:	641a      	str	r2, [r3, #64]	@ 0x40
    StepperContext.resolution = 16.0f;
 80049fe:	4b19      	ldr	r3, [pc, #100]	@ (8004a64 <InitStepper+0xf8>)
 8004a00:	f04f 4283 	mov.w	r2, #1098907648	@ 0x41800000
 8004a04:	645a      	str	r2, [r3, #68]	@ 0x44
    StepperContext.mm_per_step = StepperContext.mm_per_turn / (StepperContext.steps_per_turn * StepperContext.resolution);
 8004a06:	4b17      	ldr	r3, [pc, #92]	@ (8004a64 <InitStepper+0xf8>)
 8004a08:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8004a0c:	4b15      	ldr	r3, [pc, #84]	@ (8004a64 <InitStepper+0xf8>)
 8004a0e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8004a12:	4b14      	ldr	r3, [pc, #80]	@ (8004a64 <InitStepper+0xf8>)
 8004a14:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8004a18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a20:	4b10      	ldr	r3, [pc, #64]	@ (8004a64 <InitStepper+0xf8>)
 8004a22:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

    CONSOLE_RegisterCommand(hconsole, "stepper", "Stepper main Command", StepperHandler, &StepperContext);
 8004a26:	4b0f      	ldr	r3, [pc, #60]	@ (8004a64 <InitStepper+0xf8>)
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	4b11      	ldr	r3, [pc, #68]	@ (8004a70 <InitStepper+0x104>)
 8004a2c:	4a11      	ldr	r2, [pc, #68]	@ (8004a74 <InitStepper+0x108>)
 8004a2e:	4912      	ldr	r1, [pc, #72]	@ (8004a78 <InitStepper+0x10c>)
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f7fe fa6f 	bl	8002f14 <CONSOLE_RegisterCommand>
}
 8004a36:	bf00      	nop
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	40020c00 	.word	0x40020c00
 8004a44:	20000294 	.word	0x20000294
 8004a48:	080034d1 	.word	0x080034d1
 8004a4c:	080034e9 	.word	0x080034e9
 8004a50:	08003501 	.word	0x08003501
 8004a54:	08003585 	.word	0x08003585
 8004a58:	080035b5 	.word	0x080035b5
 8004a5c:	08003645 	.word	0x08003645
 8004a60:	08003691 	.word	0x08003691
 8004a64:	200002b0 	.word	0x200002b0
 8004a68:	20000000 	.word	0x20000000
 8004a6c:	43480000 	.word	0x43480000
 8004a70:	08004819 	.word	0x08004819
 8004a74:	0801857c 	.word	0x0801857c
 8004a78:	08018594 	.word	0x08018594

08004a7c <SpindleFunction>:
};

// --------------------------------------------------------------------------------------------------------------------
static void SpindleFunction( void * arg )
// --------------------------------------------------------------------------------------------------------------------
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b090      	sub	sp, #64	@ 0x40
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
	CtrlCommand_t cmd;
	StepCommandResponse_t asyncResponse;
	SpindleHandle_t h = (SpindleHandle_t)arg;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	633b      	str	r3, [r7, #48]	@ 0x30
	unsigned int running = 0;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	unsigned int startupBoost = 0;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	63bb      	str	r3, [r7, #56]	@ 0x38

	h->physical.enaPWM(h, h->physical.context, 0);
 8004a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a96:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004a98:	2200      	movs	r2, #0
 8004a9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a9c:	4798      	blx	r3
	h->physical.setDutyCycle(h, h->physical.context, 0.0f );
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004aa4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004aa6:	ed9f 0aa8 	vldr	s0, [pc, #672]	@ 8004d48 <SpindleFunction+0x2cc>
 8004aaa:	4611      	mov	r1, r2
 8004aac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004aae:	4798      	blx	r3
	h->currentSpeed = 0;
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab2:	f04f 0200 	mov.w	r2, #0
 8004ab6:	631a      	str	r2, [r3, #48]	@ 0x30

	// now here comes the command processor part
	while( !h->cancel )
 8004ab8:	e162      	b.n	8004d80 <SpindleFunction+0x304>
	{
		// wait for next command
		if ( xQueueReceive( h->cmdQueue, &cmd, 100) == pdPASS )
 8004aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f107 011c 	add.w	r1, r7, #28
 8004ac2:	2264      	movs	r2, #100	@ 0x64
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f00a fd6d 	bl	800f5a4 <xQueueReceive>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	f040 813d 	bne.w	8004d4c <SpindleFunction+0x2d0>
		{
			if ( cmd.response == NULL || cmd.request.syncEvent == NULL )
 8004ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d002      	beq.n	8004ade <SpindleFunction+0x62>
 8004ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d102      	bne.n	8004ae4 <SpindleFunction+0x68>
			{
				cmd.response = &asyncResponse;
 8004ade:	f107 030c 	add.w	r3, r7, #12
 8004ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
			}
			memset(cmd.response, 0, sizeof(StepCommandResponse_t));
 8004ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ae6:	2210      	movs	r2, #16
 8004ae8:	2100      	movs	r1, #0
 8004aea:	4618      	mov	r0, r3
 8004aec:	f00f ff18 	bl	8014920 <memset>
			cmd.response->code = -1;
 8004af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af2:	f04f 32ff 	mov.w	r2, #4294967295
 8004af6:	601a      	str	r2, [r3, #0]
			cmd.response->requestID = cmd.head.requestID;
 8004af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004afa:	69fa      	ldr	r2, [r7, #28]
 8004afc:	605a      	str	r2, [r3, #4]


			switch ( cmd.head.type )
 8004afe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	f200 8115 	bhi.w	8004d32 <SpindleFunction+0x2b6>
 8004b08:	a201      	add	r2, pc, #4	@ (adr r2, 8004b10 <SpindleFunction+0x94>)
 8004b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0e:	bf00      	nop
 8004b10:	08004b25 	.word	0x08004b25
 8004b14:	08004b2d 	.word	0x08004b2d
 8004b18:	08004ce5 	.word	0x08004ce5
 8004b1c:	08004d33 	.word	0x08004d33
 8004b20:	08004d1d 	.word	0x08004d1d
			{
			case cctNONE:
				cmd.response->code = 0;
 8004b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b26:	2200      	movs	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]
				break;
 8004b2a:	e103      	b.n	8004d34 <SpindleFunction+0x2b8>
			case cctSTART:
				cmd.response->code = 0;
 8004b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b2e:	2200      	movs	r2, #0
 8004b30:	601a      	str	r2, [r3, #0]
				if ( cmd.request.args.asStart.speed < h->physical.minRPM ) cmd.request.args.asStart.speed = h->physical.minRPM;
 8004b32:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b38:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004b3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b44:	d502      	bpl.n	8004b4c <SpindleFunction+0xd0>
 8004b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b4a:	627b      	str	r3, [r7, #36]	@ 0x24
				if ( cmd.request.args.asStart.speed > h->physical.maxRPM ) cmd.request.args.asStart.speed = h->physical.maxRPM;
 8004b4c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b52:	edd3 7a08 	vldr	s15, [r3, #32]
 8004b56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b5e:	dd02      	ble.n	8004b66 <SpindleFunction+0xea>
 8004b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	627b      	str	r3, [r7, #36]	@ 0x24

				if (  cmd.request.args.asStart.speed > 0.0f && cmd.request.args.asStart.speed <  h->physical.absMinRPM ) cmd.request.args.asStart.speed =  h->physical.absMinRPM;
 8004b66:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004b6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b72:	dd0c      	ble.n	8004b8e <SpindleFunction+0x112>
 8004b74:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004b7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b86:	d502      	bpl.n	8004b8e <SpindleFunction+0x112>
 8004b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8c:	627b      	str	r3, [r7, #36]	@ 0x24
				if (  cmd.request.args.asStart.speed < 0.0f && cmd.request.args.asStart.speed > -h->physical.absMinRPM ) cmd.request.args.asStart.speed = -h->physical.absMinRPM;
 8004b8e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004b92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b9a:	d512      	bpl.n	8004bc2 <SpindleFunction+0x146>
 8004b9c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004ba6:	eef1 7a67 	vneg.f32	s15, s15
 8004baa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb2:	dd06      	ble.n	8004bc2 <SpindleFunction+0x146>
 8004bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004bba:	eef1 7a67 	vneg.f32	s15, s15
 8004bbe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

				int directionChange = 0;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	637b      	str	r3, [r7, #52]	@ 0x34
				if ((h->currentSpeed < 0.0f && cmd.request.args.asStart.speed > 0.0f) ||
 8004bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004bcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bd4:	d506      	bpl.n	8004be4 <SpindleFunction+0x168>
 8004bd6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004bda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be2:	dc0e      	bgt.n	8004c02 <SpindleFunction+0x186>
					(h->currentSpeed > 0.0f && cmd.request.args.asStart.speed < 0.0f))
 8004be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
				if ((h->currentSpeed < 0.0f && cmd.request.args.asStart.speed > 0.0f) ||
 8004bea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bf2:	dd08      	ble.n	8004c06 <SpindleFunction+0x18a>
					(h->currentSpeed > 0.0f && cmd.request.args.asStart.speed < 0.0f))
 8004bf4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004bf8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c00:	d501      	bpl.n	8004c06 <SpindleFunction+0x18a>
					directionChange = 1;
 8004c02:	2301      	movs	r3, #1
 8004c04:	637b      	str	r3, [r7, #52]	@ 0x34
				h->currentSpeed = cmd.request.args.asStart.speed;
 8004c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c0a:	631a      	str	r2, [r3, #48]	@ 0x30


				h->physical.setDirection(h, h->physical.context, h->currentSpeed < 0.0f );
 8004c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c12:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004c14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c16:	edd2 7a0c 	vldr	s15, [r2, #48]	@ 0x30
 8004c1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c22:	bf4c      	ite	mi
 8004c24:	2201      	movmi	r2, #1
 8004c26:	2200      	movpl	r2, #0
 8004c28:	b2d2      	uxtb	r2, r2
 8004c2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c2c:	4798      	blx	r3
				if ( running == 1 && directionChange == 0 )
 8004c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d117      	bne.n	8004c64 <SpindleFunction+0x1e8>
 8004c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d114      	bne.n	8004c64 <SpindleFunction+0x1e8>
				{
					h->physical.setDutyCycle(h, h->physical.context, ( fabsf(h->currentSpeed) / h->physical.maxRPM) );
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c40:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004c42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c44:	edd2 7a0c 	vldr	s15, [r2, #48]	@ 0x30
 8004c48:	eeb0 7ae7 	vabs.f32	s14, s15
 8004c4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c4e:	edd2 7a08 	vldr	s15, [r2, #32]
 8004c52:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004c56:	eeb0 0a66 	vmov.f32	s0, s13
 8004c5a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c5c:	4798      	blx	r3
					startupBoost = 0;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c62:	e020      	b.n	8004ca6 <SpindleFunction+0x22a>
				}
				else if ( ( running == 0 || directionChange == 1 ) && fabsf(cmd.request.args.asStart.speed) <= (0.25f * h->physical.maxRPM) )
 8004c64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d002      	beq.n	8004c70 <SpindleFunction+0x1f4>
 8004c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d11a      	bne.n	8004ca6 <SpindleFunction+0x22a>
 8004c70:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004c74:	eeb0 7ae7 	vabs.f32	s14, s15
 8004c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c7a:	edd3 7a08 	vldr	s15, [r3, #32]
 8004c7e:	eef5 6a00 	vmov.f32	s13, #80	@ 0x3e800000  0.250
 8004c82:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004c86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c8e:	d80a      	bhi.n	8004ca6 <SpindleFunction+0x22a>
				{
					h->physical.setDutyCycle(h, h->physical.context, 0.5f );
 8004c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c96:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004c98:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8004c9c:	4611      	mov	r1, r2
 8004c9e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ca0:	4798      	blx	r3
					startupBoost = 1;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
				}
				if ( startupBoost == 0 )
 8004ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d111      	bne.n	8004cd0 <SpindleFunction+0x254>
				{
					h->physical.setDutyCycle(h, h->physical.context, ( fabsf(h->currentSpeed) / h->physical.maxRPM ) );
 8004cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cb2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004cb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cb6:	edd2 7a0c 	vldr	s15, [r2, #48]	@ 0x30
 8004cba:	eeb0 7ae7 	vabs.f32	s14, s15
 8004cbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cc0:	edd2 7a08 	vldr	s15, [r2, #32]
 8004cc4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004cc8:	eeb0 0a66 	vmov.f32	s0, s13
 8004ccc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004cce:	4798      	blx	r3
				}

				h->physical.enaPWM(h, h->physical.context, 1);
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd2:	69db      	ldr	r3, [r3, #28]
 8004cd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cd6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004cd8:	2201      	movs	r2, #1
 8004cda:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004cdc:	4798      	blx	r3
				running = 1;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
				break;
 8004ce2:	e027      	b.n	8004d34 <SpindleFunction+0x2b8>
			case cctSTOP:
				cmd.response->code = 0;
 8004ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]
				h->currentSpeed = 0;
 8004cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	631a      	str	r2, [r3, #48]	@ 0x30
				startupBoost = 0;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
				running = 0;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
				h->physical.setDutyCycle(h, h->physical.context, 0.0f );
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d00:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004d02:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8004d48 <SpindleFunction+0x2cc>
 8004d06:	4611      	mov	r1, r2
 8004d08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d0a:	4798      	blx	r3
				h->physical.enaPWM(h, h->physical.context, 0);
 8004d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d12:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004d14:	2200      	movs	r2, #0
 8004d16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d18:	4798      	blx	r3
				break;
 8004d1a:	e00b      	b.n	8004d34 <SpindleFunction+0x2b8>
			case cctSTATUS:
				cmd.response->code = 0;
 8004d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d1e:	2200      	movs	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]
				cmd.response->args.asStatus.running = running;
 8004d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004d26:	60da      	str	r2, [r3, #12]
				cmd.response->args.asStatus.speed = h->currentSpeed;
 8004d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d2c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004d2e:	609a      	str	r2, [r3, #8]
				break;
 8004d30:	e000      	b.n	8004d34 <SpindleFunction+0x2b8>
			default:
				break;
 8004d32:	bf00      	nop
			}

			// after processing the command we have to release the caller to keep
			// synchronous calling mechanism. In case there is no sync object, it was##
			// called asynchronously
			if ( cmd.request.syncEvent != NULL )
 8004d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d022      	beq.n	8004d80 <SpindleFunction+0x304>
			{
				xSemaphoreGive(cmd.request.syncEvent);
 8004d3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	2200      	movs	r2, #0
 8004d40:	2100      	movs	r1, #0
 8004d42:	f00a fb17 	bl	800f374 <xQueueGenericSend>
 8004d46:	e01b      	b.n	8004d80 <SpindleFunction+0x304>
 8004d48:	00000000 	.word	0x00000000
		}
		else
		{
			// here we have to do some additional steps to regulate correct rpm in case
			// the low speed boost has been performed
			if ( startupBoost == 1 && running == 1 )
 8004d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d116      	bne.n	8004d80 <SpindleFunction+0x304>
 8004d52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d113      	bne.n	8004d80 <SpindleFunction+0x304>
			{
				startupBoost = 0;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
				h->physical.setDutyCycle(h, h->physical.context, ( fabsf(h->currentSpeed) / h->physical.maxRPM) );
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d62:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004d64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d66:	edd2 7a0c 	vldr	s15, [r2, #48]	@ 0x30
 8004d6a:	eeb0 7ae7 	vabs.f32	s14, s15
 8004d6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d70:	edd2 7a08 	vldr	s15, [r2, #32]
 8004d74:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004d78:	eeb0 0a66 	vmov.f32	s0, s13
 8004d7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d7e:	4798      	blx	r3
	while( !h->cancel )
 8004d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f43f ae98 	beq.w	8004aba <SpindleFunction+0x3e>
			}
		}
	}
}
 8004d8a:	bf00      	nop
 8004d8c:	bf00      	nop
 8004d8e:	3740      	adds	r7, #64	@ 0x40
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <GetCommandEvent>:

// --------------------------------------------------------------------------------------------------------------------
static SemaphoreHandle_t GetCommandEvent( SpindleHandle_t h )
// --------------------------------------------------------------------------------------------------------------------
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
	xSemaphoreTakeRecursive( h->syncEventPool.lockGuard, -1 );
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004da0:	f04f 31ff 	mov.w	r1, #4294967295
 8004da4:	4618      	mov	r0, r3
 8004da6:	f00a faa7 	bl	800f2f8 <xQueueTakeMutexRecursive>

	stepSyncEventElement_t* el = LIST_FIRST(&h->syncEventPool.pool);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dae:	60fb      	str	r3, [r7, #12]
	while ( el != NULL )
 8004db0:	e017      	b.n	8004de2 <GetCommandEvent+0x4e>
	{
		if ( el->content.allocated == 0 )
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d110      	bne.n	8004ddc <GetCommandEvent+0x48>
		{
			el->content.allocated = 1;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]
			// make sure we the event is in held state
			xSemaphoreTake( el->content.event, 0 );
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f00a fce0 	bl	800f78c <xQueueSemaphoreTake>
			xSemaphoreGiveRecursive( h->syncEventPool.lockGuard );
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f00a fa55 	bl	800f280 <xQueueGiveMutexRecursive>
			return el->content.event;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	e00b      	b.n	8004df4 <GetCommandEvent+0x60>
		}
		el = LIST_NEXT(el, navigate);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	60fb      	str	r3, [r7, #12]
	while ( el != NULL )
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1e4      	bne.n	8004db2 <GetCommandEvent+0x1e>
	}

	xSemaphoreGiveRecursive( h->syncEventPool.lockGuard );
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dec:	4618      	mov	r0, r3
 8004dee:	f00a fa47 	bl	800f280 <xQueueGiveMutexRecursive>
	return 0;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <ReleaseCommandEvent>:

// --------------------------------------------------------------------------------------------------------------------
static void ReleaseCommandEvent( SpindleHandle_t h, SemaphoreHandle_t s )
// --------------------------------------------------------------------------------------------------------------------
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
	xSemaphoreTakeRecursive( h->syncEventPool.lockGuard, -1 );
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e0a:	f04f 31ff 	mov.w	r1, #4294967295
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f00a fa72 	bl	800f2f8 <xQueueTakeMutexRecursive>

	stepSyncEventElement_t* el = LIST_FIRST(&h->syncEventPool.pool);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e18:	60fb      	str	r3, [r7, #12]
	while ( el != NULL )
 8004e1a:	e014      	b.n	8004e46 <ReleaseCommandEvent+0x4a>
	{
		if ( el->content.allocated == 1 && el->content.event == s)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d10d      	bne.n	8004e40 <ReleaseCommandEvent+0x44>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d108      	bne.n	8004e40 <ReleaseCommandEvent+0x44>
		{
			el->content.allocated = 0;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	601a      	str	r2, [r3, #0]
			xSemaphoreGiveRecursive( h->syncEventPool.lockGuard );
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f00a fa21 	bl	800f280 <xQueueGiveMutexRecursive>
			return;
 8004e3e:	e00a      	b.n	8004e56 <ReleaseCommandEvent+0x5a>
		}
		el = LIST_NEXT(el, navigate);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	60fb      	str	r3, [r7, #12]
	while ( el != NULL )
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1e7      	bne.n	8004e1c <ReleaseCommandEvent+0x20>
	}

	xSemaphoreGiveRecursive( h->syncEventPool.lockGuard );
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e50:	4618      	mov	r0, r3
 8004e52:	f00a fa15 	bl	800f280 <xQueueGiveMutexRecursive>
}
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <SpindleConsoleFunction>:

// --------------------------------------------------------------------------------------------------------------------
static int SpindleConsoleFunction( int argc, char** argv, void* ctx )
// --------------------------------------------------------------------------------------------------------------------
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b08e      	sub	sp, #56	@ 0x38
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
	//possible commands are
	//(spindle) start 100
	//(spindle) stop
	//(spindle) status

	SpindleHandle_t h = (SpindleHandle_t)ctx;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	637b      	str	r3, [r7, #52]	@ 0x34
	StepCommandResponse_t response = { 0 };
 8004e6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e70:	2200      	movs	r2, #0
 8004e72:	601a      	str	r2, [r3, #0]
 8004e74:	605a      	str	r2, [r3, #4]
 8004e76:	609a      	str	r2, [r3, #8]
 8004e78:	60da      	str	r2, [r3, #12]
	CtrlCommand_t cmd;

	cmd.response       = &response;
 8004e7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e7e:	623b      	str	r3, [r7, #32]
	cmd.head.requestID = h->nextRequestID;
 8004e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	613b      	str	r3, [r7, #16]
	h->nextRequestID += 1;
 8004e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	1c5a      	adds	r2, r3, #1
 8004e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e8e:	601a      	str	r2, [r3, #0]

	// first decode the subcommand and all arguments
	if ( argc == 0 )
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d105      	bne.n	8004ea2 <SpindleConsoleFunction+0x46>
	{
		printf("invalid number of arguments\r\nFAIL");
 8004e96:	484a      	ldr	r0, [pc, #296]	@ (8004fc0 <SpindleConsoleFunction+0x164>)
 8004e98:	f00f faec 	bl	8014474 <iprintf>
		return -1;
 8004e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004ea0:	e089      	b.n	8004fb6 <SpindleConsoleFunction+0x15a>
	}
	if ( strcmp(argv[0], "stop") == 0 )
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4947      	ldr	r1, [pc, #284]	@ (8004fc4 <SpindleConsoleFunction+0x168>)
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7fb f9b1 	bl	8000210 <strcmp>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d102      	bne.n	8004eba <SpindleConsoleFunction+0x5e>
	{
		// no further arguments
		cmd.head.type = cctSTOP;
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	753b      	strb	r3, [r7, #20]
 8004eb8:	e036      	b.n	8004f28 <SpindleConsoleFunction+0xcc>
	}
	else if ( strcmp(argv[0], "start") == 0 )
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4942      	ldr	r1, [pc, #264]	@ (8004fc8 <SpindleConsoleFunction+0x16c>)
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7fb f9a5 	bl	8000210 <strcmp>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d11b      	bne.n	8004f04 <SpindleConsoleFunction+0xa8>
	{
		// rpm value directly after start
		cmd.head.type = cctSTART;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	753b      	strb	r3, [r7, #20]
		cmd.request.args.asStart.speed    = 600.0f;
 8004ed0:	4b3e      	ldr	r3, [pc, #248]	@ (8004fcc <SpindleConsoleFunction+0x170>)
 8004ed2:	61bb      	str	r3, [r7, #24]
		if ( argc < 2 )
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	dc05      	bgt.n	8004ee6 <SpindleConsoleFunction+0x8a>
		{
			printf("missing RPM value for start command\r\nFAIL");
 8004eda:	483d      	ldr	r0, [pc, #244]	@ (8004fd0 <SpindleConsoleFunction+0x174>)
 8004edc:	f00f faca 	bl	8014474 <iprintf>
			return -1;
 8004ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ee4:	e067      	b.n	8004fb6 <SpindleConsoleFunction+0x15a>
		}

		cmd.request.args.asStart.speed = (float)atof(argv[1]);
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f00d f9ad 	bl	801224c <atof>
 8004ef2:	ec53 2b10 	vmov	r2, r3, d0
 8004ef6:	4610      	mov	r0, r2
 8004ef8:	4619      	mov	r1, r3
 8004efa:	f7fb fea5 	bl	8000c48 <__aeabi_d2f>
 8004efe:	4603      	mov	r3, r0
 8004f00:	61bb      	str	r3, [r7, #24]
 8004f02:	e011      	b.n	8004f28 <SpindleConsoleFunction+0xcc>
	}
	else if ( strcmp(argv[0], "status") == 0 )
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4932      	ldr	r1, [pc, #200]	@ (8004fd4 <SpindleConsoleFunction+0x178>)
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fb f980 	bl	8000210 <strcmp>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d102      	bne.n	8004f1c <SpindleConsoleFunction+0xc0>
	{
		// no further arguments, everything in result
		cmd.head.type = cctSTATUS;
 8004f16:	2304      	movs	r3, #4
 8004f18:	753b      	strb	r3, [r7, #20]
 8004f1a:	e005      	b.n	8004f28 <SpindleConsoleFunction+0xcc>
	}
	else
	{
		printf("passed invalid sub command\r\nFAIL");
 8004f1c:	482e      	ldr	r0, [pc, #184]	@ (8004fd8 <SpindleConsoleFunction+0x17c>)
 8004f1e:	f00f faa9 	bl	8014474 <iprintf>
		return -1;
 8004f22:	f04f 33ff 	mov.w	r3, #4294967295
 8004f26:	e046      	b.n	8004fb6 <SpindleConsoleFunction+0x15a>
	}

	// now pass the request to the controller
	cmd.request.syncEvent = GetCommandEvent(h);
 8004f28:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004f2a:	f7ff ff33 	bl	8004d94 <GetCommandEvent>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	61fb      	str	r3, [r7, #28]

	if ( pdPASS != xQueueSend( h->cmdQueue, &cmd, -1 ) )
 8004f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f34:	68d8      	ldr	r0, [r3, #12]
 8004f36:	f107 0110 	add.w	r1, r7, #16
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f40:	f00a fa18 	bl	800f374 <xQueueGenericSend>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d007      	beq.n	8004f5a <SpindleConsoleFunction+0xfe>
	{
		ReleaseCommandEvent(h, cmd.request.syncEvent );
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004f50:	f7ff ff54 	bl	8004dfc <ReleaseCommandEvent>
		return -1;
 8004f54:	f04f 33ff 	mov.w	r3, #4294967295
 8004f58:	e02d      	b.n	8004fb6 <SpindleConsoleFunction+0x15a>
	}

	xSemaphoreTake( cmd.request.syncEvent, -1 );
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8004f60:	4618      	mov	r0, r3
 8004f62:	f00a fc13 	bl	800f78c <xQueueSemaphoreTake>
	ReleaseCommandEvent(h, cmd.request.syncEvent );
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	4619      	mov	r1, r3
 8004f6a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004f6c:	f7ff ff46 	bl	8004dfc <ReleaseCommandEvent>

	// now decode the result in case there is one
	if ( response.code == 0 )
 8004f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d11b      	bne.n	8004fae <SpindleConsoleFunction+0x152>
	{
		if ( cmd.head.type == cctSTATUS )
 8004f76:	7d3b      	ldrb	r3, [r7, #20]
 8004f78:	2b04      	cmp	r3, #4
 8004f7a:	d114      	bne.n	8004fa6 <SpindleConsoleFunction+0x14a>
		{
			printf("%d\r\n", !!cmd.response->args.asStatus.running);
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	bf14      	ite	ne
 8004f84:	2301      	movne	r3, #1
 8004f86:	2300      	moveq	r3, #0
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4813      	ldr	r0, [pc, #76]	@ (8004fdc <SpindleConsoleFunction+0x180>)
 8004f8e:	f00f fa71 	bl	8014474 <iprintf>
			printf("%d\r\n", (int)cmd.response->args.asStatus.speed);
 8004f92:	6a3b      	ldr	r3, [r7, #32]
 8004f94:	edd3 7a02 	vldr	s15, [r3, #8]
 8004f98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f9c:	ee17 1a90 	vmov	r1, s15
 8004fa0:	480e      	ldr	r0, [pc, #56]	@ (8004fdc <SpindleConsoleFunction+0x180>)
 8004fa2:	f00f fa67 	bl	8014474 <iprintf>
		}
		printf("OK");
 8004fa6:	480e      	ldr	r0, [pc, #56]	@ (8004fe0 <SpindleConsoleFunction+0x184>)
 8004fa8:	f00f fa64 	bl	8014474 <iprintf>
 8004fac:	e002      	b.n	8004fb4 <SpindleConsoleFunction+0x158>
	}
	else
	{
		printf("error returned\r\nFAIL");
 8004fae:	480d      	ldr	r0, [pc, #52]	@ (8004fe4 <SpindleConsoleFunction+0x188>)
 8004fb0:	f00f fa60 	bl	8014474 <iprintf>
	}

	// now back to console
	return response.code;
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3738      	adds	r7, #56	@ 0x38
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	0801859c 	.word	0x0801859c
 8004fc4:	080185c0 	.word	0x080185c0
 8004fc8:	080185c8 	.word	0x080185c8
 8004fcc:	44160000 	.word	0x44160000
 8004fd0:	080185d0 	.word	0x080185d0
 8004fd4:	080185fc 	.word	0x080185fc
 8004fd8:	08018604 	.word	0x08018604
 8004fdc:	08018628 	.word	0x08018628
 8004fe0:	08018630 	.word	0x08018630
 8004fe4:	08018634 	.word	0x08018634

08004fe8 <SpindleRegisterBasicCommands>:

// --------------------------------------------------------------------------------------------------------------------
static void SpindleRegisterBasicCommands( SpindleHandle_t h, ConsoleHandle_t cH )
// --------------------------------------------------------------------------------------------------------------------
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
	CONSOLE_RegisterCommand(cH, "spindle", "<<spindle>> is used to control a spindle motor.\r\nValid subcommands are start, stop, status.\r\nStart needs an additional RPM argument!",
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	4b05      	ldr	r3, [pc, #20]	@ (800500c <SpindleRegisterBasicCommands+0x24>)
 8004ff8:	4a05      	ldr	r2, [pc, #20]	@ (8005010 <SpindleRegisterBasicCommands+0x28>)
 8004ffa:	4906      	ldr	r1, [pc, #24]	@ (8005014 <SpindleRegisterBasicCommands+0x2c>)
 8004ffc:	6838      	ldr	r0, [r7, #0]
 8004ffe:	f7fd ff89 	bl	8002f14 <CONSOLE_RegisterCommand>
			SpindleConsoleFunction, h);
}
 8005002:	bf00      	nop
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	08004e5d 	.word	0x08004e5d
 8005010:	0801864c 	.word	0x0801864c
 8005014:	080186d4 	.word	0x080186d4

08005018 <SPINDLE_CreateInstance>:

// --------------------------------------------------------------------------------------------------------------------
SpindleHandle_t SPINDLE_CreateInstance( unsigned int uxStackDepth, int xPrio, ConsoleHandle_t cH, SpindlePhysicalParams_t* p )
// --------------------------------------------------------------------------------------------------------------------
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b08c      	sub	sp, #48	@ 0x30
 800501c:	af02      	add	r7, sp, #8
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
 8005024:	603b      	str	r3, [r7, #0]
#define ON_NULL_GOTO_ERROR(x) do { if ((x) == NULL) goto error; } while(0);
	// singleton pattern
	if ( SpindleInstancePointer != NULL ) return SpindleInstancePointer;
 8005026:	4b86      	ldr	r3, [pc, #536]	@ (8005240 <SPINDLE_CreateInstance+0x228>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d002      	beq.n	8005034 <SPINDLE_CreateInstance+0x1c>
 800502e:	4b84      	ldr	r3, [pc, #528]	@ (8005240 <SPINDLE_CreateInstance+0x228>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	e101      	b.n	8005238 <SPINDLE_CreateInstance+0x220>

	if ( p == NULL || p->enaPWM == NULL || p->setDirection == NULL ||
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d019      	beq.n	800506e <SPINDLE_CreateInstance+0x56>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d015      	beq.n	800506e <SPINDLE_CreateInstance+0x56>
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d011      	beq.n	800506e <SPINDLE_CreateInstance+0x56>
	     p->minRPM >= p->maxRPM || p->setDutyCycle == NULL || cH == NULL )
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	ed93 7a05 	vldr	s14, [r3, #20]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	edd3 7a03 	vldr	s15, [r3, #12]
	if ( p == NULL || p->enaPWM == NULL || p->setDirection == NULL ||
 8005056:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800505a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800505e:	da06      	bge.n	800506e <SPINDLE_CreateInstance+0x56>
	     p->minRPM >= p->maxRPM || p->setDutyCycle == NULL || cH == NULL )
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d002      	beq.n	800506e <SPINDLE_CreateInstance+0x56>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <SPINDLE_CreateInstance+0x5a>
		return NULL;
 800506e:	2300      	movs	r3, #0
 8005070:	e0e2      	b.n	8005238 <SPINDLE_CreateInstance+0x220>

	struct SpindleHandle* h = calloc(sizeof(struct SpindleHandle), 1);
 8005072:	2101      	movs	r1, #1
 8005074:	203c      	movs	r0, #60	@ 0x3c
 8005076:	f00d f8f1 	bl	801225c <calloc>
 800507a:	4603      	mov	r3, r0
 800507c:	61fb      	str	r3, [r7, #28]
	ON_NULL_GOTO_ERROR(h);
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 8082 	beq.w	800518a <SPINDLE_CreateInstance+0x172>

	if ( h == NULL ) return NULL;
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d101      	bne.n	8005090 <SPINDLE_CreateInstance+0x78>
 800508c:	2300      	movs	r3, #0
 800508e:	e0d3      	b.n	8005238 <SPINDLE_CreateInstance+0x220>
	h->consoleH = cH;
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	605a      	str	r2, [r3, #4]
	h->cancel = 0;
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	2200      	movs	r2, #0
 800509a:	611a      	str	r2, [r3, #16]
	h->nextRequestID = 0;
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	2200      	movs	r2, #0
 80050a0:	601a      	str	r2, [r3, #0]
	h->cmdQueue = xQueueCreate(16, sizeof(CtrlCommand_t));
 80050a2:	2200      	movs	r2, #0
 80050a4:	2114      	movs	r1, #20
 80050a6:	2010      	movs	r0, #16
 80050a8:	f00a f83e 	bl	800f128 <xQueueGenericCreate>
 80050ac:	4602      	mov	r2, r0
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	60da      	str	r2, [r3, #12]
	ON_NULL_GOTO_ERROR(h->cmdQueue);
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d067      	beq.n	800518a <SPINDLE_CreateInstance+0x172>

	// copy arguments
	memcpy(&h->physical, p, sizeof(SpindlePhysicalParams_t));
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	3314      	adds	r3, #20
 80050be:	221c      	movs	r2, #28
 80050c0:	6839      	ldr	r1, [r7, #0]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f00f fd92 	bl	8014bec <memcpy>

	// now we create the sync event pool
	LIST_INIT(&h->syncEventPool.pool);
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	2200      	movs	r2, #0
 80050cc:	639a      	str	r2, [r3, #56]	@ 0x38
	h->syncEventPool.lockGuard = xSemaphoreCreateRecursiveMutex();
 80050ce:	2004      	movs	r0, #4
 80050d0:	f00a f8bd 	bl	800f24e <xQueueCreateMutex>
 80050d4:	4602      	mov	r2, r0
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	635a      	str	r2, [r3, #52]	@ 0x34
	ON_NULL_GOTO_ERROR(h->syncEventPool.lockGuard);
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d053      	beq.n	800518a <SPINDLE_CreateInstance+0x172>
	for ( int i = 0; i < 8; i++)
 80050e2:	2300      	movs	r3, #0
 80050e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80050e6:	e035      	b.n	8005154 <SPINDLE_CreateInstance+0x13c>
	{
		stepSyncEventElement_t* el = (stepSyncEventElement_t*)calloc(sizeof(stepSyncEventElement_t), 1);
 80050e8:	2101      	movs	r1, #1
 80050ea:	2010      	movs	r0, #16
 80050ec:	f00d f8b6 	bl	801225c <calloc>
 80050f0:	4603      	mov	r3, r0
 80050f2:	61bb      	str	r3, [r7, #24]
		ON_NULL_GOTO_ERROR(el);
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d047      	beq.n	800518a <SPINDLE_CreateInstance+0x172>
		el->content.allocated = 0;
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	2200      	movs	r2, #0
 80050fe:	601a      	str	r2, [r3, #0]
		el->content.event = xSemaphoreCreateBinary();
 8005100:	2203      	movs	r2, #3
 8005102:	2100      	movs	r1, #0
 8005104:	2001      	movs	r0, #1
 8005106:	f00a f80f 	bl	800f128 <xQueueGenericCreate>
 800510a:	4602      	mov	r2, r0
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	605a      	str	r2, [r3, #4]
		if (el->content.event == NULL)
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d105      	bne.n	8005124 <SPINDLE_CreateInstance+0x10c>
		{
			free(el);
 8005118:	69b8      	ldr	r0, [r7, #24]
 800511a:	f00d f90b 	bl	8012334 <free>
			el = NULL;
 800511e:	2300      	movs	r3, #0
 8005120:	61bb      	str	r3, [r7, #24]
			goto error;
 8005122:	e032      	b.n	800518a <SPINDLE_CreateInstance+0x172>
		}
		else
		{
			LIST_INSERT_HEAD(&h->syncEventPool.pool, el, navigate);
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	609a      	str	r2, [r3, #8]
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d004      	beq.n	800513e <SPINDLE_CreateInstance+0x126>
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	3208      	adds	r2, #8
 800513c:	60da      	str	r2, [r3, #12]
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	639a      	str	r2, [r3, #56]	@ 0x38
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	60da      	str	r2, [r3, #12]
	for ( int i = 0; i < 8; i++)
 800514e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005150:	3301      	adds	r3, #1
 8005152:	627b      	str	r3, [r7, #36]	@ 0x24
 8005154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005156:	2b07      	cmp	r3, #7
 8005158:	ddc6      	ble.n	80050e8 <SPINDLE_CreateInstance+0xd0>
		}
	}

	// setup the console commands
	SpindleRegisterBasicCommands(h, cH);
 800515a:	6879      	ldr	r1, [r7, #4]
 800515c:	69f8      	ldr	r0, [r7, #28]
 800515e:	f7ff ff43 	bl	8004fe8 <SpindleRegisterBasicCommands>
	SpindleInstancePointer = h;
 8005162:	4a37      	ldr	r2, [pc, #220]	@ (8005240 <SPINDLE_CreateInstance+0x228>)
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	6013      	str	r3, [r2, #0]

	// setup the task which handles all communications and the RPM generation
	xTaskCreate(SpindleFunction, "spindlectrl", uxStackDepth, h, xPrio, &h->tHandle);
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	69fa      	ldr	r2, [r7, #28]
 800516c:	3208      	adds	r2, #8
 800516e:	9201      	str	r2, [sp, #4]
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	4933      	ldr	r1, [pc, #204]	@ (8005244 <SPINDLE_CreateInstance+0x22c>)
 8005178:	4833      	ldr	r0, [pc, #204]	@ (8005248 <SPINDLE_CreateInstance+0x230>)
 800517a:	f00a fdd5 	bl	800fd28 <xTaskCreate>
	ON_NULL_GOTO_ERROR(h->tHandle);
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <SPINDLE_CreateInstance+0x172>
	return h;
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	e056      	b.n	8005238 <SPINDLE_CreateInstance+0x220>

error:
	if (h != NULL)
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d052      	beq.n	8005236 <SPINDLE_CreateInstance+0x21e>
	{
		if (h->cmdQueue != NULL)
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d007      	beq.n	80051a8 <SPINDLE_CreateInstance+0x190>
		{
			vQueueDelete(h->cmdQueue);
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	4618      	mov	r0, r3
 800519e:	f00a fc07 	bl	800f9b0 <vQueueDelete>
			h->cmdQueue = NULL;
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	2200      	movs	r2, #0
 80051a6:	60da      	str	r2, [r3, #12]
		}

		if (h->syncEventPool.lockGuard != NULL)
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d007      	beq.n	80051c0 <SPINDLE_CreateInstance+0x1a8>
		{
			vSemaphoreDelete(h->syncEventPool.lockGuard);
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051b4:	4618      	mov	r0, r3
 80051b6:	f00a fbfb 	bl	800f9b0 <vQueueDelete>
			h->syncEventPool.lockGuard = NULL;
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	2200      	movs	r2, #0
 80051be:	635a      	str	r2, [r3, #52]	@ 0x34
		}

		// first clean all event elements
		stepSyncEventElement_t* el = NULL;
 80051c0:	2300      	movs	r3, #0
 80051c2:	623b      	str	r3, [r7, #32]
		stepSyncEventElement_t* tel = NULL;
 80051c4:	2300      	movs	r3, #0
 80051c6:	617b      	str	r3, [r7, #20]
		for (el = LIST_FIRST(&h->syncEventPool.pool); el && (tel = LIST_NEXT(el, navigate), 1); el = tel)
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051cc:	623b      	str	r3, [r7, #32]
 80051ce:	e009      	b.n	80051e4 <SPINDLE_CreateInstance+0x1cc>
		{
			if (el->content.event != NULL)
			{
				vSemaphoreDelete(el->content.event);
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f00a fbeb 	bl	800f9b0 <vQueueDelete>
				el->content.event = NULL;
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	2200      	movs	r2, #0
 80051de:	605a      	str	r2, [r3, #4]
		for (el = LIST_FIRST(&h->syncEventPool.pool); el && (tel = LIST_NEXT(el, navigate), 1); el = tel)
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	623b      	str	r3, [r7, #32]
 80051e4:	6a3b      	ldr	r3, [r7, #32]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d01e      	beq.n	8005228 <SPINDLE_CreateInstance+0x210>
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	617b      	str	r3, [r7, #20]
			if (el->content.event != NULL)
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0f3      	beq.n	80051e0 <SPINDLE_CreateInstance+0x1c8>
 80051f8:	e7ea      	b.n	80051d0 <SPINDLE_CreateInstance+0x1b8>
		}

		// now remove all elements one by one from the list and free them
		while (!LIST_EMPTY(&h->syncEventPool.pool))
		{
			stepSyncEventElement_t* el = LIST_FIRST(&h->syncEventPool.pool);
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051fe:	613b      	str	r3, [r7, #16]
			if (el != NULL)
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d010      	beq.n	8005228 <SPINDLE_CreateInstance+0x210>
			{
				LIST_REMOVE(el, navigate);
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d004      	beq.n	8005218 <SPINDLE_CreateInstance+0x200>
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	68d2      	ldr	r2, [r2, #12]
 8005216:	60da      	str	r2, [r3, #12]
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	6892      	ldr	r2, [r2, #8]
 8005220:	601a      	str	r2, [r3, #0]
				free(el);
 8005222:	6938      	ldr	r0, [r7, #16]
 8005224:	f00d f886 	bl	8012334 <free>
		while (!LIST_EMPTY(&h->syncEventPool.pool))
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1e4      	bne.n	80051fa <SPINDLE_CreateInstance+0x1e2>
			}
		}

		free(h);
 8005230:	69f8      	ldr	r0, [r7, #28]
 8005232:	f00d f87f 	bl	8012334 <free>
	}

	return NULL;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3728      	adds	r7, #40	@ 0x28
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	20000300 	.word	0x20000300
 8005244:	080186dc 	.word	0x080186dc
 8005248:	08004a7d 	.word	0x08004a7d

0800524c <L6474_HelperLock>:


// --------------------------------------------------------------------------------------------------------------------
static inline int L6474_HelperLock(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
#if defined(LIBL6474_HAS_LOCKING) && LIBL6474_HAS_LOCKING == 1
	return h->platform->lock();
#else
	(void)h;
	return 0;
 8005254:	2300      	movs	r3, #0
#endif
}
 8005256:	4618      	mov	r0, r3
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <L6474_HelperUnlock>:

// --------------------------------------------------------------------------------------------------------------------
static inline void L6474_HelperUnlock(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 8005262:	b480      	push	{r7}
 8005264:	b083      	sub	sp, #12
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
#if defined(LIBL6474_HAS_LOCKING) && LIBL6474_HAS_LOCKING == 1
	h->platform->unlock();
#else
	(void)h;
	return;
 800526a:	bf00      	nop
#endif
}
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <L6474_HelperReleaseStep>:


// --------------------------------------------------------------------------------------------------------------------
static void L6474_HelperReleaseStep(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b082      	sub	sp, #8
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
	L6474_HelperLock(h);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7ff ffe4 	bl	800524c <L6474_HelperLock>
	h->pending = 0;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	605a      	str	r2, [r3, #4]
	L6474_HelperUnlock(h);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7ff ffe9 	bl	8005262 <L6474_HelperUnlock>
}
 8005290:	bf00      	nop
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <L6474_GetStatusCommand>:

// --------------------------------------------------------------------------------------------------------------------
static int L6474_GetStatusCommand(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 8005298:	b590      	push	{r4, r7, lr}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
	if ( h->state == stRESET )
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d102      	bne.n	80052ae <L6474_GetStatusCommand+0x16>
		return errcINV_STATE;
 80052a8:	f06f 0302 	mvn.w	r3, #2
 80052ac:	e033      	b.n	8005316 <L6474_GetStatusCommand+0x7e>

	int length = STEP_CMD_STA_LENGTH;
 80052ae:	2303      	movs	r3, #3
 80052b0:	617b      	str	r3, [r7, #20]

	unsigned char rxBuff[STEP_CMD_STA_LENGTH] = { 0 };
 80052b2:	f107 030c 	add.w	r3, r7, #12
 80052b6:	2100      	movs	r1, #0
 80052b8:	460a      	mov	r2, r1
 80052ba:	801a      	strh	r2, [r3, #0]
 80052bc:	460a      	mov	r2, r1
 80052be:	709a      	strb	r2, [r3, #2]
	unsigned char txBuff[STEP_CMD_STA_LENGTH] = { 0 };
 80052c0:	f107 0308 	add.w	r3, r7, #8
 80052c4:	2100      	movs	r1, #0
 80052c6:	460a      	mov	r2, r1
 80052c8:	801a      	strh	r2, [r3, #0]
 80052ca:	460a      	mov	r2, r1
 80052cc:	709a      	strb	r2, [r3, #2]

	txBuff[0] = STEP_CMD_STA_PREFIX | 0;
 80052ce:	23d0      	movs	r3, #208	@ 0xd0
 80052d0:	723b      	strb	r3, [r7, #8]
	int ret = h->platform.transfer(h->pIO, (char*)rxBuff, (const char*)txBuff, length);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69dc      	ldr	r4, [r3, #28]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6898      	ldr	r0, [r3, #8]
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f107 0208 	add.w	r2, r7, #8
 80052e0:	f107 010c 	add.w	r1, r7, #12
 80052e4:	47a0      	blx	r4
 80052e6:	6138      	str	r0, [r7, #16]

	if ( ret != 0 )
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <L6474_GetStatusCommand+0x5c>
		return errcINTERNAL;
 80052ee:	f06f 0303 	mvn.w	r3, #3
 80052f2:	e010      	b.n	8005316 <L6474_GetStatusCommand+0x7e>

	ret = (rxBuff[2] << 0 ) | (rxBuff[1] << 8 );
 80052f4:	7bbb      	ldrb	r3, [r7, #14]
 80052f6:	461a      	mov	r2, r3
 80052f8:	7b7b      	ldrb	r3, [r7, #13]
 80052fa:	021b      	lsls	r3, r3, #8
 80052fc:	4313      	orrs	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]
	h->state = ( ret & STATUS_HIGHZ_MASK ) ? stDISABLED : stENABLED;
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <L6474_GetStatusCommand+0x76>
 800530a:	2201      	movs	r2, #1
 800530c:	e000      	b.n	8005310 <L6474_GetStatusCommand+0x78>
 800530e:	2202      	movs	r2, #2
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	701a      	strb	r2, [r3, #0]
	return ret;
 8005314:	693b      	ldr	r3, [r7, #16]
}
 8005316:	4618      	mov	r0, r3
 8005318:	371c      	adds	r7, #28
 800531a:	46bd      	mov	sp, r7
 800531c:	bd90      	pop	{r4, r7, pc}
	...

08005320 <L6474_GetParamCommand>:
}

// --------------------------------------------------------------------------------------------------------------------
static int L6474_GetParamCommand(L6474_Handle_t h, int addr)
// --------------------------------------------------------------------------------------------------------------------
{
 8005320:	b590      	push	{r4, r7, lr}
 8005322:	b08b      	sub	sp, #44	@ 0x2c
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
	addr &= STEP_REG_RANGE_MASK;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	f003 031f 	and.w	r3, r3, #31
 8005330:	603b      	str	r3, [r7, #0]
	if( L6474_Parameters[addr].defined == 0 )
 8005332:	4a52      	ldr	r2, [pc, #328]	@ (800547c <L6474_GetParamCommand+0x15c>)
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	011b      	lsls	r3, r3, #4
 8005338:	4413      	add	r3, r2
 800533a:	3301      	adds	r3, #1
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d102      	bne.n	8005348 <L6474_GetParamCommand+0x28>
		return errcINV_ARG;
 8005342:	f04f 33ff 	mov.w	r3, #4294967295
 8005346:	e094      	b.n	8005472 <L6474_GetParamCommand+0x152>

	if( ( L6474_Parameters[addr].flags & afREAD ) == 0 )
 8005348:	4a4c      	ldr	r2, [pc, #304]	@ (800547c <L6474_GetParamCommand+0x15c>)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	4413      	add	r3, r2
 8005350:	330c      	adds	r3, #12
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b00      	cmp	r3, #0
 800535a:	d102      	bne.n	8005362 <L6474_GetParamCommand+0x42>
		return errcFORBIDDEN;
 800535c:	f06f 0307 	mvn.w	r3, #7
 8005360:	e087      	b.n	8005472 <L6474_GetParamCommand+0x152>

	if ( h->state == stRESET )
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d102      	bne.n	8005370 <L6474_GetParamCommand+0x50>
		return errcINV_STATE;
 800536a:	f06f 0302 	mvn.w	r3, #2
 800536e:	e080      	b.n	8005472 <L6474_GetParamCommand+0x152>

	int length  = L6474_Parameters[addr].length + STEP_CMD_GET_LENGTH;
 8005370:	4a42      	ldr	r2, [pc, #264]	@ (800547c <L6474_GetParamCommand+0x15c>)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	011b      	lsls	r3, r3, #4
 8005376:	4413      	add	r3, r2
 8005378:	3302      	adds	r3, #2
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	3301      	adds	r3, #1
 800537e:	623b      	str	r3, [r7, #32]
	if ( length > STEP_CMD_GET_MAX_PAYLOAD )
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	2b04      	cmp	r3, #4
 8005384:	dd02      	ble.n	800538c <L6474_GetParamCommand+0x6c>
		return errcINTERNAL;
 8005386:	f06f 0303 	mvn.w	r3, #3
 800538a:	e072      	b.n	8005472 <L6474_GetParamCommand+0x152>

	unsigned char rxBuff[STEP_CMD_GET_MAX_PAYLOAD] = { STEP_CMD_NOP_PREFIX };
 800538c:	2300      	movs	r3, #0
 800538e:	613b      	str	r3, [r7, #16]
	unsigned char txBuff[STEP_CMD_GET_MAX_PAYLOAD] = { STEP_CMD_NOP_PREFIX };
 8005390:	2300      	movs	r3, #0
 8005392:	60fb      	str	r3, [r7, #12]

	txBuff[0] = STEP_CMD_GET_PREFIX | addr;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	b25b      	sxtb	r3, r3
 8005398:	f043 0320 	orr.w	r3, r3, #32
 800539c:	b25b      	sxtb	r3, r3
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	733b      	strb	r3, [r7, #12]
	int ret = h->platform.transfer(h->pIO, (char*)rxBuff, (const char*)txBuff, length);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69dc      	ldr	r4, [r3, #28]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6898      	ldr	r0, [r3, #8]
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	f107 020c 	add.w	r2, r7, #12
 80053b0:	f107 0110 	add.w	r1, r7, #16
 80053b4:	47a0      	blx	r4
 80053b6:	61f8      	str	r0, [r7, #28]

	if ( ret != 0 )
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d002      	beq.n	80053c4 <L6474_GetParamCommand+0xa4>
		return errcINTERNAL;
 80053be:	f06f 0303 	mvn.w	r3, #3
 80053c2:	e056      	b.n	8005472 <L6474_GetParamCommand+0x152>

	int res = errcNONE;
 80053c4:	2300      	movs	r3, #0
 80053c6:	627b      	str	r3, [r7, #36]	@ 0x24
	unsigned int tmp = 0;
 80053c8:	2300      	movs	r3, #0
 80053ca:	61bb      	str	r3, [r7, #24]
	switch (L6474_Parameters[addr].length)
 80053cc:	4a2b      	ldr	r2, [pc, #172]	@ (800547c <L6474_GetParamCommand+0x15c>)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	4413      	add	r3, r2
 80053d4:	3302      	adds	r3, #2
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b03      	cmp	r3, #3
 80053da:	d021      	beq.n	8005420 <L6474_GetParamCommand+0x100>
 80053dc:	2b03      	cmp	r3, #3
 80053de:	dc31      	bgt.n	8005444 <L6474_GetParamCommand+0x124>
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d002      	beq.n	80053ea <L6474_GetParamCommand+0xca>
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d00c      	beq.n	8005402 <L6474_GetParamCommand+0xe2>
 80053e8:	e02c      	b.n	8005444 <L6474_GetParamCommand+0x124>
	{
	    case 1:
	    	tmp = ( rxBuff[1] << 0 );
 80053ea:	7c7b      	ldrb	r3, [r7, #17]
 80053ec:	61bb      	str	r3, [r7, #24]
	    	res = tmp & L6474_Parameters[addr].mask;
 80053ee:	4a23      	ldr	r2, [pc, #140]	@ (800547c <L6474_GetParamCommand+0x15c>)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	4413      	add	r3, r2
 80053f6:	3304      	adds	r3, #4
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	4013      	ands	r3, r2
 80053fe:	627b      	str	r3, [r7, #36]	@ 0x24
	    	break;
 8005400:	e023      	b.n	800544a <L6474_GetParamCommand+0x12a>
	    case 2:
	    	tmp = ( rxBuff[1] << 8 | rxBuff[2] << 0 );
 8005402:	7c7b      	ldrb	r3, [r7, #17]
 8005404:	021b      	lsls	r3, r3, #8
 8005406:	7cba      	ldrb	r2, [r7, #18]
 8005408:	4313      	orrs	r3, r2
 800540a:	61bb      	str	r3, [r7, #24]
	    	res = tmp & L6474_Parameters[addr].mask;
 800540c:	4a1b      	ldr	r2, [pc, #108]	@ (800547c <L6474_GetParamCommand+0x15c>)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	011b      	lsls	r3, r3, #4
 8005412:	4413      	add	r3, r2
 8005414:	3304      	adds	r3, #4
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	4013      	ands	r3, r2
 800541c:	627b      	str	r3, [r7, #36]	@ 0x24
	    	//res = ( ( tmp & 0xFF00 ) >> 8 ) | ( ( tmp & 0x00FF ) << 8 );
	    	break;
 800541e:	e014      	b.n	800544a <L6474_GetParamCommand+0x12a>
	    case 3:
	    	tmp = ( rxBuff[1] << 16 | rxBuff[2] << 8 | rxBuff[3] << 0 );
 8005420:	7c7b      	ldrb	r3, [r7, #17]
 8005422:	041a      	lsls	r2, r3, #16
 8005424:	7cbb      	ldrb	r3, [r7, #18]
 8005426:	021b      	lsls	r3, r3, #8
 8005428:	4313      	orrs	r3, r2
 800542a:	7cfa      	ldrb	r2, [r7, #19]
 800542c:	4313      	orrs	r3, r2
 800542e:	61bb      	str	r3, [r7, #24]
	    	res = tmp & L6474_Parameters[addr].mask;
 8005430:	4a12      	ldr	r2, [pc, #72]	@ (800547c <L6474_GetParamCommand+0x15c>)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	011b      	lsls	r3, r3, #4
 8005436:	4413      	add	r3, r2
 8005438:	3304      	adds	r3, #4
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	4013      	ands	r3, r2
 8005440:	627b      	str	r3, [r7, #36]	@ 0x24
	    	//res = ( ( tmp & 0xFF0000 ) >> 16 ) | ( ( tmp & 0x00FF00 ) << 0 ) | ( ( tmp & 0x0000FF ) << 16 );
	    	break;
 8005442:	e002      	b.n	800544a <L6474_GetParamCommand+0x12a>
	    default:
	    	return errcINTERNAL;
 8005444:	f06f 0303 	mvn.w	r3, #3
 8005448:	e013      	b.n	8005472 <L6474_GetParamCommand+0x152>
	}

	int opres = 0;
 800544a:	2300      	movs	r3, #0
 800544c:	617b      	str	r3, [r7, #20]
	if ( ( opres = L6474_GetStatusCommand(h) ) < 0 )
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7ff ff22 	bl	8005298 <L6474_GetStatusCommand>
 8005454:	6178      	str	r0, [r7, #20]
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2b00      	cmp	r3, #0
 800545a:	da01      	bge.n	8005460 <L6474_GetParamCommand+0x140>
		return opres;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	e008      	b.n	8005472 <L6474_GetParamCommand+0x152>

	if ( (opres & ( STATUS_NOTPERF_CMD_MASK | STATUS_WRONG_CMD_MASK ) ) != 0 )
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005466:	2b00      	cmp	r3, #0
 8005468:	d002      	beq.n	8005470 <L6474_GetParamCommand+0x150>
		return errcDEVICE_STATE;
 800546a:	f06f 0305 	mvn.w	r3, #5
 800546e:	e000      	b.n	8005472 <L6474_GetParamCommand+0x152>

	return res;
 8005470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005472:	4618      	mov	r0, r3
 8005474:	372c      	adds	r7, #44	@ 0x2c
 8005476:	46bd      	mov	sp, r7
 8005478:	bd90      	pop	{r4, r7, pc}
 800547a:	bf00      	nop
 800547c:	08018ff0 	.word	0x08018ff0

08005480 <L6474_SetParamCommand>:

// --------------------------------------------------------------------------------------------------------------------
static int L6474_SetParamCommand(L6474_Handle_t h, int addr, int value)
// --------------------------------------------------------------------------------------------------------------------
{
 8005480:	b590      	push	{r4, r7, lr}
 8005482:	b08b      	sub	sp, #44	@ 0x2c
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
	addr &= STEP_REG_RANGE_MASK;
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f003 031f 	and.w	r3, r3, #31
 8005492:	60bb      	str	r3, [r7, #8]
	if( L6474_Parameters[addr].defined == 0 )
 8005494:	4a58      	ldr	r2, [pc, #352]	@ (80055f8 <L6474_SetParamCommand+0x178>)
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	4413      	add	r3, r2
 800549c:	3301      	adds	r3, #1
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d102      	bne.n	80054aa <L6474_SetParamCommand+0x2a>
		return errcINV_ARG;
 80054a4:	f04f 33ff 	mov.w	r3, #4294967295
 80054a8:	e0a2      	b.n	80055f0 <L6474_SetParamCommand+0x170>

	if( ( L6474_Parameters[addr].flags & ( afWRITE | afWRITE_HighZ ) ) == 0 )
 80054aa:	4a53      	ldr	r2, [pc, #332]	@ (80055f8 <L6474_SetParamCommand+0x178>)
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	011b      	lsls	r3, r3, #4
 80054b0:	4413      	add	r3, r2
 80054b2:	330c      	adds	r3, #12
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	f003 0306 	and.w	r3, r3, #6
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d102      	bne.n	80054c4 <L6474_SetParamCommand+0x44>
		return errcFORBIDDEN;
 80054be:	f06f 0307 	mvn.w	r3, #7
 80054c2:	e095      	b.n	80055f0 <L6474_SetParamCommand+0x170>

	if ( ( h->state == stRESET ) || ( ( h->state == stENABLED ) && ( ( L6474_Parameters[addr].flags & afWRITE_HighZ ) != 0 ) ) )
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00d      	beq.n	80054e8 <L6474_SetParamCommand+0x68>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d10c      	bne.n	80054ee <L6474_SetParamCommand+0x6e>
 80054d4:	4a48      	ldr	r2, [pc, #288]	@ (80055f8 <L6474_SetParamCommand+0x178>)
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	011b      	lsls	r3, r3, #4
 80054da:	4413      	add	r3, r2
 80054dc:	330c      	adds	r3, #12
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <L6474_SetParamCommand+0x6e>
		return errcINV_STATE;
 80054e8:	f06f 0302 	mvn.w	r3, #2
 80054ec:	e080      	b.n	80055f0 <L6474_SetParamCommand+0x170>

	int length  = L6474_Parameters[addr].length + STEP_CMD_SET_LENGTH;
 80054ee:	4a42      	ldr	r2, [pc, #264]	@ (80055f8 <L6474_SetParamCommand+0x178>)
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	011b      	lsls	r3, r3, #4
 80054f4:	4413      	add	r3, r2
 80054f6:	3302      	adds	r3, #2
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	3301      	adds	r3, #1
 80054fc:	627b      	str	r3, [r7, #36]	@ 0x24
	if ( length > STEP_CMD_SET_MAX_PAYLOAD )
 80054fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005500:	2b04      	cmp	r3, #4
 8005502:	dd02      	ble.n	800550a <L6474_SetParamCommand+0x8a>
		return errcINTERNAL;
 8005504:	f06f 0303 	mvn.w	r3, #3
 8005508:	e072      	b.n	80055f0 <L6474_SetParamCommand+0x170>

	unsigned char rxBuff[STEP_CMD_SET_MAX_PAYLOAD] = { 0 };
 800550a:	2300      	movs	r3, #0
 800550c:	617b      	str	r3, [r7, #20]
	unsigned char txBuff[STEP_CMD_SET_MAX_PAYLOAD] = { 0 };
 800550e:	2300      	movs	r3, #0
 8005510:	613b      	str	r3, [r7, #16]
	unsigned int  tmp = 0;
 8005512:	2300      	movs	r3, #0
 8005514:	623b      	str	r3, [r7, #32]

	txBuff[0] = STEP_CMD_SET_PREFIX | addr;
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	b2db      	uxtb	r3, r3
 800551a:	743b      	strb	r3, [r7, #16]

	switch (L6474_Parameters[addr].length)
 800551c:	4a36      	ldr	r2, [pc, #216]	@ (80055f8 <L6474_SetParamCommand+0x178>)
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	011b      	lsls	r3, r3, #4
 8005522:	4413      	add	r3, r2
 8005524:	3302      	adds	r3, #2
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2b03      	cmp	r3, #3
 800552a:	d024      	beq.n	8005576 <L6474_SetParamCommand+0xf6>
 800552c:	2b03      	cmp	r3, #3
 800552e:	dc37      	bgt.n	80055a0 <L6474_SetParamCommand+0x120>
 8005530:	2b01      	cmp	r3, #1
 8005532:	d002      	beq.n	800553a <L6474_SetParamCommand+0xba>
 8005534:	2b02      	cmp	r3, #2
 8005536:	d00d      	beq.n	8005554 <L6474_SetParamCommand+0xd4>
 8005538:	e032      	b.n	80055a0 <L6474_SetParamCommand+0x120>
	{
	    case 1:
	    	tmp = value & L6474_Parameters[addr].mask;
 800553a:	4a2f      	ldr	r2, [pc, #188]	@ (80055f8 <L6474_SetParamCommand+0x178>)
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	011b      	lsls	r3, r3, #4
 8005540:	4413      	add	r3, r2
 8005542:	3304      	adds	r3, #4
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4013      	ands	r3, r2
 800554a:	623b      	str	r3, [r7, #32]
	    	txBuff[1] = tmp >> 0;
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	b2db      	uxtb	r3, r3
 8005550:	747b      	strb	r3, [r7, #17]
	    	break;
 8005552:	e028      	b.n	80055a6 <L6474_SetParamCommand+0x126>
	    case 2:
	    	tmp = value & L6474_Parameters[addr].mask;
 8005554:	4a28      	ldr	r2, [pc, #160]	@ (80055f8 <L6474_SetParamCommand+0x178>)
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	011b      	lsls	r3, r3, #4
 800555a:	4413      	add	r3, r2
 800555c:	3304      	adds	r3, #4
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4013      	ands	r3, r2
 8005564:	623b      	str	r3, [r7, #32]
	    	txBuff[1] = tmp >> 8;
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	0a1b      	lsrs	r3, r3, #8
 800556a:	b2db      	uxtb	r3, r3
 800556c:	747b      	strb	r3, [r7, #17]
	    	txBuff[2] = tmp >> 0;
 800556e:	6a3b      	ldr	r3, [r7, #32]
 8005570:	b2db      	uxtb	r3, r3
 8005572:	74bb      	strb	r3, [r7, #18]
	    	break;
 8005574:	e017      	b.n	80055a6 <L6474_SetParamCommand+0x126>
	    case 3:
	    	tmp = value & L6474_Parameters[addr].mask;
 8005576:	4a20      	ldr	r2, [pc, #128]	@ (80055f8 <L6474_SetParamCommand+0x178>)
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	011b      	lsls	r3, r3, #4
 800557c:	4413      	add	r3, r2
 800557e:	3304      	adds	r3, #4
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4013      	ands	r3, r2
 8005586:	623b      	str	r3, [r7, #32]
	    	txBuff[1] = tmp >> 16;
 8005588:	6a3b      	ldr	r3, [r7, #32]
 800558a:	0c1b      	lsrs	r3, r3, #16
 800558c:	b2db      	uxtb	r3, r3
 800558e:	747b      	strb	r3, [r7, #17]
	    	txBuff[2] = tmp >> 8;
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	0a1b      	lsrs	r3, r3, #8
 8005594:	b2db      	uxtb	r3, r3
 8005596:	74bb      	strb	r3, [r7, #18]
	    	txBuff[3] = tmp >> 0;
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	b2db      	uxtb	r3, r3
 800559c:	74fb      	strb	r3, [r7, #19]
	    	break;
 800559e:	e002      	b.n	80055a6 <L6474_SetParamCommand+0x126>
	    default:
	    	return errcINTERNAL;
 80055a0:	f06f 0303 	mvn.w	r3, #3
 80055a4:	e024      	b.n	80055f0 <L6474_SetParamCommand+0x170>
	}

	int ret = h->platform.transfer(h->pIO, (char*)rxBuff, (const char*)txBuff, length);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	69dc      	ldr	r4, [r3, #28]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6898      	ldr	r0, [r3, #8]
 80055ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b0:	f107 0210 	add.w	r2, r7, #16
 80055b4:	f107 0114 	add.w	r1, r7, #20
 80055b8:	47a0      	blx	r4
 80055ba:	61f8      	str	r0, [r7, #28]

	if ( ret != 0 )
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d002      	beq.n	80055c8 <L6474_SetParamCommand+0x148>
		return errcINTERNAL;
 80055c2:	f06f 0303 	mvn.w	r3, #3
 80055c6:	e013      	b.n	80055f0 <L6474_SetParamCommand+0x170>

	int res = 0;
 80055c8:	2300      	movs	r3, #0
 80055ca:	61bb      	str	r3, [r7, #24]
	if ( ( res = L6474_GetStatusCommand(h) ) < 0 )
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f7ff fe63 	bl	8005298 <L6474_GetStatusCommand>
 80055d2:	61b8      	str	r0, [r7, #24]
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	da01      	bge.n	80055de <L6474_SetParamCommand+0x15e>
		return res;
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	e008      	b.n	80055f0 <L6474_SetParamCommand+0x170>

	if ( ( res & ( STATUS_NOTPERF_CMD_MASK | STATUS_WRONG_CMD_MASK ) ) != 0 )
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d002      	beq.n	80055ee <L6474_SetParamCommand+0x16e>
		return errcDEVICE_STATE;
 80055e8:	f06f 0305 	mvn.w	r3, #5
 80055ec:	e000      	b.n	80055f0 <L6474_SetParamCommand+0x170>

	return errcNONE;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	372c      	adds	r7, #44	@ 0x2c
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd90      	pop	{r4, r7, pc}
 80055f8:	08018ff0 	.word	0x08018ff0

080055fc <L6474_EnableCommand>:

// --------------------------------------------------------------------------------------------------------------------
static int L6474_EnableCommand(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 80055fc:	b590      	push	{r4, r7, lr}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
	if ( h->state == stRESET )
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d102      	bne.n	8005612 <L6474_EnableCommand+0x16>
		return errcINV_STATE;
 800560c:	f06f 0302 	mvn.w	r3, #2
 8005610:	e033      	b.n	800567a <L6474_EnableCommand+0x7e>

	if ( h->state == stENABLED )
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b02      	cmp	r3, #2
 8005618:	d101      	bne.n	800561e <L6474_EnableCommand+0x22>
		return errcNONE;
 800561a:	2300      	movs	r3, #0
 800561c:	e02d      	b.n	800567a <L6474_EnableCommand+0x7e>

	int length = STEP_CMD_ENA_LENGTH;
 800561e:	2301      	movs	r3, #1
 8005620:	617b      	str	r3, [r7, #20]

	unsigned char rxBuff[STEP_CMD_ENA_LENGTH] = { 0 };
 8005622:	2300      	movs	r3, #0
 8005624:	733b      	strb	r3, [r7, #12]
	unsigned char txBuff[STEP_CMD_ENA_LENGTH] = { 0 };
 8005626:	2300      	movs	r3, #0
 8005628:	723b      	strb	r3, [r7, #8]

	txBuff[0] = STEP_CMD_ENA_PREFIX | 0;
 800562a:	23b8      	movs	r3, #184	@ 0xb8
 800562c:	723b      	strb	r3, [r7, #8]
	int ret = h->platform.transfer(h->pIO, (char*)rxBuff, (const char*)txBuff, length);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	69dc      	ldr	r4, [r3, #28]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6898      	ldr	r0, [r3, #8]
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f107 0208 	add.w	r2, r7, #8
 800563c:	f107 010c 	add.w	r1, r7, #12
 8005640:	47a0      	blx	r4
 8005642:	6138      	str	r0, [r7, #16]

	if ( ret != 0 )
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <L6474_EnableCommand+0x54>
		return errcINTERNAL;
 800564a:	f06f 0303 	mvn.w	r3, #3
 800564e:	e014      	b.n	800567a <L6474_EnableCommand+0x7e>

	if ( ( ret = L6474_GetStatusCommand(h) ) < 0 )
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f7ff fe21 	bl	8005298 <L6474_GetStatusCommand>
 8005656:	6138      	str	r0, [r7, #16]
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	da01      	bge.n	8005662 <L6474_EnableCommand+0x66>
		return ret;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	e00b      	b.n	800567a <L6474_EnableCommand+0x7e>

	if ( ( ret & ( STATUS_NOTPERF_CMD_MASK | STATUS_WRONG_CMD_MASK ) ) != 0 )
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005668:	2b00      	cmp	r3, #0
 800566a:	d002      	beq.n	8005672 <L6474_EnableCommand+0x76>
		return errcDEVICE_STATE;
 800566c:	f06f 0305 	mvn.w	r3, #5
 8005670:	e003      	b.n	800567a <L6474_EnableCommand+0x7e>

	h->state = stENABLED;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2202      	movs	r2, #2
 8005676:	701a      	strb	r2, [r3, #0]
	return errcNONE;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	371c      	adds	r7, #28
 800567e:	46bd      	mov	sp, r7
 8005680:	bd90      	pop	{r4, r7, pc}

08005682 <L6474_DisableCommand>:

// --------------------------------------------------------------------------------------------------------------------
static int L6474_DisableCommand(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 8005682:	b590      	push	{r4, r7, lr}
 8005684:	b087      	sub	sp, #28
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
	if ( h->state == stRESET )
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d102      	bne.n	8005698 <L6474_DisableCommand+0x16>
		return errcINV_STATE;
 8005692:	f06f 0302 	mvn.w	r3, #2
 8005696:	e036      	b.n	8005706 <L6474_DisableCommand+0x84>

	int length = STEP_CMD_DIS_LENGTH;
 8005698:	2301      	movs	r3, #1
 800569a:	617b      	str	r3, [r7, #20]

	unsigned char rxBuff[STEP_CMD_DIS_LENGTH] = { 0 };
 800569c:	2300      	movs	r3, #0
 800569e:	733b      	strb	r3, [r7, #12]
	unsigned char txBuff[STEP_CMD_DIS_LENGTH] = { 0 };
 80056a0:	2300      	movs	r3, #0
 80056a2:	723b      	strb	r3, [r7, #8]

	txBuff[0] = STEP_CMD_DIS_PREFIX | 0;
 80056a4:	23a8      	movs	r3, #168	@ 0xa8
 80056a6:	723b      	strb	r3, [r7, #8]
	int ret = h->platform.transfer(h->pIO, (char*)rxBuff, (const char*)txBuff, length);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	69dc      	ldr	r4, [r3, #28]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6898      	ldr	r0, [r3, #8]
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f107 0208 	add.w	r2, r7, #8
 80056b6:	f107 010c 	add.w	r1, r7, #12
 80056ba:	47a0      	blx	r4
 80056bc:	6138      	str	r0, [r7, #16]

	if ( ret != 0 )
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <L6474_DisableCommand+0x48>
		return errcINTERNAL;
 80056c4:	f06f 0303 	mvn.w	r3, #3
 80056c8:	e01d      	b.n	8005706 <L6474_DisableCommand+0x84>

	if ( ( ret = L6474_GetStatusCommand(h) ) < 0 )
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7ff fde4 	bl	8005298 <L6474_GetStatusCommand>
 80056d0:	6138      	str	r0, [r7, #16]
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	da01      	bge.n	80056dc <L6474_DisableCommand+0x5a>
		return ret;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	e014      	b.n	8005706 <L6474_DisableCommand+0x84>

	if ( ( ret & ( STATUS_NOTPERF_CMD_MASK | STATUS_WRONG_CMD_MASK ) ) != 0 )
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d002      	beq.n	80056ec <L6474_DisableCommand+0x6a>
		return errcDEVICE_STATE;
 80056e6:	f06f 0305 	mvn.w	r3, #5
 80056ea:	e00c      	b.n	8005706 <L6474_DisableCommand+0x84>

	h->state   = stDISABLED;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	701a      	strb	r2, [r3, #0]
#if defined(LIBL6474_STEP_ASYNC) && ( LIBL6474_STEP_ASYNC == 1 )
	h->pending = 0;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	605a      	str	r2, [r3, #4]
	h->platform.cancelStep(h->pPWM);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	6912      	ldr	r2, [r2, #16]
 8005700:	4610      	mov	r0, r2
 8005702:	4798      	blx	r3
#endif
	return errcNONE;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	371c      	adds	r7, #28
 800570a:	46bd      	mov	sp, r7
 800570c:	bd90      	pop	{r4, r7, pc}

0800570e <L6474_CreateInstance>:


// --------------------------------------------------------------------------------------------------------------------
L6474_Handle_t L6474_CreateInstance(L6474x_Platform_t* p, void* pIO, void* pGPO, void* pPWM)
// --------------------------------------------------------------------------------------------------------------------
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b086      	sub	sp, #24
 8005712:	af00      	add	r7, sp, #0
 8005714:	60f8      	str	r0, [r7, #12]
 8005716:	60b9      	str	r1, [r7, #8]
 8005718:	607a      	str	r2, [r7, #4]
 800571a:	603b      	str	r3, [r7, #0]
	if ( p == 0 )
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <L6474_CreateInstance+0x18>
		return 0;
 8005722:	2300      	movs	r3, #0
 8005724:	e05c      	b.n	80057e0 <L6474_CreateInstance+0xd2>

	if ( ( p->reset == 0 ) || ( p->malloc == 0 ) || (p->free == 0) || (p->sleep == 0) || ( p->transfer == 0 ) )
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00f      	beq.n	800574e <L6474_CreateInstance+0x40>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00b      	beq.n	800574e <L6474_CreateInstance+0x40>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d007      	beq.n	800574e <L6474_CreateInstance+0x40>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <L6474_CreateInstance+0x40>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <L6474_CreateInstance+0x44>
		return 0;
 800574e:	2300      	movs	r3, #0
 8005750:	e046      	b.n	80057e0 <L6474_CreateInstance+0xd2>
	if ( p->getFlag == 0 )
		return 0;
#endif

#if defined(LIBL6474_STEP_ASYNC) && ( LIBL6474_STEP_ASYNC == 1 )
	if ( ( p->cancelStep == 0 ) || ( p->stepAsync == 0 ) )
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d003      	beq.n	8005762 <L6474_CreateInstance+0x54>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <L6474_CreateInstance+0x58>
		return 0;
 8005762:	2300      	movs	r3, #0
 8005764:	e03c      	b.n	80057e0 <L6474_CreateInstance+0xd2>
#else
	if ( p->step == 0 )
		return 0;
#endif

	L6474_Handle_t h = p->malloc(sizeof(struct L6474_Handle));
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2030      	movs	r0, #48	@ 0x30
 800576c:	4798      	blx	r3
 800576e:	6178      	str	r0, [r7, #20]
	if ( h == 0 )
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <L6474_CreateInstance+0x6c>
		return 0;
 8005776:	2300      	movs	r3, #0
 8005778:	e032      	b.n	80057e0 <L6474_CreateInstance+0xd2>

	h->pGPO                = pGPO;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	60da      	str	r2, [r3, #12]
	h->pIO                 = pIO;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	609a      	str	r2, [r3, #8]
	h->pPWM                = pPWM;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	611a      	str	r2, [r3, #16]
#if defined(LIBL6474_STEP_ASYNC) && ( LIBL6474_STEP_ASYNC == 1 )
	h->platform.cancelStep = p->cancelStep;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	699a      	ldr	r2, [r3, #24]
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	62da      	str	r2, [r3, #44]	@ 0x2c
	h->platform.stepAsync  = p->stepAsync;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	695a      	ldr	r2, [r3, #20]
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	629a      	str	r2, [r3, #40]	@ 0x28
#else
	h->platform.step       = p->step;
#endif
	h->platform.free       = p->free;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	619a      	str	r2, [r3, #24]
	h->platform.malloc     = p->malloc;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	615a      	str	r2, [r3, #20]
	h->platform.reset      = p->reset;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	68da      	ldr	r2, [r3, #12]
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	621a      	str	r2, [r3, #32]
	h->platform.sleep      = p->sleep;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	691a      	ldr	r2, [r3, #16]
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	625a      	str	r2, [r3, #36]	@ 0x24
	h->platform.transfer   = p->transfer;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	61da      	str	r2, [r3, #28]
	h->pending             = 0;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	2200      	movs	r2, #0
 80057c8:	605a      	str	r2, [r3, #4]
	h->state               = stRESET;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2200      	movs	r2, #0
 80057ce:	701a      	strb	r2, [r3, #0]

	h->platform.reset(h->pGPO, 1);
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	6a1b      	ldr	r3, [r3, #32]
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	68d2      	ldr	r2, [r2, #12]
 80057d8:	2101      	movs	r1, #1
 80057da:	4610      	mov	r0, r2
 80057dc:	4798      	blx	r3

	(void)L6474_NopCommand;
	return h;
 80057de:	697b      	ldr	r3, [r7, #20]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3718      	adds	r7, #24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <L6474_ResetStandBy>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_ResetStandBy(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
	if ( h == 0 )
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d102      	bne.n	80057fc <L6474_ResetStandBy+0x14>
		return errcNULL_ARG;
 80057f6:	f06f 0301 	mvn.w	r3, #1
 80057fa:	e040      	b.n	800587e <L6474_ResetStandBy+0x96>

	if ( L6474_HelperLock(h) != 0 )
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7ff fd25 	bl	800524c <L6474_HelperLock>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d002      	beq.n	800580e <L6474_ResetStandBy+0x26>
		return errcLOCKING;
 8005808:	f06f 0304 	mvn.w	r3, #4
 800580c:	e037      	b.n	800587e <L6474_ResetStandBy+0x96>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7ff fd42 	bl	8005298 <L6474_GetStatusCommand>

	if ( h->state == stENABLED )
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2b02      	cmp	r3, #2
 800581a:	d11e      	bne.n	800585a <L6474_ResetStandBy+0x72>
	{
#if defined(LIBL6474_STEP_ASYNC) && ( LIBL6474_STEP_ASYNC == 1 )
		if ( h->pending != 0 )
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00c      	beq.n	800583e <L6474_ResetStandBy+0x56>
		{
			h->platform.cancelStep(h->pPWM);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6912      	ldr	r2, [r2, #16]
 800582c:	4610      	mov	r0, r2
 800582e:	4798      	blx	r3
			h->platform.sleep(IN_MILLISEC(1));
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005834:	2001      	movs	r0, #1
 8005836:	4798      	blx	r3
			h->pending = 0;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	605a      	str	r2, [r3, #4]
		}
#endif

		int ret = 0;
 800583e:	2300      	movs	r3, #0
 8005840:	60fb      	str	r3, [r7, #12]
		if ( ( ret = L6474_DisableCommand(h) ) != 0 )
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7ff ff1d 	bl	8005682 <L6474_DisableCommand>
 8005848:	60f8      	str	r0, [r7, #12]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d004      	beq.n	800585a <L6474_ResetStandBy+0x72>
		{
			L6474_HelperUnlock(h);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f7ff fd06 	bl	8005262 <L6474_HelperUnlock>
			return ret;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	e011      	b.n	800587e <L6474_ResetStandBy+0x96>
		}
	}

	h->platform.reset(h->pGPO, 1);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	68d2      	ldr	r2, [r2, #12]
 8005862:	2101      	movs	r1, #1
 8005864:	4610      	mov	r0, r2
 8005866:	4798      	blx	r3
	h->state = stRESET;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	701a      	strb	r2, [r3, #0]

	h->platform.sleep(IN_MILLISEC(1));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005872:	2001      	movs	r0, #1
 8005874:	4798      	blx	r3
	L6474_HelperUnlock(h);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7ff fcf3 	bl	8005262 <L6474_HelperUnlock>

	return errcNONE;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <L6474_Initialize>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_Initialize(L6474_Handle_t h, L6474_BaseParameter_t* p)
// --------------------------------------------------------------------------------------------------------------------
{
 8005886:	b580      	push	{r7, lr}
 8005888:	b084      	sub	sp, #16
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
 800588e:	6039      	str	r1, [r7, #0]
	int val = 0;
 8005890:	2300      	movs	r3, #0
 8005892:	60fb      	str	r3, [r7, #12]

	if ( h == 0 || p == 0 )
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <L6474_Initialize+0x1a>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d102      	bne.n	80058a6 <L6474_Initialize+0x20>
		return errcNULL_ARG;
 80058a0:	f06f 0301 	mvn.w	r3, #1
 80058a4:	e130      	b.n	8005b08 <L6474_Initialize+0x282>

	if ( L6474_HelperLock(h) != 0 )
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7ff fcd0 	bl	800524c <L6474_HelperLock>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <L6474_Initialize+0x32>
		return errcLOCKING;
 80058b2:	f06f 0304 	mvn.w	r3, #4
 80058b6:	e127      	b.n	8005b08 <L6474_Initialize+0x282>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f7ff fced 	bl	8005298 <L6474_GetStatusCommand>

	if ( h->state != stRESET )
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00b      	beq.n	80058de <L6474_Initialize+0x58>
	{
		if ( ( val = L6474_ResetStandBy(h) ) != 0 )
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7ff ff8e 	bl	80057e8 <L6474_ResetStandBy>
 80058cc:	60f8      	str	r0, [r7, #12]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d004      	beq.n	80058de <L6474_Initialize+0x58>
		{
			L6474_HelperUnlock(h);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7ff fcc4 	bl	8005262 <L6474_HelperUnlock>
			return val;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	e114      	b.n	8005b08 <L6474_Initialize+0x282>
		}
	}

	h->platform.reset(h->pGPO, 0);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	68d2      	ldr	r2, [r2, #12]
 80058e6:	2100      	movs	r1, #0
 80058e8:	4610      	mov	r0, r2
 80058ea:	4798      	blx	r3
	h->state = stDISABLED;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	701a      	strb	r2, [r3, #0]

	h->platform.sleep(IN_MILLISEC(10));
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f6:	200a      	movs	r0, #10
 80058f8:	4798      	blx	r3

	//Now we have to write the configuration register
	unsigned int CONFIG = 0x2E88; // reset default value
 80058fa:	f642 6388 	movw	r3, #11912	@ 0x2e88
 80058fe:	60bb      	str	r3, [r7, #8]
	CONFIG &= ~0xF; // disables all clock outputs and selects internal oscillator
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f023 030f 	bic.w	r3, r3, #15
 8005906:	60bb      	str	r3, [r7, #8]

#if defined(LIBL6474_DISABLE_OCD) && ( LIBL6474_DISABLE_OCD == 1 )
	CONFIG &= ~(1 << 7); // disable the OCD
#endif

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_CONFIG, CONFIG) ) != 0 )
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	461a      	mov	r2, r3
 800590c:	2118      	movs	r1, #24
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7ff fdb6 	bl	8005480 <L6474_SetParamCommand>
 8005914:	60f8      	str	r0, [r7, #12]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00e      	beq.n	800593a <L6474_Initialize+0xb4>
	{
		h->platform.reset(h->pGPO, 1);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	68d2      	ldr	r2, [r2, #12]
 8005924:	2101      	movs	r1, #1
 8005926:	4610      	mov	r0, r2
 8005928:	4798      	blx	r3
		h->state = stRESET;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f7ff fc96 	bl	8005262 <L6474_HelperUnlock>
		return val;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	e0e6      	b.n	8005b08 <L6474_Initialize+0x282>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_OCD_TH, p->OcdTh) ) != 0 )
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	785b      	ldrb	r3, [r3, #1]
 800593e:	461a      	mov	r2, r3
 8005940:	2113      	movs	r1, #19
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7ff fd9c 	bl	8005480 <L6474_SetParamCommand>
 8005948:	60f8      	str	r0, [r7, #12]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00e      	beq.n	800596e <L6474_Initialize+0xe8>
	{
		h->platform.reset(h->pGPO, 1);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	68d2      	ldr	r2, [r2, #12]
 8005958:	2101      	movs	r1, #1
 800595a:	4610      	mov	r0, r2
 800595c:	4798      	blx	r3
		h->state = stRESET;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f7ff fc7c 	bl	8005262 <L6474_HelperUnlock>
		return val;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	e0cc      	b.n	8005b08 <L6474_Initialize+0x282>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_TVAL, p->TorqueVal) ) != 0 )
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	791b      	ldrb	r3, [r3, #4]
 8005972:	461a      	mov	r2, r3
 8005974:	2109      	movs	r1, #9
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7ff fd82 	bl	8005480 <L6474_SetParamCommand>
 800597c:	60f8      	str	r0, [r7, #12]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00e      	beq.n	80059a2 <L6474_Initialize+0x11c>
	{
		h->platform.reset(h->pGPO, 1);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a1b      	ldr	r3, [r3, #32]
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	68d2      	ldr	r2, [r2, #12]
 800598c:	2101      	movs	r1, #1
 800598e:	4610      	mov	r0, r2
 8005990:	4798      	blx	r3
		h->state = stRESET;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f7ff fc62 	bl	8005262 <L6474_HelperUnlock>
		return val;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	e0b2      	b.n	8005b08 <L6474_Initialize+0x282>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_TOFF_MIN, p->TimeOffMin) ) != 0 )
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	78db      	ldrb	r3, [r3, #3]
 80059a6:	461a      	mov	r2, r3
 80059a8:	2110      	movs	r1, #16
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7ff fd68 	bl	8005480 <L6474_SetParamCommand>
 80059b0:	60f8      	str	r0, [r7, #12]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00e      	beq.n	80059d6 <L6474_Initialize+0x150>
	{
		h->platform.reset(h->pGPO, 1);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	68d2      	ldr	r2, [r2, #12]
 80059c0:	2101      	movs	r1, #1
 80059c2:	4610      	mov	r0, r2
 80059c4:	4798      	blx	r3
		h->state = stRESET;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7ff fc48 	bl	8005262 <L6474_HelperUnlock>
		return val;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	e098      	b.n	8005b08 <L6474_Initialize+0x282>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_TON_MIN, p->TimeOnMin) ) != 0 )
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	789b      	ldrb	r3, [r3, #2]
 80059da:	461a      	mov	r2, r3
 80059dc:	210f      	movs	r1, #15
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7ff fd4e 	bl	8005480 <L6474_SetParamCommand>
 80059e4:	60f8      	str	r0, [r7, #12]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00e      	beq.n	8005a0a <L6474_Initialize+0x184>
	{
		h->platform.reset(h->pGPO, 1);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a1b      	ldr	r3, [r3, #32]
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	68d2      	ldr	r2, [r2, #12]
 80059f4:	2101      	movs	r1, #1
 80059f6:	4610      	mov	r0, r2
 80059f8:	4798      	blx	r3
		h->state = stRESET;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f7ff fc2e 	bl	8005262 <L6474_HelperUnlock>
		return val;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	e07e      	b.n	8005b08 <L6474_Initialize+0x282>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_T_FAST, p->TFast) ) != 0 )
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	795b      	ldrb	r3, [r3, #5]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	210e      	movs	r1, #14
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7ff fd34 	bl	8005480 <L6474_SetParamCommand>
 8005a18:	60f8      	str	r0, [r7, #12]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00e      	beq.n	8005a3e <L6474_Initialize+0x1b8>
	{
		h->platform.reset(h->pGPO, 1);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	68d2      	ldr	r2, [r2, #12]
 8005a28:	2101      	movs	r1, #1
 8005a2a:	4610      	mov	r0, r2
 8005a2c:	4798      	blx	r3
		h->state = stRESET;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f7ff fc14 	bl	8005262 <L6474_HelperUnlock>
		return val;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	e064      	b.n	8005b08 <L6474_Initialize+0x282>
	}

	if ( ( val = L6474_SetStepMode(h, p->stepMode) ) != 0 )
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	4619      	mov	r1, r3
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f863 	bl	8005b10 <L6474_SetStepMode>
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00e      	beq.n	8005a70 <L6474_Initialize+0x1ea>
	{
		h->platform.reset(h->pGPO, 1);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	68d2      	ldr	r2, [r2, #12]
 8005a5a:	2101      	movs	r1, #1
 8005a5c:	4610      	mov	r0, r2
 8005a5e:	4798      	blx	r3
		h->state = stRESET;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f7ff fbfb 	bl	8005262 <L6474_HelperUnlock>
		return val;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	e04b      	b.n	8005b08 <L6474_Initialize+0x282>
	}

	// enable all alarms
	if ( ( val = L6474_SetParamCommand(h, STEP_REG_ALARM_EN, STEP_MASK_ALARM_EN) ) != 0 )
 8005a70:	22ff      	movs	r2, #255	@ 0xff
 8005a72:	2117      	movs	r1, #23
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7ff fd03 	bl	8005480 <L6474_SetParamCommand>
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00e      	beq.n	8005aa0 <L6474_Initialize+0x21a>
	{
		h->platform.reset(h->pGPO, 1);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	68d2      	ldr	r2, [r2, #12]
 8005a8a:	2101      	movs	r1, #1
 8005a8c:	4610      	mov	r0, r2
 8005a8e:	4798      	blx	r3
		h->state = stRESET;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7ff fbe3 	bl	8005262 <L6474_HelperUnlock>
		return val;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	e033      	b.n	8005b08 <L6474_Initialize+0x282>
	}

	if ( ( val = L6474_DisableCommand(h) ) != 0 )
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f7ff fdee 	bl	8005682 <L6474_DisableCommand>
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00e      	beq.n	8005acc <L6474_Initialize+0x246>
	{
		h->platform.reset(h->pGPO, 1);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	68d2      	ldr	r2, [r2, #12]
 8005ab6:	2101      	movs	r1, #1
 8005ab8:	4610      	mov	r0, r2
 8005aba:	4798      	blx	r3
		h->state = stRESET;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7ff fbcd 	bl	8005262 <L6474_HelperUnlock>
		return val;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	e01d      	b.n	8005b08 <L6474_Initialize+0x282>
	}

	// now it should not fail when reading status register!
	if ( ( val = L6474_GetStatusCommand(h) ) < 0 )
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7ff fbe3 	bl	8005298 <L6474_GetStatusCommand>
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	da0e      	bge.n	8005af8 <L6474_Initialize+0x272>
	{
		h->platform.reset(h->pGPO, 1);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	68d2      	ldr	r2, [r2, #12]
 8005ae2:	2101      	movs	r1, #1
 8005ae4:	4610      	mov	r0, r2
 8005ae6:	4798      	blx	r3
		h->state = stRESET;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7ff fbb7 	bl	8005262 <L6474_HelperUnlock>
		return val;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	e007      	b.n	8005b08 <L6474_Initialize+0x282>
	}

	L6474_GetParamCommand(h, STEP_REG_CONFIG);
 8005af8:	2118      	movs	r1, #24
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7ff fc10 	bl	8005320 <L6474_GetParamCommand>

	L6474_HelperUnlock(h);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f7ff fbae 	bl	8005262 <L6474_HelperUnlock>
	return errcNONE;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <L6474_SetStepMode>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_SetStepMode(L6474_Handle_t h, L6474x_StepMode_t mode)
// --------------------------------------------------------------------------------------------------------------------
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	460b      	mov	r3, r1
 8005b1a:	70fb      	strb	r3, [r7, #3]
	int val = 0;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	60fb      	str	r3, [r7, #12]

	if ( h == 0 )
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d102      	bne.n	8005b2c <L6474_SetStepMode+0x1c>
		return errcNULL_ARG;
 8005b26:	f06f 0301 	mvn.w	r3, #1
 8005b2a:	e032      	b.n	8005b92 <L6474_SetStepMode+0x82>

	if ( mode > smMICRO16 )
 8005b2c:	78fb      	ldrb	r3, [r7, #3]
 8005b2e:	2b04      	cmp	r3, #4
 8005b30:	d902      	bls.n	8005b38 <L6474_SetStepMode+0x28>
		return errcINV_ARG;
 8005b32:	f04f 33ff 	mov.w	r3, #4294967295
 8005b36:	e02c      	b.n	8005b92 <L6474_SetStepMode+0x82>

	// set this bit. is described in the spec.
	mode |= ( 1 << 3 );
 8005b38:	78fb      	ldrb	r3, [r7, #3]
 8005b3a:	f043 0308 	orr.w	r3, r3, #8
 8005b3e:	70fb      	strb	r3, [r7, #3]

	if ( L6474_HelperLock(h) != 0 )
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f7ff fb83 	bl	800524c <L6474_HelperLock>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d002      	beq.n	8005b52 <L6474_SetStepMode+0x42>
		return errcLOCKING;
 8005b4c:	f06f 0304 	mvn.w	r3, #4
 8005b50:	e01f      	b.n	8005b92 <L6474_SetStepMode+0x82>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7ff fba0 	bl	8005298 <L6474_GetStatusCommand>

	if ( h->state == stRESET )
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d105      	bne.n	8005b6c <L6474_SetStepMode+0x5c>
	{
		L6474_HelperUnlock(h);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f7ff fb7e 	bl	8005262 <L6474_HelperUnlock>
		return errcINV_STATE;
 8005b66:	f06f 0302 	mvn.w	r3, #2
 8005b6a:	e012      	b.n	8005b92 <L6474_SetStepMode+0x82>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_STEP_MODE, ( ( mode & STEP_MASK_STEP_MODE ) << STEP_OFFSET_STEP_MODE ) ) ) != 0 )
 8005b6c:	78fb      	ldrb	r3, [r7, #3]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	2116      	movs	r1, #22
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7ff fc84 	bl	8005480 <L6474_SetParamCommand>
 8005b78:	60f8      	str	r0, [r7, #12]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d004      	beq.n	8005b8a <L6474_SetStepMode+0x7a>
	{
		L6474_HelperUnlock(h);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f7ff fb6e 	bl	8005262 <L6474_HelperUnlock>
		return val;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	e003      	b.n	8005b92 <L6474_SetStepMode+0x82>
	}

	L6474_HelperUnlock(h);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7ff fb69 	bl	8005262 <L6474_HelperUnlock>
	return errcNONE;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <L6474_SetPowerOutputs>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_SetPowerOutputs(L6474_Handle_t h, int ena)
// --------------------------------------------------------------------------------------------------------------------
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b084      	sub	sp, #16
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	6039      	str	r1, [r7, #0]
	int val = 0;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	60fb      	str	r3, [r7, #12]

	if ( h == 0 )
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d102      	bne.n	8005bb4 <L6474_SetPowerOutputs+0x1a>
		return errcNULL_ARG;
 8005bae:	f06f 0301 	mvn.w	r3, #1
 8005bb2:	e02e      	b.n	8005c12 <L6474_SetPowerOutputs+0x78>

	if ( L6474_HelperLock(h) != 0 )
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f7ff fb49 	bl	800524c <L6474_HelperLock>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d002      	beq.n	8005bc6 <L6474_SetPowerOutputs+0x2c>
		return errcLOCKING;
 8005bc0:	f06f 0304 	mvn.w	r3, #4
 8005bc4:	e025      	b.n	8005c12 <L6474_SetPowerOutputs+0x78>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7ff fb66 	bl	8005298 <L6474_GetStatusCommand>

	if ( h->state == stRESET )
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d105      	bne.n	8005be0 <L6474_SetPowerOutputs+0x46>
	{
		L6474_HelperUnlock(h);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f7ff fb44 	bl	8005262 <L6474_HelperUnlock>
		return errcINV_STATE;
 8005bda:	f06f 0302 	mvn.w	r3, #2
 8005bde:	e018      	b.n	8005c12 <L6474_SetPowerOutputs+0x78>
	}

	if ( ( val = ( ( ( !!ena ) == 0 ) ? L6474_DisableCommand(h) : L6474_EnableCommand(h) ) ) != 0 )
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d104      	bne.n	8005bf0 <L6474_SetPowerOutputs+0x56>
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7ff fd4b 	bl	8005682 <L6474_DisableCommand>
 8005bec:	4603      	mov	r3, r0
 8005bee:	e003      	b.n	8005bf8 <L6474_SetPowerOutputs+0x5e>
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f7ff fd03 	bl	80055fc <L6474_EnableCommand>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	60fb      	str	r3, [r7, #12]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d004      	beq.n	8005c0a <L6474_SetPowerOutputs+0x70>
	{
		L6474_HelperUnlock(h);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f7ff fb2e 	bl	8005262 <L6474_HelperUnlock>
		return val;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	e003      	b.n	8005c12 <L6474_SetPowerOutputs+0x78>
	}

	L6474_HelperUnlock(h);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7ff fb29 	bl	8005262 <L6474_HelperUnlock>
	return errcNONE;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <L6474_GetAbsolutePosition>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_GetAbsolutePosition(L6474_Handle_t h, int* position)
// --------------------------------------------------------------------------------------------------------------------
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b084      	sub	sp, #16
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
 8005c22:	6039      	str	r1, [r7, #0]
	int val = 0;
 8005c24:	2300      	movs	r3, #0
 8005c26:	60fb      	str	r3, [r7, #12]

	if ( h == 0 || position == 0 )
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d002      	beq.n	8005c34 <L6474_GetAbsolutePosition+0x1a>
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d102      	bne.n	8005c3a <L6474_GetAbsolutePosition+0x20>
		return errcNULL_ARG;
 8005c34:	f06f 0301 	mvn.w	r3, #1
 8005c38:	e034      	b.n	8005ca4 <L6474_GetAbsolutePosition+0x8a>

	if ( L6474_HelperLock(h) != 0 )
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7ff fb06 	bl	800524c <L6474_HelperLock>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d002      	beq.n	8005c4c <L6474_GetAbsolutePosition+0x32>
		return errcLOCKING;
 8005c46:	f06f 0304 	mvn.w	r3, #4
 8005c4a:	e02b      	b.n	8005ca4 <L6474_GetAbsolutePosition+0x8a>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f7ff fb23 	bl	8005298 <L6474_GetStatusCommand>

	if ( h->state == stRESET )
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d105      	bne.n	8005c66 <L6474_GetAbsolutePosition+0x4c>
	{
		L6474_HelperUnlock(h);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f7ff fb01 	bl	8005262 <L6474_HelperUnlock>
		return errcINV_STATE;
 8005c60:	f06f 0302 	mvn.w	r3, #2
 8005c64:	e01e      	b.n	8005ca4 <L6474_GetAbsolutePosition+0x8a>
	}

	if ( ( val = L6474_GetParamCommand(h, STEP_REG_ABS_POS) ) < 0 )
 8005c66:	2101      	movs	r1, #1
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f7ff fb59 	bl	8005320 <L6474_GetParamCommand>
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	da04      	bge.n	8005c80 <L6474_GetAbsolutePosition+0x66>
	{
		L6474_HelperUnlock(h);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f7ff faf3 	bl	8005262 <L6474_HelperUnlock>
		return val;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	e011      	b.n	8005ca4 <L6474_GetAbsolutePosition+0x8a>
	}

	if (val & HIGH_POS_BIT)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d005      	beq.n	8005c96 <L6474_GetAbsolutePosition+0x7c>
		val = -(((~val) + 1) & HIGH_POS_MASK);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	425b      	negs	r3, r3
 8005c8e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005c92:	425b      	negs	r3, r3
 8005c94:	60fb      	str	r3, [r7, #12]
	*position = val;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	601a      	str	r2, [r3, #0]


	L6474_HelperUnlock(h);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f7ff fae0 	bl	8005262 <L6474_HelperUnlock>
	return errcNONE;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <L6474_SetAbsolutePosition>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_SetAbsolutePosition(L6474_Handle_t h, int position)
// --------------------------------------------------------------------------------------------------------------------
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
	int val = 0;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	60fb      	str	r3, [r7, #12]

	if ( h == 0 )
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d102      	bne.n	8005cc6 <L6474_SetAbsolutePosition+0x1a>
		return errcNULL_ARG;
 8005cc0:	f06f 0301 	mvn.w	r3, #1
 8005cc4:	e027      	b.n	8005d16 <L6474_SetAbsolutePosition+0x6a>

	if ( L6474_HelperLock(h) != 0 )
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f7ff fac0 	bl	800524c <L6474_HelperLock>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d002      	beq.n	8005cd8 <L6474_SetAbsolutePosition+0x2c>
		return errcLOCKING;
 8005cd2:	f06f 0304 	mvn.w	r3, #4
 8005cd6:	e01e      	b.n	8005d16 <L6474_SetAbsolutePosition+0x6a>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f7ff fadd 	bl	8005298 <L6474_GetStatusCommand>

	if ( h->state == stRESET )
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d105      	bne.n	8005cf2 <L6474_SetAbsolutePosition+0x46>
	{
		L6474_HelperUnlock(h);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7ff fabb 	bl	8005262 <L6474_HelperUnlock>
		return errcINV_STATE;
 8005cec:	f06f 0302 	mvn.w	r3, #2
 8005cf0:	e011      	b.n	8005d16 <L6474_SetAbsolutePosition+0x6a>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_ABS_POS, position) ) != 0 )
 8005cf2:	683a      	ldr	r2, [r7, #0]
 8005cf4:	2101      	movs	r1, #1
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7ff fbc2 	bl	8005480 <L6474_SetParamCommand>
 8005cfc:	60f8      	str	r0, [r7, #12]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d004      	beq.n	8005d0e <L6474_SetAbsolutePosition+0x62>
	{
		L6474_HelperUnlock(h);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7ff faac 	bl	8005262 <L6474_HelperUnlock>
		return val;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	e003      	b.n	8005d16 <L6474_SetAbsolutePosition+0x6a>
	}

	L6474_HelperUnlock(h);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7ff faa7 	bl	8005262 <L6474_HelperUnlock>
	return errcNONE;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <L6474_SetProperty>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_SetProperty(L6474_Handle_t h, L6474_Property_t prop, int value)
// -------------------------------------------------------------------------------------------------------------------
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b086      	sub	sp, #24
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	60f8      	str	r0, [r7, #12]
 8005d26:	460b      	mov	r3, r1
 8005d28:	607a      	str	r2, [r7, #4]
 8005d2a:	72fb      	strb	r3, [r7, #11]
	int val = 0;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	617b      	str	r3, [r7, #20]

	if ( h == 0 )
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d102      	bne.n	8005d3c <L6474_SetProperty+0x1e>
		return errcNULL_ARG;
 8005d36:	f06f 0301 	mvn.w	r3, #1
 8005d3a:	e028      	b.n	8005d8e <L6474_SetProperty+0x70>

	if ( L6474_HelperLock(h) != 0 )
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f7ff fa85 	bl	800524c <L6474_HelperLock>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d002      	beq.n	8005d4e <L6474_SetProperty+0x30>
		return errcLOCKING;
 8005d48:	f06f 0304 	mvn.w	r3, #4
 8005d4c:	e01f      	b.n	8005d8e <L6474_SetProperty+0x70>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f7ff faa2 	bl	8005298 <L6474_GetStatusCommand>

	if ( h->state == stRESET )
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d105      	bne.n	8005d68 <L6474_SetProperty+0x4a>
	{
		L6474_HelperUnlock(h);
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f7ff fa80 	bl	8005262 <L6474_HelperUnlock>
		return errcINV_STATE;
 8005d62:	f06f 0302 	mvn.w	r3, #2
 8005d66:	e012      	b.n	8005d8e <L6474_SetProperty+0x70>
	}

	if ( ( val = L6474_SetParamCommand(h, prop, value) ) != 0 )
 8005d68:	7afb      	ldrb	r3, [r7, #11]
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f7ff fb86 	bl	8005480 <L6474_SetParamCommand>
 8005d74:	6178      	str	r0, [r7, #20]
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d004      	beq.n	8005d86 <L6474_SetProperty+0x68>
	{
		L6474_HelperUnlock(h);
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f7ff fa70 	bl	8005262 <L6474_HelperUnlock>
		return val;
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	e003      	b.n	8005d8e <L6474_SetProperty+0x70>
	}

	L6474_HelperUnlock(h);
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f7ff fa6b 	bl	8005262 <L6474_HelperUnlock>
	return errcNONE;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3718      	adds	r7, #24
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <L6474_GetProperty>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_GetProperty(L6474_Handle_t h, L6474_Property_t prop, int* value)
// --------------------------------------------------------------------------------------------------------------------
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b086      	sub	sp, #24
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	460b      	mov	r3, r1
 8005da0:	607a      	str	r2, [r7, #4]
 8005da2:	72fb      	strb	r3, [r7, #11]
	int val = 0;
 8005da4:	2300      	movs	r3, #0
 8005da6:	617b      	str	r3, [r7, #20]

	if ( h == 0 )
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d102      	bne.n	8005db4 <L6474_GetProperty+0x1e>
		return errcNULL_ARG;
 8005dae:	f06f 0301 	mvn.w	r3, #1
 8005db2:	e02a      	b.n	8005e0a <L6474_GetProperty+0x74>

	if ( L6474_HelperLock(h) != 0 )
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f7ff fa49 	bl	800524c <L6474_HelperLock>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d002      	beq.n	8005dc6 <L6474_GetProperty+0x30>
		return errcLOCKING;
 8005dc0:	f06f 0304 	mvn.w	r3, #4
 8005dc4:	e021      	b.n	8005e0a <L6474_GetProperty+0x74>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f7ff fa66 	bl	8005298 <L6474_GetStatusCommand>

	if ( h->state == stRESET )
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d105      	bne.n	8005de0 <L6474_GetProperty+0x4a>
	{
		L6474_HelperUnlock(h);
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f7ff fa44 	bl	8005262 <L6474_HelperUnlock>
		return errcINV_STATE;
 8005dda:	f06f 0302 	mvn.w	r3, #2
 8005dde:	e014      	b.n	8005e0a <L6474_GetProperty+0x74>
	}

	if ( ( val = L6474_GetParamCommand(h, prop) ) < 0 )
 8005de0:	7afb      	ldrb	r3, [r7, #11]
 8005de2:	4619      	mov	r1, r3
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f7ff fa9b 	bl	8005320 <L6474_GetParamCommand>
 8005dea:	6178      	str	r0, [r7, #20]
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	da04      	bge.n	8005dfc <L6474_GetProperty+0x66>
	{
		L6474_HelperUnlock(h);
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f7ff fa35 	bl	8005262 <L6474_HelperUnlock>
		return val;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	e006      	b.n	8005e0a <L6474_GetProperty+0x74>
	}

	*value = val;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	601a      	str	r2, [r3, #0]
	L6474_HelperUnlock(h);
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f7ff fa2d 	bl	8005262 <L6474_HelperUnlock>
	return errcNONE;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3718      	adds	r7, #24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <L6474_GetStatus>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_GetStatus(L6474_Handle_t h, L6474_Status_t* status)
// --------------------------------------------------------------------------------------------------------------------
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b084      	sub	sp, #16
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
 8005e1a:	6039      	str	r1, [r7, #0]
	int val = 0;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	60fb      	str	r3, [r7, #12]

	if ( h == 0 )
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d102      	bne.n	8005e2c <L6474_GetStatus+0x1a>
		return errcNULL_ARG;
 8005e26:	f06f 0301 	mvn.w	r3, #1
 8005e2a:	e07b      	b.n	8005f24 <L6474_GetStatus+0x112>

	if (status == 0 )
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d102      	bne.n	8005e38 <L6474_GetStatus+0x26>
		return errcNULL_ARG;
 8005e32:	f06f 0301 	mvn.w	r3, #1
 8005e36:	e075      	b.n	8005f24 <L6474_GetStatus+0x112>

	if ( L6474_HelperLock(h) != 0 )
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f7ff fa07 	bl	800524c <L6474_HelperLock>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d002      	beq.n	8005e4a <L6474_GetStatus+0x38>
		return errcLOCKING;
 8005e44:	f06f 0304 	mvn.w	r3, #4
 8005e48:	e06c      	b.n	8005f24 <L6474_GetStatus+0x112>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7ff fa24 	bl	8005298 <L6474_GetStatusCommand>

	if ( ( val = ( L6474_GetStatusCommand(h) ) ) < 0 )
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f7ff fa21 	bl	8005298 <L6474_GetStatusCommand>
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	da04      	bge.n	8005e68 <L6474_GetStatus+0x56>
	{
		L6474_HelperUnlock(h);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7ff f9ff 	bl	8005262 <L6474_HelperUnlock>
		return val;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	e05d      	b.n	8005f24 <L6474_GetStatus+0x112>
	}

	if ( h->state == stRESET )
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d105      	bne.n	8005e7c <L6474_GetStatus+0x6a>
	{
		L6474_HelperUnlock(h);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7ff f9f6 	bl	8005262 <L6474_HelperUnlock>
		return errcINV_STATE;
 8005e76:	f06f 0302 	mvn.w	r3, #2
 8005e7a:	e053      	b.n	8005f24 <L6474_GetStatus+0x112>
	}

	status->HIGHZ       = (val & STATUS_HIGHZ_MASK)       ? 1 : 0;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	701a      	strb	r2, [r3, #0]
	status->DIR         = (val & STATUS_DIRECTION_MASK)   ? 1 : 0;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	111b      	asrs	r3, r3, #4
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	705a      	strb	r2, [r3, #1]
	status->NOTPERF_CMD = (val & STATUS_NOTPERF_CMD_MASK) ? 1 : 0;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	11db      	asrs	r3, r3, #7
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	709a      	strb	r2, [r3, #2]
	status->WRONG_CMD   = (val & STATUS_WRONG_CMD_MASK)   ? 1 : 0;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	121b      	asrs	r3, r3, #8
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	b2da      	uxtb	r2, r3
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	70da      	strb	r2, [r3, #3]
	status->UVLO        = (val & STATUS_UNDERVOLT_MASK)   ? 0 : 1;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	bf0c      	ite	eq
 8005ec4:	2301      	moveq	r3, #1
 8005ec6:	2300      	movne	r3, #0
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	461a      	mov	r2, r3
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	711a      	strb	r2, [r3, #4]
	status->TH_WARN     = (val & STATUS_THR_WARN_MASK)    ? 0 : 1;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	bf0c      	ite	eq
 8005eda:	2301      	moveq	r3, #1
 8005edc:	2300      	movne	r3, #0
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	715a      	strb	r2, [r3, #5]
	status->TH_SD       = (val & STATUS_THR_SHORTD_MASK)  ? 0 : 1;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	bf0c      	ite	eq
 8005ef0:	2301      	moveq	r3, #1
 8005ef2:	2300      	movne	r3, #0
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	719a      	strb	r2, [r3, #6]
	status->OCD         = (val & STATUS_OCD_MASK)         ? 0 : 1;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	bf0c      	ite	eq
 8005f06:	2301      	moveq	r3, #1
 8005f08:	2300      	movne	r3, #0
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	71da      	strb	r2, [r3, #7]
	status->ONGOING     = h->pending;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	721a      	strb	r2, [r3, #8]

	L6474_HelperUnlock(h);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f7ff f9a0 	bl	8005262 <L6474_HelperUnlock>
	return errcNONE;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <L6474_StepIncremental>:
}

// --------------------------------------------------------------------------------------------------------------------
int L6474_StepIncremental(L6474_Handle_t h, int steps )
// --------------------------------------------------------------------------------------------------------------------
{
 8005f2c:	b590      	push	{r4, r7, lr}
 8005f2e:	b087      	sub	sp, #28
 8005f30:	af02      	add	r7, sp, #8
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
	if ( h == 0 )
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d102      	bne.n	8005f42 <L6474_StepIncremental+0x16>
		return errcNULL_ARG;
 8005f3c:	f06f 0301 	mvn.w	r3, #1
 8005f40:	e050      	b.n	8005fe4 <L6474_StepIncremental+0xb8>

	if ( steps == 0 )
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d102      	bne.n	8005f4e <L6474_StepIncremental+0x22>
		return errcNULL_ARG;
 8005f48:	f06f 0301 	mvn.w	r3, #1
 8005f4c:	e04a      	b.n	8005fe4 <L6474_StepIncremental+0xb8>

	if ( L6474_HelperLock(h) != 0 )
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f7ff f97c 	bl	800524c <L6474_HelperLock>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d002      	beq.n	8005f60 <L6474_StepIncremental+0x34>
		return errcLOCKING;
 8005f5a:	f06f 0304 	mvn.w	r3, #4
 8005f5e:	e041      	b.n	8005fe4 <L6474_StepIncremental+0xb8>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f7ff f999 	bl	8005298 <L6474_GetStatusCommand>

	if ( h->state != stENABLED )
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d005      	beq.n	8005f7a <L6474_StepIncremental+0x4e>
	{
		L6474_HelperUnlock(h);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7ff f977 	bl	8005262 <L6474_HelperUnlock>
		return errcINV_STATE;
 8005f74:	f06f 0302 	mvn.w	r3, #2
 8005f78:	e034      	b.n	8005fe4 <L6474_StepIncremental+0xb8>
	}

	if ( h->pending != 0 )
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d005      	beq.n	8005f8e <L6474_StepIncremental+0x62>
	{
		L6474_HelperUnlock(h);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7ff f96d 	bl	8005262 <L6474_HelperUnlock>
		return errcPENDING;
 8005f88:	f06f 0306 	mvn.w	r3, #6
 8005f8c:	e02a      	b.n	8005fe4 <L6474_StepIncremental+0xb8>
	}

	int ret = 0;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60fb      	str	r3, [r7, #12]
#if defined(LIBL6474_STEP_ASYNC) && ( LIBL6474_STEP_ASYNC == 1 )
	h->pending = 1;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	605a      	str	r2, [r3, #4]
	if ( ( ret = h->platform.stepAsync(h->pPWM, steps >= 0, ( ( steps < 0 ) ? -steps : steps ), L6474_HelperReleaseStep, h) ) != 0 )
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6918      	ldr	r0, [r3, #16]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	43db      	mvns	r3, r3
 8005fa4:	0fdb      	lsrs	r3, r3, #31
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	4619      	mov	r1, r3
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	bfb8      	it	lt
 8005fb0:	425b      	neglt	r3, r3
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	9300      	str	r3, [sp, #0]
 8005fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8005fec <L6474_StepIncremental+0xc0>)
 8005fba:	47a0      	blx	r4
 8005fbc:	60f8      	str	r0, [r7, #12]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d002      	beq.n	8005fca <L6474_StepIncremental+0x9e>
	{
		h->pending = 0;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	605a      	str	r2, [r3, #4]
	(void)L6474_HelperReleaseStep;
	ret = h->platform.step(h->pPWM,  steps >= 0, ( ( steps < 0 ) ? -steps : steps ) );
	h->pending = 0;
#endif

	if ( ret != 0 )
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d005      	beq.n	8005fdc <L6474_StepIncremental+0xb0>
	{
		L6474_HelperUnlock(h);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f7ff f946 	bl	8005262 <L6474_HelperUnlock>
		return errcINTERNAL;
 8005fd6:	f06f 0303 	mvn.w	r3, #3
 8005fda:	e003      	b.n	8005fe4 <L6474_StepIncremental+0xb8>
	}

	L6474_HelperUnlock(h);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7ff f940 	bl	8005262 <L6474_HelperUnlock>
	return errcNONE;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd90      	pop	{r4, r7, pc}
 8005fec:	08005277 	.word	0x08005277

08005ff0 <vApplicationMallocFailedHook>:
void InitTask();


extern void initialise_stdlib_abstraction(void);
void vApplicationMallocFailedHook(void)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8005ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffa:	b672      	cpsid	i
 8005ffc:	f383 8811 	msr	BASEPRI, r3
 8006000:	f3bf 8f6f 	isb	sy
 8006004:	f3bf 8f4f 	dsb	sy
 8006008:	b662      	cpsie	i
 800600a:	607b      	str	r3, [r7, #4]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800600c:	bf00      	nop
  taskDISABLE_INTERRUPTS();
  __asm volatile("bkpt #0");
 800600e:	be00      	bkpt	0x0000
  for (;;)
 8006010:	bf00      	nop
 8006012:	e7fd      	b.n	8006010 <vApplicationMallocFailedHook+0x20>

08006014 <vApplicationStackOverflowHook>:
    ;
  }
}
/*-----------------------------------------------------------*/
void vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
    __asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006022:	b672      	cpsid	i
 8006024:	f383 8811 	msr	BASEPRI, r3
 8006028:	f3bf 8f6f 	isb	sy
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	b662      	cpsie	i
 8006032:	60fb      	str	r3, [r7, #12]
}
 8006034:	bf00      	nop
  (void)pcTaskName;
  (void)pxTask;

  taskDISABLE_INTERRUPTS();
  __asm volatile("bkpt #0");
 8006036:	be00      	bkpt	0x0000
  for (;;)
 8006038:	bf00      	nop
 800603a:	e7fd      	b.n	8006038 <vApplicationStackOverflowHook+0x24>

0800603c <InitTask>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void InitTask()
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af02      	add	r7, sp, #8


  consoleHandle = CONSOLE_CreateInstance(4 * configMINIMAL_STACK_SIZE, configMAX_PRIORITIES - 5);
 8006042:	2102      	movs	r1, #2
 8006044:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8006048:	f7fc fee8 	bl	8002e1c <CONSOLE_CreateInstance>
 800604c:	4603      	mov	r3, r0
 800604e:	4a0d      	ldr	r2, [pc, #52]	@ (8006084 <InitTask+0x48>)
 8006050:	6013      	str	r3, [r2, #0]

  CONSOLE_RegisterCommand(consoleHandle, "capability", "Shows what the program is capable of", CapabilityFunc, NULL);
 8006052:	4b0c      	ldr	r3, [pc, #48]	@ (8006084 <InitTask+0x48>)
 8006054:	6818      	ldr	r0, [r3, #0]
 8006056:	2300      	movs	r3, #0
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	4b0b      	ldr	r3, [pc, #44]	@ (8006088 <InitTask+0x4c>)
 800605c:	4a0b      	ldr	r2, [pc, #44]	@ (800608c <InitTask+0x50>)
 800605e:	490c      	ldr	r1, [pc, #48]	@ (8006090 <InitTask+0x54>)
 8006060:	f7fc ff58 	bl	8002f14 <CONSOLE_RegisterCommand>
  
  InitStepper(consoleHandle, &hspi1, &htim1, &htim4);
 8006064:	4b07      	ldr	r3, [pc, #28]	@ (8006084 <InitTask+0x48>)
 8006066:	6818      	ldr	r0, [r3, #0]
 8006068:	4b0a      	ldr	r3, [pc, #40]	@ (8006094 <InitTask+0x58>)
 800606a:	4a0b      	ldr	r2, [pc, #44]	@ (8006098 <InitTask+0x5c>)
 800606c:	490b      	ldr	r1, [pc, #44]	@ (800609c <InitTask+0x60>)
 800606e:	f7fe fc7d 	bl	800496c <InitStepper>
  InitSpindle(consoleHandle, &htim2);
 8006072:	4b04      	ldr	r3, [pc, #16]	@ (8006084 <InitTask+0x48>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	490a      	ldr	r1, [pc, #40]	@ (80060a0 <InitTask+0x64>)
 8006078:	4618      	mov	r0, r3
 800607a:	f7fd f9e3 	bl	8003444 <InitSpindle>


}
 800607e:	bf00      	nop
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	200004d4 	.word	0x200004d4
 8006088:	080060a5 	.word	0x080060a5
 800608c:	0801875c 	.word	0x0801875c
 8006090:	08018784 	.word	0x08018784
 8006094:	20000400 	.word	0x20000400
 8006098:	20000368 	.word	0x20000368
 800609c:	20000304 	.word	0x20000304
 80060a0:	200003b4 	.word	0x200003b4

080060a4 <CapabilityFunc>:

// -------------------------------------------------------------------------------------------------------------------
static int CapabilityFunc(int argc, char **argv, void *ctx)
// --------------------------------------------------------------------------------------------------------------------
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b09c      	sub	sp, #112	@ 0x70
 80060a8:	af18      	add	r7, sp, #96	@ 0x60
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
  (void)argc;
  (void)argv;
  (void)ctx;
  printf("%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\r\nOK",
 80060b0:	2301      	movs	r3, #1
 80060b2:	9317      	str	r3, [sp, #92]	@ 0x5c
 80060b4:	2301      	movs	r3, #1
 80060b6:	9316      	str	r3, [sp, #88]	@ 0x58
 80060b8:	2300      	movs	r3, #0
 80060ba:	9315      	str	r3, [sp, #84]	@ 0x54
 80060bc:	2300      	movs	r3, #0
 80060be:	9314      	str	r3, [sp, #80]	@ 0x50
 80060c0:	2300      	movs	r3, #0
 80060c2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80060c4:	2301      	movs	r3, #1
 80060c6:	9312      	str	r3, [sp, #72]	@ 0x48
 80060c8:	2301      	movs	r3, #1
 80060ca:	9311      	str	r3, [sp, #68]	@ 0x44
 80060cc:	2301      	movs	r3, #1
 80060ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80060d0:	2301      	movs	r3, #1
 80060d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80060d4:	2301      	movs	r3, #1
 80060d6:	930e      	str	r3, [sp, #56]	@ 0x38
 80060d8:	2301      	movs	r3, #1
 80060da:	930d      	str	r3, [sp, #52]	@ 0x34
 80060dc:	2301      	movs	r3, #1
 80060de:	930c      	str	r3, [sp, #48]	@ 0x30
 80060e0:	2301      	movs	r3, #1
 80060e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060e4:	2301      	movs	r3, #1
 80060e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80060e8:	2300      	movs	r3, #0
 80060ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80060ec:	2301      	movs	r3, #1
 80060ee:	9308      	str	r3, [sp, #32]
 80060f0:	2301      	movs	r3, #1
 80060f2:	9307      	str	r3, [sp, #28]
 80060f4:	2301      	movs	r3, #1
 80060f6:	9306      	str	r3, [sp, #24]
 80060f8:	2301      	movs	r3, #1
 80060fa:	9305      	str	r3, [sp, #20]
 80060fc:	2301      	movs	r3, #1
 80060fe:	9304      	str	r3, [sp, #16]
 8006100:	2301      	movs	r3, #1
 8006102:	9303      	str	r3, [sp, #12]
 8006104:	2301      	movs	r3, #1
 8006106:	9302      	str	r3, [sp, #8]
 8006108:	2301      	movs	r3, #1
 800610a:	9301      	str	r3, [sp, #4]
 800610c:	2301      	movs	r3, #1
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	2301      	movs	r3, #1
 8006112:	2201      	movs	r2, #1
 8006114:	2101      	movs	r1, #1
 8006116:	4804      	ldr	r0, [pc, #16]	@ (8006128 <CapabilityFunc+0x84>)
 8006118:	f00e f9ac 	bl	8014474 <iprintf>
         0, // has stepper config posmin
         0, // has stepper config posref
         1, // has stepper config stepsperturn
         1  // has stepper cancel
  );
  return 0;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	08018790 	.word	0x08018790

0800612c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/  MPU_Config();
 8006130:	f000 fc3a 	bl	80069a8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006134:	f001 f96d 	bl	8007412 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006138:	f000 f818 	bl	800616c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800613c:	f000 fab0 	bl	80066a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8006140:	f000 f87a 	bl	8006238 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8006144:	f000 fa7c 	bl	8006640 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8006148:	f000 f96a 	bl	8006420 <MX_TIM2_Init>
  MX_TIM1_Init();
 800614c:	f000 f8b2 	bl	80062b4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8006150:	f000 f9e8 	bl	8006524 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */


  printf("System init start\r\n");
 8006154:	4804      	ldr	r0, [pc, #16]	@ (8006168 <main+0x3c>)
 8006156:	f00e f9fd 	bl	8014554 <puts>

  //(void)CapabilityFunc;

  InitTask();
 800615a:	f7ff ff6f 	bl	800603c <InitTask>
  vTaskStartScheduler();
 800615e:	f00a f915 	bl	801038c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006162:	bf00      	nop
 8006164:	e7fd      	b.n	8006162 <main+0x36>
 8006166:	bf00      	nop
 8006168:	080187e8 	.word	0x080187e8

0800616c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b094      	sub	sp, #80	@ 0x50
 8006170:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006172:	f107 0320 	add.w	r3, r7, #32
 8006176:	2230      	movs	r2, #48	@ 0x30
 8006178:	2100      	movs	r1, #0
 800617a:	4618      	mov	r0, r3
 800617c:	f00e fbd0 	bl	8014920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006180:	f107 030c 	add.w	r3, r7, #12
 8006184:	2200      	movs	r2, #0
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	605a      	str	r2, [r3, #4]
 800618a:	609a      	str	r2, [r3, #8]
 800618c:	60da      	str	r2, [r3, #12]
 800618e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006190:	4b27      	ldr	r3, [pc, #156]	@ (8006230 <SystemClock_Config+0xc4>)
 8006192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006194:	4a26      	ldr	r2, [pc, #152]	@ (8006230 <SystemClock_Config+0xc4>)
 8006196:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800619a:	6413      	str	r3, [r2, #64]	@ 0x40
 800619c:	4b24      	ldr	r3, [pc, #144]	@ (8006230 <SystemClock_Config+0xc4>)
 800619e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061a4:	60bb      	str	r3, [r7, #8]
 80061a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80061a8:	4b22      	ldr	r3, [pc, #136]	@ (8006234 <SystemClock_Config+0xc8>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a21      	ldr	r2, [pc, #132]	@ (8006234 <SystemClock_Config+0xc8>)
 80061ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80061b2:	6013      	str	r3, [r2, #0]
 80061b4:	4b1f      	ldr	r3, [pc, #124]	@ (8006234 <SystemClock_Config+0xc8>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80061bc:	607b      	str	r3, [r7, #4]
 80061be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80061c0:	2302      	movs	r3, #2
 80061c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80061c4:	2301      	movs	r3, #1
 80061c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80061c8:	2310      	movs	r3, #16
 80061ca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80061cc:	2302      	movs	r3, #2
 80061ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80061d0:	2300      	movs	r3, #0
 80061d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80061d4:	2308      	movs	r3, #8
 80061d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80061d8:	23b4      	movs	r3, #180	@ 0xb4
 80061da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80061dc:	2302      	movs	r3, #2
 80061de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80061e0:	2302      	movs	r3, #2
 80061e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80061e4:	f107 0320 	add.w	r3, r7, #32
 80061e8:	4618      	mov	r0, r3
 80061ea:	f002 f83f 	bl	800826c <HAL_RCC_OscConfig>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d001      	beq.n	80061f8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80061f4:	f000 fc17 	bl	8006a26 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80061f8:	230f      	movs	r3, #15
 80061fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80061fc:	2302      	movs	r3, #2
 80061fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006200:	2300      	movs	r3, #0
 8006202:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006204:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8006208:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800620a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800620e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006210:	f107 030c 	add.w	r3, r7, #12
 8006214:	2105      	movs	r1, #5
 8006216:	4618      	mov	r0, r3
 8006218:	f002 fb82 	bl	8008920 <HAL_RCC_ClockConfig>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d001      	beq.n	8006226 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8006222:	f000 fc00 	bl	8006a26 <Error_Handler>
  }
}
 8006226:	bf00      	nop
 8006228:	3750      	adds	r7, #80	@ 0x50
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	40023800 	.word	0x40023800
 8006234:	40007000 	.word	0x40007000

08006238 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800623c:	4b1b      	ldr	r3, [pc, #108]	@ (80062ac <MX_SPI1_Init+0x74>)
 800623e:	4a1c      	ldr	r2, [pc, #112]	@ (80062b0 <MX_SPI1_Init+0x78>)
 8006240:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006242:	4b1a      	ldr	r3, [pc, #104]	@ (80062ac <MX_SPI1_Init+0x74>)
 8006244:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006248:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800624a:	4b18      	ldr	r3, [pc, #96]	@ (80062ac <MX_SPI1_Init+0x74>)
 800624c:	2200      	movs	r2, #0
 800624e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006250:	4b16      	ldr	r3, [pc, #88]	@ (80062ac <MX_SPI1_Init+0x74>)
 8006252:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8006256:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006258:	4b14      	ldr	r3, [pc, #80]	@ (80062ac <MX_SPI1_Init+0x74>)
 800625a:	2202      	movs	r2, #2
 800625c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800625e:	4b13      	ldr	r3, [pc, #76]	@ (80062ac <MX_SPI1_Init+0x74>)
 8006260:	2201      	movs	r2, #1
 8006262:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006264:	4b11      	ldr	r3, [pc, #68]	@ (80062ac <MX_SPI1_Init+0x74>)
 8006266:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800626a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800626c:	4b0f      	ldr	r3, [pc, #60]	@ (80062ac <MX_SPI1_Init+0x74>)
 800626e:	2220      	movs	r2, #32
 8006270:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006272:	4b0e      	ldr	r3, [pc, #56]	@ (80062ac <MX_SPI1_Init+0x74>)
 8006274:	2200      	movs	r2, #0
 8006276:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006278:	4b0c      	ldr	r3, [pc, #48]	@ (80062ac <MX_SPI1_Init+0x74>)
 800627a:	2200      	movs	r2, #0
 800627c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800627e:	4b0b      	ldr	r3, [pc, #44]	@ (80062ac <MX_SPI1_Init+0x74>)
 8006280:	2200      	movs	r2, #0
 8006282:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006284:	4b09      	ldr	r3, [pc, #36]	@ (80062ac <MX_SPI1_Init+0x74>)
 8006286:	2207      	movs	r2, #7
 8006288:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800628a:	4b08      	ldr	r3, [pc, #32]	@ (80062ac <MX_SPI1_Init+0x74>)
 800628c:	2200      	movs	r2, #0
 800628e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8006290:	4b06      	ldr	r3, [pc, #24]	@ (80062ac <MX_SPI1_Init+0x74>)
 8006292:	2200      	movs	r2, #0
 8006294:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006296:	4805      	ldr	r0, [pc, #20]	@ (80062ac <MX_SPI1_Init+0x74>)
 8006298:	f003 fdc8 	bl	8009e2c <HAL_SPI_Init>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80062a2:	f000 fbc0 	bl	8006a26 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80062a6:	bf00      	nop
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	20000304 	.word	0x20000304
 80062b0:	40013000 	.word	0x40013000

080062b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b09a      	sub	sp, #104	@ 0x68
 80062b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80062ba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80062be:	2200      	movs	r2, #0
 80062c0:	601a      	str	r2, [r3, #0]
 80062c2:	605a      	str	r2, [r3, #4]
 80062c4:	609a      	str	r2, [r3, #8]
 80062c6:	60da      	str	r2, [r3, #12]
 80062c8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80062ca:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80062ce:	2200      	movs	r2, #0
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	605a      	str	r2, [r3, #4]
 80062d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80062d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80062da:	2200      	movs	r2, #0
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	605a      	str	r2, [r3, #4]
 80062e0:	609a      	str	r2, [r3, #8]
 80062e2:	60da      	str	r2, [r3, #12]
 80062e4:	611a      	str	r2, [r3, #16]
 80062e6:	615a      	str	r2, [r3, #20]
 80062e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80062ea:	463b      	mov	r3, r7
 80062ec:	222c      	movs	r2, #44	@ 0x2c
 80062ee:	2100      	movs	r1, #0
 80062f0:	4618      	mov	r0, r3
 80062f2:	f00e fb15 	bl	8014920 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80062f6:	4b48      	ldr	r3, [pc, #288]	@ (8006418 <MX_TIM1_Init+0x164>)
 80062f8:	4a48      	ldr	r2, [pc, #288]	@ (800641c <MX_TIM1_Init+0x168>)
 80062fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80062fc:	4b46      	ldr	r3, [pc, #280]	@ (8006418 <MX_TIM1_Init+0x164>)
 80062fe:	2200      	movs	r2, #0
 8006300:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006302:	4b45      	ldr	r3, [pc, #276]	@ (8006418 <MX_TIM1_Init+0x164>)
 8006304:	2200      	movs	r2, #0
 8006306:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8006308:	4b43      	ldr	r3, [pc, #268]	@ (8006418 <MX_TIM1_Init+0x164>)
 800630a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800630e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006310:	4b41      	ldr	r3, [pc, #260]	@ (8006418 <MX_TIM1_Init+0x164>)
 8006312:	2200      	movs	r2, #0
 8006314:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006316:	4b40      	ldr	r3, [pc, #256]	@ (8006418 <MX_TIM1_Init+0x164>)
 8006318:	2200      	movs	r2, #0
 800631a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800631c:	4b3e      	ldr	r3, [pc, #248]	@ (8006418 <MX_TIM1_Init+0x164>)
 800631e:	2200      	movs	r2, #0
 8006320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006322:	483d      	ldr	r0, [pc, #244]	@ (8006418 <MX_TIM1_Init+0x164>)
 8006324:	f004 fc64 	bl	800abf0 <HAL_TIM_Base_Init>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800632e:	f000 fb7a 	bl	8006a26 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8006332:	4839      	ldr	r0, [pc, #228]	@ (8006418 <MX_TIM1_Init+0x164>)
 8006334:	f004 fd7c 	bl	800ae30 <HAL_TIM_OC_Init>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800633e:	f000 fb72 	bl	8006a26 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8006342:	2108      	movs	r1, #8
 8006344:	4834      	ldr	r0, [pc, #208]	@ (8006418 <MX_TIM1_Init+0x164>)
 8006346:	f005 f991 	bl	800b66c <HAL_TIM_OnePulse_Init>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d001      	beq.n	8006354 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8006350:	f000 fb69 	bl	8006a26 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8006354:	2307      	movs	r3, #7
 8006356:	657b      	str	r3, [r7, #84]	@ 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8006358:	2330      	movs	r3, #48	@ 0x30
 800635a:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800635c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006360:	4619      	mov	r1, r3
 8006362:	482d      	ldr	r0, [pc, #180]	@ (8006418 <MX_TIM1_Init+0x164>)
 8006364:	f006 fcb8 	bl	800ccd8 <HAL_TIM_SlaveConfigSynchro>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800636e:	f000 fb5a 	bl	8006a26 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8006372:	2310      	movs	r3, #16
 8006374:	64bb      	str	r3, [r7, #72]	@ 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_ENABLE;
 8006376:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800637a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800637c:	2300      	movs	r3, #0
 800637e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006380:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8006384:	4619      	mov	r1, r3
 8006386:	4824      	ldr	r0, [pc, #144]	@ (8006418 <MX_TIM1_Init+0x164>)
 8006388:	f007 fcae 	bl	800dce8 <HAL_TIMEx_MasterConfigSynchronization>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 8006392:	f000 fb48 	bl	8006a26 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8006396:	2300      	movs	r3, #0
 8006398:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 800639a:	2300      	movs	r3, #0
 800639c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800639e:	2300      	movs	r3, #0
 80063a0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80063a2:	2300      	movs	r3, #0
 80063a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80063a6:	2300      	movs	r3, #0
 80063a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80063aa:	2300      	movs	r3, #0
 80063ac:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80063ae:	2300      	movs	r3, #0
 80063b0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80063b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80063b6:	2200      	movs	r2, #0
 80063b8:	4619      	mov	r1, r3
 80063ba:	4817      	ldr	r0, [pc, #92]	@ (8006418 <MX_TIM1_Init+0x164>)
 80063bc:	f005 fc7a 	bl	800bcb4 <HAL_TIM_OC_ConfigChannel>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80063c6:	f000 fb2e 	bl	8006a26 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80063ca:	2300      	movs	r3, #0
 80063cc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80063ce:	2300      	movs	r3, #0
 80063d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80063d2:	2300      	movs	r3, #0
 80063d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80063d6:	2300      	movs	r3, #0
 80063d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80063da:	2300      	movs	r3, #0
 80063dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80063de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80063e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80063e4:	2300      	movs	r3, #0
 80063e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80063e8:	2300      	movs	r3, #0
 80063ea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80063ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80063f0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 80063f2:	2300      	movs	r3, #0
 80063f4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80063f6:	2300      	movs	r3, #0
 80063f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80063fa:	463b      	mov	r3, r7
 80063fc:	4619      	mov	r1, r3
 80063fe:	4806      	ldr	r0, [pc, #24]	@ (8006418 <MX_TIM1_Init+0x164>)
 8006400:	f007 fdca 	bl	800df98 <HAL_TIMEx_ConfigBreakDeadTime>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d001      	beq.n	800640e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800640a:	f000 fb0c 	bl	8006a26 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800640e:	bf00      	nop
 8006410:	3768      	adds	r7, #104	@ 0x68
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	20000368 	.word	0x20000368
 800641c:	40010000 	.word	0x40010000

08006420 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b08e      	sub	sp, #56	@ 0x38
 8006424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006426:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800642a:	2200      	movs	r2, #0
 800642c:	601a      	str	r2, [r3, #0]
 800642e:	605a      	str	r2, [r3, #4]
 8006430:	609a      	str	r2, [r3, #8]
 8006432:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006434:	f107 031c 	add.w	r3, r7, #28
 8006438:	2200      	movs	r2, #0
 800643a:	601a      	str	r2, [r3, #0]
 800643c:	605a      	str	r2, [r3, #4]
 800643e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006440:	463b      	mov	r3, r7
 8006442:	2200      	movs	r2, #0
 8006444:	601a      	str	r2, [r3, #0]
 8006446:	605a      	str	r2, [r3, #4]
 8006448:	609a      	str	r2, [r3, #8]
 800644a:	60da      	str	r2, [r3, #12]
 800644c:	611a      	str	r2, [r3, #16]
 800644e:	615a      	str	r2, [r3, #20]
 8006450:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006452:	4b33      	ldr	r3, [pc, #204]	@ (8006520 <MX_TIM2_Init+0x100>)
 8006454:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006458:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800645a:	4b31      	ldr	r3, [pc, #196]	@ (8006520 <MX_TIM2_Init+0x100>)
 800645c:	2200      	movs	r2, #0
 800645e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006460:	4b2f      	ldr	r3, [pc, #188]	@ (8006520 <MX_TIM2_Init+0x100>)
 8006462:	2200      	movs	r2, #0
 8006464:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4499;
 8006466:	4b2e      	ldr	r3, [pc, #184]	@ (8006520 <MX_TIM2_Init+0x100>)
 8006468:	f241 1293 	movw	r2, #4499	@ 0x1193
 800646c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800646e:	4b2c      	ldr	r3, [pc, #176]	@ (8006520 <MX_TIM2_Init+0x100>)
 8006470:	2200      	movs	r2, #0
 8006472:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006474:	4b2a      	ldr	r3, [pc, #168]	@ (8006520 <MX_TIM2_Init+0x100>)
 8006476:	2200      	movs	r2, #0
 8006478:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800647a:	4829      	ldr	r0, [pc, #164]	@ (8006520 <MX_TIM2_Init+0x100>)
 800647c:	f004 fbb8 	bl	800abf0 <HAL_TIM_Base_Init>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d001      	beq.n	800648a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8006486:	f000 face 	bl	8006a26 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800648a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800648e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006490:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006494:	4619      	mov	r1, r3
 8006496:	4822      	ldr	r0, [pc, #136]	@ (8006520 <MX_TIM2_Init+0x100>)
 8006498:	f006 f8cc 	bl	800c634 <HAL_TIM_ConfigClockSource>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80064a2:	f000 fac0 	bl	8006a26 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80064a6:	481e      	ldr	r0, [pc, #120]	@ (8006520 <MX_TIM2_Init+0x100>)
 80064a8:	f004 fdec 	bl	800b084 <HAL_TIM_PWM_Init>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80064b2:	f000 fab8 	bl	8006a26 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80064b6:	2300      	movs	r3, #0
 80064b8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80064ba:	2300      	movs	r3, #0
 80064bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80064be:	f107 031c 	add.w	r3, r7, #28
 80064c2:	4619      	mov	r1, r3
 80064c4:	4816      	ldr	r0, [pc, #88]	@ (8006520 <MX_TIM2_Init+0x100>)
 80064c6:	f007 fc0f 	bl	800dce8 <HAL_TIMEx_MasterConfigSynchronization>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80064d0:	f000 faa9 	bl	8006a26 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80064d4:	2360      	movs	r3, #96	@ 0x60
 80064d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80064d8:	2300      	movs	r3, #0
 80064da:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80064dc:	2300      	movs	r3, #0
 80064de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80064e0:	2300      	movs	r3, #0
 80064e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80064e4:	463b      	mov	r3, r7
 80064e6:	2208      	movs	r2, #8
 80064e8:	4619      	mov	r1, r3
 80064ea:	480d      	ldr	r0, [pc, #52]	@ (8006520 <MX_TIM2_Init+0x100>)
 80064ec:	f005 fda2 	bl	800c034 <HAL_TIM_PWM_ConfigChannel>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80064f6:	f000 fa96 	bl	8006a26 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80064fa:	463b      	mov	r3, r7
 80064fc:	220c      	movs	r2, #12
 80064fe:	4619      	mov	r1, r3
 8006500:	4807      	ldr	r0, [pc, #28]	@ (8006520 <MX_TIM2_Init+0x100>)
 8006502:	f005 fd97 	bl	800c034 <HAL_TIM_PWM_ConfigChannel>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d001      	beq.n	8006510 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800650c:	f000 fa8b 	bl	8006a26 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8006510:	4803      	ldr	r0, [pc, #12]	@ (8006520 <MX_TIM2_Init+0x100>)
 8006512:	f000 fe43 	bl	800719c <HAL_TIM_MspPostInit>

}
 8006516:	bf00      	nop
 8006518:	3738      	adds	r7, #56	@ 0x38
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	200003b4 	.word	0x200003b4

08006524 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b094      	sub	sp, #80	@ 0x50
 8006528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800652a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800652e:	2200      	movs	r2, #0
 8006530:	601a      	str	r2, [r3, #0]
 8006532:	605a      	str	r2, [r3, #4]
 8006534:	609a      	str	r2, [r3, #8]
 8006536:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8006538:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800653c:	2200      	movs	r2, #0
 800653e:	601a      	str	r2, [r3, #0]
 8006540:	605a      	str	r2, [r3, #4]
 8006542:	609a      	str	r2, [r3, #8]
 8006544:	60da      	str	r2, [r3, #12]
 8006546:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006548:	f107 0320 	add.w	r3, r7, #32
 800654c:	2200      	movs	r2, #0
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	605a      	str	r2, [r3, #4]
 8006552:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006554:	1d3b      	adds	r3, r7, #4
 8006556:	2200      	movs	r2, #0
 8006558:	601a      	str	r2, [r3, #0]
 800655a:	605a      	str	r2, [r3, #4]
 800655c:	609a      	str	r2, [r3, #8]
 800655e:	60da      	str	r2, [r3, #12]
 8006560:	611a      	str	r2, [r3, #16]
 8006562:	615a      	str	r2, [r3, #20]
 8006564:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006566:	4b34      	ldr	r3, [pc, #208]	@ (8006638 <MX_TIM4_Init+0x114>)
 8006568:	4a34      	ldr	r2, [pc, #208]	@ (800663c <MX_TIM4_Init+0x118>)
 800656a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 800656c:	4b32      	ldr	r3, [pc, #200]	@ (8006638 <MX_TIM4_Init+0x114>)
 800656e:	2201      	movs	r2, #1
 8006570:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006572:	4b31      	ldr	r3, [pc, #196]	@ (8006638 <MX_TIM4_Init+0x114>)
 8006574:	2200      	movs	r2, #0
 8006576:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3115;
 8006578:	4b2f      	ldr	r3, [pc, #188]	@ (8006638 <MX_TIM4_Init+0x114>)
 800657a:	f640 422b 	movw	r2, #3115	@ 0xc2b
 800657e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006580:	4b2d      	ldr	r3, [pc, #180]	@ (8006638 <MX_TIM4_Init+0x114>)
 8006582:	2200      	movs	r2, #0
 8006584:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006586:	4b2c      	ldr	r3, [pc, #176]	@ (8006638 <MX_TIM4_Init+0x114>)
 8006588:	2280      	movs	r2, #128	@ 0x80
 800658a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800658c:	482a      	ldr	r0, [pc, #168]	@ (8006638 <MX_TIM4_Init+0x114>)
 800658e:	f004 fb2f 	bl	800abf0 <HAL_TIM_Base_Init>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d001      	beq.n	800659c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8006598:	f000 fa45 	bl	8006a26 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800659c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80065a0:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80065a2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80065a6:	4619      	mov	r1, r3
 80065a8:	4823      	ldr	r0, [pc, #140]	@ (8006638 <MX_TIM4_Init+0x114>)
 80065aa:	f006 f843 	bl	800c634 <HAL_TIM_ConfigClockSource>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d001      	beq.n	80065b8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80065b4:	f000 fa37 	bl	8006a26 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80065b8:	481f      	ldr	r0, [pc, #124]	@ (8006638 <MX_TIM4_Init+0x114>)
 80065ba:	f004 fd63 	bl	800b084 <HAL_TIM_PWM_Init>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d001      	beq.n	80065c8 <MX_TIM4_Init+0xa4>
  {
    Error_Handler();
 80065c4:	f000 fa2f 	bl	8006a26 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80065c8:	2305      	movs	r3, #5
 80065ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80065cc:	2300      	movs	r3, #0
 80065ce:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80065d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80065d4:	4619      	mov	r1, r3
 80065d6:	4818      	ldr	r0, [pc, #96]	@ (8006638 <MX_TIM4_Init+0x114>)
 80065d8:	f006 fb7e 	bl	800ccd8 <HAL_TIM_SlaveConfigSynchro>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 80065e2:	f000 fa20 	bl	8006a26 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80065e6:	2320      	movs	r3, #32
 80065e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80065ea:	2300      	movs	r3, #0
 80065ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80065ee:	f107 0320 	add.w	r3, r7, #32
 80065f2:	4619      	mov	r1, r3
 80065f4:	4810      	ldr	r0, [pc, #64]	@ (8006638 <MX_TIM4_Init+0x114>)
 80065f6:	f007 fb77 	bl	800dce8 <HAL_TIMEx_MasterConfigSynchronization>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8006600:	f000 fa11 	bl	8006a26 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006604:	2360      	movs	r3, #96	@ 0x60
 8006606:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006608:	2300      	movs	r3, #0
 800660a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800660c:	2300      	movs	r3, #0
 800660e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006610:	2300      	movs	r3, #0
 8006612:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006614:	1d3b      	adds	r3, r7, #4
 8006616:	220c      	movs	r2, #12
 8006618:	4619      	mov	r1, r3
 800661a:	4807      	ldr	r0, [pc, #28]	@ (8006638 <MX_TIM4_Init+0x114>)
 800661c:	f005 fd0a 	bl	800c034 <HAL_TIM_PWM_ConfigChannel>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 8006626:	f000 f9fe 	bl	8006a26 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800662a:	4803      	ldr	r0, [pc, #12]	@ (8006638 <MX_TIM4_Init+0x114>)
 800662c:	f000 fdb6 	bl	800719c <HAL_TIM_MspPostInit>

}
 8006630:	bf00      	nop
 8006632:	3750      	adds	r7, #80	@ 0x50
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	20000400 	.word	0x20000400
 800663c:	40000800 	.word	0x40000800

08006640 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006644:	4b14      	ldr	r3, [pc, #80]	@ (8006698 <MX_USART3_UART_Init+0x58>)
 8006646:	4a15      	ldr	r2, [pc, #84]	@ (800669c <MX_USART3_UART_Init+0x5c>)
 8006648:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800664a:	4b13      	ldr	r3, [pc, #76]	@ (8006698 <MX_USART3_UART_Init+0x58>)
 800664c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006650:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006652:	4b11      	ldr	r3, [pc, #68]	@ (8006698 <MX_USART3_UART_Init+0x58>)
 8006654:	2200      	movs	r2, #0
 8006656:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006658:	4b0f      	ldr	r3, [pc, #60]	@ (8006698 <MX_USART3_UART_Init+0x58>)
 800665a:	2200      	movs	r2, #0
 800665c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800665e:	4b0e      	ldr	r3, [pc, #56]	@ (8006698 <MX_USART3_UART_Init+0x58>)
 8006660:	2200      	movs	r2, #0
 8006662:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006664:	4b0c      	ldr	r3, [pc, #48]	@ (8006698 <MX_USART3_UART_Init+0x58>)
 8006666:	220c      	movs	r2, #12
 8006668:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800666a:	4b0b      	ldr	r3, [pc, #44]	@ (8006698 <MX_USART3_UART_Init+0x58>)
 800666c:	2200      	movs	r2, #0
 800666e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006670:	4b09      	ldr	r3, [pc, #36]	@ (8006698 <MX_USART3_UART_Init+0x58>)
 8006672:	2200      	movs	r2, #0
 8006674:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006676:	4b08      	ldr	r3, [pc, #32]	@ (8006698 <MX_USART3_UART_Init+0x58>)
 8006678:	2200      	movs	r2, #0
 800667a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800667c:	4b06      	ldr	r3, [pc, #24]	@ (8006698 <MX_USART3_UART_Init+0x58>)
 800667e:	2200      	movs	r2, #0
 8006680:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006682:	4805      	ldr	r0, [pc, #20]	@ (8006698 <MX_USART3_UART_Init+0x58>)
 8006684:	f007 fdc8 	bl	800e218 <HAL_UART_Init>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d001      	beq.n	8006692 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800668e:	f000 f9ca 	bl	8006a26 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006692:	bf00      	nop
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	2000044c 	.word	0x2000044c
 800669c:	40004800 	.word	0x40004800

080066a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b08c      	sub	sp, #48	@ 0x30
 80066a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066a6:	f107 031c 	add.w	r3, r7, #28
 80066aa:	2200      	movs	r2, #0
 80066ac:	601a      	str	r2, [r3, #0]
 80066ae:	605a      	str	r2, [r3, #4]
 80066b0:	609a      	str	r2, [r3, #8]
 80066b2:	60da      	str	r2, [r3, #12]
 80066b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80066b6:	4b7d      	ldr	r3, [pc, #500]	@ (80068ac <MX_GPIO_Init+0x20c>)
 80066b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ba:	4a7c      	ldr	r2, [pc, #496]	@ (80068ac <MX_GPIO_Init+0x20c>)
 80066bc:	f043 0304 	orr.w	r3, r3, #4
 80066c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80066c2:	4b7a      	ldr	r3, [pc, #488]	@ (80068ac <MX_GPIO_Init+0x20c>)
 80066c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c6:	f003 0304 	and.w	r3, r3, #4
 80066ca:	61bb      	str	r3, [r7, #24]
 80066cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80066ce:	4b77      	ldr	r3, [pc, #476]	@ (80068ac <MX_GPIO_Init+0x20c>)
 80066d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066d2:	4a76      	ldr	r2, [pc, #472]	@ (80068ac <MX_GPIO_Init+0x20c>)
 80066d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80066da:	4b74      	ldr	r3, [pc, #464]	@ (80068ac <MX_GPIO_Init+0x20c>)
 80066dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066e2:	617b      	str	r3, [r7, #20]
 80066e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80066e6:	4b71      	ldr	r3, [pc, #452]	@ (80068ac <MX_GPIO_Init+0x20c>)
 80066e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ea:	4a70      	ldr	r2, [pc, #448]	@ (80068ac <MX_GPIO_Init+0x20c>)
 80066ec:	f043 0301 	orr.w	r3, r3, #1
 80066f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80066f2:	4b6e      	ldr	r3, [pc, #440]	@ (80068ac <MX_GPIO_Init+0x20c>)
 80066f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	613b      	str	r3, [r7, #16]
 80066fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80066fe:	4b6b      	ldr	r3, [pc, #428]	@ (80068ac <MX_GPIO_Init+0x20c>)
 8006700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006702:	4a6a      	ldr	r2, [pc, #424]	@ (80068ac <MX_GPIO_Init+0x20c>)
 8006704:	f043 0302 	orr.w	r3, r3, #2
 8006708:	6313      	str	r3, [r2, #48]	@ 0x30
 800670a:	4b68      	ldr	r3, [pc, #416]	@ (80068ac <MX_GPIO_Init+0x20c>)
 800670c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	60fb      	str	r3, [r7, #12]
 8006714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006716:	4b65      	ldr	r3, [pc, #404]	@ (80068ac <MX_GPIO_Init+0x20c>)
 8006718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800671a:	4a64      	ldr	r2, [pc, #400]	@ (80068ac <MX_GPIO_Init+0x20c>)
 800671c:	f043 0320 	orr.w	r3, r3, #32
 8006720:	6313      	str	r3, [r2, #48]	@ 0x30
 8006722:	4b62      	ldr	r3, [pc, #392]	@ (80068ac <MX_GPIO_Init+0x20c>)
 8006724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006726:	f003 0320 	and.w	r3, r3, #32
 800672a:	60bb      	str	r3, [r7, #8]
 800672c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800672e:	4b5f      	ldr	r3, [pc, #380]	@ (80068ac <MX_GPIO_Init+0x20c>)
 8006730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006732:	4a5e      	ldr	r2, [pc, #376]	@ (80068ac <MX_GPIO_Init+0x20c>)
 8006734:	f043 0310 	orr.w	r3, r3, #16
 8006738:	6313      	str	r3, [r2, #48]	@ 0x30
 800673a:	4b5c      	ldr	r3, [pc, #368]	@ (80068ac <MX_GPIO_Init+0x20c>)
 800673c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800673e:	f003 0310 	and.w	r3, r3, #16
 8006742:	607b      	str	r3, [r7, #4]
 8006744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006746:	4b59      	ldr	r3, [pc, #356]	@ (80068ac <MX_GPIO_Init+0x20c>)
 8006748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800674a:	4a58      	ldr	r2, [pc, #352]	@ (80068ac <MX_GPIO_Init+0x20c>)
 800674c:	f043 0308 	orr.w	r3, r3, #8
 8006750:	6313      	str	r3, [r2, #48]	@ 0x30
 8006752:	4b56      	ldr	r3, [pc, #344]	@ (80068ac <MX_GPIO_Init+0x20c>)
 8006754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006756:	f003 0308 	and.w	r3, r3, #8
 800675a:	603b      	str	r3, [r7, #0]
 800675c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800675e:	2200      	movs	r2, #0
 8006760:	f244 0181 	movw	r1, #16513	@ 0x4081
 8006764:	4852      	ldr	r0, [pc, #328]	@ (80068b0 <MX_GPIO_Init+0x210>)
 8006766:	f001 fd55 	bl	8008214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, STEP_RSTN_Pin|STEP_DIR_Pin, GPIO_PIN_RESET);
 800676a:	2200      	movs	r2, #0
 800676c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8006770:	4850      	ldr	r0, [pc, #320]	@ (80068b4 <MX_GPIO_Init+0x214>)
 8006772:	f001 fd4f 	bl	8008214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPINDLE_ENA_L_Pin|SPINDLE_ENA_R_Pin, GPIO_PIN_RESET);
 8006776:	2200      	movs	r2, #0
 8006778:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 800677c:	484e      	ldr	r0, [pc, #312]	@ (80068b8 <MX_GPIO_Init+0x218>)
 800677e:	f001 fd49 	bl	8008214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEP_SPI_CS_GPIO_Port, STEP_SPI_CS_Pin, GPIO_PIN_SET);
 8006782:	2201      	movs	r2, #1
 8006784:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006788:	484c      	ldr	r0, [pc, #304]	@ (80068bc <MX_GPIO_Init+0x21c>)
 800678a:	f001 fd43 	bl	8008214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USR_BUTTON_Pin */
  GPIO_InitStruct.Pin = USR_BUTTON_Pin;
 800678e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006794:	2300      	movs	r3, #0
 8006796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006798:	2300      	movs	r3, #0
 800679a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USR_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800679c:	f107 031c 	add.w	r3, r7, #28
 80067a0:	4619      	mov	r1, r3
 80067a2:	4847      	ldr	r0, [pc, #284]	@ (80068c0 <MX_GPIO_Init+0x220>)
 80067a4:	f001 f9a6 	bl	8007af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPINDLE_SI_R_Pin */
  GPIO_InitStruct.Pin = SPINDLE_SI_R_Pin;
 80067a8:	2301      	movs	r3, #1
 80067aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80067ac:	2300      	movs	r3, #0
 80067ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067b0:	2300      	movs	r3, #0
 80067b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPINDLE_SI_R_GPIO_Port, &GPIO_InitStruct);
 80067b4:	f107 031c 	add.w	r3, r7, #28
 80067b8:	4619      	mov	r1, r3
 80067ba:	4842      	ldr	r0, [pc, #264]	@ (80068c4 <MX_GPIO_Init+0x224>)
 80067bc:	f001 f99a 	bl	8007af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 80067c0:	f244 0381 	movw	r3, #16513	@ 0x4081
 80067c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067c6:	2301      	movs	r3, #1
 80067c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067ca:	2300      	movs	r3, #0
 80067cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067ce:	2300      	movs	r3, #0
 80067d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067d2:	f107 031c 	add.w	r3, r7, #28
 80067d6:	4619      	mov	r1, r3
 80067d8:	4835      	ldr	r0, [pc, #212]	@ (80068b0 <MX_GPIO_Init+0x210>)
 80067da:	f001 f98b 	bl	8007af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_RSTN_Pin */
  GPIO_InitStruct.Pin = STEP_RSTN_Pin;
 80067de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80067e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067e4:	2301      	movs	r3, #1
 80067e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067e8:	2300      	movs	r3, #0
 80067ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067ec:	2300      	movs	r3, #0
 80067ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP_RSTN_GPIO_Port, &GPIO_InitStruct);
 80067f0:	f107 031c 	add.w	r3, r7, #28
 80067f4:	4619      	mov	r1, r3
 80067f6:	482f      	ldr	r0, [pc, #188]	@ (80068b4 <MX_GPIO_Init+0x214>)
 80067f8:	f001 f97c 	bl	8007af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_DIR_Pin */
  GPIO_InitStruct.Pin = STEP_DIR_Pin;
 80067fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006802:	2301      	movs	r3, #1
 8006804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006806:	2300      	movs	r3, #0
 8006808:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800680a:	2303      	movs	r3, #3
 800680c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP_DIR_GPIO_Port, &GPIO_InitStruct);
 800680e:	f107 031c 	add.w	r3, r7, #28
 8006812:	4619      	mov	r1, r3
 8006814:	4827      	ldr	r0, [pc, #156]	@ (80068b4 <MX_GPIO_Init+0x214>)
 8006816:	f001 f96d 	bl	8007af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_FLAG_Pin */
  GPIO_InitStruct.Pin = STEP_FLAG_Pin;
 800681a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800681e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006820:	2300      	movs	r3, #0
 8006822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006824:	2301      	movs	r3, #1
 8006826:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(STEP_FLAG_GPIO_Port, &GPIO_InitStruct);
 8006828:	f107 031c 	add.w	r3, r7, #28
 800682c:	4619      	mov	r1, r3
 800682e:	4821      	ldr	r0, [pc, #132]	@ (80068b4 <MX_GPIO_Init+0x214>)
 8006830:	f001 f960 	bl	8007af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPINDLE_ENA_L_Pin SPINDLE_ENA_R_Pin */
  GPIO_InitStruct.Pin = SPINDLE_ENA_L_Pin|SPINDLE_ENA_R_Pin;
 8006834:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8006838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800683a:	2301      	movs	r3, #1
 800683c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800683e:	2300      	movs	r3, #0
 8006840:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006842:	2300      	movs	r3, #0
 8006844:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006846:	f107 031c 	add.w	r3, r7, #28
 800684a:	4619      	mov	r1, r3
 800684c:	481a      	ldr	r0, [pc, #104]	@ (80068b8 <MX_GPIO_Init+0x218>)
 800684e:	f001 f951 	bl	8007af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_SPI_CS_Pin */
  GPIO_InitStruct.Pin = STEP_SPI_CS_Pin;
 8006852:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006858:	2301      	movs	r3, #1
 800685a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800685c:	2300      	movs	r3, #0
 800685e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006860:	2303      	movs	r3, #3
 8006862:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8006864:	f107 031c 	add.w	r3, r7, #28
 8006868:	4619      	mov	r1, r3
 800686a:	4814      	ldr	r0, [pc, #80]	@ (80068bc <MX_GPIO_Init+0x21c>)
 800686c:	f001 f942 	bl	8007af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : REFERENCE_MARK_Pin LIMIT_SWITCH_Pin */
  GPIO_InitStruct.Pin = REFERENCE_MARK_Pin|LIMIT_SWITCH_Pin;
 8006870:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006876:	2300      	movs	r3, #0
 8006878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800687a:	2300      	movs	r3, #0
 800687c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800687e:	f107 031c 	add.w	r3, r7, #28
 8006882:	4619      	mov	r1, r3
 8006884:	480a      	ldr	r0, [pc, #40]	@ (80068b0 <MX_GPIO_Init+0x210>)
 8006886:	f001 f935 	bl	8007af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPINDLE_SI_L_Pin */
  GPIO_InitStruct.Pin = SPINDLE_SI_L_Pin;
 800688a:	2301      	movs	r3, #1
 800688c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800688e:	2300      	movs	r3, #0
 8006890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006892:	2300      	movs	r3, #0
 8006894:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPINDLE_SI_L_GPIO_Port, &GPIO_InitStruct);
 8006896:	f107 031c 	add.w	r3, r7, #28
 800689a:	4619      	mov	r1, r3
 800689c:	4806      	ldr	r0, [pc, #24]	@ (80068b8 <MX_GPIO_Init+0x218>)
 800689e:	f001 f929 	bl	8007af4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80068a2:	bf00      	nop
 80068a4:	3730      	adds	r7, #48	@ 0x30
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	40023800 	.word	0x40023800
 80068b0:	40020400 	.word	0x40020400
 80068b4:	40021400 	.word	0x40021400
 80068b8:	40021000 	.word	0x40021000
 80068bc:	40020c00 	.word	0x40020c00
 80068c0:	40020800 	.word	0x40020800
 80068c4:	40020000 	.word	0x40020000

080068c8 <vAssertCalled>:

/* USER CODE BEGIN 4 */
void vAssertCalled(const char *const pcFileName, unsigned long ulLine)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  volatile uint32_t ulSetToNonZeroInDebuggerToContinue = 0;
 80068d2:	2300      	movs	r3, #0
 80068d4:	60fb      	str	r3, [r7, #12]

  /* Parameters are not used. */
  (void)ulLine;
  (void)pcFileName;

  taskENTER_CRITICAL();
 80068d6:	f00b fbab 	bl	8012030 <vPortEnterCritical>
  {
    /* You can step out of this function to debug the assertion by using
     the debugger to set ulSetToNonZeroInDebuggerToContinue to a non-zero
     value. */
    while (ulSetToNonZeroInDebuggerToContinue == 0)
 80068da:	bf00      	nop
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d0fc      	beq.n	80068dc <vAssertCalled+0x14>
    {
    }
  }
  taskEXIT_CRITICAL();
 80068e2:	f00b fbdd 	bl	80120a0 <vPortExitCritical>
}
 80068e6:	bf00      	nop
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
	...

080068f0 <__stdout_put_char>:

int __stdout_put_char(int ch)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  uint8_t val = ch;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	73fb      	strb	r3, [r7, #15]
  while ((huart3.Instance->ISR & UART_FLAG_TXE) == 0)
 80068fc:	bf00      	nop
 80068fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006934 <__stdout_put_char+0x44>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	69db      	ldr	r3, [r3, #28]
 8006904:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006908:	2b00      	cmp	r3, #0
 800690a:	d0f8      	beq.n	80068fe <__stdout_put_char+0xe>
    ;
  huart3.Instance->TDR = val;
 800690c:	4b09      	ldr	r3, [pc, #36]	@ (8006934 <__stdout_put_char+0x44>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	7bfa      	ldrb	r2, [r7, #15]
 8006912:	629a      	str	r2, [r3, #40]	@ 0x28
  while ((huart3.Instance->ISR & UART_FLAG_TC) == 0)
 8006914:	bf00      	nop
 8006916:	4b07      	ldr	r3, [pc, #28]	@ (8006934 <__stdout_put_char+0x44>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006920:	2b00      	cmp	r3, #0
 8006922:	d0f8      	beq.n	8006916 <__stdout_put_char+0x26>
    ;
  return 0;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3714      	adds	r7, #20
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	2000044c 	.word	0x2000044c

08006938 <__stdin_get_char>:

int __stdin_get_char(void)
{
 8006938:	b480      	push	{r7}
 800693a:	af00      	add	r7, sp, #0
  if (huart3.Instance->ISR & UART_FLAG_ORE)
 800693c:	4b19      	ldr	r3, [pc, #100]	@ (80069a4 <__stdin_get_char+0x6c>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	69db      	ldr	r3, [r3, #28]
 8006942:	f003 0308 	and.w	r3, r3, #8
 8006946:	2b00      	cmp	r3, #0
 8006948:	d003      	beq.n	8006952 <__stdin_get_char+0x1a>
    huart3.Instance->ICR = UART_CLEAR_OREF;
 800694a:	4b16      	ldr	r3, [pc, #88]	@ (80069a4 <__stdin_get_char+0x6c>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2208      	movs	r2, #8
 8006950:	621a      	str	r2, [r3, #32]

  if (huart3.Instance->ISR & UART_FLAG_NE)
 8006952:	4b14      	ldr	r3, [pc, #80]	@ (80069a4 <__stdin_get_char+0x6c>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	69db      	ldr	r3, [r3, #28]
 8006958:	f003 0304 	and.w	r3, r3, #4
 800695c:	2b00      	cmp	r3, #0
 800695e:	d003      	beq.n	8006968 <__stdin_get_char+0x30>
    huart3.Instance->ICR = UART_CLEAR_NEF;
 8006960:	4b10      	ldr	r3, [pc, #64]	@ (80069a4 <__stdin_get_char+0x6c>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2204      	movs	r2, #4
 8006966:	621a      	str	r2, [r3, #32]

  if (huart3.Instance->ISR & UART_FLAG_FE)
 8006968:	4b0e      	ldr	r3, [pc, #56]	@ (80069a4 <__stdin_get_char+0x6c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	f003 0302 	and.w	r3, r3, #2
 8006972:	2b00      	cmp	r3, #0
 8006974:	d003      	beq.n	800697e <__stdin_get_char+0x46>
    huart3.Instance->ICR = UART_CLEAR_FEF;
 8006976:	4b0b      	ldr	r3, [pc, #44]	@ (80069a4 <__stdin_get_char+0x6c>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2202      	movs	r2, #2
 800697c:	621a      	str	r2, [r3, #32]

  if ((huart3.Instance->ISR & UART_FLAG_RXNE) == 0)
 800697e:	4b09      	ldr	r3, [pc, #36]	@ (80069a4 <__stdin_get_char+0x6c>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	69db      	ldr	r3, [r3, #28]
 8006984:	f003 0320 	and.w	r3, r3, #32
 8006988:	2b00      	cmp	r3, #0
 800698a:	d102      	bne.n	8006992 <__stdin_get_char+0x5a>
    return -1;
 800698c:	f04f 33ff 	mov.w	r3, #4294967295
 8006990:	e002      	b.n	8006998 <__stdin_get_char+0x60>
  return huart3.Instance->RDR;
 8006992:	4b04      	ldr	r3, [pc, #16]	@ (80069a4 <__stdin_get_char+0x6c>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8006998:	4618      	mov	r0, r3
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	2000044c 	.word	0x2000044c

080069a8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80069ae:	463b      	mov	r3, r7
 80069b0:	2200      	movs	r2, #0
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	605a      	str	r2, [r3, #4]
 80069b6:	609a      	str	r2, [r3, #8]
 80069b8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80069ba:	f000 feeb 	bl	8007794 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80069be:	2301      	movs	r3, #1
 80069c0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80069c2:	2300      	movs	r3, #0
 80069c4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80069c6:	2300      	movs	r3, #0
 80069c8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 80069ca:	230d      	movs	r3, #13
 80069cc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80069ce:	2300      	movs	r3, #0
 80069d0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80069d2:	2300      	movs	r3, #0
 80069d4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 80069d6:	2306      	movs	r3, #6
 80069d8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80069da:	2300      	movs	r3, #0
 80069dc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80069de:	2300      	movs	r3, #0
 80069e0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80069e2:	2300      	movs	r3, #0
 80069e4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80069e6:	2300      	movs	r3, #0
 80069e8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80069ea:	463b      	mov	r3, r7
 80069ec:	4618      	mov	r0, r3
 80069ee:	f000 ff09 	bl	8007804 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80069f2:	2301      	movs	r3, #1
 80069f4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x60000000;
 80069f6:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80069fa:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80069fc:	231f      	movs	r3, #31
 80069fe:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8006a00:	2387      	movs	r3, #135	@ 0x87
 8006a02:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8006a04:	2300      	movs	r3, #0
 8006a06:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006a10:	463b      	mov	r3, r7
 8006a12:	4618      	mov	r0, r3
 8006a14:	f000 fef6 	bl	8007804 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8006a18:	2004      	movs	r0, #4
 8006a1a:	f000 fed3 	bl	80077c4 <HAL_MPU_Enable>

}
 8006a1e:	bf00      	nop
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006a26:	b480      	push	{r7}
 8006a28:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006a2a:	b672      	cpsid	i
}
 8006a2c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006a2e:	bf00      	nop
 8006a30:	e7fd      	b.n	8006a2e <Error_Handler+0x8>
	...

08006a34 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  portENTER_CRITICAL();
 8006a3e:	f00b faf7 	bl	8012030 <vPortEnterCritical>

  printf("HAL_ASSERT: %s:::%u\r\n", (char *)file, (unsigned int)line);
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	6879      	ldr	r1, [r7, #4]
 8006a46:	4805      	ldr	r0, [pc, #20]	@ (8006a5c <assert_failed+0x28>)
 8006a48:	f00d fd14 	bl	8014474 <iprintf>
  assert(0);
 8006a4c:	4b04      	ldr	r3, [pc, #16]	@ (8006a60 <assert_failed+0x2c>)
 8006a4e:	4a05      	ldr	r2, [pc, #20]	@ (8006a64 <assert_failed+0x30>)
 8006a50:	f240 310b 	movw	r1, #779	@ 0x30b
 8006a54:	4804      	ldr	r0, [pc, #16]	@ (8006a68 <assert_failed+0x34>)
 8006a56:	f00b fbdb 	bl	8012210 <__assert_func>
 8006a5a:	bf00      	nop
 8006a5c:	080187fc 	.word	0x080187fc
 8006a60:	08018814 	.word	0x08018814
 8006a64:	080191e0 	.word	0x080191e0
 8006a68:	08018818 	.word	0x08018818

08006a6c <initialise_monitor_handles>:
 * is called. afterwards main would be called.
 */
// ----------------------------------------------------------------------------
void initialise_monitor_handles( void )
// ----------------------------------------------------------------------------
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	af00      	add	r7, sp, #0

}
 8006a70:	bf00      	nop
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
	...

08006a7c <initialise_stdlib_abstraction>:
 */
// ----------------------------------------------------------------------------
__attribute__((constructor))
void initialise_stdlib_abstraction( void )
// ----------------------------------------------------------------------------
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	af00      	add	r7, sp, #0
    initialise_monitor_handles();
 8006a80:	f7ff fff4 	bl	8006a6c <initialise_monitor_handles>

#if defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_STDOUT)
    stdioSemaphore = xSemaphoreCreateRecursiveMutex();
 8006a84:	2004      	movs	r0, #4
 8006a86:	f008 fbe2 	bl	800f24e <xQueueCreateMutex>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	4a15      	ldr	r2, [pc, #84]	@ (8006ae4 <initialise_stdlib_abstraction+0x68>)
 8006a8e:	6013      	str	r3, [r2, #0]

    if ( stdioSemaphore == 0 )
 8006a90:	4b14      	ldr	r3, [pc, #80]	@ (8006ae4 <initialise_stdlib_abstraction+0x68>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d104      	bne.n	8006aa2 <initialise_stdlib_abstraction+0x26>
    {
        vAssertCalled( __FILE__, __LINE__ );
 8006a98:	f240 110b 	movw	r1, #267	@ 0x10b
 8006a9c:	4812      	ldr	r0, [pc, #72]	@ (8006ae8 <initialise_stdlib_abstraction+0x6c>)
 8006a9e:	f7ff ff13 	bl	80068c8 <vAssertCalled>
    }
#endif
#if defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_MALLOC)
    mallocSemaphore = xSemaphoreCreateRecursiveMutex();
 8006aa2:	2004      	movs	r0, #4
 8006aa4:	f008 fbd3 	bl	800f24e <xQueueCreateMutex>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	4a10      	ldr	r2, [pc, #64]	@ (8006aec <initialise_stdlib_abstraction+0x70>)
 8006aac:	6013      	str	r3, [r2, #0]

    if ( mallocSemaphore == 0 )
 8006aae:	4b0f      	ldr	r3, [pc, #60]	@ (8006aec <initialise_stdlib_abstraction+0x70>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d104      	bne.n	8006ac0 <initialise_stdlib_abstraction+0x44>
    {
        vAssertCalled( __FILE__, __LINE__ );
 8006ab6:	f240 1113 	movw	r1, #275	@ 0x113
 8006aba:	480b      	ldr	r0, [pc, #44]	@ (8006ae8 <initialise_stdlib_abstraction+0x6c>)
 8006abc:	f7ff ff04 	bl	80068c8 <vAssertCalled>
    }
#endif
#if defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_ENV)
    envSemaphore = xSemaphoreCreateRecursiveMutex();
 8006ac0:	2004      	movs	r0, #4
 8006ac2:	f008 fbc4 	bl	800f24e <xQueueCreateMutex>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	4a09      	ldr	r2, [pc, #36]	@ (8006af0 <initialise_stdlib_abstraction+0x74>)
 8006aca:	6013      	str	r3, [r2, #0]

    if ( envSemaphore == 0 )
 8006acc:	4b08      	ldr	r3, [pc, #32]	@ (8006af0 <initialise_stdlib_abstraction+0x74>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d104      	bne.n	8006ade <initialise_stdlib_abstraction+0x62>
    {
        vAssertCalled( __FILE__, __LINE__ );
 8006ad4:	f240 111b 	movw	r1, #283	@ 0x11b
 8006ad8:	4803      	ldr	r0, [pc, #12]	@ (8006ae8 <initialise_stdlib_abstraction+0x6c>)
 8006ada:	f7ff fef5 	bl	80068c8 <vAssertCalled>
    }
#endif
}
 8006ade:	bf00      	nop
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	200004d8 	.word	0x200004d8
 8006ae8:	080188f0 	.word	0x080188f0
 8006aec:	200004dc 	.word	0x200004dc
 8006af0:	200004e0 	.word	0x200004e0

08006af4 <_getpid>:
 * "machine mode"
 */
// ----------------------------------------------------------------------------
int _getpid( void )
// ----------------------------------------------------------------------------
{
 8006af4:	b480      	push	{r7}
 8006af6:	af00      	add	r7, sp, #0
    return 1;
 8006af8:	2301      	movs	r3, #1
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <_kill>:
 * process with PID 1
 */
// ----------------------------------------------------------------------------
int _kill( int pid, int sig )
// ----------------------------------------------------------------------------
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
    ( void )pid;
    ( void )sig;

    if ( _impure_ptr != 0 )
 8006b0e:	4b09      	ldr	r3, [pc, #36]	@ (8006b34 <_kill+0x30>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d003      	beq.n	8006b1e <_kill+0x1a>
    {
        _impure_ptr->_errno = EINVAL;
 8006b16:	4b07      	ldr	r3, [pc, #28]	@ (8006b34 <_kill+0x30>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2216      	movs	r2, #22
 8006b1c:	601a      	str	r2, [r3, #0]
    }
    errno = EINVAL;
 8006b1e:	f00e f837 	bl	8014b90 <__errno>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2216      	movs	r2, #22
 8006b26:	601a      	str	r2, [r3, #0]
    return -1;
 8006b28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	200001d4 	.word	0x200001d4

08006b38 <_exit>:
 */
// ----------------------------------------------------------------------------
__attribute__( ( noreturn ) )
void _exit ( int status )
// ----------------------------------------------------------------------------
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
    _kill( status, -1 );
 8006b40:	f04f 31ff 	mov.w	r1, #4294967295
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f7ff ffdd 	bl	8006b04 <_kill>
    while ( 1 ) {}
 8006b4a:	bf00      	nop
 8006b4c:	e7fd      	b.n	8006b4a <_exit+0x12>
	...

08006b50 <_read>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _read( int file, char* ptr, int len )
// ----------------------------------------------------------------------------
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b088      	sub	sp, #32
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
    ( void )file;

    int DataIdx;
    int resLen = 0;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	61bb      	str	r3, [r7, #24]

    if ( file == STDIN_FILENO )
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d121      	bne.n	8006baa <_read+0x5a>
    {
        for ( DataIdx = 0; DataIdx < len; )
 8006b66:	2300      	movs	r3, #0
 8006b68:	61fb      	str	r3, [r7, #28]
 8006b6a:	e019      	b.n	8006ba0 <_read+0x50>
        {
            int result = __stdin_get_char();
 8006b6c:	f7ff fee4 	bl	8006938 <__stdin_get_char>
 8006b70:	6178      	str	r0, [r7, #20]
            if ( result == EOF )
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b78:	d106      	bne.n	8006b88 <_read+0x38>
            {
                if ( resLen == 0 )
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d124      	bne.n	8006bca <_read+0x7a>
                {
                    resLen = EOF;
 8006b80:	f04f 33ff 	mov.w	r3, #4294967295
 8006b84:	61bb      	str	r3, [r7, #24]
                }
                break;
 8006b86:	e020      	b.n	8006bca <_read+0x7a>
            }

            *ptr++ = ( char )result;
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	1c5a      	adds	r2, r3, #1
 8006b8c:	60ba      	str	r2, [r7, #8]
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	b2d2      	uxtb	r2, r2
 8006b92:	701a      	strb	r2, [r3, #0]
            resLen++;
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	3301      	adds	r3, #1
 8006b98:	61bb      	str	r3, [r7, #24]
            DataIdx++;
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	61fb      	str	r3, [r7, #28]
        for ( DataIdx = 0; DataIdx < len; )
 8006ba0:	69fa      	ldr	r2, [r7, #28]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	dbe1      	blt.n	8006b6c <_read+0x1c>
 8006ba8:	e010      	b.n	8006bcc <_read+0x7c>

        }
    }
    else
    {
        if ( _impure_ptr != 0 )
 8006baa:	4b0b      	ldr	r3, [pc, #44]	@ (8006bd8 <_read+0x88>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <_read+0x6a>
        {
            _impure_ptr->_errno = EBADF;
 8006bb2:	4b09      	ldr	r3, [pc, #36]	@ (8006bd8 <_read+0x88>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2209      	movs	r2, #9
 8006bb8:	601a      	str	r2, [r3, #0]
        }
        errno = EBADF;
 8006bba:	f00d ffe9 	bl	8014b90 <__errno>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2209      	movs	r2, #9
 8006bc2:	601a      	str	r2, [r3, #0]
        return -1;
 8006bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8006bc8:	e001      	b.n	8006bce <_read+0x7e>
                break;
 8006bca:	bf00      	nop
    }

    return resLen;
 8006bcc:	69bb      	ldr	r3, [r7, #24]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3720      	adds	r7, #32
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	200001d4 	.word	0x200001d4

08006bdc <_write>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _write( int file, char* ptr, int len )
// ----------------------------------------------------------------------------
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b086      	sub	sp, #24
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
    ( void )file;

    int DataIdx, locked = 0;
 8006be8:	2300      	movs	r3, #0
 8006bea:	613b      	str	r3, [r7, #16]

    if ( file == STDOUT_FILENO || file == STDERR_FILENO )
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d002      	beq.n	8006bf8 <_write+0x1c>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d149      	bne.n	8006c8c <_write+0xb0>
    {

#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_STDOUT)
        if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006bf8:	f00a fb42 	bl	8011280 <xTaskGetSchedulerState>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d108      	bne.n	8006c14 <_write+0x38>
        {
            xSemaphoreTakeRecursive( stdioSemaphore, -1 );
 8006c02:	4b2c      	ldr	r3, [pc, #176]	@ (8006cb4 <_write+0xd8>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f04f 31ff 	mov.w	r1, #4294967295
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f008 fb74 	bl	800f2f8 <xQueueTakeMutexRecursive>
            locked = 1;
 8006c10:	2301      	movs	r3, #1
 8006c12:	613b      	str	r3, [r7, #16]
        }
#endif

        if (file == STDERR_FILENO)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d10e      	bne.n	8006c38 <_write+0x5c>
        {
        	__stdout_put_char('\033');
 8006c1a:	201b      	movs	r0, #27
 8006c1c:	f7ff fe68 	bl	80068f0 <__stdout_put_char>
        	__stdout_put_char('[');
 8006c20:	205b      	movs	r0, #91	@ 0x5b
 8006c22:	f7ff fe65 	bl	80068f0 <__stdout_put_char>
        	__stdout_put_char('3');
 8006c26:	2033      	movs	r0, #51	@ 0x33
 8006c28:	f7ff fe62 	bl	80068f0 <__stdout_put_char>
        	__stdout_put_char('1');
 8006c2c:	2031      	movs	r0, #49	@ 0x31
 8006c2e:	f7ff fe5f 	bl	80068f0 <__stdout_put_char>
        	__stdout_put_char('m');
 8006c32:	206d      	movs	r0, #109	@ 0x6d
 8006c34:	f7ff fe5c 	bl	80068f0 <__stdout_put_char>
        }
        for ( DataIdx = 0; DataIdx < len; DataIdx++ )
 8006c38:	2300      	movs	r3, #0
 8006c3a:	617b      	str	r3, [r7, #20]
 8006c3c:	e009      	b.n	8006c52 <_write+0x76>
        {
            __stdout_put_char( ptr[DataIdx] );
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	4413      	add	r3, r2
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7ff fe52 	bl	80068f0 <__stdout_put_char>
        for ( DataIdx = 0; DataIdx < len; DataIdx++ )
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	617b      	str	r3, [r7, #20]
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	dbf1      	blt.n	8006c3e <_write+0x62>
        }
        if (file == STDERR_FILENO)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d10b      	bne.n	8006c78 <_write+0x9c>
        {
        	__stdout_put_char('\033');
 8006c60:	201b      	movs	r0, #27
 8006c62:	f7ff fe45 	bl	80068f0 <__stdout_put_char>
        	__stdout_put_char('[');
 8006c66:	205b      	movs	r0, #91	@ 0x5b
 8006c68:	f7ff fe42 	bl	80068f0 <__stdout_put_char>
        	__stdout_put_char('0');
 8006c6c:	2030      	movs	r0, #48	@ 0x30
 8006c6e:	f7ff fe3f 	bl	80068f0 <__stdout_put_char>
        	__stdout_put_char('m');
 8006c72:	206d      	movs	r0, #109	@ 0x6d
 8006c74:	f7ff fe3c 	bl	80068f0 <__stdout_put_char>
        }

#if defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_STDOUT)
        if ( locked )
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d004      	beq.n	8006c88 <_write+0xac>
        {
            xSemaphoreGiveRecursive( stdioSemaphore );
 8006c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006cb4 <_write+0xd8>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f008 fafc 	bl	800f280 <xQueueGiveMutexRecursive>
        }
#endif

        return len;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	e00e      	b.n	8006caa <_write+0xce>
    }
    else
    {
        if ( _impure_ptr != 0 )
 8006c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006cb8 <_write+0xdc>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d003      	beq.n	8006c9c <_write+0xc0>
        {
            _impure_ptr->_errno = EBADF;
 8006c94:	4b08      	ldr	r3, [pc, #32]	@ (8006cb8 <_write+0xdc>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2209      	movs	r2, #9
 8006c9a:	601a      	str	r2, [r3, #0]
        }
        errno = EBADF;
 8006c9c:	f00d ff78 	bl	8014b90 <__errno>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2209      	movs	r2, #9
 8006ca4:	601a      	str	r2, [r3, #0]
        return -1;
 8006ca6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3718      	adds	r7, #24
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	200004d8 	.word	0x200004d8
 8006cb8:	200001d4 	.word	0x200001d4

08006cbc <_close>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _close( int file )
// ----------------------------------------------------------------------------
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
    ( void )file;

    return -1;
 8006cc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <_fstat>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _fstat( int file, struct stat* st )
// ----------------------------------------------------------------------------
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
    st->st_dev    = file;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	b21a      	sxth	r2, r3
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	801a      	strh	r2, [r3, #0]
    st->st_size   = 0;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	611a      	str	r2, [r3, #16]
    st->st_blocks = 0;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	64da      	str	r2, [r3, #76]	@ 0x4c

    if ( file >= 1 && file <= 3 )
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	dd08      	ble.n	8006d0a <_fstat+0x36>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2b03      	cmp	r3, #3
 8006cfc:	dc05      	bgt.n	8006d0a <_fstat+0x36>
    {
        st->st_mode = S_IFCHR;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006d04:	605a      	str	r2, [r3, #4]
        return 0;
 8006d06:	2300      	movs	r3, #0
 8006d08:	e005      	b.n	8006d16 <_fstat+0x42>
    }
    else
    {
        st->st_mode = S_IFREG;
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006d10:	605a      	str	r2, [r3, #4]
        return -1;
 8006d12:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <_isatty>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _isatty( int file )
// ----------------------------------------------------------------------------
{
 8006d22:	b480      	push	{r7}
 8006d24:	b083      	sub	sp, #12
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
    // is stdin, stdout or stderror
    if ( file >= 0 && file <= 2 )
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	db04      	blt.n	8006d3a <_isatty+0x18>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	dc01      	bgt.n	8006d3a <_isatty+0x18>
    {
        return file;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	e000      	b.n	8006d3c <_isatty+0x1a>
    }
    return 0;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <_lseek>:

// ----------------------------------------------------------------------------
int _lseek( int file, int ptr, int dir )
// ----------------------------------------------------------------------------
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]
    ( void )file;
    ( void )ptr;
    ( void )dir;

    return 0;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
	...

08006d64 <_sbrk_r>:
static UBaseType_t malLock_uxSavedInterruptStatus;

// ----------------------------------------------------------------------------
void* _sbrk_r( struct _reent* pReent, int incr )
// ----------------------------------------------------------------------------
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b088      	sub	sp, #32
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
    ( void )pReent;
    ( void )incr;
    register char* stack_ptr asm( "sp" );

    // make sure to calculate the correct heap size and bytes remaining at the first call!
    if( TotalHeapSize == 0 )
 8006d6e:	4b37      	ldr	r3, [pc, #220]	@ (8006e4c <_sbrk_r+0xe8>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d113      	bne.n	8006d9e <_sbrk_r+0x3a>
    {
        TotalHeapSize = heapBytesRemaining = stickyHeapBytesRemaining
                                             = ( int )( ( &__HeapLimit ) - ( &__HeapBase ) )
 8006d76:	4a36      	ldr	r2, [pc, #216]	@ (8006e50 <_sbrk_r+0xec>)
 8006d78:	4b36      	ldr	r3, [pc, #216]	@ (8006e54 <_sbrk_r+0xf0>)
 8006d7a:	1ad3      	subs	r3, r2, r3
#ifdef configISR_STACK_SIZE_WORDS
                                               - ( configISR_STACK_SIZE_WORDS * 4 )
 8006d7c:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8006d80:	461a      	mov	r2, r3
                                             = ( int )( ( &__HeapLimit ) - ( &__HeapBase ) )
 8006d82:	4b35      	ldr	r3, [pc, #212]	@ (8006e58 <_sbrk_r+0xf4>)
 8006d84:	601a      	str	r2, [r3, #0]
 8006d86:	4a32      	ldr	r2, [pc, #200]	@ (8006e50 <_sbrk_r+0xec>)
 8006d88:	4b32      	ldr	r3, [pc, #200]	@ (8006e54 <_sbrk_r+0xf0>)
 8006d8a:	1ad3      	subs	r3, r2, r3
                                               - ( configISR_STACK_SIZE_WORDS * 4 )
 8006d8c:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
        TotalHeapSize = heapBytesRemaining = stickyHeapBytesRemaining
 8006d90:	4a32      	ldr	r2, [pc, #200]	@ (8006e5c <_sbrk_r+0xf8>)
 8006d92:	6013      	str	r3, [r2, #0]
 8006d94:	4b31      	ldr	r3, [pc, #196]	@ (8006e5c <_sbrk_r+0xf8>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	461a      	mov	r2, r3
 8006d9a:	4b2c      	ldr	r3, [pc, #176]	@ (8006e4c <_sbrk_r+0xe8>)
 8006d9c:	601a      	str	r2, [r3, #0]
#endif
                                               ;
    };
    static char* currentHeapEnd = &__HeapBase;
    char* limit = ( xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED ) ?
 8006d9e:	f00a fa6f 	bl	8011280 <xTaskGetSchedulerState>
 8006da2:	4603      	mov	r3, r0
                  stack_ptr   :  // Before scheduler is started, limit is stack pointer (risky!)
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d101      	bne.n	8006dac <_sbrk_r+0x48>
 8006da8:	466b      	mov	r3, sp
 8006daa:	e000      	b.n	8006dae <_sbrk_r+0x4a>
 8006dac:	4b2c      	ldr	r3, [pc, #176]	@ (8006e60 <_sbrk_r+0xfc>)
    char* limit = ( xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED ) ?
 8006dae:	61fb      	str	r3, [r7, #28]
    __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006db0:	f3ef 8305 	mrs	r3, IPSR
 8006db4:	613b      	str	r3, [r7, #16]
    if( ulCurrentInterrupt == 0 )
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d102      	bne.n	8006dc2 <_sbrk_r+0x5e>
        xReturn = pdFALSE;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	60fb      	str	r3, [r7, #12]
 8006dc0:	e001      	b.n	8006dc6 <_sbrk_r+0x62>
        xReturn = pdTRUE;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	60fb      	str	r3, [r7, #12]
    return xReturn;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
                  &__HeapLimit
#ifdef configISR_STACK_SIZE_WORDS
                  - ( configISR_STACK_SIZE_WORDS * 4 )
#endif
                  ; // Once running, OK to reuse all remaining RAM except ISR stack (MSP) stack
    DRN_ENTER_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
 8006dc8:	61bb      	str	r3, [r7, #24]
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d010      	beq.n	8006df2 <_sbrk_r+0x8e>
    __asm volatile
 8006dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd4:	b672      	cpsid	i
 8006dd6:	f383 8811 	msr	BASEPRI, r3
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	b662      	cpsie	i
 8006de4:	60bb      	str	r3, [r7, #8]
}
 8006de6:	bf00      	nop
 8006de8:	f240 21c1 	movw	r1, #705	@ 0x2c1
 8006dec:	481d      	ldr	r0, [pc, #116]	@ (8006e64 <_sbrk_r+0x100>)
 8006dee:	f7ff fd6b 	bl	80068c8 <vAssertCalled>
    if ( currentHeapEnd + incr > limit )
 8006df2:	4b1d      	ldr	r3, [pc, #116]	@ (8006e68 <_sbrk_r+0x104>)
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	4413      	add	r3, r2
 8006dfa:	69fa      	ldr	r2, [r7, #28]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d204      	bcs.n	8006e0a <_sbrk_r+0xa6>
        // Ooops, no more memory available...
#if( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            extern void vApplicationMallocFailedHook( void );
            DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
            vApplicationMallocFailedHook();
 8006e00:	f7ff f8f6 	bl	8005ff0 <vApplicationMallocFailedHook>
#else
        // Default, if you prefer to believe your application will gracefully trap out-of-memory...
        pReent->_errno = ENOMEM; // newlib's thread-specific errno
        DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
#endif
        return ( char* ) -1; // the malloc-family routine that called sbrk will return 0
 8006e04:	f04f 33ff 	mov.w	r3, #4294967295
 8006e08:	e01b      	b.n	8006e42 <_sbrk_r+0xde>
    }

    char* previousHeapEnd = currentHeapEnd;
 8006e0a:	4b17      	ldr	r3, [pc, #92]	@ (8006e68 <_sbrk_r+0x104>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	617b      	str	r3, [r7, #20]
    currentHeapEnd += incr;
 8006e10:	4b15      	ldr	r3, [pc, #84]	@ (8006e68 <_sbrk_r+0x104>)
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	4413      	add	r3, r2
 8006e18:	4a13      	ldr	r2, [pc, #76]	@ (8006e68 <_sbrk_r+0x104>)
 8006e1a:	6013      	str	r3, [r2, #0]
    heapBytesRemaining -= incr;
 8006e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8006e5c <_sbrk_r+0xf8>)
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	4a0d      	ldr	r2, [pc, #52]	@ (8006e5c <_sbrk_r+0xf8>)
 8006e26:	6013      	str	r3, [r2, #0]

    // implement the statistical feature to provide the minimum free heap size feature
    // of FreeRTOS statistics
    if ( stickyHeapBytesRemaining > xPortGetFreeHeapSize() )
 8006e28:	f000 f8d0 	bl	8006fcc <xPortGetFreeHeapSize>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8006e58 <_sbrk_r+0xf4>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d204      	bcs.n	8006e40 <_sbrk_r+0xdc>
    {
        stickyHeapBytesRemaining = xPortGetFreeHeapSize();
 8006e36:	f000 f8c9 	bl	8006fcc <xPortGetFreeHeapSize>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	4a06      	ldr	r2, [pc, #24]	@ (8006e58 <_sbrk_r+0xf4>)
 8006e3e:	6013      	str	r3, [r2, #0]
    }

    DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
    return ( char* ) previousHeapEnd;
 8006e40:	697b      	ldr	r3, [r7, #20]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3720      	adds	r7, #32
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	200004ec 	.word	0x200004ec
 8006e50:	20050000 	.word	0x20050000
 8006e54:	200007e8 	.word	0x200007e8
 8006e58:	200004e8 	.word	0x200004e8
 8006e5c:	200004e4 	.word	0x200004e4
 8006e60:	2004c000 	.word	0x2004c000
 8006e64:	080188f0 	.word	0x080188f0
 8006e68:	20000048 	.word	0x20000048

08006e6c <__malloc_lock>:
}

// ----------------------------------------------------------------------------
__attribute__( ( weak ) ) void __malloc_lock( struct _reent* r )
// ----------------------------------------------------------------------------
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
    ( void )r;

#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_MALLOC)
    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING  )
 8006e74:	f00a fa04 	bl	8011280 <xTaskGetSchedulerState>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d106      	bne.n	8006e8c <__malloc_lock+0x20>
    {
        xSemaphoreTakeRecursive( mallocSemaphore, -1 );
 8006e7e:	4b16      	ldr	r3, [pc, #88]	@ (8006ed8 <__malloc_lock+0x6c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f04f 31ff 	mov.w	r1, #4294967295
 8006e86:	4618      	mov	r0, r3
 8006e88:	f008 fa36 	bl	800f2f8 <xQueueTakeMutexRecursive>
    __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006e8c:	f3ef 8305 	mrs	r3, IPSR
 8006e90:	613b      	str	r3, [r7, #16]
    if( ulCurrentInterrupt == 0 )
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d102      	bne.n	8006e9e <__malloc_lock+0x32>
        xReturn = pdFALSE;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	60fb      	str	r3, [r7, #12]
 8006e9c:	e001      	b.n	8006ea2 <__malloc_lock+0x36>
        xReturn = pdTRUE;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	60fb      	str	r3, [r7, #12]
    return xReturn;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
    }
#endif

    DRN_ENTER_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
 8006ea4:	617b      	str	r3, [r7, #20]
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d010      	beq.n	8006ece <__malloc_lock+0x62>
    __asm volatile
 8006eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb0:	b672      	cpsid	i
 8006eb2:	f383 8811 	msr	BASEPRI, r3
 8006eb6:	f3bf 8f6f 	isb	sy
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	b662      	cpsie	i
 8006ec0:	60bb      	str	r3, [r7, #8]
}
 8006ec2:	bf00      	nop
 8006ec4:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8006ec8:	4804      	ldr	r0, [pc, #16]	@ (8006edc <__malloc_lock+0x70>)
 8006eca:	f7ff fcfd 	bl	80068c8 <vAssertCalled>
}
 8006ece:	bf00      	nop
 8006ed0:	3718      	adds	r7, #24
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	200004dc 	.word	0x200004dc
 8006edc:	080188f0 	.word	0x080188f0

08006ee0 <__malloc_unlock>:

// ----------------------------------------------------------------------------
__attribute__( ( weak ) ) void __malloc_unlock( struct _reent* r )
// ----------------------------------------------------------------------------
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
    ( void )r;

#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_MALLOC)
    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006ee8:	f00a f9ca 	bl	8011280 <xTaskGetSchedulerState>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d104      	bne.n	8006efc <__malloc_unlock+0x1c>
    {
        xSemaphoreGiveRecursive( mallocSemaphore );
 8006ef2:	4b04      	ldr	r3, [pc, #16]	@ (8006f04 <__malloc_unlock+0x24>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f008 f9c2 	bl	800f280 <xQueueGiveMutexRecursive>
    }
#endif

    DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
}
 8006efc:	bf00      	nop
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	200004dc 	.word	0x200004dc

08006f08 <__env_lock>:

// ----------------------------------------------------------------------------
__attribute__( ( weak ) ) void __env_lock( void )
// ----------------------------------------------------------------------------
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_ENV)
    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006f0e:	f00a f9b7 	bl	8011280 <xTaskGetSchedulerState>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d106      	bne.n	8006f26 <__env_lock+0x1e>
    {
        xSemaphoreTakeRecursive( envSemaphore, -1 );
 8006f18:	4b15      	ldr	r3, [pc, #84]	@ (8006f70 <__env_lock+0x68>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8006f20:	4618      	mov	r0, r3
 8006f22:	f008 f9e9 	bl	800f2f8 <xQueueTakeMutexRecursive>
    __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006f26:	f3ef 8305 	mrs	r3, IPSR
 8006f2a:	60bb      	str	r3, [r7, #8]
    if( ulCurrentInterrupt == 0 )
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d102      	bne.n	8006f38 <__env_lock+0x30>
        xReturn = pdFALSE;
 8006f32:	2300      	movs	r3, #0
 8006f34:	607b      	str	r3, [r7, #4]
 8006f36:	e001      	b.n	8006f3c <__env_lock+0x34>
        xReturn = pdTRUE;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	607b      	str	r3, [r7, #4]
    return xReturn;
 8006f3c:	687b      	ldr	r3, [r7, #4]
    }
#endif

    DRN_ENTER_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d010      	beq.n	8006f68 <__env_lock+0x60>
    __asm volatile
 8006f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4a:	b672      	cpsid	i
 8006f4c:	f383 8811 	msr	BASEPRI, r3
 8006f50:	f3bf 8f6f 	isb	sy
 8006f54:	f3bf 8f4f 	dsb	sy
 8006f58:	b662      	cpsie	i
 8006f5a:	603b      	str	r3, [r7, #0]
}
 8006f5c:	bf00      	nop
 8006f5e:	f240 3126 	movw	r1, #806	@ 0x326
 8006f62:	4804      	ldr	r0, [pc, #16]	@ (8006f74 <__env_lock+0x6c>)
 8006f64:	f7ff fcb0 	bl	80068c8 <vAssertCalled>
}
 8006f68:	bf00      	nop
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	200004e0 	.word	0x200004e0
 8006f74:	080188f0 	.word	0x080188f0

08006f78 <__env_unlock>:

// ----------------------------------------------------------------------------
__attribute__( ( weak ) ) void __env_unlock( void )
// ----------------------------------------------------------------------------
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	af00      	add	r7, sp, #0
#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_ENV)
    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006f7c:	f00a f980 	bl	8011280 <xTaskGetSchedulerState>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d104      	bne.n	8006f90 <__env_unlock+0x18>
    {
        xSemaphoreGiveRecursive( envSemaphore );
 8006f86:	4b03      	ldr	r3, [pc, #12]	@ (8006f94 <__env_unlock+0x1c>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f008 f978 	bl	800f280 <xQueueGiveMutexRecursive>
    }
#endif

    DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
}
 8006f90:	bf00      	nop
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	200004e0 	.word	0x200004e0

08006f98 <pvPortMalloc>:

// ----------------------------------------------------------------------------
void* pvPortMalloc( size_t xSize )
// ----------------------------------------------------------------------------
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
    void* p = malloc( xSize );
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f00b f9bf 	bl	8012324 <malloc>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	60fb      	str	r3, [r7, #12]
    return p;
 8006faa:	68fb      	ldr	r3, [r7, #12]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <vPortFree>:

// ----------------------------------------------------------------------------
void vPortFree( void* pv )
// ----------------------------------------------------------------------------
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
    free( pv );
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f00b f9b9 	bl	8012334 <free>
}
 8006fc2:	bf00      	nop
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
	...

08006fcc <xPortGetFreeHeapSize>:

// ----------------------------------------------------------------------------
size_t xPortGetFreeHeapSize( void )
// ----------------------------------------------------------------------------
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b08c      	sub	sp, #48	@ 0x30
 8006fd0:	af00      	add	r7, sp, #0
	static int lockGuard = 0;
	if ( lockGuard != 0 ) return stickyHeapBytesRemaining;
 8006fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8007008 <xPortGetFreeHeapSize+0x3c>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d002      	beq.n	8006fe0 <xPortGetFreeHeapSize+0x14>
 8006fda:	4b0c      	ldr	r3, [pc, #48]	@ (800700c <xPortGetFreeHeapSize+0x40>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	e00f      	b.n	8007000 <xPortGetFreeHeapSize+0x34>
	lockGuard = 1;
 8006fe0:	4b09      	ldr	r3, [pc, #36]	@ (8007008 <xPortGetFreeHeapSize+0x3c>)
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	601a      	str	r2, [r3, #0]
    struct mallinfo mi = mallinfo();
 8006fe6:	1d3b      	adds	r3, r7, #4
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f00b fa4d 	bl	8012488 <mallinfo>
    size_t result = mi.fordblks + heapBytesRemaining;
 8006fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff0:	4a07      	ldr	r2, [pc, #28]	@ (8007010 <xPortGetFreeHeapSize+0x44>)
 8006ff2:	6812      	ldr	r2, [r2, #0]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lockGuard = 0;
 8006ff8:	4b03      	ldr	r3, [pc, #12]	@ (8007008 <xPortGetFreeHeapSize+0x3c>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	601a      	str	r2, [r3, #0]
    return result;
 8006ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

}
 8007000:	4618      	mov	r0, r3
 8007002:	3730      	adds	r7, #48	@ 0x30
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	200004f0 	.word	0x200004f0
 800700c:	200004e8 	.word	0x200004e8
 8007010:	200004e4 	.word	0x200004e4

08007014 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800701a:	4b0f      	ldr	r3, [pc, #60]	@ (8007058 <HAL_MspInit+0x44>)
 800701c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800701e:	4a0e      	ldr	r2, [pc, #56]	@ (8007058 <HAL_MspInit+0x44>)
 8007020:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007024:	6413      	str	r3, [r2, #64]	@ 0x40
 8007026:	4b0c      	ldr	r3, [pc, #48]	@ (8007058 <HAL_MspInit+0x44>)
 8007028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800702a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800702e:	607b      	str	r3, [r7, #4]
 8007030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007032:	4b09      	ldr	r3, [pc, #36]	@ (8007058 <HAL_MspInit+0x44>)
 8007034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007036:	4a08      	ldr	r2, [pc, #32]	@ (8007058 <HAL_MspInit+0x44>)
 8007038:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800703c:	6453      	str	r3, [r2, #68]	@ 0x44
 800703e:	4b06      	ldr	r3, [pc, #24]	@ (8007058 <HAL_MspInit+0x44>)
 8007040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007042:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007046:	603b      	str	r3, [r7, #0]
 8007048:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800704a:	bf00      	nop
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	40023800 	.word	0x40023800

0800705c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b08a      	sub	sp, #40	@ 0x28
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007064:	f107 0314 	add.w	r3, r7, #20
 8007068:	2200      	movs	r2, #0
 800706a:	601a      	str	r2, [r3, #0]
 800706c:	605a      	str	r2, [r3, #4]
 800706e:	609a      	str	r2, [r3, #8]
 8007070:	60da      	str	r2, [r3, #12]
 8007072:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a1b      	ldr	r2, [pc, #108]	@ (80070e8 <HAL_SPI_MspInit+0x8c>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d12f      	bne.n	80070de <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800707e:	4b1b      	ldr	r3, [pc, #108]	@ (80070ec <HAL_SPI_MspInit+0x90>)
 8007080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007082:	4a1a      	ldr	r2, [pc, #104]	@ (80070ec <HAL_SPI_MspInit+0x90>)
 8007084:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007088:	6453      	str	r3, [r2, #68]	@ 0x44
 800708a:	4b18      	ldr	r3, [pc, #96]	@ (80070ec <HAL_SPI_MspInit+0x90>)
 800708c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800708e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007092:	613b      	str	r3, [r7, #16]
 8007094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007096:	4b15      	ldr	r3, [pc, #84]	@ (80070ec <HAL_SPI_MspInit+0x90>)
 8007098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800709a:	4a14      	ldr	r2, [pc, #80]	@ (80070ec <HAL_SPI_MspInit+0x90>)
 800709c:	f043 0301 	orr.w	r3, r3, #1
 80070a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80070a2:	4b12      	ldr	r3, [pc, #72]	@ (80070ec <HAL_SPI_MspInit+0x90>)
 80070a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070a6:	f003 0301 	and.w	r3, r3, #1
 80070aa:	60fb      	str	r3, [r7, #12]
 80070ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = STEP_SPI_SCK_Pin|STEP_SPI_MISO_Pin|STEP_SPI_MOSI_Pin;
 80070ae:	23e0      	movs	r3, #224	@ 0xe0
 80070b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070b2:	2302      	movs	r3, #2
 80070b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070b6:	2300      	movs	r3, #0
 80070b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070ba:	2303      	movs	r3, #3
 80070bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80070be:	2305      	movs	r3, #5
 80070c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070c2:	f107 0314 	add.w	r3, r7, #20
 80070c6:	4619      	mov	r1, r3
 80070c8:	4809      	ldr	r0, [pc, #36]	@ (80070f0 <HAL_SPI_MspInit+0x94>)
 80070ca:	f000 fd13 	bl	8007af4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80070ce:	2200      	movs	r2, #0
 80070d0:	2105      	movs	r1, #5
 80070d2:	2023      	movs	r0, #35	@ 0x23
 80070d4:	f000 fb0e 	bl	80076f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80070d8:	2023      	movs	r0, #35	@ 0x23
 80070da:	f000 fb37 	bl	800774c <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80070de:	bf00      	nop
 80070e0:	3728      	adds	r7, #40	@ 0x28
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	40013000 	.word	0x40013000
 80070ec:	40023800 	.word	0x40023800
 80070f0:	40020000 	.word	0x40020000

080070f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a23      	ldr	r2, [pc, #140]	@ (8007190 <HAL_TIM_Base_MspInit+0x9c>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d11c      	bne.n	8007140 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007106:	4b23      	ldr	r3, [pc, #140]	@ (8007194 <HAL_TIM_Base_MspInit+0xa0>)
 8007108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800710a:	4a22      	ldr	r2, [pc, #136]	@ (8007194 <HAL_TIM_Base_MspInit+0xa0>)
 800710c:	f043 0301 	orr.w	r3, r3, #1
 8007110:	6453      	str	r3, [r2, #68]	@ 0x44
 8007112:	4b20      	ldr	r3, [pc, #128]	@ (8007194 <HAL_TIM_Base_MspInit+0xa0>)
 8007114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	617b      	str	r3, [r7, #20]
 800711c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800711e:	2200      	movs	r2, #0
 8007120:	2100      	movs	r1, #0
 8007122:	2019      	movs	r0, #25
 8007124:	f000 fae6 	bl	80076f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8007128:	2019      	movs	r0, #25
 800712a:	f000 fb0f 	bl	800774c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800712e:	2200      	movs	r2, #0
 8007130:	2100      	movs	r1, #0
 8007132:	201b      	movs	r0, #27
 8007134:	f000 fade 	bl	80076f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8007138:	201b      	movs	r0, #27
 800713a:	f000 fb07 	bl	800774c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800713e:	e022      	b.n	8007186 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007148:	d10c      	bne.n	8007164 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800714a:	4b12      	ldr	r3, [pc, #72]	@ (8007194 <HAL_TIM_Base_MspInit+0xa0>)
 800714c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800714e:	4a11      	ldr	r2, [pc, #68]	@ (8007194 <HAL_TIM_Base_MspInit+0xa0>)
 8007150:	f043 0301 	orr.w	r3, r3, #1
 8007154:	6413      	str	r3, [r2, #64]	@ 0x40
 8007156:	4b0f      	ldr	r3, [pc, #60]	@ (8007194 <HAL_TIM_Base_MspInit+0xa0>)
 8007158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	613b      	str	r3, [r7, #16]
 8007160:	693b      	ldr	r3, [r7, #16]
}
 8007162:	e010      	b.n	8007186 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a0b      	ldr	r2, [pc, #44]	@ (8007198 <HAL_TIM_Base_MspInit+0xa4>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d10b      	bne.n	8007186 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800716e:	4b09      	ldr	r3, [pc, #36]	@ (8007194 <HAL_TIM_Base_MspInit+0xa0>)
 8007170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007172:	4a08      	ldr	r2, [pc, #32]	@ (8007194 <HAL_TIM_Base_MspInit+0xa0>)
 8007174:	f043 0304 	orr.w	r3, r3, #4
 8007178:	6413      	str	r3, [r2, #64]	@ 0x40
 800717a:	4b06      	ldr	r3, [pc, #24]	@ (8007194 <HAL_TIM_Base_MspInit+0xa0>)
 800717c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800717e:	f003 0304 	and.w	r3, r3, #4
 8007182:	60fb      	str	r3, [r7, #12]
 8007184:	68fb      	ldr	r3, [r7, #12]
}
 8007186:	bf00      	nop
 8007188:	3718      	adds	r7, #24
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	40010000 	.word	0x40010000
 8007194:	40023800 	.word	0x40023800
 8007198:	40000800 	.word	0x40000800

0800719c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b08a      	sub	sp, #40	@ 0x28
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071a4:	f107 0314 	add.w	r3, r7, #20
 80071a8:	2200      	movs	r2, #0
 80071aa:	601a      	str	r2, [r3, #0]
 80071ac:	605a      	str	r2, [r3, #4]
 80071ae:	609a      	str	r2, [r3, #8]
 80071b0:	60da      	str	r2, [r3, #12]
 80071b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071bc:	d11d      	bne.n	80071fa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071be:	4b22      	ldr	r3, [pc, #136]	@ (8007248 <HAL_TIM_MspPostInit+0xac>)
 80071c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c2:	4a21      	ldr	r2, [pc, #132]	@ (8007248 <HAL_TIM_MspPostInit+0xac>)
 80071c4:	f043 0302 	orr.w	r3, r3, #2
 80071c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80071ca:	4b1f      	ldr	r3, [pc, #124]	@ (8007248 <HAL_TIM_MspPostInit+0xac>)
 80071cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ce:	f003 0302 	and.w	r3, r3, #2
 80071d2:	613b      	str	r3, [r7, #16]
 80071d4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = SPINDLE_PWM_L_Pin|SPINDLE_PWM_R_Pin;
 80071d6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80071da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071dc:	2302      	movs	r3, #2
 80071de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071e0:	2300      	movs	r3, #0
 80071e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071e4:	2300      	movs	r3, #0
 80071e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80071e8:	2301      	movs	r3, #1
 80071ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071ec:	f107 0314 	add.w	r3, r7, #20
 80071f0:	4619      	mov	r1, r3
 80071f2:	4816      	ldr	r0, [pc, #88]	@ (800724c <HAL_TIM_MspPostInit+0xb0>)
 80071f4:	f000 fc7e 	bl	8007af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80071f8:	e021      	b.n	800723e <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a14      	ldr	r2, [pc, #80]	@ (8007250 <HAL_TIM_MspPostInit+0xb4>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d11c      	bne.n	800723e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007204:	4b10      	ldr	r3, [pc, #64]	@ (8007248 <HAL_TIM_MspPostInit+0xac>)
 8007206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007208:	4a0f      	ldr	r2, [pc, #60]	@ (8007248 <HAL_TIM_MspPostInit+0xac>)
 800720a:	f043 0308 	orr.w	r3, r3, #8
 800720e:	6313      	str	r3, [r2, #48]	@ 0x30
 8007210:	4b0d      	ldr	r3, [pc, #52]	@ (8007248 <HAL_TIM_MspPostInit+0xac>)
 8007212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007214:	f003 0308 	and.w	r3, r3, #8
 8007218:	60fb      	str	r3, [r7, #12]
 800721a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800721c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007222:	2302      	movs	r3, #2
 8007224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007226:	2300      	movs	r3, #0
 8007228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800722a:	2300      	movs	r3, #0
 800722c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800722e:	2302      	movs	r3, #2
 8007230:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007232:	f107 0314 	add.w	r3, r7, #20
 8007236:	4619      	mov	r1, r3
 8007238:	4806      	ldr	r0, [pc, #24]	@ (8007254 <HAL_TIM_MspPostInit+0xb8>)
 800723a:	f000 fc5b 	bl	8007af4 <HAL_GPIO_Init>
}
 800723e:	bf00      	nop
 8007240:	3728      	adds	r7, #40	@ 0x28
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	40023800 	.word	0x40023800
 800724c:	40020400 	.word	0x40020400
 8007250:	40000800 	.word	0x40000800
 8007254:	40020c00 	.word	0x40020c00

08007258 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b0aa      	sub	sp, #168	@ 0xa8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007260:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8007264:	2200      	movs	r2, #0
 8007266:	601a      	str	r2, [r3, #0]
 8007268:	605a      	str	r2, [r3, #4]
 800726a:	609a      	str	r2, [r3, #8]
 800726c:	60da      	str	r2, [r3, #12]
 800726e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007270:	f107 0310 	add.w	r3, r7, #16
 8007274:	2284      	movs	r2, #132	@ 0x84
 8007276:	2100      	movs	r1, #0
 8007278:	4618      	mov	r0, r3
 800727a:	f00d fb51 	bl	8014920 <memset>
  if(huart->Instance==USART3)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a22      	ldr	r2, [pc, #136]	@ (800730c <HAL_UART_MspInit+0xb4>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d13c      	bne.n	8007302 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8007288:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800728c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800728e:	2300      	movs	r3, #0
 8007290:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007292:	f107 0310 	add.w	r3, r7, #16
 8007296:	4618      	mov	r0, r3
 8007298:	f001 fde4 	bl	8008e64 <HAL_RCCEx_PeriphCLKConfig>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d001      	beq.n	80072a6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80072a2:	f7ff fbc0 	bl	8006a26 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80072a6:	4b1a      	ldr	r3, [pc, #104]	@ (8007310 <HAL_UART_MspInit+0xb8>)
 80072a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072aa:	4a19      	ldr	r2, [pc, #100]	@ (8007310 <HAL_UART_MspInit+0xb8>)
 80072ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80072b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80072b2:	4b17      	ldr	r3, [pc, #92]	@ (8007310 <HAL_UART_MspInit+0xb8>)
 80072b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80072ba:	60fb      	str	r3, [r7, #12]
 80072bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80072be:	4b14      	ldr	r3, [pc, #80]	@ (8007310 <HAL_UART_MspInit+0xb8>)
 80072c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072c2:	4a13      	ldr	r2, [pc, #76]	@ (8007310 <HAL_UART_MspInit+0xb8>)
 80072c4:	f043 0308 	orr.w	r3, r3, #8
 80072c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80072ca:	4b11      	ldr	r3, [pc, #68]	@ (8007310 <HAL_UART_MspInit+0xb8>)
 80072cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ce:	f003 0308 	and.w	r3, r3, #8
 80072d2:	60bb      	str	r3, [r7, #8]
 80072d4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART_TX_Pin|DEBUG_UART_RX_Pin;
 80072d6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80072da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072de:	2302      	movs	r3, #2
 80072e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072e4:	2300      	movs	r3, #0
 80072e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072ea:	2303      	movs	r3, #3
 80072ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80072f0:	2307      	movs	r3, #7
 80072f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80072f6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80072fa:	4619      	mov	r1, r3
 80072fc:	4805      	ldr	r0, [pc, #20]	@ (8007314 <HAL_UART_MspInit+0xbc>)
 80072fe:	f000 fbf9 	bl	8007af4 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8007302:	bf00      	nop
 8007304:	37a8      	adds	r7, #168	@ 0xa8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	40004800 	.word	0x40004800
 8007310:	40023800 	.word	0x40023800
 8007314:	40020c00 	.word	0x40020c00

08007318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007318:	b480      	push	{r7}
 800731a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800731c:	bf00      	nop
 800731e:	e7fd      	b.n	800731c <NMI_Handler+0x4>

08007320 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007320:	b480      	push	{r7}
 8007322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007324:	bf00      	nop
 8007326:	e7fd      	b.n	8007324 <HardFault_Handler+0x4>

08007328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007328:	b480      	push	{r7}
 800732a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800732c:	bf00      	nop
 800732e:	e7fd      	b.n	800732c <MemManage_Handler+0x4>

08007330 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007330:	b480      	push	{r7}
 8007332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007334:	bf00      	nop
 8007336:	e7fd      	b.n	8007334 <BusFault_Handler+0x4>

08007338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007338:	b480      	push	{r7}
 800733a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800733c:	bf00      	nop
 800733e:	e7fd      	b.n	800733c <UsageFault_Handler+0x4>

08007340 <DebugMon_Handler>:
void DebugMon_Handler(void)
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
#endif
void DebugMon_Handler(void)
{
 8007340:	b480      	push	{r7}
 8007342:	af00      	add	r7, sp, #0
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
}
 8007344:	bf00      	nop
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr

0800734e <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
#endif
void SysTick_Handler(void)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	af00      	add	r7, sp, #0
  extern void xPortSysTickHandler( void );
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007352:	f000 f89b 	bl	800748c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  xPortSysTickHandler();
 8007356:	f00a ff07 	bl	8012168 <xPortSysTickHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 800735a:	bf00      	nop
 800735c:	bd80      	pop	{r7, pc}
	...

08007360 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007364:	4802      	ldr	r0, [pc, #8]	@ (8007370 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8007366:	f004 fb9d 	bl	800baa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800736a:	bf00      	nop
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	20000368 	.word	0x20000368

08007374 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007378:	4802      	ldr	r0, [pc, #8]	@ (8007384 <TIM1_CC_IRQHandler+0x10>)
 800737a:	f004 fb93 	bl	800baa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800737e:	bf00      	nop
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	20000368 	.word	0x20000368

08007388 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800738c:	4802      	ldr	r0, [pc, #8]	@ (8007398 <SPI1_IRQHandler+0x10>)
 800738e:	f003 f987 	bl	800a6a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8007392:	bf00      	nop
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	20000304 	.word	0x20000304

0800739c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800739c:	b480      	push	{r7}
 800739e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80073a0:	4b06      	ldr	r3, [pc, #24]	@ (80073bc <SystemInit+0x20>)
 80073a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073a6:	4a05      	ldr	r2, [pc, #20]	@ (80073bc <SystemInit+0x20>)
 80073a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80073ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80073b0:	bf00      	nop
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	e000ed00 	.word	0xe000ed00

080073c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80073c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80073f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80073c4:	f7ff ffea 	bl	800739c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80073c8:	480c      	ldr	r0, [pc, #48]	@ (80073fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80073ca:	490d      	ldr	r1, [pc, #52]	@ (8007400 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80073cc:	4a0d      	ldr	r2, [pc, #52]	@ (8007404 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80073ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80073d0:	e002      	b.n	80073d8 <LoopCopyDataInit>

080073d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80073d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80073d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80073d6:	3304      	adds	r3, #4

080073d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80073d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80073da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80073dc:	d3f9      	bcc.n	80073d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80073de:	4a0a      	ldr	r2, [pc, #40]	@ (8007408 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80073e0:	4c0a      	ldr	r4, [pc, #40]	@ (800740c <LoopFillZerobss+0x22>)
  movs r3, #0
 80073e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80073e4:	e001      	b.n	80073ea <LoopFillZerobss>

080073e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80073e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80073e8:	3204      	adds	r2, #4

080073ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80073ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80073ec:	d3fb      	bcc.n	80073e6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80073ee:	f00d fbd5 	bl	8014b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80073f2:	f7fe fe9b 	bl	800612c <main>
  bx  lr    
 80073f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80073f8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80073fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007400:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8007404:	080196a4 	.word	0x080196a4
  ldr r2, =_sbss
 8007408:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 800740c:	200007e8 	.word	0x200007e8

08007410 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007410:	e7fe      	b.n	8007410 <ADC_IRQHandler>

08007412 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007416:	2003      	movs	r0, #3
 8007418:	f000 f94c 	bl	80076b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800741c:	200f      	movs	r0, #15
 800741e:	f000 f805 	bl	800742c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007422:	f7ff fdf7 	bl	8007014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	bd80      	pop	{r7, pc}

0800742c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007434:	4b12      	ldr	r3, [pc, #72]	@ (8007480 <HAL_InitTick+0x54>)
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	4b12      	ldr	r3, [pc, #72]	@ (8007484 <HAL_InitTick+0x58>)
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	4619      	mov	r1, r3
 800743e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007442:	fbb3 f3f1 	udiv	r3, r3, r1
 8007446:	fbb2 f3f3 	udiv	r3, r2, r3
 800744a:	4618      	mov	r0, r3
 800744c:	f000 f996 	bl	800777c <HAL_SYSTICK_Config>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d001      	beq.n	800745a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e00e      	b.n	8007478 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2b0f      	cmp	r3, #15
 800745e:	d80a      	bhi.n	8007476 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007460:	2200      	movs	r2, #0
 8007462:	6879      	ldr	r1, [r7, #4]
 8007464:	f04f 30ff 	mov.w	r0, #4294967295
 8007468:	f000 f944 	bl	80076f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800746c:	4a06      	ldr	r2, [pc, #24]	@ (8007488 <HAL_InitTick+0x5c>)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007472:	2300      	movs	r3, #0
 8007474:	e000      	b.n	8007478 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
}
 8007478:	4618      	mov	r0, r3
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	2000004c 	.word	0x2000004c
 8007484:	20000054 	.word	0x20000054
 8007488:	20000050 	.word	0x20000050

0800748c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800748c:	b480      	push	{r7}
 800748e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007490:	4b06      	ldr	r3, [pc, #24]	@ (80074ac <HAL_IncTick+0x20>)
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	461a      	mov	r2, r3
 8007496:	4b06      	ldr	r3, [pc, #24]	@ (80074b0 <HAL_IncTick+0x24>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4413      	add	r3, r2
 800749c:	4a04      	ldr	r2, [pc, #16]	@ (80074b0 <HAL_IncTick+0x24>)
 800749e:	6013      	str	r3, [r2, #0]
}
 80074a0:	bf00      	nop
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	20000054 	.word	0x20000054
 80074b0:	200004f4 	.word	0x200004f4

080074b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80074b4:	b480      	push	{r7}
 80074b6:	af00      	add	r7, sp, #0
  return uwTick;
 80074b8:	4b03      	ldr	r3, [pc, #12]	@ (80074c8 <HAL_GetTick+0x14>)
 80074ba:	681b      	ldr	r3, [r3, #0]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr
 80074c6:	bf00      	nop
 80074c8:	200004f4 	.word	0x200004f4

080074cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80074d4:	f7ff ffee 	bl	80074b4 <HAL_GetTick>
 80074d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e4:	d005      	beq.n	80074f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80074e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007510 <HAL_Delay+0x44>)
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	461a      	mov	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	4413      	add	r3, r2
 80074f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80074f2:	bf00      	nop
 80074f4:	f7ff ffde 	bl	80074b4 <HAL_GetTick>
 80074f8:	4602      	mov	r2, r0
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	429a      	cmp	r2, r3
 8007502:	d8f7      	bhi.n	80074f4 <HAL_Delay+0x28>
  {
  }
}
 8007504:	bf00      	nop
 8007506:	bf00      	nop
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	20000054 	.word	0x20000054

08007514 <__NVIC_SetPriorityGrouping>:
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f003 0307 	and.w	r3, r3, #7
 8007522:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007524:	4b0b      	ldr	r3, [pc, #44]	@ (8007554 <__NVIC_SetPriorityGrouping+0x40>)
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800752a:	68ba      	ldr	r2, [r7, #8]
 800752c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007530:	4013      	ands	r3, r2
 8007532:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800753c:	4b06      	ldr	r3, [pc, #24]	@ (8007558 <__NVIC_SetPriorityGrouping+0x44>)
 800753e:	4313      	orrs	r3, r2
 8007540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007542:	4a04      	ldr	r2, [pc, #16]	@ (8007554 <__NVIC_SetPriorityGrouping+0x40>)
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	60d3      	str	r3, [r2, #12]
}
 8007548:	bf00      	nop
 800754a:	3714      	adds	r7, #20
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr
 8007554:	e000ed00 	.word	0xe000ed00
 8007558:	05fa0000 	.word	0x05fa0000

0800755c <__NVIC_GetPriorityGrouping>:
{
 800755c:	b480      	push	{r7}
 800755e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007560:	4b04      	ldr	r3, [pc, #16]	@ (8007574 <__NVIC_GetPriorityGrouping+0x18>)
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	0a1b      	lsrs	r3, r3, #8
 8007566:	f003 0307 	and.w	r3, r3, #7
}
 800756a:	4618      	mov	r0, r3
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr
 8007574:	e000ed00 	.word	0xe000ed00

08007578 <__NVIC_EnableIRQ>:
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	4603      	mov	r3, r0
 8007580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007586:	2b00      	cmp	r3, #0
 8007588:	db0b      	blt.n	80075a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800758a:	79fb      	ldrb	r3, [r7, #7]
 800758c:	f003 021f 	and.w	r2, r3, #31
 8007590:	4907      	ldr	r1, [pc, #28]	@ (80075b0 <__NVIC_EnableIRQ+0x38>)
 8007592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007596:	095b      	lsrs	r3, r3, #5
 8007598:	2001      	movs	r0, #1
 800759a:	fa00 f202 	lsl.w	r2, r0, r2
 800759e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80075a2:	bf00      	nop
 80075a4:	370c      	adds	r7, #12
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	e000e100 	.word	0xe000e100

080075b4 <__NVIC_SetPriority>:
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	4603      	mov	r3, r0
 80075bc:	6039      	str	r1, [r7, #0]
 80075be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	db0a      	blt.n	80075de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	b2da      	uxtb	r2, r3
 80075cc:	490c      	ldr	r1, [pc, #48]	@ (8007600 <__NVIC_SetPriority+0x4c>)
 80075ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075d2:	0112      	lsls	r2, r2, #4
 80075d4:	b2d2      	uxtb	r2, r2
 80075d6:	440b      	add	r3, r1
 80075d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80075dc:	e00a      	b.n	80075f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	4908      	ldr	r1, [pc, #32]	@ (8007604 <__NVIC_SetPriority+0x50>)
 80075e4:	79fb      	ldrb	r3, [r7, #7]
 80075e6:	f003 030f 	and.w	r3, r3, #15
 80075ea:	3b04      	subs	r3, #4
 80075ec:	0112      	lsls	r2, r2, #4
 80075ee:	b2d2      	uxtb	r2, r2
 80075f0:	440b      	add	r3, r1
 80075f2:	761a      	strb	r2, [r3, #24]
}
 80075f4:	bf00      	nop
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr
 8007600:	e000e100 	.word	0xe000e100
 8007604:	e000ed00 	.word	0xe000ed00

08007608 <NVIC_EncodePriority>:
{
 8007608:	b480      	push	{r7}
 800760a:	b089      	sub	sp, #36	@ 0x24
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f003 0307 	and.w	r3, r3, #7
 800761a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	f1c3 0307 	rsb	r3, r3, #7
 8007622:	2b04      	cmp	r3, #4
 8007624:	bf28      	it	cs
 8007626:	2304      	movcs	r3, #4
 8007628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	3304      	adds	r3, #4
 800762e:	2b06      	cmp	r3, #6
 8007630:	d902      	bls.n	8007638 <NVIC_EncodePriority+0x30>
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	3b03      	subs	r3, #3
 8007636:	e000      	b.n	800763a <NVIC_EncodePriority+0x32>
 8007638:	2300      	movs	r3, #0
 800763a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800763c:	f04f 32ff 	mov.w	r2, #4294967295
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	fa02 f303 	lsl.w	r3, r2, r3
 8007646:	43da      	mvns	r2, r3
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	401a      	ands	r2, r3
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007650:	f04f 31ff 	mov.w	r1, #4294967295
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	fa01 f303 	lsl.w	r3, r1, r3
 800765a:	43d9      	mvns	r1, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007660:	4313      	orrs	r3, r2
}
 8007662:	4618      	mov	r0, r3
 8007664:	3724      	adds	r7, #36	@ 0x24
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
	...

08007670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	3b01      	subs	r3, #1
 800767c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007680:	d301      	bcc.n	8007686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007682:	2301      	movs	r3, #1
 8007684:	e00f      	b.n	80076a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007686:	4a0a      	ldr	r2, [pc, #40]	@ (80076b0 <SysTick_Config+0x40>)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	3b01      	subs	r3, #1
 800768c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800768e:	210f      	movs	r1, #15
 8007690:	f04f 30ff 	mov.w	r0, #4294967295
 8007694:	f7ff ff8e 	bl	80075b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007698:	4b05      	ldr	r3, [pc, #20]	@ (80076b0 <SysTick_Config+0x40>)
 800769a:	2200      	movs	r2, #0
 800769c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800769e:	4b04      	ldr	r3, [pc, #16]	@ (80076b0 <SysTick_Config+0x40>)
 80076a0:	2207      	movs	r2, #7
 80076a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	e000e010 	.word	0xe000e010

080076b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2b07      	cmp	r3, #7
 80076c0:	d00f      	beq.n	80076e2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2b06      	cmp	r3, #6
 80076c6:	d00c      	beq.n	80076e2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b05      	cmp	r3, #5
 80076cc:	d009      	beq.n	80076e2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2b04      	cmp	r3, #4
 80076d2:	d006      	beq.n	80076e2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b03      	cmp	r3, #3
 80076d8:	d003      	beq.n	80076e2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80076da:	2191      	movs	r1, #145	@ 0x91
 80076dc:	4804      	ldr	r0, [pc, #16]	@ (80076f0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80076de:	f7ff f9a9 	bl	8006a34 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f7ff ff16 	bl	8007514 <__NVIC_SetPriorityGrouping>
}
 80076e8:	bf00      	nop
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	0801890c 	.word	0x0801890c

080076f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b086      	sub	sp, #24
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	4603      	mov	r3, r0
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	607a      	str	r2, [r7, #4]
 8007700:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007702:	2300      	movs	r3, #0
 8007704:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2b0f      	cmp	r3, #15
 800770a:	d903      	bls.n	8007714 <HAL_NVIC_SetPriority+0x20>
 800770c:	21a9      	movs	r1, #169	@ 0xa9
 800770e:	480e      	ldr	r0, [pc, #56]	@ (8007748 <HAL_NVIC_SetPriority+0x54>)
 8007710:	f7ff f990 	bl	8006a34 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	2b0f      	cmp	r3, #15
 8007718:	d903      	bls.n	8007722 <HAL_NVIC_SetPriority+0x2e>
 800771a:	21aa      	movs	r1, #170	@ 0xaa
 800771c:	480a      	ldr	r0, [pc, #40]	@ (8007748 <HAL_NVIC_SetPriority+0x54>)
 800771e:	f7ff f989 	bl	8006a34 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007722:	f7ff ff1b 	bl	800755c <__NVIC_GetPriorityGrouping>
 8007726:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	68b9      	ldr	r1, [r7, #8]
 800772c:	6978      	ldr	r0, [r7, #20]
 800772e:	f7ff ff6b 	bl	8007608 <NVIC_EncodePriority>
 8007732:	4602      	mov	r2, r0
 8007734:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007738:	4611      	mov	r1, r2
 800773a:	4618      	mov	r0, r3
 800773c:	f7ff ff3a 	bl	80075b4 <__NVIC_SetPriority>
}
 8007740:	bf00      	nop
 8007742:	3718      	adds	r7, #24
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	0801890c 	.word	0x0801890c

0800774c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	4603      	mov	r3, r0
 8007754:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8007756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800775a:	2b00      	cmp	r3, #0
 800775c:	da03      	bge.n	8007766 <HAL_NVIC_EnableIRQ+0x1a>
 800775e:	21bd      	movs	r1, #189	@ 0xbd
 8007760:	4805      	ldr	r0, [pc, #20]	@ (8007778 <HAL_NVIC_EnableIRQ+0x2c>)
 8007762:	f7ff f967 	bl	8006a34 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800776a:	4618      	mov	r0, r3
 800776c:	f7ff ff04 	bl	8007578 <__NVIC_EnableIRQ>
}
 8007770:	bf00      	nop
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	0801890c 	.word	0x0801890c

0800777c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f7ff ff73 	bl	8007670 <SysTick_Config>
 800778a:	4603      	mov	r3, r0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8007794:	b480      	push	{r7}
 8007796:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8007798:	f3bf 8f5f 	dmb	sy
}
 800779c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800779e:	4b07      	ldr	r3, [pc, #28]	@ (80077bc <HAL_MPU_Disable+0x28>)
 80077a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a2:	4a06      	ldr	r2, [pc, #24]	@ (80077bc <HAL_MPU_Disable+0x28>)
 80077a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077a8:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80077aa:	4b05      	ldr	r3, [pc, #20]	@ (80077c0 <HAL_MPU_Disable+0x2c>)
 80077ac:	2200      	movs	r2, #0
 80077ae:	605a      	str	r2, [r3, #4]
}
 80077b0:	bf00      	nop
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	e000ed00 	.word	0xe000ed00
 80077c0:	e000ed90 	.word	0xe000ed90

080077c4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80077cc:	4a0b      	ldr	r2, [pc, #44]	@ (80077fc <HAL_MPU_Enable+0x38>)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f043 0301 	orr.w	r3, r3, #1
 80077d4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80077d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007800 <HAL_MPU_Enable+0x3c>)
 80077d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077da:	4a09      	ldr	r2, [pc, #36]	@ (8007800 <HAL_MPU_Enable+0x3c>)
 80077dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077e0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80077e2:	f3bf 8f4f 	dsb	sy
}
 80077e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80077e8:	f3bf 8f6f 	isb	sy
}
 80077ec:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80077ee:	bf00      	nop
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	e000ed90 	.word	0xe000ed90
 8007800:	e000ed00 	.word	0xe000ed00

08007804 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	785b      	ldrb	r3, [r3, #1]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d020      	beq.n	8007856 <HAL_MPU_ConfigRegion+0x52>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	785b      	ldrb	r3, [r3, #1]
 8007818:	2b01      	cmp	r3, #1
 800781a:	d01c      	beq.n	8007856 <HAL_MPU_ConfigRegion+0x52>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	785b      	ldrb	r3, [r3, #1]
 8007820:	2b02      	cmp	r3, #2
 8007822:	d018      	beq.n	8007856 <HAL_MPU_ConfigRegion+0x52>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	785b      	ldrb	r3, [r3, #1]
 8007828:	2b03      	cmp	r3, #3
 800782a:	d014      	beq.n	8007856 <HAL_MPU_ConfigRegion+0x52>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	785b      	ldrb	r3, [r3, #1]
 8007830:	2b04      	cmp	r3, #4
 8007832:	d010      	beq.n	8007856 <HAL_MPU_ConfigRegion+0x52>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	785b      	ldrb	r3, [r3, #1]
 8007838:	2b05      	cmp	r3, #5
 800783a:	d00c      	beq.n	8007856 <HAL_MPU_ConfigRegion+0x52>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	785b      	ldrb	r3, [r3, #1]
 8007840:	2b06      	cmp	r3, #6
 8007842:	d008      	beq.n	8007856 <HAL_MPU_ConfigRegion+0x52>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	785b      	ldrb	r3, [r3, #1]
 8007848:	2b07      	cmp	r3, #7
 800784a:	d004      	beq.n	8007856 <HAL_MPU_ConfigRegion+0x52>
 800784c:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 8007850:	488c      	ldr	r0, [pc, #560]	@ (8007a84 <HAL_MPU_ConfigRegion+0x280>)
 8007852:	f7ff f8ef 	bl	8006a34 <assert_failed>
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d008      	beq.n	8007870 <HAL_MPU_ConfigRegion+0x6c>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d004      	beq.n	8007870 <HAL_MPU_ConfigRegion+0x6c>
 8007866:	f240 114f 	movw	r1, #335	@ 0x14f
 800786a:	4886      	ldr	r0, [pc, #536]	@ (8007a84 <HAL_MPU_ConfigRegion+0x280>)
 800786c:	f7ff f8e2 	bl	8006a34 <assert_failed>
  assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	7b1b      	ldrb	r3, [r3, #12]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d008      	beq.n	800788a <HAL_MPU_ConfigRegion+0x86>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	7b1b      	ldrb	r3, [r3, #12]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d004      	beq.n	800788a <HAL_MPU_ConfigRegion+0x86>
 8007880:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8007884:	487f      	ldr	r0, [pc, #508]	@ (8007a84 <HAL_MPU_ConfigRegion+0x280>)
 8007886:	f7ff f8d5 	bl	8006a34 <assert_failed>
  assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	7adb      	ldrb	r3, [r3, #11]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d018      	beq.n	80078c4 <HAL_MPU_ConfigRegion+0xc0>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	7adb      	ldrb	r3, [r3, #11]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d014      	beq.n	80078c4 <HAL_MPU_ConfigRegion+0xc0>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	7adb      	ldrb	r3, [r3, #11]
 800789e:	2b02      	cmp	r3, #2
 80078a0:	d010      	beq.n	80078c4 <HAL_MPU_ConfigRegion+0xc0>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	7adb      	ldrb	r3, [r3, #11]
 80078a6:	2b03      	cmp	r3, #3
 80078a8:	d00c      	beq.n	80078c4 <HAL_MPU_ConfigRegion+0xc0>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	7adb      	ldrb	r3, [r3, #11]
 80078ae:	2b05      	cmp	r3, #5
 80078b0:	d008      	beq.n	80078c4 <HAL_MPU_ConfigRegion+0xc0>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	7adb      	ldrb	r3, [r3, #11]
 80078b6:	2b06      	cmp	r3, #6
 80078b8:	d004      	beq.n	80078c4 <HAL_MPU_ConfigRegion+0xc0>
 80078ba:	f240 1151 	movw	r1, #337	@ 0x151
 80078be:	4871      	ldr	r0, [pc, #452]	@ (8007a84 <HAL_MPU_ConfigRegion+0x280>)
 80078c0:	f7ff f8b8 	bl	8006a34 <assert_failed>
  assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	7a9b      	ldrb	r3, [r3, #10]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00c      	beq.n	80078e6 <HAL_MPU_ConfigRegion+0xe2>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	7a9b      	ldrb	r3, [r3, #10]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d008      	beq.n	80078e6 <HAL_MPU_ConfigRegion+0xe2>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	7a9b      	ldrb	r3, [r3, #10]
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d004      	beq.n	80078e6 <HAL_MPU_ConfigRegion+0xe2>
 80078dc:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 80078e0:	4868      	ldr	r0, [pc, #416]	@ (8007a84 <HAL_MPU_ConfigRegion+0x280>)
 80078e2:	f7ff f8a7 	bl	8006a34 <assert_failed>
  assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	7b5b      	ldrb	r3, [r3, #13]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d008      	beq.n	8007900 <HAL_MPU_ConfigRegion+0xfc>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	7b5b      	ldrb	r3, [r3, #13]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d004      	beq.n	8007900 <HAL_MPU_ConfigRegion+0xfc>
 80078f6:	f240 1153 	movw	r1, #339	@ 0x153
 80078fa:	4862      	ldr	r0, [pc, #392]	@ (8007a84 <HAL_MPU_ConfigRegion+0x280>)
 80078fc:	f7ff f89a 	bl	8006a34 <assert_failed>
  assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	7b9b      	ldrb	r3, [r3, #14]
 8007904:	2b01      	cmp	r3, #1
 8007906:	d008      	beq.n	800791a <HAL_MPU_ConfigRegion+0x116>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	7b9b      	ldrb	r3, [r3, #14]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d004      	beq.n	800791a <HAL_MPU_ConfigRegion+0x116>
 8007910:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8007914:	485b      	ldr	r0, [pc, #364]	@ (8007a84 <HAL_MPU_ConfigRegion+0x280>)
 8007916:	f7ff f88d 	bl	8006a34 <assert_failed>
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	7bdb      	ldrb	r3, [r3, #15]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d008      	beq.n	8007934 <HAL_MPU_ConfigRegion+0x130>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	7bdb      	ldrb	r3, [r3, #15]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d004      	beq.n	8007934 <HAL_MPU_ConfigRegion+0x130>
 800792a:	f240 1155 	movw	r1, #341	@ 0x155
 800792e:	4855      	ldr	r0, [pc, #340]	@ (8007a84 <HAL_MPU_ConfigRegion+0x280>)
 8007930:	f7ff f880 	bl	8006a34 <assert_failed>
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	7a5b      	ldrb	r3, [r3, #9]
 8007938:	2bff      	cmp	r3, #255	@ 0xff
 800793a:	d104      	bne.n	8007946 <HAL_MPU_ConfigRegion+0x142>
 800793c:	f44f 71ab 	mov.w	r1, #342	@ 0x156
 8007940:	4850      	ldr	r0, [pc, #320]	@ (8007a84 <HAL_MPU_ConfigRegion+0x280>)
 8007942:	f7ff f877 	bl	8006a34 <assert_failed>
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	7a1b      	ldrb	r3, [r3, #8]
 800794a:	2b04      	cmp	r3, #4
 800794c:	d070      	beq.n	8007a30 <HAL_MPU_ConfigRegion+0x22c>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	7a1b      	ldrb	r3, [r3, #8]
 8007952:	2b05      	cmp	r3, #5
 8007954:	d06c      	beq.n	8007a30 <HAL_MPU_ConfigRegion+0x22c>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	7a1b      	ldrb	r3, [r3, #8]
 800795a:	2b06      	cmp	r3, #6
 800795c:	d068      	beq.n	8007a30 <HAL_MPU_ConfigRegion+0x22c>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	7a1b      	ldrb	r3, [r3, #8]
 8007962:	2b07      	cmp	r3, #7
 8007964:	d064      	beq.n	8007a30 <HAL_MPU_ConfigRegion+0x22c>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	7a1b      	ldrb	r3, [r3, #8]
 800796a:	2b08      	cmp	r3, #8
 800796c:	d060      	beq.n	8007a30 <HAL_MPU_ConfigRegion+0x22c>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	7a1b      	ldrb	r3, [r3, #8]
 8007972:	2b09      	cmp	r3, #9
 8007974:	d05c      	beq.n	8007a30 <HAL_MPU_ConfigRegion+0x22c>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	7a1b      	ldrb	r3, [r3, #8]
 800797a:	2b0a      	cmp	r3, #10
 800797c:	d058      	beq.n	8007a30 <HAL_MPU_ConfigRegion+0x22c>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	7a1b      	ldrb	r3, [r3, #8]
 8007982:	2b0b      	cmp	r3, #11
 8007984:	d054      	beq.n	8007a30 <HAL_MPU_ConfigRegion+0x22c>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	7a1b      	ldrb	r3, [r3, #8]
 800798a:	2b0c      	cmp	r3, #12
 800798c:	d050      	beq.n	8007a30 <HAL_MPU_ConfigRegion+0x22c>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	7a1b      	ldrb	r3, [r3, #8]
 8007992:	2b0d      	cmp	r3, #13
 8007994:	d04c      	beq.n	8007a30 <HAL_MPU_ConfigRegion+0x22c>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	7a1b      	ldrb	r3, [r3, #8]
 800799a:	2b0e      	cmp	r3, #14
 800799c:	d048      	beq.n	8007a30 <HAL_MPU_ConfigRegion+0x22c>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	7a1b      	ldrb	r3, [r3, #8]
 80079a2:	2b0f      	cmp	r3, #15
 80079a4:	d044      	beq.n	8007a30 <HAL_MPU_ConfigRegion+0x22c>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	7a1b      	ldrb	r3, [r3, #8]
 80079aa:	2b10      	cmp	r3, #16
 80079ac:	d040      	beq.n	8007a30 <HAL_MPU_ConfigRegion+0x22c>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	7a1b      	ldrb	r3, [r3, #8]
 80079b2:	2b11      	cmp	r3, #17
 80079b4:	d03c      	beq.n	8007a30 <HAL_MPU_ConfigRegion+0x22c>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	7a1b      	ldrb	r3, [r3, #8]
 80079ba:	2b12      	cmp	r3, #18
 80079bc:	d038      	beq.n	8007a30 <HAL_MPU_ConfigRegion+0x22c>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	7a1b      	ldrb	r3, [r3, #8]
 80079c2:	2b13      	cmp	r3, #19
 80079c4:	d034      	beq.n	8007a30 <HAL_MPU_ConfigRegion+0x22c>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	7a1b      	ldrb	r3, [r3, #8]
 80079ca:	2b14      	cmp	r3, #20
 80079cc:	d030      	beq.n	8007a30 <HAL_MPU_ConfigRegion+0x22c>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	7a1b      	ldrb	r3, [r3, #8]
 80079d2:	2b15      	cmp	r3, #21
 80079d4:	d02c      	beq.n	8007a30 <HAL_MPU_ConfigRegion+0x22c>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	7a1b      	ldrb	r3, [r3, #8]
 80079da:	2b16      	cmp	r3, #22
 80079dc:	d028      	beq.n	8007a30 <HAL_MPU_ConfigRegion+0x22c>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	7a1b      	ldrb	r3, [r3, #8]
 80079e2:	2b17      	cmp	r3, #23
 80079e4:	d024      	beq.n	8007a30 <HAL_MPU_ConfigRegion+0x22c>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	7a1b      	ldrb	r3, [r3, #8]
 80079ea:	2b18      	cmp	r3, #24
 80079ec:	d020      	beq.n	8007a30 <HAL_MPU_ConfigRegion+0x22c>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	7a1b      	ldrb	r3, [r3, #8]
 80079f2:	2b19      	cmp	r3, #25
 80079f4:	d01c      	beq.n	8007a30 <HAL_MPU_ConfigRegion+0x22c>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	7a1b      	ldrb	r3, [r3, #8]
 80079fa:	2b1a      	cmp	r3, #26
 80079fc:	d018      	beq.n	8007a30 <HAL_MPU_ConfigRegion+0x22c>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	7a1b      	ldrb	r3, [r3, #8]
 8007a02:	2b1b      	cmp	r3, #27
 8007a04:	d014      	beq.n	8007a30 <HAL_MPU_ConfigRegion+0x22c>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	7a1b      	ldrb	r3, [r3, #8]
 8007a0a:	2b1c      	cmp	r3, #28
 8007a0c:	d010      	beq.n	8007a30 <HAL_MPU_ConfigRegion+0x22c>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	7a1b      	ldrb	r3, [r3, #8]
 8007a12:	2b1d      	cmp	r3, #29
 8007a14:	d00c      	beq.n	8007a30 <HAL_MPU_ConfigRegion+0x22c>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	7a1b      	ldrb	r3, [r3, #8]
 8007a1a:	2b1e      	cmp	r3, #30
 8007a1c:	d008      	beq.n	8007a30 <HAL_MPU_ConfigRegion+0x22c>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	7a1b      	ldrb	r3, [r3, #8]
 8007a22:	2b1f      	cmp	r3, #31
 8007a24:	d004      	beq.n	8007a30 <HAL_MPU_ConfigRegion+0x22c>
 8007a26:	f240 1157 	movw	r1, #343	@ 0x157
 8007a2a:	4816      	ldr	r0, [pc, #88]	@ (8007a84 <HAL_MPU_ConfigRegion+0x280>)
 8007a2c:	f7ff f802 	bl	8006a34 <assert_failed>

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	785a      	ldrb	r2, [r3, #1]
 8007a34:	4b14      	ldr	r3, [pc, #80]	@ (8007a88 <HAL_MPU_ConfigRegion+0x284>)
 8007a36:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8007a38:	4b13      	ldr	r3, [pc, #76]	@ (8007a88 <HAL_MPU_ConfigRegion+0x284>)
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	4a12      	ldr	r2, [pc, #72]	@ (8007a88 <HAL_MPU_ConfigRegion+0x284>)
 8007a3e:	f023 0301 	bic.w	r3, r3, #1
 8007a42:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8007a44:	4a10      	ldr	r2, [pc, #64]	@ (8007a88 <HAL_MPU_ConfigRegion+0x284>)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	7b1b      	ldrb	r3, [r3, #12]
 8007a50:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	7adb      	ldrb	r3, [r3, #11]
 8007a56:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007a58:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	7a9b      	ldrb	r3, [r3, #10]
 8007a5e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007a60:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	7b5b      	ldrb	r3, [r3, #13]
 8007a66:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007a68:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	7b9b      	ldrb	r3, [r3, #14]
 8007a6e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8007a70:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	7bdb      	ldrb	r3, [r3, #15]
 8007a76:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007a78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	7a5b      	ldrb	r3, [r3, #9]
 8007a7e:	021b      	lsls	r3, r3, #8
 8007a80:	e004      	b.n	8007a8c <HAL_MPU_ConfigRegion+0x288>
 8007a82:	bf00      	nop
 8007a84:	0801890c 	.word	0x0801890c
 8007a88:	e000ed90 	.word	0xe000ed90
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007a8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	7a1b      	ldrb	r3, [r3, #8]
 8007a92:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007a94:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	7812      	ldrb	r2, [r2, #0]
 8007a9a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007a9c:	4a03      	ldr	r2, [pc, #12]	@ (8007aac <HAL_MPU_ConfigRegion+0x2a8>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007a9e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007aa0:	6113      	str	r3, [r2, #16]
}
 8007aa2:	bf00      	nop
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	e000ed90 	.word	0xe000ed90

08007ab0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	2b02      	cmp	r3, #2
 8007ac2:	d004      	beq.n	8007ace <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2280      	movs	r2, #128	@ 0x80
 8007ac8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e00c      	b.n	8007ae8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2205      	movs	r2, #5
 8007ad2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f022 0201 	bic.w	r2, r2, #1
 8007ae4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b088      	sub	sp, #32
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007afe:	2300      	movs	r3, #0
 8007b00:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007b02:	2300      	movs	r3, #0
 8007b04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007b06:	2300      	movs	r3, #0
 8007b08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a3a      	ldr	r2, [pc, #232]	@ (8007bfc <HAL_GPIO_Init+0x108>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d02b      	beq.n	8007b6e <HAL_GPIO_Init+0x7a>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a39      	ldr	r2, [pc, #228]	@ (8007c00 <HAL_GPIO_Init+0x10c>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d027      	beq.n	8007b6e <HAL_GPIO_Init+0x7a>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a38      	ldr	r2, [pc, #224]	@ (8007c04 <HAL_GPIO_Init+0x110>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d023      	beq.n	8007b6e <HAL_GPIO_Init+0x7a>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a37      	ldr	r2, [pc, #220]	@ (8007c08 <HAL_GPIO_Init+0x114>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d01f      	beq.n	8007b6e <HAL_GPIO_Init+0x7a>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a36      	ldr	r2, [pc, #216]	@ (8007c0c <HAL_GPIO_Init+0x118>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d01b      	beq.n	8007b6e <HAL_GPIO_Init+0x7a>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a35      	ldr	r2, [pc, #212]	@ (8007c10 <HAL_GPIO_Init+0x11c>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d017      	beq.n	8007b6e <HAL_GPIO_Init+0x7a>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a34      	ldr	r2, [pc, #208]	@ (8007c14 <HAL_GPIO_Init+0x120>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d013      	beq.n	8007b6e <HAL_GPIO_Init+0x7a>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a33      	ldr	r2, [pc, #204]	@ (8007c18 <HAL_GPIO_Init+0x124>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d00f      	beq.n	8007b6e <HAL_GPIO_Init+0x7a>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a32      	ldr	r2, [pc, #200]	@ (8007c1c <HAL_GPIO_Init+0x128>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d00b      	beq.n	8007b6e <HAL_GPIO_Init+0x7a>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a31      	ldr	r2, [pc, #196]	@ (8007c20 <HAL_GPIO_Init+0x12c>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d007      	beq.n	8007b6e <HAL_GPIO_Init+0x7a>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a30      	ldr	r2, [pc, #192]	@ (8007c24 <HAL_GPIO_Init+0x130>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d003      	beq.n	8007b6e <HAL_GPIO_Init+0x7a>
 8007b66:	21aa      	movs	r1, #170	@ 0xaa
 8007b68:	482f      	ldr	r0, [pc, #188]	@ (8007c28 <HAL_GPIO_Init+0x134>)
 8007b6a:	f7fe ff63 	bl	8006a34 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d103      	bne.n	8007b80 <HAL_GPIO_Init+0x8c>
 8007b78:	21ab      	movs	r1, #171	@ 0xab
 8007b7a:	482b      	ldr	r0, [pc, #172]	@ (8007c28 <HAL_GPIO_Init+0x134>)
 8007b7c:	f7fe ff5a 	bl	8006a34 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d035      	beq.n	8007bf4 <HAL_GPIO_Init+0x100>
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d031      	beq.n	8007bf4 <HAL_GPIO_Init+0x100>
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	2b11      	cmp	r3, #17
 8007b96:	d02d      	beq.n	8007bf4 <HAL_GPIO_Init+0x100>
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d029      	beq.n	8007bf4 <HAL_GPIO_Init+0x100>
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	2b12      	cmp	r3, #18
 8007ba6:	d025      	beq.n	8007bf4 <HAL_GPIO_Init+0x100>
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8007bb0:	d020      	beq.n	8007bf4 <HAL_GPIO_Init+0x100>
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8007bba:	d01b      	beq.n	8007bf4 <HAL_GPIO_Init+0x100>
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8007bc4:	d016      	beq.n	8007bf4 <HAL_GPIO_Init+0x100>
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8007bce:	d011      	beq.n	8007bf4 <HAL_GPIO_Init+0x100>
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8007bd8:	d00c      	beq.n	8007bf4 <HAL_GPIO_Init+0x100>
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8007be2:	d007      	beq.n	8007bf4 <HAL_GPIO_Init+0x100>
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	2b03      	cmp	r3, #3
 8007bea:	d003      	beq.n	8007bf4 <HAL_GPIO_Init+0x100>
 8007bec:	21ac      	movs	r1, #172	@ 0xac
 8007bee:	480e      	ldr	r0, [pc, #56]	@ (8007c28 <HAL_GPIO_Init+0x134>)
 8007bf0:	f7fe ff20 	bl	8006a34 <assert_failed>

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	61fb      	str	r3, [r7, #28]
 8007bf8:	e2c7      	b.n	800818a <HAL_GPIO_Init+0x696>
 8007bfa:	bf00      	nop
 8007bfc:	40020000 	.word	0x40020000
 8007c00:	40020400 	.word	0x40020400
 8007c04:	40020800 	.word	0x40020800
 8007c08:	40020c00 	.word	0x40020c00
 8007c0c:	40021000 	.word	0x40021000
 8007c10:	40021400 	.word	0x40021400
 8007c14:	40021800 	.word	0x40021800
 8007c18:	40021c00 	.word	0x40021c00
 8007c1c:	40022000 	.word	0x40022000
 8007c20:	40022400 	.word	0x40022400
 8007c24:	40022800 	.word	0x40022800
 8007c28:	08018948 	.word	0x08018948
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	fa02 f303 	lsl.w	r3, r2, r3
 8007c34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	697a      	ldr	r2, [r7, #20]
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	f040 829d 	bne.w	8008184 <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	f003 0303 	and.w	r3, r3, #3
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d005      	beq.n	8007c62 <HAL_GPIO_Init+0x16e>
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	f003 0303 	and.w	r3, r3, #3
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	d144      	bne.n	8007cec <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00f      	beq.n	8007c8a <HAL_GPIO_Init+0x196>
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d00b      	beq.n	8007c8a <HAL_GPIO_Init+0x196>
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d007      	beq.n	8007c8a <HAL_GPIO_Init+0x196>
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	d003      	beq.n	8007c8a <HAL_GPIO_Init+0x196>
 8007c82:	21bd      	movs	r1, #189	@ 0xbd
 8007c84:	4831      	ldr	r0, [pc, #196]	@ (8007d4c <HAL_GPIO_Init+0x258>)
 8007c86:	f7fe fed5 	bl	8006a34 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	005b      	lsls	r3, r3, #1
 8007c94:	2203      	movs	r2, #3
 8007c96:	fa02 f303 	lsl.w	r3, r2, r3
 8007c9a:	43db      	mvns	r3, r3
 8007c9c:	69ba      	ldr	r2, [r7, #24]
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	68da      	ldr	r2, [r3, #12]
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	005b      	lsls	r3, r3, #1
 8007caa:	fa02 f303 	lsl.w	r3, r2, r3
 8007cae:	69ba      	ldr	r2, [r7, #24]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	69ba      	ldr	r2, [r7, #24]
 8007cb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc8:	43db      	mvns	r3, r3
 8007cca:	69ba      	ldr	r2, [r7, #24]
 8007ccc:	4013      	ands	r3, r2
 8007cce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	091b      	lsrs	r3, r3, #4
 8007cd6:	f003 0201 	and.w	r2, r3, #1
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce0:	69ba      	ldr	r2, [r7, #24]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	69ba      	ldr	r2, [r7, #24]
 8007cea:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	f003 0303 	and.w	r3, r3, #3
 8007cf4:	2b03      	cmp	r3, #3
 8007cf6:	d02b      	beq.n	8007d50 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00b      	beq.n	8007d18 <HAL_GPIO_Init+0x224>
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d007      	beq.n	8007d18 <HAL_GPIO_Init+0x224>
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	2b02      	cmp	r3, #2
 8007d0e:	d003      	beq.n	8007d18 <HAL_GPIO_Init+0x224>
 8007d10:	21ce      	movs	r1, #206	@ 0xce
 8007d12:	480e      	ldr	r0, [pc, #56]	@ (8007d4c <HAL_GPIO_Init+0x258>)
 8007d14:	f7fe fe8e 	bl	8006a34 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	005b      	lsls	r3, r3, #1
 8007d22:	2203      	movs	r2, #3
 8007d24:	fa02 f303 	lsl.w	r3, r2, r3
 8007d28:	43db      	mvns	r3, r3
 8007d2a:	69ba      	ldr	r2, [r7, #24]
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	689a      	ldr	r2, [r3, #8]
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	005b      	lsls	r3, r3, #1
 8007d38:	fa02 f303 	lsl.w	r3, r2, r3
 8007d3c:	69ba      	ldr	r2, [r7, #24]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	69ba      	ldr	r2, [r7, #24]
 8007d46:	60da      	str	r2, [r3, #12]
 8007d48:	e002      	b.n	8007d50 <HAL_GPIO_Init+0x25c>
 8007d4a:	bf00      	nop
 8007d4c:	08018948 	.word	0x08018948
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	f003 0303 	and.w	r3, r3, #3
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	f040 8134 	bne.w	8007fc6 <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f000 810b 	beq.w	8007f7e <HAL_GPIO_Init+0x48a>
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	f000 8106 	beq.w	8007f7e <HAL_GPIO_Init+0x48a>
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	f000 8101 	beq.w	8007f7e <HAL_GPIO_Init+0x48a>
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f000 80fc 	beq.w	8007f7e <HAL_GPIO_Init+0x48a>
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f000 80f7 	beq.w	8007f7e <HAL_GPIO_Init+0x48a>
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	f000 80f2 	beq.w	8007f7e <HAL_GPIO_Init+0x48a>
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	f000 80ed 	beq.w	8007f7e <HAL_GPIO_Init+0x48a>
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	f000 80e8 	beq.w	8007f7e <HAL_GPIO_Init+0x48a>
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	f000 80e3 	beq.w	8007f7e <HAL_GPIO_Init+0x48a>
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	2b03      	cmp	r3, #3
 8007dbe:	f000 80de 	beq.w	8007f7e <HAL_GPIO_Init+0x48a>
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	2b03      	cmp	r3, #3
 8007dc8:	f000 80d9 	beq.w	8007f7e <HAL_GPIO_Init+0x48a>
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	2b03      	cmp	r3, #3
 8007dd2:	f000 80d4 	beq.w	8007f7e <HAL_GPIO_Init+0x48a>
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	2b03      	cmp	r3, #3
 8007ddc:	f000 80cf 	beq.w	8007f7e <HAL_GPIO_Init+0x48a>
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	2b03      	cmp	r3, #3
 8007de6:	f000 80ca 	beq.w	8007f7e <HAL_GPIO_Init+0x48a>
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	2b03      	cmp	r3, #3
 8007df0:	f000 80c5 	beq.w	8007f7e <HAL_GPIO_Init+0x48a>
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	691b      	ldr	r3, [r3, #16]
 8007df8:	2b04      	cmp	r3, #4
 8007dfa:	f000 80c0 	beq.w	8007f7e <HAL_GPIO_Init+0x48a>
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	2b04      	cmp	r3, #4
 8007e04:	f000 80bb 	beq.w	8007f7e <HAL_GPIO_Init+0x48a>
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	2b04      	cmp	r3, #4
 8007e0e:	f000 80b6 	beq.w	8007f7e <HAL_GPIO_Init+0x48a>
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	2b04      	cmp	r3, #4
 8007e18:	f000 80b1 	beq.w	8007f7e <HAL_GPIO_Init+0x48a>
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	2b04      	cmp	r3, #4
 8007e22:	f000 80ac 	beq.w	8007f7e <HAL_GPIO_Init+0x48a>
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	2b05      	cmp	r3, #5
 8007e2c:	f000 80a7 	beq.w	8007f7e <HAL_GPIO_Init+0x48a>
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	2b05      	cmp	r3, #5
 8007e36:	f000 80a2 	beq.w	8007f7e <HAL_GPIO_Init+0x48a>
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	2b05      	cmp	r3, #5
 8007e40:	f000 809d 	beq.w	8007f7e <HAL_GPIO_Init+0x48a>
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	2b05      	cmp	r3, #5
 8007e4a:	f000 8098 	beq.w	8007f7e <HAL_GPIO_Init+0x48a>
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	2b05      	cmp	r3, #5
 8007e54:	f000 8093 	beq.w	8007f7e <HAL_GPIO_Init+0x48a>
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	2b05      	cmp	r3, #5
 8007e5e:	f000 808e 	beq.w	8007f7e <HAL_GPIO_Init+0x48a>
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	2b06      	cmp	r3, #6
 8007e68:	f000 8089 	beq.w	8007f7e <HAL_GPIO_Init+0x48a>
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	2b06      	cmp	r3, #6
 8007e72:	f000 8084 	beq.w	8007f7e <HAL_GPIO_Init+0x48a>
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	2b07      	cmp	r3, #7
 8007e7c:	d07f      	beq.n	8007f7e <HAL_GPIO_Init+0x48a>
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	2b07      	cmp	r3, #7
 8007e84:	d07b      	beq.n	8007f7e <HAL_GPIO_Init+0x48a>
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	2b07      	cmp	r3, #7
 8007e8c:	d077      	beq.n	8007f7e <HAL_GPIO_Init+0x48a>
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	2b07      	cmp	r3, #7
 8007e94:	d073      	beq.n	8007f7e <HAL_GPIO_Init+0x48a>
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	2b07      	cmp	r3, #7
 8007e9c:	d06f      	beq.n	8007f7e <HAL_GPIO_Init+0x48a>
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	2b07      	cmp	r3, #7
 8007ea4:	d06b      	beq.n	8007f7e <HAL_GPIO_Init+0x48a>
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	2b07      	cmp	r3, #7
 8007eac:	d067      	beq.n	8007f7e <HAL_GPIO_Init+0x48a>
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	2b08      	cmp	r3, #8
 8007eb4:	d063      	beq.n	8007f7e <HAL_GPIO_Init+0x48a>
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	2b08      	cmp	r3, #8
 8007ebc:	d05f      	beq.n	8007f7e <HAL_GPIO_Init+0x48a>
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	2b08      	cmp	r3, #8
 8007ec4:	d05b      	beq.n	8007f7e <HAL_GPIO_Init+0x48a>
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	2b08      	cmp	r3, #8
 8007ecc:	d057      	beq.n	8007f7e <HAL_GPIO_Init+0x48a>
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	2b08      	cmp	r3, #8
 8007ed4:	d053      	beq.n	8007f7e <HAL_GPIO_Init+0x48a>
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	2b08      	cmp	r3, #8
 8007edc:	d04f      	beq.n	8007f7e <HAL_GPIO_Init+0x48a>
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	2b08      	cmp	r3, #8
 8007ee4:	d04b      	beq.n	8007f7e <HAL_GPIO_Init+0x48a>
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	2b09      	cmp	r3, #9
 8007eec:	d047      	beq.n	8007f7e <HAL_GPIO_Init+0x48a>
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	2b09      	cmp	r3, #9
 8007ef4:	d043      	beq.n	8007f7e <HAL_GPIO_Init+0x48a>
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	2b09      	cmp	r3, #9
 8007efc:	d03f      	beq.n	8007f7e <HAL_GPIO_Init+0x48a>
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	2b09      	cmp	r3, #9
 8007f04:	d03b      	beq.n	8007f7e <HAL_GPIO_Init+0x48a>
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	2b09      	cmp	r3, #9
 8007f0c:	d037      	beq.n	8007f7e <HAL_GPIO_Init+0x48a>
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	2b09      	cmp	r3, #9
 8007f14:	d033      	beq.n	8007f7e <HAL_GPIO_Init+0x48a>
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	2b09      	cmp	r3, #9
 8007f1c:	d02f      	beq.n	8007f7e <HAL_GPIO_Init+0x48a>
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	2b0a      	cmp	r3, #10
 8007f24:	d02b      	beq.n	8007f7e <HAL_GPIO_Init+0x48a>
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	2b0a      	cmp	r3, #10
 8007f2c:	d027      	beq.n	8007f7e <HAL_GPIO_Init+0x48a>
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	2b0a      	cmp	r3, #10
 8007f34:	d023      	beq.n	8007f7e <HAL_GPIO_Init+0x48a>
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	2b0a      	cmp	r3, #10
 8007f3c:	d01f      	beq.n	8007f7e <HAL_GPIO_Init+0x48a>
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	2b0b      	cmp	r3, #11
 8007f44:	d01b      	beq.n	8007f7e <HAL_GPIO_Init+0x48a>
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	2b0c      	cmp	r3, #12
 8007f4c:	d017      	beq.n	8007f7e <HAL_GPIO_Init+0x48a>
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	2b0c      	cmp	r3, #12
 8007f54:	d013      	beq.n	8007f7e <HAL_GPIO_Init+0x48a>
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	2b0c      	cmp	r3, #12
 8007f5c:	d00f      	beq.n	8007f7e <HAL_GPIO_Init+0x48a>
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	2b0f      	cmp	r3, #15
 8007f64:	d00b      	beq.n	8007f7e <HAL_GPIO_Init+0x48a>
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	2b0d      	cmp	r3, #13
 8007f6c:	d007      	beq.n	8007f7e <HAL_GPIO_Init+0x48a>
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	2b0e      	cmp	r3, #14
 8007f74:	d003      	beq.n	8007f7e <HAL_GPIO_Init+0x48a>
 8007f76:	21db      	movs	r1, #219	@ 0xdb
 8007f78:	4888      	ldr	r0, [pc, #544]	@ (800819c <HAL_GPIO_Init+0x6a8>)
 8007f7a:	f7fe fd5b 	bl	8006a34 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	08da      	lsrs	r2, r3, #3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	3208      	adds	r2, #8
 8007f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	f003 0307 	and.w	r3, r3, #7
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	220f      	movs	r2, #15
 8007f96:	fa02 f303 	lsl.w	r3, r2, r3
 8007f9a:	43db      	mvns	r3, r3
 8007f9c:	69ba      	ldr	r2, [r7, #24]
 8007f9e:	4013      	ands	r3, r2
 8007fa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	691a      	ldr	r2, [r3, #16]
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	f003 0307 	and.w	r3, r3, #7
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb2:	69ba      	ldr	r2, [r7, #24]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	08da      	lsrs	r2, r3, #3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	3208      	adds	r2, #8
 8007fc0:	69b9      	ldr	r1, [r7, #24]
 8007fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	005b      	lsls	r3, r3, #1
 8007fd0:	2203      	movs	r2, #3
 8007fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd6:	43db      	mvns	r3, r3
 8007fd8:	69ba      	ldr	r2, [r7, #24]
 8007fda:	4013      	ands	r3, r2
 8007fdc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	f003 0203 	and.w	r2, r3, #3
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	005b      	lsls	r3, r3, #1
 8007fea:	fa02 f303 	lsl.w	r3, r2, r3
 8007fee:	69ba      	ldr	r2, [r7, #24]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	69ba      	ldr	r2, [r7, #24]
 8007ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008002:	2b00      	cmp	r3, #0
 8008004:	f000 80be 	beq.w	8008184 <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008008:	4b65      	ldr	r3, [pc, #404]	@ (80081a0 <HAL_GPIO_Init+0x6ac>)
 800800a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800800c:	4a64      	ldr	r2, [pc, #400]	@ (80081a0 <HAL_GPIO_Init+0x6ac>)
 800800e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008012:	6453      	str	r3, [r2, #68]	@ 0x44
 8008014:	4b62      	ldr	r3, [pc, #392]	@ (80081a0 <HAL_GPIO_Init+0x6ac>)
 8008016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008018:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800801c:	60fb      	str	r3, [r7, #12]
 800801e:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8008020:	4a60      	ldr	r2, [pc, #384]	@ (80081a4 <HAL_GPIO_Init+0x6b0>)
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	089b      	lsrs	r3, r3, #2
 8008026:	3302      	adds	r3, #2
 8008028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800802c:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	f003 0303 	and.w	r3, r3, #3
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	220f      	movs	r2, #15
 8008038:	fa02 f303 	lsl.w	r3, r2, r3
 800803c:	43db      	mvns	r3, r3
 800803e:	69ba      	ldr	r2, [r7, #24]
 8008040:	4013      	ands	r3, r2
 8008042:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a58      	ldr	r2, [pc, #352]	@ (80081a8 <HAL_GPIO_Init+0x6b4>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d037      	beq.n	80080bc <HAL_GPIO_Init+0x5c8>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a57      	ldr	r2, [pc, #348]	@ (80081ac <HAL_GPIO_Init+0x6b8>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d031      	beq.n	80080b8 <HAL_GPIO_Init+0x5c4>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a56      	ldr	r2, [pc, #344]	@ (80081b0 <HAL_GPIO_Init+0x6bc>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d02b      	beq.n	80080b4 <HAL_GPIO_Init+0x5c0>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a55      	ldr	r2, [pc, #340]	@ (80081b4 <HAL_GPIO_Init+0x6c0>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d025      	beq.n	80080b0 <HAL_GPIO_Init+0x5bc>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a54      	ldr	r2, [pc, #336]	@ (80081b8 <HAL_GPIO_Init+0x6c4>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d01f      	beq.n	80080ac <HAL_GPIO_Init+0x5b8>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a53      	ldr	r2, [pc, #332]	@ (80081bc <HAL_GPIO_Init+0x6c8>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d019      	beq.n	80080a8 <HAL_GPIO_Init+0x5b4>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a52      	ldr	r2, [pc, #328]	@ (80081c0 <HAL_GPIO_Init+0x6cc>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d013      	beq.n	80080a4 <HAL_GPIO_Init+0x5b0>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a51      	ldr	r2, [pc, #324]	@ (80081c4 <HAL_GPIO_Init+0x6d0>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d00d      	beq.n	80080a0 <HAL_GPIO_Init+0x5ac>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a50      	ldr	r2, [pc, #320]	@ (80081c8 <HAL_GPIO_Init+0x6d4>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d007      	beq.n	800809c <HAL_GPIO_Init+0x5a8>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a4f      	ldr	r2, [pc, #316]	@ (80081cc <HAL_GPIO_Init+0x6d8>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d101      	bne.n	8008098 <HAL_GPIO_Init+0x5a4>
 8008094:	2309      	movs	r3, #9
 8008096:	e012      	b.n	80080be <HAL_GPIO_Init+0x5ca>
 8008098:	230a      	movs	r3, #10
 800809a:	e010      	b.n	80080be <HAL_GPIO_Init+0x5ca>
 800809c:	2308      	movs	r3, #8
 800809e:	e00e      	b.n	80080be <HAL_GPIO_Init+0x5ca>
 80080a0:	2307      	movs	r3, #7
 80080a2:	e00c      	b.n	80080be <HAL_GPIO_Init+0x5ca>
 80080a4:	2306      	movs	r3, #6
 80080a6:	e00a      	b.n	80080be <HAL_GPIO_Init+0x5ca>
 80080a8:	2305      	movs	r3, #5
 80080aa:	e008      	b.n	80080be <HAL_GPIO_Init+0x5ca>
 80080ac:	2304      	movs	r3, #4
 80080ae:	e006      	b.n	80080be <HAL_GPIO_Init+0x5ca>
 80080b0:	2303      	movs	r3, #3
 80080b2:	e004      	b.n	80080be <HAL_GPIO_Init+0x5ca>
 80080b4:	2302      	movs	r3, #2
 80080b6:	e002      	b.n	80080be <HAL_GPIO_Init+0x5ca>
 80080b8:	2301      	movs	r3, #1
 80080ba:	e000      	b.n	80080be <HAL_GPIO_Init+0x5ca>
 80080bc:	2300      	movs	r3, #0
 80080be:	69fa      	ldr	r2, [r7, #28]
 80080c0:	f002 0203 	and.w	r2, r2, #3
 80080c4:	0092      	lsls	r2, r2, #2
 80080c6:	4093      	lsls	r3, r2
 80080c8:	69ba      	ldr	r2, [r7, #24]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80080ce:	4935      	ldr	r1, [pc, #212]	@ (80081a4 <HAL_GPIO_Init+0x6b0>)
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	089b      	lsrs	r3, r3, #2
 80080d4:	3302      	adds	r3, #2
 80080d6:	69ba      	ldr	r2, [r7, #24]
 80080d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80080dc:	4b3c      	ldr	r3, [pc, #240]	@ (80081d0 <HAL_GPIO_Init+0x6dc>)
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	43db      	mvns	r3, r3
 80080e6:	69ba      	ldr	r2, [r7, #24]
 80080e8:	4013      	ands	r3, r2
 80080ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d003      	beq.n	8008100 <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 80080f8:	69ba      	ldr	r2, [r7, #24]
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008100:	4a33      	ldr	r2, [pc, #204]	@ (80081d0 <HAL_GPIO_Init+0x6dc>)
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008106:	4b32      	ldr	r3, [pc, #200]	@ (80081d0 <HAL_GPIO_Init+0x6dc>)
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	43db      	mvns	r3, r3
 8008110:	69ba      	ldr	r2, [r7, #24]
 8008112:	4013      	ands	r3, r2
 8008114:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800811e:	2b00      	cmp	r3, #0
 8008120:	d003      	beq.n	800812a <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 8008122:	69ba      	ldr	r2, [r7, #24]
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	4313      	orrs	r3, r2
 8008128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800812a:	4a29      	ldr	r2, [pc, #164]	@ (80081d0 <HAL_GPIO_Init+0x6dc>)
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008130:	4b27      	ldr	r3, [pc, #156]	@ (80081d0 <HAL_GPIO_Init+0x6dc>)
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	43db      	mvns	r3, r3
 800813a:	69ba      	ldr	r2, [r7, #24]
 800813c:	4013      	ands	r3, r2
 800813e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008148:	2b00      	cmp	r3, #0
 800814a:	d003      	beq.n	8008154 <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 800814c:	69ba      	ldr	r2, [r7, #24]
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	4313      	orrs	r3, r2
 8008152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008154:	4a1e      	ldr	r2, [pc, #120]	@ (80081d0 <HAL_GPIO_Init+0x6dc>)
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800815a:	4b1d      	ldr	r3, [pc, #116]	@ (80081d0 <HAL_GPIO_Init+0x6dc>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	43db      	mvns	r3, r3
 8008164:	69ba      	ldr	r2, [r7, #24]
 8008166:	4013      	ands	r3, r2
 8008168:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 8008176:	69ba      	ldr	r2, [r7, #24]
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	4313      	orrs	r3, r2
 800817c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800817e:	4a14      	ldr	r2, [pc, #80]	@ (80081d0 <HAL_GPIO_Init+0x6dc>)
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	3301      	adds	r3, #1
 8008188:	61fb      	str	r3, [r7, #28]
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	2b0f      	cmp	r3, #15
 800818e:	f67f ad4d 	bls.w	8007c2c <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 8008192:	bf00      	nop
 8008194:	bf00      	nop
 8008196:	3720      	adds	r7, #32
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}
 800819c:	08018948 	.word	0x08018948
 80081a0:	40023800 	.word	0x40023800
 80081a4:	40013800 	.word	0x40013800
 80081a8:	40020000 	.word	0x40020000
 80081ac:	40020400 	.word	0x40020400
 80081b0:	40020800 	.word	0x40020800
 80081b4:	40020c00 	.word	0x40020c00
 80081b8:	40021000 	.word	0x40021000
 80081bc:	40021400 	.word	0x40021400
 80081c0:	40021800 	.word	0x40021800
 80081c4:	40021c00 	.word	0x40021c00
 80081c8:	40022000 	.word	0x40022000
 80081cc:	40022400 	.word	0x40022400
 80081d0:	40013c00 	.word	0x40013c00

080081d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	460b      	mov	r3, r1
 80081de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80081e0:	887b      	ldrh	r3, [r7, #2]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d104      	bne.n	80081f0 <HAL_GPIO_ReadPin+0x1c>
 80081e6:	f240 1177 	movw	r1, #375	@ 0x177
 80081ea:	4809      	ldr	r0, [pc, #36]	@ (8008210 <HAL_GPIO_ReadPin+0x3c>)
 80081ec:	f7fe fc22 	bl	8006a34 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	691a      	ldr	r2, [r3, #16]
 80081f4:	887b      	ldrh	r3, [r7, #2]
 80081f6:	4013      	ands	r3, r2
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d002      	beq.n	8008202 <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 80081fc:	2301      	movs	r3, #1
 80081fe:	73fb      	strb	r3, [r7, #15]
 8008200:	e001      	b.n	8008206 <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008202:	2300      	movs	r3, #0
 8008204:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008206:	7bfb      	ldrb	r3, [r7, #15]
}
 8008208:	4618      	mov	r0, r3
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}
 8008210:	08018948 	.word	0x08018948

08008214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	460b      	mov	r3, r1
 800821e:	807b      	strh	r3, [r7, #2]
 8008220:	4613      	mov	r3, r2
 8008222:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8008224:	887b      	ldrh	r3, [r7, #2]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d104      	bne.n	8008234 <HAL_GPIO_WritePin+0x20>
 800822a:	f240 1197 	movw	r1, #407	@ 0x197
 800822e:	480e      	ldr	r0, [pc, #56]	@ (8008268 <HAL_GPIO_WritePin+0x54>)
 8008230:	f7fe fc00 	bl	8006a34 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8008234:	787b      	ldrb	r3, [r7, #1]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d007      	beq.n	800824a <HAL_GPIO_WritePin+0x36>
 800823a:	787b      	ldrb	r3, [r7, #1]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d004      	beq.n	800824a <HAL_GPIO_WritePin+0x36>
 8008240:	f44f 71cc 	mov.w	r1, #408	@ 0x198
 8008244:	4808      	ldr	r0, [pc, #32]	@ (8008268 <HAL_GPIO_WritePin+0x54>)
 8008246:	f7fe fbf5 	bl	8006a34 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800824a:	787b      	ldrb	r3, [r7, #1]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d003      	beq.n	8008258 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008250:	887a      	ldrh	r2, [r7, #2]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008256:	e003      	b.n	8008260 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8008258:	887b      	ldrh	r3, [r7, #2]
 800825a:	041a      	lsls	r2, r3, #16
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	619a      	str	r2, [r3, #24]
}
 8008260:	bf00      	nop
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	08018948 	.word	0x08018948

0800826c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b086      	sub	sp, #24
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008274:	2300      	movs	r3, #0
 8008276:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d101      	bne.n	8008282 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e345      	b.n	800890e <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2b0f      	cmp	r3, #15
 8008288:	d904      	bls.n	8008294 <HAL_RCC_OscConfig+0x28>
 800828a:	f240 1163 	movw	r1, #355	@ 0x163
 800828e:	4892      	ldr	r0, [pc, #584]	@ (80084d8 <HAL_RCC_OscConfig+0x26c>)
 8008290:	f7fe fbd0 	bl	8006a34 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 0301 	and.w	r3, r3, #1
 800829c:	2b00      	cmp	r3, #0
 800829e:	f000 809a 	beq.w	80083d6 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00e      	beq.n	80082c8 <HAL_RCC_OscConfig+0x5c>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082b2:	d009      	beq.n	80082c8 <HAL_RCC_OscConfig+0x5c>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80082bc:	d004      	beq.n	80082c8 <HAL_RCC_OscConfig+0x5c>
 80082be:	f240 1169 	movw	r1, #361	@ 0x169
 80082c2:	4885      	ldr	r0, [pc, #532]	@ (80084d8 <HAL_RCC_OscConfig+0x26c>)
 80082c4:	f7fe fbb6 	bl	8006a34 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80082c8:	4b84      	ldr	r3, [pc, #528]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	f003 030c 	and.w	r3, r3, #12
 80082d0:	2b04      	cmp	r3, #4
 80082d2:	d00c      	beq.n	80082ee <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80082d4:	4b81      	ldr	r3, [pc, #516]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	f003 030c 	and.w	r3, r3, #12
 80082dc:	2b08      	cmp	r3, #8
 80082de:	d112      	bne.n	8008306 <HAL_RCC_OscConfig+0x9a>
 80082e0:	4b7e      	ldr	r3, [pc, #504]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80082e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80082ec:	d10b      	bne.n	8008306 <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082ee:	4b7b      	ldr	r3, [pc, #492]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d06c      	beq.n	80083d4 <HAL_RCC_OscConfig+0x168>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d168      	bne.n	80083d4 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	e303      	b.n	800890e <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800830e:	d106      	bne.n	800831e <HAL_RCC_OscConfig+0xb2>
 8008310:	4b72      	ldr	r3, [pc, #456]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a71      	ldr	r2, [pc, #452]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 8008316:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800831a:	6013      	str	r3, [r2, #0]
 800831c:	e02e      	b.n	800837c <HAL_RCC_OscConfig+0x110>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10c      	bne.n	8008340 <HAL_RCC_OscConfig+0xd4>
 8008326:	4b6d      	ldr	r3, [pc, #436]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a6c      	ldr	r2, [pc, #432]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 800832c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008330:	6013      	str	r3, [r2, #0]
 8008332:	4b6a      	ldr	r3, [pc, #424]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a69      	ldr	r2, [pc, #420]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 8008338:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800833c:	6013      	str	r3, [r2, #0]
 800833e:	e01d      	b.n	800837c <HAL_RCC_OscConfig+0x110>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008348:	d10c      	bne.n	8008364 <HAL_RCC_OscConfig+0xf8>
 800834a:	4b64      	ldr	r3, [pc, #400]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a63      	ldr	r2, [pc, #396]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 8008350:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008354:	6013      	str	r3, [r2, #0]
 8008356:	4b61      	ldr	r3, [pc, #388]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a60      	ldr	r2, [pc, #384]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 800835c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008360:	6013      	str	r3, [r2, #0]
 8008362:	e00b      	b.n	800837c <HAL_RCC_OscConfig+0x110>
 8008364:	4b5d      	ldr	r3, [pc, #372]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a5c      	ldr	r2, [pc, #368]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 800836a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800836e:	6013      	str	r3, [r2, #0]
 8008370:	4b5a      	ldr	r3, [pc, #360]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a59      	ldr	r2, [pc, #356]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 8008376:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800837a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d013      	beq.n	80083ac <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008384:	f7ff f896 	bl	80074b4 <HAL_GetTick>
 8008388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800838a:	e008      	b.n	800839e <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800838c:	f7ff f892 	bl	80074b4 <HAL_GetTick>
 8008390:	4602      	mov	r2, r0
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	1ad3      	subs	r3, r2, r3
 8008396:	2b64      	cmp	r3, #100	@ 0x64
 8008398:	d901      	bls.n	800839e <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 800839a:	2303      	movs	r3, #3
 800839c:	e2b7      	b.n	800890e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800839e:	4b4f      	ldr	r3, [pc, #316]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d0f0      	beq.n	800838c <HAL_RCC_OscConfig+0x120>
 80083aa:	e014      	b.n	80083d6 <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083ac:	f7ff f882 	bl	80074b4 <HAL_GetTick>
 80083b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083b2:	e008      	b.n	80083c6 <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083b4:	f7ff f87e 	bl	80074b4 <HAL_GetTick>
 80083b8:	4602      	mov	r2, r0
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	2b64      	cmp	r3, #100	@ 0x64
 80083c0:	d901      	bls.n	80083c6 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80083c2:	2303      	movs	r3, #3
 80083c4:	e2a3      	b.n	800890e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083c6:	4b45      	ldr	r3, [pc, #276]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1f0      	bne.n	80083b4 <HAL_RCC_OscConfig+0x148>
 80083d2:	e000      	b.n	80083d6 <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 0302 	and.w	r3, r3, #2
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f000 8084 	beq.w	80084ec <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d008      	beq.n	80083fe <HAL_RCC_OscConfig+0x192>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d004      	beq.n	80083fe <HAL_RCC_OscConfig+0x192>
 80083f4:	f240 119b 	movw	r1, #411	@ 0x19b
 80083f8:	4837      	ldr	r0, [pc, #220]	@ (80084d8 <HAL_RCC_OscConfig+0x26c>)
 80083fa:	f7fe fb1b 	bl	8006a34 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	2b1f      	cmp	r3, #31
 8008404:	d904      	bls.n	8008410 <HAL_RCC_OscConfig+0x1a4>
 8008406:	f44f 71ce 	mov.w	r1, #412	@ 0x19c
 800840a:	4833      	ldr	r0, [pc, #204]	@ (80084d8 <HAL_RCC_OscConfig+0x26c>)
 800840c:	f7fe fb12 	bl	8006a34 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008410:	4b32      	ldr	r3, [pc, #200]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	f003 030c 	and.w	r3, r3, #12
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00b      	beq.n	8008434 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800841c:	4b2f      	ldr	r3, [pc, #188]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	f003 030c 	and.w	r3, r3, #12
 8008424:	2b08      	cmp	r3, #8
 8008426:	d11c      	bne.n	8008462 <HAL_RCC_OscConfig+0x1f6>
 8008428:	4b2c      	ldr	r3, [pc, #176]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008430:	2b00      	cmp	r3, #0
 8008432:	d116      	bne.n	8008462 <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008434:	4b29      	ldr	r3, [pc, #164]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 0302 	and.w	r3, r3, #2
 800843c:	2b00      	cmp	r3, #0
 800843e:	d005      	beq.n	800844c <HAL_RCC_OscConfig+0x1e0>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d001      	beq.n	800844c <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	e260      	b.n	800890e <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800844c:	4b23      	ldr	r3, [pc, #140]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	00db      	lsls	r3, r3, #3
 800845a:	4920      	ldr	r1, [pc, #128]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 800845c:	4313      	orrs	r3, r2
 800845e:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008460:	e044      	b.n	80084ec <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d023      	beq.n	80084b2 <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800846a:	4b1c      	ldr	r3, [pc, #112]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a1b      	ldr	r2, [pc, #108]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 8008470:	f043 0301 	orr.w	r3, r3, #1
 8008474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008476:	f7ff f81d 	bl	80074b4 <HAL_GetTick>
 800847a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800847c:	e008      	b.n	8008490 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800847e:	f7ff f819 	bl	80074b4 <HAL_GetTick>
 8008482:	4602      	mov	r2, r0
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	1ad3      	subs	r3, r2, r3
 8008488:	2b02      	cmp	r3, #2
 800848a:	d901      	bls.n	8008490 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 800848c:	2303      	movs	r3, #3
 800848e:	e23e      	b.n	800890e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008490:	4b12      	ldr	r3, [pc, #72]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 0302 	and.w	r3, r3, #2
 8008498:	2b00      	cmp	r3, #0
 800849a:	d0f0      	beq.n	800847e <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800849c:	4b0f      	ldr	r3, [pc, #60]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	00db      	lsls	r3, r3, #3
 80084aa:	490c      	ldr	r1, [pc, #48]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 80084ac:	4313      	orrs	r3, r2
 80084ae:	600b      	str	r3, [r1, #0]
 80084b0:	e01c      	b.n	80084ec <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80084b2:	4b0a      	ldr	r3, [pc, #40]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a09      	ldr	r2, [pc, #36]	@ (80084dc <HAL_RCC_OscConfig+0x270>)
 80084b8:	f023 0301 	bic.w	r3, r3, #1
 80084bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084be:	f7fe fff9 	bl	80074b4 <HAL_GetTick>
 80084c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084c4:	e00c      	b.n	80084e0 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084c6:	f7fe fff5 	bl	80074b4 <HAL_GetTick>
 80084ca:	4602      	mov	r2, r0
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	1ad3      	subs	r3, r2, r3
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	d905      	bls.n	80084e0 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 80084d4:	2303      	movs	r3, #3
 80084d6:	e21a      	b.n	800890e <HAL_RCC_OscConfig+0x6a2>
 80084d8:	08018984 	.word	0x08018984
 80084dc:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084e0:	4b7e      	ldr	r3, [pc, #504]	@ (80086dc <HAL_RCC_OscConfig+0x470>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 0302 	and.w	r3, r3, #2
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d1ec      	bne.n	80084c6 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 0308 	and.w	r3, r3, #8
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d043      	beq.n	8008580 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	695b      	ldr	r3, [r3, #20]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d008      	beq.n	8008512 <HAL_RCC_OscConfig+0x2a6>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	695b      	ldr	r3, [r3, #20]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d004      	beq.n	8008512 <HAL_RCC_OscConfig+0x2a6>
 8008508:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 800850c:	4874      	ldr	r0, [pc, #464]	@ (80086e0 <HAL_RCC_OscConfig+0x474>)
 800850e:	f7fe fa91 	bl	8006a34 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	695b      	ldr	r3, [r3, #20]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d019      	beq.n	800854e <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800851a:	4b70      	ldr	r3, [pc, #448]	@ (80086dc <HAL_RCC_OscConfig+0x470>)
 800851c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800851e:	4a6f      	ldr	r2, [pc, #444]	@ (80086dc <HAL_RCC_OscConfig+0x470>)
 8008520:	f043 0301 	orr.w	r3, r3, #1
 8008524:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008526:	f7fe ffc5 	bl	80074b4 <HAL_GetTick>
 800852a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800852c:	e008      	b.n	8008540 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800852e:	f7fe ffc1 	bl	80074b4 <HAL_GetTick>
 8008532:	4602      	mov	r2, r0
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	1ad3      	subs	r3, r2, r3
 8008538:	2b02      	cmp	r3, #2
 800853a:	d901      	bls.n	8008540 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 800853c:	2303      	movs	r3, #3
 800853e:	e1e6      	b.n	800890e <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008540:	4b66      	ldr	r3, [pc, #408]	@ (80086dc <HAL_RCC_OscConfig+0x470>)
 8008542:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008544:	f003 0302 	and.w	r3, r3, #2
 8008548:	2b00      	cmp	r3, #0
 800854a:	d0f0      	beq.n	800852e <HAL_RCC_OscConfig+0x2c2>
 800854c:	e018      	b.n	8008580 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800854e:	4b63      	ldr	r3, [pc, #396]	@ (80086dc <HAL_RCC_OscConfig+0x470>)
 8008550:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008552:	4a62      	ldr	r2, [pc, #392]	@ (80086dc <HAL_RCC_OscConfig+0x470>)
 8008554:	f023 0301 	bic.w	r3, r3, #1
 8008558:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800855a:	f7fe ffab 	bl	80074b4 <HAL_GetTick>
 800855e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008560:	e008      	b.n	8008574 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008562:	f7fe ffa7 	bl	80074b4 <HAL_GetTick>
 8008566:	4602      	mov	r2, r0
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	1ad3      	subs	r3, r2, r3
 800856c:	2b02      	cmp	r3, #2
 800856e:	d901      	bls.n	8008574 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008570:	2303      	movs	r3, #3
 8008572:	e1cc      	b.n	800890e <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008574:	4b59      	ldr	r3, [pc, #356]	@ (80086dc <HAL_RCC_OscConfig+0x470>)
 8008576:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008578:	f003 0302 	and.w	r3, r3, #2
 800857c:	2b00      	cmp	r3, #0
 800857e:	d1f0      	bne.n	8008562 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 0304 	and.w	r3, r3, #4
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 80bc 	beq.w	8008706 <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00c      	beq.n	80085b0 <HAL_RCC_OscConfig+0x344>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	2b01      	cmp	r3, #1
 800859c:	d008      	beq.n	80085b0 <HAL_RCC_OscConfig+0x344>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	2b05      	cmp	r3, #5
 80085a4:	d004      	beq.n	80085b0 <HAL_RCC_OscConfig+0x344>
 80085a6:	f240 2106 	movw	r1, #518	@ 0x206
 80085aa:	484d      	ldr	r0, [pc, #308]	@ (80086e0 <HAL_RCC_OscConfig+0x474>)
 80085ac:	f7fe fa42 	bl	8006a34 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80085b0:	4b4a      	ldr	r3, [pc, #296]	@ (80086dc <HAL_RCC_OscConfig+0x470>)
 80085b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d10d      	bne.n	80085d8 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80085bc:	4b47      	ldr	r3, [pc, #284]	@ (80086dc <HAL_RCC_OscConfig+0x470>)
 80085be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085c0:	4a46      	ldr	r2, [pc, #280]	@ (80086dc <HAL_RCC_OscConfig+0x470>)
 80085c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80085c8:	4b44      	ldr	r3, [pc, #272]	@ (80086dc <HAL_RCC_OscConfig+0x470>)
 80085ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085d0:	60bb      	str	r3, [r7, #8]
 80085d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80085d4:	2301      	movs	r3, #1
 80085d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085d8:	4b42      	ldr	r3, [pc, #264]	@ (80086e4 <HAL_RCC_OscConfig+0x478>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d118      	bne.n	8008616 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80085e4:	4b3f      	ldr	r3, [pc, #252]	@ (80086e4 <HAL_RCC_OscConfig+0x478>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a3e      	ldr	r2, [pc, #248]	@ (80086e4 <HAL_RCC_OscConfig+0x478>)
 80085ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80085ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80085f0:	f7fe ff60 	bl	80074b4 <HAL_GetTick>
 80085f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085f6:	e008      	b.n	800860a <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085f8:	f7fe ff5c 	bl	80074b4 <HAL_GetTick>
 80085fc:	4602      	mov	r2, r0
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	1ad3      	subs	r3, r2, r3
 8008602:	2b64      	cmp	r3, #100	@ 0x64
 8008604:	d901      	bls.n	800860a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008606:	2303      	movs	r3, #3
 8008608:	e181      	b.n	800890e <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800860a:	4b36      	ldr	r3, [pc, #216]	@ (80086e4 <HAL_RCC_OscConfig+0x478>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008612:	2b00      	cmp	r3, #0
 8008614:	d0f0      	beq.n	80085f8 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	2b01      	cmp	r3, #1
 800861c:	d106      	bne.n	800862c <HAL_RCC_OscConfig+0x3c0>
 800861e:	4b2f      	ldr	r3, [pc, #188]	@ (80086dc <HAL_RCC_OscConfig+0x470>)
 8008620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008622:	4a2e      	ldr	r2, [pc, #184]	@ (80086dc <HAL_RCC_OscConfig+0x470>)
 8008624:	f043 0301 	orr.w	r3, r3, #1
 8008628:	6713      	str	r3, [r2, #112]	@ 0x70
 800862a:	e02d      	b.n	8008688 <HAL_RCC_OscConfig+0x41c>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d10c      	bne.n	800864e <HAL_RCC_OscConfig+0x3e2>
 8008634:	4b29      	ldr	r3, [pc, #164]	@ (80086dc <HAL_RCC_OscConfig+0x470>)
 8008636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008638:	4a28      	ldr	r2, [pc, #160]	@ (80086dc <HAL_RCC_OscConfig+0x470>)
 800863a:	f023 0301 	bic.w	r3, r3, #1
 800863e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008640:	4b26      	ldr	r3, [pc, #152]	@ (80086dc <HAL_RCC_OscConfig+0x470>)
 8008642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008644:	4a25      	ldr	r2, [pc, #148]	@ (80086dc <HAL_RCC_OscConfig+0x470>)
 8008646:	f023 0304 	bic.w	r3, r3, #4
 800864a:	6713      	str	r3, [r2, #112]	@ 0x70
 800864c:	e01c      	b.n	8008688 <HAL_RCC_OscConfig+0x41c>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	2b05      	cmp	r3, #5
 8008654:	d10c      	bne.n	8008670 <HAL_RCC_OscConfig+0x404>
 8008656:	4b21      	ldr	r3, [pc, #132]	@ (80086dc <HAL_RCC_OscConfig+0x470>)
 8008658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800865a:	4a20      	ldr	r2, [pc, #128]	@ (80086dc <HAL_RCC_OscConfig+0x470>)
 800865c:	f043 0304 	orr.w	r3, r3, #4
 8008660:	6713      	str	r3, [r2, #112]	@ 0x70
 8008662:	4b1e      	ldr	r3, [pc, #120]	@ (80086dc <HAL_RCC_OscConfig+0x470>)
 8008664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008666:	4a1d      	ldr	r2, [pc, #116]	@ (80086dc <HAL_RCC_OscConfig+0x470>)
 8008668:	f043 0301 	orr.w	r3, r3, #1
 800866c:	6713      	str	r3, [r2, #112]	@ 0x70
 800866e:	e00b      	b.n	8008688 <HAL_RCC_OscConfig+0x41c>
 8008670:	4b1a      	ldr	r3, [pc, #104]	@ (80086dc <HAL_RCC_OscConfig+0x470>)
 8008672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008674:	4a19      	ldr	r2, [pc, #100]	@ (80086dc <HAL_RCC_OscConfig+0x470>)
 8008676:	f023 0301 	bic.w	r3, r3, #1
 800867a:	6713      	str	r3, [r2, #112]	@ 0x70
 800867c:	4b17      	ldr	r3, [pc, #92]	@ (80086dc <HAL_RCC_OscConfig+0x470>)
 800867e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008680:	4a16      	ldr	r2, [pc, #88]	@ (80086dc <HAL_RCC_OscConfig+0x470>)
 8008682:	f023 0304 	bic.w	r3, r3, #4
 8008686:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d015      	beq.n	80086bc <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008690:	f7fe ff10 	bl	80074b4 <HAL_GetTick>
 8008694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008696:	e00a      	b.n	80086ae <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008698:	f7fe ff0c 	bl	80074b4 <HAL_GetTick>
 800869c:	4602      	mov	r2, r0
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d901      	bls.n	80086ae <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e12f      	b.n	800890e <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086ae:	4b0b      	ldr	r3, [pc, #44]	@ (80086dc <HAL_RCC_OscConfig+0x470>)
 80086b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086b2:	f003 0302 	and.w	r3, r3, #2
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d0ee      	beq.n	8008698 <HAL_RCC_OscConfig+0x42c>
 80086ba:	e01b      	b.n	80086f4 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086bc:	f7fe fefa 	bl	80074b4 <HAL_GetTick>
 80086c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086c2:	e011      	b.n	80086e8 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086c4:	f7fe fef6 	bl	80074b4 <HAL_GetTick>
 80086c8:	4602      	mov	r2, r0
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d908      	bls.n	80086e8 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 80086d6:	2303      	movs	r3, #3
 80086d8:	e119      	b.n	800890e <HAL_RCC_OscConfig+0x6a2>
 80086da:	bf00      	nop
 80086dc:	40023800 	.word	0x40023800
 80086e0:	08018984 	.word	0x08018984
 80086e4:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086e8:	4b8b      	ldr	r3, [pc, #556]	@ (8008918 <HAL_RCC_OscConfig+0x6ac>)
 80086ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086ec:	f003 0302 	and.w	r3, r3, #2
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d1e7      	bne.n	80086c4 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80086f4:	7dfb      	ldrb	r3, [r7, #23]
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d105      	bne.n	8008706 <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086fa:	4b87      	ldr	r3, [pc, #540]	@ (8008918 <HAL_RCC_OscConfig+0x6ac>)
 80086fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086fe:	4a86      	ldr	r2, [pc, #536]	@ (8008918 <HAL_RCC_OscConfig+0x6ac>)
 8008700:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008704:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	699b      	ldr	r3, [r3, #24]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00c      	beq.n	8008728 <HAL_RCC_OscConfig+0x4bc>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	699b      	ldr	r3, [r3, #24]
 8008712:	2b01      	cmp	r3, #1
 8008714:	d008      	beq.n	8008728 <HAL_RCC_OscConfig+0x4bc>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	699b      	ldr	r3, [r3, #24]
 800871a:	2b02      	cmp	r3, #2
 800871c:	d004      	beq.n	8008728 <HAL_RCC_OscConfig+0x4bc>
 800871e:	f240 214a 	movw	r1, #586	@ 0x24a
 8008722:	487e      	ldr	r0, [pc, #504]	@ (800891c <HAL_RCC_OscConfig+0x6b0>)
 8008724:	f7fe f986 	bl	8006a34 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	2b00      	cmp	r3, #0
 800872e:	f000 80ed 	beq.w	800890c <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008732:	4b79      	ldr	r3, [pc, #484]	@ (8008918 <HAL_RCC_OscConfig+0x6ac>)
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	f003 030c 	and.w	r3, r3, #12
 800873a:	2b08      	cmp	r3, #8
 800873c:	f000 80b4 	beq.w	80088a8 <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	2b02      	cmp	r3, #2
 8008746:	f040 8095 	bne.w	8008874 <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	69db      	ldr	r3, [r3, #28]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d009      	beq.n	8008766 <HAL_RCC_OscConfig+0x4fa>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	69db      	ldr	r3, [r3, #28]
 8008756:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800875a:	d004      	beq.n	8008766 <HAL_RCC_OscConfig+0x4fa>
 800875c:	f240 2153 	movw	r1, #595	@ 0x253
 8008760:	486e      	ldr	r0, [pc, #440]	@ (800891c <HAL_RCC_OscConfig+0x6b0>)
 8008762:	f7fe f967 	bl	8006a34 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a1b      	ldr	r3, [r3, #32]
 800876a:	2b01      	cmp	r3, #1
 800876c:	d903      	bls.n	8008776 <HAL_RCC_OscConfig+0x50a>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a1b      	ldr	r3, [r3, #32]
 8008772:	2b3f      	cmp	r3, #63	@ 0x3f
 8008774:	d904      	bls.n	8008780 <HAL_RCC_OscConfig+0x514>
 8008776:	f44f 7115 	mov.w	r1, #596	@ 0x254
 800877a:	4868      	ldr	r0, [pc, #416]	@ (800891c <HAL_RCC_OscConfig+0x6b0>)
 800877c:	f7fe f95a 	bl	8006a34 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008784:	2b31      	cmp	r3, #49	@ 0x31
 8008786:	d904      	bls.n	8008792 <HAL_RCC_OscConfig+0x526>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800878c:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8008790:	d904      	bls.n	800879c <HAL_RCC_OscConfig+0x530>
 8008792:	f240 2155 	movw	r1, #597	@ 0x255
 8008796:	4861      	ldr	r0, [pc, #388]	@ (800891c <HAL_RCC_OscConfig+0x6b0>)
 8008798:	f7fe f94c 	bl	8006a34 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d010      	beq.n	80087c6 <HAL_RCC_OscConfig+0x55a>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a8:	2b04      	cmp	r3, #4
 80087aa:	d00c      	beq.n	80087c6 <HAL_RCC_OscConfig+0x55a>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087b0:	2b06      	cmp	r3, #6
 80087b2:	d008      	beq.n	80087c6 <HAL_RCC_OscConfig+0x55a>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087b8:	2b08      	cmp	r3, #8
 80087ba:	d004      	beq.n	80087c6 <HAL_RCC_OscConfig+0x55a>
 80087bc:	f240 2156 	movw	r1, #598	@ 0x256
 80087c0:	4856      	ldr	r0, [pc, #344]	@ (800891c <HAL_RCC_OscConfig+0x6b0>)
 80087c2:	f7fe f937 	bl	8006a34 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ca:	2b01      	cmp	r3, #1
 80087cc:	d903      	bls.n	80087d6 <HAL_RCC_OscConfig+0x56a>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087d2:	2b0f      	cmp	r3, #15
 80087d4:	d904      	bls.n	80087e0 <HAL_RCC_OscConfig+0x574>
 80087d6:	f240 2157 	movw	r1, #599	@ 0x257
 80087da:	4850      	ldr	r0, [pc, #320]	@ (800891c <HAL_RCC_OscConfig+0x6b0>)
 80087dc:	f7fe f92a 	bl	8006a34 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087e0:	4b4d      	ldr	r3, [pc, #308]	@ (8008918 <HAL_RCC_OscConfig+0x6ac>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a4c      	ldr	r2, [pc, #304]	@ (8008918 <HAL_RCC_OscConfig+0x6ac>)
 80087e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80087ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087ec:	f7fe fe62 	bl	80074b4 <HAL_GetTick>
 80087f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087f2:	e008      	b.n	8008806 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087f4:	f7fe fe5e 	bl	80074b4 <HAL_GetTick>
 80087f8:	4602      	mov	r2, r0
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	1ad3      	subs	r3, r2, r3
 80087fe:	2b02      	cmp	r3, #2
 8008800:	d901      	bls.n	8008806 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8008802:	2303      	movs	r3, #3
 8008804:	e083      	b.n	800890e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008806:	4b44      	ldr	r3, [pc, #272]	@ (8008918 <HAL_RCC_OscConfig+0x6ac>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1f0      	bne.n	80087f4 <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	69da      	ldr	r2, [r3, #28]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	431a      	orrs	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008820:	019b      	lsls	r3, r3, #6
 8008822:	431a      	orrs	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008828:	085b      	lsrs	r3, r3, #1
 800882a:	3b01      	subs	r3, #1
 800882c:	041b      	lsls	r3, r3, #16
 800882e:	431a      	orrs	r2, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008834:	061b      	lsls	r3, r3, #24
 8008836:	4313      	orrs	r3, r2
 8008838:	4a37      	ldr	r2, [pc, #220]	@ (8008918 <HAL_RCC_OscConfig+0x6ac>)
 800883a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800883e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008840:	4b35      	ldr	r3, [pc, #212]	@ (8008918 <HAL_RCC_OscConfig+0x6ac>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a34      	ldr	r2, [pc, #208]	@ (8008918 <HAL_RCC_OscConfig+0x6ac>)
 8008846:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800884a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800884c:	f7fe fe32 	bl	80074b4 <HAL_GetTick>
 8008850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008852:	e008      	b.n	8008866 <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008854:	f7fe fe2e 	bl	80074b4 <HAL_GetTick>
 8008858:	4602      	mov	r2, r0
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	1ad3      	subs	r3, r2, r3
 800885e:	2b02      	cmp	r3, #2
 8008860:	d901      	bls.n	8008866 <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 8008862:	2303      	movs	r3, #3
 8008864:	e053      	b.n	800890e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008866:	4b2c      	ldr	r3, [pc, #176]	@ (8008918 <HAL_RCC_OscConfig+0x6ac>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800886e:	2b00      	cmp	r3, #0
 8008870:	d0f0      	beq.n	8008854 <HAL_RCC_OscConfig+0x5e8>
 8008872:	e04b      	b.n	800890c <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008874:	4b28      	ldr	r3, [pc, #160]	@ (8008918 <HAL_RCC_OscConfig+0x6ac>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a27      	ldr	r2, [pc, #156]	@ (8008918 <HAL_RCC_OscConfig+0x6ac>)
 800887a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800887e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008880:	f7fe fe18 	bl	80074b4 <HAL_GetTick>
 8008884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008886:	e008      	b.n	800889a <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008888:	f7fe fe14 	bl	80074b4 <HAL_GetTick>
 800888c:	4602      	mov	r2, r0
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	2b02      	cmp	r3, #2
 8008894:	d901      	bls.n	800889a <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	e039      	b.n	800890e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800889a:	4b1f      	ldr	r3, [pc, #124]	@ (8008918 <HAL_RCC_OscConfig+0x6ac>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1f0      	bne.n	8008888 <HAL_RCC_OscConfig+0x61c>
 80088a6:	e031      	b.n	800890c <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80088a8:	4b1b      	ldr	r3, [pc, #108]	@ (8008918 <HAL_RCC_OscConfig+0x6ac>)
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d028      	beq.n	8008908 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d121      	bne.n	8008908 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d11a      	bne.n	8008908 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80088d8:	4013      	ands	r3, r2
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80088de:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d111      	bne.n	8008908 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ee:	085b      	lsrs	r3, r3, #1
 80088f0:	3b01      	subs	r3, #1
 80088f2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d107      	bne.n	8008908 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008902:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008904:	429a      	cmp	r2, r3
 8008906:	d001      	beq.n	800890c <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	e000      	b.n	800890e <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3718      	adds	r7, #24
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	40023800 	.word	0x40023800
 800891c:	08018984 	.word	0x08018984

08008920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800892a:	2300      	movs	r3, #0
 800892c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d101      	bne.n	8008938 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	e18c      	b.n	8008c52 <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d003      	beq.n	8008948 <HAL_RCC_ClockConfig+0x28>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2b0f      	cmp	r3, #15
 8008946:	d904      	bls.n	8008952 <HAL_RCC_ClockConfig+0x32>
 8008948:	f240 21dd 	movw	r1, #733	@ 0x2dd
 800894c:	4887      	ldr	r0, [pc, #540]	@ (8008b6c <HAL_RCC_ClockConfig+0x24c>)
 800894e:	f7fe f871 	bl	8006a34 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d031      	beq.n	80089bc <HAL_RCC_ClockConfig+0x9c>
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	2b01      	cmp	r3, #1
 800895c:	d02e      	beq.n	80089bc <HAL_RCC_ClockConfig+0x9c>
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	2b02      	cmp	r3, #2
 8008962:	d02b      	beq.n	80089bc <HAL_RCC_ClockConfig+0x9c>
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	2b03      	cmp	r3, #3
 8008968:	d028      	beq.n	80089bc <HAL_RCC_ClockConfig+0x9c>
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	2b04      	cmp	r3, #4
 800896e:	d025      	beq.n	80089bc <HAL_RCC_ClockConfig+0x9c>
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	2b05      	cmp	r3, #5
 8008974:	d022      	beq.n	80089bc <HAL_RCC_ClockConfig+0x9c>
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	2b06      	cmp	r3, #6
 800897a:	d01f      	beq.n	80089bc <HAL_RCC_ClockConfig+0x9c>
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	2b07      	cmp	r3, #7
 8008980:	d01c      	beq.n	80089bc <HAL_RCC_ClockConfig+0x9c>
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	2b08      	cmp	r3, #8
 8008986:	d019      	beq.n	80089bc <HAL_RCC_ClockConfig+0x9c>
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	2b09      	cmp	r3, #9
 800898c:	d016      	beq.n	80089bc <HAL_RCC_ClockConfig+0x9c>
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	2b0a      	cmp	r3, #10
 8008992:	d013      	beq.n	80089bc <HAL_RCC_ClockConfig+0x9c>
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	2b0b      	cmp	r3, #11
 8008998:	d010      	beq.n	80089bc <HAL_RCC_ClockConfig+0x9c>
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	2b0c      	cmp	r3, #12
 800899e:	d00d      	beq.n	80089bc <HAL_RCC_ClockConfig+0x9c>
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	2b0d      	cmp	r3, #13
 80089a4:	d00a      	beq.n	80089bc <HAL_RCC_ClockConfig+0x9c>
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	2b0e      	cmp	r3, #14
 80089aa:	d007      	beq.n	80089bc <HAL_RCC_ClockConfig+0x9c>
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	2b0f      	cmp	r3, #15
 80089b0:	d004      	beq.n	80089bc <HAL_RCC_ClockConfig+0x9c>
 80089b2:	f240 21de 	movw	r1, #734	@ 0x2de
 80089b6:	486d      	ldr	r0, [pc, #436]	@ (8008b6c <HAL_RCC_ClockConfig+0x24c>)
 80089b8:	f7fe f83c 	bl	8006a34 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80089bc:	4b6c      	ldr	r3, [pc, #432]	@ (8008b70 <HAL_RCC_ClockConfig+0x250>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 030f 	and.w	r3, r3, #15
 80089c4:	683a      	ldr	r2, [r7, #0]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d910      	bls.n	80089ec <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089ca:	4b69      	ldr	r3, [pc, #420]	@ (8008b70 <HAL_RCC_ClockConfig+0x250>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f023 020f 	bic.w	r2, r3, #15
 80089d2:	4967      	ldr	r1, [pc, #412]	@ (8008b70 <HAL_RCC_ClockConfig+0x250>)
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089da:	4b65      	ldr	r3, [pc, #404]	@ (8008b70 <HAL_RCC_ClockConfig+0x250>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 030f 	and.w	r3, r3, #15
 80089e2:	683a      	ldr	r2, [r7, #0]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d001      	beq.n	80089ec <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e132      	b.n	8008c52 <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f003 0302 	and.w	r3, r3, #2
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d049      	beq.n	8008a8c <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 0304 	and.w	r3, r3, #4
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d005      	beq.n	8008a10 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a04:	4b5b      	ldr	r3, [pc, #364]	@ (8008b74 <HAL_RCC_ClockConfig+0x254>)
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	4a5a      	ldr	r2, [pc, #360]	@ (8008b74 <HAL_RCC_ClockConfig+0x254>)
 8008a0a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008a0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 0308 	and.w	r3, r3, #8
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d005      	beq.n	8008a28 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008a1c:	4b55      	ldr	r3, [pc, #340]	@ (8008b74 <HAL_RCC_ClockConfig+0x254>)
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	4a54      	ldr	r2, [pc, #336]	@ (8008b74 <HAL_RCC_ClockConfig+0x254>)
 8008a22:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008a26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d024      	beq.n	8008a7a <HAL_RCC_ClockConfig+0x15a>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	2b80      	cmp	r3, #128	@ 0x80
 8008a36:	d020      	beq.n	8008a7a <HAL_RCC_ClockConfig+0x15a>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	2b90      	cmp	r3, #144	@ 0x90
 8008a3e:	d01c      	beq.n	8008a7a <HAL_RCC_ClockConfig+0x15a>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	2ba0      	cmp	r3, #160	@ 0xa0
 8008a46:	d018      	beq.n	8008a7a <HAL_RCC_ClockConfig+0x15a>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	2bb0      	cmp	r3, #176	@ 0xb0
 8008a4e:	d014      	beq.n	8008a7a <HAL_RCC_ClockConfig+0x15a>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	2bc0      	cmp	r3, #192	@ 0xc0
 8008a56:	d010      	beq.n	8008a7a <HAL_RCC_ClockConfig+0x15a>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	2bd0      	cmp	r3, #208	@ 0xd0
 8008a5e:	d00c      	beq.n	8008a7a <HAL_RCC_ClockConfig+0x15a>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	2be0      	cmp	r3, #224	@ 0xe0
 8008a66:	d008      	beq.n	8008a7a <HAL_RCC_ClockConfig+0x15a>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	2bf0      	cmp	r3, #240	@ 0xf0
 8008a6e:	d004      	beq.n	8008a7a <HAL_RCC_ClockConfig+0x15a>
 8008a70:	f240 3102 	movw	r1, #770	@ 0x302
 8008a74:	483d      	ldr	r0, [pc, #244]	@ (8008b6c <HAL_RCC_ClockConfig+0x24c>)
 8008a76:	f7fd ffdd 	bl	8006a34 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a7a:	4b3e      	ldr	r3, [pc, #248]	@ (8008b74 <HAL_RCC_ClockConfig+0x254>)
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	493b      	ldr	r1, [pc, #236]	@ (8008b74 <HAL_RCC_ClockConfig+0x254>)
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f003 0301 	and.w	r3, r3, #1
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d051      	beq.n	8008b3c <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d00c      	beq.n	8008aba <HAL_RCC_ClockConfig+0x19a>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d008      	beq.n	8008aba <HAL_RCC_ClockConfig+0x19a>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d004      	beq.n	8008aba <HAL_RCC_ClockConfig+0x19a>
 8008ab0:	f240 3109 	movw	r1, #777	@ 0x309
 8008ab4:	482d      	ldr	r0, [pc, #180]	@ (8008b6c <HAL_RCC_ClockConfig+0x24c>)
 8008ab6:	f7fd ffbd 	bl	8006a34 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d107      	bne.n	8008ad2 <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ac2:	4b2c      	ldr	r3, [pc, #176]	@ (8008b74 <HAL_RCC_ClockConfig+0x254>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d115      	bne.n	8008afa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e0bf      	b.n	8008c52 <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d107      	bne.n	8008aea <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ada:	4b26      	ldr	r3, [pc, #152]	@ (8008b74 <HAL_RCC_ClockConfig+0x254>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d109      	bne.n	8008afa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e0b3      	b.n	8008c52 <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008aea:	4b22      	ldr	r3, [pc, #136]	@ (8008b74 <HAL_RCC_ClockConfig+0x254>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f003 0302 	and.w	r3, r3, #2
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d101      	bne.n	8008afa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e0ab      	b.n	8008c52 <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008afa:	4b1e      	ldr	r3, [pc, #120]	@ (8008b74 <HAL_RCC_ClockConfig+0x254>)
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	f023 0203 	bic.w	r2, r3, #3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	491b      	ldr	r1, [pc, #108]	@ (8008b74 <HAL_RCC_ClockConfig+0x254>)
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b0c:	f7fe fcd2 	bl	80074b4 <HAL_GetTick>
 8008b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b12:	e00a      	b.n	8008b2a <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b14:	f7fe fcce 	bl	80074b4 <HAL_GetTick>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	1ad3      	subs	r3, r2, r3
 8008b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d901      	bls.n	8008b2a <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 8008b26:	2303      	movs	r3, #3
 8008b28:	e093      	b.n	8008c52 <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b2a:	4b12      	ldr	r3, [pc, #72]	@ (8008b74 <HAL_RCC_ClockConfig+0x254>)
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	f003 020c 	and.w	r2, r3, #12
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d1eb      	bne.n	8008b14 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8008b70 <HAL_RCC_ClockConfig+0x250>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f003 030f 	and.w	r3, r3, #15
 8008b44:	683a      	ldr	r2, [r7, #0]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d216      	bcs.n	8008b78 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b4a:	4b09      	ldr	r3, [pc, #36]	@ (8008b70 <HAL_RCC_ClockConfig+0x250>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f023 020f 	bic.w	r2, r3, #15
 8008b52:	4907      	ldr	r1, [pc, #28]	@ (8008b70 <HAL_RCC_ClockConfig+0x250>)
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b5a:	4b05      	ldr	r3, [pc, #20]	@ (8008b70 <HAL_RCC_ClockConfig+0x250>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f003 030f 	and.w	r3, r3, #15
 8008b62:	683a      	ldr	r2, [r7, #0]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d007      	beq.n	8008b78 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e072      	b.n	8008c52 <HAL_RCC_ClockConfig+0x332>
 8008b6c:	08018984 	.word	0x08018984
 8008b70:	40023c00 	.word	0x40023c00
 8008b74:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 0304 	and.w	r3, r3, #4
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d025      	beq.n	8008bd0 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d018      	beq.n	8008bbe <HAL_RCC_ClockConfig+0x29e>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b94:	d013      	beq.n	8008bbe <HAL_RCC_ClockConfig+0x29e>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008b9e:	d00e      	beq.n	8008bbe <HAL_RCC_ClockConfig+0x29e>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8008ba8:	d009      	beq.n	8008bbe <HAL_RCC_ClockConfig+0x29e>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8008bb2:	d004      	beq.n	8008bbe <HAL_RCC_ClockConfig+0x29e>
 8008bb4:	f240 3146 	movw	r1, #838	@ 0x346
 8008bb8:	4828      	ldr	r0, [pc, #160]	@ (8008c5c <HAL_RCC_ClockConfig+0x33c>)
 8008bba:	f7fd ff3b 	bl	8006a34 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008bbe:	4b28      	ldr	r3, [pc, #160]	@ (8008c60 <HAL_RCC_ClockConfig+0x340>)
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	4925      	ldr	r1, [pc, #148]	@ (8008c60 <HAL_RCC_ClockConfig+0x340>)
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f003 0308 	and.w	r3, r3, #8
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d026      	beq.n	8008c2a <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	691b      	ldr	r3, [r3, #16]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d018      	beq.n	8008c16 <HAL_RCC_ClockConfig+0x2f6>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	691b      	ldr	r3, [r3, #16]
 8008be8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bec:	d013      	beq.n	8008c16 <HAL_RCC_ClockConfig+0x2f6>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008bf6:	d00e      	beq.n	8008c16 <HAL_RCC_ClockConfig+0x2f6>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	691b      	ldr	r3, [r3, #16]
 8008bfc:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8008c00:	d009      	beq.n	8008c16 <HAL_RCC_ClockConfig+0x2f6>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	691b      	ldr	r3, [r3, #16]
 8008c06:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8008c0a:	d004      	beq.n	8008c16 <HAL_RCC_ClockConfig+0x2f6>
 8008c0c:	f240 314d 	movw	r1, #845	@ 0x34d
 8008c10:	4812      	ldr	r0, [pc, #72]	@ (8008c5c <HAL_RCC_ClockConfig+0x33c>)
 8008c12:	f7fd ff0f 	bl	8006a34 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008c16:	4b12      	ldr	r3, [pc, #72]	@ (8008c60 <HAL_RCC_ClockConfig+0x340>)
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	691b      	ldr	r3, [r3, #16]
 8008c22:	00db      	lsls	r3, r3, #3
 8008c24:	490e      	ldr	r1, [pc, #56]	@ (8008c60 <HAL_RCC_ClockConfig+0x340>)
 8008c26:	4313      	orrs	r3, r2
 8008c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008c2a:	f000 f821 	bl	8008c70 <HAL_RCC_GetSysClockFreq>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	4b0b      	ldr	r3, [pc, #44]	@ (8008c60 <HAL_RCC_ClockConfig+0x340>)
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	091b      	lsrs	r3, r3, #4
 8008c36:	f003 030f 	and.w	r3, r3, #15
 8008c3a:	490a      	ldr	r1, [pc, #40]	@ (8008c64 <HAL_RCC_ClockConfig+0x344>)
 8008c3c:	5ccb      	ldrb	r3, [r1, r3]
 8008c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c42:	4a09      	ldr	r2, [pc, #36]	@ (8008c68 <HAL_RCC_ClockConfig+0x348>)
 8008c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008c46:	4b09      	ldr	r3, [pc, #36]	@ (8008c6c <HAL_RCC_ClockConfig+0x34c>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7fe fbee 	bl	800742c <HAL_InitTick>

  return HAL_OK;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	08018984 	.word	0x08018984
 8008c60:	40023800 	.word	0x40023800
 8008c64:	080191f0 	.word	0x080191f0
 8008c68:	2000004c 	.word	0x2000004c
 8008c6c:	20000050 	.word	0x20000050

08008c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c74:	b090      	sub	sp, #64	@ 0x40
 8008c76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c80:	2300      	movs	r3, #0
 8008c82:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8008c84:	2300      	movs	r3, #0
 8008c86:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c88:	4b59      	ldr	r3, [pc, #356]	@ (8008df0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	f003 030c 	and.w	r3, r3, #12
 8008c90:	2b08      	cmp	r3, #8
 8008c92:	d00d      	beq.n	8008cb0 <HAL_RCC_GetSysClockFreq+0x40>
 8008c94:	2b08      	cmp	r3, #8
 8008c96:	f200 80a1 	bhi.w	8008ddc <HAL_RCC_GetSysClockFreq+0x16c>
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d002      	beq.n	8008ca4 <HAL_RCC_GetSysClockFreq+0x34>
 8008c9e:	2b04      	cmp	r3, #4
 8008ca0:	d003      	beq.n	8008caa <HAL_RCC_GetSysClockFreq+0x3a>
 8008ca2:	e09b      	b.n	8008ddc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008ca4:	4b53      	ldr	r3, [pc, #332]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0x184>)
 8008ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008ca8:	e09b      	b.n	8008de2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008caa:	4b53      	ldr	r3, [pc, #332]	@ (8008df8 <HAL_RCC_GetSysClockFreq+0x188>)
 8008cac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008cae:	e098      	b.n	8008de2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008cb0:	4b4f      	ldr	r3, [pc, #316]	@ (8008df0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008cb8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008cba:	4b4d      	ldr	r3, [pc, #308]	@ (8008df0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d028      	beq.n	8008d18 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008cc6:	4b4a      	ldr	r3, [pc, #296]	@ (8008df0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	099b      	lsrs	r3, r3, #6
 8008ccc:	2200      	movs	r2, #0
 8008cce:	623b      	str	r3, [r7, #32]
 8008cd0:	627a      	str	r2, [r7, #36]	@ 0x24
 8008cd2:	6a3b      	ldr	r3, [r7, #32]
 8008cd4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008cd8:	2100      	movs	r1, #0
 8008cda:	4b47      	ldr	r3, [pc, #284]	@ (8008df8 <HAL_RCC_GetSysClockFreq+0x188>)
 8008cdc:	fb03 f201 	mul.w	r2, r3, r1
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	fb00 f303 	mul.w	r3, r0, r3
 8008ce6:	4413      	add	r3, r2
 8008ce8:	4a43      	ldr	r2, [pc, #268]	@ (8008df8 <HAL_RCC_GetSysClockFreq+0x188>)
 8008cea:	fba0 1202 	umull	r1, r2, r0, r2
 8008cee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008cf0:	460a      	mov	r2, r1
 8008cf2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008cf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cf6:	4413      	add	r3, r2
 8008cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	61bb      	str	r3, [r7, #24]
 8008d00:	61fa      	str	r2, [r7, #28]
 8008d02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008d0a:	f7f7 ffed 	bl	8000ce8 <__aeabi_uldivmod>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	460b      	mov	r3, r1
 8008d12:	4613      	mov	r3, r2
 8008d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d16:	e053      	b.n	8008dc0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d18:	4b35      	ldr	r3, [pc, #212]	@ (8008df0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	099b      	lsrs	r3, r3, #6
 8008d1e:	2200      	movs	r2, #0
 8008d20:	613b      	str	r3, [r7, #16]
 8008d22:	617a      	str	r2, [r7, #20]
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008d2a:	f04f 0b00 	mov.w	fp, #0
 8008d2e:	4652      	mov	r2, sl
 8008d30:	465b      	mov	r3, fp
 8008d32:	f04f 0000 	mov.w	r0, #0
 8008d36:	f04f 0100 	mov.w	r1, #0
 8008d3a:	0159      	lsls	r1, r3, #5
 8008d3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008d40:	0150      	lsls	r0, r2, #5
 8008d42:	4602      	mov	r2, r0
 8008d44:	460b      	mov	r3, r1
 8008d46:	ebb2 080a 	subs.w	r8, r2, sl
 8008d4a:	eb63 090b 	sbc.w	r9, r3, fp
 8008d4e:	f04f 0200 	mov.w	r2, #0
 8008d52:	f04f 0300 	mov.w	r3, #0
 8008d56:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008d5a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008d5e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008d62:	ebb2 0408 	subs.w	r4, r2, r8
 8008d66:	eb63 0509 	sbc.w	r5, r3, r9
 8008d6a:	f04f 0200 	mov.w	r2, #0
 8008d6e:	f04f 0300 	mov.w	r3, #0
 8008d72:	00eb      	lsls	r3, r5, #3
 8008d74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d78:	00e2      	lsls	r2, r4, #3
 8008d7a:	4614      	mov	r4, r2
 8008d7c:	461d      	mov	r5, r3
 8008d7e:	eb14 030a 	adds.w	r3, r4, sl
 8008d82:	603b      	str	r3, [r7, #0]
 8008d84:	eb45 030b 	adc.w	r3, r5, fp
 8008d88:	607b      	str	r3, [r7, #4]
 8008d8a:	f04f 0200 	mov.w	r2, #0
 8008d8e:	f04f 0300 	mov.w	r3, #0
 8008d92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008d96:	4629      	mov	r1, r5
 8008d98:	028b      	lsls	r3, r1, #10
 8008d9a:	4621      	mov	r1, r4
 8008d9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008da0:	4621      	mov	r1, r4
 8008da2:	028a      	lsls	r2, r1, #10
 8008da4:	4610      	mov	r0, r2
 8008da6:	4619      	mov	r1, r3
 8008da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008daa:	2200      	movs	r2, #0
 8008dac:	60bb      	str	r3, [r7, #8]
 8008dae:	60fa      	str	r2, [r7, #12]
 8008db0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008db4:	f7f7 ff98 	bl	8000ce8 <__aeabi_uldivmod>
 8008db8:	4602      	mov	r2, r0
 8008dba:	460b      	mov	r3, r1
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8008df0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	0c1b      	lsrs	r3, r3, #16
 8008dc6:	f003 0303 	and.w	r3, r3, #3
 8008dca:	3301      	adds	r3, #1
 8008dcc:	005b      	lsls	r3, r3, #1
 8008dce:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008dd0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dd8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008dda:	e002      	b.n	8008de2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008ddc:	4b05      	ldr	r3, [pc, #20]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0x184>)
 8008dde:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008de0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3740      	adds	r7, #64	@ 0x40
 8008de8:	46bd      	mov	sp, r7
 8008dea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008dee:	bf00      	nop
 8008df0:	40023800 	.word	0x40023800
 8008df4:	00f42400 	.word	0x00f42400
 8008df8:	017d7840 	.word	0x017d7840

08008dfc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e00:	4b03      	ldr	r3, [pc, #12]	@ (8008e10 <HAL_RCC_GetHCLKFreq+0x14>)
 8008e02:	681b      	ldr	r3, [r3, #0]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	2000004c 	.word	0x2000004c

08008e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008e18:	f7ff fff0 	bl	8008dfc <HAL_RCC_GetHCLKFreq>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	4b05      	ldr	r3, [pc, #20]	@ (8008e34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	0a9b      	lsrs	r3, r3, #10
 8008e24:	f003 0307 	and.w	r3, r3, #7
 8008e28:	4903      	ldr	r1, [pc, #12]	@ (8008e38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e2a:	5ccb      	ldrb	r3, [r1, r3]
 8008e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	40023800 	.word	0x40023800
 8008e38:	08019200 	.word	0x08019200

08008e3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008e40:	f7ff ffdc 	bl	8008dfc <HAL_RCC_GetHCLKFreq>
 8008e44:	4602      	mov	r2, r0
 8008e46:	4b05      	ldr	r3, [pc, #20]	@ (8008e5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	0b5b      	lsrs	r3, r3, #13
 8008e4c:	f003 0307 	and.w	r3, r3, #7
 8008e50:	4903      	ldr	r1, [pc, #12]	@ (8008e60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e52:	5ccb      	ldrb	r3, [r1, r3]
 8008e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	40023800 	.word	0x40023800
 8008e60:	08019200 	.word	0x08019200

08008e64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b088      	sub	sp, #32
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008e70:	2300      	movs	r3, #0
 8008e72:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008e74:	2300      	movs	r3, #0
 8008e76:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f003 0301 	and.w	r3, r3, #1
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f040 8089 	bne.w	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f003 0308 	and.w	r3, r3, #8
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	f040 8082 	bne.w	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 0310 	and.w	r3, r3, #16
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d17b      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d175      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d16f      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d169      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d163      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d15d      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d157      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d151      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d14b      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d145      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d13f      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d139      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d133      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d12d      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d127      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d121      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d11b      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d115      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10f      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d109      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f003 0320 	and.w	r3, r3, #32
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d103      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008f98:	2172      	movs	r1, #114	@ 0x72
 8008f9a:	4895      	ldr	r0, [pc, #596]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8008f9c:	f7fd fd4a 	bl	8006a34 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 0301 	and.w	r3, r3, #1
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d01f      	beq.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d008      	beq.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fb8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008fbc:	d003      	beq.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8008fbe:	2178      	movs	r1, #120	@ 0x78
 8008fc0:	488b      	ldr	r0, [pc, #556]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8008fc2:	f7fd fd37 	bl	8006a34 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008fc6:	4b8b      	ldr	r3, [pc, #556]	@ (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	4a8a      	ldr	r2, [pc, #552]	@ (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8008fcc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008fd0:	6093      	str	r3, [r2, #8]
 8008fd2:	4b88      	ldr	r3, [pc, #544]	@ (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8008fd4:	689a      	ldr	r2, [r3, #8]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fda:	4986      	ldr	r1, [pc, #536]	@ (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d101      	bne.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d029      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d00d      	beq.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009004:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009008:	d008      	beq.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800900e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009012:	d003      	beq.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8009014:	2188      	movs	r1, #136	@ 0x88
 8009016:	4876      	ldr	r0, [pc, #472]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8009018:	f7fd fd0c 	bl	8006a34 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800901c:	4b75      	ldr	r3, [pc, #468]	@ (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800901e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009022:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800902a:	4972      	ldr	r1, [pc, #456]	@ (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800902c:	4313      	orrs	r3, r2
 800902e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009036:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800903a:	d101      	bne.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 800903c:	2301      	movs	r3, #1
 800903e:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009044:	2b00      	cmp	r3, #0
 8009046:	d101      	bne.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 8009048:	2301      	movs	r3, #1
 800904a:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009054:	2b00      	cmp	r3, #0
 8009056:	d029      	beq.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800905c:	2b00      	cmp	r3, #0
 800905e:	d00d      	beq.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009064:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009068:	d008      	beq.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800906e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009072:	d003      	beq.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009074:	219c      	movs	r1, #156	@ 0x9c
 8009076:	485e      	ldr	r0, [pc, #376]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8009078:	f7fd fcdc 	bl	8006a34 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800907c:	4b5d      	ldr	r3, [pc, #372]	@ (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800907e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009082:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800908a:	495a      	ldr	r1, [pc, #360]	@ (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800908c:	4313      	orrs	r3, r2
 800908e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009096:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800909a:	d101      	bne.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 800909c:	2301      	movs	r3, #1
 800909e:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d101      	bne.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 80090a8:	2301      	movs	r3, #1
 80090aa:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d001      	beq.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 80090b8:	2301      	movs	r3, #1
 80090ba:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f003 0320 	and.w	r3, r3, #32
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f000 8186 	beq.w	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090d2:	f000 80e4 	beq.w	800929e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090de:	f000 80de 	beq.w	800929e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090e6:	4a44      	ldr	r2, [pc, #272]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	f000 80d8 	beq.w	800929e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090f2:	4a42      	ldr	r2, [pc, #264]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	f000 80d2 	beq.w	800929e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090fe:	4a40      	ldr	r2, [pc, #256]	@ (8009200 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8009100:	4293      	cmp	r3, r2
 8009102:	f000 80cc 	beq.w	800929e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800910a:	4a3e      	ldr	r2, [pc, #248]	@ (8009204 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 800910c:	4293      	cmp	r3, r2
 800910e:	f000 80c6 	beq.w	800929e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009116:	4a3c      	ldr	r2, [pc, #240]	@ (8009208 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8009118:	4293      	cmp	r3, r2
 800911a:	f000 80c0 	beq.w	800929e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009122:	4a3a      	ldr	r2, [pc, #232]	@ (800920c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8009124:	4293      	cmp	r3, r2
 8009126:	f000 80ba 	beq.w	800929e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800912e:	4a38      	ldr	r2, [pc, #224]	@ (8009210 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8009130:	4293      	cmp	r3, r2
 8009132:	f000 80b4 	beq.w	800929e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800913a:	4a36      	ldr	r2, [pc, #216]	@ (8009214 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 800913c:	4293      	cmp	r3, r2
 800913e:	f000 80ae 	beq.w	800929e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009146:	4a34      	ldr	r2, [pc, #208]	@ (8009218 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8009148:	4293      	cmp	r3, r2
 800914a:	f000 80a8 	beq.w	800929e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009152:	4a32      	ldr	r2, [pc, #200]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8009154:	4293      	cmp	r3, r2
 8009156:	f000 80a2 	beq.w	800929e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800915e:	4a30      	ldr	r2, [pc, #192]	@ (8009220 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8009160:	4293      	cmp	r3, r2
 8009162:	f000 809c 	beq.w	800929e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800916a:	4a2e      	ldr	r2, [pc, #184]	@ (8009224 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 800916c:	4293      	cmp	r3, r2
 800916e:	f000 8096 	beq.w	800929e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009176:	4a2c      	ldr	r2, [pc, #176]	@ (8009228 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8009178:	4293      	cmp	r3, r2
 800917a:	f000 8090 	beq.w	800929e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009182:	4a2a      	ldr	r2, [pc, #168]	@ (800922c <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8009184:	4293      	cmp	r3, r2
 8009186:	f000 808a 	beq.w	800929e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800918e:	4a28      	ldr	r2, [pc, #160]	@ (8009230 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8009190:	4293      	cmp	r3, r2
 8009192:	f000 8084 	beq.w	800929e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800919a:	4a26      	ldr	r2, [pc, #152]	@ (8009234 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d07e      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091a4:	4a24      	ldr	r2, [pc, #144]	@ (8009238 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d079      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ae:	4a23      	ldr	r2, [pc, #140]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d074      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091b8:	4a21      	ldr	r2, [pc, #132]	@ (8009240 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d06f      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091c2:	4a20      	ldr	r2, [pc, #128]	@ (8009244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d06a      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091cc:	4a1e      	ldr	r2, [pc, #120]	@ (8009248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d065      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091d6:	4a1d      	ldr	r2, [pc, #116]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d060      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091e0:	4a1b      	ldr	r2, [pc, #108]	@ (8009250 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d05b      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ea:	4a1a      	ldr	r2, [pc, #104]	@ (8009254 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	e033      	b.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80091f0:	080189bc 	.word	0x080189bc
 80091f4:	40023800 	.word	0x40023800
 80091f8:	00020300 	.word	0x00020300
 80091fc:	00030300 	.word	0x00030300
 8009200:	00040300 	.word	0x00040300
 8009204:	00050300 	.word	0x00050300
 8009208:	00060300 	.word	0x00060300
 800920c:	00070300 	.word	0x00070300
 8009210:	00080300 	.word	0x00080300
 8009214:	00090300 	.word	0x00090300
 8009218:	000a0300 	.word	0x000a0300
 800921c:	000b0300 	.word	0x000b0300
 8009220:	000c0300 	.word	0x000c0300
 8009224:	000d0300 	.word	0x000d0300
 8009228:	000e0300 	.word	0x000e0300
 800922c:	000f0300 	.word	0x000f0300
 8009230:	00100300 	.word	0x00100300
 8009234:	00110300 	.word	0x00110300
 8009238:	00120300 	.word	0x00120300
 800923c:	00130300 	.word	0x00130300
 8009240:	00140300 	.word	0x00140300
 8009244:	00150300 	.word	0x00150300
 8009248:	00160300 	.word	0x00160300
 800924c:	00170300 	.word	0x00170300
 8009250:	00180300 	.word	0x00180300
 8009254:	00190300 	.word	0x00190300
 8009258:	d021      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800925e:	4a4c      	ldr	r2, [pc, #304]	@ (8009390 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d01c      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009268:	4a4a      	ldr	r2, [pc, #296]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d017      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009272:	4a49      	ldr	r2, [pc, #292]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d012      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800927c:	4a47      	ldr	r2, [pc, #284]	@ (800939c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d00d      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009286:	4a46      	ldr	r2, [pc, #280]	@ (80093a0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d008      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009290:	4a44      	ldr	r2, [pc, #272]	@ (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d003      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8009296:	21b7      	movs	r1, #183	@ 0xb7
 8009298:	4843      	ldr	r0, [pc, #268]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 800929a:	f7fd fbcb 	bl	8006a34 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800929e:	4b43      	ldr	r3, [pc, #268]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80092a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092a2:	4a42      	ldr	r2, [pc, #264]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80092a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80092aa:	4b40      	ldr	r3, [pc, #256]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80092ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092b2:	60bb      	str	r3, [r7, #8]
 80092b4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80092b6:	4b3e      	ldr	r3, [pc, #248]	@ (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a3d      	ldr	r2, [pc, #244]	@ (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 80092bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092c2:	f7fe f8f7 	bl	80074b4 <HAL_GetTick>
 80092c6:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80092c8:	e009      	b.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092ca:	f7fe f8f3 	bl	80074b4 <HAL_GetTick>
 80092ce:	4602      	mov	r2, r0
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	1ad3      	subs	r3, r2, r3
 80092d4:	2b64      	cmp	r3, #100	@ 0x64
 80092d6:	d902      	bls.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 80092d8:	2303      	movs	r3, #3
 80092da:	f000 bd9f 	b.w	8009e1c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80092de:	4b34      	ldr	r3, [pc, #208]	@ (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d0ef      	beq.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80092ea:	4b30      	ldr	r3, [pc, #192]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80092ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80092f2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d036      	beq.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009302:	693a      	ldr	r2, [r7, #16]
 8009304:	429a      	cmp	r2, r3
 8009306:	d02f      	beq.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009308:	4b28      	ldr	r3, [pc, #160]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800930a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800930c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009310:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009312:	4b26      	ldr	r3, [pc, #152]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009316:	4a25      	ldr	r2, [pc, #148]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800931c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800931e:	4b23      	ldr	r3, [pc, #140]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009322:	4a22      	ldr	r2, [pc, #136]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009324:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009328:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800932a:	4a20      	ldr	r2, [pc, #128]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009330:	4b1e      	ldr	r3, [pc, #120]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009334:	f003 0301 	and.w	r3, r3, #1
 8009338:	2b01      	cmp	r3, #1
 800933a:	d115      	bne.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800933c:	f7fe f8ba 	bl	80074b4 <HAL_GetTick>
 8009340:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009342:	e00b      	b.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009344:	f7fe f8b6 	bl	80074b4 <HAL_GetTick>
 8009348:	4602      	mov	r2, r0
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	1ad3      	subs	r3, r2, r3
 800934e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009352:	4293      	cmp	r3, r2
 8009354:	d902      	bls.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8009356:	2303      	movs	r3, #3
 8009358:	f000 bd60 	b.w	8009e1c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800935c:	4b13      	ldr	r3, [pc, #76]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800935e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009360:	f003 0302 	and.w	r3, r3, #2
 8009364:	2b00      	cmp	r3, #0
 8009366:	d0ed      	beq.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800936c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009370:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009374:	d120      	bne.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8009376:	4b0d      	ldr	r3, [pc, #52]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009382:	4b0c      	ldr	r3, [pc, #48]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8009384:	400b      	ands	r3, r1
 8009386:	4909      	ldr	r1, [pc, #36]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009388:	4313      	orrs	r3, r2
 800938a:	608b      	str	r3, [r1, #8]
 800938c:	e01a      	b.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x560>
 800938e:	bf00      	nop
 8009390:	001a0300 	.word	0x001a0300
 8009394:	001b0300 	.word	0x001b0300
 8009398:	001c0300 	.word	0x001c0300
 800939c:	001d0300 	.word	0x001d0300
 80093a0:	001e0300 	.word	0x001e0300
 80093a4:	001f0300 	.word	0x001f0300
 80093a8:	080189bc 	.word	0x080189bc
 80093ac:	40023800 	.word	0x40023800
 80093b0:	40007000 	.word	0x40007000
 80093b4:	0ffffcff 	.word	0x0ffffcff
 80093b8:	4b9a      	ldr	r3, [pc, #616]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	4a99      	ldr	r2, [pc, #612]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80093be:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80093c2:	6093      	str	r3, [r2, #8]
 80093c4:	4b97      	ldr	r3, [pc, #604]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80093c6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093d0:	4994      	ldr	r1, [pc, #592]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80093d2:	4313      	orrs	r3, r2
 80093d4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f003 0310 	and.w	r3, r3, #16
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d01d      	beq.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d008      	beq.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x598>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80093f2:	d003      	beq.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x598>
 80093f4:	21f1      	movs	r1, #241	@ 0xf1
 80093f6:	488c      	ldr	r0, [pc, #560]	@ (8009628 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80093f8:	f7fd fb1c 	bl	8006a34 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80093fc:	4b89      	ldr	r3, [pc, #548]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80093fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009402:	4a88      	ldr	r2, [pc, #544]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009404:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009408:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800940c:	4b85      	ldr	r3, [pc, #532]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800940e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009416:	4983      	ldr	r1, [pc, #524]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009418:	4313      	orrs	r3, r2
 800941a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009426:	2b00      	cmp	r3, #0
 8009428:	d01c      	beq.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800942e:	2b00      	cmp	r3, #0
 8009430:	d00d      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009436:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800943a:	d008      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009440:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009444:	d003      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8009446:	21fb      	movs	r1, #251	@ 0xfb
 8009448:	4877      	ldr	r0, [pc, #476]	@ (8009628 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800944a:	f7fd faf3 	bl	8006a34 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800944e:	4b75      	ldr	r3, [pc, #468]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009454:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800945c:	4971      	ldr	r1, [pc, #452]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800945e:	4313      	orrs	r3, r2
 8009460:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800946c:	2b00      	cmp	r3, #0
 800946e:	d01d      	beq.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009474:	2b00      	cmp	r3, #0
 8009476:	d00e      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800947c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009480:	d009      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009486:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800948a:	d004      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x632>
 800948c:	f240 1105 	movw	r1, #261	@ 0x105
 8009490:	4865      	ldr	r0, [pc, #404]	@ (8009628 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8009492:	f7fd facf 	bl	8006a34 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009496:	4b63      	ldr	r3, [pc, #396]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800949c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094a4:	495f      	ldr	r1, [pc, #380]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80094a6:	4313      	orrs	r3, r2
 80094a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d01d      	beq.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d00e      	beq.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x67a>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094c8:	d009      	beq.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x67a>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80094d2:	d004      	beq.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x67a>
 80094d4:	f240 110f 	movw	r1, #271	@ 0x10f
 80094d8:	4853      	ldr	r0, [pc, #332]	@ (8009628 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80094da:	f7fd faab 	bl	8006a34 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80094de:	4b51      	ldr	r3, [pc, #324]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80094e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094e4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094ec:	494d      	ldr	r1, [pc, #308]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80094ee:	4313      	orrs	r3, r2
 80094f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d01d      	beq.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009504:	2b00      	cmp	r3, #0
 8009506:	d00e      	beq.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800950c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009510:	d009      	beq.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009516:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800951a:	d004      	beq.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 800951c:	f240 1119 	movw	r1, #281	@ 0x119
 8009520:	4841      	ldr	r0, [pc, #260]	@ (8009628 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8009522:	f7fd fa87 	bl	8006a34 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009526:	4b3f      	ldr	r3, [pc, #252]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800952c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009534:	493b      	ldr	r1, [pc, #236]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009536:	4313      	orrs	r3, r2
 8009538:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009544:	2b00      	cmp	r3, #0
 8009546:	d01f      	beq.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800954c:	2b00      	cmp	r3, #0
 800954e:	d010      	beq.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009554:	2b01      	cmp	r3, #1
 8009556:	d00c      	beq.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800955c:	2b03      	cmp	r3, #3
 800955e:	d008      	beq.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009564:	2b02      	cmp	r3, #2
 8009566:	d004      	beq.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8009568:	f240 1123 	movw	r1, #291	@ 0x123
 800956c:	482e      	ldr	r0, [pc, #184]	@ (8009628 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800956e:	f7fd fa61 	bl	8006a34 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009572:	4b2c      	ldr	r3, [pc, #176]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009578:	f023 0203 	bic.w	r2, r3, #3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009580:	4928      	ldr	r1, [pc, #160]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009582:	4313      	orrs	r3, r2
 8009584:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009590:	2b00      	cmp	r3, #0
 8009592:	d01f      	beq.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009598:	2b00      	cmp	r3, #0
 800959a:	d010      	beq.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x75a>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095a0:	2b04      	cmp	r3, #4
 80095a2:	d00c      	beq.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x75a>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095a8:	2b0c      	cmp	r3, #12
 80095aa:	d008      	beq.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x75a>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095b0:	2b08      	cmp	r3, #8
 80095b2:	d004      	beq.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x75a>
 80095b4:	f240 112d 	movw	r1, #301	@ 0x12d
 80095b8:	481b      	ldr	r0, [pc, #108]	@ (8009628 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80095ba:	f7fd fa3b 	bl	8006a34 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80095be:	4b19      	ldr	r3, [pc, #100]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80095c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095c4:	f023 020c 	bic.w	r2, r3, #12
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095cc:	4915      	ldr	r1, [pc, #84]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80095ce:	4313      	orrs	r3, r2
 80095d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d025      	beq.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d010      	beq.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095ec:	2b10      	cmp	r3, #16
 80095ee:	d00c      	beq.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095f4:	2b30      	cmp	r3, #48	@ 0x30
 80095f6:	d008      	beq.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095fc:	2b20      	cmp	r3, #32
 80095fe:	d004      	beq.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8009600:	f240 1137 	movw	r1, #311	@ 0x137
 8009604:	4808      	ldr	r0, [pc, #32]	@ (8009628 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8009606:	f7fd fa15 	bl	8006a34 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800960a:	4b06      	ldr	r3, [pc, #24]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800960c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009610:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009618:	4902      	ldr	r1, [pc, #8]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800961a:	4313      	orrs	r3, r2
 800961c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009620:	e004      	b.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8009622:	bf00      	nop
 8009624:	40023800 	.word	0x40023800
 8009628:	080189bc 	.word	0x080189bc
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009634:	2b00      	cmp	r3, #0
 8009636:	d01f      	beq.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800963c:	2b00      	cmp	r3, #0
 800963e:	d010      	beq.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009644:	2b40      	cmp	r3, #64	@ 0x40
 8009646:	d00c      	beq.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800964c:	2bc0      	cmp	r3, #192	@ 0xc0
 800964e:	d008      	beq.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009654:	2b80      	cmp	r3, #128	@ 0x80
 8009656:	d004      	beq.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8009658:	f240 1141 	movw	r1, #321	@ 0x141
 800965c:	48a0      	ldr	r0, [pc, #640]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800965e:	f7fd f9e9 	bl	8006a34 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009662:	4ba0      	ldr	r3, [pc, #640]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8009664:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009668:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009670:	499c      	ldr	r1, [pc, #624]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8009672:	4313      	orrs	r3, r2
 8009674:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009680:	2b00      	cmp	r3, #0
 8009682:	d022      	beq.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009688:	2b00      	cmp	r3, #0
 800968a:	d013      	beq.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x850>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009690:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009694:	d00e      	beq.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800969a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800969e:	d009      	beq.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x850>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096a8:	d004      	beq.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x850>
 80096aa:	f240 114b 	movw	r1, #331	@ 0x14b
 80096ae:	488c      	ldr	r0, [pc, #560]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80096b0:	f7fd f9c0 	bl	8006a34 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80096b4:	4b8b      	ldr	r3, [pc, #556]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80096b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096ba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096c2:	4988      	ldr	r1, [pc, #544]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80096c4:	4313      	orrs	r3, r2
 80096c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d022      	beq.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d013      	beq.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096e6:	d00e      	beq.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80096f0:	d009      	beq.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096fa:	d004      	beq.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80096fc:	f240 1155 	movw	r1, #341	@ 0x155
 8009700:	4877      	ldr	r0, [pc, #476]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8009702:	f7fd f997 	bl	8006a34 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009706:	4b77      	ldr	r3, [pc, #476]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8009708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800970c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009714:	4973      	ldr	r1, [pc, #460]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8009716:	4313      	orrs	r3, r2
 8009718:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009724:	2b00      	cmp	r3, #0
 8009726:	d022      	beq.n	800976e <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800972c:	2b00      	cmp	r3, #0
 800972e:	d013      	beq.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009734:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009738:	d00e      	beq.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800973e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009742:	d009      	beq.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009748:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800974c:	d004      	beq.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800974e:	f240 115f 	movw	r1, #351	@ 0x15f
 8009752:	4863      	ldr	r0, [pc, #396]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8009754:	f7fd f96e 	bl	8006a34 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009758:	4b62      	ldr	r3, [pc, #392]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800975a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800975e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009766:	495f      	ldr	r1, [pc, #380]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8009768:	4313      	orrs	r3, r2
 800976a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009776:	2b00      	cmp	r3, #0
 8009778:	d022      	beq.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800977e:	2b00      	cmp	r3, #0
 8009780:	d013      	beq.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x946>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009786:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800978a:	d00e      	beq.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x946>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009790:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009794:	d009      	beq.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x946>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800979a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800979e:	d004      	beq.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x946>
 80097a0:	f240 1169 	movw	r1, #361	@ 0x169
 80097a4:	484e      	ldr	r0, [pc, #312]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80097a6:	f7fd f945 	bl	8006a34 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80097aa:	4b4e      	ldr	r3, [pc, #312]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80097ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097b0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097b8:	494a      	ldr	r1, [pc, #296]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80097ba:	4313      	orrs	r3, r2
 80097bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d018      	beq.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80097d4:	d008      	beq.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d004      	beq.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80097de:	f240 1173 	movw	r1, #371	@ 0x173
 80097e2:	483f      	ldr	r0, [pc, #252]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80097e4:	f7fd f926 	bl	8006a34 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80097e8:	4b3e      	ldr	r3, [pc, #248]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80097ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097ee:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097f6:	493b      	ldr	r1, [pc, #236]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80097f8:	4313      	orrs	r3, r2
 80097fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009806:	2b00      	cmp	r3, #0
 8009808:	d01f      	beq.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800980e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009812:	d008      	beq.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009818:	2b00      	cmp	r3, #0
 800981a:	d004      	beq.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800981c:	f240 117d 	movw	r1, #381	@ 0x17d
 8009820:	482f      	ldr	r0, [pc, #188]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8009822:	f7fd f907 	bl	8006a34 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009826:	4b2f      	ldr	r3, [pc, #188]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8009828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800982c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009834:	492b      	ldr	r1, [pc, #172]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8009836:	4313      	orrs	r3, r2
 8009838:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009840:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009844:	d101      	bne.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 8009846:	2301      	movs	r3, #1
 8009848:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f003 0308 	and.w	r3, r3, #8
 8009852:	2b00      	cmp	r3, #0
 8009854:	d001      	beq.n	800985a <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 8009856:	2301      	movs	r3, #1
 8009858:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009862:	2b00      	cmp	r3, #0
 8009864:	d022      	beq.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800986a:	2b00      	cmp	r3, #0
 800986c:	d013      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009872:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009876:	d00e      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800987c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009880:	d009      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009886:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800988a:	d004      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 800988c:	f240 1195 	movw	r1, #405	@ 0x195
 8009890:	4813      	ldr	r0, [pc, #76]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8009892:	f7fd f8cf 	bl	8006a34 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009896:	4b13      	ldr	r3, [pc, #76]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8009898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800989c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098a4:	490f      	ldr	r1, [pc, #60]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80098a6:	4313      	orrs	r3, r2
 80098a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d020      	beq.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098c2:	d009      	beq.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d004      	beq.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80098ce:	f240 119f 	movw	r1, #415	@ 0x19f
 80098d2:	4803      	ldr	r0, [pc, #12]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80098d4:	f7fd f8ae 	bl	8006a34 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80098d8:	4b02      	ldr	r3, [pc, #8]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80098da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098de:	e003      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
 80098e0:	080189bc 	.word	0x080189bc
 80098e4:	40023800 	.word	0x40023800
 80098e8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098f2:	4910      	ldr	r1, [pc, #64]	@ (8009934 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80098f4:	4313      	orrs	r3, r2
 80098f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d006      	beq.n	800990e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009908:	2b00      	cmp	r3, #0
 800990a:	f000 8155 	beq.w	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800990e:	4b09      	ldr	r3, [pc, #36]	@ (8009934 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a08      	ldr	r2, [pc, #32]	@ (8009934 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8009914:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009918:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800991a:	f7fd fdcb 	bl	80074b4 <HAL_GetTick>
 800991e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009920:	e00a      	b.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009922:	f7fd fdc7 	bl	80074b4 <HAL_GetTick>
 8009926:	4602      	mov	r2, r0
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	1ad3      	subs	r3, r2, r3
 800992c:	2b64      	cmp	r3, #100	@ 0x64
 800992e:	d903      	bls.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009930:	2303      	movs	r3, #3
 8009932:	e273      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8009934:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009938:	4b9a      	ldr	r3, [pc, #616]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009940:	2b00      	cmp	r3, #0
 8009942:	d1ee      	bne.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	2b31      	cmp	r3, #49	@ 0x31
 800994a:	d904      	bls.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8009954:	d904      	bls.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 8009956:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 800995a:	4893      	ldr	r0, [pc, #588]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800995c:	f7fd f86a 	bl	8006a34 <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f003 0301 	and.w	r3, r3, #1
 8009968:	2b00      	cmp	r3, #0
 800996a:	d02e      	beq.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0xb66>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009970:	2b00      	cmp	r3, #0
 8009972:	d12a      	bne.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	2b01      	cmp	r3, #1
 800997a:	d903      	bls.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0xb20>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	2b07      	cmp	r3, #7
 8009982:	d904      	bls.n	800998e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8009984:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8009988:	4887      	ldr	r0, [pc, #540]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800998a:	f7fd f853 	bl	8006a34 <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800998e:	4b85      	ldr	r3, [pc, #532]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8009990:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009994:	0c1b      	lsrs	r3, r3, #16
 8009996:	f003 0303 	and.w	r3, r3, #3
 800999a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800999c:	4b81      	ldr	r3, [pc, #516]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800999e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099a2:	0e1b      	lsrs	r3, r3, #24
 80099a4:	f003 030f 	and.w	r3, r3, #15
 80099a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	019a      	lsls	r2, r3, #6
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	041b      	lsls	r3, r3, #16
 80099b4:	431a      	orrs	r2, r3
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	061b      	lsls	r3, r3, #24
 80099ba:	431a      	orrs	r2, r3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	071b      	lsls	r3, r3, #28
 80099c2:	4978      	ldr	r1, [pc, #480]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80099c4:	4313      	orrs	r3, r2
 80099c6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d004      	beq.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099de:	d00a      	beq.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d048      	beq.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80099f4:	d143      	bne.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d903      	bls.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0xba2>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	2b0f      	cmp	r3, #15
 8009a04:	d904      	bls.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009a06:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 8009a0a:	4867      	ldr	r0, [pc, #412]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8009a0c:	f7fd f812 	bl	8006a34 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d003      	beq.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a1c:	2b20      	cmp	r3, #32
 8009a1e:	d904      	bls.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 8009a20:	f44f 71f9 	mov.w	r1, #498	@ 0x1f2
 8009a24:	4860      	ldr	r0, [pc, #384]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8009a26:	f7fd f805 	bl	8006a34 <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009a2a:	4b5e      	ldr	r3, [pc, #376]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8009a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a30:	0c1b      	lsrs	r3, r3, #16
 8009a32:	f003 0303 	and.w	r3, r3, #3
 8009a36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009a38:	4b5a      	ldr	r3, [pc, #360]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8009a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a3e:	0f1b      	lsrs	r3, r3, #28
 8009a40:	f003 0307 	and.w	r3, r3, #7
 8009a44:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	019a      	lsls	r2, r3, #6
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	041b      	lsls	r3, r3, #16
 8009a50:	431a      	orrs	r2, r3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	061b      	lsls	r3, r3, #24
 8009a58:	431a      	orrs	r2, r3
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	071b      	lsls	r3, r3, #28
 8009a5e:	4951      	ldr	r1, [pc, #324]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8009a60:	4313      	orrs	r3, r2
 8009a62:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009a66:	4b4f      	ldr	r3, [pc, #316]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8009a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a6c:	f023 021f 	bic.w	r2, r3, #31
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a74:	3b01      	subs	r3, #1
 8009a76:	494b      	ldr	r1, [pc, #300]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d032      	beq.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	691b      	ldr	r3, [r3, #16]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d010      	beq.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d00c      	beq.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	691b      	ldr	r3, [r3, #16]
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d008      	beq.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	2b03      	cmp	r3, #3
 8009aa8:	d004      	beq.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8009aaa:	f240 2105 	movw	r1, #517	@ 0x205
 8009aae:	483e      	ldr	r0, [pc, #248]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8009ab0:	f7fc ffc0 	bl	8006a34 <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009ab4:	4b3b      	ldr	r3, [pc, #236]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8009ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009aba:	0e1b      	lsrs	r3, r3, #24
 8009abc:	f003 030f 	and.w	r3, r3, #15
 8009ac0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009ac2:	4b38      	ldr	r3, [pc, #224]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8009ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ac8:	0f1b      	lsrs	r3, r3, #28
 8009aca:	f003 0307 	and.w	r3, r3, #7
 8009ace:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	019a      	lsls	r2, r3, #6
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	691b      	ldr	r3, [r3, #16]
 8009ada:	041b      	lsls	r3, r3, #16
 8009adc:	431a      	orrs	r2, r3
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	061b      	lsls	r3, r3, #24
 8009ae2:	431a      	orrs	r2, r3
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	071b      	lsls	r3, r3, #28
 8009ae8:	492e      	ldr	r1, [pc, #184]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8009aea:	4313      	orrs	r3, r2
 8009aec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d040      	beq.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	691b      	ldr	r3, [r3, #16]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d010      	beq.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	691b      	ldr	r3, [r3, #16]
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d00c      	beq.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	691b      	ldr	r3, [r3, #16]
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	d008      	beq.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	2b03      	cmp	r3, #3
 8009b1a:	d004      	beq.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8009b1c:	f44f 7105 	mov.w	r1, #532	@ 0x214
 8009b20:	4821      	ldr	r0, [pc, #132]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8009b22:	f7fc ff87 	bl	8006a34 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d903      	bls.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	2b07      	cmp	r3, #7
 8009b34:	d904      	bls.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8009b36:	f240 2115 	movw	r1, #533	@ 0x215
 8009b3a:	481b      	ldr	r0, [pc, #108]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8009b3c:	f7fc ff7a 	bl	8006a34 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d903      	bls.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	2b0f      	cmp	r3, #15
 8009b4e:	d904      	bls.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 8009b50:	f240 2116 	movw	r1, #534	@ 0x216
 8009b54:	4814      	ldr	r0, [pc, #80]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8009b56:	f7fc ff6d 	bl	8006a34 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	019a      	lsls	r2, r3, #6
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	041b      	lsls	r3, r3, #16
 8009b66:	431a      	orrs	r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	061b      	lsls	r3, r3, #24
 8009b6e:	431a      	orrs	r2, r3
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	071b      	lsls	r3, r3, #28
 8009b76:	490b      	ldr	r1, [pc, #44]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009b7e:	4b09      	ldr	r3, [pc, #36]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a08      	ldr	r2, [pc, #32]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8009b84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009b88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b8a:	f7fd fc93 	bl	80074b4 <HAL_GetTick>
 8009b8e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009b90:	e00c      	b.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009b92:	f7fd fc8f 	bl	80074b4 <HAL_GetTick>
 8009b96:	4602      	mov	r2, r0
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	1ad3      	subs	r3, r2, r3
 8009b9c:	2b64      	cmp	r3, #100	@ 0x64
 8009b9e:	d905      	bls.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009ba0:	2303      	movs	r3, #3
 8009ba2:	e13b      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8009ba4:	40023800 	.word	0x40023800
 8009ba8:	080189bc 	.word	0x080189bc
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009bac:	4b9d      	ldr	r3, [pc, #628]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d0ec      	beq.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009bb8:	69bb      	ldr	r3, [r7, #24]
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	f040 812d 	bne.w	8009e1a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009bc0:	4b98      	ldr	r3, [pc, #608]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a97      	ldr	r2, [pc, #604]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009bc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009bca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bcc:	f7fd fc72 	bl	80074b4 <HAL_GetTick>
 8009bd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009bd2:	e008      	b.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009bd4:	f7fd fc6e 	bl	80074b4 <HAL_GetTick>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	1ad3      	subs	r3, r2, r3
 8009bde:	2b64      	cmp	r3, #100	@ 0x64
 8009be0:	d901      	bls.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009be2:	2303      	movs	r3, #3
 8009be4:	e11a      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009be6:	4b8f      	ldr	r3, [pc, #572]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009bee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009bf2:	d0ef      	beq.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	695b      	ldr	r3, [r3, #20]
 8009bf8:	2b31      	cmp	r3, #49	@ 0x31
 8009bfa:	d904      	bls.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0xda2>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	695b      	ldr	r3, [r3, #20]
 8009c00:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8009c04:	d904      	bls.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8009c06:	f44f 7111 	mov.w	r1, #580	@ 0x244
 8009c0a:	4887      	ldr	r0, [pc, #540]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8009c0c:	f7fc ff12 	bl	8006a34 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d003      	beq.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d009      	beq.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d048      	beq.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d144      	bne.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	699b      	ldr	r3, [r3, #24]
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d903      	bls.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0xde4>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	699b      	ldr	r3, [r3, #24]
 8009c44:	2b0f      	cmp	r3, #15
 8009c46:	d904      	bls.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0xdee>
 8009c48:	f240 214b 	movw	r1, #587	@ 0x24b
 8009c4c:	4876      	ldr	r0, [pc, #472]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8009c4e:	f7fc fef1 	bl	8006a34 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d003      	beq.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c5e:	2b20      	cmp	r3, #32
 8009c60:	d904      	bls.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8009c62:	f240 214d 	movw	r1, #589	@ 0x24d
 8009c66:	4870      	ldr	r0, [pc, #448]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8009c68:	f7fc fee4 	bl	8006a34 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009c6c:	4b6d      	ldr	r3, [pc, #436]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c72:	0c1b      	lsrs	r3, r3, #16
 8009c74:	f003 0303 	and.w	r3, r3, #3
 8009c78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009c7a:	4b6a      	ldr	r3, [pc, #424]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c80:	0f1b      	lsrs	r3, r3, #28
 8009c82:	f003 0307 	and.w	r3, r3, #7
 8009c86:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	695b      	ldr	r3, [r3, #20]
 8009c8c:	019a      	lsls	r2, r3, #6
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	041b      	lsls	r3, r3, #16
 8009c92:	431a      	orrs	r2, r3
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	699b      	ldr	r3, [r3, #24]
 8009c98:	061b      	lsls	r3, r3, #24
 8009c9a:	431a      	orrs	r2, r3
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	071b      	lsls	r3, r3, #28
 8009ca0:	4960      	ldr	r1, [pc, #384]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009ca8:	4b5e      	ldr	r3, [pc, #376]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009caa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009cae:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cb6:	3b01      	subs	r3, #1
 8009cb8:	021b      	lsls	r3, r3, #8
 8009cba:	495a      	ldr	r1, [pc, #360]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d037      	beq.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0xeda>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009cd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009cd6:	d132      	bne.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6a1b      	ldr	r3, [r3, #32]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d010      	beq.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6a1b      	ldr	r3, [r3, #32]
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d00c      	beq.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6a1b      	ldr	r3, [r3, #32]
 8009cec:	2b02      	cmp	r3, #2
 8009cee:	d008      	beq.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6a1b      	ldr	r3, [r3, #32]
 8009cf4:	2b03      	cmp	r3, #3
 8009cf6:	d004      	beq.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8009cf8:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8009cfc:	484a      	ldr	r0, [pc, #296]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8009cfe:	f7fc fe99 	bl	8006a34 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009d02:	4b48      	ldr	r3, [pc, #288]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d08:	0e1b      	lsrs	r3, r3, #24
 8009d0a:	f003 030f 	and.w	r3, r3, #15
 8009d0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009d10:	4b44      	ldr	r3, [pc, #272]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d16:	0f1b      	lsrs	r3, r3, #28
 8009d18:	f003 0307 	and.w	r3, r3, #7
 8009d1c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	695b      	ldr	r3, [r3, #20]
 8009d22:	019a      	lsls	r2, r3, #6
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6a1b      	ldr	r3, [r3, #32]
 8009d28:	041b      	lsls	r3, r3, #16
 8009d2a:	431a      	orrs	r2, r3
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	061b      	lsls	r3, r3, #24
 8009d30:	431a      	orrs	r2, r3
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	071b      	lsls	r3, r3, #28
 8009d36:	493b      	ldr	r1, [pc, #236]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f003 0308 	and.w	r3, r3, #8
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d04d      	beq.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	69db      	ldr	r3, [r3, #28]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d903      	bls.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0xef6>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	69db      	ldr	r3, [r3, #28]
 8009d56:	2b07      	cmp	r3, #7
 8009d58:	d904      	bls.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 8009d5a:	f240 216f 	movw	r1, #623	@ 0x26f
 8009d5e:	4832      	ldr	r0, [pc, #200]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8009d60:	f7fc fe68 	bl	8006a34 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d013      	beq.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d74:	d00e      	beq.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d7e:	d009      	beq.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009d88:	d004      	beq.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8009d8a:	f44f 711c 	mov.w	r1, #624	@ 0x270
 8009d8e:	4826      	ldr	r0, [pc, #152]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8009d90:	f7fc fe50 	bl	8006a34 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009d94:	4b23      	ldr	r3, [pc, #140]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d9a:	0e1b      	lsrs	r3, r3, #24
 8009d9c:	f003 030f 	and.w	r3, r3, #15
 8009da0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009da2:	4b20      	ldr	r3, [pc, #128]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009da8:	0c1b      	lsrs	r3, r3, #16
 8009daa:	f003 0303 	and.w	r3, r3, #3
 8009dae:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	695b      	ldr	r3, [r3, #20]
 8009db4:	019a      	lsls	r2, r3, #6
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	041b      	lsls	r3, r3, #16
 8009dba:	431a      	orrs	r2, r3
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	061b      	lsls	r3, r3, #24
 8009dc0:	431a      	orrs	r2, r3
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	69db      	ldr	r3, [r3, #28]
 8009dc6:	071b      	lsls	r3, r3, #28
 8009dc8:	4916      	ldr	r1, [pc, #88]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009dd0:	4b14      	ldr	r3, [pc, #80]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009dd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009dd6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dde:	4911      	ldr	r1, [pc, #68]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009de0:	4313      	orrs	r3, r2
 8009de2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009de6:	4b0f      	ldr	r3, [pc, #60]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a0e      	ldr	r2, [pc, #56]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009df0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009df2:	f7fd fb5f 	bl	80074b4 <HAL_GetTick>
 8009df6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009df8:	e008      	b.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009dfa:	f7fd fb5b 	bl	80074b4 <HAL_GetTick>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	1ad3      	subs	r3, r2, r3
 8009e04:	2b64      	cmp	r3, #100	@ 0x64
 8009e06:	d901      	bls.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009e08:	2303      	movs	r3, #3
 8009e0a:	e007      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009e0c:	4b05      	ldr	r3, [pc, #20]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e18:	d1ef      	bne.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 8009e1a:	2300      	movs	r3, #0
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3720      	adds	r7, #32
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	40023800 	.word	0x40023800
 8009e28:	080189bc 	.word	0x080189bc

08009e2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d101      	bne.n	8009e3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e1fb      	b.n	800a236 <HAL_SPI_Init+0x40a>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a83      	ldr	r2, [pc, #524]	@ (800a050 <HAL_SPI_Init+0x224>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d01d      	beq.n	8009e84 <HAL_SPI_Init+0x58>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a81      	ldr	r2, [pc, #516]	@ (800a054 <HAL_SPI_Init+0x228>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d018      	beq.n	8009e84 <HAL_SPI_Init+0x58>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a80      	ldr	r2, [pc, #512]	@ (800a058 <HAL_SPI_Init+0x22c>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d013      	beq.n	8009e84 <HAL_SPI_Init+0x58>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a7e      	ldr	r2, [pc, #504]	@ (800a05c <HAL_SPI_Init+0x230>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d00e      	beq.n	8009e84 <HAL_SPI_Init+0x58>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a7d      	ldr	r2, [pc, #500]	@ (800a060 <HAL_SPI_Init+0x234>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d009      	beq.n	8009e84 <HAL_SPI_Init+0x58>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a7b      	ldr	r2, [pc, #492]	@ (800a064 <HAL_SPI_Init+0x238>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d004      	beq.n	8009e84 <HAL_SPI_Init+0x58>
 8009e7a:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 8009e7e:	487a      	ldr	r0, [pc, #488]	@ (800a068 <HAL_SPI_Init+0x23c>)
 8009e80:	f7fc fdd8 	bl	8006a34 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d009      	beq.n	8009ea0 <HAL_SPI_Init+0x74>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009e94:	d004      	beq.n	8009ea0 <HAL_SPI_Init+0x74>
 8009e96:	f240 1147 	movw	r1, #327	@ 0x147
 8009e9a:	4873      	ldr	r0, [pc, #460]	@ (800a068 <HAL_SPI_Init+0x23c>)
 8009e9c:	f7fc fdca 	bl	8006a34 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00e      	beq.n	8009ec6 <HAL_SPI_Init+0x9a>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009eb0:	d009      	beq.n	8009ec6 <HAL_SPI_Init+0x9a>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009eba:	d004      	beq.n	8009ec6 <HAL_SPI_Init+0x9a>
 8009ebc:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8009ec0:	4869      	ldr	r0, [pc, #420]	@ (800a068 <HAL_SPI_Init+0x23c>)
 8009ec2:	f7fc fdb7 	bl	8006a34 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	68db      	ldr	r3, [r3, #12]
 8009eca:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009ece:	d040      	beq.n	8009f52 <HAL_SPI_Init+0x126>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	68db      	ldr	r3, [r3, #12]
 8009ed4:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8009ed8:	d03b      	beq.n	8009f52 <HAL_SPI_Init+0x126>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 8009ee2:	d036      	beq.n	8009f52 <HAL_SPI_Init+0x126>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009eec:	d031      	beq.n	8009f52 <HAL_SPI_Init+0x126>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8009ef6:	d02c      	beq.n	8009f52 <HAL_SPI_Init+0x126>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009f00:	d027      	beq.n	8009f52 <HAL_SPI_Init+0x126>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 8009f0a:	d022      	beq.n	8009f52 <HAL_SPI_Init+0x126>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	68db      	ldr	r3, [r3, #12]
 8009f10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f14:	d01d      	beq.n	8009f52 <HAL_SPI_Init+0x126>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009f1e:	d018      	beq.n	8009f52 <HAL_SPI_Init+0x126>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009f28:	d013      	beq.n	8009f52 <HAL_SPI_Init+0x126>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009f32:	d00e      	beq.n	8009f52 <HAL_SPI_Init+0x126>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	68db      	ldr	r3, [r3, #12]
 8009f38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f3c:	d009      	beq.n	8009f52 <HAL_SPI_Init+0x126>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f46:	d004      	beq.n	8009f52 <HAL_SPI_Init+0x126>
 8009f48:	f240 1149 	movw	r1, #329	@ 0x149
 8009f4c:	4846      	ldr	r0, [pc, #280]	@ (800a068 <HAL_SPI_Init+0x23c>)
 8009f4e:	f7fc fd71 	bl	8006a34 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	699b      	ldr	r3, [r3, #24]
 8009f56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f5a:	d00d      	beq.n	8009f78 <HAL_SPI_Init+0x14c>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	699b      	ldr	r3, [r3, #24]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d009      	beq.n	8009f78 <HAL_SPI_Init+0x14c>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	699b      	ldr	r3, [r3, #24]
 8009f68:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009f6c:	d004      	beq.n	8009f78 <HAL_SPI_Init+0x14c>
 8009f6e:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8009f72:	483d      	ldr	r0, [pc, #244]	@ (800a068 <HAL_SPI_Init+0x23c>)
 8009f74:	f7fc fd5e 	bl	8006a34 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f7c:	2b08      	cmp	r3, #8
 8009f7e:	d008      	beq.n	8009f92 <HAL_SPI_Init+0x166>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d004      	beq.n	8009f92 <HAL_SPI_Init+0x166>
 8009f88:	f240 114b 	movw	r1, #331	@ 0x14b
 8009f8c:	4836      	ldr	r0, [pc, #216]	@ (800a068 <HAL_SPI_Init+0x23c>)
 8009f8e:	f7fc fd51 	bl	8006a34 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	69db      	ldr	r3, [r3, #28]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d020      	beq.n	8009fdc <HAL_SPI_Init+0x1b0>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	69db      	ldr	r3, [r3, #28]
 8009f9e:	2b08      	cmp	r3, #8
 8009fa0:	d01c      	beq.n	8009fdc <HAL_SPI_Init+0x1b0>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	69db      	ldr	r3, [r3, #28]
 8009fa6:	2b10      	cmp	r3, #16
 8009fa8:	d018      	beq.n	8009fdc <HAL_SPI_Init+0x1b0>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	69db      	ldr	r3, [r3, #28]
 8009fae:	2b18      	cmp	r3, #24
 8009fb0:	d014      	beq.n	8009fdc <HAL_SPI_Init+0x1b0>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	69db      	ldr	r3, [r3, #28]
 8009fb6:	2b20      	cmp	r3, #32
 8009fb8:	d010      	beq.n	8009fdc <HAL_SPI_Init+0x1b0>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	69db      	ldr	r3, [r3, #28]
 8009fbe:	2b28      	cmp	r3, #40	@ 0x28
 8009fc0:	d00c      	beq.n	8009fdc <HAL_SPI_Init+0x1b0>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	69db      	ldr	r3, [r3, #28]
 8009fc6:	2b30      	cmp	r3, #48	@ 0x30
 8009fc8:	d008      	beq.n	8009fdc <HAL_SPI_Init+0x1b0>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	69db      	ldr	r3, [r3, #28]
 8009fce:	2b38      	cmp	r3, #56	@ 0x38
 8009fd0:	d004      	beq.n	8009fdc <HAL_SPI_Init+0x1b0>
 8009fd2:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8009fd6:	4824      	ldr	r0, [pc, #144]	@ (800a068 <HAL_SPI_Init+0x23c>)
 8009fd8:	f7fc fd2c 	bl	8006a34 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6a1b      	ldr	r3, [r3, #32]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d008      	beq.n	8009ff6 <HAL_SPI_Init+0x1ca>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6a1b      	ldr	r3, [r3, #32]
 8009fe8:	2b80      	cmp	r3, #128	@ 0x80
 8009fea:	d004      	beq.n	8009ff6 <HAL_SPI_Init+0x1ca>
 8009fec:	f240 114d 	movw	r1, #333	@ 0x14d
 8009ff0:	481d      	ldr	r0, [pc, #116]	@ (800a068 <HAL_SPI_Init+0x23c>)
 8009ff2:	f7fc fd1f 	bl	8006a34 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d008      	beq.n	800a010 <HAL_SPI_Init+0x1e4>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a002:	2b10      	cmp	r3, #16
 800a004:	d004      	beq.n	800a010 <HAL_SPI_Init+0x1e4>
 800a006:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 800a00a:	4817      	ldr	r0, [pc, #92]	@ (800a068 <HAL_SPI_Init+0x23c>)
 800a00c:	f7fc fd12 	bl	8006a34 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a014:	2b00      	cmp	r3, #0
 800a016:	d158      	bne.n	800a0ca <HAL_SPI_Init+0x29e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	691b      	ldr	r3, [r3, #16]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d008      	beq.n	800a032 <HAL_SPI_Init+0x206>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	691b      	ldr	r3, [r3, #16]
 800a024:	2b02      	cmp	r3, #2
 800a026:	d004      	beq.n	800a032 <HAL_SPI_Init+0x206>
 800a028:	f240 1151 	movw	r1, #337	@ 0x151
 800a02c:	480e      	ldr	r0, [pc, #56]	@ (800a068 <HAL_SPI_Init+0x23c>)
 800a02e:	f7fc fd01 	bl	8006a34 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	695b      	ldr	r3, [r3, #20]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d018      	beq.n	800a06c <HAL_SPI_Init+0x240>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	695b      	ldr	r3, [r3, #20]
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d014      	beq.n	800a06c <HAL_SPI_Init+0x240>
 800a042:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 800a046:	4808      	ldr	r0, [pc, #32]	@ (800a068 <HAL_SPI_Init+0x23c>)
 800a048:	f7fc fcf4 	bl	8006a34 <assert_failed>
 800a04c:	e00e      	b.n	800a06c <HAL_SPI_Init+0x240>
 800a04e:	bf00      	nop
 800a050:	40013000 	.word	0x40013000
 800a054:	40003800 	.word	0x40003800
 800a058:	40003c00 	.word	0x40003c00
 800a05c:	40013400 	.word	0x40013400
 800a060:	40015000 	.word	0x40015000
 800a064:	40015400 	.word	0x40015400
 800a068:	080189f8 	.word	0x080189f8

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a074:	d125      	bne.n	800a0c2 <HAL_SPI_Init+0x296>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	69db      	ldr	r3, [r3, #28]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d050      	beq.n	800a120 <HAL_SPI_Init+0x2f4>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	69db      	ldr	r3, [r3, #28]
 800a082:	2b08      	cmp	r3, #8
 800a084:	d04c      	beq.n	800a120 <HAL_SPI_Init+0x2f4>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	69db      	ldr	r3, [r3, #28]
 800a08a:	2b10      	cmp	r3, #16
 800a08c:	d048      	beq.n	800a120 <HAL_SPI_Init+0x2f4>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	69db      	ldr	r3, [r3, #28]
 800a092:	2b18      	cmp	r3, #24
 800a094:	d044      	beq.n	800a120 <HAL_SPI_Init+0x2f4>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	69db      	ldr	r3, [r3, #28]
 800a09a:	2b20      	cmp	r3, #32
 800a09c:	d040      	beq.n	800a120 <HAL_SPI_Init+0x2f4>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	69db      	ldr	r3, [r3, #28]
 800a0a2:	2b28      	cmp	r3, #40	@ 0x28
 800a0a4:	d03c      	beq.n	800a120 <HAL_SPI_Init+0x2f4>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	69db      	ldr	r3, [r3, #28]
 800a0aa:	2b30      	cmp	r3, #48	@ 0x30
 800a0ac:	d038      	beq.n	800a120 <HAL_SPI_Init+0x2f4>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	69db      	ldr	r3, [r3, #28]
 800a0b2:	2b38      	cmp	r3, #56	@ 0x38
 800a0b4:	d034      	beq.n	800a120 <HAL_SPI_Init+0x2f4>
 800a0b6:	f44f 71ab 	mov.w	r1, #342	@ 0x156
 800a0ba:	4861      	ldr	r0, [pc, #388]	@ (800a240 <HAL_SPI_Init+0x414>)
 800a0bc:	f7fc fcba 	bl	8006a34 <assert_failed>
 800a0c0:	e02e      	b.n	800a120 <HAL_SPI_Init+0x2f4>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	61da      	str	r2, [r3, #28]
 800a0c8:	e02a      	b.n	800a120 <HAL_SPI_Init+0x2f4>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	69db      	ldr	r3, [r3, #28]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d020      	beq.n	800a114 <HAL_SPI_Init+0x2e8>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	69db      	ldr	r3, [r3, #28]
 800a0d6:	2b08      	cmp	r3, #8
 800a0d8:	d01c      	beq.n	800a114 <HAL_SPI_Init+0x2e8>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	69db      	ldr	r3, [r3, #28]
 800a0de:	2b10      	cmp	r3, #16
 800a0e0:	d018      	beq.n	800a114 <HAL_SPI_Init+0x2e8>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	69db      	ldr	r3, [r3, #28]
 800a0e6:	2b18      	cmp	r3, #24
 800a0e8:	d014      	beq.n	800a114 <HAL_SPI_Init+0x2e8>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	69db      	ldr	r3, [r3, #28]
 800a0ee:	2b20      	cmp	r3, #32
 800a0f0:	d010      	beq.n	800a114 <HAL_SPI_Init+0x2e8>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	69db      	ldr	r3, [r3, #28]
 800a0f6:	2b28      	cmp	r3, #40	@ 0x28
 800a0f8:	d00c      	beq.n	800a114 <HAL_SPI_Init+0x2e8>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	69db      	ldr	r3, [r3, #28]
 800a0fe:	2b30      	cmp	r3, #48	@ 0x30
 800a100:	d008      	beq.n	800a114 <HAL_SPI_Init+0x2e8>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	69db      	ldr	r3, [r3, #28]
 800a106:	2b38      	cmp	r3, #56	@ 0x38
 800a108:	d004      	beq.n	800a114 <HAL_SPI_Init+0x2e8>
 800a10a:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 800a10e:	484c      	ldr	r0, [pc, #304]	@ (800a240 <HAL_SPI_Init+0x414>)
 800a110:	f7fc fc90 	bl	8006a34 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d106      	bne.n	800a140 <HAL_SPI_Init+0x314>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2200      	movs	r2, #0
 800a136:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f7fc ff8e 	bl	800705c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2202      	movs	r2, #2
 800a144:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a156:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a160:	d902      	bls.n	800a168 <HAL_SPI_Init+0x33c>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a162:	2300      	movs	r3, #0
 800a164:	60fb      	str	r3, [r7, #12]
 800a166:	e002      	b.n	800a16e <HAL_SPI_Init+0x342>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a168:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a16c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800a176:	d007      	beq.n	800a188 <HAL_SPI_Init+0x35c>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a180:	d002      	beq.n	800a188 <HAL_SPI_Init+0x35c>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	689b      	ldr	r3, [r3, #8]
 800a194:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a198:	431a      	orrs	r2, r3
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	f003 0302 	and.w	r3, r3, #2
 800a1a2:	431a      	orrs	r2, r3
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	695b      	ldr	r3, [r3, #20]
 800a1a8:	f003 0301 	and.w	r3, r3, #1
 800a1ac:	431a      	orrs	r2, r3
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	699b      	ldr	r3, [r3, #24]
 800a1b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a1b6:	431a      	orrs	r2, r3
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	69db      	ldr	r3, [r3, #28]
 800a1bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a1c0:	431a      	orrs	r2, r3
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a1b      	ldr	r3, [r3, #32]
 800a1c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1ca:	ea42 0103 	orr.w	r1, r2, r3
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1d2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	430a      	orrs	r2, r1
 800a1dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	699b      	ldr	r3, [r3, #24]
 800a1e2:	0c1b      	lsrs	r3, r3, #16
 800a1e4:	f003 0204 	and.w	r2, r3, #4
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ec:	f003 0310 	and.w	r3, r3, #16
 800a1f0:	431a      	orrs	r2, r3
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1f6:	f003 0308 	and.w	r3, r3, #8
 800a1fa:	431a      	orrs	r2, r3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a204:	ea42 0103 	orr.w	r1, r2, r3
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	430a      	orrs	r2, r1
 800a214:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	69da      	ldr	r2, [r3, #28]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a224:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2200      	movs	r2, #0
 800a22a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2201      	movs	r2, #1
 800a230:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	080189f8 	.word	0x080189f8

0800a244 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b08a      	sub	sp, #40	@ 0x28
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	607a      	str	r2, [r7, #4]
 800a250:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a252:	2301      	movs	r3, #1
 800a254:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a256:	2300      	movs	r3, #0
 800a258:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	689b      	ldr	r3, [r3, #8]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d004      	beq.n	800a26e <HAL_SPI_TransmitReceive+0x2a>
 800a264:	f240 41fe 	movw	r1, #1278	@ 0x4fe
 800a268:	4888      	ldr	r0, [pc, #544]	@ (800a48c <HAL_SPI_TransmitReceive+0x248>)
 800a26a:	f7fc fbe3 	bl	8006a34 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a274:	2b01      	cmp	r3, #1
 800a276:	d101      	bne.n	800a27c <HAL_SPI_TransmitReceive+0x38>
 800a278:	2302      	movs	r3, #2
 800a27a:	e20d      	b.n	800a698 <HAL_SPI_TransmitReceive+0x454>
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2201      	movs	r2, #1
 800a280:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a284:	f7fd f916 	bl	80074b4 <HAL_GetTick>
 800a288:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a290:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a298:	887b      	ldrh	r3, [r7, #2]
 800a29a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a29c:	887b      	ldrh	r3, [r7, #2]
 800a29e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a2a0:	7efb      	ldrb	r3, [r7, #27]
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d00e      	beq.n	800a2c4 <HAL_SPI_TransmitReceive+0x80>
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a2ac:	d106      	bne.n	800a2bc <HAL_SPI_TransmitReceive+0x78>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d102      	bne.n	800a2bc <HAL_SPI_TransmitReceive+0x78>
 800a2b6:	7efb      	ldrb	r3, [r7, #27]
 800a2b8:	2b04      	cmp	r3, #4
 800a2ba:	d003      	beq.n	800a2c4 <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 800a2bc:	2302      	movs	r3, #2
 800a2be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800a2c2:	e1e3      	b.n	800a68c <HAL_SPI_TransmitReceive+0x448>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d005      	beq.n	800a2d6 <HAL_SPI_TransmitReceive+0x92>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d002      	beq.n	800a2d6 <HAL_SPI_TransmitReceive+0x92>
 800a2d0:	887b      	ldrh	r3, [r7, #2]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d103      	bne.n	800a2de <HAL_SPI_TransmitReceive+0x9a>
  {
    errorcode = HAL_ERROR;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800a2dc:	e1d6      	b.n	800a68c <HAL_SPI_TransmitReceive+0x448>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	2b04      	cmp	r3, #4
 800a2e8:	d003      	beq.n	800a2f2 <HAL_SPI_TransmitReceive+0xae>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2205      	movs	r2, #5
 800a2ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	887a      	ldrh	r2, [r7, #2]
 800a302:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	887a      	ldrh	r2, [r7, #2]
 800a30a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	68ba      	ldr	r2, [r7, #8]
 800a312:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	887a      	ldrh	r2, [r7, #2]
 800a318:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	887a      	ldrh	r2, [r7, #2]
 800a31e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2200      	movs	r2, #0
 800a324:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2200      	movs	r2, #0
 800a32a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	68db      	ldr	r3, [r3, #12]
 800a330:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a334:	d802      	bhi.n	800a33c <HAL_SPI_TransmitReceive+0xf8>
 800a336:	8a3b      	ldrh	r3, [r7, #16]
 800a338:	2b01      	cmp	r3, #1
 800a33a:	d908      	bls.n	800a34e <HAL_SPI_TransmitReceive+0x10a>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	685a      	ldr	r2, [r3, #4]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a34a:	605a      	str	r2, [r3, #4]
 800a34c:	e007      	b.n	800a35e <HAL_SPI_TransmitReceive+0x11a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	685a      	ldr	r2, [r3, #4]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a35c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a368:	2b40      	cmp	r3, #64	@ 0x40
 800a36a:	d007      	beq.n	800a37c <HAL_SPI_TransmitReceive+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a37a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a384:	f240 8084 	bls.w	800a490 <HAL_SPI_TransmitReceive+0x24c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d002      	beq.n	800a396 <HAL_SPI_TransmitReceive+0x152>
 800a390:	8a7b      	ldrh	r3, [r7, #18]
 800a392:	2b01      	cmp	r3, #1
 800a394:	d16d      	bne.n	800a472 <HAL_SPI_TransmitReceive+0x22e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a39a:	881a      	ldrh	r2, [r3, #0]
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3a6:	1c9a      	adds	r2, r3, #2
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	3b01      	subs	r3, #1
 800a3b4:	b29a      	uxth	r2, r3
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a3ba:	e05a      	b.n	800a472 <HAL_SPI_TransmitReceive+0x22e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	f003 0302 	and.w	r3, r3, #2
 800a3c6:	2b02      	cmp	r3, #2
 800a3c8:	d11b      	bne.n	800a402 <HAL_SPI_TransmitReceive+0x1be>
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d016      	beq.n	800a402 <HAL_SPI_TransmitReceive+0x1be>
 800a3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d113      	bne.n	800a402 <HAL_SPI_TransmitReceive+0x1be>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3de:	881a      	ldrh	r2, [r3, #0]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3ea:	1c9a      	adds	r2, r3, #2
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	3b01      	subs	r3, #1
 800a3f8:	b29a      	uxth	r2, r3
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a3fe:	2300      	movs	r3, #0
 800a400:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	f003 0301 	and.w	r3, r3, #1
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d11c      	bne.n	800a44a <HAL_SPI_TransmitReceive+0x206>
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a416:	b29b      	uxth	r3, r3
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d016      	beq.n	800a44a <HAL_SPI_TransmitReceive+0x206>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	68da      	ldr	r2, [r3, #12]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a426:	b292      	uxth	r2, r2
 800a428:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a42e:	1c9a      	adds	r2, r3, #2
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	3b01      	subs	r3, #1
 800a43e:	b29a      	uxth	r2, r3
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a446:	2301      	movs	r3, #1
 800a448:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a44a:	f7fd f833 	bl	80074b4 <HAL_GetTick>
 800a44e:	4602      	mov	r2, r0
 800a450:	69fb      	ldr	r3, [r7, #28]
 800a452:	1ad3      	subs	r3, r2, r3
 800a454:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a456:	429a      	cmp	r2, r3
 800a458:	d80b      	bhi.n	800a472 <HAL_SPI_TransmitReceive+0x22e>
 800a45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a45c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a460:	d007      	beq.n	800a472 <HAL_SPI_TransmitReceive+0x22e>
      {
        errorcode = HAL_TIMEOUT;
 800a462:	2303      	movs	r3, #3
 800a464:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2201      	movs	r2, #1
 800a46c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800a470:	e10c      	b.n	800a68c <HAL_SPI_TransmitReceive+0x448>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a476:	b29b      	uxth	r3, r3
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d19f      	bne.n	800a3bc <HAL_SPI_TransmitReceive+0x178>
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a482:	b29b      	uxth	r3, r3
 800a484:	2b00      	cmp	r3, #0
 800a486:	d199      	bne.n	800a3bc <HAL_SPI_TransmitReceive+0x178>
 800a488:	e0e6      	b.n	800a658 <HAL_SPI_TransmitReceive+0x414>
 800a48a:	bf00      	nop
 800a48c:	080189f8 	.word	0x080189f8
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d003      	beq.n	800a4a0 <HAL_SPI_TransmitReceive+0x25c>
 800a498:	8a7b      	ldrh	r3, [r7, #18]
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	f040 80cf 	bne.w	800a63e <HAL_SPI_TransmitReceive+0x3fa>
    {
      if (hspi->TxXferCount > 1U)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d912      	bls.n	800a4d0 <HAL_SPI_TransmitReceive+0x28c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4ae:	881a      	ldrh	r2, [r3, #0]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4ba:	1c9a      	adds	r2, r3, #2
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	3b02      	subs	r3, #2
 800a4c8:	b29a      	uxth	r2, r3
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a4ce:	e0b6      	b.n	800a63e <HAL_SPI_TransmitReceive+0x3fa>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	330c      	adds	r3, #12
 800a4da:	7812      	ldrb	r2, [r2, #0]
 800a4dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4e2:	1c5a      	adds	r2, r3, #1
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	3b01      	subs	r3, #1
 800a4f0:	b29a      	uxth	r2, r3
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a4f6:	e0a2      	b.n	800a63e <HAL_SPI_TransmitReceive+0x3fa>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	f003 0302 	and.w	r3, r3, #2
 800a502:	2b02      	cmp	r3, #2
 800a504:	d134      	bne.n	800a570 <HAL_SPI_TransmitReceive+0x32c>
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d02f      	beq.n	800a570 <HAL_SPI_TransmitReceive+0x32c>
 800a510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a512:	2b01      	cmp	r3, #1
 800a514:	d12c      	bne.n	800a570 <HAL_SPI_TransmitReceive+0x32c>
      {
        if (hspi->TxXferCount > 1U)
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d912      	bls.n	800a546 <HAL_SPI_TransmitReceive+0x302>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a524:	881a      	ldrh	r2, [r3, #0]
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a530:	1c9a      	adds	r2, r3, #2
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	3b02      	subs	r3, #2
 800a53e:	b29a      	uxth	r2, r3
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a544:	e012      	b.n	800a56c <HAL_SPI_TransmitReceive+0x328>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	330c      	adds	r3, #12
 800a550:	7812      	ldrb	r2, [r2, #0]
 800a552:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a558:	1c5a      	adds	r2, r3, #1
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a562:	b29b      	uxth	r3, r3
 800a564:	3b01      	subs	r3, #1
 800a566:	b29a      	uxth	r2, r3
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a56c:	2300      	movs	r3, #0
 800a56e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	f003 0301 	and.w	r3, r3, #1
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d148      	bne.n	800a610 <HAL_SPI_TransmitReceive+0x3cc>
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a584:	b29b      	uxth	r3, r3
 800a586:	2b00      	cmp	r3, #0
 800a588:	d042      	beq.n	800a610 <HAL_SPI_TransmitReceive+0x3cc>
      {
        if (hspi->RxXferCount > 1U)
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a590:	b29b      	uxth	r3, r3
 800a592:	2b01      	cmp	r3, #1
 800a594:	d923      	bls.n	800a5de <HAL_SPI_TransmitReceive+0x39a>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	68da      	ldr	r2, [r3, #12]
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5a0:	b292      	uxth	r2, r2
 800a5a2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5a8:	1c9a      	adds	r2, r3, #2
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	3b02      	subs	r3, #2
 800a5b8:	b29a      	uxth	r2, r3
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d81f      	bhi.n	800a60c <HAL_SPI_TransmitReceive+0x3c8>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	685a      	ldr	r2, [r3, #4]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a5da:	605a      	str	r2, [r3, #4]
 800a5dc:	e016      	b.n	800a60c <HAL_SPI_TransmitReceive+0x3c8>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f103 020c 	add.w	r2, r3, #12
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5ea:	7812      	ldrb	r2, [r2, #0]
 800a5ec:	b2d2      	uxtb	r2, r2
 800a5ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5f4:	1c5a      	adds	r2, r3, #1
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a600:	b29b      	uxth	r3, r3
 800a602:	3b01      	subs	r3, #1
 800a604:	b29a      	uxth	r2, r3
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a60c:	2301      	movs	r3, #1
 800a60e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a610:	f7fc ff50 	bl	80074b4 <HAL_GetTick>
 800a614:	4602      	mov	r2, r0
 800a616:	69fb      	ldr	r3, [r7, #28]
 800a618:	1ad3      	subs	r3, r2, r3
 800a61a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d803      	bhi.n	800a628 <HAL_SPI_TransmitReceive+0x3e4>
 800a620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a622:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a626:	d102      	bne.n	800a62e <HAL_SPI_TransmitReceive+0x3ea>
 800a628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d107      	bne.n	800a63e <HAL_SPI_TransmitReceive+0x3fa>
      {
        errorcode = HAL_TIMEOUT;
 800a62e:	2303      	movs	r3, #3
 800a630:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2201      	movs	r2, #1
 800a638:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800a63c:	e026      	b.n	800a68c <HAL_SPI_TransmitReceive+0x448>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a642:	b29b      	uxth	r3, r3
 800a644:	2b00      	cmp	r3, #0
 800a646:	f47f af57 	bne.w	800a4f8 <HAL_SPI_TransmitReceive+0x2b4>
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a650:	b29b      	uxth	r3, r3
 800a652:	2b00      	cmp	r3, #0
 800a654:	f47f af50 	bne.w	800a4f8 <HAL_SPI_TransmitReceive+0x2b4>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a658:	69fa      	ldr	r2, [r7, #28]
 800a65a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a65c:	68f8      	ldr	r0, [r7, #12]
 800a65e:	f000 fa5d 	bl	800ab1c <SPI_EndRxTxTransaction>
 800a662:	4603      	mov	r3, r0
 800a664:	2b00      	cmp	r3, #0
 800a666:	d005      	beq.n	800a674 <HAL_SPI_TransmitReceive+0x430>
  {
    errorcode = HAL_ERROR;
 800a668:	2301      	movs	r3, #1
 800a66a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2220      	movs	r2, #32
 800a672:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d003      	beq.n	800a684 <HAL_SPI_TransmitReceive+0x440>
  {
    errorcode = HAL_ERROR;
 800a67c:	2301      	movs	r3, #1
 800a67e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a682:	e003      	b.n	800a68c <HAL_SPI_TransmitReceive+0x448>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2201      	movs	r2, #1
 800a688:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2200      	movs	r2, #0
 800a690:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800a694:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3728      	adds	r7, #40	@ 0x28
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b088      	sub	sp, #32
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	689b      	ldr	r3, [r3, #8]
 800a6b6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a6b8:	69bb      	ldr	r3, [r7, #24]
 800a6ba:	099b      	lsrs	r3, r3, #6
 800a6bc:	f003 0301 	and.w	r3, r3, #1
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d10f      	bne.n	800a6e4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a6c4:	69bb      	ldr	r3, [r7, #24]
 800a6c6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00a      	beq.n	800a6e4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a6ce:	69fb      	ldr	r3, [r7, #28]
 800a6d0:	099b      	lsrs	r3, r3, #6
 800a6d2:	f003 0301 	and.w	r3, r3, #1
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d004      	beq.n	800a6e4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	4798      	blx	r3
    return;
 800a6e2:	e0d7      	b.n	800a894 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a6e4:	69bb      	ldr	r3, [r7, #24]
 800a6e6:	085b      	lsrs	r3, r3, #1
 800a6e8:	f003 0301 	and.w	r3, r3, #1
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d00a      	beq.n	800a706 <HAL_SPI_IRQHandler+0x66>
 800a6f0:	69fb      	ldr	r3, [r7, #28]
 800a6f2:	09db      	lsrs	r3, r3, #7
 800a6f4:	f003 0301 	and.w	r3, r3, #1
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d004      	beq.n	800a706 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	4798      	blx	r3
    return;
 800a704:	e0c6      	b.n	800a894 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	095b      	lsrs	r3, r3, #5
 800a70a:	f003 0301 	and.w	r3, r3, #1
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d10c      	bne.n	800a72c <HAL_SPI_IRQHandler+0x8c>
 800a712:	69bb      	ldr	r3, [r7, #24]
 800a714:	099b      	lsrs	r3, r3, #6
 800a716:	f003 0301 	and.w	r3, r3, #1
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d106      	bne.n	800a72c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a71e:	69bb      	ldr	r3, [r7, #24]
 800a720:	0a1b      	lsrs	r3, r3, #8
 800a722:	f003 0301 	and.w	r3, r3, #1
 800a726:	2b00      	cmp	r3, #0
 800a728:	f000 80b4 	beq.w	800a894 <HAL_SPI_IRQHandler+0x1f4>
 800a72c:	69fb      	ldr	r3, [r7, #28]
 800a72e:	095b      	lsrs	r3, r3, #5
 800a730:	f003 0301 	and.w	r3, r3, #1
 800a734:	2b00      	cmp	r3, #0
 800a736:	f000 80ad 	beq.w	800a894 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a73a:	69bb      	ldr	r3, [r7, #24]
 800a73c:	099b      	lsrs	r3, r3, #6
 800a73e:	f003 0301 	and.w	r3, r3, #1
 800a742:	2b00      	cmp	r3, #0
 800a744:	d023      	beq.n	800a78e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	2b03      	cmp	r3, #3
 800a750:	d011      	beq.n	800a776 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a756:	f043 0204 	orr.w	r2, r3, #4
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a75e:	2300      	movs	r3, #0
 800a760:	617b      	str	r3, [r7, #20]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	68db      	ldr	r3, [r3, #12]
 800a768:	617b      	str	r3, [r7, #20]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	689b      	ldr	r3, [r3, #8]
 800a770:	617b      	str	r3, [r7, #20]
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	e00b      	b.n	800a78e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a776:	2300      	movs	r3, #0
 800a778:	613b      	str	r3, [r7, #16]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	68db      	ldr	r3, [r3, #12]
 800a780:	613b      	str	r3, [r7, #16]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	689b      	ldr	r3, [r3, #8]
 800a788:	613b      	str	r3, [r7, #16]
 800a78a:	693b      	ldr	r3, [r7, #16]
        return;
 800a78c:	e082      	b.n	800a894 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a78e:	69bb      	ldr	r3, [r7, #24]
 800a790:	095b      	lsrs	r3, r3, #5
 800a792:	f003 0301 	and.w	r3, r3, #1
 800a796:	2b00      	cmp	r3, #0
 800a798:	d014      	beq.n	800a7c4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a79e:	f043 0201 	orr.w	r2, r3, #1
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	60fb      	str	r3, [r7, #12]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	689b      	ldr	r3, [r3, #8]
 800a7b0:	60fb      	str	r3, [r7, #12]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a7c0:	601a      	str	r2, [r3, #0]
 800a7c2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a7c4:	69bb      	ldr	r3, [r7, #24]
 800a7c6:	0a1b      	lsrs	r3, r3, #8
 800a7c8:	f003 0301 	and.w	r3, r3, #1
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d00c      	beq.n	800a7ea <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7d4:	f043 0208 	orr.w	r2, r3, #8
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a7dc:	2300      	movs	r3, #0
 800a7de:	60bb      	str	r3, [r7, #8]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	60bb      	str	r3, [r7, #8]
 800a7e8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d04f      	beq.n	800a892 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	685a      	ldr	r2, [r3, #4]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a800:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2201      	movs	r2, #1
 800a806:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	f003 0302 	and.w	r3, r3, #2
 800a810:	2b00      	cmp	r3, #0
 800a812:	d104      	bne.n	800a81e <HAL_SPI_IRQHandler+0x17e>
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	f003 0301 	and.w	r3, r3, #1
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d034      	beq.n	800a888 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	685a      	ldr	r2, [r3, #4]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f022 0203 	bic.w	r2, r2, #3
 800a82c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a832:	2b00      	cmp	r3, #0
 800a834:	d011      	beq.n	800a85a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a83a:	4a18      	ldr	r2, [pc, #96]	@ (800a89c <HAL_SPI_IRQHandler+0x1fc>)
 800a83c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a842:	4618      	mov	r0, r3
 800a844:	f7fd f934 	bl	8007ab0 <HAL_DMA_Abort_IT>
 800a848:	4603      	mov	r3, r0
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d005      	beq.n	800a85a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a852:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d016      	beq.n	800a890 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a866:	4a0d      	ldr	r2, [pc, #52]	@ (800a89c <HAL_SPI_IRQHandler+0x1fc>)
 800a868:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a86e:	4618      	mov	r0, r3
 800a870:	f7fd f91e 	bl	8007ab0 <HAL_DMA_Abort_IT>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	d00a      	beq.n	800a890 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a87e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800a886:	e003      	b.n	800a890 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 f809 	bl	800a8a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a88e:	e000      	b.n	800a892 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800a890:	bf00      	nop
    return;
 800a892:	bf00      	nop
  }
}
 800a894:	3720      	adds	r7, #32
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop
 800a89c:	0800a8b5 	.word	0x0800a8b5

0800a8a0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b083      	sub	sp, #12
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a8a8:	bf00      	nop
 800a8aa:	370c      	adds	r7, #12
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8c0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	f7ff ffe5 	bl	800a8a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a8d6:	bf00      	nop
 800a8d8:	3710      	adds	r7, #16
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
	...

0800a8e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b088      	sub	sp, #32
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	603b      	str	r3, [r7, #0]
 800a8ec:	4613      	mov	r3, r2
 800a8ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a8f0:	f7fc fde0 	bl	80074b4 <HAL_GetTick>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8f8:	1a9b      	subs	r3, r3, r2
 800a8fa:	683a      	ldr	r2, [r7, #0]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a900:	f7fc fdd8 	bl	80074b4 <HAL_GetTick>
 800a904:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a906:	4b39      	ldr	r3, [pc, #228]	@ (800a9ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	015b      	lsls	r3, r3, #5
 800a90c:	0d1b      	lsrs	r3, r3, #20
 800a90e:	69fa      	ldr	r2, [r7, #28]
 800a910:	fb02 f303 	mul.w	r3, r2, r3
 800a914:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a916:	e054      	b.n	800a9c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a91e:	d050      	beq.n	800a9c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a920:	f7fc fdc8 	bl	80074b4 <HAL_GetTick>
 800a924:	4602      	mov	r2, r0
 800a926:	69bb      	ldr	r3, [r7, #24]
 800a928:	1ad3      	subs	r3, r2, r3
 800a92a:	69fa      	ldr	r2, [r7, #28]
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d902      	bls.n	800a936 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a930:	69fb      	ldr	r3, [r7, #28]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d13d      	bne.n	800a9b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	685a      	ldr	r2, [r3, #4]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a944:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a94e:	d111      	bne.n	800a974 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a958:	d004      	beq.n	800a964 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	689b      	ldr	r3, [r3, #8]
 800a95e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a962:	d107      	bne.n	800a974 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a972:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a978:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a97c:	d10f      	bne.n	800a99e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a98c:	601a      	str	r2, [r3, #0]
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a99c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a9ae:	2303      	movs	r3, #3
 800a9b0:	e017      	b.n	800a9e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d101      	bne.n	800a9bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	689a      	ldr	r2, [r3, #8]
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	4013      	ands	r3, r2
 800a9cc:	68ba      	ldr	r2, [r7, #8]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	bf0c      	ite	eq
 800a9d2:	2301      	moveq	r3, #1
 800a9d4:	2300      	movne	r3, #0
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	461a      	mov	r2, r3
 800a9da:	79fb      	ldrb	r3, [r7, #7]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d19b      	bne.n	800a918 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a9e0:	2300      	movs	r3, #0
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3720      	adds	r7, #32
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	2000004c 	.word	0x2000004c

0800a9f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b08a      	sub	sp, #40	@ 0x28
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	60f8      	str	r0, [r7, #12]
 800a9f8:	60b9      	str	r1, [r7, #8]
 800a9fa:	607a      	str	r2, [r7, #4]
 800a9fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800aa02:	f7fc fd57 	bl	80074b4 <HAL_GetTick>
 800aa06:	4602      	mov	r2, r0
 800aa08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa0a:	1a9b      	subs	r3, r3, r2
 800aa0c:	683a      	ldr	r2, [r7, #0]
 800aa0e:	4413      	add	r3, r2
 800aa10:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800aa12:	f7fc fd4f 	bl	80074b4 <HAL_GetTick>
 800aa16:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	330c      	adds	r3, #12
 800aa1e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800aa20:	4b3d      	ldr	r3, [pc, #244]	@ (800ab18 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	4613      	mov	r3, r2
 800aa26:	009b      	lsls	r3, r3, #2
 800aa28:	4413      	add	r3, r2
 800aa2a:	00da      	lsls	r2, r3, #3
 800aa2c:	1ad3      	subs	r3, r2, r3
 800aa2e:	0d1b      	lsrs	r3, r3, #20
 800aa30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa32:	fb02 f303 	mul.w	r3, r2, r3
 800aa36:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800aa38:	e060      	b.n	800aafc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800aa40:	d107      	bne.n	800aa52 <SPI_WaitFifoStateUntilTimeout+0x62>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d104      	bne.n	800aa52 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800aa48:	69fb      	ldr	r3, [r7, #28]
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	b2db      	uxtb	r3, r3
 800aa4e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800aa50:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa58:	d050      	beq.n	800aafc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800aa5a:	f7fc fd2b 	bl	80074b4 <HAL_GetTick>
 800aa5e:	4602      	mov	r2, r0
 800aa60:	6a3b      	ldr	r3, [r7, #32]
 800aa62:	1ad3      	subs	r3, r2, r3
 800aa64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d902      	bls.n	800aa70 <SPI_WaitFifoStateUntilTimeout+0x80>
 800aa6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d13d      	bne.n	800aaec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	685a      	ldr	r2, [r3, #4]
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800aa7e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aa88:	d111      	bne.n	800aaae <SPI_WaitFifoStateUntilTimeout+0xbe>
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	689b      	ldr	r3, [r3, #8]
 800aa8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa92:	d004      	beq.n	800aa9e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	689b      	ldr	r3, [r3, #8]
 800aa98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa9c:	d107      	bne.n	800aaae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aaac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aab2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aab6:	d10f      	bne.n	800aad8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	681a      	ldr	r2, [r3, #0]
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800aac6:	601a      	str	r2, [r3, #0]
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800aad6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2201      	movs	r2, #1
 800aadc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800aae8:	2303      	movs	r3, #3
 800aaea:	e010      	b.n	800ab0e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800aaec:	69bb      	ldr	r3, [r7, #24]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d101      	bne.n	800aaf6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800aaf6:	69bb      	ldr	r3, [r7, #24]
 800aaf8:	3b01      	subs	r3, #1
 800aafa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	689a      	ldr	r2, [r3, #8]
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	4013      	ands	r3, r2
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d196      	bne.n	800aa3a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800ab0c:	2300      	movs	r3, #0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3728      	adds	r7, #40	@ 0x28
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	2000004c 	.word	0x2000004c

0800ab1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b088      	sub	sp, #32
 800ab20:	af02      	add	r7, sp, #8
 800ab22:	60f8      	str	r0, [r7, #12]
 800ab24:	60b9      	str	r1, [r7, #8]
 800ab26:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	9300      	str	r3, [sp, #0]
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800ab34:	68f8      	ldr	r0, [r7, #12]
 800ab36:	f7ff ff5b 	bl	800a9f0 <SPI_WaitFifoStateUntilTimeout>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d007      	beq.n	800ab50 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab44:	f043 0220 	orr.w	r2, r3, #32
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ab4c:	2303      	movs	r3, #3
 800ab4e:	e046      	b.n	800abde <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ab50:	4b25      	ldr	r3, [pc, #148]	@ (800abe8 <SPI_EndRxTxTransaction+0xcc>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4a25      	ldr	r2, [pc, #148]	@ (800abec <SPI_EndRxTxTransaction+0xd0>)
 800ab56:	fba2 2303 	umull	r2, r3, r2, r3
 800ab5a:	0d5b      	lsrs	r3, r3, #21
 800ab5c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ab60:	fb02 f303 	mul.w	r3, r2, r3
 800ab64:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ab6e:	d112      	bne.n	800ab96 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	9300      	str	r3, [sp, #0]
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	2200      	movs	r2, #0
 800ab78:	2180      	movs	r1, #128	@ 0x80
 800ab7a:	68f8      	ldr	r0, [r7, #12]
 800ab7c:	f7ff feb0 	bl	800a8e0 <SPI_WaitFlagStateUntilTimeout>
 800ab80:	4603      	mov	r3, r0
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d016      	beq.n	800abb4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab8a:	f043 0220 	orr.w	r2, r3, #32
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800ab92:	2303      	movs	r3, #3
 800ab94:	e023      	b.n	800abde <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d00a      	beq.n	800abb2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	3b01      	subs	r3, #1
 800aba0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	689b      	ldr	r3, [r3, #8]
 800aba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abac:	2b80      	cmp	r3, #128	@ 0x80
 800abae:	d0f2      	beq.n	800ab96 <SPI_EndRxTxTransaction+0x7a>
 800abb0:	e000      	b.n	800abb4 <SPI_EndRxTxTransaction+0x98>
        break;
 800abb2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	9300      	str	r3, [sp, #0]
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	2200      	movs	r2, #0
 800abbc:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800abc0:	68f8      	ldr	r0, [r7, #12]
 800abc2:	f7ff ff15 	bl	800a9f0 <SPI_WaitFifoStateUntilTimeout>
 800abc6:	4603      	mov	r3, r0
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d007      	beq.n	800abdc <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800abd0:	f043 0220 	orr.w	r2, r3, #32
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800abd8:	2303      	movs	r3, #3
 800abda:	e000      	b.n	800abde <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800abdc:	2300      	movs	r3, #0
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3718      	adds	r7, #24
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	bf00      	nop
 800abe8:	2000004c 	.word	0x2000004c
 800abec:	165e9f81 	.word	0x165e9f81

0800abf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b082      	sub	sp, #8
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d101      	bne.n	800ac02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800abfe:	2301      	movs	r3, #1
 800ac00:	e0f5      	b.n	800adee <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4a7c      	ldr	r2, [pc, #496]	@ (800adf8 <HAL_TIM_Base_Init+0x208>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d045      	beq.n	800ac98 <HAL_TIM_Base_Init+0xa8>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac14:	d040      	beq.n	800ac98 <HAL_TIM_Base_Init+0xa8>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a78      	ldr	r2, [pc, #480]	@ (800adfc <HAL_TIM_Base_Init+0x20c>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d03b      	beq.n	800ac98 <HAL_TIM_Base_Init+0xa8>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a76      	ldr	r2, [pc, #472]	@ (800ae00 <HAL_TIM_Base_Init+0x210>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d036      	beq.n	800ac98 <HAL_TIM_Base_Init+0xa8>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4a75      	ldr	r2, [pc, #468]	@ (800ae04 <HAL_TIM_Base_Init+0x214>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d031      	beq.n	800ac98 <HAL_TIM_Base_Init+0xa8>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	4a73      	ldr	r2, [pc, #460]	@ (800ae08 <HAL_TIM_Base_Init+0x218>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d02c      	beq.n	800ac98 <HAL_TIM_Base_Init+0xa8>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4a72      	ldr	r2, [pc, #456]	@ (800ae0c <HAL_TIM_Base_Init+0x21c>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d027      	beq.n	800ac98 <HAL_TIM_Base_Init+0xa8>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4a70      	ldr	r2, [pc, #448]	@ (800ae10 <HAL_TIM_Base_Init+0x220>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d022      	beq.n	800ac98 <HAL_TIM_Base_Init+0xa8>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	4a6f      	ldr	r2, [pc, #444]	@ (800ae14 <HAL_TIM_Base_Init+0x224>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d01d      	beq.n	800ac98 <HAL_TIM_Base_Init+0xa8>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a6d      	ldr	r2, [pc, #436]	@ (800ae18 <HAL_TIM_Base_Init+0x228>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d018      	beq.n	800ac98 <HAL_TIM_Base_Init+0xa8>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a6c      	ldr	r2, [pc, #432]	@ (800ae1c <HAL_TIM_Base_Init+0x22c>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d013      	beq.n	800ac98 <HAL_TIM_Base_Init+0xa8>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4a6a      	ldr	r2, [pc, #424]	@ (800ae20 <HAL_TIM_Base_Init+0x230>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d00e      	beq.n	800ac98 <HAL_TIM_Base_Init+0xa8>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4a69      	ldr	r2, [pc, #420]	@ (800ae24 <HAL_TIM_Base_Init+0x234>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d009      	beq.n	800ac98 <HAL_TIM_Base_Init+0xa8>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4a67      	ldr	r2, [pc, #412]	@ (800ae28 <HAL_TIM_Base_Init+0x238>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d004      	beq.n	800ac98 <HAL_TIM_Base_Init+0xa8>
 800ac8e:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800ac92:	4866      	ldr	r0, [pc, #408]	@ (800ae2c <HAL_TIM_Base_Init+0x23c>)
 800ac94:	f7fb fece 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	689b      	ldr	r3, [r3, #8]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d014      	beq.n	800acca <HAL_TIM_Base_Init+0xda>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	2b10      	cmp	r3, #16
 800aca6:	d010      	beq.n	800acca <HAL_TIM_Base_Init+0xda>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	689b      	ldr	r3, [r3, #8]
 800acac:	2b20      	cmp	r3, #32
 800acae:	d00c      	beq.n	800acca <HAL_TIM_Base_Init+0xda>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	689b      	ldr	r3, [r3, #8]
 800acb4:	2b40      	cmp	r3, #64	@ 0x40
 800acb6:	d008      	beq.n	800acca <HAL_TIM_Base_Init+0xda>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	689b      	ldr	r3, [r3, #8]
 800acbc:	2b60      	cmp	r3, #96	@ 0x60
 800acbe:	d004      	beq.n	800acca <HAL_TIM_Base_Init+0xda>
 800acc0:	f240 1117 	movw	r1, #279	@ 0x117
 800acc4:	4859      	ldr	r0, [pc, #356]	@ (800ae2c <HAL_TIM_Base_Init+0x23c>)
 800acc6:	f7fb feb5 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	691b      	ldr	r3, [r3, #16]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d00e      	beq.n	800acf0 <HAL_TIM_Base_Init+0x100>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	691b      	ldr	r3, [r3, #16]
 800acd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acda:	d009      	beq.n	800acf0 <HAL_TIM_Base_Init+0x100>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	691b      	ldr	r3, [r3, #16]
 800ace0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ace4:	d004      	beq.n	800acf0 <HAL_TIM_Base_Init+0x100>
 800ace6:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800acea:	4850      	ldr	r0, [pc, #320]	@ (800ae2c <HAL_TIM_Base_Init+0x23c>)
 800acec:	f7fb fea2 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acf8:	d004      	beq.n	800ad04 <HAL_TIM_Base_Init+0x114>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	4a41      	ldr	r2, [pc, #260]	@ (800ae04 <HAL_TIM_Base_Init+0x214>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d107      	bne.n	800ad14 <HAL_TIM_Base_Init+0x124>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	68db      	ldr	r3, [r3, #12]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	bf14      	ite	ne
 800ad0c:	2301      	movne	r3, #1
 800ad0e:	2300      	moveq	r3, #0
 800ad10:	b2db      	uxtb	r3, r3
 800ad12:	e00e      	b.n	800ad32 <HAL_TIM_Base_Init+0x142>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	68db      	ldr	r3, [r3, #12]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d006      	beq.n	800ad2a <HAL_TIM_Base_Init+0x13a>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	68db      	ldr	r3, [r3, #12]
 800ad20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad24:	d201      	bcs.n	800ad2a <HAL_TIM_Base_Init+0x13a>
 800ad26:	2301      	movs	r3, #1
 800ad28:	e000      	b.n	800ad2c <HAL_TIM_Base_Init+0x13c>
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	f003 0301 	and.w	r3, r3, #1
 800ad30:	b2db      	uxtb	r3, r3
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d104      	bne.n	800ad40 <HAL_TIM_Base_Init+0x150>
 800ad36:	f240 1119 	movw	r1, #281	@ 0x119
 800ad3a:	483c      	ldr	r0, [pc, #240]	@ (800ae2c <HAL_TIM_Base_Init+0x23c>)
 800ad3c:	f7fb fe7a 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	699b      	ldr	r3, [r3, #24]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d008      	beq.n	800ad5a <HAL_TIM_Base_Init+0x16a>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	699b      	ldr	r3, [r3, #24]
 800ad4c:	2b80      	cmp	r3, #128	@ 0x80
 800ad4e:	d004      	beq.n	800ad5a <HAL_TIM_Base_Init+0x16a>
 800ad50:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 800ad54:	4835      	ldr	r0, [pc, #212]	@ (800ae2c <HAL_TIM_Base_Init+0x23c>)
 800ad56:	f7fb fe6d 	bl	8006a34 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad60:	b2db      	uxtb	r3, r3
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d106      	bne.n	800ad74 <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f7fc f9c0 	bl	80070f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2202      	movs	r2, #2
 800ad78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	3304      	adds	r3, #4
 800ad84:	4619      	mov	r1, r3
 800ad86:	4610      	mov	r0, r2
 800ad88:	f002 f890 	bl	800ceac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2201      	movs	r2, #1
 800ad90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2201      	movs	r2, #1
 800ad98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2201      	movs	r2, #1
 800ada0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2201      	movs	r2, #1
 800ada8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2201      	movs	r2, #1
 800adb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2201      	movs	r2, #1
 800adb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2201      	movs	r2, #1
 800adc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2201      	movs	r2, #1
 800adc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2201      	movs	r2, #1
 800add0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2201      	movs	r2, #1
 800add8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2201      	movs	r2, #1
 800ade0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2201      	movs	r2, #1
 800ade8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800adec:	2300      	movs	r3, #0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3708      	adds	r7, #8
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	40010000 	.word	0x40010000
 800adfc:	40000400 	.word	0x40000400
 800ae00:	40000800 	.word	0x40000800
 800ae04:	40000c00 	.word	0x40000c00
 800ae08:	40001000 	.word	0x40001000
 800ae0c:	40001400 	.word	0x40001400
 800ae10:	40010400 	.word	0x40010400
 800ae14:	40014000 	.word	0x40014000
 800ae18:	40014400 	.word	0x40014400
 800ae1c:	40014800 	.word	0x40014800
 800ae20:	40001800 	.word	0x40001800
 800ae24:	40001c00 	.word	0x40001c00
 800ae28:	40002000 	.word	0x40002000
 800ae2c:	08018a30 	.word	0x08018a30

0800ae30 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b082      	sub	sp, #8
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d101      	bne.n	800ae42 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	e0f5      	b.n	800b02e <HAL_TIM_OC_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a7c      	ldr	r2, [pc, #496]	@ (800b038 <HAL_TIM_OC_Init+0x208>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d045      	beq.n	800aed8 <HAL_TIM_OC_Init+0xa8>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae54:	d040      	beq.n	800aed8 <HAL_TIM_OC_Init+0xa8>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4a78      	ldr	r2, [pc, #480]	@ (800b03c <HAL_TIM_OC_Init+0x20c>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d03b      	beq.n	800aed8 <HAL_TIM_OC_Init+0xa8>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4a76      	ldr	r2, [pc, #472]	@ (800b040 <HAL_TIM_OC_Init+0x210>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d036      	beq.n	800aed8 <HAL_TIM_OC_Init+0xa8>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4a75      	ldr	r2, [pc, #468]	@ (800b044 <HAL_TIM_OC_Init+0x214>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d031      	beq.n	800aed8 <HAL_TIM_OC_Init+0xa8>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4a73      	ldr	r2, [pc, #460]	@ (800b048 <HAL_TIM_OC_Init+0x218>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d02c      	beq.n	800aed8 <HAL_TIM_OC_Init+0xa8>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4a72      	ldr	r2, [pc, #456]	@ (800b04c <HAL_TIM_OC_Init+0x21c>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d027      	beq.n	800aed8 <HAL_TIM_OC_Init+0xa8>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4a70      	ldr	r2, [pc, #448]	@ (800b050 <HAL_TIM_OC_Init+0x220>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d022      	beq.n	800aed8 <HAL_TIM_OC_Init+0xa8>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a6f      	ldr	r2, [pc, #444]	@ (800b054 <HAL_TIM_OC_Init+0x224>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d01d      	beq.n	800aed8 <HAL_TIM_OC_Init+0xa8>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a6d      	ldr	r2, [pc, #436]	@ (800b058 <HAL_TIM_OC_Init+0x228>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d018      	beq.n	800aed8 <HAL_TIM_OC_Init+0xa8>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4a6c      	ldr	r2, [pc, #432]	@ (800b05c <HAL_TIM_OC_Init+0x22c>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d013      	beq.n	800aed8 <HAL_TIM_OC_Init+0xa8>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4a6a      	ldr	r2, [pc, #424]	@ (800b060 <HAL_TIM_OC_Init+0x230>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d00e      	beq.n	800aed8 <HAL_TIM_OC_Init+0xa8>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	4a69      	ldr	r2, [pc, #420]	@ (800b064 <HAL_TIM_OC_Init+0x234>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d009      	beq.n	800aed8 <HAL_TIM_OC_Init+0xa8>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	4a67      	ldr	r2, [pc, #412]	@ (800b068 <HAL_TIM_OC_Init+0x238>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d004      	beq.n	800aed8 <HAL_TIM_OC_Init+0xa8>
 800aece:	f240 2196 	movw	r1, #662	@ 0x296
 800aed2:	4866      	ldr	r0, [pc, #408]	@ (800b06c <HAL_TIM_OC_Init+0x23c>)
 800aed4:	f7fb fdae 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	689b      	ldr	r3, [r3, #8]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d014      	beq.n	800af0a <HAL_TIM_OC_Init+0xda>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	689b      	ldr	r3, [r3, #8]
 800aee4:	2b10      	cmp	r3, #16
 800aee6:	d010      	beq.n	800af0a <HAL_TIM_OC_Init+0xda>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	2b20      	cmp	r3, #32
 800aeee:	d00c      	beq.n	800af0a <HAL_TIM_OC_Init+0xda>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	689b      	ldr	r3, [r3, #8]
 800aef4:	2b40      	cmp	r3, #64	@ 0x40
 800aef6:	d008      	beq.n	800af0a <HAL_TIM_OC_Init+0xda>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	689b      	ldr	r3, [r3, #8]
 800aefc:	2b60      	cmp	r3, #96	@ 0x60
 800aefe:	d004      	beq.n	800af0a <HAL_TIM_OC_Init+0xda>
 800af00:	f240 2197 	movw	r1, #663	@ 0x297
 800af04:	4859      	ldr	r0, [pc, #356]	@ (800b06c <HAL_TIM_OC_Init+0x23c>)
 800af06:	f7fb fd95 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	691b      	ldr	r3, [r3, #16]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d00e      	beq.n	800af30 <HAL_TIM_OC_Init+0x100>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	691b      	ldr	r3, [r3, #16]
 800af16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af1a:	d009      	beq.n	800af30 <HAL_TIM_OC_Init+0x100>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	691b      	ldr	r3, [r3, #16]
 800af20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af24:	d004      	beq.n	800af30 <HAL_TIM_OC_Init+0x100>
 800af26:	f44f 7126 	mov.w	r1, #664	@ 0x298
 800af2a:	4850      	ldr	r0, [pc, #320]	@ (800b06c <HAL_TIM_OC_Init+0x23c>)
 800af2c:	f7fb fd82 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af38:	d004      	beq.n	800af44 <HAL_TIM_OC_Init+0x114>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4a41      	ldr	r2, [pc, #260]	@ (800b044 <HAL_TIM_OC_Init+0x214>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d107      	bne.n	800af54 <HAL_TIM_OC_Init+0x124>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	bf14      	ite	ne
 800af4c:	2301      	movne	r3, #1
 800af4e:	2300      	moveq	r3, #0
 800af50:	b2db      	uxtb	r3, r3
 800af52:	e00e      	b.n	800af72 <HAL_TIM_OC_Init+0x142>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	68db      	ldr	r3, [r3, #12]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d006      	beq.n	800af6a <HAL_TIM_OC_Init+0x13a>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af64:	d201      	bcs.n	800af6a <HAL_TIM_OC_Init+0x13a>
 800af66:	2301      	movs	r3, #1
 800af68:	e000      	b.n	800af6c <HAL_TIM_OC_Init+0x13c>
 800af6a:	2300      	movs	r3, #0
 800af6c:	f003 0301 	and.w	r3, r3, #1
 800af70:	b2db      	uxtb	r3, r3
 800af72:	2b00      	cmp	r3, #0
 800af74:	d104      	bne.n	800af80 <HAL_TIM_OC_Init+0x150>
 800af76:	f240 2199 	movw	r1, #665	@ 0x299
 800af7a:	483c      	ldr	r0, [pc, #240]	@ (800b06c <HAL_TIM_OC_Init+0x23c>)
 800af7c:	f7fb fd5a 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	699b      	ldr	r3, [r3, #24]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d008      	beq.n	800af9a <HAL_TIM_OC_Init+0x16a>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	699b      	ldr	r3, [r3, #24]
 800af8c:	2b80      	cmp	r3, #128	@ 0x80
 800af8e:	d004      	beq.n	800af9a <HAL_TIM_OC_Init+0x16a>
 800af90:	f240 219a 	movw	r1, #666	@ 0x29a
 800af94:	4835      	ldr	r0, [pc, #212]	@ (800b06c <HAL_TIM_OC_Init+0x23c>)
 800af96:	f7fb fd4d 	bl	8006a34 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800afa0:	b2db      	uxtb	r3, r3
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d106      	bne.n	800afb4 <HAL_TIM_OC_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 f85e 	bl	800b070 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2202      	movs	r2, #2
 800afb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681a      	ldr	r2, [r3, #0]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	3304      	adds	r3, #4
 800afc4:	4619      	mov	r1, r3
 800afc6:	4610      	mov	r0, r2
 800afc8:	f001 ff70 	bl	800ceac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2201      	movs	r2, #1
 800afd0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2201      	movs	r2, #1
 800afd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2201      	movs	r2, #1
 800afe0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2201      	movs	r2, #1
 800afe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2201      	movs	r2, #1
 800aff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2201      	movs	r2, #1
 800aff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2201      	movs	r2, #1
 800b000:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2201      	movs	r2, #1
 800b008:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2201      	movs	r2, #1
 800b010:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2201      	movs	r2, #1
 800b018:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2201      	movs	r2, #1
 800b020:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2201      	movs	r2, #1
 800b028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b02c:	2300      	movs	r3, #0
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3708      	adds	r7, #8
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	40010000 	.word	0x40010000
 800b03c:	40000400 	.word	0x40000400
 800b040:	40000800 	.word	0x40000800
 800b044:	40000c00 	.word	0x40000c00
 800b048:	40001000 	.word	0x40001000
 800b04c:	40001400 	.word	0x40001400
 800b050:	40010400 	.word	0x40010400
 800b054:	40014000 	.word	0x40014000
 800b058:	40014400 	.word	0x40014400
 800b05c:	40014800 	.word	0x40014800
 800b060:	40001800 	.word	0x40001800
 800b064:	40001c00 	.word	0x40001c00
 800b068:	40002000 	.word	0x40002000
 800b06c:	08018a30 	.word	0x08018a30

0800b070 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800b070:	b480      	push	{r7}
 800b072:	b083      	sub	sp, #12
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800b078:	bf00      	nop
 800b07a:	370c      	adds	r7, #12
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d101      	bne.n	800b096 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b092:	2301      	movs	r3, #1
 800b094:	e0f5      	b.n	800b282 <HAL_TIM_PWM_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4a7c      	ldr	r2, [pc, #496]	@ (800b28c <HAL_TIM_PWM_Init+0x208>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d045      	beq.n	800b12c <HAL_TIM_PWM_Init+0xa8>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0a8:	d040      	beq.n	800b12c <HAL_TIM_PWM_Init+0xa8>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4a78      	ldr	r2, [pc, #480]	@ (800b290 <HAL_TIM_PWM_Init+0x20c>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d03b      	beq.n	800b12c <HAL_TIM_PWM_Init+0xa8>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	4a76      	ldr	r2, [pc, #472]	@ (800b294 <HAL_TIM_PWM_Init+0x210>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d036      	beq.n	800b12c <HAL_TIM_PWM_Init+0xa8>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4a75      	ldr	r2, [pc, #468]	@ (800b298 <HAL_TIM_PWM_Init+0x214>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d031      	beq.n	800b12c <HAL_TIM_PWM_Init+0xa8>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	4a73      	ldr	r2, [pc, #460]	@ (800b29c <HAL_TIM_PWM_Init+0x218>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d02c      	beq.n	800b12c <HAL_TIM_PWM_Init+0xa8>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4a72      	ldr	r2, [pc, #456]	@ (800b2a0 <HAL_TIM_PWM_Init+0x21c>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d027      	beq.n	800b12c <HAL_TIM_PWM_Init+0xa8>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a70      	ldr	r2, [pc, #448]	@ (800b2a4 <HAL_TIM_PWM_Init+0x220>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d022      	beq.n	800b12c <HAL_TIM_PWM_Init+0xa8>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4a6f      	ldr	r2, [pc, #444]	@ (800b2a8 <HAL_TIM_PWM_Init+0x224>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d01d      	beq.n	800b12c <HAL_TIM_PWM_Init+0xa8>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4a6d      	ldr	r2, [pc, #436]	@ (800b2ac <HAL_TIM_PWM_Init+0x228>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d018      	beq.n	800b12c <HAL_TIM_PWM_Init+0xa8>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4a6c      	ldr	r2, [pc, #432]	@ (800b2b0 <HAL_TIM_PWM_Init+0x22c>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d013      	beq.n	800b12c <HAL_TIM_PWM_Init+0xa8>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4a6a      	ldr	r2, [pc, #424]	@ (800b2b4 <HAL_TIM_PWM_Init+0x230>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d00e      	beq.n	800b12c <HAL_TIM_PWM_Init+0xa8>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	4a69      	ldr	r2, [pc, #420]	@ (800b2b8 <HAL_TIM_PWM_Init+0x234>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d009      	beq.n	800b12c <HAL_TIM_PWM_Init+0xa8>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4a67      	ldr	r2, [pc, #412]	@ (800b2bc <HAL_TIM_PWM_Init+0x238>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d004      	beq.n	800b12c <HAL_TIM_PWM_Init+0xa8>
 800b122:	f240 5133 	movw	r1, #1331	@ 0x533
 800b126:	4866      	ldr	r0, [pc, #408]	@ (800b2c0 <HAL_TIM_PWM_Init+0x23c>)
 800b128:	f7fb fc84 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	689b      	ldr	r3, [r3, #8]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d014      	beq.n	800b15e <HAL_TIM_PWM_Init+0xda>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	689b      	ldr	r3, [r3, #8]
 800b138:	2b10      	cmp	r3, #16
 800b13a:	d010      	beq.n	800b15e <HAL_TIM_PWM_Init+0xda>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	689b      	ldr	r3, [r3, #8]
 800b140:	2b20      	cmp	r3, #32
 800b142:	d00c      	beq.n	800b15e <HAL_TIM_PWM_Init+0xda>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	2b40      	cmp	r3, #64	@ 0x40
 800b14a:	d008      	beq.n	800b15e <HAL_TIM_PWM_Init+0xda>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	689b      	ldr	r3, [r3, #8]
 800b150:	2b60      	cmp	r3, #96	@ 0x60
 800b152:	d004      	beq.n	800b15e <HAL_TIM_PWM_Init+0xda>
 800b154:	f240 5134 	movw	r1, #1332	@ 0x534
 800b158:	4859      	ldr	r0, [pc, #356]	@ (800b2c0 <HAL_TIM_PWM_Init+0x23c>)
 800b15a:	f7fb fc6b 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	691b      	ldr	r3, [r3, #16]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d00e      	beq.n	800b184 <HAL_TIM_PWM_Init+0x100>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	691b      	ldr	r3, [r3, #16]
 800b16a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b16e:	d009      	beq.n	800b184 <HAL_TIM_PWM_Init+0x100>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	691b      	ldr	r3, [r3, #16]
 800b174:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b178:	d004      	beq.n	800b184 <HAL_TIM_PWM_Init+0x100>
 800b17a:	f240 5135 	movw	r1, #1333	@ 0x535
 800b17e:	4850      	ldr	r0, [pc, #320]	@ (800b2c0 <HAL_TIM_PWM_Init+0x23c>)
 800b180:	f7fb fc58 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b18c:	d004      	beq.n	800b198 <HAL_TIM_PWM_Init+0x114>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4a41      	ldr	r2, [pc, #260]	@ (800b298 <HAL_TIM_PWM_Init+0x214>)
 800b194:	4293      	cmp	r3, r2
 800b196:	d107      	bne.n	800b1a8 <HAL_TIM_PWM_Init+0x124>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	bf14      	ite	ne
 800b1a0:	2301      	movne	r3, #1
 800b1a2:	2300      	moveq	r3, #0
 800b1a4:	b2db      	uxtb	r3, r3
 800b1a6:	e00e      	b.n	800b1c6 <HAL_TIM_PWM_Init+0x142>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	68db      	ldr	r3, [r3, #12]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d006      	beq.n	800b1be <HAL_TIM_PWM_Init+0x13a>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	68db      	ldr	r3, [r3, #12]
 800b1b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b1b8:	d201      	bcs.n	800b1be <HAL_TIM_PWM_Init+0x13a>
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	e000      	b.n	800b1c0 <HAL_TIM_PWM_Init+0x13c>
 800b1be:	2300      	movs	r3, #0
 800b1c0:	f003 0301 	and.w	r3, r3, #1
 800b1c4:	b2db      	uxtb	r3, r3
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d104      	bne.n	800b1d4 <HAL_TIM_PWM_Init+0x150>
 800b1ca:	f240 5136 	movw	r1, #1334	@ 0x536
 800b1ce:	483c      	ldr	r0, [pc, #240]	@ (800b2c0 <HAL_TIM_PWM_Init+0x23c>)
 800b1d0:	f7fb fc30 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	699b      	ldr	r3, [r3, #24]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d008      	beq.n	800b1ee <HAL_TIM_PWM_Init+0x16a>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	699b      	ldr	r3, [r3, #24]
 800b1e0:	2b80      	cmp	r3, #128	@ 0x80
 800b1e2:	d004      	beq.n	800b1ee <HAL_TIM_PWM_Init+0x16a>
 800b1e4:	f240 5137 	movw	r1, #1335	@ 0x537
 800b1e8:	4835      	ldr	r0, [pc, #212]	@ (800b2c0 <HAL_TIM_PWM_Init+0x23c>)
 800b1ea:	f7fb fc23 	bl	8006a34 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b1f4:	b2db      	uxtb	r3, r3
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d106      	bne.n	800b208 <HAL_TIM_PWM_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 f85e 	bl	800b2c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2202      	movs	r2, #2
 800b20c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681a      	ldr	r2, [r3, #0]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	3304      	adds	r3, #4
 800b218:	4619      	mov	r1, r3
 800b21a:	4610      	mov	r0, r2
 800b21c:	f001 fe46 	bl	800ceac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2201      	movs	r2, #1
 800b224:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2201      	movs	r2, #1
 800b22c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2201      	movs	r2, #1
 800b234:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2201      	movs	r2, #1
 800b23c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2201      	movs	r2, #1
 800b244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2201      	movs	r2, #1
 800b24c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2201      	movs	r2, #1
 800b254:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2201      	movs	r2, #1
 800b25c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2201      	movs	r2, #1
 800b264:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2201      	movs	r2, #1
 800b26c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2201      	movs	r2, #1
 800b274:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2201      	movs	r2, #1
 800b27c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b280:	2300      	movs	r3, #0
}
 800b282:	4618      	mov	r0, r3
 800b284:	3708      	adds	r7, #8
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	40010000 	.word	0x40010000
 800b290:	40000400 	.word	0x40000400
 800b294:	40000800 	.word	0x40000800
 800b298:	40000c00 	.word	0x40000c00
 800b29c:	40001000 	.word	0x40001000
 800b2a0:	40001400 	.word	0x40001400
 800b2a4:	40010400 	.word	0x40010400
 800b2a8:	40014000 	.word	0x40014000
 800b2ac:	40014400 	.word	0x40014400
 800b2b0:	40014800 	.word	0x40014800
 800b2b4:	40001800 	.word	0x40001800
 800b2b8:	40001c00 	.word	0x40001c00
 800b2bc:	40002000 	.word	0x40002000
 800b2c0:	08018a30 	.word	0x08018a30

0800b2c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b2cc:	bf00      	nop
 800b2ce:	370c      	adds	r7, #12
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4a89      	ldr	r2, [pc, #548]	@ (800b50c <HAL_TIM_PWM_Start+0x234>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d117      	bne.n	800b31c <HAL_TIM_PWM_Start+0x44>
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	f000 80ae 	beq.w	800b450 <HAL_TIM_PWM_Start+0x178>
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	2b04      	cmp	r3, #4
 800b2f8:	f000 80aa 	beq.w	800b450 <HAL_TIM_PWM_Start+0x178>
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	2b08      	cmp	r3, #8
 800b300:	f000 80a6 	beq.w	800b450 <HAL_TIM_PWM_Start+0x178>
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	2b0c      	cmp	r3, #12
 800b308:	f000 80a2 	beq.w	800b450 <HAL_TIM_PWM_Start+0x178>
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	2b10      	cmp	r3, #16
 800b310:	f000 809e 	beq.w	800b450 <HAL_TIM_PWM_Start+0x178>
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	2b14      	cmp	r3, #20
 800b318:	f000 809a 	beq.w	800b450 <HAL_TIM_PWM_Start+0x178>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b324:	d10f      	bne.n	800b346 <HAL_TIM_PWM_Start+0x6e>
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	f000 8091 	beq.w	800b450 <HAL_TIM_PWM_Start+0x178>
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	2b04      	cmp	r3, #4
 800b332:	f000 808d 	beq.w	800b450 <HAL_TIM_PWM_Start+0x178>
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	2b08      	cmp	r3, #8
 800b33a:	f000 8089 	beq.w	800b450 <HAL_TIM_PWM_Start+0x178>
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	2b0c      	cmp	r3, #12
 800b342:	f000 8085 	beq.w	800b450 <HAL_TIM_PWM_Start+0x178>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4a71      	ldr	r2, [pc, #452]	@ (800b510 <HAL_TIM_PWM_Start+0x238>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d10b      	bne.n	800b368 <HAL_TIM_PWM_Start+0x90>
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d07c      	beq.n	800b450 <HAL_TIM_PWM_Start+0x178>
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	2b04      	cmp	r3, #4
 800b35a:	d079      	beq.n	800b450 <HAL_TIM_PWM_Start+0x178>
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	2b08      	cmp	r3, #8
 800b360:	d076      	beq.n	800b450 <HAL_TIM_PWM_Start+0x178>
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	2b0c      	cmp	r3, #12
 800b366:	d073      	beq.n	800b450 <HAL_TIM_PWM_Start+0x178>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4a69      	ldr	r2, [pc, #420]	@ (800b514 <HAL_TIM_PWM_Start+0x23c>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d10b      	bne.n	800b38a <HAL_TIM_PWM_Start+0xb2>
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d06b      	beq.n	800b450 <HAL_TIM_PWM_Start+0x178>
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	2b04      	cmp	r3, #4
 800b37c:	d068      	beq.n	800b450 <HAL_TIM_PWM_Start+0x178>
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	2b08      	cmp	r3, #8
 800b382:	d065      	beq.n	800b450 <HAL_TIM_PWM_Start+0x178>
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	2b0c      	cmp	r3, #12
 800b388:	d062      	beq.n	800b450 <HAL_TIM_PWM_Start+0x178>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	4a62      	ldr	r2, [pc, #392]	@ (800b518 <HAL_TIM_PWM_Start+0x240>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d10b      	bne.n	800b3ac <HAL_TIM_PWM_Start+0xd4>
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d05a      	beq.n	800b450 <HAL_TIM_PWM_Start+0x178>
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	2b04      	cmp	r3, #4
 800b39e:	d057      	beq.n	800b450 <HAL_TIM_PWM_Start+0x178>
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	2b08      	cmp	r3, #8
 800b3a4:	d054      	beq.n	800b450 <HAL_TIM_PWM_Start+0x178>
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	2b0c      	cmp	r3, #12
 800b3aa:	d051      	beq.n	800b450 <HAL_TIM_PWM_Start+0x178>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4a5a      	ldr	r2, [pc, #360]	@ (800b51c <HAL_TIM_PWM_Start+0x244>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d111      	bne.n	800b3da <HAL_TIM_PWM_Start+0x102>
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d049      	beq.n	800b450 <HAL_TIM_PWM_Start+0x178>
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	2b04      	cmp	r3, #4
 800b3c0:	d046      	beq.n	800b450 <HAL_TIM_PWM_Start+0x178>
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	2b08      	cmp	r3, #8
 800b3c6:	d043      	beq.n	800b450 <HAL_TIM_PWM_Start+0x178>
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	2b0c      	cmp	r3, #12
 800b3cc:	d040      	beq.n	800b450 <HAL_TIM_PWM_Start+0x178>
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	2b10      	cmp	r3, #16
 800b3d2:	d03d      	beq.n	800b450 <HAL_TIM_PWM_Start+0x178>
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	2b14      	cmp	r3, #20
 800b3d8:	d03a      	beq.n	800b450 <HAL_TIM_PWM_Start+0x178>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4a50      	ldr	r2, [pc, #320]	@ (800b520 <HAL_TIM_PWM_Start+0x248>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d105      	bne.n	800b3f0 <HAL_TIM_PWM_Start+0x118>
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d032      	beq.n	800b450 <HAL_TIM_PWM_Start+0x178>
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	2b04      	cmp	r3, #4
 800b3ee:	d02f      	beq.n	800b450 <HAL_TIM_PWM_Start+0x178>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	4a4b      	ldr	r2, [pc, #300]	@ (800b524 <HAL_TIM_PWM_Start+0x24c>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d102      	bne.n	800b400 <HAL_TIM_PWM_Start+0x128>
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d027      	beq.n	800b450 <HAL_TIM_PWM_Start+0x178>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a48      	ldr	r2, [pc, #288]	@ (800b528 <HAL_TIM_PWM_Start+0x250>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d102      	bne.n	800b410 <HAL_TIM_PWM_Start+0x138>
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d01f      	beq.n	800b450 <HAL_TIM_PWM_Start+0x178>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4a45      	ldr	r2, [pc, #276]	@ (800b52c <HAL_TIM_PWM_Start+0x254>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d105      	bne.n	800b426 <HAL_TIM_PWM_Start+0x14e>
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d017      	beq.n	800b450 <HAL_TIM_PWM_Start+0x178>
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	2b04      	cmp	r3, #4
 800b424:	d014      	beq.n	800b450 <HAL_TIM_PWM_Start+0x178>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	4a41      	ldr	r2, [pc, #260]	@ (800b530 <HAL_TIM_PWM_Start+0x258>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d102      	bne.n	800b436 <HAL_TIM_PWM_Start+0x15e>
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d00c      	beq.n	800b450 <HAL_TIM_PWM_Start+0x178>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a3e      	ldr	r2, [pc, #248]	@ (800b534 <HAL_TIM_PWM_Start+0x25c>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d102      	bne.n	800b446 <HAL_TIM_PWM_Start+0x16e>
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d004      	beq.n	800b450 <HAL_TIM_PWM_Start+0x178>
 800b446:	f240 51bc 	movw	r1, #1468	@ 0x5bc
 800b44a:	483b      	ldr	r0, [pc, #236]	@ (800b538 <HAL_TIM_PWM_Start+0x260>)
 800b44c:	f7fb faf2 	bl	8006a34 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d109      	bne.n	800b46a <HAL_TIM_PWM_Start+0x192>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	2b01      	cmp	r3, #1
 800b460:	bf14      	ite	ne
 800b462:	2301      	movne	r3, #1
 800b464:	2300      	moveq	r3, #0
 800b466:	b2db      	uxtb	r3, r3
 800b468:	e03c      	b.n	800b4e4 <HAL_TIM_PWM_Start+0x20c>
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	2b04      	cmp	r3, #4
 800b46e:	d109      	bne.n	800b484 <HAL_TIM_PWM_Start+0x1ac>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b476:	b2db      	uxtb	r3, r3
 800b478:	2b01      	cmp	r3, #1
 800b47a:	bf14      	ite	ne
 800b47c:	2301      	movne	r3, #1
 800b47e:	2300      	moveq	r3, #0
 800b480:	b2db      	uxtb	r3, r3
 800b482:	e02f      	b.n	800b4e4 <HAL_TIM_PWM_Start+0x20c>
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	2b08      	cmp	r3, #8
 800b488:	d109      	bne.n	800b49e <HAL_TIM_PWM_Start+0x1c6>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b490:	b2db      	uxtb	r3, r3
 800b492:	2b01      	cmp	r3, #1
 800b494:	bf14      	ite	ne
 800b496:	2301      	movne	r3, #1
 800b498:	2300      	moveq	r3, #0
 800b49a:	b2db      	uxtb	r3, r3
 800b49c:	e022      	b.n	800b4e4 <HAL_TIM_PWM_Start+0x20c>
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	2b0c      	cmp	r3, #12
 800b4a2:	d109      	bne.n	800b4b8 <HAL_TIM_PWM_Start+0x1e0>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	bf14      	ite	ne
 800b4b0:	2301      	movne	r3, #1
 800b4b2:	2300      	moveq	r3, #0
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	e015      	b.n	800b4e4 <HAL_TIM_PWM_Start+0x20c>
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	2b10      	cmp	r3, #16
 800b4bc:	d109      	bne.n	800b4d2 <HAL_TIM_PWM_Start+0x1fa>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	bf14      	ite	ne
 800b4ca:	2301      	movne	r3, #1
 800b4cc:	2300      	moveq	r3, #0
 800b4ce:	b2db      	uxtb	r3, r3
 800b4d0:	e008      	b.n	800b4e4 <HAL_TIM_PWM_Start+0x20c>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b4d8:	b2db      	uxtb	r3, r3
 800b4da:	2b01      	cmp	r3, #1
 800b4dc:	bf14      	ite	ne
 800b4de:	2301      	movne	r3, #1
 800b4e0:	2300      	moveq	r3, #0
 800b4e2:	b2db      	uxtb	r3, r3
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d001      	beq.n	800b4ec <HAL_TIM_PWM_Start+0x214>
  {
    return HAL_ERROR;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	e0aa      	b.n	800b642 <HAL_TIM_PWM_Start+0x36a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d104      	bne.n	800b4fc <HAL_TIM_PWM_Start+0x224>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2202      	movs	r2, #2
 800b4f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b4fa:	e03b      	b.n	800b574 <HAL_TIM_PWM_Start+0x29c>
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	2b04      	cmp	r3, #4
 800b500:	d11c      	bne.n	800b53c <HAL_TIM_PWM_Start+0x264>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2202      	movs	r2, #2
 800b506:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b50a:	e033      	b.n	800b574 <HAL_TIM_PWM_Start+0x29c>
 800b50c:	40010000 	.word	0x40010000
 800b510:	40000400 	.word	0x40000400
 800b514:	40000800 	.word	0x40000800
 800b518:	40000c00 	.word	0x40000c00
 800b51c:	40010400 	.word	0x40010400
 800b520:	40014000 	.word	0x40014000
 800b524:	40014400 	.word	0x40014400
 800b528:	40014800 	.word	0x40014800
 800b52c:	40001800 	.word	0x40001800
 800b530:	40001c00 	.word	0x40001c00
 800b534:	40002000 	.word	0x40002000
 800b538:	08018a30 	.word	0x08018a30
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	2b08      	cmp	r3, #8
 800b540:	d104      	bne.n	800b54c <HAL_TIM_PWM_Start+0x274>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2202      	movs	r2, #2
 800b546:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b54a:	e013      	b.n	800b574 <HAL_TIM_PWM_Start+0x29c>
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	2b0c      	cmp	r3, #12
 800b550:	d104      	bne.n	800b55c <HAL_TIM_PWM_Start+0x284>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2202      	movs	r2, #2
 800b556:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b55a:	e00b      	b.n	800b574 <HAL_TIM_PWM_Start+0x29c>
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	2b10      	cmp	r3, #16
 800b560:	d104      	bne.n	800b56c <HAL_TIM_PWM_Start+0x294>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2202      	movs	r2, #2
 800b566:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b56a:	e003      	b.n	800b574 <HAL_TIM_PWM_Start+0x29c>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2202      	movs	r2, #2
 800b570:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2201      	movs	r2, #1
 800b57a:	6839      	ldr	r1, [r7, #0]
 800b57c:	4618      	mov	r0, r3
 800b57e:	f002 fb29 	bl	800dbd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4a31      	ldr	r2, [pc, #196]	@ (800b64c <HAL_TIM_PWM_Start+0x374>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d004      	beq.n	800b596 <HAL_TIM_PWM_Start+0x2be>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4a2f      	ldr	r2, [pc, #188]	@ (800b650 <HAL_TIM_PWM_Start+0x378>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d101      	bne.n	800b59a <HAL_TIM_PWM_Start+0x2c2>
 800b596:	2301      	movs	r3, #1
 800b598:	e000      	b.n	800b59c <HAL_TIM_PWM_Start+0x2c4>
 800b59a:	2300      	movs	r3, #0
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d007      	beq.n	800b5b0 <HAL_TIM_PWM_Start+0x2d8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b5ae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	4a25      	ldr	r2, [pc, #148]	@ (800b64c <HAL_TIM_PWM_Start+0x374>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d022      	beq.n	800b600 <HAL_TIM_PWM_Start+0x328>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5c2:	d01d      	beq.n	800b600 <HAL_TIM_PWM_Start+0x328>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4a22      	ldr	r2, [pc, #136]	@ (800b654 <HAL_TIM_PWM_Start+0x37c>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d018      	beq.n	800b600 <HAL_TIM_PWM_Start+0x328>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4a21      	ldr	r2, [pc, #132]	@ (800b658 <HAL_TIM_PWM_Start+0x380>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d013      	beq.n	800b600 <HAL_TIM_PWM_Start+0x328>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a1f      	ldr	r2, [pc, #124]	@ (800b65c <HAL_TIM_PWM_Start+0x384>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d00e      	beq.n	800b600 <HAL_TIM_PWM_Start+0x328>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a1a      	ldr	r2, [pc, #104]	@ (800b650 <HAL_TIM_PWM_Start+0x378>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d009      	beq.n	800b600 <HAL_TIM_PWM_Start+0x328>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4a1b      	ldr	r2, [pc, #108]	@ (800b660 <HAL_TIM_PWM_Start+0x388>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d004      	beq.n	800b600 <HAL_TIM_PWM_Start+0x328>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4a1a      	ldr	r2, [pc, #104]	@ (800b664 <HAL_TIM_PWM_Start+0x38c>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d115      	bne.n	800b62c <HAL_TIM_PWM_Start+0x354>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	689a      	ldr	r2, [r3, #8]
 800b606:	4b18      	ldr	r3, [pc, #96]	@ (800b668 <HAL_TIM_PWM_Start+0x390>)
 800b608:	4013      	ands	r3, r2
 800b60a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	2b06      	cmp	r3, #6
 800b610:	d015      	beq.n	800b63e <HAL_TIM_PWM_Start+0x366>
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b618:	d011      	beq.n	800b63e <HAL_TIM_PWM_Start+0x366>
    {
      __HAL_TIM_ENABLE(htim);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	681a      	ldr	r2, [r3, #0]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f042 0201 	orr.w	r2, r2, #1
 800b628:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b62a:	e008      	b.n	800b63e <HAL_TIM_PWM_Start+0x366>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f042 0201 	orr.w	r2, r2, #1
 800b63a:	601a      	str	r2, [r3, #0]
 800b63c:	e000      	b.n	800b640 <HAL_TIM_PWM_Start+0x368>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b63e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b640:	2300      	movs	r3, #0
}
 800b642:	4618      	mov	r0, r3
 800b644:	3710      	adds	r7, #16
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
 800b64a:	bf00      	nop
 800b64c:	40010000 	.word	0x40010000
 800b650:	40010400 	.word	0x40010400
 800b654:	40000400 	.word	0x40000400
 800b658:	40000800 	.word	0x40000800
 800b65c:	40000c00 	.word	0x40000c00
 800b660:	40014000 	.word	0x40014000
 800b664:	40001800 	.word	0x40001800
 800b668:	00010007 	.word	0x00010007

0800b66c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d101      	bne.n	800b680 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800b67c:	2301      	movs	r3, #1
 800b67e:	e0f8      	b.n	800b872 <HAL_TIM_OnePulse_Init+0x206>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4a7d      	ldr	r2, [pc, #500]	@ (800b87c <HAL_TIM_OnePulse_Init+0x210>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d045      	beq.n	800b716 <HAL_TIM_OnePulse_Init+0xaa>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b692:	d040      	beq.n	800b716 <HAL_TIM_OnePulse_Init+0xaa>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4a79      	ldr	r2, [pc, #484]	@ (800b880 <HAL_TIM_OnePulse_Init+0x214>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d03b      	beq.n	800b716 <HAL_TIM_OnePulse_Init+0xaa>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	4a78      	ldr	r2, [pc, #480]	@ (800b884 <HAL_TIM_OnePulse_Init+0x218>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d036      	beq.n	800b716 <HAL_TIM_OnePulse_Init+0xaa>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4a76      	ldr	r2, [pc, #472]	@ (800b888 <HAL_TIM_OnePulse_Init+0x21c>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d031      	beq.n	800b716 <HAL_TIM_OnePulse_Init+0xaa>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	4a75      	ldr	r2, [pc, #468]	@ (800b88c <HAL_TIM_OnePulse_Init+0x220>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d02c      	beq.n	800b716 <HAL_TIM_OnePulse_Init+0xaa>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	4a73      	ldr	r2, [pc, #460]	@ (800b890 <HAL_TIM_OnePulse_Init+0x224>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d027      	beq.n	800b716 <HAL_TIM_OnePulse_Init+0xaa>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4a72      	ldr	r2, [pc, #456]	@ (800b894 <HAL_TIM_OnePulse_Init+0x228>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d022      	beq.n	800b716 <HAL_TIM_OnePulse_Init+0xaa>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4a70      	ldr	r2, [pc, #448]	@ (800b898 <HAL_TIM_OnePulse_Init+0x22c>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d01d      	beq.n	800b716 <HAL_TIM_OnePulse_Init+0xaa>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4a6f      	ldr	r2, [pc, #444]	@ (800b89c <HAL_TIM_OnePulse_Init+0x230>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d018      	beq.n	800b716 <HAL_TIM_OnePulse_Init+0xaa>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a6d      	ldr	r2, [pc, #436]	@ (800b8a0 <HAL_TIM_OnePulse_Init+0x234>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d013      	beq.n	800b716 <HAL_TIM_OnePulse_Init+0xaa>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	4a6c      	ldr	r2, [pc, #432]	@ (800b8a4 <HAL_TIM_OnePulse_Init+0x238>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d00e      	beq.n	800b716 <HAL_TIM_OnePulse_Init+0xaa>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4a6a      	ldr	r2, [pc, #424]	@ (800b8a8 <HAL_TIM_OnePulse_Init+0x23c>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d009      	beq.n	800b716 <HAL_TIM_OnePulse_Init+0xaa>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	4a69      	ldr	r2, [pc, #420]	@ (800b8ac <HAL_TIM_OnePulse_Init+0x240>)
 800b708:	4293      	cmp	r3, r2
 800b70a:	d004      	beq.n	800b716 <HAL_TIM_OnePulse_Init+0xaa>
 800b70c:	f640 2158 	movw	r1, #2648	@ 0xa58
 800b710:	4867      	ldr	r0, [pc, #412]	@ (800b8b0 <HAL_TIM_OnePulse_Init+0x244>)
 800b712:	f7fb f98f 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	689b      	ldr	r3, [r3, #8]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d014      	beq.n	800b748 <HAL_TIM_OnePulse_Init+0xdc>
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	689b      	ldr	r3, [r3, #8]
 800b722:	2b10      	cmp	r3, #16
 800b724:	d010      	beq.n	800b748 <HAL_TIM_OnePulse_Init+0xdc>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	2b20      	cmp	r3, #32
 800b72c:	d00c      	beq.n	800b748 <HAL_TIM_OnePulse_Init+0xdc>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	689b      	ldr	r3, [r3, #8]
 800b732:	2b40      	cmp	r3, #64	@ 0x40
 800b734:	d008      	beq.n	800b748 <HAL_TIM_OnePulse_Init+0xdc>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	689b      	ldr	r3, [r3, #8]
 800b73a:	2b60      	cmp	r3, #96	@ 0x60
 800b73c:	d004      	beq.n	800b748 <HAL_TIM_OnePulse_Init+0xdc>
 800b73e:	f640 2159 	movw	r1, #2649	@ 0xa59
 800b742:	485b      	ldr	r0, [pc, #364]	@ (800b8b0 <HAL_TIM_OnePulse_Init+0x244>)
 800b744:	f7fb f976 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	691b      	ldr	r3, [r3, #16]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d00e      	beq.n	800b76e <HAL_TIM_OnePulse_Init+0x102>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	691b      	ldr	r3, [r3, #16]
 800b754:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b758:	d009      	beq.n	800b76e <HAL_TIM_OnePulse_Init+0x102>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	691b      	ldr	r3, [r3, #16]
 800b75e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b762:	d004      	beq.n	800b76e <HAL_TIM_OnePulse_Init+0x102>
 800b764:	f640 215a 	movw	r1, #2650	@ 0xa5a
 800b768:	4851      	ldr	r0, [pc, #324]	@ (800b8b0 <HAL_TIM_OnePulse_Init+0x244>)
 800b76a:	f7fb f963 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	2b08      	cmp	r3, #8
 800b772:	d007      	beq.n	800b784 <HAL_TIM_OnePulse_Init+0x118>
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d004      	beq.n	800b784 <HAL_TIM_OnePulse_Init+0x118>
 800b77a:	f640 215b 	movw	r1, #2651	@ 0xa5b
 800b77e:	484c      	ldr	r0, [pc, #304]	@ (800b8b0 <HAL_TIM_OnePulse_Init+0x244>)
 800b780:	f7fb f958 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b78c:	d004      	beq.n	800b798 <HAL_TIM_OnePulse_Init+0x12c>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4a3d      	ldr	r2, [pc, #244]	@ (800b888 <HAL_TIM_OnePulse_Init+0x21c>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d107      	bne.n	800b7a8 <HAL_TIM_OnePulse_Init+0x13c>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	68db      	ldr	r3, [r3, #12]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	bf14      	ite	ne
 800b7a0:	2301      	movne	r3, #1
 800b7a2:	2300      	moveq	r3, #0
 800b7a4:	b2db      	uxtb	r3, r3
 800b7a6:	e00e      	b.n	800b7c6 <HAL_TIM_OnePulse_Init+0x15a>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	68db      	ldr	r3, [r3, #12]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d006      	beq.n	800b7be <HAL_TIM_OnePulse_Init+0x152>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	68db      	ldr	r3, [r3, #12]
 800b7b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b7b8:	d201      	bcs.n	800b7be <HAL_TIM_OnePulse_Init+0x152>
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	e000      	b.n	800b7c0 <HAL_TIM_OnePulse_Init+0x154>
 800b7be:	2300      	movs	r3, #0
 800b7c0:	f003 0301 	and.w	r3, r3, #1
 800b7c4:	b2db      	uxtb	r3, r3
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d104      	bne.n	800b7d4 <HAL_TIM_OnePulse_Init+0x168>
 800b7ca:	f640 215c 	movw	r1, #2652	@ 0xa5c
 800b7ce:	4838      	ldr	r0, [pc, #224]	@ (800b8b0 <HAL_TIM_OnePulse_Init+0x244>)
 800b7d0:	f7fb f930 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	699b      	ldr	r3, [r3, #24]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d008      	beq.n	800b7ee <HAL_TIM_OnePulse_Init+0x182>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	699b      	ldr	r3, [r3, #24]
 800b7e0:	2b80      	cmp	r3, #128	@ 0x80
 800b7e2:	d004      	beq.n	800b7ee <HAL_TIM_OnePulse_Init+0x182>
 800b7e4:	f640 215d 	movw	r1, #2653	@ 0xa5d
 800b7e8:	4831      	ldr	r0, [pc, #196]	@ (800b8b0 <HAL_TIM_OnePulse_Init+0x244>)
 800b7ea:	f7fb f923 	bl	8006a34 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d106      	bne.n	800b808 <HAL_TIM_OnePulse_Init+0x19c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f000 f856 	bl	800b8b4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2202      	movs	r2, #2
 800b80c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681a      	ldr	r2, [r3, #0]
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	3304      	adds	r3, #4
 800b818:	4619      	mov	r1, r3
 800b81a:	4610      	mov	r0, r2
 800b81c:	f001 fb46 	bl	800ceac <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	681a      	ldr	r2, [r3, #0]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f022 0208 	bic.w	r2, r2, #8
 800b82e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	6819      	ldr	r1, [r3, #0]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	683a      	ldr	r2, [r7, #0]
 800b83c:	430a      	orrs	r2, r1
 800b83e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2201      	movs	r2, #1
 800b844:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2201      	movs	r2, #1
 800b84c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2201      	movs	r2, #1
 800b854:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2201      	movs	r2, #1
 800b85c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2201      	movs	r2, #1
 800b864:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2201      	movs	r2, #1
 800b86c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b870:	2300      	movs	r3, #0
}
 800b872:	4618      	mov	r0, r3
 800b874:	3708      	adds	r7, #8
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
 800b87a:	bf00      	nop
 800b87c:	40010000 	.word	0x40010000
 800b880:	40000400 	.word	0x40000400
 800b884:	40000800 	.word	0x40000800
 800b888:	40000c00 	.word	0x40000c00
 800b88c:	40001000 	.word	0x40001000
 800b890:	40001400 	.word	0x40001400
 800b894:	40010400 	.word	0x40010400
 800b898:	40014000 	.word	0x40014000
 800b89c:	40014400 	.word	0x40014400
 800b8a0:	40014800 	.word	0x40014800
 800b8a4:	40001800 	.word	0x40001800
 800b8a8:	40001c00 	.word	0x40001c00
 800b8ac:	40002000 	.word	0x40002000
 800b8b0:	08018a30 	.word	0x08018a30

0800b8b4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b083      	sub	sp, #12
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800b8bc:	bf00      	nop
 800b8be:	370c      	adds	r7, #12
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr

0800b8c8 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b8d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b8e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b8e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b8f0:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b8f2:	7bfb      	ldrb	r3, [r7, #15]
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d108      	bne.n	800b90a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b8f8:	7bbb      	ldrb	r3, [r7, #14]
 800b8fa:	2b01      	cmp	r3, #1
 800b8fc:	d105      	bne.n	800b90a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b8fe:	7b7b      	ldrb	r3, [r7, #13]
 800b900:	2b01      	cmp	r3, #1
 800b902:	d102      	bne.n	800b90a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b904:	7b3b      	ldrb	r3, [r7, #12]
 800b906:	2b01      	cmp	r3, #1
 800b908:	d001      	beq.n	800b90e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800b90a:	2301      	movs	r3, #1
 800b90c:	e045      	b.n	800b99a <HAL_TIM_OnePulse_Start_IT+0xd2>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2202      	movs	r2, #2
 800b912:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2202      	movs	r2, #2
 800b91a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2202      	movs	r2, #2
 800b922:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2202      	movs	r2, #2
 800b92a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	68da      	ldr	r2, [r3, #12]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f042 0202 	orr.w	r2, r2, #2
 800b93c:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	68da      	ldr	r2, [r3, #12]
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f042 0204 	orr.w	r2, r2, #4
 800b94c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	2201      	movs	r2, #1
 800b954:	2100      	movs	r1, #0
 800b956:	4618      	mov	r0, r3
 800b958:	f002 f93c 	bl	800dbd4 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	2201      	movs	r2, #1
 800b962:	2104      	movs	r1, #4
 800b964:	4618      	mov	r0, r3
 800b966:	f002 f935 	bl	800dbd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	4a0d      	ldr	r2, [pc, #52]	@ (800b9a4 <HAL_TIM_OnePulse_Start_IT+0xdc>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d004      	beq.n	800b97e <HAL_TIM_OnePulse_Start_IT+0xb6>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	4a0b      	ldr	r2, [pc, #44]	@ (800b9a8 <HAL_TIM_OnePulse_Start_IT+0xe0>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d101      	bne.n	800b982 <HAL_TIM_OnePulse_Start_IT+0xba>
 800b97e:	2301      	movs	r3, #1
 800b980:	e000      	b.n	800b984 <HAL_TIM_OnePulse_Start_IT+0xbc>
 800b982:	2300      	movs	r3, #0
 800b984:	2b00      	cmp	r3, #0
 800b986:	d007      	beq.n	800b998 <HAL_TIM_OnePulse_Start_IT+0xd0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b996:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800b998:	2300      	movs	r3, #0
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	40010000 	.word	0x40010000
 800b9a8:	40010400 	.word	0x40010400

0800b9ac <HAL_TIM_OnePulse_Stop_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	68da      	ldr	r2, [r3, #12]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f022 0202 	bic.w	r2, r2, #2
 800b9c4:	60da      	str	r2, [r3, #12]

  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	68da      	ldr	r2, [r3, #12]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f022 0204 	bic.w	r2, r2, #4
 800b9d4:	60da      	str	r2, [r3, #12]
  /* Disable the Capture compare and the Input Capture channels
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
  whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	2100      	movs	r1, #0
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f002 f8f8 	bl	800dbd4 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	2104      	movs	r1, #4
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f002 f8f1 	bl	800dbd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	4a29      	ldr	r2, [pc, #164]	@ (800ba9c <HAL_TIM_OnePulse_Stop_IT+0xf0>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d004      	beq.n	800ba06 <HAL_TIM_OnePulse_Stop_IT+0x5a>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4a27      	ldr	r2, [pc, #156]	@ (800baa0 <HAL_TIM_OnePulse_Stop_IT+0xf4>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d101      	bne.n	800ba0a <HAL_TIM_OnePulse_Stop_IT+0x5e>
 800ba06:	2301      	movs	r3, #1
 800ba08:	e000      	b.n	800ba0c <HAL_TIM_OnePulse_Stop_IT+0x60>
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d017      	beq.n	800ba40 <HAL_TIM_OnePulse_Stop_IT+0x94>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	6a1a      	ldr	r2, [r3, #32]
 800ba16:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ba1a:	4013      	ands	r3, r2
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d10f      	bne.n	800ba40 <HAL_TIM_OnePulse_Stop_IT+0x94>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	6a1a      	ldr	r2, [r3, #32]
 800ba26:	f240 4344 	movw	r3, #1092	@ 0x444
 800ba2a:	4013      	ands	r3, r2
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d107      	bne.n	800ba40 <HAL_TIM_OnePulse_Stop_IT+0x94>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ba3e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	6a1a      	ldr	r2, [r3, #32]
 800ba46:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ba4a:	4013      	ands	r3, r2
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d10f      	bne.n	800ba70 <HAL_TIM_OnePulse_Stop_IT+0xc4>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	6a1a      	ldr	r2, [r3, #32]
 800ba56:	f240 4344 	movw	r3, #1092	@ 0x444
 800ba5a:	4013      	ands	r3, r2
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d107      	bne.n	800ba70 <HAL_TIM_OnePulse_Stop_IT+0xc4>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	681a      	ldr	r2, [r3, #0]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f022 0201 	bic.w	r2, r2, #1
 800ba6e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2201      	movs	r2, #1
 800ba74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2201      	movs	r2, #1
 800ba84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 800ba90:	2300      	movs	r3, #0
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3708      	adds	r7, #8
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	40010000 	.word	0x40010000
 800baa0:	40010400 	.word	0x40010400

0800baa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b084      	sub	sp, #16
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	68db      	ldr	r3, [r3, #12]
 800bab2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	691b      	ldr	r3, [r3, #16]
 800baba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	f003 0302 	and.w	r3, r3, #2
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d020      	beq.n	800bb08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f003 0302 	and.w	r3, r3, #2
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d01b      	beq.n	800bb08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f06f 0202 	mvn.w	r2, #2
 800bad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2201      	movs	r2, #1
 800bade:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	699b      	ldr	r3, [r3, #24]
 800bae6:	f003 0303 	and.w	r3, r3, #3
 800baea:	2b00      	cmp	r3, #0
 800baec:	d003      	beq.n	800baf6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f001 f9c8 	bl	800ce84 <HAL_TIM_IC_CaptureCallback>
 800baf4:	e005      	b.n	800bb02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f001 f9ba 	bl	800ce70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f7f8 fe5d 	bl	80047bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2200      	movs	r2, #0
 800bb06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	f003 0304 	and.w	r3, r3, #4
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d020      	beq.n	800bb54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f003 0304 	and.w	r3, r3, #4
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d01b      	beq.n	800bb54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f06f 0204 	mvn.w	r2, #4
 800bb24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2202      	movs	r2, #2
 800bb2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	699b      	ldr	r3, [r3, #24]
 800bb32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d003      	beq.n	800bb42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f001 f9a2 	bl	800ce84 <HAL_TIM_IC_CaptureCallback>
 800bb40:	e005      	b.n	800bb4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f001 f994 	bl	800ce70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f7f8 fe37 	bl	80047bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2200      	movs	r2, #0
 800bb52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	f003 0308 	and.w	r3, r3, #8
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d020      	beq.n	800bba0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f003 0308 	and.w	r3, r3, #8
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d01b      	beq.n	800bba0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f06f 0208 	mvn.w	r2, #8
 800bb70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2204      	movs	r2, #4
 800bb76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	69db      	ldr	r3, [r3, #28]
 800bb7e:	f003 0303 	and.w	r3, r3, #3
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d003      	beq.n	800bb8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f001 f97c 	bl	800ce84 <HAL_TIM_IC_CaptureCallback>
 800bb8c:	e005      	b.n	800bb9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f001 f96e 	bl	800ce70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f7f8 fe11 	bl	80047bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	f003 0310 	and.w	r3, r3, #16
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d020      	beq.n	800bbec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	f003 0310 	and.w	r3, r3, #16
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d01b      	beq.n	800bbec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f06f 0210 	mvn.w	r2, #16
 800bbbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2208      	movs	r2, #8
 800bbc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	69db      	ldr	r3, [r3, #28]
 800bbca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d003      	beq.n	800bbda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f001 f956 	bl	800ce84 <HAL_TIM_IC_CaptureCallback>
 800bbd8:	e005      	b.n	800bbe6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f001 f948 	bl	800ce70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f7f8 fdeb 	bl	80047bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	f003 0301 	and.w	r3, r3, #1
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d00c      	beq.n	800bc10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f003 0301 	and.w	r3, r3, #1
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d007      	beq.n	800bc10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f06f 0201 	mvn.w	r2, #1
 800bc08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f001 f926 	bl	800ce5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d104      	bne.n	800bc24 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d00c      	beq.n	800bc3e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d007      	beq.n	800bc3e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bc36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f002 fad9 	bl	800e1f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d00c      	beq.n	800bc62 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d007      	beq.n	800bc62 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bc5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f002 fad1 	bl	800e204 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d00c      	beq.n	800bc86 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d007      	beq.n	800bc86 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bc7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f001 f909 	bl	800ce98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	f003 0320 	and.w	r3, r3, #32
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d00c      	beq.n	800bcaa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f003 0320 	and.w	r3, r3, #32
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d007      	beq.n	800bcaa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f06f 0220 	mvn.w	r2, #32
 800bca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f002 fa99 	bl	800e1dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bcaa:	bf00      	nop
 800bcac:	3710      	adds	r7, #16
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
	...

0800bcb4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b086      	sub	sp, #24
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	60f8      	str	r0, [r7, #12]
 800bcbc:	60b9      	str	r1, [r7, #8]
 800bcbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d016      	beq.n	800bcf8 <HAL_TIM_OC_ConfigChannel+0x44>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2b04      	cmp	r3, #4
 800bcce:	d013      	beq.n	800bcf8 <HAL_TIM_OC_ConfigChannel+0x44>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2b08      	cmp	r3, #8
 800bcd4:	d010      	beq.n	800bcf8 <HAL_TIM_OC_ConfigChannel+0x44>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2b0c      	cmp	r3, #12
 800bcda:	d00d      	beq.n	800bcf8 <HAL_TIM_OC_ConfigChannel+0x44>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2b10      	cmp	r3, #16
 800bce0:	d00a      	beq.n	800bcf8 <HAL_TIM_OC_ConfigChannel+0x44>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2b14      	cmp	r3, #20
 800bce6:	d007      	beq.n	800bcf8 <HAL_TIM_OC_ConfigChannel+0x44>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2b3c      	cmp	r3, #60	@ 0x3c
 800bcec:	d004      	beq.n	800bcf8 <HAL_TIM_OC_ConfigChannel+0x44>
 800bcee:	f640 71eb 	movw	r1, #4075	@ 0xfeb
 800bcf2:	488c      	ldr	r0, [pc, #560]	@ (800bf24 <HAL_TIM_OC_ConfigChannel+0x270>)
 800bcf4:	f7fa fe9e 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d022      	beq.n	800bd46 <HAL_TIM_OC_ConfigChannel+0x92>
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	2b10      	cmp	r3, #16
 800bd06:	d01e      	beq.n	800bd46 <HAL_TIM_OC_ConfigChannel+0x92>
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	2b20      	cmp	r3, #32
 800bd0e:	d01a      	beq.n	800bd46 <HAL_TIM_OC_ConfigChannel+0x92>
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	2b30      	cmp	r3, #48	@ 0x30
 800bd16:	d016      	beq.n	800bd46 <HAL_TIM_OC_ConfigChannel+0x92>
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	2b50      	cmp	r3, #80	@ 0x50
 800bd1e:	d012      	beq.n	800bd46 <HAL_TIM_OC_ConfigChannel+0x92>
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2b40      	cmp	r3, #64	@ 0x40
 800bd26:	d00e      	beq.n	800bd46 <HAL_TIM_OC_ConfigChannel+0x92>
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd30:	d009      	beq.n	800bd46 <HAL_TIM_OC_ConfigChannel+0x92>
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4a7c      	ldr	r2, [pc, #496]	@ (800bf28 <HAL_TIM_OC_ConfigChannel+0x274>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d004      	beq.n	800bd46 <HAL_TIM_OC_ConfigChannel+0x92>
 800bd3c:	f640 71ec 	movw	r1, #4076	@ 0xfec
 800bd40:	4878      	ldr	r0, [pc, #480]	@ (800bf24 <HAL_TIM_OC_ConfigChannel+0x270>)
 800bd42:	f7fa fe77 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	689b      	ldr	r3, [r3, #8]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d008      	beq.n	800bd60 <HAL_TIM_OC_ConfigChannel+0xac>
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	689b      	ldr	r3, [r3, #8]
 800bd52:	2b02      	cmp	r3, #2
 800bd54:	d004      	beq.n	800bd60 <HAL_TIM_OC_ConfigChannel+0xac>
 800bd56:	f640 71ed 	movw	r1, #4077	@ 0xfed
 800bd5a:	4872      	ldr	r0, [pc, #456]	@ (800bf24 <HAL_TIM_OC_ConfigChannel+0x270>)
 800bd5c:	f7fa fe6a 	bl	8006a34 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	d101      	bne.n	800bd6e <HAL_TIM_OC_ConfigChannel+0xba>
 800bd6a:	2302      	movs	r3, #2
 800bd6c:	e152      	b.n	800c014 <HAL_TIM_OC_ConfigChannel+0x360>
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2201      	movs	r2, #1
 800bd72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2b14      	cmp	r3, #20
 800bd7a:	f200 8143 	bhi.w	800c004 <HAL_TIM_OC_ConfigChannel+0x350>
 800bd7e:	a201      	add	r2, pc, #4	@ (adr r2, 800bd84 <HAL_TIM_OC_ConfigChannel+0xd0>)
 800bd80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd84:	0800bdd9 	.word	0x0800bdd9
 800bd88:	0800c005 	.word	0x0800c005
 800bd8c:	0800c005 	.word	0x0800c005
 800bd90:	0800c005 	.word	0x0800c005
 800bd94:	0800be69 	.word	0x0800be69
 800bd98:	0800c005 	.word	0x0800c005
 800bd9c:	0800c005 	.word	0x0800c005
 800bda0:	0800c005 	.word	0x0800c005
 800bda4:	0800bed1 	.word	0x0800bed1
 800bda8:	0800c005 	.word	0x0800c005
 800bdac:	0800c005 	.word	0x0800c005
 800bdb0:	0800c005 	.word	0x0800c005
 800bdb4:	0800bf59 	.word	0x0800bf59
 800bdb8:	0800c005 	.word	0x0800c005
 800bdbc:	0800c005 	.word	0x0800c005
 800bdc0:	0800c005 	.word	0x0800c005
 800bdc4:	0800bfad 	.word	0x0800bfad
 800bdc8:	0800c005 	.word	0x0800c005
 800bdcc:	0800c005 	.word	0x0800c005
 800bdd0:	0800c005 	.word	0x0800c005
 800bdd4:	0800bfd9 	.word	0x0800bfd9
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a53      	ldr	r2, [pc, #332]	@ (800bf2c <HAL_TIM_OC_ConfigChannel+0x278>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d03b      	beq.n	800be5a <HAL_TIM_OC_ConfigChannel+0x1a6>
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bdea:	d036      	beq.n	800be5a <HAL_TIM_OC_ConfigChannel+0x1a6>
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a4f      	ldr	r2, [pc, #316]	@ (800bf30 <HAL_TIM_OC_ConfigChannel+0x27c>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d031      	beq.n	800be5a <HAL_TIM_OC_ConfigChannel+0x1a6>
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	4a4e      	ldr	r2, [pc, #312]	@ (800bf34 <HAL_TIM_OC_ConfigChannel+0x280>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d02c      	beq.n	800be5a <HAL_TIM_OC_ConfigChannel+0x1a6>
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	4a4c      	ldr	r2, [pc, #304]	@ (800bf38 <HAL_TIM_OC_ConfigChannel+0x284>)
 800be06:	4293      	cmp	r3, r2
 800be08:	d027      	beq.n	800be5a <HAL_TIM_OC_ConfigChannel+0x1a6>
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	4a4b      	ldr	r2, [pc, #300]	@ (800bf3c <HAL_TIM_OC_ConfigChannel+0x288>)
 800be10:	4293      	cmp	r3, r2
 800be12:	d022      	beq.n	800be5a <HAL_TIM_OC_ConfigChannel+0x1a6>
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	4a49      	ldr	r2, [pc, #292]	@ (800bf40 <HAL_TIM_OC_ConfigChannel+0x28c>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d01d      	beq.n	800be5a <HAL_TIM_OC_ConfigChannel+0x1a6>
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	4a48      	ldr	r2, [pc, #288]	@ (800bf44 <HAL_TIM_OC_ConfigChannel+0x290>)
 800be24:	4293      	cmp	r3, r2
 800be26:	d018      	beq.n	800be5a <HAL_TIM_OC_ConfigChannel+0x1a6>
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4a46      	ldr	r2, [pc, #280]	@ (800bf48 <HAL_TIM_OC_ConfigChannel+0x294>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d013      	beq.n	800be5a <HAL_TIM_OC_ConfigChannel+0x1a6>
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	4a45      	ldr	r2, [pc, #276]	@ (800bf4c <HAL_TIM_OC_ConfigChannel+0x298>)
 800be38:	4293      	cmp	r3, r2
 800be3a:	d00e      	beq.n	800be5a <HAL_TIM_OC_ConfigChannel+0x1a6>
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4a43      	ldr	r2, [pc, #268]	@ (800bf50 <HAL_TIM_OC_ConfigChannel+0x29c>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d009      	beq.n	800be5a <HAL_TIM_OC_ConfigChannel+0x1a6>
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4a42      	ldr	r2, [pc, #264]	@ (800bf54 <HAL_TIM_OC_ConfigChannel+0x2a0>)
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d004      	beq.n	800be5a <HAL_TIM_OC_ConfigChannel+0x1a6>
 800be50:	f640 71f7 	movw	r1, #4087	@ 0xff7
 800be54:	4833      	ldr	r0, [pc, #204]	@ (800bf24 <HAL_TIM_OC_ConfigChannel+0x270>)
 800be56:	f7fa fded 	bl	8006a34 <assert_failed>

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	68b9      	ldr	r1, [r7, #8]
 800be60:	4618      	mov	r0, r3
 800be62:	f001 f8cf 	bl	800d004 <TIM_OC1_SetConfig>
      break;
 800be66:	e0d0      	b.n	800c00a <HAL_TIM_OC_ConfigChannel+0x356>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4a2f      	ldr	r2, [pc, #188]	@ (800bf2c <HAL_TIM_OC_ConfigChannel+0x278>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d027      	beq.n	800bec2 <HAL_TIM_OC_ConfigChannel+0x20e>
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be7a:	d022      	beq.n	800bec2 <HAL_TIM_OC_ConfigChannel+0x20e>
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4a2b      	ldr	r2, [pc, #172]	@ (800bf30 <HAL_TIM_OC_ConfigChannel+0x27c>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d01d      	beq.n	800bec2 <HAL_TIM_OC_ConfigChannel+0x20e>
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	4a2a      	ldr	r2, [pc, #168]	@ (800bf34 <HAL_TIM_OC_ConfigChannel+0x280>)
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d018      	beq.n	800bec2 <HAL_TIM_OC_ConfigChannel+0x20e>
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	4a28      	ldr	r2, [pc, #160]	@ (800bf38 <HAL_TIM_OC_ConfigChannel+0x284>)
 800be96:	4293      	cmp	r3, r2
 800be98:	d013      	beq.n	800bec2 <HAL_TIM_OC_ConfigChannel+0x20e>
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	4a27      	ldr	r2, [pc, #156]	@ (800bf3c <HAL_TIM_OC_ConfigChannel+0x288>)
 800bea0:	4293      	cmp	r3, r2
 800bea2:	d00e      	beq.n	800bec2 <HAL_TIM_OC_ConfigChannel+0x20e>
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	4a25      	ldr	r2, [pc, #148]	@ (800bf40 <HAL_TIM_OC_ConfigChannel+0x28c>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d009      	beq.n	800bec2 <HAL_TIM_OC_ConfigChannel+0x20e>
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	4a26      	ldr	r2, [pc, #152]	@ (800bf4c <HAL_TIM_OC_ConfigChannel+0x298>)
 800beb4:	4293      	cmp	r3, r2
 800beb6:	d004      	beq.n	800bec2 <HAL_TIM_OC_ConfigChannel+0x20e>
 800beb8:	f241 0101 	movw	r1, #4097	@ 0x1001
 800bebc:	4819      	ldr	r0, [pc, #100]	@ (800bf24 <HAL_TIM_OC_ConfigChannel+0x270>)
 800bebe:	f7fa fdb9 	bl	8006a34 <assert_failed>

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	68b9      	ldr	r1, [r7, #8]
 800bec8:	4618      	mov	r0, r3
 800beca:	f001 f937 	bl	800d13c <TIM_OC2_SetConfig>
      break;
 800bece:	e09c      	b.n	800c00a <HAL_TIM_OC_ConfigChannel+0x356>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	4a15      	ldr	r2, [pc, #84]	@ (800bf2c <HAL_TIM_OC_ConfigChannel+0x278>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d01d      	beq.n	800bf16 <HAL_TIM_OC_ConfigChannel+0x262>
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bee2:	d018      	beq.n	800bf16 <HAL_TIM_OC_ConfigChannel+0x262>
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	4a11      	ldr	r2, [pc, #68]	@ (800bf30 <HAL_TIM_OC_ConfigChannel+0x27c>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d013      	beq.n	800bf16 <HAL_TIM_OC_ConfigChannel+0x262>
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	4a10      	ldr	r2, [pc, #64]	@ (800bf34 <HAL_TIM_OC_ConfigChannel+0x280>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d00e      	beq.n	800bf16 <HAL_TIM_OC_ConfigChannel+0x262>
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	4a0e      	ldr	r2, [pc, #56]	@ (800bf38 <HAL_TIM_OC_ConfigChannel+0x284>)
 800befe:	4293      	cmp	r3, r2
 800bf00:	d009      	beq.n	800bf16 <HAL_TIM_OC_ConfigChannel+0x262>
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	4a0d      	ldr	r2, [pc, #52]	@ (800bf3c <HAL_TIM_OC_ConfigChannel+0x288>)
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d004      	beq.n	800bf16 <HAL_TIM_OC_ConfigChannel+0x262>
 800bf0c:	f241 010b 	movw	r1, #4107	@ 0x100b
 800bf10:	4804      	ldr	r0, [pc, #16]	@ (800bf24 <HAL_TIM_OC_ConfigChannel+0x270>)
 800bf12:	f7fa fd8f 	bl	8006a34 <assert_failed>

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	68b9      	ldr	r1, [r7, #8]
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f001 f9ad 	bl	800d27c <TIM_OC3_SetConfig>
      break;
 800bf22:	e072      	b.n	800c00a <HAL_TIM_OC_ConfigChannel+0x356>
 800bf24:	08018a30 	.word	0x08018a30
 800bf28:	00010010 	.word	0x00010010
 800bf2c:	40010000 	.word	0x40010000
 800bf30:	40000400 	.word	0x40000400
 800bf34:	40000800 	.word	0x40000800
 800bf38:	40000c00 	.word	0x40000c00
 800bf3c:	40010400 	.word	0x40010400
 800bf40:	40014000 	.word	0x40014000
 800bf44:	40014400 	.word	0x40014400
 800bf48:	40014800 	.word	0x40014800
 800bf4c:	40001800 	.word	0x40001800
 800bf50:	40001c00 	.word	0x40001c00
 800bf54:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4a2f      	ldr	r2, [pc, #188]	@ (800c01c <HAL_TIM_OC_ConfigChannel+0x368>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d01d      	beq.n	800bf9e <HAL_TIM_OC_ConfigChannel+0x2ea>
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf6a:	d018      	beq.n	800bf9e <HAL_TIM_OC_ConfigChannel+0x2ea>
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4a2b      	ldr	r2, [pc, #172]	@ (800c020 <HAL_TIM_OC_ConfigChannel+0x36c>)
 800bf72:	4293      	cmp	r3, r2
 800bf74:	d013      	beq.n	800bf9e <HAL_TIM_OC_ConfigChannel+0x2ea>
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	4a2a      	ldr	r2, [pc, #168]	@ (800c024 <HAL_TIM_OC_ConfigChannel+0x370>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d00e      	beq.n	800bf9e <HAL_TIM_OC_ConfigChannel+0x2ea>
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4a28      	ldr	r2, [pc, #160]	@ (800c028 <HAL_TIM_OC_ConfigChannel+0x374>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d009      	beq.n	800bf9e <HAL_TIM_OC_ConfigChannel+0x2ea>
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	4a27      	ldr	r2, [pc, #156]	@ (800c02c <HAL_TIM_OC_ConfigChannel+0x378>)
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d004      	beq.n	800bf9e <HAL_TIM_OC_ConfigChannel+0x2ea>
 800bf94:	f241 0115 	movw	r1, #4117	@ 0x1015
 800bf98:	4825      	ldr	r0, [pc, #148]	@ (800c030 <HAL_TIM_OC_ConfigChannel+0x37c>)
 800bf9a:	f7fa fd4b 	bl	8006a34 <assert_failed>

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	68b9      	ldr	r1, [r7, #8]
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f001 fa09 	bl	800d3bc <TIM_OC4_SetConfig>
      break;
 800bfaa:	e02e      	b.n	800c00a <HAL_TIM_OC_ConfigChannel+0x356>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	4a1a      	ldr	r2, [pc, #104]	@ (800c01c <HAL_TIM_OC_ConfigChannel+0x368>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d009      	beq.n	800bfca <HAL_TIM_OC_ConfigChannel+0x316>
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	4a1c      	ldr	r2, [pc, #112]	@ (800c02c <HAL_TIM_OC_ConfigChannel+0x378>)
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d004      	beq.n	800bfca <HAL_TIM_OC_ConfigChannel+0x316>
 800bfc0:	f241 011f 	movw	r1, #4127	@ 0x101f
 800bfc4:	481a      	ldr	r0, [pc, #104]	@ (800c030 <HAL_TIM_OC_ConfigChannel+0x37c>)
 800bfc6:	f7fa fd35 	bl	8006a34 <assert_failed>

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	68b9      	ldr	r1, [r7, #8]
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f001 fa59 	bl	800d488 <TIM_OC5_SetConfig>
      break;
 800bfd6:	e018      	b.n	800c00a <HAL_TIM_OC_ConfigChannel+0x356>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	4a0f      	ldr	r2, [pc, #60]	@ (800c01c <HAL_TIM_OC_ConfigChannel+0x368>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d009      	beq.n	800bff6 <HAL_TIM_OC_ConfigChannel+0x342>
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4a11      	ldr	r2, [pc, #68]	@ (800c02c <HAL_TIM_OC_ConfigChannel+0x378>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d004      	beq.n	800bff6 <HAL_TIM_OC_ConfigChannel+0x342>
 800bfec:	f241 0129 	movw	r1, #4137	@ 0x1029
 800bff0:	480f      	ldr	r0, [pc, #60]	@ (800c030 <HAL_TIM_OC_ConfigChannel+0x37c>)
 800bff2:	f7fa fd1f 	bl	8006a34 <assert_failed>

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	68b9      	ldr	r1, [r7, #8]
 800bffc:	4618      	mov	r0, r3
 800bffe:	f001 fa95 	bl	800d52c <TIM_OC6_SetConfig>
      break;
 800c002:	e002      	b.n	800c00a <HAL_TIM_OC_ConfigChannel+0x356>
    }

    default:
      status = HAL_ERROR;
 800c004:	2301      	movs	r3, #1
 800c006:	75fb      	strb	r3, [r7, #23]
      break;
 800c008:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	2200      	movs	r2, #0
 800c00e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c012:	7dfb      	ldrb	r3, [r7, #23]
}
 800c014:	4618      	mov	r0, r3
 800c016:	3718      	adds	r7, #24
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}
 800c01c:	40010000 	.word	0x40010000
 800c020:	40000400 	.word	0x40000400
 800c024:	40000800 	.word	0x40000800
 800c028:	40000c00 	.word	0x40000c00
 800c02c:	40010400 	.word	0x40010400
 800c030:	08018a30 	.word	0x08018a30

0800c034 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b086      	sub	sp, #24
 800c038:	af00      	add	r7, sp, #0
 800c03a:	60f8      	str	r0, [r7, #12]
 800c03c:	60b9      	str	r1, [r7, #8]
 800c03e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c040:	2300      	movs	r3, #0
 800c042:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d016      	beq.n	800c078 <HAL_TIM_PWM_ConfigChannel+0x44>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2b04      	cmp	r3, #4
 800c04e:	d013      	beq.n	800c078 <HAL_TIM_PWM_ConfigChannel+0x44>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2b08      	cmp	r3, #8
 800c054:	d010      	beq.n	800c078 <HAL_TIM_PWM_ConfigChannel+0x44>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2b0c      	cmp	r3, #12
 800c05a:	d00d      	beq.n	800c078 <HAL_TIM_PWM_ConfigChannel+0x44>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2b10      	cmp	r3, #16
 800c060:	d00a      	beq.n	800c078 <HAL_TIM_PWM_ConfigChannel+0x44>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2b14      	cmp	r3, #20
 800c066:	d007      	beq.n	800c078 <HAL_TIM_PWM_ConfigChannel+0x44>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2b3c      	cmp	r3, #60	@ 0x3c
 800c06c:	d004      	beq.n	800c078 <HAL_TIM_PWM_ConfigChannel+0x44>
 800c06e:	f241 01b3 	movw	r1, #4275	@ 0x10b3
 800c072:	4895      	ldr	r0, [pc, #596]	@ (800c2c8 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800c074:	f7fa fcde 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	2b60      	cmp	r3, #96	@ 0x60
 800c07e:	d01c      	beq.n	800c0ba <HAL_TIM_PWM_ConfigChannel+0x86>
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	2b70      	cmp	r3, #112	@ 0x70
 800c086:	d018      	beq.n	800c0ba <HAL_TIM_PWM_ConfigChannel+0x86>
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	4a8f      	ldr	r2, [pc, #572]	@ (800c2cc <HAL_TIM_PWM_ConfigChannel+0x298>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	d013      	beq.n	800c0ba <HAL_TIM_PWM_ConfigChannel+0x86>
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	4a8e      	ldr	r2, [pc, #568]	@ (800c2d0 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800c098:	4293      	cmp	r3, r2
 800c09a:	d00e      	beq.n	800c0ba <HAL_TIM_PWM_ConfigChannel+0x86>
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	4a8c      	ldr	r2, [pc, #560]	@ (800c2d4 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d009      	beq.n	800c0ba <HAL_TIM_PWM_ConfigChannel+0x86>
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4a8b      	ldr	r2, [pc, #556]	@ (800c2d8 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d004      	beq.n	800c0ba <HAL_TIM_PWM_ConfigChannel+0x86>
 800c0b0:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 800c0b4:	4884      	ldr	r0, [pc, #528]	@ (800c2c8 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800c0b6:	f7fa fcbd 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	689b      	ldr	r3, [r3, #8]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d008      	beq.n	800c0d4 <HAL_TIM_PWM_ConfigChannel+0xa0>
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	689b      	ldr	r3, [r3, #8]
 800c0c6:	2b02      	cmp	r3, #2
 800c0c8:	d004      	beq.n	800c0d4 <HAL_TIM_PWM_ConfigChannel+0xa0>
 800c0ca:	f241 01b5 	movw	r1, #4277	@ 0x10b5
 800c0ce:	487e      	ldr	r0, [pc, #504]	@ (800c2c8 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800c0d0:	f7fa fcb0 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	691b      	ldr	r3, [r3, #16]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d008      	beq.n	800c0ee <HAL_TIM_PWM_ConfigChannel+0xba>
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	691b      	ldr	r3, [r3, #16]
 800c0e0:	2b04      	cmp	r3, #4
 800c0e2:	d004      	beq.n	800c0ee <HAL_TIM_PWM_ConfigChannel+0xba>
 800c0e4:	f241 01b6 	movw	r1, #4278	@ 0x10b6
 800c0e8:	4877      	ldr	r0, [pc, #476]	@ (800c2c8 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800c0ea:	f7fa fca3 	bl	8006a34 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c0f4:	2b01      	cmp	r3, #1
 800c0f6:	d101      	bne.n	800c0fc <HAL_TIM_PWM_ConfigChannel+0xc8>
 800c0f8:	2302      	movs	r3, #2
 800c0fa:	e1f3      	b.n	800c4e4 <HAL_TIM_PWM_ConfigChannel+0x4b0>
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2201      	movs	r2, #1
 800c100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2b14      	cmp	r3, #20
 800c108:	f200 81e4 	bhi.w	800c4d4 <HAL_TIM_PWM_ConfigChannel+0x4a0>
 800c10c:	a201      	add	r2, pc, #4	@ (adr r2, 800c114 <HAL_TIM_PWM_ConfigChannel+0xe0>)
 800c10e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c112:	bf00      	nop
 800c114:	0800c169 	.word	0x0800c169
 800c118:	0800c4d5 	.word	0x0800c4d5
 800c11c:	0800c4d5 	.word	0x0800c4d5
 800c120:	0800c4d5 	.word	0x0800c4d5
 800c124:	0800c22b 	.word	0x0800c22b
 800c128:	0800c4d5 	.word	0x0800c4d5
 800c12c:	0800c4d5 	.word	0x0800c4d5
 800c130:	0800c4d5 	.word	0x0800c4d5
 800c134:	0800c309 	.word	0x0800c309
 800c138:	0800c4d5 	.word	0x0800c4d5
 800c13c:	0800c4d5 	.word	0x0800c4d5
 800c140:	0800c4d5 	.word	0x0800c4d5
 800c144:	0800c38f 	.word	0x0800c38f
 800c148:	0800c4d5 	.word	0x0800c4d5
 800c14c:	0800c4d5 	.word	0x0800c4d5
 800c150:	0800c4d5 	.word	0x0800c4d5
 800c154:	0800c417 	.word	0x0800c417
 800c158:	0800c4d5 	.word	0x0800c4d5
 800c15c:	0800c4d5 	.word	0x0800c4d5
 800c160:	0800c4d5 	.word	0x0800c4d5
 800c164:	0800c475 	.word	0x0800c475
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	4a5b      	ldr	r2, [pc, #364]	@ (800c2dc <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d03b      	beq.n	800c1ea <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c17a:	d036      	beq.n	800c1ea <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4a57      	ldr	r2, [pc, #348]	@ (800c2e0 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d031      	beq.n	800c1ea <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	4a56      	ldr	r2, [pc, #344]	@ (800c2e4 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d02c      	beq.n	800c1ea <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4a54      	ldr	r2, [pc, #336]	@ (800c2e8 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d027      	beq.n	800c1ea <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4a53      	ldr	r2, [pc, #332]	@ (800c2ec <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d022      	beq.n	800c1ea <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	4a51      	ldr	r2, [pc, #324]	@ (800c2f0 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d01d      	beq.n	800c1ea <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	4a50      	ldr	r2, [pc, #320]	@ (800c2f4 <HAL_TIM_PWM_ConfigChannel+0x2c0>)
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	d018      	beq.n	800c1ea <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	4a4e      	ldr	r2, [pc, #312]	@ (800c2f8 <HAL_TIM_PWM_ConfigChannel+0x2c4>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d013      	beq.n	800c1ea <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4a4d      	ldr	r2, [pc, #308]	@ (800c2fc <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d00e      	beq.n	800c1ea <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4a4b      	ldr	r2, [pc, #300]	@ (800c300 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d009      	beq.n	800c1ea <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	4a4a      	ldr	r2, [pc, #296]	@ (800c304 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d004      	beq.n	800c1ea <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800c1e0:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 800c1e4:	4838      	ldr	r0, [pc, #224]	@ (800c2c8 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800c1e6:	f7fa fc25 	bl	8006a34 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	68b9      	ldr	r1, [r7, #8]
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f000 ff07 	bl	800d004 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	699a      	ldr	r2, [r3, #24]
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f042 0208 	orr.w	r2, r2, #8
 800c204:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	699a      	ldr	r2, [r3, #24]
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f022 0204 	bic.w	r2, r2, #4
 800c214:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	6999      	ldr	r1, [r3, #24]
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	691a      	ldr	r2, [r3, #16]
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	430a      	orrs	r2, r1
 800c226:	619a      	str	r2, [r3, #24]
      break;
 800c228:	e157      	b.n	800c4da <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	4a2b      	ldr	r2, [pc, #172]	@ (800c2dc <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 800c230:	4293      	cmp	r3, r2
 800c232:	d027      	beq.n	800c284 <HAL_TIM_PWM_ConfigChannel+0x250>
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c23c:	d022      	beq.n	800c284 <HAL_TIM_PWM_ConfigChannel+0x250>
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	4a27      	ldr	r2, [pc, #156]	@ (800c2e0 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 800c244:	4293      	cmp	r3, r2
 800c246:	d01d      	beq.n	800c284 <HAL_TIM_PWM_ConfigChannel+0x250>
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	4a25      	ldr	r2, [pc, #148]	@ (800c2e4 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d018      	beq.n	800c284 <HAL_TIM_PWM_ConfigChannel+0x250>
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	4a24      	ldr	r2, [pc, #144]	@ (800c2e8 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d013      	beq.n	800c284 <HAL_TIM_PWM_ConfigChannel+0x250>
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4a22      	ldr	r2, [pc, #136]	@ (800c2ec <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800c262:	4293      	cmp	r3, r2
 800c264:	d00e      	beq.n	800c284 <HAL_TIM_PWM_ConfigChannel+0x250>
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4a21      	ldr	r2, [pc, #132]	@ (800c2f0 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d009      	beq.n	800c284 <HAL_TIM_PWM_ConfigChannel+0x250>
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4a21      	ldr	r2, [pc, #132]	@ (800c2fc <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d004      	beq.n	800c284 <HAL_TIM_PWM_ConfigChannel+0x250>
 800c27a:	f241 01d1 	movw	r1, #4305	@ 0x10d1
 800c27e:	4812      	ldr	r0, [pc, #72]	@ (800c2c8 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800c280:	f7fa fbd8 	bl	8006a34 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	68b9      	ldr	r1, [r7, #8]
 800c28a:	4618      	mov	r0, r3
 800c28c:	f000 ff56 	bl	800d13c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	699a      	ldr	r2, [r3, #24]
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c29e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	699a      	ldr	r2, [r3, #24]
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c2ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	6999      	ldr	r1, [r3, #24]
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	691b      	ldr	r3, [r3, #16]
 800c2ba:	021a      	lsls	r2, r3, #8
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	430a      	orrs	r2, r1
 800c2c2:	619a      	str	r2, [r3, #24]
      break;
 800c2c4:	e109      	b.n	800c4da <HAL_TIM_PWM_ConfigChannel+0x4a6>
 800c2c6:	bf00      	nop
 800c2c8:	08018a30 	.word	0x08018a30
 800c2cc:	00010040 	.word	0x00010040
 800c2d0:	00010050 	.word	0x00010050
 800c2d4:	00010060 	.word	0x00010060
 800c2d8:	00010070 	.word	0x00010070
 800c2dc:	40010000 	.word	0x40010000
 800c2e0:	40000400 	.word	0x40000400
 800c2e4:	40000800 	.word	0x40000800
 800c2e8:	40000c00 	.word	0x40000c00
 800c2ec:	40010400 	.word	0x40010400
 800c2f0:	40014000 	.word	0x40014000
 800c2f4:	40014400 	.word	0x40014400
 800c2f8:	40014800 	.word	0x40014800
 800c2fc:	40001800 	.word	0x40001800
 800c300:	40001c00 	.word	0x40001c00
 800c304:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	4a77      	ldr	r2, [pc, #476]	@ (800c4ec <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d01d      	beq.n	800c34e <HAL_TIM_PWM_ConfigChannel+0x31a>
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c31a:	d018      	beq.n	800c34e <HAL_TIM_PWM_ConfigChannel+0x31a>
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4a73      	ldr	r2, [pc, #460]	@ (800c4f0 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d013      	beq.n	800c34e <HAL_TIM_PWM_ConfigChannel+0x31a>
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4a72      	ldr	r2, [pc, #456]	@ (800c4f4 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d00e      	beq.n	800c34e <HAL_TIM_PWM_ConfigChannel+0x31a>
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	4a70      	ldr	r2, [pc, #448]	@ (800c4f8 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 800c336:	4293      	cmp	r3, r2
 800c338:	d009      	beq.n	800c34e <HAL_TIM_PWM_ConfigChannel+0x31a>
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4a6f      	ldr	r2, [pc, #444]	@ (800c4fc <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800c340:	4293      	cmp	r3, r2
 800c342:	d004      	beq.n	800c34e <HAL_TIM_PWM_ConfigChannel+0x31a>
 800c344:	f241 01e2 	movw	r1, #4322	@ 0x10e2
 800c348:	486d      	ldr	r0, [pc, #436]	@ (800c500 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800c34a:	f7fa fb73 	bl	8006a34 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	68b9      	ldr	r1, [r7, #8]
 800c354:	4618      	mov	r0, r3
 800c356:	f000 ff91 	bl	800d27c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	69da      	ldr	r2, [r3, #28]
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f042 0208 	orr.w	r2, r2, #8
 800c368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	69da      	ldr	r2, [r3, #28]
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f022 0204 	bic.w	r2, r2, #4
 800c378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	69d9      	ldr	r1, [r3, #28]
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	691a      	ldr	r2, [r3, #16]
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	430a      	orrs	r2, r1
 800c38a:	61da      	str	r2, [r3, #28]
      break;
 800c38c:	e0a5      	b.n	800c4da <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	4a56      	ldr	r2, [pc, #344]	@ (800c4ec <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 800c394:	4293      	cmp	r3, r2
 800c396:	d01d      	beq.n	800c3d4 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3a0:	d018      	beq.n	800c3d4 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	4a52      	ldr	r2, [pc, #328]	@ (800c4f0 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d013      	beq.n	800c3d4 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4a50      	ldr	r2, [pc, #320]	@ (800c4f4 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d00e      	beq.n	800c3d4 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4a4f      	ldr	r2, [pc, #316]	@ (800c4f8 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d009      	beq.n	800c3d4 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4a4d      	ldr	r2, [pc, #308]	@ (800c4fc <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d004      	beq.n	800c3d4 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800c3ca:	f241 01f3 	movw	r1, #4339	@ 0x10f3
 800c3ce:	484c      	ldr	r0, [pc, #304]	@ (800c500 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800c3d0:	f7fa fb30 	bl	8006a34 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	68b9      	ldr	r1, [r7, #8]
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f000 ffee 	bl	800d3bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	69da      	ldr	r2, [r3, #28]
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c3ee:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	69da      	ldr	r2, [r3, #28]
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c3fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	69d9      	ldr	r1, [r3, #28]
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	691b      	ldr	r3, [r3, #16]
 800c40a:	021a      	lsls	r2, r3, #8
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	430a      	orrs	r2, r1
 800c412:	61da      	str	r2, [r3, #28]
      break;
 800c414:	e061      	b.n	800c4da <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4a34      	ldr	r2, [pc, #208]	@ (800c4ec <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d009      	beq.n	800c434 <HAL_TIM_PWM_ConfigChannel+0x400>
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	4a35      	ldr	r2, [pc, #212]	@ (800c4fc <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800c426:	4293      	cmp	r3, r2
 800c428:	d004      	beq.n	800c434 <HAL_TIM_PWM_ConfigChannel+0x400>
 800c42a:	f241 1104 	movw	r1, #4356	@ 0x1104
 800c42e:	4834      	ldr	r0, [pc, #208]	@ (800c500 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800c430:	f7fa fb00 	bl	8006a34 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	68b9      	ldr	r1, [r7, #8]
 800c43a:	4618      	mov	r0, r3
 800c43c:	f001 f824 	bl	800d488 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f042 0208 	orr.w	r2, r2, #8
 800c44e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f022 0204 	bic.w	r2, r2, #4
 800c45e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	691a      	ldr	r2, [r3, #16]
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	430a      	orrs	r2, r1
 800c470:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c472:	e032      	b.n	800c4da <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4a1c      	ldr	r2, [pc, #112]	@ (800c4ec <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d009      	beq.n	800c492 <HAL_TIM_PWM_ConfigChannel+0x45e>
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	4a1e      	ldr	r2, [pc, #120]	@ (800c4fc <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d004      	beq.n	800c492 <HAL_TIM_PWM_ConfigChannel+0x45e>
 800c488:	f241 1115 	movw	r1, #4373	@ 0x1115
 800c48c:	481c      	ldr	r0, [pc, #112]	@ (800c500 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800c48e:	f7fa fad1 	bl	8006a34 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	68b9      	ldr	r1, [r7, #8]
 800c498:	4618      	mov	r0, r3
 800c49a:	f001 f847 	bl	800d52c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c4ac:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c4bc:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	691b      	ldr	r3, [r3, #16]
 800c4c8:	021a      	lsls	r2, r3, #8
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	430a      	orrs	r2, r1
 800c4d0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c4d2:	e002      	b.n	800c4da <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    default:
      status = HAL_ERROR;
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	75fb      	strb	r3, [r7, #23]
      break;
 800c4d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c4e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3718      	adds	r7, #24
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}
 800c4ec:	40010000 	.word	0x40010000
 800c4f0:	40000400 	.word	0x40000400
 800c4f4:	40000800 	.word	0x40000800
 800c4f8:	40000c00 	.word	0x40000c00
 800c4fc:	40010400 	.word	0x40010400
 800c500:	08018a30 	.word	0x08018a30

0800c504 <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b082      	sub	sp, #8
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	4a3a      	ldr	r2, [pc, #232]	@ (800c5fc <HAL_TIM_GenerateEvent+0xf8>)
 800c514:	4293      	cmp	r3, r2
 800c516:	d045      	beq.n	800c5a4 <HAL_TIM_GenerateEvent+0xa0>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c520:	d040      	beq.n	800c5a4 <HAL_TIM_GenerateEvent+0xa0>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	4a36      	ldr	r2, [pc, #216]	@ (800c600 <HAL_TIM_GenerateEvent+0xfc>)
 800c528:	4293      	cmp	r3, r2
 800c52a:	d03b      	beq.n	800c5a4 <HAL_TIM_GenerateEvent+0xa0>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4a34      	ldr	r2, [pc, #208]	@ (800c604 <HAL_TIM_GenerateEvent+0x100>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d036      	beq.n	800c5a4 <HAL_TIM_GenerateEvent+0xa0>
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4a33      	ldr	r2, [pc, #204]	@ (800c608 <HAL_TIM_GenerateEvent+0x104>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d031      	beq.n	800c5a4 <HAL_TIM_GenerateEvent+0xa0>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	4a31      	ldr	r2, [pc, #196]	@ (800c60c <HAL_TIM_GenerateEvent+0x108>)
 800c546:	4293      	cmp	r3, r2
 800c548:	d02c      	beq.n	800c5a4 <HAL_TIM_GenerateEvent+0xa0>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	4a30      	ldr	r2, [pc, #192]	@ (800c610 <HAL_TIM_GenerateEvent+0x10c>)
 800c550:	4293      	cmp	r3, r2
 800c552:	d027      	beq.n	800c5a4 <HAL_TIM_GenerateEvent+0xa0>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4a2e      	ldr	r2, [pc, #184]	@ (800c614 <HAL_TIM_GenerateEvent+0x110>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d022      	beq.n	800c5a4 <HAL_TIM_GenerateEvent+0xa0>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	4a2d      	ldr	r2, [pc, #180]	@ (800c618 <HAL_TIM_GenerateEvent+0x114>)
 800c564:	4293      	cmp	r3, r2
 800c566:	d01d      	beq.n	800c5a4 <HAL_TIM_GenerateEvent+0xa0>
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	4a2b      	ldr	r2, [pc, #172]	@ (800c61c <HAL_TIM_GenerateEvent+0x118>)
 800c56e:	4293      	cmp	r3, r2
 800c570:	d018      	beq.n	800c5a4 <HAL_TIM_GenerateEvent+0xa0>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4a2a      	ldr	r2, [pc, #168]	@ (800c620 <HAL_TIM_GenerateEvent+0x11c>)
 800c578:	4293      	cmp	r3, r2
 800c57a:	d013      	beq.n	800c5a4 <HAL_TIM_GenerateEvent+0xa0>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a28      	ldr	r2, [pc, #160]	@ (800c624 <HAL_TIM_GenerateEvent+0x120>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d00e      	beq.n	800c5a4 <HAL_TIM_GenerateEvent+0xa0>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	4a27      	ldr	r2, [pc, #156]	@ (800c628 <HAL_TIM_GenerateEvent+0x124>)
 800c58c:	4293      	cmp	r3, r2
 800c58e:	d009      	beq.n	800c5a4 <HAL_TIM_GenerateEvent+0xa0>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	4a25      	ldr	r2, [pc, #148]	@ (800c62c <HAL_TIM_GenerateEvent+0x128>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d004      	beq.n	800c5a4 <HAL_TIM_GenerateEvent+0xa0>
 800c59a:	f241 4184 	movw	r1, #5252	@ 0x1484
 800c59e:	4824      	ldr	r0, [pc, #144]	@ (800c630 <HAL_TIM_GenerateEvent+0x12c>)
 800c5a0:	f7fa fa48 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c5aa:	d202      	bcs.n	800c5b2 <HAL_TIM_GenerateEvent+0xae>
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d104      	bne.n	800c5bc <HAL_TIM_GenerateEvent+0xb8>
 800c5b2:	f241 4185 	movw	r1, #5253	@ 0x1485
 800c5b6:	481e      	ldr	r0, [pc, #120]	@ (800c630 <HAL_TIM_GenerateEvent+0x12c>)
 800c5b8:	f7fa fa3c 	bl	8006a34 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c5c2:	2b01      	cmp	r3, #1
 800c5c4:	d101      	bne.n	800c5ca <HAL_TIM_GenerateEvent+0xc6>
 800c5c6:	2302      	movs	r3, #2
 800c5c8:	e014      	b.n	800c5f4 <HAL_TIM_GenerateEvent+0xf0>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2201      	movs	r2, #1
 800c5ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2202      	movs	r2, #2
 800c5d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	683a      	ldr	r2, [r7, #0]
 800c5e0:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2201      	movs	r2, #1
 800c5e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800c5f2:	2300      	movs	r3, #0
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3708      	adds	r7, #8
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}
 800c5fc:	40010000 	.word	0x40010000
 800c600:	40000400 	.word	0x40000400
 800c604:	40000800 	.word	0x40000800
 800c608:	40000c00 	.word	0x40000c00
 800c60c:	40001000 	.word	0x40001000
 800c610:	40001400 	.word	0x40001400
 800c614:	40010400 	.word	0x40010400
 800c618:	40014000 	.word	0x40014000
 800c61c:	40014400 	.word	0x40014400
 800c620:	40014800 	.word	0x40014800
 800c624:	40001800 	.word	0x40001800
 800c628:	40001c00 	.word	0x40001c00
 800c62c:	40002000 	.word	0x40002000
 800c630:	08018a30 	.word	0x08018a30

0800c634 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b084      	sub	sp, #16
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c63e:	2300      	movs	r3, #0
 800c640:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c648:	2b01      	cmp	r3, #1
 800c64a:	d101      	bne.n	800c650 <HAL_TIM_ConfigClockSource+0x1c>
 800c64c:	2302      	movs	r3, #2
 800c64e:	e332      	b.n	800ccb6 <HAL_TIM_ConfigClockSource+0x682>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2201      	movs	r2, #1
 800c654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2202      	movs	r2, #2
 800c65c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c668:	d029      	beq.n	800c6be <HAL_TIM_ConfigClockSource+0x8a>
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	2b70      	cmp	r3, #112	@ 0x70
 800c670:	d025      	beq.n	800c6be <HAL_TIM_ConfigClockSource+0x8a>
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c67a:	d020      	beq.n	800c6be <HAL_TIM_ConfigClockSource+0x8a>
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	2b40      	cmp	r3, #64	@ 0x40
 800c682:	d01c      	beq.n	800c6be <HAL_TIM_ConfigClockSource+0x8a>
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	2b50      	cmp	r3, #80	@ 0x50
 800c68a:	d018      	beq.n	800c6be <HAL_TIM_ConfigClockSource+0x8a>
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	2b60      	cmp	r3, #96	@ 0x60
 800c692:	d014      	beq.n	800c6be <HAL_TIM_ConfigClockSource+0x8a>
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d010      	beq.n	800c6be <HAL_TIM_ConfigClockSource+0x8a>
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	2b10      	cmp	r3, #16
 800c6a2:	d00c      	beq.n	800c6be <HAL_TIM_ConfigClockSource+0x8a>
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	2b20      	cmp	r3, #32
 800c6aa:	d008      	beq.n	800c6be <HAL_TIM_ConfigClockSource+0x8a>
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2b30      	cmp	r3, #48	@ 0x30
 800c6b2:	d004      	beq.n	800c6be <HAL_TIM_ConfigClockSource+0x8a>
 800c6b4:	f241 5151 	movw	r1, #5457	@ 0x1551
 800c6b8:	4893      	ldr	r0, [pc, #588]	@ (800c908 <HAL_TIM_ConfigClockSource+0x2d4>)
 800c6ba:	f7fa f9bb 	bl	8006a34 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	689b      	ldr	r3, [r3, #8]
 800c6c4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c6c6:	68ba      	ldr	r2, [r7, #8]
 800c6c8:	4b90      	ldr	r3, [pc, #576]	@ (800c90c <HAL_TIM_ConfigClockSource+0x2d8>)
 800c6ca:	4013      	ands	r3, r2
 800c6cc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c6d4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	68ba      	ldr	r2, [r7, #8]
 800c6dc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c6e6:	f000 812d 	beq.w	800c944 <HAL_TIM_ConfigClockSource+0x310>
 800c6ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c6ee:	f200 82d5 	bhi.w	800cc9c <HAL_TIM_ConfigClockSource+0x668>
 800c6f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c6f6:	d02e      	beq.n	800c756 <HAL_TIM_ConfigClockSource+0x122>
 800c6f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c6fc:	f200 82ce 	bhi.w	800cc9c <HAL_TIM_ConfigClockSource+0x668>
 800c700:	2b70      	cmp	r3, #112	@ 0x70
 800c702:	f000 8082 	beq.w	800c80a <HAL_TIM_ConfigClockSource+0x1d6>
 800c706:	2b70      	cmp	r3, #112	@ 0x70
 800c708:	f200 82c8 	bhi.w	800cc9c <HAL_TIM_ConfigClockSource+0x668>
 800c70c:	2b60      	cmp	r3, #96	@ 0x60
 800c70e:	f000 81e0 	beq.w	800cad2 <HAL_TIM_ConfigClockSource+0x49e>
 800c712:	2b60      	cmp	r3, #96	@ 0x60
 800c714:	f200 82c2 	bhi.w	800cc9c <HAL_TIM_ConfigClockSource+0x668>
 800c718:	2b50      	cmp	r3, #80	@ 0x50
 800c71a:	f000 8184 	beq.w	800ca26 <HAL_TIM_ConfigClockSource+0x3f2>
 800c71e:	2b50      	cmp	r3, #80	@ 0x50
 800c720:	f200 82bc 	bhi.w	800cc9c <HAL_TIM_ConfigClockSource+0x668>
 800c724:	2b40      	cmp	r3, #64	@ 0x40
 800c726:	f000 8237 	beq.w	800cb98 <HAL_TIM_ConfigClockSource+0x564>
 800c72a:	2b40      	cmp	r3, #64	@ 0x40
 800c72c:	f200 82b6 	bhi.w	800cc9c <HAL_TIM_ConfigClockSource+0x668>
 800c730:	2b30      	cmp	r3, #48	@ 0x30
 800c732:	f000 8287 	beq.w	800cc44 <HAL_TIM_ConfigClockSource+0x610>
 800c736:	2b30      	cmp	r3, #48	@ 0x30
 800c738:	f200 82b0 	bhi.w	800cc9c <HAL_TIM_ConfigClockSource+0x668>
 800c73c:	2b20      	cmp	r3, #32
 800c73e:	f000 8281 	beq.w	800cc44 <HAL_TIM_ConfigClockSource+0x610>
 800c742:	2b20      	cmp	r3, #32
 800c744:	f200 82aa 	bhi.w	800cc9c <HAL_TIM_ConfigClockSource+0x668>
 800c748:	2b00      	cmp	r3, #0
 800c74a:	f000 827b 	beq.w	800cc44 <HAL_TIM_ConfigClockSource+0x610>
 800c74e:	2b10      	cmp	r3, #16
 800c750:	f000 8278 	beq.w	800cc44 <HAL_TIM_ConfigClockSource+0x610>
 800c754:	e2a2      	b.n	800cc9c <HAL_TIM_ConfigClockSource+0x668>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4a6d      	ldr	r2, [pc, #436]	@ (800c910 <HAL_TIM_ConfigClockSource+0x2dc>)
 800c75c:	4293      	cmp	r3, r2
 800c75e:	f000 82a0 	beq.w	800cca2 <HAL_TIM_ConfigClockSource+0x66e>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c76a:	f000 829a 	beq.w	800cca2 <HAL_TIM_ConfigClockSource+0x66e>
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	4a68      	ldr	r2, [pc, #416]	@ (800c914 <HAL_TIM_ConfigClockSource+0x2e0>)
 800c774:	4293      	cmp	r3, r2
 800c776:	f000 8294 	beq.w	800cca2 <HAL_TIM_ConfigClockSource+0x66e>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4a66      	ldr	r2, [pc, #408]	@ (800c918 <HAL_TIM_ConfigClockSource+0x2e4>)
 800c780:	4293      	cmp	r3, r2
 800c782:	f000 828e 	beq.w	800cca2 <HAL_TIM_ConfigClockSource+0x66e>
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	4a64      	ldr	r2, [pc, #400]	@ (800c91c <HAL_TIM_ConfigClockSource+0x2e8>)
 800c78c:	4293      	cmp	r3, r2
 800c78e:	f000 8288 	beq.w	800cca2 <HAL_TIM_ConfigClockSource+0x66e>
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	4a62      	ldr	r2, [pc, #392]	@ (800c920 <HAL_TIM_ConfigClockSource+0x2ec>)
 800c798:	4293      	cmp	r3, r2
 800c79a:	f000 8282 	beq.w	800cca2 <HAL_TIM_ConfigClockSource+0x66e>
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	4a60      	ldr	r2, [pc, #384]	@ (800c924 <HAL_TIM_ConfigClockSource+0x2f0>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	f000 827c 	beq.w	800cca2 <HAL_TIM_ConfigClockSource+0x66e>
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	4a5e      	ldr	r2, [pc, #376]	@ (800c928 <HAL_TIM_ConfigClockSource+0x2f4>)
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	f000 8276 	beq.w	800cca2 <HAL_TIM_ConfigClockSource+0x66e>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	4a5c      	ldr	r2, [pc, #368]	@ (800c92c <HAL_TIM_ConfigClockSource+0x2f8>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	f000 8270 	beq.w	800cca2 <HAL_TIM_ConfigClockSource+0x66e>
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	4a5a      	ldr	r2, [pc, #360]	@ (800c930 <HAL_TIM_ConfigClockSource+0x2fc>)
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	f000 826a 	beq.w	800cca2 <HAL_TIM_ConfigClockSource+0x66e>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	4a58      	ldr	r2, [pc, #352]	@ (800c934 <HAL_TIM_ConfigClockSource+0x300>)
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	f000 8264 	beq.w	800cca2 <HAL_TIM_ConfigClockSource+0x66e>
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	4a56      	ldr	r2, [pc, #344]	@ (800c938 <HAL_TIM_ConfigClockSource+0x304>)
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	f000 825e 	beq.w	800cca2 <HAL_TIM_ConfigClockSource+0x66e>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	4a54      	ldr	r2, [pc, #336]	@ (800c93c <HAL_TIM_ConfigClockSource+0x308>)
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	f000 8258 	beq.w	800cca2 <HAL_TIM_ConfigClockSource+0x66e>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	4a52      	ldr	r2, [pc, #328]	@ (800c940 <HAL_TIM_ConfigClockSource+0x30c>)
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	f000 8252 	beq.w	800cca2 <HAL_TIM_ConfigClockSource+0x66e>
 800c7fe:	f241 515d 	movw	r1, #5469	@ 0x155d
 800c802:	4841      	ldr	r0, [pc, #260]	@ (800c908 <HAL_TIM_ConfigClockSource+0x2d4>)
 800c804:	f7fa f916 	bl	8006a34 <assert_failed>
      break;
 800c808:	e24b      	b.n	800cca2 <HAL_TIM_ConfigClockSource+0x66e>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4a40      	ldr	r2, [pc, #256]	@ (800c910 <HAL_TIM_ConfigClockSource+0x2dc>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d027      	beq.n	800c864 <HAL_TIM_ConfigClockSource+0x230>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c81c:	d022      	beq.n	800c864 <HAL_TIM_ConfigClockSource+0x230>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	4a3c      	ldr	r2, [pc, #240]	@ (800c914 <HAL_TIM_ConfigClockSource+0x2e0>)
 800c824:	4293      	cmp	r3, r2
 800c826:	d01d      	beq.n	800c864 <HAL_TIM_ConfigClockSource+0x230>
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4a3a      	ldr	r2, [pc, #232]	@ (800c918 <HAL_TIM_ConfigClockSource+0x2e4>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d018      	beq.n	800c864 <HAL_TIM_ConfigClockSource+0x230>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	4a39      	ldr	r2, [pc, #228]	@ (800c91c <HAL_TIM_ConfigClockSource+0x2e8>)
 800c838:	4293      	cmp	r3, r2
 800c83a:	d013      	beq.n	800c864 <HAL_TIM_ConfigClockSource+0x230>
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4a39      	ldr	r2, [pc, #228]	@ (800c928 <HAL_TIM_ConfigClockSource+0x2f4>)
 800c842:	4293      	cmp	r3, r2
 800c844:	d00e      	beq.n	800c864 <HAL_TIM_ConfigClockSource+0x230>
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	4a38      	ldr	r2, [pc, #224]	@ (800c92c <HAL_TIM_ConfigClockSource+0x2f8>)
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d009      	beq.n	800c864 <HAL_TIM_ConfigClockSource+0x230>
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	4a38      	ldr	r2, [pc, #224]	@ (800c938 <HAL_TIM_ConfigClockSource+0x304>)
 800c856:	4293      	cmp	r3, r2
 800c858:	d004      	beq.n	800c864 <HAL_TIM_ConfigClockSource+0x230>
 800c85a:	f241 5164 	movw	r1, #5476	@ 0x1564
 800c85e:	482a      	ldr	r0, [pc, #168]	@ (800c908 <HAL_TIM_ConfigClockSource+0x2d4>)
 800c860:	f7fa f8e8 	bl	8006a34 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	689b      	ldr	r3, [r3, #8]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d013      	beq.n	800c894 <HAL_TIM_ConfigClockSource+0x260>
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	689b      	ldr	r3, [r3, #8]
 800c870:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c874:	d00e      	beq.n	800c894 <HAL_TIM_ConfigClockSource+0x260>
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	689b      	ldr	r3, [r3, #8]
 800c87a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c87e:	d009      	beq.n	800c894 <HAL_TIM_ConfigClockSource+0x260>
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	689b      	ldr	r3, [r3, #8]
 800c884:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c888:	d004      	beq.n	800c894 <HAL_TIM_ConfigClockSource+0x260>
 800c88a:	f241 5167 	movw	r1, #5479	@ 0x1567
 800c88e:	481e      	ldr	r0, [pc, #120]	@ (800c908 <HAL_TIM_ConfigClockSource+0x2d4>)
 800c890:	f7fa f8d0 	bl	8006a34 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c89c:	d014      	beq.n	800c8c8 <HAL_TIM_ConfigClockSource+0x294>
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d010      	beq.n	800c8c8 <HAL_TIM_ConfigClockSource+0x294>
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	685b      	ldr	r3, [r3, #4]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d00c      	beq.n	800c8c8 <HAL_TIM_ConfigClockSource+0x294>
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	685b      	ldr	r3, [r3, #4]
 800c8b2:	2b02      	cmp	r3, #2
 800c8b4:	d008      	beq.n	800c8c8 <HAL_TIM_ConfigClockSource+0x294>
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	685b      	ldr	r3, [r3, #4]
 800c8ba:	2b0a      	cmp	r3, #10
 800c8bc:	d004      	beq.n	800c8c8 <HAL_TIM_ConfigClockSource+0x294>
 800c8be:	f241 5168 	movw	r1, #5480	@ 0x1568
 800c8c2:	4811      	ldr	r0, [pc, #68]	@ (800c908 <HAL_TIM_ConfigClockSource+0x2d4>)
 800c8c4:	f7fa f8b6 	bl	8006a34 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	68db      	ldr	r3, [r3, #12]
 800c8cc:	2b0f      	cmp	r3, #15
 800c8ce:	d904      	bls.n	800c8da <HAL_TIM_ConfigClockSource+0x2a6>
 800c8d0:	f241 5169 	movw	r1, #5481	@ 0x1569
 800c8d4:	480c      	ldr	r0, [pc, #48]	@ (800c908 <HAL_TIM_ConfigClockSource+0x2d4>)
 800c8d6:	f7fa f8ad 	bl	8006a34 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c8ea:	f001 f953 	bl	800db94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	689b      	ldr	r3, [r3, #8]
 800c8f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c8fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	68ba      	ldr	r2, [r7, #8]
 800c904:	609a      	str	r2, [r3, #8]
      break;
 800c906:	e1cd      	b.n	800cca4 <HAL_TIM_ConfigClockSource+0x670>
 800c908:	08018a30 	.word	0x08018a30
 800c90c:	fffeff88 	.word	0xfffeff88
 800c910:	40010000 	.word	0x40010000
 800c914:	40000400 	.word	0x40000400
 800c918:	40000800 	.word	0x40000800
 800c91c:	40000c00 	.word	0x40000c00
 800c920:	40001000 	.word	0x40001000
 800c924:	40001400 	.word	0x40001400
 800c928:	40010400 	.word	0x40010400
 800c92c:	40014000 	.word	0x40014000
 800c930:	40014400 	.word	0x40014400
 800c934:	40014800 	.word	0x40014800
 800c938:	40001800 	.word	0x40001800
 800c93c:	40001c00 	.word	0x40001c00
 800c940:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4a8d      	ldr	r2, [pc, #564]	@ (800cb80 <HAL_TIM_ConfigClockSource+0x54c>)
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d01d      	beq.n	800c98a <HAL_TIM_ConfigClockSource+0x356>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c956:	d018      	beq.n	800c98a <HAL_TIM_ConfigClockSource+0x356>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	4a89      	ldr	r2, [pc, #548]	@ (800cb84 <HAL_TIM_ConfigClockSource+0x550>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d013      	beq.n	800c98a <HAL_TIM_ConfigClockSource+0x356>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	4a88      	ldr	r2, [pc, #544]	@ (800cb88 <HAL_TIM_ConfigClockSource+0x554>)
 800c968:	4293      	cmp	r3, r2
 800c96a:	d00e      	beq.n	800c98a <HAL_TIM_ConfigClockSource+0x356>
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	4a86      	ldr	r2, [pc, #536]	@ (800cb8c <HAL_TIM_ConfigClockSource+0x558>)
 800c972:	4293      	cmp	r3, r2
 800c974:	d009      	beq.n	800c98a <HAL_TIM_ConfigClockSource+0x356>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	4a85      	ldr	r2, [pc, #532]	@ (800cb90 <HAL_TIM_ConfigClockSource+0x55c>)
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d004      	beq.n	800c98a <HAL_TIM_ConfigClockSource+0x356>
 800c980:	f241 517c 	movw	r1, #5500	@ 0x157c
 800c984:	4883      	ldr	r0, [pc, #524]	@ (800cb94 <HAL_TIM_ConfigClockSource+0x560>)
 800c986:	f7fa f855 	bl	8006a34 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	689b      	ldr	r3, [r3, #8]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d013      	beq.n	800c9ba <HAL_TIM_ConfigClockSource+0x386>
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	689b      	ldr	r3, [r3, #8]
 800c996:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c99a:	d00e      	beq.n	800c9ba <HAL_TIM_ConfigClockSource+0x386>
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	689b      	ldr	r3, [r3, #8]
 800c9a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c9a4:	d009      	beq.n	800c9ba <HAL_TIM_ConfigClockSource+0x386>
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	689b      	ldr	r3, [r3, #8]
 800c9aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c9ae:	d004      	beq.n	800c9ba <HAL_TIM_ConfigClockSource+0x386>
 800c9b0:	f241 517f 	movw	r1, #5503	@ 0x157f
 800c9b4:	4877      	ldr	r0, [pc, #476]	@ (800cb94 <HAL_TIM_ConfigClockSource+0x560>)
 800c9b6:	f7fa f83d 	bl	8006a34 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	685b      	ldr	r3, [r3, #4]
 800c9be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c9c2:	d014      	beq.n	800c9ee <HAL_TIM_ConfigClockSource+0x3ba>
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	685b      	ldr	r3, [r3, #4]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d010      	beq.n	800c9ee <HAL_TIM_ConfigClockSource+0x3ba>
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d00c      	beq.n	800c9ee <HAL_TIM_ConfigClockSource+0x3ba>
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	2b02      	cmp	r3, #2
 800c9da:	d008      	beq.n	800c9ee <HAL_TIM_ConfigClockSource+0x3ba>
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	2b0a      	cmp	r3, #10
 800c9e2:	d004      	beq.n	800c9ee <HAL_TIM_ConfigClockSource+0x3ba>
 800c9e4:	f44f 51ac 	mov.w	r1, #5504	@ 0x1580
 800c9e8:	486a      	ldr	r0, [pc, #424]	@ (800cb94 <HAL_TIM_ConfigClockSource+0x560>)
 800c9ea:	f7fa f823 	bl	8006a34 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	68db      	ldr	r3, [r3, #12]
 800c9f2:	2b0f      	cmp	r3, #15
 800c9f4:	d904      	bls.n	800ca00 <HAL_TIM_ConfigClockSource+0x3cc>
 800c9f6:	f241 5181 	movw	r1, #5505	@ 0x1581
 800c9fa:	4866      	ldr	r0, [pc, #408]	@ (800cb94 <HAL_TIM_ConfigClockSource+0x560>)
 800c9fc:	f7fa f81a 	bl	8006a34 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ca10:	f001 f8c0 	bl	800db94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	689a      	ldr	r2, [r3, #8]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ca22:	609a      	str	r2, [r3, #8]
      break;
 800ca24:	e13e      	b.n	800cca4 <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	4a55      	ldr	r2, [pc, #340]	@ (800cb80 <HAL_TIM_ConfigClockSource+0x54c>)
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d01d      	beq.n	800ca6c <HAL_TIM_ConfigClockSource+0x438>
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca38:	d018      	beq.n	800ca6c <HAL_TIM_ConfigClockSource+0x438>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	4a51      	ldr	r2, [pc, #324]	@ (800cb84 <HAL_TIM_ConfigClockSource+0x550>)
 800ca40:	4293      	cmp	r3, r2
 800ca42:	d013      	beq.n	800ca6c <HAL_TIM_ConfigClockSource+0x438>
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	4a4f      	ldr	r2, [pc, #316]	@ (800cb88 <HAL_TIM_ConfigClockSource+0x554>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d00e      	beq.n	800ca6c <HAL_TIM_ConfigClockSource+0x438>
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	4a4e      	ldr	r2, [pc, #312]	@ (800cb8c <HAL_TIM_ConfigClockSource+0x558>)
 800ca54:	4293      	cmp	r3, r2
 800ca56:	d009      	beq.n	800ca6c <HAL_TIM_ConfigClockSource+0x438>
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	4a4c      	ldr	r2, [pc, #304]	@ (800cb90 <HAL_TIM_ConfigClockSource+0x55c>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d004      	beq.n	800ca6c <HAL_TIM_ConfigClockSource+0x438>
 800ca62:	f241 5190 	movw	r1, #5520	@ 0x1590
 800ca66:	484b      	ldr	r0, [pc, #300]	@ (800cb94 <HAL_TIM_ConfigClockSource+0x560>)
 800ca68:	f7f9 ffe4 	bl	8006a34 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ca74:	d014      	beq.n	800caa0 <HAL_TIM_ConfigClockSource+0x46c>
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	685b      	ldr	r3, [r3, #4]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d010      	beq.n	800caa0 <HAL_TIM_ConfigClockSource+0x46c>
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	685b      	ldr	r3, [r3, #4]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d00c      	beq.n	800caa0 <HAL_TIM_ConfigClockSource+0x46c>
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	685b      	ldr	r3, [r3, #4]
 800ca8a:	2b02      	cmp	r3, #2
 800ca8c:	d008      	beq.n	800caa0 <HAL_TIM_ConfigClockSource+0x46c>
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	2b0a      	cmp	r3, #10
 800ca94:	d004      	beq.n	800caa0 <HAL_TIM_ConfigClockSource+0x46c>
 800ca96:	f241 5193 	movw	r1, #5523	@ 0x1593
 800ca9a:	483e      	ldr	r0, [pc, #248]	@ (800cb94 <HAL_TIM_ConfigClockSource+0x560>)
 800ca9c:	f7f9 ffca 	bl	8006a34 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	68db      	ldr	r3, [r3, #12]
 800caa4:	2b0f      	cmp	r3, #15
 800caa6:	d904      	bls.n	800cab2 <HAL_TIM_ConfigClockSource+0x47e>
 800caa8:	f241 5194 	movw	r1, #5524	@ 0x1594
 800caac:	4839      	ldr	r0, [pc, #228]	@ (800cb94 <HAL_TIM_ConfigClockSource+0x560>)
 800caae:	f7f9 ffc1 	bl	8006a34 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cabe:	461a      	mov	r2, r3
 800cac0:	f000 ffee 	bl	800daa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	2150      	movs	r1, #80	@ 0x50
 800caca:	4618      	mov	r0, r3
 800cacc:	f001 f847 	bl	800db5e <TIM_ITRx_SetConfig>
      break;
 800cad0:	e0e8      	b.n	800cca4 <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	4a2a      	ldr	r2, [pc, #168]	@ (800cb80 <HAL_TIM_ConfigClockSource+0x54c>)
 800cad8:	4293      	cmp	r3, r2
 800cada:	d01d      	beq.n	800cb18 <HAL_TIM_ConfigClockSource+0x4e4>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cae4:	d018      	beq.n	800cb18 <HAL_TIM_ConfigClockSource+0x4e4>
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	4a26      	ldr	r2, [pc, #152]	@ (800cb84 <HAL_TIM_ConfigClockSource+0x550>)
 800caec:	4293      	cmp	r3, r2
 800caee:	d013      	beq.n	800cb18 <HAL_TIM_ConfigClockSource+0x4e4>
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	4a24      	ldr	r2, [pc, #144]	@ (800cb88 <HAL_TIM_ConfigClockSource+0x554>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d00e      	beq.n	800cb18 <HAL_TIM_ConfigClockSource+0x4e4>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	4a23      	ldr	r2, [pc, #140]	@ (800cb8c <HAL_TIM_ConfigClockSource+0x558>)
 800cb00:	4293      	cmp	r3, r2
 800cb02:	d009      	beq.n	800cb18 <HAL_TIM_ConfigClockSource+0x4e4>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	4a21      	ldr	r2, [pc, #132]	@ (800cb90 <HAL_TIM_ConfigClockSource+0x55c>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d004      	beq.n	800cb18 <HAL_TIM_ConfigClockSource+0x4e4>
 800cb0e:	f44f 51ad 	mov.w	r1, #5536	@ 0x15a0
 800cb12:	4820      	ldr	r0, [pc, #128]	@ (800cb94 <HAL_TIM_ConfigClockSource+0x560>)
 800cb14:	f7f9 ff8e 	bl	8006a34 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cb20:	d014      	beq.n	800cb4c <HAL_TIM_ConfigClockSource+0x518>
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d010      	beq.n	800cb4c <HAL_TIM_ConfigClockSource+0x518>
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d00c      	beq.n	800cb4c <HAL_TIM_ConfigClockSource+0x518>
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	685b      	ldr	r3, [r3, #4]
 800cb36:	2b02      	cmp	r3, #2
 800cb38:	d008      	beq.n	800cb4c <HAL_TIM_ConfigClockSource+0x518>
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	685b      	ldr	r3, [r3, #4]
 800cb3e:	2b0a      	cmp	r3, #10
 800cb40:	d004      	beq.n	800cb4c <HAL_TIM_ConfigClockSource+0x518>
 800cb42:	f241 51a3 	movw	r1, #5539	@ 0x15a3
 800cb46:	4813      	ldr	r0, [pc, #76]	@ (800cb94 <HAL_TIM_ConfigClockSource+0x560>)
 800cb48:	f7f9 ff74 	bl	8006a34 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	68db      	ldr	r3, [r3, #12]
 800cb50:	2b0f      	cmp	r3, #15
 800cb52:	d904      	bls.n	800cb5e <HAL_TIM_ConfigClockSource+0x52a>
 800cb54:	f241 51a4 	movw	r1, #5540	@ 0x15a4
 800cb58:	480e      	ldr	r0, [pc, #56]	@ (800cb94 <HAL_TIM_ConfigClockSource+0x560>)
 800cb5a:	f7f9 ff6b 	bl	8006a34 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cb6a:	461a      	mov	r2, r3
 800cb6c:	f000 ffc7 	bl	800dafe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	2160      	movs	r1, #96	@ 0x60
 800cb76:	4618      	mov	r0, r3
 800cb78:	f000 fff1 	bl	800db5e <TIM_ITRx_SetConfig>
      break;
 800cb7c:	e092      	b.n	800cca4 <HAL_TIM_ConfigClockSource+0x670>
 800cb7e:	bf00      	nop
 800cb80:	40010000 	.word	0x40010000
 800cb84:	40000400 	.word	0x40000400
 800cb88:	40000800 	.word	0x40000800
 800cb8c:	40000c00 	.word	0x40000c00
 800cb90:	40010400 	.word	0x40010400
 800cb94:	08018a30 	.word	0x08018a30
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4a48      	ldr	r2, [pc, #288]	@ (800ccc0 <HAL_TIM_ConfigClockSource+0x68c>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d01d      	beq.n	800cbde <HAL_TIM_ConfigClockSource+0x5aa>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cbaa:	d018      	beq.n	800cbde <HAL_TIM_ConfigClockSource+0x5aa>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a44      	ldr	r2, [pc, #272]	@ (800ccc4 <HAL_TIM_ConfigClockSource+0x690>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d013      	beq.n	800cbde <HAL_TIM_ConfigClockSource+0x5aa>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	4a43      	ldr	r2, [pc, #268]	@ (800ccc8 <HAL_TIM_ConfigClockSource+0x694>)
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d00e      	beq.n	800cbde <HAL_TIM_ConfigClockSource+0x5aa>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	4a41      	ldr	r2, [pc, #260]	@ (800cccc <HAL_TIM_ConfigClockSource+0x698>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d009      	beq.n	800cbde <HAL_TIM_ConfigClockSource+0x5aa>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4a40      	ldr	r2, [pc, #256]	@ (800ccd0 <HAL_TIM_ConfigClockSource+0x69c>)
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d004      	beq.n	800cbde <HAL_TIM_ConfigClockSource+0x5aa>
 800cbd4:	f241 51b0 	movw	r1, #5552	@ 0x15b0
 800cbd8:	483e      	ldr	r0, [pc, #248]	@ (800ccd4 <HAL_TIM_ConfigClockSource+0x6a0>)
 800cbda:	f7f9 ff2b 	bl	8006a34 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	685b      	ldr	r3, [r3, #4]
 800cbe2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cbe6:	d014      	beq.n	800cc12 <HAL_TIM_ConfigClockSource+0x5de>
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d010      	beq.n	800cc12 <HAL_TIM_ConfigClockSource+0x5de>
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	685b      	ldr	r3, [r3, #4]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d00c      	beq.n	800cc12 <HAL_TIM_ConfigClockSource+0x5de>
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	2b02      	cmp	r3, #2
 800cbfe:	d008      	beq.n	800cc12 <HAL_TIM_ConfigClockSource+0x5de>
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	685b      	ldr	r3, [r3, #4]
 800cc04:	2b0a      	cmp	r3, #10
 800cc06:	d004      	beq.n	800cc12 <HAL_TIM_ConfigClockSource+0x5de>
 800cc08:	f241 51b3 	movw	r1, #5555	@ 0x15b3
 800cc0c:	4831      	ldr	r0, [pc, #196]	@ (800ccd4 <HAL_TIM_ConfigClockSource+0x6a0>)
 800cc0e:	f7f9 ff11 	bl	8006a34 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	68db      	ldr	r3, [r3, #12]
 800cc16:	2b0f      	cmp	r3, #15
 800cc18:	d904      	bls.n	800cc24 <HAL_TIM_ConfigClockSource+0x5f0>
 800cc1a:	f241 51b4 	movw	r1, #5556	@ 0x15b4
 800cc1e:	482d      	ldr	r0, [pc, #180]	@ (800ccd4 <HAL_TIM_ConfigClockSource+0x6a0>)
 800cc20:	f7f9 ff08 	bl	8006a34 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc30:	461a      	mov	r2, r3
 800cc32:	f000 ff35 	bl	800daa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	2140      	movs	r1, #64	@ 0x40
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f000 ff8e 	bl	800db5e <TIM_ITRx_SetConfig>
      break;
 800cc42:	e02f      	b.n	800cca4 <HAL_TIM_ConfigClockSource+0x670>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	4a1d      	ldr	r2, [pc, #116]	@ (800ccc0 <HAL_TIM_ConfigClockSource+0x68c>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d01d      	beq.n	800cc8a <HAL_TIM_ConfigClockSource+0x656>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc56:	d018      	beq.n	800cc8a <HAL_TIM_ConfigClockSource+0x656>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4a19      	ldr	r2, [pc, #100]	@ (800ccc4 <HAL_TIM_ConfigClockSource+0x690>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d013      	beq.n	800cc8a <HAL_TIM_ConfigClockSource+0x656>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	4a18      	ldr	r2, [pc, #96]	@ (800ccc8 <HAL_TIM_ConfigClockSource+0x694>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d00e      	beq.n	800cc8a <HAL_TIM_ConfigClockSource+0x656>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	4a16      	ldr	r2, [pc, #88]	@ (800cccc <HAL_TIM_ConfigClockSource+0x698>)
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d009      	beq.n	800cc8a <HAL_TIM_ConfigClockSource+0x656>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	4a15      	ldr	r2, [pc, #84]	@ (800ccd0 <HAL_TIM_ConfigClockSource+0x69c>)
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d004      	beq.n	800cc8a <HAL_TIM_ConfigClockSource+0x656>
 800cc80:	f241 51c3 	movw	r1, #5571	@ 0x15c3
 800cc84:	4813      	ldr	r0, [pc, #76]	@ (800ccd4 <HAL_TIM_ConfigClockSource+0x6a0>)
 800cc86:	f7f9 fed5 	bl	8006a34 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681a      	ldr	r2, [r3, #0]
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	4619      	mov	r1, r3
 800cc94:	4610      	mov	r0, r2
 800cc96:	f000 ff62 	bl	800db5e <TIM_ITRx_SetConfig>
      break;
 800cc9a:	e003      	b.n	800cca4 <HAL_TIM_ConfigClockSource+0x670>
    }

    default:
      status = HAL_ERROR;
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	73fb      	strb	r3, [r7, #15]
      break;
 800cca0:	e000      	b.n	800cca4 <HAL_TIM_ConfigClockSource+0x670>
      break;
 800cca2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2201      	movs	r2, #1
 800cca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ccb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3710      	adds	r7, #16
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}
 800ccbe:	bf00      	nop
 800ccc0:	40010000 	.word	0x40010000
 800ccc4:	40000400 	.word	0x40000400
 800ccc8:	40000800 	.word	0x40000800
 800cccc:	40000c00 	.word	0x40000c00
 800ccd0:	40010400 	.word	0x40010400
 800ccd4:	08018a30 	.word	0x08018a30

0800ccd8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b082      	sub	sp, #8
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	4a55      	ldr	r2, [pc, #340]	@ (800ce3c <HAL_TIM_SlaveConfigSynchro+0x164>)
 800cce8:	4293      	cmp	r3, r2
 800ccea:	d027      	beq.n	800cd3c <HAL_TIM_SlaveConfigSynchro+0x64>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ccf4:	d022      	beq.n	800cd3c <HAL_TIM_SlaveConfigSynchro+0x64>
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	4a51      	ldr	r2, [pc, #324]	@ (800ce40 <HAL_TIM_SlaveConfigSynchro+0x168>)
 800ccfc:	4293      	cmp	r3, r2
 800ccfe:	d01d      	beq.n	800cd3c <HAL_TIM_SlaveConfigSynchro+0x64>
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	4a4f      	ldr	r2, [pc, #316]	@ (800ce44 <HAL_TIM_SlaveConfigSynchro+0x16c>)
 800cd06:	4293      	cmp	r3, r2
 800cd08:	d018      	beq.n	800cd3c <HAL_TIM_SlaveConfigSynchro+0x64>
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	4a4e      	ldr	r2, [pc, #312]	@ (800ce48 <HAL_TIM_SlaveConfigSynchro+0x170>)
 800cd10:	4293      	cmp	r3, r2
 800cd12:	d013      	beq.n	800cd3c <HAL_TIM_SlaveConfigSynchro+0x64>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	4a4c      	ldr	r2, [pc, #304]	@ (800ce4c <HAL_TIM_SlaveConfigSynchro+0x174>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d00e      	beq.n	800cd3c <HAL_TIM_SlaveConfigSynchro+0x64>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	4a4b      	ldr	r2, [pc, #300]	@ (800ce50 <HAL_TIM_SlaveConfigSynchro+0x178>)
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d009      	beq.n	800cd3c <HAL_TIM_SlaveConfigSynchro+0x64>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4a49      	ldr	r2, [pc, #292]	@ (800ce54 <HAL_TIM_SlaveConfigSynchro+0x17c>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d004      	beq.n	800cd3c <HAL_TIM_SlaveConfigSynchro+0x64>
 800cd32:	f241 6103 	movw	r1, #5635	@ 0x1603
 800cd36:	4848      	ldr	r0, [pc, #288]	@ (800ce58 <HAL_TIM_SlaveConfigSynchro+0x180>)
 800cd38:	f7f9 fe7c 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d019      	beq.n	800cd78 <HAL_TIM_SlaveConfigSynchro+0xa0>
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	2b04      	cmp	r3, #4
 800cd4a:	d015      	beq.n	800cd78 <HAL_TIM_SlaveConfigSynchro+0xa0>
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	2b05      	cmp	r3, #5
 800cd52:	d011      	beq.n	800cd78 <HAL_TIM_SlaveConfigSynchro+0xa0>
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	2b06      	cmp	r3, #6
 800cd5a:	d00d      	beq.n	800cd78 <HAL_TIM_SlaveConfigSynchro+0xa0>
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	2b07      	cmp	r3, #7
 800cd62:	d009      	beq.n	800cd78 <HAL_TIM_SlaveConfigSynchro+0xa0>
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd6c:	d004      	beq.n	800cd78 <HAL_TIM_SlaveConfigSynchro+0xa0>
 800cd6e:	f241 6104 	movw	r1, #5636	@ 0x1604
 800cd72:	4839      	ldr	r0, [pc, #228]	@ (800ce58 <HAL_TIM_SlaveConfigSynchro+0x180>)
 800cd74:	f7f9 fe5e 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	685b      	ldr	r3, [r3, #4]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d020      	beq.n	800cdc2 <HAL_TIM_SlaveConfigSynchro+0xea>
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	2b10      	cmp	r3, #16
 800cd86:	d01c      	beq.n	800cdc2 <HAL_TIM_SlaveConfigSynchro+0xea>
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	2b20      	cmp	r3, #32
 800cd8e:	d018      	beq.n	800cdc2 <HAL_TIM_SlaveConfigSynchro+0xea>
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	685b      	ldr	r3, [r3, #4]
 800cd94:	2b30      	cmp	r3, #48	@ 0x30
 800cd96:	d014      	beq.n	800cdc2 <HAL_TIM_SlaveConfigSynchro+0xea>
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	685b      	ldr	r3, [r3, #4]
 800cd9c:	2b40      	cmp	r3, #64	@ 0x40
 800cd9e:	d010      	beq.n	800cdc2 <HAL_TIM_SlaveConfigSynchro+0xea>
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	685b      	ldr	r3, [r3, #4]
 800cda4:	2b50      	cmp	r3, #80	@ 0x50
 800cda6:	d00c      	beq.n	800cdc2 <HAL_TIM_SlaveConfigSynchro+0xea>
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	2b60      	cmp	r3, #96	@ 0x60
 800cdae:	d008      	beq.n	800cdc2 <HAL_TIM_SlaveConfigSynchro+0xea>
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	2b70      	cmp	r3, #112	@ 0x70
 800cdb6:	d004      	beq.n	800cdc2 <HAL_TIM_SlaveConfigSynchro+0xea>
 800cdb8:	f241 6105 	movw	r1, #5637	@ 0x1605
 800cdbc:	4826      	ldr	r0, [pc, #152]	@ (800ce58 <HAL_TIM_SlaveConfigSynchro+0x180>)
 800cdbe:	f7f9 fe39 	bl	8006a34 <assert_failed>

  __HAL_LOCK(htim);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cdc8:	2b01      	cmp	r3, #1
 800cdca:	d101      	bne.n	800cdd0 <HAL_TIM_SlaveConfigSynchro+0xf8>
 800cdcc:	2302      	movs	r3, #2
 800cdce:	e031      	b.n	800ce34 <HAL_TIM_SlaveConfigSynchro+0x15c>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2202      	movs	r2, #2
 800cddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800cde0:	6839      	ldr	r1, [r7, #0]
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f000 fbf6 	bl	800d5d4 <TIM_SlaveTimer_SetConfig>
 800cde8:	4603      	mov	r3, r0
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d009      	beq.n	800ce02 <HAL_TIM_SlaveConfigSynchro+0x12a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800cdfe:	2301      	movs	r3, #1
 800ce00:	e018      	b.n	800ce34 <HAL_TIM_SlaveConfigSynchro+0x15c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	68da      	ldr	r2, [r3, #12]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ce10:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	68da      	ldr	r2, [r3, #12]
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ce20:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2201      	movs	r2, #1
 800ce26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ce32:	2300      	movs	r3, #0
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	3708      	adds	r7, #8
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}
 800ce3c:	40010000 	.word	0x40010000
 800ce40:	40000400 	.word	0x40000400
 800ce44:	40000800 	.word	0x40000800
 800ce48:	40000c00 	.word	0x40000c00
 800ce4c:	40010400 	.word	0x40010400
 800ce50:	40014000 	.word	0x40014000
 800ce54:	40001800 	.word	0x40001800
 800ce58:	08018a30 	.word	0x08018a30

0800ce5c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b083      	sub	sp, #12
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ce64:	bf00      	nop
 800ce66:	370c      	adds	r7, #12
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6e:	4770      	bx	lr

0800ce70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ce70:	b480      	push	{r7}
 800ce72:	b083      	sub	sp, #12
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ce78:	bf00      	nop
 800ce7a:	370c      	adds	r7, #12
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce82:	4770      	bx	lr

0800ce84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ce84:	b480      	push	{r7}
 800ce86:	b083      	sub	sp, #12
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ce8c:	bf00      	nop
 800ce8e:	370c      	adds	r7, #12
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr

0800ce98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b083      	sub	sp, #12
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cea0:	bf00      	nop
 800cea2:	370c      	adds	r7, #12
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr

0800ceac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ceac:	b480      	push	{r7}
 800ceae:	b085      	sub	sp, #20
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	4a46      	ldr	r2, [pc, #280]	@ (800cfd8 <TIM_Base_SetConfig+0x12c>)
 800cec0:	4293      	cmp	r3, r2
 800cec2:	d013      	beq.n	800ceec <TIM_Base_SetConfig+0x40>
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ceca:	d00f      	beq.n	800ceec <TIM_Base_SetConfig+0x40>
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	4a43      	ldr	r2, [pc, #268]	@ (800cfdc <TIM_Base_SetConfig+0x130>)
 800ced0:	4293      	cmp	r3, r2
 800ced2:	d00b      	beq.n	800ceec <TIM_Base_SetConfig+0x40>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	4a42      	ldr	r2, [pc, #264]	@ (800cfe0 <TIM_Base_SetConfig+0x134>)
 800ced8:	4293      	cmp	r3, r2
 800ceda:	d007      	beq.n	800ceec <TIM_Base_SetConfig+0x40>
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	4a41      	ldr	r2, [pc, #260]	@ (800cfe4 <TIM_Base_SetConfig+0x138>)
 800cee0:	4293      	cmp	r3, r2
 800cee2:	d003      	beq.n	800ceec <TIM_Base_SetConfig+0x40>
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	4a40      	ldr	r2, [pc, #256]	@ (800cfe8 <TIM_Base_SetConfig+0x13c>)
 800cee8:	4293      	cmp	r3, r2
 800ceea:	d108      	bne.n	800cefe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	68fa      	ldr	r2, [r7, #12]
 800cefa:	4313      	orrs	r3, r2
 800cefc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	4a35      	ldr	r2, [pc, #212]	@ (800cfd8 <TIM_Base_SetConfig+0x12c>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d02b      	beq.n	800cf5e <TIM_Base_SetConfig+0xb2>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf0c:	d027      	beq.n	800cf5e <TIM_Base_SetConfig+0xb2>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	4a32      	ldr	r2, [pc, #200]	@ (800cfdc <TIM_Base_SetConfig+0x130>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d023      	beq.n	800cf5e <TIM_Base_SetConfig+0xb2>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	4a31      	ldr	r2, [pc, #196]	@ (800cfe0 <TIM_Base_SetConfig+0x134>)
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	d01f      	beq.n	800cf5e <TIM_Base_SetConfig+0xb2>
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	4a30      	ldr	r2, [pc, #192]	@ (800cfe4 <TIM_Base_SetConfig+0x138>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d01b      	beq.n	800cf5e <TIM_Base_SetConfig+0xb2>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	4a2f      	ldr	r2, [pc, #188]	@ (800cfe8 <TIM_Base_SetConfig+0x13c>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d017      	beq.n	800cf5e <TIM_Base_SetConfig+0xb2>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	4a2e      	ldr	r2, [pc, #184]	@ (800cfec <TIM_Base_SetConfig+0x140>)
 800cf32:	4293      	cmp	r3, r2
 800cf34:	d013      	beq.n	800cf5e <TIM_Base_SetConfig+0xb2>
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	4a2d      	ldr	r2, [pc, #180]	@ (800cff0 <TIM_Base_SetConfig+0x144>)
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	d00f      	beq.n	800cf5e <TIM_Base_SetConfig+0xb2>
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	4a2c      	ldr	r2, [pc, #176]	@ (800cff4 <TIM_Base_SetConfig+0x148>)
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d00b      	beq.n	800cf5e <TIM_Base_SetConfig+0xb2>
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	4a2b      	ldr	r2, [pc, #172]	@ (800cff8 <TIM_Base_SetConfig+0x14c>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d007      	beq.n	800cf5e <TIM_Base_SetConfig+0xb2>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	4a2a      	ldr	r2, [pc, #168]	@ (800cffc <TIM_Base_SetConfig+0x150>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d003      	beq.n	800cf5e <TIM_Base_SetConfig+0xb2>
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	4a29      	ldr	r2, [pc, #164]	@ (800d000 <TIM_Base_SetConfig+0x154>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d108      	bne.n	800cf70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cf64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	68db      	ldr	r3, [r3, #12]
 800cf6a:	68fa      	ldr	r2, [r7, #12]
 800cf6c:	4313      	orrs	r3, r2
 800cf6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	695b      	ldr	r3, [r3, #20]
 800cf7a:	4313      	orrs	r3, r2
 800cf7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	68fa      	ldr	r2, [r7, #12]
 800cf82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	689a      	ldr	r2, [r3, #8]
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	681a      	ldr	r2, [r3, #0]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	4a10      	ldr	r2, [pc, #64]	@ (800cfd8 <TIM_Base_SetConfig+0x12c>)
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d003      	beq.n	800cfa4 <TIM_Base_SetConfig+0xf8>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	4a12      	ldr	r2, [pc, #72]	@ (800cfe8 <TIM_Base_SetConfig+0x13c>)
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	d103      	bne.n	800cfac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	691a      	ldr	r2, [r3, #16]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2201      	movs	r2, #1
 800cfb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	691b      	ldr	r3, [r3, #16]
 800cfb6:	f003 0301 	and.w	r3, r3, #1
 800cfba:	2b01      	cmp	r3, #1
 800cfbc:	d105      	bne.n	800cfca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	691b      	ldr	r3, [r3, #16]
 800cfc2:	f023 0201 	bic.w	r2, r3, #1
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	611a      	str	r2, [r3, #16]
  }
}
 800cfca:	bf00      	nop
 800cfcc:	3714      	adds	r7, #20
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd4:	4770      	bx	lr
 800cfd6:	bf00      	nop
 800cfd8:	40010000 	.word	0x40010000
 800cfdc:	40000400 	.word	0x40000400
 800cfe0:	40000800 	.word	0x40000800
 800cfe4:	40000c00 	.word	0x40000c00
 800cfe8:	40010400 	.word	0x40010400
 800cfec:	40014000 	.word	0x40014000
 800cff0:	40014400 	.word	0x40014400
 800cff4:	40014800 	.word	0x40014800
 800cff8:	40001800 	.word	0x40001800
 800cffc:	40001c00 	.word	0x40001c00
 800d000:	40002000 	.word	0x40002000

0800d004 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b086      	sub	sp, #24
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
 800d00c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6a1b      	ldr	r3, [r3, #32]
 800d012:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6a1b      	ldr	r3, [r3, #32]
 800d018:	f023 0201 	bic.w	r2, r3, #1
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	699b      	ldr	r3, [r3, #24]
 800d02a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d02c:	68fa      	ldr	r2, [r7, #12]
 800d02e:	4b3f      	ldr	r3, [pc, #252]	@ (800d12c <TIM_OC1_SetConfig+0x128>)
 800d030:	4013      	ands	r3, r2
 800d032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f023 0303 	bic.w	r3, r3, #3
 800d03a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	68fa      	ldr	r2, [r7, #12]
 800d042:	4313      	orrs	r3, r2
 800d044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	f023 0302 	bic.w	r3, r3, #2
 800d04c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	689b      	ldr	r3, [r3, #8]
 800d052:	697a      	ldr	r2, [r7, #20]
 800d054:	4313      	orrs	r3, r2
 800d056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	4a35      	ldr	r2, [pc, #212]	@ (800d130 <TIM_OC1_SetConfig+0x12c>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d003      	beq.n	800d068 <TIM_OC1_SetConfig+0x64>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	4a34      	ldr	r2, [pc, #208]	@ (800d134 <TIM_OC1_SetConfig+0x130>)
 800d064:	4293      	cmp	r3, r2
 800d066:	d119      	bne.n	800d09c <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	68db      	ldr	r3, [r3, #12]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d008      	beq.n	800d082 <TIM_OC1_SetConfig+0x7e>
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	68db      	ldr	r3, [r3, #12]
 800d074:	2b08      	cmp	r3, #8
 800d076:	d004      	beq.n	800d082 <TIM_OC1_SetConfig+0x7e>
 800d078:	f641 3169 	movw	r1, #7017	@ 0x1b69
 800d07c:	482e      	ldr	r0, [pc, #184]	@ (800d138 <TIM_OC1_SetConfig+0x134>)
 800d07e:	f7f9 fcd9 	bl	8006a34 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	f023 0308 	bic.w	r3, r3, #8
 800d088:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	68db      	ldr	r3, [r3, #12]
 800d08e:	697a      	ldr	r2, [r7, #20]
 800d090:	4313      	orrs	r3, r2
 800d092:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	f023 0304 	bic.w	r3, r3, #4
 800d09a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	4a24      	ldr	r2, [pc, #144]	@ (800d130 <TIM_OC1_SetConfig+0x12c>)
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	d003      	beq.n	800d0ac <TIM_OC1_SetConfig+0xa8>
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	4a23      	ldr	r2, [pc, #140]	@ (800d134 <TIM_OC1_SetConfig+0x130>)
 800d0a8:	4293      	cmp	r3, r2
 800d0aa:	d12d      	bne.n	800d108 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	699b      	ldr	r3, [r3, #24]
 800d0b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d0b4:	d008      	beq.n	800d0c8 <TIM_OC1_SetConfig+0xc4>
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	699b      	ldr	r3, [r3, #24]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d004      	beq.n	800d0c8 <TIM_OC1_SetConfig+0xc4>
 800d0be:	f641 3176 	movw	r1, #7030	@ 0x1b76
 800d0c2:	481d      	ldr	r0, [pc, #116]	@ (800d138 <TIM_OC1_SetConfig+0x134>)
 800d0c4:	f7f9 fcb6 	bl	8006a34 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	695b      	ldr	r3, [r3, #20]
 800d0cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d0d0:	d008      	beq.n	800d0e4 <TIM_OC1_SetConfig+0xe0>
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	695b      	ldr	r3, [r3, #20]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d004      	beq.n	800d0e4 <TIM_OC1_SetConfig+0xe0>
 800d0da:	f641 3177 	movw	r1, #7031	@ 0x1b77
 800d0de:	4816      	ldr	r0, [pc, #88]	@ (800d138 <TIM_OC1_SetConfig+0x134>)
 800d0e0:	f7f9 fca8 	bl	8006a34 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d0ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d0ec:	693b      	ldr	r3, [r7, #16]
 800d0ee:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d0f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	695b      	ldr	r3, [r3, #20]
 800d0f8:	693a      	ldr	r2, [r7, #16]
 800d0fa:	4313      	orrs	r3, r2
 800d0fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	699b      	ldr	r3, [r3, #24]
 800d102:	693a      	ldr	r2, [r7, #16]
 800d104:	4313      	orrs	r3, r2
 800d106:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	693a      	ldr	r2, [r7, #16]
 800d10c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	68fa      	ldr	r2, [r7, #12]
 800d112:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	685a      	ldr	r2, [r3, #4]
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	697a      	ldr	r2, [r7, #20]
 800d120:	621a      	str	r2, [r3, #32]
}
 800d122:	bf00      	nop
 800d124:	3718      	adds	r7, #24
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}
 800d12a:	bf00      	nop
 800d12c:	fffeff8f 	.word	0xfffeff8f
 800d130:	40010000 	.word	0x40010000
 800d134:	40010400 	.word	0x40010400
 800d138:	08018a30 	.word	0x08018a30

0800d13c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b086      	sub	sp, #24
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
 800d144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6a1b      	ldr	r3, [r3, #32]
 800d14a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6a1b      	ldr	r3, [r3, #32]
 800d150:	f023 0210 	bic.w	r2, r3, #16
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	685b      	ldr	r3, [r3, #4]
 800d15c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	699b      	ldr	r3, [r3, #24]
 800d162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d164:	68fa      	ldr	r2, [r7, #12]
 800d166:	4b41      	ldr	r3, [pc, #260]	@ (800d26c <TIM_OC2_SetConfig+0x130>)
 800d168:	4013      	ands	r3, r2
 800d16a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d172:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	021b      	lsls	r3, r3, #8
 800d17a:	68fa      	ldr	r2, [r7, #12]
 800d17c:	4313      	orrs	r3, r2
 800d17e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	f023 0320 	bic.w	r3, r3, #32
 800d186:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	689b      	ldr	r3, [r3, #8]
 800d18c:	011b      	lsls	r3, r3, #4
 800d18e:	697a      	ldr	r2, [r7, #20]
 800d190:	4313      	orrs	r3, r2
 800d192:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	4a36      	ldr	r2, [pc, #216]	@ (800d270 <TIM_OC2_SetConfig+0x134>)
 800d198:	4293      	cmp	r3, r2
 800d19a:	d003      	beq.n	800d1a4 <TIM_OC2_SetConfig+0x68>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	4a35      	ldr	r2, [pc, #212]	@ (800d274 <TIM_OC2_SetConfig+0x138>)
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	d11a      	bne.n	800d1da <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	68db      	ldr	r3, [r3, #12]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d008      	beq.n	800d1be <TIM_OC2_SetConfig+0x82>
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	68db      	ldr	r3, [r3, #12]
 800d1b0:	2b08      	cmp	r3, #8
 800d1b2:	d004      	beq.n	800d1be <TIM_OC2_SetConfig+0x82>
 800d1b4:	f641 31b5 	movw	r1, #7093	@ 0x1bb5
 800d1b8:	482f      	ldr	r0, [pc, #188]	@ (800d278 <TIM_OC2_SetConfig+0x13c>)
 800d1ba:	f7f9 fc3b 	bl	8006a34 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d1c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	68db      	ldr	r3, [r3, #12]
 800d1ca:	011b      	lsls	r3, r3, #4
 800d1cc:	697a      	ldr	r2, [r7, #20]
 800d1ce:	4313      	orrs	r3, r2
 800d1d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d1d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	4a24      	ldr	r2, [pc, #144]	@ (800d270 <TIM_OC2_SetConfig+0x134>)
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	d003      	beq.n	800d1ea <TIM_OC2_SetConfig+0xae>
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	4a23      	ldr	r2, [pc, #140]	@ (800d274 <TIM_OC2_SetConfig+0x138>)
 800d1e6:	4293      	cmp	r3, r2
 800d1e8:	d12f      	bne.n	800d24a <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	699b      	ldr	r3, [r3, #24]
 800d1ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d1f2:	d008      	beq.n	800d206 <TIM_OC2_SetConfig+0xca>
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	699b      	ldr	r3, [r3, #24]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d004      	beq.n	800d206 <TIM_OC2_SetConfig+0xca>
 800d1fc:	f641 31c2 	movw	r1, #7106	@ 0x1bc2
 800d200:	481d      	ldr	r0, [pc, #116]	@ (800d278 <TIM_OC2_SetConfig+0x13c>)
 800d202:	f7f9 fc17 	bl	8006a34 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	695b      	ldr	r3, [r3, #20]
 800d20a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d20e:	d008      	beq.n	800d222 <TIM_OC2_SetConfig+0xe6>
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	695b      	ldr	r3, [r3, #20]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d004      	beq.n	800d222 <TIM_OC2_SetConfig+0xe6>
 800d218:	f641 31c3 	movw	r1, #7107	@ 0x1bc3
 800d21c:	4816      	ldr	r0, [pc, #88]	@ (800d278 <TIM_OC2_SetConfig+0x13c>)
 800d21e:	f7f9 fc09 	bl	8006a34 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d222:	693b      	ldr	r3, [r7, #16]
 800d224:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d22a:	693b      	ldr	r3, [r7, #16]
 800d22c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	695b      	ldr	r3, [r3, #20]
 800d236:	009b      	lsls	r3, r3, #2
 800d238:	693a      	ldr	r2, [r7, #16]
 800d23a:	4313      	orrs	r3, r2
 800d23c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	699b      	ldr	r3, [r3, #24]
 800d242:	009b      	lsls	r3, r3, #2
 800d244:	693a      	ldr	r2, [r7, #16]
 800d246:	4313      	orrs	r3, r2
 800d248:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	693a      	ldr	r2, [r7, #16]
 800d24e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	68fa      	ldr	r2, [r7, #12]
 800d254:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	685a      	ldr	r2, [r3, #4]
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	697a      	ldr	r2, [r7, #20]
 800d262:	621a      	str	r2, [r3, #32]
}
 800d264:	bf00      	nop
 800d266:	3718      	adds	r7, #24
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}
 800d26c:	feff8fff 	.word	0xfeff8fff
 800d270:	40010000 	.word	0x40010000
 800d274:	40010400 	.word	0x40010400
 800d278:	08018a30 	.word	0x08018a30

0800d27c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b086      	sub	sp, #24
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6a1b      	ldr	r3, [r3, #32]
 800d28a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6a1b      	ldr	r3, [r3, #32]
 800d290:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	685b      	ldr	r3, [r3, #4]
 800d29c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	69db      	ldr	r3, [r3, #28]
 800d2a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d2a4:	68fa      	ldr	r2, [r7, #12]
 800d2a6:	4b41      	ldr	r3, [pc, #260]	@ (800d3ac <TIM_OC3_SetConfig+0x130>)
 800d2a8:	4013      	ands	r3, r2
 800d2aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	f023 0303 	bic.w	r3, r3, #3
 800d2b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	68fa      	ldr	r2, [r7, #12]
 800d2ba:	4313      	orrs	r3, r2
 800d2bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d2c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	689b      	ldr	r3, [r3, #8]
 800d2ca:	021b      	lsls	r3, r3, #8
 800d2cc:	697a      	ldr	r2, [r7, #20]
 800d2ce:	4313      	orrs	r3, r2
 800d2d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	4a36      	ldr	r2, [pc, #216]	@ (800d3b0 <TIM_OC3_SetConfig+0x134>)
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	d003      	beq.n	800d2e2 <TIM_OC3_SetConfig+0x66>
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	4a35      	ldr	r2, [pc, #212]	@ (800d3b4 <TIM_OC3_SetConfig+0x138>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d11a      	bne.n	800d318 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	68db      	ldr	r3, [r3, #12]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d008      	beq.n	800d2fc <TIM_OC3_SetConfig+0x80>
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	68db      	ldr	r3, [r3, #12]
 800d2ee:	2b08      	cmp	r3, #8
 800d2f0:	d004      	beq.n	800d2fc <TIM_OC3_SetConfig+0x80>
 800d2f2:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 800d2f6:	4830      	ldr	r0, [pc, #192]	@ (800d3b8 <TIM_OC3_SetConfig+0x13c>)
 800d2f8:	f7f9 fb9c 	bl	8006a34 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d302:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	68db      	ldr	r3, [r3, #12]
 800d308:	021b      	lsls	r3, r3, #8
 800d30a:	697a      	ldr	r2, [r7, #20]
 800d30c:	4313      	orrs	r3, r2
 800d30e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d310:	697b      	ldr	r3, [r7, #20]
 800d312:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d316:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	4a25      	ldr	r2, [pc, #148]	@ (800d3b0 <TIM_OC3_SetConfig+0x134>)
 800d31c:	4293      	cmp	r3, r2
 800d31e:	d003      	beq.n	800d328 <TIM_OC3_SetConfig+0xac>
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	4a24      	ldr	r2, [pc, #144]	@ (800d3b4 <TIM_OC3_SetConfig+0x138>)
 800d324:	4293      	cmp	r3, r2
 800d326:	d12f      	bne.n	800d388 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	699b      	ldr	r3, [r3, #24]
 800d32c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d330:	d008      	beq.n	800d344 <TIM_OC3_SetConfig+0xc8>
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	699b      	ldr	r3, [r3, #24]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d004      	beq.n	800d344 <TIM_OC3_SetConfig+0xc8>
 800d33a:	f641 410d 	movw	r1, #7181	@ 0x1c0d
 800d33e:	481e      	ldr	r0, [pc, #120]	@ (800d3b8 <TIM_OC3_SetConfig+0x13c>)
 800d340:	f7f9 fb78 	bl	8006a34 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	695b      	ldr	r3, [r3, #20]
 800d348:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d34c:	d008      	beq.n	800d360 <TIM_OC3_SetConfig+0xe4>
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	695b      	ldr	r3, [r3, #20]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d004      	beq.n	800d360 <TIM_OC3_SetConfig+0xe4>
 800d356:	f641 410e 	movw	r1, #7182	@ 0x1c0e
 800d35a:	4817      	ldr	r0, [pc, #92]	@ (800d3b8 <TIM_OC3_SetConfig+0x13c>)
 800d35c:	f7f9 fb6a 	bl	8006a34 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d366:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d36e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	695b      	ldr	r3, [r3, #20]
 800d374:	011b      	lsls	r3, r3, #4
 800d376:	693a      	ldr	r2, [r7, #16]
 800d378:	4313      	orrs	r3, r2
 800d37a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	699b      	ldr	r3, [r3, #24]
 800d380:	011b      	lsls	r3, r3, #4
 800d382:	693a      	ldr	r2, [r7, #16]
 800d384:	4313      	orrs	r3, r2
 800d386:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	693a      	ldr	r2, [r7, #16]
 800d38c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	68fa      	ldr	r2, [r7, #12]
 800d392:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	685a      	ldr	r2, [r3, #4]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	697a      	ldr	r2, [r7, #20]
 800d3a0:	621a      	str	r2, [r3, #32]
}
 800d3a2:	bf00      	nop
 800d3a4:	3718      	adds	r7, #24
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}
 800d3aa:	bf00      	nop
 800d3ac:	fffeff8f 	.word	0xfffeff8f
 800d3b0:	40010000 	.word	0x40010000
 800d3b4:	40010400 	.word	0x40010400
 800d3b8:	08018a30 	.word	0x08018a30

0800d3bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b086      	sub	sp, #24
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6a1b      	ldr	r3, [r3, #32]
 800d3ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6a1b      	ldr	r3, [r3, #32]
 800d3d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	69db      	ldr	r3, [r3, #28]
 800d3e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d3e4:	68fa      	ldr	r2, [r7, #12]
 800d3e6:	4b24      	ldr	r3, [pc, #144]	@ (800d478 <TIM_OC4_SetConfig+0xbc>)
 800d3e8:	4013      	ands	r3, r2
 800d3ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d3f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	021b      	lsls	r3, r3, #8
 800d3fa:	68fa      	ldr	r2, [r7, #12]
 800d3fc:	4313      	orrs	r3, r2
 800d3fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d406:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	689b      	ldr	r3, [r3, #8]
 800d40c:	031b      	lsls	r3, r3, #12
 800d40e:	693a      	ldr	r2, [r7, #16]
 800d410:	4313      	orrs	r3, r2
 800d412:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	4a19      	ldr	r2, [pc, #100]	@ (800d47c <TIM_OC4_SetConfig+0xc0>)
 800d418:	4293      	cmp	r3, r2
 800d41a:	d003      	beq.n	800d424 <TIM_OC4_SetConfig+0x68>
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	4a18      	ldr	r2, [pc, #96]	@ (800d480 <TIM_OC4_SetConfig+0xc4>)
 800d420:	4293      	cmp	r3, r2
 800d422:	d117      	bne.n	800d454 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	695b      	ldr	r3, [r3, #20]
 800d428:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d42c:	d008      	beq.n	800d440 <TIM_OC4_SetConfig+0x84>
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	695b      	ldr	r3, [r3, #20]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d004      	beq.n	800d440 <TIM_OC4_SetConfig+0x84>
 800d436:	f641 414d 	movw	r1, #7245	@ 0x1c4d
 800d43a:	4812      	ldr	r0, [pc, #72]	@ (800d484 <TIM_OC4_SetConfig+0xc8>)
 800d43c:	f7f9 fafa 	bl	8006a34 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d440:	697b      	ldr	r3, [r7, #20]
 800d442:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d446:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	695b      	ldr	r3, [r3, #20]
 800d44c:	019b      	lsls	r3, r3, #6
 800d44e:	697a      	ldr	r2, [r7, #20]
 800d450:	4313      	orrs	r3, r2
 800d452:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	697a      	ldr	r2, [r7, #20]
 800d458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	68fa      	ldr	r2, [r7, #12]
 800d45e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	685a      	ldr	r2, [r3, #4]
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	693a      	ldr	r2, [r7, #16]
 800d46c:	621a      	str	r2, [r3, #32]
}
 800d46e:	bf00      	nop
 800d470:	3718      	adds	r7, #24
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}
 800d476:	bf00      	nop
 800d478:	feff8fff 	.word	0xfeff8fff
 800d47c:	40010000 	.word	0x40010000
 800d480:	40010400 	.word	0x40010400
 800d484:	08018a30 	.word	0x08018a30

0800d488 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d488:	b480      	push	{r7}
 800d48a:	b087      	sub	sp, #28
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6a1b      	ldr	r3, [r3, #32]
 800d496:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6a1b      	ldr	r3, [r3, #32]
 800d49c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	685b      	ldr	r3, [r3, #4]
 800d4a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d4ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d4b0:	68fa      	ldr	r2, [r7, #12]
 800d4b2:	4b1b      	ldr	r3, [pc, #108]	@ (800d520 <TIM_OC5_SetConfig+0x98>)
 800d4b4:	4013      	ands	r3, r2
 800d4b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	68fa      	ldr	r2, [r7, #12]
 800d4be:	4313      	orrs	r3, r2
 800d4c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d4c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	689b      	ldr	r3, [r3, #8]
 800d4ce:	041b      	lsls	r3, r3, #16
 800d4d0:	693a      	ldr	r2, [r7, #16]
 800d4d2:	4313      	orrs	r3, r2
 800d4d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	4a12      	ldr	r2, [pc, #72]	@ (800d524 <TIM_OC5_SetConfig+0x9c>)
 800d4da:	4293      	cmp	r3, r2
 800d4dc:	d003      	beq.n	800d4e6 <TIM_OC5_SetConfig+0x5e>
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	4a11      	ldr	r2, [pc, #68]	@ (800d528 <TIM_OC5_SetConfig+0xa0>)
 800d4e2:	4293      	cmp	r3, r2
 800d4e4:	d109      	bne.n	800d4fa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d4ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	695b      	ldr	r3, [r3, #20]
 800d4f2:	021b      	lsls	r3, r3, #8
 800d4f4:	697a      	ldr	r2, [r7, #20]
 800d4f6:	4313      	orrs	r3, r2
 800d4f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	697a      	ldr	r2, [r7, #20]
 800d4fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	68fa      	ldr	r2, [r7, #12]
 800d504:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	685a      	ldr	r2, [r3, #4]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	693a      	ldr	r2, [r7, #16]
 800d512:	621a      	str	r2, [r3, #32]
}
 800d514:	bf00      	nop
 800d516:	371c      	adds	r7, #28
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr
 800d520:	fffeff8f 	.word	0xfffeff8f
 800d524:	40010000 	.word	0x40010000
 800d528:	40010400 	.word	0x40010400

0800d52c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d52c:	b480      	push	{r7}
 800d52e:	b087      	sub	sp, #28
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
 800d534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6a1b      	ldr	r3, [r3, #32]
 800d53a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6a1b      	ldr	r3, [r3, #32]
 800d540:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	685b      	ldr	r3, [r3, #4]
 800d54c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d554:	68fa      	ldr	r2, [r7, #12]
 800d556:	4b1c      	ldr	r3, [pc, #112]	@ (800d5c8 <TIM_OC6_SetConfig+0x9c>)
 800d558:	4013      	ands	r3, r2
 800d55a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	021b      	lsls	r3, r3, #8
 800d562:	68fa      	ldr	r2, [r7, #12]
 800d564:	4313      	orrs	r3, r2
 800d566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d56e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	689b      	ldr	r3, [r3, #8]
 800d574:	051b      	lsls	r3, r3, #20
 800d576:	693a      	ldr	r2, [r7, #16]
 800d578:	4313      	orrs	r3, r2
 800d57a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	4a13      	ldr	r2, [pc, #76]	@ (800d5cc <TIM_OC6_SetConfig+0xa0>)
 800d580:	4293      	cmp	r3, r2
 800d582:	d003      	beq.n	800d58c <TIM_OC6_SetConfig+0x60>
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	4a12      	ldr	r2, [pc, #72]	@ (800d5d0 <TIM_OC6_SetConfig+0xa4>)
 800d588:	4293      	cmp	r3, r2
 800d58a:	d109      	bne.n	800d5a0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d592:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	695b      	ldr	r3, [r3, #20]
 800d598:	029b      	lsls	r3, r3, #10
 800d59a:	697a      	ldr	r2, [r7, #20]
 800d59c:	4313      	orrs	r3, r2
 800d59e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	697a      	ldr	r2, [r7, #20]
 800d5a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	68fa      	ldr	r2, [r7, #12]
 800d5aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	685a      	ldr	r2, [r3, #4]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	693a      	ldr	r2, [r7, #16]
 800d5b8:	621a      	str	r2, [r3, #32]
}
 800d5ba:	bf00      	nop
 800d5bc:	371c      	adds	r7, #28
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c4:	4770      	bx	lr
 800d5c6:	bf00      	nop
 800d5c8:	feff8fff 	.word	0xfeff8fff
 800d5cc:	40010000 	.word	0x40010000
 800d5d0:	40010400 	.word	0x40010400

0800d5d4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b086      	sub	sp, #24
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	689b      	ldr	r3, [r3, #8]
 800d5e8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d5ea:	693b      	ldr	r3, [r7, #16]
 800d5ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d5f0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	685b      	ldr	r3, [r3, #4]
 800d5f6:	693a      	ldr	r2, [r7, #16]
 800d5f8:	4313      	orrs	r3, r2
 800d5fa:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800d5fc:	693a      	ldr	r2, [r7, #16]
 800d5fe:	4b8f      	ldr	r3, [pc, #572]	@ (800d83c <TIM_SlaveTimer_SetConfig+0x268>)
 800d600:	4013      	ands	r3, r2
 800d602:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	693a      	ldr	r2, [r7, #16]
 800d60a:	4313      	orrs	r3, r2
 800d60c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	693a      	ldr	r2, [r7, #16]
 800d614:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	685b      	ldr	r3, [r3, #4]
 800d61a:	2b70      	cmp	r3, #112	@ 0x70
 800d61c:	d027      	beq.n	800d66e <TIM_SlaveTimer_SetConfig+0x9a>
 800d61e:	2b70      	cmp	r3, #112	@ 0x70
 800d620:	f200 821c 	bhi.w	800da5c <TIM_SlaveTimer_SetConfig+0x488>
 800d624:	2b60      	cmp	r3, #96	@ 0x60
 800d626:	f000 8191 	beq.w	800d94c <TIM_SlaveTimer_SetConfig+0x378>
 800d62a:	2b60      	cmp	r3, #96	@ 0x60
 800d62c:	f200 8216 	bhi.w	800da5c <TIM_SlaveTimer_SetConfig+0x488>
 800d630:	2b50      	cmp	r3, #80	@ 0x50
 800d632:	f000 811d 	beq.w	800d870 <TIM_SlaveTimer_SetConfig+0x29c>
 800d636:	2b50      	cmp	r3, #80	@ 0x50
 800d638:	f200 8210 	bhi.w	800da5c <TIM_SlaveTimer_SetConfig+0x488>
 800d63c:	2b40      	cmp	r3, #64	@ 0x40
 800d63e:	f000 8089 	beq.w	800d754 <TIM_SlaveTimer_SetConfig+0x180>
 800d642:	2b40      	cmp	r3, #64	@ 0x40
 800d644:	f200 820a 	bhi.w	800da5c <TIM_SlaveTimer_SetConfig+0x488>
 800d648:	2b30      	cmp	r3, #48	@ 0x30
 800d64a:	f000 81d9 	beq.w	800da00 <TIM_SlaveTimer_SetConfig+0x42c>
 800d64e:	2b30      	cmp	r3, #48	@ 0x30
 800d650:	f200 8204 	bhi.w	800da5c <TIM_SlaveTimer_SetConfig+0x488>
 800d654:	2b20      	cmp	r3, #32
 800d656:	f000 81d3 	beq.w	800da00 <TIM_SlaveTimer_SetConfig+0x42c>
 800d65a:	2b20      	cmp	r3, #32
 800d65c:	f200 81fe 	bhi.w	800da5c <TIM_SlaveTimer_SetConfig+0x488>
 800d660:	2b00      	cmp	r3, #0
 800d662:	f000 81cd 	beq.w	800da00 <TIM_SlaveTimer_SetConfig+0x42c>
 800d666:	2b10      	cmp	r3, #16
 800d668:	f000 81ca 	beq.w	800da00 <TIM_SlaveTimer_SetConfig+0x42c>
 800d66c:	e1f6      	b.n	800da5c <TIM_SlaveTimer_SetConfig+0x488>
  {
    case TIM_TS_ETRF:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	4a73      	ldr	r2, [pc, #460]	@ (800d840 <TIM_SlaveTimer_SetConfig+0x26c>)
 800d674:	4293      	cmp	r3, r2
 800d676:	d027      	beq.n	800d6c8 <TIM_SlaveTimer_SetConfig+0xf4>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d680:	d022      	beq.n	800d6c8 <TIM_SlaveTimer_SetConfig+0xf4>
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	4a6f      	ldr	r2, [pc, #444]	@ (800d844 <TIM_SlaveTimer_SetConfig+0x270>)
 800d688:	4293      	cmp	r3, r2
 800d68a:	d01d      	beq.n	800d6c8 <TIM_SlaveTimer_SetConfig+0xf4>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	4a6d      	ldr	r2, [pc, #436]	@ (800d848 <TIM_SlaveTimer_SetConfig+0x274>)
 800d692:	4293      	cmp	r3, r2
 800d694:	d018      	beq.n	800d6c8 <TIM_SlaveTimer_SetConfig+0xf4>
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	4a6c      	ldr	r2, [pc, #432]	@ (800d84c <TIM_SlaveTimer_SetConfig+0x278>)
 800d69c:	4293      	cmp	r3, r2
 800d69e:	d013      	beq.n	800d6c8 <TIM_SlaveTimer_SetConfig+0xf4>
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	4a6a      	ldr	r2, [pc, #424]	@ (800d850 <TIM_SlaveTimer_SetConfig+0x27c>)
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	d00e      	beq.n	800d6c8 <TIM_SlaveTimer_SetConfig+0xf4>
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	4a69      	ldr	r2, [pc, #420]	@ (800d854 <TIM_SlaveTimer_SetConfig+0x280>)
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d009      	beq.n	800d6c8 <TIM_SlaveTimer_SetConfig+0xf4>
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4a67      	ldr	r2, [pc, #412]	@ (800d858 <TIM_SlaveTimer_SetConfig+0x284>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d004      	beq.n	800d6c8 <TIM_SlaveTimer_SetConfig+0xf4>
 800d6be:	f641 41f4 	movw	r1, #7412	@ 0x1cf4
 800d6c2:	4866      	ldr	r0, [pc, #408]	@ (800d85c <TIM_SlaveTimer_SetConfig+0x288>)
 800d6c4:	f7f9 f9b6 	bl	8006a34 <assert_failed>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	68db      	ldr	r3, [r3, #12]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d013      	beq.n	800d6f8 <TIM_SlaveTimer_SetConfig+0x124>
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	68db      	ldr	r3, [r3, #12]
 800d6d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d6d8:	d00e      	beq.n	800d6f8 <TIM_SlaveTimer_SetConfig+0x124>
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	68db      	ldr	r3, [r3, #12]
 800d6de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d6e2:	d009      	beq.n	800d6f8 <TIM_SlaveTimer_SetConfig+0x124>
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	68db      	ldr	r3, [r3, #12]
 800d6e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d6ec:	d004      	beq.n	800d6f8 <TIM_SlaveTimer_SetConfig+0x124>
 800d6ee:	f641 41f5 	movw	r1, #7413	@ 0x1cf5
 800d6f2:	485a      	ldr	r0, [pc, #360]	@ (800d85c <TIM_SlaveTimer_SetConfig+0x288>)
 800d6f4:	f7f9 f99e 	bl	8006a34 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	689b      	ldr	r3, [r3, #8]
 800d6fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d700:	d014      	beq.n	800d72c <TIM_SlaveTimer_SetConfig+0x158>
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	689b      	ldr	r3, [r3, #8]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d010      	beq.n	800d72c <TIM_SlaveTimer_SetConfig+0x158>
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	689b      	ldr	r3, [r3, #8]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d00c      	beq.n	800d72c <TIM_SlaveTimer_SetConfig+0x158>
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	689b      	ldr	r3, [r3, #8]
 800d716:	2b02      	cmp	r3, #2
 800d718:	d008      	beq.n	800d72c <TIM_SlaveTimer_SetConfig+0x158>
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	689b      	ldr	r3, [r3, #8]
 800d71e:	2b0a      	cmp	r3, #10
 800d720:	d004      	beq.n	800d72c <TIM_SlaveTimer_SetConfig+0x158>
 800d722:	f641 41f6 	movw	r1, #7414	@ 0x1cf6
 800d726:	484d      	ldr	r0, [pc, #308]	@ (800d85c <TIM_SlaveTimer_SetConfig+0x288>)
 800d728:	f7f9 f984 	bl	8006a34 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	691b      	ldr	r3, [r3, #16]
 800d730:	2b0f      	cmp	r3, #15
 800d732:	d904      	bls.n	800d73e <TIM_SlaveTimer_SetConfig+0x16a>
 800d734:	f641 41f7 	movw	r1, #7415	@ 0x1cf7
 800d738:	4848      	ldr	r0, [pc, #288]	@ (800d85c <TIM_SlaveTimer_SetConfig+0x288>)
 800d73a:	f7f9 f97b 	bl	8006a34 <assert_failed>
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800d74e:	f000 fa21 	bl	800db94 <TIM_ETR_SetConfig>
      break;
 800d752:	e187      	b.n	800da64 <TIM_SlaveTimer_SetConfig+0x490>
    }

    case TIM_TS_TI1F_ED:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	4a39      	ldr	r2, [pc, #228]	@ (800d840 <TIM_SlaveTimer_SetConfig+0x26c>)
 800d75a:	4293      	cmp	r3, r2
 800d75c:	d03b      	beq.n	800d7d6 <TIM_SlaveTimer_SetConfig+0x202>
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d766:	d036      	beq.n	800d7d6 <TIM_SlaveTimer_SetConfig+0x202>
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	4a35      	ldr	r2, [pc, #212]	@ (800d844 <TIM_SlaveTimer_SetConfig+0x270>)
 800d76e:	4293      	cmp	r3, r2
 800d770:	d031      	beq.n	800d7d6 <TIM_SlaveTimer_SetConfig+0x202>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	4a34      	ldr	r2, [pc, #208]	@ (800d848 <TIM_SlaveTimer_SetConfig+0x274>)
 800d778:	4293      	cmp	r3, r2
 800d77a:	d02c      	beq.n	800d7d6 <TIM_SlaveTimer_SetConfig+0x202>
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	4a32      	ldr	r2, [pc, #200]	@ (800d84c <TIM_SlaveTimer_SetConfig+0x278>)
 800d782:	4293      	cmp	r3, r2
 800d784:	d027      	beq.n	800d7d6 <TIM_SlaveTimer_SetConfig+0x202>
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	4a31      	ldr	r2, [pc, #196]	@ (800d850 <TIM_SlaveTimer_SetConfig+0x27c>)
 800d78c:	4293      	cmp	r3, r2
 800d78e:	d022      	beq.n	800d7d6 <TIM_SlaveTimer_SetConfig+0x202>
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	4a2f      	ldr	r2, [pc, #188]	@ (800d854 <TIM_SlaveTimer_SetConfig+0x280>)
 800d796:	4293      	cmp	r3, r2
 800d798:	d01d      	beq.n	800d7d6 <TIM_SlaveTimer_SetConfig+0x202>
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	4a30      	ldr	r2, [pc, #192]	@ (800d860 <TIM_SlaveTimer_SetConfig+0x28c>)
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	d018      	beq.n	800d7d6 <TIM_SlaveTimer_SetConfig+0x202>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	4a2e      	ldr	r2, [pc, #184]	@ (800d864 <TIM_SlaveTimer_SetConfig+0x290>)
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d013      	beq.n	800d7d6 <TIM_SlaveTimer_SetConfig+0x202>
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	4a29      	ldr	r2, [pc, #164]	@ (800d858 <TIM_SlaveTimer_SetConfig+0x284>)
 800d7b4:	4293      	cmp	r3, r2
 800d7b6:	d00e      	beq.n	800d7d6 <TIM_SlaveTimer_SetConfig+0x202>
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4a2a      	ldr	r2, [pc, #168]	@ (800d868 <TIM_SlaveTimer_SetConfig+0x294>)
 800d7be:	4293      	cmp	r3, r2
 800d7c0:	d009      	beq.n	800d7d6 <TIM_SlaveTimer_SetConfig+0x202>
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	4a29      	ldr	r2, [pc, #164]	@ (800d86c <TIM_SlaveTimer_SetConfig+0x298>)
 800d7c8:	4293      	cmp	r3, r2
 800d7ca:	d004      	beq.n	800d7d6 <TIM_SlaveTimer_SetConfig+0x202>
 800d7cc:	f641 5103 	movw	r1, #7427	@ 0x1d03
 800d7d0:	4822      	ldr	r0, [pc, #136]	@ (800d85c <TIM_SlaveTimer_SetConfig+0x288>)
 800d7d2:	f7f9 f92f 	bl	8006a34 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	691b      	ldr	r3, [r3, #16]
 800d7da:	2b0f      	cmp	r3, #15
 800d7dc:	d904      	bls.n	800d7e8 <TIM_SlaveTimer_SetConfig+0x214>
 800d7de:	f641 5104 	movw	r1, #7428	@ 0x1d04
 800d7e2:	481e      	ldr	r0, [pc, #120]	@ (800d85c <TIM_SlaveTimer_SetConfig+0x288>)
 800d7e4:	f7f9 f926 	bl	8006a34 <assert_failed>

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	2b05      	cmp	r3, #5
 800d7ee:	d101      	bne.n	800d7f4 <TIM_SlaveTimer_SetConfig+0x220>
      {
        return HAL_ERROR;
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	e138      	b.n	800da66 <TIM_SlaveTimer_SetConfig+0x492>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	6a1b      	ldr	r3, [r3, #32]
 800d7fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	6a1a      	ldr	r2, [r3, #32]
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	f022 0201 	bic.w	r2, r2, #1
 800d80a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	699b      	ldr	r3, [r3, #24]
 800d812:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d81a:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	691b      	ldr	r3, [r3, #16]
 800d820:	011b      	lsls	r3, r3, #4
 800d822:	68ba      	ldr	r2, [r7, #8]
 800d824:	4313      	orrs	r3, r2
 800d826:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	68ba      	ldr	r2, [r7, #8]
 800d82e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	68fa      	ldr	r2, [r7, #12]
 800d836:	621a      	str	r2, [r3, #32]
      break;
 800d838:	e114      	b.n	800da64 <TIM_SlaveTimer_SetConfig+0x490>
 800d83a:	bf00      	nop
 800d83c:	fffefff8 	.word	0xfffefff8
 800d840:	40010000 	.word	0x40010000
 800d844:	40000400 	.word	0x40000400
 800d848:	40000800 	.word	0x40000800
 800d84c:	40000c00 	.word	0x40000c00
 800d850:	40010400 	.word	0x40010400
 800d854:	40014000 	.word	0x40014000
 800d858:	40001800 	.word	0x40001800
 800d85c:	08018a30 	.word	0x08018a30
 800d860:	40014400 	.word	0x40014400
 800d864:	40014800 	.word	0x40014800
 800d868:	40001c00 	.word	0x40001c00
 800d86c:	40002000 	.word	0x40002000
    }

    case TIM_TS_TI1FP1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	4a7e      	ldr	r2, [pc, #504]	@ (800da70 <TIM_SlaveTimer_SetConfig+0x49c>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d03b      	beq.n	800d8f2 <TIM_SlaveTimer_SetConfig+0x31e>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d882:	d036      	beq.n	800d8f2 <TIM_SlaveTimer_SetConfig+0x31e>
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	4a7a      	ldr	r2, [pc, #488]	@ (800da74 <TIM_SlaveTimer_SetConfig+0x4a0>)
 800d88a:	4293      	cmp	r3, r2
 800d88c:	d031      	beq.n	800d8f2 <TIM_SlaveTimer_SetConfig+0x31e>
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	4a79      	ldr	r2, [pc, #484]	@ (800da78 <TIM_SlaveTimer_SetConfig+0x4a4>)
 800d894:	4293      	cmp	r3, r2
 800d896:	d02c      	beq.n	800d8f2 <TIM_SlaveTimer_SetConfig+0x31e>
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	4a77      	ldr	r2, [pc, #476]	@ (800da7c <TIM_SlaveTimer_SetConfig+0x4a8>)
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d027      	beq.n	800d8f2 <TIM_SlaveTimer_SetConfig+0x31e>
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	4a76      	ldr	r2, [pc, #472]	@ (800da80 <TIM_SlaveTimer_SetConfig+0x4ac>)
 800d8a8:	4293      	cmp	r3, r2
 800d8aa:	d022      	beq.n	800d8f2 <TIM_SlaveTimer_SetConfig+0x31e>
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	4a74      	ldr	r2, [pc, #464]	@ (800da84 <TIM_SlaveTimer_SetConfig+0x4b0>)
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d01d      	beq.n	800d8f2 <TIM_SlaveTimer_SetConfig+0x31e>
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	4a73      	ldr	r2, [pc, #460]	@ (800da88 <TIM_SlaveTimer_SetConfig+0x4b4>)
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	d018      	beq.n	800d8f2 <TIM_SlaveTimer_SetConfig+0x31e>
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	4a71      	ldr	r2, [pc, #452]	@ (800da8c <TIM_SlaveTimer_SetConfig+0x4b8>)
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d013      	beq.n	800d8f2 <TIM_SlaveTimer_SetConfig+0x31e>
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	4a70      	ldr	r2, [pc, #448]	@ (800da90 <TIM_SlaveTimer_SetConfig+0x4bc>)
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d00e      	beq.n	800d8f2 <TIM_SlaveTimer_SetConfig+0x31e>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	4a6e      	ldr	r2, [pc, #440]	@ (800da94 <TIM_SlaveTimer_SetConfig+0x4c0>)
 800d8da:	4293      	cmp	r3, r2
 800d8dc:	d009      	beq.n	800d8f2 <TIM_SlaveTimer_SetConfig+0x31e>
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	4a6d      	ldr	r2, [pc, #436]	@ (800da98 <TIM_SlaveTimer_SetConfig+0x4c4>)
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	d004      	beq.n	800d8f2 <TIM_SlaveTimer_SetConfig+0x31e>
 800d8e8:	f641 511d 	movw	r1, #7453	@ 0x1d1d
 800d8ec:	486b      	ldr	r0, [pc, #428]	@ (800da9c <TIM_SlaveTimer_SetConfig+0x4c8>)
 800d8ee:	f7f9 f8a1 	bl	8006a34 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	689b      	ldr	r3, [r3, #8]
 800d8f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d8fa:	d014      	beq.n	800d926 <TIM_SlaveTimer_SetConfig+0x352>
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	689b      	ldr	r3, [r3, #8]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d010      	beq.n	800d926 <TIM_SlaveTimer_SetConfig+0x352>
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	689b      	ldr	r3, [r3, #8]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d00c      	beq.n	800d926 <TIM_SlaveTimer_SetConfig+0x352>
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	689b      	ldr	r3, [r3, #8]
 800d910:	2b02      	cmp	r3, #2
 800d912:	d008      	beq.n	800d926 <TIM_SlaveTimer_SetConfig+0x352>
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	689b      	ldr	r3, [r3, #8]
 800d918:	2b0a      	cmp	r3, #10
 800d91a:	d004      	beq.n	800d926 <TIM_SlaveTimer_SetConfig+0x352>
 800d91c:	f641 511e 	movw	r1, #7454	@ 0x1d1e
 800d920:	485e      	ldr	r0, [pc, #376]	@ (800da9c <TIM_SlaveTimer_SetConfig+0x4c8>)
 800d922:	f7f9 f887 	bl	8006a34 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	691b      	ldr	r3, [r3, #16]
 800d92a:	2b0f      	cmp	r3, #15
 800d92c:	d904      	bls.n	800d938 <TIM_SlaveTimer_SetConfig+0x364>
 800d92e:	f641 511f 	movw	r1, #7455	@ 0x1d1f
 800d932:	485a      	ldr	r0, [pc, #360]	@ (800da9c <TIM_SlaveTimer_SetConfig+0x4c8>)
 800d934:	f7f9 f87e 	bl	8006a34 <assert_failed>

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d944:	461a      	mov	r2, r3
 800d946:	f000 f8ab 	bl	800daa0 <TIM_TI1_ConfigInputStage>
      break;
 800d94a:	e08b      	b.n	800da64 <TIM_SlaveTimer_SetConfig+0x490>
    }

    case TIM_TS_TI2FP2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4a47      	ldr	r2, [pc, #284]	@ (800da70 <TIM_SlaveTimer_SetConfig+0x49c>)
 800d952:	4293      	cmp	r3, r2
 800d954:	d027      	beq.n	800d9a6 <TIM_SlaveTimer_SetConfig+0x3d2>
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d95e:	d022      	beq.n	800d9a6 <TIM_SlaveTimer_SetConfig+0x3d2>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	4a43      	ldr	r2, [pc, #268]	@ (800da74 <TIM_SlaveTimer_SetConfig+0x4a0>)
 800d966:	4293      	cmp	r3, r2
 800d968:	d01d      	beq.n	800d9a6 <TIM_SlaveTimer_SetConfig+0x3d2>
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	4a42      	ldr	r2, [pc, #264]	@ (800da78 <TIM_SlaveTimer_SetConfig+0x4a4>)
 800d970:	4293      	cmp	r3, r2
 800d972:	d018      	beq.n	800d9a6 <TIM_SlaveTimer_SetConfig+0x3d2>
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	4a40      	ldr	r2, [pc, #256]	@ (800da7c <TIM_SlaveTimer_SetConfig+0x4a8>)
 800d97a:	4293      	cmp	r3, r2
 800d97c:	d013      	beq.n	800d9a6 <TIM_SlaveTimer_SetConfig+0x3d2>
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	4a3f      	ldr	r2, [pc, #252]	@ (800da80 <TIM_SlaveTimer_SetConfig+0x4ac>)
 800d984:	4293      	cmp	r3, r2
 800d986:	d00e      	beq.n	800d9a6 <TIM_SlaveTimer_SetConfig+0x3d2>
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	4a3d      	ldr	r2, [pc, #244]	@ (800da84 <TIM_SlaveTimer_SetConfig+0x4b0>)
 800d98e:	4293      	cmp	r3, r2
 800d990:	d009      	beq.n	800d9a6 <TIM_SlaveTimer_SetConfig+0x3d2>
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	4a3e      	ldr	r2, [pc, #248]	@ (800da90 <TIM_SlaveTimer_SetConfig+0x4bc>)
 800d998:	4293      	cmp	r3, r2
 800d99a:	d004      	beq.n	800d9a6 <TIM_SlaveTimer_SetConfig+0x3d2>
 800d99c:	f641 512b 	movw	r1, #7467	@ 0x1d2b
 800d9a0:	483e      	ldr	r0, [pc, #248]	@ (800da9c <TIM_SlaveTimer_SetConfig+0x4c8>)
 800d9a2:	f7f9 f847 	bl	8006a34 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	689b      	ldr	r3, [r3, #8]
 800d9aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d9ae:	d014      	beq.n	800d9da <TIM_SlaveTimer_SetConfig+0x406>
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	689b      	ldr	r3, [r3, #8]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d010      	beq.n	800d9da <TIM_SlaveTimer_SetConfig+0x406>
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	689b      	ldr	r3, [r3, #8]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d00c      	beq.n	800d9da <TIM_SlaveTimer_SetConfig+0x406>
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	689b      	ldr	r3, [r3, #8]
 800d9c4:	2b02      	cmp	r3, #2
 800d9c6:	d008      	beq.n	800d9da <TIM_SlaveTimer_SetConfig+0x406>
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	689b      	ldr	r3, [r3, #8]
 800d9cc:	2b0a      	cmp	r3, #10
 800d9ce:	d004      	beq.n	800d9da <TIM_SlaveTimer_SetConfig+0x406>
 800d9d0:	f641 512c 	movw	r1, #7468	@ 0x1d2c
 800d9d4:	4831      	ldr	r0, [pc, #196]	@ (800da9c <TIM_SlaveTimer_SetConfig+0x4c8>)
 800d9d6:	f7f9 f82d 	bl	8006a34 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	691b      	ldr	r3, [r3, #16]
 800d9de:	2b0f      	cmp	r3, #15
 800d9e0:	d904      	bls.n	800d9ec <TIM_SlaveTimer_SetConfig+0x418>
 800d9e2:	f641 512d 	movw	r1, #7469	@ 0x1d2d
 800d9e6:	482d      	ldr	r0, [pc, #180]	@ (800da9c <TIM_SlaveTimer_SetConfig+0x4c8>)
 800d9e8:	f7f9 f824 	bl	8006a34 <assert_failed>

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d9f8:	461a      	mov	r2, r3
 800d9fa:	f000 f880 	bl	800dafe <TIM_TI2_ConfigInputStage>
      break;
 800d9fe:	e031      	b.n	800da64 <TIM_SlaveTimer_SetConfig+0x490>
    case TIM_TS_ITR1:
    case TIM_TS_ITR2:
    case TIM_TS_ITR3:
    {
      /* Check the parameter */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	4a1a      	ldr	r2, [pc, #104]	@ (800da70 <TIM_SlaveTimer_SetConfig+0x49c>)
 800da06:	4293      	cmp	r3, r2
 800da08:	d02b      	beq.n	800da62 <TIM_SlaveTimer_SetConfig+0x48e>
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da12:	d026      	beq.n	800da62 <TIM_SlaveTimer_SetConfig+0x48e>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	4a16      	ldr	r2, [pc, #88]	@ (800da74 <TIM_SlaveTimer_SetConfig+0x4a0>)
 800da1a:	4293      	cmp	r3, r2
 800da1c:	d021      	beq.n	800da62 <TIM_SlaveTimer_SetConfig+0x48e>
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	4a15      	ldr	r2, [pc, #84]	@ (800da78 <TIM_SlaveTimer_SetConfig+0x4a4>)
 800da24:	4293      	cmp	r3, r2
 800da26:	d01c      	beq.n	800da62 <TIM_SlaveTimer_SetConfig+0x48e>
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4a13      	ldr	r2, [pc, #76]	@ (800da7c <TIM_SlaveTimer_SetConfig+0x4a8>)
 800da2e:	4293      	cmp	r3, r2
 800da30:	d017      	beq.n	800da62 <TIM_SlaveTimer_SetConfig+0x48e>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	4a12      	ldr	r2, [pc, #72]	@ (800da80 <TIM_SlaveTimer_SetConfig+0x4ac>)
 800da38:	4293      	cmp	r3, r2
 800da3a:	d012      	beq.n	800da62 <TIM_SlaveTimer_SetConfig+0x48e>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	4a10      	ldr	r2, [pc, #64]	@ (800da84 <TIM_SlaveTimer_SetConfig+0x4b0>)
 800da42:	4293      	cmp	r3, r2
 800da44:	d00d      	beq.n	800da62 <TIM_SlaveTimer_SetConfig+0x48e>
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	4a11      	ldr	r2, [pc, #68]	@ (800da90 <TIM_SlaveTimer_SetConfig+0x4bc>)
 800da4c:	4293      	cmp	r3, r2
 800da4e:	d008      	beq.n	800da62 <TIM_SlaveTimer_SetConfig+0x48e>
 800da50:	f641 513c 	movw	r1, #7484	@ 0x1d3c
 800da54:	4811      	ldr	r0, [pc, #68]	@ (800da9c <TIM_SlaveTimer_SetConfig+0x4c8>)
 800da56:	f7f8 ffed 	bl	8006a34 <assert_failed>
      break;
 800da5a:	e002      	b.n	800da62 <TIM_SlaveTimer_SetConfig+0x48e>
    }

    default:
      status = HAL_ERROR;
 800da5c:	2301      	movs	r3, #1
 800da5e:	75fb      	strb	r3, [r7, #23]
      break;
 800da60:	e000      	b.n	800da64 <TIM_SlaveTimer_SetConfig+0x490>
      break;
 800da62:	bf00      	nop
  }

  return status;
 800da64:	7dfb      	ldrb	r3, [r7, #23]
}
 800da66:	4618      	mov	r0, r3
 800da68:	3718      	adds	r7, #24
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
 800da6e:	bf00      	nop
 800da70:	40010000 	.word	0x40010000
 800da74:	40000400 	.word	0x40000400
 800da78:	40000800 	.word	0x40000800
 800da7c:	40000c00 	.word	0x40000c00
 800da80:	40010400 	.word	0x40010400
 800da84:	40014000 	.word	0x40014000
 800da88:	40014400 	.word	0x40014400
 800da8c:	40014800 	.word	0x40014800
 800da90:	40001800 	.word	0x40001800
 800da94:	40001c00 	.word	0x40001c00
 800da98:	40002000 	.word	0x40002000
 800da9c:	08018a30 	.word	0x08018a30

0800daa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800daa0:	b480      	push	{r7}
 800daa2:	b087      	sub	sp, #28
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	60f8      	str	r0, [r7, #12]
 800daa8:	60b9      	str	r1, [r7, #8]
 800daaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	6a1b      	ldr	r3, [r3, #32]
 800dab0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	6a1b      	ldr	r3, [r3, #32]
 800dab6:	f023 0201 	bic.w	r2, r3, #1
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	699b      	ldr	r3, [r3, #24]
 800dac2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dac4:	693b      	ldr	r3, [r7, #16]
 800dac6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800daca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	011b      	lsls	r3, r3, #4
 800dad0:	693a      	ldr	r2, [r7, #16]
 800dad2:	4313      	orrs	r3, r2
 800dad4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	f023 030a 	bic.w	r3, r3, #10
 800dadc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dade:	697a      	ldr	r2, [r7, #20]
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	4313      	orrs	r3, r2
 800dae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	693a      	ldr	r2, [r7, #16]
 800daea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	697a      	ldr	r2, [r7, #20]
 800daf0:	621a      	str	r2, [r3, #32]
}
 800daf2:	bf00      	nop
 800daf4:	371c      	adds	r7, #28
 800daf6:	46bd      	mov	sp, r7
 800daf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafc:	4770      	bx	lr

0800dafe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dafe:	b480      	push	{r7}
 800db00:	b087      	sub	sp, #28
 800db02:	af00      	add	r7, sp, #0
 800db04:	60f8      	str	r0, [r7, #12]
 800db06:	60b9      	str	r1, [r7, #8]
 800db08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	6a1b      	ldr	r3, [r3, #32]
 800db0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	6a1b      	ldr	r3, [r3, #32]
 800db14:	f023 0210 	bic.w	r2, r3, #16
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	699b      	ldr	r3, [r3, #24]
 800db20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800db28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	031b      	lsls	r3, r3, #12
 800db2e:	693a      	ldr	r2, [r7, #16]
 800db30:	4313      	orrs	r3, r2
 800db32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800db3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	011b      	lsls	r3, r3, #4
 800db40:	697a      	ldr	r2, [r7, #20]
 800db42:	4313      	orrs	r3, r2
 800db44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	693a      	ldr	r2, [r7, #16]
 800db4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	697a      	ldr	r2, [r7, #20]
 800db50:	621a      	str	r2, [r3, #32]
}
 800db52:	bf00      	nop
 800db54:	371c      	adds	r7, #28
 800db56:	46bd      	mov	sp, r7
 800db58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5c:	4770      	bx	lr

0800db5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800db5e:	b480      	push	{r7}
 800db60:	b085      	sub	sp, #20
 800db62:	af00      	add	r7, sp, #0
 800db64:	6078      	str	r0, [r7, #4]
 800db66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	689b      	ldr	r3, [r3, #8]
 800db6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800db74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800db76:	683a      	ldr	r2, [r7, #0]
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	4313      	orrs	r3, r2
 800db7c:	f043 0307 	orr.w	r3, r3, #7
 800db80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	68fa      	ldr	r2, [r7, #12]
 800db86:	609a      	str	r2, [r3, #8]
}
 800db88:	bf00      	nop
 800db8a:	3714      	adds	r7, #20
 800db8c:	46bd      	mov	sp, r7
 800db8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db92:	4770      	bx	lr

0800db94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800db94:	b480      	push	{r7}
 800db96:	b087      	sub	sp, #28
 800db98:	af00      	add	r7, sp, #0
 800db9a:	60f8      	str	r0, [r7, #12]
 800db9c:	60b9      	str	r1, [r7, #8]
 800db9e:	607a      	str	r2, [r7, #4]
 800dba0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	689b      	ldr	r3, [r3, #8]
 800dba6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dbae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	021a      	lsls	r2, r3, #8
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	431a      	orrs	r2, r3
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	4313      	orrs	r3, r2
 800dbbc:	697a      	ldr	r2, [r7, #20]
 800dbbe:	4313      	orrs	r3, r2
 800dbc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	697a      	ldr	r2, [r7, #20]
 800dbc6:	609a      	str	r2, [r3, #8]
}
 800dbc8:	bf00      	nop
 800dbca:	371c      	adds	r7, #28
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd2:	4770      	bx	lr

0800dbd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b086      	sub	sp, #24
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	60f8      	str	r0, [r7, #12]
 800dbdc:	60b9      	str	r1, [r7, #8]
 800dbde:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	4a35      	ldr	r2, [pc, #212]	@ (800dcb8 <TIM_CCxChannelCmd+0xe4>)
 800dbe4:	4293      	cmp	r3, r2
 800dbe6:	d030      	beq.n	800dc4a <TIM_CCxChannelCmd+0x76>
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dbee:	d02c      	beq.n	800dc4a <TIM_CCxChannelCmd+0x76>
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	4a32      	ldr	r2, [pc, #200]	@ (800dcbc <TIM_CCxChannelCmd+0xe8>)
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	d028      	beq.n	800dc4a <TIM_CCxChannelCmd+0x76>
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	4a31      	ldr	r2, [pc, #196]	@ (800dcc0 <TIM_CCxChannelCmd+0xec>)
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	d024      	beq.n	800dc4a <TIM_CCxChannelCmd+0x76>
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	4a30      	ldr	r2, [pc, #192]	@ (800dcc4 <TIM_CCxChannelCmd+0xf0>)
 800dc04:	4293      	cmp	r3, r2
 800dc06:	d020      	beq.n	800dc4a <TIM_CCxChannelCmd+0x76>
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	4a2f      	ldr	r2, [pc, #188]	@ (800dcc8 <TIM_CCxChannelCmd+0xf4>)
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	d01c      	beq.n	800dc4a <TIM_CCxChannelCmd+0x76>
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	4a2e      	ldr	r2, [pc, #184]	@ (800dccc <TIM_CCxChannelCmd+0xf8>)
 800dc14:	4293      	cmp	r3, r2
 800dc16:	d018      	beq.n	800dc4a <TIM_CCxChannelCmd+0x76>
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	4a2d      	ldr	r2, [pc, #180]	@ (800dcd0 <TIM_CCxChannelCmd+0xfc>)
 800dc1c:	4293      	cmp	r3, r2
 800dc1e:	d014      	beq.n	800dc4a <TIM_CCxChannelCmd+0x76>
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	4a2c      	ldr	r2, [pc, #176]	@ (800dcd4 <TIM_CCxChannelCmd+0x100>)
 800dc24:	4293      	cmp	r3, r2
 800dc26:	d010      	beq.n	800dc4a <TIM_CCxChannelCmd+0x76>
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	4a2b      	ldr	r2, [pc, #172]	@ (800dcd8 <TIM_CCxChannelCmd+0x104>)
 800dc2c:	4293      	cmp	r3, r2
 800dc2e:	d00c      	beq.n	800dc4a <TIM_CCxChannelCmd+0x76>
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	4a2a      	ldr	r2, [pc, #168]	@ (800dcdc <TIM_CCxChannelCmd+0x108>)
 800dc34:	4293      	cmp	r3, r2
 800dc36:	d008      	beq.n	800dc4a <TIM_CCxChannelCmd+0x76>
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	4a29      	ldr	r2, [pc, #164]	@ (800dce0 <TIM_CCxChannelCmd+0x10c>)
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	d004      	beq.n	800dc4a <TIM_CCxChannelCmd+0x76>
 800dc40:	f641 61a7 	movw	r1, #7847	@ 0x1ea7
 800dc44:	4827      	ldr	r0, [pc, #156]	@ (800dce4 <TIM_CCxChannelCmd+0x110>)
 800dc46:	f7f8 fef5 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d016      	beq.n	800dc7e <TIM_CCxChannelCmd+0xaa>
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	2b04      	cmp	r3, #4
 800dc54:	d013      	beq.n	800dc7e <TIM_CCxChannelCmd+0xaa>
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	2b08      	cmp	r3, #8
 800dc5a:	d010      	beq.n	800dc7e <TIM_CCxChannelCmd+0xaa>
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	2b0c      	cmp	r3, #12
 800dc60:	d00d      	beq.n	800dc7e <TIM_CCxChannelCmd+0xaa>
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	2b10      	cmp	r3, #16
 800dc66:	d00a      	beq.n	800dc7e <TIM_CCxChannelCmd+0xaa>
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	2b14      	cmp	r3, #20
 800dc6c:	d007      	beq.n	800dc7e <TIM_CCxChannelCmd+0xaa>
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	2b3c      	cmp	r3, #60	@ 0x3c
 800dc72:	d004      	beq.n	800dc7e <TIM_CCxChannelCmd+0xaa>
 800dc74:	f641 61a8 	movw	r1, #7848	@ 0x1ea8
 800dc78:	481a      	ldr	r0, [pc, #104]	@ (800dce4 <TIM_CCxChannelCmd+0x110>)
 800dc7a:	f7f8 fedb 	bl	8006a34 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	f003 031f 	and.w	r3, r3, #31
 800dc84:	2201      	movs	r2, #1
 800dc86:	fa02 f303 	lsl.w	r3, r2, r3
 800dc8a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	6a1a      	ldr	r2, [r3, #32]
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	43db      	mvns	r3, r3
 800dc94:	401a      	ands	r2, r3
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	6a1a      	ldr	r2, [r3, #32]
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	f003 031f 	and.w	r3, r3, #31
 800dca4:	6879      	ldr	r1, [r7, #4]
 800dca6:	fa01 f303 	lsl.w	r3, r1, r3
 800dcaa:	431a      	orrs	r2, r3
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	621a      	str	r2, [r3, #32]
}
 800dcb0:	bf00      	nop
 800dcb2:	3718      	adds	r7, #24
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}
 800dcb8:	40010000 	.word	0x40010000
 800dcbc:	40000400 	.word	0x40000400
 800dcc0:	40000800 	.word	0x40000800
 800dcc4:	40000c00 	.word	0x40000c00
 800dcc8:	40010400 	.word	0x40010400
 800dccc:	40014000 	.word	0x40014000
 800dcd0:	40014400 	.word	0x40014400
 800dcd4:	40014800 	.word	0x40014800
 800dcd8:	40001800 	.word	0x40001800
 800dcdc:	40001c00 	.word	0x40001c00
 800dce0:	40002000 	.word	0x40002000
 800dce4:	08018a30 	.word	0x08018a30

0800dce8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b084      	sub	sp, #16
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	4a32      	ldr	r2, [pc, #200]	@ (800ddc0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800dcf8:	4293      	cmp	r3, r2
 800dcfa:	d027      	beq.n	800dd4c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd04:	d022      	beq.n	800dd4c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	4a2e      	ldr	r2, [pc, #184]	@ (800ddc4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800dd0c:	4293      	cmp	r3, r2
 800dd0e:	d01d      	beq.n	800dd4c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	4a2c      	ldr	r2, [pc, #176]	@ (800ddc8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800dd16:	4293      	cmp	r3, r2
 800dd18:	d018      	beq.n	800dd4c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	4a2b      	ldr	r2, [pc, #172]	@ (800ddcc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800dd20:	4293      	cmp	r3, r2
 800dd22:	d013      	beq.n	800dd4c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	4a29      	ldr	r2, [pc, #164]	@ (800ddd0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800dd2a:	4293      	cmp	r3, r2
 800dd2c:	d00e      	beq.n	800dd4c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	4a28      	ldr	r2, [pc, #160]	@ (800ddd4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800dd34:	4293      	cmp	r3, r2
 800dd36:	d009      	beq.n	800dd4c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	4a26      	ldr	r2, [pc, #152]	@ (800ddd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	d004      	beq.n	800dd4c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800dd42:	f240 71ab 	movw	r1, #1963	@ 0x7ab
 800dd46:	4825      	ldr	r0, [pc, #148]	@ (800dddc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800dd48:	f7f8 fe74 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d020      	beq.n	800dd96 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	2b10      	cmp	r3, #16
 800dd5a:	d01c      	beq.n	800dd96 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	2b20      	cmp	r3, #32
 800dd62:	d018      	beq.n	800dd96 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	2b30      	cmp	r3, #48	@ 0x30
 800dd6a:	d014      	beq.n	800dd96 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	2b40      	cmp	r3, #64	@ 0x40
 800dd72:	d010      	beq.n	800dd96 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	2b50      	cmp	r3, #80	@ 0x50
 800dd7a:	d00c      	beq.n	800dd96 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	2b60      	cmp	r3, #96	@ 0x60
 800dd82:	d008      	beq.n	800dd96 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	2b70      	cmp	r3, #112	@ 0x70
 800dd8a:	d004      	beq.n	800dd96 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800dd8c:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 800dd90:	4812      	ldr	r0, [pc, #72]	@ (800dddc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800dd92:	f7f8 fe4f 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	689b      	ldr	r3, [r3, #8]
 800dd9a:	2b80      	cmp	r3, #128	@ 0x80
 800dd9c:	d008      	beq.n	800ddb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	689b      	ldr	r3, [r3, #8]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d004      	beq.n	800ddb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dda6:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 800ddaa:	480c      	ldr	r0, [pc, #48]	@ (800dddc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ddac:	f7f8 fe42 	bl	8006a34 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ddb6:	2b01      	cmp	r3, #1
 800ddb8:	d112      	bne.n	800dde0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800ddba:	2302      	movs	r3, #2
 800ddbc:	e0d7      	b.n	800df6e <HAL_TIMEx_MasterConfigSynchronization+0x286>
 800ddbe:	bf00      	nop
 800ddc0:	40010000 	.word	0x40010000
 800ddc4:	40000400 	.word	0x40000400
 800ddc8:	40000800 	.word	0x40000800
 800ddcc:	40000c00 	.word	0x40000c00
 800ddd0:	40001000 	.word	0x40001000
 800ddd4:	40001400 	.word	0x40001400
 800ddd8:	40010400 	.word	0x40010400
 800dddc:	08018a68 	.word	0x08018a68
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2201      	movs	r2, #1
 800dde4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2202      	movs	r2, #2
 800ddec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	685b      	ldr	r3, [r3, #4]
 800ddf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	689b      	ldr	r3, [r3, #8]
 800ddfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	4a5c      	ldr	r2, [pc, #368]	@ (800df78 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800de06:	4293      	cmp	r3, r2
 800de08:	d004      	beq.n	800de14 <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	4a5b      	ldr	r2, [pc, #364]	@ (800df7c <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800de10:	4293      	cmp	r3, r2
 800de12:	d161      	bne.n	800ded8 <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	685b      	ldr	r3, [r3, #4]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d054      	beq.n	800dec6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	685b      	ldr	r3, [r3, #4]
 800de20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800de24:	d04f      	beq.n	800dec6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	685b      	ldr	r3, [r3, #4]
 800de2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800de2e:	d04a      	beq.n	800dec6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800de30:	683b      	ldr	r3, [r7, #0]
 800de32:	685b      	ldr	r3, [r3, #4]
 800de34:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800de38:	d045      	beq.n	800dec6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	685b      	ldr	r3, [r3, #4]
 800de3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800de42:	d040      	beq.n	800dec6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	685b      	ldr	r3, [r3, #4]
 800de48:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800de4c:	d03b      	beq.n	800dec6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	685b      	ldr	r3, [r3, #4]
 800de52:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800de56:	d036      	beq.n	800dec6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	685b      	ldr	r3, [r3, #4]
 800de5c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800de60:	d031      	beq.n	800dec6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	685b      	ldr	r3, [r3, #4]
 800de66:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 800de6a:	d02c      	beq.n	800dec6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	685b      	ldr	r3, [r3, #4]
 800de70:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800de74:	d027      	beq.n	800dec6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	685b      	ldr	r3, [r3, #4]
 800de7a:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 800de7e:	d022      	beq.n	800dec6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	685b      	ldr	r3, [r3, #4]
 800de84:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800de88:	d01d      	beq.n	800dec6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	685b      	ldr	r3, [r3, #4]
 800de8e:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 800de92:	d018      	beq.n	800dec6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	685b      	ldr	r3, [r3, #4]
 800de98:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800de9c:	d013      	beq.n	800dec6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	685b      	ldr	r3, [r3, #4]
 800dea2:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 800dea6:	d00e      	beq.n	800dec6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	685b      	ldr	r3, [r3, #4]
 800deac:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 800deb0:	d009      	beq.n	800dec6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	685b      	ldr	r3, [r3, #4]
 800deb6:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 800deba:	d004      	beq.n	800dec6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800debc:	f240 71bf 	movw	r1, #1983	@ 0x7bf
 800dec0:	482f      	ldr	r0, [pc, #188]	@ (800df80 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800dec2:	f7f8 fdb7 	bl	8006a34 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800decc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	685b      	ldr	r3, [r3, #4]
 800ded2:	68fa      	ldr	r2, [r7, #12]
 800ded4:	4313      	orrs	r3, r2
 800ded6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dede:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	68fa      	ldr	r2, [r7, #12]
 800dee6:	4313      	orrs	r3, r2
 800dee8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	68fa      	ldr	r2, [r7, #12]
 800def0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	4a20      	ldr	r2, [pc, #128]	@ (800df78 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800def8:	4293      	cmp	r3, r2
 800defa:	d022      	beq.n	800df42 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df04:	d01d      	beq.n	800df42 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	4a1e      	ldr	r2, [pc, #120]	@ (800df84 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 800df0c:	4293      	cmp	r3, r2
 800df0e:	d018      	beq.n	800df42 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	4a1c      	ldr	r2, [pc, #112]	@ (800df88 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 800df16:	4293      	cmp	r3, r2
 800df18:	d013      	beq.n	800df42 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	4a1b      	ldr	r2, [pc, #108]	@ (800df8c <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 800df20:	4293      	cmp	r3, r2
 800df22:	d00e      	beq.n	800df42 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	4a14      	ldr	r2, [pc, #80]	@ (800df7c <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800df2a:	4293      	cmp	r3, r2
 800df2c:	d009      	beq.n	800df42 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	4a17      	ldr	r2, [pc, #92]	@ (800df90 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 800df34:	4293      	cmp	r3, r2
 800df36:	d004      	beq.n	800df42 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	4a15      	ldr	r2, [pc, #84]	@ (800df94 <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 800df3e:	4293      	cmp	r3, r2
 800df40:	d10c      	bne.n	800df5c <HAL_TIMEx_MasterConfigSynchronization+0x274>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800df48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	689b      	ldr	r3, [r3, #8]
 800df4e:	68ba      	ldr	r2, [r7, #8]
 800df50:	4313      	orrs	r3, r2
 800df52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	68ba      	ldr	r2, [r7, #8]
 800df5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2201      	movs	r2, #1
 800df60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2200      	movs	r2, #0
 800df68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800df6c:	2300      	movs	r3, #0
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3710      	adds	r7, #16
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}
 800df76:	bf00      	nop
 800df78:	40010000 	.word	0x40010000
 800df7c:	40010400 	.word	0x40010400
 800df80:	08018a68 	.word	0x08018a68
 800df84:	40000400 	.word	0x40000400
 800df88:	40000800 	.word	0x40000800
 800df8c:	40000c00 	.word	0x40000c00
 800df90:	40014000 	.word	0x40014000
 800df94:	40001800 	.word	0x40001800

0800df98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b084      	sub	sp, #16
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
 800dfa0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	4a89      	ldr	r2, [pc, #548]	@ (800e1d0 <HAL_TIMEx_ConfigBreakDeadTime+0x238>)
 800dfac:	4293      	cmp	r3, r2
 800dfae:	d009      	beq.n	800dfc4 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	4a87      	ldr	r2, [pc, #540]	@ (800e1d4 <HAL_TIMEx_ConfigBreakDeadTime+0x23c>)
 800dfb6:	4293      	cmp	r3, r2
 800dfb8:	d004      	beq.n	800dfc4 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800dfba:	f240 71f4 	movw	r1, #2036	@ 0x7f4
 800dfbe:	4886      	ldr	r0, [pc, #536]	@ (800e1d8 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800dfc0:	f7f8 fd38 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dfcc:	d008      	beq.n	800dfe0 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d004      	beq.n	800dfe0 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800dfd6:	f240 71f5 	movw	r1, #2037	@ 0x7f5
 800dfda:	487f      	ldr	r0, [pc, #508]	@ (800e1d8 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800dfdc:	f7f8 fd2a 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	685b      	ldr	r3, [r3, #4]
 800dfe4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dfe8:	d008      	beq.n	800dffc <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	685b      	ldr	r3, [r3, #4]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d004      	beq.n	800dffc <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800dff2:	f240 71f6 	movw	r1, #2038	@ 0x7f6
 800dff6:	4878      	ldr	r0, [pc, #480]	@ (800e1d8 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800dff8:	f7f8 fd1c 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	689b      	ldr	r3, [r3, #8]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d013      	beq.n	800e02c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	689b      	ldr	r3, [r3, #8]
 800e008:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e00c:	d00e      	beq.n	800e02c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	689b      	ldr	r3, [r3, #8]
 800e012:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e016:	d009      	beq.n	800e02c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	689b      	ldr	r3, [r3, #8]
 800e01c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e020:	d004      	beq.n	800e02c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800e022:	f240 71f7 	movw	r1, #2039	@ 0x7f7
 800e026:	486c      	ldr	r0, [pc, #432]	@ (800e1d8 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800e028:	f7f8 fd04 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	68db      	ldr	r3, [r3, #12]
 800e030:	2bff      	cmp	r3, #255	@ 0xff
 800e032:	d904      	bls.n	800e03e <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 800e034:	f44f 61ff 	mov.w	r1, #2040	@ 0x7f8
 800e038:	4867      	ldr	r0, [pc, #412]	@ (800e1d8 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800e03a:	f7f8 fcfb 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	691b      	ldr	r3, [r3, #16]
 800e042:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e046:	d008      	beq.n	800e05a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	691b      	ldr	r3, [r3, #16]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d004      	beq.n	800e05a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800e050:	f240 71f9 	movw	r1, #2041	@ 0x7f9
 800e054:	4860      	ldr	r0, [pc, #384]	@ (800e1d8 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800e056:	f7f8 fced 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	695b      	ldr	r3, [r3, #20]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d009      	beq.n	800e076 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	695b      	ldr	r3, [r3, #20]
 800e066:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e06a:	d004      	beq.n	800e076 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800e06c:	f240 71fa 	movw	r1, #2042	@ 0x7fa
 800e070:	4859      	ldr	r0, [pc, #356]	@ (800e1d8 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800e072:	f7f8 fcdf 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	699b      	ldr	r3, [r3, #24]
 800e07a:	2b0f      	cmp	r3, #15
 800e07c:	d904      	bls.n	800e088 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 800e07e:	f240 71fb 	movw	r1, #2043	@ 0x7fb
 800e082:	4855      	ldr	r0, [pc, #340]	@ (800e1d8 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800e084:	f7f8 fcd6 	bl	8006a34 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e08c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e090:	d008      	beq.n	800e0a4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e096:	2b00      	cmp	r3, #0
 800e098:	d004      	beq.n	800e0a4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800e09a:	f240 71fc 	movw	r1, #2044	@ 0x7fc
 800e09e:	484e      	ldr	r0, [pc, #312]	@ (800e1d8 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800e0a0:	f7f8 fcc8 	bl	8006a34 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e0aa:	2b01      	cmp	r3, #1
 800e0ac:	d101      	bne.n	800e0b2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
 800e0ae:	2302      	movs	r3, #2
 800e0b0:	e08a      	b.n	800e1c8 <HAL_TIMEx_ConfigBreakDeadTime+0x230>
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2201      	movs	r2, #1
 800e0b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	68db      	ldr	r3, [r3, #12]
 800e0c4:	4313      	orrs	r3, r2
 800e0c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	689b      	ldr	r3, [r3, #8]
 800e0d2:	4313      	orrs	r3, r2
 800e0d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	685b      	ldr	r3, [r3, #4]
 800e0e0:	4313      	orrs	r3, r2
 800e0e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	4313      	orrs	r3, r2
 800e0f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	691b      	ldr	r3, [r3, #16]
 800e0fc:	4313      	orrs	r3, r2
 800e0fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	695b      	ldr	r3, [r3, #20]
 800e10a:	4313      	orrs	r3, r2
 800e10c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e118:	4313      	orrs	r3, r2
 800e11a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	699b      	ldr	r3, [r3, #24]
 800e126:	041b      	lsls	r3, r3, #16
 800e128:	4313      	orrs	r3, r2
 800e12a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	4a27      	ldr	r2, [pc, #156]	@ (800e1d0 <HAL_TIMEx_ConfigBreakDeadTime+0x238>)
 800e132:	4293      	cmp	r3, r2
 800e134:	d004      	beq.n	800e140 <HAL_TIMEx_ConfigBreakDeadTime+0x1a8>
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	4a26      	ldr	r2, [pc, #152]	@ (800e1d4 <HAL_TIMEx_ConfigBreakDeadTime+0x23c>)
 800e13c:	4293      	cmp	r3, r2
 800e13e:	d13a      	bne.n	800e1b6 <HAL_TIMEx_ConfigBreakDeadTime+0x21e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	69db      	ldr	r3, [r3, #28]
 800e144:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e148:	d008      	beq.n	800e15c <HAL_TIMEx_ConfigBreakDeadTime+0x1c4>
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	69db      	ldr	r3, [r3, #28]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d004      	beq.n	800e15c <HAL_TIMEx_ConfigBreakDeadTime+0x1c4>
 800e152:	f640 0111 	movw	r1, #2065	@ 0x811
 800e156:	4820      	ldr	r0, [pc, #128]	@ (800e1d8 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800e158:	f7f8 fc6c 	bl	8006a34 <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	6a1b      	ldr	r3, [r3, #32]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d009      	beq.n	800e178 <HAL_TIMEx_ConfigBreakDeadTime+0x1e0>
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	6a1b      	ldr	r3, [r3, #32]
 800e168:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e16c:	d004      	beq.n	800e178 <HAL_TIMEx_ConfigBreakDeadTime+0x1e0>
 800e16e:	f640 0112 	movw	r1, #2066	@ 0x812
 800e172:	4819      	ldr	r0, [pc, #100]	@ (800e1d8 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800e174:	f7f8 fc5e 	bl	8006a34 <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e17c:	2b0f      	cmp	r3, #15
 800e17e:	d904      	bls.n	800e18a <HAL_TIMEx_ConfigBreakDeadTime+0x1f2>
 800e180:	f640 0113 	movw	r1, #2067	@ 0x813
 800e184:	4814      	ldr	r0, [pc, #80]	@ (800e1d8 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800e186:	f7f8 fc55 	bl	8006a34 <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e194:	051b      	lsls	r3, r3, #20
 800e196:	4313      	orrs	r3, r2
 800e198:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	69db      	ldr	r3, [r3, #28]
 800e1a4:	4313      	orrs	r3, r2
 800e1a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	6a1b      	ldr	r3, [r3, #32]
 800e1b2:	4313      	orrs	r3, r2
 800e1b4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	68fa      	ldr	r2, [r7, #12]
 800e1bc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e1c6:	2300      	movs	r3, #0
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3710      	adds	r7, #16
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}
 800e1d0:	40010000 	.word	0x40010000
 800e1d4:	40010400 	.word	0x40010400
 800e1d8:	08018a68 	.word	0x08018a68

0800e1dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e1dc:	b480      	push	{r7}
 800e1de:	b083      	sub	sp, #12
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e1e4:	bf00      	nop
 800e1e6:	370c      	adds	r7, #12
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ee:	4770      	bx	lr

0800e1f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e1f0:	b480      	push	{r7}
 800e1f2:	b083      	sub	sp, #12
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e1f8:	bf00      	nop
 800e1fa:	370c      	adds	r7, #12
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e202:	4770      	bx	lr

0800e204 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e204:	b480      	push	{r7}
 800e206:	b083      	sub	sp, #12
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e20c:	bf00      	nop
 800e20e:	370c      	adds	r7, #12
 800e210:	46bd      	mov	sp, r7
 800e212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e216:	4770      	bx	lr

0800e218 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b082      	sub	sp, #8
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d101      	bne.n	800e22a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e226:	2301      	movs	r3, #1
 800e228:	e09f      	b.n	800e36a <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	699b      	ldr	r3, [r3, #24]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d02d      	beq.n	800e28e <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	4a4f      	ldr	r2, [pc, #316]	@ (800e374 <HAL_UART_Init+0x15c>)
 800e238:	4293      	cmp	r3, r2
 800e23a:	d055      	beq.n	800e2e8 <HAL_UART_Init+0xd0>
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	4a4d      	ldr	r2, [pc, #308]	@ (800e378 <HAL_UART_Init+0x160>)
 800e242:	4293      	cmp	r3, r2
 800e244:	d050      	beq.n	800e2e8 <HAL_UART_Init+0xd0>
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	4a4c      	ldr	r2, [pc, #304]	@ (800e37c <HAL_UART_Init+0x164>)
 800e24c:	4293      	cmp	r3, r2
 800e24e:	d04b      	beq.n	800e2e8 <HAL_UART_Init+0xd0>
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	4a4a      	ldr	r2, [pc, #296]	@ (800e380 <HAL_UART_Init+0x168>)
 800e256:	4293      	cmp	r3, r2
 800e258:	d046      	beq.n	800e2e8 <HAL_UART_Init+0xd0>
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	4a49      	ldr	r2, [pc, #292]	@ (800e384 <HAL_UART_Init+0x16c>)
 800e260:	4293      	cmp	r3, r2
 800e262:	d041      	beq.n	800e2e8 <HAL_UART_Init+0xd0>
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	4a47      	ldr	r2, [pc, #284]	@ (800e388 <HAL_UART_Init+0x170>)
 800e26a:	4293      	cmp	r3, r2
 800e26c:	d03c      	beq.n	800e2e8 <HAL_UART_Init+0xd0>
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	4a46      	ldr	r2, [pc, #280]	@ (800e38c <HAL_UART_Init+0x174>)
 800e274:	4293      	cmp	r3, r2
 800e276:	d037      	beq.n	800e2e8 <HAL_UART_Init+0xd0>
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	4a44      	ldr	r2, [pc, #272]	@ (800e390 <HAL_UART_Init+0x178>)
 800e27e:	4293      	cmp	r3, r2
 800e280:	d032      	beq.n	800e2e8 <HAL_UART_Init+0xd0>
 800e282:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800e286:	4843      	ldr	r0, [pc, #268]	@ (800e394 <HAL_UART_Init+0x17c>)
 800e288:	f7f8 fbd4 	bl	8006a34 <assert_failed>
 800e28c:	e02c      	b.n	800e2e8 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	4a38      	ldr	r2, [pc, #224]	@ (800e374 <HAL_UART_Init+0x15c>)
 800e294:	4293      	cmp	r3, r2
 800e296:	d027      	beq.n	800e2e8 <HAL_UART_Init+0xd0>
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	4a36      	ldr	r2, [pc, #216]	@ (800e378 <HAL_UART_Init+0x160>)
 800e29e:	4293      	cmp	r3, r2
 800e2a0:	d022      	beq.n	800e2e8 <HAL_UART_Init+0xd0>
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	4a35      	ldr	r2, [pc, #212]	@ (800e37c <HAL_UART_Init+0x164>)
 800e2a8:	4293      	cmp	r3, r2
 800e2aa:	d01d      	beq.n	800e2e8 <HAL_UART_Init+0xd0>
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	4a33      	ldr	r2, [pc, #204]	@ (800e380 <HAL_UART_Init+0x168>)
 800e2b2:	4293      	cmp	r3, r2
 800e2b4:	d018      	beq.n	800e2e8 <HAL_UART_Init+0xd0>
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	4a32      	ldr	r2, [pc, #200]	@ (800e384 <HAL_UART_Init+0x16c>)
 800e2bc:	4293      	cmp	r3, r2
 800e2be:	d013      	beq.n	800e2e8 <HAL_UART_Init+0xd0>
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	4a30      	ldr	r2, [pc, #192]	@ (800e388 <HAL_UART_Init+0x170>)
 800e2c6:	4293      	cmp	r3, r2
 800e2c8:	d00e      	beq.n	800e2e8 <HAL_UART_Init+0xd0>
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	4a2f      	ldr	r2, [pc, #188]	@ (800e38c <HAL_UART_Init+0x174>)
 800e2d0:	4293      	cmp	r3, r2
 800e2d2:	d009      	beq.n	800e2e8 <HAL_UART_Init+0xd0>
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	4a2d      	ldr	r2, [pc, #180]	@ (800e390 <HAL_UART_Init+0x178>)
 800e2da:	4293      	cmp	r3, r2
 800e2dc:	d004      	beq.n	800e2e8 <HAL_UART_Init+0xd0>
 800e2de:	f240 1131 	movw	r1, #305	@ 0x131
 800e2e2:	482c      	ldr	r0, [pc, #176]	@ (800e394 <HAL_UART_Init+0x17c>)
 800e2e4:	f7f8 fba6 	bl	8006a34 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d106      	bne.n	800e2fe <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e2f8:	6878      	ldr	r0, [r7, #4]
 800e2fa:	f7f8 ffad 	bl	8007258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	2224      	movs	r2, #36	@ 0x24
 800e302:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	681a      	ldr	r2, [r3, #0]
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	f022 0201 	bic.w	r2, r2, #1
 800e312:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d002      	beq.n	800e322 <HAL_UART_Init+0x10a>
  {
    UART_AdvFeatureConfig(huart);
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f000 fb31 	bl	800e984 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	f000 f838 	bl	800e398 <UART_SetConfig>
 800e328:	4603      	mov	r3, r0
 800e32a:	2b01      	cmp	r3, #1
 800e32c:	d101      	bne.n	800e332 <HAL_UART_Init+0x11a>
  {
    return HAL_ERROR;
 800e32e:	2301      	movs	r3, #1
 800e330:	e01b      	b.n	800e36a <HAL_UART_Init+0x152>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	685a      	ldr	r2, [r3, #4]
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e340:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	689a      	ldr	r2, [r3, #8]
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e350:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	681a      	ldr	r2, [r3, #0]
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	f042 0201 	orr.w	r2, r2, #1
 800e360:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f000 fc66 	bl	800ec34 <UART_CheckIdleState>
 800e368:	4603      	mov	r3, r0
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3708      	adds	r7, #8
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
 800e372:	bf00      	nop
 800e374:	40011000 	.word	0x40011000
 800e378:	40004400 	.word	0x40004400
 800e37c:	40004800 	.word	0x40004800
 800e380:	40004c00 	.word	0x40004c00
 800e384:	40005000 	.word	0x40005000
 800e388:	40011400 	.word	0x40011400
 800e38c:	40007800 	.word	0x40007800
 800e390:	40007c00 	.word	0x40007c00
 800e394:	08018aa4 	.word	0x08018aa4

0800e398 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b088      	sub	sp, #32
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	685b      	ldr	r3, [r3, #4]
 800e3a8:	4aa0      	ldr	r2, [pc, #640]	@ (800e62c <UART_SetConfig+0x294>)
 800e3aa:	4293      	cmp	r3, r2
 800e3ac:	d904      	bls.n	800e3b8 <UART_SetConfig+0x20>
 800e3ae:	f640 315f 	movw	r1, #2911	@ 0xb5f
 800e3b2:	489f      	ldr	r0, [pc, #636]	@ (800e630 <UART_SetConfig+0x298>)
 800e3b4:	f7f8 fb3e 	bl	8006a34 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	689b      	ldr	r3, [r3, #8]
 800e3bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e3c0:	d00d      	beq.n	800e3de <UART_SetConfig+0x46>
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	689b      	ldr	r3, [r3, #8]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d009      	beq.n	800e3de <UART_SetConfig+0x46>
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	689b      	ldr	r3, [r3, #8]
 800e3ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e3d2:	d004      	beq.n	800e3de <UART_SetConfig+0x46>
 800e3d4:	f44f 6136 	mov.w	r1, #2912	@ 0xb60
 800e3d8:	4895      	ldr	r0, [pc, #596]	@ (800e630 <UART_SetConfig+0x298>)
 800e3da:	f7f8 fb2b 	bl	8006a34 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	68db      	ldr	r3, [r3, #12]
 800e3e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e3e6:	d012      	beq.n	800e40e <UART_SetConfig+0x76>
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	68db      	ldr	r3, [r3, #12]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d00e      	beq.n	800e40e <UART_SetConfig+0x76>
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	68db      	ldr	r3, [r3, #12]
 800e3f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e3f8:	d009      	beq.n	800e40e <UART_SetConfig+0x76>
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	68db      	ldr	r3, [r3, #12]
 800e3fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e402:	d004      	beq.n	800e40e <UART_SetConfig+0x76>
 800e404:	f640 3161 	movw	r1, #2913	@ 0xb61
 800e408:	4889      	ldr	r0, [pc, #548]	@ (800e630 <UART_SetConfig+0x298>)
 800e40a:	f7f8 fb13 	bl	8006a34 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6a1b      	ldr	r3, [r3, #32]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d009      	beq.n	800e42a <UART_SetConfig+0x92>
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6a1b      	ldr	r3, [r3, #32]
 800e41a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e41e:	d004      	beq.n	800e42a <UART_SetConfig+0x92>
 800e420:	f640 3162 	movw	r1, #2914	@ 0xb62
 800e424:	4882      	ldr	r0, [pc, #520]	@ (800e630 <UART_SetConfig+0x298>)
 800e426:	f7f8 fb05 	bl	8006a34 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	691b      	ldr	r3, [r3, #16]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d00e      	beq.n	800e450 <UART_SetConfig+0xb8>
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	691b      	ldr	r3, [r3, #16]
 800e436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e43a:	d009      	beq.n	800e450 <UART_SetConfig+0xb8>
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	691b      	ldr	r3, [r3, #16]
 800e440:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800e444:	d004      	beq.n	800e450 <UART_SetConfig+0xb8>
 800e446:	f640 3164 	movw	r1, #2916	@ 0xb64
 800e44a:	4879      	ldr	r0, [pc, #484]	@ (800e630 <UART_SetConfig+0x298>)
 800e44c:	f7f8 faf2 	bl	8006a34 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	695b      	ldr	r3, [r3, #20]
 800e454:	f023 030c 	bic.w	r3, r3, #12
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d103      	bne.n	800e464 <UART_SetConfig+0xcc>
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	695b      	ldr	r3, [r3, #20]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d104      	bne.n	800e46e <UART_SetConfig+0xd6>
 800e464:	f640 3165 	movw	r1, #2917	@ 0xb65
 800e468:	4871      	ldr	r0, [pc, #452]	@ (800e630 <UART_SetConfig+0x298>)
 800e46a:	f7f8 fae3 	bl	8006a34 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	699b      	ldr	r3, [r3, #24]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d013      	beq.n	800e49e <UART_SetConfig+0x106>
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	699b      	ldr	r3, [r3, #24]
 800e47a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e47e:	d00e      	beq.n	800e49e <UART_SetConfig+0x106>
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	699b      	ldr	r3, [r3, #24]
 800e484:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e488:	d009      	beq.n	800e49e <UART_SetConfig+0x106>
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	699b      	ldr	r3, [r3, #24]
 800e48e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e492:	d004      	beq.n	800e49e <UART_SetConfig+0x106>
 800e494:	f640 3166 	movw	r1, #2918	@ 0xb66
 800e498:	4865      	ldr	r0, [pc, #404]	@ (800e630 <UART_SetConfig+0x298>)
 800e49a:	f7f8 facb 	bl	8006a34 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	69db      	ldr	r3, [r3, #28]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d009      	beq.n	800e4ba <UART_SetConfig+0x122>
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	69db      	ldr	r3, [r3, #28]
 800e4aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e4ae:	d004      	beq.n	800e4ba <UART_SetConfig+0x122>
 800e4b0:	f640 3167 	movw	r1, #2919	@ 0xb67
 800e4b4:	485e      	ldr	r0, [pc, #376]	@ (800e630 <UART_SetConfig+0x298>)
 800e4b6:	f7f8 fabd 	bl	8006a34 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	689a      	ldr	r2, [r3, #8]
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	691b      	ldr	r3, [r3, #16]
 800e4c2:	431a      	orrs	r2, r3
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	695b      	ldr	r3, [r3, #20]
 800e4c8:	431a      	orrs	r2, r3
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	69db      	ldr	r3, [r3, #28]
 800e4ce:	4313      	orrs	r3, r2
 800e4d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	681a      	ldr	r2, [r3, #0]
 800e4d8:	4b56      	ldr	r3, [pc, #344]	@ (800e634 <UART_SetConfig+0x29c>)
 800e4da:	4013      	ands	r3, r2
 800e4dc:	687a      	ldr	r2, [r7, #4]
 800e4de:	6812      	ldr	r2, [r2, #0]
 800e4e0:	6979      	ldr	r1, [r7, #20]
 800e4e2:	430b      	orrs	r3, r1
 800e4e4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	685b      	ldr	r3, [r3, #4]
 800e4ec:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	68da      	ldr	r2, [r3, #12]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	430a      	orrs	r2, r1
 800e4fa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	699b      	ldr	r3, [r3, #24]
 800e500:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	6a1b      	ldr	r3, [r3, #32]
 800e506:	697a      	ldr	r2, [r7, #20]
 800e508:	4313      	orrs	r3, r2
 800e50a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	689b      	ldr	r3, [r3, #8]
 800e512:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	697a      	ldr	r2, [r7, #20]
 800e51c:	430a      	orrs	r2, r1
 800e51e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	4a44      	ldr	r2, [pc, #272]	@ (800e638 <UART_SetConfig+0x2a0>)
 800e526:	4293      	cmp	r3, r2
 800e528:	d121      	bne.n	800e56e <UART_SetConfig+0x1d6>
 800e52a:	4b44      	ldr	r3, [pc, #272]	@ (800e63c <UART_SetConfig+0x2a4>)
 800e52c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e530:	f003 0303 	and.w	r3, r3, #3
 800e534:	2b03      	cmp	r3, #3
 800e536:	d817      	bhi.n	800e568 <UART_SetConfig+0x1d0>
 800e538:	a201      	add	r2, pc, #4	@ (adr r2, 800e540 <UART_SetConfig+0x1a8>)
 800e53a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e53e:	bf00      	nop
 800e540:	0800e551 	.word	0x0800e551
 800e544:	0800e55d 	.word	0x0800e55d
 800e548:	0800e557 	.word	0x0800e557
 800e54c:	0800e563 	.word	0x0800e563
 800e550:	2301      	movs	r3, #1
 800e552:	77fb      	strb	r3, [r7, #31]
 800e554:	e14c      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e556:	2302      	movs	r3, #2
 800e558:	77fb      	strb	r3, [r7, #31]
 800e55a:	e149      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e55c:	2304      	movs	r3, #4
 800e55e:	77fb      	strb	r3, [r7, #31]
 800e560:	e146      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e562:	2308      	movs	r3, #8
 800e564:	77fb      	strb	r3, [r7, #31]
 800e566:	e143      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e568:	2310      	movs	r3, #16
 800e56a:	77fb      	strb	r3, [r7, #31]
 800e56c:	e140      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	4a33      	ldr	r2, [pc, #204]	@ (800e640 <UART_SetConfig+0x2a8>)
 800e574:	4293      	cmp	r3, r2
 800e576:	d132      	bne.n	800e5de <UART_SetConfig+0x246>
 800e578:	4b30      	ldr	r3, [pc, #192]	@ (800e63c <UART_SetConfig+0x2a4>)
 800e57a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e57e:	f003 030c 	and.w	r3, r3, #12
 800e582:	2b0c      	cmp	r3, #12
 800e584:	d828      	bhi.n	800e5d8 <UART_SetConfig+0x240>
 800e586:	a201      	add	r2, pc, #4	@ (adr r2, 800e58c <UART_SetConfig+0x1f4>)
 800e588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e58c:	0800e5c1 	.word	0x0800e5c1
 800e590:	0800e5d9 	.word	0x0800e5d9
 800e594:	0800e5d9 	.word	0x0800e5d9
 800e598:	0800e5d9 	.word	0x0800e5d9
 800e59c:	0800e5cd 	.word	0x0800e5cd
 800e5a0:	0800e5d9 	.word	0x0800e5d9
 800e5a4:	0800e5d9 	.word	0x0800e5d9
 800e5a8:	0800e5d9 	.word	0x0800e5d9
 800e5ac:	0800e5c7 	.word	0x0800e5c7
 800e5b0:	0800e5d9 	.word	0x0800e5d9
 800e5b4:	0800e5d9 	.word	0x0800e5d9
 800e5b8:	0800e5d9 	.word	0x0800e5d9
 800e5bc:	0800e5d3 	.word	0x0800e5d3
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	77fb      	strb	r3, [r7, #31]
 800e5c4:	e114      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e5c6:	2302      	movs	r3, #2
 800e5c8:	77fb      	strb	r3, [r7, #31]
 800e5ca:	e111      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e5cc:	2304      	movs	r3, #4
 800e5ce:	77fb      	strb	r3, [r7, #31]
 800e5d0:	e10e      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e5d2:	2308      	movs	r3, #8
 800e5d4:	77fb      	strb	r3, [r7, #31]
 800e5d6:	e10b      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e5d8:	2310      	movs	r3, #16
 800e5da:	77fb      	strb	r3, [r7, #31]
 800e5dc:	e108      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	4a18      	ldr	r2, [pc, #96]	@ (800e644 <UART_SetConfig+0x2ac>)
 800e5e4:	4293      	cmp	r3, r2
 800e5e6:	d12f      	bne.n	800e648 <UART_SetConfig+0x2b0>
 800e5e8:	4b14      	ldr	r3, [pc, #80]	@ (800e63c <UART_SetConfig+0x2a4>)
 800e5ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e5ee:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800e5f2:	2b30      	cmp	r3, #48	@ 0x30
 800e5f4:	d013      	beq.n	800e61e <UART_SetConfig+0x286>
 800e5f6:	2b30      	cmp	r3, #48	@ 0x30
 800e5f8:	d814      	bhi.n	800e624 <UART_SetConfig+0x28c>
 800e5fa:	2b20      	cmp	r3, #32
 800e5fc:	d009      	beq.n	800e612 <UART_SetConfig+0x27a>
 800e5fe:	2b20      	cmp	r3, #32
 800e600:	d810      	bhi.n	800e624 <UART_SetConfig+0x28c>
 800e602:	2b00      	cmp	r3, #0
 800e604:	d002      	beq.n	800e60c <UART_SetConfig+0x274>
 800e606:	2b10      	cmp	r3, #16
 800e608:	d006      	beq.n	800e618 <UART_SetConfig+0x280>
 800e60a:	e00b      	b.n	800e624 <UART_SetConfig+0x28c>
 800e60c:	2300      	movs	r3, #0
 800e60e:	77fb      	strb	r3, [r7, #31]
 800e610:	e0ee      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e612:	2302      	movs	r3, #2
 800e614:	77fb      	strb	r3, [r7, #31]
 800e616:	e0eb      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e618:	2304      	movs	r3, #4
 800e61a:	77fb      	strb	r3, [r7, #31]
 800e61c:	e0e8      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e61e:	2308      	movs	r3, #8
 800e620:	77fb      	strb	r3, [r7, #31]
 800e622:	e0e5      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e624:	2310      	movs	r3, #16
 800e626:	77fb      	strb	r3, [r7, #31]
 800e628:	e0e2      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e62a:	bf00      	nop
 800e62c:	019bfcc0 	.word	0x019bfcc0
 800e630:	08018aa4 	.word	0x08018aa4
 800e634:	efff69f3 	.word	0xefff69f3
 800e638:	40011000 	.word	0x40011000
 800e63c:	40023800 	.word	0x40023800
 800e640:	40004400 	.word	0x40004400
 800e644:	40004800 	.word	0x40004800
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	4aa5      	ldr	r2, [pc, #660]	@ (800e8e4 <UART_SetConfig+0x54c>)
 800e64e:	4293      	cmp	r3, r2
 800e650:	d120      	bne.n	800e694 <UART_SetConfig+0x2fc>
 800e652:	4ba5      	ldr	r3, [pc, #660]	@ (800e8e8 <UART_SetConfig+0x550>)
 800e654:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e658:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800e65c:	2bc0      	cmp	r3, #192	@ 0xc0
 800e65e:	d013      	beq.n	800e688 <UART_SetConfig+0x2f0>
 800e660:	2bc0      	cmp	r3, #192	@ 0xc0
 800e662:	d814      	bhi.n	800e68e <UART_SetConfig+0x2f6>
 800e664:	2b80      	cmp	r3, #128	@ 0x80
 800e666:	d009      	beq.n	800e67c <UART_SetConfig+0x2e4>
 800e668:	2b80      	cmp	r3, #128	@ 0x80
 800e66a:	d810      	bhi.n	800e68e <UART_SetConfig+0x2f6>
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d002      	beq.n	800e676 <UART_SetConfig+0x2de>
 800e670:	2b40      	cmp	r3, #64	@ 0x40
 800e672:	d006      	beq.n	800e682 <UART_SetConfig+0x2ea>
 800e674:	e00b      	b.n	800e68e <UART_SetConfig+0x2f6>
 800e676:	2300      	movs	r3, #0
 800e678:	77fb      	strb	r3, [r7, #31]
 800e67a:	e0b9      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e67c:	2302      	movs	r3, #2
 800e67e:	77fb      	strb	r3, [r7, #31]
 800e680:	e0b6      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e682:	2304      	movs	r3, #4
 800e684:	77fb      	strb	r3, [r7, #31]
 800e686:	e0b3      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e688:	2308      	movs	r3, #8
 800e68a:	77fb      	strb	r3, [r7, #31]
 800e68c:	e0b0      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e68e:	2310      	movs	r3, #16
 800e690:	77fb      	strb	r3, [r7, #31]
 800e692:	e0ad      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	4a94      	ldr	r2, [pc, #592]	@ (800e8ec <UART_SetConfig+0x554>)
 800e69a:	4293      	cmp	r3, r2
 800e69c:	d125      	bne.n	800e6ea <UART_SetConfig+0x352>
 800e69e:	4b92      	ldr	r3, [pc, #584]	@ (800e8e8 <UART_SetConfig+0x550>)
 800e6a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e6a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e6a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e6ac:	d017      	beq.n	800e6de <UART_SetConfig+0x346>
 800e6ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e6b2:	d817      	bhi.n	800e6e4 <UART_SetConfig+0x34c>
 800e6b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e6b8:	d00b      	beq.n	800e6d2 <UART_SetConfig+0x33a>
 800e6ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e6be:	d811      	bhi.n	800e6e4 <UART_SetConfig+0x34c>
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d003      	beq.n	800e6cc <UART_SetConfig+0x334>
 800e6c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e6c8:	d006      	beq.n	800e6d8 <UART_SetConfig+0x340>
 800e6ca:	e00b      	b.n	800e6e4 <UART_SetConfig+0x34c>
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	77fb      	strb	r3, [r7, #31]
 800e6d0:	e08e      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e6d2:	2302      	movs	r3, #2
 800e6d4:	77fb      	strb	r3, [r7, #31]
 800e6d6:	e08b      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e6d8:	2304      	movs	r3, #4
 800e6da:	77fb      	strb	r3, [r7, #31]
 800e6dc:	e088      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e6de:	2308      	movs	r3, #8
 800e6e0:	77fb      	strb	r3, [r7, #31]
 800e6e2:	e085      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e6e4:	2310      	movs	r3, #16
 800e6e6:	77fb      	strb	r3, [r7, #31]
 800e6e8:	e082      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	4a80      	ldr	r2, [pc, #512]	@ (800e8f0 <UART_SetConfig+0x558>)
 800e6f0:	4293      	cmp	r3, r2
 800e6f2:	d125      	bne.n	800e740 <UART_SetConfig+0x3a8>
 800e6f4:	4b7c      	ldr	r3, [pc, #496]	@ (800e8e8 <UART_SetConfig+0x550>)
 800e6f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e6fa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800e6fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e702:	d017      	beq.n	800e734 <UART_SetConfig+0x39c>
 800e704:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e708:	d817      	bhi.n	800e73a <UART_SetConfig+0x3a2>
 800e70a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e70e:	d00b      	beq.n	800e728 <UART_SetConfig+0x390>
 800e710:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e714:	d811      	bhi.n	800e73a <UART_SetConfig+0x3a2>
 800e716:	2b00      	cmp	r3, #0
 800e718:	d003      	beq.n	800e722 <UART_SetConfig+0x38a>
 800e71a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e71e:	d006      	beq.n	800e72e <UART_SetConfig+0x396>
 800e720:	e00b      	b.n	800e73a <UART_SetConfig+0x3a2>
 800e722:	2301      	movs	r3, #1
 800e724:	77fb      	strb	r3, [r7, #31]
 800e726:	e063      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e728:	2302      	movs	r3, #2
 800e72a:	77fb      	strb	r3, [r7, #31]
 800e72c:	e060      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e72e:	2304      	movs	r3, #4
 800e730:	77fb      	strb	r3, [r7, #31]
 800e732:	e05d      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e734:	2308      	movs	r3, #8
 800e736:	77fb      	strb	r3, [r7, #31]
 800e738:	e05a      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e73a:	2310      	movs	r3, #16
 800e73c:	77fb      	strb	r3, [r7, #31]
 800e73e:	e057      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	4a6b      	ldr	r2, [pc, #428]	@ (800e8f4 <UART_SetConfig+0x55c>)
 800e746:	4293      	cmp	r3, r2
 800e748:	d125      	bne.n	800e796 <UART_SetConfig+0x3fe>
 800e74a:	4b67      	ldr	r3, [pc, #412]	@ (800e8e8 <UART_SetConfig+0x550>)
 800e74c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e750:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800e754:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e758:	d017      	beq.n	800e78a <UART_SetConfig+0x3f2>
 800e75a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e75e:	d817      	bhi.n	800e790 <UART_SetConfig+0x3f8>
 800e760:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e764:	d00b      	beq.n	800e77e <UART_SetConfig+0x3e6>
 800e766:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e76a:	d811      	bhi.n	800e790 <UART_SetConfig+0x3f8>
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d003      	beq.n	800e778 <UART_SetConfig+0x3e0>
 800e770:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e774:	d006      	beq.n	800e784 <UART_SetConfig+0x3ec>
 800e776:	e00b      	b.n	800e790 <UART_SetConfig+0x3f8>
 800e778:	2300      	movs	r3, #0
 800e77a:	77fb      	strb	r3, [r7, #31]
 800e77c:	e038      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e77e:	2302      	movs	r3, #2
 800e780:	77fb      	strb	r3, [r7, #31]
 800e782:	e035      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e784:	2304      	movs	r3, #4
 800e786:	77fb      	strb	r3, [r7, #31]
 800e788:	e032      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e78a:	2308      	movs	r3, #8
 800e78c:	77fb      	strb	r3, [r7, #31]
 800e78e:	e02f      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e790:	2310      	movs	r3, #16
 800e792:	77fb      	strb	r3, [r7, #31]
 800e794:	e02c      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	4a57      	ldr	r2, [pc, #348]	@ (800e8f8 <UART_SetConfig+0x560>)
 800e79c:	4293      	cmp	r3, r2
 800e79e:	d125      	bne.n	800e7ec <UART_SetConfig+0x454>
 800e7a0:	4b51      	ldr	r3, [pc, #324]	@ (800e8e8 <UART_SetConfig+0x550>)
 800e7a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e7a6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800e7aa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800e7ae:	d017      	beq.n	800e7e0 <UART_SetConfig+0x448>
 800e7b0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800e7b4:	d817      	bhi.n	800e7e6 <UART_SetConfig+0x44e>
 800e7b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e7ba:	d00b      	beq.n	800e7d4 <UART_SetConfig+0x43c>
 800e7bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e7c0:	d811      	bhi.n	800e7e6 <UART_SetConfig+0x44e>
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d003      	beq.n	800e7ce <UART_SetConfig+0x436>
 800e7c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e7ca:	d006      	beq.n	800e7da <UART_SetConfig+0x442>
 800e7cc:	e00b      	b.n	800e7e6 <UART_SetConfig+0x44e>
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	77fb      	strb	r3, [r7, #31]
 800e7d2:	e00d      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e7d4:	2302      	movs	r3, #2
 800e7d6:	77fb      	strb	r3, [r7, #31]
 800e7d8:	e00a      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e7da:	2304      	movs	r3, #4
 800e7dc:	77fb      	strb	r3, [r7, #31]
 800e7de:	e007      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e7e0:	2308      	movs	r3, #8
 800e7e2:	77fb      	strb	r3, [r7, #31]
 800e7e4:	e004      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e7e6:	2310      	movs	r3, #16
 800e7e8:	77fb      	strb	r3, [r7, #31]
 800e7ea:	e001      	b.n	800e7f0 <UART_SetConfig+0x458>
 800e7ec:	2310      	movs	r3, #16
 800e7ee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	69db      	ldr	r3, [r3, #28]
 800e7f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e7f8:	d15c      	bne.n	800e8b4 <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 800e7fa:	7ffb      	ldrb	r3, [r7, #31]
 800e7fc:	2b08      	cmp	r3, #8
 800e7fe:	d828      	bhi.n	800e852 <UART_SetConfig+0x4ba>
 800e800:	a201      	add	r2, pc, #4	@ (adr r2, 800e808 <UART_SetConfig+0x470>)
 800e802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e806:	bf00      	nop
 800e808:	0800e82d 	.word	0x0800e82d
 800e80c:	0800e835 	.word	0x0800e835
 800e810:	0800e83d 	.word	0x0800e83d
 800e814:	0800e853 	.word	0x0800e853
 800e818:	0800e843 	.word	0x0800e843
 800e81c:	0800e853 	.word	0x0800e853
 800e820:	0800e853 	.word	0x0800e853
 800e824:	0800e853 	.word	0x0800e853
 800e828:	0800e84b 	.word	0x0800e84b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e82c:	f7fa faf2 	bl	8008e14 <HAL_RCC_GetPCLK1Freq>
 800e830:	61b8      	str	r0, [r7, #24]
        break;
 800e832:	e013      	b.n	800e85c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e834:	f7fa fb02 	bl	8008e3c <HAL_RCC_GetPCLK2Freq>
 800e838:	61b8      	str	r0, [r7, #24]
        break;
 800e83a:	e00f      	b.n	800e85c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e83c:	4b2f      	ldr	r3, [pc, #188]	@ (800e8fc <UART_SetConfig+0x564>)
 800e83e:	61bb      	str	r3, [r7, #24]
        break;
 800e840:	e00c      	b.n	800e85c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e842:	f7fa fa15 	bl	8008c70 <HAL_RCC_GetSysClockFreq>
 800e846:	61b8      	str	r0, [r7, #24]
        break;
 800e848:	e008      	b.n	800e85c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e84a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e84e:	61bb      	str	r3, [r7, #24]
        break;
 800e850:	e004      	b.n	800e85c <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800e852:	2300      	movs	r3, #0
 800e854:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e856:	2301      	movs	r3, #1
 800e858:	77bb      	strb	r3, [r7, #30]
        break;
 800e85a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e85c:	69bb      	ldr	r3, [r7, #24]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	f000 8082 	beq.w	800e968 <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e864:	69bb      	ldr	r3, [r7, #24]
 800e866:	005a      	lsls	r2, r3, #1
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	685b      	ldr	r3, [r3, #4]
 800e86c:	085b      	lsrs	r3, r3, #1
 800e86e:	441a      	add	r2, r3
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	685b      	ldr	r3, [r3, #4]
 800e874:	fbb2 f3f3 	udiv	r3, r2, r3
 800e878:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e87a:	693b      	ldr	r3, [r7, #16]
 800e87c:	2b0f      	cmp	r3, #15
 800e87e:	d916      	bls.n	800e8ae <UART_SetConfig+0x516>
 800e880:	693b      	ldr	r3, [r7, #16]
 800e882:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e886:	d212      	bcs.n	800e8ae <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e888:	693b      	ldr	r3, [r7, #16]
 800e88a:	b29b      	uxth	r3, r3
 800e88c:	f023 030f 	bic.w	r3, r3, #15
 800e890:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e892:	693b      	ldr	r3, [r7, #16]
 800e894:	085b      	lsrs	r3, r3, #1
 800e896:	b29b      	uxth	r3, r3
 800e898:	f003 0307 	and.w	r3, r3, #7
 800e89c:	b29a      	uxth	r2, r3
 800e89e:	89fb      	ldrh	r3, [r7, #14]
 800e8a0:	4313      	orrs	r3, r2
 800e8a2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	89fa      	ldrh	r2, [r7, #14]
 800e8aa:	60da      	str	r2, [r3, #12]
 800e8ac:	e05c      	b.n	800e968 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	77bb      	strb	r3, [r7, #30]
 800e8b2:	e059      	b.n	800e968 <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e8b4:	7ffb      	ldrb	r3, [r7, #31]
 800e8b6:	2b08      	cmp	r3, #8
 800e8b8:	d835      	bhi.n	800e926 <UART_SetConfig+0x58e>
 800e8ba:	a201      	add	r2, pc, #4	@ (adr r2, 800e8c0 <UART_SetConfig+0x528>)
 800e8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8c0:	0800e901 	.word	0x0800e901
 800e8c4:	0800e909 	.word	0x0800e909
 800e8c8:	0800e911 	.word	0x0800e911
 800e8cc:	0800e927 	.word	0x0800e927
 800e8d0:	0800e917 	.word	0x0800e917
 800e8d4:	0800e927 	.word	0x0800e927
 800e8d8:	0800e927 	.word	0x0800e927
 800e8dc:	0800e927 	.word	0x0800e927
 800e8e0:	0800e91f 	.word	0x0800e91f
 800e8e4:	40004c00 	.word	0x40004c00
 800e8e8:	40023800 	.word	0x40023800
 800e8ec:	40005000 	.word	0x40005000
 800e8f0:	40011400 	.word	0x40011400
 800e8f4:	40007800 	.word	0x40007800
 800e8f8:	40007c00 	.word	0x40007c00
 800e8fc:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e900:	f7fa fa88 	bl	8008e14 <HAL_RCC_GetPCLK1Freq>
 800e904:	61b8      	str	r0, [r7, #24]
        break;
 800e906:	e013      	b.n	800e930 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e908:	f7fa fa98 	bl	8008e3c <HAL_RCC_GetPCLK2Freq>
 800e90c:	61b8      	str	r0, [r7, #24]
        break;
 800e90e:	e00f      	b.n	800e930 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e910:	4b1b      	ldr	r3, [pc, #108]	@ (800e980 <UART_SetConfig+0x5e8>)
 800e912:	61bb      	str	r3, [r7, #24]
        break;
 800e914:	e00c      	b.n	800e930 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e916:	f7fa f9ab 	bl	8008c70 <HAL_RCC_GetSysClockFreq>
 800e91a:	61b8      	str	r0, [r7, #24]
        break;
 800e91c:	e008      	b.n	800e930 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e91e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e922:	61bb      	str	r3, [r7, #24]
        break;
 800e924:	e004      	b.n	800e930 <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 800e926:	2300      	movs	r3, #0
 800e928:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e92a:	2301      	movs	r3, #1
 800e92c:	77bb      	strb	r3, [r7, #30]
        break;
 800e92e:	bf00      	nop
    }

    if (pclk != 0U)
 800e930:	69bb      	ldr	r3, [r7, #24]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d018      	beq.n	800e968 <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	685b      	ldr	r3, [r3, #4]
 800e93a:	085a      	lsrs	r2, r3, #1
 800e93c:	69bb      	ldr	r3, [r7, #24]
 800e93e:	441a      	add	r2, r3
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	685b      	ldr	r3, [r3, #4]
 800e944:	fbb2 f3f3 	udiv	r3, r2, r3
 800e948:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	2b0f      	cmp	r3, #15
 800e94e:	d909      	bls.n	800e964 <UART_SetConfig+0x5cc>
 800e950:	693b      	ldr	r3, [r7, #16]
 800e952:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e956:	d205      	bcs.n	800e964 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e958:	693b      	ldr	r3, [r7, #16]
 800e95a:	b29a      	uxth	r2, r3
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	60da      	str	r2, [r3, #12]
 800e962:	e001      	b.n	800e968 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800e964:	2301      	movs	r3, #1
 800e966:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2200      	movs	r2, #0
 800e96c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	2200      	movs	r2, #0
 800e972:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800e974:	7fbb      	ldrb	r3, [r7, #30]
}
 800e976:	4618      	mov	r0, r3
 800e978:	3720      	adds	r7, #32
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}
 800e97e:	bf00      	nop
 800e980:	00f42400 	.word	0x00f42400

0800e984 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b082      	sub	sp, #8
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e990:	2bff      	cmp	r3, #255	@ 0xff
 800e992:	d904      	bls.n	800e99e <UART_AdvFeatureConfig+0x1a>
 800e994:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 800e998:	488e      	ldr	r0, [pc, #568]	@ (800ebd4 <UART_AdvFeatureConfig+0x250>)
 800e99a:	f7f8 f84b 	bl	8006a34 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9a2:	f003 0308 	and.w	r3, r3, #8
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d018      	beq.n	800e9dc <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d009      	beq.n	800e9c6 <UART_AdvFeatureConfig+0x42>
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e9b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e9ba:	d004      	beq.n	800e9c6 <UART_AdvFeatureConfig+0x42>
 800e9bc:	f640 31ed 	movw	r1, #3053	@ 0xbed
 800e9c0:	4884      	ldr	r0, [pc, #528]	@ (800ebd4 <UART_AdvFeatureConfig+0x250>)
 800e9c2:	f7f8 f837 	bl	8006a34 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	685b      	ldr	r3, [r3, #4]
 800e9cc:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	430a      	orrs	r2, r1
 800e9da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9e0:	f003 0301 	and.w	r3, r3, #1
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d018      	beq.n	800ea1a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d009      	beq.n	800ea04 <UART_AdvFeatureConfig+0x80>
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e9f8:	d004      	beq.n	800ea04 <UART_AdvFeatureConfig+0x80>
 800e9fa:	f640 31f4 	movw	r1, #3060	@ 0xbf4
 800e9fe:	4875      	ldr	r0, [pc, #468]	@ (800ebd4 <UART_AdvFeatureConfig+0x250>)
 800ea00:	f7f8 f818 	bl	8006a34 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	685b      	ldr	r3, [r3, #4]
 800ea0a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	430a      	orrs	r2, r1
 800ea18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea1e:	f003 0302 	and.w	r3, r3, #2
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d018      	beq.n	800ea58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d009      	beq.n	800ea42 <UART_AdvFeatureConfig+0xbe>
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ea36:	d004      	beq.n	800ea42 <UART_AdvFeatureConfig+0xbe>
 800ea38:	f640 31fb 	movw	r1, #3067	@ 0xbfb
 800ea3c:	4865      	ldr	r0, [pc, #404]	@ (800ebd4 <UART_AdvFeatureConfig+0x250>)
 800ea3e:	f7f7 fff9 	bl	8006a34 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	685b      	ldr	r3, [r3, #4]
 800ea48:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	430a      	orrs	r2, r1
 800ea56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea5c:	f003 0304 	and.w	r3, r3, #4
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d018      	beq.n	800ea96 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d009      	beq.n	800ea80 <UART_AdvFeatureConfig+0xfc>
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea70:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ea74:	d004      	beq.n	800ea80 <UART_AdvFeatureConfig+0xfc>
 800ea76:	f640 4102 	movw	r1, #3074	@ 0xc02
 800ea7a:	4856      	ldr	r0, [pc, #344]	@ (800ebd4 <UART_AdvFeatureConfig+0x250>)
 800ea7c:	f7f7 ffda 	bl	8006a34 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	685b      	ldr	r3, [r3, #4]
 800ea86:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	430a      	orrs	r2, r1
 800ea94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea9a:	f003 0310 	and.w	r3, r3, #16
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d018      	beq.n	800ead4 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d009      	beq.n	800eabe <UART_AdvFeatureConfig+0x13a>
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eaae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eab2:	d004      	beq.n	800eabe <UART_AdvFeatureConfig+0x13a>
 800eab4:	f640 4109 	movw	r1, #3081	@ 0xc09
 800eab8:	4846      	ldr	r0, [pc, #280]	@ (800ebd4 <UART_AdvFeatureConfig+0x250>)
 800eaba:	f7f7 ffbb 	bl	8006a34 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	689b      	ldr	r3, [r3, #8]
 800eac4:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	430a      	orrs	r2, r1
 800ead2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ead8:	f003 0320 	and.w	r3, r3, #32
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d018      	beq.n	800eb12 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d009      	beq.n	800eafc <UART_AdvFeatureConfig+0x178>
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eaec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eaf0:	d004      	beq.n	800eafc <UART_AdvFeatureConfig+0x178>
 800eaf2:	f44f 6141 	mov.w	r1, #3088	@ 0xc10
 800eaf6:	4837      	ldr	r0, [pc, #220]	@ (800ebd4 <UART_AdvFeatureConfig+0x250>)
 800eaf8:	f7f7 ff9c 	bl	8006a34 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	689b      	ldr	r3, [r3, #8]
 800eb02:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	430a      	orrs	r2, r1
 800eb10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d064      	beq.n	800ebe8 <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	4a2d      	ldr	r2, [pc, #180]	@ (800ebd8 <UART_AdvFeatureConfig+0x254>)
 800eb24:	4293      	cmp	r3, r2
 800eb26:	d013      	beq.n	800eb50 <UART_AdvFeatureConfig+0x1cc>
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	4a2b      	ldr	r2, [pc, #172]	@ (800ebdc <UART_AdvFeatureConfig+0x258>)
 800eb2e:	4293      	cmp	r3, r2
 800eb30:	d00e      	beq.n	800eb50 <UART_AdvFeatureConfig+0x1cc>
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	4a2a      	ldr	r2, [pc, #168]	@ (800ebe0 <UART_AdvFeatureConfig+0x25c>)
 800eb38:	4293      	cmp	r3, r2
 800eb3a:	d009      	beq.n	800eb50 <UART_AdvFeatureConfig+0x1cc>
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	4a28      	ldr	r2, [pc, #160]	@ (800ebe4 <UART_AdvFeatureConfig+0x260>)
 800eb42:	4293      	cmp	r3, r2
 800eb44:	d004      	beq.n	800eb50 <UART_AdvFeatureConfig+0x1cc>
 800eb46:	f640 4117 	movw	r1, #3095	@ 0xc17
 800eb4a:	4822      	ldr	r0, [pc, #136]	@ (800ebd4 <UART_AdvFeatureConfig+0x250>)
 800eb4c:	f7f7 ff72 	bl	8006a34 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d009      	beq.n	800eb6c <UART_AdvFeatureConfig+0x1e8>
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eb60:	d004      	beq.n	800eb6c <UART_AdvFeatureConfig+0x1e8>
 800eb62:	f640 4118 	movw	r1, #3096	@ 0xc18
 800eb66:	481b      	ldr	r0, [pc, #108]	@ (800ebd4 <UART_AdvFeatureConfig+0x250>)
 800eb68:	f7f7 ff64 	bl	8006a34 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	685b      	ldr	r3, [r3, #4]
 800eb72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	430a      	orrs	r2, r1
 800eb80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eb8a:	d12d      	bne.n	800ebe8 <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d013      	beq.n	800ebbc <UART_AdvFeatureConfig+0x238>
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800eb9c:	d00e      	beq.n	800ebbc <UART_AdvFeatureConfig+0x238>
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eba2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800eba6:	d009      	beq.n	800ebbc <UART_AdvFeatureConfig+0x238>
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ebac:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ebb0:	d004      	beq.n	800ebbc <UART_AdvFeatureConfig+0x238>
 800ebb2:	f640 411d 	movw	r1, #3101	@ 0xc1d
 800ebb6:	4807      	ldr	r0, [pc, #28]	@ (800ebd4 <UART_AdvFeatureConfig+0x250>)
 800ebb8:	f7f7 ff3c 	bl	8006a34 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	685b      	ldr	r3, [r3, #4]
 800ebc2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	430a      	orrs	r2, r1
 800ebd0:	605a      	str	r2, [r3, #4]
 800ebd2:	e009      	b.n	800ebe8 <UART_AdvFeatureConfig+0x264>
 800ebd4:	08018aa4 	.word	0x08018aa4
 800ebd8:	40011000 	.word	0x40011000
 800ebdc:	40004400 	.word	0x40004400
 800ebe0:	40004800 	.word	0x40004800
 800ebe4:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d018      	beq.n	800ec26 <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d009      	beq.n	800ec10 <UART_AdvFeatureConfig+0x28c>
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ec00:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800ec04:	d004      	beq.n	800ec10 <UART_AdvFeatureConfig+0x28c>
 800ec06:	f640 4125 	movw	r1, #3109	@ 0xc25
 800ec0a:	4809      	ldr	r0, [pc, #36]	@ (800ec30 <UART_AdvFeatureConfig+0x2ac>)
 800ec0c:	f7f7 ff12 	bl	8006a34 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	685b      	ldr	r3, [r3, #4]
 800ec16:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	430a      	orrs	r2, r1
 800ec24:	605a      	str	r2, [r3, #4]
  }
}
 800ec26:	bf00      	nop
 800ec28:	3708      	adds	r7, #8
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}
 800ec2e:	bf00      	nop
 800ec30:	08018aa4 	.word	0x08018aa4

0800ec34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b08c      	sub	sp, #48	@ 0x30
 800ec38:	af02      	add	r7, sp, #8
 800ec3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ec44:	f7f8 fc36 	bl	80074b4 <HAL_GetTick>
 800ec48:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	f003 0308 	and.w	r3, r3, #8
 800ec54:	2b08      	cmp	r3, #8
 800ec56:	d12e      	bne.n	800ecb6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ec58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ec5c:	9300      	str	r3, [sp, #0]
 800ec5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec60:	2200      	movs	r2, #0
 800ec62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ec66:	6878      	ldr	r0, [r7, #4]
 800ec68:	f000 f83b 	bl	800ece2 <UART_WaitOnFlagUntilTimeout>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d021      	beq.n	800ecb6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec78:	693b      	ldr	r3, [r7, #16]
 800ec7a:	e853 3f00 	ldrex	r3, [r3]
 800ec7e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ec86:	623b      	str	r3, [r7, #32]
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	461a      	mov	r2, r3
 800ec8e:	6a3b      	ldr	r3, [r7, #32]
 800ec90:	61fb      	str	r3, [r7, #28]
 800ec92:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec94:	69b9      	ldr	r1, [r7, #24]
 800ec96:	69fa      	ldr	r2, [r7, #28]
 800ec98:	e841 2300 	strex	r3, r2, [r1]
 800ec9c:	617b      	str	r3, [r7, #20]
   return(result);
 800ec9e:	697b      	ldr	r3, [r7, #20]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d1e6      	bne.n	800ec72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2220      	movs	r2, #32
 800eca8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2200      	movs	r2, #0
 800ecae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ecb2:	2303      	movs	r3, #3
 800ecb4:	e011      	b.n	800ecda <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2220      	movs	r2, #32
 800ecba:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2220      	movs	r2, #32
 800ecc0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2200      	movs	r2, #0
 800ecce:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800ecd8:	2300      	movs	r3, #0
}
 800ecda:	4618      	mov	r0, r3
 800ecdc:	3728      	adds	r7, #40	@ 0x28
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}

0800ece2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ece2:	b580      	push	{r7, lr}
 800ece4:	b084      	sub	sp, #16
 800ece6:	af00      	add	r7, sp, #0
 800ece8:	60f8      	str	r0, [r7, #12]
 800ecea:	60b9      	str	r1, [r7, #8]
 800ecec:	603b      	str	r3, [r7, #0]
 800ecee:	4613      	mov	r3, r2
 800ecf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ecf2:	e04f      	b.n	800ed94 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ecf4:	69bb      	ldr	r3, [r7, #24]
 800ecf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecfa:	d04b      	beq.n	800ed94 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ecfc:	f7f8 fbda 	bl	80074b4 <HAL_GetTick>
 800ed00:	4602      	mov	r2, r0
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	1ad3      	subs	r3, r2, r3
 800ed06:	69ba      	ldr	r2, [r7, #24]
 800ed08:	429a      	cmp	r2, r3
 800ed0a:	d302      	bcc.n	800ed12 <UART_WaitOnFlagUntilTimeout+0x30>
 800ed0c:	69bb      	ldr	r3, [r7, #24]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d101      	bne.n	800ed16 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ed12:	2303      	movs	r3, #3
 800ed14:	e04e      	b.n	800edb4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	f003 0304 	and.w	r3, r3, #4
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d037      	beq.n	800ed94 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ed24:	68bb      	ldr	r3, [r7, #8]
 800ed26:	2b80      	cmp	r3, #128	@ 0x80
 800ed28:	d034      	beq.n	800ed94 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	2b40      	cmp	r3, #64	@ 0x40
 800ed2e:	d031      	beq.n	800ed94 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	69db      	ldr	r3, [r3, #28]
 800ed36:	f003 0308 	and.w	r3, r3, #8
 800ed3a:	2b08      	cmp	r3, #8
 800ed3c:	d110      	bne.n	800ed60 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	2208      	movs	r2, #8
 800ed44:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ed46:	68f8      	ldr	r0, [r7, #12]
 800ed48:	f000 f838 	bl	800edbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	2208      	movs	r2, #8
 800ed50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	2200      	movs	r2, #0
 800ed58:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	e029      	b.n	800edb4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	69db      	ldr	r3, [r3, #28]
 800ed66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ed6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ed6e:	d111      	bne.n	800ed94 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ed78:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ed7a:	68f8      	ldr	r0, [r7, #12]
 800ed7c:	f000 f81e 	bl	800edbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	2220      	movs	r2, #32
 800ed84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800ed90:	2303      	movs	r3, #3
 800ed92:	e00f      	b.n	800edb4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	69da      	ldr	r2, [r3, #28]
 800ed9a:	68bb      	ldr	r3, [r7, #8]
 800ed9c:	4013      	ands	r3, r2
 800ed9e:	68ba      	ldr	r2, [r7, #8]
 800eda0:	429a      	cmp	r2, r3
 800eda2:	bf0c      	ite	eq
 800eda4:	2301      	moveq	r3, #1
 800eda6:	2300      	movne	r3, #0
 800eda8:	b2db      	uxtb	r3, r3
 800edaa:	461a      	mov	r2, r3
 800edac:	79fb      	ldrb	r3, [r7, #7]
 800edae:	429a      	cmp	r2, r3
 800edb0:	d0a0      	beq.n	800ecf4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800edb2:	2300      	movs	r3, #0
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	3710      	adds	r7, #16
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}

0800edbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800edbc:	b480      	push	{r7}
 800edbe:	b095      	sub	sp, #84	@ 0x54
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800edcc:	e853 3f00 	ldrex	r3, [r3]
 800edd0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800edd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800edd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	461a      	mov	r2, r3
 800ede0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ede2:	643b      	str	r3, [r7, #64]	@ 0x40
 800ede4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ede6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ede8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800edea:	e841 2300 	strex	r3, r2, [r1]
 800edee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800edf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d1e6      	bne.n	800edc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	3308      	adds	r3, #8
 800edfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edfe:	6a3b      	ldr	r3, [r7, #32]
 800ee00:	e853 3f00 	ldrex	r3, [r3]
 800ee04:	61fb      	str	r3, [r7, #28]
   return(result);
 800ee06:	69fb      	ldr	r3, [r7, #28]
 800ee08:	f023 0301 	bic.w	r3, r3, #1
 800ee0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	3308      	adds	r3, #8
 800ee14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ee16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ee18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ee1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee1e:	e841 2300 	strex	r3, r2, [r1]
 800ee22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ee24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d1e5      	bne.n	800edf6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ee2e:	2b01      	cmp	r3, #1
 800ee30:	d118      	bne.n	800ee64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	e853 3f00 	ldrex	r3, [r3]
 800ee3e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	f023 0310 	bic.w	r3, r3, #16
 800ee46:	647b      	str	r3, [r7, #68]	@ 0x44
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	461a      	mov	r2, r3
 800ee4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee50:	61bb      	str	r3, [r7, #24]
 800ee52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee54:	6979      	ldr	r1, [r7, #20]
 800ee56:	69ba      	ldr	r2, [r7, #24]
 800ee58:	e841 2300 	strex	r3, r2, [r1]
 800ee5c:	613b      	str	r3, [r7, #16]
   return(result);
 800ee5e:	693b      	ldr	r3, [r7, #16]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d1e6      	bne.n	800ee32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2220      	movs	r2, #32
 800ee68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2200      	movs	r2, #0
 800ee70:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	2200      	movs	r2, #0
 800ee76:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ee78:	bf00      	nop
 800ee7a:	3754      	adds	r7, #84	@ 0x54
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee82:	4770      	bx	lr

0800ee84 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ee84:	b480      	push	{r7}
 800ee86:	b083      	sub	sp, #12
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f103 0208 	add.w	r2, r3, #8
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f04f 32ff 	mov.w	r2, #4294967295
 800ee9c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	f103 0208 	add.w	r2, r3, #8
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f103 0208 	add.w	r2, r3, #8
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 800eeb8:	bf00      	nop
 800eeba:	370c      	adds	r7, #12
 800eebc:	46bd      	mov	sp, r7
 800eebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec2:	4770      	bx	lr

0800eec4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800eec4:	b480      	push	{r7}
 800eec6:	b083      	sub	sp, #12
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2200      	movs	r2, #0
 800eed0:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 800eed2:	bf00      	nop
 800eed4:	370c      	adds	r7, #12
 800eed6:	46bd      	mov	sp, r7
 800eed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eedc:	4770      	bx	lr

0800eede <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800eede:	b480      	push	{r7}
 800eee0:	b085      	sub	sp, #20
 800eee2:	af00      	add	r7, sp, #0
 800eee4:	6078      	str	r0, [r7, #4]
 800eee6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	685b      	ldr	r3, [r3, #4]
 800eeec:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	68fa      	ldr	r2, [r7, #12]
 800eef2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	689a      	ldr	r2, [r3, #8]
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	689b      	ldr	r3, [r3, #8]
 800ef00:	683a      	ldr	r2, [r7, #0]
 800ef02:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	683a      	ldr	r2, [r7, #0]
 800ef08:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	687a      	ldr	r2, [r7, #4]
 800ef0e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	1c5a      	adds	r2, r3, #1
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 800ef1a:	bf00      	nop
 800ef1c:	3714      	adds	r7, #20
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef24:	4770      	bx	lr

0800ef26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800ef26:	b480      	push	{r7}
 800ef28:	b085      	sub	sp, #20
 800ef2a:	af00      	add	r7, sp, #0
 800ef2c:	6078      	str	r0, [r7, #4]
 800ef2e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef3c:	d103      	bne.n	800ef46 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	691b      	ldr	r3, [r3, #16]
 800ef42:	60fb      	str	r3, [r7, #12]
 800ef44:	e00c      	b.n	800ef60 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	3308      	adds	r3, #8
 800ef4a:	60fb      	str	r3, [r7, #12]
 800ef4c:	e002      	b.n	800ef54 <vListInsert+0x2e>
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	685b      	ldr	r3, [r3, #4]
 800ef52:	60fb      	str	r3, [r7, #12]
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	685b      	ldr	r3, [r3, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	68ba      	ldr	r2, [r7, #8]
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d2f6      	bcs.n	800ef4e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	685a      	ldr	r2, [r3, #4]
 800ef64:	683b      	ldr	r3, [r7, #0]
 800ef66:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	685b      	ldr	r3, [r3, #4]
 800ef6c:	683a      	ldr	r2, [r7, #0]
 800ef6e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	68fa      	ldr	r2, [r7, #12]
 800ef74:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	683a      	ldr	r2, [r7, #0]
 800ef7a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	687a      	ldr	r2, [r7, #4]
 800ef80:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	1c5a      	adds	r2, r3, #1
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 800ef8c:	bf00      	nop
 800ef8e:	3714      	adds	r7, #20
 800ef90:	46bd      	mov	sp, r7
 800ef92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef96:	4770      	bx	lr

0800ef98 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ef98:	b480      	push	{r7}
 800ef9a:	b085      	sub	sp, #20
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	691b      	ldr	r3, [r3, #16]
 800efa4:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	685b      	ldr	r3, [r3, #4]
 800efaa:	687a      	ldr	r2, [r7, #4]
 800efac:	6892      	ldr	r2, [r2, #8]
 800efae:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	689b      	ldr	r3, [r3, #8]
 800efb4:	687a      	ldr	r2, [r7, #4]
 800efb6:	6852      	ldr	r2, [r2, #4]
 800efb8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	685b      	ldr	r3, [r3, #4]
 800efbe:	687a      	ldr	r2, [r7, #4]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d103      	bne.n	800efcc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	689a      	ldr	r2, [r3, #8]
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2200      	movs	r2, #0
 800efd0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	1e5a      	subs	r2, r3, #1
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	681b      	ldr	r3, [r3, #0]
}
 800efe0:	4618      	mov	r0, r3
 800efe2:	3714      	adds	r7, #20
 800efe4:	46bd      	mov	sp, r7
 800efe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efea:	4770      	bx	lr

0800efec <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b086      	sub	sp, #24
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
 800eff4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800eff6:	2301      	movs	r3, #1
 800eff8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 800effe:	693b      	ldr	r3, [r7, #16]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d110      	bne.n	800f026 <xQueueGenericReset+0x3a>
    __asm volatile
 800f004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f008:	b672      	cpsid	i
 800f00a:	f383 8811 	msr	BASEPRI, r3
 800f00e:	f3bf 8f6f 	isb	sy
 800f012:	f3bf 8f4f 	dsb	sy
 800f016:	b662      	cpsie	i
 800f018:	60fb      	str	r3, [r7, #12]
}
 800f01a:	bf00      	nop
 800f01c:	f240 1137 	movw	r1, #311	@ 0x137
 800f020:	483f      	ldr	r0, [pc, #252]	@ (800f120 <xQueueGenericReset+0x134>)
 800f022:	f7f7 fc51 	bl	80068c8 <vAssertCalled>

    if( ( pxQueue != NULL ) &&
 800f026:	693b      	ldr	r3, [r7, #16]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d05d      	beq.n	800f0e8 <xQueueGenericReset+0xfc>
        ( pxQueue->uxLength >= 1U ) &&
 800f02c:	693b      	ldr	r3, [r7, #16]
 800f02e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800f030:	2b00      	cmp	r3, #0
 800f032:	d059      	beq.n	800f0e8 <xQueueGenericReset+0xfc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800f034:	693b      	ldr	r3, [r7, #16]
 800f036:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f038:	693b      	ldr	r3, [r7, #16]
 800f03a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f03c:	2100      	movs	r1, #0
 800f03e:	fba3 2302 	umull	r2, r3, r3, r2
 800f042:	2b00      	cmp	r3, #0
 800f044:	d000      	beq.n	800f048 <xQueueGenericReset+0x5c>
 800f046:	2101      	movs	r1, #1
 800f048:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d14c      	bne.n	800f0e8 <xQueueGenericReset+0xfc>
    {
        taskENTER_CRITICAL();
 800f04e:	f002 ffef 	bl	8012030 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800f052:	693b      	ldr	r3, [r7, #16]
 800f054:	681a      	ldr	r2, [r3, #0]
 800f056:	693b      	ldr	r3, [r7, #16]
 800f058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f05a:	6939      	ldr	r1, [r7, #16]
 800f05c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f05e:	fb01 f303 	mul.w	r3, r1, r3
 800f062:	441a      	add	r2, r3
 800f064:	693b      	ldr	r3, [r7, #16]
 800f066:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f068:	693b      	ldr	r3, [r7, #16]
 800f06a:	2200      	movs	r2, #0
 800f06c:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800f06e:	693b      	ldr	r3, [r7, #16]
 800f070:	681a      	ldr	r2, [r3, #0]
 800f072:	693b      	ldr	r3, [r7, #16]
 800f074:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 800f076:	693b      	ldr	r3, [r7, #16]
 800f078:	681a      	ldr	r2, [r3, #0]
 800f07a:	693b      	ldr	r3, [r7, #16]
 800f07c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f07e:	3b01      	subs	r3, #1
 800f080:	6939      	ldr	r1, [r7, #16]
 800f082:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f084:	fb01 f303 	mul.w	r3, r1, r3
 800f088:	441a      	add	r2, r3
 800f08a:	693b      	ldr	r3, [r7, #16]
 800f08c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800f08e:	693b      	ldr	r3, [r7, #16]
 800f090:	22ff      	movs	r2, #255	@ 0xff
 800f092:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800f096:	693b      	ldr	r3, [r7, #16]
 800f098:	22ff      	movs	r2, #255	@ 0xff
 800f09a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d114      	bne.n	800f0ce <xQueueGenericReset+0xe2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f0a4:	693b      	ldr	r3, [r7, #16]
 800f0a6:	691b      	ldr	r3, [r3, #16]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d01a      	beq.n	800f0e2 <xQueueGenericReset+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f0ac:	693b      	ldr	r3, [r7, #16]
 800f0ae:	3310      	adds	r3, #16
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f001 fdc9 	bl	8010c48 <xTaskRemoveFromEventList>
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d012      	beq.n	800f0e2 <xQueueGenericReset+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800f0bc:	4b19      	ldr	r3, [pc, #100]	@ (800f124 <xQueueGenericReset+0x138>)
 800f0be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f0c2:	601a      	str	r2, [r3, #0]
 800f0c4:	f3bf 8f4f 	dsb	sy
 800f0c8:	f3bf 8f6f 	isb	sy
 800f0cc:	e009      	b.n	800f0e2 <xQueueGenericReset+0xf6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f0ce:	693b      	ldr	r3, [r7, #16]
 800f0d0:	3310      	adds	r3, #16
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f7ff fed6 	bl	800ee84 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f0d8:	693b      	ldr	r3, [r7, #16]
 800f0da:	3324      	adds	r3, #36	@ 0x24
 800f0dc:	4618      	mov	r0, r3
 800f0de:	f7ff fed1 	bl	800ee84 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800f0e2:	f002 ffdd 	bl	80120a0 <vPortExitCritical>
 800f0e6:	e001      	b.n	800f0ec <xQueueGenericReset+0x100>
    }
    else
    {
        xReturn = pdFAIL;
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800f0ec:	697b      	ldr	r3, [r7, #20]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d110      	bne.n	800f114 <xQueueGenericReset+0x128>
    __asm volatile
 800f0f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0f6:	b672      	cpsid	i
 800f0f8:	f383 8811 	msr	BASEPRI, r3
 800f0fc:	f3bf 8f6f 	isb	sy
 800f100:	f3bf 8f4f 	dsb	sy
 800f104:	b662      	cpsie	i
 800f106:	60bb      	str	r3, [r7, #8]
}
 800f108:	bf00      	nop
 800f10a:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 800f10e:	4804      	ldr	r0, [pc, #16]	@ (800f120 <xQueueGenericReset+0x134>)
 800f110:	f7f7 fbda 	bl	80068c8 <vAssertCalled>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 800f114:	697b      	ldr	r3, [r7, #20]
}
 800f116:	4618      	mov	r0, r3
 800f118:	3718      	adds	r7, #24
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}
 800f11e:	bf00      	nop
 800f120:	08018ae0 	.word	0x08018ae0
 800f124:	e000ed04 	.word	0xe000ed04

0800f128 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800f128:	b580      	push	{r7, lr}
 800f12a:	b08a      	sub	sp, #40	@ 0x28
 800f12c:	af02      	add	r7, sp, #8
 800f12e:	60f8      	str	r0, [r7, #12]
 800f130:	60b9      	str	r1, [r7, #8]
 800f132:	4613      	mov	r3, r2
 800f134:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800f136:	2300      	movs	r3, #0
 800f138:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d02e      	beq.n	800f19e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800f140:	2100      	movs	r1, #0
 800f142:	68ba      	ldr	r2, [r7, #8]
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	fba3 2302 	umull	r2, r3, r3, r2
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d000      	beq.n	800f150 <xQueueGenericCreate+0x28>
 800f14e:	2101      	movs	r1, #1
 800f150:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800f152:	2b00      	cmp	r3, #0
 800f154:	d123      	bne.n	800f19e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	68ba      	ldr	r2, [r7, #8]
 800f15a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800f15e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800f162:	d81c      	bhi.n	800f19e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	68ba      	ldr	r2, [r7, #8]
 800f168:	fb02 f303 	mul.w	r3, r2, r3
 800f16c:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800f16e:	69bb      	ldr	r3, [r7, #24]
 800f170:	3350      	adds	r3, #80	@ 0x50
 800f172:	4618      	mov	r0, r3
 800f174:	f7f7 ff10 	bl	8006f98 <pvPortMalloc>
 800f178:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800f17a:	69fb      	ldr	r3, [r7, #28]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d022      	beq.n	800f1c6 <xQueueGenericCreate+0x9e>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f180:	69fb      	ldr	r3, [r7, #28]
 800f182:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 800f184:	697b      	ldr	r3, [r7, #20]
 800f186:	3350      	adds	r3, #80	@ 0x50
 800f188:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f18a:	79fa      	ldrb	r2, [r7, #7]
 800f18c:	69fb      	ldr	r3, [r7, #28]
 800f18e:	9300      	str	r3, [sp, #0]
 800f190:	4613      	mov	r3, r2
 800f192:	697a      	ldr	r2, [r7, #20]
 800f194:	68b9      	ldr	r1, [r7, #8]
 800f196:	68f8      	ldr	r0, [r7, #12]
 800f198:	f000 f81c 	bl	800f1d4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800f19c:	e013      	b.n	800f1c6 <xQueueGenericCreate+0x9e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800f19e:	69fb      	ldr	r3, [r7, #28]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d110      	bne.n	800f1c6 <xQueueGenericCreate+0x9e>
    __asm volatile
 800f1a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1a8:	b672      	cpsid	i
 800f1aa:	f383 8811 	msr	BASEPRI, r3
 800f1ae:	f3bf 8f6f 	isb	sy
 800f1b2:	f3bf 8f4f 	dsb	sy
 800f1b6:	b662      	cpsie	i
 800f1b8:	613b      	str	r3, [r7, #16]
}
 800f1ba:	bf00      	nop
 800f1bc:	f240 212a 	movw	r1, #554	@ 0x22a
 800f1c0:	4803      	ldr	r0, [pc, #12]	@ (800f1d0 <xQueueGenericCreate+0xa8>)
 800f1c2:	f7f7 fb81 	bl	80068c8 <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 800f1c6:	69fb      	ldr	r3, [r7, #28]
    }
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	3720      	adds	r7, #32
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	bd80      	pop	{r7, pc}
 800f1d0:	08018ae0 	.word	0x08018ae0

0800f1d4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b084      	sub	sp, #16
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	60f8      	str	r0, [r7, #12]
 800f1dc:	60b9      	str	r1, [r7, #8]
 800f1de:	607a      	str	r2, [r7, #4]
 800f1e0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800f1e2:	68bb      	ldr	r3, [r7, #8]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d103      	bne.n	800f1f0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f1e8:	69bb      	ldr	r3, [r7, #24]
 800f1ea:	69ba      	ldr	r2, [r7, #24]
 800f1ec:	601a      	str	r2, [r3, #0]
 800f1ee:	e002      	b.n	800f1f6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f1f0:	69bb      	ldr	r3, [r7, #24]
 800f1f2:	687a      	ldr	r2, [r7, #4]
 800f1f4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800f1f6:	69bb      	ldr	r3, [r7, #24]
 800f1f8:	68fa      	ldr	r2, [r7, #12]
 800f1fa:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800f1fc:	69bb      	ldr	r3, [r7, #24]
 800f1fe:	68ba      	ldr	r2, [r7, #8]
 800f200:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f202:	2101      	movs	r1, #1
 800f204:	69b8      	ldr	r0, [r7, #24]
 800f206:	f7ff fef1 	bl	800efec <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800f20a:	69bb      	ldr	r3, [r7, #24]
 800f20c:	78fa      	ldrb	r2, [r7, #3]
 800f20e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800f212:	bf00      	nop
 800f214:	3710      	adds	r7, #16
 800f216:	46bd      	mov	sp, r7
 800f218:	bd80      	pop	{r7, pc}

0800f21a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 800f21a:	b580      	push	{r7, lr}
 800f21c:	b082      	sub	sp, #8
 800f21e:	af00      	add	r7, sp, #0
 800f220:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d00e      	beq.n	800f246 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2200      	movs	r2, #0
 800f22c:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	2200      	movs	r2, #0
 800f232:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2200      	movs	r2, #0
 800f238:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f23a:	2300      	movs	r3, #0
 800f23c:	2200      	movs	r2, #0
 800f23e:	2100      	movs	r1, #0
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f000 f897 	bl	800f374 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 800f246:	bf00      	nop
 800f248:	3708      	adds	r7, #8
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}

0800f24e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 800f24e:	b580      	push	{r7, lr}
 800f250:	b086      	sub	sp, #24
 800f252:	af00      	add	r7, sp, #0
 800f254:	4603      	mov	r3, r0
 800f256:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f258:	2301      	movs	r3, #1
 800f25a:	617b      	str	r3, [r7, #20]
 800f25c:	2300      	movs	r3, #0
 800f25e:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueCreateMutex( ucQueueType );

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f260:	79fb      	ldrb	r3, [r7, #7]
 800f262:	461a      	mov	r2, r3
 800f264:	6939      	ldr	r1, [r7, #16]
 800f266:	6978      	ldr	r0, [r7, #20]
 800f268:	f7ff ff5e 	bl	800f128 <xQueueGenericCreate>
 800f26c:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f26e:	68f8      	ldr	r0, [r7, #12]
 800f270:	f7ff ffd3 	bl	800f21a <prvInitialiseMutex>

        traceRETURN_xQueueCreateMutex( xNewQueue );

        return xNewQueue;
 800f274:	68fb      	ldr	r3, [r7, #12]
    }
 800f276:	4618      	mov	r0, r3
 800f278:	3718      	adds	r7, #24
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}
	...

0800f280 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
    {
 800f280:	b590      	push	{r4, r7, lr}
 800f282:	b087      	sub	sp, #28
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueGiveMutexRecursive( xMutex );

        configASSERT( pxMutex );
 800f28c:	693b      	ldr	r3, [r7, #16]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d110      	bne.n	800f2b4 <xQueueGiveMutexRecursive+0x34>
    __asm volatile
 800f292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f296:	b672      	cpsid	i
 800f298:	f383 8811 	msr	BASEPRI, r3
 800f29c:	f3bf 8f6f 	isb	sy
 800f2a0:	f3bf 8f4f 	dsb	sy
 800f2a4:	b662      	cpsie	i
 800f2a6:	60fb      	str	r3, [r7, #12]
}
 800f2a8:	bf00      	nop
 800f2aa:	f240 21fb 	movw	r1, #763	@ 0x2fb
 800f2ae:	4811      	ldr	r0, [pc, #68]	@ (800f2f4 <xQueueGiveMutexRecursive+0x74>)
 800f2b0:	f7f7 fb0a 	bl	80068c8 <vAssertCalled>
         * change outside of this task.  If this task does not hold the mutex then
         * pxMutexHolder can never coincidentally equal the tasks handle, and as
         * this is the only condition we are interested in it does not matter if
         * pxMutexHolder is accessed simultaneously by another task.  Therefore no
         * mutual exclusion is required to test the pxMutexHolder variable. */
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f2b4:	693b      	ldr	r3, [r7, #16]
 800f2b6:	689c      	ldr	r4, [r3, #8]
 800f2b8:	f001 ffd2 	bl	8011260 <xTaskGetCurrentTaskHandle>
 800f2bc:	4603      	mov	r3, r0
 800f2be:	429c      	cmp	r4, r3
 800f2c0:	d111      	bne.n	800f2e6 <xQueueGiveMutexRecursive+0x66>
            /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
             * the task handle, therefore no underflow check is required.  Also,
             * uxRecursiveCallCount is only modified by the mutex holder, and as
             * there can only be one, no mutual exclusion is required to modify the
             * uxRecursiveCallCount member. */
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800f2c2:	693b      	ldr	r3, [r7, #16]
 800f2c4:	68db      	ldr	r3, [r3, #12]
 800f2c6:	1e5a      	subs	r2, r3, #1
 800f2c8:	693b      	ldr	r3, [r7, #16]
 800f2ca:	60da      	str	r2, [r3, #12]

            /* Has the recursive call count unwound to 0? */
            if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800f2cc:	693b      	ldr	r3, [r7, #16]
 800f2ce:	68db      	ldr	r3, [r3, #12]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d105      	bne.n	800f2e0 <xQueueGiveMutexRecursive+0x60>
            {
                /* Return the mutex.  This will automatically unblock any other
                 * task that might be waiting to access the mutex. */
                ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	2100      	movs	r1, #0
 800f2da:	6938      	ldr	r0, [r7, #16]
 800f2dc:	f000 f84a 	bl	800f374 <xQueueGenericSend>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            xReturn = pdPASS;
 800f2e0:	2301      	movs	r3, #1
 800f2e2:	617b      	str	r3, [r7, #20]
 800f2e4:	e001      	b.n	800f2ea <xQueueGiveMutexRecursive+0x6a>
        }
        else
        {
            /* The mutex cannot be given because the calling task is not the
             * holder. */
            xReturn = pdFAIL;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	617b      	str	r3, [r7, #20]
            traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
        }

        traceRETURN_xQueueGiveMutexRecursive( xReturn );

        return xReturn;
 800f2ea:	697b      	ldr	r3, [r7, #20]
    }
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	371c      	adds	r7, #28
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd90      	pop	{r4, r7, pc}
 800f2f4:	08018ae0 	.word	0x08018ae0

0800f2f8 <xQueueTakeMutexRecursive>:

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
                                         TickType_t xTicksToWait )
    {
 800f2f8:	b590      	push	{r4, r7, lr}
 800f2fa:	b087      	sub	sp, #28
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
 800f300:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueTakeMutexRecursive( xMutex, xTicksToWait );

        configASSERT( pxMutex );
 800f306:	693b      	ldr	r3, [r7, #16]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d110      	bne.n	800f32e <xQueueTakeMutexRecursive+0x36>
    __asm volatile
 800f30c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f310:	b672      	cpsid	i
 800f312:	f383 8811 	msr	BASEPRI, r3
 800f316:	f3bf 8f6f 	isb	sy
 800f31a:	f3bf 8f4f 	dsb	sy
 800f31e:	b662      	cpsie	i
 800f320:	60fb      	str	r3, [r7, #12]
}
 800f322:	bf00      	nop
 800f324:	f240 3137 	movw	r1, #823	@ 0x337
 800f328:	4811      	ldr	r0, [pc, #68]	@ (800f370 <xQueueTakeMutexRecursive+0x78>)
 800f32a:	f7f7 facd 	bl	80068c8 <vAssertCalled>
        /* Comments regarding mutual exclusion as per those within
         * xQueueGiveMutexRecursive(). */

        traceTAKE_MUTEX_RECURSIVE( pxMutex );

        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f32e:	693b      	ldr	r3, [r7, #16]
 800f330:	689c      	ldr	r4, [r3, #8]
 800f332:	f001 ff95 	bl	8011260 <xTaskGetCurrentTaskHandle>
 800f336:	4603      	mov	r3, r0
 800f338:	429c      	cmp	r4, r3
 800f33a:	d107      	bne.n	800f34c <xQueueTakeMutexRecursive+0x54>
        {
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f33c:	693b      	ldr	r3, [r7, #16]
 800f33e:	68db      	ldr	r3, [r3, #12]
 800f340:	1c5a      	adds	r2, r3, #1
 800f342:	693b      	ldr	r3, [r7, #16]
 800f344:	60da      	str	r2, [r3, #12]
            xReturn = pdPASS;
 800f346:	2301      	movs	r3, #1
 800f348:	617b      	str	r3, [r7, #20]
 800f34a:	e00c      	b.n	800f366 <xQueueTakeMutexRecursive+0x6e>
        }
        else
        {
            xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800f34c:	6839      	ldr	r1, [r7, #0]
 800f34e:	6938      	ldr	r0, [r7, #16]
 800f350:	f000 fa1c 	bl	800f78c <xQueueSemaphoreTake>
 800f354:	6178      	str	r0, [r7, #20]

            /* pdPASS will only be returned if the mutex was successfully
             * obtained.  The calling task may have entered the Blocked state
             * before reaching here. */
            if( xReturn != pdFAIL )
 800f356:	697b      	ldr	r3, [r7, #20]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d004      	beq.n	800f366 <xQueueTakeMutexRecursive+0x6e>
            {
                ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f35c:	693b      	ldr	r3, [r7, #16]
 800f35e:	68db      	ldr	r3, [r3, #12]
 800f360:	1c5a      	adds	r2, r3, #1
 800f362:	693b      	ldr	r3, [r7, #16]
 800f364:	60da      	str	r2, [r3, #12]
            }
        }

        traceRETURN_xQueueTakeMutexRecursive( xReturn );

        return xReturn;
 800f366:	697b      	ldr	r3, [r7, #20]
    }
 800f368:	4618      	mov	r0, r3
 800f36a:	371c      	adds	r7, #28
 800f36c:	46bd      	mov	sp, r7
 800f36e:	bd90      	pop	{r4, r7, pc}
 800f370:	08018ae0 	.word	0x08018ae0

0800f374 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b08e      	sub	sp, #56	@ 0x38
 800f378:	af00      	add	r7, sp, #0
 800f37a:	60f8      	str	r0, [r7, #12]
 800f37c:	60b9      	str	r1, [r7, #8]
 800f37e:	607a      	str	r2, [r7, #4]
 800f380:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f382:	2300      	movs	r3, #0
 800f384:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 800f38a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d110      	bne.n	800f3b2 <xQueueGenericSend+0x3e>
    __asm volatile
 800f390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f394:	b672      	cpsid	i
 800f396:	f383 8811 	msr	BASEPRI, r3
 800f39a:	f3bf 8f6f 	isb	sy
 800f39e:	f3bf 8f4f 	dsb	sy
 800f3a2:	b662      	cpsie	i
 800f3a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f3a6:	bf00      	nop
 800f3a8:	f240 31b6 	movw	r1, #950	@ 0x3b6
 800f3ac:	487b      	ldr	r0, [pc, #492]	@ (800f59c <xQueueGenericSend+0x228>)
 800f3ae:	f7f7 fa8b 	bl	80068c8 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f3b2:	68bb      	ldr	r3, [r7, #8]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d103      	bne.n	800f3c0 <xQueueGenericSend+0x4c>
 800f3b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d101      	bne.n	800f3c4 <xQueueGenericSend+0x50>
 800f3c0:	2301      	movs	r3, #1
 800f3c2:	e000      	b.n	800f3c6 <xQueueGenericSend+0x52>
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d110      	bne.n	800f3ec <xQueueGenericSend+0x78>
    __asm volatile
 800f3ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3ce:	b672      	cpsid	i
 800f3d0:	f383 8811 	msr	BASEPRI, r3
 800f3d4:	f3bf 8f6f 	isb	sy
 800f3d8:	f3bf 8f4f 	dsb	sy
 800f3dc:	b662      	cpsie	i
 800f3de:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f3e0:	bf00      	nop
 800f3e2:	f240 31b7 	movw	r1, #951	@ 0x3b7
 800f3e6:	486d      	ldr	r0, [pc, #436]	@ (800f59c <xQueueGenericSend+0x228>)
 800f3e8:	f7f7 fa6e 	bl	80068c8 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	2b02      	cmp	r3, #2
 800f3f0:	d103      	bne.n	800f3fa <xQueueGenericSend+0x86>
 800f3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f3f6:	2b01      	cmp	r3, #1
 800f3f8:	d101      	bne.n	800f3fe <xQueueGenericSend+0x8a>
 800f3fa:	2301      	movs	r3, #1
 800f3fc:	e000      	b.n	800f400 <xQueueGenericSend+0x8c>
 800f3fe:	2300      	movs	r3, #0
 800f400:	2b00      	cmp	r3, #0
 800f402:	d110      	bne.n	800f426 <xQueueGenericSend+0xb2>
    __asm volatile
 800f404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f408:	b672      	cpsid	i
 800f40a:	f383 8811 	msr	BASEPRI, r3
 800f40e:	f3bf 8f6f 	isb	sy
 800f412:	f3bf 8f4f 	dsb	sy
 800f416:	b662      	cpsie	i
 800f418:	623b      	str	r3, [r7, #32]
}
 800f41a:	bf00      	nop
 800f41c:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
 800f420:	485e      	ldr	r0, [pc, #376]	@ (800f59c <xQueueGenericSend+0x228>)
 800f422:	f7f7 fa51 	bl	80068c8 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f426:	f001 ff2b 	bl	8011280 <xTaskGetSchedulerState>
 800f42a:	4603      	mov	r3, r0
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d102      	bne.n	800f436 <xQueueGenericSend+0xc2>
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d101      	bne.n	800f43a <xQueueGenericSend+0xc6>
 800f436:	2301      	movs	r3, #1
 800f438:	e000      	b.n	800f43c <xQueueGenericSend+0xc8>
 800f43a:	2300      	movs	r3, #0
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d110      	bne.n	800f462 <xQueueGenericSend+0xee>
    __asm volatile
 800f440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f444:	b672      	cpsid	i
 800f446:	f383 8811 	msr	BASEPRI, r3
 800f44a:	f3bf 8f6f 	isb	sy
 800f44e:	f3bf 8f4f 	dsb	sy
 800f452:	b662      	cpsie	i
 800f454:	61fb      	str	r3, [r7, #28]
}
 800f456:	bf00      	nop
 800f458:	f240 31bb 	movw	r1, #955	@ 0x3bb
 800f45c:	484f      	ldr	r0, [pc, #316]	@ (800f59c <xQueueGenericSend+0x228>)
 800f45e:	f7f7 fa33 	bl	80068c8 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800f462:	f002 fde5 	bl	8012030 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f468:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f46a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f46c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f46e:	429a      	cmp	r2, r3
 800f470:	d302      	bcc.n	800f478 <xQueueGenericSend+0x104>
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	2b02      	cmp	r3, #2
 800f476:	d129      	bne.n	800f4cc <xQueueGenericSend+0x158>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f478:	683a      	ldr	r2, [r7, #0]
 800f47a:	68b9      	ldr	r1, [r7, #8]
 800f47c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f47e:	f000 fad3 	bl	800fa28 <prvCopyDataToQueue>
 800f482:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d010      	beq.n	800f4ae <xQueueGenericSend+0x13a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f48c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f48e:	3324      	adds	r3, #36	@ 0x24
 800f490:	4618      	mov	r0, r3
 800f492:	f001 fbd9 	bl	8010c48 <xTaskRemoveFromEventList>
 800f496:	4603      	mov	r3, r0
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d013      	beq.n	800f4c4 <xQueueGenericSend+0x150>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800f49c:	4b40      	ldr	r3, [pc, #256]	@ (800f5a0 <xQueueGenericSend+0x22c>)
 800f49e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f4a2:	601a      	str	r2, [r3, #0]
 800f4a4:	f3bf 8f4f 	dsb	sy
 800f4a8:	f3bf 8f6f 	isb	sy
 800f4ac:	e00a      	b.n	800f4c4 <xQueueGenericSend+0x150>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800f4ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d007      	beq.n	800f4c4 <xQueueGenericSend+0x150>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800f4b4:	4b3a      	ldr	r3, [pc, #232]	@ (800f5a0 <xQueueGenericSend+0x22c>)
 800f4b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f4ba:	601a      	str	r2, [r3, #0]
 800f4bc:	f3bf 8f4f 	dsb	sy
 800f4c0:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800f4c4:	f002 fdec 	bl	80120a0 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 800f4c8:	2301      	movs	r3, #1
 800f4ca:	e063      	b.n	800f594 <xQueueGenericSend+0x220>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d103      	bne.n	800f4da <xQueueGenericSend+0x166>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800f4d2:	f002 fde5 	bl	80120a0 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	e05c      	b.n	800f594 <xQueueGenericSend+0x220>
                }
                else if( xEntryTimeSet == pdFALSE )
 800f4da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d106      	bne.n	800f4ee <xQueueGenericSend+0x17a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800f4e0:	f107 0314 	add.w	r3, r7, #20
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	f001 fc8d 	bl	8010e04 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800f4ea:	2301      	movs	r3, #1
 800f4ec:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800f4ee:	f002 fdd7 	bl	80120a0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800f4f2:	f000 ffa1 	bl	8010438 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800f4f6:	f002 fd9b 	bl	8012030 <vPortEnterCritical>
 800f4fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f500:	b25b      	sxtb	r3, r3
 800f502:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f506:	d103      	bne.n	800f510 <xQueueGenericSend+0x19c>
 800f508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f50a:	2200      	movs	r2, #0
 800f50c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f512:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f516:	b25b      	sxtb	r3, r3
 800f518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f51c:	d103      	bne.n	800f526 <xQueueGenericSend+0x1b2>
 800f51e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f520:	2200      	movs	r2, #0
 800f522:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f526:	f002 fdbb 	bl	80120a0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f52a:	1d3a      	adds	r2, r7, #4
 800f52c:	f107 0314 	add.w	r3, r7, #20
 800f530:	4611      	mov	r1, r2
 800f532:	4618      	mov	r0, r3
 800f534:	f001 fc7c 	bl	8010e30 <xTaskCheckForTimeOut>
 800f538:	4603      	mov	r3, r0
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d124      	bne.n	800f588 <xQueueGenericSend+0x214>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f53e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f540:	f000 fb6a 	bl	800fc18 <prvIsQueueFull>
 800f544:	4603      	mov	r3, r0
 800f546:	2b00      	cmp	r3, #0
 800f548:	d018      	beq.n	800f57c <xQueueGenericSend+0x208>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f54c:	3310      	adds	r3, #16
 800f54e:	687a      	ldr	r2, [r7, #4]
 800f550:	4611      	mov	r1, r2
 800f552:	4618      	mov	r0, r3
 800f554:	f001 fafe 	bl	8010b54 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800f558:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f55a:	f000 faf5 	bl	800fb48 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800f55e:	f000 ff79 	bl	8010454 <xTaskResumeAll>
 800f562:	4603      	mov	r3, r0
 800f564:	2b00      	cmp	r3, #0
 800f566:	f47f af7c 	bne.w	800f462 <xQueueGenericSend+0xee>
                {
                    taskYIELD_WITHIN_API();
 800f56a:	4b0d      	ldr	r3, [pc, #52]	@ (800f5a0 <xQueueGenericSend+0x22c>)
 800f56c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f570:	601a      	str	r2, [r3, #0]
 800f572:	f3bf 8f4f 	dsb	sy
 800f576:	f3bf 8f6f 	isb	sy
 800f57a:	e772      	b.n	800f462 <xQueueGenericSend+0xee>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800f57c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f57e:	f000 fae3 	bl	800fb48 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800f582:	f000 ff67 	bl	8010454 <xTaskResumeAll>
 800f586:	e76c      	b.n	800f462 <xQueueGenericSend+0xee>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800f588:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f58a:	f000 fadd 	bl	800fb48 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800f58e:	f000 ff61 	bl	8010454 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 800f592:	2300      	movs	r3, #0
        }
    }
}
 800f594:	4618      	mov	r0, r3
 800f596:	3738      	adds	r7, #56	@ 0x38
 800f598:	46bd      	mov	sp, r7
 800f59a:	bd80      	pop	{r7, pc}
 800f59c:	08018ae0 	.word	0x08018ae0
 800f5a0:	e000ed04 	.word	0xe000ed04

0800f5a4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b08c      	sub	sp, #48	@ 0x30
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	60f8      	str	r0, [r7, #12]
 800f5ac:	60b9      	str	r1, [r7, #8]
 800f5ae:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800f5b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d110      	bne.n	800f5e0 <xQueueReceive+0x3c>
    __asm volatile
 800f5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5c2:	b672      	cpsid	i
 800f5c4:	f383 8811 	msr	BASEPRI, r3
 800f5c8:	f3bf 8f6f 	isb	sy
 800f5cc:	f3bf 8f4f 	dsb	sy
 800f5d0:	b662      	cpsie	i
 800f5d2:	623b      	str	r3, [r7, #32]
}
 800f5d4:	bf00      	nop
 800f5d6:	f240 51e9 	movw	r1, #1513	@ 0x5e9
 800f5da:	486a      	ldr	r0, [pc, #424]	@ (800f784 <xQueueReceive+0x1e0>)
 800f5dc:	f7f7 f974 	bl	80068c8 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f5e0:	68bb      	ldr	r3, [r7, #8]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d103      	bne.n	800f5ee <xQueueReceive+0x4a>
 800f5e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d101      	bne.n	800f5f2 <xQueueReceive+0x4e>
 800f5ee:	2301      	movs	r3, #1
 800f5f0:	e000      	b.n	800f5f4 <xQueueReceive+0x50>
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d110      	bne.n	800f61a <xQueueReceive+0x76>
    __asm volatile
 800f5f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5fc:	b672      	cpsid	i
 800f5fe:	f383 8811 	msr	BASEPRI, r3
 800f602:	f3bf 8f6f 	isb	sy
 800f606:	f3bf 8f4f 	dsb	sy
 800f60a:	b662      	cpsie	i
 800f60c:	61fb      	str	r3, [r7, #28]
}
 800f60e:	bf00      	nop
 800f610:	f240 51ed 	movw	r1, #1517	@ 0x5ed
 800f614:	485b      	ldr	r0, [pc, #364]	@ (800f784 <xQueueReceive+0x1e0>)
 800f616:	f7f7 f957 	bl	80068c8 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f61a:	f001 fe31 	bl	8011280 <xTaskGetSchedulerState>
 800f61e:	4603      	mov	r3, r0
 800f620:	2b00      	cmp	r3, #0
 800f622:	d102      	bne.n	800f62a <xQueueReceive+0x86>
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d101      	bne.n	800f62e <xQueueReceive+0x8a>
 800f62a:	2301      	movs	r3, #1
 800f62c:	e000      	b.n	800f630 <xQueueReceive+0x8c>
 800f62e:	2300      	movs	r3, #0
 800f630:	2b00      	cmp	r3, #0
 800f632:	d110      	bne.n	800f656 <xQueueReceive+0xb2>
    __asm volatile
 800f634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f638:	b672      	cpsid	i
 800f63a:	f383 8811 	msr	BASEPRI, r3
 800f63e:	f3bf 8f6f 	isb	sy
 800f642:	f3bf 8f4f 	dsb	sy
 800f646:	b662      	cpsie	i
 800f648:	61bb      	str	r3, [r7, #24]
}
 800f64a:	bf00      	nop
 800f64c:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 800f650:	484c      	ldr	r0, [pc, #304]	@ (800f784 <xQueueReceive+0x1e0>)
 800f652:	f7f7 f939 	bl	80068c8 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800f656:	f002 fceb 	bl	8012030 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f65c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f65e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f662:	2b00      	cmp	r3, #0
 800f664:	d01f      	beq.n	800f6a6 <xQueueReceive+0x102>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f666:	68b9      	ldr	r1, [r7, #8]
 800f668:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f66a:	f000 fa47 	bl	800fafc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 800f66e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f670:	1e5a      	subs	r2, r3, #1
 800f672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f674:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f678:	691b      	ldr	r3, [r3, #16]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d00f      	beq.n	800f69e <xQueueReceive+0xfa>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f67e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f680:	3310      	adds	r3, #16
 800f682:	4618      	mov	r0, r3
 800f684:	f001 fae0 	bl	8010c48 <xTaskRemoveFromEventList>
 800f688:	4603      	mov	r3, r0
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d007      	beq.n	800f69e <xQueueReceive+0xfa>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800f68e:	4b3e      	ldr	r3, [pc, #248]	@ (800f788 <xQueueReceive+0x1e4>)
 800f690:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f694:	601a      	str	r2, [r3, #0]
 800f696:	f3bf 8f4f 	dsb	sy
 800f69a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800f69e:	f002 fcff 	bl	80120a0 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	e069      	b.n	800f77a <xQueueReceive+0x1d6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d103      	bne.n	800f6b4 <xQueueReceive+0x110>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800f6ac:	f002 fcf8 	bl	80120a0 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	e062      	b.n	800f77a <xQueueReceive+0x1d6>
                }
                else if( xEntryTimeSet == pdFALSE )
 800f6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d106      	bne.n	800f6c8 <xQueueReceive+0x124>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800f6ba:	f107 0310 	add.w	r3, r7, #16
 800f6be:	4618      	mov	r0, r3
 800f6c0:	f001 fba0 	bl	8010e04 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800f6c4:	2301      	movs	r3, #1
 800f6c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800f6c8:	f002 fcea 	bl	80120a0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800f6cc:	f000 feb4 	bl	8010438 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800f6d0:	f002 fcae 	bl	8012030 <vPortEnterCritical>
 800f6d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f6da:	b25b      	sxtb	r3, r3
 800f6dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6e0:	d103      	bne.n	800f6ea <xQueueReceive+0x146>
 800f6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f6ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f6f0:	b25b      	sxtb	r3, r3
 800f6f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6f6:	d103      	bne.n	800f700 <xQueueReceive+0x15c>
 800f6f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f700:	f002 fcce 	bl	80120a0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f704:	1d3a      	adds	r2, r7, #4
 800f706:	f107 0310 	add.w	r3, r7, #16
 800f70a:	4611      	mov	r1, r2
 800f70c:	4618      	mov	r0, r3
 800f70e:	f001 fb8f 	bl	8010e30 <xTaskCheckForTimeOut>
 800f712:	4603      	mov	r3, r0
 800f714:	2b00      	cmp	r3, #0
 800f716:	d123      	bne.n	800f760 <xQueueReceive+0x1bc>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f718:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f71a:	f000 fa67 	bl	800fbec <prvIsQueueEmpty>
 800f71e:	4603      	mov	r3, r0
 800f720:	2b00      	cmp	r3, #0
 800f722:	d017      	beq.n	800f754 <xQueueReceive+0x1b0>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f726:	3324      	adds	r3, #36	@ 0x24
 800f728:	687a      	ldr	r2, [r7, #4]
 800f72a:	4611      	mov	r1, r2
 800f72c:	4618      	mov	r0, r3
 800f72e:	f001 fa11 	bl	8010b54 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800f732:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f734:	f000 fa08 	bl	800fb48 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800f738:	f000 fe8c 	bl	8010454 <xTaskResumeAll>
 800f73c:	4603      	mov	r3, r0
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d189      	bne.n	800f656 <xQueueReceive+0xb2>
                {
                    taskYIELD_WITHIN_API();
 800f742:	4b11      	ldr	r3, [pc, #68]	@ (800f788 <xQueueReceive+0x1e4>)
 800f744:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f748:	601a      	str	r2, [r3, #0]
 800f74a:	f3bf 8f4f 	dsb	sy
 800f74e:	f3bf 8f6f 	isb	sy
 800f752:	e780      	b.n	800f656 <xQueueReceive+0xb2>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800f754:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f756:	f000 f9f7 	bl	800fb48 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800f75a:	f000 fe7b 	bl	8010454 <xTaskResumeAll>
 800f75e:	e77a      	b.n	800f656 <xQueueReceive+0xb2>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800f760:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f762:	f000 f9f1 	bl	800fb48 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800f766:	f000 fe75 	bl	8010454 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f76a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f76c:	f000 fa3e 	bl	800fbec <prvIsQueueEmpty>
 800f770:	4603      	mov	r3, r0
 800f772:	2b00      	cmp	r3, #0
 800f774:	f43f af6f 	beq.w	800f656 <xQueueReceive+0xb2>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 800f778:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 800f77a:	4618      	mov	r0, r3
 800f77c:	3730      	adds	r7, #48	@ 0x30
 800f77e:	46bd      	mov	sp, r7
 800f780:	bd80      	pop	{r7, pc}
 800f782:	bf00      	nop
 800f784:	08018ae0 	.word	0x08018ae0
 800f788:	e000ed04 	.word	0xe000ed04

0800f78c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b08c      	sub	sp, #48	@ 0x30
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
 800f794:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800f796:	2300      	movs	r3, #0
 800f798:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800f79e:	2300      	movs	r3, #0
 800f7a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800f7a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d110      	bne.n	800f7ca <xQueueSemaphoreTake+0x3e>
    __asm volatile
 800f7a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7ac:	b672      	cpsid	i
 800f7ae:	f383 8811 	msr	BASEPRI, r3
 800f7b2:	f3bf 8f6f 	isb	sy
 800f7b6:	f3bf 8f4f 	dsb	sy
 800f7ba:	b662      	cpsie	i
 800f7bc:	61bb      	str	r3, [r7, #24]
}
 800f7be:	bf00      	nop
 800f7c0:	f240 6182 	movw	r1, #1666	@ 0x682
 800f7c4:	4878      	ldr	r0, [pc, #480]	@ (800f9a8 <xQueueSemaphoreTake+0x21c>)
 800f7c6:	f7f7 f87f 	bl	80068c8 <vAssertCalled>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800f7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d010      	beq.n	800f7f4 <xQueueSemaphoreTake+0x68>
    __asm volatile
 800f7d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7d6:	b672      	cpsid	i
 800f7d8:	f383 8811 	msr	BASEPRI, r3
 800f7dc:	f3bf 8f6f 	isb	sy
 800f7e0:	f3bf 8f4f 	dsb	sy
 800f7e4:	b662      	cpsie	i
 800f7e6:	617b      	str	r3, [r7, #20]
}
 800f7e8:	bf00      	nop
 800f7ea:	f240 6186 	movw	r1, #1670	@ 0x686
 800f7ee:	486e      	ldr	r0, [pc, #440]	@ (800f9a8 <xQueueSemaphoreTake+0x21c>)
 800f7f0:	f7f7 f86a 	bl	80068c8 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f7f4:	f001 fd44 	bl	8011280 <xTaskGetSchedulerState>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d102      	bne.n	800f804 <xQueueSemaphoreTake+0x78>
 800f7fe:	683b      	ldr	r3, [r7, #0]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d101      	bne.n	800f808 <xQueueSemaphoreTake+0x7c>
 800f804:	2301      	movs	r3, #1
 800f806:	e000      	b.n	800f80a <xQueueSemaphoreTake+0x7e>
 800f808:	2300      	movs	r3, #0
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d110      	bne.n	800f830 <xQueueSemaphoreTake+0xa4>
    __asm volatile
 800f80e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f812:	b672      	cpsid	i
 800f814:	f383 8811 	msr	BASEPRI, r3
 800f818:	f3bf 8f6f 	isb	sy
 800f81c:	f3bf 8f4f 	dsb	sy
 800f820:	b662      	cpsie	i
 800f822:	613b      	str	r3, [r7, #16]
}
 800f824:	bf00      	nop
 800f826:	f240 618b 	movw	r1, #1675	@ 0x68b
 800f82a:	485f      	ldr	r0, [pc, #380]	@ (800f9a8 <xQueueSemaphoreTake+0x21c>)
 800f82c:	f7f7 f84c 	bl	80068c8 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800f830:	f002 fbfe 	bl	8012030 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f838:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f83a:	6a3b      	ldr	r3, [r7, #32]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d024      	beq.n	800f88a <xQueueSemaphoreTake+0xfe>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 800f840:	6a3b      	ldr	r3, [r7, #32]
 800f842:	1e5a      	subs	r2, r3, #1
 800f844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f846:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d104      	bne.n	800f85a <xQueueSemaphoreTake+0xce>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f850:	f001 ff52 	bl	80116f8 <pvTaskIncrementMutexHeldCount>
 800f854:	4602      	mov	r2, r0
 800f856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f858:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f85c:	691b      	ldr	r3, [r3, #16]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d00f      	beq.n	800f882 <xQueueSemaphoreTake+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f864:	3310      	adds	r3, #16
 800f866:	4618      	mov	r0, r3
 800f868:	f001 f9ee 	bl	8010c48 <xTaskRemoveFromEventList>
 800f86c:	4603      	mov	r3, r0
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d007      	beq.n	800f882 <xQueueSemaphoreTake+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800f872:	4b4e      	ldr	r3, [pc, #312]	@ (800f9ac <xQueueSemaphoreTake+0x220>)
 800f874:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f878:	601a      	str	r2, [r3, #0]
 800f87a:	f3bf 8f4f 	dsb	sy
 800f87e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800f882:	f002 fc0d 	bl	80120a0 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 800f886:	2301      	movs	r3, #1
 800f888:	e089      	b.n	800f99e <xQueueSemaphoreTake+0x212>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800f88a:	683b      	ldr	r3, [r7, #0]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d103      	bne.n	800f898 <xQueueSemaphoreTake+0x10c>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800f890:	f002 fc06 	bl	80120a0 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 800f894:	2300      	movs	r3, #0
 800f896:	e082      	b.n	800f99e <xQueueSemaphoreTake+0x212>
                }
                else if( xEntryTimeSet == pdFALSE )
 800f898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d106      	bne.n	800f8ac <xQueueSemaphoreTake+0x120>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800f89e:	f107 0308 	add.w	r3, r7, #8
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f001 faae 	bl	8010e04 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800f8a8:	2301      	movs	r3, #1
 800f8aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800f8ac:	f002 fbf8 	bl	80120a0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800f8b0:	f000 fdc2 	bl	8010438 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800f8b4:	f002 fbbc 	bl	8012030 <vPortEnterCritical>
 800f8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f8be:	b25b      	sxtb	r3, r3
 800f8c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8c4:	d103      	bne.n	800f8ce <xQueueSemaphoreTake+0x142>
 800f8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f8d4:	b25b      	sxtb	r3, r3
 800f8d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8da:	d103      	bne.n	800f8e4 <xQueueSemaphoreTake+0x158>
 800f8dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8de:	2200      	movs	r2, #0
 800f8e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f8e4:	f002 fbdc 	bl	80120a0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f8e8:	463a      	mov	r2, r7
 800f8ea:	f107 0308 	add.w	r3, r7, #8
 800f8ee:	4611      	mov	r1, r2
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	f001 fa9d 	bl	8010e30 <xTaskCheckForTimeOut>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d132      	bne.n	800f962 <xQueueSemaphoreTake+0x1d6>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f8fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f8fe:	f000 f975 	bl	800fbec <prvIsQueueEmpty>
 800f902:	4603      	mov	r3, r0
 800f904:	2b00      	cmp	r3, #0
 800f906:	d026      	beq.n	800f956 <xQueueSemaphoreTake+0x1ca>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d109      	bne.n	800f924 <xQueueSemaphoreTake+0x198>
                    {
                        taskENTER_CRITICAL();
 800f910:	f002 fb8e 	bl	8012030 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f916:	689b      	ldr	r3, [r3, #8]
 800f918:	4618      	mov	r0, r3
 800f91a:	f001 fccf 	bl	80112bc <xTaskPriorityInherit>
 800f91e:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 800f920:	f002 fbbe 	bl	80120a0 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f926:	3324      	adds	r3, #36	@ 0x24
 800f928:	683a      	ldr	r2, [r7, #0]
 800f92a:	4611      	mov	r1, r2
 800f92c:	4618      	mov	r0, r3
 800f92e:	f001 f911 	bl	8010b54 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800f932:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f934:	f000 f908 	bl	800fb48 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800f938:	f000 fd8c 	bl	8010454 <xTaskResumeAll>
 800f93c:	4603      	mov	r3, r0
 800f93e:	2b00      	cmp	r3, #0
 800f940:	f47f af76 	bne.w	800f830 <xQueueSemaphoreTake+0xa4>
                {
                    taskYIELD_WITHIN_API();
 800f944:	4b19      	ldr	r3, [pc, #100]	@ (800f9ac <xQueueSemaphoreTake+0x220>)
 800f946:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f94a:	601a      	str	r2, [r3, #0]
 800f94c:	f3bf 8f4f 	dsb	sy
 800f950:	f3bf 8f6f 	isb	sy
 800f954:	e76c      	b.n	800f830 <xQueueSemaphoreTake+0xa4>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800f956:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f958:	f000 f8f6 	bl	800fb48 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800f95c:	f000 fd7a 	bl	8010454 <xTaskResumeAll>
 800f960:	e766      	b.n	800f830 <xQueueSemaphoreTake+0xa4>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800f962:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f964:	f000 f8f0 	bl	800fb48 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800f968:	f000 fd74 	bl	8010454 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f96c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f96e:	f000 f93d 	bl	800fbec <prvIsQueueEmpty>
 800f972:	4603      	mov	r3, r0
 800f974:	2b00      	cmp	r3, #0
 800f976:	f43f af5b 	beq.w	800f830 <xQueueSemaphoreTake+0xa4>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 800f97a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d00d      	beq.n	800f99c <xQueueSemaphoreTake+0x210>
                    {
                        taskENTER_CRITICAL();
 800f980:	f002 fb56 	bl	8012030 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f984:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f986:	f000 f837 	bl	800f9f8 <prvGetDisinheritPriorityAfterTimeout>
 800f98a:	61f8      	str	r0, [r7, #28]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f98c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f98e:	689b      	ldr	r3, [r3, #8]
 800f990:	69f9      	ldr	r1, [r7, #28]
 800f992:	4618      	mov	r0, r3
 800f994:	f001 fde6 	bl	8011564 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 800f998:	f002 fb82 	bl	80120a0 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 800f99c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 800f99e:	4618      	mov	r0, r3
 800f9a0:	3730      	adds	r7, #48	@ 0x30
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}
 800f9a6:	bf00      	nop
 800f9a8:	08018ae0 	.word	0x08018ae0
 800f9ac:	e000ed04 	.word	0xe000ed04

0800f9b0 <vQueueDelete>:
    return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b084      	sub	sp, #16
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	60fb      	str	r3, [r7, #12]

    traceENTER_vQueueDelete( xQueue );

    configASSERT( pxQueue );
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d110      	bne.n	800f9e4 <vQueueDelete+0x34>
    __asm volatile
 800f9c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9c6:	b672      	cpsid	i
 800f9c8:	f383 8811 	msr	BASEPRI, r3
 800f9cc:	f3bf 8f6f 	isb	sy
 800f9d0:	f3bf 8f4f 	dsb	sy
 800f9d4:	b662      	cpsie	i
 800f9d6:	60bb      	str	r3, [r7, #8]
}
 800f9d8:	bf00      	nop
 800f9da:	f640 01d4 	movw	r1, #2260	@ 0x8d4
 800f9de:	4805      	ldr	r0, [pc, #20]	@ (800f9f4 <vQueueDelete+0x44>)
 800f9e0:	f7f6 ff72 	bl	80068c8 <vAssertCalled>

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
    {
        /* The queue can only have been allocated dynamically - free it
         * again. */
        vPortFree( pxQueue );
 800f9e4:	68f8      	ldr	r0, [r7, #12]
 800f9e6:	f7f7 fae5 	bl	8006fb4 <vPortFree>
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

    traceRETURN_vQueueDelete();
}
 800f9ea:	bf00      	nop
 800f9ec:	3710      	adds	r7, #16
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	bd80      	pop	{r7, pc}
 800f9f2:	bf00      	nop
 800f9f4:	08018ae0 	.word	0x08018ae0

0800f9f8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800f9f8:	b480      	push	{r7}
 800f9fa:	b085      	sub	sp, #20
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d006      	beq.n	800fa16 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	f1c3 0307 	rsb	r3, r3, #7
 800fa12:	60fb      	str	r3, [r7, #12]
 800fa14:	e001      	b.n	800fa1a <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800fa16:	2300      	movs	r3, #0
 800fa18:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800fa1a:	68fb      	ldr	r3, [r7, #12]
    }
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	3714      	adds	r7, #20
 800fa20:	46bd      	mov	sp, r7
 800fa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa26:	4770      	bx	lr

0800fa28 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b086      	sub	sp, #24
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	60f8      	str	r0, [r7, #12]
 800fa30:	60b9      	str	r1, [r7, #8]
 800fa32:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800fa34:	2300      	movs	r3, #0
 800fa36:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa3c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d10d      	bne.n	800fa62 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d14d      	bne.n	800faea <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	689b      	ldr	r3, [r3, #8]
 800fa52:	4618      	mov	r0, r3
 800fa54:	f001 fcd2 	bl	80113fc <xTaskPriorityDisinherit>
 800fa58:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	2200      	movs	r2, #0
 800fa5e:	609a      	str	r2, [r3, #8]
 800fa60:	e043      	b.n	800faea <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d119      	bne.n	800fa9c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	6858      	ldr	r0, [r3, #4]
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa70:	461a      	mov	r2, r3
 800fa72:	68b9      	ldr	r1, [r7, #8]
 800fa74:	f005 f8ba 	bl	8014bec <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	685a      	ldr	r2, [r3, #4]
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa80:	441a      	add	r2, r3
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	685a      	ldr	r2, [r3, #4]
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	689b      	ldr	r3, [r3, #8]
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	d32b      	bcc.n	800faea <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	681a      	ldr	r2, [r3, #0]
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	605a      	str	r2, [r3, #4]
 800fa9a:	e026      	b.n	800faea <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	68d8      	ldr	r0, [r3, #12]
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800faa4:	461a      	mov	r2, r3
 800faa6:	68b9      	ldr	r1, [r7, #8]
 800faa8:	f005 f8a0 	bl	8014bec <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	68da      	ldr	r2, [r3, #12]
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fab4:	425b      	negs	r3, r3
 800fab6:	441a      	add	r2, r3
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	68da      	ldr	r2, [r3, #12]
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	429a      	cmp	r2, r3
 800fac6:	d207      	bcs.n	800fad8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	689a      	ldr	r2, [r3, #8]
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fad0:	425b      	negs	r3, r3
 800fad2:	441a      	add	r2, r3
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	2b02      	cmp	r3, #2
 800fadc:	d105      	bne.n	800faea <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fade:	693b      	ldr	r3, [r7, #16]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d002      	beq.n	800faea <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800fae4:	693b      	ldr	r3, [r7, #16]
 800fae6:	3b01      	subs	r3, #1
 800fae8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800faea:	693b      	ldr	r3, [r7, #16]
 800faec:	1c5a      	adds	r2, r3, #1
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800faf2:	697b      	ldr	r3, [r7, #20]
}
 800faf4:	4618      	mov	r0, r3
 800faf6:	3718      	adds	r7, #24
 800faf8:	46bd      	mov	sp, r7
 800fafa:	bd80      	pop	{r7, pc}

0800fafc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b082      	sub	sp, #8
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
 800fb04:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d018      	beq.n	800fb40 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	68da      	ldr	r2, [r3, #12]
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb16:	441a      	add	r2, r3
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	68da      	ldr	r2, [r3, #12]
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	689b      	ldr	r3, [r3, #8]
 800fb24:	429a      	cmp	r2, r3
 800fb26:	d303      	bcc.n	800fb30 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681a      	ldr	r2, [r3, #0]
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	68d9      	ldr	r1, [r3, #12]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb38:	461a      	mov	r2, r3
 800fb3a:	6838      	ldr	r0, [r7, #0]
 800fb3c:	f005 f856 	bl	8014bec <memcpy>
    }
}
 800fb40:	bf00      	nop
 800fb42:	3708      	adds	r7, #8
 800fb44:	46bd      	mov	sp, r7
 800fb46:	bd80      	pop	{r7, pc}

0800fb48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b084      	sub	sp, #16
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800fb50:	f002 fa6e 	bl	8012030 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fb5a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800fb5c:	e011      	b.n	800fb82 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d012      	beq.n	800fb8c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	3324      	adds	r3, #36	@ 0x24
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f001 f86c 	bl	8010c48 <xTaskRemoveFromEventList>
 800fb70:	4603      	mov	r3, r0
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d001      	beq.n	800fb7a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800fb76:	f001 f9cf 	bl	8010f18 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800fb7a:	7bfb      	ldrb	r3, [r7, #15]
 800fb7c:	3b01      	subs	r3, #1
 800fb7e:	b2db      	uxtb	r3, r3
 800fb80:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800fb82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	dce9      	bgt.n	800fb5e <prvUnlockQueue+0x16>
 800fb8a:	e000      	b.n	800fb8e <prvUnlockQueue+0x46>
                    break;
 800fb8c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	22ff      	movs	r2, #255	@ 0xff
 800fb92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800fb96:	f002 fa83 	bl	80120a0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800fb9a:	f002 fa49 	bl	8012030 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fba4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800fba6:	e011      	b.n	800fbcc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	691b      	ldr	r3, [r3, #16]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d012      	beq.n	800fbd6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	3310      	adds	r3, #16
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f001 f847 	bl	8010c48 <xTaskRemoveFromEventList>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d001      	beq.n	800fbc4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800fbc0:	f001 f9aa 	bl	8010f18 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800fbc4:	7bbb      	ldrb	r3, [r7, #14]
 800fbc6:	3b01      	subs	r3, #1
 800fbc8:	b2db      	uxtb	r3, r3
 800fbca:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800fbcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	dce9      	bgt.n	800fba8 <prvUnlockQueue+0x60>
 800fbd4:	e000      	b.n	800fbd8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800fbd6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	22ff      	movs	r2, #255	@ 0xff
 800fbdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800fbe0:	f002 fa5e 	bl	80120a0 <vPortExitCritical>
}
 800fbe4:	bf00      	nop
 800fbe6:	3710      	adds	r7, #16
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}

0800fbec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b084      	sub	sp, #16
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800fbf4:	f002 fa1c 	bl	8012030 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d102      	bne.n	800fc06 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800fc00:	2301      	movs	r3, #1
 800fc02:	60fb      	str	r3, [r7, #12]
 800fc04:	e001      	b.n	800fc0a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800fc06:	2300      	movs	r3, #0
 800fc08:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800fc0a:	f002 fa49 	bl	80120a0 <vPortExitCritical>

    return xReturn;
 800fc0e:	68fb      	ldr	r3, [r7, #12]
}
 800fc10:	4618      	mov	r0, r3
 800fc12:	3710      	adds	r7, #16
 800fc14:	46bd      	mov	sp, r7
 800fc16:	bd80      	pop	{r7, pc}

0800fc18 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b084      	sub	sp, #16
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800fc20:	f002 fa06 	bl	8012030 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc2c:	429a      	cmp	r2, r3
 800fc2e:	d102      	bne.n	800fc36 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800fc30:	2301      	movs	r3, #1
 800fc32:	60fb      	str	r3, [r7, #12]
 800fc34:	e001      	b.n	800fc3a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800fc36:	2300      	movs	r3, #0
 800fc38:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800fc3a:	f002 fa31 	bl	80120a0 <vPortExitCritical>

    return xReturn;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
}
 800fc40:	4618      	mov	r0, r3
 800fc42:	3710      	adds	r7, #16
 800fc44:	46bd      	mov	sp, r7
 800fc46:	bd80      	pop	{r7, pc}

0800fc48 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b086      	sub	sp, #24
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	60f8      	str	r0, [r7, #12]
 800fc50:	60b9      	str	r1, [r7, #8]
 800fc52:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800fc58:	f002 f9ea 	bl	8012030 <vPortEnterCritical>
 800fc5c:	697b      	ldr	r3, [r7, #20]
 800fc5e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fc62:	b25b      	sxtb	r3, r3
 800fc64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc68:	d103      	bne.n	800fc72 <vQueueWaitForMessageRestricted+0x2a>
 800fc6a:	697b      	ldr	r3, [r7, #20]
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fc78:	b25b      	sxtb	r3, r3
 800fc7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc7e:	d103      	bne.n	800fc88 <vQueueWaitForMessageRestricted+0x40>
 800fc80:	697b      	ldr	r3, [r7, #20]
 800fc82:	2200      	movs	r2, #0
 800fc84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fc88:	f002 fa0a 	bl	80120a0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fc8c:	697b      	ldr	r3, [r7, #20]
 800fc8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d106      	bne.n	800fca2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800fc94:	697b      	ldr	r3, [r7, #20]
 800fc96:	3324      	adds	r3, #36	@ 0x24
 800fc98:	687a      	ldr	r2, [r7, #4]
 800fc9a:	68b9      	ldr	r1, [r7, #8]
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f000 ff85 	bl	8010bac <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800fca2:	6978      	ldr	r0, [r7, #20]
 800fca4:	f7ff ff50 	bl	800fb48 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 800fca8:	bf00      	nop
 800fcaa:	3718      	adds	r7, #24
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd80      	pop	{r7, pc}

0800fcb0 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b08a      	sub	sp, #40	@ 0x28
 800fcb4:	af04      	add	r7, sp, #16
 800fcb6:	60f8      	str	r0, [r7, #12]
 800fcb8:	60b9      	str	r1, [r7, #8]
 800fcba:	607a      	str	r2, [r7, #4]
 800fcbc:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	009b      	lsls	r3, r3, #2
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f7f7 f968 	bl	8006f98 <pvPortMalloc>
 800fcc8:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 800fcca:	693b      	ldr	r3, [r7, #16]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d013      	beq.n	800fcf8 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800fcd0:	20b0      	movs	r0, #176	@ 0xb0
 800fcd2:	f7f7 f961 	bl	8006f98 <pvPortMalloc>
 800fcd6:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 800fcd8:	697b      	ldr	r3, [r7, #20]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d008      	beq.n	800fcf0 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800fcde:	22b0      	movs	r2, #176	@ 0xb0
 800fce0:	2100      	movs	r1, #0
 800fce2:	6978      	ldr	r0, [r7, #20]
 800fce4:	f004 fe1c 	bl	8014920 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800fce8:	697b      	ldr	r3, [r7, #20]
 800fcea:	693a      	ldr	r2, [r7, #16]
 800fcec:	631a      	str	r2, [r3, #48]	@ 0x30
 800fcee:	e005      	b.n	800fcfc <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800fcf0:	6938      	ldr	r0, [r7, #16]
 800fcf2:	f7f7 f95f 	bl	8006fb4 <vPortFree>
 800fcf6:	e001      	b.n	800fcfc <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800fcfc:	697b      	ldr	r3, [r7, #20]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d00d      	beq.n	800fd1e <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fd02:	2300      	movs	r3, #0
 800fd04:	9303      	str	r3, [sp, #12]
 800fd06:	697b      	ldr	r3, [r7, #20]
 800fd08:	9302      	str	r3, [sp, #8]
 800fd0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd0c:	9301      	str	r3, [sp, #4]
 800fd0e:	6a3b      	ldr	r3, [r7, #32]
 800fd10:	9300      	str	r3, [sp, #0]
 800fd12:	683b      	ldr	r3, [r7, #0]
 800fd14:	687a      	ldr	r2, [r7, #4]
 800fd16:	68b9      	ldr	r1, [r7, #8]
 800fd18:	68f8      	ldr	r0, [r7, #12]
 800fd1a:	f000 f829 	bl	800fd70 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 800fd1e:	697b      	ldr	r3, [r7, #20]
    }
 800fd20:	4618      	mov	r0, r3
 800fd22:	3718      	adds	r7, #24
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}

0800fd28 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b088      	sub	sp, #32
 800fd2c:	af02      	add	r7, sp, #8
 800fd2e:	60f8      	str	r0, [r7, #12]
 800fd30:	60b9      	str	r1, [r7, #8]
 800fd32:	607a      	str	r2, [r7, #4]
 800fd34:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800fd36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd38:	9301      	str	r3, [sp, #4]
 800fd3a:	6a3b      	ldr	r3, [r7, #32]
 800fd3c:	9300      	str	r3, [sp, #0]
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	687a      	ldr	r2, [r7, #4]
 800fd42:	68b9      	ldr	r1, [r7, #8]
 800fd44:	68f8      	ldr	r0, [r7, #12]
 800fd46:	f7ff ffb3 	bl	800fcb0 <prvCreateTask>
 800fd4a:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 800fd4c:	693b      	ldr	r3, [r7, #16]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d005      	beq.n	800fd5e <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800fd52:	6938      	ldr	r0, [r7, #16]
 800fd54:	f000 f8c2 	bl	800fedc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800fd58:	2301      	movs	r3, #1
 800fd5a:	617b      	str	r3, [r7, #20]
 800fd5c:	e002      	b.n	800fd64 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fd5e:	f04f 33ff 	mov.w	r3, #4294967295
 800fd62:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 800fd64:	697b      	ldr	r3, [r7, #20]
    }
 800fd66:	4618      	mov	r0, r3
 800fd68:	3718      	adds	r7, #24
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd80      	pop	{r7, pc}
	...

0800fd70 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b088      	sub	sp, #32
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	60f8      	str	r0, [r7, #12]
 800fd78:	60b9      	str	r1, [r7, #8]
 800fd7a:	607a      	str	r2, [r7, #4]
 800fd7c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800fd7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd80:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	009b      	lsls	r3, r3, #2
 800fd86:	461a      	mov	r2, r3
 800fd88:	21a5      	movs	r1, #165	@ 0xa5
 800fd8a:	f004 fdc9 	bl	8014920 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800fd8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fd92:	6879      	ldr	r1, [r7, #4]
 800fd94:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800fd98:	440b      	add	r3, r1
 800fd9a:	009b      	lsls	r3, r3, #2
 800fd9c:	4413      	add	r3, r2
 800fd9e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800fda0:	69bb      	ldr	r3, [r7, #24]
 800fda2:	f023 0307 	bic.w	r3, r3, #7
 800fda6:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 800fda8:	69bb      	ldr	r3, [r7, #24]
 800fdaa:	f003 0307 	and.w	r3, r3, #7
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d010      	beq.n	800fdd4 <prvInitialiseNewTask+0x64>
    __asm volatile
 800fdb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdb6:	b672      	cpsid	i
 800fdb8:	f383 8811 	msr	BASEPRI, r3
 800fdbc:	f3bf 8f6f 	isb	sy
 800fdc0:	f3bf 8f4f 	dsb	sy
 800fdc4:	b662      	cpsie	i
 800fdc6:	617b      	str	r3, [r7, #20]
}
 800fdc8:	bf00      	nop
 800fdca:	f240 712e 	movw	r1, #1838	@ 0x72e
 800fdce:	483f      	ldr	r0, [pc, #252]	@ (800fecc <prvInitialiseNewTask+0x15c>)
 800fdd0:	f7f6 fd7a 	bl	80068c8 <vAssertCalled>

        #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
        {
            /* Also record the stack's high address, which may assist
             * debugging. */
            pxNewTCB->pxEndOfStack = pxTopOfStack;
 800fdd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdd6:	69ba      	ldr	r2, [r7, #24]
 800fdd8:	645a      	str	r2, [r3, #68]	@ 0x44
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800fdda:	68bb      	ldr	r3, [r7, #8]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d01e      	beq.n	800fe1e <prvInitialiseNewTask+0xae>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fde0:	2300      	movs	r3, #0
 800fde2:	61fb      	str	r3, [r7, #28]
 800fde4:	e012      	b.n	800fe0c <prvInitialiseNewTask+0x9c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fde6:	68ba      	ldr	r2, [r7, #8]
 800fde8:	69fb      	ldr	r3, [r7, #28]
 800fdea:	4413      	add	r3, r2
 800fdec:	7819      	ldrb	r1, [r3, #0]
 800fdee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fdf0:	69fb      	ldr	r3, [r7, #28]
 800fdf2:	4413      	add	r3, r2
 800fdf4:	3334      	adds	r3, #52	@ 0x34
 800fdf6:	460a      	mov	r2, r1
 800fdf8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800fdfa:	68ba      	ldr	r2, [r7, #8]
 800fdfc:	69fb      	ldr	r3, [r7, #28]
 800fdfe:	4413      	add	r3, r2
 800fe00:	781b      	ldrb	r3, [r3, #0]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d006      	beq.n	800fe14 <prvInitialiseNewTask+0xa4>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fe06:	69fb      	ldr	r3, [r7, #28]
 800fe08:	3301      	adds	r3, #1
 800fe0a:	61fb      	str	r3, [r7, #28]
 800fe0c:	69fb      	ldr	r3, [r7, #28]
 800fe0e:	2b0f      	cmp	r3, #15
 800fe10:	d9e9      	bls.n	800fde6 <prvInitialiseNewTask+0x76>
 800fe12:	e000      	b.n	800fe16 <prvInitialiseNewTask+0xa6>
            {
                break;
 800fe14:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 800fe16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe18:	2200      	movs	r2, #0
 800fe1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800fe1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe20:	2b06      	cmp	r3, #6
 800fe22:	d910      	bls.n	800fe46 <prvInitialiseNewTask+0xd6>
    __asm volatile
 800fe24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe28:	b672      	cpsid	i
 800fe2a:	f383 8811 	msr	BASEPRI, r3
 800fe2e:	f3bf 8f6f 	isb	sy
 800fe32:	f3bf 8f4f 	dsb	sy
 800fe36:	b662      	cpsie	i
 800fe38:	613b      	str	r3, [r7, #16]
}
 800fe3a:	bf00      	nop
 800fe3c:	f240 7164 	movw	r1, #1892	@ 0x764
 800fe40:	4822      	ldr	r0, [pc, #136]	@ (800fecc <prvInitialiseNewTask+0x15c>)
 800fe42:	f7f6 fd41 	bl	80068c8 <vAssertCalled>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fe46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe48:	2b06      	cmp	r3, #6
 800fe4a:	d901      	bls.n	800fe50 <prvInitialiseNewTask+0xe0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fe4c:	2306      	movs	r3, #6
 800fe4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800fe50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fe54:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800fe56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fe5a:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fe5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe5e:	3304      	adds	r3, #4
 800fe60:	4618      	mov	r0, r3
 800fe62:	f7ff f82f 	bl	800eec4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fe66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe68:	3318      	adds	r3, #24
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7ff f82a 	bl	800eec4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fe70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fe74:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800fe76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe78:	f1c3 0207 	rsb	r2, r3, #7
 800fe7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe7e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fe80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fe84:	625a      	str	r2, [r3, #36]	@ 0x24
    #endif

    #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 800fe86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe88:	335c      	adds	r3, #92	@ 0x5c
 800fe8a:	224c      	movs	r2, #76	@ 0x4c
 800fe8c:	2100      	movs	r1, #0
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f004 fd46 	bl	8014920 <memset>
 800fe94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe96:	4a0e      	ldr	r2, [pc, #56]	@ (800fed0 <prvInitialiseNewTask+0x160>)
 800fe98:	661a      	str	r2, [r3, #96]	@ 0x60
 800fe9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe9c:	4a0d      	ldr	r2, [pc, #52]	@ (800fed4 <prvInitialiseNewTask+0x164>)
 800fe9e:	665a      	str	r2, [r3, #100]	@ 0x64
 800fea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fea2:	4a0d      	ldr	r2, [pc, #52]	@ (800fed8 <prvInitialiseNewTask+0x168>)
 800fea4:	669a      	str	r2, [r3, #104]	@ 0x68
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fea6:	683a      	ldr	r2, [r7, #0]
 800fea8:	68f9      	ldr	r1, [r7, #12]
 800feaa:	69b8      	ldr	r0, [r7, #24]
 800feac:	f001 ff50 	bl	8011d50 <pxPortInitialiseStack>
 800feb0:	4602      	mov	r2, r0
 800feb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800feb4:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 800feb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d002      	beq.n	800fec2 <prvInitialiseNewTask+0x152>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800febc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800febe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fec0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800fec2:	bf00      	nop
 800fec4:	3720      	adds	r7, #32
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd80      	pop	{r7, pc}
 800feca:	bf00      	nop
 800fecc:	08018b64 	.word	0x08018b64
 800fed0:	2000067c 	.word	0x2000067c
 800fed4:	200006e4 	.word	0x200006e4
 800fed8:	2000074c 	.word	0x2000074c

0800fedc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 800fedc:	b580      	push	{r7, lr}
 800fede:	b084      	sub	sp, #16
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 800fee4:	f002 f8a4 	bl	8012030 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 800fee8:	4b41      	ldr	r3, [pc, #260]	@ (800fff0 <prvAddNewTaskToReadyList+0x114>)
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	3301      	adds	r3, #1
 800feee:	4a40      	ldr	r2, [pc, #256]	@ (800fff0 <prvAddNewTaskToReadyList+0x114>)
 800fef0:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800fef2:	4b40      	ldr	r3, [pc, #256]	@ (800fff4 <prvAddNewTaskToReadyList+0x118>)
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d109      	bne.n	800ff0e <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 800fefa:	4a3e      	ldr	r2, [pc, #248]	@ (800fff4 <prvAddNewTaskToReadyList+0x118>)
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ff00:	4b3b      	ldr	r3, [pc, #236]	@ (800fff0 <prvAddNewTaskToReadyList+0x114>)
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	2b01      	cmp	r3, #1
 800ff06:	d110      	bne.n	800ff2a <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 800ff08:	f001 f82a 	bl	8010f60 <prvInitialiseTaskLists>
 800ff0c:	e00d      	b.n	800ff2a <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800ff0e:	4b3a      	ldr	r3, [pc, #232]	@ (800fff8 <prvAddNewTaskToReadyList+0x11c>)
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d109      	bne.n	800ff2a <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ff16:	4b37      	ldr	r3, [pc, #220]	@ (800fff4 <prvAddNewTaskToReadyList+0x118>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff20:	429a      	cmp	r2, r3
 800ff22:	d802      	bhi.n	800ff2a <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 800ff24:	4a33      	ldr	r2, [pc, #204]	@ (800fff4 <prvAddNewTaskToReadyList+0x118>)
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 800ff2a:	4b34      	ldr	r3, [pc, #208]	@ (800fffc <prvAddNewTaskToReadyList+0x120>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	3301      	adds	r3, #1
 800ff30:	4a32      	ldr	r2, [pc, #200]	@ (800fffc <prvAddNewTaskToReadyList+0x120>)
 800ff32:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ff34:	4b31      	ldr	r3, [pc, #196]	@ (800fffc <prvAddNewTaskToReadyList+0x120>)
 800ff36:	681a      	ldr	r2, [r3, #0]
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	649a      	str	r2, [r3, #72]	@ 0x48
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff40:	2201      	movs	r2, #1
 800ff42:	409a      	lsls	r2, r3
 800ff44:	4b2e      	ldr	r3, [pc, #184]	@ (8010000 <prvAddNewTaskToReadyList+0x124>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	4313      	orrs	r3, r2
 800ff4a:	4a2d      	ldr	r2, [pc, #180]	@ (8010000 <prvAddNewTaskToReadyList+0x124>)
 800ff4c:	6013      	str	r3, [r2, #0]
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff52:	492c      	ldr	r1, [pc, #176]	@ (8010004 <prvAddNewTaskToReadyList+0x128>)
 800ff54:	4613      	mov	r3, r2
 800ff56:	009b      	lsls	r3, r3, #2
 800ff58:	4413      	add	r3, r2
 800ff5a:	009b      	lsls	r3, r3, #2
 800ff5c:	440b      	add	r3, r1
 800ff5e:	3304      	adds	r3, #4
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	60fb      	str	r3, [r7, #12]
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	68fa      	ldr	r2, [r7, #12]
 800ff68:	609a      	str	r2, [r3, #8]
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	689a      	ldr	r2, [r3, #8]
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	60da      	str	r2, [r3, #12]
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	689b      	ldr	r3, [r3, #8]
 800ff76:	687a      	ldr	r2, [r7, #4]
 800ff78:	3204      	adds	r2, #4
 800ff7a:	605a      	str	r2, [r3, #4]
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	1d1a      	adds	r2, r3, #4
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	609a      	str	r2, [r3, #8]
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff88:	4613      	mov	r3, r2
 800ff8a:	009b      	lsls	r3, r3, #2
 800ff8c:	4413      	add	r3, r2
 800ff8e:	009b      	lsls	r3, r3, #2
 800ff90:	4a1c      	ldr	r2, [pc, #112]	@ (8010004 <prvAddNewTaskToReadyList+0x128>)
 800ff92:	441a      	add	r2, r3
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	615a      	str	r2, [r3, #20]
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff9c:	4919      	ldr	r1, [pc, #100]	@ (8010004 <prvAddNewTaskToReadyList+0x128>)
 800ff9e:	4613      	mov	r3, r2
 800ffa0:	009b      	lsls	r3, r3, #2
 800ffa2:	4413      	add	r3, r2
 800ffa4:	009b      	lsls	r3, r3, #2
 800ffa6:	440b      	add	r3, r1
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	687a      	ldr	r2, [r7, #4]
 800ffac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ffae:	1c59      	adds	r1, r3, #1
 800ffb0:	4814      	ldr	r0, [pc, #80]	@ (8010004 <prvAddNewTaskToReadyList+0x128>)
 800ffb2:	4613      	mov	r3, r2
 800ffb4:	009b      	lsls	r3, r3, #2
 800ffb6:	4413      	add	r3, r2
 800ffb8:	009b      	lsls	r3, r3, #2
 800ffba:	4403      	add	r3, r0
 800ffbc:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800ffbe:	f002 f86f 	bl	80120a0 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800ffc2:	4b0d      	ldr	r3, [pc, #52]	@ (800fff8 <prvAddNewTaskToReadyList+0x11c>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d00e      	beq.n	800ffe8 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800ffca:	4b0a      	ldr	r3, [pc, #40]	@ (800fff4 <prvAddNewTaskToReadyList+0x118>)
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffd4:	429a      	cmp	r2, r3
 800ffd6:	d207      	bcs.n	800ffe8 <prvAddNewTaskToReadyList+0x10c>
 800ffd8:	4b0b      	ldr	r3, [pc, #44]	@ (8010008 <prvAddNewTaskToReadyList+0x12c>)
 800ffda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ffde:	601a      	str	r2, [r3, #0]
 800ffe0:	f3bf 8f4f 	dsb	sy
 800ffe4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800ffe8:	bf00      	nop
 800ffea:	3710      	adds	r7, #16
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}
 800fff0:	200005f8 	.word	0x200005f8
 800fff4:	200004f8 	.word	0x200004f8
 800fff8:	20000604 	.word	0x20000604
 800fffc:	20000614 	.word	0x20000614
 8010000:	20000600 	.word	0x20000600
 8010004:	200004fc 	.word	0x200004fc
 8010008:	e000ed04 	.word	0xe000ed04

0801000c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 801000c:	b580      	push	{r7, lr}
 801000e:	b086      	sub	sp, #24
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 8010014:	2300      	movs	r3, #0
 8010016:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 8010018:	f002 f80a 	bl	8012030 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d102      	bne.n	8010028 <vTaskDelete+0x1c>
 8010022:	4b44      	ldr	r3, [pc, #272]	@ (8010134 <vTaskDelete+0x128>)
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	e000      	b.n	801002a <vTaskDelete+0x1e>
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801002c:	693b      	ldr	r3, [r7, #16]
 801002e:	3304      	adds	r3, #4
 8010030:	4618      	mov	r0, r3
 8010032:	f7fe ffb1 	bl	800ef98 <uxListRemove>
 8010036:	4603      	mov	r3, r0
 8010038:	2b00      	cmp	r3, #0
 801003a:	d115      	bne.n	8010068 <vTaskDelete+0x5c>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801003c:	693b      	ldr	r3, [r7, #16]
 801003e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010040:	493d      	ldr	r1, [pc, #244]	@ (8010138 <vTaskDelete+0x12c>)
 8010042:	4613      	mov	r3, r2
 8010044:	009b      	lsls	r3, r3, #2
 8010046:	4413      	add	r3, r2
 8010048:	009b      	lsls	r3, r3, #2
 801004a:	440b      	add	r3, r1
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d10a      	bne.n	8010068 <vTaskDelete+0x5c>
 8010052:	693b      	ldr	r3, [r7, #16]
 8010054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010056:	2201      	movs	r2, #1
 8010058:	fa02 f303 	lsl.w	r3, r2, r3
 801005c:	43da      	mvns	r2, r3
 801005e:	4b37      	ldr	r3, [pc, #220]	@ (801013c <vTaskDelete+0x130>)
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	4013      	ands	r3, r2
 8010064:	4a35      	ldr	r2, [pc, #212]	@ (801013c <vTaskDelete+0x130>)
 8010066:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010068:	693b      	ldr	r3, [r7, #16]
 801006a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801006c:	2b00      	cmp	r3, #0
 801006e:	d004      	beq.n	801007a <vTaskDelete+0x6e>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010070:	693b      	ldr	r3, [r7, #16]
 8010072:	3318      	adds	r3, #24
 8010074:	4618      	mov	r0, r3
 8010076:	f7fe ff8f 	bl	800ef98 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 801007a:	4b31      	ldr	r3, [pc, #196]	@ (8010140 <vTaskDelete+0x134>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	3301      	adds	r3, #1
 8010080:	4a2f      	ldr	r2, [pc, #188]	@ (8010140 <vTaskDelete+0x134>)
 8010082:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8010084:	4b2b      	ldr	r3, [pc, #172]	@ (8010134 <vTaskDelete+0x128>)
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	693a      	ldr	r2, [r7, #16]
 801008a:	429a      	cmp	r2, r3
 801008c:	d101      	bne.n	8010092 <vTaskDelete+0x86>
 801008e:	2301      	movs	r3, #1
 8010090:	e000      	b.n	8010094 <vTaskDelete+0x88>
 8010092:	2300      	movs	r3, #0
 8010094:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8010096:	4b2b      	ldr	r3, [pc, #172]	@ (8010144 <vTaskDelete+0x138>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d010      	beq.n	80100c0 <vTaskDelete+0xb4>
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d00d      	beq.n	80100c0 <vTaskDelete+0xb4>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80100a4:	693b      	ldr	r3, [r7, #16]
 80100a6:	3304      	adds	r3, #4
 80100a8:	4619      	mov	r1, r3
 80100aa:	4827      	ldr	r0, [pc, #156]	@ (8010148 <vTaskDelete+0x13c>)
 80100ac:	f7fe ff17 	bl	800eede <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 80100b0:	4b26      	ldr	r3, [pc, #152]	@ (801014c <vTaskDelete+0x140>)
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	3301      	adds	r3, #1
 80100b6:	4a25      	ldr	r2, [pc, #148]	@ (801014c <vTaskDelete+0x140>)
 80100b8:	6013      	str	r3, [r2, #0]
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 80100ba:	2301      	movs	r3, #1
 80100bc:	617b      	str	r3, [r7, #20]
 80100be:	e006      	b.n	80100ce <vTaskDelete+0xc2>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80100c0:	4b23      	ldr	r3, [pc, #140]	@ (8010150 <vTaskDelete+0x144>)
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	3b01      	subs	r3, #1
 80100c6:	4a22      	ldr	r2, [pc, #136]	@ (8010150 <vTaskDelete+0x144>)
 80100c8:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 80100ca:	f001 f8ad 	bl	8011228 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 80100ce:	f001 ffe7 	bl	80120a0 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 80100d2:	697b      	ldr	r3, [r7, #20]
 80100d4:	2b01      	cmp	r3, #1
 80100d6:	d002      	beq.n	80100de <vTaskDelete+0xd2>
        {
            prvDeleteTCB( pxTCB );
 80100d8:	6938      	ldr	r0, [r7, #16]
 80100da:	f001 f88f 	bl	80111fc <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 80100de:	4b19      	ldr	r3, [pc, #100]	@ (8010144 <vTaskDelete+0x138>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d021      	beq.n	801012a <vTaskDelete+0x11e>
            {
                if( pxTCB == pxCurrentTCB )
 80100e6:	4b13      	ldr	r3, [pc, #76]	@ (8010134 <vTaskDelete+0x128>)
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	693a      	ldr	r2, [r7, #16]
 80100ec:	429a      	cmp	r2, r3
 80100ee:	d11c      	bne.n	801012a <vTaskDelete+0x11e>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 80100f0:	4b18      	ldr	r3, [pc, #96]	@ (8010154 <vTaskDelete+0x148>)
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d010      	beq.n	801011a <vTaskDelete+0x10e>
    __asm volatile
 80100f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100fc:	b672      	cpsid	i
 80100fe:	f383 8811 	msr	BASEPRI, r3
 8010102:	f3bf 8f6f 	isb	sy
 8010106:	f3bf 8f4f 	dsb	sy
 801010a:	b662      	cpsie	i
 801010c:	60bb      	str	r3, [r7, #8]
}
 801010e:	bf00      	nop
 8010110:	f640 1114 	movw	r1, #2324	@ 0x914
 8010114:	4810      	ldr	r0, [pc, #64]	@ (8010158 <vTaskDelete+0x14c>)
 8010116:	f7f6 fbd7 	bl	80068c8 <vAssertCalled>
                    taskYIELD_WITHIN_API();
 801011a:	4b10      	ldr	r3, [pc, #64]	@ (801015c <vTaskDelete+0x150>)
 801011c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010120:	601a      	str	r2, [r3, #0]
 8010122:	f3bf 8f4f 	dsb	sy
 8010126:	f3bf 8f6f 	isb	sy
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
 801012a:	bf00      	nop
 801012c:	3718      	adds	r7, #24
 801012e:	46bd      	mov	sp, r7
 8010130:	bd80      	pop	{r7, pc}
 8010132:	bf00      	nop
 8010134:	200004f8 	.word	0x200004f8
 8010138:	200004fc 	.word	0x200004fc
 801013c:	20000600 	.word	0x20000600
 8010140:	20000614 	.word	0x20000614
 8010144:	20000604 	.word	0x20000604
 8010148:	200005cc 	.word	0x200005cc
 801014c:	200005e0 	.word	0x200005e0
 8010150:	200005f8 	.word	0x200005f8
 8010154:	20000620 	.word	0x20000620
 8010158:	08018b64 	.word	0x08018b64
 801015c:	e000ed04 	.word	0xe000ed04

08010160 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8010160:	b580      	push	{r7, lr}
 8010162:	b084      	sub	sp, #16
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8010168:	2300      	movs	r3, #0
 801016a:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d01d      	beq.n	80101ae <vTaskDelay+0x4e>
        {
            vTaskSuspendAll();
 8010172:	f000 f961 	bl	8010438 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8010176:	4b15      	ldr	r3, [pc, #84]	@ (80101cc <vTaskDelay+0x6c>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	2b01      	cmp	r3, #1
 801017c:	d010      	beq.n	80101a0 <vTaskDelay+0x40>
    __asm volatile
 801017e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010182:	b672      	cpsid	i
 8010184:	f383 8811 	msr	BASEPRI, r3
 8010188:	f3bf 8f6f 	isb	sy
 801018c:	f3bf 8f4f 	dsb	sy
 8010190:	b662      	cpsie	i
 8010192:	60bb      	str	r3, [r7, #8]
}
 8010194:	bf00      	nop
 8010196:	f640 118e 	movw	r1, #2446	@ 0x98e
 801019a:	480d      	ldr	r0, [pc, #52]	@ (80101d0 <vTaskDelay+0x70>)
 801019c:	f7f6 fb94 	bl	80068c8 <vAssertCalled>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80101a0:	2100      	movs	r1, #0
 80101a2:	6878      	ldr	r0, [r7, #4]
 80101a4:	f001 fac0 	bl	8011728 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80101a8:	f000 f954 	bl	8010454 <xTaskResumeAll>
 80101ac:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d107      	bne.n	80101c4 <vTaskDelay+0x64>
        {
            taskYIELD_WITHIN_API();
 80101b4:	4b07      	ldr	r3, [pc, #28]	@ (80101d4 <vTaskDelay+0x74>)
 80101b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80101ba:	601a      	str	r2, [r3, #0]
 80101bc:	f3bf 8f4f 	dsb	sy
 80101c0:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 80101c4:	bf00      	nop
 80101c6:	3710      	adds	r7, #16
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}
 80101cc:	20000620 	.word	0x20000620
 80101d0:	08018b64 	.word	0x08018b64
 80101d4:	e000ed04 	.word	0xe000ed04

080101d8 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

    eTaskState eTaskGetState( TaskHandle_t xTask )
    {
 80101d8:	b580      	push	{r7, lr}
 80101da:	b08a      	sub	sp, #40	@ 0x28
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
        eTaskState eReturn;
        List_t const * pxStateList;
        List_t const * pxEventList;
        List_t const * pxDelayedList;
        List_t const * pxOverflowedDelayedList;
        const TCB_t * const pxTCB = xTask;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	61fb      	str	r3, [r7, #28]

        traceENTER_eTaskGetState( xTask );

        configASSERT( pxTCB );
 80101e4:	69fb      	ldr	r3, [r7, #28]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d110      	bne.n	801020c <eTaskGetState+0x34>
    __asm volatile
 80101ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101ee:	b672      	cpsid	i
 80101f0:	f383 8811 	msr	BASEPRI, r3
 80101f4:	f3bf 8f6f 	isb	sy
 80101f8:	f3bf 8f4f 	dsb	sy
 80101fc:	b662      	cpsie	i
 80101fe:	60bb      	str	r3, [r7, #8]
}
 8010200:	bf00      	nop
 8010202:	f44f 611c 	mov.w	r1, #2496	@ 0x9c0
 8010206:	4834      	ldr	r0, [pc, #208]	@ (80102d8 <eTaskGetState+0x100>)
 8010208:	f7f6 fb5e 	bl	80068c8 <vAssertCalled>

        #if ( configNUMBER_OF_CORES == 1 )
            if( pxTCB == pxCurrentTCB )
 801020c:	4b33      	ldr	r3, [pc, #204]	@ (80102dc <eTaskGetState+0x104>)
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	69fa      	ldr	r2, [r7, #28]
 8010212:	429a      	cmp	r2, r3
 8010214:	d103      	bne.n	801021e <eTaskGetState+0x46>
            {
                /* The task calling this function is querying its own state. */
                eReturn = eRunning;
 8010216:	2300      	movs	r3, #0
 8010218:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801021c:	e056      	b.n	80102cc <eTaskGetState+0xf4>
            }
            else
        #endif
        {
            taskENTER_CRITICAL();
 801021e:	f001 ff07 	bl	8012030 <vPortEnterCritical>
            {
                pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8010222:	69fb      	ldr	r3, [r7, #28]
 8010224:	695b      	ldr	r3, [r3, #20]
 8010226:	61bb      	str	r3, [r7, #24]
                pxEventList = listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) );
 8010228:	69fb      	ldr	r3, [r7, #28]
 801022a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801022c:	617b      	str	r3, [r7, #20]
                pxDelayedList = pxDelayedTaskList;
 801022e:	4b2c      	ldr	r3, [pc, #176]	@ (80102e0 <eTaskGetState+0x108>)
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	613b      	str	r3, [r7, #16]
                pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8010234:	4b2b      	ldr	r3, [pc, #172]	@ (80102e4 <eTaskGetState+0x10c>)
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	60fb      	str	r3, [r7, #12]
            }
            taskEXIT_CRITICAL();
 801023a:	f001 ff31 	bl	80120a0 <vPortExitCritical>

            if( pxEventList == &xPendingReadyList )
 801023e:	697b      	ldr	r3, [r7, #20]
 8010240:	4a29      	ldr	r2, [pc, #164]	@ (80102e8 <eTaskGetState+0x110>)
 8010242:	4293      	cmp	r3, r2
 8010244:	d103      	bne.n	801024e <eTaskGetState+0x76>
            {
                /* The task has been placed on the pending ready list, so its
                 * state is eReady regardless of what list the task's state list
                 * item is currently placed on. */
                eReturn = eReady;
 8010246:	2301      	movs	r3, #1
 8010248:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801024c:	e03e      	b.n	80102cc <eTaskGetState+0xf4>
            }
            else if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 801024e:	69ba      	ldr	r2, [r7, #24]
 8010250:	693b      	ldr	r3, [r7, #16]
 8010252:	429a      	cmp	r2, r3
 8010254:	d003      	beq.n	801025e <eTaskGetState+0x86>
 8010256:	69ba      	ldr	r2, [r7, #24]
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	429a      	cmp	r2, r3
 801025c:	d103      	bne.n	8010266 <eTaskGetState+0x8e>
            {
                /* The task being queried is referenced from one of the Blocked
                 * lists. */
                eReturn = eBlocked;
 801025e:	2302      	movs	r3, #2
 8010260:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010264:	e032      	b.n	80102cc <eTaskGetState+0xf4>
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                else if( pxStateList == &xSuspendedTaskList )
 8010266:	69bb      	ldr	r3, [r7, #24]
 8010268:	4a20      	ldr	r2, [pc, #128]	@ (80102ec <eTaskGetState+0x114>)
 801026a:	4293      	cmp	r3, r2
 801026c:	d120      	bne.n	80102b0 <eTaskGetState+0xd8>
                {
                    /* The task being queried is referenced from the suspended
                     * list.  Is it genuinely suspended or is it blocked
                     * indefinitely? */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 801026e:	69fb      	ldr	r3, [r7, #28]
 8010270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010272:	2b00      	cmp	r3, #0
 8010274:	d118      	bne.n	80102a8 <eTaskGetState+0xd0>
                            /* The task does not appear on the event list item of
                             * and of the RTOS objects, but could still be in the
                             * blocked state if it is waiting on its notification
                             * rather than waiting on an object.  If not, is
                             * suspended. */
                            eReturn = eSuspended;
 8010276:	2303      	movs	r3, #3
 8010278:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                            for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 801027c:	2300      	movs	r3, #0
 801027e:	623b      	str	r3, [r7, #32]
 8010280:	e00e      	b.n	80102a0 <eTaskGetState+0xc8>
                            {
                                if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8010282:	69fa      	ldr	r2, [r7, #28]
 8010284:	6a3b      	ldr	r3, [r7, #32]
 8010286:	4413      	add	r3, r2
 8010288:	33ac      	adds	r3, #172	@ 0xac
 801028a:	781b      	ldrb	r3, [r3, #0]
 801028c:	b2db      	uxtb	r3, r3
 801028e:	2b01      	cmp	r3, #1
 8010290:	d103      	bne.n	801029a <eTaskGetState+0xc2>
                                {
                                    eReturn = eBlocked;
 8010292:	2302      	movs	r3, #2
 8010294:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                    break;
 8010298:	e018      	b.n	80102cc <eTaskGetState+0xf4>
                            for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 801029a:	6a3b      	ldr	r3, [r7, #32]
 801029c:	3301      	adds	r3, #1
 801029e:	623b      	str	r3, [r7, #32]
 80102a0:	6a3b      	ldr	r3, [r7, #32]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	dded      	ble.n	8010282 <eTaskGetState+0xaa>
 80102a6:	e011      	b.n	80102cc <eTaskGetState+0xf4>
                        }
                        #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
                    }
                    else
                    {
                        eReturn = eBlocked;
 80102a8:	2302      	movs	r3, #2
 80102aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80102ae:	e00d      	b.n	80102cc <eTaskGetState+0xf4>
                    }
                }
            #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */

            #if ( INCLUDE_vTaskDelete == 1 )
                else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80102b0:	69bb      	ldr	r3, [r7, #24]
 80102b2:	4a0f      	ldr	r2, [pc, #60]	@ (80102f0 <eTaskGetState+0x118>)
 80102b4:	4293      	cmp	r3, r2
 80102b6:	d002      	beq.n	80102be <eTaskGetState+0xe6>
 80102b8:	69bb      	ldr	r3, [r7, #24]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d103      	bne.n	80102c6 <eTaskGetState+0xee>
                {
                    /* The task being queried is referenced from the deleted
                     * tasks list, or it is not referenced from any lists at
                     * all. */
                    eReturn = eDeleted;
 80102be:	2304      	movs	r3, #4
 80102c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80102c4:	e002      	b.n	80102cc <eTaskGetState+0xf4>
            {
                #if ( configNUMBER_OF_CORES == 1 )
                {
                    /* If the task is not in any other state, it must be in the
                     * Ready (including pending ready) state. */
                    eReturn = eReady;
 80102c6:	2301      	movs	r3, #1
 80102c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
        }

        traceRETURN_eTaskGetState( eReturn );

        return eReturn;
 80102cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
    }
 80102d0:	4618      	mov	r0, r3
 80102d2:	3728      	adds	r7, #40	@ 0x28
 80102d4:	46bd      	mov	sp, r7
 80102d6:	bd80      	pop	{r7, pc}
 80102d8:	08018b64 	.word	0x08018b64
 80102dc:	200004f8 	.word	0x200004f8
 80102e0:	200005b0 	.word	0x200005b0
 80102e4:	200005b4 	.word	0x200005b4
 80102e8:	200005b8 	.word	0x200005b8
 80102ec:	200005e4 	.word	0x200005e4
 80102f0:	200005cc 	.word	0x200005cc

080102f4 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b08a      	sub	sp, #40	@ 0x28
 80102f8:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 80102fa:	2301      	movs	r3, #1
 80102fc:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 80102fe:	2300      	movs	r3, #0
 8010300:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8010302:	2300      	movs	r3, #0
 8010304:	617b      	str	r3, [r7, #20]
 8010306:	e011      	b.n	801032c <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8010308:	4a1d      	ldr	r2, [pc, #116]	@ (8010380 <prvCreateIdleTasks+0x8c>)
 801030a:	697b      	ldr	r3, [r7, #20]
 801030c:	4413      	add	r3, r2
 801030e:	7819      	ldrb	r1, [r3, #0]
 8010310:	463a      	mov	r2, r7
 8010312:	697b      	ldr	r3, [r7, #20]
 8010314:	4413      	add	r3, r2
 8010316:	460a      	mov	r2, r1
 8010318:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 801031a:	463a      	mov	r2, r7
 801031c:	697b      	ldr	r3, [r7, #20]
 801031e:	4413      	add	r3, r2
 8010320:	781b      	ldrb	r3, [r3, #0]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d006      	beq.n	8010334 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8010326:	697b      	ldr	r3, [r7, #20]
 8010328:	3301      	adds	r3, #1
 801032a:	617b      	str	r3, [r7, #20]
 801032c:	697b      	ldr	r3, [r7, #20]
 801032e:	2b0f      	cmp	r3, #15
 8010330:	ddea      	ble.n	8010308 <prvCreateIdleTasks+0x14>
 8010332:	e000      	b.n	8010336 <prvCreateIdleTasks+0x42>
        {
            break;
 8010334:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8010336:	2300      	movs	r3, #0
 8010338:	61bb      	str	r3, [r7, #24]
 801033a:	e016      	b.n	801036a <prvCreateIdleTasks+0x76>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 801033c:	4b11      	ldr	r3, [pc, #68]	@ (8010384 <prvCreateIdleTasks+0x90>)
 801033e:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8010340:	69bb      	ldr	r3, [r7, #24]
 8010342:	009b      	lsls	r3, r3, #2
 8010344:	4a10      	ldr	r2, [pc, #64]	@ (8010388 <prvCreateIdleTasks+0x94>)
 8010346:	4413      	add	r3, r2
 8010348:	4639      	mov	r1, r7
 801034a:	9301      	str	r3, [sp, #4]
 801034c:	2300      	movs	r3, #0
 801034e:	9300      	str	r3, [sp, #0]
 8010350:	2300      	movs	r3, #0
 8010352:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8010356:	6938      	ldr	r0, [r7, #16]
 8010358:	f7ff fce6 	bl	800fd28 <xTaskCreate>
 801035c:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 801035e:	69fb      	ldr	r3, [r7, #28]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d006      	beq.n	8010372 <prvCreateIdleTasks+0x7e>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8010364:	69bb      	ldr	r3, [r7, #24]
 8010366:	3301      	adds	r3, #1
 8010368:	61bb      	str	r3, [r7, #24]
 801036a:	69bb      	ldr	r3, [r7, #24]
 801036c:	2b00      	cmp	r3, #0
 801036e:	dde5      	ble.n	801033c <prvCreateIdleTasks+0x48>
 8010370:	e000      	b.n	8010374 <prvCreateIdleTasks+0x80>
        {
            break;
 8010372:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8010374:	69fb      	ldr	r3, [r7, #28]
}
 8010376:	4618      	mov	r0, r3
 8010378:	3720      	adds	r7, #32
 801037a:	46bd      	mov	sp, r7
 801037c:	bd80      	pop	{r7, pc}
 801037e:	bf00      	nop
 8010380:	08018be8 	.word	0x08018be8
 8010384:	08010f31 	.word	0x08010f31
 8010388:	2000061c 	.word	0x2000061c

0801038c <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b084      	sub	sp, #16
 8010390:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8010392:	f7ff ffaf 	bl	80102f4 <prvCreateIdleTasks>
 8010396:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	2b01      	cmp	r3, #1
 801039c:	d102      	bne.n	80103a4 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 801039e:	f001 fa45 	bl	801182c <xTimerCreateTimerTask>
 80103a2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	2b01      	cmp	r3, #1
 80103a8:	d11d      	bne.n	80103e6 <vTaskStartScheduler+0x5a>
    __asm volatile
 80103aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103ae:	b672      	cpsid	i
 80103b0:	f383 8811 	msr	BASEPRI, r3
 80103b4:	f3bf 8f6f 	isb	sy
 80103b8:	f3bf 8f4f 	dsb	sy
 80103bc:	b662      	cpsie	i
 80103be:	60bb      	str	r3, [r7, #8]
}
 80103c0:	bf00      	nop

        #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 80103c2:	4b16      	ldr	r3, [pc, #88]	@ (801041c <vTaskStartScheduler+0x90>)
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	335c      	adds	r3, #92	@ 0x5c
 80103c8:	4a15      	ldr	r2, [pc, #84]	@ (8010420 <vTaskStartScheduler+0x94>)
 80103ca:	6013      	str	r3, [r2, #0]
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80103cc:	4b15      	ldr	r3, [pc, #84]	@ (8010424 <vTaskStartScheduler+0x98>)
 80103ce:	f04f 32ff 	mov.w	r2, #4294967295
 80103d2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80103d4:	4b14      	ldr	r3, [pc, #80]	@ (8010428 <vTaskStartScheduler+0x9c>)
 80103d6:	2201      	movs	r2, #1
 80103d8:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80103da:	4b14      	ldr	r3, [pc, #80]	@ (801042c <vTaskStartScheduler+0xa0>)
 80103dc:	2200      	movs	r2, #0
 80103de:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 80103e0:	f001 fd48 	bl	8011e74 <xPortStartScheduler>
 80103e4:	e014      	b.n	8010410 <vTaskStartScheduler+0x84>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103ec:	d110      	bne.n	8010410 <vTaskStartScheduler+0x84>
    __asm volatile
 80103ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103f2:	b672      	cpsid	i
 80103f4:	f383 8811 	msr	BASEPRI, r3
 80103f8:	f3bf 8f6f 	isb	sy
 80103fc:	f3bf 8f4f 	dsb	sy
 8010400:	b662      	cpsie	i
 8010402:	607b      	str	r3, [r7, #4]
}
 8010404:	bf00      	nop
 8010406:	f640 61a9 	movw	r1, #3753	@ 0xea9
 801040a:	4809      	ldr	r0, [pc, #36]	@ (8010430 <vTaskStartScheduler+0xa4>)
 801040c:	f7f6 fa5c 	bl	80068c8 <vAssertCalled>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8010410:	4b08      	ldr	r3, [pc, #32]	@ (8010434 <vTaskStartScheduler+0xa8>)
 8010412:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8010414:	bf00      	nop
 8010416:	3710      	adds	r7, #16
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}
 801041c:	200004f8 	.word	0x200004f8
 8010420:	200001d4 	.word	0x200001d4
 8010424:	20000618 	.word	0x20000618
 8010428:	20000604 	.word	0x20000604
 801042c:	200005fc 	.word	0x200005fc
 8010430:	08018b64 	.word	0x08018b64
 8010434:	08019208 	.word	0x08019208

08010438 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010438:	b480      	push	{r7}
 801043a:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 801043c:	4b04      	ldr	r3, [pc, #16]	@ (8010450 <vTaskSuspendAll+0x18>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	3301      	adds	r3, #1
 8010442:	4a03      	ldr	r2, [pc, #12]	@ (8010450 <vTaskSuspendAll+0x18>)
 8010444:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8010446:	bf00      	nop
 8010448:	46bd      	mov	sp, r7
 801044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044e:	4770      	bx	lr
 8010450:	20000620 	.word	0x20000620

08010454 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010454:	b580      	push	{r7, lr}
 8010456:	b088      	sub	sp, #32
 8010458:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 801045a:	2300      	movs	r3, #0
 801045c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 801045e:	2300      	movs	r3, #0
 8010460:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8010462:	f001 fde5 	bl	8012030 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8010466:	2300      	movs	r3, #0
 8010468:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 801046a:	4b78      	ldr	r3, [pc, #480]	@ (801064c <xTaskResumeAll+0x1f8>)
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d110      	bne.n	8010494 <xTaskResumeAll+0x40>
    __asm volatile
 8010472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010476:	b672      	cpsid	i
 8010478:	f383 8811 	msr	BASEPRI, r3
 801047c:	f3bf 8f6f 	isb	sy
 8010480:	f3bf 8f4f 	dsb	sy
 8010484:	b662      	cpsie	i
 8010486:	603b      	str	r3, [r7, #0]
}
 8010488:	bf00      	nop
 801048a:	f640 718b 	movw	r1, #3979	@ 0xf8b
 801048e:	4870      	ldr	r0, [pc, #448]	@ (8010650 <xTaskResumeAll+0x1fc>)
 8010490:	f7f6 fa1a 	bl	80068c8 <vAssertCalled>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8010494:	4b6d      	ldr	r3, [pc, #436]	@ (801064c <xTaskResumeAll+0x1f8>)
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	3b01      	subs	r3, #1
 801049a:	4a6c      	ldr	r2, [pc, #432]	@ (801064c <xTaskResumeAll+0x1f8>)
 801049c:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 801049e:	4b6b      	ldr	r3, [pc, #428]	@ (801064c <xTaskResumeAll+0x1f8>)
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	f040 80ca 	bne.w	801063c <xTaskResumeAll+0x1e8>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80104a8:	4b6a      	ldr	r3, [pc, #424]	@ (8010654 <xTaskResumeAll+0x200>)
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	f000 80c5 	beq.w	801063c <xTaskResumeAll+0x1e8>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80104b2:	e08e      	b.n	80105d2 <xTaskResumeAll+0x17e>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80104b4:	4b68      	ldr	r3, [pc, #416]	@ (8010658 <xTaskResumeAll+0x204>)
 80104b6:	68db      	ldr	r3, [r3, #12]
 80104b8:	68db      	ldr	r3, [r3, #12]
 80104ba:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80104bc:	69fb      	ldr	r3, [r7, #28]
 80104be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104c0:	60fb      	str	r3, [r7, #12]
 80104c2:	69fb      	ldr	r3, [r7, #28]
 80104c4:	69db      	ldr	r3, [r3, #28]
 80104c6:	69fa      	ldr	r2, [r7, #28]
 80104c8:	6a12      	ldr	r2, [r2, #32]
 80104ca:	609a      	str	r2, [r3, #8]
 80104cc:	69fb      	ldr	r3, [r7, #28]
 80104ce:	6a1b      	ldr	r3, [r3, #32]
 80104d0:	69fa      	ldr	r2, [r7, #28]
 80104d2:	69d2      	ldr	r2, [r2, #28]
 80104d4:	605a      	str	r2, [r3, #4]
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	685a      	ldr	r2, [r3, #4]
 80104da:	69fb      	ldr	r3, [r7, #28]
 80104dc:	3318      	adds	r3, #24
 80104de:	429a      	cmp	r2, r3
 80104e0:	d103      	bne.n	80104ea <xTaskResumeAll+0x96>
 80104e2:	69fb      	ldr	r3, [r7, #28]
 80104e4:	6a1a      	ldr	r2, [r3, #32]
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	605a      	str	r2, [r3, #4]
 80104ea:	69fb      	ldr	r3, [r7, #28]
 80104ec:	2200      	movs	r2, #0
 80104ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	1e5a      	subs	r2, r3, #1
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80104fa:	69fb      	ldr	r3, [r7, #28]
 80104fc:	695b      	ldr	r3, [r3, #20]
 80104fe:	60bb      	str	r3, [r7, #8]
 8010500:	69fb      	ldr	r3, [r7, #28]
 8010502:	689b      	ldr	r3, [r3, #8]
 8010504:	69fa      	ldr	r2, [r7, #28]
 8010506:	68d2      	ldr	r2, [r2, #12]
 8010508:	609a      	str	r2, [r3, #8]
 801050a:	69fb      	ldr	r3, [r7, #28]
 801050c:	68db      	ldr	r3, [r3, #12]
 801050e:	69fa      	ldr	r2, [r7, #28]
 8010510:	6892      	ldr	r2, [r2, #8]
 8010512:	605a      	str	r2, [r3, #4]
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	685a      	ldr	r2, [r3, #4]
 8010518:	69fb      	ldr	r3, [r7, #28]
 801051a:	3304      	adds	r3, #4
 801051c:	429a      	cmp	r2, r3
 801051e:	d103      	bne.n	8010528 <xTaskResumeAll+0xd4>
 8010520:	69fb      	ldr	r3, [r7, #28]
 8010522:	68da      	ldr	r2, [r3, #12]
 8010524:	68bb      	ldr	r3, [r7, #8]
 8010526:	605a      	str	r2, [r3, #4]
 8010528:	69fb      	ldr	r3, [r7, #28]
 801052a:	2200      	movs	r2, #0
 801052c:	615a      	str	r2, [r3, #20]
 801052e:	68bb      	ldr	r3, [r7, #8]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	1e5a      	subs	r2, r3, #1
 8010534:	68bb      	ldr	r3, [r7, #8]
 8010536:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8010538:	69fb      	ldr	r3, [r7, #28]
 801053a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801053c:	2201      	movs	r2, #1
 801053e:	409a      	lsls	r2, r3
 8010540:	4b46      	ldr	r3, [pc, #280]	@ (801065c <xTaskResumeAll+0x208>)
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	4313      	orrs	r3, r2
 8010546:	4a45      	ldr	r2, [pc, #276]	@ (801065c <xTaskResumeAll+0x208>)
 8010548:	6013      	str	r3, [r2, #0]
 801054a:	69fb      	ldr	r3, [r7, #28]
 801054c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801054e:	4944      	ldr	r1, [pc, #272]	@ (8010660 <xTaskResumeAll+0x20c>)
 8010550:	4613      	mov	r3, r2
 8010552:	009b      	lsls	r3, r3, #2
 8010554:	4413      	add	r3, r2
 8010556:	009b      	lsls	r3, r3, #2
 8010558:	440b      	add	r3, r1
 801055a:	3304      	adds	r3, #4
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	607b      	str	r3, [r7, #4]
 8010560:	69fb      	ldr	r3, [r7, #28]
 8010562:	687a      	ldr	r2, [r7, #4]
 8010564:	609a      	str	r2, [r3, #8]
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	689a      	ldr	r2, [r3, #8]
 801056a:	69fb      	ldr	r3, [r7, #28]
 801056c:	60da      	str	r2, [r3, #12]
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	689b      	ldr	r3, [r3, #8]
 8010572:	69fa      	ldr	r2, [r7, #28]
 8010574:	3204      	adds	r2, #4
 8010576:	605a      	str	r2, [r3, #4]
 8010578:	69fb      	ldr	r3, [r7, #28]
 801057a:	1d1a      	adds	r2, r3, #4
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	609a      	str	r2, [r3, #8]
 8010580:	69fb      	ldr	r3, [r7, #28]
 8010582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010584:	4613      	mov	r3, r2
 8010586:	009b      	lsls	r3, r3, #2
 8010588:	4413      	add	r3, r2
 801058a:	009b      	lsls	r3, r3, #2
 801058c:	4a34      	ldr	r2, [pc, #208]	@ (8010660 <xTaskResumeAll+0x20c>)
 801058e:	441a      	add	r2, r3
 8010590:	69fb      	ldr	r3, [r7, #28]
 8010592:	615a      	str	r2, [r3, #20]
 8010594:	69fb      	ldr	r3, [r7, #28]
 8010596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010598:	4931      	ldr	r1, [pc, #196]	@ (8010660 <xTaskResumeAll+0x20c>)
 801059a:	4613      	mov	r3, r2
 801059c:	009b      	lsls	r3, r3, #2
 801059e:	4413      	add	r3, r2
 80105a0:	009b      	lsls	r3, r3, #2
 80105a2:	440b      	add	r3, r1
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	69fa      	ldr	r2, [r7, #28]
 80105a8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80105aa:	1c59      	adds	r1, r3, #1
 80105ac:	482c      	ldr	r0, [pc, #176]	@ (8010660 <xTaskResumeAll+0x20c>)
 80105ae:	4613      	mov	r3, r2
 80105b0:	009b      	lsls	r3, r3, #2
 80105b2:	4413      	add	r3, r2
 80105b4:	009b      	lsls	r3, r3, #2
 80105b6:	4403      	add	r3, r0
 80105b8:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80105ba:	69fb      	ldr	r3, [r7, #28]
 80105bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105be:	4b29      	ldr	r3, [pc, #164]	@ (8010664 <xTaskResumeAll+0x210>)
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105c4:	429a      	cmp	r2, r3
 80105c6:	d904      	bls.n	80105d2 <xTaskResumeAll+0x17e>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 80105c8:	4a27      	ldr	r2, [pc, #156]	@ (8010668 <xTaskResumeAll+0x214>)
 80105ca:	693b      	ldr	r3, [r7, #16]
 80105cc:	2101      	movs	r1, #1
 80105ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80105d2:	4b21      	ldr	r3, [pc, #132]	@ (8010658 <xTaskResumeAll+0x204>)
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	f47f af6c 	bne.w	80104b4 <xTaskResumeAll+0x60>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 80105dc:	69fb      	ldr	r3, [r7, #28]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d001      	beq.n	80105e6 <xTaskResumeAll+0x192>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 80105e2:	f000 fe21 	bl	8011228 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80105e6:	4b21      	ldr	r3, [pc, #132]	@ (801066c <xTaskResumeAll+0x218>)
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80105ec:	697b      	ldr	r3, [r7, #20]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d012      	beq.n	8010618 <xTaskResumeAll+0x1c4>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 80105f2:	f000 f8e1 	bl	80107b8 <xTaskIncrementTick>
 80105f6:	4603      	mov	r3, r0
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d004      	beq.n	8010606 <xTaskResumeAll+0x1b2>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 80105fc:	4a1a      	ldr	r2, [pc, #104]	@ (8010668 <xTaskResumeAll+0x214>)
 80105fe:	693b      	ldr	r3, [r7, #16]
 8010600:	2101      	movs	r1, #1
 8010602:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8010606:	697b      	ldr	r3, [r7, #20]
 8010608:	3b01      	subs	r3, #1
 801060a:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 801060c:	697b      	ldr	r3, [r7, #20]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d1ef      	bne.n	80105f2 <xTaskResumeAll+0x19e>

                            xPendedTicks = 0;
 8010612:	4b16      	ldr	r3, [pc, #88]	@ (801066c <xTaskResumeAll+0x218>)
 8010614:	2200      	movs	r2, #0
 8010616:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8010618:	4a13      	ldr	r2, [pc, #76]	@ (8010668 <xTaskResumeAll+0x214>)
 801061a:	693b      	ldr	r3, [r7, #16]
 801061c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d00b      	beq.n	801063c <xTaskResumeAll+0x1e8>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8010624:	2301      	movs	r3, #1
 8010626:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8010628:	4b0e      	ldr	r3, [pc, #56]	@ (8010664 <xTaskResumeAll+0x210>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	4b10      	ldr	r3, [pc, #64]	@ (8010670 <xTaskResumeAll+0x21c>)
 801062e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010632:	601a      	str	r2, [r3, #0]
 8010634:	f3bf 8f4f 	dsb	sy
 8010638:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 801063c:	f001 fd30 	bl	80120a0 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8010640:	69bb      	ldr	r3, [r7, #24]
}
 8010642:	4618      	mov	r0, r3
 8010644:	3720      	adds	r7, #32
 8010646:	46bd      	mov	sp, r7
 8010648:	bd80      	pop	{r7, pc}
 801064a:	bf00      	nop
 801064c:	20000620 	.word	0x20000620
 8010650:	08018b64 	.word	0x08018b64
 8010654:	200005f8 	.word	0x200005f8
 8010658:	200005b8 	.word	0x200005b8
 801065c:	20000600 	.word	0x20000600
 8010660:	200004fc 	.word	0x200004fc
 8010664:	200004f8 	.word	0x200004f8
 8010668:	2000060c 	.word	0x2000060c
 801066c:	20000608 	.word	0x20000608
 8010670:	e000ed04 	.word	0xe000ed04

08010674 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010674:	b480      	push	{r7}
 8010676:	b083      	sub	sp, #12
 8010678:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 801067a:	4b05      	ldr	r3, [pc, #20]	@ (8010690 <xTaskGetTickCount+0x1c>)
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8010680:	687b      	ldr	r3, [r7, #4]
}
 8010682:	4618      	mov	r0, r3
 8010684:	370c      	adds	r7, #12
 8010686:	46bd      	mov	sp, r7
 8010688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068c:	4770      	bx	lr
 801068e:	bf00      	nop
 8010690:	200005fc 	.word	0x200005fc

08010694 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8010694:	b480      	push	{r7}
 8010696:	af00      	add	r7, sp, #0

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
 8010698:	4b03      	ldr	r3, [pc, #12]	@ (80106a8 <uxTaskGetNumberOfTasks+0x14>)
 801069a:	681b      	ldr	r3, [r3, #0]
}
 801069c:	4618      	mov	r0, r3
 801069e:	46bd      	mov	sp, r7
 80106a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a4:	4770      	bx	lr
 80106a6:	bf00      	nop
 80106a8:	200005f8 	.word	0x200005f8

080106ac <uxTaskGetSystemState>:
#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
                                      const UBaseType_t uxArraySize,
                                      configRUN_TIME_COUNTER_TYPE * const pulTotalRunTime )
    {
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b086      	sub	sp, #24
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	60f8      	str	r0, [r7, #12]
 80106b4:	60b9      	str	r1, [r7, #8]
 80106b6:	607a      	str	r2, [r7, #4]
        UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80106b8:	2300      	movs	r3, #0
 80106ba:	617b      	str	r3, [r7, #20]
 80106bc:	2307      	movs	r3, #7
 80106be:	613b      	str	r3, [r7, #16]

        traceENTER_uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, pulTotalRunTime );

        vTaskSuspendAll();
 80106c0:	f7ff feba 	bl	8010438 <vTaskSuspendAll>
        {
            /* Is there a space in the array for each task in the system? */
            if( uxArraySize >= uxCurrentNumberOfTasks )
 80106c4:	4b36      	ldr	r3, [pc, #216]	@ (80107a0 <uxTaskGetSystemState+0xf4>)
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	68ba      	ldr	r2, [r7, #8]
 80106ca:	429a      	cmp	r2, r3
 80106cc:	d360      	bcc.n	8010790 <uxTaskGetSystemState+0xe4>
            {
                /* Fill in an TaskStatus_t structure with information on each
                 * task in the Ready state. */
                do
                {
                    uxQueue--;
 80106ce:	693b      	ldr	r3, [r7, #16]
 80106d0:	3b01      	subs	r3, #1
 80106d2:	613b      	str	r3, [r7, #16]
                    uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady ) );
 80106d4:	697b      	ldr	r3, [r7, #20]
 80106d6:	222c      	movs	r2, #44	@ 0x2c
 80106d8:	fb02 f303 	mul.w	r3, r2, r3
 80106dc:	68fa      	ldr	r2, [r7, #12]
 80106de:	18d0      	adds	r0, r2, r3
 80106e0:	693a      	ldr	r2, [r7, #16]
 80106e2:	4613      	mov	r3, r2
 80106e4:	009b      	lsls	r3, r3, #2
 80106e6:	4413      	add	r3, r2
 80106e8:	009b      	lsls	r3, r3, #2
 80106ea:	4a2e      	ldr	r2, [pc, #184]	@ (80107a4 <uxTaskGetSystemState+0xf8>)
 80106ec:	4413      	add	r3, r2
 80106ee:	2201      	movs	r2, #1
 80106f0:	4619      	mov	r1, r3
 80106f2:	f000 fd35 	bl	8011160 <prvListTasksWithinSingleList>
 80106f6:	4602      	mov	r2, r0
 80106f8:	697b      	ldr	r3, [r7, #20]
 80106fa:	4413      	add	r3, r2
 80106fc:	617b      	str	r3, [r7, #20]
                } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY );
 80106fe:	693b      	ldr	r3, [r7, #16]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d1e4      	bne.n	80106ce <uxTaskGetSystemState+0x22>

                /* Fill in an TaskStatus_t structure with information on each
                 * task in the Blocked state. */
                uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked ) );
 8010704:	697b      	ldr	r3, [r7, #20]
 8010706:	222c      	movs	r2, #44	@ 0x2c
 8010708:	fb02 f303 	mul.w	r3, r2, r3
 801070c:	68fa      	ldr	r2, [r7, #12]
 801070e:	4413      	add	r3, r2
 8010710:	4a25      	ldr	r2, [pc, #148]	@ (80107a8 <uxTaskGetSystemState+0xfc>)
 8010712:	6811      	ldr	r1, [r2, #0]
 8010714:	2202      	movs	r2, #2
 8010716:	4618      	mov	r0, r3
 8010718:	f000 fd22 	bl	8011160 <prvListTasksWithinSingleList>
 801071c:	4602      	mov	r2, r0
 801071e:	697b      	ldr	r3, [r7, #20]
 8010720:	4413      	add	r3, r2
 8010722:	617b      	str	r3, [r7, #20]
                uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked ) );
 8010724:	697b      	ldr	r3, [r7, #20]
 8010726:	222c      	movs	r2, #44	@ 0x2c
 8010728:	fb02 f303 	mul.w	r3, r2, r3
 801072c:	68fa      	ldr	r2, [r7, #12]
 801072e:	4413      	add	r3, r2
 8010730:	4a1e      	ldr	r2, [pc, #120]	@ (80107ac <uxTaskGetSystemState+0x100>)
 8010732:	6811      	ldr	r1, [r2, #0]
 8010734:	2202      	movs	r2, #2
 8010736:	4618      	mov	r0, r3
 8010738:	f000 fd12 	bl	8011160 <prvListTasksWithinSingleList>
 801073c:	4602      	mov	r2, r0
 801073e:	697b      	ldr	r3, [r7, #20]
 8010740:	4413      	add	r3, r2
 8010742:	617b      	str	r3, [r7, #20]

                #if ( INCLUDE_vTaskDelete == 1 )
                {
                    /* Fill in an TaskStatus_t structure with information on
                     * each task that has been deleted but not yet cleaned up. */
                    uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted ) );
 8010744:	697b      	ldr	r3, [r7, #20]
 8010746:	222c      	movs	r2, #44	@ 0x2c
 8010748:	fb02 f303 	mul.w	r3, r2, r3
 801074c:	68fa      	ldr	r2, [r7, #12]
 801074e:	4413      	add	r3, r2
 8010750:	2204      	movs	r2, #4
 8010752:	4917      	ldr	r1, [pc, #92]	@ (80107b0 <uxTaskGetSystemState+0x104>)
 8010754:	4618      	mov	r0, r3
 8010756:	f000 fd03 	bl	8011160 <prvListTasksWithinSingleList>
 801075a:	4602      	mov	r2, r0
 801075c:	697b      	ldr	r3, [r7, #20]
 801075e:	4413      	add	r3, r2
 8010760:	617b      	str	r3, [r7, #20]

                #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    /* Fill in an TaskStatus_t structure with information on
                     * each task in the Suspended state. */
                    uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended ) );
 8010762:	697b      	ldr	r3, [r7, #20]
 8010764:	222c      	movs	r2, #44	@ 0x2c
 8010766:	fb02 f303 	mul.w	r3, r2, r3
 801076a:	68fa      	ldr	r2, [r7, #12]
 801076c:	4413      	add	r3, r2
 801076e:	2203      	movs	r2, #3
 8010770:	4910      	ldr	r1, [pc, #64]	@ (80107b4 <uxTaskGetSystemState+0x108>)
 8010772:	4618      	mov	r0, r3
 8010774:	f000 fcf4 	bl	8011160 <prvListTasksWithinSingleList>
 8010778:	4602      	mov	r2, r0
 801077a:	697b      	ldr	r3, [r7, #20]
 801077c:	4413      	add	r3, r2
 801077e:	617b      	str	r3, [r7, #20]
                }
                #endif

                #if ( configGENERATE_RUN_TIME_STATS == 1 )
                {
                    if( pulTotalRunTime != NULL )
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d004      	beq.n	8010790 <uxTaskGetSystemState+0xe4>
                    {
                        #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
                            portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
                        #else
                            *pulTotalRunTime = ( configRUN_TIME_COUNTER_TYPE ) portGET_RUN_TIME_COUNTER_VALUE();
 8010786:	f7ff ff75 	bl	8010674 <xTaskGetTickCount>
 801078a:	4602      	mov	r2, r0
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	601a      	str	r2, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        ( void ) xTaskResumeAll();
 8010790:	f7ff fe60 	bl	8010454 <xTaskResumeAll>

        traceRETURN_uxTaskGetSystemState( uxTask );

        return uxTask;
 8010794:	697b      	ldr	r3, [r7, #20]
    }
 8010796:	4618      	mov	r0, r3
 8010798:	3718      	adds	r7, #24
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}
 801079e:	bf00      	nop
 80107a0:	200005f8 	.word	0x200005f8
 80107a4:	200004fc 	.word	0x200004fc
 80107a8:	200005b0 	.word	0x200005b0
 80107ac:	200005b4 	.word	0x200005b4
 80107b0:	200005cc 	.word	0x200005cc
 80107b4:	200005e4 	.word	0x200005e4

080107b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b08a      	sub	sp, #40	@ 0x28
 80107bc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80107be:	2300      	movs	r3, #0
 80107c0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80107c2:	4b81      	ldr	r3, [pc, #516]	@ (80109c8 <xTaskIncrementTick+0x210>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	f040 80f4 	bne.w	80109b4 <xTaskIncrementTick+0x1fc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80107cc:	4b7f      	ldr	r3, [pc, #508]	@ (80109cc <xTaskIncrementTick+0x214>)
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	3301      	adds	r3, #1
 80107d2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80107d4:	4a7d      	ldr	r2, [pc, #500]	@ (80109cc <xTaskIncrementTick+0x214>)
 80107d6:	6a3b      	ldr	r3, [r7, #32]
 80107d8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80107da:	6a3b      	ldr	r3, [r7, #32]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d126      	bne.n	801082e <xTaskIncrementTick+0x76>
        {
            taskSWITCH_DELAYED_LISTS();
 80107e0:	4b7b      	ldr	r3, [pc, #492]	@ (80109d0 <xTaskIncrementTick+0x218>)
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d010      	beq.n	801080c <xTaskIncrementTick+0x54>
    __asm volatile
 80107ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107ee:	b672      	cpsid	i
 80107f0:	f383 8811 	msr	BASEPRI, r3
 80107f4:	f3bf 8f6f 	isb	sy
 80107f8:	f3bf 8f4f 	dsb	sy
 80107fc:	b662      	cpsie	i
 80107fe:	607b      	str	r3, [r7, #4]
}
 8010800:	bf00      	nop
 8010802:	f241 215f 	movw	r1, #4703	@ 0x125f
 8010806:	4873      	ldr	r0, [pc, #460]	@ (80109d4 <xTaskIncrementTick+0x21c>)
 8010808:	f7f6 f85e 	bl	80068c8 <vAssertCalled>
 801080c:	4b70      	ldr	r3, [pc, #448]	@ (80109d0 <xTaskIncrementTick+0x218>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	61fb      	str	r3, [r7, #28]
 8010812:	4b71      	ldr	r3, [pc, #452]	@ (80109d8 <xTaskIncrementTick+0x220>)
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	4a6e      	ldr	r2, [pc, #440]	@ (80109d0 <xTaskIncrementTick+0x218>)
 8010818:	6013      	str	r3, [r2, #0]
 801081a:	4a6f      	ldr	r2, [pc, #444]	@ (80109d8 <xTaskIncrementTick+0x220>)
 801081c:	69fb      	ldr	r3, [r7, #28]
 801081e:	6013      	str	r3, [r2, #0]
 8010820:	4b6e      	ldr	r3, [pc, #440]	@ (80109dc <xTaskIncrementTick+0x224>)
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	3301      	adds	r3, #1
 8010826:	4a6d      	ldr	r2, [pc, #436]	@ (80109dc <xTaskIncrementTick+0x224>)
 8010828:	6013      	str	r3, [r2, #0]
 801082a:	f000 fcfd 	bl	8011228 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 801082e:	4b6c      	ldr	r3, [pc, #432]	@ (80109e0 <xTaskIncrementTick+0x228>)
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	6a3a      	ldr	r2, [r7, #32]
 8010834:	429a      	cmp	r2, r3
 8010836:	f0c0 80a8 	bcc.w	801098a <xTaskIncrementTick+0x1d2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801083a:	4b65      	ldr	r3, [pc, #404]	@ (80109d0 <xTaskIncrementTick+0x218>)
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d104      	bne.n	801084e <xTaskIncrementTick+0x96>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8010844:	4b66      	ldr	r3, [pc, #408]	@ (80109e0 <xTaskIncrementTick+0x228>)
 8010846:	f04f 32ff 	mov.w	r2, #4294967295
 801084a:	601a      	str	r2, [r3, #0]
                    break;
 801084c:	e09d      	b.n	801098a <xTaskIncrementTick+0x1d2>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801084e:	4b60      	ldr	r3, [pc, #384]	@ (80109d0 <xTaskIncrementTick+0x218>)
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	68db      	ldr	r3, [r3, #12]
 8010854:	68db      	ldr	r3, [r3, #12]
 8010856:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010858:	69bb      	ldr	r3, [r7, #24]
 801085a:	685b      	ldr	r3, [r3, #4]
 801085c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 801085e:	6a3a      	ldr	r2, [r7, #32]
 8010860:	697b      	ldr	r3, [r7, #20]
 8010862:	429a      	cmp	r2, r3
 8010864:	d203      	bcs.n	801086e <xTaskIncrementTick+0xb6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8010866:	4a5e      	ldr	r2, [pc, #376]	@ (80109e0 <xTaskIncrementTick+0x228>)
 8010868:	697b      	ldr	r3, [r7, #20]
 801086a:	6013      	str	r3, [r2, #0]
                        break;
 801086c:	e08d      	b.n	801098a <xTaskIncrementTick+0x1d2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 801086e:	69bb      	ldr	r3, [r7, #24]
 8010870:	695b      	ldr	r3, [r3, #20]
 8010872:	613b      	str	r3, [r7, #16]
 8010874:	69bb      	ldr	r3, [r7, #24]
 8010876:	689b      	ldr	r3, [r3, #8]
 8010878:	69ba      	ldr	r2, [r7, #24]
 801087a:	68d2      	ldr	r2, [r2, #12]
 801087c:	609a      	str	r2, [r3, #8]
 801087e:	69bb      	ldr	r3, [r7, #24]
 8010880:	68db      	ldr	r3, [r3, #12]
 8010882:	69ba      	ldr	r2, [r7, #24]
 8010884:	6892      	ldr	r2, [r2, #8]
 8010886:	605a      	str	r2, [r3, #4]
 8010888:	693b      	ldr	r3, [r7, #16]
 801088a:	685a      	ldr	r2, [r3, #4]
 801088c:	69bb      	ldr	r3, [r7, #24]
 801088e:	3304      	adds	r3, #4
 8010890:	429a      	cmp	r2, r3
 8010892:	d103      	bne.n	801089c <xTaskIncrementTick+0xe4>
 8010894:	69bb      	ldr	r3, [r7, #24]
 8010896:	68da      	ldr	r2, [r3, #12]
 8010898:	693b      	ldr	r3, [r7, #16]
 801089a:	605a      	str	r2, [r3, #4]
 801089c:	69bb      	ldr	r3, [r7, #24]
 801089e:	2200      	movs	r2, #0
 80108a0:	615a      	str	r2, [r3, #20]
 80108a2:	693b      	ldr	r3, [r7, #16]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	1e5a      	subs	r2, r3, #1
 80108a8:	693b      	ldr	r3, [r7, #16]
 80108aa:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80108ac:	69bb      	ldr	r3, [r7, #24]
 80108ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d01e      	beq.n	80108f2 <xTaskIncrementTick+0x13a>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80108b4:	69bb      	ldr	r3, [r7, #24]
 80108b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80108b8:	60fb      	str	r3, [r7, #12]
 80108ba:	69bb      	ldr	r3, [r7, #24]
 80108bc:	69db      	ldr	r3, [r3, #28]
 80108be:	69ba      	ldr	r2, [r7, #24]
 80108c0:	6a12      	ldr	r2, [r2, #32]
 80108c2:	609a      	str	r2, [r3, #8]
 80108c4:	69bb      	ldr	r3, [r7, #24]
 80108c6:	6a1b      	ldr	r3, [r3, #32]
 80108c8:	69ba      	ldr	r2, [r7, #24]
 80108ca:	69d2      	ldr	r2, [r2, #28]
 80108cc:	605a      	str	r2, [r3, #4]
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	685a      	ldr	r2, [r3, #4]
 80108d2:	69bb      	ldr	r3, [r7, #24]
 80108d4:	3318      	adds	r3, #24
 80108d6:	429a      	cmp	r2, r3
 80108d8:	d103      	bne.n	80108e2 <xTaskIncrementTick+0x12a>
 80108da:	69bb      	ldr	r3, [r7, #24]
 80108dc:	6a1a      	ldr	r2, [r3, #32]
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	605a      	str	r2, [r3, #4]
 80108e2:	69bb      	ldr	r3, [r7, #24]
 80108e4:	2200      	movs	r2, #0
 80108e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	1e5a      	subs	r2, r3, #1
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80108f2:	69bb      	ldr	r3, [r7, #24]
 80108f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108f6:	2201      	movs	r2, #1
 80108f8:	409a      	lsls	r2, r3
 80108fa:	4b3a      	ldr	r3, [pc, #232]	@ (80109e4 <xTaskIncrementTick+0x22c>)
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	4313      	orrs	r3, r2
 8010900:	4a38      	ldr	r2, [pc, #224]	@ (80109e4 <xTaskIncrementTick+0x22c>)
 8010902:	6013      	str	r3, [r2, #0]
 8010904:	69bb      	ldr	r3, [r7, #24]
 8010906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010908:	4937      	ldr	r1, [pc, #220]	@ (80109e8 <xTaskIncrementTick+0x230>)
 801090a:	4613      	mov	r3, r2
 801090c:	009b      	lsls	r3, r3, #2
 801090e:	4413      	add	r3, r2
 8010910:	009b      	lsls	r3, r3, #2
 8010912:	440b      	add	r3, r1
 8010914:	3304      	adds	r3, #4
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	60bb      	str	r3, [r7, #8]
 801091a:	69bb      	ldr	r3, [r7, #24]
 801091c:	68ba      	ldr	r2, [r7, #8]
 801091e:	609a      	str	r2, [r3, #8]
 8010920:	68bb      	ldr	r3, [r7, #8]
 8010922:	689a      	ldr	r2, [r3, #8]
 8010924:	69bb      	ldr	r3, [r7, #24]
 8010926:	60da      	str	r2, [r3, #12]
 8010928:	68bb      	ldr	r3, [r7, #8]
 801092a:	689b      	ldr	r3, [r3, #8]
 801092c:	69ba      	ldr	r2, [r7, #24]
 801092e:	3204      	adds	r2, #4
 8010930:	605a      	str	r2, [r3, #4]
 8010932:	69bb      	ldr	r3, [r7, #24]
 8010934:	1d1a      	adds	r2, r3, #4
 8010936:	68bb      	ldr	r3, [r7, #8]
 8010938:	609a      	str	r2, [r3, #8]
 801093a:	69bb      	ldr	r3, [r7, #24]
 801093c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801093e:	4613      	mov	r3, r2
 8010940:	009b      	lsls	r3, r3, #2
 8010942:	4413      	add	r3, r2
 8010944:	009b      	lsls	r3, r3, #2
 8010946:	4a28      	ldr	r2, [pc, #160]	@ (80109e8 <xTaskIncrementTick+0x230>)
 8010948:	441a      	add	r2, r3
 801094a:	69bb      	ldr	r3, [r7, #24]
 801094c:	615a      	str	r2, [r3, #20]
 801094e:	69bb      	ldr	r3, [r7, #24]
 8010950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010952:	4925      	ldr	r1, [pc, #148]	@ (80109e8 <xTaskIncrementTick+0x230>)
 8010954:	4613      	mov	r3, r2
 8010956:	009b      	lsls	r3, r3, #2
 8010958:	4413      	add	r3, r2
 801095a:	009b      	lsls	r3, r3, #2
 801095c:	440b      	add	r3, r1
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	69ba      	ldr	r2, [r7, #24]
 8010962:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8010964:	1c59      	adds	r1, r3, #1
 8010966:	4820      	ldr	r0, [pc, #128]	@ (80109e8 <xTaskIncrementTick+0x230>)
 8010968:	4613      	mov	r3, r2
 801096a:	009b      	lsls	r3, r3, #2
 801096c:	4413      	add	r3, r2
 801096e:	009b      	lsls	r3, r3, #2
 8010970:	4403      	add	r3, r0
 8010972:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010974:	69bb      	ldr	r3, [r7, #24]
 8010976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010978:	4b1c      	ldr	r3, [pc, #112]	@ (80109ec <xTaskIncrementTick+0x234>)
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801097e:	429a      	cmp	r2, r3
 8010980:	f67f af5b 	bls.w	801083a <xTaskIncrementTick+0x82>
                            {
                                xSwitchRequired = pdTRUE;
 8010984:	2301      	movs	r3, #1
 8010986:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010988:	e757      	b.n	801083a <xTaskIncrementTick+0x82>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 801098a:	4b18      	ldr	r3, [pc, #96]	@ (80109ec <xTaskIncrementTick+0x234>)
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010990:	4915      	ldr	r1, [pc, #84]	@ (80109e8 <xTaskIncrementTick+0x230>)
 8010992:	4613      	mov	r3, r2
 8010994:	009b      	lsls	r3, r3, #2
 8010996:	4413      	add	r3, r2
 8010998:	009b      	lsls	r3, r3, #2
 801099a:	440b      	add	r3, r1
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	2b01      	cmp	r3, #1
 80109a0:	d901      	bls.n	80109a6 <xTaskIncrementTick+0x1ee>
                {
                    xSwitchRequired = pdTRUE;
 80109a2:	2301      	movs	r3, #1
 80109a4:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80109a6:	4b12      	ldr	r3, [pc, #72]	@ (80109f0 <xTaskIncrementTick+0x238>)
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d007      	beq.n	80109be <xTaskIncrementTick+0x206>
                {
                    xSwitchRequired = pdTRUE;
 80109ae:	2301      	movs	r3, #1
 80109b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80109b2:	e004      	b.n	80109be <xTaskIncrementTick+0x206>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80109b4:	4b0f      	ldr	r3, [pc, #60]	@ (80109f4 <xTaskIncrementTick+0x23c>)
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	3301      	adds	r3, #1
 80109ba:	4a0e      	ldr	r2, [pc, #56]	@ (80109f4 <xTaskIncrementTick+0x23c>)
 80109bc:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 80109be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80109c0:	4618      	mov	r0, r3
 80109c2:	3728      	adds	r7, #40	@ 0x28
 80109c4:	46bd      	mov	sp, r7
 80109c6:	bd80      	pop	{r7, pc}
 80109c8:	20000620 	.word	0x20000620
 80109cc:	200005fc 	.word	0x200005fc
 80109d0:	200005b0 	.word	0x200005b0
 80109d4:	08018b64 	.word	0x08018b64
 80109d8:	200005b4 	.word	0x200005b4
 80109dc:	20000610 	.word	0x20000610
 80109e0:	20000618 	.word	0x20000618
 80109e4:	20000600 	.word	0x20000600
 80109e8:	200004fc 	.word	0x200004fc
 80109ec:	200004f8 	.word	0x200004f8
 80109f0:	2000060c 	.word	0x2000060c
 80109f4:	20000608 	.word	0x20000608

080109f8 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b088      	sub	sp, #32
 80109fc:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80109fe:	4b4c      	ldr	r3, [pc, #304]	@ (8010b30 <vTaskSwitchContext+0x138>)
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d003      	beq.n	8010a0e <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8010a06:	4b4b      	ldr	r3, [pc, #300]	@ (8010b34 <vTaskSwitchContext+0x13c>)
 8010a08:	2201      	movs	r2, #1
 8010a0a:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8010a0c:	e08c      	b.n	8010b28 <vTaskSwitchContext+0x130>
            xYieldPendings[ 0 ] = pdFALSE;
 8010a0e:	4b49      	ldr	r3, [pc, #292]	@ (8010b34 <vTaskSwitchContext+0x13c>)
 8010a10:	2200      	movs	r2, #0
 8010a12:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime[ 0 ] = portGET_RUN_TIME_COUNTER_VALUE();
 8010a14:	f7ff fe2e 	bl	8010674 <xTaskGetTickCount>
 8010a18:	4603      	mov	r3, r0
 8010a1a:	4a47      	ldr	r2, [pc, #284]	@ (8010b38 <vTaskSwitchContext+0x140>)
 8010a1c:	6013      	str	r3, [r2, #0]
                if( ulTotalRunTime[ 0 ] > ulTaskSwitchedInTime[ 0 ] )
 8010a1e:	4b46      	ldr	r3, [pc, #280]	@ (8010b38 <vTaskSwitchContext+0x140>)
 8010a20:	681a      	ldr	r2, [r3, #0]
 8010a22:	4b46      	ldr	r3, [pc, #280]	@ (8010b3c <vTaskSwitchContext+0x144>)
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	429a      	cmp	r2, r3
 8010a28:	d909      	bls.n	8010a3e <vTaskSwitchContext+0x46>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime[ 0 ] - ulTaskSwitchedInTime[ 0 ] );
 8010a2a:	4b43      	ldr	r3, [pc, #268]	@ (8010b38 <vTaskSwitchContext+0x140>)
 8010a2c:	681a      	ldr	r2, [r3, #0]
 8010a2e:	4b43      	ldr	r3, [pc, #268]	@ (8010b3c <vTaskSwitchContext+0x144>)
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	1ad1      	subs	r1, r2, r3
 8010a34:	4b42      	ldr	r3, [pc, #264]	@ (8010b40 <vTaskSwitchContext+0x148>)
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010a3a:	440a      	add	r2, r1
 8010a3c:	659a      	str	r2, [r3, #88]	@ 0x58
                ulTaskSwitchedInTime[ 0 ] = ulTotalRunTime[ 0 ];
 8010a3e:	4b3e      	ldr	r3, [pc, #248]	@ (8010b38 <vTaskSwitchContext+0x140>)
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	4a3e      	ldr	r2, [pc, #248]	@ (8010b3c <vTaskSwitchContext+0x144>)
 8010a44:	6013      	str	r3, [r2, #0]
            taskCHECK_FOR_STACK_OVERFLOW();
 8010a46:	4b3e      	ldr	r3, [pc, #248]	@ (8010b40 <vTaskSwitchContext+0x148>)
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a4c:	61fb      	str	r3, [r7, #28]
 8010a4e:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8010a52:	61bb      	str	r3, [r7, #24]
 8010a54:	69fb      	ldr	r3, [r7, #28]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	69ba      	ldr	r2, [r7, #24]
 8010a5a:	429a      	cmp	r2, r3
 8010a5c:	d111      	bne.n	8010a82 <vTaskSwitchContext+0x8a>
 8010a5e:	69fb      	ldr	r3, [r7, #28]
 8010a60:	3304      	adds	r3, #4
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	69ba      	ldr	r2, [r7, #24]
 8010a66:	429a      	cmp	r2, r3
 8010a68:	d10b      	bne.n	8010a82 <vTaskSwitchContext+0x8a>
 8010a6a:	69fb      	ldr	r3, [r7, #28]
 8010a6c:	3308      	adds	r3, #8
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	69ba      	ldr	r2, [r7, #24]
 8010a72:	429a      	cmp	r2, r3
 8010a74:	d105      	bne.n	8010a82 <vTaskSwitchContext+0x8a>
 8010a76:	69fb      	ldr	r3, [r7, #28]
 8010a78:	330c      	adds	r3, #12
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	69ba      	ldr	r2, [r7, #24]
 8010a7e:	429a      	cmp	r2, r3
 8010a80:	d009      	beq.n	8010a96 <vTaskSwitchContext+0x9e>
 8010a82:	4b2f      	ldr	r3, [pc, #188]	@ (8010b40 <vTaskSwitchContext+0x148>)
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	3334      	adds	r3, #52	@ 0x34
 8010a88:	617b      	str	r3, [r7, #20]
 8010a8a:	4b2d      	ldr	r3, [pc, #180]	@ (8010b40 <vTaskSwitchContext+0x148>)
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	6979      	ldr	r1, [r7, #20]
 8010a90:	4618      	mov	r0, r3
 8010a92:	f7f5 fabf 	bl	8006014 <vApplicationStackOverflowHook>
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8010a96:	4b2b      	ldr	r3, [pc, #172]	@ (8010b44 <vTaskSwitchContext+0x14c>)
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	60bb      	str	r3, [r7, #8]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010a9c:	68bb      	ldr	r3, [r7, #8]
 8010a9e:	fab3 f383 	clz	r3, r3
 8010aa2:	71fb      	strb	r3, [r7, #7]
        return ucReturn;
 8010aa4:	79fb      	ldrb	r3, [r7, #7]
 8010aa6:	f1c3 031f 	rsb	r3, r3, #31
 8010aaa:	613b      	str	r3, [r7, #16]
 8010aac:	4926      	ldr	r1, [pc, #152]	@ (8010b48 <vTaskSwitchContext+0x150>)
 8010aae:	693a      	ldr	r2, [r7, #16]
 8010ab0:	4613      	mov	r3, r2
 8010ab2:	009b      	lsls	r3, r3, #2
 8010ab4:	4413      	add	r3, r2
 8010ab6:	009b      	lsls	r3, r3, #2
 8010ab8:	440b      	add	r3, r1
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d110      	bne.n	8010ae2 <vTaskSwitchContext+0xea>
    __asm volatile
 8010ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ac4:	b672      	cpsid	i
 8010ac6:	f383 8811 	msr	BASEPRI, r3
 8010aca:	f3bf 8f6f 	isb	sy
 8010ace:	f3bf 8f4f 	dsb	sy
 8010ad2:	b662      	cpsie	i
 8010ad4:	603b      	str	r3, [r7, #0]
}
 8010ad6:	bf00      	nop
 8010ad8:	f241 31fa 	movw	r1, #5114	@ 0x13fa
 8010adc:	481b      	ldr	r0, [pc, #108]	@ (8010b4c <vTaskSwitchContext+0x154>)
 8010ade:	f7f5 fef3 	bl	80068c8 <vAssertCalled>
 8010ae2:	693a      	ldr	r2, [r7, #16]
 8010ae4:	4613      	mov	r3, r2
 8010ae6:	009b      	lsls	r3, r3, #2
 8010ae8:	4413      	add	r3, r2
 8010aea:	009b      	lsls	r3, r3, #2
 8010aec:	4a16      	ldr	r2, [pc, #88]	@ (8010b48 <vTaskSwitchContext+0x150>)
 8010aee:	4413      	add	r3, r2
 8010af0:	60fb      	str	r3, [r7, #12]
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	685b      	ldr	r3, [r3, #4]
 8010af6:	685a      	ldr	r2, [r3, #4]
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	605a      	str	r2, [r3, #4]
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	685a      	ldr	r2, [r3, #4]
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	3308      	adds	r3, #8
 8010b04:	429a      	cmp	r2, r3
 8010b06:	d103      	bne.n	8010b10 <vTaskSwitchContext+0x118>
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	68da      	ldr	r2, [r3, #12]
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	605a      	str	r2, [r3, #4]
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	685b      	ldr	r3, [r3, #4]
 8010b14:	68db      	ldr	r3, [r3, #12]
 8010b16:	4a0a      	ldr	r2, [pc, #40]	@ (8010b40 <vTaskSwitchContext+0x148>)
 8010b18:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8010b1a:	4b09      	ldr	r3, [pc, #36]	@ (8010b40 <vTaskSwitchContext+0x148>)
 8010b1c:	681b      	ldr	r3, [r3, #0]
                configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8010b1e:	4b08      	ldr	r3, [pc, #32]	@ (8010b40 <vTaskSwitchContext+0x148>)
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	335c      	adds	r3, #92	@ 0x5c
 8010b24:	4a0a      	ldr	r2, [pc, #40]	@ (8010b50 <vTaskSwitchContext+0x158>)
 8010b26:	6013      	str	r3, [r2, #0]
    }
 8010b28:	bf00      	nop
 8010b2a:	3720      	adds	r7, #32
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	bd80      	pop	{r7, pc}
 8010b30:	20000620 	.word	0x20000620
 8010b34:	2000060c 	.word	0x2000060c
 8010b38:	20000628 	.word	0x20000628
 8010b3c:	20000624 	.word	0x20000624
 8010b40:	200004f8 	.word	0x200004f8
 8010b44:	20000600 	.word	0x20000600
 8010b48:	200004fc 	.word	0x200004fc
 8010b4c:	08018b64 	.word	0x08018b64
 8010b50:	200001d4 	.word	0x200001d4

08010b54 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b084      	sub	sp, #16
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
 8010b5c:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d110      	bne.n	8010b86 <vTaskPlaceOnEventList+0x32>
    __asm volatile
 8010b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b68:	b672      	cpsid	i
 8010b6a:	f383 8811 	msr	BASEPRI, r3
 8010b6e:	f3bf 8f6f 	isb	sy
 8010b72:	f3bf 8f4f 	dsb	sy
 8010b76:	b662      	cpsie	i
 8010b78:	60fb      	str	r3, [r7, #12]
}
 8010b7a:	bf00      	nop
 8010b7c:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 8010b80:	4808      	ldr	r0, [pc, #32]	@ (8010ba4 <vTaskPlaceOnEventList+0x50>)
 8010b82:	f7f5 fea1 	bl	80068c8 <vAssertCalled>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010b86:	4b08      	ldr	r3, [pc, #32]	@ (8010ba8 <vTaskPlaceOnEventList+0x54>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	3318      	adds	r3, #24
 8010b8c:	4619      	mov	r1, r3
 8010b8e:	6878      	ldr	r0, [r7, #4]
 8010b90:	f7fe f9c9 	bl	800ef26 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010b94:	2101      	movs	r1, #1
 8010b96:	6838      	ldr	r0, [r7, #0]
 8010b98:	f000 fdc6 	bl	8011728 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8010b9c:	bf00      	nop
 8010b9e:	3710      	adds	r7, #16
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	bd80      	pop	{r7, pc}
 8010ba4:	08018b64 	.word	0x08018b64
 8010ba8:	200004f8 	.word	0x200004f8

08010bac <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b086      	sub	sp, #24
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	60f8      	str	r0, [r7, #12]
 8010bb4:	60b9      	str	r1, [r7, #8]
 8010bb6:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d110      	bne.n	8010be0 <vTaskPlaceOnEventListRestricted+0x34>
    __asm volatile
 8010bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bc2:	b672      	cpsid	i
 8010bc4:	f383 8811 	msr	BASEPRI, r3
 8010bc8:	f3bf 8f6f 	isb	sy
 8010bcc:	f3bf 8f4f 	dsb	sy
 8010bd0:	b662      	cpsie	i
 8010bd2:	613b      	str	r3, [r7, #16]
}
 8010bd4:	bf00      	nop
 8010bd6:	f241 41be 	movw	r1, #5310	@ 0x14be
 8010bda:	4819      	ldr	r0, [pc, #100]	@ (8010c40 <vTaskPlaceOnEventListRestricted+0x94>)
 8010bdc:	f7f5 fe74 	bl	80068c8 <vAssertCalled>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	685b      	ldr	r3, [r3, #4]
 8010be4:	617b      	str	r3, [r7, #20]
 8010be6:	4b17      	ldr	r3, [pc, #92]	@ (8010c44 <vTaskPlaceOnEventListRestricted+0x98>)
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	697a      	ldr	r2, [r7, #20]
 8010bec:	61da      	str	r2, [r3, #28]
 8010bee:	4b15      	ldr	r3, [pc, #84]	@ (8010c44 <vTaskPlaceOnEventListRestricted+0x98>)
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	697a      	ldr	r2, [r7, #20]
 8010bf4:	6892      	ldr	r2, [r2, #8]
 8010bf6:	621a      	str	r2, [r3, #32]
 8010bf8:	4b12      	ldr	r3, [pc, #72]	@ (8010c44 <vTaskPlaceOnEventListRestricted+0x98>)
 8010bfa:	681a      	ldr	r2, [r3, #0]
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	689b      	ldr	r3, [r3, #8]
 8010c00:	3218      	adds	r2, #24
 8010c02:	605a      	str	r2, [r3, #4]
 8010c04:	4b0f      	ldr	r3, [pc, #60]	@ (8010c44 <vTaskPlaceOnEventListRestricted+0x98>)
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	f103 0218 	add.w	r2, r3, #24
 8010c0c:	697b      	ldr	r3, [r7, #20]
 8010c0e:	609a      	str	r2, [r3, #8]
 8010c10:	4b0c      	ldr	r3, [pc, #48]	@ (8010c44 <vTaskPlaceOnEventListRestricted+0x98>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	68fa      	ldr	r2, [r7, #12]
 8010c16:	629a      	str	r2, [r3, #40]	@ 0x28
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	1c5a      	adds	r2, r3, #1
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d002      	beq.n	8010c2e <vTaskPlaceOnEventListRestricted+0x82>
        {
            xTicksToWait = portMAX_DELAY;
 8010c28:	f04f 33ff 	mov.w	r3, #4294967295
 8010c2c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010c2e:	6879      	ldr	r1, [r7, #4]
 8010c30:	68b8      	ldr	r0, [r7, #8]
 8010c32:	f000 fd79 	bl	8011728 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 8010c36:	bf00      	nop
 8010c38:	3718      	adds	r7, #24
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	bd80      	pop	{r7, pc}
 8010c3e:	bf00      	nop
 8010c40:	08018b64 	.word	0x08018b64
 8010c44:	200004f8 	.word	0x200004f8

08010c48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b08a      	sub	sp, #40	@ 0x28
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	68db      	ldr	r3, [r3, #12]
 8010c54:	68db      	ldr	r3, [r3, #12]
 8010c56:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8010c58:	6a3b      	ldr	r3, [r7, #32]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d110      	bne.n	8010c80 <xTaskRemoveFromEventList+0x38>
    __asm volatile
 8010c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c62:	b672      	cpsid	i
 8010c64:	f383 8811 	msr	BASEPRI, r3
 8010c68:	f3bf 8f6f 	isb	sy
 8010c6c:	f3bf 8f4f 	dsb	sy
 8010c70:	b662      	cpsie	i
 8010c72:	60fb      	str	r3, [r7, #12]
}
 8010c74:	bf00      	nop
 8010c76:	f241 41f5 	movw	r1, #5365	@ 0x14f5
 8010c7a:	485b      	ldr	r0, [pc, #364]	@ (8010de8 <xTaskRemoveFromEventList+0x1a0>)
 8010c7c:	f7f5 fe24 	bl	80068c8 <vAssertCalled>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8010c80:	6a3b      	ldr	r3, [r7, #32]
 8010c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c84:	61fb      	str	r3, [r7, #28]
 8010c86:	6a3b      	ldr	r3, [r7, #32]
 8010c88:	69db      	ldr	r3, [r3, #28]
 8010c8a:	6a3a      	ldr	r2, [r7, #32]
 8010c8c:	6a12      	ldr	r2, [r2, #32]
 8010c8e:	609a      	str	r2, [r3, #8]
 8010c90:	6a3b      	ldr	r3, [r7, #32]
 8010c92:	6a1b      	ldr	r3, [r3, #32]
 8010c94:	6a3a      	ldr	r2, [r7, #32]
 8010c96:	69d2      	ldr	r2, [r2, #28]
 8010c98:	605a      	str	r2, [r3, #4]
 8010c9a:	69fb      	ldr	r3, [r7, #28]
 8010c9c:	685a      	ldr	r2, [r3, #4]
 8010c9e:	6a3b      	ldr	r3, [r7, #32]
 8010ca0:	3318      	adds	r3, #24
 8010ca2:	429a      	cmp	r2, r3
 8010ca4:	d103      	bne.n	8010cae <xTaskRemoveFromEventList+0x66>
 8010ca6:	6a3b      	ldr	r3, [r7, #32]
 8010ca8:	6a1a      	ldr	r2, [r3, #32]
 8010caa:	69fb      	ldr	r3, [r7, #28]
 8010cac:	605a      	str	r2, [r3, #4]
 8010cae:	6a3b      	ldr	r3, [r7, #32]
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	629a      	str	r2, [r3, #40]	@ 0x28
 8010cb4:	69fb      	ldr	r3, [r7, #28]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	1e5a      	subs	r2, r3, #1
 8010cba:	69fb      	ldr	r3, [r7, #28]
 8010cbc:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8010cbe:	4b4b      	ldr	r3, [pc, #300]	@ (8010dec <xTaskRemoveFromEventList+0x1a4>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d160      	bne.n	8010d88 <xTaskRemoveFromEventList+0x140>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8010cc6:	6a3b      	ldr	r3, [r7, #32]
 8010cc8:	695b      	ldr	r3, [r3, #20]
 8010cca:	617b      	str	r3, [r7, #20]
 8010ccc:	6a3b      	ldr	r3, [r7, #32]
 8010cce:	689b      	ldr	r3, [r3, #8]
 8010cd0:	6a3a      	ldr	r2, [r7, #32]
 8010cd2:	68d2      	ldr	r2, [r2, #12]
 8010cd4:	609a      	str	r2, [r3, #8]
 8010cd6:	6a3b      	ldr	r3, [r7, #32]
 8010cd8:	68db      	ldr	r3, [r3, #12]
 8010cda:	6a3a      	ldr	r2, [r7, #32]
 8010cdc:	6892      	ldr	r2, [r2, #8]
 8010cde:	605a      	str	r2, [r3, #4]
 8010ce0:	697b      	ldr	r3, [r7, #20]
 8010ce2:	685a      	ldr	r2, [r3, #4]
 8010ce4:	6a3b      	ldr	r3, [r7, #32]
 8010ce6:	3304      	adds	r3, #4
 8010ce8:	429a      	cmp	r2, r3
 8010cea:	d103      	bne.n	8010cf4 <xTaskRemoveFromEventList+0xac>
 8010cec:	6a3b      	ldr	r3, [r7, #32]
 8010cee:	68da      	ldr	r2, [r3, #12]
 8010cf0:	697b      	ldr	r3, [r7, #20]
 8010cf2:	605a      	str	r2, [r3, #4]
 8010cf4:	6a3b      	ldr	r3, [r7, #32]
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	615a      	str	r2, [r3, #20]
 8010cfa:	697b      	ldr	r3, [r7, #20]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	1e5a      	subs	r2, r3, #1
 8010d00:	697b      	ldr	r3, [r7, #20]
 8010d02:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8010d04:	6a3b      	ldr	r3, [r7, #32]
 8010d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d08:	2201      	movs	r2, #1
 8010d0a:	409a      	lsls	r2, r3
 8010d0c:	4b38      	ldr	r3, [pc, #224]	@ (8010df0 <xTaskRemoveFromEventList+0x1a8>)
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	4313      	orrs	r3, r2
 8010d12:	4a37      	ldr	r2, [pc, #220]	@ (8010df0 <xTaskRemoveFromEventList+0x1a8>)
 8010d14:	6013      	str	r3, [r2, #0]
 8010d16:	6a3b      	ldr	r3, [r7, #32]
 8010d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d1a:	4936      	ldr	r1, [pc, #216]	@ (8010df4 <xTaskRemoveFromEventList+0x1ac>)
 8010d1c:	4613      	mov	r3, r2
 8010d1e:	009b      	lsls	r3, r3, #2
 8010d20:	4413      	add	r3, r2
 8010d22:	009b      	lsls	r3, r3, #2
 8010d24:	440b      	add	r3, r1
 8010d26:	3304      	adds	r3, #4
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	613b      	str	r3, [r7, #16]
 8010d2c:	6a3b      	ldr	r3, [r7, #32]
 8010d2e:	693a      	ldr	r2, [r7, #16]
 8010d30:	609a      	str	r2, [r3, #8]
 8010d32:	693b      	ldr	r3, [r7, #16]
 8010d34:	689a      	ldr	r2, [r3, #8]
 8010d36:	6a3b      	ldr	r3, [r7, #32]
 8010d38:	60da      	str	r2, [r3, #12]
 8010d3a:	693b      	ldr	r3, [r7, #16]
 8010d3c:	689b      	ldr	r3, [r3, #8]
 8010d3e:	6a3a      	ldr	r2, [r7, #32]
 8010d40:	3204      	adds	r2, #4
 8010d42:	605a      	str	r2, [r3, #4]
 8010d44:	6a3b      	ldr	r3, [r7, #32]
 8010d46:	1d1a      	adds	r2, r3, #4
 8010d48:	693b      	ldr	r3, [r7, #16]
 8010d4a:	609a      	str	r2, [r3, #8]
 8010d4c:	6a3b      	ldr	r3, [r7, #32]
 8010d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d50:	4613      	mov	r3, r2
 8010d52:	009b      	lsls	r3, r3, #2
 8010d54:	4413      	add	r3, r2
 8010d56:	009b      	lsls	r3, r3, #2
 8010d58:	4a26      	ldr	r2, [pc, #152]	@ (8010df4 <xTaskRemoveFromEventList+0x1ac>)
 8010d5a:	441a      	add	r2, r3
 8010d5c:	6a3b      	ldr	r3, [r7, #32]
 8010d5e:	615a      	str	r2, [r3, #20]
 8010d60:	6a3b      	ldr	r3, [r7, #32]
 8010d62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d64:	4923      	ldr	r1, [pc, #140]	@ (8010df4 <xTaskRemoveFromEventList+0x1ac>)
 8010d66:	4613      	mov	r3, r2
 8010d68:	009b      	lsls	r3, r3, #2
 8010d6a:	4413      	add	r3, r2
 8010d6c:	009b      	lsls	r3, r3, #2
 8010d6e:	440b      	add	r3, r1
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	6a3a      	ldr	r2, [r7, #32]
 8010d74:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8010d76:	1c59      	adds	r1, r3, #1
 8010d78:	481e      	ldr	r0, [pc, #120]	@ (8010df4 <xTaskRemoveFromEventList+0x1ac>)
 8010d7a:	4613      	mov	r3, r2
 8010d7c:	009b      	lsls	r3, r3, #2
 8010d7e:	4413      	add	r3, r2
 8010d80:	009b      	lsls	r3, r3, #2
 8010d82:	4403      	add	r3, r0
 8010d84:	6019      	str	r1, [r3, #0]
 8010d86:	e01b      	b.n	8010dc0 <xTaskRemoveFromEventList+0x178>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010d88:	4b1b      	ldr	r3, [pc, #108]	@ (8010df8 <xTaskRemoveFromEventList+0x1b0>)
 8010d8a:	685b      	ldr	r3, [r3, #4]
 8010d8c:	61bb      	str	r3, [r7, #24]
 8010d8e:	6a3b      	ldr	r3, [r7, #32]
 8010d90:	69ba      	ldr	r2, [r7, #24]
 8010d92:	61da      	str	r2, [r3, #28]
 8010d94:	69bb      	ldr	r3, [r7, #24]
 8010d96:	689a      	ldr	r2, [r3, #8]
 8010d98:	6a3b      	ldr	r3, [r7, #32]
 8010d9a:	621a      	str	r2, [r3, #32]
 8010d9c:	69bb      	ldr	r3, [r7, #24]
 8010d9e:	689b      	ldr	r3, [r3, #8]
 8010da0:	6a3a      	ldr	r2, [r7, #32]
 8010da2:	3218      	adds	r2, #24
 8010da4:	605a      	str	r2, [r3, #4]
 8010da6:	6a3b      	ldr	r3, [r7, #32]
 8010da8:	f103 0218 	add.w	r2, r3, #24
 8010dac:	69bb      	ldr	r3, [r7, #24]
 8010dae:	609a      	str	r2, [r3, #8]
 8010db0:	6a3b      	ldr	r3, [r7, #32]
 8010db2:	4a11      	ldr	r2, [pc, #68]	@ (8010df8 <xTaskRemoveFromEventList+0x1b0>)
 8010db4:	629a      	str	r2, [r3, #40]	@ 0x28
 8010db6:	4b10      	ldr	r3, [pc, #64]	@ (8010df8 <xTaskRemoveFromEventList+0x1b0>)
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	3301      	adds	r3, #1
 8010dbc:	4a0e      	ldr	r2, [pc, #56]	@ (8010df8 <xTaskRemoveFromEventList+0x1b0>)
 8010dbe:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010dc0:	6a3b      	ldr	r3, [r7, #32]
 8010dc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8010dfc <xTaskRemoveFromEventList+0x1b4>)
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dca:	429a      	cmp	r2, r3
 8010dcc:	d905      	bls.n	8010dda <xTaskRemoveFromEventList+0x192>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8010dce:	2301      	movs	r3, #1
 8010dd0:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8010dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8010e00 <xTaskRemoveFromEventList+0x1b8>)
 8010dd4:	2201      	movs	r2, #1
 8010dd6:	601a      	str	r2, [r3, #0]
 8010dd8:	e001      	b.n	8010dde <xTaskRemoveFromEventList+0x196>
        }
        else
        {
            xReturn = pdFALSE;
 8010dda:	2300      	movs	r3, #0
 8010ddc:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8010dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010de0:	4618      	mov	r0, r3
 8010de2:	3728      	adds	r7, #40	@ 0x28
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}
 8010de8:	08018b64 	.word	0x08018b64
 8010dec:	20000620 	.word	0x20000620
 8010df0:	20000600 	.word	0x20000600
 8010df4:	200004fc 	.word	0x200004fc
 8010df8:	200005b8 	.word	0x200005b8
 8010dfc:	200004f8 	.word	0x200004f8
 8010e00:	2000060c 	.word	0x2000060c

08010e04 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010e04:	b480      	push	{r7}
 8010e06:	b083      	sub	sp, #12
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010e0c:	4b06      	ldr	r3, [pc, #24]	@ (8010e28 <vTaskInternalSetTimeOutState+0x24>)
 8010e0e:	681a      	ldr	r2, [r3, #0]
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8010e14:	4b05      	ldr	r3, [pc, #20]	@ (8010e2c <vTaskInternalSetTimeOutState+0x28>)
 8010e16:	681a      	ldr	r2, [r3, #0]
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8010e1c:	bf00      	nop
 8010e1e:	370c      	adds	r7, #12
 8010e20:	46bd      	mov	sp, r7
 8010e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e26:	4770      	bx	lr
 8010e28:	20000610 	.word	0x20000610
 8010e2c:	200005fc 	.word	0x200005fc

08010e30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b088      	sub	sp, #32
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
 8010e38:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d110      	bne.n	8010e62 <xTaskCheckForTimeOut+0x32>
    __asm volatile
 8010e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e44:	b672      	cpsid	i
 8010e46:	f383 8811 	msr	BASEPRI, r3
 8010e4a:	f3bf 8f6f 	isb	sy
 8010e4e:	f3bf 8f4f 	dsb	sy
 8010e52:	b662      	cpsie	i
 8010e54:	613b      	str	r3, [r7, #16]
}
 8010e56:	bf00      	nop
 8010e58:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 8010e5c:	482b      	ldr	r0, [pc, #172]	@ (8010f0c <xTaskCheckForTimeOut+0xdc>)
 8010e5e:	f7f5 fd33 	bl	80068c8 <vAssertCalled>
    configASSERT( pxTicksToWait );
 8010e62:	683b      	ldr	r3, [r7, #0]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d110      	bne.n	8010e8a <xTaskCheckForTimeOut+0x5a>
    __asm volatile
 8010e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e6c:	b672      	cpsid	i
 8010e6e:	f383 8811 	msr	BASEPRI, r3
 8010e72:	f3bf 8f6f 	isb	sy
 8010e76:	f3bf 8f4f 	dsb	sy
 8010e7a:	b662      	cpsie	i
 8010e7c:	60fb      	str	r3, [r7, #12]
}
 8010e7e:	bf00      	nop
 8010e80:	f241 51a6 	movw	r1, #5542	@ 0x15a6
 8010e84:	4821      	ldr	r0, [pc, #132]	@ (8010f0c <xTaskCheckForTimeOut+0xdc>)
 8010e86:	f7f5 fd1f 	bl	80068c8 <vAssertCalled>

    taskENTER_CRITICAL();
 8010e8a:	f001 f8d1 	bl	8012030 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8010e8e:	4b20      	ldr	r3, [pc, #128]	@ (8010f10 <xTaskCheckForTimeOut+0xe0>)
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	685b      	ldr	r3, [r3, #4]
 8010e98:	69ba      	ldr	r2, [r7, #24]
 8010e9a:	1ad3      	subs	r3, r2, r3
 8010e9c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8010e9e:	683b      	ldr	r3, [r7, #0]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ea6:	d102      	bne.n	8010eae <xTaskCheckForTimeOut+0x7e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	61fb      	str	r3, [r7, #28]
 8010eac:	e026      	b.n	8010efc <xTaskCheckForTimeOut+0xcc>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	681a      	ldr	r2, [r3, #0]
 8010eb2:	4b18      	ldr	r3, [pc, #96]	@ (8010f14 <xTaskCheckForTimeOut+0xe4>)
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	429a      	cmp	r2, r3
 8010eb8:	d00a      	beq.n	8010ed0 <xTaskCheckForTimeOut+0xa0>
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	685b      	ldr	r3, [r3, #4]
 8010ebe:	69ba      	ldr	r2, [r7, #24]
 8010ec0:	429a      	cmp	r2, r3
 8010ec2:	d305      	bcc.n	8010ed0 <xTaskCheckForTimeOut+0xa0>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8010ec4:	2301      	movs	r3, #1
 8010ec6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8010ec8:	683b      	ldr	r3, [r7, #0]
 8010eca:	2200      	movs	r2, #0
 8010ecc:	601a      	str	r2, [r3, #0]
 8010ece:	e015      	b.n	8010efc <xTaskCheckForTimeOut+0xcc>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	697a      	ldr	r2, [r7, #20]
 8010ed6:	429a      	cmp	r2, r3
 8010ed8:	d20b      	bcs.n	8010ef2 <xTaskCheckForTimeOut+0xc2>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8010eda:	683b      	ldr	r3, [r7, #0]
 8010edc:	681a      	ldr	r2, [r3, #0]
 8010ede:	697b      	ldr	r3, [r7, #20]
 8010ee0:	1ad2      	subs	r2, r2, r3
 8010ee2:	683b      	ldr	r3, [r7, #0]
 8010ee4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8010ee6:	6878      	ldr	r0, [r7, #4]
 8010ee8:	f7ff ff8c 	bl	8010e04 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8010eec:	2300      	movs	r3, #0
 8010eee:	61fb      	str	r3, [r7, #28]
 8010ef0:	e004      	b.n	8010efc <xTaskCheckForTimeOut+0xcc>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8010ef2:	683b      	ldr	r3, [r7, #0]
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8010ef8:	2301      	movs	r3, #1
 8010efa:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8010efc:	f001 f8d0 	bl	80120a0 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8010f00:	69fb      	ldr	r3, [r7, #28]
}
 8010f02:	4618      	mov	r0, r3
 8010f04:	3720      	adds	r7, #32
 8010f06:	46bd      	mov	sp, r7
 8010f08:	bd80      	pop	{r7, pc}
 8010f0a:	bf00      	nop
 8010f0c:	08018b64 	.word	0x08018b64
 8010f10:	200005fc 	.word	0x200005fc
 8010f14:	20000610 	.word	0x20000610

08010f18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010f18:	b480      	push	{r7}
 8010f1a:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8010f1c:	4b03      	ldr	r3, [pc, #12]	@ (8010f2c <vTaskMissedYield+0x14>)
 8010f1e:	2201      	movs	r2, #1
 8010f20:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8010f22:	bf00      	nop
 8010f24:	46bd      	mov	sp, r7
 8010f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2a:	4770      	bx	lr
 8010f2c:	2000060c 	.word	0x2000060c

08010f30 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b082      	sub	sp, #8
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8010f38:	f000 f852 	bl	8010fe0 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8010f3c:	4b06      	ldr	r3, [pc, #24]	@ (8010f58 <prvIdleTask+0x28>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	2b01      	cmp	r3, #1
 8010f42:	d9f9      	bls.n	8010f38 <prvIdleTask+0x8>
            {
                taskYIELD();
 8010f44:	4b05      	ldr	r3, [pc, #20]	@ (8010f5c <prvIdleTask+0x2c>)
 8010f46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010f4a:	601a      	str	r2, [r3, #0]
 8010f4c:	f3bf 8f4f 	dsb	sy
 8010f50:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8010f54:	e7f0      	b.n	8010f38 <prvIdleTask+0x8>
 8010f56:	bf00      	nop
 8010f58:	200004fc 	.word	0x200004fc
 8010f5c:	e000ed04 	.word	0xe000ed04

08010f60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b082      	sub	sp, #8
 8010f64:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010f66:	2300      	movs	r3, #0
 8010f68:	607b      	str	r3, [r7, #4]
 8010f6a:	e00c      	b.n	8010f86 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010f6c:	687a      	ldr	r2, [r7, #4]
 8010f6e:	4613      	mov	r3, r2
 8010f70:	009b      	lsls	r3, r3, #2
 8010f72:	4413      	add	r3, r2
 8010f74:	009b      	lsls	r3, r3, #2
 8010f76:	4a12      	ldr	r2, [pc, #72]	@ (8010fc0 <prvInitialiseTaskLists+0x60>)
 8010f78:	4413      	add	r3, r2
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f7fd ff82 	bl	800ee84 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	3301      	adds	r3, #1
 8010f84:	607b      	str	r3, [r7, #4]
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	2b06      	cmp	r3, #6
 8010f8a:	d9ef      	bls.n	8010f6c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8010f8c:	480d      	ldr	r0, [pc, #52]	@ (8010fc4 <prvInitialiseTaskLists+0x64>)
 8010f8e:	f7fd ff79 	bl	800ee84 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8010f92:	480d      	ldr	r0, [pc, #52]	@ (8010fc8 <prvInitialiseTaskLists+0x68>)
 8010f94:	f7fd ff76 	bl	800ee84 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8010f98:	480c      	ldr	r0, [pc, #48]	@ (8010fcc <prvInitialiseTaskLists+0x6c>)
 8010f9a:	f7fd ff73 	bl	800ee84 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8010f9e:	480c      	ldr	r0, [pc, #48]	@ (8010fd0 <prvInitialiseTaskLists+0x70>)
 8010fa0:	f7fd ff70 	bl	800ee84 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8010fa4:	480b      	ldr	r0, [pc, #44]	@ (8010fd4 <prvInitialiseTaskLists+0x74>)
 8010fa6:	f7fd ff6d 	bl	800ee84 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8010faa:	4b0b      	ldr	r3, [pc, #44]	@ (8010fd8 <prvInitialiseTaskLists+0x78>)
 8010fac:	4a05      	ldr	r2, [pc, #20]	@ (8010fc4 <prvInitialiseTaskLists+0x64>)
 8010fae:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8010fdc <prvInitialiseTaskLists+0x7c>)
 8010fb2:	4a05      	ldr	r2, [pc, #20]	@ (8010fc8 <prvInitialiseTaskLists+0x68>)
 8010fb4:	601a      	str	r2, [r3, #0]
}
 8010fb6:	bf00      	nop
 8010fb8:	3708      	adds	r7, #8
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	bd80      	pop	{r7, pc}
 8010fbe:	bf00      	nop
 8010fc0:	200004fc 	.word	0x200004fc
 8010fc4:	20000588 	.word	0x20000588
 8010fc8:	2000059c 	.word	0x2000059c
 8010fcc:	200005b8 	.word	0x200005b8
 8010fd0:	200005cc 	.word	0x200005cc
 8010fd4:	200005e4 	.word	0x200005e4
 8010fd8:	200005b0 	.word	0x200005b0
 8010fdc:	200005b4 	.word	0x200005b4

08010fe0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b082      	sub	sp, #8
 8010fe4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010fe6:	e019      	b.n	801101c <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8010fe8:	f001 f822 	bl	8012030 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8010fec:	4b10      	ldr	r3, [pc, #64]	@ (8011030 <prvCheckTasksWaitingTermination+0x50>)
 8010fee:	68db      	ldr	r3, [r3, #12]
 8010ff0:	68db      	ldr	r3, [r3, #12]
 8010ff2:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	3304      	adds	r3, #4
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f7fd ffcd 	bl	800ef98 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8010ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8011034 <prvCheckTasksWaitingTermination+0x54>)
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	3b01      	subs	r3, #1
 8011004:	4a0b      	ldr	r2, [pc, #44]	@ (8011034 <prvCheckTasksWaitingTermination+0x54>)
 8011006:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8011008:	4b0b      	ldr	r3, [pc, #44]	@ (8011038 <prvCheckTasksWaitingTermination+0x58>)
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	3b01      	subs	r3, #1
 801100e:	4a0a      	ldr	r2, [pc, #40]	@ (8011038 <prvCheckTasksWaitingTermination+0x58>)
 8011010:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8011012:	f001 f845 	bl	80120a0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8011016:	6878      	ldr	r0, [r7, #4]
 8011018:	f000 f8f0 	bl	80111fc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801101c:	4b06      	ldr	r3, [pc, #24]	@ (8011038 <prvCheckTasksWaitingTermination+0x58>)
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d1e1      	bne.n	8010fe8 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8011024:	bf00      	nop
 8011026:	bf00      	nop
 8011028:	3708      	adds	r7, #8
 801102a:	46bd      	mov	sp, r7
 801102c:	bd80      	pop	{r7, pc}
 801102e:	bf00      	nop
 8011030:	200005cc 	.word	0x200005cc
 8011034:	200005f8 	.word	0x200005f8
 8011038:	200005e0 	.word	0x200005e0

0801103c <vTaskGetInfo>:

    void vTaskGetInfo( TaskHandle_t xTask,
                       TaskStatus_t * pxTaskStatus,
                       BaseType_t xGetFreeStackSpace,
                       eTaskState eState )
    {
 801103c:	b580      	push	{r7, lr}
 801103e:	b086      	sub	sp, #24
 8011040:	af00      	add	r7, sp, #0
 8011042:	60f8      	str	r0, [r7, #12]
 8011044:	60b9      	str	r1, [r7, #8]
 8011046:	607a      	str	r2, [r7, #4]
 8011048:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;

        traceENTER_vTaskGetInfo( xTask, pxTaskStatus, xGetFreeStackSpace, eState );

        /* xTask is NULL then get the state of the calling task. */
        pxTCB = prvGetTCBFromHandle( xTask );
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d102      	bne.n	8011056 <vTaskGetInfo+0x1a>
 8011050:	4b41      	ldr	r3, [pc, #260]	@ (8011158 <vTaskGetInfo+0x11c>)
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	e000      	b.n	8011058 <vTaskGetInfo+0x1c>
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	613b      	str	r3, [r7, #16]

        pxTaskStatus->xHandle = pxTCB;
 801105a:	68bb      	ldr	r3, [r7, #8]
 801105c:	693a      	ldr	r2, [r7, #16]
 801105e:	601a      	str	r2, [r3, #0]
        pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 8011060:	693b      	ldr	r3, [r7, #16]
 8011062:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011066:	68bb      	ldr	r3, [r7, #8]
 8011068:	605a      	str	r2, [r3, #4]
        pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 801106a:	693b      	ldr	r3, [r7, #16]
 801106c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801106e:	68bb      	ldr	r3, [r7, #8]
 8011070:	611a      	str	r2, [r3, #16]
        pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8011072:	693b      	ldr	r3, [r7, #16]
 8011074:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011076:	68bb      	ldr	r3, [r7, #8]
 8011078:	61da      	str	r2, [r3, #28]
        #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
            pxTaskStatus->pxTopOfStack = ( StackType_t * ) pxTCB->pxTopOfStack;
 801107a:	693b      	ldr	r3, [r7, #16]
 801107c:	681a      	ldr	r2, [r3, #0]
 801107e:	68bb      	ldr	r3, [r7, #8]
 8011080:	621a      	str	r2, [r3, #32]
            pxTaskStatus->pxEndOfStack = pxTCB->pxEndOfStack;
 8011082:	693b      	ldr	r3, [r7, #16]
 8011084:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011086:	68bb      	ldr	r3, [r7, #8]
 8011088:	625a      	str	r2, [r3, #36]	@ 0x24
        #endif
        pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 801108a:	693b      	ldr	r3, [r7, #16]
 801108c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801108e:	68bb      	ldr	r3, [r7, #8]
 8011090:	609a      	str	r2, [r3, #8]
        }
        #endif

        #if ( configUSE_MUTEXES == 1 )
        {
            pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8011092:	693b      	ldr	r3, [r7, #16]
 8011094:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011096:	68bb      	ldr	r3, [r7, #8]
 8011098:	615a      	str	r2, [r3, #20]
        }
        #endif

        #if ( configGENERATE_RUN_TIME_STATS == 1 )
        {
            pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 801109a:	693b      	ldr	r3, [r7, #16]
 801109c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801109e:	68bb      	ldr	r3, [r7, #8]
 80110a0:	619a      	str	r2, [r3, #24]
        #endif

        /* Obtaining the task state is a little fiddly, so is only done if the
         * value of eState passed into this function is eInvalid - otherwise the
         * state is just set to whatever is passed in. */
        if( eState != eInvalid )
 80110a2:	78fb      	ldrb	r3, [r7, #3]
 80110a4:	2b05      	cmp	r3, #5
 80110a6:	d03c      	beq.n	8011122 <vTaskGetInfo+0xe6>
        {
            if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
 80110a8:	4b2b      	ldr	r3, [pc, #172]	@ (8011158 <vTaskGetInfo+0x11c>)
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	693a      	ldr	r2, [r7, #16]
 80110ae:	429a      	cmp	r2, r3
 80110b0:	d103      	bne.n	80110ba <vTaskGetInfo+0x7e>
            {
                pxTaskStatus->eCurrentState = eRunning;
 80110b2:	68bb      	ldr	r3, [r7, #8]
 80110b4:	2200      	movs	r2, #0
 80110b6:	731a      	strb	r2, [r3, #12]
 80110b8:	e03a      	b.n	8011130 <vTaskGetInfo+0xf4>
            }
            else
            {
                pxTaskStatus->eCurrentState = eState;
 80110ba:	68bb      	ldr	r3, [r7, #8]
 80110bc:	78fa      	ldrb	r2, [r7, #3]
 80110be:	731a      	strb	r2, [r3, #12]
                #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    /* If the task is in the suspended list then there is a
                     *  chance it is actually just blocked indefinitely - so really
                     *  it should be reported as being in the Blocked state. */
                    if( eState == eSuspended )
 80110c0:	78fb      	ldrb	r3, [r7, #3]
 80110c2:	2b03      	cmp	r3, #3
 80110c4:	d120      	bne.n	8011108 <vTaskGetInfo+0xcc>
                    {
                        vTaskSuspendAll();
 80110c6:	f7ff f9b7 	bl	8010438 <vTaskSuspendAll>
                        {
                            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80110ca:	693b      	ldr	r3, [r7, #16]
 80110cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d003      	beq.n	80110da <vTaskGetInfo+0x9e>
                            {
                                pxTaskStatus->eCurrentState = eBlocked;
 80110d2:	68bb      	ldr	r3, [r7, #8]
 80110d4:	2202      	movs	r2, #2
 80110d6:	731a      	strb	r2, [r3, #12]
 80110d8:	e014      	b.n	8011104 <vTaskGetInfo+0xc8>
                                    /* The task does not appear on the event list item of
                                     * and of the RTOS objects, but could still be in the
                                     * blocked state if it is waiting on its notification
                                     * rather than waiting on an object.  If not, is
                                     * suspended. */
                                    for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80110da:	2300      	movs	r3, #0
 80110dc:	617b      	str	r3, [r7, #20]
 80110de:	e00e      	b.n	80110fe <vTaskGetInfo+0xc2>
                                    {
                                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 80110e0:	693a      	ldr	r2, [r7, #16]
 80110e2:	697b      	ldr	r3, [r7, #20]
 80110e4:	4413      	add	r3, r2
 80110e6:	33ac      	adds	r3, #172	@ 0xac
 80110e8:	781b      	ldrb	r3, [r3, #0]
 80110ea:	b2db      	uxtb	r3, r3
 80110ec:	2b01      	cmp	r3, #1
 80110ee:	d103      	bne.n	80110f8 <vTaskGetInfo+0xbc>
                                        {
                                            pxTaskStatus->eCurrentState = eBlocked;
 80110f0:	68bb      	ldr	r3, [r7, #8]
 80110f2:	2202      	movs	r2, #2
 80110f4:	731a      	strb	r2, [r3, #12]
                                            break;
 80110f6:	e005      	b.n	8011104 <vTaskGetInfo+0xc8>
                                    for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80110f8:	697b      	ldr	r3, [r7, #20]
 80110fa:	3301      	adds	r3, #1
 80110fc:	617b      	str	r3, [r7, #20]
 80110fe:	697b      	ldr	r3, [r7, #20]
 8011100:	2b00      	cmp	r3, #0
 8011102:	dded      	ble.n	80110e0 <vTaskGetInfo+0xa4>
                                    }
                                }
                                #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
                            }
                        }
                        ( void ) xTaskResumeAll();
 8011104:	f7ff f9a6 	bl	8010454 <xTaskResumeAll>
                #endif /* INCLUDE_vTaskSuspend */

                /* Tasks can be in pending ready list and other state list at the
                 * same time. These tasks are in ready state no matter what state
                 * list the task is in. */
                taskENTER_CRITICAL();
 8011108:	f000 ff92 	bl	8012030 <vPortEnterCritical>
                {
                    if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdFALSE )
 801110c:	693b      	ldr	r3, [r7, #16]
 801110e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011110:	4a12      	ldr	r2, [pc, #72]	@ (801115c <vTaskGetInfo+0x120>)
 8011112:	4293      	cmp	r3, r2
 8011114:	d102      	bne.n	801111c <vTaskGetInfo+0xe0>
                    {
                        pxTaskStatus->eCurrentState = eReady;
 8011116:	68bb      	ldr	r3, [r7, #8]
 8011118:	2201      	movs	r2, #1
 801111a:	731a      	strb	r2, [r3, #12]
                    }
                }
                taskEXIT_CRITICAL();
 801111c:	f000 ffc0 	bl	80120a0 <vPortExitCritical>
 8011120:	e006      	b.n	8011130 <vTaskGetInfo+0xf4>
            }
        }
        else
        {
            pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8011122:	6938      	ldr	r0, [r7, #16]
 8011124:	f7ff f858 	bl	80101d8 <eTaskGetState>
 8011128:	4603      	mov	r3, r0
 801112a:	461a      	mov	r2, r3
 801112c:	68bb      	ldr	r3, [r7, #8]
 801112e:	731a      	strb	r2, [r3, #12]
        }

        /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
         * parameter is provided to allow it to be skipped. */
        if( xGetFreeStackSpace != pdFALSE )
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d008      	beq.n	8011148 <vTaskGetInfo+0x10c>
            {
                pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
            }
            #else
            {
                pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8011136:	693b      	ldr	r3, [r7, #16]
 8011138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801113a:	4618      	mov	r0, r3
 801113c:	f000 f843 	bl	80111c6 <prvTaskCheckFreeStackSpace>
 8011140:	4602      	mov	r2, r0
 8011142:	68bb      	ldr	r3, [r7, #8]
 8011144:	629a      	str	r2, [r3, #40]	@ 0x28
        {
            pxTaskStatus->usStackHighWaterMark = 0;
        }

        traceRETURN_vTaskGetInfo();
    }
 8011146:	e002      	b.n	801114e <vTaskGetInfo+0x112>
            pxTaskStatus->usStackHighWaterMark = 0;
 8011148:	68bb      	ldr	r3, [r7, #8]
 801114a:	2200      	movs	r2, #0
 801114c:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 801114e:	bf00      	nop
 8011150:	3718      	adds	r7, #24
 8011152:	46bd      	mov	sp, r7
 8011154:	bd80      	pop	{r7, pc}
 8011156:	bf00      	nop
 8011158:	200004f8 	.word	0x200004f8
 801115c:	200005b8 	.word	0x200005b8

08011160 <prvListTasksWithinSingleList>:
#if ( configUSE_TRACE_FACILITY == 1 )

    static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
                                                     List_t * pxList,
                                                     eTaskState eState )
    {
 8011160:	b580      	push	{r7, lr}
 8011162:	b088      	sub	sp, #32
 8011164:	af00      	add	r7, sp, #0
 8011166:	60f8      	str	r0, [r7, #12]
 8011168:	60b9      	str	r1, [r7, #8]
 801116a:	4613      	mov	r3, r2
 801116c:	71fb      	strb	r3, [r7, #7]
        UBaseType_t uxTask = 0;
 801116e:	2300      	movs	r3, #0
 8011170:	61fb      	str	r3, [r7, #28]
        const ListItem_t * pxEndMarker = listGET_END_MARKER( pxList );
 8011172:	68bb      	ldr	r3, [r7, #8]
 8011174:	3308      	adds	r3, #8
 8011176:	617b      	str	r3, [r7, #20]
        ListItem_t * pxIterator;
        TCB_t * pxTCB = NULL;
 8011178:	2300      	movs	r3, #0
 801117a:	613b      	str	r3, [r7, #16]

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 801117c:	68bb      	ldr	r3, [r7, #8]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d01b      	beq.n	80111bc <prvListTasksWithinSingleList+0x5c>
        {
            /* Populate an TaskStatus_t structure within the
             * pxTaskStatusArray array for each task that is referenced from
             * pxList.  See the definition of TaskStatus_t in task.h for the
             * meaning of each TaskStatus_t structure member. */
            for( pxIterator = listGET_HEAD_ENTRY( pxList ); pxIterator != pxEndMarker; pxIterator = listGET_NEXT( pxIterator ) )
 8011184:	68bb      	ldr	r3, [r7, #8]
 8011186:	68db      	ldr	r3, [r3, #12]
 8011188:	61bb      	str	r3, [r7, #24]
 801118a:	e013      	b.n	80111b4 <prvListTasksWithinSingleList+0x54>
            {
                /* MISRA Ref 11.5.3 [Void pointer assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxTCB = listGET_LIST_ITEM_OWNER( pxIterator );
 801118c:	69bb      	ldr	r3, [r7, #24]
 801118e:	68db      	ldr	r3, [r3, #12]
 8011190:	613b      	str	r3, [r7, #16]

                vTaskGetInfo( ( TaskHandle_t ) pxTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8011192:	69fb      	ldr	r3, [r7, #28]
 8011194:	222c      	movs	r2, #44	@ 0x2c
 8011196:	fb02 f303 	mul.w	r3, r2, r3
 801119a:	68fa      	ldr	r2, [r7, #12]
 801119c:	18d1      	adds	r1, r2, r3
 801119e:	79fb      	ldrb	r3, [r7, #7]
 80111a0:	2201      	movs	r2, #1
 80111a2:	6938      	ldr	r0, [r7, #16]
 80111a4:	f7ff ff4a 	bl	801103c <vTaskGetInfo>
                uxTask++;
 80111a8:	69fb      	ldr	r3, [r7, #28]
 80111aa:	3301      	adds	r3, #1
 80111ac:	61fb      	str	r3, [r7, #28]
            for( pxIterator = listGET_HEAD_ENTRY( pxList ); pxIterator != pxEndMarker; pxIterator = listGET_NEXT( pxIterator ) )
 80111ae:	69bb      	ldr	r3, [r7, #24]
 80111b0:	685b      	ldr	r3, [r3, #4]
 80111b2:	61bb      	str	r3, [r7, #24]
 80111b4:	69ba      	ldr	r2, [r7, #24]
 80111b6:	697b      	ldr	r3, [r7, #20]
 80111b8:	429a      	cmp	r2, r3
 80111ba:	d1e7      	bne.n	801118c <prvListTasksWithinSingleList+0x2c>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return uxTask;
 80111bc:	69fb      	ldr	r3, [r7, #28]
    }
 80111be:	4618      	mov	r0, r3
 80111c0:	3720      	adds	r7, #32
 80111c2:	46bd      	mov	sp, r7
 80111c4:	bd80      	pop	{r7, pc}

080111c6 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 80111c6:	b480      	push	{r7}
 80111c8:	b085      	sub	sp, #20
 80111ca:	af00      	add	r7, sp, #0
 80111cc:	6078      	str	r0, [r7, #4]
        configSTACK_DEPTH_TYPE uxCount = 0U;
 80111ce:	2300      	movs	r3, #0
 80111d0:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80111d2:	e005      	b.n	80111e0 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	3301      	adds	r3, #1
 80111d8:	607b      	str	r3, [r7, #4]
            uxCount++;
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	3301      	adds	r3, #1
 80111de:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	781b      	ldrb	r3, [r3, #0]
 80111e4:	2ba5      	cmp	r3, #165	@ 0xa5
 80111e6:	d0f5      	beq.n	80111d4 <prvTaskCheckFreeStackSpace+0xe>
        }

        uxCount /= ( configSTACK_DEPTH_TYPE ) sizeof( StackType_t );
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	089b      	lsrs	r3, r3, #2
 80111ec:	60fb      	str	r3, [r7, #12]

        return uxCount;
 80111ee:	68fb      	ldr	r3, [r7, #12]
    }
 80111f0:	4618      	mov	r0, r3
 80111f2:	3714      	adds	r7, #20
 80111f4:	46bd      	mov	sp, r7
 80111f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fa:	4770      	bx	lr

080111fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b082      	sub	sp, #8
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
        portCLEAN_UP_TCB( pxTCB );

        #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxTCB->xTLSBlock );
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	335c      	adds	r3, #92	@ 0x5c
 8011208:	4618      	mov	r0, r3
 801120a:	f003 fc2d 	bl	8014a68 <_reclaim_reent>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011212:	4618      	mov	r0, r3
 8011214:	f7f5 fece 	bl	8006fb4 <vPortFree>
            vPortFree( pxTCB );
 8011218:	6878      	ldr	r0, [r7, #4]
 801121a:	f7f5 fecb 	bl	8006fb4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 801121e:	bf00      	nop
 8011220:	3708      	adds	r7, #8
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}
	...

08011228 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011228:	b480      	push	{r7}
 801122a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801122c:	4b0a      	ldr	r3, [pc, #40]	@ (8011258 <prvResetNextTaskUnblockTime+0x30>)
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d104      	bne.n	8011240 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8011236:	4b09      	ldr	r3, [pc, #36]	@ (801125c <prvResetNextTaskUnblockTime+0x34>)
 8011238:	f04f 32ff 	mov.w	r2, #4294967295
 801123c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 801123e:	e005      	b.n	801124c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8011240:	4b05      	ldr	r3, [pc, #20]	@ (8011258 <prvResetNextTaskUnblockTime+0x30>)
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	68db      	ldr	r3, [r3, #12]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	4a04      	ldr	r2, [pc, #16]	@ (801125c <prvResetNextTaskUnblockTime+0x34>)
 801124a:	6013      	str	r3, [r2, #0]
}
 801124c:	bf00      	nop
 801124e:	46bd      	mov	sp, r7
 8011250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011254:	4770      	bx	lr
 8011256:	bf00      	nop
 8011258:	200005b0 	.word	0x200005b0
 801125c:	20000618 	.word	0x20000618

08011260 <xTaskGetCurrentTaskHandle>:

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) || ( configNUMBER_OF_CORES > 1 )

    #if ( configNUMBER_OF_CORES == 1 )
        TaskHandle_t xTaskGetCurrentTaskHandle( void )
        {
 8011260:	b480      	push	{r7}
 8011262:	b083      	sub	sp, #12
 8011264:	af00      	add	r7, sp, #0
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
 8011266:	4b05      	ldr	r3, [pc, #20]	@ (801127c <xTaskGetCurrentTaskHandle+0x1c>)
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	607b      	str	r3, [r7, #4]

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
 801126c:	687b      	ldr	r3, [r7, #4]
        }
 801126e:	4618      	mov	r0, r3
 8011270:	370c      	adds	r7, #12
 8011272:	46bd      	mov	sp, r7
 8011274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011278:	4770      	bx	lr
 801127a:	bf00      	nop
 801127c:	200004f8 	.word	0x200004f8

08011280 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8011280:	b480      	push	{r7}
 8011282:	b083      	sub	sp, #12
 8011284:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8011286:	4b0b      	ldr	r3, [pc, #44]	@ (80112b4 <xTaskGetSchedulerState+0x34>)
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d102      	bne.n	8011294 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 801128e:	2301      	movs	r3, #1
 8011290:	607b      	str	r3, [r7, #4]
 8011292:	e008      	b.n	80112a6 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8011294:	4b08      	ldr	r3, [pc, #32]	@ (80112b8 <xTaskGetSchedulerState+0x38>)
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d102      	bne.n	80112a2 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 801129c:	2302      	movs	r3, #2
 801129e:	607b      	str	r3, [r7, #4]
 80112a0:	e001      	b.n	80112a6 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 80112a2:	2300      	movs	r3, #0
 80112a4:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 80112a6:	687b      	ldr	r3, [r7, #4]
    }
 80112a8:	4618      	mov	r0, r3
 80112aa:	370c      	adds	r7, #12
 80112ac:	46bd      	mov	sp, r7
 80112ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b2:	4770      	bx	lr
 80112b4:	20000604 	.word	0x20000604
 80112b8:	20000620 	.word	0x20000620

080112bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80112bc:	b580      	push	{r7, lr}
 80112be:	b086      	sub	sp, #24
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80112c8:	2300      	movs	r3, #0
 80112ca:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	f000 8089 	beq.w	80113e6 <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80112d4:	693b      	ldr	r3, [r7, #16]
 80112d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80112d8:	4b45      	ldr	r3, [pc, #276]	@ (80113f0 <xTaskPriorityInherit+0x134>)
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112de:	429a      	cmp	r2, r3
 80112e0:	d278      	bcs.n	80113d4 <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 80112e2:	693b      	ldr	r3, [r7, #16]
 80112e4:	699b      	ldr	r3, [r3, #24]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	db06      	blt.n	80112f8 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 80112ea:	4b41      	ldr	r3, [pc, #260]	@ (80113f0 <xTaskPriorityInherit+0x134>)
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112f0:	f1c3 0207 	rsb	r2, r3, #7
 80112f4:	693b      	ldr	r3, [r7, #16]
 80112f6:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80112f8:	693b      	ldr	r3, [r7, #16]
 80112fa:	6959      	ldr	r1, [r3, #20]
 80112fc:	693b      	ldr	r3, [r7, #16]
 80112fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011300:	4613      	mov	r3, r2
 8011302:	009b      	lsls	r3, r3, #2
 8011304:	4413      	add	r3, r2
 8011306:	009b      	lsls	r3, r3, #2
 8011308:	4a3a      	ldr	r2, [pc, #232]	@ (80113f4 <xTaskPriorityInherit+0x138>)
 801130a:	4413      	add	r3, r2
 801130c:	4299      	cmp	r1, r3
 801130e:	d159      	bne.n	80113c4 <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011310:	693b      	ldr	r3, [r7, #16]
 8011312:	3304      	adds	r3, #4
 8011314:	4618      	mov	r0, r3
 8011316:	f7fd fe3f 	bl	800ef98 <uxListRemove>
 801131a:	4603      	mov	r3, r0
 801131c:	2b00      	cmp	r3, #0
 801131e:	d10a      	bne.n	8011336 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8011320:	693b      	ldr	r3, [r7, #16]
 8011322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011324:	2201      	movs	r2, #1
 8011326:	fa02 f303 	lsl.w	r3, r2, r3
 801132a:	43da      	mvns	r2, r3
 801132c:	4b32      	ldr	r3, [pc, #200]	@ (80113f8 <xTaskPriorityInherit+0x13c>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	4013      	ands	r3, r2
 8011332:	4a31      	ldr	r2, [pc, #196]	@ (80113f8 <xTaskPriorityInherit+0x13c>)
 8011334:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011336:	4b2e      	ldr	r3, [pc, #184]	@ (80113f0 <xTaskPriorityInherit+0x134>)
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801133c:	693b      	ldr	r3, [r7, #16]
 801133e:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8011340:	693b      	ldr	r3, [r7, #16]
 8011342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011344:	2201      	movs	r2, #1
 8011346:	409a      	lsls	r2, r3
 8011348:	4b2b      	ldr	r3, [pc, #172]	@ (80113f8 <xTaskPriorityInherit+0x13c>)
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	4313      	orrs	r3, r2
 801134e:	4a2a      	ldr	r2, [pc, #168]	@ (80113f8 <xTaskPriorityInherit+0x13c>)
 8011350:	6013      	str	r3, [r2, #0]
 8011352:	693b      	ldr	r3, [r7, #16]
 8011354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011356:	4927      	ldr	r1, [pc, #156]	@ (80113f4 <xTaskPriorityInherit+0x138>)
 8011358:	4613      	mov	r3, r2
 801135a:	009b      	lsls	r3, r3, #2
 801135c:	4413      	add	r3, r2
 801135e:	009b      	lsls	r3, r3, #2
 8011360:	440b      	add	r3, r1
 8011362:	3304      	adds	r3, #4
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	60fb      	str	r3, [r7, #12]
 8011368:	693b      	ldr	r3, [r7, #16]
 801136a:	68fa      	ldr	r2, [r7, #12]
 801136c:	609a      	str	r2, [r3, #8]
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	689a      	ldr	r2, [r3, #8]
 8011372:	693b      	ldr	r3, [r7, #16]
 8011374:	60da      	str	r2, [r3, #12]
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	689b      	ldr	r3, [r3, #8]
 801137a:	693a      	ldr	r2, [r7, #16]
 801137c:	3204      	adds	r2, #4
 801137e:	605a      	str	r2, [r3, #4]
 8011380:	693b      	ldr	r3, [r7, #16]
 8011382:	1d1a      	adds	r2, r3, #4
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	609a      	str	r2, [r3, #8]
 8011388:	693b      	ldr	r3, [r7, #16]
 801138a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801138c:	4613      	mov	r3, r2
 801138e:	009b      	lsls	r3, r3, #2
 8011390:	4413      	add	r3, r2
 8011392:	009b      	lsls	r3, r3, #2
 8011394:	4a17      	ldr	r2, [pc, #92]	@ (80113f4 <xTaskPriorityInherit+0x138>)
 8011396:	441a      	add	r2, r3
 8011398:	693b      	ldr	r3, [r7, #16]
 801139a:	615a      	str	r2, [r3, #20]
 801139c:	693b      	ldr	r3, [r7, #16]
 801139e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80113a0:	4914      	ldr	r1, [pc, #80]	@ (80113f4 <xTaskPriorityInherit+0x138>)
 80113a2:	4613      	mov	r3, r2
 80113a4:	009b      	lsls	r3, r3, #2
 80113a6:	4413      	add	r3, r2
 80113a8:	009b      	lsls	r3, r3, #2
 80113aa:	440b      	add	r3, r1
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	693a      	ldr	r2, [r7, #16]
 80113b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80113b2:	1c59      	adds	r1, r3, #1
 80113b4:	480f      	ldr	r0, [pc, #60]	@ (80113f4 <xTaskPriorityInherit+0x138>)
 80113b6:	4613      	mov	r3, r2
 80113b8:	009b      	lsls	r3, r3, #2
 80113ba:	4413      	add	r3, r2
 80113bc:	009b      	lsls	r3, r3, #2
 80113be:	4403      	add	r3, r0
 80113c0:	6019      	str	r1, [r3, #0]
 80113c2:	e004      	b.n	80113ce <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80113c4:	4b0a      	ldr	r3, [pc, #40]	@ (80113f0 <xTaskPriorityInherit+0x134>)
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80113ca:	693b      	ldr	r3, [r7, #16]
 80113cc:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80113ce:	2301      	movs	r3, #1
 80113d0:	617b      	str	r3, [r7, #20]
 80113d2:	e008      	b.n	80113e6 <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80113d4:	693b      	ldr	r3, [r7, #16]
 80113d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80113d8:	4b05      	ldr	r3, [pc, #20]	@ (80113f0 <xTaskPriorityInherit+0x134>)
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113de:	429a      	cmp	r2, r3
 80113e0:	d201      	bcs.n	80113e6 <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80113e2:	2301      	movs	r3, #1
 80113e4:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 80113e6:	697b      	ldr	r3, [r7, #20]
    }
 80113e8:	4618      	mov	r0, r3
 80113ea:	3718      	adds	r7, #24
 80113ec:	46bd      	mov	sp, r7
 80113ee:	bd80      	pop	{r7, pc}
 80113f0:	200004f8 	.word	0x200004f8
 80113f4:	200004fc 	.word	0x200004fc
 80113f8:	20000600 	.word	0x20000600

080113fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b088      	sub	sp, #32
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8011408:	2300      	movs	r3, #0
 801140a:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	2b00      	cmp	r3, #0
 8011410:	f000 809a 	beq.w	8011548 <xTaskPriorityDisinherit+0x14c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8011414:	4b4f      	ldr	r3, [pc, #316]	@ (8011554 <xTaskPriorityDisinherit+0x158>)
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	69ba      	ldr	r2, [r7, #24]
 801141a:	429a      	cmp	r2, r3
 801141c:	d010      	beq.n	8011440 <xTaskPriorityDisinherit+0x44>
    __asm volatile
 801141e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011422:	b672      	cpsid	i
 8011424:	f383 8811 	msr	BASEPRI, r3
 8011428:	f3bf 8f6f 	isb	sy
 801142c:	f3bf 8f4f 	dsb	sy
 8011430:	b662      	cpsie	i
 8011432:	613b      	str	r3, [r7, #16]
}
 8011434:	bf00      	nop
 8011436:	f641 2128 	movw	r1, #6696	@ 0x1a28
 801143a:	4847      	ldr	r0, [pc, #284]	@ (8011558 <xTaskPriorityDisinherit+0x15c>)
 801143c:	f7f5 fa44 	bl	80068c8 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 8011440:	69bb      	ldr	r3, [r7, #24]
 8011442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011444:	2b00      	cmp	r3, #0
 8011446:	d110      	bne.n	801146a <xTaskPriorityDisinherit+0x6e>
    __asm volatile
 8011448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801144c:	b672      	cpsid	i
 801144e:	f383 8811 	msr	BASEPRI, r3
 8011452:	f3bf 8f6f 	isb	sy
 8011456:	f3bf 8f4f 	dsb	sy
 801145a:	b662      	cpsie	i
 801145c:	60fb      	str	r3, [r7, #12]
}
 801145e:	bf00      	nop
 8011460:	f641 2129 	movw	r1, #6697	@ 0x1a29
 8011464:	483c      	ldr	r0, [pc, #240]	@ (8011558 <xTaskPriorityDisinherit+0x15c>)
 8011466:	f7f5 fa2f 	bl	80068c8 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 801146a:	69bb      	ldr	r3, [r7, #24]
 801146c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801146e:	1e5a      	subs	r2, r3, #1
 8011470:	69bb      	ldr	r3, [r7, #24]
 8011472:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011474:	69bb      	ldr	r3, [r7, #24]
 8011476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011478:	69bb      	ldr	r3, [r7, #24]
 801147a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801147c:	429a      	cmp	r2, r3
 801147e:	d063      	beq.n	8011548 <xTaskPriorityDisinherit+0x14c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011480:	69bb      	ldr	r3, [r7, #24]
 8011482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011484:	2b00      	cmp	r3, #0
 8011486:	d15f      	bne.n	8011548 <xTaskPriorityDisinherit+0x14c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011488:	69bb      	ldr	r3, [r7, #24]
 801148a:	3304      	adds	r3, #4
 801148c:	4618      	mov	r0, r3
 801148e:	f7fd fd83 	bl	800ef98 <uxListRemove>
 8011492:	4603      	mov	r3, r0
 8011494:	2b00      	cmp	r3, #0
 8011496:	d10a      	bne.n	80114ae <xTaskPriorityDisinherit+0xb2>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8011498:	69bb      	ldr	r3, [r7, #24]
 801149a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801149c:	2201      	movs	r2, #1
 801149e:	fa02 f303 	lsl.w	r3, r2, r3
 80114a2:	43da      	mvns	r2, r3
 80114a4:	4b2d      	ldr	r3, [pc, #180]	@ (801155c <xTaskPriorityDisinherit+0x160>)
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	4013      	ands	r3, r2
 80114aa:	4a2c      	ldr	r2, [pc, #176]	@ (801155c <xTaskPriorityDisinherit+0x160>)
 80114ac:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80114ae:	69bb      	ldr	r3, [r7, #24]
 80114b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80114b2:	69bb      	ldr	r3, [r7, #24]
 80114b4:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 80114b6:	69bb      	ldr	r3, [r7, #24]
 80114b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114ba:	f1c3 0207 	rsb	r2, r3, #7
 80114be:	69bb      	ldr	r3, [r7, #24]
 80114c0:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80114c2:	69bb      	ldr	r3, [r7, #24]
 80114c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114c6:	2201      	movs	r2, #1
 80114c8:	409a      	lsls	r2, r3
 80114ca:	4b24      	ldr	r3, [pc, #144]	@ (801155c <xTaskPriorityDisinherit+0x160>)
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	4313      	orrs	r3, r2
 80114d0:	4a22      	ldr	r2, [pc, #136]	@ (801155c <xTaskPriorityDisinherit+0x160>)
 80114d2:	6013      	str	r3, [r2, #0]
 80114d4:	69bb      	ldr	r3, [r7, #24]
 80114d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80114d8:	4921      	ldr	r1, [pc, #132]	@ (8011560 <xTaskPriorityDisinherit+0x164>)
 80114da:	4613      	mov	r3, r2
 80114dc:	009b      	lsls	r3, r3, #2
 80114de:	4413      	add	r3, r2
 80114e0:	009b      	lsls	r3, r3, #2
 80114e2:	440b      	add	r3, r1
 80114e4:	3304      	adds	r3, #4
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	617b      	str	r3, [r7, #20]
 80114ea:	69bb      	ldr	r3, [r7, #24]
 80114ec:	697a      	ldr	r2, [r7, #20]
 80114ee:	609a      	str	r2, [r3, #8]
 80114f0:	697b      	ldr	r3, [r7, #20]
 80114f2:	689a      	ldr	r2, [r3, #8]
 80114f4:	69bb      	ldr	r3, [r7, #24]
 80114f6:	60da      	str	r2, [r3, #12]
 80114f8:	697b      	ldr	r3, [r7, #20]
 80114fa:	689b      	ldr	r3, [r3, #8]
 80114fc:	69ba      	ldr	r2, [r7, #24]
 80114fe:	3204      	adds	r2, #4
 8011500:	605a      	str	r2, [r3, #4]
 8011502:	69bb      	ldr	r3, [r7, #24]
 8011504:	1d1a      	adds	r2, r3, #4
 8011506:	697b      	ldr	r3, [r7, #20]
 8011508:	609a      	str	r2, [r3, #8]
 801150a:	69bb      	ldr	r3, [r7, #24]
 801150c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801150e:	4613      	mov	r3, r2
 8011510:	009b      	lsls	r3, r3, #2
 8011512:	4413      	add	r3, r2
 8011514:	009b      	lsls	r3, r3, #2
 8011516:	4a12      	ldr	r2, [pc, #72]	@ (8011560 <xTaskPriorityDisinherit+0x164>)
 8011518:	441a      	add	r2, r3
 801151a:	69bb      	ldr	r3, [r7, #24]
 801151c:	615a      	str	r2, [r3, #20]
 801151e:	69bb      	ldr	r3, [r7, #24]
 8011520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011522:	490f      	ldr	r1, [pc, #60]	@ (8011560 <xTaskPriorityDisinherit+0x164>)
 8011524:	4613      	mov	r3, r2
 8011526:	009b      	lsls	r3, r3, #2
 8011528:	4413      	add	r3, r2
 801152a:	009b      	lsls	r3, r3, #2
 801152c:	440b      	add	r3, r1
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	69ba      	ldr	r2, [r7, #24]
 8011532:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8011534:	1c59      	adds	r1, r3, #1
 8011536:	480a      	ldr	r0, [pc, #40]	@ (8011560 <xTaskPriorityDisinherit+0x164>)
 8011538:	4613      	mov	r3, r2
 801153a:	009b      	lsls	r3, r3, #2
 801153c:	4413      	add	r3, r2
 801153e:	009b      	lsls	r3, r3, #2
 8011540:	4403      	add	r3, r0
 8011542:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8011544:	2301      	movs	r3, #1
 8011546:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8011548:	69fb      	ldr	r3, [r7, #28]
    }
 801154a:	4618      	mov	r0, r3
 801154c:	3720      	adds	r7, #32
 801154e:	46bd      	mov	sp, r7
 8011550:	bd80      	pop	{r7, pc}
 8011552:	bf00      	nop
 8011554:	200004f8 	.word	0x200004f8
 8011558:	08018b64 	.word	0x08018b64
 801155c:	20000600 	.word	0x20000600
 8011560:	200004fc 	.word	0x200004fc

08011564 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8011564:	b580      	push	{r7, lr}
 8011566:	b08a      	sub	sp, #40	@ 0x28
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
 801156c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011572:	2301      	movs	r3, #1
 8011574:	61fb      	str	r3, [r7, #28]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	2b00      	cmp	r3, #0
 801157a:	f000 80b0 	beq.w	80116de <vTaskPriorityDisinheritAfterTimeout+0x17a>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 801157e:	6a3b      	ldr	r3, [r7, #32]
 8011580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011582:	2b00      	cmp	r3, #0
 8011584:	d110      	bne.n	80115a8 <vTaskPriorityDisinheritAfterTimeout+0x44>
    __asm volatile
 8011586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801158a:	b672      	cpsid	i
 801158c:	f383 8811 	msr	BASEPRI, r3
 8011590:	f3bf 8f6f 	isb	sy
 8011594:	f3bf 8f4f 	dsb	sy
 8011598:	b662      	cpsie	i
 801159a:	613b      	str	r3, [r7, #16]
}
 801159c:	bf00      	nop
 801159e:	f641 2186 	movw	r1, #6790	@ 0x1a86
 80115a2:	4851      	ldr	r0, [pc, #324]	@ (80116e8 <vTaskPriorityDisinheritAfterTimeout+0x184>)
 80115a4:	f7f5 f990 	bl	80068c8 <vAssertCalled>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80115a8:	6a3b      	ldr	r3, [r7, #32]
 80115aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80115ac:	683a      	ldr	r2, [r7, #0]
 80115ae:	429a      	cmp	r2, r3
 80115b0:	d902      	bls.n	80115b8 <vTaskPriorityDisinheritAfterTimeout+0x54>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80115b2:	683b      	ldr	r3, [r7, #0]
 80115b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80115b6:	e002      	b.n	80115be <vTaskPriorityDisinheritAfterTimeout+0x5a>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80115b8:	6a3b      	ldr	r3, [r7, #32]
 80115ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80115bc:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80115be:	6a3b      	ldr	r3, [r7, #32]
 80115c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80115c4:	429a      	cmp	r2, r3
 80115c6:	f000 808a 	beq.w	80116de <vTaskPriorityDisinheritAfterTimeout+0x17a>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80115ca:	6a3b      	ldr	r3, [r7, #32]
 80115cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80115ce:	69fa      	ldr	r2, [r7, #28]
 80115d0:	429a      	cmp	r2, r3
 80115d2:	f040 8084 	bne.w	80116de <vTaskPriorityDisinheritAfterTimeout+0x17a>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80115d6:	4b45      	ldr	r3, [pc, #276]	@ (80116ec <vTaskPriorityDisinheritAfterTimeout+0x188>)
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	6a3a      	ldr	r2, [r7, #32]
 80115dc:	429a      	cmp	r2, r3
 80115de:	d110      	bne.n	8011602 <vTaskPriorityDisinheritAfterTimeout+0x9e>
    __asm volatile
 80115e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115e4:	b672      	cpsid	i
 80115e6:	f383 8811 	msr	BASEPRI, r3
 80115ea:	f3bf 8f6f 	isb	sy
 80115ee:	f3bf 8f4f 	dsb	sy
 80115f2:	b662      	cpsie	i
 80115f4:	60fb      	str	r3, [r7, #12]
}
 80115f6:	bf00      	nop
 80115f8:	f641 21a1 	movw	r1, #6817	@ 0x1aa1
 80115fc:	483a      	ldr	r0, [pc, #232]	@ (80116e8 <vTaskPriorityDisinheritAfterTimeout+0x184>)
 80115fe:	f7f5 f963 	bl	80068c8 <vAssertCalled>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011602:	6a3b      	ldr	r3, [r7, #32]
 8011604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011606:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8011608:	6a3b      	ldr	r3, [r7, #32]
 801160a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801160c:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 801160e:	6a3b      	ldr	r3, [r7, #32]
 8011610:	699b      	ldr	r3, [r3, #24]
 8011612:	2b00      	cmp	r3, #0
 8011614:	db04      	blt.n	8011620 <vTaskPriorityDisinheritAfterTimeout+0xbc>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 8011616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011618:	f1c3 0207 	rsb	r2, r3, #7
 801161c:	6a3b      	ldr	r3, [r7, #32]
 801161e:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011620:	6a3b      	ldr	r3, [r7, #32]
 8011622:	6959      	ldr	r1, [r3, #20]
 8011624:	69ba      	ldr	r2, [r7, #24]
 8011626:	4613      	mov	r3, r2
 8011628:	009b      	lsls	r3, r3, #2
 801162a:	4413      	add	r3, r2
 801162c:	009b      	lsls	r3, r3, #2
 801162e:	4a30      	ldr	r2, [pc, #192]	@ (80116f0 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 8011630:	4413      	add	r3, r2
 8011632:	4299      	cmp	r1, r3
 8011634:	d153      	bne.n	80116de <vTaskPriorityDisinheritAfterTimeout+0x17a>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011636:	6a3b      	ldr	r3, [r7, #32]
 8011638:	3304      	adds	r3, #4
 801163a:	4618      	mov	r0, r3
 801163c:	f7fd fcac 	bl	800ef98 <uxListRemove>
 8011640:	4603      	mov	r3, r0
 8011642:	2b00      	cmp	r3, #0
 8011644:	d10a      	bne.n	801165c <vTaskPriorityDisinheritAfterTimeout+0xf8>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8011646:	6a3b      	ldr	r3, [r7, #32]
 8011648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801164a:	2201      	movs	r2, #1
 801164c:	fa02 f303 	lsl.w	r3, r2, r3
 8011650:	43da      	mvns	r2, r3
 8011652:	4b28      	ldr	r3, [pc, #160]	@ (80116f4 <vTaskPriorityDisinheritAfterTimeout+0x190>)
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	4013      	ands	r3, r2
 8011658:	4a26      	ldr	r2, [pc, #152]	@ (80116f4 <vTaskPriorityDisinheritAfterTimeout+0x190>)
 801165a:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 801165c:	6a3b      	ldr	r3, [r7, #32]
 801165e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011660:	2201      	movs	r2, #1
 8011662:	409a      	lsls	r2, r3
 8011664:	4b23      	ldr	r3, [pc, #140]	@ (80116f4 <vTaskPriorityDisinheritAfterTimeout+0x190>)
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	4313      	orrs	r3, r2
 801166a:	4a22      	ldr	r2, [pc, #136]	@ (80116f4 <vTaskPriorityDisinheritAfterTimeout+0x190>)
 801166c:	6013      	str	r3, [r2, #0]
 801166e:	6a3b      	ldr	r3, [r7, #32]
 8011670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011672:	491f      	ldr	r1, [pc, #124]	@ (80116f0 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 8011674:	4613      	mov	r3, r2
 8011676:	009b      	lsls	r3, r3, #2
 8011678:	4413      	add	r3, r2
 801167a:	009b      	lsls	r3, r3, #2
 801167c:	440b      	add	r3, r1
 801167e:	3304      	adds	r3, #4
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	617b      	str	r3, [r7, #20]
 8011684:	6a3b      	ldr	r3, [r7, #32]
 8011686:	697a      	ldr	r2, [r7, #20]
 8011688:	609a      	str	r2, [r3, #8]
 801168a:	697b      	ldr	r3, [r7, #20]
 801168c:	689a      	ldr	r2, [r3, #8]
 801168e:	6a3b      	ldr	r3, [r7, #32]
 8011690:	60da      	str	r2, [r3, #12]
 8011692:	697b      	ldr	r3, [r7, #20]
 8011694:	689b      	ldr	r3, [r3, #8]
 8011696:	6a3a      	ldr	r2, [r7, #32]
 8011698:	3204      	adds	r2, #4
 801169a:	605a      	str	r2, [r3, #4]
 801169c:	6a3b      	ldr	r3, [r7, #32]
 801169e:	1d1a      	adds	r2, r3, #4
 80116a0:	697b      	ldr	r3, [r7, #20]
 80116a2:	609a      	str	r2, [r3, #8]
 80116a4:	6a3b      	ldr	r3, [r7, #32]
 80116a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80116a8:	4613      	mov	r3, r2
 80116aa:	009b      	lsls	r3, r3, #2
 80116ac:	4413      	add	r3, r2
 80116ae:	009b      	lsls	r3, r3, #2
 80116b0:	4a0f      	ldr	r2, [pc, #60]	@ (80116f0 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 80116b2:	441a      	add	r2, r3
 80116b4:	6a3b      	ldr	r3, [r7, #32]
 80116b6:	615a      	str	r2, [r3, #20]
 80116b8:	6a3b      	ldr	r3, [r7, #32]
 80116ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80116bc:	490c      	ldr	r1, [pc, #48]	@ (80116f0 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 80116be:	4613      	mov	r3, r2
 80116c0:	009b      	lsls	r3, r3, #2
 80116c2:	4413      	add	r3, r2
 80116c4:	009b      	lsls	r3, r3, #2
 80116c6:	440b      	add	r3, r1
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	6a3a      	ldr	r2, [r7, #32]
 80116cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80116ce:	1c59      	adds	r1, r3, #1
 80116d0:	4807      	ldr	r0, [pc, #28]	@ (80116f0 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 80116d2:	4613      	mov	r3, r2
 80116d4:	009b      	lsls	r3, r3, #2
 80116d6:	4413      	add	r3, r2
 80116d8:	009b      	lsls	r3, r3, #2
 80116da:	4403      	add	r3, r0
 80116dc:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 80116de:	bf00      	nop
 80116e0:	3728      	adds	r7, #40	@ 0x28
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}
 80116e6:	bf00      	nop
 80116e8:	08018b64 	.word	0x08018b64
 80116ec:	200004f8 	.word	0x200004f8
 80116f0:	200004fc 	.word	0x200004fc
 80116f4:	20000600 	.word	0x20000600

080116f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80116f8:	b480      	push	{r7}
 80116fa:	b083      	sub	sp, #12
 80116fc:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 80116fe:	4b09      	ldr	r3, [pc, #36]	@ (8011724 <pvTaskIncrementMutexHeldCount+0x2c>)
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d004      	beq.n	8011714 <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801170e:	1c5a      	adds	r2, r3, #1
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 8011714:	687b      	ldr	r3, [r7, #4]
    }
 8011716:	4618      	mov	r0, r3
 8011718:	370c      	adds	r7, #12
 801171a:	46bd      	mov	sp, r7
 801171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011720:	4770      	bx	lr
 8011722:	bf00      	nop
 8011724:	200004f8 	.word	0x200004f8

08011728 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8011728:	b580      	push	{r7, lr}
 801172a:	b088      	sub	sp, #32
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
 8011730:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8011732:	4b37      	ldr	r3, [pc, #220]	@ (8011810 <prvAddCurrentTaskToDelayedList+0xe8>)
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8011738:	4b36      	ldr	r3, [pc, #216]	@ (8011814 <prvAddCurrentTaskToDelayedList+0xec>)
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 801173e:	4b36      	ldr	r3, [pc, #216]	@ (8011818 <prvAddCurrentTaskToDelayedList+0xf0>)
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011744:	4b35      	ldr	r3, [pc, #212]	@ (801181c <prvAddCurrentTaskToDelayedList+0xf4>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	3304      	adds	r3, #4
 801174a:	4618      	mov	r0, r3
 801174c:	f7fd fc24 	bl	800ef98 <uxListRemove>
 8011750:	4603      	mov	r3, r0
 8011752:	2b00      	cmp	r3, #0
 8011754:	d10b      	bne.n	801176e <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8011756:	4b31      	ldr	r3, [pc, #196]	@ (801181c <prvAddCurrentTaskToDelayedList+0xf4>)
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801175c:	2201      	movs	r2, #1
 801175e:	fa02 f303 	lsl.w	r3, r2, r3
 8011762:	43da      	mvns	r2, r3
 8011764:	4b2e      	ldr	r3, [pc, #184]	@ (8011820 <prvAddCurrentTaskToDelayedList+0xf8>)
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	4013      	ands	r3, r2
 801176a:	4a2d      	ldr	r2, [pc, #180]	@ (8011820 <prvAddCurrentTaskToDelayedList+0xf8>)
 801176c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011774:	d124      	bne.n	80117c0 <prvAddCurrentTaskToDelayedList+0x98>
 8011776:	683b      	ldr	r3, [r7, #0]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d021      	beq.n	80117c0 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801177c:	4b29      	ldr	r3, [pc, #164]	@ (8011824 <prvAddCurrentTaskToDelayedList+0xfc>)
 801177e:	685b      	ldr	r3, [r3, #4]
 8011780:	613b      	str	r3, [r7, #16]
 8011782:	4b26      	ldr	r3, [pc, #152]	@ (801181c <prvAddCurrentTaskToDelayedList+0xf4>)
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	693a      	ldr	r2, [r7, #16]
 8011788:	609a      	str	r2, [r3, #8]
 801178a:	4b24      	ldr	r3, [pc, #144]	@ (801181c <prvAddCurrentTaskToDelayedList+0xf4>)
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	693a      	ldr	r2, [r7, #16]
 8011790:	6892      	ldr	r2, [r2, #8]
 8011792:	60da      	str	r2, [r3, #12]
 8011794:	4b21      	ldr	r3, [pc, #132]	@ (801181c <prvAddCurrentTaskToDelayedList+0xf4>)
 8011796:	681a      	ldr	r2, [r3, #0]
 8011798:	693b      	ldr	r3, [r7, #16]
 801179a:	689b      	ldr	r3, [r3, #8]
 801179c:	3204      	adds	r2, #4
 801179e:	605a      	str	r2, [r3, #4]
 80117a0:	4b1e      	ldr	r3, [pc, #120]	@ (801181c <prvAddCurrentTaskToDelayedList+0xf4>)
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	1d1a      	adds	r2, r3, #4
 80117a6:	693b      	ldr	r3, [r7, #16]
 80117a8:	609a      	str	r2, [r3, #8]
 80117aa:	4b1c      	ldr	r3, [pc, #112]	@ (801181c <prvAddCurrentTaskToDelayedList+0xf4>)
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	4a1d      	ldr	r2, [pc, #116]	@ (8011824 <prvAddCurrentTaskToDelayedList+0xfc>)
 80117b0:	615a      	str	r2, [r3, #20]
 80117b2:	4b1c      	ldr	r3, [pc, #112]	@ (8011824 <prvAddCurrentTaskToDelayedList+0xfc>)
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	3301      	adds	r3, #1
 80117b8:	4a1a      	ldr	r2, [pc, #104]	@ (8011824 <prvAddCurrentTaskToDelayedList+0xfc>)
 80117ba:	6013      	str	r3, [r2, #0]
 80117bc:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80117be:	e022      	b.n	8011806 <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80117c0:	69fa      	ldr	r2, [r7, #28]
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	4413      	add	r3, r2
 80117c6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80117c8:	4b14      	ldr	r3, [pc, #80]	@ (801181c <prvAddCurrentTaskToDelayedList+0xf4>)
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	68fa      	ldr	r2, [r7, #12]
 80117ce:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80117d0:	68fa      	ldr	r2, [r7, #12]
 80117d2:	69fb      	ldr	r3, [r7, #28]
 80117d4:	429a      	cmp	r2, r3
 80117d6:	d207      	bcs.n	80117e8 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80117d8:	4b10      	ldr	r3, [pc, #64]	@ (801181c <prvAddCurrentTaskToDelayedList+0xf4>)
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	3304      	adds	r3, #4
 80117de:	4619      	mov	r1, r3
 80117e0:	6978      	ldr	r0, [r7, #20]
 80117e2:	f7fd fba0 	bl	800ef26 <vListInsert>
}
 80117e6:	e00e      	b.n	8011806 <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80117e8:	4b0c      	ldr	r3, [pc, #48]	@ (801181c <prvAddCurrentTaskToDelayedList+0xf4>)
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	3304      	adds	r3, #4
 80117ee:	4619      	mov	r1, r3
 80117f0:	69b8      	ldr	r0, [r7, #24]
 80117f2:	f7fd fb98 	bl	800ef26 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80117f6:	4b0c      	ldr	r3, [pc, #48]	@ (8011828 <prvAddCurrentTaskToDelayedList+0x100>)
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	68fa      	ldr	r2, [r7, #12]
 80117fc:	429a      	cmp	r2, r3
 80117fe:	d202      	bcs.n	8011806 <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8011800:	4a09      	ldr	r2, [pc, #36]	@ (8011828 <prvAddCurrentTaskToDelayedList+0x100>)
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	6013      	str	r3, [r2, #0]
}
 8011806:	bf00      	nop
 8011808:	3720      	adds	r7, #32
 801180a:	46bd      	mov	sp, r7
 801180c:	bd80      	pop	{r7, pc}
 801180e:	bf00      	nop
 8011810:	200005fc 	.word	0x200005fc
 8011814:	200005b0 	.word	0x200005b0
 8011818:	200005b4 	.word	0x200005b4
 801181c:	200004f8 	.word	0x200004f8
 8011820:	20000600 	.word	0x20000600
 8011824:	200005e4 	.word	0x200005e4
 8011828:	20000618 	.word	0x20000618

0801182c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 801182c:	b580      	push	{r7, lr}
 801182e:	b084      	sub	sp, #16
 8011830:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8011832:	2300      	movs	r3, #0
 8011834:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8011836:	f000 fa61 	bl	8011cfc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 801183a:	4b14      	ldr	r3, [pc, #80]	@ (801188c <xTimerCreateTimerTask+0x60>)
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d00b      	beq.n	801185a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8011842:	4b13      	ldr	r3, [pc, #76]	@ (8011890 <xTimerCreateTimerTask+0x64>)
 8011844:	9301      	str	r3, [sp, #4]
 8011846:	2306      	movs	r3, #6
 8011848:	9300      	str	r3, [sp, #0]
 801184a:	2300      	movs	r3, #0
 801184c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8011850:	4910      	ldr	r1, [pc, #64]	@ (8011894 <xTimerCreateTimerTask+0x68>)
 8011852:	4811      	ldr	r0, [pc, #68]	@ (8011898 <xTimerCreateTimerTask+0x6c>)
 8011854:	f7fe fa68 	bl	800fd28 <xTaskCreate>
 8011858:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d110      	bne.n	8011882 <xTimerCreateTimerTask+0x56>
    __asm volatile
 8011860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011864:	b672      	cpsid	i
 8011866:	f383 8811 	msr	BASEPRI, r3
 801186a:	f3bf 8f6f 	isb	sy
 801186e:	f3bf 8f4f 	dsb	sy
 8011872:	b662      	cpsie	i
 8011874:	603b      	str	r3, [r7, #0]
}
 8011876:	bf00      	nop
 8011878:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 801187c:	4807      	ldr	r0, [pc, #28]	@ (801189c <xTimerCreateTimerTask+0x70>)
 801187e:	f7f5 f823 	bl	80068c8 <vAssertCalled>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 8011882:	687b      	ldr	r3, [r7, #4]
    }
 8011884:	4618      	mov	r0, r3
 8011886:	3708      	adds	r7, #8
 8011888:	46bd      	mov	sp, r7
 801188a:	bd80      	pop	{r7, pc}
 801188c:	2000065c 	.word	0x2000065c
 8011890:	20000660 	.word	0x20000660
 8011894:	08018c18 	.word	0x08018c18
 8011898:	08011945 	.word	0x08011945
 801189c:	08018c20 	.word	0x08018c20

080118a0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b084      	sub	sp, #16
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	60f8      	str	r0, [r7, #12]
 80118a8:	60b9      	str	r1, [r7, #8]
 80118aa:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80118ac:	e008      	b.n	80118c0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	699b      	ldr	r3, [r3, #24]
 80118b2:	68ba      	ldr	r2, [r7, #8]
 80118b4:	4413      	add	r3, r2
 80118b6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	6a1b      	ldr	r3, [r3, #32]
 80118bc:	68f8      	ldr	r0, [r7, #12]
 80118be:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	699a      	ldr	r2, [r3, #24]
 80118c4:	68bb      	ldr	r3, [r7, #8]
 80118c6:	18d1      	adds	r1, r2, r3
 80118c8:	68bb      	ldr	r3, [r7, #8]
 80118ca:	687a      	ldr	r2, [r7, #4]
 80118cc:	68f8      	ldr	r0, [r7, #12]
 80118ce:	f000 f8df 	bl	8011a90 <prvInsertTimerInActiveList>
 80118d2:	4603      	mov	r3, r0
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d1ea      	bne.n	80118ae <prvReloadTimer+0xe>
        }
    }
 80118d8:	bf00      	nop
 80118da:	bf00      	nop
 80118dc:	3710      	adds	r7, #16
 80118de:	46bd      	mov	sp, r7
 80118e0:	bd80      	pop	{r7, pc}
	...

080118e4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80118e4:	b580      	push	{r7, lr}
 80118e6:	b084      	sub	sp, #16
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
 80118ec:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80118ee:	4b14      	ldr	r3, [pc, #80]	@ (8011940 <prvProcessExpiredTimer+0x5c>)
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	68db      	ldr	r3, [r3, #12]
 80118f4:	68db      	ldr	r3, [r3, #12]
 80118f6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	3304      	adds	r3, #4
 80118fc:	4618      	mov	r0, r3
 80118fe:	f7fd fb4b 	bl	800ef98 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011908:	f003 0304 	and.w	r3, r3, #4
 801190c:	2b00      	cmp	r3, #0
 801190e:	d005      	beq.n	801191c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8011910:	683a      	ldr	r2, [r7, #0]
 8011912:	6879      	ldr	r1, [r7, #4]
 8011914:	68f8      	ldr	r0, [r7, #12]
 8011916:	f7ff ffc3 	bl	80118a0 <prvReloadTimer>
 801191a:	e008      	b.n	801192e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011922:	f023 0301 	bic.w	r3, r3, #1
 8011926:	b2da      	uxtb	r2, r3
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	6a1b      	ldr	r3, [r3, #32]
 8011932:	68f8      	ldr	r0, [r7, #12]
 8011934:	4798      	blx	r3
    }
 8011936:	bf00      	nop
 8011938:	3710      	adds	r7, #16
 801193a:	46bd      	mov	sp, r7
 801193c:	bd80      	pop	{r7, pc}
 801193e:	bf00      	nop
 8011940:	20000654 	.word	0x20000654

08011944 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8011944:	b580      	push	{r7, lr}
 8011946:	b084      	sub	sp, #16
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801194c:	f107 0308 	add.w	r3, r7, #8
 8011950:	4618      	mov	r0, r3
 8011952:	f000 f859 	bl	8011a08 <prvGetNextExpireTime>
 8011956:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011958:	68bb      	ldr	r3, [r7, #8]
 801195a:	4619      	mov	r1, r3
 801195c:	68f8      	ldr	r0, [r7, #12]
 801195e:	f000 f805 	bl	801196c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8011962:	f000 f8d7 	bl	8011b14 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011966:	bf00      	nop
 8011968:	e7f0      	b.n	801194c <prvTimerTask+0x8>
	...

0801196c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 801196c:	b580      	push	{r7, lr}
 801196e:	b084      	sub	sp, #16
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
 8011974:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8011976:	f7fe fd5f 	bl	8010438 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801197a:	f107 0308 	add.w	r3, r7, #8
 801197e:	4618      	mov	r0, r3
 8011980:	f000 f866 	bl	8011a50 <prvSampleTimeNow>
 8011984:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8011986:	68bb      	ldr	r3, [r7, #8]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d130      	bne.n	80119ee <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801198c:	683b      	ldr	r3, [r7, #0]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d10a      	bne.n	80119a8 <prvProcessTimerOrBlockTask+0x3c>
 8011992:	687a      	ldr	r2, [r7, #4]
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	429a      	cmp	r2, r3
 8011998:	d806      	bhi.n	80119a8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 801199a:	f7fe fd5b 	bl	8010454 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801199e:	68f9      	ldr	r1, [r7, #12]
 80119a0:	6878      	ldr	r0, [r7, #4]
 80119a2:	f7ff ff9f 	bl	80118e4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80119a6:	e024      	b.n	80119f2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80119a8:	683b      	ldr	r3, [r7, #0]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d008      	beq.n	80119c0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80119ae:	4b13      	ldr	r3, [pc, #76]	@ (80119fc <prvProcessTimerOrBlockTask+0x90>)
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d101      	bne.n	80119bc <prvProcessTimerOrBlockTask+0x50>
 80119b8:	2301      	movs	r3, #1
 80119ba:	e000      	b.n	80119be <prvProcessTimerOrBlockTask+0x52>
 80119bc:	2300      	movs	r3, #0
 80119be:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80119c0:	4b0f      	ldr	r3, [pc, #60]	@ (8011a00 <prvProcessTimerOrBlockTask+0x94>)
 80119c2:	6818      	ldr	r0, [r3, #0]
 80119c4:	687a      	ldr	r2, [r7, #4]
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	1ad3      	subs	r3, r2, r3
 80119ca:	683a      	ldr	r2, [r7, #0]
 80119cc:	4619      	mov	r1, r3
 80119ce:	f7fe f93b 	bl	800fc48 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80119d2:	f7fe fd3f 	bl	8010454 <xTaskResumeAll>
 80119d6:	4603      	mov	r3, r0
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d10a      	bne.n	80119f2 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 80119dc:	4b09      	ldr	r3, [pc, #36]	@ (8011a04 <prvProcessTimerOrBlockTask+0x98>)
 80119de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80119e2:	601a      	str	r2, [r3, #0]
 80119e4:	f3bf 8f4f 	dsb	sy
 80119e8:	f3bf 8f6f 	isb	sy
    }
 80119ec:	e001      	b.n	80119f2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80119ee:	f7fe fd31 	bl	8010454 <xTaskResumeAll>
    }
 80119f2:	bf00      	nop
 80119f4:	3710      	adds	r7, #16
 80119f6:	46bd      	mov	sp, r7
 80119f8:	bd80      	pop	{r7, pc}
 80119fa:	bf00      	nop
 80119fc:	20000658 	.word	0x20000658
 8011a00:	2000065c 	.word	0x2000065c
 8011a04:	e000ed04 	.word	0xe000ed04

08011a08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8011a08:	b480      	push	{r7}
 8011a0a:	b085      	sub	sp, #20
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011a10:	4b0e      	ldr	r3, [pc, #56]	@ (8011a4c <prvGetNextExpireTime+0x44>)
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d101      	bne.n	8011a1e <prvGetNextExpireTime+0x16>
 8011a1a:	2201      	movs	r2, #1
 8011a1c:	e000      	b.n	8011a20 <prvGetNextExpireTime+0x18>
 8011a1e:	2200      	movs	r2, #0
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d105      	bne.n	8011a38 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011a2c:	4b07      	ldr	r3, [pc, #28]	@ (8011a4c <prvGetNextExpireTime+0x44>)
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	68db      	ldr	r3, [r3, #12]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	60fb      	str	r3, [r7, #12]
 8011a36:	e001      	b.n	8011a3c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8011a38:	2300      	movs	r3, #0
 8011a3a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8011a3c:	68fb      	ldr	r3, [r7, #12]
    }
 8011a3e:	4618      	mov	r0, r3
 8011a40:	3714      	adds	r7, #20
 8011a42:	46bd      	mov	sp, r7
 8011a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a48:	4770      	bx	lr
 8011a4a:	bf00      	nop
 8011a4c:	20000654 	.word	0x20000654

08011a50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b084      	sub	sp, #16
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8011a58:	f7fe fe0c 	bl	8010674 <xTaskGetTickCount>
 8011a5c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8011a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8011a8c <prvSampleTimeNow+0x3c>)
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	68fa      	ldr	r2, [r7, #12]
 8011a64:	429a      	cmp	r2, r3
 8011a66:	d205      	bcs.n	8011a74 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8011a68:	f000 f922 	bl	8011cb0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2201      	movs	r2, #1
 8011a70:	601a      	str	r2, [r3, #0]
 8011a72:	e002      	b.n	8011a7a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	2200      	movs	r2, #0
 8011a78:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8011a7a:	4a04      	ldr	r2, [pc, #16]	@ (8011a8c <prvSampleTimeNow+0x3c>)
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8011a80:	68fb      	ldr	r3, [r7, #12]
    }
 8011a82:	4618      	mov	r0, r3
 8011a84:	3710      	adds	r7, #16
 8011a86:	46bd      	mov	sp, r7
 8011a88:	bd80      	pop	{r7, pc}
 8011a8a:	bf00      	nop
 8011a8c:	20000664 	.word	0x20000664

08011a90 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b086      	sub	sp, #24
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	60f8      	str	r0, [r7, #12]
 8011a98:	60b9      	str	r1, [r7, #8]
 8011a9a:	607a      	str	r2, [r7, #4]
 8011a9c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	68ba      	ldr	r2, [r7, #8]
 8011aa6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	68fa      	ldr	r2, [r7, #12]
 8011aac:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8011aae:	68ba      	ldr	r2, [r7, #8]
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	429a      	cmp	r2, r3
 8011ab4:	d812      	bhi.n	8011adc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8011ab6:	687a      	ldr	r2, [r7, #4]
 8011ab8:	683b      	ldr	r3, [r7, #0]
 8011aba:	1ad2      	subs	r2, r2, r3
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	699b      	ldr	r3, [r3, #24]
 8011ac0:	429a      	cmp	r2, r3
 8011ac2:	d302      	bcc.n	8011aca <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8011ac4:	2301      	movs	r3, #1
 8011ac6:	617b      	str	r3, [r7, #20]
 8011ac8:	e01b      	b.n	8011b02 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011aca:	4b10      	ldr	r3, [pc, #64]	@ (8011b0c <prvInsertTimerInActiveList+0x7c>)
 8011acc:	681a      	ldr	r2, [r3, #0]
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	3304      	adds	r3, #4
 8011ad2:	4619      	mov	r1, r3
 8011ad4:	4610      	mov	r0, r2
 8011ad6:	f7fd fa26 	bl	800ef26 <vListInsert>
 8011ada:	e012      	b.n	8011b02 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011adc:	687a      	ldr	r2, [r7, #4]
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	429a      	cmp	r2, r3
 8011ae2:	d206      	bcs.n	8011af2 <prvInsertTimerInActiveList+0x62>
 8011ae4:	68ba      	ldr	r2, [r7, #8]
 8011ae6:	683b      	ldr	r3, [r7, #0]
 8011ae8:	429a      	cmp	r2, r3
 8011aea:	d302      	bcc.n	8011af2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8011aec:	2301      	movs	r3, #1
 8011aee:	617b      	str	r3, [r7, #20]
 8011af0:	e007      	b.n	8011b02 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011af2:	4b07      	ldr	r3, [pc, #28]	@ (8011b10 <prvInsertTimerInActiveList+0x80>)
 8011af4:	681a      	ldr	r2, [r3, #0]
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	3304      	adds	r3, #4
 8011afa:	4619      	mov	r1, r3
 8011afc:	4610      	mov	r0, r2
 8011afe:	f7fd fa12 	bl	800ef26 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8011b02:	697b      	ldr	r3, [r7, #20]
    }
 8011b04:	4618      	mov	r0, r3
 8011b06:	3718      	adds	r7, #24
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	bd80      	pop	{r7, pc}
 8011b0c:	20000658 	.word	0x20000658
 8011b10:	20000654 	.word	0x20000654

08011b14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b088      	sub	sp, #32
 8011b18:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8011b1a:	f107 0308 	add.w	r3, r7, #8
 8011b1e:	2200      	movs	r2, #0
 8011b20:	601a      	str	r2, [r3, #0]
 8011b22:	605a      	str	r2, [r3, #4]
 8011b24:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8011b26:	e0ae      	b.n	8011c86 <prvProcessReceivedCommands+0x172>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011b28:	68bb      	ldr	r3, [r7, #8]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	f2c0 80ab 	blt.w	8011c86 <prvProcessReceivedCommands+0x172>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011b30:	693b      	ldr	r3, [r7, #16]
 8011b32:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8011b34:	69fb      	ldr	r3, [r7, #28]
 8011b36:	695b      	ldr	r3, [r3, #20]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d004      	beq.n	8011b46 <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011b3c:	69fb      	ldr	r3, [r7, #28]
 8011b3e:	3304      	adds	r3, #4
 8011b40:	4618      	mov	r0, r3
 8011b42:	f7fd fa29 	bl	800ef98 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011b46:	1d3b      	adds	r3, r7, #4
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f7ff ff81 	bl	8011a50 <prvSampleTimeNow>
 8011b4e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8011b50:	68bb      	ldr	r3, [r7, #8]
 8011b52:	3b01      	subs	r3, #1
 8011b54:	2b08      	cmp	r3, #8
 8011b56:	f200 8093 	bhi.w	8011c80 <prvProcessReceivedCommands+0x16c>
 8011b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8011b60 <prvProcessReceivedCommands+0x4c>)
 8011b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b60:	08011b85 	.word	0x08011b85
 8011b64:	08011b85 	.word	0x08011b85
 8011b68:	08011bed 	.word	0x08011bed
 8011b6c:	08011c01 	.word	0x08011c01
 8011b70:	08011c57 	.word	0x08011c57
 8011b74:	08011b85 	.word	0x08011b85
 8011b78:	08011b85 	.word	0x08011b85
 8011b7c:	08011bed 	.word	0x08011bed
 8011b80:	08011c01 	.word	0x08011c01
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8011b84:	69fb      	ldr	r3, [r7, #28]
 8011b86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011b8a:	f043 0301 	orr.w	r3, r3, #1
 8011b8e:	b2da      	uxtb	r2, r3
 8011b90:	69fb      	ldr	r3, [r7, #28]
 8011b92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011b96:	68fa      	ldr	r2, [r7, #12]
 8011b98:	69fb      	ldr	r3, [r7, #28]
 8011b9a:	699b      	ldr	r3, [r3, #24]
 8011b9c:	18d1      	adds	r1, r2, r3
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	69ba      	ldr	r2, [r7, #24]
 8011ba2:	69f8      	ldr	r0, [r7, #28]
 8011ba4:	f7ff ff74 	bl	8011a90 <prvInsertTimerInActiveList>
 8011ba8:	4603      	mov	r3, r0
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d06a      	beq.n	8011c84 <prvProcessReceivedCommands+0x170>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8011bae:	69fb      	ldr	r3, [r7, #28]
 8011bb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011bb4:	f003 0304 	and.w	r3, r3, #4
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d009      	beq.n	8011bd0 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8011bbc:	68fa      	ldr	r2, [r7, #12]
 8011bbe:	69fb      	ldr	r3, [r7, #28]
 8011bc0:	699b      	ldr	r3, [r3, #24]
 8011bc2:	4413      	add	r3, r2
 8011bc4:	69ba      	ldr	r2, [r7, #24]
 8011bc6:	4619      	mov	r1, r3
 8011bc8:	69f8      	ldr	r0, [r7, #28]
 8011bca:	f7ff fe69 	bl	80118a0 <prvReloadTimer>
 8011bce:	e008      	b.n	8011be2 <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8011bd0:	69fb      	ldr	r3, [r7, #28]
 8011bd2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011bd6:	f023 0301 	bic.w	r3, r3, #1
 8011bda:	b2da      	uxtb	r2, r3
 8011bdc:	69fb      	ldr	r3, [r7, #28]
 8011bde:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011be2:	69fb      	ldr	r3, [r7, #28]
 8011be4:	6a1b      	ldr	r3, [r3, #32]
 8011be6:	69f8      	ldr	r0, [r7, #28]
 8011be8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8011bea:	e04b      	b.n	8011c84 <prvProcessReceivedCommands+0x170>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8011bec:	69fb      	ldr	r3, [r7, #28]
 8011bee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011bf2:	f023 0301 	bic.w	r3, r3, #1
 8011bf6:	b2da      	uxtb	r2, r3
 8011bf8:	69fb      	ldr	r3, [r7, #28]
 8011bfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8011bfe:	e042      	b.n	8011c86 <prvProcessReceivedCommands+0x172>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8011c00:	69fb      	ldr	r3, [r7, #28]
 8011c02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011c06:	f043 0301 	orr.w	r3, r3, #1
 8011c0a:	b2da      	uxtb	r2, r3
 8011c0c:	69fb      	ldr	r3, [r7, #28]
 8011c0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011c12:	68fa      	ldr	r2, [r7, #12]
 8011c14:	69fb      	ldr	r3, [r7, #28]
 8011c16:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011c18:	69fb      	ldr	r3, [r7, #28]
 8011c1a:	699b      	ldr	r3, [r3, #24]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d110      	bne.n	8011c42 <prvProcessReceivedCommands+0x12e>
    __asm volatile
 8011c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c24:	b672      	cpsid	i
 8011c26:	f383 8811 	msr	BASEPRI, r3
 8011c2a:	f3bf 8f6f 	isb	sy
 8011c2e:	f3bf 8f4f 	dsb	sy
 8011c32:	b662      	cpsie	i
 8011c34:	617b      	str	r3, [r7, #20]
}
 8011c36:	bf00      	nop
 8011c38:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8011c3c:	481a      	ldr	r0, [pc, #104]	@ (8011ca8 <prvProcessReceivedCommands+0x194>)
 8011c3e:	f7f4 fe43 	bl	80068c8 <vAssertCalled>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011c42:	69fb      	ldr	r3, [r7, #28]
 8011c44:	699a      	ldr	r2, [r3, #24]
 8011c46:	69bb      	ldr	r3, [r7, #24]
 8011c48:	18d1      	adds	r1, r2, r3
 8011c4a:	69bb      	ldr	r3, [r7, #24]
 8011c4c:	69ba      	ldr	r2, [r7, #24]
 8011c4e:	69f8      	ldr	r0, [r7, #28]
 8011c50:	f7ff ff1e 	bl	8011a90 <prvInsertTimerInActiveList>
                        break;
 8011c54:	e017      	b.n	8011c86 <prvProcessReceivedCommands+0x172>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011c56:	69fb      	ldr	r3, [r7, #28]
 8011c58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011c5c:	f003 0302 	and.w	r3, r3, #2
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d103      	bne.n	8011c6c <prvProcessReceivedCommands+0x158>
                            {
                                vPortFree( pxTimer );
 8011c64:	69f8      	ldr	r0, [r7, #28]
 8011c66:	f7f5 f9a5 	bl	8006fb4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8011c6a:	e00c      	b.n	8011c86 <prvProcessReceivedCommands+0x172>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8011c6c:	69fb      	ldr	r3, [r7, #28]
 8011c6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011c72:	f023 0301 	bic.w	r3, r3, #1
 8011c76:	b2da      	uxtb	r2, r3
 8011c78:	69fb      	ldr	r3, [r7, #28]
 8011c7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8011c7e:	e002      	b.n	8011c86 <prvProcessReceivedCommands+0x172>

                    default:
                        /* Don't expect to get here. */
                        break;
 8011c80:	bf00      	nop
 8011c82:	e000      	b.n	8011c86 <prvProcessReceivedCommands+0x172>
                        break;
 8011c84:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8011c86:	4b09      	ldr	r3, [pc, #36]	@ (8011cac <prvProcessReceivedCommands+0x198>)
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	f107 0108 	add.w	r1, r7, #8
 8011c8e:	2200      	movs	r2, #0
 8011c90:	4618      	mov	r0, r3
 8011c92:	f7fd fc87 	bl	800f5a4 <xQueueReceive>
 8011c96:	4603      	mov	r3, r0
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	f47f af45 	bne.w	8011b28 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8011c9e:	bf00      	nop
 8011ca0:	bf00      	nop
 8011ca2:	3720      	adds	r7, #32
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	bd80      	pop	{r7, pc}
 8011ca8:	08018c20 	.word	0x08018c20
 8011cac:	2000065c 	.word	0x2000065c

08011cb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b082      	sub	sp, #8
 8011cb4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011cb6:	e009      	b.n	8011ccc <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8011cf4 <prvSwitchTimerLists+0x44>)
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	68db      	ldr	r3, [r3, #12]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8011cc2:	f04f 31ff 	mov.w	r1, #4294967295
 8011cc6:	6838      	ldr	r0, [r7, #0]
 8011cc8:	f7ff fe0c 	bl	80118e4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011ccc:	4b09      	ldr	r3, [pc, #36]	@ (8011cf4 <prvSwitchTimerLists+0x44>)
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d1f0      	bne.n	8011cb8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8011cd6:	4b07      	ldr	r3, [pc, #28]	@ (8011cf4 <prvSwitchTimerLists+0x44>)
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8011cdc:	4b06      	ldr	r3, [pc, #24]	@ (8011cf8 <prvSwitchTimerLists+0x48>)
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	4a04      	ldr	r2, [pc, #16]	@ (8011cf4 <prvSwitchTimerLists+0x44>)
 8011ce2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8011ce4:	4a04      	ldr	r2, [pc, #16]	@ (8011cf8 <prvSwitchTimerLists+0x48>)
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	6013      	str	r3, [r2, #0]
    }
 8011cea:	bf00      	nop
 8011cec:	3708      	adds	r7, #8
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	bd80      	pop	{r7, pc}
 8011cf2:	bf00      	nop
 8011cf4:	20000654 	.word	0x20000654
 8011cf8:	20000658 	.word	0x20000658

08011cfc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8011d00:	f000 f996 	bl	8012030 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8011d04:	4b0d      	ldr	r3, [pc, #52]	@ (8011d3c <prvCheckForValidListAndQueue+0x40>)
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d113      	bne.n	8011d34 <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 8011d0c:	480c      	ldr	r0, [pc, #48]	@ (8011d40 <prvCheckForValidListAndQueue+0x44>)
 8011d0e:	f7fd f8b9 	bl	800ee84 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8011d12:	480c      	ldr	r0, [pc, #48]	@ (8011d44 <prvCheckForValidListAndQueue+0x48>)
 8011d14:	f7fd f8b6 	bl	800ee84 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8011d18:	4b0b      	ldr	r3, [pc, #44]	@ (8011d48 <prvCheckForValidListAndQueue+0x4c>)
 8011d1a:	4a09      	ldr	r2, [pc, #36]	@ (8011d40 <prvCheckForValidListAndQueue+0x44>)
 8011d1c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8011d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8011d4c <prvCheckForValidListAndQueue+0x50>)
 8011d20:	4a08      	ldr	r2, [pc, #32]	@ (8011d44 <prvCheckForValidListAndQueue+0x48>)
 8011d22:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8011d24:	2200      	movs	r2, #0
 8011d26:	210c      	movs	r1, #12
 8011d28:	2008      	movs	r0, #8
 8011d2a:	f7fd f9fd 	bl	800f128 <xQueueGenericCreate>
 8011d2e:	4603      	mov	r3, r0
 8011d30:	4a02      	ldr	r2, [pc, #8]	@ (8011d3c <prvCheckForValidListAndQueue+0x40>)
 8011d32:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8011d34:	f000 f9b4 	bl	80120a0 <vPortExitCritical>
    }
 8011d38:	bf00      	nop
 8011d3a:	bd80      	pop	{r7, pc}
 8011d3c:	2000065c 	.word	0x2000065c
 8011d40:	2000062c 	.word	0x2000062c
 8011d44:	20000640 	.word	0x20000640
 8011d48:	20000654 	.word	0x20000654
 8011d4c:	20000658 	.word	0x20000658

08011d50 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8011d50:	b480      	push	{r7}
 8011d52:	b085      	sub	sp, #20
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	60f8      	str	r0, [r7, #12]
 8011d58:	60b9      	str	r1, [r7, #8]
 8011d5a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	3b04      	subs	r3, #4
 8011d60:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8011d68:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	3b04      	subs	r3, #4
 8011d6e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8011d70:	68bb      	ldr	r3, [r7, #8]
 8011d72:	f023 0201 	bic.w	r2, r3, #1
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	3b04      	subs	r3, #4
 8011d7e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8011d80:	4a0c      	ldr	r2, [pc, #48]	@ (8011db4 <pxPortInitialiseStack+0x64>)
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	3b14      	subs	r3, #20
 8011d8a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8011d8c:	687a      	ldr	r2, [r7, #4]
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	3b04      	subs	r3, #4
 8011d96:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	f06f 0202 	mvn.w	r2, #2
 8011d9e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	3b20      	subs	r3, #32
 8011da4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8011da6:	68fb      	ldr	r3, [r7, #12]
}
 8011da8:	4618      	mov	r0, r3
 8011daa:	3714      	adds	r7, #20
 8011dac:	46bd      	mov	sp, r7
 8011dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db2:	4770      	bx	lr
 8011db4:	08011db9 	.word	0x08011db9

08011db8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b084      	sub	sp, #16
 8011dbc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8011dc2:	4b15      	ldr	r3, [pc, #84]	@ (8011e18 <prvTaskExitError+0x60>)
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dca:	d00f      	beq.n	8011dec <prvTaskExitError+0x34>
    __asm volatile
 8011dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011dd0:	b672      	cpsid	i
 8011dd2:	f383 8811 	msr	BASEPRI, r3
 8011dd6:	f3bf 8f6f 	isb	sy
 8011dda:	f3bf 8f4f 	dsb	sy
 8011dde:	b662      	cpsie	i
 8011de0:	60fb      	str	r3, [r7, #12]
}
 8011de2:	bf00      	nop
 8011de4:	21ee      	movs	r1, #238	@ 0xee
 8011de6:	480d      	ldr	r0, [pc, #52]	@ (8011e1c <prvTaskExitError+0x64>)
 8011de8:	f7f4 fd6e 	bl	80068c8 <vAssertCalled>
    __asm volatile
 8011dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011df0:	b672      	cpsid	i
 8011df2:	f383 8811 	msr	BASEPRI, r3
 8011df6:	f3bf 8f6f 	isb	sy
 8011dfa:	f3bf 8f4f 	dsb	sy
 8011dfe:	b662      	cpsie	i
 8011e00:	60bb      	str	r3, [r7, #8]
}
 8011e02:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8011e04:	bf00      	nop
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d0fc      	beq.n	8011e06 <prvTaskExitError+0x4e>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8011e0c:	bf00      	nop
 8011e0e:	bf00      	nop
 8011e10:	3710      	adds	r7, #16
 8011e12:	46bd      	mov	sp, r7
 8011e14:	bd80      	pop	{r7, pc}
 8011e16:	bf00      	nop
 8011e18:	20000058 	.word	0x20000058
 8011e1c:	08018ca4 	.word	0x08018ca4

08011e20 <SVC_Handler>:
/*-----------------------------------------------------------*/
void vPortSVCHandler( void )
{
	__asm volatile (
 8011e20:	4b07      	ldr	r3, [pc, #28]	@ (8011e40 <pxCurrentTCBConst2>)
 8011e22:	6819      	ldr	r1, [r3, #0]
 8011e24:	6808      	ldr	r0, [r1, #0]
 8011e26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e2a:	f380 8809 	msr	PSP, r0
 8011e2e:	f3bf 8f6f 	isb	sy
 8011e32:	f04f 0000 	mov.w	r0, #0
 8011e36:	f380 8811 	msr	BASEPRI, r0
 8011e3a:	4770      	bx	lr
 8011e3c:	f3af 8000 	nop.w

08011e40 <pxCurrentTCBConst2>:
 8011e40:	200004f8 	.word	0x200004f8
	        "   bx r14                          \n"
	        "                                   \n"
	        "   .align 4                        \n"
	        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
	        );
}
 8011e44:	bf00      	nop
 8011e46:	bf00      	nop

08011e48 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8011e48:	4808      	ldr	r0, [pc, #32]	@ (8011e6c <prvPortStartFirstTask+0x24>)
 8011e4a:	6800      	ldr	r0, [r0, #0]
 8011e4c:	6800      	ldr	r0, [r0, #0]
 8011e4e:	f380 8808 	msr	MSP, r0
 8011e52:	f04f 0000 	mov.w	r0, #0
 8011e56:	f380 8814 	msr	CONTROL, r0
 8011e5a:	b662      	cpsie	i
 8011e5c:	b661      	cpsie	f
 8011e5e:	f3bf 8f4f 	dsb	sy
 8011e62:	f3bf 8f6f 	isb	sy
 8011e66:	df00      	svc	0
 8011e68:	bf00      	nop
 8011e6a:	0000      	.short	0x0000
 8011e6c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8011e70:	bf00      	nop
 8011e72:	bf00      	nop

08011e74 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b08a      	sub	sp, #40	@ 0x28
 8011e78:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8011e7a:	4b62      	ldr	r3, [pc, #392]	@ (8012004 <xPortStartScheduler+0x190>)
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8011e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e82:	332c      	adds	r3, #44	@ 0x2c
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	4a60      	ldr	r2, [pc, #384]	@ (8012008 <xPortStartScheduler+0x194>)
 8011e88:	4293      	cmp	r3, r2
 8011e8a:	d010      	beq.n	8011eae <xPortStartScheduler+0x3a>
    __asm volatile
 8011e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e90:	b672      	cpsid	i
 8011e92:	f383 8811 	msr	BASEPRI, r3
 8011e96:	f3bf 8f6f 	isb	sy
 8011e9a:	f3bf 8f4f 	dsb	sy
 8011e9e:	b662      	cpsie	i
 8011ea0:	61bb      	str	r3, [r7, #24]
}
 8011ea2:	bf00      	nop
 8011ea4:	f240 114b 	movw	r1, #331	@ 0x14b
 8011ea8:	4858      	ldr	r0, [pc, #352]	@ (801200c <xPortStartScheduler+0x198>)
 8011eaa:	f7f4 fd0d 	bl	80068c8 <vAssertCalled>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8011eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011eb0:	3338      	adds	r3, #56	@ 0x38
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	4a56      	ldr	r2, [pc, #344]	@ (8012010 <xPortStartScheduler+0x19c>)
 8011eb6:	4293      	cmp	r3, r2
 8011eb8:	d010      	beq.n	8011edc <xPortStartScheduler+0x68>
    __asm volatile
 8011eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ebe:	b672      	cpsid	i
 8011ec0:	f383 8811 	msr	BASEPRI, r3
 8011ec4:	f3bf 8f6f 	isb	sy
 8011ec8:	f3bf 8f4f 	dsb	sy
 8011ecc:	b662      	cpsie	i
 8011ece:	61fb      	str	r3, [r7, #28]
}
 8011ed0:	bf00      	nop
 8011ed2:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8011ed6:	484d      	ldr	r0, [pc, #308]	@ (801200c <xPortStartScheduler+0x198>)
 8011ed8:	f7f4 fcf6 	bl	80068c8 <vAssertCalled>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8011edc:	2300      	movs	r3, #0
 8011ede:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011ee0:	4b4c      	ldr	r3, [pc, #304]	@ (8012014 <xPortStartScheduler+0x1a0>)
 8011ee2:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8011ee4:	6a3b      	ldr	r3, [r7, #32]
 8011ee6:	781b      	ldrb	r3, [r3, #0]
 8011ee8:	b2db      	uxtb	r3, r3
 8011eea:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011eec:	6a3b      	ldr	r3, [r7, #32]
 8011eee:	22ff      	movs	r2, #255	@ 0xff
 8011ef0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011ef2:	6a3b      	ldr	r3, [r7, #32]
 8011ef4:	781b      	ldrb	r3, [r3, #0]
 8011ef6:	b2db      	uxtb	r3, r3
 8011ef8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011efa:	79fb      	ldrb	r3, [r7, #7]
 8011efc:	b2db      	uxtb	r3, r3
 8011efe:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8011f02:	b2da      	uxtb	r2, r3
 8011f04:	4b44      	ldr	r3, [pc, #272]	@ (8012018 <xPortStartScheduler+0x1a4>)
 8011f06:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8011f08:	4b43      	ldr	r3, [pc, #268]	@ (8012018 <xPortStartScheduler+0x1a4>)
 8011f0a:	781b      	ldrb	r3, [r3, #0]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d110      	bne.n	8011f32 <xPortStartScheduler+0xbe>
    __asm volatile
 8011f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f14:	b672      	cpsid	i
 8011f16:	f383 8811 	msr	BASEPRI, r3
 8011f1a:	f3bf 8f6f 	isb	sy
 8011f1e:	f3bf 8f4f 	dsb	sy
 8011f22:	b662      	cpsie	i
 8011f24:	617b      	str	r3, [r7, #20]
}
 8011f26:	bf00      	nop
 8011f28:	f240 116f 	movw	r1, #367	@ 0x16f
 8011f2c:	4837      	ldr	r0, [pc, #220]	@ (801200c <xPortStartScheduler+0x198>)
 8011f2e:	f7f4 fccb 	bl	80068c8 <vAssertCalled>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8011f32:	79fb      	ldrb	r3, [r7, #7]
 8011f34:	b2db      	uxtb	r3, r3
 8011f36:	43db      	mvns	r3, r3
 8011f38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d019      	beq.n	8011f74 <xPortStartScheduler+0x100>
    __asm volatile
 8011f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f44:	b672      	cpsid	i
 8011f46:	f383 8811 	msr	BASEPRI, r3
 8011f4a:	f3bf 8f6f 	isb	sy
 8011f4e:	f3bf 8f4f 	dsb	sy
 8011f52:	b662      	cpsie	i
 8011f54:	613b      	str	r3, [r7, #16]
}
 8011f56:	bf00      	nop
 8011f58:	f240 1173 	movw	r1, #371	@ 0x173
 8011f5c:	482b      	ldr	r0, [pc, #172]	@ (801200c <xPortStartScheduler+0x198>)
 8011f5e:	f7f4 fcb3 	bl	80068c8 <vAssertCalled>

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011f62:	e007      	b.n	8011f74 <xPortStartScheduler+0x100>
        {
            ulImplementedPrioBits++;
 8011f64:	68bb      	ldr	r3, [r7, #8]
 8011f66:	3301      	adds	r3, #1
 8011f68:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011f6a:	79fb      	ldrb	r3, [r7, #7]
 8011f6c:	b2db      	uxtb	r3, r3
 8011f6e:	005b      	lsls	r3, r3, #1
 8011f70:	b2db      	uxtb	r3, r3
 8011f72:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011f74:	79fb      	ldrb	r3, [r7, #7]
 8011f76:	b2db      	uxtb	r3, r3
 8011f78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011f7c:	2b80      	cmp	r3, #128	@ 0x80
 8011f7e:	d0f1      	beq.n	8011f64 <xPortStartScheduler+0xf0>
        }

        if( ulImplementedPrioBits == 8 )
 8011f80:	68bb      	ldr	r3, [r7, #8]
 8011f82:	2b08      	cmp	r3, #8
 8011f84:	d103      	bne.n	8011f8e <xPortStartScheduler+0x11a>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8011f86:	4b25      	ldr	r3, [pc, #148]	@ (801201c <xPortStartScheduler+0x1a8>)
 8011f88:	2200      	movs	r2, #0
 8011f8a:	601a      	str	r2, [r3, #0]
 8011f8c:	e004      	b.n	8011f98 <xPortStartScheduler+0x124>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8011f8e:	68bb      	ldr	r3, [r7, #8]
 8011f90:	f1c3 0307 	rsb	r3, r3, #7
 8011f94:	4a21      	ldr	r2, [pc, #132]	@ (801201c <xPortStartScheduler+0x1a8>)
 8011f96:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011f98:	4b20      	ldr	r3, [pc, #128]	@ (801201c <xPortStartScheduler+0x1a8>)
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	021b      	lsls	r3, r3, #8
 8011f9e:	4a1f      	ldr	r2, [pc, #124]	@ (801201c <xPortStartScheduler+0x1a8>)
 8011fa0:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011fa2:	4b1e      	ldr	r3, [pc, #120]	@ (801201c <xPortStartScheduler+0x1a8>)
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011faa:	4a1c      	ldr	r2, [pc, #112]	@ (801201c <xPortStartScheduler+0x1a8>)
 8011fac:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8011fae:	7bfb      	ldrb	r3, [r7, #15]
 8011fb0:	b2da      	uxtb	r2, r3
 8011fb2:	6a3b      	ldr	r3, [r7, #32]
 8011fb4:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8011fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8012020 <xPortStartScheduler+0x1ac>)
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	4a19      	ldr	r2, [pc, #100]	@ (8012020 <xPortStartScheduler+0x1ac>)
 8011fbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011fc0:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8011fc2:	4b17      	ldr	r3, [pc, #92]	@ (8012020 <xPortStartScheduler+0x1ac>)
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	4a16      	ldr	r2, [pc, #88]	@ (8012020 <xPortStartScheduler+0x1ac>)
 8011fc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011fcc:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8011fce:	4b15      	ldr	r3, [pc, #84]	@ (8012024 <xPortStartScheduler+0x1b0>)
 8011fd0:	2200      	movs	r2, #0
 8011fd2:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8011fd4:	f000 f8ec 	bl	80121b0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8011fd8:	4b13      	ldr	r3, [pc, #76]	@ (8012028 <xPortStartScheduler+0x1b4>)
 8011fda:	2200      	movs	r2, #0
 8011fdc:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8011fde:	f000 f90b 	bl	80121f8 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011fe2:	4b12      	ldr	r3, [pc, #72]	@ (801202c <xPortStartScheduler+0x1b8>)
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	4a11      	ldr	r2, [pc, #68]	@ (801202c <xPortStartScheduler+0x1b8>)
 8011fe8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8011fec:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8011fee:	f7ff ff2b 	bl	8011e48 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8011ff2:	f7fe fd01 	bl	80109f8 <vTaskSwitchContext>
    prvTaskExitError();
 8011ff6:	f7ff fedf 	bl	8011db8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8011ffa:	2300      	movs	r3, #0
}
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	3728      	adds	r7, #40	@ 0x28
 8012000:	46bd      	mov	sp, r7
 8012002:	bd80      	pop	{r7, pc}
 8012004:	e000ed08 	.word	0xe000ed08
 8012008:	08011e21 	.word	0x08011e21
 801200c:	08018ca4 	.word	0x08018ca4
 8012010:	08012101 	.word	0x08012101
 8012014:	e000e400 	.word	0xe000e400
 8012018:	20000668 	.word	0x20000668
 801201c:	2000066c 	.word	0x2000066c
 8012020:	e000ed20 	.word	0xe000ed20
 8012024:	e000ed1c 	.word	0xe000ed1c
 8012028:	20000058 	.word	0x20000058
 801202c:	e000ef34 	.word	0xe000ef34

08012030 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b082      	sub	sp, #8
 8012034:	af00      	add	r7, sp, #0
    __asm volatile
 8012036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801203a:	b672      	cpsid	i
 801203c:	f383 8811 	msr	BASEPRI, r3
 8012040:	f3bf 8f6f 	isb	sy
 8012044:	f3bf 8f4f 	dsb	sy
 8012048:	b662      	cpsie	i
 801204a:	607b      	str	r3, [r7, #4]
}
 801204c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 801204e:	4b11      	ldr	r3, [pc, #68]	@ (8012094 <vPortEnterCritical+0x64>)
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	3301      	adds	r3, #1
 8012054:	4a0f      	ldr	r2, [pc, #60]	@ (8012094 <vPortEnterCritical+0x64>)
 8012056:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8012058:	4b0e      	ldr	r3, [pc, #56]	@ (8012094 <vPortEnterCritical+0x64>)
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	2b01      	cmp	r3, #1
 801205e:	d115      	bne.n	801208c <vPortEnterCritical+0x5c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012060:	4b0d      	ldr	r3, [pc, #52]	@ (8012098 <vPortEnterCritical+0x68>)
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	b2db      	uxtb	r3, r3
 8012066:	2b00      	cmp	r3, #0
 8012068:	d010      	beq.n	801208c <vPortEnterCritical+0x5c>
    __asm volatile
 801206a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801206e:	b672      	cpsid	i
 8012070:	f383 8811 	msr	BASEPRI, r3
 8012074:	f3bf 8f6f 	isb	sy
 8012078:	f3bf 8f4f 	dsb	sy
 801207c:	b662      	cpsie	i
 801207e:	603b      	str	r3, [r7, #0]
}
 8012080:	bf00      	nop
 8012082:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 8012086:	4805      	ldr	r0, [pc, #20]	@ (801209c <vPortEnterCritical+0x6c>)
 8012088:	f7f4 fc1e 	bl	80068c8 <vAssertCalled>
    }
}
 801208c:	bf00      	nop
 801208e:	3708      	adds	r7, #8
 8012090:	46bd      	mov	sp, r7
 8012092:	bd80      	pop	{r7, pc}
 8012094:	20000058 	.word	0x20000058
 8012098:	e000ed04 	.word	0xe000ed04
 801209c:	08018ca4 	.word	0x08018ca4

080120a0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b082      	sub	sp, #8
 80120a4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80120a6:	4b14      	ldr	r3, [pc, #80]	@ (80120f8 <vPortExitCritical+0x58>)
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d110      	bne.n	80120d0 <vPortExitCritical+0x30>
    __asm volatile
 80120ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120b2:	b672      	cpsid	i
 80120b4:	f383 8811 	msr	BASEPRI, r3
 80120b8:	f3bf 8f6f 	isb	sy
 80120bc:	f3bf 8f4f 	dsb	sy
 80120c0:	b662      	cpsie	i
 80120c2:	607b      	str	r3, [r7, #4]
}
 80120c4:	bf00      	nop
 80120c6:	f240 11e3 	movw	r1, #483	@ 0x1e3
 80120ca:	480c      	ldr	r0, [pc, #48]	@ (80120fc <vPortExitCritical+0x5c>)
 80120cc:	f7f4 fbfc 	bl	80068c8 <vAssertCalled>
    uxCriticalNesting--;
 80120d0:	4b09      	ldr	r3, [pc, #36]	@ (80120f8 <vPortExitCritical+0x58>)
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	3b01      	subs	r3, #1
 80120d6:	4a08      	ldr	r2, [pc, #32]	@ (80120f8 <vPortExitCritical+0x58>)
 80120d8:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80120da:	4b07      	ldr	r3, [pc, #28]	@ (80120f8 <vPortExitCritical+0x58>)
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d105      	bne.n	80120ee <vPortExitCritical+0x4e>
 80120e2:	2300      	movs	r3, #0
 80120e4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80120e6:	683b      	ldr	r3, [r7, #0]
 80120e8:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 80120ec:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80120ee:	bf00      	nop
 80120f0:	3708      	adds	r7, #8
 80120f2:	46bd      	mov	sp, r7
 80120f4:	bd80      	pop	{r7, pc}
 80120f6:	bf00      	nop
 80120f8:	20000058 	.word	0x20000058
 80120fc:	08018ca4 	.word	0x08018ca4

08012100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8012100:	f3ef 8009 	mrs	r0, PSP
 8012104:	f3bf 8f6f 	isb	sy
 8012108:	4b15      	ldr	r3, [pc, #84]	@ (8012160 <pxCurrentTCBConst>)
 801210a:	681a      	ldr	r2, [r3, #0]
 801210c:	f01e 0f10 	tst.w	lr, #16
 8012110:	bf08      	it	eq
 8012112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801211a:	6010      	str	r0, [r2, #0]
 801211c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012120:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8012124:	b672      	cpsid	i
 8012126:	f380 8811 	msr	BASEPRI, r0
 801212a:	f3bf 8f4f 	dsb	sy
 801212e:	f3bf 8f6f 	isb	sy
 8012132:	b662      	cpsie	i
 8012134:	f7fe fc60 	bl	80109f8 <vTaskSwitchContext>
 8012138:	f04f 0000 	mov.w	r0, #0
 801213c:	f380 8811 	msr	BASEPRI, r0
 8012140:	bc09      	pop	{r0, r3}
 8012142:	6819      	ldr	r1, [r3, #0]
 8012144:	6808      	ldr	r0, [r1, #0]
 8012146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801214a:	f01e 0f10 	tst.w	lr, #16
 801214e:	bf08      	it	eq
 8012150:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012154:	f380 8809 	msr	PSP, r0
 8012158:	f3bf 8f6f 	isb	sy
 801215c:	4770      	bx	lr
 801215e:	bf00      	nop

08012160 <pxCurrentTCBConst>:
 8012160:	200004f8 	.word	0x200004f8
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8012164:	bf00      	nop
 8012166:	bf00      	nop

08012168 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012168:	b580      	push	{r7, lr}
 801216a:	b082      	sub	sp, #8
 801216c:	af00      	add	r7, sp, #0
    __asm volatile
 801216e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012172:	b672      	cpsid	i
 8012174:	f383 8811 	msr	BASEPRI, r3
 8012178:	f3bf 8f6f 	isb	sy
 801217c:	f3bf 8f4f 	dsb	sy
 8012180:	b662      	cpsie	i
 8012182:	607b      	str	r3, [r7, #4]
}
 8012184:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8012186:	f7fe fb17 	bl	80107b8 <xTaskIncrementTick>
 801218a:	4603      	mov	r3, r0
 801218c:	2b00      	cmp	r3, #0
 801218e:	d003      	beq.n	8012198 <xPortSysTickHandler+0x30>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012190:	4b06      	ldr	r3, [pc, #24]	@ (80121ac <xPortSysTickHandler+0x44>)
 8012192:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012196:	601a      	str	r2, [r3, #0]
 8012198:	2300      	movs	r3, #0
 801219a:	603b      	str	r3, [r7, #0]
    __asm volatile
 801219c:	683b      	ldr	r3, [r7, #0]
 801219e:	f383 8811 	msr	BASEPRI, r3
}
 80121a2:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 80121a4:	bf00      	nop
 80121a6:	3708      	adds	r7, #8
 80121a8:	46bd      	mov	sp, r7
 80121aa:	bd80      	pop	{r7, pc}
 80121ac:	e000ed04 	.word	0xe000ed04

080121b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80121b0:	b480      	push	{r7}
 80121b2:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80121b4:	4b0b      	ldr	r3, [pc, #44]	@ (80121e4 <vPortSetupTimerInterrupt+0x34>)
 80121b6:	2200      	movs	r2, #0
 80121b8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80121ba:	4b0b      	ldr	r3, [pc, #44]	@ (80121e8 <vPortSetupTimerInterrupt+0x38>)
 80121bc:	2200      	movs	r2, #0
 80121be:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80121c0:	4b0a      	ldr	r3, [pc, #40]	@ (80121ec <vPortSetupTimerInterrupt+0x3c>)
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	4a0a      	ldr	r2, [pc, #40]	@ (80121f0 <vPortSetupTimerInterrupt+0x40>)
 80121c6:	fba2 2303 	umull	r2, r3, r2, r3
 80121ca:	099b      	lsrs	r3, r3, #6
 80121cc:	4a09      	ldr	r2, [pc, #36]	@ (80121f4 <vPortSetupTimerInterrupt+0x44>)
 80121ce:	3b01      	subs	r3, #1
 80121d0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80121d2:	4b04      	ldr	r3, [pc, #16]	@ (80121e4 <vPortSetupTimerInterrupt+0x34>)
 80121d4:	2207      	movs	r2, #7
 80121d6:	601a      	str	r2, [r3, #0]
}
 80121d8:	bf00      	nop
 80121da:	46bd      	mov	sp, r7
 80121dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e0:	4770      	bx	lr
 80121e2:	bf00      	nop
 80121e4:	e000e010 	.word	0xe000e010
 80121e8:	e000e018 	.word	0xe000e018
 80121ec:	2000004c 	.word	0x2000004c
 80121f0:	10624dd3 	.word	0x10624dd3
 80121f4:	e000e014 	.word	0xe000e014

080121f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80121f8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8012208 <vPortEnableVFP+0x10>
 80121fc:	6801      	ldr	r1, [r0, #0]
 80121fe:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8012202:	6001      	str	r1, [r0, #0]
 8012204:	4770      	bx	lr
 8012206:	0000      	.short	0x0000
 8012208:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 801220c:	bf00      	nop
 801220e:	bf00      	nop

08012210 <__assert_func>:
 8012210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012212:	4614      	mov	r4, r2
 8012214:	461a      	mov	r2, r3
 8012216:	4b09      	ldr	r3, [pc, #36]	@ (801223c <__assert_func+0x2c>)
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	4605      	mov	r5, r0
 801221c:	68d8      	ldr	r0, [r3, #12]
 801221e:	b14c      	cbz	r4, 8012234 <__assert_func+0x24>
 8012220:	4b07      	ldr	r3, [pc, #28]	@ (8012240 <__assert_func+0x30>)
 8012222:	9100      	str	r1, [sp, #0]
 8012224:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012228:	4906      	ldr	r1, [pc, #24]	@ (8012244 <__assert_func+0x34>)
 801222a:	462b      	mov	r3, r5
 801222c:	f002 f8ea 	bl	8014404 <fiprintf>
 8012230:	f002 fcf8 	bl	8014c24 <abort>
 8012234:	4b04      	ldr	r3, [pc, #16]	@ (8012248 <__assert_func+0x38>)
 8012236:	461c      	mov	r4, r3
 8012238:	e7f3      	b.n	8012222 <__assert_func+0x12>
 801223a:	bf00      	nop
 801223c:	200001d4 	.word	0x200001d4
 8012240:	0801920c 	.word	0x0801920c
 8012244:	08019219 	.word	0x08019219
 8012248:	08019247 	.word	0x08019247

0801224c <atof>:
 801224c:	2100      	movs	r1, #0
 801224e:	f000 bf2d 	b.w	80130ac <strtod>

08012252 <atoi>:
 8012252:	220a      	movs	r2, #10
 8012254:	2100      	movs	r1, #0
 8012256:	f000 bfb1 	b.w	80131bc <strtol>
	...

0801225c <calloc>:
 801225c:	4b02      	ldr	r3, [pc, #8]	@ (8012268 <calloc+0xc>)
 801225e:	460a      	mov	r2, r1
 8012260:	4601      	mov	r1, r0
 8012262:	6818      	ldr	r0, [r3, #0]
 8012264:	f000 b802 	b.w	801226c <_calloc_r>
 8012268:	200001d4 	.word	0x200001d4

0801226c <_calloc_r>:
 801226c:	b570      	push	{r4, r5, r6, lr}
 801226e:	fba1 5402 	umull	r5, r4, r1, r2
 8012272:	b934      	cbnz	r4, 8012282 <_calloc_r+0x16>
 8012274:	4629      	mov	r1, r5
 8012276:	f000 f887 	bl	8012388 <_malloc_r>
 801227a:	4606      	mov	r6, r0
 801227c:	b928      	cbnz	r0, 801228a <_calloc_r+0x1e>
 801227e:	4630      	mov	r0, r6
 8012280:	bd70      	pop	{r4, r5, r6, pc}
 8012282:	220c      	movs	r2, #12
 8012284:	6002      	str	r2, [r0, #0]
 8012286:	2600      	movs	r6, #0
 8012288:	e7f9      	b.n	801227e <_calloc_r+0x12>
 801228a:	462a      	mov	r2, r5
 801228c:	4621      	mov	r1, r4
 801228e:	f002 fb47 	bl	8014920 <memset>
 8012292:	e7f4      	b.n	801227e <_calloc_r+0x12>

08012294 <getenv>:
 8012294:	b507      	push	{r0, r1, r2, lr}
 8012296:	4b04      	ldr	r3, [pc, #16]	@ (80122a8 <getenv+0x14>)
 8012298:	4601      	mov	r1, r0
 801229a:	aa01      	add	r2, sp, #4
 801229c:	6818      	ldr	r0, [r3, #0]
 801229e:	f000 f805 	bl	80122ac <_findenv_r>
 80122a2:	b003      	add	sp, #12
 80122a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80122a8:	200001d4 	.word	0x200001d4

080122ac <_findenv_r>:
 80122ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122b0:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8012320 <_findenv_r+0x74>
 80122b4:	4606      	mov	r6, r0
 80122b6:	4689      	mov	r9, r1
 80122b8:	4617      	mov	r7, r2
 80122ba:	f7f4 fe25 	bl	8006f08 <__env_lock>
 80122be:	f8da 4000 	ldr.w	r4, [sl]
 80122c2:	b134      	cbz	r4, 80122d2 <_findenv_r+0x26>
 80122c4:	464b      	mov	r3, r9
 80122c6:	4698      	mov	r8, r3
 80122c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122cc:	b13a      	cbz	r2, 80122de <_findenv_r+0x32>
 80122ce:	2a3d      	cmp	r2, #61	@ 0x3d
 80122d0:	d1f9      	bne.n	80122c6 <_findenv_r+0x1a>
 80122d2:	4630      	mov	r0, r6
 80122d4:	f7f4 fe50 	bl	8006f78 <__env_unlock>
 80122d8:	2000      	movs	r0, #0
 80122da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122de:	eba8 0809 	sub.w	r8, r8, r9
 80122e2:	46a3      	mov	fp, r4
 80122e4:	f854 0b04 	ldr.w	r0, [r4], #4
 80122e8:	2800      	cmp	r0, #0
 80122ea:	d0f2      	beq.n	80122d2 <_findenv_r+0x26>
 80122ec:	4642      	mov	r2, r8
 80122ee:	4649      	mov	r1, r9
 80122f0:	f002 fb2b 	bl	801494a <strncmp>
 80122f4:	2800      	cmp	r0, #0
 80122f6:	d1f4      	bne.n	80122e2 <_findenv_r+0x36>
 80122f8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80122fc:	eb03 0508 	add.w	r5, r3, r8
 8012300:	f813 3008 	ldrb.w	r3, [r3, r8]
 8012304:	2b3d      	cmp	r3, #61	@ 0x3d
 8012306:	d1ec      	bne.n	80122e2 <_findenv_r+0x36>
 8012308:	f8da 3000 	ldr.w	r3, [sl]
 801230c:	ebab 0303 	sub.w	r3, fp, r3
 8012310:	109b      	asrs	r3, r3, #2
 8012312:	4630      	mov	r0, r6
 8012314:	603b      	str	r3, [r7, #0]
 8012316:	f7f4 fe2f 	bl	8006f78 <__env_unlock>
 801231a:	1c68      	adds	r0, r5, #1
 801231c:	e7dd      	b.n	80122da <_findenv_r+0x2e>
 801231e:	bf00      	nop
 8012320:	20000044 	.word	0x20000044

08012324 <malloc>:
 8012324:	4b02      	ldr	r3, [pc, #8]	@ (8012330 <malloc+0xc>)
 8012326:	4601      	mov	r1, r0
 8012328:	6818      	ldr	r0, [r3, #0]
 801232a:	f000 b82d 	b.w	8012388 <_malloc_r>
 801232e:	bf00      	nop
 8012330:	200001d4 	.word	0x200001d4

08012334 <free>:
 8012334:	4b02      	ldr	r3, [pc, #8]	@ (8012340 <free+0xc>)
 8012336:	4601      	mov	r1, r0
 8012338:	6818      	ldr	r0, [r3, #0]
 801233a:	f003 bad5 	b.w	80158e8 <_free_r>
 801233e:	bf00      	nop
 8012340:	200001d4 	.word	0x200001d4

08012344 <sbrk_aligned>:
 8012344:	b570      	push	{r4, r5, r6, lr}
 8012346:	4e0f      	ldr	r6, [pc, #60]	@ (8012384 <sbrk_aligned+0x40>)
 8012348:	460c      	mov	r4, r1
 801234a:	6831      	ldr	r1, [r6, #0]
 801234c:	4605      	mov	r5, r0
 801234e:	b911      	cbnz	r1, 8012356 <sbrk_aligned+0x12>
 8012350:	f7f4 fd08 	bl	8006d64 <_sbrk_r>
 8012354:	6030      	str	r0, [r6, #0]
 8012356:	4621      	mov	r1, r4
 8012358:	4628      	mov	r0, r5
 801235a:	f7f4 fd03 	bl	8006d64 <_sbrk_r>
 801235e:	1c43      	adds	r3, r0, #1
 8012360:	d103      	bne.n	801236a <sbrk_aligned+0x26>
 8012362:	f04f 34ff 	mov.w	r4, #4294967295
 8012366:	4620      	mov	r0, r4
 8012368:	bd70      	pop	{r4, r5, r6, pc}
 801236a:	1cc4      	adds	r4, r0, #3
 801236c:	f024 0403 	bic.w	r4, r4, #3
 8012370:	42a0      	cmp	r0, r4
 8012372:	d0f8      	beq.n	8012366 <sbrk_aligned+0x22>
 8012374:	1a21      	subs	r1, r4, r0
 8012376:	4628      	mov	r0, r5
 8012378:	f7f4 fcf4 	bl	8006d64 <_sbrk_r>
 801237c:	3001      	adds	r0, #1
 801237e:	d1f2      	bne.n	8012366 <sbrk_aligned+0x22>
 8012380:	e7ef      	b.n	8012362 <sbrk_aligned+0x1e>
 8012382:	bf00      	nop
 8012384:	20000670 	.word	0x20000670

08012388 <_malloc_r>:
 8012388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801238c:	1ccd      	adds	r5, r1, #3
 801238e:	f025 0503 	bic.w	r5, r5, #3
 8012392:	3508      	adds	r5, #8
 8012394:	2d0c      	cmp	r5, #12
 8012396:	bf38      	it	cc
 8012398:	250c      	movcc	r5, #12
 801239a:	2d00      	cmp	r5, #0
 801239c:	4606      	mov	r6, r0
 801239e:	db01      	blt.n	80123a4 <_malloc_r+0x1c>
 80123a0:	42a9      	cmp	r1, r5
 80123a2:	d904      	bls.n	80123ae <_malloc_r+0x26>
 80123a4:	230c      	movs	r3, #12
 80123a6:	6033      	str	r3, [r6, #0]
 80123a8:	2000      	movs	r0, #0
 80123aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012484 <_malloc_r+0xfc>
 80123b2:	f7f4 fd5b 	bl	8006e6c <__malloc_lock>
 80123b6:	f8d8 3000 	ldr.w	r3, [r8]
 80123ba:	461c      	mov	r4, r3
 80123bc:	bb44      	cbnz	r4, 8012410 <_malloc_r+0x88>
 80123be:	4629      	mov	r1, r5
 80123c0:	4630      	mov	r0, r6
 80123c2:	f7ff ffbf 	bl	8012344 <sbrk_aligned>
 80123c6:	1c43      	adds	r3, r0, #1
 80123c8:	4604      	mov	r4, r0
 80123ca:	d158      	bne.n	801247e <_malloc_r+0xf6>
 80123cc:	f8d8 4000 	ldr.w	r4, [r8]
 80123d0:	4627      	mov	r7, r4
 80123d2:	2f00      	cmp	r7, #0
 80123d4:	d143      	bne.n	801245e <_malloc_r+0xd6>
 80123d6:	2c00      	cmp	r4, #0
 80123d8:	d04b      	beq.n	8012472 <_malloc_r+0xea>
 80123da:	6823      	ldr	r3, [r4, #0]
 80123dc:	4639      	mov	r1, r7
 80123de:	4630      	mov	r0, r6
 80123e0:	eb04 0903 	add.w	r9, r4, r3
 80123e4:	f7f4 fcbe 	bl	8006d64 <_sbrk_r>
 80123e8:	4581      	cmp	r9, r0
 80123ea:	d142      	bne.n	8012472 <_malloc_r+0xea>
 80123ec:	6821      	ldr	r1, [r4, #0]
 80123ee:	1a6d      	subs	r5, r5, r1
 80123f0:	4629      	mov	r1, r5
 80123f2:	4630      	mov	r0, r6
 80123f4:	f7ff ffa6 	bl	8012344 <sbrk_aligned>
 80123f8:	3001      	adds	r0, #1
 80123fa:	d03a      	beq.n	8012472 <_malloc_r+0xea>
 80123fc:	6823      	ldr	r3, [r4, #0]
 80123fe:	442b      	add	r3, r5
 8012400:	6023      	str	r3, [r4, #0]
 8012402:	f8d8 3000 	ldr.w	r3, [r8]
 8012406:	685a      	ldr	r2, [r3, #4]
 8012408:	bb62      	cbnz	r2, 8012464 <_malloc_r+0xdc>
 801240a:	f8c8 7000 	str.w	r7, [r8]
 801240e:	e00f      	b.n	8012430 <_malloc_r+0xa8>
 8012410:	6822      	ldr	r2, [r4, #0]
 8012412:	1b52      	subs	r2, r2, r5
 8012414:	d420      	bmi.n	8012458 <_malloc_r+0xd0>
 8012416:	2a0b      	cmp	r2, #11
 8012418:	d917      	bls.n	801244a <_malloc_r+0xc2>
 801241a:	1961      	adds	r1, r4, r5
 801241c:	42a3      	cmp	r3, r4
 801241e:	6025      	str	r5, [r4, #0]
 8012420:	bf18      	it	ne
 8012422:	6059      	strne	r1, [r3, #4]
 8012424:	6863      	ldr	r3, [r4, #4]
 8012426:	bf08      	it	eq
 8012428:	f8c8 1000 	streq.w	r1, [r8]
 801242c:	5162      	str	r2, [r4, r5]
 801242e:	604b      	str	r3, [r1, #4]
 8012430:	4630      	mov	r0, r6
 8012432:	f7f4 fd55 	bl	8006ee0 <__malloc_unlock>
 8012436:	f104 000b 	add.w	r0, r4, #11
 801243a:	1d23      	adds	r3, r4, #4
 801243c:	f020 0007 	bic.w	r0, r0, #7
 8012440:	1ac2      	subs	r2, r0, r3
 8012442:	bf1c      	itt	ne
 8012444:	1a1b      	subne	r3, r3, r0
 8012446:	50a3      	strne	r3, [r4, r2]
 8012448:	e7af      	b.n	80123aa <_malloc_r+0x22>
 801244a:	6862      	ldr	r2, [r4, #4]
 801244c:	42a3      	cmp	r3, r4
 801244e:	bf0c      	ite	eq
 8012450:	f8c8 2000 	streq.w	r2, [r8]
 8012454:	605a      	strne	r2, [r3, #4]
 8012456:	e7eb      	b.n	8012430 <_malloc_r+0xa8>
 8012458:	4623      	mov	r3, r4
 801245a:	6864      	ldr	r4, [r4, #4]
 801245c:	e7ae      	b.n	80123bc <_malloc_r+0x34>
 801245e:	463c      	mov	r4, r7
 8012460:	687f      	ldr	r7, [r7, #4]
 8012462:	e7b6      	b.n	80123d2 <_malloc_r+0x4a>
 8012464:	461a      	mov	r2, r3
 8012466:	685b      	ldr	r3, [r3, #4]
 8012468:	42a3      	cmp	r3, r4
 801246a:	d1fb      	bne.n	8012464 <_malloc_r+0xdc>
 801246c:	2300      	movs	r3, #0
 801246e:	6053      	str	r3, [r2, #4]
 8012470:	e7de      	b.n	8012430 <_malloc_r+0xa8>
 8012472:	230c      	movs	r3, #12
 8012474:	6033      	str	r3, [r6, #0]
 8012476:	4630      	mov	r0, r6
 8012478:	f7f4 fd32 	bl	8006ee0 <__malloc_unlock>
 801247c:	e794      	b.n	80123a8 <_malloc_r+0x20>
 801247e:	6005      	str	r5, [r0, #0]
 8012480:	e7d6      	b.n	8012430 <_malloc_r+0xa8>
 8012482:	bf00      	nop
 8012484:	20000674 	.word	0x20000674

08012488 <mallinfo>:
 8012488:	b510      	push	{r4, lr}
 801248a:	4b03      	ldr	r3, [pc, #12]	@ (8012498 <mallinfo+0x10>)
 801248c:	4604      	mov	r4, r0
 801248e:	6819      	ldr	r1, [r3, #0]
 8012490:	f003 fdae 	bl	8015ff0 <_mallinfo_r>
 8012494:	4620      	mov	r0, r4
 8012496:	bd10      	pop	{r4, pc}
 8012498:	200001d4 	.word	0x200001d4

0801249c <sulp>:
 801249c:	b570      	push	{r4, r5, r6, lr}
 801249e:	4604      	mov	r4, r0
 80124a0:	460d      	mov	r5, r1
 80124a2:	ec45 4b10 	vmov	d0, r4, r5
 80124a6:	4616      	mov	r6, r2
 80124a8:	f004 f954 	bl	8016754 <__ulp>
 80124ac:	ec51 0b10 	vmov	r0, r1, d0
 80124b0:	b17e      	cbz	r6, 80124d2 <sulp+0x36>
 80124b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80124b6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	dd09      	ble.n	80124d2 <sulp+0x36>
 80124be:	051b      	lsls	r3, r3, #20
 80124c0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80124c4:	2400      	movs	r4, #0
 80124c6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80124ca:	4622      	mov	r2, r4
 80124cc:	462b      	mov	r3, r5
 80124ce:	f7ee f8c3 	bl	8000658 <__aeabi_dmul>
 80124d2:	ec41 0b10 	vmov	d0, r0, r1
 80124d6:	bd70      	pop	{r4, r5, r6, pc}

080124d8 <_strtod_l>:
 80124d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124dc:	b09f      	sub	sp, #124	@ 0x7c
 80124de:	460c      	mov	r4, r1
 80124e0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80124e2:	2200      	movs	r2, #0
 80124e4:	921a      	str	r2, [sp, #104]	@ 0x68
 80124e6:	9005      	str	r0, [sp, #20]
 80124e8:	f04f 0a00 	mov.w	sl, #0
 80124ec:	f04f 0b00 	mov.w	fp, #0
 80124f0:	460a      	mov	r2, r1
 80124f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80124f4:	7811      	ldrb	r1, [r2, #0]
 80124f6:	292b      	cmp	r1, #43	@ 0x2b
 80124f8:	d04a      	beq.n	8012590 <_strtod_l+0xb8>
 80124fa:	d838      	bhi.n	801256e <_strtod_l+0x96>
 80124fc:	290d      	cmp	r1, #13
 80124fe:	d832      	bhi.n	8012566 <_strtod_l+0x8e>
 8012500:	2908      	cmp	r1, #8
 8012502:	d832      	bhi.n	801256a <_strtod_l+0x92>
 8012504:	2900      	cmp	r1, #0
 8012506:	d03b      	beq.n	8012580 <_strtod_l+0xa8>
 8012508:	2200      	movs	r2, #0
 801250a:	920e      	str	r2, [sp, #56]	@ 0x38
 801250c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801250e:	782a      	ldrb	r2, [r5, #0]
 8012510:	2a30      	cmp	r2, #48	@ 0x30
 8012512:	f040 80b2 	bne.w	801267a <_strtod_l+0x1a2>
 8012516:	786a      	ldrb	r2, [r5, #1]
 8012518:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801251c:	2a58      	cmp	r2, #88	@ 0x58
 801251e:	d16e      	bne.n	80125fe <_strtod_l+0x126>
 8012520:	9302      	str	r3, [sp, #8]
 8012522:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012524:	9301      	str	r3, [sp, #4]
 8012526:	ab1a      	add	r3, sp, #104	@ 0x68
 8012528:	9300      	str	r3, [sp, #0]
 801252a:	4a8f      	ldr	r2, [pc, #572]	@ (8012768 <_strtod_l+0x290>)
 801252c:	9805      	ldr	r0, [sp, #20]
 801252e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8012530:	a919      	add	r1, sp, #100	@ 0x64
 8012532:	f003 fa8b 	bl	8015a4c <__gethex>
 8012536:	f010 060f 	ands.w	r6, r0, #15
 801253a:	4604      	mov	r4, r0
 801253c:	d005      	beq.n	801254a <_strtod_l+0x72>
 801253e:	2e06      	cmp	r6, #6
 8012540:	d128      	bne.n	8012594 <_strtod_l+0xbc>
 8012542:	3501      	adds	r5, #1
 8012544:	2300      	movs	r3, #0
 8012546:	9519      	str	r5, [sp, #100]	@ 0x64
 8012548:	930e      	str	r3, [sp, #56]	@ 0x38
 801254a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801254c:	2b00      	cmp	r3, #0
 801254e:	f040 858e 	bne.w	801306e <_strtod_l+0xb96>
 8012552:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012554:	b1cb      	cbz	r3, 801258a <_strtod_l+0xb2>
 8012556:	4652      	mov	r2, sl
 8012558:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801255c:	ec43 2b10 	vmov	d0, r2, r3
 8012560:	b01f      	add	sp, #124	@ 0x7c
 8012562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012566:	2920      	cmp	r1, #32
 8012568:	d1ce      	bne.n	8012508 <_strtod_l+0x30>
 801256a:	3201      	adds	r2, #1
 801256c:	e7c1      	b.n	80124f2 <_strtod_l+0x1a>
 801256e:	292d      	cmp	r1, #45	@ 0x2d
 8012570:	d1ca      	bne.n	8012508 <_strtod_l+0x30>
 8012572:	2101      	movs	r1, #1
 8012574:	910e      	str	r1, [sp, #56]	@ 0x38
 8012576:	1c51      	adds	r1, r2, #1
 8012578:	9119      	str	r1, [sp, #100]	@ 0x64
 801257a:	7852      	ldrb	r2, [r2, #1]
 801257c:	2a00      	cmp	r2, #0
 801257e:	d1c5      	bne.n	801250c <_strtod_l+0x34>
 8012580:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012582:	9419      	str	r4, [sp, #100]	@ 0x64
 8012584:	2b00      	cmp	r3, #0
 8012586:	f040 8570 	bne.w	801306a <_strtod_l+0xb92>
 801258a:	4652      	mov	r2, sl
 801258c:	465b      	mov	r3, fp
 801258e:	e7e5      	b.n	801255c <_strtod_l+0x84>
 8012590:	2100      	movs	r1, #0
 8012592:	e7ef      	b.n	8012574 <_strtod_l+0x9c>
 8012594:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012596:	b13a      	cbz	r2, 80125a8 <_strtod_l+0xd0>
 8012598:	2135      	movs	r1, #53	@ 0x35
 801259a:	a81c      	add	r0, sp, #112	@ 0x70
 801259c:	f004 f9d4 	bl	8016948 <__copybits>
 80125a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80125a2:	9805      	ldr	r0, [sp, #20]
 80125a4:	f003 fdaa 	bl	80160fc <_Bfree>
 80125a8:	3e01      	subs	r6, #1
 80125aa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80125ac:	2e04      	cmp	r6, #4
 80125ae:	d806      	bhi.n	80125be <_strtod_l+0xe6>
 80125b0:	e8df f006 	tbb	[pc, r6]
 80125b4:	201d0314 	.word	0x201d0314
 80125b8:	14          	.byte	0x14
 80125b9:	00          	.byte	0x00
 80125ba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80125be:	05e1      	lsls	r1, r4, #23
 80125c0:	bf48      	it	mi
 80125c2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80125c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80125ca:	0d1b      	lsrs	r3, r3, #20
 80125cc:	051b      	lsls	r3, r3, #20
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d1bb      	bne.n	801254a <_strtod_l+0x72>
 80125d2:	f002 fadd 	bl	8014b90 <__errno>
 80125d6:	2322      	movs	r3, #34	@ 0x22
 80125d8:	6003      	str	r3, [r0, #0]
 80125da:	e7b6      	b.n	801254a <_strtod_l+0x72>
 80125dc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80125e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80125e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80125e8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80125ec:	e7e7      	b.n	80125be <_strtod_l+0xe6>
 80125ee:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8012770 <_strtod_l+0x298>
 80125f2:	e7e4      	b.n	80125be <_strtod_l+0xe6>
 80125f4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80125f8:	f04f 3aff 	mov.w	sl, #4294967295
 80125fc:	e7df      	b.n	80125be <_strtod_l+0xe6>
 80125fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012600:	1c5a      	adds	r2, r3, #1
 8012602:	9219      	str	r2, [sp, #100]	@ 0x64
 8012604:	785b      	ldrb	r3, [r3, #1]
 8012606:	2b30      	cmp	r3, #48	@ 0x30
 8012608:	d0f9      	beq.n	80125fe <_strtod_l+0x126>
 801260a:	2b00      	cmp	r3, #0
 801260c:	d09d      	beq.n	801254a <_strtod_l+0x72>
 801260e:	2301      	movs	r3, #1
 8012610:	2700      	movs	r7, #0
 8012612:	9308      	str	r3, [sp, #32]
 8012614:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012616:	930c      	str	r3, [sp, #48]	@ 0x30
 8012618:	970b      	str	r7, [sp, #44]	@ 0x2c
 801261a:	46b9      	mov	r9, r7
 801261c:	220a      	movs	r2, #10
 801261e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8012620:	7805      	ldrb	r5, [r0, #0]
 8012622:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8012626:	b2d9      	uxtb	r1, r3
 8012628:	2909      	cmp	r1, #9
 801262a:	d928      	bls.n	801267e <_strtod_l+0x1a6>
 801262c:	494f      	ldr	r1, [pc, #316]	@ (801276c <_strtod_l+0x294>)
 801262e:	2201      	movs	r2, #1
 8012630:	f002 f98b 	bl	801494a <strncmp>
 8012634:	2800      	cmp	r0, #0
 8012636:	d032      	beq.n	801269e <_strtod_l+0x1c6>
 8012638:	2000      	movs	r0, #0
 801263a:	462a      	mov	r2, r5
 801263c:	900a      	str	r0, [sp, #40]	@ 0x28
 801263e:	464d      	mov	r5, r9
 8012640:	4603      	mov	r3, r0
 8012642:	2a65      	cmp	r2, #101	@ 0x65
 8012644:	d001      	beq.n	801264a <_strtod_l+0x172>
 8012646:	2a45      	cmp	r2, #69	@ 0x45
 8012648:	d114      	bne.n	8012674 <_strtod_l+0x19c>
 801264a:	b91d      	cbnz	r5, 8012654 <_strtod_l+0x17c>
 801264c:	9a08      	ldr	r2, [sp, #32]
 801264e:	4302      	orrs	r2, r0
 8012650:	d096      	beq.n	8012580 <_strtod_l+0xa8>
 8012652:	2500      	movs	r5, #0
 8012654:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8012656:	1c62      	adds	r2, r4, #1
 8012658:	9219      	str	r2, [sp, #100]	@ 0x64
 801265a:	7862      	ldrb	r2, [r4, #1]
 801265c:	2a2b      	cmp	r2, #43	@ 0x2b
 801265e:	d07a      	beq.n	8012756 <_strtod_l+0x27e>
 8012660:	2a2d      	cmp	r2, #45	@ 0x2d
 8012662:	d07e      	beq.n	8012762 <_strtod_l+0x28a>
 8012664:	f04f 0c00 	mov.w	ip, #0
 8012668:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801266c:	2909      	cmp	r1, #9
 801266e:	f240 8085 	bls.w	801277c <_strtod_l+0x2a4>
 8012672:	9419      	str	r4, [sp, #100]	@ 0x64
 8012674:	f04f 0800 	mov.w	r8, #0
 8012678:	e0a5      	b.n	80127c6 <_strtod_l+0x2ee>
 801267a:	2300      	movs	r3, #0
 801267c:	e7c8      	b.n	8012610 <_strtod_l+0x138>
 801267e:	f1b9 0f08 	cmp.w	r9, #8
 8012682:	bfd8      	it	le
 8012684:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8012686:	f100 0001 	add.w	r0, r0, #1
 801268a:	bfda      	itte	le
 801268c:	fb02 3301 	mlale	r3, r2, r1, r3
 8012690:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8012692:	fb02 3707 	mlagt	r7, r2, r7, r3
 8012696:	f109 0901 	add.w	r9, r9, #1
 801269a:	9019      	str	r0, [sp, #100]	@ 0x64
 801269c:	e7bf      	b.n	801261e <_strtod_l+0x146>
 801269e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80126a0:	1c5a      	adds	r2, r3, #1
 80126a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80126a4:	785a      	ldrb	r2, [r3, #1]
 80126a6:	f1b9 0f00 	cmp.w	r9, #0
 80126aa:	d03b      	beq.n	8012724 <_strtod_l+0x24c>
 80126ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80126ae:	464d      	mov	r5, r9
 80126b0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80126b4:	2b09      	cmp	r3, #9
 80126b6:	d912      	bls.n	80126de <_strtod_l+0x206>
 80126b8:	2301      	movs	r3, #1
 80126ba:	e7c2      	b.n	8012642 <_strtod_l+0x16a>
 80126bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80126be:	1c5a      	adds	r2, r3, #1
 80126c0:	9219      	str	r2, [sp, #100]	@ 0x64
 80126c2:	785a      	ldrb	r2, [r3, #1]
 80126c4:	3001      	adds	r0, #1
 80126c6:	2a30      	cmp	r2, #48	@ 0x30
 80126c8:	d0f8      	beq.n	80126bc <_strtod_l+0x1e4>
 80126ca:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80126ce:	2b08      	cmp	r3, #8
 80126d0:	f200 84d2 	bhi.w	8013078 <_strtod_l+0xba0>
 80126d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80126d6:	900a      	str	r0, [sp, #40]	@ 0x28
 80126d8:	2000      	movs	r0, #0
 80126da:	930c      	str	r3, [sp, #48]	@ 0x30
 80126dc:	4605      	mov	r5, r0
 80126de:	3a30      	subs	r2, #48	@ 0x30
 80126e0:	f100 0301 	add.w	r3, r0, #1
 80126e4:	d018      	beq.n	8012718 <_strtod_l+0x240>
 80126e6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80126e8:	4419      	add	r1, r3
 80126ea:	910a      	str	r1, [sp, #40]	@ 0x28
 80126ec:	462e      	mov	r6, r5
 80126ee:	f04f 0e0a 	mov.w	lr, #10
 80126f2:	1c71      	adds	r1, r6, #1
 80126f4:	eba1 0c05 	sub.w	ip, r1, r5
 80126f8:	4563      	cmp	r3, ip
 80126fa:	dc15      	bgt.n	8012728 <_strtod_l+0x250>
 80126fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8012700:	182b      	adds	r3, r5, r0
 8012702:	2b08      	cmp	r3, #8
 8012704:	f105 0501 	add.w	r5, r5, #1
 8012708:	4405      	add	r5, r0
 801270a:	dc1a      	bgt.n	8012742 <_strtod_l+0x26a>
 801270c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801270e:	230a      	movs	r3, #10
 8012710:	fb03 2301 	mla	r3, r3, r1, r2
 8012714:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012716:	2300      	movs	r3, #0
 8012718:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801271a:	1c51      	adds	r1, r2, #1
 801271c:	9119      	str	r1, [sp, #100]	@ 0x64
 801271e:	7852      	ldrb	r2, [r2, #1]
 8012720:	4618      	mov	r0, r3
 8012722:	e7c5      	b.n	80126b0 <_strtod_l+0x1d8>
 8012724:	4648      	mov	r0, r9
 8012726:	e7ce      	b.n	80126c6 <_strtod_l+0x1ee>
 8012728:	2e08      	cmp	r6, #8
 801272a:	dc05      	bgt.n	8012738 <_strtod_l+0x260>
 801272c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801272e:	fb0e f606 	mul.w	r6, lr, r6
 8012732:	960b      	str	r6, [sp, #44]	@ 0x2c
 8012734:	460e      	mov	r6, r1
 8012736:	e7dc      	b.n	80126f2 <_strtod_l+0x21a>
 8012738:	2910      	cmp	r1, #16
 801273a:	bfd8      	it	le
 801273c:	fb0e f707 	mulle.w	r7, lr, r7
 8012740:	e7f8      	b.n	8012734 <_strtod_l+0x25c>
 8012742:	2b0f      	cmp	r3, #15
 8012744:	bfdc      	itt	le
 8012746:	230a      	movle	r3, #10
 8012748:	fb03 2707 	mlale	r7, r3, r7, r2
 801274c:	e7e3      	b.n	8012716 <_strtod_l+0x23e>
 801274e:	2300      	movs	r3, #0
 8012750:	930a      	str	r3, [sp, #40]	@ 0x28
 8012752:	2301      	movs	r3, #1
 8012754:	e77a      	b.n	801264c <_strtod_l+0x174>
 8012756:	f04f 0c00 	mov.w	ip, #0
 801275a:	1ca2      	adds	r2, r4, #2
 801275c:	9219      	str	r2, [sp, #100]	@ 0x64
 801275e:	78a2      	ldrb	r2, [r4, #2]
 8012760:	e782      	b.n	8012668 <_strtod_l+0x190>
 8012762:	f04f 0c01 	mov.w	ip, #1
 8012766:	e7f8      	b.n	801275a <_strtod_l+0x282>
 8012768:	08019450 	.word	0x08019450
 801276c:	08019248 	.word	0x08019248
 8012770:	7ff00000 	.word	0x7ff00000
 8012774:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012776:	1c51      	adds	r1, r2, #1
 8012778:	9119      	str	r1, [sp, #100]	@ 0x64
 801277a:	7852      	ldrb	r2, [r2, #1]
 801277c:	2a30      	cmp	r2, #48	@ 0x30
 801277e:	d0f9      	beq.n	8012774 <_strtod_l+0x29c>
 8012780:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8012784:	2908      	cmp	r1, #8
 8012786:	f63f af75 	bhi.w	8012674 <_strtod_l+0x19c>
 801278a:	3a30      	subs	r2, #48	@ 0x30
 801278c:	9209      	str	r2, [sp, #36]	@ 0x24
 801278e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012790:	920f      	str	r2, [sp, #60]	@ 0x3c
 8012792:	f04f 080a 	mov.w	r8, #10
 8012796:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012798:	1c56      	adds	r6, r2, #1
 801279a:	9619      	str	r6, [sp, #100]	@ 0x64
 801279c:	7852      	ldrb	r2, [r2, #1]
 801279e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80127a2:	f1be 0f09 	cmp.w	lr, #9
 80127a6:	d939      	bls.n	801281c <_strtod_l+0x344>
 80127a8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80127aa:	1a76      	subs	r6, r6, r1
 80127ac:	2e08      	cmp	r6, #8
 80127ae:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80127b2:	dc03      	bgt.n	80127bc <_strtod_l+0x2e4>
 80127b4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80127b6:	4588      	cmp	r8, r1
 80127b8:	bfa8      	it	ge
 80127ba:	4688      	movge	r8, r1
 80127bc:	f1bc 0f00 	cmp.w	ip, #0
 80127c0:	d001      	beq.n	80127c6 <_strtod_l+0x2ee>
 80127c2:	f1c8 0800 	rsb	r8, r8, #0
 80127c6:	2d00      	cmp	r5, #0
 80127c8:	d14e      	bne.n	8012868 <_strtod_l+0x390>
 80127ca:	9908      	ldr	r1, [sp, #32]
 80127cc:	4308      	orrs	r0, r1
 80127ce:	f47f aebc 	bne.w	801254a <_strtod_l+0x72>
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	f47f aed4 	bne.w	8012580 <_strtod_l+0xa8>
 80127d8:	2a69      	cmp	r2, #105	@ 0x69
 80127da:	d028      	beq.n	801282e <_strtod_l+0x356>
 80127dc:	dc25      	bgt.n	801282a <_strtod_l+0x352>
 80127de:	2a49      	cmp	r2, #73	@ 0x49
 80127e0:	d025      	beq.n	801282e <_strtod_l+0x356>
 80127e2:	2a4e      	cmp	r2, #78	@ 0x4e
 80127e4:	f47f aecc 	bne.w	8012580 <_strtod_l+0xa8>
 80127e8:	499a      	ldr	r1, [pc, #616]	@ (8012a54 <_strtod_l+0x57c>)
 80127ea:	a819      	add	r0, sp, #100	@ 0x64
 80127ec:	f003 fb50 	bl	8015e90 <__match>
 80127f0:	2800      	cmp	r0, #0
 80127f2:	f43f aec5 	beq.w	8012580 <_strtod_l+0xa8>
 80127f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80127f8:	781b      	ldrb	r3, [r3, #0]
 80127fa:	2b28      	cmp	r3, #40	@ 0x28
 80127fc:	d12e      	bne.n	801285c <_strtod_l+0x384>
 80127fe:	4996      	ldr	r1, [pc, #600]	@ (8012a58 <_strtod_l+0x580>)
 8012800:	aa1c      	add	r2, sp, #112	@ 0x70
 8012802:	a819      	add	r0, sp, #100	@ 0x64
 8012804:	f003 fb58 	bl	8015eb8 <__hexnan>
 8012808:	2805      	cmp	r0, #5
 801280a:	d127      	bne.n	801285c <_strtod_l+0x384>
 801280c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801280e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8012812:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8012816:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801281a:	e696      	b.n	801254a <_strtod_l+0x72>
 801281c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801281e:	fb08 2101 	mla	r1, r8, r1, r2
 8012822:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8012826:	9209      	str	r2, [sp, #36]	@ 0x24
 8012828:	e7b5      	b.n	8012796 <_strtod_l+0x2be>
 801282a:	2a6e      	cmp	r2, #110	@ 0x6e
 801282c:	e7da      	b.n	80127e4 <_strtod_l+0x30c>
 801282e:	498b      	ldr	r1, [pc, #556]	@ (8012a5c <_strtod_l+0x584>)
 8012830:	a819      	add	r0, sp, #100	@ 0x64
 8012832:	f003 fb2d 	bl	8015e90 <__match>
 8012836:	2800      	cmp	r0, #0
 8012838:	f43f aea2 	beq.w	8012580 <_strtod_l+0xa8>
 801283c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801283e:	4988      	ldr	r1, [pc, #544]	@ (8012a60 <_strtod_l+0x588>)
 8012840:	3b01      	subs	r3, #1
 8012842:	a819      	add	r0, sp, #100	@ 0x64
 8012844:	9319      	str	r3, [sp, #100]	@ 0x64
 8012846:	f003 fb23 	bl	8015e90 <__match>
 801284a:	b910      	cbnz	r0, 8012852 <_strtod_l+0x37a>
 801284c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801284e:	3301      	adds	r3, #1
 8012850:	9319      	str	r3, [sp, #100]	@ 0x64
 8012852:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8012a70 <_strtod_l+0x598>
 8012856:	f04f 0a00 	mov.w	sl, #0
 801285a:	e676      	b.n	801254a <_strtod_l+0x72>
 801285c:	4881      	ldr	r0, [pc, #516]	@ (8012a64 <_strtod_l+0x58c>)
 801285e:	f002 f9d3 	bl	8014c08 <nan>
 8012862:	ec5b ab10 	vmov	sl, fp, d0
 8012866:	e670      	b.n	801254a <_strtod_l+0x72>
 8012868:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801286a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801286c:	eba8 0303 	sub.w	r3, r8, r3
 8012870:	f1b9 0f00 	cmp.w	r9, #0
 8012874:	bf08      	it	eq
 8012876:	46a9      	moveq	r9, r5
 8012878:	2d10      	cmp	r5, #16
 801287a:	9309      	str	r3, [sp, #36]	@ 0x24
 801287c:	462c      	mov	r4, r5
 801287e:	bfa8      	it	ge
 8012880:	2410      	movge	r4, #16
 8012882:	f7ed fe6f 	bl	8000564 <__aeabi_ui2d>
 8012886:	2d09      	cmp	r5, #9
 8012888:	4682      	mov	sl, r0
 801288a:	468b      	mov	fp, r1
 801288c:	dc13      	bgt.n	80128b6 <_strtod_l+0x3de>
 801288e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012890:	2b00      	cmp	r3, #0
 8012892:	f43f ae5a 	beq.w	801254a <_strtod_l+0x72>
 8012896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012898:	dd78      	ble.n	801298c <_strtod_l+0x4b4>
 801289a:	2b16      	cmp	r3, #22
 801289c:	dc5f      	bgt.n	801295e <_strtod_l+0x486>
 801289e:	4972      	ldr	r1, [pc, #456]	@ (8012a68 <_strtod_l+0x590>)
 80128a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80128a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80128a8:	4652      	mov	r2, sl
 80128aa:	465b      	mov	r3, fp
 80128ac:	f7ed fed4 	bl	8000658 <__aeabi_dmul>
 80128b0:	4682      	mov	sl, r0
 80128b2:	468b      	mov	fp, r1
 80128b4:	e649      	b.n	801254a <_strtod_l+0x72>
 80128b6:	4b6c      	ldr	r3, [pc, #432]	@ (8012a68 <_strtod_l+0x590>)
 80128b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80128bc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80128c0:	f7ed feca 	bl	8000658 <__aeabi_dmul>
 80128c4:	4682      	mov	sl, r0
 80128c6:	4638      	mov	r0, r7
 80128c8:	468b      	mov	fp, r1
 80128ca:	f7ed fe4b 	bl	8000564 <__aeabi_ui2d>
 80128ce:	4602      	mov	r2, r0
 80128d0:	460b      	mov	r3, r1
 80128d2:	4650      	mov	r0, sl
 80128d4:	4659      	mov	r1, fp
 80128d6:	f7ed fd09 	bl	80002ec <__adddf3>
 80128da:	2d0f      	cmp	r5, #15
 80128dc:	4682      	mov	sl, r0
 80128de:	468b      	mov	fp, r1
 80128e0:	ddd5      	ble.n	801288e <_strtod_l+0x3b6>
 80128e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128e4:	1b2c      	subs	r4, r5, r4
 80128e6:	441c      	add	r4, r3
 80128e8:	2c00      	cmp	r4, #0
 80128ea:	f340 8093 	ble.w	8012a14 <_strtod_l+0x53c>
 80128ee:	f014 030f 	ands.w	r3, r4, #15
 80128f2:	d00a      	beq.n	801290a <_strtod_l+0x432>
 80128f4:	495c      	ldr	r1, [pc, #368]	@ (8012a68 <_strtod_l+0x590>)
 80128f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80128fa:	4652      	mov	r2, sl
 80128fc:	465b      	mov	r3, fp
 80128fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012902:	f7ed fea9 	bl	8000658 <__aeabi_dmul>
 8012906:	4682      	mov	sl, r0
 8012908:	468b      	mov	fp, r1
 801290a:	f034 040f 	bics.w	r4, r4, #15
 801290e:	d073      	beq.n	80129f8 <_strtod_l+0x520>
 8012910:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8012914:	dd49      	ble.n	80129aa <_strtod_l+0x4d2>
 8012916:	2400      	movs	r4, #0
 8012918:	46a0      	mov	r8, r4
 801291a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801291c:	46a1      	mov	r9, r4
 801291e:	9a05      	ldr	r2, [sp, #20]
 8012920:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8012a70 <_strtod_l+0x598>
 8012924:	2322      	movs	r3, #34	@ 0x22
 8012926:	6013      	str	r3, [r2, #0]
 8012928:	f04f 0a00 	mov.w	sl, #0
 801292c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801292e:	2b00      	cmp	r3, #0
 8012930:	f43f ae0b 	beq.w	801254a <_strtod_l+0x72>
 8012934:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012936:	9805      	ldr	r0, [sp, #20]
 8012938:	f003 fbe0 	bl	80160fc <_Bfree>
 801293c:	9805      	ldr	r0, [sp, #20]
 801293e:	4649      	mov	r1, r9
 8012940:	f003 fbdc 	bl	80160fc <_Bfree>
 8012944:	9805      	ldr	r0, [sp, #20]
 8012946:	4641      	mov	r1, r8
 8012948:	f003 fbd8 	bl	80160fc <_Bfree>
 801294c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801294e:	9805      	ldr	r0, [sp, #20]
 8012950:	f003 fbd4 	bl	80160fc <_Bfree>
 8012954:	9805      	ldr	r0, [sp, #20]
 8012956:	4621      	mov	r1, r4
 8012958:	f003 fbd0 	bl	80160fc <_Bfree>
 801295c:	e5f5      	b.n	801254a <_strtod_l+0x72>
 801295e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012960:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8012964:	4293      	cmp	r3, r2
 8012966:	dbbc      	blt.n	80128e2 <_strtod_l+0x40a>
 8012968:	4c3f      	ldr	r4, [pc, #252]	@ (8012a68 <_strtod_l+0x590>)
 801296a:	f1c5 050f 	rsb	r5, r5, #15
 801296e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8012972:	4652      	mov	r2, sl
 8012974:	465b      	mov	r3, fp
 8012976:	e9d1 0100 	ldrd	r0, r1, [r1]
 801297a:	f7ed fe6d 	bl	8000658 <__aeabi_dmul>
 801297e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012980:	1b5d      	subs	r5, r3, r5
 8012982:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8012986:	e9d4 2300 	ldrd	r2, r3, [r4]
 801298a:	e78f      	b.n	80128ac <_strtod_l+0x3d4>
 801298c:	3316      	adds	r3, #22
 801298e:	dba8      	blt.n	80128e2 <_strtod_l+0x40a>
 8012990:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012992:	eba3 0808 	sub.w	r8, r3, r8
 8012996:	4b34      	ldr	r3, [pc, #208]	@ (8012a68 <_strtod_l+0x590>)
 8012998:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801299c:	e9d8 2300 	ldrd	r2, r3, [r8]
 80129a0:	4650      	mov	r0, sl
 80129a2:	4659      	mov	r1, fp
 80129a4:	f7ed ff82 	bl	80008ac <__aeabi_ddiv>
 80129a8:	e782      	b.n	80128b0 <_strtod_l+0x3d8>
 80129aa:	2300      	movs	r3, #0
 80129ac:	4f2f      	ldr	r7, [pc, #188]	@ (8012a6c <_strtod_l+0x594>)
 80129ae:	1124      	asrs	r4, r4, #4
 80129b0:	4650      	mov	r0, sl
 80129b2:	4659      	mov	r1, fp
 80129b4:	461e      	mov	r6, r3
 80129b6:	2c01      	cmp	r4, #1
 80129b8:	dc21      	bgt.n	80129fe <_strtod_l+0x526>
 80129ba:	b10b      	cbz	r3, 80129c0 <_strtod_l+0x4e8>
 80129bc:	4682      	mov	sl, r0
 80129be:	468b      	mov	fp, r1
 80129c0:	492a      	ldr	r1, [pc, #168]	@ (8012a6c <_strtod_l+0x594>)
 80129c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80129c6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80129ca:	4652      	mov	r2, sl
 80129cc:	465b      	mov	r3, fp
 80129ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80129d2:	f7ed fe41 	bl	8000658 <__aeabi_dmul>
 80129d6:	4b26      	ldr	r3, [pc, #152]	@ (8012a70 <_strtod_l+0x598>)
 80129d8:	460a      	mov	r2, r1
 80129da:	400b      	ands	r3, r1
 80129dc:	4925      	ldr	r1, [pc, #148]	@ (8012a74 <_strtod_l+0x59c>)
 80129de:	428b      	cmp	r3, r1
 80129e0:	4682      	mov	sl, r0
 80129e2:	d898      	bhi.n	8012916 <_strtod_l+0x43e>
 80129e4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80129e8:	428b      	cmp	r3, r1
 80129ea:	bf86      	itte	hi
 80129ec:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8012a78 <_strtod_l+0x5a0>
 80129f0:	f04f 3aff 	movhi.w	sl, #4294967295
 80129f4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80129f8:	2300      	movs	r3, #0
 80129fa:	9308      	str	r3, [sp, #32]
 80129fc:	e076      	b.n	8012aec <_strtod_l+0x614>
 80129fe:	07e2      	lsls	r2, r4, #31
 8012a00:	d504      	bpl.n	8012a0c <_strtod_l+0x534>
 8012a02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012a06:	f7ed fe27 	bl	8000658 <__aeabi_dmul>
 8012a0a:	2301      	movs	r3, #1
 8012a0c:	3601      	adds	r6, #1
 8012a0e:	1064      	asrs	r4, r4, #1
 8012a10:	3708      	adds	r7, #8
 8012a12:	e7d0      	b.n	80129b6 <_strtod_l+0x4de>
 8012a14:	d0f0      	beq.n	80129f8 <_strtod_l+0x520>
 8012a16:	4264      	negs	r4, r4
 8012a18:	f014 020f 	ands.w	r2, r4, #15
 8012a1c:	d00a      	beq.n	8012a34 <_strtod_l+0x55c>
 8012a1e:	4b12      	ldr	r3, [pc, #72]	@ (8012a68 <_strtod_l+0x590>)
 8012a20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012a24:	4650      	mov	r0, sl
 8012a26:	4659      	mov	r1, fp
 8012a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a2c:	f7ed ff3e 	bl	80008ac <__aeabi_ddiv>
 8012a30:	4682      	mov	sl, r0
 8012a32:	468b      	mov	fp, r1
 8012a34:	1124      	asrs	r4, r4, #4
 8012a36:	d0df      	beq.n	80129f8 <_strtod_l+0x520>
 8012a38:	2c1f      	cmp	r4, #31
 8012a3a:	dd1f      	ble.n	8012a7c <_strtod_l+0x5a4>
 8012a3c:	2400      	movs	r4, #0
 8012a3e:	46a0      	mov	r8, r4
 8012a40:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012a42:	46a1      	mov	r9, r4
 8012a44:	9a05      	ldr	r2, [sp, #20]
 8012a46:	2322      	movs	r3, #34	@ 0x22
 8012a48:	f04f 0a00 	mov.w	sl, #0
 8012a4c:	f04f 0b00 	mov.w	fp, #0
 8012a50:	6013      	str	r3, [r2, #0]
 8012a52:	e76b      	b.n	801292c <_strtod_l+0x454>
 8012a54:	08019257 	.word	0x08019257
 8012a58:	0801943c 	.word	0x0801943c
 8012a5c:	0801924f 	.word	0x0801924f
 8012a60:	080192ff 	.word	0x080192ff
 8012a64:	08019247 	.word	0x08019247
 8012a68:	080195c8 	.word	0x080195c8
 8012a6c:	080195a0 	.word	0x080195a0
 8012a70:	7ff00000 	.word	0x7ff00000
 8012a74:	7ca00000 	.word	0x7ca00000
 8012a78:	7fefffff 	.word	0x7fefffff
 8012a7c:	f014 0310 	ands.w	r3, r4, #16
 8012a80:	bf18      	it	ne
 8012a82:	236a      	movne	r3, #106	@ 0x6a
 8012a84:	4ea9      	ldr	r6, [pc, #676]	@ (8012d2c <_strtod_l+0x854>)
 8012a86:	9308      	str	r3, [sp, #32]
 8012a88:	4650      	mov	r0, sl
 8012a8a:	4659      	mov	r1, fp
 8012a8c:	2300      	movs	r3, #0
 8012a8e:	07e7      	lsls	r7, r4, #31
 8012a90:	d504      	bpl.n	8012a9c <_strtod_l+0x5c4>
 8012a92:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012a96:	f7ed fddf 	bl	8000658 <__aeabi_dmul>
 8012a9a:	2301      	movs	r3, #1
 8012a9c:	1064      	asrs	r4, r4, #1
 8012a9e:	f106 0608 	add.w	r6, r6, #8
 8012aa2:	d1f4      	bne.n	8012a8e <_strtod_l+0x5b6>
 8012aa4:	b10b      	cbz	r3, 8012aaa <_strtod_l+0x5d2>
 8012aa6:	4682      	mov	sl, r0
 8012aa8:	468b      	mov	fp, r1
 8012aaa:	9b08      	ldr	r3, [sp, #32]
 8012aac:	b1b3      	cbz	r3, 8012adc <_strtod_l+0x604>
 8012aae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8012ab2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	4659      	mov	r1, fp
 8012aba:	dd0f      	ble.n	8012adc <_strtod_l+0x604>
 8012abc:	2b1f      	cmp	r3, #31
 8012abe:	dd56      	ble.n	8012b6e <_strtod_l+0x696>
 8012ac0:	2b34      	cmp	r3, #52	@ 0x34
 8012ac2:	bfde      	ittt	le
 8012ac4:	f04f 33ff 	movle.w	r3, #4294967295
 8012ac8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8012acc:	4093      	lslle	r3, r2
 8012ace:	f04f 0a00 	mov.w	sl, #0
 8012ad2:	bfcc      	ite	gt
 8012ad4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8012ad8:	ea03 0b01 	andle.w	fp, r3, r1
 8012adc:	2200      	movs	r2, #0
 8012ade:	2300      	movs	r3, #0
 8012ae0:	4650      	mov	r0, sl
 8012ae2:	4659      	mov	r1, fp
 8012ae4:	f7ee f820 	bl	8000b28 <__aeabi_dcmpeq>
 8012ae8:	2800      	cmp	r0, #0
 8012aea:	d1a7      	bne.n	8012a3c <_strtod_l+0x564>
 8012aec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012aee:	9300      	str	r3, [sp, #0]
 8012af0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012af2:	9805      	ldr	r0, [sp, #20]
 8012af4:	462b      	mov	r3, r5
 8012af6:	464a      	mov	r2, r9
 8012af8:	f003 fb68 	bl	80161cc <__s2b>
 8012afc:	900b      	str	r0, [sp, #44]	@ 0x2c
 8012afe:	2800      	cmp	r0, #0
 8012b00:	f43f af09 	beq.w	8012916 <_strtod_l+0x43e>
 8012b04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012b06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012b08:	2a00      	cmp	r2, #0
 8012b0a:	eba3 0308 	sub.w	r3, r3, r8
 8012b0e:	bfa8      	it	ge
 8012b10:	2300      	movge	r3, #0
 8012b12:	9312      	str	r3, [sp, #72]	@ 0x48
 8012b14:	2400      	movs	r4, #0
 8012b16:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012b1a:	9316      	str	r3, [sp, #88]	@ 0x58
 8012b1c:	46a0      	mov	r8, r4
 8012b1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012b20:	9805      	ldr	r0, [sp, #20]
 8012b22:	6859      	ldr	r1, [r3, #4]
 8012b24:	f003 faaa 	bl	801607c <_Balloc>
 8012b28:	4681      	mov	r9, r0
 8012b2a:	2800      	cmp	r0, #0
 8012b2c:	f43f aef7 	beq.w	801291e <_strtod_l+0x446>
 8012b30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012b32:	691a      	ldr	r2, [r3, #16]
 8012b34:	3202      	adds	r2, #2
 8012b36:	f103 010c 	add.w	r1, r3, #12
 8012b3a:	0092      	lsls	r2, r2, #2
 8012b3c:	300c      	adds	r0, #12
 8012b3e:	f002 f855 	bl	8014bec <memcpy>
 8012b42:	ec4b ab10 	vmov	d0, sl, fp
 8012b46:	9805      	ldr	r0, [sp, #20]
 8012b48:	aa1c      	add	r2, sp, #112	@ 0x70
 8012b4a:	a91b      	add	r1, sp, #108	@ 0x6c
 8012b4c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8012b50:	f003 fe70 	bl	8016834 <__d2b>
 8012b54:	901a      	str	r0, [sp, #104]	@ 0x68
 8012b56:	2800      	cmp	r0, #0
 8012b58:	f43f aee1 	beq.w	801291e <_strtod_l+0x446>
 8012b5c:	9805      	ldr	r0, [sp, #20]
 8012b5e:	2101      	movs	r1, #1
 8012b60:	f003 fbca 	bl	80162f8 <__i2b>
 8012b64:	4680      	mov	r8, r0
 8012b66:	b948      	cbnz	r0, 8012b7c <_strtod_l+0x6a4>
 8012b68:	f04f 0800 	mov.w	r8, #0
 8012b6c:	e6d7      	b.n	801291e <_strtod_l+0x446>
 8012b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8012b72:	fa02 f303 	lsl.w	r3, r2, r3
 8012b76:	ea03 0a0a 	and.w	sl, r3, sl
 8012b7a:	e7af      	b.n	8012adc <_strtod_l+0x604>
 8012b7c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8012b7e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012b80:	2d00      	cmp	r5, #0
 8012b82:	bfab      	itete	ge
 8012b84:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8012b86:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8012b88:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8012b8a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8012b8c:	bfac      	ite	ge
 8012b8e:	18ef      	addge	r7, r5, r3
 8012b90:	1b5e      	sublt	r6, r3, r5
 8012b92:	9b08      	ldr	r3, [sp, #32]
 8012b94:	1aed      	subs	r5, r5, r3
 8012b96:	4415      	add	r5, r2
 8012b98:	4b65      	ldr	r3, [pc, #404]	@ (8012d30 <_strtod_l+0x858>)
 8012b9a:	3d01      	subs	r5, #1
 8012b9c:	429d      	cmp	r5, r3
 8012b9e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8012ba2:	da50      	bge.n	8012c46 <_strtod_l+0x76e>
 8012ba4:	1b5b      	subs	r3, r3, r5
 8012ba6:	2b1f      	cmp	r3, #31
 8012ba8:	eba2 0203 	sub.w	r2, r2, r3
 8012bac:	f04f 0101 	mov.w	r1, #1
 8012bb0:	dc3d      	bgt.n	8012c2e <_strtod_l+0x756>
 8012bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8012bb6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012bb8:	2300      	movs	r3, #0
 8012bba:	9310      	str	r3, [sp, #64]	@ 0x40
 8012bbc:	18bd      	adds	r5, r7, r2
 8012bbe:	9b08      	ldr	r3, [sp, #32]
 8012bc0:	42af      	cmp	r7, r5
 8012bc2:	4416      	add	r6, r2
 8012bc4:	441e      	add	r6, r3
 8012bc6:	463b      	mov	r3, r7
 8012bc8:	bfa8      	it	ge
 8012bca:	462b      	movge	r3, r5
 8012bcc:	42b3      	cmp	r3, r6
 8012bce:	bfa8      	it	ge
 8012bd0:	4633      	movge	r3, r6
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	bfc2      	ittt	gt
 8012bd6:	1aed      	subgt	r5, r5, r3
 8012bd8:	1af6      	subgt	r6, r6, r3
 8012bda:	1aff      	subgt	r7, r7, r3
 8012bdc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	dd16      	ble.n	8012c10 <_strtod_l+0x738>
 8012be2:	4641      	mov	r1, r8
 8012be4:	9805      	ldr	r0, [sp, #20]
 8012be6:	461a      	mov	r2, r3
 8012be8:	f003 fc3e 	bl	8016468 <__pow5mult>
 8012bec:	4680      	mov	r8, r0
 8012bee:	2800      	cmp	r0, #0
 8012bf0:	d0ba      	beq.n	8012b68 <_strtod_l+0x690>
 8012bf2:	4601      	mov	r1, r0
 8012bf4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012bf6:	9805      	ldr	r0, [sp, #20]
 8012bf8:	f003 fb94 	bl	8016324 <__multiply>
 8012bfc:	900a      	str	r0, [sp, #40]	@ 0x28
 8012bfe:	2800      	cmp	r0, #0
 8012c00:	f43f ae8d 	beq.w	801291e <_strtod_l+0x446>
 8012c04:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012c06:	9805      	ldr	r0, [sp, #20]
 8012c08:	f003 fa78 	bl	80160fc <_Bfree>
 8012c0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012c0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8012c10:	2d00      	cmp	r5, #0
 8012c12:	dc1d      	bgt.n	8012c50 <_strtod_l+0x778>
 8012c14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	dd23      	ble.n	8012c62 <_strtod_l+0x78a>
 8012c1a:	4649      	mov	r1, r9
 8012c1c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8012c1e:	9805      	ldr	r0, [sp, #20]
 8012c20:	f003 fc22 	bl	8016468 <__pow5mult>
 8012c24:	4681      	mov	r9, r0
 8012c26:	b9e0      	cbnz	r0, 8012c62 <_strtod_l+0x78a>
 8012c28:	f04f 0900 	mov.w	r9, #0
 8012c2c:	e677      	b.n	801291e <_strtod_l+0x446>
 8012c2e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8012c32:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8012c36:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8012c3a:	35e2      	adds	r5, #226	@ 0xe2
 8012c3c:	fa01 f305 	lsl.w	r3, r1, r5
 8012c40:	9310      	str	r3, [sp, #64]	@ 0x40
 8012c42:	9113      	str	r1, [sp, #76]	@ 0x4c
 8012c44:	e7ba      	b.n	8012bbc <_strtod_l+0x6e4>
 8012c46:	2300      	movs	r3, #0
 8012c48:	9310      	str	r3, [sp, #64]	@ 0x40
 8012c4a:	2301      	movs	r3, #1
 8012c4c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012c4e:	e7b5      	b.n	8012bbc <_strtod_l+0x6e4>
 8012c50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012c52:	9805      	ldr	r0, [sp, #20]
 8012c54:	462a      	mov	r2, r5
 8012c56:	f003 fc61 	bl	801651c <__lshift>
 8012c5a:	901a      	str	r0, [sp, #104]	@ 0x68
 8012c5c:	2800      	cmp	r0, #0
 8012c5e:	d1d9      	bne.n	8012c14 <_strtod_l+0x73c>
 8012c60:	e65d      	b.n	801291e <_strtod_l+0x446>
 8012c62:	2e00      	cmp	r6, #0
 8012c64:	dd07      	ble.n	8012c76 <_strtod_l+0x79e>
 8012c66:	4649      	mov	r1, r9
 8012c68:	9805      	ldr	r0, [sp, #20]
 8012c6a:	4632      	mov	r2, r6
 8012c6c:	f003 fc56 	bl	801651c <__lshift>
 8012c70:	4681      	mov	r9, r0
 8012c72:	2800      	cmp	r0, #0
 8012c74:	d0d8      	beq.n	8012c28 <_strtod_l+0x750>
 8012c76:	2f00      	cmp	r7, #0
 8012c78:	dd08      	ble.n	8012c8c <_strtod_l+0x7b4>
 8012c7a:	4641      	mov	r1, r8
 8012c7c:	9805      	ldr	r0, [sp, #20]
 8012c7e:	463a      	mov	r2, r7
 8012c80:	f003 fc4c 	bl	801651c <__lshift>
 8012c84:	4680      	mov	r8, r0
 8012c86:	2800      	cmp	r0, #0
 8012c88:	f43f ae49 	beq.w	801291e <_strtod_l+0x446>
 8012c8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012c8e:	9805      	ldr	r0, [sp, #20]
 8012c90:	464a      	mov	r2, r9
 8012c92:	f003 fccb 	bl	801662c <__mdiff>
 8012c96:	4604      	mov	r4, r0
 8012c98:	2800      	cmp	r0, #0
 8012c9a:	f43f ae40 	beq.w	801291e <_strtod_l+0x446>
 8012c9e:	68c3      	ldr	r3, [r0, #12]
 8012ca0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	60c3      	str	r3, [r0, #12]
 8012ca6:	4641      	mov	r1, r8
 8012ca8:	f003 fca4 	bl	80165f4 <__mcmp>
 8012cac:	2800      	cmp	r0, #0
 8012cae:	da45      	bge.n	8012d3c <_strtod_l+0x864>
 8012cb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012cb2:	ea53 030a 	orrs.w	r3, r3, sl
 8012cb6:	d16b      	bne.n	8012d90 <_strtod_l+0x8b8>
 8012cb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d167      	bne.n	8012d90 <_strtod_l+0x8b8>
 8012cc0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012cc4:	0d1b      	lsrs	r3, r3, #20
 8012cc6:	051b      	lsls	r3, r3, #20
 8012cc8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012ccc:	d960      	bls.n	8012d90 <_strtod_l+0x8b8>
 8012cce:	6963      	ldr	r3, [r4, #20]
 8012cd0:	b913      	cbnz	r3, 8012cd8 <_strtod_l+0x800>
 8012cd2:	6923      	ldr	r3, [r4, #16]
 8012cd4:	2b01      	cmp	r3, #1
 8012cd6:	dd5b      	ble.n	8012d90 <_strtod_l+0x8b8>
 8012cd8:	4621      	mov	r1, r4
 8012cda:	2201      	movs	r2, #1
 8012cdc:	9805      	ldr	r0, [sp, #20]
 8012cde:	f003 fc1d 	bl	801651c <__lshift>
 8012ce2:	4641      	mov	r1, r8
 8012ce4:	4604      	mov	r4, r0
 8012ce6:	f003 fc85 	bl	80165f4 <__mcmp>
 8012cea:	2800      	cmp	r0, #0
 8012cec:	dd50      	ble.n	8012d90 <_strtod_l+0x8b8>
 8012cee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012cf2:	9a08      	ldr	r2, [sp, #32]
 8012cf4:	0d1b      	lsrs	r3, r3, #20
 8012cf6:	051b      	lsls	r3, r3, #20
 8012cf8:	2a00      	cmp	r2, #0
 8012cfa:	d06a      	beq.n	8012dd2 <_strtod_l+0x8fa>
 8012cfc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012d00:	d867      	bhi.n	8012dd2 <_strtod_l+0x8fa>
 8012d02:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8012d06:	f67f ae9d 	bls.w	8012a44 <_strtod_l+0x56c>
 8012d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8012d34 <_strtod_l+0x85c>)
 8012d0c:	4650      	mov	r0, sl
 8012d0e:	4659      	mov	r1, fp
 8012d10:	2200      	movs	r2, #0
 8012d12:	f7ed fca1 	bl	8000658 <__aeabi_dmul>
 8012d16:	4b08      	ldr	r3, [pc, #32]	@ (8012d38 <_strtod_l+0x860>)
 8012d18:	400b      	ands	r3, r1
 8012d1a:	4682      	mov	sl, r0
 8012d1c:	468b      	mov	fp, r1
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	f47f ae08 	bne.w	8012934 <_strtod_l+0x45c>
 8012d24:	9a05      	ldr	r2, [sp, #20]
 8012d26:	2322      	movs	r3, #34	@ 0x22
 8012d28:	6013      	str	r3, [r2, #0]
 8012d2a:	e603      	b.n	8012934 <_strtod_l+0x45c>
 8012d2c:	08019468 	.word	0x08019468
 8012d30:	fffffc02 	.word	0xfffffc02
 8012d34:	39500000 	.word	0x39500000
 8012d38:	7ff00000 	.word	0x7ff00000
 8012d3c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8012d40:	d165      	bne.n	8012e0e <_strtod_l+0x936>
 8012d42:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012d44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012d48:	b35a      	cbz	r2, 8012da2 <_strtod_l+0x8ca>
 8012d4a:	4a9f      	ldr	r2, [pc, #636]	@ (8012fc8 <_strtod_l+0xaf0>)
 8012d4c:	4293      	cmp	r3, r2
 8012d4e:	d12b      	bne.n	8012da8 <_strtod_l+0x8d0>
 8012d50:	9b08      	ldr	r3, [sp, #32]
 8012d52:	4651      	mov	r1, sl
 8012d54:	b303      	cbz	r3, 8012d98 <_strtod_l+0x8c0>
 8012d56:	4b9d      	ldr	r3, [pc, #628]	@ (8012fcc <_strtod_l+0xaf4>)
 8012d58:	465a      	mov	r2, fp
 8012d5a:	4013      	ands	r3, r2
 8012d5c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8012d60:	f04f 32ff 	mov.w	r2, #4294967295
 8012d64:	d81b      	bhi.n	8012d9e <_strtod_l+0x8c6>
 8012d66:	0d1b      	lsrs	r3, r3, #20
 8012d68:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8012d70:	4299      	cmp	r1, r3
 8012d72:	d119      	bne.n	8012da8 <_strtod_l+0x8d0>
 8012d74:	4b96      	ldr	r3, [pc, #600]	@ (8012fd0 <_strtod_l+0xaf8>)
 8012d76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012d78:	429a      	cmp	r2, r3
 8012d7a:	d102      	bne.n	8012d82 <_strtod_l+0x8aa>
 8012d7c:	3101      	adds	r1, #1
 8012d7e:	f43f adce 	beq.w	801291e <_strtod_l+0x446>
 8012d82:	4b92      	ldr	r3, [pc, #584]	@ (8012fcc <_strtod_l+0xaf4>)
 8012d84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012d86:	401a      	ands	r2, r3
 8012d88:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8012d8c:	f04f 0a00 	mov.w	sl, #0
 8012d90:	9b08      	ldr	r3, [sp, #32]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d1b9      	bne.n	8012d0a <_strtod_l+0x832>
 8012d96:	e5cd      	b.n	8012934 <_strtod_l+0x45c>
 8012d98:	f04f 33ff 	mov.w	r3, #4294967295
 8012d9c:	e7e8      	b.n	8012d70 <_strtod_l+0x898>
 8012d9e:	4613      	mov	r3, r2
 8012da0:	e7e6      	b.n	8012d70 <_strtod_l+0x898>
 8012da2:	ea53 030a 	orrs.w	r3, r3, sl
 8012da6:	d0a2      	beq.n	8012cee <_strtod_l+0x816>
 8012da8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012daa:	b1db      	cbz	r3, 8012de4 <_strtod_l+0x90c>
 8012dac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012dae:	4213      	tst	r3, r2
 8012db0:	d0ee      	beq.n	8012d90 <_strtod_l+0x8b8>
 8012db2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012db4:	9a08      	ldr	r2, [sp, #32]
 8012db6:	4650      	mov	r0, sl
 8012db8:	4659      	mov	r1, fp
 8012dba:	b1bb      	cbz	r3, 8012dec <_strtod_l+0x914>
 8012dbc:	f7ff fb6e 	bl	801249c <sulp>
 8012dc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012dc4:	ec53 2b10 	vmov	r2, r3, d0
 8012dc8:	f7ed fa90 	bl	80002ec <__adddf3>
 8012dcc:	4682      	mov	sl, r0
 8012dce:	468b      	mov	fp, r1
 8012dd0:	e7de      	b.n	8012d90 <_strtod_l+0x8b8>
 8012dd2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8012dd6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012dda:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012dde:	f04f 3aff 	mov.w	sl, #4294967295
 8012de2:	e7d5      	b.n	8012d90 <_strtod_l+0x8b8>
 8012de4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012de6:	ea13 0f0a 	tst.w	r3, sl
 8012dea:	e7e1      	b.n	8012db0 <_strtod_l+0x8d8>
 8012dec:	f7ff fb56 	bl	801249c <sulp>
 8012df0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012df4:	ec53 2b10 	vmov	r2, r3, d0
 8012df8:	f7ed fa76 	bl	80002e8 <__aeabi_dsub>
 8012dfc:	2200      	movs	r2, #0
 8012dfe:	2300      	movs	r3, #0
 8012e00:	4682      	mov	sl, r0
 8012e02:	468b      	mov	fp, r1
 8012e04:	f7ed fe90 	bl	8000b28 <__aeabi_dcmpeq>
 8012e08:	2800      	cmp	r0, #0
 8012e0a:	d0c1      	beq.n	8012d90 <_strtod_l+0x8b8>
 8012e0c:	e61a      	b.n	8012a44 <_strtod_l+0x56c>
 8012e0e:	4641      	mov	r1, r8
 8012e10:	4620      	mov	r0, r4
 8012e12:	f003 fd67 	bl	80168e4 <__ratio>
 8012e16:	ec57 6b10 	vmov	r6, r7, d0
 8012e1a:	2200      	movs	r2, #0
 8012e1c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012e20:	4630      	mov	r0, r6
 8012e22:	4639      	mov	r1, r7
 8012e24:	f7ed fe94 	bl	8000b50 <__aeabi_dcmple>
 8012e28:	2800      	cmp	r0, #0
 8012e2a:	d06f      	beq.n	8012f0c <_strtod_l+0xa34>
 8012e2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d17a      	bne.n	8012f28 <_strtod_l+0xa50>
 8012e32:	f1ba 0f00 	cmp.w	sl, #0
 8012e36:	d158      	bne.n	8012eea <_strtod_l+0xa12>
 8012e38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012e3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d15a      	bne.n	8012ef8 <_strtod_l+0xa20>
 8012e42:	4b64      	ldr	r3, [pc, #400]	@ (8012fd4 <_strtod_l+0xafc>)
 8012e44:	2200      	movs	r2, #0
 8012e46:	4630      	mov	r0, r6
 8012e48:	4639      	mov	r1, r7
 8012e4a:	f7ed fe77 	bl	8000b3c <__aeabi_dcmplt>
 8012e4e:	2800      	cmp	r0, #0
 8012e50:	d159      	bne.n	8012f06 <_strtod_l+0xa2e>
 8012e52:	4630      	mov	r0, r6
 8012e54:	4639      	mov	r1, r7
 8012e56:	4b60      	ldr	r3, [pc, #384]	@ (8012fd8 <_strtod_l+0xb00>)
 8012e58:	2200      	movs	r2, #0
 8012e5a:	f7ed fbfd 	bl	8000658 <__aeabi_dmul>
 8012e5e:	4606      	mov	r6, r0
 8012e60:	460f      	mov	r7, r1
 8012e62:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8012e66:	9606      	str	r6, [sp, #24]
 8012e68:	9307      	str	r3, [sp, #28]
 8012e6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012e6e:	4d57      	ldr	r5, [pc, #348]	@ (8012fcc <_strtod_l+0xaf4>)
 8012e70:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012e74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012e76:	401d      	ands	r5, r3
 8012e78:	4b58      	ldr	r3, [pc, #352]	@ (8012fdc <_strtod_l+0xb04>)
 8012e7a:	429d      	cmp	r5, r3
 8012e7c:	f040 80b2 	bne.w	8012fe4 <_strtod_l+0xb0c>
 8012e80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012e82:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8012e86:	ec4b ab10 	vmov	d0, sl, fp
 8012e8a:	f003 fc63 	bl	8016754 <__ulp>
 8012e8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012e92:	ec51 0b10 	vmov	r0, r1, d0
 8012e96:	f7ed fbdf 	bl	8000658 <__aeabi_dmul>
 8012e9a:	4652      	mov	r2, sl
 8012e9c:	465b      	mov	r3, fp
 8012e9e:	f7ed fa25 	bl	80002ec <__adddf3>
 8012ea2:	460b      	mov	r3, r1
 8012ea4:	4949      	ldr	r1, [pc, #292]	@ (8012fcc <_strtod_l+0xaf4>)
 8012ea6:	4a4e      	ldr	r2, [pc, #312]	@ (8012fe0 <_strtod_l+0xb08>)
 8012ea8:	4019      	ands	r1, r3
 8012eaa:	4291      	cmp	r1, r2
 8012eac:	4682      	mov	sl, r0
 8012eae:	d942      	bls.n	8012f36 <_strtod_l+0xa5e>
 8012eb0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012eb2:	4b47      	ldr	r3, [pc, #284]	@ (8012fd0 <_strtod_l+0xaf8>)
 8012eb4:	429a      	cmp	r2, r3
 8012eb6:	d103      	bne.n	8012ec0 <_strtod_l+0x9e8>
 8012eb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012eba:	3301      	adds	r3, #1
 8012ebc:	f43f ad2f 	beq.w	801291e <_strtod_l+0x446>
 8012ec0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8012fd0 <_strtod_l+0xaf8>
 8012ec4:	f04f 3aff 	mov.w	sl, #4294967295
 8012ec8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012eca:	9805      	ldr	r0, [sp, #20]
 8012ecc:	f003 f916 	bl	80160fc <_Bfree>
 8012ed0:	9805      	ldr	r0, [sp, #20]
 8012ed2:	4649      	mov	r1, r9
 8012ed4:	f003 f912 	bl	80160fc <_Bfree>
 8012ed8:	9805      	ldr	r0, [sp, #20]
 8012eda:	4641      	mov	r1, r8
 8012edc:	f003 f90e 	bl	80160fc <_Bfree>
 8012ee0:	9805      	ldr	r0, [sp, #20]
 8012ee2:	4621      	mov	r1, r4
 8012ee4:	f003 f90a 	bl	80160fc <_Bfree>
 8012ee8:	e619      	b.n	8012b1e <_strtod_l+0x646>
 8012eea:	f1ba 0f01 	cmp.w	sl, #1
 8012eee:	d103      	bne.n	8012ef8 <_strtod_l+0xa20>
 8012ef0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	f43f ada6 	beq.w	8012a44 <_strtod_l+0x56c>
 8012ef8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8012fa8 <_strtod_l+0xad0>
 8012efc:	4f35      	ldr	r7, [pc, #212]	@ (8012fd4 <_strtod_l+0xafc>)
 8012efe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012f02:	2600      	movs	r6, #0
 8012f04:	e7b1      	b.n	8012e6a <_strtod_l+0x992>
 8012f06:	4f34      	ldr	r7, [pc, #208]	@ (8012fd8 <_strtod_l+0xb00>)
 8012f08:	2600      	movs	r6, #0
 8012f0a:	e7aa      	b.n	8012e62 <_strtod_l+0x98a>
 8012f0c:	4b32      	ldr	r3, [pc, #200]	@ (8012fd8 <_strtod_l+0xb00>)
 8012f0e:	4630      	mov	r0, r6
 8012f10:	4639      	mov	r1, r7
 8012f12:	2200      	movs	r2, #0
 8012f14:	f7ed fba0 	bl	8000658 <__aeabi_dmul>
 8012f18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012f1a:	4606      	mov	r6, r0
 8012f1c:	460f      	mov	r7, r1
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d09f      	beq.n	8012e62 <_strtod_l+0x98a>
 8012f22:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8012f26:	e7a0      	b.n	8012e6a <_strtod_l+0x992>
 8012f28:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012fb0 <_strtod_l+0xad8>
 8012f2c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012f30:	ec57 6b17 	vmov	r6, r7, d7
 8012f34:	e799      	b.n	8012e6a <_strtod_l+0x992>
 8012f36:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8012f3a:	9b08      	ldr	r3, [sp, #32]
 8012f3c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d1c1      	bne.n	8012ec8 <_strtod_l+0x9f0>
 8012f44:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012f48:	0d1b      	lsrs	r3, r3, #20
 8012f4a:	051b      	lsls	r3, r3, #20
 8012f4c:	429d      	cmp	r5, r3
 8012f4e:	d1bb      	bne.n	8012ec8 <_strtod_l+0x9f0>
 8012f50:	4630      	mov	r0, r6
 8012f52:	4639      	mov	r1, r7
 8012f54:	f7ed fee0 	bl	8000d18 <__aeabi_d2lz>
 8012f58:	f7ed fb50 	bl	80005fc <__aeabi_l2d>
 8012f5c:	4602      	mov	r2, r0
 8012f5e:	460b      	mov	r3, r1
 8012f60:	4630      	mov	r0, r6
 8012f62:	4639      	mov	r1, r7
 8012f64:	f7ed f9c0 	bl	80002e8 <__aeabi_dsub>
 8012f68:	460b      	mov	r3, r1
 8012f6a:	4602      	mov	r2, r0
 8012f6c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8012f70:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8012f74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012f76:	ea46 060a 	orr.w	r6, r6, sl
 8012f7a:	431e      	orrs	r6, r3
 8012f7c:	d06f      	beq.n	801305e <_strtod_l+0xb86>
 8012f7e:	a30e      	add	r3, pc, #56	@ (adr r3, 8012fb8 <_strtod_l+0xae0>)
 8012f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f84:	f7ed fdda 	bl	8000b3c <__aeabi_dcmplt>
 8012f88:	2800      	cmp	r0, #0
 8012f8a:	f47f acd3 	bne.w	8012934 <_strtod_l+0x45c>
 8012f8e:	a30c      	add	r3, pc, #48	@ (adr r3, 8012fc0 <_strtod_l+0xae8>)
 8012f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012f98:	f7ed fdee 	bl	8000b78 <__aeabi_dcmpgt>
 8012f9c:	2800      	cmp	r0, #0
 8012f9e:	d093      	beq.n	8012ec8 <_strtod_l+0x9f0>
 8012fa0:	e4c8      	b.n	8012934 <_strtod_l+0x45c>
 8012fa2:	bf00      	nop
 8012fa4:	f3af 8000 	nop.w
 8012fa8:	00000000 	.word	0x00000000
 8012fac:	bff00000 	.word	0xbff00000
 8012fb0:	00000000 	.word	0x00000000
 8012fb4:	3ff00000 	.word	0x3ff00000
 8012fb8:	94a03595 	.word	0x94a03595
 8012fbc:	3fdfffff 	.word	0x3fdfffff
 8012fc0:	35afe535 	.word	0x35afe535
 8012fc4:	3fe00000 	.word	0x3fe00000
 8012fc8:	000fffff 	.word	0x000fffff
 8012fcc:	7ff00000 	.word	0x7ff00000
 8012fd0:	7fefffff 	.word	0x7fefffff
 8012fd4:	3ff00000 	.word	0x3ff00000
 8012fd8:	3fe00000 	.word	0x3fe00000
 8012fdc:	7fe00000 	.word	0x7fe00000
 8012fe0:	7c9fffff 	.word	0x7c9fffff
 8012fe4:	9b08      	ldr	r3, [sp, #32]
 8012fe6:	b323      	cbz	r3, 8013032 <_strtod_l+0xb5a>
 8012fe8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8012fec:	d821      	bhi.n	8013032 <_strtod_l+0xb5a>
 8012fee:	a328      	add	r3, pc, #160	@ (adr r3, 8013090 <_strtod_l+0xbb8>)
 8012ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ff4:	4630      	mov	r0, r6
 8012ff6:	4639      	mov	r1, r7
 8012ff8:	f7ed fdaa 	bl	8000b50 <__aeabi_dcmple>
 8012ffc:	b1a0      	cbz	r0, 8013028 <_strtod_l+0xb50>
 8012ffe:	4639      	mov	r1, r7
 8013000:	4630      	mov	r0, r6
 8013002:	f7ed fe01 	bl	8000c08 <__aeabi_d2uiz>
 8013006:	2801      	cmp	r0, #1
 8013008:	bf38      	it	cc
 801300a:	2001      	movcc	r0, #1
 801300c:	f7ed faaa 	bl	8000564 <__aeabi_ui2d>
 8013010:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013012:	4606      	mov	r6, r0
 8013014:	460f      	mov	r7, r1
 8013016:	b9fb      	cbnz	r3, 8013058 <_strtod_l+0xb80>
 8013018:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801301c:	9014      	str	r0, [sp, #80]	@ 0x50
 801301e:	9315      	str	r3, [sp, #84]	@ 0x54
 8013020:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8013024:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013028:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801302a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801302e:	1b5b      	subs	r3, r3, r5
 8013030:	9311      	str	r3, [sp, #68]	@ 0x44
 8013032:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8013036:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801303a:	f003 fb8b 	bl	8016754 <__ulp>
 801303e:	4650      	mov	r0, sl
 8013040:	ec53 2b10 	vmov	r2, r3, d0
 8013044:	4659      	mov	r1, fp
 8013046:	f7ed fb07 	bl	8000658 <__aeabi_dmul>
 801304a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801304e:	f7ed f94d 	bl	80002ec <__adddf3>
 8013052:	4682      	mov	sl, r0
 8013054:	468b      	mov	fp, r1
 8013056:	e770      	b.n	8012f3a <_strtod_l+0xa62>
 8013058:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801305c:	e7e0      	b.n	8013020 <_strtod_l+0xb48>
 801305e:	a30e      	add	r3, pc, #56	@ (adr r3, 8013098 <_strtod_l+0xbc0>)
 8013060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013064:	f7ed fd6a 	bl	8000b3c <__aeabi_dcmplt>
 8013068:	e798      	b.n	8012f9c <_strtod_l+0xac4>
 801306a:	2300      	movs	r3, #0
 801306c:	930e      	str	r3, [sp, #56]	@ 0x38
 801306e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8013070:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013072:	6013      	str	r3, [r2, #0]
 8013074:	f7ff ba6d 	b.w	8012552 <_strtod_l+0x7a>
 8013078:	2a65      	cmp	r2, #101	@ 0x65
 801307a:	f43f ab68 	beq.w	801274e <_strtod_l+0x276>
 801307e:	2a45      	cmp	r2, #69	@ 0x45
 8013080:	f43f ab65 	beq.w	801274e <_strtod_l+0x276>
 8013084:	2301      	movs	r3, #1
 8013086:	f7ff bba0 	b.w	80127ca <_strtod_l+0x2f2>
 801308a:	bf00      	nop
 801308c:	f3af 8000 	nop.w
 8013090:	ffc00000 	.word	0xffc00000
 8013094:	41dfffff 	.word	0x41dfffff
 8013098:	94a03595 	.word	0x94a03595
 801309c:	3fcfffff 	.word	0x3fcfffff

080130a0 <_strtod_r>:
 80130a0:	4b01      	ldr	r3, [pc, #4]	@ (80130a8 <_strtod_r+0x8>)
 80130a2:	f7ff ba19 	b.w	80124d8 <_strtod_l>
 80130a6:	bf00      	nop
 80130a8:	20000068 	.word	0x20000068

080130ac <strtod>:
 80130ac:	460a      	mov	r2, r1
 80130ae:	4601      	mov	r1, r0
 80130b0:	4802      	ldr	r0, [pc, #8]	@ (80130bc <strtod+0x10>)
 80130b2:	4b03      	ldr	r3, [pc, #12]	@ (80130c0 <strtod+0x14>)
 80130b4:	6800      	ldr	r0, [r0, #0]
 80130b6:	f7ff ba0f 	b.w	80124d8 <_strtod_l>
 80130ba:	bf00      	nop
 80130bc:	200001d4 	.word	0x200001d4
 80130c0:	20000068 	.word	0x20000068

080130c4 <_strtol_l.isra.0>:
 80130c4:	2b24      	cmp	r3, #36	@ 0x24
 80130c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130ca:	4686      	mov	lr, r0
 80130cc:	4690      	mov	r8, r2
 80130ce:	d801      	bhi.n	80130d4 <_strtol_l.isra.0+0x10>
 80130d0:	2b01      	cmp	r3, #1
 80130d2:	d106      	bne.n	80130e2 <_strtol_l.isra.0+0x1e>
 80130d4:	f001 fd5c 	bl	8014b90 <__errno>
 80130d8:	2316      	movs	r3, #22
 80130da:	6003      	str	r3, [r0, #0]
 80130dc:	2000      	movs	r0, #0
 80130de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130e2:	4834      	ldr	r0, [pc, #208]	@ (80131b4 <_strtol_l.isra.0+0xf0>)
 80130e4:	460d      	mov	r5, r1
 80130e6:	462a      	mov	r2, r5
 80130e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80130ec:	5d06      	ldrb	r6, [r0, r4]
 80130ee:	f016 0608 	ands.w	r6, r6, #8
 80130f2:	d1f8      	bne.n	80130e6 <_strtol_l.isra.0+0x22>
 80130f4:	2c2d      	cmp	r4, #45	@ 0x2d
 80130f6:	d110      	bne.n	801311a <_strtol_l.isra.0+0x56>
 80130f8:	782c      	ldrb	r4, [r5, #0]
 80130fa:	2601      	movs	r6, #1
 80130fc:	1c95      	adds	r5, r2, #2
 80130fe:	f033 0210 	bics.w	r2, r3, #16
 8013102:	d115      	bne.n	8013130 <_strtol_l.isra.0+0x6c>
 8013104:	2c30      	cmp	r4, #48	@ 0x30
 8013106:	d10d      	bne.n	8013124 <_strtol_l.isra.0+0x60>
 8013108:	782a      	ldrb	r2, [r5, #0]
 801310a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801310e:	2a58      	cmp	r2, #88	@ 0x58
 8013110:	d108      	bne.n	8013124 <_strtol_l.isra.0+0x60>
 8013112:	786c      	ldrb	r4, [r5, #1]
 8013114:	3502      	adds	r5, #2
 8013116:	2310      	movs	r3, #16
 8013118:	e00a      	b.n	8013130 <_strtol_l.isra.0+0x6c>
 801311a:	2c2b      	cmp	r4, #43	@ 0x2b
 801311c:	bf04      	itt	eq
 801311e:	782c      	ldrbeq	r4, [r5, #0]
 8013120:	1c95      	addeq	r5, r2, #2
 8013122:	e7ec      	b.n	80130fe <_strtol_l.isra.0+0x3a>
 8013124:	2b00      	cmp	r3, #0
 8013126:	d1f6      	bne.n	8013116 <_strtol_l.isra.0+0x52>
 8013128:	2c30      	cmp	r4, #48	@ 0x30
 801312a:	bf14      	ite	ne
 801312c:	230a      	movne	r3, #10
 801312e:	2308      	moveq	r3, #8
 8013130:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8013134:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013138:	2200      	movs	r2, #0
 801313a:	fbbc f9f3 	udiv	r9, ip, r3
 801313e:	4610      	mov	r0, r2
 8013140:	fb03 ca19 	mls	sl, r3, r9, ip
 8013144:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8013148:	2f09      	cmp	r7, #9
 801314a:	d80f      	bhi.n	801316c <_strtol_l.isra.0+0xa8>
 801314c:	463c      	mov	r4, r7
 801314e:	42a3      	cmp	r3, r4
 8013150:	dd1b      	ble.n	801318a <_strtol_l.isra.0+0xc6>
 8013152:	1c57      	adds	r7, r2, #1
 8013154:	d007      	beq.n	8013166 <_strtol_l.isra.0+0xa2>
 8013156:	4581      	cmp	r9, r0
 8013158:	d314      	bcc.n	8013184 <_strtol_l.isra.0+0xc0>
 801315a:	d101      	bne.n	8013160 <_strtol_l.isra.0+0x9c>
 801315c:	45a2      	cmp	sl, r4
 801315e:	db11      	blt.n	8013184 <_strtol_l.isra.0+0xc0>
 8013160:	fb00 4003 	mla	r0, r0, r3, r4
 8013164:	2201      	movs	r2, #1
 8013166:	f815 4b01 	ldrb.w	r4, [r5], #1
 801316a:	e7eb      	b.n	8013144 <_strtol_l.isra.0+0x80>
 801316c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8013170:	2f19      	cmp	r7, #25
 8013172:	d801      	bhi.n	8013178 <_strtol_l.isra.0+0xb4>
 8013174:	3c37      	subs	r4, #55	@ 0x37
 8013176:	e7ea      	b.n	801314e <_strtol_l.isra.0+0x8a>
 8013178:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801317c:	2f19      	cmp	r7, #25
 801317e:	d804      	bhi.n	801318a <_strtol_l.isra.0+0xc6>
 8013180:	3c57      	subs	r4, #87	@ 0x57
 8013182:	e7e4      	b.n	801314e <_strtol_l.isra.0+0x8a>
 8013184:	f04f 32ff 	mov.w	r2, #4294967295
 8013188:	e7ed      	b.n	8013166 <_strtol_l.isra.0+0xa2>
 801318a:	1c53      	adds	r3, r2, #1
 801318c:	d108      	bne.n	80131a0 <_strtol_l.isra.0+0xdc>
 801318e:	2322      	movs	r3, #34	@ 0x22
 8013190:	f8ce 3000 	str.w	r3, [lr]
 8013194:	4660      	mov	r0, ip
 8013196:	f1b8 0f00 	cmp.w	r8, #0
 801319a:	d0a0      	beq.n	80130de <_strtol_l.isra.0+0x1a>
 801319c:	1e69      	subs	r1, r5, #1
 801319e:	e006      	b.n	80131ae <_strtol_l.isra.0+0xea>
 80131a0:	b106      	cbz	r6, 80131a4 <_strtol_l.isra.0+0xe0>
 80131a2:	4240      	negs	r0, r0
 80131a4:	f1b8 0f00 	cmp.w	r8, #0
 80131a8:	d099      	beq.n	80130de <_strtol_l.isra.0+0x1a>
 80131aa:	2a00      	cmp	r2, #0
 80131ac:	d1f6      	bne.n	801319c <_strtol_l.isra.0+0xd8>
 80131ae:	f8c8 1000 	str.w	r1, [r8]
 80131b2:	e794      	b.n	80130de <_strtol_l.isra.0+0x1a>
 80131b4:	08019491 	.word	0x08019491

080131b8 <_strtol_r>:
 80131b8:	f7ff bf84 	b.w	80130c4 <_strtol_l.isra.0>

080131bc <strtol>:
 80131bc:	4613      	mov	r3, r2
 80131be:	460a      	mov	r2, r1
 80131c0:	4601      	mov	r1, r0
 80131c2:	4802      	ldr	r0, [pc, #8]	@ (80131cc <strtol+0x10>)
 80131c4:	6800      	ldr	r0, [r0, #0]
 80131c6:	f7ff bf7d 	b.w	80130c4 <_strtol_l.isra.0>
 80131ca:	bf00      	nop
 80131cc:	200001d4 	.word	0x200001d4

080131d0 <setenv>:
 80131d0:	4613      	mov	r3, r2
 80131d2:	460a      	mov	r2, r1
 80131d4:	4601      	mov	r1, r0
 80131d6:	4802      	ldr	r0, [pc, #8]	@ (80131e0 <setenv+0x10>)
 80131d8:	6800      	ldr	r0, [r0, #0]
 80131da:	f000 b803 	b.w	80131e4 <_setenv_r>
 80131de:	bf00      	nop
 80131e0:	200001d4 	.word	0x200001d4

080131e4 <_setenv_r>:
 80131e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131e8:	460e      	mov	r6, r1
 80131ea:	4605      	mov	r5, r0
 80131ec:	213d      	movs	r1, #61	@ 0x3d
 80131ee:	4630      	mov	r0, r6
 80131f0:	4617      	mov	r7, r2
 80131f2:	4698      	mov	r8, r3
 80131f4:	f001 fb9c 	bl	8014930 <strchr>
 80131f8:	b130      	cbz	r0, 8013208 <_setenv_r+0x24>
 80131fa:	f001 fcc9 	bl	8014b90 <__errno>
 80131fe:	2316      	movs	r3, #22
 8013200:	6003      	str	r3, [r0, #0]
 8013202:	f04f 30ff 	mov.w	r0, #4294967295
 8013206:	e014      	b.n	8013232 <_setenv_r+0x4e>
 8013208:	4628      	mov	r0, r5
 801320a:	f7f3 fe7d 	bl	8006f08 <__env_lock>
 801320e:	4638      	mov	r0, r7
 8013210:	f7ed f85e 	bl	80002d0 <strlen>
 8013214:	aa01      	add	r2, sp, #4
 8013216:	4681      	mov	r9, r0
 8013218:	4631      	mov	r1, r6
 801321a:	4628      	mov	r0, r5
 801321c:	f7ff f846 	bl	80122ac <_findenv_r>
 8013220:	4604      	mov	r4, r0
 8013222:	b1a8      	cbz	r0, 8013250 <_setenv_r+0x6c>
 8013224:	f1b8 0f00 	cmp.w	r8, #0
 8013228:	d106      	bne.n	8013238 <_setenv_r+0x54>
 801322a:	4628      	mov	r0, r5
 801322c:	f7f3 fea4 	bl	8006f78 <__env_unlock>
 8013230:	2000      	movs	r0, #0
 8013232:	b003      	add	sp, #12
 8013234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013238:	f7ed f84a 	bl	80002d0 <strlen>
 801323c:	4581      	cmp	r9, r0
 801323e:	d83a      	bhi.n	80132b6 <_setenv_r+0xd2>
 8013240:	3c01      	subs	r4, #1
 8013242:	f817 3b01 	ldrb.w	r3, [r7], #1
 8013246:	f804 3f01 	strb.w	r3, [r4, #1]!
 801324a:	2b00      	cmp	r3, #0
 801324c:	d1f9      	bne.n	8013242 <_setenv_r+0x5e>
 801324e:	e7ec      	b.n	801322a <_setenv_r+0x46>
 8013250:	f8df a0bc 	ldr.w	sl, [pc, #188]	@ 8013310 <_setenv_r+0x12c>
 8013254:	f8da 1000 	ldr.w	r1, [sl]
 8013258:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
 801325c:	b98b      	cbnz	r3, 8013282 <_setenv_r+0x9e>
 801325e:	4b2b      	ldr	r3, [pc, #172]	@ (801330c <_setenv_r+0x128>)
 8013260:	681a      	ldr	r2, [r3, #0]
 8013262:	f104 0802 	add.w	r8, r4, #2
 8013266:	ea4f 0888 	mov.w	r8, r8, lsl #2
 801326a:	b162      	cbz	r2, 8013286 <_setenv_r+0xa2>
 801326c:	4642      	mov	r2, r8
 801326e:	4628      	mov	r0, r5
 8013270:	f003 fbae 	bl	80169d0 <_realloc_r>
 8013274:	f8ca 0000 	str.w	r0, [sl]
 8013278:	b9b0      	cbnz	r0, 80132a8 <_setenv_r+0xc4>
 801327a:	4628      	mov	r0, r5
 801327c:	f7f3 fe7c 	bl	8006f78 <__env_unlock>
 8013280:	e7bf      	b.n	8013202 <_setenv_r+0x1e>
 8013282:	3401      	adds	r4, #1
 8013284:	e7e8      	b.n	8013258 <_setenv_r+0x74>
 8013286:	2201      	movs	r2, #1
 8013288:	4641      	mov	r1, r8
 801328a:	4628      	mov	r0, r5
 801328c:	601a      	str	r2, [r3, #0]
 801328e:	f7ff f87b 	bl	8012388 <_malloc_r>
 8013292:	4683      	mov	fp, r0
 8013294:	2800      	cmp	r0, #0
 8013296:	d0f0      	beq.n	801327a <_setenv_r+0x96>
 8013298:	f8da 1000 	ldr.w	r1, [sl]
 801329c:	f1a8 0208 	sub.w	r2, r8, #8
 80132a0:	f001 fca4 	bl	8014bec <memcpy>
 80132a4:	f8ca b000 	str.w	fp, [sl]
 80132a8:	f8da 3000 	ldr.w	r3, [sl]
 80132ac:	4443      	add	r3, r8
 80132ae:	2200      	movs	r2, #0
 80132b0:	f843 2c04 	str.w	r2, [r3, #-4]
 80132b4:	9401      	str	r4, [sp, #4]
 80132b6:	4633      	mov	r3, r6
 80132b8:	4619      	mov	r1, r3
 80132ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80132be:	b10a      	cbz	r2, 80132c4 <_setenv_r+0xe0>
 80132c0:	2a3d      	cmp	r2, #61	@ 0x3d
 80132c2:	d1f9      	bne.n	80132b8 <_setenv_r+0xd4>
 80132c4:	1b89      	subs	r1, r1, r6
 80132c6:	4c12      	ldr	r4, [pc, #72]	@ (8013310 <_setenv_r+0x12c>)
 80132c8:	f8dd a004 	ldr.w	sl, [sp, #4]
 80132cc:	f8d4 8000 	ldr.w	r8, [r4]
 80132d0:	4449      	add	r1, r9
 80132d2:	3102      	adds	r1, #2
 80132d4:	4628      	mov	r0, r5
 80132d6:	f7ff f857 	bl	8012388 <_malloc_r>
 80132da:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 80132de:	2800      	cmp	r0, #0
 80132e0:	d0cb      	beq.n	801327a <_setenv_r+0x96>
 80132e2:	6823      	ldr	r3, [r4, #0]
 80132e4:	9a01      	ldr	r2, [sp, #4]
 80132e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80132ea:	f816 1b01 	ldrb.w	r1, [r6], #1
 80132ee:	7011      	strb	r1, [r2, #0]
 80132f0:	4613      	mov	r3, r2
 80132f2:	3201      	adds	r2, #1
 80132f4:	b109      	cbz	r1, 80132fa <_setenv_r+0x116>
 80132f6:	293d      	cmp	r1, #61	@ 0x3d
 80132f8:	d1f7      	bne.n	80132ea <_setenv_r+0x106>
 80132fa:	223d      	movs	r2, #61	@ 0x3d
 80132fc:	701a      	strb	r2, [r3, #0]
 80132fe:	f817 2b01 	ldrb.w	r2, [r7], #1
 8013302:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013306:	2a00      	cmp	r2, #0
 8013308:	d1f9      	bne.n	80132fe <_setenv_r+0x11a>
 801330a:	e78e      	b.n	801322a <_setenv_r+0x46>
 801330c:	20000678 	.word	0x20000678
 8013310:	20000044 	.word	0x20000044

08013314 <__cvt>:
 8013314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013318:	ec57 6b10 	vmov	r6, r7, d0
 801331c:	2f00      	cmp	r7, #0
 801331e:	460c      	mov	r4, r1
 8013320:	4619      	mov	r1, r3
 8013322:	463b      	mov	r3, r7
 8013324:	bfbb      	ittet	lt
 8013326:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801332a:	461f      	movlt	r7, r3
 801332c:	2300      	movge	r3, #0
 801332e:	232d      	movlt	r3, #45	@ 0x2d
 8013330:	700b      	strb	r3, [r1, #0]
 8013332:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013334:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8013338:	4691      	mov	r9, r2
 801333a:	f023 0820 	bic.w	r8, r3, #32
 801333e:	bfbc      	itt	lt
 8013340:	4632      	movlt	r2, r6
 8013342:	4616      	movlt	r6, r2
 8013344:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013348:	d005      	beq.n	8013356 <__cvt+0x42>
 801334a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801334e:	d100      	bne.n	8013352 <__cvt+0x3e>
 8013350:	3401      	adds	r4, #1
 8013352:	2102      	movs	r1, #2
 8013354:	e000      	b.n	8013358 <__cvt+0x44>
 8013356:	2103      	movs	r1, #3
 8013358:	ab03      	add	r3, sp, #12
 801335a:	9301      	str	r3, [sp, #4]
 801335c:	ab02      	add	r3, sp, #8
 801335e:	9300      	str	r3, [sp, #0]
 8013360:	ec47 6b10 	vmov	d0, r6, r7
 8013364:	4653      	mov	r3, sl
 8013366:	4622      	mov	r2, r4
 8013368:	f001 fcee 	bl	8014d48 <_dtoa_r>
 801336c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8013370:	4605      	mov	r5, r0
 8013372:	d119      	bne.n	80133a8 <__cvt+0x94>
 8013374:	f019 0f01 	tst.w	r9, #1
 8013378:	d00e      	beq.n	8013398 <__cvt+0x84>
 801337a:	eb00 0904 	add.w	r9, r0, r4
 801337e:	2200      	movs	r2, #0
 8013380:	2300      	movs	r3, #0
 8013382:	4630      	mov	r0, r6
 8013384:	4639      	mov	r1, r7
 8013386:	f7ed fbcf 	bl	8000b28 <__aeabi_dcmpeq>
 801338a:	b108      	cbz	r0, 8013390 <__cvt+0x7c>
 801338c:	f8cd 900c 	str.w	r9, [sp, #12]
 8013390:	2230      	movs	r2, #48	@ 0x30
 8013392:	9b03      	ldr	r3, [sp, #12]
 8013394:	454b      	cmp	r3, r9
 8013396:	d31e      	bcc.n	80133d6 <__cvt+0xc2>
 8013398:	9b03      	ldr	r3, [sp, #12]
 801339a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801339c:	1b5b      	subs	r3, r3, r5
 801339e:	4628      	mov	r0, r5
 80133a0:	6013      	str	r3, [r2, #0]
 80133a2:	b004      	add	sp, #16
 80133a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80133ac:	eb00 0904 	add.w	r9, r0, r4
 80133b0:	d1e5      	bne.n	801337e <__cvt+0x6a>
 80133b2:	7803      	ldrb	r3, [r0, #0]
 80133b4:	2b30      	cmp	r3, #48	@ 0x30
 80133b6:	d10a      	bne.n	80133ce <__cvt+0xba>
 80133b8:	2200      	movs	r2, #0
 80133ba:	2300      	movs	r3, #0
 80133bc:	4630      	mov	r0, r6
 80133be:	4639      	mov	r1, r7
 80133c0:	f7ed fbb2 	bl	8000b28 <__aeabi_dcmpeq>
 80133c4:	b918      	cbnz	r0, 80133ce <__cvt+0xba>
 80133c6:	f1c4 0401 	rsb	r4, r4, #1
 80133ca:	f8ca 4000 	str.w	r4, [sl]
 80133ce:	f8da 3000 	ldr.w	r3, [sl]
 80133d2:	4499      	add	r9, r3
 80133d4:	e7d3      	b.n	801337e <__cvt+0x6a>
 80133d6:	1c59      	adds	r1, r3, #1
 80133d8:	9103      	str	r1, [sp, #12]
 80133da:	701a      	strb	r2, [r3, #0]
 80133dc:	e7d9      	b.n	8013392 <__cvt+0x7e>

080133de <__exponent>:
 80133de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80133e0:	2900      	cmp	r1, #0
 80133e2:	bfba      	itte	lt
 80133e4:	4249      	neglt	r1, r1
 80133e6:	232d      	movlt	r3, #45	@ 0x2d
 80133e8:	232b      	movge	r3, #43	@ 0x2b
 80133ea:	2909      	cmp	r1, #9
 80133ec:	7002      	strb	r2, [r0, #0]
 80133ee:	7043      	strb	r3, [r0, #1]
 80133f0:	dd29      	ble.n	8013446 <__exponent+0x68>
 80133f2:	f10d 0307 	add.w	r3, sp, #7
 80133f6:	461d      	mov	r5, r3
 80133f8:	270a      	movs	r7, #10
 80133fa:	461a      	mov	r2, r3
 80133fc:	fbb1 f6f7 	udiv	r6, r1, r7
 8013400:	fb07 1416 	mls	r4, r7, r6, r1
 8013404:	3430      	adds	r4, #48	@ 0x30
 8013406:	f802 4c01 	strb.w	r4, [r2, #-1]
 801340a:	460c      	mov	r4, r1
 801340c:	2c63      	cmp	r4, #99	@ 0x63
 801340e:	f103 33ff 	add.w	r3, r3, #4294967295
 8013412:	4631      	mov	r1, r6
 8013414:	dcf1      	bgt.n	80133fa <__exponent+0x1c>
 8013416:	3130      	adds	r1, #48	@ 0x30
 8013418:	1e94      	subs	r4, r2, #2
 801341a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801341e:	1c41      	adds	r1, r0, #1
 8013420:	4623      	mov	r3, r4
 8013422:	42ab      	cmp	r3, r5
 8013424:	d30a      	bcc.n	801343c <__exponent+0x5e>
 8013426:	f10d 0309 	add.w	r3, sp, #9
 801342a:	1a9b      	subs	r3, r3, r2
 801342c:	42ac      	cmp	r4, r5
 801342e:	bf88      	it	hi
 8013430:	2300      	movhi	r3, #0
 8013432:	3302      	adds	r3, #2
 8013434:	4403      	add	r3, r0
 8013436:	1a18      	subs	r0, r3, r0
 8013438:	b003      	add	sp, #12
 801343a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801343c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8013440:	f801 6f01 	strb.w	r6, [r1, #1]!
 8013444:	e7ed      	b.n	8013422 <__exponent+0x44>
 8013446:	2330      	movs	r3, #48	@ 0x30
 8013448:	3130      	adds	r1, #48	@ 0x30
 801344a:	7083      	strb	r3, [r0, #2]
 801344c:	70c1      	strb	r1, [r0, #3]
 801344e:	1d03      	adds	r3, r0, #4
 8013450:	e7f1      	b.n	8013436 <__exponent+0x58>
	...

08013454 <_printf_float>:
 8013454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013458:	b08d      	sub	sp, #52	@ 0x34
 801345a:	460c      	mov	r4, r1
 801345c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8013460:	4616      	mov	r6, r2
 8013462:	461f      	mov	r7, r3
 8013464:	4605      	mov	r5, r0
 8013466:	f001 faeb 	bl	8014a40 <_localeconv_r>
 801346a:	6803      	ldr	r3, [r0, #0]
 801346c:	9304      	str	r3, [sp, #16]
 801346e:	4618      	mov	r0, r3
 8013470:	f7ec ff2e 	bl	80002d0 <strlen>
 8013474:	2300      	movs	r3, #0
 8013476:	930a      	str	r3, [sp, #40]	@ 0x28
 8013478:	f8d8 3000 	ldr.w	r3, [r8]
 801347c:	9005      	str	r0, [sp, #20]
 801347e:	3307      	adds	r3, #7
 8013480:	f023 0307 	bic.w	r3, r3, #7
 8013484:	f103 0208 	add.w	r2, r3, #8
 8013488:	f894 a018 	ldrb.w	sl, [r4, #24]
 801348c:	f8d4 b000 	ldr.w	fp, [r4]
 8013490:	f8c8 2000 	str.w	r2, [r8]
 8013494:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013498:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801349c:	9307      	str	r3, [sp, #28]
 801349e:	f8cd 8018 	str.w	r8, [sp, #24]
 80134a2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80134a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80134aa:	4b9c      	ldr	r3, [pc, #624]	@ (801371c <_printf_float+0x2c8>)
 80134ac:	f04f 32ff 	mov.w	r2, #4294967295
 80134b0:	f7ed fb6c 	bl	8000b8c <__aeabi_dcmpun>
 80134b4:	bb70      	cbnz	r0, 8013514 <_printf_float+0xc0>
 80134b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80134ba:	4b98      	ldr	r3, [pc, #608]	@ (801371c <_printf_float+0x2c8>)
 80134bc:	f04f 32ff 	mov.w	r2, #4294967295
 80134c0:	f7ed fb46 	bl	8000b50 <__aeabi_dcmple>
 80134c4:	bb30      	cbnz	r0, 8013514 <_printf_float+0xc0>
 80134c6:	2200      	movs	r2, #0
 80134c8:	2300      	movs	r3, #0
 80134ca:	4640      	mov	r0, r8
 80134cc:	4649      	mov	r1, r9
 80134ce:	f7ed fb35 	bl	8000b3c <__aeabi_dcmplt>
 80134d2:	b110      	cbz	r0, 80134da <_printf_float+0x86>
 80134d4:	232d      	movs	r3, #45	@ 0x2d
 80134d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80134da:	4a91      	ldr	r2, [pc, #580]	@ (8013720 <_printf_float+0x2cc>)
 80134dc:	4b91      	ldr	r3, [pc, #580]	@ (8013724 <_printf_float+0x2d0>)
 80134de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80134e2:	bf8c      	ite	hi
 80134e4:	4690      	movhi	r8, r2
 80134e6:	4698      	movls	r8, r3
 80134e8:	2303      	movs	r3, #3
 80134ea:	6123      	str	r3, [r4, #16]
 80134ec:	f02b 0304 	bic.w	r3, fp, #4
 80134f0:	6023      	str	r3, [r4, #0]
 80134f2:	f04f 0900 	mov.w	r9, #0
 80134f6:	9700      	str	r7, [sp, #0]
 80134f8:	4633      	mov	r3, r6
 80134fa:	aa0b      	add	r2, sp, #44	@ 0x2c
 80134fc:	4621      	mov	r1, r4
 80134fe:	4628      	mov	r0, r5
 8013500:	f000 f9d2 	bl	80138a8 <_printf_common>
 8013504:	3001      	adds	r0, #1
 8013506:	f040 808d 	bne.w	8013624 <_printf_float+0x1d0>
 801350a:	f04f 30ff 	mov.w	r0, #4294967295
 801350e:	b00d      	add	sp, #52	@ 0x34
 8013510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013514:	4642      	mov	r2, r8
 8013516:	464b      	mov	r3, r9
 8013518:	4640      	mov	r0, r8
 801351a:	4649      	mov	r1, r9
 801351c:	f7ed fb36 	bl	8000b8c <__aeabi_dcmpun>
 8013520:	b140      	cbz	r0, 8013534 <_printf_float+0xe0>
 8013522:	464b      	mov	r3, r9
 8013524:	2b00      	cmp	r3, #0
 8013526:	bfbc      	itt	lt
 8013528:	232d      	movlt	r3, #45	@ 0x2d
 801352a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801352e:	4a7e      	ldr	r2, [pc, #504]	@ (8013728 <_printf_float+0x2d4>)
 8013530:	4b7e      	ldr	r3, [pc, #504]	@ (801372c <_printf_float+0x2d8>)
 8013532:	e7d4      	b.n	80134de <_printf_float+0x8a>
 8013534:	6863      	ldr	r3, [r4, #4]
 8013536:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801353a:	9206      	str	r2, [sp, #24]
 801353c:	1c5a      	adds	r2, r3, #1
 801353e:	d13b      	bne.n	80135b8 <_printf_float+0x164>
 8013540:	2306      	movs	r3, #6
 8013542:	6063      	str	r3, [r4, #4]
 8013544:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8013548:	2300      	movs	r3, #0
 801354a:	6022      	str	r2, [r4, #0]
 801354c:	9303      	str	r3, [sp, #12]
 801354e:	ab0a      	add	r3, sp, #40	@ 0x28
 8013550:	e9cd a301 	strd	sl, r3, [sp, #4]
 8013554:	ab09      	add	r3, sp, #36	@ 0x24
 8013556:	9300      	str	r3, [sp, #0]
 8013558:	6861      	ldr	r1, [r4, #4]
 801355a:	ec49 8b10 	vmov	d0, r8, r9
 801355e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8013562:	4628      	mov	r0, r5
 8013564:	f7ff fed6 	bl	8013314 <__cvt>
 8013568:	9b06      	ldr	r3, [sp, #24]
 801356a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801356c:	2b47      	cmp	r3, #71	@ 0x47
 801356e:	4680      	mov	r8, r0
 8013570:	d129      	bne.n	80135c6 <_printf_float+0x172>
 8013572:	1cc8      	adds	r0, r1, #3
 8013574:	db02      	blt.n	801357c <_printf_float+0x128>
 8013576:	6863      	ldr	r3, [r4, #4]
 8013578:	4299      	cmp	r1, r3
 801357a:	dd41      	ble.n	8013600 <_printf_float+0x1ac>
 801357c:	f1aa 0a02 	sub.w	sl, sl, #2
 8013580:	fa5f fa8a 	uxtb.w	sl, sl
 8013584:	3901      	subs	r1, #1
 8013586:	4652      	mov	r2, sl
 8013588:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801358c:	9109      	str	r1, [sp, #36]	@ 0x24
 801358e:	f7ff ff26 	bl	80133de <__exponent>
 8013592:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013594:	1813      	adds	r3, r2, r0
 8013596:	2a01      	cmp	r2, #1
 8013598:	4681      	mov	r9, r0
 801359a:	6123      	str	r3, [r4, #16]
 801359c:	dc02      	bgt.n	80135a4 <_printf_float+0x150>
 801359e:	6822      	ldr	r2, [r4, #0]
 80135a0:	07d2      	lsls	r2, r2, #31
 80135a2:	d501      	bpl.n	80135a8 <_printf_float+0x154>
 80135a4:	3301      	adds	r3, #1
 80135a6:	6123      	str	r3, [r4, #16]
 80135a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d0a2      	beq.n	80134f6 <_printf_float+0xa2>
 80135b0:	232d      	movs	r3, #45	@ 0x2d
 80135b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80135b6:	e79e      	b.n	80134f6 <_printf_float+0xa2>
 80135b8:	9a06      	ldr	r2, [sp, #24]
 80135ba:	2a47      	cmp	r2, #71	@ 0x47
 80135bc:	d1c2      	bne.n	8013544 <_printf_float+0xf0>
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d1c0      	bne.n	8013544 <_printf_float+0xf0>
 80135c2:	2301      	movs	r3, #1
 80135c4:	e7bd      	b.n	8013542 <_printf_float+0xee>
 80135c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80135ca:	d9db      	bls.n	8013584 <_printf_float+0x130>
 80135cc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80135d0:	d118      	bne.n	8013604 <_printf_float+0x1b0>
 80135d2:	2900      	cmp	r1, #0
 80135d4:	6863      	ldr	r3, [r4, #4]
 80135d6:	dd0b      	ble.n	80135f0 <_printf_float+0x19c>
 80135d8:	6121      	str	r1, [r4, #16]
 80135da:	b913      	cbnz	r3, 80135e2 <_printf_float+0x18e>
 80135dc:	6822      	ldr	r2, [r4, #0]
 80135de:	07d0      	lsls	r0, r2, #31
 80135e0:	d502      	bpl.n	80135e8 <_printf_float+0x194>
 80135e2:	3301      	adds	r3, #1
 80135e4:	440b      	add	r3, r1
 80135e6:	6123      	str	r3, [r4, #16]
 80135e8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80135ea:	f04f 0900 	mov.w	r9, #0
 80135ee:	e7db      	b.n	80135a8 <_printf_float+0x154>
 80135f0:	b913      	cbnz	r3, 80135f8 <_printf_float+0x1a4>
 80135f2:	6822      	ldr	r2, [r4, #0]
 80135f4:	07d2      	lsls	r2, r2, #31
 80135f6:	d501      	bpl.n	80135fc <_printf_float+0x1a8>
 80135f8:	3302      	adds	r3, #2
 80135fa:	e7f4      	b.n	80135e6 <_printf_float+0x192>
 80135fc:	2301      	movs	r3, #1
 80135fe:	e7f2      	b.n	80135e6 <_printf_float+0x192>
 8013600:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8013604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013606:	4299      	cmp	r1, r3
 8013608:	db05      	blt.n	8013616 <_printf_float+0x1c2>
 801360a:	6823      	ldr	r3, [r4, #0]
 801360c:	6121      	str	r1, [r4, #16]
 801360e:	07d8      	lsls	r0, r3, #31
 8013610:	d5ea      	bpl.n	80135e8 <_printf_float+0x194>
 8013612:	1c4b      	adds	r3, r1, #1
 8013614:	e7e7      	b.n	80135e6 <_printf_float+0x192>
 8013616:	2900      	cmp	r1, #0
 8013618:	bfd4      	ite	le
 801361a:	f1c1 0202 	rsble	r2, r1, #2
 801361e:	2201      	movgt	r2, #1
 8013620:	4413      	add	r3, r2
 8013622:	e7e0      	b.n	80135e6 <_printf_float+0x192>
 8013624:	6823      	ldr	r3, [r4, #0]
 8013626:	055a      	lsls	r2, r3, #21
 8013628:	d407      	bmi.n	801363a <_printf_float+0x1e6>
 801362a:	6923      	ldr	r3, [r4, #16]
 801362c:	4642      	mov	r2, r8
 801362e:	4631      	mov	r1, r6
 8013630:	4628      	mov	r0, r5
 8013632:	47b8      	blx	r7
 8013634:	3001      	adds	r0, #1
 8013636:	d12b      	bne.n	8013690 <_printf_float+0x23c>
 8013638:	e767      	b.n	801350a <_printf_float+0xb6>
 801363a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801363e:	f240 80dd 	bls.w	80137fc <_printf_float+0x3a8>
 8013642:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8013646:	2200      	movs	r2, #0
 8013648:	2300      	movs	r3, #0
 801364a:	f7ed fa6d 	bl	8000b28 <__aeabi_dcmpeq>
 801364e:	2800      	cmp	r0, #0
 8013650:	d033      	beq.n	80136ba <_printf_float+0x266>
 8013652:	4a37      	ldr	r2, [pc, #220]	@ (8013730 <_printf_float+0x2dc>)
 8013654:	2301      	movs	r3, #1
 8013656:	4631      	mov	r1, r6
 8013658:	4628      	mov	r0, r5
 801365a:	47b8      	blx	r7
 801365c:	3001      	adds	r0, #1
 801365e:	f43f af54 	beq.w	801350a <_printf_float+0xb6>
 8013662:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8013666:	4543      	cmp	r3, r8
 8013668:	db02      	blt.n	8013670 <_printf_float+0x21c>
 801366a:	6823      	ldr	r3, [r4, #0]
 801366c:	07d8      	lsls	r0, r3, #31
 801366e:	d50f      	bpl.n	8013690 <_printf_float+0x23c>
 8013670:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013674:	4631      	mov	r1, r6
 8013676:	4628      	mov	r0, r5
 8013678:	47b8      	blx	r7
 801367a:	3001      	adds	r0, #1
 801367c:	f43f af45 	beq.w	801350a <_printf_float+0xb6>
 8013680:	f04f 0900 	mov.w	r9, #0
 8013684:	f108 38ff 	add.w	r8, r8, #4294967295
 8013688:	f104 0a1a 	add.w	sl, r4, #26
 801368c:	45c8      	cmp	r8, r9
 801368e:	dc09      	bgt.n	80136a4 <_printf_float+0x250>
 8013690:	6823      	ldr	r3, [r4, #0]
 8013692:	079b      	lsls	r3, r3, #30
 8013694:	f100 8103 	bmi.w	801389e <_printf_float+0x44a>
 8013698:	68e0      	ldr	r0, [r4, #12]
 801369a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801369c:	4298      	cmp	r0, r3
 801369e:	bfb8      	it	lt
 80136a0:	4618      	movlt	r0, r3
 80136a2:	e734      	b.n	801350e <_printf_float+0xba>
 80136a4:	2301      	movs	r3, #1
 80136a6:	4652      	mov	r2, sl
 80136a8:	4631      	mov	r1, r6
 80136aa:	4628      	mov	r0, r5
 80136ac:	47b8      	blx	r7
 80136ae:	3001      	adds	r0, #1
 80136b0:	f43f af2b 	beq.w	801350a <_printf_float+0xb6>
 80136b4:	f109 0901 	add.w	r9, r9, #1
 80136b8:	e7e8      	b.n	801368c <_printf_float+0x238>
 80136ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80136bc:	2b00      	cmp	r3, #0
 80136be:	dc39      	bgt.n	8013734 <_printf_float+0x2e0>
 80136c0:	4a1b      	ldr	r2, [pc, #108]	@ (8013730 <_printf_float+0x2dc>)
 80136c2:	2301      	movs	r3, #1
 80136c4:	4631      	mov	r1, r6
 80136c6:	4628      	mov	r0, r5
 80136c8:	47b8      	blx	r7
 80136ca:	3001      	adds	r0, #1
 80136cc:	f43f af1d 	beq.w	801350a <_printf_float+0xb6>
 80136d0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80136d4:	ea59 0303 	orrs.w	r3, r9, r3
 80136d8:	d102      	bne.n	80136e0 <_printf_float+0x28c>
 80136da:	6823      	ldr	r3, [r4, #0]
 80136dc:	07d9      	lsls	r1, r3, #31
 80136de:	d5d7      	bpl.n	8013690 <_printf_float+0x23c>
 80136e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80136e4:	4631      	mov	r1, r6
 80136e6:	4628      	mov	r0, r5
 80136e8:	47b8      	blx	r7
 80136ea:	3001      	adds	r0, #1
 80136ec:	f43f af0d 	beq.w	801350a <_printf_float+0xb6>
 80136f0:	f04f 0a00 	mov.w	sl, #0
 80136f4:	f104 0b1a 	add.w	fp, r4, #26
 80136f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80136fa:	425b      	negs	r3, r3
 80136fc:	4553      	cmp	r3, sl
 80136fe:	dc01      	bgt.n	8013704 <_printf_float+0x2b0>
 8013700:	464b      	mov	r3, r9
 8013702:	e793      	b.n	801362c <_printf_float+0x1d8>
 8013704:	2301      	movs	r3, #1
 8013706:	465a      	mov	r2, fp
 8013708:	4631      	mov	r1, r6
 801370a:	4628      	mov	r0, r5
 801370c:	47b8      	blx	r7
 801370e:	3001      	adds	r0, #1
 8013710:	f43f aefb 	beq.w	801350a <_printf_float+0xb6>
 8013714:	f10a 0a01 	add.w	sl, sl, #1
 8013718:	e7ee      	b.n	80136f8 <_printf_float+0x2a4>
 801371a:	bf00      	nop
 801371c:	7fefffff 	.word	0x7fefffff
 8013720:	0801924e 	.word	0x0801924e
 8013724:	0801924a 	.word	0x0801924a
 8013728:	08019256 	.word	0x08019256
 801372c:	08019252 	.word	0x08019252
 8013730:	0801925a 	.word	0x0801925a
 8013734:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013736:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801373a:	4553      	cmp	r3, sl
 801373c:	bfa8      	it	ge
 801373e:	4653      	movge	r3, sl
 8013740:	2b00      	cmp	r3, #0
 8013742:	4699      	mov	r9, r3
 8013744:	dc36      	bgt.n	80137b4 <_printf_float+0x360>
 8013746:	f04f 0b00 	mov.w	fp, #0
 801374a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801374e:	f104 021a 	add.w	r2, r4, #26
 8013752:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013754:	9306      	str	r3, [sp, #24]
 8013756:	eba3 0309 	sub.w	r3, r3, r9
 801375a:	455b      	cmp	r3, fp
 801375c:	dc31      	bgt.n	80137c2 <_printf_float+0x36e>
 801375e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013760:	459a      	cmp	sl, r3
 8013762:	dc3a      	bgt.n	80137da <_printf_float+0x386>
 8013764:	6823      	ldr	r3, [r4, #0]
 8013766:	07da      	lsls	r2, r3, #31
 8013768:	d437      	bmi.n	80137da <_printf_float+0x386>
 801376a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801376c:	ebaa 0903 	sub.w	r9, sl, r3
 8013770:	9b06      	ldr	r3, [sp, #24]
 8013772:	ebaa 0303 	sub.w	r3, sl, r3
 8013776:	4599      	cmp	r9, r3
 8013778:	bfa8      	it	ge
 801377a:	4699      	movge	r9, r3
 801377c:	f1b9 0f00 	cmp.w	r9, #0
 8013780:	dc33      	bgt.n	80137ea <_printf_float+0x396>
 8013782:	f04f 0800 	mov.w	r8, #0
 8013786:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801378a:	f104 0b1a 	add.w	fp, r4, #26
 801378e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013790:	ebaa 0303 	sub.w	r3, sl, r3
 8013794:	eba3 0309 	sub.w	r3, r3, r9
 8013798:	4543      	cmp	r3, r8
 801379a:	f77f af79 	ble.w	8013690 <_printf_float+0x23c>
 801379e:	2301      	movs	r3, #1
 80137a0:	465a      	mov	r2, fp
 80137a2:	4631      	mov	r1, r6
 80137a4:	4628      	mov	r0, r5
 80137a6:	47b8      	blx	r7
 80137a8:	3001      	adds	r0, #1
 80137aa:	f43f aeae 	beq.w	801350a <_printf_float+0xb6>
 80137ae:	f108 0801 	add.w	r8, r8, #1
 80137b2:	e7ec      	b.n	801378e <_printf_float+0x33a>
 80137b4:	4642      	mov	r2, r8
 80137b6:	4631      	mov	r1, r6
 80137b8:	4628      	mov	r0, r5
 80137ba:	47b8      	blx	r7
 80137bc:	3001      	adds	r0, #1
 80137be:	d1c2      	bne.n	8013746 <_printf_float+0x2f2>
 80137c0:	e6a3      	b.n	801350a <_printf_float+0xb6>
 80137c2:	2301      	movs	r3, #1
 80137c4:	4631      	mov	r1, r6
 80137c6:	4628      	mov	r0, r5
 80137c8:	9206      	str	r2, [sp, #24]
 80137ca:	47b8      	blx	r7
 80137cc:	3001      	adds	r0, #1
 80137ce:	f43f ae9c 	beq.w	801350a <_printf_float+0xb6>
 80137d2:	9a06      	ldr	r2, [sp, #24]
 80137d4:	f10b 0b01 	add.w	fp, fp, #1
 80137d8:	e7bb      	b.n	8013752 <_printf_float+0x2fe>
 80137da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80137de:	4631      	mov	r1, r6
 80137e0:	4628      	mov	r0, r5
 80137e2:	47b8      	blx	r7
 80137e4:	3001      	adds	r0, #1
 80137e6:	d1c0      	bne.n	801376a <_printf_float+0x316>
 80137e8:	e68f      	b.n	801350a <_printf_float+0xb6>
 80137ea:	9a06      	ldr	r2, [sp, #24]
 80137ec:	464b      	mov	r3, r9
 80137ee:	4442      	add	r2, r8
 80137f0:	4631      	mov	r1, r6
 80137f2:	4628      	mov	r0, r5
 80137f4:	47b8      	blx	r7
 80137f6:	3001      	adds	r0, #1
 80137f8:	d1c3      	bne.n	8013782 <_printf_float+0x32e>
 80137fa:	e686      	b.n	801350a <_printf_float+0xb6>
 80137fc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013800:	f1ba 0f01 	cmp.w	sl, #1
 8013804:	dc01      	bgt.n	801380a <_printf_float+0x3b6>
 8013806:	07db      	lsls	r3, r3, #31
 8013808:	d536      	bpl.n	8013878 <_printf_float+0x424>
 801380a:	2301      	movs	r3, #1
 801380c:	4642      	mov	r2, r8
 801380e:	4631      	mov	r1, r6
 8013810:	4628      	mov	r0, r5
 8013812:	47b8      	blx	r7
 8013814:	3001      	adds	r0, #1
 8013816:	f43f ae78 	beq.w	801350a <_printf_float+0xb6>
 801381a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801381e:	4631      	mov	r1, r6
 8013820:	4628      	mov	r0, r5
 8013822:	47b8      	blx	r7
 8013824:	3001      	adds	r0, #1
 8013826:	f43f ae70 	beq.w	801350a <_printf_float+0xb6>
 801382a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801382e:	2200      	movs	r2, #0
 8013830:	2300      	movs	r3, #0
 8013832:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013836:	f7ed f977 	bl	8000b28 <__aeabi_dcmpeq>
 801383a:	b9c0      	cbnz	r0, 801386e <_printf_float+0x41a>
 801383c:	4653      	mov	r3, sl
 801383e:	f108 0201 	add.w	r2, r8, #1
 8013842:	4631      	mov	r1, r6
 8013844:	4628      	mov	r0, r5
 8013846:	47b8      	blx	r7
 8013848:	3001      	adds	r0, #1
 801384a:	d10c      	bne.n	8013866 <_printf_float+0x412>
 801384c:	e65d      	b.n	801350a <_printf_float+0xb6>
 801384e:	2301      	movs	r3, #1
 8013850:	465a      	mov	r2, fp
 8013852:	4631      	mov	r1, r6
 8013854:	4628      	mov	r0, r5
 8013856:	47b8      	blx	r7
 8013858:	3001      	adds	r0, #1
 801385a:	f43f ae56 	beq.w	801350a <_printf_float+0xb6>
 801385e:	f108 0801 	add.w	r8, r8, #1
 8013862:	45d0      	cmp	r8, sl
 8013864:	dbf3      	blt.n	801384e <_printf_float+0x3fa>
 8013866:	464b      	mov	r3, r9
 8013868:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801386c:	e6df      	b.n	801362e <_printf_float+0x1da>
 801386e:	f04f 0800 	mov.w	r8, #0
 8013872:	f104 0b1a 	add.w	fp, r4, #26
 8013876:	e7f4      	b.n	8013862 <_printf_float+0x40e>
 8013878:	2301      	movs	r3, #1
 801387a:	4642      	mov	r2, r8
 801387c:	e7e1      	b.n	8013842 <_printf_float+0x3ee>
 801387e:	2301      	movs	r3, #1
 8013880:	464a      	mov	r2, r9
 8013882:	4631      	mov	r1, r6
 8013884:	4628      	mov	r0, r5
 8013886:	47b8      	blx	r7
 8013888:	3001      	adds	r0, #1
 801388a:	f43f ae3e 	beq.w	801350a <_printf_float+0xb6>
 801388e:	f108 0801 	add.w	r8, r8, #1
 8013892:	68e3      	ldr	r3, [r4, #12]
 8013894:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013896:	1a5b      	subs	r3, r3, r1
 8013898:	4543      	cmp	r3, r8
 801389a:	dcf0      	bgt.n	801387e <_printf_float+0x42a>
 801389c:	e6fc      	b.n	8013698 <_printf_float+0x244>
 801389e:	f04f 0800 	mov.w	r8, #0
 80138a2:	f104 0919 	add.w	r9, r4, #25
 80138a6:	e7f4      	b.n	8013892 <_printf_float+0x43e>

080138a8 <_printf_common>:
 80138a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138ac:	4616      	mov	r6, r2
 80138ae:	4698      	mov	r8, r3
 80138b0:	688a      	ldr	r2, [r1, #8]
 80138b2:	690b      	ldr	r3, [r1, #16]
 80138b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80138b8:	4293      	cmp	r3, r2
 80138ba:	bfb8      	it	lt
 80138bc:	4613      	movlt	r3, r2
 80138be:	6033      	str	r3, [r6, #0]
 80138c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80138c4:	4607      	mov	r7, r0
 80138c6:	460c      	mov	r4, r1
 80138c8:	b10a      	cbz	r2, 80138ce <_printf_common+0x26>
 80138ca:	3301      	adds	r3, #1
 80138cc:	6033      	str	r3, [r6, #0]
 80138ce:	6823      	ldr	r3, [r4, #0]
 80138d0:	0699      	lsls	r1, r3, #26
 80138d2:	bf42      	ittt	mi
 80138d4:	6833      	ldrmi	r3, [r6, #0]
 80138d6:	3302      	addmi	r3, #2
 80138d8:	6033      	strmi	r3, [r6, #0]
 80138da:	6825      	ldr	r5, [r4, #0]
 80138dc:	f015 0506 	ands.w	r5, r5, #6
 80138e0:	d106      	bne.n	80138f0 <_printf_common+0x48>
 80138e2:	f104 0a19 	add.w	sl, r4, #25
 80138e6:	68e3      	ldr	r3, [r4, #12]
 80138e8:	6832      	ldr	r2, [r6, #0]
 80138ea:	1a9b      	subs	r3, r3, r2
 80138ec:	42ab      	cmp	r3, r5
 80138ee:	dc26      	bgt.n	801393e <_printf_common+0x96>
 80138f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80138f4:	6822      	ldr	r2, [r4, #0]
 80138f6:	3b00      	subs	r3, #0
 80138f8:	bf18      	it	ne
 80138fa:	2301      	movne	r3, #1
 80138fc:	0692      	lsls	r2, r2, #26
 80138fe:	d42b      	bmi.n	8013958 <_printf_common+0xb0>
 8013900:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013904:	4641      	mov	r1, r8
 8013906:	4638      	mov	r0, r7
 8013908:	47c8      	blx	r9
 801390a:	3001      	adds	r0, #1
 801390c:	d01e      	beq.n	801394c <_printf_common+0xa4>
 801390e:	6823      	ldr	r3, [r4, #0]
 8013910:	6922      	ldr	r2, [r4, #16]
 8013912:	f003 0306 	and.w	r3, r3, #6
 8013916:	2b04      	cmp	r3, #4
 8013918:	bf02      	ittt	eq
 801391a:	68e5      	ldreq	r5, [r4, #12]
 801391c:	6833      	ldreq	r3, [r6, #0]
 801391e:	1aed      	subeq	r5, r5, r3
 8013920:	68a3      	ldr	r3, [r4, #8]
 8013922:	bf0c      	ite	eq
 8013924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013928:	2500      	movne	r5, #0
 801392a:	4293      	cmp	r3, r2
 801392c:	bfc4      	itt	gt
 801392e:	1a9b      	subgt	r3, r3, r2
 8013930:	18ed      	addgt	r5, r5, r3
 8013932:	2600      	movs	r6, #0
 8013934:	341a      	adds	r4, #26
 8013936:	42b5      	cmp	r5, r6
 8013938:	d11a      	bne.n	8013970 <_printf_common+0xc8>
 801393a:	2000      	movs	r0, #0
 801393c:	e008      	b.n	8013950 <_printf_common+0xa8>
 801393e:	2301      	movs	r3, #1
 8013940:	4652      	mov	r2, sl
 8013942:	4641      	mov	r1, r8
 8013944:	4638      	mov	r0, r7
 8013946:	47c8      	blx	r9
 8013948:	3001      	adds	r0, #1
 801394a:	d103      	bne.n	8013954 <_printf_common+0xac>
 801394c:	f04f 30ff 	mov.w	r0, #4294967295
 8013950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013954:	3501      	adds	r5, #1
 8013956:	e7c6      	b.n	80138e6 <_printf_common+0x3e>
 8013958:	18e1      	adds	r1, r4, r3
 801395a:	1c5a      	adds	r2, r3, #1
 801395c:	2030      	movs	r0, #48	@ 0x30
 801395e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013962:	4422      	add	r2, r4
 8013964:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013968:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801396c:	3302      	adds	r3, #2
 801396e:	e7c7      	b.n	8013900 <_printf_common+0x58>
 8013970:	2301      	movs	r3, #1
 8013972:	4622      	mov	r2, r4
 8013974:	4641      	mov	r1, r8
 8013976:	4638      	mov	r0, r7
 8013978:	47c8      	blx	r9
 801397a:	3001      	adds	r0, #1
 801397c:	d0e6      	beq.n	801394c <_printf_common+0xa4>
 801397e:	3601      	adds	r6, #1
 8013980:	e7d9      	b.n	8013936 <_printf_common+0x8e>
	...

08013984 <_printf_i>:
 8013984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013988:	7e0f      	ldrb	r7, [r1, #24]
 801398a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801398c:	2f78      	cmp	r7, #120	@ 0x78
 801398e:	4691      	mov	r9, r2
 8013990:	4680      	mov	r8, r0
 8013992:	460c      	mov	r4, r1
 8013994:	469a      	mov	sl, r3
 8013996:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801399a:	d807      	bhi.n	80139ac <_printf_i+0x28>
 801399c:	2f62      	cmp	r7, #98	@ 0x62
 801399e:	d80a      	bhi.n	80139b6 <_printf_i+0x32>
 80139a0:	2f00      	cmp	r7, #0
 80139a2:	f000 80d1 	beq.w	8013b48 <_printf_i+0x1c4>
 80139a6:	2f58      	cmp	r7, #88	@ 0x58
 80139a8:	f000 80b8 	beq.w	8013b1c <_printf_i+0x198>
 80139ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80139b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80139b4:	e03a      	b.n	8013a2c <_printf_i+0xa8>
 80139b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80139ba:	2b15      	cmp	r3, #21
 80139bc:	d8f6      	bhi.n	80139ac <_printf_i+0x28>
 80139be:	a101      	add	r1, pc, #4	@ (adr r1, 80139c4 <_printf_i+0x40>)
 80139c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80139c4:	08013a1d 	.word	0x08013a1d
 80139c8:	08013a31 	.word	0x08013a31
 80139cc:	080139ad 	.word	0x080139ad
 80139d0:	080139ad 	.word	0x080139ad
 80139d4:	080139ad 	.word	0x080139ad
 80139d8:	080139ad 	.word	0x080139ad
 80139dc:	08013a31 	.word	0x08013a31
 80139e0:	080139ad 	.word	0x080139ad
 80139e4:	080139ad 	.word	0x080139ad
 80139e8:	080139ad 	.word	0x080139ad
 80139ec:	080139ad 	.word	0x080139ad
 80139f0:	08013b2f 	.word	0x08013b2f
 80139f4:	08013a5b 	.word	0x08013a5b
 80139f8:	08013ae9 	.word	0x08013ae9
 80139fc:	080139ad 	.word	0x080139ad
 8013a00:	080139ad 	.word	0x080139ad
 8013a04:	08013b51 	.word	0x08013b51
 8013a08:	080139ad 	.word	0x080139ad
 8013a0c:	08013a5b 	.word	0x08013a5b
 8013a10:	080139ad 	.word	0x080139ad
 8013a14:	080139ad 	.word	0x080139ad
 8013a18:	08013af1 	.word	0x08013af1
 8013a1c:	6833      	ldr	r3, [r6, #0]
 8013a1e:	1d1a      	adds	r2, r3, #4
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	6032      	str	r2, [r6, #0]
 8013a24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013a28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013a2c:	2301      	movs	r3, #1
 8013a2e:	e09c      	b.n	8013b6a <_printf_i+0x1e6>
 8013a30:	6833      	ldr	r3, [r6, #0]
 8013a32:	6820      	ldr	r0, [r4, #0]
 8013a34:	1d19      	adds	r1, r3, #4
 8013a36:	6031      	str	r1, [r6, #0]
 8013a38:	0606      	lsls	r6, r0, #24
 8013a3a:	d501      	bpl.n	8013a40 <_printf_i+0xbc>
 8013a3c:	681d      	ldr	r5, [r3, #0]
 8013a3e:	e003      	b.n	8013a48 <_printf_i+0xc4>
 8013a40:	0645      	lsls	r5, r0, #25
 8013a42:	d5fb      	bpl.n	8013a3c <_printf_i+0xb8>
 8013a44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013a48:	2d00      	cmp	r5, #0
 8013a4a:	da03      	bge.n	8013a54 <_printf_i+0xd0>
 8013a4c:	232d      	movs	r3, #45	@ 0x2d
 8013a4e:	426d      	negs	r5, r5
 8013a50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013a54:	4858      	ldr	r0, [pc, #352]	@ (8013bb8 <_printf_i+0x234>)
 8013a56:	230a      	movs	r3, #10
 8013a58:	e011      	b.n	8013a7e <_printf_i+0xfa>
 8013a5a:	6821      	ldr	r1, [r4, #0]
 8013a5c:	6833      	ldr	r3, [r6, #0]
 8013a5e:	0608      	lsls	r0, r1, #24
 8013a60:	f853 5b04 	ldr.w	r5, [r3], #4
 8013a64:	d402      	bmi.n	8013a6c <_printf_i+0xe8>
 8013a66:	0649      	lsls	r1, r1, #25
 8013a68:	bf48      	it	mi
 8013a6a:	b2ad      	uxthmi	r5, r5
 8013a6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8013a6e:	4852      	ldr	r0, [pc, #328]	@ (8013bb8 <_printf_i+0x234>)
 8013a70:	6033      	str	r3, [r6, #0]
 8013a72:	bf14      	ite	ne
 8013a74:	230a      	movne	r3, #10
 8013a76:	2308      	moveq	r3, #8
 8013a78:	2100      	movs	r1, #0
 8013a7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013a7e:	6866      	ldr	r6, [r4, #4]
 8013a80:	60a6      	str	r6, [r4, #8]
 8013a82:	2e00      	cmp	r6, #0
 8013a84:	db05      	blt.n	8013a92 <_printf_i+0x10e>
 8013a86:	6821      	ldr	r1, [r4, #0]
 8013a88:	432e      	orrs	r6, r5
 8013a8a:	f021 0104 	bic.w	r1, r1, #4
 8013a8e:	6021      	str	r1, [r4, #0]
 8013a90:	d04b      	beq.n	8013b2a <_printf_i+0x1a6>
 8013a92:	4616      	mov	r6, r2
 8013a94:	fbb5 f1f3 	udiv	r1, r5, r3
 8013a98:	fb03 5711 	mls	r7, r3, r1, r5
 8013a9c:	5dc7      	ldrb	r7, [r0, r7]
 8013a9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013aa2:	462f      	mov	r7, r5
 8013aa4:	42bb      	cmp	r3, r7
 8013aa6:	460d      	mov	r5, r1
 8013aa8:	d9f4      	bls.n	8013a94 <_printf_i+0x110>
 8013aaa:	2b08      	cmp	r3, #8
 8013aac:	d10b      	bne.n	8013ac6 <_printf_i+0x142>
 8013aae:	6823      	ldr	r3, [r4, #0]
 8013ab0:	07df      	lsls	r7, r3, #31
 8013ab2:	d508      	bpl.n	8013ac6 <_printf_i+0x142>
 8013ab4:	6923      	ldr	r3, [r4, #16]
 8013ab6:	6861      	ldr	r1, [r4, #4]
 8013ab8:	4299      	cmp	r1, r3
 8013aba:	bfde      	ittt	le
 8013abc:	2330      	movle	r3, #48	@ 0x30
 8013abe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013ac2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013ac6:	1b92      	subs	r2, r2, r6
 8013ac8:	6122      	str	r2, [r4, #16]
 8013aca:	f8cd a000 	str.w	sl, [sp]
 8013ace:	464b      	mov	r3, r9
 8013ad0:	aa03      	add	r2, sp, #12
 8013ad2:	4621      	mov	r1, r4
 8013ad4:	4640      	mov	r0, r8
 8013ad6:	f7ff fee7 	bl	80138a8 <_printf_common>
 8013ada:	3001      	adds	r0, #1
 8013adc:	d14a      	bne.n	8013b74 <_printf_i+0x1f0>
 8013ade:	f04f 30ff 	mov.w	r0, #4294967295
 8013ae2:	b004      	add	sp, #16
 8013ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ae8:	6823      	ldr	r3, [r4, #0]
 8013aea:	f043 0320 	orr.w	r3, r3, #32
 8013aee:	6023      	str	r3, [r4, #0]
 8013af0:	4832      	ldr	r0, [pc, #200]	@ (8013bbc <_printf_i+0x238>)
 8013af2:	2778      	movs	r7, #120	@ 0x78
 8013af4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013af8:	6823      	ldr	r3, [r4, #0]
 8013afa:	6831      	ldr	r1, [r6, #0]
 8013afc:	061f      	lsls	r7, r3, #24
 8013afe:	f851 5b04 	ldr.w	r5, [r1], #4
 8013b02:	d402      	bmi.n	8013b0a <_printf_i+0x186>
 8013b04:	065f      	lsls	r7, r3, #25
 8013b06:	bf48      	it	mi
 8013b08:	b2ad      	uxthmi	r5, r5
 8013b0a:	6031      	str	r1, [r6, #0]
 8013b0c:	07d9      	lsls	r1, r3, #31
 8013b0e:	bf44      	itt	mi
 8013b10:	f043 0320 	orrmi.w	r3, r3, #32
 8013b14:	6023      	strmi	r3, [r4, #0]
 8013b16:	b11d      	cbz	r5, 8013b20 <_printf_i+0x19c>
 8013b18:	2310      	movs	r3, #16
 8013b1a:	e7ad      	b.n	8013a78 <_printf_i+0xf4>
 8013b1c:	4826      	ldr	r0, [pc, #152]	@ (8013bb8 <_printf_i+0x234>)
 8013b1e:	e7e9      	b.n	8013af4 <_printf_i+0x170>
 8013b20:	6823      	ldr	r3, [r4, #0]
 8013b22:	f023 0320 	bic.w	r3, r3, #32
 8013b26:	6023      	str	r3, [r4, #0]
 8013b28:	e7f6      	b.n	8013b18 <_printf_i+0x194>
 8013b2a:	4616      	mov	r6, r2
 8013b2c:	e7bd      	b.n	8013aaa <_printf_i+0x126>
 8013b2e:	6833      	ldr	r3, [r6, #0]
 8013b30:	6825      	ldr	r5, [r4, #0]
 8013b32:	6961      	ldr	r1, [r4, #20]
 8013b34:	1d18      	adds	r0, r3, #4
 8013b36:	6030      	str	r0, [r6, #0]
 8013b38:	062e      	lsls	r6, r5, #24
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	d501      	bpl.n	8013b42 <_printf_i+0x1be>
 8013b3e:	6019      	str	r1, [r3, #0]
 8013b40:	e002      	b.n	8013b48 <_printf_i+0x1c4>
 8013b42:	0668      	lsls	r0, r5, #25
 8013b44:	d5fb      	bpl.n	8013b3e <_printf_i+0x1ba>
 8013b46:	8019      	strh	r1, [r3, #0]
 8013b48:	2300      	movs	r3, #0
 8013b4a:	6123      	str	r3, [r4, #16]
 8013b4c:	4616      	mov	r6, r2
 8013b4e:	e7bc      	b.n	8013aca <_printf_i+0x146>
 8013b50:	6833      	ldr	r3, [r6, #0]
 8013b52:	1d1a      	adds	r2, r3, #4
 8013b54:	6032      	str	r2, [r6, #0]
 8013b56:	681e      	ldr	r6, [r3, #0]
 8013b58:	6862      	ldr	r2, [r4, #4]
 8013b5a:	2100      	movs	r1, #0
 8013b5c:	4630      	mov	r0, r6
 8013b5e:	f7ec fb67 	bl	8000230 <memchr>
 8013b62:	b108      	cbz	r0, 8013b68 <_printf_i+0x1e4>
 8013b64:	1b80      	subs	r0, r0, r6
 8013b66:	6060      	str	r0, [r4, #4]
 8013b68:	6863      	ldr	r3, [r4, #4]
 8013b6a:	6123      	str	r3, [r4, #16]
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013b72:	e7aa      	b.n	8013aca <_printf_i+0x146>
 8013b74:	6923      	ldr	r3, [r4, #16]
 8013b76:	4632      	mov	r2, r6
 8013b78:	4649      	mov	r1, r9
 8013b7a:	4640      	mov	r0, r8
 8013b7c:	47d0      	blx	sl
 8013b7e:	3001      	adds	r0, #1
 8013b80:	d0ad      	beq.n	8013ade <_printf_i+0x15a>
 8013b82:	6823      	ldr	r3, [r4, #0]
 8013b84:	079b      	lsls	r3, r3, #30
 8013b86:	d413      	bmi.n	8013bb0 <_printf_i+0x22c>
 8013b88:	68e0      	ldr	r0, [r4, #12]
 8013b8a:	9b03      	ldr	r3, [sp, #12]
 8013b8c:	4298      	cmp	r0, r3
 8013b8e:	bfb8      	it	lt
 8013b90:	4618      	movlt	r0, r3
 8013b92:	e7a6      	b.n	8013ae2 <_printf_i+0x15e>
 8013b94:	2301      	movs	r3, #1
 8013b96:	4632      	mov	r2, r6
 8013b98:	4649      	mov	r1, r9
 8013b9a:	4640      	mov	r0, r8
 8013b9c:	47d0      	blx	sl
 8013b9e:	3001      	adds	r0, #1
 8013ba0:	d09d      	beq.n	8013ade <_printf_i+0x15a>
 8013ba2:	3501      	adds	r5, #1
 8013ba4:	68e3      	ldr	r3, [r4, #12]
 8013ba6:	9903      	ldr	r1, [sp, #12]
 8013ba8:	1a5b      	subs	r3, r3, r1
 8013baa:	42ab      	cmp	r3, r5
 8013bac:	dcf2      	bgt.n	8013b94 <_printf_i+0x210>
 8013bae:	e7eb      	b.n	8013b88 <_printf_i+0x204>
 8013bb0:	2500      	movs	r5, #0
 8013bb2:	f104 0619 	add.w	r6, r4, #25
 8013bb6:	e7f5      	b.n	8013ba4 <_printf_i+0x220>
 8013bb8:	0801925c 	.word	0x0801925c
 8013bbc:	0801926d 	.word	0x0801926d

08013bc0 <_scanf_float>:
 8013bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bc4:	b087      	sub	sp, #28
 8013bc6:	4691      	mov	r9, r2
 8013bc8:	9303      	str	r3, [sp, #12]
 8013bca:	688b      	ldr	r3, [r1, #8]
 8013bcc:	1e5a      	subs	r2, r3, #1
 8013bce:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8013bd2:	bf81      	itttt	hi
 8013bd4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8013bd8:	eb03 0b05 	addhi.w	fp, r3, r5
 8013bdc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8013be0:	608b      	strhi	r3, [r1, #8]
 8013be2:	680b      	ldr	r3, [r1, #0]
 8013be4:	460a      	mov	r2, r1
 8013be6:	f04f 0500 	mov.w	r5, #0
 8013bea:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8013bee:	f842 3b1c 	str.w	r3, [r2], #28
 8013bf2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8013bf6:	4680      	mov	r8, r0
 8013bf8:	460c      	mov	r4, r1
 8013bfa:	bf98      	it	ls
 8013bfc:	f04f 0b00 	movls.w	fp, #0
 8013c00:	9201      	str	r2, [sp, #4]
 8013c02:	4616      	mov	r6, r2
 8013c04:	46aa      	mov	sl, r5
 8013c06:	462f      	mov	r7, r5
 8013c08:	9502      	str	r5, [sp, #8]
 8013c0a:	68a2      	ldr	r2, [r4, #8]
 8013c0c:	b15a      	cbz	r2, 8013c26 <_scanf_float+0x66>
 8013c0e:	f8d9 3000 	ldr.w	r3, [r9]
 8013c12:	781b      	ldrb	r3, [r3, #0]
 8013c14:	2b4e      	cmp	r3, #78	@ 0x4e
 8013c16:	d863      	bhi.n	8013ce0 <_scanf_float+0x120>
 8013c18:	2b40      	cmp	r3, #64	@ 0x40
 8013c1a:	d83b      	bhi.n	8013c94 <_scanf_float+0xd4>
 8013c1c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8013c20:	b2c8      	uxtb	r0, r1
 8013c22:	280e      	cmp	r0, #14
 8013c24:	d939      	bls.n	8013c9a <_scanf_float+0xda>
 8013c26:	b11f      	cbz	r7, 8013c30 <_scanf_float+0x70>
 8013c28:	6823      	ldr	r3, [r4, #0]
 8013c2a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013c2e:	6023      	str	r3, [r4, #0]
 8013c30:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013c34:	f1ba 0f01 	cmp.w	sl, #1
 8013c38:	f200 8114 	bhi.w	8013e64 <_scanf_float+0x2a4>
 8013c3c:	9b01      	ldr	r3, [sp, #4]
 8013c3e:	429e      	cmp	r6, r3
 8013c40:	f200 8105 	bhi.w	8013e4e <_scanf_float+0x28e>
 8013c44:	2001      	movs	r0, #1
 8013c46:	b007      	add	sp, #28
 8013c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c4c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8013c50:	2a0d      	cmp	r2, #13
 8013c52:	d8e8      	bhi.n	8013c26 <_scanf_float+0x66>
 8013c54:	a101      	add	r1, pc, #4	@ (adr r1, 8013c5c <_scanf_float+0x9c>)
 8013c56:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013c5a:	bf00      	nop
 8013c5c:	08013da5 	.word	0x08013da5
 8013c60:	08013c27 	.word	0x08013c27
 8013c64:	08013c27 	.word	0x08013c27
 8013c68:	08013c27 	.word	0x08013c27
 8013c6c:	08013e01 	.word	0x08013e01
 8013c70:	08013ddb 	.word	0x08013ddb
 8013c74:	08013c27 	.word	0x08013c27
 8013c78:	08013c27 	.word	0x08013c27
 8013c7c:	08013db3 	.word	0x08013db3
 8013c80:	08013c27 	.word	0x08013c27
 8013c84:	08013c27 	.word	0x08013c27
 8013c88:	08013c27 	.word	0x08013c27
 8013c8c:	08013c27 	.word	0x08013c27
 8013c90:	08013d6f 	.word	0x08013d6f
 8013c94:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8013c98:	e7da      	b.n	8013c50 <_scanf_float+0x90>
 8013c9a:	290e      	cmp	r1, #14
 8013c9c:	d8c3      	bhi.n	8013c26 <_scanf_float+0x66>
 8013c9e:	a001      	add	r0, pc, #4	@ (adr r0, 8013ca4 <_scanf_float+0xe4>)
 8013ca0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8013ca4:	08013d5f 	.word	0x08013d5f
 8013ca8:	08013c27 	.word	0x08013c27
 8013cac:	08013d5f 	.word	0x08013d5f
 8013cb0:	08013def 	.word	0x08013def
 8013cb4:	08013c27 	.word	0x08013c27
 8013cb8:	08013d01 	.word	0x08013d01
 8013cbc:	08013d45 	.word	0x08013d45
 8013cc0:	08013d45 	.word	0x08013d45
 8013cc4:	08013d45 	.word	0x08013d45
 8013cc8:	08013d45 	.word	0x08013d45
 8013ccc:	08013d45 	.word	0x08013d45
 8013cd0:	08013d45 	.word	0x08013d45
 8013cd4:	08013d45 	.word	0x08013d45
 8013cd8:	08013d45 	.word	0x08013d45
 8013cdc:	08013d45 	.word	0x08013d45
 8013ce0:	2b6e      	cmp	r3, #110	@ 0x6e
 8013ce2:	d809      	bhi.n	8013cf8 <_scanf_float+0x138>
 8013ce4:	2b60      	cmp	r3, #96	@ 0x60
 8013ce6:	d8b1      	bhi.n	8013c4c <_scanf_float+0x8c>
 8013ce8:	2b54      	cmp	r3, #84	@ 0x54
 8013cea:	d07b      	beq.n	8013de4 <_scanf_float+0x224>
 8013cec:	2b59      	cmp	r3, #89	@ 0x59
 8013cee:	d19a      	bne.n	8013c26 <_scanf_float+0x66>
 8013cf0:	2d07      	cmp	r5, #7
 8013cf2:	d198      	bne.n	8013c26 <_scanf_float+0x66>
 8013cf4:	2508      	movs	r5, #8
 8013cf6:	e02f      	b.n	8013d58 <_scanf_float+0x198>
 8013cf8:	2b74      	cmp	r3, #116	@ 0x74
 8013cfa:	d073      	beq.n	8013de4 <_scanf_float+0x224>
 8013cfc:	2b79      	cmp	r3, #121	@ 0x79
 8013cfe:	e7f6      	b.n	8013cee <_scanf_float+0x12e>
 8013d00:	6821      	ldr	r1, [r4, #0]
 8013d02:	05c8      	lsls	r0, r1, #23
 8013d04:	d51e      	bpl.n	8013d44 <_scanf_float+0x184>
 8013d06:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8013d0a:	6021      	str	r1, [r4, #0]
 8013d0c:	3701      	adds	r7, #1
 8013d0e:	f1bb 0f00 	cmp.w	fp, #0
 8013d12:	d003      	beq.n	8013d1c <_scanf_float+0x15c>
 8013d14:	3201      	adds	r2, #1
 8013d16:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013d1a:	60a2      	str	r2, [r4, #8]
 8013d1c:	68a3      	ldr	r3, [r4, #8]
 8013d1e:	3b01      	subs	r3, #1
 8013d20:	60a3      	str	r3, [r4, #8]
 8013d22:	6923      	ldr	r3, [r4, #16]
 8013d24:	3301      	adds	r3, #1
 8013d26:	6123      	str	r3, [r4, #16]
 8013d28:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013d2c:	3b01      	subs	r3, #1
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	f8c9 3004 	str.w	r3, [r9, #4]
 8013d34:	f340 8082 	ble.w	8013e3c <_scanf_float+0x27c>
 8013d38:	f8d9 3000 	ldr.w	r3, [r9]
 8013d3c:	3301      	adds	r3, #1
 8013d3e:	f8c9 3000 	str.w	r3, [r9]
 8013d42:	e762      	b.n	8013c0a <_scanf_float+0x4a>
 8013d44:	eb1a 0105 	adds.w	r1, sl, r5
 8013d48:	f47f af6d 	bne.w	8013c26 <_scanf_float+0x66>
 8013d4c:	6822      	ldr	r2, [r4, #0]
 8013d4e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8013d52:	6022      	str	r2, [r4, #0]
 8013d54:	460d      	mov	r5, r1
 8013d56:	468a      	mov	sl, r1
 8013d58:	f806 3b01 	strb.w	r3, [r6], #1
 8013d5c:	e7de      	b.n	8013d1c <_scanf_float+0x15c>
 8013d5e:	6822      	ldr	r2, [r4, #0]
 8013d60:	0610      	lsls	r0, r2, #24
 8013d62:	f57f af60 	bpl.w	8013c26 <_scanf_float+0x66>
 8013d66:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8013d6a:	6022      	str	r2, [r4, #0]
 8013d6c:	e7f4      	b.n	8013d58 <_scanf_float+0x198>
 8013d6e:	f1ba 0f00 	cmp.w	sl, #0
 8013d72:	d10c      	bne.n	8013d8e <_scanf_float+0x1ce>
 8013d74:	b977      	cbnz	r7, 8013d94 <_scanf_float+0x1d4>
 8013d76:	6822      	ldr	r2, [r4, #0]
 8013d78:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8013d7c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8013d80:	d108      	bne.n	8013d94 <_scanf_float+0x1d4>
 8013d82:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013d86:	6022      	str	r2, [r4, #0]
 8013d88:	f04f 0a01 	mov.w	sl, #1
 8013d8c:	e7e4      	b.n	8013d58 <_scanf_float+0x198>
 8013d8e:	f1ba 0f02 	cmp.w	sl, #2
 8013d92:	d050      	beq.n	8013e36 <_scanf_float+0x276>
 8013d94:	2d01      	cmp	r5, #1
 8013d96:	d002      	beq.n	8013d9e <_scanf_float+0x1de>
 8013d98:	2d04      	cmp	r5, #4
 8013d9a:	f47f af44 	bne.w	8013c26 <_scanf_float+0x66>
 8013d9e:	3501      	adds	r5, #1
 8013da0:	b2ed      	uxtb	r5, r5
 8013da2:	e7d9      	b.n	8013d58 <_scanf_float+0x198>
 8013da4:	f1ba 0f01 	cmp.w	sl, #1
 8013da8:	f47f af3d 	bne.w	8013c26 <_scanf_float+0x66>
 8013dac:	f04f 0a02 	mov.w	sl, #2
 8013db0:	e7d2      	b.n	8013d58 <_scanf_float+0x198>
 8013db2:	b975      	cbnz	r5, 8013dd2 <_scanf_float+0x212>
 8013db4:	2f00      	cmp	r7, #0
 8013db6:	f47f af37 	bne.w	8013c28 <_scanf_float+0x68>
 8013dba:	6822      	ldr	r2, [r4, #0]
 8013dbc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8013dc0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8013dc4:	f040 8103 	bne.w	8013fce <_scanf_float+0x40e>
 8013dc8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013dcc:	6022      	str	r2, [r4, #0]
 8013dce:	2501      	movs	r5, #1
 8013dd0:	e7c2      	b.n	8013d58 <_scanf_float+0x198>
 8013dd2:	2d03      	cmp	r5, #3
 8013dd4:	d0e3      	beq.n	8013d9e <_scanf_float+0x1de>
 8013dd6:	2d05      	cmp	r5, #5
 8013dd8:	e7df      	b.n	8013d9a <_scanf_float+0x1da>
 8013dda:	2d02      	cmp	r5, #2
 8013ddc:	f47f af23 	bne.w	8013c26 <_scanf_float+0x66>
 8013de0:	2503      	movs	r5, #3
 8013de2:	e7b9      	b.n	8013d58 <_scanf_float+0x198>
 8013de4:	2d06      	cmp	r5, #6
 8013de6:	f47f af1e 	bne.w	8013c26 <_scanf_float+0x66>
 8013dea:	2507      	movs	r5, #7
 8013dec:	e7b4      	b.n	8013d58 <_scanf_float+0x198>
 8013dee:	6822      	ldr	r2, [r4, #0]
 8013df0:	0591      	lsls	r1, r2, #22
 8013df2:	f57f af18 	bpl.w	8013c26 <_scanf_float+0x66>
 8013df6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8013dfa:	6022      	str	r2, [r4, #0]
 8013dfc:	9702      	str	r7, [sp, #8]
 8013dfe:	e7ab      	b.n	8013d58 <_scanf_float+0x198>
 8013e00:	6822      	ldr	r2, [r4, #0]
 8013e02:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8013e06:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8013e0a:	d005      	beq.n	8013e18 <_scanf_float+0x258>
 8013e0c:	0550      	lsls	r0, r2, #21
 8013e0e:	f57f af0a 	bpl.w	8013c26 <_scanf_float+0x66>
 8013e12:	2f00      	cmp	r7, #0
 8013e14:	f000 80db 	beq.w	8013fce <_scanf_float+0x40e>
 8013e18:	0591      	lsls	r1, r2, #22
 8013e1a:	bf58      	it	pl
 8013e1c:	9902      	ldrpl	r1, [sp, #8]
 8013e1e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013e22:	bf58      	it	pl
 8013e24:	1a79      	subpl	r1, r7, r1
 8013e26:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8013e2a:	bf58      	it	pl
 8013e2c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8013e30:	6022      	str	r2, [r4, #0]
 8013e32:	2700      	movs	r7, #0
 8013e34:	e790      	b.n	8013d58 <_scanf_float+0x198>
 8013e36:	f04f 0a03 	mov.w	sl, #3
 8013e3a:	e78d      	b.n	8013d58 <_scanf_float+0x198>
 8013e3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013e40:	4649      	mov	r1, r9
 8013e42:	4640      	mov	r0, r8
 8013e44:	4798      	blx	r3
 8013e46:	2800      	cmp	r0, #0
 8013e48:	f43f aedf 	beq.w	8013c0a <_scanf_float+0x4a>
 8013e4c:	e6eb      	b.n	8013c26 <_scanf_float+0x66>
 8013e4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013e52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013e56:	464a      	mov	r2, r9
 8013e58:	4640      	mov	r0, r8
 8013e5a:	4798      	blx	r3
 8013e5c:	6923      	ldr	r3, [r4, #16]
 8013e5e:	3b01      	subs	r3, #1
 8013e60:	6123      	str	r3, [r4, #16]
 8013e62:	e6eb      	b.n	8013c3c <_scanf_float+0x7c>
 8013e64:	1e6b      	subs	r3, r5, #1
 8013e66:	2b06      	cmp	r3, #6
 8013e68:	d824      	bhi.n	8013eb4 <_scanf_float+0x2f4>
 8013e6a:	2d02      	cmp	r5, #2
 8013e6c:	d836      	bhi.n	8013edc <_scanf_float+0x31c>
 8013e6e:	9b01      	ldr	r3, [sp, #4]
 8013e70:	429e      	cmp	r6, r3
 8013e72:	f67f aee7 	bls.w	8013c44 <_scanf_float+0x84>
 8013e76:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013e7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013e7e:	464a      	mov	r2, r9
 8013e80:	4640      	mov	r0, r8
 8013e82:	4798      	blx	r3
 8013e84:	6923      	ldr	r3, [r4, #16]
 8013e86:	3b01      	subs	r3, #1
 8013e88:	6123      	str	r3, [r4, #16]
 8013e8a:	e7f0      	b.n	8013e6e <_scanf_float+0x2ae>
 8013e8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013e90:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8013e94:	464a      	mov	r2, r9
 8013e96:	4640      	mov	r0, r8
 8013e98:	4798      	blx	r3
 8013e9a:	6923      	ldr	r3, [r4, #16]
 8013e9c:	3b01      	subs	r3, #1
 8013e9e:	6123      	str	r3, [r4, #16]
 8013ea0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013ea4:	fa5f fa8a 	uxtb.w	sl, sl
 8013ea8:	f1ba 0f02 	cmp.w	sl, #2
 8013eac:	d1ee      	bne.n	8013e8c <_scanf_float+0x2cc>
 8013eae:	3d03      	subs	r5, #3
 8013eb0:	b2ed      	uxtb	r5, r5
 8013eb2:	1b76      	subs	r6, r6, r5
 8013eb4:	6823      	ldr	r3, [r4, #0]
 8013eb6:	05da      	lsls	r2, r3, #23
 8013eb8:	d530      	bpl.n	8013f1c <_scanf_float+0x35c>
 8013eba:	055b      	lsls	r3, r3, #21
 8013ebc:	d511      	bpl.n	8013ee2 <_scanf_float+0x322>
 8013ebe:	9b01      	ldr	r3, [sp, #4]
 8013ec0:	429e      	cmp	r6, r3
 8013ec2:	f67f aebf 	bls.w	8013c44 <_scanf_float+0x84>
 8013ec6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013eca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013ece:	464a      	mov	r2, r9
 8013ed0:	4640      	mov	r0, r8
 8013ed2:	4798      	blx	r3
 8013ed4:	6923      	ldr	r3, [r4, #16]
 8013ed6:	3b01      	subs	r3, #1
 8013ed8:	6123      	str	r3, [r4, #16]
 8013eda:	e7f0      	b.n	8013ebe <_scanf_float+0x2fe>
 8013edc:	46aa      	mov	sl, r5
 8013ede:	46b3      	mov	fp, r6
 8013ee0:	e7de      	b.n	8013ea0 <_scanf_float+0x2e0>
 8013ee2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8013ee6:	6923      	ldr	r3, [r4, #16]
 8013ee8:	2965      	cmp	r1, #101	@ 0x65
 8013eea:	f103 33ff 	add.w	r3, r3, #4294967295
 8013eee:	f106 35ff 	add.w	r5, r6, #4294967295
 8013ef2:	6123      	str	r3, [r4, #16]
 8013ef4:	d00c      	beq.n	8013f10 <_scanf_float+0x350>
 8013ef6:	2945      	cmp	r1, #69	@ 0x45
 8013ef8:	d00a      	beq.n	8013f10 <_scanf_float+0x350>
 8013efa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013efe:	464a      	mov	r2, r9
 8013f00:	4640      	mov	r0, r8
 8013f02:	4798      	blx	r3
 8013f04:	6923      	ldr	r3, [r4, #16]
 8013f06:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8013f0a:	3b01      	subs	r3, #1
 8013f0c:	1eb5      	subs	r5, r6, #2
 8013f0e:	6123      	str	r3, [r4, #16]
 8013f10:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013f14:	464a      	mov	r2, r9
 8013f16:	4640      	mov	r0, r8
 8013f18:	4798      	blx	r3
 8013f1a:	462e      	mov	r6, r5
 8013f1c:	6822      	ldr	r2, [r4, #0]
 8013f1e:	f012 0210 	ands.w	r2, r2, #16
 8013f22:	d001      	beq.n	8013f28 <_scanf_float+0x368>
 8013f24:	2000      	movs	r0, #0
 8013f26:	e68e      	b.n	8013c46 <_scanf_float+0x86>
 8013f28:	7032      	strb	r2, [r6, #0]
 8013f2a:	6823      	ldr	r3, [r4, #0]
 8013f2c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8013f30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013f34:	d125      	bne.n	8013f82 <_scanf_float+0x3c2>
 8013f36:	9b02      	ldr	r3, [sp, #8]
 8013f38:	429f      	cmp	r7, r3
 8013f3a:	d00a      	beq.n	8013f52 <_scanf_float+0x392>
 8013f3c:	1bda      	subs	r2, r3, r7
 8013f3e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8013f42:	429e      	cmp	r6, r3
 8013f44:	bf28      	it	cs
 8013f46:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8013f4a:	4922      	ldr	r1, [pc, #136]	@ (8013fd4 <_scanf_float+0x414>)
 8013f4c:	4630      	mov	r0, r6
 8013f4e:	f000 fb09 	bl	8014564 <siprintf>
 8013f52:	9901      	ldr	r1, [sp, #4]
 8013f54:	2200      	movs	r2, #0
 8013f56:	4640      	mov	r0, r8
 8013f58:	f7ff f8a2 	bl	80130a0 <_strtod_r>
 8013f5c:	9b03      	ldr	r3, [sp, #12]
 8013f5e:	6821      	ldr	r1, [r4, #0]
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	f011 0f02 	tst.w	r1, #2
 8013f66:	ec57 6b10 	vmov	r6, r7, d0
 8013f6a:	f103 0204 	add.w	r2, r3, #4
 8013f6e:	d015      	beq.n	8013f9c <_scanf_float+0x3dc>
 8013f70:	9903      	ldr	r1, [sp, #12]
 8013f72:	600a      	str	r2, [r1, #0]
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	e9c3 6700 	strd	r6, r7, [r3]
 8013f7a:	68e3      	ldr	r3, [r4, #12]
 8013f7c:	3301      	adds	r3, #1
 8013f7e:	60e3      	str	r3, [r4, #12]
 8013f80:	e7d0      	b.n	8013f24 <_scanf_float+0x364>
 8013f82:	9b04      	ldr	r3, [sp, #16]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d0e4      	beq.n	8013f52 <_scanf_float+0x392>
 8013f88:	9905      	ldr	r1, [sp, #20]
 8013f8a:	230a      	movs	r3, #10
 8013f8c:	3101      	adds	r1, #1
 8013f8e:	4640      	mov	r0, r8
 8013f90:	f7ff f912 	bl	80131b8 <_strtol_r>
 8013f94:	9b04      	ldr	r3, [sp, #16]
 8013f96:	9e05      	ldr	r6, [sp, #20]
 8013f98:	1ac2      	subs	r2, r0, r3
 8013f9a:	e7d0      	b.n	8013f3e <_scanf_float+0x37e>
 8013f9c:	f011 0f04 	tst.w	r1, #4
 8013fa0:	9903      	ldr	r1, [sp, #12]
 8013fa2:	600a      	str	r2, [r1, #0]
 8013fa4:	d1e6      	bne.n	8013f74 <_scanf_float+0x3b4>
 8013fa6:	681d      	ldr	r5, [r3, #0]
 8013fa8:	4632      	mov	r2, r6
 8013faa:	463b      	mov	r3, r7
 8013fac:	4630      	mov	r0, r6
 8013fae:	4639      	mov	r1, r7
 8013fb0:	f7ec fdec 	bl	8000b8c <__aeabi_dcmpun>
 8013fb4:	b128      	cbz	r0, 8013fc2 <_scanf_float+0x402>
 8013fb6:	4808      	ldr	r0, [pc, #32]	@ (8013fd8 <_scanf_float+0x418>)
 8013fb8:	f000 fe2e 	bl	8014c18 <nanf>
 8013fbc:	ed85 0a00 	vstr	s0, [r5]
 8013fc0:	e7db      	b.n	8013f7a <_scanf_float+0x3ba>
 8013fc2:	4630      	mov	r0, r6
 8013fc4:	4639      	mov	r1, r7
 8013fc6:	f7ec fe3f 	bl	8000c48 <__aeabi_d2f>
 8013fca:	6028      	str	r0, [r5, #0]
 8013fcc:	e7d5      	b.n	8013f7a <_scanf_float+0x3ba>
 8013fce:	2700      	movs	r7, #0
 8013fd0:	e62e      	b.n	8013c30 <_scanf_float+0x70>
 8013fd2:	bf00      	nop
 8013fd4:	0801927e 	.word	0x0801927e
 8013fd8:	08019247 	.word	0x08019247

08013fdc <_fclose_r>:
 8013fdc:	b570      	push	{r4, r5, r6, lr}
 8013fde:	4605      	mov	r5, r0
 8013fe0:	460c      	mov	r4, r1
 8013fe2:	b1b9      	cbz	r1, 8014014 <_fclose_r+0x38>
 8013fe4:	b118      	cbz	r0, 8013fee <_fclose_r+0x12>
 8013fe6:	6a03      	ldr	r3, [r0, #32]
 8013fe8:	b90b      	cbnz	r3, 8013fee <_fclose_r+0x12>
 8013fea:	f000 f9f3 	bl	80143d4 <__sinit>
 8013fee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013ff0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ff4:	07d6      	lsls	r6, r2, #31
 8013ff6:	d404      	bmi.n	8014002 <_fclose_r+0x26>
 8013ff8:	0598      	lsls	r0, r3, #22
 8013ffa:	d40e      	bmi.n	801401a <_fclose_r+0x3e>
 8013ffc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013ffe:	f000 fdf3 	bl	8014be8 <__retarget_lock_acquire_recursive>
 8014002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014006:	b943      	cbnz	r3, 801401a <_fclose_r+0x3e>
 8014008:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801400a:	07d9      	lsls	r1, r3, #31
 801400c:	d402      	bmi.n	8014014 <_fclose_r+0x38>
 801400e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014010:	f000 fdeb 	bl	8014bea <__retarget_lock_release_recursive>
 8014014:	2600      	movs	r6, #0
 8014016:	4630      	mov	r0, r6
 8014018:	bd70      	pop	{r4, r5, r6, pc}
 801401a:	4621      	mov	r1, r4
 801401c:	4628      	mov	r0, r5
 801401e:	f000 f83b 	bl	8014098 <__sflush_r>
 8014022:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014024:	4606      	mov	r6, r0
 8014026:	b133      	cbz	r3, 8014036 <_fclose_r+0x5a>
 8014028:	6a21      	ldr	r1, [r4, #32]
 801402a:	4628      	mov	r0, r5
 801402c:	4798      	blx	r3
 801402e:	2800      	cmp	r0, #0
 8014030:	bfb8      	it	lt
 8014032:	f04f 36ff 	movlt.w	r6, #4294967295
 8014036:	89a3      	ldrh	r3, [r4, #12]
 8014038:	061a      	lsls	r2, r3, #24
 801403a:	d503      	bpl.n	8014044 <_fclose_r+0x68>
 801403c:	6921      	ldr	r1, [r4, #16]
 801403e:	4628      	mov	r0, r5
 8014040:	f001 fc52 	bl	80158e8 <_free_r>
 8014044:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014046:	b141      	cbz	r1, 801405a <_fclose_r+0x7e>
 8014048:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801404c:	4299      	cmp	r1, r3
 801404e:	d002      	beq.n	8014056 <_fclose_r+0x7a>
 8014050:	4628      	mov	r0, r5
 8014052:	f001 fc49 	bl	80158e8 <_free_r>
 8014056:	2300      	movs	r3, #0
 8014058:	6363      	str	r3, [r4, #52]	@ 0x34
 801405a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801405c:	b121      	cbz	r1, 8014068 <_fclose_r+0x8c>
 801405e:	4628      	mov	r0, r5
 8014060:	f001 fc42 	bl	80158e8 <_free_r>
 8014064:	2300      	movs	r3, #0
 8014066:	64a3      	str	r3, [r4, #72]	@ 0x48
 8014068:	f000 f956 	bl	8014318 <__sfp_lock_acquire>
 801406c:	2300      	movs	r3, #0
 801406e:	81a3      	strh	r3, [r4, #12]
 8014070:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014072:	07db      	lsls	r3, r3, #31
 8014074:	d402      	bmi.n	801407c <_fclose_r+0xa0>
 8014076:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014078:	f000 fdb7 	bl	8014bea <__retarget_lock_release_recursive>
 801407c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801407e:	f000 fdb2 	bl	8014be6 <__retarget_lock_close_recursive>
 8014082:	f000 f94f 	bl	8014324 <__sfp_lock_release>
 8014086:	e7c6      	b.n	8014016 <_fclose_r+0x3a>

08014088 <fclose>:
 8014088:	4b02      	ldr	r3, [pc, #8]	@ (8014094 <fclose+0xc>)
 801408a:	4601      	mov	r1, r0
 801408c:	6818      	ldr	r0, [r3, #0]
 801408e:	f7ff bfa5 	b.w	8013fdc <_fclose_r>
 8014092:	bf00      	nop
 8014094:	200001d4 	.word	0x200001d4

08014098 <__sflush_r>:
 8014098:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801409c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140a0:	0716      	lsls	r6, r2, #28
 80140a2:	4605      	mov	r5, r0
 80140a4:	460c      	mov	r4, r1
 80140a6:	d454      	bmi.n	8014152 <__sflush_r+0xba>
 80140a8:	684b      	ldr	r3, [r1, #4]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	dc02      	bgt.n	80140b4 <__sflush_r+0x1c>
 80140ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	dd48      	ble.n	8014146 <__sflush_r+0xae>
 80140b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80140b6:	2e00      	cmp	r6, #0
 80140b8:	d045      	beq.n	8014146 <__sflush_r+0xae>
 80140ba:	2300      	movs	r3, #0
 80140bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80140c0:	682f      	ldr	r7, [r5, #0]
 80140c2:	6a21      	ldr	r1, [r4, #32]
 80140c4:	602b      	str	r3, [r5, #0]
 80140c6:	d030      	beq.n	801412a <__sflush_r+0x92>
 80140c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80140ca:	89a3      	ldrh	r3, [r4, #12]
 80140cc:	0759      	lsls	r1, r3, #29
 80140ce:	d505      	bpl.n	80140dc <__sflush_r+0x44>
 80140d0:	6863      	ldr	r3, [r4, #4]
 80140d2:	1ad2      	subs	r2, r2, r3
 80140d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80140d6:	b10b      	cbz	r3, 80140dc <__sflush_r+0x44>
 80140d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80140da:	1ad2      	subs	r2, r2, r3
 80140dc:	2300      	movs	r3, #0
 80140de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80140e0:	6a21      	ldr	r1, [r4, #32]
 80140e2:	4628      	mov	r0, r5
 80140e4:	47b0      	blx	r6
 80140e6:	1c43      	adds	r3, r0, #1
 80140e8:	89a3      	ldrh	r3, [r4, #12]
 80140ea:	d106      	bne.n	80140fa <__sflush_r+0x62>
 80140ec:	6829      	ldr	r1, [r5, #0]
 80140ee:	291d      	cmp	r1, #29
 80140f0:	d82b      	bhi.n	801414a <__sflush_r+0xb2>
 80140f2:	4a2a      	ldr	r2, [pc, #168]	@ (801419c <__sflush_r+0x104>)
 80140f4:	40ca      	lsrs	r2, r1
 80140f6:	07d6      	lsls	r6, r2, #31
 80140f8:	d527      	bpl.n	801414a <__sflush_r+0xb2>
 80140fa:	2200      	movs	r2, #0
 80140fc:	6062      	str	r2, [r4, #4]
 80140fe:	04d9      	lsls	r1, r3, #19
 8014100:	6922      	ldr	r2, [r4, #16]
 8014102:	6022      	str	r2, [r4, #0]
 8014104:	d504      	bpl.n	8014110 <__sflush_r+0x78>
 8014106:	1c42      	adds	r2, r0, #1
 8014108:	d101      	bne.n	801410e <__sflush_r+0x76>
 801410a:	682b      	ldr	r3, [r5, #0]
 801410c:	b903      	cbnz	r3, 8014110 <__sflush_r+0x78>
 801410e:	6560      	str	r0, [r4, #84]	@ 0x54
 8014110:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014112:	602f      	str	r7, [r5, #0]
 8014114:	b1b9      	cbz	r1, 8014146 <__sflush_r+0xae>
 8014116:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801411a:	4299      	cmp	r1, r3
 801411c:	d002      	beq.n	8014124 <__sflush_r+0x8c>
 801411e:	4628      	mov	r0, r5
 8014120:	f001 fbe2 	bl	80158e8 <_free_r>
 8014124:	2300      	movs	r3, #0
 8014126:	6363      	str	r3, [r4, #52]	@ 0x34
 8014128:	e00d      	b.n	8014146 <__sflush_r+0xae>
 801412a:	2301      	movs	r3, #1
 801412c:	4628      	mov	r0, r5
 801412e:	47b0      	blx	r6
 8014130:	4602      	mov	r2, r0
 8014132:	1c50      	adds	r0, r2, #1
 8014134:	d1c9      	bne.n	80140ca <__sflush_r+0x32>
 8014136:	682b      	ldr	r3, [r5, #0]
 8014138:	2b00      	cmp	r3, #0
 801413a:	d0c6      	beq.n	80140ca <__sflush_r+0x32>
 801413c:	2b1d      	cmp	r3, #29
 801413e:	d001      	beq.n	8014144 <__sflush_r+0xac>
 8014140:	2b16      	cmp	r3, #22
 8014142:	d11e      	bne.n	8014182 <__sflush_r+0xea>
 8014144:	602f      	str	r7, [r5, #0]
 8014146:	2000      	movs	r0, #0
 8014148:	e022      	b.n	8014190 <__sflush_r+0xf8>
 801414a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801414e:	b21b      	sxth	r3, r3
 8014150:	e01b      	b.n	801418a <__sflush_r+0xf2>
 8014152:	690f      	ldr	r7, [r1, #16]
 8014154:	2f00      	cmp	r7, #0
 8014156:	d0f6      	beq.n	8014146 <__sflush_r+0xae>
 8014158:	0793      	lsls	r3, r2, #30
 801415a:	680e      	ldr	r6, [r1, #0]
 801415c:	bf08      	it	eq
 801415e:	694b      	ldreq	r3, [r1, #20]
 8014160:	600f      	str	r7, [r1, #0]
 8014162:	bf18      	it	ne
 8014164:	2300      	movne	r3, #0
 8014166:	eba6 0807 	sub.w	r8, r6, r7
 801416a:	608b      	str	r3, [r1, #8]
 801416c:	f1b8 0f00 	cmp.w	r8, #0
 8014170:	dde9      	ble.n	8014146 <__sflush_r+0xae>
 8014172:	6a21      	ldr	r1, [r4, #32]
 8014174:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014176:	4643      	mov	r3, r8
 8014178:	463a      	mov	r2, r7
 801417a:	4628      	mov	r0, r5
 801417c:	47b0      	blx	r6
 801417e:	2800      	cmp	r0, #0
 8014180:	dc08      	bgt.n	8014194 <__sflush_r+0xfc>
 8014182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014186:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801418a:	81a3      	strh	r3, [r4, #12]
 801418c:	f04f 30ff 	mov.w	r0, #4294967295
 8014190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014194:	4407      	add	r7, r0
 8014196:	eba8 0800 	sub.w	r8, r8, r0
 801419a:	e7e7      	b.n	801416c <__sflush_r+0xd4>
 801419c:	20400001 	.word	0x20400001

080141a0 <_fflush_r>:
 80141a0:	b538      	push	{r3, r4, r5, lr}
 80141a2:	690b      	ldr	r3, [r1, #16]
 80141a4:	4605      	mov	r5, r0
 80141a6:	460c      	mov	r4, r1
 80141a8:	b913      	cbnz	r3, 80141b0 <_fflush_r+0x10>
 80141aa:	2500      	movs	r5, #0
 80141ac:	4628      	mov	r0, r5
 80141ae:	bd38      	pop	{r3, r4, r5, pc}
 80141b0:	b118      	cbz	r0, 80141ba <_fflush_r+0x1a>
 80141b2:	6a03      	ldr	r3, [r0, #32]
 80141b4:	b90b      	cbnz	r3, 80141ba <_fflush_r+0x1a>
 80141b6:	f000 f90d 	bl	80143d4 <__sinit>
 80141ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d0f3      	beq.n	80141aa <_fflush_r+0xa>
 80141c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80141c4:	07d0      	lsls	r0, r2, #31
 80141c6:	d404      	bmi.n	80141d2 <_fflush_r+0x32>
 80141c8:	0599      	lsls	r1, r3, #22
 80141ca:	d402      	bmi.n	80141d2 <_fflush_r+0x32>
 80141cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80141ce:	f000 fd0b 	bl	8014be8 <__retarget_lock_acquire_recursive>
 80141d2:	4628      	mov	r0, r5
 80141d4:	4621      	mov	r1, r4
 80141d6:	f7ff ff5f 	bl	8014098 <__sflush_r>
 80141da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80141dc:	07da      	lsls	r2, r3, #31
 80141de:	4605      	mov	r5, r0
 80141e0:	d4e4      	bmi.n	80141ac <_fflush_r+0xc>
 80141e2:	89a3      	ldrh	r3, [r4, #12]
 80141e4:	059b      	lsls	r3, r3, #22
 80141e6:	d4e1      	bmi.n	80141ac <_fflush_r+0xc>
 80141e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80141ea:	f000 fcfe 	bl	8014bea <__retarget_lock_release_recursive>
 80141ee:	e7dd      	b.n	80141ac <_fflush_r+0xc>

080141f0 <fflush>:
 80141f0:	4601      	mov	r1, r0
 80141f2:	b920      	cbnz	r0, 80141fe <fflush+0xe>
 80141f4:	4a04      	ldr	r2, [pc, #16]	@ (8014208 <fflush+0x18>)
 80141f6:	4905      	ldr	r1, [pc, #20]	@ (801420c <fflush+0x1c>)
 80141f8:	4805      	ldr	r0, [pc, #20]	@ (8014210 <fflush+0x20>)
 80141fa:	f000 b915 	b.w	8014428 <_fwalk_sglue>
 80141fe:	4b05      	ldr	r3, [pc, #20]	@ (8014214 <fflush+0x24>)
 8014200:	6818      	ldr	r0, [r3, #0]
 8014202:	f7ff bfcd 	b.w	80141a0 <_fflush_r>
 8014206:	bf00      	nop
 8014208:	2000005c 	.word	0x2000005c
 801420c:	080141a1 	.word	0x080141a1
 8014210:	200001d8 	.word	0x200001d8
 8014214:	200001d4 	.word	0x200001d4

08014218 <std>:
 8014218:	2300      	movs	r3, #0
 801421a:	b510      	push	{r4, lr}
 801421c:	4604      	mov	r4, r0
 801421e:	e9c0 3300 	strd	r3, r3, [r0]
 8014222:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014226:	6083      	str	r3, [r0, #8]
 8014228:	8181      	strh	r1, [r0, #12]
 801422a:	6643      	str	r3, [r0, #100]	@ 0x64
 801422c:	81c2      	strh	r2, [r0, #14]
 801422e:	6183      	str	r3, [r0, #24]
 8014230:	4619      	mov	r1, r3
 8014232:	2208      	movs	r2, #8
 8014234:	305c      	adds	r0, #92	@ 0x5c
 8014236:	f000 fb73 	bl	8014920 <memset>
 801423a:	4b0d      	ldr	r3, [pc, #52]	@ (8014270 <std+0x58>)
 801423c:	6263      	str	r3, [r4, #36]	@ 0x24
 801423e:	4b0d      	ldr	r3, [pc, #52]	@ (8014274 <std+0x5c>)
 8014240:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014242:	4b0d      	ldr	r3, [pc, #52]	@ (8014278 <std+0x60>)
 8014244:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014246:	4b0d      	ldr	r3, [pc, #52]	@ (801427c <std+0x64>)
 8014248:	6323      	str	r3, [r4, #48]	@ 0x30
 801424a:	4b0d      	ldr	r3, [pc, #52]	@ (8014280 <std+0x68>)
 801424c:	6224      	str	r4, [r4, #32]
 801424e:	429c      	cmp	r4, r3
 8014250:	d006      	beq.n	8014260 <std+0x48>
 8014252:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014256:	4294      	cmp	r4, r2
 8014258:	d002      	beq.n	8014260 <std+0x48>
 801425a:	33d0      	adds	r3, #208	@ 0xd0
 801425c:	429c      	cmp	r4, r3
 801425e:	d105      	bne.n	801426c <std+0x54>
 8014260:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014268:	f000 bcbc 	b.w	8014be4 <__retarget_lock_init_recursive>
 801426c:	bd10      	pop	{r4, pc}
 801426e:	bf00      	nop
 8014270:	080145a9 	.word	0x080145a9
 8014274:	080145cb 	.word	0x080145cb
 8014278:	08014603 	.word	0x08014603
 801427c:	08014627 	.word	0x08014627
 8014280:	2000067c 	.word	0x2000067c

08014284 <stdio_exit_handler>:
 8014284:	4a02      	ldr	r2, [pc, #8]	@ (8014290 <stdio_exit_handler+0xc>)
 8014286:	4903      	ldr	r1, [pc, #12]	@ (8014294 <stdio_exit_handler+0x10>)
 8014288:	4803      	ldr	r0, [pc, #12]	@ (8014298 <stdio_exit_handler+0x14>)
 801428a:	f000 b8cd 	b.w	8014428 <_fwalk_sglue>
 801428e:	bf00      	nop
 8014290:	2000005c 	.word	0x2000005c
 8014294:	080141a1 	.word	0x080141a1
 8014298:	200001d8 	.word	0x200001d8

0801429c <cleanup_stdio>:
 801429c:	6841      	ldr	r1, [r0, #4]
 801429e:	4b0c      	ldr	r3, [pc, #48]	@ (80142d0 <cleanup_stdio+0x34>)
 80142a0:	4299      	cmp	r1, r3
 80142a2:	b510      	push	{r4, lr}
 80142a4:	4604      	mov	r4, r0
 80142a6:	d001      	beq.n	80142ac <cleanup_stdio+0x10>
 80142a8:	f7ff ff7a 	bl	80141a0 <_fflush_r>
 80142ac:	68a1      	ldr	r1, [r4, #8]
 80142ae:	4b09      	ldr	r3, [pc, #36]	@ (80142d4 <cleanup_stdio+0x38>)
 80142b0:	4299      	cmp	r1, r3
 80142b2:	d002      	beq.n	80142ba <cleanup_stdio+0x1e>
 80142b4:	4620      	mov	r0, r4
 80142b6:	f7ff ff73 	bl	80141a0 <_fflush_r>
 80142ba:	68e1      	ldr	r1, [r4, #12]
 80142bc:	4b06      	ldr	r3, [pc, #24]	@ (80142d8 <cleanup_stdio+0x3c>)
 80142be:	4299      	cmp	r1, r3
 80142c0:	d004      	beq.n	80142cc <cleanup_stdio+0x30>
 80142c2:	4620      	mov	r0, r4
 80142c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80142c8:	f7ff bf6a 	b.w	80141a0 <_fflush_r>
 80142cc:	bd10      	pop	{r4, pc}
 80142ce:	bf00      	nop
 80142d0:	2000067c 	.word	0x2000067c
 80142d4:	200006e4 	.word	0x200006e4
 80142d8:	2000074c 	.word	0x2000074c

080142dc <global_stdio_init.part.0>:
 80142dc:	b510      	push	{r4, lr}
 80142de:	4b0b      	ldr	r3, [pc, #44]	@ (801430c <global_stdio_init.part.0+0x30>)
 80142e0:	4c0b      	ldr	r4, [pc, #44]	@ (8014310 <global_stdio_init.part.0+0x34>)
 80142e2:	4a0c      	ldr	r2, [pc, #48]	@ (8014314 <global_stdio_init.part.0+0x38>)
 80142e4:	601a      	str	r2, [r3, #0]
 80142e6:	4620      	mov	r0, r4
 80142e8:	2200      	movs	r2, #0
 80142ea:	2104      	movs	r1, #4
 80142ec:	f7ff ff94 	bl	8014218 <std>
 80142f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80142f4:	2201      	movs	r2, #1
 80142f6:	2109      	movs	r1, #9
 80142f8:	f7ff ff8e 	bl	8014218 <std>
 80142fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014300:	2202      	movs	r2, #2
 8014302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014306:	2112      	movs	r1, #18
 8014308:	f7ff bf86 	b.w	8014218 <std>
 801430c:	200007b4 	.word	0x200007b4
 8014310:	2000067c 	.word	0x2000067c
 8014314:	08014285 	.word	0x08014285

08014318 <__sfp_lock_acquire>:
 8014318:	4801      	ldr	r0, [pc, #4]	@ (8014320 <__sfp_lock_acquire+0x8>)
 801431a:	f000 bc65 	b.w	8014be8 <__retarget_lock_acquire_recursive>
 801431e:	bf00      	nop
 8014320:	200007bc 	.word	0x200007bc

08014324 <__sfp_lock_release>:
 8014324:	4801      	ldr	r0, [pc, #4]	@ (801432c <__sfp_lock_release+0x8>)
 8014326:	f000 bc60 	b.w	8014bea <__retarget_lock_release_recursive>
 801432a:	bf00      	nop
 801432c:	200007bc 	.word	0x200007bc

08014330 <__sfp>:
 8014330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014332:	4607      	mov	r7, r0
 8014334:	f7ff fff0 	bl	8014318 <__sfp_lock_acquire>
 8014338:	4b23      	ldr	r3, [pc, #140]	@ (80143c8 <__sfp+0x98>)
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	b90b      	cbnz	r3, 8014342 <__sfp+0x12>
 801433e:	f7ff ffcd 	bl	80142dc <global_stdio_init.part.0>
 8014342:	4e22      	ldr	r6, [pc, #136]	@ (80143cc <__sfp+0x9c>)
 8014344:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014348:	3b01      	subs	r3, #1
 801434a:	d50f      	bpl.n	801436c <__sfp+0x3c>
 801434c:	6835      	ldr	r5, [r6, #0]
 801434e:	2d00      	cmp	r5, #0
 8014350:	d137      	bne.n	80143c2 <__sfp+0x92>
 8014352:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8014356:	4638      	mov	r0, r7
 8014358:	f7fe f816 	bl	8012388 <_malloc_r>
 801435c:	4604      	mov	r4, r0
 801435e:	bb28      	cbnz	r0, 80143ac <__sfp+0x7c>
 8014360:	6030      	str	r0, [r6, #0]
 8014362:	f7ff ffdf 	bl	8014324 <__sfp_lock_release>
 8014366:	230c      	movs	r3, #12
 8014368:	603b      	str	r3, [r7, #0]
 801436a:	e01b      	b.n	80143a4 <__sfp+0x74>
 801436c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014370:	b9d5      	cbnz	r5, 80143a8 <__sfp+0x78>
 8014372:	4b17      	ldr	r3, [pc, #92]	@ (80143d0 <__sfp+0xa0>)
 8014374:	60e3      	str	r3, [r4, #12]
 8014376:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801437a:	6665      	str	r5, [r4, #100]	@ 0x64
 801437c:	f000 fc32 	bl	8014be4 <__retarget_lock_init_recursive>
 8014380:	f7ff ffd0 	bl	8014324 <__sfp_lock_release>
 8014384:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014388:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801438c:	6025      	str	r5, [r4, #0]
 801438e:	61a5      	str	r5, [r4, #24]
 8014390:	2208      	movs	r2, #8
 8014392:	4629      	mov	r1, r5
 8014394:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8014398:	f000 fac2 	bl	8014920 <memset>
 801439c:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 80143a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 80143a4:	4620      	mov	r0, r4
 80143a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143a8:	3468      	adds	r4, #104	@ 0x68
 80143aa:	e7cd      	b.n	8014348 <__sfp+0x18>
 80143ac:	2304      	movs	r3, #4
 80143ae:	6005      	str	r5, [r0, #0]
 80143b0:	6043      	str	r3, [r0, #4]
 80143b2:	300c      	adds	r0, #12
 80143b4:	60a0      	str	r0, [r4, #8]
 80143b6:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 80143ba:	4629      	mov	r1, r5
 80143bc:	f000 fab0 	bl	8014920 <memset>
 80143c0:	6034      	str	r4, [r6, #0]
 80143c2:	6836      	ldr	r6, [r6, #0]
 80143c4:	e7be      	b.n	8014344 <__sfp+0x14>
 80143c6:	bf00      	nop
 80143c8:	200007b4 	.word	0x200007b4
 80143cc:	2000005c 	.word	0x2000005c
 80143d0:	ffff0001 	.word	0xffff0001

080143d4 <__sinit>:
 80143d4:	b510      	push	{r4, lr}
 80143d6:	4604      	mov	r4, r0
 80143d8:	f7ff ff9e 	bl	8014318 <__sfp_lock_acquire>
 80143dc:	6a23      	ldr	r3, [r4, #32]
 80143de:	b11b      	cbz	r3, 80143e8 <__sinit+0x14>
 80143e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80143e4:	f7ff bf9e 	b.w	8014324 <__sfp_lock_release>
 80143e8:	4b04      	ldr	r3, [pc, #16]	@ (80143fc <__sinit+0x28>)
 80143ea:	6223      	str	r3, [r4, #32]
 80143ec:	4b04      	ldr	r3, [pc, #16]	@ (8014400 <__sinit+0x2c>)
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d1f5      	bne.n	80143e0 <__sinit+0xc>
 80143f4:	f7ff ff72 	bl	80142dc <global_stdio_init.part.0>
 80143f8:	e7f2      	b.n	80143e0 <__sinit+0xc>
 80143fa:	bf00      	nop
 80143fc:	0801429d 	.word	0x0801429d
 8014400:	200007b4 	.word	0x200007b4

08014404 <fiprintf>:
 8014404:	b40e      	push	{r1, r2, r3}
 8014406:	b503      	push	{r0, r1, lr}
 8014408:	4601      	mov	r1, r0
 801440a:	ab03      	add	r3, sp, #12
 801440c:	4805      	ldr	r0, [pc, #20]	@ (8014424 <fiprintf+0x20>)
 801440e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014412:	6800      	ldr	r0, [r0, #0]
 8014414:	9301      	str	r3, [sp, #4]
 8014416:	f002 fc97 	bl	8016d48 <_vfiprintf_r>
 801441a:	b002      	add	sp, #8
 801441c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014420:	b003      	add	sp, #12
 8014422:	4770      	bx	lr
 8014424:	200001d4 	.word	0x200001d4

08014428 <_fwalk_sglue>:
 8014428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801442c:	4607      	mov	r7, r0
 801442e:	4688      	mov	r8, r1
 8014430:	4614      	mov	r4, r2
 8014432:	2600      	movs	r6, #0
 8014434:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014438:	f1b9 0901 	subs.w	r9, r9, #1
 801443c:	d505      	bpl.n	801444a <_fwalk_sglue+0x22>
 801443e:	6824      	ldr	r4, [r4, #0]
 8014440:	2c00      	cmp	r4, #0
 8014442:	d1f7      	bne.n	8014434 <_fwalk_sglue+0xc>
 8014444:	4630      	mov	r0, r6
 8014446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801444a:	89ab      	ldrh	r3, [r5, #12]
 801444c:	2b01      	cmp	r3, #1
 801444e:	d907      	bls.n	8014460 <_fwalk_sglue+0x38>
 8014450:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014454:	3301      	adds	r3, #1
 8014456:	d003      	beq.n	8014460 <_fwalk_sglue+0x38>
 8014458:	4629      	mov	r1, r5
 801445a:	4638      	mov	r0, r7
 801445c:	47c0      	blx	r8
 801445e:	4306      	orrs	r6, r0
 8014460:	3568      	adds	r5, #104	@ 0x68
 8014462:	e7e9      	b.n	8014438 <_fwalk_sglue+0x10>

08014464 <getchar>:
 8014464:	4b02      	ldr	r3, [pc, #8]	@ (8014470 <getchar+0xc>)
 8014466:	6818      	ldr	r0, [r3, #0]
 8014468:	6841      	ldr	r1, [r0, #4]
 801446a:	f002 bd85 	b.w	8016f78 <_getc_r>
 801446e:	bf00      	nop
 8014470:	200001d4 	.word	0x200001d4

08014474 <iprintf>:
 8014474:	b40f      	push	{r0, r1, r2, r3}
 8014476:	b507      	push	{r0, r1, r2, lr}
 8014478:	4906      	ldr	r1, [pc, #24]	@ (8014494 <iprintf+0x20>)
 801447a:	ab04      	add	r3, sp, #16
 801447c:	6808      	ldr	r0, [r1, #0]
 801447e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014482:	6881      	ldr	r1, [r0, #8]
 8014484:	9301      	str	r3, [sp, #4]
 8014486:	f002 fc5f 	bl	8016d48 <_vfiprintf_r>
 801448a:	b003      	add	sp, #12
 801448c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014490:	b004      	add	sp, #16
 8014492:	4770      	bx	lr
 8014494:	200001d4 	.word	0x200001d4

08014498 <putchar>:
 8014498:	4b02      	ldr	r3, [pc, #8]	@ (80144a4 <putchar+0xc>)
 801449a:	4601      	mov	r1, r0
 801449c:	6818      	ldr	r0, [r3, #0]
 801449e:	6882      	ldr	r2, [r0, #8]
 80144a0:	f002 bdf7 	b.w	8017092 <_putc_r>
 80144a4:	200001d4 	.word	0x200001d4

080144a8 <_puts_r>:
 80144a8:	6a03      	ldr	r3, [r0, #32]
 80144aa:	b570      	push	{r4, r5, r6, lr}
 80144ac:	6884      	ldr	r4, [r0, #8]
 80144ae:	4605      	mov	r5, r0
 80144b0:	460e      	mov	r6, r1
 80144b2:	b90b      	cbnz	r3, 80144b8 <_puts_r+0x10>
 80144b4:	f7ff ff8e 	bl	80143d4 <__sinit>
 80144b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80144ba:	07db      	lsls	r3, r3, #31
 80144bc:	d405      	bmi.n	80144ca <_puts_r+0x22>
 80144be:	89a3      	ldrh	r3, [r4, #12]
 80144c0:	0598      	lsls	r0, r3, #22
 80144c2:	d402      	bmi.n	80144ca <_puts_r+0x22>
 80144c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80144c6:	f000 fb8f 	bl	8014be8 <__retarget_lock_acquire_recursive>
 80144ca:	89a3      	ldrh	r3, [r4, #12]
 80144cc:	0719      	lsls	r1, r3, #28
 80144ce:	d502      	bpl.n	80144d6 <_puts_r+0x2e>
 80144d0:	6923      	ldr	r3, [r4, #16]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d135      	bne.n	8014542 <_puts_r+0x9a>
 80144d6:	4621      	mov	r1, r4
 80144d8:	4628      	mov	r0, r5
 80144da:	f000 f8e7 	bl	80146ac <__swsetup_r>
 80144de:	b380      	cbz	r0, 8014542 <_puts_r+0x9a>
 80144e0:	f04f 35ff 	mov.w	r5, #4294967295
 80144e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80144e6:	07da      	lsls	r2, r3, #31
 80144e8:	d405      	bmi.n	80144f6 <_puts_r+0x4e>
 80144ea:	89a3      	ldrh	r3, [r4, #12]
 80144ec:	059b      	lsls	r3, r3, #22
 80144ee:	d402      	bmi.n	80144f6 <_puts_r+0x4e>
 80144f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80144f2:	f000 fb7a 	bl	8014bea <__retarget_lock_release_recursive>
 80144f6:	4628      	mov	r0, r5
 80144f8:	bd70      	pop	{r4, r5, r6, pc}
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	da04      	bge.n	8014508 <_puts_r+0x60>
 80144fe:	69a2      	ldr	r2, [r4, #24]
 8014500:	429a      	cmp	r2, r3
 8014502:	dc17      	bgt.n	8014534 <_puts_r+0x8c>
 8014504:	290a      	cmp	r1, #10
 8014506:	d015      	beq.n	8014534 <_puts_r+0x8c>
 8014508:	6823      	ldr	r3, [r4, #0]
 801450a:	1c5a      	adds	r2, r3, #1
 801450c:	6022      	str	r2, [r4, #0]
 801450e:	7019      	strb	r1, [r3, #0]
 8014510:	68a3      	ldr	r3, [r4, #8]
 8014512:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014516:	3b01      	subs	r3, #1
 8014518:	60a3      	str	r3, [r4, #8]
 801451a:	2900      	cmp	r1, #0
 801451c:	d1ed      	bne.n	80144fa <_puts_r+0x52>
 801451e:	2b00      	cmp	r3, #0
 8014520:	da11      	bge.n	8014546 <_puts_r+0x9e>
 8014522:	4622      	mov	r2, r4
 8014524:	210a      	movs	r1, #10
 8014526:	4628      	mov	r0, r5
 8014528:	f000 f881 	bl	801462e <__swbuf_r>
 801452c:	3001      	adds	r0, #1
 801452e:	d0d7      	beq.n	80144e0 <_puts_r+0x38>
 8014530:	250a      	movs	r5, #10
 8014532:	e7d7      	b.n	80144e4 <_puts_r+0x3c>
 8014534:	4622      	mov	r2, r4
 8014536:	4628      	mov	r0, r5
 8014538:	f000 f879 	bl	801462e <__swbuf_r>
 801453c:	3001      	adds	r0, #1
 801453e:	d1e7      	bne.n	8014510 <_puts_r+0x68>
 8014540:	e7ce      	b.n	80144e0 <_puts_r+0x38>
 8014542:	3e01      	subs	r6, #1
 8014544:	e7e4      	b.n	8014510 <_puts_r+0x68>
 8014546:	6823      	ldr	r3, [r4, #0]
 8014548:	1c5a      	adds	r2, r3, #1
 801454a:	6022      	str	r2, [r4, #0]
 801454c:	220a      	movs	r2, #10
 801454e:	701a      	strb	r2, [r3, #0]
 8014550:	e7ee      	b.n	8014530 <_puts_r+0x88>
	...

08014554 <puts>:
 8014554:	4b02      	ldr	r3, [pc, #8]	@ (8014560 <puts+0xc>)
 8014556:	4601      	mov	r1, r0
 8014558:	6818      	ldr	r0, [r3, #0]
 801455a:	f7ff bfa5 	b.w	80144a8 <_puts_r>
 801455e:	bf00      	nop
 8014560:	200001d4 	.word	0x200001d4

08014564 <siprintf>:
 8014564:	b40e      	push	{r1, r2, r3}
 8014566:	b510      	push	{r4, lr}
 8014568:	b09d      	sub	sp, #116	@ 0x74
 801456a:	ab1f      	add	r3, sp, #124	@ 0x7c
 801456c:	9002      	str	r0, [sp, #8]
 801456e:	9006      	str	r0, [sp, #24]
 8014570:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014574:	480a      	ldr	r0, [pc, #40]	@ (80145a0 <siprintf+0x3c>)
 8014576:	9107      	str	r1, [sp, #28]
 8014578:	9104      	str	r1, [sp, #16]
 801457a:	490a      	ldr	r1, [pc, #40]	@ (80145a4 <siprintf+0x40>)
 801457c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014580:	9105      	str	r1, [sp, #20]
 8014582:	2400      	movs	r4, #0
 8014584:	a902      	add	r1, sp, #8
 8014586:	6800      	ldr	r0, [r0, #0]
 8014588:	9301      	str	r3, [sp, #4]
 801458a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801458c:	f002 fab6 	bl	8016afc <_svfiprintf_r>
 8014590:	9b02      	ldr	r3, [sp, #8]
 8014592:	701c      	strb	r4, [r3, #0]
 8014594:	b01d      	add	sp, #116	@ 0x74
 8014596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801459a:	b003      	add	sp, #12
 801459c:	4770      	bx	lr
 801459e:	bf00      	nop
 80145a0:	200001d4 	.word	0x200001d4
 80145a4:	ffff0208 	.word	0xffff0208

080145a8 <__sread>:
 80145a8:	b510      	push	{r4, lr}
 80145aa:	460c      	mov	r4, r1
 80145ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145b0:	f000 faca 	bl	8014b48 <_read_r>
 80145b4:	2800      	cmp	r0, #0
 80145b6:	bfab      	itete	ge
 80145b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80145ba:	89a3      	ldrhlt	r3, [r4, #12]
 80145bc:	181b      	addge	r3, r3, r0
 80145be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80145c2:	bfac      	ite	ge
 80145c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80145c6:	81a3      	strhlt	r3, [r4, #12]
 80145c8:	bd10      	pop	{r4, pc}

080145ca <__swrite>:
 80145ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145ce:	461f      	mov	r7, r3
 80145d0:	898b      	ldrh	r3, [r1, #12]
 80145d2:	05db      	lsls	r3, r3, #23
 80145d4:	4605      	mov	r5, r0
 80145d6:	460c      	mov	r4, r1
 80145d8:	4616      	mov	r6, r2
 80145da:	d505      	bpl.n	80145e8 <__swrite+0x1e>
 80145dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145e0:	2302      	movs	r3, #2
 80145e2:	2200      	movs	r2, #0
 80145e4:	f000 fa9e 	bl	8014b24 <_lseek_r>
 80145e8:	89a3      	ldrh	r3, [r4, #12]
 80145ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80145ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80145f2:	81a3      	strh	r3, [r4, #12]
 80145f4:	4632      	mov	r2, r6
 80145f6:	463b      	mov	r3, r7
 80145f8:	4628      	mov	r0, r5
 80145fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80145fe:	f000 bab5 	b.w	8014b6c <_write_r>

08014602 <__sseek>:
 8014602:	b510      	push	{r4, lr}
 8014604:	460c      	mov	r4, r1
 8014606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801460a:	f000 fa8b 	bl	8014b24 <_lseek_r>
 801460e:	1c43      	adds	r3, r0, #1
 8014610:	89a3      	ldrh	r3, [r4, #12]
 8014612:	bf15      	itete	ne
 8014614:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014616:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801461a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801461e:	81a3      	strheq	r3, [r4, #12]
 8014620:	bf18      	it	ne
 8014622:	81a3      	strhne	r3, [r4, #12]
 8014624:	bd10      	pop	{r4, pc}

08014626 <__sclose>:
 8014626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801462a:	f000 ba0d 	b.w	8014a48 <_close_r>

0801462e <__swbuf_r>:
 801462e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014630:	460e      	mov	r6, r1
 8014632:	4614      	mov	r4, r2
 8014634:	4605      	mov	r5, r0
 8014636:	b118      	cbz	r0, 8014640 <__swbuf_r+0x12>
 8014638:	6a03      	ldr	r3, [r0, #32]
 801463a:	b90b      	cbnz	r3, 8014640 <__swbuf_r+0x12>
 801463c:	f7ff feca 	bl	80143d4 <__sinit>
 8014640:	69a3      	ldr	r3, [r4, #24]
 8014642:	60a3      	str	r3, [r4, #8]
 8014644:	89a3      	ldrh	r3, [r4, #12]
 8014646:	071a      	lsls	r2, r3, #28
 8014648:	d501      	bpl.n	801464e <__swbuf_r+0x20>
 801464a:	6923      	ldr	r3, [r4, #16]
 801464c:	b943      	cbnz	r3, 8014660 <__swbuf_r+0x32>
 801464e:	4621      	mov	r1, r4
 8014650:	4628      	mov	r0, r5
 8014652:	f000 f82b 	bl	80146ac <__swsetup_r>
 8014656:	b118      	cbz	r0, 8014660 <__swbuf_r+0x32>
 8014658:	f04f 37ff 	mov.w	r7, #4294967295
 801465c:	4638      	mov	r0, r7
 801465e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014660:	6823      	ldr	r3, [r4, #0]
 8014662:	6922      	ldr	r2, [r4, #16]
 8014664:	1a98      	subs	r0, r3, r2
 8014666:	6963      	ldr	r3, [r4, #20]
 8014668:	b2f6      	uxtb	r6, r6
 801466a:	4283      	cmp	r3, r0
 801466c:	4637      	mov	r7, r6
 801466e:	dc05      	bgt.n	801467c <__swbuf_r+0x4e>
 8014670:	4621      	mov	r1, r4
 8014672:	4628      	mov	r0, r5
 8014674:	f7ff fd94 	bl	80141a0 <_fflush_r>
 8014678:	2800      	cmp	r0, #0
 801467a:	d1ed      	bne.n	8014658 <__swbuf_r+0x2a>
 801467c:	68a3      	ldr	r3, [r4, #8]
 801467e:	3b01      	subs	r3, #1
 8014680:	60a3      	str	r3, [r4, #8]
 8014682:	6823      	ldr	r3, [r4, #0]
 8014684:	1c5a      	adds	r2, r3, #1
 8014686:	6022      	str	r2, [r4, #0]
 8014688:	701e      	strb	r6, [r3, #0]
 801468a:	6962      	ldr	r2, [r4, #20]
 801468c:	1c43      	adds	r3, r0, #1
 801468e:	429a      	cmp	r2, r3
 8014690:	d004      	beq.n	801469c <__swbuf_r+0x6e>
 8014692:	89a3      	ldrh	r3, [r4, #12]
 8014694:	07db      	lsls	r3, r3, #31
 8014696:	d5e1      	bpl.n	801465c <__swbuf_r+0x2e>
 8014698:	2e0a      	cmp	r6, #10
 801469a:	d1df      	bne.n	801465c <__swbuf_r+0x2e>
 801469c:	4621      	mov	r1, r4
 801469e:	4628      	mov	r0, r5
 80146a0:	f7ff fd7e 	bl	80141a0 <_fflush_r>
 80146a4:	2800      	cmp	r0, #0
 80146a6:	d0d9      	beq.n	801465c <__swbuf_r+0x2e>
 80146a8:	e7d6      	b.n	8014658 <__swbuf_r+0x2a>
	...

080146ac <__swsetup_r>:
 80146ac:	b538      	push	{r3, r4, r5, lr}
 80146ae:	4b29      	ldr	r3, [pc, #164]	@ (8014754 <__swsetup_r+0xa8>)
 80146b0:	4605      	mov	r5, r0
 80146b2:	6818      	ldr	r0, [r3, #0]
 80146b4:	460c      	mov	r4, r1
 80146b6:	b118      	cbz	r0, 80146c0 <__swsetup_r+0x14>
 80146b8:	6a03      	ldr	r3, [r0, #32]
 80146ba:	b90b      	cbnz	r3, 80146c0 <__swsetup_r+0x14>
 80146bc:	f7ff fe8a 	bl	80143d4 <__sinit>
 80146c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146c4:	0719      	lsls	r1, r3, #28
 80146c6:	d422      	bmi.n	801470e <__swsetup_r+0x62>
 80146c8:	06da      	lsls	r2, r3, #27
 80146ca:	d407      	bmi.n	80146dc <__swsetup_r+0x30>
 80146cc:	2209      	movs	r2, #9
 80146ce:	602a      	str	r2, [r5, #0]
 80146d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80146d4:	81a3      	strh	r3, [r4, #12]
 80146d6:	f04f 30ff 	mov.w	r0, #4294967295
 80146da:	e033      	b.n	8014744 <__swsetup_r+0x98>
 80146dc:	0758      	lsls	r0, r3, #29
 80146de:	d512      	bpl.n	8014706 <__swsetup_r+0x5a>
 80146e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80146e2:	b141      	cbz	r1, 80146f6 <__swsetup_r+0x4a>
 80146e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80146e8:	4299      	cmp	r1, r3
 80146ea:	d002      	beq.n	80146f2 <__swsetup_r+0x46>
 80146ec:	4628      	mov	r0, r5
 80146ee:	f001 f8fb 	bl	80158e8 <_free_r>
 80146f2:	2300      	movs	r3, #0
 80146f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80146f6:	89a3      	ldrh	r3, [r4, #12]
 80146f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80146fc:	81a3      	strh	r3, [r4, #12]
 80146fe:	2300      	movs	r3, #0
 8014700:	6063      	str	r3, [r4, #4]
 8014702:	6923      	ldr	r3, [r4, #16]
 8014704:	6023      	str	r3, [r4, #0]
 8014706:	89a3      	ldrh	r3, [r4, #12]
 8014708:	f043 0308 	orr.w	r3, r3, #8
 801470c:	81a3      	strh	r3, [r4, #12]
 801470e:	6923      	ldr	r3, [r4, #16]
 8014710:	b94b      	cbnz	r3, 8014726 <__swsetup_r+0x7a>
 8014712:	89a3      	ldrh	r3, [r4, #12]
 8014714:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014718:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801471c:	d003      	beq.n	8014726 <__swsetup_r+0x7a>
 801471e:	4621      	mov	r1, r4
 8014720:	4628      	mov	r0, r5
 8014722:	f002 fc7a 	bl	801701a <__smakebuf_r>
 8014726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801472a:	f013 0201 	ands.w	r2, r3, #1
 801472e:	d00a      	beq.n	8014746 <__swsetup_r+0x9a>
 8014730:	2200      	movs	r2, #0
 8014732:	60a2      	str	r2, [r4, #8]
 8014734:	6962      	ldr	r2, [r4, #20]
 8014736:	4252      	negs	r2, r2
 8014738:	61a2      	str	r2, [r4, #24]
 801473a:	6922      	ldr	r2, [r4, #16]
 801473c:	b942      	cbnz	r2, 8014750 <__swsetup_r+0xa4>
 801473e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014742:	d1c5      	bne.n	80146d0 <__swsetup_r+0x24>
 8014744:	bd38      	pop	{r3, r4, r5, pc}
 8014746:	0799      	lsls	r1, r3, #30
 8014748:	bf58      	it	pl
 801474a:	6962      	ldrpl	r2, [r4, #20]
 801474c:	60a2      	str	r2, [r4, #8]
 801474e:	e7f4      	b.n	801473a <__swsetup_r+0x8e>
 8014750:	2000      	movs	r0, #0
 8014752:	e7f7      	b.n	8014744 <__swsetup_r+0x98>
 8014754:	200001d4 	.word	0x200001d4

08014758 <funcloser>:
 8014758:	b570      	push	{r4, r5, r6, lr}
 801475a:	690c      	ldr	r4, [r1, #16]
 801475c:	4606      	mov	r6, r0
 801475e:	460d      	mov	r5, r1
 8014760:	b184      	cbz	r4, 8014784 <funcloser+0x2c>
 8014762:	f000 fa15 	bl	8014b90 <__errno>
 8014766:	2300      	movs	r3, #0
 8014768:	6003      	str	r3, [r0, #0]
 801476a:	692b      	ldr	r3, [r5, #16]
 801476c:	6828      	ldr	r0, [r5, #0]
 801476e:	4798      	blx	r3
 8014770:	1e04      	subs	r4, r0, #0
 8014772:	da07      	bge.n	8014784 <funcloser+0x2c>
 8014774:	f000 fa0c 	bl	8014b90 <__errno>
 8014778:	6803      	ldr	r3, [r0, #0]
 801477a:	b11b      	cbz	r3, 8014784 <funcloser+0x2c>
 801477c:	f000 fa08 	bl	8014b90 <__errno>
 8014780:	6803      	ldr	r3, [r0, #0]
 8014782:	6033      	str	r3, [r6, #0]
 8014784:	4630      	mov	r0, r6
 8014786:	4629      	mov	r1, r5
 8014788:	f001 f8ae 	bl	80158e8 <_free_r>
 801478c:	4620      	mov	r0, r4
 801478e:	bd70      	pop	{r4, r5, r6, pc}

08014790 <funwriter>:
 8014790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014792:	460c      	mov	r4, r1
 8014794:	4616      	mov	r6, r2
 8014796:	461f      	mov	r7, r3
 8014798:	4605      	mov	r5, r0
 801479a:	f000 f9f9 	bl	8014b90 <__errno>
 801479e:	2300      	movs	r3, #0
 80147a0:	6003      	str	r3, [r0, #0]
 80147a2:	463a      	mov	r2, r7
 80147a4:	68a3      	ldr	r3, [r4, #8]
 80147a6:	6820      	ldr	r0, [r4, #0]
 80147a8:	4631      	mov	r1, r6
 80147aa:	4798      	blx	r3
 80147ac:	1e04      	subs	r4, r0, #0
 80147ae:	da07      	bge.n	80147c0 <funwriter+0x30>
 80147b0:	f000 f9ee 	bl	8014b90 <__errno>
 80147b4:	6803      	ldr	r3, [r0, #0]
 80147b6:	b11b      	cbz	r3, 80147c0 <funwriter+0x30>
 80147b8:	f000 f9ea 	bl	8014b90 <__errno>
 80147bc:	6803      	ldr	r3, [r0, #0]
 80147be:	602b      	str	r3, [r5, #0]
 80147c0:	4620      	mov	r0, r4
 80147c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080147c4 <funseeker>:
 80147c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147c6:	460c      	mov	r4, r1
 80147c8:	4616      	mov	r6, r2
 80147ca:	461f      	mov	r7, r3
 80147cc:	4605      	mov	r5, r0
 80147ce:	f000 f9df 	bl	8014b90 <__errno>
 80147d2:	2300      	movs	r3, #0
 80147d4:	6003      	str	r3, [r0, #0]
 80147d6:	463a      	mov	r2, r7
 80147d8:	68e3      	ldr	r3, [r4, #12]
 80147da:	6820      	ldr	r0, [r4, #0]
 80147dc:	4631      	mov	r1, r6
 80147de:	4798      	blx	r3
 80147e0:	1e04      	subs	r4, r0, #0
 80147e2:	da07      	bge.n	80147f4 <funseeker+0x30>
 80147e4:	f000 f9d4 	bl	8014b90 <__errno>
 80147e8:	6803      	ldr	r3, [r0, #0]
 80147ea:	b11b      	cbz	r3, 80147f4 <funseeker+0x30>
 80147ec:	f000 f9d0 	bl	8014b90 <__errno>
 80147f0:	6803      	ldr	r3, [r0, #0]
 80147f2:	602b      	str	r3, [r5, #0]
 80147f4:	4620      	mov	r0, r4
 80147f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080147f8 <funreader>:
 80147f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147fa:	460c      	mov	r4, r1
 80147fc:	4616      	mov	r6, r2
 80147fe:	461f      	mov	r7, r3
 8014800:	4605      	mov	r5, r0
 8014802:	f000 f9c5 	bl	8014b90 <__errno>
 8014806:	2300      	movs	r3, #0
 8014808:	6003      	str	r3, [r0, #0]
 801480a:	463a      	mov	r2, r7
 801480c:	6863      	ldr	r3, [r4, #4]
 801480e:	6820      	ldr	r0, [r4, #0]
 8014810:	4631      	mov	r1, r6
 8014812:	4798      	blx	r3
 8014814:	1e04      	subs	r4, r0, #0
 8014816:	da07      	bge.n	8014828 <funreader+0x30>
 8014818:	f000 f9ba 	bl	8014b90 <__errno>
 801481c:	6803      	ldr	r3, [r0, #0]
 801481e:	b11b      	cbz	r3, 8014828 <funreader+0x30>
 8014820:	f000 f9b6 	bl	8014b90 <__errno>
 8014824:	6803      	ldr	r3, [r0, #0]
 8014826:	602b      	str	r3, [r5, #0]
 8014828:	4620      	mov	r0, r4
 801482a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801482c <_funopen_r>:
 801482c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014830:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014834:	4605      	mov	r5, r0
 8014836:	4689      	mov	r9, r1
 8014838:	461e      	mov	r6, r3
 801483a:	4617      	mov	r7, r2
 801483c:	b932      	cbnz	r2, 801484c <_funopen_r+0x20>
 801483e:	b92b      	cbnz	r3, 801484c <_funopen_r+0x20>
 8014840:	2316      	movs	r3, #22
 8014842:	6003      	str	r3, [r0, #0]
 8014844:	2400      	movs	r4, #0
 8014846:	4620      	mov	r0, r4
 8014848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801484c:	4628      	mov	r0, r5
 801484e:	f7ff fd6f 	bl	8014330 <__sfp>
 8014852:	4604      	mov	r4, r0
 8014854:	2800      	cmp	r0, #0
 8014856:	d0f5      	beq.n	8014844 <_funopen_r+0x18>
 8014858:	4628      	mov	r0, r5
 801485a:	2114      	movs	r1, #20
 801485c:	f7fd fd94 	bl	8012388 <_malloc_r>
 8014860:	4605      	mov	r5, r0
 8014862:	b940      	cbnz	r0, 8014876 <_funopen_r+0x4a>
 8014864:	f7ff fd58 	bl	8014318 <__sfp_lock_acquire>
 8014868:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801486a:	81a5      	strh	r5, [r4, #12]
 801486c:	f000 f9bb 	bl	8014be6 <__retarget_lock_close_recursive>
 8014870:	f7ff fd58 	bl	8014324 <__sfp_lock_release>
 8014874:	e7e6      	b.n	8014844 <_funopen_r+0x18>
 8014876:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014878:	07d8      	lsls	r0, r3, #31
 801487a:	d405      	bmi.n	8014888 <_funopen_r+0x5c>
 801487c:	89a3      	ldrh	r3, [r4, #12]
 801487e:	0599      	lsls	r1, r3, #22
 8014880:	d402      	bmi.n	8014888 <_funopen_r+0x5c>
 8014882:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014884:	f000 f9b0 	bl	8014be8 <__retarget_lock_acquire_recursive>
 8014888:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801488c:	81e3      	strh	r3, [r4, #14]
 801488e:	f8c5 9000 	str.w	r9, [r5]
 8014892:	6225      	str	r5, [r4, #32]
 8014894:	b327      	cbz	r7, 80148e0 <_funopen_r+0xb4>
 8014896:	4b16      	ldr	r3, [pc, #88]	@ (80148f0 <_funopen_r+0xc4>)
 8014898:	606f      	str	r7, [r5, #4]
 801489a:	6263      	str	r3, [r4, #36]	@ 0x24
 801489c:	b1de      	cbz	r6, 80148d6 <_funopen_r+0xaa>
 801489e:	2310      	movs	r3, #16
 80148a0:	81a3      	strh	r3, [r4, #12]
 80148a2:	4b14      	ldr	r3, [pc, #80]	@ (80148f4 <_funopen_r+0xc8>)
 80148a4:	60ae      	str	r6, [r5, #8]
 80148a6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80148a8:	4b13      	ldr	r3, [pc, #76]	@ (80148f8 <_funopen_r+0xcc>)
 80148aa:	f8c5 800c 	str.w	r8, [r5, #12]
 80148ae:	f1b8 0f00 	cmp.w	r8, #0
 80148b2:	bf18      	it	ne
 80148b4:	4698      	movne	r8, r3
 80148b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80148b8:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 80148bc:	612b      	str	r3, [r5, #16]
 80148be:	4b0f      	ldr	r3, [pc, #60]	@ (80148fc <_funopen_r+0xd0>)
 80148c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80148c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80148c4:	07da      	lsls	r2, r3, #31
 80148c6:	d4be      	bmi.n	8014846 <_funopen_r+0x1a>
 80148c8:	89a3      	ldrh	r3, [r4, #12]
 80148ca:	059b      	lsls	r3, r3, #22
 80148cc:	d4bb      	bmi.n	8014846 <_funopen_r+0x1a>
 80148ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80148d0:	f000 f98b 	bl	8014bea <__retarget_lock_release_recursive>
 80148d4:	e7b7      	b.n	8014846 <_funopen_r+0x1a>
 80148d6:	2304      	movs	r3, #4
 80148d8:	81a3      	strh	r3, [r4, #12]
 80148da:	60ae      	str	r6, [r5, #8]
 80148dc:	62a6      	str	r6, [r4, #40]	@ 0x28
 80148de:	e7e3      	b.n	80148a8 <_funopen_r+0x7c>
 80148e0:	2308      	movs	r3, #8
 80148e2:	81a3      	strh	r3, [r4, #12]
 80148e4:	4b03      	ldr	r3, [pc, #12]	@ (80148f4 <_funopen_r+0xc8>)
 80148e6:	60ae      	str	r6, [r5, #8]
 80148e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80148ea:	606f      	str	r7, [r5, #4]
 80148ec:	6267      	str	r7, [r4, #36]	@ 0x24
 80148ee:	e7db      	b.n	80148a8 <_funopen_r+0x7c>
 80148f0:	080147f9 	.word	0x080147f9
 80148f4:	08014791 	.word	0x08014791
 80148f8:	080147c5 	.word	0x080147c5
 80148fc:	08014759 	.word	0x08014759

08014900 <funopen>:
 8014900:	b513      	push	{r0, r1, r4, lr}
 8014902:	9c04      	ldr	r4, [sp, #16]
 8014904:	e9cd 3400 	strd	r3, r4, [sp]
 8014908:	4613      	mov	r3, r2
 801490a:	460a      	mov	r2, r1
 801490c:	4601      	mov	r1, r0
 801490e:	4803      	ldr	r0, [pc, #12]	@ (801491c <funopen+0x1c>)
 8014910:	6800      	ldr	r0, [r0, #0]
 8014912:	f7ff ff8b 	bl	801482c <_funopen_r>
 8014916:	b002      	add	sp, #8
 8014918:	bd10      	pop	{r4, pc}
 801491a:	bf00      	nop
 801491c:	200001d4 	.word	0x200001d4

08014920 <memset>:
 8014920:	4402      	add	r2, r0
 8014922:	4603      	mov	r3, r0
 8014924:	4293      	cmp	r3, r2
 8014926:	d100      	bne.n	801492a <memset+0xa>
 8014928:	4770      	bx	lr
 801492a:	f803 1b01 	strb.w	r1, [r3], #1
 801492e:	e7f9      	b.n	8014924 <memset+0x4>

08014930 <strchr>:
 8014930:	b2c9      	uxtb	r1, r1
 8014932:	4603      	mov	r3, r0
 8014934:	4618      	mov	r0, r3
 8014936:	f813 2b01 	ldrb.w	r2, [r3], #1
 801493a:	b112      	cbz	r2, 8014942 <strchr+0x12>
 801493c:	428a      	cmp	r2, r1
 801493e:	d1f9      	bne.n	8014934 <strchr+0x4>
 8014940:	4770      	bx	lr
 8014942:	2900      	cmp	r1, #0
 8014944:	bf18      	it	ne
 8014946:	2000      	movne	r0, #0
 8014948:	4770      	bx	lr

0801494a <strncmp>:
 801494a:	b510      	push	{r4, lr}
 801494c:	b16a      	cbz	r2, 801496a <strncmp+0x20>
 801494e:	3901      	subs	r1, #1
 8014950:	1884      	adds	r4, r0, r2
 8014952:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014956:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801495a:	429a      	cmp	r2, r3
 801495c:	d103      	bne.n	8014966 <strncmp+0x1c>
 801495e:	42a0      	cmp	r0, r4
 8014960:	d001      	beq.n	8014966 <strncmp+0x1c>
 8014962:	2a00      	cmp	r2, #0
 8014964:	d1f5      	bne.n	8014952 <strncmp+0x8>
 8014966:	1ad0      	subs	r0, r2, r3
 8014968:	bd10      	pop	{r4, pc}
 801496a:	4610      	mov	r0, r2
 801496c:	e7fc      	b.n	8014968 <strncmp+0x1e>

0801496e <strnlen>:
 801496e:	b510      	push	{r4, lr}
 8014970:	4602      	mov	r2, r0
 8014972:	4401      	add	r1, r0
 8014974:	428a      	cmp	r2, r1
 8014976:	4613      	mov	r3, r2
 8014978:	d003      	beq.n	8014982 <strnlen+0x14>
 801497a:	781c      	ldrb	r4, [r3, #0]
 801497c:	3201      	adds	r2, #1
 801497e:	2c00      	cmp	r4, #0
 8014980:	d1f8      	bne.n	8014974 <strnlen+0x6>
 8014982:	1a18      	subs	r0, r3, r0
 8014984:	bd10      	pop	{r4, pc}
	...

08014988 <strtok>:
 8014988:	4b16      	ldr	r3, [pc, #88]	@ (80149e4 <strtok+0x5c>)
 801498a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801498e:	681f      	ldr	r7, [r3, #0]
 8014990:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8014992:	4605      	mov	r5, r0
 8014994:	460e      	mov	r6, r1
 8014996:	b9ec      	cbnz	r4, 80149d4 <strtok+0x4c>
 8014998:	2050      	movs	r0, #80	@ 0x50
 801499a:	f7fd fcc3 	bl	8012324 <malloc>
 801499e:	4602      	mov	r2, r0
 80149a0:	6478      	str	r0, [r7, #68]	@ 0x44
 80149a2:	b920      	cbnz	r0, 80149ae <strtok+0x26>
 80149a4:	4b10      	ldr	r3, [pc, #64]	@ (80149e8 <strtok+0x60>)
 80149a6:	4811      	ldr	r0, [pc, #68]	@ (80149ec <strtok+0x64>)
 80149a8:	215b      	movs	r1, #91	@ 0x5b
 80149aa:	f7fd fc31 	bl	8012210 <__assert_func>
 80149ae:	e9c0 4400 	strd	r4, r4, [r0]
 80149b2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80149b6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80149ba:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80149be:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80149c2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80149c6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80149ca:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80149ce:	6184      	str	r4, [r0, #24]
 80149d0:	7704      	strb	r4, [r0, #28]
 80149d2:	6244      	str	r4, [r0, #36]	@ 0x24
 80149d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80149d6:	4631      	mov	r1, r6
 80149d8:	4628      	mov	r0, r5
 80149da:	2301      	movs	r3, #1
 80149dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80149e0:	f000 b806 	b.w	80149f0 <__strtok_r>
 80149e4:	200001d4 	.word	0x200001d4
 80149e8:	08019283 	.word	0x08019283
 80149ec:	0801929a 	.word	0x0801929a

080149f0 <__strtok_r>:
 80149f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149f2:	4604      	mov	r4, r0
 80149f4:	b908      	cbnz	r0, 80149fa <__strtok_r+0xa>
 80149f6:	6814      	ldr	r4, [r2, #0]
 80149f8:	b144      	cbz	r4, 8014a0c <__strtok_r+0x1c>
 80149fa:	4620      	mov	r0, r4
 80149fc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8014a00:	460f      	mov	r7, r1
 8014a02:	f817 6b01 	ldrb.w	r6, [r7], #1
 8014a06:	b91e      	cbnz	r6, 8014a10 <__strtok_r+0x20>
 8014a08:	b965      	cbnz	r5, 8014a24 <__strtok_r+0x34>
 8014a0a:	6015      	str	r5, [r2, #0]
 8014a0c:	2000      	movs	r0, #0
 8014a0e:	e005      	b.n	8014a1c <__strtok_r+0x2c>
 8014a10:	42b5      	cmp	r5, r6
 8014a12:	d1f6      	bne.n	8014a02 <__strtok_r+0x12>
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d1f0      	bne.n	80149fa <__strtok_r+0xa>
 8014a18:	6014      	str	r4, [r2, #0]
 8014a1a:	7003      	strb	r3, [r0, #0]
 8014a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a1e:	461c      	mov	r4, r3
 8014a20:	e00c      	b.n	8014a3c <__strtok_r+0x4c>
 8014a22:	b91d      	cbnz	r5, 8014a2c <__strtok_r+0x3c>
 8014a24:	4627      	mov	r7, r4
 8014a26:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014a2a:	460e      	mov	r6, r1
 8014a2c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8014a30:	42ab      	cmp	r3, r5
 8014a32:	d1f6      	bne.n	8014a22 <__strtok_r+0x32>
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d0f2      	beq.n	8014a1e <__strtok_r+0x2e>
 8014a38:	2300      	movs	r3, #0
 8014a3a:	703b      	strb	r3, [r7, #0]
 8014a3c:	6014      	str	r4, [r2, #0]
 8014a3e:	e7ed      	b.n	8014a1c <__strtok_r+0x2c>

08014a40 <_localeconv_r>:
 8014a40:	4800      	ldr	r0, [pc, #0]	@ (8014a44 <_localeconv_r+0x4>)
 8014a42:	4770      	bx	lr
 8014a44:	20000158 	.word	0x20000158

08014a48 <_close_r>:
 8014a48:	b538      	push	{r3, r4, r5, lr}
 8014a4a:	4d06      	ldr	r5, [pc, #24]	@ (8014a64 <_close_r+0x1c>)
 8014a4c:	2300      	movs	r3, #0
 8014a4e:	4604      	mov	r4, r0
 8014a50:	4608      	mov	r0, r1
 8014a52:	602b      	str	r3, [r5, #0]
 8014a54:	f7f2 f932 	bl	8006cbc <_close>
 8014a58:	1c43      	adds	r3, r0, #1
 8014a5a:	d102      	bne.n	8014a62 <_close_r+0x1a>
 8014a5c:	682b      	ldr	r3, [r5, #0]
 8014a5e:	b103      	cbz	r3, 8014a62 <_close_r+0x1a>
 8014a60:	6023      	str	r3, [r4, #0]
 8014a62:	bd38      	pop	{r3, r4, r5, pc}
 8014a64:	200007b8 	.word	0x200007b8

08014a68 <_reclaim_reent>:
 8014a68:	4b2d      	ldr	r3, [pc, #180]	@ (8014b20 <_reclaim_reent+0xb8>)
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	4283      	cmp	r3, r0
 8014a6e:	b570      	push	{r4, r5, r6, lr}
 8014a70:	4604      	mov	r4, r0
 8014a72:	d053      	beq.n	8014b1c <_reclaim_reent+0xb4>
 8014a74:	69c3      	ldr	r3, [r0, #28]
 8014a76:	b31b      	cbz	r3, 8014ac0 <_reclaim_reent+0x58>
 8014a78:	68db      	ldr	r3, [r3, #12]
 8014a7a:	b163      	cbz	r3, 8014a96 <_reclaim_reent+0x2e>
 8014a7c:	2500      	movs	r5, #0
 8014a7e:	69e3      	ldr	r3, [r4, #28]
 8014a80:	68db      	ldr	r3, [r3, #12]
 8014a82:	5959      	ldr	r1, [r3, r5]
 8014a84:	b9b1      	cbnz	r1, 8014ab4 <_reclaim_reent+0x4c>
 8014a86:	3504      	adds	r5, #4
 8014a88:	2d80      	cmp	r5, #128	@ 0x80
 8014a8a:	d1f8      	bne.n	8014a7e <_reclaim_reent+0x16>
 8014a8c:	69e3      	ldr	r3, [r4, #28]
 8014a8e:	4620      	mov	r0, r4
 8014a90:	68d9      	ldr	r1, [r3, #12]
 8014a92:	f000 ff29 	bl	80158e8 <_free_r>
 8014a96:	69e3      	ldr	r3, [r4, #28]
 8014a98:	6819      	ldr	r1, [r3, #0]
 8014a9a:	b111      	cbz	r1, 8014aa2 <_reclaim_reent+0x3a>
 8014a9c:	4620      	mov	r0, r4
 8014a9e:	f000 ff23 	bl	80158e8 <_free_r>
 8014aa2:	69e3      	ldr	r3, [r4, #28]
 8014aa4:	689d      	ldr	r5, [r3, #8]
 8014aa6:	b15d      	cbz	r5, 8014ac0 <_reclaim_reent+0x58>
 8014aa8:	4629      	mov	r1, r5
 8014aaa:	4620      	mov	r0, r4
 8014aac:	682d      	ldr	r5, [r5, #0]
 8014aae:	f000 ff1b 	bl	80158e8 <_free_r>
 8014ab2:	e7f8      	b.n	8014aa6 <_reclaim_reent+0x3e>
 8014ab4:	680e      	ldr	r6, [r1, #0]
 8014ab6:	4620      	mov	r0, r4
 8014ab8:	f000 ff16 	bl	80158e8 <_free_r>
 8014abc:	4631      	mov	r1, r6
 8014abe:	e7e1      	b.n	8014a84 <_reclaim_reent+0x1c>
 8014ac0:	6961      	ldr	r1, [r4, #20]
 8014ac2:	b111      	cbz	r1, 8014aca <_reclaim_reent+0x62>
 8014ac4:	4620      	mov	r0, r4
 8014ac6:	f000 ff0f 	bl	80158e8 <_free_r>
 8014aca:	69e1      	ldr	r1, [r4, #28]
 8014acc:	b111      	cbz	r1, 8014ad4 <_reclaim_reent+0x6c>
 8014ace:	4620      	mov	r0, r4
 8014ad0:	f000 ff0a 	bl	80158e8 <_free_r>
 8014ad4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014ad6:	b111      	cbz	r1, 8014ade <_reclaim_reent+0x76>
 8014ad8:	4620      	mov	r0, r4
 8014ada:	f000 ff05 	bl	80158e8 <_free_r>
 8014ade:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014ae0:	b111      	cbz	r1, 8014ae8 <_reclaim_reent+0x80>
 8014ae2:	4620      	mov	r0, r4
 8014ae4:	f000 ff00 	bl	80158e8 <_free_r>
 8014ae8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8014aea:	b111      	cbz	r1, 8014af2 <_reclaim_reent+0x8a>
 8014aec:	4620      	mov	r0, r4
 8014aee:	f000 fefb 	bl	80158e8 <_free_r>
 8014af2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8014af4:	b111      	cbz	r1, 8014afc <_reclaim_reent+0x94>
 8014af6:	4620      	mov	r0, r4
 8014af8:	f000 fef6 	bl	80158e8 <_free_r>
 8014afc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8014afe:	b111      	cbz	r1, 8014b06 <_reclaim_reent+0x9e>
 8014b00:	4620      	mov	r0, r4
 8014b02:	f000 fef1 	bl	80158e8 <_free_r>
 8014b06:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014b08:	b111      	cbz	r1, 8014b10 <_reclaim_reent+0xa8>
 8014b0a:	4620      	mov	r0, r4
 8014b0c:	f000 feec 	bl	80158e8 <_free_r>
 8014b10:	6a23      	ldr	r3, [r4, #32]
 8014b12:	b11b      	cbz	r3, 8014b1c <_reclaim_reent+0xb4>
 8014b14:	4620      	mov	r0, r4
 8014b16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014b1a:	4718      	bx	r3
 8014b1c:	bd70      	pop	{r4, r5, r6, pc}
 8014b1e:	bf00      	nop
 8014b20:	200001d4 	.word	0x200001d4

08014b24 <_lseek_r>:
 8014b24:	b538      	push	{r3, r4, r5, lr}
 8014b26:	4d07      	ldr	r5, [pc, #28]	@ (8014b44 <_lseek_r+0x20>)
 8014b28:	4604      	mov	r4, r0
 8014b2a:	4608      	mov	r0, r1
 8014b2c:	4611      	mov	r1, r2
 8014b2e:	2200      	movs	r2, #0
 8014b30:	602a      	str	r2, [r5, #0]
 8014b32:	461a      	mov	r2, r3
 8014b34:	f7f2 f908 	bl	8006d48 <_lseek>
 8014b38:	1c43      	adds	r3, r0, #1
 8014b3a:	d102      	bne.n	8014b42 <_lseek_r+0x1e>
 8014b3c:	682b      	ldr	r3, [r5, #0]
 8014b3e:	b103      	cbz	r3, 8014b42 <_lseek_r+0x1e>
 8014b40:	6023      	str	r3, [r4, #0]
 8014b42:	bd38      	pop	{r3, r4, r5, pc}
 8014b44:	200007b8 	.word	0x200007b8

08014b48 <_read_r>:
 8014b48:	b538      	push	{r3, r4, r5, lr}
 8014b4a:	4d07      	ldr	r5, [pc, #28]	@ (8014b68 <_read_r+0x20>)
 8014b4c:	4604      	mov	r4, r0
 8014b4e:	4608      	mov	r0, r1
 8014b50:	4611      	mov	r1, r2
 8014b52:	2200      	movs	r2, #0
 8014b54:	602a      	str	r2, [r5, #0]
 8014b56:	461a      	mov	r2, r3
 8014b58:	f7f1 fffa 	bl	8006b50 <_read>
 8014b5c:	1c43      	adds	r3, r0, #1
 8014b5e:	d102      	bne.n	8014b66 <_read_r+0x1e>
 8014b60:	682b      	ldr	r3, [r5, #0]
 8014b62:	b103      	cbz	r3, 8014b66 <_read_r+0x1e>
 8014b64:	6023      	str	r3, [r4, #0]
 8014b66:	bd38      	pop	{r3, r4, r5, pc}
 8014b68:	200007b8 	.word	0x200007b8

08014b6c <_write_r>:
 8014b6c:	b538      	push	{r3, r4, r5, lr}
 8014b6e:	4d07      	ldr	r5, [pc, #28]	@ (8014b8c <_write_r+0x20>)
 8014b70:	4604      	mov	r4, r0
 8014b72:	4608      	mov	r0, r1
 8014b74:	4611      	mov	r1, r2
 8014b76:	2200      	movs	r2, #0
 8014b78:	602a      	str	r2, [r5, #0]
 8014b7a:	461a      	mov	r2, r3
 8014b7c:	f7f2 f82e 	bl	8006bdc <_write>
 8014b80:	1c43      	adds	r3, r0, #1
 8014b82:	d102      	bne.n	8014b8a <_write_r+0x1e>
 8014b84:	682b      	ldr	r3, [r5, #0]
 8014b86:	b103      	cbz	r3, 8014b8a <_write_r+0x1e>
 8014b88:	6023      	str	r3, [r4, #0]
 8014b8a:	bd38      	pop	{r3, r4, r5, pc}
 8014b8c:	200007b8 	.word	0x200007b8

08014b90 <__errno>:
 8014b90:	4b01      	ldr	r3, [pc, #4]	@ (8014b98 <__errno+0x8>)
 8014b92:	6818      	ldr	r0, [r3, #0]
 8014b94:	4770      	bx	lr
 8014b96:	bf00      	nop
 8014b98:	200001d4 	.word	0x200001d4

08014b9c <__libc_init_array>:
 8014b9c:	b570      	push	{r4, r5, r6, lr}
 8014b9e:	4d0d      	ldr	r5, [pc, #52]	@ (8014bd4 <__libc_init_array+0x38>)
 8014ba0:	4c0d      	ldr	r4, [pc, #52]	@ (8014bd8 <__libc_init_array+0x3c>)
 8014ba2:	1b64      	subs	r4, r4, r5
 8014ba4:	10a4      	asrs	r4, r4, #2
 8014ba6:	2600      	movs	r6, #0
 8014ba8:	42a6      	cmp	r6, r4
 8014baa:	d109      	bne.n	8014bc0 <__libc_init_array+0x24>
 8014bac:	4d0b      	ldr	r5, [pc, #44]	@ (8014bdc <__libc_init_array+0x40>)
 8014bae:	4c0c      	ldr	r4, [pc, #48]	@ (8014be0 <__libc_init_array+0x44>)
 8014bb0:	f002 fbc6 	bl	8017340 <_init>
 8014bb4:	1b64      	subs	r4, r4, r5
 8014bb6:	10a4      	asrs	r4, r4, #2
 8014bb8:	2600      	movs	r6, #0
 8014bba:	42a6      	cmp	r6, r4
 8014bbc:	d105      	bne.n	8014bca <__libc_init_array+0x2e>
 8014bbe:	bd70      	pop	{r4, r5, r6, pc}
 8014bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8014bc4:	4798      	blx	r3
 8014bc6:	3601      	adds	r6, #1
 8014bc8:	e7ee      	b.n	8014ba8 <__libc_init_array+0xc>
 8014bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8014bce:	4798      	blx	r3
 8014bd0:	3601      	adds	r6, #1
 8014bd2:	e7f2      	b.n	8014bba <__libc_init_array+0x1e>
 8014bd4:	08019698 	.word	0x08019698
 8014bd8:	08019698 	.word	0x08019698
 8014bdc:	08019698 	.word	0x08019698
 8014be0:	080196a0 	.word	0x080196a0

08014be4 <__retarget_lock_init_recursive>:
 8014be4:	4770      	bx	lr

08014be6 <__retarget_lock_close_recursive>:
 8014be6:	4770      	bx	lr

08014be8 <__retarget_lock_acquire_recursive>:
 8014be8:	4770      	bx	lr

08014bea <__retarget_lock_release_recursive>:
 8014bea:	4770      	bx	lr

08014bec <memcpy>:
 8014bec:	440a      	add	r2, r1
 8014bee:	4291      	cmp	r1, r2
 8014bf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8014bf4:	d100      	bne.n	8014bf8 <memcpy+0xc>
 8014bf6:	4770      	bx	lr
 8014bf8:	b510      	push	{r4, lr}
 8014bfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014bfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014c02:	4291      	cmp	r1, r2
 8014c04:	d1f9      	bne.n	8014bfa <memcpy+0xe>
 8014c06:	bd10      	pop	{r4, pc}

08014c08 <nan>:
 8014c08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014c10 <nan+0x8>
 8014c0c:	4770      	bx	lr
 8014c0e:	bf00      	nop
 8014c10:	00000000 	.word	0x00000000
 8014c14:	7ff80000 	.word	0x7ff80000

08014c18 <nanf>:
 8014c18:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8014c20 <nanf+0x8>
 8014c1c:	4770      	bx	lr
 8014c1e:	bf00      	nop
 8014c20:	7fc00000 	.word	0x7fc00000

08014c24 <abort>:
 8014c24:	b508      	push	{r3, lr}
 8014c26:	2006      	movs	r0, #6
 8014c28:	f002 fac2 	bl	80171b0 <raise>
 8014c2c:	2001      	movs	r0, #1
 8014c2e:	f7f1 ff83 	bl	8006b38 <_exit>

08014c32 <quorem>:
 8014c32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c36:	6903      	ldr	r3, [r0, #16]
 8014c38:	690c      	ldr	r4, [r1, #16]
 8014c3a:	42a3      	cmp	r3, r4
 8014c3c:	4607      	mov	r7, r0
 8014c3e:	db7e      	blt.n	8014d3e <quorem+0x10c>
 8014c40:	3c01      	subs	r4, #1
 8014c42:	f101 0814 	add.w	r8, r1, #20
 8014c46:	00a3      	lsls	r3, r4, #2
 8014c48:	f100 0514 	add.w	r5, r0, #20
 8014c4c:	9300      	str	r3, [sp, #0]
 8014c4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014c52:	9301      	str	r3, [sp, #4]
 8014c54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014c58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014c5c:	3301      	adds	r3, #1
 8014c5e:	429a      	cmp	r2, r3
 8014c60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014c64:	fbb2 f6f3 	udiv	r6, r2, r3
 8014c68:	d32e      	bcc.n	8014cc8 <quorem+0x96>
 8014c6a:	f04f 0a00 	mov.w	sl, #0
 8014c6e:	46c4      	mov	ip, r8
 8014c70:	46ae      	mov	lr, r5
 8014c72:	46d3      	mov	fp, sl
 8014c74:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014c78:	b298      	uxth	r0, r3
 8014c7a:	fb06 a000 	mla	r0, r6, r0, sl
 8014c7e:	0c02      	lsrs	r2, r0, #16
 8014c80:	0c1b      	lsrs	r3, r3, #16
 8014c82:	fb06 2303 	mla	r3, r6, r3, r2
 8014c86:	f8de 2000 	ldr.w	r2, [lr]
 8014c8a:	b280      	uxth	r0, r0
 8014c8c:	b292      	uxth	r2, r2
 8014c8e:	1a12      	subs	r2, r2, r0
 8014c90:	445a      	add	r2, fp
 8014c92:	f8de 0000 	ldr.w	r0, [lr]
 8014c96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014c9a:	b29b      	uxth	r3, r3
 8014c9c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014ca0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014ca4:	b292      	uxth	r2, r2
 8014ca6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014caa:	45e1      	cmp	r9, ip
 8014cac:	f84e 2b04 	str.w	r2, [lr], #4
 8014cb0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014cb4:	d2de      	bcs.n	8014c74 <quorem+0x42>
 8014cb6:	9b00      	ldr	r3, [sp, #0]
 8014cb8:	58eb      	ldr	r3, [r5, r3]
 8014cba:	b92b      	cbnz	r3, 8014cc8 <quorem+0x96>
 8014cbc:	9b01      	ldr	r3, [sp, #4]
 8014cbe:	3b04      	subs	r3, #4
 8014cc0:	429d      	cmp	r5, r3
 8014cc2:	461a      	mov	r2, r3
 8014cc4:	d32f      	bcc.n	8014d26 <quorem+0xf4>
 8014cc6:	613c      	str	r4, [r7, #16]
 8014cc8:	4638      	mov	r0, r7
 8014cca:	f001 fc93 	bl	80165f4 <__mcmp>
 8014cce:	2800      	cmp	r0, #0
 8014cd0:	db25      	blt.n	8014d1e <quorem+0xec>
 8014cd2:	4629      	mov	r1, r5
 8014cd4:	2000      	movs	r0, #0
 8014cd6:	f858 2b04 	ldr.w	r2, [r8], #4
 8014cda:	f8d1 c000 	ldr.w	ip, [r1]
 8014cde:	fa1f fe82 	uxth.w	lr, r2
 8014ce2:	fa1f f38c 	uxth.w	r3, ip
 8014ce6:	eba3 030e 	sub.w	r3, r3, lr
 8014cea:	4403      	add	r3, r0
 8014cec:	0c12      	lsrs	r2, r2, #16
 8014cee:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014cf2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014cf6:	b29b      	uxth	r3, r3
 8014cf8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014cfc:	45c1      	cmp	r9, r8
 8014cfe:	f841 3b04 	str.w	r3, [r1], #4
 8014d02:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014d06:	d2e6      	bcs.n	8014cd6 <quorem+0xa4>
 8014d08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014d0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014d10:	b922      	cbnz	r2, 8014d1c <quorem+0xea>
 8014d12:	3b04      	subs	r3, #4
 8014d14:	429d      	cmp	r5, r3
 8014d16:	461a      	mov	r2, r3
 8014d18:	d30b      	bcc.n	8014d32 <quorem+0x100>
 8014d1a:	613c      	str	r4, [r7, #16]
 8014d1c:	3601      	adds	r6, #1
 8014d1e:	4630      	mov	r0, r6
 8014d20:	b003      	add	sp, #12
 8014d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d26:	6812      	ldr	r2, [r2, #0]
 8014d28:	3b04      	subs	r3, #4
 8014d2a:	2a00      	cmp	r2, #0
 8014d2c:	d1cb      	bne.n	8014cc6 <quorem+0x94>
 8014d2e:	3c01      	subs	r4, #1
 8014d30:	e7c6      	b.n	8014cc0 <quorem+0x8e>
 8014d32:	6812      	ldr	r2, [r2, #0]
 8014d34:	3b04      	subs	r3, #4
 8014d36:	2a00      	cmp	r2, #0
 8014d38:	d1ef      	bne.n	8014d1a <quorem+0xe8>
 8014d3a:	3c01      	subs	r4, #1
 8014d3c:	e7ea      	b.n	8014d14 <quorem+0xe2>
 8014d3e:	2000      	movs	r0, #0
 8014d40:	e7ee      	b.n	8014d20 <quorem+0xee>
 8014d42:	0000      	movs	r0, r0
 8014d44:	0000      	movs	r0, r0
	...

08014d48 <_dtoa_r>:
 8014d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d4c:	69c7      	ldr	r7, [r0, #28]
 8014d4e:	b097      	sub	sp, #92	@ 0x5c
 8014d50:	ed8d 0b04 	vstr	d0, [sp, #16]
 8014d54:	ec55 4b10 	vmov	r4, r5, d0
 8014d58:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8014d5a:	9107      	str	r1, [sp, #28]
 8014d5c:	4681      	mov	r9, r0
 8014d5e:	920c      	str	r2, [sp, #48]	@ 0x30
 8014d60:	9311      	str	r3, [sp, #68]	@ 0x44
 8014d62:	b97f      	cbnz	r7, 8014d84 <_dtoa_r+0x3c>
 8014d64:	2010      	movs	r0, #16
 8014d66:	f7fd fadd 	bl	8012324 <malloc>
 8014d6a:	4602      	mov	r2, r0
 8014d6c:	f8c9 001c 	str.w	r0, [r9, #28]
 8014d70:	b920      	cbnz	r0, 8014d7c <_dtoa_r+0x34>
 8014d72:	4ba9      	ldr	r3, [pc, #676]	@ (8015018 <_dtoa_r+0x2d0>)
 8014d74:	21ef      	movs	r1, #239	@ 0xef
 8014d76:	48a9      	ldr	r0, [pc, #676]	@ (801501c <_dtoa_r+0x2d4>)
 8014d78:	f7fd fa4a 	bl	8012210 <__assert_func>
 8014d7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014d80:	6007      	str	r7, [r0, #0]
 8014d82:	60c7      	str	r7, [r0, #12]
 8014d84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014d88:	6819      	ldr	r1, [r3, #0]
 8014d8a:	b159      	cbz	r1, 8014da4 <_dtoa_r+0x5c>
 8014d8c:	685a      	ldr	r2, [r3, #4]
 8014d8e:	604a      	str	r2, [r1, #4]
 8014d90:	2301      	movs	r3, #1
 8014d92:	4093      	lsls	r3, r2
 8014d94:	608b      	str	r3, [r1, #8]
 8014d96:	4648      	mov	r0, r9
 8014d98:	f001 f9b0 	bl	80160fc <_Bfree>
 8014d9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014da0:	2200      	movs	r2, #0
 8014da2:	601a      	str	r2, [r3, #0]
 8014da4:	1e2b      	subs	r3, r5, #0
 8014da6:	bfb9      	ittee	lt
 8014da8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014dac:	9305      	strlt	r3, [sp, #20]
 8014dae:	2300      	movge	r3, #0
 8014db0:	6033      	strge	r3, [r6, #0]
 8014db2:	9f05      	ldr	r7, [sp, #20]
 8014db4:	4b9a      	ldr	r3, [pc, #616]	@ (8015020 <_dtoa_r+0x2d8>)
 8014db6:	bfbc      	itt	lt
 8014db8:	2201      	movlt	r2, #1
 8014dba:	6032      	strlt	r2, [r6, #0]
 8014dbc:	43bb      	bics	r3, r7
 8014dbe:	d112      	bne.n	8014de6 <_dtoa_r+0x9e>
 8014dc0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014dc2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8014dc6:	6013      	str	r3, [r2, #0]
 8014dc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014dcc:	4323      	orrs	r3, r4
 8014dce:	f000 855a 	beq.w	8015886 <_dtoa_r+0xb3e>
 8014dd2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014dd4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8015034 <_dtoa_r+0x2ec>
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	f000 855c 	beq.w	8015896 <_dtoa_r+0xb4e>
 8014dde:	f10a 0303 	add.w	r3, sl, #3
 8014de2:	f000 bd56 	b.w	8015892 <_dtoa_r+0xb4a>
 8014de6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8014dea:	2200      	movs	r2, #0
 8014dec:	ec51 0b17 	vmov	r0, r1, d7
 8014df0:	2300      	movs	r3, #0
 8014df2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8014df6:	f7eb fe97 	bl	8000b28 <__aeabi_dcmpeq>
 8014dfa:	4680      	mov	r8, r0
 8014dfc:	b158      	cbz	r0, 8014e16 <_dtoa_r+0xce>
 8014dfe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014e00:	2301      	movs	r3, #1
 8014e02:	6013      	str	r3, [r2, #0]
 8014e04:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014e06:	b113      	cbz	r3, 8014e0e <_dtoa_r+0xc6>
 8014e08:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8014e0a:	4b86      	ldr	r3, [pc, #536]	@ (8015024 <_dtoa_r+0x2dc>)
 8014e0c:	6013      	str	r3, [r2, #0]
 8014e0e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8015038 <_dtoa_r+0x2f0>
 8014e12:	f000 bd40 	b.w	8015896 <_dtoa_r+0xb4e>
 8014e16:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8014e1a:	aa14      	add	r2, sp, #80	@ 0x50
 8014e1c:	a915      	add	r1, sp, #84	@ 0x54
 8014e1e:	4648      	mov	r0, r9
 8014e20:	f001 fd08 	bl	8016834 <__d2b>
 8014e24:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8014e28:	9002      	str	r0, [sp, #8]
 8014e2a:	2e00      	cmp	r6, #0
 8014e2c:	d078      	beq.n	8014f20 <_dtoa_r+0x1d8>
 8014e2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014e30:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8014e34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014e38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8014e3c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8014e40:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8014e44:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8014e48:	4619      	mov	r1, r3
 8014e4a:	2200      	movs	r2, #0
 8014e4c:	4b76      	ldr	r3, [pc, #472]	@ (8015028 <_dtoa_r+0x2e0>)
 8014e4e:	f7eb fa4b 	bl	80002e8 <__aeabi_dsub>
 8014e52:	a36b      	add	r3, pc, #428	@ (adr r3, 8015000 <_dtoa_r+0x2b8>)
 8014e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e58:	f7eb fbfe 	bl	8000658 <__aeabi_dmul>
 8014e5c:	a36a      	add	r3, pc, #424	@ (adr r3, 8015008 <_dtoa_r+0x2c0>)
 8014e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e62:	f7eb fa43 	bl	80002ec <__adddf3>
 8014e66:	4604      	mov	r4, r0
 8014e68:	4630      	mov	r0, r6
 8014e6a:	460d      	mov	r5, r1
 8014e6c:	f7eb fb8a 	bl	8000584 <__aeabi_i2d>
 8014e70:	a367      	add	r3, pc, #412	@ (adr r3, 8015010 <_dtoa_r+0x2c8>)
 8014e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e76:	f7eb fbef 	bl	8000658 <__aeabi_dmul>
 8014e7a:	4602      	mov	r2, r0
 8014e7c:	460b      	mov	r3, r1
 8014e7e:	4620      	mov	r0, r4
 8014e80:	4629      	mov	r1, r5
 8014e82:	f7eb fa33 	bl	80002ec <__adddf3>
 8014e86:	4604      	mov	r4, r0
 8014e88:	460d      	mov	r5, r1
 8014e8a:	f7eb fe95 	bl	8000bb8 <__aeabi_d2iz>
 8014e8e:	2200      	movs	r2, #0
 8014e90:	4607      	mov	r7, r0
 8014e92:	2300      	movs	r3, #0
 8014e94:	4620      	mov	r0, r4
 8014e96:	4629      	mov	r1, r5
 8014e98:	f7eb fe50 	bl	8000b3c <__aeabi_dcmplt>
 8014e9c:	b140      	cbz	r0, 8014eb0 <_dtoa_r+0x168>
 8014e9e:	4638      	mov	r0, r7
 8014ea0:	f7eb fb70 	bl	8000584 <__aeabi_i2d>
 8014ea4:	4622      	mov	r2, r4
 8014ea6:	462b      	mov	r3, r5
 8014ea8:	f7eb fe3e 	bl	8000b28 <__aeabi_dcmpeq>
 8014eac:	b900      	cbnz	r0, 8014eb0 <_dtoa_r+0x168>
 8014eae:	3f01      	subs	r7, #1
 8014eb0:	2f16      	cmp	r7, #22
 8014eb2:	d852      	bhi.n	8014f5a <_dtoa_r+0x212>
 8014eb4:	4b5d      	ldr	r3, [pc, #372]	@ (801502c <_dtoa_r+0x2e4>)
 8014eb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ebe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8014ec2:	f7eb fe3b 	bl	8000b3c <__aeabi_dcmplt>
 8014ec6:	2800      	cmp	r0, #0
 8014ec8:	d049      	beq.n	8014f5e <_dtoa_r+0x216>
 8014eca:	3f01      	subs	r7, #1
 8014ecc:	2300      	movs	r3, #0
 8014ece:	9310      	str	r3, [sp, #64]	@ 0x40
 8014ed0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8014ed2:	1b9b      	subs	r3, r3, r6
 8014ed4:	1e5a      	subs	r2, r3, #1
 8014ed6:	bf45      	ittet	mi
 8014ed8:	f1c3 0301 	rsbmi	r3, r3, #1
 8014edc:	9300      	strmi	r3, [sp, #0]
 8014ede:	2300      	movpl	r3, #0
 8014ee0:	2300      	movmi	r3, #0
 8014ee2:	9206      	str	r2, [sp, #24]
 8014ee4:	bf54      	ite	pl
 8014ee6:	9300      	strpl	r3, [sp, #0]
 8014ee8:	9306      	strmi	r3, [sp, #24]
 8014eea:	2f00      	cmp	r7, #0
 8014eec:	db39      	blt.n	8014f62 <_dtoa_r+0x21a>
 8014eee:	9b06      	ldr	r3, [sp, #24]
 8014ef0:	970d      	str	r7, [sp, #52]	@ 0x34
 8014ef2:	443b      	add	r3, r7
 8014ef4:	9306      	str	r3, [sp, #24]
 8014ef6:	2300      	movs	r3, #0
 8014ef8:	9308      	str	r3, [sp, #32]
 8014efa:	9b07      	ldr	r3, [sp, #28]
 8014efc:	2b09      	cmp	r3, #9
 8014efe:	d863      	bhi.n	8014fc8 <_dtoa_r+0x280>
 8014f00:	2b05      	cmp	r3, #5
 8014f02:	bfc4      	itt	gt
 8014f04:	3b04      	subgt	r3, #4
 8014f06:	9307      	strgt	r3, [sp, #28]
 8014f08:	9b07      	ldr	r3, [sp, #28]
 8014f0a:	f1a3 0302 	sub.w	r3, r3, #2
 8014f0e:	bfcc      	ite	gt
 8014f10:	2400      	movgt	r4, #0
 8014f12:	2401      	movle	r4, #1
 8014f14:	2b03      	cmp	r3, #3
 8014f16:	d863      	bhi.n	8014fe0 <_dtoa_r+0x298>
 8014f18:	e8df f003 	tbb	[pc, r3]
 8014f1c:	2b375452 	.word	0x2b375452
 8014f20:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8014f24:	441e      	add	r6, r3
 8014f26:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8014f2a:	2b20      	cmp	r3, #32
 8014f2c:	bfc1      	itttt	gt
 8014f2e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8014f32:	409f      	lslgt	r7, r3
 8014f34:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8014f38:	fa24 f303 	lsrgt.w	r3, r4, r3
 8014f3c:	bfd6      	itet	le
 8014f3e:	f1c3 0320 	rsble	r3, r3, #32
 8014f42:	ea47 0003 	orrgt.w	r0, r7, r3
 8014f46:	fa04 f003 	lslle.w	r0, r4, r3
 8014f4a:	f7eb fb0b 	bl	8000564 <__aeabi_ui2d>
 8014f4e:	2201      	movs	r2, #1
 8014f50:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8014f54:	3e01      	subs	r6, #1
 8014f56:	9212      	str	r2, [sp, #72]	@ 0x48
 8014f58:	e776      	b.n	8014e48 <_dtoa_r+0x100>
 8014f5a:	2301      	movs	r3, #1
 8014f5c:	e7b7      	b.n	8014ece <_dtoa_r+0x186>
 8014f5e:	9010      	str	r0, [sp, #64]	@ 0x40
 8014f60:	e7b6      	b.n	8014ed0 <_dtoa_r+0x188>
 8014f62:	9b00      	ldr	r3, [sp, #0]
 8014f64:	1bdb      	subs	r3, r3, r7
 8014f66:	9300      	str	r3, [sp, #0]
 8014f68:	427b      	negs	r3, r7
 8014f6a:	9308      	str	r3, [sp, #32]
 8014f6c:	2300      	movs	r3, #0
 8014f6e:	930d      	str	r3, [sp, #52]	@ 0x34
 8014f70:	e7c3      	b.n	8014efa <_dtoa_r+0x1b2>
 8014f72:	2301      	movs	r3, #1
 8014f74:	9309      	str	r3, [sp, #36]	@ 0x24
 8014f76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014f78:	eb07 0b03 	add.w	fp, r7, r3
 8014f7c:	f10b 0301 	add.w	r3, fp, #1
 8014f80:	2b01      	cmp	r3, #1
 8014f82:	9303      	str	r3, [sp, #12]
 8014f84:	bfb8      	it	lt
 8014f86:	2301      	movlt	r3, #1
 8014f88:	e006      	b.n	8014f98 <_dtoa_r+0x250>
 8014f8a:	2301      	movs	r3, #1
 8014f8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8014f8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	dd28      	ble.n	8014fe6 <_dtoa_r+0x29e>
 8014f94:	469b      	mov	fp, r3
 8014f96:	9303      	str	r3, [sp, #12]
 8014f98:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8014f9c:	2100      	movs	r1, #0
 8014f9e:	2204      	movs	r2, #4
 8014fa0:	f102 0514 	add.w	r5, r2, #20
 8014fa4:	429d      	cmp	r5, r3
 8014fa6:	d926      	bls.n	8014ff6 <_dtoa_r+0x2ae>
 8014fa8:	6041      	str	r1, [r0, #4]
 8014faa:	4648      	mov	r0, r9
 8014fac:	f001 f866 	bl	801607c <_Balloc>
 8014fb0:	4682      	mov	sl, r0
 8014fb2:	2800      	cmp	r0, #0
 8014fb4:	d142      	bne.n	801503c <_dtoa_r+0x2f4>
 8014fb6:	4b1e      	ldr	r3, [pc, #120]	@ (8015030 <_dtoa_r+0x2e8>)
 8014fb8:	4602      	mov	r2, r0
 8014fba:	f240 11af 	movw	r1, #431	@ 0x1af
 8014fbe:	e6da      	b.n	8014d76 <_dtoa_r+0x2e>
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	e7e3      	b.n	8014f8c <_dtoa_r+0x244>
 8014fc4:	2300      	movs	r3, #0
 8014fc6:	e7d5      	b.n	8014f74 <_dtoa_r+0x22c>
 8014fc8:	2401      	movs	r4, #1
 8014fca:	2300      	movs	r3, #0
 8014fcc:	9307      	str	r3, [sp, #28]
 8014fce:	9409      	str	r4, [sp, #36]	@ 0x24
 8014fd0:	f04f 3bff 	mov.w	fp, #4294967295
 8014fd4:	2200      	movs	r2, #0
 8014fd6:	f8cd b00c 	str.w	fp, [sp, #12]
 8014fda:	2312      	movs	r3, #18
 8014fdc:	920c      	str	r2, [sp, #48]	@ 0x30
 8014fde:	e7db      	b.n	8014f98 <_dtoa_r+0x250>
 8014fe0:	2301      	movs	r3, #1
 8014fe2:	9309      	str	r3, [sp, #36]	@ 0x24
 8014fe4:	e7f4      	b.n	8014fd0 <_dtoa_r+0x288>
 8014fe6:	f04f 0b01 	mov.w	fp, #1
 8014fea:	f8cd b00c 	str.w	fp, [sp, #12]
 8014fee:	465b      	mov	r3, fp
 8014ff0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8014ff4:	e7d0      	b.n	8014f98 <_dtoa_r+0x250>
 8014ff6:	3101      	adds	r1, #1
 8014ff8:	0052      	lsls	r2, r2, #1
 8014ffa:	e7d1      	b.n	8014fa0 <_dtoa_r+0x258>
 8014ffc:	f3af 8000 	nop.w
 8015000:	636f4361 	.word	0x636f4361
 8015004:	3fd287a7 	.word	0x3fd287a7
 8015008:	8b60c8b3 	.word	0x8b60c8b3
 801500c:	3fc68a28 	.word	0x3fc68a28
 8015010:	509f79fb 	.word	0x509f79fb
 8015014:	3fd34413 	.word	0x3fd34413
 8015018:	08019283 	.word	0x08019283
 801501c:	08019309 	.word	0x08019309
 8015020:	7ff00000 	.word	0x7ff00000
 8015024:	0801925b 	.word	0x0801925b
 8015028:	3ff80000 	.word	0x3ff80000
 801502c:	080195c8 	.word	0x080195c8
 8015030:	08019361 	.word	0x08019361
 8015034:	08019305 	.word	0x08019305
 8015038:	0801925a 	.word	0x0801925a
 801503c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015040:	6018      	str	r0, [r3, #0]
 8015042:	9b03      	ldr	r3, [sp, #12]
 8015044:	2b0e      	cmp	r3, #14
 8015046:	f200 80a1 	bhi.w	801518c <_dtoa_r+0x444>
 801504a:	2c00      	cmp	r4, #0
 801504c:	f000 809e 	beq.w	801518c <_dtoa_r+0x444>
 8015050:	2f00      	cmp	r7, #0
 8015052:	dd33      	ble.n	80150bc <_dtoa_r+0x374>
 8015054:	4b9c      	ldr	r3, [pc, #624]	@ (80152c8 <_dtoa_r+0x580>)
 8015056:	f007 020f 	and.w	r2, r7, #15
 801505a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801505e:	ed93 7b00 	vldr	d7, [r3]
 8015062:	05f8      	lsls	r0, r7, #23
 8015064:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8015068:	ea4f 1427 	mov.w	r4, r7, asr #4
 801506c:	d516      	bpl.n	801509c <_dtoa_r+0x354>
 801506e:	4b97      	ldr	r3, [pc, #604]	@ (80152cc <_dtoa_r+0x584>)
 8015070:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8015074:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015078:	f7eb fc18 	bl	80008ac <__aeabi_ddiv>
 801507c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015080:	f004 040f 	and.w	r4, r4, #15
 8015084:	2603      	movs	r6, #3
 8015086:	4d91      	ldr	r5, [pc, #580]	@ (80152cc <_dtoa_r+0x584>)
 8015088:	b954      	cbnz	r4, 80150a0 <_dtoa_r+0x358>
 801508a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801508e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015092:	f7eb fc0b 	bl	80008ac <__aeabi_ddiv>
 8015096:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801509a:	e028      	b.n	80150ee <_dtoa_r+0x3a6>
 801509c:	2602      	movs	r6, #2
 801509e:	e7f2      	b.n	8015086 <_dtoa_r+0x33e>
 80150a0:	07e1      	lsls	r1, r4, #31
 80150a2:	d508      	bpl.n	80150b6 <_dtoa_r+0x36e>
 80150a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80150a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80150ac:	f7eb fad4 	bl	8000658 <__aeabi_dmul>
 80150b0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80150b4:	3601      	adds	r6, #1
 80150b6:	1064      	asrs	r4, r4, #1
 80150b8:	3508      	adds	r5, #8
 80150ba:	e7e5      	b.n	8015088 <_dtoa_r+0x340>
 80150bc:	f000 80af 	beq.w	801521e <_dtoa_r+0x4d6>
 80150c0:	427c      	negs	r4, r7
 80150c2:	4b81      	ldr	r3, [pc, #516]	@ (80152c8 <_dtoa_r+0x580>)
 80150c4:	4d81      	ldr	r5, [pc, #516]	@ (80152cc <_dtoa_r+0x584>)
 80150c6:	f004 020f 	and.w	r2, r4, #15
 80150ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80150ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80150d6:	f7eb fabf 	bl	8000658 <__aeabi_dmul>
 80150da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80150de:	1124      	asrs	r4, r4, #4
 80150e0:	2300      	movs	r3, #0
 80150e2:	2602      	movs	r6, #2
 80150e4:	2c00      	cmp	r4, #0
 80150e6:	f040 808f 	bne.w	8015208 <_dtoa_r+0x4c0>
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d1d3      	bne.n	8015096 <_dtoa_r+0x34e>
 80150ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80150f0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	f000 8094 	beq.w	8015222 <_dtoa_r+0x4da>
 80150fa:	4b75      	ldr	r3, [pc, #468]	@ (80152d0 <_dtoa_r+0x588>)
 80150fc:	2200      	movs	r2, #0
 80150fe:	4620      	mov	r0, r4
 8015100:	4629      	mov	r1, r5
 8015102:	f7eb fd1b 	bl	8000b3c <__aeabi_dcmplt>
 8015106:	2800      	cmp	r0, #0
 8015108:	f000 808b 	beq.w	8015222 <_dtoa_r+0x4da>
 801510c:	9b03      	ldr	r3, [sp, #12]
 801510e:	2b00      	cmp	r3, #0
 8015110:	f000 8087 	beq.w	8015222 <_dtoa_r+0x4da>
 8015114:	f1bb 0f00 	cmp.w	fp, #0
 8015118:	dd34      	ble.n	8015184 <_dtoa_r+0x43c>
 801511a:	4620      	mov	r0, r4
 801511c:	4b6d      	ldr	r3, [pc, #436]	@ (80152d4 <_dtoa_r+0x58c>)
 801511e:	2200      	movs	r2, #0
 8015120:	4629      	mov	r1, r5
 8015122:	f7eb fa99 	bl	8000658 <__aeabi_dmul>
 8015126:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801512a:	f107 38ff 	add.w	r8, r7, #4294967295
 801512e:	3601      	adds	r6, #1
 8015130:	465c      	mov	r4, fp
 8015132:	4630      	mov	r0, r6
 8015134:	f7eb fa26 	bl	8000584 <__aeabi_i2d>
 8015138:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801513c:	f7eb fa8c 	bl	8000658 <__aeabi_dmul>
 8015140:	4b65      	ldr	r3, [pc, #404]	@ (80152d8 <_dtoa_r+0x590>)
 8015142:	2200      	movs	r2, #0
 8015144:	f7eb f8d2 	bl	80002ec <__adddf3>
 8015148:	4605      	mov	r5, r0
 801514a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801514e:	2c00      	cmp	r4, #0
 8015150:	d16a      	bne.n	8015228 <_dtoa_r+0x4e0>
 8015152:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015156:	4b61      	ldr	r3, [pc, #388]	@ (80152dc <_dtoa_r+0x594>)
 8015158:	2200      	movs	r2, #0
 801515a:	f7eb f8c5 	bl	80002e8 <__aeabi_dsub>
 801515e:	4602      	mov	r2, r0
 8015160:	460b      	mov	r3, r1
 8015162:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015166:	462a      	mov	r2, r5
 8015168:	4633      	mov	r3, r6
 801516a:	f7eb fd05 	bl	8000b78 <__aeabi_dcmpgt>
 801516e:	2800      	cmp	r0, #0
 8015170:	f040 8298 	bne.w	80156a4 <_dtoa_r+0x95c>
 8015174:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015178:	462a      	mov	r2, r5
 801517a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801517e:	f7eb fcdd 	bl	8000b3c <__aeabi_dcmplt>
 8015182:	bb38      	cbnz	r0, 80151d4 <_dtoa_r+0x48c>
 8015184:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8015188:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801518c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801518e:	2b00      	cmp	r3, #0
 8015190:	f2c0 8157 	blt.w	8015442 <_dtoa_r+0x6fa>
 8015194:	2f0e      	cmp	r7, #14
 8015196:	f300 8154 	bgt.w	8015442 <_dtoa_r+0x6fa>
 801519a:	4b4b      	ldr	r3, [pc, #300]	@ (80152c8 <_dtoa_r+0x580>)
 801519c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80151a0:	ed93 7b00 	vldr	d7, [r3]
 80151a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	ed8d 7b00 	vstr	d7, [sp]
 80151ac:	f280 80e5 	bge.w	801537a <_dtoa_r+0x632>
 80151b0:	9b03      	ldr	r3, [sp, #12]
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	f300 80e1 	bgt.w	801537a <_dtoa_r+0x632>
 80151b8:	d10c      	bne.n	80151d4 <_dtoa_r+0x48c>
 80151ba:	4b48      	ldr	r3, [pc, #288]	@ (80152dc <_dtoa_r+0x594>)
 80151bc:	2200      	movs	r2, #0
 80151be:	ec51 0b17 	vmov	r0, r1, d7
 80151c2:	f7eb fa49 	bl	8000658 <__aeabi_dmul>
 80151c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80151ca:	f7eb fccb 	bl	8000b64 <__aeabi_dcmpge>
 80151ce:	2800      	cmp	r0, #0
 80151d0:	f000 8266 	beq.w	80156a0 <_dtoa_r+0x958>
 80151d4:	2400      	movs	r4, #0
 80151d6:	4625      	mov	r5, r4
 80151d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80151da:	4656      	mov	r6, sl
 80151dc:	ea6f 0803 	mvn.w	r8, r3
 80151e0:	2700      	movs	r7, #0
 80151e2:	4621      	mov	r1, r4
 80151e4:	4648      	mov	r0, r9
 80151e6:	f000 ff89 	bl	80160fc <_Bfree>
 80151ea:	2d00      	cmp	r5, #0
 80151ec:	f000 80bd 	beq.w	801536a <_dtoa_r+0x622>
 80151f0:	b12f      	cbz	r7, 80151fe <_dtoa_r+0x4b6>
 80151f2:	42af      	cmp	r7, r5
 80151f4:	d003      	beq.n	80151fe <_dtoa_r+0x4b6>
 80151f6:	4639      	mov	r1, r7
 80151f8:	4648      	mov	r0, r9
 80151fa:	f000 ff7f 	bl	80160fc <_Bfree>
 80151fe:	4629      	mov	r1, r5
 8015200:	4648      	mov	r0, r9
 8015202:	f000 ff7b 	bl	80160fc <_Bfree>
 8015206:	e0b0      	b.n	801536a <_dtoa_r+0x622>
 8015208:	07e2      	lsls	r2, r4, #31
 801520a:	d505      	bpl.n	8015218 <_dtoa_r+0x4d0>
 801520c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015210:	f7eb fa22 	bl	8000658 <__aeabi_dmul>
 8015214:	3601      	adds	r6, #1
 8015216:	2301      	movs	r3, #1
 8015218:	1064      	asrs	r4, r4, #1
 801521a:	3508      	adds	r5, #8
 801521c:	e762      	b.n	80150e4 <_dtoa_r+0x39c>
 801521e:	2602      	movs	r6, #2
 8015220:	e765      	b.n	80150ee <_dtoa_r+0x3a6>
 8015222:	9c03      	ldr	r4, [sp, #12]
 8015224:	46b8      	mov	r8, r7
 8015226:	e784      	b.n	8015132 <_dtoa_r+0x3ea>
 8015228:	4b27      	ldr	r3, [pc, #156]	@ (80152c8 <_dtoa_r+0x580>)
 801522a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801522c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015230:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015234:	4454      	add	r4, sl
 8015236:	2900      	cmp	r1, #0
 8015238:	d054      	beq.n	80152e4 <_dtoa_r+0x59c>
 801523a:	4929      	ldr	r1, [pc, #164]	@ (80152e0 <_dtoa_r+0x598>)
 801523c:	2000      	movs	r0, #0
 801523e:	f7eb fb35 	bl	80008ac <__aeabi_ddiv>
 8015242:	4633      	mov	r3, r6
 8015244:	462a      	mov	r2, r5
 8015246:	f7eb f84f 	bl	80002e8 <__aeabi_dsub>
 801524a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801524e:	4656      	mov	r6, sl
 8015250:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015254:	f7eb fcb0 	bl	8000bb8 <__aeabi_d2iz>
 8015258:	4605      	mov	r5, r0
 801525a:	f7eb f993 	bl	8000584 <__aeabi_i2d>
 801525e:	4602      	mov	r2, r0
 8015260:	460b      	mov	r3, r1
 8015262:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015266:	f7eb f83f 	bl	80002e8 <__aeabi_dsub>
 801526a:	3530      	adds	r5, #48	@ 0x30
 801526c:	4602      	mov	r2, r0
 801526e:	460b      	mov	r3, r1
 8015270:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015274:	f806 5b01 	strb.w	r5, [r6], #1
 8015278:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801527c:	f7eb fc5e 	bl	8000b3c <__aeabi_dcmplt>
 8015280:	2800      	cmp	r0, #0
 8015282:	d172      	bne.n	801536a <_dtoa_r+0x622>
 8015284:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015288:	4911      	ldr	r1, [pc, #68]	@ (80152d0 <_dtoa_r+0x588>)
 801528a:	2000      	movs	r0, #0
 801528c:	f7eb f82c 	bl	80002e8 <__aeabi_dsub>
 8015290:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8015294:	f7eb fc52 	bl	8000b3c <__aeabi_dcmplt>
 8015298:	2800      	cmp	r0, #0
 801529a:	f040 80b4 	bne.w	8015406 <_dtoa_r+0x6be>
 801529e:	42a6      	cmp	r6, r4
 80152a0:	f43f af70 	beq.w	8015184 <_dtoa_r+0x43c>
 80152a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80152a8:	4b0a      	ldr	r3, [pc, #40]	@ (80152d4 <_dtoa_r+0x58c>)
 80152aa:	2200      	movs	r2, #0
 80152ac:	f7eb f9d4 	bl	8000658 <__aeabi_dmul>
 80152b0:	4b08      	ldr	r3, [pc, #32]	@ (80152d4 <_dtoa_r+0x58c>)
 80152b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80152b6:	2200      	movs	r2, #0
 80152b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80152bc:	f7eb f9cc 	bl	8000658 <__aeabi_dmul>
 80152c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80152c4:	e7c4      	b.n	8015250 <_dtoa_r+0x508>
 80152c6:	bf00      	nop
 80152c8:	080195c8 	.word	0x080195c8
 80152cc:	080195a0 	.word	0x080195a0
 80152d0:	3ff00000 	.word	0x3ff00000
 80152d4:	40240000 	.word	0x40240000
 80152d8:	401c0000 	.word	0x401c0000
 80152dc:	40140000 	.word	0x40140000
 80152e0:	3fe00000 	.word	0x3fe00000
 80152e4:	4631      	mov	r1, r6
 80152e6:	4628      	mov	r0, r5
 80152e8:	f7eb f9b6 	bl	8000658 <__aeabi_dmul>
 80152ec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80152f0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80152f2:	4656      	mov	r6, sl
 80152f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80152f8:	f7eb fc5e 	bl	8000bb8 <__aeabi_d2iz>
 80152fc:	4605      	mov	r5, r0
 80152fe:	f7eb f941 	bl	8000584 <__aeabi_i2d>
 8015302:	4602      	mov	r2, r0
 8015304:	460b      	mov	r3, r1
 8015306:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801530a:	f7ea ffed 	bl	80002e8 <__aeabi_dsub>
 801530e:	3530      	adds	r5, #48	@ 0x30
 8015310:	f806 5b01 	strb.w	r5, [r6], #1
 8015314:	4602      	mov	r2, r0
 8015316:	460b      	mov	r3, r1
 8015318:	42a6      	cmp	r6, r4
 801531a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801531e:	f04f 0200 	mov.w	r2, #0
 8015322:	d124      	bne.n	801536e <_dtoa_r+0x626>
 8015324:	4baf      	ldr	r3, [pc, #700]	@ (80155e4 <_dtoa_r+0x89c>)
 8015326:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801532a:	f7ea ffdf 	bl	80002ec <__adddf3>
 801532e:	4602      	mov	r2, r0
 8015330:	460b      	mov	r3, r1
 8015332:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015336:	f7eb fc1f 	bl	8000b78 <__aeabi_dcmpgt>
 801533a:	2800      	cmp	r0, #0
 801533c:	d163      	bne.n	8015406 <_dtoa_r+0x6be>
 801533e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8015342:	49a8      	ldr	r1, [pc, #672]	@ (80155e4 <_dtoa_r+0x89c>)
 8015344:	2000      	movs	r0, #0
 8015346:	f7ea ffcf 	bl	80002e8 <__aeabi_dsub>
 801534a:	4602      	mov	r2, r0
 801534c:	460b      	mov	r3, r1
 801534e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015352:	f7eb fbf3 	bl	8000b3c <__aeabi_dcmplt>
 8015356:	2800      	cmp	r0, #0
 8015358:	f43f af14 	beq.w	8015184 <_dtoa_r+0x43c>
 801535c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801535e:	1e73      	subs	r3, r6, #1
 8015360:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015362:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015366:	2b30      	cmp	r3, #48	@ 0x30
 8015368:	d0f8      	beq.n	801535c <_dtoa_r+0x614>
 801536a:	4647      	mov	r7, r8
 801536c:	e03b      	b.n	80153e6 <_dtoa_r+0x69e>
 801536e:	4b9e      	ldr	r3, [pc, #632]	@ (80155e8 <_dtoa_r+0x8a0>)
 8015370:	f7eb f972 	bl	8000658 <__aeabi_dmul>
 8015374:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015378:	e7bc      	b.n	80152f4 <_dtoa_r+0x5ac>
 801537a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801537e:	4656      	mov	r6, sl
 8015380:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015384:	4620      	mov	r0, r4
 8015386:	4629      	mov	r1, r5
 8015388:	f7eb fa90 	bl	80008ac <__aeabi_ddiv>
 801538c:	f7eb fc14 	bl	8000bb8 <__aeabi_d2iz>
 8015390:	4680      	mov	r8, r0
 8015392:	f7eb f8f7 	bl	8000584 <__aeabi_i2d>
 8015396:	e9dd 2300 	ldrd	r2, r3, [sp]
 801539a:	f7eb f95d 	bl	8000658 <__aeabi_dmul>
 801539e:	4602      	mov	r2, r0
 80153a0:	460b      	mov	r3, r1
 80153a2:	4620      	mov	r0, r4
 80153a4:	4629      	mov	r1, r5
 80153a6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80153aa:	f7ea ff9d 	bl	80002e8 <__aeabi_dsub>
 80153ae:	f806 4b01 	strb.w	r4, [r6], #1
 80153b2:	9d03      	ldr	r5, [sp, #12]
 80153b4:	eba6 040a 	sub.w	r4, r6, sl
 80153b8:	42a5      	cmp	r5, r4
 80153ba:	4602      	mov	r2, r0
 80153bc:	460b      	mov	r3, r1
 80153be:	d133      	bne.n	8015428 <_dtoa_r+0x6e0>
 80153c0:	f7ea ff94 	bl	80002ec <__adddf3>
 80153c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80153c8:	4604      	mov	r4, r0
 80153ca:	460d      	mov	r5, r1
 80153cc:	f7eb fbd4 	bl	8000b78 <__aeabi_dcmpgt>
 80153d0:	b9c0      	cbnz	r0, 8015404 <_dtoa_r+0x6bc>
 80153d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80153d6:	4620      	mov	r0, r4
 80153d8:	4629      	mov	r1, r5
 80153da:	f7eb fba5 	bl	8000b28 <__aeabi_dcmpeq>
 80153de:	b110      	cbz	r0, 80153e6 <_dtoa_r+0x69e>
 80153e0:	f018 0f01 	tst.w	r8, #1
 80153e4:	d10e      	bne.n	8015404 <_dtoa_r+0x6bc>
 80153e6:	9902      	ldr	r1, [sp, #8]
 80153e8:	4648      	mov	r0, r9
 80153ea:	f000 fe87 	bl	80160fc <_Bfree>
 80153ee:	2300      	movs	r3, #0
 80153f0:	7033      	strb	r3, [r6, #0]
 80153f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80153f4:	3701      	adds	r7, #1
 80153f6:	601f      	str	r7, [r3, #0]
 80153f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	f000 824b 	beq.w	8015896 <_dtoa_r+0xb4e>
 8015400:	601e      	str	r6, [r3, #0]
 8015402:	e248      	b.n	8015896 <_dtoa_r+0xb4e>
 8015404:	46b8      	mov	r8, r7
 8015406:	4633      	mov	r3, r6
 8015408:	461e      	mov	r6, r3
 801540a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801540e:	2a39      	cmp	r2, #57	@ 0x39
 8015410:	d106      	bne.n	8015420 <_dtoa_r+0x6d8>
 8015412:	459a      	cmp	sl, r3
 8015414:	d1f8      	bne.n	8015408 <_dtoa_r+0x6c0>
 8015416:	2230      	movs	r2, #48	@ 0x30
 8015418:	f108 0801 	add.w	r8, r8, #1
 801541c:	f88a 2000 	strb.w	r2, [sl]
 8015420:	781a      	ldrb	r2, [r3, #0]
 8015422:	3201      	adds	r2, #1
 8015424:	701a      	strb	r2, [r3, #0]
 8015426:	e7a0      	b.n	801536a <_dtoa_r+0x622>
 8015428:	4b6f      	ldr	r3, [pc, #444]	@ (80155e8 <_dtoa_r+0x8a0>)
 801542a:	2200      	movs	r2, #0
 801542c:	f7eb f914 	bl	8000658 <__aeabi_dmul>
 8015430:	2200      	movs	r2, #0
 8015432:	2300      	movs	r3, #0
 8015434:	4604      	mov	r4, r0
 8015436:	460d      	mov	r5, r1
 8015438:	f7eb fb76 	bl	8000b28 <__aeabi_dcmpeq>
 801543c:	2800      	cmp	r0, #0
 801543e:	d09f      	beq.n	8015380 <_dtoa_r+0x638>
 8015440:	e7d1      	b.n	80153e6 <_dtoa_r+0x69e>
 8015442:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015444:	2a00      	cmp	r2, #0
 8015446:	f000 80ea 	beq.w	801561e <_dtoa_r+0x8d6>
 801544a:	9a07      	ldr	r2, [sp, #28]
 801544c:	2a01      	cmp	r2, #1
 801544e:	f300 80cd 	bgt.w	80155ec <_dtoa_r+0x8a4>
 8015452:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015454:	2a00      	cmp	r2, #0
 8015456:	f000 80c1 	beq.w	80155dc <_dtoa_r+0x894>
 801545a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801545e:	9c08      	ldr	r4, [sp, #32]
 8015460:	9e00      	ldr	r6, [sp, #0]
 8015462:	9a00      	ldr	r2, [sp, #0]
 8015464:	441a      	add	r2, r3
 8015466:	9200      	str	r2, [sp, #0]
 8015468:	9a06      	ldr	r2, [sp, #24]
 801546a:	2101      	movs	r1, #1
 801546c:	441a      	add	r2, r3
 801546e:	4648      	mov	r0, r9
 8015470:	9206      	str	r2, [sp, #24]
 8015472:	f000 ff41 	bl	80162f8 <__i2b>
 8015476:	4605      	mov	r5, r0
 8015478:	b166      	cbz	r6, 8015494 <_dtoa_r+0x74c>
 801547a:	9b06      	ldr	r3, [sp, #24]
 801547c:	2b00      	cmp	r3, #0
 801547e:	dd09      	ble.n	8015494 <_dtoa_r+0x74c>
 8015480:	42b3      	cmp	r3, r6
 8015482:	9a00      	ldr	r2, [sp, #0]
 8015484:	bfa8      	it	ge
 8015486:	4633      	movge	r3, r6
 8015488:	1ad2      	subs	r2, r2, r3
 801548a:	9200      	str	r2, [sp, #0]
 801548c:	9a06      	ldr	r2, [sp, #24]
 801548e:	1af6      	subs	r6, r6, r3
 8015490:	1ad3      	subs	r3, r2, r3
 8015492:	9306      	str	r3, [sp, #24]
 8015494:	9b08      	ldr	r3, [sp, #32]
 8015496:	b30b      	cbz	r3, 80154dc <_dtoa_r+0x794>
 8015498:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801549a:	2b00      	cmp	r3, #0
 801549c:	f000 80c6 	beq.w	801562c <_dtoa_r+0x8e4>
 80154a0:	2c00      	cmp	r4, #0
 80154a2:	f000 80c0 	beq.w	8015626 <_dtoa_r+0x8de>
 80154a6:	4629      	mov	r1, r5
 80154a8:	4622      	mov	r2, r4
 80154aa:	4648      	mov	r0, r9
 80154ac:	f000 ffdc 	bl	8016468 <__pow5mult>
 80154b0:	9a02      	ldr	r2, [sp, #8]
 80154b2:	4601      	mov	r1, r0
 80154b4:	4605      	mov	r5, r0
 80154b6:	4648      	mov	r0, r9
 80154b8:	f000 ff34 	bl	8016324 <__multiply>
 80154bc:	9902      	ldr	r1, [sp, #8]
 80154be:	4680      	mov	r8, r0
 80154c0:	4648      	mov	r0, r9
 80154c2:	f000 fe1b 	bl	80160fc <_Bfree>
 80154c6:	9b08      	ldr	r3, [sp, #32]
 80154c8:	1b1b      	subs	r3, r3, r4
 80154ca:	9308      	str	r3, [sp, #32]
 80154cc:	f000 80b1 	beq.w	8015632 <_dtoa_r+0x8ea>
 80154d0:	9a08      	ldr	r2, [sp, #32]
 80154d2:	4641      	mov	r1, r8
 80154d4:	4648      	mov	r0, r9
 80154d6:	f000 ffc7 	bl	8016468 <__pow5mult>
 80154da:	9002      	str	r0, [sp, #8]
 80154dc:	2101      	movs	r1, #1
 80154de:	4648      	mov	r0, r9
 80154e0:	f000 ff0a 	bl	80162f8 <__i2b>
 80154e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80154e6:	4604      	mov	r4, r0
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	f000 81d8 	beq.w	801589e <_dtoa_r+0xb56>
 80154ee:	461a      	mov	r2, r3
 80154f0:	4601      	mov	r1, r0
 80154f2:	4648      	mov	r0, r9
 80154f4:	f000 ffb8 	bl	8016468 <__pow5mult>
 80154f8:	9b07      	ldr	r3, [sp, #28]
 80154fa:	2b01      	cmp	r3, #1
 80154fc:	4604      	mov	r4, r0
 80154fe:	f300 809f 	bgt.w	8015640 <_dtoa_r+0x8f8>
 8015502:	9b04      	ldr	r3, [sp, #16]
 8015504:	2b00      	cmp	r3, #0
 8015506:	f040 8097 	bne.w	8015638 <_dtoa_r+0x8f0>
 801550a:	9b05      	ldr	r3, [sp, #20]
 801550c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015510:	2b00      	cmp	r3, #0
 8015512:	f040 8093 	bne.w	801563c <_dtoa_r+0x8f4>
 8015516:	9b05      	ldr	r3, [sp, #20]
 8015518:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801551c:	0d1b      	lsrs	r3, r3, #20
 801551e:	051b      	lsls	r3, r3, #20
 8015520:	b133      	cbz	r3, 8015530 <_dtoa_r+0x7e8>
 8015522:	9b00      	ldr	r3, [sp, #0]
 8015524:	3301      	adds	r3, #1
 8015526:	9300      	str	r3, [sp, #0]
 8015528:	9b06      	ldr	r3, [sp, #24]
 801552a:	3301      	adds	r3, #1
 801552c:	9306      	str	r3, [sp, #24]
 801552e:	2301      	movs	r3, #1
 8015530:	9308      	str	r3, [sp, #32]
 8015532:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015534:	2b00      	cmp	r3, #0
 8015536:	f000 81b8 	beq.w	80158aa <_dtoa_r+0xb62>
 801553a:	6923      	ldr	r3, [r4, #16]
 801553c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015540:	6918      	ldr	r0, [r3, #16]
 8015542:	f000 fe8d 	bl	8016260 <__hi0bits>
 8015546:	f1c0 0020 	rsb	r0, r0, #32
 801554a:	9b06      	ldr	r3, [sp, #24]
 801554c:	4418      	add	r0, r3
 801554e:	f010 001f 	ands.w	r0, r0, #31
 8015552:	f000 8082 	beq.w	801565a <_dtoa_r+0x912>
 8015556:	f1c0 0320 	rsb	r3, r0, #32
 801555a:	2b04      	cmp	r3, #4
 801555c:	dd73      	ble.n	8015646 <_dtoa_r+0x8fe>
 801555e:	9b00      	ldr	r3, [sp, #0]
 8015560:	f1c0 001c 	rsb	r0, r0, #28
 8015564:	4403      	add	r3, r0
 8015566:	9300      	str	r3, [sp, #0]
 8015568:	9b06      	ldr	r3, [sp, #24]
 801556a:	4403      	add	r3, r0
 801556c:	4406      	add	r6, r0
 801556e:	9306      	str	r3, [sp, #24]
 8015570:	9b00      	ldr	r3, [sp, #0]
 8015572:	2b00      	cmp	r3, #0
 8015574:	dd05      	ble.n	8015582 <_dtoa_r+0x83a>
 8015576:	9902      	ldr	r1, [sp, #8]
 8015578:	461a      	mov	r2, r3
 801557a:	4648      	mov	r0, r9
 801557c:	f000 ffce 	bl	801651c <__lshift>
 8015580:	9002      	str	r0, [sp, #8]
 8015582:	9b06      	ldr	r3, [sp, #24]
 8015584:	2b00      	cmp	r3, #0
 8015586:	dd05      	ble.n	8015594 <_dtoa_r+0x84c>
 8015588:	4621      	mov	r1, r4
 801558a:	461a      	mov	r2, r3
 801558c:	4648      	mov	r0, r9
 801558e:	f000 ffc5 	bl	801651c <__lshift>
 8015592:	4604      	mov	r4, r0
 8015594:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015596:	2b00      	cmp	r3, #0
 8015598:	d061      	beq.n	801565e <_dtoa_r+0x916>
 801559a:	9802      	ldr	r0, [sp, #8]
 801559c:	4621      	mov	r1, r4
 801559e:	f001 f829 	bl	80165f4 <__mcmp>
 80155a2:	2800      	cmp	r0, #0
 80155a4:	da5b      	bge.n	801565e <_dtoa_r+0x916>
 80155a6:	2300      	movs	r3, #0
 80155a8:	9902      	ldr	r1, [sp, #8]
 80155aa:	220a      	movs	r2, #10
 80155ac:	4648      	mov	r0, r9
 80155ae:	f000 fdc7 	bl	8016140 <__multadd>
 80155b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80155b4:	9002      	str	r0, [sp, #8]
 80155b6:	f107 38ff 	add.w	r8, r7, #4294967295
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	f000 8177 	beq.w	80158ae <_dtoa_r+0xb66>
 80155c0:	4629      	mov	r1, r5
 80155c2:	2300      	movs	r3, #0
 80155c4:	220a      	movs	r2, #10
 80155c6:	4648      	mov	r0, r9
 80155c8:	f000 fdba 	bl	8016140 <__multadd>
 80155cc:	f1bb 0f00 	cmp.w	fp, #0
 80155d0:	4605      	mov	r5, r0
 80155d2:	dc6f      	bgt.n	80156b4 <_dtoa_r+0x96c>
 80155d4:	9b07      	ldr	r3, [sp, #28]
 80155d6:	2b02      	cmp	r3, #2
 80155d8:	dc49      	bgt.n	801566e <_dtoa_r+0x926>
 80155da:	e06b      	b.n	80156b4 <_dtoa_r+0x96c>
 80155dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80155de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80155e2:	e73c      	b.n	801545e <_dtoa_r+0x716>
 80155e4:	3fe00000 	.word	0x3fe00000
 80155e8:	40240000 	.word	0x40240000
 80155ec:	9b03      	ldr	r3, [sp, #12]
 80155ee:	1e5c      	subs	r4, r3, #1
 80155f0:	9b08      	ldr	r3, [sp, #32]
 80155f2:	42a3      	cmp	r3, r4
 80155f4:	db09      	blt.n	801560a <_dtoa_r+0x8c2>
 80155f6:	1b1c      	subs	r4, r3, r4
 80155f8:	9b03      	ldr	r3, [sp, #12]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	f6bf af30 	bge.w	8015460 <_dtoa_r+0x718>
 8015600:	9b00      	ldr	r3, [sp, #0]
 8015602:	9a03      	ldr	r2, [sp, #12]
 8015604:	1a9e      	subs	r6, r3, r2
 8015606:	2300      	movs	r3, #0
 8015608:	e72b      	b.n	8015462 <_dtoa_r+0x71a>
 801560a:	9b08      	ldr	r3, [sp, #32]
 801560c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801560e:	9408      	str	r4, [sp, #32]
 8015610:	1ae3      	subs	r3, r4, r3
 8015612:	441a      	add	r2, r3
 8015614:	9e00      	ldr	r6, [sp, #0]
 8015616:	9b03      	ldr	r3, [sp, #12]
 8015618:	920d      	str	r2, [sp, #52]	@ 0x34
 801561a:	2400      	movs	r4, #0
 801561c:	e721      	b.n	8015462 <_dtoa_r+0x71a>
 801561e:	9c08      	ldr	r4, [sp, #32]
 8015620:	9e00      	ldr	r6, [sp, #0]
 8015622:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8015624:	e728      	b.n	8015478 <_dtoa_r+0x730>
 8015626:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801562a:	e751      	b.n	80154d0 <_dtoa_r+0x788>
 801562c:	9a08      	ldr	r2, [sp, #32]
 801562e:	9902      	ldr	r1, [sp, #8]
 8015630:	e750      	b.n	80154d4 <_dtoa_r+0x78c>
 8015632:	f8cd 8008 	str.w	r8, [sp, #8]
 8015636:	e751      	b.n	80154dc <_dtoa_r+0x794>
 8015638:	2300      	movs	r3, #0
 801563a:	e779      	b.n	8015530 <_dtoa_r+0x7e8>
 801563c:	9b04      	ldr	r3, [sp, #16]
 801563e:	e777      	b.n	8015530 <_dtoa_r+0x7e8>
 8015640:	2300      	movs	r3, #0
 8015642:	9308      	str	r3, [sp, #32]
 8015644:	e779      	b.n	801553a <_dtoa_r+0x7f2>
 8015646:	d093      	beq.n	8015570 <_dtoa_r+0x828>
 8015648:	9a00      	ldr	r2, [sp, #0]
 801564a:	331c      	adds	r3, #28
 801564c:	441a      	add	r2, r3
 801564e:	9200      	str	r2, [sp, #0]
 8015650:	9a06      	ldr	r2, [sp, #24]
 8015652:	441a      	add	r2, r3
 8015654:	441e      	add	r6, r3
 8015656:	9206      	str	r2, [sp, #24]
 8015658:	e78a      	b.n	8015570 <_dtoa_r+0x828>
 801565a:	4603      	mov	r3, r0
 801565c:	e7f4      	b.n	8015648 <_dtoa_r+0x900>
 801565e:	9b03      	ldr	r3, [sp, #12]
 8015660:	2b00      	cmp	r3, #0
 8015662:	46b8      	mov	r8, r7
 8015664:	dc20      	bgt.n	80156a8 <_dtoa_r+0x960>
 8015666:	469b      	mov	fp, r3
 8015668:	9b07      	ldr	r3, [sp, #28]
 801566a:	2b02      	cmp	r3, #2
 801566c:	dd1e      	ble.n	80156ac <_dtoa_r+0x964>
 801566e:	f1bb 0f00 	cmp.w	fp, #0
 8015672:	f47f adb1 	bne.w	80151d8 <_dtoa_r+0x490>
 8015676:	4621      	mov	r1, r4
 8015678:	465b      	mov	r3, fp
 801567a:	2205      	movs	r2, #5
 801567c:	4648      	mov	r0, r9
 801567e:	f000 fd5f 	bl	8016140 <__multadd>
 8015682:	4601      	mov	r1, r0
 8015684:	4604      	mov	r4, r0
 8015686:	9802      	ldr	r0, [sp, #8]
 8015688:	f000 ffb4 	bl	80165f4 <__mcmp>
 801568c:	2800      	cmp	r0, #0
 801568e:	f77f ada3 	ble.w	80151d8 <_dtoa_r+0x490>
 8015692:	4656      	mov	r6, sl
 8015694:	2331      	movs	r3, #49	@ 0x31
 8015696:	f806 3b01 	strb.w	r3, [r6], #1
 801569a:	f108 0801 	add.w	r8, r8, #1
 801569e:	e59f      	b.n	80151e0 <_dtoa_r+0x498>
 80156a0:	9c03      	ldr	r4, [sp, #12]
 80156a2:	46b8      	mov	r8, r7
 80156a4:	4625      	mov	r5, r4
 80156a6:	e7f4      	b.n	8015692 <_dtoa_r+0x94a>
 80156a8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80156ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	f000 8101 	beq.w	80158b6 <_dtoa_r+0xb6e>
 80156b4:	2e00      	cmp	r6, #0
 80156b6:	dd05      	ble.n	80156c4 <_dtoa_r+0x97c>
 80156b8:	4629      	mov	r1, r5
 80156ba:	4632      	mov	r2, r6
 80156bc:	4648      	mov	r0, r9
 80156be:	f000 ff2d 	bl	801651c <__lshift>
 80156c2:	4605      	mov	r5, r0
 80156c4:	9b08      	ldr	r3, [sp, #32]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d05c      	beq.n	8015784 <_dtoa_r+0xa3c>
 80156ca:	6869      	ldr	r1, [r5, #4]
 80156cc:	4648      	mov	r0, r9
 80156ce:	f000 fcd5 	bl	801607c <_Balloc>
 80156d2:	4606      	mov	r6, r0
 80156d4:	b928      	cbnz	r0, 80156e2 <_dtoa_r+0x99a>
 80156d6:	4b82      	ldr	r3, [pc, #520]	@ (80158e0 <_dtoa_r+0xb98>)
 80156d8:	4602      	mov	r2, r0
 80156da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80156de:	f7ff bb4a 	b.w	8014d76 <_dtoa_r+0x2e>
 80156e2:	692a      	ldr	r2, [r5, #16]
 80156e4:	3202      	adds	r2, #2
 80156e6:	0092      	lsls	r2, r2, #2
 80156e8:	f105 010c 	add.w	r1, r5, #12
 80156ec:	300c      	adds	r0, #12
 80156ee:	f7ff fa7d 	bl	8014bec <memcpy>
 80156f2:	2201      	movs	r2, #1
 80156f4:	4631      	mov	r1, r6
 80156f6:	4648      	mov	r0, r9
 80156f8:	f000 ff10 	bl	801651c <__lshift>
 80156fc:	f10a 0301 	add.w	r3, sl, #1
 8015700:	9300      	str	r3, [sp, #0]
 8015702:	eb0a 030b 	add.w	r3, sl, fp
 8015706:	9308      	str	r3, [sp, #32]
 8015708:	9b04      	ldr	r3, [sp, #16]
 801570a:	f003 0301 	and.w	r3, r3, #1
 801570e:	462f      	mov	r7, r5
 8015710:	9306      	str	r3, [sp, #24]
 8015712:	4605      	mov	r5, r0
 8015714:	9b00      	ldr	r3, [sp, #0]
 8015716:	9802      	ldr	r0, [sp, #8]
 8015718:	4621      	mov	r1, r4
 801571a:	f103 3bff 	add.w	fp, r3, #4294967295
 801571e:	f7ff fa88 	bl	8014c32 <quorem>
 8015722:	4603      	mov	r3, r0
 8015724:	3330      	adds	r3, #48	@ 0x30
 8015726:	9003      	str	r0, [sp, #12]
 8015728:	4639      	mov	r1, r7
 801572a:	9802      	ldr	r0, [sp, #8]
 801572c:	9309      	str	r3, [sp, #36]	@ 0x24
 801572e:	f000 ff61 	bl	80165f4 <__mcmp>
 8015732:	462a      	mov	r2, r5
 8015734:	9004      	str	r0, [sp, #16]
 8015736:	4621      	mov	r1, r4
 8015738:	4648      	mov	r0, r9
 801573a:	f000 ff77 	bl	801662c <__mdiff>
 801573e:	68c2      	ldr	r2, [r0, #12]
 8015740:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015742:	4606      	mov	r6, r0
 8015744:	bb02      	cbnz	r2, 8015788 <_dtoa_r+0xa40>
 8015746:	4601      	mov	r1, r0
 8015748:	9802      	ldr	r0, [sp, #8]
 801574a:	f000 ff53 	bl	80165f4 <__mcmp>
 801574e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015750:	4602      	mov	r2, r0
 8015752:	4631      	mov	r1, r6
 8015754:	4648      	mov	r0, r9
 8015756:	920c      	str	r2, [sp, #48]	@ 0x30
 8015758:	9309      	str	r3, [sp, #36]	@ 0x24
 801575a:	f000 fccf 	bl	80160fc <_Bfree>
 801575e:	9b07      	ldr	r3, [sp, #28]
 8015760:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015762:	9e00      	ldr	r6, [sp, #0]
 8015764:	ea42 0103 	orr.w	r1, r2, r3
 8015768:	9b06      	ldr	r3, [sp, #24]
 801576a:	4319      	orrs	r1, r3
 801576c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801576e:	d10d      	bne.n	801578c <_dtoa_r+0xa44>
 8015770:	2b39      	cmp	r3, #57	@ 0x39
 8015772:	d027      	beq.n	80157c4 <_dtoa_r+0xa7c>
 8015774:	9a04      	ldr	r2, [sp, #16]
 8015776:	2a00      	cmp	r2, #0
 8015778:	dd01      	ble.n	801577e <_dtoa_r+0xa36>
 801577a:	9b03      	ldr	r3, [sp, #12]
 801577c:	3331      	adds	r3, #49	@ 0x31
 801577e:	f88b 3000 	strb.w	r3, [fp]
 8015782:	e52e      	b.n	80151e2 <_dtoa_r+0x49a>
 8015784:	4628      	mov	r0, r5
 8015786:	e7b9      	b.n	80156fc <_dtoa_r+0x9b4>
 8015788:	2201      	movs	r2, #1
 801578a:	e7e2      	b.n	8015752 <_dtoa_r+0xa0a>
 801578c:	9904      	ldr	r1, [sp, #16]
 801578e:	2900      	cmp	r1, #0
 8015790:	db04      	blt.n	801579c <_dtoa_r+0xa54>
 8015792:	9807      	ldr	r0, [sp, #28]
 8015794:	4301      	orrs	r1, r0
 8015796:	9806      	ldr	r0, [sp, #24]
 8015798:	4301      	orrs	r1, r0
 801579a:	d120      	bne.n	80157de <_dtoa_r+0xa96>
 801579c:	2a00      	cmp	r2, #0
 801579e:	ddee      	ble.n	801577e <_dtoa_r+0xa36>
 80157a0:	9902      	ldr	r1, [sp, #8]
 80157a2:	9300      	str	r3, [sp, #0]
 80157a4:	2201      	movs	r2, #1
 80157a6:	4648      	mov	r0, r9
 80157a8:	f000 feb8 	bl	801651c <__lshift>
 80157ac:	4621      	mov	r1, r4
 80157ae:	9002      	str	r0, [sp, #8]
 80157b0:	f000 ff20 	bl	80165f4 <__mcmp>
 80157b4:	2800      	cmp	r0, #0
 80157b6:	9b00      	ldr	r3, [sp, #0]
 80157b8:	dc02      	bgt.n	80157c0 <_dtoa_r+0xa78>
 80157ba:	d1e0      	bne.n	801577e <_dtoa_r+0xa36>
 80157bc:	07da      	lsls	r2, r3, #31
 80157be:	d5de      	bpl.n	801577e <_dtoa_r+0xa36>
 80157c0:	2b39      	cmp	r3, #57	@ 0x39
 80157c2:	d1da      	bne.n	801577a <_dtoa_r+0xa32>
 80157c4:	2339      	movs	r3, #57	@ 0x39
 80157c6:	f88b 3000 	strb.w	r3, [fp]
 80157ca:	4633      	mov	r3, r6
 80157cc:	461e      	mov	r6, r3
 80157ce:	3b01      	subs	r3, #1
 80157d0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80157d4:	2a39      	cmp	r2, #57	@ 0x39
 80157d6:	d04e      	beq.n	8015876 <_dtoa_r+0xb2e>
 80157d8:	3201      	adds	r2, #1
 80157da:	701a      	strb	r2, [r3, #0]
 80157dc:	e501      	b.n	80151e2 <_dtoa_r+0x49a>
 80157de:	2a00      	cmp	r2, #0
 80157e0:	dd03      	ble.n	80157ea <_dtoa_r+0xaa2>
 80157e2:	2b39      	cmp	r3, #57	@ 0x39
 80157e4:	d0ee      	beq.n	80157c4 <_dtoa_r+0xa7c>
 80157e6:	3301      	adds	r3, #1
 80157e8:	e7c9      	b.n	801577e <_dtoa_r+0xa36>
 80157ea:	9a00      	ldr	r2, [sp, #0]
 80157ec:	9908      	ldr	r1, [sp, #32]
 80157ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 80157f2:	428a      	cmp	r2, r1
 80157f4:	d028      	beq.n	8015848 <_dtoa_r+0xb00>
 80157f6:	9902      	ldr	r1, [sp, #8]
 80157f8:	2300      	movs	r3, #0
 80157fa:	220a      	movs	r2, #10
 80157fc:	4648      	mov	r0, r9
 80157fe:	f000 fc9f 	bl	8016140 <__multadd>
 8015802:	42af      	cmp	r7, r5
 8015804:	9002      	str	r0, [sp, #8]
 8015806:	f04f 0300 	mov.w	r3, #0
 801580a:	f04f 020a 	mov.w	r2, #10
 801580e:	4639      	mov	r1, r7
 8015810:	4648      	mov	r0, r9
 8015812:	d107      	bne.n	8015824 <_dtoa_r+0xadc>
 8015814:	f000 fc94 	bl	8016140 <__multadd>
 8015818:	4607      	mov	r7, r0
 801581a:	4605      	mov	r5, r0
 801581c:	9b00      	ldr	r3, [sp, #0]
 801581e:	3301      	adds	r3, #1
 8015820:	9300      	str	r3, [sp, #0]
 8015822:	e777      	b.n	8015714 <_dtoa_r+0x9cc>
 8015824:	f000 fc8c 	bl	8016140 <__multadd>
 8015828:	4629      	mov	r1, r5
 801582a:	4607      	mov	r7, r0
 801582c:	2300      	movs	r3, #0
 801582e:	220a      	movs	r2, #10
 8015830:	4648      	mov	r0, r9
 8015832:	f000 fc85 	bl	8016140 <__multadd>
 8015836:	4605      	mov	r5, r0
 8015838:	e7f0      	b.n	801581c <_dtoa_r+0xad4>
 801583a:	f1bb 0f00 	cmp.w	fp, #0
 801583e:	bfcc      	ite	gt
 8015840:	465e      	movgt	r6, fp
 8015842:	2601      	movle	r6, #1
 8015844:	4456      	add	r6, sl
 8015846:	2700      	movs	r7, #0
 8015848:	9902      	ldr	r1, [sp, #8]
 801584a:	9300      	str	r3, [sp, #0]
 801584c:	2201      	movs	r2, #1
 801584e:	4648      	mov	r0, r9
 8015850:	f000 fe64 	bl	801651c <__lshift>
 8015854:	4621      	mov	r1, r4
 8015856:	9002      	str	r0, [sp, #8]
 8015858:	f000 fecc 	bl	80165f4 <__mcmp>
 801585c:	2800      	cmp	r0, #0
 801585e:	dcb4      	bgt.n	80157ca <_dtoa_r+0xa82>
 8015860:	d102      	bne.n	8015868 <_dtoa_r+0xb20>
 8015862:	9b00      	ldr	r3, [sp, #0]
 8015864:	07db      	lsls	r3, r3, #31
 8015866:	d4b0      	bmi.n	80157ca <_dtoa_r+0xa82>
 8015868:	4633      	mov	r3, r6
 801586a:	461e      	mov	r6, r3
 801586c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015870:	2a30      	cmp	r2, #48	@ 0x30
 8015872:	d0fa      	beq.n	801586a <_dtoa_r+0xb22>
 8015874:	e4b5      	b.n	80151e2 <_dtoa_r+0x49a>
 8015876:	459a      	cmp	sl, r3
 8015878:	d1a8      	bne.n	80157cc <_dtoa_r+0xa84>
 801587a:	2331      	movs	r3, #49	@ 0x31
 801587c:	f108 0801 	add.w	r8, r8, #1
 8015880:	f88a 3000 	strb.w	r3, [sl]
 8015884:	e4ad      	b.n	80151e2 <_dtoa_r+0x49a>
 8015886:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015888:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80158e4 <_dtoa_r+0xb9c>
 801588c:	b11b      	cbz	r3, 8015896 <_dtoa_r+0xb4e>
 801588e:	f10a 0308 	add.w	r3, sl, #8
 8015892:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8015894:	6013      	str	r3, [r2, #0]
 8015896:	4650      	mov	r0, sl
 8015898:	b017      	add	sp, #92	@ 0x5c
 801589a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801589e:	9b07      	ldr	r3, [sp, #28]
 80158a0:	2b01      	cmp	r3, #1
 80158a2:	f77f ae2e 	ble.w	8015502 <_dtoa_r+0x7ba>
 80158a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80158a8:	9308      	str	r3, [sp, #32]
 80158aa:	2001      	movs	r0, #1
 80158ac:	e64d      	b.n	801554a <_dtoa_r+0x802>
 80158ae:	f1bb 0f00 	cmp.w	fp, #0
 80158b2:	f77f aed9 	ble.w	8015668 <_dtoa_r+0x920>
 80158b6:	4656      	mov	r6, sl
 80158b8:	9802      	ldr	r0, [sp, #8]
 80158ba:	4621      	mov	r1, r4
 80158bc:	f7ff f9b9 	bl	8014c32 <quorem>
 80158c0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80158c4:	f806 3b01 	strb.w	r3, [r6], #1
 80158c8:	eba6 020a 	sub.w	r2, r6, sl
 80158cc:	4593      	cmp	fp, r2
 80158ce:	ddb4      	ble.n	801583a <_dtoa_r+0xaf2>
 80158d0:	9902      	ldr	r1, [sp, #8]
 80158d2:	2300      	movs	r3, #0
 80158d4:	220a      	movs	r2, #10
 80158d6:	4648      	mov	r0, r9
 80158d8:	f000 fc32 	bl	8016140 <__multadd>
 80158dc:	9002      	str	r0, [sp, #8]
 80158de:	e7eb      	b.n	80158b8 <_dtoa_r+0xb70>
 80158e0:	08019361 	.word	0x08019361
 80158e4:	080192fc 	.word	0x080192fc

080158e8 <_free_r>:
 80158e8:	b538      	push	{r3, r4, r5, lr}
 80158ea:	4605      	mov	r5, r0
 80158ec:	2900      	cmp	r1, #0
 80158ee:	d041      	beq.n	8015974 <_free_r+0x8c>
 80158f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80158f4:	1f0c      	subs	r4, r1, #4
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	bfb8      	it	lt
 80158fa:	18e4      	addlt	r4, r4, r3
 80158fc:	f7f1 fab6 	bl	8006e6c <__malloc_lock>
 8015900:	4a1d      	ldr	r2, [pc, #116]	@ (8015978 <_free_r+0x90>)
 8015902:	6813      	ldr	r3, [r2, #0]
 8015904:	b933      	cbnz	r3, 8015914 <_free_r+0x2c>
 8015906:	6063      	str	r3, [r4, #4]
 8015908:	6014      	str	r4, [r2, #0]
 801590a:	4628      	mov	r0, r5
 801590c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015910:	f7f1 bae6 	b.w	8006ee0 <__malloc_unlock>
 8015914:	42a3      	cmp	r3, r4
 8015916:	d908      	bls.n	801592a <_free_r+0x42>
 8015918:	6820      	ldr	r0, [r4, #0]
 801591a:	1821      	adds	r1, r4, r0
 801591c:	428b      	cmp	r3, r1
 801591e:	bf01      	itttt	eq
 8015920:	6819      	ldreq	r1, [r3, #0]
 8015922:	685b      	ldreq	r3, [r3, #4]
 8015924:	1809      	addeq	r1, r1, r0
 8015926:	6021      	streq	r1, [r4, #0]
 8015928:	e7ed      	b.n	8015906 <_free_r+0x1e>
 801592a:	461a      	mov	r2, r3
 801592c:	685b      	ldr	r3, [r3, #4]
 801592e:	b10b      	cbz	r3, 8015934 <_free_r+0x4c>
 8015930:	42a3      	cmp	r3, r4
 8015932:	d9fa      	bls.n	801592a <_free_r+0x42>
 8015934:	6811      	ldr	r1, [r2, #0]
 8015936:	1850      	adds	r0, r2, r1
 8015938:	42a0      	cmp	r0, r4
 801593a:	d10b      	bne.n	8015954 <_free_r+0x6c>
 801593c:	6820      	ldr	r0, [r4, #0]
 801593e:	4401      	add	r1, r0
 8015940:	1850      	adds	r0, r2, r1
 8015942:	4283      	cmp	r3, r0
 8015944:	6011      	str	r1, [r2, #0]
 8015946:	d1e0      	bne.n	801590a <_free_r+0x22>
 8015948:	6818      	ldr	r0, [r3, #0]
 801594a:	685b      	ldr	r3, [r3, #4]
 801594c:	6053      	str	r3, [r2, #4]
 801594e:	4408      	add	r0, r1
 8015950:	6010      	str	r0, [r2, #0]
 8015952:	e7da      	b.n	801590a <_free_r+0x22>
 8015954:	d902      	bls.n	801595c <_free_r+0x74>
 8015956:	230c      	movs	r3, #12
 8015958:	602b      	str	r3, [r5, #0]
 801595a:	e7d6      	b.n	801590a <_free_r+0x22>
 801595c:	6820      	ldr	r0, [r4, #0]
 801595e:	1821      	adds	r1, r4, r0
 8015960:	428b      	cmp	r3, r1
 8015962:	bf04      	itt	eq
 8015964:	6819      	ldreq	r1, [r3, #0]
 8015966:	685b      	ldreq	r3, [r3, #4]
 8015968:	6063      	str	r3, [r4, #4]
 801596a:	bf04      	itt	eq
 801596c:	1809      	addeq	r1, r1, r0
 801596e:	6021      	streq	r1, [r4, #0]
 8015970:	6054      	str	r4, [r2, #4]
 8015972:	e7ca      	b.n	801590a <_free_r+0x22>
 8015974:	bd38      	pop	{r3, r4, r5, pc}
 8015976:	bf00      	nop
 8015978:	20000674 	.word	0x20000674

0801597c <rshift>:
 801597c:	6903      	ldr	r3, [r0, #16]
 801597e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015982:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015986:	ea4f 1261 	mov.w	r2, r1, asr #5
 801598a:	f100 0414 	add.w	r4, r0, #20
 801598e:	dd45      	ble.n	8015a1c <rshift+0xa0>
 8015990:	f011 011f 	ands.w	r1, r1, #31
 8015994:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015998:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801599c:	d10c      	bne.n	80159b8 <rshift+0x3c>
 801599e:	f100 0710 	add.w	r7, r0, #16
 80159a2:	4629      	mov	r1, r5
 80159a4:	42b1      	cmp	r1, r6
 80159a6:	d334      	bcc.n	8015a12 <rshift+0x96>
 80159a8:	1a9b      	subs	r3, r3, r2
 80159aa:	009b      	lsls	r3, r3, #2
 80159ac:	1eea      	subs	r2, r5, #3
 80159ae:	4296      	cmp	r6, r2
 80159b0:	bf38      	it	cc
 80159b2:	2300      	movcc	r3, #0
 80159b4:	4423      	add	r3, r4
 80159b6:	e015      	b.n	80159e4 <rshift+0x68>
 80159b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80159bc:	f1c1 0820 	rsb	r8, r1, #32
 80159c0:	40cf      	lsrs	r7, r1
 80159c2:	f105 0e04 	add.w	lr, r5, #4
 80159c6:	46a1      	mov	r9, r4
 80159c8:	4576      	cmp	r6, lr
 80159ca:	46f4      	mov	ip, lr
 80159cc:	d815      	bhi.n	80159fa <rshift+0x7e>
 80159ce:	1a9a      	subs	r2, r3, r2
 80159d0:	0092      	lsls	r2, r2, #2
 80159d2:	3a04      	subs	r2, #4
 80159d4:	3501      	adds	r5, #1
 80159d6:	42ae      	cmp	r6, r5
 80159d8:	bf38      	it	cc
 80159da:	2200      	movcc	r2, #0
 80159dc:	18a3      	adds	r3, r4, r2
 80159de:	50a7      	str	r7, [r4, r2]
 80159e0:	b107      	cbz	r7, 80159e4 <rshift+0x68>
 80159e2:	3304      	adds	r3, #4
 80159e4:	1b1a      	subs	r2, r3, r4
 80159e6:	42a3      	cmp	r3, r4
 80159e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80159ec:	bf08      	it	eq
 80159ee:	2300      	moveq	r3, #0
 80159f0:	6102      	str	r2, [r0, #16]
 80159f2:	bf08      	it	eq
 80159f4:	6143      	streq	r3, [r0, #20]
 80159f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80159fa:	f8dc c000 	ldr.w	ip, [ip]
 80159fe:	fa0c fc08 	lsl.w	ip, ip, r8
 8015a02:	ea4c 0707 	orr.w	r7, ip, r7
 8015a06:	f849 7b04 	str.w	r7, [r9], #4
 8015a0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015a0e:	40cf      	lsrs	r7, r1
 8015a10:	e7da      	b.n	80159c8 <rshift+0x4c>
 8015a12:	f851 cb04 	ldr.w	ip, [r1], #4
 8015a16:	f847 cf04 	str.w	ip, [r7, #4]!
 8015a1a:	e7c3      	b.n	80159a4 <rshift+0x28>
 8015a1c:	4623      	mov	r3, r4
 8015a1e:	e7e1      	b.n	80159e4 <rshift+0x68>

08015a20 <__hexdig_fun>:
 8015a20:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8015a24:	2b09      	cmp	r3, #9
 8015a26:	d802      	bhi.n	8015a2e <__hexdig_fun+0xe>
 8015a28:	3820      	subs	r0, #32
 8015a2a:	b2c0      	uxtb	r0, r0
 8015a2c:	4770      	bx	lr
 8015a2e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8015a32:	2b05      	cmp	r3, #5
 8015a34:	d801      	bhi.n	8015a3a <__hexdig_fun+0x1a>
 8015a36:	3847      	subs	r0, #71	@ 0x47
 8015a38:	e7f7      	b.n	8015a2a <__hexdig_fun+0xa>
 8015a3a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8015a3e:	2b05      	cmp	r3, #5
 8015a40:	d801      	bhi.n	8015a46 <__hexdig_fun+0x26>
 8015a42:	3827      	subs	r0, #39	@ 0x27
 8015a44:	e7f1      	b.n	8015a2a <__hexdig_fun+0xa>
 8015a46:	2000      	movs	r0, #0
 8015a48:	4770      	bx	lr
	...

08015a4c <__gethex>:
 8015a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a50:	b085      	sub	sp, #20
 8015a52:	468a      	mov	sl, r1
 8015a54:	9302      	str	r3, [sp, #8]
 8015a56:	680b      	ldr	r3, [r1, #0]
 8015a58:	9001      	str	r0, [sp, #4]
 8015a5a:	4690      	mov	r8, r2
 8015a5c:	1c9c      	adds	r4, r3, #2
 8015a5e:	46a1      	mov	r9, r4
 8015a60:	f814 0b01 	ldrb.w	r0, [r4], #1
 8015a64:	2830      	cmp	r0, #48	@ 0x30
 8015a66:	d0fa      	beq.n	8015a5e <__gethex+0x12>
 8015a68:	eba9 0303 	sub.w	r3, r9, r3
 8015a6c:	f1a3 0b02 	sub.w	fp, r3, #2
 8015a70:	f7ff ffd6 	bl	8015a20 <__hexdig_fun>
 8015a74:	4605      	mov	r5, r0
 8015a76:	2800      	cmp	r0, #0
 8015a78:	d168      	bne.n	8015b4c <__gethex+0x100>
 8015a7a:	49a0      	ldr	r1, [pc, #640]	@ (8015cfc <__gethex+0x2b0>)
 8015a7c:	2201      	movs	r2, #1
 8015a7e:	4648      	mov	r0, r9
 8015a80:	f7fe ff63 	bl	801494a <strncmp>
 8015a84:	4607      	mov	r7, r0
 8015a86:	2800      	cmp	r0, #0
 8015a88:	d167      	bne.n	8015b5a <__gethex+0x10e>
 8015a8a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8015a8e:	4626      	mov	r6, r4
 8015a90:	f7ff ffc6 	bl	8015a20 <__hexdig_fun>
 8015a94:	2800      	cmp	r0, #0
 8015a96:	d062      	beq.n	8015b5e <__gethex+0x112>
 8015a98:	4623      	mov	r3, r4
 8015a9a:	7818      	ldrb	r0, [r3, #0]
 8015a9c:	2830      	cmp	r0, #48	@ 0x30
 8015a9e:	4699      	mov	r9, r3
 8015aa0:	f103 0301 	add.w	r3, r3, #1
 8015aa4:	d0f9      	beq.n	8015a9a <__gethex+0x4e>
 8015aa6:	f7ff ffbb 	bl	8015a20 <__hexdig_fun>
 8015aaa:	fab0 f580 	clz	r5, r0
 8015aae:	096d      	lsrs	r5, r5, #5
 8015ab0:	f04f 0b01 	mov.w	fp, #1
 8015ab4:	464a      	mov	r2, r9
 8015ab6:	4616      	mov	r6, r2
 8015ab8:	3201      	adds	r2, #1
 8015aba:	7830      	ldrb	r0, [r6, #0]
 8015abc:	f7ff ffb0 	bl	8015a20 <__hexdig_fun>
 8015ac0:	2800      	cmp	r0, #0
 8015ac2:	d1f8      	bne.n	8015ab6 <__gethex+0x6a>
 8015ac4:	498d      	ldr	r1, [pc, #564]	@ (8015cfc <__gethex+0x2b0>)
 8015ac6:	2201      	movs	r2, #1
 8015ac8:	4630      	mov	r0, r6
 8015aca:	f7fe ff3e 	bl	801494a <strncmp>
 8015ace:	2800      	cmp	r0, #0
 8015ad0:	d13f      	bne.n	8015b52 <__gethex+0x106>
 8015ad2:	b944      	cbnz	r4, 8015ae6 <__gethex+0x9a>
 8015ad4:	1c74      	adds	r4, r6, #1
 8015ad6:	4622      	mov	r2, r4
 8015ad8:	4616      	mov	r6, r2
 8015ada:	3201      	adds	r2, #1
 8015adc:	7830      	ldrb	r0, [r6, #0]
 8015ade:	f7ff ff9f 	bl	8015a20 <__hexdig_fun>
 8015ae2:	2800      	cmp	r0, #0
 8015ae4:	d1f8      	bne.n	8015ad8 <__gethex+0x8c>
 8015ae6:	1ba4      	subs	r4, r4, r6
 8015ae8:	00a7      	lsls	r7, r4, #2
 8015aea:	7833      	ldrb	r3, [r6, #0]
 8015aec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8015af0:	2b50      	cmp	r3, #80	@ 0x50
 8015af2:	d13e      	bne.n	8015b72 <__gethex+0x126>
 8015af4:	7873      	ldrb	r3, [r6, #1]
 8015af6:	2b2b      	cmp	r3, #43	@ 0x2b
 8015af8:	d033      	beq.n	8015b62 <__gethex+0x116>
 8015afa:	2b2d      	cmp	r3, #45	@ 0x2d
 8015afc:	d034      	beq.n	8015b68 <__gethex+0x11c>
 8015afe:	1c71      	adds	r1, r6, #1
 8015b00:	2400      	movs	r4, #0
 8015b02:	7808      	ldrb	r0, [r1, #0]
 8015b04:	f7ff ff8c 	bl	8015a20 <__hexdig_fun>
 8015b08:	1e43      	subs	r3, r0, #1
 8015b0a:	b2db      	uxtb	r3, r3
 8015b0c:	2b18      	cmp	r3, #24
 8015b0e:	d830      	bhi.n	8015b72 <__gethex+0x126>
 8015b10:	f1a0 0210 	sub.w	r2, r0, #16
 8015b14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015b18:	f7ff ff82 	bl	8015a20 <__hexdig_fun>
 8015b1c:	f100 3cff 	add.w	ip, r0, #4294967295
 8015b20:	fa5f fc8c 	uxtb.w	ip, ip
 8015b24:	f1bc 0f18 	cmp.w	ip, #24
 8015b28:	f04f 030a 	mov.w	r3, #10
 8015b2c:	d91e      	bls.n	8015b6c <__gethex+0x120>
 8015b2e:	b104      	cbz	r4, 8015b32 <__gethex+0xe6>
 8015b30:	4252      	negs	r2, r2
 8015b32:	4417      	add	r7, r2
 8015b34:	f8ca 1000 	str.w	r1, [sl]
 8015b38:	b1ed      	cbz	r5, 8015b76 <__gethex+0x12a>
 8015b3a:	f1bb 0f00 	cmp.w	fp, #0
 8015b3e:	bf0c      	ite	eq
 8015b40:	2506      	moveq	r5, #6
 8015b42:	2500      	movne	r5, #0
 8015b44:	4628      	mov	r0, r5
 8015b46:	b005      	add	sp, #20
 8015b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b4c:	2500      	movs	r5, #0
 8015b4e:	462c      	mov	r4, r5
 8015b50:	e7b0      	b.n	8015ab4 <__gethex+0x68>
 8015b52:	2c00      	cmp	r4, #0
 8015b54:	d1c7      	bne.n	8015ae6 <__gethex+0x9a>
 8015b56:	4627      	mov	r7, r4
 8015b58:	e7c7      	b.n	8015aea <__gethex+0x9e>
 8015b5a:	464e      	mov	r6, r9
 8015b5c:	462f      	mov	r7, r5
 8015b5e:	2501      	movs	r5, #1
 8015b60:	e7c3      	b.n	8015aea <__gethex+0x9e>
 8015b62:	2400      	movs	r4, #0
 8015b64:	1cb1      	adds	r1, r6, #2
 8015b66:	e7cc      	b.n	8015b02 <__gethex+0xb6>
 8015b68:	2401      	movs	r4, #1
 8015b6a:	e7fb      	b.n	8015b64 <__gethex+0x118>
 8015b6c:	fb03 0002 	mla	r0, r3, r2, r0
 8015b70:	e7ce      	b.n	8015b10 <__gethex+0xc4>
 8015b72:	4631      	mov	r1, r6
 8015b74:	e7de      	b.n	8015b34 <__gethex+0xe8>
 8015b76:	eba6 0309 	sub.w	r3, r6, r9
 8015b7a:	3b01      	subs	r3, #1
 8015b7c:	4629      	mov	r1, r5
 8015b7e:	2b07      	cmp	r3, #7
 8015b80:	dc0a      	bgt.n	8015b98 <__gethex+0x14c>
 8015b82:	9801      	ldr	r0, [sp, #4]
 8015b84:	f000 fa7a 	bl	801607c <_Balloc>
 8015b88:	4604      	mov	r4, r0
 8015b8a:	b940      	cbnz	r0, 8015b9e <__gethex+0x152>
 8015b8c:	4b5c      	ldr	r3, [pc, #368]	@ (8015d00 <__gethex+0x2b4>)
 8015b8e:	4602      	mov	r2, r0
 8015b90:	21e4      	movs	r1, #228	@ 0xe4
 8015b92:	485c      	ldr	r0, [pc, #368]	@ (8015d04 <__gethex+0x2b8>)
 8015b94:	f7fc fb3c 	bl	8012210 <__assert_func>
 8015b98:	3101      	adds	r1, #1
 8015b9a:	105b      	asrs	r3, r3, #1
 8015b9c:	e7ef      	b.n	8015b7e <__gethex+0x132>
 8015b9e:	f100 0a14 	add.w	sl, r0, #20
 8015ba2:	2300      	movs	r3, #0
 8015ba4:	4655      	mov	r5, sl
 8015ba6:	469b      	mov	fp, r3
 8015ba8:	45b1      	cmp	r9, r6
 8015baa:	d337      	bcc.n	8015c1c <__gethex+0x1d0>
 8015bac:	f845 bb04 	str.w	fp, [r5], #4
 8015bb0:	eba5 050a 	sub.w	r5, r5, sl
 8015bb4:	10ad      	asrs	r5, r5, #2
 8015bb6:	6125      	str	r5, [r4, #16]
 8015bb8:	4658      	mov	r0, fp
 8015bba:	f000 fb51 	bl	8016260 <__hi0bits>
 8015bbe:	016d      	lsls	r5, r5, #5
 8015bc0:	f8d8 6000 	ldr.w	r6, [r8]
 8015bc4:	1a2d      	subs	r5, r5, r0
 8015bc6:	42b5      	cmp	r5, r6
 8015bc8:	dd54      	ble.n	8015c74 <__gethex+0x228>
 8015bca:	1bad      	subs	r5, r5, r6
 8015bcc:	4629      	mov	r1, r5
 8015bce:	4620      	mov	r0, r4
 8015bd0:	f000 fedd 	bl	801698e <__any_on>
 8015bd4:	4681      	mov	r9, r0
 8015bd6:	b178      	cbz	r0, 8015bf8 <__gethex+0x1ac>
 8015bd8:	1e6b      	subs	r3, r5, #1
 8015bda:	1159      	asrs	r1, r3, #5
 8015bdc:	f003 021f 	and.w	r2, r3, #31
 8015be0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8015be4:	f04f 0901 	mov.w	r9, #1
 8015be8:	fa09 f202 	lsl.w	r2, r9, r2
 8015bec:	420a      	tst	r2, r1
 8015bee:	d003      	beq.n	8015bf8 <__gethex+0x1ac>
 8015bf0:	454b      	cmp	r3, r9
 8015bf2:	dc36      	bgt.n	8015c62 <__gethex+0x216>
 8015bf4:	f04f 0902 	mov.w	r9, #2
 8015bf8:	4629      	mov	r1, r5
 8015bfa:	4620      	mov	r0, r4
 8015bfc:	f7ff febe 	bl	801597c <rshift>
 8015c00:	442f      	add	r7, r5
 8015c02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015c06:	42bb      	cmp	r3, r7
 8015c08:	da42      	bge.n	8015c90 <__gethex+0x244>
 8015c0a:	9801      	ldr	r0, [sp, #4]
 8015c0c:	4621      	mov	r1, r4
 8015c0e:	f000 fa75 	bl	80160fc <_Bfree>
 8015c12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015c14:	2300      	movs	r3, #0
 8015c16:	6013      	str	r3, [r2, #0]
 8015c18:	25a3      	movs	r5, #163	@ 0xa3
 8015c1a:	e793      	b.n	8015b44 <__gethex+0xf8>
 8015c1c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8015c20:	2a2e      	cmp	r2, #46	@ 0x2e
 8015c22:	d012      	beq.n	8015c4a <__gethex+0x1fe>
 8015c24:	2b20      	cmp	r3, #32
 8015c26:	d104      	bne.n	8015c32 <__gethex+0x1e6>
 8015c28:	f845 bb04 	str.w	fp, [r5], #4
 8015c2c:	f04f 0b00 	mov.w	fp, #0
 8015c30:	465b      	mov	r3, fp
 8015c32:	7830      	ldrb	r0, [r6, #0]
 8015c34:	9303      	str	r3, [sp, #12]
 8015c36:	f7ff fef3 	bl	8015a20 <__hexdig_fun>
 8015c3a:	9b03      	ldr	r3, [sp, #12]
 8015c3c:	f000 000f 	and.w	r0, r0, #15
 8015c40:	4098      	lsls	r0, r3
 8015c42:	ea4b 0b00 	orr.w	fp, fp, r0
 8015c46:	3304      	adds	r3, #4
 8015c48:	e7ae      	b.n	8015ba8 <__gethex+0x15c>
 8015c4a:	45b1      	cmp	r9, r6
 8015c4c:	d8ea      	bhi.n	8015c24 <__gethex+0x1d8>
 8015c4e:	492b      	ldr	r1, [pc, #172]	@ (8015cfc <__gethex+0x2b0>)
 8015c50:	9303      	str	r3, [sp, #12]
 8015c52:	2201      	movs	r2, #1
 8015c54:	4630      	mov	r0, r6
 8015c56:	f7fe fe78 	bl	801494a <strncmp>
 8015c5a:	9b03      	ldr	r3, [sp, #12]
 8015c5c:	2800      	cmp	r0, #0
 8015c5e:	d1e1      	bne.n	8015c24 <__gethex+0x1d8>
 8015c60:	e7a2      	b.n	8015ba8 <__gethex+0x15c>
 8015c62:	1ea9      	subs	r1, r5, #2
 8015c64:	4620      	mov	r0, r4
 8015c66:	f000 fe92 	bl	801698e <__any_on>
 8015c6a:	2800      	cmp	r0, #0
 8015c6c:	d0c2      	beq.n	8015bf4 <__gethex+0x1a8>
 8015c6e:	f04f 0903 	mov.w	r9, #3
 8015c72:	e7c1      	b.n	8015bf8 <__gethex+0x1ac>
 8015c74:	da09      	bge.n	8015c8a <__gethex+0x23e>
 8015c76:	1b75      	subs	r5, r6, r5
 8015c78:	4621      	mov	r1, r4
 8015c7a:	9801      	ldr	r0, [sp, #4]
 8015c7c:	462a      	mov	r2, r5
 8015c7e:	f000 fc4d 	bl	801651c <__lshift>
 8015c82:	1b7f      	subs	r7, r7, r5
 8015c84:	4604      	mov	r4, r0
 8015c86:	f100 0a14 	add.w	sl, r0, #20
 8015c8a:	f04f 0900 	mov.w	r9, #0
 8015c8e:	e7b8      	b.n	8015c02 <__gethex+0x1b6>
 8015c90:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015c94:	42bd      	cmp	r5, r7
 8015c96:	dd6f      	ble.n	8015d78 <__gethex+0x32c>
 8015c98:	1bed      	subs	r5, r5, r7
 8015c9a:	42ae      	cmp	r6, r5
 8015c9c:	dc34      	bgt.n	8015d08 <__gethex+0x2bc>
 8015c9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015ca2:	2b02      	cmp	r3, #2
 8015ca4:	d022      	beq.n	8015cec <__gethex+0x2a0>
 8015ca6:	2b03      	cmp	r3, #3
 8015ca8:	d024      	beq.n	8015cf4 <__gethex+0x2a8>
 8015caa:	2b01      	cmp	r3, #1
 8015cac:	d115      	bne.n	8015cda <__gethex+0x28e>
 8015cae:	42ae      	cmp	r6, r5
 8015cb0:	d113      	bne.n	8015cda <__gethex+0x28e>
 8015cb2:	2e01      	cmp	r6, #1
 8015cb4:	d10b      	bne.n	8015cce <__gethex+0x282>
 8015cb6:	9a02      	ldr	r2, [sp, #8]
 8015cb8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015cbc:	6013      	str	r3, [r2, #0]
 8015cbe:	2301      	movs	r3, #1
 8015cc0:	6123      	str	r3, [r4, #16]
 8015cc2:	f8ca 3000 	str.w	r3, [sl]
 8015cc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015cc8:	2562      	movs	r5, #98	@ 0x62
 8015cca:	601c      	str	r4, [r3, #0]
 8015ccc:	e73a      	b.n	8015b44 <__gethex+0xf8>
 8015cce:	1e71      	subs	r1, r6, #1
 8015cd0:	4620      	mov	r0, r4
 8015cd2:	f000 fe5c 	bl	801698e <__any_on>
 8015cd6:	2800      	cmp	r0, #0
 8015cd8:	d1ed      	bne.n	8015cb6 <__gethex+0x26a>
 8015cda:	9801      	ldr	r0, [sp, #4]
 8015cdc:	4621      	mov	r1, r4
 8015cde:	f000 fa0d 	bl	80160fc <_Bfree>
 8015ce2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	6013      	str	r3, [r2, #0]
 8015ce8:	2550      	movs	r5, #80	@ 0x50
 8015cea:	e72b      	b.n	8015b44 <__gethex+0xf8>
 8015cec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d1f3      	bne.n	8015cda <__gethex+0x28e>
 8015cf2:	e7e0      	b.n	8015cb6 <__gethex+0x26a>
 8015cf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d1dd      	bne.n	8015cb6 <__gethex+0x26a>
 8015cfa:	e7ee      	b.n	8015cda <__gethex+0x28e>
 8015cfc:	08019248 	.word	0x08019248
 8015d00:	08019361 	.word	0x08019361
 8015d04:	08019372 	.word	0x08019372
 8015d08:	1e6f      	subs	r7, r5, #1
 8015d0a:	f1b9 0f00 	cmp.w	r9, #0
 8015d0e:	d130      	bne.n	8015d72 <__gethex+0x326>
 8015d10:	b127      	cbz	r7, 8015d1c <__gethex+0x2d0>
 8015d12:	4639      	mov	r1, r7
 8015d14:	4620      	mov	r0, r4
 8015d16:	f000 fe3a 	bl	801698e <__any_on>
 8015d1a:	4681      	mov	r9, r0
 8015d1c:	117a      	asrs	r2, r7, #5
 8015d1e:	2301      	movs	r3, #1
 8015d20:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8015d24:	f007 071f 	and.w	r7, r7, #31
 8015d28:	40bb      	lsls	r3, r7
 8015d2a:	4213      	tst	r3, r2
 8015d2c:	4629      	mov	r1, r5
 8015d2e:	4620      	mov	r0, r4
 8015d30:	bf18      	it	ne
 8015d32:	f049 0902 	orrne.w	r9, r9, #2
 8015d36:	f7ff fe21 	bl	801597c <rshift>
 8015d3a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8015d3e:	1b76      	subs	r6, r6, r5
 8015d40:	2502      	movs	r5, #2
 8015d42:	f1b9 0f00 	cmp.w	r9, #0
 8015d46:	d047      	beq.n	8015dd8 <__gethex+0x38c>
 8015d48:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015d4c:	2b02      	cmp	r3, #2
 8015d4e:	d015      	beq.n	8015d7c <__gethex+0x330>
 8015d50:	2b03      	cmp	r3, #3
 8015d52:	d017      	beq.n	8015d84 <__gethex+0x338>
 8015d54:	2b01      	cmp	r3, #1
 8015d56:	d109      	bne.n	8015d6c <__gethex+0x320>
 8015d58:	f019 0f02 	tst.w	r9, #2
 8015d5c:	d006      	beq.n	8015d6c <__gethex+0x320>
 8015d5e:	f8da 3000 	ldr.w	r3, [sl]
 8015d62:	ea49 0903 	orr.w	r9, r9, r3
 8015d66:	f019 0f01 	tst.w	r9, #1
 8015d6a:	d10e      	bne.n	8015d8a <__gethex+0x33e>
 8015d6c:	f045 0510 	orr.w	r5, r5, #16
 8015d70:	e032      	b.n	8015dd8 <__gethex+0x38c>
 8015d72:	f04f 0901 	mov.w	r9, #1
 8015d76:	e7d1      	b.n	8015d1c <__gethex+0x2d0>
 8015d78:	2501      	movs	r5, #1
 8015d7a:	e7e2      	b.n	8015d42 <__gethex+0x2f6>
 8015d7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015d7e:	f1c3 0301 	rsb	r3, r3, #1
 8015d82:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015d84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d0f0      	beq.n	8015d6c <__gethex+0x320>
 8015d8a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015d8e:	f104 0314 	add.w	r3, r4, #20
 8015d92:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015d96:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015d9a:	f04f 0c00 	mov.w	ip, #0
 8015d9e:	4618      	mov	r0, r3
 8015da0:	f853 2b04 	ldr.w	r2, [r3], #4
 8015da4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015da8:	d01b      	beq.n	8015de2 <__gethex+0x396>
 8015daa:	3201      	adds	r2, #1
 8015dac:	6002      	str	r2, [r0, #0]
 8015dae:	2d02      	cmp	r5, #2
 8015db0:	f104 0314 	add.w	r3, r4, #20
 8015db4:	d13c      	bne.n	8015e30 <__gethex+0x3e4>
 8015db6:	f8d8 2000 	ldr.w	r2, [r8]
 8015dba:	3a01      	subs	r2, #1
 8015dbc:	42b2      	cmp	r2, r6
 8015dbe:	d109      	bne.n	8015dd4 <__gethex+0x388>
 8015dc0:	1171      	asrs	r1, r6, #5
 8015dc2:	2201      	movs	r2, #1
 8015dc4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015dc8:	f006 061f 	and.w	r6, r6, #31
 8015dcc:	fa02 f606 	lsl.w	r6, r2, r6
 8015dd0:	421e      	tst	r6, r3
 8015dd2:	d13a      	bne.n	8015e4a <__gethex+0x3fe>
 8015dd4:	f045 0520 	orr.w	r5, r5, #32
 8015dd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015dda:	601c      	str	r4, [r3, #0]
 8015ddc:	9b02      	ldr	r3, [sp, #8]
 8015dde:	601f      	str	r7, [r3, #0]
 8015de0:	e6b0      	b.n	8015b44 <__gethex+0xf8>
 8015de2:	4299      	cmp	r1, r3
 8015de4:	f843 cc04 	str.w	ip, [r3, #-4]
 8015de8:	d8d9      	bhi.n	8015d9e <__gethex+0x352>
 8015dea:	68a3      	ldr	r3, [r4, #8]
 8015dec:	459b      	cmp	fp, r3
 8015dee:	db17      	blt.n	8015e20 <__gethex+0x3d4>
 8015df0:	6861      	ldr	r1, [r4, #4]
 8015df2:	9801      	ldr	r0, [sp, #4]
 8015df4:	3101      	adds	r1, #1
 8015df6:	f000 f941 	bl	801607c <_Balloc>
 8015dfa:	4681      	mov	r9, r0
 8015dfc:	b918      	cbnz	r0, 8015e06 <__gethex+0x3ba>
 8015dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8015e68 <__gethex+0x41c>)
 8015e00:	4602      	mov	r2, r0
 8015e02:	2184      	movs	r1, #132	@ 0x84
 8015e04:	e6c5      	b.n	8015b92 <__gethex+0x146>
 8015e06:	6922      	ldr	r2, [r4, #16]
 8015e08:	3202      	adds	r2, #2
 8015e0a:	f104 010c 	add.w	r1, r4, #12
 8015e0e:	0092      	lsls	r2, r2, #2
 8015e10:	300c      	adds	r0, #12
 8015e12:	f7fe feeb 	bl	8014bec <memcpy>
 8015e16:	4621      	mov	r1, r4
 8015e18:	9801      	ldr	r0, [sp, #4]
 8015e1a:	f000 f96f 	bl	80160fc <_Bfree>
 8015e1e:	464c      	mov	r4, r9
 8015e20:	6923      	ldr	r3, [r4, #16]
 8015e22:	1c5a      	adds	r2, r3, #1
 8015e24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015e28:	6122      	str	r2, [r4, #16]
 8015e2a:	2201      	movs	r2, #1
 8015e2c:	615a      	str	r2, [r3, #20]
 8015e2e:	e7be      	b.n	8015dae <__gethex+0x362>
 8015e30:	6922      	ldr	r2, [r4, #16]
 8015e32:	455a      	cmp	r2, fp
 8015e34:	dd0b      	ble.n	8015e4e <__gethex+0x402>
 8015e36:	2101      	movs	r1, #1
 8015e38:	4620      	mov	r0, r4
 8015e3a:	f7ff fd9f 	bl	801597c <rshift>
 8015e3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015e42:	3701      	adds	r7, #1
 8015e44:	42bb      	cmp	r3, r7
 8015e46:	f6ff aee0 	blt.w	8015c0a <__gethex+0x1be>
 8015e4a:	2501      	movs	r5, #1
 8015e4c:	e7c2      	b.n	8015dd4 <__gethex+0x388>
 8015e4e:	f016 061f 	ands.w	r6, r6, #31
 8015e52:	d0fa      	beq.n	8015e4a <__gethex+0x3fe>
 8015e54:	4453      	add	r3, sl
 8015e56:	f1c6 0620 	rsb	r6, r6, #32
 8015e5a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015e5e:	f000 f9ff 	bl	8016260 <__hi0bits>
 8015e62:	42b0      	cmp	r0, r6
 8015e64:	dbe7      	blt.n	8015e36 <__gethex+0x3ea>
 8015e66:	e7f0      	b.n	8015e4a <__gethex+0x3fe>
 8015e68:	08019361 	.word	0x08019361

08015e6c <L_shift>:
 8015e6c:	f1c2 0208 	rsb	r2, r2, #8
 8015e70:	0092      	lsls	r2, r2, #2
 8015e72:	b570      	push	{r4, r5, r6, lr}
 8015e74:	f1c2 0620 	rsb	r6, r2, #32
 8015e78:	6843      	ldr	r3, [r0, #4]
 8015e7a:	6804      	ldr	r4, [r0, #0]
 8015e7c:	fa03 f506 	lsl.w	r5, r3, r6
 8015e80:	432c      	orrs	r4, r5
 8015e82:	40d3      	lsrs	r3, r2
 8015e84:	6004      	str	r4, [r0, #0]
 8015e86:	f840 3f04 	str.w	r3, [r0, #4]!
 8015e8a:	4288      	cmp	r0, r1
 8015e8c:	d3f4      	bcc.n	8015e78 <L_shift+0xc>
 8015e8e:	bd70      	pop	{r4, r5, r6, pc}

08015e90 <__match>:
 8015e90:	b530      	push	{r4, r5, lr}
 8015e92:	6803      	ldr	r3, [r0, #0]
 8015e94:	3301      	adds	r3, #1
 8015e96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015e9a:	b914      	cbnz	r4, 8015ea2 <__match+0x12>
 8015e9c:	6003      	str	r3, [r0, #0]
 8015e9e:	2001      	movs	r0, #1
 8015ea0:	bd30      	pop	{r4, r5, pc}
 8015ea2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015ea6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8015eaa:	2d19      	cmp	r5, #25
 8015eac:	bf98      	it	ls
 8015eae:	3220      	addls	r2, #32
 8015eb0:	42a2      	cmp	r2, r4
 8015eb2:	d0f0      	beq.n	8015e96 <__match+0x6>
 8015eb4:	2000      	movs	r0, #0
 8015eb6:	e7f3      	b.n	8015ea0 <__match+0x10>

08015eb8 <__hexnan>:
 8015eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ebc:	680b      	ldr	r3, [r1, #0]
 8015ebe:	6801      	ldr	r1, [r0, #0]
 8015ec0:	115e      	asrs	r6, r3, #5
 8015ec2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015ec6:	f013 031f 	ands.w	r3, r3, #31
 8015eca:	b087      	sub	sp, #28
 8015ecc:	bf18      	it	ne
 8015ece:	3604      	addne	r6, #4
 8015ed0:	2500      	movs	r5, #0
 8015ed2:	1f37      	subs	r7, r6, #4
 8015ed4:	4682      	mov	sl, r0
 8015ed6:	4690      	mov	r8, r2
 8015ed8:	9301      	str	r3, [sp, #4]
 8015eda:	f846 5c04 	str.w	r5, [r6, #-4]
 8015ede:	46b9      	mov	r9, r7
 8015ee0:	463c      	mov	r4, r7
 8015ee2:	9502      	str	r5, [sp, #8]
 8015ee4:	46ab      	mov	fp, r5
 8015ee6:	784a      	ldrb	r2, [r1, #1]
 8015ee8:	1c4b      	adds	r3, r1, #1
 8015eea:	9303      	str	r3, [sp, #12]
 8015eec:	b342      	cbz	r2, 8015f40 <__hexnan+0x88>
 8015eee:	4610      	mov	r0, r2
 8015ef0:	9105      	str	r1, [sp, #20]
 8015ef2:	9204      	str	r2, [sp, #16]
 8015ef4:	f7ff fd94 	bl	8015a20 <__hexdig_fun>
 8015ef8:	2800      	cmp	r0, #0
 8015efa:	d151      	bne.n	8015fa0 <__hexnan+0xe8>
 8015efc:	9a04      	ldr	r2, [sp, #16]
 8015efe:	9905      	ldr	r1, [sp, #20]
 8015f00:	2a20      	cmp	r2, #32
 8015f02:	d818      	bhi.n	8015f36 <__hexnan+0x7e>
 8015f04:	9b02      	ldr	r3, [sp, #8]
 8015f06:	459b      	cmp	fp, r3
 8015f08:	dd13      	ble.n	8015f32 <__hexnan+0x7a>
 8015f0a:	454c      	cmp	r4, r9
 8015f0c:	d206      	bcs.n	8015f1c <__hexnan+0x64>
 8015f0e:	2d07      	cmp	r5, #7
 8015f10:	dc04      	bgt.n	8015f1c <__hexnan+0x64>
 8015f12:	462a      	mov	r2, r5
 8015f14:	4649      	mov	r1, r9
 8015f16:	4620      	mov	r0, r4
 8015f18:	f7ff ffa8 	bl	8015e6c <L_shift>
 8015f1c:	4544      	cmp	r4, r8
 8015f1e:	d952      	bls.n	8015fc6 <__hexnan+0x10e>
 8015f20:	2300      	movs	r3, #0
 8015f22:	f1a4 0904 	sub.w	r9, r4, #4
 8015f26:	f844 3c04 	str.w	r3, [r4, #-4]
 8015f2a:	f8cd b008 	str.w	fp, [sp, #8]
 8015f2e:	464c      	mov	r4, r9
 8015f30:	461d      	mov	r5, r3
 8015f32:	9903      	ldr	r1, [sp, #12]
 8015f34:	e7d7      	b.n	8015ee6 <__hexnan+0x2e>
 8015f36:	2a29      	cmp	r2, #41	@ 0x29
 8015f38:	d157      	bne.n	8015fea <__hexnan+0x132>
 8015f3a:	3102      	adds	r1, #2
 8015f3c:	f8ca 1000 	str.w	r1, [sl]
 8015f40:	f1bb 0f00 	cmp.w	fp, #0
 8015f44:	d051      	beq.n	8015fea <__hexnan+0x132>
 8015f46:	454c      	cmp	r4, r9
 8015f48:	d206      	bcs.n	8015f58 <__hexnan+0xa0>
 8015f4a:	2d07      	cmp	r5, #7
 8015f4c:	dc04      	bgt.n	8015f58 <__hexnan+0xa0>
 8015f4e:	462a      	mov	r2, r5
 8015f50:	4649      	mov	r1, r9
 8015f52:	4620      	mov	r0, r4
 8015f54:	f7ff ff8a 	bl	8015e6c <L_shift>
 8015f58:	4544      	cmp	r4, r8
 8015f5a:	d936      	bls.n	8015fca <__hexnan+0x112>
 8015f5c:	f1a8 0204 	sub.w	r2, r8, #4
 8015f60:	4623      	mov	r3, r4
 8015f62:	f853 1b04 	ldr.w	r1, [r3], #4
 8015f66:	f842 1f04 	str.w	r1, [r2, #4]!
 8015f6a:	429f      	cmp	r7, r3
 8015f6c:	d2f9      	bcs.n	8015f62 <__hexnan+0xaa>
 8015f6e:	1b3b      	subs	r3, r7, r4
 8015f70:	f023 0303 	bic.w	r3, r3, #3
 8015f74:	3304      	adds	r3, #4
 8015f76:	3401      	adds	r4, #1
 8015f78:	3e03      	subs	r6, #3
 8015f7a:	42b4      	cmp	r4, r6
 8015f7c:	bf88      	it	hi
 8015f7e:	2304      	movhi	r3, #4
 8015f80:	4443      	add	r3, r8
 8015f82:	2200      	movs	r2, #0
 8015f84:	f843 2b04 	str.w	r2, [r3], #4
 8015f88:	429f      	cmp	r7, r3
 8015f8a:	d2fb      	bcs.n	8015f84 <__hexnan+0xcc>
 8015f8c:	683b      	ldr	r3, [r7, #0]
 8015f8e:	b91b      	cbnz	r3, 8015f98 <__hexnan+0xe0>
 8015f90:	4547      	cmp	r7, r8
 8015f92:	d128      	bne.n	8015fe6 <__hexnan+0x12e>
 8015f94:	2301      	movs	r3, #1
 8015f96:	603b      	str	r3, [r7, #0]
 8015f98:	2005      	movs	r0, #5
 8015f9a:	b007      	add	sp, #28
 8015f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fa0:	3501      	adds	r5, #1
 8015fa2:	2d08      	cmp	r5, #8
 8015fa4:	f10b 0b01 	add.w	fp, fp, #1
 8015fa8:	dd06      	ble.n	8015fb8 <__hexnan+0x100>
 8015faa:	4544      	cmp	r4, r8
 8015fac:	d9c1      	bls.n	8015f32 <__hexnan+0x7a>
 8015fae:	2300      	movs	r3, #0
 8015fb0:	f844 3c04 	str.w	r3, [r4, #-4]
 8015fb4:	2501      	movs	r5, #1
 8015fb6:	3c04      	subs	r4, #4
 8015fb8:	6822      	ldr	r2, [r4, #0]
 8015fba:	f000 000f 	and.w	r0, r0, #15
 8015fbe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015fc2:	6020      	str	r0, [r4, #0]
 8015fc4:	e7b5      	b.n	8015f32 <__hexnan+0x7a>
 8015fc6:	2508      	movs	r5, #8
 8015fc8:	e7b3      	b.n	8015f32 <__hexnan+0x7a>
 8015fca:	9b01      	ldr	r3, [sp, #4]
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d0dd      	beq.n	8015f8c <__hexnan+0xd4>
 8015fd0:	f1c3 0320 	rsb	r3, r3, #32
 8015fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8015fd8:	40da      	lsrs	r2, r3
 8015fda:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8015fde:	4013      	ands	r3, r2
 8015fe0:	f846 3c04 	str.w	r3, [r6, #-4]
 8015fe4:	e7d2      	b.n	8015f8c <__hexnan+0xd4>
 8015fe6:	3f04      	subs	r7, #4
 8015fe8:	e7d0      	b.n	8015f8c <__hexnan+0xd4>
 8015fea:	2004      	movs	r0, #4
 8015fec:	e7d5      	b.n	8015f9a <__hexnan+0xe2>
	...

08015ff0 <_mallinfo_r>:
 8015ff0:	b570      	push	{r4, r5, r6, lr}
 8015ff2:	4c16      	ldr	r4, [pc, #88]	@ (801604c <_mallinfo_r+0x5c>)
 8015ff4:	4605      	mov	r5, r0
 8015ff6:	4608      	mov	r0, r1
 8015ff8:	460e      	mov	r6, r1
 8015ffa:	f7f0 ff37 	bl	8006e6c <__malloc_lock>
 8015ffe:	6823      	ldr	r3, [r4, #0]
 8016000:	b14b      	cbz	r3, 8016016 <_mallinfo_r+0x26>
 8016002:	2100      	movs	r1, #0
 8016004:	4630      	mov	r0, r6
 8016006:	f7f0 fead 	bl	8006d64 <_sbrk_r>
 801600a:	1c42      	adds	r2, r0, #1
 801600c:	bf18      	it	ne
 801600e:	6822      	ldrne	r2, [r4, #0]
 8016010:	4603      	mov	r3, r0
 8016012:	bf18      	it	ne
 8016014:	1a83      	subne	r3, r0, r2
 8016016:	4a0e      	ldr	r2, [pc, #56]	@ (8016050 <_mallinfo_r+0x60>)
 8016018:	6811      	ldr	r1, [r2, #0]
 801601a:	2200      	movs	r2, #0
 801601c:	b991      	cbnz	r1, 8016044 <_mallinfo_r+0x54>
 801601e:	4c0d      	ldr	r4, [pc, #52]	@ (8016054 <_mallinfo_r+0x64>)
 8016020:	4630      	mov	r0, r6
 8016022:	6023      	str	r3, [r4, #0]
 8016024:	1a9b      	subs	r3, r3, r2
 8016026:	6222      	str	r2, [r4, #32]
 8016028:	61e3      	str	r3, [r4, #28]
 801602a:	f7f0 ff59 	bl	8006ee0 <__malloc_unlock>
 801602e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016030:	462e      	mov	r6, r5
 8016032:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8016034:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016036:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8016038:	e894 0003 	ldmia.w	r4, {r0, r1}
 801603c:	e886 0003 	stmia.w	r6, {r0, r1}
 8016040:	4628      	mov	r0, r5
 8016042:	bd70      	pop	{r4, r5, r6, pc}
 8016044:	6808      	ldr	r0, [r1, #0]
 8016046:	6849      	ldr	r1, [r1, #4]
 8016048:	4402      	add	r2, r0
 801604a:	e7e7      	b.n	801601c <_mallinfo_r+0x2c>
 801604c:	20000670 	.word	0x20000670
 8016050:	20000674 	.word	0x20000674
 8016054:	200007c0 	.word	0x200007c0

08016058 <__ascii_mbtowc>:
 8016058:	b082      	sub	sp, #8
 801605a:	b901      	cbnz	r1, 801605e <__ascii_mbtowc+0x6>
 801605c:	a901      	add	r1, sp, #4
 801605e:	b142      	cbz	r2, 8016072 <__ascii_mbtowc+0x1a>
 8016060:	b14b      	cbz	r3, 8016076 <__ascii_mbtowc+0x1e>
 8016062:	7813      	ldrb	r3, [r2, #0]
 8016064:	600b      	str	r3, [r1, #0]
 8016066:	7812      	ldrb	r2, [r2, #0]
 8016068:	1e10      	subs	r0, r2, #0
 801606a:	bf18      	it	ne
 801606c:	2001      	movne	r0, #1
 801606e:	b002      	add	sp, #8
 8016070:	4770      	bx	lr
 8016072:	4610      	mov	r0, r2
 8016074:	e7fb      	b.n	801606e <__ascii_mbtowc+0x16>
 8016076:	f06f 0001 	mvn.w	r0, #1
 801607a:	e7f8      	b.n	801606e <__ascii_mbtowc+0x16>

0801607c <_Balloc>:
 801607c:	b570      	push	{r4, r5, r6, lr}
 801607e:	69c6      	ldr	r6, [r0, #28]
 8016080:	4604      	mov	r4, r0
 8016082:	460d      	mov	r5, r1
 8016084:	b976      	cbnz	r6, 80160a4 <_Balloc+0x28>
 8016086:	2010      	movs	r0, #16
 8016088:	f7fc f94c 	bl	8012324 <malloc>
 801608c:	4602      	mov	r2, r0
 801608e:	61e0      	str	r0, [r4, #28]
 8016090:	b920      	cbnz	r0, 801609c <_Balloc+0x20>
 8016092:	4b18      	ldr	r3, [pc, #96]	@ (80160f4 <_Balloc+0x78>)
 8016094:	4818      	ldr	r0, [pc, #96]	@ (80160f8 <_Balloc+0x7c>)
 8016096:	216b      	movs	r1, #107	@ 0x6b
 8016098:	f7fc f8ba 	bl	8012210 <__assert_func>
 801609c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80160a0:	6006      	str	r6, [r0, #0]
 80160a2:	60c6      	str	r6, [r0, #12]
 80160a4:	69e6      	ldr	r6, [r4, #28]
 80160a6:	68f3      	ldr	r3, [r6, #12]
 80160a8:	b183      	cbz	r3, 80160cc <_Balloc+0x50>
 80160aa:	69e3      	ldr	r3, [r4, #28]
 80160ac:	68db      	ldr	r3, [r3, #12]
 80160ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80160b2:	b9b8      	cbnz	r0, 80160e4 <_Balloc+0x68>
 80160b4:	2101      	movs	r1, #1
 80160b6:	fa01 f605 	lsl.w	r6, r1, r5
 80160ba:	1d72      	adds	r2, r6, #5
 80160bc:	0092      	lsls	r2, r2, #2
 80160be:	4620      	mov	r0, r4
 80160c0:	f7fc f8d4 	bl	801226c <_calloc_r>
 80160c4:	b160      	cbz	r0, 80160e0 <_Balloc+0x64>
 80160c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80160ca:	e00e      	b.n	80160ea <_Balloc+0x6e>
 80160cc:	2221      	movs	r2, #33	@ 0x21
 80160ce:	2104      	movs	r1, #4
 80160d0:	4620      	mov	r0, r4
 80160d2:	f7fc f8cb 	bl	801226c <_calloc_r>
 80160d6:	69e3      	ldr	r3, [r4, #28]
 80160d8:	60f0      	str	r0, [r6, #12]
 80160da:	68db      	ldr	r3, [r3, #12]
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d1e4      	bne.n	80160aa <_Balloc+0x2e>
 80160e0:	2000      	movs	r0, #0
 80160e2:	bd70      	pop	{r4, r5, r6, pc}
 80160e4:	6802      	ldr	r2, [r0, #0]
 80160e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80160ea:	2300      	movs	r3, #0
 80160ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80160f0:	e7f7      	b.n	80160e2 <_Balloc+0x66>
 80160f2:	bf00      	nop
 80160f4:	08019283 	.word	0x08019283
 80160f8:	080193d2 	.word	0x080193d2

080160fc <_Bfree>:
 80160fc:	b570      	push	{r4, r5, r6, lr}
 80160fe:	69c6      	ldr	r6, [r0, #28]
 8016100:	4605      	mov	r5, r0
 8016102:	460c      	mov	r4, r1
 8016104:	b976      	cbnz	r6, 8016124 <_Bfree+0x28>
 8016106:	2010      	movs	r0, #16
 8016108:	f7fc f90c 	bl	8012324 <malloc>
 801610c:	4602      	mov	r2, r0
 801610e:	61e8      	str	r0, [r5, #28]
 8016110:	b920      	cbnz	r0, 801611c <_Bfree+0x20>
 8016112:	4b09      	ldr	r3, [pc, #36]	@ (8016138 <_Bfree+0x3c>)
 8016114:	4809      	ldr	r0, [pc, #36]	@ (801613c <_Bfree+0x40>)
 8016116:	218f      	movs	r1, #143	@ 0x8f
 8016118:	f7fc f87a 	bl	8012210 <__assert_func>
 801611c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016120:	6006      	str	r6, [r0, #0]
 8016122:	60c6      	str	r6, [r0, #12]
 8016124:	b13c      	cbz	r4, 8016136 <_Bfree+0x3a>
 8016126:	69eb      	ldr	r3, [r5, #28]
 8016128:	6862      	ldr	r2, [r4, #4]
 801612a:	68db      	ldr	r3, [r3, #12]
 801612c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016130:	6021      	str	r1, [r4, #0]
 8016132:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016136:	bd70      	pop	{r4, r5, r6, pc}
 8016138:	08019283 	.word	0x08019283
 801613c:	080193d2 	.word	0x080193d2

08016140 <__multadd>:
 8016140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016144:	690d      	ldr	r5, [r1, #16]
 8016146:	4607      	mov	r7, r0
 8016148:	460c      	mov	r4, r1
 801614a:	461e      	mov	r6, r3
 801614c:	f101 0c14 	add.w	ip, r1, #20
 8016150:	2000      	movs	r0, #0
 8016152:	f8dc 3000 	ldr.w	r3, [ip]
 8016156:	b299      	uxth	r1, r3
 8016158:	fb02 6101 	mla	r1, r2, r1, r6
 801615c:	0c1e      	lsrs	r6, r3, #16
 801615e:	0c0b      	lsrs	r3, r1, #16
 8016160:	fb02 3306 	mla	r3, r2, r6, r3
 8016164:	b289      	uxth	r1, r1
 8016166:	3001      	adds	r0, #1
 8016168:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801616c:	4285      	cmp	r5, r0
 801616e:	f84c 1b04 	str.w	r1, [ip], #4
 8016172:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016176:	dcec      	bgt.n	8016152 <__multadd+0x12>
 8016178:	b30e      	cbz	r6, 80161be <__multadd+0x7e>
 801617a:	68a3      	ldr	r3, [r4, #8]
 801617c:	42ab      	cmp	r3, r5
 801617e:	dc19      	bgt.n	80161b4 <__multadd+0x74>
 8016180:	6861      	ldr	r1, [r4, #4]
 8016182:	4638      	mov	r0, r7
 8016184:	3101      	adds	r1, #1
 8016186:	f7ff ff79 	bl	801607c <_Balloc>
 801618a:	4680      	mov	r8, r0
 801618c:	b928      	cbnz	r0, 801619a <__multadd+0x5a>
 801618e:	4602      	mov	r2, r0
 8016190:	4b0c      	ldr	r3, [pc, #48]	@ (80161c4 <__multadd+0x84>)
 8016192:	480d      	ldr	r0, [pc, #52]	@ (80161c8 <__multadd+0x88>)
 8016194:	21ba      	movs	r1, #186	@ 0xba
 8016196:	f7fc f83b 	bl	8012210 <__assert_func>
 801619a:	6922      	ldr	r2, [r4, #16]
 801619c:	3202      	adds	r2, #2
 801619e:	f104 010c 	add.w	r1, r4, #12
 80161a2:	0092      	lsls	r2, r2, #2
 80161a4:	300c      	adds	r0, #12
 80161a6:	f7fe fd21 	bl	8014bec <memcpy>
 80161aa:	4621      	mov	r1, r4
 80161ac:	4638      	mov	r0, r7
 80161ae:	f7ff ffa5 	bl	80160fc <_Bfree>
 80161b2:	4644      	mov	r4, r8
 80161b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80161b8:	3501      	adds	r5, #1
 80161ba:	615e      	str	r6, [r3, #20]
 80161bc:	6125      	str	r5, [r4, #16]
 80161be:	4620      	mov	r0, r4
 80161c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161c4:	08019361 	.word	0x08019361
 80161c8:	080193d2 	.word	0x080193d2

080161cc <__s2b>:
 80161cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80161d0:	460c      	mov	r4, r1
 80161d2:	4615      	mov	r5, r2
 80161d4:	461f      	mov	r7, r3
 80161d6:	2209      	movs	r2, #9
 80161d8:	3308      	adds	r3, #8
 80161da:	4606      	mov	r6, r0
 80161dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80161e0:	2100      	movs	r1, #0
 80161e2:	2201      	movs	r2, #1
 80161e4:	429a      	cmp	r2, r3
 80161e6:	db09      	blt.n	80161fc <__s2b+0x30>
 80161e8:	4630      	mov	r0, r6
 80161ea:	f7ff ff47 	bl	801607c <_Balloc>
 80161ee:	b940      	cbnz	r0, 8016202 <__s2b+0x36>
 80161f0:	4602      	mov	r2, r0
 80161f2:	4b19      	ldr	r3, [pc, #100]	@ (8016258 <__s2b+0x8c>)
 80161f4:	4819      	ldr	r0, [pc, #100]	@ (801625c <__s2b+0x90>)
 80161f6:	21d3      	movs	r1, #211	@ 0xd3
 80161f8:	f7fc f80a 	bl	8012210 <__assert_func>
 80161fc:	0052      	lsls	r2, r2, #1
 80161fe:	3101      	adds	r1, #1
 8016200:	e7f0      	b.n	80161e4 <__s2b+0x18>
 8016202:	9b08      	ldr	r3, [sp, #32]
 8016204:	6143      	str	r3, [r0, #20]
 8016206:	2d09      	cmp	r5, #9
 8016208:	f04f 0301 	mov.w	r3, #1
 801620c:	6103      	str	r3, [r0, #16]
 801620e:	dd16      	ble.n	801623e <__s2b+0x72>
 8016210:	f104 0909 	add.w	r9, r4, #9
 8016214:	46c8      	mov	r8, r9
 8016216:	442c      	add	r4, r5
 8016218:	f818 3b01 	ldrb.w	r3, [r8], #1
 801621c:	4601      	mov	r1, r0
 801621e:	3b30      	subs	r3, #48	@ 0x30
 8016220:	220a      	movs	r2, #10
 8016222:	4630      	mov	r0, r6
 8016224:	f7ff ff8c 	bl	8016140 <__multadd>
 8016228:	45a0      	cmp	r8, r4
 801622a:	d1f5      	bne.n	8016218 <__s2b+0x4c>
 801622c:	f1a5 0408 	sub.w	r4, r5, #8
 8016230:	444c      	add	r4, r9
 8016232:	1b2d      	subs	r5, r5, r4
 8016234:	1963      	adds	r3, r4, r5
 8016236:	42bb      	cmp	r3, r7
 8016238:	db04      	blt.n	8016244 <__s2b+0x78>
 801623a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801623e:	340a      	adds	r4, #10
 8016240:	2509      	movs	r5, #9
 8016242:	e7f6      	b.n	8016232 <__s2b+0x66>
 8016244:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016248:	4601      	mov	r1, r0
 801624a:	3b30      	subs	r3, #48	@ 0x30
 801624c:	220a      	movs	r2, #10
 801624e:	4630      	mov	r0, r6
 8016250:	f7ff ff76 	bl	8016140 <__multadd>
 8016254:	e7ee      	b.n	8016234 <__s2b+0x68>
 8016256:	bf00      	nop
 8016258:	08019361 	.word	0x08019361
 801625c:	080193d2 	.word	0x080193d2

08016260 <__hi0bits>:
 8016260:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8016264:	4603      	mov	r3, r0
 8016266:	bf36      	itet	cc
 8016268:	0403      	lslcc	r3, r0, #16
 801626a:	2000      	movcs	r0, #0
 801626c:	2010      	movcc	r0, #16
 801626e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016272:	bf3c      	itt	cc
 8016274:	021b      	lslcc	r3, r3, #8
 8016276:	3008      	addcc	r0, #8
 8016278:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801627c:	bf3c      	itt	cc
 801627e:	011b      	lslcc	r3, r3, #4
 8016280:	3004      	addcc	r0, #4
 8016282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016286:	bf3c      	itt	cc
 8016288:	009b      	lslcc	r3, r3, #2
 801628a:	3002      	addcc	r0, #2
 801628c:	2b00      	cmp	r3, #0
 801628e:	db05      	blt.n	801629c <__hi0bits+0x3c>
 8016290:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8016294:	f100 0001 	add.w	r0, r0, #1
 8016298:	bf08      	it	eq
 801629a:	2020      	moveq	r0, #32
 801629c:	4770      	bx	lr

0801629e <__lo0bits>:
 801629e:	6803      	ldr	r3, [r0, #0]
 80162a0:	4602      	mov	r2, r0
 80162a2:	f013 0007 	ands.w	r0, r3, #7
 80162a6:	d00b      	beq.n	80162c0 <__lo0bits+0x22>
 80162a8:	07d9      	lsls	r1, r3, #31
 80162aa:	d421      	bmi.n	80162f0 <__lo0bits+0x52>
 80162ac:	0798      	lsls	r0, r3, #30
 80162ae:	bf49      	itett	mi
 80162b0:	085b      	lsrmi	r3, r3, #1
 80162b2:	089b      	lsrpl	r3, r3, #2
 80162b4:	2001      	movmi	r0, #1
 80162b6:	6013      	strmi	r3, [r2, #0]
 80162b8:	bf5c      	itt	pl
 80162ba:	6013      	strpl	r3, [r2, #0]
 80162bc:	2002      	movpl	r0, #2
 80162be:	4770      	bx	lr
 80162c0:	b299      	uxth	r1, r3
 80162c2:	b909      	cbnz	r1, 80162c8 <__lo0bits+0x2a>
 80162c4:	0c1b      	lsrs	r3, r3, #16
 80162c6:	2010      	movs	r0, #16
 80162c8:	b2d9      	uxtb	r1, r3
 80162ca:	b909      	cbnz	r1, 80162d0 <__lo0bits+0x32>
 80162cc:	3008      	adds	r0, #8
 80162ce:	0a1b      	lsrs	r3, r3, #8
 80162d0:	0719      	lsls	r1, r3, #28
 80162d2:	bf04      	itt	eq
 80162d4:	091b      	lsreq	r3, r3, #4
 80162d6:	3004      	addeq	r0, #4
 80162d8:	0799      	lsls	r1, r3, #30
 80162da:	bf04      	itt	eq
 80162dc:	089b      	lsreq	r3, r3, #2
 80162de:	3002      	addeq	r0, #2
 80162e0:	07d9      	lsls	r1, r3, #31
 80162e2:	d403      	bmi.n	80162ec <__lo0bits+0x4e>
 80162e4:	085b      	lsrs	r3, r3, #1
 80162e6:	f100 0001 	add.w	r0, r0, #1
 80162ea:	d003      	beq.n	80162f4 <__lo0bits+0x56>
 80162ec:	6013      	str	r3, [r2, #0]
 80162ee:	4770      	bx	lr
 80162f0:	2000      	movs	r0, #0
 80162f2:	4770      	bx	lr
 80162f4:	2020      	movs	r0, #32
 80162f6:	4770      	bx	lr

080162f8 <__i2b>:
 80162f8:	b510      	push	{r4, lr}
 80162fa:	460c      	mov	r4, r1
 80162fc:	2101      	movs	r1, #1
 80162fe:	f7ff febd 	bl	801607c <_Balloc>
 8016302:	4602      	mov	r2, r0
 8016304:	b928      	cbnz	r0, 8016312 <__i2b+0x1a>
 8016306:	4b05      	ldr	r3, [pc, #20]	@ (801631c <__i2b+0x24>)
 8016308:	4805      	ldr	r0, [pc, #20]	@ (8016320 <__i2b+0x28>)
 801630a:	f240 1145 	movw	r1, #325	@ 0x145
 801630e:	f7fb ff7f 	bl	8012210 <__assert_func>
 8016312:	2301      	movs	r3, #1
 8016314:	6144      	str	r4, [r0, #20]
 8016316:	6103      	str	r3, [r0, #16]
 8016318:	bd10      	pop	{r4, pc}
 801631a:	bf00      	nop
 801631c:	08019361 	.word	0x08019361
 8016320:	080193d2 	.word	0x080193d2

08016324 <__multiply>:
 8016324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016328:	4617      	mov	r7, r2
 801632a:	690a      	ldr	r2, [r1, #16]
 801632c:	693b      	ldr	r3, [r7, #16]
 801632e:	429a      	cmp	r2, r3
 8016330:	bfa8      	it	ge
 8016332:	463b      	movge	r3, r7
 8016334:	4689      	mov	r9, r1
 8016336:	bfa4      	itt	ge
 8016338:	460f      	movge	r7, r1
 801633a:	4699      	movge	r9, r3
 801633c:	693d      	ldr	r5, [r7, #16]
 801633e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016342:	68bb      	ldr	r3, [r7, #8]
 8016344:	6879      	ldr	r1, [r7, #4]
 8016346:	eb05 060a 	add.w	r6, r5, sl
 801634a:	42b3      	cmp	r3, r6
 801634c:	b085      	sub	sp, #20
 801634e:	bfb8      	it	lt
 8016350:	3101      	addlt	r1, #1
 8016352:	f7ff fe93 	bl	801607c <_Balloc>
 8016356:	b930      	cbnz	r0, 8016366 <__multiply+0x42>
 8016358:	4602      	mov	r2, r0
 801635a:	4b41      	ldr	r3, [pc, #260]	@ (8016460 <__multiply+0x13c>)
 801635c:	4841      	ldr	r0, [pc, #260]	@ (8016464 <__multiply+0x140>)
 801635e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8016362:	f7fb ff55 	bl	8012210 <__assert_func>
 8016366:	f100 0414 	add.w	r4, r0, #20
 801636a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801636e:	4623      	mov	r3, r4
 8016370:	2200      	movs	r2, #0
 8016372:	4573      	cmp	r3, lr
 8016374:	d320      	bcc.n	80163b8 <__multiply+0x94>
 8016376:	f107 0814 	add.w	r8, r7, #20
 801637a:	f109 0114 	add.w	r1, r9, #20
 801637e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8016382:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8016386:	9302      	str	r3, [sp, #8]
 8016388:	1beb      	subs	r3, r5, r7
 801638a:	3b15      	subs	r3, #21
 801638c:	f023 0303 	bic.w	r3, r3, #3
 8016390:	3304      	adds	r3, #4
 8016392:	3715      	adds	r7, #21
 8016394:	42bd      	cmp	r5, r7
 8016396:	bf38      	it	cc
 8016398:	2304      	movcc	r3, #4
 801639a:	9301      	str	r3, [sp, #4]
 801639c:	9b02      	ldr	r3, [sp, #8]
 801639e:	9103      	str	r1, [sp, #12]
 80163a0:	428b      	cmp	r3, r1
 80163a2:	d80c      	bhi.n	80163be <__multiply+0x9a>
 80163a4:	2e00      	cmp	r6, #0
 80163a6:	dd03      	ble.n	80163b0 <__multiply+0x8c>
 80163a8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d055      	beq.n	801645c <__multiply+0x138>
 80163b0:	6106      	str	r6, [r0, #16]
 80163b2:	b005      	add	sp, #20
 80163b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163b8:	f843 2b04 	str.w	r2, [r3], #4
 80163bc:	e7d9      	b.n	8016372 <__multiply+0x4e>
 80163be:	f8b1 a000 	ldrh.w	sl, [r1]
 80163c2:	f1ba 0f00 	cmp.w	sl, #0
 80163c6:	d01f      	beq.n	8016408 <__multiply+0xe4>
 80163c8:	46c4      	mov	ip, r8
 80163ca:	46a1      	mov	r9, r4
 80163cc:	2700      	movs	r7, #0
 80163ce:	f85c 2b04 	ldr.w	r2, [ip], #4
 80163d2:	f8d9 3000 	ldr.w	r3, [r9]
 80163d6:	fa1f fb82 	uxth.w	fp, r2
 80163da:	b29b      	uxth	r3, r3
 80163dc:	fb0a 330b 	mla	r3, sl, fp, r3
 80163e0:	443b      	add	r3, r7
 80163e2:	f8d9 7000 	ldr.w	r7, [r9]
 80163e6:	0c12      	lsrs	r2, r2, #16
 80163e8:	0c3f      	lsrs	r7, r7, #16
 80163ea:	fb0a 7202 	mla	r2, sl, r2, r7
 80163ee:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80163f2:	b29b      	uxth	r3, r3
 80163f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80163f8:	4565      	cmp	r5, ip
 80163fa:	f849 3b04 	str.w	r3, [r9], #4
 80163fe:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8016402:	d8e4      	bhi.n	80163ce <__multiply+0xaa>
 8016404:	9b01      	ldr	r3, [sp, #4]
 8016406:	50e7      	str	r7, [r4, r3]
 8016408:	9b03      	ldr	r3, [sp, #12]
 801640a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801640e:	3104      	adds	r1, #4
 8016410:	f1b9 0f00 	cmp.w	r9, #0
 8016414:	d020      	beq.n	8016458 <__multiply+0x134>
 8016416:	6823      	ldr	r3, [r4, #0]
 8016418:	4647      	mov	r7, r8
 801641a:	46a4      	mov	ip, r4
 801641c:	f04f 0a00 	mov.w	sl, #0
 8016420:	f8b7 b000 	ldrh.w	fp, [r7]
 8016424:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8016428:	fb09 220b 	mla	r2, r9, fp, r2
 801642c:	4452      	add	r2, sl
 801642e:	b29b      	uxth	r3, r3
 8016430:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016434:	f84c 3b04 	str.w	r3, [ip], #4
 8016438:	f857 3b04 	ldr.w	r3, [r7], #4
 801643c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016440:	f8bc 3000 	ldrh.w	r3, [ip]
 8016444:	fb09 330a 	mla	r3, r9, sl, r3
 8016448:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801644c:	42bd      	cmp	r5, r7
 801644e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016452:	d8e5      	bhi.n	8016420 <__multiply+0xfc>
 8016454:	9a01      	ldr	r2, [sp, #4]
 8016456:	50a3      	str	r3, [r4, r2]
 8016458:	3404      	adds	r4, #4
 801645a:	e79f      	b.n	801639c <__multiply+0x78>
 801645c:	3e01      	subs	r6, #1
 801645e:	e7a1      	b.n	80163a4 <__multiply+0x80>
 8016460:	08019361 	.word	0x08019361
 8016464:	080193d2 	.word	0x080193d2

08016468 <__pow5mult>:
 8016468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801646c:	4615      	mov	r5, r2
 801646e:	f012 0203 	ands.w	r2, r2, #3
 8016472:	4607      	mov	r7, r0
 8016474:	460e      	mov	r6, r1
 8016476:	d007      	beq.n	8016488 <__pow5mult+0x20>
 8016478:	4c25      	ldr	r4, [pc, #148]	@ (8016510 <__pow5mult+0xa8>)
 801647a:	3a01      	subs	r2, #1
 801647c:	2300      	movs	r3, #0
 801647e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016482:	f7ff fe5d 	bl	8016140 <__multadd>
 8016486:	4606      	mov	r6, r0
 8016488:	10ad      	asrs	r5, r5, #2
 801648a:	d03d      	beq.n	8016508 <__pow5mult+0xa0>
 801648c:	69fc      	ldr	r4, [r7, #28]
 801648e:	b97c      	cbnz	r4, 80164b0 <__pow5mult+0x48>
 8016490:	2010      	movs	r0, #16
 8016492:	f7fb ff47 	bl	8012324 <malloc>
 8016496:	4602      	mov	r2, r0
 8016498:	61f8      	str	r0, [r7, #28]
 801649a:	b928      	cbnz	r0, 80164a8 <__pow5mult+0x40>
 801649c:	4b1d      	ldr	r3, [pc, #116]	@ (8016514 <__pow5mult+0xac>)
 801649e:	481e      	ldr	r0, [pc, #120]	@ (8016518 <__pow5mult+0xb0>)
 80164a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80164a4:	f7fb feb4 	bl	8012210 <__assert_func>
 80164a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80164ac:	6004      	str	r4, [r0, #0]
 80164ae:	60c4      	str	r4, [r0, #12]
 80164b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80164b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80164b8:	b94c      	cbnz	r4, 80164ce <__pow5mult+0x66>
 80164ba:	f240 2171 	movw	r1, #625	@ 0x271
 80164be:	4638      	mov	r0, r7
 80164c0:	f7ff ff1a 	bl	80162f8 <__i2b>
 80164c4:	2300      	movs	r3, #0
 80164c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80164ca:	4604      	mov	r4, r0
 80164cc:	6003      	str	r3, [r0, #0]
 80164ce:	f04f 0900 	mov.w	r9, #0
 80164d2:	07eb      	lsls	r3, r5, #31
 80164d4:	d50a      	bpl.n	80164ec <__pow5mult+0x84>
 80164d6:	4631      	mov	r1, r6
 80164d8:	4622      	mov	r2, r4
 80164da:	4638      	mov	r0, r7
 80164dc:	f7ff ff22 	bl	8016324 <__multiply>
 80164e0:	4631      	mov	r1, r6
 80164e2:	4680      	mov	r8, r0
 80164e4:	4638      	mov	r0, r7
 80164e6:	f7ff fe09 	bl	80160fc <_Bfree>
 80164ea:	4646      	mov	r6, r8
 80164ec:	106d      	asrs	r5, r5, #1
 80164ee:	d00b      	beq.n	8016508 <__pow5mult+0xa0>
 80164f0:	6820      	ldr	r0, [r4, #0]
 80164f2:	b938      	cbnz	r0, 8016504 <__pow5mult+0x9c>
 80164f4:	4622      	mov	r2, r4
 80164f6:	4621      	mov	r1, r4
 80164f8:	4638      	mov	r0, r7
 80164fa:	f7ff ff13 	bl	8016324 <__multiply>
 80164fe:	6020      	str	r0, [r4, #0]
 8016500:	f8c0 9000 	str.w	r9, [r0]
 8016504:	4604      	mov	r4, r0
 8016506:	e7e4      	b.n	80164d2 <__pow5mult+0x6a>
 8016508:	4630      	mov	r0, r6
 801650a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801650e:	bf00      	nop
 8016510:	08019594 	.word	0x08019594
 8016514:	08019283 	.word	0x08019283
 8016518:	080193d2 	.word	0x080193d2

0801651c <__lshift>:
 801651c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016520:	460c      	mov	r4, r1
 8016522:	6849      	ldr	r1, [r1, #4]
 8016524:	6923      	ldr	r3, [r4, #16]
 8016526:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801652a:	68a3      	ldr	r3, [r4, #8]
 801652c:	4607      	mov	r7, r0
 801652e:	4691      	mov	r9, r2
 8016530:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016534:	f108 0601 	add.w	r6, r8, #1
 8016538:	42b3      	cmp	r3, r6
 801653a:	db0b      	blt.n	8016554 <__lshift+0x38>
 801653c:	4638      	mov	r0, r7
 801653e:	f7ff fd9d 	bl	801607c <_Balloc>
 8016542:	4605      	mov	r5, r0
 8016544:	b948      	cbnz	r0, 801655a <__lshift+0x3e>
 8016546:	4602      	mov	r2, r0
 8016548:	4b28      	ldr	r3, [pc, #160]	@ (80165ec <__lshift+0xd0>)
 801654a:	4829      	ldr	r0, [pc, #164]	@ (80165f0 <__lshift+0xd4>)
 801654c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8016550:	f7fb fe5e 	bl	8012210 <__assert_func>
 8016554:	3101      	adds	r1, #1
 8016556:	005b      	lsls	r3, r3, #1
 8016558:	e7ee      	b.n	8016538 <__lshift+0x1c>
 801655a:	2300      	movs	r3, #0
 801655c:	f100 0114 	add.w	r1, r0, #20
 8016560:	f100 0210 	add.w	r2, r0, #16
 8016564:	4618      	mov	r0, r3
 8016566:	4553      	cmp	r3, sl
 8016568:	db33      	blt.n	80165d2 <__lshift+0xb6>
 801656a:	6920      	ldr	r0, [r4, #16]
 801656c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016570:	f104 0314 	add.w	r3, r4, #20
 8016574:	f019 091f 	ands.w	r9, r9, #31
 8016578:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801657c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016580:	d02b      	beq.n	80165da <__lshift+0xbe>
 8016582:	f1c9 0e20 	rsb	lr, r9, #32
 8016586:	468a      	mov	sl, r1
 8016588:	2200      	movs	r2, #0
 801658a:	6818      	ldr	r0, [r3, #0]
 801658c:	fa00 f009 	lsl.w	r0, r0, r9
 8016590:	4310      	orrs	r0, r2
 8016592:	f84a 0b04 	str.w	r0, [sl], #4
 8016596:	f853 2b04 	ldr.w	r2, [r3], #4
 801659a:	459c      	cmp	ip, r3
 801659c:	fa22 f20e 	lsr.w	r2, r2, lr
 80165a0:	d8f3      	bhi.n	801658a <__lshift+0x6e>
 80165a2:	ebac 0304 	sub.w	r3, ip, r4
 80165a6:	3b15      	subs	r3, #21
 80165a8:	f023 0303 	bic.w	r3, r3, #3
 80165ac:	3304      	adds	r3, #4
 80165ae:	f104 0015 	add.w	r0, r4, #21
 80165b2:	4560      	cmp	r0, ip
 80165b4:	bf88      	it	hi
 80165b6:	2304      	movhi	r3, #4
 80165b8:	50ca      	str	r2, [r1, r3]
 80165ba:	b10a      	cbz	r2, 80165c0 <__lshift+0xa4>
 80165bc:	f108 0602 	add.w	r6, r8, #2
 80165c0:	3e01      	subs	r6, #1
 80165c2:	4638      	mov	r0, r7
 80165c4:	612e      	str	r6, [r5, #16]
 80165c6:	4621      	mov	r1, r4
 80165c8:	f7ff fd98 	bl	80160fc <_Bfree>
 80165cc:	4628      	mov	r0, r5
 80165ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80165d6:	3301      	adds	r3, #1
 80165d8:	e7c5      	b.n	8016566 <__lshift+0x4a>
 80165da:	3904      	subs	r1, #4
 80165dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80165e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80165e4:	459c      	cmp	ip, r3
 80165e6:	d8f9      	bhi.n	80165dc <__lshift+0xc0>
 80165e8:	e7ea      	b.n	80165c0 <__lshift+0xa4>
 80165ea:	bf00      	nop
 80165ec:	08019361 	.word	0x08019361
 80165f0:	080193d2 	.word	0x080193d2

080165f4 <__mcmp>:
 80165f4:	690a      	ldr	r2, [r1, #16]
 80165f6:	4603      	mov	r3, r0
 80165f8:	6900      	ldr	r0, [r0, #16]
 80165fa:	1a80      	subs	r0, r0, r2
 80165fc:	b530      	push	{r4, r5, lr}
 80165fe:	d10e      	bne.n	801661e <__mcmp+0x2a>
 8016600:	3314      	adds	r3, #20
 8016602:	3114      	adds	r1, #20
 8016604:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016608:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801660c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016610:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016614:	4295      	cmp	r5, r2
 8016616:	d003      	beq.n	8016620 <__mcmp+0x2c>
 8016618:	d205      	bcs.n	8016626 <__mcmp+0x32>
 801661a:	f04f 30ff 	mov.w	r0, #4294967295
 801661e:	bd30      	pop	{r4, r5, pc}
 8016620:	42a3      	cmp	r3, r4
 8016622:	d3f3      	bcc.n	801660c <__mcmp+0x18>
 8016624:	e7fb      	b.n	801661e <__mcmp+0x2a>
 8016626:	2001      	movs	r0, #1
 8016628:	e7f9      	b.n	801661e <__mcmp+0x2a>
	...

0801662c <__mdiff>:
 801662c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016630:	4689      	mov	r9, r1
 8016632:	4606      	mov	r6, r0
 8016634:	4611      	mov	r1, r2
 8016636:	4648      	mov	r0, r9
 8016638:	4614      	mov	r4, r2
 801663a:	f7ff ffdb 	bl	80165f4 <__mcmp>
 801663e:	1e05      	subs	r5, r0, #0
 8016640:	d112      	bne.n	8016668 <__mdiff+0x3c>
 8016642:	4629      	mov	r1, r5
 8016644:	4630      	mov	r0, r6
 8016646:	f7ff fd19 	bl	801607c <_Balloc>
 801664a:	4602      	mov	r2, r0
 801664c:	b928      	cbnz	r0, 801665a <__mdiff+0x2e>
 801664e:	4b3f      	ldr	r3, [pc, #252]	@ (801674c <__mdiff+0x120>)
 8016650:	f240 2137 	movw	r1, #567	@ 0x237
 8016654:	483e      	ldr	r0, [pc, #248]	@ (8016750 <__mdiff+0x124>)
 8016656:	f7fb fddb 	bl	8012210 <__assert_func>
 801665a:	2301      	movs	r3, #1
 801665c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016660:	4610      	mov	r0, r2
 8016662:	b003      	add	sp, #12
 8016664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016668:	bfbc      	itt	lt
 801666a:	464b      	movlt	r3, r9
 801666c:	46a1      	movlt	r9, r4
 801666e:	4630      	mov	r0, r6
 8016670:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016674:	bfba      	itte	lt
 8016676:	461c      	movlt	r4, r3
 8016678:	2501      	movlt	r5, #1
 801667a:	2500      	movge	r5, #0
 801667c:	f7ff fcfe 	bl	801607c <_Balloc>
 8016680:	4602      	mov	r2, r0
 8016682:	b918      	cbnz	r0, 801668c <__mdiff+0x60>
 8016684:	4b31      	ldr	r3, [pc, #196]	@ (801674c <__mdiff+0x120>)
 8016686:	f240 2145 	movw	r1, #581	@ 0x245
 801668a:	e7e3      	b.n	8016654 <__mdiff+0x28>
 801668c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016690:	6926      	ldr	r6, [r4, #16]
 8016692:	60c5      	str	r5, [r0, #12]
 8016694:	f109 0310 	add.w	r3, r9, #16
 8016698:	f109 0514 	add.w	r5, r9, #20
 801669c:	f104 0e14 	add.w	lr, r4, #20
 80166a0:	f100 0b14 	add.w	fp, r0, #20
 80166a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80166a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80166ac:	9301      	str	r3, [sp, #4]
 80166ae:	46d9      	mov	r9, fp
 80166b0:	f04f 0c00 	mov.w	ip, #0
 80166b4:	9b01      	ldr	r3, [sp, #4]
 80166b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80166ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 80166be:	9301      	str	r3, [sp, #4]
 80166c0:	fa1f f38a 	uxth.w	r3, sl
 80166c4:	4619      	mov	r1, r3
 80166c6:	b283      	uxth	r3, r0
 80166c8:	1acb      	subs	r3, r1, r3
 80166ca:	0c00      	lsrs	r0, r0, #16
 80166cc:	4463      	add	r3, ip
 80166ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80166d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80166d6:	b29b      	uxth	r3, r3
 80166d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80166dc:	4576      	cmp	r6, lr
 80166de:	f849 3b04 	str.w	r3, [r9], #4
 80166e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80166e6:	d8e5      	bhi.n	80166b4 <__mdiff+0x88>
 80166e8:	1b33      	subs	r3, r6, r4
 80166ea:	3b15      	subs	r3, #21
 80166ec:	f023 0303 	bic.w	r3, r3, #3
 80166f0:	3415      	adds	r4, #21
 80166f2:	3304      	adds	r3, #4
 80166f4:	42a6      	cmp	r6, r4
 80166f6:	bf38      	it	cc
 80166f8:	2304      	movcc	r3, #4
 80166fa:	441d      	add	r5, r3
 80166fc:	445b      	add	r3, fp
 80166fe:	461e      	mov	r6, r3
 8016700:	462c      	mov	r4, r5
 8016702:	4544      	cmp	r4, r8
 8016704:	d30e      	bcc.n	8016724 <__mdiff+0xf8>
 8016706:	f108 0103 	add.w	r1, r8, #3
 801670a:	1b49      	subs	r1, r1, r5
 801670c:	f021 0103 	bic.w	r1, r1, #3
 8016710:	3d03      	subs	r5, #3
 8016712:	45a8      	cmp	r8, r5
 8016714:	bf38      	it	cc
 8016716:	2100      	movcc	r1, #0
 8016718:	440b      	add	r3, r1
 801671a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801671e:	b191      	cbz	r1, 8016746 <__mdiff+0x11a>
 8016720:	6117      	str	r7, [r2, #16]
 8016722:	e79d      	b.n	8016660 <__mdiff+0x34>
 8016724:	f854 1b04 	ldr.w	r1, [r4], #4
 8016728:	46e6      	mov	lr, ip
 801672a:	0c08      	lsrs	r0, r1, #16
 801672c:	fa1c fc81 	uxtah	ip, ip, r1
 8016730:	4471      	add	r1, lr
 8016732:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8016736:	b289      	uxth	r1, r1
 8016738:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801673c:	f846 1b04 	str.w	r1, [r6], #4
 8016740:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016744:	e7dd      	b.n	8016702 <__mdiff+0xd6>
 8016746:	3f01      	subs	r7, #1
 8016748:	e7e7      	b.n	801671a <__mdiff+0xee>
 801674a:	bf00      	nop
 801674c:	08019361 	.word	0x08019361
 8016750:	080193d2 	.word	0x080193d2

08016754 <__ulp>:
 8016754:	b082      	sub	sp, #8
 8016756:	ed8d 0b00 	vstr	d0, [sp]
 801675a:	9a01      	ldr	r2, [sp, #4]
 801675c:	4b0f      	ldr	r3, [pc, #60]	@ (801679c <__ulp+0x48>)
 801675e:	4013      	ands	r3, r2
 8016760:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8016764:	2b00      	cmp	r3, #0
 8016766:	dc08      	bgt.n	801677a <__ulp+0x26>
 8016768:	425b      	negs	r3, r3
 801676a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801676e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016772:	da04      	bge.n	801677e <__ulp+0x2a>
 8016774:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016778:	4113      	asrs	r3, r2
 801677a:	2200      	movs	r2, #0
 801677c:	e008      	b.n	8016790 <__ulp+0x3c>
 801677e:	f1a2 0314 	sub.w	r3, r2, #20
 8016782:	2b1e      	cmp	r3, #30
 8016784:	bfda      	itte	le
 8016786:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801678a:	40da      	lsrle	r2, r3
 801678c:	2201      	movgt	r2, #1
 801678e:	2300      	movs	r3, #0
 8016790:	4619      	mov	r1, r3
 8016792:	4610      	mov	r0, r2
 8016794:	ec41 0b10 	vmov	d0, r0, r1
 8016798:	b002      	add	sp, #8
 801679a:	4770      	bx	lr
 801679c:	7ff00000 	.word	0x7ff00000

080167a0 <__b2d>:
 80167a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167a4:	6906      	ldr	r6, [r0, #16]
 80167a6:	f100 0814 	add.w	r8, r0, #20
 80167aa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80167ae:	1f37      	subs	r7, r6, #4
 80167b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80167b4:	4610      	mov	r0, r2
 80167b6:	f7ff fd53 	bl	8016260 <__hi0bits>
 80167ba:	f1c0 0320 	rsb	r3, r0, #32
 80167be:	280a      	cmp	r0, #10
 80167c0:	600b      	str	r3, [r1, #0]
 80167c2:	491b      	ldr	r1, [pc, #108]	@ (8016830 <__b2d+0x90>)
 80167c4:	dc15      	bgt.n	80167f2 <__b2d+0x52>
 80167c6:	f1c0 0c0b 	rsb	ip, r0, #11
 80167ca:	fa22 f30c 	lsr.w	r3, r2, ip
 80167ce:	45b8      	cmp	r8, r7
 80167d0:	ea43 0501 	orr.w	r5, r3, r1
 80167d4:	bf34      	ite	cc
 80167d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80167da:	2300      	movcs	r3, #0
 80167dc:	3015      	adds	r0, #21
 80167de:	fa02 f000 	lsl.w	r0, r2, r0
 80167e2:	fa23 f30c 	lsr.w	r3, r3, ip
 80167e6:	4303      	orrs	r3, r0
 80167e8:	461c      	mov	r4, r3
 80167ea:	ec45 4b10 	vmov	d0, r4, r5
 80167ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167f2:	45b8      	cmp	r8, r7
 80167f4:	bf3a      	itte	cc
 80167f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80167fa:	f1a6 0708 	subcc.w	r7, r6, #8
 80167fe:	2300      	movcs	r3, #0
 8016800:	380b      	subs	r0, #11
 8016802:	d012      	beq.n	801682a <__b2d+0x8a>
 8016804:	f1c0 0120 	rsb	r1, r0, #32
 8016808:	fa23 f401 	lsr.w	r4, r3, r1
 801680c:	4082      	lsls	r2, r0
 801680e:	4322      	orrs	r2, r4
 8016810:	4547      	cmp	r7, r8
 8016812:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8016816:	bf8c      	ite	hi
 8016818:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801681c:	2200      	movls	r2, #0
 801681e:	4083      	lsls	r3, r0
 8016820:	40ca      	lsrs	r2, r1
 8016822:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016826:	4313      	orrs	r3, r2
 8016828:	e7de      	b.n	80167e8 <__b2d+0x48>
 801682a:	ea42 0501 	orr.w	r5, r2, r1
 801682e:	e7db      	b.n	80167e8 <__b2d+0x48>
 8016830:	3ff00000 	.word	0x3ff00000

08016834 <__d2b>:
 8016834:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016838:	460f      	mov	r7, r1
 801683a:	2101      	movs	r1, #1
 801683c:	ec59 8b10 	vmov	r8, r9, d0
 8016840:	4616      	mov	r6, r2
 8016842:	f7ff fc1b 	bl	801607c <_Balloc>
 8016846:	4604      	mov	r4, r0
 8016848:	b930      	cbnz	r0, 8016858 <__d2b+0x24>
 801684a:	4602      	mov	r2, r0
 801684c:	4b23      	ldr	r3, [pc, #140]	@ (80168dc <__d2b+0xa8>)
 801684e:	4824      	ldr	r0, [pc, #144]	@ (80168e0 <__d2b+0xac>)
 8016850:	f240 310f 	movw	r1, #783	@ 0x30f
 8016854:	f7fb fcdc 	bl	8012210 <__assert_func>
 8016858:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801685c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016860:	b10d      	cbz	r5, 8016866 <__d2b+0x32>
 8016862:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016866:	9301      	str	r3, [sp, #4]
 8016868:	f1b8 0300 	subs.w	r3, r8, #0
 801686c:	d023      	beq.n	80168b6 <__d2b+0x82>
 801686e:	4668      	mov	r0, sp
 8016870:	9300      	str	r3, [sp, #0]
 8016872:	f7ff fd14 	bl	801629e <__lo0bits>
 8016876:	e9dd 1200 	ldrd	r1, r2, [sp]
 801687a:	b1d0      	cbz	r0, 80168b2 <__d2b+0x7e>
 801687c:	f1c0 0320 	rsb	r3, r0, #32
 8016880:	fa02 f303 	lsl.w	r3, r2, r3
 8016884:	430b      	orrs	r3, r1
 8016886:	40c2      	lsrs	r2, r0
 8016888:	6163      	str	r3, [r4, #20]
 801688a:	9201      	str	r2, [sp, #4]
 801688c:	9b01      	ldr	r3, [sp, #4]
 801688e:	61a3      	str	r3, [r4, #24]
 8016890:	2b00      	cmp	r3, #0
 8016892:	bf0c      	ite	eq
 8016894:	2201      	moveq	r2, #1
 8016896:	2202      	movne	r2, #2
 8016898:	6122      	str	r2, [r4, #16]
 801689a:	b1a5      	cbz	r5, 80168c6 <__d2b+0x92>
 801689c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80168a0:	4405      	add	r5, r0
 80168a2:	603d      	str	r5, [r7, #0]
 80168a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80168a8:	6030      	str	r0, [r6, #0]
 80168aa:	4620      	mov	r0, r4
 80168ac:	b003      	add	sp, #12
 80168ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80168b2:	6161      	str	r1, [r4, #20]
 80168b4:	e7ea      	b.n	801688c <__d2b+0x58>
 80168b6:	a801      	add	r0, sp, #4
 80168b8:	f7ff fcf1 	bl	801629e <__lo0bits>
 80168bc:	9b01      	ldr	r3, [sp, #4]
 80168be:	6163      	str	r3, [r4, #20]
 80168c0:	3020      	adds	r0, #32
 80168c2:	2201      	movs	r2, #1
 80168c4:	e7e8      	b.n	8016898 <__d2b+0x64>
 80168c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80168ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80168ce:	6038      	str	r0, [r7, #0]
 80168d0:	6918      	ldr	r0, [r3, #16]
 80168d2:	f7ff fcc5 	bl	8016260 <__hi0bits>
 80168d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80168da:	e7e5      	b.n	80168a8 <__d2b+0x74>
 80168dc:	08019361 	.word	0x08019361
 80168e0:	080193d2 	.word	0x080193d2

080168e4 <__ratio>:
 80168e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168e8:	b085      	sub	sp, #20
 80168ea:	e9cd 1000 	strd	r1, r0, [sp]
 80168ee:	a902      	add	r1, sp, #8
 80168f0:	f7ff ff56 	bl	80167a0 <__b2d>
 80168f4:	9800      	ldr	r0, [sp, #0]
 80168f6:	a903      	add	r1, sp, #12
 80168f8:	ec55 4b10 	vmov	r4, r5, d0
 80168fc:	f7ff ff50 	bl	80167a0 <__b2d>
 8016900:	9b01      	ldr	r3, [sp, #4]
 8016902:	6919      	ldr	r1, [r3, #16]
 8016904:	9b00      	ldr	r3, [sp, #0]
 8016906:	691b      	ldr	r3, [r3, #16]
 8016908:	1ac9      	subs	r1, r1, r3
 801690a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801690e:	1a9b      	subs	r3, r3, r2
 8016910:	ec5b ab10 	vmov	sl, fp, d0
 8016914:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8016918:	2b00      	cmp	r3, #0
 801691a:	bfce      	itee	gt
 801691c:	462a      	movgt	r2, r5
 801691e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016922:	465a      	movle	r2, fp
 8016924:	462f      	mov	r7, r5
 8016926:	46d9      	mov	r9, fp
 8016928:	bfcc      	ite	gt
 801692a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801692e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8016932:	464b      	mov	r3, r9
 8016934:	4652      	mov	r2, sl
 8016936:	4620      	mov	r0, r4
 8016938:	4639      	mov	r1, r7
 801693a:	f7e9 ffb7 	bl	80008ac <__aeabi_ddiv>
 801693e:	ec41 0b10 	vmov	d0, r0, r1
 8016942:	b005      	add	sp, #20
 8016944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016948 <__copybits>:
 8016948:	3901      	subs	r1, #1
 801694a:	b570      	push	{r4, r5, r6, lr}
 801694c:	1149      	asrs	r1, r1, #5
 801694e:	6914      	ldr	r4, [r2, #16]
 8016950:	3101      	adds	r1, #1
 8016952:	f102 0314 	add.w	r3, r2, #20
 8016956:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801695a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801695e:	1f05      	subs	r5, r0, #4
 8016960:	42a3      	cmp	r3, r4
 8016962:	d30c      	bcc.n	801697e <__copybits+0x36>
 8016964:	1aa3      	subs	r3, r4, r2
 8016966:	3b11      	subs	r3, #17
 8016968:	f023 0303 	bic.w	r3, r3, #3
 801696c:	3211      	adds	r2, #17
 801696e:	42a2      	cmp	r2, r4
 8016970:	bf88      	it	hi
 8016972:	2300      	movhi	r3, #0
 8016974:	4418      	add	r0, r3
 8016976:	2300      	movs	r3, #0
 8016978:	4288      	cmp	r0, r1
 801697a:	d305      	bcc.n	8016988 <__copybits+0x40>
 801697c:	bd70      	pop	{r4, r5, r6, pc}
 801697e:	f853 6b04 	ldr.w	r6, [r3], #4
 8016982:	f845 6f04 	str.w	r6, [r5, #4]!
 8016986:	e7eb      	b.n	8016960 <__copybits+0x18>
 8016988:	f840 3b04 	str.w	r3, [r0], #4
 801698c:	e7f4      	b.n	8016978 <__copybits+0x30>

0801698e <__any_on>:
 801698e:	f100 0214 	add.w	r2, r0, #20
 8016992:	6900      	ldr	r0, [r0, #16]
 8016994:	114b      	asrs	r3, r1, #5
 8016996:	4298      	cmp	r0, r3
 8016998:	b510      	push	{r4, lr}
 801699a:	db11      	blt.n	80169c0 <__any_on+0x32>
 801699c:	dd0a      	ble.n	80169b4 <__any_on+0x26>
 801699e:	f011 011f 	ands.w	r1, r1, #31
 80169a2:	d007      	beq.n	80169b4 <__any_on+0x26>
 80169a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80169a8:	fa24 f001 	lsr.w	r0, r4, r1
 80169ac:	fa00 f101 	lsl.w	r1, r0, r1
 80169b0:	428c      	cmp	r4, r1
 80169b2:	d10b      	bne.n	80169cc <__any_on+0x3e>
 80169b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80169b8:	4293      	cmp	r3, r2
 80169ba:	d803      	bhi.n	80169c4 <__any_on+0x36>
 80169bc:	2000      	movs	r0, #0
 80169be:	bd10      	pop	{r4, pc}
 80169c0:	4603      	mov	r3, r0
 80169c2:	e7f7      	b.n	80169b4 <__any_on+0x26>
 80169c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80169c8:	2900      	cmp	r1, #0
 80169ca:	d0f5      	beq.n	80169b8 <__any_on+0x2a>
 80169cc:	2001      	movs	r0, #1
 80169ce:	e7f6      	b.n	80169be <__any_on+0x30>

080169d0 <_realloc_r>:
 80169d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169d4:	4607      	mov	r7, r0
 80169d6:	4614      	mov	r4, r2
 80169d8:	460d      	mov	r5, r1
 80169da:	b921      	cbnz	r1, 80169e6 <_realloc_r+0x16>
 80169dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80169e0:	4611      	mov	r1, r2
 80169e2:	f7fb bcd1 	b.w	8012388 <_malloc_r>
 80169e6:	b92a      	cbnz	r2, 80169f4 <_realloc_r+0x24>
 80169e8:	f7fe ff7e 	bl	80158e8 <_free_r>
 80169ec:	4625      	mov	r5, r4
 80169ee:	4628      	mov	r0, r5
 80169f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169f4:	f000 fc1a 	bl	801722c <_malloc_usable_size_r>
 80169f8:	4284      	cmp	r4, r0
 80169fa:	4606      	mov	r6, r0
 80169fc:	d802      	bhi.n	8016a04 <_realloc_r+0x34>
 80169fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016a02:	d8f4      	bhi.n	80169ee <_realloc_r+0x1e>
 8016a04:	4621      	mov	r1, r4
 8016a06:	4638      	mov	r0, r7
 8016a08:	f7fb fcbe 	bl	8012388 <_malloc_r>
 8016a0c:	4680      	mov	r8, r0
 8016a0e:	b908      	cbnz	r0, 8016a14 <_realloc_r+0x44>
 8016a10:	4645      	mov	r5, r8
 8016a12:	e7ec      	b.n	80169ee <_realloc_r+0x1e>
 8016a14:	42b4      	cmp	r4, r6
 8016a16:	4622      	mov	r2, r4
 8016a18:	4629      	mov	r1, r5
 8016a1a:	bf28      	it	cs
 8016a1c:	4632      	movcs	r2, r6
 8016a1e:	f7fe f8e5 	bl	8014bec <memcpy>
 8016a22:	4629      	mov	r1, r5
 8016a24:	4638      	mov	r0, r7
 8016a26:	f7fe ff5f 	bl	80158e8 <_free_r>
 8016a2a:	e7f1      	b.n	8016a10 <_realloc_r+0x40>

08016a2c <__ascii_wctomb>:
 8016a2c:	4603      	mov	r3, r0
 8016a2e:	4608      	mov	r0, r1
 8016a30:	b141      	cbz	r1, 8016a44 <__ascii_wctomb+0x18>
 8016a32:	2aff      	cmp	r2, #255	@ 0xff
 8016a34:	d904      	bls.n	8016a40 <__ascii_wctomb+0x14>
 8016a36:	228a      	movs	r2, #138	@ 0x8a
 8016a38:	601a      	str	r2, [r3, #0]
 8016a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8016a3e:	4770      	bx	lr
 8016a40:	700a      	strb	r2, [r1, #0]
 8016a42:	2001      	movs	r0, #1
 8016a44:	4770      	bx	lr

08016a46 <__ssputs_r>:
 8016a46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a4a:	688e      	ldr	r6, [r1, #8]
 8016a4c:	461f      	mov	r7, r3
 8016a4e:	42be      	cmp	r6, r7
 8016a50:	680b      	ldr	r3, [r1, #0]
 8016a52:	4682      	mov	sl, r0
 8016a54:	460c      	mov	r4, r1
 8016a56:	4690      	mov	r8, r2
 8016a58:	d82d      	bhi.n	8016ab6 <__ssputs_r+0x70>
 8016a5a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016a5e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016a62:	d026      	beq.n	8016ab2 <__ssputs_r+0x6c>
 8016a64:	6965      	ldr	r5, [r4, #20]
 8016a66:	6909      	ldr	r1, [r1, #16]
 8016a68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016a6c:	eba3 0901 	sub.w	r9, r3, r1
 8016a70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016a74:	1c7b      	adds	r3, r7, #1
 8016a76:	444b      	add	r3, r9
 8016a78:	106d      	asrs	r5, r5, #1
 8016a7a:	429d      	cmp	r5, r3
 8016a7c:	bf38      	it	cc
 8016a7e:	461d      	movcc	r5, r3
 8016a80:	0553      	lsls	r3, r2, #21
 8016a82:	d527      	bpl.n	8016ad4 <__ssputs_r+0x8e>
 8016a84:	4629      	mov	r1, r5
 8016a86:	f7fb fc7f 	bl	8012388 <_malloc_r>
 8016a8a:	4606      	mov	r6, r0
 8016a8c:	b360      	cbz	r0, 8016ae8 <__ssputs_r+0xa2>
 8016a8e:	6921      	ldr	r1, [r4, #16]
 8016a90:	464a      	mov	r2, r9
 8016a92:	f7fe f8ab 	bl	8014bec <memcpy>
 8016a96:	89a3      	ldrh	r3, [r4, #12]
 8016a98:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016a9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016aa0:	81a3      	strh	r3, [r4, #12]
 8016aa2:	6126      	str	r6, [r4, #16]
 8016aa4:	6165      	str	r5, [r4, #20]
 8016aa6:	444e      	add	r6, r9
 8016aa8:	eba5 0509 	sub.w	r5, r5, r9
 8016aac:	6026      	str	r6, [r4, #0]
 8016aae:	60a5      	str	r5, [r4, #8]
 8016ab0:	463e      	mov	r6, r7
 8016ab2:	42be      	cmp	r6, r7
 8016ab4:	d900      	bls.n	8016ab8 <__ssputs_r+0x72>
 8016ab6:	463e      	mov	r6, r7
 8016ab8:	6820      	ldr	r0, [r4, #0]
 8016aba:	4632      	mov	r2, r6
 8016abc:	4641      	mov	r1, r8
 8016abe:	f000 fb34 	bl	801712a <memmove>
 8016ac2:	68a3      	ldr	r3, [r4, #8]
 8016ac4:	1b9b      	subs	r3, r3, r6
 8016ac6:	60a3      	str	r3, [r4, #8]
 8016ac8:	6823      	ldr	r3, [r4, #0]
 8016aca:	4433      	add	r3, r6
 8016acc:	6023      	str	r3, [r4, #0]
 8016ace:	2000      	movs	r0, #0
 8016ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ad4:	462a      	mov	r2, r5
 8016ad6:	f7ff ff7b 	bl	80169d0 <_realloc_r>
 8016ada:	4606      	mov	r6, r0
 8016adc:	2800      	cmp	r0, #0
 8016ade:	d1e0      	bne.n	8016aa2 <__ssputs_r+0x5c>
 8016ae0:	6921      	ldr	r1, [r4, #16]
 8016ae2:	4650      	mov	r0, sl
 8016ae4:	f7fe ff00 	bl	80158e8 <_free_r>
 8016ae8:	230c      	movs	r3, #12
 8016aea:	f8ca 3000 	str.w	r3, [sl]
 8016aee:	89a3      	ldrh	r3, [r4, #12]
 8016af0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016af4:	81a3      	strh	r3, [r4, #12]
 8016af6:	f04f 30ff 	mov.w	r0, #4294967295
 8016afa:	e7e9      	b.n	8016ad0 <__ssputs_r+0x8a>

08016afc <_svfiprintf_r>:
 8016afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b00:	4698      	mov	r8, r3
 8016b02:	898b      	ldrh	r3, [r1, #12]
 8016b04:	061b      	lsls	r3, r3, #24
 8016b06:	b09d      	sub	sp, #116	@ 0x74
 8016b08:	4607      	mov	r7, r0
 8016b0a:	460d      	mov	r5, r1
 8016b0c:	4614      	mov	r4, r2
 8016b0e:	d510      	bpl.n	8016b32 <_svfiprintf_r+0x36>
 8016b10:	690b      	ldr	r3, [r1, #16]
 8016b12:	b973      	cbnz	r3, 8016b32 <_svfiprintf_r+0x36>
 8016b14:	2140      	movs	r1, #64	@ 0x40
 8016b16:	f7fb fc37 	bl	8012388 <_malloc_r>
 8016b1a:	6028      	str	r0, [r5, #0]
 8016b1c:	6128      	str	r0, [r5, #16]
 8016b1e:	b930      	cbnz	r0, 8016b2e <_svfiprintf_r+0x32>
 8016b20:	230c      	movs	r3, #12
 8016b22:	603b      	str	r3, [r7, #0]
 8016b24:	f04f 30ff 	mov.w	r0, #4294967295
 8016b28:	b01d      	add	sp, #116	@ 0x74
 8016b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b2e:	2340      	movs	r3, #64	@ 0x40
 8016b30:	616b      	str	r3, [r5, #20]
 8016b32:	2300      	movs	r3, #0
 8016b34:	9309      	str	r3, [sp, #36]	@ 0x24
 8016b36:	2320      	movs	r3, #32
 8016b38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016b3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8016b40:	2330      	movs	r3, #48	@ 0x30
 8016b42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016ce0 <_svfiprintf_r+0x1e4>
 8016b46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016b4a:	f04f 0901 	mov.w	r9, #1
 8016b4e:	4623      	mov	r3, r4
 8016b50:	469a      	mov	sl, r3
 8016b52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016b56:	b10a      	cbz	r2, 8016b5c <_svfiprintf_r+0x60>
 8016b58:	2a25      	cmp	r2, #37	@ 0x25
 8016b5a:	d1f9      	bne.n	8016b50 <_svfiprintf_r+0x54>
 8016b5c:	ebba 0b04 	subs.w	fp, sl, r4
 8016b60:	d00b      	beq.n	8016b7a <_svfiprintf_r+0x7e>
 8016b62:	465b      	mov	r3, fp
 8016b64:	4622      	mov	r2, r4
 8016b66:	4629      	mov	r1, r5
 8016b68:	4638      	mov	r0, r7
 8016b6a:	f7ff ff6c 	bl	8016a46 <__ssputs_r>
 8016b6e:	3001      	adds	r0, #1
 8016b70:	f000 80a7 	beq.w	8016cc2 <_svfiprintf_r+0x1c6>
 8016b74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016b76:	445a      	add	r2, fp
 8016b78:	9209      	str	r2, [sp, #36]	@ 0x24
 8016b7a:	f89a 3000 	ldrb.w	r3, [sl]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	f000 809f 	beq.w	8016cc2 <_svfiprintf_r+0x1c6>
 8016b84:	2300      	movs	r3, #0
 8016b86:	f04f 32ff 	mov.w	r2, #4294967295
 8016b8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016b8e:	f10a 0a01 	add.w	sl, sl, #1
 8016b92:	9304      	str	r3, [sp, #16]
 8016b94:	9307      	str	r3, [sp, #28]
 8016b96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016b9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8016b9c:	4654      	mov	r4, sl
 8016b9e:	2205      	movs	r2, #5
 8016ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ba4:	484e      	ldr	r0, [pc, #312]	@ (8016ce0 <_svfiprintf_r+0x1e4>)
 8016ba6:	f7e9 fb43 	bl	8000230 <memchr>
 8016baa:	9a04      	ldr	r2, [sp, #16]
 8016bac:	b9d8      	cbnz	r0, 8016be6 <_svfiprintf_r+0xea>
 8016bae:	06d0      	lsls	r0, r2, #27
 8016bb0:	bf44      	itt	mi
 8016bb2:	2320      	movmi	r3, #32
 8016bb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016bb8:	0711      	lsls	r1, r2, #28
 8016bba:	bf44      	itt	mi
 8016bbc:	232b      	movmi	r3, #43	@ 0x2b
 8016bbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016bc2:	f89a 3000 	ldrb.w	r3, [sl]
 8016bc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8016bc8:	d015      	beq.n	8016bf6 <_svfiprintf_r+0xfa>
 8016bca:	9a07      	ldr	r2, [sp, #28]
 8016bcc:	4654      	mov	r4, sl
 8016bce:	2000      	movs	r0, #0
 8016bd0:	f04f 0c0a 	mov.w	ip, #10
 8016bd4:	4621      	mov	r1, r4
 8016bd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016bda:	3b30      	subs	r3, #48	@ 0x30
 8016bdc:	2b09      	cmp	r3, #9
 8016bde:	d94b      	bls.n	8016c78 <_svfiprintf_r+0x17c>
 8016be0:	b1b0      	cbz	r0, 8016c10 <_svfiprintf_r+0x114>
 8016be2:	9207      	str	r2, [sp, #28]
 8016be4:	e014      	b.n	8016c10 <_svfiprintf_r+0x114>
 8016be6:	eba0 0308 	sub.w	r3, r0, r8
 8016bea:	fa09 f303 	lsl.w	r3, r9, r3
 8016bee:	4313      	orrs	r3, r2
 8016bf0:	9304      	str	r3, [sp, #16]
 8016bf2:	46a2      	mov	sl, r4
 8016bf4:	e7d2      	b.n	8016b9c <_svfiprintf_r+0xa0>
 8016bf6:	9b03      	ldr	r3, [sp, #12]
 8016bf8:	1d19      	adds	r1, r3, #4
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	9103      	str	r1, [sp, #12]
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	bfbb      	ittet	lt
 8016c02:	425b      	neglt	r3, r3
 8016c04:	f042 0202 	orrlt.w	r2, r2, #2
 8016c08:	9307      	strge	r3, [sp, #28]
 8016c0a:	9307      	strlt	r3, [sp, #28]
 8016c0c:	bfb8      	it	lt
 8016c0e:	9204      	strlt	r2, [sp, #16]
 8016c10:	7823      	ldrb	r3, [r4, #0]
 8016c12:	2b2e      	cmp	r3, #46	@ 0x2e
 8016c14:	d10a      	bne.n	8016c2c <_svfiprintf_r+0x130>
 8016c16:	7863      	ldrb	r3, [r4, #1]
 8016c18:	2b2a      	cmp	r3, #42	@ 0x2a
 8016c1a:	d132      	bne.n	8016c82 <_svfiprintf_r+0x186>
 8016c1c:	9b03      	ldr	r3, [sp, #12]
 8016c1e:	1d1a      	adds	r2, r3, #4
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	9203      	str	r2, [sp, #12]
 8016c24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016c28:	3402      	adds	r4, #2
 8016c2a:	9305      	str	r3, [sp, #20]
 8016c2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016cf0 <_svfiprintf_r+0x1f4>
 8016c30:	7821      	ldrb	r1, [r4, #0]
 8016c32:	2203      	movs	r2, #3
 8016c34:	4650      	mov	r0, sl
 8016c36:	f7e9 fafb 	bl	8000230 <memchr>
 8016c3a:	b138      	cbz	r0, 8016c4c <_svfiprintf_r+0x150>
 8016c3c:	9b04      	ldr	r3, [sp, #16]
 8016c3e:	eba0 000a 	sub.w	r0, r0, sl
 8016c42:	2240      	movs	r2, #64	@ 0x40
 8016c44:	4082      	lsls	r2, r0
 8016c46:	4313      	orrs	r3, r2
 8016c48:	3401      	adds	r4, #1
 8016c4a:	9304      	str	r3, [sp, #16]
 8016c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c50:	4824      	ldr	r0, [pc, #144]	@ (8016ce4 <_svfiprintf_r+0x1e8>)
 8016c52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016c56:	2206      	movs	r2, #6
 8016c58:	f7e9 faea 	bl	8000230 <memchr>
 8016c5c:	2800      	cmp	r0, #0
 8016c5e:	d036      	beq.n	8016cce <_svfiprintf_r+0x1d2>
 8016c60:	4b21      	ldr	r3, [pc, #132]	@ (8016ce8 <_svfiprintf_r+0x1ec>)
 8016c62:	bb1b      	cbnz	r3, 8016cac <_svfiprintf_r+0x1b0>
 8016c64:	9b03      	ldr	r3, [sp, #12]
 8016c66:	3307      	adds	r3, #7
 8016c68:	f023 0307 	bic.w	r3, r3, #7
 8016c6c:	3308      	adds	r3, #8
 8016c6e:	9303      	str	r3, [sp, #12]
 8016c70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016c72:	4433      	add	r3, r6
 8016c74:	9309      	str	r3, [sp, #36]	@ 0x24
 8016c76:	e76a      	b.n	8016b4e <_svfiprintf_r+0x52>
 8016c78:	fb0c 3202 	mla	r2, ip, r2, r3
 8016c7c:	460c      	mov	r4, r1
 8016c7e:	2001      	movs	r0, #1
 8016c80:	e7a8      	b.n	8016bd4 <_svfiprintf_r+0xd8>
 8016c82:	2300      	movs	r3, #0
 8016c84:	3401      	adds	r4, #1
 8016c86:	9305      	str	r3, [sp, #20]
 8016c88:	4619      	mov	r1, r3
 8016c8a:	f04f 0c0a 	mov.w	ip, #10
 8016c8e:	4620      	mov	r0, r4
 8016c90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016c94:	3a30      	subs	r2, #48	@ 0x30
 8016c96:	2a09      	cmp	r2, #9
 8016c98:	d903      	bls.n	8016ca2 <_svfiprintf_r+0x1a6>
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d0c6      	beq.n	8016c2c <_svfiprintf_r+0x130>
 8016c9e:	9105      	str	r1, [sp, #20]
 8016ca0:	e7c4      	b.n	8016c2c <_svfiprintf_r+0x130>
 8016ca2:	fb0c 2101 	mla	r1, ip, r1, r2
 8016ca6:	4604      	mov	r4, r0
 8016ca8:	2301      	movs	r3, #1
 8016caa:	e7f0      	b.n	8016c8e <_svfiprintf_r+0x192>
 8016cac:	ab03      	add	r3, sp, #12
 8016cae:	9300      	str	r3, [sp, #0]
 8016cb0:	462a      	mov	r2, r5
 8016cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8016cec <_svfiprintf_r+0x1f0>)
 8016cb4:	a904      	add	r1, sp, #16
 8016cb6:	4638      	mov	r0, r7
 8016cb8:	f7fc fbcc 	bl	8013454 <_printf_float>
 8016cbc:	1c42      	adds	r2, r0, #1
 8016cbe:	4606      	mov	r6, r0
 8016cc0:	d1d6      	bne.n	8016c70 <_svfiprintf_r+0x174>
 8016cc2:	89ab      	ldrh	r3, [r5, #12]
 8016cc4:	065b      	lsls	r3, r3, #25
 8016cc6:	f53f af2d 	bmi.w	8016b24 <_svfiprintf_r+0x28>
 8016cca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016ccc:	e72c      	b.n	8016b28 <_svfiprintf_r+0x2c>
 8016cce:	ab03      	add	r3, sp, #12
 8016cd0:	9300      	str	r3, [sp, #0]
 8016cd2:	462a      	mov	r2, r5
 8016cd4:	4b05      	ldr	r3, [pc, #20]	@ (8016cec <_svfiprintf_r+0x1f0>)
 8016cd6:	a904      	add	r1, sp, #16
 8016cd8:	4638      	mov	r0, r7
 8016cda:	f7fc fe53 	bl	8013984 <_printf_i>
 8016cde:	e7ed      	b.n	8016cbc <_svfiprintf_r+0x1c0>
 8016ce0:	0801942b 	.word	0x0801942b
 8016ce4:	08019435 	.word	0x08019435
 8016ce8:	08013455 	.word	0x08013455
 8016cec:	08016a47 	.word	0x08016a47
 8016cf0:	08019431 	.word	0x08019431

08016cf4 <__sfputc_r>:
 8016cf4:	6893      	ldr	r3, [r2, #8]
 8016cf6:	3b01      	subs	r3, #1
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	b410      	push	{r4}
 8016cfc:	6093      	str	r3, [r2, #8]
 8016cfe:	da08      	bge.n	8016d12 <__sfputc_r+0x1e>
 8016d00:	6994      	ldr	r4, [r2, #24]
 8016d02:	42a3      	cmp	r3, r4
 8016d04:	db01      	blt.n	8016d0a <__sfputc_r+0x16>
 8016d06:	290a      	cmp	r1, #10
 8016d08:	d103      	bne.n	8016d12 <__sfputc_r+0x1e>
 8016d0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d0e:	f7fd bc8e 	b.w	801462e <__swbuf_r>
 8016d12:	6813      	ldr	r3, [r2, #0]
 8016d14:	1c58      	adds	r0, r3, #1
 8016d16:	6010      	str	r0, [r2, #0]
 8016d18:	7019      	strb	r1, [r3, #0]
 8016d1a:	4608      	mov	r0, r1
 8016d1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d20:	4770      	bx	lr

08016d22 <__sfputs_r>:
 8016d22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d24:	4606      	mov	r6, r0
 8016d26:	460f      	mov	r7, r1
 8016d28:	4614      	mov	r4, r2
 8016d2a:	18d5      	adds	r5, r2, r3
 8016d2c:	42ac      	cmp	r4, r5
 8016d2e:	d101      	bne.n	8016d34 <__sfputs_r+0x12>
 8016d30:	2000      	movs	r0, #0
 8016d32:	e007      	b.n	8016d44 <__sfputs_r+0x22>
 8016d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d38:	463a      	mov	r2, r7
 8016d3a:	4630      	mov	r0, r6
 8016d3c:	f7ff ffda 	bl	8016cf4 <__sfputc_r>
 8016d40:	1c43      	adds	r3, r0, #1
 8016d42:	d1f3      	bne.n	8016d2c <__sfputs_r+0xa>
 8016d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016d48 <_vfiprintf_r>:
 8016d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d4c:	460d      	mov	r5, r1
 8016d4e:	b09d      	sub	sp, #116	@ 0x74
 8016d50:	4614      	mov	r4, r2
 8016d52:	4698      	mov	r8, r3
 8016d54:	4606      	mov	r6, r0
 8016d56:	b118      	cbz	r0, 8016d60 <_vfiprintf_r+0x18>
 8016d58:	6a03      	ldr	r3, [r0, #32]
 8016d5a:	b90b      	cbnz	r3, 8016d60 <_vfiprintf_r+0x18>
 8016d5c:	f7fd fb3a 	bl	80143d4 <__sinit>
 8016d60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016d62:	07d9      	lsls	r1, r3, #31
 8016d64:	d405      	bmi.n	8016d72 <_vfiprintf_r+0x2a>
 8016d66:	89ab      	ldrh	r3, [r5, #12]
 8016d68:	059a      	lsls	r2, r3, #22
 8016d6a:	d402      	bmi.n	8016d72 <_vfiprintf_r+0x2a>
 8016d6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016d6e:	f7fd ff3b 	bl	8014be8 <__retarget_lock_acquire_recursive>
 8016d72:	89ab      	ldrh	r3, [r5, #12]
 8016d74:	071b      	lsls	r3, r3, #28
 8016d76:	d501      	bpl.n	8016d7c <_vfiprintf_r+0x34>
 8016d78:	692b      	ldr	r3, [r5, #16]
 8016d7a:	b99b      	cbnz	r3, 8016da4 <_vfiprintf_r+0x5c>
 8016d7c:	4629      	mov	r1, r5
 8016d7e:	4630      	mov	r0, r6
 8016d80:	f7fd fc94 	bl	80146ac <__swsetup_r>
 8016d84:	b170      	cbz	r0, 8016da4 <_vfiprintf_r+0x5c>
 8016d86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016d88:	07dc      	lsls	r4, r3, #31
 8016d8a:	d504      	bpl.n	8016d96 <_vfiprintf_r+0x4e>
 8016d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8016d90:	b01d      	add	sp, #116	@ 0x74
 8016d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d96:	89ab      	ldrh	r3, [r5, #12]
 8016d98:	0598      	lsls	r0, r3, #22
 8016d9a:	d4f7      	bmi.n	8016d8c <_vfiprintf_r+0x44>
 8016d9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016d9e:	f7fd ff24 	bl	8014bea <__retarget_lock_release_recursive>
 8016da2:	e7f3      	b.n	8016d8c <_vfiprintf_r+0x44>
 8016da4:	2300      	movs	r3, #0
 8016da6:	9309      	str	r3, [sp, #36]	@ 0x24
 8016da8:	2320      	movs	r3, #32
 8016daa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016dae:	f8cd 800c 	str.w	r8, [sp, #12]
 8016db2:	2330      	movs	r3, #48	@ 0x30
 8016db4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016f64 <_vfiprintf_r+0x21c>
 8016db8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016dbc:	f04f 0901 	mov.w	r9, #1
 8016dc0:	4623      	mov	r3, r4
 8016dc2:	469a      	mov	sl, r3
 8016dc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016dc8:	b10a      	cbz	r2, 8016dce <_vfiprintf_r+0x86>
 8016dca:	2a25      	cmp	r2, #37	@ 0x25
 8016dcc:	d1f9      	bne.n	8016dc2 <_vfiprintf_r+0x7a>
 8016dce:	ebba 0b04 	subs.w	fp, sl, r4
 8016dd2:	d00b      	beq.n	8016dec <_vfiprintf_r+0xa4>
 8016dd4:	465b      	mov	r3, fp
 8016dd6:	4622      	mov	r2, r4
 8016dd8:	4629      	mov	r1, r5
 8016dda:	4630      	mov	r0, r6
 8016ddc:	f7ff ffa1 	bl	8016d22 <__sfputs_r>
 8016de0:	3001      	adds	r0, #1
 8016de2:	f000 80a7 	beq.w	8016f34 <_vfiprintf_r+0x1ec>
 8016de6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016de8:	445a      	add	r2, fp
 8016dea:	9209      	str	r2, [sp, #36]	@ 0x24
 8016dec:	f89a 3000 	ldrb.w	r3, [sl]
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	f000 809f 	beq.w	8016f34 <_vfiprintf_r+0x1ec>
 8016df6:	2300      	movs	r3, #0
 8016df8:	f04f 32ff 	mov.w	r2, #4294967295
 8016dfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016e00:	f10a 0a01 	add.w	sl, sl, #1
 8016e04:	9304      	str	r3, [sp, #16]
 8016e06:	9307      	str	r3, [sp, #28]
 8016e08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016e0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8016e0e:	4654      	mov	r4, sl
 8016e10:	2205      	movs	r2, #5
 8016e12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e16:	4853      	ldr	r0, [pc, #332]	@ (8016f64 <_vfiprintf_r+0x21c>)
 8016e18:	f7e9 fa0a 	bl	8000230 <memchr>
 8016e1c:	9a04      	ldr	r2, [sp, #16]
 8016e1e:	b9d8      	cbnz	r0, 8016e58 <_vfiprintf_r+0x110>
 8016e20:	06d1      	lsls	r1, r2, #27
 8016e22:	bf44      	itt	mi
 8016e24:	2320      	movmi	r3, #32
 8016e26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016e2a:	0713      	lsls	r3, r2, #28
 8016e2c:	bf44      	itt	mi
 8016e2e:	232b      	movmi	r3, #43	@ 0x2b
 8016e30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016e34:	f89a 3000 	ldrb.w	r3, [sl]
 8016e38:	2b2a      	cmp	r3, #42	@ 0x2a
 8016e3a:	d015      	beq.n	8016e68 <_vfiprintf_r+0x120>
 8016e3c:	9a07      	ldr	r2, [sp, #28]
 8016e3e:	4654      	mov	r4, sl
 8016e40:	2000      	movs	r0, #0
 8016e42:	f04f 0c0a 	mov.w	ip, #10
 8016e46:	4621      	mov	r1, r4
 8016e48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016e4c:	3b30      	subs	r3, #48	@ 0x30
 8016e4e:	2b09      	cmp	r3, #9
 8016e50:	d94b      	bls.n	8016eea <_vfiprintf_r+0x1a2>
 8016e52:	b1b0      	cbz	r0, 8016e82 <_vfiprintf_r+0x13a>
 8016e54:	9207      	str	r2, [sp, #28]
 8016e56:	e014      	b.n	8016e82 <_vfiprintf_r+0x13a>
 8016e58:	eba0 0308 	sub.w	r3, r0, r8
 8016e5c:	fa09 f303 	lsl.w	r3, r9, r3
 8016e60:	4313      	orrs	r3, r2
 8016e62:	9304      	str	r3, [sp, #16]
 8016e64:	46a2      	mov	sl, r4
 8016e66:	e7d2      	b.n	8016e0e <_vfiprintf_r+0xc6>
 8016e68:	9b03      	ldr	r3, [sp, #12]
 8016e6a:	1d19      	adds	r1, r3, #4
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	9103      	str	r1, [sp, #12]
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	bfbb      	ittet	lt
 8016e74:	425b      	neglt	r3, r3
 8016e76:	f042 0202 	orrlt.w	r2, r2, #2
 8016e7a:	9307      	strge	r3, [sp, #28]
 8016e7c:	9307      	strlt	r3, [sp, #28]
 8016e7e:	bfb8      	it	lt
 8016e80:	9204      	strlt	r2, [sp, #16]
 8016e82:	7823      	ldrb	r3, [r4, #0]
 8016e84:	2b2e      	cmp	r3, #46	@ 0x2e
 8016e86:	d10a      	bne.n	8016e9e <_vfiprintf_r+0x156>
 8016e88:	7863      	ldrb	r3, [r4, #1]
 8016e8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8016e8c:	d132      	bne.n	8016ef4 <_vfiprintf_r+0x1ac>
 8016e8e:	9b03      	ldr	r3, [sp, #12]
 8016e90:	1d1a      	adds	r2, r3, #4
 8016e92:	681b      	ldr	r3, [r3, #0]
 8016e94:	9203      	str	r2, [sp, #12]
 8016e96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016e9a:	3402      	adds	r4, #2
 8016e9c:	9305      	str	r3, [sp, #20]
 8016e9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016f74 <_vfiprintf_r+0x22c>
 8016ea2:	7821      	ldrb	r1, [r4, #0]
 8016ea4:	2203      	movs	r2, #3
 8016ea6:	4650      	mov	r0, sl
 8016ea8:	f7e9 f9c2 	bl	8000230 <memchr>
 8016eac:	b138      	cbz	r0, 8016ebe <_vfiprintf_r+0x176>
 8016eae:	9b04      	ldr	r3, [sp, #16]
 8016eb0:	eba0 000a 	sub.w	r0, r0, sl
 8016eb4:	2240      	movs	r2, #64	@ 0x40
 8016eb6:	4082      	lsls	r2, r0
 8016eb8:	4313      	orrs	r3, r2
 8016eba:	3401      	adds	r4, #1
 8016ebc:	9304      	str	r3, [sp, #16]
 8016ebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ec2:	4829      	ldr	r0, [pc, #164]	@ (8016f68 <_vfiprintf_r+0x220>)
 8016ec4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016ec8:	2206      	movs	r2, #6
 8016eca:	f7e9 f9b1 	bl	8000230 <memchr>
 8016ece:	2800      	cmp	r0, #0
 8016ed0:	d03f      	beq.n	8016f52 <_vfiprintf_r+0x20a>
 8016ed2:	4b26      	ldr	r3, [pc, #152]	@ (8016f6c <_vfiprintf_r+0x224>)
 8016ed4:	bb1b      	cbnz	r3, 8016f1e <_vfiprintf_r+0x1d6>
 8016ed6:	9b03      	ldr	r3, [sp, #12]
 8016ed8:	3307      	adds	r3, #7
 8016eda:	f023 0307 	bic.w	r3, r3, #7
 8016ede:	3308      	adds	r3, #8
 8016ee0:	9303      	str	r3, [sp, #12]
 8016ee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016ee4:	443b      	add	r3, r7
 8016ee6:	9309      	str	r3, [sp, #36]	@ 0x24
 8016ee8:	e76a      	b.n	8016dc0 <_vfiprintf_r+0x78>
 8016eea:	fb0c 3202 	mla	r2, ip, r2, r3
 8016eee:	460c      	mov	r4, r1
 8016ef0:	2001      	movs	r0, #1
 8016ef2:	e7a8      	b.n	8016e46 <_vfiprintf_r+0xfe>
 8016ef4:	2300      	movs	r3, #0
 8016ef6:	3401      	adds	r4, #1
 8016ef8:	9305      	str	r3, [sp, #20]
 8016efa:	4619      	mov	r1, r3
 8016efc:	f04f 0c0a 	mov.w	ip, #10
 8016f00:	4620      	mov	r0, r4
 8016f02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f06:	3a30      	subs	r2, #48	@ 0x30
 8016f08:	2a09      	cmp	r2, #9
 8016f0a:	d903      	bls.n	8016f14 <_vfiprintf_r+0x1cc>
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d0c6      	beq.n	8016e9e <_vfiprintf_r+0x156>
 8016f10:	9105      	str	r1, [sp, #20]
 8016f12:	e7c4      	b.n	8016e9e <_vfiprintf_r+0x156>
 8016f14:	fb0c 2101 	mla	r1, ip, r1, r2
 8016f18:	4604      	mov	r4, r0
 8016f1a:	2301      	movs	r3, #1
 8016f1c:	e7f0      	b.n	8016f00 <_vfiprintf_r+0x1b8>
 8016f1e:	ab03      	add	r3, sp, #12
 8016f20:	9300      	str	r3, [sp, #0]
 8016f22:	462a      	mov	r2, r5
 8016f24:	4b12      	ldr	r3, [pc, #72]	@ (8016f70 <_vfiprintf_r+0x228>)
 8016f26:	a904      	add	r1, sp, #16
 8016f28:	4630      	mov	r0, r6
 8016f2a:	f7fc fa93 	bl	8013454 <_printf_float>
 8016f2e:	4607      	mov	r7, r0
 8016f30:	1c78      	adds	r0, r7, #1
 8016f32:	d1d6      	bne.n	8016ee2 <_vfiprintf_r+0x19a>
 8016f34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016f36:	07d9      	lsls	r1, r3, #31
 8016f38:	d405      	bmi.n	8016f46 <_vfiprintf_r+0x1fe>
 8016f3a:	89ab      	ldrh	r3, [r5, #12]
 8016f3c:	059a      	lsls	r2, r3, #22
 8016f3e:	d402      	bmi.n	8016f46 <_vfiprintf_r+0x1fe>
 8016f40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016f42:	f7fd fe52 	bl	8014bea <__retarget_lock_release_recursive>
 8016f46:	89ab      	ldrh	r3, [r5, #12]
 8016f48:	065b      	lsls	r3, r3, #25
 8016f4a:	f53f af1f 	bmi.w	8016d8c <_vfiprintf_r+0x44>
 8016f4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016f50:	e71e      	b.n	8016d90 <_vfiprintf_r+0x48>
 8016f52:	ab03      	add	r3, sp, #12
 8016f54:	9300      	str	r3, [sp, #0]
 8016f56:	462a      	mov	r2, r5
 8016f58:	4b05      	ldr	r3, [pc, #20]	@ (8016f70 <_vfiprintf_r+0x228>)
 8016f5a:	a904      	add	r1, sp, #16
 8016f5c:	4630      	mov	r0, r6
 8016f5e:	f7fc fd11 	bl	8013984 <_printf_i>
 8016f62:	e7e4      	b.n	8016f2e <_vfiprintf_r+0x1e6>
 8016f64:	0801942b 	.word	0x0801942b
 8016f68:	08019435 	.word	0x08019435
 8016f6c:	08013455 	.word	0x08013455
 8016f70:	08016d23 	.word	0x08016d23
 8016f74:	08019431 	.word	0x08019431

08016f78 <_getc_r>:
 8016f78:	b538      	push	{r3, r4, r5, lr}
 8016f7a:	460c      	mov	r4, r1
 8016f7c:	4605      	mov	r5, r0
 8016f7e:	b118      	cbz	r0, 8016f88 <_getc_r+0x10>
 8016f80:	6a03      	ldr	r3, [r0, #32]
 8016f82:	b90b      	cbnz	r3, 8016f88 <_getc_r+0x10>
 8016f84:	f7fd fa26 	bl	80143d4 <__sinit>
 8016f88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016f8a:	07d8      	lsls	r0, r3, #31
 8016f8c:	d405      	bmi.n	8016f9a <_getc_r+0x22>
 8016f8e:	89a3      	ldrh	r3, [r4, #12]
 8016f90:	0599      	lsls	r1, r3, #22
 8016f92:	d402      	bmi.n	8016f9a <_getc_r+0x22>
 8016f94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016f96:	f7fd fe27 	bl	8014be8 <__retarget_lock_acquire_recursive>
 8016f9a:	6863      	ldr	r3, [r4, #4]
 8016f9c:	3b01      	subs	r3, #1
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	6063      	str	r3, [r4, #4]
 8016fa2:	da0f      	bge.n	8016fc4 <_getc_r+0x4c>
 8016fa4:	4628      	mov	r0, r5
 8016fa6:	4621      	mov	r1, r4
 8016fa8:	f000 f8a7 	bl	80170fa <__srget_r>
 8016fac:	4605      	mov	r5, r0
 8016fae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016fb0:	07da      	lsls	r2, r3, #31
 8016fb2:	d405      	bmi.n	8016fc0 <_getc_r+0x48>
 8016fb4:	89a3      	ldrh	r3, [r4, #12]
 8016fb6:	059b      	lsls	r3, r3, #22
 8016fb8:	d402      	bmi.n	8016fc0 <_getc_r+0x48>
 8016fba:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016fbc:	f7fd fe15 	bl	8014bea <__retarget_lock_release_recursive>
 8016fc0:	4628      	mov	r0, r5
 8016fc2:	bd38      	pop	{r3, r4, r5, pc}
 8016fc4:	6823      	ldr	r3, [r4, #0]
 8016fc6:	1c5a      	adds	r2, r3, #1
 8016fc8:	6022      	str	r2, [r4, #0]
 8016fca:	781d      	ldrb	r5, [r3, #0]
 8016fcc:	e7ef      	b.n	8016fae <_getc_r+0x36>

08016fce <__swhatbuf_r>:
 8016fce:	b570      	push	{r4, r5, r6, lr}
 8016fd0:	460c      	mov	r4, r1
 8016fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fd6:	2900      	cmp	r1, #0
 8016fd8:	b096      	sub	sp, #88	@ 0x58
 8016fda:	4615      	mov	r5, r2
 8016fdc:	461e      	mov	r6, r3
 8016fde:	da0d      	bge.n	8016ffc <__swhatbuf_r+0x2e>
 8016fe0:	89a3      	ldrh	r3, [r4, #12]
 8016fe2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016fe6:	f04f 0100 	mov.w	r1, #0
 8016fea:	bf14      	ite	ne
 8016fec:	2340      	movne	r3, #64	@ 0x40
 8016fee:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016ff2:	2000      	movs	r0, #0
 8016ff4:	6031      	str	r1, [r6, #0]
 8016ff6:	602b      	str	r3, [r5, #0]
 8016ff8:	b016      	add	sp, #88	@ 0x58
 8016ffa:	bd70      	pop	{r4, r5, r6, pc}
 8016ffc:	466a      	mov	r2, sp
 8016ffe:	f000 f8df 	bl	80171c0 <_fstat_r>
 8017002:	2800      	cmp	r0, #0
 8017004:	dbec      	blt.n	8016fe0 <__swhatbuf_r+0x12>
 8017006:	9901      	ldr	r1, [sp, #4]
 8017008:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801700c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017010:	4259      	negs	r1, r3
 8017012:	4159      	adcs	r1, r3
 8017014:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017018:	e7eb      	b.n	8016ff2 <__swhatbuf_r+0x24>

0801701a <__smakebuf_r>:
 801701a:	898b      	ldrh	r3, [r1, #12]
 801701c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801701e:	079d      	lsls	r5, r3, #30
 8017020:	4606      	mov	r6, r0
 8017022:	460c      	mov	r4, r1
 8017024:	d507      	bpl.n	8017036 <__smakebuf_r+0x1c>
 8017026:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801702a:	6023      	str	r3, [r4, #0]
 801702c:	6123      	str	r3, [r4, #16]
 801702e:	2301      	movs	r3, #1
 8017030:	6163      	str	r3, [r4, #20]
 8017032:	b003      	add	sp, #12
 8017034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017036:	ab01      	add	r3, sp, #4
 8017038:	466a      	mov	r2, sp
 801703a:	f7ff ffc8 	bl	8016fce <__swhatbuf_r>
 801703e:	9f00      	ldr	r7, [sp, #0]
 8017040:	4605      	mov	r5, r0
 8017042:	4639      	mov	r1, r7
 8017044:	4630      	mov	r0, r6
 8017046:	f7fb f99f 	bl	8012388 <_malloc_r>
 801704a:	b948      	cbnz	r0, 8017060 <__smakebuf_r+0x46>
 801704c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017050:	059a      	lsls	r2, r3, #22
 8017052:	d4ee      	bmi.n	8017032 <__smakebuf_r+0x18>
 8017054:	f023 0303 	bic.w	r3, r3, #3
 8017058:	f043 0302 	orr.w	r3, r3, #2
 801705c:	81a3      	strh	r3, [r4, #12]
 801705e:	e7e2      	b.n	8017026 <__smakebuf_r+0xc>
 8017060:	89a3      	ldrh	r3, [r4, #12]
 8017062:	6020      	str	r0, [r4, #0]
 8017064:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017068:	81a3      	strh	r3, [r4, #12]
 801706a:	9b01      	ldr	r3, [sp, #4]
 801706c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017070:	b15b      	cbz	r3, 801708a <__smakebuf_r+0x70>
 8017072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017076:	4630      	mov	r0, r6
 8017078:	f000 f8b4 	bl	80171e4 <_isatty_r>
 801707c:	b128      	cbz	r0, 801708a <__smakebuf_r+0x70>
 801707e:	89a3      	ldrh	r3, [r4, #12]
 8017080:	f023 0303 	bic.w	r3, r3, #3
 8017084:	f043 0301 	orr.w	r3, r3, #1
 8017088:	81a3      	strh	r3, [r4, #12]
 801708a:	89a3      	ldrh	r3, [r4, #12]
 801708c:	431d      	orrs	r5, r3
 801708e:	81a5      	strh	r5, [r4, #12]
 8017090:	e7cf      	b.n	8017032 <__smakebuf_r+0x18>

08017092 <_putc_r>:
 8017092:	b570      	push	{r4, r5, r6, lr}
 8017094:	460d      	mov	r5, r1
 8017096:	4614      	mov	r4, r2
 8017098:	4606      	mov	r6, r0
 801709a:	b118      	cbz	r0, 80170a4 <_putc_r+0x12>
 801709c:	6a03      	ldr	r3, [r0, #32]
 801709e:	b90b      	cbnz	r3, 80170a4 <_putc_r+0x12>
 80170a0:	f7fd f998 	bl	80143d4 <__sinit>
 80170a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80170a6:	07d8      	lsls	r0, r3, #31
 80170a8:	d405      	bmi.n	80170b6 <_putc_r+0x24>
 80170aa:	89a3      	ldrh	r3, [r4, #12]
 80170ac:	0599      	lsls	r1, r3, #22
 80170ae:	d402      	bmi.n	80170b6 <_putc_r+0x24>
 80170b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80170b2:	f7fd fd99 	bl	8014be8 <__retarget_lock_acquire_recursive>
 80170b6:	68a3      	ldr	r3, [r4, #8]
 80170b8:	3b01      	subs	r3, #1
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	60a3      	str	r3, [r4, #8]
 80170be:	da05      	bge.n	80170cc <_putc_r+0x3a>
 80170c0:	69a2      	ldr	r2, [r4, #24]
 80170c2:	4293      	cmp	r3, r2
 80170c4:	db12      	blt.n	80170ec <_putc_r+0x5a>
 80170c6:	b2eb      	uxtb	r3, r5
 80170c8:	2b0a      	cmp	r3, #10
 80170ca:	d00f      	beq.n	80170ec <_putc_r+0x5a>
 80170cc:	6823      	ldr	r3, [r4, #0]
 80170ce:	1c5a      	adds	r2, r3, #1
 80170d0:	6022      	str	r2, [r4, #0]
 80170d2:	701d      	strb	r5, [r3, #0]
 80170d4:	b2ed      	uxtb	r5, r5
 80170d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80170d8:	07da      	lsls	r2, r3, #31
 80170da:	d405      	bmi.n	80170e8 <_putc_r+0x56>
 80170dc:	89a3      	ldrh	r3, [r4, #12]
 80170de:	059b      	lsls	r3, r3, #22
 80170e0:	d402      	bmi.n	80170e8 <_putc_r+0x56>
 80170e2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80170e4:	f7fd fd81 	bl	8014bea <__retarget_lock_release_recursive>
 80170e8:	4628      	mov	r0, r5
 80170ea:	bd70      	pop	{r4, r5, r6, pc}
 80170ec:	4629      	mov	r1, r5
 80170ee:	4622      	mov	r2, r4
 80170f0:	4630      	mov	r0, r6
 80170f2:	f7fd fa9c 	bl	801462e <__swbuf_r>
 80170f6:	4605      	mov	r5, r0
 80170f8:	e7ed      	b.n	80170d6 <_putc_r+0x44>

080170fa <__srget_r>:
 80170fa:	b538      	push	{r3, r4, r5, lr}
 80170fc:	460c      	mov	r4, r1
 80170fe:	4605      	mov	r5, r0
 8017100:	b118      	cbz	r0, 801710a <__srget_r+0x10>
 8017102:	6a03      	ldr	r3, [r0, #32]
 8017104:	b90b      	cbnz	r3, 801710a <__srget_r+0x10>
 8017106:	f7fd f965 	bl	80143d4 <__sinit>
 801710a:	4621      	mov	r1, r4
 801710c:	4628      	mov	r0, r5
 801710e:	f000 f8a3 	bl	8017258 <__srefill_r>
 8017112:	b938      	cbnz	r0, 8017124 <__srget_r+0x2a>
 8017114:	6863      	ldr	r3, [r4, #4]
 8017116:	3b01      	subs	r3, #1
 8017118:	6063      	str	r3, [r4, #4]
 801711a:	6823      	ldr	r3, [r4, #0]
 801711c:	1c5a      	adds	r2, r3, #1
 801711e:	6022      	str	r2, [r4, #0]
 8017120:	7818      	ldrb	r0, [r3, #0]
 8017122:	bd38      	pop	{r3, r4, r5, pc}
 8017124:	f04f 30ff 	mov.w	r0, #4294967295
 8017128:	e7fb      	b.n	8017122 <__srget_r+0x28>

0801712a <memmove>:
 801712a:	4288      	cmp	r0, r1
 801712c:	b510      	push	{r4, lr}
 801712e:	eb01 0402 	add.w	r4, r1, r2
 8017132:	d902      	bls.n	801713a <memmove+0x10>
 8017134:	4284      	cmp	r4, r0
 8017136:	4623      	mov	r3, r4
 8017138:	d807      	bhi.n	801714a <memmove+0x20>
 801713a:	1e43      	subs	r3, r0, #1
 801713c:	42a1      	cmp	r1, r4
 801713e:	d008      	beq.n	8017152 <memmove+0x28>
 8017140:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017144:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017148:	e7f8      	b.n	801713c <memmove+0x12>
 801714a:	4402      	add	r2, r0
 801714c:	4601      	mov	r1, r0
 801714e:	428a      	cmp	r2, r1
 8017150:	d100      	bne.n	8017154 <memmove+0x2a>
 8017152:	bd10      	pop	{r4, pc}
 8017154:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017158:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801715c:	e7f7      	b.n	801714e <memmove+0x24>

0801715e <_raise_r>:
 801715e:	291f      	cmp	r1, #31
 8017160:	b538      	push	{r3, r4, r5, lr}
 8017162:	4605      	mov	r5, r0
 8017164:	460c      	mov	r4, r1
 8017166:	d904      	bls.n	8017172 <_raise_r+0x14>
 8017168:	2316      	movs	r3, #22
 801716a:	6003      	str	r3, [r0, #0]
 801716c:	f04f 30ff 	mov.w	r0, #4294967295
 8017170:	bd38      	pop	{r3, r4, r5, pc}
 8017172:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017174:	b112      	cbz	r2, 801717c <_raise_r+0x1e>
 8017176:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801717a:	b94b      	cbnz	r3, 8017190 <_raise_r+0x32>
 801717c:	4628      	mov	r0, r5
 801717e:	f000 f853 	bl	8017228 <_getpid_r>
 8017182:	4622      	mov	r2, r4
 8017184:	4601      	mov	r1, r0
 8017186:	4628      	mov	r0, r5
 8017188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801718c:	f000 b83a 	b.w	8017204 <_kill_r>
 8017190:	2b01      	cmp	r3, #1
 8017192:	d00a      	beq.n	80171aa <_raise_r+0x4c>
 8017194:	1c59      	adds	r1, r3, #1
 8017196:	d103      	bne.n	80171a0 <_raise_r+0x42>
 8017198:	2316      	movs	r3, #22
 801719a:	6003      	str	r3, [r0, #0]
 801719c:	2001      	movs	r0, #1
 801719e:	e7e7      	b.n	8017170 <_raise_r+0x12>
 80171a0:	2100      	movs	r1, #0
 80171a2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80171a6:	4620      	mov	r0, r4
 80171a8:	4798      	blx	r3
 80171aa:	2000      	movs	r0, #0
 80171ac:	e7e0      	b.n	8017170 <_raise_r+0x12>
	...

080171b0 <raise>:
 80171b0:	4b02      	ldr	r3, [pc, #8]	@ (80171bc <raise+0xc>)
 80171b2:	4601      	mov	r1, r0
 80171b4:	6818      	ldr	r0, [r3, #0]
 80171b6:	f7ff bfd2 	b.w	801715e <_raise_r>
 80171ba:	bf00      	nop
 80171bc:	200001d4 	.word	0x200001d4

080171c0 <_fstat_r>:
 80171c0:	b538      	push	{r3, r4, r5, lr}
 80171c2:	4d07      	ldr	r5, [pc, #28]	@ (80171e0 <_fstat_r+0x20>)
 80171c4:	2300      	movs	r3, #0
 80171c6:	4604      	mov	r4, r0
 80171c8:	4608      	mov	r0, r1
 80171ca:	4611      	mov	r1, r2
 80171cc:	602b      	str	r3, [r5, #0]
 80171ce:	f7ef fd81 	bl	8006cd4 <_fstat>
 80171d2:	1c43      	adds	r3, r0, #1
 80171d4:	d102      	bne.n	80171dc <_fstat_r+0x1c>
 80171d6:	682b      	ldr	r3, [r5, #0]
 80171d8:	b103      	cbz	r3, 80171dc <_fstat_r+0x1c>
 80171da:	6023      	str	r3, [r4, #0]
 80171dc:	bd38      	pop	{r3, r4, r5, pc}
 80171de:	bf00      	nop
 80171e0:	200007b8 	.word	0x200007b8

080171e4 <_isatty_r>:
 80171e4:	b538      	push	{r3, r4, r5, lr}
 80171e6:	4d06      	ldr	r5, [pc, #24]	@ (8017200 <_isatty_r+0x1c>)
 80171e8:	2300      	movs	r3, #0
 80171ea:	4604      	mov	r4, r0
 80171ec:	4608      	mov	r0, r1
 80171ee:	602b      	str	r3, [r5, #0]
 80171f0:	f7ef fd97 	bl	8006d22 <_isatty>
 80171f4:	1c43      	adds	r3, r0, #1
 80171f6:	d102      	bne.n	80171fe <_isatty_r+0x1a>
 80171f8:	682b      	ldr	r3, [r5, #0]
 80171fa:	b103      	cbz	r3, 80171fe <_isatty_r+0x1a>
 80171fc:	6023      	str	r3, [r4, #0]
 80171fe:	bd38      	pop	{r3, r4, r5, pc}
 8017200:	200007b8 	.word	0x200007b8

08017204 <_kill_r>:
 8017204:	b538      	push	{r3, r4, r5, lr}
 8017206:	4d07      	ldr	r5, [pc, #28]	@ (8017224 <_kill_r+0x20>)
 8017208:	2300      	movs	r3, #0
 801720a:	4604      	mov	r4, r0
 801720c:	4608      	mov	r0, r1
 801720e:	4611      	mov	r1, r2
 8017210:	602b      	str	r3, [r5, #0]
 8017212:	f7ef fc77 	bl	8006b04 <_kill>
 8017216:	1c43      	adds	r3, r0, #1
 8017218:	d102      	bne.n	8017220 <_kill_r+0x1c>
 801721a:	682b      	ldr	r3, [r5, #0]
 801721c:	b103      	cbz	r3, 8017220 <_kill_r+0x1c>
 801721e:	6023      	str	r3, [r4, #0]
 8017220:	bd38      	pop	{r3, r4, r5, pc}
 8017222:	bf00      	nop
 8017224:	200007b8 	.word	0x200007b8

08017228 <_getpid_r>:
 8017228:	f7ef bc64 	b.w	8006af4 <_getpid>

0801722c <_malloc_usable_size_r>:
 801722c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017230:	1f18      	subs	r0, r3, #4
 8017232:	2b00      	cmp	r3, #0
 8017234:	bfbc      	itt	lt
 8017236:	580b      	ldrlt	r3, [r1, r0]
 8017238:	18c0      	addlt	r0, r0, r3
 801723a:	4770      	bx	lr

0801723c <lflush>:
 801723c:	898b      	ldrh	r3, [r1, #12]
 801723e:	f003 0309 	and.w	r3, r3, #9
 8017242:	2b09      	cmp	r3, #9
 8017244:	d103      	bne.n	801724e <lflush+0x12>
 8017246:	4b03      	ldr	r3, [pc, #12]	@ (8017254 <lflush+0x18>)
 8017248:	6818      	ldr	r0, [r3, #0]
 801724a:	f7fc bfa9 	b.w	80141a0 <_fflush_r>
 801724e:	2000      	movs	r0, #0
 8017250:	4770      	bx	lr
 8017252:	bf00      	nop
 8017254:	200001d4 	.word	0x200001d4

08017258 <__srefill_r>:
 8017258:	b570      	push	{r4, r5, r6, lr}
 801725a:	460c      	mov	r4, r1
 801725c:	4605      	mov	r5, r0
 801725e:	b118      	cbz	r0, 8017268 <__srefill_r+0x10>
 8017260:	6a03      	ldr	r3, [r0, #32]
 8017262:	b90b      	cbnz	r3, 8017268 <__srefill_r+0x10>
 8017264:	f7fd f8b6 	bl	80143d4 <__sinit>
 8017268:	2300      	movs	r3, #0
 801726a:	6063      	str	r3, [r4, #4]
 801726c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017270:	069e      	lsls	r6, r3, #26
 8017272:	d408      	bmi.n	8017286 <__srefill_r+0x2e>
 8017274:	0758      	lsls	r0, r3, #29
 8017276:	d445      	bmi.n	8017304 <__srefill_r+0xac>
 8017278:	06d9      	lsls	r1, r3, #27
 801727a:	d407      	bmi.n	801728c <__srefill_r+0x34>
 801727c:	2209      	movs	r2, #9
 801727e:	602a      	str	r2, [r5, #0]
 8017280:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017284:	81a3      	strh	r3, [r4, #12]
 8017286:	f04f 30ff 	mov.w	r0, #4294967295
 801728a:	bd70      	pop	{r4, r5, r6, pc}
 801728c:	071a      	lsls	r2, r3, #28
 801728e:	d50b      	bpl.n	80172a8 <__srefill_r+0x50>
 8017290:	4621      	mov	r1, r4
 8017292:	4628      	mov	r0, r5
 8017294:	f7fc ff84 	bl	80141a0 <_fflush_r>
 8017298:	2800      	cmp	r0, #0
 801729a:	d1f4      	bne.n	8017286 <__srefill_r+0x2e>
 801729c:	89a3      	ldrh	r3, [r4, #12]
 801729e:	60a0      	str	r0, [r4, #8]
 80172a0:	f023 0308 	bic.w	r3, r3, #8
 80172a4:	81a3      	strh	r3, [r4, #12]
 80172a6:	61a0      	str	r0, [r4, #24]
 80172a8:	89a3      	ldrh	r3, [r4, #12]
 80172aa:	f043 0304 	orr.w	r3, r3, #4
 80172ae:	81a3      	strh	r3, [r4, #12]
 80172b0:	6923      	ldr	r3, [r4, #16]
 80172b2:	b91b      	cbnz	r3, 80172bc <__srefill_r+0x64>
 80172b4:	4621      	mov	r1, r4
 80172b6:	4628      	mov	r0, r5
 80172b8:	f7ff feaf 	bl	801701a <__smakebuf_r>
 80172bc:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80172c0:	07b3      	lsls	r3, r6, #30
 80172c2:	d00f      	beq.n	80172e4 <__srefill_r+0x8c>
 80172c4:	2301      	movs	r3, #1
 80172c6:	4a1b      	ldr	r2, [pc, #108]	@ (8017334 <__srefill_r+0xdc>)
 80172c8:	491b      	ldr	r1, [pc, #108]	@ (8017338 <__srefill_r+0xe0>)
 80172ca:	481c      	ldr	r0, [pc, #112]	@ (801733c <__srefill_r+0xe4>)
 80172cc:	81a3      	strh	r3, [r4, #12]
 80172ce:	f7fd f8ab 	bl	8014428 <_fwalk_sglue>
 80172d2:	81a6      	strh	r6, [r4, #12]
 80172d4:	f006 0609 	and.w	r6, r6, #9
 80172d8:	2e09      	cmp	r6, #9
 80172da:	d103      	bne.n	80172e4 <__srefill_r+0x8c>
 80172dc:	4621      	mov	r1, r4
 80172de:	4628      	mov	r0, r5
 80172e0:	f7fc feda 	bl	8014098 <__sflush_r>
 80172e4:	6922      	ldr	r2, [r4, #16]
 80172e6:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80172e8:	6963      	ldr	r3, [r4, #20]
 80172ea:	6a21      	ldr	r1, [r4, #32]
 80172ec:	6022      	str	r2, [r4, #0]
 80172ee:	4628      	mov	r0, r5
 80172f0:	47b0      	blx	r6
 80172f2:	2800      	cmp	r0, #0
 80172f4:	6060      	str	r0, [r4, #4]
 80172f6:	dc17      	bgt.n	8017328 <__srefill_r+0xd0>
 80172f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80172fc:	d116      	bne.n	801732c <__srefill_r+0xd4>
 80172fe:	f043 0320 	orr.w	r3, r3, #32
 8017302:	e7bf      	b.n	8017284 <__srefill_r+0x2c>
 8017304:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017306:	2900      	cmp	r1, #0
 8017308:	d0d2      	beq.n	80172b0 <__srefill_r+0x58>
 801730a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801730e:	4299      	cmp	r1, r3
 8017310:	d002      	beq.n	8017318 <__srefill_r+0xc0>
 8017312:	4628      	mov	r0, r5
 8017314:	f7fe fae8 	bl	80158e8 <_free_r>
 8017318:	2300      	movs	r3, #0
 801731a:	6363      	str	r3, [r4, #52]	@ 0x34
 801731c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801731e:	6063      	str	r3, [r4, #4]
 8017320:	2b00      	cmp	r3, #0
 8017322:	d0c5      	beq.n	80172b0 <__srefill_r+0x58>
 8017324:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8017326:	6023      	str	r3, [r4, #0]
 8017328:	2000      	movs	r0, #0
 801732a:	e7ae      	b.n	801728a <__srefill_r+0x32>
 801732c:	2200      	movs	r2, #0
 801732e:	6062      	str	r2, [r4, #4]
 8017330:	e7a6      	b.n	8017280 <__srefill_r+0x28>
 8017332:	bf00      	nop
 8017334:	2000005c 	.word	0x2000005c
 8017338:	0801723d 	.word	0x0801723d
 801733c:	200001d8 	.word	0x200001d8

08017340 <_init>:
 8017340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017342:	bf00      	nop
 8017344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017346:	bc08      	pop	{r3}
 8017348:	469e      	mov	lr, r3
 801734a:	4770      	bx	lr

0801734c <_fini>:
 801734c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801734e:	bf00      	nop
 8017350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017352:	bc08      	pop	{r3}
 8017354:	469e      	mov	lr, r3
 8017356:	4770      	bx	lr
