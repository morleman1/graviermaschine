
stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012c80  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b3c  08012e50  08012e50  00013e50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801498c  0801498c  00016210  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801498c  0801498c  0001598c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014994  08014994  00016210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014994  08014994  00015994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801499c  0801499c  0001599c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000210  20000000  080149a0  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  20000210  08014bb0  00016210  2**2
                  ALLOC
 10 ._user_heap_stack 00038004  200006d4  08014bb0  000166d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b574  00000000  00000000  00016240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c74  00000000  00000000  000317b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b8  00000000  00000000  00035428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001201  00000000  00000000  00036ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a46d  00000000  00000000  00037ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000204c0  00000000  00000000  0006214e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a7e8  00000000  00000000  0008260e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018cdf6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007aa4  00000000  00000000  0018ce3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001948e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012e38 	.word	0x08012e38

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	08012e38 	.word	0x08012e38

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9be 	b.w	800107c <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	468e      	mov	lr, r1
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	4688      	mov	r8, r1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d14a      	bne.n	8000e2a <__udivmoddi4+0xa6>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4617      	mov	r7, r2
 8000d98:	d962      	bls.n	8000e60 <__udivmoddi4+0xdc>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	b14e      	cbz	r6, 8000db4 <__udivmoddi4+0x30>
 8000da0:	f1c6 0320 	rsb	r3, r6, #32
 8000da4:	fa01 f806 	lsl.w	r8, r1, r6
 8000da8:	fa20 f303 	lsr.w	r3, r0, r3
 8000dac:	40b7      	lsls	r7, r6
 8000dae:	ea43 0808 	orr.w	r8, r3, r8
 8000db2:	40b4      	lsls	r4, r6
 8000db4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000dc0:	0c23      	lsrs	r3, r4, #16
 8000dc2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dca:	fb01 f20c 	mul.w	r2, r1, ip
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x62>
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dd8:	f080 80ea 	bcs.w	8000fb0 <__udivmoddi4+0x22c>
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	f240 80e7 	bls.w	8000fb0 <__udivmoddi4+0x22c>
 8000de2:	3902      	subs	r1, #2
 8000de4:	443b      	add	r3, r7
 8000de6:	1a9a      	subs	r2, r3, r2
 8000de8:	b2a3      	uxth	r3, r4
 8000dea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000df2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000df6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dfa:	459c      	cmp	ip, r3
 8000dfc:	d909      	bls.n	8000e12 <__udivmoddi4+0x8e>
 8000dfe:	18fb      	adds	r3, r7, r3
 8000e00:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e04:	f080 80d6 	bcs.w	8000fb4 <__udivmoddi4+0x230>
 8000e08:	459c      	cmp	ip, r3
 8000e0a:	f240 80d3 	bls.w	8000fb4 <__udivmoddi4+0x230>
 8000e0e:	443b      	add	r3, r7
 8000e10:	3802      	subs	r0, #2
 8000e12:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e16:	eba3 030c 	sub.w	r3, r3, ip
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	b11d      	cbz	r5, 8000e26 <__udivmoddi4+0xa2>
 8000e1e:	40f3      	lsrs	r3, r6
 8000e20:	2200      	movs	r2, #0
 8000e22:	e9c5 3200 	strd	r3, r2, [r5]
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d905      	bls.n	8000e3a <__udivmoddi4+0xb6>
 8000e2e:	b10d      	cbz	r5, 8000e34 <__udivmoddi4+0xb0>
 8000e30:	e9c5 0100 	strd	r0, r1, [r5]
 8000e34:	2100      	movs	r1, #0
 8000e36:	4608      	mov	r0, r1
 8000e38:	e7f5      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e3a:	fab3 f183 	clz	r1, r3
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d146      	bne.n	8000ed0 <__udivmoddi4+0x14c>
 8000e42:	4573      	cmp	r3, lr
 8000e44:	d302      	bcc.n	8000e4c <__udivmoddi4+0xc8>
 8000e46:	4282      	cmp	r2, r0
 8000e48:	f200 8105 	bhi.w	8001056 <__udivmoddi4+0x2d2>
 8000e4c:	1a84      	subs	r4, r0, r2
 8000e4e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e52:	2001      	movs	r0, #1
 8000e54:	4690      	mov	r8, r2
 8000e56:	2d00      	cmp	r5, #0
 8000e58:	d0e5      	beq.n	8000e26 <__udivmoddi4+0xa2>
 8000e5a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e5e:	e7e2      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	f000 8090 	beq.w	8000f86 <__udivmoddi4+0x202>
 8000e66:	fab2 f682 	clz	r6, r2
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	f040 80a4 	bne.w	8000fb8 <__udivmoddi4+0x234>
 8000e70:	1a8a      	subs	r2, r1, r2
 8000e72:	0c03      	lsrs	r3, r0, #16
 8000e74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e78:	b280      	uxth	r0, r0
 8000e7a:	b2bc      	uxth	r4, r7
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e82:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e8a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d907      	bls.n	8000ea2 <__udivmoddi4+0x11e>
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x11c>
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	f200 80e0 	bhi.w	8001060 <__udivmoddi4+0x2dc>
 8000ea0:	46c4      	mov	ip, r8
 8000ea2:	1a9b      	subs	r3, r3, r2
 8000ea4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ea8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000eac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000eb0:	fb02 f404 	mul.w	r4, r2, r4
 8000eb4:	429c      	cmp	r4, r3
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0x144>
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	f102 30ff 	add.w	r0, r2, #4294967295
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0x142>
 8000ec0:	429c      	cmp	r4, r3
 8000ec2:	f200 80ca 	bhi.w	800105a <__udivmoddi4+0x2d6>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	1b1b      	subs	r3, r3, r4
 8000eca:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ece:	e7a5      	b.n	8000e1c <__udivmoddi4+0x98>
 8000ed0:	f1c1 0620 	rsb	r6, r1, #32
 8000ed4:	408b      	lsls	r3, r1
 8000ed6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eda:	431f      	orrs	r7, r3
 8000edc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ee0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ee4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ee8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eec:	4323      	orrs	r3, r4
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	fa1f fc87 	uxth.w	ip, r7
 8000ef6:	fbbe f0f9 	udiv	r0, lr, r9
 8000efa:	0c1c      	lsrs	r4, r3, #16
 8000efc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f00:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f04:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f0e:	d909      	bls.n	8000f24 <__udivmoddi4+0x1a0>
 8000f10:	193c      	adds	r4, r7, r4
 8000f12:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f16:	f080 809c 	bcs.w	8001052 <__udivmoddi4+0x2ce>
 8000f1a:	45a6      	cmp	lr, r4
 8000f1c:	f240 8099 	bls.w	8001052 <__udivmoddi4+0x2ce>
 8000f20:	3802      	subs	r0, #2
 8000f22:	443c      	add	r4, r7
 8000f24:	eba4 040e 	sub.w	r4, r4, lr
 8000f28:	fa1f fe83 	uxth.w	lr, r3
 8000f2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f30:	fb09 4413 	mls	r4, r9, r3, r4
 8000f34:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f38:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f3c:	45a4      	cmp	ip, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1ce>
 8000f40:	193c      	adds	r4, r7, r4
 8000f42:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f46:	f080 8082 	bcs.w	800104e <__udivmoddi4+0x2ca>
 8000f4a:	45a4      	cmp	ip, r4
 8000f4c:	d97f      	bls.n	800104e <__udivmoddi4+0x2ca>
 8000f4e:	3b02      	subs	r3, #2
 8000f50:	443c      	add	r4, r7
 8000f52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f56:	eba4 040c 	sub.w	r4, r4, ip
 8000f5a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f5e:	4564      	cmp	r4, ip
 8000f60:	4673      	mov	r3, lr
 8000f62:	46e1      	mov	r9, ip
 8000f64:	d362      	bcc.n	800102c <__udivmoddi4+0x2a8>
 8000f66:	d05f      	beq.n	8001028 <__udivmoddi4+0x2a4>
 8000f68:	b15d      	cbz	r5, 8000f82 <__udivmoddi4+0x1fe>
 8000f6a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f6e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f72:	fa04 f606 	lsl.w	r6, r4, r6
 8000f76:	fa22 f301 	lsr.w	r3, r2, r1
 8000f7a:	431e      	orrs	r6, r3
 8000f7c:	40cc      	lsrs	r4, r1
 8000f7e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f82:	2100      	movs	r1, #0
 8000f84:	e74f      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000f86:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f8a:	0c01      	lsrs	r1, r0, #16
 8000f8c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f90:	b280      	uxth	r0, r0
 8000f92:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f96:	463b      	mov	r3, r7
 8000f98:	4638      	mov	r0, r7
 8000f9a:	463c      	mov	r4, r7
 8000f9c:	46b8      	mov	r8, r7
 8000f9e:	46be      	mov	lr, r7
 8000fa0:	2620      	movs	r6, #32
 8000fa2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000fa6:	eba2 0208 	sub.w	r2, r2, r8
 8000faa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000fae:	e766      	b.n	8000e7e <__udivmoddi4+0xfa>
 8000fb0:	4601      	mov	r1, r0
 8000fb2:	e718      	b.n	8000de6 <__udivmoddi4+0x62>
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	e72c      	b.n	8000e12 <__udivmoddi4+0x8e>
 8000fb8:	f1c6 0220 	rsb	r2, r6, #32
 8000fbc:	fa2e f302 	lsr.w	r3, lr, r2
 8000fc0:	40b7      	lsls	r7, r6
 8000fc2:	40b1      	lsls	r1, r6
 8000fc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fd2:	b2bc      	uxth	r4, r7
 8000fd4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb08 f904 	mul.w	r9, r8, r4
 8000fe2:	40b0      	lsls	r0, r6
 8000fe4:	4589      	cmp	r9, r1
 8000fe6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fea:	b280      	uxth	r0, r0
 8000fec:	d93e      	bls.n	800106c <__udivmoddi4+0x2e8>
 8000fee:	1879      	adds	r1, r7, r1
 8000ff0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ff4:	d201      	bcs.n	8000ffa <__udivmoddi4+0x276>
 8000ff6:	4589      	cmp	r9, r1
 8000ff8:	d81f      	bhi.n	800103a <__udivmoddi4+0x2b6>
 8000ffa:	eba1 0109 	sub.w	r1, r1, r9
 8000ffe:	fbb1 f9fe 	udiv	r9, r1, lr
 8001002:	fb09 f804 	mul.w	r8, r9, r4
 8001006:	fb0e 1119 	mls	r1, lr, r9, r1
 800100a:	b292      	uxth	r2, r2
 800100c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001010:	4542      	cmp	r2, r8
 8001012:	d229      	bcs.n	8001068 <__udivmoddi4+0x2e4>
 8001014:	18ba      	adds	r2, r7, r2
 8001016:	f109 31ff 	add.w	r1, r9, #4294967295
 800101a:	d2c4      	bcs.n	8000fa6 <__udivmoddi4+0x222>
 800101c:	4542      	cmp	r2, r8
 800101e:	d2c2      	bcs.n	8000fa6 <__udivmoddi4+0x222>
 8001020:	f1a9 0102 	sub.w	r1, r9, #2
 8001024:	443a      	add	r2, r7
 8001026:	e7be      	b.n	8000fa6 <__udivmoddi4+0x222>
 8001028:	45f0      	cmp	r8, lr
 800102a:	d29d      	bcs.n	8000f68 <__udivmoddi4+0x1e4>
 800102c:	ebbe 0302 	subs.w	r3, lr, r2
 8001030:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001034:	3801      	subs	r0, #1
 8001036:	46e1      	mov	r9, ip
 8001038:	e796      	b.n	8000f68 <__udivmoddi4+0x1e4>
 800103a:	eba7 0909 	sub.w	r9, r7, r9
 800103e:	4449      	add	r1, r9
 8001040:	f1a8 0c02 	sub.w	ip, r8, #2
 8001044:	fbb1 f9fe 	udiv	r9, r1, lr
 8001048:	fb09 f804 	mul.w	r8, r9, r4
 800104c:	e7db      	b.n	8001006 <__udivmoddi4+0x282>
 800104e:	4673      	mov	r3, lr
 8001050:	e77f      	b.n	8000f52 <__udivmoddi4+0x1ce>
 8001052:	4650      	mov	r0, sl
 8001054:	e766      	b.n	8000f24 <__udivmoddi4+0x1a0>
 8001056:	4608      	mov	r0, r1
 8001058:	e6fd      	b.n	8000e56 <__udivmoddi4+0xd2>
 800105a:	443b      	add	r3, r7
 800105c:	3a02      	subs	r2, #2
 800105e:	e733      	b.n	8000ec8 <__udivmoddi4+0x144>
 8001060:	f1ac 0c02 	sub.w	ip, ip, #2
 8001064:	443b      	add	r3, r7
 8001066:	e71c      	b.n	8000ea2 <__udivmoddi4+0x11e>
 8001068:	4649      	mov	r1, r9
 800106a:	e79c      	b.n	8000fa6 <__udivmoddi4+0x222>
 800106c:	eba1 0109 	sub.w	r1, r1, r9
 8001070:	46c4      	mov	ip, r8
 8001072:	fbb1 f9fe 	udiv	r9, r1, lr
 8001076:	fb09 f804 	mul.w	r8, r9, r4
 800107a:	e7c4      	b.n	8001006 <__udivmoddi4+0x282>

0800107c <__aeabi_idiv0>:
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop

08001080 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001084:	f3bf 8f4f 	dsb	sy
}
 8001088:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800108a:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <__NVIC_SystemReset+0x24>)
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001092:	4904      	ldr	r1, [pc, #16]	@ (80010a4 <__NVIC_SystemReset+0x24>)
 8001094:	4b04      	ldr	r3, [pc, #16]	@ (80010a8 <__NVIC_SystemReset+0x28>)
 8001096:	4313      	orrs	r3, r2
 8001098:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800109a:	f3bf 8f4f 	dsb	sy
}
 800109e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <__NVIC_SystemReset+0x20>
 80010a4:	e000ed00 	.word	0xe000ed00
 80010a8:	05fa0004 	.word	0x05fa0004

080010ac <ControlSequenceParserConsume>:
#endif

// --------------------------------------------------------------------------------------------------------------------
cspTYPE ControlSequenceParserConsume( char input, cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
#define CHECK_FOR_OVERFLOW(x) do { if ( ((x)+1) > s->maxLength ) \
	                          { s->type = ctrlOVERFLOW; s->length = 0; s->state = ctrlpsIDLE_DETECT; \
	                          return csptCONTROL; } } while(0)

	switch (s->state)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b04      	cmp	r3, #4
 80010be:	f200 8131 	bhi.w	8001324 <ControlSequenceParserConsume+0x278>
 80010c2:	a201      	add	r2, pc, #4	@ (adr r2, 80010c8 <ControlSequenceParserConsume+0x1c>)
 80010c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c8:	080010dd 	.word	0x080010dd
 80010cc:	08001133 	.word	0x08001133
 80010d0:	08001207 	.word	0x08001207
 80010d4:	08001271 	.word	0x08001271
 80010d8:	080012bb 	.word	0x080012bb
	{
	case ctrlpsIDLE_DETECT:
		// default start condition
		s->buff[0] = input;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	691b      	ldr	r3, [r3, #16]
 80010e0:	79fa      	ldrb	r2, [r7, #7]
 80010e2:	701a      	strb	r2, [r3, #0]
		s->buff[1] = ctrlC0_NUL;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	3301      	adds	r3, #1
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
		s->ptr = 0;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	2200      	movs	r2, #0
 80010f2:	605a      	str	r2, [r3, #4]
		s->length = 1;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	2201      	movs	r2, #1
 80010f8:	609a      	str	r2, [r3, #8]

		// escape code takes more than one byte in total length
		if (input == ctrlC0_ESC)
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	2b1b      	cmp	r3, #27
 80010fe:	d10a      	bne.n	8001116 <ControlSequenceParserConsume+0x6a>
		{
			s->state = ctrlpsSTART_C1;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	2201      	movs	r2, #1
 8001104:	701a      	strb	r2, [r3, #0]
			s->ptr = 1;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	2201      	movs	r2, #1
 800110a:	605a      	str	r2, [r3, #4]
			s->type = ctrlC0_ESC;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	221b      	movs	r2, #27
 8001110:	805a      	strh	r2, [r3, #2]
			return csptNONE;
 8001112:	2300      	movs	r3, #0
 8001114:	e107      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		}

		// single length control code
		else if ( ( /* input >= ctrlC0_NUL &&*/ (unsigned char)input <= (unsigned char)ctrlC0_US ) ||
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2b1f      	cmp	r3, #31
 800111a:	d902      	bls.n	8001122 <ControlSequenceParserConsume+0x76>
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001120:	d105      	bne.n	800112e <ControlSequenceParserConsume+0x82>
				  ( input == ctrlC0_DEL ) )
	    {
			s->type = input;
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	b29a      	uxth	r2, r3
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	805a      	strh	r2, [r3, #2]
			return csptCONTROL;
 800112a:	2302      	movs	r3, #2
 800112c:	e0fb      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
	    }

		// only a character, nothing else
		return csptCHARACTER;
 800112e:	2301      	movs	r3, #1
 8001130:	e0f9      	b.n	8001326 <ControlSequenceParserConsume+0x27a>

	case ctrlpsSTART_C1:

		// now we need to check the type of escape sequence
		s->buff[s->ptr++] = input;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	691a      	ldr	r2, [r3, #16]
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	1c58      	adds	r0, r3, #1
 800113c:	6839      	ldr	r1, [r7, #0]
 800113e:	6048      	str	r0, [r1, #4]
 8001140:	4413      	add	r3, r2
 8001142:	79fa      	ldrb	r2, [r7, #7]
 8001144:	701a      	strb	r2, [r3, #0]
		CHECK_FOR_OVERFLOW(s->ptr);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	1c5a      	adds	r2, r3, #1
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	429a      	cmp	r2, r3
 8001152:	d90b      	bls.n	800116c <ControlSequenceParserConsume+0xc0>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	f241 0201 	movw	r2, #4097	@ 0x1001
 800115a:	805a      	strh	r2, [r3, #2]
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
 8001168:	2302      	movs	r3, #2
 800116a:	e0dc      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		if ( input == '[' )
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	2b5b      	cmp	r3, #91	@ 0x5b
 8001170:	d107      	bne.n	8001182 <ControlSequenceParserConsume+0xd6>
		{
			s->type = ctrlC1_CSI;
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8001178:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsHANDLE_CSI;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	2202      	movs	r2, #2
 800117e:	701a      	strb	r2, [r3, #0]
 8001180:	e03f      	b.n	8001202 <ControlSequenceParserConsume+0x156>
		}
		else if ( input == 'X' )
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b58      	cmp	r3, #88	@ 0x58
 8001186:	d107      	bne.n	8001198 <ControlSequenceParserConsume+0xec>
		{
			s->type = ctrlC1_SOS;
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	f240 1203 	movw	r2, #259	@ 0x103
 800118e:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsHANDLE_ST_1;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	2203      	movs	r2, #3
 8001194:	701a      	strb	r2, [r3, #0]
 8001196:	e034      	b.n	8001202 <ControlSequenceParserConsume+0x156>
		}
		else if ( input == '^' )
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	2b5e      	cmp	r3, #94	@ 0x5e
 800119c:	d107      	bne.n	80011ae <ControlSequenceParserConsume+0x102>
		{
			s->type = ctrlC1_PM;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011a4:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsHANDLE_ST_1;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	2203      	movs	r2, #3
 80011aa:	701a      	strb	r2, [r3, #0]
 80011ac:	e029      	b.n	8001202 <ControlSequenceParserConsume+0x156>
		}
		else if ( input == '_' )
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	2b5f      	cmp	r3, #95	@ 0x5f
 80011b2:	d107      	bne.n	80011c4 <ControlSequenceParserConsume+0x118>
		{
			s->type = ctrlC1_APC;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	f240 1205 	movw	r2, #261	@ 0x105
 80011ba:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsHANDLE_ST_1;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	2203      	movs	r2, #3
 80011c0:	701a      	strb	r2, [r3, #0]
 80011c2:	e01e      	b.n	8001202 <ControlSequenceParserConsume+0x156>
		}
		else if ( input == '\\' )
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	2b5c      	cmp	r3, #92	@ 0x5c
 80011c8:	d107      	bne.n	80011da <ControlSequenceParserConsume+0x12e>
		{
			s->type = ctrlC1_ST;
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	f44f 7283 	mov.w	r2, #262	@ 0x106
 80011d0:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsHANDLE_ST_1;
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	2203      	movs	r2, #3
 80011d6:	701a      	strb	r2, [r3, #0]
 80011d8:	e013      	b.n	8001202 <ControlSequenceParserConsume+0x156>
		}
		else if ( input == 'P' )
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2b50      	cmp	r3, #80	@ 0x50
 80011de:	d107      	bne.n	80011f0 <ControlSequenceParserConsume+0x144>
		{
			s->type = ctrlC1_DCS;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	f240 1201 	movw	r2, #257	@ 0x101
 80011e6:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsHANDLE_ST_1;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	2203      	movs	r2, #3
 80011ec:	701a      	strb	r2, [r3, #0]
 80011ee:	e008      	b.n	8001202 <ControlSequenceParserConsume+0x156>
		}
		else
		{
			s->type = ctrlUNKNOWN;
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011f6:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsIDLE_DETECT;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
			return csptCONTROL;
 80011fe:	2302      	movs	r3, #2
 8001200:	e091      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		}
		return csptNONE;
 8001202:	2300      	movs	r3, #0
 8001204:	e08f      	b.n	8001326 <ControlSequenceParserConsume+0x27a>

	// data handling and termination of Control Sequence Introducer
	case ctrlpsHANDLE_CSI:
	{
		s->buff[s->ptr++] = input;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	691a      	ldr	r2, [r3, #16]
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	1c58      	adds	r0, r3, #1
 8001210:	6839      	ldr	r1, [r7, #0]
 8001212:	6048      	str	r0, [r1, #4]
 8001214:	4413      	add	r3, r2
 8001216:	79fa      	ldrb	r2, [r7, #7]
 8001218:	701a      	strb	r2, [r3, #0]
		CHECK_FOR_OVERFLOW(s->ptr);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	1c5a      	adds	r2, r3, #1
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	429a      	cmp	r2, r3
 8001226:	d90b      	bls.n	8001240 <ControlSequenceParserConsume+0x194>
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	f241 0201 	movw	r2, #4097	@ 0x1001
 800122e:	805a      	strh	r2, [r3, #2]
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
 800123c:	2302      	movs	r3, #2
 800123e:	e072      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		if ( input >= 0x40 && input <= 0x7E )
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	2b3f      	cmp	r3, #63	@ 0x3f
 8001244:	d912      	bls.n	800126c <ControlSequenceParserConsume+0x1c0>
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	2b7e      	cmp	r3, #126	@ 0x7e
 800124a:	d80f      	bhi.n	800126c <ControlSequenceParserConsume+0x1c0>
		{
			s->buff[s->ptr] = ctrlC0_NUL;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	691a      	ldr	r2, [r3, #16]
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	4413      	add	r3, r2
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
			s->length = s->ptr;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	609a      	str	r2, [r3, #8]
			s->state = ctrlpsIDLE_DETECT;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
			return csptCONTROL;
 8001268:	2302      	movs	r3, #2
 800126a:	e05c      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		}
		return csptNONE;
 800126c:	2300      	movs	r3, #0
 800126e:	e05a      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
	}

	// first part of ST terminator
	case ctrlpsHANDLE_ST_1:
	{
		s->buff[s->ptr++] = input;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	691a      	ldr	r2, [r3, #16]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	1c58      	adds	r0, r3, #1
 800127a:	6839      	ldr	r1, [r7, #0]
 800127c:	6048      	str	r0, [r1, #4]
 800127e:	4413      	add	r3, r2
 8001280:	79fa      	ldrb	r2, [r7, #7]
 8001282:	701a      	strb	r2, [r3, #0]
		CHECK_FOR_OVERFLOW(s->ptr);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	1c5a      	adds	r2, r3, #1
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	429a      	cmp	r2, r3
 8001290:	d90b      	bls.n	80012aa <ControlSequenceParserConsume+0x1fe>
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	f241 0201 	movw	r2, #4097	@ 0x1001
 8001298:	805a      	strh	r2, [r3, #2]
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
 80012a6:	2302      	movs	r3, #2
 80012a8:	e03d      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		if ( input == '\033' )
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b1b      	cmp	r3, #27
 80012ae:	d102      	bne.n	80012b6 <ControlSequenceParserConsume+0x20a>
		{
			s->state = ctrlpsHANDLE_ST_2;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	2204      	movs	r2, #4
 80012b4:	701a      	strb	r2, [r3, #0]
		}
		return csptNONE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e035      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
	}
	// second part of ST terminator
	case ctrlpsHANDLE_ST_2:
	{
		s->buff[s->ptr++] = input;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	691a      	ldr	r2, [r3, #16]
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	1c58      	adds	r0, r3, #1
 80012c4:	6839      	ldr	r1, [r7, #0]
 80012c6:	6048      	str	r0, [r1, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	79fa      	ldrb	r2, [r7, #7]
 80012cc:	701a      	strb	r2, [r3, #0]
		CHECK_FOR_OVERFLOW(s->ptr);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	1c5a      	adds	r2, r3, #1
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d90b      	bls.n	80012f4 <ControlSequenceParserConsume+0x248>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	f241 0201 	movw	r2, #4097	@ 0x1001
 80012e2:	805a      	strh	r2, [r3, #2]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
 80012f0:	2302      	movs	r3, #2
 80012f2:	e018      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		if ( input != '\\' )
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	2b5c      	cmp	r3, #92	@ 0x5c
 80012f8:	d004      	beq.n	8001304 <ControlSequenceParserConsume+0x258>
		{
			s->state = ctrlpsHANDLE_ST_1;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	2203      	movs	r2, #3
 80012fe:	701a      	strb	r2, [r3, #0]
			s->buff[s->ptr] = ctrlC0_NUL;
			s->length = s->ptr;
			s->state = ctrlpsIDLE_DETECT;
			return csptCONTROL;
		}
		return csptNONE;
 8001300:	2300      	movs	r3, #0
 8001302:	e010      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
			s->buff[s->ptr] = ctrlC0_NUL;
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	691a      	ldr	r2, [r3, #16]
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	4413      	add	r3, r2
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]
			s->length = s->ptr;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	609a      	str	r2, [r3, #8]
			s->state = ctrlpsIDLE_DETECT;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
			return csptCONTROL;
 8001320:	2302      	movs	r3, #2
 8001322:	e000      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
	}
	default:
		return csptCHARACTER;
 8001324:	2301      	movs	r3, #1
	}
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop

08001334 <ProcessCommand>:

// --------------------------------------------------------------------------------------------------------------------
static int ProcessCommand(char* command, int cmdLen, char** args, int numArgs, cmdState_t* c, int* isAlias, char* inputBuffer, int inbuffsz)
// --------------------------------------------------------------------------------------------------------------------
{
 8001334:	b590      	push	{r4, r7, lr}
 8001336:	b0d9      	sub	sp, #356	@ 0x164
 8001338:	af00      	add	r7, sp, #0
 800133a:	f507 74b0 	add.w	r4, r7, #352	@ 0x160
 800133e:	f5a4 74aa 	sub.w	r4, r4, #340	@ 0x154
 8001342:	6020      	str	r0, [r4, #0]
 8001344:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8001348:	f5a0 70ac 	sub.w	r0, r0, #344	@ 0x158
 800134c:	6001      	str	r1, [r0, #0]
 800134e:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8001352:	f5a1 71ae 	sub.w	r1, r1, #348	@ 0x15c
 8001356:	600a      	str	r2, [r1, #0]
 8001358:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 800135c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001360:	6013      	str	r3, [r2, #0]
	// here we have to look for a matching entry and therefore we have to search linearly through
	// our linked list of command entries
	xSemaphoreTakeRecursive( c->lockGuard, -1 );
 8001362:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f04f 31ff 	mov.w	r1, #4294967295
 800136c:	4618      	mov	r0, r3
 800136e:	f009 fd47 	bl	800ae00 <xQueueTakeMutexRecursive>
	cmdEntry_t* pElement = c->commands.lh_first;
 8001372:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
	int found = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
	int result = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
	while ( pElement != NULL )
 8001388:	e17b      	b.n	8001682 <ProcessCommand+0x34e>
	{
		// if string compare result and determined length match, then this must be the function
		if ( strncmp(command, pElement->content.cmd, cmdLen) == 0 && cmdLen == pElement->content.cmdLen )
 800138a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800138e:	f103 0108 	add.w	r1, r3, #8
 8001392:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001396:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80013a0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80013a4:	6818      	ldr	r0, [r3, #0]
 80013a6:	f00e ffce 	bl	8010346 <strncmp>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f040 8162 	bne.w	8001676 <ProcessCommand+0x342>
 80013b2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80013b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b8:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 80013bc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	f040 8157 	bne.w	8001676 <ProcessCommand+0x342>
		{
			found = 1;
 80013c8:	2301      	movs	r3, #1
 80013ca:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
			if ( pElement->content.isAlias )
 80013ce:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80013d2:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 8139 	beq.w	800164e <ProcessCommand+0x31a>
			{
				*isAlias = 1;
 80013dc:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80013e0:	2201      	movs	r2, #1
 80013e2:	601a      	str	r2, [r3, #0]
				// first we have to copy the arguments behind the command (as long as we have enough space)
				int currentArg = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
				int stillCopiedLength = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
				char tempInBuff[CONSOLE_LINE_SIZE + 1];
				char* tempArgs[CONSOLE_MAX_NUM_ARGS];
				memset(tempArgs, 0, sizeof(tempArgs));
 80013f0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80013f4:	22b0      	movs	r2, #176	@ 0xb0
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f00e ff8f 	bl	801031c <memset>
				for (int i = 0; i < numArgs; i++)
 80013fe:	2300      	movs	r3, #0
 8001400:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8001404:	e01d      	b.n	8001442 <ProcessCommand+0x10e>
				{
					tempArgs[i] = args[i] - inputBuffer + tempInBuff;
 8001406:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8001410:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001414:	6812      	ldr	r2, [r2, #0]
 8001416:	4413      	add	r3, r2
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	461a      	mov	r2, r3
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	441a      	add	r2, r3
 8001428:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001432:	443b      	add	r3, r7
 8001434:	f843 2cd0 	str.w	r2, [r3, #-208]
				for (int i = 0; i < numArgs; i++)
 8001438:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800143c:	3301      	adds	r3, #1
 800143e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8001442:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001446:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800144a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	429a      	cmp	r2, r3
 8001452:	dbd8      	blt.n	8001406 <ProcessCommand+0xd2>
				}
				memcpy(tempInBuff, inputBuffer, inbuffsz);
 8001454:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	f8d7 1178 	ldr.w	r1, [r7, #376]	@ 0x178
 8001460:	4618      	mov	r0, r3
 8001462:	f00f f8c1 	bl	80105e8 <memcpy>
				while (numArgs > 0)
 8001466:	e0b2      	b.n	80015ce <ProcessCommand+0x29a>
				{
					// all args are NULL-terminated so we can safely use strlen
					int argCopyLen = strlen(tempArgs[currentArg]);
 8001468:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001472:	443b      	add	r3, r7
 8001474:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 8001478:	4618      	mov	r0, r3
 800147a:	f7fe ff29 	bl	80002d0 <strlen>
 800147e:	4603      	mov	r3, r0
 8001480:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
					int additionalTermination = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
					if (*(tempArgs[currentArg] - 1) == '"' || tempArgs[currentArg] == NULL)
 800148a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001494:	443b      	add	r3, r7
 8001496:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 800149a:	3b01      	subs	r3, #1
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b22      	cmp	r3, #34	@ 0x22
 80014a0:	d009      	beq.n	80014b6 <ProcessCommand+0x182>
 80014a2:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80014ac:	443b      	add	r3, r7
 80014ae:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <ProcessCommand+0x188>
					{
						additionalTermination = 1;
 80014b6:	2301      	movs	r3, #1
 80014b8:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
					}
					if ((argCopyLen + pElement->content.helpLen + stillCopiedLength + 1) > inbuffsz)
 80014bc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80014c0:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 80014c4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80014c8:	441a      	add	r2, r3
 80014ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80014ce:	4413      	add	r3, r2
 80014d0:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dc0d      	bgt.n	80014f4 <ProcessCommand+0x1c0>
					{
						printf("\033[31mAlias Argument Substitution Overflow\033[0m");
 80014d8:	487b      	ldr	r0, [pc, #492]	@ (80016c8 <ProcessCommand+0x394>)
 80014da:	f00e fcc9 	bl	800fe70 <iprintf>
						result = -1;
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
 80014e2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
						*isAlias = 0;
 80014e6:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
						return result;
 80014ee:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80014f2:	e0e4      	b.n	80016be <ProcessCommand+0x38a>
					}
					if (additionalTermination)
 80014f4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d011      	beq.n	8001520 <ProcessCommand+0x1ec>
					{
						inputBuffer[pElement->content.helpLen + stillCopiedLength + 1] = '"';
 80014fc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001500:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 8001504:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001508:	4413      	add	r3, r2
 800150a:	3301      	adds	r3, #1
 800150c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001510:	4413      	add	r3, r2
 8001512:	2222      	movs	r2, #34	@ 0x22
 8001514:	701a      	strb	r2, [r3, #0]
						stillCopiedLength += 1;
 8001516:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800151a:	3301      	adds	r3, #1
 800151c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
					}
					memcpy(&inputBuffer[pElement->content.helpLen + stillCopiedLength + 1], tempArgs[currentArg], argCopyLen);
 8001520:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001524:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 8001528:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800152c:	4413      	add	r3, r2
 800152e:	3301      	adds	r3, #1
 8001530:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001534:	18d0      	adds	r0, r2, r3
 8001536:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001540:	443b      	add	r3, r7
 8001542:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 8001546:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 800154a:	4619      	mov	r1, r3
 800154c:	f00f f84c 	bl	80105e8 <memcpy>
					stillCopiedLength += argCopyLen;
 8001550:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001554:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001558:	4413      	add	r3, r2
 800155a:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
					if (additionalTermination)
 800155e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001562:	2b00      	cmp	r3, #0
 8001564:	d011      	beq.n	800158a <ProcessCommand+0x256>
					{
						inputBuffer[pElement->content.helpLen + stillCopiedLength + 1] = '"';
 8001566:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800156a:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 800156e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001572:	4413      	add	r3, r2
 8001574:	3301      	adds	r3, #1
 8001576:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800157a:	4413      	add	r3, r2
 800157c:	2222      	movs	r2, #34	@ 0x22
 800157e:	701a      	strb	r2, [r3, #0]
						stillCopiedLength += 1;
 8001580:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001584:	3301      	adds	r3, #1
 8001586:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
					}
					inputBuffer[pElement->content.helpLen + stillCopiedLength + 1] = ' ';
 800158a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800158e:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 8001592:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001596:	4413      	add	r3, r2
 8001598:	3301      	adds	r3, #1
 800159a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800159e:	4413      	add	r3, r2
 80015a0:	2220      	movs	r2, #32
 80015a2:	701a      	strb	r2, [r3, #0]
					stillCopiedLength += 1;
 80015a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80015a8:	3301      	adds	r3, #1
 80015aa:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
					numArgs -= 1;
 80015ae:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80015b2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80015b6:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 80015ba:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80015be:	6812      	ldr	r2, [r2, #0]
 80015c0:	3a01      	subs	r2, #1
 80015c2:	601a      	str	r2, [r3, #0]
					currentArg += 1;
 80015c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80015c8:	3301      	adds	r3, #1
 80015ca:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
				while (numArgs > 0)
 80015ce:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80015d2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f73f af45 	bgt.w	8001468 <ProcessCommand+0x134>
				}

				memcpy(inputBuffer, pElement->content.help, pElement->content.helpLen);
 80015de:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80015e2:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 80015e6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80015ea:	f8d3 3254 	ldr.w	r3, [r3, #596]	@ 0x254
 80015ee:	461a      	mov	r2, r3
 80015f0:	f8d7 0178 	ldr.w	r0, [r7, #376]	@ 0x178
 80015f4:	f00e fff8 	bl	80105e8 <memcpy>
				memset(&inputBuffer[pElement->content.helpLen+ stillCopiedLength], 0, inbuffsz-(pElement->content.helpLen+stillCopiedLength));
 80015f8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80015fc:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 8001600:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001604:	4413      	add	r3, r2
 8001606:	461a      	mov	r2, r3
 8001608:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800160c:	1898      	adds	r0, r3, r2
 800160e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001612:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 8001616:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800161a:	4413      	add	r3, r2
 800161c:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	461a      	mov	r2, r3
 8001624:	2100      	movs	r1, #0
 8001626:	f00e fe79 	bl	801031c <memset>
				if (currentArg != 0) inputBuffer[pElement->content.helpLen] = ' ';
 800162a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800162e:	2b00      	cmp	r3, #0
 8001630:	d009      	beq.n	8001646 <ProcessCommand+0x312>
 8001632:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001636:	f8d3 3254 	ldr.w	r3, [r3, #596]	@ 0x254
 800163a:	461a      	mov	r2, r3
 800163c:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001640:	4413      	add	r3, r2
 8001642:	2220      	movs	r2, #32
 8001644:	701a      	strb	r2, [r3, #0]
				result = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
			}
			else
			{
				result = pElement->content.func(numArgs, args, pElement->content.ctx);
			}
			break;
 800164c:	e01e      	b.n	800168c <ProcessCommand+0x358>
				result = pElement->content.func(numArgs, args, pElement->content.ctx);
 800164e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8001658:	6852      	ldr	r2, [r2, #4]
 800165a:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 800165e:	f5a1 71ae 	sub.w	r1, r1, #348	@ 0x15c
 8001662:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8001666:	f5a0 70b0 	sub.w	r0, r0, #352	@ 0x160
 800166a:	6809      	ldr	r1, [r1, #0]
 800166c:	6800      	ldr	r0, [r0, #0]
 800166e:	4798      	blx	r3
 8001670:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
			break;
 8001674:	e00a      	b.n	800168c <ProcessCommand+0x358>
		}

		pElement = pElement->navigate.le_next;
 8001676:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800167a:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 800167e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
	while ( pElement != NULL )
 8001682:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001686:	2b00      	cmp	r3, #0
 8001688:	f47f ae7f 	bne.w	800138a <ProcessCommand+0x56>
	}

	xSemaphoreGiveRecursive( c->lockGuard );
 800168c:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f009 fb78 	bl	800ad88 <xQueueGiveMutexRecursive>
	if ( found == 0 )
 8001698:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800169c:	2b00      	cmp	r3, #0
 800169e:	d10c      	bne.n	80016ba <ProcessCommand+0x386>
	{
		printf("\033[31mInvalid command\033[0m");
 80016a0:	480a      	ldr	r0, [pc, #40]	@ (80016cc <ProcessCommand+0x398>)
 80016a2:	f00e fbe5 	bl	800fe70 <iprintf>
		fflush(stdout);
 80016a6:	4b0a      	ldr	r3, [pc, #40]	@ (80016d0 <ProcessCommand+0x39c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f00e fa9d 	bl	800fbec <fflush>
		result = -1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
	}
	return result;
 80016ba:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
}
 80016be:	4618      	mov	r0, r3
 80016c0:	f507 77b2 	add.w	r7, r7, #356	@ 0x164
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd90      	pop	{r4, r7, pc}
 80016c8:	08012e50 	.word	0x08012e50
 80016cc:	08012e80 	.word	0x08012e80
 80016d0:	200001c0 	.word	0x200001c0

080016d4 <TransformAndProcessTheCommand>:

// --------------------------------------------------------------------------------------------------------------------
static int TransformAndProcessTheCommand(char* lineBuff, int line_size, cmdState_t* cState)
// --------------------------------------------------------------------------------------------------------------------
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b0be      	sub	sp, #248	@ 0xf8
 80016d8:	af04      	add	r7, sp, #16
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
	int numArgs;
	int isAlias;

	char* args[CONSOLE_MAX_NUM_ARGS];
	char* command;
	char* strtokNewIndex = NULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

restart:
	startIdx = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	endIdx = CONSOLE_LINE_SIZE - 1;
 80016ec:	2377      	movs	r3, #119	@ 0x77
 80016ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	numArgs = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	isAlias = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	command = NULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

	memset(args, 0, sizeof(args));
 8001704:	f107 0310 	add.w	r3, r7, #16
 8001708:	22b0      	movs	r2, #176	@ 0xb0
 800170a:	2100      	movs	r1, #0
 800170c:	4618      	mov	r0, r3
 800170e:	f00e fe05 	bl	801031c <memset>

	if ( lineBuff[startIdx] == '\0' ) return 0;
 8001712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	4413      	add	r3, r2
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d10d      	bne.n	800173c <TransformAndProcessTheCommand+0x68>
 8001720:	2300      	movs	r3, #0
 8001722:	e118      	b.n	8001956 <TransformAndProcessTheCommand+0x282>

	while(startIdx < line_size)
	{
		if ( lineBuff[startIdx] != ' ' ) break;
 8001724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	4413      	add	r3, r2
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b20      	cmp	r3, #32
 8001730:	d10a      	bne.n	8001748 <TransformAndProcessTheCommand+0x74>
		startIdx += 1;
 8001732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001736:	3301      	adds	r3, #1
 8001738:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	while(startIdx < line_size)
 800173c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	429a      	cmp	r2, r3
 8001744:	dbee      	blt.n	8001724 <TransformAndProcessTheCommand+0x50>
 8001746:	e014      	b.n	8001772 <TransformAndProcessTheCommand+0x9e>
		if ( lineBuff[startIdx] != ' ' ) break;
 8001748:	bf00      	nop
	}

	while(endIdx > 0)
 800174a:	e012      	b.n	8001772 <TransformAndProcessTheCommand+0x9e>
	{
		if ( lineBuff[endIdx] != '\0' && lineBuff[endIdx] != ' ' ) break;
 800174c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d006      	beq.n	8001768 <TransformAndProcessTheCommand+0x94>
 800175a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	4413      	add	r3, r2
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b20      	cmp	r3, #32
 8001766:	d109      	bne.n	800177c <TransformAndProcessTheCommand+0xa8>
		endIdx -= 1;
 8001768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800176c:	3b01      	subs	r3, #1
 800176e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	while(endIdx > 0)
 8001772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001776:	2b00      	cmp	r3, #0
 8001778:	dce8      	bgt.n	800174c <TransformAndProcessTheCommand+0x78>
 800177a:	e000      	b.n	800177e <TransformAndProcessTheCommand+0xaa>
		if ( lineBuff[endIdx] != '\0' && lineBuff[endIdx] != ' ' ) break;
 800177c:	bf00      	nop
	}

	if ( startIdx <= endIdx )
 800177e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001786:	429a      	cmp	r2, r3
 8001788:	f300 80e4 	bgt.w	8001954 <TransformAndProcessTheCommand+0x280>
	{
		// strtok is safe because we have a nulled safety margin behind the string
		command = strtok(&lineBuff[startIdx], " ");
 800178c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	4972      	ldr	r1, [pc, #456]	@ (8001960 <TransformAndProcessTheCommand+0x28c>)
 8001796:	4618      	mov	r0, r3
 8001798:	f00e fdf4 	bl	8010384 <strtok>
 800179c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0

		// some sanity checks before tokenizing
		if ( command == NULL ) return 0;
 80017a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <TransformAndProcessTheCommand+0xd8>
 80017a8:	2300      	movs	r3, #0
 80017aa:	e0d4      	b.n	8001956 <TransformAndProcessTheCommand+0x282>
		if ((int)strnlen(command, line_size) == 0 ) return 0;
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	4619      	mov	r1, r3
 80017b0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 80017b4:	f00e fdd9 	bl	801036a <strnlen>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <TransformAndProcessTheCommand+0xee>
 80017be:	2300      	movs	r3, #0
 80017c0:	e0c9      	b.n	8001956 <TransformAndProcessTheCommand+0x282>

		int cmdLength = (int)strnlen(command, line_size);
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	4619      	mov	r1, r3
 80017c6:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 80017ca:	f00e fdce 	bl	801036a <strnlen>
 80017ce:	4603      	mov	r3, r0
 80017d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

		// now get the arguments
		while((args[numArgs] = strtok(strtokNewIndex, " ")) != NULL && numArgs < CONSOLE_MAX_NUM_ARGS)
 80017d4:	e086      	b.n	80018e4 <TransformAndProcessTheCommand+0x210>
		{
			strtokNewIndex = NULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			if (args[numArgs][0] == '"')
 80017dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	33e8      	adds	r3, #232	@ 0xe8
 80017e4:	443b      	add	r3, r7
 80017e6:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b22      	cmp	r3, #34	@ 0x22
 80017ee:	d174      	bne.n	80018da <TransformAndProcessTheCommand+0x206>
			{
				// move the argument to remove the quotes
				args[numArgs] += 1;
 80017f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	33e8      	adds	r3, #232	@ 0xe8
 80017f8:	443b      	add	r3, r7
 80017fa:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	33e8      	adds	r3, #232	@ 0xe8
 8001808:	443b      	add	r3, r7
 800180a:	f843 2cd8 	str.w	r2, [r3, #-216]
				if (args[numArgs][0] == '"') {
 800180e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	33e8      	adds	r3, #232	@ 0xe8
 8001816:	443b      	add	r3, r7
 8001818:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b22      	cmp	r3, #34	@ 0x22
 8001820:	d113      	bne.n	800184a <TransformAndProcessTheCommand+0x176>
					args[numArgs][0] = '\0';
 8001822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	33e8      	adds	r3, #232	@ 0xe8
 800182a:	443b      	add	r3, r7
 800182c:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]
					// we have to add a plus 2 because there is the '"' char and '\0' from strtok as second
					// char. So we need to add 2 chars to get to the next valid char or the end of the string
					strtokNewIndex = &args[numArgs][2];
 8001834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	33e8      	adds	r3, #232	@ 0xe8
 800183c:	443b      	add	r3, r7
 800183e:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001842:	3302      	adds	r3, #2
 8001844:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001848:	e047      	b.n	80018da <TransformAndProcessTheCommand+0x206>
				}
				else
				{
					// now look for the end of the argument and set new strtok index to this
					// string part
					int firstLen = strlen(args[numArgs]);
 800184a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	33e8      	adds	r3, #232	@ 0xe8
 8001852:	443b      	add	r3, r7
 8001854:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fd39 	bl	80002d0 <strlen>
 800185e:	4603      	mov	r3, r0
 8001860:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
					args[numArgs][firstLen] = ' ';
 8001864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	33e8      	adds	r3, #232	@ 0xe8
 800186c:	443b      	add	r3, r7
 800186e:	f853 2cd8 	ldr.w	r2, [r3, #-216]
 8001872:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001876:	4413      	add	r3, r2
 8001878:	2220      	movs	r2, #32
 800187a:	701a      	strb	r2, [r3, #0]
					char* endChar = &args[numArgs][firstLen-1];
 800187c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	33e8      	adds	r3, #232	@ 0xe8
 8001884:	443b      	add	r3, r7
 8001886:	f853 2cd8 	ldr.w	r2, [r3, #-216]
 800188a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800188e:	3b01      	subs	r3, #1
 8001890:	4413      	add	r3, r2
 8001892:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
					// while loop is safe because we have a nulled safety margin behind the string
					while (*endChar != '\0' && *endChar != '"') endChar += 1;
 8001896:	e004      	b.n	80018a2 <TransformAndProcessTheCommand+0x1ce>
 8001898:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800189c:	3301      	adds	r3, #1
 800189e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80018a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d004      	beq.n	80018b6 <TransformAndProcessTheCommand+0x1e2>
 80018ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b22      	cmp	r3, #34	@ 0x22
 80018b4:	d1f0      	bne.n	8001898 <TransformAndProcessTheCommand+0x1c4>
					if (*endChar == '"') {
 80018b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b22      	cmp	r3, #34	@ 0x22
 80018be:	d108      	bne.n	80018d2 <TransformAndProcessTheCommand+0x1fe>
						*endChar = '\0'; endChar += 1;
 80018c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
 80018c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018cc:	3301      	adds	r3, #1
 80018ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
					}
					strtokNewIndex = endChar;
 80018d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
				}
			}
			numArgs+=1;
 80018da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80018de:	3301      	adds	r3, #1
 80018e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		while((args[numArgs] = strtok(strtokNewIndex, " ")) != NULL && numArgs < CONSOLE_MAX_NUM_ARGS)
 80018e4:	491e      	ldr	r1, [pc, #120]	@ (8001960 <TransformAndProcessTheCommand+0x28c>)
 80018e6:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 80018ea:	f00e fd4b 	bl	8010384 <strtok>
 80018ee:	4602      	mov	r2, r0
 80018f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	33e8      	adds	r3, #232	@ 0xe8
 80018f8:	443b      	add	r3, r7
 80018fa:	f843 2cd8 	str.w	r2, [r3, #-216]
 80018fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	33e8      	adds	r3, #232	@ 0xe8
 8001906:	443b      	add	r3, r7
 8001908:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d004      	beq.n	800191a <TransformAndProcessTheCommand+0x246>
 8001910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001914:	2b2b      	cmp	r3, #43	@ 0x2b
 8001916:	f77f af5e 	ble.w	80017d6 <TransformAndProcessTheCommand+0x102>
		}

		// now call the command
		int retVal = ProcessCommand(command, cmdLength, args, numArgs, cState, &isAlias, lineBuff, line_size);
 800191a:	f107 0210 	add.w	r2, r7, #16
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	9303      	str	r3, [sp, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	9302      	str	r3, [sp, #8]
 8001926:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001934:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8001938:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 800193c:	f7ff fcfa 	bl	8001334 <ProcessCommand>
 8001940:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
		if ( isAlias )
 8001944:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d000      	beq.n	800194e <TransformAndProcessTheCommand+0x27a>
		{
			// in case it is an alias, the line buffer has been overwritten with the alias and so we have to do
			// this round again
			goto restart;
 800194c:	e6cb      	b.n	80016e6 <TransformAndProcessTheCommand+0x12>
		}
		return retVal;
 800194e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001952:	e000      	b.n	8001956 <TransformAndProcessTheCommand+0x282>
	}

	return 0;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	37e8      	adds	r7, #232	@ 0xe8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	08012e9c 	.word	0x08012e9c

08001964 <PrintConsoleControl>:

// --------------------------------------------------------------------------------------------------------------------
static void PrintConsoleControl( cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	if ( s->length >= 3 && s->type == ctrlC1_CSI )
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d91d      	bls.n	80019b0 <PrintConsoleControl+0x4c>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	885b      	ldrh	r3, [r3, #2]
 8001978:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800197c:	d118      	bne.n	80019b0 <PrintConsoleControl+0x4c>
	{
		for ( unsigned int i = 0; i < s->length; i ++ )
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	e00a      	b.n	800199a <PrintConsoleControl+0x36>
		{
			putchar(s->buff[i]);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691a      	ldr	r2, [r3, #16]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4413      	add	r3, r2
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f00e fa80 	bl	800fe94 <putchar>
		for ( unsigned int i = 0; i < s->length; i ++ )
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	3301      	adds	r3, #1
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d3ef      	bcc.n	8001984 <PrintConsoleControl+0x20>
		}
		fflush(stdout);
 80019a4:	4b04      	ldr	r3, [pc, #16]	@ (80019b8 <PrintConsoleControl+0x54>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f00e f91e 	bl	800fbec <fflush>
	}
}
 80019b0:	bf00      	nop
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	200001c0 	.word	0x200001c0

080019bc <ConsoleIsArrowLeft>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleIsArrowLeft( cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
	return ( s->length >= 3 && s->type == ctrlC1_CSI && s->buff[2] == 68);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d90c      	bls.n	80019e6 <ConsoleIsArrowLeft+0x2a>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	885b      	ldrh	r3, [r3, #2]
 80019d0:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80019d4:	d107      	bne.n	80019e6 <ConsoleIsArrowLeft+0x2a>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	3302      	adds	r3, #2
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b44      	cmp	r3, #68	@ 0x44
 80019e0:	d101      	bne.n	80019e6 <ConsoleIsArrowLeft+0x2a>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <ConsoleIsArrowLeft+0x2c>
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <ConsoleIsArrowRight>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleIsArrowRight( cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	return ( s->length >= 3 && s->type == ctrlC1_CSI && s->buff[2] == 67);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d90c      	bls.n	8001a1e <ConsoleIsArrowRight+0x2a>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	885b      	ldrh	r3, [r3, #2]
 8001a08:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001a0c:	d107      	bne.n	8001a1e <ConsoleIsArrowRight+0x2a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	3302      	adds	r3, #2
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b43      	cmp	r3, #67	@ 0x43
 8001a18:	d101      	bne.n	8001a1e <ConsoleIsArrowRight+0x2a>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <ConsoleIsArrowRight+0x2c>
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <ConsoleIsArrowUp>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleIsArrowUp( cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	return ( s->length >= 3 && s->type == ctrlC1_CSI && s->buff[2] == 65);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d90c      	bls.n	8001a56 <ConsoleIsArrowUp+0x2a>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	885b      	ldrh	r3, [r3, #2]
 8001a40:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001a44:	d107      	bne.n	8001a56 <ConsoleIsArrowUp+0x2a>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	3302      	adds	r3, #2
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b41      	cmp	r3, #65	@ 0x41
 8001a50:	d101      	bne.n	8001a56 <ConsoleIsArrowUp+0x2a>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <ConsoleIsArrowUp+0x2c>
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <ConsoleIsArrowDown>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleIsArrowDown( cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
	return ( s->length >= 3 && s->type == ctrlC1_CSI && s->buff[2] == 66);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d90c      	bls.n	8001a8e <ConsoleIsArrowDown+0x2a>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	885b      	ldrh	r3, [r3, #2]
 8001a78:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001a7c:	d107      	bne.n	8001a8e <ConsoleIsArrowDown+0x2a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	3302      	adds	r3, #2
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b42      	cmp	r3, #66	@ 0x42
 8001a88:	d101      	bne.n	8001a8e <ConsoleIsArrowDown+0x2a>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <ConsoleIsArrowDown+0x2c>
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <ConsoleIsEntf>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleIsEntf( cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	return ( s->length >= 4 && s->type == ctrlC1_CSI && s->buff[2] == 51 && s->buff[3] == 126);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d912      	bls.n	8001ad2 <ConsoleIsEntf+0x36>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	885b      	ldrh	r3, [r3, #2]
 8001ab0:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001ab4:	d10d      	bne.n	8001ad2 <ConsoleIsEntf+0x36>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	3302      	adds	r3, #2
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b33      	cmp	r3, #51	@ 0x33
 8001ac0:	d107      	bne.n	8001ad2 <ConsoleIsEntf+0x36>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	3303      	adds	r3, #3
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b7e      	cmp	r3, #126	@ 0x7e
 8001acc:	d101      	bne.n	8001ad2 <ConsoleIsEntf+0x36>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <ConsoleIsEntf+0x38>
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <PrintConsoleArrowLeft>:

// --------------------------------------------------------------------------------------------------------------------
static void PrintConsoleArrowLeft( void )
// --------------------------------------------------------------------------------------------------------------------
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
	putchar('\033');
 8001ae4:	201b      	movs	r0, #27
 8001ae6:	f00e f9d5 	bl	800fe94 <putchar>
	putchar('[');
 8001aea:	205b      	movs	r0, #91	@ 0x5b
 8001aec:	f00e f9d2 	bl	800fe94 <putchar>
	putchar(68);
 8001af0:	2044      	movs	r0, #68	@ 0x44
 8001af2:	f00e f9cf 	bl	800fe94 <putchar>
	fflush(stdout);
 8001af6:	4b04      	ldr	r3, [pc, #16]	@ (8001b08 <PrintConsoleArrowLeft+0x28>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f00e f875 	bl	800fbec <fflush>
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	200001c0 	.word	0x200001c0

08001b0c <CONSOLE_RedirectStreams>:

// --------------------------------------------------------------------------------------------------------------------
int CONSOLE_RedirectStreams( ConsoleHandle_t h, ConsoleReadStream_t rdFunc, ConsoleWriteStream_t wrFunc,
		void* rdContext, void* wrContext )
// --------------------------------------------------------------------------------------------------------------------
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	@ 0x28
 8001b10:	af02      	add	r7, sp, #8
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	603b      	str	r3, [r7, #0]
#ifndef __NEWLIB__ // so far only newlib is supported
	return -2;
#else
	// we can only exec the real stream redirection when we are the console thread itself and the scheduler is running,
	// otherwise we have to set the request to pending state
	if ( ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) && ( xTaskGetCurrentTaskHandle() == h->tHandle ) )
 8001b1a:	f00b f935 	bl	800cd88 <xTaskGetSchedulerState>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d165      	bne.n	8001bf0 <CONSOLE_RedirectStreams+0xe4>
 8001b24:	f00b f920 	bl	800cd68 <xTaskGetCurrentTaskHandle>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d15e      	bne.n	8001bf0 <CONSOLE_RedirectStreams+0xe4>
	{
		FILE* rdToClean = NULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
		if ( _impure_ptr->_stdin != &__sf[0])
 8001b36:	4b3c      	ldr	r3, [pc, #240]	@ (8001c28 <CONSOLE_RedirectStreams+0x11c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	4a3b      	ldr	r2, [pc, #236]	@ (8001c2c <CONSOLE_RedirectStreams+0x120>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d003      	beq.n	8001b4a <CONSOLE_RedirectStreams+0x3e>
		{
			rdToClean = _impure_ptr->_stdin;
 8001b42:	4b39      	ldr	r3, [pc, #228]	@ (8001c28 <CONSOLE_RedirectStreams+0x11c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	61fb      	str	r3, [r7, #28]
		}

		FILE* wrToClean = NULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61bb      	str	r3, [r7, #24]
		if ( _impure_ptr->_stdout != &__sf[1])
 8001b4e:	4b36      	ldr	r3, [pc, #216]	@ (8001c28 <CONSOLE_RedirectStreams+0x11c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	4a36      	ldr	r2, [pc, #216]	@ (8001c30 <CONSOLE_RedirectStreams+0x124>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d003      	beq.n	8001b62 <CONSOLE_RedirectStreams+0x56>
		{
			wrToClean = _impure_ptr->_stdout;
 8001b5a:	4b33      	ldr	r3, [pc, #204]	@ (8001c28 <CONSOLE_RedirectStreams+0x11c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	61bb      	str	r3, [r7, #24]
		}

		FILE* myStdOut = &__sf[1];
 8001b62:	4b33      	ldr	r3, [pc, #204]	@ (8001c30 <CONSOLE_RedirectStreams+0x124>)
 8001b64:	617b      	str	r3, [r7, #20]
		if ( wrFunc != NULL )
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00e      	beq.n	8001b8a <CONSOLE_RedirectStreams+0x7e>
		{
			myStdOut = fwopen(wrContext, wrFunc);
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	2300      	movs	r3, #0
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	2100      	movs	r1, #0
 8001b76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001b78:	f00e fbc0 	bl	80102fc <funopen>
 8001b7c:	6178      	str	r0, [r7, #20]
			if ( myStdOut == NULL ) return -1;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d102      	bne.n	8001b8a <CONSOLE_RedirectStreams+0x7e>
 8001b84:	f04f 33ff 	mov.w	r3, #4294967295
 8001b88:	e049      	b.n	8001c1e <CONSOLE_RedirectStreams+0x112>
		}

		FILE* myStdIn = &__sf[0];
 8001b8a:	4b28      	ldr	r3, [pc, #160]	@ (8001c2c <CONSOLE_RedirectStreams+0x120>)
 8001b8c:	613b      	str	r3, [r7, #16]
		if ( rdFunc != NULL )
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d018      	beq.n	8001bc6 <CONSOLE_RedirectStreams+0xba>
		{
			myStdIn = fropen(rdContext, rdFunc);
 8001b94:	2300      	movs	r3, #0
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	2300      	movs	r3, #0
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	68b9      	ldr	r1, [r7, #8]
 8001b9e:	6838      	ldr	r0, [r7, #0]
 8001ba0:	f00e fbac 	bl	80102fc <funopen>
 8001ba4:	6138      	str	r0, [r7, #16]
			if ( myStdIn == NULL )
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10c      	bne.n	8001bc6 <CONSOLE_RedirectStreams+0xba>
			{
				if ( myStdOut != NULL && myStdOut != &__sf[1]) fclose(myStdOut);
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d006      	beq.n	8001bc0 <CONSOLE_RedirectStreams+0xb4>
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	4a1e      	ldr	r2, [pc, #120]	@ (8001c30 <CONSOLE_RedirectStreams+0x124>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d002      	beq.n	8001bc0 <CONSOLE_RedirectStreams+0xb4>
 8001bba:	6978      	ldr	r0, [r7, #20]
 8001bbc:	f00d ff62 	bl	800fa84 <fclose>
				return -1;
 8001bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc4:	e02b      	b.n	8001c1e <CONSOLE_RedirectStreams+0x112>
			}
		}

		_impure_ptr->_stdin  = myStdIn;
 8001bc6:	4b18      	ldr	r3, [pc, #96]	@ (8001c28 <CONSOLE_RedirectStreams+0x11c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	605a      	str	r2, [r3, #4]
		_impure_ptr->_stdout = myStdOut;
 8001bce:	4b16      	ldr	r3, [pc, #88]	@ (8001c28 <CONSOLE_RedirectStreams+0x11c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	609a      	str	r2, [r3, #8]

		if (wrToClean != NULL) fclose(wrToClean);
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <CONSOLE_RedirectStreams+0xd6>
 8001bdc:	69b8      	ldr	r0, [r7, #24]
 8001bde:	f00d ff51 	bl	800fa84 <fclose>
		if (rdToClean != NULL) fclose(rdToClean);
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d018      	beq.n	8001c1a <CONSOLE_RedirectStreams+0x10e>
 8001be8:	69f8      	ldr	r0, [r7, #28]
 8001bea:	f00d ff4b 	bl	800fa84 <fclose>
	{
 8001bee:	e014      	b.n	8001c1a <CONSOLE_RedirectStreams+0x10e>
	}
	else
	{
		h->pendingRedirect = 1;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
		h->pendingRdStream = rdFunc;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
		h->pendingWrStream = wrFunc;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
		h->pendingRdCtx    = rdContext;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
		h->pendingWrCtx    = wrContext;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c14:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
 8001c18:	e000      	b.n	8001c1c <CONSOLE_RedirectStreams+0x110>
	{
 8001c1a:	bf00      	nop
	}
#endif
	return 0;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3720      	adds	r7, #32
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200001c0 	.word	0x200001c0
 8001c2c:	20000568 	.word	0x20000568
 8001c30:	200005d0 	.word	0x200005d0

08001c34 <ConsoleFunction>:

// --------------------------------------------------------------------------------------------------------------------
static void ConsoleFunction( void * arg )
// --------------------------------------------------------------------------------------------------------------------
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b09a      	sub	sp, #104	@ 0x68
 8001c38:	af02      	add	r7, sp, #8
 8001c3a:	6078      	str	r0, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)arg;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	627b      	str	r3, [r7, #36]	@ 0x24
	if (h == NULL) goto destroy;
 8001c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 84aa 	beq.w	800259c <ConsoleFunction+0x968>

	if( h->pendingRedirect != 0 )
 8001c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d01a      	beq.n	8001c88 <ConsoleFunction+0x54>
	{
		h->pendingRedirect = 0;
 8001c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c54:	2200      	movs	r2, #0
 8001c56:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
		if ( CONSOLE_RedirectStreams(h, h->pendingRdStream, h->pendingWrStream, h->pendingRdCtx, h->pendingWrCtx) )
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5c:	f8d3 1410 	ldr.w	r1, [r3, #1040]	@ 0x410
 8001c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c62:	f8d3 2414 	ldr.w	r2, [r3, #1044]	@ 0x414
 8001c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c68:	f8d3 0418 	ldr.w	r0, [r3, #1048]	@ 0x418
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	4603      	mov	r3, r0
 8001c76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001c78:	f7ff ff48 	bl	8001b0c <CONSOLE_RedirectStreams>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d002      	beq.n	8001c88 <ConsoleFunction+0x54>
		{
			printf("was not able to redirect console streams, requested by user!");
 8001c82:	4892      	ldr	r0, [pc, #584]	@ (8001ecc <ConsoleFunction+0x298>)
 8001c84:	f00e f8f4 	bl	800fe70 <iprintf>
#ifdef WIN32
		"\033[39m      -=   MSVC RTOS SIMULATOR ";
#else
		"\033[39m      -=   ARM RTOS ";
#endif
    printf((char*)headerASCIIArt);
 8001c88:	4891      	ldr	r0, [pc, #580]	@ (8001ed0 <ConsoleFunction+0x29c>)
 8001c8a:	f00e f8f1 	bl	800fe70 <iprintf>
#ifdef EXERCISE
    printf("EXERCISE: ");
    printf(xstr(EXERCISE)));
    printf("\r\n\r\n");
#else
    printf("PLAYGROUND\r\n\r\n");
 8001c8e:	4891      	ldr	r0, [pc, #580]	@ (8001ed4 <ConsoleFunction+0x2a0>)
 8001c90:	f00e f95e 	bl	800ff50 <puts>
#endif

#if CONSOLE_USE_DYNAMIC_USERNAME != 0
	char* usernamePtr = getenv("USERNAME");
 8001c94:	4890      	ldr	r0, [pc, #576]	@ (8001ed8 <ConsoleFunction+0x2a4>)
 8001c96:	f00c f881 	bl	800dd9c <getenv>
 8001c9a:	65f8      	str	r0, [r7, #92]	@ 0x5c
	if ( usernamePtr == 0 ) usernamePtr = CONSOLE_USERNAME;
 8001c9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <ConsoleFunction+0x72>
 8001ca2:	4b8e      	ldr	r3, [pc, #568]	@ (8001edc <ConsoleFunction+0x2a8>)
 8001ca4:	65fb      	str	r3, [r7, #92]	@ 0x5c
#else
	char* usernamePtr = CONSOLE_USERNAME;
#endif

	char* lineBuff = NULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	65bb      	str	r3, [r7, #88]	@ 0x58
	char* ctrlBuff = malloc(CONSOLE_LINE_SIZE + CONSOLE_SAFETY_SPACE); // make sure we have a little space behind
 8001caa:	207c      	movs	r0, #124	@ 0x7c
 8001cac:	f00c f8be 	bl	800de2c <malloc>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	623b      	str	r3, [r7, #32]
	if (ctrlBuff == NULL) goto exit;
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8406 	beq.w	80024c8 <ConsoleFunction+0x894>

	lineBuff = malloc(CONSOLE_LINE_SIZE + CONSOLE_SAFETY_SPACE); // make sure we have a little space behind
 8001cbc:	207c      	movs	r0, #124	@ 0x7c
 8001cbe:	f00c f8b5 	bl	800de2c <malloc>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	65bb      	str	r3, [r7, #88]	@ 0x58
	if (lineBuff == NULL) goto exit;
 8001cc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 83ff 	beq.w	80024cc <ConsoleFunction+0x898>

	memset(ctrlBuff, ctrlC0_NUL, CONSOLE_LINE_SIZE + CONSOLE_SAFETY_SPACE);
 8001cce:	227c      	movs	r2, #124	@ 0x7c
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	6a38      	ldr	r0, [r7, #32]
 8001cd4:	f00e fb22 	bl	801031c <memset>
	memset(lineBuff, ctrlC0_NUL, CONSOLE_LINE_SIZE + CONSOLE_SAFETY_SPACE);
 8001cd8:	227c      	movs	r2, #124	@ 0x7c
 8001cda:	2100      	movs	r1, #0
 8001cdc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001cde:	f00e fb1d 	bl	801031c <memset>
	unsigned int lbPtr = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	657b      	str	r3, [r7, #84]	@ 0x54

	printf("\r\nFreeRTOS Console Up and Running\r\n");
 8001ce6:	487e      	ldr	r0, [pc, #504]	@ (8001ee0 <ConsoleFunction+0x2ac>)
 8001ce8:	f00e f932 	bl	800ff50 <puts>
	printf("\r\n\r\n-------------------------------------------------------------------\r\n");
 8001cec:	487d      	ldr	r0, [pc, #500]	@ (8001ee4 <ConsoleFunction+0x2b0>)
 8001cee:	f00e f92f 	bl	800ff50 <puts>

	h->pState.buff = ctrlBuff;
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf4:	6a3a      	ldr	r2, [r7, #32]
 8001cf6:	619a      	str	r2, [r3, #24]

	printf("\r\n%s(\033[32m\xE2\x9C\x93\033[0m) $>", usernamePtr);
 8001cf8:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001cfa:	487b      	ldr	r0, [pc, #492]	@ (8001ee8 <ConsoleFunction+0x2b4>)
 8001cfc:	f00e f8b8 	bl	800fe70 <iprintf>
	int consoleStartIndex = (int)strlen(usernamePtr)+6;
 8001d00:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001d02:	f7fe fae5 	bl	80002d0 <strlen>
 8001d06:	4603      	mov	r3, r0
 8001d08:	3306      	adds	r3, #6
 8001d0a:	653b      	str	r3, [r7, #80]	@ 0x50
	fflush(stdout);
 8001d0c:	4b77      	ldr	r3, [pc, #476]	@ (8001eec <ConsoleFunction+0x2b8>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f00d ff6a 	bl	800fbec <fflush>

	while(h->cancel == 0)
 8001d18:	e3d0      	b.n	80024bc <ConsoleFunction+0x888>
	{
		if( h->pendingRedirect != 0 )
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d01a      	beq.n	8001d5a <ConsoleFunction+0x126>
		{
			h->pendingRedirect = 0;
 8001d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d26:	2200      	movs	r2, #0
 8001d28:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
			if ( CONSOLE_RedirectStreams(h, h->pendingRdStream, h->pendingWrStream, h->pendingRdCtx, h->pendingWrCtx) )
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2e:	f8d3 1410 	ldr.w	r1, [r3, #1040]	@ 0x410
 8001d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d34:	f8d3 2414 	ldr.w	r2, [r3, #1044]	@ 0x414
 8001d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3a:	f8d3 0418 	ldr.w	r0, [r3, #1048]	@ 0x418
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d40:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	4603      	mov	r3, r0
 8001d48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d4a:	f7ff fedf 	bl	8001b0c <CONSOLE_RedirectStreams>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <ConsoleFunction+0x126>
			{
				printf("was not able to redirect console streams, requested by user!");
 8001d54:	485d      	ldr	r0, [pc, #372]	@ (8001ecc <ConsoleFunction+0x298>)
 8001d56:	f00e f88b 	bl	800fe70 <iprintf>
			}
		}

		int res = EOF;
 8001d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5e:	61fb      	str	r3, [r7, #28]
		while((res = getchar()) == EOF)
 8001d60:	e004      	b.n	8001d6c <ConsoleFunction+0x138>
		{
			if ( h->cancel == 1 ) goto exit;
 8001d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	f000 83b2 	beq.w	80024d0 <ConsoleFunction+0x89c>
		while((res = getchar()) == EOF)
 8001d6c:	f00e f878 	bl	800fe60 <getchar>
 8001d70:	61f8      	str	r0, [r7, #28]
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d78:	d0f3      	beq.n	8001d62 <ConsoleFunction+0x12e>
		}
		char myChar = res;
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	76fb      	strb	r3, [r7, #27]
		cspTYPE result = ControlSequenceParserConsume(myChar, &h->pState);
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d80:	f103 0208 	add.w	r2, r3, #8
 8001d84:	7efb      	ldrb	r3, [r7, #27]
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff f98f 	bl	80010ac <ControlSequenceParserConsume>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	76bb      	strb	r3, [r7, #26]
		if ( result == csptCHARACTER )
 8001d92:	7ebb      	ldrb	r3, [r7, #26]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	f040 80b3 	bne.w	8001f00 <ConsoleFunction+0x2cc>
		{
			putchar(myChar);
 8001d9a:	7efb      	ldrb	r3, [r7, #27]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f00e f879 	bl	800fe94 <putchar>
			fflush(stdout);
 8001da2:	4b52      	ldr	r3, [pc, #328]	@ (8001eec <ConsoleFunction+0x2b8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f00d ff1f 	bl	800fbec <fflush>

			if ( lineBuff[lbPtr + 1] != '\0' )
 8001dae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db0:	3301      	adds	r3, #1
 8001db2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001db4:	4413      	add	r3, r2
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d061      	beq.n	8001e80 <ConsoleFunction+0x24c>
			{
				putchar(lineBuff[lbPtr]);
 8001dbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc0:	4413      	add	r3, r2
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f00e f865 	bl	800fe94 <putchar>
				fflush(stdout);
 8001dca:	4b48      	ldr	r3, [pc, #288]	@ (8001eec <ConsoleFunction+0x2b8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f00d ff0b 	bl	800fbec <fflush>

				int tmpPtr = lbPtr + 1;
 8001dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd8:	3301      	adds	r3, #1
 8001dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
				char parking = myChar;
 8001ddc:	7efb      	ldrb	r3, [r7, #27]
 8001dde:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
				char parking2 = lineBuff[lbPtr];
 8001de2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001de4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de6:	4413      	add	r3, r2
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
				while(tmpPtr < CONSOLE_LINE_SIZE)
 8001dee:	e02a      	b.n	8001e46 <ConsoleFunction+0x212>
				{
					putchar(lineBuff[tmpPtr]);
 8001df0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001df2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001df4:	4413      	add	r3, r2
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f00e f84b 	bl	800fe94 <putchar>
					fflush(stdout);
 8001dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8001eec <ConsoleFunction+0x2b8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f00d fef1 	bl	800fbec <fflush>


					lineBuff[tmpPtr - 1] = parking;
 8001e0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e10:	4413      	add	r3, r2
 8001e12:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8001e16:	701a      	strb	r2, [r3, #0]
					parking = parking2;
 8001e18:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001e1c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
					parking2 = lineBuff[tmpPtr];
 8001e20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e24:	4413      	add	r3, r2
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

					if ( lineBuff[tmpPtr] == '\0' && parking == '\0')
 8001e2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e30:	4413      	add	r3, r2
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d103      	bne.n	8001e40 <ConsoleFunction+0x20c>
 8001e38:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d006      	beq.n	8001e4e <ConsoleFunction+0x21a>
						break;

					tmpPtr += 1;
 8001e40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e42:	3301      	adds	r3, #1
 8001e44:	64fb      	str	r3, [r7, #76]	@ 0x4c
				while(tmpPtr < CONSOLE_LINE_SIZE)
 8001e46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e48:	2b77      	cmp	r3, #119	@ 0x77
 8001e4a:	ddd1      	ble.n	8001df0 <ConsoleFunction+0x1bc>
 8001e4c:	e000      	b.n	8001e50 <ConsoleFunction+0x21c>
						break;
 8001e4e:	bf00      	nop
				}

				printf("\033[%dD", CONSOLE_LINE_SIZE + consoleStartIndex);
 8001e50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e52:	3378      	adds	r3, #120	@ 0x78
 8001e54:	4619      	mov	r1, r3
 8001e56:	4826      	ldr	r0, [pc, #152]	@ (8001ef0 <ConsoleFunction+0x2bc>)
 8001e58:	f00e f80a 	bl	800fe70 <iprintf>
				printf("\033[%dC", consoleStartIndex + lbPtr + 1);
 8001e5c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001e5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e60:	4413      	add	r3, r2
 8001e62:	3301      	adds	r3, #1
 8001e64:	4619      	mov	r1, r3
 8001e66:	4823      	ldr	r0, [pc, #140]	@ (8001ef4 <ConsoleFunction+0x2c0>)
 8001e68:	f00e f802 	bl	800fe70 <iprintf>
				lbPtr += 1;
 8001e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e6e:	3301      	adds	r3, #1
 8001e70:	657b      	str	r3, [r7, #84]	@ 0x54
				fflush(stdout);
 8001e72:	4b1e      	ldr	r3, [pc, #120]	@ (8001eec <ConsoleFunction+0x2b8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f00d feb7 	bl	800fbec <fflush>
 8001e7e:	e007      	b.n	8001e90 <ConsoleFunction+0x25c>
			}
			else
			{
				lineBuff[lbPtr] = myChar;
 8001e80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e84:	4413      	add	r3, r2
 8001e86:	7efa      	ldrb	r2, [r7, #27]
 8001e88:	701a      	strb	r2, [r3, #0]
				lbPtr++;
 8001e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	657b      	str	r3, [r7, #84]	@ 0x54
			}

			if ( lbPtr > CONSOLE_LINE_SIZE )
 8001e90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e92:	2b78      	cmp	r3, #120	@ 0x78
 8001e94:	f240 8312 	bls.w	80024bc <ConsoleFunction+0x888>
			{
				printf("\r\n Buffer Overrun! Clearing input...\r\n");
 8001e98:	4817      	ldr	r0, [pc, #92]	@ (8001ef8 <ConsoleFunction+0x2c4>)
 8001e9a:	f00e f859 	bl	800ff50 <puts>
				// print new console line and decode the result
				printf("\r\n%s(\033[31m\xE2\x98\x93\033[0m) $>", usernamePtr);
 8001e9e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001ea0:	4816      	ldr	r0, [pc, #88]	@ (8001efc <ConsoleFunction+0x2c8>)
 8001ea2:	f00d ffe5 	bl	800fe70 <iprintf>
				fflush(stdout);
 8001ea6:	4b11      	ldr	r3, [pc, #68]	@ (8001eec <ConsoleFunction+0x2b8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f00d fe9d 	bl	800fbec <fflush>

				// clear the buffer and restore the pointer
				do
				{
					lineBuff[lbPtr] = ctrlC0_NUL;
 8001eb2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eb6:	4413      	add	r3, r2
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
				    if ( lbPtr == 0 ) break;
 8001ebc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 82f7 	beq.w	80024b2 <ConsoleFunction+0x87e>
				    else lbPtr -= 1;
 8001ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	657b      	str	r3, [r7, #84]	@ 0x54
					lineBuff[lbPtr] = ctrlC0_NUL;
 8001eca:	e7f2      	b.n	8001eb2 <ConsoleFunction+0x27e>
 8001ecc:	08012ea0 	.word	0x08012ea0
 8001ed0:	0801422c 	.word	0x0801422c
 8001ed4:	08012ee0 	.word	0x08012ee0
 8001ed8:	08012ef0 	.word	0x08012ef0
 8001edc:	08012efc 	.word	0x08012efc
 8001ee0:	08012f04 	.word	0x08012f04
 8001ee4:	08012f28 	.word	0x08012f28
 8001ee8:	08012f74 	.word	0x08012f74
 8001eec:	200001c0 	.word	0x200001c0
 8001ef0:	08012f8c 	.word	0x08012f8c
 8001ef4:	08012f94 	.word	0x08012f94
 8001ef8:	08012f9c 	.word	0x08012f9c
 8001efc:	08012fc4 	.word	0x08012fc4
				} while (1);
			}
		}
		else if ( result == csptCONTROL )
 8001f00:	7ebb      	ldrb	r3, [r7, #26]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	f040 82da 	bne.w	80024bc <ConsoleFunction+0x888>
		{
			switch (h->pState.type)
 8001f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0a:	895b      	ldrh	r3, [r3, #10]
 8001f0c:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001f10:	f000 8113 	beq.w	800213a <ConsoleFunction+0x506>
 8001f14:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001f18:	f300 82a5 	bgt.w	8002466 <ConsoleFunction+0x832>
 8001f1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f1e:	f000 8093 	beq.w	8002048 <ConsoleFunction+0x414>
 8001f22:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f24:	f300 829f 	bgt.w	8002466 <ConsoleFunction+0x832>
 8001f28:	2b0d      	cmp	r3, #13
 8001f2a:	d008      	beq.n	8001f3e <ConsoleFunction+0x30a>
 8001f2c:	2b0d      	cmp	r3, #13
 8001f2e:	f300 829a 	bgt.w	8002466 <ConsoleFunction+0x832>
 8001f32:	2b09      	cmp	r3, #9
 8001f34:	f000 80e2 	beq.w	80020fc <ConsoleFunction+0x4c8>
 8001f38:	2b0a      	cmp	r3, #10
 8001f3a:	f040 8294 	bne.w	8002466 <ConsoleFunction+0x832>
			{
				// implicit fall through
			case ctrlC0_LF:
			case ctrlC0_CR:
			{
				putchar(h->pState.type);
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f40:	895b      	ldrh	r3, [r3, #10]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f00d ffa6 	bl	800fe94 <putchar>
				fflush(stdout);
 8001f48:	4ba8      	ldr	r3, [pc, #672]	@ (80021ec <ConsoleFunction+0x5b8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f00d fe4c 	bl	800fbec <fflush>
					putchar(ctrlC0_CR);
					fflush(stdout);
				}

				// implicit LF on every CR?
				if (1 && h->pState.type == ctrlC0_CR)
 8001f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f56:	895b      	ldrh	r3, [r3, #10]
 8001f58:	2b0d      	cmp	r3, #13
 8001f5a:	d108      	bne.n	8001f6e <ConsoleFunction+0x33a>
				{
					putchar(ctrlC0_LF);
 8001f5c:	200a      	movs	r0, #10
 8001f5e:	f00d ff99 	bl	800fe94 <putchar>
					fflush(stdout);
 8001f62:	4ba2      	ldr	r3, [pc, #648]	@ (80021ec <ConsoleFunction+0x5b8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f00d fe3f 	bl	800fbec <fflush>
				}

				// now adapt the line history accordingly
				memcpy(h->history.lines[h->history.lineHead], lineBuff, CONSOLE_LINE_SIZE);
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f70:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f74:	4613      	mov	r3, r2
 8001f76:	015b      	lsls	r3, r3, #5
 8001f78:	1a9b      	subs	r3, r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	3320      	adds	r3, #32
 8001f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f80:	4413      	add	r3, r2
 8001f82:	3304      	adds	r3, #4
 8001f84:	2278      	movs	r2, #120	@ 0x78
 8001f86:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f00e fb2d 	bl	80105e8 <memcpy>
				h->history.lineHead = (h->history.lineHead + 1) % CONSOLE_LINE_HISTORY;
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f90:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001f94:	3301      	adds	r3, #1
 8001f96:	425a      	negs	r2, r3
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	f002 0207 	and.w	r2, r2, #7
 8001fa0:	bf58      	it	pl
 8001fa2:	4253      	negpl	r3, r2
 8001fa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fa6:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
				h->history.linePtr = h->history.lineHead;
 8001faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fac:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

				// parse and execute the command and make sure the output streams
				// are flushed before doing anything else with the result
				int result = TransformAndProcessTheCommand(lineBuff, CONSOLE_LINE_SIZE, &h->cState);
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb8:	461a      	mov	r2, r3
 8001fba:	2178      	movs	r1, #120	@ 0x78
 8001fbc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001fbe:	f7ff fb89 	bl	80016d4 <TransformAndProcessTheCommand>
 8001fc2:	60f8      	str	r0, [r7, #12]
				fflush(stdout);
 8001fc4:	4b89      	ldr	r3, [pc, #548]	@ (80021ec <ConsoleFunction+0x5b8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f00d fe0e 	bl	800fbec <fflush>
				fflush(stderr);
 8001fd0:	4b86      	ldr	r3, [pc, #536]	@ (80021ec <ConsoleFunction+0x5b8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f00d fe08 	bl	800fbec <fflush>

#if CONSOLE_USE_DYNAMIC_USERNAME != 0
				// now check if there is a new user name (which is only possible by setenv command
				// which is executed after process command call above...
				usernamePtr = getenv("USERNAME");
 8001fdc:	4884      	ldr	r0, [pc, #528]	@ (80021f0 <ConsoleFunction+0x5bc>)
 8001fde:	f00b fedd 	bl	800dd9c <getenv>
 8001fe2:	65f8      	str	r0, [r7, #92]	@ 0x5c
				if ( usernamePtr == 0 ) usernamePtr = CONSOLE_USERNAME;
 8001fe4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <ConsoleFunction+0x3ba>
 8001fea:	4b82      	ldr	r3, [pc, #520]	@ (80021f4 <ConsoleFunction+0x5c0>)
 8001fec:	65fb      	str	r3, [r7, #92]	@ 0x5c
				consoleStartIndex = (int)strlen(usernamePtr)+6;
 8001fee:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001ff0:	f7fe f96e 	bl	80002d0 <strlen>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	3306      	adds	r3, #6
 8001ff8:	653b      	str	r3, [r7, #80]	@ 0x50
#endif
				// print new console line and decode the result
				printf("\r\n%s(", usernamePtr);
 8001ffa:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001ffc:	487e      	ldr	r0, [pc, #504]	@ (80021f8 <ConsoleFunction+0x5c4>)
 8001ffe:	f00d ff37 	bl	800fe70 <iprintf>
				if (result == 0)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d103      	bne.n	8002010 <ConsoleFunction+0x3dc>
				{
					printf("\033[32m\xE2\x9C\x93\033[0m");
 8002008:	487c      	ldr	r0, [pc, #496]	@ (80021fc <ConsoleFunction+0x5c8>)
 800200a:	f00d ff31 	bl	800fe70 <iprintf>
 800200e:	e002      	b.n	8002016 <ConsoleFunction+0x3e2>
				}
				else
				{
					printf("\033[31m\xE2\x98\x93\033[0m");
 8002010:	487b      	ldr	r0, [pc, #492]	@ (8002200 <ConsoleFunction+0x5cc>)
 8002012:	f00d ff2d 	bl	800fe70 <iprintf>
				}
				printf(") $>");
 8002016:	487b      	ldr	r0, [pc, #492]	@ (8002204 <ConsoleFunction+0x5d0>)
 8002018:	f00d ff2a 	bl	800fe70 <iprintf>
				fflush(stdout);
 800201c:	4b73      	ldr	r3, [pc, #460]	@ (80021ec <ConsoleFunction+0x5b8>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	4618      	mov	r0, r3
 8002024:	f00d fde2 	bl	800fbec <fflush>

				// clear the buffer completely because an alias could change
				// the buffer content way more than the user has entered and so
				// we can not only clear lbPtr--!! as we have a safety space we
				// can set CONSOLE_LINE_SIZE as matching pointer value;
				lbPtr = CONSOLE_LINE_SIZE;
 8002028:	2378      	movs	r3, #120	@ 0x78
 800202a:	657b      	str	r3, [r7, #84]	@ 0x54
				do
				{
					lineBuff[lbPtr] = ctrlC0_NUL;
 800202c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800202e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002030:	4413      	add	r3, r2
 8002032:	2200      	movs	r2, #0
 8002034:	701a      	strb	r2, [r3, #0]
					if (lbPtr == 0) break;
 8002036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <ConsoleFunction+0x410>
					else lbPtr -= 1;
 800203c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800203e:	3b01      	subs	r3, #1
 8002040:	657b      	str	r3, [r7, #84]	@ 0x54
					lineBuff[lbPtr] = ctrlC0_NUL;
 8002042:	e7f3      	b.n	800202c <ConsoleFunction+0x3f8>
					if (lbPtr == 0) break;
 8002044:	bf00      	nop
				} while (1);

				break;
 8002046:	e239      	b.n	80024bc <ConsoleFunction+0x888>
			}
			case ctrlC0_DEL:
			{
				if (lbPtr > 0)
 8002048:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8233 	beq.w	80024b6 <ConsoleFunction+0x882>
				{
					int tmpPtr = lbPtr;
 8002050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002052:	647b      	str	r3, [r7, #68]	@ 0x44
					lbPtr -= 1;
 8002054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002056:	3b01      	subs	r3, #1
 8002058:	657b      	str	r3, [r7, #84]	@ 0x54
					lineBuff[lbPtr] = ctrlC0_NUL;
 800205a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800205c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800205e:	4413      	add	r3, r2
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
					putchar(ctrlC0_DEL);
 8002064:	207f      	movs	r0, #127	@ 0x7f
 8002066:	f00d ff15 	bl	800fe94 <putchar>
					fflush(stdout);
 800206a:	4b60      	ldr	r3, [pc, #384]	@ (80021ec <ConsoleFunction+0x5b8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	4618      	mov	r0, r3
 8002072:	f00d fdbb 	bl	800fbec <fflush>
					while (lineBuff[tmpPtr] != ctrlC0_NUL)
 8002076:	e01c      	b.n	80020b2 <ConsoleFunction+0x47e>
					{
						lineBuff[tmpPtr - 1] = lineBuff[tmpPtr];
 8002078:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800207a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800207c:	441a      	add	r2, r3
 800207e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002080:	3b01      	subs	r3, #1
 8002082:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002084:	440b      	add	r3, r1
 8002086:	7812      	ldrb	r2, [r2, #0]
 8002088:	701a      	strb	r2, [r3, #0]
						putchar(lineBuff[tmpPtr - 1]);
 800208a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800208c:	3b01      	subs	r3, #1
 800208e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002090:	4413      	add	r3, r2
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f00d fefd 	bl	800fe94 <putchar>
						fflush(stdout);
 800209a:	4b54      	ldr	r3, [pc, #336]	@ (80021ec <ConsoleFunction+0x5b8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f00d fda3 	bl	800fbec <fflush>
						tmpPtr += 1;
 80020a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020a8:	3301      	adds	r3, #1
 80020aa:	647b      	str	r3, [r7, #68]	@ 0x44
						if (tmpPtr >= CONSOLE_LINE_SIZE) break;
 80020ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020ae:	2b77      	cmp	r3, #119	@ 0x77
 80020b0:	dc06      	bgt.n	80020c0 <ConsoleFunction+0x48c>
					while (lineBuff[tmpPtr] != ctrlC0_NUL)
 80020b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80020b6:	4413      	add	r3, r2
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1dc      	bne.n	8002078 <ConsoleFunction+0x444>
 80020be:	e000      	b.n	80020c2 <ConsoleFunction+0x48e>
						if (tmpPtr >= CONSOLE_LINE_SIZE) break;
 80020c0:	bf00      	nop
					}
					lineBuff[tmpPtr - 1] = ctrlC0_NUL;
 80020c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020c4:	3b01      	subs	r3, #1
 80020c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80020c8:	4413      	add	r3, r2
 80020ca:	2200      	movs	r2, #0
 80020cc:	701a      	strb	r2, [r3, #0]
					putchar(' ');
 80020ce:	2020      	movs	r0, #32
 80020d0:	f00d fee0 	bl	800fe94 <putchar>
					fflush(stdout);
 80020d4:	4b45      	ldr	r3, [pc, #276]	@ (80021ec <ConsoleFunction+0x5b8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	4618      	mov	r0, r3
 80020dc:	f00d fd86 	bl	800fbec <fflush>

					int moveBack = tmpPtr - lbPtr;
 80020e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80020e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	643b      	str	r3, [r7, #64]	@ 0x40
					for (; moveBack > 0; moveBack--)
 80020e8:	e004      	b.n	80020f4 <ConsoleFunction+0x4c0>
						PrintConsoleArrowLeft();
 80020ea:	f7ff fcf9 	bl	8001ae0 <PrintConsoleArrowLeft>
					for (; moveBack > 0; moveBack--)
 80020ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020f0:	3b01      	subs	r3, #1
 80020f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80020f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	dcf7      	bgt.n	80020ea <ConsoleFunction+0x4b6>
				}
				break;
 80020fa:	e1dc      	b.n	80024b6 <ConsoleFunction+0x882>
			}
			case ctrlC0_TAB:
			{
				int nums = 4 - (lbPtr % 4);
 80020fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	f1c3 0304 	rsb	r3, r3, #4
 8002106:	63fb      	str	r3, [r7, #60]	@ 0x3c
				for (; nums > 0; nums--)
 8002108:	e013      	b.n	8002132 <ConsoleFunction+0x4fe>
				{
					lineBuff[lbPtr] = ' ';
 800210a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800210c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800210e:	4413      	add	r3, r2
 8002110:	2220      	movs	r2, #32
 8002112:	701a      	strb	r2, [r3, #0]
					lbPtr += 1;
 8002114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002116:	3301      	adds	r3, #1
 8002118:	657b      	str	r3, [r7, #84]	@ 0x54
					putchar(' ');
 800211a:	2020      	movs	r0, #32
 800211c:	f00d feba 	bl	800fe94 <putchar>
					fflush(stdout);
 8002120:	4b32      	ldr	r3, [pc, #200]	@ (80021ec <ConsoleFunction+0x5b8>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	4618      	mov	r0, r3
 8002128:	f00d fd60 	bl	800fbec <fflush>
				for (; nums > 0; nums--)
 800212c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800212e:	3b01      	subs	r3, #1
 8002130:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002134:	2b00      	cmp	r3, #0
 8002136:	dce8      	bgt.n	800210a <ConsoleFunction+0x4d6>
				}
				break;
 8002138:	e1c0      	b.n	80024bc <ConsoleFunction+0x888>
			}

			case ctrlC1_CSI:
			{
				if (ConsoleIsArrowLeft(&h->pState))
 800213a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213c:	3308      	adds	r3, #8
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fc3c 	bl	80019bc <ConsoleIsArrowLeft>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00c      	beq.n	8002164 <ConsoleFunction+0x530>
				{
					if (lbPtr > 0)
 800214a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 81b4 	beq.w	80024ba <ConsoleFunction+0x886>
					{
						lbPtr -= 1;
 8002152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002154:	3b01      	subs	r3, #1
 8002156:	657b      	str	r3, [r7, #84]	@ 0x54
						PrintConsoleControl(&h->pState);
 8002158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215a:	3308      	adds	r3, #8
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fc01 	bl	8001964 <PrintConsoleControl>
						}
						fflush(stdout);
					}
				}
				else goto unimp;
				break;
 8002162:	e1aa      	b.n	80024ba <ConsoleFunction+0x886>
				else if (ConsoleIsArrowRight(&h->pState))
 8002164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002166:	3308      	adds	r3, #8
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fc43 	bl	80019f4 <ConsoleIsArrowRight>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d021      	beq.n	80021b8 <ConsoleFunction+0x584>
					if (lbPtr < (CONSOLE_LINE_SIZE - 1))
 8002174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002176:	2b76      	cmp	r3, #118	@ 0x76
 8002178:	f200 819f 	bhi.w	80024ba <ConsoleFunction+0x886>
						if (lineBuff[lbPtr] == ctrlC0_NUL)
 800217c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800217e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002180:	4413      	add	r3, r2
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10e      	bne.n	80021a6 <ConsoleFunction+0x572>
							lineBuff[lbPtr] = ' ';
 8002188:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800218a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800218c:	4413      	add	r3, r2
 800218e:	2220      	movs	r2, #32
 8002190:	701a      	strb	r2, [r3, #0]
							putchar(' ');
 8002192:	2020      	movs	r0, #32
 8002194:	f00d fe7e 	bl	800fe94 <putchar>
							fflush(stdout);
 8002198:	4b14      	ldr	r3, [pc, #80]	@ (80021ec <ConsoleFunction+0x5b8>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	4618      	mov	r0, r3
 80021a0:	f00d fd24 	bl	800fbec <fflush>
 80021a4:	e004      	b.n	80021b0 <ConsoleFunction+0x57c>
							PrintConsoleControl(&h->pState);
 80021a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a8:	3308      	adds	r3, #8
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff fbda 	bl	8001964 <PrintConsoleControl>
						lbPtr += 1;
 80021b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021b2:	3301      	adds	r3, #1
 80021b4:	657b      	str	r3, [r7, #84]	@ 0x54
				break;
 80021b6:	e180      	b.n	80024ba <ConsoleFunction+0x886>
				else if (ConsoleIsEntf(&h->pState))
 80021b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ba:	3308      	adds	r3, #8
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff fc6d 	bl	8001a9c <ConsoleIsEntf>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d061      	beq.n	800228c <ConsoleFunction+0x658>
					if (lbPtr < (CONSOLE_LINE_SIZE - 1))
 80021c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021ca:	2b76      	cmp	r3, #118	@ 0x76
 80021cc:	f200 8175 	bhi.w	80024ba <ConsoleFunction+0x886>
						int tmpPtr = lbPtr + 1;
 80021d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021d2:	3301      	adds	r3, #1
 80021d4:	63bb      	str	r3, [r7, #56]	@ 0x38
						lineBuff[lbPtr] = ' ';
 80021d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80021d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021da:	4413      	add	r3, r2
 80021dc:	2220      	movs	r2, #32
 80021de:	701a      	strb	r2, [r3, #0]
						PrintConsoleControl(&h->pState);
 80021e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e2:	3308      	adds	r3, #8
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fbbd 	bl	8001964 <PrintConsoleControl>
						while (lineBuff[tmpPtr] != ctrlC0_NUL)
 80021ea:	e02a      	b.n	8002242 <ConsoleFunction+0x60e>
 80021ec:	200001c0 	.word	0x200001c0
 80021f0:	08012ef0 	.word	0x08012ef0
 80021f4:	08012efc 	.word	0x08012efc
 80021f8:	08012fdc 	.word	0x08012fdc
 80021fc:	08012fe4 	.word	0x08012fe4
 8002200:	08012ff4 	.word	0x08012ff4
 8002204:	08013004 	.word	0x08013004
							lineBuff[tmpPtr - 1] = lineBuff[tmpPtr];
 8002208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800220a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800220c:	441a      	add	r2, r3
 800220e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002210:	3b01      	subs	r3, #1
 8002212:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002214:	440b      	add	r3, r1
 8002216:	7812      	ldrb	r2, [r2, #0]
 8002218:	701a      	strb	r2, [r3, #0]
							putchar(lineBuff[tmpPtr - 1]);
 800221a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800221c:	3b01      	subs	r3, #1
 800221e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002220:	4413      	add	r3, r2
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f00d fe35 	bl	800fe94 <putchar>
							fflush(stdout);
 800222a:	4baa      	ldr	r3, [pc, #680]	@ (80024d4 <ConsoleFunction+0x8a0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	4618      	mov	r0, r3
 8002232:	f00d fcdb 	bl	800fbec <fflush>
							tmpPtr += 1;
 8002236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002238:	3301      	adds	r3, #1
 800223a:	63bb      	str	r3, [r7, #56]	@ 0x38
							if (tmpPtr >= CONSOLE_LINE_SIZE) break;
 800223c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800223e:	2b77      	cmp	r3, #119	@ 0x77
 8002240:	dc06      	bgt.n	8002250 <ConsoleFunction+0x61c>
						while (lineBuff[tmpPtr] != ctrlC0_NUL)
 8002242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002244:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002246:	4413      	add	r3, r2
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1dc      	bne.n	8002208 <ConsoleFunction+0x5d4>
 800224e:	e000      	b.n	8002252 <ConsoleFunction+0x61e>
							if (tmpPtr >= CONSOLE_LINE_SIZE) break;
 8002250:	bf00      	nop
						lineBuff[tmpPtr - 1] = ctrlC0_NUL;
 8002252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002254:	3b01      	subs	r3, #1
 8002256:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002258:	4413      	add	r3, r2
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
						putchar(' ');
 800225e:	2020      	movs	r0, #32
 8002260:	f00d fe18 	bl	800fe94 <putchar>
						fflush(stdout);
 8002264:	4b9b      	ldr	r3, [pc, #620]	@ (80024d4 <ConsoleFunction+0x8a0>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	4618      	mov	r0, r3
 800226c:	f00d fcbe 	bl	800fbec <fflush>
						int moveBack = tmpPtr - lbPtr;
 8002270:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	637b      	str	r3, [r7, #52]	@ 0x34
						for (; moveBack > 0; moveBack--)
 8002278:	e004      	b.n	8002284 <ConsoleFunction+0x650>
							PrintConsoleArrowLeft();
 800227a:	f7ff fc31 	bl	8001ae0 <PrintConsoleArrowLeft>
						for (; moveBack > 0; moveBack--)
 800227e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002280:	3b01      	subs	r3, #1
 8002282:	637b      	str	r3, [r7, #52]	@ 0x34
 8002284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002286:	2b00      	cmp	r3, #0
 8002288:	dcf7      	bgt.n	800227a <ConsoleFunction+0x646>
				break;
 800228a:	e116      	b.n	80024ba <ConsoleFunction+0x886>
				else if (ConsoleIsArrowUp(&h->pState) || ConsoleIsArrowDown(&h->pState))
 800228c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228e:	3308      	adds	r3, #8
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fbcb 	bl	8001a2c <ConsoleIsArrowUp>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d108      	bne.n	80022ae <ConsoleFunction+0x67a>
 800229c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229e:	3308      	adds	r3, #8
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fbdf 	bl	8001a64 <ConsoleIsArrowDown>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 80db 	beq.w	8002464 <ConsoleFunction+0x830>
					if (ConsoleIsArrowUp(&h->pState))
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b0:	3308      	adds	r3, #8
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff fbba 	bl	8001a2c <ConsoleIsArrowUp>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d010      	beq.n	80022e0 <ConsoleFunction+0x6ac>
						h->history.linePtr -= 1;
 80022be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80022c4:	1e5a      	subs	r2, r3, #1
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
						if (h->history.linePtr < 0) h->history.linePtr = CONSOLE_LINE_HISTORY - 1;
 80022cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ce:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	da14      	bge.n	8002300 <ConsoleFunction+0x6cc>
 80022d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d8:	2207      	movs	r2, #7
 80022da:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 80022de:	e00f      	b.n	8002300 <ConsoleFunction+0x6cc>
						h->history.linePtr += 1;
 80022e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ea:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
						if (h->history.linePtr >= CONSOLE_LINE_HISTORY) h->history.linePtr = 0;
 80022ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80022f4:	2b07      	cmp	r3, #7
 80022f6:	dd03      	ble.n	8002300 <ConsoleFunction+0x6cc>
 80022f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fa:	2200      	movs	r2, #0
 80022fc:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
					if (h->history.linePtr == h->history.lineHead)
 8002300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002302:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002308:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800230c:	429a      	cmp	r2, r3
 800230e:	d134      	bne.n	800237a <ConsoleFunction+0x746>
						int inputLength = (int)strnlen(lineBuff, CONSOLE_LINE_SIZE);
 8002310:	2178      	movs	r1, #120	@ 0x78
 8002312:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002314:	f00e f829 	bl	801036a <strnlen>
 8002318:	4603      	mov	r3, r0
 800231a:	613b      	str	r3, [r7, #16]
						printf("\033[%dD", CONSOLE_LINE_SIZE + consoleStartIndex);
 800231c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800231e:	3378      	adds	r3, #120	@ 0x78
 8002320:	4619      	mov	r1, r3
 8002322:	486d      	ldr	r0, [pc, #436]	@ (80024d8 <ConsoleFunction+0x8a4>)
 8002324:	f00d fda4 	bl	800fe70 <iprintf>
						printf("\033[%dC", consoleStartIndex);
 8002328:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800232a:	486c      	ldr	r0, [pc, #432]	@ (80024dc <ConsoleFunction+0x8a8>)
 800232c:	f00d fda0 	bl	800fe70 <iprintf>
						for (int i = 0; i < inputLength; i++)
 8002330:	2300      	movs	r3, #0
 8002332:	633b      	str	r3, [r7, #48]	@ 0x30
 8002334:	e005      	b.n	8002342 <ConsoleFunction+0x70e>
							putchar(' ');
 8002336:	2020      	movs	r0, #32
 8002338:	f00d fdac 	bl	800fe94 <putchar>
						for (int i = 0; i < inputLength; i++)
 800233c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233e:	3301      	adds	r3, #1
 8002340:	633b      	str	r3, [r7, #48]	@ 0x30
 8002342:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	429a      	cmp	r2, r3
 8002348:	dbf5      	blt.n	8002336 <ConsoleFunction+0x702>
						memset(lineBuff, 0, CONSOLE_LINE_SIZE);
 800234a:	2278      	movs	r2, #120	@ 0x78
 800234c:	2100      	movs	r1, #0
 800234e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002350:	f00d ffe4 	bl	801031c <memset>
						lbPtr = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	657b      	str	r3, [r7, #84]	@ 0x54
						printf("\033[%dD", CONSOLE_LINE_SIZE + consoleStartIndex);
 8002358:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800235a:	3378      	adds	r3, #120	@ 0x78
 800235c:	4619      	mov	r1, r3
 800235e:	485e      	ldr	r0, [pc, #376]	@ (80024d8 <ConsoleFunction+0x8a4>)
 8002360:	f00d fd86 	bl	800fe70 <iprintf>
						printf("\033[%dC", consoleStartIndex);
 8002364:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002366:	485d      	ldr	r0, [pc, #372]	@ (80024dc <ConsoleFunction+0x8a8>)
 8002368:	f00d fd82 	bl	800fe70 <iprintf>
						fflush(stdout);
 800236c:	4b59      	ldr	r3, [pc, #356]	@ (80024d4 <ConsoleFunction+0x8a0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	4618      	mov	r0, r3
 8002374:	f00d fc3a 	bl	800fbec <fflush>
					if (h->history.linePtr == h->history.lineHead)
 8002378:	e072      	b.n	8002460 <ConsoleFunction+0x82c>
						int inputLength = (int)strnlen(lineBuff, CONSOLE_LINE_SIZE);
 800237a:	2178      	movs	r1, #120	@ 0x78
 800237c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800237e:	f00d fff4 	bl	801036a <strnlen>
 8002382:	4603      	mov	r3, r0
 8002384:	617b      	str	r3, [r7, #20]
						printf("\033[%dD", CONSOLE_LINE_SIZE + consoleStartIndex);
 8002386:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002388:	3378      	adds	r3, #120	@ 0x78
 800238a:	4619      	mov	r1, r3
 800238c:	4852      	ldr	r0, [pc, #328]	@ (80024d8 <ConsoleFunction+0x8a4>)
 800238e:	f00d fd6f 	bl	800fe70 <iprintf>
						printf("\033[%dC", consoleStartIndex);
 8002392:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002394:	4851      	ldr	r0, [pc, #324]	@ (80024dc <ConsoleFunction+0x8a8>)
 8002396:	f00d fd6b 	bl	800fe70 <iprintf>
						int i = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	62fb      	str	r3, [r7, #44]	@ 0x2c
						for (; i < inputLength; i++)
 800239e:	e005      	b.n	80023ac <ConsoleFunction+0x778>
							putchar(' ');
 80023a0:	2020      	movs	r0, #32
 80023a2:	f00d fd77 	bl	800fe94 <putchar>
						for (; i < inputLength; i++)
 80023a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a8:	3301      	adds	r3, #1
 80023aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	dbf5      	blt.n	80023a0 <ConsoleFunction+0x76c>
						printf("\033[%dD", CONSOLE_LINE_SIZE + consoleStartIndex);
 80023b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023b6:	3378      	adds	r3, #120	@ 0x78
 80023b8:	4619      	mov	r1, r3
 80023ba:	4847      	ldr	r0, [pc, #284]	@ (80024d8 <ConsoleFunction+0x8a4>)
 80023bc:	f00d fd58 	bl	800fe70 <iprintf>
						printf("\033[%dC", consoleStartIndex);
 80023c0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80023c2:	4846      	ldr	r0, [pc, #280]	@ (80024dc <ConsoleFunction+0x8a8>)
 80023c4:	f00d fd54 	bl	800fe70 <iprintf>
						fflush(stdout);
 80023c8:	4b42      	ldr	r3, [pc, #264]	@ (80024d4 <ConsoleFunction+0x8a0>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f00d fc0c 	bl	800fbec <fflush>
						i = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
						memset(lineBuff, 0, CONSOLE_LINE_SIZE);
 80023d8:	2278      	movs	r2, #120	@ 0x78
 80023da:	2100      	movs	r1, #0
 80023dc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80023de:	f00d ff9d 	bl	801031c <memset>
						lbPtr = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	657b      	str	r3, [r7, #84]	@ 0x54
						while (h->history.lines[h->history.linePtr][i] != '\0')
 80023e6:	e026      	b.n	8002436 <ConsoleFunction+0x802>
							putchar(h->history.lines[h->history.linePtr][i]);
 80023e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ea:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80023ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023f0:	4613      	mov	r3, r2
 80023f2:	015b      	lsls	r3, r3, #5
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	18ca      	adds	r2, r1, r3
 80023fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023fc:	4413      	add	r3, r2
 80023fe:	3324      	adds	r3, #36	@ 0x24
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f00d fd46 	bl	800fe94 <putchar>
							lineBuff[lbPtr] = h->history.lines[h->history.linePtr][i];
 8002408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800240e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002410:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002412:	4419      	add	r1, r3
 8002414:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002416:	4613      	mov	r3, r2
 8002418:	015b      	lsls	r3, r3, #5
 800241a:	1a9b      	subs	r3, r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	18c2      	adds	r2, r0, r3
 8002420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002422:	4413      	add	r3, r2
 8002424:	3324      	adds	r3, #36	@ 0x24
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	700b      	strb	r3, [r1, #0]
							lbPtr++;
 800242a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800242c:	3301      	adds	r3, #1
 800242e:	657b      	str	r3, [r7, #84]	@ 0x54
							i++;
 8002430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002432:	3301      	adds	r3, #1
 8002434:	62fb      	str	r3, [r7, #44]	@ 0x2c
						while (h->history.lines[h->history.linePtr][i] != '\0')
 8002436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002438:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800243c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800243e:	4613      	mov	r3, r2
 8002440:	015b      	lsls	r3, r3, #5
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	18ca      	adds	r2, r1, r3
 8002448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800244a:	4413      	add	r3, r2
 800244c:	3324      	adds	r3, #36	@ 0x24
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1c9      	bne.n	80023e8 <ConsoleFunction+0x7b4>
						fflush(stdout);
 8002454:	4b1f      	ldr	r3, [pc, #124]	@ (80024d4 <ConsoleFunction+0x8a0>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	4618      	mov	r0, r3
 800245c:	f00d fbc6 	bl	800fbec <fflush>
					if (h->history.linePtr == h->history.lineHead)
 8002460:	bf00      	nop
				break;
 8002462:	e02a      	b.n	80024ba <ConsoleFunction+0x886>
				else goto unimp;
 8002464:	bf00      	nop

			// all other non implemented controls
			default:
			{
			unimp:
				printf("UNIMP-CTRL-SEQ: ");
 8002466:	481e      	ldr	r0, [pc, #120]	@ (80024e0 <ConsoleFunction+0x8ac>)
 8002468:	f00d fd02 	bl	800fe70 <iprintf>
				for (int i = 0; ctrlBuff[i] != '\0'; i++)
 800246c:	2300      	movs	r3, #0
 800246e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002470:	e00f      	b.n	8002492 <ConsoleFunction+0x85e>
					printf("%2.2x(%d) ", ctrlBuff[i], ctrlBuff[i]);
 8002472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002474:	6a3a      	ldr	r2, [r7, #32]
 8002476:	4413      	add	r3, r2
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	4619      	mov	r1, r3
 800247c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800247e:	6a3a      	ldr	r2, [r7, #32]
 8002480:	4413      	add	r3, r2
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	461a      	mov	r2, r3
 8002486:	4817      	ldr	r0, [pc, #92]	@ (80024e4 <ConsoleFunction+0x8b0>)
 8002488:	f00d fcf2 	bl	800fe70 <iprintf>
				for (int i = 0; ctrlBuff[i] != '\0'; i++)
 800248c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800248e:	3301      	adds	r3, #1
 8002490:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002494:	6a3a      	ldr	r2, [r7, #32]
 8002496:	4413      	add	r3, r2
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1e9      	bne.n	8002472 <ConsoleFunction+0x83e>
				printf("\r\n");
 800249e:	4812      	ldr	r0, [pc, #72]	@ (80024e8 <ConsoleFunction+0x8b4>)
 80024a0:	f00d fd56 	bl	800ff50 <puts>
				fflush(stdout);
 80024a4:	4b0b      	ldr	r3, [pc, #44]	@ (80024d4 <ConsoleFunction+0x8a0>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f00d fb9e 	bl	800fbec <fflush>
				break;
 80024b0:	e004      	b.n	80024bc <ConsoleFunction+0x888>
				    if ( lbPtr == 0 ) break;
 80024b2:	bf00      	nop
 80024b4:	e002      	b.n	80024bc <ConsoleFunction+0x888>
				break;
 80024b6:	bf00      	nop
 80024b8:	e000      	b.n	80024bc <ConsoleFunction+0x888>
				break;
 80024ba:	bf00      	nop
	while(h->cancel == 0)
 80024bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f43f ac2a 	beq.w	8001d1a <ConsoleFunction+0xe6>


		}
	}

exit:
 80024c6:	e004      	b.n	80024d2 <ConsoleFunction+0x89e>
	if (ctrlBuff == NULL) goto exit;
 80024c8:	bf00      	nop
 80024ca:	e012      	b.n	80024f2 <ConsoleFunction+0x8be>
	if (lineBuff == NULL) goto exit;
 80024cc:	bf00      	nop
 80024ce:	e010      	b.n	80024f2 <ConsoleFunction+0x8be>
			if ( h->cancel == 1 ) goto exit;
 80024d0:	bf00      	nop
	while (h->cancel == 0) vTaskDelay(pdTICKS_TO_MS(100));
 80024d2:	e00e      	b.n	80024f2 <ConsoleFunction+0x8be>
 80024d4:	200001c0 	.word	0x200001c0
 80024d8:	08012f8c 	.word	0x08012f8c
 80024dc:	08012f94 	.word	0x08012f94
 80024e0:	0801300c 	.word	0x0801300c
 80024e4:	08013020 	.word	0x08013020
 80024e8:	0801302c 	.word	0x0801302c
 80024ec:	2064      	movs	r0, #100	@ 0x64
 80024ee:	f009 fbbb 	bl	800bc68 <vTaskDelay>
 80024f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f8      	beq.n	80024ec <ConsoleFunction+0x8b8>
	
	printf("Console terminated, cleaning up...");
 80024fa:	482c      	ldr	r0, [pc, #176]	@ (80025ac <ConsoleFunction+0x978>)
 80024fc:	f00d fcb8 	bl	800fe70 <iprintf>
	fflush(stdout);
 8002500:	4b2b      	ldr	r3, [pc, #172]	@ (80025b0 <ConsoleFunction+0x97c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	4618      	mov	r0, r3
 8002508:	f00d fb70 	bl	800fbec <fflush>

	xSemaphoreTakeRecursive(h->cState.lockGuard, -1);
 800250c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f04f 31ff 	mov.w	r1, #4294967295
 8002514:	4618      	mov	r0, r3
 8002516:	f008 fc73 	bl	800ae00 <xQueueTakeMutexRecursive>
	while (!LIST_EMPTY(&h->cState.commands))
 800251a:	e01c      	b.n	8002556 <ConsoleFunction+0x922>
	{
		cmdEntry_t* pElement = h->cState.commands.lh_first;
 800251c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	60bb      	str	r3, [r7, #8]
		if (pElement != NULL)
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d01b      	beq.n	8002560 <ConsoleFunction+0x92c>
		{
			LIST_REMOVE(pElement, navigate);
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 800252e:	2b00      	cmp	r3, #0
 8002530:	d007      	beq.n	8002542 <ConsoleFunction+0x90e>
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	f8d2 2260 	ldr.w	r2, [r2, #608]	@ 0x260
 800253e:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	f8d2 225c 	ldr.w	r2, [r2, #604]	@ 0x25c
 800254e:	601a      	str	r2, [r3, #0]
			free(pElement);
 8002550:	68b8      	ldr	r0, [r7, #8]
 8002552:	f00b fc73 	bl	800de3c <free>
	while (!LIST_EMPTY(&h->cState.commands))
 8002556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1de      	bne.n	800251c <ConsoleFunction+0x8e8>
 800255e:	e000      	b.n	8002562 <ConsoleFunction+0x92e>
		}
		else break;
 8002560:	bf00      	nop
	}

	xSemaphoreGiveRecursive(h->cState.lockGuard);
 8002562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f008 fc0e 	bl	800ad88 <xQueueGiveMutexRecursive>
	vSemaphoreDelete(h->cState.lockGuard);
 800256c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f008 ffa1 	bl	800b4b8 <vQueueDelete>
	free(h);
 8002576:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002578:	f00b fc60 	bl	800de3c <free>
	
	if (lineBuff != NULL) free(lineBuff);
 800257c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <ConsoleFunction+0x954>
 8002582:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002584:	f00b fc5a 	bl	800de3c <free>
	if (ctrlBuff != NULL) free(ctrlBuff);
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <ConsoleFunction+0x960>
 800258e:	6a38      	ldr	r0, [r7, #32]
 8002590:	f00b fc54 	bl	800de3c <free>
	printf("done\r\n");
 8002594:	4807      	ldr	r0, [pc, #28]	@ (80025b4 <ConsoleFunction+0x980>)
 8002596:	f00d fcdb 	bl	800ff50 <puts>
 800259a:	e000      	b.n	800259e <ConsoleFunction+0x96a>
	if (h == NULL) goto destroy;
 800259c:	bf00      	nop
destroy:
	vTaskDelete(NULL);
 800259e:	2000      	movs	r0, #0
 80025a0:	f009 fab8 	bl	800bb14 <vTaskDelete>
}
 80025a4:	bf00      	nop
 80025a6:	3760      	adds	r7, #96	@ 0x60
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	08013030 	.word	0x08013030
 80025b0:	200001c0 	.word	0x200001c0
 80025b4:	08013054 	.word	0x08013054

080025b8 <ConsolePrintHelp>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsolePrintHelp(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08a      	sub	sp, #40	@ 0x28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	61bb      	str	r3, [r7, #24]
	cmdState_t* c = &h->cState;
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	617b      	str	r3, [r7, #20]
	int found = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	627b      	str	r3, [r7, #36]	@ 0x24
	int cmdLen = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	623b      	str	r3, [r7, #32]
	if ( argc > 0 )
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	dd06      	ble.n	80025e8 <ConsolePrintHelp+0x30>
	{
		cmdLen = (int)strlen(argv[0]);
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fd fe76 	bl	80002d0 <strlen>
 80025e4:	4603      	mov	r3, r0
 80025e6:	623b      	str	r3, [r7, #32]
	}
	xSemaphoreTakeRecursive( c->lockGuard, -1 );
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f04f 31ff 	mov.w	r1, #4294967295
 80025f0:	4618      	mov	r0, r3
 80025f2:	f008 fc05 	bl	800ae00 <xQueueTakeMutexRecursive>
	cmdEntry_t* pElement = c->commands.lh_first;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	61fb      	str	r3, [r7, #28]

	printf("HELP FOR:\r\n");
 80025fc:	4831      	ldr	r0, [pc, #196]	@ (80026c4 <ConsolePrintHelp+0x10c>)
 80025fe:	f00d fca7 	bl	800ff50 <puts>
	printf("-------------------------------------------------------------------\r\n");
 8002602:	4831      	ldr	r0, [pc, #196]	@ (80026c8 <ConsolePrintHelp+0x110>)
 8002604:	f00d fca4 	bl	800ff50 <puts>
	while ( pElement != NULL )
 8002608:	e048      	b.n	800269c <ConsolePrintHelp+0xe4>
	{
		// if string compare result and determined length match, then this must be the function
		if ( ( argc == 0 ) || ( strncmp(argv[0], pElement->content.cmd, cmdLen) == 0 && cmdLen == pElement->content.cmdLen ) )
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00f      	beq.n	8002630 <ConsolePrintHelp+0x78>
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	6818      	ldr	r0, [r3, #0]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	3308      	adds	r3, #8
 8002618:	6a3a      	ldr	r2, [r7, #32]
 800261a:	4619      	mov	r1, r3
 800261c:	f00d fe93 	bl	8010346 <strncmp>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d136      	bne.n	8002694 <ConsolePrintHelp+0xdc>
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800262a:	6a3a      	ldr	r2, [r7, #32]
 800262c:	429a      	cmp	r2, r3
 800262e:	d131      	bne.n	8002694 <ConsolePrintHelp+0xdc>
		{
			found = 1;
 8002630:	2301      	movs	r3, #1
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24
			if ( pElement->content.isAlias ) printf("ALIAS\r\n");
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <ConsolePrintHelp+0x8e>
 800263e:	4823      	ldr	r0, [pc, #140]	@ (80026cc <ConsolePrintHelp+0x114>)
 8002640:	f00d fc86 	bl	800ff50 <puts>
 8002644:	e002      	b.n	800264c <ConsolePrintHelp+0x94>
			else printf("COMMAND\r\n");
 8002646:	4822      	ldr	r0, [pc, #136]	@ (80026d0 <ConsolePrintHelp+0x118>)
 8002648:	f00d fc82 	bl	800ff50 <puts>
			printf("%s\r\n\r\n", pElement->content.cmd);
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	3308      	adds	r3, #8
 8002650:	4619      	mov	r1, r3
 8002652:	4820      	ldr	r0, [pc, #128]	@ (80026d4 <ConsolePrintHelp+0x11c>)
 8002654:	f00d fc0c 	bl	800fe70 <iprintf>
			if ( pElement->content.isAlias )
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00c      	beq.n	800267c <ConsolePrintHelp+0xc4>
			{
				printf("MAPPING\r\n");
 8002662:	481d      	ldr	r0, [pc, #116]	@ (80026d8 <ConsolePrintHelp+0x120>)
 8002664:	f00d fc74 	bl	800ff50 <puts>
				printf("%s -> '%s'\r\n", pElement->content.cmd, pElement->content.help);
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f103 0108 	add.w	r1, r3, #8
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3350      	adds	r3, #80	@ 0x50
 8002672:	461a      	mov	r2, r3
 8002674:	4819      	ldr	r0, [pc, #100]	@ (80026dc <ConsolePrintHelp+0x124>)
 8002676:	f00d fbfb 	bl	800fe70 <iprintf>
 800267a:	e008      	b.n	800268e <ConsolePrintHelp+0xd6>
			}
			else
			{
				printf("DESCRIPTION\r\n");
 800267c:	4818      	ldr	r0, [pc, #96]	@ (80026e0 <ConsolePrintHelp+0x128>)
 800267e:	f00d fc67 	bl	800ff50 <puts>
				printf("%s\r\n", pElement->content.help);
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3350      	adds	r3, #80	@ 0x50
 8002686:	4619      	mov	r1, r3
 8002688:	4816      	ldr	r0, [pc, #88]	@ (80026e4 <ConsolePrintHelp+0x12c>)
 800268a:	f00d fbf1 	bl	800fe70 <iprintf>
			}
			printf("-------------------------------------------------------------------\r\n");
 800268e:	480e      	ldr	r0, [pc, #56]	@ (80026c8 <ConsolePrintHelp+0x110>)
 8002690:	f00d fc5e 	bl	800ff50 <puts>
		}

		pElement = pElement->navigate.le_next;
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 800269a:	61fb      	str	r3, [r7, #28]
	while ( pElement != NULL )
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1b3      	bne.n	800260a <ConsolePrintHelp+0x52>
	}

	xSemaphoreGiveRecursive( c->lockGuard );
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f008 fb6e 	bl	800ad88 <xQueueGiveMutexRecursive>
	return -(found == 0);
 80026ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	bf0c      	ite	eq
 80026b2:	2301      	moveq	r3, #1
 80026b4:	2300      	movne	r3, #0
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	425b      	negs	r3, r3
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3728      	adds	r7, #40	@ 0x28
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	0801305c 	.word	0x0801305c
 80026c8:	08013068 	.word	0x08013068
 80026cc:	080130b0 	.word	0x080130b0
 80026d0:	080130b8 	.word	0x080130b8
 80026d4:	080130c4 	.word	0x080130c4
 80026d8:	080130cc 	.word	0x080130cc
 80026dc:	080130d8 	.word	0x080130d8
 80026e0:	080130e8 	.word	0x080130e8
 80026e4:	080130f8 	.word	0x080130f8

080026e8 <ConsoleExecReset>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleExecReset(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
	(void)argc;
	(void)argv;
	(void)context;
#if defined(__arm__)
	NVIC_SystemReset();
 80026f4:	f7fe fcc4 	bl	8001080 <__NVIC_SystemReset>

080026f8 <ConsolePrintKernelTicks>:
}

// --------------------------------------------------------------------------------------------------------------------
static int ConsolePrintKernelTicks(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
	(void)argc;
	(void)argv;
	(void)context;
	printf("%u", (unsigned int)xTaskGetTickCount());
 8002704:	f009 fd3a 	bl	800c17c <xTaskGetTickCount>
 8002708:	4603      	mov	r3, r0
 800270a:	4619      	mov	r1, r3
 800270c:	4803      	ldr	r0, [pc, #12]	@ (800271c <ConsolePrintKernelTicks+0x24>)
 800270e:	f00d fbaf 	bl	800fe70 <iprintf>
	return 0;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	08013100 	.word	0x08013100

08002720 <ConsolePrintTaskStats>:

#if defined(configGENERATE_RUN_TIME_STATS) && (configGENERATE_RUN_TIME_STATS != 0)
// --------------------------------------------------------------------------------------------------------------------
static int ConsolePrintTaskStats(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 8002720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002724:	f2ad 5dc4 	subw	sp, sp, #1476	@ 0x5c4
 8002728:	af06      	add	r7, sp, #24
 800272a:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 800272e:	f2a3 539c 	subw	r3, r3, #1436	@ 0x59c
 8002732:	6018      	str	r0, [r3, #0]
 8002734:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002738:	f5a3 63b4 	sub.w	r3, r3, #1440	@ 0x5a0
 800273c:	6019      	str	r1, [r3, #0]
 800273e:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002742:	f2a3 53a4 	subw	r3, r3, #1444	@ 0x5a4
 8002746:	601a      	str	r2, [r3, #0]
	(void)argc;
	(void)argv;
	(void)context;
	unsigned int numTasks = (unsigned int)uxTaskGetNumberOfTasks();
 8002748:	f009 fd28 	bl	800c19c <uxTaskGetNumberOfTasks>
 800274c:	f8c7 05a0 	str.w	r0, [r7, #1440]	@ 0x5a0
	TaskStatus_t tasks[32]; // a maximium of 32 so far
	configRUN_TIME_COUNTER_TYPE totalTime = 0;
 8002750:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002754:	f5a3 63b3 	sub.w	r3, r3, #1432	@ 0x598
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]

	unsigned int numFeedback = uxTaskGetSystemState( tasks, numTasks, &totalTime);
 800275c:	f107 0210 	add.w	r2, r7, #16
 8002760:	f107 0314 	add.w	r3, r7, #20
 8002764:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	@ 0x5a0
 8002768:	4618      	mov	r0, r3
 800276a:	f009 fd23 	bl	800c1b4 <uxTaskGetSystemState>
 800276e:	f8c7 059c 	str.w	r0, [r7, #1436]	@ 0x59c
	if (numFeedback > 0)
 8002772:	f8d7 359c 	ldr.w	r3, [r7, #1436]	@ 0x59c
 8002776:	2b00      	cmp	r3, #0
 8002778:	d008      	beq.n	800278c <ConsolePrintTaskStats+0x6c>
	{
		printf("|----|----------|----------|----------|---------|------------|-------|\r\n");
 800277a:	4876      	ldr	r0, [pc, #472]	@ (8002954 <ConsolePrintTaskStats+0x234>)
 800277c:	f00d fbe8 	bl	800ff50 <puts>
		printf("| ID | NAME     | Prio     | BasePrio | State   | Ticks      | Rel.  |\r\n");
 8002780:	4875      	ldr	r0, [pc, #468]	@ (8002958 <ConsolePrintTaskStats+0x238>)
 8002782:	f00d fbe5 	bl	800ff50 <puts>
		printf("|----|----------|----------|----------|---------|------------|-------|\r\n");
 8002786:	4873      	ldr	r0, [pc, #460]	@ (8002954 <ConsolePrintTaskStats+0x234>)
 8002788:	f00d fbe2 	bl	800ff50 <puts>
	}
	for (unsigned int i = 0; i < numFeedback; i++ )
 800278c:	2300      	movs	r3, #0
 800278e:	f8c7 35a4 	str.w	r3, [r7, #1444]	@ 0x5a4
 8002792:	e0d0      	b.n	8002936 <ConsolePrintTaskStats+0x216>
	{
		float relativeRuntime = ( (float)tasks[i].ulRunTimeCounter * 100.0f / (float)totalTime );
 8002794:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002798:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 800279c:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 80027a0:	212c      	movs	r1, #44	@ 0x2c
 80027a2:	fb01 f303 	mul.w	r3, r1, r3
 80027a6:	4413      	add	r3, r2
 80027a8:	3318      	adds	r3, #24
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	ee07 3a90 	vmov	s15, r3
 80027b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027b4:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 800295c <ConsolePrintTaskStats+0x23c>
 80027b8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80027bc:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 80027c0:	f5a3 63b3 	sub.w	r3, r3, #1432	@ 0x598
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	ee07 3a90 	vmov	s15, r3
 80027ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027d2:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 80027d6:	edc3 7a00 	vstr	s15, [r3]
		char* state = (tasks[i].eCurrentState == eRunning) ? "RUN    " :
 80027da:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 80027de:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 80027e2:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 80027e6:	212c      	movs	r1, #44	@ 0x2c
 80027e8:	fb01 f303 	mul.w	r3, r1, r3
 80027ec:	4413      	add	r3, r2
 80027ee:	330c      	adds	r3, #12
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d041      	beq.n	800287a <ConsolePrintTaskStats+0x15a>
			(tasks[i].eCurrentState == eReady) ? "READY  " :
 80027f6:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 80027fa:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 80027fe:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 8002802:	212c      	movs	r1, #44	@ 0x2c
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	4413      	add	r3, r2
 800280a:	330c      	adds	r3, #12
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d031      	beq.n	8002876 <ConsolePrintTaskStats+0x156>
			(tasks[i].eCurrentState == eBlocked) ? "BLOCKED" :
 8002812:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002816:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 800281a:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 800281e:	212c      	movs	r1, #44	@ 0x2c
 8002820:	fb01 f303 	mul.w	r3, r1, r3
 8002824:	4413      	add	r3, r2
 8002826:	330c      	adds	r3, #12
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d021      	beq.n	8002872 <ConsolePrintTaskStats+0x152>
			(tasks[i].eCurrentState == eSuspended) ? "SUSPEND" :
 800282e:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002832:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 8002836:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 800283a:	212c      	movs	r1, #44	@ 0x2c
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	4413      	add	r3, r2
 8002842:	330c      	adds	r3, #12
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b03      	cmp	r3, #3
 8002848:	d011      	beq.n	800286e <ConsolePrintTaskStats+0x14e>
			(tasks[i].eCurrentState == eDeleted) ? "DELETED" : "INVALID";
 800284a:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 800284e:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 8002852:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 8002856:	212c      	movs	r1, #44	@ 0x2c
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	4413      	add	r3, r2
 800285e:	330c      	adds	r3, #12
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b04      	cmp	r3, #4
 8002864:	d101      	bne.n	800286a <ConsolePrintTaskStats+0x14a>
 8002866:	4b3e      	ldr	r3, [pc, #248]	@ (8002960 <ConsolePrintTaskStats+0x240>)
 8002868:	e008      	b.n	800287c <ConsolePrintTaskStats+0x15c>
 800286a:	4b3e      	ldr	r3, [pc, #248]	@ (8002964 <ConsolePrintTaskStats+0x244>)
 800286c:	e006      	b.n	800287c <ConsolePrintTaskStats+0x15c>
			(tasks[i].eCurrentState == eSuspended) ? "SUSPEND" :
 800286e:	4b3e      	ldr	r3, [pc, #248]	@ (8002968 <ConsolePrintTaskStats+0x248>)
 8002870:	e004      	b.n	800287c <ConsolePrintTaskStats+0x15c>
			(tasks[i].eCurrentState == eBlocked) ? "BLOCKED" :
 8002872:	4b3e      	ldr	r3, [pc, #248]	@ (800296c <ConsolePrintTaskStats+0x24c>)
 8002874:	e002      	b.n	800287c <ConsolePrintTaskStats+0x15c>
			(tasks[i].eCurrentState == eReady) ? "READY  " :
 8002876:	4b3e      	ldr	r3, [pc, #248]	@ (8002970 <ConsolePrintTaskStats+0x250>)
 8002878:	e000      	b.n	800287c <ConsolePrintTaskStats+0x15c>
		char* state = (tasks[i].eCurrentState == eRunning) ? "RUN    " :
 800287a:	4b3e      	ldr	r3, [pc, #248]	@ (8002974 <ConsolePrintTaskStats+0x254>)
 800287c:	f8c7 3594 	str.w	r3, [r7, #1428]	@ 0x594
		printf("| %2.2d | %-8.8s | %4.4d     | %4.4d     | %s | %10.10u | %5.1f |\r\n",
			(int)tasks[i].xTaskNumber, (char*)tasks[i].pcTaskName, (int)tasks[i].uxCurrentPriority, 
 8002880:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002884:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 8002888:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 800288c:	212c      	movs	r1, #44	@ 0x2c
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	4413      	add	r3, r2
 8002894:	3308      	adds	r3, #8
 8002896:	681b      	ldr	r3, [r3, #0]
		printf("| %2.2d | %-8.8s | %4.4d     | %4.4d     | %s | %10.10u | %5.1f |\r\n",
 8002898:	4698      	mov	r8, r3
			(int)tasks[i].xTaskNumber, (char*)tasks[i].pcTaskName, (int)tasks[i].uxCurrentPriority, 
 800289a:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 800289e:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 80028a2:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 80028a6:	212c      	movs	r1, #44	@ 0x2c
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	3304      	adds	r3, #4
 80028b0:	681d      	ldr	r5, [r3, #0]
 80028b2:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 80028b6:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 80028ba:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 80028be:	212c      	movs	r1, #44	@ 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	3310      	adds	r3, #16
 80028c8:	681b      	ldr	r3, [r3, #0]
		printf("| %2.2d | %-8.8s | %4.4d     | %4.4d     | %s | %10.10u | %5.1f |\r\n",
 80028ca:	4699      	mov	r9, r3
			(int)tasks[i].uxBasePriority, (char*)state, (unsigned int)tasks[i].ulRunTimeCounter,
 80028cc:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 80028d0:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 80028d4:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 80028d8:	212c      	movs	r1, #44	@ 0x2c
 80028da:	fb01 f303 	mul.w	r3, r1, r3
 80028de:	4413      	add	r3, r2
 80028e0:	3314      	adds	r3, #20
 80028e2:	681b      	ldr	r3, [r3, #0]
		printf("| %2.2d | %-8.8s | %4.4d     | %4.4d     | %s | %10.10u | %5.1f |\r\n",
 80028e4:	461e      	mov	r6, r3
			(int)tasks[i].uxBasePriority, (char*)state, (unsigned int)tasks[i].ulRunTimeCounter,
 80028e6:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 80028ea:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 80028ee:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 80028f2:	212c      	movs	r1, #44	@ 0x2c
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	3318      	adds	r3, #24
 80028fc:	681c      	ldr	r4, [r3, #0]
		printf("| %2.2d | %-8.8s | %4.4d     | %4.4d     | %s | %10.10u | %5.1f |\r\n",
 80028fe:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8002902:	6818      	ldr	r0, [r3, #0]
 8002904:	f7fd fe50 	bl	80005a8 <__aeabi_f2d>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002910:	9402      	str	r4, [sp, #8]
 8002912:	f8d7 3594 	ldr.w	r3, [r7, #1428]	@ 0x594
 8002916:	9301      	str	r3, [sp, #4]
 8002918:	9600      	str	r6, [sp, #0]
 800291a:	464b      	mov	r3, r9
 800291c:	462a      	mov	r2, r5
 800291e:	4641      	mov	r1, r8
 8002920:	4815      	ldr	r0, [pc, #84]	@ (8002978 <ConsolePrintTaskStats+0x258>)
 8002922:	f00d faa5 	bl	800fe70 <iprintf>
			(float)relativeRuntime);
		printf("|----|----------|----------|----------|---------|------------|-------|\r\n");
 8002926:	480b      	ldr	r0, [pc, #44]	@ (8002954 <ConsolePrintTaskStats+0x234>)
 8002928:	f00d fb12 	bl	800ff50 <puts>
	for (unsigned int i = 0; i < numFeedback; i++ )
 800292c:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 8002930:	3301      	adds	r3, #1
 8002932:	f8c7 35a4 	str.w	r3, [r7, #1444]	@ 0x5a4
 8002936:	f8d7 25a4 	ldr.w	r2, [r7, #1444]	@ 0x5a4
 800293a:	f8d7 359c 	ldr.w	r3, [r7, #1436]	@ 0x59c
 800293e:	429a      	cmp	r2, r3
 8002940:	f4ff af28 	bcc.w	8002794 <ConsolePrintTaskStats+0x74>
	}

	return 0;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	f207 57ac 	addw	r7, r7, #1452	@ 0x5ac
 800294c:	46bd      	mov	sp, r7
 800294e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002952:	bf00      	nop
 8002954:	08013104 	.word	0x08013104
 8002958:	0801314c 	.word	0x0801314c
 800295c:	42c80000 	.word	0x42c80000
 8002960:	08013194 	.word	0x08013194
 8002964:	0801319c 	.word	0x0801319c
 8002968:	080131a4 	.word	0x080131a4
 800296c:	080131ac 	.word	0x080131ac
 8002970:	080131b4 	.word	0x080131b4
 8002974:	080131bc 	.word	0x080131bc
 8002978:	080131c4 	.word	0x080131c4

0800297c <ConsolePrintKernelVersion>:
#endif

// --------------------------------------------------------------------------------------------------------------------
static int ConsolePrintKernelVersion(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	617b      	str	r3, [r7, #20]
	(void)h;
	(void)argc;
	(void)argv;

	printf("FreeRTOS Kernel %s", tskKERNEL_VERSION_NUMBER);
 800298c:	4904      	ldr	r1, [pc, #16]	@ (80029a0 <ConsolePrintKernelVersion+0x24>)
 800298e:	4805      	ldr	r0, [pc, #20]	@ (80029a4 <ConsolePrintKernelVersion+0x28>)
 8002990:	f00d fa6e 	bl	800fe70 <iprintf>
	return 0;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	08013208 	.word	0x08013208
 80029a4:	08013210 	.word	0x08013210

080029a8 <ConsoleWhoAmI>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleWhoAmI(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	613b      	str	r3, [r7, #16]
	(void)h;
	(void)argc;
	(void)argv;

#if CONSOLE_USE_DYNAMIC_USERNAME != 0
	char* usernamePtr = getenv("USERNAME");
 80029b8:	4808      	ldr	r0, [pc, #32]	@ (80029dc <ConsoleWhoAmI+0x34>)
 80029ba:	f00b f9ef 	bl	800dd9c <getenv>
 80029be:	6178      	str	r0, [r7, #20]
	if ( usernamePtr == 0 ) usernamePtr = CONSOLE_USERNAME;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <ConsoleWhoAmI+0x22>
 80029c6:	4b06      	ldr	r3, [pc, #24]	@ (80029e0 <ConsoleWhoAmI+0x38>)
 80029c8:	617b      	str	r3, [r7, #20]
#else
	char* usernamePtr = CONSOLE_USERNAME;
#endif

	printf("%s", usernamePtr);
 80029ca:	6979      	ldr	r1, [r7, #20]
 80029cc:	4805      	ldr	r0, [pc, #20]	@ (80029e4 <ConsoleWhoAmI+0x3c>)
 80029ce:	f00d fa4f 	bl	800fe70 <iprintf>
	return 0;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	08012ef0 	.word	0x08012ef0
 80029e0:	08012efc 	.word	0x08012efc
 80029e4:	08013224 	.word	0x08013224

080029e8 <ConsoleExit>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleExit(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	617b      	str	r3, [r7, #20]
	(void)h;
	(void)argc;
	(void)argv;

	h->cancel = 1;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2201      	movs	r2, #1
 80029fc:	621a      	str	r2, [r3, #32]
	return 0;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	371c      	adds	r7, #28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <ConsoleMallInfo>:

//---------------------------------------------------------------------------------------------------------------------
static int ConsoleMallInfo(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b090      	sub	sp, #64	@ 0x40
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	(void)h;
	(void)argc;
	(void)argv;

#ifndef WIN32
	struct mallinfo info = mallinfo();
 8002a1c:	f107 0314 	add.w	r3, r7, #20
 8002a20:	4618      	mov	r0, r3
 8002a22:	f00b fab5 	bl	800df90 <mallinfo>
	printf("arena    : %d\r\n", info.arena);
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	480e      	ldr	r0, [pc, #56]	@ (8002a64 <ConsoleMallInfo+0x58>)
 8002a2c:	f00d fa20 	bl	800fe70 <iprintf>
	printf("ordblks  : %d\r\n", info.ordblks);
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	4619      	mov	r1, r3
 8002a34:	480c      	ldr	r0, [pc, #48]	@ (8002a68 <ConsoleMallInfo+0x5c>)
 8002a36:	f00d fa1b 	bl	800fe70 <iprintf>
	printf("uordblks : %d\r\n", info.uordblks);
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	480b      	ldr	r0, [pc, #44]	@ (8002a6c <ConsoleMallInfo+0x60>)
 8002a40:	f00d fa16 	bl	800fe70 <iprintf>
	printf("fordblks : %d\r\n", info.fordblks);
 8002a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a46:	4619      	mov	r1, r3
 8002a48:	4809      	ldr	r0, [pc, #36]	@ (8002a70 <ConsoleMallInfo+0x64>)
 8002a4a:	f00d fa11 	bl	800fe70 <iprintf>
	printf("keepcost : %d\r\n", info.keepcost);
 8002a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a50:	4619      	mov	r1, r3
 8002a52:	4808      	ldr	r0, [pc, #32]	@ (8002a74 <ConsoleMallInfo+0x68>)
 8002a54:	f00d fa0c 	bl	800fe70 <iprintf>
	return 0;
 8002a58:	2300      	movs	r3, #0
#else
	printf("WIN32 has quite a lot!");
	return -1;
#endif
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3740      	adds	r7, #64	@ 0x40
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	08013228 	.word	0x08013228
 8002a68:	08013238 	.word	0x08013238
 8002a6c:	08013248 	.word	0x08013248
 8002a70:	08013258 	.word	0x08013258
 8002a74:	08013268 	.word	0x08013268

08002a78 <ConsoleGetEnv>:

//---------------------------------------------------------------------------------------------------------------------
static int ConsoleGetEnv(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	617b      	str	r3, [r7, #20]
	(void)h;

	if ( argc > 0 )
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	dd1a      	ble.n	8002ac4 <ConsoleGetEnv+0x4c>
	{
		char* envValue = getenv(argv[0]);
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f00b f982 	bl	800dd9c <getenv>
 8002a98:	6138      	str	r0, [r7, #16]
		if ( envValue != NULL )
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <ConsoleGetEnv+0x3a>
		{
			printf("%s=%s", argv[0], envValue);
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	480b      	ldr	r0, [pc, #44]	@ (8002ad8 <ConsoleGetEnv+0x60>)
 8002aaa:	f00d f9e1 	bl	800fe70 <iprintf>
			return 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	e00d      	b.n	8002ace <ConsoleGetEnv+0x56>
		}
		else
		{
			printf("%s is no environment variable", argv[0]);
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4808      	ldr	r0, [pc, #32]	@ (8002adc <ConsoleGetEnv+0x64>)
 8002aba:	f00d f9d9 	bl	800fe70 <iprintf>
			return -1;
 8002abe:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac2:	e004      	b.n	8002ace <ConsoleGetEnv+0x56>
		}
	}
	else
	{
		printf("invalid number of arguments");
 8002ac4:	4806      	ldr	r0, [pc, #24]	@ (8002ae0 <ConsoleGetEnv+0x68>)
 8002ac6:	f00d f9d3 	bl	800fe70 <iprintf>
		return -1;
 8002aca:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	08013278 	.word	0x08013278
 8002adc:	08013280 	.word	0x08013280
 8002ae0:	080132a0 	.word	0x080132a0

08002ae4 <ConsoleSetEnv>:

//---------------------------------------------------------------------------------------------------------------------
static int ConsoleSetEnv(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	617b      	str	r3, [r7, #20]
	(void)h;
	if ( argc > 1 )
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	dd1a      	ble.n	8002b30 <ConsoleSetEnv+0x4c>
	{
		int result = setenv(argv[0], argv[1], 1);
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	3304      	adds	r3, #4
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2201      	movs	r2, #1
 8002b06:	4619      	mov	r1, r3
 8002b08:	f00c f860 	bl	800ebcc <setenv>
 8002b0c:	6138      	str	r0, [r7, #16]
		if ( result == 0 )
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <ConsoleSetEnv+0x34>
		{
			return 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	e010      	b.n	8002b3a <ConsoleSetEnv+0x56>
		}
		else
		{
			printf("could not set %s with value %s", argv[0], argv[1]);
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	6819      	ldr	r1, [r3, #0]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	3304      	adds	r3, #4
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	4807      	ldr	r0, [pc, #28]	@ (8002b44 <ConsoleSetEnv+0x60>)
 8002b26:	f00d f9a3 	bl	800fe70 <iprintf>
			return -1;
 8002b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2e:	e004      	b.n	8002b3a <ConsoleSetEnv+0x56>
		}
	}
	else
	{
		printf("invalid number of arguments");
 8002b30:	4805      	ldr	r0, [pc, #20]	@ (8002b48 <ConsoleSetEnv+0x64>)
 8002b32:	f00d f99d 	bl	800fe70 <iprintf>
		return -1;
 8002b36:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	080132bc 	.word	0x080132bc
 8002b48:	080132a0 	.word	0x080132a0

08002b4c <ConsoleAliasConfig>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleAliasConfig(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b0a8      	sub	sp, #160	@ 0xa0
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	if ( argc == 0 )
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d105      	bne.n	8002b70 <ConsoleAliasConfig+0x24>
	{
		printf("invalid number of arguments");
 8002b64:	4855      	ldr	r0, [pc, #340]	@ (8002cbc <ConsoleAliasConfig+0x170>)
 8002b66:	f00d f983 	bl	800fe70 <iprintf>
		return -1;
 8002b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6e:	e0a0      	b.n	8002cb2 <ConsoleAliasConfig+0x166>
	}

	if( argc == 1 )
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d114      	bne.n	8002ba0 <ConsoleAliasConfig+0x54>
	{
		if ( CONSOLE_RemoveAliasOrCommand(h, argv[0]) == 0 )
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002b80:	f000 fb60 	bl	8003244 <CONSOLE_RemoveAliasOrCommand>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d104      	bne.n	8002b94 <ConsoleAliasConfig+0x48>
		{
			printf("alias removed successfully");
 8002b8a:	484d      	ldr	r0, [pc, #308]	@ (8002cc0 <ConsoleAliasConfig+0x174>)
 8002b8c:	f00d f970 	bl	800fe70 <iprintf>
			return 0;
 8002b90:	2300      	movs	r3, #0
 8002b92:	e08e      	b.n	8002cb2 <ConsoleAliasConfig+0x166>
		}
		else
		{
			printf("alias was not removed");
 8002b94:	484b      	ldr	r0, [pc, #300]	@ (8002cc4 <ConsoleAliasConfig+0x178>)
 8002b96:	f00d f96b 	bl	800fe70 <iprintf>
			return -1;
 8002b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9e:	e088      	b.n	8002cb2 <ConsoleAliasConfig+0x166>
		}
	}
	else
	{
		char aliasBuffer[CONSOLE_LINE_SIZE];
		unsigned int cmdPtr = 1;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		unsigned int buffPtr = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		memset(aliasBuffer, 0, sizeof(aliasBuffer));
 8002bac:	f107 0314 	add.w	r3, r7, #20
 8002bb0:	2278      	movs	r2, #120	@ 0x78
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f00d fbb1 	bl	801031c <memset>
		for( unsigned int i = 0; i < sizeof(aliasBuffer)/sizeof(*aliasBuffer); i++)
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002bc0:	e05d      	b.n	8002c7e <ConsoleAliasConfig+0x132>
		{
			if ( cmdPtr < (unsigned int)argc )
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d24e      	bcs.n	8002c6a <ConsoleAliasConfig+0x11e>
			{
				int argLen = strnlen(argv[cmdPtr], CONSOLE_LINE_SIZE);
 8002bcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2178      	movs	r1, #120	@ 0x78
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f00d fbc5 	bl	801036a <strnlen>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				if ( argLen > 0 )
 8002be6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	dd37      	ble.n	8002c5e <ConsoleAliasConfig+0x112>
				{
					if ( (buffPtr+1) + argLen >= CONSOLE_LINE_SIZE )
 8002bee:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002bf2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	2b77      	cmp	r3, #119	@ 0x77
 8002bfc:	d905      	bls.n	8002c0a <ConsoleAliasConfig+0xbe>
					{
						printf("the sum of the alias parameters is longer than the max line buffer size!");
 8002bfe:	4832      	ldr	r0, [pc, #200]	@ (8002cc8 <ConsoleAliasConfig+0x17c>)
 8002c00:	f00d f936 	bl	800fe70 <iprintf>
						return -1;
 8002c04:	f04f 33ff 	mov.w	r3, #4294967295
 8002c08:	e053      	b.n	8002cb2 <ConsoleAliasConfig+0x166>
					}
					else
					{
						memcpy(&aliasBuffer[buffPtr], argv[cmdPtr], argLen);
 8002c0a:	f107 0214 	add.w	r2, r7, #20
 8002c0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c12:	18d0      	adds	r0, r2, r3
 8002c14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002c24:	4619      	mov	r1, r3
 8002c26:	f00d fcdf 	bl	80105e8 <memcpy>
						buffPtr += argLen;
 8002c2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c2e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002c32:	4413      	add	r3, r2
 8002c34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
						if ( ( cmdPtr + 1) != (unsigned int)argc )
 8002c38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d012      	beq.n	8002c6a <ConsoleAliasConfig+0x11e>
						{
							aliasBuffer[buffPtr] = ' ';
 8002c44:	f107 0214 	add.w	r2, r7, #20
 8002c48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c4c:	4413      	add	r3, r2
 8002c4e:	2220      	movs	r2, #32
 8002c50:	701a      	strb	r2, [r3, #0]
							buffPtr += 1;
 8002c52:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c56:	3301      	adds	r3, #1
 8002c58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c5c:	e005      	b.n	8002c6a <ConsoleAliasConfig+0x11e>
						}
					}
				}
				else
				{
					printf("at least one of the alias parameters is too long for mapping");
 8002c5e:	481b      	ldr	r0, [pc, #108]	@ (8002ccc <ConsoleAliasConfig+0x180>)
 8002c60:	f00d f906 	bl	800fe70 <iprintf>
					return -1;
 8002c64:	f04f 33ff 	mov.w	r3, #4294967295
 8002c68:	e023      	b.n	8002cb2 <ConsoleAliasConfig+0x166>
				}
			}
			cmdPtr++;
 8002c6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c6e:	3301      	adds	r3, #1
 8002c70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		for( unsigned int i = 0; i < sizeof(aliasBuffer)/sizeof(*aliasBuffer); i++)
 8002c74:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c78:	3301      	adds	r3, #1
 8002c7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c82:	2b77      	cmp	r3, #119	@ 0x77
 8002c84:	d99d      	bls.n	8002bc2 <ConsoleAliasConfig+0x76>
		}
		if ( CONSOLE_RegisterAlias(h, argv[0], aliasBuffer) == 0 )
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f107 0214 	add.w	r2, r7, #20
 8002c8e:	4619      	mov	r1, r3
 8002c90:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002c94:	f000 fa0d 	bl	80030b2 <CONSOLE_RegisterAlias>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d104      	bne.n	8002ca8 <ConsoleAliasConfig+0x15c>
		{
			printf("alias created successfully");
 8002c9e:	480c      	ldr	r0, [pc, #48]	@ (8002cd0 <ConsoleAliasConfig+0x184>)
 8002ca0:	f00d f8e6 	bl	800fe70 <iprintf>
			return 0;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	e004      	b.n	8002cb2 <ConsoleAliasConfig+0x166>
		}
		else
		{
			printf("alias was not created");
 8002ca8:	480a      	ldr	r0, [pc, #40]	@ (8002cd4 <ConsoleAliasConfig+0x188>)
 8002caa:	f00d f8e1 	bl	800fe70 <iprintf>
			return -1;
 8002cae:	f04f 33ff 	mov.w	r3, #4294967295
		}
	}
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	37a0      	adds	r7, #160	@ 0xa0
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	080132a0 	.word	0x080132a0
 8002cc0:	080132dc 	.word	0x080132dc
 8002cc4:	080132f8 	.word	0x080132f8
 8002cc8:	08013310 	.word	0x08013310
 8002ccc:	0801335c 	.word	0x0801335c
 8002cd0:	0801339c 	.word	0x0801339c
 8002cd4:	080133b8 	.word	0x080133b8

08002cd8 <ConsoleRegisterBasicCommands>:

// --------------------------------------------------------------------------------------------------------------------
static void ConsoleRegisterBasicCommands( ConsoleHandle_t h )
// --------------------------------------------------------------------------------------------------------------------
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	6078      	str	r0, [r7, #4]
	CONSOLE_RegisterCommand(h, "help",     "<<help>> prints the help of all commands.\r\nIf a <<command>> is passed as argument to help,\r\nonly the help text of this command will be printed on the console.",
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	4b2c      	ldr	r3, [pc, #176]	@ (8002d98 <ConsoleRegisterBasicCommands+0xc0>)
 8002ce6:	4a2d      	ldr	r2, [pc, #180]	@ (8002d9c <ConsoleRegisterBasicCommands+0xc4>)
 8002ce8:	492d      	ldr	r1, [pc, #180]	@ (8002da0 <ConsoleRegisterBasicCommands+0xc8>)
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f912 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsolePrintHelp, h);
	CONSOLE_RegisterCommand(h, "version",  "<<version>> prints the kernel version of the FreeRTOS kernel with which\r\n the current project has been built.",
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8002da4 <ConsoleRegisterBasicCommands+0xcc>)
 8002cf6:	4a2c      	ldr	r2, [pc, #176]	@ (8002da8 <ConsoleRegisterBasicCommands+0xd0>)
 8002cf8:	492c      	ldr	r1, [pc, #176]	@ (8002dac <ConsoleRegisterBasicCommands+0xd4>)
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f90a 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsolePrintKernelVersion, h);
	CONSOLE_RegisterCommand(h, "whoami",   "<<whoami>> prints the current username which is set in this console instance",
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	4b2a      	ldr	r3, [pc, #168]	@ (8002db0 <ConsoleRegisterBasicCommands+0xd8>)
 8002d06:	4a2b      	ldr	r2, [pc, #172]	@ (8002db4 <ConsoleRegisterBasicCommands+0xdc>)
 8002d08:	492b      	ldr	r1, [pc, #172]	@ (8002db8 <ConsoleRegisterBasicCommands+0xe0>)
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f902 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleWhoAmI, h);
	CONSOLE_RegisterCommand(h, "mallinfo", "<<mallinfo>> returns a structure describing the current state of\r\nmemory allocation.  The structure is defined in malloc.h.  The\r\nfollowing fields are defined: <<arena>> is the total amount of space\r\nin the heap; <<ordblks>> is the number of chunks which are not in use;\r\n<<uordblks>> is the total amount of space allocated by <<malloc>>;\r\n<<fordblks>> is the total amount of space not in use; <<keepcost>> is\r\nthe size of the top most memory block.\r\n",
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	4b29      	ldr	r3, [pc, #164]	@ (8002dbc <ConsoleRegisterBasicCommands+0xe4>)
 8002d16:	4a2a      	ldr	r2, [pc, #168]	@ (8002dc0 <ConsoleRegisterBasicCommands+0xe8>)
 8002d18:	492a      	ldr	r1, [pc, #168]	@ (8002dc4 <ConsoleRegisterBasicCommands+0xec>)
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f8fa 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleMallInfo, h);
	CONSOLE_RegisterCommand(h, "getenv",   "<<getenv>> searches the list of environment variable names and values\r\n(using the global pointer ``<<char **environ>>'') for a variable whose\r\nname matches the string at <[name]>.  If a variable name matches,\r\n<<getenv>> returns a pointer to the associated value.",
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	4b28      	ldr	r3, [pc, #160]	@ (8002dc8 <ConsoleRegisterBasicCommands+0xf0>)
 8002d26:	4a29      	ldr	r2, [pc, #164]	@ (8002dcc <ConsoleRegisterBasicCommands+0xf4>)
 8002d28:	4929      	ldr	r1, [pc, #164]	@ (8002dd0 <ConsoleRegisterBasicCommands+0xf8>)
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f8f2 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleGetEnv, h);
	CONSOLE_RegisterCommand(h, "setenv",   "<<setenv>> is similar to <<getenv>> but it sets a global variable\r\nin the list of environment variable names and values",
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	4b27      	ldr	r3, [pc, #156]	@ (8002dd4 <ConsoleRegisterBasicCommands+0xfc>)
 8002d36:	4a28      	ldr	r2, [pc, #160]	@ (8002dd8 <ConsoleRegisterBasicCommands+0x100>)
 8002d38:	4928      	ldr	r1, [pc, #160]	@ (8002ddc <ConsoleRegisterBasicCommands+0x104>)
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f8ea 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleSetEnv, h);
	CONSOLE_RegisterCommand(h, "exit",     "<<exit>> leaves the running console instance and stops the consoel thread.\r\n It clears all given resources.\r\nThere is no console support after calling <<exit>> anymore",
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	4b26      	ldr	r3, [pc, #152]	@ (8002de0 <ConsoleRegisterBasicCommands+0x108>)
 8002d46:	4a27      	ldr	r2, [pc, #156]	@ (8002de4 <ConsoleRegisterBasicCommands+0x10c>)
 8002d48:	4927      	ldr	r1, [pc, #156]	@ (8002de8 <ConsoleRegisterBasicCommands+0x110>)
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f8e2 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleExit, h);
	CONSOLE_RegisterCommand(h, "reset",     "<<reset>> executes a soft reset of the MCU.",
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	4b25      	ldr	r3, [pc, #148]	@ (8002dec <ConsoleRegisterBasicCommands+0x114>)
 8002d56:	4a26      	ldr	r2, [pc, #152]	@ (8002df0 <ConsoleRegisterBasicCommands+0x118>)
 8002d58:	4926      	ldr	r1, [pc, #152]	@ (8002df4 <ConsoleRegisterBasicCommands+0x11c>)
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f8da 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleExecReset, h);
	CONSOLE_RegisterCommand(h, "ticks",     "<<ticks>> prints the time elapsed since system\r\nis running in the unit of ticks.",
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	4b24      	ldr	r3, [pc, #144]	@ (8002df8 <ConsoleRegisterBasicCommands+0x120>)
 8002d66:	4a25      	ldr	r2, [pc, #148]	@ (8002dfc <ConsoleRegisterBasicCommands+0x124>)
 8002d68:	4925      	ldr	r1, [pc, #148]	@ (8002e00 <ConsoleRegisterBasicCommands+0x128>)
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f8d2 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsolePrintKernelTicks, h);
	CONSOLE_RegisterCommand(h, "alias",     "<<alias>>",
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	4b23      	ldr	r3, [pc, #140]	@ (8002e04 <ConsoleRegisterBasicCommands+0x12c>)
 8002d76:	4a24      	ldr	r2, [pc, #144]	@ (8002e08 <ConsoleRegisterBasicCommands+0x130>)
 8002d78:	4924      	ldr	r1, [pc, #144]	@ (8002e0c <ConsoleRegisterBasicCommands+0x134>)
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f8ca 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleAliasConfig, h);
#if defined(configGENERATE_RUN_TIME_STATS) && (configGENERATE_RUN_TIME_STATS != 0)
	CONSOLE_RegisterCommand(h, "tasks",     "<<tasks>> prints information about the active tasks\r\nand prints also runtime information.",
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	4b22      	ldr	r3, [pc, #136]	@ (8002e10 <ConsoleRegisterBasicCommands+0x138>)
 8002d86:	4a23      	ldr	r2, [pc, #140]	@ (8002e14 <ConsoleRegisterBasicCommands+0x13c>)
 8002d88:	4923      	ldr	r1, [pc, #140]	@ (8002e18 <ConsoleRegisterBasicCommands+0x140>)
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f8c2 	bl	8002f14 <CONSOLE_RegisterCommand>
		ConsolePrintTaskStats, h);
#endif
}
 8002d90:	bf00      	nop
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	080025b9 	.word	0x080025b9
 8002d9c:	080133d0 	.word	0x080133d0
 8002da0:	08013470 	.word	0x08013470
 8002da4:	0800297d 	.word	0x0800297d
 8002da8:	08013478 	.word	0x08013478
 8002dac:	080134e8 	.word	0x080134e8
 8002db0:	080029a9 	.word	0x080029a9
 8002db4:	080134f0 	.word	0x080134f0
 8002db8:	08013540 	.word	0x08013540
 8002dbc:	08002a0d 	.word	0x08002a0d
 8002dc0:	08013548 	.word	0x08013548
 8002dc4:	0801370c 	.word	0x0801370c
 8002dc8:	08002a79 	.word	0x08002a79
 8002dcc:	08013718 	.word	0x08013718
 8002dd0:	08013820 	.word	0x08013820
 8002dd4:	08002ae5 	.word	0x08002ae5
 8002dd8:	08013828 	.word	0x08013828
 8002ddc:	080138a0 	.word	0x080138a0
 8002de0:	080029e9 	.word	0x080029e9
 8002de4:	080138a8 	.word	0x080138a8
 8002de8:	08013950 	.word	0x08013950
 8002dec:	080026e9 	.word	0x080026e9
 8002df0:	08013958 	.word	0x08013958
 8002df4:	08013984 	.word	0x08013984
 8002df8:	080026f9 	.word	0x080026f9
 8002dfc:	0801398c 	.word	0x0801398c
 8002e00:	080139e0 	.word	0x080139e0
 8002e04:	08002b4d 	.word	0x08002b4d
 8002e08:	080139e8 	.word	0x080139e8
 8002e0c:	080139f4 	.word	0x080139f4
 8002e10:	08002721 	.word	0x08002721
 8002e14:	080139fc 	.word	0x080139fc
 8002e18:	08013a58 	.word	0x08013a58

08002e1c <CONSOLE_CreateInstance>:

// --------------------------------------------------------------------------------------------------------------------
ConsoleHandle_t CONSOLE_CreateInstance( unsigned int uxStackDepth, int xPrio )
// --------------------------------------------------------------------------------------------------------------------
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
#define ON_NULL_GOTO_ERROR(x) do { if ((x) == NULL) goto error; } while(0);
	struct ConsoleHandle* h = calloc(sizeof(struct ConsoleHandle), 1);
 8002e26:	2101      	movs	r1, #1
 8002e28:	f44f 6084 	mov.w	r0, #1056	@ 0x420
 8002e2c:	f00a ff9a 	bl	800dd64 <calloc>
 8002e30:	4603      	mov	r3, r0
 8002e32:	60fb      	str	r3, [r7, #12]
	ON_NULL_GOTO_ERROR(h);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d051      	beq.n	8002ede <CONSOLE_CreateInstance+0xc2>

	h->cState.lockGuard = xSemaphoreCreateRecursiveMutex();
 8002e3a:	2004      	movs	r0, #4
 8002e3c:	f007 ff8b 	bl	800ad56 <xQueueCreateMutex>
 8002e40:	4602      	mov	r2, r0
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	601a      	str	r2, [r3, #0]
	ON_NULL_GOTO_ERROR(h->cState.lockGuard);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d047      	beq.n	8002ede <CONSOLE_CreateInstance+0xc2>
	h->pState.state = ctrlpsIDLE_DETECT;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	721a      	strb	r2, [r3, #8]
	h->pState.length = 0;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	611a      	str	r2, [r3, #16]
	h->pState.maxLength = CONSOLE_LINE_SIZE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2278      	movs	r2, #120	@ 0x78
 8002e5e:	615a      	str	r2, [r3, #20]
	h->pState.type = ctrlUNKNOWN;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002e66:	815a      	strh	r2, [r3, #10]
	h->pState.buff = NULL;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	619a      	str	r2, [r3, #24]
	h->cancel = 0;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	621a      	str	r2, [r3, #32]
	h->pendingRedirect = 0;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
	h->pendingRdStream = NULL;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
	h->pendingWrStream = NULL;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414

	LIST_INIT(&h->cState.commands);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	605a      	str	r2, [r3, #4]
	ConsoleRegisterBasicCommands(h);
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f7ff ff20 	bl	8002cd8 <ConsoleRegisterBasicCommands>

	memset(h->history.lines, 0, sizeof(h->history.lines));
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	3324      	adds	r3, #36	@ 0x24
 8002e9c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f00d fa3a 	bl	801031c <memset>
	h->history.linePtr = h->history.lineHead = 0;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

	xTaskCreate(ConsoleFunction, "console", uxStackDepth, h, xPrio, &h->tHandle);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	321c      	adds	r2, #28
 8002ec2:	9201      	str	r2, [sp, #4]
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	4910      	ldr	r1, [pc, #64]	@ (8002f0c <CONSOLE_CreateInstance+0xf0>)
 8002ecc:	4810      	ldr	r0, [pc, #64]	@ (8002f10 <CONSOLE_CreateInstance+0xf4>)
 8002ece:	f008 fcaf 	bl	800b830 <xTaskCreate>
	ON_NULL_GOTO_ERROR(h->tHandle);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <CONSOLE_CreateInstance+0xc2>
	return h;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	e012      	b.n	8002f04 <CONSOLE_CreateInstance+0xe8>

error:
	if ( h != NULL )
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00e      	beq.n	8002f02 <CONSOLE_CreateInstance+0xe6>
	{
		if ( h->cState.lockGuard != NULL )
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d007      	beq.n	8002efc <CONSOLE_CreateInstance+0xe0>
		{
			vSemaphoreDelete(h->cState.lockGuard);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f008 fae1 	bl	800b4b8 <vQueueDelete>
			h->cState.lockGuard = NULL;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
		}

		free(h);
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f00a ff9d 	bl	800de3c <free>
	}

	return NULL;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	08013a60 	.word	0x08013a60
 8002f10:	08001c35 	.word	0x08001c35

08002f14 <CONSOLE_RegisterCommand>:

// --------------------------------------------------------------------------------------------------------------------
int CONSOLE_RegisterCommand( ConsoleHandle_t h, char* cmd, char* help, CONSOLE_CommandFunc func, void* context )
// --------------------------------------------------------------------------------------------------------------------
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b08c      	sub	sp, #48	@ 0x30
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	603b      	str	r3, [r7, #0]
	int result = -1;
 8002f22:	f04f 33ff 	mov.w	r3, #4294967295
 8002f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if ( cmd == NULL || help == NULL || func == NULL ) return result;
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d005      	beq.n	8002f3a <CONSOLE_RegisterCommand+0x26>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <CONSOLE_RegisterCommand+0x26>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <CONSOLE_RegisterCommand+0x2a>
 8002f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f3c:	e0b5      	b.n	80030aa <CONSOLE_RegisterCommand+0x196>
	if ( *cmd == '\0' || *help == '\0' ) return result;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <CONSOLE_RegisterCommand+0x3a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <CONSOLE_RegisterCommand+0x3e>
 8002f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f50:	e0ab      	b.n	80030aa <CONSOLE_RegisterCommand+0x196>
	int cmdLen  = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	623b      	str	r3, [r7, #32]
	int helpLen = 0;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61fb      	str	r3, [r7, #28]
	if ( (cmdLen  = (int)strnlen(cmd, CONSOLE_COMMAND_MAX_LENGTH+1) )   > CONSOLE_COMMAND_MAX_LENGTH  ) return result;
 8002f5a:	2141      	movs	r1, #65	@ 0x41
 8002f5c:	68b8      	ldr	r0, [r7, #8]
 8002f5e:	f00d fa04 	bl	801036a <strnlen>
 8002f62:	4603      	mov	r3, r0
 8002f64:	623b      	str	r3, [r7, #32]
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	2b40      	cmp	r3, #64	@ 0x40
 8002f6a:	dd01      	ble.n	8002f70 <CONSOLE_RegisterCommand+0x5c>
 8002f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f6e:	e09c      	b.n	80030aa <CONSOLE_RegisterCommand+0x196>
	if ( (helpLen = (int)strnlen(help, CONSOLE_HELP_MAX_LENGTH+1) ) > CONSOLE_HELP_MAX_LENGTH ) return result;
 8002f70:	f240 2101 	movw	r1, #513	@ 0x201
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f00d f9f8 	bl	801036a <strnlen>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f84:	dd01      	ble.n	8002f8a <CONSOLE_RegisterCommand+0x76>
 8002f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f88:	e08f      	b.n	80030aa <CONSOLE_RegisterCommand+0x196>

	// could be called while the scheduler is not running or suspended, so we must not use to use the lock guard
	if ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) xSemaphoreTakeRecursive( h->cState.lockGuard, -1 );
 8002f8a:	f009 fefd 	bl	800cd88 <xTaskGetSchedulerState>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d106      	bne.n	8002fa2 <CONSOLE_RegisterCommand+0x8e>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f04f 31ff 	mov.w	r1, #4294967295
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f007 ff2f 	bl	800ae00 <xQueueTakeMutexRecursive>

	cmdState_t* c = &h->cState;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	61bb      	str	r3, [r7, #24]
	int found = 0;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
	cmdEntry_t* pElement = c->commands.lh_first;
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	627b      	str	r3, [r7, #36]	@ 0x24
	while ( pElement != NULL )
 8002fb0:	e015      	b.n	8002fde <CONSOLE_RegisterCommand+0xca>
	{
		// if string compare result and determined length match, then this must be the function
		if ( strncmp(cmd, pElement->content.cmd, cmdLen) == 0 && cmdLen == pElement->content.cmdLen )
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	3308      	adds	r3, #8
 8002fb6:	6a3a      	ldr	r2, [r7, #32]
 8002fb8:	4619      	mov	r1, r3
 8002fba:	68b8      	ldr	r0, [r7, #8]
 8002fbc:	f00d f9c3 	bl	8010346 <strncmp>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d107      	bne.n	8002fd6 <CONSOLE_RegisterCommand+0xc2>
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fca:	6a3a      	ldr	r2, [r7, #32]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d102      	bne.n	8002fd6 <CONSOLE_RegisterCommand+0xc2>
		{
			found = 1;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
			break;
 8002fd4:	e006      	b.n	8002fe4 <CONSOLE_RegisterCommand+0xd0>
		}
		pElement = pElement->navigate.le_next;
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd8:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 8002fdc:	627b      	str	r3, [r7, #36]	@ 0x24
	while ( pElement != NULL )
 8002fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1e6      	bne.n	8002fb2 <CONSOLE_RegisterCommand+0x9e>
	}

	if ( found == 1 )
 8002fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d103      	bne.n	8002ff2 <CONSOLE_RegisterCommand+0xde>
	{
		result = -1;
 8002fea:	f04f 33ff 	mov.w	r3, #4294967295
 8002fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ff0:	e050      	b.n	8003094 <CONSOLE_RegisterCommand+0x180>
	}
	else
	{
		struct cmdEntry *item = malloc(sizeof(struct cmdEntry));
 8002ff2:	f44f 7019 	mov.w	r0, #612	@ 0x264
 8002ff6:	f00a ff19 	bl	800de2c <malloc>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	617b      	str	r3, [r7, #20]
		if (item == NULL) return result;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <CONSOLE_RegisterCommand+0xf4>
 8003004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003006:	e050      	b.n	80030aa <CONSOLE_RegisterCommand+0x196>
		item->content.isAlias = 0;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	2200      	movs	r2, #0
 800300c:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258
		item->content.cmdLen  = cmdLen;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	6a3a      	ldr	r2, [r7, #32]
 8003014:	64da      	str	r2, [r3, #76]	@ 0x4c
		item->content.helpLen = helpLen;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	69fa      	ldr	r2, [r7, #28]
 800301a:	f8c3 2254 	str.w	r2, [r3, #596]	@ 0x254
		item->content.func    = func;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	601a      	str	r2, [r3, #0]
		item->content.ctx     = context;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003028:	605a      	str	r2, [r3, #4]
		memcpy(item->content.cmd, cmd, cmdLen);
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	3308      	adds	r3, #8
 800302e:	6a3a      	ldr	r2, [r7, #32]
 8003030:	68b9      	ldr	r1, [r7, #8]
 8003032:	4618      	mov	r0, r3
 8003034:	f00d fad8 	bl	80105e8 <memcpy>
		item->content.cmd[cmdLen] = '\0';
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	4413      	add	r3, r2
 800303e:	3308      	adds	r3, #8
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]
		memcpy(item->content.help, help, helpLen);
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	3350      	adds	r3, #80	@ 0x50
 8003048:	69fa      	ldr	r2, [r7, #28]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4618      	mov	r0, r3
 800304e:	f00d facb 	bl	80105e8 <memcpy>
		item->content.help[helpLen] = '\0';
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	4413      	add	r3, r2
 8003058:	3350      	adds	r3, #80	@ 0x50
 800305a:	2200      	movs	r2, #0
 800305c:	701a      	strb	r2, [r3, #0]
		LIST_INSERT_HEAD(&h->cState.commands, item, navigate);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 800306e:	2b00      	cmp	r3, #0
 8003070:	d006      	beq.n	8003080 <CONSOLE_RegisterCommand+0x16c>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	f502 7217 	add.w	r2, r2, #604	@ 0x25c
 800307c:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	1d1a      	adds	r2, r3, #4
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
		result = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	// could be called while the scheduler is not running or suspended, so we must not use to use the lock guard
	if ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) xSemaphoreGiveRecursive( h->cState.lockGuard );
 8003094:	f009 fe78 	bl	800cd88 <xTaskGetSchedulerState>
 8003098:	4603      	mov	r3, r0
 800309a:	2b02      	cmp	r3, #2
 800309c:	d104      	bne.n	80030a8 <CONSOLE_RegisterCommand+0x194>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f007 fe70 	bl	800ad88 <xQueueGiveMutexRecursive>
	return result;
 80030a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3730      	adds	r7, #48	@ 0x30
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <CONSOLE_RegisterAlias>:


// --------------------------------------------------------------------------------------------------------------------
int CONSOLE_RegisterAlias( ConsoleHandle_t h, char* cmd, char* aliasCmd )
// --------------------------------------------------------------------------------------------------------------------
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b08c      	sub	sp, #48	@ 0x30
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	607a      	str	r2, [r7, #4]
	int result = -1;
 80030be:	f04f 33ff 	mov.w	r3, #4294967295
 80030c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if ( cmd == NULL || aliasCmd == NULL ) return result;
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <CONSOLE_RegisterAlias+0x1e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <CONSOLE_RegisterAlias+0x22>
 80030d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030d2:	e0b3      	b.n	800323c <CONSOLE_RegisterAlias+0x18a>
	if ( *cmd == '\0' || *aliasCmd == '\0' ) return result;
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <CONSOLE_RegisterAlias+0x32>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <CONSOLE_RegisterAlias+0x36>
 80030e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e6:	e0a9      	b.n	800323c <CONSOLE_RegisterAlias+0x18a>
	int cmdLen  = 0;
 80030e8:	2300      	movs	r3, #0
 80030ea:	623b      	str	r3, [r7, #32]
	int aliasCmdLen = 0;
 80030ec:	2300      	movs	r3, #0
 80030ee:	61fb      	str	r3, [r7, #28]
	if ( (cmdLen      = (int)strnlen(cmd, CONSOLE_COMMAND_MAX_LENGTH+1) )      > CONSOLE_COMMAND_MAX_LENGTH ) return result;
 80030f0:	2141      	movs	r1, #65	@ 0x41
 80030f2:	68b8      	ldr	r0, [r7, #8]
 80030f4:	f00d f939 	bl	801036a <strnlen>
 80030f8:	4603      	mov	r3, r0
 80030fa:	623b      	str	r3, [r7, #32]
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	2b40      	cmp	r3, #64	@ 0x40
 8003100:	dd01      	ble.n	8003106 <CONSOLE_RegisterAlias+0x54>
 8003102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003104:	e09a      	b.n	800323c <CONSOLE_RegisterAlias+0x18a>
	if ( (aliasCmdLen = (int)strnlen(aliasCmd, CONSOLE_COMMAND_MAX_LENGTH+1) ) > CONSOLE_COMMAND_MAX_LENGTH ) return result;
 8003106:	2141      	movs	r1, #65	@ 0x41
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f00d f92e 	bl	801036a <strnlen>
 800310e:	4603      	mov	r3, r0
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	2b40      	cmp	r3, #64	@ 0x40
 8003116:	dd01      	ble.n	800311c <CONSOLE_RegisterAlias+0x6a>
 8003118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800311a:	e08f      	b.n	800323c <CONSOLE_RegisterAlias+0x18a>

	// could be called while the scheduler is not running or suspended, so we must not use to use the lock guard
	if ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) xSemaphoreTakeRecursive( h->cState.lockGuard, -1 );
 800311c:	f009 fe34 	bl	800cd88 <xTaskGetSchedulerState>
 8003120:	4603      	mov	r3, r0
 8003122:	2b02      	cmp	r3, #2
 8003124:	d106      	bne.n	8003134 <CONSOLE_RegisterAlias+0x82>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f04f 31ff 	mov.w	r1, #4294967295
 800312e:	4618      	mov	r0, r3
 8003130:	f007 fe66 	bl	800ae00 <xQueueTakeMutexRecursive>

	cmdState_t* c = &h->cState;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	61bb      	str	r3, [r7, #24]
	int found = 0;
 8003138:	2300      	movs	r3, #0
 800313a:	62bb      	str	r3, [r7, #40]	@ 0x28
	cmdEntry_t* pElement = c->commands.lh_first;
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	627b      	str	r3, [r7, #36]	@ 0x24
	while ( pElement != NULL )
 8003142:	e015      	b.n	8003170 <CONSOLE_RegisterAlias+0xbe>
	{
		// if string compare result and determined length match, then this must be the function
		if ( strncmp(cmd, pElement->content.cmd, cmdLen) == 0 && cmdLen == pElement->content.cmdLen )
 8003144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003146:	3308      	adds	r3, #8
 8003148:	6a3a      	ldr	r2, [r7, #32]
 800314a:	4619      	mov	r1, r3
 800314c:	68b8      	ldr	r0, [r7, #8]
 800314e:	f00d f8fa 	bl	8010346 <strncmp>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d107      	bne.n	8003168 <CONSOLE_RegisterAlias+0xb6>
 8003158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800315c:	6a3a      	ldr	r2, [r7, #32]
 800315e:	429a      	cmp	r2, r3
 8003160:	d102      	bne.n	8003168 <CONSOLE_RegisterAlias+0xb6>
		{
			found = 1;
 8003162:	2301      	movs	r3, #1
 8003164:	62bb      	str	r3, [r7, #40]	@ 0x28
			break;
 8003166:	e006      	b.n	8003176 <CONSOLE_RegisterAlias+0xc4>
		}
		pElement = pElement->navigate.le_next;
 8003168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316a:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 800316e:	627b      	str	r3, [r7, #36]	@ 0x24
	while ( pElement != NULL )
 8003170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1e6      	bne.n	8003144 <CONSOLE_RegisterAlias+0x92>
	}

	if ( found == 1 )
 8003176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003178:	2b01      	cmp	r3, #1
 800317a:	d103      	bne.n	8003184 <CONSOLE_RegisterAlias+0xd2>
	{
		result = -1;
 800317c:	f04f 33ff 	mov.w	r3, #4294967295
 8003180:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003182:	e050      	b.n	8003226 <CONSOLE_RegisterAlias+0x174>
	}
	else
	{
		struct cmdEntry *item = malloc(sizeof(struct cmdEntry));
 8003184:	f44f 7019 	mov.w	r0, #612	@ 0x264
 8003188:	f00a fe50 	bl	800de2c <malloc>
 800318c:	4603      	mov	r3, r0
 800318e:	617b      	str	r3, [r7, #20]
		if (item == NULL) return result;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <CONSOLE_RegisterAlias+0xe8>
 8003196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003198:	e050      	b.n	800323c <CONSOLE_RegisterAlias+0x18a>
		item->content.isAlias = 1;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2201      	movs	r2, #1
 800319e:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258
		item->content.cmdLen  = cmdLen;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	6a3a      	ldr	r2, [r7, #32]
 80031a6:	64da      	str	r2, [r3, #76]	@ 0x4c
		item->content.helpLen = aliasCmdLen;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	f8c3 2254 	str.w	r2, [r3, #596]	@ 0x254
		item->content.func    = NULL;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
		item->content.ctx     = NULL;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2200      	movs	r2, #0
 80031ba:	605a      	str	r2, [r3, #4]
		memcpy(item->content.cmd, cmd, cmdLen);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	3308      	adds	r3, #8
 80031c0:	6a3a      	ldr	r2, [r7, #32]
 80031c2:	68b9      	ldr	r1, [r7, #8]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f00d fa0f 	bl	80105e8 <memcpy>
		item->content.cmd[cmdLen] = '\0';
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	4413      	add	r3, r2
 80031d0:	3308      	adds	r3, #8
 80031d2:	2200      	movs	r2, #0
 80031d4:	701a      	strb	r2, [r3, #0]
		memcpy(item->content.help, aliasCmd, aliasCmdLen);
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	3350      	adds	r3, #80	@ 0x50
 80031da:	69fa      	ldr	r2, [r7, #28]
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	4618      	mov	r0, r3
 80031e0:	f00d fa02 	bl	80105e8 <memcpy>
		item->content.help[aliasCmdLen] = '\0';
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	4413      	add	r3, r2
 80031ea:	3350      	adds	r3, #80	@ 0x50
 80031ec:	2200      	movs	r2, #0
 80031ee:	701a      	strb	r2, [r3, #0]
		LIST_INSERT_HEAD(&h->cState.commands, item, navigate);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 8003200:	2b00      	cmp	r3, #0
 8003202:	d006      	beq.n	8003212 <CONSOLE_RegisterAlias+0x160>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	f502 7217 	add.w	r2, r2, #604	@ 0x25c
 800320e:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	605a      	str	r2, [r3, #4]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1d1a      	adds	r2, r3, #4
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
		result = 0;
 8003222:	2300      	movs	r3, #0
 8003224:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	// could be called while the scheduler is not running or suspended, so we must not use to use the lock guard
	if ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) xSemaphoreGiveRecursive( h->cState.lockGuard );
 8003226:	f009 fdaf 	bl	800cd88 <xTaskGetSchedulerState>
 800322a:	4603      	mov	r3, r0
 800322c:	2b02      	cmp	r3, #2
 800322e:	d104      	bne.n	800323a <CONSOLE_RegisterAlias+0x188>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f007 fda7 	bl	800ad88 <xQueueGiveMutexRecursive>
	return result;
 800323a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800323c:	4618      	mov	r0, r3
 800323e:	3730      	adds	r7, #48	@ 0x30
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <CONSOLE_RemoveAliasOrCommand>:

// --------------------------------------------------------------------------------------------------------------------
int CONSOLE_RemoveAliasOrCommand( ConsoleHandle_t h, char* cmd)
// --------------------------------------------------------------------------------------------------------------------
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
	int result = -1;
 800324e:	f04f 33ff 	mov.w	r3, #4294967295
 8003252:	61fb      	str	r3, [r7, #28]
	if ( cmd == NULL ) return result;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <CONSOLE_RemoveAliasOrCommand+0x1a>
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	e066      	b.n	800332c <CONSOLE_RemoveAliasOrCommand+0xe8>
	if ( *cmd == '\0' ) return result;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <CONSOLE_RemoveAliasOrCommand+0x26>
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	e060      	b.n	800332c <CONSOLE_RemoveAliasOrCommand+0xe8>
	int cmdLen  = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	613b      	str	r3, [r7, #16]
	if ( (cmdLen      = (int)strnlen(cmd, CONSOLE_COMMAND_MAX_LENGTH+1) ) > CONSOLE_COMMAND_MAX_LENGTH ) return result;
 800326e:	2141      	movs	r1, #65	@ 0x41
 8003270:	6838      	ldr	r0, [r7, #0]
 8003272:	f00d f87a 	bl	801036a <strnlen>
 8003276:	4603      	mov	r3, r0
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	2b40      	cmp	r3, #64	@ 0x40
 800327e:	dd01      	ble.n	8003284 <CONSOLE_RemoveAliasOrCommand+0x40>
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	e053      	b.n	800332c <CONSOLE_RemoveAliasOrCommand+0xe8>

	// could be called while the scheduler is not running or suspended, so we must not use to use the lock guard
	if ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) xSemaphoreTakeRecursive( h->cState.lockGuard, -1 );
 8003284:	f009 fd80 	bl	800cd88 <xTaskGetSchedulerState>
 8003288:	4603      	mov	r3, r0
 800328a:	2b02      	cmp	r3, #2
 800328c:	d106      	bne.n	800329c <CONSOLE_RemoveAliasOrCommand+0x58>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f04f 31ff 	mov.w	r1, #4294967295
 8003296:	4618      	mov	r0, r3
 8003298:	f007 fdb2 	bl	800ae00 <xQueueTakeMutexRecursive>

	cmdState_t* c = &h->cState;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	60fb      	str	r3, [r7, #12]
	int found = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	61bb      	str	r3, [r7, #24]
	cmdEntry_t* pElement = c->commands.lh_first;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	617b      	str	r3, [r7, #20]
	while ( pElement != NULL )
 80032aa:	e015      	b.n	80032d8 <CONSOLE_RemoveAliasOrCommand+0x94>
	{
		// if string compare result and determined length match, then this must be the function
		if ( strncmp(cmd, pElement->content.cmd, cmdLen) == 0 && cmdLen == pElement->content.cmdLen )
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	3308      	adds	r3, #8
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	4619      	mov	r1, r3
 80032b4:	6838      	ldr	r0, [r7, #0]
 80032b6:	f00d f846 	bl	8010346 <strncmp>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d107      	bne.n	80032d0 <CONSOLE_RemoveAliasOrCommand+0x8c>
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d102      	bne.n	80032d0 <CONSOLE_RemoveAliasOrCommand+0x8c>
		{
			found = 1;
 80032ca:	2301      	movs	r3, #1
 80032cc:	61bb      	str	r3, [r7, #24]
			break;
 80032ce:	e006      	b.n	80032de <CONSOLE_RemoveAliasOrCommand+0x9a>
		}
		pElement = pElement->navigate.le_next;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 80032d6:	617b      	str	r3, [r7, #20]
	while ( pElement != NULL )
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1e6      	bne.n	80032ac <CONSOLE_RemoveAliasOrCommand+0x68>
	}

	if ( found == 1 )
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d118      	bne.n	8003316 <CONSOLE_RemoveAliasOrCommand+0xd2>
	{
		LIST_REMOVE(pElement, navigate);
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d007      	beq.n	80032fe <CONSOLE_RemoveAliasOrCommand+0xba>
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	f8d2 2260 	ldr.w	r2, [r2, #608]	@ 0x260
 80032fa:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	f8d2 225c 	ldr.w	r2, [r2, #604]	@ 0x25c
 800330a:	601a      	str	r2, [r3, #0]
		free(pElement);
 800330c:	6978      	ldr	r0, [r7, #20]
 800330e:	f00a fd95 	bl	800de3c <free>
		result = 0;
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
	}

	// could be called while the scheduler is not running or suspended, so we must not use to use the lock guard
	if ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) xSemaphoreGiveRecursive( h->cState.lockGuard );
 8003316:	f009 fd37 	bl	800cd88 <xTaskGetSchedulerState>
 800331a:	4603      	mov	r3, r0
 800331c:	2b02      	cmp	r3, #2
 800331e:	d104      	bne.n	800332a <CONSOLE_RemoveAliasOrCommand+0xe6>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f007 fd2f 	bl	800ad88 <xQueueGiveMutexRecursive>
	return result;
 800332a:	69fb      	ldr	r3, [r7, #28]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3720      	adds	r7, #32
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <SPINDLE_SetDirection>:
int SpindleStop(void);
int SpindleStatus(void);


void SPINDLE_SetDirection(SpindleHandle_t h, void *context, int backward)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  (void)h;
  (void)context;
  spindleContext.direction = backward;
 8003340:	4a08      	ldr	r2, [pc, #32]	@ (8003364 <SPINDLE_SetDirection+0x30>)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6013      	str	r3, [r2, #0]

  if (backward)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <SPINDLE_SetDirection+0x20>
  {
    printf("Setting spindle direction: backward (counter-clockwise)\r\n");
 800334c:	4806      	ldr	r0, [pc, #24]	@ (8003368 <SPINDLE_SetDirection+0x34>)
 800334e:	f00c fdff 	bl	800ff50 <puts>
  }
  else
  {
    printf("Setting spindle direction: forward (clockwise)\r\n");
  }
}
 8003352:	e002      	b.n	800335a <SPINDLE_SetDirection+0x26>
    printf("Setting spindle direction: forward (clockwise)\r\n");
 8003354:	4805      	ldr	r0, [pc, #20]	@ (800336c <SPINDLE_SetDirection+0x38>)
 8003356:	f00c fdfb 	bl	800ff50 <puts>
}
 800335a:	bf00      	nop
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	2000022c 	.word	0x2000022c
 8003368:	08013a68 	.word	0x08013a68
 800336c:	08013aa4 	.word	0x08013aa4

08003370 <SPINDLE_SetDutyCycle>:

void SPINDLE_SetDutyCycle(SpindleHandle_t h, void *context, float dutyCycle)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)h;
  (void)context;
  int arr = TIM2->ARR;
 800337e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003384:	617b      	str	r3, [r7, #20]
  if (spindleContext.direction)
 8003386:	4b19      	ldr	r3, [pc, #100]	@ (80033ec <SPINDLE_SetDutyCycle+0x7c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d014      	beq.n	80033b8 <SPINDLE_SetDutyCycle+0x48>
   {
      TIM2->CCR3 = 0;
 800338e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003392:	2200      	movs	r2, #0
 8003394:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2->CCR4 = (int)((float)arr * dutyCycle);
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	ee07 3a90 	vmov	s15, r3
 800339c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80033a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80033b0:	ee17 2a90 	vmov	r2, s15
 80033b4:	641a      	str	r2, [r3, #64]	@ 0x40
   {
      TIM2->CCR3 = (int)((float)arr * dutyCycle);
      TIM2->CCR4 = 0;
   }
  
}
 80033b6:	e013      	b.n	80033e0 <SPINDLE_SetDutyCycle+0x70>
      TIM2->CCR3 = (int)((float)arr * dutyCycle);
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	ee07 3a90 	vmov	s15, r3
 80033be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80033c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80033d2:	ee17 2a90 	vmov	r2, s15
 80033d6:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2->CCR4 = 0;
 80033d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80033dc:	2200      	movs	r2, #0
 80033de:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80033e0:	bf00      	nop
 80033e2:	371c      	adds	r7, #28
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	2000022c 	.word	0x2000022c

080033f0 <SPINDLE_EnaPWM>:

void SPINDLE_EnaPWM(SpindleHandle_t h, void *context, int ena)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  (void)h;
  (void)context;

  HAL_GPIO_WritePin(SPINDLE_ENA_L_GPIO_Port, SPINDLE_ENA_L_Pin, ena);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	461a      	mov	r2, r3
 8003402:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003406:	480d      	ldr	r0, [pc, #52]	@ (800343c <SPINDLE_EnaPWM+0x4c>)
 8003408:	f002 fb74 	bl	8005af4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPINDLE_ENA_R_GPIO_Port, SPINDLE_ENA_R_Pin, ena);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003416:	4809      	ldr	r0, [pc, #36]	@ (800343c <SPINDLE_EnaPWM+0x4c>)
 8003418:	f002 fb6c 	bl	8005af4 <HAL_GPIO_WritePin>

  if (ena)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d007      	beq.n	8003432 <SPINDLE_EnaPWM+0x42>
  {
      HAL_TIM_PWM_Start(&spindleContext.timer, TIM_CHANNEL_3);
 8003422:	2108      	movs	r1, #8
 8003424:	4806      	ldr	r0, [pc, #24]	@ (8003440 <SPINDLE_EnaPWM+0x50>)
 8003426:	f004 fee7 	bl	80081f8 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&spindleContext.timer, TIM_CHANNEL_4);
 800342a:	210c      	movs	r1, #12
 800342c:	4804      	ldr	r0, [pc, #16]	@ (8003440 <SPINDLE_EnaPWM+0x50>)
 800342e:	f004 fee3 	bl	80081f8 <HAL_TIM_PWM_Start>
  }
}
 8003432:	bf00      	nop
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40021000 	.word	0x40021000
 8003440:	20000230 	.word	0x20000230

08003444 <InitSpindle>:

void InitSpindle(ConsoleHandle_t* consoleHandle, TIM_HandleTypeDef* htim)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08a      	sub	sp, #40	@ 0x28
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  // Initialize the spindle parameters
  SpindlePhysicalParams_t s;
  s.maxRPM = 9000.0f;
 800344e:	4b19      	ldr	r3, [pc, #100]	@ (80034b4 <InitSpindle+0x70>)
 8003450:	61bb      	str	r3, [r7, #24]
  s.minRPM = -9000.0f;
 8003452:	4b19      	ldr	r3, [pc, #100]	@ (80034b8 <InitSpindle+0x74>)
 8003454:	623b      	str	r3, [r7, #32]
  s.absMinRPM = 1600.0f;
 8003456:	4b19      	ldr	r3, [pc, #100]	@ (80034bc <InitSpindle+0x78>)
 8003458:	61fb      	str	r3, [r7, #28]
  s.setDirection = SPINDLE_SetDirection;
 800345a:	4b19      	ldr	r3, [pc, #100]	@ (80034c0 <InitSpindle+0x7c>)
 800345c:	60fb      	str	r3, [r7, #12]
  s.setDutyCycle = SPINDLE_SetDutyCycle;
 800345e:	4b19      	ldr	r3, [pc, #100]	@ (80034c4 <InitSpindle+0x80>)
 8003460:	613b      	str	r3, [r7, #16]
  s.enaPWM = SPINDLE_EnaPWM;
 8003462:	4b19      	ldr	r3, [pc, #100]	@ (80034c8 <InitSpindle+0x84>)
 8003464:	617b      	str	r3, [r7, #20]
  s.context = NULL;
 8003466:	2300      	movs	r3, #0
 8003468:	627b      	str	r3, [r7, #36]	@ 0x24

  spindleContext.handle= SPINDLE_CreateInstance(4 * configMINIMAL_STACK_SIZE,
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	f107 030c 	add.w	r3, r7, #12
 8003472:	2104      	movs	r1, #4
 8003474:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003478:	f000 fafa 	bl	8003a70 <SPINDLE_CreateInstance>
 800347c:	4603      	mov	r3, r0
 800347e:	4a13      	ldr	r2, [pc, #76]	@ (80034cc <InitSpindle+0x88>)
 8003480:	6513      	str	r3, [r2, #80]	@ 0x50
                                         configMAX_PRIORITIES - 3,
                                         *consoleHandle, &s);

  if (spindleContext.handle == NULL)
 8003482:	4b12      	ldr	r3, [pc, #72]	@ (80034cc <InitSpindle+0x88>)
 8003484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003486:	2b00      	cmp	r3, #0
 8003488:	d104      	bne.n	8003494 <InitSpindle+0x50>
  {
    printf("Failed to create spindle controller instance\r\n");
 800348a:	4811      	ldr	r0, [pc, #68]	@ (80034d0 <InitSpindle+0x8c>)
 800348c:	f00c fd60 	bl	800ff50 <puts>
    Error_Handler();
 8003490:	f000 ffef 	bl	8004472 <Error_Handler>
  }
  spindleContext.direction = 0;
 8003494:	4b0d      	ldr	r3, [pc, #52]	@ (80034cc <InitSpindle+0x88>)
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]
  spindleContext.timer = *htim;
 800349a:	4b0c      	ldr	r3, [pc, #48]	@ (80034cc <InitSpindle+0x88>)
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	3304      	adds	r3, #4
 80034a0:	4611      	mov	r1, r2
 80034a2:	224c      	movs	r2, #76	@ 0x4c
 80034a4:	4618      	mov	r0, r3
 80034a6:	f00d f89f 	bl	80105e8 <memcpy>
}
 80034aa:	bf00      	nop
 80034ac:	3728      	adds	r7, #40	@ 0x28
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	460ca000 	.word	0x460ca000
 80034b8:	c60ca000 	.word	0xc60ca000
 80034bc:	44c80000 	.word	0x44c80000
 80034c0:	08003335 	.word	0x08003335
 80034c4:	08003371 	.word	0x08003371
 80034c8:	080033f1 	.word	0x080033f1
 80034cc:	2000022c 	.word	0x2000022c
 80034d0:	08013ad4 	.word	0x08013ad4

080034d4 <SpindleFunction>:
};

// --------------------------------------------------------------------------------------------------------------------
static void SpindleFunction( void * arg )
// --------------------------------------------------------------------------------------------------------------------
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b090      	sub	sp, #64	@ 0x40
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
	CtrlCommand_t cmd;
	StepCommandResponse_t asyncResponse;
	SpindleHandle_t h = (SpindleHandle_t)arg;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	633b      	str	r3, [r7, #48]	@ 0x30
	unsigned int running = 0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	unsigned int startupBoost = 0;
 80034e4:	2300      	movs	r3, #0
 80034e6:	63bb      	str	r3, [r7, #56]	@ 0x38

	h->physical.enaPWM(h, h->physical.context, 0);
 80034e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034ee:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80034f0:	2200      	movs	r2, #0
 80034f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80034f4:	4798      	blx	r3
	h->physical.setDutyCycle(h, h->physical.context, 0.0f );
 80034f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034fc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80034fe:	ed9f 0aa8 	vldr	s0, [pc, #672]	@ 80037a0 <SpindleFunction+0x2cc>
 8003502:	4611      	mov	r1, r2
 8003504:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003506:	4798      	blx	r3
	h->currentSpeed = 0;
 8003508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	631a      	str	r2, [r3, #48]	@ 0x30

	// now here comes the command processor part
	while( !h->cancel )
 8003510:	e162      	b.n	80037d8 <SpindleFunction+0x304>
	{
		// wait for next command
		if ( xQueueReceive( h->cmdQueue, &cmd, 100) == pdPASS )
 8003512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f107 011c 	add.w	r1, r7, #28
 800351a:	2264      	movs	r2, #100	@ 0x64
 800351c:	4618      	mov	r0, r3
 800351e:	f007 fdc5 	bl	800b0ac <xQueueReceive>
 8003522:	4603      	mov	r3, r0
 8003524:	2b01      	cmp	r3, #1
 8003526:	f040 813d 	bne.w	80037a4 <SpindleFunction+0x2d0>
		{
			if ( cmd.response == NULL || cmd.request.syncEvent == NULL )
 800352a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800352c:	2b00      	cmp	r3, #0
 800352e:	d002      	beq.n	8003536 <SpindleFunction+0x62>
 8003530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003532:	2b00      	cmp	r3, #0
 8003534:	d102      	bne.n	800353c <SpindleFunction+0x68>
			{
				cmd.response = &asyncResponse;
 8003536:	f107 030c 	add.w	r3, r7, #12
 800353a:	62fb      	str	r3, [r7, #44]	@ 0x2c
			}
			memset(cmd.response, 0, sizeof(StepCommandResponse_t));
 800353c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800353e:	2210      	movs	r2, #16
 8003540:	2100      	movs	r1, #0
 8003542:	4618      	mov	r0, r3
 8003544:	f00c feea 	bl	801031c <memset>
			cmd.response->code = -1;
 8003548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800354a:	f04f 32ff 	mov.w	r2, #4294967295
 800354e:	601a      	str	r2, [r3, #0]
			cmd.response->requestID = cmd.head.requestID;
 8003550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003552:	69fa      	ldr	r2, [r7, #28]
 8003554:	605a      	str	r2, [r3, #4]


			switch ( cmd.head.type )
 8003556:	f897 3020 	ldrb.w	r3, [r7, #32]
 800355a:	2b04      	cmp	r3, #4
 800355c:	f200 8115 	bhi.w	800378a <SpindleFunction+0x2b6>
 8003560:	a201      	add	r2, pc, #4	@ (adr r2, 8003568 <SpindleFunction+0x94>)
 8003562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003566:	bf00      	nop
 8003568:	0800357d 	.word	0x0800357d
 800356c:	08003585 	.word	0x08003585
 8003570:	0800373d 	.word	0x0800373d
 8003574:	0800378b 	.word	0x0800378b
 8003578:	08003775 	.word	0x08003775
			{
			case cctNONE:
				cmd.response->code = 0;
 800357c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]
				break;
 8003582:	e103      	b.n	800378c <SpindleFunction+0x2b8>
			case cctSTART:
				cmd.response->code = 0;
 8003584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]
				if ( cmd.request.args.asStart.speed < h->physical.minRPM ) cmd.request.args.asStart.speed = h->physical.minRPM;
 800358a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800358e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003590:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003594:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800359c:	d502      	bpl.n	80035a4 <SpindleFunction+0xd0>
 800359e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a2:	627b      	str	r3, [r7, #36]	@ 0x24
				if ( cmd.request.args.asStart.speed > h->physical.maxRPM ) cmd.request.args.asStart.speed = h->physical.maxRPM;
 80035a4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80035a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035aa:	edd3 7a08 	vldr	s15, [r3, #32]
 80035ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b6:	dd02      	ble.n	80035be <SpindleFunction+0xea>
 80035b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	627b      	str	r3, [r7, #36]	@ 0x24

				if (  cmd.request.args.asStart.speed > 0.0f && cmd.request.args.asStart.speed <  h->physical.absMinRPM ) cmd.request.args.asStart.speed =  h->physical.absMinRPM;
 80035be:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80035c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ca:	dd0c      	ble.n	80035e6 <SpindleFunction+0x112>
 80035cc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80035d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80035d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035de:	d502      	bpl.n	80035e6 <SpindleFunction+0x112>
 80035e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e4:	627b      	str	r3, [r7, #36]	@ 0x24
				if (  cmd.request.args.asStart.speed < 0.0f && cmd.request.args.asStart.speed > -h->physical.absMinRPM ) cmd.request.args.asStart.speed = -h->physical.absMinRPM;
 80035e6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80035ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f2:	d512      	bpl.n	800361a <SpindleFunction+0x146>
 80035f4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80035f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fa:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80035fe:	eef1 7a67 	vneg.f32	s15, s15
 8003602:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800360a:	dd06      	ble.n	800361a <SpindleFunction+0x146>
 800360c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800360e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003612:	eef1 7a67 	vneg.f32	s15, s15
 8003616:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

				int directionChange = 0;
 800361a:	2300      	movs	r3, #0
 800361c:	637b      	str	r3, [r7, #52]	@ 0x34
				if ((h->currentSpeed < 0.0f && cmd.request.args.asStart.speed > 0.0f) ||
 800361e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003620:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003624:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800362c:	d506      	bpl.n	800363c <SpindleFunction+0x168>
 800362e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003632:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800363a:	dc0e      	bgt.n	800365a <SpindleFunction+0x186>
					(h->currentSpeed > 0.0f && cmd.request.args.asStart.speed < 0.0f))
 800363c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
				if ((h->currentSpeed < 0.0f && cmd.request.args.asStart.speed > 0.0f) ||
 8003642:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800364a:	dd08      	ble.n	800365e <SpindleFunction+0x18a>
					(h->currentSpeed > 0.0f && cmd.request.args.asStart.speed < 0.0f))
 800364c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003650:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003658:	d501      	bpl.n	800365e <SpindleFunction+0x18a>
					directionChange = 1;
 800365a:	2301      	movs	r3, #1
 800365c:	637b      	str	r3, [r7, #52]	@ 0x34
				h->currentSpeed = cmd.request.args.asStart.speed;
 800365e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003662:	631a      	str	r2, [r3, #48]	@ 0x30


				h->physical.setDirection(h, h->physical.context, h->currentSpeed < 0.0f );
 8003664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800366a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800366c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800366e:	edd2 7a0c 	vldr	s15, [r2, #48]	@ 0x30
 8003672:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800367a:	bf4c      	ite	mi
 800367c:	2201      	movmi	r2, #1
 800367e:	2200      	movpl	r2, #0
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003684:	4798      	blx	r3
				if ( running == 1 && directionChange == 0 )
 8003686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003688:	2b01      	cmp	r3, #1
 800368a:	d117      	bne.n	80036bc <SpindleFunction+0x1e8>
 800368c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800368e:	2b00      	cmp	r3, #0
 8003690:	d114      	bne.n	80036bc <SpindleFunction+0x1e8>
				{
					h->physical.setDutyCycle(h, h->physical.context, ( fabsf(h->currentSpeed) / h->physical.maxRPM) );
 8003692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003698:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800369a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800369c:	edd2 7a0c 	vldr	s15, [r2, #48]	@ 0x30
 80036a0:	eeb0 7ae7 	vabs.f32	s14, s15
 80036a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036a6:	edd2 7a08 	vldr	s15, [r2, #32]
 80036aa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80036ae:	eeb0 0a66 	vmov.f32	s0, s13
 80036b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036b4:	4798      	blx	r3
					startupBoost = 0;
 80036b6:	2300      	movs	r3, #0
 80036b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036ba:	e020      	b.n	80036fe <SpindleFunction+0x22a>
				}
				else if ( ( running == 0 || directionChange == 1 ) && fabsf(cmd.request.args.asStart.speed) <= (0.25f * h->physical.maxRPM) )
 80036bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <SpindleFunction+0x1f4>
 80036c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d11a      	bne.n	80036fe <SpindleFunction+0x22a>
 80036c8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80036cc:	eeb0 7ae7 	vabs.f32	s14, s15
 80036d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d2:	edd3 7a08 	vldr	s15, [r3, #32]
 80036d6:	eef5 6a00 	vmov.f32	s13, #80	@ 0x3e800000  0.250
 80036da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80036de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e6:	d80a      	bhi.n	80036fe <SpindleFunction+0x22a>
				{
					h->physical.setDutyCycle(h, h->physical.context, 0.5f );
 80036e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036ee:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80036f0:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80036f4:	4611      	mov	r1, r2
 80036f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036f8:	4798      	blx	r3
					startupBoost = 1;
 80036fa:	2301      	movs	r3, #1
 80036fc:	63bb      	str	r3, [r7, #56]	@ 0x38
				}
				if ( startupBoost == 0 )
 80036fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003700:	2b00      	cmp	r3, #0
 8003702:	d111      	bne.n	8003728 <SpindleFunction+0x254>
				{
					h->physical.setDutyCycle(h, h->physical.context, ( fabsf(h->currentSpeed) / h->physical.maxRPM ) );
 8003704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800370a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800370c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800370e:	edd2 7a0c 	vldr	s15, [r2, #48]	@ 0x30
 8003712:	eeb0 7ae7 	vabs.f32	s14, s15
 8003716:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003718:	edd2 7a08 	vldr	s15, [r2, #32]
 800371c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003720:	eeb0 0a66 	vmov.f32	s0, s13
 8003724:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003726:	4798      	blx	r3
				}

				h->physical.enaPWM(h, h->physical.context, 1);
 8003728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800372e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003730:	2201      	movs	r2, #1
 8003732:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003734:	4798      	blx	r3
				running = 1;
 8003736:	2301      	movs	r3, #1
 8003738:	63fb      	str	r3, [r7, #60]	@ 0x3c
				break;
 800373a:	e027      	b.n	800378c <SpindleFunction+0x2b8>
			case cctSTOP:
				cmd.response->code = 0;
 800373c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
				h->currentSpeed = 0;
 8003742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	631a      	str	r2, [r3, #48]	@ 0x30
				startupBoost = 0;
 800374a:	2300      	movs	r3, #0
 800374c:	63bb      	str	r3, [r7, #56]	@ 0x38
				running = 0;
 800374e:	2300      	movs	r3, #0
 8003750:	63fb      	str	r3, [r7, #60]	@ 0x3c
				h->physical.setDutyCycle(h, h->physical.context, 0.0f );
 8003752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003758:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800375a:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 80037a0 <SpindleFunction+0x2cc>
 800375e:	4611      	mov	r1, r2
 8003760:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003762:	4798      	blx	r3
				h->physical.enaPWM(h, h->physical.context, 0);
 8003764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003766:	69db      	ldr	r3, [r3, #28]
 8003768:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800376a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800376c:	2200      	movs	r2, #0
 800376e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003770:	4798      	blx	r3
				break;
 8003772:	e00b      	b.n	800378c <SpindleFunction+0x2b8>
			case cctSTATUS:
				cmd.response->code = 0;
 8003774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
				cmd.response->args.asStatus.running = running;
 800377a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800377c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800377e:	60da      	str	r2, [r3, #12]
				cmd.response->args.asStatus.speed = h->currentSpeed;
 8003780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003782:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003784:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003786:	609a      	str	r2, [r3, #8]
				break;
 8003788:	e000      	b.n	800378c <SpindleFunction+0x2b8>
			default:
				break;
 800378a:	bf00      	nop
			}

			// after processing the command we have to release the caller to keep
			// synchronous calling mechanism. In case there is no sync object, it was##
			// called asynchronously
			if ( cmd.request.syncEvent != NULL )
 800378c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800378e:	2b00      	cmp	r3, #0
 8003790:	d022      	beq.n	80037d8 <SpindleFunction+0x304>
			{
				xSemaphoreGive(cmd.request.syncEvent);
 8003792:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003794:	2300      	movs	r3, #0
 8003796:	2200      	movs	r2, #0
 8003798:	2100      	movs	r1, #0
 800379a:	f007 fb6f 	bl	800ae7c <xQueueGenericSend>
 800379e:	e01b      	b.n	80037d8 <SpindleFunction+0x304>
 80037a0:	00000000 	.word	0x00000000
		}
		else
		{
			// here we have to do some additional steps to regulate correct rpm in case
			// the low speed boost has been performed
			if ( startupBoost == 1 && running == 1 )
 80037a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d116      	bne.n	80037d8 <SpindleFunction+0x304>
 80037aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d113      	bne.n	80037d8 <SpindleFunction+0x304>
			{
				startupBoost = 0;
 80037b0:	2300      	movs	r3, #0
 80037b2:	63bb      	str	r3, [r7, #56]	@ 0x38
				h->physical.setDutyCycle(h, h->physical.context, ( fabsf(h->currentSpeed) / h->physical.maxRPM) );
 80037b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037ba:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80037bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037be:	edd2 7a0c 	vldr	s15, [r2, #48]	@ 0x30
 80037c2:	eeb0 7ae7 	vabs.f32	s14, s15
 80037c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037c8:	edd2 7a08 	vldr	s15, [r2, #32]
 80037cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80037d0:	eeb0 0a66 	vmov.f32	s0, s13
 80037d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80037d6:	4798      	blx	r3
	while( !h->cancel )
 80037d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f43f ae98 	beq.w	8003512 <SpindleFunction+0x3e>
			}
		}
	}
}
 80037e2:	bf00      	nop
 80037e4:	bf00      	nop
 80037e6:	3740      	adds	r7, #64	@ 0x40
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <GetCommandEvent>:

// --------------------------------------------------------------------------------------------------------------------
static SemaphoreHandle_t GetCommandEvent( SpindleHandle_t h )
// --------------------------------------------------------------------------------------------------------------------
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
	xSemaphoreTakeRecursive( h->syncEventPool.lockGuard, -1 );
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037f8:	f04f 31ff 	mov.w	r1, #4294967295
 80037fc:	4618      	mov	r0, r3
 80037fe:	f007 faff 	bl	800ae00 <xQueueTakeMutexRecursive>

	stepSyncEventElement_t* el = LIST_FIRST(&h->syncEventPool.pool);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003806:	60fb      	str	r3, [r7, #12]
	while ( el != NULL )
 8003808:	e017      	b.n	800383a <GetCommandEvent+0x4e>
	{
		if ( el->content.allocated == 0 )
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d110      	bne.n	8003834 <GetCommandEvent+0x48>
		{
			el->content.allocated = 1;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	601a      	str	r2, [r3, #0]
			// make sure we the event is in held state
			xSemaphoreTake( el->content.event, 0 );
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2100      	movs	r1, #0
 800381e:	4618      	mov	r0, r3
 8003820:	f007 fd38 	bl	800b294 <xQueueSemaphoreTake>
			xSemaphoreGiveRecursive( h->syncEventPool.lockGuard );
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003828:	4618      	mov	r0, r3
 800382a:	f007 faad 	bl	800ad88 <xQueueGiveMutexRecursive>
			return el->content.event;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	e00b      	b.n	800384c <GetCommandEvent+0x60>
		}
		el = LIST_NEXT(el, navigate);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	60fb      	str	r3, [r7, #12]
	while ( el != NULL )
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1e4      	bne.n	800380a <GetCommandEvent+0x1e>
	}

	xSemaphoreGiveRecursive( h->syncEventPool.lockGuard );
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003844:	4618      	mov	r0, r3
 8003846:	f007 fa9f 	bl	800ad88 <xQueueGiveMutexRecursive>
	return 0;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <ReleaseCommandEvent>:

// --------------------------------------------------------------------------------------------------------------------
static void ReleaseCommandEvent( SpindleHandle_t h, SemaphoreHandle_t s )
// --------------------------------------------------------------------------------------------------------------------
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
	xSemaphoreTakeRecursive( h->syncEventPool.lockGuard, -1 );
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003862:	f04f 31ff 	mov.w	r1, #4294967295
 8003866:	4618      	mov	r0, r3
 8003868:	f007 faca 	bl	800ae00 <xQueueTakeMutexRecursive>

	stepSyncEventElement_t* el = LIST_FIRST(&h->syncEventPool.pool);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003870:	60fb      	str	r3, [r7, #12]
	while ( el != NULL )
 8003872:	e014      	b.n	800389e <ReleaseCommandEvent+0x4a>
	{
		if ( el->content.allocated == 1 && el->content.event == s)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d10d      	bne.n	8003898 <ReleaseCommandEvent+0x44>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d108      	bne.n	8003898 <ReleaseCommandEvent+0x44>
		{
			el->content.allocated = 0;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]
			xSemaphoreGiveRecursive( h->syncEventPool.lockGuard );
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003890:	4618      	mov	r0, r3
 8003892:	f007 fa79 	bl	800ad88 <xQueueGiveMutexRecursive>
			return;
 8003896:	e00a      	b.n	80038ae <ReleaseCommandEvent+0x5a>
		}
		el = LIST_NEXT(el, navigate);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	60fb      	str	r3, [r7, #12]
	while ( el != NULL )
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1e7      	bne.n	8003874 <ReleaseCommandEvent+0x20>
	}

	xSemaphoreGiveRecursive( h->syncEventPool.lockGuard );
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038a8:	4618      	mov	r0, r3
 80038aa:	f007 fa6d 	bl	800ad88 <xQueueGiveMutexRecursive>
}
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <SpindleConsoleFunction>:

// --------------------------------------------------------------------------------------------------------------------
static int SpindleConsoleFunction( int argc, char** argv, void* ctx )
// --------------------------------------------------------------------------------------------------------------------
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b08e      	sub	sp, #56	@ 0x38
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
	//possible commands are
	//(spindle) start 100
	//(spindle) stop
	//(spindle) status

	SpindleHandle_t h = (SpindleHandle_t)ctx;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	637b      	str	r3, [r7, #52]	@ 0x34
	StepCommandResponse_t response = { 0 };
 80038c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	605a      	str	r2, [r3, #4]
 80038ce:	609a      	str	r2, [r3, #8]
 80038d0:	60da      	str	r2, [r3, #12]
	CtrlCommand_t cmd;

	cmd.response       = &response;
 80038d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038d6:	623b      	str	r3, [r7, #32]
	cmd.head.requestID = h->nextRequestID;
 80038d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	613b      	str	r3, [r7, #16]
	h->nextRequestID += 1;
 80038de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e6:	601a      	str	r2, [r3, #0]

	// first decode the subcommand and all arguments
	if ( argc == 0 )
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d105      	bne.n	80038fa <SpindleConsoleFunction+0x46>
	{
		printf("invalid number of arguments\r\nFAIL");
 80038ee:	484a      	ldr	r0, [pc, #296]	@ (8003a18 <SpindleConsoleFunction+0x164>)
 80038f0:	f00c fabe 	bl	800fe70 <iprintf>
		return -1;
 80038f4:	f04f 33ff 	mov.w	r3, #4294967295
 80038f8:	e089      	b.n	8003a0e <SpindleConsoleFunction+0x15a>
	}
	if ( strcmp(argv[0], "stop") == 0 )
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4947      	ldr	r1, [pc, #284]	@ (8003a1c <SpindleConsoleFunction+0x168>)
 8003900:	4618      	mov	r0, r3
 8003902:	f7fc fc85 	bl	8000210 <strcmp>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d102      	bne.n	8003912 <SpindleConsoleFunction+0x5e>
	{
		// no further arguments
		cmd.head.type = cctSTOP;
 800390c:	2302      	movs	r3, #2
 800390e:	753b      	strb	r3, [r7, #20]
 8003910:	e036      	b.n	8003980 <SpindleConsoleFunction+0xcc>
	}
	else if ( strcmp(argv[0], "start") == 0 )
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4942      	ldr	r1, [pc, #264]	@ (8003a20 <SpindleConsoleFunction+0x16c>)
 8003918:	4618      	mov	r0, r3
 800391a:	f7fc fc79 	bl	8000210 <strcmp>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d11b      	bne.n	800395c <SpindleConsoleFunction+0xa8>
	{
		// rpm value directly after start
		cmd.head.type = cctSTART;
 8003924:	2301      	movs	r3, #1
 8003926:	753b      	strb	r3, [r7, #20]
		cmd.request.args.asStart.speed    = 600.0f;
 8003928:	4b3e      	ldr	r3, [pc, #248]	@ (8003a24 <SpindleConsoleFunction+0x170>)
 800392a:	61bb      	str	r3, [r7, #24]
		if ( argc < 2 )
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2b01      	cmp	r3, #1
 8003930:	dc05      	bgt.n	800393e <SpindleConsoleFunction+0x8a>
		{
			printf("missing RPM value for start command\r\nFAIL");
 8003932:	483d      	ldr	r0, [pc, #244]	@ (8003a28 <SpindleConsoleFunction+0x174>)
 8003934:	f00c fa9c 	bl	800fe70 <iprintf>
			return -1;
 8003938:	f04f 33ff 	mov.w	r3, #4294967295
 800393c:	e067      	b.n	8003a0e <SpindleConsoleFunction+0x15a>
		}

		cmd.request.args.asStart.speed = (float)atof(argv[1]);
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	3304      	adds	r3, #4
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f00a fa09 	bl	800dd5c <atof>
 800394a:	ec53 2b10 	vmov	r2, r3, d0
 800394e:	4610      	mov	r0, r2
 8003950:	4619      	mov	r1, r3
 8003952:	f7fd f979 	bl	8000c48 <__aeabi_d2f>
 8003956:	4603      	mov	r3, r0
 8003958:	61bb      	str	r3, [r7, #24]
 800395a:	e011      	b.n	8003980 <SpindleConsoleFunction+0xcc>
	}
	else if ( strcmp(argv[0], "status") == 0 )
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4932      	ldr	r1, [pc, #200]	@ (8003a2c <SpindleConsoleFunction+0x178>)
 8003962:	4618      	mov	r0, r3
 8003964:	f7fc fc54 	bl	8000210 <strcmp>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d102      	bne.n	8003974 <SpindleConsoleFunction+0xc0>
	{
		// no further arguments, everything in result
		cmd.head.type = cctSTATUS;
 800396e:	2304      	movs	r3, #4
 8003970:	753b      	strb	r3, [r7, #20]
 8003972:	e005      	b.n	8003980 <SpindleConsoleFunction+0xcc>
	}
	else
	{
		printf("passed invalid sub command\r\nFAIL");
 8003974:	482e      	ldr	r0, [pc, #184]	@ (8003a30 <SpindleConsoleFunction+0x17c>)
 8003976:	f00c fa7b 	bl	800fe70 <iprintf>
		return -1;
 800397a:	f04f 33ff 	mov.w	r3, #4294967295
 800397e:	e046      	b.n	8003a0e <SpindleConsoleFunction+0x15a>
	}

	// now pass the request to the controller
	cmd.request.syncEvent = GetCommandEvent(h);
 8003980:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003982:	f7ff ff33 	bl	80037ec <GetCommandEvent>
 8003986:	4603      	mov	r3, r0
 8003988:	61fb      	str	r3, [r7, #28]

	if ( pdPASS != xQueueSend( h->cmdQueue, &cmd, -1 ) )
 800398a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800398c:	68d8      	ldr	r0, [r3, #12]
 800398e:	f107 0110 	add.w	r1, r7, #16
 8003992:	2300      	movs	r3, #0
 8003994:	f04f 32ff 	mov.w	r2, #4294967295
 8003998:	f007 fa70 	bl	800ae7c <xQueueGenericSend>
 800399c:	4603      	mov	r3, r0
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d007      	beq.n	80039b2 <SpindleConsoleFunction+0xfe>
	{
		ReleaseCommandEvent(h, cmd.request.syncEvent );
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	4619      	mov	r1, r3
 80039a6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80039a8:	f7ff ff54 	bl	8003854 <ReleaseCommandEvent>
		return -1;
 80039ac:	f04f 33ff 	mov.w	r3, #4294967295
 80039b0:	e02d      	b.n	8003a0e <SpindleConsoleFunction+0x15a>
	}

	xSemaphoreTake( cmd.request.syncEvent, -1 );
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	f04f 31ff 	mov.w	r1, #4294967295
 80039b8:	4618      	mov	r0, r3
 80039ba:	f007 fc6b 	bl	800b294 <xQueueSemaphoreTake>
	ReleaseCommandEvent(h, cmd.request.syncEvent );
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	4619      	mov	r1, r3
 80039c2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80039c4:	f7ff ff46 	bl	8003854 <ReleaseCommandEvent>

	// now decode the result in case there is one
	if ( response.code == 0 )
 80039c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d11b      	bne.n	8003a06 <SpindleConsoleFunction+0x152>
	{
		if ( cmd.head.type == cctSTATUS )
 80039ce:	7d3b      	ldrb	r3, [r7, #20]
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d114      	bne.n	80039fe <SpindleConsoleFunction+0x14a>
		{
			printf("%d\r\n", !!cmd.response->args.asStatus.running);
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	bf14      	ite	ne
 80039dc:	2301      	movne	r3, #1
 80039de:	2300      	moveq	r3, #0
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	4619      	mov	r1, r3
 80039e4:	4813      	ldr	r0, [pc, #76]	@ (8003a34 <SpindleConsoleFunction+0x180>)
 80039e6:	f00c fa43 	bl	800fe70 <iprintf>
			printf("%d\r\n", (int)cmd.response->args.asStatus.speed);
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80039f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039f4:	ee17 1a90 	vmov	r1, s15
 80039f8:	480e      	ldr	r0, [pc, #56]	@ (8003a34 <SpindleConsoleFunction+0x180>)
 80039fa:	f00c fa39 	bl	800fe70 <iprintf>
		}
		printf("OK");
 80039fe:	480e      	ldr	r0, [pc, #56]	@ (8003a38 <SpindleConsoleFunction+0x184>)
 8003a00:	f00c fa36 	bl	800fe70 <iprintf>
 8003a04:	e002      	b.n	8003a0c <SpindleConsoleFunction+0x158>
	}
	else
	{
		printf("error returned\r\nFAIL");
 8003a06:	480d      	ldr	r0, [pc, #52]	@ (8003a3c <SpindleConsoleFunction+0x188>)
 8003a08:	f00c fa32 	bl	800fe70 <iprintf>
	}

	// now back to console
	return response.code;
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3738      	adds	r7, #56	@ 0x38
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	08013b04 	.word	0x08013b04
 8003a1c:	08013b28 	.word	0x08013b28
 8003a20:	08013b30 	.word	0x08013b30
 8003a24:	44160000 	.word	0x44160000
 8003a28:	08013b38 	.word	0x08013b38
 8003a2c:	08013b64 	.word	0x08013b64
 8003a30:	08013b6c 	.word	0x08013b6c
 8003a34:	08013b90 	.word	0x08013b90
 8003a38:	08013b98 	.word	0x08013b98
 8003a3c:	08013b9c 	.word	0x08013b9c

08003a40 <SpindleRegisterBasicCommands>:

// --------------------------------------------------------------------------------------------------------------------
static void SpindleRegisterBasicCommands( SpindleHandle_t h, ConsoleHandle_t cH )
// --------------------------------------------------------------------------------------------------------------------
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af02      	add	r7, sp, #8
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
	CONSOLE_RegisterCommand(cH, "spindle", "<<spindle>> is used to control a spindle motor.\r\nValid subcommands are start, stop, status.\r\nStart needs an additional RPM argument!",
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	4b05      	ldr	r3, [pc, #20]	@ (8003a64 <SpindleRegisterBasicCommands+0x24>)
 8003a50:	4a05      	ldr	r2, [pc, #20]	@ (8003a68 <SpindleRegisterBasicCommands+0x28>)
 8003a52:	4906      	ldr	r1, [pc, #24]	@ (8003a6c <SpindleRegisterBasicCommands+0x2c>)
 8003a54:	6838      	ldr	r0, [r7, #0]
 8003a56:	f7ff fa5d 	bl	8002f14 <CONSOLE_RegisterCommand>
			SpindleConsoleFunction, h);
}
 8003a5a:	bf00      	nop
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	080038b5 	.word	0x080038b5
 8003a68:	08013bb4 	.word	0x08013bb4
 8003a6c:	08013c3c 	.word	0x08013c3c

08003a70 <SPINDLE_CreateInstance>:

// --------------------------------------------------------------------------------------------------------------------
SpindleHandle_t SPINDLE_CreateInstance( unsigned int uxStackDepth, int xPrio, ConsoleHandle_t cH, SpindlePhysicalParams_t* p )
// --------------------------------------------------------------------------------------------------------------------
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b08c      	sub	sp, #48	@ 0x30
 8003a74:	af02      	add	r7, sp, #8
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
 8003a7c:	603b      	str	r3, [r7, #0]
#define ON_NULL_GOTO_ERROR(x) do { if ((x) == NULL) goto error; } while(0);
	// singleton pattern
	if ( SpindleInstancePointer != NULL ) return SpindleInstancePointer;
 8003a7e:	4b86      	ldr	r3, [pc, #536]	@ (8003c98 <SPINDLE_CreateInstance+0x228>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d002      	beq.n	8003a8c <SPINDLE_CreateInstance+0x1c>
 8003a86:	4b84      	ldr	r3, [pc, #528]	@ (8003c98 <SPINDLE_CreateInstance+0x228>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	e101      	b.n	8003c90 <SPINDLE_CreateInstance+0x220>

	if ( p == NULL || p->enaPWM == NULL || p->setDirection == NULL ||
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d019      	beq.n	8003ac6 <SPINDLE_CreateInstance+0x56>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d015      	beq.n	8003ac6 <SPINDLE_CreateInstance+0x56>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d011      	beq.n	8003ac6 <SPINDLE_CreateInstance+0x56>
	     p->minRPM >= p->maxRPM || p->setDutyCycle == NULL || cH == NULL )
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	ed93 7a05 	vldr	s14, [r3, #20]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	edd3 7a03 	vldr	s15, [r3, #12]
	if ( p == NULL || p->enaPWM == NULL || p->setDirection == NULL ||
 8003aae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab6:	da06      	bge.n	8003ac6 <SPINDLE_CreateInstance+0x56>
	     p->minRPM >= p->maxRPM || p->setDutyCycle == NULL || cH == NULL )
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <SPINDLE_CreateInstance+0x56>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <SPINDLE_CreateInstance+0x5a>
		return NULL;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	e0e2      	b.n	8003c90 <SPINDLE_CreateInstance+0x220>

	struct SpindleHandle* h = calloc(sizeof(struct SpindleHandle), 1);
 8003aca:	2101      	movs	r1, #1
 8003acc:	203c      	movs	r0, #60	@ 0x3c
 8003ace:	f00a f949 	bl	800dd64 <calloc>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	61fb      	str	r3, [r7, #28]
	ON_NULL_GOTO_ERROR(h);
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 8082 	beq.w	8003be2 <SPINDLE_CreateInstance+0x172>

	if ( h == NULL ) return NULL;
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <SPINDLE_CreateInstance+0x78>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	e0d3      	b.n	8003c90 <SPINDLE_CreateInstance+0x220>
	h->consoleH = cH;
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	605a      	str	r2, [r3, #4]
	h->cancel = 0;
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	2200      	movs	r2, #0
 8003af2:	611a      	str	r2, [r3, #16]
	h->nextRequestID = 0;
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	2200      	movs	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]
	h->cmdQueue = xQueueCreate(16, sizeof(CtrlCommand_t));
 8003afa:	2200      	movs	r2, #0
 8003afc:	2114      	movs	r1, #20
 8003afe:	2010      	movs	r0, #16
 8003b00:	f007 f896 	bl	800ac30 <xQueueGenericCreate>
 8003b04:	4602      	mov	r2, r0
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	60da      	str	r2, [r3, #12]
	ON_NULL_GOTO_ERROR(h->cmdQueue);
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d067      	beq.n	8003be2 <SPINDLE_CreateInstance+0x172>

	// copy arguments
	memcpy(&h->physical, p, sizeof(SpindlePhysicalParams_t));
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	3314      	adds	r3, #20
 8003b16:	221c      	movs	r2, #28
 8003b18:	6839      	ldr	r1, [r7, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f00c fd64 	bl	80105e8 <memcpy>

	// now we create the sync event pool
	LIST_INIT(&h->syncEventPool.pool);
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	2200      	movs	r2, #0
 8003b24:	639a      	str	r2, [r3, #56]	@ 0x38
	h->syncEventPool.lockGuard = xSemaphoreCreateRecursiveMutex();
 8003b26:	2004      	movs	r0, #4
 8003b28:	f007 f915 	bl	800ad56 <xQueueCreateMutex>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	635a      	str	r2, [r3, #52]	@ 0x34
	ON_NULL_GOTO_ERROR(h->syncEventPool.lockGuard);
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d053      	beq.n	8003be2 <SPINDLE_CreateInstance+0x172>
	for ( int i = 0; i < 8; i++)
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b3e:	e035      	b.n	8003bac <SPINDLE_CreateInstance+0x13c>
	{
		stepSyncEventElement_t* el = (stepSyncEventElement_t*)calloc(sizeof(stepSyncEventElement_t), 1);
 8003b40:	2101      	movs	r1, #1
 8003b42:	2010      	movs	r0, #16
 8003b44:	f00a f90e 	bl	800dd64 <calloc>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	61bb      	str	r3, [r7, #24]
		ON_NULL_GOTO_ERROR(el);
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d047      	beq.n	8003be2 <SPINDLE_CreateInstance+0x172>
		el->content.allocated = 0;
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
		el->content.event = xSemaphoreCreateBinary();
 8003b58:	2203      	movs	r2, #3
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	f007 f867 	bl	800ac30 <xQueueGenericCreate>
 8003b62:	4602      	mov	r2, r0
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	605a      	str	r2, [r3, #4]
		if (el->content.event == NULL)
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d105      	bne.n	8003b7c <SPINDLE_CreateInstance+0x10c>
		{
			free(el);
 8003b70:	69b8      	ldr	r0, [r7, #24]
 8003b72:	f00a f963 	bl	800de3c <free>
			el = NULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	61bb      	str	r3, [r7, #24]
			goto error;
 8003b7a:	e032      	b.n	8003be2 <SPINDLE_CreateInstance+0x172>
		}
		else
		{
			LIST_INSERT_HEAD(&h->syncEventPool.pool, el, navigate);
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	609a      	str	r2, [r3, #8]
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d004      	beq.n	8003b96 <SPINDLE_CreateInstance+0x126>
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	3208      	adds	r2, #8
 8003b94:	60da      	str	r2, [r3, #12]
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	639a      	str	r2, [r3, #56]	@ 0x38
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	60da      	str	r2, [r3, #12]
	for ( int i = 0; i < 8; i++)
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba8:	3301      	adds	r3, #1
 8003baa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bae:	2b07      	cmp	r3, #7
 8003bb0:	ddc6      	ble.n	8003b40 <SPINDLE_CreateInstance+0xd0>
		}
	}

	// setup the console commands
	SpindleRegisterBasicCommands(h, cH);
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	69f8      	ldr	r0, [r7, #28]
 8003bb6:	f7ff ff43 	bl	8003a40 <SpindleRegisterBasicCommands>
	SpindleInstancePointer = h;
 8003bba:	4a37      	ldr	r2, [pc, #220]	@ (8003c98 <SPINDLE_CreateInstance+0x228>)
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	6013      	str	r3, [r2, #0]

	// setup the task which handles all communications and the RPM generation
	xTaskCreate(SpindleFunction, "spindlectrl", uxStackDepth, h, xPrio, &h->tHandle);
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	69fa      	ldr	r2, [r7, #28]
 8003bc4:	3208      	adds	r2, #8
 8003bc6:	9201      	str	r2, [sp, #4]
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	4933      	ldr	r1, [pc, #204]	@ (8003c9c <SPINDLE_CreateInstance+0x22c>)
 8003bd0:	4833      	ldr	r0, [pc, #204]	@ (8003ca0 <SPINDLE_CreateInstance+0x230>)
 8003bd2:	f007 fe2d 	bl	800b830 <xTaskCreate>
	ON_NULL_GOTO_ERROR(h->tHandle);
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <SPINDLE_CreateInstance+0x172>
	return h;
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	e056      	b.n	8003c90 <SPINDLE_CreateInstance+0x220>

error:
	if (h != NULL)
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d052      	beq.n	8003c8e <SPINDLE_CreateInstance+0x21e>
	{
		if (h->cmdQueue != NULL)
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d007      	beq.n	8003c00 <SPINDLE_CreateInstance+0x190>
		{
			vQueueDelete(h->cmdQueue);
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f007 fc5f 	bl	800b4b8 <vQueueDelete>
			h->cmdQueue = NULL;
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	60da      	str	r2, [r3, #12]
		}

		if (h->syncEventPool.lockGuard != NULL)
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d007      	beq.n	8003c18 <SPINDLE_CreateInstance+0x1a8>
		{
			vSemaphoreDelete(h->syncEventPool.lockGuard);
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f007 fc53 	bl	800b4b8 <vQueueDelete>
			h->syncEventPool.lockGuard = NULL;
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	2200      	movs	r2, #0
 8003c16:	635a      	str	r2, [r3, #52]	@ 0x34
		}

		// first clean all event elements
		stepSyncEventElement_t* el = NULL;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	623b      	str	r3, [r7, #32]
		stepSyncEventElement_t* tel = NULL;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]
		for (el = LIST_FIRST(&h->syncEventPool.pool); el && (tel = LIST_NEXT(el, navigate), 1); el = tel)
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c24:	623b      	str	r3, [r7, #32]
 8003c26:	e009      	b.n	8003c3c <SPINDLE_CreateInstance+0x1cc>
		{
			if (el->content.event != NULL)
			{
				vSemaphoreDelete(el->content.event);
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f007 fc43 	bl	800b4b8 <vQueueDelete>
				el->content.event = NULL;
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	2200      	movs	r2, #0
 8003c36:	605a      	str	r2, [r3, #4]
		for (el = LIST_FIRST(&h->syncEventPool.pool); el && (tel = LIST_NEXT(el, navigate), 1); el = tel)
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	623b      	str	r3, [r7, #32]
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d01e      	beq.n	8003c80 <SPINDLE_CreateInstance+0x210>
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	617b      	str	r3, [r7, #20]
			if (el->content.event != NULL)
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0f3      	beq.n	8003c38 <SPINDLE_CreateInstance+0x1c8>
 8003c50:	e7ea      	b.n	8003c28 <SPINDLE_CreateInstance+0x1b8>
		}

		// now remove all elements one by one from the list and free them
		while (!LIST_EMPTY(&h->syncEventPool.pool))
		{
			stepSyncEventElement_t* el = LIST_FIRST(&h->syncEventPool.pool);
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c56:	613b      	str	r3, [r7, #16]
			if (el != NULL)
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d010      	beq.n	8003c80 <SPINDLE_CreateInstance+0x210>
			{
				LIST_REMOVE(el, navigate);
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d004      	beq.n	8003c70 <SPINDLE_CreateInstance+0x200>
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	68d2      	ldr	r2, [r2, #12]
 8003c6e:	60da      	str	r2, [r3, #12]
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	6892      	ldr	r2, [r2, #8]
 8003c78:	601a      	str	r2, [r3, #0]
				free(el);
 8003c7a:	6938      	ldr	r0, [r7, #16]
 8003c7c:	f00a f8de 	bl	800de3c <free>
		while (!LIST_EMPTY(&h->syncEventPool.pool))
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1e4      	bne.n	8003c52 <SPINDLE_CreateInstance+0x1e2>
			}
		}

		free(h);
 8003c88:	69f8      	ldr	r0, [r7, #28]
 8003c8a:	f00a f8d7 	bl	800de3c <free>
	}

	return NULL;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3728      	adds	r7, #40	@ 0x28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	20000280 	.word	0x20000280
 8003c9c:	08013c44 	.word	0x08013c44
 8003ca0:	080034d5 	.word	0x080034d5

08003ca4 <vApplicationMallocFailedHook>:



extern void initialise_stdlib_abstraction(void);
void vApplicationMallocFailedHook(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8003caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cae:	b672      	cpsid	i
 8003cb0:	f383 8811 	msr	BASEPRI, r3
 8003cb4:	f3bf 8f6f 	isb	sy
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	b662      	cpsie	i
 8003cbe:	607b      	str	r3, [r7, #4]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8003cc0:	bf00      	nop
  taskDISABLE_INTERRUPTS();
  __asm volatile("bkpt #0");
 8003cc2:	be00      	bkpt	0x0000
  for (;;)
 8003cc4:	bf00      	nop
 8003cc6:	e7fd      	b.n	8003cc4 <vApplicationMallocFailedHook+0x20>

08003cc8 <vApplicationStackOverflowHook>:
    ;
  }
}
/*-----------------------------------------------------------*/
void vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
    __asm volatile
 8003cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd6:	b672      	cpsid	i
 8003cd8:	f383 8811 	msr	BASEPRI, r3
 8003cdc:	f3bf 8f6f 	isb	sy
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	b662      	cpsie	i
 8003ce6:	60fb      	str	r3, [r7, #12]
}
 8003ce8:	bf00      	nop
  (void)pcTaskName;
  (void)pxTask;

  taskDISABLE_INTERRUPTS();
  __asm volatile("bkpt #0");
 8003cea:	be00      	bkpt	0x0000
  for (;;)
 8003cec:	bf00      	nop
 8003cee:	e7fd      	b.n	8003cec <vApplicationStackOverflowHook+0x24>

08003cf0 <InitTask>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void InitTask()
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af02      	add	r7, sp, #8

  consoleHandle = CONSOLE_CreateInstance(4 * configMINIMAL_STACK_SIZE, configMAX_PRIORITIES - 5);
 8003cf6:	2102      	movs	r1, #2
 8003cf8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003cfc:	f7ff f88e 	bl	8002e1c <CONSOLE_CreateInstance>
 8003d00:	4603      	mov	r3, r0
 8003d02:	4a09      	ldr	r2, [pc, #36]	@ (8003d28 <InitTask+0x38>)
 8003d04:	6013      	str	r3, [r2, #0]

  CONSOLE_RegisterCommand(consoleHandle, "capability", "Shows what the program is capable of", CapabilityFunc, NULL);
 8003d06:	4b08      	ldr	r3, [pc, #32]	@ (8003d28 <InitTask+0x38>)
 8003d08:	6818      	ldr	r0, [r3, #0]
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	4b07      	ldr	r3, [pc, #28]	@ (8003d2c <InitTask+0x3c>)
 8003d10:	4a07      	ldr	r2, [pc, #28]	@ (8003d30 <InitTask+0x40>)
 8003d12:	4908      	ldr	r1, [pc, #32]	@ (8003d34 <InitTask+0x44>)
 8003d14:	f7ff f8fe 	bl	8002f14 <CONSOLE_RegisterCommand>
  //InitStepper(consoleHandle, &hspi1, &htim1, &htim4);
  InitSpindle(&consoleHandle, &htim2);
 8003d18:	4907      	ldr	r1, [pc, #28]	@ (8003d38 <InitTask+0x48>)
 8003d1a:	4803      	ldr	r0, [pc, #12]	@ (8003d28 <InitTask+0x38>)
 8003d1c:	f7ff fb92 	bl	8003444 <InitSpindle>


}
 8003d20:	bf00      	nop
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	200003c0 	.word	0x200003c0
 8003d2c:	08003d3d 	.word	0x08003d3d
 8003d30:	08013c50 	.word	0x08013c50
 8003d34:	08013c78 	.word	0x08013c78
 8003d38:	200002e8 	.word	0x200002e8

08003d3c <CapabilityFunc>:

// -------------------------------------------------------------------------------------------------------------------
static int CapabilityFunc(int argc, char **argv, void *ctx)
// --------------------------------------------------------------------------------------------------------------------
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b09c      	sub	sp, #112	@ 0x70
 8003d40:	af18      	add	r7, sp, #96	@ 0x60
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  (void)argc;
  (void)argv;
  (void)ctx;
  printf("%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\r\nOK",
 8003d48:	2300      	movs	r3, #0
 8003d4a:	9317      	str	r3, [sp, #92]	@ 0x5c
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	9316      	str	r3, [sp, #88]	@ 0x58
 8003d50:	2300      	movs	r3, #0
 8003d52:	9315      	str	r3, [sp, #84]	@ 0x54
 8003d54:	2300      	movs	r3, #0
 8003d56:	9314      	str	r3, [sp, #80]	@ 0x50
 8003d58:	2300      	movs	r3, #0
 8003d5a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	9312      	str	r3, [sp, #72]	@ 0x48
 8003d60:	2300      	movs	r3, #0
 8003d62:	9311      	str	r3, [sp, #68]	@ 0x44
 8003d64:	2300      	movs	r3, #0
 8003d66:	9310      	str	r3, [sp, #64]	@ 0x40
 8003d68:	2300      	movs	r3, #0
 8003d6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	930e      	str	r3, [sp, #56]	@ 0x38
 8003d70:	2300      	movs	r3, #0
 8003d72:	930d      	str	r3, [sp, #52]	@ 0x34
 8003d74:	2300      	movs	r3, #0
 8003d76:	930c      	str	r3, [sp, #48]	@ 0x30
 8003d78:	2300      	movs	r3, #0
 8003d7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003d80:	2300      	movs	r3, #0
 8003d82:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d84:	2300      	movs	r3, #0
 8003d86:	9308      	str	r3, [sp, #32]
 8003d88:	2300      	movs	r3, #0
 8003d8a:	9307      	str	r3, [sp, #28]
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	9306      	str	r3, [sp, #24]
 8003d90:	2300      	movs	r3, #0
 8003d92:	9305      	str	r3, [sp, #20]
 8003d94:	2300      	movs	r3, #0
 8003d96:	9304      	str	r3, [sp, #16]
 8003d98:	2300      	movs	r3, #0
 8003d9a:	9303      	str	r3, [sp, #12]
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	9302      	str	r3, [sp, #8]
 8003da0:	2300      	movs	r3, #0
 8003da2:	9301      	str	r3, [sp, #4]
 8003da4:	2300      	movs	r3, #0
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	2300      	movs	r3, #0
 8003daa:	2200      	movs	r2, #0
 8003dac:	2100      	movs	r1, #0
 8003dae:	4804      	ldr	r0, [pc, #16]	@ (8003dc0 <CapabilityFunc+0x84>)
 8003db0:	f00c f85e 	bl	800fe70 <iprintf>
         0, // has stepper config posmin
         0, // has stepper config posref
         0, // has stepper config stepsperturn
         0  // has stepper cancel
  );
  return 0;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	08013c84 	.word	0x08013c84

08003dc4 <main>:

int main(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8003dca:	f000 fb13 	bl	80043f4 <MPU_Config>
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003dce:	f000 ffd4 	bl	8004d7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003dd2:	f000 f82d 	bl	8003e30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003dd6:	f000 f981 	bl	80040dc <MX_GPIO_Init>
  MX_SPI1_Init();
 8003dda:	f000 f88f 	bl	8003efc <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8003dde:	f000 f94d 	bl	800407c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8003de2:	f000 f8c9 	bl	8003f78 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  if (xTaskCreate(&InitTask, "Initialisation", 2000, NULL, 2, &InitTaskHandle) != pdPASS)
 8003de6:	4b0d      	ldr	r3, [pc, #52]	@ (8003e1c <main+0x58>)
 8003de8:	9301      	str	r3, [sp, #4]
 8003dea:	2302      	movs	r3, #2
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	2300      	movs	r3, #0
 8003df0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003df4:	490a      	ldr	r1, [pc, #40]	@ (8003e20 <main+0x5c>)
 8003df6:	480b      	ldr	r0, [pc, #44]	@ (8003e24 <main+0x60>)
 8003df8:	f007 fd1a 	bl	800b830 <xTaskCreate>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d004      	beq.n	8003e0c <main+0x48>
  {
    printf("Failed to create initialization task\r\n");
 8003e02:	4809      	ldr	r0, [pc, #36]	@ (8003e28 <main+0x64>)
 8003e04:	f00c f8a4 	bl	800ff50 <puts>
    Error_Handler();
 8003e08:	f000 fb33 	bl	8004472 <Error_Handler>
  }

  printf("System init start\r\n");
 8003e0c:	4807      	ldr	r0, [pc, #28]	@ (8003e2c <main+0x68>)
 8003e0e:	f00c f89f 	bl	800ff50 <puts>

  (void)CapabilityFunc;

  //InitTask();
  vTaskStartScheduler();
 8003e12:	f008 f83f 	bl	800be94 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003e16:	bf00      	nop
 8003e18:	e7fd      	b.n	8003e16 <main+0x52>
 8003e1a:	bf00      	nop
 8003e1c:	200003bc 	.word	0x200003bc
 8003e20:	08013cdc 	.word	0x08013cdc
 8003e24:	08003cf1 	.word	0x08003cf1
 8003e28:	08013cec 	.word	0x08013cec
 8003e2c:	08013d14 	.word	0x08013d14

08003e30 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b094      	sub	sp, #80	@ 0x50
 8003e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct =
 8003e36:	f107 0320 	add.w	r3, r7, #32
 8003e3a:	2230      	movs	r2, #48	@ 0x30
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f00c fa6c 	bl	801031c <memset>
      {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8003e44:	f107 030c 	add.w	r3, r7, #12
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	605a      	str	r2, [r3, #4]
 8003e4e:	609a      	str	r2, [r3, #8]
 8003e50:	60da      	str	r2, [r3, #12]
 8003e52:	611a      	str	r2, [r3, #16]
      {0};

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e54:	4b27      	ldr	r3, [pc, #156]	@ (8003ef4 <SystemClock_Config+0xc4>)
 8003e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e58:	4a26      	ldr	r2, [pc, #152]	@ (8003ef4 <SystemClock_Config+0xc4>)
 8003e5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e60:	4b24      	ldr	r3, [pc, #144]	@ (8003ef4 <SystemClock_Config+0xc4>)
 8003e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e68:	60bb      	str	r3, [r7, #8]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e6c:	4b22      	ldr	r3, [pc, #136]	@ (8003ef8 <SystemClock_Config+0xc8>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a21      	ldr	r2, [pc, #132]	@ (8003ef8 <SystemClock_Config+0xc8>)
 8003e72:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	4b1f      	ldr	r3, [pc, #124]	@ (8003ef8 <SystemClock_Config+0xc8>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003e80:	607b      	str	r3, [r7, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003e84:	2302      	movs	r3, #2
 8003e86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003e8c:	2310      	movs	r3, #16
 8003e8e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e90:	2302      	movs	r3, #2
 8003e92:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003e94:	2300      	movs	r3, #0
 8003e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003e98:	2308      	movs	r3, #8
 8003e9a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003e9c:	23b4      	movs	r3, #180	@ 0xb4
 8003e9e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ea8:	f107 0320 	add.w	r3, r7, #32
 8003eac:	4618      	mov	r0, r3
 8003eae:	f001 fe4d 	bl	8005b4c <HAL_RCC_OscConfig>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003eb8:	f000 fadb 	bl	8004472 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ebc:	230f      	movs	r3, #15
 8003ebe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003ec8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003ecc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003ece:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ed2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003ed4:	f107 030c 	add.w	r3, r7, #12
 8003ed8:	2105      	movs	r1, #5
 8003eda:	4618      	mov	r0, r3
 8003edc:	f002 f990 	bl	8006200 <HAL_RCC_ClockConfig>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <SystemClock_Config+0xba>
  {
    Error_Handler();
 8003ee6:	f000 fac4 	bl	8004472 <Error_Handler>
  }
}
 8003eea:	bf00      	nop
 8003eec:	3750      	adds	r7, #80	@ 0x50
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	40007000 	.word	0x40007000

08003efc <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003f00:	4b1b      	ldr	r3, [pc, #108]	@ (8003f70 <MX_SPI1_Init+0x74>)
 8003f02:	4a1c      	ldr	r2, [pc, #112]	@ (8003f74 <MX_SPI1_Init+0x78>)
 8003f04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003f06:	4b1a      	ldr	r3, [pc, #104]	@ (8003f70 <MX_SPI1_Init+0x74>)
 8003f08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003f0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003f0e:	4b18      	ldr	r3, [pc, #96]	@ (8003f70 <MX_SPI1_Init+0x74>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f14:	4b16      	ldr	r3, [pc, #88]	@ (8003f70 <MX_SPI1_Init+0x74>)
 8003f16:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003f1a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003f1c:	4b14      	ldr	r3, [pc, #80]	@ (8003f70 <MX_SPI1_Init+0x74>)
 8003f1e:	2202      	movs	r2, #2
 8003f20:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003f22:	4b13      	ldr	r3, [pc, #76]	@ (8003f70 <MX_SPI1_Init+0x74>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003f28:	4b11      	ldr	r3, [pc, #68]	@ (8003f70 <MX_SPI1_Init+0x74>)
 8003f2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f2e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003f30:	4b0f      	ldr	r3, [pc, #60]	@ (8003f70 <MX_SPI1_Init+0x74>)
 8003f32:	2220      	movs	r2, #32
 8003f34:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f36:	4b0e      	ldr	r3, [pc, #56]	@ (8003f70 <MX_SPI1_Init+0x74>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f70 <MX_SPI1_Init+0x74>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f42:	4b0b      	ldr	r3, [pc, #44]	@ (8003f70 <MX_SPI1_Init+0x74>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003f48:	4b09      	ldr	r3, [pc, #36]	@ (8003f70 <MX_SPI1_Init+0x74>)
 8003f4a:	2207      	movs	r2, #7
 8003f4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003f4e:	4b08      	ldr	r3, [pc, #32]	@ (8003f70 <MX_SPI1_Init+0x74>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003f54:	4b06      	ldr	r3, [pc, #24]	@ (8003f70 <MX_SPI1_Init+0x74>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003f5a:	4805      	ldr	r0, [pc, #20]	@ (8003f70 <MX_SPI1_Init+0x74>)
 8003f5c:	f003 fbd6 	bl	800770c <HAL_SPI_Init>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003f66:	f000 fa84 	bl	8004472 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8003f6a:	bf00      	nop
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	20000284 	.word	0x20000284
 8003f74:	40013000 	.word	0x40013000

08003f78 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08e      	sub	sp, #56	@ 0x38
 8003f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig =
 8003f7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f82:	2200      	movs	r2, #0
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	605a      	str	r2, [r3, #4]
 8003f88:	609a      	str	r2, [r3, #8]
 8003f8a:	60da      	str	r2, [r3, #12]
      {0};
  TIM_MasterConfigTypeDef sMasterConfig =
 8003f8c:	f107 031c 	add.w	r3, r7, #28
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	605a      	str	r2, [r3, #4]
 8003f96:	609a      	str	r2, [r3, #8]
      {0};
  TIM_OC_InitTypeDef sConfigOC =
 8003f98:	463b      	mov	r3, r7
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	605a      	str	r2, [r3, #4]
 8003fa0:	609a      	str	r2, [r3, #8]
 8003fa2:	60da      	str	r2, [r3, #12]
 8003fa4:	611a      	str	r2, [r3, #16]
 8003fa6:	615a      	str	r2, [r3, #20]
 8003fa8:	619a      	str	r2, [r3, #24]
      {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003faa:	4b33      	ldr	r3, [pc, #204]	@ (8004078 <MX_TIM2_Init+0x100>)
 8003fac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003fb0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003fb2:	4b31      	ldr	r3, [pc, #196]	@ (8004078 <MX_TIM2_Init+0x100>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fb8:	4b2f      	ldr	r3, [pc, #188]	@ (8004078 <MX_TIM2_Init+0x100>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4499;
 8003fbe:	4b2e      	ldr	r3, [pc, #184]	@ (8004078 <MX_TIM2_Init+0x100>)
 8003fc0:	f241 1293 	movw	r2, #4499	@ 0x1193
 8003fc4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fc6:	4b2c      	ldr	r3, [pc, #176]	@ (8004078 <MX_TIM2_Init+0x100>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fcc:	4b2a      	ldr	r3, [pc, #168]	@ (8004078 <MX_TIM2_Init+0x100>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003fd2:	4829      	ldr	r0, [pc, #164]	@ (8004078 <MX_TIM2_Init+0x100>)
 8003fd4:	f003 fec6 	bl	8007d64 <HAL_TIM_Base_Init>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003fde:	f000 fa48 	bl	8004472 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fe2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003fe8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003fec:	4619      	mov	r1, r3
 8003fee:	4822      	ldr	r0, [pc, #136]	@ (8004078 <MX_TIM2_Init+0x100>)
 8003ff0:	f004 fd34 	bl	8008a5c <HAL_TIM_ConfigClockSource>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003ffa:	f000 fa3a 	bl	8004472 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003ffe:	481e      	ldr	r0, [pc, #120]	@ (8004078 <MX_TIM2_Init+0x100>)
 8004000:	f003 ffd0 	bl	8007fa4 <HAL_TIM_PWM_Init>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800400a:	f000 fa32 	bl	8004472 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800400e:	2300      	movs	r3, #0
 8004010:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004012:	2300      	movs	r3, #0
 8004014:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004016:	f107 031c 	add.w	r3, r7, #28
 800401a:	4619      	mov	r1, r3
 800401c:	4816      	ldr	r0, [pc, #88]	@ (8004078 <MX_TIM2_Init+0x100>)
 800401e:	f005 fd27 	bl	8009a70 <HAL_TIMEx_MasterConfigSynchronization>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004028:	f000 fa23 	bl	8004472 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800402c:	2360      	movs	r3, #96	@ 0x60
 800402e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004030:	2300      	movs	r3, #0
 8004032:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004034:	2300      	movs	r3, #0
 8004036:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004038:	2300      	movs	r3, #0
 800403a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800403c:	463b      	mov	r3, r7
 800403e:	2208      	movs	r2, #8
 8004040:	4619      	mov	r1, r3
 8004042:	480d      	ldr	r0, [pc, #52]	@ (8004078 <MX_TIM2_Init+0x100>)
 8004044:	f004 faa2 	bl	800858c <HAL_TIM_PWM_ConfigChannel>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800404e:	f000 fa10 	bl	8004472 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004052:	463b      	mov	r3, r7
 8004054:	220c      	movs	r2, #12
 8004056:	4619      	mov	r1, r3
 8004058:	4807      	ldr	r0, [pc, #28]	@ (8004078 <MX_TIM2_Init+0x100>)
 800405a:	f004 fa97 	bl	800858c <HAL_TIM_PWM_ConfigChannel>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8004064:	f000 fa05 	bl	8004472 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004068:	4803      	ldr	r0, [pc, #12]	@ (8004078 <MX_TIM2_Init+0x100>)
 800406a:	f000 fd87 	bl	8004b7c <HAL_TIM_MspPostInit>
}
 800406e:	bf00      	nop
 8004070:	3738      	adds	r7, #56	@ 0x38
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	200002e8 	.word	0x200002e8

0800407c <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004080:	4b14      	ldr	r3, [pc, #80]	@ (80040d4 <MX_USART3_UART_Init+0x58>)
 8004082:	4a15      	ldr	r2, [pc, #84]	@ (80040d8 <MX_USART3_UART_Init+0x5c>)
 8004084:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004086:	4b13      	ldr	r3, [pc, #76]	@ (80040d4 <MX_USART3_UART_Init+0x58>)
 8004088:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800408c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800408e:	4b11      	ldr	r3, [pc, #68]	@ (80040d4 <MX_USART3_UART_Init+0x58>)
 8004090:	2200      	movs	r2, #0
 8004092:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004094:	4b0f      	ldr	r3, [pc, #60]	@ (80040d4 <MX_USART3_UART_Init+0x58>)
 8004096:	2200      	movs	r2, #0
 8004098:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800409a:	4b0e      	ldr	r3, [pc, #56]	@ (80040d4 <MX_USART3_UART_Init+0x58>)
 800409c:	2200      	movs	r2, #0
 800409e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80040a0:	4b0c      	ldr	r3, [pc, #48]	@ (80040d4 <MX_USART3_UART_Init+0x58>)
 80040a2:	220c      	movs	r2, #12
 80040a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040a6:	4b0b      	ldr	r3, [pc, #44]	@ (80040d4 <MX_USART3_UART_Init+0x58>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80040ac:	4b09      	ldr	r3, [pc, #36]	@ (80040d4 <MX_USART3_UART_Init+0x58>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80040b2:	4b08      	ldr	r3, [pc, #32]	@ (80040d4 <MX_USART3_UART_Init+0x58>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80040b8:	4b06      	ldr	r3, [pc, #24]	@ (80040d4 <MX_USART3_UART_Init+0x58>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80040be:	4805      	ldr	r0, [pc, #20]	@ (80040d4 <MX_USART3_UART_Init+0x58>)
 80040c0:	f005 fe2e 	bl	8009d20 <HAL_UART_Init>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80040ca:	f000 f9d2 	bl	8004472 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 80040ce:	bf00      	nop
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	20000334 	.word	0x20000334
 80040d8:	40004800 	.word	0x40004800

080040dc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b08c      	sub	sp, #48	@ 0x30
 80040e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct =
 80040e2:	f107 031c 	add.w	r3, r7, #28
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	605a      	str	r2, [r3, #4]
 80040ec:	609a      	str	r2, [r3, #8]
 80040ee:	60da      	str	r2, [r3, #12]
 80040f0:	611a      	str	r2, [r3, #16]
      {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040f2:	4b81      	ldr	r3, [pc, #516]	@ (80042f8 <MX_GPIO_Init+0x21c>)
 80040f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f6:	4a80      	ldr	r2, [pc, #512]	@ (80042f8 <MX_GPIO_Init+0x21c>)
 80040f8:	f043 0304 	orr.w	r3, r3, #4
 80040fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80040fe:	4b7e      	ldr	r3, [pc, #504]	@ (80042f8 <MX_GPIO_Init+0x21c>)
 8004100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004102:	f003 0304 	and.w	r3, r3, #4
 8004106:	61bb      	str	r3, [r7, #24]
 8004108:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800410a:	4b7b      	ldr	r3, [pc, #492]	@ (80042f8 <MX_GPIO_Init+0x21c>)
 800410c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410e:	4a7a      	ldr	r2, [pc, #488]	@ (80042f8 <MX_GPIO_Init+0x21c>)
 8004110:	f043 0301 	orr.w	r3, r3, #1
 8004114:	6313      	str	r3, [r2, #48]	@ 0x30
 8004116:	4b78      	ldr	r3, [pc, #480]	@ (80042f8 <MX_GPIO_Init+0x21c>)
 8004118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004122:	4b75      	ldr	r3, [pc, #468]	@ (80042f8 <MX_GPIO_Init+0x21c>)
 8004124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004126:	4a74      	ldr	r2, [pc, #464]	@ (80042f8 <MX_GPIO_Init+0x21c>)
 8004128:	f043 0302 	orr.w	r3, r3, #2
 800412c:	6313      	str	r3, [r2, #48]	@ 0x30
 800412e:	4b72      	ldr	r3, [pc, #456]	@ (80042f8 <MX_GPIO_Init+0x21c>)
 8004130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	613b      	str	r3, [r7, #16]
 8004138:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800413a:	4b6f      	ldr	r3, [pc, #444]	@ (80042f8 <MX_GPIO_Init+0x21c>)
 800413c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413e:	4a6e      	ldr	r2, [pc, #440]	@ (80042f8 <MX_GPIO_Init+0x21c>)
 8004140:	f043 0320 	orr.w	r3, r3, #32
 8004144:	6313      	str	r3, [r2, #48]	@ 0x30
 8004146:	4b6c      	ldr	r3, [pc, #432]	@ (80042f8 <MX_GPIO_Init+0x21c>)
 8004148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004152:	4b69      	ldr	r3, [pc, #420]	@ (80042f8 <MX_GPIO_Init+0x21c>)
 8004154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004156:	4a68      	ldr	r2, [pc, #416]	@ (80042f8 <MX_GPIO_Init+0x21c>)
 8004158:	f043 0310 	orr.w	r3, r3, #16
 800415c:	6313      	str	r3, [r2, #48]	@ 0x30
 800415e:	4b66      	ldr	r3, [pc, #408]	@ (80042f8 <MX_GPIO_Init+0x21c>)
 8004160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004162:	f003 0310 	and.w	r3, r3, #16
 8004166:	60bb      	str	r3, [r7, #8]
 8004168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800416a:	4b63      	ldr	r3, [pc, #396]	@ (80042f8 <MX_GPIO_Init+0x21c>)
 800416c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800416e:	4a62      	ldr	r2, [pc, #392]	@ (80042f8 <MX_GPIO_Init+0x21c>)
 8004170:	f043 0308 	orr.w	r3, r3, #8
 8004174:	6313      	str	r3, [r2, #48]	@ 0x30
 8004176:	4b60      	ldr	r3, [pc, #384]	@ (80042f8 <MX_GPIO_Init+0x21c>)
 8004178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	607b      	str	r3, [r7, #4]
 8004180:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin | LED_RED_Pin | LED_BLUE_Pin, GPIO_PIN_RESET);
 8004182:	2200      	movs	r2, #0
 8004184:	f244 0181 	movw	r1, #16513	@ 0x4081
 8004188:	485c      	ldr	r0, [pc, #368]	@ (80042fc <MX_GPIO_Init+0x220>)
 800418a:	f001 fcb3 	bl	8005af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, STEP_RSTN_Pin | STEP_DIR_Pin, GPIO_PIN_RESET);
 800418e:	2200      	movs	r2, #0
 8004190:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8004194:	485a      	ldr	r0, [pc, #360]	@ (8004300 <MX_GPIO_Init+0x224>)
 8004196:	f001 fcad 	bl	8005af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPINDLE_ENA_L_Pin | SPINDLE_ENA_R_Pin, GPIO_PIN_RESET);
 800419a:	2200      	movs	r2, #0
 800419c:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80041a0:	4858      	ldr	r0, [pc, #352]	@ (8004304 <MX_GPIO_Init+0x228>)
 80041a2:	f001 fca7 	bl	8005af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEP_SPI_CS_GPIO_Port, STEP_SPI_CS_Pin, GPIO_PIN_SET);
 80041a6:	2201      	movs	r2, #1
 80041a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80041ac:	4856      	ldr	r0, [pc, #344]	@ (8004308 <MX_GPIO_Init+0x22c>)
 80041ae:	f001 fca1 	bl	8005af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEP_PULSE_GPIO_Port, STEP_PULSE_Pin, GPIO_PIN_RESET);
 80041b2:	2200      	movs	r2, #0
 80041b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041b8:	4853      	ldr	r0, [pc, #332]	@ (8004308 <MX_GPIO_Init+0x22c>)
 80041ba:	f001 fc9b 	bl	8005af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USR_BUTTON_Pin */
  GPIO_InitStruct.Pin = USR_BUTTON_Pin;
 80041be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80041c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041c4:	2300      	movs	r3, #0
 80041c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c8:	2300      	movs	r3, #0
 80041ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USR_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80041cc:	f107 031c 	add.w	r3, r7, #28
 80041d0:	4619      	mov	r1, r3
 80041d2:	484e      	ldr	r0, [pc, #312]	@ (800430c <MX_GPIO_Init+0x230>)
 80041d4:	f001 f91e 	bl	8005414 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPINDLE_SI_R_Pin */
  GPIO_InitStruct.Pin = SPINDLE_SI_R_Pin;
 80041d8:	2301      	movs	r3, #1
 80041da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041dc:	2300      	movs	r3, #0
 80041de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPINDLE_SI_R_GPIO_Port, &GPIO_InitStruct);
 80041e4:	f107 031c 	add.w	r3, r7, #28
 80041e8:	4619      	mov	r1, r3
 80041ea:	4849      	ldr	r0, [pc, #292]	@ (8004310 <MX_GPIO_Init+0x234>)
 80041ec:	f001 f912 	bl	8005414 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin | LED_RED_Pin | LED_BLUE_Pin;
 80041f0:	f244 0381 	movw	r3, #16513	@ 0x4081
 80041f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041f6:	2301      	movs	r3, #1
 80041f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041fa:	2300      	movs	r3, #0
 80041fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041fe:	2300      	movs	r3, #0
 8004200:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004202:	f107 031c 	add.w	r3, r7, #28
 8004206:	4619      	mov	r1, r3
 8004208:	483c      	ldr	r0, [pc, #240]	@ (80042fc <MX_GPIO_Init+0x220>)
 800420a:	f001 f903 	bl	8005414 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_RSTN_Pin */
  GPIO_InitStruct.Pin = STEP_RSTN_Pin;
 800420e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004214:	2301      	movs	r3, #1
 8004216:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004218:	2300      	movs	r3, #0
 800421a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800421c:	2300      	movs	r3, #0
 800421e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP_RSTN_GPIO_Port, &GPIO_InitStruct);
 8004220:	f107 031c 	add.w	r3, r7, #28
 8004224:	4619      	mov	r1, r3
 8004226:	4836      	ldr	r0, [pc, #216]	@ (8004300 <MX_GPIO_Init+0x224>)
 8004228:	f001 f8f4 	bl	8005414 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_DIR_Pin */
  GPIO_InitStruct.Pin = STEP_DIR_Pin;
 800422c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004230:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004232:	2301      	movs	r3, #1
 8004234:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004236:	2300      	movs	r3, #0
 8004238:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800423a:	2303      	movs	r3, #3
 800423c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP_DIR_GPIO_Port, &GPIO_InitStruct);
 800423e:	f107 031c 	add.w	r3, r7, #28
 8004242:	4619      	mov	r1, r3
 8004244:	482e      	ldr	r0, [pc, #184]	@ (8004300 <MX_GPIO_Init+0x224>)
 8004246:	f001 f8e5 	bl	8005414 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_FLAG_Pin */
  GPIO_InitStruct.Pin = STEP_FLAG_Pin;
 800424a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800424e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004250:	2300      	movs	r3, #0
 8004252:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004254:	2301      	movs	r3, #1
 8004256:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(STEP_FLAG_GPIO_Port, &GPIO_InitStruct);
 8004258:	f107 031c 	add.w	r3, r7, #28
 800425c:	4619      	mov	r1, r3
 800425e:	4828      	ldr	r0, [pc, #160]	@ (8004300 <MX_GPIO_Init+0x224>)
 8004260:	f001 f8d8 	bl	8005414 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPINDLE_ENA_L_Pin SPINDLE_ENA_R_Pin */
  GPIO_InitStruct.Pin = SPINDLE_ENA_L_Pin | SPINDLE_ENA_R_Pin;
 8004264:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8004268:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800426a:	2301      	movs	r3, #1
 800426c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800426e:	2300      	movs	r3, #0
 8004270:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004272:	2300      	movs	r3, #0
 8004274:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004276:	f107 031c 	add.w	r3, r7, #28
 800427a:	4619      	mov	r1, r3
 800427c:	4821      	ldr	r0, [pc, #132]	@ (8004304 <MX_GPIO_Init+0x228>)
 800427e:	f001 f8c9 	bl	8005414 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_SPI_CS_Pin */
  GPIO_InitStruct.Pin = STEP_SPI_CS_Pin;
 8004282:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004286:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004288:	2301      	movs	r3, #1
 800428a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800428c:	2300      	movs	r3, #0
 800428e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004290:	2303      	movs	r3, #3
 8004292:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8004294:	f107 031c 	add.w	r3, r7, #28
 8004298:	4619      	mov	r1, r3
 800429a:	481b      	ldr	r0, [pc, #108]	@ (8004308 <MX_GPIO_Init+0x22c>)
 800429c:	f001 f8ba 	bl	8005414 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_PULSE_Pin */
  GPIO_InitStruct.Pin = STEP_PULSE_Pin;
 80042a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042a6:	2301      	movs	r3, #1
 80042a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042aa:	2300      	movs	r3, #0
 80042ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ae:	2300      	movs	r3, #0
 80042b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP_PULSE_GPIO_Port, &GPIO_InitStruct);
 80042b2:	f107 031c 	add.w	r3, r7, #28
 80042b6:	4619      	mov	r1, r3
 80042b8:	4813      	ldr	r0, [pc, #76]	@ (8004308 <MX_GPIO_Init+0x22c>)
 80042ba:	f001 f8ab 	bl	8005414 <HAL_GPIO_Init>

  /*Configure GPIO pins : REFERENCE_MARK_Pin LIMIT_SWITCH_Pin */
  GPIO_InitStruct.Pin = REFERENCE_MARK_Pin | LIMIT_SWITCH_Pin;
 80042be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80042c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042c4:	2300      	movs	r3, #0
 80042c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c8:	2300      	movs	r3, #0
 80042ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042cc:	f107 031c 	add.w	r3, r7, #28
 80042d0:	4619      	mov	r1, r3
 80042d2:	480a      	ldr	r0, [pc, #40]	@ (80042fc <MX_GPIO_Init+0x220>)
 80042d4:	f001 f89e 	bl	8005414 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPINDLE_SI_L_Pin */
  GPIO_InitStruct.Pin = SPINDLE_SI_L_Pin;
 80042d8:	2301      	movs	r3, #1
 80042da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042dc:	2300      	movs	r3, #0
 80042de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e0:	2300      	movs	r3, #0
 80042e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPINDLE_SI_L_GPIO_Port, &GPIO_InitStruct);
 80042e4:	f107 031c 	add.w	r3, r7, #28
 80042e8:	4619      	mov	r1, r3
 80042ea:	4806      	ldr	r0, [pc, #24]	@ (8004304 <MX_GPIO_Init+0x228>)
 80042ec:	f001 f892 	bl	8005414 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80042f0:	bf00      	nop
 80042f2:	3730      	adds	r7, #48	@ 0x30
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	40023800 	.word	0x40023800
 80042fc:	40020400 	.word	0x40020400
 8004300:	40021400 	.word	0x40021400
 8004304:	40021000 	.word	0x40021000
 8004308:	40020c00 	.word	0x40020c00
 800430c:	40020800 	.word	0x40020800
 8004310:	40020000 	.word	0x40020000

08004314 <vAssertCalled>:

/* USER CODE BEGIN 4 */
void vAssertCalled(const char *const pcFileName, unsigned long ulLine)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  volatile uint32_t ulSetToNonZeroInDebuggerToContinue = 0;
 800431e:	2300      	movs	r3, #0
 8004320:	60fb      	str	r3, [r7, #12]

  /* Parameters are not used. */
  (void)ulLine;
  (void)pcFileName;

  taskENTER_CRITICAL();
 8004322:	f009 fc0d 	bl	800db40 <vPortEnterCritical>
  {
    /* You can step out of this function to debug the assertion by using
     the debugger to set ulSetToNonZeroInDebuggerToContinue to a non-zero
     value. */
    while (ulSetToNonZeroInDebuggerToContinue == 0)
 8004326:	bf00      	nop
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0fc      	beq.n	8004328 <vAssertCalled+0x14>
    {
    }
  }
  taskEXIT_CRITICAL();
 800432e:	f009 fc3f 	bl	800dbb0 <vPortExitCritical>
}
 8004332:	bf00      	nop
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
	...

0800433c <__stdout_put_char>:

int __stdout_put_char(int ch)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint8_t val = ch;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	73fb      	strb	r3, [r7, #15]
  while ((huart3.Instance->ISR & UART_FLAG_TXE) == 0)
 8004348:	bf00      	nop
 800434a:	4b0d      	ldr	r3, [pc, #52]	@ (8004380 <__stdout_put_char+0x44>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0f8      	beq.n	800434a <__stdout_put_char+0xe>
    ;
  huart3.Instance->TDR = val;
 8004358:	4b09      	ldr	r3, [pc, #36]	@ (8004380 <__stdout_put_char+0x44>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	7bfa      	ldrb	r2, [r7, #15]
 800435e:	629a      	str	r2, [r3, #40]	@ 0x28
  while ((huart3.Instance->ISR & UART_FLAG_TC) == 0)
 8004360:	bf00      	nop
 8004362:	4b07      	ldr	r3, [pc, #28]	@ (8004380 <__stdout_put_char+0x44>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0f8      	beq.n	8004362 <__stdout_put_char+0x26>
    ;
  return 0;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	20000334 	.word	0x20000334

08004384 <__stdin_get_char>:

int __stdin_get_char(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  if (huart3.Instance->ISR & UART_FLAG_ORE)
 8004388:	4b19      	ldr	r3, [pc, #100]	@ (80043f0 <__stdin_get_char+0x6c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <__stdin_get_char+0x1a>
    huart3.Instance->ICR = UART_CLEAR_OREF;
 8004396:	4b16      	ldr	r3, [pc, #88]	@ (80043f0 <__stdin_get_char+0x6c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2208      	movs	r2, #8
 800439c:	621a      	str	r2, [r3, #32]

  if (huart3.Instance->ISR & UART_FLAG_NE)
 800439e:	4b14      	ldr	r3, [pc, #80]	@ (80043f0 <__stdin_get_char+0x6c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <__stdin_get_char+0x30>
    huart3.Instance->ICR = UART_CLEAR_NEF;
 80043ac:	4b10      	ldr	r3, [pc, #64]	@ (80043f0 <__stdin_get_char+0x6c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2204      	movs	r2, #4
 80043b2:	621a      	str	r2, [r3, #32]

  if (huart3.Instance->ISR & UART_FLAG_FE)
 80043b4:	4b0e      	ldr	r3, [pc, #56]	@ (80043f0 <__stdin_get_char+0x6c>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <__stdin_get_char+0x46>
    huart3.Instance->ICR = UART_CLEAR_FEF;
 80043c2:	4b0b      	ldr	r3, [pc, #44]	@ (80043f0 <__stdin_get_char+0x6c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2202      	movs	r2, #2
 80043c8:	621a      	str	r2, [r3, #32]

  if ((huart3.Instance->ISR & UART_FLAG_RXNE) == 0)
 80043ca:	4b09      	ldr	r3, [pc, #36]	@ (80043f0 <__stdin_get_char+0x6c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	f003 0320 	and.w	r3, r3, #32
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d102      	bne.n	80043de <__stdin_get_char+0x5a>
    return -1;
 80043d8:	f04f 33ff 	mov.w	r3, #4294967295
 80043dc:	e002      	b.n	80043e4 <__stdin_get_char+0x60>
  return huart3.Instance->RDR;
 80043de:	4b04      	ldr	r3, [pc, #16]	@ (80043f0 <__stdin_get_char+0x6c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	20000334 	.word	0x20000334

080043f4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct =
 80043fa:	463b      	mov	r3, r7
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	605a      	str	r2, [r3, #4]
 8004402:	609a      	str	r2, [r3, #8]
 8004404:	60da      	str	r2, [r3, #12]
      {0};

  /* Disables the MPU */
  HAL_MPU_Disable();
 8004406:	f000 fe55 	bl	80050b4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800440a:	2301      	movs	r3, #1
 800440c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800440e:	2300      	movs	r3, #0
 8004410:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8004412:	2300      	movs	r3, #0
 8004414:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8004416:	230d      	movs	r3, #13
 8004418:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800441a:	2300      	movs	r3, #0
 800441c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800441e:	2300      	movs	r3, #0
 8004420:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 8004422:	2306      	movs	r3, #6
 8004424:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8004426:	2300      	movs	r3, #0
 8004428:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800442a:	2300      	movs	r3, #0
 800442c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800442e:	2300      	movs	r3, #0
 8004430:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8004432:	2300      	movs	r3, #0
 8004434:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004436:	463b      	mov	r3, r7
 8004438:	4618      	mov	r0, r3
 800443a:	f000 fe73 	bl	8005124 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800443e:	2301      	movs	r3, #1
 8004440:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x60000000;
 8004442:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8004446:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8004448:	231f      	movs	r3, #31
 800444a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800444c:	2387      	movs	r3, #135	@ 0x87
 800444e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8004450:	2300      	movs	r3, #0
 8004452:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8004454:	2301      	movs	r3, #1
 8004456:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004458:	2301      	movs	r3, #1
 800445a:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800445c:	463b      	mov	r3, r7
 800445e:	4618      	mov	r0, r3
 8004460:	f000 fe60 	bl	8005124 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8004464:	2004      	movs	r0, #4
 8004466:	f000 fe3d 	bl	80050e4 <HAL_MPU_Enable>
}
 800446a:	bf00      	nop
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8004472:	b480      	push	{r7}
 8004474:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004476:	b672      	cpsid	i
}
 8004478:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800447a:	bf00      	nop
 800447c:	e7fd      	b.n	800447a <Error_Handler+0x8>
	...

08004480 <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  portENTER_CRITICAL();
 800448a:	f009 fb59 	bl	800db40 <vPortEnterCritical>

  printf("HAL_ASSERT: %s:::%u\r\n", (char *)file, (unsigned int)line);
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	6879      	ldr	r1, [r7, #4]
 8004492:	4805      	ldr	r0, [pc, #20]	@ (80044a8 <assert_failed+0x28>)
 8004494:	f00b fcec 	bl	800fe70 <iprintf>
  assert(0);
 8004498:	4b04      	ldr	r3, [pc, #16]	@ (80044ac <assert_failed+0x2c>)
 800449a:	4a05      	ldr	r2, [pc, #20]	@ (80044b0 <assert_failed+0x30>)
 800449c:	f44f 711e 	mov.w	r1, #632	@ 0x278
 80044a0:	4804      	ldr	r0, [pc, #16]	@ (80044b4 <assert_failed+0x34>)
 80044a2:	f009 fc3d 	bl	800dd20 <__assert_func>
 80044a6:	bf00      	nop
 80044a8:	08013d28 	.word	0x08013d28
 80044ac:	08013d40 	.word	0x08013d40
 80044b0:	080144dc 	.word	0x080144dc
 80044b4:	08013d44 	.word	0x08013d44

080044b8 <initialise_monitor_handles>:
 * is called. afterwards main would be called.
 */
// ----------------------------------------------------------------------------
void initialise_monitor_handles( void )
// ----------------------------------------------------------------------------
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0

}
 80044bc:	bf00      	nop
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
	...

080044c8 <initialise_stdlib_abstraction>:
 */
// ----------------------------------------------------------------------------
__attribute__((constructor))
void initialise_stdlib_abstraction( void )
// ----------------------------------------------------------------------------
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
    initialise_monitor_handles();
 80044cc:	f7ff fff4 	bl	80044b8 <initialise_monitor_handles>

#if defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_STDOUT)
    stdioSemaphore = xSemaphoreCreateRecursiveMutex();
 80044d0:	2004      	movs	r0, #4
 80044d2:	f006 fc40 	bl	800ad56 <xQueueCreateMutex>
 80044d6:	4603      	mov	r3, r0
 80044d8:	4a15      	ldr	r2, [pc, #84]	@ (8004530 <initialise_stdlib_abstraction+0x68>)
 80044da:	6013      	str	r3, [r2, #0]

    if ( stdioSemaphore == 0 )
 80044dc:	4b14      	ldr	r3, [pc, #80]	@ (8004530 <initialise_stdlib_abstraction+0x68>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d104      	bne.n	80044ee <initialise_stdlib_abstraction+0x26>
    {
        vAssertCalled( __FILE__, __LINE__ );
 80044e4:	f240 110b 	movw	r1, #267	@ 0x10b
 80044e8:	4812      	ldr	r0, [pc, #72]	@ (8004534 <initialise_stdlib_abstraction+0x6c>)
 80044ea:	f7ff ff13 	bl	8004314 <vAssertCalled>
    }
#endif
#if defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_MALLOC)
    mallocSemaphore = xSemaphoreCreateRecursiveMutex();
 80044ee:	2004      	movs	r0, #4
 80044f0:	f006 fc31 	bl	800ad56 <xQueueCreateMutex>
 80044f4:	4603      	mov	r3, r0
 80044f6:	4a10      	ldr	r2, [pc, #64]	@ (8004538 <initialise_stdlib_abstraction+0x70>)
 80044f8:	6013      	str	r3, [r2, #0]

    if ( mallocSemaphore == 0 )
 80044fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004538 <initialise_stdlib_abstraction+0x70>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d104      	bne.n	800450c <initialise_stdlib_abstraction+0x44>
    {
        vAssertCalled( __FILE__, __LINE__ );
 8004502:	f240 1113 	movw	r1, #275	@ 0x113
 8004506:	480b      	ldr	r0, [pc, #44]	@ (8004534 <initialise_stdlib_abstraction+0x6c>)
 8004508:	f7ff ff04 	bl	8004314 <vAssertCalled>
    }
#endif
#if defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_ENV)
    envSemaphore = xSemaphoreCreateRecursiveMutex();
 800450c:	2004      	movs	r0, #4
 800450e:	f006 fc22 	bl	800ad56 <xQueueCreateMutex>
 8004512:	4603      	mov	r3, r0
 8004514:	4a09      	ldr	r2, [pc, #36]	@ (800453c <initialise_stdlib_abstraction+0x74>)
 8004516:	6013      	str	r3, [r2, #0]

    if ( envSemaphore == 0 )
 8004518:	4b08      	ldr	r3, [pc, #32]	@ (800453c <initialise_stdlib_abstraction+0x74>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d104      	bne.n	800452a <initialise_stdlib_abstraction+0x62>
    {
        vAssertCalled( __FILE__, __LINE__ );
 8004520:	f240 111b 	movw	r1, #283	@ 0x11b
 8004524:	4803      	ldr	r0, [pc, #12]	@ (8004534 <initialise_stdlib_abstraction+0x6c>)
 8004526:	f7ff fef5 	bl	8004314 <vAssertCalled>
    }
#endif
}
 800452a:	bf00      	nop
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	200003c4 	.word	0x200003c4
 8004534:	08013e1c 	.word	0x08013e1c
 8004538:	200003c8 	.word	0x200003c8
 800453c:	200003cc 	.word	0x200003cc

08004540 <_getpid>:
 * "machine mode"
 */
// ----------------------------------------------------------------------------
int _getpid( void )
// ----------------------------------------------------------------------------
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
    return 1;
 8004544:	2301      	movs	r3, #1
}
 8004546:	4618      	mov	r0, r3
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <_kill>:
 * process with PID 1
 */
// ----------------------------------------------------------------------------
int _kill( int pid, int sig )
// ----------------------------------------------------------------------------
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
    ( void )pid;
    ( void )sig;

    if ( _impure_ptr != 0 )
 800455a:	4b09      	ldr	r3, [pc, #36]	@ (8004580 <_kill+0x30>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <_kill+0x1a>
    {
        _impure_ptr->_errno = EINVAL;
 8004562:	4b07      	ldr	r3, [pc, #28]	@ (8004580 <_kill+0x30>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2216      	movs	r2, #22
 8004568:	601a      	str	r2, [r3, #0]
    }
    errno = EINVAL;
 800456a:	f00c f80f 	bl	801058c <__errno>
 800456e:	4603      	mov	r3, r0
 8004570:	2216      	movs	r2, #22
 8004572:	601a      	str	r2, [r3, #0]
    return -1;
 8004574:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004578:	4618      	mov	r0, r3
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	200001c0 	.word	0x200001c0

08004584 <_exit>:
 */
// ----------------------------------------------------------------------------
__attribute__( ( noreturn ) )
void _exit ( int status )
// ----------------------------------------------------------------------------
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
    _kill( status, -1 );
 800458c:	f04f 31ff 	mov.w	r1, #4294967295
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7ff ffdd 	bl	8004550 <_kill>
    while ( 1 ) {}
 8004596:	bf00      	nop
 8004598:	e7fd      	b.n	8004596 <_exit+0x12>
	...

0800459c <_read>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _read( int file, char* ptr, int len )
// ----------------------------------------------------------------------------
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b088      	sub	sp, #32
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
    ( void )file;

    int DataIdx;
    int resLen = 0;
 80045a8:	2300      	movs	r3, #0
 80045aa:	61bb      	str	r3, [r7, #24]

    if ( file == STDIN_FILENO )
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d121      	bne.n	80045f6 <_read+0x5a>
    {
        for ( DataIdx = 0; DataIdx < len; )
 80045b2:	2300      	movs	r3, #0
 80045b4:	61fb      	str	r3, [r7, #28]
 80045b6:	e019      	b.n	80045ec <_read+0x50>
        {
            int result = __stdin_get_char();
 80045b8:	f7ff fee4 	bl	8004384 <__stdin_get_char>
 80045bc:	6178      	str	r0, [r7, #20]
            if ( result == EOF )
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c4:	d106      	bne.n	80045d4 <_read+0x38>
            {
                if ( resLen == 0 )
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d124      	bne.n	8004616 <_read+0x7a>
                {
                    resLen = EOF;
 80045cc:	f04f 33ff 	mov.w	r3, #4294967295
 80045d0:	61bb      	str	r3, [r7, #24]
                }
                break;
 80045d2:	e020      	b.n	8004616 <_read+0x7a>
            }

            *ptr++ = ( char )result;
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	1c5a      	adds	r2, r3, #1
 80045d8:	60ba      	str	r2, [r7, #8]
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	b2d2      	uxtb	r2, r2
 80045de:	701a      	strb	r2, [r3, #0]
            resLen++;
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	3301      	adds	r3, #1
 80045e4:	61bb      	str	r3, [r7, #24]
            DataIdx++;
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	3301      	adds	r3, #1
 80045ea:	61fb      	str	r3, [r7, #28]
        for ( DataIdx = 0; DataIdx < len; )
 80045ec:	69fa      	ldr	r2, [r7, #28]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	dbe1      	blt.n	80045b8 <_read+0x1c>
 80045f4:	e010      	b.n	8004618 <_read+0x7c>

        }
    }
    else
    {
        if ( _impure_ptr != 0 )
 80045f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004624 <_read+0x88>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <_read+0x6a>
        {
            _impure_ptr->_errno = EBADF;
 80045fe:	4b09      	ldr	r3, [pc, #36]	@ (8004624 <_read+0x88>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2209      	movs	r2, #9
 8004604:	601a      	str	r2, [r3, #0]
        }
        errno = EBADF;
 8004606:	f00b ffc1 	bl	801058c <__errno>
 800460a:	4603      	mov	r3, r0
 800460c:	2209      	movs	r2, #9
 800460e:	601a      	str	r2, [r3, #0]
        return -1;
 8004610:	f04f 33ff 	mov.w	r3, #4294967295
 8004614:	e001      	b.n	800461a <_read+0x7e>
                break;
 8004616:	bf00      	nop
    }

    return resLen;
 8004618:	69bb      	ldr	r3, [r7, #24]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3720      	adds	r7, #32
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	200001c0 	.word	0x200001c0

08004628 <_write>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _write( int file, char* ptr, int len )
// ----------------------------------------------------------------------------
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
    ( void )file;

    int DataIdx, locked = 0;
 8004634:	2300      	movs	r3, #0
 8004636:	613b      	str	r3, [r7, #16]

    if ( file == STDOUT_FILENO || file == STDERR_FILENO )
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d002      	beq.n	8004644 <_write+0x1c>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2b02      	cmp	r3, #2
 8004642:	d149      	bne.n	80046d8 <_write+0xb0>
    {

#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_STDOUT)
        if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004644:	f008 fba0 	bl	800cd88 <xTaskGetSchedulerState>
 8004648:	4603      	mov	r3, r0
 800464a:	2b02      	cmp	r3, #2
 800464c:	d108      	bne.n	8004660 <_write+0x38>
        {
            xSemaphoreTakeRecursive( stdioSemaphore, -1 );
 800464e:	4b2c      	ldr	r3, [pc, #176]	@ (8004700 <_write+0xd8>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f04f 31ff 	mov.w	r1, #4294967295
 8004656:	4618      	mov	r0, r3
 8004658:	f006 fbd2 	bl	800ae00 <xQueueTakeMutexRecursive>
            locked = 1;
 800465c:	2301      	movs	r3, #1
 800465e:	613b      	str	r3, [r7, #16]
        }
#endif

        if (file == STDERR_FILENO)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d10e      	bne.n	8004684 <_write+0x5c>
        {
        	__stdout_put_char('\033');
 8004666:	201b      	movs	r0, #27
 8004668:	f7ff fe68 	bl	800433c <__stdout_put_char>
        	__stdout_put_char('[');
 800466c:	205b      	movs	r0, #91	@ 0x5b
 800466e:	f7ff fe65 	bl	800433c <__stdout_put_char>
        	__stdout_put_char('3');
 8004672:	2033      	movs	r0, #51	@ 0x33
 8004674:	f7ff fe62 	bl	800433c <__stdout_put_char>
        	__stdout_put_char('1');
 8004678:	2031      	movs	r0, #49	@ 0x31
 800467a:	f7ff fe5f 	bl	800433c <__stdout_put_char>
        	__stdout_put_char('m');
 800467e:	206d      	movs	r0, #109	@ 0x6d
 8004680:	f7ff fe5c 	bl	800433c <__stdout_put_char>
        }
        for ( DataIdx = 0; DataIdx < len; DataIdx++ )
 8004684:	2300      	movs	r3, #0
 8004686:	617b      	str	r3, [r7, #20]
 8004688:	e009      	b.n	800469e <_write+0x76>
        {
            __stdout_put_char( ptr[DataIdx] );
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	4413      	add	r3, r2
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff fe52 	bl	800433c <__stdout_put_char>
        for ( DataIdx = 0; DataIdx < len; DataIdx++ )
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	3301      	adds	r3, #1
 800469c:	617b      	str	r3, [r7, #20]
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	dbf1      	blt.n	800468a <_write+0x62>
        }
        if (file == STDERR_FILENO)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d10b      	bne.n	80046c4 <_write+0x9c>
        {
        	__stdout_put_char('\033');
 80046ac:	201b      	movs	r0, #27
 80046ae:	f7ff fe45 	bl	800433c <__stdout_put_char>
        	__stdout_put_char('[');
 80046b2:	205b      	movs	r0, #91	@ 0x5b
 80046b4:	f7ff fe42 	bl	800433c <__stdout_put_char>
        	__stdout_put_char('0');
 80046b8:	2030      	movs	r0, #48	@ 0x30
 80046ba:	f7ff fe3f 	bl	800433c <__stdout_put_char>
        	__stdout_put_char('m');
 80046be:	206d      	movs	r0, #109	@ 0x6d
 80046c0:	f7ff fe3c 	bl	800433c <__stdout_put_char>
        }

#if defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_STDOUT)
        if ( locked )
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d004      	beq.n	80046d4 <_write+0xac>
        {
            xSemaphoreGiveRecursive( stdioSemaphore );
 80046ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004700 <_write+0xd8>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f006 fb5a 	bl	800ad88 <xQueueGiveMutexRecursive>
        }
#endif

        return len;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	e00e      	b.n	80046f6 <_write+0xce>
    }
    else
    {
        if ( _impure_ptr != 0 )
 80046d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004704 <_write+0xdc>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <_write+0xc0>
        {
            _impure_ptr->_errno = EBADF;
 80046e0:	4b08      	ldr	r3, [pc, #32]	@ (8004704 <_write+0xdc>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2209      	movs	r2, #9
 80046e6:	601a      	str	r2, [r3, #0]
        }
        errno = EBADF;
 80046e8:	f00b ff50 	bl	801058c <__errno>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2209      	movs	r2, #9
 80046f0:	601a      	str	r2, [r3, #0]
        return -1;
 80046f2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3718      	adds	r7, #24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	200003c4 	.word	0x200003c4
 8004704:	200001c0 	.word	0x200001c0

08004708 <_close>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _close( int file )
// ----------------------------------------------------------------------------
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
    ( void )file;

    return -1;
 8004710:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004714:	4618      	mov	r0, r3
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <_fstat>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _fstat( int file, struct stat* st )
// ----------------------------------------------------------------------------
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
    st->st_dev    = file;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	b21a      	sxth	r2, r3
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	801a      	strh	r2, [r3, #0]
    st->st_size   = 0;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2200      	movs	r2, #0
 8004736:	611a      	str	r2, [r3, #16]
    st->st_blocks = 0;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	2200      	movs	r2, #0
 800473c:	64da      	str	r2, [r3, #76]	@ 0x4c

    if ( file >= 1 && file <= 3 )
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	dd08      	ble.n	8004756 <_fstat+0x36>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b03      	cmp	r3, #3
 8004748:	dc05      	bgt.n	8004756 <_fstat+0x36>
    {
        st->st_mode = S_IFCHR;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004750:	605a      	str	r2, [r3, #4]
        return 0;
 8004752:	2300      	movs	r3, #0
 8004754:	e005      	b.n	8004762 <_fstat+0x42>
    }
    else
    {
        st->st_mode = S_IFREG;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800475c:	605a      	str	r2, [r3, #4]
        return -1;
 800475e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8004762:	4618      	mov	r0, r3
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <_isatty>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _isatty( int file )
// ----------------------------------------------------------------------------
{
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
    // is stdin, stdout or stderror
    if ( file >= 0 && file <= 2 )
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	db04      	blt.n	8004786 <_isatty+0x18>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b02      	cmp	r3, #2
 8004780:	dc01      	bgt.n	8004786 <_isatty+0x18>
    {
        return file;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	e000      	b.n	8004788 <_isatty+0x1a>
    }
    return 0;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <_lseek>:

// ----------------------------------------------------------------------------
int _lseek( int file, int ptr, int dir )
// ----------------------------------------------------------------------------
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
    ( void )file;
    ( void )ptr;
    ( void )dir;

    return 0;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
	...

080047b0 <_sbrk_r>:
static UBaseType_t malLock_uxSavedInterruptStatus;

// ----------------------------------------------------------------------------
void* _sbrk_r( struct _reent* pReent, int incr )
// ----------------------------------------------------------------------------
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
    ( void )pReent;
    ( void )incr;
    register char* stack_ptr asm( "sp" );

    // make sure to calculate the correct heap size and bytes remaining at the first call!
    if( TotalHeapSize == 0 )
 80047ba:	4b37      	ldr	r3, [pc, #220]	@ (8004898 <_sbrk_r+0xe8>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d113      	bne.n	80047ea <_sbrk_r+0x3a>
    {
        TotalHeapSize = heapBytesRemaining = stickyHeapBytesRemaining
                                             = ( int )( ( &__HeapLimit ) - ( &__HeapBase ) )
 80047c2:	4a36      	ldr	r2, [pc, #216]	@ (800489c <_sbrk_r+0xec>)
 80047c4:	4b36      	ldr	r3, [pc, #216]	@ (80048a0 <_sbrk_r+0xf0>)
 80047c6:	1ad3      	subs	r3, r2, r3
#ifdef configISR_STACK_SIZE_WORDS
                                               - ( configISR_STACK_SIZE_WORDS * 4 )
 80047c8:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80047cc:	461a      	mov	r2, r3
                                             = ( int )( ( &__HeapLimit ) - ( &__HeapBase ) )
 80047ce:	4b35      	ldr	r3, [pc, #212]	@ (80048a4 <_sbrk_r+0xf4>)
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	4a32      	ldr	r2, [pc, #200]	@ (800489c <_sbrk_r+0xec>)
 80047d4:	4b32      	ldr	r3, [pc, #200]	@ (80048a0 <_sbrk_r+0xf0>)
 80047d6:	1ad3      	subs	r3, r2, r3
                                               - ( configISR_STACK_SIZE_WORDS * 4 )
 80047d8:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
        TotalHeapSize = heapBytesRemaining = stickyHeapBytesRemaining
 80047dc:	4a32      	ldr	r2, [pc, #200]	@ (80048a8 <_sbrk_r+0xf8>)
 80047de:	6013      	str	r3, [r2, #0]
 80047e0:	4b31      	ldr	r3, [pc, #196]	@ (80048a8 <_sbrk_r+0xf8>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	461a      	mov	r2, r3
 80047e6:	4b2c      	ldr	r3, [pc, #176]	@ (8004898 <_sbrk_r+0xe8>)
 80047e8:	601a      	str	r2, [r3, #0]
#endif
                                               ;
    };
    static char* currentHeapEnd = &__HeapBase;
    char* limit = ( xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED ) ?
 80047ea:	f008 facd 	bl	800cd88 <xTaskGetSchedulerState>
 80047ee:	4603      	mov	r3, r0
                  stack_ptr   :  // Before scheduler is started, limit is stack pointer (risky!)
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d101      	bne.n	80047f8 <_sbrk_r+0x48>
 80047f4:	466b      	mov	r3, sp
 80047f6:	e000      	b.n	80047fa <_sbrk_r+0x4a>
 80047f8:	4b2c      	ldr	r3, [pc, #176]	@ (80048ac <_sbrk_r+0xfc>)
    char* limit = ( xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED ) ?
 80047fa:	61fb      	str	r3, [r7, #28]
    __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80047fc:	f3ef 8305 	mrs	r3, IPSR
 8004800:	613b      	str	r3, [r7, #16]
    if( ulCurrentInterrupt == 0 )
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d102      	bne.n	800480e <_sbrk_r+0x5e>
        xReturn = pdFALSE;
 8004808:	2300      	movs	r3, #0
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	e001      	b.n	8004812 <_sbrk_r+0x62>
        xReturn = pdTRUE;
 800480e:	2301      	movs	r3, #1
 8004810:	60fb      	str	r3, [r7, #12]
    return xReturn;
 8004812:	68fb      	ldr	r3, [r7, #12]
                  &__HeapLimit
#ifdef configISR_STACK_SIZE_WORDS
                  - ( configISR_STACK_SIZE_WORDS * 4 )
#endif
                  ; // Once running, OK to reuse all remaining RAM except ISR stack (MSP) stack
    DRN_ENTER_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
 8004814:	61bb      	str	r3, [r7, #24]
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d010      	beq.n	800483e <_sbrk_r+0x8e>
    __asm volatile
 800481c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004820:	b672      	cpsid	i
 8004822:	f383 8811 	msr	BASEPRI, r3
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	b662      	cpsie	i
 8004830:	60bb      	str	r3, [r7, #8]
}
 8004832:	bf00      	nop
 8004834:	f240 21c1 	movw	r1, #705	@ 0x2c1
 8004838:	481d      	ldr	r0, [pc, #116]	@ (80048b0 <_sbrk_r+0x100>)
 800483a:	f7ff fd6b 	bl	8004314 <vAssertCalled>
    if ( currentHeapEnd + incr > limit )
 800483e:	4b1d      	ldr	r3, [pc, #116]	@ (80048b4 <_sbrk_r+0x104>)
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	4413      	add	r3, r2
 8004846:	69fa      	ldr	r2, [r7, #28]
 8004848:	429a      	cmp	r2, r3
 800484a:	d204      	bcs.n	8004856 <_sbrk_r+0xa6>
        // Ooops, no more memory available...
#if( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            extern void vApplicationMallocFailedHook( void );
            DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
            vApplicationMallocFailedHook();
 800484c:	f7ff fa2a 	bl	8003ca4 <vApplicationMallocFailedHook>
#else
        // Default, if you prefer to believe your application will gracefully trap out-of-memory...
        pReent->_errno = ENOMEM; // newlib's thread-specific errno
        DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
#endif
        return ( char* ) -1; // the malloc-family routine that called sbrk will return 0
 8004850:	f04f 33ff 	mov.w	r3, #4294967295
 8004854:	e01b      	b.n	800488e <_sbrk_r+0xde>
    }

    char* previousHeapEnd = currentHeapEnd;
 8004856:	4b17      	ldr	r3, [pc, #92]	@ (80048b4 <_sbrk_r+0x104>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	617b      	str	r3, [r7, #20]
    currentHeapEnd += incr;
 800485c:	4b15      	ldr	r3, [pc, #84]	@ (80048b4 <_sbrk_r+0x104>)
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	4413      	add	r3, r2
 8004864:	4a13      	ldr	r2, [pc, #76]	@ (80048b4 <_sbrk_r+0x104>)
 8004866:	6013      	str	r3, [r2, #0]
    heapBytesRemaining -= incr;
 8004868:	4b0f      	ldr	r3, [pc, #60]	@ (80048a8 <_sbrk_r+0xf8>)
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	4a0d      	ldr	r2, [pc, #52]	@ (80048a8 <_sbrk_r+0xf8>)
 8004872:	6013      	str	r3, [r2, #0]

    // implement the statistical feature to provide the minimum free heap size feature
    // of FreeRTOS statistics
    if ( stickyHeapBytesRemaining > xPortGetFreeHeapSize() )
 8004874:	f000 f8d0 	bl	8004a18 <xPortGetFreeHeapSize>
 8004878:	4602      	mov	r2, r0
 800487a:	4b0a      	ldr	r3, [pc, #40]	@ (80048a4 <_sbrk_r+0xf4>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	429a      	cmp	r2, r3
 8004880:	d204      	bcs.n	800488c <_sbrk_r+0xdc>
    {
        stickyHeapBytesRemaining = xPortGetFreeHeapSize();
 8004882:	f000 f8c9 	bl	8004a18 <xPortGetFreeHeapSize>
 8004886:	4603      	mov	r3, r0
 8004888:	4a06      	ldr	r2, [pc, #24]	@ (80048a4 <_sbrk_r+0xf4>)
 800488a:	6013      	str	r3, [r2, #0]
    }

    DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
    return ( char* ) previousHeapEnd;
 800488c:	697b      	ldr	r3, [r7, #20]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3720      	adds	r7, #32
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	200003d8 	.word	0x200003d8
 800489c:	20050000 	.word	0x20050000
 80048a0:	200006d8 	.word	0x200006d8
 80048a4:	200003d4 	.word	0x200003d4
 80048a8:	200003d0 	.word	0x200003d0
 80048ac:	2004c000 	.word	0x2004c000
 80048b0:	08013e1c 	.word	0x08013e1c
 80048b4:	20000034 	.word	0x20000034

080048b8 <__malloc_lock>:
}

// ----------------------------------------------------------------------------
__attribute__( ( weak ) ) void __malloc_lock( struct _reent* r )
// ----------------------------------------------------------------------------
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
    ( void )r;

#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_MALLOC)
    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING  )
 80048c0:	f008 fa62 	bl	800cd88 <xTaskGetSchedulerState>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d106      	bne.n	80048d8 <__malloc_lock+0x20>
    {
        xSemaphoreTakeRecursive( mallocSemaphore, -1 );
 80048ca:	4b16      	ldr	r3, [pc, #88]	@ (8004924 <__malloc_lock+0x6c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f04f 31ff 	mov.w	r1, #4294967295
 80048d2:	4618      	mov	r0, r3
 80048d4:	f006 fa94 	bl	800ae00 <xQueueTakeMutexRecursive>
    __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80048d8:	f3ef 8305 	mrs	r3, IPSR
 80048dc:	613b      	str	r3, [r7, #16]
    if( ulCurrentInterrupt == 0 )
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d102      	bne.n	80048ea <__malloc_lock+0x32>
        xReturn = pdFALSE;
 80048e4:	2300      	movs	r3, #0
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	e001      	b.n	80048ee <__malloc_lock+0x36>
        xReturn = pdTRUE;
 80048ea:	2301      	movs	r3, #1
 80048ec:	60fb      	str	r3, [r7, #12]
    return xReturn;
 80048ee:	68fb      	ldr	r3, [r7, #12]
    }
#endif

    DRN_ENTER_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
 80048f0:	617b      	str	r3, [r7, #20]
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d010      	beq.n	800491a <__malloc_lock+0x62>
    __asm volatile
 80048f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048fc:	b672      	cpsid	i
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	b662      	cpsie	i
 800490c:	60bb      	str	r3, [r7, #8]
}
 800490e:	bf00      	nop
 8004910:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8004914:	4804      	ldr	r0, [pc, #16]	@ (8004928 <__malloc_lock+0x70>)
 8004916:	f7ff fcfd 	bl	8004314 <vAssertCalled>
}
 800491a:	bf00      	nop
 800491c:	3718      	adds	r7, #24
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	200003c8 	.word	0x200003c8
 8004928:	08013e1c 	.word	0x08013e1c

0800492c <__malloc_unlock>:

// ----------------------------------------------------------------------------
__attribute__( ( weak ) ) void __malloc_unlock( struct _reent* r )
// ----------------------------------------------------------------------------
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
    ( void )r;

#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_MALLOC)
    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004934:	f008 fa28 	bl	800cd88 <xTaskGetSchedulerState>
 8004938:	4603      	mov	r3, r0
 800493a:	2b02      	cmp	r3, #2
 800493c:	d104      	bne.n	8004948 <__malloc_unlock+0x1c>
    {
        xSemaphoreGiveRecursive( mallocSemaphore );
 800493e:	4b04      	ldr	r3, [pc, #16]	@ (8004950 <__malloc_unlock+0x24>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4618      	mov	r0, r3
 8004944:	f006 fa20 	bl	800ad88 <xQueueGiveMutexRecursive>
    }
#endif

    DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
}
 8004948:	bf00      	nop
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	200003c8 	.word	0x200003c8

08004954 <__env_lock>:

// ----------------------------------------------------------------------------
__attribute__( ( weak ) ) void __env_lock( void )
// ----------------------------------------------------------------------------
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_ENV)
    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800495a:	f008 fa15 	bl	800cd88 <xTaskGetSchedulerState>
 800495e:	4603      	mov	r3, r0
 8004960:	2b02      	cmp	r3, #2
 8004962:	d106      	bne.n	8004972 <__env_lock+0x1e>
    {
        xSemaphoreTakeRecursive( envSemaphore, -1 );
 8004964:	4b15      	ldr	r3, [pc, #84]	@ (80049bc <__env_lock+0x68>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f04f 31ff 	mov.w	r1, #4294967295
 800496c:	4618      	mov	r0, r3
 800496e:	f006 fa47 	bl	800ae00 <xQueueTakeMutexRecursive>
    __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004972:	f3ef 8305 	mrs	r3, IPSR
 8004976:	60bb      	str	r3, [r7, #8]
    if( ulCurrentInterrupt == 0 )
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d102      	bne.n	8004984 <__env_lock+0x30>
        xReturn = pdFALSE;
 800497e:	2300      	movs	r3, #0
 8004980:	607b      	str	r3, [r7, #4]
 8004982:	e001      	b.n	8004988 <__env_lock+0x34>
        xReturn = pdTRUE;
 8004984:	2301      	movs	r3, #1
 8004986:	607b      	str	r3, [r7, #4]
    return xReturn;
 8004988:	687b      	ldr	r3, [r7, #4]
    }
#endif

    DRN_ENTER_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d010      	beq.n	80049b4 <__env_lock+0x60>
    __asm volatile
 8004992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004996:	b672      	cpsid	i
 8004998:	f383 8811 	msr	BASEPRI, r3
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	b662      	cpsie	i
 80049a6:	603b      	str	r3, [r7, #0]
}
 80049a8:	bf00      	nop
 80049aa:	f240 3126 	movw	r1, #806	@ 0x326
 80049ae:	4804      	ldr	r0, [pc, #16]	@ (80049c0 <__env_lock+0x6c>)
 80049b0:	f7ff fcb0 	bl	8004314 <vAssertCalled>
}
 80049b4:	bf00      	nop
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	200003cc 	.word	0x200003cc
 80049c0:	08013e1c 	.word	0x08013e1c

080049c4 <__env_unlock>:

// ----------------------------------------------------------------------------
__attribute__( ( weak ) ) void __env_unlock( void )
// ----------------------------------------------------------------------------
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_ENV)
    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80049c8:	f008 f9de 	bl	800cd88 <xTaskGetSchedulerState>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d104      	bne.n	80049dc <__env_unlock+0x18>
    {
        xSemaphoreGiveRecursive( envSemaphore );
 80049d2:	4b03      	ldr	r3, [pc, #12]	@ (80049e0 <__env_unlock+0x1c>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f006 f9d6 	bl	800ad88 <xQueueGiveMutexRecursive>
    }
#endif

    DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
}
 80049dc:	bf00      	nop
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	200003cc 	.word	0x200003cc

080049e4 <pvPortMalloc>:

// ----------------------------------------------------------------------------
void* pvPortMalloc( size_t xSize )
// ----------------------------------------------------------------------------
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
    void* p = malloc( xSize );
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f009 fa1d 	bl	800de2c <malloc>
 80049f2:	4603      	mov	r3, r0
 80049f4:	60fb      	str	r3, [r7, #12]
    return p;
 80049f6:	68fb      	ldr	r3, [r7, #12]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <vPortFree>:

// ----------------------------------------------------------------------------
void vPortFree( void* pv )
// ----------------------------------------------------------------------------
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
    free( pv );
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f009 fa17 	bl	800de3c <free>
}
 8004a0e:	bf00      	nop
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
	...

08004a18 <xPortGetFreeHeapSize>:

// ----------------------------------------------------------------------------
size_t xPortGetFreeHeapSize( void )
// ----------------------------------------------------------------------------
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08c      	sub	sp, #48	@ 0x30
 8004a1c:	af00      	add	r7, sp, #0
	static int lockGuard = 0;
	if ( lockGuard != 0 ) return stickyHeapBytesRemaining;
 8004a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a54 <xPortGetFreeHeapSize+0x3c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <xPortGetFreeHeapSize+0x14>
 8004a26:	4b0c      	ldr	r3, [pc, #48]	@ (8004a58 <xPortGetFreeHeapSize+0x40>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	e00f      	b.n	8004a4c <xPortGetFreeHeapSize+0x34>
	lockGuard = 1;
 8004a2c:	4b09      	ldr	r3, [pc, #36]	@ (8004a54 <xPortGetFreeHeapSize+0x3c>)
 8004a2e:	2201      	movs	r2, #1
 8004a30:	601a      	str	r2, [r3, #0]
    struct mallinfo mi = mallinfo();
 8004a32:	1d3b      	adds	r3, r7, #4
 8004a34:	4618      	mov	r0, r3
 8004a36:	f009 faab 	bl	800df90 <mallinfo>
    size_t result = mi.fordblks + heapBytesRemaining;
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3c:	4a07      	ldr	r2, [pc, #28]	@ (8004a5c <xPortGetFreeHeapSize+0x44>)
 8004a3e:	6812      	ldr	r2, [r2, #0]
 8004a40:	4413      	add	r3, r2
 8004a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lockGuard = 0;
 8004a44:	4b03      	ldr	r3, [pc, #12]	@ (8004a54 <xPortGetFreeHeapSize+0x3c>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	601a      	str	r2, [r3, #0]
    return result;
 8004a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3730      	adds	r7, #48	@ 0x30
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	200003dc 	.word	0x200003dc
 8004a58:	200003d4 	.word	0x200003d4
 8004a5c:	200003d0 	.word	0x200003d0

08004a60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a66:	4b0f      	ldr	r3, [pc, #60]	@ (8004aa4 <HAL_MspInit+0x44>)
 8004a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6a:	4a0e      	ldr	r2, [pc, #56]	@ (8004aa4 <HAL_MspInit+0x44>)
 8004a6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a70:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a72:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa4 <HAL_MspInit+0x44>)
 8004a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a7a:	607b      	str	r3, [r7, #4]
 8004a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a7e:	4b09      	ldr	r3, [pc, #36]	@ (8004aa4 <HAL_MspInit+0x44>)
 8004a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a82:	4a08      	ldr	r2, [pc, #32]	@ (8004aa4 <HAL_MspInit+0x44>)
 8004a84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a88:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a8a:	4b06      	ldr	r3, [pc, #24]	@ (8004aa4 <HAL_MspInit+0x44>)
 8004a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a92:	603b      	str	r3, [r7, #0]
 8004a94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40023800 	.word	0x40023800

08004aa8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b08a      	sub	sp, #40	@ 0x28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ab0:	f107 0314 	add.w	r3, r7, #20
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	605a      	str	r2, [r3, #4]
 8004aba:	609a      	str	r2, [r3, #8]
 8004abc:	60da      	str	r2, [r3, #12]
 8004abe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8004b34 <HAL_SPI_MspInit+0x8c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d12f      	bne.n	8004b2a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004aca:	4b1b      	ldr	r3, [pc, #108]	@ (8004b38 <HAL_SPI_MspInit+0x90>)
 8004acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ace:	4a1a      	ldr	r2, [pc, #104]	@ (8004b38 <HAL_SPI_MspInit+0x90>)
 8004ad0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004ad4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ad6:	4b18      	ldr	r3, [pc, #96]	@ (8004b38 <HAL_SPI_MspInit+0x90>)
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ada:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ade:	613b      	str	r3, [r7, #16]
 8004ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ae2:	4b15      	ldr	r3, [pc, #84]	@ (8004b38 <HAL_SPI_MspInit+0x90>)
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae6:	4a14      	ldr	r2, [pc, #80]	@ (8004b38 <HAL_SPI_MspInit+0x90>)
 8004ae8:	f043 0301 	orr.w	r3, r3, #1
 8004aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8004aee:	4b12      	ldr	r3, [pc, #72]	@ (8004b38 <HAL_SPI_MspInit+0x90>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = STEP_SPI_SCK_Pin|STEP_SPI_MISO_Pin|STEP_SPI_MOSI_Pin;
 8004afa:	23e0      	movs	r3, #224	@ 0xe0
 8004afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004afe:	2302      	movs	r3, #2
 8004b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b02:	2300      	movs	r3, #0
 8004b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b06:	2303      	movs	r3, #3
 8004b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004b0a:	2305      	movs	r3, #5
 8004b0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b0e:	f107 0314 	add.w	r3, r7, #20
 8004b12:	4619      	mov	r1, r3
 8004b14:	4809      	ldr	r0, [pc, #36]	@ (8004b3c <HAL_SPI_MspInit+0x94>)
 8004b16:	f000 fc7d 	bl	8005414 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	2105      	movs	r1, #5
 8004b1e:	2023      	movs	r0, #35	@ 0x23
 8004b20:	f000 fa78 	bl	8005014 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004b24:	2023      	movs	r0, #35	@ 0x23
 8004b26:	f000 faa1 	bl	800506c <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8004b2a:	bf00      	nop
 8004b2c:	3728      	adds	r7, #40	@ 0x28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	40013000 	.word	0x40013000
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	40020000 	.word	0x40020000

08004b40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b50:	d10b      	bne.n	8004b6a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b52:	4b09      	ldr	r3, [pc, #36]	@ (8004b78 <HAL_TIM_Base_MspInit+0x38>)
 8004b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b56:	4a08      	ldr	r2, [pc, #32]	@ (8004b78 <HAL_TIM_Base_MspInit+0x38>)
 8004b58:	f043 0301 	orr.w	r3, r3, #1
 8004b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b5e:	4b06      	ldr	r3, [pc, #24]	@ (8004b78 <HAL_TIM_Base_MspInit+0x38>)
 8004b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8004b6a:	bf00      	nop
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	40023800 	.word	0x40023800

08004b7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b088      	sub	sp, #32
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b84:	f107 030c 	add.w	r3, r7, #12
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	605a      	str	r2, [r3, #4]
 8004b8e:	609a      	str	r2, [r3, #8]
 8004b90:	60da      	str	r2, [r3, #12]
 8004b92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b9c:	d11c      	bne.n	8004bd8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b9e:	4b10      	ldr	r3, [pc, #64]	@ (8004be0 <HAL_TIM_MspPostInit+0x64>)
 8004ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba2:	4a0f      	ldr	r2, [pc, #60]	@ (8004be0 <HAL_TIM_MspPostInit+0x64>)
 8004ba4:	f043 0302 	orr.w	r3, r3, #2
 8004ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004baa:	4b0d      	ldr	r3, [pc, #52]	@ (8004be0 <HAL_TIM_MspPostInit+0x64>)
 8004bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	60bb      	str	r3, [r7, #8]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = SPINDLE_PWM_L_Pin|SPINDLE_PWM_R_Pin;
 8004bb6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004bba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bcc:	f107 030c 	add.w	r3, r7, #12
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4804      	ldr	r0, [pc, #16]	@ (8004be4 <HAL_TIM_MspPostInit+0x68>)
 8004bd4:	f000 fc1e 	bl	8005414 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004bd8:	bf00      	nop
 8004bda:	3720      	adds	r7, #32
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	40023800 	.word	0x40023800
 8004be4:	40020400 	.word	0x40020400

08004be8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b0aa      	sub	sp, #168	@ 0xa8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bf0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	605a      	str	r2, [r3, #4]
 8004bfa:	609a      	str	r2, [r3, #8]
 8004bfc:	60da      	str	r2, [r3, #12]
 8004bfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c00:	f107 0310 	add.w	r3, r7, #16
 8004c04:	2284      	movs	r2, #132	@ 0x84
 8004c06:	2100      	movs	r1, #0
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f00b fb87 	bl	801031c <memset>
  if(huart->Instance==USART3)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a22      	ldr	r2, [pc, #136]	@ (8004c9c <HAL_UART_MspInit+0xb4>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d13c      	bne.n	8004c92 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004c18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c1c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c22:	f107 0310 	add.w	r3, r7, #16
 8004c26:	4618      	mov	r0, r3
 8004c28:	f001 fd8c 	bl	8006744 <HAL_RCCEx_PeriphCLKConfig>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004c32:	f7ff fc1e 	bl	8004472 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004c36:	4b1a      	ldr	r3, [pc, #104]	@ (8004ca0 <HAL_UART_MspInit+0xb8>)
 8004c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3a:	4a19      	ldr	r2, [pc, #100]	@ (8004ca0 <HAL_UART_MspInit+0xb8>)
 8004c3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c42:	4b17      	ldr	r3, [pc, #92]	@ (8004ca0 <HAL_UART_MspInit+0xb8>)
 8004c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c4e:	4b14      	ldr	r3, [pc, #80]	@ (8004ca0 <HAL_UART_MspInit+0xb8>)
 8004c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c52:	4a13      	ldr	r2, [pc, #76]	@ (8004ca0 <HAL_UART_MspInit+0xb8>)
 8004c54:	f043 0308 	orr.w	r3, r3, #8
 8004c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c5a:	4b11      	ldr	r3, [pc, #68]	@ (8004ca0 <HAL_UART_MspInit+0xb8>)
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c5e:	f003 0308 	and.w	r3, r3, #8
 8004c62:	60bb      	str	r3, [r7, #8]
 8004c64:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART_TX_Pin|DEBUG_UART_RX_Pin;
 8004c66:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004c6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c6e:	2302      	movs	r3, #2
 8004c70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c74:	2300      	movs	r3, #0
 8004c76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004c80:	2307      	movs	r3, #7
 8004c82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c86:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	4805      	ldr	r0, [pc, #20]	@ (8004ca4 <HAL_UART_MspInit+0xbc>)
 8004c8e:	f000 fbc1 	bl	8005414 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8004c92:	bf00      	nop
 8004c94:	37a8      	adds	r7, #168	@ 0xa8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	40004800 	.word	0x40004800
 8004ca0:	40023800 	.word	0x40023800
 8004ca4:	40020c00 	.word	0x40020c00

08004ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004cac:	bf00      	nop
 8004cae:	e7fd      	b.n	8004cac <NMI_Handler+0x4>

08004cb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004cb4:	bf00      	nop
 8004cb6:	e7fd      	b.n	8004cb4 <HardFault_Handler+0x4>

08004cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004cbc:	bf00      	nop
 8004cbe:	e7fd      	b.n	8004cbc <MemManage_Handler+0x4>

08004cc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004cc4:	bf00      	nop
 8004cc6:	e7fd      	b.n	8004cc4 <BusFault_Handler+0x4>

08004cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ccc:	bf00      	nop
 8004cce:	e7fd      	b.n	8004ccc <UsageFault_Handler+0x4>

08004cd0 <DebugMon_Handler>:
void DebugMon_Handler(void)
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
#endif
void DebugMon_Handler(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
}
 8004cd4:	bf00      	nop
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
#endif
void SysTick_Handler(void)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	af00      	add	r7, sp, #0
  extern void xPortSysTickHandler( void );
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ce2:	f000 f887 	bl	8004df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  xPortSysTickHandler();
 8004ce6:	f008 ffc7 	bl	800dc78 <xPortSysTickHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8004cea:	bf00      	nop
 8004cec:	bd80      	pop	{r7, pc}
	...

08004cf0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004cf4:	4802      	ldr	r0, [pc, #8]	@ (8004d00 <SPI1_IRQHandler+0x10>)
 8004cf6:	f002 ff15 	bl	8007b24 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004cfa:	bf00      	nop
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000284 	.word	0x20000284

08004d04 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d08:	4b06      	ldr	r3, [pc, #24]	@ (8004d24 <SystemInit+0x20>)
 8004d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d0e:	4a05      	ldr	r2, [pc, #20]	@ (8004d24 <SystemInit+0x20>)
 8004d10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d18:	bf00      	nop
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	e000ed00 	.word	0xe000ed00

08004d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004d28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004d60 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004d2c:	f7ff ffea 	bl	8004d04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004d30:	480c      	ldr	r0, [pc, #48]	@ (8004d64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004d32:	490d      	ldr	r1, [pc, #52]	@ (8004d68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004d34:	4a0d      	ldr	r2, [pc, #52]	@ (8004d6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d38:	e002      	b.n	8004d40 <LoopCopyDataInit>

08004d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d3e:	3304      	adds	r3, #4

08004d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d44:	d3f9      	bcc.n	8004d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d46:	4a0a      	ldr	r2, [pc, #40]	@ (8004d70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004d48:	4c0a      	ldr	r4, [pc, #40]	@ (8004d74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d4c:	e001      	b.n	8004d52 <LoopFillZerobss>

08004d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d50:	3204      	adds	r2, #4

08004d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d54:	d3fb      	bcc.n	8004d4e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004d56:	f00b fc1f 	bl	8010598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d5a:	f7ff f833 	bl	8003dc4 <main>
  bx  lr    
 8004d5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004d60:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d68:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8004d6c:	080149a0 	.word	0x080149a0
  ldr r2, =_sbss
 8004d70:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8004d74:	200006d4 	.word	0x200006d4

08004d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d78:	e7fe      	b.n	8004d78 <ADC_IRQHandler>

08004d7a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d7e:	2003      	movs	r0, #3
 8004d80:	f000 f928 	bl	8004fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d84:	200f      	movs	r0, #15
 8004d86:	f000 f805 	bl	8004d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d8a:	f7ff fe69 	bl	8004a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d9c:	4b12      	ldr	r3, [pc, #72]	@ (8004de8 <HAL_InitTick+0x54>)
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	4b12      	ldr	r3, [pc, #72]	@ (8004dec <HAL_InitTick+0x58>)
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	4619      	mov	r1, r3
 8004da6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8004dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 f972 	bl	800509c <HAL_SYSTICK_Config>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e00e      	b.n	8004de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b0f      	cmp	r3, #15
 8004dc6:	d80a      	bhi.n	8004dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004dc8:	2200      	movs	r2, #0
 8004dca:	6879      	ldr	r1, [r7, #4]
 8004dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd0:	f000 f920 	bl	8005014 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004dd4:	4a06      	ldr	r2, [pc, #24]	@ (8004df0 <HAL_InitTick+0x5c>)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	e000      	b.n	8004de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	20000038 	.word	0x20000038
 8004dec:	20000040 	.word	0x20000040
 8004df0:	2000003c 	.word	0x2000003c

08004df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004df8:	4b06      	ldr	r3, [pc, #24]	@ (8004e14 <HAL_IncTick+0x20>)
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	4b06      	ldr	r3, [pc, #24]	@ (8004e18 <HAL_IncTick+0x24>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4413      	add	r3, r2
 8004e04:	4a04      	ldr	r2, [pc, #16]	@ (8004e18 <HAL_IncTick+0x24>)
 8004e06:	6013      	str	r3, [r2, #0]
}
 8004e08:	bf00      	nop
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	20000040 	.word	0x20000040
 8004e18:	200003e0 	.word	0x200003e0

08004e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8004e20:	4b03      	ldr	r3, [pc, #12]	@ (8004e30 <HAL_GetTick+0x14>)
 8004e22:	681b      	ldr	r3, [r3, #0]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	200003e0 	.word	0x200003e0

08004e34 <__NVIC_SetPriorityGrouping>:
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e44:	4b0b      	ldr	r3, [pc, #44]	@ (8004e74 <__NVIC_SetPriorityGrouping+0x40>)
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004e50:	4013      	ands	r3, r2
 8004e52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004e5c:	4b06      	ldr	r3, [pc, #24]	@ (8004e78 <__NVIC_SetPriorityGrouping+0x44>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e62:	4a04      	ldr	r2, [pc, #16]	@ (8004e74 <__NVIC_SetPriorityGrouping+0x40>)
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	60d3      	str	r3, [r2, #12]
}
 8004e68:	bf00      	nop
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	e000ed00 	.word	0xe000ed00
 8004e78:	05fa0000 	.word	0x05fa0000

08004e7c <__NVIC_GetPriorityGrouping>:
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e80:	4b04      	ldr	r3, [pc, #16]	@ (8004e94 <__NVIC_GetPriorityGrouping+0x18>)
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	0a1b      	lsrs	r3, r3, #8
 8004e86:	f003 0307 	and.w	r3, r3, #7
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	e000ed00 	.word	0xe000ed00

08004e98 <__NVIC_EnableIRQ>:
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	db0b      	blt.n	8004ec2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004eaa:	79fb      	ldrb	r3, [r7, #7]
 8004eac:	f003 021f 	and.w	r2, r3, #31
 8004eb0:	4907      	ldr	r1, [pc, #28]	@ (8004ed0 <__NVIC_EnableIRQ+0x38>)
 8004eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eb6:	095b      	lsrs	r3, r3, #5
 8004eb8:	2001      	movs	r0, #1
 8004eba:	fa00 f202 	lsl.w	r2, r0, r2
 8004ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	e000e100 	.word	0xe000e100

08004ed4 <__NVIC_SetPriority>:
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	4603      	mov	r3, r0
 8004edc:	6039      	str	r1, [r7, #0]
 8004ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	db0a      	blt.n	8004efe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	490c      	ldr	r1, [pc, #48]	@ (8004f20 <__NVIC_SetPriority+0x4c>)
 8004eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ef2:	0112      	lsls	r2, r2, #4
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	440b      	add	r3, r1
 8004ef8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004efc:	e00a      	b.n	8004f14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	4908      	ldr	r1, [pc, #32]	@ (8004f24 <__NVIC_SetPriority+0x50>)
 8004f04:	79fb      	ldrb	r3, [r7, #7]
 8004f06:	f003 030f 	and.w	r3, r3, #15
 8004f0a:	3b04      	subs	r3, #4
 8004f0c:	0112      	lsls	r2, r2, #4
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	440b      	add	r3, r1
 8004f12:	761a      	strb	r2, [r3, #24]
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	e000e100 	.word	0xe000e100
 8004f24:	e000ed00 	.word	0xe000ed00

08004f28 <NVIC_EncodePriority>:
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b089      	sub	sp, #36	@ 0x24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f003 0307 	and.w	r3, r3, #7
 8004f3a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	f1c3 0307 	rsb	r3, r3, #7
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	bf28      	it	cs
 8004f46:	2304      	movcs	r3, #4
 8004f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	2b06      	cmp	r3, #6
 8004f50:	d902      	bls.n	8004f58 <NVIC_EncodePriority+0x30>
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	3b03      	subs	r3, #3
 8004f56:	e000      	b.n	8004f5a <NVIC_EncodePriority+0x32>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	fa02 f303 	lsl.w	r3, r2, r3
 8004f66:	43da      	mvns	r2, r3
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	401a      	ands	r2, r3
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f70:	f04f 31ff 	mov.w	r1, #4294967295
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7a:	43d9      	mvns	r1, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f80:	4313      	orrs	r3, r2
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3724      	adds	r7, #36	@ 0x24
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
	...

08004f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fa0:	d301      	bcc.n	8004fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e00f      	b.n	8004fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8004fd0 <SysTick_Config+0x40>)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fae:	210f      	movs	r1, #15
 8004fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb4:	f7ff ff8e 	bl	8004ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fb8:	4b05      	ldr	r3, [pc, #20]	@ (8004fd0 <SysTick_Config+0x40>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fbe:	4b04      	ldr	r3, [pc, #16]	@ (8004fd0 <SysTick_Config+0x40>)
 8004fc0:	2207      	movs	r2, #7
 8004fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	e000e010 	.word	0xe000e010

08004fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b07      	cmp	r3, #7
 8004fe0:	d00f      	beq.n	8005002 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b06      	cmp	r3, #6
 8004fe6:	d00c      	beq.n	8005002 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b05      	cmp	r3, #5
 8004fec:	d009      	beq.n	8005002 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b04      	cmp	r3, #4
 8004ff2:	d006      	beq.n	8005002 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b03      	cmp	r3, #3
 8004ff8:	d003      	beq.n	8005002 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004ffa:	2191      	movs	r1, #145	@ 0x91
 8004ffc:	4804      	ldr	r0, [pc, #16]	@ (8005010 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8004ffe:	f7ff fa3f 	bl	8004480 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7ff ff16 	bl	8004e34 <__NVIC_SetPriorityGrouping>
}
 8005008:	bf00      	nop
 800500a:	3708      	adds	r7, #8
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	08013e38 	.word	0x08013e38

08005014 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	4603      	mov	r3, r0
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
 8005020:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005022:	2300      	movs	r3, #0
 8005024:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b0f      	cmp	r3, #15
 800502a:	d903      	bls.n	8005034 <HAL_NVIC_SetPriority+0x20>
 800502c:	21a9      	movs	r1, #169	@ 0xa9
 800502e:	480e      	ldr	r0, [pc, #56]	@ (8005068 <HAL_NVIC_SetPriority+0x54>)
 8005030:	f7ff fa26 	bl	8004480 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	2b0f      	cmp	r3, #15
 8005038:	d903      	bls.n	8005042 <HAL_NVIC_SetPriority+0x2e>
 800503a:	21aa      	movs	r1, #170	@ 0xaa
 800503c:	480a      	ldr	r0, [pc, #40]	@ (8005068 <HAL_NVIC_SetPriority+0x54>)
 800503e:	f7ff fa1f 	bl	8004480 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005042:	f7ff ff1b 	bl	8004e7c <__NVIC_GetPriorityGrouping>
 8005046:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	68b9      	ldr	r1, [r7, #8]
 800504c:	6978      	ldr	r0, [r7, #20]
 800504e:	f7ff ff6b 	bl	8004f28 <NVIC_EncodePriority>
 8005052:	4602      	mov	r2, r0
 8005054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005058:	4611      	mov	r1, r2
 800505a:	4618      	mov	r0, r3
 800505c:	f7ff ff3a 	bl	8004ed4 <__NVIC_SetPriority>
}
 8005060:	bf00      	nop
 8005062:	3718      	adds	r7, #24
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	08013e38 	.word	0x08013e38

0800506c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	4603      	mov	r3, r0
 8005074:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8005076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800507a:	2b00      	cmp	r3, #0
 800507c:	da03      	bge.n	8005086 <HAL_NVIC_EnableIRQ+0x1a>
 800507e:	21bd      	movs	r1, #189	@ 0xbd
 8005080:	4805      	ldr	r0, [pc, #20]	@ (8005098 <HAL_NVIC_EnableIRQ+0x2c>)
 8005082:	f7ff f9fd 	bl	8004480 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff ff04 	bl	8004e98 <__NVIC_EnableIRQ>
}
 8005090:	bf00      	nop
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	08013e38 	.word	0x08013e38

0800509c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7ff ff73 	bl	8004f90 <SysTick_Config>
 80050aa:	4603      	mov	r3, r0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80050b8:	f3bf 8f5f 	dmb	sy
}
 80050bc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80050be:	4b07      	ldr	r3, [pc, #28]	@ (80050dc <HAL_MPU_Disable+0x28>)
 80050c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c2:	4a06      	ldr	r2, [pc, #24]	@ (80050dc <HAL_MPU_Disable+0x28>)
 80050c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050c8:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80050ca:	4b05      	ldr	r3, [pc, #20]	@ (80050e0 <HAL_MPU_Disable+0x2c>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	605a      	str	r2, [r3, #4]
}
 80050d0:	bf00      	nop
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	e000ed00 	.word	0xe000ed00
 80050e0:	e000ed90 	.word	0xe000ed90

080050e4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80050ec:	4a0b      	ldr	r2, [pc, #44]	@ (800511c <HAL_MPU_Enable+0x38>)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f043 0301 	orr.w	r3, r3, #1
 80050f4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80050f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005120 <HAL_MPU_Enable+0x3c>)
 80050f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fa:	4a09      	ldr	r2, [pc, #36]	@ (8005120 <HAL_MPU_Enable+0x3c>)
 80050fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005100:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005102:	f3bf 8f4f 	dsb	sy
}
 8005106:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005108:	f3bf 8f6f 	isb	sy
}
 800510c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	e000ed90 	.word	0xe000ed90
 8005120:	e000ed00 	.word	0xe000ed00

08005124 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	785b      	ldrb	r3, [r3, #1]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d020      	beq.n	8005176 <HAL_MPU_ConfigRegion+0x52>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	785b      	ldrb	r3, [r3, #1]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d01c      	beq.n	8005176 <HAL_MPU_ConfigRegion+0x52>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	785b      	ldrb	r3, [r3, #1]
 8005140:	2b02      	cmp	r3, #2
 8005142:	d018      	beq.n	8005176 <HAL_MPU_ConfigRegion+0x52>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	785b      	ldrb	r3, [r3, #1]
 8005148:	2b03      	cmp	r3, #3
 800514a:	d014      	beq.n	8005176 <HAL_MPU_ConfigRegion+0x52>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	785b      	ldrb	r3, [r3, #1]
 8005150:	2b04      	cmp	r3, #4
 8005152:	d010      	beq.n	8005176 <HAL_MPU_ConfigRegion+0x52>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	785b      	ldrb	r3, [r3, #1]
 8005158:	2b05      	cmp	r3, #5
 800515a:	d00c      	beq.n	8005176 <HAL_MPU_ConfigRegion+0x52>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	785b      	ldrb	r3, [r3, #1]
 8005160:	2b06      	cmp	r3, #6
 8005162:	d008      	beq.n	8005176 <HAL_MPU_ConfigRegion+0x52>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	785b      	ldrb	r3, [r3, #1]
 8005168:	2b07      	cmp	r3, #7
 800516a:	d004      	beq.n	8005176 <HAL_MPU_ConfigRegion+0x52>
 800516c:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 8005170:	488c      	ldr	r0, [pc, #560]	@ (80053a4 <HAL_MPU_ConfigRegion+0x280>)
 8005172:	f7ff f985 	bl	8004480 <assert_failed>
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d008      	beq.n	8005190 <HAL_MPU_ConfigRegion+0x6c>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d004      	beq.n	8005190 <HAL_MPU_ConfigRegion+0x6c>
 8005186:	f240 114f 	movw	r1, #335	@ 0x14f
 800518a:	4886      	ldr	r0, [pc, #536]	@ (80053a4 <HAL_MPU_ConfigRegion+0x280>)
 800518c:	f7ff f978 	bl	8004480 <assert_failed>
  assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	7b1b      	ldrb	r3, [r3, #12]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d008      	beq.n	80051aa <HAL_MPU_ConfigRegion+0x86>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	7b1b      	ldrb	r3, [r3, #12]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d004      	beq.n	80051aa <HAL_MPU_ConfigRegion+0x86>
 80051a0:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 80051a4:	487f      	ldr	r0, [pc, #508]	@ (80053a4 <HAL_MPU_ConfigRegion+0x280>)
 80051a6:	f7ff f96b 	bl	8004480 <assert_failed>
  assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	7adb      	ldrb	r3, [r3, #11]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d018      	beq.n	80051e4 <HAL_MPU_ConfigRegion+0xc0>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	7adb      	ldrb	r3, [r3, #11]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d014      	beq.n	80051e4 <HAL_MPU_ConfigRegion+0xc0>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	7adb      	ldrb	r3, [r3, #11]
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d010      	beq.n	80051e4 <HAL_MPU_ConfigRegion+0xc0>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	7adb      	ldrb	r3, [r3, #11]
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	d00c      	beq.n	80051e4 <HAL_MPU_ConfigRegion+0xc0>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	7adb      	ldrb	r3, [r3, #11]
 80051ce:	2b05      	cmp	r3, #5
 80051d0:	d008      	beq.n	80051e4 <HAL_MPU_ConfigRegion+0xc0>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	7adb      	ldrb	r3, [r3, #11]
 80051d6:	2b06      	cmp	r3, #6
 80051d8:	d004      	beq.n	80051e4 <HAL_MPU_ConfigRegion+0xc0>
 80051da:	f240 1151 	movw	r1, #337	@ 0x151
 80051de:	4871      	ldr	r0, [pc, #452]	@ (80053a4 <HAL_MPU_ConfigRegion+0x280>)
 80051e0:	f7ff f94e 	bl	8004480 <assert_failed>
  assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	7a9b      	ldrb	r3, [r3, #10]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00c      	beq.n	8005206 <HAL_MPU_ConfigRegion+0xe2>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	7a9b      	ldrb	r3, [r3, #10]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d008      	beq.n	8005206 <HAL_MPU_ConfigRegion+0xe2>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	7a9b      	ldrb	r3, [r3, #10]
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d004      	beq.n	8005206 <HAL_MPU_ConfigRegion+0xe2>
 80051fc:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8005200:	4868      	ldr	r0, [pc, #416]	@ (80053a4 <HAL_MPU_ConfigRegion+0x280>)
 8005202:	f7ff f93d 	bl	8004480 <assert_failed>
  assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	7b5b      	ldrb	r3, [r3, #13]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d008      	beq.n	8005220 <HAL_MPU_ConfigRegion+0xfc>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	7b5b      	ldrb	r3, [r3, #13]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d004      	beq.n	8005220 <HAL_MPU_ConfigRegion+0xfc>
 8005216:	f240 1153 	movw	r1, #339	@ 0x153
 800521a:	4862      	ldr	r0, [pc, #392]	@ (80053a4 <HAL_MPU_ConfigRegion+0x280>)
 800521c:	f7ff f930 	bl	8004480 <assert_failed>
  assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	7b9b      	ldrb	r3, [r3, #14]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d008      	beq.n	800523a <HAL_MPU_ConfigRegion+0x116>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	7b9b      	ldrb	r3, [r3, #14]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d004      	beq.n	800523a <HAL_MPU_ConfigRegion+0x116>
 8005230:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8005234:	485b      	ldr	r0, [pc, #364]	@ (80053a4 <HAL_MPU_ConfigRegion+0x280>)
 8005236:	f7ff f923 	bl	8004480 <assert_failed>
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	7bdb      	ldrb	r3, [r3, #15]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d008      	beq.n	8005254 <HAL_MPU_ConfigRegion+0x130>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	7bdb      	ldrb	r3, [r3, #15]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d004      	beq.n	8005254 <HAL_MPU_ConfigRegion+0x130>
 800524a:	f240 1155 	movw	r1, #341	@ 0x155
 800524e:	4855      	ldr	r0, [pc, #340]	@ (80053a4 <HAL_MPU_ConfigRegion+0x280>)
 8005250:	f7ff f916 	bl	8004480 <assert_failed>
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	7a5b      	ldrb	r3, [r3, #9]
 8005258:	2bff      	cmp	r3, #255	@ 0xff
 800525a:	d104      	bne.n	8005266 <HAL_MPU_ConfigRegion+0x142>
 800525c:	f44f 71ab 	mov.w	r1, #342	@ 0x156
 8005260:	4850      	ldr	r0, [pc, #320]	@ (80053a4 <HAL_MPU_ConfigRegion+0x280>)
 8005262:	f7ff f90d 	bl	8004480 <assert_failed>
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	7a1b      	ldrb	r3, [r3, #8]
 800526a:	2b04      	cmp	r3, #4
 800526c:	d070      	beq.n	8005350 <HAL_MPU_ConfigRegion+0x22c>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	7a1b      	ldrb	r3, [r3, #8]
 8005272:	2b05      	cmp	r3, #5
 8005274:	d06c      	beq.n	8005350 <HAL_MPU_ConfigRegion+0x22c>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	7a1b      	ldrb	r3, [r3, #8]
 800527a:	2b06      	cmp	r3, #6
 800527c:	d068      	beq.n	8005350 <HAL_MPU_ConfigRegion+0x22c>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	7a1b      	ldrb	r3, [r3, #8]
 8005282:	2b07      	cmp	r3, #7
 8005284:	d064      	beq.n	8005350 <HAL_MPU_ConfigRegion+0x22c>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	7a1b      	ldrb	r3, [r3, #8]
 800528a:	2b08      	cmp	r3, #8
 800528c:	d060      	beq.n	8005350 <HAL_MPU_ConfigRegion+0x22c>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	7a1b      	ldrb	r3, [r3, #8]
 8005292:	2b09      	cmp	r3, #9
 8005294:	d05c      	beq.n	8005350 <HAL_MPU_ConfigRegion+0x22c>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	7a1b      	ldrb	r3, [r3, #8]
 800529a:	2b0a      	cmp	r3, #10
 800529c:	d058      	beq.n	8005350 <HAL_MPU_ConfigRegion+0x22c>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	7a1b      	ldrb	r3, [r3, #8]
 80052a2:	2b0b      	cmp	r3, #11
 80052a4:	d054      	beq.n	8005350 <HAL_MPU_ConfigRegion+0x22c>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	7a1b      	ldrb	r3, [r3, #8]
 80052aa:	2b0c      	cmp	r3, #12
 80052ac:	d050      	beq.n	8005350 <HAL_MPU_ConfigRegion+0x22c>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	7a1b      	ldrb	r3, [r3, #8]
 80052b2:	2b0d      	cmp	r3, #13
 80052b4:	d04c      	beq.n	8005350 <HAL_MPU_ConfigRegion+0x22c>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	7a1b      	ldrb	r3, [r3, #8]
 80052ba:	2b0e      	cmp	r3, #14
 80052bc:	d048      	beq.n	8005350 <HAL_MPU_ConfigRegion+0x22c>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	7a1b      	ldrb	r3, [r3, #8]
 80052c2:	2b0f      	cmp	r3, #15
 80052c4:	d044      	beq.n	8005350 <HAL_MPU_ConfigRegion+0x22c>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	7a1b      	ldrb	r3, [r3, #8]
 80052ca:	2b10      	cmp	r3, #16
 80052cc:	d040      	beq.n	8005350 <HAL_MPU_ConfigRegion+0x22c>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	7a1b      	ldrb	r3, [r3, #8]
 80052d2:	2b11      	cmp	r3, #17
 80052d4:	d03c      	beq.n	8005350 <HAL_MPU_ConfigRegion+0x22c>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	7a1b      	ldrb	r3, [r3, #8]
 80052da:	2b12      	cmp	r3, #18
 80052dc:	d038      	beq.n	8005350 <HAL_MPU_ConfigRegion+0x22c>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	7a1b      	ldrb	r3, [r3, #8]
 80052e2:	2b13      	cmp	r3, #19
 80052e4:	d034      	beq.n	8005350 <HAL_MPU_ConfigRegion+0x22c>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	7a1b      	ldrb	r3, [r3, #8]
 80052ea:	2b14      	cmp	r3, #20
 80052ec:	d030      	beq.n	8005350 <HAL_MPU_ConfigRegion+0x22c>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	7a1b      	ldrb	r3, [r3, #8]
 80052f2:	2b15      	cmp	r3, #21
 80052f4:	d02c      	beq.n	8005350 <HAL_MPU_ConfigRegion+0x22c>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	7a1b      	ldrb	r3, [r3, #8]
 80052fa:	2b16      	cmp	r3, #22
 80052fc:	d028      	beq.n	8005350 <HAL_MPU_ConfigRegion+0x22c>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	7a1b      	ldrb	r3, [r3, #8]
 8005302:	2b17      	cmp	r3, #23
 8005304:	d024      	beq.n	8005350 <HAL_MPU_ConfigRegion+0x22c>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	7a1b      	ldrb	r3, [r3, #8]
 800530a:	2b18      	cmp	r3, #24
 800530c:	d020      	beq.n	8005350 <HAL_MPU_ConfigRegion+0x22c>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	7a1b      	ldrb	r3, [r3, #8]
 8005312:	2b19      	cmp	r3, #25
 8005314:	d01c      	beq.n	8005350 <HAL_MPU_ConfigRegion+0x22c>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	7a1b      	ldrb	r3, [r3, #8]
 800531a:	2b1a      	cmp	r3, #26
 800531c:	d018      	beq.n	8005350 <HAL_MPU_ConfigRegion+0x22c>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	7a1b      	ldrb	r3, [r3, #8]
 8005322:	2b1b      	cmp	r3, #27
 8005324:	d014      	beq.n	8005350 <HAL_MPU_ConfigRegion+0x22c>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	7a1b      	ldrb	r3, [r3, #8]
 800532a:	2b1c      	cmp	r3, #28
 800532c:	d010      	beq.n	8005350 <HAL_MPU_ConfigRegion+0x22c>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	7a1b      	ldrb	r3, [r3, #8]
 8005332:	2b1d      	cmp	r3, #29
 8005334:	d00c      	beq.n	8005350 <HAL_MPU_ConfigRegion+0x22c>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	7a1b      	ldrb	r3, [r3, #8]
 800533a:	2b1e      	cmp	r3, #30
 800533c:	d008      	beq.n	8005350 <HAL_MPU_ConfigRegion+0x22c>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	7a1b      	ldrb	r3, [r3, #8]
 8005342:	2b1f      	cmp	r3, #31
 8005344:	d004      	beq.n	8005350 <HAL_MPU_ConfigRegion+0x22c>
 8005346:	f240 1157 	movw	r1, #343	@ 0x157
 800534a:	4816      	ldr	r0, [pc, #88]	@ (80053a4 <HAL_MPU_ConfigRegion+0x280>)
 800534c:	f7ff f898 	bl	8004480 <assert_failed>

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	785a      	ldrb	r2, [r3, #1]
 8005354:	4b14      	ldr	r3, [pc, #80]	@ (80053a8 <HAL_MPU_ConfigRegion+0x284>)
 8005356:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8005358:	4b13      	ldr	r3, [pc, #76]	@ (80053a8 <HAL_MPU_ConfigRegion+0x284>)
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	4a12      	ldr	r2, [pc, #72]	@ (80053a8 <HAL_MPU_ConfigRegion+0x284>)
 800535e:	f023 0301 	bic.w	r3, r3, #1
 8005362:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8005364:	4a10      	ldr	r2, [pc, #64]	@ (80053a8 <HAL_MPU_ConfigRegion+0x284>)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	7b1b      	ldrb	r3, [r3, #12]
 8005370:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	7adb      	ldrb	r3, [r3, #11]
 8005376:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005378:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	7a9b      	ldrb	r3, [r3, #10]
 800537e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005380:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	7b5b      	ldrb	r3, [r3, #13]
 8005386:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005388:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	7b9b      	ldrb	r3, [r3, #14]
 800538e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005390:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	7bdb      	ldrb	r3, [r3, #15]
 8005396:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005398:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	7a5b      	ldrb	r3, [r3, #9]
 800539e:	021b      	lsls	r3, r3, #8
 80053a0:	e004      	b.n	80053ac <HAL_MPU_ConfigRegion+0x288>
 80053a2:	bf00      	nop
 80053a4:	08013e38 	.word	0x08013e38
 80053a8:	e000ed90 	.word	0xe000ed90
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80053ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	7a1b      	ldrb	r3, [r3, #8]
 80053b2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80053b4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	7812      	ldrb	r2, [r2, #0]
 80053ba:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80053bc:	4a03      	ldr	r2, [pc, #12]	@ (80053cc <HAL_MPU_ConfigRegion+0x2a8>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80053be:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80053c0:	6113      	str	r3, [r2, #16]
}
 80053c2:	bf00      	nop
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	e000ed90 	.word	0xe000ed90

080053d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d004      	beq.n	80053ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2280      	movs	r2, #128	@ 0x80
 80053e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e00c      	b.n	8005408 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2205      	movs	r2, #5
 80053f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f022 0201 	bic.w	r2, r2, #1
 8005404:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b088      	sub	sp, #32
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800541e:	2300      	movs	r3, #0
 8005420:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005422:	2300      	movs	r3, #0
 8005424:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005426:	2300      	movs	r3, #0
 8005428:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800542a:	2300      	movs	r3, #0
 800542c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a3a      	ldr	r2, [pc, #232]	@ (800551c <HAL_GPIO_Init+0x108>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d02b      	beq.n	800548e <HAL_GPIO_Init+0x7a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a39      	ldr	r2, [pc, #228]	@ (8005520 <HAL_GPIO_Init+0x10c>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d027      	beq.n	800548e <HAL_GPIO_Init+0x7a>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a38      	ldr	r2, [pc, #224]	@ (8005524 <HAL_GPIO_Init+0x110>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d023      	beq.n	800548e <HAL_GPIO_Init+0x7a>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a37      	ldr	r2, [pc, #220]	@ (8005528 <HAL_GPIO_Init+0x114>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d01f      	beq.n	800548e <HAL_GPIO_Init+0x7a>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a36      	ldr	r2, [pc, #216]	@ (800552c <HAL_GPIO_Init+0x118>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d01b      	beq.n	800548e <HAL_GPIO_Init+0x7a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a35      	ldr	r2, [pc, #212]	@ (8005530 <HAL_GPIO_Init+0x11c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d017      	beq.n	800548e <HAL_GPIO_Init+0x7a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a34      	ldr	r2, [pc, #208]	@ (8005534 <HAL_GPIO_Init+0x120>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d013      	beq.n	800548e <HAL_GPIO_Init+0x7a>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a33      	ldr	r2, [pc, #204]	@ (8005538 <HAL_GPIO_Init+0x124>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00f      	beq.n	800548e <HAL_GPIO_Init+0x7a>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a32      	ldr	r2, [pc, #200]	@ (800553c <HAL_GPIO_Init+0x128>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d00b      	beq.n	800548e <HAL_GPIO_Init+0x7a>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a31      	ldr	r2, [pc, #196]	@ (8005540 <HAL_GPIO_Init+0x12c>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d007      	beq.n	800548e <HAL_GPIO_Init+0x7a>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a30      	ldr	r2, [pc, #192]	@ (8005544 <HAL_GPIO_Init+0x130>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d003      	beq.n	800548e <HAL_GPIO_Init+0x7a>
 8005486:	21aa      	movs	r1, #170	@ 0xaa
 8005488:	482f      	ldr	r0, [pc, #188]	@ (8005548 <HAL_GPIO_Init+0x134>)
 800548a:	f7fe fff9 	bl	8004480 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	b29b      	uxth	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d103      	bne.n	80054a0 <HAL_GPIO_Init+0x8c>
 8005498:	21ab      	movs	r1, #171	@ 0xab
 800549a:	482b      	ldr	r0, [pc, #172]	@ (8005548 <HAL_GPIO_Init+0x134>)
 800549c:	f7fe fff0 	bl	8004480 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d035      	beq.n	8005514 <HAL_GPIO_Init+0x100>
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d031      	beq.n	8005514 <HAL_GPIO_Init+0x100>
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	2b11      	cmp	r3, #17
 80054b6:	d02d      	beq.n	8005514 <HAL_GPIO_Init+0x100>
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d029      	beq.n	8005514 <HAL_GPIO_Init+0x100>
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	2b12      	cmp	r3, #18
 80054c6:	d025      	beq.n	8005514 <HAL_GPIO_Init+0x100>
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 80054d0:	d020      	beq.n	8005514 <HAL_GPIO_Init+0x100>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80054da:	d01b      	beq.n	8005514 <HAL_GPIO_Init+0x100>
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 80054e4:	d016      	beq.n	8005514 <HAL_GPIO_Init+0x100>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 80054ee:	d011      	beq.n	8005514 <HAL_GPIO_Init+0x100>
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 80054f8:	d00c      	beq.n	8005514 <HAL_GPIO_Init+0x100>
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8005502:	d007      	beq.n	8005514 <HAL_GPIO_Init+0x100>
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	2b03      	cmp	r3, #3
 800550a:	d003      	beq.n	8005514 <HAL_GPIO_Init+0x100>
 800550c:	21ac      	movs	r1, #172	@ 0xac
 800550e:	480e      	ldr	r0, [pc, #56]	@ (8005548 <HAL_GPIO_Init+0x134>)
 8005510:	f7fe ffb6 	bl	8004480 <assert_failed>

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005514:	2300      	movs	r3, #0
 8005516:	61fb      	str	r3, [r7, #28]
 8005518:	e2c7      	b.n	8005aaa <HAL_GPIO_Init+0x696>
 800551a:	bf00      	nop
 800551c:	40020000 	.word	0x40020000
 8005520:	40020400 	.word	0x40020400
 8005524:	40020800 	.word	0x40020800
 8005528:	40020c00 	.word	0x40020c00
 800552c:	40021000 	.word	0x40021000
 8005530:	40021400 	.word	0x40021400
 8005534:	40021800 	.word	0x40021800
 8005538:	40021c00 	.word	0x40021c00
 800553c:	40022000 	.word	0x40022000
 8005540:	40022400 	.word	0x40022400
 8005544:	40022800 	.word	0x40022800
 8005548:	08013e74 	.word	0x08013e74
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800554c:	2201      	movs	r2, #1
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	fa02 f303 	lsl.w	r3, r2, r3
 8005554:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	4013      	ands	r3, r2
 800555e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	429a      	cmp	r2, r3
 8005566:	f040 829d 	bne.w	8005aa4 <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f003 0303 	and.w	r3, r3, #3
 8005572:	2b01      	cmp	r3, #1
 8005574:	d005      	beq.n	8005582 <HAL_GPIO_Init+0x16e>
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f003 0303 	and.w	r3, r3, #3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d144      	bne.n	800560c <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00f      	beq.n	80055aa <HAL_GPIO_Init+0x196>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d00b      	beq.n	80055aa <HAL_GPIO_Init+0x196>
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	2b02      	cmp	r3, #2
 8005598:	d007      	beq.n	80055aa <HAL_GPIO_Init+0x196>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	2b03      	cmp	r3, #3
 80055a0:	d003      	beq.n	80055aa <HAL_GPIO_Init+0x196>
 80055a2:	21bd      	movs	r1, #189	@ 0xbd
 80055a4:	4831      	ldr	r0, [pc, #196]	@ (800566c <HAL_GPIO_Init+0x258>)
 80055a6:	f7fe ff6b 	bl	8004480 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	005b      	lsls	r3, r3, #1
 80055b4:	2203      	movs	r2, #3
 80055b6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ba:	43db      	mvns	r3, r3
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	4013      	ands	r3, r2
 80055c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	68da      	ldr	r2, [r3, #12]
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	005b      	lsls	r3, r3, #1
 80055ca:	fa02 f303 	lsl.w	r3, r2, r3
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055e0:	2201      	movs	r2, #1
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	fa02 f303 	lsl.w	r3, r2, r3
 80055e8:	43db      	mvns	r3, r3
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	4013      	ands	r3, r2
 80055ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	091b      	lsrs	r3, r3, #4
 80055f6:	f003 0201 	and.w	r2, r3, #1
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	4313      	orrs	r3, r2
 8005604:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f003 0303 	and.w	r3, r3, #3
 8005614:	2b03      	cmp	r3, #3
 8005616:	d02b      	beq.n	8005670 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00b      	beq.n	8005638 <HAL_GPIO_Init+0x224>
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d007      	beq.n	8005638 <HAL_GPIO_Init+0x224>
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	2b02      	cmp	r3, #2
 800562e:	d003      	beq.n	8005638 <HAL_GPIO_Init+0x224>
 8005630:	21ce      	movs	r1, #206	@ 0xce
 8005632:	480e      	ldr	r0, [pc, #56]	@ (800566c <HAL_GPIO_Init+0x258>)
 8005634:	f7fe ff24 	bl	8004480 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	005b      	lsls	r3, r3, #1
 8005642:	2203      	movs	r2, #3
 8005644:	fa02 f303 	lsl.w	r3, r2, r3
 8005648:	43db      	mvns	r3, r3
 800564a:	69ba      	ldr	r2, [r7, #24]
 800564c:	4013      	ands	r3, r2
 800564e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	fa02 f303 	lsl.w	r3, r2, r3
 800565c:	69ba      	ldr	r2, [r7, #24]
 800565e:	4313      	orrs	r3, r2
 8005660:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	60da      	str	r2, [r3, #12]
 8005668:	e002      	b.n	8005670 <HAL_GPIO_Init+0x25c>
 800566a:	bf00      	nop
 800566c:	08013e74 	.word	0x08013e74
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f003 0303 	and.w	r3, r3, #3
 8005678:	2b02      	cmp	r3, #2
 800567a:	f040 8134 	bne.w	80058e6 <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 810b 	beq.w	800589e <HAL_GPIO_Init+0x48a>
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	2b01      	cmp	r3, #1
 800568e:	f000 8106 	beq.w	800589e <HAL_GPIO_Init+0x48a>
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 8101 	beq.w	800589e <HAL_GPIO_Init+0x48a>
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 80fc 	beq.w	800589e <HAL_GPIO_Init+0x48a>
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f000 80f7 	beq.w	800589e <HAL_GPIO_Init+0x48a>
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	f000 80f2 	beq.w	800589e <HAL_GPIO_Init+0x48a>
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	2b02      	cmp	r3, #2
 80056c0:	f000 80ed 	beq.w	800589e <HAL_GPIO_Init+0x48a>
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	f000 80e8 	beq.w	800589e <HAL_GPIO_Init+0x48a>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	f000 80e3 	beq.w	800589e <HAL_GPIO_Init+0x48a>
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	2b03      	cmp	r3, #3
 80056de:	f000 80de 	beq.w	800589e <HAL_GPIO_Init+0x48a>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	2b03      	cmp	r3, #3
 80056e8:	f000 80d9 	beq.w	800589e <HAL_GPIO_Init+0x48a>
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	2b03      	cmp	r3, #3
 80056f2:	f000 80d4 	beq.w	800589e <HAL_GPIO_Init+0x48a>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	2b03      	cmp	r3, #3
 80056fc:	f000 80cf 	beq.w	800589e <HAL_GPIO_Init+0x48a>
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	2b03      	cmp	r3, #3
 8005706:	f000 80ca 	beq.w	800589e <HAL_GPIO_Init+0x48a>
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	2b03      	cmp	r3, #3
 8005710:	f000 80c5 	beq.w	800589e <HAL_GPIO_Init+0x48a>
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	2b04      	cmp	r3, #4
 800571a:	f000 80c0 	beq.w	800589e <HAL_GPIO_Init+0x48a>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	2b04      	cmp	r3, #4
 8005724:	f000 80bb 	beq.w	800589e <HAL_GPIO_Init+0x48a>
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	2b04      	cmp	r3, #4
 800572e:	f000 80b6 	beq.w	800589e <HAL_GPIO_Init+0x48a>
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	2b04      	cmp	r3, #4
 8005738:	f000 80b1 	beq.w	800589e <HAL_GPIO_Init+0x48a>
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	2b04      	cmp	r3, #4
 8005742:	f000 80ac 	beq.w	800589e <HAL_GPIO_Init+0x48a>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	2b05      	cmp	r3, #5
 800574c:	f000 80a7 	beq.w	800589e <HAL_GPIO_Init+0x48a>
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	2b05      	cmp	r3, #5
 8005756:	f000 80a2 	beq.w	800589e <HAL_GPIO_Init+0x48a>
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	2b05      	cmp	r3, #5
 8005760:	f000 809d 	beq.w	800589e <HAL_GPIO_Init+0x48a>
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	2b05      	cmp	r3, #5
 800576a:	f000 8098 	beq.w	800589e <HAL_GPIO_Init+0x48a>
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	2b05      	cmp	r3, #5
 8005774:	f000 8093 	beq.w	800589e <HAL_GPIO_Init+0x48a>
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	2b05      	cmp	r3, #5
 800577e:	f000 808e 	beq.w	800589e <HAL_GPIO_Init+0x48a>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	2b06      	cmp	r3, #6
 8005788:	f000 8089 	beq.w	800589e <HAL_GPIO_Init+0x48a>
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	2b06      	cmp	r3, #6
 8005792:	f000 8084 	beq.w	800589e <HAL_GPIO_Init+0x48a>
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	2b07      	cmp	r3, #7
 800579c:	d07f      	beq.n	800589e <HAL_GPIO_Init+0x48a>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	2b07      	cmp	r3, #7
 80057a4:	d07b      	beq.n	800589e <HAL_GPIO_Init+0x48a>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	2b07      	cmp	r3, #7
 80057ac:	d077      	beq.n	800589e <HAL_GPIO_Init+0x48a>
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	2b07      	cmp	r3, #7
 80057b4:	d073      	beq.n	800589e <HAL_GPIO_Init+0x48a>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	2b07      	cmp	r3, #7
 80057bc:	d06f      	beq.n	800589e <HAL_GPIO_Init+0x48a>
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	2b07      	cmp	r3, #7
 80057c4:	d06b      	beq.n	800589e <HAL_GPIO_Init+0x48a>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	2b07      	cmp	r3, #7
 80057cc:	d067      	beq.n	800589e <HAL_GPIO_Init+0x48a>
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	2b08      	cmp	r3, #8
 80057d4:	d063      	beq.n	800589e <HAL_GPIO_Init+0x48a>
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	2b08      	cmp	r3, #8
 80057dc:	d05f      	beq.n	800589e <HAL_GPIO_Init+0x48a>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	2b08      	cmp	r3, #8
 80057e4:	d05b      	beq.n	800589e <HAL_GPIO_Init+0x48a>
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	2b08      	cmp	r3, #8
 80057ec:	d057      	beq.n	800589e <HAL_GPIO_Init+0x48a>
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	2b08      	cmp	r3, #8
 80057f4:	d053      	beq.n	800589e <HAL_GPIO_Init+0x48a>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	2b08      	cmp	r3, #8
 80057fc:	d04f      	beq.n	800589e <HAL_GPIO_Init+0x48a>
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	2b08      	cmp	r3, #8
 8005804:	d04b      	beq.n	800589e <HAL_GPIO_Init+0x48a>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	2b09      	cmp	r3, #9
 800580c:	d047      	beq.n	800589e <HAL_GPIO_Init+0x48a>
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	2b09      	cmp	r3, #9
 8005814:	d043      	beq.n	800589e <HAL_GPIO_Init+0x48a>
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	2b09      	cmp	r3, #9
 800581c:	d03f      	beq.n	800589e <HAL_GPIO_Init+0x48a>
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	2b09      	cmp	r3, #9
 8005824:	d03b      	beq.n	800589e <HAL_GPIO_Init+0x48a>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	2b09      	cmp	r3, #9
 800582c:	d037      	beq.n	800589e <HAL_GPIO_Init+0x48a>
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	2b09      	cmp	r3, #9
 8005834:	d033      	beq.n	800589e <HAL_GPIO_Init+0x48a>
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	2b09      	cmp	r3, #9
 800583c:	d02f      	beq.n	800589e <HAL_GPIO_Init+0x48a>
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	2b0a      	cmp	r3, #10
 8005844:	d02b      	beq.n	800589e <HAL_GPIO_Init+0x48a>
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	2b0a      	cmp	r3, #10
 800584c:	d027      	beq.n	800589e <HAL_GPIO_Init+0x48a>
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	2b0a      	cmp	r3, #10
 8005854:	d023      	beq.n	800589e <HAL_GPIO_Init+0x48a>
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	2b0a      	cmp	r3, #10
 800585c:	d01f      	beq.n	800589e <HAL_GPIO_Init+0x48a>
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	2b0b      	cmp	r3, #11
 8005864:	d01b      	beq.n	800589e <HAL_GPIO_Init+0x48a>
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	2b0c      	cmp	r3, #12
 800586c:	d017      	beq.n	800589e <HAL_GPIO_Init+0x48a>
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	2b0c      	cmp	r3, #12
 8005874:	d013      	beq.n	800589e <HAL_GPIO_Init+0x48a>
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	2b0c      	cmp	r3, #12
 800587c:	d00f      	beq.n	800589e <HAL_GPIO_Init+0x48a>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	2b0f      	cmp	r3, #15
 8005884:	d00b      	beq.n	800589e <HAL_GPIO_Init+0x48a>
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	2b0d      	cmp	r3, #13
 800588c:	d007      	beq.n	800589e <HAL_GPIO_Init+0x48a>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	2b0e      	cmp	r3, #14
 8005894:	d003      	beq.n	800589e <HAL_GPIO_Init+0x48a>
 8005896:	21db      	movs	r1, #219	@ 0xdb
 8005898:	4888      	ldr	r0, [pc, #544]	@ (8005abc <HAL_GPIO_Init+0x6a8>)
 800589a:	f7fe fdf1 	bl	8004480 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	08da      	lsrs	r2, r3, #3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	3208      	adds	r2, #8
 80058a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	f003 0307 	and.w	r3, r3, #7
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	220f      	movs	r2, #15
 80058b6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ba:	43db      	mvns	r3, r3
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	4013      	ands	r3, r2
 80058c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	691a      	ldr	r2, [r3, #16]
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	fa02 f303 	lsl.w	r3, r2, r3
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	08da      	lsrs	r2, r3, #3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	3208      	adds	r2, #8
 80058e0:	69b9      	ldr	r1, [r7, #24]
 80058e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	005b      	lsls	r3, r3, #1
 80058f0:	2203      	movs	r2, #3
 80058f2:	fa02 f303 	lsl.w	r3, r2, r3
 80058f6:	43db      	mvns	r3, r3
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	4013      	ands	r3, r2
 80058fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f003 0203 	and.w	r2, r3, #3
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	005b      	lsls	r3, r3, #1
 800590a:	fa02 f303 	lsl.w	r3, r2, r3
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	4313      	orrs	r3, r2
 8005912:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	69ba      	ldr	r2, [r7, #24]
 8005918:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 80be 	beq.w	8005aa4 <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005928:	4b65      	ldr	r3, [pc, #404]	@ (8005ac0 <HAL_GPIO_Init+0x6ac>)
 800592a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800592c:	4a64      	ldr	r2, [pc, #400]	@ (8005ac0 <HAL_GPIO_Init+0x6ac>)
 800592e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005932:	6453      	str	r3, [r2, #68]	@ 0x44
 8005934:	4b62      	ldr	r3, [pc, #392]	@ (8005ac0 <HAL_GPIO_Init+0x6ac>)
 8005936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005938:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800593c:	60fb      	str	r3, [r7, #12]
 800593e:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005940:	4a60      	ldr	r2, [pc, #384]	@ (8005ac4 <HAL_GPIO_Init+0x6b0>)
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	089b      	lsrs	r3, r3, #2
 8005946:	3302      	adds	r3, #2
 8005948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800594c:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	f003 0303 	and.w	r3, r3, #3
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	220f      	movs	r2, #15
 8005958:	fa02 f303 	lsl.w	r3, r2, r3
 800595c:	43db      	mvns	r3, r3
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	4013      	ands	r3, r2
 8005962:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a58      	ldr	r2, [pc, #352]	@ (8005ac8 <HAL_GPIO_Init+0x6b4>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d037      	beq.n	80059dc <HAL_GPIO_Init+0x5c8>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a57      	ldr	r2, [pc, #348]	@ (8005acc <HAL_GPIO_Init+0x6b8>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d031      	beq.n	80059d8 <HAL_GPIO_Init+0x5c4>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a56      	ldr	r2, [pc, #344]	@ (8005ad0 <HAL_GPIO_Init+0x6bc>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d02b      	beq.n	80059d4 <HAL_GPIO_Init+0x5c0>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a55      	ldr	r2, [pc, #340]	@ (8005ad4 <HAL_GPIO_Init+0x6c0>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d025      	beq.n	80059d0 <HAL_GPIO_Init+0x5bc>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a54      	ldr	r2, [pc, #336]	@ (8005ad8 <HAL_GPIO_Init+0x6c4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d01f      	beq.n	80059cc <HAL_GPIO_Init+0x5b8>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a53      	ldr	r2, [pc, #332]	@ (8005adc <HAL_GPIO_Init+0x6c8>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d019      	beq.n	80059c8 <HAL_GPIO_Init+0x5b4>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a52      	ldr	r2, [pc, #328]	@ (8005ae0 <HAL_GPIO_Init+0x6cc>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d013      	beq.n	80059c4 <HAL_GPIO_Init+0x5b0>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a51      	ldr	r2, [pc, #324]	@ (8005ae4 <HAL_GPIO_Init+0x6d0>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00d      	beq.n	80059c0 <HAL_GPIO_Init+0x5ac>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a50      	ldr	r2, [pc, #320]	@ (8005ae8 <HAL_GPIO_Init+0x6d4>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d007      	beq.n	80059bc <HAL_GPIO_Init+0x5a8>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a4f      	ldr	r2, [pc, #316]	@ (8005aec <HAL_GPIO_Init+0x6d8>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d101      	bne.n	80059b8 <HAL_GPIO_Init+0x5a4>
 80059b4:	2309      	movs	r3, #9
 80059b6:	e012      	b.n	80059de <HAL_GPIO_Init+0x5ca>
 80059b8:	230a      	movs	r3, #10
 80059ba:	e010      	b.n	80059de <HAL_GPIO_Init+0x5ca>
 80059bc:	2308      	movs	r3, #8
 80059be:	e00e      	b.n	80059de <HAL_GPIO_Init+0x5ca>
 80059c0:	2307      	movs	r3, #7
 80059c2:	e00c      	b.n	80059de <HAL_GPIO_Init+0x5ca>
 80059c4:	2306      	movs	r3, #6
 80059c6:	e00a      	b.n	80059de <HAL_GPIO_Init+0x5ca>
 80059c8:	2305      	movs	r3, #5
 80059ca:	e008      	b.n	80059de <HAL_GPIO_Init+0x5ca>
 80059cc:	2304      	movs	r3, #4
 80059ce:	e006      	b.n	80059de <HAL_GPIO_Init+0x5ca>
 80059d0:	2303      	movs	r3, #3
 80059d2:	e004      	b.n	80059de <HAL_GPIO_Init+0x5ca>
 80059d4:	2302      	movs	r3, #2
 80059d6:	e002      	b.n	80059de <HAL_GPIO_Init+0x5ca>
 80059d8:	2301      	movs	r3, #1
 80059da:	e000      	b.n	80059de <HAL_GPIO_Init+0x5ca>
 80059dc:	2300      	movs	r3, #0
 80059de:	69fa      	ldr	r2, [r7, #28]
 80059e0:	f002 0203 	and.w	r2, r2, #3
 80059e4:	0092      	lsls	r2, r2, #2
 80059e6:	4093      	lsls	r3, r2
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80059ee:	4935      	ldr	r1, [pc, #212]	@ (8005ac4 <HAL_GPIO_Init+0x6b0>)
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	089b      	lsrs	r3, r3, #2
 80059f4:	3302      	adds	r3, #2
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059fc:	4b3c      	ldr	r3, [pc, #240]	@ (8005af0 <HAL_GPIO_Init+0x6dc>)
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	43db      	mvns	r3, r3
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	4013      	ands	r3, r2
 8005a0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d003      	beq.n	8005a20 <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a20:	4a33      	ldr	r2, [pc, #204]	@ (8005af0 <HAL_GPIO_Init+0x6dc>)
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a26:	4b32      	ldr	r3, [pc, #200]	@ (8005af0 <HAL_GPIO_Init+0x6dc>)
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	43db      	mvns	r3, r3
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	4013      	ands	r3, r2
 8005a34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 8005a42:	69ba      	ldr	r2, [r7, #24]
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a4a:	4a29      	ldr	r2, [pc, #164]	@ (8005af0 <HAL_GPIO_Init+0x6dc>)
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a50:	4b27      	ldr	r3, [pc, #156]	@ (8005af0 <HAL_GPIO_Init+0x6dc>)
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	43db      	mvns	r3, r3
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a74:	4a1e      	ldr	r2, [pc, #120]	@ (8005af0 <HAL_GPIO_Init+0x6dc>)
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8005af0 <HAL_GPIO_Init+0x6dc>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	43db      	mvns	r3, r3
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	4013      	ands	r3, r2
 8005a88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a9e:	4a14      	ldr	r2, [pc, #80]	@ (8005af0 <HAL_GPIO_Init+0x6dc>)
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	61fb      	str	r3, [r7, #28]
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	2b0f      	cmp	r3, #15
 8005aae:	f67f ad4d 	bls.w	800554c <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 8005ab2:	bf00      	nop
 8005ab4:	bf00      	nop
 8005ab6:	3720      	adds	r7, #32
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	08013e74 	.word	0x08013e74
 8005ac0:	40023800 	.word	0x40023800
 8005ac4:	40013800 	.word	0x40013800
 8005ac8:	40020000 	.word	0x40020000
 8005acc:	40020400 	.word	0x40020400
 8005ad0:	40020800 	.word	0x40020800
 8005ad4:	40020c00 	.word	0x40020c00
 8005ad8:	40021000 	.word	0x40021000
 8005adc:	40021400 	.word	0x40021400
 8005ae0:	40021800 	.word	0x40021800
 8005ae4:	40021c00 	.word	0x40021c00
 8005ae8:	40022000 	.word	0x40022000
 8005aec:	40022400 	.word	0x40022400
 8005af0:	40013c00 	.word	0x40013c00

08005af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	460b      	mov	r3, r1
 8005afe:	807b      	strh	r3, [r7, #2]
 8005b00:	4613      	mov	r3, r2
 8005b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005b04:	887b      	ldrh	r3, [r7, #2]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d104      	bne.n	8005b14 <HAL_GPIO_WritePin+0x20>
 8005b0a:	f240 1197 	movw	r1, #407	@ 0x197
 8005b0e:	480e      	ldr	r0, [pc, #56]	@ (8005b48 <HAL_GPIO_WritePin+0x54>)
 8005b10:	f7fe fcb6 	bl	8004480 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8005b14:	787b      	ldrb	r3, [r7, #1]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d007      	beq.n	8005b2a <HAL_GPIO_WritePin+0x36>
 8005b1a:	787b      	ldrb	r3, [r7, #1]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d004      	beq.n	8005b2a <HAL_GPIO_WritePin+0x36>
 8005b20:	f44f 71cc 	mov.w	r1, #408	@ 0x198
 8005b24:	4808      	ldr	r0, [pc, #32]	@ (8005b48 <HAL_GPIO_WritePin+0x54>)
 8005b26:	f7fe fcab 	bl	8004480 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8005b2a:	787b      	ldrb	r3, [r7, #1]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d003      	beq.n	8005b38 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b30:	887a      	ldrh	r2, [r7, #2]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005b36:	e003      	b.n	8005b40 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005b38:	887b      	ldrh	r3, [r7, #2]
 8005b3a:	041a      	lsls	r2, r3, #16
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	619a      	str	r2, [r3, #24]
}
 8005b40:	bf00      	nop
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	08013e74 	.word	0x08013e74

08005b4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005b54:	2300      	movs	r3, #0
 8005b56:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e345      	b.n	80061ee <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b0f      	cmp	r3, #15
 8005b68:	d904      	bls.n	8005b74 <HAL_RCC_OscConfig+0x28>
 8005b6a:	f240 1163 	movw	r1, #355	@ 0x163
 8005b6e:	4892      	ldr	r0, [pc, #584]	@ (8005db8 <HAL_RCC_OscConfig+0x26c>)
 8005b70:	f7fe fc86 	bl	8004480 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 809a 	beq.w	8005cb6 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00e      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x5c>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b92:	d009      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x5c>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b9c:	d004      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x5c>
 8005b9e:	f240 1169 	movw	r1, #361	@ 0x169
 8005ba2:	4885      	ldr	r0, [pc, #532]	@ (8005db8 <HAL_RCC_OscConfig+0x26c>)
 8005ba4:	f7fe fc6c 	bl	8004480 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ba8:	4b84      	ldr	r3, [pc, #528]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f003 030c 	and.w	r3, r3, #12
 8005bb0:	2b04      	cmp	r3, #4
 8005bb2:	d00c      	beq.n	8005bce <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bb4:	4b81      	ldr	r3, [pc, #516]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f003 030c 	and.w	r3, r3, #12
 8005bbc:	2b08      	cmp	r3, #8
 8005bbe:	d112      	bne.n	8005be6 <HAL_RCC_OscConfig+0x9a>
 8005bc0:	4b7e      	ldr	r3, [pc, #504]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bcc:	d10b      	bne.n	8005be6 <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bce:	4b7b      	ldr	r3, [pc, #492]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d06c      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x168>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d168      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e303      	b.n	80061ee <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bee:	d106      	bne.n	8005bfe <HAL_RCC_OscConfig+0xb2>
 8005bf0:	4b72      	ldr	r3, [pc, #456]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a71      	ldr	r2, [pc, #452]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005bf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bfa:	6013      	str	r3, [r2, #0]
 8005bfc:	e02e      	b.n	8005c5c <HAL_RCC_OscConfig+0x110>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10c      	bne.n	8005c20 <HAL_RCC_OscConfig+0xd4>
 8005c06:	4b6d      	ldr	r3, [pc, #436]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a6c      	ldr	r2, [pc, #432]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005c0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c10:	6013      	str	r3, [r2, #0]
 8005c12:	4b6a      	ldr	r3, [pc, #424]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a69      	ldr	r2, [pc, #420]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005c18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	e01d      	b.n	8005c5c <HAL_RCC_OscConfig+0x110>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c28:	d10c      	bne.n	8005c44 <HAL_RCC_OscConfig+0xf8>
 8005c2a:	4b64      	ldr	r3, [pc, #400]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a63      	ldr	r2, [pc, #396]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005c30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c34:	6013      	str	r3, [r2, #0]
 8005c36:	4b61      	ldr	r3, [pc, #388]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a60      	ldr	r2, [pc, #384]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005c3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c40:	6013      	str	r3, [r2, #0]
 8005c42:	e00b      	b.n	8005c5c <HAL_RCC_OscConfig+0x110>
 8005c44:	4b5d      	ldr	r3, [pc, #372]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a5c      	ldr	r2, [pc, #368]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005c4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c4e:	6013      	str	r3, [r2, #0]
 8005c50:	4b5a      	ldr	r3, [pc, #360]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a59      	ldr	r2, [pc, #356]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005c56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d013      	beq.n	8005c8c <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c64:	f7ff f8da 	bl	8004e1c <HAL_GetTick>
 8005c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c6a:	e008      	b.n	8005c7e <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c6c:	f7ff f8d6 	bl	8004e1c <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b64      	cmp	r3, #100	@ 0x64
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e2b7      	b.n	80061ee <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c7e:	4b4f      	ldr	r3, [pc, #316]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d0f0      	beq.n	8005c6c <HAL_RCC_OscConfig+0x120>
 8005c8a:	e014      	b.n	8005cb6 <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c8c:	f7ff f8c6 	bl	8004e1c <HAL_GetTick>
 8005c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c92:	e008      	b.n	8005ca6 <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c94:	f7ff f8c2 	bl	8004e1c <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	2b64      	cmp	r3, #100	@ 0x64
 8005ca0:	d901      	bls.n	8005ca6 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e2a3      	b.n	80061ee <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ca6:	4b45      	ldr	r3, [pc, #276]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1f0      	bne.n	8005c94 <HAL_RCC_OscConfig+0x148>
 8005cb2:	e000      	b.n	8005cb6 <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f000 8084 	beq.w	8005dcc <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d008      	beq.n	8005cde <HAL_RCC_OscConfig+0x192>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d004      	beq.n	8005cde <HAL_RCC_OscConfig+0x192>
 8005cd4:	f240 119b 	movw	r1, #411	@ 0x19b
 8005cd8:	4837      	ldr	r0, [pc, #220]	@ (8005db8 <HAL_RCC_OscConfig+0x26c>)
 8005cda:	f7fe fbd1 	bl	8004480 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	2b1f      	cmp	r3, #31
 8005ce4:	d904      	bls.n	8005cf0 <HAL_RCC_OscConfig+0x1a4>
 8005ce6:	f44f 71ce 	mov.w	r1, #412	@ 0x19c
 8005cea:	4833      	ldr	r0, [pc, #204]	@ (8005db8 <HAL_RCC_OscConfig+0x26c>)
 8005cec:	f7fe fbc8 	bl	8004480 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005cf0:	4b32      	ldr	r3, [pc, #200]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f003 030c 	and.w	r3, r3, #12
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00b      	beq.n	8005d14 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cfc:	4b2f      	ldr	r3, [pc, #188]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f003 030c 	and.w	r3, r3, #12
 8005d04:	2b08      	cmp	r3, #8
 8005d06:	d11c      	bne.n	8005d42 <HAL_RCC_OscConfig+0x1f6>
 8005d08:	4b2c      	ldr	r3, [pc, #176]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d116      	bne.n	8005d42 <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d14:	4b29      	ldr	r3, [pc, #164]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0302 	and.w	r3, r3, #2
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d005      	beq.n	8005d2c <HAL_RCC_OscConfig+0x1e0>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d001      	beq.n	8005d2c <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e260      	b.n	80061ee <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d2c:	4b23      	ldr	r3, [pc, #140]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	00db      	lsls	r3, r3, #3
 8005d3a:	4920      	ldr	r1, [pc, #128]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d40:	e044      	b.n	8005dcc <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d023      	beq.n	8005d92 <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d4a:	4b1c      	ldr	r3, [pc, #112]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a1b      	ldr	r2, [pc, #108]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005d50:	f043 0301 	orr.w	r3, r3, #1
 8005d54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d56:	f7ff f861 	bl	8004e1c <HAL_GetTick>
 8005d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d5c:	e008      	b.n	8005d70 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d5e:	f7ff f85d 	bl	8004e1c <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d901      	bls.n	8005d70 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e23e      	b.n	80061ee <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d70:	4b12      	ldr	r3, [pc, #72]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d0f0      	beq.n	8005d5e <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	00db      	lsls	r3, r3, #3
 8005d8a:	490c      	ldr	r1, [pc, #48]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	600b      	str	r3, [r1, #0]
 8005d90:	e01c      	b.n	8005dcc <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d92:	4b0a      	ldr	r3, [pc, #40]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a09      	ldr	r2, [pc, #36]	@ (8005dbc <HAL_RCC_OscConfig+0x270>)
 8005d98:	f023 0301 	bic.w	r3, r3, #1
 8005d9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d9e:	f7ff f83d 	bl	8004e1c <HAL_GetTick>
 8005da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005da4:	e00c      	b.n	8005dc0 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005da6:	f7ff f839 	bl	8004e1c <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d905      	bls.n	8005dc0 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e21a      	b.n	80061ee <HAL_RCC_OscConfig+0x6a2>
 8005db8:	08013eb0 	.word	0x08013eb0
 8005dbc:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dc0:	4b7e      	ldr	r3, [pc, #504]	@ (8005fbc <HAL_RCC_OscConfig+0x470>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1ec      	bne.n	8005da6 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0308 	and.w	r3, r3, #8
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d043      	beq.n	8005e60 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d008      	beq.n	8005df2 <HAL_RCC_OscConfig+0x2a6>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d004      	beq.n	8005df2 <HAL_RCC_OscConfig+0x2a6>
 8005de8:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 8005dec:	4874      	ldr	r0, [pc, #464]	@ (8005fc0 <HAL_RCC_OscConfig+0x474>)
 8005dee:	f7fe fb47 	bl	8004480 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d019      	beq.n	8005e2e <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dfa:	4b70      	ldr	r3, [pc, #448]	@ (8005fbc <HAL_RCC_OscConfig+0x470>)
 8005dfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dfe:	4a6f      	ldr	r2, [pc, #444]	@ (8005fbc <HAL_RCC_OscConfig+0x470>)
 8005e00:	f043 0301 	orr.w	r3, r3, #1
 8005e04:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e06:	f7ff f809 	bl	8004e1c <HAL_GetTick>
 8005e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e0c:	e008      	b.n	8005e20 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e0e:	f7ff f805 	bl	8004e1c <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d901      	bls.n	8005e20 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e1e6      	b.n	80061ee <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e20:	4b66      	ldr	r3, [pc, #408]	@ (8005fbc <HAL_RCC_OscConfig+0x470>)
 8005e22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d0f0      	beq.n	8005e0e <HAL_RCC_OscConfig+0x2c2>
 8005e2c:	e018      	b.n	8005e60 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e2e:	4b63      	ldr	r3, [pc, #396]	@ (8005fbc <HAL_RCC_OscConfig+0x470>)
 8005e30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e32:	4a62      	ldr	r2, [pc, #392]	@ (8005fbc <HAL_RCC_OscConfig+0x470>)
 8005e34:	f023 0301 	bic.w	r3, r3, #1
 8005e38:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e3a:	f7fe ffef 	bl	8004e1c <HAL_GetTick>
 8005e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e40:	e008      	b.n	8005e54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e42:	f7fe ffeb 	bl	8004e1c <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d901      	bls.n	8005e54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e1cc      	b.n	80061ee <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e54:	4b59      	ldr	r3, [pc, #356]	@ (8005fbc <HAL_RCC_OscConfig+0x470>)
 8005e56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1f0      	bne.n	8005e42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0304 	and.w	r3, r3, #4
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f000 80bc 	beq.w	8005fe6 <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00c      	beq.n	8005e90 <HAL_RCC_OscConfig+0x344>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d008      	beq.n	8005e90 <HAL_RCC_OscConfig+0x344>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	2b05      	cmp	r3, #5
 8005e84:	d004      	beq.n	8005e90 <HAL_RCC_OscConfig+0x344>
 8005e86:	f240 2106 	movw	r1, #518	@ 0x206
 8005e8a:	484d      	ldr	r0, [pc, #308]	@ (8005fc0 <HAL_RCC_OscConfig+0x474>)
 8005e8c:	f7fe faf8 	bl	8004480 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e90:	4b4a      	ldr	r3, [pc, #296]	@ (8005fbc <HAL_RCC_OscConfig+0x470>)
 8005e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10d      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e9c:	4b47      	ldr	r3, [pc, #284]	@ (8005fbc <HAL_RCC_OscConfig+0x470>)
 8005e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea0:	4a46      	ldr	r2, [pc, #280]	@ (8005fbc <HAL_RCC_OscConfig+0x470>)
 8005ea2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ea6:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ea8:	4b44      	ldr	r3, [pc, #272]	@ (8005fbc <HAL_RCC_OscConfig+0x470>)
 8005eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005eb0:	60bb      	str	r3, [r7, #8]
 8005eb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005eb8:	4b42      	ldr	r3, [pc, #264]	@ (8005fc4 <HAL_RCC_OscConfig+0x478>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d118      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005ec4:	4b3f      	ldr	r3, [pc, #252]	@ (8005fc4 <HAL_RCC_OscConfig+0x478>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a3e      	ldr	r2, [pc, #248]	@ (8005fc4 <HAL_RCC_OscConfig+0x478>)
 8005eca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ece:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ed0:	f7fe ffa4 	bl	8004e1c <HAL_GetTick>
 8005ed4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ed6:	e008      	b.n	8005eea <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ed8:	f7fe ffa0 	bl	8004e1c <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b64      	cmp	r3, #100	@ 0x64
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e181      	b.n	80061ee <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005eea:	4b36      	ldr	r3, [pc, #216]	@ (8005fc4 <HAL_RCC_OscConfig+0x478>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d0f0      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d106      	bne.n	8005f0c <HAL_RCC_OscConfig+0x3c0>
 8005efe:	4b2f      	ldr	r3, [pc, #188]	@ (8005fbc <HAL_RCC_OscConfig+0x470>)
 8005f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f02:	4a2e      	ldr	r2, [pc, #184]	@ (8005fbc <HAL_RCC_OscConfig+0x470>)
 8005f04:	f043 0301 	orr.w	r3, r3, #1
 8005f08:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f0a:	e02d      	b.n	8005f68 <HAL_RCC_OscConfig+0x41c>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10c      	bne.n	8005f2e <HAL_RCC_OscConfig+0x3e2>
 8005f14:	4b29      	ldr	r3, [pc, #164]	@ (8005fbc <HAL_RCC_OscConfig+0x470>)
 8005f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f18:	4a28      	ldr	r2, [pc, #160]	@ (8005fbc <HAL_RCC_OscConfig+0x470>)
 8005f1a:	f023 0301 	bic.w	r3, r3, #1
 8005f1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f20:	4b26      	ldr	r3, [pc, #152]	@ (8005fbc <HAL_RCC_OscConfig+0x470>)
 8005f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f24:	4a25      	ldr	r2, [pc, #148]	@ (8005fbc <HAL_RCC_OscConfig+0x470>)
 8005f26:	f023 0304 	bic.w	r3, r3, #4
 8005f2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f2c:	e01c      	b.n	8005f68 <HAL_RCC_OscConfig+0x41c>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	2b05      	cmp	r3, #5
 8005f34:	d10c      	bne.n	8005f50 <HAL_RCC_OscConfig+0x404>
 8005f36:	4b21      	ldr	r3, [pc, #132]	@ (8005fbc <HAL_RCC_OscConfig+0x470>)
 8005f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f3a:	4a20      	ldr	r2, [pc, #128]	@ (8005fbc <HAL_RCC_OscConfig+0x470>)
 8005f3c:	f043 0304 	orr.w	r3, r3, #4
 8005f40:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f42:	4b1e      	ldr	r3, [pc, #120]	@ (8005fbc <HAL_RCC_OscConfig+0x470>)
 8005f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f46:	4a1d      	ldr	r2, [pc, #116]	@ (8005fbc <HAL_RCC_OscConfig+0x470>)
 8005f48:	f043 0301 	orr.w	r3, r3, #1
 8005f4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f4e:	e00b      	b.n	8005f68 <HAL_RCC_OscConfig+0x41c>
 8005f50:	4b1a      	ldr	r3, [pc, #104]	@ (8005fbc <HAL_RCC_OscConfig+0x470>)
 8005f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f54:	4a19      	ldr	r2, [pc, #100]	@ (8005fbc <HAL_RCC_OscConfig+0x470>)
 8005f56:	f023 0301 	bic.w	r3, r3, #1
 8005f5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f5c:	4b17      	ldr	r3, [pc, #92]	@ (8005fbc <HAL_RCC_OscConfig+0x470>)
 8005f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f60:	4a16      	ldr	r2, [pc, #88]	@ (8005fbc <HAL_RCC_OscConfig+0x470>)
 8005f62:	f023 0304 	bic.w	r3, r3, #4
 8005f66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d015      	beq.n	8005f9c <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f70:	f7fe ff54 	bl	8004e1c <HAL_GetTick>
 8005f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f76:	e00a      	b.n	8005f8e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f78:	f7fe ff50 	bl	8004e1c <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d901      	bls.n	8005f8e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e12f      	b.n	80061ee <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8005fbc <HAL_RCC_OscConfig+0x470>)
 8005f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d0ee      	beq.n	8005f78 <HAL_RCC_OscConfig+0x42c>
 8005f9a:	e01b      	b.n	8005fd4 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f9c:	f7fe ff3e 	bl	8004e1c <HAL_GetTick>
 8005fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fa2:	e011      	b.n	8005fc8 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fa4:	f7fe ff3a 	bl	8004e1c <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d908      	bls.n	8005fc8 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e119      	b.n	80061ee <HAL_RCC_OscConfig+0x6a2>
 8005fba:	bf00      	nop
 8005fbc:	40023800 	.word	0x40023800
 8005fc0:	08013eb0 	.word	0x08013eb0
 8005fc4:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fc8:	4b8b      	ldr	r3, [pc, #556]	@ (80061f8 <HAL_RCC_OscConfig+0x6ac>)
 8005fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fcc:	f003 0302 	and.w	r3, r3, #2
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1e7      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005fd4:	7dfb      	ldrb	r3, [r7, #23]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d105      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fda:	4b87      	ldr	r3, [pc, #540]	@ (80061f8 <HAL_RCC_OscConfig+0x6ac>)
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fde:	4a86      	ldr	r2, [pc, #536]	@ (80061f8 <HAL_RCC_OscConfig+0x6ac>)
 8005fe0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fe4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00c      	beq.n	8006008 <HAL_RCC_OscConfig+0x4bc>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d008      	beq.n	8006008 <HAL_RCC_OscConfig+0x4bc>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d004      	beq.n	8006008 <HAL_RCC_OscConfig+0x4bc>
 8005ffe:	f240 214a 	movw	r1, #586	@ 0x24a
 8006002:	487e      	ldr	r0, [pc, #504]	@ (80061fc <HAL_RCC_OscConfig+0x6b0>)
 8006004:	f7fe fa3c 	bl	8004480 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 80ed 	beq.w	80061ec <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006012:	4b79      	ldr	r3, [pc, #484]	@ (80061f8 <HAL_RCC_OscConfig+0x6ac>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f003 030c 	and.w	r3, r3, #12
 800601a:	2b08      	cmp	r3, #8
 800601c:	f000 80b4 	beq.w	8006188 <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	2b02      	cmp	r3, #2
 8006026:	f040 8095 	bne.w	8006154 <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d009      	beq.n	8006046 <HAL_RCC_OscConfig+0x4fa>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800603a:	d004      	beq.n	8006046 <HAL_RCC_OscConfig+0x4fa>
 800603c:	f240 2153 	movw	r1, #595	@ 0x253
 8006040:	486e      	ldr	r0, [pc, #440]	@ (80061fc <HAL_RCC_OscConfig+0x6b0>)
 8006042:	f7fe fa1d 	bl	8004480 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d903      	bls.n	8006056 <HAL_RCC_OscConfig+0x50a>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	2b3f      	cmp	r3, #63	@ 0x3f
 8006054:	d904      	bls.n	8006060 <HAL_RCC_OscConfig+0x514>
 8006056:	f44f 7115 	mov.w	r1, #596	@ 0x254
 800605a:	4868      	ldr	r0, [pc, #416]	@ (80061fc <HAL_RCC_OscConfig+0x6b0>)
 800605c:	f7fe fa10 	bl	8004480 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006064:	2b31      	cmp	r3, #49	@ 0x31
 8006066:	d904      	bls.n	8006072 <HAL_RCC_OscConfig+0x526>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606c:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8006070:	d904      	bls.n	800607c <HAL_RCC_OscConfig+0x530>
 8006072:	f240 2155 	movw	r1, #597	@ 0x255
 8006076:	4861      	ldr	r0, [pc, #388]	@ (80061fc <HAL_RCC_OscConfig+0x6b0>)
 8006078:	f7fe fa02 	bl	8004480 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006080:	2b02      	cmp	r3, #2
 8006082:	d010      	beq.n	80060a6 <HAL_RCC_OscConfig+0x55a>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006088:	2b04      	cmp	r3, #4
 800608a:	d00c      	beq.n	80060a6 <HAL_RCC_OscConfig+0x55a>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006090:	2b06      	cmp	r3, #6
 8006092:	d008      	beq.n	80060a6 <HAL_RCC_OscConfig+0x55a>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006098:	2b08      	cmp	r3, #8
 800609a:	d004      	beq.n	80060a6 <HAL_RCC_OscConfig+0x55a>
 800609c:	f240 2156 	movw	r1, #598	@ 0x256
 80060a0:	4856      	ldr	r0, [pc, #344]	@ (80061fc <HAL_RCC_OscConfig+0x6b0>)
 80060a2:	f7fe f9ed 	bl	8004480 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d903      	bls.n	80060b6 <HAL_RCC_OscConfig+0x56a>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b2:	2b0f      	cmp	r3, #15
 80060b4:	d904      	bls.n	80060c0 <HAL_RCC_OscConfig+0x574>
 80060b6:	f240 2157 	movw	r1, #599	@ 0x257
 80060ba:	4850      	ldr	r0, [pc, #320]	@ (80061fc <HAL_RCC_OscConfig+0x6b0>)
 80060bc:	f7fe f9e0 	bl	8004480 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060c0:	4b4d      	ldr	r3, [pc, #308]	@ (80061f8 <HAL_RCC_OscConfig+0x6ac>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a4c      	ldr	r2, [pc, #304]	@ (80061f8 <HAL_RCC_OscConfig+0x6ac>)
 80060c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060cc:	f7fe fea6 	bl	8004e1c <HAL_GetTick>
 80060d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060d2:	e008      	b.n	80060e6 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060d4:	f7fe fea2 	bl	8004e1c <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d901      	bls.n	80060e6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e083      	b.n	80061ee <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060e6:	4b44      	ldr	r3, [pc, #272]	@ (80061f8 <HAL_RCC_OscConfig+0x6ac>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1f0      	bne.n	80060d4 <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	69da      	ldr	r2, [r3, #28]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	431a      	orrs	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006100:	019b      	lsls	r3, r3, #6
 8006102:	431a      	orrs	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006108:	085b      	lsrs	r3, r3, #1
 800610a:	3b01      	subs	r3, #1
 800610c:	041b      	lsls	r3, r3, #16
 800610e:	431a      	orrs	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006114:	061b      	lsls	r3, r3, #24
 8006116:	4313      	orrs	r3, r2
 8006118:	4a37      	ldr	r2, [pc, #220]	@ (80061f8 <HAL_RCC_OscConfig+0x6ac>)
 800611a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800611e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006120:	4b35      	ldr	r3, [pc, #212]	@ (80061f8 <HAL_RCC_OscConfig+0x6ac>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a34      	ldr	r2, [pc, #208]	@ (80061f8 <HAL_RCC_OscConfig+0x6ac>)
 8006126:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800612a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800612c:	f7fe fe76 	bl	8004e1c <HAL_GetTick>
 8006130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006132:	e008      	b.n	8006146 <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006134:	f7fe fe72 	bl	8004e1c <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b02      	cmp	r3, #2
 8006140:	d901      	bls.n	8006146 <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e053      	b.n	80061ee <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006146:	4b2c      	ldr	r3, [pc, #176]	@ (80061f8 <HAL_RCC_OscConfig+0x6ac>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d0f0      	beq.n	8006134 <HAL_RCC_OscConfig+0x5e8>
 8006152:	e04b      	b.n	80061ec <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006154:	4b28      	ldr	r3, [pc, #160]	@ (80061f8 <HAL_RCC_OscConfig+0x6ac>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a27      	ldr	r2, [pc, #156]	@ (80061f8 <HAL_RCC_OscConfig+0x6ac>)
 800615a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800615e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006160:	f7fe fe5c 	bl	8004e1c <HAL_GetTick>
 8006164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006166:	e008      	b.n	800617a <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006168:	f7fe fe58 	bl	8004e1c <HAL_GetTick>
 800616c:	4602      	mov	r2, r0
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	2b02      	cmp	r3, #2
 8006174:	d901      	bls.n	800617a <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e039      	b.n	80061ee <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800617a:	4b1f      	ldr	r3, [pc, #124]	@ (80061f8 <HAL_RCC_OscConfig+0x6ac>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1f0      	bne.n	8006168 <HAL_RCC_OscConfig+0x61c>
 8006186:	e031      	b.n	80061ec <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006188:	4b1b      	ldr	r3, [pc, #108]	@ (80061f8 <HAL_RCC_OscConfig+0x6ac>)
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d028      	beq.n	80061e8 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d121      	bne.n	80061e8 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d11a      	bne.n	80061e8 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80061b8:	4013      	ands	r3, r2
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80061be:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d111      	bne.n	80061e8 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ce:	085b      	lsrs	r3, r3, #1
 80061d0:	3b01      	subs	r3, #1
 80061d2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d107      	bne.n	80061e8 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d001      	beq.n	80061ec <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e000      	b.n	80061ee <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3718      	adds	r7, #24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	40023800 	.word	0x40023800
 80061fc:	08013eb0 	.word	0x08013eb0

08006200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800620a:	2300      	movs	r3, #0
 800620c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d101      	bne.n	8006218 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e18c      	b.n	8006532 <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <HAL_RCC_ClockConfig+0x28>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b0f      	cmp	r3, #15
 8006226:	d904      	bls.n	8006232 <HAL_RCC_ClockConfig+0x32>
 8006228:	f240 21dd 	movw	r1, #733	@ 0x2dd
 800622c:	4887      	ldr	r0, [pc, #540]	@ (800644c <HAL_RCC_ClockConfig+0x24c>)
 800622e:	f7fe f927 	bl	8004480 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d031      	beq.n	800629c <HAL_RCC_ClockConfig+0x9c>
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d02e      	beq.n	800629c <HAL_RCC_ClockConfig+0x9c>
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b02      	cmp	r3, #2
 8006242:	d02b      	beq.n	800629c <HAL_RCC_ClockConfig+0x9c>
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	2b03      	cmp	r3, #3
 8006248:	d028      	beq.n	800629c <HAL_RCC_ClockConfig+0x9c>
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b04      	cmp	r3, #4
 800624e:	d025      	beq.n	800629c <HAL_RCC_ClockConfig+0x9c>
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	2b05      	cmp	r3, #5
 8006254:	d022      	beq.n	800629c <HAL_RCC_ClockConfig+0x9c>
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	2b06      	cmp	r3, #6
 800625a:	d01f      	beq.n	800629c <HAL_RCC_ClockConfig+0x9c>
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	2b07      	cmp	r3, #7
 8006260:	d01c      	beq.n	800629c <HAL_RCC_ClockConfig+0x9c>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b08      	cmp	r3, #8
 8006266:	d019      	beq.n	800629c <HAL_RCC_ClockConfig+0x9c>
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	2b09      	cmp	r3, #9
 800626c:	d016      	beq.n	800629c <HAL_RCC_ClockConfig+0x9c>
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	2b0a      	cmp	r3, #10
 8006272:	d013      	beq.n	800629c <HAL_RCC_ClockConfig+0x9c>
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b0b      	cmp	r3, #11
 8006278:	d010      	beq.n	800629c <HAL_RCC_ClockConfig+0x9c>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b0c      	cmp	r3, #12
 800627e:	d00d      	beq.n	800629c <HAL_RCC_ClockConfig+0x9c>
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	2b0d      	cmp	r3, #13
 8006284:	d00a      	beq.n	800629c <HAL_RCC_ClockConfig+0x9c>
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b0e      	cmp	r3, #14
 800628a:	d007      	beq.n	800629c <HAL_RCC_ClockConfig+0x9c>
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	2b0f      	cmp	r3, #15
 8006290:	d004      	beq.n	800629c <HAL_RCC_ClockConfig+0x9c>
 8006292:	f240 21de 	movw	r1, #734	@ 0x2de
 8006296:	486d      	ldr	r0, [pc, #436]	@ (800644c <HAL_RCC_ClockConfig+0x24c>)
 8006298:	f7fe f8f2 	bl	8004480 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800629c:	4b6c      	ldr	r3, [pc, #432]	@ (8006450 <HAL_RCC_ClockConfig+0x250>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 030f 	and.w	r3, r3, #15
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d910      	bls.n	80062cc <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062aa:	4b69      	ldr	r3, [pc, #420]	@ (8006450 <HAL_RCC_ClockConfig+0x250>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f023 020f 	bic.w	r2, r3, #15
 80062b2:	4967      	ldr	r1, [pc, #412]	@ (8006450 <HAL_RCC_ClockConfig+0x250>)
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ba:	4b65      	ldr	r3, [pc, #404]	@ (8006450 <HAL_RCC_ClockConfig+0x250>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 030f 	and.w	r3, r3, #15
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d001      	beq.n	80062cc <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e132      	b.n	8006532 <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0302 	and.w	r3, r3, #2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d049      	beq.n	800636c <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0304 	and.w	r3, r3, #4
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d005      	beq.n	80062f0 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062e4:	4b5b      	ldr	r3, [pc, #364]	@ (8006454 <HAL_RCC_ClockConfig+0x254>)
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	4a5a      	ldr	r2, [pc, #360]	@ (8006454 <HAL_RCC_ClockConfig+0x254>)
 80062ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80062ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0308 	and.w	r3, r3, #8
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d005      	beq.n	8006308 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062fc:	4b55      	ldr	r3, [pc, #340]	@ (8006454 <HAL_RCC_ClockConfig+0x254>)
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	4a54      	ldr	r2, [pc, #336]	@ (8006454 <HAL_RCC_ClockConfig+0x254>)
 8006302:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006306:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d024      	beq.n	800635a <HAL_RCC_ClockConfig+0x15a>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	2b80      	cmp	r3, #128	@ 0x80
 8006316:	d020      	beq.n	800635a <HAL_RCC_ClockConfig+0x15a>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	2b90      	cmp	r3, #144	@ 0x90
 800631e:	d01c      	beq.n	800635a <HAL_RCC_ClockConfig+0x15a>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	2ba0      	cmp	r3, #160	@ 0xa0
 8006326:	d018      	beq.n	800635a <HAL_RCC_ClockConfig+0x15a>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	2bb0      	cmp	r3, #176	@ 0xb0
 800632e:	d014      	beq.n	800635a <HAL_RCC_ClockConfig+0x15a>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	2bc0      	cmp	r3, #192	@ 0xc0
 8006336:	d010      	beq.n	800635a <HAL_RCC_ClockConfig+0x15a>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	2bd0      	cmp	r3, #208	@ 0xd0
 800633e:	d00c      	beq.n	800635a <HAL_RCC_ClockConfig+0x15a>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	2be0      	cmp	r3, #224	@ 0xe0
 8006346:	d008      	beq.n	800635a <HAL_RCC_ClockConfig+0x15a>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	2bf0      	cmp	r3, #240	@ 0xf0
 800634e:	d004      	beq.n	800635a <HAL_RCC_ClockConfig+0x15a>
 8006350:	f240 3102 	movw	r1, #770	@ 0x302
 8006354:	483d      	ldr	r0, [pc, #244]	@ (800644c <HAL_RCC_ClockConfig+0x24c>)
 8006356:	f7fe f893 	bl	8004480 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800635a:	4b3e      	ldr	r3, [pc, #248]	@ (8006454 <HAL_RCC_ClockConfig+0x254>)
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	493b      	ldr	r1, [pc, #236]	@ (8006454 <HAL_RCC_ClockConfig+0x254>)
 8006368:	4313      	orrs	r3, r2
 800636a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b00      	cmp	r3, #0
 8006376:	d051      	beq.n	800641c <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00c      	beq.n	800639a <HAL_RCC_ClockConfig+0x19a>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d008      	beq.n	800639a <HAL_RCC_ClockConfig+0x19a>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	2b02      	cmp	r3, #2
 800638e:	d004      	beq.n	800639a <HAL_RCC_ClockConfig+0x19a>
 8006390:	f240 3109 	movw	r1, #777	@ 0x309
 8006394:	482d      	ldr	r0, [pc, #180]	@ (800644c <HAL_RCC_ClockConfig+0x24c>)
 8006396:	f7fe f873 	bl	8004480 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d107      	bne.n	80063b2 <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063a2:	4b2c      	ldr	r3, [pc, #176]	@ (8006454 <HAL_RCC_ClockConfig+0x254>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d115      	bne.n	80063da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e0bf      	b.n	8006532 <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d107      	bne.n	80063ca <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063ba:	4b26      	ldr	r3, [pc, #152]	@ (8006454 <HAL_RCC_ClockConfig+0x254>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d109      	bne.n	80063da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e0b3      	b.n	8006532 <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063ca:	4b22      	ldr	r3, [pc, #136]	@ (8006454 <HAL_RCC_ClockConfig+0x254>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0302 	and.w	r3, r3, #2
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e0ab      	b.n	8006532 <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063da:	4b1e      	ldr	r3, [pc, #120]	@ (8006454 <HAL_RCC_ClockConfig+0x254>)
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f023 0203 	bic.w	r2, r3, #3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	491b      	ldr	r1, [pc, #108]	@ (8006454 <HAL_RCC_ClockConfig+0x254>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063ec:	f7fe fd16 	bl	8004e1c <HAL_GetTick>
 80063f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063f2:	e00a      	b.n	800640a <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063f4:	f7fe fd12 	bl	8004e1c <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006402:	4293      	cmp	r3, r2
 8006404:	d901      	bls.n	800640a <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e093      	b.n	8006532 <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800640a:	4b12      	ldr	r3, [pc, #72]	@ (8006454 <HAL_RCC_ClockConfig+0x254>)
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f003 020c 	and.w	r2, r3, #12
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	429a      	cmp	r2, r3
 800641a:	d1eb      	bne.n	80063f4 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800641c:	4b0c      	ldr	r3, [pc, #48]	@ (8006450 <HAL_RCC_ClockConfig+0x250>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 030f 	and.w	r3, r3, #15
 8006424:	683a      	ldr	r2, [r7, #0]
 8006426:	429a      	cmp	r2, r3
 8006428:	d216      	bcs.n	8006458 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800642a:	4b09      	ldr	r3, [pc, #36]	@ (8006450 <HAL_RCC_ClockConfig+0x250>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f023 020f 	bic.w	r2, r3, #15
 8006432:	4907      	ldr	r1, [pc, #28]	@ (8006450 <HAL_RCC_ClockConfig+0x250>)
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	4313      	orrs	r3, r2
 8006438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800643a:	4b05      	ldr	r3, [pc, #20]	@ (8006450 <HAL_RCC_ClockConfig+0x250>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 030f 	and.w	r3, r3, #15
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	429a      	cmp	r2, r3
 8006446:	d007      	beq.n	8006458 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e072      	b.n	8006532 <HAL_RCC_ClockConfig+0x332>
 800644c:	08013eb0 	.word	0x08013eb0
 8006450:	40023c00 	.word	0x40023c00
 8006454:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0304 	and.w	r3, r3, #4
 8006460:	2b00      	cmp	r3, #0
 8006462:	d025      	beq.n	80064b0 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d018      	beq.n	800649e <HAL_RCC_ClockConfig+0x29e>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006474:	d013      	beq.n	800649e <HAL_RCC_ClockConfig+0x29e>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800647e:	d00e      	beq.n	800649e <HAL_RCC_ClockConfig+0x29e>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8006488:	d009      	beq.n	800649e <HAL_RCC_ClockConfig+0x29e>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8006492:	d004      	beq.n	800649e <HAL_RCC_ClockConfig+0x29e>
 8006494:	f240 3146 	movw	r1, #838	@ 0x346
 8006498:	4828      	ldr	r0, [pc, #160]	@ (800653c <HAL_RCC_ClockConfig+0x33c>)
 800649a:	f7fd fff1 	bl	8004480 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800649e:	4b28      	ldr	r3, [pc, #160]	@ (8006540 <HAL_RCC_ClockConfig+0x340>)
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	4925      	ldr	r1, [pc, #148]	@ (8006540 <HAL_RCC_ClockConfig+0x340>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0308 	and.w	r3, r3, #8
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d026      	beq.n	800650a <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d018      	beq.n	80064f6 <HAL_RCC_ClockConfig+0x2f6>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064cc:	d013      	beq.n	80064f6 <HAL_RCC_ClockConfig+0x2f6>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80064d6:	d00e      	beq.n	80064f6 <HAL_RCC_ClockConfig+0x2f6>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80064e0:	d009      	beq.n	80064f6 <HAL_RCC_ClockConfig+0x2f6>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 80064ea:	d004      	beq.n	80064f6 <HAL_RCC_ClockConfig+0x2f6>
 80064ec:	f240 314d 	movw	r1, #845	@ 0x34d
 80064f0:	4812      	ldr	r0, [pc, #72]	@ (800653c <HAL_RCC_ClockConfig+0x33c>)
 80064f2:	f7fd ffc5 	bl	8004480 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80064f6:	4b12      	ldr	r3, [pc, #72]	@ (8006540 <HAL_RCC_ClockConfig+0x340>)
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	00db      	lsls	r3, r3, #3
 8006504:	490e      	ldr	r1, [pc, #56]	@ (8006540 <HAL_RCC_ClockConfig+0x340>)
 8006506:	4313      	orrs	r3, r2
 8006508:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800650a:	f000 f821 	bl	8006550 <HAL_RCC_GetSysClockFreq>
 800650e:	4602      	mov	r2, r0
 8006510:	4b0b      	ldr	r3, [pc, #44]	@ (8006540 <HAL_RCC_ClockConfig+0x340>)
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	091b      	lsrs	r3, r3, #4
 8006516:	f003 030f 	and.w	r3, r3, #15
 800651a:	490a      	ldr	r1, [pc, #40]	@ (8006544 <HAL_RCC_ClockConfig+0x344>)
 800651c:	5ccb      	ldrb	r3, [r1, r3]
 800651e:	fa22 f303 	lsr.w	r3, r2, r3
 8006522:	4a09      	ldr	r2, [pc, #36]	@ (8006548 <HAL_RCC_ClockConfig+0x348>)
 8006524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006526:	4b09      	ldr	r3, [pc, #36]	@ (800654c <HAL_RCC_ClockConfig+0x34c>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4618      	mov	r0, r3
 800652c:	f7fe fc32 	bl	8004d94 <HAL_InitTick>

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	08013eb0 	.word	0x08013eb0
 8006540:	40023800 	.word	0x40023800
 8006544:	080144ec 	.word	0x080144ec
 8006548:	20000038 	.word	0x20000038
 800654c:	2000003c 	.word	0x2000003c

08006550 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006554:	b090      	sub	sp, #64	@ 0x40
 8006556:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006558:	2300      	movs	r3, #0
 800655a:	637b      	str	r3, [r7, #52]	@ 0x34
 800655c:	2300      	movs	r3, #0
 800655e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006560:	2300      	movs	r3, #0
 8006562:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8006564:	2300      	movs	r3, #0
 8006566:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006568:	4b59      	ldr	r3, [pc, #356]	@ (80066d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f003 030c 	and.w	r3, r3, #12
 8006570:	2b08      	cmp	r3, #8
 8006572:	d00d      	beq.n	8006590 <HAL_RCC_GetSysClockFreq+0x40>
 8006574:	2b08      	cmp	r3, #8
 8006576:	f200 80a1 	bhi.w	80066bc <HAL_RCC_GetSysClockFreq+0x16c>
 800657a:	2b00      	cmp	r3, #0
 800657c:	d002      	beq.n	8006584 <HAL_RCC_GetSysClockFreq+0x34>
 800657e:	2b04      	cmp	r3, #4
 8006580:	d003      	beq.n	800658a <HAL_RCC_GetSysClockFreq+0x3a>
 8006582:	e09b      	b.n	80066bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006584:	4b53      	ldr	r3, [pc, #332]	@ (80066d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006586:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006588:	e09b      	b.n	80066c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800658a:	4b53      	ldr	r3, [pc, #332]	@ (80066d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800658c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800658e:	e098      	b.n	80066c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006590:	4b4f      	ldr	r3, [pc, #316]	@ (80066d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006598:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800659a:	4b4d      	ldr	r3, [pc, #308]	@ (80066d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d028      	beq.n	80065f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065a6:	4b4a      	ldr	r3, [pc, #296]	@ (80066d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	099b      	lsrs	r3, r3, #6
 80065ac:	2200      	movs	r2, #0
 80065ae:	623b      	str	r3, [r7, #32]
 80065b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80065b8:	2100      	movs	r1, #0
 80065ba:	4b47      	ldr	r3, [pc, #284]	@ (80066d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80065bc:	fb03 f201 	mul.w	r2, r3, r1
 80065c0:	2300      	movs	r3, #0
 80065c2:	fb00 f303 	mul.w	r3, r0, r3
 80065c6:	4413      	add	r3, r2
 80065c8:	4a43      	ldr	r2, [pc, #268]	@ (80066d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80065ca:	fba0 1202 	umull	r1, r2, r0, r2
 80065ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065d0:	460a      	mov	r2, r1
 80065d2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80065d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065d6:	4413      	add	r3, r2
 80065d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065dc:	2200      	movs	r2, #0
 80065de:	61bb      	str	r3, [r7, #24]
 80065e0:	61fa      	str	r2, [r7, #28]
 80065e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80065ea:	f7fa fb7d 	bl	8000ce8 <__aeabi_uldivmod>
 80065ee:	4602      	mov	r2, r0
 80065f0:	460b      	mov	r3, r1
 80065f2:	4613      	mov	r3, r2
 80065f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065f6:	e053      	b.n	80066a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065f8:	4b35      	ldr	r3, [pc, #212]	@ (80066d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	099b      	lsrs	r3, r3, #6
 80065fe:	2200      	movs	r2, #0
 8006600:	613b      	str	r3, [r7, #16]
 8006602:	617a      	str	r2, [r7, #20]
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800660a:	f04f 0b00 	mov.w	fp, #0
 800660e:	4652      	mov	r2, sl
 8006610:	465b      	mov	r3, fp
 8006612:	f04f 0000 	mov.w	r0, #0
 8006616:	f04f 0100 	mov.w	r1, #0
 800661a:	0159      	lsls	r1, r3, #5
 800661c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006620:	0150      	lsls	r0, r2, #5
 8006622:	4602      	mov	r2, r0
 8006624:	460b      	mov	r3, r1
 8006626:	ebb2 080a 	subs.w	r8, r2, sl
 800662a:	eb63 090b 	sbc.w	r9, r3, fp
 800662e:	f04f 0200 	mov.w	r2, #0
 8006632:	f04f 0300 	mov.w	r3, #0
 8006636:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800663a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800663e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006642:	ebb2 0408 	subs.w	r4, r2, r8
 8006646:	eb63 0509 	sbc.w	r5, r3, r9
 800664a:	f04f 0200 	mov.w	r2, #0
 800664e:	f04f 0300 	mov.w	r3, #0
 8006652:	00eb      	lsls	r3, r5, #3
 8006654:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006658:	00e2      	lsls	r2, r4, #3
 800665a:	4614      	mov	r4, r2
 800665c:	461d      	mov	r5, r3
 800665e:	eb14 030a 	adds.w	r3, r4, sl
 8006662:	603b      	str	r3, [r7, #0]
 8006664:	eb45 030b 	adc.w	r3, r5, fp
 8006668:	607b      	str	r3, [r7, #4]
 800666a:	f04f 0200 	mov.w	r2, #0
 800666e:	f04f 0300 	mov.w	r3, #0
 8006672:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006676:	4629      	mov	r1, r5
 8006678:	028b      	lsls	r3, r1, #10
 800667a:	4621      	mov	r1, r4
 800667c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006680:	4621      	mov	r1, r4
 8006682:	028a      	lsls	r2, r1, #10
 8006684:	4610      	mov	r0, r2
 8006686:	4619      	mov	r1, r3
 8006688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800668a:	2200      	movs	r2, #0
 800668c:	60bb      	str	r3, [r7, #8]
 800668e:	60fa      	str	r2, [r7, #12]
 8006690:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006694:	f7fa fb28 	bl	8000ce8 <__aeabi_uldivmod>
 8006698:	4602      	mov	r2, r0
 800669a:	460b      	mov	r3, r1
 800669c:	4613      	mov	r3, r2
 800669e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80066a0:	4b0b      	ldr	r3, [pc, #44]	@ (80066d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	0c1b      	lsrs	r3, r3, #16
 80066a6:	f003 0303 	and.w	r3, r3, #3
 80066aa:	3301      	adds	r3, #1
 80066ac:	005b      	lsls	r3, r3, #1
 80066ae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80066b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80066b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80066ba:	e002      	b.n	80066c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80066bc:	4b05      	ldr	r3, [pc, #20]	@ (80066d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80066be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80066c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3740      	adds	r7, #64	@ 0x40
 80066c8:	46bd      	mov	sp, r7
 80066ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066ce:	bf00      	nop
 80066d0:	40023800 	.word	0x40023800
 80066d4:	00f42400 	.word	0x00f42400
 80066d8:	017d7840 	.word	0x017d7840

080066dc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066dc:	b480      	push	{r7}
 80066de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066e0:	4b03      	ldr	r3, [pc, #12]	@ (80066f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80066e2:	681b      	ldr	r3, [r3, #0]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	20000038 	.word	0x20000038

080066f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80066f8:	f7ff fff0 	bl	80066dc <HAL_RCC_GetHCLKFreq>
 80066fc:	4602      	mov	r2, r0
 80066fe:	4b05      	ldr	r3, [pc, #20]	@ (8006714 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	0a9b      	lsrs	r3, r3, #10
 8006704:	f003 0307 	and.w	r3, r3, #7
 8006708:	4903      	ldr	r1, [pc, #12]	@ (8006718 <HAL_RCC_GetPCLK1Freq+0x24>)
 800670a:	5ccb      	ldrb	r3, [r1, r3]
 800670c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006710:	4618      	mov	r0, r3
 8006712:	bd80      	pop	{r7, pc}
 8006714:	40023800 	.word	0x40023800
 8006718:	080144fc 	.word	0x080144fc

0800671c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006720:	f7ff ffdc 	bl	80066dc <HAL_RCC_GetHCLKFreq>
 8006724:	4602      	mov	r2, r0
 8006726:	4b05      	ldr	r3, [pc, #20]	@ (800673c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	0b5b      	lsrs	r3, r3, #13
 800672c:	f003 0307 	and.w	r3, r3, #7
 8006730:	4903      	ldr	r1, [pc, #12]	@ (8006740 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006732:	5ccb      	ldrb	r3, [r1, r3]
 8006734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006738:	4618      	mov	r0, r3
 800673a:	bd80      	pop	{r7, pc}
 800673c:	40023800 	.word	0x40023800
 8006740:	080144fc 	.word	0x080144fc

08006744 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b088      	sub	sp, #32
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800674c:	2300      	movs	r3, #0
 800674e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006750:	2300      	movs	r3, #0
 8006752:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006754:	2300      	movs	r3, #0
 8006756:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006758:	2300      	movs	r3, #0
 800675a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800675c:	2300      	movs	r3, #0
 800675e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0301 	and.w	r3, r3, #1
 8006768:	2b00      	cmp	r3, #0
 800676a:	f040 8089 	bne.w	8006880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0308 	and.w	r3, r3, #8
 8006776:	2b00      	cmp	r3, #0
 8006778:	f040 8082 	bne.w	8006880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0310 	and.w	r3, r3, #16
 8006784:	2b00      	cmp	r3, #0
 8006786:	d17b      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006790:	2b00      	cmp	r3, #0
 8006792:	d175      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800679c:	2b00      	cmp	r3, #0
 800679e:	d16f      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d169      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d163      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d15d      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d157      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d151      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d14b      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d145      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d13f      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d139      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006814:	2b00      	cmp	r3, #0
 8006816:	d133      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d12d      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d127      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d121      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d11b      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d115      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d10f      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d109      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0320 	and.w	r3, r3, #32
 8006874:	2b00      	cmp	r3, #0
 8006876:	d103      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006878:	2172      	movs	r1, #114	@ 0x72
 800687a:	4895      	ldr	r0, [pc, #596]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800687c:	f7fd fe00 	bl	8004480 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	2b00      	cmp	r3, #0
 800688a:	d01f      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006890:	2b00      	cmp	r3, #0
 8006892:	d008      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006898:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800689c:	d003      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x162>
 800689e:	2178      	movs	r1, #120	@ 0x78
 80068a0:	488b      	ldr	r0, [pc, #556]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80068a2:	f7fd fded 	bl	8004480 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80068a6:	4b8b      	ldr	r3, [pc, #556]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	4a8a      	ldr	r2, [pc, #552]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80068ac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80068b0:	6093      	str	r3, [r2, #8]
 80068b2:	4b88      	ldr	r3, [pc, #544]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80068b4:	689a      	ldr	r2, [r3, #8]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068ba:	4986      	ldr	r1, [pc, #536]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80068bc:	4313      	orrs	r3, r2
 80068be:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d101      	bne.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 80068c8:	2301      	movs	r3, #1
 80068ca:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d029      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00d      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068e8:	d008      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068f2:	d003      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80068f4:	2188      	movs	r1, #136	@ 0x88
 80068f6:	4876      	ldr	r0, [pc, #472]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80068f8:	f7fd fdc2 	bl	8004480 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80068fc:	4b75      	ldr	r3, [pc, #468]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80068fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006902:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800690a:	4972      	ldr	r1, [pc, #456]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800690c:	4313      	orrs	r3, r2
 800690e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006916:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800691a:	d101      	bne.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 800691c:	2301      	movs	r3, #1
 800691e:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006924:	2b00      	cmp	r3, #0
 8006926:	d101      	bne.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 8006928:	2301      	movs	r3, #1
 800692a:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d029      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00d      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006944:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006948:	d008      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800694e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006952:	d003      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006954:	219c      	movs	r1, #156	@ 0x9c
 8006956:	485e      	ldr	r0, [pc, #376]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8006958:	f7fd fd92 	bl	8004480 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800695c:	4b5d      	ldr	r3, [pc, #372]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800695e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006962:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800696a:	495a      	ldr	r1, [pc, #360]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800696c:	4313      	orrs	r3, r2
 800696e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006976:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800697a:	d101      	bne.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 800697c:	2301      	movs	r3, #1
 800697e:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006984:	2b00      	cmp	r3, #0
 8006986:	d101      	bne.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 8006988:	2301      	movs	r3, #1
 800698a:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 8006998:	2301      	movs	r3, #1
 800699a:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0320 	and.w	r3, r3, #32
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 8186 	beq.w	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069b2:	f000 80e4 	beq.w	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069be:	f000 80de 	beq.w	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069c6:	4a44      	ldr	r2, [pc, #272]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	f000 80d8 	beq.w	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069d2:	4a42      	ldr	r2, [pc, #264]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	f000 80d2 	beq.w	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069de:	4a40      	ldr	r2, [pc, #256]	@ (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	f000 80cc 	beq.w	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ea:	4a3e      	ldr	r2, [pc, #248]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	f000 80c6 	beq.w	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069f6:	4a3c      	ldr	r2, [pc, #240]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	f000 80c0 	beq.w	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a02:	4a3a      	ldr	r2, [pc, #232]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	f000 80ba 	beq.w	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a0e:	4a38      	ldr	r2, [pc, #224]	@ (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	f000 80b4 	beq.w	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a1a:	4a36      	ldr	r2, [pc, #216]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	f000 80ae 	beq.w	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a26:	4a34      	ldr	r2, [pc, #208]	@ (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	f000 80a8 	beq.w	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a32:	4a32      	ldr	r2, [pc, #200]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	f000 80a2 	beq.w	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a3e:	4a30      	ldr	r2, [pc, #192]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	f000 809c 	beq.w	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a4a:	4a2e      	ldr	r2, [pc, #184]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	f000 8096 	beq.w	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a56:	4a2c      	ldr	r2, [pc, #176]	@ (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	f000 8090 	beq.w	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a62:	4a2a      	ldr	r2, [pc, #168]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	f000 808a 	beq.w	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a6e:	4a28      	ldr	r2, [pc, #160]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	f000 8084 	beq.w	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a7a:	4a26      	ldr	r2, [pc, #152]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d07e      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a84:	4a24      	ldr	r2, [pc, #144]	@ (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d079      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a8e:	4a23      	ldr	r2, [pc, #140]	@ (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d074      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a98:	4a21      	ldr	r2, [pc, #132]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d06f      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa2:	4a20      	ldr	r2, [pc, #128]	@ (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d06a      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aac:	4a1e      	ldr	r2, [pc, #120]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d065      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab6:	4a1d      	ldr	r2, [pc, #116]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d060      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ac0:	4a1b      	ldr	r2, [pc, #108]	@ (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d05b      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aca:	4a1a      	ldr	r2, [pc, #104]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	e033      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8006ad0:	08013ee8 	.word	0x08013ee8
 8006ad4:	40023800 	.word	0x40023800
 8006ad8:	00020300 	.word	0x00020300
 8006adc:	00030300 	.word	0x00030300
 8006ae0:	00040300 	.word	0x00040300
 8006ae4:	00050300 	.word	0x00050300
 8006ae8:	00060300 	.word	0x00060300
 8006aec:	00070300 	.word	0x00070300
 8006af0:	00080300 	.word	0x00080300
 8006af4:	00090300 	.word	0x00090300
 8006af8:	000a0300 	.word	0x000a0300
 8006afc:	000b0300 	.word	0x000b0300
 8006b00:	000c0300 	.word	0x000c0300
 8006b04:	000d0300 	.word	0x000d0300
 8006b08:	000e0300 	.word	0x000e0300
 8006b0c:	000f0300 	.word	0x000f0300
 8006b10:	00100300 	.word	0x00100300
 8006b14:	00110300 	.word	0x00110300
 8006b18:	00120300 	.word	0x00120300
 8006b1c:	00130300 	.word	0x00130300
 8006b20:	00140300 	.word	0x00140300
 8006b24:	00150300 	.word	0x00150300
 8006b28:	00160300 	.word	0x00160300
 8006b2c:	00170300 	.word	0x00170300
 8006b30:	00180300 	.word	0x00180300
 8006b34:	00190300 	.word	0x00190300
 8006b38:	d021      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b3e:	4a4c      	ldr	r2, [pc, #304]	@ (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d01c      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b48:	4a4a      	ldr	r2, [pc, #296]	@ (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d017      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b52:	4a49      	ldr	r2, [pc, #292]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d012      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b5c:	4a47      	ldr	r2, [pc, #284]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d00d      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b66:	4a46      	ldr	r2, [pc, #280]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d008      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b70:	4a44      	ldr	r2, [pc, #272]	@ (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d003      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006b76:	21b7      	movs	r1, #183	@ 0xb7
 8006b78:	4843      	ldr	r0, [pc, #268]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8006b7a:	f7fd fc81 	bl	8004480 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b7e:	4b43      	ldr	r3, [pc, #268]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b82:	4a42      	ldr	r2, [pc, #264]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006b84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b88:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b8a:	4b40      	ldr	r3, [pc, #256]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b92:	60bb      	str	r3, [r7, #8]
 8006b94:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006b96:	4b3e      	ldr	r3, [pc, #248]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a3d      	ldr	r2, [pc, #244]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8006b9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ba0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ba2:	f7fe f93b 	bl	8004e1c <HAL_GetTick>
 8006ba6:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006ba8:	e009      	b.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006baa:	f7fe f937 	bl	8004e1c <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	2b64      	cmp	r3, #100	@ 0x64
 8006bb6:	d902      	bls.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	f000 bd9f 	b.w	80076fc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006bbe:	4b34      	ldr	r3, [pc, #208]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d0ef      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006bca:	4b30      	ldr	r3, [pc, #192]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bd2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d036      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d02f      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006be8:	4b28      	ldr	r3, [pc, #160]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bf0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006bf2:	4b26      	ldr	r3, [pc, #152]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bf6:	4a25      	ldr	r2, [pc, #148]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bfc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006bfe:	4b23      	ldr	r3, [pc, #140]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c02:	4a22      	ldr	r2, [pc, #136]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c08:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006c0a:	4a20      	ldr	r2, [pc, #128]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c10:	4b1e      	ldr	r3, [pc, #120]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c14:	f003 0301 	and.w	r3, r3, #1
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d115      	bne.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c1c:	f7fe f8fe 	bl	8004e1c <HAL_GetTick>
 8006c20:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c22:	e00b      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c24:	f7fe f8fa 	bl	8004e1c <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d902      	bls.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	f000 bd60 	b.w	80076fc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c3c:	4b13      	ldr	r3, [pc, #76]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c40:	f003 0302 	and.w	r3, r3, #2
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d0ed      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c54:	d120      	bne.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8006c56:	4b0d      	ldr	r3, [pc, #52]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006c62:	4b0c      	ldr	r3, [pc, #48]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8006c64:	400b      	ands	r3, r1
 8006c66:	4909      	ldr	r1, [pc, #36]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	608b      	str	r3, [r1, #8]
 8006c6c:	e01a      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8006c6e:	bf00      	nop
 8006c70:	001a0300 	.word	0x001a0300
 8006c74:	001b0300 	.word	0x001b0300
 8006c78:	001c0300 	.word	0x001c0300
 8006c7c:	001d0300 	.word	0x001d0300
 8006c80:	001e0300 	.word	0x001e0300
 8006c84:	001f0300 	.word	0x001f0300
 8006c88:	08013ee8 	.word	0x08013ee8
 8006c8c:	40023800 	.word	0x40023800
 8006c90:	40007000 	.word	0x40007000
 8006c94:	0ffffcff 	.word	0x0ffffcff
 8006c98:	4b9a      	ldr	r3, [pc, #616]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	4a99      	ldr	r2, [pc, #612]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006c9e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006ca2:	6093      	str	r3, [r2, #8]
 8006ca4:	4b97      	ldr	r3, [pc, #604]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006ca6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cb0:	4994      	ldr	r1, [pc, #592]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0310 	and.w	r3, r3, #16
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d01d      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d008      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x598>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006cd2:	d003      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x598>
 8006cd4:	21f1      	movs	r1, #241	@ 0xf1
 8006cd6:	488c      	ldr	r0, [pc, #560]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006cd8:	f7fd fbd2 	bl	8004480 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006cdc:	4b89      	ldr	r3, [pc, #548]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006cde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ce2:	4a88      	ldr	r2, [pc, #544]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006ce4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ce8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006cec:	4b85      	ldr	r3, [pc, #532]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006cee:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf6:	4983      	ldr	r1, [pc, #524]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d01c      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00d      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d1a:	d008      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d24:	d003      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8006d26:	21fb      	movs	r1, #251	@ 0xfb
 8006d28:	4877      	ldr	r0, [pc, #476]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006d2a:	f7fd fba9 	bl	8004480 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d2e:	4b75      	ldr	r3, [pc, #468]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d34:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d3c:	4971      	ldr	r1, [pc, #452]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d01d      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00e      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d60:	d009      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d66:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006d6a:	d004      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8006d6c:	f240 1105 	movw	r1, #261	@ 0x105
 8006d70:	4865      	ldr	r0, [pc, #404]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006d72:	f7fd fb85 	bl	8004480 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d76:	4b63      	ldr	r3, [pc, #396]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d7c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d84:	495f      	ldr	r1, [pc, #380]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d01d      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00e      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006da4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006da8:	d009      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006dae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006db2:	d004      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8006db4:	f240 110f 	movw	r1, #271	@ 0x10f
 8006db8:	4853      	ldr	r0, [pc, #332]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006dba:	f7fd fb61 	bl	8004480 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006dbe:	4b51      	ldr	r3, [pc, #324]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dc4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006dcc:	494d      	ldr	r1, [pc, #308]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d01d      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00e      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006df0:	d009      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006df6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006dfa:	d004      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8006dfc:	f240 1119 	movw	r1, #281	@ 0x119
 8006e00:	4841      	ldr	r0, [pc, #260]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006e02:	f7fd fb3d 	bl	8004480 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e06:	4b3f      	ldr	r3, [pc, #252]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e0c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e14:	493b      	ldr	r1, [pc, #236]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d01f      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d010      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d00c      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e3c:	2b03      	cmp	r3, #3
 8006e3e:	d008      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d004      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006e48:	f240 1123 	movw	r1, #291	@ 0x123
 8006e4c:	482e      	ldr	r0, [pc, #184]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006e4e:	f7fd fb17 	bl	8004480 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e52:	4b2c      	ldr	r3, [pc, #176]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e58:	f023 0203 	bic.w	r2, r3, #3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e60:	4928      	ldr	r1, [pc, #160]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d01f      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d010      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e80:	2b04      	cmp	r3, #4
 8006e82:	d00c      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e88:	2b0c      	cmp	r3, #12
 8006e8a:	d008      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e90:	2b08      	cmp	r3, #8
 8006e92:	d004      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006e94:	f240 112d 	movw	r1, #301	@ 0x12d
 8006e98:	481b      	ldr	r0, [pc, #108]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006e9a:	f7fd faf1 	bl	8004480 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e9e:	4b19      	ldr	r3, [pc, #100]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ea4:	f023 020c 	bic.w	r2, r3, #12
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006eac:	4915      	ldr	r1, [pc, #84]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d025      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d010      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ecc:	2b10      	cmp	r3, #16
 8006ece:	d00c      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ed4:	2b30      	cmp	r3, #48	@ 0x30
 8006ed6:	d008      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006edc:	2b20      	cmp	r3, #32
 8006ede:	d004      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8006ee0:	f240 1137 	movw	r1, #311	@ 0x137
 8006ee4:	4808      	ldr	r0, [pc, #32]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006ee6:	f7fd facb 	bl	8004480 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006eea:	4b06      	ldr	r3, [pc, #24]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ef0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ef8:	4902      	ldr	r1, [pc, #8]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006f00:	e004      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8006f02:	bf00      	nop
 8006f04:	40023800 	.word	0x40023800
 8006f08:	08013ee8 	.word	0x08013ee8
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d01f      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d010      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f24:	2b40      	cmp	r3, #64	@ 0x40
 8006f26:	d00c      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f2c:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f2e:	d008      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f34:	2b80      	cmp	r3, #128	@ 0x80
 8006f36:	d004      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006f38:	f240 1141 	movw	r1, #321	@ 0x141
 8006f3c:	48a0      	ldr	r0, [pc, #640]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006f3e:	f7fd fa9f 	bl	8004480 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006f42:	4ba0      	ldr	r3, [pc, #640]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f48:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f50:	499c      	ldr	r1, [pc, #624]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d022      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d013      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f74:	d00e      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f7e:	d009      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f88:	d004      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8006f8a:	f240 114b 	movw	r1, #331	@ 0x14b
 8006f8e:	488c      	ldr	r0, [pc, #560]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006f90:	f7fd fa76 	bl	8004480 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006f94:	4b8b      	ldr	r3, [pc, #556]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f9a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fa2:	4988      	ldr	r1, [pc, #544]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d022      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d013      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fc6:	d00e      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fcc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006fd0:	d009      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fda:	d004      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8006fdc:	f240 1155 	movw	r1, #341	@ 0x155
 8006fe0:	4877      	ldr	r0, [pc, #476]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006fe2:	f7fd fa4d 	bl	8004480 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006fe6:	4b77      	ldr	r3, [pc, #476]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fec:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ff4:	4973      	ldr	r1, [pc, #460]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d022      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800700c:	2b00      	cmp	r3, #0
 800700e:	d013      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007014:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007018:	d00e      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800701e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007022:	d009      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007028:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800702c:	d004      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800702e:	f240 115f 	movw	r1, #351	@ 0x15f
 8007032:	4863      	ldr	r0, [pc, #396]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8007034:	f7fd fa24 	bl	8004480 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007038:	4b62      	ldr	r3, [pc, #392]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800703a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800703e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007046:	495f      	ldr	r1, [pc, #380]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007048:	4313      	orrs	r3, r2
 800704a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d022      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800705e:	2b00      	cmp	r3, #0
 8007060:	d013      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x946>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007066:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800706a:	d00e      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x946>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007070:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007074:	d009      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x946>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800707a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800707e:	d004      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x946>
 8007080:	f240 1169 	movw	r1, #361	@ 0x169
 8007084:	484e      	ldr	r0, [pc, #312]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8007086:	f7fd f9fb 	bl	8004480 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800708a:	4b4e      	ldr	r3, [pc, #312]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800708c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007090:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007098:	494a      	ldr	r1, [pc, #296]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800709a:	4313      	orrs	r3, r2
 800709c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d018      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80070b4:	d008      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d004      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80070be:	f240 1173 	movw	r1, #371	@ 0x173
 80070c2:	483f      	ldr	r0, [pc, #252]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80070c4:	f7fd f9dc 	bl	8004480 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80070c8:	4b3e      	ldr	r3, [pc, #248]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80070ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070ce:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070d6:	493b      	ldr	r1, [pc, #236]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d01f      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80070ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070f2:	d008      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d004      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 80070fc:	f240 117d 	movw	r1, #381	@ 0x17d
 8007100:	482f      	ldr	r0, [pc, #188]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8007102:	f7fd f9bd 	bl	8004480 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007106:	4b2f      	ldr	r3, [pc, #188]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800710c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007114:	492b      	ldr	r1, [pc, #172]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007116:	4313      	orrs	r3, r2
 8007118:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007120:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007124:	d101      	bne.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 8007126:	2301      	movs	r3, #1
 8007128:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0308 	and.w	r3, r3, #8
 8007132:	2b00      	cmp	r3, #0
 8007134:	d001      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 8007136:	2301      	movs	r3, #1
 8007138:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d022      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800714a:	2b00      	cmp	r3, #0
 800714c:	d013      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007152:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007156:	d00e      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800715c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007160:	d009      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007166:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800716a:	d004      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 800716c:	f240 1195 	movw	r1, #405	@ 0x195
 8007170:	4813      	ldr	r0, [pc, #76]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8007172:	f7fd f985 	bl	8004480 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007176:	4b13      	ldr	r3, [pc, #76]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800717c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007184:	490f      	ldr	r1, [pc, #60]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007186:	4313      	orrs	r3, r2
 8007188:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d020      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800719e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071a2:	d009      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d004      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80071ae:	f240 119f 	movw	r1, #415	@ 0x19f
 80071b2:	4803      	ldr	r0, [pc, #12]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80071b4:	f7fd f964 	bl	8004480 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80071b8:	4b02      	ldr	r3, [pc, #8]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80071ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071be:	e003      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
 80071c0:	08013ee8 	.word	0x08013ee8
 80071c4:	40023800 	.word	0x40023800
 80071c8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071d2:	4910      	ldr	r1, [pc, #64]	@ (8007214 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80071d4:	4313      	orrs	r3, r2
 80071d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d006      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 8155 	beq.w	8007498 <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80071ee:	4b09      	ldr	r3, [pc, #36]	@ (8007214 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a08      	ldr	r2, [pc, #32]	@ (8007214 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80071f4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80071f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071fa:	f7fd fe0f 	bl	8004e1c <HAL_GetTick>
 80071fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007200:	e00a      	b.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007202:	f7fd fe0b 	bl	8004e1c <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	2b64      	cmp	r3, #100	@ 0x64
 800720e:	d903      	bls.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e273      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8007214:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007218:	4b9a      	ldr	r3, [pc, #616]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1ee      	bne.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	2b31      	cmp	r3, #49	@ 0x31
 800722a:	d904      	bls.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8007234:	d904      	bls.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 8007236:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 800723a:	4893      	ldr	r0, [pc, #588]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800723c:	f7fd f920 	bl	8004480 <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0301 	and.w	r3, r3, #1
 8007248:	2b00      	cmp	r3, #0
 800724a:	d02e      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0xb66>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007250:	2b00      	cmp	r3, #0
 8007252:	d12a      	bne.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d903      	bls.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xb20>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	2b07      	cmp	r3, #7
 8007262:	d904      	bls.n	800726e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8007264:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8007268:	4887      	ldr	r0, [pc, #540]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800726a:	f7fd f909 	bl	8004480 <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800726e:	4b85      	ldr	r3, [pc, #532]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007270:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007274:	0c1b      	lsrs	r3, r3, #16
 8007276:	f003 0303 	and.w	r3, r3, #3
 800727a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800727c:	4b81      	ldr	r3, [pc, #516]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800727e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007282:	0e1b      	lsrs	r3, r3, #24
 8007284:	f003 030f 	and.w	r3, r3, #15
 8007288:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	019a      	lsls	r2, r3, #6
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	041b      	lsls	r3, r3, #16
 8007294:	431a      	orrs	r2, r3
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	061b      	lsls	r3, r3, #24
 800729a:	431a      	orrs	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	071b      	lsls	r3, r3, #28
 80072a2:	4978      	ldr	r1, [pc, #480]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80072a4:	4313      	orrs	r3, r2
 80072a6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d004      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072be:	d00a      	beq.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d048      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072d4:	d143      	bne.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d903      	bls.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0xba2>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	2b0f      	cmp	r3, #15
 80072e4:	d904      	bls.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80072e6:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 80072ea:	4867      	ldr	r0, [pc, #412]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80072ec:	f7fd f8c8 	bl	8004480 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d003      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072fc:	2b20      	cmp	r3, #32
 80072fe:	d904      	bls.n	800730a <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 8007300:	f44f 71f9 	mov.w	r1, #498	@ 0x1f2
 8007304:	4860      	ldr	r0, [pc, #384]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007306:	f7fd f8bb 	bl	8004480 <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800730a:	4b5e      	ldr	r3, [pc, #376]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800730c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007310:	0c1b      	lsrs	r3, r3, #16
 8007312:	f003 0303 	and.w	r3, r3, #3
 8007316:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007318:	4b5a      	ldr	r3, [pc, #360]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800731a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800731e:	0f1b      	lsrs	r3, r3, #28
 8007320:	f003 0307 	and.w	r3, r3, #7
 8007324:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	019a      	lsls	r2, r3, #6
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	041b      	lsls	r3, r3, #16
 8007330:	431a      	orrs	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	061b      	lsls	r3, r3, #24
 8007338:	431a      	orrs	r2, r3
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	071b      	lsls	r3, r3, #28
 800733e:	4951      	ldr	r1, [pc, #324]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007340:	4313      	orrs	r3, r2
 8007342:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007346:	4b4f      	ldr	r3, [pc, #316]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007348:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800734c:	f023 021f 	bic.w	r2, r3, #31
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007354:	3b01      	subs	r3, #1
 8007356:	494b      	ldr	r1, [pc, #300]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007358:	4313      	orrs	r3, r2
 800735a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d032      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d010      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d00c      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	2b02      	cmp	r3, #2
 8007380:	d008      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	2b03      	cmp	r3, #3
 8007388:	d004      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800738a:	f240 2105 	movw	r1, #517	@ 0x205
 800738e:	483e      	ldr	r0, [pc, #248]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007390:	f7fd f876 	bl	8004480 <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007394:	4b3b      	ldr	r3, [pc, #236]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007396:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800739a:	0e1b      	lsrs	r3, r3, #24
 800739c:	f003 030f 	and.w	r3, r3, #15
 80073a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80073a2:	4b38      	ldr	r3, [pc, #224]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80073a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073a8:	0f1b      	lsrs	r3, r3, #28
 80073aa:	f003 0307 	and.w	r3, r3, #7
 80073ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	019a      	lsls	r2, r3, #6
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	041b      	lsls	r3, r3, #16
 80073bc:	431a      	orrs	r2, r3
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	061b      	lsls	r3, r3, #24
 80073c2:	431a      	orrs	r2, r3
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	071b      	lsls	r3, r3, #28
 80073c8:	492e      	ldr	r1, [pc, #184]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d040      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d010      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d00c      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d008      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	2b03      	cmp	r3, #3
 80073fa:	d004      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80073fc:	f44f 7105 	mov.w	r1, #532	@ 0x214
 8007400:	4821      	ldr	r0, [pc, #132]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007402:	f7fd f83d 	bl	8004480 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d903      	bls.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	2b07      	cmp	r3, #7
 8007414:	d904      	bls.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007416:	f240 2115 	movw	r1, #533	@ 0x215
 800741a:	481b      	ldr	r0, [pc, #108]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800741c:	f7fd f830 	bl	8004480 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d903      	bls.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	2b0f      	cmp	r3, #15
 800742e:	d904      	bls.n	800743a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 8007430:	f240 2116 	movw	r1, #534	@ 0x216
 8007434:	4814      	ldr	r0, [pc, #80]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007436:	f7fd f823 	bl	8004480 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	019a      	lsls	r2, r3, #6
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	041b      	lsls	r3, r3, #16
 8007446:	431a      	orrs	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	061b      	lsls	r3, r3, #24
 800744e:	431a      	orrs	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	071b      	lsls	r3, r3, #28
 8007456:	490b      	ldr	r1, [pc, #44]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007458:	4313      	orrs	r3, r2
 800745a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800745e:	4b09      	ldr	r3, [pc, #36]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a08      	ldr	r2, [pc, #32]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007464:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007468:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800746a:	f7fd fcd7 	bl	8004e1c <HAL_GetTick>
 800746e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007470:	e00c      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007472:	f7fd fcd3 	bl	8004e1c <HAL_GetTick>
 8007476:	4602      	mov	r2, r0
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	2b64      	cmp	r3, #100	@ 0x64
 800747e:	d905      	bls.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e13b      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8007484:	40023800 	.word	0x40023800
 8007488:	08013ee8 	.word	0x08013ee8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800748c:	4b9d      	ldr	r3, [pc, #628]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007494:	2b00      	cmp	r3, #0
 8007496:	d0ec      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	2b01      	cmp	r3, #1
 800749c:	f040 812d 	bne.w	80076fa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80074a0:	4b98      	ldr	r3, [pc, #608]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a97      	ldr	r2, [pc, #604]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80074a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ac:	f7fd fcb6 	bl	8004e1c <HAL_GetTick>
 80074b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80074b2:	e008      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80074b4:	f7fd fcb2 	bl	8004e1c <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	2b64      	cmp	r3, #100	@ 0x64
 80074c0:	d901      	bls.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e11a      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80074c6:	4b8f      	ldr	r3, [pc, #572]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074d2:	d0ef      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	695b      	ldr	r3, [r3, #20]
 80074d8:	2b31      	cmp	r3, #49	@ 0x31
 80074da:	d904      	bls.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0xda2>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	695b      	ldr	r3, [r3, #20]
 80074e0:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 80074e4:	d904      	bls.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 80074e6:	f44f 7111 	mov.w	r1, #580	@ 0x244
 80074ea:	4887      	ldr	r0, [pc, #540]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80074ec:	f7fc ffc8 	bl	8004480 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d003      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007500:	2b00      	cmp	r3, #0
 8007502:	d009      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800750c:	2b00      	cmp	r3, #0
 800750e:	d048      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007514:	2b00      	cmp	r3, #0
 8007516:	d144      	bne.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d903      	bls.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0xde4>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	2b0f      	cmp	r3, #15
 8007526:	d904      	bls.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0xdee>
 8007528:	f240 214b 	movw	r1, #587	@ 0x24b
 800752c:	4876      	ldr	r0, [pc, #472]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 800752e:	f7fc ffa7 	bl	8004480 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007536:	2b00      	cmp	r3, #0
 8007538:	d003      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800753e:	2b20      	cmp	r3, #32
 8007540:	d904      	bls.n	800754c <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8007542:	f240 214d 	movw	r1, #589	@ 0x24d
 8007546:	4870      	ldr	r0, [pc, #448]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8007548:	f7fc ff9a 	bl	8004480 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800754c:	4b6d      	ldr	r3, [pc, #436]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800754e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007552:	0c1b      	lsrs	r3, r3, #16
 8007554:	f003 0303 	and.w	r3, r3, #3
 8007558:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800755a:	4b6a      	ldr	r3, [pc, #424]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800755c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007560:	0f1b      	lsrs	r3, r3, #28
 8007562:	f003 0307 	and.w	r3, r3, #7
 8007566:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	019a      	lsls	r2, r3, #6
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	041b      	lsls	r3, r3, #16
 8007572:	431a      	orrs	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	061b      	lsls	r3, r3, #24
 800757a:	431a      	orrs	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	071b      	lsls	r3, r3, #28
 8007580:	4960      	ldr	r1, [pc, #384]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007582:	4313      	orrs	r3, r2
 8007584:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007588:	4b5e      	ldr	r3, [pc, #376]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800758a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800758e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007596:	3b01      	subs	r3, #1
 8007598:	021b      	lsls	r3, r3, #8
 800759a:	495a      	ldr	r1, [pc, #360]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800759c:	4313      	orrs	r3, r2
 800759e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d037      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0xeda>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075b6:	d132      	bne.n	800761e <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a1b      	ldr	r3, [r3, #32]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d010      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a1b      	ldr	r3, [r3, #32]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d00c      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a1b      	ldr	r3, [r3, #32]
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	d008      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a1b      	ldr	r3, [r3, #32]
 80075d4:	2b03      	cmp	r3, #3
 80075d6:	d004      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80075d8:	f44f 7118 	mov.w	r1, #608	@ 0x260
 80075dc:	484a      	ldr	r0, [pc, #296]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80075de:	f7fc ff4f 	bl	8004480 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80075e2:	4b48      	ldr	r3, [pc, #288]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80075e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075e8:	0e1b      	lsrs	r3, r3, #24
 80075ea:	f003 030f 	and.w	r3, r3, #15
 80075ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80075f0:	4b44      	ldr	r3, [pc, #272]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80075f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075f6:	0f1b      	lsrs	r3, r3, #28
 80075f8:	f003 0307 	and.w	r3, r3, #7
 80075fc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	019a      	lsls	r2, r3, #6
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a1b      	ldr	r3, [r3, #32]
 8007608:	041b      	lsls	r3, r3, #16
 800760a:	431a      	orrs	r2, r3
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	061b      	lsls	r3, r3, #24
 8007610:	431a      	orrs	r2, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	071b      	lsls	r3, r3, #28
 8007616:	493b      	ldr	r1, [pc, #236]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007618:	4313      	orrs	r3, r2
 800761a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 0308 	and.w	r3, r3, #8
 8007626:	2b00      	cmp	r3, #0
 8007628:	d04d      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	69db      	ldr	r3, [r3, #28]
 800762e:	2b01      	cmp	r3, #1
 8007630:	d903      	bls.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xef6>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	69db      	ldr	r3, [r3, #28]
 8007636:	2b07      	cmp	r3, #7
 8007638:	d904      	bls.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 800763a:	f240 216f 	movw	r1, #623	@ 0x26f
 800763e:	4832      	ldr	r0, [pc, #200]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8007640:	f7fc ff1e 	bl	8004480 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007648:	2b00      	cmp	r3, #0
 800764a:	d013      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007654:	d00e      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800765a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800765e:	d009      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007664:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007668:	d004      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 800766a:	f44f 711c 	mov.w	r1, #624	@ 0x270
 800766e:	4826      	ldr	r0, [pc, #152]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8007670:	f7fc ff06 	bl	8004480 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007674:	4b23      	ldr	r3, [pc, #140]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800767a:	0e1b      	lsrs	r3, r3, #24
 800767c:	f003 030f 	and.w	r3, r3, #15
 8007680:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007682:	4b20      	ldr	r3, [pc, #128]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007688:	0c1b      	lsrs	r3, r3, #16
 800768a:	f003 0303 	and.w	r3, r3, #3
 800768e:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	695b      	ldr	r3, [r3, #20]
 8007694:	019a      	lsls	r2, r3, #6
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	041b      	lsls	r3, r3, #16
 800769a:	431a      	orrs	r2, r3
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	061b      	lsls	r3, r3, #24
 80076a0:	431a      	orrs	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	69db      	ldr	r3, [r3, #28]
 80076a6:	071b      	lsls	r3, r3, #28
 80076a8:	4916      	ldr	r1, [pc, #88]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80076aa:	4313      	orrs	r3, r2
 80076ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80076b0:	4b14      	ldr	r3, [pc, #80]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80076b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076b6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076be:	4911      	ldr	r1, [pc, #68]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80076c0:	4313      	orrs	r3, r2
 80076c2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80076c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a0e      	ldr	r2, [pc, #56]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80076cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076d2:	f7fd fba3 	bl	8004e1c <HAL_GetTick>
 80076d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80076d8:	e008      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80076da:	f7fd fb9f 	bl	8004e1c <HAL_GetTick>
 80076de:	4602      	mov	r2, r0
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	2b64      	cmp	r3, #100	@ 0x64
 80076e6:	d901      	bls.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80076e8:	2303      	movs	r3, #3
 80076ea:	e007      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80076ec:	4b05      	ldr	r3, [pc, #20]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076f8:	d1ef      	bne.n	80076da <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3720      	adds	r7, #32
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	40023800 	.word	0x40023800
 8007708:	08013ee8 	.word	0x08013ee8

0800770c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d101      	bne.n	800771e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e1fb      	b.n	8007b16 <HAL_SPI_Init+0x40a>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a83      	ldr	r2, [pc, #524]	@ (8007930 <HAL_SPI_Init+0x224>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d01d      	beq.n	8007764 <HAL_SPI_Init+0x58>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a81      	ldr	r2, [pc, #516]	@ (8007934 <HAL_SPI_Init+0x228>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d018      	beq.n	8007764 <HAL_SPI_Init+0x58>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a80      	ldr	r2, [pc, #512]	@ (8007938 <HAL_SPI_Init+0x22c>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d013      	beq.n	8007764 <HAL_SPI_Init+0x58>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a7e      	ldr	r2, [pc, #504]	@ (800793c <HAL_SPI_Init+0x230>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d00e      	beq.n	8007764 <HAL_SPI_Init+0x58>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a7d      	ldr	r2, [pc, #500]	@ (8007940 <HAL_SPI_Init+0x234>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d009      	beq.n	8007764 <HAL_SPI_Init+0x58>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a7b      	ldr	r2, [pc, #492]	@ (8007944 <HAL_SPI_Init+0x238>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d004      	beq.n	8007764 <HAL_SPI_Init+0x58>
 800775a:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 800775e:	487a      	ldr	r0, [pc, #488]	@ (8007948 <HAL_SPI_Init+0x23c>)
 8007760:	f7fc fe8e 	bl	8004480 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d009      	beq.n	8007780 <HAL_SPI_Init+0x74>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007774:	d004      	beq.n	8007780 <HAL_SPI_Init+0x74>
 8007776:	f240 1147 	movw	r1, #327	@ 0x147
 800777a:	4873      	ldr	r0, [pc, #460]	@ (8007948 <HAL_SPI_Init+0x23c>)
 800777c:	f7fc fe80 	bl	8004480 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00e      	beq.n	80077a6 <HAL_SPI_Init+0x9a>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007790:	d009      	beq.n	80077a6 <HAL_SPI_Init+0x9a>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800779a:	d004      	beq.n	80077a6 <HAL_SPI_Init+0x9a>
 800779c:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 80077a0:	4869      	ldr	r0, [pc, #420]	@ (8007948 <HAL_SPI_Init+0x23c>)
 80077a2:	f7fc fe6d 	bl	8004480 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80077ae:	d040      	beq.n	8007832 <HAL_SPI_Init+0x126>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 80077b8:	d03b      	beq.n	8007832 <HAL_SPI_Init+0x126>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 80077c2:	d036      	beq.n	8007832 <HAL_SPI_Init+0x126>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80077cc:	d031      	beq.n	8007832 <HAL_SPI_Init+0x126>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 80077d6:	d02c      	beq.n	8007832 <HAL_SPI_Init+0x126>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80077e0:	d027      	beq.n	8007832 <HAL_SPI_Init+0x126>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 80077ea:	d022      	beq.n	8007832 <HAL_SPI_Init+0x126>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077f4:	d01d      	beq.n	8007832 <HAL_SPI_Init+0x126>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80077fe:	d018      	beq.n	8007832 <HAL_SPI_Init+0x126>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007808:	d013      	beq.n	8007832 <HAL_SPI_Init+0x126>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007812:	d00e      	beq.n	8007832 <HAL_SPI_Init+0x126>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800781c:	d009      	beq.n	8007832 <HAL_SPI_Init+0x126>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007826:	d004      	beq.n	8007832 <HAL_SPI_Init+0x126>
 8007828:	f240 1149 	movw	r1, #329	@ 0x149
 800782c:	4846      	ldr	r0, [pc, #280]	@ (8007948 <HAL_SPI_Init+0x23c>)
 800782e:	f7fc fe27 	bl	8004480 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800783a:	d00d      	beq.n	8007858 <HAL_SPI_Init+0x14c>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	699b      	ldr	r3, [r3, #24]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d009      	beq.n	8007858 <HAL_SPI_Init+0x14c>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800784c:	d004      	beq.n	8007858 <HAL_SPI_Init+0x14c>
 800784e:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8007852:	483d      	ldr	r0, [pc, #244]	@ (8007948 <HAL_SPI_Init+0x23c>)
 8007854:	f7fc fe14 	bl	8004480 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800785c:	2b08      	cmp	r3, #8
 800785e:	d008      	beq.n	8007872 <HAL_SPI_Init+0x166>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007864:	2b00      	cmp	r3, #0
 8007866:	d004      	beq.n	8007872 <HAL_SPI_Init+0x166>
 8007868:	f240 114b 	movw	r1, #331	@ 0x14b
 800786c:	4836      	ldr	r0, [pc, #216]	@ (8007948 <HAL_SPI_Init+0x23c>)
 800786e:	f7fc fe07 	bl	8004480 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	69db      	ldr	r3, [r3, #28]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d020      	beq.n	80078bc <HAL_SPI_Init+0x1b0>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	2b08      	cmp	r3, #8
 8007880:	d01c      	beq.n	80078bc <HAL_SPI_Init+0x1b0>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	69db      	ldr	r3, [r3, #28]
 8007886:	2b10      	cmp	r3, #16
 8007888:	d018      	beq.n	80078bc <HAL_SPI_Init+0x1b0>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	69db      	ldr	r3, [r3, #28]
 800788e:	2b18      	cmp	r3, #24
 8007890:	d014      	beq.n	80078bc <HAL_SPI_Init+0x1b0>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	69db      	ldr	r3, [r3, #28]
 8007896:	2b20      	cmp	r3, #32
 8007898:	d010      	beq.n	80078bc <HAL_SPI_Init+0x1b0>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	69db      	ldr	r3, [r3, #28]
 800789e:	2b28      	cmp	r3, #40	@ 0x28
 80078a0:	d00c      	beq.n	80078bc <HAL_SPI_Init+0x1b0>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	2b30      	cmp	r3, #48	@ 0x30
 80078a8:	d008      	beq.n	80078bc <HAL_SPI_Init+0x1b0>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	69db      	ldr	r3, [r3, #28]
 80078ae:	2b38      	cmp	r3, #56	@ 0x38
 80078b0:	d004      	beq.n	80078bc <HAL_SPI_Init+0x1b0>
 80078b2:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 80078b6:	4824      	ldr	r0, [pc, #144]	@ (8007948 <HAL_SPI_Init+0x23c>)
 80078b8:	f7fc fde2 	bl	8004480 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a1b      	ldr	r3, [r3, #32]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d008      	beq.n	80078d6 <HAL_SPI_Init+0x1ca>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a1b      	ldr	r3, [r3, #32]
 80078c8:	2b80      	cmp	r3, #128	@ 0x80
 80078ca:	d004      	beq.n	80078d6 <HAL_SPI_Init+0x1ca>
 80078cc:	f240 114d 	movw	r1, #333	@ 0x14d
 80078d0:	481d      	ldr	r0, [pc, #116]	@ (8007948 <HAL_SPI_Init+0x23c>)
 80078d2:	f7fc fdd5 	bl	8004480 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d008      	beq.n	80078f0 <HAL_SPI_Init+0x1e4>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078e2:	2b10      	cmp	r3, #16
 80078e4:	d004      	beq.n	80078f0 <HAL_SPI_Init+0x1e4>
 80078e6:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 80078ea:	4817      	ldr	r0, [pc, #92]	@ (8007948 <HAL_SPI_Init+0x23c>)
 80078ec:	f7fc fdc8 	bl	8004480 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d158      	bne.n	80079aa <HAL_SPI_Init+0x29e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d008      	beq.n	8007912 <HAL_SPI_Init+0x206>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	2b02      	cmp	r3, #2
 8007906:	d004      	beq.n	8007912 <HAL_SPI_Init+0x206>
 8007908:	f240 1151 	movw	r1, #337	@ 0x151
 800790c:	480e      	ldr	r0, [pc, #56]	@ (8007948 <HAL_SPI_Init+0x23c>)
 800790e:	f7fc fdb7 	bl	8004480 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	695b      	ldr	r3, [r3, #20]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d018      	beq.n	800794c <HAL_SPI_Init+0x240>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d014      	beq.n	800794c <HAL_SPI_Init+0x240>
 8007922:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8007926:	4808      	ldr	r0, [pc, #32]	@ (8007948 <HAL_SPI_Init+0x23c>)
 8007928:	f7fc fdaa 	bl	8004480 <assert_failed>
 800792c:	e00e      	b.n	800794c <HAL_SPI_Init+0x240>
 800792e:	bf00      	nop
 8007930:	40013000 	.word	0x40013000
 8007934:	40003800 	.word	0x40003800
 8007938:	40003c00 	.word	0x40003c00
 800793c:	40013400 	.word	0x40013400
 8007940:	40015000 	.word	0x40015000
 8007944:	40015400 	.word	0x40015400
 8007948:	08013f24 	.word	0x08013f24

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007954:	d125      	bne.n	80079a2 <HAL_SPI_Init+0x296>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	69db      	ldr	r3, [r3, #28]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d050      	beq.n	8007a00 <HAL_SPI_Init+0x2f4>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	69db      	ldr	r3, [r3, #28]
 8007962:	2b08      	cmp	r3, #8
 8007964:	d04c      	beq.n	8007a00 <HAL_SPI_Init+0x2f4>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	69db      	ldr	r3, [r3, #28]
 800796a:	2b10      	cmp	r3, #16
 800796c:	d048      	beq.n	8007a00 <HAL_SPI_Init+0x2f4>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	2b18      	cmp	r3, #24
 8007974:	d044      	beq.n	8007a00 <HAL_SPI_Init+0x2f4>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	69db      	ldr	r3, [r3, #28]
 800797a:	2b20      	cmp	r3, #32
 800797c:	d040      	beq.n	8007a00 <HAL_SPI_Init+0x2f4>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	69db      	ldr	r3, [r3, #28]
 8007982:	2b28      	cmp	r3, #40	@ 0x28
 8007984:	d03c      	beq.n	8007a00 <HAL_SPI_Init+0x2f4>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	69db      	ldr	r3, [r3, #28]
 800798a:	2b30      	cmp	r3, #48	@ 0x30
 800798c:	d038      	beq.n	8007a00 <HAL_SPI_Init+0x2f4>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	69db      	ldr	r3, [r3, #28]
 8007992:	2b38      	cmp	r3, #56	@ 0x38
 8007994:	d034      	beq.n	8007a00 <HAL_SPI_Init+0x2f4>
 8007996:	f44f 71ab 	mov.w	r1, #342	@ 0x156
 800799a:	4861      	ldr	r0, [pc, #388]	@ (8007b20 <HAL_SPI_Init+0x414>)
 800799c:	f7fc fd70 	bl	8004480 <assert_failed>
 80079a0:	e02e      	b.n	8007a00 <HAL_SPI_Init+0x2f4>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	61da      	str	r2, [r3, #28]
 80079a8:	e02a      	b.n	8007a00 <HAL_SPI_Init+0x2f4>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	69db      	ldr	r3, [r3, #28]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d020      	beq.n	80079f4 <HAL_SPI_Init+0x2e8>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	69db      	ldr	r3, [r3, #28]
 80079b6:	2b08      	cmp	r3, #8
 80079b8:	d01c      	beq.n	80079f4 <HAL_SPI_Init+0x2e8>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	69db      	ldr	r3, [r3, #28]
 80079be:	2b10      	cmp	r3, #16
 80079c0:	d018      	beq.n	80079f4 <HAL_SPI_Init+0x2e8>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	69db      	ldr	r3, [r3, #28]
 80079c6:	2b18      	cmp	r3, #24
 80079c8:	d014      	beq.n	80079f4 <HAL_SPI_Init+0x2e8>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	69db      	ldr	r3, [r3, #28]
 80079ce:	2b20      	cmp	r3, #32
 80079d0:	d010      	beq.n	80079f4 <HAL_SPI_Init+0x2e8>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	69db      	ldr	r3, [r3, #28]
 80079d6:	2b28      	cmp	r3, #40	@ 0x28
 80079d8:	d00c      	beq.n	80079f4 <HAL_SPI_Init+0x2e8>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	69db      	ldr	r3, [r3, #28]
 80079de:	2b30      	cmp	r3, #48	@ 0x30
 80079e0:	d008      	beq.n	80079f4 <HAL_SPI_Init+0x2e8>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	69db      	ldr	r3, [r3, #28]
 80079e6:	2b38      	cmp	r3, #56	@ 0x38
 80079e8:	d004      	beq.n	80079f4 <HAL_SPI_Init+0x2e8>
 80079ea:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 80079ee:	484c      	ldr	r0, [pc, #304]	@ (8007b20 <HAL_SPI_Init+0x414>)
 80079f0:	f7fc fd46 	bl	8004480 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d106      	bne.n	8007a20 <HAL_SPI_Init+0x314>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f7fd f844 	bl	8004aa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2202      	movs	r2, #2
 8007a24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007a40:	d902      	bls.n	8007a48 <HAL_SPI_Init+0x33c>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007a42:	2300      	movs	r3, #0
 8007a44:	60fb      	str	r3, [r7, #12]
 8007a46:	e002      	b.n	8007a4e <HAL_SPI_Init+0x342>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007a48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007a4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007a56:	d007      	beq.n	8007a68 <HAL_SPI_Init+0x35c>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007a60:	d002      	beq.n	8007a68 <HAL_SPI_Init+0x35c>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007a78:	431a      	orrs	r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	f003 0302 	and.w	r3, r3, #2
 8007a82:	431a      	orrs	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	695b      	ldr	r3, [r3, #20]
 8007a88:	f003 0301 	and.w	r3, r3, #1
 8007a8c:	431a      	orrs	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	699b      	ldr	r3, [r3, #24]
 8007a92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a96:	431a      	orrs	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	69db      	ldr	r3, [r3, #28]
 8007a9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007aa0:	431a      	orrs	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007aaa:	ea42 0103 	orr.w	r1, r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ab2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	430a      	orrs	r2, r1
 8007abc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	0c1b      	lsrs	r3, r3, #16
 8007ac4:	f003 0204 	and.w	r2, r3, #4
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007acc:	f003 0310 	and.w	r3, r3, #16
 8007ad0:	431a      	orrs	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ad6:	f003 0308 	and.w	r3, r3, #8
 8007ada:	431a      	orrs	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007ae4:	ea42 0103 	orr.w	r1, r2, r3
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	430a      	orrs	r2, r1
 8007af4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	69da      	ldr	r2, [r3, #28]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	08013f24 	.word	0x08013f24

08007b24 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b088      	sub	sp, #32
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	099b      	lsrs	r3, r3, #6
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d10f      	bne.n	8007b68 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00a      	beq.n	8007b68 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	099b      	lsrs	r3, r3, #6
 8007b56:	f003 0301 	and.w	r3, r3, #1
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d004      	beq.n	8007b68 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	4798      	blx	r3
    return;
 8007b66:	e0d7      	b.n	8007d18 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	085b      	lsrs	r3, r3, #1
 8007b6c:	f003 0301 	and.w	r3, r3, #1
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00a      	beq.n	8007b8a <HAL_SPI_IRQHandler+0x66>
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	09db      	lsrs	r3, r3, #7
 8007b78:	f003 0301 	and.w	r3, r3, #1
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d004      	beq.n	8007b8a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	4798      	blx	r3
    return;
 8007b88:	e0c6      	b.n	8007d18 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	095b      	lsrs	r3, r3, #5
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10c      	bne.n	8007bb0 <HAL_SPI_IRQHandler+0x8c>
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	099b      	lsrs	r3, r3, #6
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d106      	bne.n	8007bb0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007ba2:	69bb      	ldr	r3, [r7, #24]
 8007ba4:	0a1b      	lsrs	r3, r3, #8
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f000 80b4 	beq.w	8007d18 <HAL_SPI_IRQHandler+0x1f4>
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	095b      	lsrs	r3, r3, #5
 8007bb4:	f003 0301 	and.w	r3, r3, #1
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f000 80ad 	beq.w	8007d18 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	099b      	lsrs	r3, r3, #6
 8007bc2:	f003 0301 	and.w	r3, r3, #1
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d023      	beq.n	8007c12 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b03      	cmp	r3, #3
 8007bd4:	d011      	beq.n	8007bfa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bda:	f043 0204 	orr.w	r2, r3, #4
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007be2:	2300      	movs	r3, #0
 8007be4:	617b      	str	r3, [r7, #20]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	617b      	str	r3, [r7, #20]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	617b      	str	r3, [r7, #20]
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	e00b      	b.n	8007c12 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	613b      	str	r3, [r7, #16]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	613b      	str	r3, [r7, #16]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	613b      	str	r3, [r7, #16]
 8007c0e:	693b      	ldr	r3, [r7, #16]
        return;
 8007c10:	e082      	b.n	8007d18 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	095b      	lsrs	r3, r3, #5
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d014      	beq.n	8007c48 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c22:	f043 0201 	orr.w	r2, r3, #1
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	60fb      	str	r3, [r7, #12]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	60fb      	str	r3, [r7, #12]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	0a1b      	lsrs	r3, r3, #8
 8007c4c:	f003 0301 	and.w	r3, r3, #1
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00c      	beq.n	8007c6e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c58:	f043 0208 	orr.w	r2, r3, #8
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007c60:	2300      	movs	r3, #0
 8007c62:	60bb      	str	r3, [r7, #8]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	60bb      	str	r3, [r7, #8]
 8007c6c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d04f      	beq.n	8007d16 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	685a      	ldr	r2, [r3, #4]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007c84:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	f003 0302 	and.w	r3, r3, #2
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d104      	bne.n	8007ca2 <HAL_SPI_IRQHandler+0x17e>
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	f003 0301 	and.w	r3, r3, #1
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d034      	beq.n	8007d0c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	685a      	ldr	r2, [r3, #4]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f022 0203 	bic.w	r2, r2, #3
 8007cb0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d011      	beq.n	8007cde <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cbe:	4a18      	ldr	r2, [pc, #96]	@ (8007d20 <HAL_SPI_IRQHandler+0x1fc>)
 8007cc0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fd fb82 	bl	80053d0 <HAL_DMA_Abort_IT>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d005      	beq.n	8007cde <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cd6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d016      	beq.n	8007d14 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cea:	4a0d      	ldr	r2, [pc, #52]	@ (8007d20 <HAL_SPI_IRQHandler+0x1fc>)
 8007cec:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fd fb6c 	bl	80053d0 <HAL_DMA_Abort_IT>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00a      	beq.n	8007d14 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d02:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8007d0a:	e003      	b.n	8007d14 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f809 	bl	8007d24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007d12:	e000      	b.n	8007d16 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007d14:	bf00      	nop
    return;
 8007d16:	bf00      	nop
  }
}
 8007d18:	3720      	adds	r7, #32
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	08007d39 	.word	0x08007d39

08007d24 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007d2c:	bf00      	nop
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d44:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f7ff ffe5 	bl	8007d24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d5a:	bf00      	nop
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
	...

08007d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d101      	bne.n	8007d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e0f5      	b.n	8007f62 <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a7c      	ldr	r2, [pc, #496]	@ (8007f6c <HAL_TIM_Base_Init+0x208>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d045      	beq.n	8007e0c <HAL_TIM_Base_Init+0xa8>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d88:	d040      	beq.n	8007e0c <HAL_TIM_Base_Init+0xa8>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a78      	ldr	r2, [pc, #480]	@ (8007f70 <HAL_TIM_Base_Init+0x20c>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d03b      	beq.n	8007e0c <HAL_TIM_Base_Init+0xa8>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a76      	ldr	r2, [pc, #472]	@ (8007f74 <HAL_TIM_Base_Init+0x210>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d036      	beq.n	8007e0c <HAL_TIM_Base_Init+0xa8>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a75      	ldr	r2, [pc, #468]	@ (8007f78 <HAL_TIM_Base_Init+0x214>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d031      	beq.n	8007e0c <HAL_TIM_Base_Init+0xa8>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a73      	ldr	r2, [pc, #460]	@ (8007f7c <HAL_TIM_Base_Init+0x218>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d02c      	beq.n	8007e0c <HAL_TIM_Base_Init+0xa8>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a72      	ldr	r2, [pc, #456]	@ (8007f80 <HAL_TIM_Base_Init+0x21c>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d027      	beq.n	8007e0c <HAL_TIM_Base_Init+0xa8>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a70      	ldr	r2, [pc, #448]	@ (8007f84 <HAL_TIM_Base_Init+0x220>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d022      	beq.n	8007e0c <HAL_TIM_Base_Init+0xa8>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a6f      	ldr	r2, [pc, #444]	@ (8007f88 <HAL_TIM_Base_Init+0x224>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d01d      	beq.n	8007e0c <HAL_TIM_Base_Init+0xa8>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a6d      	ldr	r2, [pc, #436]	@ (8007f8c <HAL_TIM_Base_Init+0x228>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d018      	beq.n	8007e0c <HAL_TIM_Base_Init+0xa8>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a6c      	ldr	r2, [pc, #432]	@ (8007f90 <HAL_TIM_Base_Init+0x22c>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d013      	beq.n	8007e0c <HAL_TIM_Base_Init+0xa8>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a6a      	ldr	r2, [pc, #424]	@ (8007f94 <HAL_TIM_Base_Init+0x230>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d00e      	beq.n	8007e0c <HAL_TIM_Base_Init+0xa8>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a69      	ldr	r2, [pc, #420]	@ (8007f98 <HAL_TIM_Base_Init+0x234>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d009      	beq.n	8007e0c <HAL_TIM_Base_Init+0xa8>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a67      	ldr	r2, [pc, #412]	@ (8007f9c <HAL_TIM_Base_Init+0x238>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d004      	beq.n	8007e0c <HAL_TIM_Base_Init+0xa8>
 8007e02:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8007e06:	4866      	ldr	r0, [pc, #408]	@ (8007fa0 <HAL_TIM_Base_Init+0x23c>)
 8007e08:	f7fc fb3a 	bl	8004480 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d014      	beq.n	8007e3e <HAL_TIM_Base_Init+0xda>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	2b10      	cmp	r3, #16
 8007e1a:	d010      	beq.n	8007e3e <HAL_TIM_Base_Init+0xda>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	2b20      	cmp	r3, #32
 8007e22:	d00c      	beq.n	8007e3e <HAL_TIM_Base_Init+0xda>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	2b40      	cmp	r3, #64	@ 0x40
 8007e2a:	d008      	beq.n	8007e3e <HAL_TIM_Base_Init+0xda>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	2b60      	cmp	r3, #96	@ 0x60
 8007e32:	d004      	beq.n	8007e3e <HAL_TIM_Base_Init+0xda>
 8007e34:	f240 1117 	movw	r1, #279	@ 0x117
 8007e38:	4859      	ldr	r0, [pc, #356]	@ (8007fa0 <HAL_TIM_Base_Init+0x23c>)
 8007e3a:	f7fc fb21 	bl	8004480 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00e      	beq.n	8007e64 <HAL_TIM_Base_Init+0x100>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e4e:	d009      	beq.n	8007e64 <HAL_TIM_Base_Init+0x100>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e58:	d004      	beq.n	8007e64 <HAL_TIM_Base_Init+0x100>
 8007e5a:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8007e5e:	4850      	ldr	r0, [pc, #320]	@ (8007fa0 <HAL_TIM_Base_Init+0x23c>)
 8007e60:	f7fc fb0e 	bl	8004480 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e6c:	d004      	beq.n	8007e78 <HAL_TIM_Base_Init+0x114>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a41      	ldr	r2, [pc, #260]	@ (8007f78 <HAL_TIM_Base_Init+0x214>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d107      	bne.n	8007e88 <HAL_TIM_Base_Init+0x124>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	bf14      	ite	ne
 8007e80:	2301      	movne	r3, #1
 8007e82:	2300      	moveq	r3, #0
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	e00e      	b.n	8007ea6 <HAL_TIM_Base_Init+0x142>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d006      	beq.n	8007e9e <HAL_TIM_Base_Init+0x13a>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e98:	d201      	bcs.n	8007e9e <HAL_TIM_Base_Init+0x13a>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e000      	b.n	8007ea0 <HAL_TIM_Base_Init+0x13c>
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	f003 0301 	and.w	r3, r3, #1
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d104      	bne.n	8007eb4 <HAL_TIM_Base_Init+0x150>
 8007eaa:	f240 1119 	movw	r1, #281	@ 0x119
 8007eae:	483c      	ldr	r0, [pc, #240]	@ (8007fa0 <HAL_TIM_Base_Init+0x23c>)
 8007eb0:	f7fc fae6 	bl	8004480 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d008      	beq.n	8007ece <HAL_TIM_Base_Init+0x16a>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	2b80      	cmp	r3, #128	@ 0x80
 8007ec2:	d004      	beq.n	8007ece <HAL_TIM_Base_Init+0x16a>
 8007ec4:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8007ec8:	4835      	ldr	r0, [pc, #212]	@ (8007fa0 <HAL_TIM_Base_Init+0x23c>)
 8007eca:	f7fc fad9 	bl	8004480 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d106      	bne.n	8007ee8 <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f7fc fe2c 	bl	8004b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2202      	movs	r2, #2
 8007eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	3304      	adds	r3, #4
 8007ef8:	4619      	mov	r1, r3
 8007efa:	4610      	mov	r0, r2
 8007efc:	f001 f900 	bl	8009100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	40010000 	.word	0x40010000
 8007f70:	40000400 	.word	0x40000400
 8007f74:	40000800 	.word	0x40000800
 8007f78:	40000c00 	.word	0x40000c00
 8007f7c:	40001000 	.word	0x40001000
 8007f80:	40001400 	.word	0x40001400
 8007f84:	40010400 	.word	0x40010400
 8007f88:	40014000 	.word	0x40014000
 8007f8c:	40014400 	.word	0x40014400
 8007f90:	40014800 	.word	0x40014800
 8007f94:	40001800 	.word	0x40001800
 8007f98:	40001c00 	.word	0x40001c00
 8007f9c:	40002000 	.word	0x40002000
 8007fa0:	08013f5c 	.word	0x08013f5c

08007fa4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d101      	bne.n	8007fb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e0f5      	b.n	80081a2 <HAL_TIM_PWM_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a7c      	ldr	r2, [pc, #496]	@ (80081ac <HAL_TIM_PWM_Init+0x208>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d045      	beq.n	800804c <HAL_TIM_PWM_Init+0xa8>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fc8:	d040      	beq.n	800804c <HAL_TIM_PWM_Init+0xa8>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a78      	ldr	r2, [pc, #480]	@ (80081b0 <HAL_TIM_PWM_Init+0x20c>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d03b      	beq.n	800804c <HAL_TIM_PWM_Init+0xa8>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a76      	ldr	r2, [pc, #472]	@ (80081b4 <HAL_TIM_PWM_Init+0x210>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d036      	beq.n	800804c <HAL_TIM_PWM_Init+0xa8>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a75      	ldr	r2, [pc, #468]	@ (80081b8 <HAL_TIM_PWM_Init+0x214>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d031      	beq.n	800804c <HAL_TIM_PWM_Init+0xa8>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a73      	ldr	r2, [pc, #460]	@ (80081bc <HAL_TIM_PWM_Init+0x218>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d02c      	beq.n	800804c <HAL_TIM_PWM_Init+0xa8>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a72      	ldr	r2, [pc, #456]	@ (80081c0 <HAL_TIM_PWM_Init+0x21c>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d027      	beq.n	800804c <HAL_TIM_PWM_Init+0xa8>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a70      	ldr	r2, [pc, #448]	@ (80081c4 <HAL_TIM_PWM_Init+0x220>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d022      	beq.n	800804c <HAL_TIM_PWM_Init+0xa8>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a6f      	ldr	r2, [pc, #444]	@ (80081c8 <HAL_TIM_PWM_Init+0x224>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d01d      	beq.n	800804c <HAL_TIM_PWM_Init+0xa8>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a6d      	ldr	r2, [pc, #436]	@ (80081cc <HAL_TIM_PWM_Init+0x228>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d018      	beq.n	800804c <HAL_TIM_PWM_Init+0xa8>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a6c      	ldr	r2, [pc, #432]	@ (80081d0 <HAL_TIM_PWM_Init+0x22c>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d013      	beq.n	800804c <HAL_TIM_PWM_Init+0xa8>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a6a      	ldr	r2, [pc, #424]	@ (80081d4 <HAL_TIM_PWM_Init+0x230>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d00e      	beq.n	800804c <HAL_TIM_PWM_Init+0xa8>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a69      	ldr	r2, [pc, #420]	@ (80081d8 <HAL_TIM_PWM_Init+0x234>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d009      	beq.n	800804c <HAL_TIM_PWM_Init+0xa8>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a67      	ldr	r2, [pc, #412]	@ (80081dc <HAL_TIM_PWM_Init+0x238>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d004      	beq.n	800804c <HAL_TIM_PWM_Init+0xa8>
 8008042:	f240 5133 	movw	r1, #1331	@ 0x533
 8008046:	4866      	ldr	r0, [pc, #408]	@ (80081e0 <HAL_TIM_PWM_Init+0x23c>)
 8008048:	f7fc fa1a 	bl	8004480 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d014      	beq.n	800807e <HAL_TIM_PWM_Init+0xda>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	2b10      	cmp	r3, #16
 800805a:	d010      	beq.n	800807e <HAL_TIM_PWM_Init+0xda>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	2b20      	cmp	r3, #32
 8008062:	d00c      	beq.n	800807e <HAL_TIM_PWM_Init+0xda>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	2b40      	cmp	r3, #64	@ 0x40
 800806a:	d008      	beq.n	800807e <HAL_TIM_PWM_Init+0xda>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	2b60      	cmp	r3, #96	@ 0x60
 8008072:	d004      	beq.n	800807e <HAL_TIM_PWM_Init+0xda>
 8008074:	f240 5134 	movw	r1, #1332	@ 0x534
 8008078:	4859      	ldr	r0, [pc, #356]	@ (80081e0 <HAL_TIM_PWM_Init+0x23c>)
 800807a:	f7fc fa01 	bl	8004480 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00e      	beq.n	80080a4 <HAL_TIM_PWM_Init+0x100>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800808e:	d009      	beq.n	80080a4 <HAL_TIM_PWM_Init+0x100>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008098:	d004      	beq.n	80080a4 <HAL_TIM_PWM_Init+0x100>
 800809a:	f240 5135 	movw	r1, #1333	@ 0x535
 800809e:	4850      	ldr	r0, [pc, #320]	@ (80081e0 <HAL_TIM_PWM_Init+0x23c>)
 80080a0:	f7fc f9ee 	bl	8004480 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080ac:	d004      	beq.n	80080b8 <HAL_TIM_PWM_Init+0x114>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a41      	ldr	r2, [pc, #260]	@ (80081b8 <HAL_TIM_PWM_Init+0x214>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d107      	bne.n	80080c8 <HAL_TIM_PWM_Init+0x124>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	bf14      	ite	ne
 80080c0:	2301      	movne	r3, #1
 80080c2:	2300      	moveq	r3, #0
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	e00e      	b.n	80080e6 <HAL_TIM_PWM_Init+0x142>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d006      	beq.n	80080de <HAL_TIM_PWM_Init+0x13a>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080d8:	d201      	bcs.n	80080de <HAL_TIM_PWM_Init+0x13a>
 80080da:	2301      	movs	r3, #1
 80080dc:	e000      	b.n	80080e0 <HAL_TIM_PWM_Init+0x13c>
 80080de:	2300      	movs	r3, #0
 80080e0:	f003 0301 	and.w	r3, r3, #1
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d104      	bne.n	80080f4 <HAL_TIM_PWM_Init+0x150>
 80080ea:	f240 5136 	movw	r1, #1334	@ 0x536
 80080ee:	483c      	ldr	r0, [pc, #240]	@ (80081e0 <HAL_TIM_PWM_Init+0x23c>)
 80080f0:	f7fc f9c6 	bl	8004480 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	699b      	ldr	r3, [r3, #24]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d008      	beq.n	800810e <HAL_TIM_PWM_Init+0x16a>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	2b80      	cmp	r3, #128	@ 0x80
 8008102:	d004      	beq.n	800810e <HAL_TIM_PWM_Init+0x16a>
 8008104:	f240 5137 	movw	r1, #1335	@ 0x537
 8008108:	4835      	ldr	r0, [pc, #212]	@ (80081e0 <HAL_TIM_PWM_Init+0x23c>)
 800810a:	f7fc f9b9 	bl	8004480 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b00      	cmp	r3, #0
 8008118:	d106      	bne.n	8008128 <HAL_TIM_PWM_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f85e 	bl	80081e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2202      	movs	r2, #2
 800812c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	3304      	adds	r3, #4
 8008138:	4619      	mov	r1, r3
 800813a:	4610      	mov	r0, r2
 800813c:	f000 ffe0 	bl	8009100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	40010000 	.word	0x40010000
 80081b0:	40000400 	.word	0x40000400
 80081b4:	40000800 	.word	0x40000800
 80081b8:	40000c00 	.word	0x40000c00
 80081bc:	40001000 	.word	0x40001000
 80081c0:	40001400 	.word	0x40001400
 80081c4:	40010400 	.word	0x40010400
 80081c8:	40014000 	.word	0x40014000
 80081cc:	40014400 	.word	0x40014400
 80081d0:	40014800 	.word	0x40014800
 80081d4:	40001800 	.word	0x40001800
 80081d8:	40001c00 	.word	0x40001c00
 80081dc:	40002000 	.word	0x40002000
 80081e0:	08013f5c 	.word	0x08013f5c

080081e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80081ec:	bf00      	nop
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a89      	ldr	r2, [pc, #548]	@ (800842c <HAL_TIM_PWM_Start+0x234>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d117      	bne.n	800823c <HAL_TIM_PWM_Start+0x44>
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	f000 80ae 	beq.w	8008370 <HAL_TIM_PWM_Start+0x178>
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	2b04      	cmp	r3, #4
 8008218:	f000 80aa 	beq.w	8008370 <HAL_TIM_PWM_Start+0x178>
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	2b08      	cmp	r3, #8
 8008220:	f000 80a6 	beq.w	8008370 <HAL_TIM_PWM_Start+0x178>
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	2b0c      	cmp	r3, #12
 8008228:	f000 80a2 	beq.w	8008370 <HAL_TIM_PWM_Start+0x178>
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	2b10      	cmp	r3, #16
 8008230:	f000 809e 	beq.w	8008370 <HAL_TIM_PWM_Start+0x178>
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	2b14      	cmp	r3, #20
 8008238:	f000 809a 	beq.w	8008370 <HAL_TIM_PWM_Start+0x178>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008244:	d10f      	bne.n	8008266 <HAL_TIM_PWM_Start+0x6e>
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	f000 8091 	beq.w	8008370 <HAL_TIM_PWM_Start+0x178>
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	2b04      	cmp	r3, #4
 8008252:	f000 808d 	beq.w	8008370 <HAL_TIM_PWM_Start+0x178>
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	2b08      	cmp	r3, #8
 800825a:	f000 8089 	beq.w	8008370 <HAL_TIM_PWM_Start+0x178>
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	2b0c      	cmp	r3, #12
 8008262:	f000 8085 	beq.w	8008370 <HAL_TIM_PWM_Start+0x178>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a71      	ldr	r2, [pc, #452]	@ (8008430 <HAL_TIM_PWM_Start+0x238>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d10b      	bne.n	8008288 <HAL_TIM_PWM_Start+0x90>
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d07c      	beq.n	8008370 <HAL_TIM_PWM_Start+0x178>
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	2b04      	cmp	r3, #4
 800827a:	d079      	beq.n	8008370 <HAL_TIM_PWM_Start+0x178>
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	2b08      	cmp	r3, #8
 8008280:	d076      	beq.n	8008370 <HAL_TIM_PWM_Start+0x178>
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	2b0c      	cmp	r3, #12
 8008286:	d073      	beq.n	8008370 <HAL_TIM_PWM_Start+0x178>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a69      	ldr	r2, [pc, #420]	@ (8008434 <HAL_TIM_PWM_Start+0x23c>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d10b      	bne.n	80082aa <HAL_TIM_PWM_Start+0xb2>
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d06b      	beq.n	8008370 <HAL_TIM_PWM_Start+0x178>
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	2b04      	cmp	r3, #4
 800829c:	d068      	beq.n	8008370 <HAL_TIM_PWM_Start+0x178>
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	2b08      	cmp	r3, #8
 80082a2:	d065      	beq.n	8008370 <HAL_TIM_PWM_Start+0x178>
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	2b0c      	cmp	r3, #12
 80082a8:	d062      	beq.n	8008370 <HAL_TIM_PWM_Start+0x178>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a62      	ldr	r2, [pc, #392]	@ (8008438 <HAL_TIM_PWM_Start+0x240>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d10b      	bne.n	80082cc <HAL_TIM_PWM_Start+0xd4>
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d05a      	beq.n	8008370 <HAL_TIM_PWM_Start+0x178>
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	2b04      	cmp	r3, #4
 80082be:	d057      	beq.n	8008370 <HAL_TIM_PWM_Start+0x178>
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	2b08      	cmp	r3, #8
 80082c4:	d054      	beq.n	8008370 <HAL_TIM_PWM_Start+0x178>
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	2b0c      	cmp	r3, #12
 80082ca:	d051      	beq.n	8008370 <HAL_TIM_PWM_Start+0x178>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a5a      	ldr	r2, [pc, #360]	@ (800843c <HAL_TIM_PWM_Start+0x244>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d111      	bne.n	80082fa <HAL_TIM_PWM_Start+0x102>
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d049      	beq.n	8008370 <HAL_TIM_PWM_Start+0x178>
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	2b04      	cmp	r3, #4
 80082e0:	d046      	beq.n	8008370 <HAL_TIM_PWM_Start+0x178>
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	2b08      	cmp	r3, #8
 80082e6:	d043      	beq.n	8008370 <HAL_TIM_PWM_Start+0x178>
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	2b0c      	cmp	r3, #12
 80082ec:	d040      	beq.n	8008370 <HAL_TIM_PWM_Start+0x178>
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	2b10      	cmp	r3, #16
 80082f2:	d03d      	beq.n	8008370 <HAL_TIM_PWM_Start+0x178>
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	2b14      	cmp	r3, #20
 80082f8:	d03a      	beq.n	8008370 <HAL_TIM_PWM_Start+0x178>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a50      	ldr	r2, [pc, #320]	@ (8008440 <HAL_TIM_PWM_Start+0x248>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d105      	bne.n	8008310 <HAL_TIM_PWM_Start+0x118>
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d032      	beq.n	8008370 <HAL_TIM_PWM_Start+0x178>
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	2b04      	cmp	r3, #4
 800830e:	d02f      	beq.n	8008370 <HAL_TIM_PWM_Start+0x178>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a4b      	ldr	r2, [pc, #300]	@ (8008444 <HAL_TIM_PWM_Start+0x24c>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d102      	bne.n	8008320 <HAL_TIM_PWM_Start+0x128>
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d027      	beq.n	8008370 <HAL_TIM_PWM_Start+0x178>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a48      	ldr	r2, [pc, #288]	@ (8008448 <HAL_TIM_PWM_Start+0x250>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d102      	bne.n	8008330 <HAL_TIM_PWM_Start+0x138>
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d01f      	beq.n	8008370 <HAL_TIM_PWM_Start+0x178>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a45      	ldr	r2, [pc, #276]	@ (800844c <HAL_TIM_PWM_Start+0x254>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d105      	bne.n	8008346 <HAL_TIM_PWM_Start+0x14e>
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d017      	beq.n	8008370 <HAL_TIM_PWM_Start+0x178>
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	2b04      	cmp	r3, #4
 8008344:	d014      	beq.n	8008370 <HAL_TIM_PWM_Start+0x178>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a41      	ldr	r2, [pc, #260]	@ (8008450 <HAL_TIM_PWM_Start+0x258>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d102      	bne.n	8008356 <HAL_TIM_PWM_Start+0x15e>
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00c      	beq.n	8008370 <HAL_TIM_PWM_Start+0x178>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a3e      	ldr	r2, [pc, #248]	@ (8008454 <HAL_TIM_PWM_Start+0x25c>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d102      	bne.n	8008366 <HAL_TIM_PWM_Start+0x16e>
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d004      	beq.n	8008370 <HAL_TIM_PWM_Start+0x178>
 8008366:	f240 51bc 	movw	r1, #1468	@ 0x5bc
 800836a:	483b      	ldr	r0, [pc, #236]	@ (8008458 <HAL_TIM_PWM_Start+0x260>)
 800836c:	f7fc f888 	bl	8004480 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d109      	bne.n	800838a <HAL_TIM_PWM_Start+0x192>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800837c:	b2db      	uxtb	r3, r3
 800837e:	2b01      	cmp	r3, #1
 8008380:	bf14      	ite	ne
 8008382:	2301      	movne	r3, #1
 8008384:	2300      	moveq	r3, #0
 8008386:	b2db      	uxtb	r3, r3
 8008388:	e03c      	b.n	8008404 <HAL_TIM_PWM_Start+0x20c>
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	2b04      	cmp	r3, #4
 800838e:	d109      	bne.n	80083a4 <HAL_TIM_PWM_Start+0x1ac>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008396:	b2db      	uxtb	r3, r3
 8008398:	2b01      	cmp	r3, #1
 800839a:	bf14      	ite	ne
 800839c:	2301      	movne	r3, #1
 800839e:	2300      	moveq	r3, #0
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	e02f      	b.n	8008404 <HAL_TIM_PWM_Start+0x20c>
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	2b08      	cmp	r3, #8
 80083a8:	d109      	bne.n	80083be <HAL_TIM_PWM_Start+0x1c6>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	bf14      	ite	ne
 80083b6:	2301      	movne	r3, #1
 80083b8:	2300      	moveq	r3, #0
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	e022      	b.n	8008404 <HAL_TIM_PWM_Start+0x20c>
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	2b0c      	cmp	r3, #12
 80083c2:	d109      	bne.n	80083d8 <HAL_TIM_PWM_Start+0x1e0>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	bf14      	ite	ne
 80083d0:	2301      	movne	r3, #1
 80083d2:	2300      	moveq	r3, #0
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	e015      	b.n	8008404 <HAL_TIM_PWM_Start+0x20c>
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	2b10      	cmp	r3, #16
 80083dc:	d109      	bne.n	80083f2 <HAL_TIM_PWM_Start+0x1fa>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	bf14      	ite	ne
 80083ea:	2301      	movne	r3, #1
 80083ec:	2300      	moveq	r3, #0
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	e008      	b.n	8008404 <HAL_TIM_PWM_Start+0x20c>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	bf14      	ite	ne
 80083fe:	2301      	movne	r3, #1
 8008400:	2300      	moveq	r3, #0
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b00      	cmp	r3, #0
 8008406:	d001      	beq.n	800840c <HAL_TIM_PWM_Start+0x214>
  {
    return HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	e0aa      	b.n	8008562 <HAL_TIM_PWM_Start+0x36a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d104      	bne.n	800841c <HAL_TIM_PWM_Start+0x224>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2202      	movs	r2, #2
 8008416:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800841a:	e03b      	b.n	8008494 <HAL_TIM_PWM_Start+0x29c>
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	2b04      	cmp	r3, #4
 8008420:	d11c      	bne.n	800845c <HAL_TIM_PWM_Start+0x264>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2202      	movs	r2, #2
 8008426:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800842a:	e033      	b.n	8008494 <HAL_TIM_PWM_Start+0x29c>
 800842c:	40010000 	.word	0x40010000
 8008430:	40000400 	.word	0x40000400
 8008434:	40000800 	.word	0x40000800
 8008438:	40000c00 	.word	0x40000c00
 800843c:	40010400 	.word	0x40010400
 8008440:	40014000 	.word	0x40014000
 8008444:	40014400 	.word	0x40014400
 8008448:	40014800 	.word	0x40014800
 800844c:	40001800 	.word	0x40001800
 8008450:	40001c00 	.word	0x40001c00
 8008454:	40002000 	.word	0x40002000
 8008458:	08013f5c 	.word	0x08013f5c
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	2b08      	cmp	r3, #8
 8008460:	d104      	bne.n	800846c <HAL_TIM_PWM_Start+0x274>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2202      	movs	r2, #2
 8008466:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800846a:	e013      	b.n	8008494 <HAL_TIM_PWM_Start+0x29c>
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	2b0c      	cmp	r3, #12
 8008470:	d104      	bne.n	800847c <HAL_TIM_PWM_Start+0x284>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2202      	movs	r2, #2
 8008476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800847a:	e00b      	b.n	8008494 <HAL_TIM_PWM_Start+0x29c>
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	2b10      	cmp	r3, #16
 8008480:	d104      	bne.n	800848c <HAL_TIM_PWM_Start+0x294>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2202      	movs	r2, #2
 8008486:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800848a:	e003      	b.n	8008494 <HAL_TIM_PWM_Start+0x29c>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2202      	movs	r2, #2
 8008490:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2201      	movs	r2, #1
 800849a:	6839      	ldr	r1, [r7, #0]
 800849c:	4618      	mov	r0, r3
 800849e:	f001 fa5d 	bl	800995c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a31      	ldr	r2, [pc, #196]	@ (800856c <HAL_TIM_PWM_Start+0x374>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d004      	beq.n	80084b6 <HAL_TIM_PWM_Start+0x2be>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a2f      	ldr	r2, [pc, #188]	@ (8008570 <HAL_TIM_PWM_Start+0x378>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d101      	bne.n	80084ba <HAL_TIM_PWM_Start+0x2c2>
 80084b6:	2301      	movs	r3, #1
 80084b8:	e000      	b.n	80084bc <HAL_TIM_PWM_Start+0x2c4>
 80084ba:	2300      	movs	r3, #0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d007      	beq.n	80084d0 <HAL_TIM_PWM_Start+0x2d8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80084ce:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a25      	ldr	r2, [pc, #148]	@ (800856c <HAL_TIM_PWM_Start+0x374>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d022      	beq.n	8008520 <HAL_TIM_PWM_Start+0x328>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084e2:	d01d      	beq.n	8008520 <HAL_TIM_PWM_Start+0x328>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a22      	ldr	r2, [pc, #136]	@ (8008574 <HAL_TIM_PWM_Start+0x37c>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d018      	beq.n	8008520 <HAL_TIM_PWM_Start+0x328>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a21      	ldr	r2, [pc, #132]	@ (8008578 <HAL_TIM_PWM_Start+0x380>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d013      	beq.n	8008520 <HAL_TIM_PWM_Start+0x328>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a1f      	ldr	r2, [pc, #124]	@ (800857c <HAL_TIM_PWM_Start+0x384>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d00e      	beq.n	8008520 <HAL_TIM_PWM_Start+0x328>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a1a      	ldr	r2, [pc, #104]	@ (8008570 <HAL_TIM_PWM_Start+0x378>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d009      	beq.n	8008520 <HAL_TIM_PWM_Start+0x328>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a1b      	ldr	r2, [pc, #108]	@ (8008580 <HAL_TIM_PWM_Start+0x388>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d004      	beq.n	8008520 <HAL_TIM_PWM_Start+0x328>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a1a      	ldr	r2, [pc, #104]	@ (8008584 <HAL_TIM_PWM_Start+0x38c>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d115      	bne.n	800854c <HAL_TIM_PWM_Start+0x354>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	689a      	ldr	r2, [r3, #8]
 8008526:	4b18      	ldr	r3, [pc, #96]	@ (8008588 <HAL_TIM_PWM_Start+0x390>)
 8008528:	4013      	ands	r3, r2
 800852a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2b06      	cmp	r3, #6
 8008530:	d015      	beq.n	800855e <HAL_TIM_PWM_Start+0x366>
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008538:	d011      	beq.n	800855e <HAL_TIM_PWM_Start+0x366>
    {
      __HAL_TIM_ENABLE(htim);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f042 0201 	orr.w	r2, r2, #1
 8008548:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800854a:	e008      	b.n	800855e <HAL_TIM_PWM_Start+0x366>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f042 0201 	orr.w	r2, r2, #1
 800855a:	601a      	str	r2, [r3, #0]
 800855c:	e000      	b.n	8008560 <HAL_TIM_PWM_Start+0x368>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800855e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	40010000 	.word	0x40010000
 8008570:	40010400 	.word	0x40010400
 8008574:	40000400 	.word	0x40000400
 8008578:	40000800 	.word	0x40000800
 800857c:	40000c00 	.word	0x40000c00
 8008580:	40014000 	.word	0x40014000
 8008584:	40001800 	.word	0x40001800
 8008588:	00010007 	.word	0x00010007

0800858c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b086      	sub	sp, #24
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008598:	2300      	movs	r3, #0
 800859a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d016      	beq.n	80085d0 <HAL_TIM_PWM_ConfigChannel+0x44>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2b04      	cmp	r3, #4
 80085a6:	d013      	beq.n	80085d0 <HAL_TIM_PWM_ConfigChannel+0x44>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b08      	cmp	r3, #8
 80085ac:	d010      	beq.n	80085d0 <HAL_TIM_PWM_ConfigChannel+0x44>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2b0c      	cmp	r3, #12
 80085b2:	d00d      	beq.n	80085d0 <HAL_TIM_PWM_ConfigChannel+0x44>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2b10      	cmp	r3, #16
 80085b8:	d00a      	beq.n	80085d0 <HAL_TIM_PWM_ConfigChannel+0x44>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2b14      	cmp	r3, #20
 80085be:	d007      	beq.n	80085d0 <HAL_TIM_PWM_ConfigChannel+0x44>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2b3c      	cmp	r3, #60	@ 0x3c
 80085c4:	d004      	beq.n	80085d0 <HAL_TIM_PWM_ConfigChannel+0x44>
 80085c6:	f241 01b3 	movw	r1, #4275	@ 0x10b3
 80085ca:	4895      	ldr	r0, [pc, #596]	@ (8008820 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80085cc:	f7fb ff58 	bl	8004480 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2b60      	cmp	r3, #96	@ 0x60
 80085d6:	d01c      	beq.n	8008612 <HAL_TIM_PWM_ConfigChannel+0x86>
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2b70      	cmp	r3, #112	@ 0x70
 80085de:	d018      	beq.n	8008612 <HAL_TIM_PWM_ConfigChannel+0x86>
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a8f      	ldr	r2, [pc, #572]	@ (8008824 <HAL_TIM_PWM_ConfigChannel+0x298>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d013      	beq.n	8008612 <HAL_TIM_PWM_ConfigChannel+0x86>
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a8e      	ldr	r2, [pc, #568]	@ (8008828 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d00e      	beq.n	8008612 <HAL_TIM_PWM_ConfigChannel+0x86>
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a8c      	ldr	r2, [pc, #560]	@ (800882c <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d009      	beq.n	8008612 <HAL_TIM_PWM_ConfigChannel+0x86>
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a8b      	ldr	r2, [pc, #556]	@ (8008830 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d004      	beq.n	8008612 <HAL_TIM_PWM_ConfigChannel+0x86>
 8008608:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 800860c:	4884      	ldr	r0, [pc, #528]	@ (8008820 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800860e:	f7fb ff37 	bl	8004480 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d008      	beq.n	800862c <HAL_TIM_PWM_ConfigChannel+0xa0>
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	2b02      	cmp	r3, #2
 8008620:	d004      	beq.n	800862c <HAL_TIM_PWM_ConfigChannel+0xa0>
 8008622:	f241 01b5 	movw	r1, #4277	@ 0x10b5
 8008626:	487e      	ldr	r0, [pc, #504]	@ (8008820 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8008628:	f7fb ff2a 	bl	8004480 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d008      	beq.n	8008646 <HAL_TIM_PWM_ConfigChannel+0xba>
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	691b      	ldr	r3, [r3, #16]
 8008638:	2b04      	cmp	r3, #4
 800863a:	d004      	beq.n	8008646 <HAL_TIM_PWM_ConfigChannel+0xba>
 800863c:	f241 01b6 	movw	r1, #4278	@ 0x10b6
 8008640:	4877      	ldr	r0, [pc, #476]	@ (8008820 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8008642:	f7fb ff1d 	bl	8004480 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800864c:	2b01      	cmp	r3, #1
 800864e:	d101      	bne.n	8008654 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8008650:	2302      	movs	r3, #2
 8008652:	e1f3      	b.n	8008a3c <HAL_TIM_PWM_ConfigChannel+0x4b0>
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2b14      	cmp	r3, #20
 8008660:	f200 81e4 	bhi.w	8008a2c <HAL_TIM_PWM_ConfigChannel+0x4a0>
 8008664:	a201      	add	r2, pc, #4	@ (adr r2, 800866c <HAL_TIM_PWM_ConfigChannel+0xe0>)
 8008666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866a:	bf00      	nop
 800866c:	080086c1 	.word	0x080086c1
 8008670:	08008a2d 	.word	0x08008a2d
 8008674:	08008a2d 	.word	0x08008a2d
 8008678:	08008a2d 	.word	0x08008a2d
 800867c:	08008783 	.word	0x08008783
 8008680:	08008a2d 	.word	0x08008a2d
 8008684:	08008a2d 	.word	0x08008a2d
 8008688:	08008a2d 	.word	0x08008a2d
 800868c:	08008861 	.word	0x08008861
 8008690:	08008a2d 	.word	0x08008a2d
 8008694:	08008a2d 	.word	0x08008a2d
 8008698:	08008a2d 	.word	0x08008a2d
 800869c:	080088e7 	.word	0x080088e7
 80086a0:	08008a2d 	.word	0x08008a2d
 80086a4:	08008a2d 	.word	0x08008a2d
 80086a8:	08008a2d 	.word	0x08008a2d
 80086ac:	0800896f 	.word	0x0800896f
 80086b0:	08008a2d 	.word	0x08008a2d
 80086b4:	08008a2d 	.word	0x08008a2d
 80086b8:	08008a2d 	.word	0x08008a2d
 80086bc:	080089cd 	.word	0x080089cd
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a5b      	ldr	r2, [pc, #364]	@ (8008834 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d03b      	beq.n	8008742 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086d2:	d036      	beq.n	8008742 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a57      	ldr	r2, [pc, #348]	@ (8008838 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d031      	beq.n	8008742 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a56      	ldr	r2, [pc, #344]	@ (800883c <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d02c      	beq.n	8008742 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a54      	ldr	r2, [pc, #336]	@ (8008840 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d027      	beq.n	8008742 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a53      	ldr	r2, [pc, #332]	@ (8008844 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d022      	beq.n	8008742 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a51      	ldr	r2, [pc, #324]	@ (8008848 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d01d      	beq.n	8008742 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a50      	ldr	r2, [pc, #320]	@ (800884c <HAL_TIM_PWM_ConfigChannel+0x2c0>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d018      	beq.n	8008742 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a4e      	ldr	r2, [pc, #312]	@ (8008850 <HAL_TIM_PWM_ConfigChannel+0x2c4>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d013      	beq.n	8008742 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a4d      	ldr	r2, [pc, #308]	@ (8008854 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d00e      	beq.n	8008742 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a4b      	ldr	r2, [pc, #300]	@ (8008858 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d009      	beq.n	8008742 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a4a      	ldr	r2, [pc, #296]	@ (800885c <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d004      	beq.n	8008742 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8008738:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 800873c:	4838      	ldr	r0, [pc, #224]	@ (8008820 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800873e:	f7fb fe9f 	bl	8004480 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	68b9      	ldr	r1, [r7, #8]
 8008748:	4618      	mov	r0, r3
 800874a:	f000 fd85 	bl	8009258 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	699a      	ldr	r2, [r3, #24]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f042 0208 	orr.w	r2, r2, #8
 800875c:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	699a      	ldr	r2, [r3, #24]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f022 0204 	bic.w	r2, r2, #4
 800876c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	6999      	ldr	r1, [r3, #24]
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	691a      	ldr	r2, [r3, #16]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	430a      	orrs	r2, r1
 800877e:	619a      	str	r2, [r3, #24]
      break;
 8008780:	e157      	b.n	8008a32 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a2b      	ldr	r2, [pc, #172]	@ (8008834 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d027      	beq.n	80087dc <HAL_TIM_PWM_ConfigChannel+0x250>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008794:	d022      	beq.n	80087dc <HAL_TIM_PWM_ConfigChannel+0x250>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a27      	ldr	r2, [pc, #156]	@ (8008838 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d01d      	beq.n	80087dc <HAL_TIM_PWM_ConfigChannel+0x250>
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a25      	ldr	r2, [pc, #148]	@ (800883c <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d018      	beq.n	80087dc <HAL_TIM_PWM_ConfigChannel+0x250>
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a24      	ldr	r2, [pc, #144]	@ (8008840 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d013      	beq.n	80087dc <HAL_TIM_PWM_ConfigChannel+0x250>
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a22      	ldr	r2, [pc, #136]	@ (8008844 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d00e      	beq.n	80087dc <HAL_TIM_PWM_ConfigChannel+0x250>
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a21      	ldr	r2, [pc, #132]	@ (8008848 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d009      	beq.n	80087dc <HAL_TIM_PWM_ConfigChannel+0x250>
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a21      	ldr	r2, [pc, #132]	@ (8008854 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d004      	beq.n	80087dc <HAL_TIM_PWM_ConfigChannel+0x250>
 80087d2:	f241 01d1 	movw	r1, #4305	@ 0x10d1
 80087d6:	4812      	ldr	r0, [pc, #72]	@ (8008820 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80087d8:	f7fb fe52 	bl	8004480 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	68b9      	ldr	r1, [r7, #8]
 80087e2:	4618      	mov	r0, r3
 80087e4:	f000 fdd4 	bl	8009390 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	699a      	ldr	r2, [r3, #24]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80087f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	699a      	ldr	r2, [r3, #24]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	6999      	ldr	r1, [r3, #24]
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	021a      	lsls	r2, r3, #8
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	430a      	orrs	r2, r1
 800881a:	619a      	str	r2, [r3, #24]
      break;
 800881c:	e109      	b.n	8008a32 <HAL_TIM_PWM_ConfigChannel+0x4a6>
 800881e:	bf00      	nop
 8008820:	08013f5c 	.word	0x08013f5c
 8008824:	00010040 	.word	0x00010040
 8008828:	00010050 	.word	0x00010050
 800882c:	00010060 	.word	0x00010060
 8008830:	00010070 	.word	0x00010070
 8008834:	40010000 	.word	0x40010000
 8008838:	40000400 	.word	0x40000400
 800883c:	40000800 	.word	0x40000800
 8008840:	40000c00 	.word	0x40000c00
 8008844:	40010400 	.word	0x40010400
 8008848:	40014000 	.word	0x40014000
 800884c:	40014400 	.word	0x40014400
 8008850:	40014800 	.word	0x40014800
 8008854:	40001800 	.word	0x40001800
 8008858:	40001c00 	.word	0x40001c00
 800885c:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a77      	ldr	r2, [pc, #476]	@ (8008a44 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d01d      	beq.n	80088a6 <HAL_TIM_PWM_ConfigChannel+0x31a>
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008872:	d018      	beq.n	80088a6 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a73      	ldr	r2, [pc, #460]	@ (8008a48 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d013      	beq.n	80088a6 <HAL_TIM_PWM_ConfigChannel+0x31a>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a72      	ldr	r2, [pc, #456]	@ (8008a4c <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d00e      	beq.n	80088a6 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a70      	ldr	r2, [pc, #448]	@ (8008a50 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d009      	beq.n	80088a6 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a6f      	ldr	r2, [pc, #444]	@ (8008a54 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d004      	beq.n	80088a6 <HAL_TIM_PWM_ConfigChannel+0x31a>
 800889c:	f241 01e2 	movw	r1, #4322	@ 0x10e2
 80088a0:	486d      	ldr	r0, [pc, #436]	@ (8008a58 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 80088a2:	f7fb fded 	bl	8004480 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	68b9      	ldr	r1, [r7, #8]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f000 fe0f 	bl	80094d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	69da      	ldr	r2, [r3, #28]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f042 0208 	orr.w	r2, r2, #8
 80088c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	69da      	ldr	r2, [r3, #28]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f022 0204 	bic.w	r2, r2, #4
 80088d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	69d9      	ldr	r1, [r3, #28]
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	691a      	ldr	r2, [r3, #16]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	430a      	orrs	r2, r1
 80088e2:	61da      	str	r2, [r3, #28]
      break;
 80088e4:	e0a5      	b.n	8008a32 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a56      	ldr	r2, [pc, #344]	@ (8008a44 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d01d      	beq.n	800892c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088f8:	d018      	beq.n	800892c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a52      	ldr	r2, [pc, #328]	@ (8008a48 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d013      	beq.n	800892c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a50      	ldr	r2, [pc, #320]	@ (8008a4c <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d00e      	beq.n	800892c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a4f      	ldr	r2, [pc, #316]	@ (8008a50 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d009      	beq.n	800892c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a4d      	ldr	r2, [pc, #308]	@ (8008a54 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d004      	beq.n	800892c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8008922:	f241 01f3 	movw	r1, #4339	@ 0x10f3
 8008926:	484c      	ldr	r0, [pc, #304]	@ (8008a58 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8008928:	f7fb fdaa 	bl	8004480 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68b9      	ldr	r1, [r7, #8]
 8008932:	4618      	mov	r0, r3
 8008934:	f000 fe6c 	bl	8009610 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	69da      	ldr	r2, [r3, #28]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008946:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	69da      	ldr	r2, [r3, #28]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008956:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	69d9      	ldr	r1, [r3, #28]
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	021a      	lsls	r2, r3, #8
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	430a      	orrs	r2, r1
 800896a:	61da      	str	r2, [r3, #28]
      break;
 800896c:	e061      	b.n	8008a32 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a34      	ldr	r2, [pc, #208]	@ (8008a44 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d009      	beq.n	800898c <HAL_TIM_PWM_ConfigChannel+0x400>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a35      	ldr	r2, [pc, #212]	@ (8008a54 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d004      	beq.n	800898c <HAL_TIM_PWM_ConfigChannel+0x400>
 8008982:	f241 1104 	movw	r1, #4356	@ 0x1104
 8008986:	4834      	ldr	r0, [pc, #208]	@ (8008a58 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8008988:	f7fb fd7a 	bl	8004480 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	68b9      	ldr	r1, [r7, #8]
 8008992:	4618      	mov	r0, r3
 8008994:	f000 fea2 	bl	80096dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f042 0208 	orr.w	r2, r2, #8
 80089a6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f022 0204 	bic.w	r2, r2, #4
 80089b6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	691a      	ldr	r2, [r3, #16]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	430a      	orrs	r2, r1
 80089c8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80089ca:	e032      	b.n	8008a32 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a1c      	ldr	r2, [pc, #112]	@ (8008a44 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d009      	beq.n	80089ea <HAL_TIM_PWM_ConfigChannel+0x45e>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a1e      	ldr	r2, [pc, #120]	@ (8008a54 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d004      	beq.n	80089ea <HAL_TIM_PWM_ConfigChannel+0x45e>
 80089e0:	f241 1115 	movw	r1, #4373	@ 0x1115
 80089e4:	481c      	ldr	r0, [pc, #112]	@ (8008a58 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 80089e6:	f7fb fd4b 	bl	8004480 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	68b9      	ldr	r1, [r7, #8]
 80089f0:	4618      	mov	r0, r3
 80089f2:	f000 fec5 	bl	8009780 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a04:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a14:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	021a      	lsls	r2, r3, #8
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	430a      	orrs	r2, r1
 8008a28:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008a2a:	e002      	b.n	8008a32 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    default:
      status = HAL_ERROR;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	75fb      	strb	r3, [r7, #23]
      break;
 8008a30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3718      	adds	r7, #24
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	40010000 	.word	0x40010000
 8008a48:	40000400 	.word	0x40000400
 8008a4c:	40000800 	.word	0x40000800
 8008a50:	40000c00 	.word	0x40000c00
 8008a54:	40010400 	.word	0x40010400
 8008a58:	08013f5c 	.word	0x08013f5c

08008a5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a66:	2300      	movs	r3, #0
 8008a68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d101      	bne.n	8008a78 <HAL_TIM_ConfigClockSource+0x1c>
 8008a74:	2302      	movs	r3, #2
 8008a76:	e332      	b.n	80090de <HAL_TIM_ConfigClockSource+0x682>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2202      	movs	r2, #2
 8008a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a90:	d029      	beq.n	8008ae6 <HAL_TIM_ConfigClockSource+0x8a>
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2b70      	cmp	r3, #112	@ 0x70
 8008a98:	d025      	beq.n	8008ae6 <HAL_TIM_ConfigClockSource+0x8a>
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008aa2:	d020      	beq.n	8008ae6 <HAL_TIM_ConfigClockSource+0x8a>
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2b40      	cmp	r3, #64	@ 0x40
 8008aaa:	d01c      	beq.n	8008ae6 <HAL_TIM_ConfigClockSource+0x8a>
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2b50      	cmp	r3, #80	@ 0x50
 8008ab2:	d018      	beq.n	8008ae6 <HAL_TIM_ConfigClockSource+0x8a>
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2b60      	cmp	r3, #96	@ 0x60
 8008aba:	d014      	beq.n	8008ae6 <HAL_TIM_ConfigClockSource+0x8a>
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d010      	beq.n	8008ae6 <HAL_TIM_ConfigClockSource+0x8a>
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2b10      	cmp	r3, #16
 8008aca:	d00c      	beq.n	8008ae6 <HAL_TIM_ConfigClockSource+0x8a>
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2b20      	cmp	r3, #32
 8008ad2:	d008      	beq.n	8008ae6 <HAL_TIM_ConfigClockSource+0x8a>
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2b30      	cmp	r3, #48	@ 0x30
 8008ada:	d004      	beq.n	8008ae6 <HAL_TIM_ConfigClockSource+0x8a>
 8008adc:	f241 5151 	movw	r1, #5457	@ 0x1551
 8008ae0:	4893      	ldr	r0, [pc, #588]	@ (8008d30 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008ae2:	f7fb fccd 	bl	8004480 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008aee:	68ba      	ldr	r2, [r7, #8]
 8008af0:	4b90      	ldr	r3, [pc, #576]	@ (8008d34 <HAL_TIM_ConfigClockSource+0x2d8>)
 8008af2:	4013      	ands	r3, r2
 8008af4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008afc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68ba      	ldr	r2, [r7, #8]
 8008b04:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b0e:	f000 812d 	beq.w	8008d6c <HAL_TIM_ConfigClockSource+0x310>
 8008b12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b16:	f200 82d5 	bhi.w	80090c4 <HAL_TIM_ConfigClockSource+0x668>
 8008b1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b1e:	d02e      	beq.n	8008b7e <HAL_TIM_ConfigClockSource+0x122>
 8008b20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b24:	f200 82ce 	bhi.w	80090c4 <HAL_TIM_ConfigClockSource+0x668>
 8008b28:	2b70      	cmp	r3, #112	@ 0x70
 8008b2a:	f000 8082 	beq.w	8008c32 <HAL_TIM_ConfigClockSource+0x1d6>
 8008b2e:	2b70      	cmp	r3, #112	@ 0x70
 8008b30:	f200 82c8 	bhi.w	80090c4 <HAL_TIM_ConfigClockSource+0x668>
 8008b34:	2b60      	cmp	r3, #96	@ 0x60
 8008b36:	f000 81e0 	beq.w	8008efa <HAL_TIM_ConfigClockSource+0x49e>
 8008b3a:	2b60      	cmp	r3, #96	@ 0x60
 8008b3c:	f200 82c2 	bhi.w	80090c4 <HAL_TIM_ConfigClockSource+0x668>
 8008b40:	2b50      	cmp	r3, #80	@ 0x50
 8008b42:	f000 8184 	beq.w	8008e4e <HAL_TIM_ConfigClockSource+0x3f2>
 8008b46:	2b50      	cmp	r3, #80	@ 0x50
 8008b48:	f200 82bc 	bhi.w	80090c4 <HAL_TIM_ConfigClockSource+0x668>
 8008b4c:	2b40      	cmp	r3, #64	@ 0x40
 8008b4e:	f000 8237 	beq.w	8008fc0 <HAL_TIM_ConfigClockSource+0x564>
 8008b52:	2b40      	cmp	r3, #64	@ 0x40
 8008b54:	f200 82b6 	bhi.w	80090c4 <HAL_TIM_ConfigClockSource+0x668>
 8008b58:	2b30      	cmp	r3, #48	@ 0x30
 8008b5a:	f000 8287 	beq.w	800906c <HAL_TIM_ConfigClockSource+0x610>
 8008b5e:	2b30      	cmp	r3, #48	@ 0x30
 8008b60:	f200 82b0 	bhi.w	80090c4 <HAL_TIM_ConfigClockSource+0x668>
 8008b64:	2b20      	cmp	r3, #32
 8008b66:	f000 8281 	beq.w	800906c <HAL_TIM_ConfigClockSource+0x610>
 8008b6a:	2b20      	cmp	r3, #32
 8008b6c:	f200 82aa 	bhi.w	80090c4 <HAL_TIM_ConfigClockSource+0x668>
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f000 827b 	beq.w	800906c <HAL_TIM_ConfigClockSource+0x610>
 8008b76:	2b10      	cmp	r3, #16
 8008b78:	f000 8278 	beq.w	800906c <HAL_TIM_ConfigClockSource+0x610>
 8008b7c:	e2a2      	b.n	80090c4 <HAL_TIM_ConfigClockSource+0x668>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a6d      	ldr	r2, [pc, #436]	@ (8008d38 <HAL_TIM_ConfigClockSource+0x2dc>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	f000 82a0 	beq.w	80090ca <HAL_TIM_ConfigClockSource+0x66e>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b92:	f000 829a 	beq.w	80090ca <HAL_TIM_ConfigClockSource+0x66e>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a68      	ldr	r2, [pc, #416]	@ (8008d3c <HAL_TIM_ConfigClockSource+0x2e0>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	f000 8294 	beq.w	80090ca <HAL_TIM_ConfigClockSource+0x66e>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a66      	ldr	r2, [pc, #408]	@ (8008d40 <HAL_TIM_ConfigClockSource+0x2e4>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	f000 828e 	beq.w	80090ca <HAL_TIM_ConfigClockSource+0x66e>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a64      	ldr	r2, [pc, #400]	@ (8008d44 <HAL_TIM_ConfigClockSource+0x2e8>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	f000 8288 	beq.w	80090ca <HAL_TIM_ConfigClockSource+0x66e>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a62      	ldr	r2, [pc, #392]	@ (8008d48 <HAL_TIM_ConfigClockSource+0x2ec>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	f000 8282 	beq.w	80090ca <HAL_TIM_ConfigClockSource+0x66e>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a60      	ldr	r2, [pc, #384]	@ (8008d4c <HAL_TIM_ConfigClockSource+0x2f0>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	f000 827c 	beq.w	80090ca <HAL_TIM_ConfigClockSource+0x66e>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a5e      	ldr	r2, [pc, #376]	@ (8008d50 <HAL_TIM_ConfigClockSource+0x2f4>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	f000 8276 	beq.w	80090ca <HAL_TIM_ConfigClockSource+0x66e>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a5c      	ldr	r2, [pc, #368]	@ (8008d54 <HAL_TIM_ConfigClockSource+0x2f8>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	f000 8270 	beq.w	80090ca <HAL_TIM_ConfigClockSource+0x66e>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a5a      	ldr	r2, [pc, #360]	@ (8008d58 <HAL_TIM_ConfigClockSource+0x2fc>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	f000 826a 	beq.w	80090ca <HAL_TIM_ConfigClockSource+0x66e>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a58      	ldr	r2, [pc, #352]	@ (8008d5c <HAL_TIM_ConfigClockSource+0x300>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	f000 8264 	beq.w	80090ca <HAL_TIM_ConfigClockSource+0x66e>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a56      	ldr	r2, [pc, #344]	@ (8008d60 <HAL_TIM_ConfigClockSource+0x304>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	f000 825e 	beq.w	80090ca <HAL_TIM_ConfigClockSource+0x66e>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a54      	ldr	r2, [pc, #336]	@ (8008d64 <HAL_TIM_ConfigClockSource+0x308>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	f000 8258 	beq.w	80090ca <HAL_TIM_ConfigClockSource+0x66e>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a52      	ldr	r2, [pc, #328]	@ (8008d68 <HAL_TIM_ConfigClockSource+0x30c>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	f000 8252 	beq.w	80090ca <HAL_TIM_ConfigClockSource+0x66e>
 8008c26:	f241 515d 	movw	r1, #5469	@ 0x155d
 8008c2a:	4841      	ldr	r0, [pc, #260]	@ (8008d30 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008c2c:	f7fb fc28 	bl	8004480 <assert_failed>
      break;
 8008c30:	e24b      	b.n	80090ca <HAL_TIM_ConfigClockSource+0x66e>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a40      	ldr	r2, [pc, #256]	@ (8008d38 <HAL_TIM_ConfigClockSource+0x2dc>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d027      	beq.n	8008c8c <HAL_TIM_ConfigClockSource+0x230>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c44:	d022      	beq.n	8008c8c <HAL_TIM_ConfigClockSource+0x230>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a3c      	ldr	r2, [pc, #240]	@ (8008d3c <HAL_TIM_ConfigClockSource+0x2e0>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d01d      	beq.n	8008c8c <HAL_TIM_ConfigClockSource+0x230>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a3a      	ldr	r2, [pc, #232]	@ (8008d40 <HAL_TIM_ConfigClockSource+0x2e4>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d018      	beq.n	8008c8c <HAL_TIM_ConfigClockSource+0x230>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a39      	ldr	r2, [pc, #228]	@ (8008d44 <HAL_TIM_ConfigClockSource+0x2e8>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d013      	beq.n	8008c8c <HAL_TIM_ConfigClockSource+0x230>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a39      	ldr	r2, [pc, #228]	@ (8008d50 <HAL_TIM_ConfigClockSource+0x2f4>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d00e      	beq.n	8008c8c <HAL_TIM_ConfigClockSource+0x230>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a38      	ldr	r2, [pc, #224]	@ (8008d54 <HAL_TIM_ConfigClockSource+0x2f8>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d009      	beq.n	8008c8c <HAL_TIM_ConfigClockSource+0x230>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a38      	ldr	r2, [pc, #224]	@ (8008d60 <HAL_TIM_ConfigClockSource+0x304>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d004      	beq.n	8008c8c <HAL_TIM_ConfigClockSource+0x230>
 8008c82:	f241 5164 	movw	r1, #5476	@ 0x1564
 8008c86:	482a      	ldr	r0, [pc, #168]	@ (8008d30 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008c88:	f7fb fbfa 	bl	8004480 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d013      	beq.n	8008cbc <HAL_TIM_ConfigClockSource+0x260>
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c9c:	d00e      	beq.n	8008cbc <HAL_TIM_ConfigClockSource+0x260>
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ca6:	d009      	beq.n	8008cbc <HAL_TIM_ConfigClockSource+0x260>
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008cb0:	d004      	beq.n	8008cbc <HAL_TIM_ConfigClockSource+0x260>
 8008cb2:	f241 5167 	movw	r1, #5479	@ 0x1567
 8008cb6:	481e      	ldr	r0, [pc, #120]	@ (8008d30 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008cb8:	f7fb fbe2 	bl	8004480 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008cc4:	d014      	beq.n	8008cf0 <HAL_TIM_ConfigClockSource+0x294>
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d010      	beq.n	8008cf0 <HAL_TIM_ConfigClockSource+0x294>
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00c      	beq.n	8008cf0 <HAL_TIM_ConfigClockSource+0x294>
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	d008      	beq.n	8008cf0 <HAL_TIM_ConfigClockSource+0x294>
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	2b0a      	cmp	r3, #10
 8008ce4:	d004      	beq.n	8008cf0 <HAL_TIM_ConfigClockSource+0x294>
 8008ce6:	f241 5168 	movw	r1, #5480	@ 0x1568
 8008cea:	4811      	ldr	r0, [pc, #68]	@ (8008d30 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008cec:	f7fb fbc8 	bl	8004480 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	2b0f      	cmp	r3, #15
 8008cf6:	d904      	bls.n	8008d02 <HAL_TIM_ConfigClockSource+0x2a6>
 8008cf8:	f241 5169 	movw	r1, #5481	@ 0x1569
 8008cfc:	480c      	ldr	r0, [pc, #48]	@ (8008d30 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008cfe:	f7fb fbbf 	bl	8004480 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008d12:	f000 fe03 	bl	800991c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008d24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	68ba      	ldr	r2, [r7, #8]
 8008d2c:	609a      	str	r2, [r3, #8]
      break;
 8008d2e:	e1cd      	b.n	80090cc <HAL_TIM_ConfigClockSource+0x670>
 8008d30:	08013f5c 	.word	0x08013f5c
 8008d34:	fffeff88 	.word	0xfffeff88
 8008d38:	40010000 	.word	0x40010000
 8008d3c:	40000400 	.word	0x40000400
 8008d40:	40000800 	.word	0x40000800
 8008d44:	40000c00 	.word	0x40000c00
 8008d48:	40001000 	.word	0x40001000
 8008d4c:	40001400 	.word	0x40001400
 8008d50:	40010400 	.word	0x40010400
 8008d54:	40014000 	.word	0x40014000
 8008d58:	40014400 	.word	0x40014400
 8008d5c:	40014800 	.word	0x40014800
 8008d60:	40001800 	.word	0x40001800
 8008d64:	40001c00 	.word	0x40001c00
 8008d68:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a8d      	ldr	r2, [pc, #564]	@ (8008fa8 <HAL_TIM_ConfigClockSource+0x54c>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d01d      	beq.n	8008db2 <HAL_TIM_ConfigClockSource+0x356>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d7e:	d018      	beq.n	8008db2 <HAL_TIM_ConfigClockSource+0x356>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a89      	ldr	r2, [pc, #548]	@ (8008fac <HAL_TIM_ConfigClockSource+0x550>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d013      	beq.n	8008db2 <HAL_TIM_ConfigClockSource+0x356>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a88      	ldr	r2, [pc, #544]	@ (8008fb0 <HAL_TIM_ConfigClockSource+0x554>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d00e      	beq.n	8008db2 <HAL_TIM_ConfigClockSource+0x356>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a86      	ldr	r2, [pc, #536]	@ (8008fb4 <HAL_TIM_ConfigClockSource+0x558>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d009      	beq.n	8008db2 <HAL_TIM_ConfigClockSource+0x356>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a85      	ldr	r2, [pc, #532]	@ (8008fb8 <HAL_TIM_ConfigClockSource+0x55c>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d004      	beq.n	8008db2 <HAL_TIM_ConfigClockSource+0x356>
 8008da8:	f241 517c 	movw	r1, #5500	@ 0x157c
 8008dac:	4883      	ldr	r0, [pc, #524]	@ (8008fbc <HAL_TIM_ConfigClockSource+0x560>)
 8008dae:	f7fb fb67 	bl	8004480 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d013      	beq.n	8008de2 <HAL_TIM_ConfigClockSource+0x386>
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dc2:	d00e      	beq.n	8008de2 <HAL_TIM_ConfigClockSource+0x386>
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008dcc:	d009      	beq.n	8008de2 <HAL_TIM_ConfigClockSource+0x386>
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008dd6:	d004      	beq.n	8008de2 <HAL_TIM_ConfigClockSource+0x386>
 8008dd8:	f241 517f 	movw	r1, #5503	@ 0x157f
 8008ddc:	4877      	ldr	r0, [pc, #476]	@ (8008fbc <HAL_TIM_ConfigClockSource+0x560>)
 8008dde:	f7fb fb4f 	bl	8004480 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008dea:	d014      	beq.n	8008e16 <HAL_TIM_ConfigClockSource+0x3ba>
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d010      	beq.n	8008e16 <HAL_TIM_ConfigClockSource+0x3ba>
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00c      	beq.n	8008e16 <HAL_TIM_ConfigClockSource+0x3ba>
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	d008      	beq.n	8008e16 <HAL_TIM_ConfigClockSource+0x3ba>
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	2b0a      	cmp	r3, #10
 8008e0a:	d004      	beq.n	8008e16 <HAL_TIM_ConfigClockSource+0x3ba>
 8008e0c:	f44f 51ac 	mov.w	r1, #5504	@ 0x1580
 8008e10:	486a      	ldr	r0, [pc, #424]	@ (8008fbc <HAL_TIM_ConfigClockSource+0x560>)
 8008e12:	f7fb fb35 	bl	8004480 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	2b0f      	cmp	r3, #15
 8008e1c:	d904      	bls.n	8008e28 <HAL_TIM_ConfigClockSource+0x3cc>
 8008e1e:	f241 5181 	movw	r1, #5505	@ 0x1581
 8008e22:	4866      	ldr	r0, [pc, #408]	@ (8008fbc <HAL_TIM_ConfigClockSource+0x560>)
 8008e24:	f7fb fb2c 	bl	8004480 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008e38:	f000 fd70 	bl	800991c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	689a      	ldr	r2, [r3, #8]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008e4a:	609a      	str	r2, [r3, #8]
      break;
 8008e4c:	e13e      	b.n	80090cc <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a55      	ldr	r2, [pc, #340]	@ (8008fa8 <HAL_TIM_ConfigClockSource+0x54c>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d01d      	beq.n	8008e94 <HAL_TIM_ConfigClockSource+0x438>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e60:	d018      	beq.n	8008e94 <HAL_TIM_ConfigClockSource+0x438>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a51      	ldr	r2, [pc, #324]	@ (8008fac <HAL_TIM_ConfigClockSource+0x550>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d013      	beq.n	8008e94 <HAL_TIM_ConfigClockSource+0x438>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a4f      	ldr	r2, [pc, #316]	@ (8008fb0 <HAL_TIM_ConfigClockSource+0x554>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d00e      	beq.n	8008e94 <HAL_TIM_ConfigClockSource+0x438>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a4e      	ldr	r2, [pc, #312]	@ (8008fb4 <HAL_TIM_ConfigClockSource+0x558>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d009      	beq.n	8008e94 <HAL_TIM_ConfigClockSource+0x438>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a4c      	ldr	r2, [pc, #304]	@ (8008fb8 <HAL_TIM_ConfigClockSource+0x55c>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d004      	beq.n	8008e94 <HAL_TIM_ConfigClockSource+0x438>
 8008e8a:	f241 5190 	movw	r1, #5520	@ 0x1590
 8008e8e:	484b      	ldr	r0, [pc, #300]	@ (8008fbc <HAL_TIM_ConfigClockSource+0x560>)
 8008e90:	f7fb faf6 	bl	8004480 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e9c:	d014      	beq.n	8008ec8 <HAL_TIM_ConfigClockSource+0x46c>
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d010      	beq.n	8008ec8 <HAL_TIM_ConfigClockSource+0x46c>
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d00c      	beq.n	8008ec8 <HAL_TIM_ConfigClockSource+0x46c>
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	2b02      	cmp	r3, #2
 8008eb4:	d008      	beq.n	8008ec8 <HAL_TIM_ConfigClockSource+0x46c>
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	2b0a      	cmp	r3, #10
 8008ebc:	d004      	beq.n	8008ec8 <HAL_TIM_ConfigClockSource+0x46c>
 8008ebe:	f241 5193 	movw	r1, #5523	@ 0x1593
 8008ec2:	483e      	ldr	r0, [pc, #248]	@ (8008fbc <HAL_TIM_ConfigClockSource+0x560>)
 8008ec4:	f7fb fadc 	bl	8004480 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	2b0f      	cmp	r3, #15
 8008ece:	d904      	bls.n	8008eda <HAL_TIM_ConfigClockSource+0x47e>
 8008ed0:	f241 5194 	movw	r1, #5524	@ 0x1594
 8008ed4:	4839      	ldr	r0, [pc, #228]	@ (8008fbc <HAL_TIM_ConfigClockSource+0x560>)
 8008ed6:	f7fb fad3 	bl	8004480 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	f000 fc9e 	bl	8009828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2150      	movs	r1, #80	@ 0x50
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f000 fcf7 	bl	80098e6 <TIM_ITRx_SetConfig>
      break;
 8008ef8:	e0e8      	b.n	80090cc <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a2a      	ldr	r2, [pc, #168]	@ (8008fa8 <HAL_TIM_ConfigClockSource+0x54c>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d01d      	beq.n	8008f40 <HAL_TIM_ConfigClockSource+0x4e4>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f0c:	d018      	beq.n	8008f40 <HAL_TIM_ConfigClockSource+0x4e4>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a26      	ldr	r2, [pc, #152]	@ (8008fac <HAL_TIM_ConfigClockSource+0x550>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d013      	beq.n	8008f40 <HAL_TIM_ConfigClockSource+0x4e4>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a24      	ldr	r2, [pc, #144]	@ (8008fb0 <HAL_TIM_ConfigClockSource+0x554>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d00e      	beq.n	8008f40 <HAL_TIM_ConfigClockSource+0x4e4>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a23      	ldr	r2, [pc, #140]	@ (8008fb4 <HAL_TIM_ConfigClockSource+0x558>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d009      	beq.n	8008f40 <HAL_TIM_ConfigClockSource+0x4e4>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a21      	ldr	r2, [pc, #132]	@ (8008fb8 <HAL_TIM_ConfigClockSource+0x55c>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d004      	beq.n	8008f40 <HAL_TIM_ConfigClockSource+0x4e4>
 8008f36:	f44f 51ad 	mov.w	r1, #5536	@ 0x15a0
 8008f3a:	4820      	ldr	r0, [pc, #128]	@ (8008fbc <HAL_TIM_ConfigClockSource+0x560>)
 8008f3c:	f7fb faa0 	bl	8004480 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f48:	d014      	beq.n	8008f74 <HAL_TIM_ConfigClockSource+0x518>
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d010      	beq.n	8008f74 <HAL_TIM_ConfigClockSource+0x518>
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00c      	beq.n	8008f74 <HAL_TIM_ConfigClockSource+0x518>
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	d008      	beq.n	8008f74 <HAL_TIM_ConfigClockSource+0x518>
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	2b0a      	cmp	r3, #10
 8008f68:	d004      	beq.n	8008f74 <HAL_TIM_ConfigClockSource+0x518>
 8008f6a:	f241 51a3 	movw	r1, #5539	@ 0x15a3
 8008f6e:	4813      	ldr	r0, [pc, #76]	@ (8008fbc <HAL_TIM_ConfigClockSource+0x560>)
 8008f70:	f7fb fa86 	bl	8004480 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	2b0f      	cmp	r3, #15
 8008f7a:	d904      	bls.n	8008f86 <HAL_TIM_ConfigClockSource+0x52a>
 8008f7c:	f241 51a4 	movw	r1, #5540	@ 0x15a4
 8008f80:	480e      	ldr	r0, [pc, #56]	@ (8008fbc <HAL_TIM_ConfigClockSource+0x560>)
 8008f82:	f7fb fa7d 	bl	8004480 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f92:	461a      	mov	r2, r3
 8008f94:	f000 fc77 	bl	8009886 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2160      	movs	r1, #96	@ 0x60
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f000 fca1 	bl	80098e6 <TIM_ITRx_SetConfig>
      break;
 8008fa4:	e092      	b.n	80090cc <HAL_TIM_ConfigClockSource+0x670>
 8008fa6:	bf00      	nop
 8008fa8:	40010000 	.word	0x40010000
 8008fac:	40000400 	.word	0x40000400
 8008fb0:	40000800 	.word	0x40000800
 8008fb4:	40000c00 	.word	0x40000c00
 8008fb8:	40010400 	.word	0x40010400
 8008fbc:	08013f5c 	.word	0x08013f5c
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a48      	ldr	r2, [pc, #288]	@ (80090e8 <HAL_TIM_ConfigClockSource+0x68c>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d01d      	beq.n	8009006 <HAL_TIM_ConfigClockSource+0x5aa>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fd2:	d018      	beq.n	8009006 <HAL_TIM_ConfigClockSource+0x5aa>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a44      	ldr	r2, [pc, #272]	@ (80090ec <HAL_TIM_ConfigClockSource+0x690>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d013      	beq.n	8009006 <HAL_TIM_ConfigClockSource+0x5aa>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a43      	ldr	r2, [pc, #268]	@ (80090f0 <HAL_TIM_ConfigClockSource+0x694>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d00e      	beq.n	8009006 <HAL_TIM_ConfigClockSource+0x5aa>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a41      	ldr	r2, [pc, #260]	@ (80090f4 <HAL_TIM_ConfigClockSource+0x698>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d009      	beq.n	8009006 <HAL_TIM_ConfigClockSource+0x5aa>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a40      	ldr	r2, [pc, #256]	@ (80090f8 <HAL_TIM_ConfigClockSource+0x69c>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d004      	beq.n	8009006 <HAL_TIM_ConfigClockSource+0x5aa>
 8008ffc:	f241 51b0 	movw	r1, #5552	@ 0x15b0
 8009000:	483e      	ldr	r0, [pc, #248]	@ (80090fc <HAL_TIM_ConfigClockSource+0x6a0>)
 8009002:	f7fb fa3d 	bl	8004480 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800900e:	d014      	beq.n	800903a <HAL_TIM_ConfigClockSource+0x5de>
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d010      	beq.n	800903a <HAL_TIM_ConfigClockSource+0x5de>
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00c      	beq.n	800903a <HAL_TIM_ConfigClockSource+0x5de>
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	2b02      	cmp	r3, #2
 8009026:	d008      	beq.n	800903a <HAL_TIM_ConfigClockSource+0x5de>
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	2b0a      	cmp	r3, #10
 800902e:	d004      	beq.n	800903a <HAL_TIM_ConfigClockSource+0x5de>
 8009030:	f241 51b3 	movw	r1, #5555	@ 0x15b3
 8009034:	4831      	ldr	r0, [pc, #196]	@ (80090fc <HAL_TIM_ConfigClockSource+0x6a0>)
 8009036:	f7fb fa23 	bl	8004480 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	2b0f      	cmp	r3, #15
 8009040:	d904      	bls.n	800904c <HAL_TIM_ConfigClockSource+0x5f0>
 8009042:	f241 51b4 	movw	r1, #5556	@ 0x15b4
 8009046:	482d      	ldr	r0, [pc, #180]	@ (80090fc <HAL_TIM_ConfigClockSource+0x6a0>)
 8009048:	f7fb fa1a 	bl	8004480 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009058:	461a      	mov	r2, r3
 800905a:	f000 fbe5 	bl	8009828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2140      	movs	r1, #64	@ 0x40
 8009064:	4618      	mov	r0, r3
 8009066:	f000 fc3e 	bl	80098e6 <TIM_ITRx_SetConfig>
      break;
 800906a:	e02f      	b.n	80090cc <HAL_TIM_ConfigClockSource+0x670>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a1d      	ldr	r2, [pc, #116]	@ (80090e8 <HAL_TIM_ConfigClockSource+0x68c>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d01d      	beq.n	80090b2 <HAL_TIM_ConfigClockSource+0x656>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800907e:	d018      	beq.n	80090b2 <HAL_TIM_ConfigClockSource+0x656>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a19      	ldr	r2, [pc, #100]	@ (80090ec <HAL_TIM_ConfigClockSource+0x690>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d013      	beq.n	80090b2 <HAL_TIM_ConfigClockSource+0x656>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a18      	ldr	r2, [pc, #96]	@ (80090f0 <HAL_TIM_ConfigClockSource+0x694>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d00e      	beq.n	80090b2 <HAL_TIM_ConfigClockSource+0x656>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a16      	ldr	r2, [pc, #88]	@ (80090f4 <HAL_TIM_ConfigClockSource+0x698>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d009      	beq.n	80090b2 <HAL_TIM_ConfigClockSource+0x656>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a15      	ldr	r2, [pc, #84]	@ (80090f8 <HAL_TIM_ConfigClockSource+0x69c>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d004      	beq.n	80090b2 <HAL_TIM_ConfigClockSource+0x656>
 80090a8:	f241 51c3 	movw	r1, #5571	@ 0x15c3
 80090ac:	4813      	ldr	r0, [pc, #76]	@ (80090fc <HAL_TIM_ConfigClockSource+0x6a0>)
 80090ae:	f7fb f9e7 	bl	8004480 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4619      	mov	r1, r3
 80090bc:	4610      	mov	r0, r2
 80090be:	f000 fc12 	bl	80098e6 <TIM_ITRx_SetConfig>
      break;
 80090c2:	e003      	b.n	80090cc <HAL_TIM_ConfigClockSource+0x670>
    }

    default:
      status = HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	73fb      	strb	r3, [r7, #15]
      break;
 80090c8:	e000      	b.n	80090cc <HAL_TIM_ConfigClockSource+0x670>
      break;
 80090ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80090dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	40010000 	.word	0x40010000
 80090ec:	40000400 	.word	0x40000400
 80090f0:	40000800 	.word	0x40000800
 80090f4:	40000c00 	.word	0x40000c00
 80090f8:	40010400 	.word	0x40010400
 80090fc:	08013f5c 	.word	0x08013f5c

08009100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009100:	b480      	push	{r7}
 8009102:	b085      	sub	sp, #20
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a46      	ldr	r2, [pc, #280]	@ (800922c <TIM_Base_SetConfig+0x12c>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d013      	beq.n	8009140 <TIM_Base_SetConfig+0x40>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800911e:	d00f      	beq.n	8009140 <TIM_Base_SetConfig+0x40>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a43      	ldr	r2, [pc, #268]	@ (8009230 <TIM_Base_SetConfig+0x130>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d00b      	beq.n	8009140 <TIM_Base_SetConfig+0x40>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a42      	ldr	r2, [pc, #264]	@ (8009234 <TIM_Base_SetConfig+0x134>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d007      	beq.n	8009140 <TIM_Base_SetConfig+0x40>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4a41      	ldr	r2, [pc, #260]	@ (8009238 <TIM_Base_SetConfig+0x138>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d003      	beq.n	8009140 <TIM_Base_SetConfig+0x40>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4a40      	ldr	r2, [pc, #256]	@ (800923c <TIM_Base_SetConfig+0x13c>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d108      	bne.n	8009152 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	4313      	orrs	r3, r2
 8009150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4a35      	ldr	r2, [pc, #212]	@ (800922c <TIM_Base_SetConfig+0x12c>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d02b      	beq.n	80091b2 <TIM_Base_SetConfig+0xb2>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009160:	d027      	beq.n	80091b2 <TIM_Base_SetConfig+0xb2>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4a32      	ldr	r2, [pc, #200]	@ (8009230 <TIM_Base_SetConfig+0x130>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d023      	beq.n	80091b2 <TIM_Base_SetConfig+0xb2>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a31      	ldr	r2, [pc, #196]	@ (8009234 <TIM_Base_SetConfig+0x134>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d01f      	beq.n	80091b2 <TIM_Base_SetConfig+0xb2>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4a30      	ldr	r2, [pc, #192]	@ (8009238 <TIM_Base_SetConfig+0x138>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d01b      	beq.n	80091b2 <TIM_Base_SetConfig+0xb2>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4a2f      	ldr	r2, [pc, #188]	@ (800923c <TIM_Base_SetConfig+0x13c>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d017      	beq.n	80091b2 <TIM_Base_SetConfig+0xb2>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4a2e      	ldr	r2, [pc, #184]	@ (8009240 <TIM_Base_SetConfig+0x140>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d013      	beq.n	80091b2 <TIM_Base_SetConfig+0xb2>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4a2d      	ldr	r2, [pc, #180]	@ (8009244 <TIM_Base_SetConfig+0x144>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d00f      	beq.n	80091b2 <TIM_Base_SetConfig+0xb2>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4a2c      	ldr	r2, [pc, #176]	@ (8009248 <TIM_Base_SetConfig+0x148>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d00b      	beq.n	80091b2 <TIM_Base_SetConfig+0xb2>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4a2b      	ldr	r2, [pc, #172]	@ (800924c <TIM_Base_SetConfig+0x14c>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d007      	beq.n	80091b2 <TIM_Base_SetConfig+0xb2>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4a2a      	ldr	r2, [pc, #168]	@ (8009250 <TIM_Base_SetConfig+0x150>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d003      	beq.n	80091b2 <TIM_Base_SetConfig+0xb2>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4a29      	ldr	r2, [pc, #164]	@ (8009254 <TIM_Base_SetConfig+0x154>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d108      	bne.n	80091c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	695b      	ldr	r3, [r3, #20]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	689a      	ldr	r2, [r3, #8]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4a10      	ldr	r2, [pc, #64]	@ (800922c <TIM_Base_SetConfig+0x12c>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d003      	beq.n	80091f8 <TIM_Base_SetConfig+0xf8>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a12      	ldr	r2, [pc, #72]	@ (800923c <TIM_Base_SetConfig+0x13c>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d103      	bne.n	8009200 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	691a      	ldr	r2, [r3, #16]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	691b      	ldr	r3, [r3, #16]
 800920a:	f003 0301 	and.w	r3, r3, #1
 800920e:	2b01      	cmp	r3, #1
 8009210:	d105      	bne.n	800921e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	f023 0201 	bic.w	r2, r3, #1
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	611a      	str	r2, [r3, #16]
  }
}
 800921e:	bf00      	nop
 8009220:	3714      	adds	r7, #20
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop
 800922c:	40010000 	.word	0x40010000
 8009230:	40000400 	.word	0x40000400
 8009234:	40000800 	.word	0x40000800
 8009238:	40000c00 	.word	0x40000c00
 800923c:	40010400 	.word	0x40010400
 8009240:	40014000 	.word	0x40014000
 8009244:	40014400 	.word	0x40014400
 8009248:	40014800 	.word	0x40014800
 800924c:	40001800 	.word	0x40001800
 8009250:	40001c00 	.word	0x40001c00
 8009254:	40002000 	.word	0x40002000

08009258 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b086      	sub	sp, #24
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a1b      	ldr	r3, [r3, #32]
 8009266:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6a1b      	ldr	r3, [r3, #32]
 800926c:	f023 0201 	bic.w	r2, r3, #1
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	699b      	ldr	r3, [r3, #24]
 800927e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	4b3f      	ldr	r3, [pc, #252]	@ (8009380 <TIM_OC1_SetConfig+0x128>)
 8009284:	4013      	ands	r3, r2
 8009286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f023 0303 	bic.w	r3, r3, #3
 800928e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	4313      	orrs	r3, r2
 8009298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	f023 0302 	bic.w	r3, r3, #2
 80092a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	697a      	ldr	r2, [r7, #20]
 80092a8:	4313      	orrs	r3, r2
 80092aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4a35      	ldr	r2, [pc, #212]	@ (8009384 <TIM_OC1_SetConfig+0x12c>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d003      	beq.n	80092bc <TIM_OC1_SetConfig+0x64>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a34      	ldr	r2, [pc, #208]	@ (8009388 <TIM_OC1_SetConfig+0x130>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d119      	bne.n	80092f0 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d008      	beq.n	80092d6 <TIM_OC1_SetConfig+0x7e>
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	2b08      	cmp	r3, #8
 80092ca:	d004      	beq.n	80092d6 <TIM_OC1_SetConfig+0x7e>
 80092cc:	f641 3169 	movw	r1, #7017	@ 0x1b69
 80092d0:	482e      	ldr	r0, [pc, #184]	@ (800938c <TIM_OC1_SetConfig+0x134>)
 80092d2:	f7fb f8d5 	bl	8004480 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	f023 0308 	bic.w	r3, r3, #8
 80092dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	697a      	ldr	r2, [r7, #20]
 80092e4:	4313      	orrs	r3, r2
 80092e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	f023 0304 	bic.w	r3, r3, #4
 80092ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4a24      	ldr	r2, [pc, #144]	@ (8009384 <TIM_OC1_SetConfig+0x12c>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d003      	beq.n	8009300 <TIM_OC1_SetConfig+0xa8>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	4a23      	ldr	r2, [pc, #140]	@ (8009388 <TIM_OC1_SetConfig+0x130>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d12d      	bne.n	800935c <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	699b      	ldr	r3, [r3, #24]
 8009304:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009308:	d008      	beq.n	800931c <TIM_OC1_SetConfig+0xc4>
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	699b      	ldr	r3, [r3, #24]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d004      	beq.n	800931c <TIM_OC1_SetConfig+0xc4>
 8009312:	f641 3176 	movw	r1, #7030	@ 0x1b76
 8009316:	481d      	ldr	r0, [pc, #116]	@ (800938c <TIM_OC1_SetConfig+0x134>)
 8009318:	f7fb f8b2 	bl	8004480 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	695b      	ldr	r3, [r3, #20]
 8009320:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009324:	d008      	beq.n	8009338 <TIM_OC1_SetConfig+0xe0>
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	695b      	ldr	r3, [r3, #20]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d004      	beq.n	8009338 <TIM_OC1_SetConfig+0xe0>
 800932e:	f641 3177 	movw	r1, #7031	@ 0x1b77
 8009332:	4816      	ldr	r0, [pc, #88]	@ (800938c <TIM_OC1_SetConfig+0x134>)
 8009334:	f7fb f8a4 	bl	8004480 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800933e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009346:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	695b      	ldr	r3, [r3, #20]
 800934c:	693a      	ldr	r2, [r7, #16]
 800934e:	4313      	orrs	r3, r2
 8009350:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	699b      	ldr	r3, [r3, #24]
 8009356:	693a      	ldr	r2, [r7, #16]
 8009358:	4313      	orrs	r3, r2
 800935a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	693a      	ldr	r2, [r7, #16]
 8009360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	68fa      	ldr	r2, [r7, #12]
 8009366:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	685a      	ldr	r2, [r3, #4]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	697a      	ldr	r2, [r7, #20]
 8009374:	621a      	str	r2, [r3, #32]
}
 8009376:	bf00      	nop
 8009378:	3718      	adds	r7, #24
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	fffeff8f 	.word	0xfffeff8f
 8009384:	40010000 	.word	0x40010000
 8009388:	40010400 	.word	0x40010400
 800938c:	08013f5c 	.word	0x08013f5c

08009390 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a1b      	ldr	r3, [r3, #32]
 800939e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6a1b      	ldr	r3, [r3, #32]
 80093a4:	f023 0210 	bic.w	r2, r3, #16
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	699b      	ldr	r3, [r3, #24]
 80093b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	4b41      	ldr	r3, [pc, #260]	@ (80094c0 <TIM_OC2_SetConfig+0x130>)
 80093bc:	4013      	ands	r3, r2
 80093be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	021b      	lsls	r3, r3, #8
 80093ce:	68fa      	ldr	r2, [r7, #12]
 80093d0:	4313      	orrs	r3, r2
 80093d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	f023 0320 	bic.w	r3, r3, #32
 80093da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	011b      	lsls	r3, r3, #4
 80093e2:	697a      	ldr	r2, [r7, #20]
 80093e4:	4313      	orrs	r3, r2
 80093e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	4a36      	ldr	r2, [pc, #216]	@ (80094c4 <TIM_OC2_SetConfig+0x134>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d003      	beq.n	80093f8 <TIM_OC2_SetConfig+0x68>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	4a35      	ldr	r2, [pc, #212]	@ (80094c8 <TIM_OC2_SetConfig+0x138>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d11a      	bne.n	800942e <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d008      	beq.n	8009412 <TIM_OC2_SetConfig+0x82>
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	2b08      	cmp	r3, #8
 8009406:	d004      	beq.n	8009412 <TIM_OC2_SetConfig+0x82>
 8009408:	f641 31b5 	movw	r1, #7093	@ 0x1bb5
 800940c:	482f      	ldr	r0, [pc, #188]	@ (80094cc <TIM_OC2_SetConfig+0x13c>)
 800940e:	f7fb f837 	bl	8004480 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009418:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	011b      	lsls	r3, r3, #4
 8009420:	697a      	ldr	r2, [r7, #20]
 8009422:	4313      	orrs	r3, r2
 8009424:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800942c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4a24      	ldr	r2, [pc, #144]	@ (80094c4 <TIM_OC2_SetConfig+0x134>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d003      	beq.n	800943e <TIM_OC2_SetConfig+0xae>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a23      	ldr	r2, [pc, #140]	@ (80094c8 <TIM_OC2_SetConfig+0x138>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d12f      	bne.n	800949e <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	699b      	ldr	r3, [r3, #24]
 8009442:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009446:	d008      	beq.n	800945a <TIM_OC2_SetConfig+0xca>
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	699b      	ldr	r3, [r3, #24]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d004      	beq.n	800945a <TIM_OC2_SetConfig+0xca>
 8009450:	f641 31c2 	movw	r1, #7106	@ 0x1bc2
 8009454:	481d      	ldr	r0, [pc, #116]	@ (80094cc <TIM_OC2_SetConfig+0x13c>)
 8009456:	f7fb f813 	bl	8004480 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	695b      	ldr	r3, [r3, #20]
 800945e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009462:	d008      	beq.n	8009476 <TIM_OC2_SetConfig+0xe6>
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	695b      	ldr	r3, [r3, #20]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d004      	beq.n	8009476 <TIM_OC2_SetConfig+0xe6>
 800946c:	f641 31c3 	movw	r1, #7107	@ 0x1bc3
 8009470:	4816      	ldr	r0, [pc, #88]	@ (80094cc <TIM_OC2_SetConfig+0x13c>)
 8009472:	f7fb f805 	bl	8004480 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800947c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009484:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	695b      	ldr	r3, [r3, #20]
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	693a      	ldr	r2, [r7, #16]
 800948e:	4313      	orrs	r3, r2
 8009490:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	699b      	ldr	r3, [r3, #24]
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	693a      	ldr	r2, [r7, #16]
 800949a:	4313      	orrs	r3, r2
 800949c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	693a      	ldr	r2, [r7, #16]
 80094a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	685a      	ldr	r2, [r3, #4]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	697a      	ldr	r2, [r7, #20]
 80094b6:	621a      	str	r2, [r3, #32]
}
 80094b8:	bf00      	nop
 80094ba:	3718      	adds	r7, #24
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	feff8fff 	.word	0xfeff8fff
 80094c4:	40010000 	.word	0x40010000
 80094c8:	40010400 	.word	0x40010400
 80094cc:	08013f5c 	.word	0x08013f5c

080094d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b086      	sub	sp, #24
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6a1b      	ldr	r3, [r3, #32]
 80094de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6a1b      	ldr	r3, [r3, #32]
 80094e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	69db      	ldr	r3, [r3, #28]
 80094f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	4b41      	ldr	r3, [pc, #260]	@ (8009600 <TIM_OC3_SetConfig+0x130>)
 80094fc:	4013      	ands	r3, r2
 80094fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f023 0303 	bic.w	r3, r3, #3
 8009506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	4313      	orrs	r3, r2
 8009510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009518:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	021b      	lsls	r3, r3, #8
 8009520:	697a      	ldr	r2, [r7, #20]
 8009522:	4313      	orrs	r3, r2
 8009524:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	4a36      	ldr	r2, [pc, #216]	@ (8009604 <TIM_OC3_SetConfig+0x134>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d003      	beq.n	8009536 <TIM_OC3_SetConfig+0x66>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4a35      	ldr	r2, [pc, #212]	@ (8009608 <TIM_OC3_SetConfig+0x138>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d11a      	bne.n	800956c <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d008      	beq.n	8009550 <TIM_OC3_SetConfig+0x80>
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	2b08      	cmp	r3, #8
 8009544:	d004      	beq.n	8009550 <TIM_OC3_SetConfig+0x80>
 8009546:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 800954a:	4830      	ldr	r0, [pc, #192]	@ (800960c <TIM_OC3_SetConfig+0x13c>)
 800954c:	f7fa ff98 	bl	8004480 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009556:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	021b      	lsls	r3, r3, #8
 800955e:	697a      	ldr	r2, [r7, #20]
 8009560:	4313      	orrs	r3, r2
 8009562:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800956a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	4a25      	ldr	r2, [pc, #148]	@ (8009604 <TIM_OC3_SetConfig+0x134>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d003      	beq.n	800957c <TIM_OC3_SetConfig+0xac>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4a24      	ldr	r2, [pc, #144]	@ (8009608 <TIM_OC3_SetConfig+0x138>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d12f      	bne.n	80095dc <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	699b      	ldr	r3, [r3, #24]
 8009580:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009584:	d008      	beq.n	8009598 <TIM_OC3_SetConfig+0xc8>
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	699b      	ldr	r3, [r3, #24]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d004      	beq.n	8009598 <TIM_OC3_SetConfig+0xc8>
 800958e:	f641 410d 	movw	r1, #7181	@ 0x1c0d
 8009592:	481e      	ldr	r0, [pc, #120]	@ (800960c <TIM_OC3_SetConfig+0x13c>)
 8009594:	f7fa ff74 	bl	8004480 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	695b      	ldr	r3, [r3, #20]
 800959c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095a0:	d008      	beq.n	80095b4 <TIM_OC3_SetConfig+0xe4>
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	695b      	ldr	r3, [r3, #20]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d004      	beq.n	80095b4 <TIM_OC3_SetConfig+0xe4>
 80095aa:	f641 410e 	movw	r1, #7182	@ 0x1c0e
 80095ae:	4817      	ldr	r0, [pc, #92]	@ (800960c <TIM_OC3_SetConfig+0x13c>)
 80095b0:	f7fa ff66 	bl	8004480 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80095ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80095c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	695b      	ldr	r3, [r3, #20]
 80095c8:	011b      	lsls	r3, r3, #4
 80095ca:	693a      	ldr	r2, [r7, #16]
 80095cc:	4313      	orrs	r3, r2
 80095ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	699b      	ldr	r3, [r3, #24]
 80095d4:	011b      	lsls	r3, r3, #4
 80095d6:	693a      	ldr	r2, [r7, #16]
 80095d8:	4313      	orrs	r3, r2
 80095da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	693a      	ldr	r2, [r7, #16]
 80095e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	685a      	ldr	r2, [r3, #4]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	697a      	ldr	r2, [r7, #20]
 80095f4:	621a      	str	r2, [r3, #32]
}
 80095f6:	bf00      	nop
 80095f8:	3718      	adds	r7, #24
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	fffeff8f 	.word	0xfffeff8f
 8009604:	40010000 	.word	0x40010000
 8009608:	40010400 	.word	0x40010400
 800960c:	08013f5c 	.word	0x08013f5c

08009610 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b086      	sub	sp, #24
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a1b      	ldr	r3, [r3, #32]
 800961e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6a1b      	ldr	r3, [r3, #32]
 8009624:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	69db      	ldr	r3, [r3, #28]
 8009636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009638:	68fa      	ldr	r2, [r7, #12]
 800963a:	4b24      	ldr	r3, [pc, #144]	@ (80096cc <TIM_OC4_SetConfig+0xbc>)
 800963c:	4013      	ands	r3, r2
 800963e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	021b      	lsls	r3, r3, #8
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	4313      	orrs	r3, r2
 8009652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800965a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	031b      	lsls	r3, r3, #12
 8009662:	693a      	ldr	r2, [r7, #16]
 8009664:	4313      	orrs	r3, r2
 8009666:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4a19      	ldr	r2, [pc, #100]	@ (80096d0 <TIM_OC4_SetConfig+0xc0>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d003      	beq.n	8009678 <TIM_OC4_SetConfig+0x68>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4a18      	ldr	r2, [pc, #96]	@ (80096d4 <TIM_OC4_SetConfig+0xc4>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d117      	bne.n	80096a8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	695b      	ldr	r3, [r3, #20]
 800967c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009680:	d008      	beq.n	8009694 <TIM_OC4_SetConfig+0x84>
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	695b      	ldr	r3, [r3, #20]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d004      	beq.n	8009694 <TIM_OC4_SetConfig+0x84>
 800968a:	f641 414d 	movw	r1, #7245	@ 0x1c4d
 800968e:	4812      	ldr	r0, [pc, #72]	@ (80096d8 <TIM_OC4_SetConfig+0xc8>)
 8009690:	f7fa fef6 	bl	8004480 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800969a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	695b      	ldr	r3, [r3, #20]
 80096a0:	019b      	lsls	r3, r3, #6
 80096a2:	697a      	ldr	r2, [r7, #20]
 80096a4:	4313      	orrs	r3, r2
 80096a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	697a      	ldr	r2, [r7, #20]
 80096ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	685a      	ldr	r2, [r3, #4]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	693a      	ldr	r2, [r7, #16]
 80096c0:	621a      	str	r2, [r3, #32]
}
 80096c2:	bf00      	nop
 80096c4:	3718      	adds	r7, #24
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	feff8fff 	.word	0xfeff8fff
 80096d0:	40010000 	.word	0x40010000
 80096d4:	40010400 	.word	0x40010400
 80096d8:	08013f5c 	.word	0x08013f5c

080096dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80096dc:	b480      	push	{r7}
 80096de:	b087      	sub	sp, #28
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6a1b      	ldr	r3, [r3, #32]
 80096ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6a1b      	ldr	r3, [r3, #32]
 80096f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009704:	68fa      	ldr	r2, [r7, #12]
 8009706:	4b1b      	ldr	r3, [pc, #108]	@ (8009774 <TIM_OC5_SetConfig+0x98>)
 8009708:	4013      	ands	r3, r2
 800970a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	68fa      	ldr	r2, [r7, #12]
 8009712:	4313      	orrs	r3, r2
 8009714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800971c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	041b      	lsls	r3, r3, #16
 8009724:	693a      	ldr	r2, [r7, #16]
 8009726:	4313      	orrs	r3, r2
 8009728:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4a12      	ldr	r2, [pc, #72]	@ (8009778 <TIM_OC5_SetConfig+0x9c>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d003      	beq.n	800973a <TIM_OC5_SetConfig+0x5e>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4a11      	ldr	r2, [pc, #68]	@ (800977c <TIM_OC5_SetConfig+0xa0>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d109      	bne.n	800974e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009740:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	695b      	ldr	r3, [r3, #20]
 8009746:	021b      	lsls	r3, r3, #8
 8009748:	697a      	ldr	r2, [r7, #20]
 800974a:	4313      	orrs	r3, r2
 800974c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	697a      	ldr	r2, [r7, #20]
 8009752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	685a      	ldr	r2, [r3, #4]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	693a      	ldr	r2, [r7, #16]
 8009766:	621a      	str	r2, [r3, #32]
}
 8009768:	bf00      	nop
 800976a:	371c      	adds	r7, #28
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr
 8009774:	fffeff8f 	.word	0xfffeff8f
 8009778:	40010000 	.word	0x40010000
 800977c:	40010400 	.word	0x40010400

08009780 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009780:	b480      	push	{r7}
 8009782:	b087      	sub	sp, #28
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a1b      	ldr	r3, [r3, #32]
 800978e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6a1b      	ldr	r3, [r3, #32]
 8009794:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	4b1c      	ldr	r3, [pc, #112]	@ (800981c <TIM_OC6_SetConfig+0x9c>)
 80097ac:	4013      	ands	r3, r2
 80097ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	021b      	lsls	r3, r3, #8
 80097b6:	68fa      	ldr	r2, [r7, #12]
 80097b8:	4313      	orrs	r3, r2
 80097ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80097c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	051b      	lsls	r3, r3, #20
 80097ca:	693a      	ldr	r2, [r7, #16]
 80097cc:	4313      	orrs	r3, r2
 80097ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4a13      	ldr	r2, [pc, #76]	@ (8009820 <TIM_OC6_SetConfig+0xa0>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d003      	beq.n	80097e0 <TIM_OC6_SetConfig+0x60>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4a12      	ldr	r2, [pc, #72]	@ (8009824 <TIM_OC6_SetConfig+0xa4>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d109      	bne.n	80097f4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80097e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	695b      	ldr	r3, [r3, #20]
 80097ec:	029b      	lsls	r3, r3, #10
 80097ee:	697a      	ldr	r2, [r7, #20]
 80097f0:	4313      	orrs	r3, r2
 80097f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	697a      	ldr	r2, [r7, #20]
 80097f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	685a      	ldr	r2, [r3, #4]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	693a      	ldr	r2, [r7, #16]
 800980c:	621a      	str	r2, [r3, #32]
}
 800980e:	bf00      	nop
 8009810:	371c      	adds	r7, #28
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	feff8fff 	.word	0xfeff8fff
 8009820:	40010000 	.word	0x40010000
 8009824:	40010400 	.word	0x40010400

08009828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009828:	b480      	push	{r7}
 800982a:	b087      	sub	sp, #28
 800982c:	af00      	add	r7, sp, #0
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	60b9      	str	r1, [r7, #8]
 8009832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6a1b      	ldr	r3, [r3, #32]
 8009838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6a1b      	ldr	r3, [r3, #32]
 800983e:	f023 0201 	bic.w	r2, r3, #1
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	699b      	ldr	r3, [r3, #24]
 800984a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	011b      	lsls	r3, r3, #4
 8009858:	693a      	ldr	r2, [r7, #16]
 800985a:	4313      	orrs	r3, r2
 800985c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	f023 030a 	bic.w	r3, r3, #10
 8009864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009866:	697a      	ldr	r2, [r7, #20]
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	4313      	orrs	r3, r2
 800986c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	693a      	ldr	r2, [r7, #16]
 8009872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	697a      	ldr	r2, [r7, #20]
 8009878:	621a      	str	r2, [r3, #32]
}
 800987a:	bf00      	nop
 800987c:	371c      	adds	r7, #28
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr

08009886 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009886:	b480      	push	{r7}
 8009888:	b087      	sub	sp, #28
 800988a:	af00      	add	r7, sp, #0
 800988c:	60f8      	str	r0, [r7, #12]
 800988e:	60b9      	str	r1, [r7, #8]
 8009890:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6a1b      	ldr	r3, [r3, #32]
 8009896:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6a1b      	ldr	r3, [r3, #32]
 800989c:	f023 0210 	bic.w	r2, r3, #16
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80098b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	031b      	lsls	r3, r3, #12
 80098b6:	693a      	ldr	r2, [r7, #16]
 80098b8:	4313      	orrs	r3, r2
 80098ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80098c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	011b      	lsls	r3, r3, #4
 80098c8:	697a      	ldr	r2, [r7, #20]
 80098ca:	4313      	orrs	r3, r2
 80098cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	693a      	ldr	r2, [r7, #16]
 80098d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	697a      	ldr	r2, [r7, #20]
 80098d8:	621a      	str	r2, [r3, #32]
}
 80098da:	bf00      	nop
 80098dc:	371c      	adds	r7, #28
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr

080098e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80098e6:	b480      	push	{r7}
 80098e8:	b085      	sub	sp, #20
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
 80098ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80098fe:	683a      	ldr	r2, [r7, #0]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	4313      	orrs	r3, r2
 8009904:	f043 0307 	orr.w	r3, r3, #7
 8009908:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	609a      	str	r2, [r3, #8]
}
 8009910:	bf00      	nop
 8009912:	3714      	adds	r7, #20
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800991c:	b480      	push	{r7}
 800991e:	b087      	sub	sp, #28
 8009920:	af00      	add	r7, sp, #0
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	607a      	str	r2, [r7, #4]
 8009928:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009936:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	021a      	lsls	r2, r3, #8
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	431a      	orrs	r2, r3
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	4313      	orrs	r3, r2
 8009944:	697a      	ldr	r2, [r7, #20]
 8009946:	4313      	orrs	r3, r2
 8009948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	697a      	ldr	r2, [r7, #20]
 800994e:	609a      	str	r2, [r3, #8]
}
 8009950:	bf00      	nop
 8009952:	371c      	adds	r7, #28
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b086      	sub	sp, #24
 8009960:	af00      	add	r7, sp, #0
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	4a35      	ldr	r2, [pc, #212]	@ (8009a40 <TIM_CCxChannelCmd+0xe4>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d030      	beq.n	80099d2 <TIM_CCxChannelCmd+0x76>
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009976:	d02c      	beq.n	80099d2 <TIM_CCxChannelCmd+0x76>
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	4a32      	ldr	r2, [pc, #200]	@ (8009a44 <TIM_CCxChannelCmd+0xe8>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d028      	beq.n	80099d2 <TIM_CCxChannelCmd+0x76>
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	4a31      	ldr	r2, [pc, #196]	@ (8009a48 <TIM_CCxChannelCmd+0xec>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d024      	beq.n	80099d2 <TIM_CCxChannelCmd+0x76>
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	4a30      	ldr	r2, [pc, #192]	@ (8009a4c <TIM_CCxChannelCmd+0xf0>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d020      	beq.n	80099d2 <TIM_CCxChannelCmd+0x76>
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	4a2f      	ldr	r2, [pc, #188]	@ (8009a50 <TIM_CCxChannelCmd+0xf4>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d01c      	beq.n	80099d2 <TIM_CCxChannelCmd+0x76>
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	4a2e      	ldr	r2, [pc, #184]	@ (8009a54 <TIM_CCxChannelCmd+0xf8>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d018      	beq.n	80099d2 <TIM_CCxChannelCmd+0x76>
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	4a2d      	ldr	r2, [pc, #180]	@ (8009a58 <TIM_CCxChannelCmd+0xfc>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d014      	beq.n	80099d2 <TIM_CCxChannelCmd+0x76>
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	4a2c      	ldr	r2, [pc, #176]	@ (8009a5c <TIM_CCxChannelCmd+0x100>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d010      	beq.n	80099d2 <TIM_CCxChannelCmd+0x76>
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	4a2b      	ldr	r2, [pc, #172]	@ (8009a60 <TIM_CCxChannelCmd+0x104>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d00c      	beq.n	80099d2 <TIM_CCxChannelCmd+0x76>
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	4a2a      	ldr	r2, [pc, #168]	@ (8009a64 <TIM_CCxChannelCmd+0x108>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d008      	beq.n	80099d2 <TIM_CCxChannelCmd+0x76>
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	4a29      	ldr	r2, [pc, #164]	@ (8009a68 <TIM_CCxChannelCmd+0x10c>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d004      	beq.n	80099d2 <TIM_CCxChannelCmd+0x76>
 80099c8:	f641 61a7 	movw	r1, #7847	@ 0x1ea7
 80099cc:	4827      	ldr	r0, [pc, #156]	@ (8009a6c <TIM_CCxChannelCmd+0x110>)
 80099ce:	f7fa fd57 	bl	8004480 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d016      	beq.n	8009a06 <TIM_CCxChannelCmd+0xaa>
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	2b04      	cmp	r3, #4
 80099dc:	d013      	beq.n	8009a06 <TIM_CCxChannelCmd+0xaa>
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	2b08      	cmp	r3, #8
 80099e2:	d010      	beq.n	8009a06 <TIM_CCxChannelCmd+0xaa>
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	2b0c      	cmp	r3, #12
 80099e8:	d00d      	beq.n	8009a06 <TIM_CCxChannelCmd+0xaa>
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	2b10      	cmp	r3, #16
 80099ee:	d00a      	beq.n	8009a06 <TIM_CCxChannelCmd+0xaa>
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	2b14      	cmp	r3, #20
 80099f4:	d007      	beq.n	8009a06 <TIM_CCxChannelCmd+0xaa>
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	2b3c      	cmp	r3, #60	@ 0x3c
 80099fa:	d004      	beq.n	8009a06 <TIM_CCxChannelCmd+0xaa>
 80099fc:	f641 61a8 	movw	r1, #7848	@ 0x1ea8
 8009a00:	481a      	ldr	r0, [pc, #104]	@ (8009a6c <TIM_CCxChannelCmd+0x110>)
 8009a02:	f7fa fd3d 	bl	8004480 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	f003 031f 	and.w	r3, r3, #31
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a12:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6a1a      	ldr	r2, [r3, #32]
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	43db      	mvns	r3, r3
 8009a1c:	401a      	ands	r2, r3
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	6a1a      	ldr	r2, [r3, #32]
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	f003 031f 	and.w	r3, r3, #31
 8009a2c:	6879      	ldr	r1, [r7, #4]
 8009a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8009a32:	431a      	orrs	r2, r3
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	621a      	str	r2, [r3, #32]
}
 8009a38:	bf00      	nop
 8009a3a:	3718      	adds	r7, #24
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	40010000 	.word	0x40010000
 8009a44:	40000400 	.word	0x40000400
 8009a48:	40000800 	.word	0x40000800
 8009a4c:	40000c00 	.word	0x40000c00
 8009a50:	40010400 	.word	0x40010400
 8009a54:	40014000 	.word	0x40014000
 8009a58:	40014400 	.word	0x40014400
 8009a5c:	40014800 	.word	0x40014800
 8009a60:	40001800 	.word	0x40001800
 8009a64:	40001c00 	.word	0x40001c00
 8009a68:	40002000 	.word	0x40002000
 8009a6c:	08013f5c 	.word	0x08013f5c

08009a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a32      	ldr	r2, [pc, #200]	@ (8009b48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d027      	beq.n	8009ad4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a8c:	d022      	beq.n	8009ad4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a2e      	ldr	r2, [pc, #184]	@ (8009b4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d01d      	beq.n	8009ad4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a2c      	ldr	r2, [pc, #176]	@ (8009b50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d018      	beq.n	8009ad4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a2b      	ldr	r2, [pc, #172]	@ (8009b54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d013      	beq.n	8009ad4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a29      	ldr	r2, [pc, #164]	@ (8009b58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d00e      	beq.n	8009ad4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a28      	ldr	r2, [pc, #160]	@ (8009b5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d009      	beq.n	8009ad4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a26      	ldr	r2, [pc, #152]	@ (8009b60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d004      	beq.n	8009ad4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009aca:	f240 71ab 	movw	r1, #1963	@ 0x7ab
 8009ace:	4825      	ldr	r0, [pc, #148]	@ (8009b64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009ad0:	f7fa fcd6 	bl	8004480 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d020      	beq.n	8009b1e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2b10      	cmp	r3, #16
 8009ae2:	d01c      	beq.n	8009b1e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2b20      	cmp	r3, #32
 8009aea:	d018      	beq.n	8009b1e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b30      	cmp	r3, #48	@ 0x30
 8009af2:	d014      	beq.n	8009b1e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2b40      	cmp	r3, #64	@ 0x40
 8009afa:	d010      	beq.n	8009b1e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2b50      	cmp	r3, #80	@ 0x50
 8009b02:	d00c      	beq.n	8009b1e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2b60      	cmp	r3, #96	@ 0x60
 8009b0a:	d008      	beq.n	8009b1e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2b70      	cmp	r3, #112	@ 0x70
 8009b12:	d004      	beq.n	8009b1e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009b14:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 8009b18:	4812      	ldr	r0, [pc, #72]	@ (8009b64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009b1a:	f7fa fcb1 	bl	8004480 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	689b      	ldr	r3, [r3, #8]
 8009b22:	2b80      	cmp	r3, #128	@ 0x80
 8009b24:	d008      	beq.n	8009b38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d004      	beq.n	8009b38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b2e:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 8009b32:	480c      	ldr	r0, [pc, #48]	@ (8009b64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009b34:	f7fa fca4 	bl	8004480 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d112      	bne.n	8009b68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8009b42:	2302      	movs	r3, #2
 8009b44:	e0d7      	b.n	8009cf6 <HAL_TIMEx_MasterConfigSynchronization+0x286>
 8009b46:	bf00      	nop
 8009b48:	40010000 	.word	0x40010000
 8009b4c:	40000400 	.word	0x40000400
 8009b50:	40000800 	.word	0x40000800
 8009b54:	40000c00 	.word	0x40000c00
 8009b58:	40001000 	.word	0x40001000
 8009b5c:	40001400 	.word	0x40001400
 8009b60:	40010400 	.word	0x40010400
 8009b64:	08013f94 	.word	0x08013f94
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2202      	movs	r2, #2
 8009b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a5c      	ldr	r2, [pc, #368]	@ (8009d00 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d004      	beq.n	8009b9c <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a5b      	ldr	r2, [pc, #364]	@ (8009d04 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d161      	bne.n	8009c60 <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d054      	beq.n	8009c4e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bac:	d04f      	beq.n	8009c4e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009bb6:	d04a      	beq.n	8009c4e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009bc0:	d045      	beq.n	8009c4e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009bca:	d040      	beq.n	8009c4e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8009bd4:	d03b      	beq.n	8009c4e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009bde:	d036      	beq.n	8009c4e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009be8:	d031      	beq.n	8009c4e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 8009bf2:	d02c      	beq.n	8009c4e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009bfc:	d027      	beq.n	8009c4e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 8009c06:	d022      	beq.n	8009c4e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009c10:	d01d      	beq.n	8009c4e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 8009c1a:	d018      	beq.n	8009c4e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009c24:	d013      	beq.n	8009c4e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 8009c2e:	d00e      	beq.n	8009c4e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 8009c38:	d009      	beq.n	8009c4e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 8009c42:	d004      	beq.n	8009c4e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009c44:	f240 71bf 	movw	r1, #1983	@ 0x7bf
 8009c48:	482f      	ldr	r0, [pc, #188]	@ (8009d08 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8009c4a:	f7fa fc19 	bl	8004480 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009c54:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	68fa      	ldr	r2, [r7, #12]
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a20      	ldr	r2, [pc, #128]	@ (8009d00 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d022      	beq.n	8009cca <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c8c:	d01d      	beq.n	8009cca <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a1e      	ldr	r2, [pc, #120]	@ (8009d0c <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d018      	beq.n	8009cca <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a1c      	ldr	r2, [pc, #112]	@ (8009d10 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d013      	beq.n	8009cca <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a1b      	ldr	r2, [pc, #108]	@ (8009d14 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d00e      	beq.n	8009cca <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a14      	ldr	r2, [pc, #80]	@ (8009d04 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d009      	beq.n	8009cca <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a17      	ldr	r2, [pc, #92]	@ (8009d18 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d004      	beq.n	8009cca <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a15      	ldr	r2, [pc, #84]	@ (8009d1c <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d10c      	bne.n	8009ce4 <HAL_TIMEx_MasterConfigSynchronization+0x274>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009cd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	68ba      	ldr	r2, [r7, #8]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	68ba      	ldr	r2, [r7, #8]
 8009ce2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3710      	adds	r7, #16
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	40010000 	.word	0x40010000
 8009d04:	40010400 	.word	0x40010400
 8009d08:	08013f94 	.word	0x08013f94
 8009d0c:	40000400 	.word	0x40000400
 8009d10:	40000800 	.word	0x40000800
 8009d14:	40000c00 	.word	0x40000c00
 8009d18:	40014000 	.word	0x40014000
 8009d1c:	40001800 	.word	0x40001800

08009d20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d101      	bne.n	8009d32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e09f      	b.n	8009e72 <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	699b      	ldr	r3, [r3, #24]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d02d      	beq.n	8009d96 <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a4f      	ldr	r2, [pc, #316]	@ (8009e7c <HAL_UART_Init+0x15c>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d055      	beq.n	8009df0 <HAL_UART_Init+0xd0>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a4d      	ldr	r2, [pc, #308]	@ (8009e80 <HAL_UART_Init+0x160>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d050      	beq.n	8009df0 <HAL_UART_Init+0xd0>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a4c      	ldr	r2, [pc, #304]	@ (8009e84 <HAL_UART_Init+0x164>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d04b      	beq.n	8009df0 <HAL_UART_Init+0xd0>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a4a      	ldr	r2, [pc, #296]	@ (8009e88 <HAL_UART_Init+0x168>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d046      	beq.n	8009df0 <HAL_UART_Init+0xd0>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a49      	ldr	r2, [pc, #292]	@ (8009e8c <HAL_UART_Init+0x16c>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d041      	beq.n	8009df0 <HAL_UART_Init+0xd0>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a47      	ldr	r2, [pc, #284]	@ (8009e90 <HAL_UART_Init+0x170>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d03c      	beq.n	8009df0 <HAL_UART_Init+0xd0>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a46      	ldr	r2, [pc, #280]	@ (8009e94 <HAL_UART_Init+0x174>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d037      	beq.n	8009df0 <HAL_UART_Init+0xd0>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a44      	ldr	r2, [pc, #272]	@ (8009e98 <HAL_UART_Init+0x178>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d032      	beq.n	8009df0 <HAL_UART_Init+0xd0>
 8009d8a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8009d8e:	4843      	ldr	r0, [pc, #268]	@ (8009e9c <HAL_UART_Init+0x17c>)
 8009d90:	f7fa fb76 	bl	8004480 <assert_failed>
 8009d94:	e02c      	b.n	8009df0 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a38      	ldr	r2, [pc, #224]	@ (8009e7c <HAL_UART_Init+0x15c>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d027      	beq.n	8009df0 <HAL_UART_Init+0xd0>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a36      	ldr	r2, [pc, #216]	@ (8009e80 <HAL_UART_Init+0x160>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d022      	beq.n	8009df0 <HAL_UART_Init+0xd0>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a35      	ldr	r2, [pc, #212]	@ (8009e84 <HAL_UART_Init+0x164>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d01d      	beq.n	8009df0 <HAL_UART_Init+0xd0>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a33      	ldr	r2, [pc, #204]	@ (8009e88 <HAL_UART_Init+0x168>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d018      	beq.n	8009df0 <HAL_UART_Init+0xd0>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a32      	ldr	r2, [pc, #200]	@ (8009e8c <HAL_UART_Init+0x16c>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d013      	beq.n	8009df0 <HAL_UART_Init+0xd0>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a30      	ldr	r2, [pc, #192]	@ (8009e90 <HAL_UART_Init+0x170>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d00e      	beq.n	8009df0 <HAL_UART_Init+0xd0>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a2f      	ldr	r2, [pc, #188]	@ (8009e94 <HAL_UART_Init+0x174>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d009      	beq.n	8009df0 <HAL_UART_Init+0xd0>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a2d      	ldr	r2, [pc, #180]	@ (8009e98 <HAL_UART_Init+0x178>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d004      	beq.n	8009df0 <HAL_UART_Init+0xd0>
 8009de6:	f240 1131 	movw	r1, #305	@ 0x131
 8009dea:	482c      	ldr	r0, [pc, #176]	@ (8009e9c <HAL_UART_Init+0x17c>)
 8009dec:	f7fa fb48 	bl	8004480 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d106      	bne.n	8009e06 <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f7fa fef1 	bl	8004be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2224      	movs	r2, #36	@ 0x24
 8009e0a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f022 0201 	bic.w	r2, r2, #1
 8009e1a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d002      	beq.n	8009e2a <HAL_UART_Init+0x10a>
  {
    UART_AdvFeatureConfig(huart);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 fb31 	bl	800a48c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 f838 	bl	8009ea0 <UART_SetConfig>
 8009e30:	4603      	mov	r3, r0
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d101      	bne.n	8009e3a <HAL_UART_Init+0x11a>
  {
    return HAL_ERROR;
 8009e36:	2301      	movs	r3, #1
 8009e38:	e01b      	b.n	8009e72 <HAL_UART_Init+0x152>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	685a      	ldr	r2, [r3, #4]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009e48:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	689a      	ldr	r2, [r3, #8]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009e58:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f042 0201 	orr.w	r2, r2, #1
 8009e68:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 fc66 	bl	800a73c <UART_CheckIdleState>
 8009e70:	4603      	mov	r3, r0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3708      	adds	r7, #8
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	40011000 	.word	0x40011000
 8009e80:	40004400 	.word	0x40004400
 8009e84:	40004800 	.word	0x40004800
 8009e88:	40004c00 	.word	0x40004c00
 8009e8c:	40005000 	.word	0x40005000
 8009e90:	40011400 	.word	0x40011400
 8009e94:	40007800 	.word	0x40007800
 8009e98:	40007c00 	.word	0x40007c00
 8009e9c:	08013fd0 	.word	0x08013fd0

08009ea0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b088      	sub	sp, #32
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	4aa0      	ldr	r2, [pc, #640]	@ (800a134 <UART_SetConfig+0x294>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d904      	bls.n	8009ec0 <UART_SetConfig+0x20>
 8009eb6:	f640 315f 	movw	r1, #2911	@ 0xb5f
 8009eba:	489f      	ldr	r0, [pc, #636]	@ (800a138 <UART_SetConfig+0x298>)
 8009ebc:	f7fa fae0 	bl	8004480 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ec8:	d00d      	beq.n	8009ee6 <UART_SetConfig+0x46>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d009      	beq.n	8009ee6 <UART_SetConfig+0x46>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009eda:	d004      	beq.n	8009ee6 <UART_SetConfig+0x46>
 8009edc:	f44f 6136 	mov.w	r1, #2912	@ 0xb60
 8009ee0:	4895      	ldr	r0, [pc, #596]	@ (800a138 <UART_SetConfig+0x298>)
 8009ee2:	f7fa facd 	bl	8004480 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	68db      	ldr	r3, [r3, #12]
 8009eea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009eee:	d012      	beq.n	8009f16 <UART_SetConfig+0x76>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d00e      	beq.n	8009f16 <UART_SetConfig+0x76>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009f00:	d009      	beq.n	8009f16 <UART_SetConfig+0x76>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f0a:	d004      	beq.n	8009f16 <UART_SetConfig+0x76>
 8009f0c:	f640 3161 	movw	r1, #2913	@ 0xb61
 8009f10:	4889      	ldr	r0, [pc, #548]	@ (800a138 <UART_SetConfig+0x298>)
 8009f12:	f7fa fab5 	bl	8004480 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6a1b      	ldr	r3, [r3, #32]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d009      	beq.n	8009f32 <UART_SetConfig+0x92>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6a1b      	ldr	r3, [r3, #32]
 8009f22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f26:	d004      	beq.n	8009f32 <UART_SetConfig+0x92>
 8009f28:	f640 3162 	movw	r1, #2914	@ 0xb62
 8009f2c:	4882      	ldr	r0, [pc, #520]	@ (800a138 <UART_SetConfig+0x298>)
 8009f2e:	f7fa faa7 	bl	8004480 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	691b      	ldr	r3, [r3, #16]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00e      	beq.n	8009f58 <UART_SetConfig+0xb8>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	691b      	ldr	r3, [r3, #16]
 8009f3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f42:	d009      	beq.n	8009f58 <UART_SetConfig+0xb8>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	691b      	ldr	r3, [r3, #16]
 8009f48:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009f4c:	d004      	beq.n	8009f58 <UART_SetConfig+0xb8>
 8009f4e:	f640 3164 	movw	r1, #2916	@ 0xb64
 8009f52:	4879      	ldr	r0, [pc, #484]	@ (800a138 <UART_SetConfig+0x298>)
 8009f54:	f7fa fa94 	bl	8004480 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	695b      	ldr	r3, [r3, #20]
 8009f5c:	f023 030c 	bic.w	r3, r3, #12
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d103      	bne.n	8009f6c <UART_SetConfig+0xcc>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	695b      	ldr	r3, [r3, #20]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d104      	bne.n	8009f76 <UART_SetConfig+0xd6>
 8009f6c:	f640 3165 	movw	r1, #2917	@ 0xb65
 8009f70:	4871      	ldr	r0, [pc, #452]	@ (800a138 <UART_SetConfig+0x298>)
 8009f72:	f7fa fa85 	bl	8004480 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	699b      	ldr	r3, [r3, #24]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d013      	beq.n	8009fa6 <UART_SetConfig+0x106>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	699b      	ldr	r3, [r3, #24]
 8009f82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f86:	d00e      	beq.n	8009fa6 <UART_SetConfig+0x106>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	699b      	ldr	r3, [r3, #24]
 8009f8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f90:	d009      	beq.n	8009fa6 <UART_SetConfig+0x106>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	699b      	ldr	r3, [r3, #24]
 8009f96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f9a:	d004      	beq.n	8009fa6 <UART_SetConfig+0x106>
 8009f9c:	f640 3166 	movw	r1, #2918	@ 0xb66
 8009fa0:	4865      	ldr	r0, [pc, #404]	@ (800a138 <UART_SetConfig+0x298>)
 8009fa2:	f7fa fa6d 	bl	8004480 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	69db      	ldr	r3, [r3, #28]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d009      	beq.n	8009fc2 <UART_SetConfig+0x122>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	69db      	ldr	r3, [r3, #28]
 8009fb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009fb6:	d004      	beq.n	8009fc2 <UART_SetConfig+0x122>
 8009fb8:	f640 3167 	movw	r1, #2919	@ 0xb67
 8009fbc:	485e      	ldr	r0, [pc, #376]	@ (800a138 <UART_SetConfig+0x298>)
 8009fbe:	f7fa fa5f 	bl	8004480 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	689a      	ldr	r2, [r3, #8]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	431a      	orrs	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	695b      	ldr	r3, [r3, #20]
 8009fd0:	431a      	orrs	r2, r3
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	69db      	ldr	r3, [r3, #28]
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	4b56      	ldr	r3, [pc, #344]	@ (800a13c <UART_SetConfig+0x29c>)
 8009fe2:	4013      	ands	r3, r2
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	6812      	ldr	r2, [r2, #0]
 8009fe8:	6979      	ldr	r1, [r7, #20]
 8009fea:	430b      	orrs	r3, r1
 8009fec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	68da      	ldr	r2, [r3, #12]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	430a      	orrs	r2, r1
 800a002:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	699b      	ldr	r3, [r3, #24]
 800a008:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6a1b      	ldr	r3, [r3, #32]
 800a00e:	697a      	ldr	r2, [r7, #20]
 800a010:	4313      	orrs	r3, r2
 800a012:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	697a      	ldr	r2, [r7, #20]
 800a024:	430a      	orrs	r2, r1
 800a026:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a44      	ldr	r2, [pc, #272]	@ (800a140 <UART_SetConfig+0x2a0>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d121      	bne.n	800a076 <UART_SetConfig+0x1d6>
 800a032:	4b44      	ldr	r3, [pc, #272]	@ (800a144 <UART_SetConfig+0x2a4>)
 800a034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a038:	f003 0303 	and.w	r3, r3, #3
 800a03c:	2b03      	cmp	r3, #3
 800a03e:	d817      	bhi.n	800a070 <UART_SetConfig+0x1d0>
 800a040:	a201      	add	r2, pc, #4	@ (adr r2, 800a048 <UART_SetConfig+0x1a8>)
 800a042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a046:	bf00      	nop
 800a048:	0800a059 	.word	0x0800a059
 800a04c:	0800a065 	.word	0x0800a065
 800a050:	0800a05f 	.word	0x0800a05f
 800a054:	0800a06b 	.word	0x0800a06b
 800a058:	2301      	movs	r3, #1
 800a05a:	77fb      	strb	r3, [r7, #31]
 800a05c:	e14c      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a05e:	2302      	movs	r3, #2
 800a060:	77fb      	strb	r3, [r7, #31]
 800a062:	e149      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a064:	2304      	movs	r3, #4
 800a066:	77fb      	strb	r3, [r7, #31]
 800a068:	e146      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a06a:	2308      	movs	r3, #8
 800a06c:	77fb      	strb	r3, [r7, #31]
 800a06e:	e143      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a070:	2310      	movs	r3, #16
 800a072:	77fb      	strb	r3, [r7, #31]
 800a074:	e140      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a33      	ldr	r2, [pc, #204]	@ (800a148 <UART_SetConfig+0x2a8>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d132      	bne.n	800a0e6 <UART_SetConfig+0x246>
 800a080:	4b30      	ldr	r3, [pc, #192]	@ (800a144 <UART_SetConfig+0x2a4>)
 800a082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a086:	f003 030c 	and.w	r3, r3, #12
 800a08a:	2b0c      	cmp	r3, #12
 800a08c:	d828      	bhi.n	800a0e0 <UART_SetConfig+0x240>
 800a08e:	a201      	add	r2, pc, #4	@ (adr r2, 800a094 <UART_SetConfig+0x1f4>)
 800a090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a094:	0800a0c9 	.word	0x0800a0c9
 800a098:	0800a0e1 	.word	0x0800a0e1
 800a09c:	0800a0e1 	.word	0x0800a0e1
 800a0a0:	0800a0e1 	.word	0x0800a0e1
 800a0a4:	0800a0d5 	.word	0x0800a0d5
 800a0a8:	0800a0e1 	.word	0x0800a0e1
 800a0ac:	0800a0e1 	.word	0x0800a0e1
 800a0b0:	0800a0e1 	.word	0x0800a0e1
 800a0b4:	0800a0cf 	.word	0x0800a0cf
 800a0b8:	0800a0e1 	.word	0x0800a0e1
 800a0bc:	0800a0e1 	.word	0x0800a0e1
 800a0c0:	0800a0e1 	.word	0x0800a0e1
 800a0c4:	0800a0db 	.word	0x0800a0db
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	77fb      	strb	r3, [r7, #31]
 800a0cc:	e114      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a0ce:	2302      	movs	r3, #2
 800a0d0:	77fb      	strb	r3, [r7, #31]
 800a0d2:	e111      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a0d4:	2304      	movs	r3, #4
 800a0d6:	77fb      	strb	r3, [r7, #31]
 800a0d8:	e10e      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a0da:	2308      	movs	r3, #8
 800a0dc:	77fb      	strb	r3, [r7, #31]
 800a0de:	e10b      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a0e0:	2310      	movs	r3, #16
 800a0e2:	77fb      	strb	r3, [r7, #31]
 800a0e4:	e108      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a18      	ldr	r2, [pc, #96]	@ (800a14c <UART_SetConfig+0x2ac>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d12f      	bne.n	800a150 <UART_SetConfig+0x2b0>
 800a0f0:	4b14      	ldr	r3, [pc, #80]	@ (800a144 <UART_SetConfig+0x2a4>)
 800a0f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0f6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a0fa:	2b30      	cmp	r3, #48	@ 0x30
 800a0fc:	d013      	beq.n	800a126 <UART_SetConfig+0x286>
 800a0fe:	2b30      	cmp	r3, #48	@ 0x30
 800a100:	d814      	bhi.n	800a12c <UART_SetConfig+0x28c>
 800a102:	2b20      	cmp	r3, #32
 800a104:	d009      	beq.n	800a11a <UART_SetConfig+0x27a>
 800a106:	2b20      	cmp	r3, #32
 800a108:	d810      	bhi.n	800a12c <UART_SetConfig+0x28c>
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d002      	beq.n	800a114 <UART_SetConfig+0x274>
 800a10e:	2b10      	cmp	r3, #16
 800a110:	d006      	beq.n	800a120 <UART_SetConfig+0x280>
 800a112:	e00b      	b.n	800a12c <UART_SetConfig+0x28c>
 800a114:	2300      	movs	r3, #0
 800a116:	77fb      	strb	r3, [r7, #31]
 800a118:	e0ee      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a11a:	2302      	movs	r3, #2
 800a11c:	77fb      	strb	r3, [r7, #31]
 800a11e:	e0eb      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a120:	2304      	movs	r3, #4
 800a122:	77fb      	strb	r3, [r7, #31]
 800a124:	e0e8      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a126:	2308      	movs	r3, #8
 800a128:	77fb      	strb	r3, [r7, #31]
 800a12a:	e0e5      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a12c:	2310      	movs	r3, #16
 800a12e:	77fb      	strb	r3, [r7, #31]
 800a130:	e0e2      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a132:	bf00      	nop
 800a134:	019bfcc0 	.word	0x019bfcc0
 800a138:	08013fd0 	.word	0x08013fd0
 800a13c:	efff69f3 	.word	0xefff69f3
 800a140:	40011000 	.word	0x40011000
 800a144:	40023800 	.word	0x40023800
 800a148:	40004400 	.word	0x40004400
 800a14c:	40004800 	.word	0x40004800
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4aa5      	ldr	r2, [pc, #660]	@ (800a3ec <UART_SetConfig+0x54c>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d120      	bne.n	800a19c <UART_SetConfig+0x2fc>
 800a15a:	4ba5      	ldr	r3, [pc, #660]	@ (800a3f0 <UART_SetConfig+0x550>)
 800a15c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a160:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a164:	2bc0      	cmp	r3, #192	@ 0xc0
 800a166:	d013      	beq.n	800a190 <UART_SetConfig+0x2f0>
 800a168:	2bc0      	cmp	r3, #192	@ 0xc0
 800a16a:	d814      	bhi.n	800a196 <UART_SetConfig+0x2f6>
 800a16c:	2b80      	cmp	r3, #128	@ 0x80
 800a16e:	d009      	beq.n	800a184 <UART_SetConfig+0x2e4>
 800a170:	2b80      	cmp	r3, #128	@ 0x80
 800a172:	d810      	bhi.n	800a196 <UART_SetConfig+0x2f6>
 800a174:	2b00      	cmp	r3, #0
 800a176:	d002      	beq.n	800a17e <UART_SetConfig+0x2de>
 800a178:	2b40      	cmp	r3, #64	@ 0x40
 800a17a:	d006      	beq.n	800a18a <UART_SetConfig+0x2ea>
 800a17c:	e00b      	b.n	800a196 <UART_SetConfig+0x2f6>
 800a17e:	2300      	movs	r3, #0
 800a180:	77fb      	strb	r3, [r7, #31]
 800a182:	e0b9      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a184:	2302      	movs	r3, #2
 800a186:	77fb      	strb	r3, [r7, #31]
 800a188:	e0b6      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a18a:	2304      	movs	r3, #4
 800a18c:	77fb      	strb	r3, [r7, #31]
 800a18e:	e0b3      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a190:	2308      	movs	r3, #8
 800a192:	77fb      	strb	r3, [r7, #31]
 800a194:	e0b0      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a196:	2310      	movs	r3, #16
 800a198:	77fb      	strb	r3, [r7, #31]
 800a19a:	e0ad      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a94      	ldr	r2, [pc, #592]	@ (800a3f4 <UART_SetConfig+0x554>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d125      	bne.n	800a1f2 <UART_SetConfig+0x352>
 800a1a6:	4b92      	ldr	r3, [pc, #584]	@ (800a3f0 <UART_SetConfig+0x550>)
 800a1a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a1b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a1b4:	d017      	beq.n	800a1e6 <UART_SetConfig+0x346>
 800a1b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a1ba:	d817      	bhi.n	800a1ec <UART_SetConfig+0x34c>
 800a1bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1c0:	d00b      	beq.n	800a1da <UART_SetConfig+0x33a>
 800a1c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1c6:	d811      	bhi.n	800a1ec <UART_SetConfig+0x34c>
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d003      	beq.n	800a1d4 <UART_SetConfig+0x334>
 800a1cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1d0:	d006      	beq.n	800a1e0 <UART_SetConfig+0x340>
 800a1d2:	e00b      	b.n	800a1ec <UART_SetConfig+0x34c>
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	77fb      	strb	r3, [r7, #31]
 800a1d8:	e08e      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a1da:	2302      	movs	r3, #2
 800a1dc:	77fb      	strb	r3, [r7, #31]
 800a1de:	e08b      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a1e0:	2304      	movs	r3, #4
 800a1e2:	77fb      	strb	r3, [r7, #31]
 800a1e4:	e088      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a1e6:	2308      	movs	r3, #8
 800a1e8:	77fb      	strb	r3, [r7, #31]
 800a1ea:	e085      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a1ec:	2310      	movs	r3, #16
 800a1ee:	77fb      	strb	r3, [r7, #31]
 800a1f0:	e082      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a80      	ldr	r2, [pc, #512]	@ (800a3f8 <UART_SetConfig+0x558>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d125      	bne.n	800a248 <UART_SetConfig+0x3a8>
 800a1fc:	4b7c      	ldr	r3, [pc, #496]	@ (800a3f0 <UART_SetConfig+0x550>)
 800a1fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a202:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a206:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a20a:	d017      	beq.n	800a23c <UART_SetConfig+0x39c>
 800a20c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a210:	d817      	bhi.n	800a242 <UART_SetConfig+0x3a2>
 800a212:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a216:	d00b      	beq.n	800a230 <UART_SetConfig+0x390>
 800a218:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a21c:	d811      	bhi.n	800a242 <UART_SetConfig+0x3a2>
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d003      	beq.n	800a22a <UART_SetConfig+0x38a>
 800a222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a226:	d006      	beq.n	800a236 <UART_SetConfig+0x396>
 800a228:	e00b      	b.n	800a242 <UART_SetConfig+0x3a2>
 800a22a:	2301      	movs	r3, #1
 800a22c:	77fb      	strb	r3, [r7, #31]
 800a22e:	e063      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a230:	2302      	movs	r3, #2
 800a232:	77fb      	strb	r3, [r7, #31]
 800a234:	e060      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a236:	2304      	movs	r3, #4
 800a238:	77fb      	strb	r3, [r7, #31]
 800a23a:	e05d      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a23c:	2308      	movs	r3, #8
 800a23e:	77fb      	strb	r3, [r7, #31]
 800a240:	e05a      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a242:	2310      	movs	r3, #16
 800a244:	77fb      	strb	r3, [r7, #31]
 800a246:	e057      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a6b      	ldr	r2, [pc, #428]	@ (800a3fc <UART_SetConfig+0x55c>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d125      	bne.n	800a29e <UART_SetConfig+0x3fe>
 800a252:	4b67      	ldr	r3, [pc, #412]	@ (800a3f0 <UART_SetConfig+0x550>)
 800a254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a258:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a25c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a260:	d017      	beq.n	800a292 <UART_SetConfig+0x3f2>
 800a262:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a266:	d817      	bhi.n	800a298 <UART_SetConfig+0x3f8>
 800a268:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a26c:	d00b      	beq.n	800a286 <UART_SetConfig+0x3e6>
 800a26e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a272:	d811      	bhi.n	800a298 <UART_SetConfig+0x3f8>
 800a274:	2b00      	cmp	r3, #0
 800a276:	d003      	beq.n	800a280 <UART_SetConfig+0x3e0>
 800a278:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a27c:	d006      	beq.n	800a28c <UART_SetConfig+0x3ec>
 800a27e:	e00b      	b.n	800a298 <UART_SetConfig+0x3f8>
 800a280:	2300      	movs	r3, #0
 800a282:	77fb      	strb	r3, [r7, #31]
 800a284:	e038      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a286:	2302      	movs	r3, #2
 800a288:	77fb      	strb	r3, [r7, #31]
 800a28a:	e035      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a28c:	2304      	movs	r3, #4
 800a28e:	77fb      	strb	r3, [r7, #31]
 800a290:	e032      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a292:	2308      	movs	r3, #8
 800a294:	77fb      	strb	r3, [r7, #31]
 800a296:	e02f      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a298:	2310      	movs	r3, #16
 800a29a:	77fb      	strb	r3, [r7, #31]
 800a29c:	e02c      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a57      	ldr	r2, [pc, #348]	@ (800a400 <UART_SetConfig+0x560>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d125      	bne.n	800a2f4 <UART_SetConfig+0x454>
 800a2a8:	4b51      	ldr	r3, [pc, #324]	@ (800a3f0 <UART_SetConfig+0x550>)
 800a2aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2ae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a2b2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a2b6:	d017      	beq.n	800a2e8 <UART_SetConfig+0x448>
 800a2b8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a2bc:	d817      	bhi.n	800a2ee <UART_SetConfig+0x44e>
 800a2be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2c2:	d00b      	beq.n	800a2dc <UART_SetConfig+0x43c>
 800a2c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2c8:	d811      	bhi.n	800a2ee <UART_SetConfig+0x44e>
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d003      	beq.n	800a2d6 <UART_SetConfig+0x436>
 800a2ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a2d2:	d006      	beq.n	800a2e2 <UART_SetConfig+0x442>
 800a2d4:	e00b      	b.n	800a2ee <UART_SetConfig+0x44e>
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	77fb      	strb	r3, [r7, #31]
 800a2da:	e00d      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a2dc:	2302      	movs	r3, #2
 800a2de:	77fb      	strb	r3, [r7, #31]
 800a2e0:	e00a      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a2e2:	2304      	movs	r3, #4
 800a2e4:	77fb      	strb	r3, [r7, #31]
 800a2e6:	e007      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a2e8:	2308      	movs	r3, #8
 800a2ea:	77fb      	strb	r3, [r7, #31]
 800a2ec:	e004      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a2ee:	2310      	movs	r3, #16
 800a2f0:	77fb      	strb	r3, [r7, #31]
 800a2f2:	e001      	b.n	800a2f8 <UART_SetConfig+0x458>
 800a2f4:	2310      	movs	r3, #16
 800a2f6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	69db      	ldr	r3, [r3, #28]
 800a2fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a300:	d15c      	bne.n	800a3bc <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 800a302:	7ffb      	ldrb	r3, [r7, #31]
 800a304:	2b08      	cmp	r3, #8
 800a306:	d828      	bhi.n	800a35a <UART_SetConfig+0x4ba>
 800a308:	a201      	add	r2, pc, #4	@ (adr r2, 800a310 <UART_SetConfig+0x470>)
 800a30a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a30e:	bf00      	nop
 800a310:	0800a335 	.word	0x0800a335
 800a314:	0800a33d 	.word	0x0800a33d
 800a318:	0800a345 	.word	0x0800a345
 800a31c:	0800a35b 	.word	0x0800a35b
 800a320:	0800a34b 	.word	0x0800a34b
 800a324:	0800a35b 	.word	0x0800a35b
 800a328:	0800a35b 	.word	0x0800a35b
 800a32c:	0800a35b 	.word	0x0800a35b
 800a330:	0800a353 	.word	0x0800a353
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a334:	f7fc f9de 	bl	80066f4 <HAL_RCC_GetPCLK1Freq>
 800a338:	61b8      	str	r0, [r7, #24]
        break;
 800a33a:	e013      	b.n	800a364 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a33c:	f7fc f9ee 	bl	800671c <HAL_RCC_GetPCLK2Freq>
 800a340:	61b8      	str	r0, [r7, #24]
        break;
 800a342:	e00f      	b.n	800a364 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a344:	4b2f      	ldr	r3, [pc, #188]	@ (800a404 <UART_SetConfig+0x564>)
 800a346:	61bb      	str	r3, [r7, #24]
        break;
 800a348:	e00c      	b.n	800a364 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a34a:	f7fc f901 	bl	8006550 <HAL_RCC_GetSysClockFreq>
 800a34e:	61b8      	str	r0, [r7, #24]
        break;
 800a350:	e008      	b.n	800a364 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a352:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a356:	61bb      	str	r3, [r7, #24]
        break;
 800a358:	e004      	b.n	800a364 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800a35a:	2300      	movs	r3, #0
 800a35c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	77bb      	strb	r3, [r7, #30]
        break;
 800a362:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a364:	69bb      	ldr	r3, [r7, #24]
 800a366:	2b00      	cmp	r3, #0
 800a368:	f000 8082 	beq.w	800a470 <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a36c:	69bb      	ldr	r3, [r7, #24]
 800a36e:	005a      	lsls	r2, r3, #1
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	085b      	lsrs	r3, r3, #1
 800a376:	441a      	add	r2, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a380:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	2b0f      	cmp	r3, #15
 800a386:	d916      	bls.n	800a3b6 <UART_SetConfig+0x516>
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a38e:	d212      	bcs.n	800a3b6 <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	b29b      	uxth	r3, r3
 800a394:	f023 030f 	bic.w	r3, r3, #15
 800a398:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	085b      	lsrs	r3, r3, #1
 800a39e:	b29b      	uxth	r3, r3
 800a3a0:	f003 0307 	and.w	r3, r3, #7
 800a3a4:	b29a      	uxth	r2, r3
 800a3a6:	89fb      	ldrh	r3, [r7, #14]
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	89fa      	ldrh	r2, [r7, #14]
 800a3b2:	60da      	str	r2, [r3, #12]
 800a3b4:	e05c      	b.n	800a470 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	77bb      	strb	r3, [r7, #30]
 800a3ba:	e059      	b.n	800a470 <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a3bc:	7ffb      	ldrb	r3, [r7, #31]
 800a3be:	2b08      	cmp	r3, #8
 800a3c0:	d835      	bhi.n	800a42e <UART_SetConfig+0x58e>
 800a3c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a3c8 <UART_SetConfig+0x528>)
 800a3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c8:	0800a409 	.word	0x0800a409
 800a3cc:	0800a411 	.word	0x0800a411
 800a3d0:	0800a419 	.word	0x0800a419
 800a3d4:	0800a42f 	.word	0x0800a42f
 800a3d8:	0800a41f 	.word	0x0800a41f
 800a3dc:	0800a42f 	.word	0x0800a42f
 800a3e0:	0800a42f 	.word	0x0800a42f
 800a3e4:	0800a42f 	.word	0x0800a42f
 800a3e8:	0800a427 	.word	0x0800a427
 800a3ec:	40004c00 	.word	0x40004c00
 800a3f0:	40023800 	.word	0x40023800
 800a3f4:	40005000 	.word	0x40005000
 800a3f8:	40011400 	.word	0x40011400
 800a3fc:	40007800 	.word	0x40007800
 800a400:	40007c00 	.word	0x40007c00
 800a404:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a408:	f7fc f974 	bl	80066f4 <HAL_RCC_GetPCLK1Freq>
 800a40c:	61b8      	str	r0, [r7, #24]
        break;
 800a40e:	e013      	b.n	800a438 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a410:	f7fc f984 	bl	800671c <HAL_RCC_GetPCLK2Freq>
 800a414:	61b8      	str	r0, [r7, #24]
        break;
 800a416:	e00f      	b.n	800a438 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a418:	4b1b      	ldr	r3, [pc, #108]	@ (800a488 <UART_SetConfig+0x5e8>)
 800a41a:	61bb      	str	r3, [r7, #24]
        break;
 800a41c:	e00c      	b.n	800a438 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a41e:	f7fc f897 	bl	8006550 <HAL_RCC_GetSysClockFreq>
 800a422:	61b8      	str	r0, [r7, #24]
        break;
 800a424:	e008      	b.n	800a438 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a426:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a42a:	61bb      	str	r3, [r7, #24]
        break;
 800a42c:	e004      	b.n	800a438 <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 800a42e:	2300      	movs	r3, #0
 800a430:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a432:	2301      	movs	r3, #1
 800a434:	77bb      	strb	r3, [r7, #30]
        break;
 800a436:	bf00      	nop
    }

    if (pclk != 0U)
 800a438:	69bb      	ldr	r3, [r7, #24]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d018      	beq.n	800a470 <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	085a      	lsrs	r2, r3, #1
 800a444:	69bb      	ldr	r3, [r7, #24]
 800a446:	441a      	add	r2, r3
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a450:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	2b0f      	cmp	r3, #15
 800a456:	d909      	bls.n	800a46c <UART_SetConfig+0x5cc>
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a45e:	d205      	bcs.n	800a46c <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	b29a      	uxth	r2, r3
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	60da      	str	r2, [r3, #12]
 800a46a:	e001      	b.n	800a470 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800a46c:	2301      	movs	r3, #1
 800a46e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2200      	movs	r2, #0
 800a47a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a47c:	7fbb      	ldrb	r3, [r7, #30]
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3720      	adds	r7, #32
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	00f42400 	.word	0x00f42400

0800a48c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a498:	2bff      	cmp	r3, #255	@ 0xff
 800a49a:	d904      	bls.n	800a4a6 <UART_AdvFeatureConfig+0x1a>
 800a49c:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 800a4a0:	488e      	ldr	r0, [pc, #568]	@ (800a6dc <UART_AdvFeatureConfig+0x250>)
 800a4a2:	f7f9 ffed 	bl	8004480 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4aa:	f003 0308 	and.w	r3, r3, #8
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d018      	beq.n	800a4e4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d009      	beq.n	800a4ce <UART_AdvFeatureConfig+0x42>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4c2:	d004      	beq.n	800a4ce <UART_AdvFeatureConfig+0x42>
 800a4c4:	f640 31ed 	movw	r1, #3053	@ 0xbed
 800a4c8:	4884      	ldr	r0, [pc, #528]	@ (800a6dc <UART_AdvFeatureConfig+0x250>)
 800a4ca:	f7f9 ffd9 	bl	8004480 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	430a      	orrs	r2, r1
 800a4e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4e8:	f003 0301 	and.w	r3, r3, #1
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d018      	beq.n	800a522 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d009      	beq.n	800a50c <UART_AdvFeatureConfig+0x80>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a500:	d004      	beq.n	800a50c <UART_AdvFeatureConfig+0x80>
 800a502:	f640 31f4 	movw	r1, #3060	@ 0xbf4
 800a506:	4875      	ldr	r0, [pc, #468]	@ (800a6dc <UART_AdvFeatureConfig+0x250>)
 800a508:	f7f9 ffba 	bl	8004480 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	430a      	orrs	r2, r1
 800a520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a526:	f003 0302 	and.w	r3, r3, #2
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d018      	beq.n	800a560 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a532:	2b00      	cmp	r3, #0
 800a534:	d009      	beq.n	800a54a <UART_AdvFeatureConfig+0xbe>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a53a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a53e:	d004      	beq.n	800a54a <UART_AdvFeatureConfig+0xbe>
 800a540:	f640 31fb 	movw	r1, #3067	@ 0xbfb
 800a544:	4865      	ldr	r0, [pc, #404]	@ (800a6dc <UART_AdvFeatureConfig+0x250>)
 800a546:	f7f9 ff9b 	bl	8004480 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	430a      	orrs	r2, r1
 800a55e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a564:	f003 0304 	and.w	r3, r3, #4
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d018      	beq.n	800a59e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a570:	2b00      	cmp	r3, #0
 800a572:	d009      	beq.n	800a588 <UART_AdvFeatureConfig+0xfc>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a578:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a57c:	d004      	beq.n	800a588 <UART_AdvFeatureConfig+0xfc>
 800a57e:	f640 4102 	movw	r1, #3074	@ 0xc02
 800a582:	4856      	ldr	r0, [pc, #344]	@ (800a6dc <UART_AdvFeatureConfig+0x250>)
 800a584:	f7f9 ff7c 	bl	8004480 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	430a      	orrs	r2, r1
 800a59c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5a2:	f003 0310 	and.w	r3, r3, #16
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d018      	beq.n	800a5dc <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d009      	beq.n	800a5c6 <UART_AdvFeatureConfig+0x13a>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5ba:	d004      	beq.n	800a5c6 <UART_AdvFeatureConfig+0x13a>
 800a5bc:	f640 4109 	movw	r1, #3081	@ 0xc09
 800a5c0:	4846      	ldr	r0, [pc, #280]	@ (800a6dc <UART_AdvFeatureConfig+0x250>)
 800a5c2:	f7f9 ff5d 	bl	8004480 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	430a      	orrs	r2, r1
 800a5da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5e0:	f003 0320 	and.w	r3, r3, #32
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d018      	beq.n	800a61a <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d009      	beq.n	800a604 <UART_AdvFeatureConfig+0x178>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a5f8:	d004      	beq.n	800a604 <UART_AdvFeatureConfig+0x178>
 800a5fa:	f44f 6141 	mov.w	r1, #3088	@ 0xc10
 800a5fe:	4837      	ldr	r0, [pc, #220]	@ (800a6dc <UART_AdvFeatureConfig+0x250>)
 800a600:	f7f9 ff3e 	bl	8004480 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	430a      	orrs	r2, r1
 800a618:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a61e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a622:	2b00      	cmp	r3, #0
 800a624:	d064      	beq.n	800a6f0 <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4a2d      	ldr	r2, [pc, #180]	@ (800a6e0 <UART_AdvFeatureConfig+0x254>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d013      	beq.n	800a658 <UART_AdvFeatureConfig+0x1cc>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a2b      	ldr	r2, [pc, #172]	@ (800a6e4 <UART_AdvFeatureConfig+0x258>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d00e      	beq.n	800a658 <UART_AdvFeatureConfig+0x1cc>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a2a      	ldr	r2, [pc, #168]	@ (800a6e8 <UART_AdvFeatureConfig+0x25c>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d009      	beq.n	800a658 <UART_AdvFeatureConfig+0x1cc>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a28      	ldr	r2, [pc, #160]	@ (800a6ec <UART_AdvFeatureConfig+0x260>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d004      	beq.n	800a658 <UART_AdvFeatureConfig+0x1cc>
 800a64e:	f640 4117 	movw	r1, #3095	@ 0xc17
 800a652:	4822      	ldr	r0, [pc, #136]	@ (800a6dc <UART_AdvFeatureConfig+0x250>)
 800a654:	f7f9 ff14 	bl	8004480 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d009      	beq.n	800a674 <UART_AdvFeatureConfig+0x1e8>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a664:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a668:	d004      	beq.n	800a674 <UART_AdvFeatureConfig+0x1e8>
 800a66a:	f640 4118 	movw	r1, #3096	@ 0xc18
 800a66e:	481b      	ldr	r0, [pc, #108]	@ (800a6dc <UART_AdvFeatureConfig+0x250>)
 800a670:	f7f9 ff06 	bl	8004480 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	430a      	orrs	r2, r1
 800a688:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a68e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a692:	d12d      	bne.n	800a6f0 <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d013      	beq.n	800a6c4 <UART_AdvFeatureConfig+0x238>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a6a4:	d00e      	beq.n	800a6c4 <UART_AdvFeatureConfig+0x238>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a6ae:	d009      	beq.n	800a6c4 <UART_AdvFeatureConfig+0x238>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a6b8:	d004      	beq.n	800a6c4 <UART_AdvFeatureConfig+0x238>
 800a6ba:	f640 411d 	movw	r1, #3101	@ 0xc1d
 800a6be:	4807      	ldr	r0, [pc, #28]	@ (800a6dc <UART_AdvFeatureConfig+0x250>)
 800a6c0:	f7f9 fede 	bl	8004480 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	430a      	orrs	r2, r1
 800a6d8:	605a      	str	r2, [r3, #4]
 800a6da:	e009      	b.n	800a6f0 <UART_AdvFeatureConfig+0x264>
 800a6dc:	08013fd0 	.word	0x08013fd0
 800a6e0:	40011000 	.word	0x40011000
 800a6e4:	40004400 	.word	0x40004400
 800a6e8:	40004800 	.word	0x40004800
 800a6ec:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d018      	beq.n	800a72e <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a700:	2b00      	cmp	r3, #0
 800a702:	d009      	beq.n	800a718 <UART_AdvFeatureConfig+0x28c>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a708:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a70c:	d004      	beq.n	800a718 <UART_AdvFeatureConfig+0x28c>
 800a70e:	f640 4125 	movw	r1, #3109	@ 0xc25
 800a712:	4809      	ldr	r0, [pc, #36]	@ (800a738 <UART_AdvFeatureConfig+0x2ac>)
 800a714:	f7f9 feb4 	bl	8004480 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	430a      	orrs	r2, r1
 800a72c:	605a      	str	r2, [r3, #4]
  }
}
 800a72e:	bf00      	nop
 800a730:	3708      	adds	r7, #8
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	08013fd0 	.word	0x08013fd0

0800a73c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b08c      	sub	sp, #48	@ 0x30
 800a740:	af02      	add	r7, sp, #8
 800a742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a74c:	f7fa fb66 	bl	8004e1c <HAL_GetTick>
 800a750:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f003 0308 	and.w	r3, r3, #8
 800a75c:	2b08      	cmp	r3, #8
 800a75e:	d12e      	bne.n	800a7be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a760:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a764:	9300      	str	r3, [sp, #0]
 800a766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a768:	2200      	movs	r2, #0
 800a76a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 f83b 	bl	800a7ea <UART_WaitOnFlagUntilTimeout>
 800a774:	4603      	mov	r3, r0
 800a776:	2b00      	cmp	r3, #0
 800a778:	d021      	beq.n	800a7be <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	e853 3f00 	ldrex	r3, [r3]
 800a786:	60fb      	str	r3, [r7, #12]
   return(result);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a78e:	623b      	str	r3, [r7, #32]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	461a      	mov	r2, r3
 800a796:	6a3b      	ldr	r3, [r7, #32]
 800a798:	61fb      	str	r3, [r7, #28]
 800a79a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a79c:	69b9      	ldr	r1, [r7, #24]
 800a79e:	69fa      	ldr	r2, [r7, #28]
 800a7a0:	e841 2300 	strex	r3, r2, [r1]
 800a7a4:	617b      	str	r3, [r7, #20]
   return(result);
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d1e6      	bne.n	800a77a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2220      	movs	r2, #32
 800a7b0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7ba:	2303      	movs	r3, #3
 800a7bc:	e011      	b.n	800a7e2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2220      	movs	r2, #32
 800a7c2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2220      	movs	r2, #32
 800a7c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3728      	adds	r7, #40	@ 0x28
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b084      	sub	sp, #16
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	60f8      	str	r0, [r7, #12]
 800a7f2:	60b9      	str	r1, [r7, #8]
 800a7f4:	603b      	str	r3, [r7, #0]
 800a7f6:	4613      	mov	r3, r2
 800a7f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7fa:	e04f      	b.n	800a89c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7fc:	69bb      	ldr	r3, [r7, #24]
 800a7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a802:	d04b      	beq.n	800a89c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a804:	f7fa fb0a 	bl	8004e1c <HAL_GetTick>
 800a808:	4602      	mov	r2, r0
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	1ad3      	subs	r3, r2, r3
 800a80e:	69ba      	ldr	r2, [r7, #24]
 800a810:	429a      	cmp	r2, r3
 800a812:	d302      	bcc.n	800a81a <UART_WaitOnFlagUntilTimeout+0x30>
 800a814:	69bb      	ldr	r3, [r7, #24]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d101      	bne.n	800a81e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a81a:	2303      	movs	r3, #3
 800a81c:	e04e      	b.n	800a8bc <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f003 0304 	and.w	r3, r3, #4
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d037      	beq.n	800a89c <UART_WaitOnFlagUntilTimeout+0xb2>
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	2b80      	cmp	r3, #128	@ 0x80
 800a830:	d034      	beq.n	800a89c <UART_WaitOnFlagUntilTimeout+0xb2>
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	2b40      	cmp	r3, #64	@ 0x40
 800a836:	d031      	beq.n	800a89c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	69db      	ldr	r3, [r3, #28]
 800a83e:	f003 0308 	and.w	r3, r3, #8
 800a842:	2b08      	cmp	r3, #8
 800a844:	d110      	bne.n	800a868 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	2208      	movs	r2, #8
 800a84c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f000 f838 	bl	800a8c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2208      	movs	r2, #8
 800a858:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2200      	movs	r2, #0
 800a860:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a864:	2301      	movs	r3, #1
 800a866:	e029      	b.n	800a8bc <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	69db      	ldr	r3, [r3, #28]
 800a86e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a872:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a876:	d111      	bne.n	800a89c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a880:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a882:	68f8      	ldr	r0, [r7, #12]
 800a884:	f000 f81e 	bl	800a8c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2220      	movs	r2, #32
 800a88c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2200      	movs	r2, #0
 800a894:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a898:	2303      	movs	r3, #3
 800a89a:	e00f      	b.n	800a8bc <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	69da      	ldr	r2, [r3, #28]
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	4013      	ands	r3, r2
 800a8a6:	68ba      	ldr	r2, [r7, #8]
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	bf0c      	ite	eq
 800a8ac:	2301      	moveq	r3, #1
 800a8ae:	2300      	movne	r3, #0
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	79fb      	ldrb	r3, [r7, #7]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d0a0      	beq.n	800a7fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a8ba:	2300      	movs	r3, #0
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3710      	adds	r7, #16
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b095      	sub	sp, #84	@ 0x54
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8d4:	e853 3f00 	ldrex	r3, [r3]
 800a8d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a8e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8ea:	643b      	str	r3, [r7, #64]	@ 0x40
 800a8ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a8f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a8f2:	e841 2300 	strex	r3, r2, [r1]
 800a8f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a8f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d1e6      	bne.n	800a8cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	3308      	adds	r3, #8
 800a904:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a906:	6a3b      	ldr	r3, [r7, #32]
 800a908:	e853 3f00 	ldrex	r3, [r3]
 800a90c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a90e:	69fb      	ldr	r3, [r7, #28]
 800a910:	f023 0301 	bic.w	r3, r3, #1
 800a914:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	3308      	adds	r3, #8
 800a91c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a91e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a920:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a922:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a924:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a926:	e841 2300 	strex	r3, r2, [r1]
 800a92a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a92c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d1e5      	bne.n	800a8fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a936:	2b01      	cmp	r3, #1
 800a938:	d118      	bne.n	800a96c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	e853 3f00 	ldrex	r3, [r3]
 800a946:	60bb      	str	r3, [r7, #8]
   return(result);
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	f023 0310 	bic.w	r3, r3, #16
 800a94e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	461a      	mov	r2, r3
 800a956:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a958:	61bb      	str	r3, [r7, #24]
 800a95a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a95c:	6979      	ldr	r1, [r7, #20]
 800a95e:	69ba      	ldr	r2, [r7, #24]
 800a960:	e841 2300 	strex	r3, r2, [r1]
 800a964:	613b      	str	r3, [r7, #16]
   return(result);
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d1e6      	bne.n	800a93a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2220      	movs	r2, #32
 800a970:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2200      	movs	r2, #0
 800a978:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2200      	movs	r2, #0
 800a97e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a980:	bf00      	nop
 800a982:	3754      	adds	r7, #84	@ 0x54
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr

0800a98c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f103 0208 	add.w	r2, r3, #8
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a9a4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f103 0208 	add.w	r2, r3, #8
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f103 0208 	add.w	r2, r3, #8
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 800a9c0:	bf00      	nop
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 800a9da:	bf00      	nop
 800a9dc:	370c      	adds	r7, #12
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr

0800a9e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800a9e6:	b480      	push	{r7}
 800a9e8:	b085      	sub	sp, #20
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
 800a9ee:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	68fa      	ldr	r2, [r7, #12]
 800a9fa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	689a      	ldr	r2, [r3, #8]
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	683a      	ldr	r2, [r7, #0]
 800aa0a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	683a      	ldr	r2, [r7, #0]
 800aa10:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	1c5a      	adds	r2, r3, #1
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 800aa22:	bf00      	nop
 800aa24:	3714      	adds	r7, #20
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr

0800aa2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800aa2e:	b480      	push	{r7}
 800aa30:	b085      	sub	sp, #20
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
 800aa36:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa44:	d103      	bne.n	800aa4e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	691b      	ldr	r3, [r3, #16]
 800aa4a:	60fb      	str	r3, [r7, #12]
 800aa4c:	e00c      	b.n	800aa68 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	3308      	adds	r3, #8
 800aa52:	60fb      	str	r3, [r7, #12]
 800aa54:	e002      	b.n	800aa5c <vListInsert+0x2e>
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	60fb      	str	r3, [r7, #12]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	68ba      	ldr	r2, [r7, #8]
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d2f6      	bcs.n	800aa56 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	685a      	ldr	r2, [r3, #4]
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	683a      	ldr	r2, [r7, #0]
 800aa76:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	68fa      	ldr	r2, [r7, #12]
 800aa7c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	683a      	ldr	r2, [r7, #0]
 800aa82:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	1c5a      	adds	r2, r3, #1
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 800aa94:	bf00      	nop
 800aa96:	3714      	adds	r7, #20
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b085      	sub	sp, #20
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	691b      	ldr	r3, [r3, #16]
 800aaac:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	6892      	ldr	r2, [r2, #8]
 800aab6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	689b      	ldr	r3, [r3, #8]
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	6852      	ldr	r2, [r2, #4]
 800aac0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d103      	bne.n	800aad4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	689a      	ldr	r2, [r3, #8]
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2200      	movs	r2, #0
 800aad8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	1e5a      	subs	r2, r3, #1
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3714      	adds	r7, #20
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b086      	sub	sp, #24
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800aafe:	2301      	movs	r3, #1
 800ab00:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d110      	bne.n	800ab2e <xQueueGenericReset+0x3a>
    __asm volatile
 800ab0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab10:	b672      	cpsid	i
 800ab12:	f383 8811 	msr	BASEPRI, r3
 800ab16:	f3bf 8f6f 	isb	sy
 800ab1a:	f3bf 8f4f 	dsb	sy
 800ab1e:	b662      	cpsie	i
 800ab20:	60fb      	str	r3, [r7, #12]
}
 800ab22:	bf00      	nop
 800ab24:	f240 1137 	movw	r1, #311	@ 0x137
 800ab28:	483f      	ldr	r0, [pc, #252]	@ (800ac28 <xQueueGenericReset+0x134>)
 800ab2a:	f7f9 fbf3 	bl	8004314 <vAssertCalled>

    if( ( pxQueue != NULL ) &&
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d05d      	beq.n	800abf0 <xQueueGenericReset+0xfc>
        ( pxQueue->uxLength >= 1U ) &&
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d059      	beq.n	800abf0 <xQueueGenericReset+0xfc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab44:	2100      	movs	r1, #0
 800ab46:	fba3 2302 	umull	r2, r3, r3, r2
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d000      	beq.n	800ab50 <xQueueGenericReset+0x5c>
 800ab4e:	2101      	movs	r1, #1
 800ab50:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d14c      	bne.n	800abf0 <xQueueGenericReset+0xfc>
    {
        taskENTER_CRITICAL();
 800ab56:	f002 fff3 	bl	800db40 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab62:	6939      	ldr	r1, [r7, #16]
 800ab64:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ab66:	fb01 f303 	mul.w	r3, r1, r3
 800ab6a:	441a      	add	r2, r3
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	2200      	movs	r2, #0
 800ab74:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab86:	3b01      	subs	r3, #1
 800ab88:	6939      	ldr	r1, [r7, #16]
 800ab8a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ab8c:	fb01 f303 	mul.w	r3, r1, r3
 800ab90:	441a      	add	r2, r3
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	22ff      	movs	r2, #255	@ 0xff
 800ab9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	22ff      	movs	r2, #255	@ 0xff
 800aba2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d114      	bne.n	800abd6 <xQueueGenericReset+0xe2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	691b      	ldr	r3, [r3, #16]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d01a      	beq.n	800abea <xQueueGenericReset+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	3310      	adds	r3, #16
 800abb8:	4618      	mov	r0, r3
 800abba:	f001 fdc9 	bl	800c750 <xTaskRemoveFromEventList>
 800abbe:	4603      	mov	r3, r0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d012      	beq.n	800abea <xQueueGenericReset+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800abc4:	4b19      	ldr	r3, [pc, #100]	@ (800ac2c <xQueueGenericReset+0x138>)
 800abc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abca:	601a      	str	r2, [r3, #0]
 800abcc:	f3bf 8f4f 	dsb	sy
 800abd0:	f3bf 8f6f 	isb	sy
 800abd4:	e009      	b.n	800abea <xQueueGenericReset+0xf6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	3310      	adds	r3, #16
 800abda:	4618      	mov	r0, r3
 800abdc:	f7ff fed6 	bl	800a98c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	3324      	adds	r3, #36	@ 0x24
 800abe4:	4618      	mov	r0, r3
 800abe6:	f7ff fed1 	bl	800a98c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800abea:	f002 ffe1 	bl	800dbb0 <vPortExitCritical>
 800abee:	e001      	b.n	800abf4 <xQueueGenericReset+0x100>
    }
    else
    {
        xReturn = pdFAIL;
 800abf0:	2300      	movs	r3, #0
 800abf2:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d110      	bne.n	800ac1c <xQueueGenericReset+0x128>
    __asm volatile
 800abfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abfe:	b672      	cpsid	i
 800ac00:	f383 8811 	msr	BASEPRI, r3
 800ac04:	f3bf 8f6f 	isb	sy
 800ac08:	f3bf 8f4f 	dsb	sy
 800ac0c:	b662      	cpsie	i
 800ac0e:	60bb      	str	r3, [r7, #8]
}
 800ac10:	bf00      	nop
 800ac12:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 800ac16:	4804      	ldr	r0, [pc, #16]	@ (800ac28 <xQueueGenericReset+0x134>)
 800ac18:	f7f9 fb7c 	bl	8004314 <vAssertCalled>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 800ac1c:	697b      	ldr	r3, [r7, #20]
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3718      	adds	r7, #24
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	0801400c 	.word	0x0801400c
 800ac2c:	e000ed04 	.word	0xe000ed04

0800ac30 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b08a      	sub	sp, #40	@ 0x28
 800ac34:	af02      	add	r7, sp, #8
 800ac36:	60f8      	str	r0, [r7, #12]
 800ac38:	60b9      	str	r1, [r7, #8]
 800ac3a:	4613      	mov	r3, r2
 800ac3c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d02e      	beq.n	800aca6 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800ac48:	2100      	movs	r1, #0
 800ac4a:	68ba      	ldr	r2, [r7, #8]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	fba3 2302 	umull	r2, r3, r3, r2
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d000      	beq.n	800ac58 <xQueueGenericCreate+0x28>
 800ac56:	2101      	movs	r1, #1
 800ac58:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d123      	bne.n	800aca6 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	68ba      	ldr	r2, [r7, #8]
 800ac62:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800ac66:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800ac6a:	d81c      	bhi.n	800aca6 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	68ba      	ldr	r2, [r7, #8]
 800ac70:	fb02 f303 	mul.w	r3, r2, r3
 800ac74:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	3350      	adds	r3, #80	@ 0x50
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f7f9 feb2 	bl	80049e4 <pvPortMalloc>
 800ac80:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800ac82:	69fb      	ldr	r3, [r7, #28]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d022      	beq.n	800acce <xQueueGenericCreate+0x9e>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ac88:	69fb      	ldr	r3, [r7, #28]
 800ac8a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	3350      	adds	r3, #80	@ 0x50
 800ac90:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac92:	79fa      	ldrb	r2, [r7, #7]
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	9300      	str	r3, [sp, #0]
 800ac98:	4613      	mov	r3, r2
 800ac9a:	697a      	ldr	r2, [r7, #20]
 800ac9c:	68b9      	ldr	r1, [r7, #8]
 800ac9e:	68f8      	ldr	r0, [r7, #12]
 800aca0:	f000 f81c 	bl	800acdc <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800aca4:	e013      	b.n	800acce <xQueueGenericCreate+0x9e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800aca6:	69fb      	ldr	r3, [r7, #28]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d110      	bne.n	800acce <xQueueGenericCreate+0x9e>
    __asm volatile
 800acac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acb0:	b672      	cpsid	i
 800acb2:	f383 8811 	msr	BASEPRI, r3
 800acb6:	f3bf 8f6f 	isb	sy
 800acba:	f3bf 8f4f 	dsb	sy
 800acbe:	b662      	cpsie	i
 800acc0:	613b      	str	r3, [r7, #16]
}
 800acc2:	bf00      	nop
 800acc4:	f240 212a 	movw	r1, #554	@ 0x22a
 800acc8:	4803      	ldr	r0, [pc, #12]	@ (800acd8 <xQueueGenericCreate+0xa8>)
 800acca:	f7f9 fb23 	bl	8004314 <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 800acce:	69fb      	ldr	r3, [r7, #28]
    }
 800acd0:	4618      	mov	r0, r3
 800acd2:	3720      	adds	r7, #32
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}
 800acd8:	0801400c 	.word	0x0801400c

0800acdc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b084      	sub	sp, #16
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	60f8      	str	r0, [r7, #12]
 800ace4:	60b9      	str	r1, [r7, #8]
 800ace6:	607a      	str	r2, [r7, #4]
 800ace8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d103      	bne.n	800acf8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	69ba      	ldr	r2, [r7, #24]
 800acf4:	601a      	str	r2, [r3, #0]
 800acf6:	e002      	b.n	800acfe <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800acf8:	69bb      	ldr	r3, [r7, #24]
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	68fa      	ldr	r2, [r7, #12]
 800ad02:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	68ba      	ldr	r2, [r7, #8]
 800ad08:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ad0a:	2101      	movs	r1, #1
 800ad0c:	69b8      	ldr	r0, [r7, #24]
 800ad0e:	f7ff fef1 	bl	800aaf4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800ad12:	69bb      	ldr	r3, [r7, #24]
 800ad14:	78fa      	ldrb	r2, [r7, #3]
 800ad16:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800ad1a:	bf00      	nop
 800ad1c:	3710      	adds	r7, #16
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b082      	sub	sp, #8
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d00e      	beq.n	800ad4e <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2200      	movs	r2, #0
 800ad34:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ad42:	2300      	movs	r3, #0
 800ad44:	2200      	movs	r2, #0
 800ad46:	2100      	movs	r1, #0
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f000 f897 	bl	800ae7c <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 800ad4e:	bf00      	nop
 800ad50:	3708      	adds	r7, #8
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}

0800ad56 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b086      	sub	sp, #24
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ad60:	2301      	movs	r3, #1
 800ad62:	617b      	str	r3, [r7, #20]
 800ad64:	2300      	movs	r3, #0
 800ad66:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueCreateMutex( ucQueueType );

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ad68:	79fb      	ldrb	r3, [r7, #7]
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	6939      	ldr	r1, [r7, #16]
 800ad6e:	6978      	ldr	r0, [r7, #20]
 800ad70:	f7ff ff5e 	bl	800ac30 <xQueueGenericCreate>
 800ad74:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ad76:	68f8      	ldr	r0, [r7, #12]
 800ad78:	f7ff ffd3 	bl	800ad22 <prvInitialiseMutex>

        traceRETURN_xQueueCreateMutex( xNewQueue );

        return xNewQueue;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
    }
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3718      	adds	r7, #24
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
	...

0800ad88 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
    {
 800ad88:	b590      	push	{r4, r7, lr}
 800ad8a:	b087      	sub	sp, #28
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueGiveMutexRecursive( xMutex );

        configASSERT( pxMutex );
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d110      	bne.n	800adbc <xQueueGiveMutexRecursive+0x34>
    __asm volatile
 800ad9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad9e:	b672      	cpsid	i
 800ada0:	f383 8811 	msr	BASEPRI, r3
 800ada4:	f3bf 8f6f 	isb	sy
 800ada8:	f3bf 8f4f 	dsb	sy
 800adac:	b662      	cpsie	i
 800adae:	60fb      	str	r3, [r7, #12]
}
 800adb0:	bf00      	nop
 800adb2:	f240 21fb 	movw	r1, #763	@ 0x2fb
 800adb6:	4811      	ldr	r0, [pc, #68]	@ (800adfc <xQueueGiveMutexRecursive+0x74>)
 800adb8:	f7f9 faac 	bl	8004314 <vAssertCalled>
         * change outside of this task.  If this task does not hold the mutex then
         * pxMutexHolder can never coincidentally equal the tasks handle, and as
         * this is the only condition we are interested in it does not matter if
         * pxMutexHolder is accessed simultaneously by another task.  Therefore no
         * mutual exclusion is required to test the pxMutexHolder variable. */
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	689c      	ldr	r4, [r3, #8]
 800adc0:	f001 ffd2 	bl	800cd68 <xTaskGetCurrentTaskHandle>
 800adc4:	4603      	mov	r3, r0
 800adc6:	429c      	cmp	r4, r3
 800adc8:	d111      	bne.n	800adee <xQueueGiveMutexRecursive+0x66>
            /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
             * the task handle, therefore no underflow check is required.  Also,
             * uxRecursiveCallCount is only modified by the mutex holder, and as
             * there can only be one, no mutual exclusion is required to modify the
             * uxRecursiveCallCount member. */
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	68db      	ldr	r3, [r3, #12]
 800adce:	1e5a      	subs	r2, r3, #1
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	60da      	str	r2, [r3, #12]

            /* Has the recursive call count unwound to 0? */
            if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d105      	bne.n	800ade8 <xQueueGiveMutexRecursive+0x60>
            {
                /* Return the mutex.  This will automatically unblock any other
                 * task that might be waiting to access the mutex. */
                ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800addc:	2300      	movs	r3, #0
 800adde:	2200      	movs	r2, #0
 800ade0:	2100      	movs	r1, #0
 800ade2:	6938      	ldr	r0, [r7, #16]
 800ade4:	f000 f84a 	bl	800ae7c <xQueueGenericSend>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            xReturn = pdPASS;
 800ade8:	2301      	movs	r3, #1
 800adea:	617b      	str	r3, [r7, #20]
 800adec:	e001      	b.n	800adf2 <xQueueGiveMutexRecursive+0x6a>
        }
        else
        {
            /* The mutex cannot be given because the calling task is not the
             * holder. */
            xReturn = pdFAIL;
 800adee:	2300      	movs	r3, #0
 800adf0:	617b      	str	r3, [r7, #20]
            traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
        }

        traceRETURN_xQueueGiveMutexRecursive( xReturn );

        return xReturn;
 800adf2:	697b      	ldr	r3, [r7, #20]
    }
 800adf4:	4618      	mov	r0, r3
 800adf6:	371c      	adds	r7, #28
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd90      	pop	{r4, r7, pc}
 800adfc:	0801400c 	.word	0x0801400c

0800ae00 <xQueueTakeMutexRecursive>:

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
                                         TickType_t xTicksToWait )
    {
 800ae00:	b590      	push	{r4, r7, lr}
 800ae02:	b087      	sub	sp, #28
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueTakeMutexRecursive( xMutex, xTicksToWait );

        configASSERT( pxMutex );
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d110      	bne.n	800ae36 <xQueueTakeMutexRecursive+0x36>
    __asm volatile
 800ae14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae18:	b672      	cpsid	i
 800ae1a:	f383 8811 	msr	BASEPRI, r3
 800ae1e:	f3bf 8f6f 	isb	sy
 800ae22:	f3bf 8f4f 	dsb	sy
 800ae26:	b662      	cpsie	i
 800ae28:	60fb      	str	r3, [r7, #12]
}
 800ae2a:	bf00      	nop
 800ae2c:	f240 3137 	movw	r1, #823	@ 0x337
 800ae30:	4811      	ldr	r0, [pc, #68]	@ (800ae78 <xQueueTakeMutexRecursive+0x78>)
 800ae32:	f7f9 fa6f 	bl	8004314 <vAssertCalled>
        /* Comments regarding mutual exclusion as per those within
         * xQueueGiveMutexRecursive(). */

        traceTAKE_MUTEX_RECURSIVE( pxMutex );

        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	689c      	ldr	r4, [r3, #8]
 800ae3a:	f001 ff95 	bl	800cd68 <xTaskGetCurrentTaskHandle>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	429c      	cmp	r4, r3
 800ae42:	d107      	bne.n	800ae54 <xQueueTakeMutexRecursive+0x54>
        {
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	68db      	ldr	r3, [r3, #12]
 800ae48:	1c5a      	adds	r2, r3, #1
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	60da      	str	r2, [r3, #12]
            xReturn = pdPASS;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	617b      	str	r3, [r7, #20]
 800ae52:	e00c      	b.n	800ae6e <xQueueTakeMutexRecursive+0x6e>
        }
        else
        {
            xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800ae54:	6839      	ldr	r1, [r7, #0]
 800ae56:	6938      	ldr	r0, [r7, #16]
 800ae58:	f000 fa1c 	bl	800b294 <xQueueSemaphoreTake>
 800ae5c:	6178      	str	r0, [r7, #20]

            /* pdPASS will only be returned if the mutex was successfully
             * obtained.  The calling task may have entered the Blocked state
             * before reaching here. */
            if( xReturn != pdFAIL )
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d004      	beq.n	800ae6e <xQueueTakeMutexRecursive+0x6e>
            {
                ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	68db      	ldr	r3, [r3, #12]
 800ae68:	1c5a      	adds	r2, r3, #1
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	60da      	str	r2, [r3, #12]
            }
        }

        traceRETURN_xQueueTakeMutexRecursive( xReturn );

        return xReturn;
 800ae6e:	697b      	ldr	r3, [r7, #20]
    }
 800ae70:	4618      	mov	r0, r3
 800ae72:	371c      	adds	r7, #28
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd90      	pop	{r4, r7, pc}
 800ae78:	0801400c 	.word	0x0801400c

0800ae7c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b08e      	sub	sp, #56	@ 0x38
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	60b9      	str	r1, [r7, #8]
 800ae86:	607a      	str	r2, [r7, #4]
 800ae88:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 800ae92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d110      	bne.n	800aeba <xQueueGenericSend+0x3e>
    __asm volatile
 800ae98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae9c:	b672      	cpsid	i
 800ae9e:	f383 8811 	msr	BASEPRI, r3
 800aea2:	f3bf 8f6f 	isb	sy
 800aea6:	f3bf 8f4f 	dsb	sy
 800aeaa:	b662      	cpsie	i
 800aeac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800aeae:	bf00      	nop
 800aeb0:	f240 31b6 	movw	r1, #950	@ 0x3b6
 800aeb4:	487b      	ldr	r0, [pc, #492]	@ (800b0a4 <xQueueGenericSend+0x228>)
 800aeb6:	f7f9 fa2d 	bl	8004314 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d103      	bne.n	800aec8 <xQueueGenericSend+0x4c>
 800aec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d101      	bne.n	800aecc <xQueueGenericSend+0x50>
 800aec8:	2301      	movs	r3, #1
 800aeca:	e000      	b.n	800aece <xQueueGenericSend+0x52>
 800aecc:	2300      	movs	r3, #0
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d110      	bne.n	800aef4 <xQueueGenericSend+0x78>
    __asm volatile
 800aed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aed6:	b672      	cpsid	i
 800aed8:	f383 8811 	msr	BASEPRI, r3
 800aedc:	f3bf 8f6f 	isb	sy
 800aee0:	f3bf 8f4f 	dsb	sy
 800aee4:	b662      	cpsie	i
 800aee6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800aee8:	bf00      	nop
 800aeea:	f240 31b7 	movw	r1, #951	@ 0x3b7
 800aeee:	486d      	ldr	r0, [pc, #436]	@ (800b0a4 <xQueueGenericSend+0x228>)
 800aef0:	f7f9 fa10 	bl	8004314 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	2b02      	cmp	r3, #2
 800aef8:	d103      	bne.n	800af02 <xQueueGenericSend+0x86>
 800aefa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aefc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d101      	bne.n	800af06 <xQueueGenericSend+0x8a>
 800af02:	2301      	movs	r3, #1
 800af04:	e000      	b.n	800af08 <xQueueGenericSend+0x8c>
 800af06:	2300      	movs	r3, #0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d110      	bne.n	800af2e <xQueueGenericSend+0xb2>
    __asm volatile
 800af0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af10:	b672      	cpsid	i
 800af12:	f383 8811 	msr	BASEPRI, r3
 800af16:	f3bf 8f6f 	isb	sy
 800af1a:	f3bf 8f4f 	dsb	sy
 800af1e:	b662      	cpsie	i
 800af20:	623b      	str	r3, [r7, #32]
}
 800af22:	bf00      	nop
 800af24:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
 800af28:	485e      	ldr	r0, [pc, #376]	@ (800b0a4 <xQueueGenericSend+0x228>)
 800af2a:	f7f9 f9f3 	bl	8004314 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800af2e:	f001 ff2b 	bl	800cd88 <xTaskGetSchedulerState>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d102      	bne.n	800af3e <xQueueGenericSend+0xc2>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d101      	bne.n	800af42 <xQueueGenericSend+0xc6>
 800af3e:	2301      	movs	r3, #1
 800af40:	e000      	b.n	800af44 <xQueueGenericSend+0xc8>
 800af42:	2300      	movs	r3, #0
 800af44:	2b00      	cmp	r3, #0
 800af46:	d110      	bne.n	800af6a <xQueueGenericSend+0xee>
    __asm volatile
 800af48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af4c:	b672      	cpsid	i
 800af4e:	f383 8811 	msr	BASEPRI, r3
 800af52:	f3bf 8f6f 	isb	sy
 800af56:	f3bf 8f4f 	dsb	sy
 800af5a:	b662      	cpsie	i
 800af5c:	61fb      	str	r3, [r7, #28]
}
 800af5e:	bf00      	nop
 800af60:	f240 31bb 	movw	r1, #955	@ 0x3bb
 800af64:	484f      	ldr	r0, [pc, #316]	@ (800b0a4 <xQueueGenericSend+0x228>)
 800af66:	f7f9 f9d5 	bl	8004314 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800af6a:	f002 fde9 	bl	800db40 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800af6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af76:	429a      	cmp	r2, r3
 800af78:	d302      	bcc.n	800af80 <xQueueGenericSend+0x104>
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	2b02      	cmp	r3, #2
 800af7e:	d129      	bne.n	800afd4 <xQueueGenericSend+0x158>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800af80:	683a      	ldr	r2, [r7, #0]
 800af82:	68b9      	ldr	r1, [r7, #8]
 800af84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800af86:	f000 fad3 	bl	800b530 <prvCopyDataToQueue>
 800af8a:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af90:	2b00      	cmp	r3, #0
 800af92:	d010      	beq.n	800afb6 <xQueueGenericSend+0x13a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af96:	3324      	adds	r3, #36	@ 0x24
 800af98:	4618      	mov	r0, r3
 800af9a:	f001 fbd9 	bl	800c750 <xTaskRemoveFromEventList>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d013      	beq.n	800afcc <xQueueGenericSend+0x150>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800afa4:	4b40      	ldr	r3, [pc, #256]	@ (800b0a8 <xQueueGenericSend+0x22c>)
 800afa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afaa:	601a      	str	r2, [r3, #0]
 800afac:	f3bf 8f4f 	dsb	sy
 800afb0:	f3bf 8f6f 	isb	sy
 800afb4:	e00a      	b.n	800afcc <xQueueGenericSend+0x150>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800afb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d007      	beq.n	800afcc <xQueueGenericSend+0x150>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800afbc:	4b3a      	ldr	r3, [pc, #232]	@ (800b0a8 <xQueueGenericSend+0x22c>)
 800afbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afc2:	601a      	str	r2, [r3, #0]
 800afc4:	f3bf 8f4f 	dsb	sy
 800afc8:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800afcc:	f002 fdf0 	bl	800dbb0 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 800afd0:	2301      	movs	r3, #1
 800afd2:	e063      	b.n	800b09c <xQueueGenericSend+0x220>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d103      	bne.n	800afe2 <xQueueGenericSend+0x166>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800afda:	f002 fde9 	bl	800dbb0 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 800afde:	2300      	movs	r3, #0
 800afe0:	e05c      	b.n	800b09c <xQueueGenericSend+0x220>
                }
                else if( xEntryTimeSet == pdFALSE )
 800afe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d106      	bne.n	800aff6 <xQueueGenericSend+0x17a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800afe8:	f107 0314 	add.w	r3, r7, #20
 800afec:	4618      	mov	r0, r3
 800afee:	f001 fc8d 	bl	800c90c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800aff2:	2301      	movs	r3, #1
 800aff4:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800aff6:	f002 fddb 	bl	800dbb0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800affa:	f000 ffa1 	bl	800bf40 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800affe:	f002 fd9f 	bl	800db40 <vPortEnterCritical>
 800b002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b004:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b008:	b25b      	sxtb	r3, r3
 800b00a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b00e:	d103      	bne.n	800b018 <xQueueGenericSend+0x19c>
 800b010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b012:	2200      	movs	r2, #0
 800b014:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b01a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b01e:	b25b      	sxtb	r3, r3
 800b020:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b024:	d103      	bne.n	800b02e <xQueueGenericSend+0x1b2>
 800b026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b028:	2200      	movs	r2, #0
 800b02a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b02e:	f002 fdbf 	bl	800dbb0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b032:	1d3a      	adds	r2, r7, #4
 800b034:	f107 0314 	add.w	r3, r7, #20
 800b038:	4611      	mov	r1, r2
 800b03a:	4618      	mov	r0, r3
 800b03c:	f001 fc7c 	bl	800c938 <xTaskCheckForTimeOut>
 800b040:	4603      	mov	r3, r0
 800b042:	2b00      	cmp	r3, #0
 800b044:	d124      	bne.n	800b090 <xQueueGenericSend+0x214>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b046:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b048:	f000 fb6a 	bl	800b720 <prvIsQueueFull>
 800b04c:	4603      	mov	r3, r0
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d018      	beq.n	800b084 <xQueueGenericSend+0x208>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b054:	3310      	adds	r3, #16
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	4611      	mov	r1, r2
 800b05a:	4618      	mov	r0, r3
 800b05c:	f001 fafe 	bl	800c65c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800b060:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b062:	f000 faf5 	bl	800b650 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800b066:	f000 ff79 	bl	800bf5c <xTaskResumeAll>
 800b06a:	4603      	mov	r3, r0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	f47f af7c 	bne.w	800af6a <xQueueGenericSend+0xee>
                {
                    taskYIELD_WITHIN_API();
 800b072:	4b0d      	ldr	r3, [pc, #52]	@ (800b0a8 <xQueueGenericSend+0x22c>)
 800b074:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b078:	601a      	str	r2, [r3, #0]
 800b07a:	f3bf 8f4f 	dsb	sy
 800b07e:	f3bf 8f6f 	isb	sy
 800b082:	e772      	b.n	800af6a <xQueueGenericSend+0xee>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800b084:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b086:	f000 fae3 	bl	800b650 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800b08a:	f000 ff67 	bl	800bf5c <xTaskResumeAll>
 800b08e:	e76c      	b.n	800af6a <xQueueGenericSend+0xee>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800b090:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b092:	f000 fadd 	bl	800b650 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800b096:	f000 ff61 	bl	800bf5c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 800b09a:	2300      	movs	r3, #0
        }
    }
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3738      	adds	r7, #56	@ 0x38
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}
 800b0a4:	0801400c 	.word	0x0801400c
 800b0a8:	e000ed04 	.word	0xe000ed04

0800b0ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b08c      	sub	sp, #48	@ 0x30
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	60f8      	str	r0, [r7, #12]
 800b0b4:	60b9      	str	r1, [r7, #8]
 800b0b6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800b0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d110      	bne.n	800b0e8 <xQueueReceive+0x3c>
    __asm volatile
 800b0c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0ca:	b672      	cpsid	i
 800b0cc:	f383 8811 	msr	BASEPRI, r3
 800b0d0:	f3bf 8f6f 	isb	sy
 800b0d4:	f3bf 8f4f 	dsb	sy
 800b0d8:	b662      	cpsie	i
 800b0da:	623b      	str	r3, [r7, #32]
}
 800b0dc:	bf00      	nop
 800b0de:	f240 51e9 	movw	r1, #1513	@ 0x5e9
 800b0e2:	486a      	ldr	r0, [pc, #424]	@ (800b28c <xQueueReceive+0x1e0>)
 800b0e4:	f7f9 f916 	bl	8004314 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d103      	bne.n	800b0f6 <xQueueReceive+0x4a>
 800b0ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d101      	bne.n	800b0fa <xQueueReceive+0x4e>
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e000      	b.n	800b0fc <xQueueReceive+0x50>
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d110      	bne.n	800b122 <xQueueReceive+0x76>
    __asm volatile
 800b100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b104:	b672      	cpsid	i
 800b106:	f383 8811 	msr	BASEPRI, r3
 800b10a:	f3bf 8f6f 	isb	sy
 800b10e:	f3bf 8f4f 	dsb	sy
 800b112:	b662      	cpsie	i
 800b114:	61fb      	str	r3, [r7, #28]
}
 800b116:	bf00      	nop
 800b118:	f240 51ed 	movw	r1, #1517	@ 0x5ed
 800b11c:	485b      	ldr	r0, [pc, #364]	@ (800b28c <xQueueReceive+0x1e0>)
 800b11e:	f7f9 f8f9 	bl	8004314 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b122:	f001 fe31 	bl	800cd88 <xTaskGetSchedulerState>
 800b126:	4603      	mov	r3, r0
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d102      	bne.n	800b132 <xQueueReceive+0x86>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d101      	bne.n	800b136 <xQueueReceive+0x8a>
 800b132:	2301      	movs	r3, #1
 800b134:	e000      	b.n	800b138 <xQueueReceive+0x8c>
 800b136:	2300      	movs	r3, #0
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d110      	bne.n	800b15e <xQueueReceive+0xb2>
    __asm volatile
 800b13c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b140:	b672      	cpsid	i
 800b142:	f383 8811 	msr	BASEPRI, r3
 800b146:	f3bf 8f6f 	isb	sy
 800b14a:	f3bf 8f4f 	dsb	sy
 800b14e:	b662      	cpsie	i
 800b150:	61bb      	str	r3, [r7, #24]
}
 800b152:	bf00      	nop
 800b154:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 800b158:	484c      	ldr	r0, [pc, #304]	@ (800b28c <xQueueReceive+0x1e0>)
 800b15a:	f7f9 f8db 	bl	8004314 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800b15e:	f002 fcef 	bl	800db40 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b166:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d01f      	beq.n	800b1ae <xQueueReceive+0x102>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b16e:	68b9      	ldr	r1, [r7, #8]
 800b170:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b172:	f000 fa47 	bl	800b604 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 800b176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b178:	1e5a      	subs	r2, r3, #1
 800b17a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b17c:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b17e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b180:	691b      	ldr	r3, [r3, #16]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d00f      	beq.n	800b1a6 <xQueueReceive+0xfa>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b188:	3310      	adds	r3, #16
 800b18a:	4618      	mov	r0, r3
 800b18c:	f001 fae0 	bl	800c750 <xTaskRemoveFromEventList>
 800b190:	4603      	mov	r3, r0
 800b192:	2b00      	cmp	r3, #0
 800b194:	d007      	beq.n	800b1a6 <xQueueReceive+0xfa>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800b196:	4b3e      	ldr	r3, [pc, #248]	@ (800b290 <xQueueReceive+0x1e4>)
 800b198:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b19c:	601a      	str	r2, [r3, #0]
 800b19e:	f3bf 8f4f 	dsb	sy
 800b1a2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800b1a6:	f002 fd03 	bl	800dbb0 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	e069      	b.n	800b282 <xQueueReceive+0x1d6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d103      	bne.n	800b1bc <xQueueReceive+0x110>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800b1b4:	f002 fcfc 	bl	800dbb0 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	e062      	b.n	800b282 <xQueueReceive+0x1d6>
                }
                else if( xEntryTimeSet == pdFALSE )
 800b1bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d106      	bne.n	800b1d0 <xQueueReceive+0x124>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800b1c2:	f107 0310 	add.w	r3, r7, #16
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f001 fba0 	bl	800c90c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800b1d0:	f002 fcee 	bl	800dbb0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800b1d4:	f000 feb4 	bl	800bf40 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800b1d8:	f002 fcb2 	bl	800db40 <vPortEnterCritical>
 800b1dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b1e2:	b25b      	sxtb	r3, r3
 800b1e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1e8:	d103      	bne.n	800b1f2 <xQueueReceive+0x146>
 800b1ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b1f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b1f8:	b25b      	sxtb	r3, r3
 800b1fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1fe:	d103      	bne.n	800b208 <xQueueReceive+0x15c>
 800b200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b202:	2200      	movs	r2, #0
 800b204:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b208:	f002 fcd2 	bl	800dbb0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b20c:	1d3a      	adds	r2, r7, #4
 800b20e:	f107 0310 	add.w	r3, r7, #16
 800b212:	4611      	mov	r1, r2
 800b214:	4618      	mov	r0, r3
 800b216:	f001 fb8f 	bl	800c938 <xTaskCheckForTimeOut>
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d123      	bne.n	800b268 <xQueueReceive+0x1bc>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b220:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b222:	f000 fa67 	bl	800b6f4 <prvIsQueueEmpty>
 800b226:	4603      	mov	r3, r0
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d017      	beq.n	800b25c <xQueueReceive+0x1b0>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b22c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b22e:	3324      	adds	r3, #36	@ 0x24
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	4611      	mov	r1, r2
 800b234:	4618      	mov	r0, r3
 800b236:	f001 fa11 	bl	800c65c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800b23a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b23c:	f000 fa08 	bl	800b650 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800b240:	f000 fe8c 	bl	800bf5c <xTaskResumeAll>
 800b244:	4603      	mov	r3, r0
 800b246:	2b00      	cmp	r3, #0
 800b248:	d189      	bne.n	800b15e <xQueueReceive+0xb2>
                {
                    taskYIELD_WITHIN_API();
 800b24a:	4b11      	ldr	r3, [pc, #68]	@ (800b290 <xQueueReceive+0x1e4>)
 800b24c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b250:	601a      	str	r2, [r3, #0]
 800b252:	f3bf 8f4f 	dsb	sy
 800b256:	f3bf 8f6f 	isb	sy
 800b25a:	e780      	b.n	800b15e <xQueueReceive+0xb2>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800b25c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b25e:	f000 f9f7 	bl	800b650 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800b262:	f000 fe7b 	bl	800bf5c <xTaskResumeAll>
 800b266:	e77a      	b.n	800b15e <xQueueReceive+0xb2>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800b268:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b26a:	f000 f9f1 	bl	800b650 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800b26e:	f000 fe75 	bl	800bf5c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b272:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b274:	f000 fa3e 	bl	800b6f4 <prvIsQueueEmpty>
 800b278:	4603      	mov	r3, r0
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	f43f af6f 	beq.w	800b15e <xQueueReceive+0xb2>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 800b280:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 800b282:	4618      	mov	r0, r3
 800b284:	3730      	adds	r7, #48	@ 0x30
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	0801400c 	.word	0x0801400c
 800b290:	e000ed04 	.word	0xe000ed04

0800b294 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b08c      	sub	sp, #48	@ 0x30
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800b2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d110      	bne.n	800b2d2 <xQueueSemaphoreTake+0x3e>
    __asm volatile
 800b2b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2b4:	b672      	cpsid	i
 800b2b6:	f383 8811 	msr	BASEPRI, r3
 800b2ba:	f3bf 8f6f 	isb	sy
 800b2be:	f3bf 8f4f 	dsb	sy
 800b2c2:	b662      	cpsie	i
 800b2c4:	61bb      	str	r3, [r7, #24]
}
 800b2c6:	bf00      	nop
 800b2c8:	f240 6182 	movw	r1, #1666	@ 0x682
 800b2cc:	4878      	ldr	r0, [pc, #480]	@ (800b4b0 <xQueueSemaphoreTake+0x21c>)
 800b2ce:	f7f9 f821 	bl	8004314 <vAssertCalled>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800b2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d010      	beq.n	800b2fc <xQueueSemaphoreTake+0x68>
    __asm volatile
 800b2da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2de:	b672      	cpsid	i
 800b2e0:	f383 8811 	msr	BASEPRI, r3
 800b2e4:	f3bf 8f6f 	isb	sy
 800b2e8:	f3bf 8f4f 	dsb	sy
 800b2ec:	b662      	cpsie	i
 800b2ee:	617b      	str	r3, [r7, #20]
}
 800b2f0:	bf00      	nop
 800b2f2:	f240 6186 	movw	r1, #1670	@ 0x686
 800b2f6:	486e      	ldr	r0, [pc, #440]	@ (800b4b0 <xQueueSemaphoreTake+0x21c>)
 800b2f8:	f7f9 f80c 	bl	8004314 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b2fc:	f001 fd44 	bl	800cd88 <xTaskGetSchedulerState>
 800b300:	4603      	mov	r3, r0
 800b302:	2b00      	cmp	r3, #0
 800b304:	d102      	bne.n	800b30c <xQueueSemaphoreTake+0x78>
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d101      	bne.n	800b310 <xQueueSemaphoreTake+0x7c>
 800b30c:	2301      	movs	r3, #1
 800b30e:	e000      	b.n	800b312 <xQueueSemaphoreTake+0x7e>
 800b310:	2300      	movs	r3, #0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d110      	bne.n	800b338 <xQueueSemaphoreTake+0xa4>
    __asm volatile
 800b316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b31a:	b672      	cpsid	i
 800b31c:	f383 8811 	msr	BASEPRI, r3
 800b320:	f3bf 8f6f 	isb	sy
 800b324:	f3bf 8f4f 	dsb	sy
 800b328:	b662      	cpsie	i
 800b32a:	613b      	str	r3, [r7, #16]
}
 800b32c:	bf00      	nop
 800b32e:	f240 618b 	movw	r1, #1675	@ 0x68b
 800b332:	485f      	ldr	r0, [pc, #380]	@ (800b4b0 <xQueueSemaphoreTake+0x21c>)
 800b334:	f7f8 ffee 	bl	8004314 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800b338:	f002 fc02 	bl	800db40 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b33c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b33e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b340:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b342:	6a3b      	ldr	r3, [r7, #32]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d024      	beq.n	800b392 <xQueueSemaphoreTake+0xfe>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 800b348:	6a3b      	ldr	r3, [r7, #32]
 800b34a:	1e5a      	subs	r2, r3, #1
 800b34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b34e:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d104      	bne.n	800b362 <xQueueSemaphoreTake+0xce>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b358:	f001 ff52 	bl	800d200 <pvTaskIncrementMutexHeldCount>
 800b35c:	4602      	mov	r2, r0
 800b35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b360:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b364:	691b      	ldr	r3, [r3, #16]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d00f      	beq.n	800b38a <xQueueSemaphoreTake+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b36c:	3310      	adds	r3, #16
 800b36e:	4618      	mov	r0, r3
 800b370:	f001 f9ee 	bl	800c750 <xTaskRemoveFromEventList>
 800b374:	4603      	mov	r3, r0
 800b376:	2b00      	cmp	r3, #0
 800b378:	d007      	beq.n	800b38a <xQueueSemaphoreTake+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800b37a:	4b4e      	ldr	r3, [pc, #312]	@ (800b4b4 <xQueueSemaphoreTake+0x220>)
 800b37c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b380:	601a      	str	r2, [r3, #0]
 800b382:	f3bf 8f4f 	dsb	sy
 800b386:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800b38a:	f002 fc11 	bl	800dbb0 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 800b38e:	2301      	movs	r3, #1
 800b390:	e089      	b.n	800b4a6 <xQueueSemaphoreTake+0x212>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d103      	bne.n	800b3a0 <xQueueSemaphoreTake+0x10c>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800b398:	f002 fc0a 	bl	800dbb0 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 800b39c:	2300      	movs	r3, #0
 800b39e:	e082      	b.n	800b4a6 <xQueueSemaphoreTake+0x212>
                }
                else if( xEntryTimeSet == pdFALSE )
 800b3a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d106      	bne.n	800b3b4 <xQueueSemaphoreTake+0x120>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800b3a6:	f107 0308 	add.w	r3, r7, #8
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f001 faae 	bl	800c90c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800b3b4:	f002 fbfc 	bl	800dbb0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800b3b8:	f000 fdc2 	bl	800bf40 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800b3bc:	f002 fbc0 	bl	800db40 <vPortEnterCritical>
 800b3c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b3c6:	b25b      	sxtb	r3, r3
 800b3c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3cc:	d103      	bne.n	800b3d6 <xQueueSemaphoreTake+0x142>
 800b3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b3dc:	b25b      	sxtb	r3, r3
 800b3de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3e2:	d103      	bne.n	800b3ec <xQueueSemaphoreTake+0x158>
 800b3e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b3ec:	f002 fbe0 	bl	800dbb0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b3f0:	463a      	mov	r2, r7
 800b3f2:	f107 0308 	add.w	r3, r7, #8
 800b3f6:	4611      	mov	r1, r2
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f001 fa9d 	bl	800c938 <xTaskCheckForTimeOut>
 800b3fe:	4603      	mov	r3, r0
 800b400:	2b00      	cmp	r3, #0
 800b402:	d132      	bne.n	800b46a <xQueueSemaphoreTake+0x1d6>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b404:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b406:	f000 f975 	bl	800b6f4 <prvIsQueueEmpty>
 800b40a:	4603      	mov	r3, r0
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d026      	beq.n	800b45e <xQueueSemaphoreTake+0x1ca>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d109      	bne.n	800b42c <xQueueSemaphoreTake+0x198>
                    {
                        taskENTER_CRITICAL();
 800b418:	f002 fb92 	bl	800db40 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b41e:	689b      	ldr	r3, [r3, #8]
 800b420:	4618      	mov	r0, r3
 800b422:	f001 fccf 	bl	800cdc4 <xTaskPriorityInherit>
 800b426:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 800b428:	f002 fbc2 	bl	800dbb0 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b42c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b42e:	3324      	adds	r3, #36	@ 0x24
 800b430:	683a      	ldr	r2, [r7, #0]
 800b432:	4611      	mov	r1, r2
 800b434:	4618      	mov	r0, r3
 800b436:	f001 f911 	bl	800c65c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800b43a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b43c:	f000 f908 	bl	800b650 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800b440:	f000 fd8c 	bl	800bf5c <xTaskResumeAll>
 800b444:	4603      	mov	r3, r0
 800b446:	2b00      	cmp	r3, #0
 800b448:	f47f af76 	bne.w	800b338 <xQueueSemaphoreTake+0xa4>
                {
                    taskYIELD_WITHIN_API();
 800b44c:	4b19      	ldr	r3, [pc, #100]	@ (800b4b4 <xQueueSemaphoreTake+0x220>)
 800b44e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b452:	601a      	str	r2, [r3, #0]
 800b454:	f3bf 8f4f 	dsb	sy
 800b458:	f3bf 8f6f 	isb	sy
 800b45c:	e76c      	b.n	800b338 <xQueueSemaphoreTake+0xa4>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800b45e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b460:	f000 f8f6 	bl	800b650 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800b464:	f000 fd7a 	bl	800bf5c <xTaskResumeAll>
 800b468:	e766      	b.n	800b338 <xQueueSemaphoreTake+0xa4>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800b46a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b46c:	f000 f8f0 	bl	800b650 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800b470:	f000 fd74 	bl	800bf5c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b474:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b476:	f000 f93d 	bl	800b6f4 <prvIsQueueEmpty>
 800b47a:	4603      	mov	r3, r0
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	f43f af5b 	beq.w	800b338 <xQueueSemaphoreTake+0xa4>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 800b482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b484:	2b00      	cmp	r3, #0
 800b486:	d00d      	beq.n	800b4a4 <xQueueSemaphoreTake+0x210>
                    {
                        taskENTER_CRITICAL();
 800b488:	f002 fb5a 	bl	800db40 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b48c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b48e:	f000 f837 	bl	800b500 <prvGetDisinheritPriorityAfterTimeout>
 800b492:	61f8      	str	r0, [r7, #28]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	69f9      	ldr	r1, [r7, #28]
 800b49a:	4618      	mov	r0, r3
 800b49c:	f001 fde6 	bl	800d06c <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 800b4a0:	f002 fb86 	bl	800dbb0 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 800b4a4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3730      	adds	r7, #48	@ 0x30
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	bf00      	nop
 800b4b0:	0801400c 	.word	0x0801400c
 800b4b4:	e000ed04 	.word	0xe000ed04

0800b4b8 <vQueueDelete>:
    return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	60fb      	str	r3, [r7, #12]

    traceENTER_vQueueDelete( xQueue );

    configASSERT( pxQueue );
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d110      	bne.n	800b4ec <vQueueDelete+0x34>
    __asm volatile
 800b4ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ce:	b672      	cpsid	i
 800b4d0:	f383 8811 	msr	BASEPRI, r3
 800b4d4:	f3bf 8f6f 	isb	sy
 800b4d8:	f3bf 8f4f 	dsb	sy
 800b4dc:	b662      	cpsie	i
 800b4de:	60bb      	str	r3, [r7, #8]
}
 800b4e0:	bf00      	nop
 800b4e2:	f640 01d4 	movw	r1, #2260	@ 0x8d4
 800b4e6:	4805      	ldr	r0, [pc, #20]	@ (800b4fc <vQueueDelete+0x44>)
 800b4e8:	f7f8 ff14 	bl	8004314 <vAssertCalled>

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
    {
        /* The queue can only have been allocated dynamically - free it
         * again. */
        vPortFree( pxQueue );
 800b4ec:	68f8      	ldr	r0, [r7, #12]
 800b4ee:	f7f9 fa87 	bl	8004a00 <vPortFree>
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

    traceRETURN_vQueueDelete();
}
 800b4f2:	bf00      	nop
 800b4f4:	3710      	adds	r7, #16
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}
 800b4fa:	bf00      	nop
 800b4fc:	0801400c 	.word	0x0801400c

0800b500 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800b500:	b480      	push	{r7}
 800b502:	b085      	sub	sp, #20
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d006      	beq.n	800b51e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f1c3 0307 	rsb	r3, r3, #7
 800b51a:	60fb      	str	r3, [r7, #12]
 800b51c:	e001      	b.n	800b522 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b51e:	2300      	movs	r3, #0
 800b520:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800b522:	68fb      	ldr	r3, [r7, #12]
    }
 800b524:	4618      	mov	r0, r3
 800b526:	3714      	adds	r7, #20
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr

0800b530 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b086      	sub	sp, #24
 800b534:	af00      	add	r7, sp, #0
 800b536:	60f8      	str	r0, [r7, #12]
 800b538:	60b9      	str	r1, [r7, #8]
 800b53a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800b53c:	2300      	movs	r3, #0
 800b53e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b544:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d10d      	bne.n	800b56a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d14d      	bne.n	800b5f2 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	689b      	ldr	r3, [r3, #8]
 800b55a:	4618      	mov	r0, r3
 800b55c:	f001 fcd2 	bl	800cf04 <xTaskPriorityDisinherit>
 800b560:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2200      	movs	r2, #0
 800b566:	609a      	str	r2, [r3, #8]
 800b568:	e043      	b.n	800b5f2 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d119      	bne.n	800b5a4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	6858      	ldr	r0, [r3, #4]
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b578:	461a      	mov	r2, r3
 800b57a:	68b9      	ldr	r1, [r7, #8]
 800b57c:	f005 f834 	bl	80105e8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	685a      	ldr	r2, [r3, #4]
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b588:	441a      	add	r2, r3
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	685a      	ldr	r2, [r3, #4]
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	689b      	ldr	r3, [r3, #8]
 800b596:	429a      	cmp	r2, r3
 800b598:	d32b      	bcc.n	800b5f2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681a      	ldr	r2, [r3, #0]
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	605a      	str	r2, [r3, #4]
 800b5a2:	e026      	b.n	800b5f2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	68d8      	ldr	r0, [r3, #12]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	68b9      	ldr	r1, [r7, #8]
 800b5b0:	f005 f81a 	bl	80105e8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	68da      	ldr	r2, [r3, #12]
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5bc:	425b      	negs	r3, r3
 800b5be:	441a      	add	r2, r3
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	68da      	ldr	r2, [r3, #12]
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d207      	bcs.n	800b5e0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	689a      	ldr	r2, [r3, #8]
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5d8:	425b      	negs	r3, r3
 800b5da:	441a      	add	r2, r3
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2b02      	cmp	r3, #2
 800b5e4:	d105      	bne.n	800b5f2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d002      	beq.n	800b5f2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	3b01      	subs	r3, #1
 800b5f0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	1c5a      	adds	r2, r3, #1
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800b5fa:	697b      	ldr	r3, [r7, #20]
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3718      	adds	r7, #24
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b612:	2b00      	cmp	r3, #0
 800b614:	d018      	beq.n	800b648 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	68da      	ldr	r2, [r3, #12]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b61e:	441a      	add	r2, r3
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	68da      	ldr	r2, [r3, #12]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	689b      	ldr	r3, [r3, #8]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d303      	bcc.n	800b638 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681a      	ldr	r2, [r3, #0]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	68d9      	ldr	r1, [r3, #12]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b640:	461a      	mov	r2, r3
 800b642:	6838      	ldr	r0, [r7, #0]
 800b644:	f004 ffd0 	bl	80105e8 <memcpy>
    }
}
 800b648:	bf00      	nop
 800b64a:	3708      	adds	r7, #8
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800b658:	f002 fa72 	bl	800db40 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b662:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800b664:	e011      	b.n	800b68a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d012      	beq.n	800b694 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	3324      	adds	r3, #36	@ 0x24
 800b672:	4618      	mov	r0, r3
 800b674:	f001 f86c 	bl	800c750 <xTaskRemoveFromEventList>
 800b678:	4603      	mov	r3, r0
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d001      	beq.n	800b682 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800b67e:	f001 f9cf 	bl	800ca20 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800b682:	7bfb      	ldrb	r3, [r7, #15]
 800b684:	3b01      	subs	r3, #1
 800b686:	b2db      	uxtb	r3, r3
 800b688:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800b68a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	dce9      	bgt.n	800b666 <prvUnlockQueue+0x16>
 800b692:	e000      	b.n	800b696 <prvUnlockQueue+0x46>
                    break;
 800b694:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	22ff      	movs	r2, #255	@ 0xff
 800b69a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800b69e:	f002 fa87 	bl	800dbb0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800b6a2:	f002 fa4d 	bl	800db40 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b6ac:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800b6ae:	e011      	b.n	800b6d4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	691b      	ldr	r3, [r3, #16]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d012      	beq.n	800b6de <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	3310      	adds	r3, #16
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f001 f847 	bl	800c750 <xTaskRemoveFromEventList>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d001      	beq.n	800b6cc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800b6c8:	f001 f9aa 	bl	800ca20 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800b6cc:	7bbb      	ldrb	r3, [r7, #14]
 800b6ce:	3b01      	subs	r3, #1
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800b6d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	dce9      	bgt.n	800b6b0 <prvUnlockQueue+0x60>
 800b6dc:	e000      	b.n	800b6e0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800b6de:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	22ff      	movs	r2, #255	@ 0xff
 800b6e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800b6e8:	f002 fa62 	bl	800dbb0 <vPortExitCritical>
}
 800b6ec:	bf00      	nop
 800b6ee:	3710      	adds	r7, #16
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800b6fc:	f002 fa20 	bl	800db40 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b704:	2b00      	cmp	r3, #0
 800b706:	d102      	bne.n	800b70e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800b708:	2301      	movs	r3, #1
 800b70a:	60fb      	str	r3, [r7, #12]
 800b70c:	e001      	b.n	800b712 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800b70e:	2300      	movs	r3, #0
 800b710:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800b712:	f002 fa4d 	bl	800dbb0 <vPortExitCritical>

    return xReturn;
 800b716:	68fb      	ldr	r3, [r7, #12]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3710      	adds	r7, #16
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800b728:	f002 fa0a 	bl	800db40 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b734:	429a      	cmp	r2, r3
 800b736:	d102      	bne.n	800b73e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800b738:	2301      	movs	r3, #1
 800b73a:	60fb      	str	r3, [r7, #12]
 800b73c:	e001      	b.n	800b742 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800b73e:	2300      	movs	r3, #0
 800b740:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800b742:	f002 fa35 	bl	800dbb0 <vPortExitCritical>

    return xReturn;
 800b746:	68fb      	ldr	r3, [r7, #12]
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3710      	adds	r7, #16
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800b750:	b580      	push	{r7, lr}
 800b752:	b086      	sub	sp, #24
 800b754:	af00      	add	r7, sp, #0
 800b756:	60f8      	str	r0, [r7, #12]
 800b758:	60b9      	str	r1, [r7, #8]
 800b75a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800b760:	f002 f9ee 	bl	800db40 <vPortEnterCritical>
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b76a:	b25b      	sxtb	r3, r3
 800b76c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b770:	d103      	bne.n	800b77a <vQueueWaitForMessageRestricted+0x2a>
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	2200      	movs	r2, #0
 800b776:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b780:	b25b      	sxtb	r3, r3
 800b782:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b786:	d103      	bne.n	800b790 <vQueueWaitForMessageRestricted+0x40>
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	2200      	movs	r2, #0
 800b78c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b790:	f002 fa0e 	bl	800dbb0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d106      	bne.n	800b7aa <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	3324      	adds	r3, #36	@ 0x24
 800b7a0:	687a      	ldr	r2, [r7, #4]
 800b7a2:	68b9      	ldr	r1, [r7, #8]
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f000 ff85 	bl	800c6b4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800b7aa:	6978      	ldr	r0, [r7, #20]
 800b7ac:	f7ff ff50 	bl	800b650 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 800b7b0:	bf00      	nop
 800b7b2:	3718      	adds	r7, #24
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}

0800b7b8 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b08a      	sub	sp, #40	@ 0x28
 800b7bc:	af04      	add	r7, sp, #16
 800b7be:	60f8      	str	r0, [r7, #12]
 800b7c0:	60b9      	str	r1, [r7, #8]
 800b7c2:	607a      	str	r2, [r7, #4]
 800b7c4:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	009b      	lsls	r3, r3, #2
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f7f9 f90a 	bl	80049e4 <pvPortMalloc>
 800b7d0:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d013      	beq.n	800b800 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800b7d8:	20b0      	movs	r0, #176	@ 0xb0
 800b7da:	f7f9 f903 	bl	80049e4 <pvPortMalloc>
 800b7de:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d008      	beq.n	800b7f8 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800b7e6:	22b0      	movs	r2, #176	@ 0xb0
 800b7e8:	2100      	movs	r1, #0
 800b7ea:	6978      	ldr	r0, [r7, #20]
 800b7ec:	f004 fd96 	bl	801031c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	693a      	ldr	r2, [r7, #16]
 800b7f4:	631a      	str	r2, [r3, #48]	@ 0x30
 800b7f6:	e005      	b.n	800b804 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800b7f8:	6938      	ldr	r0, [r7, #16]
 800b7fa:	f7f9 f901 	bl	8004a00 <vPortFree>
 800b7fe:	e001      	b.n	800b804 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800b800:	2300      	movs	r3, #0
 800b802:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d00d      	beq.n	800b826 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b80a:	2300      	movs	r3, #0
 800b80c:	9303      	str	r3, [sp, #12]
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	9302      	str	r3, [sp, #8]
 800b812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b814:	9301      	str	r3, [sp, #4]
 800b816:	6a3b      	ldr	r3, [r7, #32]
 800b818:	9300      	str	r3, [sp, #0]
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	68b9      	ldr	r1, [r7, #8]
 800b820:	68f8      	ldr	r0, [r7, #12]
 800b822:	f000 f829 	bl	800b878 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 800b826:	697b      	ldr	r3, [r7, #20]
    }
 800b828:	4618      	mov	r0, r3
 800b82a:	3718      	adds	r7, #24
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}

0800b830 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800b830:	b580      	push	{r7, lr}
 800b832:	b088      	sub	sp, #32
 800b834:	af02      	add	r7, sp, #8
 800b836:	60f8      	str	r0, [r7, #12]
 800b838:	60b9      	str	r1, [r7, #8]
 800b83a:	607a      	str	r2, [r7, #4]
 800b83c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800b83e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b840:	9301      	str	r3, [sp, #4]
 800b842:	6a3b      	ldr	r3, [r7, #32]
 800b844:	9300      	str	r3, [sp, #0]
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	68b9      	ldr	r1, [r7, #8]
 800b84c:	68f8      	ldr	r0, [r7, #12]
 800b84e:	f7ff ffb3 	bl	800b7b8 <prvCreateTask>
 800b852:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d005      	beq.n	800b866 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800b85a:	6938      	ldr	r0, [r7, #16]
 800b85c:	f000 f8c2 	bl	800b9e4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800b860:	2301      	movs	r3, #1
 800b862:	617b      	str	r3, [r7, #20]
 800b864:	e002      	b.n	800b86c <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b866:	f04f 33ff 	mov.w	r3, #4294967295
 800b86a:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 800b86c:	697b      	ldr	r3, [r7, #20]
    }
 800b86e:	4618      	mov	r0, r3
 800b870:	3718      	adds	r7, #24
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
	...

0800b878 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b088      	sub	sp, #32
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	60b9      	str	r1, [r7, #8]
 800b882:	607a      	str	r2, [r7, #4]
 800b884:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800b886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b888:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	009b      	lsls	r3, r3, #2
 800b88e:	461a      	mov	r2, r3
 800b890:	21a5      	movs	r1, #165	@ 0xa5
 800b892:	f004 fd43 	bl	801031c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800b896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b898:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b89a:	6879      	ldr	r1, [r7, #4]
 800b89c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b8a0:	440b      	add	r3, r1
 800b8a2:	009b      	lsls	r3, r3, #2
 800b8a4:	4413      	add	r3, r2
 800b8a6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800b8a8:	69bb      	ldr	r3, [r7, #24]
 800b8aa:	f023 0307 	bic.w	r3, r3, #7
 800b8ae:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 800b8b0:	69bb      	ldr	r3, [r7, #24]
 800b8b2:	f003 0307 	and.w	r3, r3, #7
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d010      	beq.n	800b8dc <prvInitialiseNewTask+0x64>
    __asm volatile
 800b8ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8be:	b672      	cpsid	i
 800b8c0:	f383 8811 	msr	BASEPRI, r3
 800b8c4:	f3bf 8f6f 	isb	sy
 800b8c8:	f3bf 8f4f 	dsb	sy
 800b8cc:	b662      	cpsie	i
 800b8ce:	617b      	str	r3, [r7, #20]
}
 800b8d0:	bf00      	nop
 800b8d2:	f240 712e 	movw	r1, #1838	@ 0x72e
 800b8d6:	483f      	ldr	r0, [pc, #252]	@ (800b9d4 <prvInitialiseNewTask+0x15c>)
 800b8d8:	f7f8 fd1c 	bl	8004314 <vAssertCalled>

        #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
        {
            /* Also record the stack's high address, which may assist
             * debugging. */
            pxNewTCB->pxEndOfStack = pxTopOfStack;
 800b8dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8de:	69ba      	ldr	r2, [r7, #24]
 800b8e0:	645a      	str	r2, [r3, #68]	@ 0x44
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d01e      	beq.n	800b926 <prvInitialiseNewTask+0xae>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	61fb      	str	r3, [r7, #28]
 800b8ec:	e012      	b.n	800b914 <prvInitialiseNewTask+0x9c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b8ee:	68ba      	ldr	r2, [r7, #8]
 800b8f0:	69fb      	ldr	r3, [r7, #28]
 800b8f2:	4413      	add	r3, r2
 800b8f4:	7819      	ldrb	r1, [r3, #0]
 800b8f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8f8:	69fb      	ldr	r3, [r7, #28]
 800b8fa:	4413      	add	r3, r2
 800b8fc:	3334      	adds	r3, #52	@ 0x34
 800b8fe:	460a      	mov	r2, r1
 800b900:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800b902:	68ba      	ldr	r2, [r7, #8]
 800b904:	69fb      	ldr	r3, [r7, #28]
 800b906:	4413      	add	r3, r2
 800b908:	781b      	ldrb	r3, [r3, #0]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d006      	beq.n	800b91c <prvInitialiseNewTask+0xa4>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b90e:	69fb      	ldr	r3, [r7, #28]
 800b910:	3301      	adds	r3, #1
 800b912:	61fb      	str	r3, [r7, #28]
 800b914:	69fb      	ldr	r3, [r7, #28]
 800b916:	2b0f      	cmp	r3, #15
 800b918:	d9e9      	bls.n	800b8ee <prvInitialiseNewTask+0x76>
 800b91a:	e000      	b.n	800b91e <prvInitialiseNewTask+0xa6>
            {
                break;
 800b91c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 800b91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b920:	2200      	movs	r2, #0
 800b922:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800b926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b928:	2b06      	cmp	r3, #6
 800b92a:	d910      	bls.n	800b94e <prvInitialiseNewTask+0xd6>
    __asm volatile
 800b92c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b930:	b672      	cpsid	i
 800b932:	f383 8811 	msr	BASEPRI, r3
 800b936:	f3bf 8f6f 	isb	sy
 800b93a:	f3bf 8f4f 	dsb	sy
 800b93e:	b662      	cpsie	i
 800b940:	613b      	str	r3, [r7, #16]
}
 800b942:	bf00      	nop
 800b944:	f240 7164 	movw	r1, #1892	@ 0x764
 800b948:	4822      	ldr	r0, [pc, #136]	@ (800b9d4 <prvInitialiseNewTask+0x15c>)
 800b94a:	f7f8 fce3 	bl	8004314 <vAssertCalled>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b94e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b950:	2b06      	cmp	r3, #6
 800b952:	d901      	bls.n	800b958 <prvInitialiseNewTask+0xe0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b954:	2306      	movs	r3, #6
 800b956:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800b958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b95a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b95c:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800b95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b960:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b962:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b966:	3304      	adds	r3, #4
 800b968:	4618      	mov	r0, r3
 800b96a:	f7ff f82f 	bl	800a9cc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b970:	3318      	adds	r3, #24
 800b972:	4618      	mov	r0, r3
 800b974:	f7ff f82a 	bl	800a9cc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b97a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b97c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800b97e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b980:	f1c3 0207 	rsb	r2, r3, #7
 800b984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b986:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b98a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b98c:	625a      	str	r2, [r3, #36]	@ 0x24
    #endif

    #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 800b98e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b990:	335c      	adds	r3, #92	@ 0x5c
 800b992:	224c      	movs	r2, #76	@ 0x4c
 800b994:	2100      	movs	r1, #0
 800b996:	4618      	mov	r0, r3
 800b998:	f004 fcc0 	bl	801031c <memset>
 800b99c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b99e:	4a0e      	ldr	r2, [pc, #56]	@ (800b9d8 <prvInitialiseNewTask+0x160>)
 800b9a0:	661a      	str	r2, [r3, #96]	@ 0x60
 800b9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9a4:	4a0d      	ldr	r2, [pc, #52]	@ (800b9dc <prvInitialiseNewTask+0x164>)
 800b9a6:	665a      	str	r2, [r3, #100]	@ 0x64
 800b9a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9aa:	4a0d      	ldr	r2, [pc, #52]	@ (800b9e0 <prvInitialiseNewTask+0x168>)
 800b9ac:	669a      	str	r2, [r3, #104]	@ 0x68
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b9ae:	683a      	ldr	r2, [r7, #0]
 800b9b0:	68f9      	ldr	r1, [r7, #12]
 800b9b2:	69b8      	ldr	r0, [r7, #24]
 800b9b4:	f001 ff50 	bl	800d858 <pxPortInitialiseStack>
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9bc:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 800b9be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d002      	beq.n	800b9ca <prvInitialiseNewTask+0x152>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b9c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9c8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800b9ca:	bf00      	nop
 800b9cc:	3720      	adds	r7, #32
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	08014080 	.word	0x08014080
 800b9d8:	20000568 	.word	0x20000568
 800b9dc:	200005d0 	.word	0x200005d0
 800b9e0:	20000638 	.word	0x20000638

0800b9e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b084      	sub	sp, #16
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 800b9ec:	f002 f8a8 	bl	800db40 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 800b9f0:	4b41      	ldr	r3, [pc, #260]	@ (800baf8 <prvAddNewTaskToReadyList+0x114>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	4a40      	ldr	r2, [pc, #256]	@ (800baf8 <prvAddNewTaskToReadyList+0x114>)
 800b9f8:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800b9fa:	4b40      	ldr	r3, [pc, #256]	@ (800bafc <prvAddNewTaskToReadyList+0x118>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d109      	bne.n	800ba16 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 800ba02:	4a3e      	ldr	r2, [pc, #248]	@ (800bafc <prvAddNewTaskToReadyList+0x118>)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ba08:	4b3b      	ldr	r3, [pc, #236]	@ (800baf8 <prvAddNewTaskToReadyList+0x114>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	2b01      	cmp	r3, #1
 800ba0e:	d110      	bne.n	800ba32 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 800ba10:	f001 f82a 	bl	800ca68 <prvInitialiseTaskLists>
 800ba14:	e00d      	b.n	800ba32 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800ba16:	4b3a      	ldr	r3, [pc, #232]	@ (800bb00 <prvAddNewTaskToReadyList+0x11c>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d109      	bne.n	800ba32 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ba1e:	4b37      	ldr	r3, [pc, #220]	@ (800bafc <prvAddNewTaskToReadyList+0x118>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d802      	bhi.n	800ba32 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 800ba2c:	4a33      	ldr	r2, [pc, #204]	@ (800bafc <prvAddNewTaskToReadyList+0x118>)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 800ba32:	4b34      	ldr	r3, [pc, #208]	@ (800bb04 <prvAddNewTaskToReadyList+0x120>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	3301      	adds	r3, #1
 800ba38:	4a32      	ldr	r2, [pc, #200]	@ (800bb04 <prvAddNewTaskToReadyList+0x120>)
 800ba3a:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ba3c:	4b31      	ldr	r3, [pc, #196]	@ (800bb04 <prvAddNewTaskToReadyList+0x120>)
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	649a      	str	r2, [r3, #72]	@ 0x48
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba48:	2201      	movs	r2, #1
 800ba4a:	409a      	lsls	r2, r3
 800ba4c:	4b2e      	ldr	r3, [pc, #184]	@ (800bb08 <prvAddNewTaskToReadyList+0x124>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4313      	orrs	r3, r2
 800ba52:	4a2d      	ldr	r2, [pc, #180]	@ (800bb08 <prvAddNewTaskToReadyList+0x124>)
 800ba54:	6013      	str	r3, [r2, #0]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba5a:	492c      	ldr	r1, [pc, #176]	@ (800bb0c <prvAddNewTaskToReadyList+0x128>)
 800ba5c:	4613      	mov	r3, r2
 800ba5e:	009b      	lsls	r3, r3, #2
 800ba60:	4413      	add	r3, r2
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	440b      	add	r3, r1
 800ba66:	3304      	adds	r3, #4
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	60fb      	str	r3, [r7, #12]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	68fa      	ldr	r2, [r7, #12]
 800ba70:	609a      	str	r2, [r3, #8]
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	689a      	ldr	r2, [r3, #8]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	60da      	str	r2, [r3, #12]
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	689b      	ldr	r3, [r3, #8]
 800ba7e:	687a      	ldr	r2, [r7, #4]
 800ba80:	3204      	adds	r2, #4
 800ba82:	605a      	str	r2, [r3, #4]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	1d1a      	adds	r2, r3, #4
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	609a      	str	r2, [r3, #8]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba90:	4613      	mov	r3, r2
 800ba92:	009b      	lsls	r3, r3, #2
 800ba94:	4413      	add	r3, r2
 800ba96:	009b      	lsls	r3, r3, #2
 800ba98:	4a1c      	ldr	r2, [pc, #112]	@ (800bb0c <prvAddNewTaskToReadyList+0x128>)
 800ba9a:	441a      	add	r2, r3
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	615a      	str	r2, [r3, #20]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baa4:	4919      	ldr	r1, [pc, #100]	@ (800bb0c <prvAddNewTaskToReadyList+0x128>)
 800baa6:	4613      	mov	r3, r2
 800baa8:	009b      	lsls	r3, r3, #2
 800baaa:	4413      	add	r3, r2
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	440b      	add	r3, r1
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800bab6:	1c59      	adds	r1, r3, #1
 800bab8:	4814      	ldr	r0, [pc, #80]	@ (800bb0c <prvAddNewTaskToReadyList+0x128>)
 800baba:	4613      	mov	r3, r2
 800babc:	009b      	lsls	r3, r3, #2
 800babe:	4413      	add	r3, r2
 800bac0:	009b      	lsls	r3, r3, #2
 800bac2:	4403      	add	r3, r0
 800bac4:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800bac6:	f002 f873 	bl	800dbb0 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800baca:	4b0d      	ldr	r3, [pc, #52]	@ (800bb00 <prvAddNewTaskToReadyList+0x11c>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d00e      	beq.n	800baf0 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800bad2:	4b0a      	ldr	r3, [pc, #40]	@ (800bafc <prvAddNewTaskToReadyList+0x118>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800badc:	429a      	cmp	r2, r3
 800bade:	d207      	bcs.n	800baf0 <prvAddNewTaskToReadyList+0x10c>
 800bae0:	4b0b      	ldr	r3, [pc, #44]	@ (800bb10 <prvAddNewTaskToReadyList+0x12c>)
 800bae2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bae6:	601a      	str	r2, [r3, #0]
 800bae8:	f3bf 8f4f 	dsb	sy
 800baec:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800baf0:	bf00      	nop
 800baf2:	3710      	adds	r7, #16
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}
 800baf8:	200004e4 	.word	0x200004e4
 800bafc:	200003e4 	.word	0x200003e4
 800bb00:	200004f0 	.word	0x200004f0
 800bb04:	20000500 	.word	0x20000500
 800bb08:	200004ec 	.word	0x200004ec
 800bb0c:	200003e8 	.word	0x200003e8
 800bb10:	e000ed04 	.word	0xe000ed04

0800bb14 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b086      	sub	sp, #24
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 800bb20:	f002 f80e 	bl	800db40 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d102      	bne.n	800bb30 <vTaskDelete+0x1c>
 800bb2a:	4b44      	ldr	r3, [pc, #272]	@ (800bc3c <vTaskDelete+0x128>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	e000      	b.n	800bb32 <vTaskDelete+0x1e>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	3304      	adds	r3, #4
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7fe ffb1 	bl	800aaa0 <uxListRemove>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d115      	bne.n	800bb70 <vTaskDelete+0x5c>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb48:	493d      	ldr	r1, [pc, #244]	@ (800bc40 <vTaskDelete+0x12c>)
 800bb4a:	4613      	mov	r3, r2
 800bb4c:	009b      	lsls	r3, r3, #2
 800bb4e:	4413      	add	r3, r2
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	440b      	add	r3, r1
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d10a      	bne.n	800bb70 <vTaskDelete+0x5c>
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb5e:	2201      	movs	r2, #1
 800bb60:	fa02 f303 	lsl.w	r3, r2, r3
 800bb64:	43da      	mvns	r2, r3
 800bb66:	4b37      	ldr	r3, [pc, #220]	@ (800bc44 <vTaskDelete+0x130>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4013      	ands	r3, r2
 800bb6c:	4a35      	ldr	r2, [pc, #212]	@ (800bc44 <vTaskDelete+0x130>)
 800bb6e:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d004      	beq.n	800bb82 <vTaskDelete+0x6e>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	3318      	adds	r3, #24
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7fe ff8f 	bl	800aaa0 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800bb82:	4b31      	ldr	r3, [pc, #196]	@ (800bc48 <vTaskDelete+0x134>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	3301      	adds	r3, #1
 800bb88:	4a2f      	ldr	r2, [pc, #188]	@ (800bc48 <vTaskDelete+0x134>)
 800bb8a:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 800bb8c:	4b2b      	ldr	r3, [pc, #172]	@ (800bc3c <vTaskDelete+0x128>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	693a      	ldr	r2, [r7, #16]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d101      	bne.n	800bb9a <vTaskDelete+0x86>
 800bb96:	2301      	movs	r3, #1
 800bb98:	e000      	b.n	800bb9c <vTaskDelete+0x88>
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 800bb9e:	4b2b      	ldr	r3, [pc, #172]	@ (800bc4c <vTaskDelete+0x138>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d010      	beq.n	800bbc8 <vTaskDelete+0xb4>
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d00d      	beq.n	800bbc8 <vTaskDelete+0xb4>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	3304      	adds	r3, #4
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	4827      	ldr	r0, [pc, #156]	@ (800bc50 <vTaskDelete+0x13c>)
 800bbb4:	f7fe ff17 	bl	800a9e6 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 800bbb8:	4b26      	ldr	r3, [pc, #152]	@ (800bc54 <vTaskDelete+0x140>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	4a25      	ldr	r2, [pc, #148]	@ (800bc54 <vTaskDelete+0x140>)
 800bbc0:	6013      	str	r3, [r2, #0]
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	617b      	str	r3, [r7, #20]
 800bbc6:	e006      	b.n	800bbd6 <vTaskDelete+0xc2>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 800bbc8:	4b23      	ldr	r3, [pc, #140]	@ (800bc58 <vTaskDelete+0x144>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	3b01      	subs	r3, #1
 800bbce:	4a22      	ldr	r2, [pc, #136]	@ (800bc58 <vTaskDelete+0x144>)
 800bbd0:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 800bbd2:	f001 f8ad 	bl	800cd30 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800bbd6:	f001 ffeb 	bl	800dbb0 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d002      	beq.n	800bbe6 <vTaskDelete+0xd2>
        {
            prvDeleteTCB( pxTCB );
 800bbe0:	6938      	ldr	r0, [r7, #16]
 800bbe2:	f001 f88f 	bl	800cd04 <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 800bbe6:	4b19      	ldr	r3, [pc, #100]	@ (800bc4c <vTaskDelete+0x138>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d021      	beq.n	800bc32 <vTaskDelete+0x11e>
            {
                if( pxTCB == pxCurrentTCB )
 800bbee:	4b13      	ldr	r3, [pc, #76]	@ (800bc3c <vTaskDelete+0x128>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	693a      	ldr	r2, [r7, #16]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d11c      	bne.n	800bc32 <vTaskDelete+0x11e>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 800bbf8:	4b18      	ldr	r3, [pc, #96]	@ (800bc5c <vTaskDelete+0x148>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d010      	beq.n	800bc22 <vTaskDelete+0x10e>
    __asm volatile
 800bc00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc04:	b672      	cpsid	i
 800bc06:	f383 8811 	msr	BASEPRI, r3
 800bc0a:	f3bf 8f6f 	isb	sy
 800bc0e:	f3bf 8f4f 	dsb	sy
 800bc12:	b662      	cpsie	i
 800bc14:	60bb      	str	r3, [r7, #8]
}
 800bc16:	bf00      	nop
 800bc18:	f640 1114 	movw	r1, #2324	@ 0x914
 800bc1c:	4810      	ldr	r0, [pc, #64]	@ (800bc60 <vTaskDelete+0x14c>)
 800bc1e:	f7f8 fb79 	bl	8004314 <vAssertCalled>
                    taskYIELD_WITHIN_API();
 800bc22:	4b10      	ldr	r3, [pc, #64]	@ (800bc64 <vTaskDelete+0x150>)
 800bc24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc28:	601a      	str	r2, [r3, #0]
 800bc2a:	f3bf 8f4f 	dsb	sy
 800bc2e:	f3bf 8f6f 	isb	sy
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
 800bc32:	bf00      	nop
 800bc34:	3718      	adds	r7, #24
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	200003e4 	.word	0x200003e4
 800bc40:	200003e8 	.word	0x200003e8
 800bc44:	200004ec 	.word	0x200004ec
 800bc48:	20000500 	.word	0x20000500
 800bc4c:	200004f0 	.word	0x200004f0
 800bc50:	200004b8 	.word	0x200004b8
 800bc54:	200004cc 	.word	0x200004cc
 800bc58:	200004e4 	.word	0x200004e4
 800bc5c:	2000050c 	.word	0x2000050c
 800bc60:	08014080 	.word	0x08014080
 800bc64:	e000ed04 	.word	0xe000ed04

0800bc68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800bc70:	2300      	movs	r3, #0
 800bc72:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d01d      	beq.n	800bcb6 <vTaskDelay+0x4e>
        {
            vTaskSuspendAll();
 800bc7a:	f000 f961 	bl	800bf40 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 800bc7e:	4b15      	ldr	r3, [pc, #84]	@ (800bcd4 <vTaskDelay+0x6c>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	d010      	beq.n	800bca8 <vTaskDelay+0x40>
    __asm volatile
 800bc86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc8a:	b672      	cpsid	i
 800bc8c:	f383 8811 	msr	BASEPRI, r3
 800bc90:	f3bf 8f6f 	isb	sy
 800bc94:	f3bf 8f4f 	dsb	sy
 800bc98:	b662      	cpsie	i
 800bc9a:	60bb      	str	r3, [r7, #8]
}
 800bc9c:	bf00      	nop
 800bc9e:	f640 118e 	movw	r1, #2446	@ 0x98e
 800bca2:	480d      	ldr	r0, [pc, #52]	@ (800bcd8 <vTaskDelay+0x70>)
 800bca4:	f7f8 fb36 	bl	8004314 <vAssertCalled>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bca8:	2100      	movs	r1, #0
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f001 fac0 	bl	800d230 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800bcb0:	f000 f954 	bl	800bf5c <xTaskResumeAll>
 800bcb4:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d107      	bne.n	800bccc <vTaskDelay+0x64>
        {
            taskYIELD_WITHIN_API();
 800bcbc:	4b07      	ldr	r3, [pc, #28]	@ (800bcdc <vTaskDelay+0x74>)
 800bcbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcc2:	601a      	str	r2, [r3, #0]
 800bcc4:	f3bf 8f4f 	dsb	sy
 800bcc8:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 800bccc:	bf00      	nop
 800bcce:	3710      	adds	r7, #16
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	2000050c 	.word	0x2000050c
 800bcd8:	08014080 	.word	0x08014080
 800bcdc:	e000ed04 	.word	0xe000ed04

0800bce0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

    eTaskState eTaskGetState( TaskHandle_t xTask )
    {
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b08a      	sub	sp, #40	@ 0x28
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
        eTaskState eReturn;
        List_t const * pxStateList;
        List_t const * pxEventList;
        List_t const * pxDelayedList;
        List_t const * pxOverflowedDelayedList;
        const TCB_t * const pxTCB = xTask;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	61fb      	str	r3, [r7, #28]

        traceENTER_eTaskGetState( xTask );

        configASSERT( pxTCB );
 800bcec:	69fb      	ldr	r3, [r7, #28]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d110      	bne.n	800bd14 <eTaskGetState+0x34>
    __asm volatile
 800bcf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcf6:	b672      	cpsid	i
 800bcf8:	f383 8811 	msr	BASEPRI, r3
 800bcfc:	f3bf 8f6f 	isb	sy
 800bd00:	f3bf 8f4f 	dsb	sy
 800bd04:	b662      	cpsie	i
 800bd06:	60bb      	str	r3, [r7, #8]
}
 800bd08:	bf00      	nop
 800bd0a:	f44f 611c 	mov.w	r1, #2496	@ 0x9c0
 800bd0e:	4834      	ldr	r0, [pc, #208]	@ (800bde0 <eTaskGetState+0x100>)
 800bd10:	f7f8 fb00 	bl	8004314 <vAssertCalled>

        #if ( configNUMBER_OF_CORES == 1 )
            if( pxTCB == pxCurrentTCB )
 800bd14:	4b33      	ldr	r3, [pc, #204]	@ (800bde4 <eTaskGetState+0x104>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	69fa      	ldr	r2, [r7, #28]
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d103      	bne.n	800bd26 <eTaskGetState+0x46>
            {
                /* The task calling this function is querying its own state. */
                eReturn = eRunning;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bd24:	e056      	b.n	800bdd4 <eTaskGetState+0xf4>
            }
            else
        #endif
        {
            taskENTER_CRITICAL();
 800bd26:	f001 ff0b 	bl	800db40 <vPortEnterCritical>
            {
                pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800bd2a:	69fb      	ldr	r3, [r7, #28]
 800bd2c:	695b      	ldr	r3, [r3, #20]
 800bd2e:	61bb      	str	r3, [r7, #24]
                pxEventList = listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) );
 800bd30:	69fb      	ldr	r3, [r7, #28]
 800bd32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd34:	617b      	str	r3, [r7, #20]
                pxDelayedList = pxDelayedTaskList;
 800bd36:	4b2c      	ldr	r3, [pc, #176]	@ (800bde8 <eTaskGetState+0x108>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	613b      	str	r3, [r7, #16]
                pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800bd3c:	4b2b      	ldr	r3, [pc, #172]	@ (800bdec <eTaskGetState+0x10c>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	60fb      	str	r3, [r7, #12]
            }
            taskEXIT_CRITICAL();
 800bd42:	f001 ff35 	bl	800dbb0 <vPortExitCritical>

            if( pxEventList == &xPendingReadyList )
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	4a29      	ldr	r2, [pc, #164]	@ (800bdf0 <eTaskGetState+0x110>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d103      	bne.n	800bd56 <eTaskGetState+0x76>
            {
                /* The task has been placed on the pending ready list, so its
                 * state is eReady regardless of what list the task's state list
                 * item is currently placed on. */
                eReturn = eReady;
 800bd4e:	2301      	movs	r3, #1
 800bd50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bd54:	e03e      	b.n	800bdd4 <eTaskGetState+0xf4>
            }
            else if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800bd56:	69ba      	ldr	r2, [r7, #24]
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d003      	beq.n	800bd66 <eTaskGetState+0x86>
 800bd5e:	69ba      	ldr	r2, [r7, #24]
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d103      	bne.n	800bd6e <eTaskGetState+0x8e>
            {
                /* The task being queried is referenced from one of the Blocked
                 * lists. */
                eReturn = eBlocked;
 800bd66:	2302      	movs	r3, #2
 800bd68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bd6c:	e032      	b.n	800bdd4 <eTaskGetState+0xf4>
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                else if( pxStateList == &xSuspendedTaskList )
 800bd6e:	69bb      	ldr	r3, [r7, #24]
 800bd70:	4a20      	ldr	r2, [pc, #128]	@ (800bdf4 <eTaskGetState+0x114>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d120      	bne.n	800bdb8 <eTaskGetState+0xd8>
                {
                    /* The task being queried is referenced from the suspended
                     * list.  Is it genuinely suspended or is it blocked
                     * indefinitely? */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800bd76:	69fb      	ldr	r3, [r7, #28]
 800bd78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d118      	bne.n	800bdb0 <eTaskGetState+0xd0>
                            /* The task does not appear on the event list item of
                             * and of the RTOS objects, but could still be in the
                             * blocked state if it is waiting on its notification
                             * rather than waiting on an object.  If not, is
                             * suspended. */
                            eReturn = eSuspended;
 800bd7e:	2303      	movs	r3, #3
 800bd80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                            for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800bd84:	2300      	movs	r3, #0
 800bd86:	623b      	str	r3, [r7, #32]
 800bd88:	e00e      	b.n	800bda8 <eTaskGetState+0xc8>
                            {
                                if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 800bd8a:	69fa      	ldr	r2, [r7, #28]
 800bd8c:	6a3b      	ldr	r3, [r7, #32]
 800bd8e:	4413      	add	r3, r2
 800bd90:	33ac      	adds	r3, #172	@ 0xac
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	b2db      	uxtb	r3, r3
 800bd96:	2b01      	cmp	r3, #1
 800bd98:	d103      	bne.n	800bda2 <eTaskGetState+0xc2>
                                {
                                    eReturn = eBlocked;
 800bd9a:	2302      	movs	r3, #2
 800bd9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                    break;
 800bda0:	e018      	b.n	800bdd4 <eTaskGetState+0xf4>
                            for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800bda2:	6a3b      	ldr	r3, [r7, #32]
 800bda4:	3301      	adds	r3, #1
 800bda6:	623b      	str	r3, [r7, #32]
 800bda8:	6a3b      	ldr	r3, [r7, #32]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	dded      	ble.n	800bd8a <eTaskGetState+0xaa>
 800bdae:	e011      	b.n	800bdd4 <eTaskGetState+0xf4>
                        }
                        #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
                    }
                    else
                    {
                        eReturn = eBlocked;
 800bdb0:	2302      	movs	r3, #2
 800bdb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bdb6:	e00d      	b.n	800bdd4 <eTaskGetState+0xf4>
                    }
                }
            #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */

            #if ( INCLUDE_vTaskDelete == 1 )
                else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800bdb8:	69bb      	ldr	r3, [r7, #24]
 800bdba:	4a0f      	ldr	r2, [pc, #60]	@ (800bdf8 <eTaskGetState+0x118>)
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d002      	beq.n	800bdc6 <eTaskGetState+0xe6>
 800bdc0:	69bb      	ldr	r3, [r7, #24]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d103      	bne.n	800bdce <eTaskGetState+0xee>
                {
                    /* The task being queried is referenced from the deleted
                     * tasks list, or it is not referenced from any lists at
                     * all. */
                    eReturn = eDeleted;
 800bdc6:	2304      	movs	r3, #4
 800bdc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bdcc:	e002      	b.n	800bdd4 <eTaskGetState+0xf4>
            {
                #if ( configNUMBER_OF_CORES == 1 )
                {
                    /* If the task is not in any other state, it must be in the
                     * Ready (including pending ready) state. */
                    eReturn = eReady;
 800bdce:	2301      	movs	r3, #1
 800bdd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
        }

        traceRETURN_eTaskGetState( eReturn );

        return eReturn;
 800bdd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
    }
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3728      	adds	r7, #40	@ 0x28
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}
 800bde0:	08014080 	.word	0x08014080
 800bde4:	200003e4 	.word	0x200003e4
 800bde8:	2000049c 	.word	0x2000049c
 800bdec:	200004a0 	.word	0x200004a0
 800bdf0:	200004a4 	.word	0x200004a4
 800bdf4:	200004d0 	.word	0x200004d0
 800bdf8:	200004b8 	.word	0x200004b8

0800bdfc <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b08a      	sub	sp, #40	@ 0x28
 800be00:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 800be02:	2301      	movs	r3, #1
 800be04:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 800be06:	2300      	movs	r3, #0
 800be08:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800be0a:	2300      	movs	r3, #0
 800be0c:	617b      	str	r3, [r7, #20]
 800be0e:	e011      	b.n	800be34 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 800be10:	4a1d      	ldr	r2, [pc, #116]	@ (800be88 <prvCreateIdleTasks+0x8c>)
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	4413      	add	r3, r2
 800be16:	7819      	ldrb	r1, [r3, #0]
 800be18:	463a      	mov	r2, r7
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	4413      	add	r3, r2
 800be1e:	460a      	mov	r2, r1
 800be20:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 800be22:	463a      	mov	r2, r7
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	4413      	add	r3, r2
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d006      	beq.n	800be3c <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	3301      	adds	r3, #1
 800be32:	617b      	str	r3, [r7, #20]
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	2b0f      	cmp	r3, #15
 800be38:	ddea      	ble.n	800be10 <prvCreateIdleTasks+0x14>
 800be3a:	e000      	b.n	800be3e <prvCreateIdleTasks+0x42>
        {
            break;
 800be3c:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800be3e:	2300      	movs	r3, #0
 800be40:	61bb      	str	r3, [r7, #24]
 800be42:	e016      	b.n	800be72 <prvCreateIdleTasks+0x76>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 800be44:	4b11      	ldr	r3, [pc, #68]	@ (800be8c <prvCreateIdleTasks+0x90>)
 800be46:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 800be48:	69bb      	ldr	r3, [r7, #24]
 800be4a:	009b      	lsls	r3, r3, #2
 800be4c:	4a10      	ldr	r2, [pc, #64]	@ (800be90 <prvCreateIdleTasks+0x94>)
 800be4e:	4413      	add	r3, r2
 800be50:	4639      	mov	r1, r7
 800be52:	9301      	str	r3, [sp, #4]
 800be54:	2300      	movs	r3, #0
 800be56:	9300      	str	r3, [sp, #0]
 800be58:	2300      	movs	r3, #0
 800be5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800be5e:	6938      	ldr	r0, [r7, #16]
 800be60:	f7ff fce6 	bl	800b830 <xTaskCreate>
 800be64:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 800be66:	69fb      	ldr	r3, [r7, #28]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d006      	beq.n	800be7a <prvCreateIdleTasks+0x7e>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800be6c:	69bb      	ldr	r3, [r7, #24]
 800be6e:	3301      	adds	r3, #1
 800be70:	61bb      	str	r3, [r7, #24]
 800be72:	69bb      	ldr	r3, [r7, #24]
 800be74:	2b00      	cmp	r3, #0
 800be76:	dde5      	ble.n	800be44 <prvCreateIdleTasks+0x48>
 800be78:	e000      	b.n	800be7c <prvCreateIdleTasks+0x80>
        {
            break;
 800be7a:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800be7c:	69fb      	ldr	r3, [r7, #28]
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3720      	adds	r7, #32
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	080140f4 	.word	0x080140f4
 800be8c:	0800ca39 	.word	0x0800ca39
 800be90:	20000508 	.word	0x20000508

0800be94 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b084      	sub	sp, #16
 800be98:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 800be9a:	f7ff ffaf 	bl	800bdfc <prvCreateIdleTasks>
 800be9e:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	2b01      	cmp	r3, #1
 800bea4:	d102      	bne.n	800beac <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 800bea6:	f001 fa45 	bl	800d334 <xTimerCreateTimerTask>
 800beaa:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2b01      	cmp	r3, #1
 800beb0:	d11d      	bne.n	800beee <vTaskStartScheduler+0x5a>
    __asm volatile
 800beb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beb6:	b672      	cpsid	i
 800beb8:	f383 8811 	msr	BASEPRI, r3
 800bebc:	f3bf 8f6f 	isb	sy
 800bec0:	f3bf 8f4f 	dsb	sy
 800bec4:	b662      	cpsie	i
 800bec6:	60bb      	str	r3, [r7, #8]
}
 800bec8:	bf00      	nop

        #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800beca:	4b16      	ldr	r3, [pc, #88]	@ (800bf24 <vTaskStartScheduler+0x90>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	335c      	adds	r3, #92	@ 0x5c
 800bed0:	4a15      	ldr	r2, [pc, #84]	@ (800bf28 <vTaskStartScheduler+0x94>)
 800bed2:	6013      	str	r3, [r2, #0]
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800bed4:	4b15      	ldr	r3, [pc, #84]	@ (800bf2c <vTaskStartScheduler+0x98>)
 800bed6:	f04f 32ff 	mov.w	r2, #4294967295
 800beda:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800bedc:	4b14      	ldr	r3, [pc, #80]	@ (800bf30 <vTaskStartScheduler+0x9c>)
 800bede:	2201      	movs	r2, #1
 800bee0:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bee2:	4b14      	ldr	r3, [pc, #80]	@ (800bf34 <vTaskStartScheduler+0xa0>)
 800bee4:	2200      	movs	r2, #0
 800bee6:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 800bee8:	f001 fd4c 	bl	800d984 <xPortStartScheduler>
 800beec:	e014      	b.n	800bf18 <vTaskStartScheduler+0x84>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bef4:	d110      	bne.n	800bf18 <vTaskStartScheduler+0x84>
    __asm volatile
 800bef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800befa:	b672      	cpsid	i
 800befc:	f383 8811 	msr	BASEPRI, r3
 800bf00:	f3bf 8f6f 	isb	sy
 800bf04:	f3bf 8f4f 	dsb	sy
 800bf08:	b662      	cpsie	i
 800bf0a:	607b      	str	r3, [r7, #4]
}
 800bf0c:	bf00      	nop
 800bf0e:	f640 61a9 	movw	r1, #3753	@ 0xea9
 800bf12:	4809      	ldr	r0, [pc, #36]	@ (800bf38 <vTaskStartScheduler+0xa4>)
 800bf14:	f7f8 f9fe 	bl	8004314 <vAssertCalled>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800bf18:	4b08      	ldr	r3, [pc, #32]	@ (800bf3c <vTaskStartScheduler+0xa8>)
 800bf1a:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 800bf1c:	bf00      	nop
 800bf1e:	3710      	adds	r7, #16
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	200003e4 	.word	0x200003e4
 800bf28:	200001c0 	.word	0x200001c0
 800bf2c:	20000504 	.word	0x20000504
 800bf30:	200004f0 	.word	0x200004f0
 800bf34:	200004e8 	.word	0x200004e8
 800bf38:	08014080 	.word	0x08014080
 800bf3c:	08014504 	.word	0x08014504

0800bf40 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bf40:	b480      	push	{r7}
 800bf42:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 800bf44:	4b04      	ldr	r3, [pc, #16]	@ (800bf58 <vTaskSuspendAll+0x18>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	3301      	adds	r3, #1
 800bf4a:	4a03      	ldr	r2, [pc, #12]	@ (800bf58 <vTaskSuspendAll+0x18>)
 800bf4c:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 800bf4e:	bf00      	nop
 800bf50:	46bd      	mov	sp, r7
 800bf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf56:	4770      	bx	lr
 800bf58:	2000050c 	.word	0x2000050c

0800bf5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b088      	sub	sp, #32
 800bf60:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800bf62:	2300      	movs	r3, #0
 800bf64:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800bf66:	2300      	movs	r3, #0
 800bf68:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800bf6a:	f001 fde9 	bl	800db40 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800bf6e:	2300      	movs	r3, #0
 800bf70:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800bf72:	4b78      	ldr	r3, [pc, #480]	@ (800c154 <xTaskResumeAll+0x1f8>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d110      	bne.n	800bf9c <xTaskResumeAll+0x40>
    __asm volatile
 800bf7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf7e:	b672      	cpsid	i
 800bf80:	f383 8811 	msr	BASEPRI, r3
 800bf84:	f3bf 8f6f 	isb	sy
 800bf88:	f3bf 8f4f 	dsb	sy
 800bf8c:	b662      	cpsie	i
 800bf8e:	603b      	str	r3, [r7, #0]
}
 800bf90:	bf00      	nop
 800bf92:	f640 718b 	movw	r1, #3979	@ 0xf8b
 800bf96:	4870      	ldr	r0, [pc, #448]	@ (800c158 <xTaskResumeAll+0x1fc>)
 800bf98:	f7f8 f9bc 	bl	8004314 <vAssertCalled>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800bf9c:	4b6d      	ldr	r3, [pc, #436]	@ (800c154 <xTaskResumeAll+0x1f8>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	3b01      	subs	r3, #1
 800bfa2:	4a6c      	ldr	r2, [pc, #432]	@ (800c154 <xTaskResumeAll+0x1f8>)
 800bfa4:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800bfa6:	4b6b      	ldr	r3, [pc, #428]	@ (800c154 <xTaskResumeAll+0x1f8>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	f040 80ca 	bne.w	800c144 <xTaskResumeAll+0x1e8>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bfb0:	4b6a      	ldr	r3, [pc, #424]	@ (800c15c <xTaskResumeAll+0x200>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	f000 80c5 	beq.w	800c144 <xTaskResumeAll+0x1e8>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bfba:	e08e      	b.n	800c0da <xTaskResumeAll+0x17e>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800bfbc:	4b68      	ldr	r3, [pc, #416]	@ (800c160 <xTaskResumeAll+0x204>)
 800bfbe:	68db      	ldr	r3, [r3, #12]
 800bfc0:	68db      	ldr	r3, [r3, #12]
 800bfc2:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800bfc4:	69fb      	ldr	r3, [r7, #28]
 800bfc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfc8:	60fb      	str	r3, [r7, #12]
 800bfca:	69fb      	ldr	r3, [r7, #28]
 800bfcc:	69db      	ldr	r3, [r3, #28]
 800bfce:	69fa      	ldr	r2, [r7, #28]
 800bfd0:	6a12      	ldr	r2, [r2, #32]
 800bfd2:	609a      	str	r2, [r3, #8]
 800bfd4:	69fb      	ldr	r3, [r7, #28]
 800bfd6:	6a1b      	ldr	r3, [r3, #32]
 800bfd8:	69fa      	ldr	r2, [r7, #28]
 800bfda:	69d2      	ldr	r2, [r2, #28]
 800bfdc:	605a      	str	r2, [r3, #4]
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	685a      	ldr	r2, [r3, #4]
 800bfe2:	69fb      	ldr	r3, [r7, #28]
 800bfe4:	3318      	adds	r3, #24
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d103      	bne.n	800bff2 <xTaskResumeAll+0x96>
 800bfea:	69fb      	ldr	r3, [r7, #28]
 800bfec:	6a1a      	ldr	r2, [r3, #32]
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	605a      	str	r2, [r3, #4]
 800bff2:	69fb      	ldr	r3, [r7, #28]
 800bff4:	2200      	movs	r2, #0
 800bff6:	629a      	str	r2, [r3, #40]	@ 0x28
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	1e5a      	subs	r2, r3, #1
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800c002:	69fb      	ldr	r3, [r7, #28]
 800c004:	695b      	ldr	r3, [r3, #20]
 800c006:	60bb      	str	r3, [r7, #8]
 800c008:	69fb      	ldr	r3, [r7, #28]
 800c00a:	689b      	ldr	r3, [r3, #8]
 800c00c:	69fa      	ldr	r2, [r7, #28]
 800c00e:	68d2      	ldr	r2, [r2, #12]
 800c010:	609a      	str	r2, [r3, #8]
 800c012:	69fb      	ldr	r3, [r7, #28]
 800c014:	68db      	ldr	r3, [r3, #12]
 800c016:	69fa      	ldr	r2, [r7, #28]
 800c018:	6892      	ldr	r2, [r2, #8]
 800c01a:	605a      	str	r2, [r3, #4]
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	685a      	ldr	r2, [r3, #4]
 800c020:	69fb      	ldr	r3, [r7, #28]
 800c022:	3304      	adds	r3, #4
 800c024:	429a      	cmp	r2, r3
 800c026:	d103      	bne.n	800c030 <xTaskResumeAll+0xd4>
 800c028:	69fb      	ldr	r3, [r7, #28]
 800c02a:	68da      	ldr	r2, [r3, #12]
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	605a      	str	r2, [r3, #4]
 800c030:	69fb      	ldr	r3, [r7, #28]
 800c032:	2200      	movs	r2, #0
 800c034:	615a      	str	r2, [r3, #20]
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	1e5a      	subs	r2, r3, #1
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800c040:	69fb      	ldr	r3, [r7, #28]
 800c042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c044:	2201      	movs	r2, #1
 800c046:	409a      	lsls	r2, r3
 800c048:	4b46      	ldr	r3, [pc, #280]	@ (800c164 <xTaskResumeAll+0x208>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	4313      	orrs	r3, r2
 800c04e:	4a45      	ldr	r2, [pc, #276]	@ (800c164 <xTaskResumeAll+0x208>)
 800c050:	6013      	str	r3, [r2, #0]
 800c052:	69fb      	ldr	r3, [r7, #28]
 800c054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c056:	4944      	ldr	r1, [pc, #272]	@ (800c168 <xTaskResumeAll+0x20c>)
 800c058:	4613      	mov	r3, r2
 800c05a:	009b      	lsls	r3, r3, #2
 800c05c:	4413      	add	r3, r2
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	440b      	add	r3, r1
 800c062:	3304      	adds	r3, #4
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	607b      	str	r3, [r7, #4]
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	687a      	ldr	r2, [r7, #4]
 800c06c:	609a      	str	r2, [r3, #8]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	689a      	ldr	r2, [r3, #8]
 800c072:	69fb      	ldr	r3, [r7, #28]
 800c074:	60da      	str	r2, [r3, #12]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	689b      	ldr	r3, [r3, #8]
 800c07a:	69fa      	ldr	r2, [r7, #28]
 800c07c:	3204      	adds	r2, #4
 800c07e:	605a      	str	r2, [r3, #4]
 800c080:	69fb      	ldr	r3, [r7, #28]
 800c082:	1d1a      	adds	r2, r3, #4
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	609a      	str	r2, [r3, #8]
 800c088:	69fb      	ldr	r3, [r7, #28]
 800c08a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c08c:	4613      	mov	r3, r2
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	4413      	add	r3, r2
 800c092:	009b      	lsls	r3, r3, #2
 800c094:	4a34      	ldr	r2, [pc, #208]	@ (800c168 <xTaskResumeAll+0x20c>)
 800c096:	441a      	add	r2, r3
 800c098:	69fb      	ldr	r3, [r7, #28]
 800c09a:	615a      	str	r2, [r3, #20]
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0a0:	4931      	ldr	r1, [pc, #196]	@ (800c168 <xTaskResumeAll+0x20c>)
 800c0a2:	4613      	mov	r3, r2
 800c0a4:	009b      	lsls	r3, r3, #2
 800c0a6:	4413      	add	r3, r2
 800c0a8:	009b      	lsls	r3, r3, #2
 800c0aa:	440b      	add	r3, r1
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	69fa      	ldr	r2, [r7, #28]
 800c0b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c0b2:	1c59      	adds	r1, r3, #1
 800c0b4:	482c      	ldr	r0, [pc, #176]	@ (800c168 <xTaskResumeAll+0x20c>)
 800c0b6:	4613      	mov	r3, r2
 800c0b8:	009b      	lsls	r3, r3, #2
 800c0ba:	4413      	add	r3, r2
 800c0bc:	009b      	lsls	r3, r3, #2
 800c0be:	4403      	add	r3, r0
 800c0c0:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c0c2:	69fb      	ldr	r3, [r7, #28]
 800c0c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0c6:	4b29      	ldr	r3, [pc, #164]	@ (800c16c <xTaskResumeAll+0x210>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d904      	bls.n	800c0da <xTaskResumeAll+0x17e>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800c0d0:	4a27      	ldr	r2, [pc, #156]	@ (800c170 <xTaskResumeAll+0x214>)
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	2101      	movs	r1, #1
 800c0d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c0da:	4b21      	ldr	r3, [pc, #132]	@ (800c160 <xTaskResumeAll+0x204>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	f47f af6c 	bne.w	800bfbc <xTaskResumeAll+0x60>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 800c0e4:	69fb      	ldr	r3, [r7, #28]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d001      	beq.n	800c0ee <xTaskResumeAll+0x192>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 800c0ea:	f000 fe21 	bl	800cd30 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c0ee:	4b21      	ldr	r3, [pc, #132]	@ (800c174 <xTaskResumeAll+0x218>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d012      	beq.n	800c120 <xTaskResumeAll+0x1c4>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 800c0fa:	f000 f8e1 	bl	800c2c0 <xTaskIncrementTick>
 800c0fe:	4603      	mov	r3, r0
 800c100:	2b00      	cmp	r3, #0
 800c102:	d004      	beq.n	800c10e <xTaskResumeAll+0x1b2>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800c104:	4a1a      	ldr	r2, [pc, #104]	@ (800c170 <xTaskResumeAll+0x214>)
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	2101      	movs	r1, #1
 800c10a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	3b01      	subs	r3, #1
 800c112:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d1ef      	bne.n	800c0fa <xTaskResumeAll+0x19e>

                            xPendedTicks = 0;
 800c11a:	4b16      	ldr	r3, [pc, #88]	@ (800c174 <xTaskResumeAll+0x218>)
 800c11c:	2200      	movs	r2, #0
 800c11e:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800c120:	4a13      	ldr	r2, [pc, #76]	@ (800c170 <xTaskResumeAll+0x214>)
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d00b      	beq.n	800c144 <xTaskResumeAll+0x1e8>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800c12c:	2301      	movs	r3, #1
 800c12e:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800c130:	4b0e      	ldr	r3, [pc, #56]	@ (800c16c <xTaskResumeAll+0x210>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4b10      	ldr	r3, [pc, #64]	@ (800c178 <xTaskResumeAll+0x21c>)
 800c136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c13a:	601a      	str	r2, [r3, #0]
 800c13c:	f3bf 8f4f 	dsb	sy
 800c140:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800c144:	f001 fd34 	bl	800dbb0 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 800c148:	69bb      	ldr	r3, [r7, #24]
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3720      	adds	r7, #32
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}
 800c152:	bf00      	nop
 800c154:	2000050c 	.word	0x2000050c
 800c158:	08014080 	.word	0x08014080
 800c15c:	200004e4 	.word	0x200004e4
 800c160:	200004a4 	.word	0x200004a4
 800c164:	200004ec 	.word	0x200004ec
 800c168:	200003e8 	.word	0x200003e8
 800c16c:	200003e4 	.word	0x200003e4
 800c170:	200004f8 	.word	0x200004f8
 800c174:	200004f4 	.word	0x200004f4
 800c178:	e000ed04 	.word	0xe000ed04

0800c17c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c17c:	b480      	push	{r7}
 800c17e:	b083      	sub	sp, #12
 800c180:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800c182:	4b05      	ldr	r3, [pc, #20]	@ (800c198 <xTaskGetTickCount+0x1c>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 800c188:	687b      	ldr	r3, [r7, #4]
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	370c      	adds	r7, #12
 800c18e:	46bd      	mov	sp, r7
 800c190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c194:	4770      	bx	lr
 800c196:	bf00      	nop
 800c198:	200004e8 	.word	0x200004e8

0800c19c <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800c19c:	b480      	push	{r7}
 800c19e:	af00      	add	r7, sp, #0

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
 800c1a0:	4b03      	ldr	r3, [pc, #12]	@ (800c1b0 <uxTaskGetNumberOfTasks+0x14>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ac:	4770      	bx	lr
 800c1ae:	bf00      	nop
 800c1b0:	200004e4 	.word	0x200004e4

0800c1b4 <uxTaskGetSystemState>:
#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
                                      const UBaseType_t uxArraySize,
                                      configRUN_TIME_COUNTER_TYPE * const pulTotalRunTime )
    {
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b086      	sub	sp, #24
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	60b9      	str	r1, [r7, #8]
 800c1be:	607a      	str	r2, [r7, #4]
        UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	617b      	str	r3, [r7, #20]
 800c1c4:	2307      	movs	r3, #7
 800c1c6:	613b      	str	r3, [r7, #16]

        traceENTER_uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, pulTotalRunTime );

        vTaskSuspendAll();
 800c1c8:	f7ff feba 	bl	800bf40 <vTaskSuspendAll>
        {
            /* Is there a space in the array for each task in the system? */
            if( uxArraySize >= uxCurrentNumberOfTasks )
 800c1cc:	4b36      	ldr	r3, [pc, #216]	@ (800c2a8 <uxTaskGetSystemState+0xf4>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	68ba      	ldr	r2, [r7, #8]
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d360      	bcc.n	800c298 <uxTaskGetSystemState+0xe4>
            {
                /* Fill in an TaskStatus_t structure with information on each
                 * task in the Ready state. */
                do
                {
                    uxQueue--;
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	3b01      	subs	r3, #1
 800c1da:	613b      	str	r3, [r7, #16]
                    uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady ) );
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	222c      	movs	r2, #44	@ 0x2c
 800c1e0:	fb02 f303 	mul.w	r3, r2, r3
 800c1e4:	68fa      	ldr	r2, [r7, #12]
 800c1e6:	18d0      	adds	r0, r2, r3
 800c1e8:	693a      	ldr	r2, [r7, #16]
 800c1ea:	4613      	mov	r3, r2
 800c1ec:	009b      	lsls	r3, r3, #2
 800c1ee:	4413      	add	r3, r2
 800c1f0:	009b      	lsls	r3, r3, #2
 800c1f2:	4a2e      	ldr	r2, [pc, #184]	@ (800c2ac <uxTaskGetSystemState+0xf8>)
 800c1f4:	4413      	add	r3, r2
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	f000 fd35 	bl	800cc68 <prvListTasksWithinSingleList>
 800c1fe:	4602      	mov	r2, r0
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	4413      	add	r3, r2
 800c204:	617b      	str	r3, [r7, #20]
                } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY );
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d1e4      	bne.n	800c1d6 <uxTaskGetSystemState+0x22>

                /* Fill in an TaskStatus_t structure with information on each
                 * task in the Blocked state. */
                uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked ) );
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	222c      	movs	r2, #44	@ 0x2c
 800c210:	fb02 f303 	mul.w	r3, r2, r3
 800c214:	68fa      	ldr	r2, [r7, #12]
 800c216:	4413      	add	r3, r2
 800c218:	4a25      	ldr	r2, [pc, #148]	@ (800c2b0 <uxTaskGetSystemState+0xfc>)
 800c21a:	6811      	ldr	r1, [r2, #0]
 800c21c:	2202      	movs	r2, #2
 800c21e:	4618      	mov	r0, r3
 800c220:	f000 fd22 	bl	800cc68 <prvListTasksWithinSingleList>
 800c224:	4602      	mov	r2, r0
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	4413      	add	r3, r2
 800c22a:	617b      	str	r3, [r7, #20]
                uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked ) );
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	222c      	movs	r2, #44	@ 0x2c
 800c230:	fb02 f303 	mul.w	r3, r2, r3
 800c234:	68fa      	ldr	r2, [r7, #12]
 800c236:	4413      	add	r3, r2
 800c238:	4a1e      	ldr	r2, [pc, #120]	@ (800c2b4 <uxTaskGetSystemState+0x100>)
 800c23a:	6811      	ldr	r1, [r2, #0]
 800c23c:	2202      	movs	r2, #2
 800c23e:	4618      	mov	r0, r3
 800c240:	f000 fd12 	bl	800cc68 <prvListTasksWithinSingleList>
 800c244:	4602      	mov	r2, r0
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	4413      	add	r3, r2
 800c24a:	617b      	str	r3, [r7, #20]

                #if ( INCLUDE_vTaskDelete == 1 )
                {
                    /* Fill in an TaskStatus_t structure with information on
                     * each task that has been deleted but not yet cleaned up. */
                    uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted ) );
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	222c      	movs	r2, #44	@ 0x2c
 800c250:	fb02 f303 	mul.w	r3, r2, r3
 800c254:	68fa      	ldr	r2, [r7, #12]
 800c256:	4413      	add	r3, r2
 800c258:	2204      	movs	r2, #4
 800c25a:	4917      	ldr	r1, [pc, #92]	@ (800c2b8 <uxTaskGetSystemState+0x104>)
 800c25c:	4618      	mov	r0, r3
 800c25e:	f000 fd03 	bl	800cc68 <prvListTasksWithinSingleList>
 800c262:	4602      	mov	r2, r0
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	4413      	add	r3, r2
 800c268:	617b      	str	r3, [r7, #20]

                #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    /* Fill in an TaskStatus_t structure with information on
                     * each task in the Suspended state. */
                    uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended ) );
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	222c      	movs	r2, #44	@ 0x2c
 800c26e:	fb02 f303 	mul.w	r3, r2, r3
 800c272:	68fa      	ldr	r2, [r7, #12]
 800c274:	4413      	add	r3, r2
 800c276:	2203      	movs	r2, #3
 800c278:	4910      	ldr	r1, [pc, #64]	@ (800c2bc <uxTaskGetSystemState+0x108>)
 800c27a:	4618      	mov	r0, r3
 800c27c:	f000 fcf4 	bl	800cc68 <prvListTasksWithinSingleList>
 800c280:	4602      	mov	r2, r0
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	4413      	add	r3, r2
 800c286:	617b      	str	r3, [r7, #20]
                }
                #endif

                #if ( configGENERATE_RUN_TIME_STATS == 1 )
                {
                    if( pulTotalRunTime != NULL )
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d004      	beq.n	800c298 <uxTaskGetSystemState+0xe4>
                    {
                        #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
                            portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
                        #else
                            *pulTotalRunTime = ( configRUN_TIME_COUNTER_TYPE ) portGET_RUN_TIME_COUNTER_VALUE();
 800c28e:	f7ff ff75 	bl	800c17c <xTaskGetTickCount>
 800c292:	4602      	mov	r2, r0
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	601a      	str	r2, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        ( void ) xTaskResumeAll();
 800c298:	f7ff fe60 	bl	800bf5c <xTaskResumeAll>

        traceRETURN_uxTaskGetSystemState( uxTask );

        return uxTask;
 800c29c:	697b      	ldr	r3, [r7, #20]
    }
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3718      	adds	r7, #24
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
 800c2a6:	bf00      	nop
 800c2a8:	200004e4 	.word	0x200004e4
 800c2ac:	200003e8 	.word	0x200003e8
 800c2b0:	2000049c 	.word	0x2000049c
 800c2b4:	200004a0 	.word	0x200004a0
 800c2b8:	200004b8 	.word	0x200004b8
 800c2bc:	200004d0 	.word	0x200004d0

0800c2c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b08a      	sub	sp, #40	@ 0x28
 800c2c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800c2ca:	4b81      	ldr	r3, [pc, #516]	@ (800c4d0 <xTaskIncrementTick+0x210>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	f040 80f4 	bne.w	800c4bc <xTaskIncrementTick+0x1fc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c2d4:	4b7f      	ldr	r3, [pc, #508]	@ (800c4d4 <xTaskIncrementTick+0x214>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	3301      	adds	r3, #1
 800c2da:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800c2dc:	4a7d      	ldr	r2, [pc, #500]	@ (800c4d4 <xTaskIncrementTick+0x214>)
 800c2de:	6a3b      	ldr	r3, [r7, #32]
 800c2e0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800c2e2:	6a3b      	ldr	r3, [r7, #32]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d126      	bne.n	800c336 <xTaskIncrementTick+0x76>
        {
            taskSWITCH_DELAYED_LISTS();
 800c2e8:	4b7b      	ldr	r3, [pc, #492]	@ (800c4d8 <xTaskIncrementTick+0x218>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d010      	beq.n	800c314 <xTaskIncrementTick+0x54>
    __asm volatile
 800c2f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2f6:	b672      	cpsid	i
 800c2f8:	f383 8811 	msr	BASEPRI, r3
 800c2fc:	f3bf 8f6f 	isb	sy
 800c300:	f3bf 8f4f 	dsb	sy
 800c304:	b662      	cpsie	i
 800c306:	607b      	str	r3, [r7, #4]
}
 800c308:	bf00      	nop
 800c30a:	f241 215f 	movw	r1, #4703	@ 0x125f
 800c30e:	4873      	ldr	r0, [pc, #460]	@ (800c4dc <xTaskIncrementTick+0x21c>)
 800c310:	f7f8 f800 	bl	8004314 <vAssertCalled>
 800c314:	4b70      	ldr	r3, [pc, #448]	@ (800c4d8 <xTaskIncrementTick+0x218>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	61fb      	str	r3, [r7, #28]
 800c31a:	4b71      	ldr	r3, [pc, #452]	@ (800c4e0 <xTaskIncrementTick+0x220>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	4a6e      	ldr	r2, [pc, #440]	@ (800c4d8 <xTaskIncrementTick+0x218>)
 800c320:	6013      	str	r3, [r2, #0]
 800c322:	4a6f      	ldr	r2, [pc, #444]	@ (800c4e0 <xTaskIncrementTick+0x220>)
 800c324:	69fb      	ldr	r3, [r7, #28]
 800c326:	6013      	str	r3, [r2, #0]
 800c328:	4b6e      	ldr	r3, [pc, #440]	@ (800c4e4 <xTaskIncrementTick+0x224>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	3301      	adds	r3, #1
 800c32e:	4a6d      	ldr	r2, [pc, #436]	@ (800c4e4 <xTaskIncrementTick+0x224>)
 800c330:	6013      	str	r3, [r2, #0]
 800c332:	f000 fcfd 	bl	800cd30 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800c336:	4b6c      	ldr	r3, [pc, #432]	@ (800c4e8 <xTaskIncrementTick+0x228>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	6a3a      	ldr	r2, [r7, #32]
 800c33c:	429a      	cmp	r2, r3
 800c33e:	f0c0 80a8 	bcc.w	800c492 <xTaskIncrementTick+0x1d2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c342:	4b65      	ldr	r3, [pc, #404]	@ (800c4d8 <xTaskIncrementTick+0x218>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d104      	bne.n	800c356 <xTaskIncrementTick+0x96>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800c34c:	4b66      	ldr	r3, [pc, #408]	@ (800c4e8 <xTaskIncrementTick+0x228>)
 800c34e:	f04f 32ff 	mov.w	r2, #4294967295
 800c352:	601a      	str	r2, [r3, #0]
                    break;
 800c354:	e09d      	b.n	800c492 <xTaskIncrementTick+0x1d2>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c356:	4b60      	ldr	r3, [pc, #384]	@ (800c4d8 <xTaskIncrementTick+0x218>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	68db      	ldr	r3, [r3, #12]
 800c35c:	68db      	ldr	r3, [r3, #12]
 800c35e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c360:	69bb      	ldr	r3, [r7, #24]
 800c362:	685b      	ldr	r3, [r3, #4]
 800c364:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800c366:	6a3a      	ldr	r2, [r7, #32]
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d203      	bcs.n	800c376 <xTaskIncrementTick+0xb6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800c36e:	4a5e      	ldr	r2, [pc, #376]	@ (800c4e8 <xTaskIncrementTick+0x228>)
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	6013      	str	r3, [r2, #0]
                        break;
 800c374:	e08d      	b.n	800c492 <xTaskIncrementTick+0x1d2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800c376:	69bb      	ldr	r3, [r7, #24]
 800c378:	695b      	ldr	r3, [r3, #20]
 800c37a:	613b      	str	r3, [r7, #16]
 800c37c:	69bb      	ldr	r3, [r7, #24]
 800c37e:	689b      	ldr	r3, [r3, #8]
 800c380:	69ba      	ldr	r2, [r7, #24]
 800c382:	68d2      	ldr	r2, [r2, #12]
 800c384:	609a      	str	r2, [r3, #8]
 800c386:	69bb      	ldr	r3, [r7, #24]
 800c388:	68db      	ldr	r3, [r3, #12]
 800c38a:	69ba      	ldr	r2, [r7, #24]
 800c38c:	6892      	ldr	r2, [r2, #8]
 800c38e:	605a      	str	r2, [r3, #4]
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	685a      	ldr	r2, [r3, #4]
 800c394:	69bb      	ldr	r3, [r7, #24]
 800c396:	3304      	adds	r3, #4
 800c398:	429a      	cmp	r2, r3
 800c39a:	d103      	bne.n	800c3a4 <xTaskIncrementTick+0xe4>
 800c39c:	69bb      	ldr	r3, [r7, #24]
 800c39e:	68da      	ldr	r2, [r3, #12]
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	605a      	str	r2, [r3, #4]
 800c3a4:	69bb      	ldr	r3, [r7, #24]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	615a      	str	r2, [r3, #20]
 800c3aa:	693b      	ldr	r3, [r7, #16]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	1e5a      	subs	r2, r3, #1
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c3b4:	69bb      	ldr	r3, [r7, #24]
 800c3b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d01e      	beq.n	800c3fa <xTaskIncrementTick+0x13a>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800c3bc:	69bb      	ldr	r3, [r7, #24]
 800c3be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3c0:	60fb      	str	r3, [r7, #12]
 800c3c2:	69bb      	ldr	r3, [r7, #24]
 800c3c4:	69db      	ldr	r3, [r3, #28]
 800c3c6:	69ba      	ldr	r2, [r7, #24]
 800c3c8:	6a12      	ldr	r2, [r2, #32]
 800c3ca:	609a      	str	r2, [r3, #8]
 800c3cc:	69bb      	ldr	r3, [r7, #24]
 800c3ce:	6a1b      	ldr	r3, [r3, #32]
 800c3d0:	69ba      	ldr	r2, [r7, #24]
 800c3d2:	69d2      	ldr	r2, [r2, #28]
 800c3d4:	605a      	str	r2, [r3, #4]
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	685a      	ldr	r2, [r3, #4]
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	3318      	adds	r3, #24
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d103      	bne.n	800c3ea <xTaskIncrementTick+0x12a>
 800c3e2:	69bb      	ldr	r3, [r7, #24]
 800c3e4:	6a1a      	ldr	r2, [r3, #32]
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	605a      	str	r2, [r3, #4]
 800c3ea:	69bb      	ldr	r3, [r7, #24]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	629a      	str	r2, [r3, #40]	@ 0x28
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	1e5a      	subs	r2, r3, #1
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800c3fa:	69bb      	ldr	r3, [r7, #24]
 800c3fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3fe:	2201      	movs	r2, #1
 800c400:	409a      	lsls	r2, r3
 800c402:	4b3a      	ldr	r3, [pc, #232]	@ (800c4ec <xTaskIncrementTick+0x22c>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	4313      	orrs	r3, r2
 800c408:	4a38      	ldr	r2, [pc, #224]	@ (800c4ec <xTaskIncrementTick+0x22c>)
 800c40a:	6013      	str	r3, [r2, #0]
 800c40c:	69bb      	ldr	r3, [r7, #24]
 800c40e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c410:	4937      	ldr	r1, [pc, #220]	@ (800c4f0 <xTaskIncrementTick+0x230>)
 800c412:	4613      	mov	r3, r2
 800c414:	009b      	lsls	r3, r3, #2
 800c416:	4413      	add	r3, r2
 800c418:	009b      	lsls	r3, r3, #2
 800c41a:	440b      	add	r3, r1
 800c41c:	3304      	adds	r3, #4
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	60bb      	str	r3, [r7, #8]
 800c422:	69bb      	ldr	r3, [r7, #24]
 800c424:	68ba      	ldr	r2, [r7, #8]
 800c426:	609a      	str	r2, [r3, #8]
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	689a      	ldr	r2, [r3, #8]
 800c42c:	69bb      	ldr	r3, [r7, #24]
 800c42e:	60da      	str	r2, [r3, #12]
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	689b      	ldr	r3, [r3, #8]
 800c434:	69ba      	ldr	r2, [r7, #24]
 800c436:	3204      	adds	r2, #4
 800c438:	605a      	str	r2, [r3, #4]
 800c43a:	69bb      	ldr	r3, [r7, #24]
 800c43c:	1d1a      	adds	r2, r3, #4
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	609a      	str	r2, [r3, #8]
 800c442:	69bb      	ldr	r3, [r7, #24]
 800c444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c446:	4613      	mov	r3, r2
 800c448:	009b      	lsls	r3, r3, #2
 800c44a:	4413      	add	r3, r2
 800c44c:	009b      	lsls	r3, r3, #2
 800c44e:	4a28      	ldr	r2, [pc, #160]	@ (800c4f0 <xTaskIncrementTick+0x230>)
 800c450:	441a      	add	r2, r3
 800c452:	69bb      	ldr	r3, [r7, #24]
 800c454:	615a      	str	r2, [r3, #20]
 800c456:	69bb      	ldr	r3, [r7, #24]
 800c458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c45a:	4925      	ldr	r1, [pc, #148]	@ (800c4f0 <xTaskIncrementTick+0x230>)
 800c45c:	4613      	mov	r3, r2
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	4413      	add	r3, r2
 800c462:	009b      	lsls	r3, r3, #2
 800c464:	440b      	add	r3, r1
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	69ba      	ldr	r2, [r7, #24]
 800c46a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c46c:	1c59      	adds	r1, r3, #1
 800c46e:	4820      	ldr	r0, [pc, #128]	@ (800c4f0 <xTaskIncrementTick+0x230>)
 800c470:	4613      	mov	r3, r2
 800c472:	009b      	lsls	r3, r3, #2
 800c474:	4413      	add	r3, r2
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	4403      	add	r3, r0
 800c47a:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c47c:	69bb      	ldr	r3, [r7, #24]
 800c47e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c480:	4b1c      	ldr	r3, [pc, #112]	@ (800c4f4 <xTaskIncrementTick+0x234>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c486:	429a      	cmp	r2, r3
 800c488:	f67f af5b 	bls.w	800c342 <xTaskIncrementTick+0x82>
                            {
                                xSwitchRequired = pdTRUE;
 800c48c:	2301      	movs	r3, #1
 800c48e:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c490:	e757      	b.n	800c342 <xTaskIncrementTick+0x82>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 800c492:	4b18      	ldr	r3, [pc, #96]	@ (800c4f4 <xTaskIncrementTick+0x234>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c498:	4915      	ldr	r1, [pc, #84]	@ (800c4f0 <xTaskIncrementTick+0x230>)
 800c49a:	4613      	mov	r3, r2
 800c49c:	009b      	lsls	r3, r3, #2
 800c49e:	4413      	add	r3, r2
 800c4a0:	009b      	lsls	r3, r3, #2
 800c4a2:	440b      	add	r3, r1
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	2b01      	cmp	r3, #1
 800c4a8:	d901      	bls.n	800c4ae <xTaskIncrementTick+0x1ee>
                {
                    xSwitchRequired = pdTRUE;
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 800c4ae:	4b12      	ldr	r3, [pc, #72]	@ (800c4f8 <xTaskIncrementTick+0x238>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d007      	beq.n	800c4c6 <xTaskIncrementTick+0x206>
                {
                    xSwitchRequired = pdTRUE;
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c4ba:	e004      	b.n	800c4c6 <xTaskIncrementTick+0x206>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 800c4bc:	4b0f      	ldr	r3, [pc, #60]	@ (800c4fc <xTaskIncrementTick+0x23c>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	3301      	adds	r3, #1
 800c4c2:	4a0e      	ldr	r2, [pc, #56]	@ (800c4fc <xTaskIncrementTick+0x23c>)
 800c4c4:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 800c4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3728      	adds	r7, #40	@ 0x28
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}
 800c4d0:	2000050c 	.word	0x2000050c
 800c4d4:	200004e8 	.word	0x200004e8
 800c4d8:	2000049c 	.word	0x2000049c
 800c4dc:	08014080 	.word	0x08014080
 800c4e0:	200004a0 	.word	0x200004a0
 800c4e4:	200004fc 	.word	0x200004fc
 800c4e8:	20000504 	.word	0x20000504
 800c4ec:	200004ec 	.word	0x200004ec
 800c4f0:	200003e8 	.word	0x200003e8
 800c4f4:	200003e4 	.word	0x200003e4
 800c4f8:	200004f8 	.word	0x200004f8
 800c4fc:	200004f4 	.word	0x200004f4

0800c500 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 800c500:	b580      	push	{r7, lr}
 800c502:	b088      	sub	sp, #32
 800c504:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800c506:	4b4c      	ldr	r3, [pc, #304]	@ (800c638 <vTaskSwitchContext+0x138>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d003      	beq.n	800c516 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 800c50e:	4b4b      	ldr	r3, [pc, #300]	@ (800c63c <vTaskSwitchContext+0x13c>)
 800c510:	2201      	movs	r2, #1
 800c512:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 800c514:	e08c      	b.n	800c630 <vTaskSwitchContext+0x130>
            xYieldPendings[ 0 ] = pdFALSE;
 800c516:	4b49      	ldr	r3, [pc, #292]	@ (800c63c <vTaskSwitchContext+0x13c>)
 800c518:	2200      	movs	r2, #0
 800c51a:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime[ 0 ] = portGET_RUN_TIME_COUNTER_VALUE();
 800c51c:	f7ff fe2e 	bl	800c17c <xTaskGetTickCount>
 800c520:	4603      	mov	r3, r0
 800c522:	4a47      	ldr	r2, [pc, #284]	@ (800c640 <vTaskSwitchContext+0x140>)
 800c524:	6013      	str	r3, [r2, #0]
                if( ulTotalRunTime[ 0 ] > ulTaskSwitchedInTime[ 0 ] )
 800c526:	4b46      	ldr	r3, [pc, #280]	@ (800c640 <vTaskSwitchContext+0x140>)
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	4b46      	ldr	r3, [pc, #280]	@ (800c644 <vTaskSwitchContext+0x144>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	429a      	cmp	r2, r3
 800c530:	d909      	bls.n	800c546 <vTaskSwitchContext+0x46>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime[ 0 ] - ulTaskSwitchedInTime[ 0 ] );
 800c532:	4b43      	ldr	r3, [pc, #268]	@ (800c640 <vTaskSwitchContext+0x140>)
 800c534:	681a      	ldr	r2, [r3, #0]
 800c536:	4b43      	ldr	r3, [pc, #268]	@ (800c644 <vTaskSwitchContext+0x144>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	1ad1      	subs	r1, r2, r3
 800c53c:	4b42      	ldr	r3, [pc, #264]	@ (800c648 <vTaskSwitchContext+0x148>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c542:	440a      	add	r2, r1
 800c544:	659a      	str	r2, [r3, #88]	@ 0x58
                ulTaskSwitchedInTime[ 0 ] = ulTotalRunTime[ 0 ];
 800c546:	4b3e      	ldr	r3, [pc, #248]	@ (800c640 <vTaskSwitchContext+0x140>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	4a3e      	ldr	r2, [pc, #248]	@ (800c644 <vTaskSwitchContext+0x144>)
 800c54c:	6013      	str	r3, [r2, #0]
            taskCHECK_FOR_STACK_OVERFLOW();
 800c54e:	4b3e      	ldr	r3, [pc, #248]	@ (800c648 <vTaskSwitchContext+0x148>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c554:	61fb      	str	r3, [r7, #28]
 800c556:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800c55a:	61bb      	str	r3, [r7, #24]
 800c55c:	69fb      	ldr	r3, [r7, #28]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	69ba      	ldr	r2, [r7, #24]
 800c562:	429a      	cmp	r2, r3
 800c564:	d111      	bne.n	800c58a <vTaskSwitchContext+0x8a>
 800c566:	69fb      	ldr	r3, [r7, #28]
 800c568:	3304      	adds	r3, #4
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	69ba      	ldr	r2, [r7, #24]
 800c56e:	429a      	cmp	r2, r3
 800c570:	d10b      	bne.n	800c58a <vTaskSwitchContext+0x8a>
 800c572:	69fb      	ldr	r3, [r7, #28]
 800c574:	3308      	adds	r3, #8
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	69ba      	ldr	r2, [r7, #24]
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d105      	bne.n	800c58a <vTaskSwitchContext+0x8a>
 800c57e:	69fb      	ldr	r3, [r7, #28]
 800c580:	330c      	adds	r3, #12
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	69ba      	ldr	r2, [r7, #24]
 800c586:	429a      	cmp	r2, r3
 800c588:	d009      	beq.n	800c59e <vTaskSwitchContext+0x9e>
 800c58a:	4b2f      	ldr	r3, [pc, #188]	@ (800c648 <vTaskSwitchContext+0x148>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	3334      	adds	r3, #52	@ 0x34
 800c590:	617b      	str	r3, [r7, #20]
 800c592:	4b2d      	ldr	r3, [pc, #180]	@ (800c648 <vTaskSwitchContext+0x148>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	6979      	ldr	r1, [r7, #20]
 800c598:	4618      	mov	r0, r3
 800c59a:	f7f7 fb95 	bl	8003cc8 <vApplicationStackOverflowHook>
            taskSELECT_HIGHEST_PRIORITY_TASK();
 800c59e:	4b2b      	ldr	r3, [pc, #172]	@ (800c64c <vTaskSwitchContext+0x14c>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	60bb      	str	r3, [r7, #8]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	fab3 f383 	clz	r3, r3
 800c5aa:	71fb      	strb	r3, [r7, #7]
        return ucReturn;
 800c5ac:	79fb      	ldrb	r3, [r7, #7]
 800c5ae:	f1c3 031f 	rsb	r3, r3, #31
 800c5b2:	613b      	str	r3, [r7, #16]
 800c5b4:	4926      	ldr	r1, [pc, #152]	@ (800c650 <vTaskSwitchContext+0x150>)
 800c5b6:	693a      	ldr	r2, [r7, #16]
 800c5b8:	4613      	mov	r3, r2
 800c5ba:	009b      	lsls	r3, r3, #2
 800c5bc:	4413      	add	r3, r2
 800c5be:	009b      	lsls	r3, r3, #2
 800c5c0:	440b      	add	r3, r1
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d110      	bne.n	800c5ea <vTaskSwitchContext+0xea>
    __asm volatile
 800c5c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5cc:	b672      	cpsid	i
 800c5ce:	f383 8811 	msr	BASEPRI, r3
 800c5d2:	f3bf 8f6f 	isb	sy
 800c5d6:	f3bf 8f4f 	dsb	sy
 800c5da:	b662      	cpsie	i
 800c5dc:	603b      	str	r3, [r7, #0]
}
 800c5de:	bf00      	nop
 800c5e0:	f241 31fa 	movw	r1, #5114	@ 0x13fa
 800c5e4:	481b      	ldr	r0, [pc, #108]	@ (800c654 <vTaskSwitchContext+0x154>)
 800c5e6:	f7f7 fe95 	bl	8004314 <vAssertCalled>
 800c5ea:	693a      	ldr	r2, [r7, #16]
 800c5ec:	4613      	mov	r3, r2
 800c5ee:	009b      	lsls	r3, r3, #2
 800c5f0:	4413      	add	r3, r2
 800c5f2:	009b      	lsls	r3, r3, #2
 800c5f4:	4a16      	ldr	r2, [pc, #88]	@ (800c650 <vTaskSwitchContext+0x150>)
 800c5f6:	4413      	add	r3, r2
 800c5f8:	60fb      	str	r3, [r7, #12]
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	685b      	ldr	r3, [r3, #4]
 800c5fe:	685a      	ldr	r2, [r3, #4]
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	605a      	str	r2, [r3, #4]
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	685a      	ldr	r2, [r3, #4]
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	3308      	adds	r3, #8
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d103      	bne.n	800c618 <vTaskSwitchContext+0x118>
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	68da      	ldr	r2, [r3, #12]
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	605a      	str	r2, [r3, #4]
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	68db      	ldr	r3, [r3, #12]
 800c61e:	4a0a      	ldr	r2, [pc, #40]	@ (800c648 <vTaskSwitchContext+0x148>)
 800c620:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800c622:	4b09      	ldr	r3, [pc, #36]	@ (800c648 <vTaskSwitchContext+0x148>)
 800c624:	681b      	ldr	r3, [r3, #0]
                configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800c626:	4b08      	ldr	r3, [pc, #32]	@ (800c648 <vTaskSwitchContext+0x148>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	335c      	adds	r3, #92	@ 0x5c
 800c62c:	4a0a      	ldr	r2, [pc, #40]	@ (800c658 <vTaskSwitchContext+0x158>)
 800c62e:	6013      	str	r3, [r2, #0]
    }
 800c630:	bf00      	nop
 800c632:	3720      	adds	r7, #32
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}
 800c638:	2000050c 	.word	0x2000050c
 800c63c:	200004f8 	.word	0x200004f8
 800c640:	20000514 	.word	0x20000514
 800c644:	20000510 	.word	0x20000510
 800c648:	200003e4 	.word	0x200003e4
 800c64c:	200004ec 	.word	0x200004ec
 800c650:	200003e8 	.word	0x200003e8
 800c654:	08014080 	.word	0x08014080
 800c658:	200001c0 	.word	0x200001c0

0800c65c <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b084      	sub	sp, #16
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d110      	bne.n	800c68e <vTaskPlaceOnEventList+0x32>
    __asm volatile
 800c66c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c670:	b672      	cpsid	i
 800c672:	f383 8811 	msr	BASEPRI, r3
 800c676:	f3bf 8f6f 	isb	sy
 800c67a:	f3bf 8f4f 	dsb	sy
 800c67e:	b662      	cpsie	i
 800c680:	60fb      	str	r3, [r7, #12]
}
 800c682:	bf00      	nop
 800c684:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 800c688:	4808      	ldr	r0, [pc, #32]	@ (800c6ac <vTaskPlaceOnEventList+0x50>)
 800c68a:	f7f7 fe43 	bl	8004314 <vAssertCalled>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c68e:	4b08      	ldr	r3, [pc, #32]	@ (800c6b0 <vTaskPlaceOnEventList+0x54>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	3318      	adds	r3, #24
 800c694:	4619      	mov	r1, r3
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f7fe f9c9 	bl	800aa2e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c69c:	2101      	movs	r1, #1
 800c69e:	6838      	ldr	r0, [r7, #0]
 800c6a0:	f000 fdc6 	bl	800d230 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 800c6a4:	bf00      	nop
 800c6a6:	3710      	adds	r7, #16
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}
 800c6ac:	08014080 	.word	0x08014080
 800c6b0:	200003e4 	.word	0x200003e4

0800c6b4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b086      	sub	sp, #24
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	60f8      	str	r0, [r7, #12]
 800c6bc:	60b9      	str	r1, [r7, #8]
 800c6be:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d110      	bne.n	800c6e8 <vTaskPlaceOnEventListRestricted+0x34>
    __asm volatile
 800c6c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6ca:	b672      	cpsid	i
 800c6cc:	f383 8811 	msr	BASEPRI, r3
 800c6d0:	f3bf 8f6f 	isb	sy
 800c6d4:	f3bf 8f4f 	dsb	sy
 800c6d8:	b662      	cpsie	i
 800c6da:	613b      	str	r3, [r7, #16]
}
 800c6dc:	bf00      	nop
 800c6de:	f241 41be 	movw	r1, #5310	@ 0x14be
 800c6e2:	4819      	ldr	r0, [pc, #100]	@ (800c748 <vTaskPlaceOnEventListRestricted+0x94>)
 800c6e4:	f7f7 fe16 	bl	8004314 <vAssertCalled>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	685b      	ldr	r3, [r3, #4]
 800c6ec:	617b      	str	r3, [r7, #20]
 800c6ee:	4b17      	ldr	r3, [pc, #92]	@ (800c74c <vTaskPlaceOnEventListRestricted+0x98>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	697a      	ldr	r2, [r7, #20]
 800c6f4:	61da      	str	r2, [r3, #28]
 800c6f6:	4b15      	ldr	r3, [pc, #84]	@ (800c74c <vTaskPlaceOnEventListRestricted+0x98>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	697a      	ldr	r2, [r7, #20]
 800c6fc:	6892      	ldr	r2, [r2, #8]
 800c6fe:	621a      	str	r2, [r3, #32]
 800c700:	4b12      	ldr	r3, [pc, #72]	@ (800c74c <vTaskPlaceOnEventListRestricted+0x98>)
 800c702:	681a      	ldr	r2, [r3, #0]
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	689b      	ldr	r3, [r3, #8]
 800c708:	3218      	adds	r2, #24
 800c70a:	605a      	str	r2, [r3, #4]
 800c70c:	4b0f      	ldr	r3, [pc, #60]	@ (800c74c <vTaskPlaceOnEventListRestricted+0x98>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f103 0218 	add.w	r2, r3, #24
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	609a      	str	r2, [r3, #8]
 800c718:	4b0c      	ldr	r3, [pc, #48]	@ (800c74c <vTaskPlaceOnEventListRestricted+0x98>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	68fa      	ldr	r2, [r7, #12]
 800c71e:	629a      	str	r2, [r3, #40]	@ 0x28
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	1c5a      	adds	r2, r3, #1
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d002      	beq.n	800c736 <vTaskPlaceOnEventListRestricted+0x82>
        {
            xTicksToWait = portMAX_DELAY;
 800c730:	f04f 33ff 	mov.w	r3, #4294967295
 800c734:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c736:	6879      	ldr	r1, [r7, #4]
 800c738:	68b8      	ldr	r0, [r7, #8]
 800c73a:	f000 fd79 	bl	800d230 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 800c73e:	bf00      	nop
 800c740:	3718      	adds	r7, #24
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	08014080 	.word	0x08014080
 800c74c:	200003e4 	.word	0x200003e4

0800c750 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b08a      	sub	sp, #40	@ 0x28
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	68db      	ldr	r3, [r3, #12]
 800c75c:	68db      	ldr	r3, [r3, #12]
 800c75e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800c760:	6a3b      	ldr	r3, [r7, #32]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d110      	bne.n	800c788 <xTaskRemoveFromEventList+0x38>
    __asm volatile
 800c766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c76a:	b672      	cpsid	i
 800c76c:	f383 8811 	msr	BASEPRI, r3
 800c770:	f3bf 8f6f 	isb	sy
 800c774:	f3bf 8f4f 	dsb	sy
 800c778:	b662      	cpsie	i
 800c77a:	60fb      	str	r3, [r7, #12]
}
 800c77c:	bf00      	nop
 800c77e:	f241 41f5 	movw	r1, #5365	@ 0x14f5
 800c782:	485b      	ldr	r0, [pc, #364]	@ (800c8f0 <xTaskRemoveFromEventList+0x1a0>)
 800c784:	f7f7 fdc6 	bl	8004314 <vAssertCalled>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800c788:	6a3b      	ldr	r3, [r7, #32]
 800c78a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c78c:	61fb      	str	r3, [r7, #28]
 800c78e:	6a3b      	ldr	r3, [r7, #32]
 800c790:	69db      	ldr	r3, [r3, #28]
 800c792:	6a3a      	ldr	r2, [r7, #32]
 800c794:	6a12      	ldr	r2, [r2, #32]
 800c796:	609a      	str	r2, [r3, #8]
 800c798:	6a3b      	ldr	r3, [r7, #32]
 800c79a:	6a1b      	ldr	r3, [r3, #32]
 800c79c:	6a3a      	ldr	r2, [r7, #32]
 800c79e:	69d2      	ldr	r2, [r2, #28]
 800c7a0:	605a      	str	r2, [r3, #4]
 800c7a2:	69fb      	ldr	r3, [r7, #28]
 800c7a4:	685a      	ldr	r2, [r3, #4]
 800c7a6:	6a3b      	ldr	r3, [r7, #32]
 800c7a8:	3318      	adds	r3, #24
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d103      	bne.n	800c7b6 <xTaskRemoveFromEventList+0x66>
 800c7ae:	6a3b      	ldr	r3, [r7, #32]
 800c7b0:	6a1a      	ldr	r2, [r3, #32]
 800c7b2:	69fb      	ldr	r3, [r7, #28]
 800c7b4:	605a      	str	r2, [r3, #4]
 800c7b6:	6a3b      	ldr	r3, [r7, #32]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	629a      	str	r2, [r3, #40]	@ 0x28
 800c7bc:	69fb      	ldr	r3, [r7, #28]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	1e5a      	subs	r2, r3, #1
 800c7c2:	69fb      	ldr	r3, [r7, #28]
 800c7c4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800c7c6:	4b4b      	ldr	r3, [pc, #300]	@ (800c8f4 <xTaskRemoveFromEventList+0x1a4>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d160      	bne.n	800c890 <xTaskRemoveFromEventList+0x140>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800c7ce:	6a3b      	ldr	r3, [r7, #32]
 800c7d0:	695b      	ldr	r3, [r3, #20]
 800c7d2:	617b      	str	r3, [r7, #20]
 800c7d4:	6a3b      	ldr	r3, [r7, #32]
 800c7d6:	689b      	ldr	r3, [r3, #8]
 800c7d8:	6a3a      	ldr	r2, [r7, #32]
 800c7da:	68d2      	ldr	r2, [r2, #12]
 800c7dc:	609a      	str	r2, [r3, #8]
 800c7de:	6a3b      	ldr	r3, [r7, #32]
 800c7e0:	68db      	ldr	r3, [r3, #12]
 800c7e2:	6a3a      	ldr	r2, [r7, #32]
 800c7e4:	6892      	ldr	r2, [r2, #8]
 800c7e6:	605a      	str	r2, [r3, #4]
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	685a      	ldr	r2, [r3, #4]
 800c7ec:	6a3b      	ldr	r3, [r7, #32]
 800c7ee:	3304      	adds	r3, #4
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d103      	bne.n	800c7fc <xTaskRemoveFromEventList+0xac>
 800c7f4:	6a3b      	ldr	r3, [r7, #32]
 800c7f6:	68da      	ldr	r2, [r3, #12]
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	605a      	str	r2, [r3, #4]
 800c7fc:	6a3b      	ldr	r3, [r7, #32]
 800c7fe:	2200      	movs	r2, #0
 800c800:	615a      	str	r2, [r3, #20]
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	1e5a      	subs	r2, r3, #1
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800c80c:	6a3b      	ldr	r3, [r7, #32]
 800c80e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c810:	2201      	movs	r2, #1
 800c812:	409a      	lsls	r2, r3
 800c814:	4b38      	ldr	r3, [pc, #224]	@ (800c8f8 <xTaskRemoveFromEventList+0x1a8>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4313      	orrs	r3, r2
 800c81a:	4a37      	ldr	r2, [pc, #220]	@ (800c8f8 <xTaskRemoveFromEventList+0x1a8>)
 800c81c:	6013      	str	r3, [r2, #0]
 800c81e:	6a3b      	ldr	r3, [r7, #32]
 800c820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c822:	4936      	ldr	r1, [pc, #216]	@ (800c8fc <xTaskRemoveFromEventList+0x1ac>)
 800c824:	4613      	mov	r3, r2
 800c826:	009b      	lsls	r3, r3, #2
 800c828:	4413      	add	r3, r2
 800c82a:	009b      	lsls	r3, r3, #2
 800c82c:	440b      	add	r3, r1
 800c82e:	3304      	adds	r3, #4
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	613b      	str	r3, [r7, #16]
 800c834:	6a3b      	ldr	r3, [r7, #32]
 800c836:	693a      	ldr	r2, [r7, #16]
 800c838:	609a      	str	r2, [r3, #8]
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	689a      	ldr	r2, [r3, #8]
 800c83e:	6a3b      	ldr	r3, [r7, #32]
 800c840:	60da      	str	r2, [r3, #12]
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	689b      	ldr	r3, [r3, #8]
 800c846:	6a3a      	ldr	r2, [r7, #32]
 800c848:	3204      	adds	r2, #4
 800c84a:	605a      	str	r2, [r3, #4]
 800c84c:	6a3b      	ldr	r3, [r7, #32]
 800c84e:	1d1a      	adds	r2, r3, #4
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	609a      	str	r2, [r3, #8]
 800c854:	6a3b      	ldr	r3, [r7, #32]
 800c856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c858:	4613      	mov	r3, r2
 800c85a:	009b      	lsls	r3, r3, #2
 800c85c:	4413      	add	r3, r2
 800c85e:	009b      	lsls	r3, r3, #2
 800c860:	4a26      	ldr	r2, [pc, #152]	@ (800c8fc <xTaskRemoveFromEventList+0x1ac>)
 800c862:	441a      	add	r2, r3
 800c864:	6a3b      	ldr	r3, [r7, #32]
 800c866:	615a      	str	r2, [r3, #20]
 800c868:	6a3b      	ldr	r3, [r7, #32]
 800c86a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c86c:	4923      	ldr	r1, [pc, #140]	@ (800c8fc <xTaskRemoveFromEventList+0x1ac>)
 800c86e:	4613      	mov	r3, r2
 800c870:	009b      	lsls	r3, r3, #2
 800c872:	4413      	add	r3, r2
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	440b      	add	r3, r1
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	6a3a      	ldr	r2, [r7, #32]
 800c87c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c87e:	1c59      	adds	r1, r3, #1
 800c880:	481e      	ldr	r0, [pc, #120]	@ (800c8fc <xTaskRemoveFromEventList+0x1ac>)
 800c882:	4613      	mov	r3, r2
 800c884:	009b      	lsls	r3, r3, #2
 800c886:	4413      	add	r3, r2
 800c888:	009b      	lsls	r3, r3, #2
 800c88a:	4403      	add	r3, r0
 800c88c:	6019      	str	r1, [r3, #0]
 800c88e:	e01b      	b.n	800c8c8 <xTaskRemoveFromEventList+0x178>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c890:	4b1b      	ldr	r3, [pc, #108]	@ (800c900 <xTaskRemoveFromEventList+0x1b0>)
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	61bb      	str	r3, [r7, #24]
 800c896:	6a3b      	ldr	r3, [r7, #32]
 800c898:	69ba      	ldr	r2, [r7, #24]
 800c89a:	61da      	str	r2, [r3, #28]
 800c89c:	69bb      	ldr	r3, [r7, #24]
 800c89e:	689a      	ldr	r2, [r3, #8]
 800c8a0:	6a3b      	ldr	r3, [r7, #32]
 800c8a2:	621a      	str	r2, [r3, #32]
 800c8a4:	69bb      	ldr	r3, [r7, #24]
 800c8a6:	689b      	ldr	r3, [r3, #8]
 800c8a8:	6a3a      	ldr	r2, [r7, #32]
 800c8aa:	3218      	adds	r2, #24
 800c8ac:	605a      	str	r2, [r3, #4]
 800c8ae:	6a3b      	ldr	r3, [r7, #32]
 800c8b0:	f103 0218 	add.w	r2, r3, #24
 800c8b4:	69bb      	ldr	r3, [r7, #24]
 800c8b6:	609a      	str	r2, [r3, #8]
 800c8b8:	6a3b      	ldr	r3, [r7, #32]
 800c8ba:	4a11      	ldr	r2, [pc, #68]	@ (800c900 <xTaskRemoveFromEventList+0x1b0>)
 800c8bc:	629a      	str	r2, [r3, #40]	@ 0x28
 800c8be:	4b10      	ldr	r3, [pc, #64]	@ (800c900 <xTaskRemoveFromEventList+0x1b0>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	4a0e      	ldr	r2, [pc, #56]	@ (800c900 <xTaskRemoveFromEventList+0x1b0>)
 800c8c6:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c8c8:	6a3b      	ldr	r3, [r7, #32]
 800c8ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8cc:	4b0d      	ldr	r3, [pc, #52]	@ (800c904 <xTaskRemoveFromEventList+0x1b4>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d905      	bls.n	800c8e2 <xTaskRemoveFromEventList+0x192>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 800c8da:	4b0b      	ldr	r3, [pc, #44]	@ (800c908 <xTaskRemoveFromEventList+0x1b8>)
 800c8dc:	2201      	movs	r2, #1
 800c8de:	601a      	str	r2, [r3, #0]
 800c8e0:	e001      	b.n	800c8e6 <xTaskRemoveFromEventList+0x196>
        }
        else
        {
            xReturn = pdFALSE;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 800c8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3728      	adds	r7, #40	@ 0x28
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}
 800c8f0:	08014080 	.word	0x08014080
 800c8f4:	2000050c 	.word	0x2000050c
 800c8f8:	200004ec 	.word	0x200004ec
 800c8fc:	200003e8 	.word	0x200003e8
 800c900:	200004a4 	.word	0x200004a4
 800c904:	200003e4 	.word	0x200003e4
 800c908:	200004f8 	.word	0x200004f8

0800c90c <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c90c:	b480      	push	{r7}
 800c90e:	b083      	sub	sp, #12
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c914:	4b06      	ldr	r3, [pc, #24]	@ (800c930 <vTaskInternalSetTimeOutState+0x24>)
 800c916:	681a      	ldr	r2, [r3, #0]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800c91c:	4b05      	ldr	r3, [pc, #20]	@ (800c934 <vTaskInternalSetTimeOutState+0x28>)
 800c91e:	681a      	ldr	r2, [r3, #0]
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 800c924:	bf00      	nop
 800c926:	370c      	adds	r7, #12
 800c928:	46bd      	mov	sp, r7
 800c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92e:	4770      	bx	lr
 800c930:	200004fc 	.word	0x200004fc
 800c934:	200004e8 	.word	0x200004e8

0800c938 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b088      	sub	sp, #32
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
 800c940:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d110      	bne.n	800c96a <xTaskCheckForTimeOut+0x32>
    __asm volatile
 800c948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c94c:	b672      	cpsid	i
 800c94e:	f383 8811 	msr	BASEPRI, r3
 800c952:	f3bf 8f6f 	isb	sy
 800c956:	f3bf 8f4f 	dsb	sy
 800c95a:	b662      	cpsie	i
 800c95c:	613b      	str	r3, [r7, #16]
}
 800c95e:	bf00      	nop
 800c960:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 800c964:	482b      	ldr	r0, [pc, #172]	@ (800ca14 <xTaskCheckForTimeOut+0xdc>)
 800c966:	f7f7 fcd5 	bl	8004314 <vAssertCalled>
    configASSERT( pxTicksToWait );
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d110      	bne.n	800c992 <xTaskCheckForTimeOut+0x5a>
    __asm volatile
 800c970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c974:	b672      	cpsid	i
 800c976:	f383 8811 	msr	BASEPRI, r3
 800c97a:	f3bf 8f6f 	isb	sy
 800c97e:	f3bf 8f4f 	dsb	sy
 800c982:	b662      	cpsie	i
 800c984:	60fb      	str	r3, [r7, #12]
}
 800c986:	bf00      	nop
 800c988:	f241 51a6 	movw	r1, #5542	@ 0x15a6
 800c98c:	4821      	ldr	r0, [pc, #132]	@ (800ca14 <xTaskCheckForTimeOut+0xdc>)
 800c98e:	f7f7 fcc1 	bl	8004314 <vAssertCalled>

    taskENTER_CRITICAL();
 800c992:	f001 f8d5 	bl	800db40 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800c996:	4b20      	ldr	r3, [pc, #128]	@ (800ca18 <xTaskCheckForTimeOut+0xe0>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	69ba      	ldr	r2, [r7, #24]
 800c9a2:	1ad3      	subs	r3, r2, r3
 800c9a4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9ae:	d102      	bne.n	800c9b6 <xTaskCheckForTimeOut+0x7e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	61fb      	str	r3, [r7, #28]
 800c9b4:	e026      	b.n	800ca04 <xTaskCheckForTimeOut+0xcc>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681a      	ldr	r2, [r3, #0]
 800c9ba:	4b18      	ldr	r3, [pc, #96]	@ (800ca1c <xTaskCheckForTimeOut+0xe4>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	d00a      	beq.n	800c9d8 <xTaskCheckForTimeOut+0xa0>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	685b      	ldr	r3, [r3, #4]
 800c9c6:	69ba      	ldr	r2, [r7, #24]
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d305      	bcc.n	800c9d8 <xTaskCheckForTimeOut+0xa0>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	601a      	str	r2, [r3, #0]
 800c9d6:	e015      	b.n	800ca04 <xTaskCheckForTimeOut+0xcc>
        }
        else if( xElapsedTime < *pxTicksToWait )
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	697a      	ldr	r2, [r7, #20]
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d20b      	bcs.n	800c9fa <xTaskCheckForTimeOut+0xc2>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	681a      	ldr	r2, [r3, #0]
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	1ad2      	subs	r2, r2, r3
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f7ff ff8c 	bl	800c90c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	61fb      	str	r3, [r7, #28]
 800c9f8:	e004      	b.n	800ca04 <xTaskCheckForTimeOut+0xcc>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800ca00:	2301      	movs	r3, #1
 800ca02:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800ca04:	f001 f8d4 	bl	800dbb0 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 800ca08:	69fb      	ldr	r3, [r7, #28]
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3720      	adds	r7, #32
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}
 800ca12:	bf00      	nop
 800ca14:	08014080 	.word	0x08014080
 800ca18:	200004e8 	.word	0x200004e8
 800ca1c:	200004fc 	.word	0x200004fc

0800ca20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ca20:	b480      	push	{r7}
 800ca22:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 800ca24:	4b03      	ldr	r3, [pc, #12]	@ (800ca34 <vTaskMissedYield+0x14>)
 800ca26:	2201      	movs	r2, #1
 800ca28:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 800ca2a:	bf00      	nop
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca32:	4770      	bx	lr
 800ca34:	200004f8 	.word	0x200004f8

0800ca38 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b082      	sub	sp, #8
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800ca40:	f000 f852 	bl	800cae8 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 800ca44:	4b06      	ldr	r3, [pc, #24]	@ (800ca60 <prvIdleTask+0x28>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	2b01      	cmp	r3, #1
 800ca4a:	d9f9      	bls.n	800ca40 <prvIdleTask+0x8>
            {
                taskYIELD();
 800ca4c:	4b05      	ldr	r3, [pc, #20]	@ (800ca64 <prvIdleTask+0x2c>)
 800ca4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca52:	601a      	str	r2, [r3, #0]
 800ca54:	f3bf 8f4f 	dsb	sy
 800ca58:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800ca5c:	e7f0      	b.n	800ca40 <prvIdleTask+0x8>
 800ca5e:	bf00      	nop
 800ca60:	200003e8 	.word	0x200003e8
 800ca64:	e000ed04 	.word	0xe000ed04

0800ca68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca6e:	2300      	movs	r3, #0
 800ca70:	607b      	str	r3, [r7, #4]
 800ca72:	e00c      	b.n	800ca8e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ca74:	687a      	ldr	r2, [r7, #4]
 800ca76:	4613      	mov	r3, r2
 800ca78:	009b      	lsls	r3, r3, #2
 800ca7a:	4413      	add	r3, r2
 800ca7c:	009b      	lsls	r3, r3, #2
 800ca7e:	4a12      	ldr	r2, [pc, #72]	@ (800cac8 <prvInitialiseTaskLists+0x60>)
 800ca80:	4413      	add	r3, r2
 800ca82:	4618      	mov	r0, r3
 800ca84:	f7fd ff82 	bl	800a98c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	3301      	adds	r3, #1
 800ca8c:	607b      	str	r3, [r7, #4]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2b06      	cmp	r3, #6
 800ca92:	d9ef      	bls.n	800ca74 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800ca94:	480d      	ldr	r0, [pc, #52]	@ (800cacc <prvInitialiseTaskLists+0x64>)
 800ca96:	f7fd ff79 	bl	800a98c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800ca9a:	480d      	ldr	r0, [pc, #52]	@ (800cad0 <prvInitialiseTaskLists+0x68>)
 800ca9c:	f7fd ff76 	bl	800a98c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800caa0:	480c      	ldr	r0, [pc, #48]	@ (800cad4 <prvInitialiseTaskLists+0x6c>)
 800caa2:	f7fd ff73 	bl	800a98c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800caa6:	480c      	ldr	r0, [pc, #48]	@ (800cad8 <prvInitialiseTaskLists+0x70>)
 800caa8:	f7fd ff70 	bl	800a98c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800caac:	480b      	ldr	r0, [pc, #44]	@ (800cadc <prvInitialiseTaskLists+0x74>)
 800caae:	f7fd ff6d 	bl	800a98c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800cab2:	4b0b      	ldr	r3, [pc, #44]	@ (800cae0 <prvInitialiseTaskLists+0x78>)
 800cab4:	4a05      	ldr	r2, [pc, #20]	@ (800cacc <prvInitialiseTaskLists+0x64>)
 800cab6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cab8:	4b0a      	ldr	r3, [pc, #40]	@ (800cae4 <prvInitialiseTaskLists+0x7c>)
 800caba:	4a05      	ldr	r2, [pc, #20]	@ (800cad0 <prvInitialiseTaskLists+0x68>)
 800cabc:	601a      	str	r2, [r3, #0]
}
 800cabe:	bf00      	nop
 800cac0:	3708      	adds	r7, #8
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	200003e8 	.word	0x200003e8
 800cacc:	20000474 	.word	0x20000474
 800cad0:	20000488 	.word	0x20000488
 800cad4:	200004a4 	.word	0x200004a4
 800cad8:	200004b8 	.word	0x200004b8
 800cadc:	200004d0 	.word	0x200004d0
 800cae0:	2000049c 	.word	0x2000049c
 800cae4:	200004a0 	.word	0x200004a0

0800cae8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b082      	sub	sp, #8
 800caec:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800caee:	e019      	b.n	800cb24 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 800caf0:	f001 f826 	bl	800db40 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800caf4:	4b10      	ldr	r3, [pc, #64]	@ (800cb38 <prvCheckTasksWaitingTermination+0x50>)
 800caf6:	68db      	ldr	r3, [r3, #12]
 800caf8:	68db      	ldr	r3, [r3, #12]
 800cafa:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	3304      	adds	r3, #4
 800cb00:	4618      	mov	r0, r3
 800cb02:	f7fd ffcd 	bl	800aaa0 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800cb06:	4b0d      	ldr	r3, [pc, #52]	@ (800cb3c <prvCheckTasksWaitingTermination+0x54>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	3b01      	subs	r3, #1
 800cb0c:	4a0b      	ldr	r2, [pc, #44]	@ (800cb3c <prvCheckTasksWaitingTermination+0x54>)
 800cb0e:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 800cb10:	4b0b      	ldr	r3, [pc, #44]	@ (800cb40 <prvCheckTasksWaitingTermination+0x58>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	3b01      	subs	r3, #1
 800cb16:	4a0a      	ldr	r2, [pc, #40]	@ (800cb40 <prvCheckTasksWaitingTermination+0x58>)
 800cb18:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800cb1a:	f001 f849 	bl	800dbb0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f000 f8f0 	bl	800cd04 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cb24:	4b06      	ldr	r3, [pc, #24]	@ (800cb40 <prvCheckTasksWaitingTermination+0x58>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d1e1      	bne.n	800caf0 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800cb2c:	bf00      	nop
 800cb2e:	bf00      	nop
 800cb30:	3708      	adds	r7, #8
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}
 800cb36:	bf00      	nop
 800cb38:	200004b8 	.word	0x200004b8
 800cb3c:	200004e4 	.word	0x200004e4
 800cb40:	200004cc 	.word	0x200004cc

0800cb44 <vTaskGetInfo>:

    void vTaskGetInfo( TaskHandle_t xTask,
                       TaskStatus_t * pxTaskStatus,
                       BaseType_t xGetFreeStackSpace,
                       eTaskState eState )
    {
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b086      	sub	sp, #24
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	60f8      	str	r0, [r7, #12]
 800cb4c:	60b9      	str	r1, [r7, #8]
 800cb4e:	607a      	str	r2, [r7, #4]
 800cb50:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;

        traceENTER_vTaskGetInfo( xTask, pxTaskStatus, xGetFreeStackSpace, eState );

        /* xTask is NULL then get the state of the calling task. */
        pxTCB = prvGetTCBFromHandle( xTask );
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d102      	bne.n	800cb5e <vTaskGetInfo+0x1a>
 800cb58:	4b41      	ldr	r3, [pc, #260]	@ (800cc60 <vTaskGetInfo+0x11c>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	e000      	b.n	800cb60 <vTaskGetInfo+0x1c>
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	613b      	str	r3, [r7, #16]

        pxTaskStatus->xHandle = pxTCB;
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	693a      	ldr	r2, [r7, #16]
 800cb66:	601a      	str	r2, [r3, #0]
        pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	605a      	str	r2, [r3, #4]
        pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	611a      	str	r2, [r3, #16]
        pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	61da      	str	r2, [r3, #28]
        #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
            pxTaskStatus->pxTopOfStack = ( StackType_t * ) pxTCB->pxTopOfStack;
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	681a      	ldr	r2, [r3, #0]
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	621a      	str	r2, [r3, #32]
            pxTaskStatus->pxEndOfStack = pxTCB->pxEndOfStack;
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	625a      	str	r2, [r3, #36]	@ 0x24
        #endif
        pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cb96:	68bb      	ldr	r3, [r7, #8]
 800cb98:	609a      	str	r2, [r3, #8]
        }
        #endif

        #if ( configUSE_MUTEXES == 1 )
        {
            pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	615a      	str	r2, [r3, #20]
        }
        #endif

        #if ( configGENERATE_RUN_TIME_STATS == 1 )
        {
            pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	619a      	str	r2, [r3, #24]
        #endif

        /* Obtaining the task state is a little fiddly, so is only done if the
         * value of eState passed into this function is eInvalid - otherwise the
         * state is just set to whatever is passed in. */
        if( eState != eInvalid )
 800cbaa:	78fb      	ldrb	r3, [r7, #3]
 800cbac:	2b05      	cmp	r3, #5
 800cbae:	d03c      	beq.n	800cc2a <vTaskGetInfo+0xe6>
        {
            if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
 800cbb0:	4b2b      	ldr	r3, [pc, #172]	@ (800cc60 <vTaskGetInfo+0x11c>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	693a      	ldr	r2, [r7, #16]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d103      	bne.n	800cbc2 <vTaskGetInfo+0x7e>
            {
                pxTaskStatus->eCurrentState = eRunning;
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	731a      	strb	r2, [r3, #12]
 800cbc0:	e03a      	b.n	800cc38 <vTaskGetInfo+0xf4>
            }
            else
            {
                pxTaskStatus->eCurrentState = eState;
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	78fa      	ldrb	r2, [r7, #3]
 800cbc6:	731a      	strb	r2, [r3, #12]
                #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    /* If the task is in the suspended list then there is a
                     *  chance it is actually just blocked indefinitely - so really
                     *  it should be reported as being in the Blocked state. */
                    if( eState == eSuspended )
 800cbc8:	78fb      	ldrb	r3, [r7, #3]
 800cbca:	2b03      	cmp	r3, #3
 800cbcc:	d120      	bne.n	800cc10 <vTaskGetInfo+0xcc>
                    {
                        vTaskSuspendAll();
 800cbce:	f7ff f9b7 	bl	800bf40 <vTaskSuspendAll>
                        {
                            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d003      	beq.n	800cbe2 <vTaskGetInfo+0x9e>
                            {
                                pxTaskStatus->eCurrentState = eBlocked;
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	2202      	movs	r2, #2
 800cbde:	731a      	strb	r2, [r3, #12]
 800cbe0:	e014      	b.n	800cc0c <vTaskGetInfo+0xc8>
                                    /* The task does not appear on the event list item of
                                     * and of the RTOS objects, but could still be in the
                                     * blocked state if it is waiting on its notification
                                     * rather than waiting on an object.  If not, is
                                     * suspended. */
                                    for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	617b      	str	r3, [r7, #20]
 800cbe6:	e00e      	b.n	800cc06 <vTaskGetInfo+0xc2>
                                    {
                                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 800cbe8:	693a      	ldr	r2, [r7, #16]
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	4413      	add	r3, r2
 800cbee:	33ac      	adds	r3, #172	@ 0xac
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	2b01      	cmp	r3, #1
 800cbf6:	d103      	bne.n	800cc00 <vTaskGetInfo+0xbc>
                                        {
                                            pxTaskStatus->eCurrentState = eBlocked;
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	2202      	movs	r2, #2
 800cbfc:	731a      	strb	r2, [r3, #12]
                                            break;
 800cbfe:	e005      	b.n	800cc0c <vTaskGetInfo+0xc8>
                                    for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	3301      	adds	r3, #1
 800cc04:	617b      	str	r3, [r7, #20]
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	dded      	ble.n	800cbe8 <vTaskGetInfo+0xa4>
                                    }
                                }
                                #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
                            }
                        }
                        ( void ) xTaskResumeAll();
 800cc0c:	f7ff f9a6 	bl	800bf5c <xTaskResumeAll>
                #endif /* INCLUDE_vTaskSuspend */

                /* Tasks can be in pending ready list and other state list at the
                 * same time. These tasks are in ready state no matter what state
                 * list the task is in. */
                taskENTER_CRITICAL();
 800cc10:	f000 ff96 	bl	800db40 <vPortEnterCritical>
                {
                    if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdFALSE )
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc18:	4a12      	ldr	r2, [pc, #72]	@ (800cc64 <vTaskGetInfo+0x120>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d102      	bne.n	800cc24 <vTaskGetInfo+0xe0>
                    {
                        pxTaskStatus->eCurrentState = eReady;
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	2201      	movs	r2, #1
 800cc22:	731a      	strb	r2, [r3, #12]
                    }
                }
                taskEXIT_CRITICAL();
 800cc24:	f000 ffc4 	bl	800dbb0 <vPortExitCritical>
 800cc28:	e006      	b.n	800cc38 <vTaskGetInfo+0xf4>
            }
        }
        else
        {
            pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800cc2a:	6938      	ldr	r0, [r7, #16]
 800cc2c:	f7ff f858 	bl	800bce0 <eTaskGetState>
 800cc30:	4603      	mov	r3, r0
 800cc32:	461a      	mov	r2, r3
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	731a      	strb	r2, [r3, #12]
        }

        /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
         * parameter is provided to allow it to be skipped. */
        if( xGetFreeStackSpace != pdFALSE )
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d008      	beq.n	800cc50 <vTaskGetInfo+0x10c>
            {
                pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
            }
            #else
            {
                pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc42:	4618      	mov	r0, r3
 800cc44:	f000 f843 	bl	800ccce <prvTaskCheckFreeStackSpace>
 800cc48:	4602      	mov	r2, r0
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	629a      	str	r2, [r3, #40]	@ 0x28
        {
            pxTaskStatus->usStackHighWaterMark = 0;
        }

        traceRETURN_vTaskGetInfo();
    }
 800cc4e:	e002      	b.n	800cc56 <vTaskGetInfo+0x112>
            pxTaskStatus->usStackHighWaterMark = 0;
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	2200      	movs	r2, #0
 800cc54:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 800cc56:	bf00      	nop
 800cc58:	3718      	adds	r7, #24
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}
 800cc5e:	bf00      	nop
 800cc60:	200003e4 	.word	0x200003e4
 800cc64:	200004a4 	.word	0x200004a4

0800cc68 <prvListTasksWithinSingleList>:
#if ( configUSE_TRACE_FACILITY == 1 )

    static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
                                                     List_t * pxList,
                                                     eTaskState eState )
    {
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b088      	sub	sp, #32
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	60b9      	str	r1, [r7, #8]
 800cc72:	4613      	mov	r3, r2
 800cc74:	71fb      	strb	r3, [r7, #7]
        UBaseType_t uxTask = 0;
 800cc76:	2300      	movs	r3, #0
 800cc78:	61fb      	str	r3, [r7, #28]
        const ListItem_t * pxEndMarker = listGET_END_MARKER( pxList );
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	3308      	adds	r3, #8
 800cc7e:	617b      	str	r3, [r7, #20]
        ListItem_t * pxIterator;
        TCB_t * pxTCB = NULL;
 800cc80:	2300      	movs	r3, #0
 800cc82:	613b      	str	r3, [r7, #16]

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d01b      	beq.n	800ccc4 <prvListTasksWithinSingleList+0x5c>
        {
            /* Populate an TaskStatus_t structure within the
             * pxTaskStatusArray array for each task that is referenced from
             * pxList.  See the definition of TaskStatus_t in task.h for the
             * meaning of each TaskStatus_t structure member. */
            for( pxIterator = listGET_HEAD_ENTRY( pxList ); pxIterator != pxEndMarker; pxIterator = listGET_NEXT( pxIterator ) )
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	68db      	ldr	r3, [r3, #12]
 800cc90:	61bb      	str	r3, [r7, #24]
 800cc92:	e013      	b.n	800ccbc <prvListTasksWithinSingleList+0x54>
            {
                /* MISRA Ref 11.5.3 [Void pointer assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxTCB = listGET_LIST_ITEM_OWNER( pxIterator );
 800cc94:	69bb      	ldr	r3, [r7, #24]
 800cc96:	68db      	ldr	r3, [r3, #12]
 800cc98:	613b      	str	r3, [r7, #16]

                vTaskGetInfo( ( TaskHandle_t ) pxTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800cc9a:	69fb      	ldr	r3, [r7, #28]
 800cc9c:	222c      	movs	r2, #44	@ 0x2c
 800cc9e:	fb02 f303 	mul.w	r3, r2, r3
 800cca2:	68fa      	ldr	r2, [r7, #12]
 800cca4:	18d1      	adds	r1, r2, r3
 800cca6:	79fb      	ldrb	r3, [r7, #7]
 800cca8:	2201      	movs	r2, #1
 800ccaa:	6938      	ldr	r0, [r7, #16]
 800ccac:	f7ff ff4a 	bl	800cb44 <vTaskGetInfo>
                uxTask++;
 800ccb0:	69fb      	ldr	r3, [r7, #28]
 800ccb2:	3301      	adds	r3, #1
 800ccb4:	61fb      	str	r3, [r7, #28]
            for( pxIterator = listGET_HEAD_ENTRY( pxList ); pxIterator != pxEndMarker; pxIterator = listGET_NEXT( pxIterator ) )
 800ccb6:	69bb      	ldr	r3, [r7, #24]
 800ccb8:	685b      	ldr	r3, [r3, #4]
 800ccba:	61bb      	str	r3, [r7, #24]
 800ccbc:	69ba      	ldr	r2, [r7, #24]
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d1e7      	bne.n	800cc94 <prvListTasksWithinSingleList+0x2c>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return uxTask;
 800ccc4:	69fb      	ldr	r3, [r7, #28]
    }
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3720      	adds	r7, #32
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}

0800ccce <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 800ccce:	b480      	push	{r7}
 800ccd0:	b085      	sub	sp, #20
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	6078      	str	r0, [r7, #4]
        configSTACK_DEPTH_TYPE uxCount = 0U;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ccda:	e005      	b.n	800cce8 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	3301      	adds	r3, #1
 800cce0:	607b      	str	r3, [r7, #4]
            uxCount++;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	3301      	adds	r3, #1
 800cce6:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	2ba5      	cmp	r3, #165	@ 0xa5
 800ccee:	d0f5      	beq.n	800ccdc <prvTaskCheckFreeStackSpace+0xe>
        }

        uxCount /= ( configSTACK_DEPTH_TYPE ) sizeof( StackType_t );
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	089b      	lsrs	r3, r3, #2
 800ccf4:	60fb      	str	r3, [r7, #12]

        return uxCount;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
    }
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3714      	adds	r7, #20
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd02:	4770      	bx	lr

0800cd04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b082      	sub	sp, #8
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
        portCLEAN_UP_TCB( pxTCB );

        #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxTCB->xTLSBlock );
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	335c      	adds	r3, #92	@ 0x5c
 800cd10:	4618      	mov	r0, r3
 800cd12:	f003 fba7 	bl	8010464 <_reclaim_reent>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f7f7 fe70 	bl	8004a00 <vPortFree>
            vPortFree( pxTCB );
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f7f7 fe6d 	bl	8004a00 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800cd26:	bf00      	nop
 800cd28:	3708      	adds	r7, #8
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
	...

0800cd30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cd30:	b480      	push	{r7}
 800cd32:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd34:	4b0a      	ldr	r3, [pc, #40]	@ (800cd60 <prvResetNextTaskUnblockTime+0x30>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d104      	bne.n	800cd48 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800cd3e:	4b09      	ldr	r3, [pc, #36]	@ (800cd64 <prvResetNextTaskUnblockTime+0x34>)
 800cd40:	f04f 32ff 	mov.w	r2, #4294967295
 800cd44:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800cd46:	e005      	b.n	800cd54 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800cd48:	4b05      	ldr	r3, [pc, #20]	@ (800cd60 <prvResetNextTaskUnblockTime+0x30>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	68db      	ldr	r3, [r3, #12]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	4a04      	ldr	r2, [pc, #16]	@ (800cd64 <prvResetNextTaskUnblockTime+0x34>)
 800cd52:	6013      	str	r3, [r2, #0]
}
 800cd54:	bf00      	nop
 800cd56:	46bd      	mov	sp, r7
 800cd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5c:	4770      	bx	lr
 800cd5e:	bf00      	nop
 800cd60:	2000049c 	.word	0x2000049c
 800cd64:	20000504 	.word	0x20000504

0800cd68 <xTaskGetCurrentTaskHandle>:

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) || ( configNUMBER_OF_CORES > 1 )

    #if ( configNUMBER_OF_CORES == 1 )
        TaskHandle_t xTaskGetCurrentTaskHandle( void )
        {
 800cd68:	b480      	push	{r7}
 800cd6a:	b083      	sub	sp, #12
 800cd6c:	af00      	add	r7, sp, #0
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
 800cd6e:	4b05      	ldr	r3, [pc, #20]	@ (800cd84 <xTaskGetCurrentTaskHandle+0x1c>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	607b      	str	r3, [r7, #4]

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
 800cd74:	687b      	ldr	r3, [r7, #4]
        }
 800cd76:	4618      	mov	r0, r3
 800cd78:	370c      	adds	r7, #12
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd80:	4770      	bx	lr
 800cd82:	bf00      	nop
 800cd84:	200003e4 	.word	0x200003e4

0800cd88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800cd88:	b480      	push	{r7}
 800cd8a:	b083      	sub	sp, #12
 800cd8c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 800cd8e:	4b0b      	ldr	r3, [pc, #44]	@ (800cdbc <xTaskGetSchedulerState+0x34>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d102      	bne.n	800cd9c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800cd96:	2301      	movs	r3, #1
 800cd98:	607b      	str	r3, [r7, #4]
 800cd9a:	e008      	b.n	800cdae <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800cd9c:	4b08      	ldr	r3, [pc, #32]	@ (800cdc0 <xTaskGetSchedulerState+0x38>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d102      	bne.n	800cdaa <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 800cda4:	2302      	movs	r3, #2
 800cda6:	607b      	str	r3, [r7, #4]
 800cda8:	e001      	b.n	800cdae <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 800cdae:	687b      	ldr	r3, [r7, #4]
    }
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	370c      	adds	r7, #12
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr
 800cdbc:	200004f0 	.word	0x200004f0
 800cdc0:	2000050c 	.word	0x2000050c

0800cdc4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b086      	sub	sp, #24
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	f000 8089 	beq.w	800ceee <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cddc:	693b      	ldr	r3, [r7, #16]
 800cdde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cde0:	4b45      	ldr	r3, [pc, #276]	@ (800cef8 <xTaskPriorityInherit+0x134>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cde6:	429a      	cmp	r2, r3
 800cde8:	d278      	bcs.n	800cedc <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	699b      	ldr	r3, [r3, #24]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	db06      	blt.n	800ce00 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 800cdf2:	4b41      	ldr	r3, [pc, #260]	@ (800cef8 <xTaskPriorityInherit+0x134>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdf8:	f1c3 0207 	rsb	r2, r3, #7
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	6959      	ldr	r1, [r3, #20]
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce08:	4613      	mov	r3, r2
 800ce0a:	009b      	lsls	r3, r3, #2
 800ce0c:	4413      	add	r3, r2
 800ce0e:	009b      	lsls	r3, r3, #2
 800ce10:	4a3a      	ldr	r2, [pc, #232]	@ (800cefc <xTaskPriorityInherit+0x138>)
 800ce12:	4413      	add	r3, r2
 800ce14:	4299      	cmp	r1, r3
 800ce16:	d159      	bne.n	800cecc <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	3304      	adds	r3, #4
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7fd fe3f 	bl	800aaa0 <uxListRemove>
 800ce22:	4603      	mov	r3, r0
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d10a      	bne.n	800ce3e <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	fa02 f303 	lsl.w	r3, r2, r3
 800ce32:	43da      	mvns	r2, r3
 800ce34:	4b32      	ldr	r3, [pc, #200]	@ (800cf00 <xTaskPriorityInherit+0x13c>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	4013      	ands	r3, r2
 800ce3a:	4a31      	ldr	r2, [pc, #196]	@ (800cf00 <xTaskPriorityInherit+0x13c>)
 800ce3c:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ce3e:	4b2e      	ldr	r3, [pc, #184]	@ (800cef8 <xTaskPriorityInherit+0x134>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	409a      	lsls	r2, r3
 800ce50:	4b2b      	ldr	r3, [pc, #172]	@ (800cf00 <xTaskPriorityInherit+0x13c>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	4313      	orrs	r3, r2
 800ce56:	4a2a      	ldr	r2, [pc, #168]	@ (800cf00 <xTaskPriorityInherit+0x13c>)
 800ce58:	6013      	str	r3, [r2, #0]
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce5e:	4927      	ldr	r1, [pc, #156]	@ (800cefc <xTaskPriorityInherit+0x138>)
 800ce60:	4613      	mov	r3, r2
 800ce62:	009b      	lsls	r3, r3, #2
 800ce64:	4413      	add	r3, r2
 800ce66:	009b      	lsls	r3, r3, #2
 800ce68:	440b      	add	r3, r1
 800ce6a:	3304      	adds	r3, #4
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	60fb      	str	r3, [r7, #12]
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	68fa      	ldr	r2, [r7, #12]
 800ce74:	609a      	str	r2, [r3, #8]
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	689a      	ldr	r2, [r3, #8]
 800ce7a:	693b      	ldr	r3, [r7, #16]
 800ce7c:	60da      	str	r2, [r3, #12]
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	689b      	ldr	r3, [r3, #8]
 800ce82:	693a      	ldr	r2, [r7, #16]
 800ce84:	3204      	adds	r2, #4
 800ce86:	605a      	str	r2, [r3, #4]
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	1d1a      	adds	r2, r3, #4
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	609a      	str	r2, [r3, #8]
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce94:	4613      	mov	r3, r2
 800ce96:	009b      	lsls	r3, r3, #2
 800ce98:	4413      	add	r3, r2
 800ce9a:	009b      	lsls	r3, r3, #2
 800ce9c:	4a17      	ldr	r2, [pc, #92]	@ (800cefc <xTaskPriorityInherit+0x138>)
 800ce9e:	441a      	add	r2, r3
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	615a      	str	r2, [r3, #20]
 800cea4:	693b      	ldr	r3, [r7, #16]
 800cea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cea8:	4914      	ldr	r1, [pc, #80]	@ (800cefc <xTaskPriorityInherit+0x138>)
 800ceaa:	4613      	mov	r3, r2
 800ceac:	009b      	lsls	r3, r3, #2
 800ceae:	4413      	add	r3, r2
 800ceb0:	009b      	lsls	r3, r3, #2
 800ceb2:	440b      	add	r3, r1
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	693a      	ldr	r2, [r7, #16]
 800ceb8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ceba:	1c59      	adds	r1, r3, #1
 800cebc:	480f      	ldr	r0, [pc, #60]	@ (800cefc <xTaskPriorityInherit+0x138>)
 800cebe:	4613      	mov	r3, r2
 800cec0:	009b      	lsls	r3, r3, #2
 800cec2:	4413      	add	r3, r2
 800cec4:	009b      	lsls	r3, r3, #2
 800cec6:	4403      	add	r3, r0
 800cec8:	6019      	str	r1, [r3, #0]
 800ceca:	e004      	b.n	800ced6 <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cecc:	4b0a      	ldr	r3, [pc, #40]	@ (800cef8 <xTaskPriorityInherit+0x134>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800ced6:	2301      	movs	r3, #1
 800ced8:	617b      	str	r3, [r7, #20]
 800ceda:	e008      	b.n	800ceee <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cee0:	4b05      	ldr	r3, [pc, #20]	@ (800cef8 <xTaskPriorityInherit+0x134>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d201      	bcs.n	800ceee <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800ceea:	2301      	movs	r3, #1
 800ceec:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 800ceee:	697b      	ldr	r3, [r7, #20]
    }
 800cef0:	4618      	mov	r0, r3
 800cef2:	3718      	adds	r7, #24
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}
 800cef8:	200003e4 	.word	0x200003e4
 800cefc:	200003e8 	.word	0x200003e8
 800cf00:	200004ec 	.word	0x200004ec

0800cf04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b088      	sub	sp, #32
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800cf10:	2300      	movs	r3, #0
 800cf12:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	f000 809a 	beq.w	800d050 <xTaskPriorityDisinherit+0x14c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800cf1c:	4b4f      	ldr	r3, [pc, #316]	@ (800d05c <xTaskPriorityDisinherit+0x158>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	69ba      	ldr	r2, [r7, #24]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d010      	beq.n	800cf48 <xTaskPriorityDisinherit+0x44>
    __asm volatile
 800cf26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf2a:	b672      	cpsid	i
 800cf2c:	f383 8811 	msr	BASEPRI, r3
 800cf30:	f3bf 8f6f 	isb	sy
 800cf34:	f3bf 8f4f 	dsb	sy
 800cf38:	b662      	cpsie	i
 800cf3a:	613b      	str	r3, [r7, #16]
}
 800cf3c:	bf00      	nop
 800cf3e:	f641 2128 	movw	r1, #6696	@ 0x1a28
 800cf42:	4847      	ldr	r0, [pc, #284]	@ (800d060 <xTaskPriorityDisinherit+0x15c>)
 800cf44:	f7f7 f9e6 	bl	8004314 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 800cf48:	69bb      	ldr	r3, [r7, #24]
 800cf4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d110      	bne.n	800cf72 <xTaskPriorityDisinherit+0x6e>
    __asm volatile
 800cf50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf54:	b672      	cpsid	i
 800cf56:	f383 8811 	msr	BASEPRI, r3
 800cf5a:	f3bf 8f6f 	isb	sy
 800cf5e:	f3bf 8f4f 	dsb	sy
 800cf62:	b662      	cpsie	i
 800cf64:	60fb      	str	r3, [r7, #12]
}
 800cf66:	bf00      	nop
 800cf68:	f641 2129 	movw	r1, #6697	@ 0x1a29
 800cf6c:	483c      	ldr	r0, [pc, #240]	@ (800d060 <xTaskPriorityDisinherit+0x15c>)
 800cf6e:	f7f7 f9d1 	bl	8004314 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 800cf72:	69bb      	ldr	r3, [r7, #24]
 800cf74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf76:	1e5a      	subs	r2, r3, #1
 800cf78:	69bb      	ldr	r3, [r7, #24]
 800cf7a:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cf7c:	69bb      	ldr	r3, [r7, #24]
 800cf7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf80:	69bb      	ldr	r3, [r7, #24]
 800cf82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d063      	beq.n	800d050 <xTaskPriorityDisinherit+0x14c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cf88:	69bb      	ldr	r3, [r7, #24]
 800cf8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d15f      	bne.n	800d050 <xTaskPriorityDisinherit+0x14c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf90:	69bb      	ldr	r3, [r7, #24]
 800cf92:	3304      	adds	r3, #4
 800cf94:	4618      	mov	r0, r3
 800cf96:	f7fd fd83 	bl	800aaa0 <uxListRemove>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d10a      	bne.n	800cfb6 <xTaskPriorityDisinherit+0xb2>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800cfa0:	69bb      	ldr	r3, [r7, #24]
 800cfa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfa4:	2201      	movs	r2, #1
 800cfa6:	fa02 f303 	lsl.w	r3, r2, r3
 800cfaa:	43da      	mvns	r2, r3
 800cfac:	4b2d      	ldr	r3, [pc, #180]	@ (800d064 <xTaskPriorityDisinherit+0x160>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	4013      	ands	r3, r2
 800cfb2:	4a2c      	ldr	r2, [pc, #176]	@ (800d064 <xTaskPriorityDisinherit+0x160>)
 800cfb4:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cfb6:	69bb      	ldr	r3, [r7, #24]
 800cfb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cfba:	69bb      	ldr	r3, [r7, #24]
 800cfbc:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 800cfbe:	69bb      	ldr	r3, [r7, #24]
 800cfc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfc2:	f1c3 0207 	rsb	r2, r3, #7
 800cfc6:	69bb      	ldr	r3, [r7, #24]
 800cfc8:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800cfca:	69bb      	ldr	r3, [r7, #24]
 800cfcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfce:	2201      	movs	r2, #1
 800cfd0:	409a      	lsls	r2, r3
 800cfd2:	4b24      	ldr	r3, [pc, #144]	@ (800d064 <xTaskPriorityDisinherit+0x160>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	4313      	orrs	r3, r2
 800cfd8:	4a22      	ldr	r2, [pc, #136]	@ (800d064 <xTaskPriorityDisinherit+0x160>)
 800cfda:	6013      	str	r3, [r2, #0]
 800cfdc:	69bb      	ldr	r3, [r7, #24]
 800cfde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfe0:	4921      	ldr	r1, [pc, #132]	@ (800d068 <xTaskPriorityDisinherit+0x164>)
 800cfe2:	4613      	mov	r3, r2
 800cfe4:	009b      	lsls	r3, r3, #2
 800cfe6:	4413      	add	r3, r2
 800cfe8:	009b      	lsls	r3, r3, #2
 800cfea:	440b      	add	r3, r1
 800cfec:	3304      	adds	r3, #4
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	617b      	str	r3, [r7, #20]
 800cff2:	69bb      	ldr	r3, [r7, #24]
 800cff4:	697a      	ldr	r2, [r7, #20]
 800cff6:	609a      	str	r2, [r3, #8]
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	689a      	ldr	r2, [r3, #8]
 800cffc:	69bb      	ldr	r3, [r7, #24]
 800cffe:	60da      	str	r2, [r3, #12]
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	689b      	ldr	r3, [r3, #8]
 800d004:	69ba      	ldr	r2, [r7, #24]
 800d006:	3204      	adds	r2, #4
 800d008:	605a      	str	r2, [r3, #4]
 800d00a:	69bb      	ldr	r3, [r7, #24]
 800d00c:	1d1a      	adds	r2, r3, #4
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	609a      	str	r2, [r3, #8]
 800d012:	69bb      	ldr	r3, [r7, #24]
 800d014:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d016:	4613      	mov	r3, r2
 800d018:	009b      	lsls	r3, r3, #2
 800d01a:	4413      	add	r3, r2
 800d01c:	009b      	lsls	r3, r3, #2
 800d01e:	4a12      	ldr	r2, [pc, #72]	@ (800d068 <xTaskPriorityDisinherit+0x164>)
 800d020:	441a      	add	r2, r3
 800d022:	69bb      	ldr	r3, [r7, #24]
 800d024:	615a      	str	r2, [r3, #20]
 800d026:	69bb      	ldr	r3, [r7, #24]
 800d028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d02a:	490f      	ldr	r1, [pc, #60]	@ (800d068 <xTaskPriorityDisinherit+0x164>)
 800d02c:	4613      	mov	r3, r2
 800d02e:	009b      	lsls	r3, r3, #2
 800d030:	4413      	add	r3, r2
 800d032:	009b      	lsls	r3, r3, #2
 800d034:	440b      	add	r3, r1
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	69ba      	ldr	r2, [r7, #24]
 800d03a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d03c:	1c59      	adds	r1, r3, #1
 800d03e:	480a      	ldr	r0, [pc, #40]	@ (800d068 <xTaskPriorityDisinherit+0x164>)
 800d040:	4613      	mov	r3, r2
 800d042:	009b      	lsls	r3, r3, #2
 800d044:	4413      	add	r3, r2
 800d046:	009b      	lsls	r3, r3, #2
 800d048:	4403      	add	r3, r0
 800d04a:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800d04c:	2301      	movs	r3, #1
 800d04e:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 800d050:	69fb      	ldr	r3, [r7, #28]
    }
 800d052:	4618      	mov	r0, r3
 800d054:	3720      	adds	r7, #32
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop
 800d05c:	200003e4 	.word	0x200003e4
 800d060:	08014080 	.word	0x08014080
 800d064:	200004ec 	.word	0x200004ec
 800d068:	200003e8 	.word	0x200003e8

0800d06c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b08a      	sub	sp, #40	@ 0x28
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d07a:	2301      	movs	r3, #1
 800d07c:	61fb      	str	r3, [r7, #28]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2b00      	cmp	r3, #0
 800d082:	f000 80b0 	beq.w	800d1e6 <vTaskPriorityDisinheritAfterTimeout+0x17a>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800d086:	6a3b      	ldr	r3, [r7, #32]
 800d088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d110      	bne.n	800d0b0 <vTaskPriorityDisinheritAfterTimeout+0x44>
    __asm volatile
 800d08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d092:	b672      	cpsid	i
 800d094:	f383 8811 	msr	BASEPRI, r3
 800d098:	f3bf 8f6f 	isb	sy
 800d09c:	f3bf 8f4f 	dsb	sy
 800d0a0:	b662      	cpsie	i
 800d0a2:	613b      	str	r3, [r7, #16]
}
 800d0a4:	bf00      	nop
 800d0a6:	f641 2186 	movw	r1, #6790	@ 0x1a86
 800d0aa:	4851      	ldr	r0, [pc, #324]	@ (800d1f0 <vTaskPriorityDisinheritAfterTimeout+0x184>)
 800d0ac:	f7f7 f932 	bl	8004314 <vAssertCalled>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d0b0:	6a3b      	ldr	r3, [r7, #32]
 800d0b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d0b4:	683a      	ldr	r2, [r7, #0]
 800d0b6:	429a      	cmp	r2, r3
 800d0b8:	d902      	bls.n	800d0c0 <vTaskPriorityDisinheritAfterTimeout+0x54>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	627b      	str	r3, [r7, #36]	@ 0x24
 800d0be:	e002      	b.n	800d0c6 <vTaskPriorityDisinheritAfterTimeout+0x5a>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800d0c0:	6a3b      	ldr	r3, [r7, #32]
 800d0c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d0c4:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800d0c6:	6a3b      	ldr	r3, [r7, #32]
 800d0c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	f000 808a 	beq.w	800d1e6 <vTaskPriorityDisinheritAfterTimeout+0x17a>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d0d2:	6a3b      	ldr	r3, [r7, #32]
 800d0d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d0d6:	69fa      	ldr	r2, [r7, #28]
 800d0d8:	429a      	cmp	r2, r3
 800d0da:	f040 8084 	bne.w	800d1e6 <vTaskPriorityDisinheritAfterTimeout+0x17a>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800d0de:	4b45      	ldr	r3, [pc, #276]	@ (800d1f4 <vTaskPriorityDisinheritAfterTimeout+0x188>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	6a3a      	ldr	r2, [r7, #32]
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d110      	bne.n	800d10a <vTaskPriorityDisinheritAfterTimeout+0x9e>
    __asm volatile
 800d0e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0ec:	b672      	cpsid	i
 800d0ee:	f383 8811 	msr	BASEPRI, r3
 800d0f2:	f3bf 8f6f 	isb	sy
 800d0f6:	f3bf 8f4f 	dsb	sy
 800d0fa:	b662      	cpsie	i
 800d0fc:	60fb      	str	r3, [r7, #12]
}
 800d0fe:	bf00      	nop
 800d100:	f641 21a1 	movw	r1, #6817	@ 0x1aa1
 800d104:	483a      	ldr	r0, [pc, #232]	@ (800d1f0 <vTaskPriorityDisinheritAfterTimeout+0x184>)
 800d106:	f7f7 f905 	bl	8004314 <vAssertCalled>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d10a:	6a3b      	ldr	r3, [r7, #32]
 800d10c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d10e:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 800d110:	6a3b      	ldr	r3, [r7, #32]
 800d112:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d114:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800d116:	6a3b      	ldr	r3, [r7, #32]
 800d118:	699b      	ldr	r3, [r3, #24]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	db04      	blt.n	800d128 <vTaskPriorityDisinheritAfterTimeout+0xbc>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 800d11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d120:	f1c3 0207 	rsb	r2, r3, #7
 800d124:	6a3b      	ldr	r3, [r7, #32]
 800d126:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d128:	6a3b      	ldr	r3, [r7, #32]
 800d12a:	6959      	ldr	r1, [r3, #20]
 800d12c:	69ba      	ldr	r2, [r7, #24]
 800d12e:	4613      	mov	r3, r2
 800d130:	009b      	lsls	r3, r3, #2
 800d132:	4413      	add	r3, r2
 800d134:	009b      	lsls	r3, r3, #2
 800d136:	4a30      	ldr	r2, [pc, #192]	@ (800d1f8 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 800d138:	4413      	add	r3, r2
 800d13a:	4299      	cmp	r1, r3
 800d13c:	d153      	bne.n	800d1e6 <vTaskPriorityDisinheritAfterTimeout+0x17a>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d13e:	6a3b      	ldr	r3, [r7, #32]
 800d140:	3304      	adds	r3, #4
 800d142:	4618      	mov	r0, r3
 800d144:	f7fd fcac 	bl	800aaa0 <uxListRemove>
 800d148:	4603      	mov	r3, r0
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d10a      	bne.n	800d164 <vTaskPriorityDisinheritAfterTimeout+0xf8>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800d14e:	6a3b      	ldr	r3, [r7, #32]
 800d150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d152:	2201      	movs	r2, #1
 800d154:	fa02 f303 	lsl.w	r3, r2, r3
 800d158:	43da      	mvns	r2, r3
 800d15a:	4b28      	ldr	r3, [pc, #160]	@ (800d1fc <vTaskPriorityDisinheritAfterTimeout+0x190>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	4013      	ands	r3, r2
 800d160:	4a26      	ldr	r2, [pc, #152]	@ (800d1fc <vTaskPriorityDisinheritAfterTimeout+0x190>)
 800d162:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800d164:	6a3b      	ldr	r3, [r7, #32]
 800d166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d168:	2201      	movs	r2, #1
 800d16a:	409a      	lsls	r2, r3
 800d16c:	4b23      	ldr	r3, [pc, #140]	@ (800d1fc <vTaskPriorityDisinheritAfterTimeout+0x190>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	4313      	orrs	r3, r2
 800d172:	4a22      	ldr	r2, [pc, #136]	@ (800d1fc <vTaskPriorityDisinheritAfterTimeout+0x190>)
 800d174:	6013      	str	r3, [r2, #0]
 800d176:	6a3b      	ldr	r3, [r7, #32]
 800d178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d17a:	491f      	ldr	r1, [pc, #124]	@ (800d1f8 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 800d17c:	4613      	mov	r3, r2
 800d17e:	009b      	lsls	r3, r3, #2
 800d180:	4413      	add	r3, r2
 800d182:	009b      	lsls	r3, r3, #2
 800d184:	440b      	add	r3, r1
 800d186:	3304      	adds	r3, #4
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	617b      	str	r3, [r7, #20]
 800d18c:	6a3b      	ldr	r3, [r7, #32]
 800d18e:	697a      	ldr	r2, [r7, #20]
 800d190:	609a      	str	r2, [r3, #8]
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	689a      	ldr	r2, [r3, #8]
 800d196:	6a3b      	ldr	r3, [r7, #32]
 800d198:	60da      	str	r2, [r3, #12]
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	689b      	ldr	r3, [r3, #8]
 800d19e:	6a3a      	ldr	r2, [r7, #32]
 800d1a0:	3204      	adds	r2, #4
 800d1a2:	605a      	str	r2, [r3, #4]
 800d1a4:	6a3b      	ldr	r3, [r7, #32]
 800d1a6:	1d1a      	adds	r2, r3, #4
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	609a      	str	r2, [r3, #8]
 800d1ac:	6a3b      	ldr	r3, [r7, #32]
 800d1ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1b0:	4613      	mov	r3, r2
 800d1b2:	009b      	lsls	r3, r3, #2
 800d1b4:	4413      	add	r3, r2
 800d1b6:	009b      	lsls	r3, r3, #2
 800d1b8:	4a0f      	ldr	r2, [pc, #60]	@ (800d1f8 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 800d1ba:	441a      	add	r2, r3
 800d1bc:	6a3b      	ldr	r3, [r7, #32]
 800d1be:	615a      	str	r2, [r3, #20]
 800d1c0:	6a3b      	ldr	r3, [r7, #32]
 800d1c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1c4:	490c      	ldr	r1, [pc, #48]	@ (800d1f8 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 800d1c6:	4613      	mov	r3, r2
 800d1c8:	009b      	lsls	r3, r3, #2
 800d1ca:	4413      	add	r3, r2
 800d1cc:	009b      	lsls	r3, r3, #2
 800d1ce:	440b      	add	r3, r1
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	6a3a      	ldr	r2, [r7, #32]
 800d1d4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d1d6:	1c59      	adds	r1, r3, #1
 800d1d8:	4807      	ldr	r0, [pc, #28]	@ (800d1f8 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 800d1da:	4613      	mov	r3, r2
 800d1dc:	009b      	lsls	r3, r3, #2
 800d1de:	4413      	add	r3, r2
 800d1e0:	009b      	lsls	r3, r3, #2
 800d1e2:	4403      	add	r3, r0
 800d1e4:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 800d1e6:	bf00      	nop
 800d1e8:	3728      	adds	r7, #40	@ 0x28
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}
 800d1ee:	bf00      	nop
 800d1f0:	08014080 	.word	0x08014080
 800d1f4:	200003e4 	.word	0x200003e4
 800d1f8:	200003e8 	.word	0x200003e8
 800d1fc:	200004ec 	.word	0x200004ec

0800d200 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800d200:	b480      	push	{r7}
 800d202:	b083      	sub	sp, #12
 800d204:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 800d206:	4b09      	ldr	r3, [pc, #36]	@ (800d22c <pvTaskIncrementMutexHeldCount+0x2c>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d004      	beq.n	800d21c <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d216:	1c5a      	adds	r2, r3, #1
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 800d21c:	687b      	ldr	r3, [r7, #4]
    }
 800d21e:	4618      	mov	r0, r3
 800d220:	370c      	adds	r7, #12
 800d222:	46bd      	mov	sp, r7
 800d224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d228:	4770      	bx	lr
 800d22a:	bf00      	nop
 800d22c:	200003e4 	.word	0x200003e4

0800d230 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b088      	sub	sp, #32
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800d23a:	4b37      	ldr	r3, [pc, #220]	@ (800d318 <prvAddCurrentTaskToDelayedList+0xe8>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 800d240:	4b36      	ldr	r3, [pc, #216]	@ (800d31c <prvAddCurrentTaskToDelayedList+0xec>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800d246:	4b36      	ldr	r3, [pc, #216]	@ (800d320 <prvAddCurrentTaskToDelayedList+0xf0>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d24c:	4b35      	ldr	r3, [pc, #212]	@ (800d324 <prvAddCurrentTaskToDelayedList+0xf4>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	3304      	adds	r3, #4
 800d252:	4618      	mov	r0, r3
 800d254:	f7fd fc24 	bl	800aaa0 <uxListRemove>
 800d258:	4603      	mov	r3, r0
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d10b      	bne.n	800d276 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800d25e:	4b31      	ldr	r3, [pc, #196]	@ (800d324 <prvAddCurrentTaskToDelayedList+0xf4>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d264:	2201      	movs	r2, #1
 800d266:	fa02 f303 	lsl.w	r3, r2, r3
 800d26a:	43da      	mvns	r2, r3
 800d26c:	4b2e      	ldr	r3, [pc, #184]	@ (800d328 <prvAddCurrentTaskToDelayedList+0xf8>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4013      	ands	r3, r2
 800d272:	4a2d      	ldr	r2, [pc, #180]	@ (800d328 <prvAddCurrentTaskToDelayedList+0xf8>)
 800d274:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d27c:	d124      	bne.n	800d2c8 <prvAddCurrentTaskToDelayedList+0x98>
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d021      	beq.n	800d2c8 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d284:	4b29      	ldr	r3, [pc, #164]	@ (800d32c <prvAddCurrentTaskToDelayedList+0xfc>)
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	613b      	str	r3, [r7, #16]
 800d28a:	4b26      	ldr	r3, [pc, #152]	@ (800d324 <prvAddCurrentTaskToDelayedList+0xf4>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	693a      	ldr	r2, [r7, #16]
 800d290:	609a      	str	r2, [r3, #8]
 800d292:	4b24      	ldr	r3, [pc, #144]	@ (800d324 <prvAddCurrentTaskToDelayedList+0xf4>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	693a      	ldr	r2, [r7, #16]
 800d298:	6892      	ldr	r2, [r2, #8]
 800d29a:	60da      	str	r2, [r3, #12]
 800d29c:	4b21      	ldr	r3, [pc, #132]	@ (800d324 <prvAddCurrentTaskToDelayedList+0xf4>)
 800d29e:	681a      	ldr	r2, [r3, #0]
 800d2a0:	693b      	ldr	r3, [r7, #16]
 800d2a2:	689b      	ldr	r3, [r3, #8]
 800d2a4:	3204      	adds	r2, #4
 800d2a6:	605a      	str	r2, [r3, #4]
 800d2a8:	4b1e      	ldr	r3, [pc, #120]	@ (800d324 <prvAddCurrentTaskToDelayedList+0xf4>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	1d1a      	adds	r2, r3, #4
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	609a      	str	r2, [r3, #8]
 800d2b2:	4b1c      	ldr	r3, [pc, #112]	@ (800d324 <prvAddCurrentTaskToDelayedList+0xf4>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	4a1d      	ldr	r2, [pc, #116]	@ (800d32c <prvAddCurrentTaskToDelayedList+0xfc>)
 800d2b8:	615a      	str	r2, [r3, #20]
 800d2ba:	4b1c      	ldr	r3, [pc, #112]	@ (800d32c <prvAddCurrentTaskToDelayedList+0xfc>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	3301      	adds	r3, #1
 800d2c0:	4a1a      	ldr	r2, [pc, #104]	@ (800d32c <prvAddCurrentTaskToDelayedList+0xfc>)
 800d2c2:	6013      	str	r3, [r2, #0]
 800d2c4:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800d2c6:	e022      	b.n	800d30e <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800d2c8:	69fa      	ldr	r2, [r7, #28]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	4413      	add	r3, r2
 800d2ce:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d2d0:	4b14      	ldr	r3, [pc, #80]	@ (800d324 <prvAddCurrentTaskToDelayedList+0xf4>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	68fa      	ldr	r2, [r7, #12]
 800d2d6:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800d2d8:	68fa      	ldr	r2, [r7, #12]
 800d2da:	69fb      	ldr	r3, [r7, #28]
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	d207      	bcs.n	800d2f0 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800d2e0:	4b10      	ldr	r3, [pc, #64]	@ (800d324 <prvAddCurrentTaskToDelayedList+0xf4>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	3304      	adds	r3, #4
 800d2e6:	4619      	mov	r1, r3
 800d2e8:	6978      	ldr	r0, [r7, #20]
 800d2ea:	f7fd fba0 	bl	800aa2e <vListInsert>
}
 800d2ee:	e00e      	b.n	800d30e <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800d2f0:	4b0c      	ldr	r3, [pc, #48]	@ (800d324 <prvAddCurrentTaskToDelayedList+0xf4>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	3304      	adds	r3, #4
 800d2f6:	4619      	mov	r1, r3
 800d2f8:	69b8      	ldr	r0, [r7, #24]
 800d2fa:	f7fd fb98 	bl	800aa2e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800d2fe:	4b0c      	ldr	r3, [pc, #48]	@ (800d330 <prvAddCurrentTaskToDelayedList+0x100>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	68fa      	ldr	r2, [r7, #12]
 800d304:	429a      	cmp	r2, r3
 800d306:	d202      	bcs.n	800d30e <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 800d308:	4a09      	ldr	r2, [pc, #36]	@ (800d330 <prvAddCurrentTaskToDelayedList+0x100>)
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	6013      	str	r3, [r2, #0]
}
 800d30e:	bf00      	nop
 800d310:	3720      	adds	r7, #32
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
 800d316:	bf00      	nop
 800d318:	200004e8 	.word	0x200004e8
 800d31c:	2000049c 	.word	0x2000049c
 800d320:	200004a0 	.word	0x200004a0
 800d324:	200003e4 	.word	0x200003e4
 800d328:	200004ec 	.word	0x200004ec
 800d32c:	200004d0 	.word	0x200004d0
 800d330:	20000504 	.word	0x20000504

0800d334 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800d334:	b580      	push	{r7, lr}
 800d336:	b084      	sub	sp, #16
 800d338:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800d33a:	2300      	movs	r3, #0
 800d33c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800d33e:	f000 fa61 	bl	800d804 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800d342:	4b14      	ldr	r3, [pc, #80]	@ (800d394 <xTimerCreateTimerTask+0x60>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d00b      	beq.n	800d362 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800d34a:	4b13      	ldr	r3, [pc, #76]	@ (800d398 <xTimerCreateTimerTask+0x64>)
 800d34c:	9301      	str	r3, [sp, #4]
 800d34e:	2306      	movs	r3, #6
 800d350:	9300      	str	r3, [sp, #0]
 800d352:	2300      	movs	r3, #0
 800d354:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800d358:	4910      	ldr	r1, [pc, #64]	@ (800d39c <xTimerCreateTimerTask+0x68>)
 800d35a:	4811      	ldr	r0, [pc, #68]	@ (800d3a0 <xTimerCreateTimerTask+0x6c>)
 800d35c:	f7fe fa68 	bl	800b830 <xTaskCreate>
 800d360:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d110      	bne.n	800d38a <xTimerCreateTimerTask+0x56>
    __asm volatile
 800d368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d36c:	b672      	cpsid	i
 800d36e:	f383 8811 	msr	BASEPRI, r3
 800d372:	f3bf 8f6f 	isb	sy
 800d376:	f3bf 8f4f 	dsb	sy
 800d37a:	b662      	cpsie	i
 800d37c:	603b      	str	r3, [r7, #0]
}
 800d37e:	bf00      	nop
 800d380:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 800d384:	4807      	ldr	r0, [pc, #28]	@ (800d3a4 <xTimerCreateTimerTask+0x70>)
 800d386:	f7f6 ffc5 	bl	8004314 <vAssertCalled>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 800d38a:	687b      	ldr	r3, [r7, #4]
    }
 800d38c:	4618      	mov	r0, r3
 800d38e:	3708      	adds	r7, #8
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}
 800d394:	20000548 	.word	0x20000548
 800d398:	2000054c 	.word	0x2000054c
 800d39c:	08014124 	.word	0x08014124
 800d3a0:	0800d44d 	.word	0x0800d44d
 800d3a4:	0801412c 	.word	0x0801412c

0800d3a8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b084      	sub	sp, #16
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	60b9      	str	r1, [r7, #8]
 800d3b2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800d3b4:	e008      	b.n	800d3c8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	699b      	ldr	r3, [r3, #24]
 800d3ba:	68ba      	ldr	r2, [r7, #8]
 800d3bc:	4413      	add	r3, r2
 800d3be:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	6a1b      	ldr	r3, [r3, #32]
 800d3c4:	68f8      	ldr	r0, [r7, #12]
 800d3c6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	699a      	ldr	r2, [r3, #24]
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	18d1      	adds	r1, r2, r3
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	687a      	ldr	r2, [r7, #4]
 800d3d4:	68f8      	ldr	r0, [r7, #12]
 800d3d6:	f000 f8df 	bl	800d598 <prvInsertTimerInActiveList>
 800d3da:	4603      	mov	r3, r0
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d1ea      	bne.n	800d3b6 <prvReloadTimer+0xe>
        }
    }
 800d3e0:	bf00      	nop
 800d3e2:	bf00      	nop
 800d3e4:	3710      	adds	r7, #16
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}
	...

0800d3ec <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b084      	sub	sp, #16
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d3f6:	4b14      	ldr	r3, [pc, #80]	@ (800d448 <prvProcessExpiredTimer+0x5c>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	68db      	ldr	r3, [r3, #12]
 800d3fc:	68db      	ldr	r3, [r3, #12]
 800d3fe:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	3304      	adds	r3, #4
 800d404:	4618      	mov	r0, r3
 800d406:	f7fd fb4b 	bl	800aaa0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d410:	f003 0304 	and.w	r3, r3, #4
 800d414:	2b00      	cmp	r3, #0
 800d416:	d005      	beq.n	800d424 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800d418:	683a      	ldr	r2, [r7, #0]
 800d41a:	6879      	ldr	r1, [r7, #4]
 800d41c:	68f8      	ldr	r0, [r7, #12]
 800d41e:	f7ff ffc3 	bl	800d3a8 <prvReloadTimer>
 800d422:	e008      	b.n	800d436 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d42a:	f023 0301 	bic.w	r3, r3, #1
 800d42e:	b2da      	uxtb	r2, r3
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	6a1b      	ldr	r3, [r3, #32]
 800d43a:	68f8      	ldr	r0, [r7, #12]
 800d43c:	4798      	blx	r3
    }
 800d43e:	bf00      	nop
 800d440:	3710      	adds	r7, #16
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}
 800d446:	bf00      	nop
 800d448:	20000540 	.word	0x20000540

0800d44c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b084      	sub	sp, #16
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d454:	f107 0308 	add.w	r3, r7, #8
 800d458:	4618      	mov	r0, r3
 800d45a:	f000 f859 	bl	800d510 <prvGetNextExpireTime>
 800d45e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	4619      	mov	r1, r3
 800d464:	68f8      	ldr	r0, [r7, #12]
 800d466:	f000 f805 	bl	800d474 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800d46a:	f000 f8d7 	bl	800d61c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d46e:	bf00      	nop
 800d470:	e7f0      	b.n	800d454 <prvTimerTask+0x8>
	...

0800d474 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800d474:	b580      	push	{r7, lr}
 800d476:	b084      	sub	sp, #16
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800d47e:	f7fe fd5f 	bl	800bf40 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d482:	f107 0308 	add.w	r3, r7, #8
 800d486:	4618      	mov	r0, r3
 800d488:	f000 f866 	bl	800d558 <prvSampleTimeNow>
 800d48c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d130      	bne.n	800d4f6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d10a      	bne.n	800d4b0 <prvProcessTimerOrBlockTask+0x3c>
 800d49a:	687a      	ldr	r2, [r7, #4]
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	d806      	bhi.n	800d4b0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800d4a2:	f7fe fd5b 	bl	800bf5c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d4a6:	68f9      	ldr	r1, [r7, #12]
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f7ff ff9f 	bl	800d3ec <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800d4ae:	e024      	b.n	800d4fa <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d008      	beq.n	800d4c8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d4b6:	4b13      	ldr	r3, [pc, #76]	@ (800d504 <prvProcessTimerOrBlockTask+0x90>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d101      	bne.n	800d4c4 <prvProcessTimerOrBlockTask+0x50>
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	e000      	b.n	800d4c6 <prvProcessTimerOrBlockTask+0x52>
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d4c8:	4b0f      	ldr	r3, [pc, #60]	@ (800d508 <prvProcessTimerOrBlockTask+0x94>)
 800d4ca:	6818      	ldr	r0, [r3, #0]
 800d4cc:	687a      	ldr	r2, [r7, #4]
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	1ad3      	subs	r3, r2, r3
 800d4d2:	683a      	ldr	r2, [r7, #0]
 800d4d4:	4619      	mov	r1, r3
 800d4d6:	f7fe f93b 	bl	800b750 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800d4da:	f7fe fd3f 	bl	800bf5c <xTaskResumeAll>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d10a      	bne.n	800d4fa <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 800d4e4:	4b09      	ldr	r3, [pc, #36]	@ (800d50c <prvProcessTimerOrBlockTask+0x98>)
 800d4e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d4ea:	601a      	str	r2, [r3, #0]
 800d4ec:	f3bf 8f4f 	dsb	sy
 800d4f0:	f3bf 8f6f 	isb	sy
    }
 800d4f4:	e001      	b.n	800d4fa <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800d4f6:	f7fe fd31 	bl	800bf5c <xTaskResumeAll>
    }
 800d4fa:	bf00      	nop
 800d4fc:	3710      	adds	r7, #16
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}
 800d502:	bf00      	nop
 800d504:	20000544 	.word	0x20000544
 800d508:	20000548 	.word	0x20000548
 800d50c:	e000ed04 	.word	0xe000ed04

0800d510 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800d510:	b480      	push	{r7}
 800d512:	b085      	sub	sp, #20
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d518:	4b0e      	ldr	r3, [pc, #56]	@ (800d554 <prvGetNextExpireTime+0x44>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d101      	bne.n	800d526 <prvGetNextExpireTime+0x16>
 800d522:	2201      	movs	r2, #1
 800d524:	e000      	b.n	800d528 <prvGetNextExpireTime+0x18>
 800d526:	2200      	movs	r2, #0
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d105      	bne.n	800d540 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d534:	4b07      	ldr	r3, [pc, #28]	@ (800d554 <prvGetNextExpireTime+0x44>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	68db      	ldr	r3, [r3, #12]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	60fb      	str	r3, [r7, #12]
 800d53e:	e001      	b.n	800d544 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800d540:	2300      	movs	r3, #0
 800d542:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800d544:	68fb      	ldr	r3, [r7, #12]
    }
 800d546:	4618      	mov	r0, r3
 800d548:	3714      	adds	r7, #20
 800d54a:	46bd      	mov	sp, r7
 800d54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d550:	4770      	bx	lr
 800d552:	bf00      	nop
 800d554:	20000540 	.word	0x20000540

0800d558 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800d558:	b580      	push	{r7, lr}
 800d55a:	b084      	sub	sp, #16
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 800d560:	f7fe fe0c 	bl	800c17c <xTaskGetTickCount>
 800d564:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800d566:	4b0b      	ldr	r3, [pc, #44]	@ (800d594 <prvSampleTimeNow+0x3c>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	68fa      	ldr	r2, [r7, #12]
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d205      	bcs.n	800d57c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800d570:	f000 f922 	bl	800d7b8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2201      	movs	r2, #1
 800d578:	601a      	str	r2, [r3, #0]
 800d57a:	e002      	b.n	800d582 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2200      	movs	r2, #0
 800d580:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800d582:	4a04      	ldr	r2, [pc, #16]	@ (800d594 <prvSampleTimeNow+0x3c>)
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800d588:	68fb      	ldr	r3, [r7, #12]
    }
 800d58a:	4618      	mov	r0, r3
 800d58c:	3710      	adds	r7, #16
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
 800d592:	bf00      	nop
 800d594:	20000550 	.word	0x20000550

0800d598 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800d598:	b580      	push	{r7, lr}
 800d59a:	b086      	sub	sp, #24
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	60f8      	str	r0, [r7, #12]
 800d5a0:	60b9      	str	r1, [r7, #8]
 800d5a2:	607a      	str	r2, [r7, #4]
 800d5a4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	68ba      	ldr	r2, [r7, #8]
 800d5ae:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	68fa      	ldr	r2, [r7, #12]
 800d5b4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800d5b6:	68ba      	ldr	r2, [r7, #8]
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	d812      	bhi.n	800d5e4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800d5be:	687a      	ldr	r2, [r7, #4]
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	1ad2      	subs	r2, r2, r3
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	699b      	ldr	r3, [r3, #24]
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d302      	bcc.n	800d5d2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	617b      	str	r3, [r7, #20]
 800d5d0:	e01b      	b.n	800d60a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d5d2:	4b10      	ldr	r3, [pc, #64]	@ (800d614 <prvInsertTimerInActiveList+0x7c>)
 800d5d4:	681a      	ldr	r2, [r3, #0]
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	3304      	adds	r3, #4
 800d5da:	4619      	mov	r1, r3
 800d5dc:	4610      	mov	r0, r2
 800d5de:	f7fd fa26 	bl	800aa2e <vListInsert>
 800d5e2:	e012      	b.n	800d60a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d5e4:	687a      	ldr	r2, [r7, #4]
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d206      	bcs.n	800d5fa <prvInsertTimerInActiveList+0x62>
 800d5ec:	68ba      	ldr	r2, [r7, #8]
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	d302      	bcc.n	800d5fa <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	617b      	str	r3, [r7, #20]
 800d5f8:	e007      	b.n	800d60a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d5fa:	4b07      	ldr	r3, [pc, #28]	@ (800d618 <prvInsertTimerInActiveList+0x80>)
 800d5fc:	681a      	ldr	r2, [r3, #0]
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	3304      	adds	r3, #4
 800d602:	4619      	mov	r1, r3
 800d604:	4610      	mov	r0, r2
 800d606:	f7fd fa12 	bl	800aa2e <vListInsert>
            }
        }

        return xProcessTimerNow;
 800d60a:	697b      	ldr	r3, [r7, #20]
    }
 800d60c:	4618      	mov	r0, r3
 800d60e:	3718      	adds	r7, #24
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}
 800d614:	20000544 	.word	0x20000544
 800d618:	20000540 	.word	0x20000540

0800d61c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b088      	sub	sp, #32
 800d620:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 800d622:	f107 0308 	add.w	r3, r7, #8
 800d626:	2200      	movs	r2, #0
 800d628:	601a      	str	r2, [r3, #0]
 800d62a:	605a      	str	r2, [r3, #4]
 800d62c:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800d62e:	e0ae      	b.n	800d78e <prvProcessReceivedCommands+0x172>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	2b00      	cmp	r3, #0
 800d634:	f2c0 80ab 	blt.w	800d78e <prvProcessReceivedCommands+0x172>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d638:	693b      	ldr	r3, [r7, #16]
 800d63a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800d63c:	69fb      	ldr	r3, [r7, #28]
 800d63e:	695b      	ldr	r3, [r3, #20]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d004      	beq.n	800d64e <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d644:	69fb      	ldr	r3, [r7, #28]
 800d646:	3304      	adds	r3, #4
 800d648:	4618      	mov	r0, r3
 800d64a:	f7fd fa29 	bl	800aaa0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d64e:	1d3b      	adds	r3, r7, #4
 800d650:	4618      	mov	r0, r3
 800d652:	f7ff ff81 	bl	800d558 <prvSampleTimeNow>
 800d656:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	3b01      	subs	r3, #1
 800d65c:	2b08      	cmp	r3, #8
 800d65e:	f200 8093 	bhi.w	800d788 <prvProcessReceivedCommands+0x16c>
 800d662:	a201      	add	r2, pc, #4	@ (adr r2, 800d668 <prvProcessReceivedCommands+0x4c>)
 800d664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d668:	0800d68d 	.word	0x0800d68d
 800d66c:	0800d68d 	.word	0x0800d68d
 800d670:	0800d6f5 	.word	0x0800d6f5
 800d674:	0800d709 	.word	0x0800d709
 800d678:	0800d75f 	.word	0x0800d75f
 800d67c:	0800d68d 	.word	0x0800d68d
 800d680:	0800d68d 	.word	0x0800d68d
 800d684:	0800d6f5 	.word	0x0800d6f5
 800d688:	0800d709 	.word	0x0800d709
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800d68c:	69fb      	ldr	r3, [r7, #28]
 800d68e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d692:	f043 0301 	orr.w	r3, r3, #1
 800d696:	b2da      	uxtb	r2, r3
 800d698:	69fb      	ldr	r3, [r7, #28]
 800d69a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d69e:	68fa      	ldr	r2, [r7, #12]
 800d6a0:	69fb      	ldr	r3, [r7, #28]
 800d6a2:	699b      	ldr	r3, [r3, #24]
 800d6a4:	18d1      	adds	r1, r2, r3
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	69ba      	ldr	r2, [r7, #24]
 800d6aa:	69f8      	ldr	r0, [r7, #28]
 800d6ac:	f7ff ff74 	bl	800d598 <prvInsertTimerInActiveList>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d06a      	beq.n	800d78c <prvProcessReceivedCommands+0x170>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800d6b6:	69fb      	ldr	r3, [r7, #28]
 800d6b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d6bc:	f003 0304 	and.w	r3, r3, #4
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d009      	beq.n	800d6d8 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800d6c4:	68fa      	ldr	r2, [r7, #12]
 800d6c6:	69fb      	ldr	r3, [r7, #28]
 800d6c8:	699b      	ldr	r3, [r3, #24]
 800d6ca:	4413      	add	r3, r2
 800d6cc:	69ba      	ldr	r2, [r7, #24]
 800d6ce:	4619      	mov	r1, r3
 800d6d0:	69f8      	ldr	r0, [r7, #28]
 800d6d2:	f7ff fe69 	bl	800d3a8 <prvReloadTimer>
 800d6d6:	e008      	b.n	800d6ea <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800d6d8:	69fb      	ldr	r3, [r7, #28]
 800d6da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d6de:	f023 0301 	bic.w	r3, r3, #1
 800d6e2:	b2da      	uxtb	r2, r3
 800d6e4:	69fb      	ldr	r3, [r7, #28]
 800d6e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d6ea:	69fb      	ldr	r3, [r7, #28]
 800d6ec:	6a1b      	ldr	r3, [r3, #32]
 800d6ee:	69f8      	ldr	r0, [r7, #28]
 800d6f0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800d6f2:	e04b      	b.n	800d78c <prvProcessReceivedCommands+0x170>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800d6f4:	69fb      	ldr	r3, [r7, #28]
 800d6f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d6fa:	f023 0301 	bic.w	r3, r3, #1
 800d6fe:	b2da      	uxtb	r2, r3
 800d700:	69fb      	ldr	r3, [r7, #28]
 800d702:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800d706:	e042      	b.n	800d78e <prvProcessReceivedCommands+0x172>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800d708:	69fb      	ldr	r3, [r7, #28]
 800d70a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d70e:	f043 0301 	orr.w	r3, r3, #1
 800d712:	b2da      	uxtb	r2, r3
 800d714:	69fb      	ldr	r3, [r7, #28]
 800d716:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d71a:	68fa      	ldr	r2, [r7, #12]
 800d71c:	69fb      	ldr	r3, [r7, #28]
 800d71e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d720:	69fb      	ldr	r3, [r7, #28]
 800d722:	699b      	ldr	r3, [r3, #24]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d110      	bne.n	800d74a <prvProcessReceivedCommands+0x12e>
    __asm volatile
 800d728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d72c:	b672      	cpsid	i
 800d72e:	f383 8811 	msr	BASEPRI, r3
 800d732:	f3bf 8f6f 	isb	sy
 800d736:	f3bf 8f4f 	dsb	sy
 800d73a:	b662      	cpsie	i
 800d73c:	617b      	str	r3, [r7, #20]
}
 800d73e:	bf00      	nop
 800d740:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800d744:	481a      	ldr	r0, [pc, #104]	@ (800d7b0 <prvProcessReceivedCommands+0x194>)
 800d746:	f7f6 fde5 	bl	8004314 <vAssertCalled>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d74a:	69fb      	ldr	r3, [r7, #28]
 800d74c:	699a      	ldr	r2, [r3, #24]
 800d74e:	69bb      	ldr	r3, [r7, #24]
 800d750:	18d1      	adds	r1, r2, r3
 800d752:	69bb      	ldr	r3, [r7, #24]
 800d754:	69ba      	ldr	r2, [r7, #24]
 800d756:	69f8      	ldr	r0, [r7, #28]
 800d758:	f7ff ff1e 	bl	800d598 <prvInsertTimerInActiveList>
                        break;
 800d75c:	e017      	b.n	800d78e <prvProcessReceivedCommands+0x172>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d75e:	69fb      	ldr	r3, [r7, #28]
 800d760:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d764:	f003 0302 	and.w	r3, r3, #2
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d103      	bne.n	800d774 <prvProcessReceivedCommands+0x158>
                            {
                                vPortFree( pxTimer );
 800d76c:	69f8      	ldr	r0, [r7, #28]
 800d76e:	f7f7 f947 	bl	8004a00 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800d772:	e00c      	b.n	800d78e <prvProcessReceivedCommands+0x172>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800d774:	69fb      	ldr	r3, [r7, #28]
 800d776:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d77a:	f023 0301 	bic.w	r3, r3, #1
 800d77e:	b2da      	uxtb	r2, r3
 800d780:	69fb      	ldr	r3, [r7, #28]
 800d782:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800d786:	e002      	b.n	800d78e <prvProcessReceivedCommands+0x172>

                    default:
                        /* Don't expect to get here. */
                        break;
 800d788:	bf00      	nop
 800d78a:	e000      	b.n	800d78e <prvProcessReceivedCommands+0x172>
                        break;
 800d78c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800d78e:	4b09      	ldr	r3, [pc, #36]	@ (800d7b4 <prvProcessReceivedCommands+0x198>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	f107 0108 	add.w	r1, r7, #8
 800d796:	2200      	movs	r2, #0
 800d798:	4618      	mov	r0, r3
 800d79a:	f7fd fc87 	bl	800b0ac <xQueueReceive>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	f47f af45 	bne.w	800d630 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 800d7a6:	bf00      	nop
 800d7a8:	bf00      	nop
 800d7aa:	3720      	adds	r7, #32
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}
 800d7b0:	0801412c 	.word	0x0801412c
 800d7b4:	20000548 	.word	0x20000548

0800d7b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b082      	sub	sp, #8
 800d7bc:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d7be:	e009      	b.n	800d7d4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d7c0:	4b0e      	ldr	r3, [pc, #56]	@ (800d7fc <prvSwitchTimerLists+0x44>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	68db      	ldr	r3, [r3, #12]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800d7ca:	f04f 31ff 	mov.w	r1, #4294967295
 800d7ce:	6838      	ldr	r0, [r7, #0]
 800d7d0:	f7ff fe0c 	bl	800d3ec <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d7d4:	4b09      	ldr	r3, [pc, #36]	@ (800d7fc <prvSwitchTimerLists+0x44>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d1f0      	bne.n	800d7c0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800d7de:	4b07      	ldr	r3, [pc, #28]	@ (800d7fc <prvSwitchTimerLists+0x44>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800d7e4:	4b06      	ldr	r3, [pc, #24]	@ (800d800 <prvSwitchTimerLists+0x48>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	4a04      	ldr	r2, [pc, #16]	@ (800d7fc <prvSwitchTimerLists+0x44>)
 800d7ea:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800d7ec:	4a04      	ldr	r2, [pc, #16]	@ (800d800 <prvSwitchTimerLists+0x48>)
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6013      	str	r3, [r2, #0]
    }
 800d7f2:	bf00      	nop
 800d7f4:	3708      	adds	r7, #8
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}
 800d7fa:	bf00      	nop
 800d7fc:	20000540 	.word	0x20000540
 800d800:	20000544 	.word	0x20000544

0800d804 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800d804:	b580      	push	{r7, lr}
 800d806:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800d808:	f000 f99a 	bl	800db40 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800d80c:	4b0d      	ldr	r3, [pc, #52]	@ (800d844 <prvCheckForValidListAndQueue+0x40>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d113      	bne.n	800d83c <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 800d814:	480c      	ldr	r0, [pc, #48]	@ (800d848 <prvCheckForValidListAndQueue+0x44>)
 800d816:	f7fd f8b9 	bl	800a98c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800d81a:	480c      	ldr	r0, [pc, #48]	@ (800d84c <prvCheckForValidListAndQueue+0x48>)
 800d81c:	f7fd f8b6 	bl	800a98c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800d820:	4b0b      	ldr	r3, [pc, #44]	@ (800d850 <prvCheckForValidListAndQueue+0x4c>)
 800d822:	4a09      	ldr	r2, [pc, #36]	@ (800d848 <prvCheckForValidListAndQueue+0x44>)
 800d824:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800d826:	4b0b      	ldr	r3, [pc, #44]	@ (800d854 <prvCheckForValidListAndQueue+0x50>)
 800d828:	4a08      	ldr	r2, [pc, #32]	@ (800d84c <prvCheckForValidListAndQueue+0x48>)
 800d82a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 800d82c:	2200      	movs	r2, #0
 800d82e:	210c      	movs	r1, #12
 800d830:	2008      	movs	r0, #8
 800d832:	f7fd f9fd 	bl	800ac30 <xQueueGenericCreate>
 800d836:	4603      	mov	r3, r0
 800d838:	4a02      	ldr	r2, [pc, #8]	@ (800d844 <prvCheckForValidListAndQueue+0x40>)
 800d83a:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800d83c:	f000 f9b8 	bl	800dbb0 <vPortExitCritical>
    }
 800d840:	bf00      	nop
 800d842:	bd80      	pop	{r7, pc}
 800d844:	20000548 	.word	0x20000548
 800d848:	20000518 	.word	0x20000518
 800d84c:	2000052c 	.word	0x2000052c
 800d850:	20000540 	.word	0x20000540
 800d854:	20000544 	.word	0x20000544

0800d858 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800d858:	b480      	push	{r7}
 800d85a:	b085      	sub	sp, #20
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	60f8      	str	r0, [r7, #12]
 800d860:	60b9      	str	r1, [r7, #8]
 800d862:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	3b04      	subs	r3, #4
 800d868:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d870:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	3b04      	subs	r3, #4
 800d876:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	f023 0201 	bic.w	r2, r3, #1
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	3b04      	subs	r3, #4
 800d886:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800d888:	4a0c      	ldr	r2, [pc, #48]	@ (800d8bc <pxPortInitialiseStack+0x64>)
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	3b14      	subs	r3, #20
 800d892:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800d894:	687a      	ldr	r2, [r7, #4]
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	3b04      	subs	r3, #4
 800d89e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f06f 0202 	mvn.w	r2, #2
 800d8a6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	3b20      	subs	r3, #32
 800d8ac:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3714      	adds	r7, #20
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ba:	4770      	bx	lr
 800d8bc:	0800d8c1 	.word	0x0800d8c1

0800d8c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b084      	sub	sp, #16
 800d8c4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800d8ca:	4b15      	ldr	r3, [pc, #84]	@ (800d920 <prvTaskExitError+0x60>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8d2:	d00f      	beq.n	800d8f4 <prvTaskExitError+0x34>
    __asm volatile
 800d8d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8d8:	b672      	cpsid	i
 800d8da:	f383 8811 	msr	BASEPRI, r3
 800d8de:	f3bf 8f6f 	isb	sy
 800d8e2:	f3bf 8f4f 	dsb	sy
 800d8e6:	b662      	cpsie	i
 800d8e8:	60fb      	str	r3, [r7, #12]
}
 800d8ea:	bf00      	nop
 800d8ec:	21ee      	movs	r1, #238	@ 0xee
 800d8ee:	480d      	ldr	r0, [pc, #52]	@ (800d924 <prvTaskExitError+0x64>)
 800d8f0:	f7f6 fd10 	bl	8004314 <vAssertCalled>
    __asm volatile
 800d8f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8f8:	b672      	cpsid	i
 800d8fa:	f383 8811 	msr	BASEPRI, r3
 800d8fe:	f3bf 8f6f 	isb	sy
 800d902:	f3bf 8f4f 	dsb	sy
 800d906:	b662      	cpsie	i
 800d908:	60bb      	str	r3, [r7, #8]
}
 800d90a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800d90c:	bf00      	nop
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d0fc      	beq.n	800d90e <prvTaskExitError+0x4e>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800d914:	bf00      	nop
 800d916:	bf00      	nop
 800d918:	3710      	adds	r7, #16
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}
 800d91e:	bf00      	nop
 800d920:	20000044 	.word	0x20000044
 800d924:	080141a0 	.word	0x080141a0
	...

0800d930 <SVC_Handler>:
/*-----------------------------------------------------------*/
void vPortSVCHandler( void )
{
	__asm volatile (
 800d930:	4b07      	ldr	r3, [pc, #28]	@ (800d950 <pxCurrentTCBConst2>)
 800d932:	6819      	ldr	r1, [r3, #0]
 800d934:	6808      	ldr	r0, [r1, #0]
 800d936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d93a:	f380 8809 	msr	PSP, r0
 800d93e:	f3bf 8f6f 	isb	sy
 800d942:	f04f 0000 	mov.w	r0, #0
 800d946:	f380 8811 	msr	BASEPRI, r0
 800d94a:	4770      	bx	lr
 800d94c:	f3af 8000 	nop.w

0800d950 <pxCurrentTCBConst2>:
 800d950:	200003e4 	.word	0x200003e4
	        "   bx r14                          \n"
	        "                                   \n"
	        "   .align 4                        \n"
	        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
	        );
}
 800d954:	bf00      	nop
 800d956:	bf00      	nop

0800d958 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800d958:	4808      	ldr	r0, [pc, #32]	@ (800d97c <prvPortStartFirstTask+0x24>)
 800d95a:	6800      	ldr	r0, [r0, #0]
 800d95c:	6800      	ldr	r0, [r0, #0]
 800d95e:	f380 8808 	msr	MSP, r0
 800d962:	f04f 0000 	mov.w	r0, #0
 800d966:	f380 8814 	msr	CONTROL, r0
 800d96a:	b662      	cpsie	i
 800d96c:	b661      	cpsie	f
 800d96e:	f3bf 8f4f 	dsb	sy
 800d972:	f3bf 8f6f 	isb	sy
 800d976:	df00      	svc	0
 800d978:	bf00      	nop
 800d97a:	0000      	.short	0x0000
 800d97c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 800d980:	bf00      	nop
 800d982:	bf00      	nop

0800d984 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b08a      	sub	sp, #40	@ 0x28
 800d988:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800d98a:	4b62      	ldr	r3, [pc, #392]	@ (800db14 <xPortStartScheduler+0x190>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 800d990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d992:	332c      	adds	r3, #44	@ 0x2c
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	4a60      	ldr	r2, [pc, #384]	@ (800db18 <xPortStartScheduler+0x194>)
 800d998:	4293      	cmp	r3, r2
 800d99a:	d010      	beq.n	800d9be <xPortStartScheduler+0x3a>
    __asm volatile
 800d99c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9a0:	b672      	cpsid	i
 800d9a2:	f383 8811 	msr	BASEPRI, r3
 800d9a6:	f3bf 8f6f 	isb	sy
 800d9aa:	f3bf 8f4f 	dsb	sy
 800d9ae:	b662      	cpsie	i
 800d9b0:	61bb      	str	r3, [r7, #24]
}
 800d9b2:	bf00      	nop
 800d9b4:	f240 114b 	movw	r1, #331	@ 0x14b
 800d9b8:	4858      	ldr	r0, [pc, #352]	@ (800db1c <xPortStartScheduler+0x198>)
 800d9ba:	f7f6 fcab 	bl	8004314 <vAssertCalled>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 800d9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9c0:	3338      	adds	r3, #56	@ 0x38
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	4a56      	ldr	r2, [pc, #344]	@ (800db20 <xPortStartScheduler+0x19c>)
 800d9c6:	4293      	cmp	r3, r2
 800d9c8:	d010      	beq.n	800d9ec <xPortStartScheduler+0x68>
    __asm volatile
 800d9ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9ce:	b672      	cpsid	i
 800d9d0:	f383 8811 	msr	BASEPRI, r3
 800d9d4:	f3bf 8f6f 	isb	sy
 800d9d8:	f3bf 8f4f 	dsb	sy
 800d9dc:	b662      	cpsie	i
 800d9de:	61fb      	str	r3, [r7, #28]
}
 800d9e0:	bf00      	nop
 800d9e2:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 800d9e6:	484d      	ldr	r0, [pc, #308]	@ (800db1c <xPortStartScheduler+0x198>)
 800d9e8:	f7f6 fc94 	bl	8004314 <vAssertCalled>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d9f0:	4b4c      	ldr	r3, [pc, #304]	@ (800db24 <xPortStartScheduler+0x1a0>)
 800d9f2:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 800d9f4:	6a3b      	ldr	r3, [r7, #32]
 800d9f6:	781b      	ldrb	r3, [r3, #0]
 800d9f8:	b2db      	uxtb	r3, r3
 800d9fa:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d9fc:	6a3b      	ldr	r3, [r7, #32]
 800d9fe:	22ff      	movs	r2, #255	@ 0xff
 800da00:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800da02:	6a3b      	ldr	r3, [r7, #32]
 800da04:	781b      	ldrb	r3, [r3, #0]
 800da06:	b2db      	uxtb	r3, r3
 800da08:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800da0a:	79fb      	ldrb	r3, [r7, #7]
 800da0c:	b2db      	uxtb	r3, r3
 800da0e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800da12:	b2da      	uxtb	r2, r3
 800da14:	4b44      	ldr	r3, [pc, #272]	@ (800db28 <xPortStartScheduler+0x1a4>)
 800da16:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800da18:	4b43      	ldr	r3, [pc, #268]	@ (800db28 <xPortStartScheduler+0x1a4>)
 800da1a:	781b      	ldrb	r3, [r3, #0]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d110      	bne.n	800da42 <xPortStartScheduler+0xbe>
    __asm volatile
 800da20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da24:	b672      	cpsid	i
 800da26:	f383 8811 	msr	BASEPRI, r3
 800da2a:	f3bf 8f6f 	isb	sy
 800da2e:	f3bf 8f4f 	dsb	sy
 800da32:	b662      	cpsie	i
 800da34:	617b      	str	r3, [r7, #20]
}
 800da36:	bf00      	nop
 800da38:	f240 116f 	movw	r1, #367	@ 0x16f
 800da3c:	4837      	ldr	r0, [pc, #220]	@ (800db1c <xPortStartScheduler+0x198>)
 800da3e:	f7f6 fc69 	bl	8004314 <vAssertCalled>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800da42:	79fb      	ldrb	r3, [r7, #7]
 800da44:	b2db      	uxtb	r3, r3
 800da46:	43db      	mvns	r3, r3
 800da48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d019      	beq.n	800da84 <xPortStartScheduler+0x100>
    __asm volatile
 800da50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da54:	b672      	cpsid	i
 800da56:	f383 8811 	msr	BASEPRI, r3
 800da5a:	f3bf 8f6f 	isb	sy
 800da5e:	f3bf 8f4f 	dsb	sy
 800da62:	b662      	cpsie	i
 800da64:	613b      	str	r3, [r7, #16]
}
 800da66:	bf00      	nop
 800da68:	f240 1173 	movw	r1, #371	@ 0x173
 800da6c:	482b      	ldr	r0, [pc, #172]	@ (800db1c <xPortStartScheduler+0x198>)
 800da6e:	f7f6 fc51 	bl	8004314 <vAssertCalled>

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800da72:	e007      	b.n	800da84 <xPortStartScheduler+0x100>
        {
            ulImplementedPrioBits++;
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	3301      	adds	r3, #1
 800da78:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800da7a:	79fb      	ldrb	r3, [r7, #7]
 800da7c:	b2db      	uxtb	r3, r3
 800da7e:	005b      	lsls	r3, r3, #1
 800da80:	b2db      	uxtb	r3, r3
 800da82:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800da84:	79fb      	ldrb	r3, [r7, #7]
 800da86:	b2db      	uxtb	r3, r3
 800da88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da8c:	2b80      	cmp	r3, #128	@ 0x80
 800da8e:	d0f1      	beq.n	800da74 <xPortStartScheduler+0xf0>
        }

        if( ulImplementedPrioBits == 8 )
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	2b08      	cmp	r3, #8
 800da94:	d103      	bne.n	800da9e <xPortStartScheduler+0x11a>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 800da96:	4b25      	ldr	r3, [pc, #148]	@ (800db2c <xPortStartScheduler+0x1a8>)
 800da98:	2200      	movs	r2, #0
 800da9a:	601a      	str	r2, [r3, #0]
 800da9c:	e004      	b.n	800daa8 <xPortStartScheduler+0x124>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	f1c3 0307 	rsb	r3, r3, #7
 800daa4:	4a21      	ldr	r2, [pc, #132]	@ (800db2c <xPortStartScheduler+0x1a8>)
 800daa6:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800daa8:	4b20      	ldr	r3, [pc, #128]	@ (800db2c <xPortStartScheduler+0x1a8>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	021b      	lsls	r3, r3, #8
 800daae:	4a1f      	ldr	r2, [pc, #124]	@ (800db2c <xPortStartScheduler+0x1a8>)
 800dab0:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dab2:	4b1e      	ldr	r3, [pc, #120]	@ (800db2c <xPortStartScheduler+0x1a8>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800daba:	4a1c      	ldr	r2, [pc, #112]	@ (800db2c <xPortStartScheduler+0x1a8>)
 800dabc:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 800dabe:	7bfb      	ldrb	r3, [r7, #15]
 800dac0:	b2da      	uxtb	r2, r3
 800dac2:	6a3b      	ldr	r3, [r7, #32]
 800dac4:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800dac6:	4b1a      	ldr	r3, [pc, #104]	@ (800db30 <xPortStartScheduler+0x1ac>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	4a19      	ldr	r2, [pc, #100]	@ (800db30 <xPortStartScheduler+0x1ac>)
 800dacc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dad0:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800dad2:	4b17      	ldr	r3, [pc, #92]	@ (800db30 <xPortStartScheduler+0x1ac>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	4a16      	ldr	r2, [pc, #88]	@ (800db30 <xPortStartScheduler+0x1ac>)
 800dad8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dadc:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 800dade:	4b15      	ldr	r3, [pc, #84]	@ (800db34 <xPortStartScheduler+0x1b0>)
 800dae0:	2200      	movs	r2, #0
 800dae2:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800dae4:	f000 f8ec 	bl	800dcc0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800dae8:	4b13      	ldr	r3, [pc, #76]	@ (800db38 <xPortStartScheduler+0x1b4>)
 800daea:	2200      	movs	r2, #0
 800daec:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800daee:	f000 f90b 	bl	800dd08 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800daf2:	4b12      	ldr	r3, [pc, #72]	@ (800db3c <xPortStartScheduler+0x1b8>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	4a11      	ldr	r2, [pc, #68]	@ (800db3c <xPortStartScheduler+0x1b8>)
 800daf8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800dafc:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800dafe:	f7ff ff2b 	bl	800d958 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800db02:	f7fe fcfd 	bl	800c500 <vTaskSwitchContext>
    prvTaskExitError();
 800db06:	f7ff fedb 	bl	800d8c0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800db0a:	2300      	movs	r3, #0
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3728      	adds	r7, #40	@ 0x28
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}
 800db14:	e000ed08 	.word	0xe000ed08
 800db18:	0800d931 	.word	0x0800d931
 800db1c:	080141a0 	.word	0x080141a0
 800db20:	0800dc11 	.word	0x0800dc11
 800db24:	e000e400 	.word	0xe000e400
 800db28:	20000554 	.word	0x20000554
 800db2c:	20000558 	.word	0x20000558
 800db30:	e000ed20 	.word	0xe000ed20
 800db34:	e000ed1c 	.word	0xe000ed1c
 800db38:	20000044 	.word	0x20000044
 800db3c:	e000ef34 	.word	0xe000ef34

0800db40 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b082      	sub	sp, #8
 800db44:	af00      	add	r7, sp, #0
    __asm volatile
 800db46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db4a:	b672      	cpsid	i
 800db4c:	f383 8811 	msr	BASEPRI, r3
 800db50:	f3bf 8f6f 	isb	sy
 800db54:	f3bf 8f4f 	dsb	sy
 800db58:	b662      	cpsie	i
 800db5a:	607b      	str	r3, [r7, #4]
}
 800db5c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800db5e:	4b11      	ldr	r3, [pc, #68]	@ (800dba4 <vPortEnterCritical+0x64>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	3301      	adds	r3, #1
 800db64:	4a0f      	ldr	r2, [pc, #60]	@ (800dba4 <vPortEnterCritical+0x64>)
 800db66:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800db68:	4b0e      	ldr	r3, [pc, #56]	@ (800dba4 <vPortEnterCritical+0x64>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	2b01      	cmp	r3, #1
 800db6e:	d115      	bne.n	800db9c <vPortEnterCritical+0x5c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800db70:	4b0d      	ldr	r3, [pc, #52]	@ (800dba8 <vPortEnterCritical+0x68>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	b2db      	uxtb	r3, r3
 800db76:	2b00      	cmp	r3, #0
 800db78:	d010      	beq.n	800db9c <vPortEnterCritical+0x5c>
    __asm volatile
 800db7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db7e:	b672      	cpsid	i
 800db80:	f383 8811 	msr	BASEPRI, r3
 800db84:	f3bf 8f6f 	isb	sy
 800db88:	f3bf 8f4f 	dsb	sy
 800db8c:	b662      	cpsie	i
 800db8e:	603b      	str	r3, [r7, #0]
}
 800db90:	bf00      	nop
 800db92:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 800db96:	4805      	ldr	r0, [pc, #20]	@ (800dbac <vPortEnterCritical+0x6c>)
 800db98:	f7f6 fbbc 	bl	8004314 <vAssertCalled>
    }
}
 800db9c:	bf00      	nop
 800db9e:	3708      	adds	r7, #8
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}
 800dba4:	20000044 	.word	0x20000044
 800dba8:	e000ed04 	.word	0xe000ed04
 800dbac:	080141a0 	.word	0x080141a0

0800dbb0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b082      	sub	sp, #8
 800dbb4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800dbb6:	4b14      	ldr	r3, [pc, #80]	@ (800dc08 <vPortExitCritical+0x58>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d110      	bne.n	800dbe0 <vPortExitCritical+0x30>
    __asm volatile
 800dbbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbc2:	b672      	cpsid	i
 800dbc4:	f383 8811 	msr	BASEPRI, r3
 800dbc8:	f3bf 8f6f 	isb	sy
 800dbcc:	f3bf 8f4f 	dsb	sy
 800dbd0:	b662      	cpsie	i
 800dbd2:	607b      	str	r3, [r7, #4]
}
 800dbd4:	bf00      	nop
 800dbd6:	f240 11e3 	movw	r1, #483	@ 0x1e3
 800dbda:	480c      	ldr	r0, [pc, #48]	@ (800dc0c <vPortExitCritical+0x5c>)
 800dbdc:	f7f6 fb9a 	bl	8004314 <vAssertCalled>
    uxCriticalNesting--;
 800dbe0:	4b09      	ldr	r3, [pc, #36]	@ (800dc08 <vPortExitCritical+0x58>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	3b01      	subs	r3, #1
 800dbe6:	4a08      	ldr	r2, [pc, #32]	@ (800dc08 <vPortExitCritical+0x58>)
 800dbe8:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800dbea:	4b07      	ldr	r3, [pc, #28]	@ (800dc08 <vPortExitCritical+0x58>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d105      	bne.n	800dbfe <vPortExitCritical+0x4e>
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800dbfc:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800dbfe:	bf00      	nop
 800dc00:	3708      	adds	r7, #8
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
 800dc06:	bf00      	nop
 800dc08:	20000044 	.word	0x20000044
 800dc0c:	080141a0 	.word	0x080141a0

0800dc10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800dc10:	f3ef 8009 	mrs	r0, PSP
 800dc14:	f3bf 8f6f 	isb	sy
 800dc18:	4b15      	ldr	r3, [pc, #84]	@ (800dc70 <pxCurrentTCBConst>)
 800dc1a:	681a      	ldr	r2, [r3, #0]
 800dc1c:	f01e 0f10 	tst.w	lr, #16
 800dc20:	bf08      	it	eq
 800dc22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dc26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc2a:	6010      	str	r0, [r2, #0]
 800dc2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dc30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800dc34:	b672      	cpsid	i
 800dc36:	f380 8811 	msr	BASEPRI, r0
 800dc3a:	f3bf 8f4f 	dsb	sy
 800dc3e:	f3bf 8f6f 	isb	sy
 800dc42:	b662      	cpsie	i
 800dc44:	f7fe fc5c 	bl	800c500 <vTaskSwitchContext>
 800dc48:	f04f 0000 	mov.w	r0, #0
 800dc4c:	f380 8811 	msr	BASEPRI, r0
 800dc50:	bc09      	pop	{r0, r3}
 800dc52:	6819      	ldr	r1, [r3, #0]
 800dc54:	6808      	ldr	r0, [r1, #0]
 800dc56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc5a:	f01e 0f10 	tst.w	lr, #16
 800dc5e:	bf08      	it	eq
 800dc60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dc64:	f380 8809 	msr	PSP, r0
 800dc68:	f3bf 8f6f 	isb	sy
 800dc6c:	4770      	bx	lr
 800dc6e:	bf00      	nop

0800dc70 <pxCurrentTCBConst>:
 800dc70:	200003e4 	.word	0x200003e4
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800dc74:	bf00      	nop
 800dc76:	bf00      	nop

0800dc78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b082      	sub	sp, #8
 800dc7c:	af00      	add	r7, sp, #0
    __asm volatile
 800dc7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc82:	b672      	cpsid	i
 800dc84:	f383 8811 	msr	BASEPRI, r3
 800dc88:	f3bf 8f6f 	isb	sy
 800dc8c:	f3bf 8f4f 	dsb	sy
 800dc90:	b662      	cpsie	i
 800dc92:	607b      	str	r3, [r7, #4]
}
 800dc94:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800dc96:	f7fe fb13 	bl	800c2c0 <xTaskIncrementTick>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d003      	beq.n	800dca8 <xPortSysTickHandler+0x30>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dca0:	4b06      	ldr	r3, [pc, #24]	@ (800dcbc <xPortSysTickHandler+0x44>)
 800dca2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dca6:	601a      	str	r2, [r3, #0]
 800dca8:	2300      	movs	r3, #0
 800dcaa:	603b      	str	r3, [r7, #0]
    __asm volatile
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	f383 8811 	msr	BASEPRI, r3
}
 800dcb2:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 800dcb4:	bf00      	nop
 800dcb6:	3708      	adds	r7, #8
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}
 800dcbc:	e000ed04 	.word	0xe000ed04

0800dcc0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800dcc0:	b480      	push	{r7}
 800dcc2:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dcc4:	4b0b      	ldr	r3, [pc, #44]	@ (800dcf4 <vPortSetupTimerInterrupt+0x34>)
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dcca:	4b0b      	ldr	r3, [pc, #44]	@ (800dcf8 <vPortSetupTimerInterrupt+0x38>)
 800dccc:	2200      	movs	r2, #0
 800dcce:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dcd0:	4b0a      	ldr	r3, [pc, #40]	@ (800dcfc <vPortSetupTimerInterrupt+0x3c>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	4a0a      	ldr	r2, [pc, #40]	@ (800dd00 <vPortSetupTimerInterrupt+0x40>)
 800dcd6:	fba2 2303 	umull	r2, r3, r2, r3
 800dcda:	099b      	lsrs	r3, r3, #6
 800dcdc:	4a09      	ldr	r2, [pc, #36]	@ (800dd04 <vPortSetupTimerInterrupt+0x44>)
 800dcde:	3b01      	subs	r3, #1
 800dce0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dce2:	4b04      	ldr	r3, [pc, #16]	@ (800dcf4 <vPortSetupTimerInterrupt+0x34>)
 800dce4:	2207      	movs	r2, #7
 800dce6:	601a      	str	r2, [r3, #0]
}
 800dce8:	bf00      	nop
 800dcea:	46bd      	mov	sp, r7
 800dcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf0:	4770      	bx	lr
 800dcf2:	bf00      	nop
 800dcf4:	e000e010 	.word	0xe000e010
 800dcf8:	e000e018 	.word	0xe000e018
 800dcfc:	20000038 	.word	0x20000038
 800dd00:	10624dd3 	.word	0x10624dd3
 800dd04:	e000e014 	.word	0xe000e014

0800dd08 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800dd08:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800dd18 <vPortEnableVFP+0x10>
 800dd0c:	6801      	ldr	r1, [r0, #0]
 800dd0e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800dd12:	6001      	str	r1, [r0, #0]
 800dd14:	4770      	bx	lr
 800dd16:	0000      	.short	0x0000
 800dd18:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 800dd1c:	bf00      	nop
 800dd1e:	bf00      	nop

0800dd20 <__assert_func>:
 800dd20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd22:	4614      	mov	r4, r2
 800dd24:	461a      	mov	r2, r3
 800dd26:	4b09      	ldr	r3, [pc, #36]	@ (800dd4c <__assert_func+0x2c>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	4605      	mov	r5, r0
 800dd2c:	68d8      	ldr	r0, [r3, #12]
 800dd2e:	b14c      	cbz	r4, 800dd44 <__assert_func+0x24>
 800dd30:	4b07      	ldr	r3, [pc, #28]	@ (800dd50 <__assert_func+0x30>)
 800dd32:	9100      	str	r1, [sp, #0]
 800dd34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dd38:	4906      	ldr	r1, [pc, #24]	@ (800dd54 <__assert_func+0x34>)
 800dd3a:	462b      	mov	r3, r5
 800dd3c:	f002 f860 	bl	800fe00 <fiprintf>
 800dd40:	f002 fc70 	bl	8010624 <abort>
 800dd44:	4b04      	ldr	r3, [pc, #16]	@ (800dd58 <__assert_func+0x38>)
 800dd46:	461c      	mov	r4, r3
 800dd48:	e7f3      	b.n	800dd32 <__assert_func+0x12>
 800dd4a:	bf00      	nop
 800dd4c:	200001c0 	.word	0x200001c0
 800dd50:	08014508 	.word	0x08014508
 800dd54:	08014515 	.word	0x08014515
 800dd58:	08014543 	.word	0x08014543

0800dd5c <atof>:
 800dd5c:	2100      	movs	r1, #0
 800dd5e:	f000 bf29 	b.w	800ebb4 <strtod>
	...

0800dd64 <calloc>:
 800dd64:	4b02      	ldr	r3, [pc, #8]	@ (800dd70 <calloc+0xc>)
 800dd66:	460a      	mov	r2, r1
 800dd68:	4601      	mov	r1, r0
 800dd6a:	6818      	ldr	r0, [r3, #0]
 800dd6c:	f000 b802 	b.w	800dd74 <_calloc_r>
 800dd70:	200001c0 	.word	0x200001c0

0800dd74 <_calloc_r>:
 800dd74:	b570      	push	{r4, r5, r6, lr}
 800dd76:	fba1 5402 	umull	r5, r4, r1, r2
 800dd7a:	b934      	cbnz	r4, 800dd8a <_calloc_r+0x16>
 800dd7c:	4629      	mov	r1, r5
 800dd7e:	f000 f887 	bl	800de90 <_malloc_r>
 800dd82:	4606      	mov	r6, r0
 800dd84:	b928      	cbnz	r0, 800dd92 <_calloc_r+0x1e>
 800dd86:	4630      	mov	r0, r6
 800dd88:	bd70      	pop	{r4, r5, r6, pc}
 800dd8a:	220c      	movs	r2, #12
 800dd8c:	6002      	str	r2, [r0, #0]
 800dd8e:	2600      	movs	r6, #0
 800dd90:	e7f9      	b.n	800dd86 <_calloc_r+0x12>
 800dd92:	462a      	mov	r2, r5
 800dd94:	4621      	mov	r1, r4
 800dd96:	f002 fac1 	bl	801031c <memset>
 800dd9a:	e7f4      	b.n	800dd86 <_calloc_r+0x12>

0800dd9c <getenv>:
 800dd9c:	b507      	push	{r0, r1, r2, lr}
 800dd9e:	4b04      	ldr	r3, [pc, #16]	@ (800ddb0 <getenv+0x14>)
 800dda0:	4601      	mov	r1, r0
 800dda2:	aa01      	add	r2, sp, #4
 800dda4:	6818      	ldr	r0, [r3, #0]
 800dda6:	f000 f805 	bl	800ddb4 <_findenv_r>
 800ddaa:	b003      	add	sp, #12
 800ddac:	f85d fb04 	ldr.w	pc, [sp], #4
 800ddb0:	200001c0 	.word	0x200001c0

0800ddb4 <_findenv_r>:
 800ddb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddb8:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800de28 <_findenv_r+0x74>
 800ddbc:	4606      	mov	r6, r0
 800ddbe:	4689      	mov	r9, r1
 800ddc0:	4617      	mov	r7, r2
 800ddc2:	f7f6 fdc7 	bl	8004954 <__env_lock>
 800ddc6:	f8da 4000 	ldr.w	r4, [sl]
 800ddca:	b134      	cbz	r4, 800ddda <_findenv_r+0x26>
 800ddcc:	464b      	mov	r3, r9
 800ddce:	4698      	mov	r8, r3
 800ddd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddd4:	b13a      	cbz	r2, 800dde6 <_findenv_r+0x32>
 800ddd6:	2a3d      	cmp	r2, #61	@ 0x3d
 800ddd8:	d1f9      	bne.n	800ddce <_findenv_r+0x1a>
 800ddda:	4630      	mov	r0, r6
 800dddc:	f7f6 fdf2 	bl	80049c4 <__env_unlock>
 800dde0:	2000      	movs	r0, #0
 800dde2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dde6:	eba8 0809 	sub.w	r8, r8, r9
 800ddea:	46a3      	mov	fp, r4
 800ddec:	f854 0b04 	ldr.w	r0, [r4], #4
 800ddf0:	2800      	cmp	r0, #0
 800ddf2:	d0f2      	beq.n	800ddda <_findenv_r+0x26>
 800ddf4:	4642      	mov	r2, r8
 800ddf6:	4649      	mov	r1, r9
 800ddf8:	f002 faa5 	bl	8010346 <strncmp>
 800ddfc:	2800      	cmp	r0, #0
 800ddfe:	d1f4      	bne.n	800ddea <_findenv_r+0x36>
 800de00:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800de04:	eb03 0508 	add.w	r5, r3, r8
 800de08:	f813 3008 	ldrb.w	r3, [r3, r8]
 800de0c:	2b3d      	cmp	r3, #61	@ 0x3d
 800de0e:	d1ec      	bne.n	800ddea <_findenv_r+0x36>
 800de10:	f8da 3000 	ldr.w	r3, [sl]
 800de14:	ebab 0303 	sub.w	r3, fp, r3
 800de18:	109b      	asrs	r3, r3, #2
 800de1a:	4630      	mov	r0, r6
 800de1c:	603b      	str	r3, [r7, #0]
 800de1e:	f7f6 fdd1 	bl	80049c4 <__env_unlock>
 800de22:	1c68      	adds	r0, r5, #1
 800de24:	e7dd      	b.n	800dde2 <_findenv_r+0x2e>
 800de26:	bf00      	nop
 800de28:	20000030 	.word	0x20000030

0800de2c <malloc>:
 800de2c:	4b02      	ldr	r3, [pc, #8]	@ (800de38 <malloc+0xc>)
 800de2e:	4601      	mov	r1, r0
 800de30:	6818      	ldr	r0, [r3, #0]
 800de32:	f000 b82d 	b.w	800de90 <_malloc_r>
 800de36:	bf00      	nop
 800de38:	200001c0 	.word	0x200001c0

0800de3c <free>:
 800de3c:	4b02      	ldr	r3, [pc, #8]	@ (800de48 <free+0xc>)
 800de3e:	4601      	mov	r1, r0
 800de40:	6818      	ldr	r0, [r3, #0]
 800de42:	f003 ba51 	b.w	80112e8 <_free_r>
 800de46:	bf00      	nop
 800de48:	200001c0 	.word	0x200001c0

0800de4c <sbrk_aligned>:
 800de4c:	b570      	push	{r4, r5, r6, lr}
 800de4e:	4e0f      	ldr	r6, [pc, #60]	@ (800de8c <sbrk_aligned+0x40>)
 800de50:	460c      	mov	r4, r1
 800de52:	6831      	ldr	r1, [r6, #0]
 800de54:	4605      	mov	r5, r0
 800de56:	b911      	cbnz	r1, 800de5e <sbrk_aligned+0x12>
 800de58:	f7f6 fcaa 	bl	80047b0 <_sbrk_r>
 800de5c:	6030      	str	r0, [r6, #0]
 800de5e:	4621      	mov	r1, r4
 800de60:	4628      	mov	r0, r5
 800de62:	f7f6 fca5 	bl	80047b0 <_sbrk_r>
 800de66:	1c43      	adds	r3, r0, #1
 800de68:	d103      	bne.n	800de72 <sbrk_aligned+0x26>
 800de6a:	f04f 34ff 	mov.w	r4, #4294967295
 800de6e:	4620      	mov	r0, r4
 800de70:	bd70      	pop	{r4, r5, r6, pc}
 800de72:	1cc4      	adds	r4, r0, #3
 800de74:	f024 0403 	bic.w	r4, r4, #3
 800de78:	42a0      	cmp	r0, r4
 800de7a:	d0f8      	beq.n	800de6e <sbrk_aligned+0x22>
 800de7c:	1a21      	subs	r1, r4, r0
 800de7e:	4628      	mov	r0, r5
 800de80:	f7f6 fc96 	bl	80047b0 <_sbrk_r>
 800de84:	3001      	adds	r0, #1
 800de86:	d1f2      	bne.n	800de6e <sbrk_aligned+0x22>
 800de88:	e7ef      	b.n	800de6a <sbrk_aligned+0x1e>
 800de8a:	bf00      	nop
 800de8c:	2000055c 	.word	0x2000055c

0800de90 <_malloc_r>:
 800de90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de94:	1ccd      	adds	r5, r1, #3
 800de96:	f025 0503 	bic.w	r5, r5, #3
 800de9a:	3508      	adds	r5, #8
 800de9c:	2d0c      	cmp	r5, #12
 800de9e:	bf38      	it	cc
 800dea0:	250c      	movcc	r5, #12
 800dea2:	2d00      	cmp	r5, #0
 800dea4:	4606      	mov	r6, r0
 800dea6:	db01      	blt.n	800deac <_malloc_r+0x1c>
 800dea8:	42a9      	cmp	r1, r5
 800deaa:	d904      	bls.n	800deb6 <_malloc_r+0x26>
 800deac:	230c      	movs	r3, #12
 800deae:	6033      	str	r3, [r6, #0]
 800deb0:	2000      	movs	r0, #0
 800deb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800deb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800df8c <_malloc_r+0xfc>
 800deba:	f7f6 fcfd 	bl	80048b8 <__malloc_lock>
 800debe:	f8d8 3000 	ldr.w	r3, [r8]
 800dec2:	461c      	mov	r4, r3
 800dec4:	bb44      	cbnz	r4, 800df18 <_malloc_r+0x88>
 800dec6:	4629      	mov	r1, r5
 800dec8:	4630      	mov	r0, r6
 800deca:	f7ff ffbf 	bl	800de4c <sbrk_aligned>
 800dece:	1c43      	adds	r3, r0, #1
 800ded0:	4604      	mov	r4, r0
 800ded2:	d158      	bne.n	800df86 <_malloc_r+0xf6>
 800ded4:	f8d8 4000 	ldr.w	r4, [r8]
 800ded8:	4627      	mov	r7, r4
 800deda:	2f00      	cmp	r7, #0
 800dedc:	d143      	bne.n	800df66 <_malloc_r+0xd6>
 800dede:	2c00      	cmp	r4, #0
 800dee0:	d04b      	beq.n	800df7a <_malloc_r+0xea>
 800dee2:	6823      	ldr	r3, [r4, #0]
 800dee4:	4639      	mov	r1, r7
 800dee6:	4630      	mov	r0, r6
 800dee8:	eb04 0903 	add.w	r9, r4, r3
 800deec:	f7f6 fc60 	bl	80047b0 <_sbrk_r>
 800def0:	4581      	cmp	r9, r0
 800def2:	d142      	bne.n	800df7a <_malloc_r+0xea>
 800def4:	6821      	ldr	r1, [r4, #0]
 800def6:	1a6d      	subs	r5, r5, r1
 800def8:	4629      	mov	r1, r5
 800defa:	4630      	mov	r0, r6
 800defc:	f7ff ffa6 	bl	800de4c <sbrk_aligned>
 800df00:	3001      	adds	r0, #1
 800df02:	d03a      	beq.n	800df7a <_malloc_r+0xea>
 800df04:	6823      	ldr	r3, [r4, #0]
 800df06:	442b      	add	r3, r5
 800df08:	6023      	str	r3, [r4, #0]
 800df0a:	f8d8 3000 	ldr.w	r3, [r8]
 800df0e:	685a      	ldr	r2, [r3, #4]
 800df10:	bb62      	cbnz	r2, 800df6c <_malloc_r+0xdc>
 800df12:	f8c8 7000 	str.w	r7, [r8]
 800df16:	e00f      	b.n	800df38 <_malloc_r+0xa8>
 800df18:	6822      	ldr	r2, [r4, #0]
 800df1a:	1b52      	subs	r2, r2, r5
 800df1c:	d420      	bmi.n	800df60 <_malloc_r+0xd0>
 800df1e:	2a0b      	cmp	r2, #11
 800df20:	d917      	bls.n	800df52 <_malloc_r+0xc2>
 800df22:	1961      	adds	r1, r4, r5
 800df24:	42a3      	cmp	r3, r4
 800df26:	6025      	str	r5, [r4, #0]
 800df28:	bf18      	it	ne
 800df2a:	6059      	strne	r1, [r3, #4]
 800df2c:	6863      	ldr	r3, [r4, #4]
 800df2e:	bf08      	it	eq
 800df30:	f8c8 1000 	streq.w	r1, [r8]
 800df34:	5162      	str	r2, [r4, r5]
 800df36:	604b      	str	r3, [r1, #4]
 800df38:	4630      	mov	r0, r6
 800df3a:	f7f6 fcf7 	bl	800492c <__malloc_unlock>
 800df3e:	f104 000b 	add.w	r0, r4, #11
 800df42:	1d23      	adds	r3, r4, #4
 800df44:	f020 0007 	bic.w	r0, r0, #7
 800df48:	1ac2      	subs	r2, r0, r3
 800df4a:	bf1c      	itt	ne
 800df4c:	1a1b      	subne	r3, r3, r0
 800df4e:	50a3      	strne	r3, [r4, r2]
 800df50:	e7af      	b.n	800deb2 <_malloc_r+0x22>
 800df52:	6862      	ldr	r2, [r4, #4]
 800df54:	42a3      	cmp	r3, r4
 800df56:	bf0c      	ite	eq
 800df58:	f8c8 2000 	streq.w	r2, [r8]
 800df5c:	605a      	strne	r2, [r3, #4]
 800df5e:	e7eb      	b.n	800df38 <_malloc_r+0xa8>
 800df60:	4623      	mov	r3, r4
 800df62:	6864      	ldr	r4, [r4, #4]
 800df64:	e7ae      	b.n	800dec4 <_malloc_r+0x34>
 800df66:	463c      	mov	r4, r7
 800df68:	687f      	ldr	r7, [r7, #4]
 800df6a:	e7b6      	b.n	800deda <_malloc_r+0x4a>
 800df6c:	461a      	mov	r2, r3
 800df6e:	685b      	ldr	r3, [r3, #4]
 800df70:	42a3      	cmp	r3, r4
 800df72:	d1fb      	bne.n	800df6c <_malloc_r+0xdc>
 800df74:	2300      	movs	r3, #0
 800df76:	6053      	str	r3, [r2, #4]
 800df78:	e7de      	b.n	800df38 <_malloc_r+0xa8>
 800df7a:	230c      	movs	r3, #12
 800df7c:	6033      	str	r3, [r6, #0]
 800df7e:	4630      	mov	r0, r6
 800df80:	f7f6 fcd4 	bl	800492c <__malloc_unlock>
 800df84:	e794      	b.n	800deb0 <_malloc_r+0x20>
 800df86:	6005      	str	r5, [r0, #0]
 800df88:	e7d6      	b.n	800df38 <_malloc_r+0xa8>
 800df8a:	bf00      	nop
 800df8c:	20000560 	.word	0x20000560

0800df90 <mallinfo>:
 800df90:	b510      	push	{r4, lr}
 800df92:	4b03      	ldr	r3, [pc, #12]	@ (800dfa0 <mallinfo+0x10>)
 800df94:	4604      	mov	r4, r0
 800df96:	6819      	ldr	r1, [r3, #0]
 800df98:	f003 fd2a 	bl	80119f0 <_mallinfo_r>
 800df9c:	4620      	mov	r0, r4
 800df9e:	bd10      	pop	{r4, pc}
 800dfa0:	200001c0 	.word	0x200001c0

0800dfa4 <sulp>:
 800dfa4:	b570      	push	{r4, r5, r6, lr}
 800dfa6:	4604      	mov	r4, r0
 800dfa8:	460d      	mov	r5, r1
 800dfaa:	ec45 4b10 	vmov	d0, r4, r5
 800dfae:	4616      	mov	r6, r2
 800dfb0:	f004 f8d0 	bl	8012154 <__ulp>
 800dfb4:	ec51 0b10 	vmov	r0, r1, d0
 800dfb8:	b17e      	cbz	r6, 800dfda <sulp+0x36>
 800dfba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800dfbe:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	dd09      	ble.n	800dfda <sulp+0x36>
 800dfc6:	051b      	lsls	r3, r3, #20
 800dfc8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800dfcc:	2400      	movs	r4, #0
 800dfce:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800dfd2:	4622      	mov	r2, r4
 800dfd4:	462b      	mov	r3, r5
 800dfd6:	f7f2 fb3f 	bl	8000658 <__aeabi_dmul>
 800dfda:	ec41 0b10 	vmov	d0, r0, r1
 800dfde:	bd70      	pop	{r4, r5, r6, pc}

0800dfe0 <_strtod_l>:
 800dfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfe4:	b09f      	sub	sp, #124	@ 0x7c
 800dfe6:	460c      	mov	r4, r1
 800dfe8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800dfea:	2200      	movs	r2, #0
 800dfec:	921a      	str	r2, [sp, #104]	@ 0x68
 800dfee:	9005      	str	r0, [sp, #20]
 800dff0:	f04f 0a00 	mov.w	sl, #0
 800dff4:	f04f 0b00 	mov.w	fp, #0
 800dff8:	460a      	mov	r2, r1
 800dffa:	9219      	str	r2, [sp, #100]	@ 0x64
 800dffc:	7811      	ldrb	r1, [r2, #0]
 800dffe:	292b      	cmp	r1, #43	@ 0x2b
 800e000:	d04a      	beq.n	800e098 <_strtod_l+0xb8>
 800e002:	d838      	bhi.n	800e076 <_strtod_l+0x96>
 800e004:	290d      	cmp	r1, #13
 800e006:	d832      	bhi.n	800e06e <_strtod_l+0x8e>
 800e008:	2908      	cmp	r1, #8
 800e00a:	d832      	bhi.n	800e072 <_strtod_l+0x92>
 800e00c:	2900      	cmp	r1, #0
 800e00e:	d03b      	beq.n	800e088 <_strtod_l+0xa8>
 800e010:	2200      	movs	r2, #0
 800e012:	920e      	str	r2, [sp, #56]	@ 0x38
 800e014:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e016:	782a      	ldrb	r2, [r5, #0]
 800e018:	2a30      	cmp	r2, #48	@ 0x30
 800e01a:	f040 80b2 	bne.w	800e182 <_strtod_l+0x1a2>
 800e01e:	786a      	ldrb	r2, [r5, #1]
 800e020:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e024:	2a58      	cmp	r2, #88	@ 0x58
 800e026:	d16e      	bne.n	800e106 <_strtod_l+0x126>
 800e028:	9302      	str	r3, [sp, #8]
 800e02a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e02c:	9301      	str	r3, [sp, #4]
 800e02e:	ab1a      	add	r3, sp, #104	@ 0x68
 800e030:	9300      	str	r3, [sp, #0]
 800e032:	4a8f      	ldr	r2, [pc, #572]	@ (800e270 <_strtod_l+0x290>)
 800e034:	9805      	ldr	r0, [sp, #20]
 800e036:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e038:	a919      	add	r1, sp, #100	@ 0x64
 800e03a:	f003 fa07 	bl	801144c <__gethex>
 800e03e:	f010 060f 	ands.w	r6, r0, #15
 800e042:	4604      	mov	r4, r0
 800e044:	d005      	beq.n	800e052 <_strtod_l+0x72>
 800e046:	2e06      	cmp	r6, #6
 800e048:	d128      	bne.n	800e09c <_strtod_l+0xbc>
 800e04a:	3501      	adds	r5, #1
 800e04c:	2300      	movs	r3, #0
 800e04e:	9519      	str	r5, [sp, #100]	@ 0x64
 800e050:	930e      	str	r3, [sp, #56]	@ 0x38
 800e052:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e054:	2b00      	cmp	r3, #0
 800e056:	f040 858e 	bne.w	800eb76 <_strtod_l+0xb96>
 800e05a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e05c:	b1cb      	cbz	r3, 800e092 <_strtod_l+0xb2>
 800e05e:	4652      	mov	r2, sl
 800e060:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e064:	ec43 2b10 	vmov	d0, r2, r3
 800e068:	b01f      	add	sp, #124	@ 0x7c
 800e06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e06e:	2920      	cmp	r1, #32
 800e070:	d1ce      	bne.n	800e010 <_strtod_l+0x30>
 800e072:	3201      	adds	r2, #1
 800e074:	e7c1      	b.n	800dffa <_strtod_l+0x1a>
 800e076:	292d      	cmp	r1, #45	@ 0x2d
 800e078:	d1ca      	bne.n	800e010 <_strtod_l+0x30>
 800e07a:	2101      	movs	r1, #1
 800e07c:	910e      	str	r1, [sp, #56]	@ 0x38
 800e07e:	1c51      	adds	r1, r2, #1
 800e080:	9119      	str	r1, [sp, #100]	@ 0x64
 800e082:	7852      	ldrb	r2, [r2, #1]
 800e084:	2a00      	cmp	r2, #0
 800e086:	d1c5      	bne.n	800e014 <_strtod_l+0x34>
 800e088:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e08a:	9419      	str	r4, [sp, #100]	@ 0x64
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	f040 8570 	bne.w	800eb72 <_strtod_l+0xb92>
 800e092:	4652      	mov	r2, sl
 800e094:	465b      	mov	r3, fp
 800e096:	e7e5      	b.n	800e064 <_strtod_l+0x84>
 800e098:	2100      	movs	r1, #0
 800e09a:	e7ef      	b.n	800e07c <_strtod_l+0x9c>
 800e09c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e09e:	b13a      	cbz	r2, 800e0b0 <_strtod_l+0xd0>
 800e0a0:	2135      	movs	r1, #53	@ 0x35
 800e0a2:	a81c      	add	r0, sp, #112	@ 0x70
 800e0a4:	f004 f950 	bl	8012348 <__copybits>
 800e0a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e0aa:	9805      	ldr	r0, [sp, #20]
 800e0ac:	f003 fd26 	bl	8011afc <_Bfree>
 800e0b0:	3e01      	subs	r6, #1
 800e0b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e0b4:	2e04      	cmp	r6, #4
 800e0b6:	d806      	bhi.n	800e0c6 <_strtod_l+0xe6>
 800e0b8:	e8df f006 	tbb	[pc, r6]
 800e0bc:	201d0314 	.word	0x201d0314
 800e0c0:	14          	.byte	0x14
 800e0c1:	00          	.byte	0x00
 800e0c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e0c6:	05e1      	lsls	r1, r4, #23
 800e0c8:	bf48      	it	mi
 800e0ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e0ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e0d2:	0d1b      	lsrs	r3, r3, #20
 800e0d4:	051b      	lsls	r3, r3, #20
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d1bb      	bne.n	800e052 <_strtod_l+0x72>
 800e0da:	f002 fa57 	bl	801058c <__errno>
 800e0de:	2322      	movs	r3, #34	@ 0x22
 800e0e0:	6003      	str	r3, [r0, #0]
 800e0e2:	e7b6      	b.n	800e052 <_strtod_l+0x72>
 800e0e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e0e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e0ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e0f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e0f4:	e7e7      	b.n	800e0c6 <_strtod_l+0xe6>
 800e0f6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800e278 <_strtod_l+0x298>
 800e0fa:	e7e4      	b.n	800e0c6 <_strtod_l+0xe6>
 800e0fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e100:	f04f 3aff 	mov.w	sl, #4294967295
 800e104:	e7df      	b.n	800e0c6 <_strtod_l+0xe6>
 800e106:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e108:	1c5a      	adds	r2, r3, #1
 800e10a:	9219      	str	r2, [sp, #100]	@ 0x64
 800e10c:	785b      	ldrb	r3, [r3, #1]
 800e10e:	2b30      	cmp	r3, #48	@ 0x30
 800e110:	d0f9      	beq.n	800e106 <_strtod_l+0x126>
 800e112:	2b00      	cmp	r3, #0
 800e114:	d09d      	beq.n	800e052 <_strtod_l+0x72>
 800e116:	2301      	movs	r3, #1
 800e118:	2700      	movs	r7, #0
 800e11a:	9308      	str	r3, [sp, #32]
 800e11c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e11e:	930c      	str	r3, [sp, #48]	@ 0x30
 800e120:	970b      	str	r7, [sp, #44]	@ 0x2c
 800e122:	46b9      	mov	r9, r7
 800e124:	220a      	movs	r2, #10
 800e126:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e128:	7805      	ldrb	r5, [r0, #0]
 800e12a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e12e:	b2d9      	uxtb	r1, r3
 800e130:	2909      	cmp	r1, #9
 800e132:	d928      	bls.n	800e186 <_strtod_l+0x1a6>
 800e134:	494f      	ldr	r1, [pc, #316]	@ (800e274 <_strtod_l+0x294>)
 800e136:	2201      	movs	r2, #1
 800e138:	f002 f905 	bl	8010346 <strncmp>
 800e13c:	2800      	cmp	r0, #0
 800e13e:	d032      	beq.n	800e1a6 <_strtod_l+0x1c6>
 800e140:	2000      	movs	r0, #0
 800e142:	462a      	mov	r2, r5
 800e144:	900a      	str	r0, [sp, #40]	@ 0x28
 800e146:	464d      	mov	r5, r9
 800e148:	4603      	mov	r3, r0
 800e14a:	2a65      	cmp	r2, #101	@ 0x65
 800e14c:	d001      	beq.n	800e152 <_strtod_l+0x172>
 800e14e:	2a45      	cmp	r2, #69	@ 0x45
 800e150:	d114      	bne.n	800e17c <_strtod_l+0x19c>
 800e152:	b91d      	cbnz	r5, 800e15c <_strtod_l+0x17c>
 800e154:	9a08      	ldr	r2, [sp, #32]
 800e156:	4302      	orrs	r2, r0
 800e158:	d096      	beq.n	800e088 <_strtod_l+0xa8>
 800e15a:	2500      	movs	r5, #0
 800e15c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e15e:	1c62      	adds	r2, r4, #1
 800e160:	9219      	str	r2, [sp, #100]	@ 0x64
 800e162:	7862      	ldrb	r2, [r4, #1]
 800e164:	2a2b      	cmp	r2, #43	@ 0x2b
 800e166:	d07a      	beq.n	800e25e <_strtod_l+0x27e>
 800e168:	2a2d      	cmp	r2, #45	@ 0x2d
 800e16a:	d07e      	beq.n	800e26a <_strtod_l+0x28a>
 800e16c:	f04f 0c00 	mov.w	ip, #0
 800e170:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e174:	2909      	cmp	r1, #9
 800e176:	f240 8085 	bls.w	800e284 <_strtod_l+0x2a4>
 800e17a:	9419      	str	r4, [sp, #100]	@ 0x64
 800e17c:	f04f 0800 	mov.w	r8, #0
 800e180:	e0a5      	b.n	800e2ce <_strtod_l+0x2ee>
 800e182:	2300      	movs	r3, #0
 800e184:	e7c8      	b.n	800e118 <_strtod_l+0x138>
 800e186:	f1b9 0f08 	cmp.w	r9, #8
 800e18a:	bfd8      	it	le
 800e18c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800e18e:	f100 0001 	add.w	r0, r0, #1
 800e192:	bfda      	itte	le
 800e194:	fb02 3301 	mlale	r3, r2, r1, r3
 800e198:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800e19a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800e19e:	f109 0901 	add.w	r9, r9, #1
 800e1a2:	9019      	str	r0, [sp, #100]	@ 0x64
 800e1a4:	e7bf      	b.n	800e126 <_strtod_l+0x146>
 800e1a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e1a8:	1c5a      	adds	r2, r3, #1
 800e1aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800e1ac:	785a      	ldrb	r2, [r3, #1]
 800e1ae:	f1b9 0f00 	cmp.w	r9, #0
 800e1b2:	d03b      	beq.n	800e22c <_strtod_l+0x24c>
 800e1b4:	900a      	str	r0, [sp, #40]	@ 0x28
 800e1b6:	464d      	mov	r5, r9
 800e1b8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e1bc:	2b09      	cmp	r3, #9
 800e1be:	d912      	bls.n	800e1e6 <_strtod_l+0x206>
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	e7c2      	b.n	800e14a <_strtod_l+0x16a>
 800e1c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e1c6:	1c5a      	adds	r2, r3, #1
 800e1c8:	9219      	str	r2, [sp, #100]	@ 0x64
 800e1ca:	785a      	ldrb	r2, [r3, #1]
 800e1cc:	3001      	adds	r0, #1
 800e1ce:	2a30      	cmp	r2, #48	@ 0x30
 800e1d0:	d0f8      	beq.n	800e1c4 <_strtod_l+0x1e4>
 800e1d2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e1d6:	2b08      	cmp	r3, #8
 800e1d8:	f200 84d2 	bhi.w	800eb80 <_strtod_l+0xba0>
 800e1dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e1de:	900a      	str	r0, [sp, #40]	@ 0x28
 800e1e0:	2000      	movs	r0, #0
 800e1e2:	930c      	str	r3, [sp, #48]	@ 0x30
 800e1e4:	4605      	mov	r5, r0
 800e1e6:	3a30      	subs	r2, #48	@ 0x30
 800e1e8:	f100 0301 	add.w	r3, r0, #1
 800e1ec:	d018      	beq.n	800e220 <_strtod_l+0x240>
 800e1ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e1f0:	4419      	add	r1, r3
 800e1f2:	910a      	str	r1, [sp, #40]	@ 0x28
 800e1f4:	462e      	mov	r6, r5
 800e1f6:	f04f 0e0a 	mov.w	lr, #10
 800e1fa:	1c71      	adds	r1, r6, #1
 800e1fc:	eba1 0c05 	sub.w	ip, r1, r5
 800e200:	4563      	cmp	r3, ip
 800e202:	dc15      	bgt.n	800e230 <_strtod_l+0x250>
 800e204:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800e208:	182b      	adds	r3, r5, r0
 800e20a:	2b08      	cmp	r3, #8
 800e20c:	f105 0501 	add.w	r5, r5, #1
 800e210:	4405      	add	r5, r0
 800e212:	dc1a      	bgt.n	800e24a <_strtod_l+0x26a>
 800e214:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e216:	230a      	movs	r3, #10
 800e218:	fb03 2301 	mla	r3, r3, r1, r2
 800e21c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e21e:	2300      	movs	r3, #0
 800e220:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e222:	1c51      	adds	r1, r2, #1
 800e224:	9119      	str	r1, [sp, #100]	@ 0x64
 800e226:	7852      	ldrb	r2, [r2, #1]
 800e228:	4618      	mov	r0, r3
 800e22a:	e7c5      	b.n	800e1b8 <_strtod_l+0x1d8>
 800e22c:	4648      	mov	r0, r9
 800e22e:	e7ce      	b.n	800e1ce <_strtod_l+0x1ee>
 800e230:	2e08      	cmp	r6, #8
 800e232:	dc05      	bgt.n	800e240 <_strtod_l+0x260>
 800e234:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800e236:	fb0e f606 	mul.w	r6, lr, r6
 800e23a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800e23c:	460e      	mov	r6, r1
 800e23e:	e7dc      	b.n	800e1fa <_strtod_l+0x21a>
 800e240:	2910      	cmp	r1, #16
 800e242:	bfd8      	it	le
 800e244:	fb0e f707 	mulle.w	r7, lr, r7
 800e248:	e7f8      	b.n	800e23c <_strtod_l+0x25c>
 800e24a:	2b0f      	cmp	r3, #15
 800e24c:	bfdc      	itt	le
 800e24e:	230a      	movle	r3, #10
 800e250:	fb03 2707 	mlale	r7, r3, r7, r2
 800e254:	e7e3      	b.n	800e21e <_strtod_l+0x23e>
 800e256:	2300      	movs	r3, #0
 800e258:	930a      	str	r3, [sp, #40]	@ 0x28
 800e25a:	2301      	movs	r3, #1
 800e25c:	e77a      	b.n	800e154 <_strtod_l+0x174>
 800e25e:	f04f 0c00 	mov.w	ip, #0
 800e262:	1ca2      	adds	r2, r4, #2
 800e264:	9219      	str	r2, [sp, #100]	@ 0x64
 800e266:	78a2      	ldrb	r2, [r4, #2]
 800e268:	e782      	b.n	800e170 <_strtod_l+0x190>
 800e26a:	f04f 0c01 	mov.w	ip, #1
 800e26e:	e7f8      	b.n	800e262 <_strtod_l+0x282>
 800e270:	0801474c 	.word	0x0801474c
 800e274:	08014544 	.word	0x08014544
 800e278:	7ff00000 	.word	0x7ff00000
 800e27c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e27e:	1c51      	adds	r1, r2, #1
 800e280:	9119      	str	r1, [sp, #100]	@ 0x64
 800e282:	7852      	ldrb	r2, [r2, #1]
 800e284:	2a30      	cmp	r2, #48	@ 0x30
 800e286:	d0f9      	beq.n	800e27c <_strtod_l+0x29c>
 800e288:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e28c:	2908      	cmp	r1, #8
 800e28e:	f63f af75 	bhi.w	800e17c <_strtod_l+0x19c>
 800e292:	3a30      	subs	r2, #48	@ 0x30
 800e294:	9209      	str	r2, [sp, #36]	@ 0x24
 800e296:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e298:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e29a:	f04f 080a 	mov.w	r8, #10
 800e29e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e2a0:	1c56      	adds	r6, r2, #1
 800e2a2:	9619      	str	r6, [sp, #100]	@ 0x64
 800e2a4:	7852      	ldrb	r2, [r2, #1]
 800e2a6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e2aa:	f1be 0f09 	cmp.w	lr, #9
 800e2ae:	d939      	bls.n	800e324 <_strtod_l+0x344>
 800e2b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e2b2:	1a76      	subs	r6, r6, r1
 800e2b4:	2e08      	cmp	r6, #8
 800e2b6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e2ba:	dc03      	bgt.n	800e2c4 <_strtod_l+0x2e4>
 800e2bc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e2be:	4588      	cmp	r8, r1
 800e2c0:	bfa8      	it	ge
 800e2c2:	4688      	movge	r8, r1
 800e2c4:	f1bc 0f00 	cmp.w	ip, #0
 800e2c8:	d001      	beq.n	800e2ce <_strtod_l+0x2ee>
 800e2ca:	f1c8 0800 	rsb	r8, r8, #0
 800e2ce:	2d00      	cmp	r5, #0
 800e2d0:	d14e      	bne.n	800e370 <_strtod_l+0x390>
 800e2d2:	9908      	ldr	r1, [sp, #32]
 800e2d4:	4308      	orrs	r0, r1
 800e2d6:	f47f aebc 	bne.w	800e052 <_strtod_l+0x72>
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	f47f aed4 	bne.w	800e088 <_strtod_l+0xa8>
 800e2e0:	2a69      	cmp	r2, #105	@ 0x69
 800e2e2:	d028      	beq.n	800e336 <_strtod_l+0x356>
 800e2e4:	dc25      	bgt.n	800e332 <_strtod_l+0x352>
 800e2e6:	2a49      	cmp	r2, #73	@ 0x49
 800e2e8:	d025      	beq.n	800e336 <_strtod_l+0x356>
 800e2ea:	2a4e      	cmp	r2, #78	@ 0x4e
 800e2ec:	f47f aecc 	bne.w	800e088 <_strtod_l+0xa8>
 800e2f0:	499a      	ldr	r1, [pc, #616]	@ (800e55c <_strtod_l+0x57c>)
 800e2f2:	a819      	add	r0, sp, #100	@ 0x64
 800e2f4:	f003 facc 	bl	8011890 <__match>
 800e2f8:	2800      	cmp	r0, #0
 800e2fa:	f43f aec5 	beq.w	800e088 <_strtod_l+0xa8>
 800e2fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e300:	781b      	ldrb	r3, [r3, #0]
 800e302:	2b28      	cmp	r3, #40	@ 0x28
 800e304:	d12e      	bne.n	800e364 <_strtod_l+0x384>
 800e306:	4996      	ldr	r1, [pc, #600]	@ (800e560 <_strtod_l+0x580>)
 800e308:	aa1c      	add	r2, sp, #112	@ 0x70
 800e30a:	a819      	add	r0, sp, #100	@ 0x64
 800e30c:	f003 fad4 	bl	80118b8 <__hexnan>
 800e310:	2805      	cmp	r0, #5
 800e312:	d127      	bne.n	800e364 <_strtod_l+0x384>
 800e314:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e316:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e31a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e31e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e322:	e696      	b.n	800e052 <_strtod_l+0x72>
 800e324:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e326:	fb08 2101 	mla	r1, r8, r1, r2
 800e32a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e32e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e330:	e7b5      	b.n	800e29e <_strtod_l+0x2be>
 800e332:	2a6e      	cmp	r2, #110	@ 0x6e
 800e334:	e7da      	b.n	800e2ec <_strtod_l+0x30c>
 800e336:	498b      	ldr	r1, [pc, #556]	@ (800e564 <_strtod_l+0x584>)
 800e338:	a819      	add	r0, sp, #100	@ 0x64
 800e33a:	f003 faa9 	bl	8011890 <__match>
 800e33e:	2800      	cmp	r0, #0
 800e340:	f43f aea2 	beq.w	800e088 <_strtod_l+0xa8>
 800e344:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e346:	4988      	ldr	r1, [pc, #544]	@ (800e568 <_strtod_l+0x588>)
 800e348:	3b01      	subs	r3, #1
 800e34a:	a819      	add	r0, sp, #100	@ 0x64
 800e34c:	9319      	str	r3, [sp, #100]	@ 0x64
 800e34e:	f003 fa9f 	bl	8011890 <__match>
 800e352:	b910      	cbnz	r0, 800e35a <_strtod_l+0x37a>
 800e354:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e356:	3301      	adds	r3, #1
 800e358:	9319      	str	r3, [sp, #100]	@ 0x64
 800e35a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800e578 <_strtod_l+0x598>
 800e35e:	f04f 0a00 	mov.w	sl, #0
 800e362:	e676      	b.n	800e052 <_strtod_l+0x72>
 800e364:	4881      	ldr	r0, [pc, #516]	@ (800e56c <_strtod_l+0x58c>)
 800e366:	f002 f94f 	bl	8010608 <nan>
 800e36a:	ec5b ab10 	vmov	sl, fp, d0
 800e36e:	e670      	b.n	800e052 <_strtod_l+0x72>
 800e370:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e372:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800e374:	eba8 0303 	sub.w	r3, r8, r3
 800e378:	f1b9 0f00 	cmp.w	r9, #0
 800e37c:	bf08      	it	eq
 800e37e:	46a9      	moveq	r9, r5
 800e380:	2d10      	cmp	r5, #16
 800e382:	9309      	str	r3, [sp, #36]	@ 0x24
 800e384:	462c      	mov	r4, r5
 800e386:	bfa8      	it	ge
 800e388:	2410      	movge	r4, #16
 800e38a:	f7f2 f8eb 	bl	8000564 <__aeabi_ui2d>
 800e38e:	2d09      	cmp	r5, #9
 800e390:	4682      	mov	sl, r0
 800e392:	468b      	mov	fp, r1
 800e394:	dc13      	bgt.n	800e3be <_strtod_l+0x3de>
 800e396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e398:	2b00      	cmp	r3, #0
 800e39a:	f43f ae5a 	beq.w	800e052 <_strtod_l+0x72>
 800e39e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3a0:	dd78      	ble.n	800e494 <_strtod_l+0x4b4>
 800e3a2:	2b16      	cmp	r3, #22
 800e3a4:	dc5f      	bgt.n	800e466 <_strtod_l+0x486>
 800e3a6:	4972      	ldr	r1, [pc, #456]	@ (800e570 <_strtod_l+0x590>)
 800e3a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e3ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e3b0:	4652      	mov	r2, sl
 800e3b2:	465b      	mov	r3, fp
 800e3b4:	f7f2 f950 	bl	8000658 <__aeabi_dmul>
 800e3b8:	4682      	mov	sl, r0
 800e3ba:	468b      	mov	fp, r1
 800e3bc:	e649      	b.n	800e052 <_strtod_l+0x72>
 800e3be:	4b6c      	ldr	r3, [pc, #432]	@ (800e570 <_strtod_l+0x590>)
 800e3c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e3c4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e3c8:	f7f2 f946 	bl	8000658 <__aeabi_dmul>
 800e3cc:	4682      	mov	sl, r0
 800e3ce:	4638      	mov	r0, r7
 800e3d0:	468b      	mov	fp, r1
 800e3d2:	f7f2 f8c7 	bl	8000564 <__aeabi_ui2d>
 800e3d6:	4602      	mov	r2, r0
 800e3d8:	460b      	mov	r3, r1
 800e3da:	4650      	mov	r0, sl
 800e3dc:	4659      	mov	r1, fp
 800e3de:	f7f1 ff85 	bl	80002ec <__adddf3>
 800e3e2:	2d0f      	cmp	r5, #15
 800e3e4:	4682      	mov	sl, r0
 800e3e6:	468b      	mov	fp, r1
 800e3e8:	ddd5      	ble.n	800e396 <_strtod_l+0x3b6>
 800e3ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3ec:	1b2c      	subs	r4, r5, r4
 800e3ee:	441c      	add	r4, r3
 800e3f0:	2c00      	cmp	r4, #0
 800e3f2:	f340 8093 	ble.w	800e51c <_strtod_l+0x53c>
 800e3f6:	f014 030f 	ands.w	r3, r4, #15
 800e3fa:	d00a      	beq.n	800e412 <_strtod_l+0x432>
 800e3fc:	495c      	ldr	r1, [pc, #368]	@ (800e570 <_strtod_l+0x590>)
 800e3fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e402:	4652      	mov	r2, sl
 800e404:	465b      	mov	r3, fp
 800e406:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e40a:	f7f2 f925 	bl	8000658 <__aeabi_dmul>
 800e40e:	4682      	mov	sl, r0
 800e410:	468b      	mov	fp, r1
 800e412:	f034 040f 	bics.w	r4, r4, #15
 800e416:	d073      	beq.n	800e500 <_strtod_l+0x520>
 800e418:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e41c:	dd49      	ble.n	800e4b2 <_strtod_l+0x4d2>
 800e41e:	2400      	movs	r4, #0
 800e420:	46a0      	mov	r8, r4
 800e422:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e424:	46a1      	mov	r9, r4
 800e426:	9a05      	ldr	r2, [sp, #20]
 800e428:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800e578 <_strtod_l+0x598>
 800e42c:	2322      	movs	r3, #34	@ 0x22
 800e42e:	6013      	str	r3, [r2, #0]
 800e430:	f04f 0a00 	mov.w	sl, #0
 800e434:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e436:	2b00      	cmp	r3, #0
 800e438:	f43f ae0b 	beq.w	800e052 <_strtod_l+0x72>
 800e43c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e43e:	9805      	ldr	r0, [sp, #20]
 800e440:	f003 fb5c 	bl	8011afc <_Bfree>
 800e444:	9805      	ldr	r0, [sp, #20]
 800e446:	4649      	mov	r1, r9
 800e448:	f003 fb58 	bl	8011afc <_Bfree>
 800e44c:	9805      	ldr	r0, [sp, #20]
 800e44e:	4641      	mov	r1, r8
 800e450:	f003 fb54 	bl	8011afc <_Bfree>
 800e454:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e456:	9805      	ldr	r0, [sp, #20]
 800e458:	f003 fb50 	bl	8011afc <_Bfree>
 800e45c:	9805      	ldr	r0, [sp, #20]
 800e45e:	4621      	mov	r1, r4
 800e460:	f003 fb4c 	bl	8011afc <_Bfree>
 800e464:	e5f5      	b.n	800e052 <_strtod_l+0x72>
 800e466:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e468:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e46c:	4293      	cmp	r3, r2
 800e46e:	dbbc      	blt.n	800e3ea <_strtod_l+0x40a>
 800e470:	4c3f      	ldr	r4, [pc, #252]	@ (800e570 <_strtod_l+0x590>)
 800e472:	f1c5 050f 	rsb	r5, r5, #15
 800e476:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e47a:	4652      	mov	r2, sl
 800e47c:	465b      	mov	r3, fp
 800e47e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e482:	f7f2 f8e9 	bl	8000658 <__aeabi_dmul>
 800e486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e488:	1b5d      	subs	r5, r3, r5
 800e48a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e48e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e492:	e78f      	b.n	800e3b4 <_strtod_l+0x3d4>
 800e494:	3316      	adds	r3, #22
 800e496:	dba8      	blt.n	800e3ea <_strtod_l+0x40a>
 800e498:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e49a:	eba3 0808 	sub.w	r8, r3, r8
 800e49e:	4b34      	ldr	r3, [pc, #208]	@ (800e570 <_strtod_l+0x590>)
 800e4a0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e4a4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e4a8:	4650      	mov	r0, sl
 800e4aa:	4659      	mov	r1, fp
 800e4ac:	f7f2 f9fe 	bl	80008ac <__aeabi_ddiv>
 800e4b0:	e782      	b.n	800e3b8 <_strtod_l+0x3d8>
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	4f2f      	ldr	r7, [pc, #188]	@ (800e574 <_strtod_l+0x594>)
 800e4b6:	1124      	asrs	r4, r4, #4
 800e4b8:	4650      	mov	r0, sl
 800e4ba:	4659      	mov	r1, fp
 800e4bc:	461e      	mov	r6, r3
 800e4be:	2c01      	cmp	r4, #1
 800e4c0:	dc21      	bgt.n	800e506 <_strtod_l+0x526>
 800e4c2:	b10b      	cbz	r3, 800e4c8 <_strtod_l+0x4e8>
 800e4c4:	4682      	mov	sl, r0
 800e4c6:	468b      	mov	fp, r1
 800e4c8:	492a      	ldr	r1, [pc, #168]	@ (800e574 <_strtod_l+0x594>)
 800e4ca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e4ce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e4d2:	4652      	mov	r2, sl
 800e4d4:	465b      	mov	r3, fp
 800e4d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4da:	f7f2 f8bd 	bl	8000658 <__aeabi_dmul>
 800e4de:	4b26      	ldr	r3, [pc, #152]	@ (800e578 <_strtod_l+0x598>)
 800e4e0:	460a      	mov	r2, r1
 800e4e2:	400b      	ands	r3, r1
 800e4e4:	4925      	ldr	r1, [pc, #148]	@ (800e57c <_strtod_l+0x59c>)
 800e4e6:	428b      	cmp	r3, r1
 800e4e8:	4682      	mov	sl, r0
 800e4ea:	d898      	bhi.n	800e41e <_strtod_l+0x43e>
 800e4ec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e4f0:	428b      	cmp	r3, r1
 800e4f2:	bf86      	itte	hi
 800e4f4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800e580 <_strtod_l+0x5a0>
 800e4f8:	f04f 3aff 	movhi.w	sl, #4294967295
 800e4fc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e500:	2300      	movs	r3, #0
 800e502:	9308      	str	r3, [sp, #32]
 800e504:	e076      	b.n	800e5f4 <_strtod_l+0x614>
 800e506:	07e2      	lsls	r2, r4, #31
 800e508:	d504      	bpl.n	800e514 <_strtod_l+0x534>
 800e50a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e50e:	f7f2 f8a3 	bl	8000658 <__aeabi_dmul>
 800e512:	2301      	movs	r3, #1
 800e514:	3601      	adds	r6, #1
 800e516:	1064      	asrs	r4, r4, #1
 800e518:	3708      	adds	r7, #8
 800e51a:	e7d0      	b.n	800e4be <_strtod_l+0x4de>
 800e51c:	d0f0      	beq.n	800e500 <_strtod_l+0x520>
 800e51e:	4264      	negs	r4, r4
 800e520:	f014 020f 	ands.w	r2, r4, #15
 800e524:	d00a      	beq.n	800e53c <_strtod_l+0x55c>
 800e526:	4b12      	ldr	r3, [pc, #72]	@ (800e570 <_strtod_l+0x590>)
 800e528:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e52c:	4650      	mov	r0, sl
 800e52e:	4659      	mov	r1, fp
 800e530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e534:	f7f2 f9ba 	bl	80008ac <__aeabi_ddiv>
 800e538:	4682      	mov	sl, r0
 800e53a:	468b      	mov	fp, r1
 800e53c:	1124      	asrs	r4, r4, #4
 800e53e:	d0df      	beq.n	800e500 <_strtod_l+0x520>
 800e540:	2c1f      	cmp	r4, #31
 800e542:	dd1f      	ble.n	800e584 <_strtod_l+0x5a4>
 800e544:	2400      	movs	r4, #0
 800e546:	46a0      	mov	r8, r4
 800e548:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e54a:	46a1      	mov	r9, r4
 800e54c:	9a05      	ldr	r2, [sp, #20]
 800e54e:	2322      	movs	r3, #34	@ 0x22
 800e550:	f04f 0a00 	mov.w	sl, #0
 800e554:	f04f 0b00 	mov.w	fp, #0
 800e558:	6013      	str	r3, [r2, #0]
 800e55a:	e76b      	b.n	800e434 <_strtod_l+0x454>
 800e55c:	08014553 	.word	0x08014553
 800e560:	08014738 	.word	0x08014738
 800e564:	0801454b 	.word	0x0801454b
 800e568:	080145fb 	.word	0x080145fb
 800e56c:	08014543 	.word	0x08014543
 800e570:	080147c0 	.word	0x080147c0
 800e574:	08014798 	.word	0x08014798
 800e578:	7ff00000 	.word	0x7ff00000
 800e57c:	7ca00000 	.word	0x7ca00000
 800e580:	7fefffff 	.word	0x7fefffff
 800e584:	f014 0310 	ands.w	r3, r4, #16
 800e588:	bf18      	it	ne
 800e58a:	236a      	movne	r3, #106	@ 0x6a
 800e58c:	4ea9      	ldr	r6, [pc, #676]	@ (800e834 <_strtod_l+0x854>)
 800e58e:	9308      	str	r3, [sp, #32]
 800e590:	4650      	mov	r0, sl
 800e592:	4659      	mov	r1, fp
 800e594:	2300      	movs	r3, #0
 800e596:	07e7      	lsls	r7, r4, #31
 800e598:	d504      	bpl.n	800e5a4 <_strtod_l+0x5c4>
 800e59a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e59e:	f7f2 f85b 	bl	8000658 <__aeabi_dmul>
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	1064      	asrs	r4, r4, #1
 800e5a6:	f106 0608 	add.w	r6, r6, #8
 800e5aa:	d1f4      	bne.n	800e596 <_strtod_l+0x5b6>
 800e5ac:	b10b      	cbz	r3, 800e5b2 <_strtod_l+0x5d2>
 800e5ae:	4682      	mov	sl, r0
 800e5b0:	468b      	mov	fp, r1
 800e5b2:	9b08      	ldr	r3, [sp, #32]
 800e5b4:	b1b3      	cbz	r3, 800e5e4 <_strtod_l+0x604>
 800e5b6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e5ba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	4659      	mov	r1, fp
 800e5c2:	dd0f      	ble.n	800e5e4 <_strtod_l+0x604>
 800e5c4:	2b1f      	cmp	r3, #31
 800e5c6:	dd56      	ble.n	800e676 <_strtod_l+0x696>
 800e5c8:	2b34      	cmp	r3, #52	@ 0x34
 800e5ca:	bfde      	ittt	le
 800e5cc:	f04f 33ff 	movle.w	r3, #4294967295
 800e5d0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e5d4:	4093      	lslle	r3, r2
 800e5d6:	f04f 0a00 	mov.w	sl, #0
 800e5da:	bfcc      	ite	gt
 800e5dc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e5e0:	ea03 0b01 	andle.w	fp, r3, r1
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	4650      	mov	r0, sl
 800e5ea:	4659      	mov	r1, fp
 800e5ec:	f7f2 fa9c 	bl	8000b28 <__aeabi_dcmpeq>
 800e5f0:	2800      	cmp	r0, #0
 800e5f2:	d1a7      	bne.n	800e544 <_strtod_l+0x564>
 800e5f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e5f6:	9300      	str	r3, [sp, #0]
 800e5f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e5fa:	9805      	ldr	r0, [sp, #20]
 800e5fc:	462b      	mov	r3, r5
 800e5fe:	464a      	mov	r2, r9
 800e600:	f003 fae4 	bl	8011bcc <__s2b>
 800e604:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e606:	2800      	cmp	r0, #0
 800e608:	f43f af09 	beq.w	800e41e <_strtod_l+0x43e>
 800e60c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e60e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e610:	2a00      	cmp	r2, #0
 800e612:	eba3 0308 	sub.w	r3, r3, r8
 800e616:	bfa8      	it	ge
 800e618:	2300      	movge	r3, #0
 800e61a:	9312      	str	r3, [sp, #72]	@ 0x48
 800e61c:	2400      	movs	r4, #0
 800e61e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e622:	9316      	str	r3, [sp, #88]	@ 0x58
 800e624:	46a0      	mov	r8, r4
 800e626:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e628:	9805      	ldr	r0, [sp, #20]
 800e62a:	6859      	ldr	r1, [r3, #4]
 800e62c:	f003 fa26 	bl	8011a7c <_Balloc>
 800e630:	4681      	mov	r9, r0
 800e632:	2800      	cmp	r0, #0
 800e634:	f43f aef7 	beq.w	800e426 <_strtod_l+0x446>
 800e638:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e63a:	691a      	ldr	r2, [r3, #16]
 800e63c:	3202      	adds	r2, #2
 800e63e:	f103 010c 	add.w	r1, r3, #12
 800e642:	0092      	lsls	r2, r2, #2
 800e644:	300c      	adds	r0, #12
 800e646:	f001 ffcf 	bl	80105e8 <memcpy>
 800e64a:	ec4b ab10 	vmov	d0, sl, fp
 800e64e:	9805      	ldr	r0, [sp, #20]
 800e650:	aa1c      	add	r2, sp, #112	@ 0x70
 800e652:	a91b      	add	r1, sp, #108	@ 0x6c
 800e654:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e658:	f003 fdec 	bl	8012234 <__d2b>
 800e65c:	901a      	str	r0, [sp, #104]	@ 0x68
 800e65e:	2800      	cmp	r0, #0
 800e660:	f43f aee1 	beq.w	800e426 <_strtod_l+0x446>
 800e664:	9805      	ldr	r0, [sp, #20]
 800e666:	2101      	movs	r1, #1
 800e668:	f003 fb46 	bl	8011cf8 <__i2b>
 800e66c:	4680      	mov	r8, r0
 800e66e:	b948      	cbnz	r0, 800e684 <_strtod_l+0x6a4>
 800e670:	f04f 0800 	mov.w	r8, #0
 800e674:	e6d7      	b.n	800e426 <_strtod_l+0x446>
 800e676:	f04f 32ff 	mov.w	r2, #4294967295
 800e67a:	fa02 f303 	lsl.w	r3, r2, r3
 800e67e:	ea03 0a0a 	and.w	sl, r3, sl
 800e682:	e7af      	b.n	800e5e4 <_strtod_l+0x604>
 800e684:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e686:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e688:	2d00      	cmp	r5, #0
 800e68a:	bfab      	itete	ge
 800e68c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e68e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e690:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e692:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e694:	bfac      	ite	ge
 800e696:	18ef      	addge	r7, r5, r3
 800e698:	1b5e      	sublt	r6, r3, r5
 800e69a:	9b08      	ldr	r3, [sp, #32]
 800e69c:	1aed      	subs	r5, r5, r3
 800e69e:	4415      	add	r5, r2
 800e6a0:	4b65      	ldr	r3, [pc, #404]	@ (800e838 <_strtod_l+0x858>)
 800e6a2:	3d01      	subs	r5, #1
 800e6a4:	429d      	cmp	r5, r3
 800e6a6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e6aa:	da50      	bge.n	800e74e <_strtod_l+0x76e>
 800e6ac:	1b5b      	subs	r3, r3, r5
 800e6ae:	2b1f      	cmp	r3, #31
 800e6b0:	eba2 0203 	sub.w	r2, r2, r3
 800e6b4:	f04f 0101 	mov.w	r1, #1
 800e6b8:	dc3d      	bgt.n	800e736 <_strtod_l+0x756>
 800e6ba:	fa01 f303 	lsl.w	r3, r1, r3
 800e6be:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	9310      	str	r3, [sp, #64]	@ 0x40
 800e6c4:	18bd      	adds	r5, r7, r2
 800e6c6:	9b08      	ldr	r3, [sp, #32]
 800e6c8:	42af      	cmp	r7, r5
 800e6ca:	4416      	add	r6, r2
 800e6cc:	441e      	add	r6, r3
 800e6ce:	463b      	mov	r3, r7
 800e6d0:	bfa8      	it	ge
 800e6d2:	462b      	movge	r3, r5
 800e6d4:	42b3      	cmp	r3, r6
 800e6d6:	bfa8      	it	ge
 800e6d8:	4633      	movge	r3, r6
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	bfc2      	ittt	gt
 800e6de:	1aed      	subgt	r5, r5, r3
 800e6e0:	1af6      	subgt	r6, r6, r3
 800e6e2:	1aff      	subgt	r7, r7, r3
 800e6e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	dd16      	ble.n	800e718 <_strtod_l+0x738>
 800e6ea:	4641      	mov	r1, r8
 800e6ec:	9805      	ldr	r0, [sp, #20]
 800e6ee:	461a      	mov	r2, r3
 800e6f0:	f003 fbba 	bl	8011e68 <__pow5mult>
 800e6f4:	4680      	mov	r8, r0
 800e6f6:	2800      	cmp	r0, #0
 800e6f8:	d0ba      	beq.n	800e670 <_strtod_l+0x690>
 800e6fa:	4601      	mov	r1, r0
 800e6fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e6fe:	9805      	ldr	r0, [sp, #20]
 800e700:	f003 fb10 	bl	8011d24 <__multiply>
 800e704:	900a      	str	r0, [sp, #40]	@ 0x28
 800e706:	2800      	cmp	r0, #0
 800e708:	f43f ae8d 	beq.w	800e426 <_strtod_l+0x446>
 800e70c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e70e:	9805      	ldr	r0, [sp, #20]
 800e710:	f003 f9f4 	bl	8011afc <_Bfree>
 800e714:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e716:	931a      	str	r3, [sp, #104]	@ 0x68
 800e718:	2d00      	cmp	r5, #0
 800e71a:	dc1d      	bgt.n	800e758 <_strtod_l+0x778>
 800e71c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e71e:	2b00      	cmp	r3, #0
 800e720:	dd23      	ble.n	800e76a <_strtod_l+0x78a>
 800e722:	4649      	mov	r1, r9
 800e724:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e726:	9805      	ldr	r0, [sp, #20]
 800e728:	f003 fb9e 	bl	8011e68 <__pow5mult>
 800e72c:	4681      	mov	r9, r0
 800e72e:	b9e0      	cbnz	r0, 800e76a <_strtod_l+0x78a>
 800e730:	f04f 0900 	mov.w	r9, #0
 800e734:	e677      	b.n	800e426 <_strtod_l+0x446>
 800e736:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e73a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e73e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e742:	35e2      	adds	r5, #226	@ 0xe2
 800e744:	fa01 f305 	lsl.w	r3, r1, r5
 800e748:	9310      	str	r3, [sp, #64]	@ 0x40
 800e74a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e74c:	e7ba      	b.n	800e6c4 <_strtod_l+0x6e4>
 800e74e:	2300      	movs	r3, #0
 800e750:	9310      	str	r3, [sp, #64]	@ 0x40
 800e752:	2301      	movs	r3, #1
 800e754:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e756:	e7b5      	b.n	800e6c4 <_strtod_l+0x6e4>
 800e758:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e75a:	9805      	ldr	r0, [sp, #20]
 800e75c:	462a      	mov	r2, r5
 800e75e:	f003 fbdd 	bl	8011f1c <__lshift>
 800e762:	901a      	str	r0, [sp, #104]	@ 0x68
 800e764:	2800      	cmp	r0, #0
 800e766:	d1d9      	bne.n	800e71c <_strtod_l+0x73c>
 800e768:	e65d      	b.n	800e426 <_strtod_l+0x446>
 800e76a:	2e00      	cmp	r6, #0
 800e76c:	dd07      	ble.n	800e77e <_strtod_l+0x79e>
 800e76e:	4649      	mov	r1, r9
 800e770:	9805      	ldr	r0, [sp, #20]
 800e772:	4632      	mov	r2, r6
 800e774:	f003 fbd2 	bl	8011f1c <__lshift>
 800e778:	4681      	mov	r9, r0
 800e77a:	2800      	cmp	r0, #0
 800e77c:	d0d8      	beq.n	800e730 <_strtod_l+0x750>
 800e77e:	2f00      	cmp	r7, #0
 800e780:	dd08      	ble.n	800e794 <_strtod_l+0x7b4>
 800e782:	4641      	mov	r1, r8
 800e784:	9805      	ldr	r0, [sp, #20]
 800e786:	463a      	mov	r2, r7
 800e788:	f003 fbc8 	bl	8011f1c <__lshift>
 800e78c:	4680      	mov	r8, r0
 800e78e:	2800      	cmp	r0, #0
 800e790:	f43f ae49 	beq.w	800e426 <_strtod_l+0x446>
 800e794:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e796:	9805      	ldr	r0, [sp, #20]
 800e798:	464a      	mov	r2, r9
 800e79a:	f003 fc47 	bl	801202c <__mdiff>
 800e79e:	4604      	mov	r4, r0
 800e7a0:	2800      	cmp	r0, #0
 800e7a2:	f43f ae40 	beq.w	800e426 <_strtod_l+0x446>
 800e7a6:	68c3      	ldr	r3, [r0, #12]
 800e7a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	60c3      	str	r3, [r0, #12]
 800e7ae:	4641      	mov	r1, r8
 800e7b0:	f003 fc20 	bl	8011ff4 <__mcmp>
 800e7b4:	2800      	cmp	r0, #0
 800e7b6:	da45      	bge.n	800e844 <_strtod_l+0x864>
 800e7b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e7ba:	ea53 030a 	orrs.w	r3, r3, sl
 800e7be:	d16b      	bne.n	800e898 <_strtod_l+0x8b8>
 800e7c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d167      	bne.n	800e898 <_strtod_l+0x8b8>
 800e7c8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e7cc:	0d1b      	lsrs	r3, r3, #20
 800e7ce:	051b      	lsls	r3, r3, #20
 800e7d0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e7d4:	d960      	bls.n	800e898 <_strtod_l+0x8b8>
 800e7d6:	6963      	ldr	r3, [r4, #20]
 800e7d8:	b913      	cbnz	r3, 800e7e0 <_strtod_l+0x800>
 800e7da:	6923      	ldr	r3, [r4, #16]
 800e7dc:	2b01      	cmp	r3, #1
 800e7de:	dd5b      	ble.n	800e898 <_strtod_l+0x8b8>
 800e7e0:	4621      	mov	r1, r4
 800e7e2:	2201      	movs	r2, #1
 800e7e4:	9805      	ldr	r0, [sp, #20]
 800e7e6:	f003 fb99 	bl	8011f1c <__lshift>
 800e7ea:	4641      	mov	r1, r8
 800e7ec:	4604      	mov	r4, r0
 800e7ee:	f003 fc01 	bl	8011ff4 <__mcmp>
 800e7f2:	2800      	cmp	r0, #0
 800e7f4:	dd50      	ble.n	800e898 <_strtod_l+0x8b8>
 800e7f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e7fa:	9a08      	ldr	r2, [sp, #32]
 800e7fc:	0d1b      	lsrs	r3, r3, #20
 800e7fe:	051b      	lsls	r3, r3, #20
 800e800:	2a00      	cmp	r2, #0
 800e802:	d06a      	beq.n	800e8da <_strtod_l+0x8fa>
 800e804:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e808:	d867      	bhi.n	800e8da <_strtod_l+0x8fa>
 800e80a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e80e:	f67f ae9d 	bls.w	800e54c <_strtod_l+0x56c>
 800e812:	4b0a      	ldr	r3, [pc, #40]	@ (800e83c <_strtod_l+0x85c>)
 800e814:	4650      	mov	r0, sl
 800e816:	4659      	mov	r1, fp
 800e818:	2200      	movs	r2, #0
 800e81a:	f7f1 ff1d 	bl	8000658 <__aeabi_dmul>
 800e81e:	4b08      	ldr	r3, [pc, #32]	@ (800e840 <_strtod_l+0x860>)
 800e820:	400b      	ands	r3, r1
 800e822:	4682      	mov	sl, r0
 800e824:	468b      	mov	fp, r1
 800e826:	2b00      	cmp	r3, #0
 800e828:	f47f ae08 	bne.w	800e43c <_strtod_l+0x45c>
 800e82c:	9a05      	ldr	r2, [sp, #20]
 800e82e:	2322      	movs	r3, #34	@ 0x22
 800e830:	6013      	str	r3, [r2, #0]
 800e832:	e603      	b.n	800e43c <_strtod_l+0x45c>
 800e834:	08014760 	.word	0x08014760
 800e838:	fffffc02 	.word	0xfffffc02
 800e83c:	39500000 	.word	0x39500000
 800e840:	7ff00000 	.word	0x7ff00000
 800e844:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e848:	d165      	bne.n	800e916 <_strtod_l+0x936>
 800e84a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e84c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e850:	b35a      	cbz	r2, 800e8aa <_strtod_l+0x8ca>
 800e852:	4a9f      	ldr	r2, [pc, #636]	@ (800ead0 <_strtod_l+0xaf0>)
 800e854:	4293      	cmp	r3, r2
 800e856:	d12b      	bne.n	800e8b0 <_strtod_l+0x8d0>
 800e858:	9b08      	ldr	r3, [sp, #32]
 800e85a:	4651      	mov	r1, sl
 800e85c:	b303      	cbz	r3, 800e8a0 <_strtod_l+0x8c0>
 800e85e:	4b9d      	ldr	r3, [pc, #628]	@ (800ead4 <_strtod_l+0xaf4>)
 800e860:	465a      	mov	r2, fp
 800e862:	4013      	ands	r3, r2
 800e864:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e868:	f04f 32ff 	mov.w	r2, #4294967295
 800e86c:	d81b      	bhi.n	800e8a6 <_strtod_l+0x8c6>
 800e86e:	0d1b      	lsrs	r3, r3, #20
 800e870:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e874:	fa02 f303 	lsl.w	r3, r2, r3
 800e878:	4299      	cmp	r1, r3
 800e87a:	d119      	bne.n	800e8b0 <_strtod_l+0x8d0>
 800e87c:	4b96      	ldr	r3, [pc, #600]	@ (800ead8 <_strtod_l+0xaf8>)
 800e87e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e880:	429a      	cmp	r2, r3
 800e882:	d102      	bne.n	800e88a <_strtod_l+0x8aa>
 800e884:	3101      	adds	r1, #1
 800e886:	f43f adce 	beq.w	800e426 <_strtod_l+0x446>
 800e88a:	4b92      	ldr	r3, [pc, #584]	@ (800ead4 <_strtod_l+0xaf4>)
 800e88c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e88e:	401a      	ands	r2, r3
 800e890:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e894:	f04f 0a00 	mov.w	sl, #0
 800e898:	9b08      	ldr	r3, [sp, #32]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d1b9      	bne.n	800e812 <_strtod_l+0x832>
 800e89e:	e5cd      	b.n	800e43c <_strtod_l+0x45c>
 800e8a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e8a4:	e7e8      	b.n	800e878 <_strtod_l+0x898>
 800e8a6:	4613      	mov	r3, r2
 800e8a8:	e7e6      	b.n	800e878 <_strtod_l+0x898>
 800e8aa:	ea53 030a 	orrs.w	r3, r3, sl
 800e8ae:	d0a2      	beq.n	800e7f6 <_strtod_l+0x816>
 800e8b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e8b2:	b1db      	cbz	r3, 800e8ec <_strtod_l+0x90c>
 800e8b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e8b6:	4213      	tst	r3, r2
 800e8b8:	d0ee      	beq.n	800e898 <_strtod_l+0x8b8>
 800e8ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8bc:	9a08      	ldr	r2, [sp, #32]
 800e8be:	4650      	mov	r0, sl
 800e8c0:	4659      	mov	r1, fp
 800e8c2:	b1bb      	cbz	r3, 800e8f4 <_strtod_l+0x914>
 800e8c4:	f7ff fb6e 	bl	800dfa4 <sulp>
 800e8c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e8cc:	ec53 2b10 	vmov	r2, r3, d0
 800e8d0:	f7f1 fd0c 	bl	80002ec <__adddf3>
 800e8d4:	4682      	mov	sl, r0
 800e8d6:	468b      	mov	fp, r1
 800e8d8:	e7de      	b.n	800e898 <_strtod_l+0x8b8>
 800e8da:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e8de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e8e2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e8e6:	f04f 3aff 	mov.w	sl, #4294967295
 800e8ea:	e7d5      	b.n	800e898 <_strtod_l+0x8b8>
 800e8ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e8ee:	ea13 0f0a 	tst.w	r3, sl
 800e8f2:	e7e1      	b.n	800e8b8 <_strtod_l+0x8d8>
 800e8f4:	f7ff fb56 	bl	800dfa4 <sulp>
 800e8f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e8fc:	ec53 2b10 	vmov	r2, r3, d0
 800e900:	f7f1 fcf2 	bl	80002e8 <__aeabi_dsub>
 800e904:	2200      	movs	r2, #0
 800e906:	2300      	movs	r3, #0
 800e908:	4682      	mov	sl, r0
 800e90a:	468b      	mov	fp, r1
 800e90c:	f7f2 f90c 	bl	8000b28 <__aeabi_dcmpeq>
 800e910:	2800      	cmp	r0, #0
 800e912:	d0c1      	beq.n	800e898 <_strtod_l+0x8b8>
 800e914:	e61a      	b.n	800e54c <_strtod_l+0x56c>
 800e916:	4641      	mov	r1, r8
 800e918:	4620      	mov	r0, r4
 800e91a:	f003 fce3 	bl	80122e4 <__ratio>
 800e91e:	ec57 6b10 	vmov	r6, r7, d0
 800e922:	2200      	movs	r2, #0
 800e924:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e928:	4630      	mov	r0, r6
 800e92a:	4639      	mov	r1, r7
 800e92c:	f7f2 f910 	bl	8000b50 <__aeabi_dcmple>
 800e930:	2800      	cmp	r0, #0
 800e932:	d06f      	beq.n	800ea14 <_strtod_l+0xa34>
 800e934:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e936:	2b00      	cmp	r3, #0
 800e938:	d17a      	bne.n	800ea30 <_strtod_l+0xa50>
 800e93a:	f1ba 0f00 	cmp.w	sl, #0
 800e93e:	d158      	bne.n	800e9f2 <_strtod_l+0xa12>
 800e940:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e942:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e946:	2b00      	cmp	r3, #0
 800e948:	d15a      	bne.n	800ea00 <_strtod_l+0xa20>
 800e94a:	4b64      	ldr	r3, [pc, #400]	@ (800eadc <_strtod_l+0xafc>)
 800e94c:	2200      	movs	r2, #0
 800e94e:	4630      	mov	r0, r6
 800e950:	4639      	mov	r1, r7
 800e952:	f7f2 f8f3 	bl	8000b3c <__aeabi_dcmplt>
 800e956:	2800      	cmp	r0, #0
 800e958:	d159      	bne.n	800ea0e <_strtod_l+0xa2e>
 800e95a:	4630      	mov	r0, r6
 800e95c:	4639      	mov	r1, r7
 800e95e:	4b60      	ldr	r3, [pc, #384]	@ (800eae0 <_strtod_l+0xb00>)
 800e960:	2200      	movs	r2, #0
 800e962:	f7f1 fe79 	bl	8000658 <__aeabi_dmul>
 800e966:	4606      	mov	r6, r0
 800e968:	460f      	mov	r7, r1
 800e96a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e96e:	9606      	str	r6, [sp, #24]
 800e970:	9307      	str	r3, [sp, #28]
 800e972:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e976:	4d57      	ldr	r5, [pc, #348]	@ (800ead4 <_strtod_l+0xaf4>)
 800e978:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e97c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e97e:	401d      	ands	r5, r3
 800e980:	4b58      	ldr	r3, [pc, #352]	@ (800eae4 <_strtod_l+0xb04>)
 800e982:	429d      	cmp	r5, r3
 800e984:	f040 80b2 	bne.w	800eaec <_strtod_l+0xb0c>
 800e988:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e98a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e98e:	ec4b ab10 	vmov	d0, sl, fp
 800e992:	f003 fbdf 	bl	8012154 <__ulp>
 800e996:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e99a:	ec51 0b10 	vmov	r0, r1, d0
 800e99e:	f7f1 fe5b 	bl	8000658 <__aeabi_dmul>
 800e9a2:	4652      	mov	r2, sl
 800e9a4:	465b      	mov	r3, fp
 800e9a6:	f7f1 fca1 	bl	80002ec <__adddf3>
 800e9aa:	460b      	mov	r3, r1
 800e9ac:	4949      	ldr	r1, [pc, #292]	@ (800ead4 <_strtod_l+0xaf4>)
 800e9ae:	4a4e      	ldr	r2, [pc, #312]	@ (800eae8 <_strtod_l+0xb08>)
 800e9b0:	4019      	ands	r1, r3
 800e9b2:	4291      	cmp	r1, r2
 800e9b4:	4682      	mov	sl, r0
 800e9b6:	d942      	bls.n	800ea3e <_strtod_l+0xa5e>
 800e9b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e9ba:	4b47      	ldr	r3, [pc, #284]	@ (800ead8 <_strtod_l+0xaf8>)
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d103      	bne.n	800e9c8 <_strtod_l+0x9e8>
 800e9c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e9c2:	3301      	adds	r3, #1
 800e9c4:	f43f ad2f 	beq.w	800e426 <_strtod_l+0x446>
 800e9c8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ead8 <_strtod_l+0xaf8>
 800e9cc:	f04f 3aff 	mov.w	sl, #4294967295
 800e9d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e9d2:	9805      	ldr	r0, [sp, #20]
 800e9d4:	f003 f892 	bl	8011afc <_Bfree>
 800e9d8:	9805      	ldr	r0, [sp, #20]
 800e9da:	4649      	mov	r1, r9
 800e9dc:	f003 f88e 	bl	8011afc <_Bfree>
 800e9e0:	9805      	ldr	r0, [sp, #20]
 800e9e2:	4641      	mov	r1, r8
 800e9e4:	f003 f88a 	bl	8011afc <_Bfree>
 800e9e8:	9805      	ldr	r0, [sp, #20]
 800e9ea:	4621      	mov	r1, r4
 800e9ec:	f003 f886 	bl	8011afc <_Bfree>
 800e9f0:	e619      	b.n	800e626 <_strtod_l+0x646>
 800e9f2:	f1ba 0f01 	cmp.w	sl, #1
 800e9f6:	d103      	bne.n	800ea00 <_strtod_l+0xa20>
 800e9f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	f43f ada6 	beq.w	800e54c <_strtod_l+0x56c>
 800ea00:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800eab0 <_strtod_l+0xad0>
 800ea04:	4f35      	ldr	r7, [pc, #212]	@ (800eadc <_strtod_l+0xafc>)
 800ea06:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ea0a:	2600      	movs	r6, #0
 800ea0c:	e7b1      	b.n	800e972 <_strtod_l+0x992>
 800ea0e:	4f34      	ldr	r7, [pc, #208]	@ (800eae0 <_strtod_l+0xb00>)
 800ea10:	2600      	movs	r6, #0
 800ea12:	e7aa      	b.n	800e96a <_strtod_l+0x98a>
 800ea14:	4b32      	ldr	r3, [pc, #200]	@ (800eae0 <_strtod_l+0xb00>)
 800ea16:	4630      	mov	r0, r6
 800ea18:	4639      	mov	r1, r7
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	f7f1 fe1c 	bl	8000658 <__aeabi_dmul>
 800ea20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea22:	4606      	mov	r6, r0
 800ea24:	460f      	mov	r7, r1
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d09f      	beq.n	800e96a <_strtod_l+0x98a>
 800ea2a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ea2e:	e7a0      	b.n	800e972 <_strtod_l+0x992>
 800ea30:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800eab8 <_strtod_l+0xad8>
 800ea34:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ea38:	ec57 6b17 	vmov	r6, r7, d7
 800ea3c:	e799      	b.n	800e972 <_strtod_l+0x992>
 800ea3e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ea42:	9b08      	ldr	r3, [sp, #32]
 800ea44:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d1c1      	bne.n	800e9d0 <_strtod_l+0x9f0>
 800ea4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ea50:	0d1b      	lsrs	r3, r3, #20
 800ea52:	051b      	lsls	r3, r3, #20
 800ea54:	429d      	cmp	r5, r3
 800ea56:	d1bb      	bne.n	800e9d0 <_strtod_l+0x9f0>
 800ea58:	4630      	mov	r0, r6
 800ea5a:	4639      	mov	r1, r7
 800ea5c:	f7f2 f95c 	bl	8000d18 <__aeabi_d2lz>
 800ea60:	f7f1 fdcc 	bl	80005fc <__aeabi_l2d>
 800ea64:	4602      	mov	r2, r0
 800ea66:	460b      	mov	r3, r1
 800ea68:	4630      	mov	r0, r6
 800ea6a:	4639      	mov	r1, r7
 800ea6c:	f7f1 fc3c 	bl	80002e8 <__aeabi_dsub>
 800ea70:	460b      	mov	r3, r1
 800ea72:	4602      	mov	r2, r0
 800ea74:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ea78:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ea7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea7e:	ea46 060a 	orr.w	r6, r6, sl
 800ea82:	431e      	orrs	r6, r3
 800ea84:	d06f      	beq.n	800eb66 <_strtod_l+0xb86>
 800ea86:	a30e      	add	r3, pc, #56	@ (adr r3, 800eac0 <_strtod_l+0xae0>)
 800ea88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea8c:	f7f2 f856 	bl	8000b3c <__aeabi_dcmplt>
 800ea90:	2800      	cmp	r0, #0
 800ea92:	f47f acd3 	bne.w	800e43c <_strtod_l+0x45c>
 800ea96:	a30c      	add	r3, pc, #48	@ (adr r3, 800eac8 <_strtod_l+0xae8>)
 800ea98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eaa0:	f7f2 f86a 	bl	8000b78 <__aeabi_dcmpgt>
 800eaa4:	2800      	cmp	r0, #0
 800eaa6:	d093      	beq.n	800e9d0 <_strtod_l+0x9f0>
 800eaa8:	e4c8      	b.n	800e43c <_strtod_l+0x45c>
 800eaaa:	bf00      	nop
 800eaac:	f3af 8000 	nop.w
 800eab0:	00000000 	.word	0x00000000
 800eab4:	bff00000 	.word	0xbff00000
 800eab8:	00000000 	.word	0x00000000
 800eabc:	3ff00000 	.word	0x3ff00000
 800eac0:	94a03595 	.word	0x94a03595
 800eac4:	3fdfffff 	.word	0x3fdfffff
 800eac8:	35afe535 	.word	0x35afe535
 800eacc:	3fe00000 	.word	0x3fe00000
 800ead0:	000fffff 	.word	0x000fffff
 800ead4:	7ff00000 	.word	0x7ff00000
 800ead8:	7fefffff 	.word	0x7fefffff
 800eadc:	3ff00000 	.word	0x3ff00000
 800eae0:	3fe00000 	.word	0x3fe00000
 800eae4:	7fe00000 	.word	0x7fe00000
 800eae8:	7c9fffff 	.word	0x7c9fffff
 800eaec:	9b08      	ldr	r3, [sp, #32]
 800eaee:	b323      	cbz	r3, 800eb3a <_strtod_l+0xb5a>
 800eaf0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800eaf4:	d821      	bhi.n	800eb3a <_strtod_l+0xb5a>
 800eaf6:	a328      	add	r3, pc, #160	@ (adr r3, 800eb98 <_strtod_l+0xbb8>)
 800eaf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eafc:	4630      	mov	r0, r6
 800eafe:	4639      	mov	r1, r7
 800eb00:	f7f2 f826 	bl	8000b50 <__aeabi_dcmple>
 800eb04:	b1a0      	cbz	r0, 800eb30 <_strtod_l+0xb50>
 800eb06:	4639      	mov	r1, r7
 800eb08:	4630      	mov	r0, r6
 800eb0a:	f7f2 f87d 	bl	8000c08 <__aeabi_d2uiz>
 800eb0e:	2801      	cmp	r0, #1
 800eb10:	bf38      	it	cc
 800eb12:	2001      	movcc	r0, #1
 800eb14:	f7f1 fd26 	bl	8000564 <__aeabi_ui2d>
 800eb18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb1a:	4606      	mov	r6, r0
 800eb1c:	460f      	mov	r7, r1
 800eb1e:	b9fb      	cbnz	r3, 800eb60 <_strtod_l+0xb80>
 800eb20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800eb24:	9014      	str	r0, [sp, #80]	@ 0x50
 800eb26:	9315      	str	r3, [sp, #84]	@ 0x54
 800eb28:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800eb2c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800eb30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800eb32:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800eb36:	1b5b      	subs	r3, r3, r5
 800eb38:	9311      	str	r3, [sp, #68]	@ 0x44
 800eb3a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800eb3e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800eb42:	f003 fb07 	bl	8012154 <__ulp>
 800eb46:	4650      	mov	r0, sl
 800eb48:	ec53 2b10 	vmov	r2, r3, d0
 800eb4c:	4659      	mov	r1, fp
 800eb4e:	f7f1 fd83 	bl	8000658 <__aeabi_dmul>
 800eb52:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800eb56:	f7f1 fbc9 	bl	80002ec <__adddf3>
 800eb5a:	4682      	mov	sl, r0
 800eb5c:	468b      	mov	fp, r1
 800eb5e:	e770      	b.n	800ea42 <_strtod_l+0xa62>
 800eb60:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800eb64:	e7e0      	b.n	800eb28 <_strtod_l+0xb48>
 800eb66:	a30e      	add	r3, pc, #56	@ (adr r3, 800eba0 <_strtod_l+0xbc0>)
 800eb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb6c:	f7f1 ffe6 	bl	8000b3c <__aeabi_dcmplt>
 800eb70:	e798      	b.n	800eaa4 <_strtod_l+0xac4>
 800eb72:	2300      	movs	r3, #0
 800eb74:	930e      	str	r3, [sp, #56]	@ 0x38
 800eb76:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800eb78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eb7a:	6013      	str	r3, [r2, #0]
 800eb7c:	f7ff ba6d 	b.w	800e05a <_strtod_l+0x7a>
 800eb80:	2a65      	cmp	r2, #101	@ 0x65
 800eb82:	f43f ab68 	beq.w	800e256 <_strtod_l+0x276>
 800eb86:	2a45      	cmp	r2, #69	@ 0x45
 800eb88:	f43f ab65 	beq.w	800e256 <_strtod_l+0x276>
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	f7ff bba0 	b.w	800e2d2 <_strtod_l+0x2f2>
 800eb92:	bf00      	nop
 800eb94:	f3af 8000 	nop.w
 800eb98:	ffc00000 	.word	0xffc00000
 800eb9c:	41dfffff 	.word	0x41dfffff
 800eba0:	94a03595 	.word	0x94a03595
 800eba4:	3fcfffff 	.word	0x3fcfffff

0800eba8 <_strtod_r>:
 800eba8:	4b01      	ldr	r3, [pc, #4]	@ (800ebb0 <_strtod_r+0x8>)
 800ebaa:	f7ff ba19 	b.w	800dfe0 <_strtod_l>
 800ebae:	bf00      	nop
 800ebb0:	20000054 	.word	0x20000054

0800ebb4 <strtod>:
 800ebb4:	460a      	mov	r2, r1
 800ebb6:	4601      	mov	r1, r0
 800ebb8:	4802      	ldr	r0, [pc, #8]	@ (800ebc4 <strtod+0x10>)
 800ebba:	4b03      	ldr	r3, [pc, #12]	@ (800ebc8 <strtod+0x14>)
 800ebbc:	6800      	ldr	r0, [r0, #0]
 800ebbe:	f7ff ba0f 	b.w	800dfe0 <_strtod_l>
 800ebc2:	bf00      	nop
 800ebc4:	200001c0 	.word	0x200001c0
 800ebc8:	20000054 	.word	0x20000054

0800ebcc <setenv>:
 800ebcc:	4613      	mov	r3, r2
 800ebce:	460a      	mov	r2, r1
 800ebd0:	4601      	mov	r1, r0
 800ebd2:	4802      	ldr	r0, [pc, #8]	@ (800ebdc <setenv+0x10>)
 800ebd4:	6800      	ldr	r0, [r0, #0]
 800ebd6:	f000 b803 	b.w	800ebe0 <_setenv_r>
 800ebda:	bf00      	nop
 800ebdc:	200001c0 	.word	0x200001c0

0800ebe0 <_setenv_r>:
 800ebe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebe4:	460e      	mov	r6, r1
 800ebe6:	4605      	mov	r5, r0
 800ebe8:	213d      	movs	r1, #61	@ 0x3d
 800ebea:	4630      	mov	r0, r6
 800ebec:	4617      	mov	r7, r2
 800ebee:	4698      	mov	r8, r3
 800ebf0:	f001 fb9c 	bl	801032c <strchr>
 800ebf4:	b130      	cbz	r0, 800ec04 <_setenv_r+0x24>
 800ebf6:	f001 fcc9 	bl	801058c <__errno>
 800ebfa:	2316      	movs	r3, #22
 800ebfc:	6003      	str	r3, [r0, #0]
 800ebfe:	f04f 30ff 	mov.w	r0, #4294967295
 800ec02:	e014      	b.n	800ec2e <_setenv_r+0x4e>
 800ec04:	4628      	mov	r0, r5
 800ec06:	f7f5 fea5 	bl	8004954 <__env_lock>
 800ec0a:	4638      	mov	r0, r7
 800ec0c:	f7f1 fb60 	bl	80002d0 <strlen>
 800ec10:	aa01      	add	r2, sp, #4
 800ec12:	4681      	mov	r9, r0
 800ec14:	4631      	mov	r1, r6
 800ec16:	4628      	mov	r0, r5
 800ec18:	f7ff f8cc 	bl	800ddb4 <_findenv_r>
 800ec1c:	4604      	mov	r4, r0
 800ec1e:	b1a8      	cbz	r0, 800ec4c <_setenv_r+0x6c>
 800ec20:	f1b8 0f00 	cmp.w	r8, #0
 800ec24:	d106      	bne.n	800ec34 <_setenv_r+0x54>
 800ec26:	4628      	mov	r0, r5
 800ec28:	f7f5 fecc 	bl	80049c4 <__env_unlock>
 800ec2c:	2000      	movs	r0, #0
 800ec2e:	b003      	add	sp, #12
 800ec30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec34:	f7f1 fb4c 	bl	80002d0 <strlen>
 800ec38:	4581      	cmp	r9, r0
 800ec3a:	d83a      	bhi.n	800ecb2 <_setenv_r+0xd2>
 800ec3c:	3c01      	subs	r4, #1
 800ec3e:	f817 3b01 	ldrb.w	r3, [r7], #1
 800ec42:	f804 3f01 	strb.w	r3, [r4, #1]!
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d1f9      	bne.n	800ec3e <_setenv_r+0x5e>
 800ec4a:	e7ec      	b.n	800ec26 <_setenv_r+0x46>
 800ec4c:	f8df a0bc 	ldr.w	sl, [pc, #188]	@ 800ed0c <_setenv_r+0x12c>
 800ec50:	f8da 1000 	ldr.w	r1, [sl]
 800ec54:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
 800ec58:	b98b      	cbnz	r3, 800ec7e <_setenv_r+0x9e>
 800ec5a:	4b2b      	ldr	r3, [pc, #172]	@ (800ed08 <_setenv_r+0x128>)
 800ec5c:	681a      	ldr	r2, [r3, #0]
 800ec5e:	f104 0802 	add.w	r8, r4, #2
 800ec62:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800ec66:	b162      	cbz	r2, 800ec82 <_setenv_r+0xa2>
 800ec68:	4642      	mov	r2, r8
 800ec6a:	4628      	mov	r0, r5
 800ec6c:	f003 fbb0 	bl	80123d0 <_realloc_r>
 800ec70:	f8ca 0000 	str.w	r0, [sl]
 800ec74:	b9b0      	cbnz	r0, 800eca4 <_setenv_r+0xc4>
 800ec76:	4628      	mov	r0, r5
 800ec78:	f7f5 fea4 	bl	80049c4 <__env_unlock>
 800ec7c:	e7bf      	b.n	800ebfe <_setenv_r+0x1e>
 800ec7e:	3401      	adds	r4, #1
 800ec80:	e7e8      	b.n	800ec54 <_setenv_r+0x74>
 800ec82:	2201      	movs	r2, #1
 800ec84:	4641      	mov	r1, r8
 800ec86:	4628      	mov	r0, r5
 800ec88:	601a      	str	r2, [r3, #0]
 800ec8a:	f7ff f901 	bl	800de90 <_malloc_r>
 800ec8e:	4683      	mov	fp, r0
 800ec90:	2800      	cmp	r0, #0
 800ec92:	d0f0      	beq.n	800ec76 <_setenv_r+0x96>
 800ec94:	f8da 1000 	ldr.w	r1, [sl]
 800ec98:	f1a8 0208 	sub.w	r2, r8, #8
 800ec9c:	f001 fca4 	bl	80105e8 <memcpy>
 800eca0:	f8ca b000 	str.w	fp, [sl]
 800eca4:	f8da 3000 	ldr.w	r3, [sl]
 800eca8:	4443      	add	r3, r8
 800ecaa:	2200      	movs	r2, #0
 800ecac:	f843 2c04 	str.w	r2, [r3, #-4]
 800ecb0:	9401      	str	r4, [sp, #4]
 800ecb2:	4633      	mov	r3, r6
 800ecb4:	4619      	mov	r1, r3
 800ecb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ecba:	b10a      	cbz	r2, 800ecc0 <_setenv_r+0xe0>
 800ecbc:	2a3d      	cmp	r2, #61	@ 0x3d
 800ecbe:	d1f9      	bne.n	800ecb4 <_setenv_r+0xd4>
 800ecc0:	1b89      	subs	r1, r1, r6
 800ecc2:	4c12      	ldr	r4, [pc, #72]	@ (800ed0c <_setenv_r+0x12c>)
 800ecc4:	f8dd a004 	ldr.w	sl, [sp, #4]
 800ecc8:	f8d4 8000 	ldr.w	r8, [r4]
 800eccc:	4449      	add	r1, r9
 800ecce:	3102      	adds	r1, #2
 800ecd0:	4628      	mov	r0, r5
 800ecd2:	f7ff f8dd 	bl	800de90 <_malloc_r>
 800ecd6:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 800ecda:	2800      	cmp	r0, #0
 800ecdc:	d0cb      	beq.n	800ec76 <_setenv_r+0x96>
 800ecde:	6823      	ldr	r3, [r4, #0]
 800ece0:	9a01      	ldr	r2, [sp, #4]
 800ece2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ece6:	f816 1b01 	ldrb.w	r1, [r6], #1
 800ecea:	7011      	strb	r1, [r2, #0]
 800ecec:	4613      	mov	r3, r2
 800ecee:	3201      	adds	r2, #1
 800ecf0:	b109      	cbz	r1, 800ecf6 <_setenv_r+0x116>
 800ecf2:	293d      	cmp	r1, #61	@ 0x3d
 800ecf4:	d1f7      	bne.n	800ece6 <_setenv_r+0x106>
 800ecf6:	223d      	movs	r2, #61	@ 0x3d
 800ecf8:	701a      	strb	r2, [r3, #0]
 800ecfa:	f817 2b01 	ldrb.w	r2, [r7], #1
 800ecfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ed02:	2a00      	cmp	r2, #0
 800ed04:	d1f9      	bne.n	800ecfa <_setenv_r+0x11a>
 800ed06:	e78e      	b.n	800ec26 <_setenv_r+0x46>
 800ed08:	20000564 	.word	0x20000564
 800ed0c:	20000030 	.word	0x20000030

0800ed10 <__cvt>:
 800ed10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed14:	ec57 6b10 	vmov	r6, r7, d0
 800ed18:	2f00      	cmp	r7, #0
 800ed1a:	460c      	mov	r4, r1
 800ed1c:	4619      	mov	r1, r3
 800ed1e:	463b      	mov	r3, r7
 800ed20:	bfbb      	ittet	lt
 800ed22:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ed26:	461f      	movlt	r7, r3
 800ed28:	2300      	movge	r3, #0
 800ed2a:	232d      	movlt	r3, #45	@ 0x2d
 800ed2c:	700b      	strb	r3, [r1, #0]
 800ed2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ed30:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ed34:	4691      	mov	r9, r2
 800ed36:	f023 0820 	bic.w	r8, r3, #32
 800ed3a:	bfbc      	itt	lt
 800ed3c:	4632      	movlt	r2, r6
 800ed3e:	4616      	movlt	r6, r2
 800ed40:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ed44:	d005      	beq.n	800ed52 <__cvt+0x42>
 800ed46:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ed4a:	d100      	bne.n	800ed4e <__cvt+0x3e>
 800ed4c:	3401      	adds	r4, #1
 800ed4e:	2102      	movs	r1, #2
 800ed50:	e000      	b.n	800ed54 <__cvt+0x44>
 800ed52:	2103      	movs	r1, #3
 800ed54:	ab03      	add	r3, sp, #12
 800ed56:	9301      	str	r3, [sp, #4]
 800ed58:	ab02      	add	r3, sp, #8
 800ed5a:	9300      	str	r3, [sp, #0]
 800ed5c:	ec47 6b10 	vmov	d0, r6, r7
 800ed60:	4653      	mov	r3, sl
 800ed62:	4622      	mov	r2, r4
 800ed64:	f001 fcf0 	bl	8010748 <_dtoa_r>
 800ed68:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ed6c:	4605      	mov	r5, r0
 800ed6e:	d119      	bne.n	800eda4 <__cvt+0x94>
 800ed70:	f019 0f01 	tst.w	r9, #1
 800ed74:	d00e      	beq.n	800ed94 <__cvt+0x84>
 800ed76:	eb00 0904 	add.w	r9, r0, r4
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	4630      	mov	r0, r6
 800ed80:	4639      	mov	r1, r7
 800ed82:	f7f1 fed1 	bl	8000b28 <__aeabi_dcmpeq>
 800ed86:	b108      	cbz	r0, 800ed8c <__cvt+0x7c>
 800ed88:	f8cd 900c 	str.w	r9, [sp, #12]
 800ed8c:	2230      	movs	r2, #48	@ 0x30
 800ed8e:	9b03      	ldr	r3, [sp, #12]
 800ed90:	454b      	cmp	r3, r9
 800ed92:	d31e      	bcc.n	800edd2 <__cvt+0xc2>
 800ed94:	9b03      	ldr	r3, [sp, #12]
 800ed96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ed98:	1b5b      	subs	r3, r3, r5
 800ed9a:	4628      	mov	r0, r5
 800ed9c:	6013      	str	r3, [r2, #0]
 800ed9e:	b004      	add	sp, #16
 800eda0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eda4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800eda8:	eb00 0904 	add.w	r9, r0, r4
 800edac:	d1e5      	bne.n	800ed7a <__cvt+0x6a>
 800edae:	7803      	ldrb	r3, [r0, #0]
 800edb0:	2b30      	cmp	r3, #48	@ 0x30
 800edb2:	d10a      	bne.n	800edca <__cvt+0xba>
 800edb4:	2200      	movs	r2, #0
 800edb6:	2300      	movs	r3, #0
 800edb8:	4630      	mov	r0, r6
 800edba:	4639      	mov	r1, r7
 800edbc:	f7f1 feb4 	bl	8000b28 <__aeabi_dcmpeq>
 800edc0:	b918      	cbnz	r0, 800edca <__cvt+0xba>
 800edc2:	f1c4 0401 	rsb	r4, r4, #1
 800edc6:	f8ca 4000 	str.w	r4, [sl]
 800edca:	f8da 3000 	ldr.w	r3, [sl]
 800edce:	4499      	add	r9, r3
 800edd0:	e7d3      	b.n	800ed7a <__cvt+0x6a>
 800edd2:	1c59      	adds	r1, r3, #1
 800edd4:	9103      	str	r1, [sp, #12]
 800edd6:	701a      	strb	r2, [r3, #0]
 800edd8:	e7d9      	b.n	800ed8e <__cvt+0x7e>

0800edda <__exponent>:
 800edda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eddc:	2900      	cmp	r1, #0
 800edde:	bfba      	itte	lt
 800ede0:	4249      	neglt	r1, r1
 800ede2:	232d      	movlt	r3, #45	@ 0x2d
 800ede4:	232b      	movge	r3, #43	@ 0x2b
 800ede6:	2909      	cmp	r1, #9
 800ede8:	7002      	strb	r2, [r0, #0]
 800edea:	7043      	strb	r3, [r0, #1]
 800edec:	dd29      	ble.n	800ee42 <__exponent+0x68>
 800edee:	f10d 0307 	add.w	r3, sp, #7
 800edf2:	461d      	mov	r5, r3
 800edf4:	270a      	movs	r7, #10
 800edf6:	461a      	mov	r2, r3
 800edf8:	fbb1 f6f7 	udiv	r6, r1, r7
 800edfc:	fb07 1416 	mls	r4, r7, r6, r1
 800ee00:	3430      	adds	r4, #48	@ 0x30
 800ee02:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ee06:	460c      	mov	r4, r1
 800ee08:	2c63      	cmp	r4, #99	@ 0x63
 800ee0a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ee0e:	4631      	mov	r1, r6
 800ee10:	dcf1      	bgt.n	800edf6 <__exponent+0x1c>
 800ee12:	3130      	adds	r1, #48	@ 0x30
 800ee14:	1e94      	subs	r4, r2, #2
 800ee16:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ee1a:	1c41      	adds	r1, r0, #1
 800ee1c:	4623      	mov	r3, r4
 800ee1e:	42ab      	cmp	r3, r5
 800ee20:	d30a      	bcc.n	800ee38 <__exponent+0x5e>
 800ee22:	f10d 0309 	add.w	r3, sp, #9
 800ee26:	1a9b      	subs	r3, r3, r2
 800ee28:	42ac      	cmp	r4, r5
 800ee2a:	bf88      	it	hi
 800ee2c:	2300      	movhi	r3, #0
 800ee2e:	3302      	adds	r3, #2
 800ee30:	4403      	add	r3, r0
 800ee32:	1a18      	subs	r0, r3, r0
 800ee34:	b003      	add	sp, #12
 800ee36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee38:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ee3c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ee40:	e7ed      	b.n	800ee1e <__exponent+0x44>
 800ee42:	2330      	movs	r3, #48	@ 0x30
 800ee44:	3130      	adds	r1, #48	@ 0x30
 800ee46:	7083      	strb	r3, [r0, #2]
 800ee48:	70c1      	strb	r1, [r0, #3]
 800ee4a:	1d03      	adds	r3, r0, #4
 800ee4c:	e7f1      	b.n	800ee32 <__exponent+0x58>
	...

0800ee50 <_printf_float>:
 800ee50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee54:	b08d      	sub	sp, #52	@ 0x34
 800ee56:	460c      	mov	r4, r1
 800ee58:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ee5c:	4616      	mov	r6, r2
 800ee5e:	461f      	mov	r7, r3
 800ee60:	4605      	mov	r5, r0
 800ee62:	f001 faeb 	bl	801043c <_localeconv_r>
 800ee66:	6803      	ldr	r3, [r0, #0]
 800ee68:	9304      	str	r3, [sp, #16]
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f7f1 fa30 	bl	80002d0 <strlen>
 800ee70:	2300      	movs	r3, #0
 800ee72:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee74:	f8d8 3000 	ldr.w	r3, [r8]
 800ee78:	9005      	str	r0, [sp, #20]
 800ee7a:	3307      	adds	r3, #7
 800ee7c:	f023 0307 	bic.w	r3, r3, #7
 800ee80:	f103 0208 	add.w	r2, r3, #8
 800ee84:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ee88:	f8d4 b000 	ldr.w	fp, [r4]
 800ee8c:	f8c8 2000 	str.w	r2, [r8]
 800ee90:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ee94:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ee98:	9307      	str	r3, [sp, #28]
 800ee9a:	f8cd 8018 	str.w	r8, [sp, #24]
 800ee9e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800eea2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eea6:	4b9c      	ldr	r3, [pc, #624]	@ (800f118 <_printf_float+0x2c8>)
 800eea8:	f04f 32ff 	mov.w	r2, #4294967295
 800eeac:	f7f1 fe6e 	bl	8000b8c <__aeabi_dcmpun>
 800eeb0:	bb70      	cbnz	r0, 800ef10 <_printf_float+0xc0>
 800eeb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eeb6:	4b98      	ldr	r3, [pc, #608]	@ (800f118 <_printf_float+0x2c8>)
 800eeb8:	f04f 32ff 	mov.w	r2, #4294967295
 800eebc:	f7f1 fe48 	bl	8000b50 <__aeabi_dcmple>
 800eec0:	bb30      	cbnz	r0, 800ef10 <_printf_float+0xc0>
 800eec2:	2200      	movs	r2, #0
 800eec4:	2300      	movs	r3, #0
 800eec6:	4640      	mov	r0, r8
 800eec8:	4649      	mov	r1, r9
 800eeca:	f7f1 fe37 	bl	8000b3c <__aeabi_dcmplt>
 800eece:	b110      	cbz	r0, 800eed6 <_printf_float+0x86>
 800eed0:	232d      	movs	r3, #45	@ 0x2d
 800eed2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eed6:	4a91      	ldr	r2, [pc, #580]	@ (800f11c <_printf_float+0x2cc>)
 800eed8:	4b91      	ldr	r3, [pc, #580]	@ (800f120 <_printf_float+0x2d0>)
 800eeda:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800eede:	bf8c      	ite	hi
 800eee0:	4690      	movhi	r8, r2
 800eee2:	4698      	movls	r8, r3
 800eee4:	2303      	movs	r3, #3
 800eee6:	6123      	str	r3, [r4, #16]
 800eee8:	f02b 0304 	bic.w	r3, fp, #4
 800eeec:	6023      	str	r3, [r4, #0]
 800eeee:	f04f 0900 	mov.w	r9, #0
 800eef2:	9700      	str	r7, [sp, #0]
 800eef4:	4633      	mov	r3, r6
 800eef6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800eef8:	4621      	mov	r1, r4
 800eefa:	4628      	mov	r0, r5
 800eefc:	f000 f9d2 	bl	800f2a4 <_printf_common>
 800ef00:	3001      	adds	r0, #1
 800ef02:	f040 808d 	bne.w	800f020 <_printf_float+0x1d0>
 800ef06:	f04f 30ff 	mov.w	r0, #4294967295
 800ef0a:	b00d      	add	sp, #52	@ 0x34
 800ef0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef10:	4642      	mov	r2, r8
 800ef12:	464b      	mov	r3, r9
 800ef14:	4640      	mov	r0, r8
 800ef16:	4649      	mov	r1, r9
 800ef18:	f7f1 fe38 	bl	8000b8c <__aeabi_dcmpun>
 800ef1c:	b140      	cbz	r0, 800ef30 <_printf_float+0xe0>
 800ef1e:	464b      	mov	r3, r9
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	bfbc      	itt	lt
 800ef24:	232d      	movlt	r3, #45	@ 0x2d
 800ef26:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ef2a:	4a7e      	ldr	r2, [pc, #504]	@ (800f124 <_printf_float+0x2d4>)
 800ef2c:	4b7e      	ldr	r3, [pc, #504]	@ (800f128 <_printf_float+0x2d8>)
 800ef2e:	e7d4      	b.n	800eeda <_printf_float+0x8a>
 800ef30:	6863      	ldr	r3, [r4, #4]
 800ef32:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ef36:	9206      	str	r2, [sp, #24]
 800ef38:	1c5a      	adds	r2, r3, #1
 800ef3a:	d13b      	bne.n	800efb4 <_printf_float+0x164>
 800ef3c:	2306      	movs	r3, #6
 800ef3e:	6063      	str	r3, [r4, #4]
 800ef40:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ef44:	2300      	movs	r3, #0
 800ef46:	6022      	str	r2, [r4, #0]
 800ef48:	9303      	str	r3, [sp, #12]
 800ef4a:	ab0a      	add	r3, sp, #40	@ 0x28
 800ef4c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ef50:	ab09      	add	r3, sp, #36	@ 0x24
 800ef52:	9300      	str	r3, [sp, #0]
 800ef54:	6861      	ldr	r1, [r4, #4]
 800ef56:	ec49 8b10 	vmov	d0, r8, r9
 800ef5a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ef5e:	4628      	mov	r0, r5
 800ef60:	f7ff fed6 	bl	800ed10 <__cvt>
 800ef64:	9b06      	ldr	r3, [sp, #24]
 800ef66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ef68:	2b47      	cmp	r3, #71	@ 0x47
 800ef6a:	4680      	mov	r8, r0
 800ef6c:	d129      	bne.n	800efc2 <_printf_float+0x172>
 800ef6e:	1cc8      	adds	r0, r1, #3
 800ef70:	db02      	blt.n	800ef78 <_printf_float+0x128>
 800ef72:	6863      	ldr	r3, [r4, #4]
 800ef74:	4299      	cmp	r1, r3
 800ef76:	dd41      	ble.n	800effc <_printf_float+0x1ac>
 800ef78:	f1aa 0a02 	sub.w	sl, sl, #2
 800ef7c:	fa5f fa8a 	uxtb.w	sl, sl
 800ef80:	3901      	subs	r1, #1
 800ef82:	4652      	mov	r2, sl
 800ef84:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ef88:	9109      	str	r1, [sp, #36]	@ 0x24
 800ef8a:	f7ff ff26 	bl	800edda <__exponent>
 800ef8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ef90:	1813      	adds	r3, r2, r0
 800ef92:	2a01      	cmp	r2, #1
 800ef94:	4681      	mov	r9, r0
 800ef96:	6123      	str	r3, [r4, #16]
 800ef98:	dc02      	bgt.n	800efa0 <_printf_float+0x150>
 800ef9a:	6822      	ldr	r2, [r4, #0]
 800ef9c:	07d2      	lsls	r2, r2, #31
 800ef9e:	d501      	bpl.n	800efa4 <_printf_float+0x154>
 800efa0:	3301      	adds	r3, #1
 800efa2:	6123      	str	r3, [r4, #16]
 800efa4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d0a2      	beq.n	800eef2 <_printf_float+0xa2>
 800efac:	232d      	movs	r3, #45	@ 0x2d
 800efae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800efb2:	e79e      	b.n	800eef2 <_printf_float+0xa2>
 800efb4:	9a06      	ldr	r2, [sp, #24]
 800efb6:	2a47      	cmp	r2, #71	@ 0x47
 800efb8:	d1c2      	bne.n	800ef40 <_printf_float+0xf0>
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d1c0      	bne.n	800ef40 <_printf_float+0xf0>
 800efbe:	2301      	movs	r3, #1
 800efc0:	e7bd      	b.n	800ef3e <_printf_float+0xee>
 800efc2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800efc6:	d9db      	bls.n	800ef80 <_printf_float+0x130>
 800efc8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800efcc:	d118      	bne.n	800f000 <_printf_float+0x1b0>
 800efce:	2900      	cmp	r1, #0
 800efd0:	6863      	ldr	r3, [r4, #4]
 800efd2:	dd0b      	ble.n	800efec <_printf_float+0x19c>
 800efd4:	6121      	str	r1, [r4, #16]
 800efd6:	b913      	cbnz	r3, 800efde <_printf_float+0x18e>
 800efd8:	6822      	ldr	r2, [r4, #0]
 800efda:	07d0      	lsls	r0, r2, #31
 800efdc:	d502      	bpl.n	800efe4 <_printf_float+0x194>
 800efde:	3301      	adds	r3, #1
 800efe0:	440b      	add	r3, r1
 800efe2:	6123      	str	r3, [r4, #16]
 800efe4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800efe6:	f04f 0900 	mov.w	r9, #0
 800efea:	e7db      	b.n	800efa4 <_printf_float+0x154>
 800efec:	b913      	cbnz	r3, 800eff4 <_printf_float+0x1a4>
 800efee:	6822      	ldr	r2, [r4, #0]
 800eff0:	07d2      	lsls	r2, r2, #31
 800eff2:	d501      	bpl.n	800eff8 <_printf_float+0x1a8>
 800eff4:	3302      	adds	r3, #2
 800eff6:	e7f4      	b.n	800efe2 <_printf_float+0x192>
 800eff8:	2301      	movs	r3, #1
 800effa:	e7f2      	b.n	800efe2 <_printf_float+0x192>
 800effc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f000:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f002:	4299      	cmp	r1, r3
 800f004:	db05      	blt.n	800f012 <_printf_float+0x1c2>
 800f006:	6823      	ldr	r3, [r4, #0]
 800f008:	6121      	str	r1, [r4, #16]
 800f00a:	07d8      	lsls	r0, r3, #31
 800f00c:	d5ea      	bpl.n	800efe4 <_printf_float+0x194>
 800f00e:	1c4b      	adds	r3, r1, #1
 800f010:	e7e7      	b.n	800efe2 <_printf_float+0x192>
 800f012:	2900      	cmp	r1, #0
 800f014:	bfd4      	ite	le
 800f016:	f1c1 0202 	rsble	r2, r1, #2
 800f01a:	2201      	movgt	r2, #1
 800f01c:	4413      	add	r3, r2
 800f01e:	e7e0      	b.n	800efe2 <_printf_float+0x192>
 800f020:	6823      	ldr	r3, [r4, #0]
 800f022:	055a      	lsls	r2, r3, #21
 800f024:	d407      	bmi.n	800f036 <_printf_float+0x1e6>
 800f026:	6923      	ldr	r3, [r4, #16]
 800f028:	4642      	mov	r2, r8
 800f02a:	4631      	mov	r1, r6
 800f02c:	4628      	mov	r0, r5
 800f02e:	47b8      	blx	r7
 800f030:	3001      	adds	r0, #1
 800f032:	d12b      	bne.n	800f08c <_printf_float+0x23c>
 800f034:	e767      	b.n	800ef06 <_printf_float+0xb6>
 800f036:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f03a:	f240 80dd 	bls.w	800f1f8 <_printf_float+0x3a8>
 800f03e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f042:	2200      	movs	r2, #0
 800f044:	2300      	movs	r3, #0
 800f046:	f7f1 fd6f 	bl	8000b28 <__aeabi_dcmpeq>
 800f04a:	2800      	cmp	r0, #0
 800f04c:	d033      	beq.n	800f0b6 <_printf_float+0x266>
 800f04e:	4a37      	ldr	r2, [pc, #220]	@ (800f12c <_printf_float+0x2dc>)
 800f050:	2301      	movs	r3, #1
 800f052:	4631      	mov	r1, r6
 800f054:	4628      	mov	r0, r5
 800f056:	47b8      	blx	r7
 800f058:	3001      	adds	r0, #1
 800f05a:	f43f af54 	beq.w	800ef06 <_printf_float+0xb6>
 800f05e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f062:	4543      	cmp	r3, r8
 800f064:	db02      	blt.n	800f06c <_printf_float+0x21c>
 800f066:	6823      	ldr	r3, [r4, #0]
 800f068:	07d8      	lsls	r0, r3, #31
 800f06a:	d50f      	bpl.n	800f08c <_printf_float+0x23c>
 800f06c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f070:	4631      	mov	r1, r6
 800f072:	4628      	mov	r0, r5
 800f074:	47b8      	blx	r7
 800f076:	3001      	adds	r0, #1
 800f078:	f43f af45 	beq.w	800ef06 <_printf_float+0xb6>
 800f07c:	f04f 0900 	mov.w	r9, #0
 800f080:	f108 38ff 	add.w	r8, r8, #4294967295
 800f084:	f104 0a1a 	add.w	sl, r4, #26
 800f088:	45c8      	cmp	r8, r9
 800f08a:	dc09      	bgt.n	800f0a0 <_printf_float+0x250>
 800f08c:	6823      	ldr	r3, [r4, #0]
 800f08e:	079b      	lsls	r3, r3, #30
 800f090:	f100 8103 	bmi.w	800f29a <_printf_float+0x44a>
 800f094:	68e0      	ldr	r0, [r4, #12]
 800f096:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f098:	4298      	cmp	r0, r3
 800f09a:	bfb8      	it	lt
 800f09c:	4618      	movlt	r0, r3
 800f09e:	e734      	b.n	800ef0a <_printf_float+0xba>
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	4652      	mov	r2, sl
 800f0a4:	4631      	mov	r1, r6
 800f0a6:	4628      	mov	r0, r5
 800f0a8:	47b8      	blx	r7
 800f0aa:	3001      	adds	r0, #1
 800f0ac:	f43f af2b 	beq.w	800ef06 <_printf_float+0xb6>
 800f0b0:	f109 0901 	add.w	r9, r9, #1
 800f0b4:	e7e8      	b.n	800f088 <_printf_float+0x238>
 800f0b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	dc39      	bgt.n	800f130 <_printf_float+0x2e0>
 800f0bc:	4a1b      	ldr	r2, [pc, #108]	@ (800f12c <_printf_float+0x2dc>)
 800f0be:	2301      	movs	r3, #1
 800f0c0:	4631      	mov	r1, r6
 800f0c2:	4628      	mov	r0, r5
 800f0c4:	47b8      	blx	r7
 800f0c6:	3001      	adds	r0, #1
 800f0c8:	f43f af1d 	beq.w	800ef06 <_printf_float+0xb6>
 800f0cc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f0d0:	ea59 0303 	orrs.w	r3, r9, r3
 800f0d4:	d102      	bne.n	800f0dc <_printf_float+0x28c>
 800f0d6:	6823      	ldr	r3, [r4, #0]
 800f0d8:	07d9      	lsls	r1, r3, #31
 800f0da:	d5d7      	bpl.n	800f08c <_printf_float+0x23c>
 800f0dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f0e0:	4631      	mov	r1, r6
 800f0e2:	4628      	mov	r0, r5
 800f0e4:	47b8      	blx	r7
 800f0e6:	3001      	adds	r0, #1
 800f0e8:	f43f af0d 	beq.w	800ef06 <_printf_float+0xb6>
 800f0ec:	f04f 0a00 	mov.w	sl, #0
 800f0f0:	f104 0b1a 	add.w	fp, r4, #26
 800f0f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0f6:	425b      	negs	r3, r3
 800f0f8:	4553      	cmp	r3, sl
 800f0fa:	dc01      	bgt.n	800f100 <_printf_float+0x2b0>
 800f0fc:	464b      	mov	r3, r9
 800f0fe:	e793      	b.n	800f028 <_printf_float+0x1d8>
 800f100:	2301      	movs	r3, #1
 800f102:	465a      	mov	r2, fp
 800f104:	4631      	mov	r1, r6
 800f106:	4628      	mov	r0, r5
 800f108:	47b8      	blx	r7
 800f10a:	3001      	adds	r0, #1
 800f10c:	f43f aefb 	beq.w	800ef06 <_printf_float+0xb6>
 800f110:	f10a 0a01 	add.w	sl, sl, #1
 800f114:	e7ee      	b.n	800f0f4 <_printf_float+0x2a4>
 800f116:	bf00      	nop
 800f118:	7fefffff 	.word	0x7fefffff
 800f11c:	0801454a 	.word	0x0801454a
 800f120:	08014546 	.word	0x08014546
 800f124:	08014552 	.word	0x08014552
 800f128:	0801454e 	.word	0x0801454e
 800f12c:	08014556 	.word	0x08014556
 800f130:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f132:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f136:	4553      	cmp	r3, sl
 800f138:	bfa8      	it	ge
 800f13a:	4653      	movge	r3, sl
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	4699      	mov	r9, r3
 800f140:	dc36      	bgt.n	800f1b0 <_printf_float+0x360>
 800f142:	f04f 0b00 	mov.w	fp, #0
 800f146:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f14a:	f104 021a 	add.w	r2, r4, #26
 800f14e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f150:	9306      	str	r3, [sp, #24]
 800f152:	eba3 0309 	sub.w	r3, r3, r9
 800f156:	455b      	cmp	r3, fp
 800f158:	dc31      	bgt.n	800f1be <_printf_float+0x36e>
 800f15a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f15c:	459a      	cmp	sl, r3
 800f15e:	dc3a      	bgt.n	800f1d6 <_printf_float+0x386>
 800f160:	6823      	ldr	r3, [r4, #0]
 800f162:	07da      	lsls	r2, r3, #31
 800f164:	d437      	bmi.n	800f1d6 <_printf_float+0x386>
 800f166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f168:	ebaa 0903 	sub.w	r9, sl, r3
 800f16c:	9b06      	ldr	r3, [sp, #24]
 800f16e:	ebaa 0303 	sub.w	r3, sl, r3
 800f172:	4599      	cmp	r9, r3
 800f174:	bfa8      	it	ge
 800f176:	4699      	movge	r9, r3
 800f178:	f1b9 0f00 	cmp.w	r9, #0
 800f17c:	dc33      	bgt.n	800f1e6 <_printf_float+0x396>
 800f17e:	f04f 0800 	mov.w	r8, #0
 800f182:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f186:	f104 0b1a 	add.w	fp, r4, #26
 800f18a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f18c:	ebaa 0303 	sub.w	r3, sl, r3
 800f190:	eba3 0309 	sub.w	r3, r3, r9
 800f194:	4543      	cmp	r3, r8
 800f196:	f77f af79 	ble.w	800f08c <_printf_float+0x23c>
 800f19a:	2301      	movs	r3, #1
 800f19c:	465a      	mov	r2, fp
 800f19e:	4631      	mov	r1, r6
 800f1a0:	4628      	mov	r0, r5
 800f1a2:	47b8      	blx	r7
 800f1a4:	3001      	adds	r0, #1
 800f1a6:	f43f aeae 	beq.w	800ef06 <_printf_float+0xb6>
 800f1aa:	f108 0801 	add.w	r8, r8, #1
 800f1ae:	e7ec      	b.n	800f18a <_printf_float+0x33a>
 800f1b0:	4642      	mov	r2, r8
 800f1b2:	4631      	mov	r1, r6
 800f1b4:	4628      	mov	r0, r5
 800f1b6:	47b8      	blx	r7
 800f1b8:	3001      	adds	r0, #1
 800f1ba:	d1c2      	bne.n	800f142 <_printf_float+0x2f2>
 800f1bc:	e6a3      	b.n	800ef06 <_printf_float+0xb6>
 800f1be:	2301      	movs	r3, #1
 800f1c0:	4631      	mov	r1, r6
 800f1c2:	4628      	mov	r0, r5
 800f1c4:	9206      	str	r2, [sp, #24]
 800f1c6:	47b8      	blx	r7
 800f1c8:	3001      	adds	r0, #1
 800f1ca:	f43f ae9c 	beq.w	800ef06 <_printf_float+0xb6>
 800f1ce:	9a06      	ldr	r2, [sp, #24]
 800f1d0:	f10b 0b01 	add.w	fp, fp, #1
 800f1d4:	e7bb      	b.n	800f14e <_printf_float+0x2fe>
 800f1d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f1da:	4631      	mov	r1, r6
 800f1dc:	4628      	mov	r0, r5
 800f1de:	47b8      	blx	r7
 800f1e0:	3001      	adds	r0, #1
 800f1e2:	d1c0      	bne.n	800f166 <_printf_float+0x316>
 800f1e4:	e68f      	b.n	800ef06 <_printf_float+0xb6>
 800f1e6:	9a06      	ldr	r2, [sp, #24]
 800f1e8:	464b      	mov	r3, r9
 800f1ea:	4442      	add	r2, r8
 800f1ec:	4631      	mov	r1, r6
 800f1ee:	4628      	mov	r0, r5
 800f1f0:	47b8      	blx	r7
 800f1f2:	3001      	adds	r0, #1
 800f1f4:	d1c3      	bne.n	800f17e <_printf_float+0x32e>
 800f1f6:	e686      	b.n	800ef06 <_printf_float+0xb6>
 800f1f8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f1fc:	f1ba 0f01 	cmp.w	sl, #1
 800f200:	dc01      	bgt.n	800f206 <_printf_float+0x3b6>
 800f202:	07db      	lsls	r3, r3, #31
 800f204:	d536      	bpl.n	800f274 <_printf_float+0x424>
 800f206:	2301      	movs	r3, #1
 800f208:	4642      	mov	r2, r8
 800f20a:	4631      	mov	r1, r6
 800f20c:	4628      	mov	r0, r5
 800f20e:	47b8      	blx	r7
 800f210:	3001      	adds	r0, #1
 800f212:	f43f ae78 	beq.w	800ef06 <_printf_float+0xb6>
 800f216:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f21a:	4631      	mov	r1, r6
 800f21c:	4628      	mov	r0, r5
 800f21e:	47b8      	blx	r7
 800f220:	3001      	adds	r0, #1
 800f222:	f43f ae70 	beq.w	800ef06 <_printf_float+0xb6>
 800f226:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f22a:	2200      	movs	r2, #0
 800f22c:	2300      	movs	r3, #0
 800f22e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f232:	f7f1 fc79 	bl	8000b28 <__aeabi_dcmpeq>
 800f236:	b9c0      	cbnz	r0, 800f26a <_printf_float+0x41a>
 800f238:	4653      	mov	r3, sl
 800f23a:	f108 0201 	add.w	r2, r8, #1
 800f23e:	4631      	mov	r1, r6
 800f240:	4628      	mov	r0, r5
 800f242:	47b8      	blx	r7
 800f244:	3001      	adds	r0, #1
 800f246:	d10c      	bne.n	800f262 <_printf_float+0x412>
 800f248:	e65d      	b.n	800ef06 <_printf_float+0xb6>
 800f24a:	2301      	movs	r3, #1
 800f24c:	465a      	mov	r2, fp
 800f24e:	4631      	mov	r1, r6
 800f250:	4628      	mov	r0, r5
 800f252:	47b8      	blx	r7
 800f254:	3001      	adds	r0, #1
 800f256:	f43f ae56 	beq.w	800ef06 <_printf_float+0xb6>
 800f25a:	f108 0801 	add.w	r8, r8, #1
 800f25e:	45d0      	cmp	r8, sl
 800f260:	dbf3      	blt.n	800f24a <_printf_float+0x3fa>
 800f262:	464b      	mov	r3, r9
 800f264:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f268:	e6df      	b.n	800f02a <_printf_float+0x1da>
 800f26a:	f04f 0800 	mov.w	r8, #0
 800f26e:	f104 0b1a 	add.w	fp, r4, #26
 800f272:	e7f4      	b.n	800f25e <_printf_float+0x40e>
 800f274:	2301      	movs	r3, #1
 800f276:	4642      	mov	r2, r8
 800f278:	e7e1      	b.n	800f23e <_printf_float+0x3ee>
 800f27a:	2301      	movs	r3, #1
 800f27c:	464a      	mov	r2, r9
 800f27e:	4631      	mov	r1, r6
 800f280:	4628      	mov	r0, r5
 800f282:	47b8      	blx	r7
 800f284:	3001      	adds	r0, #1
 800f286:	f43f ae3e 	beq.w	800ef06 <_printf_float+0xb6>
 800f28a:	f108 0801 	add.w	r8, r8, #1
 800f28e:	68e3      	ldr	r3, [r4, #12]
 800f290:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f292:	1a5b      	subs	r3, r3, r1
 800f294:	4543      	cmp	r3, r8
 800f296:	dcf0      	bgt.n	800f27a <_printf_float+0x42a>
 800f298:	e6fc      	b.n	800f094 <_printf_float+0x244>
 800f29a:	f04f 0800 	mov.w	r8, #0
 800f29e:	f104 0919 	add.w	r9, r4, #25
 800f2a2:	e7f4      	b.n	800f28e <_printf_float+0x43e>

0800f2a4 <_printf_common>:
 800f2a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2a8:	4616      	mov	r6, r2
 800f2aa:	4698      	mov	r8, r3
 800f2ac:	688a      	ldr	r2, [r1, #8]
 800f2ae:	690b      	ldr	r3, [r1, #16]
 800f2b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f2b4:	4293      	cmp	r3, r2
 800f2b6:	bfb8      	it	lt
 800f2b8:	4613      	movlt	r3, r2
 800f2ba:	6033      	str	r3, [r6, #0]
 800f2bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f2c0:	4607      	mov	r7, r0
 800f2c2:	460c      	mov	r4, r1
 800f2c4:	b10a      	cbz	r2, 800f2ca <_printf_common+0x26>
 800f2c6:	3301      	adds	r3, #1
 800f2c8:	6033      	str	r3, [r6, #0]
 800f2ca:	6823      	ldr	r3, [r4, #0]
 800f2cc:	0699      	lsls	r1, r3, #26
 800f2ce:	bf42      	ittt	mi
 800f2d0:	6833      	ldrmi	r3, [r6, #0]
 800f2d2:	3302      	addmi	r3, #2
 800f2d4:	6033      	strmi	r3, [r6, #0]
 800f2d6:	6825      	ldr	r5, [r4, #0]
 800f2d8:	f015 0506 	ands.w	r5, r5, #6
 800f2dc:	d106      	bne.n	800f2ec <_printf_common+0x48>
 800f2de:	f104 0a19 	add.w	sl, r4, #25
 800f2e2:	68e3      	ldr	r3, [r4, #12]
 800f2e4:	6832      	ldr	r2, [r6, #0]
 800f2e6:	1a9b      	subs	r3, r3, r2
 800f2e8:	42ab      	cmp	r3, r5
 800f2ea:	dc26      	bgt.n	800f33a <_printf_common+0x96>
 800f2ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f2f0:	6822      	ldr	r2, [r4, #0]
 800f2f2:	3b00      	subs	r3, #0
 800f2f4:	bf18      	it	ne
 800f2f6:	2301      	movne	r3, #1
 800f2f8:	0692      	lsls	r2, r2, #26
 800f2fa:	d42b      	bmi.n	800f354 <_printf_common+0xb0>
 800f2fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f300:	4641      	mov	r1, r8
 800f302:	4638      	mov	r0, r7
 800f304:	47c8      	blx	r9
 800f306:	3001      	adds	r0, #1
 800f308:	d01e      	beq.n	800f348 <_printf_common+0xa4>
 800f30a:	6823      	ldr	r3, [r4, #0]
 800f30c:	6922      	ldr	r2, [r4, #16]
 800f30e:	f003 0306 	and.w	r3, r3, #6
 800f312:	2b04      	cmp	r3, #4
 800f314:	bf02      	ittt	eq
 800f316:	68e5      	ldreq	r5, [r4, #12]
 800f318:	6833      	ldreq	r3, [r6, #0]
 800f31a:	1aed      	subeq	r5, r5, r3
 800f31c:	68a3      	ldr	r3, [r4, #8]
 800f31e:	bf0c      	ite	eq
 800f320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f324:	2500      	movne	r5, #0
 800f326:	4293      	cmp	r3, r2
 800f328:	bfc4      	itt	gt
 800f32a:	1a9b      	subgt	r3, r3, r2
 800f32c:	18ed      	addgt	r5, r5, r3
 800f32e:	2600      	movs	r6, #0
 800f330:	341a      	adds	r4, #26
 800f332:	42b5      	cmp	r5, r6
 800f334:	d11a      	bne.n	800f36c <_printf_common+0xc8>
 800f336:	2000      	movs	r0, #0
 800f338:	e008      	b.n	800f34c <_printf_common+0xa8>
 800f33a:	2301      	movs	r3, #1
 800f33c:	4652      	mov	r2, sl
 800f33e:	4641      	mov	r1, r8
 800f340:	4638      	mov	r0, r7
 800f342:	47c8      	blx	r9
 800f344:	3001      	adds	r0, #1
 800f346:	d103      	bne.n	800f350 <_printf_common+0xac>
 800f348:	f04f 30ff 	mov.w	r0, #4294967295
 800f34c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f350:	3501      	adds	r5, #1
 800f352:	e7c6      	b.n	800f2e2 <_printf_common+0x3e>
 800f354:	18e1      	adds	r1, r4, r3
 800f356:	1c5a      	adds	r2, r3, #1
 800f358:	2030      	movs	r0, #48	@ 0x30
 800f35a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f35e:	4422      	add	r2, r4
 800f360:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f364:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f368:	3302      	adds	r3, #2
 800f36a:	e7c7      	b.n	800f2fc <_printf_common+0x58>
 800f36c:	2301      	movs	r3, #1
 800f36e:	4622      	mov	r2, r4
 800f370:	4641      	mov	r1, r8
 800f372:	4638      	mov	r0, r7
 800f374:	47c8      	blx	r9
 800f376:	3001      	adds	r0, #1
 800f378:	d0e6      	beq.n	800f348 <_printf_common+0xa4>
 800f37a:	3601      	adds	r6, #1
 800f37c:	e7d9      	b.n	800f332 <_printf_common+0x8e>
	...

0800f380 <_printf_i>:
 800f380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f384:	7e0f      	ldrb	r7, [r1, #24]
 800f386:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f388:	2f78      	cmp	r7, #120	@ 0x78
 800f38a:	4691      	mov	r9, r2
 800f38c:	4680      	mov	r8, r0
 800f38e:	460c      	mov	r4, r1
 800f390:	469a      	mov	sl, r3
 800f392:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f396:	d807      	bhi.n	800f3a8 <_printf_i+0x28>
 800f398:	2f62      	cmp	r7, #98	@ 0x62
 800f39a:	d80a      	bhi.n	800f3b2 <_printf_i+0x32>
 800f39c:	2f00      	cmp	r7, #0
 800f39e:	f000 80d1 	beq.w	800f544 <_printf_i+0x1c4>
 800f3a2:	2f58      	cmp	r7, #88	@ 0x58
 800f3a4:	f000 80b8 	beq.w	800f518 <_printf_i+0x198>
 800f3a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f3ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f3b0:	e03a      	b.n	800f428 <_printf_i+0xa8>
 800f3b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f3b6:	2b15      	cmp	r3, #21
 800f3b8:	d8f6      	bhi.n	800f3a8 <_printf_i+0x28>
 800f3ba:	a101      	add	r1, pc, #4	@ (adr r1, 800f3c0 <_printf_i+0x40>)
 800f3bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f3c0:	0800f419 	.word	0x0800f419
 800f3c4:	0800f42d 	.word	0x0800f42d
 800f3c8:	0800f3a9 	.word	0x0800f3a9
 800f3cc:	0800f3a9 	.word	0x0800f3a9
 800f3d0:	0800f3a9 	.word	0x0800f3a9
 800f3d4:	0800f3a9 	.word	0x0800f3a9
 800f3d8:	0800f42d 	.word	0x0800f42d
 800f3dc:	0800f3a9 	.word	0x0800f3a9
 800f3e0:	0800f3a9 	.word	0x0800f3a9
 800f3e4:	0800f3a9 	.word	0x0800f3a9
 800f3e8:	0800f3a9 	.word	0x0800f3a9
 800f3ec:	0800f52b 	.word	0x0800f52b
 800f3f0:	0800f457 	.word	0x0800f457
 800f3f4:	0800f4e5 	.word	0x0800f4e5
 800f3f8:	0800f3a9 	.word	0x0800f3a9
 800f3fc:	0800f3a9 	.word	0x0800f3a9
 800f400:	0800f54d 	.word	0x0800f54d
 800f404:	0800f3a9 	.word	0x0800f3a9
 800f408:	0800f457 	.word	0x0800f457
 800f40c:	0800f3a9 	.word	0x0800f3a9
 800f410:	0800f3a9 	.word	0x0800f3a9
 800f414:	0800f4ed 	.word	0x0800f4ed
 800f418:	6833      	ldr	r3, [r6, #0]
 800f41a:	1d1a      	adds	r2, r3, #4
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	6032      	str	r2, [r6, #0]
 800f420:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f424:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f428:	2301      	movs	r3, #1
 800f42a:	e09c      	b.n	800f566 <_printf_i+0x1e6>
 800f42c:	6833      	ldr	r3, [r6, #0]
 800f42e:	6820      	ldr	r0, [r4, #0]
 800f430:	1d19      	adds	r1, r3, #4
 800f432:	6031      	str	r1, [r6, #0]
 800f434:	0606      	lsls	r6, r0, #24
 800f436:	d501      	bpl.n	800f43c <_printf_i+0xbc>
 800f438:	681d      	ldr	r5, [r3, #0]
 800f43a:	e003      	b.n	800f444 <_printf_i+0xc4>
 800f43c:	0645      	lsls	r5, r0, #25
 800f43e:	d5fb      	bpl.n	800f438 <_printf_i+0xb8>
 800f440:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f444:	2d00      	cmp	r5, #0
 800f446:	da03      	bge.n	800f450 <_printf_i+0xd0>
 800f448:	232d      	movs	r3, #45	@ 0x2d
 800f44a:	426d      	negs	r5, r5
 800f44c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f450:	4858      	ldr	r0, [pc, #352]	@ (800f5b4 <_printf_i+0x234>)
 800f452:	230a      	movs	r3, #10
 800f454:	e011      	b.n	800f47a <_printf_i+0xfa>
 800f456:	6821      	ldr	r1, [r4, #0]
 800f458:	6833      	ldr	r3, [r6, #0]
 800f45a:	0608      	lsls	r0, r1, #24
 800f45c:	f853 5b04 	ldr.w	r5, [r3], #4
 800f460:	d402      	bmi.n	800f468 <_printf_i+0xe8>
 800f462:	0649      	lsls	r1, r1, #25
 800f464:	bf48      	it	mi
 800f466:	b2ad      	uxthmi	r5, r5
 800f468:	2f6f      	cmp	r7, #111	@ 0x6f
 800f46a:	4852      	ldr	r0, [pc, #328]	@ (800f5b4 <_printf_i+0x234>)
 800f46c:	6033      	str	r3, [r6, #0]
 800f46e:	bf14      	ite	ne
 800f470:	230a      	movne	r3, #10
 800f472:	2308      	moveq	r3, #8
 800f474:	2100      	movs	r1, #0
 800f476:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f47a:	6866      	ldr	r6, [r4, #4]
 800f47c:	60a6      	str	r6, [r4, #8]
 800f47e:	2e00      	cmp	r6, #0
 800f480:	db05      	blt.n	800f48e <_printf_i+0x10e>
 800f482:	6821      	ldr	r1, [r4, #0]
 800f484:	432e      	orrs	r6, r5
 800f486:	f021 0104 	bic.w	r1, r1, #4
 800f48a:	6021      	str	r1, [r4, #0]
 800f48c:	d04b      	beq.n	800f526 <_printf_i+0x1a6>
 800f48e:	4616      	mov	r6, r2
 800f490:	fbb5 f1f3 	udiv	r1, r5, r3
 800f494:	fb03 5711 	mls	r7, r3, r1, r5
 800f498:	5dc7      	ldrb	r7, [r0, r7]
 800f49a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f49e:	462f      	mov	r7, r5
 800f4a0:	42bb      	cmp	r3, r7
 800f4a2:	460d      	mov	r5, r1
 800f4a4:	d9f4      	bls.n	800f490 <_printf_i+0x110>
 800f4a6:	2b08      	cmp	r3, #8
 800f4a8:	d10b      	bne.n	800f4c2 <_printf_i+0x142>
 800f4aa:	6823      	ldr	r3, [r4, #0]
 800f4ac:	07df      	lsls	r7, r3, #31
 800f4ae:	d508      	bpl.n	800f4c2 <_printf_i+0x142>
 800f4b0:	6923      	ldr	r3, [r4, #16]
 800f4b2:	6861      	ldr	r1, [r4, #4]
 800f4b4:	4299      	cmp	r1, r3
 800f4b6:	bfde      	ittt	le
 800f4b8:	2330      	movle	r3, #48	@ 0x30
 800f4ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f4be:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f4c2:	1b92      	subs	r2, r2, r6
 800f4c4:	6122      	str	r2, [r4, #16]
 800f4c6:	f8cd a000 	str.w	sl, [sp]
 800f4ca:	464b      	mov	r3, r9
 800f4cc:	aa03      	add	r2, sp, #12
 800f4ce:	4621      	mov	r1, r4
 800f4d0:	4640      	mov	r0, r8
 800f4d2:	f7ff fee7 	bl	800f2a4 <_printf_common>
 800f4d6:	3001      	adds	r0, #1
 800f4d8:	d14a      	bne.n	800f570 <_printf_i+0x1f0>
 800f4da:	f04f 30ff 	mov.w	r0, #4294967295
 800f4de:	b004      	add	sp, #16
 800f4e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4e4:	6823      	ldr	r3, [r4, #0]
 800f4e6:	f043 0320 	orr.w	r3, r3, #32
 800f4ea:	6023      	str	r3, [r4, #0]
 800f4ec:	4832      	ldr	r0, [pc, #200]	@ (800f5b8 <_printf_i+0x238>)
 800f4ee:	2778      	movs	r7, #120	@ 0x78
 800f4f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f4f4:	6823      	ldr	r3, [r4, #0]
 800f4f6:	6831      	ldr	r1, [r6, #0]
 800f4f8:	061f      	lsls	r7, r3, #24
 800f4fa:	f851 5b04 	ldr.w	r5, [r1], #4
 800f4fe:	d402      	bmi.n	800f506 <_printf_i+0x186>
 800f500:	065f      	lsls	r7, r3, #25
 800f502:	bf48      	it	mi
 800f504:	b2ad      	uxthmi	r5, r5
 800f506:	6031      	str	r1, [r6, #0]
 800f508:	07d9      	lsls	r1, r3, #31
 800f50a:	bf44      	itt	mi
 800f50c:	f043 0320 	orrmi.w	r3, r3, #32
 800f510:	6023      	strmi	r3, [r4, #0]
 800f512:	b11d      	cbz	r5, 800f51c <_printf_i+0x19c>
 800f514:	2310      	movs	r3, #16
 800f516:	e7ad      	b.n	800f474 <_printf_i+0xf4>
 800f518:	4826      	ldr	r0, [pc, #152]	@ (800f5b4 <_printf_i+0x234>)
 800f51a:	e7e9      	b.n	800f4f0 <_printf_i+0x170>
 800f51c:	6823      	ldr	r3, [r4, #0]
 800f51e:	f023 0320 	bic.w	r3, r3, #32
 800f522:	6023      	str	r3, [r4, #0]
 800f524:	e7f6      	b.n	800f514 <_printf_i+0x194>
 800f526:	4616      	mov	r6, r2
 800f528:	e7bd      	b.n	800f4a6 <_printf_i+0x126>
 800f52a:	6833      	ldr	r3, [r6, #0]
 800f52c:	6825      	ldr	r5, [r4, #0]
 800f52e:	6961      	ldr	r1, [r4, #20]
 800f530:	1d18      	adds	r0, r3, #4
 800f532:	6030      	str	r0, [r6, #0]
 800f534:	062e      	lsls	r6, r5, #24
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	d501      	bpl.n	800f53e <_printf_i+0x1be>
 800f53a:	6019      	str	r1, [r3, #0]
 800f53c:	e002      	b.n	800f544 <_printf_i+0x1c4>
 800f53e:	0668      	lsls	r0, r5, #25
 800f540:	d5fb      	bpl.n	800f53a <_printf_i+0x1ba>
 800f542:	8019      	strh	r1, [r3, #0]
 800f544:	2300      	movs	r3, #0
 800f546:	6123      	str	r3, [r4, #16]
 800f548:	4616      	mov	r6, r2
 800f54a:	e7bc      	b.n	800f4c6 <_printf_i+0x146>
 800f54c:	6833      	ldr	r3, [r6, #0]
 800f54e:	1d1a      	adds	r2, r3, #4
 800f550:	6032      	str	r2, [r6, #0]
 800f552:	681e      	ldr	r6, [r3, #0]
 800f554:	6862      	ldr	r2, [r4, #4]
 800f556:	2100      	movs	r1, #0
 800f558:	4630      	mov	r0, r6
 800f55a:	f7f0 fe69 	bl	8000230 <memchr>
 800f55e:	b108      	cbz	r0, 800f564 <_printf_i+0x1e4>
 800f560:	1b80      	subs	r0, r0, r6
 800f562:	6060      	str	r0, [r4, #4]
 800f564:	6863      	ldr	r3, [r4, #4]
 800f566:	6123      	str	r3, [r4, #16]
 800f568:	2300      	movs	r3, #0
 800f56a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f56e:	e7aa      	b.n	800f4c6 <_printf_i+0x146>
 800f570:	6923      	ldr	r3, [r4, #16]
 800f572:	4632      	mov	r2, r6
 800f574:	4649      	mov	r1, r9
 800f576:	4640      	mov	r0, r8
 800f578:	47d0      	blx	sl
 800f57a:	3001      	adds	r0, #1
 800f57c:	d0ad      	beq.n	800f4da <_printf_i+0x15a>
 800f57e:	6823      	ldr	r3, [r4, #0]
 800f580:	079b      	lsls	r3, r3, #30
 800f582:	d413      	bmi.n	800f5ac <_printf_i+0x22c>
 800f584:	68e0      	ldr	r0, [r4, #12]
 800f586:	9b03      	ldr	r3, [sp, #12]
 800f588:	4298      	cmp	r0, r3
 800f58a:	bfb8      	it	lt
 800f58c:	4618      	movlt	r0, r3
 800f58e:	e7a6      	b.n	800f4de <_printf_i+0x15e>
 800f590:	2301      	movs	r3, #1
 800f592:	4632      	mov	r2, r6
 800f594:	4649      	mov	r1, r9
 800f596:	4640      	mov	r0, r8
 800f598:	47d0      	blx	sl
 800f59a:	3001      	adds	r0, #1
 800f59c:	d09d      	beq.n	800f4da <_printf_i+0x15a>
 800f59e:	3501      	adds	r5, #1
 800f5a0:	68e3      	ldr	r3, [r4, #12]
 800f5a2:	9903      	ldr	r1, [sp, #12]
 800f5a4:	1a5b      	subs	r3, r3, r1
 800f5a6:	42ab      	cmp	r3, r5
 800f5a8:	dcf2      	bgt.n	800f590 <_printf_i+0x210>
 800f5aa:	e7eb      	b.n	800f584 <_printf_i+0x204>
 800f5ac:	2500      	movs	r5, #0
 800f5ae:	f104 0619 	add.w	r6, r4, #25
 800f5b2:	e7f5      	b.n	800f5a0 <_printf_i+0x220>
 800f5b4:	08014558 	.word	0x08014558
 800f5b8:	08014569 	.word	0x08014569

0800f5bc <_scanf_float>:
 800f5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5c0:	b087      	sub	sp, #28
 800f5c2:	4691      	mov	r9, r2
 800f5c4:	9303      	str	r3, [sp, #12]
 800f5c6:	688b      	ldr	r3, [r1, #8]
 800f5c8:	1e5a      	subs	r2, r3, #1
 800f5ca:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f5ce:	bf81      	itttt	hi
 800f5d0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f5d4:	eb03 0b05 	addhi.w	fp, r3, r5
 800f5d8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f5dc:	608b      	strhi	r3, [r1, #8]
 800f5de:	680b      	ldr	r3, [r1, #0]
 800f5e0:	460a      	mov	r2, r1
 800f5e2:	f04f 0500 	mov.w	r5, #0
 800f5e6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f5ea:	f842 3b1c 	str.w	r3, [r2], #28
 800f5ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f5f2:	4680      	mov	r8, r0
 800f5f4:	460c      	mov	r4, r1
 800f5f6:	bf98      	it	ls
 800f5f8:	f04f 0b00 	movls.w	fp, #0
 800f5fc:	9201      	str	r2, [sp, #4]
 800f5fe:	4616      	mov	r6, r2
 800f600:	46aa      	mov	sl, r5
 800f602:	462f      	mov	r7, r5
 800f604:	9502      	str	r5, [sp, #8]
 800f606:	68a2      	ldr	r2, [r4, #8]
 800f608:	b15a      	cbz	r2, 800f622 <_scanf_float+0x66>
 800f60a:	f8d9 3000 	ldr.w	r3, [r9]
 800f60e:	781b      	ldrb	r3, [r3, #0]
 800f610:	2b4e      	cmp	r3, #78	@ 0x4e
 800f612:	d863      	bhi.n	800f6dc <_scanf_float+0x120>
 800f614:	2b40      	cmp	r3, #64	@ 0x40
 800f616:	d83b      	bhi.n	800f690 <_scanf_float+0xd4>
 800f618:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f61c:	b2c8      	uxtb	r0, r1
 800f61e:	280e      	cmp	r0, #14
 800f620:	d939      	bls.n	800f696 <_scanf_float+0xda>
 800f622:	b11f      	cbz	r7, 800f62c <_scanf_float+0x70>
 800f624:	6823      	ldr	r3, [r4, #0]
 800f626:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f62a:	6023      	str	r3, [r4, #0]
 800f62c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f630:	f1ba 0f01 	cmp.w	sl, #1
 800f634:	f200 8114 	bhi.w	800f860 <_scanf_float+0x2a4>
 800f638:	9b01      	ldr	r3, [sp, #4]
 800f63a:	429e      	cmp	r6, r3
 800f63c:	f200 8105 	bhi.w	800f84a <_scanf_float+0x28e>
 800f640:	2001      	movs	r0, #1
 800f642:	b007      	add	sp, #28
 800f644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f648:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f64c:	2a0d      	cmp	r2, #13
 800f64e:	d8e8      	bhi.n	800f622 <_scanf_float+0x66>
 800f650:	a101      	add	r1, pc, #4	@ (adr r1, 800f658 <_scanf_float+0x9c>)
 800f652:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f656:	bf00      	nop
 800f658:	0800f7a1 	.word	0x0800f7a1
 800f65c:	0800f623 	.word	0x0800f623
 800f660:	0800f623 	.word	0x0800f623
 800f664:	0800f623 	.word	0x0800f623
 800f668:	0800f7fd 	.word	0x0800f7fd
 800f66c:	0800f7d7 	.word	0x0800f7d7
 800f670:	0800f623 	.word	0x0800f623
 800f674:	0800f623 	.word	0x0800f623
 800f678:	0800f7af 	.word	0x0800f7af
 800f67c:	0800f623 	.word	0x0800f623
 800f680:	0800f623 	.word	0x0800f623
 800f684:	0800f623 	.word	0x0800f623
 800f688:	0800f623 	.word	0x0800f623
 800f68c:	0800f76b 	.word	0x0800f76b
 800f690:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f694:	e7da      	b.n	800f64c <_scanf_float+0x90>
 800f696:	290e      	cmp	r1, #14
 800f698:	d8c3      	bhi.n	800f622 <_scanf_float+0x66>
 800f69a:	a001      	add	r0, pc, #4	@ (adr r0, 800f6a0 <_scanf_float+0xe4>)
 800f69c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f6a0:	0800f75b 	.word	0x0800f75b
 800f6a4:	0800f623 	.word	0x0800f623
 800f6a8:	0800f75b 	.word	0x0800f75b
 800f6ac:	0800f7eb 	.word	0x0800f7eb
 800f6b0:	0800f623 	.word	0x0800f623
 800f6b4:	0800f6fd 	.word	0x0800f6fd
 800f6b8:	0800f741 	.word	0x0800f741
 800f6bc:	0800f741 	.word	0x0800f741
 800f6c0:	0800f741 	.word	0x0800f741
 800f6c4:	0800f741 	.word	0x0800f741
 800f6c8:	0800f741 	.word	0x0800f741
 800f6cc:	0800f741 	.word	0x0800f741
 800f6d0:	0800f741 	.word	0x0800f741
 800f6d4:	0800f741 	.word	0x0800f741
 800f6d8:	0800f741 	.word	0x0800f741
 800f6dc:	2b6e      	cmp	r3, #110	@ 0x6e
 800f6de:	d809      	bhi.n	800f6f4 <_scanf_float+0x138>
 800f6e0:	2b60      	cmp	r3, #96	@ 0x60
 800f6e2:	d8b1      	bhi.n	800f648 <_scanf_float+0x8c>
 800f6e4:	2b54      	cmp	r3, #84	@ 0x54
 800f6e6:	d07b      	beq.n	800f7e0 <_scanf_float+0x224>
 800f6e8:	2b59      	cmp	r3, #89	@ 0x59
 800f6ea:	d19a      	bne.n	800f622 <_scanf_float+0x66>
 800f6ec:	2d07      	cmp	r5, #7
 800f6ee:	d198      	bne.n	800f622 <_scanf_float+0x66>
 800f6f0:	2508      	movs	r5, #8
 800f6f2:	e02f      	b.n	800f754 <_scanf_float+0x198>
 800f6f4:	2b74      	cmp	r3, #116	@ 0x74
 800f6f6:	d073      	beq.n	800f7e0 <_scanf_float+0x224>
 800f6f8:	2b79      	cmp	r3, #121	@ 0x79
 800f6fa:	e7f6      	b.n	800f6ea <_scanf_float+0x12e>
 800f6fc:	6821      	ldr	r1, [r4, #0]
 800f6fe:	05c8      	lsls	r0, r1, #23
 800f700:	d51e      	bpl.n	800f740 <_scanf_float+0x184>
 800f702:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f706:	6021      	str	r1, [r4, #0]
 800f708:	3701      	adds	r7, #1
 800f70a:	f1bb 0f00 	cmp.w	fp, #0
 800f70e:	d003      	beq.n	800f718 <_scanf_float+0x15c>
 800f710:	3201      	adds	r2, #1
 800f712:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f716:	60a2      	str	r2, [r4, #8]
 800f718:	68a3      	ldr	r3, [r4, #8]
 800f71a:	3b01      	subs	r3, #1
 800f71c:	60a3      	str	r3, [r4, #8]
 800f71e:	6923      	ldr	r3, [r4, #16]
 800f720:	3301      	adds	r3, #1
 800f722:	6123      	str	r3, [r4, #16]
 800f724:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f728:	3b01      	subs	r3, #1
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	f8c9 3004 	str.w	r3, [r9, #4]
 800f730:	f340 8082 	ble.w	800f838 <_scanf_float+0x27c>
 800f734:	f8d9 3000 	ldr.w	r3, [r9]
 800f738:	3301      	adds	r3, #1
 800f73a:	f8c9 3000 	str.w	r3, [r9]
 800f73e:	e762      	b.n	800f606 <_scanf_float+0x4a>
 800f740:	eb1a 0105 	adds.w	r1, sl, r5
 800f744:	f47f af6d 	bne.w	800f622 <_scanf_float+0x66>
 800f748:	6822      	ldr	r2, [r4, #0]
 800f74a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f74e:	6022      	str	r2, [r4, #0]
 800f750:	460d      	mov	r5, r1
 800f752:	468a      	mov	sl, r1
 800f754:	f806 3b01 	strb.w	r3, [r6], #1
 800f758:	e7de      	b.n	800f718 <_scanf_float+0x15c>
 800f75a:	6822      	ldr	r2, [r4, #0]
 800f75c:	0610      	lsls	r0, r2, #24
 800f75e:	f57f af60 	bpl.w	800f622 <_scanf_float+0x66>
 800f762:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f766:	6022      	str	r2, [r4, #0]
 800f768:	e7f4      	b.n	800f754 <_scanf_float+0x198>
 800f76a:	f1ba 0f00 	cmp.w	sl, #0
 800f76e:	d10c      	bne.n	800f78a <_scanf_float+0x1ce>
 800f770:	b977      	cbnz	r7, 800f790 <_scanf_float+0x1d4>
 800f772:	6822      	ldr	r2, [r4, #0]
 800f774:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f778:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f77c:	d108      	bne.n	800f790 <_scanf_float+0x1d4>
 800f77e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f782:	6022      	str	r2, [r4, #0]
 800f784:	f04f 0a01 	mov.w	sl, #1
 800f788:	e7e4      	b.n	800f754 <_scanf_float+0x198>
 800f78a:	f1ba 0f02 	cmp.w	sl, #2
 800f78e:	d050      	beq.n	800f832 <_scanf_float+0x276>
 800f790:	2d01      	cmp	r5, #1
 800f792:	d002      	beq.n	800f79a <_scanf_float+0x1de>
 800f794:	2d04      	cmp	r5, #4
 800f796:	f47f af44 	bne.w	800f622 <_scanf_float+0x66>
 800f79a:	3501      	adds	r5, #1
 800f79c:	b2ed      	uxtb	r5, r5
 800f79e:	e7d9      	b.n	800f754 <_scanf_float+0x198>
 800f7a0:	f1ba 0f01 	cmp.w	sl, #1
 800f7a4:	f47f af3d 	bne.w	800f622 <_scanf_float+0x66>
 800f7a8:	f04f 0a02 	mov.w	sl, #2
 800f7ac:	e7d2      	b.n	800f754 <_scanf_float+0x198>
 800f7ae:	b975      	cbnz	r5, 800f7ce <_scanf_float+0x212>
 800f7b0:	2f00      	cmp	r7, #0
 800f7b2:	f47f af37 	bne.w	800f624 <_scanf_float+0x68>
 800f7b6:	6822      	ldr	r2, [r4, #0]
 800f7b8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f7bc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f7c0:	f040 8103 	bne.w	800f9ca <_scanf_float+0x40e>
 800f7c4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f7c8:	6022      	str	r2, [r4, #0]
 800f7ca:	2501      	movs	r5, #1
 800f7cc:	e7c2      	b.n	800f754 <_scanf_float+0x198>
 800f7ce:	2d03      	cmp	r5, #3
 800f7d0:	d0e3      	beq.n	800f79a <_scanf_float+0x1de>
 800f7d2:	2d05      	cmp	r5, #5
 800f7d4:	e7df      	b.n	800f796 <_scanf_float+0x1da>
 800f7d6:	2d02      	cmp	r5, #2
 800f7d8:	f47f af23 	bne.w	800f622 <_scanf_float+0x66>
 800f7dc:	2503      	movs	r5, #3
 800f7de:	e7b9      	b.n	800f754 <_scanf_float+0x198>
 800f7e0:	2d06      	cmp	r5, #6
 800f7e2:	f47f af1e 	bne.w	800f622 <_scanf_float+0x66>
 800f7e6:	2507      	movs	r5, #7
 800f7e8:	e7b4      	b.n	800f754 <_scanf_float+0x198>
 800f7ea:	6822      	ldr	r2, [r4, #0]
 800f7ec:	0591      	lsls	r1, r2, #22
 800f7ee:	f57f af18 	bpl.w	800f622 <_scanf_float+0x66>
 800f7f2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f7f6:	6022      	str	r2, [r4, #0]
 800f7f8:	9702      	str	r7, [sp, #8]
 800f7fa:	e7ab      	b.n	800f754 <_scanf_float+0x198>
 800f7fc:	6822      	ldr	r2, [r4, #0]
 800f7fe:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f802:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f806:	d005      	beq.n	800f814 <_scanf_float+0x258>
 800f808:	0550      	lsls	r0, r2, #21
 800f80a:	f57f af0a 	bpl.w	800f622 <_scanf_float+0x66>
 800f80e:	2f00      	cmp	r7, #0
 800f810:	f000 80db 	beq.w	800f9ca <_scanf_float+0x40e>
 800f814:	0591      	lsls	r1, r2, #22
 800f816:	bf58      	it	pl
 800f818:	9902      	ldrpl	r1, [sp, #8]
 800f81a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f81e:	bf58      	it	pl
 800f820:	1a79      	subpl	r1, r7, r1
 800f822:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f826:	bf58      	it	pl
 800f828:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f82c:	6022      	str	r2, [r4, #0]
 800f82e:	2700      	movs	r7, #0
 800f830:	e790      	b.n	800f754 <_scanf_float+0x198>
 800f832:	f04f 0a03 	mov.w	sl, #3
 800f836:	e78d      	b.n	800f754 <_scanf_float+0x198>
 800f838:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f83c:	4649      	mov	r1, r9
 800f83e:	4640      	mov	r0, r8
 800f840:	4798      	blx	r3
 800f842:	2800      	cmp	r0, #0
 800f844:	f43f aedf 	beq.w	800f606 <_scanf_float+0x4a>
 800f848:	e6eb      	b.n	800f622 <_scanf_float+0x66>
 800f84a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f84e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f852:	464a      	mov	r2, r9
 800f854:	4640      	mov	r0, r8
 800f856:	4798      	blx	r3
 800f858:	6923      	ldr	r3, [r4, #16]
 800f85a:	3b01      	subs	r3, #1
 800f85c:	6123      	str	r3, [r4, #16]
 800f85e:	e6eb      	b.n	800f638 <_scanf_float+0x7c>
 800f860:	1e6b      	subs	r3, r5, #1
 800f862:	2b06      	cmp	r3, #6
 800f864:	d824      	bhi.n	800f8b0 <_scanf_float+0x2f4>
 800f866:	2d02      	cmp	r5, #2
 800f868:	d836      	bhi.n	800f8d8 <_scanf_float+0x31c>
 800f86a:	9b01      	ldr	r3, [sp, #4]
 800f86c:	429e      	cmp	r6, r3
 800f86e:	f67f aee7 	bls.w	800f640 <_scanf_float+0x84>
 800f872:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f876:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f87a:	464a      	mov	r2, r9
 800f87c:	4640      	mov	r0, r8
 800f87e:	4798      	blx	r3
 800f880:	6923      	ldr	r3, [r4, #16]
 800f882:	3b01      	subs	r3, #1
 800f884:	6123      	str	r3, [r4, #16]
 800f886:	e7f0      	b.n	800f86a <_scanf_float+0x2ae>
 800f888:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f88c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f890:	464a      	mov	r2, r9
 800f892:	4640      	mov	r0, r8
 800f894:	4798      	blx	r3
 800f896:	6923      	ldr	r3, [r4, #16]
 800f898:	3b01      	subs	r3, #1
 800f89a:	6123      	str	r3, [r4, #16]
 800f89c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f8a0:	fa5f fa8a 	uxtb.w	sl, sl
 800f8a4:	f1ba 0f02 	cmp.w	sl, #2
 800f8a8:	d1ee      	bne.n	800f888 <_scanf_float+0x2cc>
 800f8aa:	3d03      	subs	r5, #3
 800f8ac:	b2ed      	uxtb	r5, r5
 800f8ae:	1b76      	subs	r6, r6, r5
 800f8b0:	6823      	ldr	r3, [r4, #0]
 800f8b2:	05da      	lsls	r2, r3, #23
 800f8b4:	d530      	bpl.n	800f918 <_scanf_float+0x35c>
 800f8b6:	055b      	lsls	r3, r3, #21
 800f8b8:	d511      	bpl.n	800f8de <_scanf_float+0x322>
 800f8ba:	9b01      	ldr	r3, [sp, #4]
 800f8bc:	429e      	cmp	r6, r3
 800f8be:	f67f aebf 	bls.w	800f640 <_scanf_float+0x84>
 800f8c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f8c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f8ca:	464a      	mov	r2, r9
 800f8cc:	4640      	mov	r0, r8
 800f8ce:	4798      	blx	r3
 800f8d0:	6923      	ldr	r3, [r4, #16]
 800f8d2:	3b01      	subs	r3, #1
 800f8d4:	6123      	str	r3, [r4, #16]
 800f8d6:	e7f0      	b.n	800f8ba <_scanf_float+0x2fe>
 800f8d8:	46aa      	mov	sl, r5
 800f8da:	46b3      	mov	fp, r6
 800f8dc:	e7de      	b.n	800f89c <_scanf_float+0x2e0>
 800f8de:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f8e2:	6923      	ldr	r3, [r4, #16]
 800f8e4:	2965      	cmp	r1, #101	@ 0x65
 800f8e6:	f103 33ff 	add.w	r3, r3, #4294967295
 800f8ea:	f106 35ff 	add.w	r5, r6, #4294967295
 800f8ee:	6123      	str	r3, [r4, #16]
 800f8f0:	d00c      	beq.n	800f90c <_scanf_float+0x350>
 800f8f2:	2945      	cmp	r1, #69	@ 0x45
 800f8f4:	d00a      	beq.n	800f90c <_scanf_float+0x350>
 800f8f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f8fa:	464a      	mov	r2, r9
 800f8fc:	4640      	mov	r0, r8
 800f8fe:	4798      	blx	r3
 800f900:	6923      	ldr	r3, [r4, #16]
 800f902:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f906:	3b01      	subs	r3, #1
 800f908:	1eb5      	subs	r5, r6, #2
 800f90a:	6123      	str	r3, [r4, #16]
 800f90c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f910:	464a      	mov	r2, r9
 800f912:	4640      	mov	r0, r8
 800f914:	4798      	blx	r3
 800f916:	462e      	mov	r6, r5
 800f918:	6822      	ldr	r2, [r4, #0]
 800f91a:	f012 0210 	ands.w	r2, r2, #16
 800f91e:	d001      	beq.n	800f924 <_scanf_float+0x368>
 800f920:	2000      	movs	r0, #0
 800f922:	e68e      	b.n	800f642 <_scanf_float+0x86>
 800f924:	7032      	strb	r2, [r6, #0]
 800f926:	6823      	ldr	r3, [r4, #0]
 800f928:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f92c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f930:	d125      	bne.n	800f97e <_scanf_float+0x3c2>
 800f932:	9b02      	ldr	r3, [sp, #8]
 800f934:	429f      	cmp	r7, r3
 800f936:	d00a      	beq.n	800f94e <_scanf_float+0x392>
 800f938:	1bda      	subs	r2, r3, r7
 800f93a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f93e:	429e      	cmp	r6, r3
 800f940:	bf28      	it	cs
 800f942:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f946:	4922      	ldr	r1, [pc, #136]	@ (800f9d0 <_scanf_float+0x414>)
 800f948:	4630      	mov	r0, r6
 800f94a:	f000 fb09 	bl	800ff60 <siprintf>
 800f94e:	9901      	ldr	r1, [sp, #4]
 800f950:	2200      	movs	r2, #0
 800f952:	4640      	mov	r0, r8
 800f954:	f7ff f928 	bl	800eba8 <_strtod_r>
 800f958:	9b03      	ldr	r3, [sp, #12]
 800f95a:	6821      	ldr	r1, [r4, #0]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	f011 0f02 	tst.w	r1, #2
 800f962:	ec57 6b10 	vmov	r6, r7, d0
 800f966:	f103 0204 	add.w	r2, r3, #4
 800f96a:	d015      	beq.n	800f998 <_scanf_float+0x3dc>
 800f96c:	9903      	ldr	r1, [sp, #12]
 800f96e:	600a      	str	r2, [r1, #0]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	e9c3 6700 	strd	r6, r7, [r3]
 800f976:	68e3      	ldr	r3, [r4, #12]
 800f978:	3301      	adds	r3, #1
 800f97a:	60e3      	str	r3, [r4, #12]
 800f97c:	e7d0      	b.n	800f920 <_scanf_float+0x364>
 800f97e:	9b04      	ldr	r3, [sp, #16]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d0e4      	beq.n	800f94e <_scanf_float+0x392>
 800f984:	9905      	ldr	r1, [sp, #20]
 800f986:	230a      	movs	r3, #10
 800f988:	3101      	adds	r1, #1
 800f98a:	4640      	mov	r0, r8
 800f98c:	f002 fdc8 	bl	8012520 <_strtol_r>
 800f990:	9b04      	ldr	r3, [sp, #16]
 800f992:	9e05      	ldr	r6, [sp, #20]
 800f994:	1ac2      	subs	r2, r0, r3
 800f996:	e7d0      	b.n	800f93a <_scanf_float+0x37e>
 800f998:	f011 0f04 	tst.w	r1, #4
 800f99c:	9903      	ldr	r1, [sp, #12]
 800f99e:	600a      	str	r2, [r1, #0]
 800f9a0:	d1e6      	bne.n	800f970 <_scanf_float+0x3b4>
 800f9a2:	681d      	ldr	r5, [r3, #0]
 800f9a4:	4632      	mov	r2, r6
 800f9a6:	463b      	mov	r3, r7
 800f9a8:	4630      	mov	r0, r6
 800f9aa:	4639      	mov	r1, r7
 800f9ac:	f7f1 f8ee 	bl	8000b8c <__aeabi_dcmpun>
 800f9b0:	b128      	cbz	r0, 800f9be <_scanf_float+0x402>
 800f9b2:	4808      	ldr	r0, [pc, #32]	@ (800f9d4 <_scanf_float+0x418>)
 800f9b4:	f000 fe30 	bl	8010618 <nanf>
 800f9b8:	ed85 0a00 	vstr	s0, [r5]
 800f9bc:	e7db      	b.n	800f976 <_scanf_float+0x3ba>
 800f9be:	4630      	mov	r0, r6
 800f9c0:	4639      	mov	r1, r7
 800f9c2:	f7f1 f941 	bl	8000c48 <__aeabi_d2f>
 800f9c6:	6028      	str	r0, [r5, #0]
 800f9c8:	e7d5      	b.n	800f976 <_scanf_float+0x3ba>
 800f9ca:	2700      	movs	r7, #0
 800f9cc:	e62e      	b.n	800f62c <_scanf_float+0x70>
 800f9ce:	bf00      	nop
 800f9d0:	0801457a 	.word	0x0801457a
 800f9d4:	08014543 	.word	0x08014543

0800f9d8 <_fclose_r>:
 800f9d8:	b570      	push	{r4, r5, r6, lr}
 800f9da:	4605      	mov	r5, r0
 800f9dc:	460c      	mov	r4, r1
 800f9de:	b1b9      	cbz	r1, 800fa10 <_fclose_r+0x38>
 800f9e0:	b118      	cbz	r0, 800f9ea <_fclose_r+0x12>
 800f9e2:	6a03      	ldr	r3, [r0, #32]
 800f9e4:	b90b      	cbnz	r3, 800f9ea <_fclose_r+0x12>
 800f9e6:	f000 f9f3 	bl	800fdd0 <__sinit>
 800f9ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f9ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9f0:	07d6      	lsls	r6, r2, #31
 800f9f2:	d404      	bmi.n	800f9fe <_fclose_r+0x26>
 800f9f4:	0598      	lsls	r0, r3, #22
 800f9f6:	d40e      	bmi.n	800fa16 <_fclose_r+0x3e>
 800f9f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f9fa:	f000 fdf3 	bl	80105e4 <__retarget_lock_acquire_recursive>
 800f9fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa02:	b943      	cbnz	r3, 800fa16 <_fclose_r+0x3e>
 800fa04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fa06:	07d9      	lsls	r1, r3, #31
 800fa08:	d402      	bmi.n	800fa10 <_fclose_r+0x38>
 800fa0a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fa0c:	f000 fdeb 	bl	80105e6 <__retarget_lock_release_recursive>
 800fa10:	2600      	movs	r6, #0
 800fa12:	4630      	mov	r0, r6
 800fa14:	bd70      	pop	{r4, r5, r6, pc}
 800fa16:	4621      	mov	r1, r4
 800fa18:	4628      	mov	r0, r5
 800fa1a:	f000 f83b 	bl	800fa94 <__sflush_r>
 800fa1e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fa20:	4606      	mov	r6, r0
 800fa22:	b133      	cbz	r3, 800fa32 <_fclose_r+0x5a>
 800fa24:	6a21      	ldr	r1, [r4, #32]
 800fa26:	4628      	mov	r0, r5
 800fa28:	4798      	blx	r3
 800fa2a:	2800      	cmp	r0, #0
 800fa2c:	bfb8      	it	lt
 800fa2e:	f04f 36ff 	movlt.w	r6, #4294967295
 800fa32:	89a3      	ldrh	r3, [r4, #12]
 800fa34:	061a      	lsls	r2, r3, #24
 800fa36:	d503      	bpl.n	800fa40 <_fclose_r+0x68>
 800fa38:	6921      	ldr	r1, [r4, #16]
 800fa3a:	4628      	mov	r0, r5
 800fa3c:	f001 fc54 	bl	80112e8 <_free_r>
 800fa40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fa42:	b141      	cbz	r1, 800fa56 <_fclose_r+0x7e>
 800fa44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fa48:	4299      	cmp	r1, r3
 800fa4a:	d002      	beq.n	800fa52 <_fclose_r+0x7a>
 800fa4c:	4628      	mov	r0, r5
 800fa4e:	f001 fc4b 	bl	80112e8 <_free_r>
 800fa52:	2300      	movs	r3, #0
 800fa54:	6363      	str	r3, [r4, #52]	@ 0x34
 800fa56:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800fa58:	b121      	cbz	r1, 800fa64 <_fclose_r+0x8c>
 800fa5a:	4628      	mov	r0, r5
 800fa5c:	f001 fc44 	bl	80112e8 <_free_r>
 800fa60:	2300      	movs	r3, #0
 800fa62:	64a3      	str	r3, [r4, #72]	@ 0x48
 800fa64:	f000 f956 	bl	800fd14 <__sfp_lock_acquire>
 800fa68:	2300      	movs	r3, #0
 800fa6a:	81a3      	strh	r3, [r4, #12]
 800fa6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fa6e:	07db      	lsls	r3, r3, #31
 800fa70:	d402      	bmi.n	800fa78 <_fclose_r+0xa0>
 800fa72:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fa74:	f000 fdb7 	bl	80105e6 <__retarget_lock_release_recursive>
 800fa78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fa7a:	f000 fdb2 	bl	80105e2 <__retarget_lock_close_recursive>
 800fa7e:	f000 f94f 	bl	800fd20 <__sfp_lock_release>
 800fa82:	e7c6      	b.n	800fa12 <_fclose_r+0x3a>

0800fa84 <fclose>:
 800fa84:	4b02      	ldr	r3, [pc, #8]	@ (800fa90 <fclose+0xc>)
 800fa86:	4601      	mov	r1, r0
 800fa88:	6818      	ldr	r0, [r3, #0]
 800fa8a:	f7ff bfa5 	b.w	800f9d8 <_fclose_r>
 800fa8e:	bf00      	nop
 800fa90:	200001c0 	.word	0x200001c0

0800fa94 <__sflush_r>:
 800fa94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fa98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa9c:	0716      	lsls	r6, r2, #28
 800fa9e:	4605      	mov	r5, r0
 800faa0:	460c      	mov	r4, r1
 800faa2:	d454      	bmi.n	800fb4e <__sflush_r+0xba>
 800faa4:	684b      	ldr	r3, [r1, #4]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	dc02      	bgt.n	800fab0 <__sflush_r+0x1c>
 800faaa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800faac:	2b00      	cmp	r3, #0
 800faae:	dd48      	ble.n	800fb42 <__sflush_r+0xae>
 800fab0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fab2:	2e00      	cmp	r6, #0
 800fab4:	d045      	beq.n	800fb42 <__sflush_r+0xae>
 800fab6:	2300      	movs	r3, #0
 800fab8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fabc:	682f      	ldr	r7, [r5, #0]
 800fabe:	6a21      	ldr	r1, [r4, #32]
 800fac0:	602b      	str	r3, [r5, #0]
 800fac2:	d030      	beq.n	800fb26 <__sflush_r+0x92>
 800fac4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fac6:	89a3      	ldrh	r3, [r4, #12]
 800fac8:	0759      	lsls	r1, r3, #29
 800faca:	d505      	bpl.n	800fad8 <__sflush_r+0x44>
 800facc:	6863      	ldr	r3, [r4, #4]
 800face:	1ad2      	subs	r2, r2, r3
 800fad0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fad2:	b10b      	cbz	r3, 800fad8 <__sflush_r+0x44>
 800fad4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fad6:	1ad2      	subs	r2, r2, r3
 800fad8:	2300      	movs	r3, #0
 800fada:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fadc:	6a21      	ldr	r1, [r4, #32]
 800fade:	4628      	mov	r0, r5
 800fae0:	47b0      	blx	r6
 800fae2:	1c43      	adds	r3, r0, #1
 800fae4:	89a3      	ldrh	r3, [r4, #12]
 800fae6:	d106      	bne.n	800faf6 <__sflush_r+0x62>
 800fae8:	6829      	ldr	r1, [r5, #0]
 800faea:	291d      	cmp	r1, #29
 800faec:	d82b      	bhi.n	800fb46 <__sflush_r+0xb2>
 800faee:	4a2a      	ldr	r2, [pc, #168]	@ (800fb98 <__sflush_r+0x104>)
 800faf0:	40ca      	lsrs	r2, r1
 800faf2:	07d6      	lsls	r6, r2, #31
 800faf4:	d527      	bpl.n	800fb46 <__sflush_r+0xb2>
 800faf6:	2200      	movs	r2, #0
 800faf8:	6062      	str	r2, [r4, #4]
 800fafa:	04d9      	lsls	r1, r3, #19
 800fafc:	6922      	ldr	r2, [r4, #16]
 800fafe:	6022      	str	r2, [r4, #0]
 800fb00:	d504      	bpl.n	800fb0c <__sflush_r+0x78>
 800fb02:	1c42      	adds	r2, r0, #1
 800fb04:	d101      	bne.n	800fb0a <__sflush_r+0x76>
 800fb06:	682b      	ldr	r3, [r5, #0]
 800fb08:	b903      	cbnz	r3, 800fb0c <__sflush_r+0x78>
 800fb0a:	6560      	str	r0, [r4, #84]	@ 0x54
 800fb0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fb0e:	602f      	str	r7, [r5, #0]
 800fb10:	b1b9      	cbz	r1, 800fb42 <__sflush_r+0xae>
 800fb12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fb16:	4299      	cmp	r1, r3
 800fb18:	d002      	beq.n	800fb20 <__sflush_r+0x8c>
 800fb1a:	4628      	mov	r0, r5
 800fb1c:	f001 fbe4 	bl	80112e8 <_free_r>
 800fb20:	2300      	movs	r3, #0
 800fb22:	6363      	str	r3, [r4, #52]	@ 0x34
 800fb24:	e00d      	b.n	800fb42 <__sflush_r+0xae>
 800fb26:	2301      	movs	r3, #1
 800fb28:	4628      	mov	r0, r5
 800fb2a:	47b0      	blx	r6
 800fb2c:	4602      	mov	r2, r0
 800fb2e:	1c50      	adds	r0, r2, #1
 800fb30:	d1c9      	bne.n	800fac6 <__sflush_r+0x32>
 800fb32:	682b      	ldr	r3, [r5, #0]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d0c6      	beq.n	800fac6 <__sflush_r+0x32>
 800fb38:	2b1d      	cmp	r3, #29
 800fb3a:	d001      	beq.n	800fb40 <__sflush_r+0xac>
 800fb3c:	2b16      	cmp	r3, #22
 800fb3e:	d11e      	bne.n	800fb7e <__sflush_r+0xea>
 800fb40:	602f      	str	r7, [r5, #0]
 800fb42:	2000      	movs	r0, #0
 800fb44:	e022      	b.n	800fb8c <__sflush_r+0xf8>
 800fb46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb4a:	b21b      	sxth	r3, r3
 800fb4c:	e01b      	b.n	800fb86 <__sflush_r+0xf2>
 800fb4e:	690f      	ldr	r7, [r1, #16]
 800fb50:	2f00      	cmp	r7, #0
 800fb52:	d0f6      	beq.n	800fb42 <__sflush_r+0xae>
 800fb54:	0793      	lsls	r3, r2, #30
 800fb56:	680e      	ldr	r6, [r1, #0]
 800fb58:	bf08      	it	eq
 800fb5a:	694b      	ldreq	r3, [r1, #20]
 800fb5c:	600f      	str	r7, [r1, #0]
 800fb5e:	bf18      	it	ne
 800fb60:	2300      	movne	r3, #0
 800fb62:	eba6 0807 	sub.w	r8, r6, r7
 800fb66:	608b      	str	r3, [r1, #8]
 800fb68:	f1b8 0f00 	cmp.w	r8, #0
 800fb6c:	dde9      	ble.n	800fb42 <__sflush_r+0xae>
 800fb6e:	6a21      	ldr	r1, [r4, #32]
 800fb70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fb72:	4643      	mov	r3, r8
 800fb74:	463a      	mov	r2, r7
 800fb76:	4628      	mov	r0, r5
 800fb78:	47b0      	blx	r6
 800fb7a:	2800      	cmp	r0, #0
 800fb7c:	dc08      	bgt.n	800fb90 <__sflush_r+0xfc>
 800fb7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb86:	81a3      	strh	r3, [r4, #12]
 800fb88:	f04f 30ff 	mov.w	r0, #4294967295
 800fb8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb90:	4407      	add	r7, r0
 800fb92:	eba8 0800 	sub.w	r8, r8, r0
 800fb96:	e7e7      	b.n	800fb68 <__sflush_r+0xd4>
 800fb98:	20400001 	.word	0x20400001

0800fb9c <_fflush_r>:
 800fb9c:	b538      	push	{r3, r4, r5, lr}
 800fb9e:	690b      	ldr	r3, [r1, #16]
 800fba0:	4605      	mov	r5, r0
 800fba2:	460c      	mov	r4, r1
 800fba4:	b913      	cbnz	r3, 800fbac <_fflush_r+0x10>
 800fba6:	2500      	movs	r5, #0
 800fba8:	4628      	mov	r0, r5
 800fbaa:	bd38      	pop	{r3, r4, r5, pc}
 800fbac:	b118      	cbz	r0, 800fbb6 <_fflush_r+0x1a>
 800fbae:	6a03      	ldr	r3, [r0, #32]
 800fbb0:	b90b      	cbnz	r3, 800fbb6 <_fflush_r+0x1a>
 800fbb2:	f000 f90d 	bl	800fdd0 <__sinit>
 800fbb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d0f3      	beq.n	800fba6 <_fflush_r+0xa>
 800fbbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fbc0:	07d0      	lsls	r0, r2, #31
 800fbc2:	d404      	bmi.n	800fbce <_fflush_r+0x32>
 800fbc4:	0599      	lsls	r1, r3, #22
 800fbc6:	d402      	bmi.n	800fbce <_fflush_r+0x32>
 800fbc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fbca:	f000 fd0b 	bl	80105e4 <__retarget_lock_acquire_recursive>
 800fbce:	4628      	mov	r0, r5
 800fbd0:	4621      	mov	r1, r4
 800fbd2:	f7ff ff5f 	bl	800fa94 <__sflush_r>
 800fbd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fbd8:	07da      	lsls	r2, r3, #31
 800fbda:	4605      	mov	r5, r0
 800fbdc:	d4e4      	bmi.n	800fba8 <_fflush_r+0xc>
 800fbde:	89a3      	ldrh	r3, [r4, #12]
 800fbe0:	059b      	lsls	r3, r3, #22
 800fbe2:	d4e1      	bmi.n	800fba8 <_fflush_r+0xc>
 800fbe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fbe6:	f000 fcfe 	bl	80105e6 <__retarget_lock_release_recursive>
 800fbea:	e7dd      	b.n	800fba8 <_fflush_r+0xc>

0800fbec <fflush>:
 800fbec:	4601      	mov	r1, r0
 800fbee:	b920      	cbnz	r0, 800fbfa <fflush+0xe>
 800fbf0:	4a04      	ldr	r2, [pc, #16]	@ (800fc04 <fflush+0x18>)
 800fbf2:	4905      	ldr	r1, [pc, #20]	@ (800fc08 <fflush+0x1c>)
 800fbf4:	4805      	ldr	r0, [pc, #20]	@ (800fc0c <fflush+0x20>)
 800fbf6:	f000 b915 	b.w	800fe24 <_fwalk_sglue>
 800fbfa:	4b05      	ldr	r3, [pc, #20]	@ (800fc10 <fflush+0x24>)
 800fbfc:	6818      	ldr	r0, [r3, #0]
 800fbfe:	f7ff bfcd 	b.w	800fb9c <_fflush_r>
 800fc02:	bf00      	nop
 800fc04:	20000048 	.word	0x20000048
 800fc08:	0800fb9d 	.word	0x0800fb9d
 800fc0c:	200001c4 	.word	0x200001c4
 800fc10:	200001c0 	.word	0x200001c0

0800fc14 <std>:
 800fc14:	2300      	movs	r3, #0
 800fc16:	b510      	push	{r4, lr}
 800fc18:	4604      	mov	r4, r0
 800fc1a:	e9c0 3300 	strd	r3, r3, [r0]
 800fc1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fc22:	6083      	str	r3, [r0, #8]
 800fc24:	8181      	strh	r1, [r0, #12]
 800fc26:	6643      	str	r3, [r0, #100]	@ 0x64
 800fc28:	81c2      	strh	r2, [r0, #14]
 800fc2a:	6183      	str	r3, [r0, #24]
 800fc2c:	4619      	mov	r1, r3
 800fc2e:	2208      	movs	r2, #8
 800fc30:	305c      	adds	r0, #92	@ 0x5c
 800fc32:	f000 fb73 	bl	801031c <memset>
 800fc36:	4b0d      	ldr	r3, [pc, #52]	@ (800fc6c <std+0x58>)
 800fc38:	6263      	str	r3, [r4, #36]	@ 0x24
 800fc3a:	4b0d      	ldr	r3, [pc, #52]	@ (800fc70 <std+0x5c>)
 800fc3c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fc3e:	4b0d      	ldr	r3, [pc, #52]	@ (800fc74 <std+0x60>)
 800fc40:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fc42:	4b0d      	ldr	r3, [pc, #52]	@ (800fc78 <std+0x64>)
 800fc44:	6323      	str	r3, [r4, #48]	@ 0x30
 800fc46:	4b0d      	ldr	r3, [pc, #52]	@ (800fc7c <std+0x68>)
 800fc48:	6224      	str	r4, [r4, #32]
 800fc4a:	429c      	cmp	r4, r3
 800fc4c:	d006      	beq.n	800fc5c <std+0x48>
 800fc4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fc52:	4294      	cmp	r4, r2
 800fc54:	d002      	beq.n	800fc5c <std+0x48>
 800fc56:	33d0      	adds	r3, #208	@ 0xd0
 800fc58:	429c      	cmp	r4, r3
 800fc5a:	d105      	bne.n	800fc68 <std+0x54>
 800fc5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fc60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc64:	f000 bcbc 	b.w	80105e0 <__retarget_lock_init_recursive>
 800fc68:	bd10      	pop	{r4, pc}
 800fc6a:	bf00      	nop
 800fc6c:	0800ffa5 	.word	0x0800ffa5
 800fc70:	0800ffc7 	.word	0x0800ffc7
 800fc74:	0800ffff 	.word	0x0800ffff
 800fc78:	08010023 	.word	0x08010023
 800fc7c:	20000568 	.word	0x20000568

0800fc80 <stdio_exit_handler>:
 800fc80:	4a02      	ldr	r2, [pc, #8]	@ (800fc8c <stdio_exit_handler+0xc>)
 800fc82:	4903      	ldr	r1, [pc, #12]	@ (800fc90 <stdio_exit_handler+0x10>)
 800fc84:	4803      	ldr	r0, [pc, #12]	@ (800fc94 <stdio_exit_handler+0x14>)
 800fc86:	f000 b8cd 	b.w	800fe24 <_fwalk_sglue>
 800fc8a:	bf00      	nop
 800fc8c:	20000048 	.word	0x20000048
 800fc90:	0800fb9d 	.word	0x0800fb9d
 800fc94:	200001c4 	.word	0x200001c4

0800fc98 <cleanup_stdio>:
 800fc98:	6841      	ldr	r1, [r0, #4]
 800fc9a:	4b0c      	ldr	r3, [pc, #48]	@ (800fccc <cleanup_stdio+0x34>)
 800fc9c:	4299      	cmp	r1, r3
 800fc9e:	b510      	push	{r4, lr}
 800fca0:	4604      	mov	r4, r0
 800fca2:	d001      	beq.n	800fca8 <cleanup_stdio+0x10>
 800fca4:	f7ff ff7a 	bl	800fb9c <_fflush_r>
 800fca8:	68a1      	ldr	r1, [r4, #8]
 800fcaa:	4b09      	ldr	r3, [pc, #36]	@ (800fcd0 <cleanup_stdio+0x38>)
 800fcac:	4299      	cmp	r1, r3
 800fcae:	d002      	beq.n	800fcb6 <cleanup_stdio+0x1e>
 800fcb0:	4620      	mov	r0, r4
 800fcb2:	f7ff ff73 	bl	800fb9c <_fflush_r>
 800fcb6:	68e1      	ldr	r1, [r4, #12]
 800fcb8:	4b06      	ldr	r3, [pc, #24]	@ (800fcd4 <cleanup_stdio+0x3c>)
 800fcba:	4299      	cmp	r1, r3
 800fcbc:	d004      	beq.n	800fcc8 <cleanup_stdio+0x30>
 800fcbe:	4620      	mov	r0, r4
 800fcc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fcc4:	f7ff bf6a 	b.w	800fb9c <_fflush_r>
 800fcc8:	bd10      	pop	{r4, pc}
 800fcca:	bf00      	nop
 800fccc:	20000568 	.word	0x20000568
 800fcd0:	200005d0 	.word	0x200005d0
 800fcd4:	20000638 	.word	0x20000638

0800fcd8 <global_stdio_init.part.0>:
 800fcd8:	b510      	push	{r4, lr}
 800fcda:	4b0b      	ldr	r3, [pc, #44]	@ (800fd08 <global_stdio_init.part.0+0x30>)
 800fcdc:	4c0b      	ldr	r4, [pc, #44]	@ (800fd0c <global_stdio_init.part.0+0x34>)
 800fcde:	4a0c      	ldr	r2, [pc, #48]	@ (800fd10 <global_stdio_init.part.0+0x38>)
 800fce0:	601a      	str	r2, [r3, #0]
 800fce2:	4620      	mov	r0, r4
 800fce4:	2200      	movs	r2, #0
 800fce6:	2104      	movs	r1, #4
 800fce8:	f7ff ff94 	bl	800fc14 <std>
 800fcec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fcf0:	2201      	movs	r2, #1
 800fcf2:	2109      	movs	r1, #9
 800fcf4:	f7ff ff8e 	bl	800fc14 <std>
 800fcf8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fcfc:	2202      	movs	r2, #2
 800fcfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd02:	2112      	movs	r1, #18
 800fd04:	f7ff bf86 	b.w	800fc14 <std>
 800fd08:	200006a0 	.word	0x200006a0
 800fd0c:	20000568 	.word	0x20000568
 800fd10:	0800fc81 	.word	0x0800fc81

0800fd14 <__sfp_lock_acquire>:
 800fd14:	4801      	ldr	r0, [pc, #4]	@ (800fd1c <__sfp_lock_acquire+0x8>)
 800fd16:	f000 bc65 	b.w	80105e4 <__retarget_lock_acquire_recursive>
 800fd1a:	bf00      	nop
 800fd1c:	200006a8 	.word	0x200006a8

0800fd20 <__sfp_lock_release>:
 800fd20:	4801      	ldr	r0, [pc, #4]	@ (800fd28 <__sfp_lock_release+0x8>)
 800fd22:	f000 bc60 	b.w	80105e6 <__retarget_lock_release_recursive>
 800fd26:	bf00      	nop
 800fd28:	200006a8 	.word	0x200006a8

0800fd2c <__sfp>:
 800fd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd2e:	4607      	mov	r7, r0
 800fd30:	f7ff fff0 	bl	800fd14 <__sfp_lock_acquire>
 800fd34:	4b23      	ldr	r3, [pc, #140]	@ (800fdc4 <__sfp+0x98>)
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	b90b      	cbnz	r3, 800fd3e <__sfp+0x12>
 800fd3a:	f7ff ffcd 	bl	800fcd8 <global_stdio_init.part.0>
 800fd3e:	4e22      	ldr	r6, [pc, #136]	@ (800fdc8 <__sfp+0x9c>)
 800fd40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fd44:	3b01      	subs	r3, #1
 800fd46:	d50f      	bpl.n	800fd68 <__sfp+0x3c>
 800fd48:	6835      	ldr	r5, [r6, #0]
 800fd4a:	2d00      	cmp	r5, #0
 800fd4c:	d137      	bne.n	800fdbe <__sfp+0x92>
 800fd4e:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 800fd52:	4638      	mov	r0, r7
 800fd54:	f7fe f89c 	bl	800de90 <_malloc_r>
 800fd58:	4604      	mov	r4, r0
 800fd5a:	bb28      	cbnz	r0, 800fda8 <__sfp+0x7c>
 800fd5c:	6030      	str	r0, [r6, #0]
 800fd5e:	f7ff ffdf 	bl	800fd20 <__sfp_lock_release>
 800fd62:	230c      	movs	r3, #12
 800fd64:	603b      	str	r3, [r7, #0]
 800fd66:	e01b      	b.n	800fda0 <__sfp+0x74>
 800fd68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fd6c:	b9d5      	cbnz	r5, 800fda4 <__sfp+0x78>
 800fd6e:	4b17      	ldr	r3, [pc, #92]	@ (800fdcc <__sfp+0xa0>)
 800fd70:	60e3      	str	r3, [r4, #12]
 800fd72:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fd76:	6665      	str	r5, [r4, #100]	@ 0x64
 800fd78:	f000 fc32 	bl	80105e0 <__retarget_lock_init_recursive>
 800fd7c:	f7ff ffd0 	bl	800fd20 <__sfp_lock_release>
 800fd80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fd84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fd88:	6025      	str	r5, [r4, #0]
 800fd8a:	61a5      	str	r5, [r4, #24]
 800fd8c:	2208      	movs	r2, #8
 800fd8e:	4629      	mov	r1, r5
 800fd90:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 800fd94:	f000 fac2 	bl	801031c <memset>
 800fd98:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800fd9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 800fda0:	4620      	mov	r0, r4
 800fda2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fda4:	3468      	adds	r4, #104	@ 0x68
 800fda6:	e7cd      	b.n	800fd44 <__sfp+0x18>
 800fda8:	2304      	movs	r3, #4
 800fdaa:	6005      	str	r5, [r0, #0]
 800fdac:	6043      	str	r3, [r0, #4]
 800fdae:	300c      	adds	r0, #12
 800fdb0:	60a0      	str	r0, [r4, #8]
 800fdb2:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 800fdb6:	4629      	mov	r1, r5
 800fdb8:	f000 fab0 	bl	801031c <memset>
 800fdbc:	6034      	str	r4, [r6, #0]
 800fdbe:	6836      	ldr	r6, [r6, #0]
 800fdc0:	e7be      	b.n	800fd40 <__sfp+0x14>
 800fdc2:	bf00      	nop
 800fdc4:	200006a0 	.word	0x200006a0
 800fdc8:	20000048 	.word	0x20000048
 800fdcc:	ffff0001 	.word	0xffff0001

0800fdd0 <__sinit>:
 800fdd0:	b510      	push	{r4, lr}
 800fdd2:	4604      	mov	r4, r0
 800fdd4:	f7ff ff9e 	bl	800fd14 <__sfp_lock_acquire>
 800fdd8:	6a23      	ldr	r3, [r4, #32]
 800fdda:	b11b      	cbz	r3, 800fde4 <__sinit+0x14>
 800fddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fde0:	f7ff bf9e 	b.w	800fd20 <__sfp_lock_release>
 800fde4:	4b04      	ldr	r3, [pc, #16]	@ (800fdf8 <__sinit+0x28>)
 800fde6:	6223      	str	r3, [r4, #32]
 800fde8:	4b04      	ldr	r3, [pc, #16]	@ (800fdfc <__sinit+0x2c>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d1f5      	bne.n	800fddc <__sinit+0xc>
 800fdf0:	f7ff ff72 	bl	800fcd8 <global_stdio_init.part.0>
 800fdf4:	e7f2      	b.n	800fddc <__sinit+0xc>
 800fdf6:	bf00      	nop
 800fdf8:	0800fc99 	.word	0x0800fc99
 800fdfc:	200006a0 	.word	0x200006a0

0800fe00 <fiprintf>:
 800fe00:	b40e      	push	{r1, r2, r3}
 800fe02:	b503      	push	{r0, r1, lr}
 800fe04:	4601      	mov	r1, r0
 800fe06:	ab03      	add	r3, sp, #12
 800fe08:	4805      	ldr	r0, [pc, #20]	@ (800fe20 <fiprintf+0x20>)
 800fe0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe0e:	6800      	ldr	r0, [r0, #0]
 800fe10:	9301      	str	r3, [sp, #4]
 800fe12:	f002 fd15 	bl	8012840 <_vfiprintf_r>
 800fe16:	b002      	add	sp, #8
 800fe18:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe1c:	b003      	add	sp, #12
 800fe1e:	4770      	bx	lr
 800fe20:	200001c0 	.word	0x200001c0

0800fe24 <_fwalk_sglue>:
 800fe24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe28:	4607      	mov	r7, r0
 800fe2a:	4688      	mov	r8, r1
 800fe2c:	4614      	mov	r4, r2
 800fe2e:	2600      	movs	r6, #0
 800fe30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fe34:	f1b9 0901 	subs.w	r9, r9, #1
 800fe38:	d505      	bpl.n	800fe46 <_fwalk_sglue+0x22>
 800fe3a:	6824      	ldr	r4, [r4, #0]
 800fe3c:	2c00      	cmp	r4, #0
 800fe3e:	d1f7      	bne.n	800fe30 <_fwalk_sglue+0xc>
 800fe40:	4630      	mov	r0, r6
 800fe42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe46:	89ab      	ldrh	r3, [r5, #12]
 800fe48:	2b01      	cmp	r3, #1
 800fe4a:	d907      	bls.n	800fe5c <_fwalk_sglue+0x38>
 800fe4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe50:	3301      	adds	r3, #1
 800fe52:	d003      	beq.n	800fe5c <_fwalk_sglue+0x38>
 800fe54:	4629      	mov	r1, r5
 800fe56:	4638      	mov	r0, r7
 800fe58:	47c0      	blx	r8
 800fe5a:	4306      	orrs	r6, r0
 800fe5c:	3568      	adds	r5, #104	@ 0x68
 800fe5e:	e7e9      	b.n	800fe34 <_fwalk_sglue+0x10>

0800fe60 <getchar>:
 800fe60:	4b02      	ldr	r3, [pc, #8]	@ (800fe6c <getchar+0xc>)
 800fe62:	6818      	ldr	r0, [r3, #0]
 800fe64:	6841      	ldr	r1, [r0, #4]
 800fe66:	f002 be03 	b.w	8012a70 <_getc_r>
 800fe6a:	bf00      	nop
 800fe6c:	200001c0 	.word	0x200001c0

0800fe70 <iprintf>:
 800fe70:	b40f      	push	{r0, r1, r2, r3}
 800fe72:	b507      	push	{r0, r1, r2, lr}
 800fe74:	4906      	ldr	r1, [pc, #24]	@ (800fe90 <iprintf+0x20>)
 800fe76:	ab04      	add	r3, sp, #16
 800fe78:	6808      	ldr	r0, [r1, #0]
 800fe7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe7e:	6881      	ldr	r1, [r0, #8]
 800fe80:	9301      	str	r3, [sp, #4]
 800fe82:	f002 fcdd 	bl	8012840 <_vfiprintf_r>
 800fe86:	b003      	add	sp, #12
 800fe88:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe8c:	b004      	add	sp, #16
 800fe8e:	4770      	bx	lr
 800fe90:	200001c0 	.word	0x200001c0

0800fe94 <putchar>:
 800fe94:	4b02      	ldr	r3, [pc, #8]	@ (800fea0 <putchar+0xc>)
 800fe96:	4601      	mov	r1, r0
 800fe98:	6818      	ldr	r0, [r3, #0]
 800fe9a:	6882      	ldr	r2, [r0, #8]
 800fe9c:	f002 be75 	b.w	8012b8a <_putc_r>
 800fea0:	200001c0 	.word	0x200001c0

0800fea4 <_puts_r>:
 800fea4:	6a03      	ldr	r3, [r0, #32]
 800fea6:	b570      	push	{r4, r5, r6, lr}
 800fea8:	6884      	ldr	r4, [r0, #8]
 800feaa:	4605      	mov	r5, r0
 800feac:	460e      	mov	r6, r1
 800feae:	b90b      	cbnz	r3, 800feb4 <_puts_r+0x10>
 800feb0:	f7ff ff8e 	bl	800fdd0 <__sinit>
 800feb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800feb6:	07db      	lsls	r3, r3, #31
 800feb8:	d405      	bmi.n	800fec6 <_puts_r+0x22>
 800feba:	89a3      	ldrh	r3, [r4, #12]
 800febc:	0598      	lsls	r0, r3, #22
 800febe:	d402      	bmi.n	800fec6 <_puts_r+0x22>
 800fec0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fec2:	f000 fb8f 	bl	80105e4 <__retarget_lock_acquire_recursive>
 800fec6:	89a3      	ldrh	r3, [r4, #12]
 800fec8:	0719      	lsls	r1, r3, #28
 800feca:	d502      	bpl.n	800fed2 <_puts_r+0x2e>
 800fecc:	6923      	ldr	r3, [r4, #16]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d135      	bne.n	800ff3e <_puts_r+0x9a>
 800fed2:	4621      	mov	r1, r4
 800fed4:	4628      	mov	r0, r5
 800fed6:	f000 f8e7 	bl	80100a8 <__swsetup_r>
 800feda:	b380      	cbz	r0, 800ff3e <_puts_r+0x9a>
 800fedc:	f04f 35ff 	mov.w	r5, #4294967295
 800fee0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fee2:	07da      	lsls	r2, r3, #31
 800fee4:	d405      	bmi.n	800fef2 <_puts_r+0x4e>
 800fee6:	89a3      	ldrh	r3, [r4, #12]
 800fee8:	059b      	lsls	r3, r3, #22
 800feea:	d402      	bmi.n	800fef2 <_puts_r+0x4e>
 800feec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800feee:	f000 fb7a 	bl	80105e6 <__retarget_lock_release_recursive>
 800fef2:	4628      	mov	r0, r5
 800fef4:	bd70      	pop	{r4, r5, r6, pc}
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	da04      	bge.n	800ff04 <_puts_r+0x60>
 800fefa:	69a2      	ldr	r2, [r4, #24]
 800fefc:	429a      	cmp	r2, r3
 800fefe:	dc17      	bgt.n	800ff30 <_puts_r+0x8c>
 800ff00:	290a      	cmp	r1, #10
 800ff02:	d015      	beq.n	800ff30 <_puts_r+0x8c>
 800ff04:	6823      	ldr	r3, [r4, #0]
 800ff06:	1c5a      	adds	r2, r3, #1
 800ff08:	6022      	str	r2, [r4, #0]
 800ff0a:	7019      	strb	r1, [r3, #0]
 800ff0c:	68a3      	ldr	r3, [r4, #8]
 800ff0e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ff12:	3b01      	subs	r3, #1
 800ff14:	60a3      	str	r3, [r4, #8]
 800ff16:	2900      	cmp	r1, #0
 800ff18:	d1ed      	bne.n	800fef6 <_puts_r+0x52>
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	da11      	bge.n	800ff42 <_puts_r+0x9e>
 800ff1e:	4622      	mov	r2, r4
 800ff20:	210a      	movs	r1, #10
 800ff22:	4628      	mov	r0, r5
 800ff24:	f000 f881 	bl	801002a <__swbuf_r>
 800ff28:	3001      	adds	r0, #1
 800ff2a:	d0d7      	beq.n	800fedc <_puts_r+0x38>
 800ff2c:	250a      	movs	r5, #10
 800ff2e:	e7d7      	b.n	800fee0 <_puts_r+0x3c>
 800ff30:	4622      	mov	r2, r4
 800ff32:	4628      	mov	r0, r5
 800ff34:	f000 f879 	bl	801002a <__swbuf_r>
 800ff38:	3001      	adds	r0, #1
 800ff3a:	d1e7      	bne.n	800ff0c <_puts_r+0x68>
 800ff3c:	e7ce      	b.n	800fedc <_puts_r+0x38>
 800ff3e:	3e01      	subs	r6, #1
 800ff40:	e7e4      	b.n	800ff0c <_puts_r+0x68>
 800ff42:	6823      	ldr	r3, [r4, #0]
 800ff44:	1c5a      	adds	r2, r3, #1
 800ff46:	6022      	str	r2, [r4, #0]
 800ff48:	220a      	movs	r2, #10
 800ff4a:	701a      	strb	r2, [r3, #0]
 800ff4c:	e7ee      	b.n	800ff2c <_puts_r+0x88>
	...

0800ff50 <puts>:
 800ff50:	4b02      	ldr	r3, [pc, #8]	@ (800ff5c <puts+0xc>)
 800ff52:	4601      	mov	r1, r0
 800ff54:	6818      	ldr	r0, [r3, #0]
 800ff56:	f7ff bfa5 	b.w	800fea4 <_puts_r>
 800ff5a:	bf00      	nop
 800ff5c:	200001c0 	.word	0x200001c0

0800ff60 <siprintf>:
 800ff60:	b40e      	push	{r1, r2, r3}
 800ff62:	b510      	push	{r4, lr}
 800ff64:	b09d      	sub	sp, #116	@ 0x74
 800ff66:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ff68:	9002      	str	r0, [sp, #8]
 800ff6a:	9006      	str	r0, [sp, #24]
 800ff6c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ff70:	480a      	ldr	r0, [pc, #40]	@ (800ff9c <siprintf+0x3c>)
 800ff72:	9107      	str	r1, [sp, #28]
 800ff74:	9104      	str	r1, [sp, #16]
 800ff76:	490a      	ldr	r1, [pc, #40]	@ (800ffa0 <siprintf+0x40>)
 800ff78:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff7c:	9105      	str	r1, [sp, #20]
 800ff7e:	2400      	movs	r4, #0
 800ff80:	a902      	add	r1, sp, #8
 800ff82:	6800      	ldr	r0, [r0, #0]
 800ff84:	9301      	str	r3, [sp, #4]
 800ff86:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ff88:	f002 fb34 	bl	80125f4 <_svfiprintf_r>
 800ff8c:	9b02      	ldr	r3, [sp, #8]
 800ff8e:	701c      	strb	r4, [r3, #0]
 800ff90:	b01d      	add	sp, #116	@ 0x74
 800ff92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff96:	b003      	add	sp, #12
 800ff98:	4770      	bx	lr
 800ff9a:	bf00      	nop
 800ff9c:	200001c0 	.word	0x200001c0
 800ffa0:	ffff0208 	.word	0xffff0208

0800ffa4 <__sread>:
 800ffa4:	b510      	push	{r4, lr}
 800ffa6:	460c      	mov	r4, r1
 800ffa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffac:	f000 faca 	bl	8010544 <_read_r>
 800ffb0:	2800      	cmp	r0, #0
 800ffb2:	bfab      	itete	ge
 800ffb4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ffb6:	89a3      	ldrhlt	r3, [r4, #12]
 800ffb8:	181b      	addge	r3, r3, r0
 800ffba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ffbe:	bfac      	ite	ge
 800ffc0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ffc2:	81a3      	strhlt	r3, [r4, #12]
 800ffc4:	bd10      	pop	{r4, pc}

0800ffc6 <__swrite>:
 800ffc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffca:	461f      	mov	r7, r3
 800ffcc:	898b      	ldrh	r3, [r1, #12]
 800ffce:	05db      	lsls	r3, r3, #23
 800ffd0:	4605      	mov	r5, r0
 800ffd2:	460c      	mov	r4, r1
 800ffd4:	4616      	mov	r6, r2
 800ffd6:	d505      	bpl.n	800ffe4 <__swrite+0x1e>
 800ffd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffdc:	2302      	movs	r3, #2
 800ffde:	2200      	movs	r2, #0
 800ffe0:	f000 fa9e 	bl	8010520 <_lseek_r>
 800ffe4:	89a3      	ldrh	r3, [r4, #12]
 800ffe6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ffea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ffee:	81a3      	strh	r3, [r4, #12]
 800fff0:	4632      	mov	r2, r6
 800fff2:	463b      	mov	r3, r7
 800fff4:	4628      	mov	r0, r5
 800fff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fffa:	f000 bab5 	b.w	8010568 <_write_r>

0800fffe <__sseek>:
 800fffe:	b510      	push	{r4, lr}
 8010000:	460c      	mov	r4, r1
 8010002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010006:	f000 fa8b 	bl	8010520 <_lseek_r>
 801000a:	1c43      	adds	r3, r0, #1
 801000c:	89a3      	ldrh	r3, [r4, #12]
 801000e:	bf15      	itete	ne
 8010010:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010012:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010016:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801001a:	81a3      	strheq	r3, [r4, #12]
 801001c:	bf18      	it	ne
 801001e:	81a3      	strhne	r3, [r4, #12]
 8010020:	bd10      	pop	{r4, pc}

08010022 <__sclose>:
 8010022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010026:	f000 ba0d 	b.w	8010444 <_close_r>

0801002a <__swbuf_r>:
 801002a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801002c:	460e      	mov	r6, r1
 801002e:	4614      	mov	r4, r2
 8010030:	4605      	mov	r5, r0
 8010032:	b118      	cbz	r0, 801003c <__swbuf_r+0x12>
 8010034:	6a03      	ldr	r3, [r0, #32]
 8010036:	b90b      	cbnz	r3, 801003c <__swbuf_r+0x12>
 8010038:	f7ff feca 	bl	800fdd0 <__sinit>
 801003c:	69a3      	ldr	r3, [r4, #24]
 801003e:	60a3      	str	r3, [r4, #8]
 8010040:	89a3      	ldrh	r3, [r4, #12]
 8010042:	071a      	lsls	r2, r3, #28
 8010044:	d501      	bpl.n	801004a <__swbuf_r+0x20>
 8010046:	6923      	ldr	r3, [r4, #16]
 8010048:	b943      	cbnz	r3, 801005c <__swbuf_r+0x32>
 801004a:	4621      	mov	r1, r4
 801004c:	4628      	mov	r0, r5
 801004e:	f000 f82b 	bl	80100a8 <__swsetup_r>
 8010052:	b118      	cbz	r0, 801005c <__swbuf_r+0x32>
 8010054:	f04f 37ff 	mov.w	r7, #4294967295
 8010058:	4638      	mov	r0, r7
 801005a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801005c:	6823      	ldr	r3, [r4, #0]
 801005e:	6922      	ldr	r2, [r4, #16]
 8010060:	1a98      	subs	r0, r3, r2
 8010062:	6963      	ldr	r3, [r4, #20]
 8010064:	b2f6      	uxtb	r6, r6
 8010066:	4283      	cmp	r3, r0
 8010068:	4637      	mov	r7, r6
 801006a:	dc05      	bgt.n	8010078 <__swbuf_r+0x4e>
 801006c:	4621      	mov	r1, r4
 801006e:	4628      	mov	r0, r5
 8010070:	f7ff fd94 	bl	800fb9c <_fflush_r>
 8010074:	2800      	cmp	r0, #0
 8010076:	d1ed      	bne.n	8010054 <__swbuf_r+0x2a>
 8010078:	68a3      	ldr	r3, [r4, #8]
 801007a:	3b01      	subs	r3, #1
 801007c:	60a3      	str	r3, [r4, #8]
 801007e:	6823      	ldr	r3, [r4, #0]
 8010080:	1c5a      	adds	r2, r3, #1
 8010082:	6022      	str	r2, [r4, #0]
 8010084:	701e      	strb	r6, [r3, #0]
 8010086:	6962      	ldr	r2, [r4, #20]
 8010088:	1c43      	adds	r3, r0, #1
 801008a:	429a      	cmp	r2, r3
 801008c:	d004      	beq.n	8010098 <__swbuf_r+0x6e>
 801008e:	89a3      	ldrh	r3, [r4, #12]
 8010090:	07db      	lsls	r3, r3, #31
 8010092:	d5e1      	bpl.n	8010058 <__swbuf_r+0x2e>
 8010094:	2e0a      	cmp	r6, #10
 8010096:	d1df      	bne.n	8010058 <__swbuf_r+0x2e>
 8010098:	4621      	mov	r1, r4
 801009a:	4628      	mov	r0, r5
 801009c:	f7ff fd7e 	bl	800fb9c <_fflush_r>
 80100a0:	2800      	cmp	r0, #0
 80100a2:	d0d9      	beq.n	8010058 <__swbuf_r+0x2e>
 80100a4:	e7d6      	b.n	8010054 <__swbuf_r+0x2a>
	...

080100a8 <__swsetup_r>:
 80100a8:	b538      	push	{r3, r4, r5, lr}
 80100aa:	4b29      	ldr	r3, [pc, #164]	@ (8010150 <__swsetup_r+0xa8>)
 80100ac:	4605      	mov	r5, r0
 80100ae:	6818      	ldr	r0, [r3, #0]
 80100b0:	460c      	mov	r4, r1
 80100b2:	b118      	cbz	r0, 80100bc <__swsetup_r+0x14>
 80100b4:	6a03      	ldr	r3, [r0, #32]
 80100b6:	b90b      	cbnz	r3, 80100bc <__swsetup_r+0x14>
 80100b8:	f7ff fe8a 	bl	800fdd0 <__sinit>
 80100bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80100c0:	0719      	lsls	r1, r3, #28
 80100c2:	d422      	bmi.n	801010a <__swsetup_r+0x62>
 80100c4:	06da      	lsls	r2, r3, #27
 80100c6:	d407      	bmi.n	80100d8 <__swsetup_r+0x30>
 80100c8:	2209      	movs	r2, #9
 80100ca:	602a      	str	r2, [r5, #0]
 80100cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80100d0:	81a3      	strh	r3, [r4, #12]
 80100d2:	f04f 30ff 	mov.w	r0, #4294967295
 80100d6:	e033      	b.n	8010140 <__swsetup_r+0x98>
 80100d8:	0758      	lsls	r0, r3, #29
 80100da:	d512      	bpl.n	8010102 <__swsetup_r+0x5a>
 80100dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80100de:	b141      	cbz	r1, 80100f2 <__swsetup_r+0x4a>
 80100e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80100e4:	4299      	cmp	r1, r3
 80100e6:	d002      	beq.n	80100ee <__swsetup_r+0x46>
 80100e8:	4628      	mov	r0, r5
 80100ea:	f001 f8fd 	bl	80112e8 <_free_r>
 80100ee:	2300      	movs	r3, #0
 80100f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80100f2:	89a3      	ldrh	r3, [r4, #12]
 80100f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80100f8:	81a3      	strh	r3, [r4, #12]
 80100fa:	2300      	movs	r3, #0
 80100fc:	6063      	str	r3, [r4, #4]
 80100fe:	6923      	ldr	r3, [r4, #16]
 8010100:	6023      	str	r3, [r4, #0]
 8010102:	89a3      	ldrh	r3, [r4, #12]
 8010104:	f043 0308 	orr.w	r3, r3, #8
 8010108:	81a3      	strh	r3, [r4, #12]
 801010a:	6923      	ldr	r3, [r4, #16]
 801010c:	b94b      	cbnz	r3, 8010122 <__swsetup_r+0x7a>
 801010e:	89a3      	ldrh	r3, [r4, #12]
 8010110:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010114:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010118:	d003      	beq.n	8010122 <__swsetup_r+0x7a>
 801011a:	4621      	mov	r1, r4
 801011c:	4628      	mov	r0, r5
 801011e:	f002 fcf8 	bl	8012b12 <__smakebuf_r>
 8010122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010126:	f013 0201 	ands.w	r2, r3, #1
 801012a:	d00a      	beq.n	8010142 <__swsetup_r+0x9a>
 801012c:	2200      	movs	r2, #0
 801012e:	60a2      	str	r2, [r4, #8]
 8010130:	6962      	ldr	r2, [r4, #20]
 8010132:	4252      	negs	r2, r2
 8010134:	61a2      	str	r2, [r4, #24]
 8010136:	6922      	ldr	r2, [r4, #16]
 8010138:	b942      	cbnz	r2, 801014c <__swsetup_r+0xa4>
 801013a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801013e:	d1c5      	bne.n	80100cc <__swsetup_r+0x24>
 8010140:	bd38      	pop	{r3, r4, r5, pc}
 8010142:	0799      	lsls	r1, r3, #30
 8010144:	bf58      	it	pl
 8010146:	6962      	ldrpl	r2, [r4, #20]
 8010148:	60a2      	str	r2, [r4, #8]
 801014a:	e7f4      	b.n	8010136 <__swsetup_r+0x8e>
 801014c:	2000      	movs	r0, #0
 801014e:	e7f7      	b.n	8010140 <__swsetup_r+0x98>
 8010150:	200001c0 	.word	0x200001c0

08010154 <funcloser>:
 8010154:	b570      	push	{r4, r5, r6, lr}
 8010156:	690c      	ldr	r4, [r1, #16]
 8010158:	4606      	mov	r6, r0
 801015a:	460d      	mov	r5, r1
 801015c:	b184      	cbz	r4, 8010180 <funcloser+0x2c>
 801015e:	f000 fa15 	bl	801058c <__errno>
 8010162:	2300      	movs	r3, #0
 8010164:	6003      	str	r3, [r0, #0]
 8010166:	692b      	ldr	r3, [r5, #16]
 8010168:	6828      	ldr	r0, [r5, #0]
 801016a:	4798      	blx	r3
 801016c:	1e04      	subs	r4, r0, #0
 801016e:	da07      	bge.n	8010180 <funcloser+0x2c>
 8010170:	f000 fa0c 	bl	801058c <__errno>
 8010174:	6803      	ldr	r3, [r0, #0]
 8010176:	b11b      	cbz	r3, 8010180 <funcloser+0x2c>
 8010178:	f000 fa08 	bl	801058c <__errno>
 801017c:	6803      	ldr	r3, [r0, #0]
 801017e:	6033      	str	r3, [r6, #0]
 8010180:	4630      	mov	r0, r6
 8010182:	4629      	mov	r1, r5
 8010184:	f001 f8b0 	bl	80112e8 <_free_r>
 8010188:	4620      	mov	r0, r4
 801018a:	bd70      	pop	{r4, r5, r6, pc}

0801018c <funwriter>:
 801018c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801018e:	460c      	mov	r4, r1
 8010190:	4616      	mov	r6, r2
 8010192:	461f      	mov	r7, r3
 8010194:	4605      	mov	r5, r0
 8010196:	f000 f9f9 	bl	801058c <__errno>
 801019a:	2300      	movs	r3, #0
 801019c:	6003      	str	r3, [r0, #0]
 801019e:	463a      	mov	r2, r7
 80101a0:	68a3      	ldr	r3, [r4, #8]
 80101a2:	6820      	ldr	r0, [r4, #0]
 80101a4:	4631      	mov	r1, r6
 80101a6:	4798      	blx	r3
 80101a8:	1e04      	subs	r4, r0, #0
 80101aa:	da07      	bge.n	80101bc <funwriter+0x30>
 80101ac:	f000 f9ee 	bl	801058c <__errno>
 80101b0:	6803      	ldr	r3, [r0, #0]
 80101b2:	b11b      	cbz	r3, 80101bc <funwriter+0x30>
 80101b4:	f000 f9ea 	bl	801058c <__errno>
 80101b8:	6803      	ldr	r3, [r0, #0]
 80101ba:	602b      	str	r3, [r5, #0]
 80101bc:	4620      	mov	r0, r4
 80101be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080101c0 <funseeker>:
 80101c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101c2:	460c      	mov	r4, r1
 80101c4:	4616      	mov	r6, r2
 80101c6:	461f      	mov	r7, r3
 80101c8:	4605      	mov	r5, r0
 80101ca:	f000 f9df 	bl	801058c <__errno>
 80101ce:	2300      	movs	r3, #0
 80101d0:	6003      	str	r3, [r0, #0]
 80101d2:	463a      	mov	r2, r7
 80101d4:	68e3      	ldr	r3, [r4, #12]
 80101d6:	6820      	ldr	r0, [r4, #0]
 80101d8:	4631      	mov	r1, r6
 80101da:	4798      	blx	r3
 80101dc:	1e04      	subs	r4, r0, #0
 80101de:	da07      	bge.n	80101f0 <funseeker+0x30>
 80101e0:	f000 f9d4 	bl	801058c <__errno>
 80101e4:	6803      	ldr	r3, [r0, #0]
 80101e6:	b11b      	cbz	r3, 80101f0 <funseeker+0x30>
 80101e8:	f000 f9d0 	bl	801058c <__errno>
 80101ec:	6803      	ldr	r3, [r0, #0]
 80101ee:	602b      	str	r3, [r5, #0]
 80101f0:	4620      	mov	r0, r4
 80101f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080101f4 <funreader>:
 80101f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101f6:	460c      	mov	r4, r1
 80101f8:	4616      	mov	r6, r2
 80101fa:	461f      	mov	r7, r3
 80101fc:	4605      	mov	r5, r0
 80101fe:	f000 f9c5 	bl	801058c <__errno>
 8010202:	2300      	movs	r3, #0
 8010204:	6003      	str	r3, [r0, #0]
 8010206:	463a      	mov	r2, r7
 8010208:	6863      	ldr	r3, [r4, #4]
 801020a:	6820      	ldr	r0, [r4, #0]
 801020c:	4631      	mov	r1, r6
 801020e:	4798      	blx	r3
 8010210:	1e04      	subs	r4, r0, #0
 8010212:	da07      	bge.n	8010224 <funreader+0x30>
 8010214:	f000 f9ba 	bl	801058c <__errno>
 8010218:	6803      	ldr	r3, [r0, #0]
 801021a:	b11b      	cbz	r3, 8010224 <funreader+0x30>
 801021c:	f000 f9b6 	bl	801058c <__errno>
 8010220:	6803      	ldr	r3, [r0, #0]
 8010222:	602b      	str	r3, [r5, #0]
 8010224:	4620      	mov	r0, r4
 8010226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010228 <_funopen_r>:
 8010228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801022c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010230:	4605      	mov	r5, r0
 8010232:	4689      	mov	r9, r1
 8010234:	461e      	mov	r6, r3
 8010236:	4617      	mov	r7, r2
 8010238:	b932      	cbnz	r2, 8010248 <_funopen_r+0x20>
 801023a:	b92b      	cbnz	r3, 8010248 <_funopen_r+0x20>
 801023c:	2316      	movs	r3, #22
 801023e:	6003      	str	r3, [r0, #0]
 8010240:	2400      	movs	r4, #0
 8010242:	4620      	mov	r0, r4
 8010244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010248:	4628      	mov	r0, r5
 801024a:	f7ff fd6f 	bl	800fd2c <__sfp>
 801024e:	4604      	mov	r4, r0
 8010250:	2800      	cmp	r0, #0
 8010252:	d0f5      	beq.n	8010240 <_funopen_r+0x18>
 8010254:	4628      	mov	r0, r5
 8010256:	2114      	movs	r1, #20
 8010258:	f7fd fe1a 	bl	800de90 <_malloc_r>
 801025c:	4605      	mov	r5, r0
 801025e:	b940      	cbnz	r0, 8010272 <_funopen_r+0x4a>
 8010260:	f7ff fd58 	bl	800fd14 <__sfp_lock_acquire>
 8010264:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010266:	81a5      	strh	r5, [r4, #12]
 8010268:	f000 f9bb 	bl	80105e2 <__retarget_lock_close_recursive>
 801026c:	f7ff fd58 	bl	800fd20 <__sfp_lock_release>
 8010270:	e7e6      	b.n	8010240 <_funopen_r+0x18>
 8010272:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010274:	07d8      	lsls	r0, r3, #31
 8010276:	d405      	bmi.n	8010284 <_funopen_r+0x5c>
 8010278:	89a3      	ldrh	r3, [r4, #12]
 801027a:	0599      	lsls	r1, r3, #22
 801027c:	d402      	bmi.n	8010284 <_funopen_r+0x5c>
 801027e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010280:	f000 f9b0 	bl	80105e4 <__retarget_lock_acquire_recursive>
 8010284:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010288:	81e3      	strh	r3, [r4, #14]
 801028a:	f8c5 9000 	str.w	r9, [r5]
 801028e:	6225      	str	r5, [r4, #32]
 8010290:	b327      	cbz	r7, 80102dc <_funopen_r+0xb4>
 8010292:	4b16      	ldr	r3, [pc, #88]	@ (80102ec <_funopen_r+0xc4>)
 8010294:	606f      	str	r7, [r5, #4]
 8010296:	6263      	str	r3, [r4, #36]	@ 0x24
 8010298:	b1de      	cbz	r6, 80102d2 <_funopen_r+0xaa>
 801029a:	2310      	movs	r3, #16
 801029c:	81a3      	strh	r3, [r4, #12]
 801029e:	4b14      	ldr	r3, [pc, #80]	@ (80102f0 <_funopen_r+0xc8>)
 80102a0:	60ae      	str	r6, [r5, #8]
 80102a2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80102a4:	4b13      	ldr	r3, [pc, #76]	@ (80102f4 <_funopen_r+0xcc>)
 80102a6:	f8c5 800c 	str.w	r8, [r5, #12]
 80102aa:	f1b8 0f00 	cmp.w	r8, #0
 80102ae:	bf18      	it	ne
 80102b0:	4698      	movne	r8, r3
 80102b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102b4:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 80102b8:	612b      	str	r3, [r5, #16]
 80102ba:	4b0f      	ldr	r3, [pc, #60]	@ (80102f8 <_funopen_r+0xd0>)
 80102bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80102be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80102c0:	07da      	lsls	r2, r3, #31
 80102c2:	d4be      	bmi.n	8010242 <_funopen_r+0x1a>
 80102c4:	89a3      	ldrh	r3, [r4, #12]
 80102c6:	059b      	lsls	r3, r3, #22
 80102c8:	d4bb      	bmi.n	8010242 <_funopen_r+0x1a>
 80102ca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80102cc:	f000 f98b 	bl	80105e6 <__retarget_lock_release_recursive>
 80102d0:	e7b7      	b.n	8010242 <_funopen_r+0x1a>
 80102d2:	2304      	movs	r3, #4
 80102d4:	81a3      	strh	r3, [r4, #12]
 80102d6:	60ae      	str	r6, [r5, #8]
 80102d8:	62a6      	str	r6, [r4, #40]	@ 0x28
 80102da:	e7e3      	b.n	80102a4 <_funopen_r+0x7c>
 80102dc:	2308      	movs	r3, #8
 80102de:	81a3      	strh	r3, [r4, #12]
 80102e0:	4b03      	ldr	r3, [pc, #12]	@ (80102f0 <_funopen_r+0xc8>)
 80102e2:	60ae      	str	r6, [r5, #8]
 80102e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80102e6:	606f      	str	r7, [r5, #4]
 80102e8:	6267      	str	r7, [r4, #36]	@ 0x24
 80102ea:	e7db      	b.n	80102a4 <_funopen_r+0x7c>
 80102ec:	080101f5 	.word	0x080101f5
 80102f0:	0801018d 	.word	0x0801018d
 80102f4:	080101c1 	.word	0x080101c1
 80102f8:	08010155 	.word	0x08010155

080102fc <funopen>:
 80102fc:	b513      	push	{r0, r1, r4, lr}
 80102fe:	9c04      	ldr	r4, [sp, #16]
 8010300:	e9cd 3400 	strd	r3, r4, [sp]
 8010304:	4613      	mov	r3, r2
 8010306:	460a      	mov	r2, r1
 8010308:	4601      	mov	r1, r0
 801030a:	4803      	ldr	r0, [pc, #12]	@ (8010318 <funopen+0x1c>)
 801030c:	6800      	ldr	r0, [r0, #0]
 801030e:	f7ff ff8b 	bl	8010228 <_funopen_r>
 8010312:	b002      	add	sp, #8
 8010314:	bd10      	pop	{r4, pc}
 8010316:	bf00      	nop
 8010318:	200001c0 	.word	0x200001c0

0801031c <memset>:
 801031c:	4402      	add	r2, r0
 801031e:	4603      	mov	r3, r0
 8010320:	4293      	cmp	r3, r2
 8010322:	d100      	bne.n	8010326 <memset+0xa>
 8010324:	4770      	bx	lr
 8010326:	f803 1b01 	strb.w	r1, [r3], #1
 801032a:	e7f9      	b.n	8010320 <memset+0x4>

0801032c <strchr>:
 801032c:	b2c9      	uxtb	r1, r1
 801032e:	4603      	mov	r3, r0
 8010330:	4618      	mov	r0, r3
 8010332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010336:	b112      	cbz	r2, 801033e <strchr+0x12>
 8010338:	428a      	cmp	r2, r1
 801033a:	d1f9      	bne.n	8010330 <strchr+0x4>
 801033c:	4770      	bx	lr
 801033e:	2900      	cmp	r1, #0
 8010340:	bf18      	it	ne
 8010342:	2000      	movne	r0, #0
 8010344:	4770      	bx	lr

08010346 <strncmp>:
 8010346:	b510      	push	{r4, lr}
 8010348:	b16a      	cbz	r2, 8010366 <strncmp+0x20>
 801034a:	3901      	subs	r1, #1
 801034c:	1884      	adds	r4, r0, r2
 801034e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010352:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010356:	429a      	cmp	r2, r3
 8010358:	d103      	bne.n	8010362 <strncmp+0x1c>
 801035a:	42a0      	cmp	r0, r4
 801035c:	d001      	beq.n	8010362 <strncmp+0x1c>
 801035e:	2a00      	cmp	r2, #0
 8010360:	d1f5      	bne.n	801034e <strncmp+0x8>
 8010362:	1ad0      	subs	r0, r2, r3
 8010364:	bd10      	pop	{r4, pc}
 8010366:	4610      	mov	r0, r2
 8010368:	e7fc      	b.n	8010364 <strncmp+0x1e>

0801036a <strnlen>:
 801036a:	b510      	push	{r4, lr}
 801036c:	4602      	mov	r2, r0
 801036e:	4401      	add	r1, r0
 8010370:	428a      	cmp	r2, r1
 8010372:	4613      	mov	r3, r2
 8010374:	d003      	beq.n	801037e <strnlen+0x14>
 8010376:	781c      	ldrb	r4, [r3, #0]
 8010378:	3201      	adds	r2, #1
 801037a:	2c00      	cmp	r4, #0
 801037c:	d1f8      	bne.n	8010370 <strnlen+0x6>
 801037e:	1a18      	subs	r0, r3, r0
 8010380:	bd10      	pop	{r4, pc}
	...

08010384 <strtok>:
 8010384:	4b16      	ldr	r3, [pc, #88]	@ (80103e0 <strtok+0x5c>)
 8010386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801038a:	681f      	ldr	r7, [r3, #0]
 801038c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801038e:	4605      	mov	r5, r0
 8010390:	460e      	mov	r6, r1
 8010392:	b9ec      	cbnz	r4, 80103d0 <strtok+0x4c>
 8010394:	2050      	movs	r0, #80	@ 0x50
 8010396:	f7fd fd49 	bl	800de2c <malloc>
 801039a:	4602      	mov	r2, r0
 801039c:	6478      	str	r0, [r7, #68]	@ 0x44
 801039e:	b920      	cbnz	r0, 80103aa <strtok+0x26>
 80103a0:	4b10      	ldr	r3, [pc, #64]	@ (80103e4 <strtok+0x60>)
 80103a2:	4811      	ldr	r0, [pc, #68]	@ (80103e8 <strtok+0x64>)
 80103a4:	215b      	movs	r1, #91	@ 0x5b
 80103a6:	f7fd fcbb 	bl	800dd20 <__assert_func>
 80103aa:	e9c0 4400 	strd	r4, r4, [r0]
 80103ae:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80103b2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80103b6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80103ba:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80103be:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80103c2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80103c6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80103ca:	6184      	str	r4, [r0, #24]
 80103cc:	7704      	strb	r4, [r0, #28]
 80103ce:	6244      	str	r4, [r0, #36]	@ 0x24
 80103d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80103d2:	4631      	mov	r1, r6
 80103d4:	4628      	mov	r0, r5
 80103d6:	2301      	movs	r3, #1
 80103d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103dc:	f000 b806 	b.w	80103ec <__strtok_r>
 80103e0:	200001c0 	.word	0x200001c0
 80103e4:	0801457f 	.word	0x0801457f
 80103e8:	08014596 	.word	0x08014596

080103ec <__strtok_r>:
 80103ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103ee:	4604      	mov	r4, r0
 80103f0:	b908      	cbnz	r0, 80103f6 <__strtok_r+0xa>
 80103f2:	6814      	ldr	r4, [r2, #0]
 80103f4:	b144      	cbz	r4, 8010408 <__strtok_r+0x1c>
 80103f6:	4620      	mov	r0, r4
 80103f8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80103fc:	460f      	mov	r7, r1
 80103fe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010402:	b91e      	cbnz	r6, 801040c <__strtok_r+0x20>
 8010404:	b965      	cbnz	r5, 8010420 <__strtok_r+0x34>
 8010406:	6015      	str	r5, [r2, #0]
 8010408:	2000      	movs	r0, #0
 801040a:	e005      	b.n	8010418 <__strtok_r+0x2c>
 801040c:	42b5      	cmp	r5, r6
 801040e:	d1f6      	bne.n	80103fe <__strtok_r+0x12>
 8010410:	2b00      	cmp	r3, #0
 8010412:	d1f0      	bne.n	80103f6 <__strtok_r+0xa>
 8010414:	6014      	str	r4, [r2, #0]
 8010416:	7003      	strb	r3, [r0, #0]
 8010418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801041a:	461c      	mov	r4, r3
 801041c:	e00c      	b.n	8010438 <__strtok_r+0x4c>
 801041e:	b91d      	cbnz	r5, 8010428 <__strtok_r+0x3c>
 8010420:	4627      	mov	r7, r4
 8010422:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010426:	460e      	mov	r6, r1
 8010428:	f816 5b01 	ldrb.w	r5, [r6], #1
 801042c:	42ab      	cmp	r3, r5
 801042e:	d1f6      	bne.n	801041e <__strtok_r+0x32>
 8010430:	2b00      	cmp	r3, #0
 8010432:	d0f2      	beq.n	801041a <__strtok_r+0x2e>
 8010434:	2300      	movs	r3, #0
 8010436:	703b      	strb	r3, [r7, #0]
 8010438:	6014      	str	r4, [r2, #0]
 801043a:	e7ed      	b.n	8010418 <__strtok_r+0x2c>

0801043c <_localeconv_r>:
 801043c:	4800      	ldr	r0, [pc, #0]	@ (8010440 <_localeconv_r+0x4>)
 801043e:	4770      	bx	lr
 8010440:	20000144 	.word	0x20000144

08010444 <_close_r>:
 8010444:	b538      	push	{r3, r4, r5, lr}
 8010446:	4d06      	ldr	r5, [pc, #24]	@ (8010460 <_close_r+0x1c>)
 8010448:	2300      	movs	r3, #0
 801044a:	4604      	mov	r4, r0
 801044c:	4608      	mov	r0, r1
 801044e:	602b      	str	r3, [r5, #0]
 8010450:	f7f4 f95a 	bl	8004708 <_close>
 8010454:	1c43      	adds	r3, r0, #1
 8010456:	d102      	bne.n	801045e <_close_r+0x1a>
 8010458:	682b      	ldr	r3, [r5, #0]
 801045a:	b103      	cbz	r3, 801045e <_close_r+0x1a>
 801045c:	6023      	str	r3, [r4, #0]
 801045e:	bd38      	pop	{r3, r4, r5, pc}
 8010460:	200006a4 	.word	0x200006a4

08010464 <_reclaim_reent>:
 8010464:	4b2d      	ldr	r3, [pc, #180]	@ (801051c <_reclaim_reent+0xb8>)
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	4283      	cmp	r3, r0
 801046a:	b570      	push	{r4, r5, r6, lr}
 801046c:	4604      	mov	r4, r0
 801046e:	d053      	beq.n	8010518 <_reclaim_reent+0xb4>
 8010470:	69c3      	ldr	r3, [r0, #28]
 8010472:	b31b      	cbz	r3, 80104bc <_reclaim_reent+0x58>
 8010474:	68db      	ldr	r3, [r3, #12]
 8010476:	b163      	cbz	r3, 8010492 <_reclaim_reent+0x2e>
 8010478:	2500      	movs	r5, #0
 801047a:	69e3      	ldr	r3, [r4, #28]
 801047c:	68db      	ldr	r3, [r3, #12]
 801047e:	5959      	ldr	r1, [r3, r5]
 8010480:	b9b1      	cbnz	r1, 80104b0 <_reclaim_reent+0x4c>
 8010482:	3504      	adds	r5, #4
 8010484:	2d80      	cmp	r5, #128	@ 0x80
 8010486:	d1f8      	bne.n	801047a <_reclaim_reent+0x16>
 8010488:	69e3      	ldr	r3, [r4, #28]
 801048a:	4620      	mov	r0, r4
 801048c:	68d9      	ldr	r1, [r3, #12]
 801048e:	f000 ff2b 	bl	80112e8 <_free_r>
 8010492:	69e3      	ldr	r3, [r4, #28]
 8010494:	6819      	ldr	r1, [r3, #0]
 8010496:	b111      	cbz	r1, 801049e <_reclaim_reent+0x3a>
 8010498:	4620      	mov	r0, r4
 801049a:	f000 ff25 	bl	80112e8 <_free_r>
 801049e:	69e3      	ldr	r3, [r4, #28]
 80104a0:	689d      	ldr	r5, [r3, #8]
 80104a2:	b15d      	cbz	r5, 80104bc <_reclaim_reent+0x58>
 80104a4:	4629      	mov	r1, r5
 80104a6:	4620      	mov	r0, r4
 80104a8:	682d      	ldr	r5, [r5, #0]
 80104aa:	f000 ff1d 	bl	80112e8 <_free_r>
 80104ae:	e7f8      	b.n	80104a2 <_reclaim_reent+0x3e>
 80104b0:	680e      	ldr	r6, [r1, #0]
 80104b2:	4620      	mov	r0, r4
 80104b4:	f000 ff18 	bl	80112e8 <_free_r>
 80104b8:	4631      	mov	r1, r6
 80104ba:	e7e1      	b.n	8010480 <_reclaim_reent+0x1c>
 80104bc:	6961      	ldr	r1, [r4, #20]
 80104be:	b111      	cbz	r1, 80104c6 <_reclaim_reent+0x62>
 80104c0:	4620      	mov	r0, r4
 80104c2:	f000 ff11 	bl	80112e8 <_free_r>
 80104c6:	69e1      	ldr	r1, [r4, #28]
 80104c8:	b111      	cbz	r1, 80104d0 <_reclaim_reent+0x6c>
 80104ca:	4620      	mov	r0, r4
 80104cc:	f000 ff0c 	bl	80112e8 <_free_r>
 80104d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80104d2:	b111      	cbz	r1, 80104da <_reclaim_reent+0x76>
 80104d4:	4620      	mov	r0, r4
 80104d6:	f000 ff07 	bl	80112e8 <_free_r>
 80104da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80104dc:	b111      	cbz	r1, 80104e4 <_reclaim_reent+0x80>
 80104de:	4620      	mov	r0, r4
 80104e0:	f000 ff02 	bl	80112e8 <_free_r>
 80104e4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80104e6:	b111      	cbz	r1, 80104ee <_reclaim_reent+0x8a>
 80104e8:	4620      	mov	r0, r4
 80104ea:	f000 fefd 	bl	80112e8 <_free_r>
 80104ee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80104f0:	b111      	cbz	r1, 80104f8 <_reclaim_reent+0x94>
 80104f2:	4620      	mov	r0, r4
 80104f4:	f000 fef8 	bl	80112e8 <_free_r>
 80104f8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80104fa:	b111      	cbz	r1, 8010502 <_reclaim_reent+0x9e>
 80104fc:	4620      	mov	r0, r4
 80104fe:	f000 fef3 	bl	80112e8 <_free_r>
 8010502:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010504:	b111      	cbz	r1, 801050c <_reclaim_reent+0xa8>
 8010506:	4620      	mov	r0, r4
 8010508:	f000 feee 	bl	80112e8 <_free_r>
 801050c:	6a23      	ldr	r3, [r4, #32]
 801050e:	b11b      	cbz	r3, 8010518 <_reclaim_reent+0xb4>
 8010510:	4620      	mov	r0, r4
 8010512:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010516:	4718      	bx	r3
 8010518:	bd70      	pop	{r4, r5, r6, pc}
 801051a:	bf00      	nop
 801051c:	200001c0 	.word	0x200001c0

08010520 <_lseek_r>:
 8010520:	b538      	push	{r3, r4, r5, lr}
 8010522:	4d07      	ldr	r5, [pc, #28]	@ (8010540 <_lseek_r+0x20>)
 8010524:	4604      	mov	r4, r0
 8010526:	4608      	mov	r0, r1
 8010528:	4611      	mov	r1, r2
 801052a:	2200      	movs	r2, #0
 801052c:	602a      	str	r2, [r5, #0]
 801052e:	461a      	mov	r2, r3
 8010530:	f7f4 f930 	bl	8004794 <_lseek>
 8010534:	1c43      	adds	r3, r0, #1
 8010536:	d102      	bne.n	801053e <_lseek_r+0x1e>
 8010538:	682b      	ldr	r3, [r5, #0]
 801053a:	b103      	cbz	r3, 801053e <_lseek_r+0x1e>
 801053c:	6023      	str	r3, [r4, #0]
 801053e:	bd38      	pop	{r3, r4, r5, pc}
 8010540:	200006a4 	.word	0x200006a4

08010544 <_read_r>:
 8010544:	b538      	push	{r3, r4, r5, lr}
 8010546:	4d07      	ldr	r5, [pc, #28]	@ (8010564 <_read_r+0x20>)
 8010548:	4604      	mov	r4, r0
 801054a:	4608      	mov	r0, r1
 801054c:	4611      	mov	r1, r2
 801054e:	2200      	movs	r2, #0
 8010550:	602a      	str	r2, [r5, #0]
 8010552:	461a      	mov	r2, r3
 8010554:	f7f4 f822 	bl	800459c <_read>
 8010558:	1c43      	adds	r3, r0, #1
 801055a:	d102      	bne.n	8010562 <_read_r+0x1e>
 801055c:	682b      	ldr	r3, [r5, #0]
 801055e:	b103      	cbz	r3, 8010562 <_read_r+0x1e>
 8010560:	6023      	str	r3, [r4, #0]
 8010562:	bd38      	pop	{r3, r4, r5, pc}
 8010564:	200006a4 	.word	0x200006a4

08010568 <_write_r>:
 8010568:	b538      	push	{r3, r4, r5, lr}
 801056a:	4d07      	ldr	r5, [pc, #28]	@ (8010588 <_write_r+0x20>)
 801056c:	4604      	mov	r4, r0
 801056e:	4608      	mov	r0, r1
 8010570:	4611      	mov	r1, r2
 8010572:	2200      	movs	r2, #0
 8010574:	602a      	str	r2, [r5, #0]
 8010576:	461a      	mov	r2, r3
 8010578:	f7f4 f856 	bl	8004628 <_write>
 801057c:	1c43      	adds	r3, r0, #1
 801057e:	d102      	bne.n	8010586 <_write_r+0x1e>
 8010580:	682b      	ldr	r3, [r5, #0]
 8010582:	b103      	cbz	r3, 8010586 <_write_r+0x1e>
 8010584:	6023      	str	r3, [r4, #0]
 8010586:	bd38      	pop	{r3, r4, r5, pc}
 8010588:	200006a4 	.word	0x200006a4

0801058c <__errno>:
 801058c:	4b01      	ldr	r3, [pc, #4]	@ (8010594 <__errno+0x8>)
 801058e:	6818      	ldr	r0, [r3, #0]
 8010590:	4770      	bx	lr
 8010592:	bf00      	nop
 8010594:	200001c0 	.word	0x200001c0

08010598 <__libc_init_array>:
 8010598:	b570      	push	{r4, r5, r6, lr}
 801059a:	4d0d      	ldr	r5, [pc, #52]	@ (80105d0 <__libc_init_array+0x38>)
 801059c:	4c0d      	ldr	r4, [pc, #52]	@ (80105d4 <__libc_init_array+0x3c>)
 801059e:	1b64      	subs	r4, r4, r5
 80105a0:	10a4      	asrs	r4, r4, #2
 80105a2:	2600      	movs	r6, #0
 80105a4:	42a6      	cmp	r6, r4
 80105a6:	d109      	bne.n	80105bc <__libc_init_array+0x24>
 80105a8:	4d0b      	ldr	r5, [pc, #44]	@ (80105d8 <__libc_init_array+0x40>)
 80105aa:	4c0c      	ldr	r4, [pc, #48]	@ (80105dc <__libc_init_array+0x44>)
 80105ac:	f002 fc44 	bl	8012e38 <_init>
 80105b0:	1b64      	subs	r4, r4, r5
 80105b2:	10a4      	asrs	r4, r4, #2
 80105b4:	2600      	movs	r6, #0
 80105b6:	42a6      	cmp	r6, r4
 80105b8:	d105      	bne.n	80105c6 <__libc_init_array+0x2e>
 80105ba:	bd70      	pop	{r4, r5, r6, pc}
 80105bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80105c0:	4798      	blx	r3
 80105c2:	3601      	adds	r6, #1
 80105c4:	e7ee      	b.n	80105a4 <__libc_init_array+0xc>
 80105c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80105ca:	4798      	blx	r3
 80105cc:	3601      	adds	r6, #1
 80105ce:	e7f2      	b.n	80105b6 <__libc_init_array+0x1e>
 80105d0:	08014994 	.word	0x08014994
 80105d4:	08014994 	.word	0x08014994
 80105d8:	08014994 	.word	0x08014994
 80105dc:	0801499c 	.word	0x0801499c

080105e0 <__retarget_lock_init_recursive>:
 80105e0:	4770      	bx	lr

080105e2 <__retarget_lock_close_recursive>:
 80105e2:	4770      	bx	lr

080105e4 <__retarget_lock_acquire_recursive>:
 80105e4:	4770      	bx	lr

080105e6 <__retarget_lock_release_recursive>:
 80105e6:	4770      	bx	lr

080105e8 <memcpy>:
 80105e8:	440a      	add	r2, r1
 80105ea:	4291      	cmp	r1, r2
 80105ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80105f0:	d100      	bne.n	80105f4 <memcpy+0xc>
 80105f2:	4770      	bx	lr
 80105f4:	b510      	push	{r4, lr}
 80105f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80105fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80105fe:	4291      	cmp	r1, r2
 8010600:	d1f9      	bne.n	80105f6 <memcpy+0xe>
 8010602:	bd10      	pop	{r4, pc}
 8010604:	0000      	movs	r0, r0
	...

08010608 <nan>:
 8010608:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010610 <nan+0x8>
 801060c:	4770      	bx	lr
 801060e:	bf00      	nop
 8010610:	00000000 	.word	0x00000000
 8010614:	7ff80000 	.word	0x7ff80000

08010618 <nanf>:
 8010618:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010620 <nanf+0x8>
 801061c:	4770      	bx	lr
 801061e:	bf00      	nop
 8010620:	7fc00000 	.word	0x7fc00000

08010624 <abort>:
 8010624:	b508      	push	{r3, lr}
 8010626:	2006      	movs	r0, #6
 8010628:	f002 fb3e 	bl	8012ca8 <raise>
 801062c:	2001      	movs	r0, #1
 801062e:	f7f3 ffa9 	bl	8004584 <_exit>

08010632 <quorem>:
 8010632:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010636:	6903      	ldr	r3, [r0, #16]
 8010638:	690c      	ldr	r4, [r1, #16]
 801063a:	42a3      	cmp	r3, r4
 801063c:	4607      	mov	r7, r0
 801063e:	db7e      	blt.n	801073e <quorem+0x10c>
 8010640:	3c01      	subs	r4, #1
 8010642:	f101 0814 	add.w	r8, r1, #20
 8010646:	00a3      	lsls	r3, r4, #2
 8010648:	f100 0514 	add.w	r5, r0, #20
 801064c:	9300      	str	r3, [sp, #0]
 801064e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010652:	9301      	str	r3, [sp, #4]
 8010654:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010658:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801065c:	3301      	adds	r3, #1
 801065e:	429a      	cmp	r2, r3
 8010660:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010664:	fbb2 f6f3 	udiv	r6, r2, r3
 8010668:	d32e      	bcc.n	80106c8 <quorem+0x96>
 801066a:	f04f 0a00 	mov.w	sl, #0
 801066e:	46c4      	mov	ip, r8
 8010670:	46ae      	mov	lr, r5
 8010672:	46d3      	mov	fp, sl
 8010674:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010678:	b298      	uxth	r0, r3
 801067a:	fb06 a000 	mla	r0, r6, r0, sl
 801067e:	0c02      	lsrs	r2, r0, #16
 8010680:	0c1b      	lsrs	r3, r3, #16
 8010682:	fb06 2303 	mla	r3, r6, r3, r2
 8010686:	f8de 2000 	ldr.w	r2, [lr]
 801068a:	b280      	uxth	r0, r0
 801068c:	b292      	uxth	r2, r2
 801068e:	1a12      	subs	r2, r2, r0
 8010690:	445a      	add	r2, fp
 8010692:	f8de 0000 	ldr.w	r0, [lr]
 8010696:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801069a:	b29b      	uxth	r3, r3
 801069c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80106a0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80106a4:	b292      	uxth	r2, r2
 80106a6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80106aa:	45e1      	cmp	r9, ip
 80106ac:	f84e 2b04 	str.w	r2, [lr], #4
 80106b0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80106b4:	d2de      	bcs.n	8010674 <quorem+0x42>
 80106b6:	9b00      	ldr	r3, [sp, #0]
 80106b8:	58eb      	ldr	r3, [r5, r3]
 80106ba:	b92b      	cbnz	r3, 80106c8 <quorem+0x96>
 80106bc:	9b01      	ldr	r3, [sp, #4]
 80106be:	3b04      	subs	r3, #4
 80106c0:	429d      	cmp	r5, r3
 80106c2:	461a      	mov	r2, r3
 80106c4:	d32f      	bcc.n	8010726 <quorem+0xf4>
 80106c6:	613c      	str	r4, [r7, #16]
 80106c8:	4638      	mov	r0, r7
 80106ca:	f001 fc93 	bl	8011ff4 <__mcmp>
 80106ce:	2800      	cmp	r0, #0
 80106d0:	db25      	blt.n	801071e <quorem+0xec>
 80106d2:	4629      	mov	r1, r5
 80106d4:	2000      	movs	r0, #0
 80106d6:	f858 2b04 	ldr.w	r2, [r8], #4
 80106da:	f8d1 c000 	ldr.w	ip, [r1]
 80106de:	fa1f fe82 	uxth.w	lr, r2
 80106e2:	fa1f f38c 	uxth.w	r3, ip
 80106e6:	eba3 030e 	sub.w	r3, r3, lr
 80106ea:	4403      	add	r3, r0
 80106ec:	0c12      	lsrs	r2, r2, #16
 80106ee:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80106f2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80106f6:	b29b      	uxth	r3, r3
 80106f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80106fc:	45c1      	cmp	r9, r8
 80106fe:	f841 3b04 	str.w	r3, [r1], #4
 8010702:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010706:	d2e6      	bcs.n	80106d6 <quorem+0xa4>
 8010708:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801070c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010710:	b922      	cbnz	r2, 801071c <quorem+0xea>
 8010712:	3b04      	subs	r3, #4
 8010714:	429d      	cmp	r5, r3
 8010716:	461a      	mov	r2, r3
 8010718:	d30b      	bcc.n	8010732 <quorem+0x100>
 801071a:	613c      	str	r4, [r7, #16]
 801071c:	3601      	adds	r6, #1
 801071e:	4630      	mov	r0, r6
 8010720:	b003      	add	sp, #12
 8010722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010726:	6812      	ldr	r2, [r2, #0]
 8010728:	3b04      	subs	r3, #4
 801072a:	2a00      	cmp	r2, #0
 801072c:	d1cb      	bne.n	80106c6 <quorem+0x94>
 801072e:	3c01      	subs	r4, #1
 8010730:	e7c6      	b.n	80106c0 <quorem+0x8e>
 8010732:	6812      	ldr	r2, [r2, #0]
 8010734:	3b04      	subs	r3, #4
 8010736:	2a00      	cmp	r2, #0
 8010738:	d1ef      	bne.n	801071a <quorem+0xe8>
 801073a:	3c01      	subs	r4, #1
 801073c:	e7ea      	b.n	8010714 <quorem+0xe2>
 801073e:	2000      	movs	r0, #0
 8010740:	e7ee      	b.n	8010720 <quorem+0xee>
 8010742:	0000      	movs	r0, r0
 8010744:	0000      	movs	r0, r0
	...

08010748 <_dtoa_r>:
 8010748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801074c:	69c7      	ldr	r7, [r0, #28]
 801074e:	b097      	sub	sp, #92	@ 0x5c
 8010750:	ed8d 0b04 	vstr	d0, [sp, #16]
 8010754:	ec55 4b10 	vmov	r4, r5, d0
 8010758:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801075a:	9107      	str	r1, [sp, #28]
 801075c:	4681      	mov	r9, r0
 801075e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010760:	9311      	str	r3, [sp, #68]	@ 0x44
 8010762:	b97f      	cbnz	r7, 8010784 <_dtoa_r+0x3c>
 8010764:	2010      	movs	r0, #16
 8010766:	f7fd fb61 	bl	800de2c <malloc>
 801076a:	4602      	mov	r2, r0
 801076c:	f8c9 001c 	str.w	r0, [r9, #28]
 8010770:	b920      	cbnz	r0, 801077c <_dtoa_r+0x34>
 8010772:	4ba9      	ldr	r3, [pc, #676]	@ (8010a18 <_dtoa_r+0x2d0>)
 8010774:	21ef      	movs	r1, #239	@ 0xef
 8010776:	48a9      	ldr	r0, [pc, #676]	@ (8010a1c <_dtoa_r+0x2d4>)
 8010778:	f7fd fad2 	bl	800dd20 <__assert_func>
 801077c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010780:	6007      	str	r7, [r0, #0]
 8010782:	60c7      	str	r7, [r0, #12]
 8010784:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010788:	6819      	ldr	r1, [r3, #0]
 801078a:	b159      	cbz	r1, 80107a4 <_dtoa_r+0x5c>
 801078c:	685a      	ldr	r2, [r3, #4]
 801078e:	604a      	str	r2, [r1, #4]
 8010790:	2301      	movs	r3, #1
 8010792:	4093      	lsls	r3, r2
 8010794:	608b      	str	r3, [r1, #8]
 8010796:	4648      	mov	r0, r9
 8010798:	f001 f9b0 	bl	8011afc <_Bfree>
 801079c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80107a0:	2200      	movs	r2, #0
 80107a2:	601a      	str	r2, [r3, #0]
 80107a4:	1e2b      	subs	r3, r5, #0
 80107a6:	bfb9      	ittee	lt
 80107a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80107ac:	9305      	strlt	r3, [sp, #20]
 80107ae:	2300      	movge	r3, #0
 80107b0:	6033      	strge	r3, [r6, #0]
 80107b2:	9f05      	ldr	r7, [sp, #20]
 80107b4:	4b9a      	ldr	r3, [pc, #616]	@ (8010a20 <_dtoa_r+0x2d8>)
 80107b6:	bfbc      	itt	lt
 80107b8:	2201      	movlt	r2, #1
 80107ba:	6032      	strlt	r2, [r6, #0]
 80107bc:	43bb      	bics	r3, r7
 80107be:	d112      	bne.n	80107e6 <_dtoa_r+0x9e>
 80107c0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80107c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80107c6:	6013      	str	r3, [r2, #0]
 80107c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80107cc:	4323      	orrs	r3, r4
 80107ce:	f000 855a 	beq.w	8011286 <_dtoa_r+0xb3e>
 80107d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80107d4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8010a34 <_dtoa_r+0x2ec>
 80107d8:	2b00      	cmp	r3, #0
 80107da:	f000 855c 	beq.w	8011296 <_dtoa_r+0xb4e>
 80107de:	f10a 0303 	add.w	r3, sl, #3
 80107e2:	f000 bd56 	b.w	8011292 <_dtoa_r+0xb4a>
 80107e6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80107ea:	2200      	movs	r2, #0
 80107ec:	ec51 0b17 	vmov	r0, r1, d7
 80107f0:	2300      	movs	r3, #0
 80107f2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80107f6:	f7f0 f997 	bl	8000b28 <__aeabi_dcmpeq>
 80107fa:	4680      	mov	r8, r0
 80107fc:	b158      	cbz	r0, 8010816 <_dtoa_r+0xce>
 80107fe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010800:	2301      	movs	r3, #1
 8010802:	6013      	str	r3, [r2, #0]
 8010804:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010806:	b113      	cbz	r3, 801080e <_dtoa_r+0xc6>
 8010808:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801080a:	4b86      	ldr	r3, [pc, #536]	@ (8010a24 <_dtoa_r+0x2dc>)
 801080c:	6013      	str	r3, [r2, #0]
 801080e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8010a38 <_dtoa_r+0x2f0>
 8010812:	f000 bd40 	b.w	8011296 <_dtoa_r+0xb4e>
 8010816:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801081a:	aa14      	add	r2, sp, #80	@ 0x50
 801081c:	a915      	add	r1, sp, #84	@ 0x54
 801081e:	4648      	mov	r0, r9
 8010820:	f001 fd08 	bl	8012234 <__d2b>
 8010824:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010828:	9002      	str	r0, [sp, #8]
 801082a:	2e00      	cmp	r6, #0
 801082c:	d078      	beq.n	8010920 <_dtoa_r+0x1d8>
 801082e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010830:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8010834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010838:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801083c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010840:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010844:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010848:	4619      	mov	r1, r3
 801084a:	2200      	movs	r2, #0
 801084c:	4b76      	ldr	r3, [pc, #472]	@ (8010a28 <_dtoa_r+0x2e0>)
 801084e:	f7ef fd4b 	bl	80002e8 <__aeabi_dsub>
 8010852:	a36b      	add	r3, pc, #428	@ (adr r3, 8010a00 <_dtoa_r+0x2b8>)
 8010854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010858:	f7ef fefe 	bl	8000658 <__aeabi_dmul>
 801085c:	a36a      	add	r3, pc, #424	@ (adr r3, 8010a08 <_dtoa_r+0x2c0>)
 801085e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010862:	f7ef fd43 	bl	80002ec <__adddf3>
 8010866:	4604      	mov	r4, r0
 8010868:	4630      	mov	r0, r6
 801086a:	460d      	mov	r5, r1
 801086c:	f7ef fe8a 	bl	8000584 <__aeabi_i2d>
 8010870:	a367      	add	r3, pc, #412	@ (adr r3, 8010a10 <_dtoa_r+0x2c8>)
 8010872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010876:	f7ef feef 	bl	8000658 <__aeabi_dmul>
 801087a:	4602      	mov	r2, r0
 801087c:	460b      	mov	r3, r1
 801087e:	4620      	mov	r0, r4
 8010880:	4629      	mov	r1, r5
 8010882:	f7ef fd33 	bl	80002ec <__adddf3>
 8010886:	4604      	mov	r4, r0
 8010888:	460d      	mov	r5, r1
 801088a:	f7f0 f995 	bl	8000bb8 <__aeabi_d2iz>
 801088e:	2200      	movs	r2, #0
 8010890:	4607      	mov	r7, r0
 8010892:	2300      	movs	r3, #0
 8010894:	4620      	mov	r0, r4
 8010896:	4629      	mov	r1, r5
 8010898:	f7f0 f950 	bl	8000b3c <__aeabi_dcmplt>
 801089c:	b140      	cbz	r0, 80108b0 <_dtoa_r+0x168>
 801089e:	4638      	mov	r0, r7
 80108a0:	f7ef fe70 	bl	8000584 <__aeabi_i2d>
 80108a4:	4622      	mov	r2, r4
 80108a6:	462b      	mov	r3, r5
 80108a8:	f7f0 f93e 	bl	8000b28 <__aeabi_dcmpeq>
 80108ac:	b900      	cbnz	r0, 80108b0 <_dtoa_r+0x168>
 80108ae:	3f01      	subs	r7, #1
 80108b0:	2f16      	cmp	r7, #22
 80108b2:	d852      	bhi.n	801095a <_dtoa_r+0x212>
 80108b4:	4b5d      	ldr	r3, [pc, #372]	@ (8010a2c <_dtoa_r+0x2e4>)
 80108b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80108ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80108c2:	f7f0 f93b 	bl	8000b3c <__aeabi_dcmplt>
 80108c6:	2800      	cmp	r0, #0
 80108c8:	d049      	beq.n	801095e <_dtoa_r+0x216>
 80108ca:	3f01      	subs	r7, #1
 80108cc:	2300      	movs	r3, #0
 80108ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80108d0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80108d2:	1b9b      	subs	r3, r3, r6
 80108d4:	1e5a      	subs	r2, r3, #1
 80108d6:	bf45      	ittet	mi
 80108d8:	f1c3 0301 	rsbmi	r3, r3, #1
 80108dc:	9300      	strmi	r3, [sp, #0]
 80108de:	2300      	movpl	r3, #0
 80108e0:	2300      	movmi	r3, #0
 80108e2:	9206      	str	r2, [sp, #24]
 80108e4:	bf54      	ite	pl
 80108e6:	9300      	strpl	r3, [sp, #0]
 80108e8:	9306      	strmi	r3, [sp, #24]
 80108ea:	2f00      	cmp	r7, #0
 80108ec:	db39      	blt.n	8010962 <_dtoa_r+0x21a>
 80108ee:	9b06      	ldr	r3, [sp, #24]
 80108f0:	970d      	str	r7, [sp, #52]	@ 0x34
 80108f2:	443b      	add	r3, r7
 80108f4:	9306      	str	r3, [sp, #24]
 80108f6:	2300      	movs	r3, #0
 80108f8:	9308      	str	r3, [sp, #32]
 80108fa:	9b07      	ldr	r3, [sp, #28]
 80108fc:	2b09      	cmp	r3, #9
 80108fe:	d863      	bhi.n	80109c8 <_dtoa_r+0x280>
 8010900:	2b05      	cmp	r3, #5
 8010902:	bfc4      	itt	gt
 8010904:	3b04      	subgt	r3, #4
 8010906:	9307      	strgt	r3, [sp, #28]
 8010908:	9b07      	ldr	r3, [sp, #28]
 801090a:	f1a3 0302 	sub.w	r3, r3, #2
 801090e:	bfcc      	ite	gt
 8010910:	2400      	movgt	r4, #0
 8010912:	2401      	movle	r4, #1
 8010914:	2b03      	cmp	r3, #3
 8010916:	d863      	bhi.n	80109e0 <_dtoa_r+0x298>
 8010918:	e8df f003 	tbb	[pc, r3]
 801091c:	2b375452 	.word	0x2b375452
 8010920:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8010924:	441e      	add	r6, r3
 8010926:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801092a:	2b20      	cmp	r3, #32
 801092c:	bfc1      	itttt	gt
 801092e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010932:	409f      	lslgt	r7, r3
 8010934:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010938:	fa24 f303 	lsrgt.w	r3, r4, r3
 801093c:	bfd6      	itet	le
 801093e:	f1c3 0320 	rsble	r3, r3, #32
 8010942:	ea47 0003 	orrgt.w	r0, r7, r3
 8010946:	fa04 f003 	lslle.w	r0, r4, r3
 801094a:	f7ef fe0b 	bl	8000564 <__aeabi_ui2d>
 801094e:	2201      	movs	r2, #1
 8010950:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010954:	3e01      	subs	r6, #1
 8010956:	9212      	str	r2, [sp, #72]	@ 0x48
 8010958:	e776      	b.n	8010848 <_dtoa_r+0x100>
 801095a:	2301      	movs	r3, #1
 801095c:	e7b7      	b.n	80108ce <_dtoa_r+0x186>
 801095e:	9010      	str	r0, [sp, #64]	@ 0x40
 8010960:	e7b6      	b.n	80108d0 <_dtoa_r+0x188>
 8010962:	9b00      	ldr	r3, [sp, #0]
 8010964:	1bdb      	subs	r3, r3, r7
 8010966:	9300      	str	r3, [sp, #0]
 8010968:	427b      	negs	r3, r7
 801096a:	9308      	str	r3, [sp, #32]
 801096c:	2300      	movs	r3, #0
 801096e:	930d      	str	r3, [sp, #52]	@ 0x34
 8010970:	e7c3      	b.n	80108fa <_dtoa_r+0x1b2>
 8010972:	2301      	movs	r3, #1
 8010974:	9309      	str	r3, [sp, #36]	@ 0x24
 8010976:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010978:	eb07 0b03 	add.w	fp, r7, r3
 801097c:	f10b 0301 	add.w	r3, fp, #1
 8010980:	2b01      	cmp	r3, #1
 8010982:	9303      	str	r3, [sp, #12]
 8010984:	bfb8      	it	lt
 8010986:	2301      	movlt	r3, #1
 8010988:	e006      	b.n	8010998 <_dtoa_r+0x250>
 801098a:	2301      	movs	r3, #1
 801098c:	9309      	str	r3, [sp, #36]	@ 0x24
 801098e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010990:	2b00      	cmp	r3, #0
 8010992:	dd28      	ble.n	80109e6 <_dtoa_r+0x29e>
 8010994:	469b      	mov	fp, r3
 8010996:	9303      	str	r3, [sp, #12]
 8010998:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801099c:	2100      	movs	r1, #0
 801099e:	2204      	movs	r2, #4
 80109a0:	f102 0514 	add.w	r5, r2, #20
 80109a4:	429d      	cmp	r5, r3
 80109a6:	d926      	bls.n	80109f6 <_dtoa_r+0x2ae>
 80109a8:	6041      	str	r1, [r0, #4]
 80109aa:	4648      	mov	r0, r9
 80109ac:	f001 f866 	bl	8011a7c <_Balloc>
 80109b0:	4682      	mov	sl, r0
 80109b2:	2800      	cmp	r0, #0
 80109b4:	d142      	bne.n	8010a3c <_dtoa_r+0x2f4>
 80109b6:	4b1e      	ldr	r3, [pc, #120]	@ (8010a30 <_dtoa_r+0x2e8>)
 80109b8:	4602      	mov	r2, r0
 80109ba:	f240 11af 	movw	r1, #431	@ 0x1af
 80109be:	e6da      	b.n	8010776 <_dtoa_r+0x2e>
 80109c0:	2300      	movs	r3, #0
 80109c2:	e7e3      	b.n	801098c <_dtoa_r+0x244>
 80109c4:	2300      	movs	r3, #0
 80109c6:	e7d5      	b.n	8010974 <_dtoa_r+0x22c>
 80109c8:	2401      	movs	r4, #1
 80109ca:	2300      	movs	r3, #0
 80109cc:	9307      	str	r3, [sp, #28]
 80109ce:	9409      	str	r4, [sp, #36]	@ 0x24
 80109d0:	f04f 3bff 	mov.w	fp, #4294967295
 80109d4:	2200      	movs	r2, #0
 80109d6:	f8cd b00c 	str.w	fp, [sp, #12]
 80109da:	2312      	movs	r3, #18
 80109dc:	920c      	str	r2, [sp, #48]	@ 0x30
 80109de:	e7db      	b.n	8010998 <_dtoa_r+0x250>
 80109e0:	2301      	movs	r3, #1
 80109e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80109e4:	e7f4      	b.n	80109d0 <_dtoa_r+0x288>
 80109e6:	f04f 0b01 	mov.w	fp, #1
 80109ea:	f8cd b00c 	str.w	fp, [sp, #12]
 80109ee:	465b      	mov	r3, fp
 80109f0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80109f4:	e7d0      	b.n	8010998 <_dtoa_r+0x250>
 80109f6:	3101      	adds	r1, #1
 80109f8:	0052      	lsls	r2, r2, #1
 80109fa:	e7d1      	b.n	80109a0 <_dtoa_r+0x258>
 80109fc:	f3af 8000 	nop.w
 8010a00:	636f4361 	.word	0x636f4361
 8010a04:	3fd287a7 	.word	0x3fd287a7
 8010a08:	8b60c8b3 	.word	0x8b60c8b3
 8010a0c:	3fc68a28 	.word	0x3fc68a28
 8010a10:	509f79fb 	.word	0x509f79fb
 8010a14:	3fd34413 	.word	0x3fd34413
 8010a18:	0801457f 	.word	0x0801457f
 8010a1c:	08014605 	.word	0x08014605
 8010a20:	7ff00000 	.word	0x7ff00000
 8010a24:	08014557 	.word	0x08014557
 8010a28:	3ff80000 	.word	0x3ff80000
 8010a2c:	080147c0 	.word	0x080147c0
 8010a30:	0801465d 	.word	0x0801465d
 8010a34:	08014601 	.word	0x08014601
 8010a38:	08014556 	.word	0x08014556
 8010a3c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010a40:	6018      	str	r0, [r3, #0]
 8010a42:	9b03      	ldr	r3, [sp, #12]
 8010a44:	2b0e      	cmp	r3, #14
 8010a46:	f200 80a1 	bhi.w	8010b8c <_dtoa_r+0x444>
 8010a4a:	2c00      	cmp	r4, #0
 8010a4c:	f000 809e 	beq.w	8010b8c <_dtoa_r+0x444>
 8010a50:	2f00      	cmp	r7, #0
 8010a52:	dd33      	ble.n	8010abc <_dtoa_r+0x374>
 8010a54:	4b9c      	ldr	r3, [pc, #624]	@ (8010cc8 <_dtoa_r+0x580>)
 8010a56:	f007 020f 	and.w	r2, r7, #15
 8010a5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010a5e:	ed93 7b00 	vldr	d7, [r3]
 8010a62:	05f8      	lsls	r0, r7, #23
 8010a64:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8010a68:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010a6c:	d516      	bpl.n	8010a9c <_dtoa_r+0x354>
 8010a6e:	4b97      	ldr	r3, [pc, #604]	@ (8010ccc <_dtoa_r+0x584>)
 8010a70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010a74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010a78:	f7ef ff18 	bl	80008ac <__aeabi_ddiv>
 8010a7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010a80:	f004 040f 	and.w	r4, r4, #15
 8010a84:	2603      	movs	r6, #3
 8010a86:	4d91      	ldr	r5, [pc, #580]	@ (8010ccc <_dtoa_r+0x584>)
 8010a88:	b954      	cbnz	r4, 8010aa0 <_dtoa_r+0x358>
 8010a8a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010a8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010a92:	f7ef ff0b 	bl	80008ac <__aeabi_ddiv>
 8010a96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010a9a:	e028      	b.n	8010aee <_dtoa_r+0x3a6>
 8010a9c:	2602      	movs	r6, #2
 8010a9e:	e7f2      	b.n	8010a86 <_dtoa_r+0x33e>
 8010aa0:	07e1      	lsls	r1, r4, #31
 8010aa2:	d508      	bpl.n	8010ab6 <_dtoa_r+0x36e>
 8010aa4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010aa8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010aac:	f7ef fdd4 	bl	8000658 <__aeabi_dmul>
 8010ab0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010ab4:	3601      	adds	r6, #1
 8010ab6:	1064      	asrs	r4, r4, #1
 8010ab8:	3508      	adds	r5, #8
 8010aba:	e7e5      	b.n	8010a88 <_dtoa_r+0x340>
 8010abc:	f000 80af 	beq.w	8010c1e <_dtoa_r+0x4d6>
 8010ac0:	427c      	negs	r4, r7
 8010ac2:	4b81      	ldr	r3, [pc, #516]	@ (8010cc8 <_dtoa_r+0x580>)
 8010ac4:	4d81      	ldr	r5, [pc, #516]	@ (8010ccc <_dtoa_r+0x584>)
 8010ac6:	f004 020f 	and.w	r2, r4, #15
 8010aca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010ad6:	f7ef fdbf 	bl	8000658 <__aeabi_dmul>
 8010ada:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010ade:	1124      	asrs	r4, r4, #4
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	2602      	movs	r6, #2
 8010ae4:	2c00      	cmp	r4, #0
 8010ae6:	f040 808f 	bne.w	8010c08 <_dtoa_r+0x4c0>
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d1d3      	bne.n	8010a96 <_dtoa_r+0x34e>
 8010aee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010af0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	f000 8094 	beq.w	8010c22 <_dtoa_r+0x4da>
 8010afa:	4b75      	ldr	r3, [pc, #468]	@ (8010cd0 <_dtoa_r+0x588>)
 8010afc:	2200      	movs	r2, #0
 8010afe:	4620      	mov	r0, r4
 8010b00:	4629      	mov	r1, r5
 8010b02:	f7f0 f81b 	bl	8000b3c <__aeabi_dcmplt>
 8010b06:	2800      	cmp	r0, #0
 8010b08:	f000 808b 	beq.w	8010c22 <_dtoa_r+0x4da>
 8010b0c:	9b03      	ldr	r3, [sp, #12]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	f000 8087 	beq.w	8010c22 <_dtoa_r+0x4da>
 8010b14:	f1bb 0f00 	cmp.w	fp, #0
 8010b18:	dd34      	ble.n	8010b84 <_dtoa_r+0x43c>
 8010b1a:	4620      	mov	r0, r4
 8010b1c:	4b6d      	ldr	r3, [pc, #436]	@ (8010cd4 <_dtoa_r+0x58c>)
 8010b1e:	2200      	movs	r2, #0
 8010b20:	4629      	mov	r1, r5
 8010b22:	f7ef fd99 	bl	8000658 <__aeabi_dmul>
 8010b26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010b2a:	f107 38ff 	add.w	r8, r7, #4294967295
 8010b2e:	3601      	adds	r6, #1
 8010b30:	465c      	mov	r4, fp
 8010b32:	4630      	mov	r0, r6
 8010b34:	f7ef fd26 	bl	8000584 <__aeabi_i2d>
 8010b38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b3c:	f7ef fd8c 	bl	8000658 <__aeabi_dmul>
 8010b40:	4b65      	ldr	r3, [pc, #404]	@ (8010cd8 <_dtoa_r+0x590>)
 8010b42:	2200      	movs	r2, #0
 8010b44:	f7ef fbd2 	bl	80002ec <__adddf3>
 8010b48:	4605      	mov	r5, r0
 8010b4a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010b4e:	2c00      	cmp	r4, #0
 8010b50:	d16a      	bne.n	8010c28 <_dtoa_r+0x4e0>
 8010b52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b56:	4b61      	ldr	r3, [pc, #388]	@ (8010cdc <_dtoa_r+0x594>)
 8010b58:	2200      	movs	r2, #0
 8010b5a:	f7ef fbc5 	bl	80002e8 <__aeabi_dsub>
 8010b5e:	4602      	mov	r2, r0
 8010b60:	460b      	mov	r3, r1
 8010b62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010b66:	462a      	mov	r2, r5
 8010b68:	4633      	mov	r3, r6
 8010b6a:	f7f0 f805 	bl	8000b78 <__aeabi_dcmpgt>
 8010b6e:	2800      	cmp	r0, #0
 8010b70:	f040 8298 	bne.w	80110a4 <_dtoa_r+0x95c>
 8010b74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b78:	462a      	mov	r2, r5
 8010b7a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010b7e:	f7ef ffdd 	bl	8000b3c <__aeabi_dcmplt>
 8010b82:	bb38      	cbnz	r0, 8010bd4 <_dtoa_r+0x48c>
 8010b84:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8010b88:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010b8c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	f2c0 8157 	blt.w	8010e42 <_dtoa_r+0x6fa>
 8010b94:	2f0e      	cmp	r7, #14
 8010b96:	f300 8154 	bgt.w	8010e42 <_dtoa_r+0x6fa>
 8010b9a:	4b4b      	ldr	r3, [pc, #300]	@ (8010cc8 <_dtoa_r+0x580>)
 8010b9c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010ba0:	ed93 7b00 	vldr	d7, [r3]
 8010ba4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	ed8d 7b00 	vstr	d7, [sp]
 8010bac:	f280 80e5 	bge.w	8010d7a <_dtoa_r+0x632>
 8010bb0:	9b03      	ldr	r3, [sp, #12]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	f300 80e1 	bgt.w	8010d7a <_dtoa_r+0x632>
 8010bb8:	d10c      	bne.n	8010bd4 <_dtoa_r+0x48c>
 8010bba:	4b48      	ldr	r3, [pc, #288]	@ (8010cdc <_dtoa_r+0x594>)
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	ec51 0b17 	vmov	r0, r1, d7
 8010bc2:	f7ef fd49 	bl	8000658 <__aeabi_dmul>
 8010bc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010bca:	f7ef ffcb 	bl	8000b64 <__aeabi_dcmpge>
 8010bce:	2800      	cmp	r0, #0
 8010bd0:	f000 8266 	beq.w	80110a0 <_dtoa_r+0x958>
 8010bd4:	2400      	movs	r4, #0
 8010bd6:	4625      	mov	r5, r4
 8010bd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010bda:	4656      	mov	r6, sl
 8010bdc:	ea6f 0803 	mvn.w	r8, r3
 8010be0:	2700      	movs	r7, #0
 8010be2:	4621      	mov	r1, r4
 8010be4:	4648      	mov	r0, r9
 8010be6:	f000 ff89 	bl	8011afc <_Bfree>
 8010bea:	2d00      	cmp	r5, #0
 8010bec:	f000 80bd 	beq.w	8010d6a <_dtoa_r+0x622>
 8010bf0:	b12f      	cbz	r7, 8010bfe <_dtoa_r+0x4b6>
 8010bf2:	42af      	cmp	r7, r5
 8010bf4:	d003      	beq.n	8010bfe <_dtoa_r+0x4b6>
 8010bf6:	4639      	mov	r1, r7
 8010bf8:	4648      	mov	r0, r9
 8010bfa:	f000 ff7f 	bl	8011afc <_Bfree>
 8010bfe:	4629      	mov	r1, r5
 8010c00:	4648      	mov	r0, r9
 8010c02:	f000 ff7b 	bl	8011afc <_Bfree>
 8010c06:	e0b0      	b.n	8010d6a <_dtoa_r+0x622>
 8010c08:	07e2      	lsls	r2, r4, #31
 8010c0a:	d505      	bpl.n	8010c18 <_dtoa_r+0x4d0>
 8010c0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010c10:	f7ef fd22 	bl	8000658 <__aeabi_dmul>
 8010c14:	3601      	adds	r6, #1
 8010c16:	2301      	movs	r3, #1
 8010c18:	1064      	asrs	r4, r4, #1
 8010c1a:	3508      	adds	r5, #8
 8010c1c:	e762      	b.n	8010ae4 <_dtoa_r+0x39c>
 8010c1e:	2602      	movs	r6, #2
 8010c20:	e765      	b.n	8010aee <_dtoa_r+0x3a6>
 8010c22:	9c03      	ldr	r4, [sp, #12]
 8010c24:	46b8      	mov	r8, r7
 8010c26:	e784      	b.n	8010b32 <_dtoa_r+0x3ea>
 8010c28:	4b27      	ldr	r3, [pc, #156]	@ (8010cc8 <_dtoa_r+0x580>)
 8010c2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010c2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010c30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010c34:	4454      	add	r4, sl
 8010c36:	2900      	cmp	r1, #0
 8010c38:	d054      	beq.n	8010ce4 <_dtoa_r+0x59c>
 8010c3a:	4929      	ldr	r1, [pc, #164]	@ (8010ce0 <_dtoa_r+0x598>)
 8010c3c:	2000      	movs	r0, #0
 8010c3e:	f7ef fe35 	bl	80008ac <__aeabi_ddiv>
 8010c42:	4633      	mov	r3, r6
 8010c44:	462a      	mov	r2, r5
 8010c46:	f7ef fb4f 	bl	80002e8 <__aeabi_dsub>
 8010c4a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010c4e:	4656      	mov	r6, sl
 8010c50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010c54:	f7ef ffb0 	bl	8000bb8 <__aeabi_d2iz>
 8010c58:	4605      	mov	r5, r0
 8010c5a:	f7ef fc93 	bl	8000584 <__aeabi_i2d>
 8010c5e:	4602      	mov	r2, r0
 8010c60:	460b      	mov	r3, r1
 8010c62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010c66:	f7ef fb3f 	bl	80002e8 <__aeabi_dsub>
 8010c6a:	3530      	adds	r5, #48	@ 0x30
 8010c6c:	4602      	mov	r2, r0
 8010c6e:	460b      	mov	r3, r1
 8010c70:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010c74:	f806 5b01 	strb.w	r5, [r6], #1
 8010c78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010c7c:	f7ef ff5e 	bl	8000b3c <__aeabi_dcmplt>
 8010c80:	2800      	cmp	r0, #0
 8010c82:	d172      	bne.n	8010d6a <_dtoa_r+0x622>
 8010c84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c88:	4911      	ldr	r1, [pc, #68]	@ (8010cd0 <_dtoa_r+0x588>)
 8010c8a:	2000      	movs	r0, #0
 8010c8c:	f7ef fb2c 	bl	80002e8 <__aeabi_dsub>
 8010c90:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010c94:	f7ef ff52 	bl	8000b3c <__aeabi_dcmplt>
 8010c98:	2800      	cmp	r0, #0
 8010c9a:	f040 80b4 	bne.w	8010e06 <_dtoa_r+0x6be>
 8010c9e:	42a6      	cmp	r6, r4
 8010ca0:	f43f af70 	beq.w	8010b84 <_dtoa_r+0x43c>
 8010ca4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8010cd4 <_dtoa_r+0x58c>)
 8010caa:	2200      	movs	r2, #0
 8010cac:	f7ef fcd4 	bl	8000658 <__aeabi_dmul>
 8010cb0:	4b08      	ldr	r3, [pc, #32]	@ (8010cd4 <_dtoa_r+0x58c>)
 8010cb2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010cbc:	f7ef fccc 	bl	8000658 <__aeabi_dmul>
 8010cc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010cc4:	e7c4      	b.n	8010c50 <_dtoa_r+0x508>
 8010cc6:	bf00      	nop
 8010cc8:	080147c0 	.word	0x080147c0
 8010ccc:	08014798 	.word	0x08014798
 8010cd0:	3ff00000 	.word	0x3ff00000
 8010cd4:	40240000 	.word	0x40240000
 8010cd8:	401c0000 	.word	0x401c0000
 8010cdc:	40140000 	.word	0x40140000
 8010ce0:	3fe00000 	.word	0x3fe00000
 8010ce4:	4631      	mov	r1, r6
 8010ce6:	4628      	mov	r0, r5
 8010ce8:	f7ef fcb6 	bl	8000658 <__aeabi_dmul>
 8010cec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010cf0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8010cf2:	4656      	mov	r6, sl
 8010cf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010cf8:	f7ef ff5e 	bl	8000bb8 <__aeabi_d2iz>
 8010cfc:	4605      	mov	r5, r0
 8010cfe:	f7ef fc41 	bl	8000584 <__aeabi_i2d>
 8010d02:	4602      	mov	r2, r0
 8010d04:	460b      	mov	r3, r1
 8010d06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010d0a:	f7ef faed 	bl	80002e8 <__aeabi_dsub>
 8010d0e:	3530      	adds	r5, #48	@ 0x30
 8010d10:	f806 5b01 	strb.w	r5, [r6], #1
 8010d14:	4602      	mov	r2, r0
 8010d16:	460b      	mov	r3, r1
 8010d18:	42a6      	cmp	r6, r4
 8010d1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010d1e:	f04f 0200 	mov.w	r2, #0
 8010d22:	d124      	bne.n	8010d6e <_dtoa_r+0x626>
 8010d24:	4baf      	ldr	r3, [pc, #700]	@ (8010fe4 <_dtoa_r+0x89c>)
 8010d26:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010d2a:	f7ef fadf 	bl	80002ec <__adddf3>
 8010d2e:	4602      	mov	r2, r0
 8010d30:	460b      	mov	r3, r1
 8010d32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010d36:	f7ef ff1f 	bl	8000b78 <__aeabi_dcmpgt>
 8010d3a:	2800      	cmp	r0, #0
 8010d3c:	d163      	bne.n	8010e06 <_dtoa_r+0x6be>
 8010d3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010d42:	49a8      	ldr	r1, [pc, #672]	@ (8010fe4 <_dtoa_r+0x89c>)
 8010d44:	2000      	movs	r0, #0
 8010d46:	f7ef facf 	bl	80002e8 <__aeabi_dsub>
 8010d4a:	4602      	mov	r2, r0
 8010d4c:	460b      	mov	r3, r1
 8010d4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010d52:	f7ef fef3 	bl	8000b3c <__aeabi_dcmplt>
 8010d56:	2800      	cmp	r0, #0
 8010d58:	f43f af14 	beq.w	8010b84 <_dtoa_r+0x43c>
 8010d5c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8010d5e:	1e73      	subs	r3, r6, #1
 8010d60:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010d62:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010d66:	2b30      	cmp	r3, #48	@ 0x30
 8010d68:	d0f8      	beq.n	8010d5c <_dtoa_r+0x614>
 8010d6a:	4647      	mov	r7, r8
 8010d6c:	e03b      	b.n	8010de6 <_dtoa_r+0x69e>
 8010d6e:	4b9e      	ldr	r3, [pc, #632]	@ (8010fe8 <_dtoa_r+0x8a0>)
 8010d70:	f7ef fc72 	bl	8000658 <__aeabi_dmul>
 8010d74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010d78:	e7bc      	b.n	8010cf4 <_dtoa_r+0x5ac>
 8010d7a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010d7e:	4656      	mov	r6, sl
 8010d80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d84:	4620      	mov	r0, r4
 8010d86:	4629      	mov	r1, r5
 8010d88:	f7ef fd90 	bl	80008ac <__aeabi_ddiv>
 8010d8c:	f7ef ff14 	bl	8000bb8 <__aeabi_d2iz>
 8010d90:	4680      	mov	r8, r0
 8010d92:	f7ef fbf7 	bl	8000584 <__aeabi_i2d>
 8010d96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d9a:	f7ef fc5d 	bl	8000658 <__aeabi_dmul>
 8010d9e:	4602      	mov	r2, r0
 8010da0:	460b      	mov	r3, r1
 8010da2:	4620      	mov	r0, r4
 8010da4:	4629      	mov	r1, r5
 8010da6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010daa:	f7ef fa9d 	bl	80002e8 <__aeabi_dsub>
 8010dae:	f806 4b01 	strb.w	r4, [r6], #1
 8010db2:	9d03      	ldr	r5, [sp, #12]
 8010db4:	eba6 040a 	sub.w	r4, r6, sl
 8010db8:	42a5      	cmp	r5, r4
 8010dba:	4602      	mov	r2, r0
 8010dbc:	460b      	mov	r3, r1
 8010dbe:	d133      	bne.n	8010e28 <_dtoa_r+0x6e0>
 8010dc0:	f7ef fa94 	bl	80002ec <__adddf3>
 8010dc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010dc8:	4604      	mov	r4, r0
 8010dca:	460d      	mov	r5, r1
 8010dcc:	f7ef fed4 	bl	8000b78 <__aeabi_dcmpgt>
 8010dd0:	b9c0      	cbnz	r0, 8010e04 <_dtoa_r+0x6bc>
 8010dd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010dd6:	4620      	mov	r0, r4
 8010dd8:	4629      	mov	r1, r5
 8010dda:	f7ef fea5 	bl	8000b28 <__aeabi_dcmpeq>
 8010dde:	b110      	cbz	r0, 8010de6 <_dtoa_r+0x69e>
 8010de0:	f018 0f01 	tst.w	r8, #1
 8010de4:	d10e      	bne.n	8010e04 <_dtoa_r+0x6bc>
 8010de6:	9902      	ldr	r1, [sp, #8]
 8010de8:	4648      	mov	r0, r9
 8010dea:	f000 fe87 	bl	8011afc <_Bfree>
 8010dee:	2300      	movs	r3, #0
 8010df0:	7033      	strb	r3, [r6, #0]
 8010df2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010df4:	3701      	adds	r7, #1
 8010df6:	601f      	str	r7, [r3, #0]
 8010df8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	f000 824b 	beq.w	8011296 <_dtoa_r+0xb4e>
 8010e00:	601e      	str	r6, [r3, #0]
 8010e02:	e248      	b.n	8011296 <_dtoa_r+0xb4e>
 8010e04:	46b8      	mov	r8, r7
 8010e06:	4633      	mov	r3, r6
 8010e08:	461e      	mov	r6, r3
 8010e0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010e0e:	2a39      	cmp	r2, #57	@ 0x39
 8010e10:	d106      	bne.n	8010e20 <_dtoa_r+0x6d8>
 8010e12:	459a      	cmp	sl, r3
 8010e14:	d1f8      	bne.n	8010e08 <_dtoa_r+0x6c0>
 8010e16:	2230      	movs	r2, #48	@ 0x30
 8010e18:	f108 0801 	add.w	r8, r8, #1
 8010e1c:	f88a 2000 	strb.w	r2, [sl]
 8010e20:	781a      	ldrb	r2, [r3, #0]
 8010e22:	3201      	adds	r2, #1
 8010e24:	701a      	strb	r2, [r3, #0]
 8010e26:	e7a0      	b.n	8010d6a <_dtoa_r+0x622>
 8010e28:	4b6f      	ldr	r3, [pc, #444]	@ (8010fe8 <_dtoa_r+0x8a0>)
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	f7ef fc14 	bl	8000658 <__aeabi_dmul>
 8010e30:	2200      	movs	r2, #0
 8010e32:	2300      	movs	r3, #0
 8010e34:	4604      	mov	r4, r0
 8010e36:	460d      	mov	r5, r1
 8010e38:	f7ef fe76 	bl	8000b28 <__aeabi_dcmpeq>
 8010e3c:	2800      	cmp	r0, #0
 8010e3e:	d09f      	beq.n	8010d80 <_dtoa_r+0x638>
 8010e40:	e7d1      	b.n	8010de6 <_dtoa_r+0x69e>
 8010e42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010e44:	2a00      	cmp	r2, #0
 8010e46:	f000 80ea 	beq.w	801101e <_dtoa_r+0x8d6>
 8010e4a:	9a07      	ldr	r2, [sp, #28]
 8010e4c:	2a01      	cmp	r2, #1
 8010e4e:	f300 80cd 	bgt.w	8010fec <_dtoa_r+0x8a4>
 8010e52:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010e54:	2a00      	cmp	r2, #0
 8010e56:	f000 80c1 	beq.w	8010fdc <_dtoa_r+0x894>
 8010e5a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010e5e:	9c08      	ldr	r4, [sp, #32]
 8010e60:	9e00      	ldr	r6, [sp, #0]
 8010e62:	9a00      	ldr	r2, [sp, #0]
 8010e64:	441a      	add	r2, r3
 8010e66:	9200      	str	r2, [sp, #0]
 8010e68:	9a06      	ldr	r2, [sp, #24]
 8010e6a:	2101      	movs	r1, #1
 8010e6c:	441a      	add	r2, r3
 8010e6e:	4648      	mov	r0, r9
 8010e70:	9206      	str	r2, [sp, #24]
 8010e72:	f000 ff41 	bl	8011cf8 <__i2b>
 8010e76:	4605      	mov	r5, r0
 8010e78:	b166      	cbz	r6, 8010e94 <_dtoa_r+0x74c>
 8010e7a:	9b06      	ldr	r3, [sp, #24]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	dd09      	ble.n	8010e94 <_dtoa_r+0x74c>
 8010e80:	42b3      	cmp	r3, r6
 8010e82:	9a00      	ldr	r2, [sp, #0]
 8010e84:	bfa8      	it	ge
 8010e86:	4633      	movge	r3, r6
 8010e88:	1ad2      	subs	r2, r2, r3
 8010e8a:	9200      	str	r2, [sp, #0]
 8010e8c:	9a06      	ldr	r2, [sp, #24]
 8010e8e:	1af6      	subs	r6, r6, r3
 8010e90:	1ad3      	subs	r3, r2, r3
 8010e92:	9306      	str	r3, [sp, #24]
 8010e94:	9b08      	ldr	r3, [sp, #32]
 8010e96:	b30b      	cbz	r3, 8010edc <_dtoa_r+0x794>
 8010e98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	f000 80c6 	beq.w	801102c <_dtoa_r+0x8e4>
 8010ea0:	2c00      	cmp	r4, #0
 8010ea2:	f000 80c0 	beq.w	8011026 <_dtoa_r+0x8de>
 8010ea6:	4629      	mov	r1, r5
 8010ea8:	4622      	mov	r2, r4
 8010eaa:	4648      	mov	r0, r9
 8010eac:	f000 ffdc 	bl	8011e68 <__pow5mult>
 8010eb0:	9a02      	ldr	r2, [sp, #8]
 8010eb2:	4601      	mov	r1, r0
 8010eb4:	4605      	mov	r5, r0
 8010eb6:	4648      	mov	r0, r9
 8010eb8:	f000 ff34 	bl	8011d24 <__multiply>
 8010ebc:	9902      	ldr	r1, [sp, #8]
 8010ebe:	4680      	mov	r8, r0
 8010ec0:	4648      	mov	r0, r9
 8010ec2:	f000 fe1b 	bl	8011afc <_Bfree>
 8010ec6:	9b08      	ldr	r3, [sp, #32]
 8010ec8:	1b1b      	subs	r3, r3, r4
 8010eca:	9308      	str	r3, [sp, #32]
 8010ecc:	f000 80b1 	beq.w	8011032 <_dtoa_r+0x8ea>
 8010ed0:	9a08      	ldr	r2, [sp, #32]
 8010ed2:	4641      	mov	r1, r8
 8010ed4:	4648      	mov	r0, r9
 8010ed6:	f000 ffc7 	bl	8011e68 <__pow5mult>
 8010eda:	9002      	str	r0, [sp, #8]
 8010edc:	2101      	movs	r1, #1
 8010ede:	4648      	mov	r0, r9
 8010ee0:	f000 ff0a 	bl	8011cf8 <__i2b>
 8010ee4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010ee6:	4604      	mov	r4, r0
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	f000 81d8 	beq.w	801129e <_dtoa_r+0xb56>
 8010eee:	461a      	mov	r2, r3
 8010ef0:	4601      	mov	r1, r0
 8010ef2:	4648      	mov	r0, r9
 8010ef4:	f000 ffb8 	bl	8011e68 <__pow5mult>
 8010ef8:	9b07      	ldr	r3, [sp, #28]
 8010efa:	2b01      	cmp	r3, #1
 8010efc:	4604      	mov	r4, r0
 8010efe:	f300 809f 	bgt.w	8011040 <_dtoa_r+0x8f8>
 8010f02:	9b04      	ldr	r3, [sp, #16]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	f040 8097 	bne.w	8011038 <_dtoa_r+0x8f0>
 8010f0a:	9b05      	ldr	r3, [sp, #20]
 8010f0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	f040 8093 	bne.w	801103c <_dtoa_r+0x8f4>
 8010f16:	9b05      	ldr	r3, [sp, #20]
 8010f18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010f1c:	0d1b      	lsrs	r3, r3, #20
 8010f1e:	051b      	lsls	r3, r3, #20
 8010f20:	b133      	cbz	r3, 8010f30 <_dtoa_r+0x7e8>
 8010f22:	9b00      	ldr	r3, [sp, #0]
 8010f24:	3301      	adds	r3, #1
 8010f26:	9300      	str	r3, [sp, #0]
 8010f28:	9b06      	ldr	r3, [sp, #24]
 8010f2a:	3301      	adds	r3, #1
 8010f2c:	9306      	str	r3, [sp, #24]
 8010f2e:	2301      	movs	r3, #1
 8010f30:	9308      	str	r3, [sp, #32]
 8010f32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	f000 81b8 	beq.w	80112aa <_dtoa_r+0xb62>
 8010f3a:	6923      	ldr	r3, [r4, #16]
 8010f3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010f40:	6918      	ldr	r0, [r3, #16]
 8010f42:	f000 fe8d 	bl	8011c60 <__hi0bits>
 8010f46:	f1c0 0020 	rsb	r0, r0, #32
 8010f4a:	9b06      	ldr	r3, [sp, #24]
 8010f4c:	4418      	add	r0, r3
 8010f4e:	f010 001f 	ands.w	r0, r0, #31
 8010f52:	f000 8082 	beq.w	801105a <_dtoa_r+0x912>
 8010f56:	f1c0 0320 	rsb	r3, r0, #32
 8010f5a:	2b04      	cmp	r3, #4
 8010f5c:	dd73      	ble.n	8011046 <_dtoa_r+0x8fe>
 8010f5e:	9b00      	ldr	r3, [sp, #0]
 8010f60:	f1c0 001c 	rsb	r0, r0, #28
 8010f64:	4403      	add	r3, r0
 8010f66:	9300      	str	r3, [sp, #0]
 8010f68:	9b06      	ldr	r3, [sp, #24]
 8010f6a:	4403      	add	r3, r0
 8010f6c:	4406      	add	r6, r0
 8010f6e:	9306      	str	r3, [sp, #24]
 8010f70:	9b00      	ldr	r3, [sp, #0]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	dd05      	ble.n	8010f82 <_dtoa_r+0x83a>
 8010f76:	9902      	ldr	r1, [sp, #8]
 8010f78:	461a      	mov	r2, r3
 8010f7a:	4648      	mov	r0, r9
 8010f7c:	f000 ffce 	bl	8011f1c <__lshift>
 8010f80:	9002      	str	r0, [sp, #8]
 8010f82:	9b06      	ldr	r3, [sp, #24]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	dd05      	ble.n	8010f94 <_dtoa_r+0x84c>
 8010f88:	4621      	mov	r1, r4
 8010f8a:	461a      	mov	r2, r3
 8010f8c:	4648      	mov	r0, r9
 8010f8e:	f000 ffc5 	bl	8011f1c <__lshift>
 8010f92:	4604      	mov	r4, r0
 8010f94:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d061      	beq.n	801105e <_dtoa_r+0x916>
 8010f9a:	9802      	ldr	r0, [sp, #8]
 8010f9c:	4621      	mov	r1, r4
 8010f9e:	f001 f829 	bl	8011ff4 <__mcmp>
 8010fa2:	2800      	cmp	r0, #0
 8010fa4:	da5b      	bge.n	801105e <_dtoa_r+0x916>
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	9902      	ldr	r1, [sp, #8]
 8010faa:	220a      	movs	r2, #10
 8010fac:	4648      	mov	r0, r9
 8010fae:	f000 fdc7 	bl	8011b40 <__multadd>
 8010fb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fb4:	9002      	str	r0, [sp, #8]
 8010fb6:	f107 38ff 	add.w	r8, r7, #4294967295
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	f000 8177 	beq.w	80112ae <_dtoa_r+0xb66>
 8010fc0:	4629      	mov	r1, r5
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	220a      	movs	r2, #10
 8010fc6:	4648      	mov	r0, r9
 8010fc8:	f000 fdba 	bl	8011b40 <__multadd>
 8010fcc:	f1bb 0f00 	cmp.w	fp, #0
 8010fd0:	4605      	mov	r5, r0
 8010fd2:	dc6f      	bgt.n	80110b4 <_dtoa_r+0x96c>
 8010fd4:	9b07      	ldr	r3, [sp, #28]
 8010fd6:	2b02      	cmp	r3, #2
 8010fd8:	dc49      	bgt.n	801106e <_dtoa_r+0x926>
 8010fda:	e06b      	b.n	80110b4 <_dtoa_r+0x96c>
 8010fdc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010fde:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010fe2:	e73c      	b.n	8010e5e <_dtoa_r+0x716>
 8010fe4:	3fe00000 	.word	0x3fe00000
 8010fe8:	40240000 	.word	0x40240000
 8010fec:	9b03      	ldr	r3, [sp, #12]
 8010fee:	1e5c      	subs	r4, r3, #1
 8010ff0:	9b08      	ldr	r3, [sp, #32]
 8010ff2:	42a3      	cmp	r3, r4
 8010ff4:	db09      	blt.n	801100a <_dtoa_r+0x8c2>
 8010ff6:	1b1c      	subs	r4, r3, r4
 8010ff8:	9b03      	ldr	r3, [sp, #12]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	f6bf af30 	bge.w	8010e60 <_dtoa_r+0x718>
 8011000:	9b00      	ldr	r3, [sp, #0]
 8011002:	9a03      	ldr	r2, [sp, #12]
 8011004:	1a9e      	subs	r6, r3, r2
 8011006:	2300      	movs	r3, #0
 8011008:	e72b      	b.n	8010e62 <_dtoa_r+0x71a>
 801100a:	9b08      	ldr	r3, [sp, #32]
 801100c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801100e:	9408      	str	r4, [sp, #32]
 8011010:	1ae3      	subs	r3, r4, r3
 8011012:	441a      	add	r2, r3
 8011014:	9e00      	ldr	r6, [sp, #0]
 8011016:	9b03      	ldr	r3, [sp, #12]
 8011018:	920d      	str	r2, [sp, #52]	@ 0x34
 801101a:	2400      	movs	r4, #0
 801101c:	e721      	b.n	8010e62 <_dtoa_r+0x71a>
 801101e:	9c08      	ldr	r4, [sp, #32]
 8011020:	9e00      	ldr	r6, [sp, #0]
 8011022:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8011024:	e728      	b.n	8010e78 <_dtoa_r+0x730>
 8011026:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801102a:	e751      	b.n	8010ed0 <_dtoa_r+0x788>
 801102c:	9a08      	ldr	r2, [sp, #32]
 801102e:	9902      	ldr	r1, [sp, #8]
 8011030:	e750      	b.n	8010ed4 <_dtoa_r+0x78c>
 8011032:	f8cd 8008 	str.w	r8, [sp, #8]
 8011036:	e751      	b.n	8010edc <_dtoa_r+0x794>
 8011038:	2300      	movs	r3, #0
 801103a:	e779      	b.n	8010f30 <_dtoa_r+0x7e8>
 801103c:	9b04      	ldr	r3, [sp, #16]
 801103e:	e777      	b.n	8010f30 <_dtoa_r+0x7e8>
 8011040:	2300      	movs	r3, #0
 8011042:	9308      	str	r3, [sp, #32]
 8011044:	e779      	b.n	8010f3a <_dtoa_r+0x7f2>
 8011046:	d093      	beq.n	8010f70 <_dtoa_r+0x828>
 8011048:	9a00      	ldr	r2, [sp, #0]
 801104a:	331c      	adds	r3, #28
 801104c:	441a      	add	r2, r3
 801104e:	9200      	str	r2, [sp, #0]
 8011050:	9a06      	ldr	r2, [sp, #24]
 8011052:	441a      	add	r2, r3
 8011054:	441e      	add	r6, r3
 8011056:	9206      	str	r2, [sp, #24]
 8011058:	e78a      	b.n	8010f70 <_dtoa_r+0x828>
 801105a:	4603      	mov	r3, r0
 801105c:	e7f4      	b.n	8011048 <_dtoa_r+0x900>
 801105e:	9b03      	ldr	r3, [sp, #12]
 8011060:	2b00      	cmp	r3, #0
 8011062:	46b8      	mov	r8, r7
 8011064:	dc20      	bgt.n	80110a8 <_dtoa_r+0x960>
 8011066:	469b      	mov	fp, r3
 8011068:	9b07      	ldr	r3, [sp, #28]
 801106a:	2b02      	cmp	r3, #2
 801106c:	dd1e      	ble.n	80110ac <_dtoa_r+0x964>
 801106e:	f1bb 0f00 	cmp.w	fp, #0
 8011072:	f47f adb1 	bne.w	8010bd8 <_dtoa_r+0x490>
 8011076:	4621      	mov	r1, r4
 8011078:	465b      	mov	r3, fp
 801107a:	2205      	movs	r2, #5
 801107c:	4648      	mov	r0, r9
 801107e:	f000 fd5f 	bl	8011b40 <__multadd>
 8011082:	4601      	mov	r1, r0
 8011084:	4604      	mov	r4, r0
 8011086:	9802      	ldr	r0, [sp, #8]
 8011088:	f000 ffb4 	bl	8011ff4 <__mcmp>
 801108c:	2800      	cmp	r0, #0
 801108e:	f77f ada3 	ble.w	8010bd8 <_dtoa_r+0x490>
 8011092:	4656      	mov	r6, sl
 8011094:	2331      	movs	r3, #49	@ 0x31
 8011096:	f806 3b01 	strb.w	r3, [r6], #1
 801109a:	f108 0801 	add.w	r8, r8, #1
 801109e:	e59f      	b.n	8010be0 <_dtoa_r+0x498>
 80110a0:	9c03      	ldr	r4, [sp, #12]
 80110a2:	46b8      	mov	r8, r7
 80110a4:	4625      	mov	r5, r4
 80110a6:	e7f4      	b.n	8011092 <_dtoa_r+0x94a>
 80110a8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80110ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	f000 8101 	beq.w	80112b6 <_dtoa_r+0xb6e>
 80110b4:	2e00      	cmp	r6, #0
 80110b6:	dd05      	ble.n	80110c4 <_dtoa_r+0x97c>
 80110b8:	4629      	mov	r1, r5
 80110ba:	4632      	mov	r2, r6
 80110bc:	4648      	mov	r0, r9
 80110be:	f000 ff2d 	bl	8011f1c <__lshift>
 80110c2:	4605      	mov	r5, r0
 80110c4:	9b08      	ldr	r3, [sp, #32]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d05c      	beq.n	8011184 <_dtoa_r+0xa3c>
 80110ca:	6869      	ldr	r1, [r5, #4]
 80110cc:	4648      	mov	r0, r9
 80110ce:	f000 fcd5 	bl	8011a7c <_Balloc>
 80110d2:	4606      	mov	r6, r0
 80110d4:	b928      	cbnz	r0, 80110e2 <_dtoa_r+0x99a>
 80110d6:	4b82      	ldr	r3, [pc, #520]	@ (80112e0 <_dtoa_r+0xb98>)
 80110d8:	4602      	mov	r2, r0
 80110da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80110de:	f7ff bb4a 	b.w	8010776 <_dtoa_r+0x2e>
 80110e2:	692a      	ldr	r2, [r5, #16]
 80110e4:	3202      	adds	r2, #2
 80110e6:	0092      	lsls	r2, r2, #2
 80110e8:	f105 010c 	add.w	r1, r5, #12
 80110ec:	300c      	adds	r0, #12
 80110ee:	f7ff fa7b 	bl	80105e8 <memcpy>
 80110f2:	2201      	movs	r2, #1
 80110f4:	4631      	mov	r1, r6
 80110f6:	4648      	mov	r0, r9
 80110f8:	f000 ff10 	bl	8011f1c <__lshift>
 80110fc:	f10a 0301 	add.w	r3, sl, #1
 8011100:	9300      	str	r3, [sp, #0]
 8011102:	eb0a 030b 	add.w	r3, sl, fp
 8011106:	9308      	str	r3, [sp, #32]
 8011108:	9b04      	ldr	r3, [sp, #16]
 801110a:	f003 0301 	and.w	r3, r3, #1
 801110e:	462f      	mov	r7, r5
 8011110:	9306      	str	r3, [sp, #24]
 8011112:	4605      	mov	r5, r0
 8011114:	9b00      	ldr	r3, [sp, #0]
 8011116:	9802      	ldr	r0, [sp, #8]
 8011118:	4621      	mov	r1, r4
 801111a:	f103 3bff 	add.w	fp, r3, #4294967295
 801111e:	f7ff fa88 	bl	8010632 <quorem>
 8011122:	4603      	mov	r3, r0
 8011124:	3330      	adds	r3, #48	@ 0x30
 8011126:	9003      	str	r0, [sp, #12]
 8011128:	4639      	mov	r1, r7
 801112a:	9802      	ldr	r0, [sp, #8]
 801112c:	9309      	str	r3, [sp, #36]	@ 0x24
 801112e:	f000 ff61 	bl	8011ff4 <__mcmp>
 8011132:	462a      	mov	r2, r5
 8011134:	9004      	str	r0, [sp, #16]
 8011136:	4621      	mov	r1, r4
 8011138:	4648      	mov	r0, r9
 801113a:	f000 ff77 	bl	801202c <__mdiff>
 801113e:	68c2      	ldr	r2, [r0, #12]
 8011140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011142:	4606      	mov	r6, r0
 8011144:	bb02      	cbnz	r2, 8011188 <_dtoa_r+0xa40>
 8011146:	4601      	mov	r1, r0
 8011148:	9802      	ldr	r0, [sp, #8]
 801114a:	f000 ff53 	bl	8011ff4 <__mcmp>
 801114e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011150:	4602      	mov	r2, r0
 8011152:	4631      	mov	r1, r6
 8011154:	4648      	mov	r0, r9
 8011156:	920c      	str	r2, [sp, #48]	@ 0x30
 8011158:	9309      	str	r3, [sp, #36]	@ 0x24
 801115a:	f000 fccf 	bl	8011afc <_Bfree>
 801115e:	9b07      	ldr	r3, [sp, #28]
 8011160:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011162:	9e00      	ldr	r6, [sp, #0]
 8011164:	ea42 0103 	orr.w	r1, r2, r3
 8011168:	9b06      	ldr	r3, [sp, #24]
 801116a:	4319      	orrs	r1, r3
 801116c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801116e:	d10d      	bne.n	801118c <_dtoa_r+0xa44>
 8011170:	2b39      	cmp	r3, #57	@ 0x39
 8011172:	d027      	beq.n	80111c4 <_dtoa_r+0xa7c>
 8011174:	9a04      	ldr	r2, [sp, #16]
 8011176:	2a00      	cmp	r2, #0
 8011178:	dd01      	ble.n	801117e <_dtoa_r+0xa36>
 801117a:	9b03      	ldr	r3, [sp, #12]
 801117c:	3331      	adds	r3, #49	@ 0x31
 801117e:	f88b 3000 	strb.w	r3, [fp]
 8011182:	e52e      	b.n	8010be2 <_dtoa_r+0x49a>
 8011184:	4628      	mov	r0, r5
 8011186:	e7b9      	b.n	80110fc <_dtoa_r+0x9b4>
 8011188:	2201      	movs	r2, #1
 801118a:	e7e2      	b.n	8011152 <_dtoa_r+0xa0a>
 801118c:	9904      	ldr	r1, [sp, #16]
 801118e:	2900      	cmp	r1, #0
 8011190:	db04      	blt.n	801119c <_dtoa_r+0xa54>
 8011192:	9807      	ldr	r0, [sp, #28]
 8011194:	4301      	orrs	r1, r0
 8011196:	9806      	ldr	r0, [sp, #24]
 8011198:	4301      	orrs	r1, r0
 801119a:	d120      	bne.n	80111de <_dtoa_r+0xa96>
 801119c:	2a00      	cmp	r2, #0
 801119e:	ddee      	ble.n	801117e <_dtoa_r+0xa36>
 80111a0:	9902      	ldr	r1, [sp, #8]
 80111a2:	9300      	str	r3, [sp, #0]
 80111a4:	2201      	movs	r2, #1
 80111a6:	4648      	mov	r0, r9
 80111a8:	f000 feb8 	bl	8011f1c <__lshift>
 80111ac:	4621      	mov	r1, r4
 80111ae:	9002      	str	r0, [sp, #8]
 80111b0:	f000 ff20 	bl	8011ff4 <__mcmp>
 80111b4:	2800      	cmp	r0, #0
 80111b6:	9b00      	ldr	r3, [sp, #0]
 80111b8:	dc02      	bgt.n	80111c0 <_dtoa_r+0xa78>
 80111ba:	d1e0      	bne.n	801117e <_dtoa_r+0xa36>
 80111bc:	07da      	lsls	r2, r3, #31
 80111be:	d5de      	bpl.n	801117e <_dtoa_r+0xa36>
 80111c0:	2b39      	cmp	r3, #57	@ 0x39
 80111c2:	d1da      	bne.n	801117a <_dtoa_r+0xa32>
 80111c4:	2339      	movs	r3, #57	@ 0x39
 80111c6:	f88b 3000 	strb.w	r3, [fp]
 80111ca:	4633      	mov	r3, r6
 80111cc:	461e      	mov	r6, r3
 80111ce:	3b01      	subs	r3, #1
 80111d0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80111d4:	2a39      	cmp	r2, #57	@ 0x39
 80111d6:	d04e      	beq.n	8011276 <_dtoa_r+0xb2e>
 80111d8:	3201      	adds	r2, #1
 80111da:	701a      	strb	r2, [r3, #0]
 80111dc:	e501      	b.n	8010be2 <_dtoa_r+0x49a>
 80111de:	2a00      	cmp	r2, #0
 80111e0:	dd03      	ble.n	80111ea <_dtoa_r+0xaa2>
 80111e2:	2b39      	cmp	r3, #57	@ 0x39
 80111e4:	d0ee      	beq.n	80111c4 <_dtoa_r+0xa7c>
 80111e6:	3301      	adds	r3, #1
 80111e8:	e7c9      	b.n	801117e <_dtoa_r+0xa36>
 80111ea:	9a00      	ldr	r2, [sp, #0]
 80111ec:	9908      	ldr	r1, [sp, #32]
 80111ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 80111f2:	428a      	cmp	r2, r1
 80111f4:	d028      	beq.n	8011248 <_dtoa_r+0xb00>
 80111f6:	9902      	ldr	r1, [sp, #8]
 80111f8:	2300      	movs	r3, #0
 80111fa:	220a      	movs	r2, #10
 80111fc:	4648      	mov	r0, r9
 80111fe:	f000 fc9f 	bl	8011b40 <__multadd>
 8011202:	42af      	cmp	r7, r5
 8011204:	9002      	str	r0, [sp, #8]
 8011206:	f04f 0300 	mov.w	r3, #0
 801120a:	f04f 020a 	mov.w	r2, #10
 801120e:	4639      	mov	r1, r7
 8011210:	4648      	mov	r0, r9
 8011212:	d107      	bne.n	8011224 <_dtoa_r+0xadc>
 8011214:	f000 fc94 	bl	8011b40 <__multadd>
 8011218:	4607      	mov	r7, r0
 801121a:	4605      	mov	r5, r0
 801121c:	9b00      	ldr	r3, [sp, #0]
 801121e:	3301      	adds	r3, #1
 8011220:	9300      	str	r3, [sp, #0]
 8011222:	e777      	b.n	8011114 <_dtoa_r+0x9cc>
 8011224:	f000 fc8c 	bl	8011b40 <__multadd>
 8011228:	4629      	mov	r1, r5
 801122a:	4607      	mov	r7, r0
 801122c:	2300      	movs	r3, #0
 801122e:	220a      	movs	r2, #10
 8011230:	4648      	mov	r0, r9
 8011232:	f000 fc85 	bl	8011b40 <__multadd>
 8011236:	4605      	mov	r5, r0
 8011238:	e7f0      	b.n	801121c <_dtoa_r+0xad4>
 801123a:	f1bb 0f00 	cmp.w	fp, #0
 801123e:	bfcc      	ite	gt
 8011240:	465e      	movgt	r6, fp
 8011242:	2601      	movle	r6, #1
 8011244:	4456      	add	r6, sl
 8011246:	2700      	movs	r7, #0
 8011248:	9902      	ldr	r1, [sp, #8]
 801124a:	9300      	str	r3, [sp, #0]
 801124c:	2201      	movs	r2, #1
 801124e:	4648      	mov	r0, r9
 8011250:	f000 fe64 	bl	8011f1c <__lshift>
 8011254:	4621      	mov	r1, r4
 8011256:	9002      	str	r0, [sp, #8]
 8011258:	f000 fecc 	bl	8011ff4 <__mcmp>
 801125c:	2800      	cmp	r0, #0
 801125e:	dcb4      	bgt.n	80111ca <_dtoa_r+0xa82>
 8011260:	d102      	bne.n	8011268 <_dtoa_r+0xb20>
 8011262:	9b00      	ldr	r3, [sp, #0]
 8011264:	07db      	lsls	r3, r3, #31
 8011266:	d4b0      	bmi.n	80111ca <_dtoa_r+0xa82>
 8011268:	4633      	mov	r3, r6
 801126a:	461e      	mov	r6, r3
 801126c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011270:	2a30      	cmp	r2, #48	@ 0x30
 8011272:	d0fa      	beq.n	801126a <_dtoa_r+0xb22>
 8011274:	e4b5      	b.n	8010be2 <_dtoa_r+0x49a>
 8011276:	459a      	cmp	sl, r3
 8011278:	d1a8      	bne.n	80111cc <_dtoa_r+0xa84>
 801127a:	2331      	movs	r3, #49	@ 0x31
 801127c:	f108 0801 	add.w	r8, r8, #1
 8011280:	f88a 3000 	strb.w	r3, [sl]
 8011284:	e4ad      	b.n	8010be2 <_dtoa_r+0x49a>
 8011286:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011288:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80112e4 <_dtoa_r+0xb9c>
 801128c:	b11b      	cbz	r3, 8011296 <_dtoa_r+0xb4e>
 801128e:	f10a 0308 	add.w	r3, sl, #8
 8011292:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011294:	6013      	str	r3, [r2, #0]
 8011296:	4650      	mov	r0, sl
 8011298:	b017      	add	sp, #92	@ 0x5c
 801129a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801129e:	9b07      	ldr	r3, [sp, #28]
 80112a0:	2b01      	cmp	r3, #1
 80112a2:	f77f ae2e 	ble.w	8010f02 <_dtoa_r+0x7ba>
 80112a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80112a8:	9308      	str	r3, [sp, #32]
 80112aa:	2001      	movs	r0, #1
 80112ac:	e64d      	b.n	8010f4a <_dtoa_r+0x802>
 80112ae:	f1bb 0f00 	cmp.w	fp, #0
 80112b2:	f77f aed9 	ble.w	8011068 <_dtoa_r+0x920>
 80112b6:	4656      	mov	r6, sl
 80112b8:	9802      	ldr	r0, [sp, #8]
 80112ba:	4621      	mov	r1, r4
 80112bc:	f7ff f9b9 	bl	8010632 <quorem>
 80112c0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80112c4:	f806 3b01 	strb.w	r3, [r6], #1
 80112c8:	eba6 020a 	sub.w	r2, r6, sl
 80112cc:	4593      	cmp	fp, r2
 80112ce:	ddb4      	ble.n	801123a <_dtoa_r+0xaf2>
 80112d0:	9902      	ldr	r1, [sp, #8]
 80112d2:	2300      	movs	r3, #0
 80112d4:	220a      	movs	r2, #10
 80112d6:	4648      	mov	r0, r9
 80112d8:	f000 fc32 	bl	8011b40 <__multadd>
 80112dc:	9002      	str	r0, [sp, #8]
 80112de:	e7eb      	b.n	80112b8 <_dtoa_r+0xb70>
 80112e0:	0801465d 	.word	0x0801465d
 80112e4:	080145f8 	.word	0x080145f8

080112e8 <_free_r>:
 80112e8:	b538      	push	{r3, r4, r5, lr}
 80112ea:	4605      	mov	r5, r0
 80112ec:	2900      	cmp	r1, #0
 80112ee:	d041      	beq.n	8011374 <_free_r+0x8c>
 80112f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80112f4:	1f0c      	subs	r4, r1, #4
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	bfb8      	it	lt
 80112fa:	18e4      	addlt	r4, r4, r3
 80112fc:	f7f3 fadc 	bl	80048b8 <__malloc_lock>
 8011300:	4a1d      	ldr	r2, [pc, #116]	@ (8011378 <_free_r+0x90>)
 8011302:	6813      	ldr	r3, [r2, #0]
 8011304:	b933      	cbnz	r3, 8011314 <_free_r+0x2c>
 8011306:	6063      	str	r3, [r4, #4]
 8011308:	6014      	str	r4, [r2, #0]
 801130a:	4628      	mov	r0, r5
 801130c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011310:	f7f3 bb0c 	b.w	800492c <__malloc_unlock>
 8011314:	42a3      	cmp	r3, r4
 8011316:	d908      	bls.n	801132a <_free_r+0x42>
 8011318:	6820      	ldr	r0, [r4, #0]
 801131a:	1821      	adds	r1, r4, r0
 801131c:	428b      	cmp	r3, r1
 801131e:	bf01      	itttt	eq
 8011320:	6819      	ldreq	r1, [r3, #0]
 8011322:	685b      	ldreq	r3, [r3, #4]
 8011324:	1809      	addeq	r1, r1, r0
 8011326:	6021      	streq	r1, [r4, #0]
 8011328:	e7ed      	b.n	8011306 <_free_r+0x1e>
 801132a:	461a      	mov	r2, r3
 801132c:	685b      	ldr	r3, [r3, #4]
 801132e:	b10b      	cbz	r3, 8011334 <_free_r+0x4c>
 8011330:	42a3      	cmp	r3, r4
 8011332:	d9fa      	bls.n	801132a <_free_r+0x42>
 8011334:	6811      	ldr	r1, [r2, #0]
 8011336:	1850      	adds	r0, r2, r1
 8011338:	42a0      	cmp	r0, r4
 801133a:	d10b      	bne.n	8011354 <_free_r+0x6c>
 801133c:	6820      	ldr	r0, [r4, #0]
 801133e:	4401      	add	r1, r0
 8011340:	1850      	adds	r0, r2, r1
 8011342:	4283      	cmp	r3, r0
 8011344:	6011      	str	r1, [r2, #0]
 8011346:	d1e0      	bne.n	801130a <_free_r+0x22>
 8011348:	6818      	ldr	r0, [r3, #0]
 801134a:	685b      	ldr	r3, [r3, #4]
 801134c:	6053      	str	r3, [r2, #4]
 801134e:	4408      	add	r0, r1
 8011350:	6010      	str	r0, [r2, #0]
 8011352:	e7da      	b.n	801130a <_free_r+0x22>
 8011354:	d902      	bls.n	801135c <_free_r+0x74>
 8011356:	230c      	movs	r3, #12
 8011358:	602b      	str	r3, [r5, #0]
 801135a:	e7d6      	b.n	801130a <_free_r+0x22>
 801135c:	6820      	ldr	r0, [r4, #0]
 801135e:	1821      	adds	r1, r4, r0
 8011360:	428b      	cmp	r3, r1
 8011362:	bf04      	itt	eq
 8011364:	6819      	ldreq	r1, [r3, #0]
 8011366:	685b      	ldreq	r3, [r3, #4]
 8011368:	6063      	str	r3, [r4, #4]
 801136a:	bf04      	itt	eq
 801136c:	1809      	addeq	r1, r1, r0
 801136e:	6021      	streq	r1, [r4, #0]
 8011370:	6054      	str	r4, [r2, #4]
 8011372:	e7ca      	b.n	801130a <_free_r+0x22>
 8011374:	bd38      	pop	{r3, r4, r5, pc}
 8011376:	bf00      	nop
 8011378:	20000560 	.word	0x20000560

0801137c <rshift>:
 801137c:	6903      	ldr	r3, [r0, #16]
 801137e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011382:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011386:	ea4f 1261 	mov.w	r2, r1, asr #5
 801138a:	f100 0414 	add.w	r4, r0, #20
 801138e:	dd45      	ble.n	801141c <rshift+0xa0>
 8011390:	f011 011f 	ands.w	r1, r1, #31
 8011394:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011398:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801139c:	d10c      	bne.n	80113b8 <rshift+0x3c>
 801139e:	f100 0710 	add.w	r7, r0, #16
 80113a2:	4629      	mov	r1, r5
 80113a4:	42b1      	cmp	r1, r6
 80113a6:	d334      	bcc.n	8011412 <rshift+0x96>
 80113a8:	1a9b      	subs	r3, r3, r2
 80113aa:	009b      	lsls	r3, r3, #2
 80113ac:	1eea      	subs	r2, r5, #3
 80113ae:	4296      	cmp	r6, r2
 80113b0:	bf38      	it	cc
 80113b2:	2300      	movcc	r3, #0
 80113b4:	4423      	add	r3, r4
 80113b6:	e015      	b.n	80113e4 <rshift+0x68>
 80113b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80113bc:	f1c1 0820 	rsb	r8, r1, #32
 80113c0:	40cf      	lsrs	r7, r1
 80113c2:	f105 0e04 	add.w	lr, r5, #4
 80113c6:	46a1      	mov	r9, r4
 80113c8:	4576      	cmp	r6, lr
 80113ca:	46f4      	mov	ip, lr
 80113cc:	d815      	bhi.n	80113fa <rshift+0x7e>
 80113ce:	1a9a      	subs	r2, r3, r2
 80113d0:	0092      	lsls	r2, r2, #2
 80113d2:	3a04      	subs	r2, #4
 80113d4:	3501      	adds	r5, #1
 80113d6:	42ae      	cmp	r6, r5
 80113d8:	bf38      	it	cc
 80113da:	2200      	movcc	r2, #0
 80113dc:	18a3      	adds	r3, r4, r2
 80113de:	50a7      	str	r7, [r4, r2]
 80113e0:	b107      	cbz	r7, 80113e4 <rshift+0x68>
 80113e2:	3304      	adds	r3, #4
 80113e4:	1b1a      	subs	r2, r3, r4
 80113e6:	42a3      	cmp	r3, r4
 80113e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80113ec:	bf08      	it	eq
 80113ee:	2300      	moveq	r3, #0
 80113f0:	6102      	str	r2, [r0, #16]
 80113f2:	bf08      	it	eq
 80113f4:	6143      	streq	r3, [r0, #20]
 80113f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113fa:	f8dc c000 	ldr.w	ip, [ip]
 80113fe:	fa0c fc08 	lsl.w	ip, ip, r8
 8011402:	ea4c 0707 	orr.w	r7, ip, r7
 8011406:	f849 7b04 	str.w	r7, [r9], #4
 801140a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801140e:	40cf      	lsrs	r7, r1
 8011410:	e7da      	b.n	80113c8 <rshift+0x4c>
 8011412:	f851 cb04 	ldr.w	ip, [r1], #4
 8011416:	f847 cf04 	str.w	ip, [r7, #4]!
 801141a:	e7c3      	b.n	80113a4 <rshift+0x28>
 801141c:	4623      	mov	r3, r4
 801141e:	e7e1      	b.n	80113e4 <rshift+0x68>

08011420 <__hexdig_fun>:
 8011420:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011424:	2b09      	cmp	r3, #9
 8011426:	d802      	bhi.n	801142e <__hexdig_fun+0xe>
 8011428:	3820      	subs	r0, #32
 801142a:	b2c0      	uxtb	r0, r0
 801142c:	4770      	bx	lr
 801142e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011432:	2b05      	cmp	r3, #5
 8011434:	d801      	bhi.n	801143a <__hexdig_fun+0x1a>
 8011436:	3847      	subs	r0, #71	@ 0x47
 8011438:	e7f7      	b.n	801142a <__hexdig_fun+0xa>
 801143a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801143e:	2b05      	cmp	r3, #5
 8011440:	d801      	bhi.n	8011446 <__hexdig_fun+0x26>
 8011442:	3827      	subs	r0, #39	@ 0x27
 8011444:	e7f1      	b.n	801142a <__hexdig_fun+0xa>
 8011446:	2000      	movs	r0, #0
 8011448:	4770      	bx	lr
	...

0801144c <__gethex>:
 801144c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011450:	b085      	sub	sp, #20
 8011452:	468a      	mov	sl, r1
 8011454:	9302      	str	r3, [sp, #8]
 8011456:	680b      	ldr	r3, [r1, #0]
 8011458:	9001      	str	r0, [sp, #4]
 801145a:	4690      	mov	r8, r2
 801145c:	1c9c      	adds	r4, r3, #2
 801145e:	46a1      	mov	r9, r4
 8011460:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011464:	2830      	cmp	r0, #48	@ 0x30
 8011466:	d0fa      	beq.n	801145e <__gethex+0x12>
 8011468:	eba9 0303 	sub.w	r3, r9, r3
 801146c:	f1a3 0b02 	sub.w	fp, r3, #2
 8011470:	f7ff ffd6 	bl	8011420 <__hexdig_fun>
 8011474:	4605      	mov	r5, r0
 8011476:	2800      	cmp	r0, #0
 8011478:	d168      	bne.n	801154c <__gethex+0x100>
 801147a:	49a0      	ldr	r1, [pc, #640]	@ (80116fc <__gethex+0x2b0>)
 801147c:	2201      	movs	r2, #1
 801147e:	4648      	mov	r0, r9
 8011480:	f7fe ff61 	bl	8010346 <strncmp>
 8011484:	4607      	mov	r7, r0
 8011486:	2800      	cmp	r0, #0
 8011488:	d167      	bne.n	801155a <__gethex+0x10e>
 801148a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801148e:	4626      	mov	r6, r4
 8011490:	f7ff ffc6 	bl	8011420 <__hexdig_fun>
 8011494:	2800      	cmp	r0, #0
 8011496:	d062      	beq.n	801155e <__gethex+0x112>
 8011498:	4623      	mov	r3, r4
 801149a:	7818      	ldrb	r0, [r3, #0]
 801149c:	2830      	cmp	r0, #48	@ 0x30
 801149e:	4699      	mov	r9, r3
 80114a0:	f103 0301 	add.w	r3, r3, #1
 80114a4:	d0f9      	beq.n	801149a <__gethex+0x4e>
 80114a6:	f7ff ffbb 	bl	8011420 <__hexdig_fun>
 80114aa:	fab0 f580 	clz	r5, r0
 80114ae:	096d      	lsrs	r5, r5, #5
 80114b0:	f04f 0b01 	mov.w	fp, #1
 80114b4:	464a      	mov	r2, r9
 80114b6:	4616      	mov	r6, r2
 80114b8:	3201      	adds	r2, #1
 80114ba:	7830      	ldrb	r0, [r6, #0]
 80114bc:	f7ff ffb0 	bl	8011420 <__hexdig_fun>
 80114c0:	2800      	cmp	r0, #0
 80114c2:	d1f8      	bne.n	80114b6 <__gethex+0x6a>
 80114c4:	498d      	ldr	r1, [pc, #564]	@ (80116fc <__gethex+0x2b0>)
 80114c6:	2201      	movs	r2, #1
 80114c8:	4630      	mov	r0, r6
 80114ca:	f7fe ff3c 	bl	8010346 <strncmp>
 80114ce:	2800      	cmp	r0, #0
 80114d0:	d13f      	bne.n	8011552 <__gethex+0x106>
 80114d2:	b944      	cbnz	r4, 80114e6 <__gethex+0x9a>
 80114d4:	1c74      	adds	r4, r6, #1
 80114d6:	4622      	mov	r2, r4
 80114d8:	4616      	mov	r6, r2
 80114da:	3201      	adds	r2, #1
 80114dc:	7830      	ldrb	r0, [r6, #0]
 80114de:	f7ff ff9f 	bl	8011420 <__hexdig_fun>
 80114e2:	2800      	cmp	r0, #0
 80114e4:	d1f8      	bne.n	80114d8 <__gethex+0x8c>
 80114e6:	1ba4      	subs	r4, r4, r6
 80114e8:	00a7      	lsls	r7, r4, #2
 80114ea:	7833      	ldrb	r3, [r6, #0]
 80114ec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80114f0:	2b50      	cmp	r3, #80	@ 0x50
 80114f2:	d13e      	bne.n	8011572 <__gethex+0x126>
 80114f4:	7873      	ldrb	r3, [r6, #1]
 80114f6:	2b2b      	cmp	r3, #43	@ 0x2b
 80114f8:	d033      	beq.n	8011562 <__gethex+0x116>
 80114fa:	2b2d      	cmp	r3, #45	@ 0x2d
 80114fc:	d034      	beq.n	8011568 <__gethex+0x11c>
 80114fe:	1c71      	adds	r1, r6, #1
 8011500:	2400      	movs	r4, #0
 8011502:	7808      	ldrb	r0, [r1, #0]
 8011504:	f7ff ff8c 	bl	8011420 <__hexdig_fun>
 8011508:	1e43      	subs	r3, r0, #1
 801150a:	b2db      	uxtb	r3, r3
 801150c:	2b18      	cmp	r3, #24
 801150e:	d830      	bhi.n	8011572 <__gethex+0x126>
 8011510:	f1a0 0210 	sub.w	r2, r0, #16
 8011514:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011518:	f7ff ff82 	bl	8011420 <__hexdig_fun>
 801151c:	f100 3cff 	add.w	ip, r0, #4294967295
 8011520:	fa5f fc8c 	uxtb.w	ip, ip
 8011524:	f1bc 0f18 	cmp.w	ip, #24
 8011528:	f04f 030a 	mov.w	r3, #10
 801152c:	d91e      	bls.n	801156c <__gethex+0x120>
 801152e:	b104      	cbz	r4, 8011532 <__gethex+0xe6>
 8011530:	4252      	negs	r2, r2
 8011532:	4417      	add	r7, r2
 8011534:	f8ca 1000 	str.w	r1, [sl]
 8011538:	b1ed      	cbz	r5, 8011576 <__gethex+0x12a>
 801153a:	f1bb 0f00 	cmp.w	fp, #0
 801153e:	bf0c      	ite	eq
 8011540:	2506      	moveq	r5, #6
 8011542:	2500      	movne	r5, #0
 8011544:	4628      	mov	r0, r5
 8011546:	b005      	add	sp, #20
 8011548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801154c:	2500      	movs	r5, #0
 801154e:	462c      	mov	r4, r5
 8011550:	e7b0      	b.n	80114b4 <__gethex+0x68>
 8011552:	2c00      	cmp	r4, #0
 8011554:	d1c7      	bne.n	80114e6 <__gethex+0x9a>
 8011556:	4627      	mov	r7, r4
 8011558:	e7c7      	b.n	80114ea <__gethex+0x9e>
 801155a:	464e      	mov	r6, r9
 801155c:	462f      	mov	r7, r5
 801155e:	2501      	movs	r5, #1
 8011560:	e7c3      	b.n	80114ea <__gethex+0x9e>
 8011562:	2400      	movs	r4, #0
 8011564:	1cb1      	adds	r1, r6, #2
 8011566:	e7cc      	b.n	8011502 <__gethex+0xb6>
 8011568:	2401      	movs	r4, #1
 801156a:	e7fb      	b.n	8011564 <__gethex+0x118>
 801156c:	fb03 0002 	mla	r0, r3, r2, r0
 8011570:	e7ce      	b.n	8011510 <__gethex+0xc4>
 8011572:	4631      	mov	r1, r6
 8011574:	e7de      	b.n	8011534 <__gethex+0xe8>
 8011576:	eba6 0309 	sub.w	r3, r6, r9
 801157a:	3b01      	subs	r3, #1
 801157c:	4629      	mov	r1, r5
 801157e:	2b07      	cmp	r3, #7
 8011580:	dc0a      	bgt.n	8011598 <__gethex+0x14c>
 8011582:	9801      	ldr	r0, [sp, #4]
 8011584:	f000 fa7a 	bl	8011a7c <_Balloc>
 8011588:	4604      	mov	r4, r0
 801158a:	b940      	cbnz	r0, 801159e <__gethex+0x152>
 801158c:	4b5c      	ldr	r3, [pc, #368]	@ (8011700 <__gethex+0x2b4>)
 801158e:	4602      	mov	r2, r0
 8011590:	21e4      	movs	r1, #228	@ 0xe4
 8011592:	485c      	ldr	r0, [pc, #368]	@ (8011704 <__gethex+0x2b8>)
 8011594:	f7fc fbc4 	bl	800dd20 <__assert_func>
 8011598:	3101      	adds	r1, #1
 801159a:	105b      	asrs	r3, r3, #1
 801159c:	e7ef      	b.n	801157e <__gethex+0x132>
 801159e:	f100 0a14 	add.w	sl, r0, #20
 80115a2:	2300      	movs	r3, #0
 80115a4:	4655      	mov	r5, sl
 80115a6:	469b      	mov	fp, r3
 80115a8:	45b1      	cmp	r9, r6
 80115aa:	d337      	bcc.n	801161c <__gethex+0x1d0>
 80115ac:	f845 bb04 	str.w	fp, [r5], #4
 80115b0:	eba5 050a 	sub.w	r5, r5, sl
 80115b4:	10ad      	asrs	r5, r5, #2
 80115b6:	6125      	str	r5, [r4, #16]
 80115b8:	4658      	mov	r0, fp
 80115ba:	f000 fb51 	bl	8011c60 <__hi0bits>
 80115be:	016d      	lsls	r5, r5, #5
 80115c0:	f8d8 6000 	ldr.w	r6, [r8]
 80115c4:	1a2d      	subs	r5, r5, r0
 80115c6:	42b5      	cmp	r5, r6
 80115c8:	dd54      	ble.n	8011674 <__gethex+0x228>
 80115ca:	1bad      	subs	r5, r5, r6
 80115cc:	4629      	mov	r1, r5
 80115ce:	4620      	mov	r0, r4
 80115d0:	f000 fedd 	bl	801238e <__any_on>
 80115d4:	4681      	mov	r9, r0
 80115d6:	b178      	cbz	r0, 80115f8 <__gethex+0x1ac>
 80115d8:	1e6b      	subs	r3, r5, #1
 80115da:	1159      	asrs	r1, r3, #5
 80115dc:	f003 021f 	and.w	r2, r3, #31
 80115e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80115e4:	f04f 0901 	mov.w	r9, #1
 80115e8:	fa09 f202 	lsl.w	r2, r9, r2
 80115ec:	420a      	tst	r2, r1
 80115ee:	d003      	beq.n	80115f8 <__gethex+0x1ac>
 80115f0:	454b      	cmp	r3, r9
 80115f2:	dc36      	bgt.n	8011662 <__gethex+0x216>
 80115f4:	f04f 0902 	mov.w	r9, #2
 80115f8:	4629      	mov	r1, r5
 80115fa:	4620      	mov	r0, r4
 80115fc:	f7ff febe 	bl	801137c <rshift>
 8011600:	442f      	add	r7, r5
 8011602:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011606:	42bb      	cmp	r3, r7
 8011608:	da42      	bge.n	8011690 <__gethex+0x244>
 801160a:	9801      	ldr	r0, [sp, #4]
 801160c:	4621      	mov	r1, r4
 801160e:	f000 fa75 	bl	8011afc <_Bfree>
 8011612:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011614:	2300      	movs	r3, #0
 8011616:	6013      	str	r3, [r2, #0]
 8011618:	25a3      	movs	r5, #163	@ 0xa3
 801161a:	e793      	b.n	8011544 <__gethex+0xf8>
 801161c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011620:	2a2e      	cmp	r2, #46	@ 0x2e
 8011622:	d012      	beq.n	801164a <__gethex+0x1fe>
 8011624:	2b20      	cmp	r3, #32
 8011626:	d104      	bne.n	8011632 <__gethex+0x1e6>
 8011628:	f845 bb04 	str.w	fp, [r5], #4
 801162c:	f04f 0b00 	mov.w	fp, #0
 8011630:	465b      	mov	r3, fp
 8011632:	7830      	ldrb	r0, [r6, #0]
 8011634:	9303      	str	r3, [sp, #12]
 8011636:	f7ff fef3 	bl	8011420 <__hexdig_fun>
 801163a:	9b03      	ldr	r3, [sp, #12]
 801163c:	f000 000f 	and.w	r0, r0, #15
 8011640:	4098      	lsls	r0, r3
 8011642:	ea4b 0b00 	orr.w	fp, fp, r0
 8011646:	3304      	adds	r3, #4
 8011648:	e7ae      	b.n	80115a8 <__gethex+0x15c>
 801164a:	45b1      	cmp	r9, r6
 801164c:	d8ea      	bhi.n	8011624 <__gethex+0x1d8>
 801164e:	492b      	ldr	r1, [pc, #172]	@ (80116fc <__gethex+0x2b0>)
 8011650:	9303      	str	r3, [sp, #12]
 8011652:	2201      	movs	r2, #1
 8011654:	4630      	mov	r0, r6
 8011656:	f7fe fe76 	bl	8010346 <strncmp>
 801165a:	9b03      	ldr	r3, [sp, #12]
 801165c:	2800      	cmp	r0, #0
 801165e:	d1e1      	bne.n	8011624 <__gethex+0x1d8>
 8011660:	e7a2      	b.n	80115a8 <__gethex+0x15c>
 8011662:	1ea9      	subs	r1, r5, #2
 8011664:	4620      	mov	r0, r4
 8011666:	f000 fe92 	bl	801238e <__any_on>
 801166a:	2800      	cmp	r0, #0
 801166c:	d0c2      	beq.n	80115f4 <__gethex+0x1a8>
 801166e:	f04f 0903 	mov.w	r9, #3
 8011672:	e7c1      	b.n	80115f8 <__gethex+0x1ac>
 8011674:	da09      	bge.n	801168a <__gethex+0x23e>
 8011676:	1b75      	subs	r5, r6, r5
 8011678:	4621      	mov	r1, r4
 801167a:	9801      	ldr	r0, [sp, #4]
 801167c:	462a      	mov	r2, r5
 801167e:	f000 fc4d 	bl	8011f1c <__lshift>
 8011682:	1b7f      	subs	r7, r7, r5
 8011684:	4604      	mov	r4, r0
 8011686:	f100 0a14 	add.w	sl, r0, #20
 801168a:	f04f 0900 	mov.w	r9, #0
 801168e:	e7b8      	b.n	8011602 <__gethex+0x1b6>
 8011690:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011694:	42bd      	cmp	r5, r7
 8011696:	dd6f      	ble.n	8011778 <__gethex+0x32c>
 8011698:	1bed      	subs	r5, r5, r7
 801169a:	42ae      	cmp	r6, r5
 801169c:	dc34      	bgt.n	8011708 <__gethex+0x2bc>
 801169e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80116a2:	2b02      	cmp	r3, #2
 80116a4:	d022      	beq.n	80116ec <__gethex+0x2a0>
 80116a6:	2b03      	cmp	r3, #3
 80116a8:	d024      	beq.n	80116f4 <__gethex+0x2a8>
 80116aa:	2b01      	cmp	r3, #1
 80116ac:	d115      	bne.n	80116da <__gethex+0x28e>
 80116ae:	42ae      	cmp	r6, r5
 80116b0:	d113      	bne.n	80116da <__gethex+0x28e>
 80116b2:	2e01      	cmp	r6, #1
 80116b4:	d10b      	bne.n	80116ce <__gethex+0x282>
 80116b6:	9a02      	ldr	r2, [sp, #8]
 80116b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80116bc:	6013      	str	r3, [r2, #0]
 80116be:	2301      	movs	r3, #1
 80116c0:	6123      	str	r3, [r4, #16]
 80116c2:	f8ca 3000 	str.w	r3, [sl]
 80116c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80116c8:	2562      	movs	r5, #98	@ 0x62
 80116ca:	601c      	str	r4, [r3, #0]
 80116cc:	e73a      	b.n	8011544 <__gethex+0xf8>
 80116ce:	1e71      	subs	r1, r6, #1
 80116d0:	4620      	mov	r0, r4
 80116d2:	f000 fe5c 	bl	801238e <__any_on>
 80116d6:	2800      	cmp	r0, #0
 80116d8:	d1ed      	bne.n	80116b6 <__gethex+0x26a>
 80116da:	9801      	ldr	r0, [sp, #4]
 80116dc:	4621      	mov	r1, r4
 80116de:	f000 fa0d 	bl	8011afc <_Bfree>
 80116e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80116e4:	2300      	movs	r3, #0
 80116e6:	6013      	str	r3, [r2, #0]
 80116e8:	2550      	movs	r5, #80	@ 0x50
 80116ea:	e72b      	b.n	8011544 <__gethex+0xf8>
 80116ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d1f3      	bne.n	80116da <__gethex+0x28e>
 80116f2:	e7e0      	b.n	80116b6 <__gethex+0x26a>
 80116f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d1dd      	bne.n	80116b6 <__gethex+0x26a>
 80116fa:	e7ee      	b.n	80116da <__gethex+0x28e>
 80116fc:	08014544 	.word	0x08014544
 8011700:	0801465d 	.word	0x0801465d
 8011704:	0801466e 	.word	0x0801466e
 8011708:	1e6f      	subs	r7, r5, #1
 801170a:	f1b9 0f00 	cmp.w	r9, #0
 801170e:	d130      	bne.n	8011772 <__gethex+0x326>
 8011710:	b127      	cbz	r7, 801171c <__gethex+0x2d0>
 8011712:	4639      	mov	r1, r7
 8011714:	4620      	mov	r0, r4
 8011716:	f000 fe3a 	bl	801238e <__any_on>
 801171a:	4681      	mov	r9, r0
 801171c:	117a      	asrs	r2, r7, #5
 801171e:	2301      	movs	r3, #1
 8011720:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011724:	f007 071f 	and.w	r7, r7, #31
 8011728:	40bb      	lsls	r3, r7
 801172a:	4213      	tst	r3, r2
 801172c:	4629      	mov	r1, r5
 801172e:	4620      	mov	r0, r4
 8011730:	bf18      	it	ne
 8011732:	f049 0902 	orrne.w	r9, r9, #2
 8011736:	f7ff fe21 	bl	801137c <rshift>
 801173a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801173e:	1b76      	subs	r6, r6, r5
 8011740:	2502      	movs	r5, #2
 8011742:	f1b9 0f00 	cmp.w	r9, #0
 8011746:	d047      	beq.n	80117d8 <__gethex+0x38c>
 8011748:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801174c:	2b02      	cmp	r3, #2
 801174e:	d015      	beq.n	801177c <__gethex+0x330>
 8011750:	2b03      	cmp	r3, #3
 8011752:	d017      	beq.n	8011784 <__gethex+0x338>
 8011754:	2b01      	cmp	r3, #1
 8011756:	d109      	bne.n	801176c <__gethex+0x320>
 8011758:	f019 0f02 	tst.w	r9, #2
 801175c:	d006      	beq.n	801176c <__gethex+0x320>
 801175e:	f8da 3000 	ldr.w	r3, [sl]
 8011762:	ea49 0903 	orr.w	r9, r9, r3
 8011766:	f019 0f01 	tst.w	r9, #1
 801176a:	d10e      	bne.n	801178a <__gethex+0x33e>
 801176c:	f045 0510 	orr.w	r5, r5, #16
 8011770:	e032      	b.n	80117d8 <__gethex+0x38c>
 8011772:	f04f 0901 	mov.w	r9, #1
 8011776:	e7d1      	b.n	801171c <__gethex+0x2d0>
 8011778:	2501      	movs	r5, #1
 801177a:	e7e2      	b.n	8011742 <__gethex+0x2f6>
 801177c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801177e:	f1c3 0301 	rsb	r3, r3, #1
 8011782:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011784:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011786:	2b00      	cmp	r3, #0
 8011788:	d0f0      	beq.n	801176c <__gethex+0x320>
 801178a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801178e:	f104 0314 	add.w	r3, r4, #20
 8011792:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011796:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801179a:	f04f 0c00 	mov.w	ip, #0
 801179e:	4618      	mov	r0, r3
 80117a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80117a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80117a8:	d01b      	beq.n	80117e2 <__gethex+0x396>
 80117aa:	3201      	adds	r2, #1
 80117ac:	6002      	str	r2, [r0, #0]
 80117ae:	2d02      	cmp	r5, #2
 80117b0:	f104 0314 	add.w	r3, r4, #20
 80117b4:	d13c      	bne.n	8011830 <__gethex+0x3e4>
 80117b6:	f8d8 2000 	ldr.w	r2, [r8]
 80117ba:	3a01      	subs	r2, #1
 80117bc:	42b2      	cmp	r2, r6
 80117be:	d109      	bne.n	80117d4 <__gethex+0x388>
 80117c0:	1171      	asrs	r1, r6, #5
 80117c2:	2201      	movs	r2, #1
 80117c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80117c8:	f006 061f 	and.w	r6, r6, #31
 80117cc:	fa02 f606 	lsl.w	r6, r2, r6
 80117d0:	421e      	tst	r6, r3
 80117d2:	d13a      	bne.n	801184a <__gethex+0x3fe>
 80117d4:	f045 0520 	orr.w	r5, r5, #32
 80117d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80117da:	601c      	str	r4, [r3, #0]
 80117dc:	9b02      	ldr	r3, [sp, #8]
 80117de:	601f      	str	r7, [r3, #0]
 80117e0:	e6b0      	b.n	8011544 <__gethex+0xf8>
 80117e2:	4299      	cmp	r1, r3
 80117e4:	f843 cc04 	str.w	ip, [r3, #-4]
 80117e8:	d8d9      	bhi.n	801179e <__gethex+0x352>
 80117ea:	68a3      	ldr	r3, [r4, #8]
 80117ec:	459b      	cmp	fp, r3
 80117ee:	db17      	blt.n	8011820 <__gethex+0x3d4>
 80117f0:	6861      	ldr	r1, [r4, #4]
 80117f2:	9801      	ldr	r0, [sp, #4]
 80117f4:	3101      	adds	r1, #1
 80117f6:	f000 f941 	bl	8011a7c <_Balloc>
 80117fa:	4681      	mov	r9, r0
 80117fc:	b918      	cbnz	r0, 8011806 <__gethex+0x3ba>
 80117fe:	4b1a      	ldr	r3, [pc, #104]	@ (8011868 <__gethex+0x41c>)
 8011800:	4602      	mov	r2, r0
 8011802:	2184      	movs	r1, #132	@ 0x84
 8011804:	e6c5      	b.n	8011592 <__gethex+0x146>
 8011806:	6922      	ldr	r2, [r4, #16]
 8011808:	3202      	adds	r2, #2
 801180a:	f104 010c 	add.w	r1, r4, #12
 801180e:	0092      	lsls	r2, r2, #2
 8011810:	300c      	adds	r0, #12
 8011812:	f7fe fee9 	bl	80105e8 <memcpy>
 8011816:	4621      	mov	r1, r4
 8011818:	9801      	ldr	r0, [sp, #4]
 801181a:	f000 f96f 	bl	8011afc <_Bfree>
 801181e:	464c      	mov	r4, r9
 8011820:	6923      	ldr	r3, [r4, #16]
 8011822:	1c5a      	adds	r2, r3, #1
 8011824:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011828:	6122      	str	r2, [r4, #16]
 801182a:	2201      	movs	r2, #1
 801182c:	615a      	str	r2, [r3, #20]
 801182e:	e7be      	b.n	80117ae <__gethex+0x362>
 8011830:	6922      	ldr	r2, [r4, #16]
 8011832:	455a      	cmp	r2, fp
 8011834:	dd0b      	ble.n	801184e <__gethex+0x402>
 8011836:	2101      	movs	r1, #1
 8011838:	4620      	mov	r0, r4
 801183a:	f7ff fd9f 	bl	801137c <rshift>
 801183e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011842:	3701      	adds	r7, #1
 8011844:	42bb      	cmp	r3, r7
 8011846:	f6ff aee0 	blt.w	801160a <__gethex+0x1be>
 801184a:	2501      	movs	r5, #1
 801184c:	e7c2      	b.n	80117d4 <__gethex+0x388>
 801184e:	f016 061f 	ands.w	r6, r6, #31
 8011852:	d0fa      	beq.n	801184a <__gethex+0x3fe>
 8011854:	4453      	add	r3, sl
 8011856:	f1c6 0620 	rsb	r6, r6, #32
 801185a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801185e:	f000 f9ff 	bl	8011c60 <__hi0bits>
 8011862:	42b0      	cmp	r0, r6
 8011864:	dbe7      	blt.n	8011836 <__gethex+0x3ea>
 8011866:	e7f0      	b.n	801184a <__gethex+0x3fe>
 8011868:	0801465d 	.word	0x0801465d

0801186c <L_shift>:
 801186c:	f1c2 0208 	rsb	r2, r2, #8
 8011870:	0092      	lsls	r2, r2, #2
 8011872:	b570      	push	{r4, r5, r6, lr}
 8011874:	f1c2 0620 	rsb	r6, r2, #32
 8011878:	6843      	ldr	r3, [r0, #4]
 801187a:	6804      	ldr	r4, [r0, #0]
 801187c:	fa03 f506 	lsl.w	r5, r3, r6
 8011880:	432c      	orrs	r4, r5
 8011882:	40d3      	lsrs	r3, r2
 8011884:	6004      	str	r4, [r0, #0]
 8011886:	f840 3f04 	str.w	r3, [r0, #4]!
 801188a:	4288      	cmp	r0, r1
 801188c:	d3f4      	bcc.n	8011878 <L_shift+0xc>
 801188e:	bd70      	pop	{r4, r5, r6, pc}

08011890 <__match>:
 8011890:	b530      	push	{r4, r5, lr}
 8011892:	6803      	ldr	r3, [r0, #0]
 8011894:	3301      	adds	r3, #1
 8011896:	f811 4b01 	ldrb.w	r4, [r1], #1
 801189a:	b914      	cbnz	r4, 80118a2 <__match+0x12>
 801189c:	6003      	str	r3, [r0, #0]
 801189e:	2001      	movs	r0, #1
 80118a0:	bd30      	pop	{r4, r5, pc}
 80118a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80118a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80118aa:	2d19      	cmp	r5, #25
 80118ac:	bf98      	it	ls
 80118ae:	3220      	addls	r2, #32
 80118b0:	42a2      	cmp	r2, r4
 80118b2:	d0f0      	beq.n	8011896 <__match+0x6>
 80118b4:	2000      	movs	r0, #0
 80118b6:	e7f3      	b.n	80118a0 <__match+0x10>

080118b8 <__hexnan>:
 80118b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118bc:	680b      	ldr	r3, [r1, #0]
 80118be:	6801      	ldr	r1, [r0, #0]
 80118c0:	115e      	asrs	r6, r3, #5
 80118c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80118c6:	f013 031f 	ands.w	r3, r3, #31
 80118ca:	b087      	sub	sp, #28
 80118cc:	bf18      	it	ne
 80118ce:	3604      	addne	r6, #4
 80118d0:	2500      	movs	r5, #0
 80118d2:	1f37      	subs	r7, r6, #4
 80118d4:	4682      	mov	sl, r0
 80118d6:	4690      	mov	r8, r2
 80118d8:	9301      	str	r3, [sp, #4]
 80118da:	f846 5c04 	str.w	r5, [r6, #-4]
 80118de:	46b9      	mov	r9, r7
 80118e0:	463c      	mov	r4, r7
 80118e2:	9502      	str	r5, [sp, #8]
 80118e4:	46ab      	mov	fp, r5
 80118e6:	784a      	ldrb	r2, [r1, #1]
 80118e8:	1c4b      	adds	r3, r1, #1
 80118ea:	9303      	str	r3, [sp, #12]
 80118ec:	b342      	cbz	r2, 8011940 <__hexnan+0x88>
 80118ee:	4610      	mov	r0, r2
 80118f0:	9105      	str	r1, [sp, #20]
 80118f2:	9204      	str	r2, [sp, #16]
 80118f4:	f7ff fd94 	bl	8011420 <__hexdig_fun>
 80118f8:	2800      	cmp	r0, #0
 80118fa:	d151      	bne.n	80119a0 <__hexnan+0xe8>
 80118fc:	9a04      	ldr	r2, [sp, #16]
 80118fe:	9905      	ldr	r1, [sp, #20]
 8011900:	2a20      	cmp	r2, #32
 8011902:	d818      	bhi.n	8011936 <__hexnan+0x7e>
 8011904:	9b02      	ldr	r3, [sp, #8]
 8011906:	459b      	cmp	fp, r3
 8011908:	dd13      	ble.n	8011932 <__hexnan+0x7a>
 801190a:	454c      	cmp	r4, r9
 801190c:	d206      	bcs.n	801191c <__hexnan+0x64>
 801190e:	2d07      	cmp	r5, #7
 8011910:	dc04      	bgt.n	801191c <__hexnan+0x64>
 8011912:	462a      	mov	r2, r5
 8011914:	4649      	mov	r1, r9
 8011916:	4620      	mov	r0, r4
 8011918:	f7ff ffa8 	bl	801186c <L_shift>
 801191c:	4544      	cmp	r4, r8
 801191e:	d952      	bls.n	80119c6 <__hexnan+0x10e>
 8011920:	2300      	movs	r3, #0
 8011922:	f1a4 0904 	sub.w	r9, r4, #4
 8011926:	f844 3c04 	str.w	r3, [r4, #-4]
 801192a:	f8cd b008 	str.w	fp, [sp, #8]
 801192e:	464c      	mov	r4, r9
 8011930:	461d      	mov	r5, r3
 8011932:	9903      	ldr	r1, [sp, #12]
 8011934:	e7d7      	b.n	80118e6 <__hexnan+0x2e>
 8011936:	2a29      	cmp	r2, #41	@ 0x29
 8011938:	d157      	bne.n	80119ea <__hexnan+0x132>
 801193a:	3102      	adds	r1, #2
 801193c:	f8ca 1000 	str.w	r1, [sl]
 8011940:	f1bb 0f00 	cmp.w	fp, #0
 8011944:	d051      	beq.n	80119ea <__hexnan+0x132>
 8011946:	454c      	cmp	r4, r9
 8011948:	d206      	bcs.n	8011958 <__hexnan+0xa0>
 801194a:	2d07      	cmp	r5, #7
 801194c:	dc04      	bgt.n	8011958 <__hexnan+0xa0>
 801194e:	462a      	mov	r2, r5
 8011950:	4649      	mov	r1, r9
 8011952:	4620      	mov	r0, r4
 8011954:	f7ff ff8a 	bl	801186c <L_shift>
 8011958:	4544      	cmp	r4, r8
 801195a:	d936      	bls.n	80119ca <__hexnan+0x112>
 801195c:	f1a8 0204 	sub.w	r2, r8, #4
 8011960:	4623      	mov	r3, r4
 8011962:	f853 1b04 	ldr.w	r1, [r3], #4
 8011966:	f842 1f04 	str.w	r1, [r2, #4]!
 801196a:	429f      	cmp	r7, r3
 801196c:	d2f9      	bcs.n	8011962 <__hexnan+0xaa>
 801196e:	1b3b      	subs	r3, r7, r4
 8011970:	f023 0303 	bic.w	r3, r3, #3
 8011974:	3304      	adds	r3, #4
 8011976:	3401      	adds	r4, #1
 8011978:	3e03      	subs	r6, #3
 801197a:	42b4      	cmp	r4, r6
 801197c:	bf88      	it	hi
 801197e:	2304      	movhi	r3, #4
 8011980:	4443      	add	r3, r8
 8011982:	2200      	movs	r2, #0
 8011984:	f843 2b04 	str.w	r2, [r3], #4
 8011988:	429f      	cmp	r7, r3
 801198a:	d2fb      	bcs.n	8011984 <__hexnan+0xcc>
 801198c:	683b      	ldr	r3, [r7, #0]
 801198e:	b91b      	cbnz	r3, 8011998 <__hexnan+0xe0>
 8011990:	4547      	cmp	r7, r8
 8011992:	d128      	bne.n	80119e6 <__hexnan+0x12e>
 8011994:	2301      	movs	r3, #1
 8011996:	603b      	str	r3, [r7, #0]
 8011998:	2005      	movs	r0, #5
 801199a:	b007      	add	sp, #28
 801199c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119a0:	3501      	adds	r5, #1
 80119a2:	2d08      	cmp	r5, #8
 80119a4:	f10b 0b01 	add.w	fp, fp, #1
 80119a8:	dd06      	ble.n	80119b8 <__hexnan+0x100>
 80119aa:	4544      	cmp	r4, r8
 80119ac:	d9c1      	bls.n	8011932 <__hexnan+0x7a>
 80119ae:	2300      	movs	r3, #0
 80119b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80119b4:	2501      	movs	r5, #1
 80119b6:	3c04      	subs	r4, #4
 80119b8:	6822      	ldr	r2, [r4, #0]
 80119ba:	f000 000f 	and.w	r0, r0, #15
 80119be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80119c2:	6020      	str	r0, [r4, #0]
 80119c4:	e7b5      	b.n	8011932 <__hexnan+0x7a>
 80119c6:	2508      	movs	r5, #8
 80119c8:	e7b3      	b.n	8011932 <__hexnan+0x7a>
 80119ca:	9b01      	ldr	r3, [sp, #4]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d0dd      	beq.n	801198c <__hexnan+0xd4>
 80119d0:	f1c3 0320 	rsb	r3, r3, #32
 80119d4:	f04f 32ff 	mov.w	r2, #4294967295
 80119d8:	40da      	lsrs	r2, r3
 80119da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80119de:	4013      	ands	r3, r2
 80119e0:	f846 3c04 	str.w	r3, [r6, #-4]
 80119e4:	e7d2      	b.n	801198c <__hexnan+0xd4>
 80119e6:	3f04      	subs	r7, #4
 80119e8:	e7d0      	b.n	801198c <__hexnan+0xd4>
 80119ea:	2004      	movs	r0, #4
 80119ec:	e7d5      	b.n	801199a <__hexnan+0xe2>
	...

080119f0 <_mallinfo_r>:
 80119f0:	b570      	push	{r4, r5, r6, lr}
 80119f2:	4c16      	ldr	r4, [pc, #88]	@ (8011a4c <_mallinfo_r+0x5c>)
 80119f4:	4605      	mov	r5, r0
 80119f6:	4608      	mov	r0, r1
 80119f8:	460e      	mov	r6, r1
 80119fa:	f7f2 ff5d 	bl	80048b8 <__malloc_lock>
 80119fe:	6823      	ldr	r3, [r4, #0]
 8011a00:	b14b      	cbz	r3, 8011a16 <_mallinfo_r+0x26>
 8011a02:	2100      	movs	r1, #0
 8011a04:	4630      	mov	r0, r6
 8011a06:	f7f2 fed3 	bl	80047b0 <_sbrk_r>
 8011a0a:	1c42      	adds	r2, r0, #1
 8011a0c:	bf18      	it	ne
 8011a0e:	6822      	ldrne	r2, [r4, #0]
 8011a10:	4603      	mov	r3, r0
 8011a12:	bf18      	it	ne
 8011a14:	1a83      	subne	r3, r0, r2
 8011a16:	4a0e      	ldr	r2, [pc, #56]	@ (8011a50 <_mallinfo_r+0x60>)
 8011a18:	6811      	ldr	r1, [r2, #0]
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	b991      	cbnz	r1, 8011a44 <_mallinfo_r+0x54>
 8011a1e:	4c0d      	ldr	r4, [pc, #52]	@ (8011a54 <_mallinfo_r+0x64>)
 8011a20:	4630      	mov	r0, r6
 8011a22:	6023      	str	r3, [r4, #0]
 8011a24:	1a9b      	subs	r3, r3, r2
 8011a26:	6222      	str	r2, [r4, #32]
 8011a28:	61e3      	str	r3, [r4, #28]
 8011a2a:	f7f2 ff7f 	bl	800492c <__malloc_unlock>
 8011a2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011a30:	462e      	mov	r6, r5
 8011a32:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011a34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011a36:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011a38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8011a3c:	e886 0003 	stmia.w	r6, {r0, r1}
 8011a40:	4628      	mov	r0, r5
 8011a42:	bd70      	pop	{r4, r5, r6, pc}
 8011a44:	6808      	ldr	r0, [r1, #0]
 8011a46:	6849      	ldr	r1, [r1, #4]
 8011a48:	4402      	add	r2, r0
 8011a4a:	e7e7      	b.n	8011a1c <_mallinfo_r+0x2c>
 8011a4c:	2000055c 	.word	0x2000055c
 8011a50:	20000560 	.word	0x20000560
 8011a54:	200006ac 	.word	0x200006ac

08011a58 <__ascii_mbtowc>:
 8011a58:	b082      	sub	sp, #8
 8011a5a:	b901      	cbnz	r1, 8011a5e <__ascii_mbtowc+0x6>
 8011a5c:	a901      	add	r1, sp, #4
 8011a5e:	b142      	cbz	r2, 8011a72 <__ascii_mbtowc+0x1a>
 8011a60:	b14b      	cbz	r3, 8011a76 <__ascii_mbtowc+0x1e>
 8011a62:	7813      	ldrb	r3, [r2, #0]
 8011a64:	600b      	str	r3, [r1, #0]
 8011a66:	7812      	ldrb	r2, [r2, #0]
 8011a68:	1e10      	subs	r0, r2, #0
 8011a6a:	bf18      	it	ne
 8011a6c:	2001      	movne	r0, #1
 8011a6e:	b002      	add	sp, #8
 8011a70:	4770      	bx	lr
 8011a72:	4610      	mov	r0, r2
 8011a74:	e7fb      	b.n	8011a6e <__ascii_mbtowc+0x16>
 8011a76:	f06f 0001 	mvn.w	r0, #1
 8011a7a:	e7f8      	b.n	8011a6e <__ascii_mbtowc+0x16>

08011a7c <_Balloc>:
 8011a7c:	b570      	push	{r4, r5, r6, lr}
 8011a7e:	69c6      	ldr	r6, [r0, #28]
 8011a80:	4604      	mov	r4, r0
 8011a82:	460d      	mov	r5, r1
 8011a84:	b976      	cbnz	r6, 8011aa4 <_Balloc+0x28>
 8011a86:	2010      	movs	r0, #16
 8011a88:	f7fc f9d0 	bl	800de2c <malloc>
 8011a8c:	4602      	mov	r2, r0
 8011a8e:	61e0      	str	r0, [r4, #28]
 8011a90:	b920      	cbnz	r0, 8011a9c <_Balloc+0x20>
 8011a92:	4b18      	ldr	r3, [pc, #96]	@ (8011af4 <_Balloc+0x78>)
 8011a94:	4818      	ldr	r0, [pc, #96]	@ (8011af8 <_Balloc+0x7c>)
 8011a96:	216b      	movs	r1, #107	@ 0x6b
 8011a98:	f7fc f942 	bl	800dd20 <__assert_func>
 8011a9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011aa0:	6006      	str	r6, [r0, #0]
 8011aa2:	60c6      	str	r6, [r0, #12]
 8011aa4:	69e6      	ldr	r6, [r4, #28]
 8011aa6:	68f3      	ldr	r3, [r6, #12]
 8011aa8:	b183      	cbz	r3, 8011acc <_Balloc+0x50>
 8011aaa:	69e3      	ldr	r3, [r4, #28]
 8011aac:	68db      	ldr	r3, [r3, #12]
 8011aae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011ab2:	b9b8      	cbnz	r0, 8011ae4 <_Balloc+0x68>
 8011ab4:	2101      	movs	r1, #1
 8011ab6:	fa01 f605 	lsl.w	r6, r1, r5
 8011aba:	1d72      	adds	r2, r6, #5
 8011abc:	0092      	lsls	r2, r2, #2
 8011abe:	4620      	mov	r0, r4
 8011ac0:	f7fc f958 	bl	800dd74 <_calloc_r>
 8011ac4:	b160      	cbz	r0, 8011ae0 <_Balloc+0x64>
 8011ac6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011aca:	e00e      	b.n	8011aea <_Balloc+0x6e>
 8011acc:	2221      	movs	r2, #33	@ 0x21
 8011ace:	2104      	movs	r1, #4
 8011ad0:	4620      	mov	r0, r4
 8011ad2:	f7fc f94f 	bl	800dd74 <_calloc_r>
 8011ad6:	69e3      	ldr	r3, [r4, #28]
 8011ad8:	60f0      	str	r0, [r6, #12]
 8011ada:	68db      	ldr	r3, [r3, #12]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d1e4      	bne.n	8011aaa <_Balloc+0x2e>
 8011ae0:	2000      	movs	r0, #0
 8011ae2:	bd70      	pop	{r4, r5, r6, pc}
 8011ae4:	6802      	ldr	r2, [r0, #0]
 8011ae6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011aea:	2300      	movs	r3, #0
 8011aec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011af0:	e7f7      	b.n	8011ae2 <_Balloc+0x66>
 8011af2:	bf00      	nop
 8011af4:	0801457f 	.word	0x0801457f
 8011af8:	080146ce 	.word	0x080146ce

08011afc <_Bfree>:
 8011afc:	b570      	push	{r4, r5, r6, lr}
 8011afe:	69c6      	ldr	r6, [r0, #28]
 8011b00:	4605      	mov	r5, r0
 8011b02:	460c      	mov	r4, r1
 8011b04:	b976      	cbnz	r6, 8011b24 <_Bfree+0x28>
 8011b06:	2010      	movs	r0, #16
 8011b08:	f7fc f990 	bl	800de2c <malloc>
 8011b0c:	4602      	mov	r2, r0
 8011b0e:	61e8      	str	r0, [r5, #28]
 8011b10:	b920      	cbnz	r0, 8011b1c <_Bfree+0x20>
 8011b12:	4b09      	ldr	r3, [pc, #36]	@ (8011b38 <_Bfree+0x3c>)
 8011b14:	4809      	ldr	r0, [pc, #36]	@ (8011b3c <_Bfree+0x40>)
 8011b16:	218f      	movs	r1, #143	@ 0x8f
 8011b18:	f7fc f902 	bl	800dd20 <__assert_func>
 8011b1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011b20:	6006      	str	r6, [r0, #0]
 8011b22:	60c6      	str	r6, [r0, #12]
 8011b24:	b13c      	cbz	r4, 8011b36 <_Bfree+0x3a>
 8011b26:	69eb      	ldr	r3, [r5, #28]
 8011b28:	6862      	ldr	r2, [r4, #4]
 8011b2a:	68db      	ldr	r3, [r3, #12]
 8011b2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011b30:	6021      	str	r1, [r4, #0]
 8011b32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011b36:	bd70      	pop	{r4, r5, r6, pc}
 8011b38:	0801457f 	.word	0x0801457f
 8011b3c:	080146ce 	.word	0x080146ce

08011b40 <__multadd>:
 8011b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b44:	690d      	ldr	r5, [r1, #16]
 8011b46:	4607      	mov	r7, r0
 8011b48:	460c      	mov	r4, r1
 8011b4a:	461e      	mov	r6, r3
 8011b4c:	f101 0c14 	add.w	ip, r1, #20
 8011b50:	2000      	movs	r0, #0
 8011b52:	f8dc 3000 	ldr.w	r3, [ip]
 8011b56:	b299      	uxth	r1, r3
 8011b58:	fb02 6101 	mla	r1, r2, r1, r6
 8011b5c:	0c1e      	lsrs	r6, r3, #16
 8011b5e:	0c0b      	lsrs	r3, r1, #16
 8011b60:	fb02 3306 	mla	r3, r2, r6, r3
 8011b64:	b289      	uxth	r1, r1
 8011b66:	3001      	adds	r0, #1
 8011b68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011b6c:	4285      	cmp	r5, r0
 8011b6e:	f84c 1b04 	str.w	r1, [ip], #4
 8011b72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011b76:	dcec      	bgt.n	8011b52 <__multadd+0x12>
 8011b78:	b30e      	cbz	r6, 8011bbe <__multadd+0x7e>
 8011b7a:	68a3      	ldr	r3, [r4, #8]
 8011b7c:	42ab      	cmp	r3, r5
 8011b7e:	dc19      	bgt.n	8011bb4 <__multadd+0x74>
 8011b80:	6861      	ldr	r1, [r4, #4]
 8011b82:	4638      	mov	r0, r7
 8011b84:	3101      	adds	r1, #1
 8011b86:	f7ff ff79 	bl	8011a7c <_Balloc>
 8011b8a:	4680      	mov	r8, r0
 8011b8c:	b928      	cbnz	r0, 8011b9a <__multadd+0x5a>
 8011b8e:	4602      	mov	r2, r0
 8011b90:	4b0c      	ldr	r3, [pc, #48]	@ (8011bc4 <__multadd+0x84>)
 8011b92:	480d      	ldr	r0, [pc, #52]	@ (8011bc8 <__multadd+0x88>)
 8011b94:	21ba      	movs	r1, #186	@ 0xba
 8011b96:	f7fc f8c3 	bl	800dd20 <__assert_func>
 8011b9a:	6922      	ldr	r2, [r4, #16]
 8011b9c:	3202      	adds	r2, #2
 8011b9e:	f104 010c 	add.w	r1, r4, #12
 8011ba2:	0092      	lsls	r2, r2, #2
 8011ba4:	300c      	adds	r0, #12
 8011ba6:	f7fe fd1f 	bl	80105e8 <memcpy>
 8011baa:	4621      	mov	r1, r4
 8011bac:	4638      	mov	r0, r7
 8011bae:	f7ff ffa5 	bl	8011afc <_Bfree>
 8011bb2:	4644      	mov	r4, r8
 8011bb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011bb8:	3501      	adds	r5, #1
 8011bba:	615e      	str	r6, [r3, #20]
 8011bbc:	6125      	str	r5, [r4, #16]
 8011bbe:	4620      	mov	r0, r4
 8011bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bc4:	0801465d 	.word	0x0801465d
 8011bc8:	080146ce 	.word	0x080146ce

08011bcc <__s2b>:
 8011bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bd0:	460c      	mov	r4, r1
 8011bd2:	4615      	mov	r5, r2
 8011bd4:	461f      	mov	r7, r3
 8011bd6:	2209      	movs	r2, #9
 8011bd8:	3308      	adds	r3, #8
 8011bda:	4606      	mov	r6, r0
 8011bdc:	fb93 f3f2 	sdiv	r3, r3, r2
 8011be0:	2100      	movs	r1, #0
 8011be2:	2201      	movs	r2, #1
 8011be4:	429a      	cmp	r2, r3
 8011be6:	db09      	blt.n	8011bfc <__s2b+0x30>
 8011be8:	4630      	mov	r0, r6
 8011bea:	f7ff ff47 	bl	8011a7c <_Balloc>
 8011bee:	b940      	cbnz	r0, 8011c02 <__s2b+0x36>
 8011bf0:	4602      	mov	r2, r0
 8011bf2:	4b19      	ldr	r3, [pc, #100]	@ (8011c58 <__s2b+0x8c>)
 8011bf4:	4819      	ldr	r0, [pc, #100]	@ (8011c5c <__s2b+0x90>)
 8011bf6:	21d3      	movs	r1, #211	@ 0xd3
 8011bf8:	f7fc f892 	bl	800dd20 <__assert_func>
 8011bfc:	0052      	lsls	r2, r2, #1
 8011bfe:	3101      	adds	r1, #1
 8011c00:	e7f0      	b.n	8011be4 <__s2b+0x18>
 8011c02:	9b08      	ldr	r3, [sp, #32]
 8011c04:	6143      	str	r3, [r0, #20]
 8011c06:	2d09      	cmp	r5, #9
 8011c08:	f04f 0301 	mov.w	r3, #1
 8011c0c:	6103      	str	r3, [r0, #16]
 8011c0e:	dd16      	ble.n	8011c3e <__s2b+0x72>
 8011c10:	f104 0909 	add.w	r9, r4, #9
 8011c14:	46c8      	mov	r8, r9
 8011c16:	442c      	add	r4, r5
 8011c18:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011c1c:	4601      	mov	r1, r0
 8011c1e:	3b30      	subs	r3, #48	@ 0x30
 8011c20:	220a      	movs	r2, #10
 8011c22:	4630      	mov	r0, r6
 8011c24:	f7ff ff8c 	bl	8011b40 <__multadd>
 8011c28:	45a0      	cmp	r8, r4
 8011c2a:	d1f5      	bne.n	8011c18 <__s2b+0x4c>
 8011c2c:	f1a5 0408 	sub.w	r4, r5, #8
 8011c30:	444c      	add	r4, r9
 8011c32:	1b2d      	subs	r5, r5, r4
 8011c34:	1963      	adds	r3, r4, r5
 8011c36:	42bb      	cmp	r3, r7
 8011c38:	db04      	blt.n	8011c44 <__s2b+0x78>
 8011c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c3e:	340a      	adds	r4, #10
 8011c40:	2509      	movs	r5, #9
 8011c42:	e7f6      	b.n	8011c32 <__s2b+0x66>
 8011c44:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011c48:	4601      	mov	r1, r0
 8011c4a:	3b30      	subs	r3, #48	@ 0x30
 8011c4c:	220a      	movs	r2, #10
 8011c4e:	4630      	mov	r0, r6
 8011c50:	f7ff ff76 	bl	8011b40 <__multadd>
 8011c54:	e7ee      	b.n	8011c34 <__s2b+0x68>
 8011c56:	bf00      	nop
 8011c58:	0801465d 	.word	0x0801465d
 8011c5c:	080146ce 	.word	0x080146ce

08011c60 <__hi0bits>:
 8011c60:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011c64:	4603      	mov	r3, r0
 8011c66:	bf36      	itet	cc
 8011c68:	0403      	lslcc	r3, r0, #16
 8011c6a:	2000      	movcs	r0, #0
 8011c6c:	2010      	movcc	r0, #16
 8011c6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011c72:	bf3c      	itt	cc
 8011c74:	021b      	lslcc	r3, r3, #8
 8011c76:	3008      	addcc	r0, #8
 8011c78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011c7c:	bf3c      	itt	cc
 8011c7e:	011b      	lslcc	r3, r3, #4
 8011c80:	3004      	addcc	r0, #4
 8011c82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011c86:	bf3c      	itt	cc
 8011c88:	009b      	lslcc	r3, r3, #2
 8011c8a:	3002      	addcc	r0, #2
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	db05      	blt.n	8011c9c <__hi0bits+0x3c>
 8011c90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011c94:	f100 0001 	add.w	r0, r0, #1
 8011c98:	bf08      	it	eq
 8011c9a:	2020      	moveq	r0, #32
 8011c9c:	4770      	bx	lr

08011c9e <__lo0bits>:
 8011c9e:	6803      	ldr	r3, [r0, #0]
 8011ca0:	4602      	mov	r2, r0
 8011ca2:	f013 0007 	ands.w	r0, r3, #7
 8011ca6:	d00b      	beq.n	8011cc0 <__lo0bits+0x22>
 8011ca8:	07d9      	lsls	r1, r3, #31
 8011caa:	d421      	bmi.n	8011cf0 <__lo0bits+0x52>
 8011cac:	0798      	lsls	r0, r3, #30
 8011cae:	bf49      	itett	mi
 8011cb0:	085b      	lsrmi	r3, r3, #1
 8011cb2:	089b      	lsrpl	r3, r3, #2
 8011cb4:	2001      	movmi	r0, #1
 8011cb6:	6013      	strmi	r3, [r2, #0]
 8011cb8:	bf5c      	itt	pl
 8011cba:	6013      	strpl	r3, [r2, #0]
 8011cbc:	2002      	movpl	r0, #2
 8011cbe:	4770      	bx	lr
 8011cc0:	b299      	uxth	r1, r3
 8011cc2:	b909      	cbnz	r1, 8011cc8 <__lo0bits+0x2a>
 8011cc4:	0c1b      	lsrs	r3, r3, #16
 8011cc6:	2010      	movs	r0, #16
 8011cc8:	b2d9      	uxtb	r1, r3
 8011cca:	b909      	cbnz	r1, 8011cd0 <__lo0bits+0x32>
 8011ccc:	3008      	adds	r0, #8
 8011cce:	0a1b      	lsrs	r3, r3, #8
 8011cd0:	0719      	lsls	r1, r3, #28
 8011cd2:	bf04      	itt	eq
 8011cd4:	091b      	lsreq	r3, r3, #4
 8011cd6:	3004      	addeq	r0, #4
 8011cd8:	0799      	lsls	r1, r3, #30
 8011cda:	bf04      	itt	eq
 8011cdc:	089b      	lsreq	r3, r3, #2
 8011cde:	3002      	addeq	r0, #2
 8011ce0:	07d9      	lsls	r1, r3, #31
 8011ce2:	d403      	bmi.n	8011cec <__lo0bits+0x4e>
 8011ce4:	085b      	lsrs	r3, r3, #1
 8011ce6:	f100 0001 	add.w	r0, r0, #1
 8011cea:	d003      	beq.n	8011cf4 <__lo0bits+0x56>
 8011cec:	6013      	str	r3, [r2, #0]
 8011cee:	4770      	bx	lr
 8011cf0:	2000      	movs	r0, #0
 8011cf2:	4770      	bx	lr
 8011cf4:	2020      	movs	r0, #32
 8011cf6:	4770      	bx	lr

08011cf8 <__i2b>:
 8011cf8:	b510      	push	{r4, lr}
 8011cfa:	460c      	mov	r4, r1
 8011cfc:	2101      	movs	r1, #1
 8011cfe:	f7ff febd 	bl	8011a7c <_Balloc>
 8011d02:	4602      	mov	r2, r0
 8011d04:	b928      	cbnz	r0, 8011d12 <__i2b+0x1a>
 8011d06:	4b05      	ldr	r3, [pc, #20]	@ (8011d1c <__i2b+0x24>)
 8011d08:	4805      	ldr	r0, [pc, #20]	@ (8011d20 <__i2b+0x28>)
 8011d0a:	f240 1145 	movw	r1, #325	@ 0x145
 8011d0e:	f7fc f807 	bl	800dd20 <__assert_func>
 8011d12:	2301      	movs	r3, #1
 8011d14:	6144      	str	r4, [r0, #20]
 8011d16:	6103      	str	r3, [r0, #16]
 8011d18:	bd10      	pop	{r4, pc}
 8011d1a:	bf00      	nop
 8011d1c:	0801465d 	.word	0x0801465d
 8011d20:	080146ce 	.word	0x080146ce

08011d24 <__multiply>:
 8011d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d28:	4617      	mov	r7, r2
 8011d2a:	690a      	ldr	r2, [r1, #16]
 8011d2c:	693b      	ldr	r3, [r7, #16]
 8011d2e:	429a      	cmp	r2, r3
 8011d30:	bfa8      	it	ge
 8011d32:	463b      	movge	r3, r7
 8011d34:	4689      	mov	r9, r1
 8011d36:	bfa4      	itt	ge
 8011d38:	460f      	movge	r7, r1
 8011d3a:	4699      	movge	r9, r3
 8011d3c:	693d      	ldr	r5, [r7, #16]
 8011d3e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011d42:	68bb      	ldr	r3, [r7, #8]
 8011d44:	6879      	ldr	r1, [r7, #4]
 8011d46:	eb05 060a 	add.w	r6, r5, sl
 8011d4a:	42b3      	cmp	r3, r6
 8011d4c:	b085      	sub	sp, #20
 8011d4e:	bfb8      	it	lt
 8011d50:	3101      	addlt	r1, #1
 8011d52:	f7ff fe93 	bl	8011a7c <_Balloc>
 8011d56:	b930      	cbnz	r0, 8011d66 <__multiply+0x42>
 8011d58:	4602      	mov	r2, r0
 8011d5a:	4b41      	ldr	r3, [pc, #260]	@ (8011e60 <__multiply+0x13c>)
 8011d5c:	4841      	ldr	r0, [pc, #260]	@ (8011e64 <__multiply+0x140>)
 8011d5e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011d62:	f7fb ffdd 	bl	800dd20 <__assert_func>
 8011d66:	f100 0414 	add.w	r4, r0, #20
 8011d6a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8011d6e:	4623      	mov	r3, r4
 8011d70:	2200      	movs	r2, #0
 8011d72:	4573      	cmp	r3, lr
 8011d74:	d320      	bcc.n	8011db8 <__multiply+0x94>
 8011d76:	f107 0814 	add.w	r8, r7, #20
 8011d7a:	f109 0114 	add.w	r1, r9, #20
 8011d7e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8011d82:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8011d86:	9302      	str	r3, [sp, #8]
 8011d88:	1beb      	subs	r3, r5, r7
 8011d8a:	3b15      	subs	r3, #21
 8011d8c:	f023 0303 	bic.w	r3, r3, #3
 8011d90:	3304      	adds	r3, #4
 8011d92:	3715      	adds	r7, #21
 8011d94:	42bd      	cmp	r5, r7
 8011d96:	bf38      	it	cc
 8011d98:	2304      	movcc	r3, #4
 8011d9a:	9301      	str	r3, [sp, #4]
 8011d9c:	9b02      	ldr	r3, [sp, #8]
 8011d9e:	9103      	str	r1, [sp, #12]
 8011da0:	428b      	cmp	r3, r1
 8011da2:	d80c      	bhi.n	8011dbe <__multiply+0x9a>
 8011da4:	2e00      	cmp	r6, #0
 8011da6:	dd03      	ble.n	8011db0 <__multiply+0x8c>
 8011da8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d055      	beq.n	8011e5c <__multiply+0x138>
 8011db0:	6106      	str	r6, [r0, #16]
 8011db2:	b005      	add	sp, #20
 8011db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011db8:	f843 2b04 	str.w	r2, [r3], #4
 8011dbc:	e7d9      	b.n	8011d72 <__multiply+0x4e>
 8011dbe:	f8b1 a000 	ldrh.w	sl, [r1]
 8011dc2:	f1ba 0f00 	cmp.w	sl, #0
 8011dc6:	d01f      	beq.n	8011e08 <__multiply+0xe4>
 8011dc8:	46c4      	mov	ip, r8
 8011dca:	46a1      	mov	r9, r4
 8011dcc:	2700      	movs	r7, #0
 8011dce:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011dd2:	f8d9 3000 	ldr.w	r3, [r9]
 8011dd6:	fa1f fb82 	uxth.w	fp, r2
 8011dda:	b29b      	uxth	r3, r3
 8011ddc:	fb0a 330b 	mla	r3, sl, fp, r3
 8011de0:	443b      	add	r3, r7
 8011de2:	f8d9 7000 	ldr.w	r7, [r9]
 8011de6:	0c12      	lsrs	r2, r2, #16
 8011de8:	0c3f      	lsrs	r7, r7, #16
 8011dea:	fb0a 7202 	mla	r2, sl, r2, r7
 8011dee:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8011df2:	b29b      	uxth	r3, r3
 8011df4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011df8:	4565      	cmp	r5, ip
 8011dfa:	f849 3b04 	str.w	r3, [r9], #4
 8011dfe:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8011e02:	d8e4      	bhi.n	8011dce <__multiply+0xaa>
 8011e04:	9b01      	ldr	r3, [sp, #4]
 8011e06:	50e7      	str	r7, [r4, r3]
 8011e08:	9b03      	ldr	r3, [sp, #12]
 8011e0a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011e0e:	3104      	adds	r1, #4
 8011e10:	f1b9 0f00 	cmp.w	r9, #0
 8011e14:	d020      	beq.n	8011e58 <__multiply+0x134>
 8011e16:	6823      	ldr	r3, [r4, #0]
 8011e18:	4647      	mov	r7, r8
 8011e1a:	46a4      	mov	ip, r4
 8011e1c:	f04f 0a00 	mov.w	sl, #0
 8011e20:	f8b7 b000 	ldrh.w	fp, [r7]
 8011e24:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8011e28:	fb09 220b 	mla	r2, r9, fp, r2
 8011e2c:	4452      	add	r2, sl
 8011e2e:	b29b      	uxth	r3, r3
 8011e30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011e34:	f84c 3b04 	str.w	r3, [ip], #4
 8011e38:	f857 3b04 	ldr.w	r3, [r7], #4
 8011e3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011e40:	f8bc 3000 	ldrh.w	r3, [ip]
 8011e44:	fb09 330a 	mla	r3, r9, sl, r3
 8011e48:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8011e4c:	42bd      	cmp	r5, r7
 8011e4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011e52:	d8e5      	bhi.n	8011e20 <__multiply+0xfc>
 8011e54:	9a01      	ldr	r2, [sp, #4]
 8011e56:	50a3      	str	r3, [r4, r2]
 8011e58:	3404      	adds	r4, #4
 8011e5a:	e79f      	b.n	8011d9c <__multiply+0x78>
 8011e5c:	3e01      	subs	r6, #1
 8011e5e:	e7a1      	b.n	8011da4 <__multiply+0x80>
 8011e60:	0801465d 	.word	0x0801465d
 8011e64:	080146ce 	.word	0x080146ce

08011e68 <__pow5mult>:
 8011e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e6c:	4615      	mov	r5, r2
 8011e6e:	f012 0203 	ands.w	r2, r2, #3
 8011e72:	4607      	mov	r7, r0
 8011e74:	460e      	mov	r6, r1
 8011e76:	d007      	beq.n	8011e88 <__pow5mult+0x20>
 8011e78:	4c25      	ldr	r4, [pc, #148]	@ (8011f10 <__pow5mult+0xa8>)
 8011e7a:	3a01      	subs	r2, #1
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011e82:	f7ff fe5d 	bl	8011b40 <__multadd>
 8011e86:	4606      	mov	r6, r0
 8011e88:	10ad      	asrs	r5, r5, #2
 8011e8a:	d03d      	beq.n	8011f08 <__pow5mult+0xa0>
 8011e8c:	69fc      	ldr	r4, [r7, #28]
 8011e8e:	b97c      	cbnz	r4, 8011eb0 <__pow5mult+0x48>
 8011e90:	2010      	movs	r0, #16
 8011e92:	f7fb ffcb 	bl	800de2c <malloc>
 8011e96:	4602      	mov	r2, r0
 8011e98:	61f8      	str	r0, [r7, #28]
 8011e9a:	b928      	cbnz	r0, 8011ea8 <__pow5mult+0x40>
 8011e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8011f14 <__pow5mult+0xac>)
 8011e9e:	481e      	ldr	r0, [pc, #120]	@ (8011f18 <__pow5mult+0xb0>)
 8011ea0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011ea4:	f7fb ff3c 	bl	800dd20 <__assert_func>
 8011ea8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011eac:	6004      	str	r4, [r0, #0]
 8011eae:	60c4      	str	r4, [r0, #12]
 8011eb0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011eb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011eb8:	b94c      	cbnz	r4, 8011ece <__pow5mult+0x66>
 8011eba:	f240 2171 	movw	r1, #625	@ 0x271
 8011ebe:	4638      	mov	r0, r7
 8011ec0:	f7ff ff1a 	bl	8011cf8 <__i2b>
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	f8c8 0008 	str.w	r0, [r8, #8]
 8011eca:	4604      	mov	r4, r0
 8011ecc:	6003      	str	r3, [r0, #0]
 8011ece:	f04f 0900 	mov.w	r9, #0
 8011ed2:	07eb      	lsls	r3, r5, #31
 8011ed4:	d50a      	bpl.n	8011eec <__pow5mult+0x84>
 8011ed6:	4631      	mov	r1, r6
 8011ed8:	4622      	mov	r2, r4
 8011eda:	4638      	mov	r0, r7
 8011edc:	f7ff ff22 	bl	8011d24 <__multiply>
 8011ee0:	4631      	mov	r1, r6
 8011ee2:	4680      	mov	r8, r0
 8011ee4:	4638      	mov	r0, r7
 8011ee6:	f7ff fe09 	bl	8011afc <_Bfree>
 8011eea:	4646      	mov	r6, r8
 8011eec:	106d      	asrs	r5, r5, #1
 8011eee:	d00b      	beq.n	8011f08 <__pow5mult+0xa0>
 8011ef0:	6820      	ldr	r0, [r4, #0]
 8011ef2:	b938      	cbnz	r0, 8011f04 <__pow5mult+0x9c>
 8011ef4:	4622      	mov	r2, r4
 8011ef6:	4621      	mov	r1, r4
 8011ef8:	4638      	mov	r0, r7
 8011efa:	f7ff ff13 	bl	8011d24 <__multiply>
 8011efe:	6020      	str	r0, [r4, #0]
 8011f00:	f8c0 9000 	str.w	r9, [r0]
 8011f04:	4604      	mov	r4, r0
 8011f06:	e7e4      	b.n	8011ed2 <__pow5mult+0x6a>
 8011f08:	4630      	mov	r0, r6
 8011f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f0e:	bf00      	nop
 8011f10:	08014788 	.word	0x08014788
 8011f14:	0801457f 	.word	0x0801457f
 8011f18:	080146ce 	.word	0x080146ce

08011f1c <__lshift>:
 8011f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f20:	460c      	mov	r4, r1
 8011f22:	6849      	ldr	r1, [r1, #4]
 8011f24:	6923      	ldr	r3, [r4, #16]
 8011f26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011f2a:	68a3      	ldr	r3, [r4, #8]
 8011f2c:	4607      	mov	r7, r0
 8011f2e:	4691      	mov	r9, r2
 8011f30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011f34:	f108 0601 	add.w	r6, r8, #1
 8011f38:	42b3      	cmp	r3, r6
 8011f3a:	db0b      	blt.n	8011f54 <__lshift+0x38>
 8011f3c:	4638      	mov	r0, r7
 8011f3e:	f7ff fd9d 	bl	8011a7c <_Balloc>
 8011f42:	4605      	mov	r5, r0
 8011f44:	b948      	cbnz	r0, 8011f5a <__lshift+0x3e>
 8011f46:	4602      	mov	r2, r0
 8011f48:	4b28      	ldr	r3, [pc, #160]	@ (8011fec <__lshift+0xd0>)
 8011f4a:	4829      	ldr	r0, [pc, #164]	@ (8011ff0 <__lshift+0xd4>)
 8011f4c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011f50:	f7fb fee6 	bl	800dd20 <__assert_func>
 8011f54:	3101      	adds	r1, #1
 8011f56:	005b      	lsls	r3, r3, #1
 8011f58:	e7ee      	b.n	8011f38 <__lshift+0x1c>
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	f100 0114 	add.w	r1, r0, #20
 8011f60:	f100 0210 	add.w	r2, r0, #16
 8011f64:	4618      	mov	r0, r3
 8011f66:	4553      	cmp	r3, sl
 8011f68:	db33      	blt.n	8011fd2 <__lshift+0xb6>
 8011f6a:	6920      	ldr	r0, [r4, #16]
 8011f6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011f70:	f104 0314 	add.w	r3, r4, #20
 8011f74:	f019 091f 	ands.w	r9, r9, #31
 8011f78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011f7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011f80:	d02b      	beq.n	8011fda <__lshift+0xbe>
 8011f82:	f1c9 0e20 	rsb	lr, r9, #32
 8011f86:	468a      	mov	sl, r1
 8011f88:	2200      	movs	r2, #0
 8011f8a:	6818      	ldr	r0, [r3, #0]
 8011f8c:	fa00 f009 	lsl.w	r0, r0, r9
 8011f90:	4310      	orrs	r0, r2
 8011f92:	f84a 0b04 	str.w	r0, [sl], #4
 8011f96:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f9a:	459c      	cmp	ip, r3
 8011f9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8011fa0:	d8f3      	bhi.n	8011f8a <__lshift+0x6e>
 8011fa2:	ebac 0304 	sub.w	r3, ip, r4
 8011fa6:	3b15      	subs	r3, #21
 8011fa8:	f023 0303 	bic.w	r3, r3, #3
 8011fac:	3304      	adds	r3, #4
 8011fae:	f104 0015 	add.w	r0, r4, #21
 8011fb2:	4560      	cmp	r0, ip
 8011fb4:	bf88      	it	hi
 8011fb6:	2304      	movhi	r3, #4
 8011fb8:	50ca      	str	r2, [r1, r3]
 8011fba:	b10a      	cbz	r2, 8011fc0 <__lshift+0xa4>
 8011fbc:	f108 0602 	add.w	r6, r8, #2
 8011fc0:	3e01      	subs	r6, #1
 8011fc2:	4638      	mov	r0, r7
 8011fc4:	612e      	str	r6, [r5, #16]
 8011fc6:	4621      	mov	r1, r4
 8011fc8:	f7ff fd98 	bl	8011afc <_Bfree>
 8011fcc:	4628      	mov	r0, r5
 8011fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8011fd6:	3301      	adds	r3, #1
 8011fd8:	e7c5      	b.n	8011f66 <__lshift+0x4a>
 8011fda:	3904      	subs	r1, #4
 8011fdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8011fe0:	f841 2f04 	str.w	r2, [r1, #4]!
 8011fe4:	459c      	cmp	ip, r3
 8011fe6:	d8f9      	bhi.n	8011fdc <__lshift+0xc0>
 8011fe8:	e7ea      	b.n	8011fc0 <__lshift+0xa4>
 8011fea:	bf00      	nop
 8011fec:	0801465d 	.word	0x0801465d
 8011ff0:	080146ce 	.word	0x080146ce

08011ff4 <__mcmp>:
 8011ff4:	690a      	ldr	r2, [r1, #16]
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	6900      	ldr	r0, [r0, #16]
 8011ffa:	1a80      	subs	r0, r0, r2
 8011ffc:	b530      	push	{r4, r5, lr}
 8011ffe:	d10e      	bne.n	801201e <__mcmp+0x2a>
 8012000:	3314      	adds	r3, #20
 8012002:	3114      	adds	r1, #20
 8012004:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012008:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801200c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012010:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012014:	4295      	cmp	r5, r2
 8012016:	d003      	beq.n	8012020 <__mcmp+0x2c>
 8012018:	d205      	bcs.n	8012026 <__mcmp+0x32>
 801201a:	f04f 30ff 	mov.w	r0, #4294967295
 801201e:	bd30      	pop	{r4, r5, pc}
 8012020:	42a3      	cmp	r3, r4
 8012022:	d3f3      	bcc.n	801200c <__mcmp+0x18>
 8012024:	e7fb      	b.n	801201e <__mcmp+0x2a>
 8012026:	2001      	movs	r0, #1
 8012028:	e7f9      	b.n	801201e <__mcmp+0x2a>
	...

0801202c <__mdiff>:
 801202c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012030:	4689      	mov	r9, r1
 8012032:	4606      	mov	r6, r0
 8012034:	4611      	mov	r1, r2
 8012036:	4648      	mov	r0, r9
 8012038:	4614      	mov	r4, r2
 801203a:	f7ff ffdb 	bl	8011ff4 <__mcmp>
 801203e:	1e05      	subs	r5, r0, #0
 8012040:	d112      	bne.n	8012068 <__mdiff+0x3c>
 8012042:	4629      	mov	r1, r5
 8012044:	4630      	mov	r0, r6
 8012046:	f7ff fd19 	bl	8011a7c <_Balloc>
 801204a:	4602      	mov	r2, r0
 801204c:	b928      	cbnz	r0, 801205a <__mdiff+0x2e>
 801204e:	4b3f      	ldr	r3, [pc, #252]	@ (801214c <__mdiff+0x120>)
 8012050:	f240 2137 	movw	r1, #567	@ 0x237
 8012054:	483e      	ldr	r0, [pc, #248]	@ (8012150 <__mdiff+0x124>)
 8012056:	f7fb fe63 	bl	800dd20 <__assert_func>
 801205a:	2301      	movs	r3, #1
 801205c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012060:	4610      	mov	r0, r2
 8012062:	b003      	add	sp, #12
 8012064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012068:	bfbc      	itt	lt
 801206a:	464b      	movlt	r3, r9
 801206c:	46a1      	movlt	r9, r4
 801206e:	4630      	mov	r0, r6
 8012070:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012074:	bfba      	itte	lt
 8012076:	461c      	movlt	r4, r3
 8012078:	2501      	movlt	r5, #1
 801207a:	2500      	movge	r5, #0
 801207c:	f7ff fcfe 	bl	8011a7c <_Balloc>
 8012080:	4602      	mov	r2, r0
 8012082:	b918      	cbnz	r0, 801208c <__mdiff+0x60>
 8012084:	4b31      	ldr	r3, [pc, #196]	@ (801214c <__mdiff+0x120>)
 8012086:	f240 2145 	movw	r1, #581	@ 0x245
 801208a:	e7e3      	b.n	8012054 <__mdiff+0x28>
 801208c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012090:	6926      	ldr	r6, [r4, #16]
 8012092:	60c5      	str	r5, [r0, #12]
 8012094:	f109 0310 	add.w	r3, r9, #16
 8012098:	f109 0514 	add.w	r5, r9, #20
 801209c:	f104 0e14 	add.w	lr, r4, #20
 80120a0:	f100 0b14 	add.w	fp, r0, #20
 80120a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80120a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80120ac:	9301      	str	r3, [sp, #4]
 80120ae:	46d9      	mov	r9, fp
 80120b0:	f04f 0c00 	mov.w	ip, #0
 80120b4:	9b01      	ldr	r3, [sp, #4]
 80120b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80120ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 80120be:	9301      	str	r3, [sp, #4]
 80120c0:	fa1f f38a 	uxth.w	r3, sl
 80120c4:	4619      	mov	r1, r3
 80120c6:	b283      	uxth	r3, r0
 80120c8:	1acb      	subs	r3, r1, r3
 80120ca:	0c00      	lsrs	r0, r0, #16
 80120cc:	4463      	add	r3, ip
 80120ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80120d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80120d6:	b29b      	uxth	r3, r3
 80120d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80120dc:	4576      	cmp	r6, lr
 80120de:	f849 3b04 	str.w	r3, [r9], #4
 80120e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80120e6:	d8e5      	bhi.n	80120b4 <__mdiff+0x88>
 80120e8:	1b33      	subs	r3, r6, r4
 80120ea:	3b15      	subs	r3, #21
 80120ec:	f023 0303 	bic.w	r3, r3, #3
 80120f0:	3415      	adds	r4, #21
 80120f2:	3304      	adds	r3, #4
 80120f4:	42a6      	cmp	r6, r4
 80120f6:	bf38      	it	cc
 80120f8:	2304      	movcc	r3, #4
 80120fa:	441d      	add	r5, r3
 80120fc:	445b      	add	r3, fp
 80120fe:	461e      	mov	r6, r3
 8012100:	462c      	mov	r4, r5
 8012102:	4544      	cmp	r4, r8
 8012104:	d30e      	bcc.n	8012124 <__mdiff+0xf8>
 8012106:	f108 0103 	add.w	r1, r8, #3
 801210a:	1b49      	subs	r1, r1, r5
 801210c:	f021 0103 	bic.w	r1, r1, #3
 8012110:	3d03      	subs	r5, #3
 8012112:	45a8      	cmp	r8, r5
 8012114:	bf38      	it	cc
 8012116:	2100      	movcc	r1, #0
 8012118:	440b      	add	r3, r1
 801211a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801211e:	b191      	cbz	r1, 8012146 <__mdiff+0x11a>
 8012120:	6117      	str	r7, [r2, #16]
 8012122:	e79d      	b.n	8012060 <__mdiff+0x34>
 8012124:	f854 1b04 	ldr.w	r1, [r4], #4
 8012128:	46e6      	mov	lr, ip
 801212a:	0c08      	lsrs	r0, r1, #16
 801212c:	fa1c fc81 	uxtah	ip, ip, r1
 8012130:	4471      	add	r1, lr
 8012132:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012136:	b289      	uxth	r1, r1
 8012138:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801213c:	f846 1b04 	str.w	r1, [r6], #4
 8012140:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012144:	e7dd      	b.n	8012102 <__mdiff+0xd6>
 8012146:	3f01      	subs	r7, #1
 8012148:	e7e7      	b.n	801211a <__mdiff+0xee>
 801214a:	bf00      	nop
 801214c:	0801465d 	.word	0x0801465d
 8012150:	080146ce 	.word	0x080146ce

08012154 <__ulp>:
 8012154:	b082      	sub	sp, #8
 8012156:	ed8d 0b00 	vstr	d0, [sp]
 801215a:	9a01      	ldr	r2, [sp, #4]
 801215c:	4b0f      	ldr	r3, [pc, #60]	@ (801219c <__ulp+0x48>)
 801215e:	4013      	ands	r3, r2
 8012160:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8012164:	2b00      	cmp	r3, #0
 8012166:	dc08      	bgt.n	801217a <__ulp+0x26>
 8012168:	425b      	negs	r3, r3
 801216a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801216e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012172:	da04      	bge.n	801217e <__ulp+0x2a>
 8012174:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8012178:	4113      	asrs	r3, r2
 801217a:	2200      	movs	r2, #0
 801217c:	e008      	b.n	8012190 <__ulp+0x3c>
 801217e:	f1a2 0314 	sub.w	r3, r2, #20
 8012182:	2b1e      	cmp	r3, #30
 8012184:	bfda      	itte	le
 8012186:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801218a:	40da      	lsrle	r2, r3
 801218c:	2201      	movgt	r2, #1
 801218e:	2300      	movs	r3, #0
 8012190:	4619      	mov	r1, r3
 8012192:	4610      	mov	r0, r2
 8012194:	ec41 0b10 	vmov	d0, r0, r1
 8012198:	b002      	add	sp, #8
 801219a:	4770      	bx	lr
 801219c:	7ff00000 	.word	0x7ff00000

080121a0 <__b2d>:
 80121a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121a4:	6906      	ldr	r6, [r0, #16]
 80121a6:	f100 0814 	add.w	r8, r0, #20
 80121aa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80121ae:	1f37      	subs	r7, r6, #4
 80121b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80121b4:	4610      	mov	r0, r2
 80121b6:	f7ff fd53 	bl	8011c60 <__hi0bits>
 80121ba:	f1c0 0320 	rsb	r3, r0, #32
 80121be:	280a      	cmp	r0, #10
 80121c0:	600b      	str	r3, [r1, #0]
 80121c2:	491b      	ldr	r1, [pc, #108]	@ (8012230 <__b2d+0x90>)
 80121c4:	dc15      	bgt.n	80121f2 <__b2d+0x52>
 80121c6:	f1c0 0c0b 	rsb	ip, r0, #11
 80121ca:	fa22 f30c 	lsr.w	r3, r2, ip
 80121ce:	45b8      	cmp	r8, r7
 80121d0:	ea43 0501 	orr.w	r5, r3, r1
 80121d4:	bf34      	ite	cc
 80121d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80121da:	2300      	movcs	r3, #0
 80121dc:	3015      	adds	r0, #21
 80121de:	fa02 f000 	lsl.w	r0, r2, r0
 80121e2:	fa23 f30c 	lsr.w	r3, r3, ip
 80121e6:	4303      	orrs	r3, r0
 80121e8:	461c      	mov	r4, r3
 80121ea:	ec45 4b10 	vmov	d0, r4, r5
 80121ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121f2:	45b8      	cmp	r8, r7
 80121f4:	bf3a      	itte	cc
 80121f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80121fa:	f1a6 0708 	subcc.w	r7, r6, #8
 80121fe:	2300      	movcs	r3, #0
 8012200:	380b      	subs	r0, #11
 8012202:	d012      	beq.n	801222a <__b2d+0x8a>
 8012204:	f1c0 0120 	rsb	r1, r0, #32
 8012208:	fa23 f401 	lsr.w	r4, r3, r1
 801220c:	4082      	lsls	r2, r0
 801220e:	4322      	orrs	r2, r4
 8012210:	4547      	cmp	r7, r8
 8012212:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8012216:	bf8c      	ite	hi
 8012218:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801221c:	2200      	movls	r2, #0
 801221e:	4083      	lsls	r3, r0
 8012220:	40ca      	lsrs	r2, r1
 8012222:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012226:	4313      	orrs	r3, r2
 8012228:	e7de      	b.n	80121e8 <__b2d+0x48>
 801222a:	ea42 0501 	orr.w	r5, r2, r1
 801222e:	e7db      	b.n	80121e8 <__b2d+0x48>
 8012230:	3ff00000 	.word	0x3ff00000

08012234 <__d2b>:
 8012234:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012238:	460f      	mov	r7, r1
 801223a:	2101      	movs	r1, #1
 801223c:	ec59 8b10 	vmov	r8, r9, d0
 8012240:	4616      	mov	r6, r2
 8012242:	f7ff fc1b 	bl	8011a7c <_Balloc>
 8012246:	4604      	mov	r4, r0
 8012248:	b930      	cbnz	r0, 8012258 <__d2b+0x24>
 801224a:	4602      	mov	r2, r0
 801224c:	4b23      	ldr	r3, [pc, #140]	@ (80122dc <__d2b+0xa8>)
 801224e:	4824      	ldr	r0, [pc, #144]	@ (80122e0 <__d2b+0xac>)
 8012250:	f240 310f 	movw	r1, #783	@ 0x30f
 8012254:	f7fb fd64 	bl	800dd20 <__assert_func>
 8012258:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801225c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012260:	b10d      	cbz	r5, 8012266 <__d2b+0x32>
 8012262:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012266:	9301      	str	r3, [sp, #4]
 8012268:	f1b8 0300 	subs.w	r3, r8, #0
 801226c:	d023      	beq.n	80122b6 <__d2b+0x82>
 801226e:	4668      	mov	r0, sp
 8012270:	9300      	str	r3, [sp, #0]
 8012272:	f7ff fd14 	bl	8011c9e <__lo0bits>
 8012276:	e9dd 1200 	ldrd	r1, r2, [sp]
 801227a:	b1d0      	cbz	r0, 80122b2 <__d2b+0x7e>
 801227c:	f1c0 0320 	rsb	r3, r0, #32
 8012280:	fa02 f303 	lsl.w	r3, r2, r3
 8012284:	430b      	orrs	r3, r1
 8012286:	40c2      	lsrs	r2, r0
 8012288:	6163      	str	r3, [r4, #20]
 801228a:	9201      	str	r2, [sp, #4]
 801228c:	9b01      	ldr	r3, [sp, #4]
 801228e:	61a3      	str	r3, [r4, #24]
 8012290:	2b00      	cmp	r3, #0
 8012292:	bf0c      	ite	eq
 8012294:	2201      	moveq	r2, #1
 8012296:	2202      	movne	r2, #2
 8012298:	6122      	str	r2, [r4, #16]
 801229a:	b1a5      	cbz	r5, 80122c6 <__d2b+0x92>
 801229c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80122a0:	4405      	add	r5, r0
 80122a2:	603d      	str	r5, [r7, #0]
 80122a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80122a8:	6030      	str	r0, [r6, #0]
 80122aa:	4620      	mov	r0, r4
 80122ac:	b003      	add	sp, #12
 80122ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80122b2:	6161      	str	r1, [r4, #20]
 80122b4:	e7ea      	b.n	801228c <__d2b+0x58>
 80122b6:	a801      	add	r0, sp, #4
 80122b8:	f7ff fcf1 	bl	8011c9e <__lo0bits>
 80122bc:	9b01      	ldr	r3, [sp, #4]
 80122be:	6163      	str	r3, [r4, #20]
 80122c0:	3020      	adds	r0, #32
 80122c2:	2201      	movs	r2, #1
 80122c4:	e7e8      	b.n	8012298 <__d2b+0x64>
 80122c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80122ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80122ce:	6038      	str	r0, [r7, #0]
 80122d0:	6918      	ldr	r0, [r3, #16]
 80122d2:	f7ff fcc5 	bl	8011c60 <__hi0bits>
 80122d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80122da:	e7e5      	b.n	80122a8 <__d2b+0x74>
 80122dc:	0801465d 	.word	0x0801465d
 80122e0:	080146ce 	.word	0x080146ce

080122e4 <__ratio>:
 80122e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122e8:	b085      	sub	sp, #20
 80122ea:	e9cd 1000 	strd	r1, r0, [sp]
 80122ee:	a902      	add	r1, sp, #8
 80122f0:	f7ff ff56 	bl	80121a0 <__b2d>
 80122f4:	9800      	ldr	r0, [sp, #0]
 80122f6:	a903      	add	r1, sp, #12
 80122f8:	ec55 4b10 	vmov	r4, r5, d0
 80122fc:	f7ff ff50 	bl	80121a0 <__b2d>
 8012300:	9b01      	ldr	r3, [sp, #4]
 8012302:	6919      	ldr	r1, [r3, #16]
 8012304:	9b00      	ldr	r3, [sp, #0]
 8012306:	691b      	ldr	r3, [r3, #16]
 8012308:	1ac9      	subs	r1, r1, r3
 801230a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801230e:	1a9b      	subs	r3, r3, r2
 8012310:	ec5b ab10 	vmov	sl, fp, d0
 8012314:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012318:	2b00      	cmp	r3, #0
 801231a:	bfce      	itee	gt
 801231c:	462a      	movgt	r2, r5
 801231e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012322:	465a      	movle	r2, fp
 8012324:	462f      	mov	r7, r5
 8012326:	46d9      	mov	r9, fp
 8012328:	bfcc      	ite	gt
 801232a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801232e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8012332:	464b      	mov	r3, r9
 8012334:	4652      	mov	r2, sl
 8012336:	4620      	mov	r0, r4
 8012338:	4639      	mov	r1, r7
 801233a:	f7ee fab7 	bl	80008ac <__aeabi_ddiv>
 801233e:	ec41 0b10 	vmov	d0, r0, r1
 8012342:	b005      	add	sp, #20
 8012344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012348 <__copybits>:
 8012348:	3901      	subs	r1, #1
 801234a:	b570      	push	{r4, r5, r6, lr}
 801234c:	1149      	asrs	r1, r1, #5
 801234e:	6914      	ldr	r4, [r2, #16]
 8012350:	3101      	adds	r1, #1
 8012352:	f102 0314 	add.w	r3, r2, #20
 8012356:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801235a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801235e:	1f05      	subs	r5, r0, #4
 8012360:	42a3      	cmp	r3, r4
 8012362:	d30c      	bcc.n	801237e <__copybits+0x36>
 8012364:	1aa3      	subs	r3, r4, r2
 8012366:	3b11      	subs	r3, #17
 8012368:	f023 0303 	bic.w	r3, r3, #3
 801236c:	3211      	adds	r2, #17
 801236e:	42a2      	cmp	r2, r4
 8012370:	bf88      	it	hi
 8012372:	2300      	movhi	r3, #0
 8012374:	4418      	add	r0, r3
 8012376:	2300      	movs	r3, #0
 8012378:	4288      	cmp	r0, r1
 801237a:	d305      	bcc.n	8012388 <__copybits+0x40>
 801237c:	bd70      	pop	{r4, r5, r6, pc}
 801237e:	f853 6b04 	ldr.w	r6, [r3], #4
 8012382:	f845 6f04 	str.w	r6, [r5, #4]!
 8012386:	e7eb      	b.n	8012360 <__copybits+0x18>
 8012388:	f840 3b04 	str.w	r3, [r0], #4
 801238c:	e7f4      	b.n	8012378 <__copybits+0x30>

0801238e <__any_on>:
 801238e:	f100 0214 	add.w	r2, r0, #20
 8012392:	6900      	ldr	r0, [r0, #16]
 8012394:	114b      	asrs	r3, r1, #5
 8012396:	4298      	cmp	r0, r3
 8012398:	b510      	push	{r4, lr}
 801239a:	db11      	blt.n	80123c0 <__any_on+0x32>
 801239c:	dd0a      	ble.n	80123b4 <__any_on+0x26>
 801239e:	f011 011f 	ands.w	r1, r1, #31
 80123a2:	d007      	beq.n	80123b4 <__any_on+0x26>
 80123a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80123a8:	fa24 f001 	lsr.w	r0, r4, r1
 80123ac:	fa00 f101 	lsl.w	r1, r0, r1
 80123b0:	428c      	cmp	r4, r1
 80123b2:	d10b      	bne.n	80123cc <__any_on+0x3e>
 80123b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80123b8:	4293      	cmp	r3, r2
 80123ba:	d803      	bhi.n	80123c4 <__any_on+0x36>
 80123bc:	2000      	movs	r0, #0
 80123be:	bd10      	pop	{r4, pc}
 80123c0:	4603      	mov	r3, r0
 80123c2:	e7f7      	b.n	80123b4 <__any_on+0x26>
 80123c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80123c8:	2900      	cmp	r1, #0
 80123ca:	d0f5      	beq.n	80123b8 <__any_on+0x2a>
 80123cc:	2001      	movs	r0, #1
 80123ce:	e7f6      	b.n	80123be <__any_on+0x30>

080123d0 <_realloc_r>:
 80123d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123d4:	4607      	mov	r7, r0
 80123d6:	4614      	mov	r4, r2
 80123d8:	460d      	mov	r5, r1
 80123da:	b921      	cbnz	r1, 80123e6 <_realloc_r+0x16>
 80123dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80123e0:	4611      	mov	r1, r2
 80123e2:	f7fb bd55 	b.w	800de90 <_malloc_r>
 80123e6:	b92a      	cbnz	r2, 80123f4 <_realloc_r+0x24>
 80123e8:	f7fe ff7e 	bl	80112e8 <_free_r>
 80123ec:	4625      	mov	r5, r4
 80123ee:	4628      	mov	r0, r5
 80123f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123f4:	f000 fc96 	bl	8012d24 <_malloc_usable_size_r>
 80123f8:	4284      	cmp	r4, r0
 80123fa:	4606      	mov	r6, r0
 80123fc:	d802      	bhi.n	8012404 <_realloc_r+0x34>
 80123fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012402:	d8f4      	bhi.n	80123ee <_realloc_r+0x1e>
 8012404:	4621      	mov	r1, r4
 8012406:	4638      	mov	r0, r7
 8012408:	f7fb fd42 	bl	800de90 <_malloc_r>
 801240c:	4680      	mov	r8, r0
 801240e:	b908      	cbnz	r0, 8012414 <_realloc_r+0x44>
 8012410:	4645      	mov	r5, r8
 8012412:	e7ec      	b.n	80123ee <_realloc_r+0x1e>
 8012414:	42b4      	cmp	r4, r6
 8012416:	4622      	mov	r2, r4
 8012418:	4629      	mov	r1, r5
 801241a:	bf28      	it	cs
 801241c:	4632      	movcs	r2, r6
 801241e:	f7fe f8e3 	bl	80105e8 <memcpy>
 8012422:	4629      	mov	r1, r5
 8012424:	4638      	mov	r0, r7
 8012426:	f7fe ff5f 	bl	80112e8 <_free_r>
 801242a:	e7f1      	b.n	8012410 <_realloc_r+0x40>

0801242c <_strtol_l.isra.0>:
 801242c:	2b24      	cmp	r3, #36	@ 0x24
 801242e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012432:	4686      	mov	lr, r0
 8012434:	4690      	mov	r8, r2
 8012436:	d801      	bhi.n	801243c <_strtol_l.isra.0+0x10>
 8012438:	2b01      	cmp	r3, #1
 801243a:	d106      	bne.n	801244a <_strtol_l.isra.0+0x1e>
 801243c:	f7fe f8a6 	bl	801058c <__errno>
 8012440:	2316      	movs	r3, #22
 8012442:	6003      	str	r3, [r0, #0]
 8012444:	2000      	movs	r0, #0
 8012446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801244a:	4834      	ldr	r0, [pc, #208]	@ (801251c <_strtol_l.isra.0+0xf0>)
 801244c:	460d      	mov	r5, r1
 801244e:	462a      	mov	r2, r5
 8012450:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012454:	5d06      	ldrb	r6, [r0, r4]
 8012456:	f016 0608 	ands.w	r6, r6, #8
 801245a:	d1f8      	bne.n	801244e <_strtol_l.isra.0+0x22>
 801245c:	2c2d      	cmp	r4, #45	@ 0x2d
 801245e:	d110      	bne.n	8012482 <_strtol_l.isra.0+0x56>
 8012460:	782c      	ldrb	r4, [r5, #0]
 8012462:	2601      	movs	r6, #1
 8012464:	1c95      	adds	r5, r2, #2
 8012466:	f033 0210 	bics.w	r2, r3, #16
 801246a:	d115      	bne.n	8012498 <_strtol_l.isra.0+0x6c>
 801246c:	2c30      	cmp	r4, #48	@ 0x30
 801246e:	d10d      	bne.n	801248c <_strtol_l.isra.0+0x60>
 8012470:	782a      	ldrb	r2, [r5, #0]
 8012472:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012476:	2a58      	cmp	r2, #88	@ 0x58
 8012478:	d108      	bne.n	801248c <_strtol_l.isra.0+0x60>
 801247a:	786c      	ldrb	r4, [r5, #1]
 801247c:	3502      	adds	r5, #2
 801247e:	2310      	movs	r3, #16
 8012480:	e00a      	b.n	8012498 <_strtol_l.isra.0+0x6c>
 8012482:	2c2b      	cmp	r4, #43	@ 0x2b
 8012484:	bf04      	itt	eq
 8012486:	782c      	ldrbeq	r4, [r5, #0]
 8012488:	1c95      	addeq	r5, r2, #2
 801248a:	e7ec      	b.n	8012466 <_strtol_l.isra.0+0x3a>
 801248c:	2b00      	cmp	r3, #0
 801248e:	d1f6      	bne.n	801247e <_strtol_l.isra.0+0x52>
 8012490:	2c30      	cmp	r4, #48	@ 0x30
 8012492:	bf14      	ite	ne
 8012494:	230a      	movne	r3, #10
 8012496:	2308      	moveq	r3, #8
 8012498:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801249c:	f10c 3cff 	add.w	ip, ip, #4294967295
 80124a0:	2200      	movs	r2, #0
 80124a2:	fbbc f9f3 	udiv	r9, ip, r3
 80124a6:	4610      	mov	r0, r2
 80124a8:	fb03 ca19 	mls	sl, r3, r9, ip
 80124ac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80124b0:	2f09      	cmp	r7, #9
 80124b2:	d80f      	bhi.n	80124d4 <_strtol_l.isra.0+0xa8>
 80124b4:	463c      	mov	r4, r7
 80124b6:	42a3      	cmp	r3, r4
 80124b8:	dd1b      	ble.n	80124f2 <_strtol_l.isra.0+0xc6>
 80124ba:	1c57      	adds	r7, r2, #1
 80124bc:	d007      	beq.n	80124ce <_strtol_l.isra.0+0xa2>
 80124be:	4581      	cmp	r9, r0
 80124c0:	d314      	bcc.n	80124ec <_strtol_l.isra.0+0xc0>
 80124c2:	d101      	bne.n	80124c8 <_strtol_l.isra.0+0x9c>
 80124c4:	45a2      	cmp	sl, r4
 80124c6:	db11      	blt.n	80124ec <_strtol_l.isra.0+0xc0>
 80124c8:	fb00 4003 	mla	r0, r0, r3, r4
 80124cc:	2201      	movs	r2, #1
 80124ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80124d2:	e7eb      	b.n	80124ac <_strtol_l.isra.0+0x80>
 80124d4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80124d8:	2f19      	cmp	r7, #25
 80124da:	d801      	bhi.n	80124e0 <_strtol_l.isra.0+0xb4>
 80124dc:	3c37      	subs	r4, #55	@ 0x37
 80124de:	e7ea      	b.n	80124b6 <_strtol_l.isra.0+0x8a>
 80124e0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80124e4:	2f19      	cmp	r7, #25
 80124e6:	d804      	bhi.n	80124f2 <_strtol_l.isra.0+0xc6>
 80124e8:	3c57      	subs	r4, #87	@ 0x57
 80124ea:	e7e4      	b.n	80124b6 <_strtol_l.isra.0+0x8a>
 80124ec:	f04f 32ff 	mov.w	r2, #4294967295
 80124f0:	e7ed      	b.n	80124ce <_strtol_l.isra.0+0xa2>
 80124f2:	1c53      	adds	r3, r2, #1
 80124f4:	d108      	bne.n	8012508 <_strtol_l.isra.0+0xdc>
 80124f6:	2322      	movs	r3, #34	@ 0x22
 80124f8:	f8ce 3000 	str.w	r3, [lr]
 80124fc:	4660      	mov	r0, ip
 80124fe:	f1b8 0f00 	cmp.w	r8, #0
 8012502:	d0a0      	beq.n	8012446 <_strtol_l.isra.0+0x1a>
 8012504:	1e69      	subs	r1, r5, #1
 8012506:	e006      	b.n	8012516 <_strtol_l.isra.0+0xea>
 8012508:	b106      	cbz	r6, 801250c <_strtol_l.isra.0+0xe0>
 801250a:	4240      	negs	r0, r0
 801250c:	f1b8 0f00 	cmp.w	r8, #0
 8012510:	d099      	beq.n	8012446 <_strtol_l.isra.0+0x1a>
 8012512:	2a00      	cmp	r2, #0
 8012514:	d1f6      	bne.n	8012504 <_strtol_l.isra.0+0xd8>
 8012516:	f8c8 1000 	str.w	r1, [r8]
 801251a:	e794      	b.n	8012446 <_strtol_l.isra.0+0x1a>
 801251c:	08014889 	.word	0x08014889

08012520 <_strtol_r>:
 8012520:	f7ff bf84 	b.w	801242c <_strtol_l.isra.0>

08012524 <__ascii_wctomb>:
 8012524:	4603      	mov	r3, r0
 8012526:	4608      	mov	r0, r1
 8012528:	b141      	cbz	r1, 801253c <__ascii_wctomb+0x18>
 801252a:	2aff      	cmp	r2, #255	@ 0xff
 801252c:	d904      	bls.n	8012538 <__ascii_wctomb+0x14>
 801252e:	228a      	movs	r2, #138	@ 0x8a
 8012530:	601a      	str	r2, [r3, #0]
 8012532:	f04f 30ff 	mov.w	r0, #4294967295
 8012536:	4770      	bx	lr
 8012538:	700a      	strb	r2, [r1, #0]
 801253a:	2001      	movs	r0, #1
 801253c:	4770      	bx	lr

0801253e <__ssputs_r>:
 801253e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012542:	688e      	ldr	r6, [r1, #8]
 8012544:	461f      	mov	r7, r3
 8012546:	42be      	cmp	r6, r7
 8012548:	680b      	ldr	r3, [r1, #0]
 801254a:	4682      	mov	sl, r0
 801254c:	460c      	mov	r4, r1
 801254e:	4690      	mov	r8, r2
 8012550:	d82d      	bhi.n	80125ae <__ssputs_r+0x70>
 8012552:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012556:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801255a:	d026      	beq.n	80125aa <__ssputs_r+0x6c>
 801255c:	6965      	ldr	r5, [r4, #20]
 801255e:	6909      	ldr	r1, [r1, #16]
 8012560:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012564:	eba3 0901 	sub.w	r9, r3, r1
 8012568:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801256c:	1c7b      	adds	r3, r7, #1
 801256e:	444b      	add	r3, r9
 8012570:	106d      	asrs	r5, r5, #1
 8012572:	429d      	cmp	r5, r3
 8012574:	bf38      	it	cc
 8012576:	461d      	movcc	r5, r3
 8012578:	0553      	lsls	r3, r2, #21
 801257a:	d527      	bpl.n	80125cc <__ssputs_r+0x8e>
 801257c:	4629      	mov	r1, r5
 801257e:	f7fb fc87 	bl	800de90 <_malloc_r>
 8012582:	4606      	mov	r6, r0
 8012584:	b360      	cbz	r0, 80125e0 <__ssputs_r+0xa2>
 8012586:	6921      	ldr	r1, [r4, #16]
 8012588:	464a      	mov	r2, r9
 801258a:	f7fe f82d 	bl	80105e8 <memcpy>
 801258e:	89a3      	ldrh	r3, [r4, #12]
 8012590:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012598:	81a3      	strh	r3, [r4, #12]
 801259a:	6126      	str	r6, [r4, #16]
 801259c:	6165      	str	r5, [r4, #20]
 801259e:	444e      	add	r6, r9
 80125a0:	eba5 0509 	sub.w	r5, r5, r9
 80125a4:	6026      	str	r6, [r4, #0]
 80125a6:	60a5      	str	r5, [r4, #8]
 80125a8:	463e      	mov	r6, r7
 80125aa:	42be      	cmp	r6, r7
 80125ac:	d900      	bls.n	80125b0 <__ssputs_r+0x72>
 80125ae:	463e      	mov	r6, r7
 80125b0:	6820      	ldr	r0, [r4, #0]
 80125b2:	4632      	mov	r2, r6
 80125b4:	4641      	mov	r1, r8
 80125b6:	f000 fb34 	bl	8012c22 <memmove>
 80125ba:	68a3      	ldr	r3, [r4, #8]
 80125bc:	1b9b      	subs	r3, r3, r6
 80125be:	60a3      	str	r3, [r4, #8]
 80125c0:	6823      	ldr	r3, [r4, #0]
 80125c2:	4433      	add	r3, r6
 80125c4:	6023      	str	r3, [r4, #0]
 80125c6:	2000      	movs	r0, #0
 80125c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125cc:	462a      	mov	r2, r5
 80125ce:	f7ff feff 	bl	80123d0 <_realloc_r>
 80125d2:	4606      	mov	r6, r0
 80125d4:	2800      	cmp	r0, #0
 80125d6:	d1e0      	bne.n	801259a <__ssputs_r+0x5c>
 80125d8:	6921      	ldr	r1, [r4, #16]
 80125da:	4650      	mov	r0, sl
 80125dc:	f7fe fe84 	bl	80112e8 <_free_r>
 80125e0:	230c      	movs	r3, #12
 80125e2:	f8ca 3000 	str.w	r3, [sl]
 80125e6:	89a3      	ldrh	r3, [r4, #12]
 80125e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80125ec:	81a3      	strh	r3, [r4, #12]
 80125ee:	f04f 30ff 	mov.w	r0, #4294967295
 80125f2:	e7e9      	b.n	80125c8 <__ssputs_r+0x8a>

080125f4 <_svfiprintf_r>:
 80125f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125f8:	4698      	mov	r8, r3
 80125fa:	898b      	ldrh	r3, [r1, #12]
 80125fc:	061b      	lsls	r3, r3, #24
 80125fe:	b09d      	sub	sp, #116	@ 0x74
 8012600:	4607      	mov	r7, r0
 8012602:	460d      	mov	r5, r1
 8012604:	4614      	mov	r4, r2
 8012606:	d510      	bpl.n	801262a <_svfiprintf_r+0x36>
 8012608:	690b      	ldr	r3, [r1, #16]
 801260a:	b973      	cbnz	r3, 801262a <_svfiprintf_r+0x36>
 801260c:	2140      	movs	r1, #64	@ 0x40
 801260e:	f7fb fc3f 	bl	800de90 <_malloc_r>
 8012612:	6028      	str	r0, [r5, #0]
 8012614:	6128      	str	r0, [r5, #16]
 8012616:	b930      	cbnz	r0, 8012626 <_svfiprintf_r+0x32>
 8012618:	230c      	movs	r3, #12
 801261a:	603b      	str	r3, [r7, #0]
 801261c:	f04f 30ff 	mov.w	r0, #4294967295
 8012620:	b01d      	add	sp, #116	@ 0x74
 8012622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012626:	2340      	movs	r3, #64	@ 0x40
 8012628:	616b      	str	r3, [r5, #20]
 801262a:	2300      	movs	r3, #0
 801262c:	9309      	str	r3, [sp, #36]	@ 0x24
 801262e:	2320      	movs	r3, #32
 8012630:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012634:	f8cd 800c 	str.w	r8, [sp, #12]
 8012638:	2330      	movs	r3, #48	@ 0x30
 801263a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80127d8 <_svfiprintf_r+0x1e4>
 801263e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012642:	f04f 0901 	mov.w	r9, #1
 8012646:	4623      	mov	r3, r4
 8012648:	469a      	mov	sl, r3
 801264a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801264e:	b10a      	cbz	r2, 8012654 <_svfiprintf_r+0x60>
 8012650:	2a25      	cmp	r2, #37	@ 0x25
 8012652:	d1f9      	bne.n	8012648 <_svfiprintf_r+0x54>
 8012654:	ebba 0b04 	subs.w	fp, sl, r4
 8012658:	d00b      	beq.n	8012672 <_svfiprintf_r+0x7e>
 801265a:	465b      	mov	r3, fp
 801265c:	4622      	mov	r2, r4
 801265e:	4629      	mov	r1, r5
 8012660:	4638      	mov	r0, r7
 8012662:	f7ff ff6c 	bl	801253e <__ssputs_r>
 8012666:	3001      	adds	r0, #1
 8012668:	f000 80a7 	beq.w	80127ba <_svfiprintf_r+0x1c6>
 801266c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801266e:	445a      	add	r2, fp
 8012670:	9209      	str	r2, [sp, #36]	@ 0x24
 8012672:	f89a 3000 	ldrb.w	r3, [sl]
 8012676:	2b00      	cmp	r3, #0
 8012678:	f000 809f 	beq.w	80127ba <_svfiprintf_r+0x1c6>
 801267c:	2300      	movs	r3, #0
 801267e:	f04f 32ff 	mov.w	r2, #4294967295
 8012682:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012686:	f10a 0a01 	add.w	sl, sl, #1
 801268a:	9304      	str	r3, [sp, #16]
 801268c:	9307      	str	r3, [sp, #28]
 801268e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012692:	931a      	str	r3, [sp, #104]	@ 0x68
 8012694:	4654      	mov	r4, sl
 8012696:	2205      	movs	r2, #5
 8012698:	f814 1b01 	ldrb.w	r1, [r4], #1
 801269c:	484e      	ldr	r0, [pc, #312]	@ (80127d8 <_svfiprintf_r+0x1e4>)
 801269e:	f7ed fdc7 	bl	8000230 <memchr>
 80126a2:	9a04      	ldr	r2, [sp, #16]
 80126a4:	b9d8      	cbnz	r0, 80126de <_svfiprintf_r+0xea>
 80126a6:	06d0      	lsls	r0, r2, #27
 80126a8:	bf44      	itt	mi
 80126aa:	2320      	movmi	r3, #32
 80126ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80126b0:	0711      	lsls	r1, r2, #28
 80126b2:	bf44      	itt	mi
 80126b4:	232b      	movmi	r3, #43	@ 0x2b
 80126b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80126ba:	f89a 3000 	ldrb.w	r3, [sl]
 80126be:	2b2a      	cmp	r3, #42	@ 0x2a
 80126c0:	d015      	beq.n	80126ee <_svfiprintf_r+0xfa>
 80126c2:	9a07      	ldr	r2, [sp, #28]
 80126c4:	4654      	mov	r4, sl
 80126c6:	2000      	movs	r0, #0
 80126c8:	f04f 0c0a 	mov.w	ip, #10
 80126cc:	4621      	mov	r1, r4
 80126ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80126d2:	3b30      	subs	r3, #48	@ 0x30
 80126d4:	2b09      	cmp	r3, #9
 80126d6:	d94b      	bls.n	8012770 <_svfiprintf_r+0x17c>
 80126d8:	b1b0      	cbz	r0, 8012708 <_svfiprintf_r+0x114>
 80126da:	9207      	str	r2, [sp, #28]
 80126dc:	e014      	b.n	8012708 <_svfiprintf_r+0x114>
 80126de:	eba0 0308 	sub.w	r3, r0, r8
 80126e2:	fa09 f303 	lsl.w	r3, r9, r3
 80126e6:	4313      	orrs	r3, r2
 80126e8:	9304      	str	r3, [sp, #16]
 80126ea:	46a2      	mov	sl, r4
 80126ec:	e7d2      	b.n	8012694 <_svfiprintf_r+0xa0>
 80126ee:	9b03      	ldr	r3, [sp, #12]
 80126f0:	1d19      	adds	r1, r3, #4
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	9103      	str	r1, [sp, #12]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	bfbb      	ittet	lt
 80126fa:	425b      	neglt	r3, r3
 80126fc:	f042 0202 	orrlt.w	r2, r2, #2
 8012700:	9307      	strge	r3, [sp, #28]
 8012702:	9307      	strlt	r3, [sp, #28]
 8012704:	bfb8      	it	lt
 8012706:	9204      	strlt	r2, [sp, #16]
 8012708:	7823      	ldrb	r3, [r4, #0]
 801270a:	2b2e      	cmp	r3, #46	@ 0x2e
 801270c:	d10a      	bne.n	8012724 <_svfiprintf_r+0x130>
 801270e:	7863      	ldrb	r3, [r4, #1]
 8012710:	2b2a      	cmp	r3, #42	@ 0x2a
 8012712:	d132      	bne.n	801277a <_svfiprintf_r+0x186>
 8012714:	9b03      	ldr	r3, [sp, #12]
 8012716:	1d1a      	adds	r2, r3, #4
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	9203      	str	r2, [sp, #12]
 801271c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012720:	3402      	adds	r4, #2
 8012722:	9305      	str	r3, [sp, #20]
 8012724:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80127e8 <_svfiprintf_r+0x1f4>
 8012728:	7821      	ldrb	r1, [r4, #0]
 801272a:	2203      	movs	r2, #3
 801272c:	4650      	mov	r0, sl
 801272e:	f7ed fd7f 	bl	8000230 <memchr>
 8012732:	b138      	cbz	r0, 8012744 <_svfiprintf_r+0x150>
 8012734:	9b04      	ldr	r3, [sp, #16]
 8012736:	eba0 000a 	sub.w	r0, r0, sl
 801273a:	2240      	movs	r2, #64	@ 0x40
 801273c:	4082      	lsls	r2, r0
 801273e:	4313      	orrs	r3, r2
 8012740:	3401      	adds	r4, #1
 8012742:	9304      	str	r3, [sp, #16]
 8012744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012748:	4824      	ldr	r0, [pc, #144]	@ (80127dc <_svfiprintf_r+0x1e8>)
 801274a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801274e:	2206      	movs	r2, #6
 8012750:	f7ed fd6e 	bl	8000230 <memchr>
 8012754:	2800      	cmp	r0, #0
 8012756:	d036      	beq.n	80127c6 <_svfiprintf_r+0x1d2>
 8012758:	4b21      	ldr	r3, [pc, #132]	@ (80127e0 <_svfiprintf_r+0x1ec>)
 801275a:	bb1b      	cbnz	r3, 80127a4 <_svfiprintf_r+0x1b0>
 801275c:	9b03      	ldr	r3, [sp, #12]
 801275e:	3307      	adds	r3, #7
 8012760:	f023 0307 	bic.w	r3, r3, #7
 8012764:	3308      	adds	r3, #8
 8012766:	9303      	str	r3, [sp, #12]
 8012768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801276a:	4433      	add	r3, r6
 801276c:	9309      	str	r3, [sp, #36]	@ 0x24
 801276e:	e76a      	b.n	8012646 <_svfiprintf_r+0x52>
 8012770:	fb0c 3202 	mla	r2, ip, r2, r3
 8012774:	460c      	mov	r4, r1
 8012776:	2001      	movs	r0, #1
 8012778:	e7a8      	b.n	80126cc <_svfiprintf_r+0xd8>
 801277a:	2300      	movs	r3, #0
 801277c:	3401      	adds	r4, #1
 801277e:	9305      	str	r3, [sp, #20]
 8012780:	4619      	mov	r1, r3
 8012782:	f04f 0c0a 	mov.w	ip, #10
 8012786:	4620      	mov	r0, r4
 8012788:	f810 2b01 	ldrb.w	r2, [r0], #1
 801278c:	3a30      	subs	r2, #48	@ 0x30
 801278e:	2a09      	cmp	r2, #9
 8012790:	d903      	bls.n	801279a <_svfiprintf_r+0x1a6>
 8012792:	2b00      	cmp	r3, #0
 8012794:	d0c6      	beq.n	8012724 <_svfiprintf_r+0x130>
 8012796:	9105      	str	r1, [sp, #20]
 8012798:	e7c4      	b.n	8012724 <_svfiprintf_r+0x130>
 801279a:	fb0c 2101 	mla	r1, ip, r1, r2
 801279e:	4604      	mov	r4, r0
 80127a0:	2301      	movs	r3, #1
 80127a2:	e7f0      	b.n	8012786 <_svfiprintf_r+0x192>
 80127a4:	ab03      	add	r3, sp, #12
 80127a6:	9300      	str	r3, [sp, #0]
 80127a8:	462a      	mov	r2, r5
 80127aa:	4b0e      	ldr	r3, [pc, #56]	@ (80127e4 <_svfiprintf_r+0x1f0>)
 80127ac:	a904      	add	r1, sp, #16
 80127ae:	4638      	mov	r0, r7
 80127b0:	f7fc fb4e 	bl	800ee50 <_printf_float>
 80127b4:	1c42      	adds	r2, r0, #1
 80127b6:	4606      	mov	r6, r0
 80127b8:	d1d6      	bne.n	8012768 <_svfiprintf_r+0x174>
 80127ba:	89ab      	ldrh	r3, [r5, #12]
 80127bc:	065b      	lsls	r3, r3, #25
 80127be:	f53f af2d 	bmi.w	801261c <_svfiprintf_r+0x28>
 80127c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80127c4:	e72c      	b.n	8012620 <_svfiprintf_r+0x2c>
 80127c6:	ab03      	add	r3, sp, #12
 80127c8:	9300      	str	r3, [sp, #0]
 80127ca:	462a      	mov	r2, r5
 80127cc:	4b05      	ldr	r3, [pc, #20]	@ (80127e4 <_svfiprintf_r+0x1f0>)
 80127ce:	a904      	add	r1, sp, #16
 80127d0:	4638      	mov	r0, r7
 80127d2:	f7fc fdd5 	bl	800f380 <_printf_i>
 80127d6:	e7ed      	b.n	80127b4 <_svfiprintf_r+0x1c0>
 80127d8:	08014727 	.word	0x08014727
 80127dc:	08014731 	.word	0x08014731
 80127e0:	0800ee51 	.word	0x0800ee51
 80127e4:	0801253f 	.word	0x0801253f
 80127e8:	0801472d 	.word	0x0801472d

080127ec <__sfputc_r>:
 80127ec:	6893      	ldr	r3, [r2, #8]
 80127ee:	3b01      	subs	r3, #1
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	b410      	push	{r4}
 80127f4:	6093      	str	r3, [r2, #8]
 80127f6:	da08      	bge.n	801280a <__sfputc_r+0x1e>
 80127f8:	6994      	ldr	r4, [r2, #24]
 80127fa:	42a3      	cmp	r3, r4
 80127fc:	db01      	blt.n	8012802 <__sfputc_r+0x16>
 80127fe:	290a      	cmp	r1, #10
 8012800:	d103      	bne.n	801280a <__sfputc_r+0x1e>
 8012802:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012806:	f7fd bc10 	b.w	801002a <__swbuf_r>
 801280a:	6813      	ldr	r3, [r2, #0]
 801280c:	1c58      	adds	r0, r3, #1
 801280e:	6010      	str	r0, [r2, #0]
 8012810:	7019      	strb	r1, [r3, #0]
 8012812:	4608      	mov	r0, r1
 8012814:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012818:	4770      	bx	lr

0801281a <__sfputs_r>:
 801281a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801281c:	4606      	mov	r6, r0
 801281e:	460f      	mov	r7, r1
 8012820:	4614      	mov	r4, r2
 8012822:	18d5      	adds	r5, r2, r3
 8012824:	42ac      	cmp	r4, r5
 8012826:	d101      	bne.n	801282c <__sfputs_r+0x12>
 8012828:	2000      	movs	r0, #0
 801282a:	e007      	b.n	801283c <__sfputs_r+0x22>
 801282c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012830:	463a      	mov	r2, r7
 8012832:	4630      	mov	r0, r6
 8012834:	f7ff ffda 	bl	80127ec <__sfputc_r>
 8012838:	1c43      	adds	r3, r0, #1
 801283a:	d1f3      	bne.n	8012824 <__sfputs_r+0xa>
 801283c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012840 <_vfiprintf_r>:
 8012840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012844:	460d      	mov	r5, r1
 8012846:	b09d      	sub	sp, #116	@ 0x74
 8012848:	4614      	mov	r4, r2
 801284a:	4698      	mov	r8, r3
 801284c:	4606      	mov	r6, r0
 801284e:	b118      	cbz	r0, 8012858 <_vfiprintf_r+0x18>
 8012850:	6a03      	ldr	r3, [r0, #32]
 8012852:	b90b      	cbnz	r3, 8012858 <_vfiprintf_r+0x18>
 8012854:	f7fd fabc 	bl	800fdd0 <__sinit>
 8012858:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801285a:	07d9      	lsls	r1, r3, #31
 801285c:	d405      	bmi.n	801286a <_vfiprintf_r+0x2a>
 801285e:	89ab      	ldrh	r3, [r5, #12]
 8012860:	059a      	lsls	r2, r3, #22
 8012862:	d402      	bmi.n	801286a <_vfiprintf_r+0x2a>
 8012864:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012866:	f7fd febd 	bl	80105e4 <__retarget_lock_acquire_recursive>
 801286a:	89ab      	ldrh	r3, [r5, #12]
 801286c:	071b      	lsls	r3, r3, #28
 801286e:	d501      	bpl.n	8012874 <_vfiprintf_r+0x34>
 8012870:	692b      	ldr	r3, [r5, #16]
 8012872:	b99b      	cbnz	r3, 801289c <_vfiprintf_r+0x5c>
 8012874:	4629      	mov	r1, r5
 8012876:	4630      	mov	r0, r6
 8012878:	f7fd fc16 	bl	80100a8 <__swsetup_r>
 801287c:	b170      	cbz	r0, 801289c <_vfiprintf_r+0x5c>
 801287e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012880:	07dc      	lsls	r4, r3, #31
 8012882:	d504      	bpl.n	801288e <_vfiprintf_r+0x4e>
 8012884:	f04f 30ff 	mov.w	r0, #4294967295
 8012888:	b01d      	add	sp, #116	@ 0x74
 801288a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801288e:	89ab      	ldrh	r3, [r5, #12]
 8012890:	0598      	lsls	r0, r3, #22
 8012892:	d4f7      	bmi.n	8012884 <_vfiprintf_r+0x44>
 8012894:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012896:	f7fd fea6 	bl	80105e6 <__retarget_lock_release_recursive>
 801289a:	e7f3      	b.n	8012884 <_vfiprintf_r+0x44>
 801289c:	2300      	movs	r3, #0
 801289e:	9309      	str	r3, [sp, #36]	@ 0x24
 80128a0:	2320      	movs	r3, #32
 80128a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80128a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80128aa:	2330      	movs	r3, #48	@ 0x30
 80128ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012a5c <_vfiprintf_r+0x21c>
 80128b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80128b4:	f04f 0901 	mov.w	r9, #1
 80128b8:	4623      	mov	r3, r4
 80128ba:	469a      	mov	sl, r3
 80128bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80128c0:	b10a      	cbz	r2, 80128c6 <_vfiprintf_r+0x86>
 80128c2:	2a25      	cmp	r2, #37	@ 0x25
 80128c4:	d1f9      	bne.n	80128ba <_vfiprintf_r+0x7a>
 80128c6:	ebba 0b04 	subs.w	fp, sl, r4
 80128ca:	d00b      	beq.n	80128e4 <_vfiprintf_r+0xa4>
 80128cc:	465b      	mov	r3, fp
 80128ce:	4622      	mov	r2, r4
 80128d0:	4629      	mov	r1, r5
 80128d2:	4630      	mov	r0, r6
 80128d4:	f7ff ffa1 	bl	801281a <__sfputs_r>
 80128d8:	3001      	adds	r0, #1
 80128da:	f000 80a7 	beq.w	8012a2c <_vfiprintf_r+0x1ec>
 80128de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80128e0:	445a      	add	r2, fp
 80128e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80128e4:	f89a 3000 	ldrb.w	r3, [sl]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	f000 809f 	beq.w	8012a2c <_vfiprintf_r+0x1ec>
 80128ee:	2300      	movs	r3, #0
 80128f0:	f04f 32ff 	mov.w	r2, #4294967295
 80128f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80128f8:	f10a 0a01 	add.w	sl, sl, #1
 80128fc:	9304      	str	r3, [sp, #16]
 80128fe:	9307      	str	r3, [sp, #28]
 8012900:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012904:	931a      	str	r3, [sp, #104]	@ 0x68
 8012906:	4654      	mov	r4, sl
 8012908:	2205      	movs	r2, #5
 801290a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801290e:	4853      	ldr	r0, [pc, #332]	@ (8012a5c <_vfiprintf_r+0x21c>)
 8012910:	f7ed fc8e 	bl	8000230 <memchr>
 8012914:	9a04      	ldr	r2, [sp, #16]
 8012916:	b9d8      	cbnz	r0, 8012950 <_vfiprintf_r+0x110>
 8012918:	06d1      	lsls	r1, r2, #27
 801291a:	bf44      	itt	mi
 801291c:	2320      	movmi	r3, #32
 801291e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012922:	0713      	lsls	r3, r2, #28
 8012924:	bf44      	itt	mi
 8012926:	232b      	movmi	r3, #43	@ 0x2b
 8012928:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801292c:	f89a 3000 	ldrb.w	r3, [sl]
 8012930:	2b2a      	cmp	r3, #42	@ 0x2a
 8012932:	d015      	beq.n	8012960 <_vfiprintf_r+0x120>
 8012934:	9a07      	ldr	r2, [sp, #28]
 8012936:	4654      	mov	r4, sl
 8012938:	2000      	movs	r0, #0
 801293a:	f04f 0c0a 	mov.w	ip, #10
 801293e:	4621      	mov	r1, r4
 8012940:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012944:	3b30      	subs	r3, #48	@ 0x30
 8012946:	2b09      	cmp	r3, #9
 8012948:	d94b      	bls.n	80129e2 <_vfiprintf_r+0x1a2>
 801294a:	b1b0      	cbz	r0, 801297a <_vfiprintf_r+0x13a>
 801294c:	9207      	str	r2, [sp, #28]
 801294e:	e014      	b.n	801297a <_vfiprintf_r+0x13a>
 8012950:	eba0 0308 	sub.w	r3, r0, r8
 8012954:	fa09 f303 	lsl.w	r3, r9, r3
 8012958:	4313      	orrs	r3, r2
 801295a:	9304      	str	r3, [sp, #16]
 801295c:	46a2      	mov	sl, r4
 801295e:	e7d2      	b.n	8012906 <_vfiprintf_r+0xc6>
 8012960:	9b03      	ldr	r3, [sp, #12]
 8012962:	1d19      	adds	r1, r3, #4
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	9103      	str	r1, [sp, #12]
 8012968:	2b00      	cmp	r3, #0
 801296a:	bfbb      	ittet	lt
 801296c:	425b      	neglt	r3, r3
 801296e:	f042 0202 	orrlt.w	r2, r2, #2
 8012972:	9307      	strge	r3, [sp, #28]
 8012974:	9307      	strlt	r3, [sp, #28]
 8012976:	bfb8      	it	lt
 8012978:	9204      	strlt	r2, [sp, #16]
 801297a:	7823      	ldrb	r3, [r4, #0]
 801297c:	2b2e      	cmp	r3, #46	@ 0x2e
 801297e:	d10a      	bne.n	8012996 <_vfiprintf_r+0x156>
 8012980:	7863      	ldrb	r3, [r4, #1]
 8012982:	2b2a      	cmp	r3, #42	@ 0x2a
 8012984:	d132      	bne.n	80129ec <_vfiprintf_r+0x1ac>
 8012986:	9b03      	ldr	r3, [sp, #12]
 8012988:	1d1a      	adds	r2, r3, #4
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	9203      	str	r2, [sp, #12]
 801298e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012992:	3402      	adds	r4, #2
 8012994:	9305      	str	r3, [sp, #20]
 8012996:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012a6c <_vfiprintf_r+0x22c>
 801299a:	7821      	ldrb	r1, [r4, #0]
 801299c:	2203      	movs	r2, #3
 801299e:	4650      	mov	r0, sl
 80129a0:	f7ed fc46 	bl	8000230 <memchr>
 80129a4:	b138      	cbz	r0, 80129b6 <_vfiprintf_r+0x176>
 80129a6:	9b04      	ldr	r3, [sp, #16]
 80129a8:	eba0 000a 	sub.w	r0, r0, sl
 80129ac:	2240      	movs	r2, #64	@ 0x40
 80129ae:	4082      	lsls	r2, r0
 80129b0:	4313      	orrs	r3, r2
 80129b2:	3401      	adds	r4, #1
 80129b4:	9304      	str	r3, [sp, #16]
 80129b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129ba:	4829      	ldr	r0, [pc, #164]	@ (8012a60 <_vfiprintf_r+0x220>)
 80129bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80129c0:	2206      	movs	r2, #6
 80129c2:	f7ed fc35 	bl	8000230 <memchr>
 80129c6:	2800      	cmp	r0, #0
 80129c8:	d03f      	beq.n	8012a4a <_vfiprintf_r+0x20a>
 80129ca:	4b26      	ldr	r3, [pc, #152]	@ (8012a64 <_vfiprintf_r+0x224>)
 80129cc:	bb1b      	cbnz	r3, 8012a16 <_vfiprintf_r+0x1d6>
 80129ce:	9b03      	ldr	r3, [sp, #12]
 80129d0:	3307      	adds	r3, #7
 80129d2:	f023 0307 	bic.w	r3, r3, #7
 80129d6:	3308      	adds	r3, #8
 80129d8:	9303      	str	r3, [sp, #12]
 80129da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129dc:	443b      	add	r3, r7
 80129de:	9309      	str	r3, [sp, #36]	@ 0x24
 80129e0:	e76a      	b.n	80128b8 <_vfiprintf_r+0x78>
 80129e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80129e6:	460c      	mov	r4, r1
 80129e8:	2001      	movs	r0, #1
 80129ea:	e7a8      	b.n	801293e <_vfiprintf_r+0xfe>
 80129ec:	2300      	movs	r3, #0
 80129ee:	3401      	adds	r4, #1
 80129f0:	9305      	str	r3, [sp, #20]
 80129f2:	4619      	mov	r1, r3
 80129f4:	f04f 0c0a 	mov.w	ip, #10
 80129f8:	4620      	mov	r0, r4
 80129fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80129fe:	3a30      	subs	r2, #48	@ 0x30
 8012a00:	2a09      	cmp	r2, #9
 8012a02:	d903      	bls.n	8012a0c <_vfiprintf_r+0x1cc>
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d0c6      	beq.n	8012996 <_vfiprintf_r+0x156>
 8012a08:	9105      	str	r1, [sp, #20]
 8012a0a:	e7c4      	b.n	8012996 <_vfiprintf_r+0x156>
 8012a0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012a10:	4604      	mov	r4, r0
 8012a12:	2301      	movs	r3, #1
 8012a14:	e7f0      	b.n	80129f8 <_vfiprintf_r+0x1b8>
 8012a16:	ab03      	add	r3, sp, #12
 8012a18:	9300      	str	r3, [sp, #0]
 8012a1a:	462a      	mov	r2, r5
 8012a1c:	4b12      	ldr	r3, [pc, #72]	@ (8012a68 <_vfiprintf_r+0x228>)
 8012a1e:	a904      	add	r1, sp, #16
 8012a20:	4630      	mov	r0, r6
 8012a22:	f7fc fa15 	bl	800ee50 <_printf_float>
 8012a26:	4607      	mov	r7, r0
 8012a28:	1c78      	adds	r0, r7, #1
 8012a2a:	d1d6      	bne.n	80129da <_vfiprintf_r+0x19a>
 8012a2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012a2e:	07d9      	lsls	r1, r3, #31
 8012a30:	d405      	bmi.n	8012a3e <_vfiprintf_r+0x1fe>
 8012a32:	89ab      	ldrh	r3, [r5, #12]
 8012a34:	059a      	lsls	r2, r3, #22
 8012a36:	d402      	bmi.n	8012a3e <_vfiprintf_r+0x1fe>
 8012a38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012a3a:	f7fd fdd4 	bl	80105e6 <__retarget_lock_release_recursive>
 8012a3e:	89ab      	ldrh	r3, [r5, #12]
 8012a40:	065b      	lsls	r3, r3, #25
 8012a42:	f53f af1f 	bmi.w	8012884 <_vfiprintf_r+0x44>
 8012a46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012a48:	e71e      	b.n	8012888 <_vfiprintf_r+0x48>
 8012a4a:	ab03      	add	r3, sp, #12
 8012a4c:	9300      	str	r3, [sp, #0]
 8012a4e:	462a      	mov	r2, r5
 8012a50:	4b05      	ldr	r3, [pc, #20]	@ (8012a68 <_vfiprintf_r+0x228>)
 8012a52:	a904      	add	r1, sp, #16
 8012a54:	4630      	mov	r0, r6
 8012a56:	f7fc fc93 	bl	800f380 <_printf_i>
 8012a5a:	e7e4      	b.n	8012a26 <_vfiprintf_r+0x1e6>
 8012a5c:	08014727 	.word	0x08014727
 8012a60:	08014731 	.word	0x08014731
 8012a64:	0800ee51 	.word	0x0800ee51
 8012a68:	0801281b 	.word	0x0801281b
 8012a6c:	0801472d 	.word	0x0801472d

08012a70 <_getc_r>:
 8012a70:	b538      	push	{r3, r4, r5, lr}
 8012a72:	460c      	mov	r4, r1
 8012a74:	4605      	mov	r5, r0
 8012a76:	b118      	cbz	r0, 8012a80 <_getc_r+0x10>
 8012a78:	6a03      	ldr	r3, [r0, #32]
 8012a7a:	b90b      	cbnz	r3, 8012a80 <_getc_r+0x10>
 8012a7c:	f7fd f9a8 	bl	800fdd0 <__sinit>
 8012a80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012a82:	07d8      	lsls	r0, r3, #31
 8012a84:	d405      	bmi.n	8012a92 <_getc_r+0x22>
 8012a86:	89a3      	ldrh	r3, [r4, #12]
 8012a88:	0599      	lsls	r1, r3, #22
 8012a8a:	d402      	bmi.n	8012a92 <_getc_r+0x22>
 8012a8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012a8e:	f7fd fda9 	bl	80105e4 <__retarget_lock_acquire_recursive>
 8012a92:	6863      	ldr	r3, [r4, #4]
 8012a94:	3b01      	subs	r3, #1
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	6063      	str	r3, [r4, #4]
 8012a9a:	da0f      	bge.n	8012abc <_getc_r+0x4c>
 8012a9c:	4628      	mov	r0, r5
 8012a9e:	4621      	mov	r1, r4
 8012aa0:	f000 f8a7 	bl	8012bf2 <__srget_r>
 8012aa4:	4605      	mov	r5, r0
 8012aa6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012aa8:	07da      	lsls	r2, r3, #31
 8012aaa:	d405      	bmi.n	8012ab8 <_getc_r+0x48>
 8012aac:	89a3      	ldrh	r3, [r4, #12]
 8012aae:	059b      	lsls	r3, r3, #22
 8012ab0:	d402      	bmi.n	8012ab8 <_getc_r+0x48>
 8012ab2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012ab4:	f7fd fd97 	bl	80105e6 <__retarget_lock_release_recursive>
 8012ab8:	4628      	mov	r0, r5
 8012aba:	bd38      	pop	{r3, r4, r5, pc}
 8012abc:	6823      	ldr	r3, [r4, #0]
 8012abe:	1c5a      	adds	r2, r3, #1
 8012ac0:	6022      	str	r2, [r4, #0]
 8012ac2:	781d      	ldrb	r5, [r3, #0]
 8012ac4:	e7ef      	b.n	8012aa6 <_getc_r+0x36>

08012ac6 <__swhatbuf_r>:
 8012ac6:	b570      	push	{r4, r5, r6, lr}
 8012ac8:	460c      	mov	r4, r1
 8012aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ace:	2900      	cmp	r1, #0
 8012ad0:	b096      	sub	sp, #88	@ 0x58
 8012ad2:	4615      	mov	r5, r2
 8012ad4:	461e      	mov	r6, r3
 8012ad6:	da0d      	bge.n	8012af4 <__swhatbuf_r+0x2e>
 8012ad8:	89a3      	ldrh	r3, [r4, #12]
 8012ada:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012ade:	f04f 0100 	mov.w	r1, #0
 8012ae2:	bf14      	ite	ne
 8012ae4:	2340      	movne	r3, #64	@ 0x40
 8012ae6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012aea:	2000      	movs	r0, #0
 8012aec:	6031      	str	r1, [r6, #0]
 8012aee:	602b      	str	r3, [r5, #0]
 8012af0:	b016      	add	sp, #88	@ 0x58
 8012af2:	bd70      	pop	{r4, r5, r6, pc}
 8012af4:	466a      	mov	r2, sp
 8012af6:	f000 f8df 	bl	8012cb8 <_fstat_r>
 8012afa:	2800      	cmp	r0, #0
 8012afc:	dbec      	blt.n	8012ad8 <__swhatbuf_r+0x12>
 8012afe:	9901      	ldr	r1, [sp, #4]
 8012b00:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012b04:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012b08:	4259      	negs	r1, r3
 8012b0a:	4159      	adcs	r1, r3
 8012b0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012b10:	e7eb      	b.n	8012aea <__swhatbuf_r+0x24>

08012b12 <__smakebuf_r>:
 8012b12:	898b      	ldrh	r3, [r1, #12]
 8012b14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012b16:	079d      	lsls	r5, r3, #30
 8012b18:	4606      	mov	r6, r0
 8012b1a:	460c      	mov	r4, r1
 8012b1c:	d507      	bpl.n	8012b2e <__smakebuf_r+0x1c>
 8012b1e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012b22:	6023      	str	r3, [r4, #0]
 8012b24:	6123      	str	r3, [r4, #16]
 8012b26:	2301      	movs	r3, #1
 8012b28:	6163      	str	r3, [r4, #20]
 8012b2a:	b003      	add	sp, #12
 8012b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b2e:	ab01      	add	r3, sp, #4
 8012b30:	466a      	mov	r2, sp
 8012b32:	f7ff ffc8 	bl	8012ac6 <__swhatbuf_r>
 8012b36:	9f00      	ldr	r7, [sp, #0]
 8012b38:	4605      	mov	r5, r0
 8012b3a:	4639      	mov	r1, r7
 8012b3c:	4630      	mov	r0, r6
 8012b3e:	f7fb f9a7 	bl	800de90 <_malloc_r>
 8012b42:	b948      	cbnz	r0, 8012b58 <__smakebuf_r+0x46>
 8012b44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b48:	059a      	lsls	r2, r3, #22
 8012b4a:	d4ee      	bmi.n	8012b2a <__smakebuf_r+0x18>
 8012b4c:	f023 0303 	bic.w	r3, r3, #3
 8012b50:	f043 0302 	orr.w	r3, r3, #2
 8012b54:	81a3      	strh	r3, [r4, #12]
 8012b56:	e7e2      	b.n	8012b1e <__smakebuf_r+0xc>
 8012b58:	89a3      	ldrh	r3, [r4, #12]
 8012b5a:	6020      	str	r0, [r4, #0]
 8012b5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012b60:	81a3      	strh	r3, [r4, #12]
 8012b62:	9b01      	ldr	r3, [sp, #4]
 8012b64:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012b68:	b15b      	cbz	r3, 8012b82 <__smakebuf_r+0x70>
 8012b6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012b6e:	4630      	mov	r0, r6
 8012b70:	f000 f8b4 	bl	8012cdc <_isatty_r>
 8012b74:	b128      	cbz	r0, 8012b82 <__smakebuf_r+0x70>
 8012b76:	89a3      	ldrh	r3, [r4, #12]
 8012b78:	f023 0303 	bic.w	r3, r3, #3
 8012b7c:	f043 0301 	orr.w	r3, r3, #1
 8012b80:	81a3      	strh	r3, [r4, #12]
 8012b82:	89a3      	ldrh	r3, [r4, #12]
 8012b84:	431d      	orrs	r5, r3
 8012b86:	81a5      	strh	r5, [r4, #12]
 8012b88:	e7cf      	b.n	8012b2a <__smakebuf_r+0x18>

08012b8a <_putc_r>:
 8012b8a:	b570      	push	{r4, r5, r6, lr}
 8012b8c:	460d      	mov	r5, r1
 8012b8e:	4614      	mov	r4, r2
 8012b90:	4606      	mov	r6, r0
 8012b92:	b118      	cbz	r0, 8012b9c <_putc_r+0x12>
 8012b94:	6a03      	ldr	r3, [r0, #32]
 8012b96:	b90b      	cbnz	r3, 8012b9c <_putc_r+0x12>
 8012b98:	f7fd f91a 	bl	800fdd0 <__sinit>
 8012b9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012b9e:	07d8      	lsls	r0, r3, #31
 8012ba0:	d405      	bmi.n	8012bae <_putc_r+0x24>
 8012ba2:	89a3      	ldrh	r3, [r4, #12]
 8012ba4:	0599      	lsls	r1, r3, #22
 8012ba6:	d402      	bmi.n	8012bae <_putc_r+0x24>
 8012ba8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012baa:	f7fd fd1b 	bl	80105e4 <__retarget_lock_acquire_recursive>
 8012bae:	68a3      	ldr	r3, [r4, #8]
 8012bb0:	3b01      	subs	r3, #1
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	60a3      	str	r3, [r4, #8]
 8012bb6:	da05      	bge.n	8012bc4 <_putc_r+0x3a>
 8012bb8:	69a2      	ldr	r2, [r4, #24]
 8012bba:	4293      	cmp	r3, r2
 8012bbc:	db12      	blt.n	8012be4 <_putc_r+0x5a>
 8012bbe:	b2eb      	uxtb	r3, r5
 8012bc0:	2b0a      	cmp	r3, #10
 8012bc2:	d00f      	beq.n	8012be4 <_putc_r+0x5a>
 8012bc4:	6823      	ldr	r3, [r4, #0]
 8012bc6:	1c5a      	adds	r2, r3, #1
 8012bc8:	6022      	str	r2, [r4, #0]
 8012bca:	701d      	strb	r5, [r3, #0]
 8012bcc:	b2ed      	uxtb	r5, r5
 8012bce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012bd0:	07da      	lsls	r2, r3, #31
 8012bd2:	d405      	bmi.n	8012be0 <_putc_r+0x56>
 8012bd4:	89a3      	ldrh	r3, [r4, #12]
 8012bd6:	059b      	lsls	r3, r3, #22
 8012bd8:	d402      	bmi.n	8012be0 <_putc_r+0x56>
 8012bda:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012bdc:	f7fd fd03 	bl	80105e6 <__retarget_lock_release_recursive>
 8012be0:	4628      	mov	r0, r5
 8012be2:	bd70      	pop	{r4, r5, r6, pc}
 8012be4:	4629      	mov	r1, r5
 8012be6:	4622      	mov	r2, r4
 8012be8:	4630      	mov	r0, r6
 8012bea:	f7fd fa1e 	bl	801002a <__swbuf_r>
 8012bee:	4605      	mov	r5, r0
 8012bf0:	e7ed      	b.n	8012bce <_putc_r+0x44>

08012bf2 <__srget_r>:
 8012bf2:	b538      	push	{r3, r4, r5, lr}
 8012bf4:	460c      	mov	r4, r1
 8012bf6:	4605      	mov	r5, r0
 8012bf8:	b118      	cbz	r0, 8012c02 <__srget_r+0x10>
 8012bfa:	6a03      	ldr	r3, [r0, #32]
 8012bfc:	b90b      	cbnz	r3, 8012c02 <__srget_r+0x10>
 8012bfe:	f7fd f8e7 	bl	800fdd0 <__sinit>
 8012c02:	4621      	mov	r1, r4
 8012c04:	4628      	mov	r0, r5
 8012c06:	f000 f8a3 	bl	8012d50 <__srefill_r>
 8012c0a:	b938      	cbnz	r0, 8012c1c <__srget_r+0x2a>
 8012c0c:	6863      	ldr	r3, [r4, #4]
 8012c0e:	3b01      	subs	r3, #1
 8012c10:	6063      	str	r3, [r4, #4]
 8012c12:	6823      	ldr	r3, [r4, #0]
 8012c14:	1c5a      	adds	r2, r3, #1
 8012c16:	6022      	str	r2, [r4, #0]
 8012c18:	7818      	ldrb	r0, [r3, #0]
 8012c1a:	bd38      	pop	{r3, r4, r5, pc}
 8012c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8012c20:	e7fb      	b.n	8012c1a <__srget_r+0x28>

08012c22 <memmove>:
 8012c22:	4288      	cmp	r0, r1
 8012c24:	b510      	push	{r4, lr}
 8012c26:	eb01 0402 	add.w	r4, r1, r2
 8012c2a:	d902      	bls.n	8012c32 <memmove+0x10>
 8012c2c:	4284      	cmp	r4, r0
 8012c2e:	4623      	mov	r3, r4
 8012c30:	d807      	bhi.n	8012c42 <memmove+0x20>
 8012c32:	1e43      	subs	r3, r0, #1
 8012c34:	42a1      	cmp	r1, r4
 8012c36:	d008      	beq.n	8012c4a <memmove+0x28>
 8012c38:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012c3c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012c40:	e7f8      	b.n	8012c34 <memmove+0x12>
 8012c42:	4402      	add	r2, r0
 8012c44:	4601      	mov	r1, r0
 8012c46:	428a      	cmp	r2, r1
 8012c48:	d100      	bne.n	8012c4c <memmove+0x2a>
 8012c4a:	bd10      	pop	{r4, pc}
 8012c4c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012c50:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012c54:	e7f7      	b.n	8012c46 <memmove+0x24>

08012c56 <_raise_r>:
 8012c56:	291f      	cmp	r1, #31
 8012c58:	b538      	push	{r3, r4, r5, lr}
 8012c5a:	4605      	mov	r5, r0
 8012c5c:	460c      	mov	r4, r1
 8012c5e:	d904      	bls.n	8012c6a <_raise_r+0x14>
 8012c60:	2316      	movs	r3, #22
 8012c62:	6003      	str	r3, [r0, #0]
 8012c64:	f04f 30ff 	mov.w	r0, #4294967295
 8012c68:	bd38      	pop	{r3, r4, r5, pc}
 8012c6a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012c6c:	b112      	cbz	r2, 8012c74 <_raise_r+0x1e>
 8012c6e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012c72:	b94b      	cbnz	r3, 8012c88 <_raise_r+0x32>
 8012c74:	4628      	mov	r0, r5
 8012c76:	f000 f853 	bl	8012d20 <_getpid_r>
 8012c7a:	4622      	mov	r2, r4
 8012c7c:	4601      	mov	r1, r0
 8012c7e:	4628      	mov	r0, r5
 8012c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c84:	f000 b83a 	b.w	8012cfc <_kill_r>
 8012c88:	2b01      	cmp	r3, #1
 8012c8a:	d00a      	beq.n	8012ca2 <_raise_r+0x4c>
 8012c8c:	1c59      	adds	r1, r3, #1
 8012c8e:	d103      	bne.n	8012c98 <_raise_r+0x42>
 8012c90:	2316      	movs	r3, #22
 8012c92:	6003      	str	r3, [r0, #0]
 8012c94:	2001      	movs	r0, #1
 8012c96:	e7e7      	b.n	8012c68 <_raise_r+0x12>
 8012c98:	2100      	movs	r1, #0
 8012c9a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012c9e:	4620      	mov	r0, r4
 8012ca0:	4798      	blx	r3
 8012ca2:	2000      	movs	r0, #0
 8012ca4:	e7e0      	b.n	8012c68 <_raise_r+0x12>
	...

08012ca8 <raise>:
 8012ca8:	4b02      	ldr	r3, [pc, #8]	@ (8012cb4 <raise+0xc>)
 8012caa:	4601      	mov	r1, r0
 8012cac:	6818      	ldr	r0, [r3, #0]
 8012cae:	f7ff bfd2 	b.w	8012c56 <_raise_r>
 8012cb2:	bf00      	nop
 8012cb4:	200001c0 	.word	0x200001c0

08012cb8 <_fstat_r>:
 8012cb8:	b538      	push	{r3, r4, r5, lr}
 8012cba:	4d07      	ldr	r5, [pc, #28]	@ (8012cd8 <_fstat_r+0x20>)
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	4604      	mov	r4, r0
 8012cc0:	4608      	mov	r0, r1
 8012cc2:	4611      	mov	r1, r2
 8012cc4:	602b      	str	r3, [r5, #0]
 8012cc6:	f7f1 fd2b 	bl	8004720 <_fstat>
 8012cca:	1c43      	adds	r3, r0, #1
 8012ccc:	d102      	bne.n	8012cd4 <_fstat_r+0x1c>
 8012cce:	682b      	ldr	r3, [r5, #0]
 8012cd0:	b103      	cbz	r3, 8012cd4 <_fstat_r+0x1c>
 8012cd2:	6023      	str	r3, [r4, #0]
 8012cd4:	bd38      	pop	{r3, r4, r5, pc}
 8012cd6:	bf00      	nop
 8012cd8:	200006a4 	.word	0x200006a4

08012cdc <_isatty_r>:
 8012cdc:	b538      	push	{r3, r4, r5, lr}
 8012cde:	4d06      	ldr	r5, [pc, #24]	@ (8012cf8 <_isatty_r+0x1c>)
 8012ce0:	2300      	movs	r3, #0
 8012ce2:	4604      	mov	r4, r0
 8012ce4:	4608      	mov	r0, r1
 8012ce6:	602b      	str	r3, [r5, #0]
 8012ce8:	f7f1 fd41 	bl	800476e <_isatty>
 8012cec:	1c43      	adds	r3, r0, #1
 8012cee:	d102      	bne.n	8012cf6 <_isatty_r+0x1a>
 8012cf0:	682b      	ldr	r3, [r5, #0]
 8012cf2:	b103      	cbz	r3, 8012cf6 <_isatty_r+0x1a>
 8012cf4:	6023      	str	r3, [r4, #0]
 8012cf6:	bd38      	pop	{r3, r4, r5, pc}
 8012cf8:	200006a4 	.word	0x200006a4

08012cfc <_kill_r>:
 8012cfc:	b538      	push	{r3, r4, r5, lr}
 8012cfe:	4d07      	ldr	r5, [pc, #28]	@ (8012d1c <_kill_r+0x20>)
 8012d00:	2300      	movs	r3, #0
 8012d02:	4604      	mov	r4, r0
 8012d04:	4608      	mov	r0, r1
 8012d06:	4611      	mov	r1, r2
 8012d08:	602b      	str	r3, [r5, #0]
 8012d0a:	f7f1 fc21 	bl	8004550 <_kill>
 8012d0e:	1c43      	adds	r3, r0, #1
 8012d10:	d102      	bne.n	8012d18 <_kill_r+0x1c>
 8012d12:	682b      	ldr	r3, [r5, #0]
 8012d14:	b103      	cbz	r3, 8012d18 <_kill_r+0x1c>
 8012d16:	6023      	str	r3, [r4, #0]
 8012d18:	bd38      	pop	{r3, r4, r5, pc}
 8012d1a:	bf00      	nop
 8012d1c:	200006a4 	.word	0x200006a4

08012d20 <_getpid_r>:
 8012d20:	f7f1 bc0e 	b.w	8004540 <_getpid>

08012d24 <_malloc_usable_size_r>:
 8012d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012d28:	1f18      	subs	r0, r3, #4
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	bfbc      	itt	lt
 8012d2e:	580b      	ldrlt	r3, [r1, r0]
 8012d30:	18c0      	addlt	r0, r0, r3
 8012d32:	4770      	bx	lr

08012d34 <lflush>:
 8012d34:	898b      	ldrh	r3, [r1, #12]
 8012d36:	f003 0309 	and.w	r3, r3, #9
 8012d3a:	2b09      	cmp	r3, #9
 8012d3c:	d103      	bne.n	8012d46 <lflush+0x12>
 8012d3e:	4b03      	ldr	r3, [pc, #12]	@ (8012d4c <lflush+0x18>)
 8012d40:	6818      	ldr	r0, [r3, #0]
 8012d42:	f7fc bf2b 	b.w	800fb9c <_fflush_r>
 8012d46:	2000      	movs	r0, #0
 8012d48:	4770      	bx	lr
 8012d4a:	bf00      	nop
 8012d4c:	200001c0 	.word	0x200001c0

08012d50 <__srefill_r>:
 8012d50:	b570      	push	{r4, r5, r6, lr}
 8012d52:	460c      	mov	r4, r1
 8012d54:	4605      	mov	r5, r0
 8012d56:	b118      	cbz	r0, 8012d60 <__srefill_r+0x10>
 8012d58:	6a03      	ldr	r3, [r0, #32]
 8012d5a:	b90b      	cbnz	r3, 8012d60 <__srefill_r+0x10>
 8012d5c:	f7fd f838 	bl	800fdd0 <__sinit>
 8012d60:	2300      	movs	r3, #0
 8012d62:	6063      	str	r3, [r4, #4]
 8012d64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d68:	069e      	lsls	r6, r3, #26
 8012d6a:	d408      	bmi.n	8012d7e <__srefill_r+0x2e>
 8012d6c:	0758      	lsls	r0, r3, #29
 8012d6e:	d445      	bmi.n	8012dfc <__srefill_r+0xac>
 8012d70:	06d9      	lsls	r1, r3, #27
 8012d72:	d407      	bmi.n	8012d84 <__srefill_r+0x34>
 8012d74:	2209      	movs	r2, #9
 8012d76:	602a      	str	r2, [r5, #0]
 8012d78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012d7c:	81a3      	strh	r3, [r4, #12]
 8012d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8012d82:	bd70      	pop	{r4, r5, r6, pc}
 8012d84:	071a      	lsls	r2, r3, #28
 8012d86:	d50b      	bpl.n	8012da0 <__srefill_r+0x50>
 8012d88:	4621      	mov	r1, r4
 8012d8a:	4628      	mov	r0, r5
 8012d8c:	f7fc ff06 	bl	800fb9c <_fflush_r>
 8012d90:	2800      	cmp	r0, #0
 8012d92:	d1f4      	bne.n	8012d7e <__srefill_r+0x2e>
 8012d94:	89a3      	ldrh	r3, [r4, #12]
 8012d96:	60a0      	str	r0, [r4, #8]
 8012d98:	f023 0308 	bic.w	r3, r3, #8
 8012d9c:	81a3      	strh	r3, [r4, #12]
 8012d9e:	61a0      	str	r0, [r4, #24]
 8012da0:	89a3      	ldrh	r3, [r4, #12]
 8012da2:	f043 0304 	orr.w	r3, r3, #4
 8012da6:	81a3      	strh	r3, [r4, #12]
 8012da8:	6923      	ldr	r3, [r4, #16]
 8012daa:	b91b      	cbnz	r3, 8012db4 <__srefill_r+0x64>
 8012dac:	4621      	mov	r1, r4
 8012dae:	4628      	mov	r0, r5
 8012db0:	f7ff feaf 	bl	8012b12 <__smakebuf_r>
 8012db4:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8012db8:	07b3      	lsls	r3, r6, #30
 8012dba:	d00f      	beq.n	8012ddc <__srefill_r+0x8c>
 8012dbc:	2301      	movs	r3, #1
 8012dbe:	4a1b      	ldr	r2, [pc, #108]	@ (8012e2c <__srefill_r+0xdc>)
 8012dc0:	491b      	ldr	r1, [pc, #108]	@ (8012e30 <__srefill_r+0xe0>)
 8012dc2:	481c      	ldr	r0, [pc, #112]	@ (8012e34 <__srefill_r+0xe4>)
 8012dc4:	81a3      	strh	r3, [r4, #12]
 8012dc6:	f7fd f82d 	bl	800fe24 <_fwalk_sglue>
 8012dca:	81a6      	strh	r6, [r4, #12]
 8012dcc:	f006 0609 	and.w	r6, r6, #9
 8012dd0:	2e09      	cmp	r6, #9
 8012dd2:	d103      	bne.n	8012ddc <__srefill_r+0x8c>
 8012dd4:	4621      	mov	r1, r4
 8012dd6:	4628      	mov	r0, r5
 8012dd8:	f7fc fe5c 	bl	800fa94 <__sflush_r>
 8012ddc:	6922      	ldr	r2, [r4, #16]
 8012dde:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8012de0:	6963      	ldr	r3, [r4, #20]
 8012de2:	6a21      	ldr	r1, [r4, #32]
 8012de4:	6022      	str	r2, [r4, #0]
 8012de6:	4628      	mov	r0, r5
 8012de8:	47b0      	blx	r6
 8012dea:	2800      	cmp	r0, #0
 8012dec:	6060      	str	r0, [r4, #4]
 8012dee:	dc17      	bgt.n	8012e20 <__srefill_r+0xd0>
 8012df0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012df4:	d116      	bne.n	8012e24 <__srefill_r+0xd4>
 8012df6:	f043 0320 	orr.w	r3, r3, #32
 8012dfa:	e7bf      	b.n	8012d7c <__srefill_r+0x2c>
 8012dfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012dfe:	2900      	cmp	r1, #0
 8012e00:	d0d2      	beq.n	8012da8 <__srefill_r+0x58>
 8012e02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012e06:	4299      	cmp	r1, r3
 8012e08:	d002      	beq.n	8012e10 <__srefill_r+0xc0>
 8012e0a:	4628      	mov	r0, r5
 8012e0c:	f7fe fa6c 	bl	80112e8 <_free_r>
 8012e10:	2300      	movs	r3, #0
 8012e12:	6363      	str	r3, [r4, #52]	@ 0x34
 8012e14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012e16:	6063      	str	r3, [r4, #4]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d0c5      	beq.n	8012da8 <__srefill_r+0x58>
 8012e1c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8012e1e:	6023      	str	r3, [r4, #0]
 8012e20:	2000      	movs	r0, #0
 8012e22:	e7ae      	b.n	8012d82 <__srefill_r+0x32>
 8012e24:	2200      	movs	r2, #0
 8012e26:	6062      	str	r2, [r4, #4]
 8012e28:	e7a6      	b.n	8012d78 <__srefill_r+0x28>
 8012e2a:	bf00      	nop
 8012e2c:	20000048 	.word	0x20000048
 8012e30:	08012d35 	.word	0x08012d35
 8012e34:	200001c4 	.word	0x200001c4

08012e38 <_init>:
 8012e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e3a:	bf00      	nop
 8012e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e3e:	bc08      	pop	{r3}
 8012e40:	469e      	mov	lr, r3
 8012e42:	4770      	bx	lr

08012e44 <_fini>:
 8012e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e46:	bf00      	nop
 8012e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e4a:	bc08      	pop	{r3}
 8012e4c:	469e      	mov	lr, r3
 8012e4e:	4770      	bx	lr
