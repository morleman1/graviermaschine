
stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001070c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a18  080108e0  080108e0  000118e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080112f8  080112f8  000131dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080112f8  080112f8  000122f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011300  08011300  000131dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08011300  08011300  00012300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011308  08011308  00012308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0801130c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  200001dc  080114e8  000131dc  2**2
                  ALLOC
 10 ._user_heap_stack 00038004  200006fc  080114e8  000136fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000131dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b47  00000000  00000000  0001320c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000378d  00000000  00000000  0002cd53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  000304e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001167  00000000  00000000  00031ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000043d3  00000000  00000000  00032c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e8dc  00000000  00000000  00037022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001064ed  00000000  00000000  000558fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015bdeb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007354  00000000  00000000  0015be30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00163184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080108c4 	.word	0x080108c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	080108c4 	.word	0x080108c4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <start_tim1>:
        printf("FAIL\r\n");
    }
    return result;
}

void start_tim1(int pulses) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
    int current_pulses = (pulses >= 65535) ? 65535 : pulses;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800106e:	4293      	cmp	r3, r2
 8001070:	bfa8      	it	ge
 8001072:	4613      	movge	r3, r2
 8001074:	60fb      	str	r3, [r7, #12]
    StepperContext.remaining_pulses = pulses - current_pulses;
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	4a1a      	ldr	r2, [pc, #104]	@ (80010e8 <start_tim1+0x88>)
 800107e:	6193      	str	r3, [r2, #24]
    if (current_pulses != 1) {
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d025      	beq.n	80010d2 <start_tim1+0x72>
        HAL_TIM_OnePulse_Stop_IT(StepperContext.htim1, TIM_CHANNEL_1);
 8001086:	4b18      	ldr	r3, [pc, #96]	@ (80010e8 <start_tim1+0x88>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f004 fead 	bl	8005dec <HAL_TIM_OnePulse_Stop_IT>
        __HAL_TIM_SET_AUTORELOAD(StepperContext.htim1, current_pulses);
 8001092:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <start_tim1+0x88>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	68fa      	ldr	r2, [r7, #12]
 800109a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800109c:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <start_tim1+0x88>)
 800109e:	69db      	ldr	r3, [r3, #28]
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	60da      	str	r2, [r3, #12]
        HAL_TIM_GenerateEvent(StepperContext.htim1, TIM_EVENTSOURCE_UPDATE);
 80010a4:	4b10      	ldr	r3, [pc, #64]	@ (80010e8 <start_tim1+0x88>)
 80010a6:	69db      	ldr	r3, [r3, #28]
 80010a8:	2101      	movs	r1, #1
 80010aa:	4618      	mov	r0, r3
 80010ac:	f005 fc4a 	bl	8006944 <HAL_TIM_GenerateEvent>
        HAL_TIM_OnePulse_Start_IT(StepperContext.htim1, TIM_CHANNEL_1);
 80010b0:	4b0d      	ldr	r3, [pc, #52]	@ (80010e8 <start_tim1+0x88>)
 80010b2:	69db      	ldr	r3, [r3, #28]
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f004 fe26 	bl	8005d08 <HAL_TIM_OnePulse_Start_IT>
        __HAL_TIM_ENABLE(StepperContext.htim1);
 80010bc:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <start_tim1+0x88>)
 80010be:	69db      	ldr	r3, [r3, #28]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b08      	ldr	r3, [pc, #32]	@ (80010e8 <start_tim1+0x88>)
 80010c6:	69db      	ldr	r3, [r3, #28]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f042 0201 	orr.w	r2, r2, #1
 80010ce:	601a      	str	r2, [r3, #0]
    } else {
        StepperContext.done_callback(StepperContext.h);
    }
}
 80010d0:	e005      	b.n	80010de <start_tim1+0x7e>
        StepperContext.done_callback(StepperContext.h);
 80010d2:	4b05      	ldr	r3, [pc, #20]	@ (80010e8 <start_tim1+0x88>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	4a04      	ldr	r2, [pc, #16]	@ (80010e8 <start_tim1+0x88>)
 80010d8:	6812      	ldr	r2, [r2, #0]
 80010da:	4610      	mov	r0, r2
 80010dc:	4798      	blx	r3
}
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200001f8 	.word	0x200001f8

080010ec <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef* htim) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
    if ((StepperContext.done_callback != 0) && ((htim->Instance->SR & (1 << 2)) == 0)) {
 80010f4:	4b10      	ldr	r3, [pc, #64]	@ (8001138 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 80010f6:	695b      	ldr	r3, [r3, #20]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d019      	beq.n	8001130 <HAL_TIM_PWM_PulseFinishedCallback+0x44>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	2b00      	cmp	r3, #0
 8001108:	d112      	bne.n	8001130 <HAL_TIM_PWM_PulseFinishedCallback+0x44>
        if (StepperContext.remaining_pulses > 0) {
 800110a:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	2b00      	cmp	r3, #0
 8001110:	dd05      	ble.n	800111e <HAL_TIM_PWM_PulseFinishedCallback+0x32>
            start_tim1(StepperContext.remaining_pulses);
 8001112:	4b09      	ldr	r3, [pc, #36]	@ (8001138 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ffa2 	bl	8001060 <start_tim1>
        } else {
            StepperContext.done_callback(StepperContext.h);
            StepperContext.is_running = 0;
        }
    }
}
 800111c:	e008      	b.n	8001130 <HAL_TIM_PWM_PulseFinishedCallback+0x44>
            StepperContext.done_callback(StepperContext.h);
 800111e:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	4a05      	ldr	r2, [pc, #20]	@ (8001138 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8001124:	6812      	ldr	r2, [r2, #0]
 8001126:	4610      	mov	r0, r2
 8001128:	4798      	blx	r3
            StepperContext.is_running = 0;
 800112a:	4b03      	ldr	r3, [pc, #12]	@ (8001138 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	60da      	str	r2, [r3, #12]
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200001f8 	.word	0x200001f8

0800113c <vApplicationMallocFailedHook>:
void InitTask();


extern void initialise_stdlib_abstraction(void);
void vApplicationMallocFailedHook(void)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8001142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001146:	b672      	cpsid	i
 8001148:	f383 8811 	msr	BASEPRI, r3
 800114c:	f3bf 8f6f 	isb	sy
 8001150:	f3bf 8f4f 	dsb	sy
 8001154:	b662      	cpsie	i
 8001156:	607b      	str	r3, [r7, #4]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8001158:	bf00      	nop
  taskDISABLE_INTERRUPTS();
  __asm volatile("bkpt #0");
 800115a:	be00      	bkpt	0x0000
  for (;;)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <vApplicationMallocFailedHook+0x20>

08001160 <vApplicationStackOverflowHook>:
    ;
  }
}
/*-----------------------------------------------------------*/
void vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
    __asm volatile
 800116a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800116e:	b672      	cpsid	i
 8001170:	f383 8811 	msr	BASEPRI, r3
 8001174:	f3bf 8f6f 	isb	sy
 8001178:	f3bf 8f4f 	dsb	sy
 800117c:	b662      	cpsie	i
 800117e:	60fb      	str	r3, [r7, #12]
}
 8001180:	bf00      	nop
  (void)pcTaskName;
  (void)pxTask;

  taskDISABLE_INTERRUPTS();
  __asm volatile("bkpt #0");
 8001182:	be00      	bkpt	0x0000
  for (;;)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <vApplicationStackOverflowHook+0x24>

08001188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800118c:	f000 fc38 	bl	8001a00 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001190:	f001 f923 	bl	80023da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001194:	f000 f816 	bl	80011c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001198:	f000 faae 	bl	80016f8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800119c:	f000 f878 	bl	8001290 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80011a0:	f000 fa7a 	bl	8001698 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80011a4:	f000 f968 	bl	8001478 <MX_TIM2_Init>
  MX_TIM1_Init();
 80011a8:	f000 f8b0 	bl	800130c <MX_TIM1_Init>
  MX_TIM4_Init();
 80011ac:	f000 f9e6 	bl	800157c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */


  printf("System init start\r\n");
 80011b0:	4803      	ldr	r0, [pc, #12]	@ (80011c0 <main+0x38>)
 80011b2:	f00c fee3 	bl	800df7c <puts>

  //(void)CapabilityFunc;

  //InitTask();
  vTaskStartScheduler();
 80011b6:	f009 f94d 	bl	800a454 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011ba:	bf00      	nop
 80011bc:	e7fd      	b.n	80011ba <main+0x32>
 80011be:	bf00      	nop
 80011c0:	0801096c 	.word	0x0801096c

080011c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b094      	sub	sp, #80	@ 0x50
 80011c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ca:	f107 0320 	add.w	r3, r7, #32
 80011ce:	2230      	movs	r2, #48	@ 0x30
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f00c ffd4 	bl	800e180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e8:	4b27      	ldr	r3, [pc, #156]	@ (8001288 <SystemClock_Config+0xc4>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ec:	4a26      	ldr	r2, [pc, #152]	@ (8001288 <SystemClock_Config+0xc4>)
 80011ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011f4:	4b24      	ldr	r3, [pc, #144]	@ (8001288 <SystemClock_Config+0xc4>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001200:	4b22      	ldr	r3, [pc, #136]	@ (800128c <SystemClock_Config+0xc8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a21      	ldr	r2, [pc, #132]	@ (800128c <SystemClock_Config+0xc8>)
 8001206:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	4b1f      	ldr	r3, [pc, #124]	@ (800128c <SystemClock_Config+0xc8>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001218:	2302      	movs	r3, #2
 800121a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800121c:	2301      	movs	r3, #1
 800121e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001220:	2310      	movs	r3, #16
 8001222:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001224:	2302      	movs	r3, #2
 8001226:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001228:	2300      	movs	r3, #0
 800122a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800122c:	2308      	movs	r3, #8
 800122e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001230:	23b4      	movs	r3, #180	@ 0xb4
 8001232:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001234:	2302      	movs	r3, #2
 8001236:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001238:	2302      	movs	r3, #2
 800123a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123c:	f107 0320 	add.w	r3, r7, #32
 8001240:	4618      	mov	r0, r3
 8001242:	f001 ffb3 	bl	80031ac <HAL_RCC_OscConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800124c:	f000 fc17 	bl	8001a7e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001250:	230f      	movs	r3, #15
 8001252:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001254:	2302      	movs	r3, #2
 8001256:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800125c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001260:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001262:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001266:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	2105      	movs	r1, #5
 800126e:	4618      	mov	r0, r3
 8001270:	f002 faf6 	bl	8003860 <HAL_RCC_ClockConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800127a:	f000 fc00 	bl	8001a7e <Error_Handler>
  }
}
 800127e:	bf00      	nop
 8001280:	3750      	adds	r7, #80	@ 0x50
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	40007000 	.word	0x40007000

08001290 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001294:	4b1b      	ldr	r3, [pc, #108]	@ (8001304 <MX_SPI1_Init+0x74>)
 8001296:	4a1c      	ldr	r2, [pc, #112]	@ (8001308 <MX_SPI1_Init+0x78>)
 8001298:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800129a:	4b1a      	ldr	r3, [pc, #104]	@ (8001304 <MX_SPI1_Init+0x74>)
 800129c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012a2:	4b18      	ldr	r3, [pc, #96]	@ (8001304 <MX_SPI1_Init+0x74>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012a8:	4b16      	ldr	r3, [pc, #88]	@ (8001304 <MX_SPI1_Init+0x74>)
 80012aa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80012ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80012b0:	4b14      	ldr	r3, [pc, #80]	@ (8001304 <MX_SPI1_Init+0x74>)
 80012b2:	2202      	movs	r2, #2
 80012b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80012b6:	4b13      	ldr	r3, [pc, #76]	@ (8001304 <MX_SPI1_Init+0x74>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012bc:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <MX_SPI1_Init+0x74>)
 80012be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <MX_SPI1_Init+0x74>)
 80012c6:	2220      	movs	r2, #32
 80012c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <MX_SPI1_Init+0x74>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <MX_SPI1_Init+0x74>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <MX_SPI1_Init+0x74>)
 80012d8:	2200      	movs	r2, #0
 80012da:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012dc:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <MX_SPI1_Init+0x74>)
 80012de:	2207      	movs	r2, #7
 80012e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012e2:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <MX_SPI1_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80012e8:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <MX_SPI1_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012ee:	4805      	ldr	r0, [pc, #20]	@ (8001304 <MX_SPI1_Init+0x74>)
 80012f0:	f003 fd3c 	bl	8004d6c <HAL_SPI_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80012fa:	f000 fbc0 	bl	8001a7e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000220 	.word	0x20000220
 8001308:	40013000 	.word	0x40013000

0800130c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b09a      	sub	sp, #104	@ 0x68
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001312:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
 8001320:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001322:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800132e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	611a      	str	r2, [r3, #16]
 800133e:	615a      	str	r2, [r3, #20]
 8001340:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001342:	463b      	mov	r3, r7
 8001344:	222c      	movs	r2, #44	@ 0x2c
 8001346:	2100      	movs	r1, #0
 8001348:	4618      	mov	r0, r3
 800134a:	f00c ff19 	bl	800e180 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800134e:	4b48      	ldr	r3, [pc, #288]	@ (8001470 <MX_TIM1_Init+0x164>)
 8001350:	4a48      	ldr	r2, [pc, #288]	@ (8001474 <MX_TIM1_Init+0x168>)
 8001352:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001354:	4b46      	ldr	r3, [pc, #280]	@ (8001470 <MX_TIM1_Init+0x164>)
 8001356:	2200      	movs	r2, #0
 8001358:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135a:	4b45      	ldr	r3, [pc, #276]	@ (8001470 <MX_TIM1_Init+0x164>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001360:	4b43      	ldr	r3, [pc, #268]	@ (8001470 <MX_TIM1_Init+0x164>)
 8001362:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001366:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001368:	4b41      	ldr	r3, [pc, #260]	@ (8001470 <MX_TIM1_Init+0x164>)
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800136e:	4b40      	ldr	r3, [pc, #256]	@ (8001470 <MX_TIM1_Init+0x164>)
 8001370:	2200      	movs	r2, #0
 8001372:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001374:	4b3e      	ldr	r3, [pc, #248]	@ (8001470 <MX_TIM1_Init+0x164>)
 8001376:	2200      	movs	r2, #0
 8001378:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800137a:	483d      	ldr	r0, [pc, #244]	@ (8001470 <MX_TIM1_Init+0x164>)
 800137c:	f004 f822 	bl	80053c4 <HAL_TIM_Base_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001386:	f000 fb7a 	bl	8001a7e <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800138a:	4839      	ldr	r0, [pc, #228]	@ (8001470 <MX_TIM1_Init+0x164>)
 800138c:	f004 f93a 	bl	8005604 <HAL_TIM_OC_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001396:	f000 fb72 	bl	8001a7e <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 800139a:	2108      	movs	r1, #8
 800139c:	4834      	ldr	r0, [pc, #208]	@ (8001470 <MX_TIM1_Init+0x164>)
 800139e:	f004 fb85 	bl	8005aac <HAL_TIM_OnePulse_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 80013a8:	f000 fb69 	bl	8001a7e <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80013ac:	2307      	movs	r3, #7
 80013ae:	657b      	str	r3, [r7, #84]	@ 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 80013b0:	2330      	movs	r3, #48	@ 0x30
 80013b2:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80013b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013b8:	4619      	mov	r1, r3
 80013ba:	482d      	ldr	r0, [pc, #180]	@ (8001470 <MX_TIM1_Init+0x164>)
 80013bc:	f005 feac 	bl	8007118 <HAL_TIM_SlaveConfigSynchro>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80013c6:	f000 fb5a 	bl	8001a7e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80013ca:	2310      	movs	r3, #16
 80013cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_ENABLE;
 80013ce:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80013d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013d8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80013dc:	4619      	mov	r1, r3
 80013de:	4824      	ldr	r0, [pc, #144]	@ (8001470 <MX_TIM1_Init+0x164>)
 80013e0:	f006 fea2 	bl	8008128 <HAL_TIMEx_MasterConfigSynchronization>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 80013ea:	f000 fb48 	bl	8001a7e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f6:	2300      	movs	r3, #0
 80013f8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013fa:	2300      	movs	r3, #0
 80013fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013fe:	2300      	movs	r3, #0
 8001400:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001402:	2300      	movs	r3, #0
 8001404:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001406:	2300      	movs	r3, #0
 8001408:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800140a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800140e:	2200      	movs	r2, #0
 8001410:	4619      	mov	r1, r3
 8001412:	4817      	ldr	r0, [pc, #92]	@ (8001470 <MX_TIM1_Init+0x164>)
 8001414:	f004 fe6e 	bl	80060f4 <HAL_TIM_OC_ConfigChannel>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800141e:	f000 fb2e 	bl	8001a7e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001436:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800143a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001444:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001448:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001452:	463b      	mov	r3, r7
 8001454:	4619      	mov	r1, r3
 8001456:	4806      	ldr	r0, [pc, #24]	@ (8001470 <MX_TIM1_Init+0x164>)
 8001458:	f006 ffbe 	bl	80083d8 <HAL_TIMEx_ConfigBreakDeadTime>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001462:	f000 fb0c 	bl	8001a7e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	3768      	adds	r7, #104	@ 0x68
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000284 	.word	0x20000284
 8001474:	40010000 	.word	0x40010000

08001478 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08e      	sub	sp, #56	@ 0x38
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800147e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800148c:	f107 031c 	add.w	r3, r7, #28
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001498:	463b      	mov	r3, r7
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	611a      	str	r2, [r3, #16]
 80014a6:	615a      	str	r2, [r3, #20]
 80014a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014aa:	4b33      	ldr	r3, [pc, #204]	@ (8001578 <MX_TIM2_Init+0x100>)
 80014ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014b2:	4b31      	ldr	r3, [pc, #196]	@ (8001578 <MX_TIM2_Init+0x100>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001578 <MX_TIM2_Init+0x100>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4499;
 80014be:	4b2e      	ldr	r3, [pc, #184]	@ (8001578 <MX_TIM2_Init+0x100>)
 80014c0:	f241 1293 	movw	r2, #4499	@ 0x1193
 80014c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001578 <MX_TIM2_Init+0x100>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001578 <MX_TIM2_Init+0x100>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014d2:	4829      	ldr	r0, [pc, #164]	@ (8001578 <MX_TIM2_Init+0x100>)
 80014d4:	f003 ff76 	bl	80053c4 <HAL_TIM_Base_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80014de:	f000 face 	bl	8001a7e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014ec:	4619      	mov	r1, r3
 80014ee:	4822      	ldr	r0, [pc, #136]	@ (8001578 <MX_TIM2_Init+0x100>)
 80014f0:	f005 fac0 	bl	8006a74 <HAL_TIM_ConfigClockSource>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80014fa:	f000 fac0 	bl	8001a7e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014fe:	481e      	ldr	r0, [pc, #120]	@ (8001578 <MX_TIM2_Init+0x100>)
 8001500:	f004 f9aa 	bl	8005858 <HAL_TIM_PWM_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800150a:	f000 fab8 	bl	8001a7e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001512:	2300      	movs	r3, #0
 8001514:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	4619      	mov	r1, r3
 800151c:	4816      	ldr	r0, [pc, #88]	@ (8001578 <MX_TIM2_Init+0x100>)
 800151e:	f006 fe03 	bl	8008128 <HAL_TIMEx_MasterConfigSynchronization>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001528:	f000 faa9 	bl	8001a7e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800152c:	2360      	movs	r3, #96	@ 0x60
 800152e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001534:	2300      	movs	r3, #0
 8001536:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800153c:	463b      	mov	r3, r7
 800153e:	2208      	movs	r2, #8
 8001540:	4619      	mov	r1, r3
 8001542:	480d      	ldr	r0, [pc, #52]	@ (8001578 <MX_TIM2_Init+0x100>)
 8001544:	f004 ff96 	bl	8006474 <HAL_TIM_PWM_ConfigChannel>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800154e:	f000 fa96 	bl	8001a7e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001552:	463b      	mov	r3, r7
 8001554:	220c      	movs	r2, #12
 8001556:	4619      	mov	r1, r3
 8001558:	4807      	ldr	r0, [pc, #28]	@ (8001578 <MX_TIM2_Init+0x100>)
 800155a:	f004 ff8b 	bl	8006474 <HAL_TIM_PWM_ConfigChannel>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001564:	f000 fa8b 	bl	8001a7e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001568:	4803      	ldr	r0, [pc, #12]	@ (8001578 <MX_TIM2_Init+0x100>)
 800156a:	f000 fdfb 	bl	8002164 <HAL_TIM_MspPostInit>

}
 800156e:	bf00      	nop
 8001570:	3738      	adds	r7, #56	@ 0x38
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200002d0 	.word	0x200002d0

0800157c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b094      	sub	sp, #80	@ 0x50
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001582:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001590:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a0:	f107 0320 	add.w	r3, r7, #32
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
 80015b8:	611a      	str	r2, [r3, #16]
 80015ba:	615a      	str	r2, [r3, #20]
 80015bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015be:	4b34      	ldr	r3, [pc, #208]	@ (8001690 <MX_TIM4_Init+0x114>)
 80015c0:	4a34      	ldr	r2, [pc, #208]	@ (8001694 <MX_TIM4_Init+0x118>)
 80015c2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 80015c4:	4b32      	ldr	r3, [pc, #200]	@ (8001690 <MX_TIM4_Init+0x114>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ca:	4b31      	ldr	r3, [pc, #196]	@ (8001690 <MX_TIM4_Init+0x114>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3115;
 80015d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001690 <MX_TIM4_Init+0x114>)
 80015d2:	f640 422b 	movw	r2, #3115	@ 0xc2b
 80015d6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001690 <MX_TIM4_Init+0x114>)
 80015da:	2200      	movs	r2, #0
 80015dc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015de:	4b2c      	ldr	r3, [pc, #176]	@ (8001690 <MX_TIM4_Init+0x114>)
 80015e0:	2280      	movs	r2, #128	@ 0x80
 80015e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80015e4:	482a      	ldr	r0, [pc, #168]	@ (8001690 <MX_TIM4_Init+0x114>)
 80015e6:	f003 feed 	bl	80053c4 <HAL_TIM_Base_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80015f0:	f000 fa45 	bl	8001a7e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015f8:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80015fa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015fe:	4619      	mov	r1, r3
 8001600:	4823      	ldr	r0, [pc, #140]	@ (8001690 <MX_TIM4_Init+0x114>)
 8001602:	f005 fa37 	bl	8006a74 <HAL_TIM_ConfigClockSource>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800160c:	f000 fa37 	bl	8001a7e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001610:	481f      	ldr	r0, [pc, #124]	@ (8001690 <MX_TIM4_Init+0x114>)
 8001612:	f004 f921 	bl	8005858 <HAL_TIM_PWM_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM4_Init+0xa4>
  {
    Error_Handler();
 800161c:	f000 fa2f 	bl	8001a7e <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8001620:	2305      	movs	r3, #5
 8001622:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001624:	2300      	movs	r3, #0
 8001626:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001628:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800162c:	4619      	mov	r1, r3
 800162e:	4818      	ldr	r0, [pc, #96]	@ (8001690 <MX_TIM4_Init+0x114>)
 8001630:	f005 fd72 	bl	8007118 <HAL_TIM_SlaveConfigSynchro>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 800163a:	f000 fa20 	bl	8001a7e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800163e:	2320      	movs	r3, #32
 8001640:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001646:	f107 0320 	add.w	r3, r7, #32
 800164a:	4619      	mov	r1, r3
 800164c:	4810      	ldr	r0, [pc, #64]	@ (8001690 <MX_TIM4_Init+0x114>)
 800164e:	f006 fd6b 	bl	8008128 <HAL_TIMEx_MasterConfigSynchronization>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8001658:	f000 fa11 	bl	8001a7e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800165c:	2360      	movs	r3, #96	@ 0x60
 800165e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	220c      	movs	r2, #12
 8001670:	4619      	mov	r1, r3
 8001672:	4807      	ldr	r0, [pc, #28]	@ (8001690 <MX_TIM4_Init+0x114>)
 8001674:	f004 fefe 	bl	8006474 <HAL_TIM_PWM_ConfigChannel>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 800167e:	f000 f9fe 	bl	8001a7e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001682:	4803      	ldr	r0, [pc, #12]	@ (8001690 <MX_TIM4_Init+0x114>)
 8001684:	f000 fd6e 	bl	8002164 <HAL_TIM_MspPostInit>

}
 8001688:	bf00      	nop
 800168a:	3750      	adds	r7, #80	@ 0x50
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	2000031c 	.word	0x2000031c
 8001694:	40000800 	.word	0x40000800

08001698 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800169c:	4b14      	ldr	r3, [pc, #80]	@ (80016f0 <MX_USART3_UART_Init+0x58>)
 800169e:	4a15      	ldr	r2, [pc, #84]	@ (80016f4 <MX_USART3_UART_Init+0x5c>)
 80016a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016a2:	4b13      	ldr	r3, [pc, #76]	@ (80016f0 <MX_USART3_UART_Init+0x58>)
 80016a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016aa:	4b11      	ldr	r3, [pc, #68]	@ (80016f0 <MX_USART3_UART_Init+0x58>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016b0:	4b0f      	ldr	r3, [pc, #60]	@ (80016f0 <MX_USART3_UART_Init+0x58>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016b6:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <MX_USART3_UART_Init+0x58>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016bc:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <MX_USART3_UART_Init+0x58>)
 80016be:	220c      	movs	r2, #12
 80016c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c2:	4b0b      	ldr	r3, [pc, #44]	@ (80016f0 <MX_USART3_UART_Init+0x58>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c8:	4b09      	ldr	r3, [pc, #36]	@ (80016f0 <MX_USART3_UART_Init+0x58>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ce:	4b08      	ldr	r3, [pc, #32]	@ (80016f0 <MX_USART3_UART_Init+0x58>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d4:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <MX_USART3_UART_Init+0x58>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016da:	4805      	ldr	r0, [pc, #20]	@ (80016f0 <MX_USART3_UART_Init+0x58>)
 80016dc:	f006 ffbc 	bl	8008658 <HAL_UART_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80016e6:	f000 f9ca 	bl	8001a7e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000368 	.word	0x20000368
 80016f4:	40004800 	.word	0x40004800

080016f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08c      	sub	sp, #48	@ 0x30
 80016fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fe:	f107 031c 	add.w	r3, r7, #28
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
 800170c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800170e:	4b7d      	ldr	r3, [pc, #500]	@ (8001904 <MX_GPIO_Init+0x20c>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	4a7c      	ldr	r2, [pc, #496]	@ (8001904 <MX_GPIO_Init+0x20c>)
 8001714:	f043 0304 	orr.w	r3, r3, #4
 8001718:	6313      	str	r3, [r2, #48]	@ 0x30
 800171a:	4b7a      	ldr	r3, [pc, #488]	@ (8001904 <MX_GPIO_Init+0x20c>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	f003 0304 	and.w	r3, r3, #4
 8001722:	61bb      	str	r3, [r7, #24]
 8001724:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001726:	4b77      	ldr	r3, [pc, #476]	@ (8001904 <MX_GPIO_Init+0x20c>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	4a76      	ldr	r2, [pc, #472]	@ (8001904 <MX_GPIO_Init+0x20c>)
 800172c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001730:	6313      	str	r3, [r2, #48]	@ 0x30
 8001732:	4b74      	ldr	r3, [pc, #464]	@ (8001904 <MX_GPIO_Init+0x20c>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800173e:	4b71      	ldr	r3, [pc, #452]	@ (8001904 <MX_GPIO_Init+0x20c>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	4a70      	ldr	r2, [pc, #448]	@ (8001904 <MX_GPIO_Init+0x20c>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6313      	str	r3, [r2, #48]	@ 0x30
 800174a:	4b6e      	ldr	r3, [pc, #440]	@ (8001904 <MX_GPIO_Init+0x20c>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001756:	4b6b      	ldr	r3, [pc, #428]	@ (8001904 <MX_GPIO_Init+0x20c>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	4a6a      	ldr	r2, [pc, #424]	@ (8001904 <MX_GPIO_Init+0x20c>)
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	6313      	str	r3, [r2, #48]	@ 0x30
 8001762:	4b68      	ldr	r3, [pc, #416]	@ (8001904 <MX_GPIO_Init+0x20c>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800176e:	4b65      	ldr	r3, [pc, #404]	@ (8001904 <MX_GPIO_Init+0x20c>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	4a64      	ldr	r2, [pc, #400]	@ (8001904 <MX_GPIO_Init+0x20c>)
 8001774:	f043 0320 	orr.w	r3, r3, #32
 8001778:	6313      	str	r3, [r2, #48]	@ 0x30
 800177a:	4b62      	ldr	r3, [pc, #392]	@ (8001904 <MX_GPIO_Init+0x20c>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	f003 0320 	and.w	r3, r3, #32
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001786:	4b5f      	ldr	r3, [pc, #380]	@ (8001904 <MX_GPIO_Init+0x20c>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	4a5e      	ldr	r2, [pc, #376]	@ (8001904 <MX_GPIO_Init+0x20c>)
 800178c:	f043 0310 	orr.w	r3, r3, #16
 8001790:	6313      	str	r3, [r2, #48]	@ 0x30
 8001792:	4b5c      	ldr	r3, [pc, #368]	@ (8001904 <MX_GPIO_Init+0x20c>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	f003 0310 	and.w	r3, r3, #16
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800179e:	4b59      	ldr	r3, [pc, #356]	@ (8001904 <MX_GPIO_Init+0x20c>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	4a58      	ldr	r2, [pc, #352]	@ (8001904 <MX_GPIO_Init+0x20c>)
 80017a4:	f043 0308 	orr.w	r3, r3, #8
 80017a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017aa:	4b56      	ldr	r3, [pc, #344]	@ (8001904 <MX_GPIO_Init+0x20c>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80017b6:	2200      	movs	r2, #0
 80017b8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80017bc:	4852      	ldr	r0, [pc, #328]	@ (8001908 <MX_GPIO_Init+0x210>)
 80017be:	f001 fcc9 	bl	8003154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, STEP_RSTN_Pin|STEP_DIR_Pin, GPIO_PIN_RESET);
 80017c2:	2200      	movs	r2, #0
 80017c4:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80017c8:	4850      	ldr	r0, [pc, #320]	@ (800190c <MX_GPIO_Init+0x214>)
 80017ca:	f001 fcc3 	bl	8003154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPINDLE_ENA_L_Pin|SPINDLE_ENA_R_Pin, GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80017d4:	484e      	ldr	r0, [pc, #312]	@ (8001910 <MX_GPIO_Init+0x218>)
 80017d6:	f001 fcbd 	bl	8003154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEP_SPI_CS_GPIO_Port, STEP_SPI_CS_Pin, GPIO_PIN_SET);
 80017da:	2201      	movs	r2, #1
 80017dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017e0:	484c      	ldr	r0, [pc, #304]	@ (8001914 <MX_GPIO_Init+0x21c>)
 80017e2:	f001 fcb7 	bl	8003154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USR_BUTTON_Pin */
  GPIO_InitStruct.Pin = USR_BUTTON_Pin;
 80017e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ec:	2300      	movs	r3, #0
 80017ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USR_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80017f4:	f107 031c 	add.w	r3, r7, #28
 80017f8:	4619      	mov	r1, r3
 80017fa:	4847      	ldr	r0, [pc, #284]	@ (8001918 <MX_GPIO_Init+0x220>)
 80017fc:	f001 f93a 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPINDLE_SI_R_Pin */
  GPIO_InitStruct.Pin = SPINDLE_SI_R_Pin;
 8001800:	2301      	movs	r3, #1
 8001802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001804:	2300      	movs	r3, #0
 8001806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPINDLE_SI_R_GPIO_Port, &GPIO_InitStruct);
 800180c:	f107 031c 	add.w	r3, r7, #28
 8001810:	4619      	mov	r1, r3
 8001812:	4842      	ldr	r0, [pc, #264]	@ (800191c <MX_GPIO_Init+0x224>)
 8001814:	f001 f92e 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8001818:	f244 0381 	movw	r3, #16513	@ 0x4081
 800181c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181e:	2301      	movs	r3, #1
 8001820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182a:	f107 031c 	add.w	r3, r7, #28
 800182e:	4619      	mov	r1, r3
 8001830:	4835      	ldr	r0, [pc, #212]	@ (8001908 <MX_GPIO_Init+0x210>)
 8001832:	f001 f91f 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_RSTN_Pin */
  GPIO_InitStruct.Pin = STEP_RSTN_Pin;
 8001836:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800183a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183c:	2301      	movs	r3, #1
 800183e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP_RSTN_GPIO_Port, &GPIO_InitStruct);
 8001848:	f107 031c 	add.w	r3, r7, #28
 800184c:	4619      	mov	r1, r3
 800184e:	482f      	ldr	r0, [pc, #188]	@ (800190c <MX_GPIO_Init+0x214>)
 8001850:	f001 f910 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_DIR_Pin */
  GPIO_InitStruct.Pin = STEP_DIR_Pin;
 8001854:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185a:	2301      	movs	r3, #1
 800185c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001862:	2303      	movs	r3, #3
 8001864:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP_DIR_GPIO_Port, &GPIO_InitStruct);
 8001866:	f107 031c 	add.w	r3, r7, #28
 800186a:	4619      	mov	r1, r3
 800186c:	4827      	ldr	r0, [pc, #156]	@ (800190c <MX_GPIO_Init+0x214>)
 800186e:	f001 f901 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_FLAG_Pin */
  GPIO_InitStruct.Pin = STEP_FLAG_Pin;
 8001872:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001878:	2300      	movs	r3, #0
 800187a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800187c:	2301      	movs	r3, #1
 800187e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(STEP_FLAG_GPIO_Port, &GPIO_InitStruct);
 8001880:	f107 031c 	add.w	r3, r7, #28
 8001884:	4619      	mov	r1, r3
 8001886:	4821      	ldr	r0, [pc, #132]	@ (800190c <MX_GPIO_Init+0x214>)
 8001888:	f001 f8f4 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPINDLE_ENA_L_Pin SPINDLE_ENA_R_Pin */
  GPIO_InitStruct.Pin = SPINDLE_ENA_L_Pin|SPINDLE_ENA_R_Pin;
 800188c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001892:	2301      	movs	r3, #1
 8001894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	2300      	movs	r3, #0
 800189c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800189e:	f107 031c 	add.w	r3, r7, #28
 80018a2:	4619      	mov	r1, r3
 80018a4:	481a      	ldr	r0, [pc, #104]	@ (8001910 <MX_GPIO_Init+0x218>)
 80018a6:	f001 f8e5 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_SPI_CS_Pin */
  GPIO_InitStruct.Pin = STEP_SPI_CS_Pin;
 80018aa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80018ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b0:	2301      	movs	r3, #1
 80018b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b8:	2303      	movs	r3, #3
 80018ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80018bc:	f107 031c 	add.w	r3, r7, #28
 80018c0:	4619      	mov	r1, r3
 80018c2:	4814      	ldr	r0, [pc, #80]	@ (8001914 <MX_GPIO_Init+0x21c>)
 80018c4:	f001 f8d6 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : REFERENCE_MARK_Pin LIMIT_SWITCH_Pin */
  GPIO_InitStruct.Pin = REFERENCE_MARK_Pin|LIMIT_SWITCH_Pin;
 80018c8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ce:	2300      	movs	r3, #0
 80018d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d6:	f107 031c 	add.w	r3, r7, #28
 80018da:	4619      	mov	r1, r3
 80018dc:	480a      	ldr	r0, [pc, #40]	@ (8001908 <MX_GPIO_Init+0x210>)
 80018de:	f001 f8c9 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPINDLE_SI_L_Pin */
  GPIO_InitStruct.Pin = SPINDLE_SI_L_Pin;
 80018e2:	2301      	movs	r3, #1
 80018e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e6:	2300      	movs	r3, #0
 80018e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPINDLE_SI_L_GPIO_Port, &GPIO_InitStruct);
 80018ee:	f107 031c 	add.w	r3, r7, #28
 80018f2:	4619      	mov	r1, r3
 80018f4:	4806      	ldr	r0, [pc, #24]	@ (8001910 <MX_GPIO_Init+0x218>)
 80018f6:	f001 f8bd 	bl	8002a74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018fa:	bf00      	nop
 80018fc:	3730      	adds	r7, #48	@ 0x30
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800
 8001908:	40020400 	.word	0x40020400
 800190c:	40021400 	.word	0x40021400
 8001910:	40021000 	.word	0x40021000
 8001914:	40020c00 	.word	0x40020c00
 8001918:	40020800 	.word	0x40020800
 800191c:	40020000 	.word	0x40020000

08001920 <vAssertCalled>:

/* USER CODE BEGIN 4 */
void vAssertCalled(const char *const pcFileName, unsigned long ulLine)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  volatile uint32_t ulSetToNonZeroInDebuggerToContinue = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]

  /* Parameters are not used. */
  (void)ulLine;
  (void)pcFileName;

  taskENTER_CRITICAL();
 800192e:	f00a fa77 	bl	800be20 <vPortEnterCritical>
  {
    /* You can step out of this function to debug the assertion by using
     the debugger to set ulSetToNonZeroInDebuggerToContinue to a non-zero
     value. */
    while (ulSetToNonZeroInDebuggerToContinue == 0)
 8001932:	bf00      	nop
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0fc      	beq.n	8001934 <vAssertCalled+0x14>
    {
    }
  }
  taskEXIT_CRITICAL();
 800193a:	f00a faa9 	bl	800be90 <vPortExitCritical>
}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <__stdout_put_char>:

int __stdout_put_char(int ch)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint8_t val = ch;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	73fb      	strb	r3, [r7, #15]
  while ((huart3.Instance->ISR & UART_FLAG_TXE) == 0)
 8001954:	bf00      	nop
 8001956:	4b0d      	ldr	r3, [pc, #52]	@ (800198c <__stdout_put_char+0x44>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	69db      	ldr	r3, [r3, #28]
 800195c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0f8      	beq.n	8001956 <__stdout_put_char+0xe>
    ;
  huart3.Instance->TDR = val;
 8001964:	4b09      	ldr	r3, [pc, #36]	@ (800198c <__stdout_put_char+0x44>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	7bfa      	ldrb	r2, [r7, #15]
 800196a:	629a      	str	r2, [r3, #40]	@ 0x28
  while ((huart3.Instance->ISR & UART_FLAG_TC) == 0)
 800196c:	bf00      	nop
 800196e:	4b07      	ldr	r3, [pc, #28]	@ (800198c <__stdout_put_char+0x44>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0f8      	beq.n	800196e <__stdout_put_char+0x26>
    ;
  return 0;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	20000368 	.word	0x20000368

08001990 <__stdin_get_char>:

int __stdin_get_char(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  if (huart3.Instance->ISR & UART_FLAG_ORE)
 8001994:	4b19      	ldr	r3, [pc, #100]	@ (80019fc <__stdin_get_char+0x6c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <__stdin_get_char+0x1a>
    huart3.Instance->ICR = UART_CLEAR_OREF;
 80019a2:	4b16      	ldr	r3, [pc, #88]	@ (80019fc <__stdin_get_char+0x6c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2208      	movs	r2, #8
 80019a8:	621a      	str	r2, [r3, #32]

  if (huart3.Instance->ISR & UART_FLAG_NE)
 80019aa:	4b14      	ldr	r3, [pc, #80]	@ (80019fc <__stdin_get_char+0x6c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <__stdin_get_char+0x30>
    huart3.Instance->ICR = UART_CLEAR_NEF;
 80019b8:	4b10      	ldr	r3, [pc, #64]	@ (80019fc <__stdin_get_char+0x6c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2204      	movs	r2, #4
 80019be:	621a      	str	r2, [r3, #32]

  if (huart3.Instance->ISR & UART_FLAG_FE)
 80019c0:	4b0e      	ldr	r3, [pc, #56]	@ (80019fc <__stdin_get_char+0x6c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <__stdin_get_char+0x46>
    huart3.Instance->ICR = UART_CLEAR_FEF;
 80019ce:	4b0b      	ldr	r3, [pc, #44]	@ (80019fc <__stdin_get_char+0x6c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2202      	movs	r2, #2
 80019d4:	621a      	str	r2, [r3, #32]

  if ((huart3.Instance->ISR & UART_FLAG_RXNE) == 0)
 80019d6:	4b09      	ldr	r3, [pc, #36]	@ (80019fc <__stdin_get_char+0x6c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	f003 0320 	and.w	r3, r3, #32
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d102      	bne.n	80019ea <__stdin_get_char+0x5a>
    return -1;
 80019e4:	f04f 33ff 	mov.w	r3, #4294967295
 80019e8:	e002      	b.n	80019f0 <__stdin_get_char+0x60>
  return huart3.Instance->RDR;
 80019ea:	4b04      	ldr	r3, [pc, #16]	@ (80019fc <__stdin_get_char+0x6c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	20000368 	.word	0x20000368

08001a00 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001a06:	463b      	mov	r3, r7
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001a12:	f000 fe7f 	bl	8002714 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001a16:	2301      	movs	r3, #1
 8001a18:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001a22:	230d      	movs	r3, #13
 8001a24:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 8001a2e:	2306      	movs	r3, #6
 8001a30:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001a42:	463b      	mov	r3, r7
 8001a44:	4618      	mov	r0, r3
 8001a46:	f000 fe9d 	bl	8002784 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x60000000;
 8001a4e:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8001a52:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001a54:	231f      	movs	r3, #31
 8001a56:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001a58:	2387      	movs	r3, #135	@ 0x87
 8001a5a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001a60:	2301      	movs	r3, #1
 8001a62:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001a64:	2301      	movs	r3, #1
 8001a66:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001a68:	463b      	mov	r3, r7
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 fe8a 	bl	8002784 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001a70:	2004      	movs	r0, #4
 8001a72:	f000 fe67 	bl	8002744 <HAL_MPU_Enable>

}
 8001a76:	bf00      	nop
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a82:	b672      	cpsid	i
}
 8001a84:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a86:	bf00      	nop
 8001a88:	e7fd      	b.n	8001a86 <Error_Handler+0x8>
	...

08001a8c <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  portENTER_CRITICAL();
 8001a96:	f00a f9c3 	bl	800be20 <vPortEnterCritical>

  printf("HAL_ASSERT: %s:::%u\r\n", (char *)file, (unsigned int)line);
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	4805      	ldr	r0, [pc, #20]	@ (8001ab4 <assert_failed+0x28>)
 8001aa0:	f00c fa04 	bl	800deac <iprintf>
  assert(0);
 8001aa4:	4b04      	ldr	r3, [pc, #16]	@ (8001ab8 <assert_failed+0x2c>)
 8001aa6:	4a05      	ldr	r2, [pc, #20]	@ (8001abc <assert_failed+0x30>)
 8001aa8:	f240 310b 	movw	r1, #779	@ 0x30b
 8001aac:	4804      	ldr	r0, [pc, #16]	@ (8001ac0 <assert_failed+0x34>)
 8001aae:	f00a faa7 	bl	800c000 <__assert_func>
 8001ab2:	bf00      	nop
 8001ab4:	08010980 	.word	0x08010980
 8001ab8:	08010998 	.word	0x08010998
 8001abc:	08010ea4 	.word	0x08010ea4
 8001ac0:	0801099c 	.word	0x0801099c

08001ac4 <initialise_monitor_handles>:
 * is called. afterwards main would be called.
 */
// ----------------------------------------------------------------------------
void initialise_monitor_handles( void )
// ----------------------------------------------------------------------------
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0

}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <initialise_stdlib_abstraction>:
 */
// ----------------------------------------------------------------------------
__attribute__((constructor))
void initialise_stdlib_abstraction( void )
// ----------------------------------------------------------------------------
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
    initialise_monitor_handles();
 8001ad8:	f7ff fff4 	bl	8001ac4 <initialise_monitor_handles>

#if defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_STDOUT)
    stdioSemaphore = xSemaphoreCreateRecursiveMutex();
 8001adc:	2004      	movs	r0, #4
 8001ade:	f007 fdb2 	bl	8009646 <xQueueCreateMutex>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	4a15      	ldr	r2, [pc, #84]	@ (8001b3c <initialise_stdlib_abstraction+0x68>)
 8001ae6:	6013      	str	r3, [r2, #0]

    if ( stdioSemaphore == 0 )
 8001ae8:	4b14      	ldr	r3, [pc, #80]	@ (8001b3c <initialise_stdlib_abstraction+0x68>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d104      	bne.n	8001afa <initialise_stdlib_abstraction+0x26>
    {
        vAssertCalled( __FILE__, __LINE__ );
 8001af0:	f240 110b 	movw	r1, #267	@ 0x10b
 8001af4:	4812      	ldr	r0, [pc, #72]	@ (8001b40 <initialise_stdlib_abstraction+0x6c>)
 8001af6:	f7ff ff13 	bl	8001920 <vAssertCalled>
    }
#endif
#if defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_MALLOC)
    mallocSemaphore = xSemaphoreCreateRecursiveMutex();
 8001afa:	2004      	movs	r0, #4
 8001afc:	f007 fda3 	bl	8009646 <xQueueCreateMutex>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4a10      	ldr	r2, [pc, #64]	@ (8001b44 <initialise_stdlib_abstraction+0x70>)
 8001b04:	6013      	str	r3, [r2, #0]

    if ( mallocSemaphore == 0 )
 8001b06:	4b0f      	ldr	r3, [pc, #60]	@ (8001b44 <initialise_stdlib_abstraction+0x70>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d104      	bne.n	8001b18 <initialise_stdlib_abstraction+0x44>
    {
        vAssertCalled( __FILE__, __LINE__ );
 8001b0e:	f240 1113 	movw	r1, #275	@ 0x113
 8001b12:	480b      	ldr	r0, [pc, #44]	@ (8001b40 <initialise_stdlib_abstraction+0x6c>)
 8001b14:	f7ff ff04 	bl	8001920 <vAssertCalled>
    }
#endif
#if defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_ENV)
    envSemaphore = xSemaphoreCreateRecursiveMutex();
 8001b18:	2004      	movs	r0, #4
 8001b1a:	f007 fd94 	bl	8009646 <xQueueCreateMutex>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4a09      	ldr	r2, [pc, #36]	@ (8001b48 <initialise_stdlib_abstraction+0x74>)
 8001b22:	6013      	str	r3, [r2, #0]

    if ( envSemaphore == 0 )
 8001b24:	4b08      	ldr	r3, [pc, #32]	@ (8001b48 <initialise_stdlib_abstraction+0x74>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d104      	bne.n	8001b36 <initialise_stdlib_abstraction+0x62>
    {
        vAssertCalled( __FILE__, __LINE__ );
 8001b2c:	f240 111b 	movw	r1, #283	@ 0x11b
 8001b30:	4803      	ldr	r0, [pc, #12]	@ (8001b40 <initialise_stdlib_abstraction+0x6c>)
 8001b32:	f7ff fef5 	bl	8001920 <vAssertCalled>
    }
#endif
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200003f0 	.word	0x200003f0
 8001b40:	08010a74 	.word	0x08010a74
 8001b44:	200003f4 	.word	0x200003f4
 8001b48:	200003f8 	.word	0x200003f8

08001b4c <_getpid>:
 * "machine mode"
 */
// ----------------------------------------------------------------------------
int _getpid( void )
// ----------------------------------------------------------------------------
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
    return 1;
 8001b50:	2301      	movs	r3, #1
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <_kill>:
 * process with PID 1
 */
// ----------------------------------------------------------------------------
int _kill( int pid, int sig )
// ----------------------------------------------------------------------------
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
    ( void )pid;
    ( void )sig;

    if ( _impure_ptr != 0 )
 8001b66:	4b09      	ldr	r3, [pc, #36]	@ (8001b8c <_kill+0x30>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <_kill+0x1a>
    {
        _impure_ptr->_errno = EINVAL;
 8001b6e:	4b07      	ldr	r3, [pc, #28]	@ (8001b8c <_kill+0x30>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2216      	movs	r2, #22
 8001b74:	601a      	str	r2, [r3, #0]
    }
    errno = EINVAL;
 8001b76:	f00c fbc5 	bl	800e304 <__errno>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2216      	movs	r2, #22
 8001b7e:	601a      	str	r2, [r3, #0]
    return -1;
 8001b80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	2000018c 	.word	0x2000018c

08001b90 <_exit>:
 */
// ----------------------------------------------------------------------------
__attribute__( ( noreturn ) )
void _exit ( int status )
// ----------------------------------------------------------------------------
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
    _kill( status, -1 );
 8001b98:	f04f 31ff 	mov.w	r1, #4294967295
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ffdd 	bl	8001b5c <_kill>
    while ( 1 ) {}
 8001ba2:	bf00      	nop
 8001ba4:	e7fd      	b.n	8001ba2 <_exit+0x12>
	...

08001ba8 <_read>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _read( int file, char* ptr, int len )
// ----------------------------------------------------------------------------
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
    ( void )file;

    int DataIdx;
    int resLen = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61bb      	str	r3, [r7, #24]

    if ( file == STDIN_FILENO )
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d121      	bne.n	8001c02 <_read+0x5a>
    {
        for ( DataIdx = 0; DataIdx < len; )
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
 8001bc2:	e019      	b.n	8001bf8 <_read+0x50>
        {
            int result = __stdin_get_char();
 8001bc4:	f7ff fee4 	bl	8001990 <__stdin_get_char>
 8001bc8:	6178      	str	r0, [r7, #20]
            if ( result == EOF )
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd0:	d106      	bne.n	8001be0 <_read+0x38>
            {
                if ( resLen == 0 )
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d124      	bne.n	8001c22 <_read+0x7a>
                {
                    resLen = EOF;
 8001bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bdc:	61bb      	str	r3, [r7, #24]
                }
                break;
 8001bde:	e020      	b.n	8001c22 <_read+0x7a>
            }

            *ptr++ = ( char )result;
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	60ba      	str	r2, [r7, #8]
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	701a      	strb	r2, [r3, #0]
            resLen++;
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	61bb      	str	r3, [r7, #24]
            DataIdx++;
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	61fb      	str	r3, [r7, #28]
        for ( DataIdx = 0; DataIdx < len; )
 8001bf8:	69fa      	ldr	r2, [r7, #28]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	dbe1      	blt.n	8001bc4 <_read+0x1c>
 8001c00:	e010      	b.n	8001c24 <_read+0x7c>

        }
    }
    else
    {
        if ( _impure_ptr != 0 )
 8001c02:	4b0b      	ldr	r3, [pc, #44]	@ (8001c30 <_read+0x88>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <_read+0x6a>
        {
            _impure_ptr->_errno = EBADF;
 8001c0a:	4b09      	ldr	r3, [pc, #36]	@ (8001c30 <_read+0x88>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2209      	movs	r2, #9
 8001c10:	601a      	str	r2, [r3, #0]
        }
        errno = EBADF;
 8001c12:	f00c fb77 	bl	800e304 <__errno>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2209      	movs	r2, #9
 8001c1a:	601a      	str	r2, [r3, #0]
        return -1;
 8001c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c20:	e001      	b.n	8001c26 <_read+0x7e>
                break;
 8001c22:	bf00      	nop
    }

    return resLen;
 8001c24:	69bb      	ldr	r3, [r7, #24]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3720      	adds	r7, #32
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	2000018c 	.word	0x2000018c

08001c34 <_write>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _write( int file, char* ptr, int len )
// ----------------------------------------------------------------------------
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
    ( void )file;

    int DataIdx, locked = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	613b      	str	r3, [r7, #16]

    if ( file == STDOUT_FILENO || file == STDERR_FILENO )
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d002      	beq.n	8001c50 <_write+0x1c>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d149      	bne.n	8001ce4 <_write+0xb0>
    {

#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_STDOUT)
        if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001c50:	f009 fa08 	bl	800b064 <xTaskGetSchedulerState>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d108      	bne.n	8001c6c <_write+0x38>
        {
            xSemaphoreTakeRecursive( stdioSemaphore, -1 );
 8001c5a:	4b2c      	ldr	r3, [pc, #176]	@ (8001d0c <_write+0xd8>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f04f 31ff 	mov.w	r1, #4294967295
 8001c62:	4618      	mov	r0, r3
 8001c64:	f007 fd44 	bl	80096f0 <xQueueTakeMutexRecursive>
            locked = 1;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	613b      	str	r3, [r7, #16]
        }
#endif

        if (file == STDERR_FILENO)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d10e      	bne.n	8001c90 <_write+0x5c>
        {
        	__stdout_put_char('\033');
 8001c72:	201b      	movs	r0, #27
 8001c74:	f7ff fe68 	bl	8001948 <__stdout_put_char>
        	__stdout_put_char('[');
 8001c78:	205b      	movs	r0, #91	@ 0x5b
 8001c7a:	f7ff fe65 	bl	8001948 <__stdout_put_char>
        	__stdout_put_char('3');
 8001c7e:	2033      	movs	r0, #51	@ 0x33
 8001c80:	f7ff fe62 	bl	8001948 <__stdout_put_char>
        	__stdout_put_char('1');
 8001c84:	2031      	movs	r0, #49	@ 0x31
 8001c86:	f7ff fe5f 	bl	8001948 <__stdout_put_char>
        	__stdout_put_char('m');
 8001c8a:	206d      	movs	r0, #109	@ 0x6d
 8001c8c:	f7ff fe5c 	bl	8001948 <__stdout_put_char>
        }
        for ( DataIdx = 0; DataIdx < len; DataIdx++ )
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	e009      	b.n	8001caa <_write+0x76>
        {
            __stdout_put_char( ptr[DataIdx] );
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	68ba      	ldr	r2, [r7, #8]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fe52 	bl	8001948 <__stdout_put_char>
        for ( DataIdx = 0; DataIdx < len; DataIdx++ )
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	dbf1      	blt.n	8001c96 <_write+0x62>
        }
        if (file == STDERR_FILENO)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d10b      	bne.n	8001cd0 <_write+0x9c>
        {
        	__stdout_put_char('\033');
 8001cb8:	201b      	movs	r0, #27
 8001cba:	f7ff fe45 	bl	8001948 <__stdout_put_char>
        	__stdout_put_char('[');
 8001cbe:	205b      	movs	r0, #91	@ 0x5b
 8001cc0:	f7ff fe42 	bl	8001948 <__stdout_put_char>
        	__stdout_put_char('0');
 8001cc4:	2030      	movs	r0, #48	@ 0x30
 8001cc6:	f7ff fe3f 	bl	8001948 <__stdout_put_char>
        	__stdout_put_char('m');
 8001cca:	206d      	movs	r0, #109	@ 0x6d
 8001ccc:	f7ff fe3c 	bl	8001948 <__stdout_put_char>
        }

#if defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_STDOUT)
        if ( locked )
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d004      	beq.n	8001ce0 <_write+0xac>
        {
            xSemaphoreGiveRecursive( stdioSemaphore );
 8001cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d0c <_write+0xd8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f007 fccc 	bl	8009678 <xQueueGiveMutexRecursive>
        }
#endif

        return len;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	e00e      	b.n	8001d02 <_write+0xce>
    }
    else
    {
        if ( _impure_ptr != 0 )
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8001d10 <_write+0xdc>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <_write+0xc0>
        {
            _impure_ptr->_errno = EBADF;
 8001cec:	4b08      	ldr	r3, [pc, #32]	@ (8001d10 <_write+0xdc>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2209      	movs	r2, #9
 8001cf2:	601a      	str	r2, [r3, #0]
        }
        errno = EBADF;
 8001cf4:	f00c fb06 	bl	800e304 <__errno>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2209      	movs	r2, #9
 8001cfc:	601a      	str	r2, [r3, #0]
        return -1;
 8001cfe:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200003f0 	.word	0x200003f0
 8001d10:	2000018c 	.word	0x2000018c

08001d14 <_close>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _close( int file )
// ----------------------------------------------------------------------------
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
    ( void )file;

    return -1;
 8001d1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <_fstat>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _fstat( int file, struct stat* st )
// ----------------------------------------------------------------------------
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
    st->st_dev    = file;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	b21a      	sxth	r2, r3
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	801a      	strh	r2, [r3, #0]
    st->st_size   = 0;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	2200      	movs	r2, #0
 8001d42:	611a      	str	r2, [r3, #16]
    st->st_blocks = 0;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	2200      	movs	r2, #0
 8001d48:	64da      	str	r2, [r3, #76]	@ 0x4c

    if ( file >= 1 && file <= 3 )
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	dd08      	ble.n	8001d62 <_fstat+0x36>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	dc05      	bgt.n	8001d62 <_fstat+0x36>
    {
        st->st_mode = S_IFCHR;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d5c:	605a      	str	r2, [r3, #4]
        return 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	e005      	b.n	8001d6e <_fstat+0x42>
    }
    else
    {
        st->st_mode = S_IFREG;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001d68:	605a      	str	r2, [r3, #4]
        return -1;
 8001d6a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <_isatty>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _isatty( int file )
// ----------------------------------------------------------------------------
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
    // is stdin, stdout or stderror
    if ( file >= 0 && file <= 2 )
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	db04      	blt.n	8001d92 <_isatty+0x18>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	dc01      	bgt.n	8001d92 <_isatty+0x18>
    {
        return file;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	e000      	b.n	8001d94 <_isatty+0x1a>
    }
    return 0;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <_lseek>:

// ----------------------------------------------------------------------------
int _lseek( int file, int ptr, int dir )
// ----------------------------------------------------------------------------
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
    ( void )file;
    ( void )ptr;
    ( void )dir;

    return 0;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
	...

08001dbc <_sbrk_r>:
static UBaseType_t malLock_uxSavedInterruptStatus;

// ----------------------------------------------------------------------------
void* _sbrk_r( struct _reent* pReent, int incr )
// ----------------------------------------------------------------------------
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
    ( void )pReent;
    ( void )incr;
    register char* stack_ptr asm( "sp" );

    // make sure to calculate the correct heap size and bytes remaining at the first call!
    if( TotalHeapSize == 0 )
 8001dc6:	4b37      	ldr	r3, [pc, #220]	@ (8001ea4 <_sbrk_r+0xe8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d113      	bne.n	8001df6 <_sbrk_r+0x3a>
    {
        TotalHeapSize = heapBytesRemaining = stickyHeapBytesRemaining
                                             = ( int )( ( &__HeapLimit ) - ( &__HeapBase ) )
 8001dce:	4a36      	ldr	r2, [pc, #216]	@ (8001ea8 <_sbrk_r+0xec>)
 8001dd0:	4b36      	ldr	r3, [pc, #216]	@ (8001eac <_sbrk_r+0xf0>)
 8001dd2:	1ad3      	subs	r3, r2, r3
#ifdef configISR_STACK_SIZE_WORDS
                                               - ( configISR_STACK_SIZE_WORDS * 4 )
 8001dd4:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8001dd8:	461a      	mov	r2, r3
                                             = ( int )( ( &__HeapLimit ) - ( &__HeapBase ) )
 8001dda:	4b35      	ldr	r3, [pc, #212]	@ (8001eb0 <_sbrk_r+0xf4>)
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	4a32      	ldr	r2, [pc, #200]	@ (8001ea8 <_sbrk_r+0xec>)
 8001de0:	4b32      	ldr	r3, [pc, #200]	@ (8001eac <_sbrk_r+0xf0>)
 8001de2:	1ad3      	subs	r3, r2, r3
                                               - ( configISR_STACK_SIZE_WORDS * 4 )
 8001de4:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
        TotalHeapSize = heapBytesRemaining = stickyHeapBytesRemaining
 8001de8:	4a32      	ldr	r2, [pc, #200]	@ (8001eb4 <_sbrk_r+0xf8>)
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	4b31      	ldr	r3, [pc, #196]	@ (8001eb4 <_sbrk_r+0xf8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	461a      	mov	r2, r3
 8001df2:	4b2c      	ldr	r3, [pc, #176]	@ (8001ea4 <_sbrk_r+0xe8>)
 8001df4:	601a      	str	r2, [r3, #0]
#endif
                                               ;
    };
    static char* currentHeapEnd = &__HeapBase;
    char* limit = ( xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED ) ?
 8001df6:	f009 f935 	bl	800b064 <xTaskGetSchedulerState>
 8001dfa:	4603      	mov	r3, r0
                  stack_ptr   :  // Before scheduler is started, limit is stack pointer (risky!)
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <_sbrk_r+0x48>
 8001e00:	466b      	mov	r3, sp
 8001e02:	e000      	b.n	8001e06 <_sbrk_r+0x4a>
 8001e04:	4b2c      	ldr	r3, [pc, #176]	@ (8001eb8 <_sbrk_r+0xfc>)
    char* limit = ( xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED ) ?
 8001e06:	61fb      	str	r3, [r7, #28]
    __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8001e08:	f3ef 8305 	mrs	r3, IPSR
 8001e0c:	613b      	str	r3, [r7, #16]
    if( ulCurrentInterrupt == 0 )
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d102      	bne.n	8001e1a <_sbrk_r+0x5e>
        xReturn = pdFALSE;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	e001      	b.n	8001e1e <_sbrk_r+0x62>
        xReturn = pdTRUE;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	60fb      	str	r3, [r7, #12]
    return xReturn;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
                  &__HeapLimit
#ifdef configISR_STACK_SIZE_WORDS
                  - ( configISR_STACK_SIZE_WORDS * 4 )
#endif
                  ; // Once running, OK to reuse all remaining RAM except ISR stack (MSP) stack
    DRN_ENTER_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
 8001e20:	61bb      	str	r3, [r7, #24]
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d010      	beq.n	8001e4a <_sbrk_r+0x8e>
    __asm volatile
 8001e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e2c:	b672      	cpsid	i
 8001e2e:	f383 8811 	msr	BASEPRI, r3
 8001e32:	f3bf 8f6f 	isb	sy
 8001e36:	f3bf 8f4f 	dsb	sy
 8001e3a:	b662      	cpsie	i
 8001e3c:	60bb      	str	r3, [r7, #8]
}
 8001e3e:	bf00      	nop
 8001e40:	f240 21c1 	movw	r1, #705	@ 0x2c1
 8001e44:	481d      	ldr	r0, [pc, #116]	@ (8001ebc <_sbrk_r+0x100>)
 8001e46:	f7ff fd6b 	bl	8001920 <vAssertCalled>
    if ( currentHeapEnd + incr > limit )
 8001e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec0 <_sbrk_r+0x104>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	4413      	add	r3, r2
 8001e52:	69fa      	ldr	r2, [r7, #28]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d204      	bcs.n	8001e62 <_sbrk_r+0xa6>
        // Ooops, no more memory available...
#if( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            extern void vApplicationMallocFailedHook( void );
            DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
            vApplicationMallocFailedHook();
 8001e58:	f7ff f970 	bl	800113c <vApplicationMallocFailedHook>
#else
        // Default, if you prefer to believe your application will gracefully trap out-of-memory...
        pReent->_errno = ENOMEM; // newlib's thread-specific errno
        DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
#endif
        return ( char* ) -1; // the malloc-family routine that called sbrk will return 0
 8001e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e60:	e01b      	b.n	8001e9a <_sbrk_r+0xde>
    }

    char* previousHeapEnd = currentHeapEnd;
 8001e62:	4b17      	ldr	r3, [pc, #92]	@ (8001ec0 <_sbrk_r+0x104>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	617b      	str	r3, [r7, #20]
    currentHeapEnd += incr;
 8001e68:	4b15      	ldr	r3, [pc, #84]	@ (8001ec0 <_sbrk_r+0x104>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	4413      	add	r3, r2
 8001e70:	4a13      	ldr	r2, [pc, #76]	@ (8001ec0 <_sbrk_r+0x104>)
 8001e72:	6013      	str	r3, [r2, #0]
    heapBytesRemaining -= incr;
 8001e74:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb4 <_sbrk_r+0xf8>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001eb4 <_sbrk_r+0xf8>)
 8001e7e:	6013      	str	r3, [r2, #0]

    // implement the statistical feature to provide the minimum free heap size feature
    // of FreeRTOS statistics
    if ( stickyHeapBytesRemaining > xPortGetFreeHeapSize() )
 8001e80:	f000 f888 	bl	8001f94 <xPortGetFreeHeapSize>
 8001e84:	4602      	mov	r2, r0
 8001e86:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb0 <_sbrk_r+0xf4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d204      	bcs.n	8001e98 <_sbrk_r+0xdc>
    {
        stickyHeapBytesRemaining = xPortGetFreeHeapSize();
 8001e8e:	f000 f881 	bl	8001f94 <xPortGetFreeHeapSize>
 8001e92:	4603      	mov	r3, r0
 8001e94:	4a06      	ldr	r2, [pc, #24]	@ (8001eb0 <_sbrk_r+0xf4>)
 8001e96:	6013      	str	r3, [r2, #0]
    }

    DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
    return ( char* ) previousHeapEnd;
 8001e98:	697b      	ldr	r3, [r7, #20]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3720      	adds	r7, #32
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000404 	.word	0x20000404
 8001ea8:	20050000 	.word	0x20050000
 8001eac:	20000700 	.word	0x20000700
 8001eb0:	20000400 	.word	0x20000400
 8001eb4:	200003fc 	.word	0x200003fc
 8001eb8:	2004c000 	.word	0x2004c000
 8001ebc:	08010a74 	.word	0x08010a74
 8001ec0:	20000000 	.word	0x20000000

08001ec4 <__malloc_lock>:
}

// ----------------------------------------------------------------------------
__attribute__( ( weak ) ) void __malloc_lock( struct _reent* r )
// ----------------------------------------------------------------------------
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
    ( void )r;

#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_MALLOC)
    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING  )
 8001ecc:	f009 f8ca 	bl	800b064 <xTaskGetSchedulerState>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d106      	bne.n	8001ee4 <__malloc_lock+0x20>
    {
        xSemaphoreTakeRecursive( mallocSemaphore, -1 );
 8001ed6:	4b16      	ldr	r3, [pc, #88]	@ (8001f30 <__malloc_lock+0x6c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f04f 31ff 	mov.w	r1, #4294967295
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f007 fc06 	bl	80096f0 <xQueueTakeMutexRecursive>
    __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8001ee4:	f3ef 8305 	mrs	r3, IPSR
 8001ee8:	613b      	str	r3, [r7, #16]
    if( ulCurrentInterrupt == 0 )
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d102      	bne.n	8001ef6 <__malloc_lock+0x32>
        xReturn = pdFALSE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	e001      	b.n	8001efa <__malloc_lock+0x36>
        xReturn = pdTRUE;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	60fb      	str	r3, [r7, #12]
    return xReturn;
 8001efa:	68fb      	ldr	r3, [r7, #12]
    }
#endif

    DRN_ENTER_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d010      	beq.n	8001f26 <__malloc_lock+0x62>
    __asm volatile
 8001f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f08:	b672      	cpsid	i
 8001f0a:	f383 8811 	msr	BASEPRI, r3
 8001f0e:	f3bf 8f6f 	isb	sy
 8001f12:	f3bf 8f4f 	dsb	sy
 8001f16:	b662      	cpsie	i
 8001f18:	60bb      	str	r3, [r7, #8]
}
 8001f1a:	bf00      	nop
 8001f1c:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8001f20:	4804      	ldr	r0, [pc, #16]	@ (8001f34 <__malloc_lock+0x70>)
 8001f22:	f7ff fcfd 	bl	8001920 <vAssertCalled>
}
 8001f26:	bf00      	nop
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	200003f4 	.word	0x200003f4
 8001f34:	08010a74 	.word	0x08010a74

08001f38 <__malloc_unlock>:

// ----------------------------------------------------------------------------
__attribute__( ( weak ) ) void __malloc_unlock( struct _reent* r )
// ----------------------------------------------------------------------------
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
    ( void )r;

#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_MALLOC)
    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001f40:	f009 f890 	bl	800b064 <xTaskGetSchedulerState>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d104      	bne.n	8001f54 <__malloc_unlock+0x1c>
    {
        xSemaphoreGiveRecursive( mallocSemaphore );
 8001f4a:	4b04      	ldr	r3, [pc, #16]	@ (8001f5c <__malloc_unlock+0x24>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f007 fb92 	bl	8009678 <xQueueGiveMutexRecursive>
    }
#endif

    DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
}
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	200003f4 	.word	0x200003f4

08001f60 <pvPortMalloc>:
}

// ----------------------------------------------------------------------------
void* pvPortMalloc( size_t xSize )
// ----------------------------------------------------------------------------
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
    void* p = malloc( xSize );
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f00a f87b 	bl	800c064 <malloc>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	60fb      	str	r3, [r7, #12]
    return p;
 8001f72:	68fb      	ldr	r3, [r7, #12]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <vPortFree>:

// ----------------------------------------------------------------------------
void vPortFree( void* pv )
// ----------------------------------------------------------------------------
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
    free( pv );
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f00a f875 	bl	800c074 <free>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
	...

08001f94 <xPortGetFreeHeapSize>:

// ----------------------------------------------------------------------------
size_t xPortGetFreeHeapSize( void )
// ----------------------------------------------------------------------------
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08c      	sub	sp, #48	@ 0x30
 8001f98:	af00      	add	r7, sp, #0
	static int lockGuard = 0;
	if ( lockGuard != 0 ) return stickyHeapBytesRemaining;
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd0 <xPortGetFreeHeapSize+0x3c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <xPortGetFreeHeapSize+0x14>
 8001fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd4 <xPortGetFreeHeapSize+0x40>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	e00f      	b.n	8001fc8 <xPortGetFreeHeapSize+0x34>
	lockGuard = 1;
 8001fa8:	4b09      	ldr	r3, [pc, #36]	@ (8001fd0 <xPortGetFreeHeapSize+0x3c>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	601a      	str	r2, [r3, #0]
    struct mallinfo mi = mallinfo();
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f00a f909 	bl	800c1c8 <mallinfo>
    size_t result = mi.fordblks + heapBytesRemaining;
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb8:	4a07      	ldr	r2, [pc, #28]	@ (8001fd8 <xPortGetFreeHeapSize+0x44>)
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lockGuard = 0;
 8001fc0:	4b03      	ldr	r3, [pc, #12]	@ (8001fd0 <xPortGetFreeHeapSize+0x3c>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
    return result;
 8001fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3730      	adds	r7, #48	@ 0x30
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000408 	.word	0x20000408
 8001fd4:	20000400 	.word	0x20000400
 8001fd8:	200003fc 	.word	0x200003fc

08001fdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8002020 <HAL_MspInit+0x44>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	4a0e      	ldr	r2, [pc, #56]	@ (8002020 <HAL_MspInit+0x44>)
 8001fe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fee:	4b0c      	ldr	r3, [pc, #48]	@ (8002020 <HAL_MspInit+0x44>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffa:	4b09      	ldr	r3, [pc, #36]	@ (8002020 <HAL_MspInit+0x44>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffe:	4a08      	ldr	r2, [pc, #32]	@ (8002020 <HAL_MspInit+0x44>)
 8002000:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002004:	6453      	str	r3, [r2, #68]	@ 0x44
 8002006:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <HAL_MspInit+0x44>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40023800 	.word	0x40023800

08002024 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08a      	sub	sp, #40	@ 0x28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a1b      	ldr	r2, [pc, #108]	@ (80020b0 <HAL_SPI_MspInit+0x8c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d12f      	bne.n	80020a6 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002046:	4b1b      	ldr	r3, [pc, #108]	@ (80020b4 <HAL_SPI_MspInit+0x90>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204a:	4a1a      	ldr	r2, [pc, #104]	@ (80020b4 <HAL_SPI_MspInit+0x90>)
 800204c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002050:	6453      	str	r3, [r2, #68]	@ 0x44
 8002052:	4b18      	ldr	r3, [pc, #96]	@ (80020b4 <HAL_SPI_MspInit+0x90>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002056:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205e:	4b15      	ldr	r3, [pc, #84]	@ (80020b4 <HAL_SPI_MspInit+0x90>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002062:	4a14      	ldr	r2, [pc, #80]	@ (80020b4 <HAL_SPI_MspInit+0x90>)
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	6313      	str	r3, [r2, #48]	@ 0x30
 800206a:	4b12      	ldr	r3, [pc, #72]	@ (80020b4 <HAL_SPI_MspInit+0x90>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = STEP_SPI_SCK_Pin|STEP_SPI_MISO_Pin|STEP_SPI_MOSI_Pin;
 8002076:	23e0      	movs	r3, #224	@ 0xe0
 8002078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207a:	2302      	movs	r3, #2
 800207c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002082:	2303      	movs	r3, #3
 8002084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002086:	2305      	movs	r3, #5
 8002088:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208a:	f107 0314 	add.w	r3, r7, #20
 800208e:	4619      	mov	r1, r3
 8002090:	4809      	ldr	r0, [pc, #36]	@ (80020b8 <HAL_SPI_MspInit+0x94>)
 8002092:	f000 fcef 	bl	8002a74 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002096:	2200      	movs	r2, #0
 8002098:	2105      	movs	r1, #5
 800209a:	2023      	movs	r0, #35	@ 0x23
 800209c:	f000 faea 	bl	8002674 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80020a0:	2023      	movs	r0, #35	@ 0x23
 80020a2:	f000 fb13 	bl	80026cc <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80020a6:	bf00      	nop
 80020a8:	3728      	adds	r7, #40	@ 0x28
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40013000 	.word	0x40013000
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40020000 	.word	0x40020000

080020bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a23      	ldr	r2, [pc, #140]	@ (8002158 <HAL_TIM_Base_MspInit+0x9c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d11c      	bne.n	8002108 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020ce:	4b23      	ldr	r3, [pc, #140]	@ (800215c <HAL_TIM_Base_MspInit+0xa0>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d2:	4a22      	ldr	r2, [pc, #136]	@ (800215c <HAL_TIM_Base_MspInit+0xa0>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020da:	4b20      	ldr	r3, [pc, #128]	@ (800215c <HAL_TIM_Base_MspInit+0xa0>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80020e6:	2200      	movs	r2, #0
 80020e8:	2100      	movs	r1, #0
 80020ea:	2019      	movs	r0, #25
 80020ec:	f000 fac2 	bl	8002674 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80020f0:	2019      	movs	r0, #25
 80020f2:	f000 faeb 	bl	80026cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80020f6:	2200      	movs	r2, #0
 80020f8:	2100      	movs	r1, #0
 80020fa:	201b      	movs	r0, #27
 80020fc:	f000 faba 	bl	8002674 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002100:	201b      	movs	r0, #27
 8002102:	f000 fae3 	bl	80026cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002106:	e022      	b.n	800214e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002110:	d10c      	bne.n	800212c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002112:	4b12      	ldr	r3, [pc, #72]	@ (800215c <HAL_TIM_Base_MspInit+0xa0>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002116:	4a11      	ldr	r2, [pc, #68]	@ (800215c <HAL_TIM_Base_MspInit+0xa0>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	6413      	str	r3, [r2, #64]	@ 0x40
 800211e:	4b0f      	ldr	r3, [pc, #60]	@ (800215c <HAL_TIM_Base_MspInit+0xa0>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	693b      	ldr	r3, [r7, #16]
}
 800212a:	e010      	b.n	800214e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a0b      	ldr	r2, [pc, #44]	@ (8002160 <HAL_TIM_Base_MspInit+0xa4>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d10b      	bne.n	800214e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002136:	4b09      	ldr	r3, [pc, #36]	@ (800215c <HAL_TIM_Base_MspInit+0xa0>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	4a08      	ldr	r2, [pc, #32]	@ (800215c <HAL_TIM_Base_MspInit+0xa0>)
 800213c:	f043 0304 	orr.w	r3, r3, #4
 8002140:	6413      	str	r3, [r2, #64]	@ 0x40
 8002142:	4b06      	ldr	r3, [pc, #24]	@ (800215c <HAL_TIM_Base_MspInit+0xa0>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
}
 800214e:	bf00      	nop
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40010000 	.word	0x40010000
 800215c:	40023800 	.word	0x40023800
 8002160:	40000800 	.word	0x40000800

08002164 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	@ 0x28
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002184:	d11d      	bne.n	80021c2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002186:	4b22      	ldr	r3, [pc, #136]	@ (8002210 <HAL_TIM_MspPostInit+0xac>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	4a21      	ldr	r2, [pc, #132]	@ (8002210 <HAL_TIM_MspPostInit+0xac>)
 800218c:	f043 0302 	orr.w	r3, r3, #2
 8002190:	6313      	str	r3, [r2, #48]	@ 0x30
 8002192:	4b1f      	ldr	r3, [pc, #124]	@ (8002210 <HAL_TIM_MspPostInit+0xac>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = SPINDLE_PWM_L_Pin|SPINDLE_PWM_R_Pin;
 800219e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80021a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021b0:	2301      	movs	r3, #1
 80021b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	4619      	mov	r1, r3
 80021ba:	4816      	ldr	r0, [pc, #88]	@ (8002214 <HAL_TIM_MspPostInit+0xb0>)
 80021bc:	f000 fc5a 	bl	8002a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80021c0:	e021      	b.n	8002206 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a14      	ldr	r2, [pc, #80]	@ (8002218 <HAL_TIM_MspPostInit+0xb4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d11c      	bne.n	8002206 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021cc:	4b10      	ldr	r3, [pc, #64]	@ (8002210 <HAL_TIM_MspPostInit+0xac>)
 80021ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d0:	4a0f      	ldr	r2, [pc, #60]	@ (8002210 <HAL_TIM_MspPostInit+0xac>)
 80021d2:	f043 0308 	orr.w	r3, r3, #8
 80021d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80021d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002210 <HAL_TIM_MspPostInit+0xac>)
 80021da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80021e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ea:	2302      	movs	r3, #2
 80021ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f2:	2300      	movs	r3, #0
 80021f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021f6:	2302      	movs	r3, #2
 80021f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021fa:	f107 0314 	add.w	r3, r7, #20
 80021fe:	4619      	mov	r1, r3
 8002200:	4806      	ldr	r0, [pc, #24]	@ (800221c <HAL_TIM_MspPostInit+0xb8>)
 8002202:	f000 fc37 	bl	8002a74 <HAL_GPIO_Init>
}
 8002206:	bf00      	nop
 8002208:	3728      	adds	r7, #40	@ 0x28
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40023800 	.word	0x40023800
 8002214:	40020400 	.word	0x40020400
 8002218:	40000800 	.word	0x40000800
 800221c:	40020c00 	.word	0x40020c00

08002220 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b0aa      	sub	sp, #168	@ 0xa8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002228:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	60da      	str	r2, [r3, #12]
 8002236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002238:	f107 0310 	add.w	r3, r7, #16
 800223c:	2284      	movs	r2, #132	@ 0x84
 800223e:	2100      	movs	r1, #0
 8002240:	4618      	mov	r0, r3
 8002242:	f00b ff9d 	bl	800e180 <memset>
  if(huart->Instance==USART3)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a22      	ldr	r2, [pc, #136]	@ (80022d4 <HAL_UART_MspInit+0xb4>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d13c      	bne.n	80022ca <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002250:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002254:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002256:	2300      	movs	r3, #0
 8002258:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800225a:	f107 0310 	add.w	r3, r7, #16
 800225e:	4618      	mov	r0, r3
 8002260:	f001 fda0 	bl	8003da4 <HAL_RCCEx_PeriphCLKConfig>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800226a:	f7ff fc08 	bl	8001a7e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800226e:	4b1a      	ldr	r3, [pc, #104]	@ (80022d8 <HAL_UART_MspInit+0xb8>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002272:	4a19      	ldr	r2, [pc, #100]	@ (80022d8 <HAL_UART_MspInit+0xb8>)
 8002274:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002278:	6413      	str	r3, [r2, #64]	@ 0x40
 800227a:	4b17      	ldr	r3, [pc, #92]	@ (80022d8 <HAL_UART_MspInit+0xb8>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002286:	4b14      	ldr	r3, [pc, #80]	@ (80022d8 <HAL_UART_MspInit+0xb8>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	4a13      	ldr	r2, [pc, #76]	@ (80022d8 <HAL_UART_MspInit+0xb8>)
 800228c:	f043 0308 	orr.w	r3, r3, #8
 8002290:	6313      	str	r3, [r2, #48]	@ 0x30
 8002292:	4b11      	ldr	r3, [pc, #68]	@ (80022d8 <HAL_UART_MspInit+0xb8>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART_TX_Pin|DEBUG_UART_RX_Pin;
 800229e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80022a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a6:	2302      	movs	r3, #2
 80022a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b2:	2303      	movs	r3, #3
 80022b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022b8:	2307      	movs	r3, #7
 80022ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022be:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80022c2:	4619      	mov	r1, r3
 80022c4:	4805      	ldr	r0, [pc, #20]	@ (80022dc <HAL_UART_MspInit+0xbc>)
 80022c6:	f000 fbd5 	bl	8002a74 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80022ca:	bf00      	nop
 80022cc:	37a8      	adds	r7, #168	@ 0xa8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40004800 	.word	0x40004800
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40020c00 	.word	0x40020c00

080022e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022e4:	bf00      	nop
 80022e6:	e7fd      	b.n	80022e4 <NMI_Handler+0x4>

080022e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ec:	bf00      	nop
 80022ee:	e7fd      	b.n	80022ec <HardFault_Handler+0x4>

080022f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f4:	bf00      	nop
 80022f6:	e7fd      	b.n	80022f4 <MemManage_Handler+0x4>

080022f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022fc:	bf00      	nop
 80022fe:	e7fd      	b.n	80022fc <BusFault_Handler+0x4>

08002300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002304:	bf00      	nop
 8002306:	e7fd      	b.n	8002304 <UsageFault_Handler+0x4>

08002308 <DebugMon_Handler>:
void DebugMon_Handler(void)
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
#endif
void DebugMon_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
#endif
void SysTick_Handler(void)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	af00      	add	r7, sp, #0
  extern void xPortSysTickHandler( void );
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800231a:	f000 f89b 	bl	8002454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  xPortSysTickHandler();
 800231e:	f009 fe1b 	bl	800bf58 <xPortSysTickHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800232c:	4802      	ldr	r0, [pc, #8]	@ (8002338 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800232e:	f003 fdd9 	bl	8005ee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000284 	.word	0x20000284

0800233c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002340:	4802      	ldr	r0, [pc, #8]	@ (800234c <TIM1_CC_IRQHandler+0x10>)
 8002342:	f003 fdcf 	bl	8005ee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000284 	.word	0x20000284

08002350 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002354:	4802      	ldr	r0, [pc, #8]	@ (8002360 <SPI1_IRQHandler+0x10>)
 8002356:	f002 ff15 	bl	8005184 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000220 	.word	0x20000220

08002364 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002368:	4b06      	ldr	r3, [pc, #24]	@ (8002384 <SystemInit+0x20>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800236e:	4a05      	ldr	r2, [pc, #20]	@ (8002384 <SystemInit+0x20>)
 8002370:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002374:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002388:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023c0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800238c:	f7ff ffea 	bl	8002364 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002390:	480c      	ldr	r0, [pc, #48]	@ (80023c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002392:	490d      	ldr	r1, [pc, #52]	@ (80023c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002394:	4a0d      	ldr	r2, [pc, #52]	@ (80023cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002398:	e002      	b.n	80023a0 <LoopCopyDataInit>

0800239a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800239a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800239c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800239e:	3304      	adds	r3, #4

080023a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023a4:	d3f9      	bcc.n	800239a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023a6:	4a0a      	ldr	r2, [pc, #40]	@ (80023d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023a8:	4c0a      	ldr	r4, [pc, #40]	@ (80023d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023ac:	e001      	b.n	80023b2 <LoopFillZerobss>

080023ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023b0:	3204      	adds	r2, #4

080023b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023b4:	d3fb      	bcc.n	80023ae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80023b6:	f00b ffab 	bl	800e310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ba:	f7fe fee5 	bl	8001188 <main>
  bx  lr    
 80023be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023c0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80023c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023c8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80023cc:	0801130c 	.word	0x0801130c
  ldr r2, =_sbss
 80023d0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80023d4:	200006fc 	.word	0x200006fc

080023d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023d8:	e7fe      	b.n	80023d8 <ADC_IRQHandler>

080023da <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023de:	2003      	movs	r0, #3
 80023e0:	f000 f928 	bl	8002634 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023e4:	200f      	movs	r0, #15
 80023e6:	f000 f805 	bl	80023f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023ea:	f7ff fdf7 	bl	8001fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023fc:	4b12      	ldr	r3, [pc, #72]	@ (8002448 <HAL_InitTick+0x54>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	4b12      	ldr	r3, [pc, #72]	@ (800244c <HAL_InitTick+0x58>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	4619      	mov	r1, r3
 8002406:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800240a:	fbb3 f3f1 	udiv	r3, r3, r1
 800240e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002412:	4618      	mov	r0, r3
 8002414:	f000 f972 	bl	80026fc <HAL_SYSTICK_Config>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e00e      	b.n	8002440 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b0f      	cmp	r3, #15
 8002426:	d80a      	bhi.n	800243e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002428:	2200      	movs	r2, #0
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	f04f 30ff 	mov.w	r0, #4294967295
 8002430:	f000 f920 	bl	8002674 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002434:	4a06      	ldr	r2, [pc, #24]	@ (8002450 <HAL_InitTick+0x5c>)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	e000      	b.n	8002440 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
}
 8002440:	4618      	mov	r0, r3
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20000004 	.word	0x20000004
 800244c:	2000000c 	.word	0x2000000c
 8002450:	20000008 	.word	0x20000008

08002454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002458:	4b06      	ldr	r3, [pc, #24]	@ (8002474 <HAL_IncTick+0x20>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	461a      	mov	r2, r3
 800245e:	4b06      	ldr	r3, [pc, #24]	@ (8002478 <HAL_IncTick+0x24>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4413      	add	r3, r2
 8002464:	4a04      	ldr	r2, [pc, #16]	@ (8002478 <HAL_IncTick+0x24>)
 8002466:	6013      	str	r3, [r2, #0]
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	2000000c 	.word	0x2000000c
 8002478:	2000040c 	.word	0x2000040c

0800247c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return uwTick;
 8002480:	4b03      	ldr	r3, [pc, #12]	@ (8002490 <HAL_GetTick+0x14>)
 8002482:	681b      	ldr	r3, [r3, #0]
}
 8002484:	4618      	mov	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	2000040c 	.word	0x2000040c

08002494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a4:	4b0b      	ldr	r3, [pc, #44]	@ (80024d4 <__NVIC_SetPriorityGrouping+0x40>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024b0:	4013      	ands	r3, r2
 80024b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80024bc:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <__NVIC_SetPriorityGrouping+0x44>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024c2:	4a04      	ldr	r2, [pc, #16]	@ (80024d4 <__NVIC_SetPriorityGrouping+0x40>)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	60d3      	str	r3, [r2, #12]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	e000ed00 	.word	0xe000ed00
 80024d8:	05fa0000 	.word	0x05fa0000

080024dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e0:	4b04      	ldr	r3, [pc, #16]	@ (80024f4 <__NVIC_GetPriorityGrouping+0x18>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	0a1b      	lsrs	r3, r3, #8
 80024e6:	f003 0307 	and.w	r3, r3, #7
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002506:	2b00      	cmp	r3, #0
 8002508:	db0b      	blt.n	8002522 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	f003 021f 	and.w	r2, r3, #31
 8002510:	4907      	ldr	r1, [pc, #28]	@ (8002530 <__NVIC_EnableIRQ+0x38>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	095b      	lsrs	r3, r3, #5
 8002518:	2001      	movs	r0, #1
 800251a:	fa00 f202 	lsl.w	r2, r0, r2
 800251e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	e000e100 	.word	0xe000e100

08002534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	6039      	str	r1, [r7, #0]
 800253e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002544:	2b00      	cmp	r3, #0
 8002546:	db0a      	blt.n	800255e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	b2da      	uxtb	r2, r3
 800254c:	490c      	ldr	r1, [pc, #48]	@ (8002580 <__NVIC_SetPriority+0x4c>)
 800254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002552:	0112      	lsls	r2, r2, #4
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	440b      	add	r3, r1
 8002558:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800255c:	e00a      	b.n	8002574 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4908      	ldr	r1, [pc, #32]	@ (8002584 <__NVIC_SetPriority+0x50>)
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	3b04      	subs	r3, #4
 800256c:	0112      	lsls	r2, r2, #4
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	440b      	add	r3, r1
 8002572:	761a      	strb	r2, [r3, #24]
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000e100 	.word	0xe000e100
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002588:	b480      	push	{r7}
 800258a:	b089      	sub	sp, #36	@ 0x24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f1c3 0307 	rsb	r3, r3, #7
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	bf28      	it	cs
 80025a6:	2304      	movcs	r3, #4
 80025a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3304      	adds	r3, #4
 80025ae:	2b06      	cmp	r3, #6
 80025b0:	d902      	bls.n	80025b8 <NVIC_EncodePriority+0x30>
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3b03      	subs	r3, #3
 80025b6:	e000      	b.n	80025ba <NVIC_EncodePriority+0x32>
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025bc:	f04f 32ff 	mov.w	r2, #4294967295
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43da      	mvns	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	401a      	ands	r2, r3
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d0:	f04f 31ff 	mov.w	r1, #4294967295
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	fa01 f303 	lsl.w	r3, r1, r3
 80025da:	43d9      	mvns	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e0:	4313      	orrs	r3, r2
         );
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3724      	adds	r7, #36	@ 0x24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
	...

080025f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002600:	d301      	bcc.n	8002606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002602:	2301      	movs	r3, #1
 8002604:	e00f      	b.n	8002626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002606:	4a0a      	ldr	r2, [pc, #40]	@ (8002630 <SysTick_Config+0x40>)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3b01      	subs	r3, #1
 800260c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800260e:	210f      	movs	r1, #15
 8002610:	f04f 30ff 	mov.w	r0, #4294967295
 8002614:	f7ff ff8e 	bl	8002534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002618:	4b05      	ldr	r3, [pc, #20]	@ (8002630 <SysTick_Config+0x40>)
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800261e:	4b04      	ldr	r3, [pc, #16]	@ (8002630 <SysTick_Config+0x40>)
 8002620:	2207      	movs	r2, #7
 8002622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	e000e010 	.word	0xe000e010

08002634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b07      	cmp	r3, #7
 8002640:	d00f      	beq.n	8002662 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b06      	cmp	r3, #6
 8002646:	d00c      	beq.n	8002662 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b05      	cmp	r3, #5
 800264c:	d009      	beq.n	8002662 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b04      	cmp	r3, #4
 8002652:	d006      	beq.n	8002662 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b03      	cmp	r3, #3
 8002658:	d003      	beq.n	8002662 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800265a:	2191      	movs	r1, #145	@ 0x91
 800265c:	4804      	ldr	r0, [pc, #16]	@ (8002670 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800265e:	f7ff fa15 	bl	8001a8c <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff ff16 	bl	8002494 <__NVIC_SetPriorityGrouping>
}
 8002668:	bf00      	nop
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	08010a90 	.word	0x08010a90

08002674 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
 8002680:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b0f      	cmp	r3, #15
 800268a:	d903      	bls.n	8002694 <HAL_NVIC_SetPriority+0x20>
 800268c:	21a9      	movs	r1, #169	@ 0xa9
 800268e:	480e      	ldr	r0, [pc, #56]	@ (80026c8 <HAL_NVIC_SetPriority+0x54>)
 8002690:	f7ff f9fc 	bl	8001a8c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	2b0f      	cmp	r3, #15
 8002698:	d903      	bls.n	80026a2 <HAL_NVIC_SetPriority+0x2e>
 800269a:	21aa      	movs	r1, #170	@ 0xaa
 800269c:	480a      	ldr	r0, [pc, #40]	@ (80026c8 <HAL_NVIC_SetPriority+0x54>)
 800269e:	f7ff f9f5 	bl	8001a8c <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026a2:	f7ff ff1b 	bl	80024dc <__NVIC_GetPriorityGrouping>
 80026a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	68b9      	ldr	r1, [r7, #8]
 80026ac:	6978      	ldr	r0, [r7, #20]
 80026ae:	f7ff ff6b 	bl	8002588 <NVIC_EncodePriority>
 80026b2:	4602      	mov	r2, r0
 80026b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff ff3a 	bl	8002534 <__NVIC_SetPriority>
}
 80026c0:	bf00      	nop
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	08010a90 	.word	0x08010a90

080026cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80026d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	da03      	bge.n	80026e6 <HAL_NVIC_EnableIRQ+0x1a>
 80026de:	21bd      	movs	r1, #189	@ 0xbd
 80026e0:	4805      	ldr	r0, [pc, #20]	@ (80026f8 <HAL_NVIC_EnableIRQ+0x2c>)
 80026e2:	f7ff f9d3 	bl	8001a8c <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff ff04 	bl	80024f8 <__NVIC_EnableIRQ>
}
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	08010a90 	.word	0x08010a90

080026fc <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7ff ff73 	bl	80025f0 <SysTick_Config>
 800270a:	4603      	mov	r3, r0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002718:	f3bf 8f5f 	dmb	sy
}
 800271c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800271e:	4b07      	ldr	r3, [pc, #28]	@ (800273c <HAL_MPU_Disable+0x28>)
 8002720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002722:	4a06      	ldr	r2, [pc, #24]	@ (800273c <HAL_MPU_Disable+0x28>)
 8002724:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002728:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800272a:	4b05      	ldr	r3, [pc, #20]	@ (8002740 <HAL_MPU_Disable+0x2c>)
 800272c:	2200      	movs	r2, #0
 800272e:	605a      	str	r2, [r3, #4]
}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	e000ed00 	.word	0xe000ed00
 8002740:	e000ed90 	.word	0xe000ed90

08002744 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800274c:	4a0b      	ldr	r2, [pc, #44]	@ (800277c <HAL_MPU_Enable+0x38>)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002756:	4b0a      	ldr	r3, [pc, #40]	@ (8002780 <HAL_MPU_Enable+0x3c>)
 8002758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275a:	4a09      	ldr	r2, [pc, #36]	@ (8002780 <HAL_MPU_Enable+0x3c>)
 800275c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002760:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002762:	f3bf 8f4f 	dsb	sy
}
 8002766:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002768:	f3bf 8f6f 	isb	sy
}
 800276c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	e000ed90 	.word	0xe000ed90
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	785b      	ldrb	r3, [r3, #1]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d020      	beq.n	80027d6 <HAL_MPU_ConfigRegion+0x52>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	785b      	ldrb	r3, [r3, #1]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d01c      	beq.n	80027d6 <HAL_MPU_ConfigRegion+0x52>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	785b      	ldrb	r3, [r3, #1]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d018      	beq.n	80027d6 <HAL_MPU_ConfigRegion+0x52>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	785b      	ldrb	r3, [r3, #1]
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	d014      	beq.n	80027d6 <HAL_MPU_ConfigRegion+0x52>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	785b      	ldrb	r3, [r3, #1]
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d010      	beq.n	80027d6 <HAL_MPU_ConfigRegion+0x52>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	785b      	ldrb	r3, [r3, #1]
 80027b8:	2b05      	cmp	r3, #5
 80027ba:	d00c      	beq.n	80027d6 <HAL_MPU_ConfigRegion+0x52>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	785b      	ldrb	r3, [r3, #1]
 80027c0:	2b06      	cmp	r3, #6
 80027c2:	d008      	beq.n	80027d6 <HAL_MPU_ConfigRegion+0x52>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	785b      	ldrb	r3, [r3, #1]
 80027c8:	2b07      	cmp	r3, #7
 80027ca:	d004      	beq.n	80027d6 <HAL_MPU_ConfigRegion+0x52>
 80027cc:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 80027d0:	488c      	ldr	r0, [pc, #560]	@ (8002a04 <HAL_MPU_ConfigRegion+0x280>)
 80027d2:	f7ff f95b 	bl	8001a8c <assert_failed>
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d008      	beq.n	80027f0 <HAL_MPU_ConfigRegion+0x6c>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d004      	beq.n	80027f0 <HAL_MPU_ConfigRegion+0x6c>
 80027e6:	f240 114f 	movw	r1, #335	@ 0x14f
 80027ea:	4886      	ldr	r0, [pc, #536]	@ (8002a04 <HAL_MPU_ConfigRegion+0x280>)
 80027ec:	f7ff f94e 	bl	8001a8c <assert_failed>
  assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	7b1b      	ldrb	r3, [r3, #12]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d008      	beq.n	800280a <HAL_MPU_ConfigRegion+0x86>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	7b1b      	ldrb	r3, [r3, #12]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d004      	beq.n	800280a <HAL_MPU_ConfigRegion+0x86>
 8002800:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8002804:	487f      	ldr	r0, [pc, #508]	@ (8002a04 <HAL_MPU_ConfigRegion+0x280>)
 8002806:	f7ff f941 	bl	8001a8c <assert_failed>
  assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	7adb      	ldrb	r3, [r3, #11]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d018      	beq.n	8002844 <HAL_MPU_ConfigRegion+0xc0>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	7adb      	ldrb	r3, [r3, #11]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d014      	beq.n	8002844 <HAL_MPU_ConfigRegion+0xc0>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	7adb      	ldrb	r3, [r3, #11]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d010      	beq.n	8002844 <HAL_MPU_ConfigRegion+0xc0>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	7adb      	ldrb	r3, [r3, #11]
 8002826:	2b03      	cmp	r3, #3
 8002828:	d00c      	beq.n	8002844 <HAL_MPU_ConfigRegion+0xc0>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	7adb      	ldrb	r3, [r3, #11]
 800282e:	2b05      	cmp	r3, #5
 8002830:	d008      	beq.n	8002844 <HAL_MPU_ConfigRegion+0xc0>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	7adb      	ldrb	r3, [r3, #11]
 8002836:	2b06      	cmp	r3, #6
 8002838:	d004      	beq.n	8002844 <HAL_MPU_ConfigRegion+0xc0>
 800283a:	f240 1151 	movw	r1, #337	@ 0x151
 800283e:	4871      	ldr	r0, [pc, #452]	@ (8002a04 <HAL_MPU_ConfigRegion+0x280>)
 8002840:	f7ff f924 	bl	8001a8c <assert_failed>
  assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	7a9b      	ldrb	r3, [r3, #10]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00c      	beq.n	8002866 <HAL_MPU_ConfigRegion+0xe2>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	7a9b      	ldrb	r3, [r3, #10]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d008      	beq.n	8002866 <HAL_MPU_ConfigRegion+0xe2>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	7a9b      	ldrb	r3, [r3, #10]
 8002858:	2b02      	cmp	r3, #2
 800285a:	d004      	beq.n	8002866 <HAL_MPU_ConfigRegion+0xe2>
 800285c:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8002860:	4868      	ldr	r0, [pc, #416]	@ (8002a04 <HAL_MPU_ConfigRegion+0x280>)
 8002862:	f7ff f913 	bl	8001a8c <assert_failed>
  assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	7b5b      	ldrb	r3, [r3, #13]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d008      	beq.n	8002880 <HAL_MPU_ConfigRegion+0xfc>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	7b5b      	ldrb	r3, [r3, #13]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d004      	beq.n	8002880 <HAL_MPU_ConfigRegion+0xfc>
 8002876:	f240 1153 	movw	r1, #339	@ 0x153
 800287a:	4862      	ldr	r0, [pc, #392]	@ (8002a04 <HAL_MPU_ConfigRegion+0x280>)
 800287c:	f7ff f906 	bl	8001a8c <assert_failed>
  assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	7b9b      	ldrb	r3, [r3, #14]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d008      	beq.n	800289a <HAL_MPU_ConfigRegion+0x116>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	7b9b      	ldrb	r3, [r3, #14]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d004      	beq.n	800289a <HAL_MPU_ConfigRegion+0x116>
 8002890:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8002894:	485b      	ldr	r0, [pc, #364]	@ (8002a04 <HAL_MPU_ConfigRegion+0x280>)
 8002896:	f7ff f8f9 	bl	8001a8c <assert_failed>
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	7bdb      	ldrb	r3, [r3, #15]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d008      	beq.n	80028b4 <HAL_MPU_ConfigRegion+0x130>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	7bdb      	ldrb	r3, [r3, #15]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d004      	beq.n	80028b4 <HAL_MPU_ConfigRegion+0x130>
 80028aa:	f240 1155 	movw	r1, #341	@ 0x155
 80028ae:	4855      	ldr	r0, [pc, #340]	@ (8002a04 <HAL_MPU_ConfigRegion+0x280>)
 80028b0:	f7ff f8ec 	bl	8001a8c <assert_failed>
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	7a5b      	ldrb	r3, [r3, #9]
 80028b8:	2bff      	cmp	r3, #255	@ 0xff
 80028ba:	d104      	bne.n	80028c6 <HAL_MPU_ConfigRegion+0x142>
 80028bc:	f44f 71ab 	mov.w	r1, #342	@ 0x156
 80028c0:	4850      	ldr	r0, [pc, #320]	@ (8002a04 <HAL_MPU_ConfigRegion+0x280>)
 80028c2:	f7ff f8e3 	bl	8001a8c <assert_failed>
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	7a1b      	ldrb	r3, [r3, #8]
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d070      	beq.n	80029b0 <HAL_MPU_ConfigRegion+0x22c>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	7a1b      	ldrb	r3, [r3, #8]
 80028d2:	2b05      	cmp	r3, #5
 80028d4:	d06c      	beq.n	80029b0 <HAL_MPU_ConfigRegion+0x22c>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	7a1b      	ldrb	r3, [r3, #8]
 80028da:	2b06      	cmp	r3, #6
 80028dc:	d068      	beq.n	80029b0 <HAL_MPU_ConfigRegion+0x22c>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	7a1b      	ldrb	r3, [r3, #8]
 80028e2:	2b07      	cmp	r3, #7
 80028e4:	d064      	beq.n	80029b0 <HAL_MPU_ConfigRegion+0x22c>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	7a1b      	ldrb	r3, [r3, #8]
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d060      	beq.n	80029b0 <HAL_MPU_ConfigRegion+0x22c>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	7a1b      	ldrb	r3, [r3, #8]
 80028f2:	2b09      	cmp	r3, #9
 80028f4:	d05c      	beq.n	80029b0 <HAL_MPU_ConfigRegion+0x22c>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	7a1b      	ldrb	r3, [r3, #8]
 80028fa:	2b0a      	cmp	r3, #10
 80028fc:	d058      	beq.n	80029b0 <HAL_MPU_ConfigRegion+0x22c>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	7a1b      	ldrb	r3, [r3, #8]
 8002902:	2b0b      	cmp	r3, #11
 8002904:	d054      	beq.n	80029b0 <HAL_MPU_ConfigRegion+0x22c>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	7a1b      	ldrb	r3, [r3, #8]
 800290a:	2b0c      	cmp	r3, #12
 800290c:	d050      	beq.n	80029b0 <HAL_MPU_ConfigRegion+0x22c>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	7a1b      	ldrb	r3, [r3, #8]
 8002912:	2b0d      	cmp	r3, #13
 8002914:	d04c      	beq.n	80029b0 <HAL_MPU_ConfigRegion+0x22c>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	7a1b      	ldrb	r3, [r3, #8]
 800291a:	2b0e      	cmp	r3, #14
 800291c:	d048      	beq.n	80029b0 <HAL_MPU_ConfigRegion+0x22c>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	7a1b      	ldrb	r3, [r3, #8]
 8002922:	2b0f      	cmp	r3, #15
 8002924:	d044      	beq.n	80029b0 <HAL_MPU_ConfigRegion+0x22c>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	7a1b      	ldrb	r3, [r3, #8]
 800292a:	2b10      	cmp	r3, #16
 800292c:	d040      	beq.n	80029b0 <HAL_MPU_ConfigRegion+0x22c>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	7a1b      	ldrb	r3, [r3, #8]
 8002932:	2b11      	cmp	r3, #17
 8002934:	d03c      	beq.n	80029b0 <HAL_MPU_ConfigRegion+0x22c>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	7a1b      	ldrb	r3, [r3, #8]
 800293a:	2b12      	cmp	r3, #18
 800293c:	d038      	beq.n	80029b0 <HAL_MPU_ConfigRegion+0x22c>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	7a1b      	ldrb	r3, [r3, #8]
 8002942:	2b13      	cmp	r3, #19
 8002944:	d034      	beq.n	80029b0 <HAL_MPU_ConfigRegion+0x22c>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	7a1b      	ldrb	r3, [r3, #8]
 800294a:	2b14      	cmp	r3, #20
 800294c:	d030      	beq.n	80029b0 <HAL_MPU_ConfigRegion+0x22c>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	7a1b      	ldrb	r3, [r3, #8]
 8002952:	2b15      	cmp	r3, #21
 8002954:	d02c      	beq.n	80029b0 <HAL_MPU_ConfigRegion+0x22c>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	7a1b      	ldrb	r3, [r3, #8]
 800295a:	2b16      	cmp	r3, #22
 800295c:	d028      	beq.n	80029b0 <HAL_MPU_ConfigRegion+0x22c>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	7a1b      	ldrb	r3, [r3, #8]
 8002962:	2b17      	cmp	r3, #23
 8002964:	d024      	beq.n	80029b0 <HAL_MPU_ConfigRegion+0x22c>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	7a1b      	ldrb	r3, [r3, #8]
 800296a:	2b18      	cmp	r3, #24
 800296c:	d020      	beq.n	80029b0 <HAL_MPU_ConfigRegion+0x22c>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	7a1b      	ldrb	r3, [r3, #8]
 8002972:	2b19      	cmp	r3, #25
 8002974:	d01c      	beq.n	80029b0 <HAL_MPU_ConfigRegion+0x22c>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	7a1b      	ldrb	r3, [r3, #8]
 800297a:	2b1a      	cmp	r3, #26
 800297c:	d018      	beq.n	80029b0 <HAL_MPU_ConfigRegion+0x22c>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	7a1b      	ldrb	r3, [r3, #8]
 8002982:	2b1b      	cmp	r3, #27
 8002984:	d014      	beq.n	80029b0 <HAL_MPU_ConfigRegion+0x22c>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	7a1b      	ldrb	r3, [r3, #8]
 800298a:	2b1c      	cmp	r3, #28
 800298c:	d010      	beq.n	80029b0 <HAL_MPU_ConfigRegion+0x22c>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	7a1b      	ldrb	r3, [r3, #8]
 8002992:	2b1d      	cmp	r3, #29
 8002994:	d00c      	beq.n	80029b0 <HAL_MPU_ConfigRegion+0x22c>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	7a1b      	ldrb	r3, [r3, #8]
 800299a:	2b1e      	cmp	r3, #30
 800299c:	d008      	beq.n	80029b0 <HAL_MPU_ConfigRegion+0x22c>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	7a1b      	ldrb	r3, [r3, #8]
 80029a2:	2b1f      	cmp	r3, #31
 80029a4:	d004      	beq.n	80029b0 <HAL_MPU_ConfigRegion+0x22c>
 80029a6:	f240 1157 	movw	r1, #343	@ 0x157
 80029aa:	4816      	ldr	r0, [pc, #88]	@ (8002a04 <HAL_MPU_ConfigRegion+0x280>)
 80029ac:	f7ff f86e 	bl	8001a8c <assert_failed>

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	785a      	ldrb	r2, [r3, #1]
 80029b4:	4b14      	ldr	r3, [pc, #80]	@ (8002a08 <HAL_MPU_ConfigRegion+0x284>)
 80029b6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80029b8:	4b13      	ldr	r3, [pc, #76]	@ (8002a08 <HAL_MPU_ConfigRegion+0x284>)
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	4a12      	ldr	r2, [pc, #72]	@ (8002a08 <HAL_MPU_ConfigRegion+0x284>)
 80029be:	f023 0301 	bic.w	r3, r3, #1
 80029c2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80029c4:	4a10      	ldr	r2, [pc, #64]	@ (8002a08 <HAL_MPU_ConfigRegion+0x284>)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	7b1b      	ldrb	r3, [r3, #12]
 80029d0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	7adb      	ldrb	r3, [r3, #11]
 80029d6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	7a9b      	ldrb	r3, [r3, #10]
 80029de:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80029e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	7b5b      	ldrb	r3, [r3, #13]
 80029e6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80029e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	7b9b      	ldrb	r3, [r3, #14]
 80029ee:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80029f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	7bdb      	ldrb	r3, [r3, #15]
 80029f6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80029f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	7a5b      	ldrb	r3, [r3, #9]
 80029fe:	021b      	lsls	r3, r3, #8
 8002a00:	e004      	b.n	8002a0c <HAL_MPU_ConfigRegion+0x288>
 8002a02:	bf00      	nop
 8002a04:	08010a90 	.word	0x08010a90
 8002a08:	e000ed90 	.word	0xe000ed90
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002a0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	7a1b      	ldrb	r3, [r3, #8]
 8002a12:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002a14:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	7812      	ldrb	r2, [r2, #0]
 8002a1a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a1c:	4a03      	ldr	r2, [pc, #12]	@ (8002a2c <HAL_MPU_ConfigRegion+0x2a8>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002a1e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a20:	6113      	str	r3, [r2, #16]
}
 8002a22:	bf00      	nop
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	e000ed90 	.word	0xe000ed90

08002a30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d004      	beq.n	8002a4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2280      	movs	r2, #128	@ 0x80
 8002a48:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e00c      	b.n	8002a68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2205      	movs	r2, #5
 8002a52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0201 	bic.w	r2, r2, #1
 8002a64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a86:	2300      	movs	r3, #0
 8002a88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a3a      	ldr	r2, [pc, #232]	@ (8002b7c <HAL_GPIO_Init+0x108>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d02b      	beq.n	8002aee <HAL_GPIO_Init+0x7a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a39      	ldr	r2, [pc, #228]	@ (8002b80 <HAL_GPIO_Init+0x10c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d027      	beq.n	8002aee <HAL_GPIO_Init+0x7a>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a38      	ldr	r2, [pc, #224]	@ (8002b84 <HAL_GPIO_Init+0x110>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d023      	beq.n	8002aee <HAL_GPIO_Init+0x7a>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a37      	ldr	r2, [pc, #220]	@ (8002b88 <HAL_GPIO_Init+0x114>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d01f      	beq.n	8002aee <HAL_GPIO_Init+0x7a>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a36      	ldr	r2, [pc, #216]	@ (8002b8c <HAL_GPIO_Init+0x118>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d01b      	beq.n	8002aee <HAL_GPIO_Init+0x7a>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a35      	ldr	r2, [pc, #212]	@ (8002b90 <HAL_GPIO_Init+0x11c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d017      	beq.n	8002aee <HAL_GPIO_Init+0x7a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a34      	ldr	r2, [pc, #208]	@ (8002b94 <HAL_GPIO_Init+0x120>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d013      	beq.n	8002aee <HAL_GPIO_Init+0x7a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a33      	ldr	r2, [pc, #204]	@ (8002b98 <HAL_GPIO_Init+0x124>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d00f      	beq.n	8002aee <HAL_GPIO_Init+0x7a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a32      	ldr	r2, [pc, #200]	@ (8002b9c <HAL_GPIO_Init+0x128>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d00b      	beq.n	8002aee <HAL_GPIO_Init+0x7a>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a31      	ldr	r2, [pc, #196]	@ (8002ba0 <HAL_GPIO_Init+0x12c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d007      	beq.n	8002aee <HAL_GPIO_Init+0x7a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a30      	ldr	r2, [pc, #192]	@ (8002ba4 <HAL_GPIO_Init+0x130>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_Init+0x7a>
 8002ae6:	21aa      	movs	r1, #170	@ 0xaa
 8002ae8:	482f      	ldr	r0, [pc, #188]	@ (8002ba8 <HAL_GPIO_Init+0x134>)
 8002aea:	f7fe ffcf 	bl	8001a8c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d103      	bne.n	8002b00 <HAL_GPIO_Init+0x8c>
 8002af8:	21ab      	movs	r1, #171	@ 0xab
 8002afa:	482b      	ldr	r0, [pc, #172]	@ (8002ba8 <HAL_GPIO_Init+0x134>)
 8002afc:	f7fe ffc6 	bl	8001a8c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d035      	beq.n	8002b74 <HAL_GPIO_Init+0x100>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d031      	beq.n	8002b74 <HAL_GPIO_Init+0x100>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b11      	cmp	r3, #17
 8002b16:	d02d      	beq.n	8002b74 <HAL_GPIO_Init+0x100>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d029      	beq.n	8002b74 <HAL_GPIO_Init+0x100>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b12      	cmp	r3, #18
 8002b26:	d025      	beq.n	8002b74 <HAL_GPIO_Init+0x100>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8002b30:	d020      	beq.n	8002b74 <HAL_GPIO_Init+0x100>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002b3a:	d01b      	beq.n	8002b74 <HAL_GPIO_Init+0x100>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8002b44:	d016      	beq.n	8002b74 <HAL_GPIO_Init+0x100>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8002b4e:	d011      	beq.n	8002b74 <HAL_GPIO_Init+0x100>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8002b58:	d00c      	beq.n	8002b74 <HAL_GPIO_Init+0x100>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8002b62:	d007      	beq.n	8002b74 <HAL_GPIO_Init+0x100>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d003      	beq.n	8002b74 <HAL_GPIO_Init+0x100>
 8002b6c:	21ac      	movs	r1, #172	@ 0xac
 8002b6e:	480e      	ldr	r0, [pc, #56]	@ (8002ba8 <HAL_GPIO_Init+0x134>)
 8002b70:	f7fe ff8c 	bl	8001a8c <assert_failed>

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002b74:	2300      	movs	r3, #0
 8002b76:	61fb      	str	r3, [r7, #28]
 8002b78:	e2c7      	b.n	800310a <HAL_GPIO_Init+0x696>
 8002b7a:	bf00      	nop
 8002b7c:	40020000 	.word	0x40020000
 8002b80:	40020400 	.word	0x40020400
 8002b84:	40020800 	.word	0x40020800
 8002b88:	40020c00 	.word	0x40020c00
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40021400 	.word	0x40021400
 8002b94:	40021800 	.word	0x40021800
 8002b98:	40021c00 	.word	0x40021c00
 8002b9c:	40022000 	.word	0x40022000
 8002ba0:	40022400 	.word	0x40022400
 8002ba4:	40022800 	.word	0x40022800
 8002ba8:	08010acc 	.word	0x08010acc
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002bac:	2201      	movs	r2, #1
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	f040 829d 	bne.w	8003104 <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d005      	beq.n	8002be2 <HAL_GPIO_Init+0x16e>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f003 0303 	and.w	r3, r3, #3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d144      	bne.n	8002c6c <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00f      	beq.n	8002c0a <HAL_GPIO_Init+0x196>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d00b      	beq.n	8002c0a <HAL_GPIO_Init+0x196>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d007      	beq.n	8002c0a <HAL_GPIO_Init+0x196>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d003      	beq.n	8002c0a <HAL_GPIO_Init+0x196>
 8002c02:	21bd      	movs	r1, #189	@ 0xbd
 8002c04:	4831      	ldr	r0, [pc, #196]	@ (8002ccc <HAL_GPIO_Init+0x258>)
 8002c06:	f7fe ff41 	bl	8001a8c <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	2203      	movs	r2, #3
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c40:	2201      	movs	r2, #1
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	091b      	lsrs	r3, r3, #4
 8002c56:	f003 0201 	and.w	r2, r3, #1
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 0303 	and.w	r3, r3, #3
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d02b      	beq.n	8002cd0 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00b      	beq.n	8002c98 <HAL_GPIO_Init+0x224>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d007      	beq.n	8002c98 <HAL_GPIO_Init+0x224>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x224>
 8002c90:	21ce      	movs	r1, #206	@ 0xce
 8002c92:	480e      	ldr	r0, [pc, #56]	@ (8002ccc <HAL_GPIO_Init+0x258>)
 8002c94:	f7fe fefa 	bl	8001a8c <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	60da      	str	r2, [r3, #12]
 8002cc8:	e002      	b.n	8002cd0 <HAL_GPIO_Init+0x25c>
 8002cca:	bf00      	nop
 8002ccc:	08010acc 	.word	0x08010acc
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	f040 8134 	bne.w	8002f46 <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 810b 	beq.w	8002efe <HAL_GPIO_Init+0x48a>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	f000 8106 	beq.w	8002efe <HAL_GPIO_Init+0x48a>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 8101 	beq.w	8002efe <HAL_GPIO_Init+0x48a>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 80fc 	beq.w	8002efe <HAL_GPIO_Init+0x48a>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 80f7 	beq.w	8002efe <HAL_GPIO_Init+0x48a>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	f000 80f2 	beq.w	8002efe <HAL_GPIO_Init+0x48a>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	f000 80ed 	beq.w	8002efe <HAL_GPIO_Init+0x48a>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	f000 80e8 	beq.w	8002efe <HAL_GPIO_Init+0x48a>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	f000 80e3 	beq.w	8002efe <HAL_GPIO_Init+0x48a>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	2b03      	cmp	r3, #3
 8002d3e:	f000 80de 	beq.w	8002efe <HAL_GPIO_Init+0x48a>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	f000 80d9 	beq.w	8002efe <HAL_GPIO_Init+0x48a>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	2b03      	cmp	r3, #3
 8002d52:	f000 80d4 	beq.w	8002efe <HAL_GPIO_Init+0x48a>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	2b03      	cmp	r3, #3
 8002d5c:	f000 80cf 	beq.w	8002efe <HAL_GPIO_Init+0x48a>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	f000 80ca 	beq.w	8002efe <HAL_GPIO_Init+0x48a>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	2b03      	cmp	r3, #3
 8002d70:	f000 80c5 	beq.w	8002efe <HAL_GPIO_Init+0x48a>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	2b04      	cmp	r3, #4
 8002d7a:	f000 80c0 	beq.w	8002efe <HAL_GPIO_Init+0x48a>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	f000 80bb 	beq.w	8002efe <HAL_GPIO_Init+0x48a>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	f000 80b6 	beq.w	8002efe <HAL_GPIO_Init+0x48a>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	f000 80b1 	beq.w	8002efe <HAL_GPIO_Init+0x48a>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	2b04      	cmp	r3, #4
 8002da2:	f000 80ac 	beq.w	8002efe <HAL_GPIO_Init+0x48a>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	2b05      	cmp	r3, #5
 8002dac:	f000 80a7 	beq.w	8002efe <HAL_GPIO_Init+0x48a>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	2b05      	cmp	r3, #5
 8002db6:	f000 80a2 	beq.w	8002efe <HAL_GPIO_Init+0x48a>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	2b05      	cmp	r3, #5
 8002dc0:	f000 809d 	beq.w	8002efe <HAL_GPIO_Init+0x48a>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	2b05      	cmp	r3, #5
 8002dca:	f000 8098 	beq.w	8002efe <HAL_GPIO_Init+0x48a>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	2b05      	cmp	r3, #5
 8002dd4:	f000 8093 	beq.w	8002efe <HAL_GPIO_Init+0x48a>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	2b05      	cmp	r3, #5
 8002dde:	f000 808e 	beq.w	8002efe <HAL_GPIO_Init+0x48a>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b06      	cmp	r3, #6
 8002de8:	f000 8089 	beq.w	8002efe <HAL_GPIO_Init+0x48a>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	2b06      	cmp	r3, #6
 8002df2:	f000 8084 	beq.w	8002efe <HAL_GPIO_Init+0x48a>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	2b07      	cmp	r3, #7
 8002dfc:	d07f      	beq.n	8002efe <HAL_GPIO_Init+0x48a>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	2b07      	cmp	r3, #7
 8002e04:	d07b      	beq.n	8002efe <HAL_GPIO_Init+0x48a>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	2b07      	cmp	r3, #7
 8002e0c:	d077      	beq.n	8002efe <HAL_GPIO_Init+0x48a>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	2b07      	cmp	r3, #7
 8002e14:	d073      	beq.n	8002efe <HAL_GPIO_Init+0x48a>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	2b07      	cmp	r3, #7
 8002e1c:	d06f      	beq.n	8002efe <HAL_GPIO_Init+0x48a>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	2b07      	cmp	r3, #7
 8002e24:	d06b      	beq.n	8002efe <HAL_GPIO_Init+0x48a>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b07      	cmp	r3, #7
 8002e2c:	d067      	beq.n	8002efe <HAL_GPIO_Init+0x48a>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d063      	beq.n	8002efe <HAL_GPIO_Init+0x48a>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d05f      	beq.n	8002efe <HAL_GPIO_Init+0x48a>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d05b      	beq.n	8002efe <HAL_GPIO_Init+0x48a>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	2b08      	cmp	r3, #8
 8002e4c:	d057      	beq.n	8002efe <HAL_GPIO_Init+0x48a>
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d053      	beq.n	8002efe <HAL_GPIO_Init+0x48a>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d04f      	beq.n	8002efe <HAL_GPIO_Init+0x48a>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	2b08      	cmp	r3, #8
 8002e64:	d04b      	beq.n	8002efe <HAL_GPIO_Init+0x48a>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	2b09      	cmp	r3, #9
 8002e6c:	d047      	beq.n	8002efe <HAL_GPIO_Init+0x48a>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	2b09      	cmp	r3, #9
 8002e74:	d043      	beq.n	8002efe <HAL_GPIO_Init+0x48a>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	2b09      	cmp	r3, #9
 8002e7c:	d03f      	beq.n	8002efe <HAL_GPIO_Init+0x48a>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	2b09      	cmp	r3, #9
 8002e84:	d03b      	beq.n	8002efe <HAL_GPIO_Init+0x48a>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	2b09      	cmp	r3, #9
 8002e8c:	d037      	beq.n	8002efe <HAL_GPIO_Init+0x48a>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	2b09      	cmp	r3, #9
 8002e94:	d033      	beq.n	8002efe <HAL_GPIO_Init+0x48a>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	2b09      	cmp	r3, #9
 8002e9c:	d02f      	beq.n	8002efe <HAL_GPIO_Init+0x48a>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	2b0a      	cmp	r3, #10
 8002ea4:	d02b      	beq.n	8002efe <HAL_GPIO_Init+0x48a>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	2b0a      	cmp	r3, #10
 8002eac:	d027      	beq.n	8002efe <HAL_GPIO_Init+0x48a>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	2b0a      	cmp	r3, #10
 8002eb4:	d023      	beq.n	8002efe <HAL_GPIO_Init+0x48a>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	2b0a      	cmp	r3, #10
 8002ebc:	d01f      	beq.n	8002efe <HAL_GPIO_Init+0x48a>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	2b0b      	cmp	r3, #11
 8002ec4:	d01b      	beq.n	8002efe <HAL_GPIO_Init+0x48a>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	2b0c      	cmp	r3, #12
 8002ecc:	d017      	beq.n	8002efe <HAL_GPIO_Init+0x48a>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	2b0c      	cmp	r3, #12
 8002ed4:	d013      	beq.n	8002efe <HAL_GPIO_Init+0x48a>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	2b0c      	cmp	r3, #12
 8002edc:	d00f      	beq.n	8002efe <HAL_GPIO_Init+0x48a>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	2b0f      	cmp	r3, #15
 8002ee4:	d00b      	beq.n	8002efe <HAL_GPIO_Init+0x48a>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	2b0d      	cmp	r3, #13
 8002eec:	d007      	beq.n	8002efe <HAL_GPIO_Init+0x48a>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	2b0e      	cmp	r3, #14
 8002ef4:	d003      	beq.n	8002efe <HAL_GPIO_Init+0x48a>
 8002ef6:	21db      	movs	r1, #219	@ 0xdb
 8002ef8:	4888      	ldr	r0, [pc, #544]	@ (800311c <HAL_GPIO_Init+0x6a8>)
 8002efa:	f7fe fdc7 	bl	8001a8c <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	08da      	lsrs	r2, r3, #3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3208      	adds	r2, #8
 8002f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	220f      	movs	r2, #15
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	691a      	ldr	r2, [r3, #16]
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	08da      	lsrs	r2, r3, #3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3208      	adds	r2, #8
 8002f40:	69b9      	ldr	r1, [r7, #24]
 8002f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	2203      	movs	r2, #3
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	43db      	mvns	r3, r3
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f003 0203 	and.w	r2, r3, #3
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 80be 	beq.w	8003104 <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f88:	4b65      	ldr	r3, [pc, #404]	@ (8003120 <HAL_GPIO_Init+0x6ac>)
 8002f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f8c:	4a64      	ldr	r2, [pc, #400]	@ (8003120 <HAL_GPIO_Init+0x6ac>)
 8002f8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f92:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f94:	4b62      	ldr	r3, [pc, #392]	@ (8003120 <HAL_GPIO_Init+0x6ac>)
 8002f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002fa0:	4a60      	ldr	r2, [pc, #384]	@ (8003124 <HAL_GPIO_Init+0x6b0>)
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	089b      	lsrs	r3, r3, #2
 8002fa6:	3302      	adds	r3, #2
 8002fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	f003 0303 	and.w	r3, r3, #3
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	220f      	movs	r2, #15
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a58      	ldr	r2, [pc, #352]	@ (8003128 <HAL_GPIO_Init+0x6b4>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d037      	beq.n	800303c <HAL_GPIO_Init+0x5c8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a57      	ldr	r2, [pc, #348]	@ (800312c <HAL_GPIO_Init+0x6b8>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d031      	beq.n	8003038 <HAL_GPIO_Init+0x5c4>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a56      	ldr	r2, [pc, #344]	@ (8003130 <HAL_GPIO_Init+0x6bc>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d02b      	beq.n	8003034 <HAL_GPIO_Init+0x5c0>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a55      	ldr	r2, [pc, #340]	@ (8003134 <HAL_GPIO_Init+0x6c0>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d025      	beq.n	8003030 <HAL_GPIO_Init+0x5bc>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a54      	ldr	r2, [pc, #336]	@ (8003138 <HAL_GPIO_Init+0x6c4>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d01f      	beq.n	800302c <HAL_GPIO_Init+0x5b8>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a53      	ldr	r2, [pc, #332]	@ (800313c <HAL_GPIO_Init+0x6c8>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d019      	beq.n	8003028 <HAL_GPIO_Init+0x5b4>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a52      	ldr	r2, [pc, #328]	@ (8003140 <HAL_GPIO_Init+0x6cc>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d013      	beq.n	8003024 <HAL_GPIO_Init+0x5b0>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a51      	ldr	r2, [pc, #324]	@ (8003144 <HAL_GPIO_Init+0x6d0>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d00d      	beq.n	8003020 <HAL_GPIO_Init+0x5ac>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a50      	ldr	r2, [pc, #320]	@ (8003148 <HAL_GPIO_Init+0x6d4>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d007      	beq.n	800301c <HAL_GPIO_Init+0x5a8>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a4f      	ldr	r2, [pc, #316]	@ (800314c <HAL_GPIO_Init+0x6d8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d101      	bne.n	8003018 <HAL_GPIO_Init+0x5a4>
 8003014:	2309      	movs	r3, #9
 8003016:	e012      	b.n	800303e <HAL_GPIO_Init+0x5ca>
 8003018:	230a      	movs	r3, #10
 800301a:	e010      	b.n	800303e <HAL_GPIO_Init+0x5ca>
 800301c:	2308      	movs	r3, #8
 800301e:	e00e      	b.n	800303e <HAL_GPIO_Init+0x5ca>
 8003020:	2307      	movs	r3, #7
 8003022:	e00c      	b.n	800303e <HAL_GPIO_Init+0x5ca>
 8003024:	2306      	movs	r3, #6
 8003026:	e00a      	b.n	800303e <HAL_GPIO_Init+0x5ca>
 8003028:	2305      	movs	r3, #5
 800302a:	e008      	b.n	800303e <HAL_GPIO_Init+0x5ca>
 800302c:	2304      	movs	r3, #4
 800302e:	e006      	b.n	800303e <HAL_GPIO_Init+0x5ca>
 8003030:	2303      	movs	r3, #3
 8003032:	e004      	b.n	800303e <HAL_GPIO_Init+0x5ca>
 8003034:	2302      	movs	r3, #2
 8003036:	e002      	b.n	800303e <HAL_GPIO_Init+0x5ca>
 8003038:	2301      	movs	r3, #1
 800303a:	e000      	b.n	800303e <HAL_GPIO_Init+0x5ca>
 800303c:	2300      	movs	r3, #0
 800303e:	69fa      	ldr	r2, [r7, #28]
 8003040:	f002 0203 	and.w	r2, r2, #3
 8003044:	0092      	lsls	r2, r2, #2
 8003046:	4093      	lsls	r3, r2
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4313      	orrs	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800304e:	4935      	ldr	r1, [pc, #212]	@ (8003124 <HAL_GPIO_Init+0x6b0>)
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	089b      	lsrs	r3, r3, #2
 8003054:	3302      	adds	r3, #2
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800305c:	4b3c      	ldr	r3, [pc, #240]	@ (8003150 <HAL_GPIO_Init+0x6dc>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	43db      	mvns	r3, r3
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4013      	ands	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d003      	beq.n	8003080 <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003080:	4a33      	ldr	r2, [pc, #204]	@ (8003150 <HAL_GPIO_Init+0x6dc>)
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003086:	4b32      	ldr	r3, [pc, #200]	@ (8003150 <HAL_GPIO_Init+0x6dc>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	43db      	mvns	r3, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4013      	ands	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030aa:	4a29      	ldr	r2, [pc, #164]	@ (8003150 <HAL_GPIO_Init+0x6dc>)
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030b0:	4b27      	ldr	r3, [pc, #156]	@ (8003150 <HAL_GPIO_Init+0x6dc>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	43db      	mvns	r3, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4013      	ands	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030d4:	4a1e      	ldr	r2, [pc, #120]	@ (8003150 <HAL_GPIO_Init+0x6dc>)
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030da:	4b1d      	ldr	r3, [pc, #116]	@ (8003150 <HAL_GPIO_Init+0x6dc>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	43db      	mvns	r3, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4013      	ands	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030fe:	4a14      	ldr	r2, [pc, #80]	@ (8003150 <HAL_GPIO_Init+0x6dc>)
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	3301      	adds	r3, #1
 8003108:	61fb      	str	r3, [r7, #28]
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	2b0f      	cmp	r3, #15
 800310e:	f67f ad4d 	bls.w	8002bac <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 8003112:	bf00      	nop
 8003114:	bf00      	nop
 8003116:	3720      	adds	r7, #32
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	08010acc 	.word	0x08010acc
 8003120:	40023800 	.word	0x40023800
 8003124:	40013800 	.word	0x40013800
 8003128:	40020000 	.word	0x40020000
 800312c:	40020400 	.word	0x40020400
 8003130:	40020800 	.word	0x40020800
 8003134:	40020c00 	.word	0x40020c00
 8003138:	40021000 	.word	0x40021000
 800313c:	40021400 	.word	0x40021400
 8003140:	40021800 	.word	0x40021800
 8003144:	40021c00 	.word	0x40021c00
 8003148:	40022000 	.word	0x40022000
 800314c:	40022400 	.word	0x40022400
 8003150:	40013c00 	.word	0x40013c00

08003154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	807b      	strh	r3, [r7, #2]
 8003160:	4613      	mov	r3, r2
 8003162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003164:	887b      	ldrh	r3, [r7, #2]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d104      	bne.n	8003174 <HAL_GPIO_WritePin+0x20>
 800316a:	f240 1197 	movw	r1, #407	@ 0x197
 800316e:	480e      	ldr	r0, [pc, #56]	@ (80031a8 <HAL_GPIO_WritePin+0x54>)
 8003170:	f7fe fc8c 	bl	8001a8c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003174:	787b      	ldrb	r3, [r7, #1]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d007      	beq.n	800318a <HAL_GPIO_WritePin+0x36>
 800317a:	787b      	ldrb	r3, [r7, #1]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d004      	beq.n	800318a <HAL_GPIO_WritePin+0x36>
 8003180:	f44f 71cc 	mov.w	r1, #408	@ 0x198
 8003184:	4808      	ldr	r0, [pc, #32]	@ (80031a8 <HAL_GPIO_WritePin+0x54>)
 8003186:	f7fe fc81 	bl	8001a8c <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800318a:	787b      	ldrb	r3, [r7, #1]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003190:	887a      	ldrh	r2, [r7, #2]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003196:	e003      	b.n	80031a0 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003198:	887b      	ldrh	r3, [r7, #2]
 800319a:	041a      	lsls	r2, r3, #16
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	619a      	str	r2, [r3, #24]
}
 80031a0:	bf00      	nop
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	08010acc 	.word	0x08010acc

080031ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80031b4:	2300      	movs	r3, #0
 80031b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e345      	b.n	800384e <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2b0f      	cmp	r3, #15
 80031c8:	d904      	bls.n	80031d4 <HAL_RCC_OscConfig+0x28>
 80031ca:	f240 1163 	movw	r1, #355	@ 0x163
 80031ce:	4892      	ldr	r0, [pc, #584]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 80031d0:	f7fe fc5c 	bl	8001a8c <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 809a 	beq.w	8003316 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00e      	beq.n	8003208 <HAL_RCC_OscConfig+0x5c>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031f2:	d009      	beq.n	8003208 <HAL_RCC_OscConfig+0x5c>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031fc:	d004      	beq.n	8003208 <HAL_RCC_OscConfig+0x5c>
 80031fe:	f240 1169 	movw	r1, #361	@ 0x169
 8003202:	4885      	ldr	r0, [pc, #532]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003204:	f7fe fc42 	bl	8001a8c <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003208:	4b84      	ldr	r3, [pc, #528]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 030c 	and.w	r3, r3, #12
 8003210:	2b04      	cmp	r3, #4
 8003212:	d00c      	beq.n	800322e <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003214:	4b81      	ldr	r3, [pc, #516]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 030c 	and.w	r3, r3, #12
 800321c:	2b08      	cmp	r3, #8
 800321e:	d112      	bne.n	8003246 <HAL_RCC_OscConfig+0x9a>
 8003220:	4b7e      	ldr	r3, [pc, #504]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003228:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800322c:	d10b      	bne.n	8003246 <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800322e:	4b7b      	ldr	r3, [pc, #492]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d06c      	beq.n	8003314 <HAL_RCC_OscConfig+0x168>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d168      	bne.n	8003314 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e303      	b.n	800384e <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800324e:	d106      	bne.n	800325e <HAL_RCC_OscConfig+0xb2>
 8003250:	4b72      	ldr	r3, [pc, #456]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a71      	ldr	r2, [pc, #452]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 8003256:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800325a:	6013      	str	r3, [r2, #0]
 800325c:	e02e      	b.n	80032bc <HAL_RCC_OscConfig+0x110>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10c      	bne.n	8003280 <HAL_RCC_OscConfig+0xd4>
 8003266:	4b6d      	ldr	r3, [pc, #436]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a6c      	ldr	r2, [pc, #432]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 800326c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	4b6a      	ldr	r3, [pc, #424]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a69      	ldr	r2, [pc, #420]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 8003278:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	e01d      	b.n	80032bc <HAL_RCC_OscConfig+0x110>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003288:	d10c      	bne.n	80032a4 <HAL_RCC_OscConfig+0xf8>
 800328a:	4b64      	ldr	r3, [pc, #400]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a63      	ldr	r2, [pc, #396]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 8003290:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	4b61      	ldr	r3, [pc, #388]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a60      	ldr	r2, [pc, #384]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 800329c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	e00b      	b.n	80032bc <HAL_RCC_OscConfig+0x110>
 80032a4:	4b5d      	ldr	r3, [pc, #372]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a5c      	ldr	r2, [pc, #368]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 80032aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	4b5a      	ldr	r3, [pc, #360]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a59      	ldr	r2, [pc, #356]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 80032b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d013      	beq.n	80032ec <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7ff f8da 	bl	800247c <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032cc:	f7ff f8d6 	bl	800247c <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b64      	cmp	r3, #100	@ 0x64
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e2b7      	b.n	800384e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032de:	4b4f      	ldr	r3, [pc, #316]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0f0      	beq.n	80032cc <HAL_RCC_OscConfig+0x120>
 80032ea:	e014      	b.n	8003316 <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ec:	f7ff f8c6 	bl	800247c <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f4:	f7ff f8c2 	bl	800247c <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b64      	cmp	r3, #100	@ 0x64
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e2a3      	b.n	800384e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003306:	4b45      	ldr	r3, [pc, #276]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0x148>
 8003312:	e000      	b.n	8003316 <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 8084 	beq.w	800342c <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d008      	beq.n	800333e <HAL_RCC_OscConfig+0x192>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d004      	beq.n	800333e <HAL_RCC_OscConfig+0x192>
 8003334:	f240 119b 	movw	r1, #411	@ 0x19b
 8003338:	4837      	ldr	r0, [pc, #220]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 800333a:	f7fe fba7 	bl	8001a8c <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	2b1f      	cmp	r3, #31
 8003344:	d904      	bls.n	8003350 <HAL_RCC_OscConfig+0x1a4>
 8003346:	f44f 71ce 	mov.w	r1, #412	@ 0x19c
 800334a:	4833      	ldr	r0, [pc, #204]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 800334c:	f7fe fb9e 	bl	8001a8c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003350:	4b32      	ldr	r3, [pc, #200]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 030c 	and.w	r3, r3, #12
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00b      	beq.n	8003374 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800335c:	4b2f      	ldr	r3, [pc, #188]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 030c 	and.w	r3, r3, #12
 8003364:	2b08      	cmp	r3, #8
 8003366:	d11c      	bne.n	80033a2 <HAL_RCC_OscConfig+0x1f6>
 8003368:	4b2c      	ldr	r3, [pc, #176]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d116      	bne.n	80033a2 <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003374:	4b29      	ldr	r3, [pc, #164]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <HAL_RCC_OscConfig+0x1e0>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d001      	beq.n	800338c <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e260      	b.n	800384e <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800338c:	4b23      	ldr	r3, [pc, #140]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	4920      	ldr	r1, [pc, #128]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 800339c:	4313      	orrs	r3, r2
 800339e:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033a0:	e044      	b.n	800342c <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d023      	beq.n	80033f2 <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033aa:	4b1c      	ldr	r3, [pc, #112]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a1b      	ldr	r2, [pc, #108]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b6:	f7ff f861 	bl	800247c <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033be:	f7ff f85d 	bl	800247c <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e23e      	b.n	800384e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d0:	4b12      	ldr	r3, [pc, #72]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0f0      	beq.n	80033be <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033dc:	4b0f      	ldr	r3, [pc, #60]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	490c      	ldr	r1, [pc, #48]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	600b      	str	r3, [r1, #0]
 80033f0:	e01c      	b.n	800342c <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033f2:	4b0a      	ldr	r3, [pc, #40]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a09      	ldr	r2, [pc, #36]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fe:	f7ff f83d 	bl	800247c <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003404:	e00c      	b.n	8003420 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003406:	f7ff f839 	bl	800247c <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d905      	bls.n	8003420 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e21a      	b.n	800384e <HAL_RCC_OscConfig+0x6a2>
 8003418:	08010b08 	.word	0x08010b08
 800341c:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003420:	4b7e      	ldr	r3, [pc, #504]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1ec      	bne.n	8003406 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b00      	cmp	r3, #0
 8003436:	d043      	beq.n	80034c0 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d008      	beq.n	8003452 <HAL_RCC_OscConfig+0x2a6>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d004      	beq.n	8003452 <HAL_RCC_OscConfig+0x2a6>
 8003448:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 800344c:	4874      	ldr	r0, [pc, #464]	@ (8003620 <HAL_RCC_OscConfig+0x474>)
 800344e:	f7fe fb1d 	bl	8001a8c <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d019      	beq.n	800348e <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800345a:	4b70      	ldr	r3, [pc, #448]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 800345c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800345e:	4a6f      	ldr	r2, [pc, #444]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003466:	f7ff f809 	bl	800247c <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800346e:	f7ff f805 	bl	800247c <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e1e6      	b.n	800384e <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003480:	4b66      	ldr	r3, [pc, #408]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 8003482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0f0      	beq.n	800346e <HAL_RCC_OscConfig+0x2c2>
 800348c:	e018      	b.n	80034c0 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800348e:	4b63      	ldr	r3, [pc, #396]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 8003490:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003492:	4a62      	ldr	r2, [pc, #392]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 8003494:	f023 0301 	bic.w	r3, r3, #1
 8003498:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349a:	f7fe ffef 	bl	800247c <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a2:	f7fe ffeb 	bl	800247c <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e1cc      	b.n	800384e <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b4:	4b59      	ldr	r3, [pc, #356]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 80034b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1f0      	bne.n	80034a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 80bc 	beq.w	8003646 <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00c      	beq.n	80034f0 <HAL_RCC_OscConfig+0x344>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d008      	beq.n	80034f0 <HAL_RCC_OscConfig+0x344>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	2b05      	cmp	r3, #5
 80034e4:	d004      	beq.n	80034f0 <HAL_RCC_OscConfig+0x344>
 80034e6:	f240 2106 	movw	r1, #518	@ 0x206
 80034ea:	484d      	ldr	r0, [pc, #308]	@ (8003620 <HAL_RCC_OscConfig+0x474>)
 80034ec:	f7fe face 	bl	8001a8c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034f0:	4b4a      	ldr	r3, [pc, #296]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 80034f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10d      	bne.n	8003518 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80034fc:	4b47      	ldr	r3, [pc, #284]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 80034fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003500:	4a46      	ldr	r2, [pc, #280]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 8003502:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003506:	6413      	str	r3, [r2, #64]	@ 0x40
 8003508:	4b44      	ldr	r3, [pc, #272]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 800350a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003510:	60bb      	str	r3, [r7, #8]
 8003512:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003514:	2301      	movs	r3, #1
 8003516:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003518:	4b42      	ldr	r3, [pc, #264]	@ (8003624 <HAL_RCC_OscConfig+0x478>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003520:	2b00      	cmp	r3, #0
 8003522:	d118      	bne.n	8003556 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003524:	4b3f      	ldr	r3, [pc, #252]	@ (8003624 <HAL_RCC_OscConfig+0x478>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a3e      	ldr	r2, [pc, #248]	@ (8003624 <HAL_RCC_OscConfig+0x478>)
 800352a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800352e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003530:	f7fe ffa4 	bl	800247c <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003538:	f7fe ffa0 	bl	800247c <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b64      	cmp	r3, #100	@ 0x64
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e181      	b.n	800384e <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800354a:	4b36      	ldr	r3, [pc, #216]	@ (8003624 <HAL_RCC_OscConfig+0x478>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0f0      	beq.n	8003538 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d106      	bne.n	800356c <HAL_RCC_OscConfig+0x3c0>
 800355e:	4b2f      	ldr	r3, [pc, #188]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 8003560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003562:	4a2e      	ldr	r2, [pc, #184]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	6713      	str	r3, [r2, #112]	@ 0x70
 800356a:	e02d      	b.n	80035c8 <HAL_RCC_OscConfig+0x41c>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10c      	bne.n	800358e <HAL_RCC_OscConfig+0x3e2>
 8003574:	4b29      	ldr	r3, [pc, #164]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 8003576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003578:	4a28      	ldr	r2, [pc, #160]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 800357a:	f023 0301 	bic.w	r3, r3, #1
 800357e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003580:	4b26      	ldr	r3, [pc, #152]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 8003582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003584:	4a25      	ldr	r2, [pc, #148]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 8003586:	f023 0304 	bic.w	r3, r3, #4
 800358a:	6713      	str	r3, [r2, #112]	@ 0x70
 800358c:	e01c      	b.n	80035c8 <HAL_RCC_OscConfig+0x41c>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2b05      	cmp	r3, #5
 8003594:	d10c      	bne.n	80035b0 <HAL_RCC_OscConfig+0x404>
 8003596:	4b21      	ldr	r3, [pc, #132]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 8003598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800359a:	4a20      	ldr	r2, [pc, #128]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 800359c:	f043 0304 	orr.w	r3, r3, #4
 80035a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80035a2:	4b1e      	ldr	r3, [pc, #120]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 80035a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a6:	4a1d      	ldr	r2, [pc, #116]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 80035a8:	f043 0301 	orr.w	r3, r3, #1
 80035ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80035ae:	e00b      	b.n	80035c8 <HAL_RCC_OscConfig+0x41c>
 80035b0:	4b1a      	ldr	r3, [pc, #104]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 80035b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b4:	4a19      	ldr	r2, [pc, #100]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 80035b6:	f023 0301 	bic.w	r3, r3, #1
 80035ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80035bc:	4b17      	ldr	r3, [pc, #92]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 80035be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c0:	4a16      	ldr	r2, [pc, #88]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 80035c2:	f023 0304 	bic.w	r3, r3, #4
 80035c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d015      	beq.n	80035fc <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d0:	f7fe ff54 	bl	800247c <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d6:	e00a      	b.n	80035ee <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d8:	f7fe ff50 	bl	800247c <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e12f      	b.n	800384e <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ee:	4b0b      	ldr	r3, [pc, #44]	@ (800361c <HAL_RCC_OscConfig+0x470>)
 80035f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0ee      	beq.n	80035d8 <HAL_RCC_OscConfig+0x42c>
 80035fa:	e01b      	b.n	8003634 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fc:	f7fe ff3e 	bl	800247c <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003602:	e011      	b.n	8003628 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003604:	f7fe ff3a 	bl	800247c <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003612:	4293      	cmp	r3, r2
 8003614:	d908      	bls.n	8003628 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e119      	b.n	800384e <HAL_RCC_OscConfig+0x6a2>
 800361a:	bf00      	nop
 800361c:	40023800 	.word	0x40023800
 8003620:	08010b08 	.word	0x08010b08
 8003624:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003628:	4b8b      	ldr	r3, [pc, #556]	@ (8003858 <HAL_RCC_OscConfig+0x6ac>)
 800362a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1e7      	bne.n	8003604 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003634:	7dfb      	ldrb	r3, [r7, #23]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d105      	bne.n	8003646 <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800363a:	4b87      	ldr	r3, [pc, #540]	@ (8003858 <HAL_RCC_OscConfig+0x6ac>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363e:	4a86      	ldr	r2, [pc, #536]	@ (8003858 <HAL_RCC_OscConfig+0x6ac>)
 8003640:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003644:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00c      	beq.n	8003668 <HAL_RCC_OscConfig+0x4bc>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d008      	beq.n	8003668 <HAL_RCC_OscConfig+0x4bc>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	2b02      	cmp	r3, #2
 800365c:	d004      	beq.n	8003668 <HAL_RCC_OscConfig+0x4bc>
 800365e:	f240 214a 	movw	r1, #586	@ 0x24a
 8003662:	487e      	ldr	r0, [pc, #504]	@ (800385c <HAL_RCC_OscConfig+0x6b0>)
 8003664:	f7fe fa12 	bl	8001a8c <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80ed 	beq.w	800384c <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003672:	4b79      	ldr	r3, [pc, #484]	@ (8003858 <HAL_RCC_OscConfig+0x6ac>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 030c 	and.w	r3, r3, #12
 800367a:	2b08      	cmp	r3, #8
 800367c:	f000 80b4 	beq.w	80037e8 <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	2b02      	cmp	r3, #2
 8003686:	f040 8095 	bne.w	80037b4 <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d009      	beq.n	80036a6 <HAL_RCC_OscConfig+0x4fa>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800369a:	d004      	beq.n	80036a6 <HAL_RCC_OscConfig+0x4fa>
 800369c:	f240 2153 	movw	r1, #595	@ 0x253
 80036a0:	486e      	ldr	r0, [pc, #440]	@ (800385c <HAL_RCC_OscConfig+0x6b0>)
 80036a2:	f7fe f9f3 	bl	8001a8c <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d903      	bls.n	80036b6 <HAL_RCC_OscConfig+0x50a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	2b3f      	cmp	r3, #63	@ 0x3f
 80036b4:	d904      	bls.n	80036c0 <HAL_RCC_OscConfig+0x514>
 80036b6:	f44f 7115 	mov.w	r1, #596	@ 0x254
 80036ba:	4868      	ldr	r0, [pc, #416]	@ (800385c <HAL_RCC_OscConfig+0x6b0>)
 80036bc:	f7fe f9e6 	bl	8001a8c <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c4:	2b31      	cmp	r3, #49	@ 0x31
 80036c6:	d904      	bls.n	80036d2 <HAL_RCC_OscConfig+0x526>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036cc:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 80036d0:	d904      	bls.n	80036dc <HAL_RCC_OscConfig+0x530>
 80036d2:	f240 2155 	movw	r1, #597	@ 0x255
 80036d6:	4861      	ldr	r0, [pc, #388]	@ (800385c <HAL_RCC_OscConfig+0x6b0>)
 80036d8:	f7fe f9d8 	bl	8001a8c <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d010      	beq.n	8003706 <HAL_RCC_OscConfig+0x55a>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e8:	2b04      	cmp	r3, #4
 80036ea:	d00c      	beq.n	8003706 <HAL_RCC_OscConfig+0x55a>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f0:	2b06      	cmp	r3, #6
 80036f2:	d008      	beq.n	8003706 <HAL_RCC_OscConfig+0x55a>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d004      	beq.n	8003706 <HAL_RCC_OscConfig+0x55a>
 80036fc:	f240 2156 	movw	r1, #598	@ 0x256
 8003700:	4856      	ldr	r0, [pc, #344]	@ (800385c <HAL_RCC_OscConfig+0x6b0>)
 8003702:	f7fe f9c3 	bl	8001a8c <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800370a:	2b01      	cmp	r3, #1
 800370c:	d903      	bls.n	8003716 <HAL_RCC_OscConfig+0x56a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003712:	2b0f      	cmp	r3, #15
 8003714:	d904      	bls.n	8003720 <HAL_RCC_OscConfig+0x574>
 8003716:	f240 2157 	movw	r1, #599	@ 0x257
 800371a:	4850      	ldr	r0, [pc, #320]	@ (800385c <HAL_RCC_OscConfig+0x6b0>)
 800371c:	f7fe f9b6 	bl	8001a8c <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003720:	4b4d      	ldr	r3, [pc, #308]	@ (8003858 <HAL_RCC_OscConfig+0x6ac>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a4c      	ldr	r2, [pc, #304]	@ (8003858 <HAL_RCC_OscConfig+0x6ac>)
 8003726:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800372a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372c:	f7fe fea6 	bl	800247c <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003734:	f7fe fea2 	bl	800247c <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e083      	b.n	800384e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003746:	4b44      	ldr	r3, [pc, #272]	@ (8003858 <HAL_RCC_OscConfig+0x6ac>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f0      	bne.n	8003734 <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69da      	ldr	r2, [r3, #28]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003760:	019b      	lsls	r3, r3, #6
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003768:	085b      	lsrs	r3, r3, #1
 800376a:	3b01      	subs	r3, #1
 800376c:	041b      	lsls	r3, r3, #16
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003774:	061b      	lsls	r3, r3, #24
 8003776:	4313      	orrs	r3, r2
 8003778:	4a37      	ldr	r2, [pc, #220]	@ (8003858 <HAL_RCC_OscConfig+0x6ac>)
 800377a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800377e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003780:	4b35      	ldr	r3, [pc, #212]	@ (8003858 <HAL_RCC_OscConfig+0x6ac>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a34      	ldr	r2, [pc, #208]	@ (8003858 <HAL_RCC_OscConfig+0x6ac>)
 8003786:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800378a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378c:	f7fe fe76 	bl	800247c <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003794:	f7fe fe72 	bl	800247c <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e053      	b.n	800384e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a6:	4b2c      	ldr	r3, [pc, #176]	@ (8003858 <HAL_RCC_OscConfig+0x6ac>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCC_OscConfig+0x5e8>
 80037b2:	e04b      	b.n	800384c <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b4:	4b28      	ldr	r3, [pc, #160]	@ (8003858 <HAL_RCC_OscConfig+0x6ac>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a27      	ldr	r2, [pc, #156]	@ (8003858 <HAL_RCC_OscConfig+0x6ac>)
 80037ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c0:	f7fe fe5c 	bl	800247c <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c8:	f7fe fe58 	bl	800247c <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e039      	b.n	800384e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037da:	4b1f      	ldr	r3, [pc, #124]	@ (8003858 <HAL_RCC_OscConfig+0x6ac>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f0      	bne.n	80037c8 <HAL_RCC_OscConfig+0x61c>
 80037e6:	e031      	b.n	800384c <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80037e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003858 <HAL_RCC_OscConfig+0x6ac>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d028      	beq.n	8003848 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003800:	429a      	cmp	r2, r3
 8003802:	d121      	bne.n	8003848 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800380e:	429a      	cmp	r2, r3
 8003810:	d11a      	bne.n	8003848 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003818:	4013      	ands	r3, r2
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800381e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003820:	4293      	cmp	r3, r2
 8003822:	d111      	bne.n	8003848 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800382e:	085b      	lsrs	r3, r3, #1
 8003830:	3b01      	subs	r3, #1
 8003832:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003834:	429a      	cmp	r2, r3
 8003836:	d107      	bne.n	8003848 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003842:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003844:	429a      	cmp	r2, r3
 8003846:	d001      	beq.n	800384c <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e000      	b.n	800384e <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40023800 	.word	0x40023800
 800385c:	08010b08 	.word	0x08010b08

08003860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e18c      	b.n	8003b92 <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <HAL_RCC_ClockConfig+0x28>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b0f      	cmp	r3, #15
 8003886:	d904      	bls.n	8003892 <HAL_RCC_ClockConfig+0x32>
 8003888:	f240 21dd 	movw	r1, #733	@ 0x2dd
 800388c:	4887      	ldr	r0, [pc, #540]	@ (8003aac <HAL_RCC_ClockConfig+0x24c>)
 800388e:	f7fe f8fd 	bl	8001a8c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d031      	beq.n	80038fc <HAL_RCC_ClockConfig+0x9c>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d02e      	beq.n	80038fc <HAL_RCC_ClockConfig+0x9c>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d02b      	beq.n	80038fc <HAL_RCC_ClockConfig+0x9c>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	2b03      	cmp	r3, #3
 80038a8:	d028      	beq.n	80038fc <HAL_RCC_ClockConfig+0x9c>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d025      	beq.n	80038fc <HAL_RCC_ClockConfig+0x9c>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	2b05      	cmp	r3, #5
 80038b4:	d022      	beq.n	80038fc <HAL_RCC_ClockConfig+0x9c>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2b06      	cmp	r3, #6
 80038ba:	d01f      	beq.n	80038fc <HAL_RCC_ClockConfig+0x9c>
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	2b07      	cmp	r3, #7
 80038c0:	d01c      	beq.n	80038fc <HAL_RCC_ClockConfig+0x9c>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d019      	beq.n	80038fc <HAL_RCC_ClockConfig+0x9c>
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	2b09      	cmp	r3, #9
 80038cc:	d016      	beq.n	80038fc <HAL_RCC_ClockConfig+0x9c>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b0a      	cmp	r3, #10
 80038d2:	d013      	beq.n	80038fc <HAL_RCC_ClockConfig+0x9c>
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	2b0b      	cmp	r3, #11
 80038d8:	d010      	beq.n	80038fc <HAL_RCC_ClockConfig+0x9c>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b0c      	cmp	r3, #12
 80038de:	d00d      	beq.n	80038fc <HAL_RCC_ClockConfig+0x9c>
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	2b0d      	cmp	r3, #13
 80038e4:	d00a      	beq.n	80038fc <HAL_RCC_ClockConfig+0x9c>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b0e      	cmp	r3, #14
 80038ea:	d007      	beq.n	80038fc <HAL_RCC_ClockConfig+0x9c>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	2b0f      	cmp	r3, #15
 80038f0:	d004      	beq.n	80038fc <HAL_RCC_ClockConfig+0x9c>
 80038f2:	f240 21de 	movw	r1, #734	@ 0x2de
 80038f6:	486d      	ldr	r0, [pc, #436]	@ (8003aac <HAL_RCC_ClockConfig+0x24c>)
 80038f8:	f7fe f8c8 	bl	8001a8c <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038fc:	4b6c      	ldr	r3, [pc, #432]	@ (8003ab0 <HAL_RCC_ClockConfig+0x250>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 030f 	and.w	r3, r3, #15
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	d910      	bls.n	800392c <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390a:	4b69      	ldr	r3, [pc, #420]	@ (8003ab0 <HAL_RCC_ClockConfig+0x250>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f023 020f 	bic.w	r2, r3, #15
 8003912:	4967      	ldr	r1, [pc, #412]	@ (8003ab0 <HAL_RCC_ClockConfig+0x250>)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	4313      	orrs	r3, r2
 8003918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800391a:	4b65      	ldr	r3, [pc, #404]	@ (8003ab0 <HAL_RCC_ClockConfig+0x250>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	429a      	cmp	r2, r3
 8003926:	d001      	beq.n	800392c <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e132      	b.n	8003b92 <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d049      	beq.n	80039cc <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	d005      	beq.n	8003950 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003944:	4b5b      	ldr	r3, [pc, #364]	@ (8003ab4 <HAL_RCC_ClockConfig+0x254>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	4a5a      	ldr	r2, [pc, #360]	@ (8003ab4 <HAL_RCC_ClockConfig+0x254>)
 800394a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800394e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0308 	and.w	r3, r3, #8
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800395c:	4b55      	ldr	r3, [pc, #340]	@ (8003ab4 <HAL_RCC_ClockConfig+0x254>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	4a54      	ldr	r2, [pc, #336]	@ (8003ab4 <HAL_RCC_ClockConfig+0x254>)
 8003962:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003966:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d024      	beq.n	80039ba <HAL_RCC_ClockConfig+0x15a>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	2b80      	cmp	r3, #128	@ 0x80
 8003976:	d020      	beq.n	80039ba <HAL_RCC_ClockConfig+0x15a>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2b90      	cmp	r3, #144	@ 0x90
 800397e:	d01c      	beq.n	80039ba <HAL_RCC_ClockConfig+0x15a>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	2ba0      	cmp	r3, #160	@ 0xa0
 8003986:	d018      	beq.n	80039ba <HAL_RCC_ClockConfig+0x15a>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	2bb0      	cmp	r3, #176	@ 0xb0
 800398e:	d014      	beq.n	80039ba <HAL_RCC_ClockConfig+0x15a>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	2bc0      	cmp	r3, #192	@ 0xc0
 8003996:	d010      	beq.n	80039ba <HAL_RCC_ClockConfig+0x15a>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2bd0      	cmp	r3, #208	@ 0xd0
 800399e:	d00c      	beq.n	80039ba <HAL_RCC_ClockConfig+0x15a>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	2be0      	cmp	r3, #224	@ 0xe0
 80039a6:	d008      	beq.n	80039ba <HAL_RCC_ClockConfig+0x15a>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2bf0      	cmp	r3, #240	@ 0xf0
 80039ae:	d004      	beq.n	80039ba <HAL_RCC_ClockConfig+0x15a>
 80039b0:	f240 3102 	movw	r1, #770	@ 0x302
 80039b4:	483d      	ldr	r0, [pc, #244]	@ (8003aac <HAL_RCC_ClockConfig+0x24c>)
 80039b6:	f7fe f869 	bl	8001a8c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039ba:	4b3e      	ldr	r3, [pc, #248]	@ (8003ab4 <HAL_RCC_ClockConfig+0x254>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	493b      	ldr	r1, [pc, #236]	@ (8003ab4 <HAL_RCC_ClockConfig+0x254>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d051      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00c      	beq.n	80039fa <HAL_RCC_ClockConfig+0x19a>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d008      	beq.n	80039fa <HAL_RCC_ClockConfig+0x19a>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d004      	beq.n	80039fa <HAL_RCC_ClockConfig+0x19a>
 80039f0:	f240 3109 	movw	r1, #777	@ 0x309
 80039f4:	482d      	ldr	r0, [pc, #180]	@ (8003aac <HAL_RCC_ClockConfig+0x24c>)
 80039f6:	f7fe f849 	bl	8001a8c <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d107      	bne.n	8003a12 <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a02:	4b2c      	ldr	r3, [pc, #176]	@ (8003ab4 <HAL_RCC_ClockConfig+0x254>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d115      	bne.n	8003a3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e0bf      	b.n	8003b92 <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d107      	bne.n	8003a2a <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a1a:	4b26      	ldr	r3, [pc, #152]	@ (8003ab4 <HAL_RCC_ClockConfig+0x254>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e0b3      	b.n	8003b92 <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a2a:	4b22      	ldr	r3, [pc, #136]	@ (8003ab4 <HAL_RCC_ClockConfig+0x254>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e0ab      	b.n	8003b92 <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a3a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ab4 <HAL_RCC_ClockConfig+0x254>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f023 0203 	bic.w	r2, r3, #3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	491b      	ldr	r1, [pc, #108]	@ (8003ab4 <HAL_RCC_ClockConfig+0x254>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a4c:	f7fe fd16 	bl	800247c <HAL_GetTick>
 8003a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a52:	e00a      	b.n	8003a6a <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a54:	f7fe fd12 	bl	800247c <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e093      	b.n	8003b92 <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6a:	4b12      	ldr	r3, [pc, #72]	@ (8003ab4 <HAL_RCC_ClockConfig+0x254>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 020c 	and.w	r2, r3, #12
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d1eb      	bne.n	8003a54 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ab0 <HAL_RCC_ClockConfig+0x250>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 030f 	and.w	r3, r3, #15
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d216      	bcs.n	8003ab8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a8a:	4b09      	ldr	r3, [pc, #36]	@ (8003ab0 <HAL_RCC_ClockConfig+0x250>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f023 020f 	bic.w	r2, r3, #15
 8003a92:	4907      	ldr	r1, [pc, #28]	@ (8003ab0 <HAL_RCC_ClockConfig+0x250>)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9a:	4b05      	ldr	r3, [pc, #20]	@ (8003ab0 <HAL_RCC_ClockConfig+0x250>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d007      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e072      	b.n	8003b92 <HAL_RCC_ClockConfig+0x332>
 8003aac:	08010b08 	.word	0x08010b08
 8003ab0:	40023c00 	.word	0x40023c00
 8003ab4:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d025      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d018      	beq.n	8003afe <HAL_RCC_ClockConfig+0x29e>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ad4:	d013      	beq.n	8003afe <HAL_RCC_ClockConfig+0x29e>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003ade:	d00e      	beq.n	8003afe <HAL_RCC_ClockConfig+0x29e>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8003ae8:	d009      	beq.n	8003afe <HAL_RCC_ClockConfig+0x29e>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8003af2:	d004      	beq.n	8003afe <HAL_RCC_ClockConfig+0x29e>
 8003af4:	f240 3146 	movw	r1, #838	@ 0x346
 8003af8:	4828      	ldr	r0, [pc, #160]	@ (8003b9c <HAL_RCC_ClockConfig+0x33c>)
 8003afa:	f7fd ffc7 	bl	8001a8c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003afe:	4b28      	ldr	r3, [pc, #160]	@ (8003ba0 <HAL_RCC_ClockConfig+0x340>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	4925      	ldr	r1, [pc, #148]	@ (8003ba0 <HAL_RCC_ClockConfig+0x340>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0308 	and.w	r3, r3, #8
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d026      	beq.n	8003b6a <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d018      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x2f6>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b2c:	d013      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x2f6>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003b36:	d00e      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x2f6>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8003b40:	d009      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x2f6>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8003b4a:	d004      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x2f6>
 8003b4c:	f240 314d 	movw	r1, #845	@ 0x34d
 8003b50:	4812      	ldr	r0, [pc, #72]	@ (8003b9c <HAL_RCC_ClockConfig+0x33c>)
 8003b52:	f7fd ff9b 	bl	8001a8c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b56:	4b12      	ldr	r3, [pc, #72]	@ (8003ba0 <HAL_RCC_ClockConfig+0x340>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	490e      	ldr	r1, [pc, #56]	@ (8003ba0 <HAL_RCC_ClockConfig+0x340>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b6a:	f000 f821 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba0 <HAL_RCC_ClockConfig+0x340>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	091b      	lsrs	r3, r3, #4
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	490a      	ldr	r1, [pc, #40]	@ (8003ba4 <HAL_RCC_ClockConfig+0x344>)
 8003b7c:	5ccb      	ldrb	r3, [r1, r3]
 8003b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b82:	4a09      	ldr	r2, [pc, #36]	@ (8003ba8 <HAL_RCC_ClockConfig+0x348>)
 8003b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b86:	4b09      	ldr	r3, [pc, #36]	@ (8003bac <HAL_RCC_ClockConfig+0x34c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fe fc32 	bl	80023f4 <HAL_InitTick>

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	08010b08 	.word	0x08010b08
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	08010eb4 	.word	0x08010eb4
 8003ba8:	20000004 	.word	0x20000004
 8003bac:	20000008 	.word	0x20000008

08003bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb4:	b090      	sub	sp, #64	@ 0x40
 8003bb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bc8:	4b59      	ldr	r3, [pc, #356]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 030c 	and.w	r3, r3, #12
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d00d      	beq.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x40>
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	f200 80a1 	bhi.w	8003d1c <HAL_RCC_GetSysClockFreq+0x16c>
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d002      	beq.n	8003be4 <HAL_RCC_GetSysClockFreq+0x34>
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	d003      	beq.n	8003bea <HAL_RCC_GetSysClockFreq+0x3a>
 8003be2:	e09b      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003be4:	4b53      	ldr	r3, [pc, #332]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x184>)
 8003be6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003be8:	e09b      	b.n	8003d22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bea:	4b53      	ldr	r3, [pc, #332]	@ (8003d38 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003bee:	e098      	b.n	8003d22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bf0:	4b4f      	ldr	r3, [pc, #316]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bf8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003bfa:	4b4d      	ldr	r3, [pc, #308]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d028      	beq.n	8003c58 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c06:	4b4a      	ldr	r3, [pc, #296]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	099b      	lsrs	r3, r3, #6
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	623b      	str	r3, [r7, #32]
 8003c10:	627a      	str	r2, [r7, #36]	@ 0x24
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c18:	2100      	movs	r1, #0
 8003c1a:	4b47      	ldr	r3, [pc, #284]	@ (8003d38 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c1c:	fb03 f201 	mul.w	r2, r3, r1
 8003c20:	2300      	movs	r3, #0
 8003c22:	fb00 f303 	mul.w	r3, r0, r3
 8003c26:	4413      	add	r3, r2
 8003c28:	4a43      	ldr	r2, [pc, #268]	@ (8003d38 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c2a:	fba0 1202 	umull	r1, r2, r0, r2
 8003c2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c30:	460a      	mov	r2, r1
 8003c32:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003c34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c36:	4413      	add	r3, r2
 8003c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	61bb      	str	r3, [r7, #24]
 8003c40:	61fa      	str	r2, [r7, #28]
 8003c42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003c4a:	f7fd f83d 	bl	8000cc8 <__aeabi_uldivmod>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	4613      	mov	r3, r2
 8003c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c56:	e053      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c58:	4b35      	ldr	r3, [pc, #212]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	099b      	lsrs	r3, r3, #6
 8003c5e:	2200      	movs	r2, #0
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	617a      	str	r2, [r7, #20]
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c6a:	f04f 0b00 	mov.w	fp, #0
 8003c6e:	4652      	mov	r2, sl
 8003c70:	465b      	mov	r3, fp
 8003c72:	f04f 0000 	mov.w	r0, #0
 8003c76:	f04f 0100 	mov.w	r1, #0
 8003c7a:	0159      	lsls	r1, r3, #5
 8003c7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c80:	0150      	lsls	r0, r2, #5
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	ebb2 080a 	subs.w	r8, r2, sl
 8003c8a:	eb63 090b 	sbc.w	r9, r3, fp
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c9a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c9e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ca2:	ebb2 0408 	subs.w	r4, r2, r8
 8003ca6:	eb63 0509 	sbc.w	r5, r3, r9
 8003caa:	f04f 0200 	mov.w	r2, #0
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	00eb      	lsls	r3, r5, #3
 8003cb4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cb8:	00e2      	lsls	r2, r4, #3
 8003cba:	4614      	mov	r4, r2
 8003cbc:	461d      	mov	r5, r3
 8003cbe:	eb14 030a 	adds.w	r3, r4, sl
 8003cc2:	603b      	str	r3, [r7, #0]
 8003cc4:	eb45 030b 	adc.w	r3, r5, fp
 8003cc8:	607b      	str	r3, [r7, #4]
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cd6:	4629      	mov	r1, r5
 8003cd8:	028b      	lsls	r3, r1, #10
 8003cda:	4621      	mov	r1, r4
 8003cdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ce0:	4621      	mov	r1, r4
 8003ce2:	028a      	lsls	r2, r1, #10
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cea:	2200      	movs	r2, #0
 8003cec:	60bb      	str	r3, [r7, #8]
 8003cee:	60fa      	str	r2, [r7, #12]
 8003cf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cf4:	f7fc ffe8 	bl	8000cc8 <__aeabi_uldivmod>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003d00:	4b0b      	ldr	r3, [pc, #44]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	0c1b      	lsrs	r3, r3, #16
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003d10:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d18:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d1a:	e002      	b.n	8003d22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d1c:	4b05      	ldr	r3, [pc, #20]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3740      	adds	r7, #64	@ 0x40
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d2e:	bf00      	nop
 8003d30:	40023800 	.word	0x40023800
 8003d34:	00f42400 	.word	0x00f42400
 8003d38:	017d7840 	.word	0x017d7840

08003d3c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d40:	4b03      	ldr	r3, [pc, #12]	@ (8003d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d42:	681b      	ldr	r3, [r3, #0]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	20000004 	.word	0x20000004

08003d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d58:	f7ff fff0 	bl	8003d3c <HAL_RCC_GetHCLKFreq>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	4b05      	ldr	r3, [pc, #20]	@ (8003d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	0a9b      	lsrs	r3, r3, #10
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	4903      	ldr	r1, [pc, #12]	@ (8003d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d6a:	5ccb      	ldrb	r3, [r1, r3]
 8003d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40023800 	.word	0x40023800
 8003d78:	08010ec4 	.word	0x08010ec4

08003d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d80:	f7ff ffdc 	bl	8003d3c <HAL_RCC_GetHCLKFreq>
 8003d84:	4602      	mov	r2, r0
 8003d86:	4b05      	ldr	r3, [pc, #20]	@ (8003d9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	0b5b      	lsrs	r3, r3, #13
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	4903      	ldr	r1, [pc, #12]	@ (8003da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d92:	5ccb      	ldrb	r3, [r1, r3]
 8003d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	08010ec4 	.word	0x08010ec4

08003da4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b088      	sub	sp, #32
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003dac:	2300      	movs	r3, #0
 8003dae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003db0:	2300      	movs	r3, #0
 8003db2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003db4:	2300      	movs	r3, #0
 8003db6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003db8:	2300      	movs	r3, #0
 8003dba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f040 8089 	bne.w	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0308 	and.w	r3, r3, #8
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f040 8082 	bne.w	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0310 	and.w	r3, r3, #16
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d17b      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d175      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d16f      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d169      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d163      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d15d      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d157      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d151      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d14b      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d145      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d13f      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d139      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d133      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d12d      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d127      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d121      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d11b      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d115      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10f      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d109      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0320 	and.w	r3, r3, #32
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d103      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ed8:	2172      	movs	r1, #114	@ 0x72
 8003eda:	4895      	ldr	r0, [pc, #596]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003edc:	f7fd fdd6 	bl	8001a8c <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d01f      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d008      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ef8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003efc:	d003      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8003efe:	2178      	movs	r1, #120	@ 0x78
 8003f00:	488b      	ldr	r0, [pc, #556]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003f02:	f7fd fdc3 	bl	8001a8c <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f06:	4b8b      	ldr	r3, [pc, #556]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	4a8a      	ldr	r2, [pc, #552]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003f0c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003f10:	6093      	str	r3, [r2, #8]
 8003f12:	4b88      	ldr	r3, [pc, #544]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003f14:	689a      	ldr	r2, [r3, #8]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f1a:	4986      	ldr	r1, [pc, #536]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d029      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00d      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f48:	d008      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f52:	d003      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003f54:	2188      	movs	r1, #136	@ 0x88
 8003f56:	4876      	ldr	r0, [pc, #472]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003f58:	f7fd fd98 	bl	8001a8c <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f5c:	4b75      	ldr	r3, [pc, #468]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003f5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f6a:	4972      	ldr	r1, [pc, #456]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f7a:	d101      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d029      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00d      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fa8:	d008      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003fb2:	d003      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003fb4:	219c      	movs	r1, #156	@ 0x9c
 8003fb6:	485e      	ldr	r0, [pc, #376]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003fb8:	f7fd fd68 	bl	8001a8c <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fbc:	4b5d      	ldr	r3, [pc, #372]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fc2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fca:	495a      	ldr	r1, [pc, #360]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fda:	d101      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0320 	and.w	r3, r3, #32
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 8186 	beq.w	8004316 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004012:	f000 80e4 	beq.w	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800401e:	f000 80de 	beq.w	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004026:	4a44      	ldr	r2, [pc, #272]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8004028:	4293      	cmp	r3, r2
 800402a:	f000 80d8 	beq.w	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004032:	4a42      	ldr	r2, [pc, #264]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004034:	4293      	cmp	r3, r2
 8004036:	f000 80d2 	beq.w	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403e:	4a40      	ldr	r2, [pc, #256]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	f000 80cc 	beq.w	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404a:	4a3e      	ldr	r2, [pc, #248]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 800404c:	4293      	cmp	r3, r2
 800404e:	f000 80c6 	beq.w	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004056:	4a3c      	ldr	r2, [pc, #240]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8004058:	4293      	cmp	r3, r2
 800405a:	f000 80c0 	beq.w	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004062:	4a3a      	ldr	r2, [pc, #232]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8004064:	4293      	cmp	r3, r2
 8004066:	f000 80ba 	beq.w	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406e:	4a38      	ldr	r2, [pc, #224]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8004070:	4293      	cmp	r3, r2
 8004072:	f000 80b4 	beq.w	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800407a:	4a36      	ldr	r2, [pc, #216]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 800407c:	4293      	cmp	r3, r2
 800407e:	f000 80ae 	beq.w	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004086:	4a34      	ldr	r2, [pc, #208]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	f000 80a8 	beq.w	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004092:	4a32      	ldr	r2, [pc, #200]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	f000 80a2 	beq.w	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409e:	4a30      	ldr	r2, [pc, #192]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	f000 809c 	beq.w	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040aa:	4a2e      	ldr	r2, [pc, #184]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	f000 8096 	beq.w	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b6:	4a2c      	ldr	r2, [pc, #176]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	f000 8090 	beq.w	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c2:	4a2a      	ldr	r2, [pc, #168]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	f000 808a 	beq.w	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ce:	4a28      	ldr	r2, [pc, #160]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	f000 8084 	beq.w	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040da:	4a26      	ldr	r2, [pc, #152]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d07e      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e4:	4a24      	ldr	r2, [pc, #144]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d079      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ee:	4a23      	ldr	r2, [pc, #140]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d074      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f8:	4a21      	ldr	r2, [pc, #132]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d06f      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004102:	4a20      	ldr	r2, [pc, #128]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d06a      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410c:	4a1e      	ldr	r2, [pc, #120]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d065      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004116:	4a1d      	ldr	r2, [pc, #116]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d060      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004120:	4a1b      	ldr	r2, [pc, #108]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d05b      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412a:	4a1a      	ldr	r2, [pc, #104]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 800412c:	4293      	cmp	r3, r2
 800412e:	e033      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8004130:	08010b40 	.word	0x08010b40
 8004134:	40023800 	.word	0x40023800
 8004138:	00020300 	.word	0x00020300
 800413c:	00030300 	.word	0x00030300
 8004140:	00040300 	.word	0x00040300
 8004144:	00050300 	.word	0x00050300
 8004148:	00060300 	.word	0x00060300
 800414c:	00070300 	.word	0x00070300
 8004150:	00080300 	.word	0x00080300
 8004154:	00090300 	.word	0x00090300
 8004158:	000a0300 	.word	0x000a0300
 800415c:	000b0300 	.word	0x000b0300
 8004160:	000c0300 	.word	0x000c0300
 8004164:	000d0300 	.word	0x000d0300
 8004168:	000e0300 	.word	0x000e0300
 800416c:	000f0300 	.word	0x000f0300
 8004170:	00100300 	.word	0x00100300
 8004174:	00110300 	.word	0x00110300
 8004178:	00120300 	.word	0x00120300
 800417c:	00130300 	.word	0x00130300
 8004180:	00140300 	.word	0x00140300
 8004184:	00150300 	.word	0x00150300
 8004188:	00160300 	.word	0x00160300
 800418c:	00170300 	.word	0x00170300
 8004190:	00180300 	.word	0x00180300
 8004194:	00190300 	.word	0x00190300
 8004198:	d021      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419e:	4a4c      	ldr	r2, [pc, #304]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d01c      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a8:	4a4a      	ldr	r2, [pc, #296]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d017      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b2:	4a49      	ldr	r2, [pc, #292]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d012      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041bc:	4a47      	ldr	r2, [pc, #284]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d00d      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c6:	4a46      	ldr	r2, [pc, #280]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d008      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d0:	4a44      	ldr	r2, [pc, #272]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d003      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80041d6:	21b7      	movs	r1, #183	@ 0xb7
 80041d8:	4843      	ldr	r0, [pc, #268]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80041da:	f7fd fc57 	bl	8001a8c <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041de:	4b43      	ldr	r3, [pc, #268]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e2:	4a42      	ldr	r2, [pc, #264]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80041e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80041ea:	4b40      	ldr	r3, [pc, #256]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f2:	60bb      	str	r3, [r7, #8]
 80041f4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041f6:	4b3e      	ldr	r3, [pc, #248]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a3d      	ldr	r2, [pc, #244]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 80041fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004200:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004202:	f7fe f93b 	bl	800247c <HAL_GetTick>
 8004206:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004208:	e009      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800420a:	f7fe f937 	bl	800247c <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b64      	cmp	r3, #100	@ 0x64
 8004216:	d902      	bls.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	f000 bd9f 	b.w	8004d5c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800421e:	4b34      	ldr	r3, [pc, #208]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0ef      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800422a:	4b30      	ldr	r3, [pc, #192]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800422c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800422e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004232:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d036      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	429a      	cmp	r2, r3
 8004246:	d02f      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004248:	4b28      	ldr	r3, [pc, #160]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800424a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800424c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004250:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004252:	4b26      	ldr	r3, [pc, #152]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004256:	4a25      	ldr	r2, [pc, #148]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800425c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800425e:	4b23      	ldr	r3, [pc, #140]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004262:	4a22      	ldr	r2, [pc, #136]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004264:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004268:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800426a:	4a20      	ldr	r2, [pc, #128]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004270:	4b1e      	ldr	r3, [pc, #120]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b01      	cmp	r3, #1
 800427a:	d115      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427c:	f7fe f8fe 	bl	800247c <HAL_GetTick>
 8004280:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004282:	e00b      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004284:	f7fe f8fa 	bl	800247c <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004292:	4293      	cmp	r3, r2
 8004294:	d902      	bls.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	f000 bd60 	b.w	8004d5c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800429c:	4b13      	ldr	r3, [pc, #76]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800429e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0ed      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042b4:	d120      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x554>
 80042b6:	4b0d      	ldr	r3, [pc, #52]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80042c2:	4b0c      	ldr	r3, [pc, #48]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80042c4:	400b      	ands	r3, r1
 80042c6:	4909      	ldr	r1, [pc, #36]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	608b      	str	r3, [r1, #8]
 80042cc:	e01a      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x560>
 80042ce:	bf00      	nop
 80042d0:	001a0300 	.word	0x001a0300
 80042d4:	001b0300 	.word	0x001b0300
 80042d8:	001c0300 	.word	0x001c0300
 80042dc:	001d0300 	.word	0x001d0300
 80042e0:	001e0300 	.word	0x001e0300
 80042e4:	001f0300 	.word	0x001f0300
 80042e8:	08010b40 	.word	0x08010b40
 80042ec:	40023800 	.word	0x40023800
 80042f0:	40007000 	.word	0x40007000
 80042f4:	0ffffcff 	.word	0x0ffffcff
 80042f8:	4b9a      	ldr	r3, [pc, #616]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	4a99      	ldr	r2, [pc, #612]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80042fe:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004302:	6093      	str	r3, [r2, #8]
 8004304:	4b97      	ldr	r3, [pc, #604]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004306:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004310:	4994      	ldr	r1, [pc, #592]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004312:	4313      	orrs	r3, r2
 8004314:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0310 	and.w	r3, r3, #16
 800431e:	2b00      	cmp	r3, #0
 8004320:	d01d      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004326:	2b00      	cmp	r3, #0
 8004328:	d008      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x598>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800432e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004332:	d003      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004334:	21f1      	movs	r1, #241	@ 0xf1
 8004336:	488c      	ldr	r0, [pc, #560]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004338:	f7fd fba8 	bl	8001a8c <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800433c:	4b89      	ldr	r3, [pc, #548]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800433e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004342:	4a88      	ldr	r2, [pc, #544]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004344:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004348:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800434c:	4b85      	ldr	r3, [pc, #532]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800434e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004356:	4983      	ldr	r1, [pc, #524]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004358:	4313      	orrs	r3, r2
 800435a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d01c      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00d      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004376:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800437a:	d008      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004380:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004384:	d003      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8004386:	21fb      	movs	r1, #251	@ 0xfb
 8004388:	4877      	ldr	r0, [pc, #476]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800438a:	f7fd fb7f 	bl	8001a8c <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800438e:	4b75      	ldr	r3, [pc, #468]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004394:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800439c:	4971      	ldr	r1, [pc, #452]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d01d      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00e      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x632>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80043c0:	d009      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x632>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043c6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80043ca:	d004      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x632>
 80043cc:	f240 1105 	movw	r1, #261	@ 0x105
 80043d0:	4865      	ldr	r0, [pc, #404]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80043d2:	f7fd fb5b 	bl	8001a8c <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043d6:	4b63      	ldr	r3, [pc, #396]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80043d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043e4:	495f      	ldr	r1, [pc, #380]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d01d      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00e      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004404:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004408:	d009      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x67a>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800440e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004412:	d004      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8004414:	f240 110f 	movw	r1, #271	@ 0x10f
 8004418:	4853      	ldr	r0, [pc, #332]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800441a:	f7fd fb37 	bl	8001a8c <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800441e:	4b51      	ldr	r3, [pc, #324]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004424:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800442c:	494d      	ldr	r1, [pc, #308]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800442e:	4313      	orrs	r3, r2
 8004430:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d01d      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00e      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800444c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004450:	d009      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004456:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800445a:	d004      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 800445c:	f240 1119 	movw	r1, #281	@ 0x119
 8004460:	4841      	ldr	r0, [pc, #260]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004462:	f7fd fb13 	bl	8001a8c <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004466:	4b3f      	ldr	r3, [pc, #252]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800446c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004474:	493b      	ldr	r1, [pc, #236]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004476:	4313      	orrs	r3, r2
 8004478:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004484:	2b00      	cmp	r3, #0
 8004486:	d01f      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800448c:	2b00      	cmp	r3, #0
 800448e:	d010      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004494:	2b01      	cmp	r3, #1
 8004496:	d00c      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449c:	2b03      	cmp	r3, #3
 800449e:	d008      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d004      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 80044a8:	f240 1123 	movw	r1, #291	@ 0x123
 80044ac:	482e      	ldr	r0, [pc, #184]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80044ae:	f7fd faed 	bl	8001a8c <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044b2:	4b2c      	ldr	r3, [pc, #176]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80044b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044b8:	f023 0203 	bic.w	r2, r3, #3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c0:	4928      	ldr	r1, [pc, #160]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d01f      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d010      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x75a>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044e0:	2b04      	cmp	r3, #4
 80044e2:	d00c      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x75a>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044e8:	2b0c      	cmp	r3, #12
 80044ea:	d008      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x75a>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d004      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x75a>
 80044f4:	f240 112d 	movw	r1, #301	@ 0x12d
 80044f8:	481b      	ldr	r0, [pc, #108]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80044fa:	f7fd fac7 	bl	8001a8c <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044fe:	4b19      	ldr	r3, [pc, #100]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004504:	f023 020c 	bic.w	r2, r3, #12
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800450c:	4915      	ldr	r1, [pc, #84]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800450e:	4313      	orrs	r3, r2
 8004510:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800451c:	2b00      	cmp	r3, #0
 800451e:	d025      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004524:	2b00      	cmp	r3, #0
 8004526:	d010      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800452c:	2b10      	cmp	r3, #16
 800452e:	d00c      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004534:	2b30      	cmp	r3, #48	@ 0x30
 8004536:	d008      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800453c:	2b20      	cmp	r3, #32
 800453e:	d004      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004540:	f240 1137 	movw	r1, #311	@ 0x137
 8004544:	4808      	ldr	r0, [pc, #32]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004546:	f7fd faa1 	bl	8001a8c <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800454a:	4b06      	ldr	r3, [pc, #24]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800454c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004550:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004558:	4902      	ldr	r1, [pc, #8]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800455a:	4313      	orrs	r3, r2
 800455c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004560:	e004      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8004562:	bf00      	nop
 8004564:	40023800 	.word	0x40023800
 8004568:	08010b40 	.word	0x08010b40
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004574:	2b00      	cmp	r3, #0
 8004576:	d01f      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800457c:	2b00      	cmp	r3, #0
 800457e:	d010      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004584:	2b40      	cmp	r3, #64	@ 0x40
 8004586:	d00c      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800458c:	2bc0      	cmp	r3, #192	@ 0xc0
 800458e:	d008      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004594:	2b80      	cmp	r3, #128	@ 0x80
 8004596:	d004      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004598:	f240 1141 	movw	r1, #321	@ 0x141
 800459c:	48a0      	ldr	r0, [pc, #640]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800459e:	f7fd fa75 	bl	8001a8c <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045a2:	4ba0      	ldr	r3, [pc, #640]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80045a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045a8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045b0:	499c      	ldr	r1, [pc, #624]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d022      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d013      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x850>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045d4:	d00e      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x850>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045de:	d009      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x850>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045e8:	d004      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x850>
 80045ea:	f240 114b 	movw	r1, #331	@ 0x14b
 80045ee:	488c      	ldr	r0, [pc, #560]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80045f0:	f7fd fa4c 	bl	8001a8c <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045f4:	4b8b      	ldr	r3, [pc, #556]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80045f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045fa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004602:	4988      	ldr	r1, [pc, #544]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004612:	2b00      	cmp	r3, #0
 8004614:	d022      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800461a:	2b00      	cmp	r3, #0
 800461c:	d013      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004622:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004626:	d00e      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800462c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004630:	d009      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004636:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800463a:	d004      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 800463c:	f240 1155 	movw	r1, #341	@ 0x155
 8004640:	4877      	ldr	r0, [pc, #476]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004642:	f7fd fa23 	bl	8001a8c <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004646:	4b77      	ldr	r3, [pc, #476]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800464c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004654:	4973      	ldr	r1, [pc, #460]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d022      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800466c:	2b00      	cmp	r3, #0
 800466e:	d013      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004674:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004678:	d00e      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800467e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004682:	d009      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004688:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800468c:	d004      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800468e:	f240 115f 	movw	r1, #351	@ 0x15f
 8004692:	4863      	ldr	r0, [pc, #396]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004694:	f7fd f9fa 	bl	8001a8c <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004698:	4b62      	ldr	r3, [pc, #392]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800469a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800469e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046a6:	495f      	ldr	r1, [pc, #380]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d022      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d013      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x946>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046ca:	d00e      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x946>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046d0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80046d4:	d009      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x946>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046de:	d004      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x946>
 80046e0:	f240 1169 	movw	r1, #361	@ 0x169
 80046e4:	484e      	ldr	r0, [pc, #312]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80046e6:	f7fd f9d1 	bl	8001a8c <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80046ea:	4b4e      	ldr	r3, [pc, #312]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80046ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046f0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046f8:	494a      	ldr	r1, [pc, #296]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d018      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004710:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004714:	d008      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800471a:	2b00      	cmp	r3, #0
 800471c:	d004      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800471e:	f240 1173 	movw	r1, #371	@ 0x173
 8004722:	483f      	ldr	r0, [pc, #252]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004724:	f7fd f9b2 	bl	8001a8c <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004728:	4b3e      	ldr	r3, [pc, #248]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800472a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800472e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004736:	493b      	ldr	r1, [pc, #236]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004738:	4313      	orrs	r3, r2
 800473a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d01f      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800474e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004752:	d008      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004758:	2b00      	cmp	r3, #0
 800475a:	d004      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800475c:	f240 117d 	movw	r1, #381	@ 0x17d
 8004760:	482f      	ldr	r0, [pc, #188]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004762:	f7fd f993 	bl	8001a8c <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004766:	4b2f      	ldr	r3, [pc, #188]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800476c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004774:	492b      	ldr	r1, [pc, #172]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004780:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004784:	d101      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 8004786:	2301      	movs	r3, #1
 8004788:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0308 	and.w	r3, r3, #8
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 8004796:	2301      	movs	r3, #1
 8004798:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d022      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d013      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047b6:	d00e      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047c0:	d009      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80047ca:	d004      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80047cc:	f240 1195 	movw	r1, #405	@ 0x195
 80047d0:	4813      	ldr	r0, [pc, #76]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80047d2:	f7fd f95b 	bl	8001a8c <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047d6:	4b13      	ldr	r3, [pc, #76]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80047d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047dc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047e4:	490f      	ldr	r1, [pc, #60]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d020      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004802:	d009      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800480a:	2b00      	cmp	r3, #0
 800480c:	d004      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800480e:	f240 119f 	movw	r1, #415	@ 0x19f
 8004812:	4803      	ldr	r0, [pc, #12]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004814:	f7fd f93a 	bl	8001a8c <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004818:	4b02      	ldr	r3, [pc, #8]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800481a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800481e:	e003      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xa84>
 8004820:	08010b40 	.word	0x08010b40
 8004824:	40023800 	.word	0x40023800
 8004828:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004832:	4910      	ldr	r1, [pc, #64]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8004834:	4313      	orrs	r3, r2
 8004836:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d006      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 8155 	beq.w	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800484e:	4b09      	ldr	r3, [pc, #36]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a08      	ldr	r2, [pc, #32]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8004854:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004858:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800485a:	f7fd fe0f 	bl	800247c <HAL_GetTick>
 800485e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004860:	e00a      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004862:	f7fd fe0b 	bl	800247c <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	2b64      	cmp	r3, #100	@ 0x64
 800486e:	d903      	bls.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e273      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8004874:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004878:	4b9a      	ldr	r3, [pc, #616]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1ee      	bne.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2b31      	cmp	r3, #49	@ 0x31
 800488a:	d904      	bls.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8004894:	d904      	bls.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 8004896:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 800489a:	4893      	ldr	r0, [pc, #588]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800489c:	f7fd f8f6 	bl	8001a8c <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d02e      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0xb66>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d12a      	bne.n	800490a <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d903      	bls.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xb20>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	2b07      	cmp	r3, #7
 80048c2:	d904      	bls.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80048c4:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80048c8:	4887      	ldr	r0, [pc, #540]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80048ca:	f7fd f8df 	bl	8001a8c <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048ce:	4b85      	ldr	r3, [pc, #532]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80048d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048d4:	0c1b      	lsrs	r3, r3, #16
 80048d6:	f003 0303 	and.w	r3, r3, #3
 80048da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048dc:	4b81      	ldr	r3, [pc, #516]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80048de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048e2:	0e1b      	lsrs	r3, r3, #24
 80048e4:	f003 030f 	and.w	r3, r3, #15
 80048e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	019a      	lsls	r2, r3, #6
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	041b      	lsls	r3, r3, #16
 80048f4:	431a      	orrs	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	061b      	lsls	r3, r3, #24
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	071b      	lsls	r3, r3, #28
 8004902:	4978      	ldr	r1, [pc, #480]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004904:	4313      	orrs	r3, r2
 8004906:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d004      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800491a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800491e:	d00a      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004928:	2b00      	cmp	r3, #0
 800492a:	d048      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004930:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004934:	d143      	bne.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d903      	bls.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xba2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	2b0f      	cmp	r3, #15
 8004944:	d904      	bls.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004946:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 800494a:	4867      	ldr	r0, [pc, #412]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800494c:	f7fd f89e 	bl	8001a8c <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495c:	2b20      	cmp	r3, #32
 800495e:	d904      	bls.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 8004960:	f44f 71f9 	mov.w	r1, #498	@ 0x1f2
 8004964:	4860      	ldr	r0, [pc, #384]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004966:	f7fd f891 	bl	8001a8c <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800496a:	4b5e      	ldr	r3, [pc, #376]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800496c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004970:	0c1b      	lsrs	r3, r3, #16
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004978:	4b5a      	ldr	r3, [pc, #360]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800497a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800497e:	0f1b      	lsrs	r3, r3, #28
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	019a      	lsls	r2, r3, #6
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	041b      	lsls	r3, r3, #16
 8004990:	431a      	orrs	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	061b      	lsls	r3, r3, #24
 8004998:	431a      	orrs	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	071b      	lsls	r3, r3, #28
 800499e:	4951      	ldr	r1, [pc, #324]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80049a6:	4b4f      	ldr	r3, [pc, #316]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80049a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049ac:	f023 021f 	bic.w	r2, r3, #31
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b4:	3b01      	subs	r3, #1
 80049b6:	494b      	ldr	r1, [pc, #300]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d032      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d010      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d00c      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d008      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	d004      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80049ea:	f240 2105 	movw	r1, #517	@ 0x205
 80049ee:	483e      	ldr	r0, [pc, #248]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80049f0:	f7fd f84c 	bl	8001a8c <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049f4:	4b3b      	ldr	r3, [pc, #236]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80049f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049fa:	0e1b      	lsrs	r3, r3, #24
 80049fc:	f003 030f 	and.w	r3, r3, #15
 8004a00:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a02:	4b38      	ldr	r3, [pc, #224]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a08:	0f1b      	lsrs	r3, r3, #28
 8004a0a:	f003 0307 	and.w	r3, r3, #7
 8004a0e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	019a      	lsls	r2, r3, #6
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	041b      	lsls	r3, r3, #16
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	061b      	lsls	r3, r3, #24
 8004a22:	431a      	orrs	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	071b      	lsls	r3, r3, #28
 8004a28:	492e      	ldr	r1, [pc, #184]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d040      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d010      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d00c      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d008      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	2b03      	cmp	r3, #3
 8004a5a:	d004      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8004a5c:	f44f 7105 	mov.w	r1, #532	@ 0x214
 8004a60:	4821      	ldr	r0, [pc, #132]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004a62:	f7fd f813 	bl	8001a8c <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d903      	bls.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	2b07      	cmp	r3, #7
 8004a74:	d904      	bls.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004a76:	f240 2115 	movw	r1, #533	@ 0x215
 8004a7a:	481b      	ldr	r0, [pc, #108]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004a7c:	f7fd f806 	bl	8001a8c <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d903      	bls.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	2b0f      	cmp	r3, #15
 8004a8e:	d904      	bls.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 8004a90:	f240 2116 	movw	r1, #534	@ 0x216
 8004a94:	4814      	ldr	r0, [pc, #80]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004a96:	f7fc fff9 	bl	8001a8c <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	019a      	lsls	r2, r3, #6
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	041b      	lsls	r3, r3, #16
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	061b      	lsls	r3, r3, #24
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	071b      	lsls	r3, r3, #28
 8004ab6:	490b      	ldr	r1, [pc, #44]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004abe:	4b09      	ldr	r3, [pc, #36]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a08      	ldr	r2, [pc, #32]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004ac4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ac8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aca:	f7fd fcd7 	bl	800247c <HAL_GetTick>
 8004ace:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ad0:	e00c      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ad2:	f7fd fcd3 	bl	800247c <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b64      	cmp	r3, #100	@ 0x64
 8004ade:	d905      	bls.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e13b      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8004ae4:	40023800 	.word	0x40023800
 8004ae8:	08010b40 	.word	0x08010b40
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004aec:	4b9d      	ldr	r3, [pc, #628]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0ec      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	f040 812d 	bne.w	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b00:	4b98      	ldr	r3, [pc, #608]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a97      	ldr	r2, [pc, #604]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004b06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b0c:	f7fd fcb6 	bl	800247c <HAL_GetTick>
 8004b10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b12:	e008      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b14:	f7fd fcb2 	bl	800247c <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b64      	cmp	r3, #100	@ 0x64
 8004b20:	d901      	bls.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e11a      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b26:	4b8f      	ldr	r3, [pc, #572]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b32:	d0ef      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	2b31      	cmp	r3, #49	@ 0x31
 8004b3a:	d904      	bls.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xda2>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8004b44:	d904      	bls.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8004b46:	f44f 7111 	mov.w	r1, #580	@ 0x244
 8004b4a:	4887      	ldr	r0, [pc, #540]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8004b4c:	f7fc ff9e 	bl	8001a8c <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d009      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d048      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d144      	bne.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d903      	bls.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0xde4>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	2b0f      	cmp	r3, #15
 8004b86:	d904      	bls.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xdee>
 8004b88:	f240 214b 	movw	r1, #587	@ 0x24b
 8004b8c:	4876      	ldr	r0, [pc, #472]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8004b8e:	f7fc ff7d 	bl	8001a8c <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b9e:	2b20      	cmp	r3, #32
 8004ba0:	d904      	bls.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8004ba2:	f240 214d 	movw	r1, #589	@ 0x24d
 8004ba6:	4870      	ldr	r0, [pc, #448]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8004ba8:	f7fc ff70 	bl	8001a8c <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004bac:	4b6d      	ldr	r3, [pc, #436]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bb2:	0c1b      	lsrs	r3, r3, #16
 8004bb4:	f003 0303 	and.w	r3, r3, #3
 8004bb8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004bba:	4b6a      	ldr	r3, [pc, #424]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc0:	0f1b      	lsrs	r3, r3, #28
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	019a      	lsls	r2, r3, #6
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	041b      	lsls	r3, r3, #16
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	061b      	lsls	r3, r3, #24
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	071b      	lsls	r3, r3, #28
 8004be0:	4960      	ldr	r1, [pc, #384]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004be8:	4b5e      	ldr	r3, [pc, #376]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bee:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	021b      	lsls	r3, r3, #8
 8004bfa:	495a      	ldr	r1, [pc, #360]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d037      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xeda>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c16:	d132      	bne.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d010      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d00c      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d008      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	2b03      	cmp	r3, #3
 8004c36:	d004      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8004c38:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8004c3c:	484a      	ldr	r0, [pc, #296]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8004c3e:	f7fc ff25 	bl	8001a8c <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c42:	4b48      	ldr	r3, [pc, #288]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c48:	0e1b      	lsrs	r3, r3, #24
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c50:	4b44      	ldr	r3, [pc, #272]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c56:	0f1b      	lsrs	r3, r3, #28
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	019a      	lsls	r2, r3, #6
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	041b      	lsls	r3, r3, #16
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	061b      	lsls	r3, r3, #24
 8004c70:	431a      	orrs	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	071b      	lsls	r3, r3, #28
 8004c76:	493b      	ldr	r1, [pc, #236]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0308 	and.w	r3, r3, #8
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d04d      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d903      	bls.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xef6>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	2b07      	cmp	r3, #7
 8004c98:	d904      	bls.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 8004c9a:	f240 216f 	movw	r1, #623	@ 0x26f
 8004c9e:	4832      	ldr	r0, [pc, #200]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8004ca0:	f7fc fef4 	bl	8001a8c <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d013      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cb4:	d00e      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cbe:	d009      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004cc8:	d004      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8004cca:	f44f 711c 	mov.w	r1, #624	@ 0x270
 8004cce:	4826      	ldr	r0, [pc, #152]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8004cd0:	f7fc fedc 	bl	8001a8c <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004cd4:	4b23      	ldr	r3, [pc, #140]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cda:	0e1b      	lsrs	r3, r3, #24
 8004cdc:	f003 030f 	and.w	r3, r3, #15
 8004ce0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ce2:	4b20      	ldr	r3, [pc, #128]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce8:	0c1b      	lsrs	r3, r3, #16
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	019a      	lsls	r2, r3, #6
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	041b      	lsls	r3, r3, #16
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	061b      	lsls	r3, r3, #24
 8004d00:	431a      	orrs	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	071b      	lsls	r3, r3, #28
 8004d08:	4916      	ldr	r1, [pc, #88]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d10:	4b14      	ldr	r3, [pc, #80]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004d12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d16:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1e:	4911      	ldr	r1, [pc, #68]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d26:	4b0f      	ldr	r3, [pc, #60]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a0e      	ldr	r2, [pc, #56]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d32:	f7fd fba3 	bl	800247c <HAL_GetTick>
 8004d36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d38:	e008      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d3a:	f7fd fb9f 	bl	800247c <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b64      	cmp	r3, #100	@ 0x64
 8004d46:	d901      	bls.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e007      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d4c:	4b05      	ldr	r3, [pc, #20]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d58:	d1ef      	bne.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3720      	adds	r7, #32
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	40023800 	.word	0x40023800
 8004d68:	08010b40 	.word	0x08010b40

08004d6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e1fb      	b.n	8005176 <HAL_SPI_Init+0x40a>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a83      	ldr	r2, [pc, #524]	@ (8004f90 <HAL_SPI_Init+0x224>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d01d      	beq.n	8004dc4 <HAL_SPI_Init+0x58>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a81      	ldr	r2, [pc, #516]	@ (8004f94 <HAL_SPI_Init+0x228>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d018      	beq.n	8004dc4 <HAL_SPI_Init+0x58>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a80      	ldr	r2, [pc, #512]	@ (8004f98 <HAL_SPI_Init+0x22c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d013      	beq.n	8004dc4 <HAL_SPI_Init+0x58>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a7e      	ldr	r2, [pc, #504]	@ (8004f9c <HAL_SPI_Init+0x230>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d00e      	beq.n	8004dc4 <HAL_SPI_Init+0x58>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a7d      	ldr	r2, [pc, #500]	@ (8004fa0 <HAL_SPI_Init+0x234>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d009      	beq.n	8004dc4 <HAL_SPI_Init+0x58>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a7b      	ldr	r2, [pc, #492]	@ (8004fa4 <HAL_SPI_Init+0x238>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d004      	beq.n	8004dc4 <HAL_SPI_Init+0x58>
 8004dba:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 8004dbe:	487a      	ldr	r0, [pc, #488]	@ (8004fa8 <HAL_SPI_Init+0x23c>)
 8004dc0:	f7fc fe64 	bl	8001a8c <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d009      	beq.n	8004de0 <HAL_SPI_Init+0x74>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dd4:	d004      	beq.n	8004de0 <HAL_SPI_Init+0x74>
 8004dd6:	f240 1147 	movw	r1, #327	@ 0x147
 8004dda:	4873      	ldr	r0, [pc, #460]	@ (8004fa8 <HAL_SPI_Init+0x23c>)
 8004ddc:	f7fc fe56 	bl	8001a8c <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00e      	beq.n	8004e06 <HAL_SPI_Init+0x9a>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004df0:	d009      	beq.n	8004e06 <HAL_SPI_Init+0x9a>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dfa:	d004      	beq.n	8004e06 <HAL_SPI_Init+0x9a>
 8004dfc:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8004e00:	4869      	ldr	r0, [pc, #420]	@ (8004fa8 <HAL_SPI_Init+0x23c>)
 8004e02:	f7fc fe43 	bl	8001a8c <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004e0e:	d040      	beq.n	8004e92 <HAL_SPI_Init+0x126>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8004e18:	d03b      	beq.n	8004e92 <HAL_SPI_Init+0x126>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 8004e22:	d036      	beq.n	8004e92 <HAL_SPI_Init+0x126>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e2c:	d031      	beq.n	8004e92 <HAL_SPI_Init+0x126>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8004e36:	d02c      	beq.n	8004e92 <HAL_SPI_Init+0x126>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004e40:	d027      	beq.n	8004e92 <HAL_SPI_Init+0x126>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 8004e4a:	d022      	beq.n	8004e92 <HAL_SPI_Init+0x126>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e54:	d01d      	beq.n	8004e92 <HAL_SPI_Init+0x126>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e5e:	d018      	beq.n	8004e92 <HAL_SPI_Init+0x126>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004e68:	d013      	beq.n	8004e92 <HAL_SPI_Init+0x126>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004e72:	d00e      	beq.n	8004e92 <HAL_SPI_Init+0x126>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e7c:	d009      	beq.n	8004e92 <HAL_SPI_Init+0x126>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e86:	d004      	beq.n	8004e92 <HAL_SPI_Init+0x126>
 8004e88:	f240 1149 	movw	r1, #329	@ 0x149
 8004e8c:	4846      	ldr	r0, [pc, #280]	@ (8004fa8 <HAL_SPI_Init+0x23c>)
 8004e8e:	f7fc fdfd 	bl	8001a8c <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e9a:	d00d      	beq.n	8004eb8 <HAL_SPI_Init+0x14c>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d009      	beq.n	8004eb8 <HAL_SPI_Init+0x14c>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004eac:	d004      	beq.n	8004eb8 <HAL_SPI_Init+0x14c>
 8004eae:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8004eb2:	483d      	ldr	r0, [pc, #244]	@ (8004fa8 <HAL_SPI_Init+0x23c>)
 8004eb4:	f7fc fdea 	bl	8001a8c <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ebc:	2b08      	cmp	r3, #8
 8004ebe:	d008      	beq.n	8004ed2 <HAL_SPI_Init+0x166>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d004      	beq.n	8004ed2 <HAL_SPI_Init+0x166>
 8004ec8:	f240 114b 	movw	r1, #331	@ 0x14b
 8004ecc:	4836      	ldr	r0, [pc, #216]	@ (8004fa8 <HAL_SPI_Init+0x23c>)
 8004ece:	f7fc fddd 	bl	8001a8c <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d020      	beq.n	8004f1c <HAL_SPI_Init+0x1b0>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	2b08      	cmp	r3, #8
 8004ee0:	d01c      	beq.n	8004f1c <HAL_SPI_Init+0x1b0>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	2b10      	cmp	r3, #16
 8004ee8:	d018      	beq.n	8004f1c <HAL_SPI_Init+0x1b0>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	2b18      	cmp	r3, #24
 8004ef0:	d014      	beq.n	8004f1c <HAL_SPI_Init+0x1b0>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	2b20      	cmp	r3, #32
 8004ef8:	d010      	beq.n	8004f1c <HAL_SPI_Init+0x1b0>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	2b28      	cmp	r3, #40	@ 0x28
 8004f00:	d00c      	beq.n	8004f1c <HAL_SPI_Init+0x1b0>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	2b30      	cmp	r3, #48	@ 0x30
 8004f08:	d008      	beq.n	8004f1c <HAL_SPI_Init+0x1b0>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	2b38      	cmp	r3, #56	@ 0x38
 8004f10:	d004      	beq.n	8004f1c <HAL_SPI_Init+0x1b0>
 8004f12:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8004f16:	4824      	ldr	r0, [pc, #144]	@ (8004fa8 <HAL_SPI_Init+0x23c>)
 8004f18:	f7fc fdb8 	bl	8001a8c <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d008      	beq.n	8004f36 <HAL_SPI_Init+0x1ca>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	2b80      	cmp	r3, #128	@ 0x80
 8004f2a:	d004      	beq.n	8004f36 <HAL_SPI_Init+0x1ca>
 8004f2c:	f240 114d 	movw	r1, #333	@ 0x14d
 8004f30:	481d      	ldr	r0, [pc, #116]	@ (8004fa8 <HAL_SPI_Init+0x23c>)
 8004f32:	f7fc fdab 	bl	8001a8c <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d008      	beq.n	8004f50 <HAL_SPI_Init+0x1e4>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f42:	2b10      	cmp	r3, #16
 8004f44:	d004      	beq.n	8004f50 <HAL_SPI_Init+0x1e4>
 8004f46:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 8004f4a:	4817      	ldr	r0, [pc, #92]	@ (8004fa8 <HAL_SPI_Init+0x23c>)
 8004f4c:	f7fc fd9e 	bl	8001a8c <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d158      	bne.n	800500a <HAL_SPI_Init+0x29e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d008      	beq.n	8004f72 <HAL_SPI_Init+0x206>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d004      	beq.n	8004f72 <HAL_SPI_Init+0x206>
 8004f68:	f240 1151 	movw	r1, #337	@ 0x151
 8004f6c:	480e      	ldr	r0, [pc, #56]	@ (8004fa8 <HAL_SPI_Init+0x23c>)
 8004f6e:	f7fc fd8d 	bl	8001a8c <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d018      	beq.n	8004fac <HAL_SPI_Init+0x240>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d014      	beq.n	8004fac <HAL_SPI_Init+0x240>
 8004f82:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8004f86:	4808      	ldr	r0, [pc, #32]	@ (8004fa8 <HAL_SPI_Init+0x23c>)
 8004f88:	f7fc fd80 	bl	8001a8c <assert_failed>
 8004f8c:	e00e      	b.n	8004fac <HAL_SPI_Init+0x240>
 8004f8e:	bf00      	nop
 8004f90:	40013000 	.word	0x40013000
 8004f94:	40003800 	.word	0x40003800
 8004f98:	40003c00 	.word	0x40003c00
 8004f9c:	40013400 	.word	0x40013400
 8004fa0:	40015000 	.word	0x40015000
 8004fa4:	40015400 	.word	0x40015400
 8004fa8:	08010b7c 	.word	0x08010b7c

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fb4:	d125      	bne.n	8005002 <HAL_SPI_Init+0x296>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d050      	beq.n	8005060 <HAL_SPI_Init+0x2f4>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	2b08      	cmp	r3, #8
 8004fc4:	d04c      	beq.n	8005060 <HAL_SPI_Init+0x2f4>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	2b10      	cmp	r3, #16
 8004fcc:	d048      	beq.n	8005060 <HAL_SPI_Init+0x2f4>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	2b18      	cmp	r3, #24
 8004fd4:	d044      	beq.n	8005060 <HAL_SPI_Init+0x2f4>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	2b20      	cmp	r3, #32
 8004fdc:	d040      	beq.n	8005060 <HAL_SPI_Init+0x2f4>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	2b28      	cmp	r3, #40	@ 0x28
 8004fe4:	d03c      	beq.n	8005060 <HAL_SPI_Init+0x2f4>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	2b30      	cmp	r3, #48	@ 0x30
 8004fec:	d038      	beq.n	8005060 <HAL_SPI_Init+0x2f4>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	2b38      	cmp	r3, #56	@ 0x38
 8004ff4:	d034      	beq.n	8005060 <HAL_SPI_Init+0x2f4>
 8004ff6:	f44f 71ab 	mov.w	r1, #342	@ 0x156
 8004ffa:	4861      	ldr	r0, [pc, #388]	@ (8005180 <HAL_SPI_Init+0x414>)
 8004ffc:	f7fc fd46 	bl	8001a8c <assert_failed>
 8005000:	e02e      	b.n	8005060 <HAL_SPI_Init+0x2f4>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	61da      	str	r2, [r3, #28]
 8005008:	e02a      	b.n	8005060 <HAL_SPI_Init+0x2f4>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d020      	beq.n	8005054 <HAL_SPI_Init+0x2e8>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	2b08      	cmp	r3, #8
 8005018:	d01c      	beq.n	8005054 <HAL_SPI_Init+0x2e8>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	2b10      	cmp	r3, #16
 8005020:	d018      	beq.n	8005054 <HAL_SPI_Init+0x2e8>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	2b18      	cmp	r3, #24
 8005028:	d014      	beq.n	8005054 <HAL_SPI_Init+0x2e8>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	2b20      	cmp	r3, #32
 8005030:	d010      	beq.n	8005054 <HAL_SPI_Init+0x2e8>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	2b28      	cmp	r3, #40	@ 0x28
 8005038:	d00c      	beq.n	8005054 <HAL_SPI_Init+0x2e8>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	2b30      	cmp	r3, #48	@ 0x30
 8005040:	d008      	beq.n	8005054 <HAL_SPI_Init+0x2e8>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	2b38      	cmp	r3, #56	@ 0x38
 8005048:	d004      	beq.n	8005054 <HAL_SPI_Init+0x2e8>
 800504a:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 800504e:	484c      	ldr	r0, [pc, #304]	@ (8005180 <HAL_SPI_Init+0x414>)
 8005050:	f7fc fd1c 	bl	8001a8c <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d106      	bne.n	8005080 <HAL_SPI_Init+0x314>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7fc ffd2 	bl	8002024 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005096:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80050a0:	d902      	bls.n	80050a8 <HAL_SPI_Init+0x33c>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80050a2:	2300      	movs	r3, #0
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	e002      	b.n	80050ae <HAL_SPI_Init+0x342>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80050a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80050ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80050b6:	d007      	beq.n	80050c8 <HAL_SPI_Init+0x35c>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80050c0:	d002      	beq.n	80050c8 <HAL_SPI_Init+0x35c>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80050d8:	431a      	orrs	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	431a      	orrs	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	431a      	orrs	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050f6:	431a      	orrs	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	69db      	ldr	r3, [r3, #28]
 80050fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005100:	431a      	orrs	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800510a:	ea42 0103 	orr.w	r1, r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005112:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	0c1b      	lsrs	r3, r3, #16
 8005124:	f003 0204 	and.w	r2, r3, #4
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512c:	f003 0310 	and.w	r3, r3, #16
 8005130:	431a      	orrs	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005136:	f003 0308 	and.w	r3, r3, #8
 800513a:	431a      	orrs	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005144:	ea42 0103 	orr.w	r1, r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	430a      	orrs	r2, r1
 8005154:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	69da      	ldr	r2, [r3, #28]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005164:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	08010b7c 	.word	0x08010b7c

08005184 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b088      	sub	sp, #32
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	099b      	lsrs	r3, r3, #6
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10f      	bne.n	80051c8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00a      	beq.n	80051c8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	099b      	lsrs	r3, r3, #6
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d004      	beq.n	80051c8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	4798      	blx	r3
    return;
 80051c6:	e0d7      	b.n	8005378 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	085b      	lsrs	r3, r3, #1
 80051cc:	f003 0301 	and.w	r3, r3, #1
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00a      	beq.n	80051ea <HAL_SPI_IRQHandler+0x66>
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	09db      	lsrs	r3, r3, #7
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d004      	beq.n	80051ea <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	4798      	blx	r3
    return;
 80051e8:	e0c6      	b.n	8005378 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	095b      	lsrs	r3, r3, #5
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10c      	bne.n	8005210 <HAL_SPI_IRQHandler+0x8c>
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	099b      	lsrs	r3, r3, #6
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d106      	bne.n	8005210 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	0a1b      	lsrs	r3, r3, #8
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 80b4 	beq.w	8005378 <HAL_SPI_IRQHandler+0x1f4>
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	095b      	lsrs	r3, r3, #5
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 80ad 	beq.w	8005378 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	099b      	lsrs	r3, r3, #6
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d023      	beq.n	8005272 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b03      	cmp	r3, #3
 8005234:	d011      	beq.n	800525a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800523a:	f043 0204 	orr.w	r2, r3, #4
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005242:	2300      	movs	r3, #0
 8005244:	617b      	str	r3, [r7, #20]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	617b      	str	r3, [r7, #20]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	e00b      	b.n	8005272 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800525a:	2300      	movs	r3, #0
 800525c:	613b      	str	r3, [r7, #16]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	613b      	str	r3, [r7, #16]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	613b      	str	r3, [r7, #16]
 800526e:	693b      	ldr	r3, [r7, #16]
        return;
 8005270:	e082      	b.n	8005378 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	095b      	lsrs	r3, r3, #5
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	d014      	beq.n	80052a8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005282:	f043 0201 	orr.w	r2, r3, #1
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800528a:	2300      	movs	r3, #0
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	60fb      	str	r3, [r7, #12]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	0a1b      	lsrs	r3, r3, #8
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00c      	beq.n	80052ce <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052b8:	f043 0208 	orr.w	r2, r3, #8
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80052c0:	2300      	movs	r3, #0
 80052c2:	60bb      	str	r3, [r7, #8]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	60bb      	str	r3, [r7, #8]
 80052cc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d04f      	beq.n	8005376 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80052e4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d104      	bne.n	8005302 <HAL_SPI_IRQHandler+0x17e>
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d034      	beq.n	800536c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0203 	bic.w	r2, r2, #3
 8005310:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005316:	2b00      	cmp	r3, #0
 8005318:	d011      	beq.n	800533e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800531e:	4a18      	ldr	r2, [pc, #96]	@ (8005380 <HAL_SPI_IRQHandler+0x1fc>)
 8005320:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005326:	4618      	mov	r0, r3
 8005328:	f7fd fb82 	bl	8002a30 <HAL_DMA_Abort_IT>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d005      	beq.n	800533e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005336:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005342:	2b00      	cmp	r3, #0
 8005344:	d016      	beq.n	8005374 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800534a:	4a0d      	ldr	r2, [pc, #52]	@ (8005380 <HAL_SPI_IRQHandler+0x1fc>)
 800534c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005352:	4618      	mov	r0, r3
 8005354:	f7fd fb6c 	bl	8002a30 <HAL_DMA_Abort_IT>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005362:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800536a:	e003      	b.n	8005374 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f809 	bl	8005384 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005372:	e000      	b.n	8005376 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005374:	bf00      	nop
    return;
 8005376:	bf00      	nop
  }
}
 8005378:	3720      	adds	r7, #32
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	08005399 	.word	0x08005399

08005384 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f7ff ffe5 	bl	8005384 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80053ba:	bf00      	nop
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
	...

080053c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e0f5      	b.n	80055c2 <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a7c      	ldr	r2, [pc, #496]	@ (80055cc <HAL_TIM_Base_Init+0x208>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d045      	beq.n	800546c <HAL_TIM_Base_Init+0xa8>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053e8:	d040      	beq.n	800546c <HAL_TIM_Base_Init+0xa8>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a78      	ldr	r2, [pc, #480]	@ (80055d0 <HAL_TIM_Base_Init+0x20c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d03b      	beq.n	800546c <HAL_TIM_Base_Init+0xa8>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a76      	ldr	r2, [pc, #472]	@ (80055d4 <HAL_TIM_Base_Init+0x210>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d036      	beq.n	800546c <HAL_TIM_Base_Init+0xa8>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a75      	ldr	r2, [pc, #468]	@ (80055d8 <HAL_TIM_Base_Init+0x214>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d031      	beq.n	800546c <HAL_TIM_Base_Init+0xa8>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a73      	ldr	r2, [pc, #460]	@ (80055dc <HAL_TIM_Base_Init+0x218>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d02c      	beq.n	800546c <HAL_TIM_Base_Init+0xa8>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a72      	ldr	r2, [pc, #456]	@ (80055e0 <HAL_TIM_Base_Init+0x21c>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d027      	beq.n	800546c <HAL_TIM_Base_Init+0xa8>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a70      	ldr	r2, [pc, #448]	@ (80055e4 <HAL_TIM_Base_Init+0x220>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d022      	beq.n	800546c <HAL_TIM_Base_Init+0xa8>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a6f      	ldr	r2, [pc, #444]	@ (80055e8 <HAL_TIM_Base_Init+0x224>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d01d      	beq.n	800546c <HAL_TIM_Base_Init+0xa8>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a6d      	ldr	r2, [pc, #436]	@ (80055ec <HAL_TIM_Base_Init+0x228>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d018      	beq.n	800546c <HAL_TIM_Base_Init+0xa8>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a6c      	ldr	r2, [pc, #432]	@ (80055f0 <HAL_TIM_Base_Init+0x22c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d013      	beq.n	800546c <HAL_TIM_Base_Init+0xa8>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a6a      	ldr	r2, [pc, #424]	@ (80055f4 <HAL_TIM_Base_Init+0x230>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d00e      	beq.n	800546c <HAL_TIM_Base_Init+0xa8>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a69      	ldr	r2, [pc, #420]	@ (80055f8 <HAL_TIM_Base_Init+0x234>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d009      	beq.n	800546c <HAL_TIM_Base_Init+0xa8>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a67      	ldr	r2, [pc, #412]	@ (80055fc <HAL_TIM_Base_Init+0x238>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d004      	beq.n	800546c <HAL_TIM_Base_Init+0xa8>
 8005462:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8005466:	4866      	ldr	r0, [pc, #408]	@ (8005600 <HAL_TIM_Base_Init+0x23c>)
 8005468:	f7fc fb10 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d014      	beq.n	800549e <HAL_TIM_Base_Init+0xda>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	2b10      	cmp	r3, #16
 800547a:	d010      	beq.n	800549e <HAL_TIM_Base_Init+0xda>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	2b20      	cmp	r3, #32
 8005482:	d00c      	beq.n	800549e <HAL_TIM_Base_Init+0xda>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	2b40      	cmp	r3, #64	@ 0x40
 800548a:	d008      	beq.n	800549e <HAL_TIM_Base_Init+0xda>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	2b60      	cmp	r3, #96	@ 0x60
 8005492:	d004      	beq.n	800549e <HAL_TIM_Base_Init+0xda>
 8005494:	f240 1117 	movw	r1, #279	@ 0x117
 8005498:	4859      	ldr	r0, [pc, #356]	@ (8005600 <HAL_TIM_Base_Init+0x23c>)
 800549a:	f7fc faf7 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00e      	beq.n	80054c4 <HAL_TIM_Base_Init+0x100>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054ae:	d009      	beq.n	80054c4 <HAL_TIM_Base_Init+0x100>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054b8:	d004      	beq.n	80054c4 <HAL_TIM_Base_Init+0x100>
 80054ba:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80054be:	4850      	ldr	r0, [pc, #320]	@ (8005600 <HAL_TIM_Base_Init+0x23c>)
 80054c0:	f7fc fae4 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054cc:	d004      	beq.n	80054d8 <HAL_TIM_Base_Init+0x114>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a41      	ldr	r2, [pc, #260]	@ (80055d8 <HAL_TIM_Base_Init+0x214>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d107      	bne.n	80054e8 <HAL_TIM_Base_Init+0x124>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	bf14      	ite	ne
 80054e0:	2301      	movne	r3, #1
 80054e2:	2300      	moveq	r3, #0
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	e00e      	b.n	8005506 <HAL_TIM_Base_Init+0x142>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d006      	beq.n	80054fe <HAL_TIM_Base_Init+0x13a>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054f8:	d201      	bcs.n	80054fe <HAL_TIM_Base_Init+0x13a>
 80054fa:	2301      	movs	r3, #1
 80054fc:	e000      	b.n	8005500 <HAL_TIM_Base_Init+0x13c>
 80054fe:	2300      	movs	r3, #0
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d104      	bne.n	8005514 <HAL_TIM_Base_Init+0x150>
 800550a:	f240 1119 	movw	r1, #281	@ 0x119
 800550e:	483c      	ldr	r0, [pc, #240]	@ (8005600 <HAL_TIM_Base_Init+0x23c>)
 8005510:	f7fc fabc 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d008      	beq.n	800552e <HAL_TIM_Base_Init+0x16a>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	2b80      	cmp	r3, #128	@ 0x80
 8005522:	d004      	beq.n	800552e <HAL_TIM_Base_Init+0x16a>
 8005524:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8005528:	4835      	ldr	r0, [pc, #212]	@ (8005600 <HAL_TIM_Base_Init+0x23c>)
 800552a:	f7fc faaf 	bl	8001a8c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d106      	bne.n	8005548 <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7fc fdba 	bl	80020bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	3304      	adds	r3, #4
 8005558:	4619      	mov	r1, r3
 800555a:	4610      	mov	r0, r2
 800555c:	f001 fec6 	bl	80072ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	40010000 	.word	0x40010000
 80055d0:	40000400 	.word	0x40000400
 80055d4:	40000800 	.word	0x40000800
 80055d8:	40000c00 	.word	0x40000c00
 80055dc:	40001000 	.word	0x40001000
 80055e0:	40001400 	.word	0x40001400
 80055e4:	40010400 	.word	0x40010400
 80055e8:	40014000 	.word	0x40014000
 80055ec:	40014400 	.word	0x40014400
 80055f0:	40014800 	.word	0x40014800
 80055f4:	40001800 	.word	0x40001800
 80055f8:	40001c00 	.word	0x40001c00
 80055fc:	40002000 	.word	0x40002000
 8005600:	08010bb4 	.word	0x08010bb4

08005604 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e0f5      	b.n	8005802 <HAL_TIM_OC_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a7c      	ldr	r2, [pc, #496]	@ (800580c <HAL_TIM_OC_Init+0x208>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d045      	beq.n	80056ac <HAL_TIM_OC_Init+0xa8>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005628:	d040      	beq.n	80056ac <HAL_TIM_OC_Init+0xa8>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a78      	ldr	r2, [pc, #480]	@ (8005810 <HAL_TIM_OC_Init+0x20c>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d03b      	beq.n	80056ac <HAL_TIM_OC_Init+0xa8>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a76      	ldr	r2, [pc, #472]	@ (8005814 <HAL_TIM_OC_Init+0x210>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d036      	beq.n	80056ac <HAL_TIM_OC_Init+0xa8>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a75      	ldr	r2, [pc, #468]	@ (8005818 <HAL_TIM_OC_Init+0x214>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d031      	beq.n	80056ac <HAL_TIM_OC_Init+0xa8>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a73      	ldr	r2, [pc, #460]	@ (800581c <HAL_TIM_OC_Init+0x218>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d02c      	beq.n	80056ac <HAL_TIM_OC_Init+0xa8>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a72      	ldr	r2, [pc, #456]	@ (8005820 <HAL_TIM_OC_Init+0x21c>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d027      	beq.n	80056ac <HAL_TIM_OC_Init+0xa8>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a70      	ldr	r2, [pc, #448]	@ (8005824 <HAL_TIM_OC_Init+0x220>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d022      	beq.n	80056ac <HAL_TIM_OC_Init+0xa8>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a6f      	ldr	r2, [pc, #444]	@ (8005828 <HAL_TIM_OC_Init+0x224>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d01d      	beq.n	80056ac <HAL_TIM_OC_Init+0xa8>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a6d      	ldr	r2, [pc, #436]	@ (800582c <HAL_TIM_OC_Init+0x228>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d018      	beq.n	80056ac <HAL_TIM_OC_Init+0xa8>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a6c      	ldr	r2, [pc, #432]	@ (8005830 <HAL_TIM_OC_Init+0x22c>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d013      	beq.n	80056ac <HAL_TIM_OC_Init+0xa8>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a6a      	ldr	r2, [pc, #424]	@ (8005834 <HAL_TIM_OC_Init+0x230>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d00e      	beq.n	80056ac <HAL_TIM_OC_Init+0xa8>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a69      	ldr	r2, [pc, #420]	@ (8005838 <HAL_TIM_OC_Init+0x234>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d009      	beq.n	80056ac <HAL_TIM_OC_Init+0xa8>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a67      	ldr	r2, [pc, #412]	@ (800583c <HAL_TIM_OC_Init+0x238>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d004      	beq.n	80056ac <HAL_TIM_OC_Init+0xa8>
 80056a2:	f240 2196 	movw	r1, #662	@ 0x296
 80056a6:	4866      	ldr	r0, [pc, #408]	@ (8005840 <HAL_TIM_OC_Init+0x23c>)
 80056a8:	f7fc f9f0 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d014      	beq.n	80056de <HAL_TIM_OC_Init+0xda>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	2b10      	cmp	r3, #16
 80056ba:	d010      	beq.n	80056de <HAL_TIM_OC_Init+0xda>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	2b20      	cmp	r3, #32
 80056c2:	d00c      	beq.n	80056de <HAL_TIM_OC_Init+0xda>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	2b40      	cmp	r3, #64	@ 0x40
 80056ca:	d008      	beq.n	80056de <HAL_TIM_OC_Init+0xda>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	2b60      	cmp	r3, #96	@ 0x60
 80056d2:	d004      	beq.n	80056de <HAL_TIM_OC_Init+0xda>
 80056d4:	f240 2197 	movw	r1, #663	@ 0x297
 80056d8:	4859      	ldr	r0, [pc, #356]	@ (8005840 <HAL_TIM_OC_Init+0x23c>)
 80056da:	f7fc f9d7 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00e      	beq.n	8005704 <HAL_TIM_OC_Init+0x100>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056ee:	d009      	beq.n	8005704 <HAL_TIM_OC_Init+0x100>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056f8:	d004      	beq.n	8005704 <HAL_TIM_OC_Init+0x100>
 80056fa:	f44f 7126 	mov.w	r1, #664	@ 0x298
 80056fe:	4850      	ldr	r0, [pc, #320]	@ (8005840 <HAL_TIM_OC_Init+0x23c>)
 8005700:	f7fc f9c4 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800570c:	d004      	beq.n	8005718 <HAL_TIM_OC_Init+0x114>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a41      	ldr	r2, [pc, #260]	@ (8005818 <HAL_TIM_OC_Init+0x214>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d107      	bne.n	8005728 <HAL_TIM_OC_Init+0x124>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	2b00      	cmp	r3, #0
 800571e:	bf14      	ite	ne
 8005720:	2301      	movne	r3, #1
 8005722:	2300      	moveq	r3, #0
 8005724:	b2db      	uxtb	r3, r3
 8005726:	e00e      	b.n	8005746 <HAL_TIM_OC_Init+0x142>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d006      	beq.n	800573e <HAL_TIM_OC_Init+0x13a>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005738:	d201      	bcs.n	800573e <HAL_TIM_OC_Init+0x13a>
 800573a:	2301      	movs	r3, #1
 800573c:	e000      	b.n	8005740 <HAL_TIM_OC_Init+0x13c>
 800573e:	2300      	movs	r3, #0
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d104      	bne.n	8005754 <HAL_TIM_OC_Init+0x150>
 800574a:	f240 2199 	movw	r1, #665	@ 0x299
 800574e:	483c      	ldr	r0, [pc, #240]	@ (8005840 <HAL_TIM_OC_Init+0x23c>)
 8005750:	f7fc f99c 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d008      	beq.n	800576e <HAL_TIM_OC_Init+0x16a>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	2b80      	cmp	r3, #128	@ 0x80
 8005762:	d004      	beq.n	800576e <HAL_TIM_OC_Init+0x16a>
 8005764:	f240 219a 	movw	r1, #666	@ 0x29a
 8005768:	4835      	ldr	r0, [pc, #212]	@ (8005840 <HAL_TIM_OC_Init+0x23c>)
 800576a:	f7fc f98f 	bl	8001a8c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d106      	bne.n	8005788 <HAL_TIM_OC_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f85e 	bl	8005844 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	3304      	adds	r3, #4
 8005798:	4619      	mov	r1, r3
 800579a:	4610      	mov	r0, r2
 800579c:	f001 fda6 	bl	80072ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	40010000 	.word	0x40010000
 8005810:	40000400 	.word	0x40000400
 8005814:	40000800 	.word	0x40000800
 8005818:	40000c00 	.word	0x40000c00
 800581c:	40001000 	.word	0x40001000
 8005820:	40001400 	.word	0x40001400
 8005824:	40010400 	.word	0x40010400
 8005828:	40014000 	.word	0x40014000
 800582c:	40014400 	.word	0x40014400
 8005830:	40014800 	.word	0x40014800
 8005834:	40001800 	.word	0x40001800
 8005838:	40001c00 	.word	0x40001c00
 800583c:	40002000 	.word	0x40002000
 8005840:	08010bb4 	.word	0x08010bb4

08005844 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e0f5      	b.n	8005a56 <HAL_TIM_PWM_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a7c      	ldr	r2, [pc, #496]	@ (8005a60 <HAL_TIM_PWM_Init+0x208>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d045      	beq.n	8005900 <HAL_TIM_PWM_Init+0xa8>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800587c:	d040      	beq.n	8005900 <HAL_TIM_PWM_Init+0xa8>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a78      	ldr	r2, [pc, #480]	@ (8005a64 <HAL_TIM_PWM_Init+0x20c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d03b      	beq.n	8005900 <HAL_TIM_PWM_Init+0xa8>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a76      	ldr	r2, [pc, #472]	@ (8005a68 <HAL_TIM_PWM_Init+0x210>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d036      	beq.n	8005900 <HAL_TIM_PWM_Init+0xa8>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a75      	ldr	r2, [pc, #468]	@ (8005a6c <HAL_TIM_PWM_Init+0x214>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d031      	beq.n	8005900 <HAL_TIM_PWM_Init+0xa8>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a73      	ldr	r2, [pc, #460]	@ (8005a70 <HAL_TIM_PWM_Init+0x218>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d02c      	beq.n	8005900 <HAL_TIM_PWM_Init+0xa8>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a72      	ldr	r2, [pc, #456]	@ (8005a74 <HAL_TIM_PWM_Init+0x21c>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d027      	beq.n	8005900 <HAL_TIM_PWM_Init+0xa8>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a70      	ldr	r2, [pc, #448]	@ (8005a78 <HAL_TIM_PWM_Init+0x220>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d022      	beq.n	8005900 <HAL_TIM_PWM_Init+0xa8>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a6f      	ldr	r2, [pc, #444]	@ (8005a7c <HAL_TIM_PWM_Init+0x224>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d01d      	beq.n	8005900 <HAL_TIM_PWM_Init+0xa8>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a6d      	ldr	r2, [pc, #436]	@ (8005a80 <HAL_TIM_PWM_Init+0x228>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d018      	beq.n	8005900 <HAL_TIM_PWM_Init+0xa8>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a6c      	ldr	r2, [pc, #432]	@ (8005a84 <HAL_TIM_PWM_Init+0x22c>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d013      	beq.n	8005900 <HAL_TIM_PWM_Init+0xa8>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a6a      	ldr	r2, [pc, #424]	@ (8005a88 <HAL_TIM_PWM_Init+0x230>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d00e      	beq.n	8005900 <HAL_TIM_PWM_Init+0xa8>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a69      	ldr	r2, [pc, #420]	@ (8005a8c <HAL_TIM_PWM_Init+0x234>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d009      	beq.n	8005900 <HAL_TIM_PWM_Init+0xa8>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a67      	ldr	r2, [pc, #412]	@ (8005a90 <HAL_TIM_PWM_Init+0x238>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d004      	beq.n	8005900 <HAL_TIM_PWM_Init+0xa8>
 80058f6:	f240 5133 	movw	r1, #1331	@ 0x533
 80058fa:	4866      	ldr	r0, [pc, #408]	@ (8005a94 <HAL_TIM_PWM_Init+0x23c>)
 80058fc:	f7fc f8c6 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d014      	beq.n	8005932 <HAL_TIM_PWM_Init+0xda>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	2b10      	cmp	r3, #16
 800590e:	d010      	beq.n	8005932 <HAL_TIM_PWM_Init+0xda>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	2b20      	cmp	r3, #32
 8005916:	d00c      	beq.n	8005932 <HAL_TIM_PWM_Init+0xda>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	2b40      	cmp	r3, #64	@ 0x40
 800591e:	d008      	beq.n	8005932 <HAL_TIM_PWM_Init+0xda>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	2b60      	cmp	r3, #96	@ 0x60
 8005926:	d004      	beq.n	8005932 <HAL_TIM_PWM_Init+0xda>
 8005928:	f240 5134 	movw	r1, #1332	@ 0x534
 800592c:	4859      	ldr	r0, [pc, #356]	@ (8005a94 <HAL_TIM_PWM_Init+0x23c>)
 800592e:	f7fc f8ad 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00e      	beq.n	8005958 <HAL_TIM_PWM_Init+0x100>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005942:	d009      	beq.n	8005958 <HAL_TIM_PWM_Init+0x100>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800594c:	d004      	beq.n	8005958 <HAL_TIM_PWM_Init+0x100>
 800594e:	f240 5135 	movw	r1, #1333	@ 0x535
 8005952:	4850      	ldr	r0, [pc, #320]	@ (8005a94 <HAL_TIM_PWM_Init+0x23c>)
 8005954:	f7fc f89a 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005960:	d004      	beq.n	800596c <HAL_TIM_PWM_Init+0x114>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a41      	ldr	r2, [pc, #260]	@ (8005a6c <HAL_TIM_PWM_Init+0x214>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d107      	bne.n	800597c <HAL_TIM_PWM_Init+0x124>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	2b00      	cmp	r3, #0
 8005972:	bf14      	ite	ne
 8005974:	2301      	movne	r3, #1
 8005976:	2300      	moveq	r3, #0
 8005978:	b2db      	uxtb	r3, r3
 800597a:	e00e      	b.n	800599a <HAL_TIM_PWM_Init+0x142>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d006      	beq.n	8005992 <HAL_TIM_PWM_Init+0x13a>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800598c:	d201      	bcs.n	8005992 <HAL_TIM_PWM_Init+0x13a>
 800598e:	2301      	movs	r3, #1
 8005990:	e000      	b.n	8005994 <HAL_TIM_PWM_Init+0x13c>
 8005992:	2300      	movs	r3, #0
 8005994:	f003 0301 	and.w	r3, r3, #1
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d104      	bne.n	80059a8 <HAL_TIM_PWM_Init+0x150>
 800599e:	f240 5136 	movw	r1, #1334	@ 0x536
 80059a2:	483c      	ldr	r0, [pc, #240]	@ (8005a94 <HAL_TIM_PWM_Init+0x23c>)
 80059a4:	f7fc f872 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d008      	beq.n	80059c2 <HAL_TIM_PWM_Init+0x16a>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	2b80      	cmp	r3, #128	@ 0x80
 80059b6:	d004      	beq.n	80059c2 <HAL_TIM_PWM_Init+0x16a>
 80059b8:	f240 5137 	movw	r1, #1335	@ 0x537
 80059bc:	4835      	ldr	r0, [pc, #212]	@ (8005a94 <HAL_TIM_PWM_Init+0x23c>)
 80059be:	f7fc f865 	bl	8001a8c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d106      	bne.n	80059dc <HAL_TIM_PWM_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f85e 	bl	8005a98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	3304      	adds	r3, #4
 80059ec:	4619      	mov	r1, r3
 80059ee:	4610      	mov	r0, r2
 80059f0:	f001 fc7c 	bl	80072ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	40010000 	.word	0x40010000
 8005a64:	40000400 	.word	0x40000400
 8005a68:	40000800 	.word	0x40000800
 8005a6c:	40000c00 	.word	0x40000c00
 8005a70:	40001000 	.word	0x40001000
 8005a74:	40001400 	.word	0x40001400
 8005a78:	40010400 	.word	0x40010400
 8005a7c:	40014000 	.word	0x40014000
 8005a80:	40014400 	.word	0x40014400
 8005a84:	40014800 	.word	0x40014800
 8005a88:	40001800 	.word	0x40001800
 8005a8c:	40001c00 	.word	0x40001c00
 8005a90:	40002000 	.word	0x40002000
 8005a94:	08010bb4 	.word	0x08010bb4

08005a98 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d101      	bne.n	8005ac0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e0f8      	b.n	8005cb2 <HAL_TIM_OnePulse_Init+0x206>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a7d      	ldr	r2, [pc, #500]	@ (8005cbc <HAL_TIM_OnePulse_Init+0x210>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d045      	beq.n	8005b56 <HAL_TIM_OnePulse_Init+0xaa>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ad2:	d040      	beq.n	8005b56 <HAL_TIM_OnePulse_Init+0xaa>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a79      	ldr	r2, [pc, #484]	@ (8005cc0 <HAL_TIM_OnePulse_Init+0x214>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d03b      	beq.n	8005b56 <HAL_TIM_OnePulse_Init+0xaa>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a78      	ldr	r2, [pc, #480]	@ (8005cc4 <HAL_TIM_OnePulse_Init+0x218>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d036      	beq.n	8005b56 <HAL_TIM_OnePulse_Init+0xaa>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a76      	ldr	r2, [pc, #472]	@ (8005cc8 <HAL_TIM_OnePulse_Init+0x21c>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d031      	beq.n	8005b56 <HAL_TIM_OnePulse_Init+0xaa>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a75      	ldr	r2, [pc, #468]	@ (8005ccc <HAL_TIM_OnePulse_Init+0x220>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d02c      	beq.n	8005b56 <HAL_TIM_OnePulse_Init+0xaa>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a73      	ldr	r2, [pc, #460]	@ (8005cd0 <HAL_TIM_OnePulse_Init+0x224>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d027      	beq.n	8005b56 <HAL_TIM_OnePulse_Init+0xaa>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a72      	ldr	r2, [pc, #456]	@ (8005cd4 <HAL_TIM_OnePulse_Init+0x228>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d022      	beq.n	8005b56 <HAL_TIM_OnePulse_Init+0xaa>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a70      	ldr	r2, [pc, #448]	@ (8005cd8 <HAL_TIM_OnePulse_Init+0x22c>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d01d      	beq.n	8005b56 <HAL_TIM_OnePulse_Init+0xaa>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a6f      	ldr	r2, [pc, #444]	@ (8005cdc <HAL_TIM_OnePulse_Init+0x230>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d018      	beq.n	8005b56 <HAL_TIM_OnePulse_Init+0xaa>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a6d      	ldr	r2, [pc, #436]	@ (8005ce0 <HAL_TIM_OnePulse_Init+0x234>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d013      	beq.n	8005b56 <HAL_TIM_OnePulse_Init+0xaa>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a6c      	ldr	r2, [pc, #432]	@ (8005ce4 <HAL_TIM_OnePulse_Init+0x238>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d00e      	beq.n	8005b56 <HAL_TIM_OnePulse_Init+0xaa>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a6a      	ldr	r2, [pc, #424]	@ (8005ce8 <HAL_TIM_OnePulse_Init+0x23c>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d009      	beq.n	8005b56 <HAL_TIM_OnePulse_Init+0xaa>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a69      	ldr	r2, [pc, #420]	@ (8005cec <HAL_TIM_OnePulse_Init+0x240>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d004      	beq.n	8005b56 <HAL_TIM_OnePulse_Init+0xaa>
 8005b4c:	f640 2158 	movw	r1, #2648	@ 0xa58
 8005b50:	4867      	ldr	r0, [pc, #412]	@ (8005cf0 <HAL_TIM_OnePulse_Init+0x244>)
 8005b52:	f7fb ff9b 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d014      	beq.n	8005b88 <HAL_TIM_OnePulse_Init+0xdc>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	2b10      	cmp	r3, #16
 8005b64:	d010      	beq.n	8005b88 <HAL_TIM_OnePulse_Init+0xdc>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	2b20      	cmp	r3, #32
 8005b6c:	d00c      	beq.n	8005b88 <HAL_TIM_OnePulse_Init+0xdc>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	2b40      	cmp	r3, #64	@ 0x40
 8005b74:	d008      	beq.n	8005b88 <HAL_TIM_OnePulse_Init+0xdc>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	2b60      	cmp	r3, #96	@ 0x60
 8005b7c:	d004      	beq.n	8005b88 <HAL_TIM_OnePulse_Init+0xdc>
 8005b7e:	f640 2159 	movw	r1, #2649	@ 0xa59
 8005b82:	485b      	ldr	r0, [pc, #364]	@ (8005cf0 <HAL_TIM_OnePulse_Init+0x244>)
 8005b84:	f7fb ff82 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00e      	beq.n	8005bae <HAL_TIM_OnePulse_Init+0x102>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b98:	d009      	beq.n	8005bae <HAL_TIM_OnePulse_Init+0x102>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ba2:	d004      	beq.n	8005bae <HAL_TIM_OnePulse_Init+0x102>
 8005ba4:	f640 215a 	movw	r1, #2650	@ 0xa5a
 8005ba8:	4851      	ldr	r0, [pc, #324]	@ (8005cf0 <HAL_TIM_OnePulse_Init+0x244>)
 8005baa:	f7fb ff6f 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d007      	beq.n	8005bc4 <HAL_TIM_OnePulse_Init+0x118>
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d004      	beq.n	8005bc4 <HAL_TIM_OnePulse_Init+0x118>
 8005bba:	f640 215b 	movw	r1, #2651	@ 0xa5b
 8005bbe:	484c      	ldr	r0, [pc, #304]	@ (8005cf0 <HAL_TIM_OnePulse_Init+0x244>)
 8005bc0:	f7fb ff64 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bcc:	d004      	beq.n	8005bd8 <HAL_TIM_OnePulse_Init+0x12c>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a3d      	ldr	r2, [pc, #244]	@ (8005cc8 <HAL_TIM_OnePulse_Init+0x21c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d107      	bne.n	8005be8 <HAL_TIM_OnePulse_Init+0x13c>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	bf14      	ite	ne
 8005be0:	2301      	movne	r3, #1
 8005be2:	2300      	moveq	r3, #0
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	e00e      	b.n	8005c06 <HAL_TIM_OnePulse_Init+0x15a>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d006      	beq.n	8005bfe <HAL_TIM_OnePulse_Init+0x152>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bf8:	d201      	bcs.n	8005bfe <HAL_TIM_OnePulse_Init+0x152>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e000      	b.n	8005c00 <HAL_TIM_OnePulse_Init+0x154>
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d104      	bne.n	8005c14 <HAL_TIM_OnePulse_Init+0x168>
 8005c0a:	f640 215c 	movw	r1, #2652	@ 0xa5c
 8005c0e:	4838      	ldr	r0, [pc, #224]	@ (8005cf0 <HAL_TIM_OnePulse_Init+0x244>)
 8005c10:	f7fb ff3c 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d008      	beq.n	8005c2e <HAL_TIM_OnePulse_Init+0x182>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	2b80      	cmp	r3, #128	@ 0x80
 8005c22:	d004      	beq.n	8005c2e <HAL_TIM_OnePulse_Init+0x182>
 8005c24:	f640 215d 	movw	r1, #2653	@ 0xa5d
 8005c28:	4831      	ldr	r0, [pc, #196]	@ (8005cf0 <HAL_TIM_OnePulse_Init+0x244>)
 8005c2a:	f7fb ff2f 	bl	8001a8c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d106      	bne.n	8005c48 <HAL_TIM_OnePulse_Init+0x19c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f856 	bl	8005cf4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3304      	adds	r3, #4
 8005c58:	4619      	mov	r1, r3
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	f001 fb46 	bl	80072ec <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 0208 	bic.w	r2, r2, #8
 8005c6e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6819      	ldr	r1, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3708      	adds	r7, #8
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	40010000 	.word	0x40010000
 8005cc0:	40000400 	.word	0x40000400
 8005cc4:	40000800 	.word	0x40000800
 8005cc8:	40000c00 	.word	0x40000c00
 8005ccc:	40001000 	.word	0x40001000
 8005cd0:	40001400 	.word	0x40001400
 8005cd4:	40010400 	.word	0x40010400
 8005cd8:	40014000 	.word	0x40014000
 8005cdc:	40014400 	.word	0x40014400
 8005ce0:	40014800 	.word	0x40014800
 8005ce4:	40001800 	.word	0x40001800
 8005ce8:	40001c00 	.word	0x40001c00
 8005cec:	40002000 	.word	0x40002000
 8005cf0:	08010bb4 	.word	0x08010bb4

08005cf4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d18:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005d20:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d28:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d30:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d32:	7bfb      	ldrb	r3, [r7, #15]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d108      	bne.n	8005d4a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d38:	7bbb      	ldrb	r3, [r7, #14]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d105      	bne.n	8005d4a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d3e:	7b7b      	ldrb	r3, [r7, #13]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d102      	bne.n	8005d4a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d44:	7b3b      	ldrb	r3, [r7, #12]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d001      	beq.n	8005d4e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e045      	b.n	8005dda <HAL_TIM_OnePulse_Start_IT+0xd2>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2202      	movs	r2, #2
 8005d52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2202      	movs	r2, #2
 8005d5a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2202      	movs	r2, #2
 8005d62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2202      	movs	r2, #2
 8005d6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68da      	ldr	r2, [r3, #12]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f042 0202 	orr.w	r2, r2, #2
 8005d7c:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f042 0204 	orr.w	r2, r2, #4
 8005d8c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2201      	movs	r2, #1
 8005d94:	2100      	movs	r1, #0
 8005d96:	4618      	mov	r0, r3
 8005d98:	f002 f93c 	bl	8008014 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2201      	movs	r2, #1
 8005da2:	2104      	movs	r1, #4
 8005da4:	4618      	mov	r0, r3
 8005da6:	f002 f935 	bl	8008014 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a0d      	ldr	r2, [pc, #52]	@ (8005de4 <HAL_TIM_OnePulse_Start_IT+0xdc>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d004      	beq.n	8005dbe <HAL_TIM_OnePulse_Start_IT+0xb6>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a0b      	ldr	r2, [pc, #44]	@ (8005de8 <HAL_TIM_OnePulse_Start_IT+0xe0>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d101      	bne.n	8005dc2 <HAL_TIM_OnePulse_Start_IT+0xba>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e000      	b.n	8005dc4 <HAL_TIM_OnePulse_Start_IT+0xbc>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d007      	beq.n	8005dd8 <HAL_TIM_OnePulse_Start_IT+0xd0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005dd6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	40010000 	.word	0x40010000
 8005de8:	40010400 	.word	0x40010400

08005dec <HAL_TIM_OnePulse_Stop_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68da      	ldr	r2, [r3, #12]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f022 0202 	bic.w	r2, r2, #2
 8005e04:	60da      	str	r2, [r3, #12]

  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68da      	ldr	r2, [r3, #12]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 0204 	bic.w	r2, r2, #4
 8005e14:	60da      	str	r2, [r3, #12]
  /* Disable the Capture compare and the Input Capture channels
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
  whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f002 f8f8 	bl	8008014 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	2104      	movs	r1, #4
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f002 f8f1 	bl	8008014 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a29      	ldr	r2, [pc, #164]	@ (8005edc <HAL_TIM_OnePulse_Stop_IT+0xf0>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d004      	beq.n	8005e46 <HAL_TIM_OnePulse_Stop_IT+0x5a>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a27      	ldr	r2, [pc, #156]	@ (8005ee0 <HAL_TIM_OnePulse_Stop_IT+0xf4>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d101      	bne.n	8005e4a <HAL_TIM_OnePulse_Stop_IT+0x5e>
 8005e46:	2301      	movs	r3, #1
 8005e48:	e000      	b.n	8005e4c <HAL_TIM_OnePulse_Stop_IT+0x60>
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d017      	beq.n	8005e80 <HAL_TIM_OnePulse_Stop_IT+0x94>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6a1a      	ldr	r2, [r3, #32]
 8005e56:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10f      	bne.n	8005e80 <HAL_TIM_OnePulse_Stop_IT+0x94>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6a1a      	ldr	r2, [r3, #32]
 8005e66:	f240 4344 	movw	r3, #1092	@ 0x444
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d107      	bne.n	8005e80 <HAL_TIM_OnePulse_Stop_IT+0x94>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e7e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6a1a      	ldr	r2, [r3, #32]
 8005e86:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10f      	bne.n	8005eb0 <HAL_TIM_OnePulse_Stop_IT+0xc4>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6a1a      	ldr	r2, [r3, #32]
 8005e96:	f240 4344 	movw	r3, #1092	@ 0x444
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d107      	bne.n	8005eb0 <HAL_TIM_OnePulse_Stop_IT+0xc4>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 0201 	bic.w	r2, r2, #1
 8005eae:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3708      	adds	r7, #8
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	40010000 	.word	0x40010000
 8005ee0:	40010400 	.word	0x40010400

08005ee4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	f003 0302 	and.w	r3, r3, #2
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d020      	beq.n	8005f48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d01b      	beq.n	8005f48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f06f 0202 	mvn.w	r2, #2
 8005f18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	f003 0303 	and.w	r3, r3, #3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f001 f9c8 	bl	80072c4 <HAL_TIM_IC_CaptureCallback>
 8005f34:	e005      	b.n	8005f42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f001 f9ba 	bl	80072b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f7fb f8d5 	bl	80010ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	f003 0304 	and.w	r3, r3, #4
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d020      	beq.n	8005f94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f003 0304 	and.w	r3, r3, #4
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d01b      	beq.n	8005f94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f06f 0204 	mvn.w	r2, #4
 8005f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2202      	movs	r2, #2
 8005f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f001 f9a2 	bl	80072c4 <HAL_TIM_IC_CaptureCallback>
 8005f80:	e005      	b.n	8005f8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f001 f994 	bl	80072b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7fb f8af 	bl	80010ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f003 0308 	and.w	r3, r3, #8
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d020      	beq.n	8005fe0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f003 0308 	and.w	r3, r3, #8
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d01b      	beq.n	8005fe0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f06f 0208 	mvn.w	r2, #8
 8005fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2204      	movs	r2, #4
 8005fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	f003 0303 	and.w	r3, r3, #3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f001 f97c 	bl	80072c4 <HAL_TIM_IC_CaptureCallback>
 8005fcc:	e005      	b.n	8005fda <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f001 f96e 	bl	80072b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f7fb f889 	bl	80010ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	f003 0310 	and.w	r3, r3, #16
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d020      	beq.n	800602c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f003 0310 	and.w	r3, r3, #16
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d01b      	beq.n	800602c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f06f 0210 	mvn.w	r2, #16
 8005ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2208      	movs	r2, #8
 8006002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f001 f956 	bl	80072c4 <HAL_TIM_IC_CaptureCallback>
 8006018:	e005      	b.n	8006026 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f001 f948 	bl	80072b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7fb f863 	bl	80010ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00c      	beq.n	8006050 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	2b00      	cmp	r3, #0
 800603e:	d007      	beq.n	8006050 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f06f 0201 	mvn.w	r2, #1
 8006048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f001 f926 	bl	800729c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006056:	2b00      	cmp	r3, #0
 8006058:	d104      	bne.n	8006064 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00c      	beq.n	800607e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800606a:	2b00      	cmp	r3, #0
 800606c:	d007      	beq.n	800607e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f002 fad9 	bl	8008630 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00c      	beq.n	80060a2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800608e:	2b00      	cmp	r3, #0
 8006090:	d007      	beq.n	80060a2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800609a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f002 fad1 	bl	8008644 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00c      	beq.n	80060c6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d007      	beq.n	80060c6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80060be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f001 f909 	bl	80072d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	f003 0320 	and.w	r3, r3, #32
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00c      	beq.n	80060ea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f003 0320 	and.w	r3, r3, #32
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d007      	beq.n	80060ea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f06f 0220 	mvn.w	r2, #32
 80060e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f002 fa99 	bl	800861c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060ea:	bf00      	nop
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
	...

080060f4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006100:	2300      	movs	r3, #0
 8006102:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d016      	beq.n	8006138 <HAL_TIM_OC_ConfigChannel+0x44>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b04      	cmp	r3, #4
 800610e:	d013      	beq.n	8006138 <HAL_TIM_OC_ConfigChannel+0x44>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2b08      	cmp	r3, #8
 8006114:	d010      	beq.n	8006138 <HAL_TIM_OC_ConfigChannel+0x44>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b0c      	cmp	r3, #12
 800611a:	d00d      	beq.n	8006138 <HAL_TIM_OC_ConfigChannel+0x44>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b10      	cmp	r3, #16
 8006120:	d00a      	beq.n	8006138 <HAL_TIM_OC_ConfigChannel+0x44>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2b14      	cmp	r3, #20
 8006126:	d007      	beq.n	8006138 <HAL_TIM_OC_ConfigChannel+0x44>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b3c      	cmp	r3, #60	@ 0x3c
 800612c:	d004      	beq.n	8006138 <HAL_TIM_OC_ConfigChannel+0x44>
 800612e:	f640 71eb 	movw	r1, #4075	@ 0xfeb
 8006132:	488c      	ldr	r0, [pc, #560]	@ (8006364 <HAL_TIM_OC_ConfigChannel+0x270>)
 8006134:	f7fb fcaa 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d022      	beq.n	8006186 <HAL_TIM_OC_ConfigChannel+0x92>
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2b10      	cmp	r3, #16
 8006146:	d01e      	beq.n	8006186 <HAL_TIM_OC_ConfigChannel+0x92>
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b20      	cmp	r3, #32
 800614e:	d01a      	beq.n	8006186 <HAL_TIM_OC_ConfigChannel+0x92>
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b30      	cmp	r3, #48	@ 0x30
 8006156:	d016      	beq.n	8006186 <HAL_TIM_OC_ConfigChannel+0x92>
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b50      	cmp	r3, #80	@ 0x50
 800615e:	d012      	beq.n	8006186 <HAL_TIM_OC_ConfigChannel+0x92>
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b40      	cmp	r3, #64	@ 0x40
 8006166:	d00e      	beq.n	8006186 <HAL_TIM_OC_ConfigChannel+0x92>
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006170:	d009      	beq.n	8006186 <HAL_TIM_OC_ConfigChannel+0x92>
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a7c      	ldr	r2, [pc, #496]	@ (8006368 <HAL_TIM_OC_ConfigChannel+0x274>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d004      	beq.n	8006186 <HAL_TIM_OC_ConfigChannel+0x92>
 800617c:	f640 71ec 	movw	r1, #4076	@ 0xfec
 8006180:	4878      	ldr	r0, [pc, #480]	@ (8006364 <HAL_TIM_OC_ConfigChannel+0x270>)
 8006182:	f7fb fc83 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d008      	beq.n	80061a0 <HAL_TIM_OC_ConfigChannel+0xac>
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	2b02      	cmp	r3, #2
 8006194:	d004      	beq.n	80061a0 <HAL_TIM_OC_ConfigChannel+0xac>
 8006196:	f640 71ed 	movw	r1, #4077	@ 0xfed
 800619a:	4872      	ldr	r0, [pc, #456]	@ (8006364 <HAL_TIM_OC_ConfigChannel+0x270>)
 800619c:	f7fb fc76 	bl	8001a8c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d101      	bne.n	80061ae <HAL_TIM_OC_ConfigChannel+0xba>
 80061aa:	2302      	movs	r3, #2
 80061ac:	e152      	b.n	8006454 <HAL_TIM_OC_ConfigChannel+0x360>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b14      	cmp	r3, #20
 80061ba:	f200 8143 	bhi.w	8006444 <HAL_TIM_OC_ConfigChannel+0x350>
 80061be:	a201      	add	r2, pc, #4	@ (adr r2, 80061c4 <HAL_TIM_OC_ConfigChannel+0xd0>)
 80061c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c4:	08006219 	.word	0x08006219
 80061c8:	08006445 	.word	0x08006445
 80061cc:	08006445 	.word	0x08006445
 80061d0:	08006445 	.word	0x08006445
 80061d4:	080062a9 	.word	0x080062a9
 80061d8:	08006445 	.word	0x08006445
 80061dc:	08006445 	.word	0x08006445
 80061e0:	08006445 	.word	0x08006445
 80061e4:	08006311 	.word	0x08006311
 80061e8:	08006445 	.word	0x08006445
 80061ec:	08006445 	.word	0x08006445
 80061f0:	08006445 	.word	0x08006445
 80061f4:	08006399 	.word	0x08006399
 80061f8:	08006445 	.word	0x08006445
 80061fc:	08006445 	.word	0x08006445
 8006200:	08006445 	.word	0x08006445
 8006204:	080063ed 	.word	0x080063ed
 8006208:	08006445 	.word	0x08006445
 800620c:	08006445 	.word	0x08006445
 8006210:	08006445 	.word	0x08006445
 8006214:	08006419 	.word	0x08006419
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a53      	ldr	r2, [pc, #332]	@ (800636c <HAL_TIM_OC_ConfigChannel+0x278>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d03b      	beq.n	800629a <HAL_TIM_OC_ConfigChannel+0x1a6>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800622a:	d036      	beq.n	800629a <HAL_TIM_OC_ConfigChannel+0x1a6>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a4f      	ldr	r2, [pc, #316]	@ (8006370 <HAL_TIM_OC_ConfigChannel+0x27c>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d031      	beq.n	800629a <HAL_TIM_OC_ConfigChannel+0x1a6>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a4e      	ldr	r2, [pc, #312]	@ (8006374 <HAL_TIM_OC_ConfigChannel+0x280>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d02c      	beq.n	800629a <HAL_TIM_OC_ConfigChannel+0x1a6>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a4c      	ldr	r2, [pc, #304]	@ (8006378 <HAL_TIM_OC_ConfigChannel+0x284>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d027      	beq.n	800629a <HAL_TIM_OC_ConfigChannel+0x1a6>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a4b      	ldr	r2, [pc, #300]	@ (800637c <HAL_TIM_OC_ConfigChannel+0x288>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d022      	beq.n	800629a <HAL_TIM_OC_ConfigChannel+0x1a6>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a49      	ldr	r2, [pc, #292]	@ (8006380 <HAL_TIM_OC_ConfigChannel+0x28c>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d01d      	beq.n	800629a <HAL_TIM_OC_ConfigChannel+0x1a6>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a48      	ldr	r2, [pc, #288]	@ (8006384 <HAL_TIM_OC_ConfigChannel+0x290>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d018      	beq.n	800629a <HAL_TIM_OC_ConfigChannel+0x1a6>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a46      	ldr	r2, [pc, #280]	@ (8006388 <HAL_TIM_OC_ConfigChannel+0x294>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d013      	beq.n	800629a <HAL_TIM_OC_ConfigChannel+0x1a6>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a45      	ldr	r2, [pc, #276]	@ (800638c <HAL_TIM_OC_ConfigChannel+0x298>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d00e      	beq.n	800629a <HAL_TIM_OC_ConfigChannel+0x1a6>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a43      	ldr	r2, [pc, #268]	@ (8006390 <HAL_TIM_OC_ConfigChannel+0x29c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d009      	beq.n	800629a <HAL_TIM_OC_ConfigChannel+0x1a6>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a42      	ldr	r2, [pc, #264]	@ (8006394 <HAL_TIM_OC_ConfigChannel+0x2a0>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d004      	beq.n	800629a <HAL_TIM_OC_ConfigChannel+0x1a6>
 8006290:	f640 71f7 	movw	r1, #4087	@ 0xff7
 8006294:	4833      	ldr	r0, [pc, #204]	@ (8006364 <HAL_TIM_OC_ConfigChannel+0x270>)
 8006296:	f7fb fbf9 	bl	8001a8c <assert_failed>

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68b9      	ldr	r1, [r7, #8]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f001 f8cf 	bl	8007444 <TIM_OC1_SetConfig>
      break;
 80062a6:	e0d0      	b.n	800644a <HAL_TIM_OC_ConfigChannel+0x356>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a2f      	ldr	r2, [pc, #188]	@ (800636c <HAL_TIM_OC_ConfigChannel+0x278>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d027      	beq.n	8006302 <HAL_TIM_OC_ConfigChannel+0x20e>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062ba:	d022      	beq.n	8006302 <HAL_TIM_OC_ConfigChannel+0x20e>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a2b      	ldr	r2, [pc, #172]	@ (8006370 <HAL_TIM_OC_ConfigChannel+0x27c>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d01d      	beq.n	8006302 <HAL_TIM_OC_ConfigChannel+0x20e>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a2a      	ldr	r2, [pc, #168]	@ (8006374 <HAL_TIM_OC_ConfigChannel+0x280>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d018      	beq.n	8006302 <HAL_TIM_OC_ConfigChannel+0x20e>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a28      	ldr	r2, [pc, #160]	@ (8006378 <HAL_TIM_OC_ConfigChannel+0x284>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d013      	beq.n	8006302 <HAL_TIM_OC_ConfigChannel+0x20e>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a27      	ldr	r2, [pc, #156]	@ (800637c <HAL_TIM_OC_ConfigChannel+0x288>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d00e      	beq.n	8006302 <HAL_TIM_OC_ConfigChannel+0x20e>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a25      	ldr	r2, [pc, #148]	@ (8006380 <HAL_TIM_OC_ConfigChannel+0x28c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d009      	beq.n	8006302 <HAL_TIM_OC_ConfigChannel+0x20e>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a26      	ldr	r2, [pc, #152]	@ (800638c <HAL_TIM_OC_ConfigChannel+0x298>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d004      	beq.n	8006302 <HAL_TIM_OC_ConfigChannel+0x20e>
 80062f8:	f241 0101 	movw	r1, #4097	@ 0x1001
 80062fc:	4819      	ldr	r0, [pc, #100]	@ (8006364 <HAL_TIM_OC_ConfigChannel+0x270>)
 80062fe:	f7fb fbc5 	bl	8001a8c <assert_failed>

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68b9      	ldr	r1, [r7, #8]
 8006308:	4618      	mov	r0, r3
 800630a:	f001 f937 	bl	800757c <TIM_OC2_SetConfig>
      break;
 800630e:	e09c      	b.n	800644a <HAL_TIM_OC_ConfigChannel+0x356>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a15      	ldr	r2, [pc, #84]	@ (800636c <HAL_TIM_OC_ConfigChannel+0x278>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d01d      	beq.n	8006356 <HAL_TIM_OC_ConfigChannel+0x262>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006322:	d018      	beq.n	8006356 <HAL_TIM_OC_ConfigChannel+0x262>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a11      	ldr	r2, [pc, #68]	@ (8006370 <HAL_TIM_OC_ConfigChannel+0x27c>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d013      	beq.n	8006356 <HAL_TIM_OC_ConfigChannel+0x262>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a10      	ldr	r2, [pc, #64]	@ (8006374 <HAL_TIM_OC_ConfigChannel+0x280>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d00e      	beq.n	8006356 <HAL_TIM_OC_ConfigChannel+0x262>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a0e      	ldr	r2, [pc, #56]	@ (8006378 <HAL_TIM_OC_ConfigChannel+0x284>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d009      	beq.n	8006356 <HAL_TIM_OC_ConfigChannel+0x262>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a0d      	ldr	r2, [pc, #52]	@ (800637c <HAL_TIM_OC_ConfigChannel+0x288>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d004      	beq.n	8006356 <HAL_TIM_OC_ConfigChannel+0x262>
 800634c:	f241 010b 	movw	r1, #4107	@ 0x100b
 8006350:	4804      	ldr	r0, [pc, #16]	@ (8006364 <HAL_TIM_OC_ConfigChannel+0x270>)
 8006352:	f7fb fb9b 	bl	8001a8c <assert_failed>

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68b9      	ldr	r1, [r7, #8]
 800635c:	4618      	mov	r0, r3
 800635e:	f001 f9ad 	bl	80076bc <TIM_OC3_SetConfig>
      break;
 8006362:	e072      	b.n	800644a <HAL_TIM_OC_ConfigChannel+0x356>
 8006364:	08010bb4 	.word	0x08010bb4
 8006368:	00010010 	.word	0x00010010
 800636c:	40010000 	.word	0x40010000
 8006370:	40000400 	.word	0x40000400
 8006374:	40000800 	.word	0x40000800
 8006378:	40000c00 	.word	0x40000c00
 800637c:	40010400 	.word	0x40010400
 8006380:	40014000 	.word	0x40014000
 8006384:	40014400 	.word	0x40014400
 8006388:	40014800 	.word	0x40014800
 800638c:	40001800 	.word	0x40001800
 8006390:	40001c00 	.word	0x40001c00
 8006394:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a2f      	ldr	r2, [pc, #188]	@ (800645c <HAL_TIM_OC_ConfigChannel+0x368>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d01d      	beq.n	80063de <HAL_TIM_OC_ConfigChannel+0x2ea>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063aa:	d018      	beq.n	80063de <HAL_TIM_OC_ConfigChannel+0x2ea>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a2b      	ldr	r2, [pc, #172]	@ (8006460 <HAL_TIM_OC_ConfigChannel+0x36c>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d013      	beq.n	80063de <HAL_TIM_OC_ConfigChannel+0x2ea>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a2a      	ldr	r2, [pc, #168]	@ (8006464 <HAL_TIM_OC_ConfigChannel+0x370>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d00e      	beq.n	80063de <HAL_TIM_OC_ConfigChannel+0x2ea>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a28      	ldr	r2, [pc, #160]	@ (8006468 <HAL_TIM_OC_ConfigChannel+0x374>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d009      	beq.n	80063de <HAL_TIM_OC_ConfigChannel+0x2ea>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a27      	ldr	r2, [pc, #156]	@ (800646c <HAL_TIM_OC_ConfigChannel+0x378>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d004      	beq.n	80063de <HAL_TIM_OC_ConfigChannel+0x2ea>
 80063d4:	f241 0115 	movw	r1, #4117	@ 0x1015
 80063d8:	4825      	ldr	r0, [pc, #148]	@ (8006470 <HAL_TIM_OC_ConfigChannel+0x37c>)
 80063da:	f7fb fb57 	bl	8001a8c <assert_failed>

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68b9      	ldr	r1, [r7, #8]
 80063e4:	4618      	mov	r0, r3
 80063e6:	f001 fa09 	bl	80077fc <TIM_OC4_SetConfig>
      break;
 80063ea:	e02e      	b.n	800644a <HAL_TIM_OC_ConfigChannel+0x356>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a1a      	ldr	r2, [pc, #104]	@ (800645c <HAL_TIM_OC_ConfigChannel+0x368>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d009      	beq.n	800640a <HAL_TIM_OC_ConfigChannel+0x316>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a1c      	ldr	r2, [pc, #112]	@ (800646c <HAL_TIM_OC_ConfigChannel+0x378>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d004      	beq.n	800640a <HAL_TIM_OC_ConfigChannel+0x316>
 8006400:	f241 011f 	movw	r1, #4127	@ 0x101f
 8006404:	481a      	ldr	r0, [pc, #104]	@ (8006470 <HAL_TIM_OC_ConfigChannel+0x37c>)
 8006406:	f7fb fb41 	bl	8001a8c <assert_failed>

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68b9      	ldr	r1, [r7, #8]
 8006410:	4618      	mov	r0, r3
 8006412:	f001 fa59 	bl	80078c8 <TIM_OC5_SetConfig>
      break;
 8006416:	e018      	b.n	800644a <HAL_TIM_OC_ConfigChannel+0x356>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a0f      	ldr	r2, [pc, #60]	@ (800645c <HAL_TIM_OC_ConfigChannel+0x368>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d009      	beq.n	8006436 <HAL_TIM_OC_ConfigChannel+0x342>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a11      	ldr	r2, [pc, #68]	@ (800646c <HAL_TIM_OC_ConfigChannel+0x378>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d004      	beq.n	8006436 <HAL_TIM_OC_ConfigChannel+0x342>
 800642c:	f241 0129 	movw	r1, #4137	@ 0x1029
 8006430:	480f      	ldr	r0, [pc, #60]	@ (8006470 <HAL_TIM_OC_ConfigChannel+0x37c>)
 8006432:	f7fb fb2b 	bl	8001a8c <assert_failed>

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68b9      	ldr	r1, [r7, #8]
 800643c:	4618      	mov	r0, r3
 800643e:	f001 fa95 	bl	800796c <TIM_OC6_SetConfig>
      break;
 8006442:	e002      	b.n	800644a <HAL_TIM_OC_ConfigChannel+0x356>
    }

    default:
      status = HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	75fb      	strb	r3, [r7, #23]
      break;
 8006448:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006452:	7dfb      	ldrb	r3, [r7, #23]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3718      	adds	r7, #24
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	40010000 	.word	0x40010000
 8006460:	40000400 	.word	0x40000400
 8006464:	40000800 	.word	0x40000800
 8006468:	40000c00 	.word	0x40000c00
 800646c:	40010400 	.word	0x40010400
 8006470:	08010bb4 	.word	0x08010bb4

08006474 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006480:	2300      	movs	r3, #0
 8006482:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d016      	beq.n	80064b8 <HAL_TIM_PWM_ConfigChannel+0x44>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2b04      	cmp	r3, #4
 800648e:	d013      	beq.n	80064b8 <HAL_TIM_PWM_ConfigChannel+0x44>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b08      	cmp	r3, #8
 8006494:	d010      	beq.n	80064b8 <HAL_TIM_PWM_ConfigChannel+0x44>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2b0c      	cmp	r3, #12
 800649a:	d00d      	beq.n	80064b8 <HAL_TIM_PWM_ConfigChannel+0x44>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b10      	cmp	r3, #16
 80064a0:	d00a      	beq.n	80064b8 <HAL_TIM_PWM_ConfigChannel+0x44>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2b14      	cmp	r3, #20
 80064a6:	d007      	beq.n	80064b8 <HAL_TIM_PWM_ConfigChannel+0x44>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b3c      	cmp	r3, #60	@ 0x3c
 80064ac:	d004      	beq.n	80064b8 <HAL_TIM_PWM_ConfigChannel+0x44>
 80064ae:	f241 01b3 	movw	r1, #4275	@ 0x10b3
 80064b2:	4895      	ldr	r0, [pc, #596]	@ (8006708 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80064b4:	f7fb faea 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b60      	cmp	r3, #96	@ 0x60
 80064be:	d01c      	beq.n	80064fa <HAL_TIM_PWM_ConfigChannel+0x86>
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b70      	cmp	r3, #112	@ 0x70
 80064c6:	d018      	beq.n	80064fa <HAL_TIM_PWM_ConfigChannel+0x86>
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a8f      	ldr	r2, [pc, #572]	@ (800670c <HAL_TIM_PWM_ConfigChannel+0x298>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d013      	beq.n	80064fa <HAL_TIM_PWM_ConfigChannel+0x86>
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a8e      	ldr	r2, [pc, #568]	@ (8006710 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d00e      	beq.n	80064fa <HAL_TIM_PWM_ConfigChannel+0x86>
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a8c      	ldr	r2, [pc, #560]	@ (8006714 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d009      	beq.n	80064fa <HAL_TIM_PWM_ConfigChannel+0x86>
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a8b      	ldr	r2, [pc, #556]	@ (8006718 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d004      	beq.n	80064fa <HAL_TIM_PWM_ConfigChannel+0x86>
 80064f0:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 80064f4:	4884      	ldr	r0, [pc, #528]	@ (8006708 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80064f6:	f7fb fac9 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d008      	beq.n	8006514 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	2b02      	cmp	r3, #2
 8006508:	d004      	beq.n	8006514 <HAL_TIM_PWM_ConfigChannel+0xa0>
 800650a:	f241 01b5 	movw	r1, #4277	@ 0x10b5
 800650e:	487e      	ldr	r0, [pc, #504]	@ (8006708 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006510:	f7fb fabc 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d008      	beq.n	800652e <HAL_TIM_PWM_ConfigChannel+0xba>
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	2b04      	cmp	r3, #4
 8006522:	d004      	beq.n	800652e <HAL_TIM_PWM_ConfigChannel+0xba>
 8006524:	f241 01b6 	movw	r1, #4278	@ 0x10b6
 8006528:	4877      	ldr	r0, [pc, #476]	@ (8006708 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800652a:	f7fb faaf 	bl	8001a8c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006534:	2b01      	cmp	r3, #1
 8006536:	d101      	bne.n	800653c <HAL_TIM_PWM_ConfigChannel+0xc8>
 8006538:	2302      	movs	r3, #2
 800653a:	e1f3      	b.n	8006924 <HAL_TIM_PWM_ConfigChannel+0x4b0>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b14      	cmp	r3, #20
 8006548:	f200 81e4 	bhi.w	8006914 <HAL_TIM_PWM_ConfigChannel+0x4a0>
 800654c:	a201      	add	r2, pc, #4	@ (adr r2, 8006554 <HAL_TIM_PWM_ConfigChannel+0xe0>)
 800654e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006552:	bf00      	nop
 8006554:	080065a9 	.word	0x080065a9
 8006558:	08006915 	.word	0x08006915
 800655c:	08006915 	.word	0x08006915
 8006560:	08006915 	.word	0x08006915
 8006564:	0800666b 	.word	0x0800666b
 8006568:	08006915 	.word	0x08006915
 800656c:	08006915 	.word	0x08006915
 8006570:	08006915 	.word	0x08006915
 8006574:	08006749 	.word	0x08006749
 8006578:	08006915 	.word	0x08006915
 800657c:	08006915 	.word	0x08006915
 8006580:	08006915 	.word	0x08006915
 8006584:	080067cf 	.word	0x080067cf
 8006588:	08006915 	.word	0x08006915
 800658c:	08006915 	.word	0x08006915
 8006590:	08006915 	.word	0x08006915
 8006594:	08006857 	.word	0x08006857
 8006598:	08006915 	.word	0x08006915
 800659c:	08006915 	.word	0x08006915
 80065a0:	08006915 	.word	0x08006915
 80065a4:	080068b5 	.word	0x080068b5
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a5b      	ldr	r2, [pc, #364]	@ (800671c <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d03b      	beq.n	800662a <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065ba:	d036      	beq.n	800662a <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a57      	ldr	r2, [pc, #348]	@ (8006720 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d031      	beq.n	800662a <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a56      	ldr	r2, [pc, #344]	@ (8006724 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d02c      	beq.n	800662a <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a54      	ldr	r2, [pc, #336]	@ (8006728 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d027      	beq.n	800662a <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a53      	ldr	r2, [pc, #332]	@ (800672c <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d022      	beq.n	800662a <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a51      	ldr	r2, [pc, #324]	@ (8006730 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d01d      	beq.n	800662a <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a50      	ldr	r2, [pc, #320]	@ (8006734 <HAL_TIM_PWM_ConfigChannel+0x2c0>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d018      	beq.n	800662a <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a4e      	ldr	r2, [pc, #312]	@ (8006738 <HAL_TIM_PWM_ConfigChannel+0x2c4>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d013      	beq.n	800662a <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a4d      	ldr	r2, [pc, #308]	@ (800673c <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d00e      	beq.n	800662a <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a4b      	ldr	r2, [pc, #300]	@ (8006740 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d009      	beq.n	800662a <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a4a      	ldr	r2, [pc, #296]	@ (8006744 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d004      	beq.n	800662a <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006620:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 8006624:	4838      	ldr	r0, [pc, #224]	@ (8006708 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006626:	f7fb fa31 	bl	8001a8c <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68b9      	ldr	r1, [r7, #8]
 8006630:	4618      	mov	r0, r3
 8006632:	f000 ff07 	bl	8007444 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	699a      	ldr	r2, [r3, #24]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f042 0208 	orr.w	r2, r2, #8
 8006644:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	699a      	ldr	r2, [r3, #24]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f022 0204 	bic.w	r2, r2, #4
 8006654:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	6999      	ldr	r1, [r3, #24]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	691a      	ldr	r2, [r3, #16]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	430a      	orrs	r2, r1
 8006666:	619a      	str	r2, [r3, #24]
      break;
 8006668:	e157      	b.n	800691a <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a2b      	ldr	r2, [pc, #172]	@ (800671c <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d027      	beq.n	80066c4 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800667c:	d022      	beq.n	80066c4 <HAL_TIM_PWM_ConfigChannel+0x250>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a27      	ldr	r2, [pc, #156]	@ (8006720 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d01d      	beq.n	80066c4 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a25      	ldr	r2, [pc, #148]	@ (8006724 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d018      	beq.n	80066c4 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a24      	ldr	r2, [pc, #144]	@ (8006728 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d013      	beq.n	80066c4 <HAL_TIM_PWM_ConfigChannel+0x250>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a22      	ldr	r2, [pc, #136]	@ (800672c <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d00e      	beq.n	80066c4 <HAL_TIM_PWM_ConfigChannel+0x250>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a21      	ldr	r2, [pc, #132]	@ (8006730 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d009      	beq.n	80066c4 <HAL_TIM_PWM_ConfigChannel+0x250>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a21      	ldr	r2, [pc, #132]	@ (800673c <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d004      	beq.n	80066c4 <HAL_TIM_PWM_ConfigChannel+0x250>
 80066ba:	f241 01d1 	movw	r1, #4305	@ 0x10d1
 80066be:	4812      	ldr	r0, [pc, #72]	@ (8006708 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80066c0:	f7fb f9e4 	bl	8001a8c <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68b9      	ldr	r1, [r7, #8]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 ff56 	bl	800757c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	699a      	ldr	r2, [r3, #24]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	699a      	ldr	r2, [r3, #24]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6999      	ldr	r1, [r3, #24]
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	021a      	lsls	r2, r3, #8
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	430a      	orrs	r2, r1
 8006702:	619a      	str	r2, [r3, #24]
      break;
 8006704:	e109      	b.n	800691a <HAL_TIM_PWM_ConfigChannel+0x4a6>
 8006706:	bf00      	nop
 8006708:	08010bb4 	.word	0x08010bb4
 800670c:	00010040 	.word	0x00010040
 8006710:	00010050 	.word	0x00010050
 8006714:	00010060 	.word	0x00010060
 8006718:	00010070 	.word	0x00010070
 800671c:	40010000 	.word	0x40010000
 8006720:	40000400 	.word	0x40000400
 8006724:	40000800 	.word	0x40000800
 8006728:	40000c00 	.word	0x40000c00
 800672c:	40010400 	.word	0x40010400
 8006730:	40014000 	.word	0x40014000
 8006734:	40014400 	.word	0x40014400
 8006738:	40014800 	.word	0x40014800
 800673c:	40001800 	.word	0x40001800
 8006740:	40001c00 	.word	0x40001c00
 8006744:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a77      	ldr	r2, [pc, #476]	@ (800692c <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d01d      	beq.n	800678e <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800675a:	d018      	beq.n	800678e <HAL_TIM_PWM_ConfigChannel+0x31a>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a73      	ldr	r2, [pc, #460]	@ (8006930 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d013      	beq.n	800678e <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a72      	ldr	r2, [pc, #456]	@ (8006934 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d00e      	beq.n	800678e <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a70      	ldr	r2, [pc, #448]	@ (8006938 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d009      	beq.n	800678e <HAL_TIM_PWM_ConfigChannel+0x31a>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a6f      	ldr	r2, [pc, #444]	@ (800693c <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d004      	beq.n	800678e <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006784:	f241 01e2 	movw	r1, #4322	@ 0x10e2
 8006788:	486d      	ldr	r0, [pc, #436]	@ (8006940 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800678a:	f7fb f97f 	bl	8001a8c <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68b9      	ldr	r1, [r7, #8]
 8006794:	4618      	mov	r0, r3
 8006796:	f000 ff91 	bl	80076bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	69da      	ldr	r2, [r3, #28]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f042 0208 	orr.w	r2, r2, #8
 80067a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	69da      	ldr	r2, [r3, #28]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f022 0204 	bic.w	r2, r2, #4
 80067b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	69d9      	ldr	r1, [r3, #28]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	691a      	ldr	r2, [r3, #16]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	430a      	orrs	r2, r1
 80067ca:	61da      	str	r2, [r3, #28]
      break;
 80067cc:	e0a5      	b.n	800691a <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a56      	ldr	r2, [pc, #344]	@ (800692c <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d01d      	beq.n	8006814 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067e0:	d018      	beq.n	8006814 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a52      	ldr	r2, [pc, #328]	@ (8006930 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d013      	beq.n	8006814 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a50      	ldr	r2, [pc, #320]	@ (8006934 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d00e      	beq.n	8006814 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a4f      	ldr	r2, [pc, #316]	@ (8006938 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d009      	beq.n	8006814 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a4d      	ldr	r2, [pc, #308]	@ (800693c <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d004      	beq.n	8006814 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800680a:	f241 01f3 	movw	r1, #4339	@ 0x10f3
 800680e:	484c      	ldr	r0, [pc, #304]	@ (8006940 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8006810:	f7fb f93c 	bl	8001a8c <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68b9      	ldr	r1, [r7, #8]
 800681a:	4618      	mov	r0, r3
 800681c:	f000 ffee 	bl	80077fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	69da      	ldr	r2, [r3, #28]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800682e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	69da      	ldr	r2, [r3, #28]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800683e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	69d9      	ldr	r1, [r3, #28]
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	021a      	lsls	r2, r3, #8
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	430a      	orrs	r2, r1
 8006852:	61da      	str	r2, [r3, #28]
      break;
 8006854:	e061      	b.n	800691a <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a34      	ldr	r2, [pc, #208]	@ (800692c <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d009      	beq.n	8006874 <HAL_TIM_PWM_ConfigChannel+0x400>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a35      	ldr	r2, [pc, #212]	@ (800693c <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d004      	beq.n	8006874 <HAL_TIM_PWM_ConfigChannel+0x400>
 800686a:	f241 1104 	movw	r1, #4356	@ 0x1104
 800686e:	4834      	ldr	r0, [pc, #208]	@ (8006940 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8006870:	f7fb f90c 	bl	8001a8c <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68b9      	ldr	r1, [r7, #8]
 800687a:	4618      	mov	r0, r3
 800687c:	f001 f824 	bl	80078c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f042 0208 	orr.w	r2, r2, #8
 800688e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f022 0204 	bic.w	r2, r2, #4
 800689e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	691a      	ldr	r2, [r3, #16]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	430a      	orrs	r2, r1
 80068b0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80068b2:	e032      	b.n	800691a <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a1c      	ldr	r2, [pc, #112]	@ (800692c <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d009      	beq.n	80068d2 <HAL_TIM_PWM_ConfigChannel+0x45e>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a1e      	ldr	r2, [pc, #120]	@ (800693c <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d004      	beq.n	80068d2 <HAL_TIM_PWM_ConfigChannel+0x45e>
 80068c8:	f241 1115 	movw	r1, #4373	@ 0x1115
 80068cc:	481c      	ldr	r0, [pc, #112]	@ (8006940 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 80068ce:	f7fb f8dd 	bl	8001a8c <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68b9      	ldr	r1, [r7, #8]
 80068d8:	4618      	mov	r0, r3
 80068da:	f001 f847 	bl	800796c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068ec:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068fc:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	021a      	lsls	r2, r3, #8
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	430a      	orrs	r2, r1
 8006910:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006912:	e002      	b.n	800691a <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    default:
      status = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	75fb      	strb	r3, [r7, #23]
      break;
 8006918:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006922:	7dfb      	ldrb	r3, [r7, #23]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3718      	adds	r7, #24
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	40010000 	.word	0x40010000
 8006930:	40000400 	.word	0x40000400
 8006934:	40000800 	.word	0x40000800
 8006938:	40000c00 	.word	0x40000c00
 800693c:	40010400 	.word	0x40010400
 8006940:	08010bb4 	.word	0x08010bb4

08006944 <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a3a      	ldr	r2, [pc, #232]	@ (8006a3c <HAL_TIM_GenerateEvent+0xf8>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d045      	beq.n	80069e4 <HAL_TIM_GenerateEvent+0xa0>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006960:	d040      	beq.n	80069e4 <HAL_TIM_GenerateEvent+0xa0>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a36      	ldr	r2, [pc, #216]	@ (8006a40 <HAL_TIM_GenerateEvent+0xfc>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d03b      	beq.n	80069e4 <HAL_TIM_GenerateEvent+0xa0>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a34      	ldr	r2, [pc, #208]	@ (8006a44 <HAL_TIM_GenerateEvent+0x100>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d036      	beq.n	80069e4 <HAL_TIM_GenerateEvent+0xa0>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a33      	ldr	r2, [pc, #204]	@ (8006a48 <HAL_TIM_GenerateEvent+0x104>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d031      	beq.n	80069e4 <HAL_TIM_GenerateEvent+0xa0>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a31      	ldr	r2, [pc, #196]	@ (8006a4c <HAL_TIM_GenerateEvent+0x108>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d02c      	beq.n	80069e4 <HAL_TIM_GenerateEvent+0xa0>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a30      	ldr	r2, [pc, #192]	@ (8006a50 <HAL_TIM_GenerateEvent+0x10c>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d027      	beq.n	80069e4 <HAL_TIM_GenerateEvent+0xa0>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a2e      	ldr	r2, [pc, #184]	@ (8006a54 <HAL_TIM_GenerateEvent+0x110>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d022      	beq.n	80069e4 <HAL_TIM_GenerateEvent+0xa0>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a2d      	ldr	r2, [pc, #180]	@ (8006a58 <HAL_TIM_GenerateEvent+0x114>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d01d      	beq.n	80069e4 <HAL_TIM_GenerateEvent+0xa0>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a2b      	ldr	r2, [pc, #172]	@ (8006a5c <HAL_TIM_GenerateEvent+0x118>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d018      	beq.n	80069e4 <HAL_TIM_GenerateEvent+0xa0>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a2a      	ldr	r2, [pc, #168]	@ (8006a60 <HAL_TIM_GenerateEvent+0x11c>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d013      	beq.n	80069e4 <HAL_TIM_GenerateEvent+0xa0>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a28      	ldr	r2, [pc, #160]	@ (8006a64 <HAL_TIM_GenerateEvent+0x120>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d00e      	beq.n	80069e4 <HAL_TIM_GenerateEvent+0xa0>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a27      	ldr	r2, [pc, #156]	@ (8006a68 <HAL_TIM_GenerateEvent+0x124>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d009      	beq.n	80069e4 <HAL_TIM_GenerateEvent+0xa0>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a25      	ldr	r2, [pc, #148]	@ (8006a6c <HAL_TIM_GenerateEvent+0x128>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d004      	beq.n	80069e4 <HAL_TIM_GenerateEvent+0xa0>
 80069da:	f241 4184 	movw	r1, #5252	@ 0x1484
 80069de:	4824      	ldr	r0, [pc, #144]	@ (8006a70 <HAL_TIM_GenerateEvent+0x12c>)
 80069e0:	f7fb f854 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069ea:	d202      	bcs.n	80069f2 <HAL_TIM_GenerateEvent+0xae>
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d104      	bne.n	80069fc <HAL_TIM_GenerateEvent+0xb8>
 80069f2:	f241 4185 	movw	r1, #5253	@ 0x1485
 80069f6:	481e      	ldr	r0, [pc, #120]	@ (8006a70 <HAL_TIM_GenerateEvent+0x12c>)
 80069f8:	f7fb f848 	bl	8001a8c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d101      	bne.n	8006a0a <HAL_TIM_GenerateEvent+0xc6>
 8006a06:	2302      	movs	r3, #2
 8006a08:	e014      	b.n	8006a34 <HAL_TIM_GenerateEvent+0xf0>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2202      	movs	r2, #2
 8006a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3708      	adds	r7, #8
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	40010000 	.word	0x40010000
 8006a40:	40000400 	.word	0x40000400
 8006a44:	40000800 	.word	0x40000800
 8006a48:	40000c00 	.word	0x40000c00
 8006a4c:	40001000 	.word	0x40001000
 8006a50:	40001400 	.word	0x40001400
 8006a54:	40010400 	.word	0x40010400
 8006a58:	40014000 	.word	0x40014000
 8006a5c:	40014400 	.word	0x40014400
 8006a60:	40014800 	.word	0x40014800
 8006a64:	40001800 	.word	0x40001800
 8006a68:	40001c00 	.word	0x40001c00
 8006a6c:	40002000 	.word	0x40002000
 8006a70:	08010bb4 	.word	0x08010bb4

08006a74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d101      	bne.n	8006a90 <HAL_TIM_ConfigClockSource+0x1c>
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	e332      	b.n	80070f6 <HAL_TIM_ConfigClockSource+0x682>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006aa8:	d029      	beq.n	8006afe <HAL_TIM_ConfigClockSource+0x8a>
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2b70      	cmp	r3, #112	@ 0x70
 8006ab0:	d025      	beq.n	8006afe <HAL_TIM_ConfigClockSource+0x8a>
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006aba:	d020      	beq.n	8006afe <HAL_TIM_ConfigClockSource+0x8a>
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2b40      	cmp	r3, #64	@ 0x40
 8006ac2:	d01c      	beq.n	8006afe <HAL_TIM_ConfigClockSource+0x8a>
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b50      	cmp	r3, #80	@ 0x50
 8006aca:	d018      	beq.n	8006afe <HAL_TIM_ConfigClockSource+0x8a>
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b60      	cmp	r3, #96	@ 0x60
 8006ad2:	d014      	beq.n	8006afe <HAL_TIM_ConfigClockSource+0x8a>
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d010      	beq.n	8006afe <HAL_TIM_ConfigClockSource+0x8a>
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2b10      	cmp	r3, #16
 8006ae2:	d00c      	beq.n	8006afe <HAL_TIM_ConfigClockSource+0x8a>
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2b20      	cmp	r3, #32
 8006aea:	d008      	beq.n	8006afe <HAL_TIM_ConfigClockSource+0x8a>
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2b30      	cmp	r3, #48	@ 0x30
 8006af2:	d004      	beq.n	8006afe <HAL_TIM_ConfigClockSource+0x8a>
 8006af4:	f241 5151 	movw	r1, #5457	@ 0x1551
 8006af8:	4893      	ldr	r0, [pc, #588]	@ (8006d48 <HAL_TIM_ConfigClockSource+0x2d4>)
 8006afa:	f7fa ffc7 	bl	8001a8c <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	4b90      	ldr	r3, [pc, #576]	@ (8006d4c <HAL_TIM_ConfigClockSource+0x2d8>)
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b14:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b26:	f000 812d 	beq.w	8006d84 <HAL_TIM_ConfigClockSource+0x310>
 8006b2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b2e:	f200 82d5 	bhi.w	80070dc <HAL_TIM_ConfigClockSource+0x668>
 8006b32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b36:	d02e      	beq.n	8006b96 <HAL_TIM_ConfigClockSource+0x122>
 8006b38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b3c:	f200 82ce 	bhi.w	80070dc <HAL_TIM_ConfigClockSource+0x668>
 8006b40:	2b70      	cmp	r3, #112	@ 0x70
 8006b42:	f000 8082 	beq.w	8006c4a <HAL_TIM_ConfigClockSource+0x1d6>
 8006b46:	2b70      	cmp	r3, #112	@ 0x70
 8006b48:	f200 82c8 	bhi.w	80070dc <HAL_TIM_ConfigClockSource+0x668>
 8006b4c:	2b60      	cmp	r3, #96	@ 0x60
 8006b4e:	f000 81e0 	beq.w	8006f12 <HAL_TIM_ConfigClockSource+0x49e>
 8006b52:	2b60      	cmp	r3, #96	@ 0x60
 8006b54:	f200 82c2 	bhi.w	80070dc <HAL_TIM_ConfigClockSource+0x668>
 8006b58:	2b50      	cmp	r3, #80	@ 0x50
 8006b5a:	f000 8184 	beq.w	8006e66 <HAL_TIM_ConfigClockSource+0x3f2>
 8006b5e:	2b50      	cmp	r3, #80	@ 0x50
 8006b60:	f200 82bc 	bhi.w	80070dc <HAL_TIM_ConfigClockSource+0x668>
 8006b64:	2b40      	cmp	r3, #64	@ 0x40
 8006b66:	f000 8237 	beq.w	8006fd8 <HAL_TIM_ConfigClockSource+0x564>
 8006b6a:	2b40      	cmp	r3, #64	@ 0x40
 8006b6c:	f200 82b6 	bhi.w	80070dc <HAL_TIM_ConfigClockSource+0x668>
 8006b70:	2b30      	cmp	r3, #48	@ 0x30
 8006b72:	f000 8287 	beq.w	8007084 <HAL_TIM_ConfigClockSource+0x610>
 8006b76:	2b30      	cmp	r3, #48	@ 0x30
 8006b78:	f200 82b0 	bhi.w	80070dc <HAL_TIM_ConfigClockSource+0x668>
 8006b7c:	2b20      	cmp	r3, #32
 8006b7e:	f000 8281 	beq.w	8007084 <HAL_TIM_ConfigClockSource+0x610>
 8006b82:	2b20      	cmp	r3, #32
 8006b84:	f200 82aa 	bhi.w	80070dc <HAL_TIM_ConfigClockSource+0x668>
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 827b 	beq.w	8007084 <HAL_TIM_ConfigClockSource+0x610>
 8006b8e:	2b10      	cmp	r3, #16
 8006b90:	f000 8278 	beq.w	8007084 <HAL_TIM_ConfigClockSource+0x610>
 8006b94:	e2a2      	b.n	80070dc <HAL_TIM_ConfigClockSource+0x668>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a6d      	ldr	r2, [pc, #436]	@ (8006d50 <HAL_TIM_ConfigClockSource+0x2dc>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	f000 82a0 	beq.w	80070e2 <HAL_TIM_ConfigClockSource+0x66e>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006baa:	f000 829a 	beq.w	80070e2 <HAL_TIM_ConfigClockSource+0x66e>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a68      	ldr	r2, [pc, #416]	@ (8006d54 <HAL_TIM_ConfigClockSource+0x2e0>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	f000 8294 	beq.w	80070e2 <HAL_TIM_ConfigClockSource+0x66e>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a66      	ldr	r2, [pc, #408]	@ (8006d58 <HAL_TIM_ConfigClockSource+0x2e4>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	f000 828e 	beq.w	80070e2 <HAL_TIM_ConfigClockSource+0x66e>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a64      	ldr	r2, [pc, #400]	@ (8006d5c <HAL_TIM_ConfigClockSource+0x2e8>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	f000 8288 	beq.w	80070e2 <HAL_TIM_ConfigClockSource+0x66e>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a62      	ldr	r2, [pc, #392]	@ (8006d60 <HAL_TIM_ConfigClockSource+0x2ec>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	f000 8282 	beq.w	80070e2 <HAL_TIM_ConfigClockSource+0x66e>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a60      	ldr	r2, [pc, #384]	@ (8006d64 <HAL_TIM_ConfigClockSource+0x2f0>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	f000 827c 	beq.w	80070e2 <HAL_TIM_ConfigClockSource+0x66e>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a5e      	ldr	r2, [pc, #376]	@ (8006d68 <HAL_TIM_ConfigClockSource+0x2f4>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	f000 8276 	beq.w	80070e2 <HAL_TIM_ConfigClockSource+0x66e>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a5c      	ldr	r2, [pc, #368]	@ (8006d6c <HAL_TIM_ConfigClockSource+0x2f8>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	f000 8270 	beq.w	80070e2 <HAL_TIM_ConfigClockSource+0x66e>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a5a      	ldr	r2, [pc, #360]	@ (8006d70 <HAL_TIM_ConfigClockSource+0x2fc>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	f000 826a 	beq.w	80070e2 <HAL_TIM_ConfigClockSource+0x66e>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a58      	ldr	r2, [pc, #352]	@ (8006d74 <HAL_TIM_ConfigClockSource+0x300>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	f000 8264 	beq.w	80070e2 <HAL_TIM_ConfigClockSource+0x66e>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a56      	ldr	r2, [pc, #344]	@ (8006d78 <HAL_TIM_ConfigClockSource+0x304>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	f000 825e 	beq.w	80070e2 <HAL_TIM_ConfigClockSource+0x66e>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a54      	ldr	r2, [pc, #336]	@ (8006d7c <HAL_TIM_ConfigClockSource+0x308>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	f000 8258 	beq.w	80070e2 <HAL_TIM_ConfigClockSource+0x66e>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a52      	ldr	r2, [pc, #328]	@ (8006d80 <HAL_TIM_ConfigClockSource+0x30c>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	f000 8252 	beq.w	80070e2 <HAL_TIM_ConfigClockSource+0x66e>
 8006c3e:	f241 515d 	movw	r1, #5469	@ 0x155d
 8006c42:	4841      	ldr	r0, [pc, #260]	@ (8006d48 <HAL_TIM_ConfigClockSource+0x2d4>)
 8006c44:	f7fa ff22 	bl	8001a8c <assert_failed>
      break;
 8006c48:	e24b      	b.n	80070e2 <HAL_TIM_ConfigClockSource+0x66e>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a40      	ldr	r2, [pc, #256]	@ (8006d50 <HAL_TIM_ConfigClockSource+0x2dc>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d027      	beq.n	8006ca4 <HAL_TIM_ConfigClockSource+0x230>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c5c:	d022      	beq.n	8006ca4 <HAL_TIM_ConfigClockSource+0x230>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a3c      	ldr	r2, [pc, #240]	@ (8006d54 <HAL_TIM_ConfigClockSource+0x2e0>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d01d      	beq.n	8006ca4 <HAL_TIM_ConfigClockSource+0x230>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a3a      	ldr	r2, [pc, #232]	@ (8006d58 <HAL_TIM_ConfigClockSource+0x2e4>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d018      	beq.n	8006ca4 <HAL_TIM_ConfigClockSource+0x230>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a39      	ldr	r2, [pc, #228]	@ (8006d5c <HAL_TIM_ConfigClockSource+0x2e8>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d013      	beq.n	8006ca4 <HAL_TIM_ConfigClockSource+0x230>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a39      	ldr	r2, [pc, #228]	@ (8006d68 <HAL_TIM_ConfigClockSource+0x2f4>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d00e      	beq.n	8006ca4 <HAL_TIM_ConfigClockSource+0x230>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a38      	ldr	r2, [pc, #224]	@ (8006d6c <HAL_TIM_ConfigClockSource+0x2f8>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d009      	beq.n	8006ca4 <HAL_TIM_ConfigClockSource+0x230>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a38      	ldr	r2, [pc, #224]	@ (8006d78 <HAL_TIM_ConfigClockSource+0x304>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d004      	beq.n	8006ca4 <HAL_TIM_ConfigClockSource+0x230>
 8006c9a:	f241 5164 	movw	r1, #5476	@ 0x1564
 8006c9e:	482a      	ldr	r0, [pc, #168]	@ (8006d48 <HAL_TIM_ConfigClockSource+0x2d4>)
 8006ca0:	f7fa fef4 	bl	8001a8c <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d013      	beq.n	8006cd4 <HAL_TIM_ConfigClockSource+0x260>
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cb4:	d00e      	beq.n	8006cd4 <HAL_TIM_ConfigClockSource+0x260>
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cbe:	d009      	beq.n	8006cd4 <HAL_TIM_ConfigClockSource+0x260>
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006cc8:	d004      	beq.n	8006cd4 <HAL_TIM_ConfigClockSource+0x260>
 8006cca:	f241 5167 	movw	r1, #5479	@ 0x1567
 8006cce:	481e      	ldr	r0, [pc, #120]	@ (8006d48 <HAL_TIM_ConfigClockSource+0x2d4>)
 8006cd0:	f7fa fedc 	bl	8001a8c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cdc:	d014      	beq.n	8006d08 <HAL_TIM_ConfigClockSource+0x294>
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d010      	beq.n	8006d08 <HAL_TIM_ConfigClockSource+0x294>
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00c      	beq.n	8006d08 <HAL_TIM_ConfigClockSource+0x294>
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d008      	beq.n	8006d08 <HAL_TIM_ConfigClockSource+0x294>
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	2b0a      	cmp	r3, #10
 8006cfc:	d004      	beq.n	8006d08 <HAL_TIM_ConfigClockSource+0x294>
 8006cfe:	f241 5168 	movw	r1, #5480	@ 0x1568
 8006d02:	4811      	ldr	r0, [pc, #68]	@ (8006d48 <HAL_TIM_ConfigClockSource+0x2d4>)
 8006d04:	f7fa fec2 	bl	8001a8c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	2b0f      	cmp	r3, #15
 8006d0e:	d904      	bls.n	8006d1a <HAL_TIM_ConfigClockSource+0x2a6>
 8006d10:	f241 5169 	movw	r1, #5481	@ 0x1569
 8006d14:	480c      	ldr	r0, [pc, #48]	@ (8006d48 <HAL_TIM_ConfigClockSource+0x2d4>)
 8006d16:	f7fa feb9 	bl	8001a8c <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d2a:	f001 f953 	bl	8007fd4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006d3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	609a      	str	r2, [r3, #8]
      break;
 8006d46:	e1cd      	b.n	80070e4 <HAL_TIM_ConfigClockSource+0x670>
 8006d48:	08010bb4 	.word	0x08010bb4
 8006d4c:	fffeff88 	.word	0xfffeff88
 8006d50:	40010000 	.word	0x40010000
 8006d54:	40000400 	.word	0x40000400
 8006d58:	40000800 	.word	0x40000800
 8006d5c:	40000c00 	.word	0x40000c00
 8006d60:	40001000 	.word	0x40001000
 8006d64:	40001400 	.word	0x40001400
 8006d68:	40010400 	.word	0x40010400
 8006d6c:	40014000 	.word	0x40014000
 8006d70:	40014400 	.word	0x40014400
 8006d74:	40014800 	.word	0x40014800
 8006d78:	40001800 	.word	0x40001800
 8006d7c:	40001c00 	.word	0x40001c00
 8006d80:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a8d      	ldr	r2, [pc, #564]	@ (8006fc0 <HAL_TIM_ConfigClockSource+0x54c>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d01d      	beq.n	8006dca <HAL_TIM_ConfigClockSource+0x356>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d96:	d018      	beq.n	8006dca <HAL_TIM_ConfigClockSource+0x356>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a89      	ldr	r2, [pc, #548]	@ (8006fc4 <HAL_TIM_ConfigClockSource+0x550>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d013      	beq.n	8006dca <HAL_TIM_ConfigClockSource+0x356>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a88      	ldr	r2, [pc, #544]	@ (8006fc8 <HAL_TIM_ConfigClockSource+0x554>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d00e      	beq.n	8006dca <HAL_TIM_ConfigClockSource+0x356>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a86      	ldr	r2, [pc, #536]	@ (8006fcc <HAL_TIM_ConfigClockSource+0x558>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d009      	beq.n	8006dca <HAL_TIM_ConfigClockSource+0x356>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a85      	ldr	r2, [pc, #532]	@ (8006fd0 <HAL_TIM_ConfigClockSource+0x55c>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d004      	beq.n	8006dca <HAL_TIM_ConfigClockSource+0x356>
 8006dc0:	f241 517c 	movw	r1, #5500	@ 0x157c
 8006dc4:	4883      	ldr	r0, [pc, #524]	@ (8006fd4 <HAL_TIM_ConfigClockSource+0x560>)
 8006dc6:	f7fa fe61 	bl	8001a8c <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d013      	beq.n	8006dfa <HAL_TIM_ConfigClockSource+0x386>
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dda:	d00e      	beq.n	8006dfa <HAL_TIM_ConfigClockSource+0x386>
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006de4:	d009      	beq.n	8006dfa <HAL_TIM_ConfigClockSource+0x386>
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006dee:	d004      	beq.n	8006dfa <HAL_TIM_ConfigClockSource+0x386>
 8006df0:	f241 517f 	movw	r1, #5503	@ 0x157f
 8006df4:	4877      	ldr	r0, [pc, #476]	@ (8006fd4 <HAL_TIM_ConfigClockSource+0x560>)
 8006df6:	f7fa fe49 	bl	8001a8c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e02:	d014      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x3ba>
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d010      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x3ba>
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00c      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x3ba>
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d008      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x3ba>
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	2b0a      	cmp	r3, #10
 8006e22:	d004      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x3ba>
 8006e24:	f44f 51ac 	mov.w	r1, #5504	@ 0x1580
 8006e28:	486a      	ldr	r0, [pc, #424]	@ (8006fd4 <HAL_TIM_ConfigClockSource+0x560>)
 8006e2a:	f7fa fe2f 	bl	8001a8c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	2b0f      	cmp	r3, #15
 8006e34:	d904      	bls.n	8006e40 <HAL_TIM_ConfigClockSource+0x3cc>
 8006e36:	f241 5181 	movw	r1, #5505	@ 0x1581
 8006e3a:	4866      	ldr	r0, [pc, #408]	@ (8006fd4 <HAL_TIM_ConfigClockSource+0x560>)
 8006e3c:	f7fa fe26 	bl	8001a8c <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e50:	f001 f8c0 	bl	8007fd4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	689a      	ldr	r2, [r3, #8]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e62:	609a      	str	r2, [r3, #8]
      break;
 8006e64:	e13e      	b.n	80070e4 <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a55      	ldr	r2, [pc, #340]	@ (8006fc0 <HAL_TIM_ConfigClockSource+0x54c>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d01d      	beq.n	8006eac <HAL_TIM_ConfigClockSource+0x438>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e78:	d018      	beq.n	8006eac <HAL_TIM_ConfigClockSource+0x438>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a51      	ldr	r2, [pc, #324]	@ (8006fc4 <HAL_TIM_ConfigClockSource+0x550>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d013      	beq.n	8006eac <HAL_TIM_ConfigClockSource+0x438>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a4f      	ldr	r2, [pc, #316]	@ (8006fc8 <HAL_TIM_ConfigClockSource+0x554>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d00e      	beq.n	8006eac <HAL_TIM_ConfigClockSource+0x438>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a4e      	ldr	r2, [pc, #312]	@ (8006fcc <HAL_TIM_ConfigClockSource+0x558>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d009      	beq.n	8006eac <HAL_TIM_ConfigClockSource+0x438>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a4c      	ldr	r2, [pc, #304]	@ (8006fd0 <HAL_TIM_ConfigClockSource+0x55c>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d004      	beq.n	8006eac <HAL_TIM_ConfigClockSource+0x438>
 8006ea2:	f241 5190 	movw	r1, #5520	@ 0x1590
 8006ea6:	484b      	ldr	r0, [pc, #300]	@ (8006fd4 <HAL_TIM_ConfigClockSource+0x560>)
 8006ea8:	f7fa fdf0 	bl	8001a8c <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006eb4:	d014      	beq.n	8006ee0 <HAL_TIM_ConfigClockSource+0x46c>
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d010      	beq.n	8006ee0 <HAL_TIM_ConfigClockSource+0x46c>
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00c      	beq.n	8006ee0 <HAL_TIM_ConfigClockSource+0x46c>
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d008      	beq.n	8006ee0 <HAL_TIM_ConfigClockSource+0x46c>
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	2b0a      	cmp	r3, #10
 8006ed4:	d004      	beq.n	8006ee0 <HAL_TIM_ConfigClockSource+0x46c>
 8006ed6:	f241 5193 	movw	r1, #5523	@ 0x1593
 8006eda:	483e      	ldr	r0, [pc, #248]	@ (8006fd4 <HAL_TIM_ConfigClockSource+0x560>)
 8006edc:	f7fa fdd6 	bl	8001a8c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	2b0f      	cmp	r3, #15
 8006ee6:	d904      	bls.n	8006ef2 <HAL_TIM_ConfigClockSource+0x47e>
 8006ee8:	f241 5194 	movw	r1, #5524	@ 0x1594
 8006eec:	4839      	ldr	r0, [pc, #228]	@ (8006fd4 <HAL_TIM_ConfigClockSource+0x560>)
 8006eee:	f7fa fdcd 	bl	8001a8c <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006efe:	461a      	mov	r2, r3
 8006f00:	f000 ffee 	bl	8007ee0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2150      	movs	r1, #80	@ 0x50
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f001 f847 	bl	8007f9e <TIM_ITRx_SetConfig>
      break;
 8006f10:	e0e8      	b.n	80070e4 <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a2a      	ldr	r2, [pc, #168]	@ (8006fc0 <HAL_TIM_ConfigClockSource+0x54c>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d01d      	beq.n	8006f58 <HAL_TIM_ConfigClockSource+0x4e4>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f24:	d018      	beq.n	8006f58 <HAL_TIM_ConfigClockSource+0x4e4>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a26      	ldr	r2, [pc, #152]	@ (8006fc4 <HAL_TIM_ConfigClockSource+0x550>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d013      	beq.n	8006f58 <HAL_TIM_ConfigClockSource+0x4e4>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a24      	ldr	r2, [pc, #144]	@ (8006fc8 <HAL_TIM_ConfigClockSource+0x554>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d00e      	beq.n	8006f58 <HAL_TIM_ConfigClockSource+0x4e4>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a23      	ldr	r2, [pc, #140]	@ (8006fcc <HAL_TIM_ConfigClockSource+0x558>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d009      	beq.n	8006f58 <HAL_TIM_ConfigClockSource+0x4e4>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a21      	ldr	r2, [pc, #132]	@ (8006fd0 <HAL_TIM_ConfigClockSource+0x55c>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d004      	beq.n	8006f58 <HAL_TIM_ConfigClockSource+0x4e4>
 8006f4e:	f44f 51ad 	mov.w	r1, #5536	@ 0x15a0
 8006f52:	4820      	ldr	r0, [pc, #128]	@ (8006fd4 <HAL_TIM_ConfigClockSource+0x560>)
 8006f54:	f7fa fd9a 	bl	8001a8c <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f60:	d014      	beq.n	8006f8c <HAL_TIM_ConfigClockSource+0x518>
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d010      	beq.n	8006f8c <HAL_TIM_ConfigClockSource+0x518>
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00c      	beq.n	8006f8c <HAL_TIM_ConfigClockSource+0x518>
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d008      	beq.n	8006f8c <HAL_TIM_ConfigClockSource+0x518>
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	2b0a      	cmp	r3, #10
 8006f80:	d004      	beq.n	8006f8c <HAL_TIM_ConfigClockSource+0x518>
 8006f82:	f241 51a3 	movw	r1, #5539	@ 0x15a3
 8006f86:	4813      	ldr	r0, [pc, #76]	@ (8006fd4 <HAL_TIM_ConfigClockSource+0x560>)
 8006f88:	f7fa fd80 	bl	8001a8c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	2b0f      	cmp	r3, #15
 8006f92:	d904      	bls.n	8006f9e <HAL_TIM_ConfigClockSource+0x52a>
 8006f94:	f241 51a4 	movw	r1, #5540	@ 0x15a4
 8006f98:	480e      	ldr	r0, [pc, #56]	@ (8006fd4 <HAL_TIM_ConfigClockSource+0x560>)
 8006f9a:	f7fa fd77 	bl	8001a8c <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006faa:	461a      	mov	r2, r3
 8006fac:	f000 ffc7 	bl	8007f3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2160      	movs	r1, #96	@ 0x60
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 fff1 	bl	8007f9e <TIM_ITRx_SetConfig>
      break;
 8006fbc:	e092      	b.n	80070e4 <HAL_TIM_ConfigClockSource+0x670>
 8006fbe:	bf00      	nop
 8006fc0:	40010000 	.word	0x40010000
 8006fc4:	40000400 	.word	0x40000400
 8006fc8:	40000800 	.word	0x40000800
 8006fcc:	40000c00 	.word	0x40000c00
 8006fd0:	40010400 	.word	0x40010400
 8006fd4:	08010bb4 	.word	0x08010bb4
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a48      	ldr	r2, [pc, #288]	@ (8007100 <HAL_TIM_ConfigClockSource+0x68c>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d01d      	beq.n	800701e <HAL_TIM_ConfigClockSource+0x5aa>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fea:	d018      	beq.n	800701e <HAL_TIM_ConfigClockSource+0x5aa>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a44      	ldr	r2, [pc, #272]	@ (8007104 <HAL_TIM_ConfigClockSource+0x690>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d013      	beq.n	800701e <HAL_TIM_ConfigClockSource+0x5aa>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a43      	ldr	r2, [pc, #268]	@ (8007108 <HAL_TIM_ConfigClockSource+0x694>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d00e      	beq.n	800701e <HAL_TIM_ConfigClockSource+0x5aa>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a41      	ldr	r2, [pc, #260]	@ (800710c <HAL_TIM_ConfigClockSource+0x698>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d009      	beq.n	800701e <HAL_TIM_ConfigClockSource+0x5aa>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a40      	ldr	r2, [pc, #256]	@ (8007110 <HAL_TIM_ConfigClockSource+0x69c>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d004      	beq.n	800701e <HAL_TIM_ConfigClockSource+0x5aa>
 8007014:	f241 51b0 	movw	r1, #5552	@ 0x15b0
 8007018:	483e      	ldr	r0, [pc, #248]	@ (8007114 <HAL_TIM_ConfigClockSource+0x6a0>)
 800701a:	f7fa fd37 	bl	8001a8c <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007026:	d014      	beq.n	8007052 <HAL_TIM_ConfigClockSource+0x5de>
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d010      	beq.n	8007052 <HAL_TIM_ConfigClockSource+0x5de>
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00c      	beq.n	8007052 <HAL_TIM_ConfigClockSource+0x5de>
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	2b02      	cmp	r3, #2
 800703e:	d008      	beq.n	8007052 <HAL_TIM_ConfigClockSource+0x5de>
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	2b0a      	cmp	r3, #10
 8007046:	d004      	beq.n	8007052 <HAL_TIM_ConfigClockSource+0x5de>
 8007048:	f241 51b3 	movw	r1, #5555	@ 0x15b3
 800704c:	4831      	ldr	r0, [pc, #196]	@ (8007114 <HAL_TIM_ConfigClockSource+0x6a0>)
 800704e:	f7fa fd1d 	bl	8001a8c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	2b0f      	cmp	r3, #15
 8007058:	d904      	bls.n	8007064 <HAL_TIM_ConfigClockSource+0x5f0>
 800705a:	f241 51b4 	movw	r1, #5556	@ 0x15b4
 800705e:	482d      	ldr	r0, [pc, #180]	@ (8007114 <HAL_TIM_ConfigClockSource+0x6a0>)
 8007060:	f7fa fd14 	bl	8001a8c <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007070:	461a      	mov	r2, r3
 8007072:	f000 ff35 	bl	8007ee0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2140      	movs	r1, #64	@ 0x40
 800707c:	4618      	mov	r0, r3
 800707e:	f000 ff8e 	bl	8007f9e <TIM_ITRx_SetConfig>
      break;
 8007082:	e02f      	b.n	80070e4 <HAL_TIM_ConfigClockSource+0x670>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a1d      	ldr	r2, [pc, #116]	@ (8007100 <HAL_TIM_ConfigClockSource+0x68c>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d01d      	beq.n	80070ca <HAL_TIM_ConfigClockSource+0x656>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007096:	d018      	beq.n	80070ca <HAL_TIM_ConfigClockSource+0x656>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a19      	ldr	r2, [pc, #100]	@ (8007104 <HAL_TIM_ConfigClockSource+0x690>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d013      	beq.n	80070ca <HAL_TIM_ConfigClockSource+0x656>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a18      	ldr	r2, [pc, #96]	@ (8007108 <HAL_TIM_ConfigClockSource+0x694>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d00e      	beq.n	80070ca <HAL_TIM_ConfigClockSource+0x656>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a16      	ldr	r2, [pc, #88]	@ (800710c <HAL_TIM_ConfigClockSource+0x698>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d009      	beq.n	80070ca <HAL_TIM_ConfigClockSource+0x656>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a15      	ldr	r2, [pc, #84]	@ (8007110 <HAL_TIM_ConfigClockSource+0x69c>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d004      	beq.n	80070ca <HAL_TIM_ConfigClockSource+0x656>
 80070c0:	f241 51c3 	movw	r1, #5571	@ 0x15c3
 80070c4:	4813      	ldr	r0, [pc, #76]	@ (8007114 <HAL_TIM_ConfigClockSource+0x6a0>)
 80070c6:	f7fa fce1 	bl	8001a8c <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4619      	mov	r1, r3
 80070d4:	4610      	mov	r0, r2
 80070d6:	f000 ff62 	bl	8007f9e <TIM_ITRx_SetConfig>
      break;
 80070da:	e003      	b.n	80070e4 <HAL_TIM_ConfigClockSource+0x670>
    }

    default:
      status = HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	73fb      	strb	r3, [r7, #15]
      break;
 80070e0:	e000      	b.n	80070e4 <HAL_TIM_ConfigClockSource+0x670>
      break;
 80070e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80070f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	40010000 	.word	0x40010000
 8007104:	40000400 	.word	0x40000400
 8007108:	40000800 	.word	0x40000800
 800710c:	40000c00 	.word	0x40000c00
 8007110:	40010400 	.word	0x40010400
 8007114:	08010bb4 	.word	0x08010bb4

08007118 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a55      	ldr	r2, [pc, #340]	@ (800727c <HAL_TIM_SlaveConfigSynchro+0x164>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d027      	beq.n	800717c <HAL_TIM_SlaveConfigSynchro+0x64>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007134:	d022      	beq.n	800717c <HAL_TIM_SlaveConfigSynchro+0x64>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a51      	ldr	r2, [pc, #324]	@ (8007280 <HAL_TIM_SlaveConfigSynchro+0x168>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d01d      	beq.n	800717c <HAL_TIM_SlaveConfigSynchro+0x64>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a4f      	ldr	r2, [pc, #316]	@ (8007284 <HAL_TIM_SlaveConfigSynchro+0x16c>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d018      	beq.n	800717c <HAL_TIM_SlaveConfigSynchro+0x64>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a4e      	ldr	r2, [pc, #312]	@ (8007288 <HAL_TIM_SlaveConfigSynchro+0x170>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d013      	beq.n	800717c <HAL_TIM_SlaveConfigSynchro+0x64>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a4c      	ldr	r2, [pc, #304]	@ (800728c <HAL_TIM_SlaveConfigSynchro+0x174>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d00e      	beq.n	800717c <HAL_TIM_SlaveConfigSynchro+0x64>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a4b      	ldr	r2, [pc, #300]	@ (8007290 <HAL_TIM_SlaveConfigSynchro+0x178>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d009      	beq.n	800717c <HAL_TIM_SlaveConfigSynchro+0x64>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a49      	ldr	r2, [pc, #292]	@ (8007294 <HAL_TIM_SlaveConfigSynchro+0x17c>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d004      	beq.n	800717c <HAL_TIM_SlaveConfigSynchro+0x64>
 8007172:	f241 6103 	movw	r1, #5635	@ 0x1603
 8007176:	4848      	ldr	r0, [pc, #288]	@ (8007298 <HAL_TIM_SlaveConfigSynchro+0x180>)
 8007178:	f7fa fc88 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d019      	beq.n	80071b8 <HAL_TIM_SlaveConfigSynchro+0xa0>
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2b04      	cmp	r3, #4
 800718a:	d015      	beq.n	80071b8 <HAL_TIM_SlaveConfigSynchro+0xa0>
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2b05      	cmp	r3, #5
 8007192:	d011      	beq.n	80071b8 <HAL_TIM_SlaveConfigSynchro+0xa0>
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b06      	cmp	r3, #6
 800719a:	d00d      	beq.n	80071b8 <HAL_TIM_SlaveConfigSynchro+0xa0>
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2b07      	cmp	r3, #7
 80071a2:	d009      	beq.n	80071b8 <HAL_TIM_SlaveConfigSynchro+0xa0>
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071ac:	d004      	beq.n	80071b8 <HAL_TIM_SlaveConfigSynchro+0xa0>
 80071ae:	f241 6104 	movw	r1, #5636	@ 0x1604
 80071b2:	4839      	ldr	r0, [pc, #228]	@ (8007298 <HAL_TIM_SlaveConfigSynchro+0x180>)
 80071b4:	f7fa fc6a 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d020      	beq.n	8007202 <HAL_TIM_SlaveConfigSynchro+0xea>
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	2b10      	cmp	r3, #16
 80071c6:	d01c      	beq.n	8007202 <HAL_TIM_SlaveConfigSynchro+0xea>
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	2b20      	cmp	r3, #32
 80071ce:	d018      	beq.n	8007202 <HAL_TIM_SlaveConfigSynchro+0xea>
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	2b30      	cmp	r3, #48	@ 0x30
 80071d6:	d014      	beq.n	8007202 <HAL_TIM_SlaveConfigSynchro+0xea>
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	2b40      	cmp	r3, #64	@ 0x40
 80071de:	d010      	beq.n	8007202 <HAL_TIM_SlaveConfigSynchro+0xea>
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	2b50      	cmp	r3, #80	@ 0x50
 80071e6:	d00c      	beq.n	8007202 <HAL_TIM_SlaveConfigSynchro+0xea>
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	2b60      	cmp	r3, #96	@ 0x60
 80071ee:	d008      	beq.n	8007202 <HAL_TIM_SlaveConfigSynchro+0xea>
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	2b70      	cmp	r3, #112	@ 0x70
 80071f6:	d004      	beq.n	8007202 <HAL_TIM_SlaveConfigSynchro+0xea>
 80071f8:	f241 6105 	movw	r1, #5637	@ 0x1605
 80071fc:	4826      	ldr	r0, [pc, #152]	@ (8007298 <HAL_TIM_SlaveConfigSynchro+0x180>)
 80071fe:	f7fa fc45 	bl	8001a8c <assert_failed>

  __HAL_LOCK(htim);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007208:	2b01      	cmp	r3, #1
 800720a:	d101      	bne.n	8007210 <HAL_TIM_SlaveConfigSynchro+0xf8>
 800720c:	2302      	movs	r3, #2
 800720e:	e031      	b.n	8007274 <HAL_TIM_SlaveConfigSynchro+0x15c>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007220:	6839      	ldr	r1, [r7, #0]
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fbf6 	bl	8007a14 <TIM_SlaveTimer_SetConfig>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d009      	beq.n	8007242 <HAL_TIM_SlaveConfigSynchro+0x12a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e018      	b.n	8007274 <HAL_TIM_SlaveConfigSynchro+0x15c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68da      	ldr	r2, [r3, #12]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007250:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68da      	ldr	r2, [r3, #12]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007260:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	40010000 	.word	0x40010000
 8007280:	40000400 	.word	0x40000400
 8007284:	40000800 	.word	0x40000800
 8007288:	40000c00 	.word	0x40000c00
 800728c:	40010400 	.word	0x40010400
 8007290:	40014000 	.word	0x40014000
 8007294:	40001800 	.word	0x40001800
 8007298:	08010bb4 	.word	0x08010bb4

0800729c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80072a4:	bf00      	nop
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072b8:	bf00      	nop
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072cc:	bf00      	nop
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b085      	sub	sp, #20
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a46      	ldr	r2, [pc, #280]	@ (8007418 <TIM_Base_SetConfig+0x12c>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d013      	beq.n	800732c <TIM_Base_SetConfig+0x40>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800730a:	d00f      	beq.n	800732c <TIM_Base_SetConfig+0x40>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a43      	ldr	r2, [pc, #268]	@ (800741c <TIM_Base_SetConfig+0x130>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d00b      	beq.n	800732c <TIM_Base_SetConfig+0x40>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a42      	ldr	r2, [pc, #264]	@ (8007420 <TIM_Base_SetConfig+0x134>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d007      	beq.n	800732c <TIM_Base_SetConfig+0x40>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a41      	ldr	r2, [pc, #260]	@ (8007424 <TIM_Base_SetConfig+0x138>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d003      	beq.n	800732c <TIM_Base_SetConfig+0x40>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a40      	ldr	r2, [pc, #256]	@ (8007428 <TIM_Base_SetConfig+0x13c>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d108      	bne.n	800733e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	4313      	orrs	r3, r2
 800733c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a35      	ldr	r2, [pc, #212]	@ (8007418 <TIM_Base_SetConfig+0x12c>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d02b      	beq.n	800739e <TIM_Base_SetConfig+0xb2>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800734c:	d027      	beq.n	800739e <TIM_Base_SetConfig+0xb2>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a32      	ldr	r2, [pc, #200]	@ (800741c <TIM_Base_SetConfig+0x130>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d023      	beq.n	800739e <TIM_Base_SetConfig+0xb2>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a31      	ldr	r2, [pc, #196]	@ (8007420 <TIM_Base_SetConfig+0x134>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d01f      	beq.n	800739e <TIM_Base_SetConfig+0xb2>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a30      	ldr	r2, [pc, #192]	@ (8007424 <TIM_Base_SetConfig+0x138>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d01b      	beq.n	800739e <TIM_Base_SetConfig+0xb2>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a2f      	ldr	r2, [pc, #188]	@ (8007428 <TIM_Base_SetConfig+0x13c>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d017      	beq.n	800739e <TIM_Base_SetConfig+0xb2>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a2e      	ldr	r2, [pc, #184]	@ (800742c <TIM_Base_SetConfig+0x140>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d013      	beq.n	800739e <TIM_Base_SetConfig+0xb2>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a2d      	ldr	r2, [pc, #180]	@ (8007430 <TIM_Base_SetConfig+0x144>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d00f      	beq.n	800739e <TIM_Base_SetConfig+0xb2>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a2c      	ldr	r2, [pc, #176]	@ (8007434 <TIM_Base_SetConfig+0x148>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d00b      	beq.n	800739e <TIM_Base_SetConfig+0xb2>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a2b      	ldr	r2, [pc, #172]	@ (8007438 <TIM_Base_SetConfig+0x14c>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d007      	beq.n	800739e <TIM_Base_SetConfig+0xb2>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a2a      	ldr	r2, [pc, #168]	@ (800743c <TIM_Base_SetConfig+0x150>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d003      	beq.n	800739e <TIM_Base_SetConfig+0xb2>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a29      	ldr	r2, [pc, #164]	@ (8007440 <TIM_Base_SetConfig+0x154>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d108      	bne.n	80073b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	689a      	ldr	r2, [r3, #8]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a10      	ldr	r2, [pc, #64]	@ (8007418 <TIM_Base_SetConfig+0x12c>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d003      	beq.n	80073e4 <TIM_Base_SetConfig+0xf8>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a12      	ldr	r2, [pc, #72]	@ (8007428 <TIM_Base_SetConfig+0x13c>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d103      	bne.n	80073ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	691a      	ldr	r2, [r3, #16]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	f003 0301 	and.w	r3, r3, #1
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d105      	bne.n	800740a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	f023 0201 	bic.w	r2, r3, #1
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	611a      	str	r2, [r3, #16]
  }
}
 800740a:	bf00      	nop
 800740c:	3714      	adds	r7, #20
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop
 8007418:	40010000 	.word	0x40010000
 800741c:	40000400 	.word	0x40000400
 8007420:	40000800 	.word	0x40000800
 8007424:	40000c00 	.word	0x40000c00
 8007428:	40010400 	.word	0x40010400
 800742c:	40014000 	.word	0x40014000
 8007430:	40014400 	.word	0x40014400
 8007434:	40014800 	.word	0x40014800
 8007438:	40001800 	.word	0x40001800
 800743c:	40001c00 	.word	0x40001c00
 8007440:	40002000 	.word	0x40002000

08007444 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a1b      	ldr	r3, [r3, #32]
 8007458:	f023 0201 	bic.w	r2, r3, #1
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	4b3f      	ldr	r3, [pc, #252]	@ (800756c <TIM_OC1_SetConfig+0x128>)
 8007470:	4013      	ands	r3, r2
 8007472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f023 0303 	bic.w	r3, r3, #3
 800747a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	4313      	orrs	r3, r2
 8007484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	f023 0302 	bic.w	r3, r3, #2
 800748c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	4313      	orrs	r3, r2
 8007496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a35      	ldr	r2, [pc, #212]	@ (8007570 <TIM_OC1_SetConfig+0x12c>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d003      	beq.n	80074a8 <TIM_OC1_SetConfig+0x64>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a34      	ldr	r2, [pc, #208]	@ (8007574 <TIM_OC1_SetConfig+0x130>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d119      	bne.n	80074dc <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d008      	beq.n	80074c2 <TIM_OC1_SetConfig+0x7e>
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	2b08      	cmp	r3, #8
 80074b6:	d004      	beq.n	80074c2 <TIM_OC1_SetConfig+0x7e>
 80074b8:	f641 3169 	movw	r1, #7017	@ 0x1b69
 80074bc:	482e      	ldr	r0, [pc, #184]	@ (8007578 <TIM_OC1_SetConfig+0x134>)
 80074be:	f7fa fae5 	bl	8001a8c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	f023 0308 	bic.w	r3, r3, #8
 80074c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	697a      	ldr	r2, [r7, #20]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	f023 0304 	bic.w	r3, r3, #4
 80074da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a24      	ldr	r2, [pc, #144]	@ (8007570 <TIM_OC1_SetConfig+0x12c>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d003      	beq.n	80074ec <TIM_OC1_SetConfig+0xa8>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a23      	ldr	r2, [pc, #140]	@ (8007574 <TIM_OC1_SetConfig+0x130>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d12d      	bne.n	8007548 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	699b      	ldr	r3, [r3, #24]
 80074f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074f4:	d008      	beq.n	8007508 <TIM_OC1_SetConfig+0xc4>
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d004      	beq.n	8007508 <TIM_OC1_SetConfig+0xc4>
 80074fe:	f641 3176 	movw	r1, #7030	@ 0x1b76
 8007502:	481d      	ldr	r0, [pc, #116]	@ (8007578 <TIM_OC1_SetConfig+0x134>)
 8007504:	f7fa fac2 	bl	8001a8c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	695b      	ldr	r3, [r3, #20]
 800750c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007510:	d008      	beq.n	8007524 <TIM_OC1_SetConfig+0xe0>
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d004      	beq.n	8007524 <TIM_OC1_SetConfig+0xe0>
 800751a:	f641 3177 	movw	r1, #7031	@ 0x1b77
 800751e:	4816      	ldr	r0, [pc, #88]	@ (8007578 <TIM_OC1_SetConfig+0x134>)
 8007520:	f7fa fab4 	bl	8001a8c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800752a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007532:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	695b      	ldr	r3, [r3, #20]
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	4313      	orrs	r3, r2
 800753c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	693a      	ldr	r2, [r7, #16]
 8007544:	4313      	orrs	r3, r2
 8007546:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	693a      	ldr	r2, [r7, #16]
 800754c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	685a      	ldr	r2, [r3, #4]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	697a      	ldr	r2, [r7, #20]
 8007560:	621a      	str	r2, [r3, #32]
}
 8007562:	bf00      	nop
 8007564:	3718      	adds	r7, #24
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	fffeff8f 	.word	0xfffeff8f
 8007570:	40010000 	.word	0x40010000
 8007574:	40010400 	.word	0x40010400
 8007578:	08010bb4 	.word	0x08010bb4

0800757c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b086      	sub	sp, #24
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a1b      	ldr	r3, [r3, #32]
 800758a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a1b      	ldr	r3, [r3, #32]
 8007590:	f023 0210 	bic.w	r2, r3, #16
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	699b      	ldr	r3, [r3, #24]
 80075a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	4b41      	ldr	r3, [pc, #260]	@ (80076ac <TIM_OC2_SetConfig+0x130>)
 80075a8:	4013      	ands	r3, r2
 80075aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	021b      	lsls	r3, r3, #8
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	4313      	orrs	r3, r2
 80075be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	f023 0320 	bic.w	r3, r3, #32
 80075c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	011b      	lsls	r3, r3, #4
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a36      	ldr	r2, [pc, #216]	@ (80076b0 <TIM_OC2_SetConfig+0x134>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d003      	beq.n	80075e4 <TIM_OC2_SetConfig+0x68>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a35      	ldr	r2, [pc, #212]	@ (80076b4 <TIM_OC2_SetConfig+0x138>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d11a      	bne.n	800761a <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d008      	beq.n	80075fe <TIM_OC2_SetConfig+0x82>
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	2b08      	cmp	r3, #8
 80075f2:	d004      	beq.n	80075fe <TIM_OC2_SetConfig+0x82>
 80075f4:	f641 31b5 	movw	r1, #7093	@ 0x1bb5
 80075f8:	482f      	ldr	r0, [pc, #188]	@ (80076b8 <TIM_OC2_SetConfig+0x13c>)
 80075fa:	f7fa fa47 	bl	8001a8c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007604:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	011b      	lsls	r3, r3, #4
 800760c:	697a      	ldr	r2, [r7, #20]
 800760e:	4313      	orrs	r3, r2
 8007610:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007618:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a24      	ldr	r2, [pc, #144]	@ (80076b0 <TIM_OC2_SetConfig+0x134>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d003      	beq.n	800762a <TIM_OC2_SetConfig+0xae>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a23      	ldr	r2, [pc, #140]	@ (80076b4 <TIM_OC2_SetConfig+0x138>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d12f      	bne.n	800768a <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	699b      	ldr	r3, [r3, #24]
 800762e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007632:	d008      	beq.n	8007646 <TIM_OC2_SetConfig+0xca>
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d004      	beq.n	8007646 <TIM_OC2_SetConfig+0xca>
 800763c:	f641 31c2 	movw	r1, #7106	@ 0x1bc2
 8007640:	481d      	ldr	r0, [pc, #116]	@ (80076b8 <TIM_OC2_SetConfig+0x13c>)
 8007642:	f7fa fa23 	bl	8001a8c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	695b      	ldr	r3, [r3, #20]
 800764a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800764e:	d008      	beq.n	8007662 <TIM_OC2_SetConfig+0xe6>
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	695b      	ldr	r3, [r3, #20]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d004      	beq.n	8007662 <TIM_OC2_SetConfig+0xe6>
 8007658:	f641 31c3 	movw	r1, #7107	@ 0x1bc3
 800765c:	4816      	ldr	r0, [pc, #88]	@ (80076b8 <TIM_OC2_SetConfig+0x13c>)
 800765e:	f7fa fa15 	bl	8001a8c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	693a      	ldr	r2, [r7, #16]
 800767a:	4313      	orrs	r3, r2
 800767c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	699b      	ldr	r3, [r3, #24]
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	4313      	orrs	r3, r2
 8007688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	693a      	ldr	r2, [r7, #16]
 800768e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	685a      	ldr	r2, [r3, #4]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	697a      	ldr	r2, [r7, #20]
 80076a2:	621a      	str	r2, [r3, #32]
}
 80076a4:	bf00      	nop
 80076a6:	3718      	adds	r7, #24
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	feff8fff 	.word	0xfeff8fff
 80076b0:	40010000 	.word	0x40010000
 80076b4:	40010400 	.word	0x40010400
 80076b8:	08010bb4 	.word	0x08010bb4

080076bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6a1b      	ldr	r3, [r3, #32]
 80076d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	69db      	ldr	r3, [r3, #28]
 80076e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	4b41      	ldr	r3, [pc, #260]	@ (80077ec <TIM_OC3_SetConfig+0x130>)
 80076e8:	4013      	ands	r3, r2
 80076ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f023 0303 	bic.w	r3, r3, #3
 80076f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007704:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	021b      	lsls	r3, r3, #8
 800770c:	697a      	ldr	r2, [r7, #20]
 800770e:	4313      	orrs	r3, r2
 8007710:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a36      	ldr	r2, [pc, #216]	@ (80077f0 <TIM_OC3_SetConfig+0x134>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d003      	beq.n	8007722 <TIM_OC3_SetConfig+0x66>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a35      	ldr	r2, [pc, #212]	@ (80077f4 <TIM_OC3_SetConfig+0x138>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d11a      	bne.n	8007758 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d008      	beq.n	800773c <TIM_OC3_SetConfig+0x80>
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	2b08      	cmp	r3, #8
 8007730:	d004      	beq.n	800773c <TIM_OC3_SetConfig+0x80>
 8007732:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8007736:	4830      	ldr	r0, [pc, #192]	@ (80077f8 <TIM_OC3_SetConfig+0x13c>)
 8007738:	f7fa f9a8 	bl	8001a8c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	021b      	lsls	r3, r3, #8
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	4313      	orrs	r3, r2
 800774e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007756:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a25      	ldr	r2, [pc, #148]	@ (80077f0 <TIM_OC3_SetConfig+0x134>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d003      	beq.n	8007768 <TIM_OC3_SetConfig+0xac>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a24      	ldr	r2, [pc, #144]	@ (80077f4 <TIM_OC3_SetConfig+0x138>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d12f      	bne.n	80077c8 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007770:	d008      	beq.n	8007784 <TIM_OC3_SetConfig+0xc8>
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	699b      	ldr	r3, [r3, #24]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d004      	beq.n	8007784 <TIM_OC3_SetConfig+0xc8>
 800777a:	f641 410d 	movw	r1, #7181	@ 0x1c0d
 800777e:	481e      	ldr	r0, [pc, #120]	@ (80077f8 <TIM_OC3_SetConfig+0x13c>)
 8007780:	f7fa f984 	bl	8001a8c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	695b      	ldr	r3, [r3, #20]
 8007788:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800778c:	d008      	beq.n	80077a0 <TIM_OC3_SetConfig+0xe4>
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d004      	beq.n	80077a0 <TIM_OC3_SetConfig+0xe4>
 8007796:	f641 410e 	movw	r1, #7182	@ 0x1c0e
 800779a:	4817      	ldr	r0, [pc, #92]	@ (80077f8 <TIM_OC3_SetConfig+0x13c>)
 800779c:	f7fa f976 	bl	8001a8c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80077a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80077ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	695b      	ldr	r3, [r3, #20]
 80077b4:	011b      	lsls	r3, r3, #4
 80077b6:	693a      	ldr	r2, [r7, #16]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	699b      	ldr	r3, [r3, #24]
 80077c0:	011b      	lsls	r3, r3, #4
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	693a      	ldr	r2, [r7, #16]
 80077cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	685a      	ldr	r2, [r3, #4]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	697a      	ldr	r2, [r7, #20]
 80077e0:	621a      	str	r2, [r3, #32]
}
 80077e2:	bf00      	nop
 80077e4:	3718      	adds	r7, #24
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	fffeff8f 	.word	0xfffeff8f
 80077f0:	40010000 	.word	0x40010000
 80077f4:	40010400 	.word	0x40010400
 80077f8:	08010bb4 	.word	0x08010bb4

080077fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b086      	sub	sp, #24
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a1b      	ldr	r3, [r3, #32]
 800780a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a1b      	ldr	r3, [r3, #32]
 8007810:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	69db      	ldr	r3, [r3, #28]
 8007822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	4b24      	ldr	r3, [pc, #144]	@ (80078b8 <TIM_OC4_SetConfig+0xbc>)
 8007828:	4013      	ands	r3, r2
 800782a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	021b      	lsls	r3, r3, #8
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	4313      	orrs	r3, r2
 800783e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007846:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	031b      	lsls	r3, r3, #12
 800784e:	693a      	ldr	r2, [r7, #16]
 8007850:	4313      	orrs	r3, r2
 8007852:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a19      	ldr	r2, [pc, #100]	@ (80078bc <TIM_OC4_SetConfig+0xc0>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d003      	beq.n	8007864 <TIM_OC4_SetConfig+0x68>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a18      	ldr	r2, [pc, #96]	@ (80078c0 <TIM_OC4_SetConfig+0xc4>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d117      	bne.n	8007894 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	695b      	ldr	r3, [r3, #20]
 8007868:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800786c:	d008      	beq.n	8007880 <TIM_OC4_SetConfig+0x84>
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d004      	beq.n	8007880 <TIM_OC4_SetConfig+0x84>
 8007876:	f641 414d 	movw	r1, #7245	@ 0x1c4d
 800787a:	4812      	ldr	r0, [pc, #72]	@ (80078c4 <TIM_OC4_SetConfig+0xc8>)
 800787c:	f7fa f906 	bl	8001a8c <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007886:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	695b      	ldr	r3, [r3, #20]
 800788c:	019b      	lsls	r3, r3, #6
 800788e:	697a      	ldr	r2, [r7, #20]
 8007890:	4313      	orrs	r3, r2
 8007892:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	685a      	ldr	r2, [r3, #4]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	621a      	str	r2, [r3, #32]
}
 80078ae:	bf00      	nop
 80078b0:	3718      	adds	r7, #24
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	feff8fff 	.word	0xfeff8fff
 80078bc:	40010000 	.word	0x40010000
 80078c0:	40010400 	.word	0x40010400
 80078c4:	08010bb4 	.word	0x08010bb4

080078c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b087      	sub	sp, #28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a1b      	ldr	r3, [r3, #32]
 80078d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a1b      	ldr	r3, [r3, #32]
 80078dc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	4b1b      	ldr	r3, [pc, #108]	@ (8007960 <TIM_OC5_SetConfig+0x98>)
 80078f4:	4013      	ands	r3, r2
 80078f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	4313      	orrs	r3, r2
 8007900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007908:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	041b      	lsls	r3, r3, #16
 8007910:	693a      	ldr	r2, [r7, #16]
 8007912:	4313      	orrs	r3, r2
 8007914:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a12      	ldr	r2, [pc, #72]	@ (8007964 <TIM_OC5_SetConfig+0x9c>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d003      	beq.n	8007926 <TIM_OC5_SetConfig+0x5e>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a11      	ldr	r2, [pc, #68]	@ (8007968 <TIM_OC5_SetConfig+0xa0>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d109      	bne.n	800793a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800792c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	021b      	lsls	r3, r3, #8
 8007934:	697a      	ldr	r2, [r7, #20]
 8007936:	4313      	orrs	r3, r2
 8007938:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	697a      	ldr	r2, [r7, #20]
 800793e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	685a      	ldr	r2, [r3, #4]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	621a      	str	r2, [r3, #32]
}
 8007954:	bf00      	nop
 8007956:	371c      	adds	r7, #28
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr
 8007960:	fffeff8f 	.word	0xfffeff8f
 8007964:	40010000 	.word	0x40010000
 8007968:	40010400 	.word	0x40010400

0800796c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800796c:	b480      	push	{r7}
 800796e:	b087      	sub	sp, #28
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a1b      	ldr	r3, [r3, #32]
 800797a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a1b      	ldr	r3, [r3, #32]
 8007980:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	4b1c      	ldr	r3, [pc, #112]	@ (8007a08 <TIM_OC6_SetConfig+0x9c>)
 8007998:	4013      	ands	r3, r2
 800799a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	021b      	lsls	r3, r3, #8
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80079ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	051b      	lsls	r3, r3, #20
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a13      	ldr	r2, [pc, #76]	@ (8007a0c <TIM_OC6_SetConfig+0xa0>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d003      	beq.n	80079cc <TIM_OC6_SetConfig+0x60>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a12      	ldr	r2, [pc, #72]	@ (8007a10 <TIM_OC6_SetConfig+0xa4>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d109      	bne.n	80079e0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80079d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	695b      	ldr	r3, [r3, #20]
 80079d8:	029b      	lsls	r3, r3, #10
 80079da:	697a      	ldr	r2, [r7, #20]
 80079dc:	4313      	orrs	r3, r2
 80079de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	697a      	ldr	r2, [r7, #20]
 80079e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	685a      	ldr	r2, [r3, #4]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	621a      	str	r2, [r3, #32]
}
 80079fa:	bf00      	nop
 80079fc:	371c      	adds	r7, #28
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	feff8fff 	.word	0xfeff8fff
 8007a0c:	40010000 	.word	0x40010000
 8007a10:	40010400 	.word	0x40010400

08007a14 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a30:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007a3c:	693a      	ldr	r2, [r7, #16]
 8007a3e:	4b8f      	ldr	r3, [pc, #572]	@ (8007c7c <TIM_SlaveTimer_SetConfig+0x268>)
 8007a40:	4013      	ands	r3, r2
 8007a42:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	2b70      	cmp	r3, #112	@ 0x70
 8007a5c:	d027      	beq.n	8007aae <TIM_SlaveTimer_SetConfig+0x9a>
 8007a5e:	2b70      	cmp	r3, #112	@ 0x70
 8007a60:	f200 821c 	bhi.w	8007e9c <TIM_SlaveTimer_SetConfig+0x488>
 8007a64:	2b60      	cmp	r3, #96	@ 0x60
 8007a66:	f000 8191 	beq.w	8007d8c <TIM_SlaveTimer_SetConfig+0x378>
 8007a6a:	2b60      	cmp	r3, #96	@ 0x60
 8007a6c:	f200 8216 	bhi.w	8007e9c <TIM_SlaveTimer_SetConfig+0x488>
 8007a70:	2b50      	cmp	r3, #80	@ 0x50
 8007a72:	f000 811d 	beq.w	8007cb0 <TIM_SlaveTimer_SetConfig+0x29c>
 8007a76:	2b50      	cmp	r3, #80	@ 0x50
 8007a78:	f200 8210 	bhi.w	8007e9c <TIM_SlaveTimer_SetConfig+0x488>
 8007a7c:	2b40      	cmp	r3, #64	@ 0x40
 8007a7e:	f000 8089 	beq.w	8007b94 <TIM_SlaveTimer_SetConfig+0x180>
 8007a82:	2b40      	cmp	r3, #64	@ 0x40
 8007a84:	f200 820a 	bhi.w	8007e9c <TIM_SlaveTimer_SetConfig+0x488>
 8007a88:	2b30      	cmp	r3, #48	@ 0x30
 8007a8a:	f000 81d9 	beq.w	8007e40 <TIM_SlaveTimer_SetConfig+0x42c>
 8007a8e:	2b30      	cmp	r3, #48	@ 0x30
 8007a90:	f200 8204 	bhi.w	8007e9c <TIM_SlaveTimer_SetConfig+0x488>
 8007a94:	2b20      	cmp	r3, #32
 8007a96:	f000 81d3 	beq.w	8007e40 <TIM_SlaveTimer_SetConfig+0x42c>
 8007a9a:	2b20      	cmp	r3, #32
 8007a9c:	f200 81fe 	bhi.w	8007e9c <TIM_SlaveTimer_SetConfig+0x488>
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f000 81cd 	beq.w	8007e40 <TIM_SlaveTimer_SetConfig+0x42c>
 8007aa6:	2b10      	cmp	r3, #16
 8007aa8:	f000 81ca 	beq.w	8007e40 <TIM_SlaveTimer_SetConfig+0x42c>
 8007aac:	e1f6      	b.n	8007e9c <TIM_SlaveTimer_SetConfig+0x488>
  {
    case TIM_TS_ETRF:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a73      	ldr	r2, [pc, #460]	@ (8007c80 <TIM_SlaveTimer_SetConfig+0x26c>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d027      	beq.n	8007b08 <TIM_SlaveTimer_SetConfig+0xf4>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ac0:	d022      	beq.n	8007b08 <TIM_SlaveTimer_SetConfig+0xf4>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a6f      	ldr	r2, [pc, #444]	@ (8007c84 <TIM_SlaveTimer_SetConfig+0x270>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d01d      	beq.n	8007b08 <TIM_SlaveTimer_SetConfig+0xf4>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a6d      	ldr	r2, [pc, #436]	@ (8007c88 <TIM_SlaveTimer_SetConfig+0x274>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d018      	beq.n	8007b08 <TIM_SlaveTimer_SetConfig+0xf4>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a6c      	ldr	r2, [pc, #432]	@ (8007c8c <TIM_SlaveTimer_SetConfig+0x278>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d013      	beq.n	8007b08 <TIM_SlaveTimer_SetConfig+0xf4>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a6a      	ldr	r2, [pc, #424]	@ (8007c90 <TIM_SlaveTimer_SetConfig+0x27c>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d00e      	beq.n	8007b08 <TIM_SlaveTimer_SetConfig+0xf4>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a69      	ldr	r2, [pc, #420]	@ (8007c94 <TIM_SlaveTimer_SetConfig+0x280>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d009      	beq.n	8007b08 <TIM_SlaveTimer_SetConfig+0xf4>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a67      	ldr	r2, [pc, #412]	@ (8007c98 <TIM_SlaveTimer_SetConfig+0x284>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d004      	beq.n	8007b08 <TIM_SlaveTimer_SetConfig+0xf4>
 8007afe:	f641 41f4 	movw	r1, #7412	@ 0x1cf4
 8007b02:	4866      	ldr	r0, [pc, #408]	@ (8007c9c <TIM_SlaveTimer_SetConfig+0x288>)
 8007b04:	f7f9 ffc2 	bl	8001a8c <assert_failed>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d013      	beq.n	8007b38 <TIM_SlaveTimer_SetConfig+0x124>
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b18:	d00e      	beq.n	8007b38 <TIM_SlaveTimer_SetConfig+0x124>
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b22:	d009      	beq.n	8007b38 <TIM_SlaveTimer_SetConfig+0x124>
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007b2c:	d004      	beq.n	8007b38 <TIM_SlaveTimer_SetConfig+0x124>
 8007b2e:	f641 41f5 	movw	r1, #7413	@ 0x1cf5
 8007b32:	485a      	ldr	r0, [pc, #360]	@ (8007c9c <TIM_SlaveTimer_SetConfig+0x288>)
 8007b34:	f7f9 ffaa 	bl	8001a8c <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b40:	d014      	beq.n	8007b6c <TIM_SlaveTimer_SetConfig+0x158>
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d010      	beq.n	8007b6c <TIM_SlaveTimer_SetConfig+0x158>
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00c      	beq.n	8007b6c <TIM_SlaveTimer_SetConfig+0x158>
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	d008      	beq.n	8007b6c <TIM_SlaveTimer_SetConfig+0x158>
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	2b0a      	cmp	r3, #10
 8007b60:	d004      	beq.n	8007b6c <TIM_SlaveTimer_SetConfig+0x158>
 8007b62:	f641 41f6 	movw	r1, #7414	@ 0x1cf6
 8007b66:	484d      	ldr	r0, [pc, #308]	@ (8007c9c <TIM_SlaveTimer_SetConfig+0x288>)
 8007b68:	f7f9 ff90 	bl	8001a8c <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	2b0f      	cmp	r3, #15
 8007b72:	d904      	bls.n	8007b7e <TIM_SlaveTimer_SetConfig+0x16a>
 8007b74:	f641 41f7 	movw	r1, #7415	@ 0x1cf7
 8007b78:	4848      	ldr	r0, [pc, #288]	@ (8007c9c <TIM_SlaveTimer_SetConfig+0x288>)
 8007b7a:	f7f9 ff87 	bl	8001a8c <assert_failed>
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8007b8e:	f000 fa21 	bl	8007fd4 <TIM_ETR_SetConfig>
      break;
 8007b92:	e187      	b.n	8007ea4 <TIM_SlaveTimer_SetConfig+0x490>
    }

    case TIM_TS_TI1F_ED:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a39      	ldr	r2, [pc, #228]	@ (8007c80 <TIM_SlaveTimer_SetConfig+0x26c>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d03b      	beq.n	8007c16 <TIM_SlaveTimer_SetConfig+0x202>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ba6:	d036      	beq.n	8007c16 <TIM_SlaveTimer_SetConfig+0x202>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a35      	ldr	r2, [pc, #212]	@ (8007c84 <TIM_SlaveTimer_SetConfig+0x270>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d031      	beq.n	8007c16 <TIM_SlaveTimer_SetConfig+0x202>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a34      	ldr	r2, [pc, #208]	@ (8007c88 <TIM_SlaveTimer_SetConfig+0x274>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d02c      	beq.n	8007c16 <TIM_SlaveTimer_SetConfig+0x202>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a32      	ldr	r2, [pc, #200]	@ (8007c8c <TIM_SlaveTimer_SetConfig+0x278>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d027      	beq.n	8007c16 <TIM_SlaveTimer_SetConfig+0x202>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a31      	ldr	r2, [pc, #196]	@ (8007c90 <TIM_SlaveTimer_SetConfig+0x27c>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d022      	beq.n	8007c16 <TIM_SlaveTimer_SetConfig+0x202>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a2f      	ldr	r2, [pc, #188]	@ (8007c94 <TIM_SlaveTimer_SetConfig+0x280>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d01d      	beq.n	8007c16 <TIM_SlaveTimer_SetConfig+0x202>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a30      	ldr	r2, [pc, #192]	@ (8007ca0 <TIM_SlaveTimer_SetConfig+0x28c>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d018      	beq.n	8007c16 <TIM_SlaveTimer_SetConfig+0x202>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a2e      	ldr	r2, [pc, #184]	@ (8007ca4 <TIM_SlaveTimer_SetConfig+0x290>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d013      	beq.n	8007c16 <TIM_SlaveTimer_SetConfig+0x202>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a29      	ldr	r2, [pc, #164]	@ (8007c98 <TIM_SlaveTimer_SetConfig+0x284>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d00e      	beq.n	8007c16 <TIM_SlaveTimer_SetConfig+0x202>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a2a      	ldr	r2, [pc, #168]	@ (8007ca8 <TIM_SlaveTimer_SetConfig+0x294>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d009      	beq.n	8007c16 <TIM_SlaveTimer_SetConfig+0x202>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a29      	ldr	r2, [pc, #164]	@ (8007cac <TIM_SlaveTimer_SetConfig+0x298>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d004      	beq.n	8007c16 <TIM_SlaveTimer_SetConfig+0x202>
 8007c0c:	f641 5103 	movw	r1, #7427	@ 0x1d03
 8007c10:	4822      	ldr	r0, [pc, #136]	@ (8007c9c <TIM_SlaveTimer_SetConfig+0x288>)
 8007c12:	f7f9 ff3b 	bl	8001a8c <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	2b0f      	cmp	r3, #15
 8007c1c:	d904      	bls.n	8007c28 <TIM_SlaveTimer_SetConfig+0x214>
 8007c1e:	f641 5104 	movw	r1, #7428	@ 0x1d04
 8007c22:	481e      	ldr	r0, [pc, #120]	@ (8007c9c <TIM_SlaveTimer_SetConfig+0x288>)
 8007c24:	f7f9 ff32 	bl	8001a8c <assert_failed>

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b05      	cmp	r3, #5
 8007c2e:	d101      	bne.n	8007c34 <TIM_SlaveTimer_SetConfig+0x220>
      {
        return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e138      	b.n	8007ea6 <TIM_SlaveTimer_SetConfig+0x492>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6a1b      	ldr	r3, [r3, #32]
 8007c3a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	6a1a      	ldr	r2, [r3, #32]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f022 0201 	bic.w	r2, r2, #1
 8007c4a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c5a:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	011b      	lsls	r3, r3, #4
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	4313      	orrs	r3, r2
 8007c66:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68ba      	ldr	r2, [r7, #8]
 8007c6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	621a      	str	r2, [r3, #32]
      break;
 8007c78:	e114      	b.n	8007ea4 <TIM_SlaveTimer_SetConfig+0x490>
 8007c7a:	bf00      	nop
 8007c7c:	fffefff8 	.word	0xfffefff8
 8007c80:	40010000 	.word	0x40010000
 8007c84:	40000400 	.word	0x40000400
 8007c88:	40000800 	.word	0x40000800
 8007c8c:	40000c00 	.word	0x40000c00
 8007c90:	40010400 	.word	0x40010400
 8007c94:	40014000 	.word	0x40014000
 8007c98:	40001800 	.word	0x40001800
 8007c9c:	08010bb4 	.word	0x08010bb4
 8007ca0:	40014400 	.word	0x40014400
 8007ca4:	40014800 	.word	0x40014800
 8007ca8:	40001c00 	.word	0x40001c00
 8007cac:	40002000 	.word	0x40002000
    }

    case TIM_TS_TI1FP1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a7e      	ldr	r2, [pc, #504]	@ (8007eb0 <TIM_SlaveTimer_SetConfig+0x49c>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d03b      	beq.n	8007d32 <TIM_SlaveTimer_SetConfig+0x31e>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cc2:	d036      	beq.n	8007d32 <TIM_SlaveTimer_SetConfig+0x31e>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a7a      	ldr	r2, [pc, #488]	@ (8007eb4 <TIM_SlaveTimer_SetConfig+0x4a0>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d031      	beq.n	8007d32 <TIM_SlaveTimer_SetConfig+0x31e>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a79      	ldr	r2, [pc, #484]	@ (8007eb8 <TIM_SlaveTimer_SetConfig+0x4a4>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d02c      	beq.n	8007d32 <TIM_SlaveTimer_SetConfig+0x31e>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a77      	ldr	r2, [pc, #476]	@ (8007ebc <TIM_SlaveTimer_SetConfig+0x4a8>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d027      	beq.n	8007d32 <TIM_SlaveTimer_SetConfig+0x31e>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a76      	ldr	r2, [pc, #472]	@ (8007ec0 <TIM_SlaveTimer_SetConfig+0x4ac>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d022      	beq.n	8007d32 <TIM_SlaveTimer_SetConfig+0x31e>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a74      	ldr	r2, [pc, #464]	@ (8007ec4 <TIM_SlaveTimer_SetConfig+0x4b0>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d01d      	beq.n	8007d32 <TIM_SlaveTimer_SetConfig+0x31e>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a73      	ldr	r2, [pc, #460]	@ (8007ec8 <TIM_SlaveTimer_SetConfig+0x4b4>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d018      	beq.n	8007d32 <TIM_SlaveTimer_SetConfig+0x31e>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a71      	ldr	r2, [pc, #452]	@ (8007ecc <TIM_SlaveTimer_SetConfig+0x4b8>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d013      	beq.n	8007d32 <TIM_SlaveTimer_SetConfig+0x31e>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a70      	ldr	r2, [pc, #448]	@ (8007ed0 <TIM_SlaveTimer_SetConfig+0x4bc>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d00e      	beq.n	8007d32 <TIM_SlaveTimer_SetConfig+0x31e>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a6e      	ldr	r2, [pc, #440]	@ (8007ed4 <TIM_SlaveTimer_SetConfig+0x4c0>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d009      	beq.n	8007d32 <TIM_SlaveTimer_SetConfig+0x31e>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a6d      	ldr	r2, [pc, #436]	@ (8007ed8 <TIM_SlaveTimer_SetConfig+0x4c4>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d004      	beq.n	8007d32 <TIM_SlaveTimer_SetConfig+0x31e>
 8007d28:	f641 511d 	movw	r1, #7453	@ 0x1d1d
 8007d2c:	486b      	ldr	r0, [pc, #428]	@ (8007edc <TIM_SlaveTimer_SetConfig+0x4c8>)
 8007d2e:	f7f9 fead 	bl	8001a8c <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d3a:	d014      	beq.n	8007d66 <TIM_SlaveTimer_SetConfig+0x352>
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d010      	beq.n	8007d66 <TIM_SlaveTimer_SetConfig+0x352>
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00c      	beq.n	8007d66 <TIM_SlaveTimer_SetConfig+0x352>
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d008      	beq.n	8007d66 <TIM_SlaveTimer_SetConfig+0x352>
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	2b0a      	cmp	r3, #10
 8007d5a:	d004      	beq.n	8007d66 <TIM_SlaveTimer_SetConfig+0x352>
 8007d5c:	f641 511e 	movw	r1, #7454	@ 0x1d1e
 8007d60:	485e      	ldr	r0, [pc, #376]	@ (8007edc <TIM_SlaveTimer_SetConfig+0x4c8>)
 8007d62:	f7f9 fe93 	bl	8001a8c <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	2b0f      	cmp	r3, #15
 8007d6c:	d904      	bls.n	8007d78 <TIM_SlaveTimer_SetConfig+0x364>
 8007d6e:	f641 511f 	movw	r1, #7455	@ 0x1d1f
 8007d72:	485a      	ldr	r0, [pc, #360]	@ (8007edc <TIM_SlaveTimer_SetConfig+0x4c8>)
 8007d74:	f7f9 fe8a 	bl	8001a8c <assert_failed>

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d84:	461a      	mov	r2, r3
 8007d86:	f000 f8ab 	bl	8007ee0 <TIM_TI1_ConfigInputStage>
      break;
 8007d8a:	e08b      	b.n	8007ea4 <TIM_SlaveTimer_SetConfig+0x490>
    }

    case TIM_TS_TI2FP2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a47      	ldr	r2, [pc, #284]	@ (8007eb0 <TIM_SlaveTimer_SetConfig+0x49c>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d027      	beq.n	8007de6 <TIM_SlaveTimer_SetConfig+0x3d2>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d9e:	d022      	beq.n	8007de6 <TIM_SlaveTimer_SetConfig+0x3d2>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a43      	ldr	r2, [pc, #268]	@ (8007eb4 <TIM_SlaveTimer_SetConfig+0x4a0>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d01d      	beq.n	8007de6 <TIM_SlaveTimer_SetConfig+0x3d2>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a42      	ldr	r2, [pc, #264]	@ (8007eb8 <TIM_SlaveTimer_SetConfig+0x4a4>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d018      	beq.n	8007de6 <TIM_SlaveTimer_SetConfig+0x3d2>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a40      	ldr	r2, [pc, #256]	@ (8007ebc <TIM_SlaveTimer_SetConfig+0x4a8>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d013      	beq.n	8007de6 <TIM_SlaveTimer_SetConfig+0x3d2>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a3f      	ldr	r2, [pc, #252]	@ (8007ec0 <TIM_SlaveTimer_SetConfig+0x4ac>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d00e      	beq.n	8007de6 <TIM_SlaveTimer_SetConfig+0x3d2>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a3d      	ldr	r2, [pc, #244]	@ (8007ec4 <TIM_SlaveTimer_SetConfig+0x4b0>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d009      	beq.n	8007de6 <TIM_SlaveTimer_SetConfig+0x3d2>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a3e      	ldr	r2, [pc, #248]	@ (8007ed0 <TIM_SlaveTimer_SetConfig+0x4bc>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d004      	beq.n	8007de6 <TIM_SlaveTimer_SetConfig+0x3d2>
 8007ddc:	f641 512b 	movw	r1, #7467	@ 0x1d2b
 8007de0:	483e      	ldr	r0, [pc, #248]	@ (8007edc <TIM_SlaveTimer_SetConfig+0x4c8>)
 8007de2:	f7f9 fe53 	bl	8001a8c <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007dee:	d014      	beq.n	8007e1a <TIM_SlaveTimer_SetConfig+0x406>
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d010      	beq.n	8007e1a <TIM_SlaveTimer_SetConfig+0x406>
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00c      	beq.n	8007e1a <TIM_SlaveTimer_SetConfig+0x406>
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d008      	beq.n	8007e1a <TIM_SlaveTimer_SetConfig+0x406>
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	2b0a      	cmp	r3, #10
 8007e0e:	d004      	beq.n	8007e1a <TIM_SlaveTimer_SetConfig+0x406>
 8007e10:	f641 512c 	movw	r1, #7468	@ 0x1d2c
 8007e14:	4831      	ldr	r0, [pc, #196]	@ (8007edc <TIM_SlaveTimer_SetConfig+0x4c8>)
 8007e16:	f7f9 fe39 	bl	8001a8c <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	2b0f      	cmp	r3, #15
 8007e20:	d904      	bls.n	8007e2c <TIM_SlaveTimer_SetConfig+0x418>
 8007e22:	f641 512d 	movw	r1, #7469	@ 0x1d2d
 8007e26:	482d      	ldr	r0, [pc, #180]	@ (8007edc <TIM_SlaveTimer_SetConfig+0x4c8>)
 8007e28:	f7f9 fe30 	bl	8001a8c <assert_failed>

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e38:	461a      	mov	r2, r3
 8007e3a:	f000 f880 	bl	8007f3e <TIM_TI2_ConfigInputStage>
      break;
 8007e3e:	e031      	b.n	8007ea4 <TIM_SlaveTimer_SetConfig+0x490>
    case TIM_TS_ITR1:
    case TIM_TS_ITR2:
    case TIM_TS_ITR3:
    {
      /* Check the parameter */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a1a      	ldr	r2, [pc, #104]	@ (8007eb0 <TIM_SlaveTimer_SetConfig+0x49c>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d02b      	beq.n	8007ea2 <TIM_SlaveTimer_SetConfig+0x48e>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e52:	d026      	beq.n	8007ea2 <TIM_SlaveTimer_SetConfig+0x48e>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a16      	ldr	r2, [pc, #88]	@ (8007eb4 <TIM_SlaveTimer_SetConfig+0x4a0>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d021      	beq.n	8007ea2 <TIM_SlaveTimer_SetConfig+0x48e>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a15      	ldr	r2, [pc, #84]	@ (8007eb8 <TIM_SlaveTimer_SetConfig+0x4a4>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d01c      	beq.n	8007ea2 <TIM_SlaveTimer_SetConfig+0x48e>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a13      	ldr	r2, [pc, #76]	@ (8007ebc <TIM_SlaveTimer_SetConfig+0x4a8>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d017      	beq.n	8007ea2 <TIM_SlaveTimer_SetConfig+0x48e>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a12      	ldr	r2, [pc, #72]	@ (8007ec0 <TIM_SlaveTimer_SetConfig+0x4ac>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d012      	beq.n	8007ea2 <TIM_SlaveTimer_SetConfig+0x48e>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a10      	ldr	r2, [pc, #64]	@ (8007ec4 <TIM_SlaveTimer_SetConfig+0x4b0>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d00d      	beq.n	8007ea2 <TIM_SlaveTimer_SetConfig+0x48e>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a11      	ldr	r2, [pc, #68]	@ (8007ed0 <TIM_SlaveTimer_SetConfig+0x4bc>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d008      	beq.n	8007ea2 <TIM_SlaveTimer_SetConfig+0x48e>
 8007e90:	f641 513c 	movw	r1, #7484	@ 0x1d3c
 8007e94:	4811      	ldr	r0, [pc, #68]	@ (8007edc <TIM_SlaveTimer_SetConfig+0x4c8>)
 8007e96:	f7f9 fdf9 	bl	8001a8c <assert_failed>
      break;
 8007e9a:	e002      	b.n	8007ea2 <TIM_SlaveTimer_SetConfig+0x48e>
    }

    default:
      status = HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	75fb      	strb	r3, [r7, #23]
      break;
 8007ea0:	e000      	b.n	8007ea4 <TIM_SlaveTimer_SetConfig+0x490>
      break;
 8007ea2:	bf00      	nop
  }

  return status;
 8007ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3718      	adds	r7, #24
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	40010000 	.word	0x40010000
 8007eb4:	40000400 	.word	0x40000400
 8007eb8:	40000800 	.word	0x40000800
 8007ebc:	40000c00 	.word	0x40000c00
 8007ec0:	40010400 	.word	0x40010400
 8007ec4:	40014000 	.word	0x40014000
 8007ec8:	40014400 	.word	0x40014400
 8007ecc:	40014800 	.word	0x40014800
 8007ed0:	40001800 	.word	0x40001800
 8007ed4:	40001c00 	.word	0x40001c00
 8007ed8:	40002000 	.word	0x40002000
 8007edc:	08010bb4 	.word	0x08010bb4

08007ee0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b087      	sub	sp, #28
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6a1b      	ldr	r3, [r3, #32]
 8007ef0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6a1b      	ldr	r3, [r3, #32]
 8007ef6:	f023 0201 	bic.w	r2, r3, #1
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	699b      	ldr	r3, [r3, #24]
 8007f02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	011b      	lsls	r3, r3, #4
 8007f10:	693a      	ldr	r2, [r7, #16]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	f023 030a 	bic.w	r3, r3, #10
 8007f1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	693a      	ldr	r2, [r7, #16]
 8007f2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	697a      	ldr	r2, [r7, #20]
 8007f30:	621a      	str	r2, [r3, #32]
}
 8007f32:	bf00      	nop
 8007f34:	371c      	adds	r7, #28
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f3e:	b480      	push	{r7}
 8007f40:	b087      	sub	sp, #28
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	60f8      	str	r0, [r7, #12]
 8007f46:	60b9      	str	r1, [r7, #8]
 8007f48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6a1b      	ldr	r3, [r3, #32]
 8007f4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6a1b      	ldr	r3, [r3, #32]
 8007f54:	f023 0210 	bic.w	r2, r3, #16
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	699b      	ldr	r3, [r3, #24]
 8007f60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007f68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	031b      	lsls	r3, r3, #12
 8007f6e:	693a      	ldr	r2, [r7, #16]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007f7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	011b      	lsls	r3, r3, #4
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	693a      	ldr	r2, [r7, #16]
 8007f8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	621a      	str	r2, [r3, #32]
}
 8007f92:	bf00      	nop
 8007f94:	371c      	adds	r7, #28
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr

08007f9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b085      	sub	sp, #20
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
 8007fa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007fb6:	683a      	ldr	r2, [r7, #0]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	f043 0307 	orr.w	r3, r3, #7
 8007fc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	609a      	str	r2, [r3, #8]
}
 8007fc8:	bf00      	nop
 8007fca:	3714      	adds	r7, #20
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b087      	sub	sp, #28
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]
 8007fe0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007fee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	021a      	lsls	r2, r3, #8
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	431a      	orrs	r2, r3
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	697a      	ldr	r2, [r7, #20]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	697a      	ldr	r2, [r7, #20]
 8008006:	609a      	str	r2, [r3, #8]
}
 8008008:	bf00      	nop
 800800a:	371c      	adds	r7, #28
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b086      	sub	sp, #24
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	4a35      	ldr	r2, [pc, #212]	@ (80080f8 <TIM_CCxChannelCmd+0xe4>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d030      	beq.n	800808a <TIM_CCxChannelCmd+0x76>
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800802e:	d02c      	beq.n	800808a <TIM_CCxChannelCmd+0x76>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	4a32      	ldr	r2, [pc, #200]	@ (80080fc <TIM_CCxChannelCmd+0xe8>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d028      	beq.n	800808a <TIM_CCxChannelCmd+0x76>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	4a31      	ldr	r2, [pc, #196]	@ (8008100 <TIM_CCxChannelCmd+0xec>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d024      	beq.n	800808a <TIM_CCxChannelCmd+0x76>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	4a30      	ldr	r2, [pc, #192]	@ (8008104 <TIM_CCxChannelCmd+0xf0>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d020      	beq.n	800808a <TIM_CCxChannelCmd+0x76>
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	4a2f      	ldr	r2, [pc, #188]	@ (8008108 <TIM_CCxChannelCmd+0xf4>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d01c      	beq.n	800808a <TIM_CCxChannelCmd+0x76>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	4a2e      	ldr	r2, [pc, #184]	@ (800810c <TIM_CCxChannelCmd+0xf8>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d018      	beq.n	800808a <TIM_CCxChannelCmd+0x76>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	4a2d      	ldr	r2, [pc, #180]	@ (8008110 <TIM_CCxChannelCmd+0xfc>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d014      	beq.n	800808a <TIM_CCxChannelCmd+0x76>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	4a2c      	ldr	r2, [pc, #176]	@ (8008114 <TIM_CCxChannelCmd+0x100>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d010      	beq.n	800808a <TIM_CCxChannelCmd+0x76>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	4a2b      	ldr	r2, [pc, #172]	@ (8008118 <TIM_CCxChannelCmd+0x104>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d00c      	beq.n	800808a <TIM_CCxChannelCmd+0x76>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	4a2a      	ldr	r2, [pc, #168]	@ (800811c <TIM_CCxChannelCmd+0x108>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d008      	beq.n	800808a <TIM_CCxChannelCmd+0x76>
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	4a29      	ldr	r2, [pc, #164]	@ (8008120 <TIM_CCxChannelCmd+0x10c>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d004      	beq.n	800808a <TIM_CCxChannelCmd+0x76>
 8008080:	f641 61a7 	movw	r1, #7847	@ 0x1ea7
 8008084:	4827      	ldr	r0, [pc, #156]	@ (8008124 <TIM_CCxChannelCmd+0x110>)
 8008086:	f7f9 fd01 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d016      	beq.n	80080be <TIM_CCxChannelCmd+0xaa>
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	2b04      	cmp	r3, #4
 8008094:	d013      	beq.n	80080be <TIM_CCxChannelCmd+0xaa>
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	2b08      	cmp	r3, #8
 800809a:	d010      	beq.n	80080be <TIM_CCxChannelCmd+0xaa>
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	2b0c      	cmp	r3, #12
 80080a0:	d00d      	beq.n	80080be <TIM_CCxChannelCmd+0xaa>
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	2b10      	cmp	r3, #16
 80080a6:	d00a      	beq.n	80080be <TIM_CCxChannelCmd+0xaa>
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	2b14      	cmp	r3, #20
 80080ac:	d007      	beq.n	80080be <TIM_CCxChannelCmd+0xaa>
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	2b3c      	cmp	r3, #60	@ 0x3c
 80080b2:	d004      	beq.n	80080be <TIM_CCxChannelCmd+0xaa>
 80080b4:	f641 61a8 	movw	r1, #7848	@ 0x1ea8
 80080b8:	481a      	ldr	r0, [pc, #104]	@ (8008124 <TIM_CCxChannelCmd+0x110>)
 80080ba:	f7f9 fce7 	bl	8001a8c <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	f003 031f 	and.w	r3, r3, #31
 80080c4:	2201      	movs	r2, #1
 80080c6:	fa02 f303 	lsl.w	r3, r2, r3
 80080ca:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6a1a      	ldr	r2, [r3, #32]
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	43db      	mvns	r3, r3
 80080d4:	401a      	ands	r2, r3
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6a1a      	ldr	r2, [r3, #32]
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	f003 031f 	and.w	r3, r3, #31
 80080e4:	6879      	ldr	r1, [r7, #4]
 80080e6:	fa01 f303 	lsl.w	r3, r1, r3
 80080ea:	431a      	orrs	r2, r3
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	621a      	str	r2, [r3, #32]
}
 80080f0:	bf00      	nop
 80080f2:	3718      	adds	r7, #24
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	40010000 	.word	0x40010000
 80080fc:	40000400 	.word	0x40000400
 8008100:	40000800 	.word	0x40000800
 8008104:	40000c00 	.word	0x40000c00
 8008108:	40010400 	.word	0x40010400
 800810c:	40014000 	.word	0x40014000
 8008110:	40014400 	.word	0x40014400
 8008114:	40014800 	.word	0x40014800
 8008118:	40001800 	.word	0x40001800
 800811c:	40001c00 	.word	0x40001c00
 8008120:	40002000 	.word	0x40002000
 8008124:	08010bb4 	.word	0x08010bb4

08008128 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a32      	ldr	r2, [pc, #200]	@ (8008200 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d027      	beq.n	800818c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008144:	d022      	beq.n	800818c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a2e      	ldr	r2, [pc, #184]	@ (8008204 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d01d      	beq.n	800818c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a2c      	ldr	r2, [pc, #176]	@ (8008208 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d018      	beq.n	800818c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a2b      	ldr	r2, [pc, #172]	@ (800820c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d013      	beq.n	800818c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a29      	ldr	r2, [pc, #164]	@ (8008210 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d00e      	beq.n	800818c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a28      	ldr	r2, [pc, #160]	@ (8008214 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d009      	beq.n	800818c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a26      	ldr	r2, [pc, #152]	@ (8008218 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d004      	beq.n	800818c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008182:	f240 71ab 	movw	r1, #1963	@ 0x7ab
 8008186:	4825      	ldr	r0, [pc, #148]	@ (800821c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008188:	f7f9 fc80 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d020      	beq.n	80081d6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2b10      	cmp	r3, #16
 800819a:	d01c      	beq.n	80081d6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b20      	cmp	r3, #32
 80081a2:	d018      	beq.n	80081d6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2b30      	cmp	r3, #48	@ 0x30
 80081aa:	d014      	beq.n	80081d6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b40      	cmp	r3, #64	@ 0x40
 80081b2:	d010      	beq.n	80081d6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2b50      	cmp	r3, #80	@ 0x50
 80081ba:	d00c      	beq.n	80081d6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2b60      	cmp	r3, #96	@ 0x60
 80081c2:	d008      	beq.n	80081d6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2b70      	cmp	r3, #112	@ 0x70
 80081ca:	d004      	beq.n	80081d6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80081cc:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 80081d0:	4812      	ldr	r0, [pc, #72]	@ (800821c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80081d2:	f7f9 fc5b 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	2b80      	cmp	r3, #128	@ 0x80
 80081dc:	d008      	beq.n	80081f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d004      	beq.n	80081f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081e6:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 80081ea:	480c      	ldr	r0, [pc, #48]	@ (800821c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80081ec:	f7f9 fc4e 	bl	8001a8c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d112      	bne.n	8008220 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 80081fa:	2302      	movs	r3, #2
 80081fc:	e0d7      	b.n	80083ae <HAL_TIMEx_MasterConfigSynchronization+0x286>
 80081fe:	bf00      	nop
 8008200:	40010000 	.word	0x40010000
 8008204:	40000400 	.word	0x40000400
 8008208:	40000800 	.word	0x40000800
 800820c:	40000c00 	.word	0x40000c00
 8008210:	40001000 	.word	0x40001000
 8008214:	40001400 	.word	0x40001400
 8008218:	40010400 	.word	0x40010400
 800821c:	08010bec 	.word	0x08010bec
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2202      	movs	r2, #2
 800822c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a5c      	ldr	r2, [pc, #368]	@ (80083b8 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d004      	beq.n	8008254 <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a5b      	ldr	r2, [pc, #364]	@ (80083bc <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d161      	bne.n	8008318 <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d054      	beq.n	8008306 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008264:	d04f      	beq.n	8008306 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800826e:	d04a      	beq.n	8008306 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008278:	d045      	beq.n	8008306 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008282:	d040      	beq.n	8008306 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800828c:	d03b      	beq.n	8008306 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008296:	d036      	beq.n	8008306 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80082a0:	d031      	beq.n	8008306 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 80082aa:	d02c      	beq.n	8008306 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80082b4:	d027      	beq.n	8008306 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 80082be:	d022      	beq.n	8008306 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80082c8:	d01d      	beq.n	8008306 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 80082d2:	d018      	beq.n	8008306 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80082dc:	d013      	beq.n	8008306 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 80082e6:	d00e      	beq.n	8008306 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 80082f0:	d009      	beq.n	8008306 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 80082fa:	d004      	beq.n	8008306 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80082fc:	f240 71bf 	movw	r1, #1983	@ 0x7bf
 8008300:	482f      	ldr	r0, [pc, #188]	@ (80083c0 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8008302:	f7f9 fbc3 	bl	8001a8c <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800830c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	4313      	orrs	r3, r2
 8008316:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800831e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68fa      	ldr	r2, [r7, #12]
 8008326:	4313      	orrs	r3, r2
 8008328:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a20      	ldr	r2, [pc, #128]	@ (80083b8 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d022      	beq.n	8008382 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008344:	d01d      	beq.n	8008382 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a1e      	ldr	r2, [pc, #120]	@ (80083c4 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d018      	beq.n	8008382 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a1c      	ldr	r2, [pc, #112]	@ (80083c8 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d013      	beq.n	8008382 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a1b      	ldr	r2, [pc, #108]	@ (80083cc <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d00e      	beq.n	8008382 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a14      	ldr	r2, [pc, #80]	@ (80083bc <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d009      	beq.n	8008382 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a17      	ldr	r2, [pc, #92]	@ (80083d0 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d004      	beq.n	8008382 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a15      	ldr	r2, [pc, #84]	@ (80083d4 <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d10c      	bne.n	800839c <HAL_TIMEx_MasterConfigSynchronization+0x274>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008388:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	68ba      	ldr	r2, [r7, #8]
 8008390:	4313      	orrs	r3, r2
 8008392:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68ba      	ldr	r2, [r7, #8]
 800839a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	40010000 	.word	0x40010000
 80083bc:	40010400 	.word	0x40010400
 80083c0:	08010bec 	.word	0x08010bec
 80083c4:	40000400 	.word	0x40000400
 80083c8:	40000800 	.word	0x40000800
 80083cc:	40000c00 	.word	0x40000c00
 80083d0:	40014000 	.word	0x40014000
 80083d4:	40001800 	.word	0x40001800

080083d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80083e2:	2300      	movs	r3, #0
 80083e4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a89      	ldr	r2, [pc, #548]	@ (8008610 <HAL_TIMEx_ConfigBreakDeadTime+0x238>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d009      	beq.n	8008404 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a87      	ldr	r2, [pc, #540]	@ (8008614 <HAL_TIMEx_ConfigBreakDeadTime+0x23c>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d004      	beq.n	8008404 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 80083fa:	f240 71f4 	movw	r1, #2036	@ 0x7f4
 80083fe:	4886      	ldr	r0, [pc, #536]	@ (8008618 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 8008400:	f7f9 fb44 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800840c:	d008      	beq.n	8008420 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d004      	beq.n	8008420 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8008416:	f240 71f5 	movw	r1, #2037	@ 0x7f5
 800841a:	487f      	ldr	r0, [pc, #508]	@ (8008618 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800841c:	f7f9 fb36 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008428:	d008      	beq.n	800843c <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d004      	beq.n	800843c <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8008432:	f240 71f6 	movw	r1, #2038	@ 0x7f6
 8008436:	4878      	ldr	r0, [pc, #480]	@ (8008618 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 8008438:	f7f9 fb28 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d013      	beq.n	800846c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800844c:	d00e      	beq.n	800846c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008456:	d009      	beq.n	800846c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008460:	d004      	beq.n	800846c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8008462:	f240 71f7 	movw	r1, #2039	@ 0x7f7
 8008466:	486c      	ldr	r0, [pc, #432]	@ (8008618 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 8008468:	f7f9 fb10 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	2bff      	cmp	r3, #255	@ 0xff
 8008472:	d904      	bls.n	800847e <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8008474:	f44f 61ff 	mov.w	r1, #2040	@ 0x7f8
 8008478:	4867      	ldr	r0, [pc, #412]	@ (8008618 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800847a:	f7f9 fb07 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008486:	d008      	beq.n	800849a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d004      	beq.n	800849a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008490:	f240 71f9 	movw	r1, #2041	@ 0x7f9
 8008494:	4860      	ldr	r0, [pc, #384]	@ (8008618 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 8008496:	f7f9 faf9 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d009      	beq.n	80084b6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	695b      	ldr	r3, [r3, #20]
 80084a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084aa:	d004      	beq.n	80084b6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80084ac:	f240 71fa 	movw	r1, #2042	@ 0x7fa
 80084b0:	4859      	ldr	r0, [pc, #356]	@ (8008618 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 80084b2:	f7f9 faeb 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	699b      	ldr	r3, [r3, #24]
 80084ba:	2b0f      	cmp	r3, #15
 80084bc:	d904      	bls.n	80084c8 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 80084be:	f240 71fb 	movw	r1, #2043	@ 0x7fb
 80084c2:	4855      	ldr	r0, [pc, #340]	@ (8008618 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 80084c4:	f7f9 fae2 	bl	8001a8c <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80084d0:	d008      	beq.n	80084e4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d004      	beq.n	80084e4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80084da:	f240 71fc 	movw	r1, #2044	@ 0x7fc
 80084de:	484e      	ldr	r0, [pc, #312]	@ (8008618 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 80084e0:	f7f9 fad4 	bl	8001a8c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d101      	bne.n	80084f2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
 80084ee:	2302      	movs	r3, #2
 80084f0:	e08a      	b.n	8008608 <HAL_TIMEx_ConfigBreakDeadTime+0x230>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2201      	movs	r2, #1
 80084f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	4313      	orrs	r3, r2
 8008506:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	4313      	orrs	r3, r2
 8008514:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	4313      	orrs	r3, r2
 8008522:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4313      	orrs	r3, r2
 8008530:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	4313      	orrs	r3, r2
 800853e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	695b      	ldr	r3, [r3, #20]
 800854a:	4313      	orrs	r3, r2
 800854c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008558:	4313      	orrs	r3, r2
 800855a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	041b      	lsls	r3, r3, #16
 8008568:	4313      	orrs	r3, r2
 800856a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a27      	ldr	r2, [pc, #156]	@ (8008610 <HAL_TIMEx_ConfigBreakDeadTime+0x238>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d004      	beq.n	8008580 <HAL_TIMEx_ConfigBreakDeadTime+0x1a8>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a26      	ldr	r2, [pc, #152]	@ (8008614 <HAL_TIMEx_ConfigBreakDeadTime+0x23c>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d13a      	bne.n	80085f6 <HAL_TIMEx_ConfigBreakDeadTime+0x21e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	69db      	ldr	r3, [r3, #28]
 8008584:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008588:	d008      	beq.n	800859c <HAL_TIMEx_ConfigBreakDeadTime+0x1c4>
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	69db      	ldr	r3, [r3, #28]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d004      	beq.n	800859c <HAL_TIMEx_ConfigBreakDeadTime+0x1c4>
 8008592:	f640 0111 	movw	r1, #2065	@ 0x811
 8008596:	4820      	ldr	r0, [pc, #128]	@ (8008618 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 8008598:	f7f9 fa78 	bl	8001a8c <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	6a1b      	ldr	r3, [r3, #32]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d009      	beq.n	80085b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1e0>
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	6a1b      	ldr	r3, [r3, #32]
 80085a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80085ac:	d004      	beq.n	80085b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1e0>
 80085ae:	f640 0112 	movw	r1, #2066	@ 0x812
 80085b2:	4819      	ldr	r0, [pc, #100]	@ (8008618 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 80085b4:	f7f9 fa6a 	bl	8001a8c <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085bc:	2b0f      	cmp	r3, #15
 80085be:	d904      	bls.n	80085ca <HAL_TIMEx_ConfigBreakDeadTime+0x1f2>
 80085c0:	f640 0113 	movw	r1, #2067	@ 0x813
 80085c4:	4814      	ldr	r0, [pc, #80]	@ (8008618 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 80085c6:	f7f9 fa61 	bl	8001a8c <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085d4:	051b      	lsls	r3, r3, #20
 80085d6:	4313      	orrs	r3, r2
 80085d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	69db      	ldr	r3, [r3, #28]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	6a1b      	ldr	r3, [r3, #32]
 80085f2:	4313      	orrs	r3, r2
 80085f4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008606:	2300      	movs	r3, #0
}
 8008608:	4618      	mov	r0, r3
 800860a:	3710      	adds	r7, #16
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}
 8008610:	40010000 	.word	0x40010000
 8008614:	40010400 	.word	0x40010400
 8008618:	08010bec 	.word	0x08010bec

0800861c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008624:	bf00      	nop
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008638:	bf00      	nop
 800863a:	370c      	adds	r7, #12
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800864c:	bf00      	nop
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d101      	bne.n	800866a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e09f      	b.n	80087aa <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	699b      	ldr	r3, [r3, #24]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d02d      	beq.n	80086ce <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a4f      	ldr	r2, [pc, #316]	@ (80087b4 <HAL_UART_Init+0x15c>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d055      	beq.n	8008728 <HAL_UART_Init+0xd0>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a4d      	ldr	r2, [pc, #308]	@ (80087b8 <HAL_UART_Init+0x160>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d050      	beq.n	8008728 <HAL_UART_Init+0xd0>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a4c      	ldr	r2, [pc, #304]	@ (80087bc <HAL_UART_Init+0x164>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d04b      	beq.n	8008728 <HAL_UART_Init+0xd0>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a4a      	ldr	r2, [pc, #296]	@ (80087c0 <HAL_UART_Init+0x168>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d046      	beq.n	8008728 <HAL_UART_Init+0xd0>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a49      	ldr	r2, [pc, #292]	@ (80087c4 <HAL_UART_Init+0x16c>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d041      	beq.n	8008728 <HAL_UART_Init+0xd0>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a47      	ldr	r2, [pc, #284]	@ (80087c8 <HAL_UART_Init+0x170>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d03c      	beq.n	8008728 <HAL_UART_Init+0xd0>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a46      	ldr	r2, [pc, #280]	@ (80087cc <HAL_UART_Init+0x174>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d037      	beq.n	8008728 <HAL_UART_Init+0xd0>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a44      	ldr	r2, [pc, #272]	@ (80087d0 <HAL_UART_Init+0x178>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d032      	beq.n	8008728 <HAL_UART_Init+0xd0>
 80086c2:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80086c6:	4843      	ldr	r0, [pc, #268]	@ (80087d4 <HAL_UART_Init+0x17c>)
 80086c8:	f7f9 f9e0 	bl	8001a8c <assert_failed>
 80086cc:	e02c      	b.n	8008728 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a38      	ldr	r2, [pc, #224]	@ (80087b4 <HAL_UART_Init+0x15c>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d027      	beq.n	8008728 <HAL_UART_Init+0xd0>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a36      	ldr	r2, [pc, #216]	@ (80087b8 <HAL_UART_Init+0x160>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d022      	beq.n	8008728 <HAL_UART_Init+0xd0>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a35      	ldr	r2, [pc, #212]	@ (80087bc <HAL_UART_Init+0x164>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d01d      	beq.n	8008728 <HAL_UART_Init+0xd0>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a33      	ldr	r2, [pc, #204]	@ (80087c0 <HAL_UART_Init+0x168>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d018      	beq.n	8008728 <HAL_UART_Init+0xd0>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a32      	ldr	r2, [pc, #200]	@ (80087c4 <HAL_UART_Init+0x16c>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d013      	beq.n	8008728 <HAL_UART_Init+0xd0>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a30      	ldr	r2, [pc, #192]	@ (80087c8 <HAL_UART_Init+0x170>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d00e      	beq.n	8008728 <HAL_UART_Init+0xd0>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a2f      	ldr	r2, [pc, #188]	@ (80087cc <HAL_UART_Init+0x174>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d009      	beq.n	8008728 <HAL_UART_Init+0xd0>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a2d      	ldr	r2, [pc, #180]	@ (80087d0 <HAL_UART_Init+0x178>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d004      	beq.n	8008728 <HAL_UART_Init+0xd0>
 800871e:	f240 1131 	movw	r1, #305	@ 0x131
 8008722:	482c      	ldr	r0, [pc, #176]	@ (80087d4 <HAL_UART_Init+0x17c>)
 8008724:	f7f9 f9b2 	bl	8001a8c <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800872c:	2b00      	cmp	r3, #0
 800872e:	d106      	bne.n	800873e <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f7f9 fd71 	bl	8002220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2224      	movs	r2, #36	@ 0x24
 8008742:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f022 0201 	bic.w	r2, r2, #1
 8008752:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008758:	2b00      	cmp	r3, #0
 800875a:	d002      	beq.n	8008762 <HAL_UART_Init+0x10a>
  {
    UART_AdvFeatureConfig(huart);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 fb31 	bl	8008dc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f838 	bl	80087d8 <UART_SetConfig>
 8008768:	4603      	mov	r3, r0
 800876a:	2b01      	cmp	r3, #1
 800876c:	d101      	bne.n	8008772 <HAL_UART_Init+0x11a>
  {
    return HAL_ERROR;
 800876e:	2301      	movs	r3, #1
 8008770:	e01b      	b.n	80087aa <HAL_UART_Init+0x152>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	685a      	ldr	r2, [r3, #4]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008780:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	689a      	ldr	r2, [r3, #8]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008790:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f042 0201 	orr.w	r2, r2, #1
 80087a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 fc66 	bl	8009074 <UART_CheckIdleState>
 80087a8:	4603      	mov	r3, r0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3708      	adds	r7, #8
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	40011000 	.word	0x40011000
 80087b8:	40004400 	.word	0x40004400
 80087bc:	40004800 	.word	0x40004800
 80087c0:	40004c00 	.word	0x40004c00
 80087c4:	40005000 	.word	0x40005000
 80087c8:	40011400 	.word	0x40011400
 80087cc:	40007800 	.word	0x40007800
 80087d0:	40007c00 	.word	0x40007c00
 80087d4:	08010c28 	.word	0x08010c28

080087d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b088      	sub	sp, #32
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80087e0:	2300      	movs	r3, #0
 80087e2:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	4aa0      	ldr	r2, [pc, #640]	@ (8008a6c <UART_SetConfig+0x294>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d904      	bls.n	80087f8 <UART_SetConfig+0x20>
 80087ee:	f640 315f 	movw	r1, #2911	@ 0xb5f
 80087f2:	489f      	ldr	r0, [pc, #636]	@ (8008a70 <UART_SetConfig+0x298>)
 80087f4:	f7f9 f94a 	bl	8001a8c <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008800:	d00d      	beq.n	800881e <UART_SetConfig+0x46>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d009      	beq.n	800881e <UART_SetConfig+0x46>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008812:	d004      	beq.n	800881e <UART_SetConfig+0x46>
 8008814:	f44f 6136 	mov.w	r1, #2912	@ 0xb60
 8008818:	4895      	ldr	r0, [pc, #596]	@ (8008a70 <UART_SetConfig+0x298>)
 800881a:	f7f9 f937 	bl	8001a8c <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008826:	d012      	beq.n	800884e <UART_SetConfig+0x76>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00e      	beq.n	800884e <UART_SetConfig+0x76>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008838:	d009      	beq.n	800884e <UART_SetConfig+0x76>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008842:	d004      	beq.n	800884e <UART_SetConfig+0x76>
 8008844:	f640 3161 	movw	r1, #2913	@ 0xb61
 8008848:	4889      	ldr	r0, [pc, #548]	@ (8008a70 <UART_SetConfig+0x298>)
 800884a:	f7f9 f91f 	bl	8001a8c <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a1b      	ldr	r3, [r3, #32]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d009      	beq.n	800886a <UART_SetConfig+0x92>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6a1b      	ldr	r3, [r3, #32]
 800885a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800885e:	d004      	beq.n	800886a <UART_SetConfig+0x92>
 8008860:	f640 3162 	movw	r1, #2914	@ 0xb62
 8008864:	4882      	ldr	r0, [pc, #520]	@ (8008a70 <UART_SetConfig+0x298>)
 8008866:	f7f9 f911 	bl	8001a8c <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	691b      	ldr	r3, [r3, #16]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00e      	beq.n	8008890 <UART_SetConfig+0xb8>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800887a:	d009      	beq.n	8008890 <UART_SetConfig+0xb8>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008884:	d004      	beq.n	8008890 <UART_SetConfig+0xb8>
 8008886:	f640 3164 	movw	r1, #2916	@ 0xb64
 800888a:	4879      	ldr	r0, [pc, #484]	@ (8008a70 <UART_SetConfig+0x298>)
 800888c:	f7f9 f8fe 	bl	8001a8c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	695b      	ldr	r3, [r3, #20]
 8008894:	f023 030c 	bic.w	r3, r3, #12
 8008898:	2b00      	cmp	r3, #0
 800889a:	d103      	bne.n	80088a4 <UART_SetConfig+0xcc>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	695b      	ldr	r3, [r3, #20]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d104      	bne.n	80088ae <UART_SetConfig+0xd6>
 80088a4:	f640 3165 	movw	r1, #2917	@ 0xb65
 80088a8:	4871      	ldr	r0, [pc, #452]	@ (8008a70 <UART_SetConfig+0x298>)
 80088aa:	f7f9 f8ef 	bl	8001a8c <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d013      	beq.n	80088de <UART_SetConfig+0x106>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088be:	d00e      	beq.n	80088de <UART_SetConfig+0x106>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088c8:	d009      	beq.n	80088de <UART_SetConfig+0x106>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	699b      	ldr	r3, [r3, #24]
 80088ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088d2:	d004      	beq.n	80088de <UART_SetConfig+0x106>
 80088d4:	f640 3166 	movw	r1, #2918	@ 0xb66
 80088d8:	4865      	ldr	r0, [pc, #404]	@ (8008a70 <UART_SetConfig+0x298>)
 80088da:	f7f9 f8d7 	bl	8001a8c <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	69db      	ldr	r3, [r3, #28]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d009      	beq.n	80088fa <UART_SetConfig+0x122>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	69db      	ldr	r3, [r3, #28]
 80088ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088ee:	d004      	beq.n	80088fa <UART_SetConfig+0x122>
 80088f0:	f640 3167 	movw	r1, #2919	@ 0xb67
 80088f4:	485e      	ldr	r0, [pc, #376]	@ (8008a70 <UART_SetConfig+0x298>)
 80088f6:	f7f9 f8c9 	bl	8001a8c <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	689a      	ldr	r2, [r3, #8]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	431a      	orrs	r2, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	695b      	ldr	r3, [r3, #20]
 8008908:	431a      	orrs	r2, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	69db      	ldr	r3, [r3, #28]
 800890e:	4313      	orrs	r3, r2
 8008910:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	4b56      	ldr	r3, [pc, #344]	@ (8008a74 <UART_SetConfig+0x29c>)
 800891a:	4013      	ands	r3, r2
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	6812      	ldr	r2, [r2, #0]
 8008920:	6979      	ldr	r1, [r7, #20]
 8008922:	430b      	orrs	r3, r1
 8008924:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	68da      	ldr	r2, [r3, #12]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	430a      	orrs	r2, r1
 800893a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	699b      	ldr	r3, [r3, #24]
 8008940:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a1b      	ldr	r3, [r3, #32]
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	4313      	orrs	r3, r2
 800894a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	430a      	orrs	r2, r1
 800895e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a44      	ldr	r2, [pc, #272]	@ (8008a78 <UART_SetConfig+0x2a0>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d121      	bne.n	80089ae <UART_SetConfig+0x1d6>
 800896a:	4b44      	ldr	r3, [pc, #272]	@ (8008a7c <UART_SetConfig+0x2a4>)
 800896c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008970:	f003 0303 	and.w	r3, r3, #3
 8008974:	2b03      	cmp	r3, #3
 8008976:	d817      	bhi.n	80089a8 <UART_SetConfig+0x1d0>
 8008978:	a201      	add	r2, pc, #4	@ (adr r2, 8008980 <UART_SetConfig+0x1a8>)
 800897a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800897e:	bf00      	nop
 8008980:	08008991 	.word	0x08008991
 8008984:	0800899d 	.word	0x0800899d
 8008988:	08008997 	.word	0x08008997
 800898c:	080089a3 	.word	0x080089a3
 8008990:	2301      	movs	r3, #1
 8008992:	77fb      	strb	r3, [r7, #31]
 8008994:	e14c      	b.n	8008c30 <UART_SetConfig+0x458>
 8008996:	2302      	movs	r3, #2
 8008998:	77fb      	strb	r3, [r7, #31]
 800899a:	e149      	b.n	8008c30 <UART_SetConfig+0x458>
 800899c:	2304      	movs	r3, #4
 800899e:	77fb      	strb	r3, [r7, #31]
 80089a0:	e146      	b.n	8008c30 <UART_SetConfig+0x458>
 80089a2:	2308      	movs	r3, #8
 80089a4:	77fb      	strb	r3, [r7, #31]
 80089a6:	e143      	b.n	8008c30 <UART_SetConfig+0x458>
 80089a8:	2310      	movs	r3, #16
 80089aa:	77fb      	strb	r3, [r7, #31]
 80089ac:	e140      	b.n	8008c30 <UART_SetConfig+0x458>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a33      	ldr	r2, [pc, #204]	@ (8008a80 <UART_SetConfig+0x2a8>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d132      	bne.n	8008a1e <UART_SetConfig+0x246>
 80089b8:	4b30      	ldr	r3, [pc, #192]	@ (8008a7c <UART_SetConfig+0x2a4>)
 80089ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089be:	f003 030c 	and.w	r3, r3, #12
 80089c2:	2b0c      	cmp	r3, #12
 80089c4:	d828      	bhi.n	8008a18 <UART_SetConfig+0x240>
 80089c6:	a201      	add	r2, pc, #4	@ (adr r2, 80089cc <UART_SetConfig+0x1f4>)
 80089c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089cc:	08008a01 	.word	0x08008a01
 80089d0:	08008a19 	.word	0x08008a19
 80089d4:	08008a19 	.word	0x08008a19
 80089d8:	08008a19 	.word	0x08008a19
 80089dc:	08008a0d 	.word	0x08008a0d
 80089e0:	08008a19 	.word	0x08008a19
 80089e4:	08008a19 	.word	0x08008a19
 80089e8:	08008a19 	.word	0x08008a19
 80089ec:	08008a07 	.word	0x08008a07
 80089f0:	08008a19 	.word	0x08008a19
 80089f4:	08008a19 	.word	0x08008a19
 80089f8:	08008a19 	.word	0x08008a19
 80089fc:	08008a13 	.word	0x08008a13
 8008a00:	2300      	movs	r3, #0
 8008a02:	77fb      	strb	r3, [r7, #31]
 8008a04:	e114      	b.n	8008c30 <UART_SetConfig+0x458>
 8008a06:	2302      	movs	r3, #2
 8008a08:	77fb      	strb	r3, [r7, #31]
 8008a0a:	e111      	b.n	8008c30 <UART_SetConfig+0x458>
 8008a0c:	2304      	movs	r3, #4
 8008a0e:	77fb      	strb	r3, [r7, #31]
 8008a10:	e10e      	b.n	8008c30 <UART_SetConfig+0x458>
 8008a12:	2308      	movs	r3, #8
 8008a14:	77fb      	strb	r3, [r7, #31]
 8008a16:	e10b      	b.n	8008c30 <UART_SetConfig+0x458>
 8008a18:	2310      	movs	r3, #16
 8008a1a:	77fb      	strb	r3, [r7, #31]
 8008a1c:	e108      	b.n	8008c30 <UART_SetConfig+0x458>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a18      	ldr	r2, [pc, #96]	@ (8008a84 <UART_SetConfig+0x2ac>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d12f      	bne.n	8008a88 <UART_SetConfig+0x2b0>
 8008a28:	4b14      	ldr	r3, [pc, #80]	@ (8008a7c <UART_SetConfig+0x2a4>)
 8008a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a2e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008a32:	2b30      	cmp	r3, #48	@ 0x30
 8008a34:	d013      	beq.n	8008a5e <UART_SetConfig+0x286>
 8008a36:	2b30      	cmp	r3, #48	@ 0x30
 8008a38:	d814      	bhi.n	8008a64 <UART_SetConfig+0x28c>
 8008a3a:	2b20      	cmp	r3, #32
 8008a3c:	d009      	beq.n	8008a52 <UART_SetConfig+0x27a>
 8008a3e:	2b20      	cmp	r3, #32
 8008a40:	d810      	bhi.n	8008a64 <UART_SetConfig+0x28c>
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d002      	beq.n	8008a4c <UART_SetConfig+0x274>
 8008a46:	2b10      	cmp	r3, #16
 8008a48:	d006      	beq.n	8008a58 <UART_SetConfig+0x280>
 8008a4a:	e00b      	b.n	8008a64 <UART_SetConfig+0x28c>
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	77fb      	strb	r3, [r7, #31]
 8008a50:	e0ee      	b.n	8008c30 <UART_SetConfig+0x458>
 8008a52:	2302      	movs	r3, #2
 8008a54:	77fb      	strb	r3, [r7, #31]
 8008a56:	e0eb      	b.n	8008c30 <UART_SetConfig+0x458>
 8008a58:	2304      	movs	r3, #4
 8008a5a:	77fb      	strb	r3, [r7, #31]
 8008a5c:	e0e8      	b.n	8008c30 <UART_SetConfig+0x458>
 8008a5e:	2308      	movs	r3, #8
 8008a60:	77fb      	strb	r3, [r7, #31]
 8008a62:	e0e5      	b.n	8008c30 <UART_SetConfig+0x458>
 8008a64:	2310      	movs	r3, #16
 8008a66:	77fb      	strb	r3, [r7, #31]
 8008a68:	e0e2      	b.n	8008c30 <UART_SetConfig+0x458>
 8008a6a:	bf00      	nop
 8008a6c:	019bfcc0 	.word	0x019bfcc0
 8008a70:	08010c28 	.word	0x08010c28
 8008a74:	efff69f3 	.word	0xefff69f3
 8008a78:	40011000 	.word	0x40011000
 8008a7c:	40023800 	.word	0x40023800
 8008a80:	40004400 	.word	0x40004400
 8008a84:	40004800 	.word	0x40004800
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4aa5      	ldr	r2, [pc, #660]	@ (8008d24 <UART_SetConfig+0x54c>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d120      	bne.n	8008ad4 <UART_SetConfig+0x2fc>
 8008a92:	4ba5      	ldr	r3, [pc, #660]	@ (8008d28 <UART_SetConfig+0x550>)
 8008a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a98:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008a9c:	2bc0      	cmp	r3, #192	@ 0xc0
 8008a9e:	d013      	beq.n	8008ac8 <UART_SetConfig+0x2f0>
 8008aa0:	2bc0      	cmp	r3, #192	@ 0xc0
 8008aa2:	d814      	bhi.n	8008ace <UART_SetConfig+0x2f6>
 8008aa4:	2b80      	cmp	r3, #128	@ 0x80
 8008aa6:	d009      	beq.n	8008abc <UART_SetConfig+0x2e4>
 8008aa8:	2b80      	cmp	r3, #128	@ 0x80
 8008aaa:	d810      	bhi.n	8008ace <UART_SetConfig+0x2f6>
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d002      	beq.n	8008ab6 <UART_SetConfig+0x2de>
 8008ab0:	2b40      	cmp	r3, #64	@ 0x40
 8008ab2:	d006      	beq.n	8008ac2 <UART_SetConfig+0x2ea>
 8008ab4:	e00b      	b.n	8008ace <UART_SetConfig+0x2f6>
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	77fb      	strb	r3, [r7, #31]
 8008aba:	e0b9      	b.n	8008c30 <UART_SetConfig+0x458>
 8008abc:	2302      	movs	r3, #2
 8008abe:	77fb      	strb	r3, [r7, #31]
 8008ac0:	e0b6      	b.n	8008c30 <UART_SetConfig+0x458>
 8008ac2:	2304      	movs	r3, #4
 8008ac4:	77fb      	strb	r3, [r7, #31]
 8008ac6:	e0b3      	b.n	8008c30 <UART_SetConfig+0x458>
 8008ac8:	2308      	movs	r3, #8
 8008aca:	77fb      	strb	r3, [r7, #31]
 8008acc:	e0b0      	b.n	8008c30 <UART_SetConfig+0x458>
 8008ace:	2310      	movs	r3, #16
 8008ad0:	77fb      	strb	r3, [r7, #31]
 8008ad2:	e0ad      	b.n	8008c30 <UART_SetConfig+0x458>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a94      	ldr	r2, [pc, #592]	@ (8008d2c <UART_SetConfig+0x554>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d125      	bne.n	8008b2a <UART_SetConfig+0x352>
 8008ade:	4b92      	ldr	r3, [pc, #584]	@ (8008d28 <UART_SetConfig+0x550>)
 8008ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ae4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ae8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008aec:	d017      	beq.n	8008b1e <UART_SetConfig+0x346>
 8008aee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008af2:	d817      	bhi.n	8008b24 <UART_SetConfig+0x34c>
 8008af4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008af8:	d00b      	beq.n	8008b12 <UART_SetConfig+0x33a>
 8008afa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008afe:	d811      	bhi.n	8008b24 <UART_SetConfig+0x34c>
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d003      	beq.n	8008b0c <UART_SetConfig+0x334>
 8008b04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b08:	d006      	beq.n	8008b18 <UART_SetConfig+0x340>
 8008b0a:	e00b      	b.n	8008b24 <UART_SetConfig+0x34c>
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	77fb      	strb	r3, [r7, #31]
 8008b10:	e08e      	b.n	8008c30 <UART_SetConfig+0x458>
 8008b12:	2302      	movs	r3, #2
 8008b14:	77fb      	strb	r3, [r7, #31]
 8008b16:	e08b      	b.n	8008c30 <UART_SetConfig+0x458>
 8008b18:	2304      	movs	r3, #4
 8008b1a:	77fb      	strb	r3, [r7, #31]
 8008b1c:	e088      	b.n	8008c30 <UART_SetConfig+0x458>
 8008b1e:	2308      	movs	r3, #8
 8008b20:	77fb      	strb	r3, [r7, #31]
 8008b22:	e085      	b.n	8008c30 <UART_SetConfig+0x458>
 8008b24:	2310      	movs	r3, #16
 8008b26:	77fb      	strb	r3, [r7, #31]
 8008b28:	e082      	b.n	8008c30 <UART_SetConfig+0x458>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a80      	ldr	r2, [pc, #512]	@ (8008d30 <UART_SetConfig+0x558>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d125      	bne.n	8008b80 <UART_SetConfig+0x3a8>
 8008b34:	4b7c      	ldr	r3, [pc, #496]	@ (8008d28 <UART_SetConfig+0x550>)
 8008b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b3a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008b3e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b42:	d017      	beq.n	8008b74 <UART_SetConfig+0x39c>
 8008b44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b48:	d817      	bhi.n	8008b7a <UART_SetConfig+0x3a2>
 8008b4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b4e:	d00b      	beq.n	8008b68 <UART_SetConfig+0x390>
 8008b50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b54:	d811      	bhi.n	8008b7a <UART_SetConfig+0x3a2>
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d003      	beq.n	8008b62 <UART_SetConfig+0x38a>
 8008b5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b5e:	d006      	beq.n	8008b6e <UART_SetConfig+0x396>
 8008b60:	e00b      	b.n	8008b7a <UART_SetConfig+0x3a2>
 8008b62:	2301      	movs	r3, #1
 8008b64:	77fb      	strb	r3, [r7, #31]
 8008b66:	e063      	b.n	8008c30 <UART_SetConfig+0x458>
 8008b68:	2302      	movs	r3, #2
 8008b6a:	77fb      	strb	r3, [r7, #31]
 8008b6c:	e060      	b.n	8008c30 <UART_SetConfig+0x458>
 8008b6e:	2304      	movs	r3, #4
 8008b70:	77fb      	strb	r3, [r7, #31]
 8008b72:	e05d      	b.n	8008c30 <UART_SetConfig+0x458>
 8008b74:	2308      	movs	r3, #8
 8008b76:	77fb      	strb	r3, [r7, #31]
 8008b78:	e05a      	b.n	8008c30 <UART_SetConfig+0x458>
 8008b7a:	2310      	movs	r3, #16
 8008b7c:	77fb      	strb	r3, [r7, #31]
 8008b7e:	e057      	b.n	8008c30 <UART_SetConfig+0x458>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a6b      	ldr	r2, [pc, #428]	@ (8008d34 <UART_SetConfig+0x55c>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d125      	bne.n	8008bd6 <UART_SetConfig+0x3fe>
 8008b8a:	4b67      	ldr	r3, [pc, #412]	@ (8008d28 <UART_SetConfig+0x550>)
 8008b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b90:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008b94:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b98:	d017      	beq.n	8008bca <UART_SetConfig+0x3f2>
 8008b9a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b9e:	d817      	bhi.n	8008bd0 <UART_SetConfig+0x3f8>
 8008ba0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ba4:	d00b      	beq.n	8008bbe <UART_SetConfig+0x3e6>
 8008ba6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008baa:	d811      	bhi.n	8008bd0 <UART_SetConfig+0x3f8>
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d003      	beq.n	8008bb8 <UART_SetConfig+0x3e0>
 8008bb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bb4:	d006      	beq.n	8008bc4 <UART_SetConfig+0x3ec>
 8008bb6:	e00b      	b.n	8008bd0 <UART_SetConfig+0x3f8>
 8008bb8:	2300      	movs	r3, #0
 8008bba:	77fb      	strb	r3, [r7, #31]
 8008bbc:	e038      	b.n	8008c30 <UART_SetConfig+0x458>
 8008bbe:	2302      	movs	r3, #2
 8008bc0:	77fb      	strb	r3, [r7, #31]
 8008bc2:	e035      	b.n	8008c30 <UART_SetConfig+0x458>
 8008bc4:	2304      	movs	r3, #4
 8008bc6:	77fb      	strb	r3, [r7, #31]
 8008bc8:	e032      	b.n	8008c30 <UART_SetConfig+0x458>
 8008bca:	2308      	movs	r3, #8
 8008bcc:	77fb      	strb	r3, [r7, #31]
 8008bce:	e02f      	b.n	8008c30 <UART_SetConfig+0x458>
 8008bd0:	2310      	movs	r3, #16
 8008bd2:	77fb      	strb	r3, [r7, #31]
 8008bd4:	e02c      	b.n	8008c30 <UART_SetConfig+0x458>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a57      	ldr	r2, [pc, #348]	@ (8008d38 <UART_SetConfig+0x560>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d125      	bne.n	8008c2c <UART_SetConfig+0x454>
 8008be0:	4b51      	ldr	r3, [pc, #324]	@ (8008d28 <UART_SetConfig+0x550>)
 8008be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008be6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008bea:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008bee:	d017      	beq.n	8008c20 <UART_SetConfig+0x448>
 8008bf0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008bf4:	d817      	bhi.n	8008c26 <UART_SetConfig+0x44e>
 8008bf6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008bfa:	d00b      	beq.n	8008c14 <UART_SetConfig+0x43c>
 8008bfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c00:	d811      	bhi.n	8008c26 <UART_SetConfig+0x44e>
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d003      	beq.n	8008c0e <UART_SetConfig+0x436>
 8008c06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c0a:	d006      	beq.n	8008c1a <UART_SetConfig+0x442>
 8008c0c:	e00b      	b.n	8008c26 <UART_SetConfig+0x44e>
 8008c0e:	2300      	movs	r3, #0
 8008c10:	77fb      	strb	r3, [r7, #31]
 8008c12:	e00d      	b.n	8008c30 <UART_SetConfig+0x458>
 8008c14:	2302      	movs	r3, #2
 8008c16:	77fb      	strb	r3, [r7, #31]
 8008c18:	e00a      	b.n	8008c30 <UART_SetConfig+0x458>
 8008c1a:	2304      	movs	r3, #4
 8008c1c:	77fb      	strb	r3, [r7, #31]
 8008c1e:	e007      	b.n	8008c30 <UART_SetConfig+0x458>
 8008c20:	2308      	movs	r3, #8
 8008c22:	77fb      	strb	r3, [r7, #31]
 8008c24:	e004      	b.n	8008c30 <UART_SetConfig+0x458>
 8008c26:	2310      	movs	r3, #16
 8008c28:	77fb      	strb	r3, [r7, #31]
 8008c2a:	e001      	b.n	8008c30 <UART_SetConfig+0x458>
 8008c2c:	2310      	movs	r3, #16
 8008c2e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	69db      	ldr	r3, [r3, #28]
 8008c34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c38:	d15c      	bne.n	8008cf4 <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 8008c3a:	7ffb      	ldrb	r3, [r7, #31]
 8008c3c:	2b08      	cmp	r3, #8
 8008c3e:	d828      	bhi.n	8008c92 <UART_SetConfig+0x4ba>
 8008c40:	a201      	add	r2, pc, #4	@ (adr r2, 8008c48 <UART_SetConfig+0x470>)
 8008c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c46:	bf00      	nop
 8008c48:	08008c6d 	.word	0x08008c6d
 8008c4c:	08008c75 	.word	0x08008c75
 8008c50:	08008c7d 	.word	0x08008c7d
 8008c54:	08008c93 	.word	0x08008c93
 8008c58:	08008c83 	.word	0x08008c83
 8008c5c:	08008c93 	.word	0x08008c93
 8008c60:	08008c93 	.word	0x08008c93
 8008c64:	08008c93 	.word	0x08008c93
 8008c68:	08008c8b 	.word	0x08008c8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c6c:	f7fb f872 	bl	8003d54 <HAL_RCC_GetPCLK1Freq>
 8008c70:	61b8      	str	r0, [r7, #24]
        break;
 8008c72:	e013      	b.n	8008c9c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c74:	f7fb f882 	bl	8003d7c <HAL_RCC_GetPCLK2Freq>
 8008c78:	61b8      	str	r0, [r7, #24]
        break;
 8008c7a:	e00f      	b.n	8008c9c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c7c:	4b2f      	ldr	r3, [pc, #188]	@ (8008d3c <UART_SetConfig+0x564>)
 8008c7e:	61bb      	str	r3, [r7, #24]
        break;
 8008c80:	e00c      	b.n	8008c9c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c82:	f7fa ff95 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 8008c86:	61b8      	str	r0, [r7, #24]
        break;
 8008c88:	e008      	b.n	8008c9c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c8e:	61bb      	str	r3, [r7, #24]
        break;
 8008c90:	e004      	b.n	8008c9c <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8008c92:	2300      	movs	r3, #0
 8008c94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008c96:	2301      	movs	r3, #1
 8008c98:	77bb      	strb	r3, [r7, #30]
        break;
 8008c9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f000 8082 	beq.w	8008da8 <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008ca4:	69bb      	ldr	r3, [r7, #24]
 8008ca6:	005a      	lsls	r2, r3, #1
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	085b      	lsrs	r3, r3, #1
 8008cae:	441a      	add	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cb8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	2b0f      	cmp	r3, #15
 8008cbe:	d916      	bls.n	8008cee <UART_SetConfig+0x516>
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cc6:	d212      	bcs.n	8008cee <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	f023 030f 	bic.w	r3, r3, #15
 8008cd0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	085b      	lsrs	r3, r3, #1
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	f003 0307 	and.w	r3, r3, #7
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	89fb      	ldrh	r3, [r7, #14]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	89fa      	ldrh	r2, [r7, #14]
 8008cea:	60da      	str	r2, [r3, #12]
 8008cec:	e05c      	b.n	8008da8 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	77bb      	strb	r3, [r7, #30]
 8008cf2:	e059      	b.n	8008da8 <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008cf4:	7ffb      	ldrb	r3, [r7, #31]
 8008cf6:	2b08      	cmp	r3, #8
 8008cf8:	d835      	bhi.n	8008d66 <UART_SetConfig+0x58e>
 8008cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8008d00 <UART_SetConfig+0x528>)
 8008cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d00:	08008d41 	.word	0x08008d41
 8008d04:	08008d49 	.word	0x08008d49
 8008d08:	08008d51 	.word	0x08008d51
 8008d0c:	08008d67 	.word	0x08008d67
 8008d10:	08008d57 	.word	0x08008d57
 8008d14:	08008d67 	.word	0x08008d67
 8008d18:	08008d67 	.word	0x08008d67
 8008d1c:	08008d67 	.word	0x08008d67
 8008d20:	08008d5f 	.word	0x08008d5f
 8008d24:	40004c00 	.word	0x40004c00
 8008d28:	40023800 	.word	0x40023800
 8008d2c:	40005000 	.word	0x40005000
 8008d30:	40011400 	.word	0x40011400
 8008d34:	40007800 	.word	0x40007800
 8008d38:	40007c00 	.word	0x40007c00
 8008d3c:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d40:	f7fb f808 	bl	8003d54 <HAL_RCC_GetPCLK1Freq>
 8008d44:	61b8      	str	r0, [r7, #24]
        break;
 8008d46:	e013      	b.n	8008d70 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d48:	f7fb f818 	bl	8003d7c <HAL_RCC_GetPCLK2Freq>
 8008d4c:	61b8      	str	r0, [r7, #24]
        break;
 8008d4e:	e00f      	b.n	8008d70 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d50:	4b1b      	ldr	r3, [pc, #108]	@ (8008dc0 <UART_SetConfig+0x5e8>)
 8008d52:	61bb      	str	r3, [r7, #24]
        break;
 8008d54:	e00c      	b.n	8008d70 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d56:	f7fa ff2b 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 8008d5a:	61b8      	str	r0, [r7, #24]
        break;
 8008d5c:	e008      	b.n	8008d70 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d62:	61bb      	str	r3, [r7, #24]
        break;
 8008d64:	e004      	b.n	8008d70 <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 8008d66:	2300      	movs	r3, #0
 8008d68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	77bb      	strb	r3, [r7, #30]
        break;
 8008d6e:	bf00      	nop
    }

    if (pclk != 0U)
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d018      	beq.n	8008da8 <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	085a      	lsrs	r2, r3, #1
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	441a      	add	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d88:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	2b0f      	cmp	r3, #15
 8008d8e:	d909      	bls.n	8008da4 <UART_SetConfig+0x5cc>
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d96:	d205      	bcs.n	8008da4 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	b29a      	uxth	r2, r3
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	60da      	str	r2, [r3, #12]
 8008da2:	e001      	b.n	8008da8 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008db4:	7fbb      	ldrb	r3, [r7, #30]
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3720      	adds	r7, #32
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	00f42400 	.word	0x00f42400

08008dc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dd0:	2bff      	cmp	r3, #255	@ 0xff
 8008dd2:	d904      	bls.n	8008dde <UART_AdvFeatureConfig+0x1a>
 8008dd4:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 8008dd8:	488e      	ldr	r0, [pc, #568]	@ (8009014 <UART_AdvFeatureConfig+0x250>)
 8008dda:	f7f8 fe57 	bl	8001a8c <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008de2:	f003 0308 	and.w	r3, r3, #8
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d018      	beq.n	8008e1c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d009      	beq.n	8008e06 <UART_AdvFeatureConfig+0x42>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008df6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008dfa:	d004      	beq.n	8008e06 <UART_AdvFeatureConfig+0x42>
 8008dfc:	f640 31ed 	movw	r1, #3053	@ 0xbed
 8008e00:	4884      	ldr	r0, [pc, #528]	@ (8009014 <UART_AdvFeatureConfig+0x250>)
 8008e02:	f7f8 fe43 	bl	8001a8c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	430a      	orrs	r2, r1
 8008e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e20:	f003 0301 	and.w	r3, r3, #1
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d018      	beq.n	8008e5a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d009      	beq.n	8008e44 <UART_AdvFeatureConfig+0x80>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e38:	d004      	beq.n	8008e44 <UART_AdvFeatureConfig+0x80>
 8008e3a:	f640 31f4 	movw	r1, #3060	@ 0xbf4
 8008e3e:	4875      	ldr	r0, [pc, #468]	@ (8009014 <UART_AdvFeatureConfig+0x250>)
 8008e40:	f7f8 fe24 	bl	8001a8c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	430a      	orrs	r2, r1
 8008e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e5e:	f003 0302 	and.w	r3, r3, #2
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d018      	beq.n	8008e98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d009      	beq.n	8008e82 <UART_AdvFeatureConfig+0xbe>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e76:	d004      	beq.n	8008e82 <UART_AdvFeatureConfig+0xbe>
 8008e78:	f640 31fb 	movw	r1, #3067	@ 0xbfb
 8008e7c:	4865      	ldr	r0, [pc, #404]	@ (8009014 <UART_AdvFeatureConfig+0x250>)
 8008e7e:	f7f8 fe05 	bl	8001a8c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	430a      	orrs	r2, r1
 8008e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e9c:	f003 0304 	and.w	r3, r3, #4
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d018      	beq.n	8008ed6 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d009      	beq.n	8008ec0 <UART_AdvFeatureConfig+0xfc>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eb0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008eb4:	d004      	beq.n	8008ec0 <UART_AdvFeatureConfig+0xfc>
 8008eb6:	f640 4102 	movw	r1, #3074	@ 0xc02
 8008eba:	4856      	ldr	r0, [pc, #344]	@ (8009014 <UART_AdvFeatureConfig+0x250>)
 8008ebc:	f7f8 fde6 	bl	8001a8c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	430a      	orrs	r2, r1
 8008ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eda:	f003 0310 	and.w	r3, r3, #16
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d018      	beq.n	8008f14 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d009      	beq.n	8008efe <UART_AdvFeatureConfig+0x13a>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ef2:	d004      	beq.n	8008efe <UART_AdvFeatureConfig+0x13a>
 8008ef4:	f640 4109 	movw	r1, #3081	@ 0xc09
 8008ef8:	4846      	ldr	r0, [pc, #280]	@ (8009014 <UART_AdvFeatureConfig+0x250>)
 8008efa:	f7f8 fdc7 	bl	8001a8c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	430a      	orrs	r2, r1
 8008f12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f18:	f003 0320 	and.w	r3, r3, #32
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d018      	beq.n	8008f52 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d009      	beq.n	8008f3c <UART_AdvFeatureConfig+0x178>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f30:	d004      	beq.n	8008f3c <UART_AdvFeatureConfig+0x178>
 8008f32:	f44f 6141 	mov.w	r1, #3088	@ 0xc10
 8008f36:	4837      	ldr	r0, [pc, #220]	@ (8009014 <UART_AdvFeatureConfig+0x250>)
 8008f38:	f7f8 fda8 	bl	8001a8c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	430a      	orrs	r2, r1
 8008f50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d064      	beq.n	8009028 <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a2d      	ldr	r2, [pc, #180]	@ (8009018 <UART_AdvFeatureConfig+0x254>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d013      	beq.n	8008f90 <UART_AdvFeatureConfig+0x1cc>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a2b      	ldr	r2, [pc, #172]	@ (800901c <UART_AdvFeatureConfig+0x258>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d00e      	beq.n	8008f90 <UART_AdvFeatureConfig+0x1cc>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a2a      	ldr	r2, [pc, #168]	@ (8009020 <UART_AdvFeatureConfig+0x25c>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d009      	beq.n	8008f90 <UART_AdvFeatureConfig+0x1cc>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a28      	ldr	r2, [pc, #160]	@ (8009024 <UART_AdvFeatureConfig+0x260>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d004      	beq.n	8008f90 <UART_AdvFeatureConfig+0x1cc>
 8008f86:	f640 4117 	movw	r1, #3095	@ 0xc17
 8008f8a:	4822      	ldr	r0, [pc, #136]	@ (8009014 <UART_AdvFeatureConfig+0x250>)
 8008f8c:	f7f8 fd7e 	bl	8001a8c <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d009      	beq.n	8008fac <UART_AdvFeatureConfig+0x1e8>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008fa0:	d004      	beq.n	8008fac <UART_AdvFeatureConfig+0x1e8>
 8008fa2:	f640 4118 	movw	r1, #3096	@ 0xc18
 8008fa6:	481b      	ldr	r0, [pc, #108]	@ (8009014 <UART_AdvFeatureConfig+0x250>)
 8008fa8:	f7f8 fd70 	bl	8001a8c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	430a      	orrs	r2, r1
 8008fc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008fca:	d12d      	bne.n	8009028 <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d013      	beq.n	8008ffc <UART_AdvFeatureConfig+0x238>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fd8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008fdc:	d00e      	beq.n	8008ffc <UART_AdvFeatureConfig+0x238>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fe2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008fe6:	d009      	beq.n	8008ffc <UART_AdvFeatureConfig+0x238>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fec:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008ff0:	d004      	beq.n	8008ffc <UART_AdvFeatureConfig+0x238>
 8008ff2:	f640 411d 	movw	r1, #3101	@ 0xc1d
 8008ff6:	4807      	ldr	r0, [pc, #28]	@ (8009014 <UART_AdvFeatureConfig+0x250>)
 8008ff8:	f7f8 fd48 	bl	8001a8c <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	430a      	orrs	r2, r1
 8009010:	605a      	str	r2, [r3, #4]
 8009012:	e009      	b.n	8009028 <UART_AdvFeatureConfig+0x264>
 8009014:	08010c28 	.word	0x08010c28
 8009018:	40011000 	.word	0x40011000
 800901c:	40004400 	.word	0x40004400
 8009020:	40004800 	.word	0x40004800
 8009024:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800902c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009030:	2b00      	cmp	r3, #0
 8009032:	d018      	beq.n	8009066 <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009038:	2b00      	cmp	r3, #0
 800903a:	d009      	beq.n	8009050 <UART_AdvFeatureConfig+0x28c>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009040:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009044:	d004      	beq.n	8009050 <UART_AdvFeatureConfig+0x28c>
 8009046:	f640 4125 	movw	r1, #3109	@ 0xc25
 800904a:	4809      	ldr	r0, [pc, #36]	@ (8009070 <UART_AdvFeatureConfig+0x2ac>)
 800904c:	f7f8 fd1e 	bl	8001a8c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	430a      	orrs	r2, r1
 8009064:	605a      	str	r2, [r3, #4]
  }
}
 8009066:	bf00      	nop
 8009068:	3708      	adds	r7, #8
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	08010c28 	.word	0x08010c28

08009074 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b08c      	sub	sp, #48	@ 0x30
 8009078:	af02      	add	r7, sp, #8
 800907a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009084:	f7f9 f9fa 	bl	800247c <HAL_GetTick>
 8009088:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 0308 	and.w	r3, r3, #8
 8009094:	2b08      	cmp	r3, #8
 8009096:	d12e      	bne.n	80090f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009098:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800909c:	9300      	str	r3, [sp, #0]
 800909e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a0:	2200      	movs	r2, #0
 80090a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f83b 	bl	8009122 <UART_WaitOnFlagUntilTimeout>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d021      	beq.n	80090f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	e853 3f00 	ldrex	r3, [r3]
 80090be:	60fb      	str	r3, [r7, #12]
   return(result);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090c6:	623b      	str	r3, [r7, #32]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	461a      	mov	r2, r3
 80090ce:	6a3b      	ldr	r3, [r7, #32]
 80090d0:	61fb      	str	r3, [r7, #28]
 80090d2:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d4:	69b9      	ldr	r1, [r7, #24]
 80090d6:	69fa      	ldr	r2, [r7, #28]
 80090d8:	e841 2300 	strex	r3, r2, [r1]
 80090dc:	617b      	str	r3, [r7, #20]
   return(result);
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d1e6      	bne.n	80090b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2220      	movs	r2, #32
 80090e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090f2:	2303      	movs	r3, #3
 80090f4:	e011      	b.n	800911a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2220      	movs	r2, #32
 80090fa:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2220      	movs	r2, #32
 8009100:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009118:	2300      	movs	r3, #0
}
 800911a:	4618      	mov	r0, r3
 800911c:	3728      	adds	r7, #40	@ 0x28
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b084      	sub	sp, #16
 8009126:	af00      	add	r7, sp, #0
 8009128:	60f8      	str	r0, [r7, #12]
 800912a:	60b9      	str	r1, [r7, #8]
 800912c:	603b      	str	r3, [r7, #0]
 800912e:	4613      	mov	r3, r2
 8009130:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009132:	e04f      	b.n	80091d4 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009134:	69bb      	ldr	r3, [r7, #24]
 8009136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800913a:	d04b      	beq.n	80091d4 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800913c:	f7f9 f99e 	bl	800247c <HAL_GetTick>
 8009140:	4602      	mov	r2, r0
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	1ad3      	subs	r3, r2, r3
 8009146:	69ba      	ldr	r2, [r7, #24]
 8009148:	429a      	cmp	r2, r3
 800914a:	d302      	bcc.n	8009152 <UART_WaitOnFlagUntilTimeout+0x30>
 800914c:	69bb      	ldr	r3, [r7, #24]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d101      	bne.n	8009156 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009152:	2303      	movs	r3, #3
 8009154:	e04e      	b.n	80091f4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f003 0304 	and.w	r3, r3, #4
 8009160:	2b00      	cmp	r3, #0
 8009162:	d037      	beq.n	80091d4 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	2b80      	cmp	r3, #128	@ 0x80
 8009168:	d034      	beq.n	80091d4 <UART_WaitOnFlagUntilTimeout+0xb2>
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	2b40      	cmp	r3, #64	@ 0x40
 800916e:	d031      	beq.n	80091d4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	69db      	ldr	r3, [r3, #28]
 8009176:	f003 0308 	and.w	r3, r3, #8
 800917a:	2b08      	cmp	r3, #8
 800917c:	d110      	bne.n	80091a0 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2208      	movs	r2, #8
 8009184:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	f000 f838 	bl	80091fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2208      	movs	r2, #8
 8009190:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2200      	movs	r2, #0
 8009198:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800919c:	2301      	movs	r3, #1
 800919e:	e029      	b.n	80091f4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	69db      	ldr	r3, [r3, #28]
 80091a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80091aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091ae:	d111      	bne.n	80091d4 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80091b8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80091ba:	68f8      	ldr	r0, [r7, #12]
 80091bc:	f000 f81e 	bl	80091fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2220      	movs	r2, #32
 80091c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80091d0:	2303      	movs	r3, #3
 80091d2:	e00f      	b.n	80091f4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	69da      	ldr	r2, [r3, #28]
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	4013      	ands	r3, r2
 80091de:	68ba      	ldr	r2, [r7, #8]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	bf0c      	ite	eq
 80091e4:	2301      	moveq	r3, #1
 80091e6:	2300      	movne	r3, #0
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	461a      	mov	r2, r3
 80091ec:	79fb      	ldrb	r3, [r7, #7]
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d0a0      	beq.n	8009134 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80091f2:	2300      	movs	r3, #0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3710      	adds	r7, #16
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b095      	sub	sp, #84	@ 0x54
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800920c:	e853 3f00 	ldrex	r3, [r3]
 8009210:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009214:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009218:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	461a      	mov	r2, r3
 8009220:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009222:	643b      	str	r3, [r7, #64]	@ 0x40
 8009224:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009226:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009228:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800922a:	e841 2300 	strex	r3, r2, [r1]
 800922e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009232:	2b00      	cmp	r3, #0
 8009234:	d1e6      	bne.n	8009204 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	3308      	adds	r3, #8
 800923c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923e:	6a3b      	ldr	r3, [r7, #32]
 8009240:	e853 3f00 	ldrex	r3, [r3]
 8009244:	61fb      	str	r3, [r7, #28]
   return(result);
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	f023 0301 	bic.w	r3, r3, #1
 800924c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	3308      	adds	r3, #8
 8009254:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009256:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009258:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800925c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800925e:	e841 2300 	strex	r3, r2, [r1]
 8009262:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1e5      	bne.n	8009236 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800926e:	2b01      	cmp	r3, #1
 8009270:	d118      	bne.n	80092a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	e853 3f00 	ldrex	r3, [r3]
 800927e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	f023 0310 	bic.w	r3, r3, #16
 8009286:	647b      	str	r3, [r7, #68]	@ 0x44
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	461a      	mov	r2, r3
 800928e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009290:	61bb      	str	r3, [r7, #24]
 8009292:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009294:	6979      	ldr	r1, [r7, #20]
 8009296:	69ba      	ldr	r2, [r7, #24]
 8009298:	e841 2300 	strex	r3, r2, [r1]
 800929c:	613b      	str	r3, [r7, #16]
   return(result);
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1e6      	bne.n	8009272 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2220      	movs	r2, #32
 80092a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80092b8:	bf00      	nop
 80092ba:	3754      	adds	r7, #84	@ 0x54
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f103 0208 	add.w	r2, r3, #8
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f04f 32ff 	mov.w	r2, #4294967295
 80092dc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f103 0208 	add.w	r2, r3, #8
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f103 0208 	add.w	r2, r3, #8
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2200      	movs	r2, #0
 80092f6:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 80092f8:	bf00      	nop
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8009312:	bf00      	nop
 8009314:	370c      	adds	r7, #12
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr

0800931e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800931e:	b480      	push	{r7}
 8009320:	b085      	sub	sp, #20
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
 8009326:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009334:	d103      	bne.n	800933e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	60fb      	str	r3, [r7, #12]
 800933c:	e00c      	b.n	8009358 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	3308      	adds	r3, #8
 8009342:	60fb      	str	r3, [r7, #12]
 8009344:	e002      	b.n	800934c <vListInsert+0x2e>
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	60fb      	str	r3, [r7, #12]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68ba      	ldr	r2, [r7, #8]
 8009354:	429a      	cmp	r2, r3
 8009356:	d2f6      	bcs.n	8009346 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	685a      	ldr	r2, [r3, #4]
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	683a      	ldr	r2, [r7, #0]
 8009366:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	68fa      	ldr	r2, [r7, #12]
 800936c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	683a      	ldr	r2, [r7, #0]
 8009372:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	1c5a      	adds	r2, r3, #1
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8009384:	bf00      	nop
 8009386:	3714      	adds	r7, #20
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr

08009390 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009390:	b480      	push	{r7}
 8009392:	b085      	sub	sp, #20
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	6892      	ldr	r2, [r2, #8]
 80093a6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	6852      	ldr	r2, [r2, #4]
 80093b0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d103      	bne.n	80093c4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	689a      	ldr	r2, [r3, #8]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	1e5a      	subs	r2, r3, #1
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3714      	adds	r7, #20
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b086      	sub	sp, #24
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80093ee:	2301      	movs	r3, #1
 80093f0:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d110      	bne.n	800941e <xQueueGenericReset+0x3a>
    __asm volatile
 80093fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009400:	b672      	cpsid	i
 8009402:	f383 8811 	msr	BASEPRI, r3
 8009406:	f3bf 8f6f 	isb	sy
 800940a:	f3bf 8f4f 	dsb	sy
 800940e:	b662      	cpsie	i
 8009410:	60fb      	str	r3, [r7, #12]
}
 8009412:	bf00      	nop
 8009414:	f240 1137 	movw	r1, #311	@ 0x137
 8009418:	483f      	ldr	r0, [pc, #252]	@ (8009518 <xQueueGenericReset+0x134>)
 800941a:	f7f8 fa81 	bl	8001920 <vAssertCalled>

    if( ( pxQueue != NULL ) &&
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d05d      	beq.n	80094e0 <xQueueGenericReset+0xfc>
        ( pxQueue->uxLength >= 1U ) &&
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8009428:	2b00      	cmp	r3, #0
 800942a:	d059      	beq.n	80094e0 <xQueueGenericReset+0xfc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009434:	2100      	movs	r1, #0
 8009436:	fba3 2302 	umull	r2, r3, r3, r2
 800943a:	2b00      	cmp	r3, #0
 800943c:	d000      	beq.n	8009440 <xQueueGenericReset+0x5c>
 800943e:	2101      	movs	r1, #1
 8009440:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8009442:	2b00      	cmp	r3, #0
 8009444:	d14c      	bne.n	80094e0 <xQueueGenericReset+0xfc>
    {
        taskENTER_CRITICAL();
 8009446:	f002 fceb 	bl	800be20 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009452:	6939      	ldr	r1, [r7, #16]
 8009454:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009456:	fb01 f303 	mul.w	r3, r1, r3
 800945a:	441a      	add	r2, r3
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	2200      	movs	r2, #0
 8009464:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009476:	3b01      	subs	r3, #1
 8009478:	6939      	ldr	r1, [r7, #16]
 800947a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800947c:	fb01 f303 	mul.w	r3, r1, r3
 8009480:	441a      	add	r2, r3
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	22ff      	movs	r2, #255	@ 0xff
 800948a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	22ff      	movs	r2, #255	@ 0xff
 8009492:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d114      	bne.n	80094c6 <xQueueGenericReset+0xe2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	691b      	ldr	r3, [r3, #16]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d01a      	beq.n	80094da <xQueueGenericReset+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	3310      	adds	r3, #16
 80094a8:	4618      	mov	r0, r3
 80094aa:	f001 fb9f 	bl	800abec <xTaskRemoveFromEventList>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d012      	beq.n	80094da <xQueueGenericReset+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80094b4:	4b19      	ldr	r3, [pc, #100]	@ (800951c <xQueueGenericReset+0x138>)
 80094b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094ba:	601a      	str	r2, [r3, #0]
 80094bc:	f3bf 8f4f 	dsb	sy
 80094c0:	f3bf 8f6f 	isb	sy
 80094c4:	e009      	b.n	80094da <xQueueGenericReset+0xf6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	3310      	adds	r3, #16
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7ff fefa 	bl	80092c4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	3324      	adds	r3, #36	@ 0x24
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7ff fef5 	bl	80092c4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80094da:	f002 fcd9 	bl	800be90 <vPortExitCritical>
 80094de:	e001      	b.n	80094e4 <xQueueGenericReset+0x100>
    }
    else
    {
        xReturn = pdFAIL;
 80094e0:	2300      	movs	r3, #0
 80094e2:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d110      	bne.n	800950c <xQueueGenericReset+0x128>
    __asm volatile
 80094ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ee:	b672      	cpsid	i
 80094f0:	f383 8811 	msr	BASEPRI, r3
 80094f4:	f3bf 8f6f 	isb	sy
 80094f8:	f3bf 8f4f 	dsb	sy
 80094fc:	b662      	cpsie	i
 80094fe:	60bb      	str	r3, [r7, #8]
}
 8009500:	bf00      	nop
 8009502:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8009506:	4804      	ldr	r0, [pc, #16]	@ (8009518 <xQueueGenericReset+0x134>)
 8009508:	f7f8 fa0a 	bl	8001920 <vAssertCalled>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 800950c:	697b      	ldr	r3, [r7, #20]
}
 800950e:	4618      	mov	r0, r3
 8009510:	3718      	adds	r7, #24
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	08010c64 	.word	0x08010c64
 800951c:	e000ed04 	.word	0xe000ed04

08009520 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8009520:	b580      	push	{r7, lr}
 8009522:	b08a      	sub	sp, #40	@ 0x28
 8009524:	af02      	add	r7, sp, #8
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	4613      	mov	r3, r2
 800952c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800952e:	2300      	movs	r3, #0
 8009530:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d02e      	beq.n	8009596 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8009538:	2100      	movs	r1, #0
 800953a:	68ba      	ldr	r2, [r7, #8]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	fba3 2302 	umull	r2, r3, r3, r2
 8009542:	2b00      	cmp	r3, #0
 8009544:	d000      	beq.n	8009548 <xQueueGenericCreate+0x28>
 8009546:	2101      	movs	r1, #1
 8009548:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800954a:	2b00      	cmp	r3, #0
 800954c:	d123      	bne.n	8009596 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	68ba      	ldr	r2, [r7, #8]
 8009552:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8009556:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800955a:	d81c      	bhi.n	8009596 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	68ba      	ldr	r2, [r7, #8]
 8009560:	fb02 f303 	mul.w	r3, r2, r3
 8009564:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	3350      	adds	r3, #80	@ 0x50
 800956a:	4618      	mov	r0, r3
 800956c:	f7f8 fcf8 	bl	8001f60 <pvPortMalloc>
 8009570:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d022      	beq.n	80095be <xQueueGenericCreate+0x9e>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	3350      	adds	r3, #80	@ 0x50
 8009580:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009582:	79fa      	ldrb	r2, [r7, #7]
 8009584:	69fb      	ldr	r3, [r7, #28]
 8009586:	9300      	str	r3, [sp, #0]
 8009588:	4613      	mov	r3, r2
 800958a:	697a      	ldr	r2, [r7, #20]
 800958c:	68b9      	ldr	r1, [r7, #8]
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	f000 f81c 	bl	80095cc <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8009594:	e013      	b.n	80095be <xQueueGenericCreate+0x9e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d110      	bne.n	80095be <xQueueGenericCreate+0x9e>
    __asm volatile
 800959c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a0:	b672      	cpsid	i
 80095a2:	f383 8811 	msr	BASEPRI, r3
 80095a6:	f3bf 8f6f 	isb	sy
 80095aa:	f3bf 8f4f 	dsb	sy
 80095ae:	b662      	cpsie	i
 80095b0:	613b      	str	r3, [r7, #16]
}
 80095b2:	bf00      	nop
 80095b4:	f240 212a 	movw	r1, #554	@ 0x22a
 80095b8:	4803      	ldr	r0, [pc, #12]	@ (80095c8 <xQueueGenericCreate+0xa8>)
 80095ba:	f7f8 f9b1 	bl	8001920 <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 80095be:	69fb      	ldr	r3, [r7, #28]
    }
 80095c0:	4618      	mov	r0, r3
 80095c2:	3720      	adds	r7, #32
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	08010c64 	.word	0x08010c64

080095cc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	607a      	str	r2, [r7, #4]
 80095d8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d103      	bne.n	80095e8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	69ba      	ldr	r2, [r7, #24]
 80095e4:	601a      	str	r2, [r3, #0]
 80095e6:	e002      	b.n	80095ee <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80095f4:	69bb      	ldr	r3, [r7, #24]
 80095f6:	68ba      	ldr	r2, [r7, #8]
 80095f8:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80095fa:	2101      	movs	r1, #1
 80095fc:	69b8      	ldr	r0, [r7, #24]
 80095fe:	f7ff fef1 	bl	80093e4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	78fa      	ldrb	r2, [r7, #3]
 8009606:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800960a:	bf00      	nop
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8009612:	b580      	push	{r7, lr}
 8009614:	b082      	sub	sp, #8
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d00e      	beq.n	800963e <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009632:	2300      	movs	r3, #0
 8009634:	2200      	movs	r2, #0
 8009636:	2100      	movs	r1, #0
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 f897 	bl	800976c <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 800963e:	bf00      	nop
 8009640:	3708      	adds	r7, #8
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8009646:	b580      	push	{r7, lr}
 8009648:	b086      	sub	sp, #24
 800964a:	af00      	add	r7, sp, #0
 800964c:	4603      	mov	r3, r0
 800964e:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009650:	2301      	movs	r3, #1
 8009652:	617b      	str	r3, [r7, #20]
 8009654:	2300      	movs	r3, #0
 8009656:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueCreateMutex( ucQueueType );

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009658:	79fb      	ldrb	r3, [r7, #7]
 800965a:	461a      	mov	r2, r3
 800965c:	6939      	ldr	r1, [r7, #16]
 800965e:	6978      	ldr	r0, [r7, #20]
 8009660:	f7ff ff5e 	bl	8009520 <xQueueGenericCreate>
 8009664:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009666:	68f8      	ldr	r0, [r7, #12]
 8009668:	f7ff ffd3 	bl	8009612 <prvInitialiseMutex>

        traceRETURN_xQueueCreateMutex( xNewQueue );

        return xNewQueue;
 800966c:	68fb      	ldr	r3, [r7, #12]
    }
 800966e:	4618      	mov	r0, r3
 8009670:	3718      	adds	r7, #24
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
	...

08009678 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
    {
 8009678:	b590      	push	{r4, r7, lr}
 800967a:	b087      	sub	sp, #28
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueGiveMutexRecursive( xMutex );

        configASSERT( pxMutex );
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d110      	bne.n	80096ac <xQueueGiveMutexRecursive+0x34>
    __asm volatile
 800968a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800968e:	b672      	cpsid	i
 8009690:	f383 8811 	msr	BASEPRI, r3
 8009694:	f3bf 8f6f 	isb	sy
 8009698:	f3bf 8f4f 	dsb	sy
 800969c:	b662      	cpsie	i
 800969e:	60fb      	str	r3, [r7, #12]
}
 80096a0:	bf00      	nop
 80096a2:	f240 21fb 	movw	r1, #763	@ 0x2fb
 80096a6:	4811      	ldr	r0, [pc, #68]	@ (80096ec <xQueueGiveMutexRecursive+0x74>)
 80096a8:	f7f8 f93a 	bl	8001920 <vAssertCalled>
         * change outside of this task.  If this task does not hold the mutex then
         * pxMutexHolder can never coincidentally equal the tasks handle, and as
         * this is the only condition we are interested in it does not matter if
         * pxMutexHolder is accessed simultaneously by another task.  Therefore no
         * mutual exclusion is required to test the pxMutexHolder variable. */
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	689c      	ldr	r4, [r3, #8]
 80096b0:	f001 fcc8 	bl	800b044 <xTaskGetCurrentTaskHandle>
 80096b4:	4603      	mov	r3, r0
 80096b6:	429c      	cmp	r4, r3
 80096b8:	d111      	bne.n	80096de <xQueueGiveMutexRecursive+0x66>
            /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
             * the task handle, therefore no underflow check is required.  Also,
             * uxRecursiveCallCount is only modified by the mutex holder, and as
             * there can only be one, no mutual exclusion is required to modify the
             * uxRecursiveCallCount member. */
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	68db      	ldr	r3, [r3, #12]
 80096be:	1e5a      	subs	r2, r3, #1
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	60da      	str	r2, [r3, #12]

            /* Has the recursive call count unwound to 0? */
            if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d105      	bne.n	80096d8 <xQueueGiveMutexRecursive+0x60>
            {
                /* Return the mutex.  This will automatically unblock any other
                 * task that might be waiting to access the mutex. */
                ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80096cc:	2300      	movs	r3, #0
 80096ce:	2200      	movs	r2, #0
 80096d0:	2100      	movs	r1, #0
 80096d2:	6938      	ldr	r0, [r7, #16]
 80096d4:	f000 f84a 	bl	800976c <xQueueGenericSend>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            xReturn = pdPASS;
 80096d8:	2301      	movs	r3, #1
 80096da:	617b      	str	r3, [r7, #20]
 80096dc:	e001      	b.n	80096e2 <xQueueGiveMutexRecursive+0x6a>
        }
        else
        {
            /* The mutex cannot be given because the calling task is not the
             * holder. */
            xReturn = pdFAIL;
 80096de:	2300      	movs	r3, #0
 80096e0:	617b      	str	r3, [r7, #20]
            traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
        }

        traceRETURN_xQueueGiveMutexRecursive( xReturn );

        return xReturn;
 80096e2:	697b      	ldr	r3, [r7, #20]
    }
 80096e4:	4618      	mov	r0, r3
 80096e6:	371c      	adds	r7, #28
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd90      	pop	{r4, r7, pc}
 80096ec:	08010c64 	.word	0x08010c64

080096f0 <xQueueTakeMutexRecursive>:

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
                                         TickType_t xTicksToWait )
    {
 80096f0:	b590      	push	{r4, r7, lr}
 80096f2:	b087      	sub	sp, #28
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueTakeMutexRecursive( xMutex, xTicksToWait );

        configASSERT( pxMutex );
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d110      	bne.n	8009726 <xQueueTakeMutexRecursive+0x36>
    __asm volatile
 8009704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009708:	b672      	cpsid	i
 800970a:	f383 8811 	msr	BASEPRI, r3
 800970e:	f3bf 8f6f 	isb	sy
 8009712:	f3bf 8f4f 	dsb	sy
 8009716:	b662      	cpsie	i
 8009718:	60fb      	str	r3, [r7, #12]
}
 800971a:	bf00      	nop
 800971c:	f240 3137 	movw	r1, #823	@ 0x337
 8009720:	4811      	ldr	r0, [pc, #68]	@ (8009768 <xQueueTakeMutexRecursive+0x78>)
 8009722:	f7f8 f8fd 	bl	8001920 <vAssertCalled>
        /* Comments regarding mutual exclusion as per those within
         * xQueueGiveMutexRecursive(). */

        traceTAKE_MUTEX_RECURSIVE( pxMutex );

        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	689c      	ldr	r4, [r3, #8]
 800972a:	f001 fc8b 	bl	800b044 <xTaskGetCurrentTaskHandle>
 800972e:	4603      	mov	r3, r0
 8009730:	429c      	cmp	r4, r3
 8009732:	d107      	bne.n	8009744 <xQueueTakeMutexRecursive+0x54>
        {
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	1c5a      	adds	r2, r3, #1
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	60da      	str	r2, [r3, #12]
            xReturn = pdPASS;
 800973e:	2301      	movs	r3, #1
 8009740:	617b      	str	r3, [r7, #20]
 8009742:	e00c      	b.n	800975e <xQueueTakeMutexRecursive+0x6e>
        }
        else
        {
            xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009744:	6839      	ldr	r1, [r7, #0]
 8009746:	6938      	ldr	r0, [r7, #16]
 8009748:	f000 fa1c 	bl	8009b84 <xQueueSemaphoreTake>
 800974c:	6178      	str	r0, [r7, #20]

            /* pdPASS will only be returned if the mutex was successfully
             * obtained.  The calling task may have entered the Blocked state
             * before reaching here. */
            if( xReturn != pdFAIL )
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d004      	beq.n	800975e <xQueueTakeMutexRecursive+0x6e>
            {
                ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	1c5a      	adds	r2, r3, #1
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	60da      	str	r2, [r3, #12]
            }
        }

        traceRETURN_xQueueTakeMutexRecursive( xReturn );

        return xReturn;
 800975e:	697b      	ldr	r3, [r7, #20]
    }
 8009760:	4618      	mov	r0, r3
 8009762:	371c      	adds	r7, #28
 8009764:	46bd      	mov	sp, r7
 8009766:	bd90      	pop	{r4, r7, pc}
 8009768:	08010c64 	.word	0x08010c64

0800976c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b08e      	sub	sp, #56	@ 0x38
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	607a      	str	r2, [r7, #4]
 8009778:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800977a:	2300      	movs	r3, #0
 800977c:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 8009782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009784:	2b00      	cmp	r3, #0
 8009786:	d110      	bne.n	80097aa <xQueueGenericSend+0x3e>
    __asm volatile
 8009788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800978c:	b672      	cpsid	i
 800978e:	f383 8811 	msr	BASEPRI, r3
 8009792:	f3bf 8f6f 	isb	sy
 8009796:	f3bf 8f4f 	dsb	sy
 800979a:	b662      	cpsie	i
 800979c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800979e:	bf00      	nop
 80097a0:	f240 31b6 	movw	r1, #950	@ 0x3b6
 80097a4:	487b      	ldr	r0, [pc, #492]	@ (8009994 <xQueueGenericSend+0x228>)
 80097a6:	f7f8 f8bb 	bl	8001920 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d103      	bne.n	80097b8 <xQueueGenericSend+0x4c>
 80097b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d101      	bne.n	80097bc <xQueueGenericSend+0x50>
 80097b8:	2301      	movs	r3, #1
 80097ba:	e000      	b.n	80097be <xQueueGenericSend+0x52>
 80097bc:	2300      	movs	r3, #0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d110      	bne.n	80097e4 <xQueueGenericSend+0x78>
    __asm volatile
 80097c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c6:	b672      	cpsid	i
 80097c8:	f383 8811 	msr	BASEPRI, r3
 80097cc:	f3bf 8f6f 	isb	sy
 80097d0:	f3bf 8f4f 	dsb	sy
 80097d4:	b662      	cpsie	i
 80097d6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80097d8:	bf00      	nop
 80097da:	f240 31b7 	movw	r1, #951	@ 0x3b7
 80097de:	486d      	ldr	r0, [pc, #436]	@ (8009994 <xQueueGenericSend+0x228>)
 80097e0:	f7f8 f89e 	bl	8001920 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	2b02      	cmp	r3, #2
 80097e8:	d103      	bne.n	80097f2 <xQueueGenericSend+0x86>
 80097ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d101      	bne.n	80097f6 <xQueueGenericSend+0x8a>
 80097f2:	2301      	movs	r3, #1
 80097f4:	e000      	b.n	80097f8 <xQueueGenericSend+0x8c>
 80097f6:	2300      	movs	r3, #0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d110      	bne.n	800981e <xQueueGenericSend+0xb2>
    __asm volatile
 80097fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009800:	b672      	cpsid	i
 8009802:	f383 8811 	msr	BASEPRI, r3
 8009806:	f3bf 8f6f 	isb	sy
 800980a:	f3bf 8f4f 	dsb	sy
 800980e:	b662      	cpsie	i
 8009810:	623b      	str	r3, [r7, #32]
}
 8009812:	bf00      	nop
 8009814:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
 8009818:	485e      	ldr	r0, [pc, #376]	@ (8009994 <xQueueGenericSend+0x228>)
 800981a:	f7f8 f881 	bl	8001920 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800981e:	f001 fc21 	bl	800b064 <xTaskGetSchedulerState>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d102      	bne.n	800982e <xQueueGenericSend+0xc2>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d101      	bne.n	8009832 <xQueueGenericSend+0xc6>
 800982e:	2301      	movs	r3, #1
 8009830:	e000      	b.n	8009834 <xQueueGenericSend+0xc8>
 8009832:	2300      	movs	r3, #0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d110      	bne.n	800985a <xQueueGenericSend+0xee>
    __asm volatile
 8009838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800983c:	b672      	cpsid	i
 800983e:	f383 8811 	msr	BASEPRI, r3
 8009842:	f3bf 8f6f 	isb	sy
 8009846:	f3bf 8f4f 	dsb	sy
 800984a:	b662      	cpsie	i
 800984c:	61fb      	str	r3, [r7, #28]
}
 800984e:	bf00      	nop
 8009850:	f240 31bb 	movw	r1, #955	@ 0x3bb
 8009854:	484f      	ldr	r0, [pc, #316]	@ (8009994 <xQueueGenericSend+0x228>)
 8009856:	f7f8 f863 	bl	8001920 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800985a:	f002 fae1 	bl	800be20 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800985e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009860:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009866:	429a      	cmp	r2, r3
 8009868:	d302      	bcc.n	8009870 <xQueueGenericSend+0x104>
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	2b02      	cmp	r3, #2
 800986e:	d129      	bne.n	80098c4 <xQueueGenericSend+0x158>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009870:	683a      	ldr	r2, [r7, #0]
 8009872:	68b9      	ldr	r1, [r7, #8]
 8009874:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009876:	f000 faaf 	bl	8009dd8 <prvCopyDataToQueue>
 800987a:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800987c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800987e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009880:	2b00      	cmp	r3, #0
 8009882:	d010      	beq.n	80098a6 <xQueueGenericSend+0x13a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009886:	3324      	adds	r3, #36	@ 0x24
 8009888:	4618      	mov	r0, r3
 800988a:	f001 f9af 	bl	800abec <xTaskRemoveFromEventList>
 800988e:	4603      	mov	r3, r0
 8009890:	2b00      	cmp	r3, #0
 8009892:	d013      	beq.n	80098bc <xQueueGenericSend+0x150>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8009894:	4b40      	ldr	r3, [pc, #256]	@ (8009998 <xQueueGenericSend+0x22c>)
 8009896:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800989a:	601a      	str	r2, [r3, #0]
 800989c:	f3bf 8f4f 	dsb	sy
 80098a0:	f3bf 8f6f 	isb	sy
 80098a4:	e00a      	b.n	80098bc <xQueueGenericSend+0x150>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80098a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d007      	beq.n	80098bc <xQueueGenericSend+0x150>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80098ac:	4b3a      	ldr	r3, [pc, #232]	@ (8009998 <xQueueGenericSend+0x22c>)
 80098ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098b2:	601a      	str	r2, [r3, #0]
 80098b4:	f3bf 8f4f 	dsb	sy
 80098b8:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80098bc:	f002 fae8 	bl	800be90 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 80098c0:	2301      	movs	r3, #1
 80098c2:	e063      	b.n	800998c <xQueueGenericSend+0x220>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d103      	bne.n	80098d2 <xQueueGenericSend+0x166>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80098ca:	f002 fae1 	bl	800be90 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 80098ce:	2300      	movs	r3, #0
 80098d0:	e05c      	b.n	800998c <xQueueGenericSend+0x220>
                }
                else if( xEntryTimeSet == pdFALSE )
 80098d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d106      	bne.n	80098e6 <xQueueGenericSend+0x17a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80098d8:	f107 0314 	add.w	r3, r7, #20
 80098dc:	4618      	mov	r0, r3
 80098de:	f001 fa63 	bl	800ada8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80098e2:	2301      	movs	r3, #1
 80098e4:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80098e6:	f002 fad3 	bl	800be90 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80098ea:	f000 fe09 	bl	800a500 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80098ee:	f002 fa97 	bl	800be20 <vPortEnterCritical>
 80098f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80098f8:	b25b      	sxtb	r3, r3
 80098fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098fe:	d103      	bne.n	8009908 <xQueueGenericSend+0x19c>
 8009900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009902:	2200      	movs	r2, #0
 8009904:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800990a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800990e:	b25b      	sxtb	r3, r3
 8009910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009914:	d103      	bne.n	800991e <xQueueGenericSend+0x1b2>
 8009916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009918:	2200      	movs	r2, #0
 800991a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800991e:	f002 fab7 	bl	800be90 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009922:	1d3a      	adds	r2, r7, #4
 8009924:	f107 0314 	add.w	r3, r7, #20
 8009928:	4611      	mov	r1, r2
 800992a:	4618      	mov	r0, r3
 800992c:	f001 fa52 	bl	800add4 <xTaskCheckForTimeOut>
 8009930:	4603      	mov	r3, r0
 8009932:	2b00      	cmp	r3, #0
 8009934:	d124      	bne.n	8009980 <xQueueGenericSend+0x214>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009936:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009938:	f000 fb46 	bl	8009fc8 <prvIsQueueFull>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d018      	beq.n	8009974 <xQueueGenericSend+0x208>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009944:	3310      	adds	r3, #16
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	4611      	mov	r1, r2
 800994a:	4618      	mov	r0, r3
 800994c:	f001 f8d4 	bl	800aaf8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8009950:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009952:	f000 fad1 	bl	8009ef8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8009956:	f000 fde1 	bl	800a51c <xTaskResumeAll>
 800995a:	4603      	mov	r3, r0
 800995c:	2b00      	cmp	r3, #0
 800995e:	f47f af7c 	bne.w	800985a <xQueueGenericSend+0xee>
                {
                    taskYIELD_WITHIN_API();
 8009962:	4b0d      	ldr	r3, [pc, #52]	@ (8009998 <xQueueGenericSend+0x22c>)
 8009964:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009968:	601a      	str	r2, [r3, #0]
 800996a:	f3bf 8f4f 	dsb	sy
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	e772      	b.n	800985a <xQueueGenericSend+0xee>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8009974:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009976:	f000 fabf 	bl	8009ef8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800997a:	f000 fdcf 	bl	800a51c <xTaskResumeAll>
 800997e:	e76c      	b.n	800985a <xQueueGenericSend+0xee>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8009980:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009982:	f000 fab9 	bl	8009ef8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009986:	f000 fdc9 	bl	800a51c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 800998a:	2300      	movs	r3, #0
        }
    }
}
 800998c:	4618      	mov	r0, r3
 800998e:	3738      	adds	r7, #56	@ 0x38
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}
 8009994:	08010c64 	.word	0x08010c64
 8009998:	e000ed04 	.word	0xe000ed04

0800999c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b08c      	sub	sp, #48	@ 0x30
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80099a8:	2300      	movs	r3, #0
 80099aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80099b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d110      	bne.n	80099d8 <xQueueReceive+0x3c>
    __asm volatile
 80099b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ba:	b672      	cpsid	i
 80099bc:	f383 8811 	msr	BASEPRI, r3
 80099c0:	f3bf 8f6f 	isb	sy
 80099c4:	f3bf 8f4f 	dsb	sy
 80099c8:	b662      	cpsie	i
 80099ca:	623b      	str	r3, [r7, #32]
}
 80099cc:	bf00      	nop
 80099ce:	f240 51e9 	movw	r1, #1513	@ 0x5e9
 80099d2:	486a      	ldr	r0, [pc, #424]	@ (8009b7c <xQueueReceive+0x1e0>)
 80099d4:	f7f7 ffa4 	bl	8001920 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d103      	bne.n	80099e6 <xQueueReceive+0x4a>
 80099de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d101      	bne.n	80099ea <xQueueReceive+0x4e>
 80099e6:	2301      	movs	r3, #1
 80099e8:	e000      	b.n	80099ec <xQueueReceive+0x50>
 80099ea:	2300      	movs	r3, #0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d110      	bne.n	8009a12 <xQueueReceive+0x76>
    __asm volatile
 80099f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f4:	b672      	cpsid	i
 80099f6:	f383 8811 	msr	BASEPRI, r3
 80099fa:	f3bf 8f6f 	isb	sy
 80099fe:	f3bf 8f4f 	dsb	sy
 8009a02:	b662      	cpsie	i
 8009a04:	61fb      	str	r3, [r7, #28]
}
 8009a06:	bf00      	nop
 8009a08:	f240 51ed 	movw	r1, #1517	@ 0x5ed
 8009a0c:	485b      	ldr	r0, [pc, #364]	@ (8009b7c <xQueueReceive+0x1e0>)
 8009a0e:	f7f7 ff87 	bl	8001920 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a12:	f001 fb27 	bl	800b064 <xTaskGetSchedulerState>
 8009a16:	4603      	mov	r3, r0
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d102      	bne.n	8009a22 <xQueueReceive+0x86>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d101      	bne.n	8009a26 <xQueueReceive+0x8a>
 8009a22:	2301      	movs	r3, #1
 8009a24:	e000      	b.n	8009a28 <xQueueReceive+0x8c>
 8009a26:	2300      	movs	r3, #0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d110      	bne.n	8009a4e <xQueueReceive+0xb2>
    __asm volatile
 8009a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a30:	b672      	cpsid	i
 8009a32:	f383 8811 	msr	BASEPRI, r3
 8009a36:	f3bf 8f6f 	isb	sy
 8009a3a:	f3bf 8f4f 	dsb	sy
 8009a3e:	b662      	cpsie	i
 8009a40:	61bb      	str	r3, [r7, #24]
}
 8009a42:	bf00      	nop
 8009a44:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 8009a48:	484c      	ldr	r0, [pc, #304]	@ (8009b7c <xQueueReceive+0x1e0>)
 8009a4a:	f7f7 ff69 	bl	8001920 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009a4e:	f002 f9e7 	bl	800be20 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a56:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d01f      	beq.n	8009a9e <xQueueReceive+0x102>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009a5e:	68b9      	ldr	r1, [r7, #8]
 8009a60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a62:	f000 fa23 	bl	8009eac <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8009a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a68:	1e5a      	subs	r2, r3, #1
 8009a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a6c:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a70:	691b      	ldr	r3, [r3, #16]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d00f      	beq.n	8009a96 <xQueueReceive+0xfa>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a78:	3310      	adds	r3, #16
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f001 f8b6 	bl	800abec <xTaskRemoveFromEventList>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d007      	beq.n	8009a96 <xQueueReceive+0xfa>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009a86:	4b3e      	ldr	r3, [pc, #248]	@ (8009b80 <xQueueReceive+0x1e4>)
 8009a88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a8c:	601a      	str	r2, [r3, #0]
 8009a8e:	f3bf 8f4f 	dsb	sy
 8009a92:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8009a96:	f002 f9fb 	bl	800be90 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	e069      	b.n	8009b72 <xQueueReceive+0x1d6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d103      	bne.n	8009aac <xQueueReceive+0x110>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8009aa4:	f002 f9f4 	bl	800be90 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	e062      	b.n	8009b72 <xQueueReceive+0x1d6>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d106      	bne.n	8009ac0 <xQueueReceive+0x124>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009ab2:	f107 0310 	add.w	r3, r7, #16
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f001 f976 	bl	800ada8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8009abc:	2301      	movs	r3, #1
 8009abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8009ac0:	f002 f9e6 	bl	800be90 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009ac4:	f000 fd1c 	bl	800a500 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009ac8:	f002 f9aa 	bl	800be20 <vPortEnterCritical>
 8009acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ace:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009ad2:	b25b      	sxtb	r3, r3
 8009ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ad8:	d103      	bne.n	8009ae2 <xQueueReceive+0x146>
 8009ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009adc:	2200      	movs	r2, #0
 8009ade:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ae4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ae8:	b25b      	sxtb	r3, r3
 8009aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aee:	d103      	bne.n	8009af8 <xQueueReceive+0x15c>
 8009af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af2:	2200      	movs	r2, #0
 8009af4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009af8:	f002 f9ca 	bl	800be90 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009afc:	1d3a      	adds	r2, r7, #4
 8009afe:	f107 0310 	add.w	r3, r7, #16
 8009b02:	4611      	mov	r1, r2
 8009b04:	4618      	mov	r0, r3
 8009b06:	f001 f965 	bl	800add4 <xTaskCheckForTimeOut>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d123      	bne.n	8009b58 <xQueueReceive+0x1bc>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b12:	f000 fa43 	bl	8009f9c <prvIsQueueEmpty>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d017      	beq.n	8009b4c <xQueueReceive+0x1b0>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b1e:	3324      	adds	r3, #36	@ 0x24
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	4611      	mov	r1, r2
 8009b24:	4618      	mov	r0, r3
 8009b26:	f000 ffe7 	bl	800aaf8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8009b2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b2c:	f000 f9e4 	bl	8009ef8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8009b30:	f000 fcf4 	bl	800a51c <xTaskResumeAll>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d189      	bne.n	8009a4e <xQueueReceive+0xb2>
                {
                    taskYIELD_WITHIN_API();
 8009b3a:	4b11      	ldr	r3, [pc, #68]	@ (8009b80 <xQueueReceive+0x1e4>)
 8009b3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b40:	601a      	str	r2, [r3, #0]
 8009b42:	f3bf 8f4f 	dsb	sy
 8009b46:	f3bf 8f6f 	isb	sy
 8009b4a:	e780      	b.n	8009a4e <xQueueReceive+0xb2>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8009b4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b4e:	f000 f9d3 	bl	8009ef8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009b52:	f000 fce3 	bl	800a51c <xTaskResumeAll>
 8009b56:	e77a      	b.n	8009a4e <xQueueReceive+0xb2>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8009b58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b5a:	f000 f9cd 	bl	8009ef8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009b5e:	f000 fcdd 	bl	800a51c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b64:	f000 fa1a 	bl	8009f9c <prvIsQueueEmpty>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	f43f af6f 	beq.w	8009a4e <xQueueReceive+0xb2>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8009b70:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3730      	adds	r7, #48	@ 0x30
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	08010c64 	.word	0x08010c64
 8009b80:	e000ed04 	.word	0xe000ed04

08009b84 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b08c      	sub	sp, #48	@ 0x30
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8009b96:	2300      	movs	r3, #0
 8009b98:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8009b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d110      	bne.n	8009bc2 <xQueueSemaphoreTake+0x3e>
    __asm volatile
 8009ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba4:	b672      	cpsid	i
 8009ba6:	f383 8811 	msr	BASEPRI, r3
 8009baa:	f3bf 8f6f 	isb	sy
 8009bae:	f3bf 8f4f 	dsb	sy
 8009bb2:	b662      	cpsie	i
 8009bb4:	61bb      	str	r3, [r7, #24]
}
 8009bb6:	bf00      	nop
 8009bb8:	f240 6182 	movw	r1, #1666	@ 0x682
 8009bbc:	4878      	ldr	r0, [pc, #480]	@ (8009da0 <xQueueSemaphoreTake+0x21c>)
 8009bbe:	f7f7 feaf 	bl	8001920 <vAssertCalled>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8009bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d010      	beq.n	8009bec <xQueueSemaphoreTake+0x68>
    __asm volatile
 8009bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bce:	b672      	cpsid	i
 8009bd0:	f383 8811 	msr	BASEPRI, r3
 8009bd4:	f3bf 8f6f 	isb	sy
 8009bd8:	f3bf 8f4f 	dsb	sy
 8009bdc:	b662      	cpsie	i
 8009bde:	617b      	str	r3, [r7, #20]
}
 8009be0:	bf00      	nop
 8009be2:	f240 6186 	movw	r1, #1670	@ 0x686
 8009be6:	486e      	ldr	r0, [pc, #440]	@ (8009da0 <xQueueSemaphoreTake+0x21c>)
 8009be8:	f7f7 fe9a 	bl	8001920 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009bec:	f001 fa3a 	bl	800b064 <xTaskGetSchedulerState>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d102      	bne.n	8009bfc <xQueueSemaphoreTake+0x78>
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d101      	bne.n	8009c00 <xQueueSemaphoreTake+0x7c>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e000      	b.n	8009c02 <xQueueSemaphoreTake+0x7e>
 8009c00:	2300      	movs	r3, #0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d110      	bne.n	8009c28 <xQueueSemaphoreTake+0xa4>
    __asm volatile
 8009c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c0a:	b672      	cpsid	i
 8009c0c:	f383 8811 	msr	BASEPRI, r3
 8009c10:	f3bf 8f6f 	isb	sy
 8009c14:	f3bf 8f4f 	dsb	sy
 8009c18:	b662      	cpsie	i
 8009c1a:	613b      	str	r3, [r7, #16]
}
 8009c1c:	bf00      	nop
 8009c1e:	f240 618b 	movw	r1, #1675	@ 0x68b
 8009c22:	485f      	ldr	r0, [pc, #380]	@ (8009da0 <xQueueSemaphoreTake+0x21c>)
 8009c24:	f7f7 fe7c 	bl	8001920 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009c28:	f002 f8fa 	bl	800be20 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c30:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009c32:	6a3b      	ldr	r3, [r7, #32]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d024      	beq.n	8009c82 <xQueueSemaphoreTake+0xfe>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 8009c38:	6a3b      	ldr	r3, [r7, #32]
 8009c3a:	1e5a      	subs	r2, r3, #1
 8009c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c3e:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d104      	bne.n	8009c52 <xQueueSemaphoreTake+0xce>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009c48:	f001 fc48 	bl	800b4dc <pvTaskIncrementMutexHeldCount>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c50:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d00f      	beq.n	8009c7a <xQueueSemaphoreTake+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c5c:	3310      	adds	r3, #16
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f000 ffc4 	bl	800abec <xTaskRemoveFromEventList>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d007      	beq.n	8009c7a <xQueueSemaphoreTake+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009c6a:	4b4e      	ldr	r3, [pc, #312]	@ (8009da4 <xQueueSemaphoreTake+0x220>)
 8009c6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c70:	601a      	str	r2, [r3, #0]
 8009c72:	f3bf 8f4f 	dsb	sy
 8009c76:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8009c7a:	f002 f909 	bl	800be90 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e089      	b.n	8009d96 <xQueueSemaphoreTake+0x212>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d103      	bne.n	8009c90 <xQueueSemaphoreTake+0x10c>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8009c88:	f002 f902 	bl	800be90 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	e082      	b.n	8009d96 <xQueueSemaphoreTake+0x212>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d106      	bne.n	8009ca4 <xQueueSemaphoreTake+0x120>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009c96:	f107 0308 	add.w	r3, r7, #8
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f001 f884 	bl	800ada8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8009ca4:	f002 f8f4 	bl	800be90 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009ca8:	f000 fc2a 	bl	800a500 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009cac:	f002 f8b8 	bl	800be20 <vPortEnterCritical>
 8009cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009cb6:	b25b      	sxtb	r3, r3
 8009cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cbc:	d103      	bne.n	8009cc6 <xQueueSemaphoreTake+0x142>
 8009cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ccc:	b25b      	sxtb	r3, r3
 8009cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd2:	d103      	bne.n	8009cdc <xQueueSemaphoreTake+0x158>
 8009cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009cdc:	f002 f8d8 	bl	800be90 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ce0:	463a      	mov	r2, r7
 8009ce2:	f107 0308 	add.w	r3, r7, #8
 8009ce6:	4611      	mov	r1, r2
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f001 f873 	bl	800add4 <xTaskCheckForTimeOut>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d132      	bne.n	8009d5a <xQueueSemaphoreTake+0x1d6>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009cf4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009cf6:	f000 f951 	bl	8009f9c <prvIsQueueEmpty>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d026      	beq.n	8009d4e <xQueueSemaphoreTake+0x1ca>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d109      	bne.n	8009d1c <xQueueSemaphoreTake+0x198>
                    {
                        taskENTER_CRITICAL();
 8009d08:	f002 f88a 	bl	800be20 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	4618      	mov	r0, r3
 8009d12:	f001 f9c5 	bl	800b0a0 <xTaskPriorityInherit>
 8009d16:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 8009d18:	f002 f8ba 	bl	800be90 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d1e:	3324      	adds	r3, #36	@ 0x24
 8009d20:	683a      	ldr	r2, [r7, #0]
 8009d22:	4611      	mov	r1, r2
 8009d24:	4618      	mov	r0, r3
 8009d26:	f000 fee7 	bl	800aaf8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8009d2a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009d2c:	f000 f8e4 	bl	8009ef8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8009d30:	f000 fbf4 	bl	800a51c <xTaskResumeAll>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	f47f af76 	bne.w	8009c28 <xQueueSemaphoreTake+0xa4>
                {
                    taskYIELD_WITHIN_API();
 8009d3c:	4b19      	ldr	r3, [pc, #100]	@ (8009da4 <xQueueSemaphoreTake+0x220>)
 8009d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d42:	601a      	str	r2, [r3, #0]
 8009d44:	f3bf 8f4f 	dsb	sy
 8009d48:	f3bf 8f6f 	isb	sy
 8009d4c:	e76c      	b.n	8009c28 <xQueueSemaphoreTake+0xa4>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8009d4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009d50:	f000 f8d2 	bl	8009ef8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009d54:	f000 fbe2 	bl	800a51c <xTaskResumeAll>
 8009d58:	e766      	b.n	8009c28 <xQueueSemaphoreTake+0xa4>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8009d5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009d5c:	f000 f8cc 	bl	8009ef8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009d60:	f000 fbdc 	bl	800a51c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d64:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009d66:	f000 f919 	bl	8009f9c <prvIsQueueEmpty>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f43f af5b 	beq.w	8009c28 <xQueueSemaphoreTake+0xa4>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8009d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d00d      	beq.n	8009d94 <xQueueSemaphoreTake+0x210>
                    {
                        taskENTER_CRITICAL();
 8009d78:	f002 f852 	bl	800be20 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009d7c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009d7e:	f000 f813 	bl	8009da8 <prvGetDisinheritPriorityAfterTimeout>
 8009d82:	61f8      	str	r0, [r7, #28]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	69f9      	ldr	r1, [r7, #28]
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f001 fadc 	bl	800b348 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8009d90:	f002 f87e 	bl	800be90 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8009d94:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3730      	adds	r7, #48	@ 0x30
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	08010c64 	.word	0x08010c64
 8009da4:	e000ed04 	.word	0xe000ed04

08009da8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8009da8:	b480      	push	{r7}
 8009daa:	b085      	sub	sp, #20
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d006      	beq.n	8009dc6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f1c3 0307 	rsb	r3, r3, #7
 8009dc2:	60fb      	str	r3, [r7, #12]
 8009dc4:	e001      	b.n	8009dca <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8009dca:	68fb      	ldr	r3, [r7, #12]
    }
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3714      	adds	r7, #20
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b086      	sub	sp, #24
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8009de4:	2300      	movs	r3, #0
 8009de6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dec:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d10d      	bne.n	8009e12 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d14d      	bne.n	8009e9a <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	689b      	ldr	r3, [r3, #8]
 8009e02:	4618      	mov	r0, r3
 8009e04:	f001 f9ec 	bl	800b1e0 <xTaskPriorityDisinherit>
 8009e08:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	609a      	str	r2, [r3, #8]
 8009e10:	e043      	b.n	8009e9a <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d119      	bne.n	8009e4c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	6858      	ldr	r0, [r3, #4]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e20:	461a      	mov	r2, r3
 8009e22:	68b9      	ldr	r1, [r7, #8]
 8009e24:	f004 fa9b 	bl	800e35e <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	685a      	ldr	r2, [r3, #4]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e30:	441a      	add	r2, r3
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	685a      	ldr	r2, [r3, #4]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d32b      	bcc.n	8009e9a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	605a      	str	r2, [r3, #4]
 8009e4a:	e026      	b.n	8009e9a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	68d8      	ldr	r0, [r3, #12]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e54:	461a      	mov	r2, r3
 8009e56:	68b9      	ldr	r1, [r7, #8]
 8009e58:	f004 fa81 	bl	800e35e <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	68da      	ldr	r2, [r3, #12]
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e64:	425b      	negs	r3, r3
 8009e66:	441a      	add	r2, r3
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	68da      	ldr	r2, [r3, #12]
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d207      	bcs.n	8009e88 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	689a      	ldr	r2, [r3, #8]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e80:	425b      	negs	r3, r3
 8009e82:	441a      	add	r2, r3
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2b02      	cmp	r3, #2
 8009e8c:	d105      	bne.n	8009e9a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d002      	beq.n	8009e9a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	3b01      	subs	r3, #1
 8009e98:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	1c5a      	adds	r2, r3, #1
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8009ea2:	697b      	ldr	r3, [r7, #20]
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3718      	adds	r7, #24
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d018      	beq.n	8009ef0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	68da      	ldr	r2, [r3, #12]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ec6:	441a      	add	r2, r3
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	68da      	ldr	r2, [r3, #12]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d303      	bcc.n	8009ee0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	68d9      	ldr	r1, [r3, #12]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ee8:	461a      	mov	r2, r3
 8009eea:	6838      	ldr	r0, [r7, #0]
 8009eec:	f004 fa37 	bl	800e35e <memcpy>
    }
}
 8009ef0:	bf00      	nop
 8009ef2:	3708      	adds	r7, #8
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8009f00:	f001 ff8e 	bl	800be20 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f0a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f0c:	e011      	b.n	8009f32 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d012      	beq.n	8009f3c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	3324      	adds	r3, #36	@ 0x24
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f000 fe66 	bl	800abec <xTaskRemoveFromEventList>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d001      	beq.n	8009f2a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8009f26:	f000 ffc9 	bl	800aebc <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8009f2a:	7bfb      	ldrb	r3, [r7, #15]
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	dce9      	bgt.n	8009f0e <prvUnlockQueue+0x16>
 8009f3a:	e000      	b.n	8009f3e <prvUnlockQueue+0x46>
                    break;
 8009f3c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	22ff      	movs	r2, #255	@ 0xff
 8009f42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8009f46:	f001 ffa3 	bl	800be90 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8009f4a:	f001 ff69 	bl	800be20 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f54:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f56:	e011      	b.n	8009f7c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	691b      	ldr	r3, [r3, #16]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d012      	beq.n	8009f86 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	3310      	adds	r3, #16
 8009f64:	4618      	mov	r0, r3
 8009f66:	f000 fe41 	bl	800abec <xTaskRemoveFromEventList>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d001      	beq.n	8009f74 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8009f70:	f000 ffa4 	bl	800aebc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8009f74:	7bbb      	ldrb	r3, [r7, #14]
 8009f76:	3b01      	subs	r3, #1
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	dce9      	bgt.n	8009f58 <prvUnlockQueue+0x60>
 8009f84:	e000      	b.n	8009f88 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8009f86:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	22ff      	movs	r2, #255	@ 0xff
 8009f8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8009f90:	f001 ff7e 	bl	800be90 <vPortExitCritical>
}
 8009f94:	bf00      	nop
 8009f96:	3710      	adds	r7, #16
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8009fa4:	f001 ff3c 	bl	800be20 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d102      	bne.n	8009fb6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	60fb      	str	r3, [r7, #12]
 8009fb4:	e001      	b.n	8009fba <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8009fba:	f001 ff69 	bl	800be90 <vPortExitCritical>

    return xReturn;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3710      	adds	r7, #16
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8009fd0:	f001 ff26 	bl	800be20 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d102      	bne.n	8009fe6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	60fb      	str	r3, [r7, #12]
 8009fe4:	e001      	b.n	8009fea <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8009fea:	f001 ff51 	bl	800be90 <vPortExitCritical>

    return xReturn;
 8009fee:	68fb      	ldr	r3, [r7, #12]
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3710      	adds	r7, #16
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b086      	sub	sp, #24
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800a008:	f001 ff0a 	bl	800be20 <vPortEnterCritical>
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a012:	b25b      	sxtb	r3, r3
 800a014:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a018:	d103      	bne.n	800a022 <vQueueWaitForMessageRestricted+0x2a>
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a028:	b25b      	sxtb	r3, r3
 800a02a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a02e:	d103      	bne.n	800a038 <vQueueWaitForMessageRestricted+0x40>
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	2200      	movs	r2, #0
 800a034:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a038:	f001 ff2a 	bl	800be90 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a040:	2b00      	cmp	r3, #0
 800a042:	d106      	bne.n	800a052 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	3324      	adds	r3, #36	@ 0x24
 800a048:	687a      	ldr	r2, [r7, #4]
 800a04a:	68b9      	ldr	r1, [r7, #8]
 800a04c:	4618      	mov	r0, r3
 800a04e:	f000 fd7f 	bl	800ab50 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800a052:	6978      	ldr	r0, [r7, #20]
 800a054:	f7ff ff50 	bl	8009ef8 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 800a058:	bf00      	nop
 800a05a:	3718      	adds	r7, #24
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 800a060:	b580      	push	{r7, lr}
 800a062:	b08a      	sub	sp, #40	@ 0x28
 800a064:	af04      	add	r7, sp, #16
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	60b9      	str	r1, [r7, #8]
 800a06a:	607a      	str	r2, [r7, #4]
 800a06c:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	4618      	mov	r0, r3
 800a074:	f7f7 ff74 	bl	8001f60 <pvPortMalloc>
 800a078:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d013      	beq.n	800a0a8 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800a080:	20b0      	movs	r0, #176	@ 0xb0
 800a082:	f7f7 ff6d 	bl	8001f60 <pvPortMalloc>
 800a086:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d008      	beq.n	800a0a0 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800a08e:	22b0      	movs	r2, #176	@ 0xb0
 800a090:	2100      	movs	r1, #0
 800a092:	6978      	ldr	r0, [r7, #20]
 800a094:	f004 f874 	bl	800e180 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	693a      	ldr	r2, [r7, #16]
 800a09c:	631a      	str	r2, [r3, #48]	@ 0x30
 800a09e:	e005      	b.n	800a0ac <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800a0a0:	6938      	ldr	r0, [r7, #16]
 800a0a2:	f7f7 ff6b 	bl	8001f7c <vPortFree>
 800a0a6:	e001      	b.n	800a0ac <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d00d      	beq.n	800a0ce <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	9303      	str	r3, [sp, #12]
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	9302      	str	r3, [sp, #8]
 800a0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0bc:	9301      	str	r3, [sp, #4]
 800a0be:	6a3b      	ldr	r3, [r7, #32]
 800a0c0:	9300      	str	r3, [sp, #0]
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	68b9      	ldr	r1, [r7, #8]
 800a0c8:	68f8      	ldr	r0, [r7, #12]
 800a0ca:	f000 f829 	bl	800a120 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 800a0ce:	697b      	ldr	r3, [r7, #20]
    }
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3718      	adds	r7, #24
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b088      	sub	sp, #32
 800a0dc:	af02      	add	r7, sp, #8
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	60b9      	str	r1, [r7, #8]
 800a0e2:	607a      	str	r2, [r7, #4]
 800a0e4:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800a0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e8:	9301      	str	r3, [sp, #4]
 800a0ea:	6a3b      	ldr	r3, [r7, #32]
 800a0ec:	9300      	str	r3, [sp, #0]
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	68b9      	ldr	r1, [r7, #8]
 800a0f4:	68f8      	ldr	r0, [r7, #12]
 800a0f6:	f7ff ffb3 	bl	800a060 <prvCreateTask>
 800a0fa:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d005      	beq.n	800a10e <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800a102:	6938      	ldr	r0, [r7, #16]
 800a104:	f000 f8c2 	bl	800a28c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800a108:	2301      	movs	r3, #1
 800a10a:	617b      	str	r3, [r7, #20]
 800a10c:	e002      	b.n	800a114 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a10e:	f04f 33ff 	mov.w	r3, #4294967295
 800a112:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 800a114:	697b      	ldr	r3, [r7, #20]
    }
 800a116:	4618      	mov	r0, r3
 800a118:	3718      	adds	r7, #24
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
	...

0800a120 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b088      	sub	sp, #32
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
 800a12c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800a12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a130:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	461a      	mov	r2, r3
 800a138:	21a5      	movs	r1, #165	@ 0xa5
 800a13a:	f004 f821 	bl	800e180 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800a13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a140:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a142:	6879      	ldr	r1, [r7, #4]
 800a144:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800a148:	440b      	add	r3, r1
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	4413      	add	r3, r2
 800a14e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	f023 0307 	bic.w	r3, r3, #7
 800a156:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	f003 0307 	and.w	r3, r3, #7
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d010      	beq.n	800a184 <prvInitialiseNewTask+0x64>
    __asm volatile
 800a162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a166:	b672      	cpsid	i
 800a168:	f383 8811 	msr	BASEPRI, r3
 800a16c:	f3bf 8f6f 	isb	sy
 800a170:	f3bf 8f4f 	dsb	sy
 800a174:	b662      	cpsie	i
 800a176:	617b      	str	r3, [r7, #20]
}
 800a178:	bf00      	nop
 800a17a:	f240 712e 	movw	r1, #1838	@ 0x72e
 800a17e:	483f      	ldr	r0, [pc, #252]	@ (800a27c <prvInitialiseNewTask+0x15c>)
 800a180:	f7f7 fbce 	bl	8001920 <vAssertCalled>

        #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
        {
            /* Also record the stack's high address, which may assist
             * debugging. */
            pxNewTCB->pxEndOfStack = pxTopOfStack;
 800a184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a186:	69ba      	ldr	r2, [r7, #24]
 800a188:	645a      	str	r2, [r3, #68]	@ 0x44
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d01e      	beq.n	800a1ce <prvInitialiseNewTask+0xae>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a190:	2300      	movs	r3, #0
 800a192:	61fb      	str	r3, [r7, #28]
 800a194:	e012      	b.n	800a1bc <prvInitialiseNewTask+0x9c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a196:	68ba      	ldr	r2, [r7, #8]
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	4413      	add	r3, r2
 800a19c:	7819      	ldrb	r1, [r3, #0]
 800a19e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1a0:	69fb      	ldr	r3, [r7, #28]
 800a1a2:	4413      	add	r3, r2
 800a1a4:	3334      	adds	r3, #52	@ 0x34
 800a1a6:	460a      	mov	r2, r1
 800a1a8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800a1aa:	68ba      	ldr	r2, [r7, #8]
 800a1ac:	69fb      	ldr	r3, [r7, #28]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d006      	beq.n	800a1c4 <prvInitialiseNewTask+0xa4>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	61fb      	str	r3, [r7, #28]
 800a1bc:	69fb      	ldr	r3, [r7, #28]
 800a1be:	2b0f      	cmp	r3, #15
 800a1c0:	d9e9      	bls.n	800a196 <prvInitialiseNewTask+0x76>
 800a1c2:	e000      	b.n	800a1c6 <prvInitialiseNewTask+0xa6>
            {
                break;
 800a1c4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 800a1c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800a1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1d0:	2b06      	cmp	r3, #6
 800a1d2:	d910      	bls.n	800a1f6 <prvInitialiseNewTask+0xd6>
    __asm volatile
 800a1d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1d8:	b672      	cpsid	i
 800a1da:	f383 8811 	msr	BASEPRI, r3
 800a1de:	f3bf 8f6f 	isb	sy
 800a1e2:	f3bf 8f4f 	dsb	sy
 800a1e6:	b662      	cpsie	i
 800a1e8:	613b      	str	r3, [r7, #16]
}
 800a1ea:	bf00      	nop
 800a1ec:	f240 7164 	movw	r1, #1892	@ 0x764
 800a1f0:	4822      	ldr	r0, [pc, #136]	@ (800a27c <prvInitialiseNewTask+0x15c>)
 800a1f2:	f7f7 fb95 	bl	8001920 <vAssertCalled>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a1f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1f8:	2b06      	cmp	r3, #6
 800a1fa:	d901      	bls.n	800a200 <prvInitialiseNewTask+0xe0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a1fc:	2306      	movs	r3, #6
 800a1fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800a200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a202:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a204:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800a206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a208:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a20a:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a20c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a20e:	3304      	adds	r3, #4
 800a210:	4618      	mov	r0, r3
 800a212:	f7ff f877 	bl	8009304 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a218:	3318      	adds	r3, #24
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7ff f872 	bl	8009304 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a222:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a224:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800a226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a228:	f1c3 0207 	rsb	r2, r3, #7
 800a22c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a22e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a232:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a234:	625a      	str	r2, [r3, #36]	@ 0x24
    #endif

    #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 800a236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a238:	335c      	adds	r3, #92	@ 0x5c
 800a23a:	224c      	movs	r2, #76	@ 0x4c
 800a23c:	2100      	movs	r1, #0
 800a23e:	4618      	mov	r0, r3
 800a240:	f003 ff9e 	bl	800e180 <memset>
 800a244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a246:	4a0e      	ldr	r2, [pc, #56]	@ (800a280 <prvInitialiseNewTask+0x160>)
 800a248:	661a      	str	r2, [r3, #96]	@ 0x60
 800a24a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a24c:	4a0d      	ldr	r2, [pc, #52]	@ (800a284 <prvInitialiseNewTask+0x164>)
 800a24e:	665a      	str	r2, [r3, #100]	@ 0x64
 800a250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a252:	4a0d      	ldr	r2, [pc, #52]	@ (800a288 <prvInitialiseNewTask+0x168>)
 800a254:	669a      	str	r2, [r3, #104]	@ 0x68
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a256:	683a      	ldr	r2, [r7, #0]
 800a258:	68f9      	ldr	r1, [r7, #12]
 800a25a:	69b8      	ldr	r0, [r7, #24]
 800a25c:	f001 fc6a 	bl	800bb34 <pxPortInitialiseStack>
 800a260:	4602      	mov	r2, r0
 800a262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a264:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 800a266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d002      	beq.n	800a272 <prvInitialiseNewTask+0x152>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a26c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a26e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a270:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800a272:	bf00      	nop
 800a274:	3720      	adds	r7, #32
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	08010ce0 	.word	0x08010ce0
 800a280:	20000590 	.word	0x20000590
 800a284:	200005f8 	.word	0x200005f8
 800a288:	20000660 	.word	0x20000660

0800a28c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 800a294:	f001 fdc4 	bl	800be20 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 800a298:	4b41      	ldr	r3, [pc, #260]	@ (800a3a0 <prvAddNewTaskToReadyList+0x114>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	3301      	adds	r3, #1
 800a29e:	4a40      	ldr	r2, [pc, #256]	@ (800a3a0 <prvAddNewTaskToReadyList+0x114>)
 800a2a0:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800a2a2:	4b40      	ldr	r3, [pc, #256]	@ (800a3a4 <prvAddNewTaskToReadyList+0x118>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d109      	bne.n	800a2be <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 800a2aa:	4a3e      	ldr	r2, [pc, #248]	@ (800a3a4 <prvAddNewTaskToReadyList+0x118>)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a2b0:	4b3b      	ldr	r3, [pc, #236]	@ (800a3a0 <prvAddNewTaskToReadyList+0x114>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d110      	bne.n	800a2da <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 800a2b8:	f000 fe24 	bl	800af04 <prvInitialiseTaskLists>
 800a2bc:	e00d      	b.n	800a2da <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800a2be:	4b3a      	ldr	r3, [pc, #232]	@ (800a3a8 <prvAddNewTaskToReadyList+0x11c>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d109      	bne.n	800a2da <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a2c6:	4b37      	ldr	r3, [pc, #220]	@ (800a3a4 <prvAddNewTaskToReadyList+0x118>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d802      	bhi.n	800a2da <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 800a2d4:	4a33      	ldr	r2, [pc, #204]	@ (800a3a4 <prvAddNewTaskToReadyList+0x118>)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 800a2da:	4b34      	ldr	r3, [pc, #208]	@ (800a3ac <prvAddNewTaskToReadyList+0x120>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	3301      	adds	r3, #1
 800a2e0:	4a32      	ldr	r2, [pc, #200]	@ (800a3ac <prvAddNewTaskToReadyList+0x120>)
 800a2e2:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a2e4:	4b31      	ldr	r3, [pc, #196]	@ (800a3ac <prvAddNewTaskToReadyList+0x120>)
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	649a      	str	r2, [r3, #72]	@ 0x48
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2f0:	2201      	movs	r2, #1
 800a2f2:	409a      	lsls	r2, r3
 800a2f4:	4b2e      	ldr	r3, [pc, #184]	@ (800a3b0 <prvAddNewTaskToReadyList+0x124>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	4a2d      	ldr	r2, [pc, #180]	@ (800a3b0 <prvAddNewTaskToReadyList+0x124>)
 800a2fc:	6013      	str	r3, [r2, #0]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a302:	492c      	ldr	r1, [pc, #176]	@ (800a3b4 <prvAddNewTaskToReadyList+0x128>)
 800a304:	4613      	mov	r3, r2
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	4413      	add	r3, r2
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	440b      	add	r3, r1
 800a30e:	3304      	adds	r3, #4
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	60fb      	str	r3, [r7, #12]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	68fa      	ldr	r2, [r7, #12]
 800a318:	609a      	str	r2, [r3, #8]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	689a      	ldr	r2, [r3, #8]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	60da      	str	r2, [r3, #12]
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	3204      	adds	r2, #4
 800a32a:	605a      	str	r2, [r3, #4]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	1d1a      	adds	r2, r3, #4
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	609a      	str	r2, [r3, #8]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a338:	4613      	mov	r3, r2
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	4413      	add	r3, r2
 800a33e:	009b      	lsls	r3, r3, #2
 800a340:	4a1c      	ldr	r2, [pc, #112]	@ (800a3b4 <prvAddNewTaskToReadyList+0x128>)
 800a342:	441a      	add	r2, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	615a      	str	r2, [r3, #20]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a34c:	4919      	ldr	r1, [pc, #100]	@ (800a3b4 <prvAddNewTaskToReadyList+0x128>)
 800a34e:	4613      	mov	r3, r2
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	4413      	add	r3, r2
 800a354:	009b      	lsls	r3, r3, #2
 800a356:	440b      	add	r3, r1
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a35e:	1c59      	adds	r1, r3, #1
 800a360:	4814      	ldr	r0, [pc, #80]	@ (800a3b4 <prvAddNewTaskToReadyList+0x128>)
 800a362:	4613      	mov	r3, r2
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	4413      	add	r3, r2
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	4403      	add	r3, r0
 800a36c:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800a36e:	f001 fd8f 	bl	800be90 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800a372:	4b0d      	ldr	r3, [pc, #52]	@ (800a3a8 <prvAddNewTaskToReadyList+0x11c>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d00e      	beq.n	800a398 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800a37a:	4b0a      	ldr	r3, [pc, #40]	@ (800a3a4 <prvAddNewTaskToReadyList+0x118>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a384:	429a      	cmp	r2, r3
 800a386:	d207      	bcs.n	800a398 <prvAddNewTaskToReadyList+0x10c>
 800a388:	4b0b      	ldr	r3, [pc, #44]	@ (800a3b8 <prvAddNewTaskToReadyList+0x12c>)
 800a38a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a38e:	601a      	str	r2, [r3, #0]
 800a390:	f3bf 8f4f 	dsb	sy
 800a394:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800a398:	bf00      	nop
 800a39a:	3710      	adds	r7, #16
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	20000510 	.word	0x20000510
 800a3a4:	20000410 	.word	0x20000410
 800a3a8:	2000051c 	.word	0x2000051c
 800a3ac:	2000052c 	.word	0x2000052c
 800a3b0:	20000518 	.word	0x20000518
 800a3b4:	20000414 	.word	0x20000414
 800a3b8:	e000ed04 	.word	0xe000ed04

0800a3bc <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b08a      	sub	sp, #40	@ 0x28
 800a3c0:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	617b      	str	r3, [r7, #20]
 800a3ce:	e011      	b.n	800a3f4 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 800a3d0:	4a1d      	ldr	r2, [pc, #116]	@ (800a448 <prvCreateIdleTasks+0x8c>)
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	7819      	ldrb	r1, [r3, #0]
 800a3d8:	463a      	mov	r2, r7
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	4413      	add	r3, r2
 800a3de:	460a      	mov	r2, r1
 800a3e0:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 800a3e2:	463a      	mov	r2, r7
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	4413      	add	r3, r2
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d006      	beq.n	800a3fc <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	617b      	str	r3, [r7, #20]
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	2b0f      	cmp	r3, #15
 800a3f8:	ddea      	ble.n	800a3d0 <prvCreateIdleTasks+0x14>
 800a3fa:	e000      	b.n	800a3fe <prvCreateIdleTasks+0x42>
        {
            break;
 800a3fc:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800a3fe:	2300      	movs	r3, #0
 800a400:	61bb      	str	r3, [r7, #24]
 800a402:	e016      	b.n	800a432 <prvCreateIdleTasks+0x76>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 800a404:	4b11      	ldr	r3, [pc, #68]	@ (800a44c <prvCreateIdleTasks+0x90>)
 800a406:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 800a408:	69bb      	ldr	r3, [r7, #24]
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	4a10      	ldr	r2, [pc, #64]	@ (800a450 <prvCreateIdleTasks+0x94>)
 800a40e:	4413      	add	r3, r2
 800a410:	4639      	mov	r1, r7
 800a412:	9301      	str	r3, [sp, #4]
 800a414:	2300      	movs	r3, #0
 800a416:	9300      	str	r3, [sp, #0]
 800a418:	2300      	movs	r3, #0
 800a41a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a41e:	6938      	ldr	r0, [r7, #16]
 800a420:	f7ff fe5a 	bl	800a0d8 <xTaskCreate>
 800a424:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d006      	beq.n	800a43a <prvCreateIdleTasks+0x7e>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	3301      	adds	r3, #1
 800a430:	61bb      	str	r3, [r7, #24]
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	2b00      	cmp	r3, #0
 800a436:	dde5      	ble.n	800a404 <prvCreateIdleTasks+0x48>
 800a438:	e000      	b.n	800a43c <prvCreateIdleTasks+0x80>
        {
            break;
 800a43a:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800a43c:	69fb      	ldr	r3, [r7, #28]
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3720      	adds	r7, #32
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	08010d5c 	.word	0x08010d5c
 800a44c:	0800aed5 	.word	0x0800aed5
 800a450:	20000534 	.word	0x20000534

0800a454 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b084      	sub	sp, #16
 800a458:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 800a45a:	f7ff ffaf 	bl	800a3bc <prvCreateIdleTasks>
 800a45e:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2b01      	cmp	r3, #1
 800a464:	d102      	bne.n	800a46c <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 800a466:	f001 f8d3 	bl	800b610 <xTimerCreateTimerTask>
 800a46a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d11d      	bne.n	800a4ae <vTaskStartScheduler+0x5a>
    __asm volatile
 800a472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a476:	b672      	cpsid	i
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	b662      	cpsie	i
 800a486:	60bb      	str	r3, [r7, #8]
}
 800a488:	bf00      	nop

        #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800a48a:	4b16      	ldr	r3, [pc, #88]	@ (800a4e4 <vTaskStartScheduler+0x90>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	335c      	adds	r3, #92	@ 0x5c
 800a490:	4a15      	ldr	r2, [pc, #84]	@ (800a4e8 <vTaskStartScheduler+0x94>)
 800a492:	6013      	str	r3, [r2, #0]
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800a494:	4b15      	ldr	r3, [pc, #84]	@ (800a4ec <vTaskStartScheduler+0x98>)
 800a496:	f04f 32ff 	mov.w	r2, #4294967295
 800a49a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800a49c:	4b14      	ldr	r3, [pc, #80]	@ (800a4f0 <vTaskStartScheduler+0x9c>)
 800a49e:	2201      	movs	r2, #1
 800a4a0:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a4a2:	4b14      	ldr	r3, [pc, #80]	@ (800a4f4 <vTaskStartScheduler+0xa0>)
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 800a4a8:	f001 fbdc 	bl	800bc64 <xPortStartScheduler>
 800a4ac:	e014      	b.n	800a4d8 <vTaskStartScheduler+0x84>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4b4:	d110      	bne.n	800a4d8 <vTaskStartScheduler+0x84>
    __asm volatile
 800a4b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ba:	b672      	cpsid	i
 800a4bc:	f383 8811 	msr	BASEPRI, r3
 800a4c0:	f3bf 8f6f 	isb	sy
 800a4c4:	f3bf 8f4f 	dsb	sy
 800a4c8:	b662      	cpsie	i
 800a4ca:	607b      	str	r3, [r7, #4]
}
 800a4cc:	bf00      	nop
 800a4ce:	f640 61a9 	movw	r1, #3753	@ 0xea9
 800a4d2:	4809      	ldr	r0, [pc, #36]	@ (800a4f8 <vTaskStartScheduler+0xa4>)
 800a4d4:	f7f7 fa24 	bl	8001920 <vAssertCalled>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800a4d8:	4b08      	ldr	r3, [pc, #32]	@ (800a4fc <vTaskStartScheduler+0xa8>)
 800a4da:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 800a4dc:	bf00      	nop
 800a4de:	3710      	adds	r7, #16
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}
 800a4e4:	20000410 	.word	0x20000410
 800a4e8:	2000018c 	.word	0x2000018c
 800a4ec:	20000530 	.word	0x20000530
 800a4f0:	2000051c 	.word	0x2000051c
 800a4f4:	20000514 	.word	0x20000514
 800a4f8:	08010ce0 	.word	0x08010ce0
 800a4fc:	08010ecc 	.word	0x08010ecc

0800a500 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a500:	b480      	push	{r7}
 800a502:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 800a504:	4b04      	ldr	r3, [pc, #16]	@ (800a518 <vTaskSuspendAll+0x18>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	3301      	adds	r3, #1
 800a50a:	4a03      	ldr	r2, [pc, #12]	@ (800a518 <vTaskSuspendAll+0x18>)
 800a50c:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 800a50e:	bf00      	nop
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr
 800a518:	20000538 	.word	0x20000538

0800a51c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b088      	sub	sp, #32
 800a520:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800a522:	2300      	movs	r3, #0
 800a524:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800a526:	2300      	movs	r3, #0
 800a528:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800a52a:	f001 fc79 	bl	800be20 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800a52e:	2300      	movs	r3, #0
 800a530:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800a532:	4b78      	ldr	r3, [pc, #480]	@ (800a714 <xTaskResumeAll+0x1f8>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d110      	bne.n	800a55c <xTaskResumeAll+0x40>
    __asm volatile
 800a53a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a53e:	b672      	cpsid	i
 800a540:	f383 8811 	msr	BASEPRI, r3
 800a544:	f3bf 8f6f 	isb	sy
 800a548:	f3bf 8f4f 	dsb	sy
 800a54c:	b662      	cpsie	i
 800a54e:	603b      	str	r3, [r7, #0]
}
 800a550:	bf00      	nop
 800a552:	f640 718b 	movw	r1, #3979	@ 0xf8b
 800a556:	4870      	ldr	r0, [pc, #448]	@ (800a718 <xTaskResumeAll+0x1fc>)
 800a558:	f7f7 f9e2 	bl	8001920 <vAssertCalled>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800a55c:	4b6d      	ldr	r3, [pc, #436]	@ (800a714 <xTaskResumeAll+0x1f8>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	3b01      	subs	r3, #1
 800a562:	4a6c      	ldr	r2, [pc, #432]	@ (800a714 <xTaskResumeAll+0x1f8>)
 800a564:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800a566:	4b6b      	ldr	r3, [pc, #428]	@ (800a714 <xTaskResumeAll+0x1f8>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	f040 80ca 	bne.w	800a704 <xTaskResumeAll+0x1e8>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a570:	4b6a      	ldr	r3, [pc, #424]	@ (800a71c <xTaskResumeAll+0x200>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	f000 80c5 	beq.w	800a704 <xTaskResumeAll+0x1e8>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a57a:	e08e      	b.n	800a69a <xTaskResumeAll+0x17e>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a57c:	4b68      	ldr	r3, [pc, #416]	@ (800a720 <xTaskResumeAll+0x204>)
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	68db      	ldr	r3, [r3, #12]
 800a582:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800a584:	69fb      	ldr	r3, [r7, #28]
 800a586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a588:	60fb      	str	r3, [r7, #12]
 800a58a:	69fb      	ldr	r3, [r7, #28]
 800a58c:	69db      	ldr	r3, [r3, #28]
 800a58e:	69fa      	ldr	r2, [r7, #28]
 800a590:	6a12      	ldr	r2, [r2, #32]
 800a592:	609a      	str	r2, [r3, #8]
 800a594:	69fb      	ldr	r3, [r7, #28]
 800a596:	6a1b      	ldr	r3, [r3, #32]
 800a598:	69fa      	ldr	r2, [r7, #28]
 800a59a:	69d2      	ldr	r2, [r2, #28]
 800a59c:	605a      	str	r2, [r3, #4]
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	685a      	ldr	r2, [r3, #4]
 800a5a2:	69fb      	ldr	r3, [r7, #28]
 800a5a4:	3318      	adds	r3, #24
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d103      	bne.n	800a5b2 <xTaskResumeAll+0x96>
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	6a1a      	ldr	r2, [r3, #32]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	605a      	str	r2, [r3, #4]
 800a5b2:	69fb      	ldr	r3, [r7, #28]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	629a      	str	r2, [r3, #40]	@ 0x28
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	1e5a      	subs	r2, r3, #1
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800a5c2:	69fb      	ldr	r3, [r7, #28]
 800a5c4:	695b      	ldr	r3, [r3, #20]
 800a5c6:	60bb      	str	r3, [r7, #8]
 800a5c8:	69fb      	ldr	r3, [r7, #28]
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	69fa      	ldr	r2, [r7, #28]
 800a5ce:	68d2      	ldr	r2, [r2, #12]
 800a5d0:	609a      	str	r2, [r3, #8]
 800a5d2:	69fb      	ldr	r3, [r7, #28]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	69fa      	ldr	r2, [r7, #28]
 800a5d8:	6892      	ldr	r2, [r2, #8]
 800a5da:	605a      	str	r2, [r3, #4]
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	685a      	ldr	r2, [r3, #4]
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	3304      	adds	r3, #4
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d103      	bne.n	800a5f0 <xTaskResumeAll+0xd4>
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	68da      	ldr	r2, [r3, #12]
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	605a      	str	r2, [r3, #4]
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	615a      	str	r2, [r3, #20]
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	1e5a      	subs	r2, r3, #1
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800a600:	69fb      	ldr	r3, [r7, #28]
 800a602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a604:	2201      	movs	r2, #1
 800a606:	409a      	lsls	r2, r3
 800a608:	4b46      	ldr	r3, [pc, #280]	@ (800a724 <xTaskResumeAll+0x208>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	4a45      	ldr	r2, [pc, #276]	@ (800a724 <xTaskResumeAll+0x208>)
 800a610:	6013      	str	r3, [r2, #0]
 800a612:	69fb      	ldr	r3, [r7, #28]
 800a614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a616:	4944      	ldr	r1, [pc, #272]	@ (800a728 <xTaskResumeAll+0x20c>)
 800a618:	4613      	mov	r3, r2
 800a61a:	009b      	lsls	r3, r3, #2
 800a61c:	4413      	add	r3, r2
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	440b      	add	r3, r1
 800a622:	3304      	adds	r3, #4
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	607b      	str	r3, [r7, #4]
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	609a      	str	r2, [r3, #8]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	689a      	ldr	r2, [r3, #8]
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	60da      	str	r2, [r3, #12]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	69fa      	ldr	r2, [r7, #28]
 800a63c:	3204      	adds	r2, #4
 800a63e:	605a      	str	r2, [r3, #4]
 800a640:	69fb      	ldr	r3, [r7, #28]
 800a642:	1d1a      	adds	r2, r3, #4
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	609a      	str	r2, [r3, #8]
 800a648:	69fb      	ldr	r3, [r7, #28]
 800a64a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a64c:	4613      	mov	r3, r2
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	4413      	add	r3, r2
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	4a34      	ldr	r2, [pc, #208]	@ (800a728 <xTaskResumeAll+0x20c>)
 800a656:	441a      	add	r2, r3
 800a658:	69fb      	ldr	r3, [r7, #28]
 800a65a:	615a      	str	r2, [r3, #20]
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a660:	4931      	ldr	r1, [pc, #196]	@ (800a728 <xTaskResumeAll+0x20c>)
 800a662:	4613      	mov	r3, r2
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	4413      	add	r3, r2
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	440b      	add	r3, r1
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	69fa      	ldr	r2, [r7, #28]
 800a670:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a672:	1c59      	adds	r1, r3, #1
 800a674:	482c      	ldr	r0, [pc, #176]	@ (800a728 <xTaskResumeAll+0x20c>)
 800a676:	4613      	mov	r3, r2
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	4413      	add	r3, r2
 800a67c:	009b      	lsls	r3, r3, #2
 800a67e:	4403      	add	r3, r0
 800a680:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a686:	4b29      	ldr	r3, [pc, #164]	@ (800a72c <xTaskResumeAll+0x210>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d904      	bls.n	800a69a <xTaskResumeAll+0x17e>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800a690:	4a27      	ldr	r2, [pc, #156]	@ (800a730 <xTaskResumeAll+0x214>)
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	2101      	movs	r1, #1
 800a696:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a69a:	4b21      	ldr	r3, [pc, #132]	@ (800a720 <xTaskResumeAll+0x204>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	f47f af6c 	bne.w	800a57c <xTaskResumeAll+0x60>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d001      	beq.n	800a6ae <xTaskResumeAll+0x192>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 800a6aa:	f000 fcaf 	bl	800b00c <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a6ae:	4b21      	ldr	r3, [pc, #132]	@ (800a734 <xTaskResumeAll+0x218>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d012      	beq.n	800a6e0 <xTaskResumeAll+0x1c4>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 800a6ba:	f000 f84f 	bl	800a75c <xTaskIncrementTick>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d004      	beq.n	800a6ce <xTaskResumeAll+0x1b2>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800a6c4:	4a1a      	ldr	r2, [pc, #104]	@ (800a730 <xTaskResumeAll+0x214>)
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	2101      	movs	r1, #1
 800a6ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	3b01      	subs	r3, #1
 800a6d2:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d1ef      	bne.n	800a6ba <xTaskResumeAll+0x19e>

                            xPendedTicks = 0;
 800a6da:	4b16      	ldr	r3, [pc, #88]	@ (800a734 <xTaskResumeAll+0x218>)
 800a6dc:	2200      	movs	r2, #0
 800a6de:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800a6e0:	4a13      	ldr	r2, [pc, #76]	@ (800a730 <xTaskResumeAll+0x214>)
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d00b      	beq.n	800a704 <xTaskResumeAll+0x1e8>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800a6f0:	4b0e      	ldr	r3, [pc, #56]	@ (800a72c <xTaskResumeAll+0x210>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4b10      	ldr	r3, [pc, #64]	@ (800a738 <xTaskResumeAll+0x21c>)
 800a6f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6fa:	601a      	str	r2, [r3, #0]
 800a6fc:	f3bf 8f4f 	dsb	sy
 800a700:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800a704:	f001 fbc4 	bl	800be90 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 800a708:	69bb      	ldr	r3, [r7, #24]
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3720      	adds	r7, #32
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop
 800a714:	20000538 	.word	0x20000538
 800a718:	08010ce0 	.word	0x08010ce0
 800a71c:	20000510 	.word	0x20000510
 800a720:	200004d0 	.word	0x200004d0
 800a724:	20000518 	.word	0x20000518
 800a728:	20000414 	.word	0x20000414
 800a72c:	20000410 	.word	0x20000410
 800a730:	20000524 	.word	0x20000524
 800a734:	20000520 	.word	0x20000520
 800a738:	e000ed04 	.word	0xe000ed04

0800a73c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800a742:	4b05      	ldr	r3, [pc, #20]	@ (800a758 <xTaskGetTickCount+0x1c>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 800a748:	687b      	ldr	r3, [r7, #4]
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	370c      	adds	r7, #12
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr
 800a756:	bf00      	nop
 800a758:	20000514 	.word	0x20000514

0800a75c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b08a      	sub	sp, #40	@ 0x28
 800a760:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800a762:	2300      	movs	r3, #0
 800a764:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800a766:	4b81      	ldr	r3, [pc, #516]	@ (800a96c <xTaskIncrementTick+0x210>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	f040 80f4 	bne.w	800a958 <xTaskIncrementTick+0x1fc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a770:	4b7f      	ldr	r3, [pc, #508]	@ (800a970 <xTaskIncrementTick+0x214>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	3301      	adds	r3, #1
 800a776:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800a778:	4a7d      	ldr	r2, [pc, #500]	@ (800a970 <xTaskIncrementTick+0x214>)
 800a77a:	6a3b      	ldr	r3, [r7, #32]
 800a77c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800a77e:	6a3b      	ldr	r3, [r7, #32]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d126      	bne.n	800a7d2 <xTaskIncrementTick+0x76>
        {
            taskSWITCH_DELAYED_LISTS();
 800a784:	4b7b      	ldr	r3, [pc, #492]	@ (800a974 <xTaskIncrementTick+0x218>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d010      	beq.n	800a7b0 <xTaskIncrementTick+0x54>
    __asm volatile
 800a78e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a792:	b672      	cpsid	i
 800a794:	f383 8811 	msr	BASEPRI, r3
 800a798:	f3bf 8f6f 	isb	sy
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	b662      	cpsie	i
 800a7a2:	607b      	str	r3, [r7, #4]
}
 800a7a4:	bf00      	nop
 800a7a6:	f241 215f 	movw	r1, #4703	@ 0x125f
 800a7aa:	4873      	ldr	r0, [pc, #460]	@ (800a978 <xTaskIncrementTick+0x21c>)
 800a7ac:	f7f7 f8b8 	bl	8001920 <vAssertCalled>
 800a7b0:	4b70      	ldr	r3, [pc, #448]	@ (800a974 <xTaskIncrementTick+0x218>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	61fb      	str	r3, [r7, #28]
 800a7b6:	4b71      	ldr	r3, [pc, #452]	@ (800a97c <xTaskIncrementTick+0x220>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a6e      	ldr	r2, [pc, #440]	@ (800a974 <xTaskIncrementTick+0x218>)
 800a7bc:	6013      	str	r3, [r2, #0]
 800a7be:	4a6f      	ldr	r2, [pc, #444]	@ (800a97c <xTaskIncrementTick+0x220>)
 800a7c0:	69fb      	ldr	r3, [r7, #28]
 800a7c2:	6013      	str	r3, [r2, #0]
 800a7c4:	4b6e      	ldr	r3, [pc, #440]	@ (800a980 <xTaskIncrementTick+0x224>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	4a6d      	ldr	r2, [pc, #436]	@ (800a980 <xTaskIncrementTick+0x224>)
 800a7cc:	6013      	str	r3, [r2, #0]
 800a7ce:	f000 fc1d 	bl	800b00c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800a7d2:	4b6c      	ldr	r3, [pc, #432]	@ (800a984 <xTaskIncrementTick+0x228>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	6a3a      	ldr	r2, [r7, #32]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	f0c0 80a8 	bcc.w	800a92e <xTaskIncrementTick+0x1d2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7de:	4b65      	ldr	r3, [pc, #404]	@ (800a974 <xTaskIncrementTick+0x218>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d104      	bne.n	800a7f2 <xTaskIncrementTick+0x96>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800a7e8:	4b66      	ldr	r3, [pc, #408]	@ (800a984 <xTaskIncrementTick+0x228>)
 800a7ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ee:	601a      	str	r2, [r3, #0]
                    break;
 800a7f0:	e09d      	b.n	800a92e <xTaskIncrementTick+0x1d2>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a7f2:	4b60      	ldr	r3, [pc, #384]	@ (800a974 <xTaskIncrementTick+0x218>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a7fc:	69bb      	ldr	r3, [r7, #24]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800a802:	6a3a      	ldr	r2, [r7, #32]
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	429a      	cmp	r2, r3
 800a808:	d203      	bcs.n	800a812 <xTaskIncrementTick+0xb6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800a80a:	4a5e      	ldr	r2, [pc, #376]	@ (800a984 <xTaskIncrementTick+0x228>)
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	6013      	str	r3, [r2, #0]
                        break;
 800a810:	e08d      	b.n	800a92e <xTaskIncrementTick+0x1d2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800a812:	69bb      	ldr	r3, [r7, #24]
 800a814:	695b      	ldr	r3, [r3, #20]
 800a816:	613b      	str	r3, [r7, #16]
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	689b      	ldr	r3, [r3, #8]
 800a81c:	69ba      	ldr	r2, [r7, #24]
 800a81e:	68d2      	ldr	r2, [r2, #12]
 800a820:	609a      	str	r2, [r3, #8]
 800a822:	69bb      	ldr	r3, [r7, #24]
 800a824:	68db      	ldr	r3, [r3, #12]
 800a826:	69ba      	ldr	r2, [r7, #24]
 800a828:	6892      	ldr	r2, [r2, #8]
 800a82a:	605a      	str	r2, [r3, #4]
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	685a      	ldr	r2, [r3, #4]
 800a830:	69bb      	ldr	r3, [r7, #24]
 800a832:	3304      	adds	r3, #4
 800a834:	429a      	cmp	r2, r3
 800a836:	d103      	bne.n	800a840 <xTaskIncrementTick+0xe4>
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	68da      	ldr	r2, [r3, #12]
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	605a      	str	r2, [r3, #4]
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	2200      	movs	r2, #0
 800a844:	615a      	str	r2, [r3, #20]
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	1e5a      	subs	r2, r3, #1
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a850:	69bb      	ldr	r3, [r7, #24]
 800a852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a854:	2b00      	cmp	r3, #0
 800a856:	d01e      	beq.n	800a896 <xTaskIncrementTick+0x13a>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a85c:	60fb      	str	r3, [r7, #12]
 800a85e:	69bb      	ldr	r3, [r7, #24]
 800a860:	69db      	ldr	r3, [r3, #28]
 800a862:	69ba      	ldr	r2, [r7, #24]
 800a864:	6a12      	ldr	r2, [r2, #32]
 800a866:	609a      	str	r2, [r3, #8]
 800a868:	69bb      	ldr	r3, [r7, #24]
 800a86a:	6a1b      	ldr	r3, [r3, #32]
 800a86c:	69ba      	ldr	r2, [r7, #24]
 800a86e:	69d2      	ldr	r2, [r2, #28]
 800a870:	605a      	str	r2, [r3, #4]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	685a      	ldr	r2, [r3, #4]
 800a876:	69bb      	ldr	r3, [r7, #24]
 800a878:	3318      	adds	r3, #24
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d103      	bne.n	800a886 <xTaskIncrementTick+0x12a>
 800a87e:	69bb      	ldr	r3, [r7, #24]
 800a880:	6a1a      	ldr	r2, [r3, #32]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	605a      	str	r2, [r3, #4]
 800a886:	69bb      	ldr	r3, [r7, #24]
 800a888:	2200      	movs	r2, #0
 800a88a:	629a      	str	r2, [r3, #40]	@ 0x28
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	1e5a      	subs	r2, r3, #1
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a89a:	2201      	movs	r2, #1
 800a89c:	409a      	lsls	r2, r3
 800a89e:	4b3a      	ldr	r3, [pc, #232]	@ (800a988 <xTaskIncrementTick+0x22c>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	4a38      	ldr	r2, [pc, #224]	@ (800a988 <xTaskIncrementTick+0x22c>)
 800a8a6:	6013      	str	r3, [r2, #0]
 800a8a8:	69bb      	ldr	r3, [r7, #24]
 800a8aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8ac:	4937      	ldr	r1, [pc, #220]	@ (800a98c <xTaskIncrementTick+0x230>)
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	4413      	add	r3, r2
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	440b      	add	r3, r1
 800a8b8:	3304      	adds	r3, #4
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	60bb      	str	r3, [r7, #8]
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	68ba      	ldr	r2, [r7, #8]
 800a8c2:	609a      	str	r2, [r3, #8]
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	689a      	ldr	r2, [r3, #8]
 800a8c8:	69bb      	ldr	r3, [r7, #24]
 800a8ca:	60da      	str	r2, [r3, #12]
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	689b      	ldr	r3, [r3, #8]
 800a8d0:	69ba      	ldr	r2, [r7, #24]
 800a8d2:	3204      	adds	r2, #4
 800a8d4:	605a      	str	r2, [r3, #4]
 800a8d6:	69bb      	ldr	r3, [r7, #24]
 800a8d8:	1d1a      	adds	r2, r3, #4
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	609a      	str	r2, [r3, #8]
 800a8de:	69bb      	ldr	r3, [r7, #24]
 800a8e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8e2:	4613      	mov	r3, r2
 800a8e4:	009b      	lsls	r3, r3, #2
 800a8e6:	4413      	add	r3, r2
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	4a28      	ldr	r2, [pc, #160]	@ (800a98c <xTaskIncrementTick+0x230>)
 800a8ec:	441a      	add	r2, r3
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	615a      	str	r2, [r3, #20]
 800a8f2:	69bb      	ldr	r3, [r7, #24]
 800a8f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8f6:	4925      	ldr	r1, [pc, #148]	@ (800a98c <xTaskIncrementTick+0x230>)
 800a8f8:	4613      	mov	r3, r2
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	4413      	add	r3, r2
 800a8fe:	009b      	lsls	r3, r3, #2
 800a900:	440b      	add	r3, r1
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	69ba      	ldr	r2, [r7, #24]
 800a906:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a908:	1c59      	adds	r1, r3, #1
 800a90a:	4820      	ldr	r0, [pc, #128]	@ (800a98c <xTaskIncrementTick+0x230>)
 800a90c:	4613      	mov	r3, r2
 800a90e:	009b      	lsls	r3, r3, #2
 800a910:	4413      	add	r3, r2
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	4403      	add	r3, r0
 800a916:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a91c:	4b1c      	ldr	r3, [pc, #112]	@ (800a990 <xTaskIncrementTick+0x234>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a922:	429a      	cmp	r2, r3
 800a924:	f67f af5b 	bls.w	800a7de <xTaskIncrementTick+0x82>
                            {
                                xSwitchRequired = pdTRUE;
 800a928:	2301      	movs	r3, #1
 800a92a:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a92c:	e757      	b.n	800a7de <xTaskIncrementTick+0x82>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 800a92e:	4b18      	ldr	r3, [pc, #96]	@ (800a990 <xTaskIncrementTick+0x234>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a934:	4915      	ldr	r1, [pc, #84]	@ (800a98c <xTaskIncrementTick+0x230>)
 800a936:	4613      	mov	r3, r2
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	4413      	add	r3, r2
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	440b      	add	r3, r1
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	2b01      	cmp	r3, #1
 800a944:	d901      	bls.n	800a94a <xTaskIncrementTick+0x1ee>
                {
                    xSwitchRequired = pdTRUE;
 800a946:	2301      	movs	r3, #1
 800a948:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 800a94a:	4b12      	ldr	r3, [pc, #72]	@ (800a994 <xTaskIncrementTick+0x238>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d007      	beq.n	800a962 <xTaskIncrementTick+0x206>
                {
                    xSwitchRequired = pdTRUE;
 800a952:	2301      	movs	r3, #1
 800a954:	627b      	str	r3, [r7, #36]	@ 0x24
 800a956:	e004      	b.n	800a962 <xTaskIncrementTick+0x206>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 800a958:	4b0f      	ldr	r3, [pc, #60]	@ (800a998 <xTaskIncrementTick+0x23c>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	3301      	adds	r3, #1
 800a95e:	4a0e      	ldr	r2, [pc, #56]	@ (800a998 <xTaskIncrementTick+0x23c>)
 800a960:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 800a962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a964:	4618      	mov	r0, r3
 800a966:	3728      	adds	r7, #40	@ 0x28
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}
 800a96c:	20000538 	.word	0x20000538
 800a970:	20000514 	.word	0x20000514
 800a974:	200004c8 	.word	0x200004c8
 800a978:	08010ce0 	.word	0x08010ce0
 800a97c:	200004cc 	.word	0x200004cc
 800a980:	20000528 	.word	0x20000528
 800a984:	20000530 	.word	0x20000530
 800a988:	20000518 	.word	0x20000518
 800a98c:	20000414 	.word	0x20000414
 800a990:	20000410 	.word	0x20000410
 800a994:	20000524 	.word	0x20000524
 800a998:	20000520 	.word	0x20000520

0800a99c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b088      	sub	sp, #32
 800a9a0:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800a9a2:	4b4c      	ldr	r3, [pc, #304]	@ (800aad4 <vTaskSwitchContext+0x138>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d003      	beq.n	800a9b2 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 800a9aa:	4b4b      	ldr	r3, [pc, #300]	@ (800aad8 <vTaskSwitchContext+0x13c>)
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 800a9b0:	e08c      	b.n	800aacc <vTaskSwitchContext+0x130>
            xYieldPendings[ 0 ] = pdFALSE;
 800a9b2:	4b49      	ldr	r3, [pc, #292]	@ (800aad8 <vTaskSwitchContext+0x13c>)
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime[ 0 ] = portGET_RUN_TIME_COUNTER_VALUE();
 800a9b8:	f7ff fec0 	bl	800a73c <xTaskGetTickCount>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	4a47      	ldr	r2, [pc, #284]	@ (800aadc <vTaskSwitchContext+0x140>)
 800a9c0:	6013      	str	r3, [r2, #0]
                if( ulTotalRunTime[ 0 ] > ulTaskSwitchedInTime[ 0 ] )
 800a9c2:	4b46      	ldr	r3, [pc, #280]	@ (800aadc <vTaskSwitchContext+0x140>)
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	4b46      	ldr	r3, [pc, #280]	@ (800aae0 <vTaskSwitchContext+0x144>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d909      	bls.n	800a9e2 <vTaskSwitchContext+0x46>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime[ 0 ] - ulTaskSwitchedInTime[ 0 ] );
 800a9ce:	4b43      	ldr	r3, [pc, #268]	@ (800aadc <vTaskSwitchContext+0x140>)
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	4b43      	ldr	r3, [pc, #268]	@ (800aae0 <vTaskSwitchContext+0x144>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	1ad1      	subs	r1, r2, r3
 800a9d8:	4b42      	ldr	r3, [pc, #264]	@ (800aae4 <vTaskSwitchContext+0x148>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a9de:	440a      	add	r2, r1
 800a9e0:	659a      	str	r2, [r3, #88]	@ 0x58
                ulTaskSwitchedInTime[ 0 ] = ulTotalRunTime[ 0 ];
 800a9e2:	4b3e      	ldr	r3, [pc, #248]	@ (800aadc <vTaskSwitchContext+0x140>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	4a3e      	ldr	r2, [pc, #248]	@ (800aae0 <vTaskSwitchContext+0x144>)
 800a9e8:	6013      	str	r3, [r2, #0]
            taskCHECK_FOR_STACK_OVERFLOW();
 800a9ea:	4b3e      	ldr	r3, [pc, #248]	@ (800aae4 <vTaskSwitchContext+0x148>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9f0:	61fb      	str	r3, [r7, #28]
 800a9f2:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800a9f6:	61bb      	str	r3, [r7, #24]
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	69ba      	ldr	r2, [r7, #24]
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d111      	bne.n	800aa26 <vTaskSwitchContext+0x8a>
 800aa02:	69fb      	ldr	r3, [r7, #28]
 800aa04:	3304      	adds	r3, #4
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	69ba      	ldr	r2, [r7, #24]
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d10b      	bne.n	800aa26 <vTaskSwitchContext+0x8a>
 800aa0e:	69fb      	ldr	r3, [r7, #28]
 800aa10:	3308      	adds	r3, #8
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	69ba      	ldr	r2, [r7, #24]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d105      	bne.n	800aa26 <vTaskSwitchContext+0x8a>
 800aa1a:	69fb      	ldr	r3, [r7, #28]
 800aa1c:	330c      	adds	r3, #12
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	69ba      	ldr	r2, [r7, #24]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d009      	beq.n	800aa3a <vTaskSwitchContext+0x9e>
 800aa26:	4b2f      	ldr	r3, [pc, #188]	@ (800aae4 <vTaskSwitchContext+0x148>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	3334      	adds	r3, #52	@ 0x34
 800aa2c:	617b      	str	r3, [r7, #20]
 800aa2e:	4b2d      	ldr	r3, [pc, #180]	@ (800aae4 <vTaskSwitchContext+0x148>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	6979      	ldr	r1, [r7, #20]
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7f6 fb93 	bl	8001160 <vApplicationStackOverflowHook>
            taskSELECT_HIGHEST_PRIORITY_TASK();
 800aa3a:	4b2b      	ldr	r3, [pc, #172]	@ (800aae8 <vTaskSwitchContext+0x14c>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	60bb      	str	r3, [r7, #8]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	fab3 f383 	clz	r3, r3
 800aa46:	71fb      	strb	r3, [r7, #7]
        return ucReturn;
 800aa48:	79fb      	ldrb	r3, [r7, #7]
 800aa4a:	f1c3 031f 	rsb	r3, r3, #31
 800aa4e:	613b      	str	r3, [r7, #16]
 800aa50:	4926      	ldr	r1, [pc, #152]	@ (800aaec <vTaskSwitchContext+0x150>)
 800aa52:	693a      	ldr	r2, [r7, #16]
 800aa54:	4613      	mov	r3, r2
 800aa56:	009b      	lsls	r3, r3, #2
 800aa58:	4413      	add	r3, r2
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	440b      	add	r3, r1
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d110      	bne.n	800aa86 <vTaskSwitchContext+0xea>
    __asm volatile
 800aa64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa68:	b672      	cpsid	i
 800aa6a:	f383 8811 	msr	BASEPRI, r3
 800aa6e:	f3bf 8f6f 	isb	sy
 800aa72:	f3bf 8f4f 	dsb	sy
 800aa76:	b662      	cpsie	i
 800aa78:	603b      	str	r3, [r7, #0]
}
 800aa7a:	bf00      	nop
 800aa7c:	f241 31fa 	movw	r1, #5114	@ 0x13fa
 800aa80:	481b      	ldr	r0, [pc, #108]	@ (800aaf0 <vTaskSwitchContext+0x154>)
 800aa82:	f7f6 ff4d 	bl	8001920 <vAssertCalled>
 800aa86:	693a      	ldr	r2, [r7, #16]
 800aa88:	4613      	mov	r3, r2
 800aa8a:	009b      	lsls	r3, r3, #2
 800aa8c:	4413      	add	r3, r2
 800aa8e:	009b      	lsls	r3, r3, #2
 800aa90:	4a16      	ldr	r2, [pc, #88]	@ (800aaec <vTaskSwitchContext+0x150>)
 800aa92:	4413      	add	r3, r2
 800aa94:	60fb      	str	r3, [r7, #12]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	685a      	ldr	r2, [r3, #4]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	605a      	str	r2, [r3, #4]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	685a      	ldr	r2, [r3, #4]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	3308      	adds	r3, #8
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d103      	bne.n	800aab4 <vTaskSwitchContext+0x118>
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	68da      	ldr	r2, [r3, #12]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	605a      	str	r2, [r3, #4]
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	68db      	ldr	r3, [r3, #12]
 800aaba:	4a0a      	ldr	r2, [pc, #40]	@ (800aae4 <vTaskSwitchContext+0x148>)
 800aabc:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800aabe:	4b09      	ldr	r3, [pc, #36]	@ (800aae4 <vTaskSwitchContext+0x148>)
 800aac0:	681b      	ldr	r3, [r3, #0]
                configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800aac2:	4b08      	ldr	r3, [pc, #32]	@ (800aae4 <vTaskSwitchContext+0x148>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	335c      	adds	r3, #92	@ 0x5c
 800aac8:	4a0a      	ldr	r2, [pc, #40]	@ (800aaf4 <vTaskSwitchContext+0x158>)
 800aaca:	6013      	str	r3, [r2, #0]
    }
 800aacc:	bf00      	nop
 800aace:	3720      	adds	r7, #32
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	20000538 	.word	0x20000538
 800aad8:	20000524 	.word	0x20000524
 800aadc:	20000540 	.word	0x20000540
 800aae0:	2000053c 	.word	0x2000053c
 800aae4:	20000410 	.word	0x20000410
 800aae8:	20000518 	.word	0x20000518
 800aaec:	20000414 	.word	0x20000414
 800aaf0:	08010ce0 	.word	0x08010ce0
 800aaf4:	2000018c 	.word	0x2000018c

0800aaf8 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d110      	bne.n	800ab2a <vTaskPlaceOnEventList+0x32>
    __asm volatile
 800ab08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab0c:	b672      	cpsid	i
 800ab0e:	f383 8811 	msr	BASEPRI, r3
 800ab12:	f3bf 8f6f 	isb	sy
 800ab16:	f3bf 8f4f 	dsb	sy
 800ab1a:	b662      	cpsie	i
 800ab1c:	60fb      	str	r3, [r7, #12]
}
 800ab1e:	bf00      	nop
 800ab20:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 800ab24:	4808      	ldr	r0, [pc, #32]	@ (800ab48 <vTaskPlaceOnEventList+0x50>)
 800ab26:	f7f6 fefb 	bl	8001920 <vAssertCalled>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab2a:	4b08      	ldr	r3, [pc, #32]	@ (800ab4c <vTaskPlaceOnEventList+0x54>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	3318      	adds	r3, #24
 800ab30:	4619      	mov	r1, r3
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f7fe fbf3 	bl	800931e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ab38:	2101      	movs	r1, #1
 800ab3a:	6838      	ldr	r0, [r7, #0]
 800ab3c:	f000 fce6 	bl	800b50c <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 800ab40:	bf00      	nop
 800ab42:	3710      	adds	r7, #16
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	08010ce0 	.word	0x08010ce0
 800ab4c:	20000410 	.word	0x20000410

0800ab50 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b086      	sub	sp, #24
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	60b9      	str	r1, [r7, #8]
 800ab5a:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d110      	bne.n	800ab84 <vTaskPlaceOnEventListRestricted+0x34>
    __asm volatile
 800ab62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab66:	b672      	cpsid	i
 800ab68:	f383 8811 	msr	BASEPRI, r3
 800ab6c:	f3bf 8f6f 	isb	sy
 800ab70:	f3bf 8f4f 	dsb	sy
 800ab74:	b662      	cpsie	i
 800ab76:	613b      	str	r3, [r7, #16]
}
 800ab78:	bf00      	nop
 800ab7a:	f241 41be 	movw	r1, #5310	@ 0x14be
 800ab7e:	4819      	ldr	r0, [pc, #100]	@ (800abe4 <vTaskPlaceOnEventListRestricted+0x94>)
 800ab80:	f7f6 fece 	bl	8001920 <vAssertCalled>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	617b      	str	r3, [r7, #20]
 800ab8a:	4b17      	ldr	r3, [pc, #92]	@ (800abe8 <vTaskPlaceOnEventListRestricted+0x98>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	697a      	ldr	r2, [r7, #20]
 800ab90:	61da      	str	r2, [r3, #28]
 800ab92:	4b15      	ldr	r3, [pc, #84]	@ (800abe8 <vTaskPlaceOnEventListRestricted+0x98>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	697a      	ldr	r2, [r7, #20]
 800ab98:	6892      	ldr	r2, [r2, #8]
 800ab9a:	621a      	str	r2, [r3, #32]
 800ab9c:	4b12      	ldr	r3, [pc, #72]	@ (800abe8 <vTaskPlaceOnEventListRestricted+0x98>)
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	689b      	ldr	r3, [r3, #8]
 800aba4:	3218      	adds	r2, #24
 800aba6:	605a      	str	r2, [r3, #4]
 800aba8:	4b0f      	ldr	r3, [pc, #60]	@ (800abe8 <vTaskPlaceOnEventListRestricted+0x98>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f103 0218 	add.w	r2, r3, #24
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	609a      	str	r2, [r3, #8]
 800abb4:	4b0c      	ldr	r3, [pc, #48]	@ (800abe8 <vTaskPlaceOnEventListRestricted+0x98>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	68fa      	ldr	r2, [r7, #12]
 800abba:	629a      	str	r2, [r3, #40]	@ 0x28
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	1c5a      	adds	r2, r3, #1
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d002      	beq.n	800abd2 <vTaskPlaceOnEventListRestricted+0x82>
        {
            xTicksToWait = portMAX_DELAY;
 800abcc:	f04f 33ff 	mov.w	r3, #4294967295
 800abd0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800abd2:	6879      	ldr	r1, [r7, #4]
 800abd4:	68b8      	ldr	r0, [r7, #8]
 800abd6:	f000 fc99 	bl	800b50c <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 800abda:	bf00      	nop
 800abdc:	3718      	adds	r7, #24
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	08010ce0 	.word	0x08010ce0
 800abe8:	20000410 	.word	0x20000410

0800abec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b08a      	sub	sp, #40	@ 0x28
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800abfc:	6a3b      	ldr	r3, [r7, #32]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d110      	bne.n	800ac24 <xTaskRemoveFromEventList+0x38>
    __asm volatile
 800ac02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac06:	b672      	cpsid	i
 800ac08:	f383 8811 	msr	BASEPRI, r3
 800ac0c:	f3bf 8f6f 	isb	sy
 800ac10:	f3bf 8f4f 	dsb	sy
 800ac14:	b662      	cpsie	i
 800ac16:	60fb      	str	r3, [r7, #12]
}
 800ac18:	bf00      	nop
 800ac1a:	f241 41f5 	movw	r1, #5365	@ 0x14f5
 800ac1e:	485b      	ldr	r0, [pc, #364]	@ (800ad8c <xTaskRemoveFromEventList+0x1a0>)
 800ac20:	f7f6 fe7e 	bl	8001920 <vAssertCalled>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800ac24:	6a3b      	ldr	r3, [r7, #32]
 800ac26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac28:	61fb      	str	r3, [r7, #28]
 800ac2a:	6a3b      	ldr	r3, [r7, #32]
 800ac2c:	69db      	ldr	r3, [r3, #28]
 800ac2e:	6a3a      	ldr	r2, [r7, #32]
 800ac30:	6a12      	ldr	r2, [r2, #32]
 800ac32:	609a      	str	r2, [r3, #8]
 800ac34:	6a3b      	ldr	r3, [r7, #32]
 800ac36:	6a1b      	ldr	r3, [r3, #32]
 800ac38:	6a3a      	ldr	r2, [r7, #32]
 800ac3a:	69d2      	ldr	r2, [r2, #28]
 800ac3c:	605a      	str	r2, [r3, #4]
 800ac3e:	69fb      	ldr	r3, [r7, #28]
 800ac40:	685a      	ldr	r2, [r3, #4]
 800ac42:	6a3b      	ldr	r3, [r7, #32]
 800ac44:	3318      	adds	r3, #24
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d103      	bne.n	800ac52 <xTaskRemoveFromEventList+0x66>
 800ac4a:	6a3b      	ldr	r3, [r7, #32]
 800ac4c:	6a1a      	ldr	r2, [r3, #32]
 800ac4e:	69fb      	ldr	r3, [r7, #28]
 800ac50:	605a      	str	r2, [r3, #4]
 800ac52:	6a3b      	ldr	r3, [r7, #32]
 800ac54:	2200      	movs	r2, #0
 800ac56:	629a      	str	r2, [r3, #40]	@ 0x28
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	1e5a      	subs	r2, r3, #1
 800ac5e:	69fb      	ldr	r3, [r7, #28]
 800ac60:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800ac62:	4b4b      	ldr	r3, [pc, #300]	@ (800ad90 <xTaskRemoveFromEventList+0x1a4>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d160      	bne.n	800ad2c <xTaskRemoveFromEventList+0x140>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800ac6a:	6a3b      	ldr	r3, [r7, #32]
 800ac6c:	695b      	ldr	r3, [r3, #20]
 800ac6e:	617b      	str	r3, [r7, #20]
 800ac70:	6a3b      	ldr	r3, [r7, #32]
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	6a3a      	ldr	r2, [r7, #32]
 800ac76:	68d2      	ldr	r2, [r2, #12]
 800ac78:	609a      	str	r2, [r3, #8]
 800ac7a:	6a3b      	ldr	r3, [r7, #32]
 800ac7c:	68db      	ldr	r3, [r3, #12]
 800ac7e:	6a3a      	ldr	r2, [r7, #32]
 800ac80:	6892      	ldr	r2, [r2, #8]
 800ac82:	605a      	str	r2, [r3, #4]
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	685a      	ldr	r2, [r3, #4]
 800ac88:	6a3b      	ldr	r3, [r7, #32]
 800ac8a:	3304      	adds	r3, #4
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d103      	bne.n	800ac98 <xTaskRemoveFromEventList+0xac>
 800ac90:	6a3b      	ldr	r3, [r7, #32]
 800ac92:	68da      	ldr	r2, [r3, #12]
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	605a      	str	r2, [r3, #4]
 800ac98:	6a3b      	ldr	r3, [r7, #32]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	615a      	str	r2, [r3, #20]
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	1e5a      	subs	r2, r3, #1
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800aca8:	6a3b      	ldr	r3, [r7, #32]
 800acaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acac:	2201      	movs	r2, #1
 800acae:	409a      	lsls	r2, r3
 800acb0:	4b38      	ldr	r3, [pc, #224]	@ (800ad94 <xTaskRemoveFromEventList+0x1a8>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4313      	orrs	r3, r2
 800acb6:	4a37      	ldr	r2, [pc, #220]	@ (800ad94 <xTaskRemoveFromEventList+0x1a8>)
 800acb8:	6013      	str	r3, [r2, #0]
 800acba:	6a3b      	ldr	r3, [r7, #32]
 800acbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acbe:	4936      	ldr	r1, [pc, #216]	@ (800ad98 <xTaskRemoveFromEventList+0x1ac>)
 800acc0:	4613      	mov	r3, r2
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	4413      	add	r3, r2
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	440b      	add	r3, r1
 800acca:	3304      	adds	r3, #4
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	613b      	str	r3, [r7, #16]
 800acd0:	6a3b      	ldr	r3, [r7, #32]
 800acd2:	693a      	ldr	r2, [r7, #16]
 800acd4:	609a      	str	r2, [r3, #8]
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	689a      	ldr	r2, [r3, #8]
 800acda:	6a3b      	ldr	r3, [r7, #32]
 800acdc:	60da      	str	r2, [r3, #12]
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	6a3a      	ldr	r2, [r7, #32]
 800ace4:	3204      	adds	r2, #4
 800ace6:	605a      	str	r2, [r3, #4]
 800ace8:	6a3b      	ldr	r3, [r7, #32]
 800acea:	1d1a      	adds	r2, r3, #4
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	609a      	str	r2, [r3, #8]
 800acf0:	6a3b      	ldr	r3, [r7, #32]
 800acf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acf4:	4613      	mov	r3, r2
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	4413      	add	r3, r2
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	4a26      	ldr	r2, [pc, #152]	@ (800ad98 <xTaskRemoveFromEventList+0x1ac>)
 800acfe:	441a      	add	r2, r3
 800ad00:	6a3b      	ldr	r3, [r7, #32]
 800ad02:	615a      	str	r2, [r3, #20]
 800ad04:	6a3b      	ldr	r3, [r7, #32]
 800ad06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad08:	4923      	ldr	r1, [pc, #140]	@ (800ad98 <xTaskRemoveFromEventList+0x1ac>)
 800ad0a:	4613      	mov	r3, r2
 800ad0c:	009b      	lsls	r3, r3, #2
 800ad0e:	4413      	add	r3, r2
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	440b      	add	r3, r1
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	6a3a      	ldr	r2, [r7, #32]
 800ad18:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ad1a:	1c59      	adds	r1, r3, #1
 800ad1c:	481e      	ldr	r0, [pc, #120]	@ (800ad98 <xTaskRemoveFromEventList+0x1ac>)
 800ad1e:	4613      	mov	r3, r2
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	4413      	add	r3, r2
 800ad24:	009b      	lsls	r3, r3, #2
 800ad26:	4403      	add	r3, r0
 800ad28:	6019      	str	r1, [r3, #0]
 800ad2a:	e01b      	b.n	800ad64 <xTaskRemoveFromEventList+0x178>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ad2c:	4b1b      	ldr	r3, [pc, #108]	@ (800ad9c <xTaskRemoveFromEventList+0x1b0>)
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	61bb      	str	r3, [r7, #24]
 800ad32:	6a3b      	ldr	r3, [r7, #32]
 800ad34:	69ba      	ldr	r2, [r7, #24]
 800ad36:	61da      	str	r2, [r3, #28]
 800ad38:	69bb      	ldr	r3, [r7, #24]
 800ad3a:	689a      	ldr	r2, [r3, #8]
 800ad3c:	6a3b      	ldr	r3, [r7, #32]
 800ad3e:	621a      	str	r2, [r3, #32]
 800ad40:	69bb      	ldr	r3, [r7, #24]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	6a3a      	ldr	r2, [r7, #32]
 800ad46:	3218      	adds	r2, #24
 800ad48:	605a      	str	r2, [r3, #4]
 800ad4a:	6a3b      	ldr	r3, [r7, #32]
 800ad4c:	f103 0218 	add.w	r2, r3, #24
 800ad50:	69bb      	ldr	r3, [r7, #24]
 800ad52:	609a      	str	r2, [r3, #8]
 800ad54:	6a3b      	ldr	r3, [r7, #32]
 800ad56:	4a11      	ldr	r2, [pc, #68]	@ (800ad9c <xTaskRemoveFromEventList+0x1b0>)
 800ad58:	629a      	str	r2, [r3, #40]	@ 0x28
 800ad5a:	4b10      	ldr	r3, [pc, #64]	@ (800ad9c <xTaskRemoveFromEventList+0x1b0>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	3301      	adds	r3, #1
 800ad60:	4a0e      	ldr	r2, [pc, #56]	@ (800ad9c <xTaskRemoveFromEventList+0x1b0>)
 800ad62:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ad64:	6a3b      	ldr	r3, [r7, #32]
 800ad66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad68:	4b0d      	ldr	r3, [pc, #52]	@ (800ada0 <xTaskRemoveFromEventList+0x1b4>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d905      	bls.n	800ad7e <xTaskRemoveFromEventList+0x192>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 800ad72:	2301      	movs	r3, #1
 800ad74:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 800ad76:	4b0b      	ldr	r3, [pc, #44]	@ (800ada4 <xTaskRemoveFromEventList+0x1b8>)
 800ad78:	2201      	movs	r2, #1
 800ad7a:	601a      	str	r2, [r3, #0]
 800ad7c:	e001      	b.n	800ad82 <xTaskRemoveFromEventList+0x196>
        }
        else
        {
            xReturn = pdFALSE;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 800ad82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3728      	adds	r7, #40	@ 0x28
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	08010ce0 	.word	0x08010ce0
 800ad90:	20000538 	.word	0x20000538
 800ad94:	20000518 	.word	0x20000518
 800ad98:	20000414 	.word	0x20000414
 800ad9c:	200004d0 	.word	0x200004d0
 800ada0:	20000410 	.word	0x20000410
 800ada4:	20000524 	.word	0x20000524

0800ada8 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ada8:	b480      	push	{r7}
 800adaa:	b083      	sub	sp, #12
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800adb0:	4b06      	ldr	r3, [pc, #24]	@ (800adcc <vTaskInternalSetTimeOutState+0x24>)
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800adb8:	4b05      	ldr	r3, [pc, #20]	@ (800add0 <vTaskInternalSetTimeOutState+0x28>)
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 800adc0:	bf00      	nop
 800adc2:	370c      	adds	r7, #12
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr
 800adcc:	20000528 	.word	0x20000528
 800add0:	20000514 	.word	0x20000514

0800add4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b088      	sub	sp, #32
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d110      	bne.n	800ae06 <xTaskCheckForTimeOut+0x32>
    __asm volatile
 800ade4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ade8:	b672      	cpsid	i
 800adea:	f383 8811 	msr	BASEPRI, r3
 800adee:	f3bf 8f6f 	isb	sy
 800adf2:	f3bf 8f4f 	dsb	sy
 800adf6:	b662      	cpsie	i
 800adf8:	613b      	str	r3, [r7, #16]
}
 800adfa:	bf00      	nop
 800adfc:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 800ae00:	482b      	ldr	r0, [pc, #172]	@ (800aeb0 <xTaskCheckForTimeOut+0xdc>)
 800ae02:	f7f6 fd8d 	bl	8001920 <vAssertCalled>
    configASSERT( pxTicksToWait );
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d110      	bne.n	800ae2e <xTaskCheckForTimeOut+0x5a>
    __asm volatile
 800ae0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae10:	b672      	cpsid	i
 800ae12:	f383 8811 	msr	BASEPRI, r3
 800ae16:	f3bf 8f6f 	isb	sy
 800ae1a:	f3bf 8f4f 	dsb	sy
 800ae1e:	b662      	cpsie	i
 800ae20:	60fb      	str	r3, [r7, #12]
}
 800ae22:	bf00      	nop
 800ae24:	f241 51a6 	movw	r1, #5542	@ 0x15a6
 800ae28:	4821      	ldr	r0, [pc, #132]	@ (800aeb0 <xTaskCheckForTimeOut+0xdc>)
 800ae2a:	f7f6 fd79 	bl	8001920 <vAssertCalled>

    taskENTER_CRITICAL();
 800ae2e:	f000 fff7 	bl	800be20 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800ae32:	4b20      	ldr	r3, [pc, #128]	@ (800aeb4 <xTaskCheckForTimeOut+0xe0>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	69ba      	ldr	r2, [r7, #24]
 800ae3e:	1ad3      	subs	r3, r2, r3
 800ae40:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae4a:	d102      	bne.n	800ae52 <xTaskCheckForTimeOut+0x7e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	61fb      	str	r3, [r7, #28]
 800ae50:	e026      	b.n	800aea0 <xTaskCheckForTimeOut+0xcc>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681a      	ldr	r2, [r3, #0]
 800ae56:	4b18      	ldr	r3, [pc, #96]	@ (800aeb8 <xTaskCheckForTimeOut+0xe4>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d00a      	beq.n	800ae74 <xTaskCheckForTimeOut+0xa0>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	69ba      	ldr	r2, [r7, #24]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d305      	bcc.n	800ae74 <xTaskCheckForTimeOut+0xa0>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	601a      	str	r2, [r3, #0]
 800ae72:	e015      	b.n	800aea0 <xTaskCheckForTimeOut+0xcc>
        }
        else if( xElapsedTime < *pxTicksToWait )
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	697a      	ldr	r2, [r7, #20]
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d20b      	bcs.n	800ae96 <xTaskCheckForTimeOut+0xc2>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	1ad2      	subs	r2, r2, r3
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f7ff ff8c 	bl	800ada8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800ae90:	2300      	movs	r3, #0
 800ae92:	61fb      	str	r3, [r7, #28]
 800ae94:	e004      	b.n	800aea0 <xTaskCheckForTimeOut+0xcc>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800aea0:	f000 fff6 	bl	800be90 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 800aea4:	69fb      	ldr	r3, [r7, #28]
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3720      	adds	r7, #32
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop
 800aeb0:	08010ce0 	.word	0x08010ce0
 800aeb4:	20000514 	.word	0x20000514
 800aeb8:	20000528 	.word	0x20000528

0800aebc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aebc:	b480      	push	{r7}
 800aebe:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 800aec0:	4b03      	ldr	r3, [pc, #12]	@ (800aed0 <vTaskMissedYield+0x14>)
 800aec2:	2201      	movs	r2, #1
 800aec4:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 800aec6:	bf00      	nop
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr
 800aed0:	20000524 	.word	0x20000524

0800aed4 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800aedc:	f000 f852 	bl	800af84 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 800aee0:	4b06      	ldr	r3, [pc, #24]	@ (800aefc <prvIdleTask+0x28>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d9f9      	bls.n	800aedc <prvIdleTask+0x8>
            {
                taskYIELD();
 800aee8:	4b05      	ldr	r3, [pc, #20]	@ (800af00 <prvIdleTask+0x2c>)
 800aeea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aeee:	601a      	str	r2, [r3, #0]
 800aef0:	f3bf 8f4f 	dsb	sy
 800aef4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800aef8:	e7f0      	b.n	800aedc <prvIdleTask+0x8>
 800aefa:	bf00      	nop
 800aefc:	20000414 	.word	0x20000414
 800af00:	e000ed04 	.word	0xe000ed04

0800af04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b082      	sub	sp, #8
 800af08:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af0a:	2300      	movs	r3, #0
 800af0c:	607b      	str	r3, [r7, #4]
 800af0e:	e00c      	b.n	800af2a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	4613      	mov	r3, r2
 800af14:	009b      	lsls	r3, r3, #2
 800af16:	4413      	add	r3, r2
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	4a12      	ldr	r2, [pc, #72]	@ (800af64 <prvInitialiseTaskLists+0x60>)
 800af1c:	4413      	add	r3, r2
 800af1e:	4618      	mov	r0, r3
 800af20:	f7fe f9d0 	bl	80092c4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	3301      	adds	r3, #1
 800af28:	607b      	str	r3, [r7, #4]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2b06      	cmp	r3, #6
 800af2e:	d9ef      	bls.n	800af10 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800af30:	480d      	ldr	r0, [pc, #52]	@ (800af68 <prvInitialiseTaskLists+0x64>)
 800af32:	f7fe f9c7 	bl	80092c4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800af36:	480d      	ldr	r0, [pc, #52]	@ (800af6c <prvInitialiseTaskLists+0x68>)
 800af38:	f7fe f9c4 	bl	80092c4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800af3c:	480c      	ldr	r0, [pc, #48]	@ (800af70 <prvInitialiseTaskLists+0x6c>)
 800af3e:	f7fe f9c1 	bl	80092c4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800af42:	480c      	ldr	r0, [pc, #48]	@ (800af74 <prvInitialiseTaskLists+0x70>)
 800af44:	f7fe f9be 	bl	80092c4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800af48:	480b      	ldr	r0, [pc, #44]	@ (800af78 <prvInitialiseTaskLists+0x74>)
 800af4a:	f7fe f9bb 	bl	80092c4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800af4e:	4b0b      	ldr	r3, [pc, #44]	@ (800af7c <prvInitialiseTaskLists+0x78>)
 800af50:	4a05      	ldr	r2, [pc, #20]	@ (800af68 <prvInitialiseTaskLists+0x64>)
 800af52:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800af54:	4b0a      	ldr	r3, [pc, #40]	@ (800af80 <prvInitialiseTaskLists+0x7c>)
 800af56:	4a05      	ldr	r2, [pc, #20]	@ (800af6c <prvInitialiseTaskLists+0x68>)
 800af58:	601a      	str	r2, [r3, #0]
}
 800af5a:	bf00      	nop
 800af5c:	3708      	adds	r7, #8
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}
 800af62:	bf00      	nop
 800af64:	20000414 	.word	0x20000414
 800af68:	200004a0 	.word	0x200004a0
 800af6c:	200004b4 	.word	0x200004b4
 800af70:	200004d0 	.word	0x200004d0
 800af74:	200004e4 	.word	0x200004e4
 800af78:	200004fc 	.word	0x200004fc
 800af7c:	200004c8 	.word	0x200004c8
 800af80:	200004cc 	.word	0x200004cc

0800af84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800af8a:	e019      	b.n	800afc0 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 800af8c:	f000 ff48 	bl	800be20 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800af90:	4b10      	ldr	r3, [pc, #64]	@ (800afd4 <prvCheckTasksWaitingTermination+0x50>)
 800af92:	68db      	ldr	r3, [r3, #12]
 800af94:	68db      	ldr	r3, [r3, #12]
 800af96:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	3304      	adds	r3, #4
 800af9c:	4618      	mov	r0, r3
 800af9e:	f7fe f9f7 	bl	8009390 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800afa2:	4b0d      	ldr	r3, [pc, #52]	@ (800afd8 <prvCheckTasksWaitingTermination+0x54>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	3b01      	subs	r3, #1
 800afa8:	4a0b      	ldr	r2, [pc, #44]	@ (800afd8 <prvCheckTasksWaitingTermination+0x54>)
 800afaa:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 800afac:	4b0b      	ldr	r3, [pc, #44]	@ (800afdc <prvCheckTasksWaitingTermination+0x58>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	3b01      	subs	r3, #1
 800afb2:	4a0a      	ldr	r2, [pc, #40]	@ (800afdc <prvCheckTasksWaitingTermination+0x58>)
 800afb4:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800afb6:	f000 ff6b 	bl	800be90 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f000 f810 	bl	800afe0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800afc0:	4b06      	ldr	r3, [pc, #24]	@ (800afdc <prvCheckTasksWaitingTermination+0x58>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d1e1      	bne.n	800af8c <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800afc8:	bf00      	nop
 800afca:	bf00      	nop
 800afcc:	3708      	adds	r7, #8
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	200004e4 	.word	0x200004e4
 800afd8:	20000510 	.word	0x20000510
 800afdc:	200004f8 	.word	0x200004f8

0800afe0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b082      	sub	sp, #8
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
        portCLEAN_UP_TCB( pxTCB );

        #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxTCB->xTLSBlock );
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	335c      	adds	r3, #92	@ 0x5c
 800afec:	4618      	mov	r0, r3
 800afee:	f003 f8f5 	bl	800e1dc <_reclaim_reent>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7f6 ffc0 	bl	8001f7c <vPortFree>
            vPortFree( pxTCB );
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f7f6 ffbd 	bl	8001f7c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800b002:	bf00      	nop
 800b004:	3708      	adds	r7, #8
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
	...

0800b00c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b00c:	b480      	push	{r7}
 800b00e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b010:	4b0a      	ldr	r3, [pc, #40]	@ (800b03c <prvResetNextTaskUnblockTime+0x30>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d104      	bne.n	800b024 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800b01a:	4b09      	ldr	r3, [pc, #36]	@ (800b040 <prvResetNextTaskUnblockTime+0x34>)
 800b01c:	f04f 32ff 	mov.w	r2, #4294967295
 800b020:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800b022:	e005      	b.n	800b030 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b024:	4b05      	ldr	r3, [pc, #20]	@ (800b03c <prvResetNextTaskUnblockTime+0x30>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	68db      	ldr	r3, [r3, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4a04      	ldr	r2, [pc, #16]	@ (800b040 <prvResetNextTaskUnblockTime+0x34>)
 800b02e:	6013      	str	r3, [r2, #0]
}
 800b030:	bf00      	nop
 800b032:	46bd      	mov	sp, r7
 800b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b038:	4770      	bx	lr
 800b03a:	bf00      	nop
 800b03c:	200004c8 	.word	0x200004c8
 800b040:	20000530 	.word	0x20000530

0800b044 <xTaskGetCurrentTaskHandle>:

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) || ( configNUMBER_OF_CORES > 1 )

    #if ( configNUMBER_OF_CORES == 1 )
        TaskHandle_t xTaskGetCurrentTaskHandle( void )
        {
 800b044:	b480      	push	{r7}
 800b046:	b083      	sub	sp, #12
 800b048:	af00      	add	r7, sp, #0
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
 800b04a:	4b05      	ldr	r3, [pc, #20]	@ (800b060 <xTaskGetCurrentTaskHandle+0x1c>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	607b      	str	r3, [r7, #4]

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
 800b050:	687b      	ldr	r3, [r7, #4]
        }
 800b052:	4618      	mov	r0, r3
 800b054:	370c      	adds	r7, #12
 800b056:	46bd      	mov	sp, r7
 800b058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05c:	4770      	bx	lr
 800b05e:	bf00      	nop
 800b060:	20000410 	.word	0x20000410

0800b064 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800b064:	b480      	push	{r7}
 800b066:	b083      	sub	sp, #12
 800b068:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 800b06a:	4b0b      	ldr	r3, [pc, #44]	@ (800b098 <xTaskGetSchedulerState+0x34>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d102      	bne.n	800b078 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800b072:	2301      	movs	r3, #1
 800b074:	607b      	str	r3, [r7, #4]
 800b076:	e008      	b.n	800b08a <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800b078:	4b08      	ldr	r3, [pc, #32]	@ (800b09c <xTaskGetSchedulerState+0x38>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d102      	bne.n	800b086 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 800b080:	2302      	movs	r3, #2
 800b082:	607b      	str	r3, [r7, #4]
 800b084:	e001      	b.n	800b08a <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 800b086:	2300      	movs	r3, #0
 800b088:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 800b08a:	687b      	ldr	r3, [r7, #4]
    }
 800b08c:	4618      	mov	r0, r3
 800b08e:	370c      	adds	r7, #12
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr
 800b098:	2000051c 	.word	0x2000051c
 800b09c:	20000538 	.word	0x20000538

0800b0a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b086      	sub	sp, #24
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	f000 8089 	beq.w	800b1ca <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0bc:	4b45      	ldr	r3, [pc, #276]	@ (800b1d4 <xTaskPriorityInherit+0x134>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d278      	bcs.n	800b1b8 <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	699b      	ldr	r3, [r3, #24]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	db06      	blt.n	800b0dc <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 800b0ce:	4b41      	ldr	r3, [pc, #260]	@ (800b1d4 <xTaskPriorityInherit+0x134>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0d4:	f1c3 0207 	rsb	r2, r3, #7
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	6959      	ldr	r1, [r3, #20]
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0e4:	4613      	mov	r3, r2
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	4413      	add	r3, r2
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	4a3a      	ldr	r2, [pc, #232]	@ (800b1d8 <xTaskPriorityInherit+0x138>)
 800b0ee:	4413      	add	r3, r2
 800b0f0:	4299      	cmp	r1, r3
 800b0f2:	d159      	bne.n	800b1a8 <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	3304      	adds	r3, #4
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f7fe f949 	bl	8009390 <uxListRemove>
 800b0fe:	4603      	mov	r3, r0
 800b100:	2b00      	cmp	r3, #0
 800b102:	d10a      	bne.n	800b11a <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b108:	2201      	movs	r2, #1
 800b10a:	fa02 f303 	lsl.w	r3, r2, r3
 800b10e:	43da      	mvns	r2, r3
 800b110:	4b32      	ldr	r3, [pc, #200]	@ (800b1dc <xTaskPriorityInherit+0x13c>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4013      	ands	r3, r2
 800b116:	4a31      	ldr	r2, [pc, #196]	@ (800b1dc <xTaskPriorityInherit+0x13c>)
 800b118:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b11a:	4b2e      	ldr	r3, [pc, #184]	@ (800b1d4 <xTaskPriorityInherit+0x134>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b128:	2201      	movs	r2, #1
 800b12a:	409a      	lsls	r2, r3
 800b12c:	4b2b      	ldr	r3, [pc, #172]	@ (800b1dc <xTaskPriorityInherit+0x13c>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4313      	orrs	r3, r2
 800b132:	4a2a      	ldr	r2, [pc, #168]	@ (800b1dc <xTaskPriorityInherit+0x13c>)
 800b134:	6013      	str	r3, [r2, #0]
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b13a:	4927      	ldr	r1, [pc, #156]	@ (800b1d8 <xTaskPriorityInherit+0x138>)
 800b13c:	4613      	mov	r3, r2
 800b13e:	009b      	lsls	r3, r3, #2
 800b140:	4413      	add	r3, r2
 800b142:	009b      	lsls	r3, r3, #2
 800b144:	440b      	add	r3, r1
 800b146:	3304      	adds	r3, #4
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	60fb      	str	r3, [r7, #12]
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	68fa      	ldr	r2, [r7, #12]
 800b150:	609a      	str	r2, [r3, #8]
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	689a      	ldr	r2, [r3, #8]
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	60da      	str	r2, [r3, #12]
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	689b      	ldr	r3, [r3, #8]
 800b15e:	693a      	ldr	r2, [r7, #16]
 800b160:	3204      	adds	r2, #4
 800b162:	605a      	str	r2, [r3, #4]
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	1d1a      	adds	r2, r3, #4
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	609a      	str	r2, [r3, #8]
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b170:	4613      	mov	r3, r2
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	4413      	add	r3, r2
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	4a17      	ldr	r2, [pc, #92]	@ (800b1d8 <xTaskPriorityInherit+0x138>)
 800b17a:	441a      	add	r2, r3
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	615a      	str	r2, [r3, #20]
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b184:	4914      	ldr	r1, [pc, #80]	@ (800b1d8 <xTaskPriorityInherit+0x138>)
 800b186:	4613      	mov	r3, r2
 800b188:	009b      	lsls	r3, r3, #2
 800b18a:	4413      	add	r3, r2
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	440b      	add	r3, r1
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	693a      	ldr	r2, [r7, #16]
 800b194:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b196:	1c59      	adds	r1, r3, #1
 800b198:	480f      	ldr	r0, [pc, #60]	@ (800b1d8 <xTaskPriorityInherit+0x138>)
 800b19a:	4613      	mov	r3, r2
 800b19c:	009b      	lsls	r3, r3, #2
 800b19e:	4413      	add	r3, r2
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	4403      	add	r3, r0
 800b1a4:	6019      	str	r1, [r3, #0]
 800b1a6:	e004      	b.n	800b1b2 <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b1a8:	4b0a      	ldr	r3, [pc, #40]	@ (800b1d4 <xTaskPriorityInherit+0x134>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	617b      	str	r3, [r7, #20]
 800b1b6:	e008      	b.n	800b1ca <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b1bc:	4b05      	ldr	r3, [pc, #20]	@ (800b1d4 <xTaskPriorityInherit+0x134>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d201      	bcs.n	800b1ca <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 800b1ca:	697b      	ldr	r3, [r7, #20]
    }
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3718      	adds	r7, #24
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}
 800b1d4:	20000410 	.word	0x20000410
 800b1d8:	20000414 	.word	0x20000414
 800b1dc:	20000518 	.word	0x20000518

0800b1e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b088      	sub	sp, #32
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	f000 809a 	beq.w	800b32c <xTaskPriorityDisinherit+0x14c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800b1f8:	4b4f      	ldr	r3, [pc, #316]	@ (800b338 <xTaskPriorityDisinherit+0x158>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	69ba      	ldr	r2, [r7, #24]
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d010      	beq.n	800b224 <xTaskPriorityDisinherit+0x44>
    __asm volatile
 800b202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b206:	b672      	cpsid	i
 800b208:	f383 8811 	msr	BASEPRI, r3
 800b20c:	f3bf 8f6f 	isb	sy
 800b210:	f3bf 8f4f 	dsb	sy
 800b214:	b662      	cpsie	i
 800b216:	613b      	str	r3, [r7, #16]
}
 800b218:	bf00      	nop
 800b21a:	f641 2128 	movw	r1, #6696	@ 0x1a28
 800b21e:	4847      	ldr	r0, [pc, #284]	@ (800b33c <xTaskPriorityDisinherit+0x15c>)
 800b220:	f7f6 fb7e 	bl	8001920 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 800b224:	69bb      	ldr	r3, [r7, #24]
 800b226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d110      	bne.n	800b24e <xTaskPriorityDisinherit+0x6e>
    __asm volatile
 800b22c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b230:	b672      	cpsid	i
 800b232:	f383 8811 	msr	BASEPRI, r3
 800b236:	f3bf 8f6f 	isb	sy
 800b23a:	f3bf 8f4f 	dsb	sy
 800b23e:	b662      	cpsie	i
 800b240:	60fb      	str	r3, [r7, #12]
}
 800b242:	bf00      	nop
 800b244:	f641 2129 	movw	r1, #6697	@ 0x1a29
 800b248:	483c      	ldr	r0, [pc, #240]	@ (800b33c <xTaskPriorityDisinherit+0x15c>)
 800b24a:	f7f6 fb69 	bl	8001920 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 800b24e:	69bb      	ldr	r3, [r7, #24]
 800b250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b252:	1e5a      	subs	r2, r3, #1
 800b254:	69bb      	ldr	r3, [r7, #24]
 800b256:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b258:	69bb      	ldr	r3, [r7, #24]
 800b25a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b25c:	69bb      	ldr	r3, [r7, #24]
 800b25e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b260:	429a      	cmp	r2, r3
 800b262:	d063      	beq.n	800b32c <xTaskPriorityDisinherit+0x14c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b264:	69bb      	ldr	r3, [r7, #24]
 800b266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d15f      	bne.n	800b32c <xTaskPriorityDisinherit+0x14c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b26c:	69bb      	ldr	r3, [r7, #24]
 800b26e:	3304      	adds	r3, #4
 800b270:	4618      	mov	r0, r3
 800b272:	f7fe f88d 	bl	8009390 <uxListRemove>
 800b276:	4603      	mov	r3, r0
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d10a      	bne.n	800b292 <xTaskPriorityDisinherit+0xb2>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b27c:	69bb      	ldr	r3, [r7, #24]
 800b27e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b280:	2201      	movs	r2, #1
 800b282:	fa02 f303 	lsl.w	r3, r2, r3
 800b286:	43da      	mvns	r2, r3
 800b288:	4b2d      	ldr	r3, [pc, #180]	@ (800b340 <xTaskPriorityDisinherit+0x160>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4013      	ands	r3, r2
 800b28e:	4a2c      	ldr	r2, [pc, #176]	@ (800b340 <xTaskPriorityDisinherit+0x160>)
 800b290:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b296:	69bb      	ldr	r3, [r7, #24]
 800b298:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 800b29a:	69bb      	ldr	r3, [r7, #24]
 800b29c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b29e:	f1c3 0207 	rsb	r2, r3, #7
 800b2a2:	69bb      	ldr	r3, [r7, #24]
 800b2a4:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800b2a6:	69bb      	ldr	r3, [r7, #24]
 800b2a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	409a      	lsls	r2, r3
 800b2ae:	4b24      	ldr	r3, [pc, #144]	@ (800b340 <xTaskPriorityDisinherit+0x160>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	4a22      	ldr	r2, [pc, #136]	@ (800b340 <xTaskPriorityDisinherit+0x160>)
 800b2b6:	6013      	str	r3, [r2, #0]
 800b2b8:	69bb      	ldr	r3, [r7, #24]
 800b2ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2bc:	4921      	ldr	r1, [pc, #132]	@ (800b344 <xTaskPriorityDisinherit+0x164>)
 800b2be:	4613      	mov	r3, r2
 800b2c0:	009b      	lsls	r3, r3, #2
 800b2c2:	4413      	add	r3, r2
 800b2c4:	009b      	lsls	r3, r3, #2
 800b2c6:	440b      	add	r3, r1
 800b2c8:	3304      	adds	r3, #4
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	617b      	str	r3, [r7, #20]
 800b2ce:	69bb      	ldr	r3, [r7, #24]
 800b2d0:	697a      	ldr	r2, [r7, #20]
 800b2d2:	609a      	str	r2, [r3, #8]
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	689a      	ldr	r2, [r3, #8]
 800b2d8:	69bb      	ldr	r3, [r7, #24]
 800b2da:	60da      	str	r2, [r3, #12]
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	689b      	ldr	r3, [r3, #8]
 800b2e0:	69ba      	ldr	r2, [r7, #24]
 800b2e2:	3204      	adds	r2, #4
 800b2e4:	605a      	str	r2, [r3, #4]
 800b2e6:	69bb      	ldr	r3, [r7, #24]
 800b2e8:	1d1a      	adds	r2, r3, #4
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	609a      	str	r2, [r3, #8]
 800b2ee:	69bb      	ldr	r3, [r7, #24]
 800b2f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2f2:	4613      	mov	r3, r2
 800b2f4:	009b      	lsls	r3, r3, #2
 800b2f6:	4413      	add	r3, r2
 800b2f8:	009b      	lsls	r3, r3, #2
 800b2fa:	4a12      	ldr	r2, [pc, #72]	@ (800b344 <xTaskPriorityDisinherit+0x164>)
 800b2fc:	441a      	add	r2, r3
 800b2fe:	69bb      	ldr	r3, [r7, #24]
 800b300:	615a      	str	r2, [r3, #20]
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b306:	490f      	ldr	r1, [pc, #60]	@ (800b344 <xTaskPriorityDisinherit+0x164>)
 800b308:	4613      	mov	r3, r2
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	4413      	add	r3, r2
 800b30e:	009b      	lsls	r3, r3, #2
 800b310:	440b      	add	r3, r1
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	69ba      	ldr	r2, [r7, #24]
 800b316:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b318:	1c59      	adds	r1, r3, #1
 800b31a:	480a      	ldr	r0, [pc, #40]	@ (800b344 <xTaskPriorityDisinherit+0x164>)
 800b31c:	4613      	mov	r3, r2
 800b31e:	009b      	lsls	r3, r3, #2
 800b320:	4413      	add	r3, r2
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	4403      	add	r3, r0
 800b326:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800b328:	2301      	movs	r3, #1
 800b32a:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 800b32c:	69fb      	ldr	r3, [r7, #28]
    }
 800b32e:	4618      	mov	r0, r3
 800b330:	3720      	adds	r7, #32
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	20000410 	.word	0x20000410
 800b33c:	08010ce0 	.word	0x08010ce0
 800b340:	20000518 	.word	0x20000518
 800b344:	20000414 	.word	0x20000414

0800b348 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800b348:	b580      	push	{r7, lr}
 800b34a:	b08a      	sub	sp, #40	@ 0x28
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b356:	2301      	movs	r3, #1
 800b358:	61fb      	str	r3, [r7, #28]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	f000 80b0 	beq.w	800b4c2 <vTaskPriorityDisinheritAfterTimeout+0x17a>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800b362:	6a3b      	ldr	r3, [r7, #32]
 800b364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b366:	2b00      	cmp	r3, #0
 800b368:	d110      	bne.n	800b38c <vTaskPriorityDisinheritAfterTimeout+0x44>
    __asm volatile
 800b36a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b36e:	b672      	cpsid	i
 800b370:	f383 8811 	msr	BASEPRI, r3
 800b374:	f3bf 8f6f 	isb	sy
 800b378:	f3bf 8f4f 	dsb	sy
 800b37c:	b662      	cpsie	i
 800b37e:	613b      	str	r3, [r7, #16]
}
 800b380:	bf00      	nop
 800b382:	f641 2186 	movw	r1, #6790	@ 0x1a86
 800b386:	4851      	ldr	r0, [pc, #324]	@ (800b4cc <vTaskPriorityDisinheritAfterTimeout+0x184>)
 800b388:	f7f6 faca 	bl	8001920 <vAssertCalled>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b38c:	6a3b      	ldr	r3, [r7, #32]
 800b38e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b390:	683a      	ldr	r2, [r7, #0]
 800b392:	429a      	cmp	r2, r3
 800b394:	d902      	bls.n	800b39c <vTaskPriorityDisinheritAfterTimeout+0x54>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	627b      	str	r3, [r7, #36]	@ 0x24
 800b39a:	e002      	b.n	800b3a2 <vTaskPriorityDisinheritAfterTimeout+0x5a>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800b39c:	6a3b      	ldr	r3, [r7, #32]
 800b39e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b3a0:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800b3a2:	6a3b      	ldr	r3, [r7, #32]
 800b3a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	f000 808a 	beq.w	800b4c2 <vTaskPriorityDisinheritAfterTimeout+0x17a>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b3ae:	6a3b      	ldr	r3, [r7, #32]
 800b3b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3b2:	69fa      	ldr	r2, [r7, #28]
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	f040 8084 	bne.w	800b4c2 <vTaskPriorityDisinheritAfterTimeout+0x17a>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800b3ba:	4b45      	ldr	r3, [pc, #276]	@ (800b4d0 <vTaskPriorityDisinheritAfterTimeout+0x188>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	6a3a      	ldr	r2, [r7, #32]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d110      	bne.n	800b3e6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
    __asm volatile
 800b3c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3c8:	b672      	cpsid	i
 800b3ca:	f383 8811 	msr	BASEPRI, r3
 800b3ce:	f3bf 8f6f 	isb	sy
 800b3d2:	f3bf 8f4f 	dsb	sy
 800b3d6:	b662      	cpsie	i
 800b3d8:	60fb      	str	r3, [r7, #12]
}
 800b3da:	bf00      	nop
 800b3dc:	f641 21a1 	movw	r1, #6817	@ 0x1aa1
 800b3e0:	483a      	ldr	r0, [pc, #232]	@ (800b4cc <vTaskPriorityDisinheritAfterTimeout+0x184>)
 800b3e2:	f7f6 fa9d 	bl	8001920 <vAssertCalled>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b3e6:	6a3b      	ldr	r3, [r7, #32]
 800b3e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3ea:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 800b3ec:	6a3b      	ldr	r3, [r7, #32]
 800b3ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3f0:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800b3f2:	6a3b      	ldr	r3, [r7, #32]
 800b3f4:	699b      	ldr	r3, [r3, #24]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	db04      	blt.n	800b404 <vTaskPriorityDisinheritAfterTimeout+0xbc>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 800b3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3fc:	f1c3 0207 	rsb	r2, r3, #7
 800b400:	6a3b      	ldr	r3, [r7, #32]
 800b402:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b404:	6a3b      	ldr	r3, [r7, #32]
 800b406:	6959      	ldr	r1, [r3, #20]
 800b408:	69ba      	ldr	r2, [r7, #24]
 800b40a:	4613      	mov	r3, r2
 800b40c:	009b      	lsls	r3, r3, #2
 800b40e:	4413      	add	r3, r2
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	4a30      	ldr	r2, [pc, #192]	@ (800b4d4 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 800b414:	4413      	add	r3, r2
 800b416:	4299      	cmp	r1, r3
 800b418:	d153      	bne.n	800b4c2 <vTaskPriorityDisinheritAfterTimeout+0x17a>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b41a:	6a3b      	ldr	r3, [r7, #32]
 800b41c:	3304      	adds	r3, #4
 800b41e:	4618      	mov	r0, r3
 800b420:	f7fd ffb6 	bl	8009390 <uxListRemove>
 800b424:	4603      	mov	r3, r0
 800b426:	2b00      	cmp	r3, #0
 800b428:	d10a      	bne.n	800b440 <vTaskPriorityDisinheritAfterTimeout+0xf8>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b42a:	6a3b      	ldr	r3, [r7, #32]
 800b42c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b42e:	2201      	movs	r2, #1
 800b430:	fa02 f303 	lsl.w	r3, r2, r3
 800b434:	43da      	mvns	r2, r3
 800b436:	4b28      	ldr	r3, [pc, #160]	@ (800b4d8 <vTaskPriorityDisinheritAfterTimeout+0x190>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4013      	ands	r3, r2
 800b43c:	4a26      	ldr	r2, [pc, #152]	@ (800b4d8 <vTaskPriorityDisinheritAfterTimeout+0x190>)
 800b43e:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800b440:	6a3b      	ldr	r3, [r7, #32]
 800b442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b444:	2201      	movs	r2, #1
 800b446:	409a      	lsls	r2, r3
 800b448:	4b23      	ldr	r3, [pc, #140]	@ (800b4d8 <vTaskPriorityDisinheritAfterTimeout+0x190>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4313      	orrs	r3, r2
 800b44e:	4a22      	ldr	r2, [pc, #136]	@ (800b4d8 <vTaskPriorityDisinheritAfterTimeout+0x190>)
 800b450:	6013      	str	r3, [r2, #0]
 800b452:	6a3b      	ldr	r3, [r7, #32]
 800b454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b456:	491f      	ldr	r1, [pc, #124]	@ (800b4d4 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 800b458:	4613      	mov	r3, r2
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	4413      	add	r3, r2
 800b45e:	009b      	lsls	r3, r3, #2
 800b460:	440b      	add	r3, r1
 800b462:	3304      	adds	r3, #4
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	617b      	str	r3, [r7, #20]
 800b468:	6a3b      	ldr	r3, [r7, #32]
 800b46a:	697a      	ldr	r2, [r7, #20]
 800b46c:	609a      	str	r2, [r3, #8]
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	689a      	ldr	r2, [r3, #8]
 800b472:	6a3b      	ldr	r3, [r7, #32]
 800b474:	60da      	str	r2, [r3, #12]
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	689b      	ldr	r3, [r3, #8]
 800b47a:	6a3a      	ldr	r2, [r7, #32]
 800b47c:	3204      	adds	r2, #4
 800b47e:	605a      	str	r2, [r3, #4]
 800b480:	6a3b      	ldr	r3, [r7, #32]
 800b482:	1d1a      	adds	r2, r3, #4
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	609a      	str	r2, [r3, #8]
 800b488:	6a3b      	ldr	r3, [r7, #32]
 800b48a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b48c:	4613      	mov	r3, r2
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	4413      	add	r3, r2
 800b492:	009b      	lsls	r3, r3, #2
 800b494:	4a0f      	ldr	r2, [pc, #60]	@ (800b4d4 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 800b496:	441a      	add	r2, r3
 800b498:	6a3b      	ldr	r3, [r7, #32]
 800b49a:	615a      	str	r2, [r3, #20]
 800b49c:	6a3b      	ldr	r3, [r7, #32]
 800b49e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4a0:	490c      	ldr	r1, [pc, #48]	@ (800b4d4 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 800b4a2:	4613      	mov	r3, r2
 800b4a4:	009b      	lsls	r3, r3, #2
 800b4a6:	4413      	add	r3, r2
 800b4a8:	009b      	lsls	r3, r3, #2
 800b4aa:	440b      	add	r3, r1
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	6a3a      	ldr	r2, [r7, #32]
 800b4b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b4b2:	1c59      	adds	r1, r3, #1
 800b4b4:	4807      	ldr	r0, [pc, #28]	@ (800b4d4 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 800b4b6:	4613      	mov	r3, r2
 800b4b8:	009b      	lsls	r3, r3, #2
 800b4ba:	4413      	add	r3, r2
 800b4bc:	009b      	lsls	r3, r3, #2
 800b4be:	4403      	add	r3, r0
 800b4c0:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 800b4c2:	bf00      	nop
 800b4c4:	3728      	adds	r7, #40	@ 0x28
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	08010ce0 	.word	0x08010ce0
 800b4d0:	20000410 	.word	0x20000410
 800b4d4:	20000414 	.word	0x20000414
 800b4d8:	20000518 	.word	0x20000518

0800b4dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 800b4e2:	4b09      	ldr	r3, [pc, #36]	@ (800b508 <pvTaskIncrementMutexHeldCount+0x2c>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d004      	beq.n	800b4f8 <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4f2:	1c5a      	adds	r2, r3, #1
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 800b4f8:	687b      	ldr	r3, [r7, #4]
    }
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	370c      	adds	r7, #12
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr
 800b506:	bf00      	nop
 800b508:	20000410 	.word	0x20000410

0800b50c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b088      	sub	sp, #32
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800b516:	4b37      	ldr	r3, [pc, #220]	@ (800b5f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 800b51c:	4b36      	ldr	r3, [pc, #216]	@ (800b5f8 <prvAddCurrentTaskToDelayedList+0xec>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800b522:	4b36      	ldr	r3, [pc, #216]	@ (800b5fc <prvAddCurrentTaskToDelayedList+0xf0>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b528:	4b35      	ldr	r3, [pc, #212]	@ (800b600 <prvAddCurrentTaskToDelayedList+0xf4>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	3304      	adds	r3, #4
 800b52e:	4618      	mov	r0, r3
 800b530:	f7fd ff2e 	bl	8009390 <uxListRemove>
 800b534:	4603      	mov	r3, r0
 800b536:	2b00      	cmp	r3, #0
 800b538:	d10b      	bne.n	800b552 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800b53a:	4b31      	ldr	r3, [pc, #196]	@ (800b600 <prvAddCurrentTaskToDelayedList+0xf4>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b540:	2201      	movs	r2, #1
 800b542:	fa02 f303 	lsl.w	r3, r2, r3
 800b546:	43da      	mvns	r2, r3
 800b548:	4b2e      	ldr	r3, [pc, #184]	@ (800b604 <prvAddCurrentTaskToDelayedList+0xf8>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4013      	ands	r3, r2
 800b54e:	4a2d      	ldr	r2, [pc, #180]	@ (800b604 <prvAddCurrentTaskToDelayedList+0xf8>)
 800b550:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b558:	d124      	bne.n	800b5a4 <prvAddCurrentTaskToDelayedList+0x98>
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d021      	beq.n	800b5a4 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b560:	4b29      	ldr	r3, [pc, #164]	@ (800b608 <prvAddCurrentTaskToDelayedList+0xfc>)
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	613b      	str	r3, [r7, #16]
 800b566:	4b26      	ldr	r3, [pc, #152]	@ (800b600 <prvAddCurrentTaskToDelayedList+0xf4>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	693a      	ldr	r2, [r7, #16]
 800b56c:	609a      	str	r2, [r3, #8]
 800b56e:	4b24      	ldr	r3, [pc, #144]	@ (800b600 <prvAddCurrentTaskToDelayedList+0xf4>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	693a      	ldr	r2, [r7, #16]
 800b574:	6892      	ldr	r2, [r2, #8]
 800b576:	60da      	str	r2, [r3, #12]
 800b578:	4b21      	ldr	r3, [pc, #132]	@ (800b600 <prvAddCurrentTaskToDelayedList+0xf4>)
 800b57a:	681a      	ldr	r2, [r3, #0]
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	689b      	ldr	r3, [r3, #8]
 800b580:	3204      	adds	r2, #4
 800b582:	605a      	str	r2, [r3, #4]
 800b584:	4b1e      	ldr	r3, [pc, #120]	@ (800b600 <prvAddCurrentTaskToDelayedList+0xf4>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	1d1a      	adds	r2, r3, #4
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	609a      	str	r2, [r3, #8]
 800b58e:	4b1c      	ldr	r3, [pc, #112]	@ (800b600 <prvAddCurrentTaskToDelayedList+0xf4>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	4a1d      	ldr	r2, [pc, #116]	@ (800b608 <prvAddCurrentTaskToDelayedList+0xfc>)
 800b594:	615a      	str	r2, [r3, #20]
 800b596:	4b1c      	ldr	r3, [pc, #112]	@ (800b608 <prvAddCurrentTaskToDelayedList+0xfc>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	3301      	adds	r3, #1
 800b59c:	4a1a      	ldr	r2, [pc, #104]	@ (800b608 <prvAddCurrentTaskToDelayedList+0xfc>)
 800b59e:	6013      	str	r3, [r2, #0]
 800b5a0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800b5a2:	e022      	b.n	800b5ea <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800b5a4:	69fa      	ldr	r2, [r7, #28]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	4413      	add	r3, r2
 800b5aa:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b5ac:	4b14      	ldr	r3, [pc, #80]	@ (800b600 <prvAddCurrentTaskToDelayedList+0xf4>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	68fa      	ldr	r2, [r7, #12]
 800b5b2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800b5b4:	68fa      	ldr	r2, [r7, #12]
 800b5b6:	69fb      	ldr	r3, [r7, #28]
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d207      	bcs.n	800b5cc <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800b5bc:	4b10      	ldr	r3, [pc, #64]	@ (800b600 <prvAddCurrentTaskToDelayedList+0xf4>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	3304      	adds	r3, #4
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	6978      	ldr	r0, [r7, #20]
 800b5c6:	f7fd feaa 	bl	800931e <vListInsert>
}
 800b5ca:	e00e      	b.n	800b5ea <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800b5cc:	4b0c      	ldr	r3, [pc, #48]	@ (800b600 <prvAddCurrentTaskToDelayedList+0xf4>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	3304      	adds	r3, #4
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	69b8      	ldr	r0, [r7, #24]
 800b5d6:	f7fd fea2 	bl	800931e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800b5da:	4b0c      	ldr	r3, [pc, #48]	@ (800b60c <prvAddCurrentTaskToDelayedList+0x100>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	68fa      	ldr	r2, [r7, #12]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d202      	bcs.n	800b5ea <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 800b5e4:	4a09      	ldr	r2, [pc, #36]	@ (800b60c <prvAddCurrentTaskToDelayedList+0x100>)
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	6013      	str	r3, [r2, #0]
}
 800b5ea:	bf00      	nop
 800b5ec:	3720      	adds	r7, #32
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	20000514 	.word	0x20000514
 800b5f8:	200004c8 	.word	0x200004c8
 800b5fc:	200004cc 	.word	0x200004cc
 800b600:	20000410 	.word	0x20000410
 800b604:	20000518 	.word	0x20000518
 800b608:	200004fc 	.word	0x200004fc
 800b60c:	20000530 	.word	0x20000530

0800b610 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800b616:	2300      	movs	r3, #0
 800b618:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800b61a:	f000 fa61 	bl	800bae0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800b61e:	4b14      	ldr	r3, [pc, #80]	@ (800b670 <xTimerCreateTimerTask+0x60>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00b      	beq.n	800b63e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800b626:	4b13      	ldr	r3, [pc, #76]	@ (800b674 <xTimerCreateTimerTask+0x64>)
 800b628:	9301      	str	r3, [sp, #4]
 800b62a:	2306      	movs	r3, #6
 800b62c:	9300      	str	r3, [sp, #0]
 800b62e:	2300      	movs	r3, #0
 800b630:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800b634:	4910      	ldr	r1, [pc, #64]	@ (800b678 <xTimerCreateTimerTask+0x68>)
 800b636:	4811      	ldr	r0, [pc, #68]	@ (800b67c <xTimerCreateTimerTask+0x6c>)
 800b638:	f7fe fd4e 	bl	800a0d8 <xTaskCreate>
 800b63c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d110      	bne.n	800b666 <xTimerCreateTimerTask+0x56>
    __asm volatile
 800b644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b648:	b672      	cpsid	i
 800b64a:	f383 8811 	msr	BASEPRI, r3
 800b64e:	f3bf 8f6f 	isb	sy
 800b652:	f3bf 8f4f 	dsb	sy
 800b656:	b662      	cpsie	i
 800b658:	603b      	str	r3, [r7, #0]
}
 800b65a:	bf00      	nop
 800b65c:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 800b660:	4807      	ldr	r0, [pc, #28]	@ (800b680 <xTimerCreateTimerTask+0x70>)
 800b662:	f7f6 f95d 	bl	8001920 <vAssertCalled>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 800b666:	687b      	ldr	r3, [r7, #4]
    }
 800b668:	4618      	mov	r0, r3
 800b66a:	3708      	adds	r7, #8
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	20000574 	.word	0x20000574
 800b674:	20000578 	.word	0x20000578
 800b678:	08010d8c 	.word	0x08010d8c
 800b67c:	0800b729 	.word	0x0800b729
 800b680:	08010d94 	.word	0x08010d94

0800b684 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800b684:	b580      	push	{r7, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800b690:	e008      	b.n	800b6a4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	699b      	ldr	r3, [r3, #24]
 800b696:	68ba      	ldr	r2, [r7, #8]
 800b698:	4413      	add	r3, r2
 800b69a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	6a1b      	ldr	r3, [r3, #32]
 800b6a0:	68f8      	ldr	r0, [r7, #12]
 800b6a2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	699a      	ldr	r2, [r3, #24]
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	18d1      	adds	r1, r2, r3
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	68f8      	ldr	r0, [r7, #12]
 800b6b2:	f000 f8df 	bl	800b874 <prvInsertTimerInActiveList>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d1ea      	bne.n	800b692 <prvReloadTimer+0xe>
        }
    }
 800b6bc:	bf00      	nop
 800b6be:	bf00      	nop
 800b6c0:	3710      	adds	r7, #16
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
	...

0800b6c8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b6d2:	4b14      	ldr	r3, [pc, #80]	@ (800b724 <prvProcessExpiredTimer+0x5c>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	68db      	ldr	r3, [r3, #12]
 800b6d8:	68db      	ldr	r3, [r3, #12]
 800b6da:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	3304      	adds	r3, #4
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f7fd fe55 	bl	8009390 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b6ec:	f003 0304 	and.w	r3, r3, #4
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d005      	beq.n	800b700 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800b6f4:	683a      	ldr	r2, [r7, #0]
 800b6f6:	6879      	ldr	r1, [r7, #4]
 800b6f8:	68f8      	ldr	r0, [r7, #12]
 800b6fa:	f7ff ffc3 	bl	800b684 <prvReloadTimer>
 800b6fe:	e008      	b.n	800b712 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b706:	f023 0301 	bic.w	r3, r3, #1
 800b70a:	b2da      	uxtb	r2, r3
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	6a1b      	ldr	r3, [r3, #32]
 800b716:	68f8      	ldr	r0, [r7, #12]
 800b718:	4798      	blx	r3
    }
 800b71a:	bf00      	nop
 800b71c:	3710      	adds	r7, #16
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop
 800b724:	2000056c 	.word	0x2000056c

0800b728 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b730:	f107 0308 	add.w	r3, r7, #8
 800b734:	4618      	mov	r0, r3
 800b736:	f000 f859 	bl	800b7ec <prvGetNextExpireTime>
 800b73a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	4619      	mov	r1, r3
 800b740:	68f8      	ldr	r0, [r7, #12]
 800b742:	f000 f805 	bl	800b750 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800b746:	f000 f8d7 	bl	800b8f8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b74a:	bf00      	nop
 800b74c:	e7f0      	b.n	800b730 <prvTimerTask+0x8>
	...

0800b750 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800b75a:	f7fe fed1 	bl	800a500 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b75e:	f107 0308 	add.w	r3, r7, #8
 800b762:	4618      	mov	r0, r3
 800b764:	f000 f866 	bl	800b834 <prvSampleTimeNow>
 800b768:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d130      	bne.n	800b7d2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d10a      	bne.n	800b78c <prvProcessTimerOrBlockTask+0x3c>
 800b776:	687a      	ldr	r2, [r7, #4]
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d806      	bhi.n	800b78c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800b77e:	f7fe fecd 	bl	800a51c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b782:	68f9      	ldr	r1, [r7, #12]
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f7ff ff9f 	bl	800b6c8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800b78a:	e024      	b.n	800b7d6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d008      	beq.n	800b7a4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b792:	4b13      	ldr	r3, [pc, #76]	@ (800b7e0 <prvProcessTimerOrBlockTask+0x90>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d101      	bne.n	800b7a0 <prvProcessTimerOrBlockTask+0x50>
 800b79c:	2301      	movs	r3, #1
 800b79e:	e000      	b.n	800b7a2 <prvProcessTimerOrBlockTask+0x52>
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b7a4:	4b0f      	ldr	r3, [pc, #60]	@ (800b7e4 <prvProcessTimerOrBlockTask+0x94>)
 800b7a6:	6818      	ldr	r0, [r3, #0]
 800b7a8:	687a      	ldr	r2, [r7, #4]
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	1ad3      	subs	r3, r2, r3
 800b7ae:	683a      	ldr	r2, [r7, #0]
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	f7fe fc21 	bl	8009ff8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800b7b6:	f7fe feb1 	bl	800a51c <xTaskResumeAll>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d10a      	bne.n	800b7d6 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 800b7c0:	4b09      	ldr	r3, [pc, #36]	@ (800b7e8 <prvProcessTimerOrBlockTask+0x98>)
 800b7c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7c6:	601a      	str	r2, [r3, #0]
 800b7c8:	f3bf 8f4f 	dsb	sy
 800b7cc:	f3bf 8f6f 	isb	sy
    }
 800b7d0:	e001      	b.n	800b7d6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800b7d2:	f7fe fea3 	bl	800a51c <xTaskResumeAll>
    }
 800b7d6:	bf00      	nop
 800b7d8:	3710      	adds	r7, #16
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	20000570 	.word	0x20000570
 800b7e4:	20000574 	.word	0x20000574
 800b7e8:	e000ed04 	.word	0xe000ed04

0800b7ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800b7ec:	b480      	push	{r7}
 800b7ee:	b085      	sub	sp, #20
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b7f4:	4b0e      	ldr	r3, [pc, #56]	@ (800b830 <prvGetNextExpireTime+0x44>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d101      	bne.n	800b802 <prvGetNextExpireTime+0x16>
 800b7fe:	2201      	movs	r2, #1
 800b800:	e000      	b.n	800b804 <prvGetNextExpireTime+0x18>
 800b802:	2200      	movs	r2, #0
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d105      	bne.n	800b81c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b810:	4b07      	ldr	r3, [pc, #28]	@ (800b830 <prvGetNextExpireTime+0x44>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	68db      	ldr	r3, [r3, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	60fb      	str	r3, [r7, #12]
 800b81a:	e001      	b.n	800b820 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800b81c:	2300      	movs	r3, #0
 800b81e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800b820:	68fb      	ldr	r3, [r7, #12]
    }
 800b822:	4618      	mov	r0, r3
 800b824:	3714      	adds	r7, #20
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr
 800b82e:	bf00      	nop
 800b830:	2000056c 	.word	0x2000056c

0800b834 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800b834:	b580      	push	{r7, lr}
 800b836:	b084      	sub	sp, #16
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 800b83c:	f7fe ff7e 	bl	800a73c <xTaskGetTickCount>
 800b840:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800b842:	4b0b      	ldr	r3, [pc, #44]	@ (800b870 <prvSampleTimeNow+0x3c>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	68fa      	ldr	r2, [r7, #12]
 800b848:	429a      	cmp	r2, r3
 800b84a:	d205      	bcs.n	800b858 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800b84c:	f000 f922 	bl	800ba94 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2201      	movs	r2, #1
 800b854:	601a      	str	r2, [r3, #0]
 800b856:	e002      	b.n	800b85e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2200      	movs	r2, #0
 800b85c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800b85e:	4a04      	ldr	r2, [pc, #16]	@ (800b870 <prvSampleTimeNow+0x3c>)
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800b864:	68fb      	ldr	r3, [r7, #12]
    }
 800b866:	4618      	mov	r0, r3
 800b868:	3710      	adds	r7, #16
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	bf00      	nop
 800b870:	2000057c 	.word	0x2000057c

0800b874 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800b874:	b580      	push	{r7, lr}
 800b876:	b086      	sub	sp, #24
 800b878:	af00      	add	r7, sp, #0
 800b87a:	60f8      	str	r0, [r7, #12]
 800b87c:	60b9      	str	r1, [r7, #8]
 800b87e:	607a      	str	r2, [r7, #4]
 800b880:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800b882:	2300      	movs	r3, #0
 800b884:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	68ba      	ldr	r2, [r7, #8]
 800b88a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	68fa      	ldr	r2, [r7, #12]
 800b890:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800b892:	68ba      	ldr	r2, [r7, #8]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	429a      	cmp	r2, r3
 800b898:	d812      	bhi.n	800b8c0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800b89a:	687a      	ldr	r2, [r7, #4]
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	1ad2      	subs	r2, r2, r3
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	699b      	ldr	r3, [r3, #24]
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d302      	bcc.n	800b8ae <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	617b      	str	r3, [r7, #20]
 800b8ac:	e01b      	b.n	800b8e6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b8ae:	4b10      	ldr	r3, [pc, #64]	@ (800b8f0 <prvInsertTimerInActiveList+0x7c>)
 800b8b0:	681a      	ldr	r2, [r3, #0]
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	3304      	adds	r3, #4
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	4610      	mov	r0, r2
 800b8ba:	f7fd fd30 	bl	800931e <vListInsert>
 800b8be:	e012      	b.n	800b8e6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b8c0:	687a      	ldr	r2, [r7, #4]
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	d206      	bcs.n	800b8d6 <prvInsertTimerInActiveList+0x62>
 800b8c8:	68ba      	ldr	r2, [r7, #8]
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d302      	bcc.n	800b8d6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	617b      	str	r3, [r7, #20]
 800b8d4:	e007      	b.n	800b8e6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b8d6:	4b07      	ldr	r3, [pc, #28]	@ (800b8f4 <prvInsertTimerInActiveList+0x80>)
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	3304      	adds	r3, #4
 800b8de:	4619      	mov	r1, r3
 800b8e0:	4610      	mov	r0, r2
 800b8e2:	f7fd fd1c 	bl	800931e <vListInsert>
            }
        }

        return xProcessTimerNow;
 800b8e6:	697b      	ldr	r3, [r7, #20]
    }
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3718      	adds	r7, #24
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}
 800b8f0:	20000570 	.word	0x20000570
 800b8f4:	2000056c 	.word	0x2000056c

0800b8f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b088      	sub	sp, #32
 800b8fc:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 800b8fe:	f107 0308 	add.w	r3, r7, #8
 800b902:	2200      	movs	r2, #0
 800b904:	601a      	str	r2, [r3, #0]
 800b906:	605a      	str	r2, [r3, #4]
 800b908:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800b90a:	e0ae      	b.n	800ba6a <prvProcessReceivedCommands+0x172>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	f2c0 80ab 	blt.w	800ba6a <prvProcessReceivedCommands+0x172>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800b918:	69fb      	ldr	r3, [r7, #28]
 800b91a:	695b      	ldr	r3, [r3, #20]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d004      	beq.n	800b92a <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b920:	69fb      	ldr	r3, [r7, #28]
 800b922:	3304      	adds	r3, #4
 800b924:	4618      	mov	r0, r3
 800b926:	f7fd fd33 	bl	8009390 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b92a:	1d3b      	adds	r3, r7, #4
 800b92c:	4618      	mov	r0, r3
 800b92e:	f7ff ff81 	bl	800b834 <prvSampleTimeNow>
 800b932:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	3b01      	subs	r3, #1
 800b938:	2b08      	cmp	r3, #8
 800b93a:	f200 8093 	bhi.w	800ba64 <prvProcessReceivedCommands+0x16c>
 800b93e:	a201      	add	r2, pc, #4	@ (adr r2, 800b944 <prvProcessReceivedCommands+0x4c>)
 800b940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b944:	0800b969 	.word	0x0800b969
 800b948:	0800b969 	.word	0x0800b969
 800b94c:	0800b9d1 	.word	0x0800b9d1
 800b950:	0800b9e5 	.word	0x0800b9e5
 800b954:	0800ba3b 	.word	0x0800ba3b
 800b958:	0800b969 	.word	0x0800b969
 800b95c:	0800b969 	.word	0x0800b969
 800b960:	0800b9d1 	.word	0x0800b9d1
 800b964:	0800b9e5 	.word	0x0800b9e5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b96e:	f043 0301 	orr.w	r3, r3, #1
 800b972:	b2da      	uxtb	r2, r3
 800b974:	69fb      	ldr	r3, [r7, #28]
 800b976:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b97a:	68fa      	ldr	r2, [r7, #12]
 800b97c:	69fb      	ldr	r3, [r7, #28]
 800b97e:	699b      	ldr	r3, [r3, #24]
 800b980:	18d1      	adds	r1, r2, r3
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	69ba      	ldr	r2, [r7, #24]
 800b986:	69f8      	ldr	r0, [r7, #28]
 800b988:	f7ff ff74 	bl	800b874 <prvInsertTimerInActiveList>
 800b98c:	4603      	mov	r3, r0
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d06a      	beq.n	800ba68 <prvProcessReceivedCommands+0x170>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800b992:	69fb      	ldr	r3, [r7, #28]
 800b994:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b998:	f003 0304 	and.w	r3, r3, #4
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d009      	beq.n	800b9b4 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	69fb      	ldr	r3, [r7, #28]
 800b9a4:	699b      	ldr	r3, [r3, #24]
 800b9a6:	4413      	add	r3, r2
 800b9a8:	69ba      	ldr	r2, [r7, #24]
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	69f8      	ldr	r0, [r7, #28]
 800b9ae:	f7ff fe69 	bl	800b684 <prvReloadTimer>
 800b9b2:	e008      	b.n	800b9c6 <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800b9b4:	69fb      	ldr	r3, [r7, #28]
 800b9b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b9ba:	f023 0301 	bic.w	r3, r3, #1
 800b9be:	b2da      	uxtb	r2, r3
 800b9c0:	69fb      	ldr	r3, [r7, #28]
 800b9c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b9c6:	69fb      	ldr	r3, [r7, #28]
 800b9c8:	6a1b      	ldr	r3, [r3, #32]
 800b9ca:	69f8      	ldr	r0, [r7, #28]
 800b9cc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800b9ce:	e04b      	b.n	800ba68 <prvProcessReceivedCommands+0x170>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800b9d0:	69fb      	ldr	r3, [r7, #28]
 800b9d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b9d6:	f023 0301 	bic.w	r3, r3, #1
 800b9da:	b2da      	uxtb	r2, r3
 800b9dc:	69fb      	ldr	r3, [r7, #28]
 800b9de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800b9e2:	e042      	b.n	800ba6a <prvProcessReceivedCommands+0x172>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b9ea:	f043 0301 	orr.w	r3, r3, #1
 800b9ee:	b2da      	uxtb	r2, r3
 800b9f0:	69fb      	ldr	r3, [r7, #28]
 800b9f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b9f6:	68fa      	ldr	r2, [r7, #12]
 800b9f8:	69fb      	ldr	r3, [r7, #28]
 800b9fa:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b9fc:	69fb      	ldr	r3, [r7, #28]
 800b9fe:	699b      	ldr	r3, [r3, #24]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d110      	bne.n	800ba26 <prvProcessReceivedCommands+0x12e>
    __asm volatile
 800ba04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba08:	b672      	cpsid	i
 800ba0a:	f383 8811 	msr	BASEPRI, r3
 800ba0e:	f3bf 8f6f 	isb	sy
 800ba12:	f3bf 8f4f 	dsb	sy
 800ba16:	b662      	cpsie	i
 800ba18:	617b      	str	r3, [r7, #20]
}
 800ba1a:	bf00      	nop
 800ba1c:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800ba20:	481a      	ldr	r0, [pc, #104]	@ (800ba8c <prvProcessReceivedCommands+0x194>)
 800ba22:	f7f5 ff7d 	bl	8001920 <vAssertCalled>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ba26:	69fb      	ldr	r3, [r7, #28]
 800ba28:	699a      	ldr	r2, [r3, #24]
 800ba2a:	69bb      	ldr	r3, [r7, #24]
 800ba2c:	18d1      	adds	r1, r2, r3
 800ba2e:	69bb      	ldr	r3, [r7, #24]
 800ba30:	69ba      	ldr	r2, [r7, #24]
 800ba32:	69f8      	ldr	r0, [r7, #28]
 800ba34:	f7ff ff1e 	bl	800b874 <prvInsertTimerInActiveList>
                        break;
 800ba38:	e017      	b.n	800ba6a <prvProcessReceivedCommands+0x172>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ba3a:	69fb      	ldr	r3, [r7, #28]
 800ba3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba40:	f003 0302 	and.w	r3, r3, #2
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d103      	bne.n	800ba50 <prvProcessReceivedCommands+0x158>
                            {
                                vPortFree( pxTimer );
 800ba48:	69f8      	ldr	r0, [r7, #28]
 800ba4a:	f7f6 fa97 	bl	8001f7c <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800ba4e:	e00c      	b.n	800ba6a <prvProcessReceivedCommands+0x172>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800ba50:	69fb      	ldr	r3, [r7, #28]
 800ba52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba56:	f023 0301 	bic.w	r3, r3, #1
 800ba5a:	b2da      	uxtb	r2, r3
 800ba5c:	69fb      	ldr	r3, [r7, #28]
 800ba5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800ba62:	e002      	b.n	800ba6a <prvProcessReceivedCommands+0x172>

                    default:
                        /* Don't expect to get here. */
                        break;
 800ba64:	bf00      	nop
 800ba66:	e000      	b.n	800ba6a <prvProcessReceivedCommands+0x172>
                        break;
 800ba68:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800ba6a:	4b09      	ldr	r3, [pc, #36]	@ (800ba90 <prvProcessReceivedCommands+0x198>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f107 0108 	add.w	r1, r7, #8
 800ba72:	2200      	movs	r2, #0
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7fd ff91 	bl	800999c <xQueueReceive>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	f47f af45 	bne.w	800b90c <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 800ba82:	bf00      	nop
 800ba84:	bf00      	nop
 800ba86:	3720      	adds	r7, #32
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}
 800ba8c:	08010d94 	.word	0x08010d94
 800ba90:	20000574 	.word	0x20000574

0800ba94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba9a:	e009      	b.n	800bab0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba9c:	4b0e      	ldr	r3, [pc, #56]	@ (800bad8 <prvSwitchTimerLists+0x44>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	68db      	ldr	r3, [r3, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800baa6:	f04f 31ff 	mov.w	r1, #4294967295
 800baaa:	6838      	ldr	r0, [r7, #0]
 800baac:	f7ff fe0c 	bl	800b6c8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bab0:	4b09      	ldr	r3, [pc, #36]	@ (800bad8 <prvSwitchTimerLists+0x44>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d1f0      	bne.n	800ba9c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800baba:	4b07      	ldr	r3, [pc, #28]	@ (800bad8 <prvSwitchTimerLists+0x44>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800bac0:	4b06      	ldr	r3, [pc, #24]	@ (800badc <prvSwitchTimerLists+0x48>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	4a04      	ldr	r2, [pc, #16]	@ (800bad8 <prvSwitchTimerLists+0x44>)
 800bac6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800bac8:	4a04      	ldr	r2, [pc, #16]	@ (800badc <prvSwitchTimerLists+0x48>)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6013      	str	r3, [r2, #0]
    }
 800bace:	bf00      	nop
 800bad0:	3708      	adds	r7, #8
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}
 800bad6:	bf00      	nop
 800bad8:	2000056c 	.word	0x2000056c
 800badc:	20000570 	.word	0x20000570

0800bae0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800bae0:	b580      	push	{r7, lr}
 800bae2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800bae4:	f000 f99c 	bl	800be20 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800bae8:	4b0d      	ldr	r3, [pc, #52]	@ (800bb20 <prvCheckForValidListAndQueue+0x40>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d113      	bne.n	800bb18 <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 800baf0:	480c      	ldr	r0, [pc, #48]	@ (800bb24 <prvCheckForValidListAndQueue+0x44>)
 800baf2:	f7fd fbe7 	bl	80092c4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800baf6:	480c      	ldr	r0, [pc, #48]	@ (800bb28 <prvCheckForValidListAndQueue+0x48>)
 800baf8:	f7fd fbe4 	bl	80092c4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800bafc:	4b0b      	ldr	r3, [pc, #44]	@ (800bb2c <prvCheckForValidListAndQueue+0x4c>)
 800bafe:	4a09      	ldr	r2, [pc, #36]	@ (800bb24 <prvCheckForValidListAndQueue+0x44>)
 800bb00:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800bb02:	4b0b      	ldr	r3, [pc, #44]	@ (800bb30 <prvCheckForValidListAndQueue+0x50>)
 800bb04:	4a08      	ldr	r2, [pc, #32]	@ (800bb28 <prvCheckForValidListAndQueue+0x48>)
 800bb06:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 800bb08:	2200      	movs	r2, #0
 800bb0a:	210c      	movs	r1, #12
 800bb0c:	2008      	movs	r0, #8
 800bb0e:	f7fd fd07 	bl	8009520 <xQueueGenericCreate>
 800bb12:	4603      	mov	r3, r0
 800bb14:	4a02      	ldr	r2, [pc, #8]	@ (800bb20 <prvCheckForValidListAndQueue+0x40>)
 800bb16:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800bb18:	f000 f9ba 	bl	800be90 <vPortExitCritical>
    }
 800bb1c:	bf00      	nop
 800bb1e:	bd80      	pop	{r7, pc}
 800bb20:	20000574 	.word	0x20000574
 800bb24:	20000544 	.word	0x20000544
 800bb28:	20000558 	.word	0x20000558
 800bb2c:	2000056c 	.word	0x2000056c
 800bb30:	20000570 	.word	0x20000570

0800bb34 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800bb34:	b480      	push	{r7}
 800bb36:	b085      	sub	sp, #20
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	60f8      	str	r0, [r7, #12]
 800bb3c:	60b9      	str	r1, [r7, #8]
 800bb3e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	3b04      	subs	r3, #4
 800bb44:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bb4c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	3b04      	subs	r3, #4
 800bb52:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	f023 0201 	bic.w	r2, r3, #1
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	3b04      	subs	r3, #4
 800bb62:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800bb64:	4a0c      	ldr	r2, [pc, #48]	@ (800bb98 <pxPortInitialiseStack+0x64>)
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	3b14      	subs	r3, #20
 800bb6e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	3b04      	subs	r3, #4
 800bb7a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f06f 0202 	mvn.w	r2, #2
 800bb82:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	3b20      	subs	r3, #32
 800bb88:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3714      	adds	r7, #20
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr
 800bb98:	0800bb9d 	.word	0x0800bb9d

0800bb9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b084      	sub	sp, #16
 800bba0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800bba2:	2300      	movs	r3, #0
 800bba4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800bba6:	4b15      	ldr	r3, [pc, #84]	@ (800bbfc <prvTaskExitError+0x60>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbae:	d00f      	beq.n	800bbd0 <prvTaskExitError+0x34>
    __asm volatile
 800bbb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbb4:	b672      	cpsid	i
 800bbb6:	f383 8811 	msr	BASEPRI, r3
 800bbba:	f3bf 8f6f 	isb	sy
 800bbbe:	f3bf 8f4f 	dsb	sy
 800bbc2:	b662      	cpsie	i
 800bbc4:	60fb      	str	r3, [r7, #12]
}
 800bbc6:	bf00      	nop
 800bbc8:	21ee      	movs	r1, #238	@ 0xee
 800bbca:	480d      	ldr	r0, [pc, #52]	@ (800bc00 <prvTaskExitError+0x64>)
 800bbcc:	f7f5 fea8 	bl	8001920 <vAssertCalled>
    __asm volatile
 800bbd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbd4:	b672      	cpsid	i
 800bbd6:	f383 8811 	msr	BASEPRI, r3
 800bbda:	f3bf 8f6f 	isb	sy
 800bbde:	f3bf 8f4f 	dsb	sy
 800bbe2:	b662      	cpsie	i
 800bbe4:	60bb      	str	r3, [r7, #8]
}
 800bbe6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800bbe8:	bf00      	nop
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d0fc      	beq.n	800bbea <prvTaskExitError+0x4e>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800bbf0:	bf00      	nop
 800bbf2:	bf00      	nop
 800bbf4:	3710      	adds	r7, #16
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}
 800bbfa:	bf00      	nop
 800bbfc:	20000010 	.word	0x20000010
 800bc00:	08010e10 	.word	0x08010e10
	...

0800bc10 <SVC_Handler>:
/*-----------------------------------------------------------*/
void vPortSVCHandler( void )
{
	__asm volatile (
 800bc10:	4b07      	ldr	r3, [pc, #28]	@ (800bc30 <pxCurrentTCBConst2>)
 800bc12:	6819      	ldr	r1, [r3, #0]
 800bc14:	6808      	ldr	r0, [r1, #0]
 800bc16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc1a:	f380 8809 	msr	PSP, r0
 800bc1e:	f3bf 8f6f 	isb	sy
 800bc22:	f04f 0000 	mov.w	r0, #0
 800bc26:	f380 8811 	msr	BASEPRI, r0
 800bc2a:	4770      	bx	lr
 800bc2c:	f3af 8000 	nop.w

0800bc30 <pxCurrentTCBConst2>:
 800bc30:	20000410 	.word	0x20000410
	        "   bx r14                          \n"
	        "                                   \n"
	        "   .align 4                        \n"
	        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
	        );
}
 800bc34:	bf00      	nop
 800bc36:	bf00      	nop

0800bc38 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800bc38:	4808      	ldr	r0, [pc, #32]	@ (800bc5c <prvPortStartFirstTask+0x24>)
 800bc3a:	6800      	ldr	r0, [r0, #0]
 800bc3c:	6800      	ldr	r0, [r0, #0]
 800bc3e:	f380 8808 	msr	MSP, r0
 800bc42:	f04f 0000 	mov.w	r0, #0
 800bc46:	f380 8814 	msr	CONTROL, r0
 800bc4a:	b662      	cpsie	i
 800bc4c:	b661      	cpsie	f
 800bc4e:	f3bf 8f4f 	dsb	sy
 800bc52:	f3bf 8f6f 	isb	sy
 800bc56:	df00      	svc	0
 800bc58:	bf00      	nop
 800bc5a:	0000      	.short	0x0000
 800bc5c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 800bc60:	bf00      	nop
 800bc62:	bf00      	nop

0800bc64 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b08a      	sub	sp, #40	@ 0x28
 800bc68:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800bc6a:	4b62      	ldr	r3, [pc, #392]	@ (800bdf4 <xPortStartScheduler+0x190>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 800bc70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc72:	332c      	adds	r3, #44	@ 0x2c
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	4a60      	ldr	r2, [pc, #384]	@ (800bdf8 <xPortStartScheduler+0x194>)
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d010      	beq.n	800bc9e <xPortStartScheduler+0x3a>
    __asm volatile
 800bc7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc80:	b672      	cpsid	i
 800bc82:	f383 8811 	msr	BASEPRI, r3
 800bc86:	f3bf 8f6f 	isb	sy
 800bc8a:	f3bf 8f4f 	dsb	sy
 800bc8e:	b662      	cpsie	i
 800bc90:	61bb      	str	r3, [r7, #24]
}
 800bc92:	bf00      	nop
 800bc94:	f240 114b 	movw	r1, #331	@ 0x14b
 800bc98:	4858      	ldr	r0, [pc, #352]	@ (800bdfc <xPortStartScheduler+0x198>)
 800bc9a:	f7f5 fe41 	bl	8001920 <vAssertCalled>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 800bc9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bca0:	3338      	adds	r3, #56	@ 0x38
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4a56      	ldr	r2, [pc, #344]	@ (800be00 <xPortStartScheduler+0x19c>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d010      	beq.n	800bccc <xPortStartScheduler+0x68>
    __asm volatile
 800bcaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcae:	b672      	cpsid	i
 800bcb0:	f383 8811 	msr	BASEPRI, r3
 800bcb4:	f3bf 8f6f 	isb	sy
 800bcb8:	f3bf 8f4f 	dsb	sy
 800bcbc:	b662      	cpsie	i
 800bcbe:	61fb      	str	r3, [r7, #28]
}
 800bcc0:	bf00      	nop
 800bcc2:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 800bcc6:	484d      	ldr	r0, [pc, #308]	@ (800bdfc <xPortStartScheduler+0x198>)
 800bcc8:	f7f5 fe2a 	bl	8001920 <vAssertCalled>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800bccc:	2300      	movs	r3, #0
 800bcce:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bcd0:	4b4c      	ldr	r3, [pc, #304]	@ (800be04 <xPortStartScheduler+0x1a0>)
 800bcd2:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 800bcd4:	6a3b      	ldr	r3, [r7, #32]
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	b2db      	uxtb	r3, r3
 800bcda:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bcdc:	6a3b      	ldr	r3, [r7, #32]
 800bcde:	22ff      	movs	r2, #255	@ 0xff
 800bce0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bce2:	6a3b      	ldr	r3, [r7, #32]
 800bce4:	781b      	ldrb	r3, [r3, #0]
 800bce6:	b2db      	uxtb	r3, r3
 800bce8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bcea:	79fb      	ldrb	r3, [r7, #7]
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bcf2:	b2da      	uxtb	r2, r3
 800bcf4:	4b44      	ldr	r3, [pc, #272]	@ (800be08 <xPortStartScheduler+0x1a4>)
 800bcf6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800bcf8:	4b43      	ldr	r3, [pc, #268]	@ (800be08 <xPortStartScheduler+0x1a4>)
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d110      	bne.n	800bd22 <xPortStartScheduler+0xbe>
    __asm volatile
 800bd00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd04:	b672      	cpsid	i
 800bd06:	f383 8811 	msr	BASEPRI, r3
 800bd0a:	f3bf 8f6f 	isb	sy
 800bd0e:	f3bf 8f4f 	dsb	sy
 800bd12:	b662      	cpsie	i
 800bd14:	617b      	str	r3, [r7, #20]
}
 800bd16:	bf00      	nop
 800bd18:	f240 116f 	movw	r1, #367	@ 0x16f
 800bd1c:	4837      	ldr	r0, [pc, #220]	@ (800bdfc <xPortStartScheduler+0x198>)
 800bd1e:	f7f5 fdff 	bl	8001920 <vAssertCalled>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800bd22:	79fb      	ldrb	r3, [r7, #7]
 800bd24:	b2db      	uxtb	r3, r3
 800bd26:	43db      	mvns	r3, r3
 800bd28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d019      	beq.n	800bd64 <xPortStartScheduler+0x100>
    __asm volatile
 800bd30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd34:	b672      	cpsid	i
 800bd36:	f383 8811 	msr	BASEPRI, r3
 800bd3a:	f3bf 8f6f 	isb	sy
 800bd3e:	f3bf 8f4f 	dsb	sy
 800bd42:	b662      	cpsie	i
 800bd44:	613b      	str	r3, [r7, #16]
}
 800bd46:	bf00      	nop
 800bd48:	f240 1173 	movw	r1, #371	@ 0x173
 800bd4c:	482b      	ldr	r0, [pc, #172]	@ (800bdfc <xPortStartScheduler+0x198>)
 800bd4e:	f7f5 fde7 	bl	8001920 <vAssertCalled>

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd52:	e007      	b.n	800bd64 <xPortStartScheduler+0x100>
        {
            ulImplementedPrioBits++;
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	3301      	adds	r3, #1
 800bd58:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bd5a:	79fb      	ldrb	r3, [r7, #7]
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	005b      	lsls	r3, r3, #1
 800bd60:	b2db      	uxtb	r3, r3
 800bd62:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd64:	79fb      	ldrb	r3, [r7, #7]
 800bd66:	b2db      	uxtb	r3, r3
 800bd68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd6c:	2b80      	cmp	r3, #128	@ 0x80
 800bd6e:	d0f1      	beq.n	800bd54 <xPortStartScheduler+0xf0>
        }

        if( ulImplementedPrioBits == 8 )
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	2b08      	cmp	r3, #8
 800bd74:	d103      	bne.n	800bd7e <xPortStartScheduler+0x11a>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 800bd76:	4b25      	ldr	r3, [pc, #148]	@ (800be0c <xPortStartScheduler+0x1a8>)
 800bd78:	2200      	movs	r2, #0
 800bd7a:	601a      	str	r2, [r3, #0]
 800bd7c:	e004      	b.n	800bd88 <xPortStartScheduler+0x124>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	f1c3 0307 	rsb	r3, r3, #7
 800bd84:	4a21      	ldr	r2, [pc, #132]	@ (800be0c <xPortStartScheduler+0x1a8>)
 800bd86:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bd88:	4b20      	ldr	r3, [pc, #128]	@ (800be0c <xPortStartScheduler+0x1a8>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	021b      	lsls	r3, r3, #8
 800bd8e:	4a1f      	ldr	r2, [pc, #124]	@ (800be0c <xPortStartScheduler+0x1a8>)
 800bd90:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bd92:	4b1e      	ldr	r3, [pc, #120]	@ (800be0c <xPortStartScheduler+0x1a8>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bd9a:	4a1c      	ldr	r2, [pc, #112]	@ (800be0c <xPortStartScheduler+0x1a8>)
 800bd9c:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 800bd9e:	7bfb      	ldrb	r3, [r7, #15]
 800bda0:	b2da      	uxtb	r2, r3
 800bda2:	6a3b      	ldr	r3, [r7, #32]
 800bda4:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800bda6:	4b1a      	ldr	r3, [pc, #104]	@ (800be10 <xPortStartScheduler+0x1ac>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	4a19      	ldr	r2, [pc, #100]	@ (800be10 <xPortStartScheduler+0x1ac>)
 800bdac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bdb0:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800bdb2:	4b17      	ldr	r3, [pc, #92]	@ (800be10 <xPortStartScheduler+0x1ac>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a16      	ldr	r2, [pc, #88]	@ (800be10 <xPortStartScheduler+0x1ac>)
 800bdb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bdbc:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 800bdbe:	4b15      	ldr	r3, [pc, #84]	@ (800be14 <xPortStartScheduler+0x1b0>)
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800bdc4:	f000 f8ec 	bl	800bfa0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800bdc8:	4b13      	ldr	r3, [pc, #76]	@ (800be18 <xPortStartScheduler+0x1b4>)
 800bdca:	2200      	movs	r2, #0
 800bdcc:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800bdce:	f000 f90b 	bl	800bfe8 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bdd2:	4b12      	ldr	r3, [pc, #72]	@ (800be1c <xPortStartScheduler+0x1b8>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4a11      	ldr	r2, [pc, #68]	@ (800be1c <xPortStartScheduler+0x1b8>)
 800bdd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bddc:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800bdde:	f7ff ff2b 	bl	800bc38 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800bde2:	f7fe fddb 	bl	800a99c <vTaskSwitchContext>
    prvTaskExitError();
 800bde6:	f7ff fed9 	bl	800bb9c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800bdea:	2300      	movs	r3, #0
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3728      	adds	r7, #40	@ 0x28
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}
 800bdf4:	e000ed08 	.word	0xe000ed08
 800bdf8:	0800bc11 	.word	0x0800bc11
 800bdfc:	08010e10 	.word	0x08010e10
 800be00:	0800bef1 	.word	0x0800bef1
 800be04:	e000e400 	.word	0xe000e400
 800be08:	20000580 	.word	0x20000580
 800be0c:	20000584 	.word	0x20000584
 800be10:	e000ed20 	.word	0xe000ed20
 800be14:	e000ed1c 	.word	0xe000ed1c
 800be18:	20000010 	.word	0x20000010
 800be1c:	e000ef34 	.word	0xe000ef34

0800be20 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b082      	sub	sp, #8
 800be24:	af00      	add	r7, sp, #0
    __asm volatile
 800be26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be2a:	b672      	cpsid	i
 800be2c:	f383 8811 	msr	BASEPRI, r3
 800be30:	f3bf 8f6f 	isb	sy
 800be34:	f3bf 8f4f 	dsb	sy
 800be38:	b662      	cpsie	i
 800be3a:	607b      	str	r3, [r7, #4]
}
 800be3c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800be3e:	4b11      	ldr	r3, [pc, #68]	@ (800be84 <vPortEnterCritical+0x64>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	3301      	adds	r3, #1
 800be44:	4a0f      	ldr	r2, [pc, #60]	@ (800be84 <vPortEnterCritical+0x64>)
 800be46:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800be48:	4b0e      	ldr	r3, [pc, #56]	@ (800be84 <vPortEnterCritical+0x64>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d115      	bne.n	800be7c <vPortEnterCritical+0x5c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800be50:	4b0d      	ldr	r3, [pc, #52]	@ (800be88 <vPortEnterCritical+0x68>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	b2db      	uxtb	r3, r3
 800be56:	2b00      	cmp	r3, #0
 800be58:	d010      	beq.n	800be7c <vPortEnterCritical+0x5c>
    __asm volatile
 800be5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be5e:	b672      	cpsid	i
 800be60:	f383 8811 	msr	BASEPRI, r3
 800be64:	f3bf 8f6f 	isb	sy
 800be68:	f3bf 8f4f 	dsb	sy
 800be6c:	b662      	cpsie	i
 800be6e:	603b      	str	r3, [r7, #0]
}
 800be70:	bf00      	nop
 800be72:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 800be76:	4805      	ldr	r0, [pc, #20]	@ (800be8c <vPortEnterCritical+0x6c>)
 800be78:	f7f5 fd52 	bl	8001920 <vAssertCalled>
    }
}
 800be7c:	bf00      	nop
 800be7e:	3708      	adds	r7, #8
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}
 800be84:	20000010 	.word	0x20000010
 800be88:	e000ed04 	.word	0xe000ed04
 800be8c:	08010e10 	.word	0x08010e10

0800be90 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b082      	sub	sp, #8
 800be94:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800be96:	4b14      	ldr	r3, [pc, #80]	@ (800bee8 <vPortExitCritical+0x58>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d110      	bne.n	800bec0 <vPortExitCritical+0x30>
    __asm volatile
 800be9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bea2:	b672      	cpsid	i
 800bea4:	f383 8811 	msr	BASEPRI, r3
 800bea8:	f3bf 8f6f 	isb	sy
 800beac:	f3bf 8f4f 	dsb	sy
 800beb0:	b662      	cpsie	i
 800beb2:	607b      	str	r3, [r7, #4]
}
 800beb4:	bf00      	nop
 800beb6:	f240 11e3 	movw	r1, #483	@ 0x1e3
 800beba:	480c      	ldr	r0, [pc, #48]	@ (800beec <vPortExitCritical+0x5c>)
 800bebc:	f7f5 fd30 	bl	8001920 <vAssertCalled>
    uxCriticalNesting--;
 800bec0:	4b09      	ldr	r3, [pc, #36]	@ (800bee8 <vPortExitCritical+0x58>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	3b01      	subs	r3, #1
 800bec6:	4a08      	ldr	r2, [pc, #32]	@ (800bee8 <vPortExitCritical+0x58>)
 800bec8:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800beca:	4b07      	ldr	r3, [pc, #28]	@ (800bee8 <vPortExitCritical+0x58>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d105      	bne.n	800bede <vPortExitCritical+0x4e>
 800bed2:	2300      	movs	r3, #0
 800bed4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800bedc:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800bede:	bf00      	nop
 800bee0:	3708      	adds	r7, #8
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop
 800bee8:	20000010 	.word	0x20000010
 800beec:	08010e10 	.word	0x08010e10

0800bef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800bef0:	f3ef 8009 	mrs	r0, PSP
 800bef4:	f3bf 8f6f 	isb	sy
 800bef8:	4b15      	ldr	r3, [pc, #84]	@ (800bf50 <pxCurrentTCBConst>)
 800befa:	681a      	ldr	r2, [r3, #0]
 800befc:	f01e 0f10 	tst.w	lr, #16
 800bf00:	bf08      	it	eq
 800bf02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bf06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf0a:	6010      	str	r0, [r2, #0]
 800bf0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bf10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bf14:	b672      	cpsid	i
 800bf16:	f380 8811 	msr	BASEPRI, r0
 800bf1a:	f3bf 8f4f 	dsb	sy
 800bf1e:	f3bf 8f6f 	isb	sy
 800bf22:	b662      	cpsie	i
 800bf24:	f7fe fd3a 	bl	800a99c <vTaskSwitchContext>
 800bf28:	f04f 0000 	mov.w	r0, #0
 800bf2c:	f380 8811 	msr	BASEPRI, r0
 800bf30:	bc09      	pop	{r0, r3}
 800bf32:	6819      	ldr	r1, [r3, #0]
 800bf34:	6808      	ldr	r0, [r1, #0]
 800bf36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf3a:	f01e 0f10 	tst.w	lr, #16
 800bf3e:	bf08      	it	eq
 800bf40:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bf44:	f380 8809 	msr	PSP, r0
 800bf48:	f3bf 8f6f 	isb	sy
 800bf4c:	4770      	bx	lr
 800bf4e:	bf00      	nop

0800bf50 <pxCurrentTCBConst>:
 800bf50:	20000410 	.word	0x20000410
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800bf54:	bf00      	nop
 800bf56:	bf00      	nop

0800bf58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af00      	add	r7, sp, #0
    __asm volatile
 800bf5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf62:	b672      	cpsid	i
 800bf64:	f383 8811 	msr	BASEPRI, r3
 800bf68:	f3bf 8f6f 	isb	sy
 800bf6c:	f3bf 8f4f 	dsb	sy
 800bf70:	b662      	cpsie	i
 800bf72:	607b      	str	r3, [r7, #4]
}
 800bf74:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800bf76:	f7fe fbf1 	bl	800a75c <xTaskIncrementTick>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d003      	beq.n	800bf88 <xPortSysTickHandler+0x30>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bf80:	4b06      	ldr	r3, [pc, #24]	@ (800bf9c <xPortSysTickHandler+0x44>)
 800bf82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf86:	601a      	str	r2, [r3, #0]
 800bf88:	2300      	movs	r3, #0
 800bf8a:	603b      	str	r3, [r7, #0]
    __asm volatile
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	f383 8811 	msr	BASEPRI, r3
}
 800bf92:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 800bf94:	bf00      	nop
 800bf96:	3708      	adds	r7, #8
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}
 800bf9c:	e000ed04 	.word	0xe000ed04

0800bfa0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bfa4:	4b0b      	ldr	r3, [pc, #44]	@ (800bfd4 <vPortSetupTimerInterrupt+0x34>)
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bfaa:	4b0b      	ldr	r3, [pc, #44]	@ (800bfd8 <vPortSetupTimerInterrupt+0x38>)
 800bfac:	2200      	movs	r2, #0
 800bfae:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bfb0:	4b0a      	ldr	r3, [pc, #40]	@ (800bfdc <vPortSetupTimerInterrupt+0x3c>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4a0a      	ldr	r2, [pc, #40]	@ (800bfe0 <vPortSetupTimerInterrupt+0x40>)
 800bfb6:	fba2 2303 	umull	r2, r3, r2, r3
 800bfba:	099b      	lsrs	r3, r3, #6
 800bfbc:	4a09      	ldr	r2, [pc, #36]	@ (800bfe4 <vPortSetupTimerInterrupt+0x44>)
 800bfbe:	3b01      	subs	r3, #1
 800bfc0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bfc2:	4b04      	ldr	r3, [pc, #16]	@ (800bfd4 <vPortSetupTimerInterrupt+0x34>)
 800bfc4:	2207      	movs	r2, #7
 800bfc6:	601a      	str	r2, [r3, #0]
}
 800bfc8:	bf00      	nop
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd0:	4770      	bx	lr
 800bfd2:	bf00      	nop
 800bfd4:	e000e010 	.word	0xe000e010
 800bfd8:	e000e018 	.word	0xe000e018
 800bfdc:	20000004 	.word	0x20000004
 800bfe0:	10624dd3 	.word	0x10624dd3
 800bfe4:	e000e014 	.word	0xe000e014

0800bfe8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800bfe8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bff8 <vPortEnableVFP+0x10>
 800bfec:	6801      	ldr	r1, [r0, #0]
 800bfee:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bff2:	6001      	str	r1, [r0, #0]
 800bff4:	4770      	bx	lr
 800bff6:	0000      	.short	0x0000
 800bff8:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 800bffc:	bf00      	nop
 800bffe:	bf00      	nop

0800c000 <__assert_func>:
 800c000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c002:	4614      	mov	r4, r2
 800c004:	461a      	mov	r2, r3
 800c006:	4b09      	ldr	r3, [pc, #36]	@ (800c02c <__assert_func+0x2c>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4605      	mov	r5, r0
 800c00c:	68d8      	ldr	r0, [r3, #12]
 800c00e:	b14c      	cbz	r4, 800c024 <__assert_func+0x24>
 800c010:	4b07      	ldr	r3, [pc, #28]	@ (800c030 <__assert_func+0x30>)
 800c012:	9100      	str	r1, [sp, #0]
 800c014:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c018:	4906      	ldr	r1, [pc, #24]	@ (800c034 <__assert_func+0x34>)
 800c01a:	462b      	mov	r3, r5
 800c01c:	f001 ff16 	bl	800de4c <fiprintf>
 800c020:	f002 f9bc 	bl	800e39c <abort>
 800c024:	4b04      	ldr	r3, [pc, #16]	@ (800c038 <__assert_func+0x38>)
 800c026:	461c      	mov	r4, r3
 800c028:	e7f3      	b.n	800c012 <__assert_func+0x12>
 800c02a:	bf00      	nop
 800c02c:	2000018c 	.word	0x2000018c
 800c030:	08010ed0 	.word	0x08010ed0
 800c034:	08010edd 	.word	0x08010edd
 800c038:	08010f0b 	.word	0x08010f0b

0800c03c <_calloc_r>:
 800c03c:	b570      	push	{r4, r5, r6, lr}
 800c03e:	fba1 5402 	umull	r5, r4, r1, r2
 800c042:	b934      	cbnz	r4, 800c052 <_calloc_r+0x16>
 800c044:	4629      	mov	r1, r5
 800c046:	f000 f83f 	bl	800c0c8 <_malloc_r>
 800c04a:	4606      	mov	r6, r0
 800c04c:	b928      	cbnz	r0, 800c05a <_calloc_r+0x1e>
 800c04e:	4630      	mov	r0, r6
 800c050:	bd70      	pop	{r4, r5, r6, pc}
 800c052:	220c      	movs	r2, #12
 800c054:	6002      	str	r2, [r0, #0]
 800c056:	2600      	movs	r6, #0
 800c058:	e7f9      	b.n	800c04e <_calloc_r+0x12>
 800c05a:	462a      	mov	r2, r5
 800c05c:	4621      	mov	r1, r4
 800c05e:	f002 f88f 	bl	800e180 <memset>
 800c062:	e7f4      	b.n	800c04e <_calloc_r+0x12>

0800c064 <malloc>:
 800c064:	4b02      	ldr	r3, [pc, #8]	@ (800c070 <malloc+0xc>)
 800c066:	4601      	mov	r1, r0
 800c068:	6818      	ldr	r0, [r3, #0]
 800c06a:	f000 b82d 	b.w	800c0c8 <_malloc_r>
 800c06e:	bf00      	nop
 800c070:	2000018c 	.word	0x2000018c

0800c074 <free>:
 800c074:	4b02      	ldr	r3, [pc, #8]	@ (800c080 <free+0xc>)
 800c076:	4601      	mov	r1, r0
 800c078:	6818      	ldr	r0, [r3, #0]
 800c07a:	f002 bff1 	b.w	800f060 <_free_r>
 800c07e:	bf00      	nop
 800c080:	2000018c 	.word	0x2000018c

0800c084 <sbrk_aligned>:
 800c084:	b570      	push	{r4, r5, r6, lr}
 800c086:	4e0f      	ldr	r6, [pc, #60]	@ (800c0c4 <sbrk_aligned+0x40>)
 800c088:	460c      	mov	r4, r1
 800c08a:	6831      	ldr	r1, [r6, #0]
 800c08c:	4605      	mov	r5, r0
 800c08e:	b911      	cbnz	r1, 800c096 <sbrk_aligned+0x12>
 800c090:	f7f5 fe94 	bl	8001dbc <_sbrk_r>
 800c094:	6030      	str	r0, [r6, #0]
 800c096:	4621      	mov	r1, r4
 800c098:	4628      	mov	r0, r5
 800c09a:	f7f5 fe8f 	bl	8001dbc <_sbrk_r>
 800c09e:	1c43      	adds	r3, r0, #1
 800c0a0:	d103      	bne.n	800c0aa <sbrk_aligned+0x26>
 800c0a2:	f04f 34ff 	mov.w	r4, #4294967295
 800c0a6:	4620      	mov	r0, r4
 800c0a8:	bd70      	pop	{r4, r5, r6, pc}
 800c0aa:	1cc4      	adds	r4, r0, #3
 800c0ac:	f024 0403 	bic.w	r4, r4, #3
 800c0b0:	42a0      	cmp	r0, r4
 800c0b2:	d0f8      	beq.n	800c0a6 <sbrk_aligned+0x22>
 800c0b4:	1a21      	subs	r1, r4, r0
 800c0b6:	4628      	mov	r0, r5
 800c0b8:	f7f5 fe80 	bl	8001dbc <_sbrk_r>
 800c0bc:	3001      	adds	r0, #1
 800c0be:	d1f2      	bne.n	800c0a6 <sbrk_aligned+0x22>
 800c0c0:	e7ef      	b.n	800c0a2 <sbrk_aligned+0x1e>
 800c0c2:	bf00      	nop
 800c0c4:	20000588 	.word	0x20000588

0800c0c8 <_malloc_r>:
 800c0c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0cc:	1ccd      	adds	r5, r1, #3
 800c0ce:	f025 0503 	bic.w	r5, r5, #3
 800c0d2:	3508      	adds	r5, #8
 800c0d4:	2d0c      	cmp	r5, #12
 800c0d6:	bf38      	it	cc
 800c0d8:	250c      	movcc	r5, #12
 800c0da:	2d00      	cmp	r5, #0
 800c0dc:	4606      	mov	r6, r0
 800c0de:	db01      	blt.n	800c0e4 <_malloc_r+0x1c>
 800c0e0:	42a9      	cmp	r1, r5
 800c0e2:	d904      	bls.n	800c0ee <_malloc_r+0x26>
 800c0e4:	230c      	movs	r3, #12
 800c0e6:	6033      	str	r3, [r6, #0]
 800c0e8:	2000      	movs	r0, #0
 800c0ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c1c4 <_malloc_r+0xfc>
 800c0f2:	f7f5 fee7 	bl	8001ec4 <__malloc_lock>
 800c0f6:	f8d8 3000 	ldr.w	r3, [r8]
 800c0fa:	461c      	mov	r4, r3
 800c0fc:	bb44      	cbnz	r4, 800c150 <_malloc_r+0x88>
 800c0fe:	4629      	mov	r1, r5
 800c100:	4630      	mov	r0, r6
 800c102:	f7ff ffbf 	bl	800c084 <sbrk_aligned>
 800c106:	1c43      	adds	r3, r0, #1
 800c108:	4604      	mov	r4, r0
 800c10a:	d158      	bne.n	800c1be <_malloc_r+0xf6>
 800c10c:	f8d8 4000 	ldr.w	r4, [r8]
 800c110:	4627      	mov	r7, r4
 800c112:	2f00      	cmp	r7, #0
 800c114:	d143      	bne.n	800c19e <_malloc_r+0xd6>
 800c116:	2c00      	cmp	r4, #0
 800c118:	d04b      	beq.n	800c1b2 <_malloc_r+0xea>
 800c11a:	6823      	ldr	r3, [r4, #0]
 800c11c:	4639      	mov	r1, r7
 800c11e:	4630      	mov	r0, r6
 800c120:	eb04 0903 	add.w	r9, r4, r3
 800c124:	f7f5 fe4a 	bl	8001dbc <_sbrk_r>
 800c128:	4581      	cmp	r9, r0
 800c12a:	d142      	bne.n	800c1b2 <_malloc_r+0xea>
 800c12c:	6821      	ldr	r1, [r4, #0]
 800c12e:	1a6d      	subs	r5, r5, r1
 800c130:	4629      	mov	r1, r5
 800c132:	4630      	mov	r0, r6
 800c134:	f7ff ffa6 	bl	800c084 <sbrk_aligned>
 800c138:	3001      	adds	r0, #1
 800c13a:	d03a      	beq.n	800c1b2 <_malloc_r+0xea>
 800c13c:	6823      	ldr	r3, [r4, #0]
 800c13e:	442b      	add	r3, r5
 800c140:	6023      	str	r3, [r4, #0]
 800c142:	f8d8 3000 	ldr.w	r3, [r8]
 800c146:	685a      	ldr	r2, [r3, #4]
 800c148:	bb62      	cbnz	r2, 800c1a4 <_malloc_r+0xdc>
 800c14a:	f8c8 7000 	str.w	r7, [r8]
 800c14e:	e00f      	b.n	800c170 <_malloc_r+0xa8>
 800c150:	6822      	ldr	r2, [r4, #0]
 800c152:	1b52      	subs	r2, r2, r5
 800c154:	d420      	bmi.n	800c198 <_malloc_r+0xd0>
 800c156:	2a0b      	cmp	r2, #11
 800c158:	d917      	bls.n	800c18a <_malloc_r+0xc2>
 800c15a:	1961      	adds	r1, r4, r5
 800c15c:	42a3      	cmp	r3, r4
 800c15e:	6025      	str	r5, [r4, #0]
 800c160:	bf18      	it	ne
 800c162:	6059      	strne	r1, [r3, #4]
 800c164:	6863      	ldr	r3, [r4, #4]
 800c166:	bf08      	it	eq
 800c168:	f8c8 1000 	streq.w	r1, [r8]
 800c16c:	5162      	str	r2, [r4, r5]
 800c16e:	604b      	str	r3, [r1, #4]
 800c170:	4630      	mov	r0, r6
 800c172:	f7f5 fee1 	bl	8001f38 <__malloc_unlock>
 800c176:	f104 000b 	add.w	r0, r4, #11
 800c17a:	1d23      	adds	r3, r4, #4
 800c17c:	f020 0007 	bic.w	r0, r0, #7
 800c180:	1ac2      	subs	r2, r0, r3
 800c182:	bf1c      	itt	ne
 800c184:	1a1b      	subne	r3, r3, r0
 800c186:	50a3      	strne	r3, [r4, r2]
 800c188:	e7af      	b.n	800c0ea <_malloc_r+0x22>
 800c18a:	6862      	ldr	r2, [r4, #4]
 800c18c:	42a3      	cmp	r3, r4
 800c18e:	bf0c      	ite	eq
 800c190:	f8c8 2000 	streq.w	r2, [r8]
 800c194:	605a      	strne	r2, [r3, #4]
 800c196:	e7eb      	b.n	800c170 <_malloc_r+0xa8>
 800c198:	4623      	mov	r3, r4
 800c19a:	6864      	ldr	r4, [r4, #4]
 800c19c:	e7ae      	b.n	800c0fc <_malloc_r+0x34>
 800c19e:	463c      	mov	r4, r7
 800c1a0:	687f      	ldr	r7, [r7, #4]
 800c1a2:	e7b6      	b.n	800c112 <_malloc_r+0x4a>
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	42a3      	cmp	r3, r4
 800c1aa:	d1fb      	bne.n	800c1a4 <_malloc_r+0xdc>
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	6053      	str	r3, [r2, #4]
 800c1b0:	e7de      	b.n	800c170 <_malloc_r+0xa8>
 800c1b2:	230c      	movs	r3, #12
 800c1b4:	6033      	str	r3, [r6, #0]
 800c1b6:	4630      	mov	r0, r6
 800c1b8:	f7f5 febe 	bl	8001f38 <__malloc_unlock>
 800c1bc:	e794      	b.n	800c0e8 <_malloc_r+0x20>
 800c1be:	6005      	str	r5, [r0, #0]
 800c1c0:	e7d6      	b.n	800c170 <_malloc_r+0xa8>
 800c1c2:	bf00      	nop
 800c1c4:	2000058c 	.word	0x2000058c

0800c1c8 <mallinfo>:
 800c1c8:	b510      	push	{r4, lr}
 800c1ca:	4b03      	ldr	r3, [pc, #12]	@ (800c1d8 <mallinfo+0x10>)
 800c1cc:	4604      	mov	r4, r0
 800c1ce:	6819      	ldr	r1, [r3, #0]
 800c1d0:	f003 faca 	bl	800f768 <_mallinfo_r>
 800c1d4:	4620      	mov	r0, r4
 800c1d6:	bd10      	pop	{r4, pc}
 800c1d8:	2000018c 	.word	0x2000018c

0800c1dc <sulp>:
 800c1dc:	b570      	push	{r4, r5, r6, lr}
 800c1de:	4604      	mov	r4, r0
 800c1e0:	460d      	mov	r5, r1
 800c1e2:	ec45 4b10 	vmov	d0, r4, r5
 800c1e6:	4616      	mov	r6, r2
 800c1e8:	f003 fe70 	bl	800fecc <__ulp>
 800c1ec:	ec51 0b10 	vmov	r0, r1, d0
 800c1f0:	b17e      	cbz	r6, 800c212 <sulp+0x36>
 800c1f2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c1f6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	dd09      	ble.n	800c212 <sulp+0x36>
 800c1fe:	051b      	lsls	r3, r3, #20
 800c200:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c204:	2400      	movs	r4, #0
 800c206:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c20a:	4622      	mov	r2, r4
 800c20c:	462b      	mov	r3, r5
 800c20e:	f7f4 fa13 	bl	8000638 <__aeabi_dmul>
 800c212:	ec41 0b10 	vmov	d0, r0, r1
 800c216:	bd70      	pop	{r4, r5, r6, pc}

0800c218 <_strtod_l>:
 800c218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c21c:	b09f      	sub	sp, #124	@ 0x7c
 800c21e:	460c      	mov	r4, r1
 800c220:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c222:	2200      	movs	r2, #0
 800c224:	921a      	str	r2, [sp, #104]	@ 0x68
 800c226:	9005      	str	r0, [sp, #20]
 800c228:	f04f 0a00 	mov.w	sl, #0
 800c22c:	f04f 0b00 	mov.w	fp, #0
 800c230:	460a      	mov	r2, r1
 800c232:	9219      	str	r2, [sp, #100]	@ 0x64
 800c234:	7811      	ldrb	r1, [r2, #0]
 800c236:	292b      	cmp	r1, #43	@ 0x2b
 800c238:	d04a      	beq.n	800c2d0 <_strtod_l+0xb8>
 800c23a:	d838      	bhi.n	800c2ae <_strtod_l+0x96>
 800c23c:	290d      	cmp	r1, #13
 800c23e:	d832      	bhi.n	800c2a6 <_strtod_l+0x8e>
 800c240:	2908      	cmp	r1, #8
 800c242:	d832      	bhi.n	800c2aa <_strtod_l+0x92>
 800c244:	2900      	cmp	r1, #0
 800c246:	d03b      	beq.n	800c2c0 <_strtod_l+0xa8>
 800c248:	2200      	movs	r2, #0
 800c24a:	920e      	str	r2, [sp, #56]	@ 0x38
 800c24c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c24e:	782a      	ldrb	r2, [r5, #0]
 800c250:	2a30      	cmp	r2, #48	@ 0x30
 800c252:	f040 80b2 	bne.w	800c3ba <_strtod_l+0x1a2>
 800c256:	786a      	ldrb	r2, [r5, #1]
 800c258:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c25c:	2a58      	cmp	r2, #88	@ 0x58
 800c25e:	d16e      	bne.n	800c33e <_strtod_l+0x126>
 800c260:	9302      	str	r3, [sp, #8]
 800c262:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c264:	9301      	str	r3, [sp, #4]
 800c266:	ab1a      	add	r3, sp, #104	@ 0x68
 800c268:	9300      	str	r3, [sp, #0]
 800c26a:	4a8f      	ldr	r2, [pc, #572]	@ (800c4a8 <_strtod_l+0x290>)
 800c26c:	9805      	ldr	r0, [sp, #20]
 800c26e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c270:	a919      	add	r1, sp, #100	@ 0x64
 800c272:	f002 ffa7 	bl	800f1c4 <__gethex>
 800c276:	f010 060f 	ands.w	r6, r0, #15
 800c27a:	4604      	mov	r4, r0
 800c27c:	d005      	beq.n	800c28a <_strtod_l+0x72>
 800c27e:	2e06      	cmp	r6, #6
 800c280:	d128      	bne.n	800c2d4 <_strtod_l+0xbc>
 800c282:	3501      	adds	r5, #1
 800c284:	2300      	movs	r3, #0
 800c286:	9519      	str	r5, [sp, #100]	@ 0x64
 800c288:	930e      	str	r3, [sp, #56]	@ 0x38
 800c28a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	f040 858e 	bne.w	800cdae <_strtod_l+0xb96>
 800c292:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c294:	b1cb      	cbz	r3, 800c2ca <_strtod_l+0xb2>
 800c296:	4652      	mov	r2, sl
 800c298:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c29c:	ec43 2b10 	vmov	d0, r2, r3
 800c2a0:	b01f      	add	sp, #124	@ 0x7c
 800c2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a6:	2920      	cmp	r1, #32
 800c2a8:	d1ce      	bne.n	800c248 <_strtod_l+0x30>
 800c2aa:	3201      	adds	r2, #1
 800c2ac:	e7c1      	b.n	800c232 <_strtod_l+0x1a>
 800c2ae:	292d      	cmp	r1, #45	@ 0x2d
 800c2b0:	d1ca      	bne.n	800c248 <_strtod_l+0x30>
 800c2b2:	2101      	movs	r1, #1
 800c2b4:	910e      	str	r1, [sp, #56]	@ 0x38
 800c2b6:	1c51      	adds	r1, r2, #1
 800c2b8:	9119      	str	r1, [sp, #100]	@ 0x64
 800c2ba:	7852      	ldrb	r2, [r2, #1]
 800c2bc:	2a00      	cmp	r2, #0
 800c2be:	d1c5      	bne.n	800c24c <_strtod_l+0x34>
 800c2c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c2c2:	9419      	str	r4, [sp, #100]	@ 0x64
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	f040 8570 	bne.w	800cdaa <_strtod_l+0xb92>
 800c2ca:	4652      	mov	r2, sl
 800c2cc:	465b      	mov	r3, fp
 800c2ce:	e7e5      	b.n	800c29c <_strtod_l+0x84>
 800c2d0:	2100      	movs	r1, #0
 800c2d2:	e7ef      	b.n	800c2b4 <_strtod_l+0x9c>
 800c2d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c2d6:	b13a      	cbz	r2, 800c2e8 <_strtod_l+0xd0>
 800c2d8:	2135      	movs	r1, #53	@ 0x35
 800c2da:	a81c      	add	r0, sp, #112	@ 0x70
 800c2dc:	f003 fef0 	bl	80100c0 <__copybits>
 800c2e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c2e2:	9805      	ldr	r0, [sp, #20]
 800c2e4:	f003 fac6 	bl	800f874 <_Bfree>
 800c2e8:	3e01      	subs	r6, #1
 800c2ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c2ec:	2e04      	cmp	r6, #4
 800c2ee:	d806      	bhi.n	800c2fe <_strtod_l+0xe6>
 800c2f0:	e8df f006 	tbb	[pc, r6]
 800c2f4:	201d0314 	.word	0x201d0314
 800c2f8:	14          	.byte	0x14
 800c2f9:	00          	.byte	0x00
 800c2fa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c2fe:	05e1      	lsls	r1, r4, #23
 800c300:	bf48      	it	mi
 800c302:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c306:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c30a:	0d1b      	lsrs	r3, r3, #20
 800c30c:	051b      	lsls	r3, r3, #20
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d1bb      	bne.n	800c28a <_strtod_l+0x72>
 800c312:	f001 fff7 	bl	800e304 <__errno>
 800c316:	2322      	movs	r3, #34	@ 0x22
 800c318:	6003      	str	r3, [r0, #0]
 800c31a:	e7b6      	b.n	800c28a <_strtod_l+0x72>
 800c31c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c320:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c324:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c328:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c32c:	e7e7      	b.n	800c2fe <_strtod_l+0xe6>
 800c32e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800c4b0 <_strtod_l+0x298>
 800c332:	e7e4      	b.n	800c2fe <_strtod_l+0xe6>
 800c334:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c338:	f04f 3aff 	mov.w	sl, #4294967295
 800c33c:	e7df      	b.n	800c2fe <_strtod_l+0xe6>
 800c33e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c340:	1c5a      	adds	r2, r3, #1
 800c342:	9219      	str	r2, [sp, #100]	@ 0x64
 800c344:	785b      	ldrb	r3, [r3, #1]
 800c346:	2b30      	cmp	r3, #48	@ 0x30
 800c348:	d0f9      	beq.n	800c33e <_strtod_l+0x126>
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d09d      	beq.n	800c28a <_strtod_l+0x72>
 800c34e:	2301      	movs	r3, #1
 800c350:	2700      	movs	r7, #0
 800c352:	9308      	str	r3, [sp, #32]
 800c354:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c356:	930c      	str	r3, [sp, #48]	@ 0x30
 800c358:	970b      	str	r7, [sp, #44]	@ 0x2c
 800c35a:	46b9      	mov	r9, r7
 800c35c:	220a      	movs	r2, #10
 800c35e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c360:	7805      	ldrb	r5, [r0, #0]
 800c362:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c366:	b2d9      	uxtb	r1, r3
 800c368:	2909      	cmp	r1, #9
 800c36a:	d928      	bls.n	800c3be <_strtod_l+0x1a6>
 800c36c:	494f      	ldr	r1, [pc, #316]	@ (800c4ac <_strtod_l+0x294>)
 800c36e:	2201      	movs	r2, #1
 800c370:	f001 ff0e 	bl	800e190 <strncmp>
 800c374:	2800      	cmp	r0, #0
 800c376:	d032      	beq.n	800c3de <_strtod_l+0x1c6>
 800c378:	2000      	movs	r0, #0
 800c37a:	462a      	mov	r2, r5
 800c37c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c37e:	464d      	mov	r5, r9
 800c380:	4603      	mov	r3, r0
 800c382:	2a65      	cmp	r2, #101	@ 0x65
 800c384:	d001      	beq.n	800c38a <_strtod_l+0x172>
 800c386:	2a45      	cmp	r2, #69	@ 0x45
 800c388:	d114      	bne.n	800c3b4 <_strtod_l+0x19c>
 800c38a:	b91d      	cbnz	r5, 800c394 <_strtod_l+0x17c>
 800c38c:	9a08      	ldr	r2, [sp, #32]
 800c38e:	4302      	orrs	r2, r0
 800c390:	d096      	beq.n	800c2c0 <_strtod_l+0xa8>
 800c392:	2500      	movs	r5, #0
 800c394:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c396:	1c62      	adds	r2, r4, #1
 800c398:	9219      	str	r2, [sp, #100]	@ 0x64
 800c39a:	7862      	ldrb	r2, [r4, #1]
 800c39c:	2a2b      	cmp	r2, #43	@ 0x2b
 800c39e:	d07a      	beq.n	800c496 <_strtod_l+0x27e>
 800c3a0:	2a2d      	cmp	r2, #45	@ 0x2d
 800c3a2:	d07e      	beq.n	800c4a2 <_strtod_l+0x28a>
 800c3a4:	f04f 0c00 	mov.w	ip, #0
 800c3a8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c3ac:	2909      	cmp	r1, #9
 800c3ae:	f240 8085 	bls.w	800c4bc <_strtod_l+0x2a4>
 800c3b2:	9419      	str	r4, [sp, #100]	@ 0x64
 800c3b4:	f04f 0800 	mov.w	r8, #0
 800c3b8:	e0a5      	b.n	800c506 <_strtod_l+0x2ee>
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	e7c8      	b.n	800c350 <_strtod_l+0x138>
 800c3be:	f1b9 0f08 	cmp.w	r9, #8
 800c3c2:	bfd8      	it	le
 800c3c4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800c3c6:	f100 0001 	add.w	r0, r0, #1
 800c3ca:	bfda      	itte	le
 800c3cc:	fb02 3301 	mlale	r3, r2, r1, r3
 800c3d0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800c3d2:	fb02 3707 	mlagt	r7, r2, r7, r3
 800c3d6:	f109 0901 	add.w	r9, r9, #1
 800c3da:	9019      	str	r0, [sp, #100]	@ 0x64
 800c3dc:	e7bf      	b.n	800c35e <_strtod_l+0x146>
 800c3de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3e0:	1c5a      	adds	r2, r3, #1
 800c3e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c3e4:	785a      	ldrb	r2, [r3, #1]
 800c3e6:	f1b9 0f00 	cmp.w	r9, #0
 800c3ea:	d03b      	beq.n	800c464 <_strtod_l+0x24c>
 800c3ec:	900a      	str	r0, [sp, #40]	@ 0x28
 800c3ee:	464d      	mov	r5, r9
 800c3f0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c3f4:	2b09      	cmp	r3, #9
 800c3f6:	d912      	bls.n	800c41e <_strtod_l+0x206>
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	e7c2      	b.n	800c382 <_strtod_l+0x16a>
 800c3fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3fe:	1c5a      	adds	r2, r3, #1
 800c400:	9219      	str	r2, [sp, #100]	@ 0x64
 800c402:	785a      	ldrb	r2, [r3, #1]
 800c404:	3001      	adds	r0, #1
 800c406:	2a30      	cmp	r2, #48	@ 0x30
 800c408:	d0f8      	beq.n	800c3fc <_strtod_l+0x1e4>
 800c40a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c40e:	2b08      	cmp	r3, #8
 800c410:	f200 84d2 	bhi.w	800cdb8 <_strtod_l+0xba0>
 800c414:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c416:	900a      	str	r0, [sp, #40]	@ 0x28
 800c418:	2000      	movs	r0, #0
 800c41a:	930c      	str	r3, [sp, #48]	@ 0x30
 800c41c:	4605      	mov	r5, r0
 800c41e:	3a30      	subs	r2, #48	@ 0x30
 800c420:	f100 0301 	add.w	r3, r0, #1
 800c424:	d018      	beq.n	800c458 <_strtod_l+0x240>
 800c426:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c428:	4419      	add	r1, r3
 800c42a:	910a      	str	r1, [sp, #40]	@ 0x28
 800c42c:	462e      	mov	r6, r5
 800c42e:	f04f 0e0a 	mov.w	lr, #10
 800c432:	1c71      	adds	r1, r6, #1
 800c434:	eba1 0c05 	sub.w	ip, r1, r5
 800c438:	4563      	cmp	r3, ip
 800c43a:	dc15      	bgt.n	800c468 <_strtod_l+0x250>
 800c43c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800c440:	182b      	adds	r3, r5, r0
 800c442:	2b08      	cmp	r3, #8
 800c444:	f105 0501 	add.w	r5, r5, #1
 800c448:	4405      	add	r5, r0
 800c44a:	dc1a      	bgt.n	800c482 <_strtod_l+0x26a>
 800c44c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c44e:	230a      	movs	r3, #10
 800c450:	fb03 2301 	mla	r3, r3, r1, r2
 800c454:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c456:	2300      	movs	r3, #0
 800c458:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c45a:	1c51      	adds	r1, r2, #1
 800c45c:	9119      	str	r1, [sp, #100]	@ 0x64
 800c45e:	7852      	ldrb	r2, [r2, #1]
 800c460:	4618      	mov	r0, r3
 800c462:	e7c5      	b.n	800c3f0 <_strtod_l+0x1d8>
 800c464:	4648      	mov	r0, r9
 800c466:	e7ce      	b.n	800c406 <_strtod_l+0x1ee>
 800c468:	2e08      	cmp	r6, #8
 800c46a:	dc05      	bgt.n	800c478 <_strtod_l+0x260>
 800c46c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c46e:	fb0e f606 	mul.w	r6, lr, r6
 800c472:	960b      	str	r6, [sp, #44]	@ 0x2c
 800c474:	460e      	mov	r6, r1
 800c476:	e7dc      	b.n	800c432 <_strtod_l+0x21a>
 800c478:	2910      	cmp	r1, #16
 800c47a:	bfd8      	it	le
 800c47c:	fb0e f707 	mulle.w	r7, lr, r7
 800c480:	e7f8      	b.n	800c474 <_strtod_l+0x25c>
 800c482:	2b0f      	cmp	r3, #15
 800c484:	bfdc      	itt	le
 800c486:	230a      	movle	r3, #10
 800c488:	fb03 2707 	mlale	r7, r3, r7, r2
 800c48c:	e7e3      	b.n	800c456 <_strtod_l+0x23e>
 800c48e:	2300      	movs	r3, #0
 800c490:	930a      	str	r3, [sp, #40]	@ 0x28
 800c492:	2301      	movs	r3, #1
 800c494:	e77a      	b.n	800c38c <_strtod_l+0x174>
 800c496:	f04f 0c00 	mov.w	ip, #0
 800c49a:	1ca2      	adds	r2, r4, #2
 800c49c:	9219      	str	r2, [sp, #100]	@ 0x64
 800c49e:	78a2      	ldrb	r2, [r4, #2]
 800c4a0:	e782      	b.n	800c3a8 <_strtod_l+0x190>
 800c4a2:	f04f 0c01 	mov.w	ip, #1
 800c4a6:	e7f8      	b.n	800c49a <_strtod_l+0x282>
 800c4a8:	080110bc 	.word	0x080110bc
 800c4ac:	08010f0c 	.word	0x08010f0c
 800c4b0:	7ff00000 	.word	0x7ff00000
 800c4b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c4b6:	1c51      	adds	r1, r2, #1
 800c4b8:	9119      	str	r1, [sp, #100]	@ 0x64
 800c4ba:	7852      	ldrb	r2, [r2, #1]
 800c4bc:	2a30      	cmp	r2, #48	@ 0x30
 800c4be:	d0f9      	beq.n	800c4b4 <_strtod_l+0x29c>
 800c4c0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c4c4:	2908      	cmp	r1, #8
 800c4c6:	f63f af75 	bhi.w	800c3b4 <_strtod_l+0x19c>
 800c4ca:	3a30      	subs	r2, #48	@ 0x30
 800c4cc:	9209      	str	r2, [sp, #36]	@ 0x24
 800c4ce:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c4d0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c4d2:	f04f 080a 	mov.w	r8, #10
 800c4d6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c4d8:	1c56      	adds	r6, r2, #1
 800c4da:	9619      	str	r6, [sp, #100]	@ 0x64
 800c4dc:	7852      	ldrb	r2, [r2, #1]
 800c4de:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c4e2:	f1be 0f09 	cmp.w	lr, #9
 800c4e6:	d939      	bls.n	800c55c <_strtod_l+0x344>
 800c4e8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c4ea:	1a76      	subs	r6, r6, r1
 800c4ec:	2e08      	cmp	r6, #8
 800c4ee:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c4f2:	dc03      	bgt.n	800c4fc <_strtod_l+0x2e4>
 800c4f4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c4f6:	4588      	cmp	r8, r1
 800c4f8:	bfa8      	it	ge
 800c4fa:	4688      	movge	r8, r1
 800c4fc:	f1bc 0f00 	cmp.w	ip, #0
 800c500:	d001      	beq.n	800c506 <_strtod_l+0x2ee>
 800c502:	f1c8 0800 	rsb	r8, r8, #0
 800c506:	2d00      	cmp	r5, #0
 800c508:	d14e      	bne.n	800c5a8 <_strtod_l+0x390>
 800c50a:	9908      	ldr	r1, [sp, #32]
 800c50c:	4308      	orrs	r0, r1
 800c50e:	f47f aebc 	bne.w	800c28a <_strtod_l+0x72>
 800c512:	2b00      	cmp	r3, #0
 800c514:	f47f aed4 	bne.w	800c2c0 <_strtod_l+0xa8>
 800c518:	2a69      	cmp	r2, #105	@ 0x69
 800c51a:	d028      	beq.n	800c56e <_strtod_l+0x356>
 800c51c:	dc25      	bgt.n	800c56a <_strtod_l+0x352>
 800c51e:	2a49      	cmp	r2, #73	@ 0x49
 800c520:	d025      	beq.n	800c56e <_strtod_l+0x356>
 800c522:	2a4e      	cmp	r2, #78	@ 0x4e
 800c524:	f47f aecc 	bne.w	800c2c0 <_strtod_l+0xa8>
 800c528:	499a      	ldr	r1, [pc, #616]	@ (800c794 <_strtod_l+0x57c>)
 800c52a:	a819      	add	r0, sp, #100	@ 0x64
 800c52c:	f003 f86c 	bl	800f608 <__match>
 800c530:	2800      	cmp	r0, #0
 800c532:	f43f aec5 	beq.w	800c2c0 <_strtod_l+0xa8>
 800c536:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c538:	781b      	ldrb	r3, [r3, #0]
 800c53a:	2b28      	cmp	r3, #40	@ 0x28
 800c53c:	d12e      	bne.n	800c59c <_strtod_l+0x384>
 800c53e:	4996      	ldr	r1, [pc, #600]	@ (800c798 <_strtod_l+0x580>)
 800c540:	aa1c      	add	r2, sp, #112	@ 0x70
 800c542:	a819      	add	r0, sp, #100	@ 0x64
 800c544:	f003 f874 	bl	800f630 <__hexnan>
 800c548:	2805      	cmp	r0, #5
 800c54a:	d127      	bne.n	800c59c <_strtod_l+0x384>
 800c54c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c54e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c552:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c556:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c55a:	e696      	b.n	800c28a <_strtod_l+0x72>
 800c55c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c55e:	fb08 2101 	mla	r1, r8, r1, r2
 800c562:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c566:	9209      	str	r2, [sp, #36]	@ 0x24
 800c568:	e7b5      	b.n	800c4d6 <_strtod_l+0x2be>
 800c56a:	2a6e      	cmp	r2, #110	@ 0x6e
 800c56c:	e7da      	b.n	800c524 <_strtod_l+0x30c>
 800c56e:	498b      	ldr	r1, [pc, #556]	@ (800c79c <_strtod_l+0x584>)
 800c570:	a819      	add	r0, sp, #100	@ 0x64
 800c572:	f003 f849 	bl	800f608 <__match>
 800c576:	2800      	cmp	r0, #0
 800c578:	f43f aea2 	beq.w	800c2c0 <_strtod_l+0xa8>
 800c57c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c57e:	4988      	ldr	r1, [pc, #544]	@ (800c7a0 <_strtod_l+0x588>)
 800c580:	3b01      	subs	r3, #1
 800c582:	a819      	add	r0, sp, #100	@ 0x64
 800c584:	9319      	str	r3, [sp, #100]	@ 0x64
 800c586:	f003 f83f 	bl	800f608 <__match>
 800c58a:	b910      	cbnz	r0, 800c592 <_strtod_l+0x37a>
 800c58c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c58e:	3301      	adds	r3, #1
 800c590:	9319      	str	r3, [sp, #100]	@ 0x64
 800c592:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800c7b0 <_strtod_l+0x598>
 800c596:	f04f 0a00 	mov.w	sl, #0
 800c59a:	e676      	b.n	800c28a <_strtod_l+0x72>
 800c59c:	4881      	ldr	r0, [pc, #516]	@ (800c7a4 <_strtod_l+0x58c>)
 800c59e:	f001 feef 	bl	800e380 <nan>
 800c5a2:	ec5b ab10 	vmov	sl, fp, d0
 800c5a6:	e670      	b.n	800c28a <_strtod_l+0x72>
 800c5a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5aa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c5ac:	eba8 0303 	sub.w	r3, r8, r3
 800c5b0:	f1b9 0f00 	cmp.w	r9, #0
 800c5b4:	bf08      	it	eq
 800c5b6:	46a9      	moveq	r9, r5
 800c5b8:	2d10      	cmp	r5, #16
 800c5ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5bc:	462c      	mov	r4, r5
 800c5be:	bfa8      	it	ge
 800c5c0:	2410      	movge	r4, #16
 800c5c2:	f7f3 ffbf 	bl	8000544 <__aeabi_ui2d>
 800c5c6:	2d09      	cmp	r5, #9
 800c5c8:	4682      	mov	sl, r0
 800c5ca:	468b      	mov	fp, r1
 800c5cc:	dc13      	bgt.n	800c5f6 <_strtod_l+0x3de>
 800c5ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	f43f ae5a 	beq.w	800c28a <_strtod_l+0x72>
 800c5d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5d8:	dd78      	ble.n	800c6cc <_strtod_l+0x4b4>
 800c5da:	2b16      	cmp	r3, #22
 800c5dc:	dc5f      	bgt.n	800c69e <_strtod_l+0x486>
 800c5de:	4972      	ldr	r1, [pc, #456]	@ (800c7a8 <_strtod_l+0x590>)
 800c5e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c5e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5e8:	4652      	mov	r2, sl
 800c5ea:	465b      	mov	r3, fp
 800c5ec:	f7f4 f824 	bl	8000638 <__aeabi_dmul>
 800c5f0:	4682      	mov	sl, r0
 800c5f2:	468b      	mov	fp, r1
 800c5f4:	e649      	b.n	800c28a <_strtod_l+0x72>
 800c5f6:	4b6c      	ldr	r3, [pc, #432]	@ (800c7a8 <_strtod_l+0x590>)
 800c5f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c5fc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c600:	f7f4 f81a 	bl	8000638 <__aeabi_dmul>
 800c604:	4682      	mov	sl, r0
 800c606:	4638      	mov	r0, r7
 800c608:	468b      	mov	fp, r1
 800c60a:	f7f3 ff9b 	bl	8000544 <__aeabi_ui2d>
 800c60e:	4602      	mov	r2, r0
 800c610:	460b      	mov	r3, r1
 800c612:	4650      	mov	r0, sl
 800c614:	4659      	mov	r1, fp
 800c616:	f7f3 fe59 	bl	80002cc <__adddf3>
 800c61a:	2d0f      	cmp	r5, #15
 800c61c:	4682      	mov	sl, r0
 800c61e:	468b      	mov	fp, r1
 800c620:	ddd5      	ble.n	800c5ce <_strtod_l+0x3b6>
 800c622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c624:	1b2c      	subs	r4, r5, r4
 800c626:	441c      	add	r4, r3
 800c628:	2c00      	cmp	r4, #0
 800c62a:	f340 8093 	ble.w	800c754 <_strtod_l+0x53c>
 800c62e:	f014 030f 	ands.w	r3, r4, #15
 800c632:	d00a      	beq.n	800c64a <_strtod_l+0x432>
 800c634:	495c      	ldr	r1, [pc, #368]	@ (800c7a8 <_strtod_l+0x590>)
 800c636:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c63a:	4652      	mov	r2, sl
 800c63c:	465b      	mov	r3, fp
 800c63e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c642:	f7f3 fff9 	bl	8000638 <__aeabi_dmul>
 800c646:	4682      	mov	sl, r0
 800c648:	468b      	mov	fp, r1
 800c64a:	f034 040f 	bics.w	r4, r4, #15
 800c64e:	d073      	beq.n	800c738 <_strtod_l+0x520>
 800c650:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c654:	dd49      	ble.n	800c6ea <_strtod_l+0x4d2>
 800c656:	2400      	movs	r4, #0
 800c658:	46a0      	mov	r8, r4
 800c65a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c65c:	46a1      	mov	r9, r4
 800c65e:	9a05      	ldr	r2, [sp, #20]
 800c660:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800c7b0 <_strtod_l+0x598>
 800c664:	2322      	movs	r3, #34	@ 0x22
 800c666:	6013      	str	r3, [r2, #0]
 800c668:	f04f 0a00 	mov.w	sl, #0
 800c66c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c66e:	2b00      	cmp	r3, #0
 800c670:	f43f ae0b 	beq.w	800c28a <_strtod_l+0x72>
 800c674:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c676:	9805      	ldr	r0, [sp, #20]
 800c678:	f003 f8fc 	bl	800f874 <_Bfree>
 800c67c:	9805      	ldr	r0, [sp, #20]
 800c67e:	4649      	mov	r1, r9
 800c680:	f003 f8f8 	bl	800f874 <_Bfree>
 800c684:	9805      	ldr	r0, [sp, #20]
 800c686:	4641      	mov	r1, r8
 800c688:	f003 f8f4 	bl	800f874 <_Bfree>
 800c68c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c68e:	9805      	ldr	r0, [sp, #20]
 800c690:	f003 f8f0 	bl	800f874 <_Bfree>
 800c694:	9805      	ldr	r0, [sp, #20]
 800c696:	4621      	mov	r1, r4
 800c698:	f003 f8ec 	bl	800f874 <_Bfree>
 800c69c:	e5f5      	b.n	800c28a <_strtod_l+0x72>
 800c69e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6a0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	dbbc      	blt.n	800c622 <_strtod_l+0x40a>
 800c6a8:	4c3f      	ldr	r4, [pc, #252]	@ (800c7a8 <_strtod_l+0x590>)
 800c6aa:	f1c5 050f 	rsb	r5, r5, #15
 800c6ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c6b2:	4652      	mov	r2, sl
 800c6b4:	465b      	mov	r3, fp
 800c6b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6ba:	f7f3 ffbd 	bl	8000638 <__aeabi_dmul>
 800c6be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6c0:	1b5d      	subs	r5, r3, r5
 800c6c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c6c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c6ca:	e78f      	b.n	800c5ec <_strtod_l+0x3d4>
 800c6cc:	3316      	adds	r3, #22
 800c6ce:	dba8      	blt.n	800c622 <_strtod_l+0x40a>
 800c6d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6d2:	eba3 0808 	sub.w	r8, r3, r8
 800c6d6:	4b34      	ldr	r3, [pc, #208]	@ (800c7a8 <_strtod_l+0x590>)
 800c6d8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c6dc:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c6e0:	4650      	mov	r0, sl
 800c6e2:	4659      	mov	r1, fp
 800c6e4:	f7f4 f8d2 	bl	800088c <__aeabi_ddiv>
 800c6e8:	e782      	b.n	800c5f0 <_strtod_l+0x3d8>
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	4f2f      	ldr	r7, [pc, #188]	@ (800c7ac <_strtod_l+0x594>)
 800c6ee:	1124      	asrs	r4, r4, #4
 800c6f0:	4650      	mov	r0, sl
 800c6f2:	4659      	mov	r1, fp
 800c6f4:	461e      	mov	r6, r3
 800c6f6:	2c01      	cmp	r4, #1
 800c6f8:	dc21      	bgt.n	800c73e <_strtod_l+0x526>
 800c6fa:	b10b      	cbz	r3, 800c700 <_strtod_l+0x4e8>
 800c6fc:	4682      	mov	sl, r0
 800c6fe:	468b      	mov	fp, r1
 800c700:	492a      	ldr	r1, [pc, #168]	@ (800c7ac <_strtod_l+0x594>)
 800c702:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c706:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c70a:	4652      	mov	r2, sl
 800c70c:	465b      	mov	r3, fp
 800c70e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c712:	f7f3 ff91 	bl	8000638 <__aeabi_dmul>
 800c716:	4b26      	ldr	r3, [pc, #152]	@ (800c7b0 <_strtod_l+0x598>)
 800c718:	460a      	mov	r2, r1
 800c71a:	400b      	ands	r3, r1
 800c71c:	4925      	ldr	r1, [pc, #148]	@ (800c7b4 <_strtod_l+0x59c>)
 800c71e:	428b      	cmp	r3, r1
 800c720:	4682      	mov	sl, r0
 800c722:	d898      	bhi.n	800c656 <_strtod_l+0x43e>
 800c724:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c728:	428b      	cmp	r3, r1
 800c72a:	bf86      	itte	hi
 800c72c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800c7b8 <_strtod_l+0x5a0>
 800c730:	f04f 3aff 	movhi.w	sl, #4294967295
 800c734:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c738:	2300      	movs	r3, #0
 800c73a:	9308      	str	r3, [sp, #32]
 800c73c:	e076      	b.n	800c82c <_strtod_l+0x614>
 800c73e:	07e2      	lsls	r2, r4, #31
 800c740:	d504      	bpl.n	800c74c <_strtod_l+0x534>
 800c742:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c746:	f7f3 ff77 	bl	8000638 <__aeabi_dmul>
 800c74a:	2301      	movs	r3, #1
 800c74c:	3601      	adds	r6, #1
 800c74e:	1064      	asrs	r4, r4, #1
 800c750:	3708      	adds	r7, #8
 800c752:	e7d0      	b.n	800c6f6 <_strtod_l+0x4de>
 800c754:	d0f0      	beq.n	800c738 <_strtod_l+0x520>
 800c756:	4264      	negs	r4, r4
 800c758:	f014 020f 	ands.w	r2, r4, #15
 800c75c:	d00a      	beq.n	800c774 <_strtod_l+0x55c>
 800c75e:	4b12      	ldr	r3, [pc, #72]	@ (800c7a8 <_strtod_l+0x590>)
 800c760:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c764:	4650      	mov	r0, sl
 800c766:	4659      	mov	r1, fp
 800c768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76c:	f7f4 f88e 	bl	800088c <__aeabi_ddiv>
 800c770:	4682      	mov	sl, r0
 800c772:	468b      	mov	fp, r1
 800c774:	1124      	asrs	r4, r4, #4
 800c776:	d0df      	beq.n	800c738 <_strtod_l+0x520>
 800c778:	2c1f      	cmp	r4, #31
 800c77a:	dd1f      	ble.n	800c7bc <_strtod_l+0x5a4>
 800c77c:	2400      	movs	r4, #0
 800c77e:	46a0      	mov	r8, r4
 800c780:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c782:	46a1      	mov	r9, r4
 800c784:	9a05      	ldr	r2, [sp, #20]
 800c786:	2322      	movs	r3, #34	@ 0x22
 800c788:	f04f 0a00 	mov.w	sl, #0
 800c78c:	f04f 0b00 	mov.w	fp, #0
 800c790:	6013      	str	r3, [r2, #0]
 800c792:	e76b      	b.n	800c66c <_strtod_l+0x454>
 800c794:	08010f1b 	.word	0x08010f1b
 800c798:	080110a8 	.word	0x080110a8
 800c79c:	08010f13 	.word	0x08010f13
 800c7a0:	08010f52 	.word	0x08010f52
 800c7a4:	08010f0b 	.word	0x08010f0b
 800c7a8:	08011230 	.word	0x08011230
 800c7ac:	08011208 	.word	0x08011208
 800c7b0:	7ff00000 	.word	0x7ff00000
 800c7b4:	7ca00000 	.word	0x7ca00000
 800c7b8:	7fefffff 	.word	0x7fefffff
 800c7bc:	f014 0310 	ands.w	r3, r4, #16
 800c7c0:	bf18      	it	ne
 800c7c2:	236a      	movne	r3, #106	@ 0x6a
 800c7c4:	4ea9      	ldr	r6, [pc, #676]	@ (800ca6c <_strtod_l+0x854>)
 800c7c6:	9308      	str	r3, [sp, #32]
 800c7c8:	4650      	mov	r0, sl
 800c7ca:	4659      	mov	r1, fp
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	07e7      	lsls	r7, r4, #31
 800c7d0:	d504      	bpl.n	800c7dc <_strtod_l+0x5c4>
 800c7d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c7d6:	f7f3 ff2f 	bl	8000638 <__aeabi_dmul>
 800c7da:	2301      	movs	r3, #1
 800c7dc:	1064      	asrs	r4, r4, #1
 800c7de:	f106 0608 	add.w	r6, r6, #8
 800c7e2:	d1f4      	bne.n	800c7ce <_strtod_l+0x5b6>
 800c7e4:	b10b      	cbz	r3, 800c7ea <_strtod_l+0x5d2>
 800c7e6:	4682      	mov	sl, r0
 800c7e8:	468b      	mov	fp, r1
 800c7ea:	9b08      	ldr	r3, [sp, #32]
 800c7ec:	b1b3      	cbz	r3, 800c81c <_strtod_l+0x604>
 800c7ee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c7f2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	4659      	mov	r1, fp
 800c7fa:	dd0f      	ble.n	800c81c <_strtod_l+0x604>
 800c7fc:	2b1f      	cmp	r3, #31
 800c7fe:	dd56      	ble.n	800c8ae <_strtod_l+0x696>
 800c800:	2b34      	cmp	r3, #52	@ 0x34
 800c802:	bfde      	ittt	le
 800c804:	f04f 33ff 	movle.w	r3, #4294967295
 800c808:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c80c:	4093      	lslle	r3, r2
 800c80e:	f04f 0a00 	mov.w	sl, #0
 800c812:	bfcc      	ite	gt
 800c814:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c818:	ea03 0b01 	andle.w	fp, r3, r1
 800c81c:	2200      	movs	r2, #0
 800c81e:	2300      	movs	r3, #0
 800c820:	4650      	mov	r0, sl
 800c822:	4659      	mov	r1, fp
 800c824:	f7f4 f970 	bl	8000b08 <__aeabi_dcmpeq>
 800c828:	2800      	cmp	r0, #0
 800c82a:	d1a7      	bne.n	800c77c <_strtod_l+0x564>
 800c82c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c82e:	9300      	str	r3, [sp, #0]
 800c830:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c832:	9805      	ldr	r0, [sp, #20]
 800c834:	462b      	mov	r3, r5
 800c836:	464a      	mov	r2, r9
 800c838:	f003 f884 	bl	800f944 <__s2b>
 800c83c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c83e:	2800      	cmp	r0, #0
 800c840:	f43f af09 	beq.w	800c656 <_strtod_l+0x43e>
 800c844:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c846:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c848:	2a00      	cmp	r2, #0
 800c84a:	eba3 0308 	sub.w	r3, r3, r8
 800c84e:	bfa8      	it	ge
 800c850:	2300      	movge	r3, #0
 800c852:	9312      	str	r3, [sp, #72]	@ 0x48
 800c854:	2400      	movs	r4, #0
 800c856:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c85a:	9316      	str	r3, [sp, #88]	@ 0x58
 800c85c:	46a0      	mov	r8, r4
 800c85e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c860:	9805      	ldr	r0, [sp, #20]
 800c862:	6859      	ldr	r1, [r3, #4]
 800c864:	f002 ffc6 	bl	800f7f4 <_Balloc>
 800c868:	4681      	mov	r9, r0
 800c86a:	2800      	cmp	r0, #0
 800c86c:	f43f aef7 	beq.w	800c65e <_strtod_l+0x446>
 800c870:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c872:	691a      	ldr	r2, [r3, #16]
 800c874:	3202      	adds	r2, #2
 800c876:	f103 010c 	add.w	r1, r3, #12
 800c87a:	0092      	lsls	r2, r2, #2
 800c87c:	300c      	adds	r0, #12
 800c87e:	f001 fd6e 	bl	800e35e <memcpy>
 800c882:	ec4b ab10 	vmov	d0, sl, fp
 800c886:	9805      	ldr	r0, [sp, #20]
 800c888:	aa1c      	add	r2, sp, #112	@ 0x70
 800c88a:	a91b      	add	r1, sp, #108	@ 0x6c
 800c88c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c890:	f003 fb8c 	bl	800ffac <__d2b>
 800c894:	901a      	str	r0, [sp, #104]	@ 0x68
 800c896:	2800      	cmp	r0, #0
 800c898:	f43f aee1 	beq.w	800c65e <_strtod_l+0x446>
 800c89c:	9805      	ldr	r0, [sp, #20]
 800c89e:	2101      	movs	r1, #1
 800c8a0:	f003 f8e6 	bl	800fa70 <__i2b>
 800c8a4:	4680      	mov	r8, r0
 800c8a6:	b948      	cbnz	r0, 800c8bc <_strtod_l+0x6a4>
 800c8a8:	f04f 0800 	mov.w	r8, #0
 800c8ac:	e6d7      	b.n	800c65e <_strtod_l+0x446>
 800c8ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c8b2:	fa02 f303 	lsl.w	r3, r2, r3
 800c8b6:	ea03 0a0a 	and.w	sl, r3, sl
 800c8ba:	e7af      	b.n	800c81c <_strtod_l+0x604>
 800c8bc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c8be:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c8c0:	2d00      	cmp	r5, #0
 800c8c2:	bfab      	itete	ge
 800c8c4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c8c6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c8c8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c8ca:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c8cc:	bfac      	ite	ge
 800c8ce:	18ef      	addge	r7, r5, r3
 800c8d0:	1b5e      	sublt	r6, r3, r5
 800c8d2:	9b08      	ldr	r3, [sp, #32]
 800c8d4:	1aed      	subs	r5, r5, r3
 800c8d6:	4415      	add	r5, r2
 800c8d8:	4b65      	ldr	r3, [pc, #404]	@ (800ca70 <_strtod_l+0x858>)
 800c8da:	3d01      	subs	r5, #1
 800c8dc:	429d      	cmp	r5, r3
 800c8de:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c8e2:	da50      	bge.n	800c986 <_strtod_l+0x76e>
 800c8e4:	1b5b      	subs	r3, r3, r5
 800c8e6:	2b1f      	cmp	r3, #31
 800c8e8:	eba2 0203 	sub.w	r2, r2, r3
 800c8ec:	f04f 0101 	mov.w	r1, #1
 800c8f0:	dc3d      	bgt.n	800c96e <_strtod_l+0x756>
 800c8f2:	fa01 f303 	lsl.w	r3, r1, r3
 800c8f6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	9310      	str	r3, [sp, #64]	@ 0x40
 800c8fc:	18bd      	adds	r5, r7, r2
 800c8fe:	9b08      	ldr	r3, [sp, #32]
 800c900:	42af      	cmp	r7, r5
 800c902:	4416      	add	r6, r2
 800c904:	441e      	add	r6, r3
 800c906:	463b      	mov	r3, r7
 800c908:	bfa8      	it	ge
 800c90a:	462b      	movge	r3, r5
 800c90c:	42b3      	cmp	r3, r6
 800c90e:	bfa8      	it	ge
 800c910:	4633      	movge	r3, r6
 800c912:	2b00      	cmp	r3, #0
 800c914:	bfc2      	ittt	gt
 800c916:	1aed      	subgt	r5, r5, r3
 800c918:	1af6      	subgt	r6, r6, r3
 800c91a:	1aff      	subgt	r7, r7, r3
 800c91c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c91e:	2b00      	cmp	r3, #0
 800c920:	dd16      	ble.n	800c950 <_strtod_l+0x738>
 800c922:	4641      	mov	r1, r8
 800c924:	9805      	ldr	r0, [sp, #20]
 800c926:	461a      	mov	r2, r3
 800c928:	f003 f95a 	bl	800fbe0 <__pow5mult>
 800c92c:	4680      	mov	r8, r0
 800c92e:	2800      	cmp	r0, #0
 800c930:	d0ba      	beq.n	800c8a8 <_strtod_l+0x690>
 800c932:	4601      	mov	r1, r0
 800c934:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c936:	9805      	ldr	r0, [sp, #20]
 800c938:	f003 f8b0 	bl	800fa9c <__multiply>
 800c93c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c93e:	2800      	cmp	r0, #0
 800c940:	f43f ae8d 	beq.w	800c65e <_strtod_l+0x446>
 800c944:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c946:	9805      	ldr	r0, [sp, #20]
 800c948:	f002 ff94 	bl	800f874 <_Bfree>
 800c94c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c94e:	931a      	str	r3, [sp, #104]	@ 0x68
 800c950:	2d00      	cmp	r5, #0
 800c952:	dc1d      	bgt.n	800c990 <_strtod_l+0x778>
 800c954:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c956:	2b00      	cmp	r3, #0
 800c958:	dd23      	ble.n	800c9a2 <_strtod_l+0x78a>
 800c95a:	4649      	mov	r1, r9
 800c95c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c95e:	9805      	ldr	r0, [sp, #20]
 800c960:	f003 f93e 	bl	800fbe0 <__pow5mult>
 800c964:	4681      	mov	r9, r0
 800c966:	b9e0      	cbnz	r0, 800c9a2 <_strtod_l+0x78a>
 800c968:	f04f 0900 	mov.w	r9, #0
 800c96c:	e677      	b.n	800c65e <_strtod_l+0x446>
 800c96e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c972:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c976:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c97a:	35e2      	adds	r5, #226	@ 0xe2
 800c97c:	fa01 f305 	lsl.w	r3, r1, r5
 800c980:	9310      	str	r3, [sp, #64]	@ 0x40
 800c982:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c984:	e7ba      	b.n	800c8fc <_strtod_l+0x6e4>
 800c986:	2300      	movs	r3, #0
 800c988:	9310      	str	r3, [sp, #64]	@ 0x40
 800c98a:	2301      	movs	r3, #1
 800c98c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c98e:	e7b5      	b.n	800c8fc <_strtod_l+0x6e4>
 800c990:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c992:	9805      	ldr	r0, [sp, #20]
 800c994:	462a      	mov	r2, r5
 800c996:	f003 f97d 	bl	800fc94 <__lshift>
 800c99a:	901a      	str	r0, [sp, #104]	@ 0x68
 800c99c:	2800      	cmp	r0, #0
 800c99e:	d1d9      	bne.n	800c954 <_strtod_l+0x73c>
 800c9a0:	e65d      	b.n	800c65e <_strtod_l+0x446>
 800c9a2:	2e00      	cmp	r6, #0
 800c9a4:	dd07      	ble.n	800c9b6 <_strtod_l+0x79e>
 800c9a6:	4649      	mov	r1, r9
 800c9a8:	9805      	ldr	r0, [sp, #20]
 800c9aa:	4632      	mov	r2, r6
 800c9ac:	f003 f972 	bl	800fc94 <__lshift>
 800c9b0:	4681      	mov	r9, r0
 800c9b2:	2800      	cmp	r0, #0
 800c9b4:	d0d8      	beq.n	800c968 <_strtod_l+0x750>
 800c9b6:	2f00      	cmp	r7, #0
 800c9b8:	dd08      	ble.n	800c9cc <_strtod_l+0x7b4>
 800c9ba:	4641      	mov	r1, r8
 800c9bc:	9805      	ldr	r0, [sp, #20]
 800c9be:	463a      	mov	r2, r7
 800c9c0:	f003 f968 	bl	800fc94 <__lshift>
 800c9c4:	4680      	mov	r8, r0
 800c9c6:	2800      	cmp	r0, #0
 800c9c8:	f43f ae49 	beq.w	800c65e <_strtod_l+0x446>
 800c9cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c9ce:	9805      	ldr	r0, [sp, #20]
 800c9d0:	464a      	mov	r2, r9
 800c9d2:	f003 f9e7 	bl	800fda4 <__mdiff>
 800c9d6:	4604      	mov	r4, r0
 800c9d8:	2800      	cmp	r0, #0
 800c9da:	f43f ae40 	beq.w	800c65e <_strtod_l+0x446>
 800c9de:	68c3      	ldr	r3, [r0, #12]
 800c9e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	60c3      	str	r3, [r0, #12]
 800c9e6:	4641      	mov	r1, r8
 800c9e8:	f003 f9c0 	bl	800fd6c <__mcmp>
 800c9ec:	2800      	cmp	r0, #0
 800c9ee:	da45      	bge.n	800ca7c <_strtod_l+0x864>
 800c9f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9f2:	ea53 030a 	orrs.w	r3, r3, sl
 800c9f6:	d16b      	bne.n	800cad0 <_strtod_l+0x8b8>
 800c9f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d167      	bne.n	800cad0 <_strtod_l+0x8b8>
 800ca00:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ca04:	0d1b      	lsrs	r3, r3, #20
 800ca06:	051b      	lsls	r3, r3, #20
 800ca08:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ca0c:	d960      	bls.n	800cad0 <_strtod_l+0x8b8>
 800ca0e:	6963      	ldr	r3, [r4, #20]
 800ca10:	b913      	cbnz	r3, 800ca18 <_strtod_l+0x800>
 800ca12:	6923      	ldr	r3, [r4, #16]
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	dd5b      	ble.n	800cad0 <_strtod_l+0x8b8>
 800ca18:	4621      	mov	r1, r4
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	9805      	ldr	r0, [sp, #20]
 800ca1e:	f003 f939 	bl	800fc94 <__lshift>
 800ca22:	4641      	mov	r1, r8
 800ca24:	4604      	mov	r4, r0
 800ca26:	f003 f9a1 	bl	800fd6c <__mcmp>
 800ca2a:	2800      	cmp	r0, #0
 800ca2c:	dd50      	ble.n	800cad0 <_strtod_l+0x8b8>
 800ca2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ca32:	9a08      	ldr	r2, [sp, #32]
 800ca34:	0d1b      	lsrs	r3, r3, #20
 800ca36:	051b      	lsls	r3, r3, #20
 800ca38:	2a00      	cmp	r2, #0
 800ca3a:	d06a      	beq.n	800cb12 <_strtod_l+0x8fa>
 800ca3c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ca40:	d867      	bhi.n	800cb12 <_strtod_l+0x8fa>
 800ca42:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ca46:	f67f ae9d 	bls.w	800c784 <_strtod_l+0x56c>
 800ca4a:	4b0a      	ldr	r3, [pc, #40]	@ (800ca74 <_strtod_l+0x85c>)
 800ca4c:	4650      	mov	r0, sl
 800ca4e:	4659      	mov	r1, fp
 800ca50:	2200      	movs	r2, #0
 800ca52:	f7f3 fdf1 	bl	8000638 <__aeabi_dmul>
 800ca56:	4b08      	ldr	r3, [pc, #32]	@ (800ca78 <_strtod_l+0x860>)
 800ca58:	400b      	ands	r3, r1
 800ca5a:	4682      	mov	sl, r0
 800ca5c:	468b      	mov	fp, r1
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	f47f ae08 	bne.w	800c674 <_strtod_l+0x45c>
 800ca64:	9a05      	ldr	r2, [sp, #20]
 800ca66:	2322      	movs	r3, #34	@ 0x22
 800ca68:	6013      	str	r3, [r2, #0]
 800ca6a:	e603      	b.n	800c674 <_strtod_l+0x45c>
 800ca6c:	080110d0 	.word	0x080110d0
 800ca70:	fffffc02 	.word	0xfffffc02
 800ca74:	39500000 	.word	0x39500000
 800ca78:	7ff00000 	.word	0x7ff00000
 800ca7c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ca80:	d165      	bne.n	800cb4e <_strtod_l+0x936>
 800ca82:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ca84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca88:	b35a      	cbz	r2, 800cae2 <_strtod_l+0x8ca>
 800ca8a:	4a9f      	ldr	r2, [pc, #636]	@ (800cd08 <_strtod_l+0xaf0>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d12b      	bne.n	800cae8 <_strtod_l+0x8d0>
 800ca90:	9b08      	ldr	r3, [sp, #32]
 800ca92:	4651      	mov	r1, sl
 800ca94:	b303      	cbz	r3, 800cad8 <_strtod_l+0x8c0>
 800ca96:	4b9d      	ldr	r3, [pc, #628]	@ (800cd0c <_strtod_l+0xaf4>)
 800ca98:	465a      	mov	r2, fp
 800ca9a:	4013      	ands	r3, r2
 800ca9c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800caa0:	f04f 32ff 	mov.w	r2, #4294967295
 800caa4:	d81b      	bhi.n	800cade <_strtod_l+0x8c6>
 800caa6:	0d1b      	lsrs	r3, r3, #20
 800caa8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800caac:	fa02 f303 	lsl.w	r3, r2, r3
 800cab0:	4299      	cmp	r1, r3
 800cab2:	d119      	bne.n	800cae8 <_strtod_l+0x8d0>
 800cab4:	4b96      	ldr	r3, [pc, #600]	@ (800cd10 <_strtod_l+0xaf8>)
 800cab6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cab8:	429a      	cmp	r2, r3
 800caba:	d102      	bne.n	800cac2 <_strtod_l+0x8aa>
 800cabc:	3101      	adds	r1, #1
 800cabe:	f43f adce 	beq.w	800c65e <_strtod_l+0x446>
 800cac2:	4b92      	ldr	r3, [pc, #584]	@ (800cd0c <_strtod_l+0xaf4>)
 800cac4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cac6:	401a      	ands	r2, r3
 800cac8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800cacc:	f04f 0a00 	mov.w	sl, #0
 800cad0:	9b08      	ldr	r3, [sp, #32]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d1b9      	bne.n	800ca4a <_strtod_l+0x832>
 800cad6:	e5cd      	b.n	800c674 <_strtod_l+0x45c>
 800cad8:	f04f 33ff 	mov.w	r3, #4294967295
 800cadc:	e7e8      	b.n	800cab0 <_strtod_l+0x898>
 800cade:	4613      	mov	r3, r2
 800cae0:	e7e6      	b.n	800cab0 <_strtod_l+0x898>
 800cae2:	ea53 030a 	orrs.w	r3, r3, sl
 800cae6:	d0a2      	beq.n	800ca2e <_strtod_l+0x816>
 800cae8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800caea:	b1db      	cbz	r3, 800cb24 <_strtod_l+0x90c>
 800caec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800caee:	4213      	tst	r3, r2
 800caf0:	d0ee      	beq.n	800cad0 <_strtod_l+0x8b8>
 800caf2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800caf4:	9a08      	ldr	r2, [sp, #32]
 800caf6:	4650      	mov	r0, sl
 800caf8:	4659      	mov	r1, fp
 800cafa:	b1bb      	cbz	r3, 800cb2c <_strtod_l+0x914>
 800cafc:	f7ff fb6e 	bl	800c1dc <sulp>
 800cb00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb04:	ec53 2b10 	vmov	r2, r3, d0
 800cb08:	f7f3 fbe0 	bl	80002cc <__adddf3>
 800cb0c:	4682      	mov	sl, r0
 800cb0e:	468b      	mov	fp, r1
 800cb10:	e7de      	b.n	800cad0 <_strtod_l+0x8b8>
 800cb12:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cb16:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cb1a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cb1e:	f04f 3aff 	mov.w	sl, #4294967295
 800cb22:	e7d5      	b.n	800cad0 <_strtod_l+0x8b8>
 800cb24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cb26:	ea13 0f0a 	tst.w	r3, sl
 800cb2a:	e7e1      	b.n	800caf0 <_strtod_l+0x8d8>
 800cb2c:	f7ff fb56 	bl	800c1dc <sulp>
 800cb30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb34:	ec53 2b10 	vmov	r2, r3, d0
 800cb38:	f7f3 fbc6 	bl	80002c8 <__aeabi_dsub>
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	2300      	movs	r3, #0
 800cb40:	4682      	mov	sl, r0
 800cb42:	468b      	mov	fp, r1
 800cb44:	f7f3 ffe0 	bl	8000b08 <__aeabi_dcmpeq>
 800cb48:	2800      	cmp	r0, #0
 800cb4a:	d0c1      	beq.n	800cad0 <_strtod_l+0x8b8>
 800cb4c:	e61a      	b.n	800c784 <_strtod_l+0x56c>
 800cb4e:	4641      	mov	r1, r8
 800cb50:	4620      	mov	r0, r4
 800cb52:	f003 fa83 	bl	801005c <__ratio>
 800cb56:	ec57 6b10 	vmov	r6, r7, d0
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cb60:	4630      	mov	r0, r6
 800cb62:	4639      	mov	r1, r7
 800cb64:	f7f3 ffe4 	bl	8000b30 <__aeabi_dcmple>
 800cb68:	2800      	cmp	r0, #0
 800cb6a:	d06f      	beq.n	800cc4c <_strtod_l+0xa34>
 800cb6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d17a      	bne.n	800cc68 <_strtod_l+0xa50>
 800cb72:	f1ba 0f00 	cmp.w	sl, #0
 800cb76:	d158      	bne.n	800cc2a <_strtod_l+0xa12>
 800cb78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d15a      	bne.n	800cc38 <_strtod_l+0xa20>
 800cb82:	4b64      	ldr	r3, [pc, #400]	@ (800cd14 <_strtod_l+0xafc>)
 800cb84:	2200      	movs	r2, #0
 800cb86:	4630      	mov	r0, r6
 800cb88:	4639      	mov	r1, r7
 800cb8a:	f7f3 ffc7 	bl	8000b1c <__aeabi_dcmplt>
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	d159      	bne.n	800cc46 <_strtod_l+0xa2e>
 800cb92:	4630      	mov	r0, r6
 800cb94:	4639      	mov	r1, r7
 800cb96:	4b60      	ldr	r3, [pc, #384]	@ (800cd18 <_strtod_l+0xb00>)
 800cb98:	2200      	movs	r2, #0
 800cb9a:	f7f3 fd4d 	bl	8000638 <__aeabi_dmul>
 800cb9e:	4606      	mov	r6, r0
 800cba0:	460f      	mov	r7, r1
 800cba2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800cba6:	9606      	str	r6, [sp, #24]
 800cba8:	9307      	str	r3, [sp, #28]
 800cbaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cbae:	4d57      	ldr	r5, [pc, #348]	@ (800cd0c <_strtod_l+0xaf4>)
 800cbb0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cbb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cbb6:	401d      	ands	r5, r3
 800cbb8:	4b58      	ldr	r3, [pc, #352]	@ (800cd1c <_strtod_l+0xb04>)
 800cbba:	429d      	cmp	r5, r3
 800cbbc:	f040 80b2 	bne.w	800cd24 <_strtod_l+0xb0c>
 800cbc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cbc2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800cbc6:	ec4b ab10 	vmov	d0, sl, fp
 800cbca:	f003 f97f 	bl	800fecc <__ulp>
 800cbce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cbd2:	ec51 0b10 	vmov	r0, r1, d0
 800cbd6:	f7f3 fd2f 	bl	8000638 <__aeabi_dmul>
 800cbda:	4652      	mov	r2, sl
 800cbdc:	465b      	mov	r3, fp
 800cbde:	f7f3 fb75 	bl	80002cc <__adddf3>
 800cbe2:	460b      	mov	r3, r1
 800cbe4:	4949      	ldr	r1, [pc, #292]	@ (800cd0c <_strtod_l+0xaf4>)
 800cbe6:	4a4e      	ldr	r2, [pc, #312]	@ (800cd20 <_strtod_l+0xb08>)
 800cbe8:	4019      	ands	r1, r3
 800cbea:	4291      	cmp	r1, r2
 800cbec:	4682      	mov	sl, r0
 800cbee:	d942      	bls.n	800cc76 <_strtod_l+0xa5e>
 800cbf0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cbf2:	4b47      	ldr	r3, [pc, #284]	@ (800cd10 <_strtod_l+0xaf8>)
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d103      	bne.n	800cc00 <_strtod_l+0x9e8>
 800cbf8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cbfa:	3301      	adds	r3, #1
 800cbfc:	f43f ad2f 	beq.w	800c65e <_strtod_l+0x446>
 800cc00:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800cd10 <_strtod_l+0xaf8>
 800cc04:	f04f 3aff 	mov.w	sl, #4294967295
 800cc08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc0a:	9805      	ldr	r0, [sp, #20]
 800cc0c:	f002 fe32 	bl	800f874 <_Bfree>
 800cc10:	9805      	ldr	r0, [sp, #20]
 800cc12:	4649      	mov	r1, r9
 800cc14:	f002 fe2e 	bl	800f874 <_Bfree>
 800cc18:	9805      	ldr	r0, [sp, #20]
 800cc1a:	4641      	mov	r1, r8
 800cc1c:	f002 fe2a 	bl	800f874 <_Bfree>
 800cc20:	9805      	ldr	r0, [sp, #20]
 800cc22:	4621      	mov	r1, r4
 800cc24:	f002 fe26 	bl	800f874 <_Bfree>
 800cc28:	e619      	b.n	800c85e <_strtod_l+0x646>
 800cc2a:	f1ba 0f01 	cmp.w	sl, #1
 800cc2e:	d103      	bne.n	800cc38 <_strtod_l+0xa20>
 800cc30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	f43f ada6 	beq.w	800c784 <_strtod_l+0x56c>
 800cc38:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800cce8 <_strtod_l+0xad0>
 800cc3c:	4f35      	ldr	r7, [pc, #212]	@ (800cd14 <_strtod_l+0xafc>)
 800cc3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cc42:	2600      	movs	r6, #0
 800cc44:	e7b1      	b.n	800cbaa <_strtod_l+0x992>
 800cc46:	4f34      	ldr	r7, [pc, #208]	@ (800cd18 <_strtod_l+0xb00>)
 800cc48:	2600      	movs	r6, #0
 800cc4a:	e7aa      	b.n	800cba2 <_strtod_l+0x98a>
 800cc4c:	4b32      	ldr	r3, [pc, #200]	@ (800cd18 <_strtod_l+0xb00>)
 800cc4e:	4630      	mov	r0, r6
 800cc50:	4639      	mov	r1, r7
 800cc52:	2200      	movs	r2, #0
 800cc54:	f7f3 fcf0 	bl	8000638 <__aeabi_dmul>
 800cc58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc5a:	4606      	mov	r6, r0
 800cc5c:	460f      	mov	r7, r1
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d09f      	beq.n	800cba2 <_strtod_l+0x98a>
 800cc62:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cc66:	e7a0      	b.n	800cbaa <_strtod_l+0x992>
 800cc68:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ccf0 <_strtod_l+0xad8>
 800cc6c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cc70:	ec57 6b17 	vmov	r6, r7, d7
 800cc74:	e799      	b.n	800cbaa <_strtod_l+0x992>
 800cc76:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cc7a:	9b08      	ldr	r3, [sp, #32]
 800cc7c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d1c1      	bne.n	800cc08 <_strtod_l+0x9f0>
 800cc84:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cc88:	0d1b      	lsrs	r3, r3, #20
 800cc8a:	051b      	lsls	r3, r3, #20
 800cc8c:	429d      	cmp	r5, r3
 800cc8e:	d1bb      	bne.n	800cc08 <_strtod_l+0x9f0>
 800cc90:	4630      	mov	r0, r6
 800cc92:	4639      	mov	r1, r7
 800cc94:	f7f4 f830 	bl	8000cf8 <__aeabi_d2lz>
 800cc98:	f7f3 fca0 	bl	80005dc <__aeabi_l2d>
 800cc9c:	4602      	mov	r2, r0
 800cc9e:	460b      	mov	r3, r1
 800cca0:	4630      	mov	r0, r6
 800cca2:	4639      	mov	r1, r7
 800cca4:	f7f3 fb10 	bl	80002c8 <__aeabi_dsub>
 800cca8:	460b      	mov	r3, r1
 800ccaa:	4602      	mov	r2, r0
 800ccac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ccb0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ccb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ccb6:	ea46 060a 	orr.w	r6, r6, sl
 800ccba:	431e      	orrs	r6, r3
 800ccbc:	d06f      	beq.n	800cd9e <_strtod_l+0xb86>
 800ccbe:	a30e      	add	r3, pc, #56	@ (adr r3, 800ccf8 <_strtod_l+0xae0>)
 800ccc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc4:	f7f3 ff2a 	bl	8000b1c <__aeabi_dcmplt>
 800ccc8:	2800      	cmp	r0, #0
 800ccca:	f47f acd3 	bne.w	800c674 <_strtod_l+0x45c>
 800ccce:	a30c      	add	r3, pc, #48	@ (adr r3, 800cd00 <_strtod_l+0xae8>)
 800ccd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ccd8:	f7f3 ff3e 	bl	8000b58 <__aeabi_dcmpgt>
 800ccdc:	2800      	cmp	r0, #0
 800ccde:	d093      	beq.n	800cc08 <_strtod_l+0x9f0>
 800cce0:	e4c8      	b.n	800c674 <_strtod_l+0x45c>
 800cce2:	bf00      	nop
 800cce4:	f3af 8000 	nop.w
 800cce8:	00000000 	.word	0x00000000
 800ccec:	bff00000 	.word	0xbff00000
 800ccf0:	00000000 	.word	0x00000000
 800ccf4:	3ff00000 	.word	0x3ff00000
 800ccf8:	94a03595 	.word	0x94a03595
 800ccfc:	3fdfffff 	.word	0x3fdfffff
 800cd00:	35afe535 	.word	0x35afe535
 800cd04:	3fe00000 	.word	0x3fe00000
 800cd08:	000fffff 	.word	0x000fffff
 800cd0c:	7ff00000 	.word	0x7ff00000
 800cd10:	7fefffff 	.word	0x7fefffff
 800cd14:	3ff00000 	.word	0x3ff00000
 800cd18:	3fe00000 	.word	0x3fe00000
 800cd1c:	7fe00000 	.word	0x7fe00000
 800cd20:	7c9fffff 	.word	0x7c9fffff
 800cd24:	9b08      	ldr	r3, [sp, #32]
 800cd26:	b323      	cbz	r3, 800cd72 <_strtod_l+0xb5a>
 800cd28:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cd2c:	d821      	bhi.n	800cd72 <_strtod_l+0xb5a>
 800cd2e:	a328      	add	r3, pc, #160	@ (adr r3, 800cdd0 <_strtod_l+0xbb8>)
 800cd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd34:	4630      	mov	r0, r6
 800cd36:	4639      	mov	r1, r7
 800cd38:	f7f3 fefa 	bl	8000b30 <__aeabi_dcmple>
 800cd3c:	b1a0      	cbz	r0, 800cd68 <_strtod_l+0xb50>
 800cd3e:	4639      	mov	r1, r7
 800cd40:	4630      	mov	r0, r6
 800cd42:	f7f3 ff51 	bl	8000be8 <__aeabi_d2uiz>
 800cd46:	2801      	cmp	r0, #1
 800cd48:	bf38      	it	cc
 800cd4a:	2001      	movcc	r0, #1
 800cd4c:	f7f3 fbfa 	bl	8000544 <__aeabi_ui2d>
 800cd50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd52:	4606      	mov	r6, r0
 800cd54:	460f      	mov	r7, r1
 800cd56:	b9fb      	cbnz	r3, 800cd98 <_strtod_l+0xb80>
 800cd58:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cd5c:	9014      	str	r0, [sp, #80]	@ 0x50
 800cd5e:	9315      	str	r3, [sp, #84]	@ 0x54
 800cd60:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cd64:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cd68:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cd6a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cd6e:	1b5b      	subs	r3, r3, r5
 800cd70:	9311      	str	r3, [sp, #68]	@ 0x44
 800cd72:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cd76:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800cd7a:	f003 f8a7 	bl	800fecc <__ulp>
 800cd7e:	4650      	mov	r0, sl
 800cd80:	ec53 2b10 	vmov	r2, r3, d0
 800cd84:	4659      	mov	r1, fp
 800cd86:	f7f3 fc57 	bl	8000638 <__aeabi_dmul>
 800cd8a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cd8e:	f7f3 fa9d 	bl	80002cc <__adddf3>
 800cd92:	4682      	mov	sl, r0
 800cd94:	468b      	mov	fp, r1
 800cd96:	e770      	b.n	800cc7a <_strtod_l+0xa62>
 800cd98:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800cd9c:	e7e0      	b.n	800cd60 <_strtod_l+0xb48>
 800cd9e:	a30e      	add	r3, pc, #56	@ (adr r3, 800cdd8 <_strtod_l+0xbc0>)
 800cda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda4:	f7f3 feba 	bl	8000b1c <__aeabi_dcmplt>
 800cda8:	e798      	b.n	800ccdc <_strtod_l+0xac4>
 800cdaa:	2300      	movs	r3, #0
 800cdac:	930e      	str	r3, [sp, #56]	@ 0x38
 800cdae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cdb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cdb2:	6013      	str	r3, [r2, #0]
 800cdb4:	f7ff ba6d 	b.w	800c292 <_strtod_l+0x7a>
 800cdb8:	2a65      	cmp	r2, #101	@ 0x65
 800cdba:	f43f ab68 	beq.w	800c48e <_strtod_l+0x276>
 800cdbe:	2a45      	cmp	r2, #69	@ 0x45
 800cdc0:	f43f ab65 	beq.w	800c48e <_strtod_l+0x276>
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	f7ff bba0 	b.w	800c50a <_strtod_l+0x2f2>
 800cdca:	bf00      	nop
 800cdcc:	f3af 8000 	nop.w
 800cdd0:	ffc00000 	.word	0xffc00000
 800cdd4:	41dfffff 	.word	0x41dfffff
 800cdd8:	94a03595 	.word	0x94a03595
 800cddc:	3fcfffff 	.word	0x3fcfffff

0800cde0 <_strtod_r>:
 800cde0:	4b01      	ldr	r3, [pc, #4]	@ (800cde8 <_strtod_r+0x8>)
 800cde2:	f7ff ba19 	b.w	800c218 <_strtod_l>
 800cde6:	bf00      	nop
 800cde8:	20000020 	.word	0x20000020

0800cdec <_strtol_l.isra.0>:
 800cdec:	2b24      	cmp	r3, #36	@ 0x24
 800cdee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdf2:	4686      	mov	lr, r0
 800cdf4:	4690      	mov	r8, r2
 800cdf6:	d801      	bhi.n	800cdfc <_strtol_l.isra.0+0x10>
 800cdf8:	2b01      	cmp	r3, #1
 800cdfa:	d106      	bne.n	800ce0a <_strtol_l.isra.0+0x1e>
 800cdfc:	f001 fa82 	bl	800e304 <__errno>
 800ce00:	2316      	movs	r3, #22
 800ce02:	6003      	str	r3, [r0, #0]
 800ce04:	2000      	movs	r0, #0
 800ce06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce0a:	4834      	ldr	r0, [pc, #208]	@ (800cedc <_strtol_l.isra.0+0xf0>)
 800ce0c:	460d      	mov	r5, r1
 800ce0e:	462a      	mov	r2, r5
 800ce10:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce14:	5d06      	ldrb	r6, [r0, r4]
 800ce16:	f016 0608 	ands.w	r6, r6, #8
 800ce1a:	d1f8      	bne.n	800ce0e <_strtol_l.isra.0+0x22>
 800ce1c:	2c2d      	cmp	r4, #45	@ 0x2d
 800ce1e:	d110      	bne.n	800ce42 <_strtol_l.isra.0+0x56>
 800ce20:	782c      	ldrb	r4, [r5, #0]
 800ce22:	2601      	movs	r6, #1
 800ce24:	1c95      	adds	r5, r2, #2
 800ce26:	f033 0210 	bics.w	r2, r3, #16
 800ce2a:	d115      	bne.n	800ce58 <_strtol_l.isra.0+0x6c>
 800ce2c:	2c30      	cmp	r4, #48	@ 0x30
 800ce2e:	d10d      	bne.n	800ce4c <_strtol_l.isra.0+0x60>
 800ce30:	782a      	ldrb	r2, [r5, #0]
 800ce32:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ce36:	2a58      	cmp	r2, #88	@ 0x58
 800ce38:	d108      	bne.n	800ce4c <_strtol_l.isra.0+0x60>
 800ce3a:	786c      	ldrb	r4, [r5, #1]
 800ce3c:	3502      	adds	r5, #2
 800ce3e:	2310      	movs	r3, #16
 800ce40:	e00a      	b.n	800ce58 <_strtol_l.isra.0+0x6c>
 800ce42:	2c2b      	cmp	r4, #43	@ 0x2b
 800ce44:	bf04      	itt	eq
 800ce46:	782c      	ldrbeq	r4, [r5, #0]
 800ce48:	1c95      	addeq	r5, r2, #2
 800ce4a:	e7ec      	b.n	800ce26 <_strtol_l.isra.0+0x3a>
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d1f6      	bne.n	800ce3e <_strtol_l.isra.0+0x52>
 800ce50:	2c30      	cmp	r4, #48	@ 0x30
 800ce52:	bf14      	ite	ne
 800ce54:	230a      	movne	r3, #10
 800ce56:	2308      	moveq	r3, #8
 800ce58:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ce5c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ce60:	2200      	movs	r2, #0
 800ce62:	fbbc f9f3 	udiv	r9, ip, r3
 800ce66:	4610      	mov	r0, r2
 800ce68:	fb03 ca19 	mls	sl, r3, r9, ip
 800ce6c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ce70:	2f09      	cmp	r7, #9
 800ce72:	d80f      	bhi.n	800ce94 <_strtol_l.isra.0+0xa8>
 800ce74:	463c      	mov	r4, r7
 800ce76:	42a3      	cmp	r3, r4
 800ce78:	dd1b      	ble.n	800ceb2 <_strtol_l.isra.0+0xc6>
 800ce7a:	1c57      	adds	r7, r2, #1
 800ce7c:	d007      	beq.n	800ce8e <_strtol_l.isra.0+0xa2>
 800ce7e:	4581      	cmp	r9, r0
 800ce80:	d314      	bcc.n	800ceac <_strtol_l.isra.0+0xc0>
 800ce82:	d101      	bne.n	800ce88 <_strtol_l.isra.0+0x9c>
 800ce84:	45a2      	cmp	sl, r4
 800ce86:	db11      	blt.n	800ceac <_strtol_l.isra.0+0xc0>
 800ce88:	fb00 4003 	mla	r0, r0, r3, r4
 800ce8c:	2201      	movs	r2, #1
 800ce8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce92:	e7eb      	b.n	800ce6c <_strtol_l.isra.0+0x80>
 800ce94:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ce98:	2f19      	cmp	r7, #25
 800ce9a:	d801      	bhi.n	800cea0 <_strtol_l.isra.0+0xb4>
 800ce9c:	3c37      	subs	r4, #55	@ 0x37
 800ce9e:	e7ea      	b.n	800ce76 <_strtol_l.isra.0+0x8a>
 800cea0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cea4:	2f19      	cmp	r7, #25
 800cea6:	d804      	bhi.n	800ceb2 <_strtol_l.isra.0+0xc6>
 800cea8:	3c57      	subs	r4, #87	@ 0x57
 800ceaa:	e7e4      	b.n	800ce76 <_strtol_l.isra.0+0x8a>
 800ceac:	f04f 32ff 	mov.w	r2, #4294967295
 800ceb0:	e7ed      	b.n	800ce8e <_strtol_l.isra.0+0xa2>
 800ceb2:	1c53      	adds	r3, r2, #1
 800ceb4:	d108      	bne.n	800cec8 <_strtol_l.isra.0+0xdc>
 800ceb6:	2322      	movs	r3, #34	@ 0x22
 800ceb8:	f8ce 3000 	str.w	r3, [lr]
 800cebc:	4660      	mov	r0, ip
 800cebe:	f1b8 0f00 	cmp.w	r8, #0
 800cec2:	d0a0      	beq.n	800ce06 <_strtol_l.isra.0+0x1a>
 800cec4:	1e69      	subs	r1, r5, #1
 800cec6:	e006      	b.n	800ced6 <_strtol_l.isra.0+0xea>
 800cec8:	b106      	cbz	r6, 800cecc <_strtol_l.isra.0+0xe0>
 800ceca:	4240      	negs	r0, r0
 800cecc:	f1b8 0f00 	cmp.w	r8, #0
 800ced0:	d099      	beq.n	800ce06 <_strtol_l.isra.0+0x1a>
 800ced2:	2a00      	cmp	r2, #0
 800ced4:	d1f6      	bne.n	800cec4 <_strtol_l.isra.0+0xd8>
 800ced6:	f8c8 1000 	str.w	r1, [r8]
 800ceda:	e794      	b.n	800ce06 <_strtol_l.isra.0+0x1a>
 800cedc:	080110f9 	.word	0x080110f9

0800cee0 <_strtol_r>:
 800cee0:	f7ff bf84 	b.w	800cdec <_strtol_l.isra.0>

0800cee4 <__cvt>:
 800cee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cee8:	ec57 6b10 	vmov	r6, r7, d0
 800ceec:	2f00      	cmp	r7, #0
 800ceee:	460c      	mov	r4, r1
 800cef0:	4619      	mov	r1, r3
 800cef2:	463b      	mov	r3, r7
 800cef4:	bfbb      	ittet	lt
 800cef6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cefa:	461f      	movlt	r7, r3
 800cefc:	2300      	movge	r3, #0
 800cefe:	232d      	movlt	r3, #45	@ 0x2d
 800cf00:	700b      	strb	r3, [r1, #0]
 800cf02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cf04:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cf08:	4691      	mov	r9, r2
 800cf0a:	f023 0820 	bic.w	r8, r3, #32
 800cf0e:	bfbc      	itt	lt
 800cf10:	4632      	movlt	r2, r6
 800cf12:	4616      	movlt	r6, r2
 800cf14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cf18:	d005      	beq.n	800cf26 <__cvt+0x42>
 800cf1a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cf1e:	d100      	bne.n	800cf22 <__cvt+0x3e>
 800cf20:	3401      	adds	r4, #1
 800cf22:	2102      	movs	r1, #2
 800cf24:	e000      	b.n	800cf28 <__cvt+0x44>
 800cf26:	2103      	movs	r1, #3
 800cf28:	ab03      	add	r3, sp, #12
 800cf2a:	9301      	str	r3, [sp, #4]
 800cf2c:	ab02      	add	r3, sp, #8
 800cf2e:	9300      	str	r3, [sp, #0]
 800cf30:	ec47 6b10 	vmov	d0, r6, r7
 800cf34:	4653      	mov	r3, sl
 800cf36:	4622      	mov	r2, r4
 800cf38:	f001 fac2 	bl	800e4c0 <_dtoa_r>
 800cf3c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cf40:	4605      	mov	r5, r0
 800cf42:	d119      	bne.n	800cf78 <__cvt+0x94>
 800cf44:	f019 0f01 	tst.w	r9, #1
 800cf48:	d00e      	beq.n	800cf68 <__cvt+0x84>
 800cf4a:	eb00 0904 	add.w	r9, r0, r4
 800cf4e:	2200      	movs	r2, #0
 800cf50:	2300      	movs	r3, #0
 800cf52:	4630      	mov	r0, r6
 800cf54:	4639      	mov	r1, r7
 800cf56:	f7f3 fdd7 	bl	8000b08 <__aeabi_dcmpeq>
 800cf5a:	b108      	cbz	r0, 800cf60 <__cvt+0x7c>
 800cf5c:	f8cd 900c 	str.w	r9, [sp, #12]
 800cf60:	2230      	movs	r2, #48	@ 0x30
 800cf62:	9b03      	ldr	r3, [sp, #12]
 800cf64:	454b      	cmp	r3, r9
 800cf66:	d31e      	bcc.n	800cfa6 <__cvt+0xc2>
 800cf68:	9b03      	ldr	r3, [sp, #12]
 800cf6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cf6c:	1b5b      	subs	r3, r3, r5
 800cf6e:	4628      	mov	r0, r5
 800cf70:	6013      	str	r3, [r2, #0]
 800cf72:	b004      	add	sp, #16
 800cf74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf78:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cf7c:	eb00 0904 	add.w	r9, r0, r4
 800cf80:	d1e5      	bne.n	800cf4e <__cvt+0x6a>
 800cf82:	7803      	ldrb	r3, [r0, #0]
 800cf84:	2b30      	cmp	r3, #48	@ 0x30
 800cf86:	d10a      	bne.n	800cf9e <__cvt+0xba>
 800cf88:	2200      	movs	r2, #0
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	4630      	mov	r0, r6
 800cf8e:	4639      	mov	r1, r7
 800cf90:	f7f3 fdba 	bl	8000b08 <__aeabi_dcmpeq>
 800cf94:	b918      	cbnz	r0, 800cf9e <__cvt+0xba>
 800cf96:	f1c4 0401 	rsb	r4, r4, #1
 800cf9a:	f8ca 4000 	str.w	r4, [sl]
 800cf9e:	f8da 3000 	ldr.w	r3, [sl]
 800cfa2:	4499      	add	r9, r3
 800cfa4:	e7d3      	b.n	800cf4e <__cvt+0x6a>
 800cfa6:	1c59      	adds	r1, r3, #1
 800cfa8:	9103      	str	r1, [sp, #12]
 800cfaa:	701a      	strb	r2, [r3, #0]
 800cfac:	e7d9      	b.n	800cf62 <__cvt+0x7e>

0800cfae <__exponent>:
 800cfae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cfb0:	2900      	cmp	r1, #0
 800cfb2:	bfba      	itte	lt
 800cfb4:	4249      	neglt	r1, r1
 800cfb6:	232d      	movlt	r3, #45	@ 0x2d
 800cfb8:	232b      	movge	r3, #43	@ 0x2b
 800cfba:	2909      	cmp	r1, #9
 800cfbc:	7002      	strb	r2, [r0, #0]
 800cfbe:	7043      	strb	r3, [r0, #1]
 800cfc0:	dd29      	ble.n	800d016 <__exponent+0x68>
 800cfc2:	f10d 0307 	add.w	r3, sp, #7
 800cfc6:	461d      	mov	r5, r3
 800cfc8:	270a      	movs	r7, #10
 800cfca:	461a      	mov	r2, r3
 800cfcc:	fbb1 f6f7 	udiv	r6, r1, r7
 800cfd0:	fb07 1416 	mls	r4, r7, r6, r1
 800cfd4:	3430      	adds	r4, #48	@ 0x30
 800cfd6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cfda:	460c      	mov	r4, r1
 800cfdc:	2c63      	cmp	r4, #99	@ 0x63
 800cfde:	f103 33ff 	add.w	r3, r3, #4294967295
 800cfe2:	4631      	mov	r1, r6
 800cfe4:	dcf1      	bgt.n	800cfca <__exponent+0x1c>
 800cfe6:	3130      	adds	r1, #48	@ 0x30
 800cfe8:	1e94      	subs	r4, r2, #2
 800cfea:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cfee:	1c41      	adds	r1, r0, #1
 800cff0:	4623      	mov	r3, r4
 800cff2:	42ab      	cmp	r3, r5
 800cff4:	d30a      	bcc.n	800d00c <__exponent+0x5e>
 800cff6:	f10d 0309 	add.w	r3, sp, #9
 800cffa:	1a9b      	subs	r3, r3, r2
 800cffc:	42ac      	cmp	r4, r5
 800cffe:	bf88      	it	hi
 800d000:	2300      	movhi	r3, #0
 800d002:	3302      	adds	r3, #2
 800d004:	4403      	add	r3, r0
 800d006:	1a18      	subs	r0, r3, r0
 800d008:	b003      	add	sp, #12
 800d00a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d00c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d010:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d014:	e7ed      	b.n	800cff2 <__exponent+0x44>
 800d016:	2330      	movs	r3, #48	@ 0x30
 800d018:	3130      	adds	r1, #48	@ 0x30
 800d01a:	7083      	strb	r3, [r0, #2]
 800d01c:	70c1      	strb	r1, [r0, #3]
 800d01e:	1d03      	adds	r3, r0, #4
 800d020:	e7f1      	b.n	800d006 <__exponent+0x58>
	...

0800d024 <_printf_float>:
 800d024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d028:	b08d      	sub	sp, #52	@ 0x34
 800d02a:	460c      	mov	r4, r1
 800d02c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d030:	4616      	mov	r6, r2
 800d032:	461f      	mov	r7, r3
 800d034:	4605      	mov	r5, r0
 800d036:	f001 f8bd 	bl	800e1b4 <_localeconv_r>
 800d03a:	6803      	ldr	r3, [r0, #0]
 800d03c:	9304      	str	r3, [sp, #16]
 800d03e:	4618      	mov	r0, r3
 800d040:	f7f3 f936 	bl	80002b0 <strlen>
 800d044:	2300      	movs	r3, #0
 800d046:	930a      	str	r3, [sp, #40]	@ 0x28
 800d048:	f8d8 3000 	ldr.w	r3, [r8]
 800d04c:	9005      	str	r0, [sp, #20]
 800d04e:	3307      	adds	r3, #7
 800d050:	f023 0307 	bic.w	r3, r3, #7
 800d054:	f103 0208 	add.w	r2, r3, #8
 800d058:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d05c:	f8d4 b000 	ldr.w	fp, [r4]
 800d060:	f8c8 2000 	str.w	r2, [r8]
 800d064:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d068:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d06c:	9307      	str	r3, [sp, #28]
 800d06e:	f8cd 8018 	str.w	r8, [sp, #24]
 800d072:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d076:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d07a:	4b9c      	ldr	r3, [pc, #624]	@ (800d2ec <_printf_float+0x2c8>)
 800d07c:	f04f 32ff 	mov.w	r2, #4294967295
 800d080:	f7f3 fd74 	bl	8000b6c <__aeabi_dcmpun>
 800d084:	bb70      	cbnz	r0, 800d0e4 <_printf_float+0xc0>
 800d086:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d08a:	4b98      	ldr	r3, [pc, #608]	@ (800d2ec <_printf_float+0x2c8>)
 800d08c:	f04f 32ff 	mov.w	r2, #4294967295
 800d090:	f7f3 fd4e 	bl	8000b30 <__aeabi_dcmple>
 800d094:	bb30      	cbnz	r0, 800d0e4 <_printf_float+0xc0>
 800d096:	2200      	movs	r2, #0
 800d098:	2300      	movs	r3, #0
 800d09a:	4640      	mov	r0, r8
 800d09c:	4649      	mov	r1, r9
 800d09e:	f7f3 fd3d 	bl	8000b1c <__aeabi_dcmplt>
 800d0a2:	b110      	cbz	r0, 800d0aa <_printf_float+0x86>
 800d0a4:	232d      	movs	r3, #45	@ 0x2d
 800d0a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d0aa:	4a91      	ldr	r2, [pc, #580]	@ (800d2f0 <_printf_float+0x2cc>)
 800d0ac:	4b91      	ldr	r3, [pc, #580]	@ (800d2f4 <_printf_float+0x2d0>)
 800d0ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d0b2:	bf8c      	ite	hi
 800d0b4:	4690      	movhi	r8, r2
 800d0b6:	4698      	movls	r8, r3
 800d0b8:	2303      	movs	r3, #3
 800d0ba:	6123      	str	r3, [r4, #16]
 800d0bc:	f02b 0304 	bic.w	r3, fp, #4
 800d0c0:	6023      	str	r3, [r4, #0]
 800d0c2:	f04f 0900 	mov.w	r9, #0
 800d0c6:	9700      	str	r7, [sp, #0]
 800d0c8:	4633      	mov	r3, r6
 800d0ca:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d0cc:	4621      	mov	r1, r4
 800d0ce:	4628      	mov	r0, r5
 800d0d0:	f000 f9d2 	bl	800d478 <_printf_common>
 800d0d4:	3001      	adds	r0, #1
 800d0d6:	f040 808d 	bne.w	800d1f4 <_printf_float+0x1d0>
 800d0da:	f04f 30ff 	mov.w	r0, #4294967295
 800d0de:	b00d      	add	sp, #52	@ 0x34
 800d0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0e4:	4642      	mov	r2, r8
 800d0e6:	464b      	mov	r3, r9
 800d0e8:	4640      	mov	r0, r8
 800d0ea:	4649      	mov	r1, r9
 800d0ec:	f7f3 fd3e 	bl	8000b6c <__aeabi_dcmpun>
 800d0f0:	b140      	cbz	r0, 800d104 <_printf_float+0xe0>
 800d0f2:	464b      	mov	r3, r9
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	bfbc      	itt	lt
 800d0f8:	232d      	movlt	r3, #45	@ 0x2d
 800d0fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d0fe:	4a7e      	ldr	r2, [pc, #504]	@ (800d2f8 <_printf_float+0x2d4>)
 800d100:	4b7e      	ldr	r3, [pc, #504]	@ (800d2fc <_printf_float+0x2d8>)
 800d102:	e7d4      	b.n	800d0ae <_printf_float+0x8a>
 800d104:	6863      	ldr	r3, [r4, #4]
 800d106:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d10a:	9206      	str	r2, [sp, #24]
 800d10c:	1c5a      	adds	r2, r3, #1
 800d10e:	d13b      	bne.n	800d188 <_printf_float+0x164>
 800d110:	2306      	movs	r3, #6
 800d112:	6063      	str	r3, [r4, #4]
 800d114:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d118:	2300      	movs	r3, #0
 800d11a:	6022      	str	r2, [r4, #0]
 800d11c:	9303      	str	r3, [sp, #12]
 800d11e:	ab0a      	add	r3, sp, #40	@ 0x28
 800d120:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d124:	ab09      	add	r3, sp, #36	@ 0x24
 800d126:	9300      	str	r3, [sp, #0]
 800d128:	6861      	ldr	r1, [r4, #4]
 800d12a:	ec49 8b10 	vmov	d0, r8, r9
 800d12e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d132:	4628      	mov	r0, r5
 800d134:	f7ff fed6 	bl	800cee4 <__cvt>
 800d138:	9b06      	ldr	r3, [sp, #24]
 800d13a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d13c:	2b47      	cmp	r3, #71	@ 0x47
 800d13e:	4680      	mov	r8, r0
 800d140:	d129      	bne.n	800d196 <_printf_float+0x172>
 800d142:	1cc8      	adds	r0, r1, #3
 800d144:	db02      	blt.n	800d14c <_printf_float+0x128>
 800d146:	6863      	ldr	r3, [r4, #4]
 800d148:	4299      	cmp	r1, r3
 800d14a:	dd41      	ble.n	800d1d0 <_printf_float+0x1ac>
 800d14c:	f1aa 0a02 	sub.w	sl, sl, #2
 800d150:	fa5f fa8a 	uxtb.w	sl, sl
 800d154:	3901      	subs	r1, #1
 800d156:	4652      	mov	r2, sl
 800d158:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d15c:	9109      	str	r1, [sp, #36]	@ 0x24
 800d15e:	f7ff ff26 	bl	800cfae <__exponent>
 800d162:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d164:	1813      	adds	r3, r2, r0
 800d166:	2a01      	cmp	r2, #1
 800d168:	4681      	mov	r9, r0
 800d16a:	6123      	str	r3, [r4, #16]
 800d16c:	dc02      	bgt.n	800d174 <_printf_float+0x150>
 800d16e:	6822      	ldr	r2, [r4, #0]
 800d170:	07d2      	lsls	r2, r2, #31
 800d172:	d501      	bpl.n	800d178 <_printf_float+0x154>
 800d174:	3301      	adds	r3, #1
 800d176:	6123      	str	r3, [r4, #16]
 800d178:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d0a2      	beq.n	800d0c6 <_printf_float+0xa2>
 800d180:	232d      	movs	r3, #45	@ 0x2d
 800d182:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d186:	e79e      	b.n	800d0c6 <_printf_float+0xa2>
 800d188:	9a06      	ldr	r2, [sp, #24]
 800d18a:	2a47      	cmp	r2, #71	@ 0x47
 800d18c:	d1c2      	bne.n	800d114 <_printf_float+0xf0>
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d1c0      	bne.n	800d114 <_printf_float+0xf0>
 800d192:	2301      	movs	r3, #1
 800d194:	e7bd      	b.n	800d112 <_printf_float+0xee>
 800d196:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d19a:	d9db      	bls.n	800d154 <_printf_float+0x130>
 800d19c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d1a0:	d118      	bne.n	800d1d4 <_printf_float+0x1b0>
 800d1a2:	2900      	cmp	r1, #0
 800d1a4:	6863      	ldr	r3, [r4, #4]
 800d1a6:	dd0b      	ble.n	800d1c0 <_printf_float+0x19c>
 800d1a8:	6121      	str	r1, [r4, #16]
 800d1aa:	b913      	cbnz	r3, 800d1b2 <_printf_float+0x18e>
 800d1ac:	6822      	ldr	r2, [r4, #0]
 800d1ae:	07d0      	lsls	r0, r2, #31
 800d1b0:	d502      	bpl.n	800d1b8 <_printf_float+0x194>
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	440b      	add	r3, r1
 800d1b6:	6123      	str	r3, [r4, #16]
 800d1b8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d1ba:	f04f 0900 	mov.w	r9, #0
 800d1be:	e7db      	b.n	800d178 <_printf_float+0x154>
 800d1c0:	b913      	cbnz	r3, 800d1c8 <_printf_float+0x1a4>
 800d1c2:	6822      	ldr	r2, [r4, #0]
 800d1c4:	07d2      	lsls	r2, r2, #31
 800d1c6:	d501      	bpl.n	800d1cc <_printf_float+0x1a8>
 800d1c8:	3302      	adds	r3, #2
 800d1ca:	e7f4      	b.n	800d1b6 <_printf_float+0x192>
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	e7f2      	b.n	800d1b6 <_printf_float+0x192>
 800d1d0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d1d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1d6:	4299      	cmp	r1, r3
 800d1d8:	db05      	blt.n	800d1e6 <_printf_float+0x1c2>
 800d1da:	6823      	ldr	r3, [r4, #0]
 800d1dc:	6121      	str	r1, [r4, #16]
 800d1de:	07d8      	lsls	r0, r3, #31
 800d1e0:	d5ea      	bpl.n	800d1b8 <_printf_float+0x194>
 800d1e2:	1c4b      	adds	r3, r1, #1
 800d1e4:	e7e7      	b.n	800d1b6 <_printf_float+0x192>
 800d1e6:	2900      	cmp	r1, #0
 800d1e8:	bfd4      	ite	le
 800d1ea:	f1c1 0202 	rsble	r2, r1, #2
 800d1ee:	2201      	movgt	r2, #1
 800d1f0:	4413      	add	r3, r2
 800d1f2:	e7e0      	b.n	800d1b6 <_printf_float+0x192>
 800d1f4:	6823      	ldr	r3, [r4, #0]
 800d1f6:	055a      	lsls	r2, r3, #21
 800d1f8:	d407      	bmi.n	800d20a <_printf_float+0x1e6>
 800d1fa:	6923      	ldr	r3, [r4, #16]
 800d1fc:	4642      	mov	r2, r8
 800d1fe:	4631      	mov	r1, r6
 800d200:	4628      	mov	r0, r5
 800d202:	47b8      	blx	r7
 800d204:	3001      	adds	r0, #1
 800d206:	d12b      	bne.n	800d260 <_printf_float+0x23c>
 800d208:	e767      	b.n	800d0da <_printf_float+0xb6>
 800d20a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d20e:	f240 80dd 	bls.w	800d3cc <_printf_float+0x3a8>
 800d212:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d216:	2200      	movs	r2, #0
 800d218:	2300      	movs	r3, #0
 800d21a:	f7f3 fc75 	bl	8000b08 <__aeabi_dcmpeq>
 800d21e:	2800      	cmp	r0, #0
 800d220:	d033      	beq.n	800d28a <_printf_float+0x266>
 800d222:	4a37      	ldr	r2, [pc, #220]	@ (800d300 <_printf_float+0x2dc>)
 800d224:	2301      	movs	r3, #1
 800d226:	4631      	mov	r1, r6
 800d228:	4628      	mov	r0, r5
 800d22a:	47b8      	blx	r7
 800d22c:	3001      	adds	r0, #1
 800d22e:	f43f af54 	beq.w	800d0da <_printf_float+0xb6>
 800d232:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d236:	4543      	cmp	r3, r8
 800d238:	db02      	blt.n	800d240 <_printf_float+0x21c>
 800d23a:	6823      	ldr	r3, [r4, #0]
 800d23c:	07d8      	lsls	r0, r3, #31
 800d23e:	d50f      	bpl.n	800d260 <_printf_float+0x23c>
 800d240:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d244:	4631      	mov	r1, r6
 800d246:	4628      	mov	r0, r5
 800d248:	47b8      	blx	r7
 800d24a:	3001      	adds	r0, #1
 800d24c:	f43f af45 	beq.w	800d0da <_printf_float+0xb6>
 800d250:	f04f 0900 	mov.w	r9, #0
 800d254:	f108 38ff 	add.w	r8, r8, #4294967295
 800d258:	f104 0a1a 	add.w	sl, r4, #26
 800d25c:	45c8      	cmp	r8, r9
 800d25e:	dc09      	bgt.n	800d274 <_printf_float+0x250>
 800d260:	6823      	ldr	r3, [r4, #0]
 800d262:	079b      	lsls	r3, r3, #30
 800d264:	f100 8103 	bmi.w	800d46e <_printf_float+0x44a>
 800d268:	68e0      	ldr	r0, [r4, #12]
 800d26a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d26c:	4298      	cmp	r0, r3
 800d26e:	bfb8      	it	lt
 800d270:	4618      	movlt	r0, r3
 800d272:	e734      	b.n	800d0de <_printf_float+0xba>
 800d274:	2301      	movs	r3, #1
 800d276:	4652      	mov	r2, sl
 800d278:	4631      	mov	r1, r6
 800d27a:	4628      	mov	r0, r5
 800d27c:	47b8      	blx	r7
 800d27e:	3001      	adds	r0, #1
 800d280:	f43f af2b 	beq.w	800d0da <_printf_float+0xb6>
 800d284:	f109 0901 	add.w	r9, r9, #1
 800d288:	e7e8      	b.n	800d25c <_printf_float+0x238>
 800d28a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	dc39      	bgt.n	800d304 <_printf_float+0x2e0>
 800d290:	4a1b      	ldr	r2, [pc, #108]	@ (800d300 <_printf_float+0x2dc>)
 800d292:	2301      	movs	r3, #1
 800d294:	4631      	mov	r1, r6
 800d296:	4628      	mov	r0, r5
 800d298:	47b8      	blx	r7
 800d29a:	3001      	adds	r0, #1
 800d29c:	f43f af1d 	beq.w	800d0da <_printf_float+0xb6>
 800d2a0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d2a4:	ea59 0303 	orrs.w	r3, r9, r3
 800d2a8:	d102      	bne.n	800d2b0 <_printf_float+0x28c>
 800d2aa:	6823      	ldr	r3, [r4, #0]
 800d2ac:	07d9      	lsls	r1, r3, #31
 800d2ae:	d5d7      	bpl.n	800d260 <_printf_float+0x23c>
 800d2b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d2b4:	4631      	mov	r1, r6
 800d2b6:	4628      	mov	r0, r5
 800d2b8:	47b8      	blx	r7
 800d2ba:	3001      	adds	r0, #1
 800d2bc:	f43f af0d 	beq.w	800d0da <_printf_float+0xb6>
 800d2c0:	f04f 0a00 	mov.w	sl, #0
 800d2c4:	f104 0b1a 	add.w	fp, r4, #26
 800d2c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2ca:	425b      	negs	r3, r3
 800d2cc:	4553      	cmp	r3, sl
 800d2ce:	dc01      	bgt.n	800d2d4 <_printf_float+0x2b0>
 800d2d0:	464b      	mov	r3, r9
 800d2d2:	e793      	b.n	800d1fc <_printf_float+0x1d8>
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	465a      	mov	r2, fp
 800d2d8:	4631      	mov	r1, r6
 800d2da:	4628      	mov	r0, r5
 800d2dc:	47b8      	blx	r7
 800d2de:	3001      	adds	r0, #1
 800d2e0:	f43f aefb 	beq.w	800d0da <_printf_float+0xb6>
 800d2e4:	f10a 0a01 	add.w	sl, sl, #1
 800d2e8:	e7ee      	b.n	800d2c8 <_printf_float+0x2a4>
 800d2ea:	bf00      	nop
 800d2ec:	7fefffff 	.word	0x7fefffff
 800d2f0:	08010f12 	.word	0x08010f12
 800d2f4:	08010f0e 	.word	0x08010f0e
 800d2f8:	08010f1a 	.word	0x08010f1a
 800d2fc:	08010f16 	.word	0x08010f16
 800d300:	08010f1e 	.word	0x08010f1e
 800d304:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d306:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d30a:	4553      	cmp	r3, sl
 800d30c:	bfa8      	it	ge
 800d30e:	4653      	movge	r3, sl
 800d310:	2b00      	cmp	r3, #0
 800d312:	4699      	mov	r9, r3
 800d314:	dc36      	bgt.n	800d384 <_printf_float+0x360>
 800d316:	f04f 0b00 	mov.w	fp, #0
 800d31a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d31e:	f104 021a 	add.w	r2, r4, #26
 800d322:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d324:	9306      	str	r3, [sp, #24]
 800d326:	eba3 0309 	sub.w	r3, r3, r9
 800d32a:	455b      	cmp	r3, fp
 800d32c:	dc31      	bgt.n	800d392 <_printf_float+0x36e>
 800d32e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d330:	459a      	cmp	sl, r3
 800d332:	dc3a      	bgt.n	800d3aa <_printf_float+0x386>
 800d334:	6823      	ldr	r3, [r4, #0]
 800d336:	07da      	lsls	r2, r3, #31
 800d338:	d437      	bmi.n	800d3aa <_printf_float+0x386>
 800d33a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d33c:	ebaa 0903 	sub.w	r9, sl, r3
 800d340:	9b06      	ldr	r3, [sp, #24]
 800d342:	ebaa 0303 	sub.w	r3, sl, r3
 800d346:	4599      	cmp	r9, r3
 800d348:	bfa8      	it	ge
 800d34a:	4699      	movge	r9, r3
 800d34c:	f1b9 0f00 	cmp.w	r9, #0
 800d350:	dc33      	bgt.n	800d3ba <_printf_float+0x396>
 800d352:	f04f 0800 	mov.w	r8, #0
 800d356:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d35a:	f104 0b1a 	add.w	fp, r4, #26
 800d35e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d360:	ebaa 0303 	sub.w	r3, sl, r3
 800d364:	eba3 0309 	sub.w	r3, r3, r9
 800d368:	4543      	cmp	r3, r8
 800d36a:	f77f af79 	ble.w	800d260 <_printf_float+0x23c>
 800d36e:	2301      	movs	r3, #1
 800d370:	465a      	mov	r2, fp
 800d372:	4631      	mov	r1, r6
 800d374:	4628      	mov	r0, r5
 800d376:	47b8      	blx	r7
 800d378:	3001      	adds	r0, #1
 800d37a:	f43f aeae 	beq.w	800d0da <_printf_float+0xb6>
 800d37e:	f108 0801 	add.w	r8, r8, #1
 800d382:	e7ec      	b.n	800d35e <_printf_float+0x33a>
 800d384:	4642      	mov	r2, r8
 800d386:	4631      	mov	r1, r6
 800d388:	4628      	mov	r0, r5
 800d38a:	47b8      	blx	r7
 800d38c:	3001      	adds	r0, #1
 800d38e:	d1c2      	bne.n	800d316 <_printf_float+0x2f2>
 800d390:	e6a3      	b.n	800d0da <_printf_float+0xb6>
 800d392:	2301      	movs	r3, #1
 800d394:	4631      	mov	r1, r6
 800d396:	4628      	mov	r0, r5
 800d398:	9206      	str	r2, [sp, #24]
 800d39a:	47b8      	blx	r7
 800d39c:	3001      	adds	r0, #1
 800d39e:	f43f ae9c 	beq.w	800d0da <_printf_float+0xb6>
 800d3a2:	9a06      	ldr	r2, [sp, #24]
 800d3a4:	f10b 0b01 	add.w	fp, fp, #1
 800d3a8:	e7bb      	b.n	800d322 <_printf_float+0x2fe>
 800d3aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3ae:	4631      	mov	r1, r6
 800d3b0:	4628      	mov	r0, r5
 800d3b2:	47b8      	blx	r7
 800d3b4:	3001      	adds	r0, #1
 800d3b6:	d1c0      	bne.n	800d33a <_printf_float+0x316>
 800d3b8:	e68f      	b.n	800d0da <_printf_float+0xb6>
 800d3ba:	9a06      	ldr	r2, [sp, #24]
 800d3bc:	464b      	mov	r3, r9
 800d3be:	4442      	add	r2, r8
 800d3c0:	4631      	mov	r1, r6
 800d3c2:	4628      	mov	r0, r5
 800d3c4:	47b8      	blx	r7
 800d3c6:	3001      	adds	r0, #1
 800d3c8:	d1c3      	bne.n	800d352 <_printf_float+0x32e>
 800d3ca:	e686      	b.n	800d0da <_printf_float+0xb6>
 800d3cc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d3d0:	f1ba 0f01 	cmp.w	sl, #1
 800d3d4:	dc01      	bgt.n	800d3da <_printf_float+0x3b6>
 800d3d6:	07db      	lsls	r3, r3, #31
 800d3d8:	d536      	bpl.n	800d448 <_printf_float+0x424>
 800d3da:	2301      	movs	r3, #1
 800d3dc:	4642      	mov	r2, r8
 800d3de:	4631      	mov	r1, r6
 800d3e0:	4628      	mov	r0, r5
 800d3e2:	47b8      	blx	r7
 800d3e4:	3001      	adds	r0, #1
 800d3e6:	f43f ae78 	beq.w	800d0da <_printf_float+0xb6>
 800d3ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3ee:	4631      	mov	r1, r6
 800d3f0:	4628      	mov	r0, r5
 800d3f2:	47b8      	blx	r7
 800d3f4:	3001      	adds	r0, #1
 800d3f6:	f43f ae70 	beq.w	800d0da <_printf_float+0xb6>
 800d3fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d3fe:	2200      	movs	r2, #0
 800d400:	2300      	movs	r3, #0
 800d402:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d406:	f7f3 fb7f 	bl	8000b08 <__aeabi_dcmpeq>
 800d40a:	b9c0      	cbnz	r0, 800d43e <_printf_float+0x41a>
 800d40c:	4653      	mov	r3, sl
 800d40e:	f108 0201 	add.w	r2, r8, #1
 800d412:	4631      	mov	r1, r6
 800d414:	4628      	mov	r0, r5
 800d416:	47b8      	blx	r7
 800d418:	3001      	adds	r0, #1
 800d41a:	d10c      	bne.n	800d436 <_printf_float+0x412>
 800d41c:	e65d      	b.n	800d0da <_printf_float+0xb6>
 800d41e:	2301      	movs	r3, #1
 800d420:	465a      	mov	r2, fp
 800d422:	4631      	mov	r1, r6
 800d424:	4628      	mov	r0, r5
 800d426:	47b8      	blx	r7
 800d428:	3001      	adds	r0, #1
 800d42a:	f43f ae56 	beq.w	800d0da <_printf_float+0xb6>
 800d42e:	f108 0801 	add.w	r8, r8, #1
 800d432:	45d0      	cmp	r8, sl
 800d434:	dbf3      	blt.n	800d41e <_printf_float+0x3fa>
 800d436:	464b      	mov	r3, r9
 800d438:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d43c:	e6df      	b.n	800d1fe <_printf_float+0x1da>
 800d43e:	f04f 0800 	mov.w	r8, #0
 800d442:	f104 0b1a 	add.w	fp, r4, #26
 800d446:	e7f4      	b.n	800d432 <_printf_float+0x40e>
 800d448:	2301      	movs	r3, #1
 800d44a:	4642      	mov	r2, r8
 800d44c:	e7e1      	b.n	800d412 <_printf_float+0x3ee>
 800d44e:	2301      	movs	r3, #1
 800d450:	464a      	mov	r2, r9
 800d452:	4631      	mov	r1, r6
 800d454:	4628      	mov	r0, r5
 800d456:	47b8      	blx	r7
 800d458:	3001      	adds	r0, #1
 800d45a:	f43f ae3e 	beq.w	800d0da <_printf_float+0xb6>
 800d45e:	f108 0801 	add.w	r8, r8, #1
 800d462:	68e3      	ldr	r3, [r4, #12]
 800d464:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d466:	1a5b      	subs	r3, r3, r1
 800d468:	4543      	cmp	r3, r8
 800d46a:	dcf0      	bgt.n	800d44e <_printf_float+0x42a>
 800d46c:	e6fc      	b.n	800d268 <_printf_float+0x244>
 800d46e:	f04f 0800 	mov.w	r8, #0
 800d472:	f104 0919 	add.w	r9, r4, #25
 800d476:	e7f4      	b.n	800d462 <_printf_float+0x43e>

0800d478 <_printf_common>:
 800d478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d47c:	4616      	mov	r6, r2
 800d47e:	4698      	mov	r8, r3
 800d480:	688a      	ldr	r2, [r1, #8]
 800d482:	690b      	ldr	r3, [r1, #16]
 800d484:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d488:	4293      	cmp	r3, r2
 800d48a:	bfb8      	it	lt
 800d48c:	4613      	movlt	r3, r2
 800d48e:	6033      	str	r3, [r6, #0]
 800d490:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d494:	4607      	mov	r7, r0
 800d496:	460c      	mov	r4, r1
 800d498:	b10a      	cbz	r2, 800d49e <_printf_common+0x26>
 800d49a:	3301      	adds	r3, #1
 800d49c:	6033      	str	r3, [r6, #0]
 800d49e:	6823      	ldr	r3, [r4, #0]
 800d4a0:	0699      	lsls	r1, r3, #26
 800d4a2:	bf42      	ittt	mi
 800d4a4:	6833      	ldrmi	r3, [r6, #0]
 800d4a6:	3302      	addmi	r3, #2
 800d4a8:	6033      	strmi	r3, [r6, #0]
 800d4aa:	6825      	ldr	r5, [r4, #0]
 800d4ac:	f015 0506 	ands.w	r5, r5, #6
 800d4b0:	d106      	bne.n	800d4c0 <_printf_common+0x48>
 800d4b2:	f104 0a19 	add.w	sl, r4, #25
 800d4b6:	68e3      	ldr	r3, [r4, #12]
 800d4b8:	6832      	ldr	r2, [r6, #0]
 800d4ba:	1a9b      	subs	r3, r3, r2
 800d4bc:	42ab      	cmp	r3, r5
 800d4be:	dc26      	bgt.n	800d50e <_printf_common+0x96>
 800d4c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d4c4:	6822      	ldr	r2, [r4, #0]
 800d4c6:	3b00      	subs	r3, #0
 800d4c8:	bf18      	it	ne
 800d4ca:	2301      	movne	r3, #1
 800d4cc:	0692      	lsls	r2, r2, #26
 800d4ce:	d42b      	bmi.n	800d528 <_printf_common+0xb0>
 800d4d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d4d4:	4641      	mov	r1, r8
 800d4d6:	4638      	mov	r0, r7
 800d4d8:	47c8      	blx	r9
 800d4da:	3001      	adds	r0, #1
 800d4dc:	d01e      	beq.n	800d51c <_printf_common+0xa4>
 800d4de:	6823      	ldr	r3, [r4, #0]
 800d4e0:	6922      	ldr	r2, [r4, #16]
 800d4e2:	f003 0306 	and.w	r3, r3, #6
 800d4e6:	2b04      	cmp	r3, #4
 800d4e8:	bf02      	ittt	eq
 800d4ea:	68e5      	ldreq	r5, [r4, #12]
 800d4ec:	6833      	ldreq	r3, [r6, #0]
 800d4ee:	1aed      	subeq	r5, r5, r3
 800d4f0:	68a3      	ldr	r3, [r4, #8]
 800d4f2:	bf0c      	ite	eq
 800d4f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d4f8:	2500      	movne	r5, #0
 800d4fa:	4293      	cmp	r3, r2
 800d4fc:	bfc4      	itt	gt
 800d4fe:	1a9b      	subgt	r3, r3, r2
 800d500:	18ed      	addgt	r5, r5, r3
 800d502:	2600      	movs	r6, #0
 800d504:	341a      	adds	r4, #26
 800d506:	42b5      	cmp	r5, r6
 800d508:	d11a      	bne.n	800d540 <_printf_common+0xc8>
 800d50a:	2000      	movs	r0, #0
 800d50c:	e008      	b.n	800d520 <_printf_common+0xa8>
 800d50e:	2301      	movs	r3, #1
 800d510:	4652      	mov	r2, sl
 800d512:	4641      	mov	r1, r8
 800d514:	4638      	mov	r0, r7
 800d516:	47c8      	blx	r9
 800d518:	3001      	adds	r0, #1
 800d51a:	d103      	bne.n	800d524 <_printf_common+0xac>
 800d51c:	f04f 30ff 	mov.w	r0, #4294967295
 800d520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d524:	3501      	adds	r5, #1
 800d526:	e7c6      	b.n	800d4b6 <_printf_common+0x3e>
 800d528:	18e1      	adds	r1, r4, r3
 800d52a:	1c5a      	adds	r2, r3, #1
 800d52c:	2030      	movs	r0, #48	@ 0x30
 800d52e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d532:	4422      	add	r2, r4
 800d534:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d538:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d53c:	3302      	adds	r3, #2
 800d53e:	e7c7      	b.n	800d4d0 <_printf_common+0x58>
 800d540:	2301      	movs	r3, #1
 800d542:	4622      	mov	r2, r4
 800d544:	4641      	mov	r1, r8
 800d546:	4638      	mov	r0, r7
 800d548:	47c8      	blx	r9
 800d54a:	3001      	adds	r0, #1
 800d54c:	d0e6      	beq.n	800d51c <_printf_common+0xa4>
 800d54e:	3601      	adds	r6, #1
 800d550:	e7d9      	b.n	800d506 <_printf_common+0x8e>
	...

0800d554 <_printf_i>:
 800d554:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d558:	7e0f      	ldrb	r7, [r1, #24]
 800d55a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d55c:	2f78      	cmp	r7, #120	@ 0x78
 800d55e:	4691      	mov	r9, r2
 800d560:	4680      	mov	r8, r0
 800d562:	460c      	mov	r4, r1
 800d564:	469a      	mov	sl, r3
 800d566:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d56a:	d807      	bhi.n	800d57c <_printf_i+0x28>
 800d56c:	2f62      	cmp	r7, #98	@ 0x62
 800d56e:	d80a      	bhi.n	800d586 <_printf_i+0x32>
 800d570:	2f00      	cmp	r7, #0
 800d572:	f000 80d1 	beq.w	800d718 <_printf_i+0x1c4>
 800d576:	2f58      	cmp	r7, #88	@ 0x58
 800d578:	f000 80b8 	beq.w	800d6ec <_printf_i+0x198>
 800d57c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d580:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d584:	e03a      	b.n	800d5fc <_printf_i+0xa8>
 800d586:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d58a:	2b15      	cmp	r3, #21
 800d58c:	d8f6      	bhi.n	800d57c <_printf_i+0x28>
 800d58e:	a101      	add	r1, pc, #4	@ (adr r1, 800d594 <_printf_i+0x40>)
 800d590:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d594:	0800d5ed 	.word	0x0800d5ed
 800d598:	0800d601 	.word	0x0800d601
 800d59c:	0800d57d 	.word	0x0800d57d
 800d5a0:	0800d57d 	.word	0x0800d57d
 800d5a4:	0800d57d 	.word	0x0800d57d
 800d5a8:	0800d57d 	.word	0x0800d57d
 800d5ac:	0800d601 	.word	0x0800d601
 800d5b0:	0800d57d 	.word	0x0800d57d
 800d5b4:	0800d57d 	.word	0x0800d57d
 800d5b8:	0800d57d 	.word	0x0800d57d
 800d5bc:	0800d57d 	.word	0x0800d57d
 800d5c0:	0800d6ff 	.word	0x0800d6ff
 800d5c4:	0800d62b 	.word	0x0800d62b
 800d5c8:	0800d6b9 	.word	0x0800d6b9
 800d5cc:	0800d57d 	.word	0x0800d57d
 800d5d0:	0800d57d 	.word	0x0800d57d
 800d5d4:	0800d721 	.word	0x0800d721
 800d5d8:	0800d57d 	.word	0x0800d57d
 800d5dc:	0800d62b 	.word	0x0800d62b
 800d5e0:	0800d57d 	.word	0x0800d57d
 800d5e4:	0800d57d 	.word	0x0800d57d
 800d5e8:	0800d6c1 	.word	0x0800d6c1
 800d5ec:	6833      	ldr	r3, [r6, #0]
 800d5ee:	1d1a      	adds	r2, r3, #4
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	6032      	str	r2, [r6, #0]
 800d5f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d5f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	e09c      	b.n	800d73a <_printf_i+0x1e6>
 800d600:	6833      	ldr	r3, [r6, #0]
 800d602:	6820      	ldr	r0, [r4, #0]
 800d604:	1d19      	adds	r1, r3, #4
 800d606:	6031      	str	r1, [r6, #0]
 800d608:	0606      	lsls	r6, r0, #24
 800d60a:	d501      	bpl.n	800d610 <_printf_i+0xbc>
 800d60c:	681d      	ldr	r5, [r3, #0]
 800d60e:	e003      	b.n	800d618 <_printf_i+0xc4>
 800d610:	0645      	lsls	r5, r0, #25
 800d612:	d5fb      	bpl.n	800d60c <_printf_i+0xb8>
 800d614:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d618:	2d00      	cmp	r5, #0
 800d61a:	da03      	bge.n	800d624 <_printf_i+0xd0>
 800d61c:	232d      	movs	r3, #45	@ 0x2d
 800d61e:	426d      	negs	r5, r5
 800d620:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d624:	4858      	ldr	r0, [pc, #352]	@ (800d788 <_printf_i+0x234>)
 800d626:	230a      	movs	r3, #10
 800d628:	e011      	b.n	800d64e <_printf_i+0xfa>
 800d62a:	6821      	ldr	r1, [r4, #0]
 800d62c:	6833      	ldr	r3, [r6, #0]
 800d62e:	0608      	lsls	r0, r1, #24
 800d630:	f853 5b04 	ldr.w	r5, [r3], #4
 800d634:	d402      	bmi.n	800d63c <_printf_i+0xe8>
 800d636:	0649      	lsls	r1, r1, #25
 800d638:	bf48      	it	mi
 800d63a:	b2ad      	uxthmi	r5, r5
 800d63c:	2f6f      	cmp	r7, #111	@ 0x6f
 800d63e:	4852      	ldr	r0, [pc, #328]	@ (800d788 <_printf_i+0x234>)
 800d640:	6033      	str	r3, [r6, #0]
 800d642:	bf14      	ite	ne
 800d644:	230a      	movne	r3, #10
 800d646:	2308      	moveq	r3, #8
 800d648:	2100      	movs	r1, #0
 800d64a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d64e:	6866      	ldr	r6, [r4, #4]
 800d650:	60a6      	str	r6, [r4, #8]
 800d652:	2e00      	cmp	r6, #0
 800d654:	db05      	blt.n	800d662 <_printf_i+0x10e>
 800d656:	6821      	ldr	r1, [r4, #0]
 800d658:	432e      	orrs	r6, r5
 800d65a:	f021 0104 	bic.w	r1, r1, #4
 800d65e:	6021      	str	r1, [r4, #0]
 800d660:	d04b      	beq.n	800d6fa <_printf_i+0x1a6>
 800d662:	4616      	mov	r6, r2
 800d664:	fbb5 f1f3 	udiv	r1, r5, r3
 800d668:	fb03 5711 	mls	r7, r3, r1, r5
 800d66c:	5dc7      	ldrb	r7, [r0, r7]
 800d66e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d672:	462f      	mov	r7, r5
 800d674:	42bb      	cmp	r3, r7
 800d676:	460d      	mov	r5, r1
 800d678:	d9f4      	bls.n	800d664 <_printf_i+0x110>
 800d67a:	2b08      	cmp	r3, #8
 800d67c:	d10b      	bne.n	800d696 <_printf_i+0x142>
 800d67e:	6823      	ldr	r3, [r4, #0]
 800d680:	07df      	lsls	r7, r3, #31
 800d682:	d508      	bpl.n	800d696 <_printf_i+0x142>
 800d684:	6923      	ldr	r3, [r4, #16]
 800d686:	6861      	ldr	r1, [r4, #4]
 800d688:	4299      	cmp	r1, r3
 800d68a:	bfde      	ittt	le
 800d68c:	2330      	movle	r3, #48	@ 0x30
 800d68e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d692:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d696:	1b92      	subs	r2, r2, r6
 800d698:	6122      	str	r2, [r4, #16]
 800d69a:	f8cd a000 	str.w	sl, [sp]
 800d69e:	464b      	mov	r3, r9
 800d6a0:	aa03      	add	r2, sp, #12
 800d6a2:	4621      	mov	r1, r4
 800d6a4:	4640      	mov	r0, r8
 800d6a6:	f7ff fee7 	bl	800d478 <_printf_common>
 800d6aa:	3001      	adds	r0, #1
 800d6ac:	d14a      	bne.n	800d744 <_printf_i+0x1f0>
 800d6ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d6b2:	b004      	add	sp, #16
 800d6b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6b8:	6823      	ldr	r3, [r4, #0]
 800d6ba:	f043 0320 	orr.w	r3, r3, #32
 800d6be:	6023      	str	r3, [r4, #0]
 800d6c0:	4832      	ldr	r0, [pc, #200]	@ (800d78c <_printf_i+0x238>)
 800d6c2:	2778      	movs	r7, #120	@ 0x78
 800d6c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d6c8:	6823      	ldr	r3, [r4, #0]
 800d6ca:	6831      	ldr	r1, [r6, #0]
 800d6cc:	061f      	lsls	r7, r3, #24
 800d6ce:	f851 5b04 	ldr.w	r5, [r1], #4
 800d6d2:	d402      	bmi.n	800d6da <_printf_i+0x186>
 800d6d4:	065f      	lsls	r7, r3, #25
 800d6d6:	bf48      	it	mi
 800d6d8:	b2ad      	uxthmi	r5, r5
 800d6da:	6031      	str	r1, [r6, #0]
 800d6dc:	07d9      	lsls	r1, r3, #31
 800d6de:	bf44      	itt	mi
 800d6e0:	f043 0320 	orrmi.w	r3, r3, #32
 800d6e4:	6023      	strmi	r3, [r4, #0]
 800d6e6:	b11d      	cbz	r5, 800d6f0 <_printf_i+0x19c>
 800d6e8:	2310      	movs	r3, #16
 800d6ea:	e7ad      	b.n	800d648 <_printf_i+0xf4>
 800d6ec:	4826      	ldr	r0, [pc, #152]	@ (800d788 <_printf_i+0x234>)
 800d6ee:	e7e9      	b.n	800d6c4 <_printf_i+0x170>
 800d6f0:	6823      	ldr	r3, [r4, #0]
 800d6f2:	f023 0320 	bic.w	r3, r3, #32
 800d6f6:	6023      	str	r3, [r4, #0]
 800d6f8:	e7f6      	b.n	800d6e8 <_printf_i+0x194>
 800d6fa:	4616      	mov	r6, r2
 800d6fc:	e7bd      	b.n	800d67a <_printf_i+0x126>
 800d6fe:	6833      	ldr	r3, [r6, #0]
 800d700:	6825      	ldr	r5, [r4, #0]
 800d702:	6961      	ldr	r1, [r4, #20]
 800d704:	1d18      	adds	r0, r3, #4
 800d706:	6030      	str	r0, [r6, #0]
 800d708:	062e      	lsls	r6, r5, #24
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	d501      	bpl.n	800d712 <_printf_i+0x1be>
 800d70e:	6019      	str	r1, [r3, #0]
 800d710:	e002      	b.n	800d718 <_printf_i+0x1c4>
 800d712:	0668      	lsls	r0, r5, #25
 800d714:	d5fb      	bpl.n	800d70e <_printf_i+0x1ba>
 800d716:	8019      	strh	r1, [r3, #0]
 800d718:	2300      	movs	r3, #0
 800d71a:	6123      	str	r3, [r4, #16]
 800d71c:	4616      	mov	r6, r2
 800d71e:	e7bc      	b.n	800d69a <_printf_i+0x146>
 800d720:	6833      	ldr	r3, [r6, #0]
 800d722:	1d1a      	adds	r2, r3, #4
 800d724:	6032      	str	r2, [r6, #0]
 800d726:	681e      	ldr	r6, [r3, #0]
 800d728:	6862      	ldr	r2, [r4, #4]
 800d72a:	2100      	movs	r1, #0
 800d72c:	4630      	mov	r0, r6
 800d72e:	f7f2 fd6f 	bl	8000210 <memchr>
 800d732:	b108      	cbz	r0, 800d738 <_printf_i+0x1e4>
 800d734:	1b80      	subs	r0, r0, r6
 800d736:	6060      	str	r0, [r4, #4]
 800d738:	6863      	ldr	r3, [r4, #4]
 800d73a:	6123      	str	r3, [r4, #16]
 800d73c:	2300      	movs	r3, #0
 800d73e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d742:	e7aa      	b.n	800d69a <_printf_i+0x146>
 800d744:	6923      	ldr	r3, [r4, #16]
 800d746:	4632      	mov	r2, r6
 800d748:	4649      	mov	r1, r9
 800d74a:	4640      	mov	r0, r8
 800d74c:	47d0      	blx	sl
 800d74e:	3001      	adds	r0, #1
 800d750:	d0ad      	beq.n	800d6ae <_printf_i+0x15a>
 800d752:	6823      	ldr	r3, [r4, #0]
 800d754:	079b      	lsls	r3, r3, #30
 800d756:	d413      	bmi.n	800d780 <_printf_i+0x22c>
 800d758:	68e0      	ldr	r0, [r4, #12]
 800d75a:	9b03      	ldr	r3, [sp, #12]
 800d75c:	4298      	cmp	r0, r3
 800d75e:	bfb8      	it	lt
 800d760:	4618      	movlt	r0, r3
 800d762:	e7a6      	b.n	800d6b2 <_printf_i+0x15e>
 800d764:	2301      	movs	r3, #1
 800d766:	4632      	mov	r2, r6
 800d768:	4649      	mov	r1, r9
 800d76a:	4640      	mov	r0, r8
 800d76c:	47d0      	blx	sl
 800d76e:	3001      	adds	r0, #1
 800d770:	d09d      	beq.n	800d6ae <_printf_i+0x15a>
 800d772:	3501      	adds	r5, #1
 800d774:	68e3      	ldr	r3, [r4, #12]
 800d776:	9903      	ldr	r1, [sp, #12]
 800d778:	1a5b      	subs	r3, r3, r1
 800d77a:	42ab      	cmp	r3, r5
 800d77c:	dcf2      	bgt.n	800d764 <_printf_i+0x210>
 800d77e:	e7eb      	b.n	800d758 <_printf_i+0x204>
 800d780:	2500      	movs	r5, #0
 800d782:	f104 0619 	add.w	r6, r4, #25
 800d786:	e7f5      	b.n	800d774 <_printf_i+0x220>
 800d788:	08010f20 	.word	0x08010f20
 800d78c:	08010f31 	.word	0x08010f31

0800d790 <_scanf_float>:
 800d790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d794:	b087      	sub	sp, #28
 800d796:	4691      	mov	r9, r2
 800d798:	9303      	str	r3, [sp, #12]
 800d79a:	688b      	ldr	r3, [r1, #8]
 800d79c:	1e5a      	subs	r2, r3, #1
 800d79e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d7a2:	bf81      	itttt	hi
 800d7a4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d7a8:	eb03 0b05 	addhi.w	fp, r3, r5
 800d7ac:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d7b0:	608b      	strhi	r3, [r1, #8]
 800d7b2:	680b      	ldr	r3, [r1, #0]
 800d7b4:	460a      	mov	r2, r1
 800d7b6:	f04f 0500 	mov.w	r5, #0
 800d7ba:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d7be:	f842 3b1c 	str.w	r3, [r2], #28
 800d7c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d7c6:	4680      	mov	r8, r0
 800d7c8:	460c      	mov	r4, r1
 800d7ca:	bf98      	it	ls
 800d7cc:	f04f 0b00 	movls.w	fp, #0
 800d7d0:	9201      	str	r2, [sp, #4]
 800d7d2:	4616      	mov	r6, r2
 800d7d4:	46aa      	mov	sl, r5
 800d7d6:	462f      	mov	r7, r5
 800d7d8:	9502      	str	r5, [sp, #8]
 800d7da:	68a2      	ldr	r2, [r4, #8]
 800d7dc:	b15a      	cbz	r2, 800d7f6 <_scanf_float+0x66>
 800d7de:	f8d9 3000 	ldr.w	r3, [r9]
 800d7e2:	781b      	ldrb	r3, [r3, #0]
 800d7e4:	2b4e      	cmp	r3, #78	@ 0x4e
 800d7e6:	d863      	bhi.n	800d8b0 <_scanf_float+0x120>
 800d7e8:	2b40      	cmp	r3, #64	@ 0x40
 800d7ea:	d83b      	bhi.n	800d864 <_scanf_float+0xd4>
 800d7ec:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d7f0:	b2c8      	uxtb	r0, r1
 800d7f2:	280e      	cmp	r0, #14
 800d7f4:	d939      	bls.n	800d86a <_scanf_float+0xda>
 800d7f6:	b11f      	cbz	r7, 800d800 <_scanf_float+0x70>
 800d7f8:	6823      	ldr	r3, [r4, #0]
 800d7fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d7fe:	6023      	str	r3, [r4, #0]
 800d800:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d804:	f1ba 0f01 	cmp.w	sl, #1
 800d808:	f200 8114 	bhi.w	800da34 <_scanf_float+0x2a4>
 800d80c:	9b01      	ldr	r3, [sp, #4]
 800d80e:	429e      	cmp	r6, r3
 800d810:	f200 8105 	bhi.w	800da1e <_scanf_float+0x28e>
 800d814:	2001      	movs	r0, #1
 800d816:	b007      	add	sp, #28
 800d818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d81c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d820:	2a0d      	cmp	r2, #13
 800d822:	d8e8      	bhi.n	800d7f6 <_scanf_float+0x66>
 800d824:	a101      	add	r1, pc, #4	@ (adr r1, 800d82c <_scanf_float+0x9c>)
 800d826:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d82a:	bf00      	nop
 800d82c:	0800d975 	.word	0x0800d975
 800d830:	0800d7f7 	.word	0x0800d7f7
 800d834:	0800d7f7 	.word	0x0800d7f7
 800d838:	0800d7f7 	.word	0x0800d7f7
 800d83c:	0800d9d1 	.word	0x0800d9d1
 800d840:	0800d9ab 	.word	0x0800d9ab
 800d844:	0800d7f7 	.word	0x0800d7f7
 800d848:	0800d7f7 	.word	0x0800d7f7
 800d84c:	0800d983 	.word	0x0800d983
 800d850:	0800d7f7 	.word	0x0800d7f7
 800d854:	0800d7f7 	.word	0x0800d7f7
 800d858:	0800d7f7 	.word	0x0800d7f7
 800d85c:	0800d7f7 	.word	0x0800d7f7
 800d860:	0800d93f 	.word	0x0800d93f
 800d864:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d868:	e7da      	b.n	800d820 <_scanf_float+0x90>
 800d86a:	290e      	cmp	r1, #14
 800d86c:	d8c3      	bhi.n	800d7f6 <_scanf_float+0x66>
 800d86e:	a001      	add	r0, pc, #4	@ (adr r0, 800d874 <_scanf_float+0xe4>)
 800d870:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d874:	0800d92f 	.word	0x0800d92f
 800d878:	0800d7f7 	.word	0x0800d7f7
 800d87c:	0800d92f 	.word	0x0800d92f
 800d880:	0800d9bf 	.word	0x0800d9bf
 800d884:	0800d7f7 	.word	0x0800d7f7
 800d888:	0800d8d1 	.word	0x0800d8d1
 800d88c:	0800d915 	.word	0x0800d915
 800d890:	0800d915 	.word	0x0800d915
 800d894:	0800d915 	.word	0x0800d915
 800d898:	0800d915 	.word	0x0800d915
 800d89c:	0800d915 	.word	0x0800d915
 800d8a0:	0800d915 	.word	0x0800d915
 800d8a4:	0800d915 	.word	0x0800d915
 800d8a8:	0800d915 	.word	0x0800d915
 800d8ac:	0800d915 	.word	0x0800d915
 800d8b0:	2b6e      	cmp	r3, #110	@ 0x6e
 800d8b2:	d809      	bhi.n	800d8c8 <_scanf_float+0x138>
 800d8b4:	2b60      	cmp	r3, #96	@ 0x60
 800d8b6:	d8b1      	bhi.n	800d81c <_scanf_float+0x8c>
 800d8b8:	2b54      	cmp	r3, #84	@ 0x54
 800d8ba:	d07b      	beq.n	800d9b4 <_scanf_float+0x224>
 800d8bc:	2b59      	cmp	r3, #89	@ 0x59
 800d8be:	d19a      	bne.n	800d7f6 <_scanf_float+0x66>
 800d8c0:	2d07      	cmp	r5, #7
 800d8c2:	d198      	bne.n	800d7f6 <_scanf_float+0x66>
 800d8c4:	2508      	movs	r5, #8
 800d8c6:	e02f      	b.n	800d928 <_scanf_float+0x198>
 800d8c8:	2b74      	cmp	r3, #116	@ 0x74
 800d8ca:	d073      	beq.n	800d9b4 <_scanf_float+0x224>
 800d8cc:	2b79      	cmp	r3, #121	@ 0x79
 800d8ce:	e7f6      	b.n	800d8be <_scanf_float+0x12e>
 800d8d0:	6821      	ldr	r1, [r4, #0]
 800d8d2:	05c8      	lsls	r0, r1, #23
 800d8d4:	d51e      	bpl.n	800d914 <_scanf_float+0x184>
 800d8d6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d8da:	6021      	str	r1, [r4, #0]
 800d8dc:	3701      	adds	r7, #1
 800d8de:	f1bb 0f00 	cmp.w	fp, #0
 800d8e2:	d003      	beq.n	800d8ec <_scanf_float+0x15c>
 800d8e4:	3201      	adds	r2, #1
 800d8e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d8ea:	60a2      	str	r2, [r4, #8]
 800d8ec:	68a3      	ldr	r3, [r4, #8]
 800d8ee:	3b01      	subs	r3, #1
 800d8f0:	60a3      	str	r3, [r4, #8]
 800d8f2:	6923      	ldr	r3, [r4, #16]
 800d8f4:	3301      	adds	r3, #1
 800d8f6:	6123      	str	r3, [r4, #16]
 800d8f8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d8fc:	3b01      	subs	r3, #1
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	f8c9 3004 	str.w	r3, [r9, #4]
 800d904:	f340 8082 	ble.w	800da0c <_scanf_float+0x27c>
 800d908:	f8d9 3000 	ldr.w	r3, [r9]
 800d90c:	3301      	adds	r3, #1
 800d90e:	f8c9 3000 	str.w	r3, [r9]
 800d912:	e762      	b.n	800d7da <_scanf_float+0x4a>
 800d914:	eb1a 0105 	adds.w	r1, sl, r5
 800d918:	f47f af6d 	bne.w	800d7f6 <_scanf_float+0x66>
 800d91c:	6822      	ldr	r2, [r4, #0]
 800d91e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d922:	6022      	str	r2, [r4, #0]
 800d924:	460d      	mov	r5, r1
 800d926:	468a      	mov	sl, r1
 800d928:	f806 3b01 	strb.w	r3, [r6], #1
 800d92c:	e7de      	b.n	800d8ec <_scanf_float+0x15c>
 800d92e:	6822      	ldr	r2, [r4, #0]
 800d930:	0610      	lsls	r0, r2, #24
 800d932:	f57f af60 	bpl.w	800d7f6 <_scanf_float+0x66>
 800d936:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d93a:	6022      	str	r2, [r4, #0]
 800d93c:	e7f4      	b.n	800d928 <_scanf_float+0x198>
 800d93e:	f1ba 0f00 	cmp.w	sl, #0
 800d942:	d10c      	bne.n	800d95e <_scanf_float+0x1ce>
 800d944:	b977      	cbnz	r7, 800d964 <_scanf_float+0x1d4>
 800d946:	6822      	ldr	r2, [r4, #0]
 800d948:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d94c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d950:	d108      	bne.n	800d964 <_scanf_float+0x1d4>
 800d952:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d956:	6022      	str	r2, [r4, #0]
 800d958:	f04f 0a01 	mov.w	sl, #1
 800d95c:	e7e4      	b.n	800d928 <_scanf_float+0x198>
 800d95e:	f1ba 0f02 	cmp.w	sl, #2
 800d962:	d050      	beq.n	800da06 <_scanf_float+0x276>
 800d964:	2d01      	cmp	r5, #1
 800d966:	d002      	beq.n	800d96e <_scanf_float+0x1de>
 800d968:	2d04      	cmp	r5, #4
 800d96a:	f47f af44 	bne.w	800d7f6 <_scanf_float+0x66>
 800d96e:	3501      	adds	r5, #1
 800d970:	b2ed      	uxtb	r5, r5
 800d972:	e7d9      	b.n	800d928 <_scanf_float+0x198>
 800d974:	f1ba 0f01 	cmp.w	sl, #1
 800d978:	f47f af3d 	bne.w	800d7f6 <_scanf_float+0x66>
 800d97c:	f04f 0a02 	mov.w	sl, #2
 800d980:	e7d2      	b.n	800d928 <_scanf_float+0x198>
 800d982:	b975      	cbnz	r5, 800d9a2 <_scanf_float+0x212>
 800d984:	2f00      	cmp	r7, #0
 800d986:	f47f af37 	bne.w	800d7f8 <_scanf_float+0x68>
 800d98a:	6822      	ldr	r2, [r4, #0]
 800d98c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d990:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d994:	f040 8103 	bne.w	800db9e <_scanf_float+0x40e>
 800d998:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d99c:	6022      	str	r2, [r4, #0]
 800d99e:	2501      	movs	r5, #1
 800d9a0:	e7c2      	b.n	800d928 <_scanf_float+0x198>
 800d9a2:	2d03      	cmp	r5, #3
 800d9a4:	d0e3      	beq.n	800d96e <_scanf_float+0x1de>
 800d9a6:	2d05      	cmp	r5, #5
 800d9a8:	e7df      	b.n	800d96a <_scanf_float+0x1da>
 800d9aa:	2d02      	cmp	r5, #2
 800d9ac:	f47f af23 	bne.w	800d7f6 <_scanf_float+0x66>
 800d9b0:	2503      	movs	r5, #3
 800d9b2:	e7b9      	b.n	800d928 <_scanf_float+0x198>
 800d9b4:	2d06      	cmp	r5, #6
 800d9b6:	f47f af1e 	bne.w	800d7f6 <_scanf_float+0x66>
 800d9ba:	2507      	movs	r5, #7
 800d9bc:	e7b4      	b.n	800d928 <_scanf_float+0x198>
 800d9be:	6822      	ldr	r2, [r4, #0]
 800d9c0:	0591      	lsls	r1, r2, #22
 800d9c2:	f57f af18 	bpl.w	800d7f6 <_scanf_float+0x66>
 800d9c6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d9ca:	6022      	str	r2, [r4, #0]
 800d9cc:	9702      	str	r7, [sp, #8]
 800d9ce:	e7ab      	b.n	800d928 <_scanf_float+0x198>
 800d9d0:	6822      	ldr	r2, [r4, #0]
 800d9d2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d9d6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d9da:	d005      	beq.n	800d9e8 <_scanf_float+0x258>
 800d9dc:	0550      	lsls	r0, r2, #21
 800d9de:	f57f af0a 	bpl.w	800d7f6 <_scanf_float+0x66>
 800d9e2:	2f00      	cmp	r7, #0
 800d9e4:	f000 80db 	beq.w	800db9e <_scanf_float+0x40e>
 800d9e8:	0591      	lsls	r1, r2, #22
 800d9ea:	bf58      	it	pl
 800d9ec:	9902      	ldrpl	r1, [sp, #8]
 800d9ee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d9f2:	bf58      	it	pl
 800d9f4:	1a79      	subpl	r1, r7, r1
 800d9f6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d9fa:	bf58      	it	pl
 800d9fc:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800da00:	6022      	str	r2, [r4, #0]
 800da02:	2700      	movs	r7, #0
 800da04:	e790      	b.n	800d928 <_scanf_float+0x198>
 800da06:	f04f 0a03 	mov.w	sl, #3
 800da0a:	e78d      	b.n	800d928 <_scanf_float+0x198>
 800da0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800da10:	4649      	mov	r1, r9
 800da12:	4640      	mov	r0, r8
 800da14:	4798      	blx	r3
 800da16:	2800      	cmp	r0, #0
 800da18:	f43f aedf 	beq.w	800d7da <_scanf_float+0x4a>
 800da1c:	e6eb      	b.n	800d7f6 <_scanf_float+0x66>
 800da1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800da22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800da26:	464a      	mov	r2, r9
 800da28:	4640      	mov	r0, r8
 800da2a:	4798      	blx	r3
 800da2c:	6923      	ldr	r3, [r4, #16]
 800da2e:	3b01      	subs	r3, #1
 800da30:	6123      	str	r3, [r4, #16]
 800da32:	e6eb      	b.n	800d80c <_scanf_float+0x7c>
 800da34:	1e6b      	subs	r3, r5, #1
 800da36:	2b06      	cmp	r3, #6
 800da38:	d824      	bhi.n	800da84 <_scanf_float+0x2f4>
 800da3a:	2d02      	cmp	r5, #2
 800da3c:	d836      	bhi.n	800daac <_scanf_float+0x31c>
 800da3e:	9b01      	ldr	r3, [sp, #4]
 800da40:	429e      	cmp	r6, r3
 800da42:	f67f aee7 	bls.w	800d814 <_scanf_float+0x84>
 800da46:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800da4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800da4e:	464a      	mov	r2, r9
 800da50:	4640      	mov	r0, r8
 800da52:	4798      	blx	r3
 800da54:	6923      	ldr	r3, [r4, #16]
 800da56:	3b01      	subs	r3, #1
 800da58:	6123      	str	r3, [r4, #16]
 800da5a:	e7f0      	b.n	800da3e <_scanf_float+0x2ae>
 800da5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800da60:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800da64:	464a      	mov	r2, r9
 800da66:	4640      	mov	r0, r8
 800da68:	4798      	blx	r3
 800da6a:	6923      	ldr	r3, [r4, #16]
 800da6c:	3b01      	subs	r3, #1
 800da6e:	6123      	str	r3, [r4, #16]
 800da70:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da74:	fa5f fa8a 	uxtb.w	sl, sl
 800da78:	f1ba 0f02 	cmp.w	sl, #2
 800da7c:	d1ee      	bne.n	800da5c <_scanf_float+0x2cc>
 800da7e:	3d03      	subs	r5, #3
 800da80:	b2ed      	uxtb	r5, r5
 800da82:	1b76      	subs	r6, r6, r5
 800da84:	6823      	ldr	r3, [r4, #0]
 800da86:	05da      	lsls	r2, r3, #23
 800da88:	d530      	bpl.n	800daec <_scanf_float+0x35c>
 800da8a:	055b      	lsls	r3, r3, #21
 800da8c:	d511      	bpl.n	800dab2 <_scanf_float+0x322>
 800da8e:	9b01      	ldr	r3, [sp, #4]
 800da90:	429e      	cmp	r6, r3
 800da92:	f67f aebf 	bls.w	800d814 <_scanf_float+0x84>
 800da96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800da9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800da9e:	464a      	mov	r2, r9
 800daa0:	4640      	mov	r0, r8
 800daa2:	4798      	blx	r3
 800daa4:	6923      	ldr	r3, [r4, #16]
 800daa6:	3b01      	subs	r3, #1
 800daa8:	6123      	str	r3, [r4, #16]
 800daaa:	e7f0      	b.n	800da8e <_scanf_float+0x2fe>
 800daac:	46aa      	mov	sl, r5
 800daae:	46b3      	mov	fp, r6
 800dab0:	e7de      	b.n	800da70 <_scanf_float+0x2e0>
 800dab2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800dab6:	6923      	ldr	r3, [r4, #16]
 800dab8:	2965      	cmp	r1, #101	@ 0x65
 800daba:	f103 33ff 	add.w	r3, r3, #4294967295
 800dabe:	f106 35ff 	add.w	r5, r6, #4294967295
 800dac2:	6123      	str	r3, [r4, #16]
 800dac4:	d00c      	beq.n	800dae0 <_scanf_float+0x350>
 800dac6:	2945      	cmp	r1, #69	@ 0x45
 800dac8:	d00a      	beq.n	800dae0 <_scanf_float+0x350>
 800daca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dace:	464a      	mov	r2, r9
 800dad0:	4640      	mov	r0, r8
 800dad2:	4798      	blx	r3
 800dad4:	6923      	ldr	r3, [r4, #16]
 800dad6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800dada:	3b01      	subs	r3, #1
 800dadc:	1eb5      	subs	r5, r6, #2
 800dade:	6123      	str	r3, [r4, #16]
 800dae0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dae4:	464a      	mov	r2, r9
 800dae6:	4640      	mov	r0, r8
 800dae8:	4798      	blx	r3
 800daea:	462e      	mov	r6, r5
 800daec:	6822      	ldr	r2, [r4, #0]
 800daee:	f012 0210 	ands.w	r2, r2, #16
 800daf2:	d001      	beq.n	800daf8 <_scanf_float+0x368>
 800daf4:	2000      	movs	r0, #0
 800daf6:	e68e      	b.n	800d816 <_scanf_float+0x86>
 800daf8:	7032      	strb	r2, [r6, #0]
 800dafa:	6823      	ldr	r3, [r4, #0]
 800dafc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800db00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800db04:	d125      	bne.n	800db52 <_scanf_float+0x3c2>
 800db06:	9b02      	ldr	r3, [sp, #8]
 800db08:	429f      	cmp	r7, r3
 800db0a:	d00a      	beq.n	800db22 <_scanf_float+0x392>
 800db0c:	1bda      	subs	r2, r3, r7
 800db0e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800db12:	429e      	cmp	r6, r3
 800db14:	bf28      	it	cs
 800db16:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800db1a:	4922      	ldr	r1, [pc, #136]	@ (800dba4 <_scanf_float+0x414>)
 800db1c:	4630      	mov	r0, r6
 800db1e:	f000 fa35 	bl	800df8c <siprintf>
 800db22:	9901      	ldr	r1, [sp, #4]
 800db24:	2200      	movs	r2, #0
 800db26:	4640      	mov	r0, r8
 800db28:	f7ff f95a 	bl	800cde0 <_strtod_r>
 800db2c:	9b03      	ldr	r3, [sp, #12]
 800db2e:	6821      	ldr	r1, [r4, #0]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	f011 0f02 	tst.w	r1, #2
 800db36:	ec57 6b10 	vmov	r6, r7, d0
 800db3a:	f103 0204 	add.w	r2, r3, #4
 800db3e:	d015      	beq.n	800db6c <_scanf_float+0x3dc>
 800db40:	9903      	ldr	r1, [sp, #12]
 800db42:	600a      	str	r2, [r1, #0]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	e9c3 6700 	strd	r6, r7, [r3]
 800db4a:	68e3      	ldr	r3, [r4, #12]
 800db4c:	3301      	adds	r3, #1
 800db4e:	60e3      	str	r3, [r4, #12]
 800db50:	e7d0      	b.n	800daf4 <_scanf_float+0x364>
 800db52:	9b04      	ldr	r3, [sp, #16]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d0e4      	beq.n	800db22 <_scanf_float+0x392>
 800db58:	9905      	ldr	r1, [sp, #20]
 800db5a:	230a      	movs	r3, #10
 800db5c:	3101      	adds	r1, #1
 800db5e:	4640      	mov	r0, r8
 800db60:	f7ff f9be 	bl	800cee0 <_strtol_r>
 800db64:	9b04      	ldr	r3, [sp, #16]
 800db66:	9e05      	ldr	r6, [sp, #20]
 800db68:	1ac2      	subs	r2, r0, r3
 800db6a:	e7d0      	b.n	800db0e <_scanf_float+0x37e>
 800db6c:	f011 0f04 	tst.w	r1, #4
 800db70:	9903      	ldr	r1, [sp, #12]
 800db72:	600a      	str	r2, [r1, #0]
 800db74:	d1e6      	bne.n	800db44 <_scanf_float+0x3b4>
 800db76:	681d      	ldr	r5, [r3, #0]
 800db78:	4632      	mov	r2, r6
 800db7a:	463b      	mov	r3, r7
 800db7c:	4630      	mov	r0, r6
 800db7e:	4639      	mov	r1, r7
 800db80:	f7f2 fff4 	bl	8000b6c <__aeabi_dcmpun>
 800db84:	b128      	cbz	r0, 800db92 <_scanf_float+0x402>
 800db86:	4808      	ldr	r0, [pc, #32]	@ (800dba8 <_scanf_float+0x418>)
 800db88:	f000 fc02 	bl	800e390 <nanf>
 800db8c:	ed85 0a00 	vstr	s0, [r5]
 800db90:	e7db      	b.n	800db4a <_scanf_float+0x3ba>
 800db92:	4630      	mov	r0, r6
 800db94:	4639      	mov	r1, r7
 800db96:	f7f3 f847 	bl	8000c28 <__aeabi_d2f>
 800db9a:	6028      	str	r0, [r5, #0]
 800db9c:	e7d5      	b.n	800db4a <_scanf_float+0x3ba>
 800db9e:	2700      	movs	r7, #0
 800dba0:	e62e      	b.n	800d800 <_scanf_float+0x70>
 800dba2:	bf00      	nop
 800dba4:	08010f42 	.word	0x08010f42
 800dba8:	08010f0b 	.word	0x08010f0b

0800dbac <__sflush_r>:
 800dbac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dbb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbb4:	0716      	lsls	r6, r2, #28
 800dbb6:	4605      	mov	r5, r0
 800dbb8:	460c      	mov	r4, r1
 800dbba:	d454      	bmi.n	800dc66 <__sflush_r+0xba>
 800dbbc:	684b      	ldr	r3, [r1, #4]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	dc02      	bgt.n	800dbc8 <__sflush_r+0x1c>
 800dbc2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	dd48      	ble.n	800dc5a <__sflush_r+0xae>
 800dbc8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dbca:	2e00      	cmp	r6, #0
 800dbcc:	d045      	beq.n	800dc5a <__sflush_r+0xae>
 800dbce:	2300      	movs	r3, #0
 800dbd0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dbd4:	682f      	ldr	r7, [r5, #0]
 800dbd6:	6a21      	ldr	r1, [r4, #32]
 800dbd8:	602b      	str	r3, [r5, #0]
 800dbda:	d030      	beq.n	800dc3e <__sflush_r+0x92>
 800dbdc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dbde:	89a3      	ldrh	r3, [r4, #12]
 800dbe0:	0759      	lsls	r1, r3, #29
 800dbe2:	d505      	bpl.n	800dbf0 <__sflush_r+0x44>
 800dbe4:	6863      	ldr	r3, [r4, #4]
 800dbe6:	1ad2      	subs	r2, r2, r3
 800dbe8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dbea:	b10b      	cbz	r3, 800dbf0 <__sflush_r+0x44>
 800dbec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dbee:	1ad2      	subs	r2, r2, r3
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dbf4:	6a21      	ldr	r1, [r4, #32]
 800dbf6:	4628      	mov	r0, r5
 800dbf8:	47b0      	blx	r6
 800dbfa:	1c43      	adds	r3, r0, #1
 800dbfc:	89a3      	ldrh	r3, [r4, #12]
 800dbfe:	d106      	bne.n	800dc0e <__sflush_r+0x62>
 800dc00:	6829      	ldr	r1, [r5, #0]
 800dc02:	291d      	cmp	r1, #29
 800dc04:	d82b      	bhi.n	800dc5e <__sflush_r+0xb2>
 800dc06:	4a2a      	ldr	r2, [pc, #168]	@ (800dcb0 <__sflush_r+0x104>)
 800dc08:	40ca      	lsrs	r2, r1
 800dc0a:	07d6      	lsls	r6, r2, #31
 800dc0c:	d527      	bpl.n	800dc5e <__sflush_r+0xb2>
 800dc0e:	2200      	movs	r2, #0
 800dc10:	6062      	str	r2, [r4, #4]
 800dc12:	04d9      	lsls	r1, r3, #19
 800dc14:	6922      	ldr	r2, [r4, #16]
 800dc16:	6022      	str	r2, [r4, #0]
 800dc18:	d504      	bpl.n	800dc24 <__sflush_r+0x78>
 800dc1a:	1c42      	adds	r2, r0, #1
 800dc1c:	d101      	bne.n	800dc22 <__sflush_r+0x76>
 800dc1e:	682b      	ldr	r3, [r5, #0]
 800dc20:	b903      	cbnz	r3, 800dc24 <__sflush_r+0x78>
 800dc22:	6560      	str	r0, [r4, #84]	@ 0x54
 800dc24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc26:	602f      	str	r7, [r5, #0]
 800dc28:	b1b9      	cbz	r1, 800dc5a <__sflush_r+0xae>
 800dc2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc2e:	4299      	cmp	r1, r3
 800dc30:	d002      	beq.n	800dc38 <__sflush_r+0x8c>
 800dc32:	4628      	mov	r0, r5
 800dc34:	f001 fa14 	bl	800f060 <_free_r>
 800dc38:	2300      	movs	r3, #0
 800dc3a:	6363      	str	r3, [r4, #52]	@ 0x34
 800dc3c:	e00d      	b.n	800dc5a <__sflush_r+0xae>
 800dc3e:	2301      	movs	r3, #1
 800dc40:	4628      	mov	r0, r5
 800dc42:	47b0      	blx	r6
 800dc44:	4602      	mov	r2, r0
 800dc46:	1c50      	adds	r0, r2, #1
 800dc48:	d1c9      	bne.n	800dbde <__sflush_r+0x32>
 800dc4a:	682b      	ldr	r3, [r5, #0]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d0c6      	beq.n	800dbde <__sflush_r+0x32>
 800dc50:	2b1d      	cmp	r3, #29
 800dc52:	d001      	beq.n	800dc58 <__sflush_r+0xac>
 800dc54:	2b16      	cmp	r3, #22
 800dc56:	d11e      	bne.n	800dc96 <__sflush_r+0xea>
 800dc58:	602f      	str	r7, [r5, #0]
 800dc5a:	2000      	movs	r0, #0
 800dc5c:	e022      	b.n	800dca4 <__sflush_r+0xf8>
 800dc5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc62:	b21b      	sxth	r3, r3
 800dc64:	e01b      	b.n	800dc9e <__sflush_r+0xf2>
 800dc66:	690f      	ldr	r7, [r1, #16]
 800dc68:	2f00      	cmp	r7, #0
 800dc6a:	d0f6      	beq.n	800dc5a <__sflush_r+0xae>
 800dc6c:	0793      	lsls	r3, r2, #30
 800dc6e:	680e      	ldr	r6, [r1, #0]
 800dc70:	bf08      	it	eq
 800dc72:	694b      	ldreq	r3, [r1, #20]
 800dc74:	600f      	str	r7, [r1, #0]
 800dc76:	bf18      	it	ne
 800dc78:	2300      	movne	r3, #0
 800dc7a:	eba6 0807 	sub.w	r8, r6, r7
 800dc7e:	608b      	str	r3, [r1, #8]
 800dc80:	f1b8 0f00 	cmp.w	r8, #0
 800dc84:	dde9      	ble.n	800dc5a <__sflush_r+0xae>
 800dc86:	6a21      	ldr	r1, [r4, #32]
 800dc88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dc8a:	4643      	mov	r3, r8
 800dc8c:	463a      	mov	r2, r7
 800dc8e:	4628      	mov	r0, r5
 800dc90:	47b0      	blx	r6
 800dc92:	2800      	cmp	r0, #0
 800dc94:	dc08      	bgt.n	800dca8 <__sflush_r+0xfc>
 800dc96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc9e:	81a3      	strh	r3, [r4, #12]
 800dca0:	f04f 30ff 	mov.w	r0, #4294967295
 800dca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dca8:	4407      	add	r7, r0
 800dcaa:	eba8 0800 	sub.w	r8, r8, r0
 800dcae:	e7e7      	b.n	800dc80 <__sflush_r+0xd4>
 800dcb0:	20400001 	.word	0x20400001

0800dcb4 <_fflush_r>:
 800dcb4:	b538      	push	{r3, r4, r5, lr}
 800dcb6:	690b      	ldr	r3, [r1, #16]
 800dcb8:	4605      	mov	r5, r0
 800dcba:	460c      	mov	r4, r1
 800dcbc:	b913      	cbnz	r3, 800dcc4 <_fflush_r+0x10>
 800dcbe:	2500      	movs	r5, #0
 800dcc0:	4628      	mov	r0, r5
 800dcc2:	bd38      	pop	{r3, r4, r5, pc}
 800dcc4:	b118      	cbz	r0, 800dcce <_fflush_r+0x1a>
 800dcc6:	6a03      	ldr	r3, [r0, #32]
 800dcc8:	b90b      	cbnz	r3, 800dcce <_fflush_r+0x1a>
 800dcca:	f000 f8a7 	bl	800de1c <__sinit>
 800dcce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d0f3      	beq.n	800dcbe <_fflush_r+0xa>
 800dcd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dcd8:	07d0      	lsls	r0, r2, #31
 800dcda:	d404      	bmi.n	800dce6 <_fflush_r+0x32>
 800dcdc:	0599      	lsls	r1, r3, #22
 800dcde:	d402      	bmi.n	800dce6 <_fflush_r+0x32>
 800dce0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dce2:	f000 fb3a 	bl	800e35a <__retarget_lock_acquire_recursive>
 800dce6:	4628      	mov	r0, r5
 800dce8:	4621      	mov	r1, r4
 800dcea:	f7ff ff5f 	bl	800dbac <__sflush_r>
 800dcee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dcf0:	07da      	lsls	r2, r3, #31
 800dcf2:	4605      	mov	r5, r0
 800dcf4:	d4e4      	bmi.n	800dcc0 <_fflush_r+0xc>
 800dcf6:	89a3      	ldrh	r3, [r4, #12]
 800dcf8:	059b      	lsls	r3, r3, #22
 800dcfa:	d4e1      	bmi.n	800dcc0 <_fflush_r+0xc>
 800dcfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dcfe:	f000 fb2d 	bl	800e35c <__retarget_lock_release_recursive>
 800dd02:	e7dd      	b.n	800dcc0 <_fflush_r+0xc>

0800dd04 <std>:
 800dd04:	2300      	movs	r3, #0
 800dd06:	b510      	push	{r4, lr}
 800dd08:	4604      	mov	r4, r0
 800dd0a:	e9c0 3300 	strd	r3, r3, [r0]
 800dd0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dd12:	6083      	str	r3, [r0, #8]
 800dd14:	8181      	strh	r1, [r0, #12]
 800dd16:	6643      	str	r3, [r0, #100]	@ 0x64
 800dd18:	81c2      	strh	r2, [r0, #14]
 800dd1a:	6183      	str	r3, [r0, #24]
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	2208      	movs	r2, #8
 800dd20:	305c      	adds	r0, #92	@ 0x5c
 800dd22:	f000 fa2d 	bl	800e180 <memset>
 800dd26:	4b0d      	ldr	r3, [pc, #52]	@ (800dd5c <std+0x58>)
 800dd28:	6263      	str	r3, [r4, #36]	@ 0x24
 800dd2a:	4b0d      	ldr	r3, [pc, #52]	@ (800dd60 <std+0x5c>)
 800dd2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dd2e:	4b0d      	ldr	r3, [pc, #52]	@ (800dd64 <std+0x60>)
 800dd30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dd32:	4b0d      	ldr	r3, [pc, #52]	@ (800dd68 <std+0x64>)
 800dd34:	6323      	str	r3, [r4, #48]	@ 0x30
 800dd36:	4b0d      	ldr	r3, [pc, #52]	@ (800dd6c <std+0x68>)
 800dd38:	6224      	str	r4, [r4, #32]
 800dd3a:	429c      	cmp	r4, r3
 800dd3c:	d006      	beq.n	800dd4c <std+0x48>
 800dd3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dd42:	4294      	cmp	r4, r2
 800dd44:	d002      	beq.n	800dd4c <std+0x48>
 800dd46:	33d0      	adds	r3, #208	@ 0xd0
 800dd48:	429c      	cmp	r4, r3
 800dd4a:	d105      	bne.n	800dd58 <std+0x54>
 800dd4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dd50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd54:	f000 bb00 	b.w	800e358 <__retarget_lock_init_recursive>
 800dd58:	bd10      	pop	{r4, pc}
 800dd5a:	bf00      	nop
 800dd5c:	0800dfd1 	.word	0x0800dfd1
 800dd60:	0800dff3 	.word	0x0800dff3
 800dd64:	0800e02b 	.word	0x0800e02b
 800dd68:	0800e04f 	.word	0x0800e04f
 800dd6c:	20000590 	.word	0x20000590

0800dd70 <stdio_exit_handler>:
 800dd70:	4a02      	ldr	r2, [pc, #8]	@ (800dd7c <stdio_exit_handler+0xc>)
 800dd72:	4903      	ldr	r1, [pc, #12]	@ (800dd80 <stdio_exit_handler+0x10>)
 800dd74:	4803      	ldr	r0, [pc, #12]	@ (800dd84 <stdio_exit_handler+0x14>)
 800dd76:	f000 b87b 	b.w	800de70 <_fwalk_sglue>
 800dd7a:	bf00      	nop
 800dd7c:	20000014 	.word	0x20000014
 800dd80:	0800dcb5 	.word	0x0800dcb5
 800dd84:	20000190 	.word	0x20000190

0800dd88 <cleanup_stdio>:
 800dd88:	6841      	ldr	r1, [r0, #4]
 800dd8a:	4b0c      	ldr	r3, [pc, #48]	@ (800ddbc <cleanup_stdio+0x34>)
 800dd8c:	4299      	cmp	r1, r3
 800dd8e:	b510      	push	{r4, lr}
 800dd90:	4604      	mov	r4, r0
 800dd92:	d001      	beq.n	800dd98 <cleanup_stdio+0x10>
 800dd94:	f7ff ff8e 	bl	800dcb4 <_fflush_r>
 800dd98:	68a1      	ldr	r1, [r4, #8]
 800dd9a:	4b09      	ldr	r3, [pc, #36]	@ (800ddc0 <cleanup_stdio+0x38>)
 800dd9c:	4299      	cmp	r1, r3
 800dd9e:	d002      	beq.n	800dda6 <cleanup_stdio+0x1e>
 800dda0:	4620      	mov	r0, r4
 800dda2:	f7ff ff87 	bl	800dcb4 <_fflush_r>
 800dda6:	68e1      	ldr	r1, [r4, #12]
 800dda8:	4b06      	ldr	r3, [pc, #24]	@ (800ddc4 <cleanup_stdio+0x3c>)
 800ddaa:	4299      	cmp	r1, r3
 800ddac:	d004      	beq.n	800ddb8 <cleanup_stdio+0x30>
 800ddae:	4620      	mov	r0, r4
 800ddb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddb4:	f7ff bf7e 	b.w	800dcb4 <_fflush_r>
 800ddb8:	bd10      	pop	{r4, pc}
 800ddba:	bf00      	nop
 800ddbc:	20000590 	.word	0x20000590
 800ddc0:	200005f8 	.word	0x200005f8
 800ddc4:	20000660 	.word	0x20000660

0800ddc8 <global_stdio_init.part.0>:
 800ddc8:	b510      	push	{r4, lr}
 800ddca:	4b0b      	ldr	r3, [pc, #44]	@ (800ddf8 <global_stdio_init.part.0+0x30>)
 800ddcc:	4c0b      	ldr	r4, [pc, #44]	@ (800ddfc <global_stdio_init.part.0+0x34>)
 800ddce:	4a0c      	ldr	r2, [pc, #48]	@ (800de00 <global_stdio_init.part.0+0x38>)
 800ddd0:	601a      	str	r2, [r3, #0]
 800ddd2:	4620      	mov	r0, r4
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	2104      	movs	r1, #4
 800ddd8:	f7ff ff94 	bl	800dd04 <std>
 800dddc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dde0:	2201      	movs	r2, #1
 800dde2:	2109      	movs	r1, #9
 800dde4:	f7ff ff8e 	bl	800dd04 <std>
 800dde8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ddec:	2202      	movs	r2, #2
 800ddee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddf2:	2112      	movs	r1, #18
 800ddf4:	f7ff bf86 	b.w	800dd04 <std>
 800ddf8:	200006c8 	.word	0x200006c8
 800ddfc:	20000590 	.word	0x20000590
 800de00:	0800dd71 	.word	0x0800dd71

0800de04 <__sfp_lock_acquire>:
 800de04:	4801      	ldr	r0, [pc, #4]	@ (800de0c <__sfp_lock_acquire+0x8>)
 800de06:	f000 baa8 	b.w	800e35a <__retarget_lock_acquire_recursive>
 800de0a:	bf00      	nop
 800de0c:	200006d0 	.word	0x200006d0

0800de10 <__sfp_lock_release>:
 800de10:	4801      	ldr	r0, [pc, #4]	@ (800de18 <__sfp_lock_release+0x8>)
 800de12:	f000 baa3 	b.w	800e35c <__retarget_lock_release_recursive>
 800de16:	bf00      	nop
 800de18:	200006d0 	.word	0x200006d0

0800de1c <__sinit>:
 800de1c:	b510      	push	{r4, lr}
 800de1e:	4604      	mov	r4, r0
 800de20:	f7ff fff0 	bl	800de04 <__sfp_lock_acquire>
 800de24:	6a23      	ldr	r3, [r4, #32]
 800de26:	b11b      	cbz	r3, 800de30 <__sinit+0x14>
 800de28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de2c:	f7ff bff0 	b.w	800de10 <__sfp_lock_release>
 800de30:	4b04      	ldr	r3, [pc, #16]	@ (800de44 <__sinit+0x28>)
 800de32:	6223      	str	r3, [r4, #32]
 800de34:	4b04      	ldr	r3, [pc, #16]	@ (800de48 <__sinit+0x2c>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d1f5      	bne.n	800de28 <__sinit+0xc>
 800de3c:	f7ff ffc4 	bl	800ddc8 <global_stdio_init.part.0>
 800de40:	e7f2      	b.n	800de28 <__sinit+0xc>
 800de42:	bf00      	nop
 800de44:	0800dd89 	.word	0x0800dd89
 800de48:	200006c8 	.word	0x200006c8

0800de4c <fiprintf>:
 800de4c:	b40e      	push	{r1, r2, r3}
 800de4e:	b503      	push	{r0, r1, lr}
 800de50:	4601      	mov	r1, r0
 800de52:	ab03      	add	r3, sp, #12
 800de54:	4805      	ldr	r0, [pc, #20]	@ (800de6c <fiprintf+0x20>)
 800de56:	f853 2b04 	ldr.w	r2, [r3], #4
 800de5a:	6800      	ldr	r0, [r0, #0]
 800de5c:	9301      	str	r3, [sp, #4]
 800de5e:	f002 fb2f 	bl	80104c0 <_vfiprintf_r>
 800de62:	b002      	add	sp, #8
 800de64:	f85d eb04 	ldr.w	lr, [sp], #4
 800de68:	b003      	add	sp, #12
 800de6a:	4770      	bx	lr
 800de6c:	2000018c 	.word	0x2000018c

0800de70 <_fwalk_sglue>:
 800de70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de74:	4607      	mov	r7, r0
 800de76:	4688      	mov	r8, r1
 800de78:	4614      	mov	r4, r2
 800de7a:	2600      	movs	r6, #0
 800de7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800de80:	f1b9 0901 	subs.w	r9, r9, #1
 800de84:	d505      	bpl.n	800de92 <_fwalk_sglue+0x22>
 800de86:	6824      	ldr	r4, [r4, #0]
 800de88:	2c00      	cmp	r4, #0
 800de8a:	d1f7      	bne.n	800de7c <_fwalk_sglue+0xc>
 800de8c:	4630      	mov	r0, r6
 800de8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de92:	89ab      	ldrh	r3, [r5, #12]
 800de94:	2b01      	cmp	r3, #1
 800de96:	d907      	bls.n	800dea8 <_fwalk_sglue+0x38>
 800de98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800de9c:	3301      	adds	r3, #1
 800de9e:	d003      	beq.n	800dea8 <_fwalk_sglue+0x38>
 800dea0:	4629      	mov	r1, r5
 800dea2:	4638      	mov	r0, r7
 800dea4:	47c0      	blx	r8
 800dea6:	4306      	orrs	r6, r0
 800dea8:	3568      	adds	r5, #104	@ 0x68
 800deaa:	e7e9      	b.n	800de80 <_fwalk_sglue+0x10>

0800deac <iprintf>:
 800deac:	b40f      	push	{r0, r1, r2, r3}
 800deae:	b507      	push	{r0, r1, r2, lr}
 800deb0:	4906      	ldr	r1, [pc, #24]	@ (800decc <iprintf+0x20>)
 800deb2:	ab04      	add	r3, sp, #16
 800deb4:	6808      	ldr	r0, [r1, #0]
 800deb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800deba:	6881      	ldr	r1, [r0, #8]
 800debc:	9301      	str	r3, [sp, #4]
 800debe:	f002 faff 	bl	80104c0 <_vfiprintf_r>
 800dec2:	b003      	add	sp, #12
 800dec4:	f85d eb04 	ldr.w	lr, [sp], #4
 800dec8:	b004      	add	sp, #16
 800deca:	4770      	bx	lr
 800decc:	2000018c 	.word	0x2000018c

0800ded0 <_puts_r>:
 800ded0:	6a03      	ldr	r3, [r0, #32]
 800ded2:	b570      	push	{r4, r5, r6, lr}
 800ded4:	6884      	ldr	r4, [r0, #8]
 800ded6:	4605      	mov	r5, r0
 800ded8:	460e      	mov	r6, r1
 800deda:	b90b      	cbnz	r3, 800dee0 <_puts_r+0x10>
 800dedc:	f7ff ff9e 	bl	800de1c <__sinit>
 800dee0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dee2:	07db      	lsls	r3, r3, #31
 800dee4:	d405      	bmi.n	800def2 <_puts_r+0x22>
 800dee6:	89a3      	ldrh	r3, [r4, #12]
 800dee8:	0598      	lsls	r0, r3, #22
 800deea:	d402      	bmi.n	800def2 <_puts_r+0x22>
 800deec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800deee:	f000 fa34 	bl	800e35a <__retarget_lock_acquire_recursive>
 800def2:	89a3      	ldrh	r3, [r4, #12]
 800def4:	0719      	lsls	r1, r3, #28
 800def6:	d502      	bpl.n	800defe <_puts_r+0x2e>
 800def8:	6923      	ldr	r3, [r4, #16]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d135      	bne.n	800df6a <_puts_r+0x9a>
 800defe:	4621      	mov	r1, r4
 800df00:	4628      	mov	r0, r5
 800df02:	f000 f8e7 	bl	800e0d4 <__swsetup_r>
 800df06:	b380      	cbz	r0, 800df6a <_puts_r+0x9a>
 800df08:	f04f 35ff 	mov.w	r5, #4294967295
 800df0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800df0e:	07da      	lsls	r2, r3, #31
 800df10:	d405      	bmi.n	800df1e <_puts_r+0x4e>
 800df12:	89a3      	ldrh	r3, [r4, #12]
 800df14:	059b      	lsls	r3, r3, #22
 800df16:	d402      	bmi.n	800df1e <_puts_r+0x4e>
 800df18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df1a:	f000 fa1f 	bl	800e35c <__retarget_lock_release_recursive>
 800df1e:	4628      	mov	r0, r5
 800df20:	bd70      	pop	{r4, r5, r6, pc}
 800df22:	2b00      	cmp	r3, #0
 800df24:	da04      	bge.n	800df30 <_puts_r+0x60>
 800df26:	69a2      	ldr	r2, [r4, #24]
 800df28:	429a      	cmp	r2, r3
 800df2a:	dc17      	bgt.n	800df5c <_puts_r+0x8c>
 800df2c:	290a      	cmp	r1, #10
 800df2e:	d015      	beq.n	800df5c <_puts_r+0x8c>
 800df30:	6823      	ldr	r3, [r4, #0]
 800df32:	1c5a      	adds	r2, r3, #1
 800df34:	6022      	str	r2, [r4, #0]
 800df36:	7019      	strb	r1, [r3, #0]
 800df38:	68a3      	ldr	r3, [r4, #8]
 800df3a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800df3e:	3b01      	subs	r3, #1
 800df40:	60a3      	str	r3, [r4, #8]
 800df42:	2900      	cmp	r1, #0
 800df44:	d1ed      	bne.n	800df22 <_puts_r+0x52>
 800df46:	2b00      	cmp	r3, #0
 800df48:	da11      	bge.n	800df6e <_puts_r+0x9e>
 800df4a:	4622      	mov	r2, r4
 800df4c:	210a      	movs	r1, #10
 800df4e:	4628      	mov	r0, r5
 800df50:	f000 f881 	bl	800e056 <__swbuf_r>
 800df54:	3001      	adds	r0, #1
 800df56:	d0d7      	beq.n	800df08 <_puts_r+0x38>
 800df58:	250a      	movs	r5, #10
 800df5a:	e7d7      	b.n	800df0c <_puts_r+0x3c>
 800df5c:	4622      	mov	r2, r4
 800df5e:	4628      	mov	r0, r5
 800df60:	f000 f879 	bl	800e056 <__swbuf_r>
 800df64:	3001      	adds	r0, #1
 800df66:	d1e7      	bne.n	800df38 <_puts_r+0x68>
 800df68:	e7ce      	b.n	800df08 <_puts_r+0x38>
 800df6a:	3e01      	subs	r6, #1
 800df6c:	e7e4      	b.n	800df38 <_puts_r+0x68>
 800df6e:	6823      	ldr	r3, [r4, #0]
 800df70:	1c5a      	adds	r2, r3, #1
 800df72:	6022      	str	r2, [r4, #0]
 800df74:	220a      	movs	r2, #10
 800df76:	701a      	strb	r2, [r3, #0]
 800df78:	e7ee      	b.n	800df58 <_puts_r+0x88>
	...

0800df7c <puts>:
 800df7c:	4b02      	ldr	r3, [pc, #8]	@ (800df88 <puts+0xc>)
 800df7e:	4601      	mov	r1, r0
 800df80:	6818      	ldr	r0, [r3, #0]
 800df82:	f7ff bfa5 	b.w	800ded0 <_puts_r>
 800df86:	bf00      	nop
 800df88:	2000018c 	.word	0x2000018c

0800df8c <siprintf>:
 800df8c:	b40e      	push	{r1, r2, r3}
 800df8e:	b510      	push	{r4, lr}
 800df90:	b09d      	sub	sp, #116	@ 0x74
 800df92:	ab1f      	add	r3, sp, #124	@ 0x7c
 800df94:	9002      	str	r0, [sp, #8]
 800df96:	9006      	str	r0, [sp, #24]
 800df98:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800df9c:	480a      	ldr	r0, [pc, #40]	@ (800dfc8 <siprintf+0x3c>)
 800df9e:	9107      	str	r1, [sp, #28]
 800dfa0:	9104      	str	r1, [sp, #16]
 800dfa2:	490a      	ldr	r1, [pc, #40]	@ (800dfcc <siprintf+0x40>)
 800dfa4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfa8:	9105      	str	r1, [sp, #20]
 800dfaa:	2400      	movs	r4, #0
 800dfac:	a902      	add	r1, sp, #8
 800dfae:	6800      	ldr	r0, [r0, #0]
 800dfb0:	9301      	str	r3, [sp, #4]
 800dfb2:	941b      	str	r4, [sp, #108]	@ 0x6c
 800dfb4:	f002 f95e 	bl	8010274 <_svfiprintf_r>
 800dfb8:	9b02      	ldr	r3, [sp, #8]
 800dfba:	701c      	strb	r4, [r3, #0]
 800dfbc:	b01d      	add	sp, #116	@ 0x74
 800dfbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfc2:	b003      	add	sp, #12
 800dfc4:	4770      	bx	lr
 800dfc6:	bf00      	nop
 800dfc8:	2000018c 	.word	0x2000018c
 800dfcc:	ffff0208 	.word	0xffff0208

0800dfd0 <__sread>:
 800dfd0:	b510      	push	{r4, lr}
 800dfd2:	460c      	mov	r4, r1
 800dfd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfd8:	f000 f970 	bl	800e2bc <_read_r>
 800dfdc:	2800      	cmp	r0, #0
 800dfde:	bfab      	itete	ge
 800dfe0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dfe2:	89a3      	ldrhlt	r3, [r4, #12]
 800dfe4:	181b      	addge	r3, r3, r0
 800dfe6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dfea:	bfac      	ite	ge
 800dfec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dfee:	81a3      	strhlt	r3, [r4, #12]
 800dff0:	bd10      	pop	{r4, pc}

0800dff2 <__swrite>:
 800dff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dff6:	461f      	mov	r7, r3
 800dff8:	898b      	ldrh	r3, [r1, #12]
 800dffa:	05db      	lsls	r3, r3, #23
 800dffc:	4605      	mov	r5, r0
 800dffe:	460c      	mov	r4, r1
 800e000:	4616      	mov	r6, r2
 800e002:	d505      	bpl.n	800e010 <__swrite+0x1e>
 800e004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e008:	2302      	movs	r3, #2
 800e00a:	2200      	movs	r2, #0
 800e00c:	f000 f944 	bl	800e298 <_lseek_r>
 800e010:	89a3      	ldrh	r3, [r4, #12]
 800e012:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e016:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e01a:	81a3      	strh	r3, [r4, #12]
 800e01c:	4632      	mov	r2, r6
 800e01e:	463b      	mov	r3, r7
 800e020:	4628      	mov	r0, r5
 800e022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e026:	f000 b95b 	b.w	800e2e0 <_write_r>

0800e02a <__sseek>:
 800e02a:	b510      	push	{r4, lr}
 800e02c:	460c      	mov	r4, r1
 800e02e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e032:	f000 f931 	bl	800e298 <_lseek_r>
 800e036:	1c43      	adds	r3, r0, #1
 800e038:	89a3      	ldrh	r3, [r4, #12]
 800e03a:	bf15      	itete	ne
 800e03c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e03e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e042:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e046:	81a3      	strheq	r3, [r4, #12]
 800e048:	bf18      	it	ne
 800e04a:	81a3      	strhne	r3, [r4, #12]
 800e04c:	bd10      	pop	{r4, pc}

0800e04e <__sclose>:
 800e04e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e052:	f000 b8b3 	b.w	800e1bc <_close_r>

0800e056 <__swbuf_r>:
 800e056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e058:	460e      	mov	r6, r1
 800e05a:	4614      	mov	r4, r2
 800e05c:	4605      	mov	r5, r0
 800e05e:	b118      	cbz	r0, 800e068 <__swbuf_r+0x12>
 800e060:	6a03      	ldr	r3, [r0, #32]
 800e062:	b90b      	cbnz	r3, 800e068 <__swbuf_r+0x12>
 800e064:	f7ff feda 	bl	800de1c <__sinit>
 800e068:	69a3      	ldr	r3, [r4, #24]
 800e06a:	60a3      	str	r3, [r4, #8]
 800e06c:	89a3      	ldrh	r3, [r4, #12]
 800e06e:	071a      	lsls	r2, r3, #28
 800e070:	d501      	bpl.n	800e076 <__swbuf_r+0x20>
 800e072:	6923      	ldr	r3, [r4, #16]
 800e074:	b943      	cbnz	r3, 800e088 <__swbuf_r+0x32>
 800e076:	4621      	mov	r1, r4
 800e078:	4628      	mov	r0, r5
 800e07a:	f000 f82b 	bl	800e0d4 <__swsetup_r>
 800e07e:	b118      	cbz	r0, 800e088 <__swbuf_r+0x32>
 800e080:	f04f 37ff 	mov.w	r7, #4294967295
 800e084:	4638      	mov	r0, r7
 800e086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e088:	6823      	ldr	r3, [r4, #0]
 800e08a:	6922      	ldr	r2, [r4, #16]
 800e08c:	1a98      	subs	r0, r3, r2
 800e08e:	6963      	ldr	r3, [r4, #20]
 800e090:	b2f6      	uxtb	r6, r6
 800e092:	4283      	cmp	r3, r0
 800e094:	4637      	mov	r7, r6
 800e096:	dc05      	bgt.n	800e0a4 <__swbuf_r+0x4e>
 800e098:	4621      	mov	r1, r4
 800e09a:	4628      	mov	r0, r5
 800e09c:	f7ff fe0a 	bl	800dcb4 <_fflush_r>
 800e0a0:	2800      	cmp	r0, #0
 800e0a2:	d1ed      	bne.n	800e080 <__swbuf_r+0x2a>
 800e0a4:	68a3      	ldr	r3, [r4, #8]
 800e0a6:	3b01      	subs	r3, #1
 800e0a8:	60a3      	str	r3, [r4, #8]
 800e0aa:	6823      	ldr	r3, [r4, #0]
 800e0ac:	1c5a      	adds	r2, r3, #1
 800e0ae:	6022      	str	r2, [r4, #0]
 800e0b0:	701e      	strb	r6, [r3, #0]
 800e0b2:	6962      	ldr	r2, [r4, #20]
 800e0b4:	1c43      	adds	r3, r0, #1
 800e0b6:	429a      	cmp	r2, r3
 800e0b8:	d004      	beq.n	800e0c4 <__swbuf_r+0x6e>
 800e0ba:	89a3      	ldrh	r3, [r4, #12]
 800e0bc:	07db      	lsls	r3, r3, #31
 800e0be:	d5e1      	bpl.n	800e084 <__swbuf_r+0x2e>
 800e0c0:	2e0a      	cmp	r6, #10
 800e0c2:	d1df      	bne.n	800e084 <__swbuf_r+0x2e>
 800e0c4:	4621      	mov	r1, r4
 800e0c6:	4628      	mov	r0, r5
 800e0c8:	f7ff fdf4 	bl	800dcb4 <_fflush_r>
 800e0cc:	2800      	cmp	r0, #0
 800e0ce:	d0d9      	beq.n	800e084 <__swbuf_r+0x2e>
 800e0d0:	e7d6      	b.n	800e080 <__swbuf_r+0x2a>
	...

0800e0d4 <__swsetup_r>:
 800e0d4:	b538      	push	{r3, r4, r5, lr}
 800e0d6:	4b29      	ldr	r3, [pc, #164]	@ (800e17c <__swsetup_r+0xa8>)
 800e0d8:	4605      	mov	r5, r0
 800e0da:	6818      	ldr	r0, [r3, #0]
 800e0dc:	460c      	mov	r4, r1
 800e0de:	b118      	cbz	r0, 800e0e8 <__swsetup_r+0x14>
 800e0e0:	6a03      	ldr	r3, [r0, #32]
 800e0e2:	b90b      	cbnz	r3, 800e0e8 <__swsetup_r+0x14>
 800e0e4:	f7ff fe9a 	bl	800de1c <__sinit>
 800e0e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0ec:	0719      	lsls	r1, r3, #28
 800e0ee:	d422      	bmi.n	800e136 <__swsetup_r+0x62>
 800e0f0:	06da      	lsls	r2, r3, #27
 800e0f2:	d407      	bmi.n	800e104 <__swsetup_r+0x30>
 800e0f4:	2209      	movs	r2, #9
 800e0f6:	602a      	str	r2, [r5, #0]
 800e0f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0fc:	81a3      	strh	r3, [r4, #12]
 800e0fe:	f04f 30ff 	mov.w	r0, #4294967295
 800e102:	e033      	b.n	800e16c <__swsetup_r+0x98>
 800e104:	0758      	lsls	r0, r3, #29
 800e106:	d512      	bpl.n	800e12e <__swsetup_r+0x5a>
 800e108:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e10a:	b141      	cbz	r1, 800e11e <__swsetup_r+0x4a>
 800e10c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e110:	4299      	cmp	r1, r3
 800e112:	d002      	beq.n	800e11a <__swsetup_r+0x46>
 800e114:	4628      	mov	r0, r5
 800e116:	f000 ffa3 	bl	800f060 <_free_r>
 800e11a:	2300      	movs	r3, #0
 800e11c:	6363      	str	r3, [r4, #52]	@ 0x34
 800e11e:	89a3      	ldrh	r3, [r4, #12]
 800e120:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e124:	81a3      	strh	r3, [r4, #12]
 800e126:	2300      	movs	r3, #0
 800e128:	6063      	str	r3, [r4, #4]
 800e12a:	6923      	ldr	r3, [r4, #16]
 800e12c:	6023      	str	r3, [r4, #0]
 800e12e:	89a3      	ldrh	r3, [r4, #12]
 800e130:	f043 0308 	orr.w	r3, r3, #8
 800e134:	81a3      	strh	r3, [r4, #12]
 800e136:	6923      	ldr	r3, [r4, #16]
 800e138:	b94b      	cbnz	r3, 800e14e <__swsetup_r+0x7a>
 800e13a:	89a3      	ldrh	r3, [r4, #12]
 800e13c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e140:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e144:	d003      	beq.n	800e14e <__swsetup_r+0x7a>
 800e146:	4621      	mov	r1, r4
 800e148:	4628      	mov	r0, r5
 800e14a:	f002 faf7 	bl	801073c <__smakebuf_r>
 800e14e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e152:	f013 0201 	ands.w	r2, r3, #1
 800e156:	d00a      	beq.n	800e16e <__swsetup_r+0x9a>
 800e158:	2200      	movs	r2, #0
 800e15a:	60a2      	str	r2, [r4, #8]
 800e15c:	6962      	ldr	r2, [r4, #20]
 800e15e:	4252      	negs	r2, r2
 800e160:	61a2      	str	r2, [r4, #24]
 800e162:	6922      	ldr	r2, [r4, #16]
 800e164:	b942      	cbnz	r2, 800e178 <__swsetup_r+0xa4>
 800e166:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e16a:	d1c5      	bne.n	800e0f8 <__swsetup_r+0x24>
 800e16c:	bd38      	pop	{r3, r4, r5, pc}
 800e16e:	0799      	lsls	r1, r3, #30
 800e170:	bf58      	it	pl
 800e172:	6962      	ldrpl	r2, [r4, #20]
 800e174:	60a2      	str	r2, [r4, #8]
 800e176:	e7f4      	b.n	800e162 <__swsetup_r+0x8e>
 800e178:	2000      	movs	r0, #0
 800e17a:	e7f7      	b.n	800e16c <__swsetup_r+0x98>
 800e17c:	2000018c 	.word	0x2000018c

0800e180 <memset>:
 800e180:	4402      	add	r2, r0
 800e182:	4603      	mov	r3, r0
 800e184:	4293      	cmp	r3, r2
 800e186:	d100      	bne.n	800e18a <memset+0xa>
 800e188:	4770      	bx	lr
 800e18a:	f803 1b01 	strb.w	r1, [r3], #1
 800e18e:	e7f9      	b.n	800e184 <memset+0x4>

0800e190 <strncmp>:
 800e190:	b510      	push	{r4, lr}
 800e192:	b16a      	cbz	r2, 800e1b0 <strncmp+0x20>
 800e194:	3901      	subs	r1, #1
 800e196:	1884      	adds	r4, r0, r2
 800e198:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e19c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d103      	bne.n	800e1ac <strncmp+0x1c>
 800e1a4:	42a0      	cmp	r0, r4
 800e1a6:	d001      	beq.n	800e1ac <strncmp+0x1c>
 800e1a8:	2a00      	cmp	r2, #0
 800e1aa:	d1f5      	bne.n	800e198 <strncmp+0x8>
 800e1ac:	1ad0      	subs	r0, r2, r3
 800e1ae:	bd10      	pop	{r4, pc}
 800e1b0:	4610      	mov	r0, r2
 800e1b2:	e7fc      	b.n	800e1ae <strncmp+0x1e>

0800e1b4 <_localeconv_r>:
 800e1b4:	4800      	ldr	r0, [pc, #0]	@ (800e1b8 <_localeconv_r+0x4>)
 800e1b6:	4770      	bx	lr
 800e1b8:	20000110 	.word	0x20000110

0800e1bc <_close_r>:
 800e1bc:	b538      	push	{r3, r4, r5, lr}
 800e1be:	4d06      	ldr	r5, [pc, #24]	@ (800e1d8 <_close_r+0x1c>)
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	4604      	mov	r4, r0
 800e1c4:	4608      	mov	r0, r1
 800e1c6:	602b      	str	r3, [r5, #0]
 800e1c8:	f7f3 fda4 	bl	8001d14 <_close>
 800e1cc:	1c43      	adds	r3, r0, #1
 800e1ce:	d102      	bne.n	800e1d6 <_close_r+0x1a>
 800e1d0:	682b      	ldr	r3, [r5, #0]
 800e1d2:	b103      	cbz	r3, 800e1d6 <_close_r+0x1a>
 800e1d4:	6023      	str	r3, [r4, #0]
 800e1d6:	bd38      	pop	{r3, r4, r5, pc}
 800e1d8:	200006cc 	.word	0x200006cc

0800e1dc <_reclaim_reent>:
 800e1dc:	4b2d      	ldr	r3, [pc, #180]	@ (800e294 <_reclaim_reent+0xb8>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	4283      	cmp	r3, r0
 800e1e2:	b570      	push	{r4, r5, r6, lr}
 800e1e4:	4604      	mov	r4, r0
 800e1e6:	d053      	beq.n	800e290 <_reclaim_reent+0xb4>
 800e1e8:	69c3      	ldr	r3, [r0, #28]
 800e1ea:	b31b      	cbz	r3, 800e234 <_reclaim_reent+0x58>
 800e1ec:	68db      	ldr	r3, [r3, #12]
 800e1ee:	b163      	cbz	r3, 800e20a <_reclaim_reent+0x2e>
 800e1f0:	2500      	movs	r5, #0
 800e1f2:	69e3      	ldr	r3, [r4, #28]
 800e1f4:	68db      	ldr	r3, [r3, #12]
 800e1f6:	5959      	ldr	r1, [r3, r5]
 800e1f8:	b9b1      	cbnz	r1, 800e228 <_reclaim_reent+0x4c>
 800e1fa:	3504      	adds	r5, #4
 800e1fc:	2d80      	cmp	r5, #128	@ 0x80
 800e1fe:	d1f8      	bne.n	800e1f2 <_reclaim_reent+0x16>
 800e200:	69e3      	ldr	r3, [r4, #28]
 800e202:	4620      	mov	r0, r4
 800e204:	68d9      	ldr	r1, [r3, #12]
 800e206:	f000 ff2b 	bl	800f060 <_free_r>
 800e20a:	69e3      	ldr	r3, [r4, #28]
 800e20c:	6819      	ldr	r1, [r3, #0]
 800e20e:	b111      	cbz	r1, 800e216 <_reclaim_reent+0x3a>
 800e210:	4620      	mov	r0, r4
 800e212:	f000 ff25 	bl	800f060 <_free_r>
 800e216:	69e3      	ldr	r3, [r4, #28]
 800e218:	689d      	ldr	r5, [r3, #8]
 800e21a:	b15d      	cbz	r5, 800e234 <_reclaim_reent+0x58>
 800e21c:	4629      	mov	r1, r5
 800e21e:	4620      	mov	r0, r4
 800e220:	682d      	ldr	r5, [r5, #0]
 800e222:	f000 ff1d 	bl	800f060 <_free_r>
 800e226:	e7f8      	b.n	800e21a <_reclaim_reent+0x3e>
 800e228:	680e      	ldr	r6, [r1, #0]
 800e22a:	4620      	mov	r0, r4
 800e22c:	f000 ff18 	bl	800f060 <_free_r>
 800e230:	4631      	mov	r1, r6
 800e232:	e7e1      	b.n	800e1f8 <_reclaim_reent+0x1c>
 800e234:	6961      	ldr	r1, [r4, #20]
 800e236:	b111      	cbz	r1, 800e23e <_reclaim_reent+0x62>
 800e238:	4620      	mov	r0, r4
 800e23a:	f000 ff11 	bl	800f060 <_free_r>
 800e23e:	69e1      	ldr	r1, [r4, #28]
 800e240:	b111      	cbz	r1, 800e248 <_reclaim_reent+0x6c>
 800e242:	4620      	mov	r0, r4
 800e244:	f000 ff0c 	bl	800f060 <_free_r>
 800e248:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e24a:	b111      	cbz	r1, 800e252 <_reclaim_reent+0x76>
 800e24c:	4620      	mov	r0, r4
 800e24e:	f000 ff07 	bl	800f060 <_free_r>
 800e252:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e254:	b111      	cbz	r1, 800e25c <_reclaim_reent+0x80>
 800e256:	4620      	mov	r0, r4
 800e258:	f000 ff02 	bl	800f060 <_free_r>
 800e25c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800e25e:	b111      	cbz	r1, 800e266 <_reclaim_reent+0x8a>
 800e260:	4620      	mov	r0, r4
 800e262:	f000 fefd 	bl	800f060 <_free_r>
 800e266:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e268:	b111      	cbz	r1, 800e270 <_reclaim_reent+0x94>
 800e26a:	4620      	mov	r0, r4
 800e26c:	f000 fef8 	bl	800f060 <_free_r>
 800e270:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800e272:	b111      	cbz	r1, 800e27a <_reclaim_reent+0x9e>
 800e274:	4620      	mov	r0, r4
 800e276:	f000 fef3 	bl	800f060 <_free_r>
 800e27a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e27c:	b111      	cbz	r1, 800e284 <_reclaim_reent+0xa8>
 800e27e:	4620      	mov	r0, r4
 800e280:	f000 feee 	bl	800f060 <_free_r>
 800e284:	6a23      	ldr	r3, [r4, #32]
 800e286:	b11b      	cbz	r3, 800e290 <_reclaim_reent+0xb4>
 800e288:	4620      	mov	r0, r4
 800e28a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e28e:	4718      	bx	r3
 800e290:	bd70      	pop	{r4, r5, r6, pc}
 800e292:	bf00      	nop
 800e294:	2000018c 	.word	0x2000018c

0800e298 <_lseek_r>:
 800e298:	b538      	push	{r3, r4, r5, lr}
 800e29a:	4d07      	ldr	r5, [pc, #28]	@ (800e2b8 <_lseek_r+0x20>)
 800e29c:	4604      	mov	r4, r0
 800e29e:	4608      	mov	r0, r1
 800e2a0:	4611      	mov	r1, r2
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	602a      	str	r2, [r5, #0]
 800e2a6:	461a      	mov	r2, r3
 800e2a8:	f7f3 fd7a 	bl	8001da0 <_lseek>
 800e2ac:	1c43      	adds	r3, r0, #1
 800e2ae:	d102      	bne.n	800e2b6 <_lseek_r+0x1e>
 800e2b0:	682b      	ldr	r3, [r5, #0]
 800e2b2:	b103      	cbz	r3, 800e2b6 <_lseek_r+0x1e>
 800e2b4:	6023      	str	r3, [r4, #0]
 800e2b6:	bd38      	pop	{r3, r4, r5, pc}
 800e2b8:	200006cc 	.word	0x200006cc

0800e2bc <_read_r>:
 800e2bc:	b538      	push	{r3, r4, r5, lr}
 800e2be:	4d07      	ldr	r5, [pc, #28]	@ (800e2dc <_read_r+0x20>)
 800e2c0:	4604      	mov	r4, r0
 800e2c2:	4608      	mov	r0, r1
 800e2c4:	4611      	mov	r1, r2
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	602a      	str	r2, [r5, #0]
 800e2ca:	461a      	mov	r2, r3
 800e2cc:	f7f3 fc6c 	bl	8001ba8 <_read>
 800e2d0:	1c43      	adds	r3, r0, #1
 800e2d2:	d102      	bne.n	800e2da <_read_r+0x1e>
 800e2d4:	682b      	ldr	r3, [r5, #0]
 800e2d6:	b103      	cbz	r3, 800e2da <_read_r+0x1e>
 800e2d8:	6023      	str	r3, [r4, #0]
 800e2da:	bd38      	pop	{r3, r4, r5, pc}
 800e2dc:	200006cc 	.word	0x200006cc

0800e2e0 <_write_r>:
 800e2e0:	b538      	push	{r3, r4, r5, lr}
 800e2e2:	4d07      	ldr	r5, [pc, #28]	@ (800e300 <_write_r+0x20>)
 800e2e4:	4604      	mov	r4, r0
 800e2e6:	4608      	mov	r0, r1
 800e2e8:	4611      	mov	r1, r2
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	602a      	str	r2, [r5, #0]
 800e2ee:	461a      	mov	r2, r3
 800e2f0:	f7f3 fca0 	bl	8001c34 <_write>
 800e2f4:	1c43      	adds	r3, r0, #1
 800e2f6:	d102      	bne.n	800e2fe <_write_r+0x1e>
 800e2f8:	682b      	ldr	r3, [r5, #0]
 800e2fa:	b103      	cbz	r3, 800e2fe <_write_r+0x1e>
 800e2fc:	6023      	str	r3, [r4, #0]
 800e2fe:	bd38      	pop	{r3, r4, r5, pc}
 800e300:	200006cc 	.word	0x200006cc

0800e304 <__errno>:
 800e304:	4b01      	ldr	r3, [pc, #4]	@ (800e30c <__errno+0x8>)
 800e306:	6818      	ldr	r0, [r3, #0]
 800e308:	4770      	bx	lr
 800e30a:	bf00      	nop
 800e30c:	2000018c 	.word	0x2000018c

0800e310 <__libc_init_array>:
 800e310:	b570      	push	{r4, r5, r6, lr}
 800e312:	4d0d      	ldr	r5, [pc, #52]	@ (800e348 <__libc_init_array+0x38>)
 800e314:	4c0d      	ldr	r4, [pc, #52]	@ (800e34c <__libc_init_array+0x3c>)
 800e316:	1b64      	subs	r4, r4, r5
 800e318:	10a4      	asrs	r4, r4, #2
 800e31a:	2600      	movs	r6, #0
 800e31c:	42a6      	cmp	r6, r4
 800e31e:	d109      	bne.n	800e334 <__libc_init_array+0x24>
 800e320:	4d0b      	ldr	r5, [pc, #44]	@ (800e350 <__libc_init_array+0x40>)
 800e322:	4c0c      	ldr	r4, [pc, #48]	@ (800e354 <__libc_init_array+0x44>)
 800e324:	f002 face 	bl	80108c4 <_init>
 800e328:	1b64      	subs	r4, r4, r5
 800e32a:	10a4      	asrs	r4, r4, #2
 800e32c:	2600      	movs	r6, #0
 800e32e:	42a6      	cmp	r6, r4
 800e330:	d105      	bne.n	800e33e <__libc_init_array+0x2e>
 800e332:	bd70      	pop	{r4, r5, r6, pc}
 800e334:	f855 3b04 	ldr.w	r3, [r5], #4
 800e338:	4798      	blx	r3
 800e33a:	3601      	adds	r6, #1
 800e33c:	e7ee      	b.n	800e31c <__libc_init_array+0xc>
 800e33e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e342:	4798      	blx	r3
 800e344:	3601      	adds	r6, #1
 800e346:	e7f2      	b.n	800e32e <__libc_init_array+0x1e>
 800e348:	08011300 	.word	0x08011300
 800e34c:	08011300 	.word	0x08011300
 800e350:	08011300 	.word	0x08011300
 800e354:	08011308 	.word	0x08011308

0800e358 <__retarget_lock_init_recursive>:
 800e358:	4770      	bx	lr

0800e35a <__retarget_lock_acquire_recursive>:
 800e35a:	4770      	bx	lr

0800e35c <__retarget_lock_release_recursive>:
 800e35c:	4770      	bx	lr

0800e35e <memcpy>:
 800e35e:	440a      	add	r2, r1
 800e360:	4291      	cmp	r1, r2
 800e362:	f100 33ff 	add.w	r3, r0, #4294967295
 800e366:	d100      	bne.n	800e36a <memcpy+0xc>
 800e368:	4770      	bx	lr
 800e36a:	b510      	push	{r4, lr}
 800e36c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e370:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e374:	4291      	cmp	r1, r2
 800e376:	d1f9      	bne.n	800e36c <memcpy+0xe>
 800e378:	bd10      	pop	{r4, pc}
 800e37a:	0000      	movs	r0, r0
 800e37c:	0000      	movs	r0, r0
	...

0800e380 <nan>:
 800e380:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e388 <nan+0x8>
 800e384:	4770      	bx	lr
 800e386:	bf00      	nop
 800e388:	00000000 	.word	0x00000000
 800e38c:	7ff80000 	.word	0x7ff80000

0800e390 <nanf>:
 800e390:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e398 <nanf+0x8>
 800e394:	4770      	bx	lr
 800e396:	bf00      	nop
 800e398:	7fc00000 	.word	0x7fc00000

0800e39c <abort>:
 800e39c:	b508      	push	{r3, lr}
 800e39e:	2006      	movs	r0, #6
 800e3a0:	f002 fa4a 	bl	8010838 <raise>
 800e3a4:	2001      	movs	r0, #1
 800e3a6:	f7f3 fbf3 	bl	8001b90 <_exit>

0800e3aa <quorem>:
 800e3aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3ae:	6903      	ldr	r3, [r0, #16]
 800e3b0:	690c      	ldr	r4, [r1, #16]
 800e3b2:	42a3      	cmp	r3, r4
 800e3b4:	4607      	mov	r7, r0
 800e3b6:	db7e      	blt.n	800e4b6 <quorem+0x10c>
 800e3b8:	3c01      	subs	r4, #1
 800e3ba:	f101 0814 	add.w	r8, r1, #20
 800e3be:	00a3      	lsls	r3, r4, #2
 800e3c0:	f100 0514 	add.w	r5, r0, #20
 800e3c4:	9300      	str	r3, [sp, #0]
 800e3c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e3ca:	9301      	str	r3, [sp, #4]
 800e3cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e3d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e3d4:	3301      	adds	r3, #1
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e3dc:	fbb2 f6f3 	udiv	r6, r2, r3
 800e3e0:	d32e      	bcc.n	800e440 <quorem+0x96>
 800e3e2:	f04f 0a00 	mov.w	sl, #0
 800e3e6:	46c4      	mov	ip, r8
 800e3e8:	46ae      	mov	lr, r5
 800e3ea:	46d3      	mov	fp, sl
 800e3ec:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e3f0:	b298      	uxth	r0, r3
 800e3f2:	fb06 a000 	mla	r0, r6, r0, sl
 800e3f6:	0c02      	lsrs	r2, r0, #16
 800e3f8:	0c1b      	lsrs	r3, r3, #16
 800e3fa:	fb06 2303 	mla	r3, r6, r3, r2
 800e3fe:	f8de 2000 	ldr.w	r2, [lr]
 800e402:	b280      	uxth	r0, r0
 800e404:	b292      	uxth	r2, r2
 800e406:	1a12      	subs	r2, r2, r0
 800e408:	445a      	add	r2, fp
 800e40a:	f8de 0000 	ldr.w	r0, [lr]
 800e40e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e412:	b29b      	uxth	r3, r3
 800e414:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e418:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e41c:	b292      	uxth	r2, r2
 800e41e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e422:	45e1      	cmp	r9, ip
 800e424:	f84e 2b04 	str.w	r2, [lr], #4
 800e428:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e42c:	d2de      	bcs.n	800e3ec <quorem+0x42>
 800e42e:	9b00      	ldr	r3, [sp, #0]
 800e430:	58eb      	ldr	r3, [r5, r3]
 800e432:	b92b      	cbnz	r3, 800e440 <quorem+0x96>
 800e434:	9b01      	ldr	r3, [sp, #4]
 800e436:	3b04      	subs	r3, #4
 800e438:	429d      	cmp	r5, r3
 800e43a:	461a      	mov	r2, r3
 800e43c:	d32f      	bcc.n	800e49e <quorem+0xf4>
 800e43e:	613c      	str	r4, [r7, #16]
 800e440:	4638      	mov	r0, r7
 800e442:	f001 fc93 	bl	800fd6c <__mcmp>
 800e446:	2800      	cmp	r0, #0
 800e448:	db25      	blt.n	800e496 <quorem+0xec>
 800e44a:	4629      	mov	r1, r5
 800e44c:	2000      	movs	r0, #0
 800e44e:	f858 2b04 	ldr.w	r2, [r8], #4
 800e452:	f8d1 c000 	ldr.w	ip, [r1]
 800e456:	fa1f fe82 	uxth.w	lr, r2
 800e45a:	fa1f f38c 	uxth.w	r3, ip
 800e45e:	eba3 030e 	sub.w	r3, r3, lr
 800e462:	4403      	add	r3, r0
 800e464:	0c12      	lsrs	r2, r2, #16
 800e466:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e46a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e46e:	b29b      	uxth	r3, r3
 800e470:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e474:	45c1      	cmp	r9, r8
 800e476:	f841 3b04 	str.w	r3, [r1], #4
 800e47a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e47e:	d2e6      	bcs.n	800e44e <quorem+0xa4>
 800e480:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e484:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e488:	b922      	cbnz	r2, 800e494 <quorem+0xea>
 800e48a:	3b04      	subs	r3, #4
 800e48c:	429d      	cmp	r5, r3
 800e48e:	461a      	mov	r2, r3
 800e490:	d30b      	bcc.n	800e4aa <quorem+0x100>
 800e492:	613c      	str	r4, [r7, #16]
 800e494:	3601      	adds	r6, #1
 800e496:	4630      	mov	r0, r6
 800e498:	b003      	add	sp, #12
 800e49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e49e:	6812      	ldr	r2, [r2, #0]
 800e4a0:	3b04      	subs	r3, #4
 800e4a2:	2a00      	cmp	r2, #0
 800e4a4:	d1cb      	bne.n	800e43e <quorem+0x94>
 800e4a6:	3c01      	subs	r4, #1
 800e4a8:	e7c6      	b.n	800e438 <quorem+0x8e>
 800e4aa:	6812      	ldr	r2, [r2, #0]
 800e4ac:	3b04      	subs	r3, #4
 800e4ae:	2a00      	cmp	r2, #0
 800e4b0:	d1ef      	bne.n	800e492 <quorem+0xe8>
 800e4b2:	3c01      	subs	r4, #1
 800e4b4:	e7ea      	b.n	800e48c <quorem+0xe2>
 800e4b6:	2000      	movs	r0, #0
 800e4b8:	e7ee      	b.n	800e498 <quorem+0xee>
 800e4ba:	0000      	movs	r0, r0
 800e4bc:	0000      	movs	r0, r0
	...

0800e4c0 <_dtoa_r>:
 800e4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4c4:	69c7      	ldr	r7, [r0, #28]
 800e4c6:	b097      	sub	sp, #92	@ 0x5c
 800e4c8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e4cc:	ec55 4b10 	vmov	r4, r5, d0
 800e4d0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e4d2:	9107      	str	r1, [sp, #28]
 800e4d4:	4681      	mov	r9, r0
 800e4d6:	920c      	str	r2, [sp, #48]	@ 0x30
 800e4d8:	9311      	str	r3, [sp, #68]	@ 0x44
 800e4da:	b97f      	cbnz	r7, 800e4fc <_dtoa_r+0x3c>
 800e4dc:	2010      	movs	r0, #16
 800e4de:	f7fd fdc1 	bl	800c064 <malloc>
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	f8c9 001c 	str.w	r0, [r9, #28]
 800e4e8:	b920      	cbnz	r0, 800e4f4 <_dtoa_r+0x34>
 800e4ea:	4ba9      	ldr	r3, [pc, #676]	@ (800e790 <_dtoa_r+0x2d0>)
 800e4ec:	21ef      	movs	r1, #239	@ 0xef
 800e4ee:	48a9      	ldr	r0, [pc, #676]	@ (800e794 <_dtoa_r+0x2d4>)
 800e4f0:	f7fd fd86 	bl	800c000 <__assert_func>
 800e4f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e4f8:	6007      	str	r7, [r0, #0]
 800e4fa:	60c7      	str	r7, [r0, #12]
 800e4fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e500:	6819      	ldr	r1, [r3, #0]
 800e502:	b159      	cbz	r1, 800e51c <_dtoa_r+0x5c>
 800e504:	685a      	ldr	r2, [r3, #4]
 800e506:	604a      	str	r2, [r1, #4]
 800e508:	2301      	movs	r3, #1
 800e50a:	4093      	lsls	r3, r2
 800e50c:	608b      	str	r3, [r1, #8]
 800e50e:	4648      	mov	r0, r9
 800e510:	f001 f9b0 	bl	800f874 <_Bfree>
 800e514:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e518:	2200      	movs	r2, #0
 800e51a:	601a      	str	r2, [r3, #0]
 800e51c:	1e2b      	subs	r3, r5, #0
 800e51e:	bfb9      	ittee	lt
 800e520:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e524:	9305      	strlt	r3, [sp, #20]
 800e526:	2300      	movge	r3, #0
 800e528:	6033      	strge	r3, [r6, #0]
 800e52a:	9f05      	ldr	r7, [sp, #20]
 800e52c:	4b9a      	ldr	r3, [pc, #616]	@ (800e798 <_dtoa_r+0x2d8>)
 800e52e:	bfbc      	itt	lt
 800e530:	2201      	movlt	r2, #1
 800e532:	6032      	strlt	r2, [r6, #0]
 800e534:	43bb      	bics	r3, r7
 800e536:	d112      	bne.n	800e55e <_dtoa_r+0x9e>
 800e538:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e53a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e53e:	6013      	str	r3, [r2, #0]
 800e540:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e544:	4323      	orrs	r3, r4
 800e546:	f000 855a 	beq.w	800effe <_dtoa_r+0xb3e>
 800e54a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e54c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800e7ac <_dtoa_r+0x2ec>
 800e550:	2b00      	cmp	r3, #0
 800e552:	f000 855c 	beq.w	800f00e <_dtoa_r+0xb4e>
 800e556:	f10a 0303 	add.w	r3, sl, #3
 800e55a:	f000 bd56 	b.w	800f00a <_dtoa_r+0xb4a>
 800e55e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e562:	2200      	movs	r2, #0
 800e564:	ec51 0b17 	vmov	r0, r1, d7
 800e568:	2300      	movs	r3, #0
 800e56a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800e56e:	f7f2 facb 	bl	8000b08 <__aeabi_dcmpeq>
 800e572:	4680      	mov	r8, r0
 800e574:	b158      	cbz	r0, 800e58e <_dtoa_r+0xce>
 800e576:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e578:	2301      	movs	r3, #1
 800e57a:	6013      	str	r3, [r2, #0]
 800e57c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e57e:	b113      	cbz	r3, 800e586 <_dtoa_r+0xc6>
 800e580:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e582:	4b86      	ldr	r3, [pc, #536]	@ (800e79c <_dtoa_r+0x2dc>)
 800e584:	6013      	str	r3, [r2, #0]
 800e586:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800e7b0 <_dtoa_r+0x2f0>
 800e58a:	f000 bd40 	b.w	800f00e <_dtoa_r+0xb4e>
 800e58e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800e592:	aa14      	add	r2, sp, #80	@ 0x50
 800e594:	a915      	add	r1, sp, #84	@ 0x54
 800e596:	4648      	mov	r0, r9
 800e598:	f001 fd08 	bl	800ffac <__d2b>
 800e59c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e5a0:	9002      	str	r0, [sp, #8]
 800e5a2:	2e00      	cmp	r6, #0
 800e5a4:	d078      	beq.n	800e698 <_dtoa_r+0x1d8>
 800e5a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e5a8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800e5ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e5b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e5b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e5b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e5bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	4b76      	ldr	r3, [pc, #472]	@ (800e7a0 <_dtoa_r+0x2e0>)
 800e5c6:	f7f1 fe7f 	bl	80002c8 <__aeabi_dsub>
 800e5ca:	a36b      	add	r3, pc, #428	@ (adr r3, 800e778 <_dtoa_r+0x2b8>)
 800e5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d0:	f7f2 f832 	bl	8000638 <__aeabi_dmul>
 800e5d4:	a36a      	add	r3, pc, #424	@ (adr r3, 800e780 <_dtoa_r+0x2c0>)
 800e5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5da:	f7f1 fe77 	bl	80002cc <__adddf3>
 800e5de:	4604      	mov	r4, r0
 800e5e0:	4630      	mov	r0, r6
 800e5e2:	460d      	mov	r5, r1
 800e5e4:	f7f1 ffbe 	bl	8000564 <__aeabi_i2d>
 800e5e8:	a367      	add	r3, pc, #412	@ (adr r3, 800e788 <_dtoa_r+0x2c8>)
 800e5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ee:	f7f2 f823 	bl	8000638 <__aeabi_dmul>
 800e5f2:	4602      	mov	r2, r0
 800e5f4:	460b      	mov	r3, r1
 800e5f6:	4620      	mov	r0, r4
 800e5f8:	4629      	mov	r1, r5
 800e5fa:	f7f1 fe67 	bl	80002cc <__adddf3>
 800e5fe:	4604      	mov	r4, r0
 800e600:	460d      	mov	r5, r1
 800e602:	f7f2 fac9 	bl	8000b98 <__aeabi_d2iz>
 800e606:	2200      	movs	r2, #0
 800e608:	4607      	mov	r7, r0
 800e60a:	2300      	movs	r3, #0
 800e60c:	4620      	mov	r0, r4
 800e60e:	4629      	mov	r1, r5
 800e610:	f7f2 fa84 	bl	8000b1c <__aeabi_dcmplt>
 800e614:	b140      	cbz	r0, 800e628 <_dtoa_r+0x168>
 800e616:	4638      	mov	r0, r7
 800e618:	f7f1 ffa4 	bl	8000564 <__aeabi_i2d>
 800e61c:	4622      	mov	r2, r4
 800e61e:	462b      	mov	r3, r5
 800e620:	f7f2 fa72 	bl	8000b08 <__aeabi_dcmpeq>
 800e624:	b900      	cbnz	r0, 800e628 <_dtoa_r+0x168>
 800e626:	3f01      	subs	r7, #1
 800e628:	2f16      	cmp	r7, #22
 800e62a:	d852      	bhi.n	800e6d2 <_dtoa_r+0x212>
 800e62c:	4b5d      	ldr	r3, [pc, #372]	@ (800e7a4 <_dtoa_r+0x2e4>)
 800e62e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e636:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e63a:	f7f2 fa6f 	bl	8000b1c <__aeabi_dcmplt>
 800e63e:	2800      	cmp	r0, #0
 800e640:	d049      	beq.n	800e6d6 <_dtoa_r+0x216>
 800e642:	3f01      	subs	r7, #1
 800e644:	2300      	movs	r3, #0
 800e646:	9310      	str	r3, [sp, #64]	@ 0x40
 800e648:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e64a:	1b9b      	subs	r3, r3, r6
 800e64c:	1e5a      	subs	r2, r3, #1
 800e64e:	bf45      	ittet	mi
 800e650:	f1c3 0301 	rsbmi	r3, r3, #1
 800e654:	9300      	strmi	r3, [sp, #0]
 800e656:	2300      	movpl	r3, #0
 800e658:	2300      	movmi	r3, #0
 800e65a:	9206      	str	r2, [sp, #24]
 800e65c:	bf54      	ite	pl
 800e65e:	9300      	strpl	r3, [sp, #0]
 800e660:	9306      	strmi	r3, [sp, #24]
 800e662:	2f00      	cmp	r7, #0
 800e664:	db39      	blt.n	800e6da <_dtoa_r+0x21a>
 800e666:	9b06      	ldr	r3, [sp, #24]
 800e668:	970d      	str	r7, [sp, #52]	@ 0x34
 800e66a:	443b      	add	r3, r7
 800e66c:	9306      	str	r3, [sp, #24]
 800e66e:	2300      	movs	r3, #0
 800e670:	9308      	str	r3, [sp, #32]
 800e672:	9b07      	ldr	r3, [sp, #28]
 800e674:	2b09      	cmp	r3, #9
 800e676:	d863      	bhi.n	800e740 <_dtoa_r+0x280>
 800e678:	2b05      	cmp	r3, #5
 800e67a:	bfc4      	itt	gt
 800e67c:	3b04      	subgt	r3, #4
 800e67e:	9307      	strgt	r3, [sp, #28]
 800e680:	9b07      	ldr	r3, [sp, #28]
 800e682:	f1a3 0302 	sub.w	r3, r3, #2
 800e686:	bfcc      	ite	gt
 800e688:	2400      	movgt	r4, #0
 800e68a:	2401      	movle	r4, #1
 800e68c:	2b03      	cmp	r3, #3
 800e68e:	d863      	bhi.n	800e758 <_dtoa_r+0x298>
 800e690:	e8df f003 	tbb	[pc, r3]
 800e694:	2b375452 	.word	0x2b375452
 800e698:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e69c:	441e      	add	r6, r3
 800e69e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e6a2:	2b20      	cmp	r3, #32
 800e6a4:	bfc1      	itttt	gt
 800e6a6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e6aa:	409f      	lslgt	r7, r3
 800e6ac:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e6b0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e6b4:	bfd6      	itet	le
 800e6b6:	f1c3 0320 	rsble	r3, r3, #32
 800e6ba:	ea47 0003 	orrgt.w	r0, r7, r3
 800e6be:	fa04 f003 	lslle.w	r0, r4, r3
 800e6c2:	f7f1 ff3f 	bl	8000544 <__aeabi_ui2d>
 800e6c6:	2201      	movs	r2, #1
 800e6c8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e6cc:	3e01      	subs	r6, #1
 800e6ce:	9212      	str	r2, [sp, #72]	@ 0x48
 800e6d0:	e776      	b.n	800e5c0 <_dtoa_r+0x100>
 800e6d2:	2301      	movs	r3, #1
 800e6d4:	e7b7      	b.n	800e646 <_dtoa_r+0x186>
 800e6d6:	9010      	str	r0, [sp, #64]	@ 0x40
 800e6d8:	e7b6      	b.n	800e648 <_dtoa_r+0x188>
 800e6da:	9b00      	ldr	r3, [sp, #0]
 800e6dc:	1bdb      	subs	r3, r3, r7
 800e6de:	9300      	str	r3, [sp, #0]
 800e6e0:	427b      	negs	r3, r7
 800e6e2:	9308      	str	r3, [sp, #32]
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	930d      	str	r3, [sp, #52]	@ 0x34
 800e6e8:	e7c3      	b.n	800e672 <_dtoa_r+0x1b2>
 800e6ea:	2301      	movs	r3, #1
 800e6ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800e6ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e6f0:	eb07 0b03 	add.w	fp, r7, r3
 800e6f4:	f10b 0301 	add.w	r3, fp, #1
 800e6f8:	2b01      	cmp	r3, #1
 800e6fa:	9303      	str	r3, [sp, #12]
 800e6fc:	bfb8      	it	lt
 800e6fe:	2301      	movlt	r3, #1
 800e700:	e006      	b.n	800e710 <_dtoa_r+0x250>
 800e702:	2301      	movs	r3, #1
 800e704:	9309      	str	r3, [sp, #36]	@ 0x24
 800e706:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e708:	2b00      	cmp	r3, #0
 800e70a:	dd28      	ble.n	800e75e <_dtoa_r+0x29e>
 800e70c:	469b      	mov	fp, r3
 800e70e:	9303      	str	r3, [sp, #12]
 800e710:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e714:	2100      	movs	r1, #0
 800e716:	2204      	movs	r2, #4
 800e718:	f102 0514 	add.w	r5, r2, #20
 800e71c:	429d      	cmp	r5, r3
 800e71e:	d926      	bls.n	800e76e <_dtoa_r+0x2ae>
 800e720:	6041      	str	r1, [r0, #4]
 800e722:	4648      	mov	r0, r9
 800e724:	f001 f866 	bl	800f7f4 <_Balloc>
 800e728:	4682      	mov	sl, r0
 800e72a:	2800      	cmp	r0, #0
 800e72c:	d142      	bne.n	800e7b4 <_dtoa_r+0x2f4>
 800e72e:	4b1e      	ldr	r3, [pc, #120]	@ (800e7a8 <_dtoa_r+0x2e8>)
 800e730:	4602      	mov	r2, r0
 800e732:	f240 11af 	movw	r1, #431	@ 0x1af
 800e736:	e6da      	b.n	800e4ee <_dtoa_r+0x2e>
 800e738:	2300      	movs	r3, #0
 800e73a:	e7e3      	b.n	800e704 <_dtoa_r+0x244>
 800e73c:	2300      	movs	r3, #0
 800e73e:	e7d5      	b.n	800e6ec <_dtoa_r+0x22c>
 800e740:	2401      	movs	r4, #1
 800e742:	2300      	movs	r3, #0
 800e744:	9307      	str	r3, [sp, #28]
 800e746:	9409      	str	r4, [sp, #36]	@ 0x24
 800e748:	f04f 3bff 	mov.w	fp, #4294967295
 800e74c:	2200      	movs	r2, #0
 800e74e:	f8cd b00c 	str.w	fp, [sp, #12]
 800e752:	2312      	movs	r3, #18
 800e754:	920c      	str	r2, [sp, #48]	@ 0x30
 800e756:	e7db      	b.n	800e710 <_dtoa_r+0x250>
 800e758:	2301      	movs	r3, #1
 800e75a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e75c:	e7f4      	b.n	800e748 <_dtoa_r+0x288>
 800e75e:	f04f 0b01 	mov.w	fp, #1
 800e762:	f8cd b00c 	str.w	fp, [sp, #12]
 800e766:	465b      	mov	r3, fp
 800e768:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800e76c:	e7d0      	b.n	800e710 <_dtoa_r+0x250>
 800e76e:	3101      	adds	r1, #1
 800e770:	0052      	lsls	r2, r2, #1
 800e772:	e7d1      	b.n	800e718 <_dtoa_r+0x258>
 800e774:	f3af 8000 	nop.w
 800e778:	636f4361 	.word	0x636f4361
 800e77c:	3fd287a7 	.word	0x3fd287a7
 800e780:	8b60c8b3 	.word	0x8b60c8b3
 800e784:	3fc68a28 	.word	0x3fc68a28
 800e788:	509f79fb 	.word	0x509f79fb
 800e78c:	3fd34413 	.word	0x3fd34413
 800e790:	08010f5c 	.word	0x08010f5c
 800e794:	08010f73 	.word	0x08010f73
 800e798:	7ff00000 	.word	0x7ff00000
 800e79c:	08010f1f 	.word	0x08010f1f
 800e7a0:	3ff80000 	.word	0x3ff80000
 800e7a4:	08011230 	.word	0x08011230
 800e7a8:	08010fcb 	.word	0x08010fcb
 800e7ac:	08010f58 	.word	0x08010f58
 800e7b0:	08010f1e 	.word	0x08010f1e
 800e7b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e7b8:	6018      	str	r0, [r3, #0]
 800e7ba:	9b03      	ldr	r3, [sp, #12]
 800e7bc:	2b0e      	cmp	r3, #14
 800e7be:	f200 80a1 	bhi.w	800e904 <_dtoa_r+0x444>
 800e7c2:	2c00      	cmp	r4, #0
 800e7c4:	f000 809e 	beq.w	800e904 <_dtoa_r+0x444>
 800e7c8:	2f00      	cmp	r7, #0
 800e7ca:	dd33      	ble.n	800e834 <_dtoa_r+0x374>
 800e7cc:	4b9c      	ldr	r3, [pc, #624]	@ (800ea40 <_dtoa_r+0x580>)
 800e7ce:	f007 020f 	and.w	r2, r7, #15
 800e7d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e7d6:	ed93 7b00 	vldr	d7, [r3]
 800e7da:	05f8      	lsls	r0, r7, #23
 800e7dc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800e7e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e7e4:	d516      	bpl.n	800e814 <_dtoa_r+0x354>
 800e7e6:	4b97      	ldr	r3, [pc, #604]	@ (800ea44 <_dtoa_r+0x584>)
 800e7e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e7ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e7f0:	f7f2 f84c 	bl	800088c <__aeabi_ddiv>
 800e7f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e7f8:	f004 040f 	and.w	r4, r4, #15
 800e7fc:	2603      	movs	r6, #3
 800e7fe:	4d91      	ldr	r5, [pc, #580]	@ (800ea44 <_dtoa_r+0x584>)
 800e800:	b954      	cbnz	r4, 800e818 <_dtoa_r+0x358>
 800e802:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e806:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e80a:	f7f2 f83f 	bl	800088c <__aeabi_ddiv>
 800e80e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e812:	e028      	b.n	800e866 <_dtoa_r+0x3a6>
 800e814:	2602      	movs	r6, #2
 800e816:	e7f2      	b.n	800e7fe <_dtoa_r+0x33e>
 800e818:	07e1      	lsls	r1, r4, #31
 800e81a:	d508      	bpl.n	800e82e <_dtoa_r+0x36e>
 800e81c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e820:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e824:	f7f1 ff08 	bl	8000638 <__aeabi_dmul>
 800e828:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e82c:	3601      	adds	r6, #1
 800e82e:	1064      	asrs	r4, r4, #1
 800e830:	3508      	adds	r5, #8
 800e832:	e7e5      	b.n	800e800 <_dtoa_r+0x340>
 800e834:	f000 80af 	beq.w	800e996 <_dtoa_r+0x4d6>
 800e838:	427c      	negs	r4, r7
 800e83a:	4b81      	ldr	r3, [pc, #516]	@ (800ea40 <_dtoa_r+0x580>)
 800e83c:	4d81      	ldr	r5, [pc, #516]	@ (800ea44 <_dtoa_r+0x584>)
 800e83e:	f004 020f 	and.w	r2, r4, #15
 800e842:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e84a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e84e:	f7f1 fef3 	bl	8000638 <__aeabi_dmul>
 800e852:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e856:	1124      	asrs	r4, r4, #4
 800e858:	2300      	movs	r3, #0
 800e85a:	2602      	movs	r6, #2
 800e85c:	2c00      	cmp	r4, #0
 800e85e:	f040 808f 	bne.w	800e980 <_dtoa_r+0x4c0>
 800e862:	2b00      	cmp	r3, #0
 800e864:	d1d3      	bne.n	800e80e <_dtoa_r+0x34e>
 800e866:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e868:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	f000 8094 	beq.w	800e99a <_dtoa_r+0x4da>
 800e872:	4b75      	ldr	r3, [pc, #468]	@ (800ea48 <_dtoa_r+0x588>)
 800e874:	2200      	movs	r2, #0
 800e876:	4620      	mov	r0, r4
 800e878:	4629      	mov	r1, r5
 800e87a:	f7f2 f94f 	bl	8000b1c <__aeabi_dcmplt>
 800e87e:	2800      	cmp	r0, #0
 800e880:	f000 808b 	beq.w	800e99a <_dtoa_r+0x4da>
 800e884:	9b03      	ldr	r3, [sp, #12]
 800e886:	2b00      	cmp	r3, #0
 800e888:	f000 8087 	beq.w	800e99a <_dtoa_r+0x4da>
 800e88c:	f1bb 0f00 	cmp.w	fp, #0
 800e890:	dd34      	ble.n	800e8fc <_dtoa_r+0x43c>
 800e892:	4620      	mov	r0, r4
 800e894:	4b6d      	ldr	r3, [pc, #436]	@ (800ea4c <_dtoa_r+0x58c>)
 800e896:	2200      	movs	r2, #0
 800e898:	4629      	mov	r1, r5
 800e89a:	f7f1 fecd 	bl	8000638 <__aeabi_dmul>
 800e89e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e8a2:	f107 38ff 	add.w	r8, r7, #4294967295
 800e8a6:	3601      	adds	r6, #1
 800e8a8:	465c      	mov	r4, fp
 800e8aa:	4630      	mov	r0, r6
 800e8ac:	f7f1 fe5a 	bl	8000564 <__aeabi_i2d>
 800e8b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8b4:	f7f1 fec0 	bl	8000638 <__aeabi_dmul>
 800e8b8:	4b65      	ldr	r3, [pc, #404]	@ (800ea50 <_dtoa_r+0x590>)
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	f7f1 fd06 	bl	80002cc <__adddf3>
 800e8c0:	4605      	mov	r5, r0
 800e8c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e8c6:	2c00      	cmp	r4, #0
 800e8c8:	d16a      	bne.n	800e9a0 <_dtoa_r+0x4e0>
 800e8ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e8ce:	4b61      	ldr	r3, [pc, #388]	@ (800ea54 <_dtoa_r+0x594>)
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	f7f1 fcf9 	bl	80002c8 <__aeabi_dsub>
 800e8d6:	4602      	mov	r2, r0
 800e8d8:	460b      	mov	r3, r1
 800e8da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e8de:	462a      	mov	r2, r5
 800e8e0:	4633      	mov	r3, r6
 800e8e2:	f7f2 f939 	bl	8000b58 <__aeabi_dcmpgt>
 800e8e6:	2800      	cmp	r0, #0
 800e8e8:	f040 8298 	bne.w	800ee1c <_dtoa_r+0x95c>
 800e8ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e8f0:	462a      	mov	r2, r5
 800e8f2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e8f6:	f7f2 f911 	bl	8000b1c <__aeabi_dcmplt>
 800e8fa:	bb38      	cbnz	r0, 800e94c <_dtoa_r+0x48c>
 800e8fc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800e900:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e904:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e906:	2b00      	cmp	r3, #0
 800e908:	f2c0 8157 	blt.w	800ebba <_dtoa_r+0x6fa>
 800e90c:	2f0e      	cmp	r7, #14
 800e90e:	f300 8154 	bgt.w	800ebba <_dtoa_r+0x6fa>
 800e912:	4b4b      	ldr	r3, [pc, #300]	@ (800ea40 <_dtoa_r+0x580>)
 800e914:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e918:	ed93 7b00 	vldr	d7, [r3]
 800e91c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e91e:	2b00      	cmp	r3, #0
 800e920:	ed8d 7b00 	vstr	d7, [sp]
 800e924:	f280 80e5 	bge.w	800eaf2 <_dtoa_r+0x632>
 800e928:	9b03      	ldr	r3, [sp, #12]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	f300 80e1 	bgt.w	800eaf2 <_dtoa_r+0x632>
 800e930:	d10c      	bne.n	800e94c <_dtoa_r+0x48c>
 800e932:	4b48      	ldr	r3, [pc, #288]	@ (800ea54 <_dtoa_r+0x594>)
 800e934:	2200      	movs	r2, #0
 800e936:	ec51 0b17 	vmov	r0, r1, d7
 800e93a:	f7f1 fe7d 	bl	8000638 <__aeabi_dmul>
 800e93e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e942:	f7f2 f8ff 	bl	8000b44 <__aeabi_dcmpge>
 800e946:	2800      	cmp	r0, #0
 800e948:	f000 8266 	beq.w	800ee18 <_dtoa_r+0x958>
 800e94c:	2400      	movs	r4, #0
 800e94e:	4625      	mov	r5, r4
 800e950:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e952:	4656      	mov	r6, sl
 800e954:	ea6f 0803 	mvn.w	r8, r3
 800e958:	2700      	movs	r7, #0
 800e95a:	4621      	mov	r1, r4
 800e95c:	4648      	mov	r0, r9
 800e95e:	f000 ff89 	bl	800f874 <_Bfree>
 800e962:	2d00      	cmp	r5, #0
 800e964:	f000 80bd 	beq.w	800eae2 <_dtoa_r+0x622>
 800e968:	b12f      	cbz	r7, 800e976 <_dtoa_r+0x4b6>
 800e96a:	42af      	cmp	r7, r5
 800e96c:	d003      	beq.n	800e976 <_dtoa_r+0x4b6>
 800e96e:	4639      	mov	r1, r7
 800e970:	4648      	mov	r0, r9
 800e972:	f000 ff7f 	bl	800f874 <_Bfree>
 800e976:	4629      	mov	r1, r5
 800e978:	4648      	mov	r0, r9
 800e97a:	f000 ff7b 	bl	800f874 <_Bfree>
 800e97e:	e0b0      	b.n	800eae2 <_dtoa_r+0x622>
 800e980:	07e2      	lsls	r2, r4, #31
 800e982:	d505      	bpl.n	800e990 <_dtoa_r+0x4d0>
 800e984:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e988:	f7f1 fe56 	bl	8000638 <__aeabi_dmul>
 800e98c:	3601      	adds	r6, #1
 800e98e:	2301      	movs	r3, #1
 800e990:	1064      	asrs	r4, r4, #1
 800e992:	3508      	adds	r5, #8
 800e994:	e762      	b.n	800e85c <_dtoa_r+0x39c>
 800e996:	2602      	movs	r6, #2
 800e998:	e765      	b.n	800e866 <_dtoa_r+0x3a6>
 800e99a:	9c03      	ldr	r4, [sp, #12]
 800e99c:	46b8      	mov	r8, r7
 800e99e:	e784      	b.n	800e8aa <_dtoa_r+0x3ea>
 800e9a0:	4b27      	ldr	r3, [pc, #156]	@ (800ea40 <_dtoa_r+0x580>)
 800e9a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e9a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e9a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e9ac:	4454      	add	r4, sl
 800e9ae:	2900      	cmp	r1, #0
 800e9b0:	d054      	beq.n	800ea5c <_dtoa_r+0x59c>
 800e9b2:	4929      	ldr	r1, [pc, #164]	@ (800ea58 <_dtoa_r+0x598>)
 800e9b4:	2000      	movs	r0, #0
 800e9b6:	f7f1 ff69 	bl	800088c <__aeabi_ddiv>
 800e9ba:	4633      	mov	r3, r6
 800e9bc:	462a      	mov	r2, r5
 800e9be:	f7f1 fc83 	bl	80002c8 <__aeabi_dsub>
 800e9c2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e9c6:	4656      	mov	r6, sl
 800e9c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e9cc:	f7f2 f8e4 	bl	8000b98 <__aeabi_d2iz>
 800e9d0:	4605      	mov	r5, r0
 800e9d2:	f7f1 fdc7 	bl	8000564 <__aeabi_i2d>
 800e9d6:	4602      	mov	r2, r0
 800e9d8:	460b      	mov	r3, r1
 800e9da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e9de:	f7f1 fc73 	bl	80002c8 <__aeabi_dsub>
 800e9e2:	3530      	adds	r5, #48	@ 0x30
 800e9e4:	4602      	mov	r2, r0
 800e9e6:	460b      	mov	r3, r1
 800e9e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e9ec:	f806 5b01 	strb.w	r5, [r6], #1
 800e9f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e9f4:	f7f2 f892 	bl	8000b1c <__aeabi_dcmplt>
 800e9f8:	2800      	cmp	r0, #0
 800e9fa:	d172      	bne.n	800eae2 <_dtoa_r+0x622>
 800e9fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea00:	4911      	ldr	r1, [pc, #68]	@ (800ea48 <_dtoa_r+0x588>)
 800ea02:	2000      	movs	r0, #0
 800ea04:	f7f1 fc60 	bl	80002c8 <__aeabi_dsub>
 800ea08:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ea0c:	f7f2 f886 	bl	8000b1c <__aeabi_dcmplt>
 800ea10:	2800      	cmp	r0, #0
 800ea12:	f040 80b4 	bne.w	800eb7e <_dtoa_r+0x6be>
 800ea16:	42a6      	cmp	r6, r4
 800ea18:	f43f af70 	beq.w	800e8fc <_dtoa_r+0x43c>
 800ea1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ea20:	4b0a      	ldr	r3, [pc, #40]	@ (800ea4c <_dtoa_r+0x58c>)
 800ea22:	2200      	movs	r2, #0
 800ea24:	f7f1 fe08 	bl	8000638 <__aeabi_dmul>
 800ea28:	4b08      	ldr	r3, [pc, #32]	@ (800ea4c <_dtoa_r+0x58c>)
 800ea2a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ea2e:	2200      	movs	r2, #0
 800ea30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea34:	f7f1 fe00 	bl	8000638 <__aeabi_dmul>
 800ea38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ea3c:	e7c4      	b.n	800e9c8 <_dtoa_r+0x508>
 800ea3e:	bf00      	nop
 800ea40:	08011230 	.word	0x08011230
 800ea44:	08011208 	.word	0x08011208
 800ea48:	3ff00000 	.word	0x3ff00000
 800ea4c:	40240000 	.word	0x40240000
 800ea50:	401c0000 	.word	0x401c0000
 800ea54:	40140000 	.word	0x40140000
 800ea58:	3fe00000 	.word	0x3fe00000
 800ea5c:	4631      	mov	r1, r6
 800ea5e:	4628      	mov	r0, r5
 800ea60:	f7f1 fdea 	bl	8000638 <__aeabi_dmul>
 800ea64:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ea68:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ea6a:	4656      	mov	r6, sl
 800ea6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea70:	f7f2 f892 	bl	8000b98 <__aeabi_d2iz>
 800ea74:	4605      	mov	r5, r0
 800ea76:	f7f1 fd75 	bl	8000564 <__aeabi_i2d>
 800ea7a:	4602      	mov	r2, r0
 800ea7c:	460b      	mov	r3, r1
 800ea7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea82:	f7f1 fc21 	bl	80002c8 <__aeabi_dsub>
 800ea86:	3530      	adds	r5, #48	@ 0x30
 800ea88:	f806 5b01 	strb.w	r5, [r6], #1
 800ea8c:	4602      	mov	r2, r0
 800ea8e:	460b      	mov	r3, r1
 800ea90:	42a6      	cmp	r6, r4
 800ea92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ea96:	f04f 0200 	mov.w	r2, #0
 800ea9a:	d124      	bne.n	800eae6 <_dtoa_r+0x626>
 800ea9c:	4baf      	ldr	r3, [pc, #700]	@ (800ed5c <_dtoa_r+0x89c>)
 800ea9e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800eaa2:	f7f1 fc13 	bl	80002cc <__adddf3>
 800eaa6:	4602      	mov	r2, r0
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eaae:	f7f2 f853 	bl	8000b58 <__aeabi_dcmpgt>
 800eab2:	2800      	cmp	r0, #0
 800eab4:	d163      	bne.n	800eb7e <_dtoa_r+0x6be>
 800eab6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800eaba:	49a8      	ldr	r1, [pc, #672]	@ (800ed5c <_dtoa_r+0x89c>)
 800eabc:	2000      	movs	r0, #0
 800eabe:	f7f1 fc03 	bl	80002c8 <__aeabi_dsub>
 800eac2:	4602      	mov	r2, r0
 800eac4:	460b      	mov	r3, r1
 800eac6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eaca:	f7f2 f827 	bl	8000b1c <__aeabi_dcmplt>
 800eace:	2800      	cmp	r0, #0
 800ead0:	f43f af14 	beq.w	800e8fc <_dtoa_r+0x43c>
 800ead4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ead6:	1e73      	subs	r3, r6, #1
 800ead8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800eada:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eade:	2b30      	cmp	r3, #48	@ 0x30
 800eae0:	d0f8      	beq.n	800ead4 <_dtoa_r+0x614>
 800eae2:	4647      	mov	r7, r8
 800eae4:	e03b      	b.n	800eb5e <_dtoa_r+0x69e>
 800eae6:	4b9e      	ldr	r3, [pc, #632]	@ (800ed60 <_dtoa_r+0x8a0>)
 800eae8:	f7f1 fda6 	bl	8000638 <__aeabi_dmul>
 800eaec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eaf0:	e7bc      	b.n	800ea6c <_dtoa_r+0x5ac>
 800eaf2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800eaf6:	4656      	mov	r6, sl
 800eaf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eafc:	4620      	mov	r0, r4
 800eafe:	4629      	mov	r1, r5
 800eb00:	f7f1 fec4 	bl	800088c <__aeabi_ddiv>
 800eb04:	f7f2 f848 	bl	8000b98 <__aeabi_d2iz>
 800eb08:	4680      	mov	r8, r0
 800eb0a:	f7f1 fd2b 	bl	8000564 <__aeabi_i2d>
 800eb0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb12:	f7f1 fd91 	bl	8000638 <__aeabi_dmul>
 800eb16:	4602      	mov	r2, r0
 800eb18:	460b      	mov	r3, r1
 800eb1a:	4620      	mov	r0, r4
 800eb1c:	4629      	mov	r1, r5
 800eb1e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800eb22:	f7f1 fbd1 	bl	80002c8 <__aeabi_dsub>
 800eb26:	f806 4b01 	strb.w	r4, [r6], #1
 800eb2a:	9d03      	ldr	r5, [sp, #12]
 800eb2c:	eba6 040a 	sub.w	r4, r6, sl
 800eb30:	42a5      	cmp	r5, r4
 800eb32:	4602      	mov	r2, r0
 800eb34:	460b      	mov	r3, r1
 800eb36:	d133      	bne.n	800eba0 <_dtoa_r+0x6e0>
 800eb38:	f7f1 fbc8 	bl	80002cc <__adddf3>
 800eb3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb40:	4604      	mov	r4, r0
 800eb42:	460d      	mov	r5, r1
 800eb44:	f7f2 f808 	bl	8000b58 <__aeabi_dcmpgt>
 800eb48:	b9c0      	cbnz	r0, 800eb7c <_dtoa_r+0x6bc>
 800eb4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb4e:	4620      	mov	r0, r4
 800eb50:	4629      	mov	r1, r5
 800eb52:	f7f1 ffd9 	bl	8000b08 <__aeabi_dcmpeq>
 800eb56:	b110      	cbz	r0, 800eb5e <_dtoa_r+0x69e>
 800eb58:	f018 0f01 	tst.w	r8, #1
 800eb5c:	d10e      	bne.n	800eb7c <_dtoa_r+0x6bc>
 800eb5e:	9902      	ldr	r1, [sp, #8]
 800eb60:	4648      	mov	r0, r9
 800eb62:	f000 fe87 	bl	800f874 <_Bfree>
 800eb66:	2300      	movs	r3, #0
 800eb68:	7033      	strb	r3, [r6, #0]
 800eb6a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800eb6c:	3701      	adds	r7, #1
 800eb6e:	601f      	str	r7, [r3, #0]
 800eb70:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	f000 824b 	beq.w	800f00e <_dtoa_r+0xb4e>
 800eb78:	601e      	str	r6, [r3, #0]
 800eb7a:	e248      	b.n	800f00e <_dtoa_r+0xb4e>
 800eb7c:	46b8      	mov	r8, r7
 800eb7e:	4633      	mov	r3, r6
 800eb80:	461e      	mov	r6, r3
 800eb82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb86:	2a39      	cmp	r2, #57	@ 0x39
 800eb88:	d106      	bne.n	800eb98 <_dtoa_r+0x6d8>
 800eb8a:	459a      	cmp	sl, r3
 800eb8c:	d1f8      	bne.n	800eb80 <_dtoa_r+0x6c0>
 800eb8e:	2230      	movs	r2, #48	@ 0x30
 800eb90:	f108 0801 	add.w	r8, r8, #1
 800eb94:	f88a 2000 	strb.w	r2, [sl]
 800eb98:	781a      	ldrb	r2, [r3, #0]
 800eb9a:	3201      	adds	r2, #1
 800eb9c:	701a      	strb	r2, [r3, #0]
 800eb9e:	e7a0      	b.n	800eae2 <_dtoa_r+0x622>
 800eba0:	4b6f      	ldr	r3, [pc, #444]	@ (800ed60 <_dtoa_r+0x8a0>)
 800eba2:	2200      	movs	r2, #0
 800eba4:	f7f1 fd48 	bl	8000638 <__aeabi_dmul>
 800eba8:	2200      	movs	r2, #0
 800ebaa:	2300      	movs	r3, #0
 800ebac:	4604      	mov	r4, r0
 800ebae:	460d      	mov	r5, r1
 800ebb0:	f7f1 ffaa 	bl	8000b08 <__aeabi_dcmpeq>
 800ebb4:	2800      	cmp	r0, #0
 800ebb6:	d09f      	beq.n	800eaf8 <_dtoa_r+0x638>
 800ebb8:	e7d1      	b.n	800eb5e <_dtoa_r+0x69e>
 800ebba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ebbc:	2a00      	cmp	r2, #0
 800ebbe:	f000 80ea 	beq.w	800ed96 <_dtoa_r+0x8d6>
 800ebc2:	9a07      	ldr	r2, [sp, #28]
 800ebc4:	2a01      	cmp	r2, #1
 800ebc6:	f300 80cd 	bgt.w	800ed64 <_dtoa_r+0x8a4>
 800ebca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ebcc:	2a00      	cmp	r2, #0
 800ebce:	f000 80c1 	beq.w	800ed54 <_dtoa_r+0x894>
 800ebd2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ebd6:	9c08      	ldr	r4, [sp, #32]
 800ebd8:	9e00      	ldr	r6, [sp, #0]
 800ebda:	9a00      	ldr	r2, [sp, #0]
 800ebdc:	441a      	add	r2, r3
 800ebde:	9200      	str	r2, [sp, #0]
 800ebe0:	9a06      	ldr	r2, [sp, #24]
 800ebe2:	2101      	movs	r1, #1
 800ebe4:	441a      	add	r2, r3
 800ebe6:	4648      	mov	r0, r9
 800ebe8:	9206      	str	r2, [sp, #24]
 800ebea:	f000 ff41 	bl	800fa70 <__i2b>
 800ebee:	4605      	mov	r5, r0
 800ebf0:	b166      	cbz	r6, 800ec0c <_dtoa_r+0x74c>
 800ebf2:	9b06      	ldr	r3, [sp, #24]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	dd09      	ble.n	800ec0c <_dtoa_r+0x74c>
 800ebf8:	42b3      	cmp	r3, r6
 800ebfa:	9a00      	ldr	r2, [sp, #0]
 800ebfc:	bfa8      	it	ge
 800ebfe:	4633      	movge	r3, r6
 800ec00:	1ad2      	subs	r2, r2, r3
 800ec02:	9200      	str	r2, [sp, #0]
 800ec04:	9a06      	ldr	r2, [sp, #24]
 800ec06:	1af6      	subs	r6, r6, r3
 800ec08:	1ad3      	subs	r3, r2, r3
 800ec0a:	9306      	str	r3, [sp, #24]
 800ec0c:	9b08      	ldr	r3, [sp, #32]
 800ec0e:	b30b      	cbz	r3, 800ec54 <_dtoa_r+0x794>
 800ec10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	f000 80c6 	beq.w	800eda4 <_dtoa_r+0x8e4>
 800ec18:	2c00      	cmp	r4, #0
 800ec1a:	f000 80c0 	beq.w	800ed9e <_dtoa_r+0x8de>
 800ec1e:	4629      	mov	r1, r5
 800ec20:	4622      	mov	r2, r4
 800ec22:	4648      	mov	r0, r9
 800ec24:	f000 ffdc 	bl	800fbe0 <__pow5mult>
 800ec28:	9a02      	ldr	r2, [sp, #8]
 800ec2a:	4601      	mov	r1, r0
 800ec2c:	4605      	mov	r5, r0
 800ec2e:	4648      	mov	r0, r9
 800ec30:	f000 ff34 	bl	800fa9c <__multiply>
 800ec34:	9902      	ldr	r1, [sp, #8]
 800ec36:	4680      	mov	r8, r0
 800ec38:	4648      	mov	r0, r9
 800ec3a:	f000 fe1b 	bl	800f874 <_Bfree>
 800ec3e:	9b08      	ldr	r3, [sp, #32]
 800ec40:	1b1b      	subs	r3, r3, r4
 800ec42:	9308      	str	r3, [sp, #32]
 800ec44:	f000 80b1 	beq.w	800edaa <_dtoa_r+0x8ea>
 800ec48:	9a08      	ldr	r2, [sp, #32]
 800ec4a:	4641      	mov	r1, r8
 800ec4c:	4648      	mov	r0, r9
 800ec4e:	f000 ffc7 	bl	800fbe0 <__pow5mult>
 800ec52:	9002      	str	r0, [sp, #8]
 800ec54:	2101      	movs	r1, #1
 800ec56:	4648      	mov	r0, r9
 800ec58:	f000 ff0a 	bl	800fa70 <__i2b>
 800ec5c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ec5e:	4604      	mov	r4, r0
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	f000 81d8 	beq.w	800f016 <_dtoa_r+0xb56>
 800ec66:	461a      	mov	r2, r3
 800ec68:	4601      	mov	r1, r0
 800ec6a:	4648      	mov	r0, r9
 800ec6c:	f000 ffb8 	bl	800fbe0 <__pow5mult>
 800ec70:	9b07      	ldr	r3, [sp, #28]
 800ec72:	2b01      	cmp	r3, #1
 800ec74:	4604      	mov	r4, r0
 800ec76:	f300 809f 	bgt.w	800edb8 <_dtoa_r+0x8f8>
 800ec7a:	9b04      	ldr	r3, [sp, #16]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	f040 8097 	bne.w	800edb0 <_dtoa_r+0x8f0>
 800ec82:	9b05      	ldr	r3, [sp, #20]
 800ec84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	f040 8093 	bne.w	800edb4 <_dtoa_r+0x8f4>
 800ec8e:	9b05      	ldr	r3, [sp, #20]
 800ec90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ec94:	0d1b      	lsrs	r3, r3, #20
 800ec96:	051b      	lsls	r3, r3, #20
 800ec98:	b133      	cbz	r3, 800eca8 <_dtoa_r+0x7e8>
 800ec9a:	9b00      	ldr	r3, [sp, #0]
 800ec9c:	3301      	adds	r3, #1
 800ec9e:	9300      	str	r3, [sp, #0]
 800eca0:	9b06      	ldr	r3, [sp, #24]
 800eca2:	3301      	adds	r3, #1
 800eca4:	9306      	str	r3, [sp, #24]
 800eca6:	2301      	movs	r3, #1
 800eca8:	9308      	str	r3, [sp, #32]
 800ecaa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	f000 81b8 	beq.w	800f022 <_dtoa_r+0xb62>
 800ecb2:	6923      	ldr	r3, [r4, #16]
 800ecb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ecb8:	6918      	ldr	r0, [r3, #16]
 800ecba:	f000 fe8d 	bl	800f9d8 <__hi0bits>
 800ecbe:	f1c0 0020 	rsb	r0, r0, #32
 800ecc2:	9b06      	ldr	r3, [sp, #24]
 800ecc4:	4418      	add	r0, r3
 800ecc6:	f010 001f 	ands.w	r0, r0, #31
 800ecca:	f000 8082 	beq.w	800edd2 <_dtoa_r+0x912>
 800ecce:	f1c0 0320 	rsb	r3, r0, #32
 800ecd2:	2b04      	cmp	r3, #4
 800ecd4:	dd73      	ble.n	800edbe <_dtoa_r+0x8fe>
 800ecd6:	9b00      	ldr	r3, [sp, #0]
 800ecd8:	f1c0 001c 	rsb	r0, r0, #28
 800ecdc:	4403      	add	r3, r0
 800ecde:	9300      	str	r3, [sp, #0]
 800ece0:	9b06      	ldr	r3, [sp, #24]
 800ece2:	4403      	add	r3, r0
 800ece4:	4406      	add	r6, r0
 800ece6:	9306      	str	r3, [sp, #24]
 800ece8:	9b00      	ldr	r3, [sp, #0]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	dd05      	ble.n	800ecfa <_dtoa_r+0x83a>
 800ecee:	9902      	ldr	r1, [sp, #8]
 800ecf0:	461a      	mov	r2, r3
 800ecf2:	4648      	mov	r0, r9
 800ecf4:	f000 ffce 	bl	800fc94 <__lshift>
 800ecf8:	9002      	str	r0, [sp, #8]
 800ecfa:	9b06      	ldr	r3, [sp, #24]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	dd05      	ble.n	800ed0c <_dtoa_r+0x84c>
 800ed00:	4621      	mov	r1, r4
 800ed02:	461a      	mov	r2, r3
 800ed04:	4648      	mov	r0, r9
 800ed06:	f000 ffc5 	bl	800fc94 <__lshift>
 800ed0a:	4604      	mov	r4, r0
 800ed0c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d061      	beq.n	800edd6 <_dtoa_r+0x916>
 800ed12:	9802      	ldr	r0, [sp, #8]
 800ed14:	4621      	mov	r1, r4
 800ed16:	f001 f829 	bl	800fd6c <__mcmp>
 800ed1a:	2800      	cmp	r0, #0
 800ed1c:	da5b      	bge.n	800edd6 <_dtoa_r+0x916>
 800ed1e:	2300      	movs	r3, #0
 800ed20:	9902      	ldr	r1, [sp, #8]
 800ed22:	220a      	movs	r2, #10
 800ed24:	4648      	mov	r0, r9
 800ed26:	f000 fdc7 	bl	800f8b8 <__multadd>
 800ed2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed2c:	9002      	str	r0, [sp, #8]
 800ed2e:	f107 38ff 	add.w	r8, r7, #4294967295
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	f000 8177 	beq.w	800f026 <_dtoa_r+0xb66>
 800ed38:	4629      	mov	r1, r5
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	220a      	movs	r2, #10
 800ed3e:	4648      	mov	r0, r9
 800ed40:	f000 fdba 	bl	800f8b8 <__multadd>
 800ed44:	f1bb 0f00 	cmp.w	fp, #0
 800ed48:	4605      	mov	r5, r0
 800ed4a:	dc6f      	bgt.n	800ee2c <_dtoa_r+0x96c>
 800ed4c:	9b07      	ldr	r3, [sp, #28]
 800ed4e:	2b02      	cmp	r3, #2
 800ed50:	dc49      	bgt.n	800ede6 <_dtoa_r+0x926>
 800ed52:	e06b      	b.n	800ee2c <_dtoa_r+0x96c>
 800ed54:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ed56:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ed5a:	e73c      	b.n	800ebd6 <_dtoa_r+0x716>
 800ed5c:	3fe00000 	.word	0x3fe00000
 800ed60:	40240000 	.word	0x40240000
 800ed64:	9b03      	ldr	r3, [sp, #12]
 800ed66:	1e5c      	subs	r4, r3, #1
 800ed68:	9b08      	ldr	r3, [sp, #32]
 800ed6a:	42a3      	cmp	r3, r4
 800ed6c:	db09      	blt.n	800ed82 <_dtoa_r+0x8c2>
 800ed6e:	1b1c      	subs	r4, r3, r4
 800ed70:	9b03      	ldr	r3, [sp, #12]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	f6bf af30 	bge.w	800ebd8 <_dtoa_r+0x718>
 800ed78:	9b00      	ldr	r3, [sp, #0]
 800ed7a:	9a03      	ldr	r2, [sp, #12]
 800ed7c:	1a9e      	subs	r6, r3, r2
 800ed7e:	2300      	movs	r3, #0
 800ed80:	e72b      	b.n	800ebda <_dtoa_r+0x71a>
 800ed82:	9b08      	ldr	r3, [sp, #32]
 800ed84:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ed86:	9408      	str	r4, [sp, #32]
 800ed88:	1ae3      	subs	r3, r4, r3
 800ed8a:	441a      	add	r2, r3
 800ed8c:	9e00      	ldr	r6, [sp, #0]
 800ed8e:	9b03      	ldr	r3, [sp, #12]
 800ed90:	920d      	str	r2, [sp, #52]	@ 0x34
 800ed92:	2400      	movs	r4, #0
 800ed94:	e721      	b.n	800ebda <_dtoa_r+0x71a>
 800ed96:	9c08      	ldr	r4, [sp, #32]
 800ed98:	9e00      	ldr	r6, [sp, #0]
 800ed9a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ed9c:	e728      	b.n	800ebf0 <_dtoa_r+0x730>
 800ed9e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800eda2:	e751      	b.n	800ec48 <_dtoa_r+0x788>
 800eda4:	9a08      	ldr	r2, [sp, #32]
 800eda6:	9902      	ldr	r1, [sp, #8]
 800eda8:	e750      	b.n	800ec4c <_dtoa_r+0x78c>
 800edaa:	f8cd 8008 	str.w	r8, [sp, #8]
 800edae:	e751      	b.n	800ec54 <_dtoa_r+0x794>
 800edb0:	2300      	movs	r3, #0
 800edb2:	e779      	b.n	800eca8 <_dtoa_r+0x7e8>
 800edb4:	9b04      	ldr	r3, [sp, #16]
 800edb6:	e777      	b.n	800eca8 <_dtoa_r+0x7e8>
 800edb8:	2300      	movs	r3, #0
 800edba:	9308      	str	r3, [sp, #32]
 800edbc:	e779      	b.n	800ecb2 <_dtoa_r+0x7f2>
 800edbe:	d093      	beq.n	800ece8 <_dtoa_r+0x828>
 800edc0:	9a00      	ldr	r2, [sp, #0]
 800edc2:	331c      	adds	r3, #28
 800edc4:	441a      	add	r2, r3
 800edc6:	9200      	str	r2, [sp, #0]
 800edc8:	9a06      	ldr	r2, [sp, #24]
 800edca:	441a      	add	r2, r3
 800edcc:	441e      	add	r6, r3
 800edce:	9206      	str	r2, [sp, #24]
 800edd0:	e78a      	b.n	800ece8 <_dtoa_r+0x828>
 800edd2:	4603      	mov	r3, r0
 800edd4:	e7f4      	b.n	800edc0 <_dtoa_r+0x900>
 800edd6:	9b03      	ldr	r3, [sp, #12]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	46b8      	mov	r8, r7
 800eddc:	dc20      	bgt.n	800ee20 <_dtoa_r+0x960>
 800edde:	469b      	mov	fp, r3
 800ede0:	9b07      	ldr	r3, [sp, #28]
 800ede2:	2b02      	cmp	r3, #2
 800ede4:	dd1e      	ble.n	800ee24 <_dtoa_r+0x964>
 800ede6:	f1bb 0f00 	cmp.w	fp, #0
 800edea:	f47f adb1 	bne.w	800e950 <_dtoa_r+0x490>
 800edee:	4621      	mov	r1, r4
 800edf0:	465b      	mov	r3, fp
 800edf2:	2205      	movs	r2, #5
 800edf4:	4648      	mov	r0, r9
 800edf6:	f000 fd5f 	bl	800f8b8 <__multadd>
 800edfa:	4601      	mov	r1, r0
 800edfc:	4604      	mov	r4, r0
 800edfe:	9802      	ldr	r0, [sp, #8]
 800ee00:	f000 ffb4 	bl	800fd6c <__mcmp>
 800ee04:	2800      	cmp	r0, #0
 800ee06:	f77f ada3 	ble.w	800e950 <_dtoa_r+0x490>
 800ee0a:	4656      	mov	r6, sl
 800ee0c:	2331      	movs	r3, #49	@ 0x31
 800ee0e:	f806 3b01 	strb.w	r3, [r6], #1
 800ee12:	f108 0801 	add.w	r8, r8, #1
 800ee16:	e59f      	b.n	800e958 <_dtoa_r+0x498>
 800ee18:	9c03      	ldr	r4, [sp, #12]
 800ee1a:	46b8      	mov	r8, r7
 800ee1c:	4625      	mov	r5, r4
 800ee1e:	e7f4      	b.n	800ee0a <_dtoa_r+0x94a>
 800ee20:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ee24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	f000 8101 	beq.w	800f02e <_dtoa_r+0xb6e>
 800ee2c:	2e00      	cmp	r6, #0
 800ee2e:	dd05      	ble.n	800ee3c <_dtoa_r+0x97c>
 800ee30:	4629      	mov	r1, r5
 800ee32:	4632      	mov	r2, r6
 800ee34:	4648      	mov	r0, r9
 800ee36:	f000 ff2d 	bl	800fc94 <__lshift>
 800ee3a:	4605      	mov	r5, r0
 800ee3c:	9b08      	ldr	r3, [sp, #32]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d05c      	beq.n	800eefc <_dtoa_r+0xa3c>
 800ee42:	6869      	ldr	r1, [r5, #4]
 800ee44:	4648      	mov	r0, r9
 800ee46:	f000 fcd5 	bl	800f7f4 <_Balloc>
 800ee4a:	4606      	mov	r6, r0
 800ee4c:	b928      	cbnz	r0, 800ee5a <_dtoa_r+0x99a>
 800ee4e:	4b82      	ldr	r3, [pc, #520]	@ (800f058 <_dtoa_r+0xb98>)
 800ee50:	4602      	mov	r2, r0
 800ee52:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ee56:	f7ff bb4a 	b.w	800e4ee <_dtoa_r+0x2e>
 800ee5a:	692a      	ldr	r2, [r5, #16]
 800ee5c:	3202      	adds	r2, #2
 800ee5e:	0092      	lsls	r2, r2, #2
 800ee60:	f105 010c 	add.w	r1, r5, #12
 800ee64:	300c      	adds	r0, #12
 800ee66:	f7ff fa7a 	bl	800e35e <memcpy>
 800ee6a:	2201      	movs	r2, #1
 800ee6c:	4631      	mov	r1, r6
 800ee6e:	4648      	mov	r0, r9
 800ee70:	f000 ff10 	bl	800fc94 <__lshift>
 800ee74:	f10a 0301 	add.w	r3, sl, #1
 800ee78:	9300      	str	r3, [sp, #0]
 800ee7a:	eb0a 030b 	add.w	r3, sl, fp
 800ee7e:	9308      	str	r3, [sp, #32]
 800ee80:	9b04      	ldr	r3, [sp, #16]
 800ee82:	f003 0301 	and.w	r3, r3, #1
 800ee86:	462f      	mov	r7, r5
 800ee88:	9306      	str	r3, [sp, #24]
 800ee8a:	4605      	mov	r5, r0
 800ee8c:	9b00      	ldr	r3, [sp, #0]
 800ee8e:	9802      	ldr	r0, [sp, #8]
 800ee90:	4621      	mov	r1, r4
 800ee92:	f103 3bff 	add.w	fp, r3, #4294967295
 800ee96:	f7ff fa88 	bl	800e3aa <quorem>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	3330      	adds	r3, #48	@ 0x30
 800ee9e:	9003      	str	r0, [sp, #12]
 800eea0:	4639      	mov	r1, r7
 800eea2:	9802      	ldr	r0, [sp, #8]
 800eea4:	9309      	str	r3, [sp, #36]	@ 0x24
 800eea6:	f000 ff61 	bl	800fd6c <__mcmp>
 800eeaa:	462a      	mov	r2, r5
 800eeac:	9004      	str	r0, [sp, #16]
 800eeae:	4621      	mov	r1, r4
 800eeb0:	4648      	mov	r0, r9
 800eeb2:	f000 ff77 	bl	800fda4 <__mdiff>
 800eeb6:	68c2      	ldr	r2, [r0, #12]
 800eeb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eeba:	4606      	mov	r6, r0
 800eebc:	bb02      	cbnz	r2, 800ef00 <_dtoa_r+0xa40>
 800eebe:	4601      	mov	r1, r0
 800eec0:	9802      	ldr	r0, [sp, #8]
 800eec2:	f000 ff53 	bl	800fd6c <__mcmp>
 800eec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eec8:	4602      	mov	r2, r0
 800eeca:	4631      	mov	r1, r6
 800eecc:	4648      	mov	r0, r9
 800eece:	920c      	str	r2, [sp, #48]	@ 0x30
 800eed0:	9309      	str	r3, [sp, #36]	@ 0x24
 800eed2:	f000 fccf 	bl	800f874 <_Bfree>
 800eed6:	9b07      	ldr	r3, [sp, #28]
 800eed8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800eeda:	9e00      	ldr	r6, [sp, #0]
 800eedc:	ea42 0103 	orr.w	r1, r2, r3
 800eee0:	9b06      	ldr	r3, [sp, #24]
 800eee2:	4319      	orrs	r1, r3
 800eee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eee6:	d10d      	bne.n	800ef04 <_dtoa_r+0xa44>
 800eee8:	2b39      	cmp	r3, #57	@ 0x39
 800eeea:	d027      	beq.n	800ef3c <_dtoa_r+0xa7c>
 800eeec:	9a04      	ldr	r2, [sp, #16]
 800eeee:	2a00      	cmp	r2, #0
 800eef0:	dd01      	ble.n	800eef6 <_dtoa_r+0xa36>
 800eef2:	9b03      	ldr	r3, [sp, #12]
 800eef4:	3331      	adds	r3, #49	@ 0x31
 800eef6:	f88b 3000 	strb.w	r3, [fp]
 800eefa:	e52e      	b.n	800e95a <_dtoa_r+0x49a>
 800eefc:	4628      	mov	r0, r5
 800eefe:	e7b9      	b.n	800ee74 <_dtoa_r+0x9b4>
 800ef00:	2201      	movs	r2, #1
 800ef02:	e7e2      	b.n	800eeca <_dtoa_r+0xa0a>
 800ef04:	9904      	ldr	r1, [sp, #16]
 800ef06:	2900      	cmp	r1, #0
 800ef08:	db04      	blt.n	800ef14 <_dtoa_r+0xa54>
 800ef0a:	9807      	ldr	r0, [sp, #28]
 800ef0c:	4301      	orrs	r1, r0
 800ef0e:	9806      	ldr	r0, [sp, #24]
 800ef10:	4301      	orrs	r1, r0
 800ef12:	d120      	bne.n	800ef56 <_dtoa_r+0xa96>
 800ef14:	2a00      	cmp	r2, #0
 800ef16:	ddee      	ble.n	800eef6 <_dtoa_r+0xa36>
 800ef18:	9902      	ldr	r1, [sp, #8]
 800ef1a:	9300      	str	r3, [sp, #0]
 800ef1c:	2201      	movs	r2, #1
 800ef1e:	4648      	mov	r0, r9
 800ef20:	f000 feb8 	bl	800fc94 <__lshift>
 800ef24:	4621      	mov	r1, r4
 800ef26:	9002      	str	r0, [sp, #8]
 800ef28:	f000 ff20 	bl	800fd6c <__mcmp>
 800ef2c:	2800      	cmp	r0, #0
 800ef2e:	9b00      	ldr	r3, [sp, #0]
 800ef30:	dc02      	bgt.n	800ef38 <_dtoa_r+0xa78>
 800ef32:	d1e0      	bne.n	800eef6 <_dtoa_r+0xa36>
 800ef34:	07da      	lsls	r2, r3, #31
 800ef36:	d5de      	bpl.n	800eef6 <_dtoa_r+0xa36>
 800ef38:	2b39      	cmp	r3, #57	@ 0x39
 800ef3a:	d1da      	bne.n	800eef2 <_dtoa_r+0xa32>
 800ef3c:	2339      	movs	r3, #57	@ 0x39
 800ef3e:	f88b 3000 	strb.w	r3, [fp]
 800ef42:	4633      	mov	r3, r6
 800ef44:	461e      	mov	r6, r3
 800ef46:	3b01      	subs	r3, #1
 800ef48:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ef4c:	2a39      	cmp	r2, #57	@ 0x39
 800ef4e:	d04e      	beq.n	800efee <_dtoa_r+0xb2e>
 800ef50:	3201      	adds	r2, #1
 800ef52:	701a      	strb	r2, [r3, #0]
 800ef54:	e501      	b.n	800e95a <_dtoa_r+0x49a>
 800ef56:	2a00      	cmp	r2, #0
 800ef58:	dd03      	ble.n	800ef62 <_dtoa_r+0xaa2>
 800ef5a:	2b39      	cmp	r3, #57	@ 0x39
 800ef5c:	d0ee      	beq.n	800ef3c <_dtoa_r+0xa7c>
 800ef5e:	3301      	adds	r3, #1
 800ef60:	e7c9      	b.n	800eef6 <_dtoa_r+0xa36>
 800ef62:	9a00      	ldr	r2, [sp, #0]
 800ef64:	9908      	ldr	r1, [sp, #32]
 800ef66:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ef6a:	428a      	cmp	r2, r1
 800ef6c:	d028      	beq.n	800efc0 <_dtoa_r+0xb00>
 800ef6e:	9902      	ldr	r1, [sp, #8]
 800ef70:	2300      	movs	r3, #0
 800ef72:	220a      	movs	r2, #10
 800ef74:	4648      	mov	r0, r9
 800ef76:	f000 fc9f 	bl	800f8b8 <__multadd>
 800ef7a:	42af      	cmp	r7, r5
 800ef7c:	9002      	str	r0, [sp, #8]
 800ef7e:	f04f 0300 	mov.w	r3, #0
 800ef82:	f04f 020a 	mov.w	r2, #10
 800ef86:	4639      	mov	r1, r7
 800ef88:	4648      	mov	r0, r9
 800ef8a:	d107      	bne.n	800ef9c <_dtoa_r+0xadc>
 800ef8c:	f000 fc94 	bl	800f8b8 <__multadd>
 800ef90:	4607      	mov	r7, r0
 800ef92:	4605      	mov	r5, r0
 800ef94:	9b00      	ldr	r3, [sp, #0]
 800ef96:	3301      	adds	r3, #1
 800ef98:	9300      	str	r3, [sp, #0]
 800ef9a:	e777      	b.n	800ee8c <_dtoa_r+0x9cc>
 800ef9c:	f000 fc8c 	bl	800f8b8 <__multadd>
 800efa0:	4629      	mov	r1, r5
 800efa2:	4607      	mov	r7, r0
 800efa4:	2300      	movs	r3, #0
 800efa6:	220a      	movs	r2, #10
 800efa8:	4648      	mov	r0, r9
 800efaa:	f000 fc85 	bl	800f8b8 <__multadd>
 800efae:	4605      	mov	r5, r0
 800efb0:	e7f0      	b.n	800ef94 <_dtoa_r+0xad4>
 800efb2:	f1bb 0f00 	cmp.w	fp, #0
 800efb6:	bfcc      	ite	gt
 800efb8:	465e      	movgt	r6, fp
 800efba:	2601      	movle	r6, #1
 800efbc:	4456      	add	r6, sl
 800efbe:	2700      	movs	r7, #0
 800efc0:	9902      	ldr	r1, [sp, #8]
 800efc2:	9300      	str	r3, [sp, #0]
 800efc4:	2201      	movs	r2, #1
 800efc6:	4648      	mov	r0, r9
 800efc8:	f000 fe64 	bl	800fc94 <__lshift>
 800efcc:	4621      	mov	r1, r4
 800efce:	9002      	str	r0, [sp, #8]
 800efd0:	f000 fecc 	bl	800fd6c <__mcmp>
 800efd4:	2800      	cmp	r0, #0
 800efd6:	dcb4      	bgt.n	800ef42 <_dtoa_r+0xa82>
 800efd8:	d102      	bne.n	800efe0 <_dtoa_r+0xb20>
 800efda:	9b00      	ldr	r3, [sp, #0]
 800efdc:	07db      	lsls	r3, r3, #31
 800efde:	d4b0      	bmi.n	800ef42 <_dtoa_r+0xa82>
 800efe0:	4633      	mov	r3, r6
 800efe2:	461e      	mov	r6, r3
 800efe4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800efe8:	2a30      	cmp	r2, #48	@ 0x30
 800efea:	d0fa      	beq.n	800efe2 <_dtoa_r+0xb22>
 800efec:	e4b5      	b.n	800e95a <_dtoa_r+0x49a>
 800efee:	459a      	cmp	sl, r3
 800eff0:	d1a8      	bne.n	800ef44 <_dtoa_r+0xa84>
 800eff2:	2331      	movs	r3, #49	@ 0x31
 800eff4:	f108 0801 	add.w	r8, r8, #1
 800eff8:	f88a 3000 	strb.w	r3, [sl]
 800effc:	e4ad      	b.n	800e95a <_dtoa_r+0x49a>
 800effe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f000:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800f05c <_dtoa_r+0xb9c>
 800f004:	b11b      	cbz	r3, 800f00e <_dtoa_r+0xb4e>
 800f006:	f10a 0308 	add.w	r3, sl, #8
 800f00a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f00c:	6013      	str	r3, [r2, #0]
 800f00e:	4650      	mov	r0, sl
 800f010:	b017      	add	sp, #92	@ 0x5c
 800f012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f016:	9b07      	ldr	r3, [sp, #28]
 800f018:	2b01      	cmp	r3, #1
 800f01a:	f77f ae2e 	ble.w	800ec7a <_dtoa_r+0x7ba>
 800f01e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f020:	9308      	str	r3, [sp, #32]
 800f022:	2001      	movs	r0, #1
 800f024:	e64d      	b.n	800ecc2 <_dtoa_r+0x802>
 800f026:	f1bb 0f00 	cmp.w	fp, #0
 800f02a:	f77f aed9 	ble.w	800ede0 <_dtoa_r+0x920>
 800f02e:	4656      	mov	r6, sl
 800f030:	9802      	ldr	r0, [sp, #8]
 800f032:	4621      	mov	r1, r4
 800f034:	f7ff f9b9 	bl	800e3aa <quorem>
 800f038:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800f03c:	f806 3b01 	strb.w	r3, [r6], #1
 800f040:	eba6 020a 	sub.w	r2, r6, sl
 800f044:	4593      	cmp	fp, r2
 800f046:	ddb4      	ble.n	800efb2 <_dtoa_r+0xaf2>
 800f048:	9902      	ldr	r1, [sp, #8]
 800f04a:	2300      	movs	r3, #0
 800f04c:	220a      	movs	r2, #10
 800f04e:	4648      	mov	r0, r9
 800f050:	f000 fc32 	bl	800f8b8 <__multadd>
 800f054:	9002      	str	r0, [sp, #8]
 800f056:	e7eb      	b.n	800f030 <_dtoa_r+0xb70>
 800f058:	08010fcb 	.word	0x08010fcb
 800f05c:	08010f4f 	.word	0x08010f4f

0800f060 <_free_r>:
 800f060:	b538      	push	{r3, r4, r5, lr}
 800f062:	4605      	mov	r5, r0
 800f064:	2900      	cmp	r1, #0
 800f066:	d041      	beq.n	800f0ec <_free_r+0x8c>
 800f068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f06c:	1f0c      	subs	r4, r1, #4
 800f06e:	2b00      	cmp	r3, #0
 800f070:	bfb8      	it	lt
 800f072:	18e4      	addlt	r4, r4, r3
 800f074:	f7f2 ff26 	bl	8001ec4 <__malloc_lock>
 800f078:	4a1d      	ldr	r2, [pc, #116]	@ (800f0f0 <_free_r+0x90>)
 800f07a:	6813      	ldr	r3, [r2, #0]
 800f07c:	b933      	cbnz	r3, 800f08c <_free_r+0x2c>
 800f07e:	6063      	str	r3, [r4, #4]
 800f080:	6014      	str	r4, [r2, #0]
 800f082:	4628      	mov	r0, r5
 800f084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f088:	f7f2 bf56 	b.w	8001f38 <__malloc_unlock>
 800f08c:	42a3      	cmp	r3, r4
 800f08e:	d908      	bls.n	800f0a2 <_free_r+0x42>
 800f090:	6820      	ldr	r0, [r4, #0]
 800f092:	1821      	adds	r1, r4, r0
 800f094:	428b      	cmp	r3, r1
 800f096:	bf01      	itttt	eq
 800f098:	6819      	ldreq	r1, [r3, #0]
 800f09a:	685b      	ldreq	r3, [r3, #4]
 800f09c:	1809      	addeq	r1, r1, r0
 800f09e:	6021      	streq	r1, [r4, #0]
 800f0a0:	e7ed      	b.n	800f07e <_free_r+0x1e>
 800f0a2:	461a      	mov	r2, r3
 800f0a4:	685b      	ldr	r3, [r3, #4]
 800f0a6:	b10b      	cbz	r3, 800f0ac <_free_r+0x4c>
 800f0a8:	42a3      	cmp	r3, r4
 800f0aa:	d9fa      	bls.n	800f0a2 <_free_r+0x42>
 800f0ac:	6811      	ldr	r1, [r2, #0]
 800f0ae:	1850      	adds	r0, r2, r1
 800f0b0:	42a0      	cmp	r0, r4
 800f0b2:	d10b      	bne.n	800f0cc <_free_r+0x6c>
 800f0b4:	6820      	ldr	r0, [r4, #0]
 800f0b6:	4401      	add	r1, r0
 800f0b8:	1850      	adds	r0, r2, r1
 800f0ba:	4283      	cmp	r3, r0
 800f0bc:	6011      	str	r1, [r2, #0]
 800f0be:	d1e0      	bne.n	800f082 <_free_r+0x22>
 800f0c0:	6818      	ldr	r0, [r3, #0]
 800f0c2:	685b      	ldr	r3, [r3, #4]
 800f0c4:	6053      	str	r3, [r2, #4]
 800f0c6:	4408      	add	r0, r1
 800f0c8:	6010      	str	r0, [r2, #0]
 800f0ca:	e7da      	b.n	800f082 <_free_r+0x22>
 800f0cc:	d902      	bls.n	800f0d4 <_free_r+0x74>
 800f0ce:	230c      	movs	r3, #12
 800f0d0:	602b      	str	r3, [r5, #0]
 800f0d2:	e7d6      	b.n	800f082 <_free_r+0x22>
 800f0d4:	6820      	ldr	r0, [r4, #0]
 800f0d6:	1821      	adds	r1, r4, r0
 800f0d8:	428b      	cmp	r3, r1
 800f0da:	bf04      	itt	eq
 800f0dc:	6819      	ldreq	r1, [r3, #0]
 800f0de:	685b      	ldreq	r3, [r3, #4]
 800f0e0:	6063      	str	r3, [r4, #4]
 800f0e2:	bf04      	itt	eq
 800f0e4:	1809      	addeq	r1, r1, r0
 800f0e6:	6021      	streq	r1, [r4, #0]
 800f0e8:	6054      	str	r4, [r2, #4]
 800f0ea:	e7ca      	b.n	800f082 <_free_r+0x22>
 800f0ec:	bd38      	pop	{r3, r4, r5, pc}
 800f0ee:	bf00      	nop
 800f0f0:	2000058c 	.word	0x2000058c

0800f0f4 <rshift>:
 800f0f4:	6903      	ldr	r3, [r0, #16]
 800f0f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f0fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f0fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f102:	f100 0414 	add.w	r4, r0, #20
 800f106:	dd45      	ble.n	800f194 <rshift+0xa0>
 800f108:	f011 011f 	ands.w	r1, r1, #31
 800f10c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f110:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f114:	d10c      	bne.n	800f130 <rshift+0x3c>
 800f116:	f100 0710 	add.w	r7, r0, #16
 800f11a:	4629      	mov	r1, r5
 800f11c:	42b1      	cmp	r1, r6
 800f11e:	d334      	bcc.n	800f18a <rshift+0x96>
 800f120:	1a9b      	subs	r3, r3, r2
 800f122:	009b      	lsls	r3, r3, #2
 800f124:	1eea      	subs	r2, r5, #3
 800f126:	4296      	cmp	r6, r2
 800f128:	bf38      	it	cc
 800f12a:	2300      	movcc	r3, #0
 800f12c:	4423      	add	r3, r4
 800f12e:	e015      	b.n	800f15c <rshift+0x68>
 800f130:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f134:	f1c1 0820 	rsb	r8, r1, #32
 800f138:	40cf      	lsrs	r7, r1
 800f13a:	f105 0e04 	add.w	lr, r5, #4
 800f13e:	46a1      	mov	r9, r4
 800f140:	4576      	cmp	r6, lr
 800f142:	46f4      	mov	ip, lr
 800f144:	d815      	bhi.n	800f172 <rshift+0x7e>
 800f146:	1a9a      	subs	r2, r3, r2
 800f148:	0092      	lsls	r2, r2, #2
 800f14a:	3a04      	subs	r2, #4
 800f14c:	3501      	adds	r5, #1
 800f14e:	42ae      	cmp	r6, r5
 800f150:	bf38      	it	cc
 800f152:	2200      	movcc	r2, #0
 800f154:	18a3      	adds	r3, r4, r2
 800f156:	50a7      	str	r7, [r4, r2]
 800f158:	b107      	cbz	r7, 800f15c <rshift+0x68>
 800f15a:	3304      	adds	r3, #4
 800f15c:	1b1a      	subs	r2, r3, r4
 800f15e:	42a3      	cmp	r3, r4
 800f160:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f164:	bf08      	it	eq
 800f166:	2300      	moveq	r3, #0
 800f168:	6102      	str	r2, [r0, #16]
 800f16a:	bf08      	it	eq
 800f16c:	6143      	streq	r3, [r0, #20]
 800f16e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f172:	f8dc c000 	ldr.w	ip, [ip]
 800f176:	fa0c fc08 	lsl.w	ip, ip, r8
 800f17a:	ea4c 0707 	orr.w	r7, ip, r7
 800f17e:	f849 7b04 	str.w	r7, [r9], #4
 800f182:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f186:	40cf      	lsrs	r7, r1
 800f188:	e7da      	b.n	800f140 <rshift+0x4c>
 800f18a:	f851 cb04 	ldr.w	ip, [r1], #4
 800f18e:	f847 cf04 	str.w	ip, [r7, #4]!
 800f192:	e7c3      	b.n	800f11c <rshift+0x28>
 800f194:	4623      	mov	r3, r4
 800f196:	e7e1      	b.n	800f15c <rshift+0x68>

0800f198 <__hexdig_fun>:
 800f198:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f19c:	2b09      	cmp	r3, #9
 800f19e:	d802      	bhi.n	800f1a6 <__hexdig_fun+0xe>
 800f1a0:	3820      	subs	r0, #32
 800f1a2:	b2c0      	uxtb	r0, r0
 800f1a4:	4770      	bx	lr
 800f1a6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f1aa:	2b05      	cmp	r3, #5
 800f1ac:	d801      	bhi.n	800f1b2 <__hexdig_fun+0x1a>
 800f1ae:	3847      	subs	r0, #71	@ 0x47
 800f1b0:	e7f7      	b.n	800f1a2 <__hexdig_fun+0xa>
 800f1b2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f1b6:	2b05      	cmp	r3, #5
 800f1b8:	d801      	bhi.n	800f1be <__hexdig_fun+0x26>
 800f1ba:	3827      	subs	r0, #39	@ 0x27
 800f1bc:	e7f1      	b.n	800f1a2 <__hexdig_fun+0xa>
 800f1be:	2000      	movs	r0, #0
 800f1c0:	4770      	bx	lr
	...

0800f1c4 <__gethex>:
 800f1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1c8:	b085      	sub	sp, #20
 800f1ca:	468a      	mov	sl, r1
 800f1cc:	9302      	str	r3, [sp, #8]
 800f1ce:	680b      	ldr	r3, [r1, #0]
 800f1d0:	9001      	str	r0, [sp, #4]
 800f1d2:	4690      	mov	r8, r2
 800f1d4:	1c9c      	adds	r4, r3, #2
 800f1d6:	46a1      	mov	r9, r4
 800f1d8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f1dc:	2830      	cmp	r0, #48	@ 0x30
 800f1de:	d0fa      	beq.n	800f1d6 <__gethex+0x12>
 800f1e0:	eba9 0303 	sub.w	r3, r9, r3
 800f1e4:	f1a3 0b02 	sub.w	fp, r3, #2
 800f1e8:	f7ff ffd6 	bl	800f198 <__hexdig_fun>
 800f1ec:	4605      	mov	r5, r0
 800f1ee:	2800      	cmp	r0, #0
 800f1f0:	d168      	bne.n	800f2c4 <__gethex+0x100>
 800f1f2:	49a0      	ldr	r1, [pc, #640]	@ (800f474 <__gethex+0x2b0>)
 800f1f4:	2201      	movs	r2, #1
 800f1f6:	4648      	mov	r0, r9
 800f1f8:	f7fe ffca 	bl	800e190 <strncmp>
 800f1fc:	4607      	mov	r7, r0
 800f1fe:	2800      	cmp	r0, #0
 800f200:	d167      	bne.n	800f2d2 <__gethex+0x10e>
 800f202:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f206:	4626      	mov	r6, r4
 800f208:	f7ff ffc6 	bl	800f198 <__hexdig_fun>
 800f20c:	2800      	cmp	r0, #0
 800f20e:	d062      	beq.n	800f2d6 <__gethex+0x112>
 800f210:	4623      	mov	r3, r4
 800f212:	7818      	ldrb	r0, [r3, #0]
 800f214:	2830      	cmp	r0, #48	@ 0x30
 800f216:	4699      	mov	r9, r3
 800f218:	f103 0301 	add.w	r3, r3, #1
 800f21c:	d0f9      	beq.n	800f212 <__gethex+0x4e>
 800f21e:	f7ff ffbb 	bl	800f198 <__hexdig_fun>
 800f222:	fab0 f580 	clz	r5, r0
 800f226:	096d      	lsrs	r5, r5, #5
 800f228:	f04f 0b01 	mov.w	fp, #1
 800f22c:	464a      	mov	r2, r9
 800f22e:	4616      	mov	r6, r2
 800f230:	3201      	adds	r2, #1
 800f232:	7830      	ldrb	r0, [r6, #0]
 800f234:	f7ff ffb0 	bl	800f198 <__hexdig_fun>
 800f238:	2800      	cmp	r0, #0
 800f23a:	d1f8      	bne.n	800f22e <__gethex+0x6a>
 800f23c:	498d      	ldr	r1, [pc, #564]	@ (800f474 <__gethex+0x2b0>)
 800f23e:	2201      	movs	r2, #1
 800f240:	4630      	mov	r0, r6
 800f242:	f7fe ffa5 	bl	800e190 <strncmp>
 800f246:	2800      	cmp	r0, #0
 800f248:	d13f      	bne.n	800f2ca <__gethex+0x106>
 800f24a:	b944      	cbnz	r4, 800f25e <__gethex+0x9a>
 800f24c:	1c74      	adds	r4, r6, #1
 800f24e:	4622      	mov	r2, r4
 800f250:	4616      	mov	r6, r2
 800f252:	3201      	adds	r2, #1
 800f254:	7830      	ldrb	r0, [r6, #0]
 800f256:	f7ff ff9f 	bl	800f198 <__hexdig_fun>
 800f25a:	2800      	cmp	r0, #0
 800f25c:	d1f8      	bne.n	800f250 <__gethex+0x8c>
 800f25e:	1ba4      	subs	r4, r4, r6
 800f260:	00a7      	lsls	r7, r4, #2
 800f262:	7833      	ldrb	r3, [r6, #0]
 800f264:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f268:	2b50      	cmp	r3, #80	@ 0x50
 800f26a:	d13e      	bne.n	800f2ea <__gethex+0x126>
 800f26c:	7873      	ldrb	r3, [r6, #1]
 800f26e:	2b2b      	cmp	r3, #43	@ 0x2b
 800f270:	d033      	beq.n	800f2da <__gethex+0x116>
 800f272:	2b2d      	cmp	r3, #45	@ 0x2d
 800f274:	d034      	beq.n	800f2e0 <__gethex+0x11c>
 800f276:	1c71      	adds	r1, r6, #1
 800f278:	2400      	movs	r4, #0
 800f27a:	7808      	ldrb	r0, [r1, #0]
 800f27c:	f7ff ff8c 	bl	800f198 <__hexdig_fun>
 800f280:	1e43      	subs	r3, r0, #1
 800f282:	b2db      	uxtb	r3, r3
 800f284:	2b18      	cmp	r3, #24
 800f286:	d830      	bhi.n	800f2ea <__gethex+0x126>
 800f288:	f1a0 0210 	sub.w	r2, r0, #16
 800f28c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f290:	f7ff ff82 	bl	800f198 <__hexdig_fun>
 800f294:	f100 3cff 	add.w	ip, r0, #4294967295
 800f298:	fa5f fc8c 	uxtb.w	ip, ip
 800f29c:	f1bc 0f18 	cmp.w	ip, #24
 800f2a0:	f04f 030a 	mov.w	r3, #10
 800f2a4:	d91e      	bls.n	800f2e4 <__gethex+0x120>
 800f2a6:	b104      	cbz	r4, 800f2aa <__gethex+0xe6>
 800f2a8:	4252      	negs	r2, r2
 800f2aa:	4417      	add	r7, r2
 800f2ac:	f8ca 1000 	str.w	r1, [sl]
 800f2b0:	b1ed      	cbz	r5, 800f2ee <__gethex+0x12a>
 800f2b2:	f1bb 0f00 	cmp.w	fp, #0
 800f2b6:	bf0c      	ite	eq
 800f2b8:	2506      	moveq	r5, #6
 800f2ba:	2500      	movne	r5, #0
 800f2bc:	4628      	mov	r0, r5
 800f2be:	b005      	add	sp, #20
 800f2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2c4:	2500      	movs	r5, #0
 800f2c6:	462c      	mov	r4, r5
 800f2c8:	e7b0      	b.n	800f22c <__gethex+0x68>
 800f2ca:	2c00      	cmp	r4, #0
 800f2cc:	d1c7      	bne.n	800f25e <__gethex+0x9a>
 800f2ce:	4627      	mov	r7, r4
 800f2d0:	e7c7      	b.n	800f262 <__gethex+0x9e>
 800f2d2:	464e      	mov	r6, r9
 800f2d4:	462f      	mov	r7, r5
 800f2d6:	2501      	movs	r5, #1
 800f2d8:	e7c3      	b.n	800f262 <__gethex+0x9e>
 800f2da:	2400      	movs	r4, #0
 800f2dc:	1cb1      	adds	r1, r6, #2
 800f2de:	e7cc      	b.n	800f27a <__gethex+0xb6>
 800f2e0:	2401      	movs	r4, #1
 800f2e2:	e7fb      	b.n	800f2dc <__gethex+0x118>
 800f2e4:	fb03 0002 	mla	r0, r3, r2, r0
 800f2e8:	e7ce      	b.n	800f288 <__gethex+0xc4>
 800f2ea:	4631      	mov	r1, r6
 800f2ec:	e7de      	b.n	800f2ac <__gethex+0xe8>
 800f2ee:	eba6 0309 	sub.w	r3, r6, r9
 800f2f2:	3b01      	subs	r3, #1
 800f2f4:	4629      	mov	r1, r5
 800f2f6:	2b07      	cmp	r3, #7
 800f2f8:	dc0a      	bgt.n	800f310 <__gethex+0x14c>
 800f2fa:	9801      	ldr	r0, [sp, #4]
 800f2fc:	f000 fa7a 	bl	800f7f4 <_Balloc>
 800f300:	4604      	mov	r4, r0
 800f302:	b940      	cbnz	r0, 800f316 <__gethex+0x152>
 800f304:	4b5c      	ldr	r3, [pc, #368]	@ (800f478 <__gethex+0x2b4>)
 800f306:	4602      	mov	r2, r0
 800f308:	21e4      	movs	r1, #228	@ 0xe4
 800f30a:	485c      	ldr	r0, [pc, #368]	@ (800f47c <__gethex+0x2b8>)
 800f30c:	f7fc fe78 	bl	800c000 <__assert_func>
 800f310:	3101      	adds	r1, #1
 800f312:	105b      	asrs	r3, r3, #1
 800f314:	e7ef      	b.n	800f2f6 <__gethex+0x132>
 800f316:	f100 0a14 	add.w	sl, r0, #20
 800f31a:	2300      	movs	r3, #0
 800f31c:	4655      	mov	r5, sl
 800f31e:	469b      	mov	fp, r3
 800f320:	45b1      	cmp	r9, r6
 800f322:	d337      	bcc.n	800f394 <__gethex+0x1d0>
 800f324:	f845 bb04 	str.w	fp, [r5], #4
 800f328:	eba5 050a 	sub.w	r5, r5, sl
 800f32c:	10ad      	asrs	r5, r5, #2
 800f32e:	6125      	str	r5, [r4, #16]
 800f330:	4658      	mov	r0, fp
 800f332:	f000 fb51 	bl	800f9d8 <__hi0bits>
 800f336:	016d      	lsls	r5, r5, #5
 800f338:	f8d8 6000 	ldr.w	r6, [r8]
 800f33c:	1a2d      	subs	r5, r5, r0
 800f33e:	42b5      	cmp	r5, r6
 800f340:	dd54      	ble.n	800f3ec <__gethex+0x228>
 800f342:	1bad      	subs	r5, r5, r6
 800f344:	4629      	mov	r1, r5
 800f346:	4620      	mov	r0, r4
 800f348:	f000 fedd 	bl	8010106 <__any_on>
 800f34c:	4681      	mov	r9, r0
 800f34e:	b178      	cbz	r0, 800f370 <__gethex+0x1ac>
 800f350:	1e6b      	subs	r3, r5, #1
 800f352:	1159      	asrs	r1, r3, #5
 800f354:	f003 021f 	and.w	r2, r3, #31
 800f358:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f35c:	f04f 0901 	mov.w	r9, #1
 800f360:	fa09 f202 	lsl.w	r2, r9, r2
 800f364:	420a      	tst	r2, r1
 800f366:	d003      	beq.n	800f370 <__gethex+0x1ac>
 800f368:	454b      	cmp	r3, r9
 800f36a:	dc36      	bgt.n	800f3da <__gethex+0x216>
 800f36c:	f04f 0902 	mov.w	r9, #2
 800f370:	4629      	mov	r1, r5
 800f372:	4620      	mov	r0, r4
 800f374:	f7ff febe 	bl	800f0f4 <rshift>
 800f378:	442f      	add	r7, r5
 800f37a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f37e:	42bb      	cmp	r3, r7
 800f380:	da42      	bge.n	800f408 <__gethex+0x244>
 800f382:	9801      	ldr	r0, [sp, #4]
 800f384:	4621      	mov	r1, r4
 800f386:	f000 fa75 	bl	800f874 <_Bfree>
 800f38a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f38c:	2300      	movs	r3, #0
 800f38e:	6013      	str	r3, [r2, #0]
 800f390:	25a3      	movs	r5, #163	@ 0xa3
 800f392:	e793      	b.n	800f2bc <__gethex+0xf8>
 800f394:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f398:	2a2e      	cmp	r2, #46	@ 0x2e
 800f39a:	d012      	beq.n	800f3c2 <__gethex+0x1fe>
 800f39c:	2b20      	cmp	r3, #32
 800f39e:	d104      	bne.n	800f3aa <__gethex+0x1e6>
 800f3a0:	f845 bb04 	str.w	fp, [r5], #4
 800f3a4:	f04f 0b00 	mov.w	fp, #0
 800f3a8:	465b      	mov	r3, fp
 800f3aa:	7830      	ldrb	r0, [r6, #0]
 800f3ac:	9303      	str	r3, [sp, #12]
 800f3ae:	f7ff fef3 	bl	800f198 <__hexdig_fun>
 800f3b2:	9b03      	ldr	r3, [sp, #12]
 800f3b4:	f000 000f 	and.w	r0, r0, #15
 800f3b8:	4098      	lsls	r0, r3
 800f3ba:	ea4b 0b00 	orr.w	fp, fp, r0
 800f3be:	3304      	adds	r3, #4
 800f3c0:	e7ae      	b.n	800f320 <__gethex+0x15c>
 800f3c2:	45b1      	cmp	r9, r6
 800f3c4:	d8ea      	bhi.n	800f39c <__gethex+0x1d8>
 800f3c6:	492b      	ldr	r1, [pc, #172]	@ (800f474 <__gethex+0x2b0>)
 800f3c8:	9303      	str	r3, [sp, #12]
 800f3ca:	2201      	movs	r2, #1
 800f3cc:	4630      	mov	r0, r6
 800f3ce:	f7fe fedf 	bl	800e190 <strncmp>
 800f3d2:	9b03      	ldr	r3, [sp, #12]
 800f3d4:	2800      	cmp	r0, #0
 800f3d6:	d1e1      	bne.n	800f39c <__gethex+0x1d8>
 800f3d8:	e7a2      	b.n	800f320 <__gethex+0x15c>
 800f3da:	1ea9      	subs	r1, r5, #2
 800f3dc:	4620      	mov	r0, r4
 800f3de:	f000 fe92 	bl	8010106 <__any_on>
 800f3e2:	2800      	cmp	r0, #0
 800f3e4:	d0c2      	beq.n	800f36c <__gethex+0x1a8>
 800f3e6:	f04f 0903 	mov.w	r9, #3
 800f3ea:	e7c1      	b.n	800f370 <__gethex+0x1ac>
 800f3ec:	da09      	bge.n	800f402 <__gethex+0x23e>
 800f3ee:	1b75      	subs	r5, r6, r5
 800f3f0:	4621      	mov	r1, r4
 800f3f2:	9801      	ldr	r0, [sp, #4]
 800f3f4:	462a      	mov	r2, r5
 800f3f6:	f000 fc4d 	bl	800fc94 <__lshift>
 800f3fa:	1b7f      	subs	r7, r7, r5
 800f3fc:	4604      	mov	r4, r0
 800f3fe:	f100 0a14 	add.w	sl, r0, #20
 800f402:	f04f 0900 	mov.w	r9, #0
 800f406:	e7b8      	b.n	800f37a <__gethex+0x1b6>
 800f408:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f40c:	42bd      	cmp	r5, r7
 800f40e:	dd6f      	ble.n	800f4f0 <__gethex+0x32c>
 800f410:	1bed      	subs	r5, r5, r7
 800f412:	42ae      	cmp	r6, r5
 800f414:	dc34      	bgt.n	800f480 <__gethex+0x2bc>
 800f416:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f41a:	2b02      	cmp	r3, #2
 800f41c:	d022      	beq.n	800f464 <__gethex+0x2a0>
 800f41e:	2b03      	cmp	r3, #3
 800f420:	d024      	beq.n	800f46c <__gethex+0x2a8>
 800f422:	2b01      	cmp	r3, #1
 800f424:	d115      	bne.n	800f452 <__gethex+0x28e>
 800f426:	42ae      	cmp	r6, r5
 800f428:	d113      	bne.n	800f452 <__gethex+0x28e>
 800f42a:	2e01      	cmp	r6, #1
 800f42c:	d10b      	bne.n	800f446 <__gethex+0x282>
 800f42e:	9a02      	ldr	r2, [sp, #8]
 800f430:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f434:	6013      	str	r3, [r2, #0]
 800f436:	2301      	movs	r3, #1
 800f438:	6123      	str	r3, [r4, #16]
 800f43a:	f8ca 3000 	str.w	r3, [sl]
 800f43e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f440:	2562      	movs	r5, #98	@ 0x62
 800f442:	601c      	str	r4, [r3, #0]
 800f444:	e73a      	b.n	800f2bc <__gethex+0xf8>
 800f446:	1e71      	subs	r1, r6, #1
 800f448:	4620      	mov	r0, r4
 800f44a:	f000 fe5c 	bl	8010106 <__any_on>
 800f44e:	2800      	cmp	r0, #0
 800f450:	d1ed      	bne.n	800f42e <__gethex+0x26a>
 800f452:	9801      	ldr	r0, [sp, #4]
 800f454:	4621      	mov	r1, r4
 800f456:	f000 fa0d 	bl	800f874 <_Bfree>
 800f45a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f45c:	2300      	movs	r3, #0
 800f45e:	6013      	str	r3, [r2, #0]
 800f460:	2550      	movs	r5, #80	@ 0x50
 800f462:	e72b      	b.n	800f2bc <__gethex+0xf8>
 800f464:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f466:	2b00      	cmp	r3, #0
 800f468:	d1f3      	bne.n	800f452 <__gethex+0x28e>
 800f46a:	e7e0      	b.n	800f42e <__gethex+0x26a>
 800f46c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d1dd      	bne.n	800f42e <__gethex+0x26a>
 800f472:	e7ee      	b.n	800f452 <__gethex+0x28e>
 800f474:	08010f0c 	.word	0x08010f0c
 800f478:	08010fcb 	.word	0x08010fcb
 800f47c:	08010fdc 	.word	0x08010fdc
 800f480:	1e6f      	subs	r7, r5, #1
 800f482:	f1b9 0f00 	cmp.w	r9, #0
 800f486:	d130      	bne.n	800f4ea <__gethex+0x326>
 800f488:	b127      	cbz	r7, 800f494 <__gethex+0x2d0>
 800f48a:	4639      	mov	r1, r7
 800f48c:	4620      	mov	r0, r4
 800f48e:	f000 fe3a 	bl	8010106 <__any_on>
 800f492:	4681      	mov	r9, r0
 800f494:	117a      	asrs	r2, r7, #5
 800f496:	2301      	movs	r3, #1
 800f498:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f49c:	f007 071f 	and.w	r7, r7, #31
 800f4a0:	40bb      	lsls	r3, r7
 800f4a2:	4213      	tst	r3, r2
 800f4a4:	4629      	mov	r1, r5
 800f4a6:	4620      	mov	r0, r4
 800f4a8:	bf18      	it	ne
 800f4aa:	f049 0902 	orrne.w	r9, r9, #2
 800f4ae:	f7ff fe21 	bl	800f0f4 <rshift>
 800f4b2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f4b6:	1b76      	subs	r6, r6, r5
 800f4b8:	2502      	movs	r5, #2
 800f4ba:	f1b9 0f00 	cmp.w	r9, #0
 800f4be:	d047      	beq.n	800f550 <__gethex+0x38c>
 800f4c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f4c4:	2b02      	cmp	r3, #2
 800f4c6:	d015      	beq.n	800f4f4 <__gethex+0x330>
 800f4c8:	2b03      	cmp	r3, #3
 800f4ca:	d017      	beq.n	800f4fc <__gethex+0x338>
 800f4cc:	2b01      	cmp	r3, #1
 800f4ce:	d109      	bne.n	800f4e4 <__gethex+0x320>
 800f4d0:	f019 0f02 	tst.w	r9, #2
 800f4d4:	d006      	beq.n	800f4e4 <__gethex+0x320>
 800f4d6:	f8da 3000 	ldr.w	r3, [sl]
 800f4da:	ea49 0903 	orr.w	r9, r9, r3
 800f4de:	f019 0f01 	tst.w	r9, #1
 800f4e2:	d10e      	bne.n	800f502 <__gethex+0x33e>
 800f4e4:	f045 0510 	orr.w	r5, r5, #16
 800f4e8:	e032      	b.n	800f550 <__gethex+0x38c>
 800f4ea:	f04f 0901 	mov.w	r9, #1
 800f4ee:	e7d1      	b.n	800f494 <__gethex+0x2d0>
 800f4f0:	2501      	movs	r5, #1
 800f4f2:	e7e2      	b.n	800f4ba <__gethex+0x2f6>
 800f4f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4f6:	f1c3 0301 	rsb	r3, r3, #1
 800f4fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f4fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d0f0      	beq.n	800f4e4 <__gethex+0x320>
 800f502:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f506:	f104 0314 	add.w	r3, r4, #20
 800f50a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f50e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f512:	f04f 0c00 	mov.w	ip, #0
 800f516:	4618      	mov	r0, r3
 800f518:	f853 2b04 	ldr.w	r2, [r3], #4
 800f51c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f520:	d01b      	beq.n	800f55a <__gethex+0x396>
 800f522:	3201      	adds	r2, #1
 800f524:	6002      	str	r2, [r0, #0]
 800f526:	2d02      	cmp	r5, #2
 800f528:	f104 0314 	add.w	r3, r4, #20
 800f52c:	d13c      	bne.n	800f5a8 <__gethex+0x3e4>
 800f52e:	f8d8 2000 	ldr.w	r2, [r8]
 800f532:	3a01      	subs	r2, #1
 800f534:	42b2      	cmp	r2, r6
 800f536:	d109      	bne.n	800f54c <__gethex+0x388>
 800f538:	1171      	asrs	r1, r6, #5
 800f53a:	2201      	movs	r2, #1
 800f53c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f540:	f006 061f 	and.w	r6, r6, #31
 800f544:	fa02 f606 	lsl.w	r6, r2, r6
 800f548:	421e      	tst	r6, r3
 800f54a:	d13a      	bne.n	800f5c2 <__gethex+0x3fe>
 800f54c:	f045 0520 	orr.w	r5, r5, #32
 800f550:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f552:	601c      	str	r4, [r3, #0]
 800f554:	9b02      	ldr	r3, [sp, #8]
 800f556:	601f      	str	r7, [r3, #0]
 800f558:	e6b0      	b.n	800f2bc <__gethex+0xf8>
 800f55a:	4299      	cmp	r1, r3
 800f55c:	f843 cc04 	str.w	ip, [r3, #-4]
 800f560:	d8d9      	bhi.n	800f516 <__gethex+0x352>
 800f562:	68a3      	ldr	r3, [r4, #8]
 800f564:	459b      	cmp	fp, r3
 800f566:	db17      	blt.n	800f598 <__gethex+0x3d4>
 800f568:	6861      	ldr	r1, [r4, #4]
 800f56a:	9801      	ldr	r0, [sp, #4]
 800f56c:	3101      	adds	r1, #1
 800f56e:	f000 f941 	bl	800f7f4 <_Balloc>
 800f572:	4681      	mov	r9, r0
 800f574:	b918      	cbnz	r0, 800f57e <__gethex+0x3ba>
 800f576:	4b1a      	ldr	r3, [pc, #104]	@ (800f5e0 <__gethex+0x41c>)
 800f578:	4602      	mov	r2, r0
 800f57a:	2184      	movs	r1, #132	@ 0x84
 800f57c:	e6c5      	b.n	800f30a <__gethex+0x146>
 800f57e:	6922      	ldr	r2, [r4, #16]
 800f580:	3202      	adds	r2, #2
 800f582:	f104 010c 	add.w	r1, r4, #12
 800f586:	0092      	lsls	r2, r2, #2
 800f588:	300c      	adds	r0, #12
 800f58a:	f7fe fee8 	bl	800e35e <memcpy>
 800f58e:	4621      	mov	r1, r4
 800f590:	9801      	ldr	r0, [sp, #4]
 800f592:	f000 f96f 	bl	800f874 <_Bfree>
 800f596:	464c      	mov	r4, r9
 800f598:	6923      	ldr	r3, [r4, #16]
 800f59a:	1c5a      	adds	r2, r3, #1
 800f59c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f5a0:	6122      	str	r2, [r4, #16]
 800f5a2:	2201      	movs	r2, #1
 800f5a4:	615a      	str	r2, [r3, #20]
 800f5a6:	e7be      	b.n	800f526 <__gethex+0x362>
 800f5a8:	6922      	ldr	r2, [r4, #16]
 800f5aa:	455a      	cmp	r2, fp
 800f5ac:	dd0b      	ble.n	800f5c6 <__gethex+0x402>
 800f5ae:	2101      	movs	r1, #1
 800f5b0:	4620      	mov	r0, r4
 800f5b2:	f7ff fd9f 	bl	800f0f4 <rshift>
 800f5b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f5ba:	3701      	adds	r7, #1
 800f5bc:	42bb      	cmp	r3, r7
 800f5be:	f6ff aee0 	blt.w	800f382 <__gethex+0x1be>
 800f5c2:	2501      	movs	r5, #1
 800f5c4:	e7c2      	b.n	800f54c <__gethex+0x388>
 800f5c6:	f016 061f 	ands.w	r6, r6, #31
 800f5ca:	d0fa      	beq.n	800f5c2 <__gethex+0x3fe>
 800f5cc:	4453      	add	r3, sl
 800f5ce:	f1c6 0620 	rsb	r6, r6, #32
 800f5d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f5d6:	f000 f9ff 	bl	800f9d8 <__hi0bits>
 800f5da:	42b0      	cmp	r0, r6
 800f5dc:	dbe7      	blt.n	800f5ae <__gethex+0x3ea>
 800f5de:	e7f0      	b.n	800f5c2 <__gethex+0x3fe>
 800f5e0:	08010fcb 	.word	0x08010fcb

0800f5e4 <L_shift>:
 800f5e4:	f1c2 0208 	rsb	r2, r2, #8
 800f5e8:	0092      	lsls	r2, r2, #2
 800f5ea:	b570      	push	{r4, r5, r6, lr}
 800f5ec:	f1c2 0620 	rsb	r6, r2, #32
 800f5f0:	6843      	ldr	r3, [r0, #4]
 800f5f2:	6804      	ldr	r4, [r0, #0]
 800f5f4:	fa03 f506 	lsl.w	r5, r3, r6
 800f5f8:	432c      	orrs	r4, r5
 800f5fa:	40d3      	lsrs	r3, r2
 800f5fc:	6004      	str	r4, [r0, #0]
 800f5fe:	f840 3f04 	str.w	r3, [r0, #4]!
 800f602:	4288      	cmp	r0, r1
 800f604:	d3f4      	bcc.n	800f5f0 <L_shift+0xc>
 800f606:	bd70      	pop	{r4, r5, r6, pc}

0800f608 <__match>:
 800f608:	b530      	push	{r4, r5, lr}
 800f60a:	6803      	ldr	r3, [r0, #0]
 800f60c:	3301      	adds	r3, #1
 800f60e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f612:	b914      	cbnz	r4, 800f61a <__match+0x12>
 800f614:	6003      	str	r3, [r0, #0]
 800f616:	2001      	movs	r0, #1
 800f618:	bd30      	pop	{r4, r5, pc}
 800f61a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f61e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f622:	2d19      	cmp	r5, #25
 800f624:	bf98      	it	ls
 800f626:	3220      	addls	r2, #32
 800f628:	42a2      	cmp	r2, r4
 800f62a:	d0f0      	beq.n	800f60e <__match+0x6>
 800f62c:	2000      	movs	r0, #0
 800f62e:	e7f3      	b.n	800f618 <__match+0x10>

0800f630 <__hexnan>:
 800f630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f634:	680b      	ldr	r3, [r1, #0]
 800f636:	6801      	ldr	r1, [r0, #0]
 800f638:	115e      	asrs	r6, r3, #5
 800f63a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f63e:	f013 031f 	ands.w	r3, r3, #31
 800f642:	b087      	sub	sp, #28
 800f644:	bf18      	it	ne
 800f646:	3604      	addne	r6, #4
 800f648:	2500      	movs	r5, #0
 800f64a:	1f37      	subs	r7, r6, #4
 800f64c:	4682      	mov	sl, r0
 800f64e:	4690      	mov	r8, r2
 800f650:	9301      	str	r3, [sp, #4]
 800f652:	f846 5c04 	str.w	r5, [r6, #-4]
 800f656:	46b9      	mov	r9, r7
 800f658:	463c      	mov	r4, r7
 800f65a:	9502      	str	r5, [sp, #8]
 800f65c:	46ab      	mov	fp, r5
 800f65e:	784a      	ldrb	r2, [r1, #1]
 800f660:	1c4b      	adds	r3, r1, #1
 800f662:	9303      	str	r3, [sp, #12]
 800f664:	b342      	cbz	r2, 800f6b8 <__hexnan+0x88>
 800f666:	4610      	mov	r0, r2
 800f668:	9105      	str	r1, [sp, #20]
 800f66a:	9204      	str	r2, [sp, #16]
 800f66c:	f7ff fd94 	bl	800f198 <__hexdig_fun>
 800f670:	2800      	cmp	r0, #0
 800f672:	d151      	bne.n	800f718 <__hexnan+0xe8>
 800f674:	9a04      	ldr	r2, [sp, #16]
 800f676:	9905      	ldr	r1, [sp, #20]
 800f678:	2a20      	cmp	r2, #32
 800f67a:	d818      	bhi.n	800f6ae <__hexnan+0x7e>
 800f67c:	9b02      	ldr	r3, [sp, #8]
 800f67e:	459b      	cmp	fp, r3
 800f680:	dd13      	ble.n	800f6aa <__hexnan+0x7a>
 800f682:	454c      	cmp	r4, r9
 800f684:	d206      	bcs.n	800f694 <__hexnan+0x64>
 800f686:	2d07      	cmp	r5, #7
 800f688:	dc04      	bgt.n	800f694 <__hexnan+0x64>
 800f68a:	462a      	mov	r2, r5
 800f68c:	4649      	mov	r1, r9
 800f68e:	4620      	mov	r0, r4
 800f690:	f7ff ffa8 	bl	800f5e4 <L_shift>
 800f694:	4544      	cmp	r4, r8
 800f696:	d952      	bls.n	800f73e <__hexnan+0x10e>
 800f698:	2300      	movs	r3, #0
 800f69a:	f1a4 0904 	sub.w	r9, r4, #4
 800f69e:	f844 3c04 	str.w	r3, [r4, #-4]
 800f6a2:	f8cd b008 	str.w	fp, [sp, #8]
 800f6a6:	464c      	mov	r4, r9
 800f6a8:	461d      	mov	r5, r3
 800f6aa:	9903      	ldr	r1, [sp, #12]
 800f6ac:	e7d7      	b.n	800f65e <__hexnan+0x2e>
 800f6ae:	2a29      	cmp	r2, #41	@ 0x29
 800f6b0:	d157      	bne.n	800f762 <__hexnan+0x132>
 800f6b2:	3102      	adds	r1, #2
 800f6b4:	f8ca 1000 	str.w	r1, [sl]
 800f6b8:	f1bb 0f00 	cmp.w	fp, #0
 800f6bc:	d051      	beq.n	800f762 <__hexnan+0x132>
 800f6be:	454c      	cmp	r4, r9
 800f6c0:	d206      	bcs.n	800f6d0 <__hexnan+0xa0>
 800f6c2:	2d07      	cmp	r5, #7
 800f6c4:	dc04      	bgt.n	800f6d0 <__hexnan+0xa0>
 800f6c6:	462a      	mov	r2, r5
 800f6c8:	4649      	mov	r1, r9
 800f6ca:	4620      	mov	r0, r4
 800f6cc:	f7ff ff8a 	bl	800f5e4 <L_shift>
 800f6d0:	4544      	cmp	r4, r8
 800f6d2:	d936      	bls.n	800f742 <__hexnan+0x112>
 800f6d4:	f1a8 0204 	sub.w	r2, r8, #4
 800f6d8:	4623      	mov	r3, r4
 800f6da:	f853 1b04 	ldr.w	r1, [r3], #4
 800f6de:	f842 1f04 	str.w	r1, [r2, #4]!
 800f6e2:	429f      	cmp	r7, r3
 800f6e4:	d2f9      	bcs.n	800f6da <__hexnan+0xaa>
 800f6e6:	1b3b      	subs	r3, r7, r4
 800f6e8:	f023 0303 	bic.w	r3, r3, #3
 800f6ec:	3304      	adds	r3, #4
 800f6ee:	3401      	adds	r4, #1
 800f6f0:	3e03      	subs	r6, #3
 800f6f2:	42b4      	cmp	r4, r6
 800f6f4:	bf88      	it	hi
 800f6f6:	2304      	movhi	r3, #4
 800f6f8:	4443      	add	r3, r8
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	f843 2b04 	str.w	r2, [r3], #4
 800f700:	429f      	cmp	r7, r3
 800f702:	d2fb      	bcs.n	800f6fc <__hexnan+0xcc>
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	b91b      	cbnz	r3, 800f710 <__hexnan+0xe0>
 800f708:	4547      	cmp	r7, r8
 800f70a:	d128      	bne.n	800f75e <__hexnan+0x12e>
 800f70c:	2301      	movs	r3, #1
 800f70e:	603b      	str	r3, [r7, #0]
 800f710:	2005      	movs	r0, #5
 800f712:	b007      	add	sp, #28
 800f714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f718:	3501      	adds	r5, #1
 800f71a:	2d08      	cmp	r5, #8
 800f71c:	f10b 0b01 	add.w	fp, fp, #1
 800f720:	dd06      	ble.n	800f730 <__hexnan+0x100>
 800f722:	4544      	cmp	r4, r8
 800f724:	d9c1      	bls.n	800f6aa <__hexnan+0x7a>
 800f726:	2300      	movs	r3, #0
 800f728:	f844 3c04 	str.w	r3, [r4, #-4]
 800f72c:	2501      	movs	r5, #1
 800f72e:	3c04      	subs	r4, #4
 800f730:	6822      	ldr	r2, [r4, #0]
 800f732:	f000 000f 	and.w	r0, r0, #15
 800f736:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f73a:	6020      	str	r0, [r4, #0]
 800f73c:	e7b5      	b.n	800f6aa <__hexnan+0x7a>
 800f73e:	2508      	movs	r5, #8
 800f740:	e7b3      	b.n	800f6aa <__hexnan+0x7a>
 800f742:	9b01      	ldr	r3, [sp, #4]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d0dd      	beq.n	800f704 <__hexnan+0xd4>
 800f748:	f1c3 0320 	rsb	r3, r3, #32
 800f74c:	f04f 32ff 	mov.w	r2, #4294967295
 800f750:	40da      	lsrs	r2, r3
 800f752:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f756:	4013      	ands	r3, r2
 800f758:	f846 3c04 	str.w	r3, [r6, #-4]
 800f75c:	e7d2      	b.n	800f704 <__hexnan+0xd4>
 800f75e:	3f04      	subs	r7, #4
 800f760:	e7d0      	b.n	800f704 <__hexnan+0xd4>
 800f762:	2004      	movs	r0, #4
 800f764:	e7d5      	b.n	800f712 <__hexnan+0xe2>
	...

0800f768 <_mallinfo_r>:
 800f768:	b570      	push	{r4, r5, r6, lr}
 800f76a:	4c16      	ldr	r4, [pc, #88]	@ (800f7c4 <_mallinfo_r+0x5c>)
 800f76c:	4605      	mov	r5, r0
 800f76e:	4608      	mov	r0, r1
 800f770:	460e      	mov	r6, r1
 800f772:	f7f2 fba7 	bl	8001ec4 <__malloc_lock>
 800f776:	6823      	ldr	r3, [r4, #0]
 800f778:	b14b      	cbz	r3, 800f78e <_mallinfo_r+0x26>
 800f77a:	2100      	movs	r1, #0
 800f77c:	4630      	mov	r0, r6
 800f77e:	f7f2 fb1d 	bl	8001dbc <_sbrk_r>
 800f782:	1c42      	adds	r2, r0, #1
 800f784:	bf18      	it	ne
 800f786:	6822      	ldrne	r2, [r4, #0]
 800f788:	4603      	mov	r3, r0
 800f78a:	bf18      	it	ne
 800f78c:	1a83      	subne	r3, r0, r2
 800f78e:	4a0e      	ldr	r2, [pc, #56]	@ (800f7c8 <_mallinfo_r+0x60>)
 800f790:	6811      	ldr	r1, [r2, #0]
 800f792:	2200      	movs	r2, #0
 800f794:	b991      	cbnz	r1, 800f7bc <_mallinfo_r+0x54>
 800f796:	4c0d      	ldr	r4, [pc, #52]	@ (800f7cc <_mallinfo_r+0x64>)
 800f798:	4630      	mov	r0, r6
 800f79a:	6023      	str	r3, [r4, #0]
 800f79c:	1a9b      	subs	r3, r3, r2
 800f79e:	6222      	str	r2, [r4, #32]
 800f7a0:	61e3      	str	r3, [r4, #28]
 800f7a2:	f7f2 fbc9 	bl	8001f38 <__malloc_unlock>
 800f7a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f7a8:	462e      	mov	r6, r5
 800f7aa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f7ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f7ae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f7b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f7b4:	e886 0003 	stmia.w	r6, {r0, r1}
 800f7b8:	4628      	mov	r0, r5
 800f7ba:	bd70      	pop	{r4, r5, r6, pc}
 800f7bc:	6808      	ldr	r0, [r1, #0]
 800f7be:	6849      	ldr	r1, [r1, #4]
 800f7c0:	4402      	add	r2, r0
 800f7c2:	e7e7      	b.n	800f794 <_mallinfo_r+0x2c>
 800f7c4:	20000588 	.word	0x20000588
 800f7c8:	2000058c 	.word	0x2000058c
 800f7cc:	200006d4 	.word	0x200006d4

0800f7d0 <__ascii_mbtowc>:
 800f7d0:	b082      	sub	sp, #8
 800f7d2:	b901      	cbnz	r1, 800f7d6 <__ascii_mbtowc+0x6>
 800f7d4:	a901      	add	r1, sp, #4
 800f7d6:	b142      	cbz	r2, 800f7ea <__ascii_mbtowc+0x1a>
 800f7d8:	b14b      	cbz	r3, 800f7ee <__ascii_mbtowc+0x1e>
 800f7da:	7813      	ldrb	r3, [r2, #0]
 800f7dc:	600b      	str	r3, [r1, #0]
 800f7de:	7812      	ldrb	r2, [r2, #0]
 800f7e0:	1e10      	subs	r0, r2, #0
 800f7e2:	bf18      	it	ne
 800f7e4:	2001      	movne	r0, #1
 800f7e6:	b002      	add	sp, #8
 800f7e8:	4770      	bx	lr
 800f7ea:	4610      	mov	r0, r2
 800f7ec:	e7fb      	b.n	800f7e6 <__ascii_mbtowc+0x16>
 800f7ee:	f06f 0001 	mvn.w	r0, #1
 800f7f2:	e7f8      	b.n	800f7e6 <__ascii_mbtowc+0x16>

0800f7f4 <_Balloc>:
 800f7f4:	b570      	push	{r4, r5, r6, lr}
 800f7f6:	69c6      	ldr	r6, [r0, #28]
 800f7f8:	4604      	mov	r4, r0
 800f7fa:	460d      	mov	r5, r1
 800f7fc:	b976      	cbnz	r6, 800f81c <_Balloc+0x28>
 800f7fe:	2010      	movs	r0, #16
 800f800:	f7fc fc30 	bl	800c064 <malloc>
 800f804:	4602      	mov	r2, r0
 800f806:	61e0      	str	r0, [r4, #28]
 800f808:	b920      	cbnz	r0, 800f814 <_Balloc+0x20>
 800f80a:	4b18      	ldr	r3, [pc, #96]	@ (800f86c <_Balloc+0x78>)
 800f80c:	4818      	ldr	r0, [pc, #96]	@ (800f870 <_Balloc+0x7c>)
 800f80e:	216b      	movs	r1, #107	@ 0x6b
 800f810:	f7fc fbf6 	bl	800c000 <__assert_func>
 800f814:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f818:	6006      	str	r6, [r0, #0]
 800f81a:	60c6      	str	r6, [r0, #12]
 800f81c:	69e6      	ldr	r6, [r4, #28]
 800f81e:	68f3      	ldr	r3, [r6, #12]
 800f820:	b183      	cbz	r3, 800f844 <_Balloc+0x50>
 800f822:	69e3      	ldr	r3, [r4, #28]
 800f824:	68db      	ldr	r3, [r3, #12]
 800f826:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f82a:	b9b8      	cbnz	r0, 800f85c <_Balloc+0x68>
 800f82c:	2101      	movs	r1, #1
 800f82e:	fa01 f605 	lsl.w	r6, r1, r5
 800f832:	1d72      	adds	r2, r6, #5
 800f834:	0092      	lsls	r2, r2, #2
 800f836:	4620      	mov	r0, r4
 800f838:	f7fc fc00 	bl	800c03c <_calloc_r>
 800f83c:	b160      	cbz	r0, 800f858 <_Balloc+0x64>
 800f83e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f842:	e00e      	b.n	800f862 <_Balloc+0x6e>
 800f844:	2221      	movs	r2, #33	@ 0x21
 800f846:	2104      	movs	r1, #4
 800f848:	4620      	mov	r0, r4
 800f84a:	f7fc fbf7 	bl	800c03c <_calloc_r>
 800f84e:	69e3      	ldr	r3, [r4, #28]
 800f850:	60f0      	str	r0, [r6, #12]
 800f852:	68db      	ldr	r3, [r3, #12]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d1e4      	bne.n	800f822 <_Balloc+0x2e>
 800f858:	2000      	movs	r0, #0
 800f85a:	bd70      	pop	{r4, r5, r6, pc}
 800f85c:	6802      	ldr	r2, [r0, #0]
 800f85e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f862:	2300      	movs	r3, #0
 800f864:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f868:	e7f7      	b.n	800f85a <_Balloc+0x66>
 800f86a:	bf00      	nop
 800f86c:	08010f5c 	.word	0x08010f5c
 800f870:	0801103c 	.word	0x0801103c

0800f874 <_Bfree>:
 800f874:	b570      	push	{r4, r5, r6, lr}
 800f876:	69c6      	ldr	r6, [r0, #28]
 800f878:	4605      	mov	r5, r0
 800f87a:	460c      	mov	r4, r1
 800f87c:	b976      	cbnz	r6, 800f89c <_Bfree+0x28>
 800f87e:	2010      	movs	r0, #16
 800f880:	f7fc fbf0 	bl	800c064 <malloc>
 800f884:	4602      	mov	r2, r0
 800f886:	61e8      	str	r0, [r5, #28]
 800f888:	b920      	cbnz	r0, 800f894 <_Bfree+0x20>
 800f88a:	4b09      	ldr	r3, [pc, #36]	@ (800f8b0 <_Bfree+0x3c>)
 800f88c:	4809      	ldr	r0, [pc, #36]	@ (800f8b4 <_Bfree+0x40>)
 800f88e:	218f      	movs	r1, #143	@ 0x8f
 800f890:	f7fc fbb6 	bl	800c000 <__assert_func>
 800f894:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f898:	6006      	str	r6, [r0, #0]
 800f89a:	60c6      	str	r6, [r0, #12]
 800f89c:	b13c      	cbz	r4, 800f8ae <_Bfree+0x3a>
 800f89e:	69eb      	ldr	r3, [r5, #28]
 800f8a0:	6862      	ldr	r2, [r4, #4]
 800f8a2:	68db      	ldr	r3, [r3, #12]
 800f8a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f8a8:	6021      	str	r1, [r4, #0]
 800f8aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f8ae:	bd70      	pop	{r4, r5, r6, pc}
 800f8b0:	08010f5c 	.word	0x08010f5c
 800f8b4:	0801103c 	.word	0x0801103c

0800f8b8 <__multadd>:
 800f8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8bc:	690d      	ldr	r5, [r1, #16]
 800f8be:	4607      	mov	r7, r0
 800f8c0:	460c      	mov	r4, r1
 800f8c2:	461e      	mov	r6, r3
 800f8c4:	f101 0c14 	add.w	ip, r1, #20
 800f8c8:	2000      	movs	r0, #0
 800f8ca:	f8dc 3000 	ldr.w	r3, [ip]
 800f8ce:	b299      	uxth	r1, r3
 800f8d0:	fb02 6101 	mla	r1, r2, r1, r6
 800f8d4:	0c1e      	lsrs	r6, r3, #16
 800f8d6:	0c0b      	lsrs	r3, r1, #16
 800f8d8:	fb02 3306 	mla	r3, r2, r6, r3
 800f8dc:	b289      	uxth	r1, r1
 800f8de:	3001      	adds	r0, #1
 800f8e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f8e4:	4285      	cmp	r5, r0
 800f8e6:	f84c 1b04 	str.w	r1, [ip], #4
 800f8ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f8ee:	dcec      	bgt.n	800f8ca <__multadd+0x12>
 800f8f0:	b30e      	cbz	r6, 800f936 <__multadd+0x7e>
 800f8f2:	68a3      	ldr	r3, [r4, #8]
 800f8f4:	42ab      	cmp	r3, r5
 800f8f6:	dc19      	bgt.n	800f92c <__multadd+0x74>
 800f8f8:	6861      	ldr	r1, [r4, #4]
 800f8fa:	4638      	mov	r0, r7
 800f8fc:	3101      	adds	r1, #1
 800f8fe:	f7ff ff79 	bl	800f7f4 <_Balloc>
 800f902:	4680      	mov	r8, r0
 800f904:	b928      	cbnz	r0, 800f912 <__multadd+0x5a>
 800f906:	4602      	mov	r2, r0
 800f908:	4b0c      	ldr	r3, [pc, #48]	@ (800f93c <__multadd+0x84>)
 800f90a:	480d      	ldr	r0, [pc, #52]	@ (800f940 <__multadd+0x88>)
 800f90c:	21ba      	movs	r1, #186	@ 0xba
 800f90e:	f7fc fb77 	bl	800c000 <__assert_func>
 800f912:	6922      	ldr	r2, [r4, #16]
 800f914:	3202      	adds	r2, #2
 800f916:	f104 010c 	add.w	r1, r4, #12
 800f91a:	0092      	lsls	r2, r2, #2
 800f91c:	300c      	adds	r0, #12
 800f91e:	f7fe fd1e 	bl	800e35e <memcpy>
 800f922:	4621      	mov	r1, r4
 800f924:	4638      	mov	r0, r7
 800f926:	f7ff ffa5 	bl	800f874 <_Bfree>
 800f92a:	4644      	mov	r4, r8
 800f92c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f930:	3501      	adds	r5, #1
 800f932:	615e      	str	r6, [r3, #20]
 800f934:	6125      	str	r5, [r4, #16]
 800f936:	4620      	mov	r0, r4
 800f938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f93c:	08010fcb 	.word	0x08010fcb
 800f940:	0801103c 	.word	0x0801103c

0800f944 <__s2b>:
 800f944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f948:	460c      	mov	r4, r1
 800f94a:	4615      	mov	r5, r2
 800f94c:	461f      	mov	r7, r3
 800f94e:	2209      	movs	r2, #9
 800f950:	3308      	adds	r3, #8
 800f952:	4606      	mov	r6, r0
 800f954:	fb93 f3f2 	sdiv	r3, r3, r2
 800f958:	2100      	movs	r1, #0
 800f95a:	2201      	movs	r2, #1
 800f95c:	429a      	cmp	r2, r3
 800f95e:	db09      	blt.n	800f974 <__s2b+0x30>
 800f960:	4630      	mov	r0, r6
 800f962:	f7ff ff47 	bl	800f7f4 <_Balloc>
 800f966:	b940      	cbnz	r0, 800f97a <__s2b+0x36>
 800f968:	4602      	mov	r2, r0
 800f96a:	4b19      	ldr	r3, [pc, #100]	@ (800f9d0 <__s2b+0x8c>)
 800f96c:	4819      	ldr	r0, [pc, #100]	@ (800f9d4 <__s2b+0x90>)
 800f96e:	21d3      	movs	r1, #211	@ 0xd3
 800f970:	f7fc fb46 	bl	800c000 <__assert_func>
 800f974:	0052      	lsls	r2, r2, #1
 800f976:	3101      	adds	r1, #1
 800f978:	e7f0      	b.n	800f95c <__s2b+0x18>
 800f97a:	9b08      	ldr	r3, [sp, #32]
 800f97c:	6143      	str	r3, [r0, #20]
 800f97e:	2d09      	cmp	r5, #9
 800f980:	f04f 0301 	mov.w	r3, #1
 800f984:	6103      	str	r3, [r0, #16]
 800f986:	dd16      	ble.n	800f9b6 <__s2b+0x72>
 800f988:	f104 0909 	add.w	r9, r4, #9
 800f98c:	46c8      	mov	r8, r9
 800f98e:	442c      	add	r4, r5
 800f990:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f994:	4601      	mov	r1, r0
 800f996:	3b30      	subs	r3, #48	@ 0x30
 800f998:	220a      	movs	r2, #10
 800f99a:	4630      	mov	r0, r6
 800f99c:	f7ff ff8c 	bl	800f8b8 <__multadd>
 800f9a0:	45a0      	cmp	r8, r4
 800f9a2:	d1f5      	bne.n	800f990 <__s2b+0x4c>
 800f9a4:	f1a5 0408 	sub.w	r4, r5, #8
 800f9a8:	444c      	add	r4, r9
 800f9aa:	1b2d      	subs	r5, r5, r4
 800f9ac:	1963      	adds	r3, r4, r5
 800f9ae:	42bb      	cmp	r3, r7
 800f9b0:	db04      	blt.n	800f9bc <__s2b+0x78>
 800f9b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9b6:	340a      	adds	r4, #10
 800f9b8:	2509      	movs	r5, #9
 800f9ba:	e7f6      	b.n	800f9aa <__s2b+0x66>
 800f9bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f9c0:	4601      	mov	r1, r0
 800f9c2:	3b30      	subs	r3, #48	@ 0x30
 800f9c4:	220a      	movs	r2, #10
 800f9c6:	4630      	mov	r0, r6
 800f9c8:	f7ff ff76 	bl	800f8b8 <__multadd>
 800f9cc:	e7ee      	b.n	800f9ac <__s2b+0x68>
 800f9ce:	bf00      	nop
 800f9d0:	08010fcb 	.word	0x08010fcb
 800f9d4:	0801103c 	.word	0x0801103c

0800f9d8 <__hi0bits>:
 800f9d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f9dc:	4603      	mov	r3, r0
 800f9de:	bf36      	itet	cc
 800f9e0:	0403      	lslcc	r3, r0, #16
 800f9e2:	2000      	movcs	r0, #0
 800f9e4:	2010      	movcc	r0, #16
 800f9e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f9ea:	bf3c      	itt	cc
 800f9ec:	021b      	lslcc	r3, r3, #8
 800f9ee:	3008      	addcc	r0, #8
 800f9f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f9f4:	bf3c      	itt	cc
 800f9f6:	011b      	lslcc	r3, r3, #4
 800f9f8:	3004      	addcc	r0, #4
 800f9fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f9fe:	bf3c      	itt	cc
 800fa00:	009b      	lslcc	r3, r3, #2
 800fa02:	3002      	addcc	r0, #2
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	db05      	blt.n	800fa14 <__hi0bits+0x3c>
 800fa08:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fa0c:	f100 0001 	add.w	r0, r0, #1
 800fa10:	bf08      	it	eq
 800fa12:	2020      	moveq	r0, #32
 800fa14:	4770      	bx	lr

0800fa16 <__lo0bits>:
 800fa16:	6803      	ldr	r3, [r0, #0]
 800fa18:	4602      	mov	r2, r0
 800fa1a:	f013 0007 	ands.w	r0, r3, #7
 800fa1e:	d00b      	beq.n	800fa38 <__lo0bits+0x22>
 800fa20:	07d9      	lsls	r1, r3, #31
 800fa22:	d421      	bmi.n	800fa68 <__lo0bits+0x52>
 800fa24:	0798      	lsls	r0, r3, #30
 800fa26:	bf49      	itett	mi
 800fa28:	085b      	lsrmi	r3, r3, #1
 800fa2a:	089b      	lsrpl	r3, r3, #2
 800fa2c:	2001      	movmi	r0, #1
 800fa2e:	6013      	strmi	r3, [r2, #0]
 800fa30:	bf5c      	itt	pl
 800fa32:	6013      	strpl	r3, [r2, #0]
 800fa34:	2002      	movpl	r0, #2
 800fa36:	4770      	bx	lr
 800fa38:	b299      	uxth	r1, r3
 800fa3a:	b909      	cbnz	r1, 800fa40 <__lo0bits+0x2a>
 800fa3c:	0c1b      	lsrs	r3, r3, #16
 800fa3e:	2010      	movs	r0, #16
 800fa40:	b2d9      	uxtb	r1, r3
 800fa42:	b909      	cbnz	r1, 800fa48 <__lo0bits+0x32>
 800fa44:	3008      	adds	r0, #8
 800fa46:	0a1b      	lsrs	r3, r3, #8
 800fa48:	0719      	lsls	r1, r3, #28
 800fa4a:	bf04      	itt	eq
 800fa4c:	091b      	lsreq	r3, r3, #4
 800fa4e:	3004      	addeq	r0, #4
 800fa50:	0799      	lsls	r1, r3, #30
 800fa52:	bf04      	itt	eq
 800fa54:	089b      	lsreq	r3, r3, #2
 800fa56:	3002      	addeq	r0, #2
 800fa58:	07d9      	lsls	r1, r3, #31
 800fa5a:	d403      	bmi.n	800fa64 <__lo0bits+0x4e>
 800fa5c:	085b      	lsrs	r3, r3, #1
 800fa5e:	f100 0001 	add.w	r0, r0, #1
 800fa62:	d003      	beq.n	800fa6c <__lo0bits+0x56>
 800fa64:	6013      	str	r3, [r2, #0]
 800fa66:	4770      	bx	lr
 800fa68:	2000      	movs	r0, #0
 800fa6a:	4770      	bx	lr
 800fa6c:	2020      	movs	r0, #32
 800fa6e:	4770      	bx	lr

0800fa70 <__i2b>:
 800fa70:	b510      	push	{r4, lr}
 800fa72:	460c      	mov	r4, r1
 800fa74:	2101      	movs	r1, #1
 800fa76:	f7ff febd 	bl	800f7f4 <_Balloc>
 800fa7a:	4602      	mov	r2, r0
 800fa7c:	b928      	cbnz	r0, 800fa8a <__i2b+0x1a>
 800fa7e:	4b05      	ldr	r3, [pc, #20]	@ (800fa94 <__i2b+0x24>)
 800fa80:	4805      	ldr	r0, [pc, #20]	@ (800fa98 <__i2b+0x28>)
 800fa82:	f240 1145 	movw	r1, #325	@ 0x145
 800fa86:	f7fc fabb 	bl	800c000 <__assert_func>
 800fa8a:	2301      	movs	r3, #1
 800fa8c:	6144      	str	r4, [r0, #20]
 800fa8e:	6103      	str	r3, [r0, #16]
 800fa90:	bd10      	pop	{r4, pc}
 800fa92:	bf00      	nop
 800fa94:	08010fcb 	.word	0x08010fcb
 800fa98:	0801103c 	.word	0x0801103c

0800fa9c <__multiply>:
 800fa9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faa0:	4617      	mov	r7, r2
 800faa2:	690a      	ldr	r2, [r1, #16]
 800faa4:	693b      	ldr	r3, [r7, #16]
 800faa6:	429a      	cmp	r2, r3
 800faa8:	bfa8      	it	ge
 800faaa:	463b      	movge	r3, r7
 800faac:	4689      	mov	r9, r1
 800faae:	bfa4      	itt	ge
 800fab0:	460f      	movge	r7, r1
 800fab2:	4699      	movge	r9, r3
 800fab4:	693d      	ldr	r5, [r7, #16]
 800fab6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	6879      	ldr	r1, [r7, #4]
 800fabe:	eb05 060a 	add.w	r6, r5, sl
 800fac2:	42b3      	cmp	r3, r6
 800fac4:	b085      	sub	sp, #20
 800fac6:	bfb8      	it	lt
 800fac8:	3101      	addlt	r1, #1
 800faca:	f7ff fe93 	bl	800f7f4 <_Balloc>
 800face:	b930      	cbnz	r0, 800fade <__multiply+0x42>
 800fad0:	4602      	mov	r2, r0
 800fad2:	4b41      	ldr	r3, [pc, #260]	@ (800fbd8 <__multiply+0x13c>)
 800fad4:	4841      	ldr	r0, [pc, #260]	@ (800fbdc <__multiply+0x140>)
 800fad6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fada:	f7fc fa91 	bl	800c000 <__assert_func>
 800fade:	f100 0414 	add.w	r4, r0, #20
 800fae2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800fae6:	4623      	mov	r3, r4
 800fae8:	2200      	movs	r2, #0
 800faea:	4573      	cmp	r3, lr
 800faec:	d320      	bcc.n	800fb30 <__multiply+0x94>
 800faee:	f107 0814 	add.w	r8, r7, #20
 800faf2:	f109 0114 	add.w	r1, r9, #20
 800faf6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800fafa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800fafe:	9302      	str	r3, [sp, #8]
 800fb00:	1beb      	subs	r3, r5, r7
 800fb02:	3b15      	subs	r3, #21
 800fb04:	f023 0303 	bic.w	r3, r3, #3
 800fb08:	3304      	adds	r3, #4
 800fb0a:	3715      	adds	r7, #21
 800fb0c:	42bd      	cmp	r5, r7
 800fb0e:	bf38      	it	cc
 800fb10:	2304      	movcc	r3, #4
 800fb12:	9301      	str	r3, [sp, #4]
 800fb14:	9b02      	ldr	r3, [sp, #8]
 800fb16:	9103      	str	r1, [sp, #12]
 800fb18:	428b      	cmp	r3, r1
 800fb1a:	d80c      	bhi.n	800fb36 <__multiply+0x9a>
 800fb1c:	2e00      	cmp	r6, #0
 800fb1e:	dd03      	ble.n	800fb28 <__multiply+0x8c>
 800fb20:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d055      	beq.n	800fbd4 <__multiply+0x138>
 800fb28:	6106      	str	r6, [r0, #16]
 800fb2a:	b005      	add	sp, #20
 800fb2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb30:	f843 2b04 	str.w	r2, [r3], #4
 800fb34:	e7d9      	b.n	800faea <__multiply+0x4e>
 800fb36:	f8b1 a000 	ldrh.w	sl, [r1]
 800fb3a:	f1ba 0f00 	cmp.w	sl, #0
 800fb3e:	d01f      	beq.n	800fb80 <__multiply+0xe4>
 800fb40:	46c4      	mov	ip, r8
 800fb42:	46a1      	mov	r9, r4
 800fb44:	2700      	movs	r7, #0
 800fb46:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fb4a:	f8d9 3000 	ldr.w	r3, [r9]
 800fb4e:	fa1f fb82 	uxth.w	fp, r2
 800fb52:	b29b      	uxth	r3, r3
 800fb54:	fb0a 330b 	mla	r3, sl, fp, r3
 800fb58:	443b      	add	r3, r7
 800fb5a:	f8d9 7000 	ldr.w	r7, [r9]
 800fb5e:	0c12      	lsrs	r2, r2, #16
 800fb60:	0c3f      	lsrs	r7, r7, #16
 800fb62:	fb0a 7202 	mla	r2, sl, r2, r7
 800fb66:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800fb6a:	b29b      	uxth	r3, r3
 800fb6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb70:	4565      	cmp	r5, ip
 800fb72:	f849 3b04 	str.w	r3, [r9], #4
 800fb76:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800fb7a:	d8e4      	bhi.n	800fb46 <__multiply+0xaa>
 800fb7c:	9b01      	ldr	r3, [sp, #4]
 800fb7e:	50e7      	str	r7, [r4, r3]
 800fb80:	9b03      	ldr	r3, [sp, #12]
 800fb82:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fb86:	3104      	adds	r1, #4
 800fb88:	f1b9 0f00 	cmp.w	r9, #0
 800fb8c:	d020      	beq.n	800fbd0 <__multiply+0x134>
 800fb8e:	6823      	ldr	r3, [r4, #0]
 800fb90:	4647      	mov	r7, r8
 800fb92:	46a4      	mov	ip, r4
 800fb94:	f04f 0a00 	mov.w	sl, #0
 800fb98:	f8b7 b000 	ldrh.w	fp, [r7]
 800fb9c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800fba0:	fb09 220b 	mla	r2, r9, fp, r2
 800fba4:	4452      	add	r2, sl
 800fba6:	b29b      	uxth	r3, r3
 800fba8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fbac:	f84c 3b04 	str.w	r3, [ip], #4
 800fbb0:	f857 3b04 	ldr.w	r3, [r7], #4
 800fbb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fbb8:	f8bc 3000 	ldrh.w	r3, [ip]
 800fbbc:	fb09 330a 	mla	r3, r9, sl, r3
 800fbc0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800fbc4:	42bd      	cmp	r5, r7
 800fbc6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fbca:	d8e5      	bhi.n	800fb98 <__multiply+0xfc>
 800fbcc:	9a01      	ldr	r2, [sp, #4]
 800fbce:	50a3      	str	r3, [r4, r2]
 800fbd0:	3404      	adds	r4, #4
 800fbd2:	e79f      	b.n	800fb14 <__multiply+0x78>
 800fbd4:	3e01      	subs	r6, #1
 800fbd6:	e7a1      	b.n	800fb1c <__multiply+0x80>
 800fbd8:	08010fcb 	.word	0x08010fcb
 800fbdc:	0801103c 	.word	0x0801103c

0800fbe0 <__pow5mult>:
 800fbe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbe4:	4615      	mov	r5, r2
 800fbe6:	f012 0203 	ands.w	r2, r2, #3
 800fbea:	4607      	mov	r7, r0
 800fbec:	460e      	mov	r6, r1
 800fbee:	d007      	beq.n	800fc00 <__pow5mult+0x20>
 800fbf0:	4c25      	ldr	r4, [pc, #148]	@ (800fc88 <__pow5mult+0xa8>)
 800fbf2:	3a01      	subs	r2, #1
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fbfa:	f7ff fe5d 	bl	800f8b8 <__multadd>
 800fbfe:	4606      	mov	r6, r0
 800fc00:	10ad      	asrs	r5, r5, #2
 800fc02:	d03d      	beq.n	800fc80 <__pow5mult+0xa0>
 800fc04:	69fc      	ldr	r4, [r7, #28]
 800fc06:	b97c      	cbnz	r4, 800fc28 <__pow5mult+0x48>
 800fc08:	2010      	movs	r0, #16
 800fc0a:	f7fc fa2b 	bl	800c064 <malloc>
 800fc0e:	4602      	mov	r2, r0
 800fc10:	61f8      	str	r0, [r7, #28]
 800fc12:	b928      	cbnz	r0, 800fc20 <__pow5mult+0x40>
 800fc14:	4b1d      	ldr	r3, [pc, #116]	@ (800fc8c <__pow5mult+0xac>)
 800fc16:	481e      	ldr	r0, [pc, #120]	@ (800fc90 <__pow5mult+0xb0>)
 800fc18:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fc1c:	f7fc f9f0 	bl	800c000 <__assert_func>
 800fc20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fc24:	6004      	str	r4, [r0, #0]
 800fc26:	60c4      	str	r4, [r0, #12]
 800fc28:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fc2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fc30:	b94c      	cbnz	r4, 800fc46 <__pow5mult+0x66>
 800fc32:	f240 2171 	movw	r1, #625	@ 0x271
 800fc36:	4638      	mov	r0, r7
 800fc38:	f7ff ff1a 	bl	800fa70 <__i2b>
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	f8c8 0008 	str.w	r0, [r8, #8]
 800fc42:	4604      	mov	r4, r0
 800fc44:	6003      	str	r3, [r0, #0]
 800fc46:	f04f 0900 	mov.w	r9, #0
 800fc4a:	07eb      	lsls	r3, r5, #31
 800fc4c:	d50a      	bpl.n	800fc64 <__pow5mult+0x84>
 800fc4e:	4631      	mov	r1, r6
 800fc50:	4622      	mov	r2, r4
 800fc52:	4638      	mov	r0, r7
 800fc54:	f7ff ff22 	bl	800fa9c <__multiply>
 800fc58:	4631      	mov	r1, r6
 800fc5a:	4680      	mov	r8, r0
 800fc5c:	4638      	mov	r0, r7
 800fc5e:	f7ff fe09 	bl	800f874 <_Bfree>
 800fc62:	4646      	mov	r6, r8
 800fc64:	106d      	asrs	r5, r5, #1
 800fc66:	d00b      	beq.n	800fc80 <__pow5mult+0xa0>
 800fc68:	6820      	ldr	r0, [r4, #0]
 800fc6a:	b938      	cbnz	r0, 800fc7c <__pow5mult+0x9c>
 800fc6c:	4622      	mov	r2, r4
 800fc6e:	4621      	mov	r1, r4
 800fc70:	4638      	mov	r0, r7
 800fc72:	f7ff ff13 	bl	800fa9c <__multiply>
 800fc76:	6020      	str	r0, [r4, #0]
 800fc78:	f8c0 9000 	str.w	r9, [r0]
 800fc7c:	4604      	mov	r4, r0
 800fc7e:	e7e4      	b.n	800fc4a <__pow5mult+0x6a>
 800fc80:	4630      	mov	r0, r6
 800fc82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc86:	bf00      	nop
 800fc88:	080111fc 	.word	0x080111fc
 800fc8c:	08010f5c 	.word	0x08010f5c
 800fc90:	0801103c 	.word	0x0801103c

0800fc94 <__lshift>:
 800fc94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc98:	460c      	mov	r4, r1
 800fc9a:	6849      	ldr	r1, [r1, #4]
 800fc9c:	6923      	ldr	r3, [r4, #16]
 800fc9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fca2:	68a3      	ldr	r3, [r4, #8]
 800fca4:	4607      	mov	r7, r0
 800fca6:	4691      	mov	r9, r2
 800fca8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fcac:	f108 0601 	add.w	r6, r8, #1
 800fcb0:	42b3      	cmp	r3, r6
 800fcb2:	db0b      	blt.n	800fccc <__lshift+0x38>
 800fcb4:	4638      	mov	r0, r7
 800fcb6:	f7ff fd9d 	bl	800f7f4 <_Balloc>
 800fcba:	4605      	mov	r5, r0
 800fcbc:	b948      	cbnz	r0, 800fcd2 <__lshift+0x3e>
 800fcbe:	4602      	mov	r2, r0
 800fcc0:	4b28      	ldr	r3, [pc, #160]	@ (800fd64 <__lshift+0xd0>)
 800fcc2:	4829      	ldr	r0, [pc, #164]	@ (800fd68 <__lshift+0xd4>)
 800fcc4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fcc8:	f7fc f99a 	bl	800c000 <__assert_func>
 800fccc:	3101      	adds	r1, #1
 800fcce:	005b      	lsls	r3, r3, #1
 800fcd0:	e7ee      	b.n	800fcb0 <__lshift+0x1c>
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	f100 0114 	add.w	r1, r0, #20
 800fcd8:	f100 0210 	add.w	r2, r0, #16
 800fcdc:	4618      	mov	r0, r3
 800fcde:	4553      	cmp	r3, sl
 800fce0:	db33      	blt.n	800fd4a <__lshift+0xb6>
 800fce2:	6920      	ldr	r0, [r4, #16]
 800fce4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fce8:	f104 0314 	add.w	r3, r4, #20
 800fcec:	f019 091f 	ands.w	r9, r9, #31
 800fcf0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fcf4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fcf8:	d02b      	beq.n	800fd52 <__lshift+0xbe>
 800fcfa:	f1c9 0e20 	rsb	lr, r9, #32
 800fcfe:	468a      	mov	sl, r1
 800fd00:	2200      	movs	r2, #0
 800fd02:	6818      	ldr	r0, [r3, #0]
 800fd04:	fa00 f009 	lsl.w	r0, r0, r9
 800fd08:	4310      	orrs	r0, r2
 800fd0a:	f84a 0b04 	str.w	r0, [sl], #4
 800fd0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd12:	459c      	cmp	ip, r3
 800fd14:	fa22 f20e 	lsr.w	r2, r2, lr
 800fd18:	d8f3      	bhi.n	800fd02 <__lshift+0x6e>
 800fd1a:	ebac 0304 	sub.w	r3, ip, r4
 800fd1e:	3b15      	subs	r3, #21
 800fd20:	f023 0303 	bic.w	r3, r3, #3
 800fd24:	3304      	adds	r3, #4
 800fd26:	f104 0015 	add.w	r0, r4, #21
 800fd2a:	4560      	cmp	r0, ip
 800fd2c:	bf88      	it	hi
 800fd2e:	2304      	movhi	r3, #4
 800fd30:	50ca      	str	r2, [r1, r3]
 800fd32:	b10a      	cbz	r2, 800fd38 <__lshift+0xa4>
 800fd34:	f108 0602 	add.w	r6, r8, #2
 800fd38:	3e01      	subs	r6, #1
 800fd3a:	4638      	mov	r0, r7
 800fd3c:	612e      	str	r6, [r5, #16]
 800fd3e:	4621      	mov	r1, r4
 800fd40:	f7ff fd98 	bl	800f874 <_Bfree>
 800fd44:	4628      	mov	r0, r5
 800fd46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd4a:	f842 0f04 	str.w	r0, [r2, #4]!
 800fd4e:	3301      	adds	r3, #1
 800fd50:	e7c5      	b.n	800fcde <__lshift+0x4a>
 800fd52:	3904      	subs	r1, #4
 800fd54:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd58:	f841 2f04 	str.w	r2, [r1, #4]!
 800fd5c:	459c      	cmp	ip, r3
 800fd5e:	d8f9      	bhi.n	800fd54 <__lshift+0xc0>
 800fd60:	e7ea      	b.n	800fd38 <__lshift+0xa4>
 800fd62:	bf00      	nop
 800fd64:	08010fcb 	.word	0x08010fcb
 800fd68:	0801103c 	.word	0x0801103c

0800fd6c <__mcmp>:
 800fd6c:	690a      	ldr	r2, [r1, #16]
 800fd6e:	4603      	mov	r3, r0
 800fd70:	6900      	ldr	r0, [r0, #16]
 800fd72:	1a80      	subs	r0, r0, r2
 800fd74:	b530      	push	{r4, r5, lr}
 800fd76:	d10e      	bne.n	800fd96 <__mcmp+0x2a>
 800fd78:	3314      	adds	r3, #20
 800fd7a:	3114      	adds	r1, #20
 800fd7c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fd80:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fd84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fd88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fd8c:	4295      	cmp	r5, r2
 800fd8e:	d003      	beq.n	800fd98 <__mcmp+0x2c>
 800fd90:	d205      	bcs.n	800fd9e <__mcmp+0x32>
 800fd92:	f04f 30ff 	mov.w	r0, #4294967295
 800fd96:	bd30      	pop	{r4, r5, pc}
 800fd98:	42a3      	cmp	r3, r4
 800fd9a:	d3f3      	bcc.n	800fd84 <__mcmp+0x18>
 800fd9c:	e7fb      	b.n	800fd96 <__mcmp+0x2a>
 800fd9e:	2001      	movs	r0, #1
 800fda0:	e7f9      	b.n	800fd96 <__mcmp+0x2a>
	...

0800fda4 <__mdiff>:
 800fda4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fda8:	4689      	mov	r9, r1
 800fdaa:	4606      	mov	r6, r0
 800fdac:	4611      	mov	r1, r2
 800fdae:	4648      	mov	r0, r9
 800fdb0:	4614      	mov	r4, r2
 800fdb2:	f7ff ffdb 	bl	800fd6c <__mcmp>
 800fdb6:	1e05      	subs	r5, r0, #0
 800fdb8:	d112      	bne.n	800fde0 <__mdiff+0x3c>
 800fdba:	4629      	mov	r1, r5
 800fdbc:	4630      	mov	r0, r6
 800fdbe:	f7ff fd19 	bl	800f7f4 <_Balloc>
 800fdc2:	4602      	mov	r2, r0
 800fdc4:	b928      	cbnz	r0, 800fdd2 <__mdiff+0x2e>
 800fdc6:	4b3f      	ldr	r3, [pc, #252]	@ (800fec4 <__mdiff+0x120>)
 800fdc8:	f240 2137 	movw	r1, #567	@ 0x237
 800fdcc:	483e      	ldr	r0, [pc, #248]	@ (800fec8 <__mdiff+0x124>)
 800fdce:	f7fc f917 	bl	800c000 <__assert_func>
 800fdd2:	2301      	movs	r3, #1
 800fdd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fdd8:	4610      	mov	r0, r2
 800fdda:	b003      	add	sp, #12
 800fddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fde0:	bfbc      	itt	lt
 800fde2:	464b      	movlt	r3, r9
 800fde4:	46a1      	movlt	r9, r4
 800fde6:	4630      	mov	r0, r6
 800fde8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fdec:	bfba      	itte	lt
 800fdee:	461c      	movlt	r4, r3
 800fdf0:	2501      	movlt	r5, #1
 800fdf2:	2500      	movge	r5, #0
 800fdf4:	f7ff fcfe 	bl	800f7f4 <_Balloc>
 800fdf8:	4602      	mov	r2, r0
 800fdfa:	b918      	cbnz	r0, 800fe04 <__mdiff+0x60>
 800fdfc:	4b31      	ldr	r3, [pc, #196]	@ (800fec4 <__mdiff+0x120>)
 800fdfe:	f240 2145 	movw	r1, #581	@ 0x245
 800fe02:	e7e3      	b.n	800fdcc <__mdiff+0x28>
 800fe04:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fe08:	6926      	ldr	r6, [r4, #16]
 800fe0a:	60c5      	str	r5, [r0, #12]
 800fe0c:	f109 0310 	add.w	r3, r9, #16
 800fe10:	f109 0514 	add.w	r5, r9, #20
 800fe14:	f104 0e14 	add.w	lr, r4, #20
 800fe18:	f100 0b14 	add.w	fp, r0, #20
 800fe1c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fe20:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fe24:	9301      	str	r3, [sp, #4]
 800fe26:	46d9      	mov	r9, fp
 800fe28:	f04f 0c00 	mov.w	ip, #0
 800fe2c:	9b01      	ldr	r3, [sp, #4]
 800fe2e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fe32:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fe36:	9301      	str	r3, [sp, #4]
 800fe38:	fa1f f38a 	uxth.w	r3, sl
 800fe3c:	4619      	mov	r1, r3
 800fe3e:	b283      	uxth	r3, r0
 800fe40:	1acb      	subs	r3, r1, r3
 800fe42:	0c00      	lsrs	r0, r0, #16
 800fe44:	4463      	add	r3, ip
 800fe46:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fe4a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fe4e:	b29b      	uxth	r3, r3
 800fe50:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fe54:	4576      	cmp	r6, lr
 800fe56:	f849 3b04 	str.w	r3, [r9], #4
 800fe5a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fe5e:	d8e5      	bhi.n	800fe2c <__mdiff+0x88>
 800fe60:	1b33      	subs	r3, r6, r4
 800fe62:	3b15      	subs	r3, #21
 800fe64:	f023 0303 	bic.w	r3, r3, #3
 800fe68:	3415      	adds	r4, #21
 800fe6a:	3304      	adds	r3, #4
 800fe6c:	42a6      	cmp	r6, r4
 800fe6e:	bf38      	it	cc
 800fe70:	2304      	movcc	r3, #4
 800fe72:	441d      	add	r5, r3
 800fe74:	445b      	add	r3, fp
 800fe76:	461e      	mov	r6, r3
 800fe78:	462c      	mov	r4, r5
 800fe7a:	4544      	cmp	r4, r8
 800fe7c:	d30e      	bcc.n	800fe9c <__mdiff+0xf8>
 800fe7e:	f108 0103 	add.w	r1, r8, #3
 800fe82:	1b49      	subs	r1, r1, r5
 800fe84:	f021 0103 	bic.w	r1, r1, #3
 800fe88:	3d03      	subs	r5, #3
 800fe8a:	45a8      	cmp	r8, r5
 800fe8c:	bf38      	it	cc
 800fe8e:	2100      	movcc	r1, #0
 800fe90:	440b      	add	r3, r1
 800fe92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fe96:	b191      	cbz	r1, 800febe <__mdiff+0x11a>
 800fe98:	6117      	str	r7, [r2, #16]
 800fe9a:	e79d      	b.n	800fdd8 <__mdiff+0x34>
 800fe9c:	f854 1b04 	ldr.w	r1, [r4], #4
 800fea0:	46e6      	mov	lr, ip
 800fea2:	0c08      	lsrs	r0, r1, #16
 800fea4:	fa1c fc81 	uxtah	ip, ip, r1
 800fea8:	4471      	add	r1, lr
 800feaa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800feae:	b289      	uxth	r1, r1
 800feb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800feb4:	f846 1b04 	str.w	r1, [r6], #4
 800feb8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800febc:	e7dd      	b.n	800fe7a <__mdiff+0xd6>
 800febe:	3f01      	subs	r7, #1
 800fec0:	e7e7      	b.n	800fe92 <__mdiff+0xee>
 800fec2:	bf00      	nop
 800fec4:	08010fcb 	.word	0x08010fcb
 800fec8:	0801103c 	.word	0x0801103c

0800fecc <__ulp>:
 800fecc:	b082      	sub	sp, #8
 800fece:	ed8d 0b00 	vstr	d0, [sp]
 800fed2:	9a01      	ldr	r2, [sp, #4]
 800fed4:	4b0f      	ldr	r3, [pc, #60]	@ (800ff14 <__ulp+0x48>)
 800fed6:	4013      	ands	r3, r2
 800fed8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800fedc:	2b00      	cmp	r3, #0
 800fede:	dc08      	bgt.n	800fef2 <__ulp+0x26>
 800fee0:	425b      	negs	r3, r3
 800fee2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800fee6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800feea:	da04      	bge.n	800fef6 <__ulp+0x2a>
 800feec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fef0:	4113      	asrs	r3, r2
 800fef2:	2200      	movs	r2, #0
 800fef4:	e008      	b.n	800ff08 <__ulp+0x3c>
 800fef6:	f1a2 0314 	sub.w	r3, r2, #20
 800fefa:	2b1e      	cmp	r3, #30
 800fefc:	bfda      	itte	le
 800fefe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ff02:	40da      	lsrle	r2, r3
 800ff04:	2201      	movgt	r2, #1
 800ff06:	2300      	movs	r3, #0
 800ff08:	4619      	mov	r1, r3
 800ff0a:	4610      	mov	r0, r2
 800ff0c:	ec41 0b10 	vmov	d0, r0, r1
 800ff10:	b002      	add	sp, #8
 800ff12:	4770      	bx	lr
 800ff14:	7ff00000 	.word	0x7ff00000

0800ff18 <__b2d>:
 800ff18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff1c:	6906      	ldr	r6, [r0, #16]
 800ff1e:	f100 0814 	add.w	r8, r0, #20
 800ff22:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ff26:	1f37      	subs	r7, r6, #4
 800ff28:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ff2c:	4610      	mov	r0, r2
 800ff2e:	f7ff fd53 	bl	800f9d8 <__hi0bits>
 800ff32:	f1c0 0320 	rsb	r3, r0, #32
 800ff36:	280a      	cmp	r0, #10
 800ff38:	600b      	str	r3, [r1, #0]
 800ff3a:	491b      	ldr	r1, [pc, #108]	@ (800ffa8 <__b2d+0x90>)
 800ff3c:	dc15      	bgt.n	800ff6a <__b2d+0x52>
 800ff3e:	f1c0 0c0b 	rsb	ip, r0, #11
 800ff42:	fa22 f30c 	lsr.w	r3, r2, ip
 800ff46:	45b8      	cmp	r8, r7
 800ff48:	ea43 0501 	orr.w	r5, r3, r1
 800ff4c:	bf34      	ite	cc
 800ff4e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ff52:	2300      	movcs	r3, #0
 800ff54:	3015      	adds	r0, #21
 800ff56:	fa02 f000 	lsl.w	r0, r2, r0
 800ff5a:	fa23 f30c 	lsr.w	r3, r3, ip
 800ff5e:	4303      	orrs	r3, r0
 800ff60:	461c      	mov	r4, r3
 800ff62:	ec45 4b10 	vmov	d0, r4, r5
 800ff66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff6a:	45b8      	cmp	r8, r7
 800ff6c:	bf3a      	itte	cc
 800ff6e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ff72:	f1a6 0708 	subcc.w	r7, r6, #8
 800ff76:	2300      	movcs	r3, #0
 800ff78:	380b      	subs	r0, #11
 800ff7a:	d012      	beq.n	800ffa2 <__b2d+0x8a>
 800ff7c:	f1c0 0120 	rsb	r1, r0, #32
 800ff80:	fa23 f401 	lsr.w	r4, r3, r1
 800ff84:	4082      	lsls	r2, r0
 800ff86:	4322      	orrs	r2, r4
 800ff88:	4547      	cmp	r7, r8
 800ff8a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ff8e:	bf8c      	ite	hi
 800ff90:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ff94:	2200      	movls	r2, #0
 800ff96:	4083      	lsls	r3, r0
 800ff98:	40ca      	lsrs	r2, r1
 800ff9a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ff9e:	4313      	orrs	r3, r2
 800ffa0:	e7de      	b.n	800ff60 <__b2d+0x48>
 800ffa2:	ea42 0501 	orr.w	r5, r2, r1
 800ffa6:	e7db      	b.n	800ff60 <__b2d+0x48>
 800ffa8:	3ff00000 	.word	0x3ff00000

0800ffac <__d2b>:
 800ffac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ffb0:	460f      	mov	r7, r1
 800ffb2:	2101      	movs	r1, #1
 800ffb4:	ec59 8b10 	vmov	r8, r9, d0
 800ffb8:	4616      	mov	r6, r2
 800ffba:	f7ff fc1b 	bl	800f7f4 <_Balloc>
 800ffbe:	4604      	mov	r4, r0
 800ffc0:	b930      	cbnz	r0, 800ffd0 <__d2b+0x24>
 800ffc2:	4602      	mov	r2, r0
 800ffc4:	4b23      	ldr	r3, [pc, #140]	@ (8010054 <__d2b+0xa8>)
 800ffc6:	4824      	ldr	r0, [pc, #144]	@ (8010058 <__d2b+0xac>)
 800ffc8:	f240 310f 	movw	r1, #783	@ 0x30f
 800ffcc:	f7fc f818 	bl	800c000 <__assert_func>
 800ffd0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ffd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ffd8:	b10d      	cbz	r5, 800ffde <__d2b+0x32>
 800ffda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ffde:	9301      	str	r3, [sp, #4]
 800ffe0:	f1b8 0300 	subs.w	r3, r8, #0
 800ffe4:	d023      	beq.n	801002e <__d2b+0x82>
 800ffe6:	4668      	mov	r0, sp
 800ffe8:	9300      	str	r3, [sp, #0]
 800ffea:	f7ff fd14 	bl	800fa16 <__lo0bits>
 800ffee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fff2:	b1d0      	cbz	r0, 801002a <__d2b+0x7e>
 800fff4:	f1c0 0320 	rsb	r3, r0, #32
 800fff8:	fa02 f303 	lsl.w	r3, r2, r3
 800fffc:	430b      	orrs	r3, r1
 800fffe:	40c2      	lsrs	r2, r0
 8010000:	6163      	str	r3, [r4, #20]
 8010002:	9201      	str	r2, [sp, #4]
 8010004:	9b01      	ldr	r3, [sp, #4]
 8010006:	61a3      	str	r3, [r4, #24]
 8010008:	2b00      	cmp	r3, #0
 801000a:	bf0c      	ite	eq
 801000c:	2201      	moveq	r2, #1
 801000e:	2202      	movne	r2, #2
 8010010:	6122      	str	r2, [r4, #16]
 8010012:	b1a5      	cbz	r5, 801003e <__d2b+0x92>
 8010014:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010018:	4405      	add	r5, r0
 801001a:	603d      	str	r5, [r7, #0]
 801001c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010020:	6030      	str	r0, [r6, #0]
 8010022:	4620      	mov	r0, r4
 8010024:	b003      	add	sp, #12
 8010026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801002a:	6161      	str	r1, [r4, #20]
 801002c:	e7ea      	b.n	8010004 <__d2b+0x58>
 801002e:	a801      	add	r0, sp, #4
 8010030:	f7ff fcf1 	bl	800fa16 <__lo0bits>
 8010034:	9b01      	ldr	r3, [sp, #4]
 8010036:	6163      	str	r3, [r4, #20]
 8010038:	3020      	adds	r0, #32
 801003a:	2201      	movs	r2, #1
 801003c:	e7e8      	b.n	8010010 <__d2b+0x64>
 801003e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010042:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010046:	6038      	str	r0, [r7, #0]
 8010048:	6918      	ldr	r0, [r3, #16]
 801004a:	f7ff fcc5 	bl	800f9d8 <__hi0bits>
 801004e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010052:	e7e5      	b.n	8010020 <__d2b+0x74>
 8010054:	08010fcb 	.word	0x08010fcb
 8010058:	0801103c 	.word	0x0801103c

0801005c <__ratio>:
 801005c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010060:	b085      	sub	sp, #20
 8010062:	e9cd 1000 	strd	r1, r0, [sp]
 8010066:	a902      	add	r1, sp, #8
 8010068:	f7ff ff56 	bl	800ff18 <__b2d>
 801006c:	9800      	ldr	r0, [sp, #0]
 801006e:	a903      	add	r1, sp, #12
 8010070:	ec55 4b10 	vmov	r4, r5, d0
 8010074:	f7ff ff50 	bl	800ff18 <__b2d>
 8010078:	9b01      	ldr	r3, [sp, #4]
 801007a:	6919      	ldr	r1, [r3, #16]
 801007c:	9b00      	ldr	r3, [sp, #0]
 801007e:	691b      	ldr	r3, [r3, #16]
 8010080:	1ac9      	subs	r1, r1, r3
 8010082:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010086:	1a9b      	subs	r3, r3, r2
 8010088:	ec5b ab10 	vmov	sl, fp, d0
 801008c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010090:	2b00      	cmp	r3, #0
 8010092:	bfce      	itee	gt
 8010094:	462a      	movgt	r2, r5
 8010096:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801009a:	465a      	movle	r2, fp
 801009c:	462f      	mov	r7, r5
 801009e:	46d9      	mov	r9, fp
 80100a0:	bfcc      	ite	gt
 80100a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80100a6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80100aa:	464b      	mov	r3, r9
 80100ac:	4652      	mov	r2, sl
 80100ae:	4620      	mov	r0, r4
 80100b0:	4639      	mov	r1, r7
 80100b2:	f7f0 fbeb 	bl	800088c <__aeabi_ddiv>
 80100b6:	ec41 0b10 	vmov	d0, r0, r1
 80100ba:	b005      	add	sp, #20
 80100bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080100c0 <__copybits>:
 80100c0:	3901      	subs	r1, #1
 80100c2:	b570      	push	{r4, r5, r6, lr}
 80100c4:	1149      	asrs	r1, r1, #5
 80100c6:	6914      	ldr	r4, [r2, #16]
 80100c8:	3101      	adds	r1, #1
 80100ca:	f102 0314 	add.w	r3, r2, #20
 80100ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80100d2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80100d6:	1f05      	subs	r5, r0, #4
 80100d8:	42a3      	cmp	r3, r4
 80100da:	d30c      	bcc.n	80100f6 <__copybits+0x36>
 80100dc:	1aa3      	subs	r3, r4, r2
 80100de:	3b11      	subs	r3, #17
 80100e0:	f023 0303 	bic.w	r3, r3, #3
 80100e4:	3211      	adds	r2, #17
 80100e6:	42a2      	cmp	r2, r4
 80100e8:	bf88      	it	hi
 80100ea:	2300      	movhi	r3, #0
 80100ec:	4418      	add	r0, r3
 80100ee:	2300      	movs	r3, #0
 80100f0:	4288      	cmp	r0, r1
 80100f2:	d305      	bcc.n	8010100 <__copybits+0x40>
 80100f4:	bd70      	pop	{r4, r5, r6, pc}
 80100f6:	f853 6b04 	ldr.w	r6, [r3], #4
 80100fa:	f845 6f04 	str.w	r6, [r5, #4]!
 80100fe:	e7eb      	b.n	80100d8 <__copybits+0x18>
 8010100:	f840 3b04 	str.w	r3, [r0], #4
 8010104:	e7f4      	b.n	80100f0 <__copybits+0x30>

08010106 <__any_on>:
 8010106:	f100 0214 	add.w	r2, r0, #20
 801010a:	6900      	ldr	r0, [r0, #16]
 801010c:	114b      	asrs	r3, r1, #5
 801010e:	4298      	cmp	r0, r3
 8010110:	b510      	push	{r4, lr}
 8010112:	db11      	blt.n	8010138 <__any_on+0x32>
 8010114:	dd0a      	ble.n	801012c <__any_on+0x26>
 8010116:	f011 011f 	ands.w	r1, r1, #31
 801011a:	d007      	beq.n	801012c <__any_on+0x26>
 801011c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010120:	fa24 f001 	lsr.w	r0, r4, r1
 8010124:	fa00 f101 	lsl.w	r1, r0, r1
 8010128:	428c      	cmp	r4, r1
 801012a:	d10b      	bne.n	8010144 <__any_on+0x3e>
 801012c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010130:	4293      	cmp	r3, r2
 8010132:	d803      	bhi.n	801013c <__any_on+0x36>
 8010134:	2000      	movs	r0, #0
 8010136:	bd10      	pop	{r4, pc}
 8010138:	4603      	mov	r3, r0
 801013a:	e7f7      	b.n	801012c <__any_on+0x26>
 801013c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010140:	2900      	cmp	r1, #0
 8010142:	d0f5      	beq.n	8010130 <__any_on+0x2a>
 8010144:	2001      	movs	r0, #1
 8010146:	e7f6      	b.n	8010136 <__any_on+0x30>

08010148 <_realloc_r>:
 8010148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801014c:	4607      	mov	r7, r0
 801014e:	4614      	mov	r4, r2
 8010150:	460d      	mov	r5, r1
 8010152:	b921      	cbnz	r1, 801015e <_realloc_r+0x16>
 8010154:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010158:	4611      	mov	r1, r2
 801015a:	f7fb bfb5 	b.w	800c0c8 <_malloc_r>
 801015e:	b92a      	cbnz	r2, 801016c <_realloc_r+0x24>
 8010160:	f7fe ff7e 	bl	800f060 <_free_r>
 8010164:	4625      	mov	r5, r4
 8010166:	4628      	mov	r0, r5
 8010168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801016c:	f000 fba2 	bl	80108b4 <_malloc_usable_size_r>
 8010170:	4284      	cmp	r4, r0
 8010172:	4606      	mov	r6, r0
 8010174:	d802      	bhi.n	801017c <_realloc_r+0x34>
 8010176:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801017a:	d8f4      	bhi.n	8010166 <_realloc_r+0x1e>
 801017c:	4621      	mov	r1, r4
 801017e:	4638      	mov	r0, r7
 8010180:	f7fb ffa2 	bl	800c0c8 <_malloc_r>
 8010184:	4680      	mov	r8, r0
 8010186:	b908      	cbnz	r0, 801018c <_realloc_r+0x44>
 8010188:	4645      	mov	r5, r8
 801018a:	e7ec      	b.n	8010166 <_realloc_r+0x1e>
 801018c:	42b4      	cmp	r4, r6
 801018e:	4622      	mov	r2, r4
 8010190:	4629      	mov	r1, r5
 8010192:	bf28      	it	cs
 8010194:	4632      	movcs	r2, r6
 8010196:	f7fe f8e2 	bl	800e35e <memcpy>
 801019a:	4629      	mov	r1, r5
 801019c:	4638      	mov	r0, r7
 801019e:	f7fe ff5f 	bl	800f060 <_free_r>
 80101a2:	e7f1      	b.n	8010188 <_realloc_r+0x40>

080101a4 <__ascii_wctomb>:
 80101a4:	4603      	mov	r3, r0
 80101a6:	4608      	mov	r0, r1
 80101a8:	b141      	cbz	r1, 80101bc <__ascii_wctomb+0x18>
 80101aa:	2aff      	cmp	r2, #255	@ 0xff
 80101ac:	d904      	bls.n	80101b8 <__ascii_wctomb+0x14>
 80101ae:	228a      	movs	r2, #138	@ 0x8a
 80101b0:	601a      	str	r2, [r3, #0]
 80101b2:	f04f 30ff 	mov.w	r0, #4294967295
 80101b6:	4770      	bx	lr
 80101b8:	700a      	strb	r2, [r1, #0]
 80101ba:	2001      	movs	r0, #1
 80101bc:	4770      	bx	lr

080101be <__ssputs_r>:
 80101be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101c2:	688e      	ldr	r6, [r1, #8]
 80101c4:	461f      	mov	r7, r3
 80101c6:	42be      	cmp	r6, r7
 80101c8:	680b      	ldr	r3, [r1, #0]
 80101ca:	4682      	mov	sl, r0
 80101cc:	460c      	mov	r4, r1
 80101ce:	4690      	mov	r8, r2
 80101d0:	d82d      	bhi.n	801022e <__ssputs_r+0x70>
 80101d2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80101d6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80101da:	d026      	beq.n	801022a <__ssputs_r+0x6c>
 80101dc:	6965      	ldr	r5, [r4, #20]
 80101de:	6909      	ldr	r1, [r1, #16]
 80101e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80101e4:	eba3 0901 	sub.w	r9, r3, r1
 80101e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80101ec:	1c7b      	adds	r3, r7, #1
 80101ee:	444b      	add	r3, r9
 80101f0:	106d      	asrs	r5, r5, #1
 80101f2:	429d      	cmp	r5, r3
 80101f4:	bf38      	it	cc
 80101f6:	461d      	movcc	r5, r3
 80101f8:	0553      	lsls	r3, r2, #21
 80101fa:	d527      	bpl.n	801024c <__ssputs_r+0x8e>
 80101fc:	4629      	mov	r1, r5
 80101fe:	f7fb ff63 	bl	800c0c8 <_malloc_r>
 8010202:	4606      	mov	r6, r0
 8010204:	b360      	cbz	r0, 8010260 <__ssputs_r+0xa2>
 8010206:	6921      	ldr	r1, [r4, #16]
 8010208:	464a      	mov	r2, r9
 801020a:	f7fe f8a8 	bl	800e35e <memcpy>
 801020e:	89a3      	ldrh	r3, [r4, #12]
 8010210:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010214:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010218:	81a3      	strh	r3, [r4, #12]
 801021a:	6126      	str	r6, [r4, #16]
 801021c:	6165      	str	r5, [r4, #20]
 801021e:	444e      	add	r6, r9
 8010220:	eba5 0509 	sub.w	r5, r5, r9
 8010224:	6026      	str	r6, [r4, #0]
 8010226:	60a5      	str	r5, [r4, #8]
 8010228:	463e      	mov	r6, r7
 801022a:	42be      	cmp	r6, r7
 801022c:	d900      	bls.n	8010230 <__ssputs_r+0x72>
 801022e:	463e      	mov	r6, r7
 8010230:	6820      	ldr	r0, [r4, #0]
 8010232:	4632      	mov	r2, r6
 8010234:	4641      	mov	r1, r8
 8010236:	f000 fabd 	bl	80107b4 <memmove>
 801023a:	68a3      	ldr	r3, [r4, #8]
 801023c:	1b9b      	subs	r3, r3, r6
 801023e:	60a3      	str	r3, [r4, #8]
 8010240:	6823      	ldr	r3, [r4, #0]
 8010242:	4433      	add	r3, r6
 8010244:	6023      	str	r3, [r4, #0]
 8010246:	2000      	movs	r0, #0
 8010248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801024c:	462a      	mov	r2, r5
 801024e:	f7ff ff7b 	bl	8010148 <_realloc_r>
 8010252:	4606      	mov	r6, r0
 8010254:	2800      	cmp	r0, #0
 8010256:	d1e0      	bne.n	801021a <__ssputs_r+0x5c>
 8010258:	6921      	ldr	r1, [r4, #16]
 801025a:	4650      	mov	r0, sl
 801025c:	f7fe ff00 	bl	800f060 <_free_r>
 8010260:	230c      	movs	r3, #12
 8010262:	f8ca 3000 	str.w	r3, [sl]
 8010266:	89a3      	ldrh	r3, [r4, #12]
 8010268:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801026c:	81a3      	strh	r3, [r4, #12]
 801026e:	f04f 30ff 	mov.w	r0, #4294967295
 8010272:	e7e9      	b.n	8010248 <__ssputs_r+0x8a>

08010274 <_svfiprintf_r>:
 8010274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010278:	4698      	mov	r8, r3
 801027a:	898b      	ldrh	r3, [r1, #12]
 801027c:	061b      	lsls	r3, r3, #24
 801027e:	b09d      	sub	sp, #116	@ 0x74
 8010280:	4607      	mov	r7, r0
 8010282:	460d      	mov	r5, r1
 8010284:	4614      	mov	r4, r2
 8010286:	d510      	bpl.n	80102aa <_svfiprintf_r+0x36>
 8010288:	690b      	ldr	r3, [r1, #16]
 801028a:	b973      	cbnz	r3, 80102aa <_svfiprintf_r+0x36>
 801028c:	2140      	movs	r1, #64	@ 0x40
 801028e:	f7fb ff1b 	bl	800c0c8 <_malloc_r>
 8010292:	6028      	str	r0, [r5, #0]
 8010294:	6128      	str	r0, [r5, #16]
 8010296:	b930      	cbnz	r0, 80102a6 <_svfiprintf_r+0x32>
 8010298:	230c      	movs	r3, #12
 801029a:	603b      	str	r3, [r7, #0]
 801029c:	f04f 30ff 	mov.w	r0, #4294967295
 80102a0:	b01d      	add	sp, #116	@ 0x74
 80102a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102a6:	2340      	movs	r3, #64	@ 0x40
 80102a8:	616b      	str	r3, [r5, #20]
 80102aa:	2300      	movs	r3, #0
 80102ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80102ae:	2320      	movs	r3, #32
 80102b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80102b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80102b8:	2330      	movs	r3, #48	@ 0x30
 80102ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010458 <_svfiprintf_r+0x1e4>
 80102be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80102c2:	f04f 0901 	mov.w	r9, #1
 80102c6:	4623      	mov	r3, r4
 80102c8:	469a      	mov	sl, r3
 80102ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102ce:	b10a      	cbz	r2, 80102d4 <_svfiprintf_r+0x60>
 80102d0:	2a25      	cmp	r2, #37	@ 0x25
 80102d2:	d1f9      	bne.n	80102c8 <_svfiprintf_r+0x54>
 80102d4:	ebba 0b04 	subs.w	fp, sl, r4
 80102d8:	d00b      	beq.n	80102f2 <_svfiprintf_r+0x7e>
 80102da:	465b      	mov	r3, fp
 80102dc:	4622      	mov	r2, r4
 80102de:	4629      	mov	r1, r5
 80102e0:	4638      	mov	r0, r7
 80102e2:	f7ff ff6c 	bl	80101be <__ssputs_r>
 80102e6:	3001      	adds	r0, #1
 80102e8:	f000 80a7 	beq.w	801043a <_svfiprintf_r+0x1c6>
 80102ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80102ee:	445a      	add	r2, fp
 80102f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80102f2:	f89a 3000 	ldrb.w	r3, [sl]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	f000 809f 	beq.w	801043a <_svfiprintf_r+0x1c6>
 80102fc:	2300      	movs	r3, #0
 80102fe:	f04f 32ff 	mov.w	r2, #4294967295
 8010302:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010306:	f10a 0a01 	add.w	sl, sl, #1
 801030a:	9304      	str	r3, [sp, #16]
 801030c:	9307      	str	r3, [sp, #28]
 801030e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010312:	931a      	str	r3, [sp, #104]	@ 0x68
 8010314:	4654      	mov	r4, sl
 8010316:	2205      	movs	r2, #5
 8010318:	f814 1b01 	ldrb.w	r1, [r4], #1
 801031c:	484e      	ldr	r0, [pc, #312]	@ (8010458 <_svfiprintf_r+0x1e4>)
 801031e:	f7ef ff77 	bl	8000210 <memchr>
 8010322:	9a04      	ldr	r2, [sp, #16]
 8010324:	b9d8      	cbnz	r0, 801035e <_svfiprintf_r+0xea>
 8010326:	06d0      	lsls	r0, r2, #27
 8010328:	bf44      	itt	mi
 801032a:	2320      	movmi	r3, #32
 801032c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010330:	0711      	lsls	r1, r2, #28
 8010332:	bf44      	itt	mi
 8010334:	232b      	movmi	r3, #43	@ 0x2b
 8010336:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801033a:	f89a 3000 	ldrb.w	r3, [sl]
 801033e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010340:	d015      	beq.n	801036e <_svfiprintf_r+0xfa>
 8010342:	9a07      	ldr	r2, [sp, #28]
 8010344:	4654      	mov	r4, sl
 8010346:	2000      	movs	r0, #0
 8010348:	f04f 0c0a 	mov.w	ip, #10
 801034c:	4621      	mov	r1, r4
 801034e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010352:	3b30      	subs	r3, #48	@ 0x30
 8010354:	2b09      	cmp	r3, #9
 8010356:	d94b      	bls.n	80103f0 <_svfiprintf_r+0x17c>
 8010358:	b1b0      	cbz	r0, 8010388 <_svfiprintf_r+0x114>
 801035a:	9207      	str	r2, [sp, #28]
 801035c:	e014      	b.n	8010388 <_svfiprintf_r+0x114>
 801035e:	eba0 0308 	sub.w	r3, r0, r8
 8010362:	fa09 f303 	lsl.w	r3, r9, r3
 8010366:	4313      	orrs	r3, r2
 8010368:	9304      	str	r3, [sp, #16]
 801036a:	46a2      	mov	sl, r4
 801036c:	e7d2      	b.n	8010314 <_svfiprintf_r+0xa0>
 801036e:	9b03      	ldr	r3, [sp, #12]
 8010370:	1d19      	adds	r1, r3, #4
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	9103      	str	r1, [sp, #12]
 8010376:	2b00      	cmp	r3, #0
 8010378:	bfbb      	ittet	lt
 801037a:	425b      	neglt	r3, r3
 801037c:	f042 0202 	orrlt.w	r2, r2, #2
 8010380:	9307      	strge	r3, [sp, #28]
 8010382:	9307      	strlt	r3, [sp, #28]
 8010384:	bfb8      	it	lt
 8010386:	9204      	strlt	r2, [sp, #16]
 8010388:	7823      	ldrb	r3, [r4, #0]
 801038a:	2b2e      	cmp	r3, #46	@ 0x2e
 801038c:	d10a      	bne.n	80103a4 <_svfiprintf_r+0x130>
 801038e:	7863      	ldrb	r3, [r4, #1]
 8010390:	2b2a      	cmp	r3, #42	@ 0x2a
 8010392:	d132      	bne.n	80103fa <_svfiprintf_r+0x186>
 8010394:	9b03      	ldr	r3, [sp, #12]
 8010396:	1d1a      	adds	r2, r3, #4
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	9203      	str	r2, [sp, #12]
 801039c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80103a0:	3402      	adds	r4, #2
 80103a2:	9305      	str	r3, [sp, #20]
 80103a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010468 <_svfiprintf_r+0x1f4>
 80103a8:	7821      	ldrb	r1, [r4, #0]
 80103aa:	2203      	movs	r2, #3
 80103ac:	4650      	mov	r0, sl
 80103ae:	f7ef ff2f 	bl	8000210 <memchr>
 80103b2:	b138      	cbz	r0, 80103c4 <_svfiprintf_r+0x150>
 80103b4:	9b04      	ldr	r3, [sp, #16]
 80103b6:	eba0 000a 	sub.w	r0, r0, sl
 80103ba:	2240      	movs	r2, #64	@ 0x40
 80103bc:	4082      	lsls	r2, r0
 80103be:	4313      	orrs	r3, r2
 80103c0:	3401      	adds	r4, #1
 80103c2:	9304      	str	r3, [sp, #16]
 80103c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103c8:	4824      	ldr	r0, [pc, #144]	@ (801045c <_svfiprintf_r+0x1e8>)
 80103ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80103ce:	2206      	movs	r2, #6
 80103d0:	f7ef ff1e 	bl	8000210 <memchr>
 80103d4:	2800      	cmp	r0, #0
 80103d6:	d036      	beq.n	8010446 <_svfiprintf_r+0x1d2>
 80103d8:	4b21      	ldr	r3, [pc, #132]	@ (8010460 <_svfiprintf_r+0x1ec>)
 80103da:	bb1b      	cbnz	r3, 8010424 <_svfiprintf_r+0x1b0>
 80103dc:	9b03      	ldr	r3, [sp, #12]
 80103de:	3307      	adds	r3, #7
 80103e0:	f023 0307 	bic.w	r3, r3, #7
 80103e4:	3308      	adds	r3, #8
 80103e6:	9303      	str	r3, [sp, #12]
 80103e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103ea:	4433      	add	r3, r6
 80103ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80103ee:	e76a      	b.n	80102c6 <_svfiprintf_r+0x52>
 80103f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80103f4:	460c      	mov	r4, r1
 80103f6:	2001      	movs	r0, #1
 80103f8:	e7a8      	b.n	801034c <_svfiprintf_r+0xd8>
 80103fa:	2300      	movs	r3, #0
 80103fc:	3401      	adds	r4, #1
 80103fe:	9305      	str	r3, [sp, #20]
 8010400:	4619      	mov	r1, r3
 8010402:	f04f 0c0a 	mov.w	ip, #10
 8010406:	4620      	mov	r0, r4
 8010408:	f810 2b01 	ldrb.w	r2, [r0], #1
 801040c:	3a30      	subs	r2, #48	@ 0x30
 801040e:	2a09      	cmp	r2, #9
 8010410:	d903      	bls.n	801041a <_svfiprintf_r+0x1a6>
 8010412:	2b00      	cmp	r3, #0
 8010414:	d0c6      	beq.n	80103a4 <_svfiprintf_r+0x130>
 8010416:	9105      	str	r1, [sp, #20]
 8010418:	e7c4      	b.n	80103a4 <_svfiprintf_r+0x130>
 801041a:	fb0c 2101 	mla	r1, ip, r1, r2
 801041e:	4604      	mov	r4, r0
 8010420:	2301      	movs	r3, #1
 8010422:	e7f0      	b.n	8010406 <_svfiprintf_r+0x192>
 8010424:	ab03      	add	r3, sp, #12
 8010426:	9300      	str	r3, [sp, #0]
 8010428:	462a      	mov	r2, r5
 801042a:	4b0e      	ldr	r3, [pc, #56]	@ (8010464 <_svfiprintf_r+0x1f0>)
 801042c:	a904      	add	r1, sp, #16
 801042e:	4638      	mov	r0, r7
 8010430:	f7fc fdf8 	bl	800d024 <_printf_float>
 8010434:	1c42      	adds	r2, r0, #1
 8010436:	4606      	mov	r6, r0
 8010438:	d1d6      	bne.n	80103e8 <_svfiprintf_r+0x174>
 801043a:	89ab      	ldrh	r3, [r5, #12]
 801043c:	065b      	lsls	r3, r3, #25
 801043e:	f53f af2d 	bmi.w	801029c <_svfiprintf_r+0x28>
 8010442:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010444:	e72c      	b.n	80102a0 <_svfiprintf_r+0x2c>
 8010446:	ab03      	add	r3, sp, #12
 8010448:	9300      	str	r3, [sp, #0]
 801044a:	462a      	mov	r2, r5
 801044c:	4b05      	ldr	r3, [pc, #20]	@ (8010464 <_svfiprintf_r+0x1f0>)
 801044e:	a904      	add	r1, sp, #16
 8010450:	4638      	mov	r0, r7
 8010452:	f7fd f87f 	bl	800d554 <_printf_i>
 8010456:	e7ed      	b.n	8010434 <_svfiprintf_r+0x1c0>
 8010458:	08011095 	.word	0x08011095
 801045c:	0801109f 	.word	0x0801109f
 8010460:	0800d025 	.word	0x0800d025
 8010464:	080101bf 	.word	0x080101bf
 8010468:	0801109b 	.word	0x0801109b

0801046c <__sfputc_r>:
 801046c:	6893      	ldr	r3, [r2, #8]
 801046e:	3b01      	subs	r3, #1
 8010470:	2b00      	cmp	r3, #0
 8010472:	b410      	push	{r4}
 8010474:	6093      	str	r3, [r2, #8]
 8010476:	da08      	bge.n	801048a <__sfputc_r+0x1e>
 8010478:	6994      	ldr	r4, [r2, #24]
 801047a:	42a3      	cmp	r3, r4
 801047c:	db01      	blt.n	8010482 <__sfputc_r+0x16>
 801047e:	290a      	cmp	r1, #10
 8010480:	d103      	bne.n	801048a <__sfputc_r+0x1e>
 8010482:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010486:	f7fd bde6 	b.w	800e056 <__swbuf_r>
 801048a:	6813      	ldr	r3, [r2, #0]
 801048c:	1c58      	adds	r0, r3, #1
 801048e:	6010      	str	r0, [r2, #0]
 8010490:	7019      	strb	r1, [r3, #0]
 8010492:	4608      	mov	r0, r1
 8010494:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010498:	4770      	bx	lr

0801049a <__sfputs_r>:
 801049a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801049c:	4606      	mov	r6, r0
 801049e:	460f      	mov	r7, r1
 80104a0:	4614      	mov	r4, r2
 80104a2:	18d5      	adds	r5, r2, r3
 80104a4:	42ac      	cmp	r4, r5
 80104a6:	d101      	bne.n	80104ac <__sfputs_r+0x12>
 80104a8:	2000      	movs	r0, #0
 80104aa:	e007      	b.n	80104bc <__sfputs_r+0x22>
 80104ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104b0:	463a      	mov	r2, r7
 80104b2:	4630      	mov	r0, r6
 80104b4:	f7ff ffda 	bl	801046c <__sfputc_r>
 80104b8:	1c43      	adds	r3, r0, #1
 80104ba:	d1f3      	bne.n	80104a4 <__sfputs_r+0xa>
 80104bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080104c0 <_vfiprintf_r>:
 80104c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104c4:	460d      	mov	r5, r1
 80104c6:	b09d      	sub	sp, #116	@ 0x74
 80104c8:	4614      	mov	r4, r2
 80104ca:	4698      	mov	r8, r3
 80104cc:	4606      	mov	r6, r0
 80104ce:	b118      	cbz	r0, 80104d8 <_vfiprintf_r+0x18>
 80104d0:	6a03      	ldr	r3, [r0, #32]
 80104d2:	b90b      	cbnz	r3, 80104d8 <_vfiprintf_r+0x18>
 80104d4:	f7fd fca2 	bl	800de1c <__sinit>
 80104d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80104da:	07d9      	lsls	r1, r3, #31
 80104dc:	d405      	bmi.n	80104ea <_vfiprintf_r+0x2a>
 80104de:	89ab      	ldrh	r3, [r5, #12]
 80104e0:	059a      	lsls	r2, r3, #22
 80104e2:	d402      	bmi.n	80104ea <_vfiprintf_r+0x2a>
 80104e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80104e6:	f7fd ff38 	bl	800e35a <__retarget_lock_acquire_recursive>
 80104ea:	89ab      	ldrh	r3, [r5, #12]
 80104ec:	071b      	lsls	r3, r3, #28
 80104ee:	d501      	bpl.n	80104f4 <_vfiprintf_r+0x34>
 80104f0:	692b      	ldr	r3, [r5, #16]
 80104f2:	b99b      	cbnz	r3, 801051c <_vfiprintf_r+0x5c>
 80104f4:	4629      	mov	r1, r5
 80104f6:	4630      	mov	r0, r6
 80104f8:	f7fd fdec 	bl	800e0d4 <__swsetup_r>
 80104fc:	b170      	cbz	r0, 801051c <_vfiprintf_r+0x5c>
 80104fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010500:	07dc      	lsls	r4, r3, #31
 8010502:	d504      	bpl.n	801050e <_vfiprintf_r+0x4e>
 8010504:	f04f 30ff 	mov.w	r0, #4294967295
 8010508:	b01d      	add	sp, #116	@ 0x74
 801050a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801050e:	89ab      	ldrh	r3, [r5, #12]
 8010510:	0598      	lsls	r0, r3, #22
 8010512:	d4f7      	bmi.n	8010504 <_vfiprintf_r+0x44>
 8010514:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010516:	f7fd ff21 	bl	800e35c <__retarget_lock_release_recursive>
 801051a:	e7f3      	b.n	8010504 <_vfiprintf_r+0x44>
 801051c:	2300      	movs	r3, #0
 801051e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010520:	2320      	movs	r3, #32
 8010522:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010526:	f8cd 800c 	str.w	r8, [sp, #12]
 801052a:	2330      	movs	r3, #48	@ 0x30
 801052c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80106dc <_vfiprintf_r+0x21c>
 8010530:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010534:	f04f 0901 	mov.w	r9, #1
 8010538:	4623      	mov	r3, r4
 801053a:	469a      	mov	sl, r3
 801053c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010540:	b10a      	cbz	r2, 8010546 <_vfiprintf_r+0x86>
 8010542:	2a25      	cmp	r2, #37	@ 0x25
 8010544:	d1f9      	bne.n	801053a <_vfiprintf_r+0x7a>
 8010546:	ebba 0b04 	subs.w	fp, sl, r4
 801054a:	d00b      	beq.n	8010564 <_vfiprintf_r+0xa4>
 801054c:	465b      	mov	r3, fp
 801054e:	4622      	mov	r2, r4
 8010550:	4629      	mov	r1, r5
 8010552:	4630      	mov	r0, r6
 8010554:	f7ff ffa1 	bl	801049a <__sfputs_r>
 8010558:	3001      	adds	r0, #1
 801055a:	f000 80a7 	beq.w	80106ac <_vfiprintf_r+0x1ec>
 801055e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010560:	445a      	add	r2, fp
 8010562:	9209      	str	r2, [sp, #36]	@ 0x24
 8010564:	f89a 3000 	ldrb.w	r3, [sl]
 8010568:	2b00      	cmp	r3, #0
 801056a:	f000 809f 	beq.w	80106ac <_vfiprintf_r+0x1ec>
 801056e:	2300      	movs	r3, #0
 8010570:	f04f 32ff 	mov.w	r2, #4294967295
 8010574:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010578:	f10a 0a01 	add.w	sl, sl, #1
 801057c:	9304      	str	r3, [sp, #16]
 801057e:	9307      	str	r3, [sp, #28]
 8010580:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010584:	931a      	str	r3, [sp, #104]	@ 0x68
 8010586:	4654      	mov	r4, sl
 8010588:	2205      	movs	r2, #5
 801058a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801058e:	4853      	ldr	r0, [pc, #332]	@ (80106dc <_vfiprintf_r+0x21c>)
 8010590:	f7ef fe3e 	bl	8000210 <memchr>
 8010594:	9a04      	ldr	r2, [sp, #16]
 8010596:	b9d8      	cbnz	r0, 80105d0 <_vfiprintf_r+0x110>
 8010598:	06d1      	lsls	r1, r2, #27
 801059a:	bf44      	itt	mi
 801059c:	2320      	movmi	r3, #32
 801059e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80105a2:	0713      	lsls	r3, r2, #28
 80105a4:	bf44      	itt	mi
 80105a6:	232b      	movmi	r3, #43	@ 0x2b
 80105a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80105ac:	f89a 3000 	ldrb.w	r3, [sl]
 80105b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80105b2:	d015      	beq.n	80105e0 <_vfiprintf_r+0x120>
 80105b4:	9a07      	ldr	r2, [sp, #28]
 80105b6:	4654      	mov	r4, sl
 80105b8:	2000      	movs	r0, #0
 80105ba:	f04f 0c0a 	mov.w	ip, #10
 80105be:	4621      	mov	r1, r4
 80105c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105c4:	3b30      	subs	r3, #48	@ 0x30
 80105c6:	2b09      	cmp	r3, #9
 80105c8:	d94b      	bls.n	8010662 <_vfiprintf_r+0x1a2>
 80105ca:	b1b0      	cbz	r0, 80105fa <_vfiprintf_r+0x13a>
 80105cc:	9207      	str	r2, [sp, #28]
 80105ce:	e014      	b.n	80105fa <_vfiprintf_r+0x13a>
 80105d0:	eba0 0308 	sub.w	r3, r0, r8
 80105d4:	fa09 f303 	lsl.w	r3, r9, r3
 80105d8:	4313      	orrs	r3, r2
 80105da:	9304      	str	r3, [sp, #16]
 80105dc:	46a2      	mov	sl, r4
 80105de:	e7d2      	b.n	8010586 <_vfiprintf_r+0xc6>
 80105e0:	9b03      	ldr	r3, [sp, #12]
 80105e2:	1d19      	adds	r1, r3, #4
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	9103      	str	r1, [sp, #12]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	bfbb      	ittet	lt
 80105ec:	425b      	neglt	r3, r3
 80105ee:	f042 0202 	orrlt.w	r2, r2, #2
 80105f2:	9307      	strge	r3, [sp, #28]
 80105f4:	9307      	strlt	r3, [sp, #28]
 80105f6:	bfb8      	it	lt
 80105f8:	9204      	strlt	r2, [sp, #16]
 80105fa:	7823      	ldrb	r3, [r4, #0]
 80105fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80105fe:	d10a      	bne.n	8010616 <_vfiprintf_r+0x156>
 8010600:	7863      	ldrb	r3, [r4, #1]
 8010602:	2b2a      	cmp	r3, #42	@ 0x2a
 8010604:	d132      	bne.n	801066c <_vfiprintf_r+0x1ac>
 8010606:	9b03      	ldr	r3, [sp, #12]
 8010608:	1d1a      	adds	r2, r3, #4
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	9203      	str	r2, [sp, #12]
 801060e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010612:	3402      	adds	r4, #2
 8010614:	9305      	str	r3, [sp, #20]
 8010616:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80106ec <_vfiprintf_r+0x22c>
 801061a:	7821      	ldrb	r1, [r4, #0]
 801061c:	2203      	movs	r2, #3
 801061e:	4650      	mov	r0, sl
 8010620:	f7ef fdf6 	bl	8000210 <memchr>
 8010624:	b138      	cbz	r0, 8010636 <_vfiprintf_r+0x176>
 8010626:	9b04      	ldr	r3, [sp, #16]
 8010628:	eba0 000a 	sub.w	r0, r0, sl
 801062c:	2240      	movs	r2, #64	@ 0x40
 801062e:	4082      	lsls	r2, r0
 8010630:	4313      	orrs	r3, r2
 8010632:	3401      	adds	r4, #1
 8010634:	9304      	str	r3, [sp, #16]
 8010636:	f814 1b01 	ldrb.w	r1, [r4], #1
 801063a:	4829      	ldr	r0, [pc, #164]	@ (80106e0 <_vfiprintf_r+0x220>)
 801063c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010640:	2206      	movs	r2, #6
 8010642:	f7ef fde5 	bl	8000210 <memchr>
 8010646:	2800      	cmp	r0, #0
 8010648:	d03f      	beq.n	80106ca <_vfiprintf_r+0x20a>
 801064a:	4b26      	ldr	r3, [pc, #152]	@ (80106e4 <_vfiprintf_r+0x224>)
 801064c:	bb1b      	cbnz	r3, 8010696 <_vfiprintf_r+0x1d6>
 801064e:	9b03      	ldr	r3, [sp, #12]
 8010650:	3307      	adds	r3, #7
 8010652:	f023 0307 	bic.w	r3, r3, #7
 8010656:	3308      	adds	r3, #8
 8010658:	9303      	str	r3, [sp, #12]
 801065a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801065c:	443b      	add	r3, r7
 801065e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010660:	e76a      	b.n	8010538 <_vfiprintf_r+0x78>
 8010662:	fb0c 3202 	mla	r2, ip, r2, r3
 8010666:	460c      	mov	r4, r1
 8010668:	2001      	movs	r0, #1
 801066a:	e7a8      	b.n	80105be <_vfiprintf_r+0xfe>
 801066c:	2300      	movs	r3, #0
 801066e:	3401      	adds	r4, #1
 8010670:	9305      	str	r3, [sp, #20]
 8010672:	4619      	mov	r1, r3
 8010674:	f04f 0c0a 	mov.w	ip, #10
 8010678:	4620      	mov	r0, r4
 801067a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801067e:	3a30      	subs	r2, #48	@ 0x30
 8010680:	2a09      	cmp	r2, #9
 8010682:	d903      	bls.n	801068c <_vfiprintf_r+0x1cc>
 8010684:	2b00      	cmp	r3, #0
 8010686:	d0c6      	beq.n	8010616 <_vfiprintf_r+0x156>
 8010688:	9105      	str	r1, [sp, #20]
 801068a:	e7c4      	b.n	8010616 <_vfiprintf_r+0x156>
 801068c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010690:	4604      	mov	r4, r0
 8010692:	2301      	movs	r3, #1
 8010694:	e7f0      	b.n	8010678 <_vfiprintf_r+0x1b8>
 8010696:	ab03      	add	r3, sp, #12
 8010698:	9300      	str	r3, [sp, #0]
 801069a:	462a      	mov	r2, r5
 801069c:	4b12      	ldr	r3, [pc, #72]	@ (80106e8 <_vfiprintf_r+0x228>)
 801069e:	a904      	add	r1, sp, #16
 80106a0:	4630      	mov	r0, r6
 80106a2:	f7fc fcbf 	bl	800d024 <_printf_float>
 80106a6:	4607      	mov	r7, r0
 80106a8:	1c78      	adds	r0, r7, #1
 80106aa:	d1d6      	bne.n	801065a <_vfiprintf_r+0x19a>
 80106ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80106ae:	07d9      	lsls	r1, r3, #31
 80106b0:	d405      	bmi.n	80106be <_vfiprintf_r+0x1fe>
 80106b2:	89ab      	ldrh	r3, [r5, #12]
 80106b4:	059a      	lsls	r2, r3, #22
 80106b6:	d402      	bmi.n	80106be <_vfiprintf_r+0x1fe>
 80106b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80106ba:	f7fd fe4f 	bl	800e35c <__retarget_lock_release_recursive>
 80106be:	89ab      	ldrh	r3, [r5, #12]
 80106c0:	065b      	lsls	r3, r3, #25
 80106c2:	f53f af1f 	bmi.w	8010504 <_vfiprintf_r+0x44>
 80106c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80106c8:	e71e      	b.n	8010508 <_vfiprintf_r+0x48>
 80106ca:	ab03      	add	r3, sp, #12
 80106cc:	9300      	str	r3, [sp, #0]
 80106ce:	462a      	mov	r2, r5
 80106d0:	4b05      	ldr	r3, [pc, #20]	@ (80106e8 <_vfiprintf_r+0x228>)
 80106d2:	a904      	add	r1, sp, #16
 80106d4:	4630      	mov	r0, r6
 80106d6:	f7fc ff3d 	bl	800d554 <_printf_i>
 80106da:	e7e4      	b.n	80106a6 <_vfiprintf_r+0x1e6>
 80106dc:	08011095 	.word	0x08011095
 80106e0:	0801109f 	.word	0x0801109f
 80106e4:	0800d025 	.word	0x0800d025
 80106e8:	0801049b 	.word	0x0801049b
 80106ec:	0801109b 	.word	0x0801109b

080106f0 <__swhatbuf_r>:
 80106f0:	b570      	push	{r4, r5, r6, lr}
 80106f2:	460c      	mov	r4, r1
 80106f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106f8:	2900      	cmp	r1, #0
 80106fa:	b096      	sub	sp, #88	@ 0x58
 80106fc:	4615      	mov	r5, r2
 80106fe:	461e      	mov	r6, r3
 8010700:	da0d      	bge.n	801071e <__swhatbuf_r+0x2e>
 8010702:	89a3      	ldrh	r3, [r4, #12]
 8010704:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010708:	f04f 0100 	mov.w	r1, #0
 801070c:	bf14      	ite	ne
 801070e:	2340      	movne	r3, #64	@ 0x40
 8010710:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010714:	2000      	movs	r0, #0
 8010716:	6031      	str	r1, [r6, #0]
 8010718:	602b      	str	r3, [r5, #0]
 801071a:	b016      	add	sp, #88	@ 0x58
 801071c:	bd70      	pop	{r4, r5, r6, pc}
 801071e:	466a      	mov	r2, sp
 8010720:	f000 f892 	bl	8010848 <_fstat_r>
 8010724:	2800      	cmp	r0, #0
 8010726:	dbec      	blt.n	8010702 <__swhatbuf_r+0x12>
 8010728:	9901      	ldr	r1, [sp, #4]
 801072a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801072e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010732:	4259      	negs	r1, r3
 8010734:	4159      	adcs	r1, r3
 8010736:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801073a:	e7eb      	b.n	8010714 <__swhatbuf_r+0x24>

0801073c <__smakebuf_r>:
 801073c:	898b      	ldrh	r3, [r1, #12]
 801073e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010740:	079d      	lsls	r5, r3, #30
 8010742:	4606      	mov	r6, r0
 8010744:	460c      	mov	r4, r1
 8010746:	d507      	bpl.n	8010758 <__smakebuf_r+0x1c>
 8010748:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801074c:	6023      	str	r3, [r4, #0]
 801074e:	6123      	str	r3, [r4, #16]
 8010750:	2301      	movs	r3, #1
 8010752:	6163      	str	r3, [r4, #20]
 8010754:	b003      	add	sp, #12
 8010756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010758:	ab01      	add	r3, sp, #4
 801075a:	466a      	mov	r2, sp
 801075c:	f7ff ffc8 	bl	80106f0 <__swhatbuf_r>
 8010760:	9f00      	ldr	r7, [sp, #0]
 8010762:	4605      	mov	r5, r0
 8010764:	4639      	mov	r1, r7
 8010766:	4630      	mov	r0, r6
 8010768:	f7fb fcae 	bl	800c0c8 <_malloc_r>
 801076c:	b948      	cbnz	r0, 8010782 <__smakebuf_r+0x46>
 801076e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010772:	059a      	lsls	r2, r3, #22
 8010774:	d4ee      	bmi.n	8010754 <__smakebuf_r+0x18>
 8010776:	f023 0303 	bic.w	r3, r3, #3
 801077a:	f043 0302 	orr.w	r3, r3, #2
 801077e:	81a3      	strh	r3, [r4, #12]
 8010780:	e7e2      	b.n	8010748 <__smakebuf_r+0xc>
 8010782:	89a3      	ldrh	r3, [r4, #12]
 8010784:	6020      	str	r0, [r4, #0]
 8010786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801078a:	81a3      	strh	r3, [r4, #12]
 801078c:	9b01      	ldr	r3, [sp, #4]
 801078e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010792:	b15b      	cbz	r3, 80107ac <__smakebuf_r+0x70>
 8010794:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010798:	4630      	mov	r0, r6
 801079a:	f000 f867 	bl	801086c <_isatty_r>
 801079e:	b128      	cbz	r0, 80107ac <__smakebuf_r+0x70>
 80107a0:	89a3      	ldrh	r3, [r4, #12]
 80107a2:	f023 0303 	bic.w	r3, r3, #3
 80107a6:	f043 0301 	orr.w	r3, r3, #1
 80107aa:	81a3      	strh	r3, [r4, #12]
 80107ac:	89a3      	ldrh	r3, [r4, #12]
 80107ae:	431d      	orrs	r5, r3
 80107b0:	81a5      	strh	r5, [r4, #12]
 80107b2:	e7cf      	b.n	8010754 <__smakebuf_r+0x18>

080107b4 <memmove>:
 80107b4:	4288      	cmp	r0, r1
 80107b6:	b510      	push	{r4, lr}
 80107b8:	eb01 0402 	add.w	r4, r1, r2
 80107bc:	d902      	bls.n	80107c4 <memmove+0x10>
 80107be:	4284      	cmp	r4, r0
 80107c0:	4623      	mov	r3, r4
 80107c2:	d807      	bhi.n	80107d4 <memmove+0x20>
 80107c4:	1e43      	subs	r3, r0, #1
 80107c6:	42a1      	cmp	r1, r4
 80107c8:	d008      	beq.n	80107dc <memmove+0x28>
 80107ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80107ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80107d2:	e7f8      	b.n	80107c6 <memmove+0x12>
 80107d4:	4402      	add	r2, r0
 80107d6:	4601      	mov	r1, r0
 80107d8:	428a      	cmp	r2, r1
 80107da:	d100      	bne.n	80107de <memmove+0x2a>
 80107dc:	bd10      	pop	{r4, pc}
 80107de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80107e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80107e6:	e7f7      	b.n	80107d8 <memmove+0x24>

080107e8 <_raise_r>:
 80107e8:	291f      	cmp	r1, #31
 80107ea:	b538      	push	{r3, r4, r5, lr}
 80107ec:	4605      	mov	r5, r0
 80107ee:	460c      	mov	r4, r1
 80107f0:	d904      	bls.n	80107fc <_raise_r+0x14>
 80107f2:	2316      	movs	r3, #22
 80107f4:	6003      	str	r3, [r0, #0]
 80107f6:	f04f 30ff 	mov.w	r0, #4294967295
 80107fa:	bd38      	pop	{r3, r4, r5, pc}
 80107fc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80107fe:	b112      	cbz	r2, 8010806 <_raise_r+0x1e>
 8010800:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010804:	b94b      	cbnz	r3, 801081a <_raise_r+0x32>
 8010806:	4628      	mov	r0, r5
 8010808:	f000 f852 	bl	80108b0 <_getpid_r>
 801080c:	4622      	mov	r2, r4
 801080e:	4601      	mov	r1, r0
 8010810:	4628      	mov	r0, r5
 8010812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010816:	f000 b839 	b.w	801088c <_kill_r>
 801081a:	2b01      	cmp	r3, #1
 801081c:	d00a      	beq.n	8010834 <_raise_r+0x4c>
 801081e:	1c59      	adds	r1, r3, #1
 8010820:	d103      	bne.n	801082a <_raise_r+0x42>
 8010822:	2316      	movs	r3, #22
 8010824:	6003      	str	r3, [r0, #0]
 8010826:	2001      	movs	r0, #1
 8010828:	e7e7      	b.n	80107fa <_raise_r+0x12>
 801082a:	2100      	movs	r1, #0
 801082c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010830:	4620      	mov	r0, r4
 8010832:	4798      	blx	r3
 8010834:	2000      	movs	r0, #0
 8010836:	e7e0      	b.n	80107fa <_raise_r+0x12>

08010838 <raise>:
 8010838:	4b02      	ldr	r3, [pc, #8]	@ (8010844 <raise+0xc>)
 801083a:	4601      	mov	r1, r0
 801083c:	6818      	ldr	r0, [r3, #0]
 801083e:	f7ff bfd3 	b.w	80107e8 <_raise_r>
 8010842:	bf00      	nop
 8010844:	2000018c 	.word	0x2000018c

08010848 <_fstat_r>:
 8010848:	b538      	push	{r3, r4, r5, lr}
 801084a:	4d07      	ldr	r5, [pc, #28]	@ (8010868 <_fstat_r+0x20>)
 801084c:	2300      	movs	r3, #0
 801084e:	4604      	mov	r4, r0
 8010850:	4608      	mov	r0, r1
 8010852:	4611      	mov	r1, r2
 8010854:	602b      	str	r3, [r5, #0]
 8010856:	f7f1 fa69 	bl	8001d2c <_fstat>
 801085a:	1c43      	adds	r3, r0, #1
 801085c:	d102      	bne.n	8010864 <_fstat_r+0x1c>
 801085e:	682b      	ldr	r3, [r5, #0]
 8010860:	b103      	cbz	r3, 8010864 <_fstat_r+0x1c>
 8010862:	6023      	str	r3, [r4, #0]
 8010864:	bd38      	pop	{r3, r4, r5, pc}
 8010866:	bf00      	nop
 8010868:	200006cc 	.word	0x200006cc

0801086c <_isatty_r>:
 801086c:	b538      	push	{r3, r4, r5, lr}
 801086e:	4d06      	ldr	r5, [pc, #24]	@ (8010888 <_isatty_r+0x1c>)
 8010870:	2300      	movs	r3, #0
 8010872:	4604      	mov	r4, r0
 8010874:	4608      	mov	r0, r1
 8010876:	602b      	str	r3, [r5, #0]
 8010878:	f7f1 fa7f 	bl	8001d7a <_isatty>
 801087c:	1c43      	adds	r3, r0, #1
 801087e:	d102      	bne.n	8010886 <_isatty_r+0x1a>
 8010880:	682b      	ldr	r3, [r5, #0]
 8010882:	b103      	cbz	r3, 8010886 <_isatty_r+0x1a>
 8010884:	6023      	str	r3, [r4, #0]
 8010886:	bd38      	pop	{r3, r4, r5, pc}
 8010888:	200006cc 	.word	0x200006cc

0801088c <_kill_r>:
 801088c:	b538      	push	{r3, r4, r5, lr}
 801088e:	4d07      	ldr	r5, [pc, #28]	@ (80108ac <_kill_r+0x20>)
 8010890:	2300      	movs	r3, #0
 8010892:	4604      	mov	r4, r0
 8010894:	4608      	mov	r0, r1
 8010896:	4611      	mov	r1, r2
 8010898:	602b      	str	r3, [r5, #0]
 801089a:	f7f1 f95f 	bl	8001b5c <_kill>
 801089e:	1c43      	adds	r3, r0, #1
 80108a0:	d102      	bne.n	80108a8 <_kill_r+0x1c>
 80108a2:	682b      	ldr	r3, [r5, #0]
 80108a4:	b103      	cbz	r3, 80108a8 <_kill_r+0x1c>
 80108a6:	6023      	str	r3, [r4, #0]
 80108a8:	bd38      	pop	{r3, r4, r5, pc}
 80108aa:	bf00      	nop
 80108ac:	200006cc 	.word	0x200006cc

080108b0 <_getpid_r>:
 80108b0:	f7f1 b94c 	b.w	8001b4c <_getpid>

080108b4 <_malloc_usable_size_r>:
 80108b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80108b8:	1f18      	subs	r0, r3, #4
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	bfbc      	itt	lt
 80108be:	580b      	ldrlt	r3, [r1, r0]
 80108c0:	18c0      	addlt	r0, r0, r3
 80108c2:	4770      	bx	lr

080108c4 <_init>:
 80108c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108c6:	bf00      	nop
 80108c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108ca:	bc08      	pop	{r3}
 80108cc:	469e      	mov	lr, r3
 80108ce:	4770      	bx	lr

080108d0 <_fini>:
 80108d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108d2:	bf00      	nop
 80108d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108d6:	bc08      	pop	{r3}
 80108d8:	469e      	mov	lr, r3
 80108da:	4770      	bx	lr
