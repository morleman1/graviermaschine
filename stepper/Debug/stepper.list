
stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017fc4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002320  08018198  08018198  00019198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a4b8  0801a4b8  0001c224  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801a4b8  0801a4b8  0001b4b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a4c0  0801a4c0  0001c224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a4c0  0801a4c0  0001b4c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a4c8  0801a4c8  0001b4c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000224  20000000  0801a4cc  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b8  20000224  0801a6f0  0001c224  2**2
                  ALLOC
 10 ._user_heap_stack 00038004  200007dc  0801a6f0  0001c7dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001c224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e521  00000000  00000000  0001c254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042c5  00000000  00000000  0003a775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b0  00000000  00000000  0003ea40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013ae  00000000  00000000  000402f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b5f6  00000000  00000000  0004169e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002290c  00000000  00000000  0006cc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010ba5a  00000000  00000000  0008f5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019affa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008600  00000000  00000000  0019b040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001a3640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000224 	.word	0x20000224
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801817c 	.word	0x0801817c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000228 	.word	0x20000228
 800020c:	0801817c 	.word	0x0801817c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9be 	b.w	800107c <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	468e      	mov	lr, r1
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	4688      	mov	r8, r1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d14a      	bne.n	8000e2a <__udivmoddi4+0xa6>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4617      	mov	r7, r2
 8000d98:	d962      	bls.n	8000e60 <__udivmoddi4+0xdc>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	b14e      	cbz	r6, 8000db4 <__udivmoddi4+0x30>
 8000da0:	f1c6 0320 	rsb	r3, r6, #32
 8000da4:	fa01 f806 	lsl.w	r8, r1, r6
 8000da8:	fa20 f303 	lsr.w	r3, r0, r3
 8000dac:	40b7      	lsls	r7, r6
 8000dae:	ea43 0808 	orr.w	r8, r3, r8
 8000db2:	40b4      	lsls	r4, r6
 8000db4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000dc0:	0c23      	lsrs	r3, r4, #16
 8000dc2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dca:	fb01 f20c 	mul.w	r2, r1, ip
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x62>
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dd8:	f080 80ea 	bcs.w	8000fb0 <__udivmoddi4+0x22c>
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	f240 80e7 	bls.w	8000fb0 <__udivmoddi4+0x22c>
 8000de2:	3902      	subs	r1, #2
 8000de4:	443b      	add	r3, r7
 8000de6:	1a9a      	subs	r2, r3, r2
 8000de8:	b2a3      	uxth	r3, r4
 8000dea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000df2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000df6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dfa:	459c      	cmp	ip, r3
 8000dfc:	d909      	bls.n	8000e12 <__udivmoddi4+0x8e>
 8000dfe:	18fb      	adds	r3, r7, r3
 8000e00:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e04:	f080 80d6 	bcs.w	8000fb4 <__udivmoddi4+0x230>
 8000e08:	459c      	cmp	ip, r3
 8000e0a:	f240 80d3 	bls.w	8000fb4 <__udivmoddi4+0x230>
 8000e0e:	443b      	add	r3, r7
 8000e10:	3802      	subs	r0, #2
 8000e12:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e16:	eba3 030c 	sub.w	r3, r3, ip
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	b11d      	cbz	r5, 8000e26 <__udivmoddi4+0xa2>
 8000e1e:	40f3      	lsrs	r3, r6
 8000e20:	2200      	movs	r2, #0
 8000e22:	e9c5 3200 	strd	r3, r2, [r5]
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d905      	bls.n	8000e3a <__udivmoddi4+0xb6>
 8000e2e:	b10d      	cbz	r5, 8000e34 <__udivmoddi4+0xb0>
 8000e30:	e9c5 0100 	strd	r0, r1, [r5]
 8000e34:	2100      	movs	r1, #0
 8000e36:	4608      	mov	r0, r1
 8000e38:	e7f5      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e3a:	fab3 f183 	clz	r1, r3
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d146      	bne.n	8000ed0 <__udivmoddi4+0x14c>
 8000e42:	4573      	cmp	r3, lr
 8000e44:	d302      	bcc.n	8000e4c <__udivmoddi4+0xc8>
 8000e46:	4282      	cmp	r2, r0
 8000e48:	f200 8105 	bhi.w	8001056 <__udivmoddi4+0x2d2>
 8000e4c:	1a84      	subs	r4, r0, r2
 8000e4e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e52:	2001      	movs	r0, #1
 8000e54:	4690      	mov	r8, r2
 8000e56:	2d00      	cmp	r5, #0
 8000e58:	d0e5      	beq.n	8000e26 <__udivmoddi4+0xa2>
 8000e5a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e5e:	e7e2      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	f000 8090 	beq.w	8000f86 <__udivmoddi4+0x202>
 8000e66:	fab2 f682 	clz	r6, r2
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	f040 80a4 	bne.w	8000fb8 <__udivmoddi4+0x234>
 8000e70:	1a8a      	subs	r2, r1, r2
 8000e72:	0c03      	lsrs	r3, r0, #16
 8000e74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e78:	b280      	uxth	r0, r0
 8000e7a:	b2bc      	uxth	r4, r7
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e82:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e8a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d907      	bls.n	8000ea2 <__udivmoddi4+0x11e>
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x11c>
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	f200 80e0 	bhi.w	8001060 <__udivmoddi4+0x2dc>
 8000ea0:	46c4      	mov	ip, r8
 8000ea2:	1a9b      	subs	r3, r3, r2
 8000ea4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ea8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000eac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000eb0:	fb02 f404 	mul.w	r4, r2, r4
 8000eb4:	429c      	cmp	r4, r3
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0x144>
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	f102 30ff 	add.w	r0, r2, #4294967295
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0x142>
 8000ec0:	429c      	cmp	r4, r3
 8000ec2:	f200 80ca 	bhi.w	800105a <__udivmoddi4+0x2d6>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	1b1b      	subs	r3, r3, r4
 8000eca:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ece:	e7a5      	b.n	8000e1c <__udivmoddi4+0x98>
 8000ed0:	f1c1 0620 	rsb	r6, r1, #32
 8000ed4:	408b      	lsls	r3, r1
 8000ed6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eda:	431f      	orrs	r7, r3
 8000edc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ee0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ee4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ee8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eec:	4323      	orrs	r3, r4
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	fa1f fc87 	uxth.w	ip, r7
 8000ef6:	fbbe f0f9 	udiv	r0, lr, r9
 8000efa:	0c1c      	lsrs	r4, r3, #16
 8000efc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f00:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f04:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f0e:	d909      	bls.n	8000f24 <__udivmoddi4+0x1a0>
 8000f10:	193c      	adds	r4, r7, r4
 8000f12:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f16:	f080 809c 	bcs.w	8001052 <__udivmoddi4+0x2ce>
 8000f1a:	45a6      	cmp	lr, r4
 8000f1c:	f240 8099 	bls.w	8001052 <__udivmoddi4+0x2ce>
 8000f20:	3802      	subs	r0, #2
 8000f22:	443c      	add	r4, r7
 8000f24:	eba4 040e 	sub.w	r4, r4, lr
 8000f28:	fa1f fe83 	uxth.w	lr, r3
 8000f2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f30:	fb09 4413 	mls	r4, r9, r3, r4
 8000f34:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f38:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f3c:	45a4      	cmp	ip, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1ce>
 8000f40:	193c      	adds	r4, r7, r4
 8000f42:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f46:	f080 8082 	bcs.w	800104e <__udivmoddi4+0x2ca>
 8000f4a:	45a4      	cmp	ip, r4
 8000f4c:	d97f      	bls.n	800104e <__udivmoddi4+0x2ca>
 8000f4e:	3b02      	subs	r3, #2
 8000f50:	443c      	add	r4, r7
 8000f52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f56:	eba4 040c 	sub.w	r4, r4, ip
 8000f5a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f5e:	4564      	cmp	r4, ip
 8000f60:	4673      	mov	r3, lr
 8000f62:	46e1      	mov	r9, ip
 8000f64:	d362      	bcc.n	800102c <__udivmoddi4+0x2a8>
 8000f66:	d05f      	beq.n	8001028 <__udivmoddi4+0x2a4>
 8000f68:	b15d      	cbz	r5, 8000f82 <__udivmoddi4+0x1fe>
 8000f6a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f6e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f72:	fa04 f606 	lsl.w	r6, r4, r6
 8000f76:	fa22 f301 	lsr.w	r3, r2, r1
 8000f7a:	431e      	orrs	r6, r3
 8000f7c:	40cc      	lsrs	r4, r1
 8000f7e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f82:	2100      	movs	r1, #0
 8000f84:	e74f      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000f86:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f8a:	0c01      	lsrs	r1, r0, #16
 8000f8c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f90:	b280      	uxth	r0, r0
 8000f92:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f96:	463b      	mov	r3, r7
 8000f98:	4638      	mov	r0, r7
 8000f9a:	463c      	mov	r4, r7
 8000f9c:	46b8      	mov	r8, r7
 8000f9e:	46be      	mov	lr, r7
 8000fa0:	2620      	movs	r6, #32
 8000fa2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000fa6:	eba2 0208 	sub.w	r2, r2, r8
 8000faa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000fae:	e766      	b.n	8000e7e <__udivmoddi4+0xfa>
 8000fb0:	4601      	mov	r1, r0
 8000fb2:	e718      	b.n	8000de6 <__udivmoddi4+0x62>
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	e72c      	b.n	8000e12 <__udivmoddi4+0x8e>
 8000fb8:	f1c6 0220 	rsb	r2, r6, #32
 8000fbc:	fa2e f302 	lsr.w	r3, lr, r2
 8000fc0:	40b7      	lsls	r7, r6
 8000fc2:	40b1      	lsls	r1, r6
 8000fc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fd2:	b2bc      	uxth	r4, r7
 8000fd4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb08 f904 	mul.w	r9, r8, r4
 8000fe2:	40b0      	lsls	r0, r6
 8000fe4:	4589      	cmp	r9, r1
 8000fe6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fea:	b280      	uxth	r0, r0
 8000fec:	d93e      	bls.n	800106c <__udivmoddi4+0x2e8>
 8000fee:	1879      	adds	r1, r7, r1
 8000ff0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ff4:	d201      	bcs.n	8000ffa <__udivmoddi4+0x276>
 8000ff6:	4589      	cmp	r9, r1
 8000ff8:	d81f      	bhi.n	800103a <__udivmoddi4+0x2b6>
 8000ffa:	eba1 0109 	sub.w	r1, r1, r9
 8000ffe:	fbb1 f9fe 	udiv	r9, r1, lr
 8001002:	fb09 f804 	mul.w	r8, r9, r4
 8001006:	fb0e 1119 	mls	r1, lr, r9, r1
 800100a:	b292      	uxth	r2, r2
 800100c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001010:	4542      	cmp	r2, r8
 8001012:	d229      	bcs.n	8001068 <__udivmoddi4+0x2e4>
 8001014:	18ba      	adds	r2, r7, r2
 8001016:	f109 31ff 	add.w	r1, r9, #4294967295
 800101a:	d2c4      	bcs.n	8000fa6 <__udivmoddi4+0x222>
 800101c:	4542      	cmp	r2, r8
 800101e:	d2c2      	bcs.n	8000fa6 <__udivmoddi4+0x222>
 8001020:	f1a9 0102 	sub.w	r1, r9, #2
 8001024:	443a      	add	r2, r7
 8001026:	e7be      	b.n	8000fa6 <__udivmoddi4+0x222>
 8001028:	45f0      	cmp	r8, lr
 800102a:	d29d      	bcs.n	8000f68 <__udivmoddi4+0x1e4>
 800102c:	ebbe 0302 	subs.w	r3, lr, r2
 8001030:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001034:	3801      	subs	r0, #1
 8001036:	46e1      	mov	r9, ip
 8001038:	e796      	b.n	8000f68 <__udivmoddi4+0x1e4>
 800103a:	eba7 0909 	sub.w	r9, r7, r9
 800103e:	4449      	add	r1, r9
 8001040:	f1a8 0c02 	sub.w	ip, r8, #2
 8001044:	fbb1 f9fe 	udiv	r9, r1, lr
 8001048:	fb09 f804 	mul.w	r8, r9, r4
 800104c:	e7db      	b.n	8001006 <__udivmoddi4+0x282>
 800104e:	4673      	mov	r3, lr
 8001050:	e77f      	b.n	8000f52 <__udivmoddi4+0x1ce>
 8001052:	4650      	mov	r0, sl
 8001054:	e766      	b.n	8000f24 <__udivmoddi4+0x1a0>
 8001056:	4608      	mov	r0, r1
 8001058:	e6fd      	b.n	8000e56 <__udivmoddi4+0xd2>
 800105a:	443b      	add	r3, r7
 800105c:	3a02      	subs	r2, #2
 800105e:	e733      	b.n	8000ec8 <__udivmoddi4+0x144>
 8001060:	f1ac 0c02 	sub.w	ip, ip, #2
 8001064:	443b      	add	r3, r7
 8001066:	e71c      	b.n	8000ea2 <__udivmoddi4+0x11e>
 8001068:	4649      	mov	r1, r9
 800106a:	e79c      	b.n	8000fa6 <__udivmoddi4+0x222>
 800106c:	eba1 0109 	sub.w	r1, r1, r9
 8001070:	46c4      	mov	ip, r8
 8001072:	fbb1 f9fe 	udiv	r9, r1, lr
 8001076:	fb09 f804 	mul.w	r8, r9, r4
 800107a:	e7c4      	b.n	8001006 <__udivmoddi4+0x282>

0800107c <__aeabi_idiv0>:
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop

08001080 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001084:	f3bf 8f4f 	dsb	sy
}
 8001088:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800108a:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <__NVIC_SystemReset+0x24>)
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001092:	4904      	ldr	r1, [pc, #16]	@ (80010a4 <__NVIC_SystemReset+0x24>)
 8001094:	4b04      	ldr	r3, [pc, #16]	@ (80010a8 <__NVIC_SystemReset+0x28>)
 8001096:	4313      	orrs	r3, r2
 8001098:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800109a:	f3bf 8f4f 	dsb	sy
}
 800109e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <__NVIC_SystemReset+0x20>
 80010a4:	e000ed00 	.word	0xe000ed00
 80010a8:	05fa0004 	.word	0x05fa0004

080010ac <ControlSequenceParserConsume>:
#endif

// --------------------------------------------------------------------------------------------------------------------
cspTYPE ControlSequenceParserConsume( char input, cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
#define CHECK_FOR_OVERFLOW(x) do { if ( ((x)+1) > s->maxLength ) \
	                          { s->type = ctrlOVERFLOW; s->length = 0; s->state = ctrlpsIDLE_DETECT; \
	                          return csptCONTROL; } } while(0)

	switch (s->state)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b04      	cmp	r3, #4
 80010be:	f200 8131 	bhi.w	8001324 <ControlSequenceParserConsume+0x278>
 80010c2:	a201      	add	r2, pc, #4	@ (adr r2, 80010c8 <ControlSequenceParserConsume+0x1c>)
 80010c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c8:	080010dd 	.word	0x080010dd
 80010cc:	08001133 	.word	0x08001133
 80010d0:	08001207 	.word	0x08001207
 80010d4:	08001271 	.word	0x08001271
 80010d8:	080012bb 	.word	0x080012bb
	{
	case ctrlpsIDLE_DETECT:
		// default start condition
		s->buff[0] = input;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	691b      	ldr	r3, [r3, #16]
 80010e0:	79fa      	ldrb	r2, [r7, #7]
 80010e2:	701a      	strb	r2, [r3, #0]
		s->buff[1] = ctrlC0_NUL;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	3301      	adds	r3, #1
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
		s->ptr = 0;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	2200      	movs	r2, #0
 80010f2:	605a      	str	r2, [r3, #4]
		s->length = 1;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	2201      	movs	r2, #1
 80010f8:	609a      	str	r2, [r3, #8]

		// escape code takes more than one byte in total length
		if (input == ctrlC0_ESC)
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	2b1b      	cmp	r3, #27
 80010fe:	d10a      	bne.n	8001116 <ControlSequenceParserConsume+0x6a>
		{
			s->state = ctrlpsSTART_C1;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	2201      	movs	r2, #1
 8001104:	701a      	strb	r2, [r3, #0]
			s->ptr = 1;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	2201      	movs	r2, #1
 800110a:	605a      	str	r2, [r3, #4]
			s->type = ctrlC0_ESC;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	221b      	movs	r2, #27
 8001110:	805a      	strh	r2, [r3, #2]
			return csptNONE;
 8001112:	2300      	movs	r3, #0
 8001114:	e107      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		}

		// single length control code
		else if ( ( /* input >= ctrlC0_NUL &&*/ (unsigned char)input <= (unsigned char)ctrlC0_US ) ||
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2b1f      	cmp	r3, #31
 800111a:	d902      	bls.n	8001122 <ControlSequenceParserConsume+0x76>
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001120:	d105      	bne.n	800112e <ControlSequenceParserConsume+0x82>
				  ( input == ctrlC0_DEL ) )
	    {
			s->type = input;
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	b29a      	uxth	r2, r3
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	805a      	strh	r2, [r3, #2]
			return csptCONTROL;
 800112a:	2302      	movs	r3, #2
 800112c:	e0fb      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
	    }

		// only a character, nothing else
		return csptCHARACTER;
 800112e:	2301      	movs	r3, #1
 8001130:	e0f9      	b.n	8001326 <ControlSequenceParserConsume+0x27a>

	case ctrlpsSTART_C1:

		// now we need to check the type of escape sequence
		s->buff[s->ptr++] = input;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	691a      	ldr	r2, [r3, #16]
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	1c58      	adds	r0, r3, #1
 800113c:	6839      	ldr	r1, [r7, #0]
 800113e:	6048      	str	r0, [r1, #4]
 8001140:	4413      	add	r3, r2
 8001142:	79fa      	ldrb	r2, [r7, #7]
 8001144:	701a      	strb	r2, [r3, #0]
		CHECK_FOR_OVERFLOW(s->ptr);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	1c5a      	adds	r2, r3, #1
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	429a      	cmp	r2, r3
 8001152:	d90b      	bls.n	800116c <ControlSequenceParserConsume+0xc0>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	f241 0201 	movw	r2, #4097	@ 0x1001
 800115a:	805a      	strh	r2, [r3, #2]
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
 8001168:	2302      	movs	r3, #2
 800116a:	e0dc      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		if ( input == '[' )
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	2b5b      	cmp	r3, #91	@ 0x5b
 8001170:	d107      	bne.n	8001182 <ControlSequenceParserConsume+0xd6>
		{
			s->type = ctrlC1_CSI;
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8001178:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsHANDLE_CSI;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	2202      	movs	r2, #2
 800117e:	701a      	strb	r2, [r3, #0]
 8001180:	e03f      	b.n	8001202 <ControlSequenceParserConsume+0x156>
		}
		else if ( input == 'X' )
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b58      	cmp	r3, #88	@ 0x58
 8001186:	d107      	bne.n	8001198 <ControlSequenceParserConsume+0xec>
		{
			s->type = ctrlC1_SOS;
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	f240 1203 	movw	r2, #259	@ 0x103
 800118e:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsHANDLE_ST_1;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	2203      	movs	r2, #3
 8001194:	701a      	strb	r2, [r3, #0]
 8001196:	e034      	b.n	8001202 <ControlSequenceParserConsume+0x156>
		}
		else if ( input == '^' )
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	2b5e      	cmp	r3, #94	@ 0x5e
 800119c:	d107      	bne.n	80011ae <ControlSequenceParserConsume+0x102>
		{
			s->type = ctrlC1_PM;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011a4:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsHANDLE_ST_1;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	2203      	movs	r2, #3
 80011aa:	701a      	strb	r2, [r3, #0]
 80011ac:	e029      	b.n	8001202 <ControlSequenceParserConsume+0x156>
		}
		else if ( input == '_' )
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	2b5f      	cmp	r3, #95	@ 0x5f
 80011b2:	d107      	bne.n	80011c4 <ControlSequenceParserConsume+0x118>
		{
			s->type = ctrlC1_APC;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	f240 1205 	movw	r2, #261	@ 0x105
 80011ba:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsHANDLE_ST_1;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	2203      	movs	r2, #3
 80011c0:	701a      	strb	r2, [r3, #0]
 80011c2:	e01e      	b.n	8001202 <ControlSequenceParserConsume+0x156>
		}
		else if ( input == '\\' )
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	2b5c      	cmp	r3, #92	@ 0x5c
 80011c8:	d107      	bne.n	80011da <ControlSequenceParserConsume+0x12e>
		{
			s->type = ctrlC1_ST;
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	f44f 7283 	mov.w	r2, #262	@ 0x106
 80011d0:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsHANDLE_ST_1;
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	2203      	movs	r2, #3
 80011d6:	701a      	strb	r2, [r3, #0]
 80011d8:	e013      	b.n	8001202 <ControlSequenceParserConsume+0x156>
		}
		else if ( input == 'P' )
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2b50      	cmp	r3, #80	@ 0x50
 80011de:	d107      	bne.n	80011f0 <ControlSequenceParserConsume+0x144>
		{
			s->type = ctrlC1_DCS;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	f240 1201 	movw	r2, #257	@ 0x101
 80011e6:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsHANDLE_ST_1;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	2203      	movs	r2, #3
 80011ec:	701a      	strb	r2, [r3, #0]
 80011ee:	e008      	b.n	8001202 <ControlSequenceParserConsume+0x156>
		}
		else
		{
			s->type = ctrlUNKNOWN;
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011f6:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsIDLE_DETECT;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
			return csptCONTROL;
 80011fe:	2302      	movs	r3, #2
 8001200:	e091      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		}
		return csptNONE;
 8001202:	2300      	movs	r3, #0
 8001204:	e08f      	b.n	8001326 <ControlSequenceParserConsume+0x27a>

	// data handling and termination of Control Sequence Introducer
	case ctrlpsHANDLE_CSI:
	{
		s->buff[s->ptr++] = input;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	691a      	ldr	r2, [r3, #16]
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	1c58      	adds	r0, r3, #1
 8001210:	6839      	ldr	r1, [r7, #0]
 8001212:	6048      	str	r0, [r1, #4]
 8001214:	4413      	add	r3, r2
 8001216:	79fa      	ldrb	r2, [r7, #7]
 8001218:	701a      	strb	r2, [r3, #0]
		CHECK_FOR_OVERFLOW(s->ptr);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	1c5a      	adds	r2, r3, #1
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	429a      	cmp	r2, r3
 8001226:	d90b      	bls.n	8001240 <ControlSequenceParserConsume+0x194>
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	f241 0201 	movw	r2, #4097	@ 0x1001
 800122e:	805a      	strh	r2, [r3, #2]
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
 800123c:	2302      	movs	r3, #2
 800123e:	e072      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		if ( input >= 0x40 && input <= 0x7E )
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	2b3f      	cmp	r3, #63	@ 0x3f
 8001244:	d912      	bls.n	800126c <ControlSequenceParserConsume+0x1c0>
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	2b7e      	cmp	r3, #126	@ 0x7e
 800124a:	d80f      	bhi.n	800126c <ControlSequenceParserConsume+0x1c0>
		{
			s->buff[s->ptr] = ctrlC0_NUL;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	691a      	ldr	r2, [r3, #16]
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	4413      	add	r3, r2
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
			s->length = s->ptr;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	609a      	str	r2, [r3, #8]
			s->state = ctrlpsIDLE_DETECT;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
			return csptCONTROL;
 8001268:	2302      	movs	r3, #2
 800126a:	e05c      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		}
		return csptNONE;
 800126c:	2300      	movs	r3, #0
 800126e:	e05a      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
	}

	// first part of ST terminator
	case ctrlpsHANDLE_ST_1:
	{
		s->buff[s->ptr++] = input;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	691a      	ldr	r2, [r3, #16]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	1c58      	adds	r0, r3, #1
 800127a:	6839      	ldr	r1, [r7, #0]
 800127c:	6048      	str	r0, [r1, #4]
 800127e:	4413      	add	r3, r2
 8001280:	79fa      	ldrb	r2, [r7, #7]
 8001282:	701a      	strb	r2, [r3, #0]
		CHECK_FOR_OVERFLOW(s->ptr);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	1c5a      	adds	r2, r3, #1
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	429a      	cmp	r2, r3
 8001290:	d90b      	bls.n	80012aa <ControlSequenceParserConsume+0x1fe>
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	f241 0201 	movw	r2, #4097	@ 0x1001
 8001298:	805a      	strh	r2, [r3, #2]
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
 80012a6:	2302      	movs	r3, #2
 80012a8:	e03d      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		if ( input == '\033' )
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b1b      	cmp	r3, #27
 80012ae:	d102      	bne.n	80012b6 <ControlSequenceParserConsume+0x20a>
		{
			s->state = ctrlpsHANDLE_ST_2;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	2204      	movs	r2, #4
 80012b4:	701a      	strb	r2, [r3, #0]
		}
		return csptNONE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e035      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
	}
	// second part of ST terminator
	case ctrlpsHANDLE_ST_2:
	{
		s->buff[s->ptr++] = input;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	691a      	ldr	r2, [r3, #16]
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	1c58      	adds	r0, r3, #1
 80012c4:	6839      	ldr	r1, [r7, #0]
 80012c6:	6048      	str	r0, [r1, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	79fa      	ldrb	r2, [r7, #7]
 80012cc:	701a      	strb	r2, [r3, #0]
		CHECK_FOR_OVERFLOW(s->ptr);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	1c5a      	adds	r2, r3, #1
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d90b      	bls.n	80012f4 <ControlSequenceParserConsume+0x248>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	f241 0201 	movw	r2, #4097	@ 0x1001
 80012e2:	805a      	strh	r2, [r3, #2]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
 80012f0:	2302      	movs	r3, #2
 80012f2:	e018      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		if ( input != '\\' )
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	2b5c      	cmp	r3, #92	@ 0x5c
 80012f8:	d004      	beq.n	8001304 <ControlSequenceParserConsume+0x258>
		{
			s->state = ctrlpsHANDLE_ST_1;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	2203      	movs	r2, #3
 80012fe:	701a      	strb	r2, [r3, #0]
			s->buff[s->ptr] = ctrlC0_NUL;
			s->length = s->ptr;
			s->state = ctrlpsIDLE_DETECT;
			return csptCONTROL;
		}
		return csptNONE;
 8001300:	2300      	movs	r3, #0
 8001302:	e010      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
			s->buff[s->ptr] = ctrlC0_NUL;
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	691a      	ldr	r2, [r3, #16]
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	4413      	add	r3, r2
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]
			s->length = s->ptr;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	609a      	str	r2, [r3, #8]
			s->state = ctrlpsIDLE_DETECT;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
			return csptCONTROL;
 8001320:	2302      	movs	r3, #2
 8001322:	e000      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
	}
	default:
		return csptCHARACTER;
 8001324:	2301      	movs	r3, #1
	}
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop

08001334 <ProcessCommand>:

// --------------------------------------------------------------------------------------------------------------------
static int ProcessCommand(char* command, int cmdLen, char** args, int numArgs, cmdState_t* c, int* isAlias, char* inputBuffer, int inbuffsz)
// --------------------------------------------------------------------------------------------------------------------
{
 8001334:	b590      	push	{r4, r7, lr}
 8001336:	b0d9      	sub	sp, #356	@ 0x164
 8001338:	af00      	add	r7, sp, #0
 800133a:	f507 74b0 	add.w	r4, r7, #352	@ 0x160
 800133e:	f5a4 74aa 	sub.w	r4, r4, #340	@ 0x154
 8001342:	6020      	str	r0, [r4, #0]
 8001344:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8001348:	f5a0 70ac 	sub.w	r0, r0, #344	@ 0x158
 800134c:	6001      	str	r1, [r0, #0]
 800134e:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8001352:	f5a1 71ae 	sub.w	r1, r1, #348	@ 0x15c
 8001356:	600a      	str	r2, [r1, #0]
 8001358:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 800135c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001360:	6013      	str	r3, [r2, #0]
	// here we have to look for a matching entry and therefore we have to search linearly through
	// our linked list of command entries
	xSemaphoreTakeRecursive( c->lockGuard, -1 );
 8001362:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f04f 31ff 	mov.w	r1, #4294967295
 800136c:	4618      	mov	r0, r3
 800136e:	f00d ff7f 	bl	800f270 <xQueueTakeMutexRecursive>
	cmdEntry_t* pElement = c->commands.lh_first;
 8001372:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
	int found = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
	int result = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
	while ( pElement != NULL )
 8001388:	e17b      	b.n	8001682 <ProcessCommand+0x34e>
	{
		// if string compare result and determined length match, then this must be the function
		if ( strncmp(command, pElement->content.cmd, cmdLen) == 0 && cmdLen == pElement->content.cmdLen )
 800138a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800138e:	f103 0108 	add.w	r1, r3, #8
 8001392:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001396:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80013a0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80013a4:	6818      	ldr	r0, [r3, #0]
 80013a6:	f013 fa90 	bl	80148ca <strncmp>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f040 8162 	bne.w	8001676 <ProcessCommand+0x342>
 80013b2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80013b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b8:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 80013bc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	f040 8157 	bne.w	8001676 <ProcessCommand+0x342>
		{
			found = 1;
 80013c8:	2301      	movs	r3, #1
 80013ca:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
			if ( pElement->content.isAlias )
 80013ce:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80013d2:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 8139 	beq.w	800164e <ProcessCommand+0x31a>
			{
				*isAlias = 1;
 80013dc:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80013e0:	2201      	movs	r2, #1
 80013e2:	601a      	str	r2, [r3, #0]
				// first we have to copy the arguments behind the command (as long as we have enough space)
				int currentArg = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
				int stillCopiedLength = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
				char tempInBuff[CONSOLE_LINE_SIZE + 1];
				char* tempArgs[CONSOLE_MAX_NUM_ARGS];
				memset(tempArgs, 0, sizeof(tempArgs));
 80013f0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80013f4:	22b0      	movs	r2, #176	@ 0xb0
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f013 fa51 	bl	80148a0 <memset>
				for (int i = 0; i < numArgs; i++)
 80013fe:	2300      	movs	r3, #0
 8001400:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8001404:	e01d      	b.n	8001442 <ProcessCommand+0x10e>
				{
					tempArgs[i] = args[i] - inputBuffer + tempInBuff;
 8001406:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8001410:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001414:	6812      	ldr	r2, [r2, #0]
 8001416:	4413      	add	r3, r2
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	461a      	mov	r2, r3
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	441a      	add	r2, r3
 8001428:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001432:	443b      	add	r3, r7
 8001434:	f843 2cd0 	str.w	r2, [r3, #-208]
				for (int i = 0; i < numArgs; i++)
 8001438:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800143c:	3301      	adds	r3, #1
 800143e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8001442:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001446:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800144a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	429a      	cmp	r2, r3
 8001452:	dbd8      	blt.n	8001406 <ProcessCommand+0xd2>
				}
				memcpy(tempInBuff, inputBuffer, inbuffsz);
 8001454:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	f8d7 1178 	ldr.w	r1, [r7, #376]	@ 0x178
 8001460:	4618      	mov	r0, r3
 8001462:	f013 fb83 	bl	8014b6c <memcpy>
				while (numArgs > 0)
 8001466:	e0b2      	b.n	80015ce <ProcessCommand+0x29a>
				{
					// all args are NULL-terminated so we can safely use strlen
					int argCopyLen = strlen(tempArgs[currentArg]);
 8001468:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001472:	443b      	add	r3, r7
 8001474:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 8001478:	4618      	mov	r0, r3
 800147a:	f7fe ff29 	bl	80002d0 <strlen>
 800147e:	4603      	mov	r3, r0
 8001480:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
					int additionalTermination = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
					if (*(tempArgs[currentArg] - 1) == '"' || tempArgs[currentArg] == NULL)
 800148a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001494:	443b      	add	r3, r7
 8001496:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 800149a:	3b01      	subs	r3, #1
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b22      	cmp	r3, #34	@ 0x22
 80014a0:	d009      	beq.n	80014b6 <ProcessCommand+0x182>
 80014a2:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80014ac:	443b      	add	r3, r7
 80014ae:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <ProcessCommand+0x188>
					{
						additionalTermination = 1;
 80014b6:	2301      	movs	r3, #1
 80014b8:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
					}
					if ((argCopyLen + pElement->content.helpLen + stillCopiedLength + 1) > inbuffsz)
 80014bc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80014c0:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 80014c4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80014c8:	441a      	add	r2, r3
 80014ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80014ce:	4413      	add	r3, r2
 80014d0:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dc0d      	bgt.n	80014f4 <ProcessCommand+0x1c0>
					{
						printf("\033[31mAlias Argument Substitution Overflow\033[0m");
 80014d8:	487b      	ldr	r0, [pc, #492]	@ (80016c8 <ProcessCommand+0x394>)
 80014da:	f012 ff8b 	bl	80143f4 <iprintf>
						result = -1;
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
 80014e2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
						*isAlias = 0;
 80014e6:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
						return result;
 80014ee:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80014f2:	e0e4      	b.n	80016be <ProcessCommand+0x38a>
					}
					if (additionalTermination)
 80014f4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d011      	beq.n	8001520 <ProcessCommand+0x1ec>
					{
						inputBuffer[pElement->content.helpLen + stillCopiedLength + 1] = '"';
 80014fc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001500:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 8001504:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001508:	4413      	add	r3, r2
 800150a:	3301      	adds	r3, #1
 800150c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001510:	4413      	add	r3, r2
 8001512:	2222      	movs	r2, #34	@ 0x22
 8001514:	701a      	strb	r2, [r3, #0]
						stillCopiedLength += 1;
 8001516:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800151a:	3301      	adds	r3, #1
 800151c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
					}
					memcpy(&inputBuffer[pElement->content.helpLen + stillCopiedLength + 1], tempArgs[currentArg], argCopyLen);
 8001520:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001524:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 8001528:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800152c:	4413      	add	r3, r2
 800152e:	3301      	adds	r3, #1
 8001530:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001534:	18d0      	adds	r0, r2, r3
 8001536:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001540:	443b      	add	r3, r7
 8001542:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 8001546:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 800154a:	4619      	mov	r1, r3
 800154c:	f013 fb0e 	bl	8014b6c <memcpy>
					stillCopiedLength += argCopyLen;
 8001550:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001554:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001558:	4413      	add	r3, r2
 800155a:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
					if (additionalTermination)
 800155e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001562:	2b00      	cmp	r3, #0
 8001564:	d011      	beq.n	800158a <ProcessCommand+0x256>
					{
						inputBuffer[pElement->content.helpLen + stillCopiedLength + 1] = '"';
 8001566:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800156a:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 800156e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001572:	4413      	add	r3, r2
 8001574:	3301      	adds	r3, #1
 8001576:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800157a:	4413      	add	r3, r2
 800157c:	2222      	movs	r2, #34	@ 0x22
 800157e:	701a      	strb	r2, [r3, #0]
						stillCopiedLength += 1;
 8001580:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001584:	3301      	adds	r3, #1
 8001586:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
					}
					inputBuffer[pElement->content.helpLen + stillCopiedLength + 1] = ' ';
 800158a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800158e:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 8001592:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001596:	4413      	add	r3, r2
 8001598:	3301      	adds	r3, #1
 800159a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800159e:	4413      	add	r3, r2
 80015a0:	2220      	movs	r2, #32
 80015a2:	701a      	strb	r2, [r3, #0]
					stillCopiedLength += 1;
 80015a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80015a8:	3301      	adds	r3, #1
 80015aa:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
					numArgs -= 1;
 80015ae:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80015b2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80015b6:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 80015ba:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80015be:	6812      	ldr	r2, [r2, #0]
 80015c0:	3a01      	subs	r2, #1
 80015c2:	601a      	str	r2, [r3, #0]
					currentArg += 1;
 80015c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80015c8:	3301      	adds	r3, #1
 80015ca:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
				while (numArgs > 0)
 80015ce:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80015d2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f73f af45 	bgt.w	8001468 <ProcessCommand+0x134>
				}

				memcpy(inputBuffer, pElement->content.help, pElement->content.helpLen);
 80015de:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80015e2:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 80015e6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80015ea:	f8d3 3254 	ldr.w	r3, [r3, #596]	@ 0x254
 80015ee:	461a      	mov	r2, r3
 80015f0:	f8d7 0178 	ldr.w	r0, [r7, #376]	@ 0x178
 80015f4:	f013 faba 	bl	8014b6c <memcpy>
				memset(&inputBuffer[pElement->content.helpLen+ stillCopiedLength], 0, inbuffsz-(pElement->content.helpLen+stillCopiedLength));
 80015f8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80015fc:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 8001600:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001604:	4413      	add	r3, r2
 8001606:	461a      	mov	r2, r3
 8001608:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800160c:	1898      	adds	r0, r3, r2
 800160e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001612:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 8001616:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800161a:	4413      	add	r3, r2
 800161c:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	461a      	mov	r2, r3
 8001624:	2100      	movs	r1, #0
 8001626:	f013 f93b 	bl	80148a0 <memset>
				if (currentArg != 0) inputBuffer[pElement->content.helpLen] = ' ';
 800162a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800162e:	2b00      	cmp	r3, #0
 8001630:	d009      	beq.n	8001646 <ProcessCommand+0x312>
 8001632:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001636:	f8d3 3254 	ldr.w	r3, [r3, #596]	@ 0x254
 800163a:	461a      	mov	r2, r3
 800163c:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001640:	4413      	add	r3, r2
 8001642:	2220      	movs	r2, #32
 8001644:	701a      	strb	r2, [r3, #0]
				result = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
			}
			else
			{
				result = pElement->content.func(numArgs, args, pElement->content.ctx);
			}
			break;
 800164c:	e01e      	b.n	800168c <ProcessCommand+0x358>
				result = pElement->content.func(numArgs, args, pElement->content.ctx);
 800164e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8001658:	6852      	ldr	r2, [r2, #4]
 800165a:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 800165e:	f5a1 71ae 	sub.w	r1, r1, #348	@ 0x15c
 8001662:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8001666:	f5a0 70b0 	sub.w	r0, r0, #352	@ 0x160
 800166a:	6809      	ldr	r1, [r1, #0]
 800166c:	6800      	ldr	r0, [r0, #0]
 800166e:	4798      	blx	r3
 8001670:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
			break;
 8001674:	e00a      	b.n	800168c <ProcessCommand+0x358>
		}

		pElement = pElement->navigate.le_next;
 8001676:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800167a:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 800167e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
	while ( pElement != NULL )
 8001682:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001686:	2b00      	cmp	r3, #0
 8001688:	f47f ae7f 	bne.w	800138a <ProcessCommand+0x56>
	}

	xSemaphoreGiveRecursive( c->lockGuard );
 800168c:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f00d fdb0 	bl	800f1f8 <xQueueGiveMutexRecursive>
	if ( found == 0 )
 8001698:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800169c:	2b00      	cmp	r3, #0
 800169e:	d10c      	bne.n	80016ba <ProcessCommand+0x386>
	{
		printf("\033[31mInvalid command\033[0m");
 80016a0:	480a      	ldr	r0, [pc, #40]	@ (80016cc <ProcessCommand+0x398>)
 80016a2:	f012 fea7 	bl	80143f4 <iprintf>
		fflush(stdout);
 80016a6:	4b0a      	ldr	r3, [pc, #40]	@ (80016d0 <ProcessCommand+0x39c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f012 fd5f 	bl	8014170 <fflush>
		result = -1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
	}
	return result;
 80016ba:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
}
 80016be:	4618      	mov	r0, r3
 80016c0:	f507 77b2 	add.w	r7, r7, #356	@ 0x164
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd90      	pop	{r4, r7, pc}
 80016c8:	08018198 	.word	0x08018198
 80016cc:	080181c8 	.word	0x080181c8
 80016d0:	200001d4 	.word	0x200001d4

080016d4 <TransformAndProcessTheCommand>:

// --------------------------------------------------------------------------------------------------------------------
static int TransformAndProcessTheCommand(char* lineBuff, int line_size, cmdState_t* cState)
// --------------------------------------------------------------------------------------------------------------------
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b0be      	sub	sp, #248	@ 0xf8
 80016d8:	af04      	add	r7, sp, #16
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
	int numArgs;
	int isAlias;

	char* args[CONSOLE_MAX_NUM_ARGS];
	char* command;
	char* strtokNewIndex = NULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

restart:
	startIdx = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	endIdx = CONSOLE_LINE_SIZE - 1;
 80016ec:	2377      	movs	r3, #119	@ 0x77
 80016ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	numArgs = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	isAlias = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	command = NULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

	memset(args, 0, sizeof(args));
 8001704:	f107 0310 	add.w	r3, r7, #16
 8001708:	22b0      	movs	r2, #176	@ 0xb0
 800170a:	2100      	movs	r1, #0
 800170c:	4618      	mov	r0, r3
 800170e:	f013 f8c7 	bl	80148a0 <memset>

	if ( lineBuff[startIdx] == '\0' ) return 0;
 8001712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	4413      	add	r3, r2
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d10d      	bne.n	800173c <TransformAndProcessTheCommand+0x68>
 8001720:	2300      	movs	r3, #0
 8001722:	e118      	b.n	8001956 <TransformAndProcessTheCommand+0x282>

	while(startIdx < line_size)
	{
		if ( lineBuff[startIdx] != ' ' ) break;
 8001724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	4413      	add	r3, r2
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b20      	cmp	r3, #32
 8001730:	d10a      	bne.n	8001748 <TransformAndProcessTheCommand+0x74>
		startIdx += 1;
 8001732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001736:	3301      	adds	r3, #1
 8001738:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	while(startIdx < line_size)
 800173c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	429a      	cmp	r2, r3
 8001744:	dbee      	blt.n	8001724 <TransformAndProcessTheCommand+0x50>
 8001746:	e014      	b.n	8001772 <TransformAndProcessTheCommand+0x9e>
		if ( lineBuff[startIdx] != ' ' ) break;
 8001748:	bf00      	nop
	}

	while(endIdx > 0)
 800174a:	e012      	b.n	8001772 <TransformAndProcessTheCommand+0x9e>
	{
		if ( lineBuff[endIdx] != '\0' && lineBuff[endIdx] != ' ' ) break;
 800174c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d006      	beq.n	8001768 <TransformAndProcessTheCommand+0x94>
 800175a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	4413      	add	r3, r2
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b20      	cmp	r3, #32
 8001766:	d109      	bne.n	800177c <TransformAndProcessTheCommand+0xa8>
		endIdx -= 1;
 8001768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800176c:	3b01      	subs	r3, #1
 800176e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	while(endIdx > 0)
 8001772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001776:	2b00      	cmp	r3, #0
 8001778:	dce8      	bgt.n	800174c <TransformAndProcessTheCommand+0x78>
 800177a:	e000      	b.n	800177e <TransformAndProcessTheCommand+0xaa>
		if ( lineBuff[endIdx] != '\0' && lineBuff[endIdx] != ' ' ) break;
 800177c:	bf00      	nop
	}

	if ( startIdx <= endIdx )
 800177e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001786:	429a      	cmp	r2, r3
 8001788:	f300 80e4 	bgt.w	8001954 <TransformAndProcessTheCommand+0x280>
	{
		// strtok is safe because we have a nulled safety margin behind the string
		command = strtok(&lineBuff[startIdx], " ");
 800178c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	4972      	ldr	r1, [pc, #456]	@ (8001960 <TransformAndProcessTheCommand+0x28c>)
 8001796:	4618      	mov	r0, r3
 8001798:	f013 f8b6 	bl	8014908 <strtok>
 800179c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0

		// some sanity checks before tokenizing
		if ( command == NULL ) return 0;
 80017a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <TransformAndProcessTheCommand+0xd8>
 80017a8:	2300      	movs	r3, #0
 80017aa:	e0d4      	b.n	8001956 <TransformAndProcessTheCommand+0x282>
		if ((int)strnlen(command, line_size) == 0 ) return 0;
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	4619      	mov	r1, r3
 80017b0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 80017b4:	f013 f89b 	bl	80148ee <strnlen>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <TransformAndProcessTheCommand+0xee>
 80017be:	2300      	movs	r3, #0
 80017c0:	e0c9      	b.n	8001956 <TransformAndProcessTheCommand+0x282>

		int cmdLength = (int)strnlen(command, line_size);
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	4619      	mov	r1, r3
 80017c6:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 80017ca:	f013 f890 	bl	80148ee <strnlen>
 80017ce:	4603      	mov	r3, r0
 80017d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

		// now get the arguments
		while((args[numArgs] = strtok(strtokNewIndex, " ")) != NULL && numArgs < CONSOLE_MAX_NUM_ARGS)
 80017d4:	e086      	b.n	80018e4 <TransformAndProcessTheCommand+0x210>
		{
			strtokNewIndex = NULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			if (args[numArgs][0] == '"')
 80017dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	33e8      	adds	r3, #232	@ 0xe8
 80017e4:	443b      	add	r3, r7
 80017e6:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b22      	cmp	r3, #34	@ 0x22
 80017ee:	d174      	bne.n	80018da <TransformAndProcessTheCommand+0x206>
			{
				// move the argument to remove the quotes
				args[numArgs] += 1;
 80017f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	33e8      	adds	r3, #232	@ 0xe8
 80017f8:	443b      	add	r3, r7
 80017fa:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	33e8      	adds	r3, #232	@ 0xe8
 8001808:	443b      	add	r3, r7
 800180a:	f843 2cd8 	str.w	r2, [r3, #-216]
				if (args[numArgs][0] == '"') {
 800180e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	33e8      	adds	r3, #232	@ 0xe8
 8001816:	443b      	add	r3, r7
 8001818:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b22      	cmp	r3, #34	@ 0x22
 8001820:	d113      	bne.n	800184a <TransformAndProcessTheCommand+0x176>
					args[numArgs][0] = '\0';
 8001822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	33e8      	adds	r3, #232	@ 0xe8
 800182a:	443b      	add	r3, r7
 800182c:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]
					// we have to add a plus 2 because there is the '"' char and '\0' from strtok as second
					// char. So we need to add 2 chars to get to the next valid char or the end of the string
					strtokNewIndex = &args[numArgs][2];
 8001834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	33e8      	adds	r3, #232	@ 0xe8
 800183c:	443b      	add	r3, r7
 800183e:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001842:	3302      	adds	r3, #2
 8001844:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001848:	e047      	b.n	80018da <TransformAndProcessTheCommand+0x206>
				}
				else
				{
					// now look for the end of the argument and set new strtok index to this
					// string part
					int firstLen = strlen(args[numArgs]);
 800184a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	33e8      	adds	r3, #232	@ 0xe8
 8001852:	443b      	add	r3, r7
 8001854:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fd39 	bl	80002d0 <strlen>
 800185e:	4603      	mov	r3, r0
 8001860:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
					args[numArgs][firstLen] = ' ';
 8001864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	33e8      	adds	r3, #232	@ 0xe8
 800186c:	443b      	add	r3, r7
 800186e:	f853 2cd8 	ldr.w	r2, [r3, #-216]
 8001872:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001876:	4413      	add	r3, r2
 8001878:	2220      	movs	r2, #32
 800187a:	701a      	strb	r2, [r3, #0]
					char* endChar = &args[numArgs][firstLen-1];
 800187c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	33e8      	adds	r3, #232	@ 0xe8
 8001884:	443b      	add	r3, r7
 8001886:	f853 2cd8 	ldr.w	r2, [r3, #-216]
 800188a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800188e:	3b01      	subs	r3, #1
 8001890:	4413      	add	r3, r2
 8001892:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
					// while loop is safe because we have a nulled safety margin behind the string
					while (*endChar != '\0' && *endChar != '"') endChar += 1;
 8001896:	e004      	b.n	80018a2 <TransformAndProcessTheCommand+0x1ce>
 8001898:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800189c:	3301      	adds	r3, #1
 800189e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80018a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d004      	beq.n	80018b6 <TransformAndProcessTheCommand+0x1e2>
 80018ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b22      	cmp	r3, #34	@ 0x22
 80018b4:	d1f0      	bne.n	8001898 <TransformAndProcessTheCommand+0x1c4>
					if (*endChar == '"') {
 80018b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b22      	cmp	r3, #34	@ 0x22
 80018be:	d108      	bne.n	80018d2 <TransformAndProcessTheCommand+0x1fe>
						*endChar = '\0'; endChar += 1;
 80018c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
 80018c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018cc:	3301      	adds	r3, #1
 80018ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
					}
					strtokNewIndex = endChar;
 80018d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
				}
			}
			numArgs+=1;
 80018da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80018de:	3301      	adds	r3, #1
 80018e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		while((args[numArgs] = strtok(strtokNewIndex, " ")) != NULL && numArgs < CONSOLE_MAX_NUM_ARGS)
 80018e4:	491e      	ldr	r1, [pc, #120]	@ (8001960 <TransformAndProcessTheCommand+0x28c>)
 80018e6:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 80018ea:	f013 f80d 	bl	8014908 <strtok>
 80018ee:	4602      	mov	r2, r0
 80018f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	33e8      	adds	r3, #232	@ 0xe8
 80018f8:	443b      	add	r3, r7
 80018fa:	f843 2cd8 	str.w	r2, [r3, #-216]
 80018fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	33e8      	adds	r3, #232	@ 0xe8
 8001906:	443b      	add	r3, r7
 8001908:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d004      	beq.n	800191a <TransformAndProcessTheCommand+0x246>
 8001910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001914:	2b2b      	cmp	r3, #43	@ 0x2b
 8001916:	f77f af5e 	ble.w	80017d6 <TransformAndProcessTheCommand+0x102>
		}

		// now call the command
		int retVal = ProcessCommand(command, cmdLength, args, numArgs, cState, &isAlias, lineBuff, line_size);
 800191a:	f107 0210 	add.w	r2, r7, #16
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	9303      	str	r3, [sp, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	9302      	str	r3, [sp, #8]
 8001926:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001934:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8001938:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 800193c:	f7ff fcfa 	bl	8001334 <ProcessCommand>
 8001940:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
		if ( isAlias )
 8001944:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d000      	beq.n	800194e <TransformAndProcessTheCommand+0x27a>
		{
			// in case it is an alias, the line buffer has been overwritten with the alias and so we have to do
			// this round again
			goto restart;
 800194c:	e6cb      	b.n	80016e6 <TransformAndProcessTheCommand+0x12>
		}
		return retVal;
 800194e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001952:	e000      	b.n	8001956 <TransformAndProcessTheCommand+0x282>
	}

	return 0;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	37e8      	adds	r7, #232	@ 0xe8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	080181e4 	.word	0x080181e4

08001964 <PrintConsoleControl>:

// --------------------------------------------------------------------------------------------------------------------
static void PrintConsoleControl( cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	if ( s->length >= 3 && s->type == ctrlC1_CSI )
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d91d      	bls.n	80019b0 <PrintConsoleControl+0x4c>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	885b      	ldrh	r3, [r3, #2]
 8001978:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800197c:	d118      	bne.n	80019b0 <PrintConsoleControl+0x4c>
	{
		for ( unsigned int i = 0; i < s->length; i ++ )
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	e00a      	b.n	800199a <PrintConsoleControl+0x36>
		{
			putchar(s->buff[i]);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691a      	ldr	r2, [r3, #16]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4413      	add	r3, r2
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f012 fd42 	bl	8014418 <putchar>
		for ( unsigned int i = 0; i < s->length; i ++ )
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	3301      	adds	r3, #1
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d3ef      	bcc.n	8001984 <PrintConsoleControl+0x20>
		}
		fflush(stdout);
 80019a4:	4b04      	ldr	r3, [pc, #16]	@ (80019b8 <PrintConsoleControl+0x54>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f012 fbe0 	bl	8014170 <fflush>
	}
}
 80019b0:	bf00      	nop
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	200001d4 	.word	0x200001d4

080019bc <ConsoleIsArrowLeft>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleIsArrowLeft( cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
	return ( s->length >= 3 && s->type == ctrlC1_CSI && s->buff[2] == 68);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d90c      	bls.n	80019e6 <ConsoleIsArrowLeft+0x2a>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	885b      	ldrh	r3, [r3, #2]
 80019d0:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80019d4:	d107      	bne.n	80019e6 <ConsoleIsArrowLeft+0x2a>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	3302      	adds	r3, #2
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b44      	cmp	r3, #68	@ 0x44
 80019e0:	d101      	bne.n	80019e6 <ConsoleIsArrowLeft+0x2a>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <ConsoleIsArrowLeft+0x2c>
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <ConsoleIsArrowRight>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleIsArrowRight( cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	return ( s->length >= 3 && s->type == ctrlC1_CSI && s->buff[2] == 67);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d90c      	bls.n	8001a1e <ConsoleIsArrowRight+0x2a>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	885b      	ldrh	r3, [r3, #2]
 8001a08:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001a0c:	d107      	bne.n	8001a1e <ConsoleIsArrowRight+0x2a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	3302      	adds	r3, #2
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b43      	cmp	r3, #67	@ 0x43
 8001a18:	d101      	bne.n	8001a1e <ConsoleIsArrowRight+0x2a>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <ConsoleIsArrowRight+0x2c>
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <ConsoleIsArrowUp>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleIsArrowUp( cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	return ( s->length >= 3 && s->type == ctrlC1_CSI && s->buff[2] == 65);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d90c      	bls.n	8001a56 <ConsoleIsArrowUp+0x2a>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	885b      	ldrh	r3, [r3, #2]
 8001a40:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001a44:	d107      	bne.n	8001a56 <ConsoleIsArrowUp+0x2a>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	3302      	adds	r3, #2
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b41      	cmp	r3, #65	@ 0x41
 8001a50:	d101      	bne.n	8001a56 <ConsoleIsArrowUp+0x2a>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <ConsoleIsArrowUp+0x2c>
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <ConsoleIsArrowDown>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleIsArrowDown( cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
	return ( s->length >= 3 && s->type == ctrlC1_CSI && s->buff[2] == 66);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d90c      	bls.n	8001a8e <ConsoleIsArrowDown+0x2a>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	885b      	ldrh	r3, [r3, #2]
 8001a78:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001a7c:	d107      	bne.n	8001a8e <ConsoleIsArrowDown+0x2a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	3302      	adds	r3, #2
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b42      	cmp	r3, #66	@ 0x42
 8001a88:	d101      	bne.n	8001a8e <ConsoleIsArrowDown+0x2a>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <ConsoleIsArrowDown+0x2c>
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <ConsoleIsEntf>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleIsEntf( cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	return ( s->length >= 4 && s->type == ctrlC1_CSI && s->buff[2] == 51 && s->buff[3] == 126);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d912      	bls.n	8001ad2 <ConsoleIsEntf+0x36>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	885b      	ldrh	r3, [r3, #2]
 8001ab0:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001ab4:	d10d      	bne.n	8001ad2 <ConsoleIsEntf+0x36>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	3302      	adds	r3, #2
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b33      	cmp	r3, #51	@ 0x33
 8001ac0:	d107      	bne.n	8001ad2 <ConsoleIsEntf+0x36>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	3303      	adds	r3, #3
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b7e      	cmp	r3, #126	@ 0x7e
 8001acc:	d101      	bne.n	8001ad2 <ConsoleIsEntf+0x36>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <ConsoleIsEntf+0x38>
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <PrintConsoleArrowLeft>:

// --------------------------------------------------------------------------------------------------------------------
static void PrintConsoleArrowLeft( void )
// --------------------------------------------------------------------------------------------------------------------
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
	putchar('\033');
 8001ae4:	201b      	movs	r0, #27
 8001ae6:	f012 fc97 	bl	8014418 <putchar>
	putchar('[');
 8001aea:	205b      	movs	r0, #91	@ 0x5b
 8001aec:	f012 fc94 	bl	8014418 <putchar>
	putchar(68);
 8001af0:	2044      	movs	r0, #68	@ 0x44
 8001af2:	f012 fc91 	bl	8014418 <putchar>
	fflush(stdout);
 8001af6:	4b04      	ldr	r3, [pc, #16]	@ (8001b08 <PrintConsoleArrowLeft+0x28>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f012 fb37 	bl	8014170 <fflush>
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	200001d4 	.word	0x200001d4

08001b0c <CONSOLE_RedirectStreams>:

// --------------------------------------------------------------------------------------------------------------------
int CONSOLE_RedirectStreams( ConsoleHandle_t h, ConsoleReadStream_t rdFunc, ConsoleWriteStream_t wrFunc,
		void* rdContext, void* wrContext )
// --------------------------------------------------------------------------------------------------------------------
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	@ 0x28
 8001b10:	af02      	add	r7, sp, #8
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	603b      	str	r3, [r7, #0]
#ifndef __NEWLIB__ // so far only newlib is supported
	return -2;
#else
	// we can only exec the real stream redirection when we are the console thread itself and the scheduler is running,
	// otherwise we have to set the request to pending state
	if ( ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) && ( xTaskGetCurrentTaskHandle() == h->tHandle ) )
 8001b1a:	f00f fb6d 	bl	80111f8 <xTaskGetSchedulerState>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d165      	bne.n	8001bf0 <CONSOLE_RedirectStreams+0xe4>
 8001b24:	f00f fb58 	bl	80111d8 <xTaskGetCurrentTaskHandle>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d15e      	bne.n	8001bf0 <CONSOLE_RedirectStreams+0xe4>
	{
		FILE* rdToClean = NULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
		if ( _impure_ptr->_stdin != &__sf[0])
 8001b36:	4b3c      	ldr	r3, [pc, #240]	@ (8001c28 <CONSOLE_RedirectStreams+0x11c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	4a3b      	ldr	r2, [pc, #236]	@ (8001c2c <CONSOLE_RedirectStreams+0x120>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d003      	beq.n	8001b4a <CONSOLE_RedirectStreams+0x3e>
		{
			rdToClean = _impure_ptr->_stdin;
 8001b42:	4b39      	ldr	r3, [pc, #228]	@ (8001c28 <CONSOLE_RedirectStreams+0x11c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	61fb      	str	r3, [r7, #28]
		}

		FILE* wrToClean = NULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61bb      	str	r3, [r7, #24]
		if ( _impure_ptr->_stdout != &__sf[1])
 8001b4e:	4b36      	ldr	r3, [pc, #216]	@ (8001c28 <CONSOLE_RedirectStreams+0x11c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	4a36      	ldr	r2, [pc, #216]	@ (8001c30 <CONSOLE_RedirectStreams+0x124>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d003      	beq.n	8001b62 <CONSOLE_RedirectStreams+0x56>
		{
			wrToClean = _impure_ptr->_stdout;
 8001b5a:	4b33      	ldr	r3, [pc, #204]	@ (8001c28 <CONSOLE_RedirectStreams+0x11c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	61bb      	str	r3, [r7, #24]
		}

		FILE* myStdOut = &__sf[1];
 8001b62:	4b33      	ldr	r3, [pc, #204]	@ (8001c30 <CONSOLE_RedirectStreams+0x124>)
 8001b64:	617b      	str	r3, [r7, #20]
		if ( wrFunc != NULL )
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00e      	beq.n	8001b8a <CONSOLE_RedirectStreams+0x7e>
		{
			myStdOut = fwopen(wrContext, wrFunc);
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	2300      	movs	r3, #0
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	2100      	movs	r1, #0
 8001b76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001b78:	f012 fe82 	bl	8014880 <funopen>
 8001b7c:	6178      	str	r0, [r7, #20]
			if ( myStdOut == NULL ) return -1;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d102      	bne.n	8001b8a <CONSOLE_RedirectStreams+0x7e>
 8001b84:	f04f 33ff 	mov.w	r3, #4294967295
 8001b88:	e049      	b.n	8001c1e <CONSOLE_RedirectStreams+0x112>
		}

		FILE* myStdIn = &__sf[0];
 8001b8a:	4b28      	ldr	r3, [pc, #160]	@ (8001c2c <CONSOLE_RedirectStreams+0x120>)
 8001b8c:	613b      	str	r3, [r7, #16]
		if ( rdFunc != NULL )
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d018      	beq.n	8001bc6 <CONSOLE_RedirectStreams+0xba>
		{
			myStdIn = fropen(rdContext, rdFunc);
 8001b94:	2300      	movs	r3, #0
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	2300      	movs	r3, #0
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	68b9      	ldr	r1, [r7, #8]
 8001b9e:	6838      	ldr	r0, [r7, #0]
 8001ba0:	f012 fe6e 	bl	8014880 <funopen>
 8001ba4:	6138      	str	r0, [r7, #16]
			if ( myStdIn == NULL )
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10c      	bne.n	8001bc6 <CONSOLE_RedirectStreams+0xba>
			{
				if ( myStdOut != NULL && myStdOut != &__sf[1]) fclose(myStdOut);
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d006      	beq.n	8001bc0 <CONSOLE_RedirectStreams+0xb4>
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	4a1e      	ldr	r2, [pc, #120]	@ (8001c30 <CONSOLE_RedirectStreams+0x124>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d002      	beq.n	8001bc0 <CONSOLE_RedirectStreams+0xb4>
 8001bba:	6978      	ldr	r0, [r7, #20]
 8001bbc:	f012 fa24 	bl	8014008 <fclose>
				return -1;
 8001bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc4:	e02b      	b.n	8001c1e <CONSOLE_RedirectStreams+0x112>
			}
		}

		_impure_ptr->_stdin  = myStdIn;
 8001bc6:	4b18      	ldr	r3, [pc, #96]	@ (8001c28 <CONSOLE_RedirectStreams+0x11c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	605a      	str	r2, [r3, #4]
		_impure_ptr->_stdout = myStdOut;
 8001bce:	4b16      	ldr	r3, [pc, #88]	@ (8001c28 <CONSOLE_RedirectStreams+0x11c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	609a      	str	r2, [r3, #8]

		if (wrToClean != NULL) fclose(wrToClean);
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <CONSOLE_RedirectStreams+0xd6>
 8001bdc:	69b8      	ldr	r0, [r7, #24]
 8001bde:	f012 fa13 	bl	8014008 <fclose>
		if (rdToClean != NULL) fclose(rdToClean);
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d018      	beq.n	8001c1a <CONSOLE_RedirectStreams+0x10e>
 8001be8:	69f8      	ldr	r0, [r7, #28]
 8001bea:	f012 fa0d 	bl	8014008 <fclose>
	{
 8001bee:	e014      	b.n	8001c1a <CONSOLE_RedirectStreams+0x10e>
	}
	else
	{
		h->pendingRedirect = 1;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
		h->pendingRdStream = rdFunc;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
		h->pendingWrStream = wrFunc;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
		h->pendingRdCtx    = rdContext;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
		h->pendingWrCtx    = wrContext;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c14:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
 8001c18:	e000      	b.n	8001c1c <CONSOLE_RedirectStreams+0x110>
	{
 8001c1a:	bf00      	nop
	}
#endif
	return 0;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3720      	adds	r7, #32
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200001d4 	.word	0x200001d4
 8001c2c:	20000670 	.word	0x20000670
 8001c30:	200006d8 	.word	0x200006d8

08001c34 <ConsoleFunction>:

// --------------------------------------------------------------------------------------------------------------------
static void ConsoleFunction( void * arg )
// --------------------------------------------------------------------------------------------------------------------
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b09a      	sub	sp, #104	@ 0x68
 8001c38:	af02      	add	r7, sp, #8
 8001c3a:	6078      	str	r0, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)arg;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	627b      	str	r3, [r7, #36]	@ 0x24
	if (h == NULL) goto destroy;
 8001c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 84aa 	beq.w	800259c <ConsoleFunction+0x968>

	if( h->pendingRedirect != 0 )
 8001c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d01a      	beq.n	8001c88 <ConsoleFunction+0x54>
	{
		h->pendingRedirect = 0;
 8001c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c54:	2200      	movs	r2, #0
 8001c56:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
		if ( CONSOLE_RedirectStreams(h, h->pendingRdStream, h->pendingWrStream, h->pendingRdCtx, h->pendingWrCtx) )
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5c:	f8d3 1410 	ldr.w	r1, [r3, #1040]	@ 0x410
 8001c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c62:	f8d3 2414 	ldr.w	r2, [r3, #1044]	@ 0x414
 8001c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c68:	f8d3 0418 	ldr.w	r0, [r3, #1048]	@ 0x418
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	4603      	mov	r3, r0
 8001c76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001c78:	f7ff ff48 	bl	8001b0c <CONSOLE_RedirectStreams>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d002      	beq.n	8001c88 <ConsoleFunction+0x54>
		{
			printf("was not able to redirect console streams, requested by user!");
 8001c82:	4892      	ldr	r0, [pc, #584]	@ (8001ecc <ConsoleFunction+0x298>)
 8001c84:	f012 fbb6 	bl	80143f4 <iprintf>
#ifdef WIN32
		"\033[39m      -=   MSVC RTOS SIMULATOR ";
#else
		"\033[39m      -=   ARM RTOS ";
#endif
    printf((char*)headerASCIIArt);
 8001c88:	4891      	ldr	r0, [pc, #580]	@ (8001ed0 <ConsoleFunction+0x29c>)
 8001c8a:	f012 fbb3 	bl	80143f4 <iprintf>
#ifdef EXERCISE
    printf("EXERCISE: ");
    printf(xstr(EXERCISE)));
    printf("\r\n\r\n");
#else
    printf("PLAYGROUND\r\n\r\n");
 8001c8e:	4891      	ldr	r0, [pc, #580]	@ (8001ed4 <ConsoleFunction+0x2a0>)
 8001c90:	f012 fc20 	bl	80144d4 <puts>
#endif

#if CONSOLE_USE_DYNAMIC_USERNAME != 0
	char* usernamePtr = getenv("USERNAME");
 8001c94:	4890      	ldr	r0, [pc, #576]	@ (8001ed8 <ConsoleFunction+0x2a4>)
 8001c96:	f010 fabd 	bl	8012214 <getenv>
 8001c9a:	65f8      	str	r0, [r7, #92]	@ 0x5c
	if ( usernamePtr == 0 ) usernamePtr = CONSOLE_USERNAME;
 8001c9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <ConsoleFunction+0x72>
 8001ca2:	4b8e      	ldr	r3, [pc, #568]	@ (8001edc <ConsoleFunction+0x2a8>)
 8001ca4:	65fb      	str	r3, [r7, #92]	@ 0x5c
#else
	char* usernamePtr = CONSOLE_USERNAME;
#endif

	char* lineBuff = NULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	65bb      	str	r3, [r7, #88]	@ 0x58
	char* ctrlBuff = malloc(CONSOLE_LINE_SIZE + CONSOLE_SAFETY_SPACE); // make sure we have a little space behind
 8001caa:	207c      	movs	r0, #124	@ 0x7c
 8001cac:	f010 fafa 	bl	80122a4 <malloc>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	623b      	str	r3, [r7, #32]
	if (ctrlBuff == NULL) goto exit;
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8406 	beq.w	80024c8 <ConsoleFunction+0x894>

	lineBuff = malloc(CONSOLE_LINE_SIZE + CONSOLE_SAFETY_SPACE); // make sure we have a little space behind
 8001cbc:	207c      	movs	r0, #124	@ 0x7c
 8001cbe:	f010 faf1 	bl	80122a4 <malloc>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	65bb      	str	r3, [r7, #88]	@ 0x58
	if (lineBuff == NULL) goto exit;
 8001cc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 83ff 	beq.w	80024cc <ConsoleFunction+0x898>

	memset(ctrlBuff, ctrlC0_NUL, CONSOLE_LINE_SIZE + CONSOLE_SAFETY_SPACE);
 8001cce:	227c      	movs	r2, #124	@ 0x7c
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	6a38      	ldr	r0, [r7, #32]
 8001cd4:	f012 fde4 	bl	80148a0 <memset>
	memset(lineBuff, ctrlC0_NUL, CONSOLE_LINE_SIZE + CONSOLE_SAFETY_SPACE);
 8001cd8:	227c      	movs	r2, #124	@ 0x7c
 8001cda:	2100      	movs	r1, #0
 8001cdc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001cde:	f012 fddf 	bl	80148a0 <memset>
	unsigned int lbPtr = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	657b      	str	r3, [r7, #84]	@ 0x54

	printf("\r\nFreeRTOS Console Up and Running\r\n");
 8001ce6:	487e      	ldr	r0, [pc, #504]	@ (8001ee0 <ConsoleFunction+0x2ac>)
 8001ce8:	f012 fbf4 	bl	80144d4 <puts>
	printf("\r\n\r\n-------------------------------------------------------------------\r\n");
 8001cec:	487d      	ldr	r0, [pc, #500]	@ (8001ee4 <ConsoleFunction+0x2b0>)
 8001cee:	f012 fbf1 	bl	80144d4 <puts>

	h->pState.buff = ctrlBuff;
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf4:	6a3a      	ldr	r2, [r7, #32]
 8001cf6:	619a      	str	r2, [r3, #24]

	printf("\r\n%s(\033[32m\xE2\x9C\x93\033[0m) $>", usernamePtr);
 8001cf8:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001cfa:	487b      	ldr	r0, [pc, #492]	@ (8001ee8 <ConsoleFunction+0x2b4>)
 8001cfc:	f012 fb7a 	bl	80143f4 <iprintf>
	int consoleStartIndex = (int)strlen(usernamePtr)+6;
 8001d00:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001d02:	f7fe fae5 	bl	80002d0 <strlen>
 8001d06:	4603      	mov	r3, r0
 8001d08:	3306      	adds	r3, #6
 8001d0a:	653b      	str	r3, [r7, #80]	@ 0x50
	fflush(stdout);
 8001d0c:	4b77      	ldr	r3, [pc, #476]	@ (8001eec <ConsoleFunction+0x2b8>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f012 fa2c 	bl	8014170 <fflush>

	while(h->cancel == 0)
 8001d18:	e3d0      	b.n	80024bc <ConsoleFunction+0x888>
	{
		if( h->pendingRedirect != 0 )
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d01a      	beq.n	8001d5a <ConsoleFunction+0x126>
		{
			h->pendingRedirect = 0;
 8001d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d26:	2200      	movs	r2, #0
 8001d28:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
			if ( CONSOLE_RedirectStreams(h, h->pendingRdStream, h->pendingWrStream, h->pendingRdCtx, h->pendingWrCtx) )
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2e:	f8d3 1410 	ldr.w	r1, [r3, #1040]	@ 0x410
 8001d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d34:	f8d3 2414 	ldr.w	r2, [r3, #1044]	@ 0x414
 8001d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3a:	f8d3 0418 	ldr.w	r0, [r3, #1048]	@ 0x418
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d40:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	4603      	mov	r3, r0
 8001d48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d4a:	f7ff fedf 	bl	8001b0c <CONSOLE_RedirectStreams>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <ConsoleFunction+0x126>
			{
				printf("was not able to redirect console streams, requested by user!");
 8001d54:	485d      	ldr	r0, [pc, #372]	@ (8001ecc <ConsoleFunction+0x298>)
 8001d56:	f012 fb4d 	bl	80143f4 <iprintf>
			}
		}

		int res = EOF;
 8001d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5e:	61fb      	str	r3, [r7, #28]
		while((res = getchar()) == EOF)
 8001d60:	e004      	b.n	8001d6c <ConsoleFunction+0x138>
		{
			if ( h->cancel == 1 ) goto exit;
 8001d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	f000 83b2 	beq.w	80024d0 <ConsoleFunction+0x89c>
		while((res = getchar()) == EOF)
 8001d6c:	f012 fb3a 	bl	80143e4 <getchar>
 8001d70:	61f8      	str	r0, [r7, #28]
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d78:	d0f3      	beq.n	8001d62 <ConsoleFunction+0x12e>
		}
		char myChar = res;
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	76fb      	strb	r3, [r7, #27]
		cspTYPE result = ControlSequenceParserConsume(myChar, &h->pState);
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d80:	f103 0208 	add.w	r2, r3, #8
 8001d84:	7efb      	ldrb	r3, [r7, #27]
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff f98f 	bl	80010ac <ControlSequenceParserConsume>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	76bb      	strb	r3, [r7, #26]
		if ( result == csptCHARACTER )
 8001d92:	7ebb      	ldrb	r3, [r7, #26]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	f040 80b3 	bne.w	8001f00 <ConsoleFunction+0x2cc>
		{
			putchar(myChar);
 8001d9a:	7efb      	ldrb	r3, [r7, #27]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f012 fb3b 	bl	8014418 <putchar>
			fflush(stdout);
 8001da2:	4b52      	ldr	r3, [pc, #328]	@ (8001eec <ConsoleFunction+0x2b8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f012 f9e1 	bl	8014170 <fflush>

			if ( lineBuff[lbPtr + 1] != '\0' )
 8001dae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db0:	3301      	adds	r3, #1
 8001db2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001db4:	4413      	add	r3, r2
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d061      	beq.n	8001e80 <ConsoleFunction+0x24c>
			{
				putchar(lineBuff[lbPtr]);
 8001dbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc0:	4413      	add	r3, r2
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f012 fb27 	bl	8014418 <putchar>
				fflush(stdout);
 8001dca:	4b48      	ldr	r3, [pc, #288]	@ (8001eec <ConsoleFunction+0x2b8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f012 f9cd 	bl	8014170 <fflush>

				int tmpPtr = lbPtr + 1;
 8001dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd8:	3301      	adds	r3, #1
 8001dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
				char parking = myChar;
 8001ddc:	7efb      	ldrb	r3, [r7, #27]
 8001dde:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
				char parking2 = lineBuff[lbPtr];
 8001de2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001de4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de6:	4413      	add	r3, r2
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
				while(tmpPtr < CONSOLE_LINE_SIZE)
 8001dee:	e02a      	b.n	8001e46 <ConsoleFunction+0x212>
				{
					putchar(lineBuff[tmpPtr]);
 8001df0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001df2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001df4:	4413      	add	r3, r2
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f012 fb0d 	bl	8014418 <putchar>
					fflush(stdout);
 8001dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8001eec <ConsoleFunction+0x2b8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f012 f9b3 	bl	8014170 <fflush>


					lineBuff[tmpPtr - 1] = parking;
 8001e0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e10:	4413      	add	r3, r2
 8001e12:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8001e16:	701a      	strb	r2, [r3, #0]
					parking = parking2;
 8001e18:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001e1c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
					parking2 = lineBuff[tmpPtr];
 8001e20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e24:	4413      	add	r3, r2
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

					if ( lineBuff[tmpPtr] == '\0' && parking == '\0')
 8001e2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e30:	4413      	add	r3, r2
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d103      	bne.n	8001e40 <ConsoleFunction+0x20c>
 8001e38:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d006      	beq.n	8001e4e <ConsoleFunction+0x21a>
						break;

					tmpPtr += 1;
 8001e40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e42:	3301      	adds	r3, #1
 8001e44:	64fb      	str	r3, [r7, #76]	@ 0x4c
				while(tmpPtr < CONSOLE_LINE_SIZE)
 8001e46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e48:	2b77      	cmp	r3, #119	@ 0x77
 8001e4a:	ddd1      	ble.n	8001df0 <ConsoleFunction+0x1bc>
 8001e4c:	e000      	b.n	8001e50 <ConsoleFunction+0x21c>
						break;
 8001e4e:	bf00      	nop
				}

				printf("\033[%dD", CONSOLE_LINE_SIZE + consoleStartIndex);
 8001e50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e52:	3378      	adds	r3, #120	@ 0x78
 8001e54:	4619      	mov	r1, r3
 8001e56:	4826      	ldr	r0, [pc, #152]	@ (8001ef0 <ConsoleFunction+0x2bc>)
 8001e58:	f012 facc 	bl	80143f4 <iprintf>
				printf("\033[%dC", consoleStartIndex + lbPtr + 1);
 8001e5c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001e5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e60:	4413      	add	r3, r2
 8001e62:	3301      	adds	r3, #1
 8001e64:	4619      	mov	r1, r3
 8001e66:	4823      	ldr	r0, [pc, #140]	@ (8001ef4 <ConsoleFunction+0x2c0>)
 8001e68:	f012 fac4 	bl	80143f4 <iprintf>
				lbPtr += 1;
 8001e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e6e:	3301      	adds	r3, #1
 8001e70:	657b      	str	r3, [r7, #84]	@ 0x54
				fflush(stdout);
 8001e72:	4b1e      	ldr	r3, [pc, #120]	@ (8001eec <ConsoleFunction+0x2b8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f012 f979 	bl	8014170 <fflush>
 8001e7e:	e007      	b.n	8001e90 <ConsoleFunction+0x25c>
			}
			else
			{
				lineBuff[lbPtr] = myChar;
 8001e80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e84:	4413      	add	r3, r2
 8001e86:	7efa      	ldrb	r2, [r7, #27]
 8001e88:	701a      	strb	r2, [r3, #0]
				lbPtr++;
 8001e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	657b      	str	r3, [r7, #84]	@ 0x54
			}

			if ( lbPtr > CONSOLE_LINE_SIZE )
 8001e90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e92:	2b78      	cmp	r3, #120	@ 0x78
 8001e94:	f240 8312 	bls.w	80024bc <ConsoleFunction+0x888>
			{
				printf("\r\n Buffer Overrun! Clearing input...\r\n");
 8001e98:	4817      	ldr	r0, [pc, #92]	@ (8001ef8 <ConsoleFunction+0x2c4>)
 8001e9a:	f012 fb1b 	bl	80144d4 <puts>
				// print new console line and decode the result
				printf("\r\n%s(\033[31m\xE2\x98\x93\033[0m) $>", usernamePtr);
 8001e9e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001ea0:	4816      	ldr	r0, [pc, #88]	@ (8001efc <ConsoleFunction+0x2c8>)
 8001ea2:	f012 faa7 	bl	80143f4 <iprintf>
				fflush(stdout);
 8001ea6:	4b11      	ldr	r3, [pc, #68]	@ (8001eec <ConsoleFunction+0x2b8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f012 f95f 	bl	8014170 <fflush>

				// clear the buffer and restore the pointer
				do
				{
					lineBuff[lbPtr] = ctrlC0_NUL;
 8001eb2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eb6:	4413      	add	r3, r2
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
				    if ( lbPtr == 0 ) break;
 8001ebc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 82f7 	beq.w	80024b2 <ConsoleFunction+0x87e>
				    else lbPtr -= 1;
 8001ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	657b      	str	r3, [r7, #84]	@ 0x54
					lineBuff[lbPtr] = ctrlC0_NUL;
 8001eca:	e7f2      	b.n	8001eb2 <ConsoleFunction+0x27e>
 8001ecc:	080181e8 	.word	0x080181e8
 8001ed0:	08019b2c 	.word	0x08019b2c
 8001ed4:	08018228 	.word	0x08018228
 8001ed8:	08018238 	.word	0x08018238
 8001edc:	08018244 	.word	0x08018244
 8001ee0:	0801824c 	.word	0x0801824c
 8001ee4:	08018270 	.word	0x08018270
 8001ee8:	080182bc 	.word	0x080182bc
 8001eec:	200001d4 	.word	0x200001d4
 8001ef0:	080182d4 	.word	0x080182d4
 8001ef4:	080182dc 	.word	0x080182dc
 8001ef8:	080182e4 	.word	0x080182e4
 8001efc:	0801830c 	.word	0x0801830c
				} while (1);
			}
		}
		else if ( result == csptCONTROL )
 8001f00:	7ebb      	ldrb	r3, [r7, #26]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	f040 82da 	bne.w	80024bc <ConsoleFunction+0x888>
		{
			switch (h->pState.type)
 8001f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0a:	895b      	ldrh	r3, [r3, #10]
 8001f0c:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001f10:	f000 8113 	beq.w	800213a <ConsoleFunction+0x506>
 8001f14:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001f18:	f300 82a5 	bgt.w	8002466 <ConsoleFunction+0x832>
 8001f1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f1e:	f000 8093 	beq.w	8002048 <ConsoleFunction+0x414>
 8001f22:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f24:	f300 829f 	bgt.w	8002466 <ConsoleFunction+0x832>
 8001f28:	2b0d      	cmp	r3, #13
 8001f2a:	d008      	beq.n	8001f3e <ConsoleFunction+0x30a>
 8001f2c:	2b0d      	cmp	r3, #13
 8001f2e:	f300 829a 	bgt.w	8002466 <ConsoleFunction+0x832>
 8001f32:	2b09      	cmp	r3, #9
 8001f34:	f000 80e2 	beq.w	80020fc <ConsoleFunction+0x4c8>
 8001f38:	2b0a      	cmp	r3, #10
 8001f3a:	f040 8294 	bne.w	8002466 <ConsoleFunction+0x832>
			{
				// implicit fall through
			case ctrlC0_LF:
			case ctrlC0_CR:
			{
				putchar(h->pState.type);
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f40:	895b      	ldrh	r3, [r3, #10]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f012 fa68 	bl	8014418 <putchar>
				fflush(stdout);
 8001f48:	4ba8      	ldr	r3, [pc, #672]	@ (80021ec <ConsoleFunction+0x5b8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f012 f90e 	bl	8014170 <fflush>
					putchar(ctrlC0_CR);
					fflush(stdout);
				}

				// implicit LF on every CR?
				if (1 && h->pState.type == ctrlC0_CR)
 8001f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f56:	895b      	ldrh	r3, [r3, #10]
 8001f58:	2b0d      	cmp	r3, #13
 8001f5a:	d108      	bne.n	8001f6e <ConsoleFunction+0x33a>
				{
					putchar(ctrlC0_LF);
 8001f5c:	200a      	movs	r0, #10
 8001f5e:	f012 fa5b 	bl	8014418 <putchar>
					fflush(stdout);
 8001f62:	4ba2      	ldr	r3, [pc, #648]	@ (80021ec <ConsoleFunction+0x5b8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f012 f901 	bl	8014170 <fflush>
				}

				// now adapt the line history accordingly
				memcpy(h->history.lines[h->history.lineHead], lineBuff, CONSOLE_LINE_SIZE);
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f70:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f74:	4613      	mov	r3, r2
 8001f76:	015b      	lsls	r3, r3, #5
 8001f78:	1a9b      	subs	r3, r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	3320      	adds	r3, #32
 8001f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f80:	4413      	add	r3, r2
 8001f82:	3304      	adds	r3, #4
 8001f84:	2278      	movs	r2, #120	@ 0x78
 8001f86:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f012 fdef 	bl	8014b6c <memcpy>
				h->history.lineHead = (h->history.lineHead + 1) % CONSOLE_LINE_HISTORY;
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f90:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001f94:	3301      	adds	r3, #1
 8001f96:	425a      	negs	r2, r3
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	f002 0207 	and.w	r2, r2, #7
 8001fa0:	bf58      	it	pl
 8001fa2:	4253      	negpl	r3, r2
 8001fa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fa6:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
				h->history.linePtr = h->history.lineHead;
 8001faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fac:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

				// parse and execute the command and make sure the output streams
				// are flushed before doing anything else with the result
				int result = TransformAndProcessTheCommand(lineBuff, CONSOLE_LINE_SIZE, &h->cState);
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb8:	461a      	mov	r2, r3
 8001fba:	2178      	movs	r1, #120	@ 0x78
 8001fbc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001fbe:	f7ff fb89 	bl	80016d4 <TransformAndProcessTheCommand>
 8001fc2:	60f8      	str	r0, [r7, #12]
				fflush(stdout);
 8001fc4:	4b89      	ldr	r3, [pc, #548]	@ (80021ec <ConsoleFunction+0x5b8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f012 f8d0 	bl	8014170 <fflush>
				fflush(stderr);
 8001fd0:	4b86      	ldr	r3, [pc, #536]	@ (80021ec <ConsoleFunction+0x5b8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f012 f8ca 	bl	8014170 <fflush>

#if CONSOLE_USE_DYNAMIC_USERNAME != 0
				// now check if there is a new user name (which is only possible by setenv command
				// which is executed after process command call above...
				usernamePtr = getenv("USERNAME");
 8001fdc:	4884      	ldr	r0, [pc, #528]	@ (80021f0 <ConsoleFunction+0x5bc>)
 8001fde:	f010 f919 	bl	8012214 <getenv>
 8001fe2:	65f8      	str	r0, [r7, #92]	@ 0x5c
				if ( usernamePtr == 0 ) usernamePtr = CONSOLE_USERNAME;
 8001fe4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <ConsoleFunction+0x3ba>
 8001fea:	4b82      	ldr	r3, [pc, #520]	@ (80021f4 <ConsoleFunction+0x5c0>)
 8001fec:	65fb      	str	r3, [r7, #92]	@ 0x5c
				consoleStartIndex = (int)strlen(usernamePtr)+6;
 8001fee:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001ff0:	f7fe f96e 	bl	80002d0 <strlen>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	3306      	adds	r3, #6
 8001ff8:	653b      	str	r3, [r7, #80]	@ 0x50
#endif
				// print new console line and decode the result
				printf("\r\n%s(", usernamePtr);
 8001ffa:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001ffc:	487e      	ldr	r0, [pc, #504]	@ (80021f8 <ConsoleFunction+0x5c4>)
 8001ffe:	f012 f9f9 	bl	80143f4 <iprintf>
				if (result == 0)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d103      	bne.n	8002010 <ConsoleFunction+0x3dc>
				{
					printf("\033[32m\xE2\x9C\x93\033[0m");
 8002008:	487c      	ldr	r0, [pc, #496]	@ (80021fc <ConsoleFunction+0x5c8>)
 800200a:	f012 f9f3 	bl	80143f4 <iprintf>
 800200e:	e002      	b.n	8002016 <ConsoleFunction+0x3e2>
				}
				else
				{
					printf("\033[31m\xE2\x98\x93\033[0m");
 8002010:	487b      	ldr	r0, [pc, #492]	@ (8002200 <ConsoleFunction+0x5cc>)
 8002012:	f012 f9ef 	bl	80143f4 <iprintf>
				}
				printf(") $>");
 8002016:	487b      	ldr	r0, [pc, #492]	@ (8002204 <ConsoleFunction+0x5d0>)
 8002018:	f012 f9ec 	bl	80143f4 <iprintf>
				fflush(stdout);
 800201c:	4b73      	ldr	r3, [pc, #460]	@ (80021ec <ConsoleFunction+0x5b8>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	4618      	mov	r0, r3
 8002024:	f012 f8a4 	bl	8014170 <fflush>

				// clear the buffer completely because an alias could change
				// the buffer content way more than the user has entered and so
				// we can not only clear lbPtr--!! as we have a safety space we
				// can set CONSOLE_LINE_SIZE as matching pointer value;
				lbPtr = CONSOLE_LINE_SIZE;
 8002028:	2378      	movs	r3, #120	@ 0x78
 800202a:	657b      	str	r3, [r7, #84]	@ 0x54
				do
				{
					lineBuff[lbPtr] = ctrlC0_NUL;
 800202c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800202e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002030:	4413      	add	r3, r2
 8002032:	2200      	movs	r2, #0
 8002034:	701a      	strb	r2, [r3, #0]
					if (lbPtr == 0) break;
 8002036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <ConsoleFunction+0x410>
					else lbPtr -= 1;
 800203c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800203e:	3b01      	subs	r3, #1
 8002040:	657b      	str	r3, [r7, #84]	@ 0x54
					lineBuff[lbPtr] = ctrlC0_NUL;
 8002042:	e7f3      	b.n	800202c <ConsoleFunction+0x3f8>
					if (lbPtr == 0) break;
 8002044:	bf00      	nop
				} while (1);

				break;
 8002046:	e239      	b.n	80024bc <ConsoleFunction+0x888>
			}
			case ctrlC0_DEL:
			{
				if (lbPtr > 0)
 8002048:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8233 	beq.w	80024b6 <ConsoleFunction+0x882>
				{
					int tmpPtr = lbPtr;
 8002050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002052:	647b      	str	r3, [r7, #68]	@ 0x44
					lbPtr -= 1;
 8002054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002056:	3b01      	subs	r3, #1
 8002058:	657b      	str	r3, [r7, #84]	@ 0x54
					lineBuff[lbPtr] = ctrlC0_NUL;
 800205a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800205c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800205e:	4413      	add	r3, r2
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
					putchar(ctrlC0_DEL);
 8002064:	207f      	movs	r0, #127	@ 0x7f
 8002066:	f012 f9d7 	bl	8014418 <putchar>
					fflush(stdout);
 800206a:	4b60      	ldr	r3, [pc, #384]	@ (80021ec <ConsoleFunction+0x5b8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	4618      	mov	r0, r3
 8002072:	f012 f87d 	bl	8014170 <fflush>
					while (lineBuff[tmpPtr] != ctrlC0_NUL)
 8002076:	e01c      	b.n	80020b2 <ConsoleFunction+0x47e>
					{
						lineBuff[tmpPtr - 1] = lineBuff[tmpPtr];
 8002078:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800207a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800207c:	441a      	add	r2, r3
 800207e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002080:	3b01      	subs	r3, #1
 8002082:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002084:	440b      	add	r3, r1
 8002086:	7812      	ldrb	r2, [r2, #0]
 8002088:	701a      	strb	r2, [r3, #0]
						putchar(lineBuff[tmpPtr - 1]);
 800208a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800208c:	3b01      	subs	r3, #1
 800208e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002090:	4413      	add	r3, r2
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f012 f9bf 	bl	8014418 <putchar>
						fflush(stdout);
 800209a:	4b54      	ldr	r3, [pc, #336]	@ (80021ec <ConsoleFunction+0x5b8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f012 f865 	bl	8014170 <fflush>
						tmpPtr += 1;
 80020a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020a8:	3301      	adds	r3, #1
 80020aa:	647b      	str	r3, [r7, #68]	@ 0x44
						if (tmpPtr >= CONSOLE_LINE_SIZE) break;
 80020ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020ae:	2b77      	cmp	r3, #119	@ 0x77
 80020b0:	dc06      	bgt.n	80020c0 <ConsoleFunction+0x48c>
					while (lineBuff[tmpPtr] != ctrlC0_NUL)
 80020b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80020b6:	4413      	add	r3, r2
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1dc      	bne.n	8002078 <ConsoleFunction+0x444>
 80020be:	e000      	b.n	80020c2 <ConsoleFunction+0x48e>
						if (tmpPtr >= CONSOLE_LINE_SIZE) break;
 80020c0:	bf00      	nop
					}
					lineBuff[tmpPtr - 1] = ctrlC0_NUL;
 80020c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020c4:	3b01      	subs	r3, #1
 80020c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80020c8:	4413      	add	r3, r2
 80020ca:	2200      	movs	r2, #0
 80020cc:	701a      	strb	r2, [r3, #0]
					putchar(' ');
 80020ce:	2020      	movs	r0, #32
 80020d0:	f012 f9a2 	bl	8014418 <putchar>
					fflush(stdout);
 80020d4:	4b45      	ldr	r3, [pc, #276]	@ (80021ec <ConsoleFunction+0x5b8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	4618      	mov	r0, r3
 80020dc:	f012 f848 	bl	8014170 <fflush>

					int moveBack = tmpPtr - lbPtr;
 80020e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80020e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	643b      	str	r3, [r7, #64]	@ 0x40
					for (; moveBack > 0; moveBack--)
 80020e8:	e004      	b.n	80020f4 <ConsoleFunction+0x4c0>
						PrintConsoleArrowLeft();
 80020ea:	f7ff fcf9 	bl	8001ae0 <PrintConsoleArrowLeft>
					for (; moveBack > 0; moveBack--)
 80020ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020f0:	3b01      	subs	r3, #1
 80020f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80020f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	dcf7      	bgt.n	80020ea <ConsoleFunction+0x4b6>
				}
				break;
 80020fa:	e1dc      	b.n	80024b6 <ConsoleFunction+0x882>
			}
			case ctrlC0_TAB:
			{
				int nums = 4 - (lbPtr % 4);
 80020fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	f1c3 0304 	rsb	r3, r3, #4
 8002106:	63fb      	str	r3, [r7, #60]	@ 0x3c
				for (; nums > 0; nums--)
 8002108:	e013      	b.n	8002132 <ConsoleFunction+0x4fe>
				{
					lineBuff[lbPtr] = ' ';
 800210a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800210c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800210e:	4413      	add	r3, r2
 8002110:	2220      	movs	r2, #32
 8002112:	701a      	strb	r2, [r3, #0]
					lbPtr += 1;
 8002114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002116:	3301      	adds	r3, #1
 8002118:	657b      	str	r3, [r7, #84]	@ 0x54
					putchar(' ');
 800211a:	2020      	movs	r0, #32
 800211c:	f012 f97c 	bl	8014418 <putchar>
					fflush(stdout);
 8002120:	4b32      	ldr	r3, [pc, #200]	@ (80021ec <ConsoleFunction+0x5b8>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	4618      	mov	r0, r3
 8002128:	f012 f822 	bl	8014170 <fflush>
				for (; nums > 0; nums--)
 800212c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800212e:	3b01      	subs	r3, #1
 8002130:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002134:	2b00      	cmp	r3, #0
 8002136:	dce8      	bgt.n	800210a <ConsoleFunction+0x4d6>
				}
				break;
 8002138:	e1c0      	b.n	80024bc <ConsoleFunction+0x888>
			}

			case ctrlC1_CSI:
			{
				if (ConsoleIsArrowLeft(&h->pState))
 800213a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213c:	3308      	adds	r3, #8
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fc3c 	bl	80019bc <ConsoleIsArrowLeft>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00c      	beq.n	8002164 <ConsoleFunction+0x530>
				{
					if (lbPtr > 0)
 800214a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 81b4 	beq.w	80024ba <ConsoleFunction+0x886>
					{
						lbPtr -= 1;
 8002152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002154:	3b01      	subs	r3, #1
 8002156:	657b      	str	r3, [r7, #84]	@ 0x54
						PrintConsoleControl(&h->pState);
 8002158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215a:	3308      	adds	r3, #8
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fc01 	bl	8001964 <PrintConsoleControl>
						}
						fflush(stdout);
					}
				}
				else goto unimp;
				break;
 8002162:	e1aa      	b.n	80024ba <ConsoleFunction+0x886>
				else if (ConsoleIsArrowRight(&h->pState))
 8002164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002166:	3308      	adds	r3, #8
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fc43 	bl	80019f4 <ConsoleIsArrowRight>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d021      	beq.n	80021b8 <ConsoleFunction+0x584>
					if (lbPtr < (CONSOLE_LINE_SIZE - 1))
 8002174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002176:	2b76      	cmp	r3, #118	@ 0x76
 8002178:	f200 819f 	bhi.w	80024ba <ConsoleFunction+0x886>
						if (lineBuff[lbPtr] == ctrlC0_NUL)
 800217c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800217e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002180:	4413      	add	r3, r2
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10e      	bne.n	80021a6 <ConsoleFunction+0x572>
							lineBuff[lbPtr] = ' ';
 8002188:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800218a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800218c:	4413      	add	r3, r2
 800218e:	2220      	movs	r2, #32
 8002190:	701a      	strb	r2, [r3, #0]
							putchar(' ');
 8002192:	2020      	movs	r0, #32
 8002194:	f012 f940 	bl	8014418 <putchar>
							fflush(stdout);
 8002198:	4b14      	ldr	r3, [pc, #80]	@ (80021ec <ConsoleFunction+0x5b8>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	4618      	mov	r0, r3
 80021a0:	f011 ffe6 	bl	8014170 <fflush>
 80021a4:	e004      	b.n	80021b0 <ConsoleFunction+0x57c>
							PrintConsoleControl(&h->pState);
 80021a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a8:	3308      	adds	r3, #8
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff fbda 	bl	8001964 <PrintConsoleControl>
						lbPtr += 1;
 80021b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021b2:	3301      	adds	r3, #1
 80021b4:	657b      	str	r3, [r7, #84]	@ 0x54
				break;
 80021b6:	e180      	b.n	80024ba <ConsoleFunction+0x886>
				else if (ConsoleIsEntf(&h->pState))
 80021b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ba:	3308      	adds	r3, #8
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff fc6d 	bl	8001a9c <ConsoleIsEntf>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d061      	beq.n	800228c <ConsoleFunction+0x658>
					if (lbPtr < (CONSOLE_LINE_SIZE - 1))
 80021c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021ca:	2b76      	cmp	r3, #118	@ 0x76
 80021cc:	f200 8175 	bhi.w	80024ba <ConsoleFunction+0x886>
						int tmpPtr = lbPtr + 1;
 80021d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021d2:	3301      	adds	r3, #1
 80021d4:	63bb      	str	r3, [r7, #56]	@ 0x38
						lineBuff[lbPtr] = ' ';
 80021d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80021d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021da:	4413      	add	r3, r2
 80021dc:	2220      	movs	r2, #32
 80021de:	701a      	strb	r2, [r3, #0]
						PrintConsoleControl(&h->pState);
 80021e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e2:	3308      	adds	r3, #8
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fbbd 	bl	8001964 <PrintConsoleControl>
						while (lineBuff[tmpPtr] != ctrlC0_NUL)
 80021ea:	e02a      	b.n	8002242 <ConsoleFunction+0x60e>
 80021ec:	200001d4 	.word	0x200001d4
 80021f0:	08018238 	.word	0x08018238
 80021f4:	08018244 	.word	0x08018244
 80021f8:	08018324 	.word	0x08018324
 80021fc:	0801832c 	.word	0x0801832c
 8002200:	0801833c 	.word	0x0801833c
 8002204:	0801834c 	.word	0x0801834c
							lineBuff[tmpPtr - 1] = lineBuff[tmpPtr];
 8002208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800220a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800220c:	441a      	add	r2, r3
 800220e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002210:	3b01      	subs	r3, #1
 8002212:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002214:	440b      	add	r3, r1
 8002216:	7812      	ldrb	r2, [r2, #0]
 8002218:	701a      	strb	r2, [r3, #0]
							putchar(lineBuff[tmpPtr - 1]);
 800221a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800221c:	3b01      	subs	r3, #1
 800221e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002220:	4413      	add	r3, r2
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f012 f8f7 	bl	8014418 <putchar>
							fflush(stdout);
 800222a:	4baa      	ldr	r3, [pc, #680]	@ (80024d4 <ConsoleFunction+0x8a0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	4618      	mov	r0, r3
 8002232:	f011 ff9d 	bl	8014170 <fflush>
							tmpPtr += 1;
 8002236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002238:	3301      	adds	r3, #1
 800223a:	63bb      	str	r3, [r7, #56]	@ 0x38
							if (tmpPtr >= CONSOLE_LINE_SIZE) break;
 800223c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800223e:	2b77      	cmp	r3, #119	@ 0x77
 8002240:	dc06      	bgt.n	8002250 <ConsoleFunction+0x61c>
						while (lineBuff[tmpPtr] != ctrlC0_NUL)
 8002242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002244:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002246:	4413      	add	r3, r2
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1dc      	bne.n	8002208 <ConsoleFunction+0x5d4>
 800224e:	e000      	b.n	8002252 <ConsoleFunction+0x61e>
							if (tmpPtr >= CONSOLE_LINE_SIZE) break;
 8002250:	bf00      	nop
						lineBuff[tmpPtr - 1] = ctrlC0_NUL;
 8002252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002254:	3b01      	subs	r3, #1
 8002256:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002258:	4413      	add	r3, r2
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
						putchar(' ');
 800225e:	2020      	movs	r0, #32
 8002260:	f012 f8da 	bl	8014418 <putchar>
						fflush(stdout);
 8002264:	4b9b      	ldr	r3, [pc, #620]	@ (80024d4 <ConsoleFunction+0x8a0>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	4618      	mov	r0, r3
 800226c:	f011 ff80 	bl	8014170 <fflush>
						int moveBack = tmpPtr - lbPtr;
 8002270:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	637b      	str	r3, [r7, #52]	@ 0x34
						for (; moveBack > 0; moveBack--)
 8002278:	e004      	b.n	8002284 <ConsoleFunction+0x650>
							PrintConsoleArrowLeft();
 800227a:	f7ff fc31 	bl	8001ae0 <PrintConsoleArrowLeft>
						for (; moveBack > 0; moveBack--)
 800227e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002280:	3b01      	subs	r3, #1
 8002282:	637b      	str	r3, [r7, #52]	@ 0x34
 8002284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002286:	2b00      	cmp	r3, #0
 8002288:	dcf7      	bgt.n	800227a <ConsoleFunction+0x646>
				break;
 800228a:	e116      	b.n	80024ba <ConsoleFunction+0x886>
				else if (ConsoleIsArrowUp(&h->pState) || ConsoleIsArrowDown(&h->pState))
 800228c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228e:	3308      	adds	r3, #8
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fbcb 	bl	8001a2c <ConsoleIsArrowUp>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d108      	bne.n	80022ae <ConsoleFunction+0x67a>
 800229c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229e:	3308      	adds	r3, #8
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fbdf 	bl	8001a64 <ConsoleIsArrowDown>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 80db 	beq.w	8002464 <ConsoleFunction+0x830>
					if (ConsoleIsArrowUp(&h->pState))
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b0:	3308      	adds	r3, #8
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff fbba 	bl	8001a2c <ConsoleIsArrowUp>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d010      	beq.n	80022e0 <ConsoleFunction+0x6ac>
						h->history.linePtr -= 1;
 80022be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80022c4:	1e5a      	subs	r2, r3, #1
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
						if (h->history.linePtr < 0) h->history.linePtr = CONSOLE_LINE_HISTORY - 1;
 80022cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ce:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	da14      	bge.n	8002300 <ConsoleFunction+0x6cc>
 80022d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d8:	2207      	movs	r2, #7
 80022da:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 80022de:	e00f      	b.n	8002300 <ConsoleFunction+0x6cc>
						h->history.linePtr += 1;
 80022e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ea:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
						if (h->history.linePtr >= CONSOLE_LINE_HISTORY) h->history.linePtr = 0;
 80022ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80022f4:	2b07      	cmp	r3, #7
 80022f6:	dd03      	ble.n	8002300 <ConsoleFunction+0x6cc>
 80022f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fa:	2200      	movs	r2, #0
 80022fc:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
					if (h->history.linePtr == h->history.lineHead)
 8002300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002302:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002308:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800230c:	429a      	cmp	r2, r3
 800230e:	d134      	bne.n	800237a <ConsoleFunction+0x746>
						int inputLength = (int)strnlen(lineBuff, CONSOLE_LINE_SIZE);
 8002310:	2178      	movs	r1, #120	@ 0x78
 8002312:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002314:	f012 faeb 	bl	80148ee <strnlen>
 8002318:	4603      	mov	r3, r0
 800231a:	613b      	str	r3, [r7, #16]
						printf("\033[%dD", CONSOLE_LINE_SIZE + consoleStartIndex);
 800231c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800231e:	3378      	adds	r3, #120	@ 0x78
 8002320:	4619      	mov	r1, r3
 8002322:	486d      	ldr	r0, [pc, #436]	@ (80024d8 <ConsoleFunction+0x8a4>)
 8002324:	f012 f866 	bl	80143f4 <iprintf>
						printf("\033[%dC", consoleStartIndex);
 8002328:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800232a:	486c      	ldr	r0, [pc, #432]	@ (80024dc <ConsoleFunction+0x8a8>)
 800232c:	f012 f862 	bl	80143f4 <iprintf>
						for (int i = 0; i < inputLength; i++)
 8002330:	2300      	movs	r3, #0
 8002332:	633b      	str	r3, [r7, #48]	@ 0x30
 8002334:	e005      	b.n	8002342 <ConsoleFunction+0x70e>
							putchar(' ');
 8002336:	2020      	movs	r0, #32
 8002338:	f012 f86e 	bl	8014418 <putchar>
						for (int i = 0; i < inputLength; i++)
 800233c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233e:	3301      	adds	r3, #1
 8002340:	633b      	str	r3, [r7, #48]	@ 0x30
 8002342:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	429a      	cmp	r2, r3
 8002348:	dbf5      	blt.n	8002336 <ConsoleFunction+0x702>
						memset(lineBuff, 0, CONSOLE_LINE_SIZE);
 800234a:	2278      	movs	r2, #120	@ 0x78
 800234c:	2100      	movs	r1, #0
 800234e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002350:	f012 faa6 	bl	80148a0 <memset>
						lbPtr = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	657b      	str	r3, [r7, #84]	@ 0x54
						printf("\033[%dD", CONSOLE_LINE_SIZE + consoleStartIndex);
 8002358:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800235a:	3378      	adds	r3, #120	@ 0x78
 800235c:	4619      	mov	r1, r3
 800235e:	485e      	ldr	r0, [pc, #376]	@ (80024d8 <ConsoleFunction+0x8a4>)
 8002360:	f012 f848 	bl	80143f4 <iprintf>
						printf("\033[%dC", consoleStartIndex);
 8002364:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002366:	485d      	ldr	r0, [pc, #372]	@ (80024dc <ConsoleFunction+0x8a8>)
 8002368:	f012 f844 	bl	80143f4 <iprintf>
						fflush(stdout);
 800236c:	4b59      	ldr	r3, [pc, #356]	@ (80024d4 <ConsoleFunction+0x8a0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	4618      	mov	r0, r3
 8002374:	f011 fefc 	bl	8014170 <fflush>
					if (h->history.linePtr == h->history.lineHead)
 8002378:	e072      	b.n	8002460 <ConsoleFunction+0x82c>
						int inputLength = (int)strnlen(lineBuff, CONSOLE_LINE_SIZE);
 800237a:	2178      	movs	r1, #120	@ 0x78
 800237c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800237e:	f012 fab6 	bl	80148ee <strnlen>
 8002382:	4603      	mov	r3, r0
 8002384:	617b      	str	r3, [r7, #20]
						printf("\033[%dD", CONSOLE_LINE_SIZE + consoleStartIndex);
 8002386:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002388:	3378      	adds	r3, #120	@ 0x78
 800238a:	4619      	mov	r1, r3
 800238c:	4852      	ldr	r0, [pc, #328]	@ (80024d8 <ConsoleFunction+0x8a4>)
 800238e:	f012 f831 	bl	80143f4 <iprintf>
						printf("\033[%dC", consoleStartIndex);
 8002392:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002394:	4851      	ldr	r0, [pc, #324]	@ (80024dc <ConsoleFunction+0x8a8>)
 8002396:	f012 f82d 	bl	80143f4 <iprintf>
						int i = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	62fb      	str	r3, [r7, #44]	@ 0x2c
						for (; i < inputLength; i++)
 800239e:	e005      	b.n	80023ac <ConsoleFunction+0x778>
							putchar(' ');
 80023a0:	2020      	movs	r0, #32
 80023a2:	f012 f839 	bl	8014418 <putchar>
						for (; i < inputLength; i++)
 80023a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a8:	3301      	adds	r3, #1
 80023aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	dbf5      	blt.n	80023a0 <ConsoleFunction+0x76c>
						printf("\033[%dD", CONSOLE_LINE_SIZE + consoleStartIndex);
 80023b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023b6:	3378      	adds	r3, #120	@ 0x78
 80023b8:	4619      	mov	r1, r3
 80023ba:	4847      	ldr	r0, [pc, #284]	@ (80024d8 <ConsoleFunction+0x8a4>)
 80023bc:	f012 f81a 	bl	80143f4 <iprintf>
						printf("\033[%dC", consoleStartIndex);
 80023c0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80023c2:	4846      	ldr	r0, [pc, #280]	@ (80024dc <ConsoleFunction+0x8a8>)
 80023c4:	f012 f816 	bl	80143f4 <iprintf>
						fflush(stdout);
 80023c8:	4b42      	ldr	r3, [pc, #264]	@ (80024d4 <ConsoleFunction+0x8a0>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f011 fece 	bl	8014170 <fflush>
						i = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
						memset(lineBuff, 0, CONSOLE_LINE_SIZE);
 80023d8:	2278      	movs	r2, #120	@ 0x78
 80023da:	2100      	movs	r1, #0
 80023dc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80023de:	f012 fa5f 	bl	80148a0 <memset>
						lbPtr = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	657b      	str	r3, [r7, #84]	@ 0x54
						while (h->history.lines[h->history.linePtr][i] != '\0')
 80023e6:	e026      	b.n	8002436 <ConsoleFunction+0x802>
							putchar(h->history.lines[h->history.linePtr][i]);
 80023e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ea:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80023ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023f0:	4613      	mov	r3, r2
 80023f2:	015b      	lsls	r3, r3, #5
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	18ca      	adds	r2, r1, r3
 80023fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023fc:	4413      	add	r3, r2
 80023fe:	3324      	adds	r3, #36	@ 0x24
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f012 f808 	bl	8014418 <putchar>
							lineBuff[lbPtr] = h->history.lines[h->history.linePtr][i];
 8002408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800240e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002410:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002412:	4419      	add	r1, r3
 8002414:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002416:	4613      	mov	r3, r2
 8002418:	015b      	lsls	r3, r3, #5
 800241a:	1a9b      	subs	r3, r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	18c2      	adds	r2, r0, r3
 8002420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002422:	4413      	add	r3, r2
 8002424:	3324      	adds	r3, #36	@ 0x24
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	700b      	strb	r3, [r1, #0]
							lbPtr++;
 800242a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800242c:	3301      	adds	r3, #1
 800242e:	657b      	str	r3, [r7, #84]	@ 0x54
							i++;
 8002430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002432:	3301      	adds	r3, #1
 8002434:	62fb      	str	r3, [r7, #44]	@ 0x2c
						while (h->history.lines[h->history.linePtr][i] != '\0')
 8002436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002438:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800243c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800243e:	4613      	mov	r3, r2
 8002440:	015b      	lsls	r3, r3, #5
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	18ca      	adds	r2, r1, r3
 8002448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800244a:	4413      	add	r3, r2
 800244c:	3324      	adds	r3, #36	@ 0x24
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1c9      	bne.n	80023e8 <ConsoleFunction+0x7b4>
						fflush(stdout);
 8002454:	4b1f      	ldr	r3, [pc, #124]	@ (80024d4 <ConsoleFunction+0x8a0>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	4618      	mov	r0, r3
 800245c:	f011 fe88 	bl	8014170 <fflush>
					if (h->history.linePtr == h->history.lineHead)
 8002460:	bf00      	nop
				break;
 8002462:	e02a      	b.n	80024ba <ConsoleFunction+0x886>
				else goto unimp;
 8002464:	bf00      	nop

			// all other non implemented controls
			default:
			{
			unimp:
				printf("UNIMP-CTRL-SEQ: ");
 8002466:	481e      	ldr	r0, [pc, #120]	@ (80024e0 <ConsoleFunction+0x8ac>)
 8002468:	f011 ffc4 	bl	80143f4 <iprintf>
				for (int i = 0; ctrlBuff[i] != '\0'; i++)
 800246c:	2300      	movs	r3, #0
 800246e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002470:	e00f      	b.n	8002492 <ConsoleFunction+0x85e>
					printf("%2.2x(%d) ", ctrlBuff[i], ctrlBuff[i]);
 8002472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002474:	6a3a      	ldr	r2, [r7, #32]
 8002476:	4413      	add	r3, r2
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	4619      	mov	r1, r3
 800247c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800247e:	6a3a      	ldr	r2, [r7, #32]
 8002480:	4413      	add	r3, r2
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	461a      	mov	r2, r3
 8002486:	4817      	ldr	r0, [pc, #92]	@ (80024e4 <ConsoleFunction+0x8b0>)
 8002488:	f011 ffb4 	bl	80143f4 <iprintf>
				for (int i = 0; ctrlBuff[i] != '\0'; i++)
 800248c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800248e:	3301      	adds	r3, #1
 8002490:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002494:	6a3a      	ldr	r2, [r7, #32]
 8002496:	4413      	add	r3, r2
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1e9      	bne.n	8002472 <ConsoleFunction+0x83e>
				printf("\r\n");
 800249e:	4812      	ldr	r0, [pc, #72]	@ (80024e8 <ConsoleFunction+0x8b4>)
 80024a0:	f012 f818 	bl	80144d4 <puts>
				fflush(stdout);
 80024a4:	4b0b      	ldr	r3, [pc, #44]	@ (80024d4 <ConsoleFunction+0x8a0>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f011 fe60 	bl	8014170 <fflush>
				break;
 80024b0:	e004      	b.n	80024bc <ConsoleFunction+0x888>
				    if ( lbPtr == 0 ) break;
 80024b2:	bf00      	nop
 80024b4:	e002      	b.n	80024bc <ConsoleFunction+0x888>
				break;
 80024b6:	bf00      	nop
 80024b8:	e000      	b.n	80024bc <ConsoleFunction+0x888>
				break;
 80024ba:	bf00      	nop
	while(h->cancel == 0)
 80024bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f43f ac2a 	beq.w	8001d1a <ConsoleFunction+0xe6>


		}
	}

exit:
 80024c6:	e004      	b.n	80024d2 <ConsoleFunction+0x89e>
	if (ctrlBuff == NULL) goto exit;
 80024c8:	bf00      	nop
 80024ca:	e012      	b.n	80024f2 <ConsoleFunction+0x8be>
	if (lineBuff == NULL) goto exit;
 80024cc:	bf00      	nop
 80024ce:	e010      	b.n	80024f2 <ConsoleFunction+0x8be>
			if ( h->cancel == 1 ) goto exit;
 80024d0:	bf00      	nop
	while (h->cancel == 0) vTaskDelay(pdTICKS_TO_MS(100));
 80024d2:	e00e      	b.n	80024f2 <ConsoleFunction+0x8be>
 80024d4:	200001d4 	.word	0x200001d4
 80024d8:	080182d4 	.word	0x080182d4
 80024dc:	080182dc 	.word	0x080182dc
 80024e0:	08018354 	.word	0x08018354
 80024e4:	08018368 	.word	0x08018368
 80024e8:	08018374 	.word	0x08018374
 80024ec:	2064      	movs	r0, #100	@ 0x64
 80024ee:	f00d fdf3 	bl	80100d8 <vTaskDelay>
 80024f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f8      	beq.n	80024ec <ConsoleFunction+0x8b8>
	
	printf("Console terminated, cleaning up...");
 80024fa:	482c      	ldr	r0, [pc, #176]	@ (80025ac <ConsoleFunction+0x978>)
 80024fc:	f011 ff7a 	bl	80143f4 <iprintf>
	fflush(stdout);
 8002500:	4b2b      	ldr	r3, [pc, #172]	@ (80025b0 <ConsoleFunction+0x97c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	4618      	mov	r0, r3
 8002508:	f011 fe32 	bl	8014170 <fflush>

	xSemaphoreTakeRecursive(h->cState.lockGuard, -1);
 800250c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f04f 31ff 	mov.w	r1, #4294967295
 8002514:	4618      	mov	r0, r3
 8002516:	f00c feab 	bl	800f270 <xQueueTakeMutexRecursive>
	while (!LIST_EMPTY(&h->cState.commands))
 800251a:	e01c      	b.n	8002556 <ConsoleFunction+0x922>
	{
		cmdEntry_t* pElement = h->cState.commands.lh_first;
 800251c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	60bb      	str	r3, [r7, #8]
		if (pElement != NULL)
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d01b      	beq.n	8002560 <ConsoleFunction+0x92c>
		{
			LIST_REMOVE(pElement, navigate);
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 800252e:	2b00      	cmp	r3, #0
 8002530:	d007      	beq.n	8002542 <ConsoleFunction+0x90e>
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	f8d2 2260 	ldr.w	r2, [r2, #608]	@ 0x260
 800253e:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	f8d2 225c 	ldr.w	r2, [r2, #604]	@ 0x25c
 800254e:	601a      	str	r2, [r3, #0]
			free(pElement);
 8002550:	68b8      	ldr	r0, [r7, #8]
 8002552:	f00f feaf 	bl	80122b4 <free>
	while (!LIST_EMPTY(&h->cState.commands))
 8002556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1de      	bne.n	800251c <ConsoleFunction+0x8e8>
 800255e:	e000      	b.n	8002562 <ConsoleFunction+0x92e>
		}
		else break;
 8002560:	bf00      	nop
	}

	xSemaphoreGiveRecursive(h->cState.lockGuard);
 8002562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f00c fe46 	bl	800f1f8 <xQueueGiveMutexRecursive>
	vSemaphoreDelete(h->cState.lockGuard);
 800256c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f00d f9d9 	bl	800f928 <vQueueDelete>
	free(h);
 8002576:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002578:	f00f fe9c 	bl	80122b4 <free>
	
	if (lineBuff != NULL) free(lineBuff);
 800257c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <ConsoleFunction+0x954>
 8002582:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002584:	f00f fe96 	bl	80122b4 <free>
	if (ctrlBuff != NULL) free(ctrlBuff);
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <ConsoleFunction+0x960>
 800258e:	6a38      	ldr	r0, [r7, #32]
 8002590:	f00f fe90 	bl	80122b4 <free>
	printf("done\r\n");
 8002594:	4807      	ldr	r0, [pc, #28]	@ (80025b4 <ConsoleFunction+0x980>)
 8002596:	f011 ff9d 	bl	80144d4 <puts>
 800259a:	e000      	b.n	800259e <ConsoleFunction+0x96a>
	if (h == NULL) goto destroy;
 800259c:	bf00      	nop
destroy:
	vTaskDelete(NULL);
 800259e:	2000      	movs	r0, #0
 80025a0:	f00d fcf0 	bl	800ff84 <vTaskDelete>
}
 80025a4:	bf00      	nop
 80025a6:	3760      	adds	r7, #96	@ 0x60
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	08018378 	.word	0x08018378
 80025b0:	200001d4 	.word	0x200001d4
 80025b4:	0801839c 	.word	0x0801839c

080025b8 <ConsolePrintHelp>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsolePrintHelp(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08a      	sub	sp, #40	@ 0x28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	61bb      	str	r3, [r7, #24]
	cmdState_t* c = &h->cState;
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	617b      	str	r3, [r7, #20]
	int found = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	627b      	str	r3, [r7, #36]	@ 0x24
	int cmdLen = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	623b      	str	r3, [r7, #32]
	if ( argc > 0 )
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	dd06      	ble.n	80025e8 <ConsolePrintHelp+0x30>
	{
		cmdLen = (int)strlen(argv[0]);
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fd fe76 	bl	80002d0 <strlen>
 80025e4:	4603      	mov	r3, r0
 80025e6:	623b      	str	r3, [r7, #32]
	}
	xSemaphoreTakeRecursive( c->lockGuard, -1 );
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f04f 31ff 	mov.w	r1, #4294967295
 80025f0:	4618      	mov	r0, r3
 80025f2:	f00c fe3d 	bl	800f270 <xQueueTakeMutexRecursive>
	cmdEntry_t* pElement = c->commands.lh_first;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	61fb      	str	r3, [r7, #28]

	printf("HELP FOR:\r\n");
 80025fc:	4831      	ldr	r0, [pc, #196]	@ (80026c4 <ConsolePrintHelp+0x10c>)
 80025fe:	f011 ff69 	bl	80144d4 <puts>
	printf("-------------------------------------------------------------------\r\n");
 8002602:	4831      	ldr	r0, [pc, #196]	@ (80026c8 <ConsolePrintHelp+0x110>)
 8002604:	f011 ff66 	bl	80144d4 <puts>
	while ( pElement != NULL )
 8002608:	e048      	b.n	800269c <ConsolePrintHelp+0xe4>
	{
		// if string compare result and determined length match, then this must be the function
		if ( ( argc == 0 ) || ( strncmp(argv[0], pElement->content.cmd, cmdLen) == 0 && cmdLen == pElement->content.cmdLen ) )
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00f      	beq.n	8002630 <ConsolePrintHelp+0x78>
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	6818      	ldr	r0, [r3, #0]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	3308      	adds	r3, #8
 8002618:	6a3a      	ldr	r2, [r7, #32]
 800261a:	4619      	mov	r1, r3
 800261c:	f012 f955 	bl	80148ca <strncmp>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d136      	bne.n	8002694 <ConsolePrintHelp+0xdc>
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800262a:	6a3a      	ldr	r2, [r7, #32]
 800262c:	429a      	cmp	r2, r3
 800262e:	d131      	bne.n	8002694 <ConsolePrintHelp+0xdc>
		{
			found = 1;
 8002630:	2301      	movs	r3, #1
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24
			if ( pElement->content.isAlias ) printf("ALIAS\r\n");
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <ConsolePrintHelp+0x8e>
 800263e:	4823      	ldr	r0, [pc, #140]	@ (80026cc <ConsolePrintHelp+0x114>)
 8002640:	f011 ff48 	bl	80144d4 <puts>
 8002644:	e002      	b.n	800264c <ConsolePrintHelp+0x94>
			else printf("COMMAND\r\n");
 8002646:	4822      	ldr	r0, [pc, #136]	@ (80026d0 <ConsolePrintHelp+0x118>)
 8002648:	f011 ff44 	bl	80144d4 <puts>
			printf("%s\r\n\r\n", pElement->content.cmd);
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	3308      	adds	r3, #8
 8002650:	4619      	mov	r1, r3
 8002652:	4820      	ldr	r0, [pc, #128]	@ (80026d4 <ConsolePrintHelp+0x11c>)
 8002654:	f011 fece 	bl	80143f4 <iprintf>
			if ( pElement->content.isAlias )
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00c      	beq.n	800267c <ConsolePrintHelp+0xc4>
			{
				printf("MAPPING\r\n");
 8002662:	481d      	ldr	r0, [pc, #116]	@ (80026d8 <ConsolePrintHelp+0x120>)
 8002664:	f011 ff36 	bl	80144d4 <puts>
				printf("%s -> '%s'\r\n", pElement->content.cmd, pElement->content.help);
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f103 0108 	add.w	r1, r3, #8
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3350      	adds	r3, #80	@ 0x50
 8002672:	461a      	mov	r2, r3
 8002674:	4819      	ldr	r0, [pc, #100]	@ (80026dc <ConsolePrintHelp+0x124>)
 8002676:	f011 febd 	bl	80143f4 <iprintf>
 800267a:	e008      	b.n	800268e <ConsolePrintHelp+0xd6>
			}
			else
			{
				printf("DESCRIPTION\r\n");
 800267c:	4818      	ldr	r0, [pc, #96]	@ (80026e0 <ConsolePrintHelp+0x128>)
 800267e:	f011 ff29 	bl	80144d4 <puts>
				printf("%s\r\n", pElement->content.help);
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3350      	adds	r3, #80	@ 0x50
 8002686:	4619      	mov	r1, r3
 8002688:	4816      	ldr	r0, [pc, #88]	@ (80026e4 <ConsolePrintHelp+0x12c>)
 800268a:	f011 feb3 	bl	80143f4 <iprintf>
			}
			printf("-------------------------------------------------------------------\r\n");
 800268e:	480e      	ldr	r0, [pc, #56]	@ (80026c8 <ConsolePrintHelp+0x110>)
 8002690:	f011 ff20 	bl	80144d4 <puts>
		}

		pElement = pElement->navigate.le_next;
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 800269a:	61fb      	str	r3, [r7, #28]
	while ( pElement != NULL )
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1b3      	bne.n	800260a <ConsolePrintHelp+0x52>
	}

	xSemaphoreGiveRecursive( c->lockGuard );
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f00c fda6 	bl	800f1f8 <xQueueGiveMutexRecursive>
	return -(found == 0);
 80026ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	bf0c      	ite	eq
 80026b2:	2301      	moveq	r3, #1
 80026b4:	2300      	movne	r3, #0
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	425b      	negs	r3, r3
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3728      	adds	r7, #40	@ 0x28
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	080183a4 	.word	0x080183a4
 80026c8:	080183b0 	.word	0x080183b0
 80026cc:	080183f8 	.word	0x080183f8
 80026d0:	08018400 	.word	0x08018400
 80026d4:	0801840c 	.word	0x0801840c
 80026d8:	08018414 	.word	0x08018414
 80026dc:	08018420 	.word	0x08018420
 80026e0:	08018430 	.word	0x08018430
 80026e4:	08018440 	.word	0x08018440

080026e8 <ConsoleExecReset>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleExecReset(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
	(void)argc;
	(void)argv;
	(void)context;
#if defined(__arm__)
	NVIC_SystemReset();
 80026f4:	f7fe fcc4 	bl	8001080 <__NVIC_SystemReset>

080026f8 <ConsolePrintKernelTicks>:
}

// --------------------------------------------------------------------------------------------------------------------
static int ConsolePrintKernelTicks(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
	(void)argc;
	(void)argv;
	(void)context;
	printf("%u", (unsigned int)xTaskGetTickCount());
 8002704:	f00d ff72 	bl	80105ec <xTaskGetTickCount>
 8002708:	4603      	mov	r3, r0
 800270a:	4619      	mov	r1, r3
 800270c:	4803      	ldr	r0, [pc, #12]	@ (800271c <ConsolePrintKernelTicks+0x24>)
 800270e:	f011 fe71 	bl	80143f4 <iprintf>
	return 0;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	08018448 	.word	0x08018448

08002720 <ConsolePrintTaskStats>:

#if defined(configGENERATE_RUN_TIME_STATS) && (configGENERATE_RUN_TIME_STATS != 0)
// --------------------------------------------------------------------------------------------------------------------
static int ConsolePrintTaskStats(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 8002720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002724:	f2ad 5dc4 	subw	sp, sp, #1476	@ 0x5c4
 8002728:	af06      	add	r7, sp, #24
 800272a:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 800272e:	f2a3 539c 	subw	r3, r3, #1436	@ 0x59c
 8002732:	6018      	str	r0, [r3, #0]
 8002734:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002738:	f5a3 63b4 	sub.w	r3, r3, #1440	@ 0x5a0
 800273c:	6019      	str	r1, [r3, #0]
 800273e:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002742:	f2a3 53a4 	subw	r3, r3, #1444	@ 0x5a4
 8002746:	601a      	str	r2, [r3, #0]
	(void)argc;
	(void)argv;
	(void)context;
	unsigned int numTasks = (unsigned int)uxTaskGetNumberOfTasks();
 8002748:	f00d ff60 	bl	801060c <uxTaskGetNumberOfTasks>
 800274c:	f8c7 05a0 	str.w	r0, [r7, #1440]	@ 0x5a0
	TaskStatus_t tasks[32]; // a maximium of 32 so far
	configRUN_TIME_COUNTER_TYPE totalTime = 0;
 8002750:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002754:	f5a3 63b3 	sub.w	r3, r3, #1432	@ 0x598
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]

	unsigned int numFeedback = uxTaskGetSystemState( tasks, numTasks, &totalTime);
 800275c:	f107 0210 	add.w	r2, r7, #16
 8002760:	f107 0314 	add.w	r3, r7, #20
 8002764:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	@ 0x5a0
 8002768:	4618      	mov	r0, r3
 800276a:	f00d ff5b 	bl	8010624 <uxTaskGetSystemState>
 800276e:	f8c7 059c 	str.w	r0, [r7, #1436]	@ 0x59c
	if (numFeedback > 0)
 8002772:	f8d7 359c 	ldr.w	r3, [r7, #1436]	@ 0x59c
 8002776:	2b00      	cmp	r3, #0
 8002778:	d008      	beq.n	800278c <ConsolePrintTaskStats+0x6c>
	{
		printf("|----|----------|----------|----------|---------|------------|-------|\r\n");
 800277a:	4876      	ldr	r0, [pc, #472]	@ (8002954 <ConsolePrintTaskStats+0x234>)
 800277c:	f011 feaa 	bl	80144d4 <puts>
		printf("| ID | NAME     | Prio     | BasePrio | State   | Ticks      | Rel.  |\r\n");
 8002780:	4875      	ldr	r0, [pc, #468]	@ (8002958 <ConsolePrintTaskStats+0x238>)
 8002782:	f011 fea7 	bl	80144d4 <puts>
		printf("|----|----------|----------|----------|---------|------------|-------|\r\n");
 8002786:	4873      	ldr	r0, [pc, #460]	@ (8002954 <ConsolePrintTaskStats+0x234>)
 8002788:	f011 fea4 	bl	80144d4 <puts>
	}
	for (unsigned int i = 0; i < numFeedback; i++ )
 800278c:	2300      	movs	r3, #0
 800278e:	f8c7 35a4 	str.w	r3, [r7, #1444]	@ 0x5a4
 8002792:	e0d0      	b.n	8002936 <ConsolePrintTaskStats+0x216>
	{
		float relativeRuntime = ( (float)tasks[i].ulRunTimeCounter * 100.0f / (float)totalTime );
 8002794:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002798:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 800279c:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 80027a0:	212c      	movs	r1, #44	@ 0x2c
 80027a2:	fb01 f303 	mul.w	r3, r1, r3
 80027a6:	4413      	add	r3, r2
 80027a8:	3318      	adds	r3, #24
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	ee07 3a90 	vmov	s15, r3
 80027b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027b4:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 800295c <ConsolePrintTaskStats+0x23c>
 80027b8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80027bc:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 80027c0:	f5a3 63b3 	sub.w	r3, r3, #1432	@ 0x598
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	ee07 3a90 	vmov	s15, r3
 80027ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027d2:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 80027d6:	edc3 7a00 	vstr	s15, [r3]
		char* state = (tasks[i].eCurrentState == eRunning) ? "RUN    " :
 80027da:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 80027de:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 80027e2:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 80027e6:	212c      	movs	r1, #44	@ 0x2c
 80027e8:	fb01 f303 	mul.w	r3, r1, r3
 80027ec:	4413      	add	r3, r2
 80027ee:	330c      	adds	r3, #12
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d041      	beq.n	800287a <ConsolePrintTaskStats+0x15a>
			(tasks[i].eCurrentState == eReady) ? "READY  " :
 80027f6:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 80027fa:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 80027fe:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 8002802:	212c      	movs	r1, #44	@ 0x2c
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	4413      	add	r3, r2
 800280a:	330c      	adds	r3, #12
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d031      	beq.n	8002876 <ConsolePrintTaskStats+0x156>
			(tasks[i].eCurrentState == eBlocked) ? "BLOCKED" :
 8002812:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002816:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 800281a:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 800281e:	212c      	movs	r1, #44	@ 0x2c
 8002820:	fb01 f303 	mul.w	r3, r1, r3
 8002824:	4413      	add	r3, r2
 8002826:	330c      	adds	r3, #12
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d021      	beq.n	8002872 <ConsolePrintTaskStats+0x152>
			(tasks[i].eCurrentState == eSuspended) ? "SUSPEND" :
 800282e:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002832:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 8002836:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 800283a:	212c      	movs	r1, #44	@ 0x2c
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	4413      	add	r3, r2
 8002842:	330c      	adds	r3, #12
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b03      	cmp	r3, #3
 8002848:	d011      	beq.n	800286e <ConsolePrintTaskStats+0x14e>
			(tasks[i].eCurrentState == eDeleted) ? "DELETED" : "INVALID";
 800284a:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 800284e:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 8002852:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 8002856:	212c      	movs	r1, #44	@ 0x2c
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	4413      	add	r3, r2
 800285e:	330c      	adds	r3, #12
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b04      	cmp	r3, #4
 8002864:	d101      	bne.n	800286a <ConsolePrintTaskStats+0x14a>
 8002866:	4b3e      	ldr	r3, [pc, #248]	@ (8002960 <ConsolePrintTaskStats+0x240>)
 8002868:	e008      	b.n	800287c <ConsolePrintTaskStats+0x15c>
 800286a:	4b3e      	ldr	r3, [pc, #248]	@ (8002964 <ConsolePrintTaskStats+0x244>)
 800286c:	e006      	b.n	800287c <ConsolePrintTaskStats+0x15c>
			(tasks[i].eCurrentState == eSuspended) ? "SUSPEND" :
 800286e:	4b3e      	ldr	r3, [pc, #248]	@ (8002968 <ConsolePrintTaskStats+0x248>)
 8002870:	e004      	b.n	800287c <ConsolePrintTaskStats+0x15c>
			(tasks[i].eCurrentState == eBlocked) ? "BLOCKED" :
 8002872:	4b3e      	ldr	r3, [pc, #248]	@ (800296c <ConsolePrintTaskStats+0x24c>)
 8002874:	e002      	b.n	800287c <ConsolePrintTaskStats+0x15c>
			(tasks[i].eCurrentState == eReady) ? "READY  " :
 8002876:	4b3e      	ldr	r3, [pc, #248]	@ (8002970 <ConsolePrintTaskStats+0x250>)
 8002878:	e000      	b.n	800287c <ConsolePrintTaskStats+0x15c>
		char* state = (tasks[i].eCurrentState == eRunning) ? "RUN    " :
 800287a:	4b3e      	ldr	r3, [pc, #248]	@ (8002974 <ConsolePrintTaskStats+0x254>)
 800287c:	f8c7 3594 	str.w	r3, [r7, #1428]	@ 0x594
		printf("| %2.2d | %-8.8s | %4.4d     | %4.4d     | %s | %10.10u | %5.1f |\r\n",
			(int)tasks[i].xTaskNumber, (char*)tasks[i].pcTaskName, (int)tasks[i].uxCurrentPriority, 
 8002880:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002884:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 8002888:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 800288c:	212c      	movs	r1, #44	@ 0x2c
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	4413      	add	r3, r2
 8002894:	3308      	adds	r3, #8
 8002896:	681b      	ldr	r3, [r3, #0]
		printf("| %2.2d | %-8.8s | %4.4d     | %4.4d     | %s | %10.10u | %5.1f |\r\n",
 8002898:	4698      	mov	r8, r3
			(int)tasks[i].xTaskNumber, (char*)tasks[i].pcTaskName, (int)tasks[i].uxCurrentPriority, 
 800289a:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 800289e:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 80028a2:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 80028a6:	212c      	movs	r1, #44	@ 0x2c
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	3304      	adds	r3, #4
 80028b0:	681d      	ldr	r5, [r3, #0]
 80028b2:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 80028b6:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 80028ba:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 80028be:	212c      	movs	r1, #44	@ 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	3310      	adds	r3, #16
 80028c8:	681b      	ldr	r3, [r3, #0]
		printf("| %2.2d | %-8.8s | %4.4d     | %4.4d     | %s | %10.10u | %5.1f |\r\n",
 80028ca:	4699      	mov	r9, r3
			(int)tasks[i].uxBasePriority, (char*)state, (unsigned int)tasks[i].ulRunTimeCounter,
 80028cc:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 80028d0:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 80028d4:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 80028d8:	212c      	movs	r1, #44	@ 0x2c
 80028da:	fb01 f303 	mul.w	r3, r1, r3
 80028de:	4413      	add	r3, r2
 80028e0:	3314      	adds	r3, #20
 80028e2:	681b      	ldr	r3, [r3, #0]
		printf("| %2.2d | %-8.8s | %4.4d     | %4.4d     | %s | %10.10u | %5.1f |\r\n",
 80028e4:	461e      	mov	r6, r3
			(int)tasks[i].uxBasePriority, (char*)state, (unsigned int)tasks[i].ulRunTimeCounter,
 80028e6:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 80028ea:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 80028ee:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 80028f2:	212c      	movs	r1, #44	@ 0x2c
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	3318      	adds	r3, #24
 80028fc:	681c      	ldr	r4, [r3, #0]
		printf("| %2.2d | %-8.8s | %4.4d     | %4.4d     | %s | %10.10u | %5.1f |\r\n",
 80028fe:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8002902:	6818      	ldr	r0, [r3, #0]
 8002904:	f7fd fe50 	bl	80005a8 <__aeabi_f2d>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002910:	9402      	str	r4, [sp, #8]
 8002912:	f8d7 3594 	ldr.w	r3, [r7, #1428]	@ 0x594
 8002916:	9301      	str	r3, [sp, #4]
 8002918:	9600      	str	r6, [sp, #0]
 800291a:	464b      	mov	r3, r9
 800291c:	462a      	mov	r2, r5
 800291e:	4641      	mov	r1, r8
 8002920:	4815      	ldr	r0, [pc, #84]	@ (8002978 <ConsolePrintTaskStats+0x258>)
 8002922:	f011 fd67 	bl	80143f4 <iprintf>
			(float)relativeRuntime);
		printf("|----|----------|----------|----------|---------|------------|-------|\r\n");
 8002926:	480b      	ldr	r0, [pc, #44]	@ (8002954 <ConsolePrintTaskStats+0x234>)
 8002928:	f011 fdd4 	bl	80144d4 <puts>
	for (unsigned int i = 0; i < numFeedback; i++ )
 800292c:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 8002930:	3301      	adds	r3, #1
 8002932:	f8c7 35a4 	str.w	r3, [r7, #1444]	@ 0x5a4
 8002936:	f8d7 25a4 	ldr.w	r2, [r7, #1444]	@ 0x5a4
 800293a:	f8d7 359c 	ldr.w	r3, [r7, #1436]	@ 0x59c
 800293e:	429a      	cmp	r2, r3
 8002940:	f4ff af28 	bcc.w	8002794 <ConsolePrintTaskStats+0x74>
	}

	return 0;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	f207 57ac 	addw	r7, r7, #1452	@ 0x5ac
 800294c:	46bd      	mov	sp, r7
 800294e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002952:	bf00      	nop
 8002954:	0801844c 	.word	0x0801844c
 8002958:	08018494 	.word	0x08018494
 800295c:	42c80000 	.word	0x42c80000
 8002960:	080184dc 	.word	0x080184dc
 8002964:	080184e4 	.word	0x080184e4
 8002968:	080184ec 	.word	0x080184ec
 800296c:	080184f4 	.word	0x080184f4
 8002970:	080184fc 	.word	0x080184fc
 8002974:	08018504 	.word	0x08018504
 8002978:	0801850c 	.word	0x0801850c

0800297c <ConsolePrintKernelVersion>:
#endif

// --------------------------------------------------------------------------------------------------------------------
static int ConsolePrintKernelVersion(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	617b      	str	r3, [r7, #20]
	(void)h;
	(void)argc;
	(void)argv;

	printf("FreeRTOS Kernel %s", tskKERNEL_VERSION_NUMBER);
 800298c:	4904      	ldr	r1, [pc, #16]	@ (80029a0 <ConsolePrintKernelVersion+0x24>)
 800298e:	4805      	ldr	r0, [pc, #20]	@ (80029a4 <ConsolePrintKernelVersion+0x28>)
 8002990:	f011 fd30 	bl	80143f4 <iprintf>
	return 0;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	08018550 	.word	0x08018550
 80029a4:	08018558 	.word	0x08018558

080029a8 <ConsoleWhoAmI>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleWhoAmI(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	613b      	str	r3, [r7, #16]
	(void)h;
	(void)argc;
	(void)argv;

#if CONSOLE_USE_DYNAMIC_USERNAME != 0
	char* usernamePtr = getenv("USERNAME");
 80029b8:	4808      	ldr	r0, [pc, #32]	@ (80029dc <ConsoleWhoAmI+0x34>)
 80029ba:	f00f fc2b 	bl	8012214 <getenv>
 80029be:	6178      	str	r0, [r7, #20]
	if ( usernamePtr == 0 ) usernamePtr = CONSOLE_USERNAME;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <ConsoleWhoAmI+0x22>
 80029c6:	4b06      	ldr	r3, [pc, #24]	@ (80029e0 <ConsoleWhoAmI+0x38>)
 80029c8:	617b      	str	r3, [r7, #20]
#else
	char* usernamePtr = CONSOLE_USERNAME;
#endif

	printf("%s", usernamePtr);
 80029ca:	6979      	ldr	r1, [r7, #20]
 80029cc:	4805      	ldr	r0, [pc, #20]	@ (80029e4 <ConsoleWhoAmI+0x3c>)
 80029ce:	f011 fd11 	bl	80143f4 <iprintf>
	return 0;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	08018238 	.word	0x08018238
 80029e0:	08018244 	.word	0x08018244
 80029e4:	0801856c 	.word	0x0801856c

080029e8 <ConsoleExit>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleExit(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	617b      	str	r3, [r7, #20]
	(void)h;
	(void)argc;
	(void)argv;

	h->cancel = 1;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2201      	movs	r2, #1
 80029fc:	621a      	str	r2, [r3, #32]
	return 0;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	371c      	adds	r7, #28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <ConsoleMallInfo>:

//---------------------------------------------------------------------------------------------------------------------
static int ConsoleMallInfo(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b090      	sub	sp, #64	@ 0x40
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	(void)h;
	(void)argc;
	(void)argv;

#ifndef WIN32
	struct mallinfo info = mallinfo();
 8002a1c:	f107 0314 	add.w	r3, r7, #20
 8002a20:	4618      	mov	r0, r3
 8002a22:	f00f fcf1 	bl	8012408 <mallinfo>
	printf("arena    : %d\r\n", info.arena);
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	480e      	ldr	r0, [pc, #56]	@ (8002a64 <ConsoleMallInfo+0x58>)
 8002a2c:	f011 fce2 	bl	80143f4 <iprintf>
	printf("ordblks  : %d\r\n", info.ordblks);
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	4619      	mov	r1, r3
 8002a34:	480c      	ldr	r0, [pc, #48]	@ (8002a68 <ConsoleMallInfo+0x5c>)
 8002a36:	f011 fcdd 	bl	80143f4 <iprintf>
	printf("uordblks : %d\r\n", info.uordblks);
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	480b      	ldr	r0, [pc, #44]	@ (8002a6c <ConsoleMallInfo+0x60>)
 8002a40:	f011 fcd8 	bl	80143f4 <iprintf>
	printf("fordblks : %d\r\n", info.fordblks);
 8002a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a46:	4619      	mov	r1, r3
 8002a48:	4809      	ldr	r0, [pc, #36]	@ (8002a70 <ConsoleMallInfo+0x64>)
 8002a4a:	f011 fcd3 	bl	80143f4 <iprintf>
	printf("keepcost : %d\r\n", info.keepcost);
 8002a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a50:	4619      	mov	r1, r3
 8002a52:	4808      	ldr	r0, [pc, #32]	@ (8002a74 <ConsoleMallInfo+0x68>)
 8002a54:	f011 fcce 	bl	80143f4 <iprintf>
	return 0;
 8002a58:	2300      	movs	r3, #0
#else
	printf("WIN32 has quite a lot!");
	return -1;
#endif
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3740      	adds	r7, #64	@ 0x40
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	08018570 	.word	0x08018570
 8002a68:	08018580 	.word	0x08018580
 8002a6c:	08018590 	.word	0x08018590
 8002a70:	080185a0 	.word	0x080185a0
 8002a74:	080185b0 	.word	0x080185b0

08002a78 <ConsoleGetEnv>:

//---------------------------------------------------------------------------------------------------------------------
static int ConsoleGetEnv(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	617b      	str	r3, [r7, #20]
	(void)h;

	if ( argc > 0 )
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	dd1a      	ble.n	8002ac4 <ConsoleGetEnv+0x4c>
	{
		char* envValue = getenv(argv[0]);
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f00f fbbe 	bl	8012214 <getenv>
 8002a98:	6138      	str	r0, [r7, #16]
		if ( envValue != NULL )
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <ConsoleGetEnv+0x3a>
		{
			printf("%s=%s", argv[0], envValue);
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	480b      	ldr	r0, [pc, #44]	@ (8002ad8 <ConsoleGetEnv+0x60>)
 8002aaa:	f011 fca3 	bl	80143f4 <iprintf>
			return 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	e00d      	b.n	8002ace <ConsoleGetEnv+0x56>
		}
		else
		{
			printf("%s is no environment variable", argv[0]);
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4808      	ldr	r0, [pc, #32]	@ (8002adc <ConsoleGetEnv+0x64>)
 8002aba:	f011 fc9b 	bl	80143f4 <iprintf>
			return -1;
 8002abe:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac2:	e004      	b.n	8002ace <ConsoleGetEnv+0x56>
		}
	}
	else
	{
		printf("invalid number of arguments");
 8002ac4:	4806      	ldr	r0, [pc, #24]	@ (8002ae0 <ConsoleGetEnv+0x68>)
 8002ac6:	f011 fc95 	bl	80143f4 <iprintf>
		return -1;
 8002aca:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	080185c0 	.word	0x080185c0
 8002adc:	080185c8 	.word	0x080185c8
 8002ae0:	080185e8 	.word	0x080185e8

08002ae4 <ConsoleSetEnv>:

//---------------------------------------------------------------------------------------------------------------------
static int ConsoleSetEnv(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	617b      	str	r3, [r7, #20]
	(void)h;
	if ( argc > 1 )
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	dd1a      	ble.n	8002b30 <ConsoleSetEnv+0x4c>
	{
		int result = setenv(argv[0], argv[1], 1);
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	3304      	adds	r3, #4
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2201      	movs	r2, #1
 8002b06:	4619      	mov	r1, r3
 8002b08:	f010 fb22 	bl	8013150 <setenv>
 8002b0c:	6138      	str	r0, [r7, #16]
		if ( result == 0 )
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <ConsoleSetEnv+0x34>
		{
			return 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	e010      	b.n	8002b3a <ConsoleSetEnv+0x56>
		}
		else
		{
			printf("could not set %s with value %s", argv[0], argv[1]);
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	6819      	ldr	r1, [r3, #0]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	3304      	adds	r3, #4
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	4807      	ldr	r0, [pc, #28]	@ (8002b44 <ConsoleSetEnv+0x60>)
 8002b26:	f011 fc65 	bl	80143f4 <iprintf>
			return -1;
 8002b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2e:	e004      	b.n	8002b3a <ConsoleSetEnv+0x56>
		}
	}
	else
	{
		printf("invalid number of arguments");
 8002b30:	4805      	ldr	r0, [pc, #20]	@ (8002b48 <ConsoleSetEnv+0x64>)
 8002b32:	f011 fc5f 	bl	80143f4 <iprintf>
		return -1;
 8002b36:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	08018604 	.word	0x08018604
 8002b48:	080185e8 	.word	0x080185e8

08002b4c <ConsoleAliasConfig>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleAliasConfig(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b0a8      	sub	sp, #160	@ 0xa0
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	if ( argc == 0 )
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d105      	bne.n	8002b70 <ConsoleAliasConfig+0x24>
	{
		printf("invalid number of arguments");
 8002b64:	4855      	ldr	r0, [pc, #340]	@ (8002cbc <ConsoleAliasConfig+0x170>)
 8002b66:	f011 fc45 	bl	80143f4 <iprintf>
		return -1;
 8002b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6e:	e0a0      	b.n	8002cb2 <ConsoleAliasConfig+0x166>
	}

	if( argc == 1 )
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d114      	bne.n	8002ba0 <ConsoleAliasConfig+0x54>
	{
		if ( CONSOLE_RemoveAliasOrCommand(h, argv[0]) == 0 )
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002b80:	f000 fb60 	bl	8003244 <CONSOLE_RemoveAliasOrCommand>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d104      	bne.n	8002b94 <ConsoleAliasConfig+0x48>
		{
			printf("alias removed successfully");
 8002b8a:	484d      	ldr	r0, [pc, #308]	@ (8002cc0 <ConsoleAliasConfig+0x174>)
 8002b8c:	f011 fc32 	bl	80143f4 <iprintf>
			return 0;
 8002b90:	2300      	movs	r3, #0
 8002b92:	e08e      	b.n	8002cb2 <ConsoleAliasConfig+0x166>
		}
		else
		{
			printf("alias was not removed");
 8002b94:	484b      	ldr	r0, [pc, #300]	@ (8002cc4 <ConsoleAliasConfig+0x178>)
 8002b96:	f011 fc2d 	bl	80143f4 <iprintf>
			return -1;
 8002b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9e:	e088      	b.n	8002cb2 <ConsoleAliasConfig+0x166>
		}
	}
	else
	{
		char aliasBuffer[CONSOLE_LINE_SIZE];
		unsigned int cmdPtr = 1;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		unsigned int buffPtr = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		memset(aliasBuffer, 0, sizeof(aliasBuffer));
 8002bac:	f107 0314 	add.w	r3, r7, #20
 8002bb0:	2278      	movs	r2, #120	@ 0x78
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f011 fe73 	bl	80148a0 <memset>
		for( unsigned int i = 0; i < sizeof(aliasBuffer)/sizeof(*aliasBuffer); i++)
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002bc0:	e05d      	b.n	8002c7e <ConsoleAliasConfig+0x132>
		{
			if ( cmdPtr < (unsigned int)argc )
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d24e      	bcs.n	8002c6a <ConsoleAliasConfig+0x11e>
			{
				int argLen = strnlen(argv[cmdPtr], CONSOLE_LINE_SIZE);
 8002bcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2178      	movs	r1, #120	@ 0x78
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f011 fe87 	bl	80148ee <strnlen>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				if ( argLen > 0 )
 8002be6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	dd37      	ble.n	8002c5e <ConsoleAliasConfig+0x112>
				{
					if ( (buffPtr+1) + argLen >= CONSOLE_LINE_SIZE )
 8002bee:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002bf2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	2b77      	cmp	r3, #119	@ 0x77
 8002bfc:	d905      	bls.n	8002c0a <ConsoleAliasConfig+0xbe>
					{
						printf("the sum of the alias parameters is longer than the max line buffer size!");
 8002bfe:	4832      	ldr	r0, [pc, #200]	@ (8002cc8 <ConsoleAliasConfig+0x17c>)
 8002c00:	f011 fbf8 	bl	80143f4 <iprintf>
						return -1;
 8002c04:	f04f 33ff 	mov.w	r3, #4294967295
 8002c08:	e053      	b.n	8002cb2 <ConsoleAliasConfig+0x166>
					}
					else
					{
						memcpy(&aliasBuffer[buffPtr], argv[cmdPtr], argLen);
 8002c0a:	f107 0214 	add.w	r2, r7, #20
 8002c0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c12:	18d0      	adds	r0, r2, r3
 8002c14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002c24:	4619      	mov	r1, r3
 8002c26:	f011 ffa1 	bl	8014b6c <memcpy>
						buffPtr += argLen;
 8002c2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c2e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002c32:	4413      	add	r3, r2
 8002c34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
						if ( ( cmdPtr + 1) != (unsigned int)argc )
 8002c38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d012      	beq.n	8002c6a <ConsoleAliasConfig+0x11e>
						{
							aliasBuffer[buffPtr] = ' ';
 8002c44:	f107 0214 	add.w	r2, r7, #20
 8002c48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c4c:	4413      	add	r3, r2
 8002c4e:	2220      	movs	r2, #32
 8002c50:	701a      	strb	r2, [r3, #0]
							buffPtr += 1;
 8002c52:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c56:	3301      	adds	r3, #1
 8002c58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c5c:	e005      	b.n	8002c6a <ConsoleAliasConfig+0x11e>
						}
					}
				}
				else
				{
					printf("at least one of the alias parameters is too long for mapping");
 8002c5e:	481b      	ldr	r0, [pc, #108]	@ (8002ccc <ConsoleAliasConfig+0x180>)
 8002c60:	f011 fbc8 	bl	80143f4 <iprintf>
					return -1;
 8002c64:	f04f 33ff 	mov.w	r3, #4294967295
 8002c68:	e023      	b.n	8002cb2 <ConsoleAliasConfig+0x166>
				}
			}
			cmdPtr++;
 8002c6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c6e:	3301      	adds	r3, #1
 8002c70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		for( unsigned int i = 0; i < sizeof(aliasBuffer)/sizeof(*aliasBuffer); i++)
 8002c74:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c78:	3301      	adds	r3, #1
 8002c7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c82:	2b77      	cmp	r3, #119	@ 0x77
 8002c84:	d99d      	bls.n	8002bc2 <ConsoleAliasConfig+0x76>
		}
		if ( CONSOLE_RegisterAlias(h, argv[0], aliasBuffer) == 0 )
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f107 0214 	add.w	r2, r7, #20
 8002c8e:	4619      	mov	r1, r3
 8002c90:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002c94:	f000 fa0d 	bl	80030b2 <CONSOLE_RegisterAlias>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d104      	bne.n	8002ca8 <ConsoleAliasConfig+0x15c>
		{
			printf("alias created successfully");
 8002c9e:	480c      	ldr	r0, [pc, #48]	@ (8002cd0 <ConsoleAliasConfig+0x184>)
 8002ca0:	f011 fba8 	bl	80143f4 <iprintf>
			return 0;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	e004      	b.n	8002cb2 <ConsoleAliasConfig+0x166>
		}
		else
		{
			printf("alias was not created");
 8002ca8:	480a      	ldr	r0, [pc, #40]	@ (8002cd4 <ConsoleAliasConfig+0x188>)
 8002caa:	f011 fba3 	bl	80143f4 <iprintf>
			return -1;
 8002cae:	f04f 33ff 	mov.w	r3, #4294967295
		}
	}
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	37a0      	adds	r7, #160	@ 0xa0
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	080185e8 	.word	0x080185e8
 8002cc0:	08018624 	.word	0x08018624
 8002cc4:	08018640 	.word	0x08018640
 8002cc8:	08018658 	.word	0x08018658
 8002ccc:	080186a4 	.word	0x080186a4
 8002cd0:	080186e4 	.word	0x080186e4
 8002cd4:	08018700 	.word	0x08018700

08002cd8 <ConsoleRegisterBasicCommands>:

// --------------------------------------------------------------------------------------------------------------------
static void ConsoleRegisterBasicCommands( ConsoleHandle_t h )
// --------------------------------------------------------------------------------------------------------------------
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	6078      	str	r0, [r7, #4]
	CONSOLE_RegisterCommand(h, "help",     "<<help>> prints the help of all commands.\r\nIf a <<command>> is passed as argument to help,\r\nonly the help text of this command will be printed on the console.",
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	4b2c      	ldr	r3, [pc, #176]	@ (8002d98 <ConsoleRegisterBasicCommands+0xc0>)
 8002ce6:	4a2d      	ldr	r2, [pc, #180]	@ (8002d9c <ConsoleRegisterBasicCommands+0xc4>)
 8002ce8:	492d      	ldr	r1, [pc, #180]	@ (8002da0 <ConsoleRegisterBasicCommands+0xc8>)
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f912 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsolePrintHelp, h);
	CONSOLE_RegisterCommand(h, "version",  "<<version>> prints the kernel version of the FreeRTOS kernel with which\r\n the current project has been built.",
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8002da4 <ConsoleRegisterBasicCommands+0xcc>)
 8002cf6:	4a2c      	ldr	r2, [pc, #176]	@ (8002da8 <ConsoleRegisterBasicCommands+0xd0>)
 8002cf8:	492c      	ldr	r1, [pc, #176]	@ (8002dac <ConsoleRegisterBasicCommands+0xd4>)
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f90a 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsolePrintKernelVersion, h);
	CONSOLE_RegisterCommand(h, "whoami",   "<<whoami>> prints the current username which is set in this console instance",
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	4b2a      	ldr	r3, [pc, #168]	@ (8002db0 <ConsoleRegisterBasicCommands+0xd8>)
 8002d06:	4a2b      	ldr	r2, [pc, #172]	@ (8002db4 <ConsoleRegisterBasicCommands+0xdc>)
 8002d08:	492b      	ldr	r1, [pc, #172]	@ (8002db8 <ConsoleRegisterBasicCommands+0xe0>)
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f902 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleWhoAmI, h);
	CONSOLE_RegisterCommand(h, "mallinfo", "<<mallinfo>> returns a structure describing the current state of\r\nmemory allocation.  The structure is defined in malloc.h.  The\r\nfollowing fields are defined: <<arena>> is the total amount of space\r\nin the heap; <<ordblks>> is the number of chunks which are not in use;\r\n<<uordblks>> is the total amount of space allocated by <<malloc>>;\r\n<<fordblks>> is the total amount of space not in use; <<keepcost>> is\r\nthe size of the top most memory block.\r\n",
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	4b29      	ldr	r3, [pc, #164]	@ (8002dbc <ConsoleRegisterBasicCommands+0xe4>)
 8002d16:	4a2a      	ldr	r2, [pc, #168]	@ (8002dc0 <ConsoleRegisterBasicCommands+0xe8>)
 8002d18:	492a      	ldr	r1, [pc, #168]	@ (8002dc4 <ConsoleRegisterBasicCommands+0xec>)
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f8fa 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleMallInfo, h);
	CONSOLE_RegisterCommand(h, "getenv",   "<<getenv>> searches the list of environment variable names and values\r\n(using the global pointer ``<<char **environ>>'') for a variable whose\r\nname matches the string at <[name]>.  If a variable name matches,\r\n<<getenv>> returns a pointer to the associated value.",
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	4b28      	ldr	r3, [pc, #160]	@ (8002dc8 <ConsoleRegisterBasicCommands+0xf0>)
 8002d26:	4a29      	ldr	r2, [pc, #164]	@ (8002dcc <ConsoleRegisterBasicCommands+0xf4>)
 8002d28:	4929      	ldr	r1, [pc, #164]	@ (8002dd0 <ConsoleRegisterBasicCommands+0xf8>)
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f8f2 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleGetEnv, h);
	CONSOLE_RegisterCommand(h, "setenv",   "<<setenv>> is similar to <<getenv>> but it sets a global variable\r\nin the list of environment variable names and values",
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	4b27      	ldr	r3, [pc, #156]	@ (8002dd4 <ConsoleRegisterBasicCommands+0xfc>)
 8002d36:	4a28      	ldr	r2, [pc, #160]	@ (8002dd8 <ConsoleRegisterBasicCommands+0x100>)
 8002d38:	4928      	ldr	r1, [pc, #160]	@ (8002ddc <ConsoleRegisterBasicCommands+0x104>)
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f8ea 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleSetEnv, h);
	CONSOLE_RegisterCommand(h, "exit",     "<<exit>> leaves the running console instance and stops the consoel thread.\r\n It clears all given resources.\r\nThere is no console support after calling <<exit>> anymore",
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	4b26      	ldr	r3, [pc, #152]	@ (8002de0 <ConsoleRegisterBasicCommands+0x108>)
 8002d46:	4a27      	ldr	r2, [pc, #156]	@ (8002de4 <ConsoleRegisterBasicCommands+0x10c>)
 8002d48:	4927      	ldr	r1, [pc, #156]	@ (8002de8 <ConsoleRegisterBasicCommands+0x110>)
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f8e2 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleExit, h);
	CONSOLE_RegisterCommand(h, "reset",     "<<reset>> executes a soft reset of the MCU.",
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	4b25      	ldr	r3, [pc, #148]	@ (8002dec <ConsoleRegisterBasicCommands+0x114>)
 8002d56:	4a26      	ldr	r2, [pc, #152]	@ (8002df0 <ConsoleRegisterBasicCommands+0x118>)
 8002d58:	4926      	ldr	r1, [pc, #152]	@ (8002df4 <ConsoleRegisterBasicCommands+0x11c>)
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f8da 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleExecReset, h);
	CONSOLE_RegisterCommand(h, "ticks",     "<<ticks>> prints the time elapsed since system\r\nis running in the unit of ticks.",
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	4b24      	ldr	r3, [pc, #144]	@ (8002df8 <ConsoleRegisterBasicCommands+0x120>)
 8002d66:	4a25      	ldr	r2, [pc, #148]	@ (8002dfc <ConsoleRegisterBasicCommands+0x124>)
 8002d68:	4925      	ldr	r1, [pc, #148]	@ (8002e00 <ConsoleRegisterBasicCommands+0x128>)
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f8d2 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsolePrintKernelTicks, h);
	CONSOLE_RegisterCommand(h, "alias",     "<<alias>>",
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	4b23      	ldr	r3, [pc, #140]	@ (8002e04 <ConsoleRegisterBasicCommands+0x12c>)
 8002d76:	4a24      	ldr	r2, [pc, #144]	@ (8002e08 <ConsoleRegisterBasicCommands+0x130>)
 8002d78:	4924      	ldr	r1, [pc, #144]	@ (8002e0c <ConsoleRegisterBasicCommands+0x134>)
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f8ca 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleAliasConfig, h);
#if defined(configGENERATE_RUN_TIME_STATS) && (configGENERATE_RUN_TIME_STATS != 0)
	CONSOLE_RegisterCommand(h, "tasks",     "<<tasks>> prints information about the active tasks\r\nand prints also runtime information.",
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	4b22      	ldr	r3, [pc, #136]	@ (8002e10 <ConsoleRegisterBasicCommands+0x138>)
 8002d86:	4a23      	ldr	r2, [pc, #140]	@ (8002e14 <ConsoleRegisterBasicCommands+0x13c>)
 8002d88:	4923      	ldr	r1, [pc, #140]	@ (8002e18 <ConsoleRegisterBasicCommands+0x140>)
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f8c2 	bl	8002f14 <CONSOLE_RegisterCommand>
		ConsolePrintTaskStats, h);
#endif
}
 8002d90:	bf00      	nop
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	080025b9 	.word	0x080025b9
 8002d9c:	08018718 	.word	0x08018718
 8002da0:	080187b8 	.word	0x080187b8
 8002da4:	0800297d 	.word	0x0800297d
 8002da8:	080187c0 	.word	0x080187c0
 8002dac:	08018830 	.word	0x08018830
 8002db0:	080029a9 	.word	0x080029a9
 8002db4:	08018838 	.word	0x08018838
 8002db8:	08018888 	.word	0x08018888
 8002dbc:	08002a0d 	.word	0x08002a0d
 8002dc0:	08018890 	.word	0x08018890
 8002dc4:	08018a54 	.word	0x08018a54
 8002dc8:	08002a79 	.word	0x08002a79
 8002dcc:	08018a60 	.word	0x08018a60
 8002dd0:	08018b68 	.word	0x08018b68
 8002dd4:	08002ae5 	.word	0x08002ae5
 8002dd8:	08018b70 	.word	0x08018b70
 8002ddc:	08018be8 	.word	0x08018be8
 8002de0:	080029e9 	.word	0x080029e9
 8002de4:	08018bf0 	.word	0x08018bf0
 8002de8:	08018c98 	.word	0x08018c98
 8002dec:	080026e9 	.word	0x080026e9
 8002df0:	08018ca0 	.word	0x08018ca0
 8002df4:	08018ccc 	.word	0x08018ccc
 8002df8:	080026f9 	.word	0x080026f9
 8002dfc:	08018cd4 	.word	0x08018cd4
 8002e00:	08018d28 	.word	0x08018d28
 8002e04:	08002b4d 	.word	0x08002b4d
 8002e08:	08018d30 	.word	0x08018d30
 8002e0c:	08018d3c 	.word	0x08018d3c
 8002e10:	08002721 	.word	0x08002721
 8002e14:	08018d44 	.word	0x08018d44
 8002e18:	08018da0 	.word	0x08018da0

08002e1c <CONSOLE_CreateInstance>:

// --------------------------------------------------------------------------------------------------------------------
ConsoleHandle_t CONSOLE_CreateInstance( unsigned int uxStackDepth, int xPrio )
// --------------------------------------------------------------------------------------------------------------------
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
#define ON_NULL_GOTO_ERROR(x) do { if ((x) == NULL) goto error; } while(0);
	struct ConsoleHandle* h = calloc(sizeof(struct ConsoleHandle), 1);
 8002e26:	2101      	movs	r1, #1
 8002e28:	f44f 6084 	mov.w	r0, #1056	@ 0x420
 8002e2c:	f00f f9d6 	bl	80121dc <calloc>
 8002e30:	4603      	mov	r3, r0
 8002e32:	60fb      	str	r3, [r7, #12]
	ON_NULL_GOTO_ERROR(h);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d051      	beq.n	8002ede <CONSOLE_CreateInstance+0xc2>

	h->cState.lockGuard = xSemaphoreCreateRecursiveMutex();
 8002e3a:	2004      	movs	r0, #4
 8002e3c:	f00c f9c3 	bl	800f1c6 <xQueueCreateMutex>
 8002e40:	4602      	mov	r2, r0
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	601a      	str	r2, [r3, #0]
	ON_NULL_GOTO_ERROR(h->cState.lockGuard);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d047      	beq.n	8002ede <CONSOLE_CreateInstance+0xc2>
	h->pState.state = ctrlpsIDLE_DETECT;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	721a      	strb	r2, [r3, #8]
	h->pState.length = 0;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	611a      	str	r2, [r3, #16]
	h->pState.maxLength = CONSOLE_LINE_SIZE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2278      	movs	r2, #120	@ 0x78
 8002e5e:	615a      	str	r2, [r3, #20]
	h->pState.type = ctrlUNKNOWN;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002e66:	815a      	strh	r2, [r3, #10]
	h->pState.buff = NULL;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	619a      	str	r2, [r3, #24]
	h->cancel = 0;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	621a      	str	r2, [r3, #32]
	h->pendingRedirect = 0;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
	h->pendingRdStream = NULL;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
	h->pendingWrStream = NULL;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414

	LIST_INIT(&h->cState.commands);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	605a      	str	r2, [r3, #4]
	ConsoleRegisterBasicCommands(h);
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f7ff ff20 	bl	8002cd8 <ConsoleRegisterBasicCommands>

	memset(h->history.lines, 0, sizeof(h->history.lines));
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	3324      	adds	r3, #36	@ 0x24
 8002e9c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f011 fcfc 	bl	80148a0 <memset>
	h->history.linePtr = h->history.lineHead = 0;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

	xTaskCreate(ConsoleFunction, "console", uxStackDepth, h, xPrio, &h->tHandle);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	321c      	adds	r2, #28
 8002ec2:	9201      	str	r2, [sp, #4]
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	4910      	ldr	r1, [pc, #64]	@ (8002f0c <CONSOLE_CreateInstance+0xf0>)
 8002ecc:	4810      	ldr	r0, [pc, #64]	@ (8002f10 <CONSOLE_CreateInstance+0xf4>)
 8002ece:	f00c fee7 	bl	800fca0 <xTaskCreate>
	ON_NULL_GOTO_ERROR(h->tHandle);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <CONSOLE_CreateInstance+0xc2>
	return h;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	e012      	b.n	8002f04 <CONSOLE_CreateInstance+0xe8>

error:
	if ( h != NULL )
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00e      	beq.n	8002f02 <CONSOLE_CreateInstance+0xe6>
	{
		if ( h->cState.lockGuard != NULL )
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d007      	beq.n	8002efc <CONSOLE_CreateInstance+0xe0>
		{
			vSemaphoreDelete(h->cState.lockGuard);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f00c fd19 	bl	800f928 <vQueueDelete>
			h->cState.lockGuard = NULL;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
		}

		free(h);
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f00f f9d9 	bl	80122b4 <free>
	}

	return NULL;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	08018da8 	.word	0x08018da8
 8002f10:	08001c35 	.word	0x08001c35

08002f14 <CONSOLE_RegisterCommand>:

// --------------------------------------------------------------------------------------------------------------------
int CONSOLE_RegisterCommand( ConsoleHandle_t h, char* cmd, char* help, CONSOLE_CommandFunc func, void* context )
// --------------------------------------------------------------------------------------------------------------------
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b08c      	sub	sp, #48	@ 0x30
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	603b      	str	r3, [r7, #0]
	int result = -1;
 8002f22:	f04f 33ff 	mov.w	r3, #4294967295
 8002f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if ( cmd == NULL || help == NULL || func == NULL ) return result;
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d005      	beq.n	8002f3a <CONSOLE_RegisterCommand+0x26>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <CONSOLE_RegisterCommand+0x26>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <CONSOLE_RegisterCommand+0x2a>
 8002f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f3c:	e0b5      	b.n	80030aa <CONSOLE_RegisterCommand+0x196>
	if ( *cmd == '\0' || *help == '\0' ) return result;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <CONSOLE_RegisterCommand+0x3a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <CONSOLE_RegisterCommand+0x3e>
 8002f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f50:	e0ab      	b.n	80030aa <CONSOLE_RegisterCommand+0x196>
	int cmdLen  = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	623b      	str	r3, [r7, #32]
	int helpLen = 0;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61fb      	str	r3, [r7, #28]
	if ( (cmdLen  = (int)strnlen(cmd, CONSOLE_COMMAND_MAX_LENGTH+1) )   > CONSOLE_COMMAND_MAX_LENGTH  ) return result;
 8002f5a:	2141      	movs	r1, #65	@ 0x41
 8002f5c:	68b8      	ldr	r0, [r7, #8]
 8002f5e:	f011 fcc6 	bl	80148ee <strnlen>
 8002f62:	4603      	mov	r3, r0
 8002f64:	623b      	str	r3, [r7, #32]
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	2b40      	cmp	r3, #64	@ 0x40
 8002f6a:	dd01      	ble.n	8002f70 <CONSOLE_RegisterCommand+0x5c>
 8002f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f6e:	e09c      	b.n	80030aa <CONSOLE_RegisterCommand+0x196>
	if ( (helpLen = (int)strnlen(help, CONSOLE_HELP_MAX_LENGTH+1) ) > CONSOLE_HELP_MAX_LENGTH ) return result;
 8002f70:	f240 2101 	movw	r1, #513	@ 0x201
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f011 fcba 	bl	80148ee <strnlen>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f84:	dd01      	ble.n	8002f8a <CONSOLE_RegisterCommand+0x76>
 8002f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f88:	e08f      	b.n	80030aa <CONSOLE_RegisterCommand+0x196>

	// could be called while the scheduler is not running or suspended, so we must not use to use the lock guard
	if ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) xSemaphoreTakeRecursive( h->cState.lockGuard, -1 );
 8002f8a:	f00e f935 	bl	80111f8 <xTaskGetSchedulerState>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d106      	bne.n	8002fa2 <CONSOLE_RegisterCommand+0x8e>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f04f 31ff 	mov.w	r1, #4294967295
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f00c f967 	bl	800f270 <xQueueTakeMutexRecursive>

	cmdState_t* c = &h->cState;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	61bb      	str	r3, [r7, #24]
	int found = 0;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
	cmdEntry_t* pElement = c->commands.lh_first;
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	627b      	str	r3, [r7, #36]	@ 0x24
	while ( pElement != NULL )
 8002fb0:	e015      	b.n	8002fde <CONSOLE_RegisterCommand+0xca>
	{
		// if string compare result and determined length match, then this must be the function
		if ( strncmp(cmd, pElement->content.cmd, cmdLen) == 0 && cmdLen == pElement->content.cmdLen )
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	3308      	adds	r3, #8
 8002fb6:	6a3a      	ldr	r2, [r7, #32]
 8002fb8:	4619      	mov	r1, r3
 8002fba:	68b8      	ldr	r0, [r7, #8]
 8002fbc:	f011 fc85 	bl	80148ca <strncmp>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d107      	bne.n	8002fd6 <CONSOLE_RegisterCommand+0xc2>
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fca:	6a3a      	ldr	r2, [r7, #32]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d102      	bne.n	8002fd6 <CONSOLE_RegisterCommand+0xc2>
		{
			found = 1;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
			break;
 8002fd4:	e006      	b.n	8002fe4 <CONSOLE_RegisterCommand+0xd0>
		}
		pElement = pElement->navigate.le_next;
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd8:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 8002fdc:	627b      	str	r3, [r7, #36]	@ 0x24
	while ( pElement != NULL )
 8002fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1e6      	bne.n	8002fb2 <CONSOLE_RegisterCommand+0x9e>
	}

	if ( found == 1 )
 8002fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d103      	bne.n	8002ff2 <CONSOLE_RegisterCommand+0xde>
	{
		result = -1;
 8002fea:	f04f 33ff 	mov.w	r3, #4294967295
 8002fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ff0:	e050      	b.n	8003094 <CONSOLE_RegisterCommand+0x180>
	}
	else
	{
		struct cmdEntry *item = malloc(sizeof(struct cmdEntry));
 8002ff2:	f44f 7019 	mov.w	r0, #612	@ 0x264
 8002ff6:	f00f f955 	bl	80122a4 <malloc>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	617b      	str	r3, [r7, #20]
		if (item == NULL) return result;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <CONSOLE_RegisterCommand+0xf4>
 8003004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003006:	e050      	b.n	80030aa <CONSOLE_RegisterCommand+0x196>
		item->content.isAlias = 0;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	2200      	movs	r2, #0
 800300c:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258
		item->content.cmdLen  = cmdLen;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	6a3a      	ldr	r2, [r7, #32]
 8003014:	64da      	str	r2, [r3, #76]	@ 0x4c
		item->content.helpLen = helpLen;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	69fa      	ldr	r2, [r7, #28]
 800301a:	f8c3 2254 	str.w	r2, [r3, #596]	@ 0x254
		item->content.func    = func;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	601a      	str	r2, [r3, #0]
		item->content.ctx     = context;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003028:	605a      	str	r2, [r3, #4]
		memcpy(item->content.cmd, cmd, cmdLen);
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	3308      	adds	r3, #8
 800302e:	6a3a      	ldr	r2, [r7, #32]
 8003030:	68b9      	ldr	r1, [r7, #8]
 8003032:	4618      	mov	r0, r3
 8003034:	f011 fd9a 	bl	8014b6c <memcpy>
		item->content.cmd[cmdLen] = '\0';
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	4413      	add	r3, r2
 800303e:	3308      	adds	r3, #8
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]
		memcpy(item->content.help, help, helpLen);
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	3350      	adds	r3, #80	@ 0x50
 8003048:	69fa      	ldr	r2, [r7, #28]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4618      	mov	r0, r3
 800304e:	f011 fd8d 	bl	8014b6c <memcpy>
		item->content.help[helpLen] = '\0';
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	4413      	add	r3, r2
 8003058:	3350      	adds	r3, #80	@ 0x50
 800305a:	2200      	movs	r2, #0
 800305c:	701a      	strb	r2, [r3, #0]
		LIST_INSERT_HEAD(&h->cState.commands, item, navigate);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 800306e:	2b00      	cmp	r3, #0
 8003070:	d006      	beq.n	8003080 <CONSOLE_RegisterCommand+0x16c>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	f502 7217 	add.w	r2, r2, #604	@ 0x25c
 800307c:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	1d1a      	adds	r2, r3, #4
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
		result = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	// could be called while the scheduler is not running or suspended, so we must not use to use the lock guard
	if ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) xSemaphoreGiveRecursive( h->cState.lockGuard );
 8003094:	f00e f8b0 	bl	80111f8 <xTaskGetSchedulerState>
 8003098:	4603      	mov	r3, r0
 800309a:	2b02      	cmp	r3, #2
 800309c:	d104      	bne.n	80030a8 <CONSOLE_RegisterCommand+0x194>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f00c f8a8 	bl	800f1f8 <xQueueGiveMutexRecursive>
	return result;
 80030a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3730      	adds	r7, #48	@ 0x30
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <CONSOLE_RegisterAlias>:


// --------------------------------------------------------------------------------------------------------------------
int CONSOLE_RegisterAlias( ConsoleHandle_t h, char* cmd, char* aliasCmd )
// --------------------------------------------------------------------------------------------------------------------
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b08c      	sub	sp, #48	@ 0x30
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	607a      	str	r2, [r7, #4]
	int result = -1;
 80030be:	f04f 33ff 	mov.w	r3, #4294967295
 80030c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if ( cmd == NULL || aliasCmd == NULL ) return result;
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <CONSOLE_RegisterAlias+0x1e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <CONSOLE_RegisterAlias+0x22>
 80030d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030d2:	e0b3      	b.n	800323c <CONSOLE_RegisterAlias+0x18a>
	if ( *cmd == '\0' || *aliasCmd == '\0' ) return result;
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <CONSOLE_RegisterAlias+0x32>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <CONSOLE_RegisterAlias+0x36>
 80030e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e6:	e0a9      	b.n	800323c <CONSOLE_RegisterAlias+0x18a>
	int cmdLen  = 0;
 80030e8:	2300      	movs	r3, #0
 80030ea:	623b      	str	r3, [r7, #32]
	int aliasCmdLen = 0;
 80030ec:	2300      	movs	r3, #0
 80030ee:	61fb      	str	r3, [r7, #28]
	if ( (cmdLen      = (int)strnlen(cmd, CONSOLE_COMMAND_MAX_LENGTH+1) )      > CONSOLE_COMMAND_MAX_LENGTH ) return result;
 80030f0:	2141      	movs	r1, #65	@ 0x41
 80030f2:	68b8      	ldr	r0, [r7, #8]
 80030f4:	f011 fbfb 	bl	80148ee <strnlen>
 80030f8:	4603      	mov	r3, r0
 80030fa:	623b      	str	r3, [r7, #32]
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	2b40      	cmp	r3, #64	@ 0x40
 8003100:	dd01      	ble.n	8003106 <CONSOLE_RegisterAlias+0x54>
 8003102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003104:	e09a      	b.n	800323c <CONSOLE_RegisterAlias+0x18a>
	if ( (aliasCmdLen = (int)strnlen(aliasCmd, CONSOLE_COMMAND_MAX_LENGTH+1) ) > CONSOLE_COMMAND_MAX_LENGTH ) return result;
 8003106:	2141      	movs	r1, #65	@ 0x41
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f011 fbf0 	bl	80148ee <strnlen>
 800310e:	4603      	mov	r3, r0
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	2b40      	cmp	r3, #64	@ 0x40
 8003116:	dd01      	ble.n	800311c <CONSOLE_RegisterAlias+0x6a>
 8003118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800311a:	e08f      	b.n	800323c <CONSOLE_RegisterAlias+0x18a>

	// could be called while the scheduler is not running or suspended, so we must not use to use the lock guard
	if ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) xSemaphoreTakeRecursive( h->cState.lockGuard, -1 );
 800311c:	f00e f86c 	bl	80111f8 <xTaskGetSchedulerState>
 8003120:	4603      	mov	r3, r0
 8003122:	2b02      	cmp	r3, #2
 8003124:	d106      	bne.n	8003134 <CONSOLE_RegisterAlias+0x82>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f04f 31ff 	mov.w	r1, #4294967295
 800312e:	4618      	mov	r0, r3
 8003130:	f00c f89e 	bl	800f270 <xQueueTakeMutexRecursive>

	cmdState_t* c = &h->cState;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	61bb      	str	r3, [r7, #24]
	int found = 0;
 8003138:	2300      	movs	r3, #0
 800313a:	62bb      	str	r3, [r7, #40]	@ 0x28
	cmdEntry_t* pElement = c->commands.lh_first;
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	627b      	str	r3, [r7, #36]	@ 0x24
	while ( pElement != NULL )
 8003142:	e015      	b.n	8003170 <CONSOLE_RegisterAlias+0xbe>
	{
		// if string compare result and determined length match, then this must be the function
		if ( strncmp(cmd, pElement->content.cmd, cmdLen) == 0 && cmdLen == pElement->content.cmdLen )
 8003144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003146:	3308      	adds	r3, #8
 8003148:	6a3a      	ldr	r2, [r7, #32]
 800314a:	4619      	mov	r1, r3
 800314c:	68b8      	ldr	r0, [r7, #8]
 800314e:	f011 fbbc 	bl	80148ca <strncmp>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d107      	bne.n	8003168 <CONSOLE_RegisterAlias+0xb6>
 8003158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800315c:	6a3a      	ldr	r2, [r7, #32]
 800315e:	429a      	cmp	r2, r3
 8003160:	d102      	bne.n	8003168 <CONSOLE_RegisterAlias+0xb6>
		{
			found = 1;
 8003162:	2301      	movs	r3, #1
 8003164:	62bb      	str	r3, [r7, #40]	@ 0x28
			break;
 8003166:	e006      	b.n	8003176 <CONSOLE_RegisterAlias+0xc4>
		}
		pElement = pElement->navigate.le_next;
 8003168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316a:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 800316e:	627b      	str	r3, [r7, #36]	@ 0x24
	while ( pElement != NULL )
 8003170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1e6      	bne.n	8003144 <CONSOLE_RegisterAlias+0x92>
	}

	if ( found == 1 )
 8003176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003178:	2b01      	cmp	r3, #1
 800317a:	d103      	bne.n	8003184 <CONSOLE_RegisterAlias+0xd2>
	{
		result = -1;
 800317c:	f04f 33ff 	mov.w	r3, #4294967295
 8003180:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003182:	e050      	b.n	8003226 <CONSOLE_RegisterAlias+0x174>
	}
	else
	{
		struct cmdEntry *item = malloc(sizeof(struct cmdEntry));
 8003184:	f44f 7019 	mov.w	r0, #612	@ 0x264
 8003188:	f00f f88c 	bl	80122a4 <malloc>
 800318c:	4603      	mov	r3, r0
 800318e:	617b      	str	r3, [r7, #20]
		if (item == NULL) return result;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <CONSOLE_RegisterAlias+0xe8>
 8003196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003198:	e050      	b.n	800323c <CONSOLE_RegisterAlias+0x18a>
		item->content.isAlias = 1;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2201      	movs	r2, #1
 800319e:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258
		item->content.cmdLen  = cmdLen;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	6a3a      	ldr	r2, [r7, #32]
 80031a6:	64da      	str	r2, [r3, #76]	@ 0x4c
		item->content.helpLen = aliasCmdLen;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	f8c3 2254 	str.w	r2, [r3, #596]	@ 0x254
		item->content.func    = NULL;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
		item->content.ctx     = NULL;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2200      	movs	r2, #0
 80031ba:	605a      	str	r2, [r3, #4]
		memcpy(item->content.cmd, cmd, cmdLen);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	3308      	adds	r3, #8
 80031c0:	6a3a      	ldr	r2, [r7, #32]
 80031c2:	68b9      	ldr	r1, [r7, #8]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f011 fcd1 	bl	8014b6c <memcpy>
		item->content.cmd[cmdLen] = '\0';
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	4413      	add	r3, r2
 80031d0:	3308      	adds	r3, #8
 80031d2:	2200      	movs	r2, #0
 80031d4:	701a      	strb	r2, [r3, #0]
		memcpy(item->content.help, aliasCmd, aliasCmdLen);
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	3350      	adds	r3, #80	@ 0x50
 80031da:	69fa      	ldr	r2, [r7, #28]
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	4618      	mov	r0, r3
 80031e0:	f011 fcc4 	bl	8014b6c <memcpy>
		item->content.help[aliasCmdLen] = '\0';
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	4413      	add	r3, r2
 80031ea:	3350      	adds	r3, #80	@ 0x50
 80031ec:	2200      	movs	r2, #0
 80031ee:	701a      	strb	r2, [r3, #0]
		LIST_INSERT_HEAD(&h->cState.commands, item, navigate);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 8003200:	2b00      	cmp	r3, #0
 8003202:	d006      	beq.n	8003212 <CONSOLE_RegisterAlias+0x160>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	f502 7217 	add.w	r2, r2, #604	@ 0x25c
 800320e:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	605a      	str	r2, [r3, #4]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1d1a      	adds	r2, r3, #4
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
		result = 0;
 8003222:	2300      	movs	r3, #0
 8003224:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	// could be called while the scheduler is not running or suspended, so we must not use to use the lock guard
	if ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) xSemaphoreGiveRecursive( h->cState.lockGuard );
 8003226:	f00d ffe7 	bl	80111f8 <xTaskGetSchedulerState>
 800322a:	4603      	mov	r3, r0
 800322c:	2b02      	cmp	r3, #2
 800322e:	d104      	bne.n	800323a <CONSOLE_RegisterAlias+0x188>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f00b ffdf 	bl	800f1f8 <xQueueGiveMutexRecursive>
	return result;
 800323a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800323c:	4618      	mov	r0, r3
 800323e:	3730      	adds	r7, #48	@ 0x30
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <CONSOLE_RemoveAliasOrCommand>:

// --------------------------------------------------------------------------------------------------------------------
int CONSOLE_RemoveAliasOrCommand( ConsoleHandle_t h, char* cmd)
// --------------------------------------------------------------------------------------------------------------------
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
	int result = -1;
 800324e:	f04f 33ff 	mov.w	r3, #4294967295
 8003252:	61fb      	str	r3, [r7, #28]
	if ( cmd == NULL ) return result;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <CONSOLE_RemoveAliasOrCommand+0x1a>
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	e066      	b.n	800332c <CONSOLE_RemoveAliasOrCommand+0xe8>
	if ( *cmd == '\0' ) return result;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <CONSOLE_RemoveAliasOrCommand+0x26>
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	e060      	b.n	800332c <CONSOLE_RemoveAliasOrCommand+0xe8>
	int cmdLen  = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	613b      	str	r3, [r7, #16]
	if ( (cmdLen      = (int)strnlen(cmd, CONSOLE_COMMAND_MAX_LENGTH+1) ) > CONSOLE_COMMAND_MAX_LENGTH ) return result;
 800326e:	2141      	movs	r1, #65	@ 0x41
 8003270:	6838      	ldr	r0, [r7, #0]
 8003272:	f011 fb3c 	bl	80148ee <strnlen>
 8003276:	4603      	mov	r3, r0
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	2b40      	cmp	r3, #64	@ 0x40
 800327e:	dd01      	ble.n	8003284 <CONSOLE_RemoveAliasOrCommand+0x40>
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	e053      	b.n	800332c <CONSOLE_RemoveAliasOrCommand+0xe8>

	// could be called while the scheduler is not running or suspended, so we must not use to use the lock guard
	if ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) xSemaphoreTakeRecursive( h->cState.lockGuard, -1 );
 8003284:	f00d ffb8 	bl	80111f8 <xTaskGetSchedulerState>
 8003288:	4603      	mov	r3, r0
 800328a:	2b02      	cmp	r3, #2
 800328c:	d106      	bne.n	800329c <CONSOLE_RemoveAliasOrCommand+0x58>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f04f 31ff 	mov.w	r1, #4294967295
 8003296:	4618      	mov	r0, r3
 8003298:	f00b ffea 	bl	800f270 <xQueueTakeMutexRecursive>

	cmdState_t* c = &h->cState;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	60fb      	str	r3, [r7, #12]
	int found = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	61bb      	str	r3, [r7, #24]
	cmdEntry_t* pElement = c->commands.lh_first;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	617b      	str	r3, [r7, #20]
	while ( pElement != NULL )
 80032aa:	e015      	b.n	80032d8 <CONSOLE_RemoveAliasOrCommand+0x94>
	{
		// if string compare result and determined length match, then this must be the function
		if ( strncmp(cmd, pElement->content.cmd, cmdLen) == 0 && cmdLen == pElement->content.cmdLen )
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	3308      	adds	r3, #8
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	4619      	mov	r1, r3
 80032b4:	6838      	ldr	r0, [r7, #0]
 80032b6:	f011 fb08 	bl	80148ca <strncmp>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d107      	bne.n	80032d0 <CONSOLE_RemoveAliasOrCommand+0x8c>
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d102      	bne.n	80032d0 <CONSOLE_RemoveAliasOrCommand+0x8c>
		{
			found = 1;
 80032ca:	2301      	movs	r3, #1
 80032cc:	61bb      	str	r3, [r7, #24]
			break;
 80032ce:	e006      	b.n	80032de <CONSOLE_RemoveAliasOrCommand+0x9a>
		}
		pElement = pElement->navigate.le_next;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 80032d6:	617b      	str	r3, [r7, #20]
	while ( pElement != NULL )
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1e6      	bne.n	80032ac <CONSOLE_RemoveAliasOrCommand+0x68>
	}

	if ( found == 1 )
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d118      	bne.n	8003316 <CONSOLE_RemoveAliasOrCommand+0xd2>
	{
		LIST_REMOVE(pElement, navigate);
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d007      	beq.n	80032fe <CONSOLE_RemoveAliasOrCommand+0xba>
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	f8d2 2260 	ldr.w	r2, [r2, #608]	@ 0x260
 80032fa:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	f8d2 225c 	ldr.w	r2, [r2, #604]	@ 0x25c
 800330a:	601a      	str	r2, [r3, #0]
		free(pElement);
 800330c:	6978      	ldr	r0, [r7, #20]
 800330e:	f00e ffd1 	bl	80122b4 <free>
		result = 0;
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
	}

	// could be called while the scheduler is not running or suspended, so we must not use to use the lock guard
	if ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) xSemaphoreGiveRecursive( h->cState.lockGuard );
 8003316:	f00d ff6f 	bl	80111f8 <xTaskGetSchedulerState>
 800331a:	4603      	mov	r3, r0
 800331c:	2b02      	cmp	r3, #2
 800331e:	d104      	bne.n	800332a <CONSOLE_RemoveAliasOrCommand+0xe6>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f00b ff67 	bl	800f1f8 <xQueueGiveMutexRecursive>
	return result;
 800332a:	69fb      	ldr	r3, [r7, #28]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3720      	adds	r7, #32
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <SPINDLE_SetDirection>:
int SpindleStop(void);
int SpindleStatus(void);


void SPINDLE_SetDirection(SpindleHandle_t h, void *context, int backward)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  (void)h;
  (void)context;
  spindleContext.direction = backward;
 8003340:	4a08      	ldr	r2, [pc, #32]	@ (8003364 <SPINDLE_SetDirection+0x30>)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6013      	str	r3, [r2, #0]

  if (backward)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <SPINDLE_SetDirection+0x20>
  {
    printf("Setting spindle direction: backward (counter-clockwise)\r\n");
 800334c:	4806      	ldr	r0, [pc, #24]	@ (8003368 <SPINDLE_SetDirection+0x34>)
 800334e:	f011 f8c1 	bl	80144d4 <puts>
  }
  else
  {
    printf("Setting spindle direction: forward (clockwise)\r\n");
  }
}
 8003352:	e002      	b.n	800335a <SPINDLE_SetDirection+0x26>
    printf("Setting spindle direction: forward (clockwise)\r\n");
 8003354:	4805      	ldr	r0, [pc, #20]	@ (800336c <SPINDLE_SetDirection+0x38>)
 8003356:	f011 f8bd 	bl	80144d4 <puts>
}
 800335a:	bf00      	nop
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20000240 	.word	0x20000240
 8003368:	08018db0 	.word	0x08018db0
 800336c:	08018dec 	.word	0x08018dec

08003370 <SPINDLE_SetDutyCycle>:

void SPINDLE_SetDutyCycle(SpindleHandle_t h, void *context, float dutyCycle)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)h;
  (void)context;
  int arr = TIM2->ARR;
 800337e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003384:	617b      	str	r3, [r7, #20]
  if (spindleContext.direction)
 8003386:	4b19      	ldr	r3, [pc, #100]	@ (80033ec <SPINDLE_SetDutyCycle+0x7c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d014      	beq.n	80033b8 <SPINDLE_SetDutyCycle+0x48>
   {
      TIM2->CCR3 = 0;
 800338e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003392:	2200      	movs	r2, #0
 8003394:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2->CCR4 = (int)((float)arr * dutyCycle);
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	ee07 3a90 	vmov	s15, r3
 800339c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80033a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80033b0:	ee17 2a90 	vmov	r2, s15
 80033b4:	641a      	str	r2, [r3, #64]	@ 0x40
   {
      TIM2->CCR3 = (int)((float)arr * dutyCycle);
      TIM2->CCR4 = 0;
   }
  
}
 80033b6:	e013      	b.n	80033e0 <SPINDLE_SetDutyCycle+0x70>
      TIM2->CCR3 = (int)((float)arr * dutyCycle);
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	ee07 3a90 	vmov	s15, r3
 80033be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80033c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80033d2:	ee17 2a90 	vmov	r2, s15
 80033d6:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2->CCR4 = 0;
 80033d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80033dc:	2200      	movs	r2, #0
 80033de:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80033e0:	bf00      	nop
 80033e2:	371c      	adds	r7, #28
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	20000240 	.word	0x20000240

080033f0 <SPINDLE_EnaPWM>:

void SPINDLE_EnaPWM(SpindleHandle_t h, void *context, int ena)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  (void)h;
  (void)context;

  HAL_GPIO_WritePin(SPINDLE_ENA_L_GPIO_Port, SPINDLE_ENA_L_Pin, ena);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	461a      	mov	r2, r3
 8003402:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003406:	480d      	ldr	r0, [pc, #52]	@ (800343c <SPINDLE_EnaPWM+0x4c>)
 8003408:	f004 fec0 	bl	800818c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPINDLE_ENA_R_GPIO_Port, SPINDLE_ENA_R_Pin, ena);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003416:	4809      	ldr	r0, [pc, #36]	@ (800343c <SPINDLE_EnaPWM+0x4c>)
 8003418:	f004 feb8 	bl	800818c <HAL_GPIO_WritePin>

  if (ena)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d007      	beq.n	8003432 <SPINDLE_EnaPWM+0x42>
  {
      HAL_TIM_PWM_Start(&spindleContext.timer, TIM_CHANNEL_3);
 8003422:	2108      	movs	r1, #8
 8003424:	4806      	ldr	r0, [pc, #24]	@ (8003440 <SPINDLE_EnaPWM+0x50>)
 8003426:	f007 ff13 	bl	800b250 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&spindleContext.timer, TIM_CHANNEL_4);
 800342a:	210c      	movs	r1, #12
 800342c:	4804      	ldr	r0, [pc, #16]	@ (8003440 <SPINDLE_EnaPWM+0x50>)
 800342e:	f007 ff0f 	bl	800b250 <HAL_TIM_PWM_Start>
  }
}
 8003432:	bf00      	nop
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40021000 	.word	0x40021000
 8003440:	20000244 	.word	0x20000244

08003444 <InitSpindle>:

void InitSpindle(ConsoleHandle_t* consoleHandle, TIM_HandleTypeDef* htim)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08a      	sub	sp, #40	@ 0x28
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  // Initialize the spindle parameters
  SpindlePhysicalParams_t s;
  s.maxRPM = 9000.0f;
 800344e:	4b18      	ldr	r3, [pc, #96]	@ (80034b0 <InitSpindle+0x6c>)
 8003450:	61bb      	str	r3, [r7, #24]
  s.minRPM = -9000.0f;
 8003452:	4b18      	ldr	r3, [pc, #96]	@ (80034b4 <InitSpindle+0x70>)
 8003454:	623b      	str	r3, [r7, #32]
  s.absMinRPM = 1600.0f;
 8003456:	4b18      	ldr	r3, [pc, #96]	@ (80034b8 <InitSpindle+0x74>)
 8003458:	61fb      	str	r3, [r7, #28]
  s.setDirection = SPINDLE_SetDirection;
 800345a:	4b18      	ldr	r3, [pc, #96]	@ (80034bc <InitSpindle+0x78>)
 800345c:	60fb      	str	r3, [r7, #12]
  s.setDutyCycle = SPINDLE_SetDutyCycle;
 800345e:	4b18      	ldr	r3, [pc, #96]	@ (80034c0 <InitSpindle+0x7c>)
 8003460:	613b      	str	r3, [r7, #16]
  s.enaPWM = SPINDLE_EnaPWM;
 8003462:	4b18      	ldr	r3, [pc, #96]	@ (80034c4 <InitSpindle+0x80>)
 8003464:	617b      	str	r3, [r7, #20]
  s.context = NULL;
 8003466:	2300      	movs	r3, #0
 8003468:	627b      	str	r3, [r7, #36]	@ 0x24

  spindleContext.handle= SPINDLE_CreateInstance(4 * configMINIMAL_STACK_SIZE,
 800346a:	f107 030c 	add.w	r3, r7, #12
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	2104      	movs	r1, #4
 8003472:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003476:	f001 fd67 	bl	8004f48 <SPINDLE_CreateInstance>
 800347a:	4603      	mov	r3, r0
 800347c:	4a12      	ldr	r2, [pc, #72]	@ (80034c8 <InitSpindle+0x84>)
 800347e:	6513      	str	r3, [r2, #80]	@ 0x50
                                         configMAX_PRIORITIES - 3,
                                         consoleHandle, &s);

  if (spindleContext.handle == NULL)
 8003480:	4b11      	ldr	r3, [pc, #68]	@ (80034c8 <InitSpindle+0x84>)
 8003482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003484:	2b00      	cmp	r3, #0
 8003486:	d104      	bne.n	8003492 <InitSpindle+0x4e>
  {
    printf("Failed to create spindle controller instance\r\n");
 8003488:	4810      	ldr	r0, [pc, #64]	@ (80034cc <InitSpindle+0x88>)
 800348a:	f011 f823 	bl	80144d4 <puts>
    Error_Handler();
 800348e:	f003 fa86 	bl	800699e <Error_Handler>
  }
  spindleContext.direction = 0;
 8003492:	4b0d      	ldr	r3, [pc, #52]	@ (80034c8 <InitSpindle+0x84>)
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]
  spindleContext.timer = *htim;
 8003498:	4b0b      	ldr	r3, [pc, #44]	@ (80034c8 <InitSpindle+0x84>)
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	3304      	adds	r3, #4
 800349e:	4611      	mov	r1, r2
 80034a0:	224c      	movs	r2, #76	@ 0x4c
 80034a2:	4618      	mov	r0, r3
 80034a4:	f011 fb62 	bl	8014b6c <memcpy>
}
 80034a8:	bf00      	nop
 80034aa:	3728      	adds	r7, #40	@ 0x28
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	460ca000 	.word	0x460ca000
 80034b4:	c60ca000 	.word	0xc60ca000
 80034b8:	44c80000 	.word	0x44c80000
 80034bc:	08003335 	.word	0x08003335
 80034c0:	08003371 	.word	0x08003371
 80034c4:	080033f1 	.word	0x080033f1
 80034c8:	20000240 	.word	0x20000240
 80034cc:	08018e1c 	.word	0x08018e1c

080034d0 <StepLibraryMalloc>:
L6474x_Platform_t p;
StepperContext_t StepperContext;

//---------Basic---Functions--------------
static void *StepLibraryMalloc(unsigned int size)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
    return malloc(size);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f00e fee3 	bl	80122a4 <malloc>
 80034de:	4603      	mov	r3, r0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <StepLibraryFree>:

static void StepLibraryFree(const void *const ptr)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
    free((void *)ptr);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f00e fedf 	bl	80122b4 <free>
}
 80034f6:	bf00      	nop
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
	...

08003500 <StepDriverSpiTransfer>:

static int StepDriverSpiTransfer(void *pIO, char *pRX, const char *pTX, unsigned int length)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af02      	add	r7, sp, #8
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
 800350c:	603b      	str	r3, [r7, #0]
    HAL_StatusTypeDef status = 0;
 800350e:	2300      	movs	r3, #0
 8003510:	75fb      	strb	r3, [r7, #23]
    for (unsigned int i = 0; i < length; i++)
 8003512:	2300      	movs	r3, #0
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	e023      	b.n	8003560 <StepDriverSpiTransfer+0x60>
    {
        HAL_GPIO_WritePin(STEP_SPI_CS_GPIO_Port, STEP_SPI_CS_Pin, 0);
 8003518:	2200      	movs	r2, #0
 800351a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800351e:	4818      	ldr	r0, [pc, #96]	@ (8003580 <StepDriverSpiTransfer+0x80>)
 8003520:	f004 fe34 	bl	800818c <HAL_GPIO_WritePin>
        status |= HAL_SPI_TransmitReceive(pIO, (uint8_t *)pTX + i, (uint8_t *)pRX + i, 1, HAL_MAX_DELAY);
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	18d1      	adds	r1, r2, r3
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	441a      	add	r2, r3
 8003530:	f04f 33ff 	mov.w	r3, #4294967295
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	2301      	movs	r3, #1
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f006 fe3f 	bl	800a1bc <HAL_SPI_TransmitReceive>
 800353e:	4603      	mov	r3, r0
 8003540:	461a      	mov	r2, r3
 8003542:	7dfb      	ldrb	r3, [r7, #23]
 8003544:	4313      	orrs	r3, r2
 8003546:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(STEP_SPI_CS_GPIO_Port, STEP_SPI_CS_Pin, 1);
 8003548:	2201      	movs	r2, #1
 800354a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800354e:	480c      	ldr	r0, [pc, #48]	@ (8003580 <StepDriverSpiTransfer+0x80>)
 8003550:	f004 fe1c 	bl	800818c <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8003554:	2001      	movs	r0, #1
 8003556:	f003 ff75 	bl	8007444 <HAL_Delay>
    for (unsigned int i = 0; i < length; i++)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	3301      	adds	r3, #1
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	429a      	cmp	r2, r3
 8003566:	d3d7      	bcc.n	8003518 <StepDriverSpiTransfer+0x18>
    }
    if (status != HAL_OK)
 8003568:	7dfb      	ldrb	r3, [r7, #23]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <StepDriverSpiTransfer+0x74>
        return -1;
 800356e:	f04f 33ff 	mov.w	r3, #4294967295
 8003572:	e000      	b.n	8003576 <StepDriverSpiTransfer+0x76>
    return 0;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40020c00 	.word	0x40020c00

08003584 <StepDriverReset>:

static void StepDriverReset(void *pGPO, int ena)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
    (void)pGPO;
    HAL_GPIO_WritePin(STEP_RSTN_GPIO_Port, STEP_RSTN_Pin, !ena);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	bf0c      	ite	eq
 8003594:	2301      	moveq	r3, #1
 8003596:	2300      	movne	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	461a      	mov	r2, r3
 800359c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80035a0:	4803      	ldr	r0, [pc, #12]	@ (80035b0 <StepDriverReset+0x2c>)
 80035a2:	f004 fdf3 	bl	800818c <HAL_GPIO_WritePin>
    return;
 80035a6:	bf00      	nop
}
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40021400 	.word	0x40021400

080035b4 <StepLibraryDelay>:

static void StepLibraryDelay(unsigned int ms)
{
 80035b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035b8:	b082      	sub	sp, #8
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
    vTaskDelay(pdMS_TO_TICKS(ms));
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	2000      	movs	r0, #0
 80035c2:	460c      	mov	r4, r1
 80035c4:	4605      	mov	r5, r0
 80035c6:	4620      	mov	r0, r4
 80035c8:	4629      	mov	r1, r5
 80035ca:	f04f 0a00 	mov.w	sl, #0
 80035ce:	f04f 0b00 	mov.w	fp, #0
 80035d2:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 80035d6:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 80035da:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 80035de:	4650      	mov	r0, sl
 80035e0:	4659      	mov	r1, fp
 80035e2:	1b02      	subs	r2, r0, r4
 80035e4:	eb61 0305 	sbc.w	r3, r1, r5
 80035e8:	f04f 0000 	mov.w	r0, #0
 80035ec:	f04f 0100 	mov.w	r1, #0
 80035f0:	0099      	lsls	r1, r3, #2
 80035f2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80035f6:	0090      	lsls	r0, r2, #2
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	eb12 0804 	adds.w	r8, r2, r4
 8003600:	eb43 0905 	adc.w	r9, r3, r5
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	f04f 0300 	mov.w	r3, #0
 800360c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003610:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003614:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003618:	4690      	mov	r8, r2
 800361a:	4699      	mov	r9, r3
 800361c:	4640      	mov	r0, r8
 800361e:	4649      	mov	r1, r9
 8003620:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	f7fd fb5e 	bl	8000ce8 <__aeabi_uldivmod>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4613      	mov	r3, r2
 8003632:	4618      	mov	r0, r3
 8003634:	f00c fd50 	bl	80100d8 <vTaskDelay>
}
 8003638:	bf00      	nop
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003644 <StepTimerAsync>:

static int StepTimerAsync(void *pPWM, int dir, unsigned int numPulses, void (*doneClb)(L6474_Handle_t), L6474_Handle_t h)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	603b      	str	r3, [r7, #0]
    (void)pPWM;
    (void)h;
    StepperContext.is_running = 1;
 8003652:	4b0d      	ldr	r3, [pc, #52]	@ (8003688 <StepTimerAsync+0x44>)
 8003654:	2201      	movs	r2, #1
 8003656:	60da      	str	r2, [r3, #12]
    StepperContext.done_callback = doneClb;
 8003658:	4a0b      	ldr	r2, [pc, #44]	@ (8003688 <StepTimerAsync+0x44>)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	6153      	str	r3, [r2, #20]
    HAL_GPIO_WritePin(STEP_DIR_GPIO_Port, STEP_DIR_Pin, !!dir);
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	bf14      	ite	ne
 8003664:	2301      	movne	r3, #1
 8003666:	2300      	moveq	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	461a      	mov	r2, r3
 800366c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003670:	4806      	ldr	r0, [pc, #24]	@ (800368c <StepTimerAsync+0x48>)
 8003672:	f004 fd8b 	bl	800818c <HAL_GPIO_WritePin>
    TimerStart(numPulses);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 fff8 	bl	800466c <TimerStart>
    return 0;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	200002b0 	.word	0x200002b0
 800368c:	40021400 	.word	0x40021400

08003690 <StepTimerCancelAsync>:

static int StepTimerCancelAsync(void *pPWM)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
    (void)pPWM;
    if (StepperContext.is_running)
 8003698:	4b10      	ldr	r3, [pc, #64]	@ (80036dc <StepTimerCancelAsync+0x4c>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d017      	beq.n	80036d0 <StepTimerCancelAsync+0x40>
    {
        if (HAL_TIM_OnePulse_Stop_IT(StepperContext.htim1, TIM_CHANNEL_1) != HAL_OK)
 80036a0:	4b0e      	ldr	r3, [pc, #56]	@ (80036dc <StepTimerCancelAsync+0x4c>)
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	2100      	movs	r1, #0
 80036a6:	4618      	mov	r0, r3
 80036a8:	f008 f93c 	bl	800b924 <HAL_TIM_OnePulse_Stop_IT>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d005      	beq.n	80036be <StepTimerCancelAsync+0x2e>
        {
            printf("Error: Failed to stop the timer\r\n");
 80036b2:	480b      	ldr	r0, [pc, #44]	@ (80036e0 <StepTimerCancelAsync+0x50>)
 80036b4:	f010 ff0e 	bl	80144d4 <puts>
            return -1;
 80036b8:	f04f 33ff 	mov.w	r3, #4294967295
 80036bc:	e009      	b.n	80036d2 <StepTimerCancelAsync+0x42>
        }
        StepperContext.done_callback(StepperContext.h);
 80036be:	4b07      	ldr	r3, [pc, #28]	@ (80036dc <StepTimerCancelAsync+0x4c>)
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	4a06      	ldr	r2, [pc, #24]	@ (80036dc <StepTimerCancelAsync+0x4c>)
 80036c4:	6812      	ldr	r2, [r2, #0]
 80036c6:	4610      	mov	r0, r2
 80036c8:	4798      	blx	r3
        StepperContext.is_running = 0;
 80036ca:	4b04      	ldr	r3, [pc, #16]	@ (80036dc <StepTimerCancelAsync+0x4c>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	60da      	str	r2, [r3, #12]
    }
    return 0;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	200002b0 	.word	0x200002b0
 80036e0:	08018e4c 	.word	0x08018e4c

080036e4 <Reset>:
    return 0;
}
*/
// WIP kind of done, parameters need to  be looked at
static int Reset(StepperContext_t *StepperContext)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
    L6474_BaseParameter_t param;
    param.stepMode = smMICRO16;
 80036ec:	2304      	movs	r3, #4
 80036ee:	733b      	strb	r3, [r7, #12]
    param.OcdTh = ocdth6000mA; // 3000mA ? cause requirements
 80036f0:	230f      	movs	r3, #15
 80036f2:	737b      	strb	r3, [r7, #13]
    param.TimeOnMin = 0x29;
 80036f4:	2329      	movs	r3, #41	@ 0x29
 80036f6:	73bb      	strb	r3, [r7, #14]
    param.TimeOffMin = 0x29;
 80036f8:	2329      	movs	r3, #41	@ 0x29
 80036fa:	73fb      	strb	r3, [r7, #15]
    param.TorqueVal = 0x11;
 80036fc:	2311      	movs	r3, #17
 80036fe:	743b      	strb	r3, [r7, #16]
    param.TFast = 0x19;
 8003700:	2319      	movs	r3, #25
 8003702:	747b      	strb	r3, [r7, #17]
    int result = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	617b      	str	r3, [r7, #20]

    result |= L6474_SetBaseParameter(&param); // changable
 8003708:	f107 030c 	add.w	r3, r7, #12
 800370c:	4618      	mov	r0, r3
 800370e:	f002 f852 	bl	80057b6 <L6474_SetBaseParameter>
 8003712:	4602      	mov	r2, r0
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	4313      	orrs	r3, r2
 8003718:	617b      	str	r3, [r7, #20]
    result |= L6474_ResetStandBy(StepperContext->h);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f001 fffa 	bl	8005718 <L6474_ResetStandBy>
 8003724:	4602      	mov	r2, r0
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	4313      	orrs	r3, r2
 800372a:	617b      	str	r3, [r7, #20]
    result |= L6474_Initialize(StepperContext->h, &param);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f107 020c 	add.w	r2, r7, #12
 8003734:	4611      	mov	r1, r2
 8003736:	4618      	mov	r0, r3
 8003738:	f002 f860 	bl	80057fc <L6474_Initialize>
 800373c:	4602      	mov	r2, r0
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	4313      	orrs	r3, r2
 8003742:	617b      	str	r3, [r7, #20]
    result |= L6474_SetPowerOutputs(StepperContext->h, 0);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2100      	movs	r1, #0
 800374a:	4618      	mov	r0, r3
 800374c:	f002 f9e0 	bl	8005b10 <L6474_SetPowerOutputs>
 8003750:	4602      	mov	r2, r0
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	4313      	orrs	r3, r2
 8003756:	617b      	str	r3, [r7, #20]

    if (result != 0)
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d005      	beq.n	800376a <Reset+0x86>
    {
        printf("Failed to reset\r\n");
 800375e:	481d      	ldr	r0, [pc, #116]	@ (80037d4 <Reset+0xf0>)
 8003760:	f010 feb8 	bl	80144d4 <puts>
        return -1;
 8003764:	f04f 33ff 	mov.w	r3, #4294967295
 8003768:	e02f      	b.n	80037ca <Reset+0xe6>
        StepperContext->state = scs.FLT;
    }
    StepperContext->is_powered = 0;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	605a      	str	r2, [r3, #4]
    StepperContext->is_referenced = 0;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	609a      	str	r2, [r3, #8]
    StepperContext->is_running = 0;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	60da      	str	r2, [r3, #12]
    StepperContext->error_code = 0;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	611a      	str	r2, [r3, #16]
    StepperContext->state = scs.REF; // Transition INIT -> REF
 8003782:	4b15      	ldr	r3, [pc, #84]	@ (80037d8 <Reset+0xf4>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	b2da      	uxtb	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    StepperContext->mm_per_turn = MM_PER_TURN;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8003794:	635a      	str	r2, [r3, #52]	@ 0x34
    StepperContext->steps_per_turn = (float)(1 << (StepperContext->step_mode + 2));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800379c:	3302      	adds	r3, #2
 800379e:	2201      	movs	r2, #1
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	ee07 3a90 	vmov	s15, r3
 80037a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    StepperContext->mm_per_step = StepperContext->mm_per_turn / StepperContext->steps_per_turn;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80037be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

    return result;
 80037c8:	697b      	ldr	r3, [r7, #20]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	08018e70 	.word	0x08018e70
 80037d8:	20000000 	.word	0x20000000

080037dc <Reference>:
// Finished but maybe look at it again
static int Reference(StepperContext_t *StepperContext, int argc, char **argv)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08c      	sub	sp, #48	@ 0x30
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
    // Allow reference from REF state only
    if (!(StepperContext->state == scs.REF))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80037ee:	461a      	mov	r2, r3
 80037f0:	4ba8      	ldr	r3, [pc, #672]	@ (8003a94 <Reference+0x2b8>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d005      	beq.n	8003804 <Reference+0x28>
    {
        printf("Reference run not allowed in current state\r\n");
 80037f8:	48a7      	ldr	r0, [pc, #668]	@ (8003a98 <Reference+0x2bc>)
 80037fa:	f010 fe6b 	bl	80144d4 <puts>
        return -1;
 80037fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003802:	e168      	b.n	8003ad6 <Reference+0x2fa>
    }
    int step_amt = 0;
 8003804:	2300      	movs	r3, #0
 8003806:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t track_timer_stop = 0;
 8003808:	2300      	movs	r3, #0
 800380a:	623b      	str	r3, [r7, #32]
    int result = 0;
 800380c:	2300      	movs	r3, #0
 800380e:	61fb      	str	r3, [r7, #28]
    int poweroutput = 0;
 8003810:	2300      	movs	r3, #0
 8003812:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t timeout_ms = 0;
 8003814:	2300      	movs	r3, #0
 8003816:	627b      	str	r3, [r7, #36]	@ 0x24
    if (argc == 2)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b02      	cmp	r3, #2
 800381c:	d133      	bne.n	8003886 <Reference+0xaa>
    {
        if (strcmp(argv[1], "-s") == 0)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3304      	adds	r3, #4
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	499d      	ldr	r1, [pc, #628]	@ (8003a9c <Reference+0x2c0>)
 8003826:	4618      	mov	r0, r3
 8003828:	f7fc fcf2 	bl	8000210 <strcmp>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d110      	bne.n	8003854 <Reference+0x78>
        {
            StepperContext->is_referenced = 1;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2201      	movs	r2, #1
 8003836:	609a      	str	r2, [r3, #8]
            L6474_SetAbsolutePosition(StepperContext->h, 0);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2100      	movs	r1, #0
 800383e:	4618      	mov	r0, r3
 8003840:	f002 f9ef 	bl	8005c22 <L6474_SetAbsolutePosition>
            StepperContext->state = scs.DIS; // REF -> DIS
 8003844:	4b93      	ldr	r3, [pc, #588]	@ (8003a94 <Reference+0x2b8>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	b2da      	uxtb	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            return result;
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	e140      	b.n	8003ad6 <Reference+0x2fa>
        }
        else if (strcmp(argv[1], "-e") == 0)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3304      	adds	r3, #4
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4991      	ldr	r1, [pc, #580]	@ (8003aa0 <Reference+0x2c4>)
 800385c:	4618      	mov	r0, r3
 800385e:	f7fc fcd7 	bl	8000210 <strcmp>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d108      	bne.n	800387a <Reference+0x9e>
        {
            poweroutput = 1;
 8003868:	2301      	movs	r3, #1
 800386a:	62bb      	str	r3, [r7, #40]	@ 0x28
            StepperContext->state = scs.ENA; // REF -> ENA
 800386c:	4b89      	ldr	r3, [pc, #548]	@ (8003a94 <Reference+0x2b8>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	b2da      	uxtb	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003878:	e025      	b.n	80038c6 <Reference+0xea>
        }
        else
        {
            printf("Invalid argument for reference\r\n");
 800387a:	488a      	ldr	r0, [pc, #552]	@ (8003aa4 <Reference+0x2c8>)
 800387c:	f010 fe2a 	bl	80144d4 <puts>
            return -1;
 8003880:	f04f 33ff 	mov.w	r3, #4294967295
 8003884:	e127      	b.n	8003ad6 <Reference+0x2fa>
        }
    }
    else if (argc == 3)
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b03      	cmp	r3, #3
 800388a:	d11c      	bne.n	80038c6 <Reference+0xea>
    {
        if (strcmp(argv[1], "-t") == 0)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3304      	adds	r3, #4
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4985      	ldr	r1, [pc, #532]	@ (8003aa8 <Reference+0x2cc>)
 8003894:	4618      	mov	r0, r3
 8003896:	f7fc fcbb 	bl	8000210 <strcmp>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10c      	bne.n	80038ba <Reference+0xde>
        {
            timeout_ms = atoi(argv[2]) * 1000; // s to ms
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3308      	adds	r3, #8
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f00e fc93 	bl	80121d2 <atoi>
 80038ac:	4603      	mov	r3, r0
 80038ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80038b2:	fb02 f303 	mul.w	r3, r2, r3
 80038b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80038b8:	e005      	b.n	80038c6 <Reference+0xea>
        }
        else
        {
            printf("Invalid argument for reference time\r\n");
 80038ba:	487c      	ldr	r0, [pc, #496]	@ (8003aac <Reference+0x2d0>)
 80038bc:	f010 fe0a 	bl	80144d4 <puts>
            return -1;
 80038c0:	f04f 33ff 	mov.w	r3, #4294967295
 80038c4:	e107      	b.n	8003ad6 <Reference+0x2fa>
        }
    }

    const uint32_t start_time = HAL_GetTick();
 80038c6:	f003 fdb1 	bl	800742c <HAL_GetTick>
 80038ca:	61b8      	str	r0, [r7, #24]
    result |= L6474_SetPowerOutputs(StepperContext->h, 1);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2101      	movs	r1, #1
 80038d2:	4618      	mov	r0, r3
 80038d4:	f002 f91c 	bl	8005b10 <L6474_SetPowerOutputs>
 80038d8:	4602      	mov	r2, r0
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	4313      	orrs	r3, r2
 80038de:	61fb      	str	r3, [r7, #28]

    // is switch already pressed?
    if (HAL_GPIO_ReadPin(REFERENCE_MARK_GPIO_Port, REFERENCE_MARK_Pin) == GPIO_PIN_RESET)
 80038e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80038e4:	4872      	ldr	r0, [pc, #456]	@ (8003ab0 <Reference+0x2d4>)
 80038e6:	f004 fc31 	bl	800814c <HAL_GPIO_ReadPin>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d153      	bne.n	8003998 <Reference+0x1bc>
    {
        // if yes, move away from it as long as it is pressed
        while (HAL_GPIO_ReadPin(REFERENCE_MARK_GPIO_Port, REFERENCE_MARK_Pin) == GPIO_PIN_RESET)
 80038f0:	e022      	b.n	8003938 <Reference+0x15c>
        {
            // if still pressed, wait
            L6474_StepIncremental(StepperContext->h, 1);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2101      	movs	r1, #1
 80038f8:	4618      	mov	r0, r3
 80038fa:	f002 fad3 	bl	8005ea4 <L6474_StepIncremental>
            if (timeout_ms > 0 && HAL_GetTick() - start_time > timeout_ms)
 80038fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003900:	2b00      	cmp	r3, #0
 8003902:	d019      	beq.n	8003938 <Reference+0x15c>
 8003904:	f003 fd92 	bl	800742c <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003910:	429a      	cmp	r2, r3
 8003912:	d211      	bcs.n	8003938 <Reference+0x15c>
            {
                StepTimerCancelAsync(NULL);
 8003914:	2000      	movs	r0, #0
 8003916:	f7ff febb 	bl	8003690 <StepTimerCancelAsync>
                printf("Timeout while moving away from the switch\r\n");
 800391a:	4866      	ldr	r0, [pc, #408]	@ (8003ab4 <Reference+0x2d8>)
 800391c:	f010 fdda 	bl	80144d4 <puts>
                StepperContext->error_code = 1;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2201      	movs	r2, #1
 8003924:	611a      	str	r2, [r3, #16]
                StepperContext->state = scs.FLT;
 8003926:	4b5b      	ldr	r3, [pc, #364]	@ (8003a94 <Reference+0x2b8>)
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	b2da      	uxtb	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                return -1;
 8003932:	f04f 33ff 	mov.w	r3, #4294967295
 8003936:	e0ce      	b.n	8003ad6 <Reference+0x2fa>
        while (HAL_GPIO_ReadPin(REFERENCE_MARK_GPIO_Port, REFERENCE_MARK_Pin) == GPIO_PIN_RESET)
 8003938:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800393c:	485c      	ldr	r0, [pc, #368]	@ (8003ab0 <Reference+0x2d4>)
 800393e:	f004 fc05 	bl	800814c <HAL_GPIO_ReadPin>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0d4      	beq.n	80038f2 <Reference+0x116>
            }
        }
        StepTimerCancelAsync(NULL);
 8003948:	2000      	movs	r0, #0
 800394a:	f7ff fea1 	bl	8003690 <StepTimerCancelAsync>
    }
    // move to reference switch
    while (HAL_GPIO_ReadPin(REFERENCE_MARK_GPIO_Port, REFERENCE_MARK_Pin) != GPIO_PIN_RESET)
 800394e:	e023      	b.n	8003998 <Reference+0x1bc>
    {
        L6474_StepIncremental(StepperContext->h, -1);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f04f 31ff 	mov.w	r1, #4294967295
 8003958:	4618      	mov	r0, r3
 800395a:	f002 faa3 	bl	8005ea4 <L6474_StepIncremental>
        if (timeout_ms > 0 && HAL_GetTick() - start_time > timeout_ms)
 800395e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003960:	2b00      	cmp	r3, #0
 8003962:	d019      	beq.n	8003998 <Reference+0x1bc>
 8003964:	f003 fd62 	bl	800742c <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003970:	429a      	cmp	r2, r3
 8003972:	d211      	bcs.n	8003998 <Reference+0x1bc>
        {
            StepTimerCancelAsync(NULL);
 8003974:	2000      	movs	r0, #0
 8003976:	f7ff fe8b 	bl	8003690 <StepTimerCancelAsync>
            printf("Timeout while waiting for reference switch\r\n");
 800397a:	484f      	ldr	r0, [pc, #316]	@ (8003ab8 <Reference+0x2dc>)
 800397c:	f010 fdaa 	bl	80144d4 <puts>
            StepperContext->error_code = 2;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2202      	movs	r2, #2
 8003984:	611a      	str	r2, [r3, #16]
            StepperContext->state = scs.FLT;
 8003986:	4b43      	ldr	r3, [pc, #268]	@ (8003a94 <Reference+0x2b8>)
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	b2da      	uxtb	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            return -1;
 8003992:	f04f 33ff 	mov.w	r3, #4294967295
 8003996:	e09e      	b.n	8003ad6 <Reference+0x2fa>
    while (HAL_GPIO_ReadPin(REFERENCE_MARK_GPIO_Port, REFERENCE_MARK_Pin) != GPIO_PIN_RESET)
 8003998:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800399c:	4844      	ldr	r0, [pc, #272]	@ (8003ab0 <Reference+0x2d4>)
 800399e:	f004 fbd5 	bl	800814c <HAL_GPIO_ReadPin>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1d3      	bne.n	8003950 <Reference+0x174>
        }
    }
    StepTimerCancelAsync(NULL);
 80039a8:	2000      	movs	r0, #0
 80039aa:	f7ff fe71 	bl	8003690 <StepTimerCancelAsync>
    // move to limit switch from reference switch
    const uint32_t track_timer_start = HAL_GetTick();
 80039ae:	f003 fd3d 	bl	800742c <HAL_GetTick>
 80039b2:	6178      	str	r0, [r7, #20]
    while (HAL_GPIO_ReadPin(LIMIT_SWITCH_GPIO_Port, LIMIT_SWITCH_Pin) != GPIO_PIN_RESET)
 80039b4:	e025      	b.n	8003a02 <Reference+0x226>
    {
        L6474_StepIncremental(StepperContext->h, 1);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2101      	movs	r1, #1
 80039bc:	4618      	mov	r0, r3
 80039be:	f002 fa71 	bl	8005ea4 <L6474_StepIncremental>
        step_amt += 1;
 80039c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c4:	3301      	adds	r3, #1
 80039c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (timeout_ms > 0 && HAL_GetTick() - start_time > timeout_ms)
 80039c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d019      	beq.n	8003a02 <Reference+0x226>
 80039ce:	f003 fd2d 	bl	800742c <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039da:	429a      	cmp	r2, r3
 80039dc:	d211      	bcs.n	8003a02 <Reference+0x226>
        {
            StepTimerCancelAsync(NULL);
 80039de:	2000      	movs	r0, #0
 80039e0:	f7ff fe56 	bl	8003690 <StepTimerCancelAsync>
            printf("Timeout while moving to limit switch\r\n");
 80039e4:	4835      	ldr	r0, [pc, #212]	@ (8003abc <Reference+0x2e0>)
 80039e6:	f010 fd75 	bl	80144d4 <puts>
            StepperContext->error_code = 2;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2202      	movs	r2, #2
 80039ee:	611a      	str	r2, [r3, #16]
            StepperContext->state = scs.FLT;
 80039f0:	4b28      	ldr	r3, [pc, #160]	@ (8003a94 <Reference+0x2b8>)
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            return -1;
 80039fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003a00:	e069      	b.n	8003ad6 <Reference+0x2fa>
    while (HAL_GPIO_ReadPin(LIMIT_SWITCH_GPIO_Port, LIMIT_SWITCH_Pin) != GPIO_PIN_RESET)
 8003a02:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003a06:	482a      	ldr	r0, [pc, #168]	@ (8003ab0 <Reference+0x2d4>)
 8003a08:	f004 fba0 	bl	800814c <HAL_GPIO_ReadPin>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1d1      	bne.n	80039b6 <Reference+0x1da>
        }
    }
    track_timer_stop = HAL_GetTick();
 8003a12:	f003 fd0b 	bl	800742c <HAL_GetTick>
 8003a16:	6238      	str	r0, [r7, #32]
    StepTimerCancelAsync(NULL);
 8003a18:	2000      	movs	r0, #0
 8003a1a:	f7ff fe39 	bl	8003690 <StepTimerCancelAsync>

    // calc parameters from full run
    StepperContext->mm_per_step = (TRACKLENGTH / step_amt);
 8003a1e:	f240 1227 	movw	r2, #295	@ 0x127
 8003a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a24:	fb92 f3f3 	sdiv	r3, r2, r3
 8003a28:	ee07 3a90 	vmov	s15, r3
 8003a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    StepperContext->mm_per_sec = (TRACKLENGTH / ((track_timer_stop - track_timer_start) * 1000.0f));
 8003a36:	6a3a      	ldr	r2, [r7, #32]
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	ee07 3a90 	vmov	s15, r3
 8003a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a44:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8003ac0 <Reference+0x2e4>
 8003a48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a4c:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8003ac4 <Reference+0x2e8>
 8003a50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    StepperContext->is_referenced = 1;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	609a      	str	r2, [r3, #8]

    L6474_SetAbsolutePosition(StepperContext->h, 0);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2100      	movs	r1, #0
 8003a66:	4618      	mov	r0, r3
 8003a68:	f002 f8db 	bl	8005c22 <L6474_SetAbsolutePosition>
    result |= L6474_SetPowerOutputs(StepperContext->h, poweroutput); // set power output if -e flag was set
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a72:	4618      	mov	r0, r3
 8003a74:	f002 f84c 	bl	8005b10 <L6474_SetPowerOutputs>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	61fb      	str	r3, [r7, #28]
    StepperContext->is_powered = poweroutput;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a84:	605a      	str	r2, [r3, #4]
    // After reference, go to DIS or ENA depending on poweroutput
    StepperContext->state = poweroutput ? scs.ENA : scs.DIS;
 8003a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d01d      	beq.n	8003ac8 <Reference+0x2ec>
 8003a8c:	4b01      	ldr	r3, [pc, #4]	@ (8003a94 <Reference+0x2b8>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	e01c      	b.n	8003ace <Reference+0x2f2>
 8003a94:	20000000 	.word	0x20000000
 8003a98:	08018e84 	.word	0x08018e84
 8003a9c:	08018eb0 	.word	0x08018eb0
 8003aa0:	08018eb4 	.word	0x08018eb4
 8003aa4:	08018eb8 	.word	0x08018eb8
 8003aa8:	08018ed8 	.word	0x08018ed8
 8003aac:	08018edc 	.word	0x08018edc
 8003ab0:	40020400 	.word	0x40020400
 8003ab4:	08018f04 	.word	0x08018f04
 8003ab8:	08018f30 	.word	0x08018f30
 8003abc:	08018f5c 	.word	0x08018f5c
 8003ac0:	447a0000 	.word	0x447a0000
 8003ac4:	43938000 	.word	0x43938000
 8003ac8:	4b05      	ldr	r3, [pc, #20]	@ (8003ae0 <Reference+0x304>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
    return result;
 8003ad4:	69fb      	ldr	r3, [r7, #28]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3730      	adds	r7, #48	@ 0x30
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20000000 	.word	0x20000000

08003ae4 <Position>:
// WIP kind of done
static int Position(StepperContext_t *StepperContext, int argc, char **argv)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
    if (StepperContext->state == scs.FLT)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003af6:	461a      	mov	r2, r3
 8003af8:	4b0d      	ldr	r3, [pc, #52]	@ (8003b30 <Position+0x4c>)
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d105      	bne.n	8003b0c <Position+0x28>
    {
        printf("Stepper in fault state\r\n");
 8003b00:	480c      	ldr	r0, [pc, #48]	@ (8003b34 <Position+0x50>)
 8003b02:	f010 fce7 	bl	80144d4 <puts>
        return -1;
 8003b06:	f04f 33ff 	mov.w	r3, #4294967295
 8003b0a:	e00d      	b.n	8003b28 <Position+0x44>
    }
    int position;
    L6474_GetAbsolutePosition(StepperContext->h, &position);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f107 0214 	add.w	r2, r7, #20
 8003b14:	4611      	mov	r1, r2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f002 f83a 	bl	8005b90 <L6474_GetAbsolutePosition>
    printf("Current position: %d\n\r", (position));
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4805      	ldr	r0, [pc, #20]	@ (8003b38 <Position+0x54>)
 8003b22:	f010 fc67 	bl	80143f4 <iprintf>
    return 0;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	20000000 	.word	0x20000000
 8003b34:	08018f84 	.word	0x08018f84
 8003b38:	08018f9c 	.word	0x08018f9c

08003b3c <Status>:
// WIP kind of done
static int Status(StepperContext_t *StepperContext, int argc, char **argv)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
    L6474_Status_t driverStatus;
    L6474_GetStatus(StepperContext->h, &driverStatus);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f107 0210 	add.w	r2, r7, #16
 8003b50:	4611      	mov	r1, r2
 8003b52:	4618      	mov	r0, r3
 8003b54:	f002 f918 	bl	8005d88 <L6474_GetStatus>

    unsigned int statusBits = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61fb      	str	r3, [r7, #28]
    statusBits |= (driverStatus.DIR ? (1 << 0) : 0);
 8003b5c:	7c7b      	ldrb	r3, [r7, #17]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <Status+0x2a>
 8003b62:	2301      	movs	r3, #1
 8003b64:	e000      	b.n	8003b68 <Status+0x2c>
 8003b66:	2300      	movs	r3, #0
 8003b68:	69fa      	ldr	r2, [r7, #28]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	61fb      	str	r3, [r7, #28]
    statusBits |= (driverStatus.HIGHZ ? (1 << 1) : 0);
 8003b6e:	7c3b      	ldrb	r3, [r7, #16]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <Status+0x3c>
 8003b74:	2302      	movs	r3, #2
 8003b76:	e000      	b.n	8003b7a <Status+0x3e>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	69fa      	ldr	r2, [r7, #28]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	61fb      	str	r3, [r7, #28]
    statusBits |= (driverStatus.NOTPERF_CMD ? (1 << 2) : 0);
 8003b80:	7cbb      	ldrb	r3, [r7, #18]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <Status+0x4e>
 8003b86:	2304      	movs	r3, #4
 8003b88:	e000      	b.n	8003b8c <Status+0x50>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	69fa      	ldr	r2, [r7, #28]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	61fb      	str	r3, [r7, #28]
    statusBits |= (driverStatus.OCD ? (1 << 3) : 0);
 8003b92:	7dfb      	ldrb	r3, [r7, #23]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <Status+0x60>
 8003b98:	2308      	movs	r3, #8
 8003b9a:	e000      	b.n	8003b9e <Status+0x62>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	69fa      	ldr	r2, [r7, #28]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	61fb      	str	r3, [r7, #28]
    statusBits |= (driverStatus.ONGOING ? (1 << 4) : 0);
 8003ba4:	7e3b      	ldrb	r3, [r7, #24]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <Status+0x72>
 8003baa:	2310      	movs	r3, #16
 8003bac:	e000      	b.n	8003bb0 <Status+0x74>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	69fa      	ldr	r2, [r7, #28]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	61fb      	str	r3, [r7, #28]
    statusBits |= (driverStatus.TH_SD ? (1 << 5) : 0);
 8003bb6:	7dbb      	ldrb	r3, [r7, #22]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <Status+0x84>
 8003bbc:	2320      	movs	r3, #32
 8003bbe:	e000      	b.n	8003bc2 <Status+0x86>
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	69fa      	ldr	r2, [r7, #28]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	61fb      	str	r3, [r7, #28]
    statusBits |= (driverStatus.TH_WARN ? (1 << 6) : 0);
 8003bc8:	7d7b      	ldrb	r3, [r7, #21]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <Status+0x96>
 8003bce:	2340      	movs	r3, #64	@ 0x40
 8003bd0:	e000      	b.n	8003bd4 <Status+0x98>
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	69fa      	ldr	r2, [r7, #28]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	61fb      	str	r3, [r7, #28]
    statusBits |= (driverStatus.UVLO ? (1 << 7) : 0);
 8003bda:	7d3b      	ldrb	r3, [r7, #20]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <Status+0xa8>
 8003be0:	2380      	movs	r3, #128	@ 0x80
 8003be2:	e000      	b.n	8003be6 <Status+0xaa>
 8003be4:	2300      	movs	r3, #0
 8003be6:	69fa      	ldr	r2, [r7, #28]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	61fb      	str	r3, [r7, #28]
    statusBits |= (driverStatus.WRONG_CMD ? (1 << 8) : 0);
 8003bec:	7cfb      	ldrb	r3, [r7, #19]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d002      	beq.n	8003bf8 <Status+0xbc>
 8003bf2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003bf6:	e000      	b.n	8003bfa <Status+0xbe>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	69fa      	ldr	r2, [r7, #28]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	61fb      	str	r3, [r7, #28]

    printf("0x%01X\r\n", StepperContext->state);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c06:	4619      	mov	r1, r3
 8003c08:	4808      	ldr	r0, [pc, #32]	@ (8003c2c <Status+0xf0>)
 8003c0a:	f010 fbf3 	bl	80143f4 <iprintf>
    printf("0x%04X\r\n", statusBits);
 8003c0e:	69f9      	ldr	r1, [r7, #28]
 8003c10:	4807      	ldr	r0, [pc, #28]	@ (8003c30 <Status+0xf4>)
 8003c12:	f010 fbef 	bl	80143f4 <iprintf>
    printf("%d\r\n", StepperContext->is_running);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4805      	ldr	r0, [pc, #20]	@ (8003c34 <Status+0xf8>)
 8003c1e:	f010 fbe9 	bl	80143f4 <iprintf>

    return 0;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3720      	adds	r7, #32
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	08018fb4 	.word	0x08018fb4
 8003c30:	08018fc0 	.word	0x08018fc0
 8003c34:	08018fcc 	.word	0x08018fcc

08003c38 <Move>:
// WIP
static int Move(StepperContext_t *StepperContext, int argc, char **argv)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b092      	sub	sp, #72	@ 0x48
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
    // Preconditions
    if (StepperContext->state != scs.ENA)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	4bac      	ldr	r3, [pc, #688]	@ (8003f00 <Move+0x2c8>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d009      	beq.n	8003c68 <Move+0x30>
    {
        printf("Error: Stepper not enabled (state=%d)\r\n", StepperContext->state);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	48a9      	ldr	r0, [pc, #676]	@ (8003f04 <Move+0x2cc>)
 8003c5e:	f010 fbc9 	bl	80143f4 <iprintf>
        return -1;
 8003c62:	f04f 33ff 	mov.w	r3, #4294967295
 8003c66:	e190      	b.n	8003f8a <Move+0x352>
    }
    if (StepperContext->is_powered != 1)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d005      	beq.n	8003c7c <Move+0x44>
    {
        printf("Error: Stepper not powered\r\n");
 8003c70:	48a5      	ldr	r0, [pc, #660]	@ (8003f08 <Move+0x2d0>)
 8003c72:	f010 fc2f 	bl	80144d4 <puts>
        return -1;
 8003c76:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7a:	e186      	b.n	8003f8a <Move+0x352>
    }
    if (StepperContext->is_referenced != 1)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d005      	beq.n	8003c90 <Move+0x58>
    {
        printf("Error: Stepper not referenced\r\n");
 8003c84:	48a1      	ldr	r0, [pc, #644]	@ (8003f0c <Move+0x2d4>)
 8003c86:	f010 fc25 	bl	80144d4 <puts>
        return -1;
 8003c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8e:	e17c      	b.n	8003f8a <Move+0x352>
    }
    if (argc < 2)
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	dc05      	bgt.n	8003ca2 <Move+0x6a>
    {
        printf("Error: Invalid number of arguments\r\n");
 8003c96:	489e      	ldr	r0, [pc, #632]	@ (8003f10 <Move+0x2d8>)
 8003c98:	f010 fc1c 	bl	80144d4 <puts>
        return -1;
 8003c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca0:	e173      	b.n	8003f8a <Move+0x352>
    }

    // Parse arguments
    float target_position = atof(argv[1]);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f00e fa8f 	bl	80121cc <atof>
 8003cae:	ec53 2b10 	vmov	r2, r3, d0
 8003cb2:	4610      	mov	r0, r2
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	f7fc ffc7 	bl	8000c48 <__aeabi_d2f>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	633b      	str	r3, [r7, #48]	@ 0x30
    int speed = 1000; // Default speed in mm/min
 8003cbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cc2:	647b      	str	r3, [r7, #68]	@ 0x44
    int is_relative = 0;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	643b      	str	r3, [r7, #64]	@ 0x40
    int is_async = 0;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	63fb      	str	r3, [r7, #60]	@ 0x3c

    for (int i = 2; i < argc;)
 8003ccc:	2302      	movs	r3, #2
 8003cce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cd0:	e054      	b.n	8003d7c <Move+0x144>
    {
        if (strcmp(argv[i], "-s") == 0)
 8003cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	4413      	add	r3, r2
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	498d      	ldr	r1, [pc, #564]	@ (8003f14 <Move+0x2dc>)
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fc fa96 	bl	8000210 <strcmp>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d118      	bne.n	8003d1c <Move+0xe4>
        {
            if (i == argc - 1)
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	3b01      	subs	r3, #1
 8003cee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d105      	bne.n	8003d00 <Move+0xc8>
            {
                printf("Error: Missing speed value after -s flag\r\n");
 8003cf4:	4888      	ldr	r0, [pc, #544]	@ (8003f18 <Move+0x2e0>)
 8003cf6:	f010 fbed 	bl	80144d4 <puts>
                return -1;
 8003cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003cfe:	e144      	b.n	8003f8a <Move+0x352>
            }
            speed = atoi(argv[i + 1]);
 8003d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d02:	3301      	adds	r3, #1
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	4413      	add	r3, r2
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f00e fa60 	bl	80121d2 <atoi>
 8003d12:	6478      	str	r0, [r7, #68]	@ 0x44
            i += 2;
 8003d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d16:	3302      	adds	r3, #2
 8003d18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d1a:	e02f      	b.n	8003d7c <Move+0x144>
        }
        else if (strcmp(argv[i], "-r") == 0)
 8003d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	4413      	add	r3, r2
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	497d      	ldr	r1, [pc, #500]	@ (8003f1c <Move+0x2e4>)
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fc fa71 	bl	8000210 <strcmp>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d105      	bne.n	8003d40 <Move+0x108>
        {
            is_relative = 1;
 8003d34:	2301      	movs	r3, #1
 8003d36:	643b      	str	r3, [r7, #64]	@ 0x40
            i++;
 8003d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d3e:	e01d      	b.n	8003d7c <Move+0x144>
        }
        else if (strcmp(argv[i], "-a") == 0)
 8003d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	4413      	add	r3, r2
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4975      	ldr	r1, [pc, #468]	@ (8003f20 <Move+0x2e8>)
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7fc fa5f 	bl	8000210 <strcmp>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d105      	bne.n	8003d64 <Move+0x12c>
        {
            is_async = 1;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            i++;
 8003d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d5e:	3301      	adds	r3, #1
 8003d60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d62:	e00b      	b.n	8003d7c <Move+0x144>
        }
        else
        {
            printf("Error: Invalid flag '%s'\r\n", argv[i]);
 8003d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4619      	mov	r1, r3
 8003d70:	486c      	ldr	r0, [pc, #432]	@ (8003f24 <Move+0x2ec>)
 8003d72:	f010 fb3f 	bl	80143f4 <iprintf>
            return -1;
 8003d76:	f04f 33ff 	mov.w	r3, #4294967295
 8003d7a:	e106      	b.n	8003f8a <Move+0x352>
    for (int i = 2; i < argc;)
 8003d7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	dba6      	blt.n	8003cd2 <Move+0x9a>
        }
    }

    // Cap speed to valid mechanical limits
    if (speed < 1)
 8003d84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	dc05      	bgt.n	8003d96 <Move+0x15e>
    {
        printf("Error: Speed too low\r\n");
 8003d8a:	4867      	ldr	r0, [pc, #412]	@ (8003f28 <Move+0x2f0>)
 8003d8c:	f010 fba2 	bl	80144d4 <puts>
        return -1;
 8003d90:	f04f 33ff 	mov.w	r3, #4294967295
 8003d94:	e0f9      	b.n	8003f8a <Move+0x352>
    }
    int max_speed = (int)(StepperContext->mm_per_sec * 60); // Convert mm/sec to mm/min
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003d9c:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8003f2c <Move+0x2f4>
 8003da0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003da4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003da8:	ee17 3a90 	vmov	r3, s15
 8003dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (speed > max_speed)
 8003dae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db2:	429a      	cmp	r2, r3
 8003db4:	dd05      	ble.n	8003dc2 <Move+0x18a>
    {
        printf("Warning: Speed capped to maximum (%d mm/min)\r\n", max_speed);
 8003db6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003db8:	485d      	ldr	r0, [pc, #372]	@ (8003f30 <Move+0x2f8>)
 8003dba:	f010 fb1b 	bl	80143f4 <iprintf>
        speed = max_speed;
 8003dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc0:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    // Calculate steps per second
    float steps_per_second = (speed * StepperContext->steps_per_turn) / (60.0f * StepperContext->mm_per_turn);
 8003dc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dc4:	ee07 3a90 	vmov	s15, r3
 8003dc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003dd2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003ddc:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8003f2c <Move+0x2f4>
 8003de0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003de4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003de8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    SetSpeed(StepperContext, (int)steps_per_second);
 8003dec:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003df0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003df4:	ee17 1a90 	vmov	r1, s15
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 fbf5 	bl	80045e8 <SetSpeed>

    // Get current position
    int current_steps;
    L6474_GetAbsolutePosition(StepperContext->h, &current_steps);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f107 0214 	add.w	r2, r7, #20
 8003e06:	4611      	mov	r1, r2
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f001 fec1 	bl	8005b90 <L6474_GetAbsolutePosition>
    float current_position = (current_steps * StepperContext->mm_per_turn) / StepperContext->steps_per_turn;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	ee07 3a90 	vmov	s15, r3
 8003e14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003e1e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8003e28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e2c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Calculate target position
    float final_position = is_relative ? current_position + target_position : target_position;
 8003e30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d006      	beq.n	8003e44 <Move+0x20c>
 8003e36:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003e3a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003e3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e42:	e001      	b.n	8003e48 <Move+0x210>
 8003e44:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003e48:	edc7 7a08 	vstr	s15, [r7, #32]
    if (final_position < StepperContext->pos_min || final_position > StepperContext->pos_max)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e50:	ee07 3a90 	vmov	s15, r3
 8003e54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e58:	ed97 7a08 	vldr	s14, [r7, #32]
 8003e5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e64:	d40c      	bmi.n	8003e80 <Move+0x248>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e6a:	ee07 3a90 	vmov	s15, r3
 8003e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e72:	ed97 7a08 	vldr	s14, [r7, #32]
 8003e76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e7e:	dd05      	ble.n	8003e8c <Move+0x254>
    {
        printf("Error: Target position out of range\r\n");
 8003e80:	482c      	ldr	r0, [pc, #176]	@ (8003f34 <Move+0x2fc>)
 8003e82:	f010 fb27 	bl	80144d4 <puts>
        return -1;
 8003e86:	f04f 33ff 	mov.w	r3, #4294967295
 8003e8a:	e07e      	b.n	8003f8a <Move+0x352>
    }

    // Calculate steps to move
    int target_steps = (int)((final_position * StepperContext->steps_per_turn) / StepperContext->mm_per_turn);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8003e92:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e96:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8003ea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ea4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ea8:	ee17 3a90 	vmov	r3, s15
 8003eac:	61fb      	str	r3, [r7, #28]
    int steps_to_move = target_steps - current_steps;
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	69fa      	ldr	r2, [r7, #28]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	61bb      	str	r3, [r7, #24]

    if (steps_to_move == 0)
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d104      	bne.n	8003ec6 <Move+0x28e>
    {
        printf("No movement required\r\n");
 8003ebc:	481e      	ldr	r0, [pc, #120]	@ (8003f38 <Move+0x300>)
 8003ebe:	f010 fb09 	bl	80144d4 <puts>
        return 0;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	e061      	b.n	8003f8a <Move+0x352>
    }

    // Prevent multiple asynchronous commands
    if (is_async && StepperContext->is_running)
 8003ec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d009      	beq.n	8003ee0 <Move+0x2a8>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <Move+0x2a8>
    {
        printf("Error: Stepper is already moving asynchronously\r\n");
 8003ed4:	4819      	ldr	r0, [pc, #100]	@ (8003f3c <Move+0x304>)
 8003ed6:	f010 fafd 	bl	80144d4 <puts>
        return -1;
 8003eda:	f04f 33ff 	mov.w	r3, #4294967295
 8003ede:	e054      	b.n	8003f8a <Move+0x352>
    }

    // Perform movement
    int result = 0;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	637b      	str	r3, [r7, #52]	@ 0x34
    StepperContext->is_running = 1; // Mark stepper as running
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	60da      	str	r2, [r3, #12]
    if (is_async)
 8003eea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d027      	beq.n	8003f40 <Move+0x308>
    {
        result = L6474_StepIncremental(StepperContext->h, steps_to_move);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	69b9      	ldr	r1, [r7, #24]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f001 ffd4 	bl	8005ea4 <L6474_StepIncremental>
 8003efc:	6378      	str	r0, [r7, #52]	@ 0x34
 8003efe:	e02e      	b.n	8003f5e <Move+0x326>
 8003f00:	20000000 	.word	0x20000000
 8003f04:	08018fd4 	.word	0x08018fd4
 8003f08:	08018ffc 	.word	0x08018ffc
 8003f0c:	08019018 	.word	0x08019018
 8003f10:	08019038 	.word	0x08019038
 8003f14:	08018eb0 	.word	0x08018eb0
 8003f18:	0801905c 	.word	0x0801905c
 8003f1c:	08019088 	.word	0x08019088
 8003f20:	0801908c 	.word	0x0801908c
 8003f24:	08019090 	.word	0x08019090
 8003f28:	080190ac 	.word	0x080190ac
 8003f2c:	42700000 	.word	0x42700000
 8003f30:	080190c4 	.word	0x080190c4
 8003f34:	080190f4 	.word	0x080190f4
 8003f38:	0801911c 	.word	0x0801911c
 8003f3c:	08019134 	.word	0x08019134
    }
    else
    {
        result = L6474_StepIncremental(StepperContext->h, steps_to_move);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	69b9      	ldr	r1, [r7, #24]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f001 ffac 	bl	8005ea4 <L6474_StepIncremental>
 8003f4c:	6378      	str	r0, [r7, #52]	@ 0x34
        while (StepperContext->is_running)
 8003f4e:	e002      	b.n	8003f56 <Move+0x31e>
        {
            StepLibraryDelay(1); // Wait for movement to complete
 8003f50:	2001      	movs	r0, #1
 8003f52:	f7ff fb2f 	bl	80035b4 <StepLibraryDelay>
        while (StepperContext->is_running)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1f8      	bne.n	8003f50 <Move+0x318>
        }
    }

    // Check for errors
    if (result != 0)
 8003f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d009      	beq.n	8003f78 <Move+0x340>
    {
        printf("Error: Movement failed\r\n");
 8003f64:	480b      	ldr	r0, [pc, #44]	@ (8003f94 <Move+0x35c>)
 8003f66:	f010 fab5 	bl	80144d4 <puts>
        StepperContext->state = scsFLT;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2204      	movs	r2, #4
 8003f6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        return -1;
 8003f72:	f04f 33ff 	mov.w	r3, #4294967295
 8003f76:	e008      	b.n	8003f8a <Move+0x352>
    }

    printf("Movement completed. Final position: %.2f mm\r\n", final_position);
 8003f78:	6a38      	ldr	r0, [r7, #32]
 8003f7a:	f7fc fb15 	bl	80005a8 <__aeabi_f2d>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	4805      	ldr	r0, [pc, #20]	@ (8003f98 <Move+0x360>)
 8003f84:	f010 fa36 	bl	80143f4 <iprintf>
    return 0;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3748      	adds	r7, #72	@ 0x48
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	08019168 	.word	0x08019168
 8003f98:	08019180 	.word	0x08019180
 8003f9c:	00000000 	.word	0x00000000

08003fa0 <Config>:
// WIP
static int Config(StepperContext_t *StepperContext, int argc, char **argv)
{
 8003fa0:	b5b0      	push	{r4, r5, r7, lr}
 8003fa2:	ed2d 8b02 	vpush	{d8}
 8003fa6:	b090      	sub	sp, #64	@ 0x40
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
    if (argc < 2)
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	dc05      	bgt.n	8003fc2 <Config+0x22>
    {
        printf("Invalid number of arguments\r\n");
 8003fb6:	489d      	ldr	r0, [pc, #628]	@ (800422c <Config+0x28c>)
 8003fb8:	f010 fa8c 	bl	80144d4 <puts>
        return -1;
 8003fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc0:	e2b3      	b.n	800452a <Config+0x58a>
    }

    int result = 0;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    int pos = -1;
 8003fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fca:	63bb      	str	r3, [r7, #56]	@ 0x38

    for (int i = 0; i < argc; i++)
 8003fcc:	2300      	movs	r3, #0
 8003fce:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fd0:	e011      	b.n	8003ff6 <Config+0x56>
    {
        if (strcmp(argv[i], "-v") == 0)
 8003fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	4413      	add	r3, r2
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4994      	ldr	r1, [pc, #592]	@ (8004230 <Config+0x290>)
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fc f916 	bl	8000210 <strcmp>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d102      	bne.n	8003ff0 <Config+0x50>
        {
            pos = i;
 8003fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fec:	63bb      	str	r3, [r7, #56]	@ 0x38
            break;
 8003fee:	e006      	b.n	8003ffe <Config+0x5e>
    for (int i = 0; i < argc; i++)
 8003ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ff6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	dbe9      	blt.n	8003fd2 <Config+0x32>
        }
    }

    if (strcmp(argv[1], "powerena") == 0)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	3304      	adds	r3, #4
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	498b      	ldr	r1, [pc, #556]	@ (8004234 <Config+0x294>)
 8004006:	4618      	mov	r0, r3
 8004008:	f7fc f902 	bl	8000210 <strcmp>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d129      	bne.n	8004066 <Config+0xc6>
    {
        if (pos != -1)
 8004012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004018:	d01e      	beq.n	8004058 <Config+0xb8>
        {
            int ena = atoi(argv[pos + 1]);
 800401a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800401c:	3301      	adds	r3, #1
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	4413      	add	r3, r2
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f00e f8d3 	bl	80121d2 <atoi>
 800402c:	6238      	str	r0, [r7, #32]
            result = SetPower(ena);
 800402e:	6a38      	ldr	r0, [r7, #32]
 8004030:	f000 fa9e 	bl	8004570 <SetPower>
 8004034:	63f8      	str	r0, [r7, #60]	@ 0x3c
            if (ena)
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d006      	beq.n	800404a <Config+0xaa>
            {
                StepperContext->state = scs.ENA; // DIS -> ENA
 800403c:	4b7e      	ldr	r3, [pc, #504]	@ (8004238 <Config+0x298>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	b2da      	uxtb	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004048:	e26e      	b.n	8004528 <Config+0x588>
            }
            else
            {
                StepperContext->state = scs.DIS; // ENA -> DIS
 800404a:	4b7b      	ldr	r3, [pc, #492]	@ (8004238 <Config+0x298>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	b2da      	uxtb	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004056:	e267      	b.n	8004528 <Config+0x588>
            }
        }
        else
        {
            printf("Current Powerstate: %d\r\n", StepperContext->is_powered);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	4619      	mov	r1, r3
 800405e:	4877      	ldr	r0, [pc, #476]	@ (800423c <Config+0x29c>)
 8004060:	f010 f9c8 	bl	80143f4 <iprintf>
 8004064:	e260      	b.n	8004528 <Config+0x588>
        }
    }
    else if (strcmp(argv[1], "torque") == 0)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	3304      	adds	r3, #4
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4974      	ldr	r1, [pc, #464]	@ (8004240 <Config+0x2a0>)
 800406e:	4618      	mov	r0, r3
 8004070:	f7fc f8ce 	bl	8000210 <strcmp>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d127      	bne.n	80040ca <Config+0x12a>
    {
        if (pos != -1)
 800407a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800407c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004080:	d012      	beq.n	80040a8 <Config+0x108>
        {
            result = L6474_SetProperty(StepperContext->h, L6474_PROP_TORQUE, atoi(argv[pos + 1]));
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681c      	ldr	r4, [r3, #0]
 8004086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004088:	3301      	adds	r3, #1
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	4413      	add	r3, r2
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f00e f89d 	bl	80121d2 <atoi>
 8004098:	4603      	mov	r3, r0
 800409a:	461a      	mov	r2, r3
 800409c:	2109      	movs	r1, #9
 800409e:	4620      	mov	r0, r4
 80040a0:	f001 fdf8 	bl	8005c94 <L6474_SetProperty>
 80040a4:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80040a6:	e23f      	b.n	8004528 <Config+0x588>
        }
        else
        {
            int value = 0;
 80040a8:	2300      	movs	r3, #0
 80040aa:	61fb      	str	r3, [r7, #28]
            result = L6474_GetProperty(StepperContext->h, L6474_PROP_TORQUE, &value);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f107 021c 	add.w	r2, r7, #28
 80040b4:	2109      	movs	r1, #9
 80040b6:	4618      	mov	r0, r3
 80040b8:	f001 fe28 	bl	8005d0c <L6474_GetProperty>
 80040bc:	63f8      	str	r0, [r7, #60]	@ 0x3c
            printf("%d\r\n", value);
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	4619      	mov	r1, r3
 80040c2:	4860      	ldr	r0, [pc, #384]	@ (8004244 <Config+0x2a4>)
 80040c4:	f010 f996 	bl	80143f4 <iprintf>
 80040c8:	e22e      	b.n	8004528 <Config+0x588>
        }
    }
    else if (strcmp(argv[1], "throvercurr") == 0)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3304      	adds	r3, #4
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	495d      	ldr	r1, [pc, #372]	@ (8004248 <Config+0x2a8>)
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fc f89c 	bl	8000210 <strcmp>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d127      	bne.n	800412e <Config+0x18e>
    {
        if (pos != -1)
 80040de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e4:	d012      	beq.n	800410c <Config+0x16c>
        {
            result = L6474_SetProperty(StepperContext->h, L6474_PROP_OCDTH, atoi(argv[pos + 1]));
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681c      	ldr	r4, [r3, #0]
 80040ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ec:	3301      	adds	r3, #1
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	4413      	add	r3, r2
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f00e f86b 	bl	80121d2 <atoi>
 80040fc:	4603      	mov	r3, r0
 80040fe:	461a      	mov	r2, r3
 8004100:	2113      	movs	r1, #19
 8004102:	4620      	mov	r0, r4
 8004104:	f001 fdc6 	bl	8005c94 <L6474_SetProperty>
 8004108:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800410a:	e20d      	b.n	8004528 <Config+0x588>
        }
        else
        {
            int value = 0;
 800410c:	2300      	movs	r3, #0
 800410e:	61bb      	str	r3, [r7, #24]
            result = L6474_GetProperty(StepperContext->h, L6474_PROP_OCDTH, &value);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f107 0218 	add.w	r2, r7, #24
 8004118:	2113      	movs	r1, #19
 800411a:	4618      	mov	r0, r3
 800411c:	f001 fdf6 	bl	8005d0c <L6474_GetProperty>
 8004120:	63f8      	str	r0, [r7, #60]	@ 0x3c
            printf("%d\r\n", value);
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	4619      	mov	r1, r3
 8004126:	4847      	ldr	r0, [pc, #284]	@ (8004244 <Config+0x2a4>)
 8004128:	f010 f964 	bl	80143f4 <iprintf>
 800412c:	e1fc      	b.n	8004528 <Config+0x588>
        }
    }
    else if (strcmp(argv[1], "stepmode") == 0)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	3304      	adds	r3, #4
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4945      	ldr	r1, [pc, #276]	@ (800424c <Config+0x2ac>)
 8004136:	4618      	mov	r0, r3
 8004138:	f7fc f86a 	bl	8000210 <strcmp>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	f040 808a 	bne.w	8004258 <Config+0x2b8>
    {
        if (pos != -1)
 8004144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414a:	d066      	beq.n	800421a <Config+0x27a>
        {
            L6474x_StepMode_t step_mode_l;
            switch (atoi(argv[pos + 1]))
 800414c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800414e:	3301      	adds	r3, #1
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	4413      	add	r3, r2
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4618      	mov	r0, r3
 800415a:	f00e f83a 	bl	80121d2 <atoi>
 800415e:	4603      	mov	r3, r0
 8004160:	3b01      	subs	r3, #1
 8004162:	2b0f      	cmp	r3, #15
 8004164:	d836      	bhi.n	80041d4 <Config+0x234>
 8004166:	a201      	add	r2, pc, #4	@ (adr r2, 800416c <Config+0x1cc>)
 8004168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416c:	080041ad 	.word	0x080041ad
 8004170:	080041b5 	.word	0x080041b5
 8004174:	080041d5 	.word	0x080041d5
 8004178:	080041bd 	.word	0x080041bd
 800417c:	080041d5 	.word	0x080041d5
 8004180:	080041d5 	.word	0x080041d5
 8004184:	080041d5 	.word	0x080041d5
 8004188:	080041c5 	.word	0x080041c5
 800418c:	080041d5 	.word	0x080041d5
 8004190:	080041d5 	.word	0x080041d5
 8004194:	080041d5 	.word	0x080041d5
 8004198:	080041d5 	.word	0x080041d5
 800419c:	080041d5 	.word	0x080041d5
 80041a0:	080041d5 	.word	0x080041d5
 80041a4:	080041d5 	.word	0x080041d5
 80041a8:	080041cd 	.word	0x080041cd
            {
            case 1:
                step_mode_l = smFULL;
 80041ac:	2300      	movs	r3, #0
 80041ae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                break;
 80041b2:	e015      	b.n	80041e0 <Config+0x240>
            case 2:
                step_mode_l = smHALF;
 80041b4:	2301      	movs	r3, #1
 80041b6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                break;
 80041ba:	e011      	b.n	80041e0 <Config+0x240>
            case 4:
                step_mode_l = smMICRO4;
 80041bc:	2302      	movs	r3, #2
 80041be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                break;
 80041c2:	e00d      	b.n	80041e0 <Config+0x240>
            case 8:
                step_mode_l = smMICRO8;
 80041c4:	2303      	movs	r3, #3
 80041c6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                break;
 80041ca:	e009      	b.n	80041e0 <Config+0x240>
            case 16:
                step_mode_l = smMICRO16;
 80041cc:	2304      	movs	r3, #4
 80041ce:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                break;
 80041d2:	e005      	b.n	80041e0 <Config+0x240>
            default:
                printf("Error: Invalid step mode\r\n");
 80041d4:	481e      	ldr	r0, [pc, #120]	@ (8004250 <Config+0x2b0>)
 80041d6:	f010 f97d 	bl	80144d4 <puts>
                return -1;
 80041da:	f04f 33ff 	mov.w	r3, #4294967295
 80041de:	e1a4      	b.n	800452a <Config+0x58a>
            }
            result = L6474_SetStepMode(StepperContext->h, step_mode_l);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80041e8:	4611      	mov	r1, r2
 80041ea:	4618      	mov	r0, r3
 80041ec:	f001 fc4b 	bl	8005a86 <L6474_SetStepMode>
 80041f0:	63f8      	str	r0, [r7, #60]	@ 0x3c
            if (result == 0)
 80041f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f040 8197 	bne.w	8004528 <Config+0x588>
            {
                StepperContext->step_mode = step_mode_l;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8004200:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                StepperContext->is_referenced = 0; // Force a new reference run
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	609a      	str	r2, [r3, #8]
                StepperContext->state = scsREF;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                printf("Step mode updated. Please perform a reference run.\r\n");
 8004212:	4810      	ldr	r0, [pc, #64]	@ (8004254 <Config+0x2b4>)
 8004214:	f010 f95e 	bl	80144d4 <puts>
 8004218:	e186      	b.n	8004528 <Config+0x588>
            }
        }
        else
        {
            printf("%d\r\n", StepperContext->step_mode);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004220:	4619      	mov	r1, r3
 8004222:	4808      	ldr	r0, [pc, #32]	@ (8004244 <Config+0x2a4>)
 8004224:	f010 f8e6 	bl	80143f4 <iprintf>
 8004228:	e17e      	b.n	8004528 <Config+0x588>
 800422a:	bf00      	nop
 800422c:	080191b0 	.word	0x080191b0
 8004230:	080191d0 	.word	0x080191d0
 8004234:	080191d4 	.word	0x080191d4
 8004238:	20000000 	.word	0x20000000
 800423c:	080191e0 	.word	0x080191e0
 8004240:	080191fc 	.word	0x080191fc
 8004244:	08018fcc 	.word	0x08018fcc
 8004248:	08019204 	.word	0x08019204
 800424c:	08019210 	.word	0x08019210
 8004250:	0801921c 	.word	0x0801921c
 8004254:	08019238 	.word	0x08019238
        }
    }
    else if (strcmp(argv[1], "timeon") == 0 || strcmp(argv[1], "timeoff") == 0 || strcmp(argv[1], "timefast") == 0)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3304      	adds	r3, #4
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	49b8      	ldr	r1, [pc, #736]	@ (8004540 <Config+0x5a0>)
 8004260:	4618      	mov	r0, r3
 8004262:	f7fb ffd5 	bl	8000210 <strcmp>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d013      	beq.n	8004294 <Config+0x2f4>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3304      	adds	r3, #4
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	49b4      	ldr	r1, [pc, #720]	@ (8004544 <Config+0x5a4>)
 8004274:	4618      	mov	r0, r3
 8004276:	f7fb ffcb 	bl	8000210 <strcmp>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d009      	beq.n	8004294 <Config+0x2f4>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3304      	adds	r3, #4
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	49b0      	ldr	r1, [pc, #704]	@ (8004548 <Config+0x5a8>)
 8004288:	4618      	mov	r0, r3
 800428a:	f7fb ffc1 	bl	8000210 <strcmp>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d154      	bne.n	800433e <Config+0x39e>
    {
        if (StepperContext->state != scs.ENA)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800429a:	461a      	mov	r2, r3
 800429c:	4bab      	ldr	r3, [pc, #684]	@ (800454c <Config+0x5ac>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d005      	beq.n	80042b0 <Config+0x310>
        {
            printf("Error: Parameter can be changed in scsENA only!\n");
 80042a4:	48aa      	ldr	r0, [pc, #680]	@ (8004550 <Config+0x5b0>)
 80042a6:	f010 f915 	bl	80144d4 <puts>
            return -1;
 80042aa:	f04f 33ff 	mov.w	r3, #4294967295
 80042ae:	e13c      	b.n	800452a <Config+0x58a>
        }

        int property;
        if (strcmp(argv[1], "timeon") == 0)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3304      	adds	r3, #4
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	49a2      	ldr	r1, [pc, #648]	@ (8004540 <Config+0x5a0>)
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fb ffa9 	bl	8000210 <strcmp>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d102      	bne.n	80042ca <Config+0x32a>
        {
            property = L6474_PROP_TON;
 80042c4:	230f      	movs	r3, #15
 80042c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042c8:	e00e      	b.n	80042e8 <Config+0x348>
        }
        else if (strcmp(argv[1], "timeoff") == 0)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3304      	adds	r3, #4
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	499c      	ldr	r1, [pc, #624]	@ (8004544 <Config+0x5a4>)
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fb ff9c 	bl	8000210 <strcmp>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d102      	bne.n	80042e4 <Config+0x344>
        {
            property = L6474_PROP_TOFF;
 80042de:	2310      	movs	r3, #16
 80042e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042e2:	e001      	b.n	80042e8 <Config+0x348>
        }
        else
        {
            property = L6474_PROP_TFAST;
 80042e4:	230e      	movs	r3, #14
 80042e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        if (pos != -1)
 80042e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ee:	d014      	beq.n	800431a <Config+0x37a>
        {
            result = L6474_SetProperty(StepperContext->h, property, atoi(argv[pos + 1]));
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681c      	ldr	r4, [r3, #0]
 80042f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042f6:	b2dd      	uxtb	r5, r3
 80042f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042fa:	3301      	adds	r3, #1
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	4413      	add	r3, r2
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f00d ff64 	bl	80121d2 <atoi>
 800430a:	4603      	mov	r3, r0
 800430c:	461a      	mov	r2, r3
 800430e:	4629      	mov	r1, r5
 8004310:	4620      	mov	r0, r4
 8004312:	f001 fcbf 	bl	8005c94 <L6474_SetProperty>
 8004316:	63f8      	str	r0, [r7, #60]	@ 0x3c
    {
 8004318:	e106      	b.n	8004528 <Config+0x588>
        }
        else
        {
            int value = 0;
 800431a:	2300      	movs	r3, #0
 800431c:	617b      	str	r3, [r7, #20]
            result = L6474_GetProperty(StepperContext->h, property, &value);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004324:	b2d1      	uxtb	r1, r2
 8004326:	f107 0214 	add.w	r2, r7, #20
 800432a:	4618      	mov	r0, r3
 800432c:	f001 fcee 	bl	8005d0c <L6474_GetProperty>
 8004330:	63f8      	str	r0, [r7, #60]	@ 0x3c
            printf("%d\r\n", value);
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	4619      	mov	r1, r3
 8004336:	4887      	ldr	r0, [pc, #540]	@ (8004554 <Config+0x5b4>)
 8004338:	f010 f85c 	bl	80143f4 <iprintf>
    {
 800433c:	e0f4      	b.n	8004528 <Config+0x588>
        }
    }
    else if (strcmp(argv[1], "mmperturn") == 0)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3304      	adds	r3, #4
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4984      	ldr	r1, [pc, #528]	@ (8004558 <Config+0x5b8>)
 8004346:	4618      	mov	r0, r3
 8004348:	f7fb ff62 	bl	8000210 <strcmp>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d165      	bne.n	800441e <Config+0x47e>
    {
        if (pos != -1)
 8004352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004358:	d037      	beq.n	80043ca <Config+0x42a>
        {
            StepperContext->mm_per_step = atof(argv[pos + 1]) / (float)pow(2, StepperContext->mm_per_step + 2);
 800435a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800435c:	3301      	adds	r3, #1
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	4413      	add	r3, r2
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f00d ff30 	bl	80121cc <atof>
 800436c:	ec55 4b10 	vmov	r4, r5, d0
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8004376:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800437a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800437e:	ee17 0a90 	vmov	r0, s15
 8004382:	f7fc f911 	bl	80005a8 <__aeabi_f2d>
 8004386:	4602      	mov	r2, r0
 8004388:	460b      	mov	r3, r1
 800438a:	ec43 2b11 	vmov	d1, r2, r3
 800438e:	ed9f 0b6a 	vldr	d0, [pc, #424]	@ 8004538 <Config+0x598>
 8004392:	f012 ff95 	bl	80172c0 <pow>
 8004396:	ec53 2b10 	vmov	r2, r3, d0
 800439a:	4610      	mov	r0, r2
 800439c:	4619      	mov	r1, r3
 800439e:	f7fc fc53 	bl	8000c48 <__aeabi_d2f>
 80043a2:	4603      	mov	r3, r0
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7fc f8ff 	bl	80005a8 <__aeabi_f2d>
 80043aa:	4602      	mov	r2, r0
 80043ac:	460b      	mov	r3, r1
 80043ae:	4620      	mov	r0, r4
 80043b0:	4629      	mov	r1, r5
 80043b2:	f7fc fa7b 	bl	80008ac <__aeabi_ddiv>
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	4610      	mov	r0, r2
 80043bc:	4619      	mov	r1, r3
 80043be:	f7fc fc43 	bl	8000c48 <__aeabi_d2f>
 80043c2:	4602      	mov	r2, r0
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80043c8:	e0ae      	b.n	8004528 <Config+0x588>
        }
        else
        {
            printf("%f\r\n", (StepperContext->mm_per_step * (float)pow(2, StepperContext->mm_per_step + 2)));
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	ed93 8a0f 	vldr	s16, [r3, #60]	@ 0x3c
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80043d6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80043da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043de:	ee17 0a90 	vmov	r0, s15
 80043e2:	f7fc f8e1 	bl	80005a8 <__aeabi_f2d>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	ec43 2b11 	vmov	d1, r2, r3
 80043ee:	ed9f 0b52 	vldr	d0, [pc, #328]	@ 8004538 <Config+0x598>
 80043f2:	f012 ff65 	bl	80172c0 <pow>
 80043f6:	ec53 2b10 	vmov	r2, r3, d0
 80043fa:	4610      	mov	r0, r2
 80043fc:	4619      	mov	r1, r3
 80043fe:	f7fc fc23 	bl	8000c48 <__aeabi_d2f>
 8004402:	ee07 0a90 	vmov	s15, r0
 8004406:	ee68 7a27 	vmul.f32	s15, s16, s15
 800440a:	ee17 0a90 	vmov	r0, s15
 800440e:	f7fc f8cb 	bl	80005a8 <__aeabi_f2d>
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	4851      	ldr	r0, [pc, #324]	@ (800455c <Config+0x5bc>)
 8004418:	f00f ffec 	bl	80143f4 <iprintf>
 800441c:	e084      	b.n	8004528 <Config+0x588>
        }
    }
    else if (strcmp(argv[1], "posmin") == 0 || strcmp(argv[1], "posmax") == 0 || strcmp(argv[1], "posref") == 0)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	3304      	adds	r3, #4
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	494e      	ldr	r1, [pc, #312]	@ (8004560 <Config+0x5c0>)
 8004426:	4618      	mov	r0, r3
 8004428:	f7fb fef2 	bl	8000210 <strcmp>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d013      	beq.n	800445a <Config+0x4ba>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	3304      	adds	r3, #4
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	494a      	ldr	r1, [pc, #296]	@ (8004564 <Config+0x5c4>)
 800443a:	4618      	mov	r0, r3
 800443c:	f7fb fee8 	bl	8000210 <strcmp>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d009      	beq.n	800445a <Config+0x4ba>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	3304      	adds	r3, #4
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4946      	ldr	r1, [pc, #280]	@ (8004568 <Config+0x5c8>)
 800444e:	4618      	mov	r0, r3
 8004450:	f7fb fede 	bl	8000210 <strcmp>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d160      	bne.n	800451c <Config+0x57c>
    {
        int *position_steps;
        if (strcmp(argv[1], "posmin") == 0)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3304      	adds	r3, #4
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	493f      	ldr	r1, [pc, #252]	@ (8004560 <Config+0x5c0>)
 8004462:	4618      	mov	r0, r3
 8004464:	f7fb fed4 	bl	8000210 <strcmp>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d103      	bne.n	8004476 <Config+0x4d6>
        {
            position_steps = &StepperContext->pos_min;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	3328      	adds	r3, #40	@ 0x28
 8004472:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004474:	e010      	b.n	8004498 <Config+0x4f8>
        }
        else if (strcmp(argv[1], "posmax") == 0)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	3304      	adds	r3, #4
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4939      	ldr	r1, [pc, #228]	@ (8004564 <Config+0x5c4>)
 800447e:	4618      	mov	r0, r3
 8004480:	f7fb fec6 	bl	8000210 <strcmp>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d103      	bne.n	8004492 <Config+0x4f2>
        {
            position_steps = &StepperContext->pos_max;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	332c      	adds	r3, #44	@ 0x2c
 800448e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004490:	e002      	b.n	8004498 <Config+0x4f8>
        }
        else
        {
            position_steps = &StepperContext->position_ref_steps;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	3330      	adds	r3, #48	@ 0x30
 8004496:	62bb      	str	r3, [r7, #40]	@ 0x28
        }

        if (pos != -1)
 8004498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800449a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449e:	d023      	beq.n	80044e8 <Config+0x548>
        {
            float input = atof(argv[pos + 1]);
 80044a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a2:	3301      	adds	r3, #1
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	4413      	add	r3, r2
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f00d fe8d 	bl	80121cc <atof>
 80044b2:	ec53 2b10 	vmov	r2, r3, d0
 80044b6:	4610      	mov	r0, r2
 80044b8:	4619      	mov	r1, r3
 80044ba:	f7fc fbc5 	bl	8000c48 <__aeabi_d2f>
 80044be:	4603      	mov	r3, r0
 80044c0:	627b      	str	r3, [r7, #36]	@ 0x24
            *position_steps = (input * StepperContext->steps_per_turn) / StepperContext->mm_per_turn;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80044c8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80044cc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80044d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044de:	ee17 2a90 	vmov	r2, s15
 80044e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e4:	601a      	str	r2, [r3, #0]
    {
 80044e6:	e01f      	b.n	8004528 <Config+0x588>
        }
        else
        {
            printf("%f\r\n", (*position_steps * StepperContext->mm_per_turn) / StepperContext->steps_per_turn);
 80044e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	ee07 3a90 	vmov	s15, r3
 80044f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80044fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004504:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004508:	ee16 0a90 	vmov	r0, s13
 800450c:	f7fc f84c 	bl	80005a8 <__aeabi_f2d>
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	4811      	ldr	r0, [pc, #68]	@ (800455c <Config+0x5bc>)
 8004516:	f00f ff6d 	bl	80143f4 <iprintf>
    {
 800451a:	e005      	b.n	8004528 <Config+0x588>
        }
    }
    else
    {
        printf("Invalid config parameter\r\n");
 800451c:	4813      	ldr	r0, [pc, #76]	@ (800456c <Config+0x5cc>)
 800451e:	f00f ffd9 	bl	80144d4 <puts>
        return -1;
 8004522:	f04f 33ff 	mov.w	r3, #4294967295
 8004526:	e000      	b.n	800452a <Config+0x58a>
    }

    return result;
 8004528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800452a:	4618      	mov	r0, r3
 800452c:	3740      	adds	r7, #64	@ 0x40
 800452e:	46bd      	mov	sp, r7
 8004530:	ecbd 8b02 	vpop	{d8}
 8004534:	bdb0      	pop	{r4, r5, r7, pc}
 8004536:	bf00      	nop
 8004538:	00000000 	.word	0x00000000
 800453c:	40000000 	.word	0x40000000
 8004540:	0801926c 	.word	0x0801926c
 8004544:	08019274 	.word	0x08019274
 8004548:	0801927c 	.word	0x0801927c
 800454c:	20000000 	.word	0x20000000
 8004550:	08019288 	.word	0x08019288
 8004554:	08018fcc 	.word	0x08018fcc
 8004558:	080192b8 	.word	0x080192b8
 800455c:	080192c4 	.word	0x080192c4
 8004560:	080192cc 	.word	0x080192cc
 8004564:	080192d4 	.word	0x080192d4
 8004568:	080192dc 	.word	0x080192dc
 800456c:	080192e4 	.word	0x080192e4

08004570 <SetPower>:

// WIP kind of very done
int SetPower(int ena)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
    if ((StepperContext.state != scs.ENA) && (StepperContext.state != scs.DIS))
 8004578:	4b17      	ldr	r3, [pc, #92]	@ (80045d8 <SetPower+0x68>)
 800457a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800457e:	461a      	mov	r2, r3
 8004580:	4b16      	ldr	r3, [pc, #88]	@ (80045dc <SetPower+0x6c>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	429a      	cmp	r2, r3
 8004586:	d00d      	beq.n	80045a4 <SetPower+0x34>
 8004588:	4b13      	ldr	r3, [pc, #76]	@ (80045d8 <SetPower+0x68>)
 800458a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800458e:	461a      	mov	r2, r3
 8004590:	4b12      	ldr	r3, [pc, #72]	@ (80045dc <SetPower+0x6c>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	429a      	cmp	r2, r3
 8004596:	d005      	beq.n	80045a4 <SetPower+0x34>
    {
        printf("Power can only be set in state ENA or DIS\r\n");
 8004598:	4811      	ldr	r0, [pc, #68]	@ (80045e0 <SetPower+0x70>)
 800459a:	f00f ff9b 	bl	80144d4 <puts>
        return -1;
 800459e:	f04f 33ff 	mov.w	r3, #4294967295
 80045a2:	e015      	b.n	80045d0 <SetPower+0x60>
    }
    if (ena != 0 && ena != 1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d008      	beq.n	80045bc <SetPower+0x4c>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d005      	beq.n	80045bc <SetPower+0x4c>
    {
        printf("Invalid argument for ena\r\n");
 80045b0:	480c      	ldr	r0, [pc, #48]	@ (80045e4 <SetPower+0x74>)
 80045b2:	f00f ff8f 	bl	80144d4 <puts>
        return -1;
 80045b6:	f04f 33ff 	mov.w	r3, #4294967295
 80045ba:	e009      	b.n	80045d0 <SetPower+0x60>
    }
    StepperContext.is_powered = ena;
 80045bc:	4a06      	ldr	r2, [pc, #24]	@ (80045d8 <SetPower+0x68>)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6053      	str	r3, [r2, #4]
    return L6474_SetPowerOutputs(StepperContext.h, ena);
 80045c2:	4b05      	ldr	r3, [pc, #20]	@ (80045d8 <SetPower+0x68>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f001 faa1 	bl	8005b10 <L6474_SetPowerOutputs>
 80045ce:	4603      	mov	r3, r0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3708      	adds	r7, #8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	200002b0 	.word	0x200002b0
 80045dc:	20000000 	.word	0x20000000
 80045e0:	08019300 	.word	0x08019300
 80045e4:	0801932c 	.word	0x0801932c

080045e8 <SetSpeed>:
// WIP kind of done
void SetSpeed(StepperContext_t *StepperContext, int steps_per_sec)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
    // Get the system clock frequency (e.g., 72 MHz)
    int clk = HAL_RCC_GetHCLKFreq();
 80045f2:	f004 fbbf 	bl	8008d74 <HAL_RCC_GetHCLKFreq>
 80045f6:	4603      	mov	r3, r0
 80045f8:	613b      	str	r3, [r7, #16]

    // Calculate the timer period for the desired step frequency
    // Multiply by 2 because the timer toggles once for the rising edge and once for the falling edge
    int timer_period = clk / (steps_per_sec * 2);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	fb92 f3f3 	sdiv	r3, r2, r3
 8004604:	60fb      	str	r3, [r7, #12]

    // Initialize the prescaler to 0
    int i = 0;
 8004606:	2300      	movs	r3, #0
 8004608:	617b      	str	r3, [r7, #20]

    // make upscaler bigger until reload value is <= 16 bit
    while ((timer_period / (i + 1)) > 65535)
 800460a:	e002      	b.n	8004612 <SetSpeed+0x2a>
        i++;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	3301      	adds	r3, #1
 8004610:	617b      	str	r3, [r7, #20]
    while ((timer_period / (i + 1)) > 65535)
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	3301      	adds	r3, #1
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	fb92 f3f3 	sdiv	r3, r2, r3
 800461c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004620:	daf4      	bge.n	800460c <SetSpeed+0x24>

    // Set the prescaler value to slow down the timer's counting rate
    __HAL_TIM_SET_PRESCALER(StepperContext->htim4, i);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	629a      	str	r2, [r3, #40]	@ 0x28

    // Set the auto-reload value to define the timer period
    // Subtract 1 because the timer counts from 0 to ARR
    __HAL_TIM_SET_AUTORELOAD(StepperContext->htim4, (timer_period / (i + 1)) - 1);
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	3301      	adds	r3, #1
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	fb92 f3f3 	sdiv	r3, r2, r3
 8004636:	1e5a      	subs	r2, r3, #1
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	3301      	adds	r3, #1
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	fb92 f3f3 	sdiv	r3, r2, r3
 800464a:	1e5a      	subs	r2, r3, #1
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	60da      	str	r2, [r3, #12]

    // ARR = Auto-reload register, we set it to 50% duty cycle
    StepperContext->htim4->Instance->CCR4 = StepperContext->htim4->Instance->ARR / 2;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	0852      	lsrs	r2, r2, #1
 8004662:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004664:	bf00      	nop
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <TimerStart>:
// WIP kind of done
void TimerStart(unsigned int pulse_count)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
    // Limit the number of pulses to a maximum of 16 bit
    int active_pulses = (pulse_count >= 65535) ? 65535 : pulse_count;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800467a:	4293      	cmp	r3, r2
 800467c:	bf28      	it	cs
 800467e:	4613      	movcs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]
    StepperContext.remaining_pulses = pulse_count - active_pulses;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	461a      	mov	r2, r3
 800468a:	4b1a      	ldr	r3, [pc, #104]	@ (80046f4 <TimerStart+0x88>)
 800468c:	619a      	str	r2, [r3, #24]
    if (active_pulses > 1)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2b01      	cmp	r3, #1
 8004692:	dd25      	ble.n	80046e0 <TimerStart+0x74>
    {
        // set timer params and start it
        HAL_TIM_OnePulse_Stop_IT(StepperContext.htim1, TIM_CHANNEL_1);
 8004694:	4b17      	ldr	r3, [pc, #92]	@ (80046f4 <TimerStart+0x88>)
 8004696:	69db      	ldr	r3, [r3, #28]
 8004698:	2100      	movs	r1, #0
 800469a:	4618      	mov	r0, r3
 800469c:	f007 f942 	bl	800b924 <HAL_TIM_OnePulse_Stop_IT>
        __HAL_TIM_SET_AUTORELOAD(StepperContext.htim1, active_pulses);
 80046a0:	4b14      	ldr	r3, [pc, #80]	@ (80046f4 <TimerStart+0x88>)
 80046a2:	69db      	ldr	r3, [r3, #28]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80046aa:	4b12      	ldr	r3, [pc, #72]	@ (80046f4 <TimerStart+0x88>)
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	60da      	str	r2, [r3, #12]
        HAL_TIM_GenerateEvent(StepperContext.htim1, TIM_EVENTSOURCE_UPDATE);
 80046b2:	4b10      	ldr	r3, [pc, #64]	@ (80046f4 <TimerStart+0x88>)
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	2101      	movs	r1, #1
 80046b8:	4618      	mov	r0, r3
 80046ba:	f007 fedf 	bl	800c47c <HAL_TIM_GenerateEvent>
        HAL_TIM_OnePulse_Start_IT(StepperContext.htim1, TIM_CHANNEL_1);
 80046be:	4b0d      	ldr	r3, [pc, #52]	@ (80046f4 <TimerStart+0x88>)
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	2100      	movs	r1, #0
 80046c4:	4618      	mov	r0, r3
 80046c6:	f007 f8bb 	bl	800b840 <HAL_TIM_OnePulse_Start_IT>
        __HAL_TIM_ENABLE(StepperContext.htim1);
 80046ca:	4b0a      	ldr	r3, [pc, #40]	@ (80046f4 <TimerStart+0x88>)
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	4b08      	ldr	r3, [pc, #32]	@ (80046f4 <TimerStart+0x88>)
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f042 0201 	orr.w	r2, r2, #1
 80046dc:	601a      	str	r2, [r3, #0]
    else
    {
        // signal completion
        StepperContext.done_callback(StepperContext.h);
    }
}
 80046de:	e005      	b.n	80046ec <TimerStart+0x80>
        StepperContext.done_callback(StepperContext.h);
 80046e0:	4b04      	ldr	r3, [pc, #16]	@ (80046f4 <TimerStart+0x88>)
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	4a03      	ldr	r2, [pc, #12]	@ (80046f4 <TimerStart+0x88>)
 80046e6:	6812      	ldr	r2, [r2, #0]
 80046e8:	4610      	mov	r0, r2
 80046ea:	4798      	blx	r3
}
 80046ec:	bf00      	nop
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	200002b0 	.word	0x200002b0

080046f8 <HAL_TIM_PWM_PulseFinishedCallback>:
// WIP kind of done
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
    // check if pulse is finished
    if ((StepperContext.done_callback != 0) && ((htim->Instance->SR & (1 << 2)) == 0))
 8004700:	4b10      	ldr	r3, [pc, #64]	@ (8004744 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d019      	beq.n	800473c <HAL_TIM_PWM_PulseFinishedCallback+0x44>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	f003 0304 	and.w	r3, r3, #4
 8004712:	2b00      	cmp	r3, #0
 8004714:	d112      	bne.n	800473c <HAL_TIM_PWM_PulseFinishedCallback+0x44>
    {
        // process remaining pulses
        if (StepperContext.remaining_pulses > 0)
 8004716:	4b0b      	ldr	r3, [pc, #44]	@ (8004744 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	2b00      	cmp	r3, #0
 800471c:	dd05      	ble.n	800472a <HAL_TIM_PWM_PulseFinishedCallback+0x32>
        {
            TimerStart(StepperContext.remaining_pulses);
 800471e:	4b09      	ldr	r3, [pc, #36]	@ (8004744 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff ffa2 	bl	800466c <TimerStart>
            // finished
            StepperContext.done_callback(StepperContext.h);
            StepperContext.is_running = 0;
        }
    }
}
 8004728:	e008      	b.n	800473c <HAL_TIM_PWM_PulseFinishedCallback+0x44>
            StepperContext.done_callback(StepperContext.h);
 800472a:	4b06      	ldr	r3, [pc, #24]	@ (8004744 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	4a05      	ldr	r2, [pc, #20]	@ (8004744 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8004730:	6812      	ldr	r2, [r2, #0]
 8004732:	4610      	mov	r0, r2
 8004734:	4798      	blx	r3
            StepperContext.is_running = 0;
 8004736:	4b03      	ldr	r3, [pc, #12]	@ (8004744 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8004738:	2200      	movs	r2, #0
 800473a:	60da      	str	r2, [r3, #12]
}
 800473c:	bf00      	nop
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	200002b0 	.word	0x200002b0

08004748 <StepperHandler>:

static int StepperHandler(int argc, char **argv, void *ctx)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
    StepperContext_t *StepperContext = (StepperContext_t *)ctx;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	613b      	str	r3, [r7, #16]
    int result = 0;
 8004758:	2300      	movs	r3, #0
 800475a:	617b      	str	r3, [r7, #20]

    if (argc == 0)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d105      	bne.n	800476e <StepperHandler+0x26>
    {
        printf("Invalid number of arguments\r\n");
 8004762:	4843      	ldr	r0, [pc, #268]	@ (8004870 <StepperHandler+0x128>)
 8004764:	f00f feb6 	bl	80144d4 <puts>
        return -1;
 8004768:	f04f 33ff 	mov.w	r3, #4294967295
 800476c:	e07c      	b.n	8004868 <StepperHandler+0x120>
    }
    if (strcmp(argv[0], "move") == 0)
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4940      	ldr	r1, [pc, #256]	@ (8004874 <StepperHandler+0x12c>)
 8004774:	4618      	mov	r0, r3
 8004776:	f7fb fd4b 	bl	8000210 <strcmp>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d106      	bne.n	800478e <StepperHandler+0x46>
    {
        result = Move(StepperContext, argc, argv);
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	68f9      	ldr	r1, [r7, #12]
 8004784:	6938      	ldr	r0, [r7, #16]
 8004786:	f7ff fa57 	bl	8003c38 <Move>
 800478a:	6178      	str	r0, [r7, #20]
 800478c:	e061      	b.n	8004852 <StepperHandler+0x10a>
    }
    else if (strcmp(argv[0], "reset") == 0)
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4939      	ldr	r1, [pc, #228]	@ (8004878 <StepperHandler+0x130>)
 8004794:	4618      	mov	r0, r3
 8004796:	f7fb fd3b 	bl	8000210 <strcmp>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d104      	bne.n	80047aa <StepperHandler+0x62>
    {
        result = Reset(StepperContext);
 80047a0:	6938      	ldr	r0, [r7, #16]
 80047a2:	f7fe ff9f 	bl	80036e4 <Reset>
 80047a6:	6178      	str	r0, [r7, #20]
 80047a8:	e053      	b.n	8004852 <StepperHandler+0x10a>
    }
    else if (strcmp(argv[0], "config") == 0)
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4933      	ldr	r1, [pc, #204]	@ (800487c <StepperHandler+0x134>)
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7fb fd2d 	bl	8000210 <strcmp>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d106      	bne.n	80047ca <StepperHandler+0x82>
    {
        result = Config(StepperContext, argc, argv);
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	68f9      	ldr	r1, [r7, #12]
 80047c0:	6938      	ldr	r0, [r7, #16]
 80047c2:	f7ff fbed 	bl	8003fa0 <Config>
 80047c6:	6178      	str	r0, [r7, #20]
 80047c8:	e043      	b.n	8004852 <StepperHandler+0x10a>
    }
    else if (strcmp(argv[0], "reference") == 0)
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	492c      	ldr	r1, [pc, #176]	@ (8004880 <StepperHandler+0x138>)
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7fb fd1d 	bl	8000210 <strcmp>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d106      	bne.n	80047ea <StepperHandler+0xa2>
    {
        result = Reference(StepperContext, argc, argv);
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	68f9      	ldr	r1, [r7, #12]
 80047e0:	6938      	ldr	r0, [r7, #16]
 80047e2:	f7fe fffb 	bl	80037dc <Reference>
 80047e6:	6178      	str	r0, [r7, #20]
 80047e8:	e033      	b.n	8004852 <StepperHandler+0x10a>
    }
    else if (strcmp(argv[0], "cancel") == 0)
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4925      	ldr	r1, [pc, #148]	@ (8004884 <StepperHandler+0x13c>)
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7fb fd0d 	bl	8000210 <strcmp>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d104      	bne.n	8004806 <StepperHandler+0xbe>
    {
        result = StepTimerCancelAsync(NULL);
 80047fc:	2000      	movs	r0, #0
 80047fe:	f7fe ff47 	bl	8003690 <StepTimerCancelAsync>
 8004802:	6178      	str	r0, [r7, #20]
 8004804:	e025      	b.n	8004852 <StepperHandler+0x10a>
    }
    else if (strcmp(argv[0], "position") == 0)
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	491f      	ldr	r1, [pc, #124]	@ (8004888 <StepperHandler+0x140>)
 800480c:	4618      	mov	r0, r3
 800480e:	f7fb fcff 	bl	8000210 <strcmp>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d106      	bne.n	8004826 <StepperHandler+0xde>
    {
        result = Position(StepperContext, argc, argv);
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	68f9      	ldr	r1, [r7, #12]
 800481c:	6938      	ldr	r0, [r7, #16]
 800481e:	f7ff f961 	bl	8003ae4 <Position>
 8004822:	6178      	str	r0, [r7, #20]
 8004824:	e015      	b.n	8004852 <StepperHandler+0x10a>
    }
    else if (strcmp(argv[0], "status") == 0)
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4918      	ldr	r1, [pc, #96]	@ (800488c <StepperHandler+0x144>)
 800482c:	4618      	mov	r0, r3
 800482e:	f7fb fcef 	bl	8000210 <strcmp>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d106      	bne.n	8004846 <StepperHandler+0xfe>
    {
        result = Status(StepperContext, argc, argv);
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	68f9      	ldr	r1, [r7, #12]
 800483c:	6938      	ldr	r0, [r7, #16]
 800483e:	f7ff f97d 	bl	8003b3c <Status>
 8004842:	6178      	str	r0, [r7, #20]
 8004844:	e005      	b.n	8004852 <StepperHandler+0x10a>
    }
    else
    {
        printf("Invalid command\r\n");
 8004846:	4812      	ldr	r0, [pc, #72]	@ (8004890 <StepperHandler+0x148>)
 8004848:	f00f fe44 	bl	80144d4 <puts>
        return -1;
 800484c:	f04f 33ff 	mov.w	r3, #4294967295
 8004850:	e00a      	b.n	8004868 <StepperHandler+0x120>
    }
    if (result == 0)
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d103      	bne.n	8004860 <StepperHandler+0x118>
    {
        printf("OK\r\n");
 8004858:	480e      	ldr	r0, [pc, #56]	@ (8004894 <StepperHandler+0x14c>)
 800485a:	f00f fe3b 	bl	80144d4 <puts>
 800485e:	e002      	b.n	8004866 <StepperHandler+0x11e>
    }
    else
    {
        printf("FAIL\r\n");
 8004860:	480d      	ldr	r0, [pc, #52]	@ (8004898 <StepperHandler+0x150>)
 8004862:	f00f fe37 	bl	80144d4 <puts>
    }
    return result;
 8004866:	697b      	ldr	r3, [r7, #20]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	080191b0 	.word	0x080191b0
 8004874:	08019348 	.word	0x08019348
 8004878:	08019350 	.word	0x08019350
 800487c:	08019358 	.word	0x08019358
 8004880:	08019360 	.word	0x08019360
 8004884:	0801936c 	.word	0x0801936c
 8004888:	08019374 	.word	0x08019374
 800488c:	08019380 	.word	0x08019380
 8004890:	08019388 	.word	0x08019388
 8004894:	0801939c 	.word	0x0801939c
 8004898:	080193a0 	.word	0x080193a0

0800489c <InitStepper>:

void InitStepper(ConsoleHandle_t hconsole, SPI_HandleTypeDef *hspi1,
                 TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim4)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af02      	add	r7, sp, #8
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
 80048a8:	603b      	str	r3, [r7, #0]

    HAL_GPIO_WritePin(STEP_SPI_CS_GPIO_Port, STEP_SPI_CS_Pin, 1);
 80048aa:	2201      	movs	r2, #1
 80048ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80048b0:	4830      	ldr	r0, [pc, #192]	@ (8004974 <InitStepper+0xd8>)
 80048b2:	f003 fc6b 	bl	800818c <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(htim4, TIM_CHANNEL_4);
 80048b6:	210c      	movs	r1, #12
 80048b8:	6838      	ldr	r0, [r7, #0]
 80048ba:	f006 fcc9 	bl	800b250 <HAL_TIM_PWM_Start>

    p.malloc = StepLibraryMalloc;
 80048be:	4b2e      	ldr	r3, [pc, #184]	@ (8004978 <InitStepper+0xdc>)
 80048c0:	4a2e      	ldr	r2, [pc, #184]	@ (800497c <InitStepper+0xe0>)
 80048c2:	601a      	str	r2, [r3, #0]
    p.free = StepLibraryFree;
 80048c4:	4b2c      	ldr	r3, [pc, #176]	@ (8004978 <InitStepper+0xdc>)
 80048c6:	4a2e      	ldr	r2, [pc, #184]	@ (8004980 <InitStepper+0xe4>)
 80048c8:	605a      	str	r2, [r3, #4]
    p.transfer = StepDriverSpiTransfer;
 80048ca:	4b2b      	ldr	r3, [pc, #172]	@ (8004978 <InitStepper+0xdc>)
 80048cc:	4a2d      	ldr	r2, [pc, #180]	@ (8004984 <InitStepper+0xe8>)
 80048ce:	609a      	str	r2, [r3, #8]
    p.reset = StepDriverReset;
 80048d0:	4b29      	ldr	r3, [pc, #164]	@ (8004978 <InitStepper+0xdc>)
 80048d2:	4a2d      	ldr	r2, [pc, #180]	@ (8004988 <InitStepper+0xec>)
 80048d4:	60da      	str	r2, [r3, #12]
    p.sleep = StepLibraryDelay;
 80048d6:	4b28      	ldr	r3, [pc, #160]	@ (8004978 <InitStepper+0xdc>)
 80048d8:	4a2c      	ldr	r2, [pc, #176]	@ (800498c <InitStepper+0xf0>)
 80048da:	611a      	str	r2, [r3, #16]
    // p.step = Step;
    p.stepAsync = StepTimerAsync;
 80048dc:	4b26      	ldr	r3, [pc, #152]	@ (8004978 <InitStepper+0xdc>)
 80048de:	4a2c      	ldr	r2, [pc, #176]	@ (8004990 <InitStepper+0xf4>)
 80048e0:	615a      	str	r2, [r3, #20]
    p.cancelStep = StepTimerCancelAsync;
 80048e2:	4b25      	ldr	r3, [pc, #148]	@ (8004978 <InitStepper+0xdc>)
 80048e4:	4a2b      	ldr	r2, [pc, #172]	@ (8004994 <InitStepper+0xf8>)
 80048e6:	619a      	str	r2, [r3, #24]

    StepperContext.h = L6474_CreateInstance(&p, hspi1, NULL, htim1);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	68b9      	ldr	r1, [r7, #8]
 80048ee:	4822      	ldr	r0, [pc, #136]	@ (8004978 <InitStepper+0xdc>)
 80048f0:	f000 fea5 	bl	800563e <L6474_CreateInstance>
 80048f4:	4603      	mov	r3, r0
 80048f6:	4a28      	ldr	r2, [pc, #160]	@ (8004998 <InitStepper+0xfc>)
 80048f8:	6013      	str	r3, [r2, #0]
    StepperContext.htim1 = htim1;
 80048fa:	4a27      	ldr	r2, [pc, #156]	@ (8004998 <InitStepper+0xfc>)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	61d3      	str	r3, [r2, #28]
    StepperContext.htim4 = htim4;
 8004900:	4a25      	ldr	r2, [pc, #148]	@ (8004998 <InitStepper+0xfc>)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	6213      	str	r3, [r2, #32]
    StepperContext.state = scs.INIT;
 8004906:	4b25      	ldr	r3, [pc, #148]	@ (800499c <InitStepper+0x100>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	b2da      	uxtb	r2, r3
 800490c:	4b22      	ldr	r3, [pc, #136]	@ (8004998 <InitStepper+0xfc>)
 800490e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    StepperContext.error_code = 0;
 8004912:	4b21      	ldr	r3, [pc, #132]	@ (8004998 <InitStepper+0xfc>)
 8004914:	2200      	movs	r2, #0
 8004916:	611a      	str	r2, [r3, #16]

    StepperContext.step_mode = smMICRO16;
 8004918:	4b1f      	ldr	r3, [pc, #124]	@ (8004998 <InitStepper+0xfc>)
 800491a:	2204      	movs	r2, #4
 800491c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    StepperContext.mm_per_turn = 4.0f;
 8004920:	4b1d      	ldr	r3, [pc, #116]	@ (8004998 <InitStepper+0xfc>)
 8004922:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8004926:	635a      	str	r2, [r3, #52]	@ 0x34
    StepperContext.steps_per_turn = (float)(1 << (StepperContext.step_mode + 2));
 8004928:	4b1b      	ldr	r3, [pc, #108]	@ (8004998 <InitStepper+0xfc>)
 800492a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800492e:	3302      	adds	r3, #2
 8004930:	2201      	movs	r2, #1
 8004932:	fa02 f303 	lsl.w	r3, r2, r3
 8004936:	ee07 3a90 	vmov	s15, r3
 800493a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800493e:	4b16      	ldr	r3, [pc, #88]	@ (8004998 <InitStepper+0xfc>)
 8004940:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    StepperContext.mm_per_step = StepperContext.mm_per_turn / StepperContext.steps_per_turn;
 8004944:	4b14      	ldr	r3, [pc, #80]	@ (8004998 <InitStepper+0xfc>)
 8004946:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 800494a:	4b13      	ldr	r3, [pc, #76]	@ (8004998 <InitStepper+0xfc>)
 800494c:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8004950:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004954:	4b10      	ldr	r3, [pc, #64]	@ (8004998 <InitStepper+0xfc>)
 8004956:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

    CONSOLE_RegisterCommand(hconsole, "stepper", "Stepper main Command", StepperHandler, &StepperContext);
 800495a:	4b0f      	ldr	r3, [pc, #60]	@ (8004998 <InitStepper+0xfc>)
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	4b10      	ldr	r3, [pc, #64]	@ (80049a0 <InitStepper+0x104>)
 8004960:	4a10      	ldr	r2, [pc, #64]	@ (80049a4 <InitStepper+0x108>)
 8004962:	4911      	ldr	r1, [pc, #68]	@ (80049a8 <InitStepper+0x10c>)
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f7fe fad5 	bl	8002f14 <CONSOLE_RegisterCommand>
}
 800496a:	bf00      	nop
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	40020c00 	.word	0x40020c00
 8004978:	20000294 	.word	0x20000294
 800497c:	080034d1 	.word	0x080034d1
 8004980:	080034e9 	.word	0x080034e9
 8004984:	08003501 	.word	0x08003501
 8004988:	08003585 	.word	0x08003585
 800498c:	080035b5 	.word	0x080035b5
 8004990:	08003645 	.word	0x08003645
 8004994:	08003691 	.word	0x08003691
 8004998:	200002b0 	.word	0x200002b0
 800499c:	20000000 	.word	0x20000000
 80049a0:	08004749 	.word	0x08004749
 80049a4:	080193a8 	.word	0x080193a8
 80049a8:	080193c0 	.word	0x080193c0

080049ac <SpindleFunction>:
};

// --------------------------------------------------------------------------------------------------------------------
static void SpindleFunction( void * arg )
// --------------------------------------------------------------------------------------------------------------------
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b090      	sub	sp, #64	@ 0x40
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
	CtrlCommand_t cmd;
	StepCommandResponse_t asyncResponse;
	SpindleHandle_t h = (SpindleHandle_t)arg;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	633b      	str	r3, [r7, #48]	@ 0x30
	unsigned int running = 0;
 80049b8:	2300      	movs	r3, #0
 80049ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
	unsigned int startupBoost = 0;
 80049bc:	2300      	movs	r3, #0
 80049be:	63bb      	str	r3, [r7, #56]	@ 0x38

	h->physical.enaPWM(h, h->physical.context, 0);
 80049c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049c6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80049c8:	2200      	movs	r2, #0
 80049ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049cc:	4798      	blx	r3
	h->physical.setDutyCycle(h, h->physical.context, 0.0f );
 80049ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049d4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80049d6:	ed9f 0aa8 	vldr	s0, [pc, #672]	@ 8004c78 <SpindleFunction+0x2cc>
 80049da:	4611      	mov	r1, r2
 80049dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049de:	4798      	blx	r3
	h->currentSpeed = 0;
 80049e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e2:	f04f 0200 	mov.w	r2, #0
 80049e6:	631a      	str	r2, [r3, #48]	@ 0x30

	// now here comes the command processor part
	while( !h->cancel )
 80049e8:	e162      	b.n	8004cb0 <SpindleFunction+0x304>
	{
		// wait for next command
		if ( xQueueReceive( h->cmdQueue, &cmd, 100) == pdPASS )
 80049ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f107 011c 	add.w	r1, r7, #28
 80049f2:	2264      	movs	r2, #100	@ 0x64
 80049f4:	4618      	mov	r0, r3
 80049f6:	f00a fd91 	bl	800f51c <xQueueReceive>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	f040 813d 	bne.w	8004c7c <SpindleFunction+0x2d0>
		{
			if ( cmd.response == NULL || cmd.request.syncEvent == NULL )
 8004a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d002      	beq.n	8004a0e <SpindleFunction+0x62>
 8004a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d102      	bne.n	8004a14 <SpindleFunction+0x68>
			{
				cmd.response = &asyncResponse;
 8004a0e:	f107 030c 	add.w	r3, r7, #12
 8004a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
			}
			memset(cmd.response, 0, sizeof(StepCommandResponse_t));
 8004a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a16:	2210      	movs	r2, #16
 8004a18:	2100      	movs	r1, #0
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f00f ff40 	bl	80148a0 <memset>
			cmd.response->code = -1;
 8004a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a22:	f04f 32ff 	mov.w	r2, #4294967295
 8004a26:	601a      	str	r2, [r3, #0]
			cmd.response->requestID = cmd.head.requestID;
 8004a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a2a:	69fa      	ldr	r2, [r7, #28]
 8004a2c:	605a      	str	r2, [r3, #4]


			switch ( cmd.head.type )
 8004a2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	f200 8115 	bhi.w	8004c62 <SpindleFunction+0x2b6>
 8004a38:	a201      	add	r2, pc, #4	@ (adr r2, 8004a40 <SpindleFunction+0x94>)
 8004a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3e:	bf00      	nop
 8004a40:	08004a55 	.word	0x08004a55
 8004a44:	08004a5d 	.word	0x08004a5d
 8004a48:	08004c15 	.word	0x08004c15
 8004a4c:	08004c63 	.word	0x08004c63
 8004a50:	08004c4d 	.word	0x08004c4d
			{
			case cctNONE:
				cmd.response->code = 0;
 8004a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a56:	2200      	movs	r2, #0
 8004a58:	601a      	str	r2, [r3, #0]
				break;
 8004a5a:	e103      	b.n	8004c64 <SpindleFunction+0x2b8>
			case cctSTART:
				cmd.response->code = 0;
 8004a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]
				if ( cmd.request.args.asStart.speed < h->physical.minRPM ) cmd.request.args.asStart.speed = h->physical.minRPM;
 8004a62:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a68:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004a6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a74:	d502      	bpl.n	8004a7c <SpindleFunction+0xd0>
 8004a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7a:	627b      	str	r3, [r7, #36]	@ 0x24
				if ( cmd.request.args.asStart.speed > h->physical.maxRPM ) cmd.request.args.asStart.speed = h->physical.maxRPM;
 8004a7c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a82:	edd3 7a08 	vldr	s15, [r3, #32]
 8004a86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a8e:	dd02      	ble.n	8004a96 <SpindleFunction+0xea>
 8004a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	627b      	str	r3, [r7, #36]	@ 0x24

				if (  cmd.request.args.asStart.speed > 0.0f && cmd.request.args.asStart.speed <  h->physical.absMinRPM ) cmd.request.args.asStart.speed =  h->physical.absMinRPM;
 8004a96:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004a9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aa2:	dd0c      	ble.n	8004abe <SpindleFunction+0x112>
 8004aa4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aaa:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004aae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab6:	d502      	bpl.n	8004abe <SpindleFunction+0x112>
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abc:	627b      	str	r3, [r7, #36]	@ 0x24
				if (  cmd.request.args.asStart.speed < 0.0f && cmd.request.args.asStart.speed > -h->physical.absMinRPM ) cmd.request.args.asStart.speed = -h->physical.absMinRPM;
 8004abe:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004ac2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aca:	d512      	bpl.n	8004af2 <SpindleFunction+0x146>
 8004acc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004ad6:	eef1 7a67 	vneg.f32	s15, s15
 8004ada:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae2:	dd06      	ble.n	8004af2 <SpindleFunction+0x146>
 8004ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004aea:	eef1 7a67 	vneg.f32	s15, s15
 8004aee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

				int directionChange = 0;
 8004af2:	2300      	movs	r3, #0
 8004af4:	637b      	str	r3, [r7, #52]	@ 0x34
				if ((h->currentSpeed < 0.0f && cmd.request.args.asStart.speed > 0.0f) ||
 8004af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004afc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b04:	d506      	bpl.n	8004b14 <SpindleFunction+0x168>
 8004b06:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004b0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b12:	dc0e      	bgt.n	8004b32 <SpindleFunction+0x186>
					(h->currentSpeed > 0.0f && cmd.request.args.asStart.speed < 0.0f))
 8004b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b16:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
				if ((h->currentSpeed < 0.0f && cmd.request.args.asStart.speed > 0.0f) ||
 8004b1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b22:	dd08      	ble.n	8004b36 <SpindleFunction+0x18a>
					(h->currentSpeed > 0.0f && cmd.request.args.asStart.speed < 0.0f))
 8004b24:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004b28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b30:	d501      	bpl.n	8004b36 <SpindleFunction+0x18a>
					directionChange = 1;
 8004b32:	2301      	movs	r3, #1
 8004b34:	637b      	str	r3, [r7, #52]	@ 0x34
				h->currentSpeed = cmd.request.args.asStart.speed;
 8004b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3a:	631a      	str	r2, [r3, #48]	@ 0x30


				h->physical.setDirection(h, h->physical.context, h->currentSpeed < 0.0f );
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b42:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004b44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b46:	edd2 7a0c 	vldr	s15, [r2, #48]	@ 0x30
 8004b4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b52:	bf4c      	ite	mi
 8004b54:	2201      	movmi	r2, #1
 8004b56:	2200      	movpl	r2, #0
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b5c:	4798      	blx	r3
				if ( running == 1 && directionChange == 0 )
 8004b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d117      	bne.n	8004b94 <SpindleFunction+0x1e8>
 8004b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d114      	bne.n	8004b94 <SpindleFunction+0x1e8>
				{
					h->physical.setDutyCycle(h, h->physical.context, ( fabsf(h->currentSpeed) / h->physical.maxRPM) );
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b70:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004b72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b74:	edd2 7a0c 	vldr	s15, [r2, #48]	@ 0x30
 8004b78:	eeb0 7ae7 	vabs.f32	s14, s15
 8004b7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b7e:	edd2 7a08 	vldr	s15, [r2, #32]
 8004b82:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004b86:	eeb0 0a66 	vmov.f32	s0, s13
 8004b8a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b8c:	4798      	blx	r3
					startupBoost = 0;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b92:	e020      	b.n	8004bd6 <SpindleFunction+0x22a>
				}
				else if ( ( running == 0 || directionChange == 1 ) && fabsf(cmd.request.args.asStart.speed) <= (0.25f * h->physical.maxRPM) )
 8004b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d002      	beq.n	8004ba0 <SpindleFunction+0x1f4>
 8004b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d11a      	bne.n	8004bd6 <SpindleFunction+0x22a>
 8004ba0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004ba4:	eeb0 7ae7 	vabs.f32	s14, s15
 8004ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004baa:	edd3 7a08 	vldr	s15, [r3, #32]
 8004bae:	eef5 6a00 	vmov.f32	s13, #80	@ 0x3e800000  0.250
 8004bb2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004bb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bbe:	d80a      	bhi.n	8004bd6 <SpindleFunction+0x22a>
				{
					h->physical.setDutyCycle(h, h->physical.context, 0.5f );
 8004bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bc6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004bc8:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8004bcc:	4611      	mov	r1, r2
 8004bce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004bd0:	4798      	blx	r3
					startupBoost = 1;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
				}
				if ( startupBoost == 0 )
 8004bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d111      	bne.n	8004c00 <SpindleFunction+0x254>
				{
					h->physical.setDutyCycle(h, h->physical.context, ( fabsf(h->currentSpeed) / h->physical.maxRPM ) );
 8004bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004be2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004be4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004be6:	edd2 7a0c 	vldr	s15, [r2, #48]	@ 0x30
 8004bea:	eeb0 7ae7 	vabs.f32	s14, s15
 8004bee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bf0:	edd2 7a08 	vldr	s15, [r2, #32]
 8004bf4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004bf8:	eeb0 0a66 	vmov.f32	s0, s13
 8004bfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004bfe:	4798      	blx	r3
				}

				h->physical.enaPWM(h, h->physical.context, 1);
 8004c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c06:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004c08:	2201      	movs	r2, #1
 8004c0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c0c:	4798      	blx	r3
				running = 1;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
				break;
 8004c12:	e027      	b.n	8004c64 <SpindleFunction+0x2b8>
			case cctSTOP:
				cmd.response->code = 0;
 8004c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c16:	2200      	movs	r2, #0
 8004c18:	601a      	str	r2, [r3, #0]
				h->currentSpeed = 0;
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	631a      	str	r2, [r3, #48]	@ 0x30
				startupBoost = 0;
 8004c22:	2300      	movs	r3, #0
 8004c24:	63bb      	str	r3, [r7, #56]	@ 0x38
				running = 0;
 8004c26:	2300      	movs	r3, #0
 8004c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
				h->physical.setDutyCycle(h, h->physical.context, 0.0f );
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c30:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004c32:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8004c78 <SpindleFunction+0x2cc>
 8004c36:	4611      	mov	r1, r2
 8004c38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c3a:	4798      	blx	r3
				h->physical.enaPWM(h, h->physical.context, 0);
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c42:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004c44:	2200      	movs	r2, #0
 8004c46:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c48:	4798      	blx	r3
				break;
 8004c4a:	e00b      	b.n	8004c64 <SpindleFunction+0x2b8>
			case cctSTATUS:
				cmd.response->code = 0;
 8004c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c4e:	2200      	movs	r2, #0
 8004c50:	601a      	str	r2, [r3, #0]
				cmd.response->args.asStatus.running = running;
 8004c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c54:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004c56:	60da      	str	r2, [r3, #12]
				cmd.response->args.asStatus.speed = h->currentSpeed;
 8004c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c5c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004c5e:	609a      	str	r2, [r3, #8]
				break;
 8004c60:	e000      	b.n	8004c64 <SpindleFunction+0x2b8>
			default:
				break;
 8004c62:	bf00      	nop
			}

			// after processing the command we have to release the caller to keep
			// synchronous calling mechanism. In case there is no sync object, it was##
			// called asynchronously
			if ( cmd.request.syncEvent != NULL )
 8004c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d022      	beq.n	8004cb0 <SpindleFunction+0x304>
			{
				xSemaphoreGive(cmd.request.syncEvent);
 8004c6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2100      	movs	r1, #0
 8004c72:	f00a fb3b 	bl	800f2ec <xQueueGenericSend>
 8004c76:	e01b      	b.n	8004cb0 <SpindleFunction+0x304>
 8004c78:	00000000 	.word	0x00000000
		}
		else
		{
			// here we have to do some additional steps to regulate correct rpm in case
			// the low speed boost has been performed
			if ( startupBoost == 1 && running == 1 )
 8004c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d116      	bne.n	8004cb0 <SpindleFunction+0x304>
 8004c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d113      	bne.n	8004cb0 <SpindleFunction+0x304>
			{
				startupBoost = 0;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
				h->physical.setDutyCycle(h, h->physical.context, ( fabsf(h->currentSpeed) / h->physical.maxRPM) );
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c92:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004c94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c96:	edd2 7a0c 	vldr	s15, [r2, #48]	@ 0x30
 8004c9a:	eeb0 7ae7 	vabs.f32	s14, s15
 8004c9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ca0:	edd2 7a08 	vldr	s15, [r2, #32]
 8004ca4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004ca8:	eeb0 0a66 	vmov.f32	s0, s13
 8004cac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004cae:	4798      	blx	r3
	while( !h->cancel )
 8004cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f43f ae98 	beq.w	80049ea <SpindleFunction+0x3e>
			}
		}
	}
}
 8004cba:	bf00      	nop
 8004cbc:	bf00      	nop
 8004cbe:	3740      	adds	r7, #64	@ 0x40
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <GetCommandEvent>:

// --------------------------------------------------------------------------------------------------------------------
static SemaphoreHandle_t GetCommandEvent( SpindleHandle_t h )
// --------------------------------------------------------------------------------------------------------------------
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
	xSemaphoreTakeRecursive( h->syncEventPool.lockGuard, -1 );
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f00a facb 	bl	800f270 <xQueueTakeMutexRecursive>

	stepSyncEventElement_t* el = LIST_FIRST(&h->syncEventPool.pool);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cde:	60fb      	str	r3, [r7, #12]
	while ( el != NULL )
 8004ce0:	e017      	b.n	8004d12 <GetCommandEvent+0x4e>
	{
		if ( el->content.allocated == 0 )
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d110      	bne.n	8004d0c <GetCommandEvent+0x48>
		{
			el->content.allocated = 1;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2201      	movs	r2, #1
 8004cee:	601a      	str	r2, [r3, #0]
			// make sure we the event is in held state
			xSemaphoreTake( el->content.event, 0 );
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f00a fd04 	bl	800f704 <xQueueSemaphoreTake>
			xSemaphoreGiveRecursive( h->syncEventPool.lockGuard );
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d00:	4618      	mov	r0, r3
 8004d02:	f00a fa79 	bl	800f1f8 <xQueueGiveMutexRecursive>
			return el->content.event;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	e00b      	b.n	8004d24 <GetCommandEvent+0x60>
		}
		el = LIST_NEXT(el, navigate);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	60fb      	str	r3, [r7, #12]
	while ( el != NULL )
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1e4      	bne.n	8004ce2 <GetCommandEvent+0x1e>
	}

	xSemaphoreGiveRecursive( h->syncEventPool.lockGuard );
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f00a fa6b 	bl	800f1f8 <xQueueGiveMutexRecursive>
	return 0;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <ReleaseCommandEvent>:

// --------------------------------------------------------------------------------------------------------------------
static void ReleaseCommandEvent( SpindleHandle_t h, SemaphoreHandle_t s )
// --------------------------------------------------------------------------------------------------------------------
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
	xSemaphoreTakeRecursive( h->syncEventPool.lockGuard, -1 );
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d3a:	f04f 31ff 	mov.w	r1, #4294967295
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f00a fa96 	bl	800f270 <xQueueTakeMutexRecursive>

	stepSyncEventElement_t* el = LIST_FIRST(&h->syncEventPool.pool);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d48:	60fb      	str	r3, [r7, #12]
	while ( el != NULL )
 8004d4a:	e014      	b.n	8004d76 <ReleaseCommandEvent+0x4a>
	{
		if ( el->content.allocated == 1 && el->content.event == s)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d10d      	bne.n	8004d70 <ReleaseCommandEvent+0x44>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d108      	bne.n	8004d70 <ReleaseCommandEvent+0x44>
		{
			el->content.allocated = 0;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]
			xSemaphoreGiveRecursive( h->syncEventPool.lockGuard );
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f00a fa45 	bl	800f1f8 <xQueueGiveMutexRecursive>
			return;
 8004d6e:	e00a      	b.n	8004d86 <ReleaseCommandEvent+0x5a>
		}
		el = LIST_NEXT(el, navigate);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	60fb      	str	r3, [r7, #12]
	while ( el != NULL )
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1e7      	bne.n	8004d4c <ReleaseCommandEvent+0x20>
	}

	xSemaphoreGiveRecursive( h->syncEventPool.lockGuard );
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d80:	4618      	mov	r0, r3
 8004d82:	f00a fa39 	bl	800f1f8 <xQueueGiveMutexRecursive>
}
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <SpindleConsoleFunction>:

// --------------------------------------------------------------------------------------------------------------------
static int SpindleConsoleFunction( int argc, char** argv, void* ctx )
// --------------------------------------------------------------------------------------------------------------------
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b08e      	sub	sp, #56	@ 0x38
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
	//possible commands are
	//(spindle) start 100
	//(spindle) stop
	//(spindle) status

	SpindleHandle_t h = (SpindleHandle_t)ctx;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	637b      	str	r3, [r7, #52]	@ 0x34
	StepCommandResponse_t response = { 0 };
 8004d9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004da0:	2200      	movs	r2, #0
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	605a      	str	r2, [r3, #4]
 8004da6:	609a      	str	r2, [r3, #8]
 8004da8:	60da      	str	r2, [r3, #12]
	CtrlCommand_t cmd;

	cmd.response       = &response;
 8004daa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004dae:	623b      	str	r3, [r7, #32]
	cmd.head.requestID = h->nextRequestID;
 8004db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	613b      	str	r3, [r7, #16]
	h->nextRequestID += 1;
 8004db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	1c5a      	adds	r2, r3, #1
 8004dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dbe:	601a      	str	r2, [r3, #0]

	// first decode the subcommand and all arguments
	if ( argc == 0 )
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d105      	bne.n	8004dd2 <SpindleConsoleFunction+0x46>
	{
		printf("invalid number of arguments\r\nFAIL");
 8004dc6:	484a      	ldr	r0, [pc, #296]	@ (8004ef0 <SpindleConsoleFunction+0x164>)
 8004dc8:	f00f fb14 	bl	80143f4 <iprintf>
		return -1;
 8004dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8004dd0:	e089      	b.n	8004ee6 <SpindleConsoleFunction+0x15a>
	}
	if ( strcmp(argv[0], "stop") == 0 )
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4947      	ldr	r1, [pc, #284]	@ (8004ef4 <SpindleConsoleFunction+0x168>)
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7fb fa19 	bl	8000210 <strcmp>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d102      	bne.n	8004dea <SpindleConsoleFunction+0x5e>
	{
		// no further arguments
		cmd.head.type = cctSTOP;
 8004de4:	2302      	movs	r3, #2
 8004de6:	753b      	strb	r3, [r7, #20]
 8004de8:	e036      	b.n	8004e58 <SpindleConsoleFunction+0xcc>
	}
	else if ( strcmp(argv[0], "start") == 0 )
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4942      	ldr	r1, [pc, #264]	@ (8004ef8 <SpindleConsoleFunction+0x16c>)
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7fb fa0d 	bl	8000210 <strcmp>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d11b      	bne.n	8004e34 <SpindleConsoleFunction+0xa8>
	{
		// rpm value directly after start
		cmd.head.type = cctSTART;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	753b      	strb	r3, [r7, #20]
		cmd.request.args.asStart.speed    = 600.0f;
 8004e00:	4b3e      	ldr	r3, [pc, #248]	@ (8004efc <SpindleConsoleFunction+0x170>)
 8004e02:	61bb      	str	r3, [r7, #24]
		if ( argc < 2 )
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	dc05      	bgt.n	8004e16 <SpindleConsoleFunction+0x8a>
		{
			printf("missing RPM value for start command\r\nFAIL");
 8004e0a:	483d      	ldr	r0, [pc, #244]	@ (8004f00 <SpindleConsoleFunction+0x174>)
 8004e0c:	f00f faf2 	bl	80143f4 <iprintf>
			return -1;
 8004e10:	f04f 33ff 	mov.w	r3, #4294967295
 8004e14:	e067      	b.n	8004ee6 <SpindleConsoleFunction+0x15a>
		}

		cmd.request.args.asStart.speed = (float)atof(argv[1]);
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	3304      	adds	r3, #4
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f00d f9d5 	bl	80121cc <atof>
 8004e22:	ec53 2b10 	vmov	r2, r3, d0
 8004e26:	4610      	mov	r0, r2
 8004e28:	4619      	mov	r1, r3
 8004e2a:	f7fb ff0d 	bl	8000c48 <__aeabi_d2f>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	61bb      	str	r3, [r7, #24]
 8004e32:	e011      	b.n	8004e58 <SpindleConsoleFunction+0xcc>
	}
	else if ( strcmp(argv[0], "status") == 0 )
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4932      	ldr	r1, [pc, #200]	@ (8004f04 <SpindleConsoleFunction+0x178>)
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fb f9e8 	bl	8000210 <strcmp>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d102      	bne.n	8004e4c <SpindleConsoleFunction+0xc0>
	{
		// no further arguments, everything in result
		cmd.head.type = cctSTATUS;
 8004e46:	2304      	movs	r3, #4
 8004e48:	753b      	strb	r3, [r7, #20]
 8004e4a:	e005      	b.n	8004e58 <SpindleConsoleFunction+0xcc>
	}
	else
	{
		printf("passed invalid sub command\r\nFAIL");
 8004e4c:	482e      	ldr	r0, [pc, #184]	@ (8004f08 <SpindleConsoleFunction+0x17c>)
 8004e4e:	f00f fad1 	bl	80143f4 <iprintf>
		return -1;
 8004e52:	f04f 33ff 	mov.w	r3, #4294967295
 8004e56:	e046      	b.n	8004ee6 <SpindleConsoleFunction+0x15a>
	}

	// now pass the request to the controller
	cmd.request.syncEvent = GetCommandEvent(h);
 8004e58:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004e5a:	f7ff ff33 	bl	8004cc4 <GetCommandEvent>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	61fb      	str	r3, [r7, #28]

	if ( pdPASS != xQueueSend( h->cmdQueue, &cmd, -1 ) )
 8004e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e64:	68d8      	ldr	r0, [r3, #12]
 8004e66:	f107 0110 	add.w	r1, r7, #16
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e70:	f00a fa3c 	bl	800f2ec <xQueueGenericSend>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d007      	beq.n	8004e8a <SpindleConsoleFunction+0xfe>
	{
		ReleaseCommandEvent(h, cmd.request.syncEvent );
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004e80:	f7ff ff54 	bl	8004d2c <ReleaseCommandEvent>
		return -1;
 8004e84:	f04f 33ff 	mov.w	r3, #4294967295
 8004e88:	e02d      	b.n	8004ee6 <SpindleConsoleFunction+0x15a>
	}

	xSemaphoreTake( cmd.request.syncEvent, -1 );
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8004e90:	4618      	mov	r0, r3
 8004e92:	f00a fc37 	bl	800f704 <xQueueSemaphoreTake>
	ReleaseCommandEvent(h, cmd.request.syncEvent );
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	4619      	mov	r1, r3
 8004e9a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004e9c:	f7ff ff46 	bl	8004d2c <ReleaseCommandEvent>

	// now decode the result in case there is one
	if ( response.code == 0 )
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d11b      	bne.n	8004ede <SpindleConsoleFunction+0x152>
	{
		if ( cmd.head.type == cctSTATUS )
 8004ea6:	7d3b      	ldrb	r3, [r7, #20]
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d114      	bne.n	8004ed6 <SpindleConsoleFunction+0x14a>
		{
			printf("%d\r\n", !!cmd.response->args.asStatus.running);
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	bf14      	ite	ne
 8004eb4:	2301      	movne	r3, #1
 8004eb6:	2300      	moveq	r3, #0
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	4619      	mov	r1, r3
 8004ebc:	4813      	ldr	r0, [pc, #76]	@ (8004f0c <SpindleConsoleFunction+0x180>)
 8004ebe:	f00f fa99 	bl	80143f4 <iprintf>
			printf("%d\r\n", (int)cmd.response->args.asStatus.speed);
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	edd3 7a02 	vldr	s15, [r3, #8]
 8004ec8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ecc:	ee17 1a90 	vmov	r1, s15
 8004ed0:	480e      	ldr	r0, [pc, #56]	@ (8004f0c <SpindleConsoleFunction+0x180>)
 8004ed2:	f00f fa8f 	bl	80143f4 <iprintf>
		}
		printf("OK");
 8004ed6:	480e      	ldr	r0, [pc, #56]	@ (8004f10 <SpindleConsoleFunction+0x184>)
 8004ed8:	f00f fa8c 	bl	80143f4 <iprintf>
 8004edc:	e002      	b.n	8004ee4 <SpindleConsoleFunction+0x158>
	}
	else
	{
		printf("error returned\r\nFAIL");
 8004ede:	480d      	ldr	r0, [pc, #52]	@ (8004f14 <SpindleConsoleFunction+0x188>)
 8004ee0:	f00f fa88 	bl	80143f4 <iprintf>
	}

	// now back to console
	return response.code;
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3738      	adds	r7, #56	@ 0x38
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	080193c8 	.word	0x080193c8
 8004ef4:	080193ec 	.word	0x080193ec
 8004ef8:	080193f4 	.word	0x080193f4
 8004efc:	44160000 	.word	0x44160000
 8004f00:	080193fc 	.word	0x080193fc
 8004f04:	08019428 	.word	0x08019428
 8004f08:	08019430 	.word	0x08019430
 8004f0c:	08019454 	.word	0x08019454
 8004f10:	0801945c 	.word	0x0801945c
 8004f14:	08019460 	.word	0x08019460

08004f18 <SpindleRegisterBasicCommands>:

// --------------------------------------------------------------------------------------------------------------------
static void SpindleRegisterBasicCommands( SpindleHandle_t h, ConsoleHandle_t cH )
// --------------------------------------------------------------------------------------------------------------------
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af02      	add	r7, sp, #8
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
	CONSOLE_RegisterCommand(cH, "spindle", "<<spindle>> is used to control a spindle motor.\r\nValid subcommands are start, stop, status.\r\nStart needs an additional RPM argument!",
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	4b05      	ldr	r3, [pc, #20]	@ (8004f3c <SpindleRegisterBasicCommands+0x24>)
 8004f28:	4a05      	ldr	r2, [pc, #20]	@ (8004f40 <SpindleRegisterBasicCommands+0x28>)
 8004f2a:	4906      	ldr	r1, [pc, #24]	@ (8004f44 <SpindleRegisterBasicCommands+0x2c>)
 8004f2c:	6838      	ldr	r0, [r7, #0]
 8004f2e:	f7fd fff1 	bl	8002f14 <CONSOLE_RegisterCommand>
			SpindleConsoleFunction, h);
}
 8004f32:	bf00      	nop
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	08004d8d 	.word	0x08004d8d
 8004f40:	08019478 	.word	0x08019478
 8004f44:	08019500 	.word	0x08019500

08004f48 <SPINDLE_CreateInstance>:

// --------------------------------------------------------------------------------------------------------------------
SpindleHandle_t SPINDLE_CreateInstance( unsigned int uxStackDepth, int xPrio, ConsoleHandle_t cH, SpindlePhysicalParams_t* p )
// --------------------------------------------------------------------------------------------------------------------
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08c      	sub	sp, #48	@ 0x30
 8004f4c:	af02      	add	r7, sp, #8
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
#define ON_NULL_GOTO_ERROR(x) do { if ((x) == NULL) goto error; } while(0);
	// singleton pattern
	if ( SpindleInstancePointer != NULL ) return SpindleInstancePointer;
 8004f56:	4b86      	ldr	r3, [pc, #536]	@ (8005170 <SPINDLE_CreateInstance+0x228>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d002      	beq.n	8004f64 <SPINDLE_CreateInstance+0x1c>
 8004f5e:	4b84      	ldr	r3, [pc, #528]	@ (8005170 <SPINDLE_CreateInstance+0x228>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	e101      	b.n	8005168 <SPINDLE_CreateInstance+0x220>

	if ( p == NULL || p->enaPWM == NULL || p->setDirection == NULL ||
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d019      	beq.n	8004f9e <SPINDLE_CreateInstance+0x56>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d015      	beq.n	8004f9e <SPINDLE_CreateInstance+0x56>
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d011      	beq.n	8004f9e <SPINDLE_CreateInstance+0x56>
	     p->minRPM >= p->maxRPM || p->setDutyCycle == NULL || cH == NULL )
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	ed93 7a05 	vldr	s14, [r3, #20]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	edd3 7a03 	vldr	s15, [r3, #12]
	if ( p == NULL || p->enaPWM == NULL || p->setDirection == NULL ||
 8004f86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f8e:	da06      	bge.n	8004f9e <SPINDLE_CreateInstance+0x56>
	     p->minRPM >= p->maxRPM || p->setDutyCycle == NULL || cH == NULL )
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d002      	beq.n	8004f9e <SPINDLE_CreateInstance+0x56>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <SPINDLE_CreateInstance+0x5a>
		return NULL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	e0e2      	b.n	8005168 <SPINDLE_CreateInstance+0x220>

	struct SpindleHandle* h = calloc(sizeof(struct SpindleHandle), 1);
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	203c      	movs	r0, #60	@ 0x3c
 8004fa6:	f00d f919 	bl	80121dc <calloc>
 8004faa:	4603      	mov	r3, r0
 8004fac:	61fb      	str	r3, [r7, #28]
	ON_NULL_GOTO_ERROR(h);
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 8082 	beq.w	80050ba <SPINDLE_CreateInstance+0x172>

	if ( h == NULL ) return NULL;
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <SPINDLE_CreateInstance+0x78>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	e0d3      	b.n	8005168 <SPINDLE_CreateInstance+0x220>
	h->consoleH = cH;
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	605a      	str	r2, [r3, #4]
	h->cancel = 0;
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	611a      	str	r2, [r3, #16]
	h->nextRequestID = 0;
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	601a      	str	r2, [r3, #0]
	h->cmdQueue = xQueueCreate(16, sizeof(CtrlCommand_t));
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	2114      	movs	r1, #20
 8004fd6:	2010      	movs	r0, #16
 8004fd8:	f00a f862 	bl	800f0a0 <xQueueGenericCreate>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	60da      	str	r2, [r3, #12]
	ON_NULL_GOTO_ERROR(h->cmdQueue);
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d067      	beq.n	80050ba <SPINDLE_CreateInstance+0x172>

	// copy arguments
	memcpy(&h->physical, p, sizeof(SpindlePhysicalParams_t));
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	3314      	adds	r3, #20
 8004fee:	221c      	movs	r2, #28
 8004ff0:	6839      	ldr	r1, [r7, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f00f fdba 	bl	8014b6c <memcpy>

	// now we create the sync event pool
	LIST_INIT(&h->syncEventPool.pool);
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	639a      	str	r2, [r3, #56]	@ 0x38
	h->syncEventPool.lockGuard = xSemaphoreCreateRecursiveMutex();
 8004ffe:	2004      	movs	r0, #4
 8005000:	f00a f8e1 	bl	800f1c6 <xQueueCreateMutex>
 8005004:	4602      	mov	r2, r0
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	635a      	str	r2, [r3, #52]	@ 0x34
	ON_NULL_GOTO_ERROR(h->syncEventPool.lockGuard);
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800500e:	2b00      	cmp	r3, #0
 8005010:	d053      	beq.n	80050ba <SPINDLE_CreateInstance+0x172>
	for ( int i = 0; i < 8; i++)
 8005012:	2300      	movs	r3, #0
 8005014:	627b      	str	r3, [r7, #36]	@ 0x24
 8005016:	e035      	b.n	8005084 <SPINDLE_CreateInstance+0x13c>
	{
		stepSyncEventElement_t* el = (stepSyncEventElement_t*)calloc(sizeof(stepSyncEventElement_t), 1);
 8005018:	2101      	movs	r1, #1
 800501a:	2010      	movs	r0, #16
 800501c:	f00d f8de 	bl	80121dc <calloc>
 8005020:	4603      	mov	r3, r0
 8005022:	61bb      	str	r3, [r7, #24]
		ON_NULL_GOTO_ERROR(el);
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d047      	beq.n	80050ba <SPINDLE_CreateInstance+0x172>
		el->content.allocated = 0;
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	2200      	movs	r2, #0
 800502e:	601a      	str	r2, [r3, #0]
		el->content.event = xSemaphoreCreateBinary();
 8005030:	2203      	movs	r2, #3
 8005032:	2100      	movs	r1, #0
 8005034:	2001      	movs	r0, #1
 8005036:	f00a f833 	bl	800f0a0 <xQueueGenericCreate>
 800503a:	4602      	mov	r2, r0
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	605a      	str	r2, [r3, #4]
		if (el->content.event == NULL)
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d105      	bne.n	8005054 <SPINDLE_CreateInstance+0x10c>
		{
			free(el);
 8005048:	69b8      	ldr	r0, [r7, #24]
 800504a:	f00d f933 	bl	80122b4 <free>
			el = NULL;
 800504e:	2300      	movs	r3, #0
 8005050:	61bb      	str	r3, [r7, #24]
			goto error;
 8005052:	e032      	b.n	80050ba <SPINDLE_CreateInstance+0x172>
		}
		else
		{
			LIST_INSERT_HEAD(&h->syncEventPool.pool, el, navigate);
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	609a      	str	r2, [r3, #8]
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d004      	beq.n	800506e <SPINDLE_CreateInstance+0x126>
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	3208      	adds	r2, #8
 800506c:	60da      	str	r2, [r3, #12]
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	639a      	str	r2, [r3, #56]	@ 0x38
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	60da      	str	r2, [r3, #12]
	for ( int i = 0; i < 8; i++)
 800507e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005080:	3301      	adds	r3, #1
 8005082:	627b      	str	r3, [r7, #36]	@ 0x24
 8005084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005086:	2b07      	cmp	r3, #7
 8005088:	ddc6      	ble.n	8005018 <SPINDLE_CreateInstance+0xd0>
		}
	}

	// setup the console commands
	SpindleRegisterBasicCommands(h, cH);
 800508a:	6879      	ldr	r1, [r7, #4]
 800508c:	69f8      	ldr	r0, [r7, #28]
 800508e:	f7ff ff43 	bl	8004f18 <SpindleRegisterBasicCommands>
	SpindleInstancePointer = h;
 8005092:	4a37      	ldr	r2, [pc, #220]	@ (8005170 <SPINDLE_CreateInstance+0x228>)
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	6013      	str	r3, [r2, #0]

	// setup the task which handles all communications and the RPM generation
	xTaskCreate(SpindleFunction, "spindlectrl", uxStackDepth, h, xPrio, &h->tHandle);
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	69fa      	ldr	r2, [r7, #28]
 800509c:	3208      	adds	r2, #8
 800509e:	9201      	str	r2, [sp, #4]
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	4933      	ldr	r1, [pc, #204]	@ (8005174 <SPINDLE_CreateInstance+0x22c>)
 80050a8:	4833      	ldr	r0, [pc, #204]	@ (8005178 <SPINDLE_CreateInstance+0x230>)
 80050aa:	f00a fdf9 	bl	800fca0 <xTaskCreate>
	ON_NULL_GOTO_ERROR(h->tHandle);
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <SPINDLE_CreateInstance+0x172>
	return h;
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	e056      	b.n	8005168 <SPINDLE_CreateInstance+0x220>

error:
	if (h != NULL)
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d052      	beq.n	8005166 <SPINDLE_CreateInstance+0x21e>
	{
		if (h->cmdQueue != NULL)
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d007      	beq.n	80050d8 <SPINDLE_CreateInstance+0x190>
		{
			vQueueDelete(h->cmdQueue);
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f00a fc2b 	bl	800f928 <vQueueDelete>
			h->cmdQueue = NULL;
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	2200      	movs	r2, #0
 80050d6:	60da      	str	r2, [r3, #12]
		}

		if (h->syncEventPool.lockGuard != NULL)
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d007      	beq.n	80050f0 <SPINDLE_CreateInstance+0x1a8>
		{
			vSemaphoreDelete(h->syncEventPool.lockGuard);
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050e4:	4618      	mov	r0, r3
 80050e6:	f00a fc1f 	bl	800f928 <vQueueDelete>
			h->syncEventPool.lockGuard = NULL;
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	2200      	movs	r2, #0
 80050ee:	635a      	str	r2, [r3, #52]	@ 0x34
		}

		// first clean all event elements
		stepSyncEventElement_t* el = NULL;
 80050f0:	2300      	movs	r3, #0
 80050f2:	623b      	str	r3, [r7, #32]
		stepSyncEventElement_t* tel = NULL;
 80050f4:	2300      	movs	r3, #0
 80050f6:	617b      	str	r3, [r7, #20]
		for (el = LIST_FIRST(&h->syncEventPool.pool); el && (tel = LIST_NEXT(el, navigate), 1); el = tel)
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050fc:	623b      	str	r3, [r7, #32]
 80050fe:	e009      	b.n	8005114 <SPINDLE_CreateInstance+0x1cc>
		{
			if (el->content.event != NULL)
			{
				vSemaphoreDelete(el->content.event);
 8005100:	6a3b      	ldr	r3, [r7, #32]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	4618      	mov	r0, r3
 8005106:	f00a fc0f 	bl	800f928 <vQueueDelete>
				el->content.event = NULL;
 800510a:	6a3b      	ldr	r3, [r7, #32]
 800510c:	2200      	movs	r2, #0
 800510e:	605a      	str	r2, [r3, #4]
		for (el = LIST_FIRST(&h->syncEventPool.pool); el && (tel = LIST_NEXT(el, navigate), 1); el = tel)
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	623b      	str	r3, [r7, #32]
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d01e      	beq.n	8005158 <SPINDLE_CreateInstance+0x210>
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	617b      	str	r3, [r7, #20]
			if (el->content.event != NULL)
 8005120:	6a3b      	ldr	r3, [r7, #32]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0f3      	beq.n	8005110 <SPINDLE_CreateInstance+0x1c8>
 8005128:	e7ea      	b.n	8005100 <SPINDLE_CreateInstance+0x1b8>
		}

		// now remove all elements one by one from the list and free them
		while (!LIST_EMPTY(&h->syncEventPool.pool))
		{
			stepSyncEventElement_t* el = LIST_FIRST(&h->syncEventPool.pool);
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512e:	613b      	str	r3, [r7, #16]
			if (el != NULL)
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d010      	beq.n	8005158 <SPINDLE_CreateInstance+0x210>
			{
				LIST_REMOVE(el, navigate);
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d004      	beq.n	8005148 <SPINDLE_CreateInstance+0x200>
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	68d2      	ldr	r2, [r2, #12]
 8005146:	60da      	str	r2, [r3, #12]
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	6892      	ldr	r2, [r2, #8]
 8005150:	601a      	str	r2, [r3, #0]
				free(el);
 8005152:	6938      	ldr	r0, [r7, #16]
 8005154:	f00d f8ae 	bl	80122b4 <free>
		while (!LIST_EMPTY(&h->syncEventPool.pool))
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1e4      	bne.n	800512a <SPINDLE_CreateInstance+0x1e2>
			}
		}

		free(h);
 8005160:	69f8      	ldr	r0, [r7, #28]
 8005162:	f00d f8a7 	bl	80122b4 <free>
	}

	return NULL;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3728      	adds	r7, #40	@ 0x28
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	200002f4 	.word	0x200002f4
 8005174:	08019508 	.word	0x08019508
 8005178:	080049ad 	.word	0x080049ad

0800517c <L6474_HelperLock>:


// --------------------------------------------------------------------------------------------------------------------
static inline int L6474_HelperLock(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
#if defined(LIBL6474_HAS_LOCKING) && LIBL6474_HAS_LOCKING == 1
	return h->platform->lock();
#else
	(void)h;
	return 0;
 8005184:	2300      	movs	r3, #0
#endif
}
 8005186:	4618      	mov	r0, r3
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <L6474_HelperUnlock>:

// --------------------------------------------------------------------------------------------------------------------
static inline void L6474_HelperUnlock(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
#if defined(LIBL6474_HAS_LOCKING) && LIBL6474_HAS_LOCKING == 1
	h->platform->unlock();
#else
	(void)h;
	return;
 800519a:	bf00      	nop
#endif
}
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr

080051a6 <L6474_HelperReleaseStep>:


// --------------------------------------------------------------------------------------------------------------------
static void L6474_HelperReleaseStep(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b082      	sub	sp, #8
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
	L6474_HelperLock(h);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7ff ffe4 	bl	800517c <L6474_HelperLock>
	h->pending = 0;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	605a      	str	r2, [r3, #4]
	L6474_HelperUnlock(h);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7ff ffe9 	bl	8005192 <L6474_HelperUnlock>
}
 80051c0:	bf00      	nop
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <L6474_GetStatusCommand>:

// --------------------------------------------------------------------------------------------------------------------
static int L6474_GetStatusCommand(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 80051c8:	b590      	push	{r4, r7, lr}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
	if ( h->state == stRESET )
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d102      	bne.n	80051de <L6474_GetStatusCommand+0x16>
		return errcINV_STATE;
 80051d8:	f06f 0302 	mvn.w	r3, #2
 80051dc:	e033      	b.n	8005246 <L6474_GetStatusCommand+0x7e>

	int length = STEP_CMD_STA_LENGTH;
 80051de:	2303      	movs	r3, #3
 80051e0:	617b      	str	r3, [r7, #20]

	unsigned char rxBuff[STEP_CMD_STA_LENGTH] = { 0 };
 80051e2:	f107 030c 	add.w	r3, r7, #12
 80051e6:	2100      	movs	r1, #0
 80051e8:	460a      	mov	r2, r1
 80051ea:	801a      	strh	r2, [r3, #0]
 80051ec:	460a      	mov	r2, r1
 80051ee:	709a      	strb	r2, [r3, #2]
	unsigned char txBuff[STEP_CMD_STA_LENGTH] = { 0 };
 80051f0:	f107 0308 	add.w	r3, r7, #8
 80051f4:	2100      	movs	r1, #0
 80051f6:	460a      	mov	r2, r1
 80051f8:	801a      	strh	r2, [r3, #0]
 80051fa:	460a      	mov	r2, r1
 80051fc:	709a      	strb	r2, [r3, #2]

	txBuff[0] = STEP_CMD_STA_PREFIX | 0;
 80051fe:	23d0      	movs	r3, #208	@ 0xd0
 8005200:	723b      	strb	r3, [r7, #8]
	int ret = h->platform.transfer(h->pIO, (char*)rxBuff, (const char*)txBuff, length);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	69dc      	ldr	r4, [r3, #28]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6898      	ldr	r0, [r3, #8]
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f107 0208 	add.w	r2, r7, #8
 8005210:	f107 010c 	add.w	r1, r7, #12
 8005214:	47a0      	blx	r4
 8005216:	6138      	str	r0, [r7, #16]

	if ( ret != 0 )
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d002      	beq.n	8005224 <L6474_GetStatusCommand+0x5c>
		return errcINTERNAL;
 800521e:	f06f 0303 	mvn.w	r3, #3
 8005222:	e010      	b.n	8005246 <L6474_GetStatusCommand+0x7e>

	ret = (rxBuff[2] << 0 ) | (rxBuff[1] << 8 );
 8005224:	7bbb      	ldrb	r3, [r7, #14]
 8005226:	461a      	mov	r2, r3
 8005228:	7b7b      	ldrb	r3, [r7, #13]
 800522a:	021b      	lsls	r3, r3, #8
 800522c:	4313      	orrs	r3, r2
 800522e:	613b      	str	r3, [r7, #16]
	h->state = ( ret & STATUS_HIGHZ_MASK ) ? stDISABLED : stENABLED;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <L6474_GetStatusCommand+0x76>
 800523a:	2201      	movs	r2, #1
 800523c:	e000      	b.n	8005240 <L6474_GetStatusCommand+0x78>
 800523e:	2202      	movs	r2, #2
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	701a      	strb	r2, [r3, #0]
	return ret;
 8005244:	693b      	ldr	r3, [r7, #16]
}
 8005246:	4618      	mov	r0, r3
 8005248:	371c      	adds	r7, #28
 800524a:	46bd      	mov	sp, r7
 800524c:	bd90      	pop	{r4, r7, pc}
	...

08005250 <L6474_GetParamCommand>:
}

// --------------------------------------------------------------------------------------------------------------------
static int L6474_GetParamCommand(L6474_Handle_t h, int addr)
// --------------------------------------------------------------------------------------------------------------------
{
 8005250:	b590      	push	{r4, r7, lr}
 8005252:	b08b      	sub	sp, #44	@ 0x2c
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
	addr &= STEP_REG_RANGE_MASK;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	f003 031f 	and.w	r3, r3, #31
 8005260:	603b      	str	r3, [r7, #0]
	if( L6474_Parameters[addr].defined == 0 )
 8005262:	4a52      	ldr	r2, [pc, #328]	@ (80053ac <L6474_GetParamCommand+0x15c>)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	4413      	add	r3, r2
 800526a:	3301      	adds	r3, #1
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d102      	bne.n	8005278 <L6474_GetParamCommand+0x28>
		return errcINV_ARG;
 8005272:	f04f 33ff 	mov.w	r3, #4294967295
 8005276:	e094      	b.n	80053a2 <L6474_GetParamCommand+0x152>

	if( ( L6474_Parameters[addr].flags & afREAD ) == 0 )
 8005278:	4a4c      	ldr	r2, [pc, #304]	@ (80053ac <L6474_GetParamCommand+0x15c>)
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	011b      	lsls	r3, r3, #4
 800527e:	4413      	add	r3, r2
 8005280:	330c      	adds	r3, #12
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b00      	cmp	r3, #0
 800528a:	d102      	bne.n	8005292 <L6474_GetParamCommand+0x42>
		return errcFORBIDDEN;
 800528c:	f06f 0307 	mvn.w	r3, #7
 8005290:	e087      	b.n	80053a2 <L6474_GetParamCommand+0x152>

	if ( h->state == stRESET )
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d102      	bne.n	80052a0 <L6474_GetParamCommand+0x50>
		return errcINV_STATE;
 800529a:	f06f 0302 	mvn.w	r3, #2
 800529e:	e080      	b.n	80053a2 <L6474_GetParamCommand+0x152>

	int length  = L6474_Parameters[addr].length + STEP_CMD_GET_LENGTH;
 80052a0:	4a42      	ldr	r2, [pc, #264]	@ (80053ac <L6474_GetParamCommand+0x15c>)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	4413      	add	r3, r2
 80052a8:	3302      	adds	r3, #2
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	3301      	adds	r3, #1
 80052ae:	623b      	str	r3, [r7, #32]
	if ( length > STEP_CMD_GET_MAX_PAYLOAD )
 80052b0:	6a3b      	ldr	r3, [r7, #32]
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	dd02      	ble.n	80052bc <L6474_GetParamCommand+0x6c>
		return errcINTERNAL;
 80052b6:	f06f 0303 	mvn.w	r3, #3
 80052ba:	e072      	b.n	80053a2 <L6474_GetParamCommand+0x152>

	unsigned char rxBuff[STEP_CMD_GET_MAX_PAYLOAD] = { STEP_CMD_NOP_PREFIX };
 80052bc:	2300      	movs	r3, #0
 80052be:	613b      	str	r3, [r7, #16]
	unsigned char txBuff[STEP_CMD_GET_MAX_PAYLOAD] = { STEP_CMD_NOP_PREFIX };
 80052c0:	2300      	movs	r3, #0
 80052c2:	60fb      	str	r3, [r7, #12]

	txBuff[0] = STEP_CMD_GET_PREFIX | addr;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	b25b      	sxtb	r3, r3
 80052c8:	f043 0320 	orr.w	r3, r3, #32
 80052cc:	b25b      	sxtb	r3, r3
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	733b      	strb	r3, [r7, #12]
	int ret = h->platform.transfer(h->pIO, (char*)rxBuff, (const char*)txBuff, length);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69dc      	ldr	r4, [r3, #28]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6898      	ldr	r0, [r3, #8]
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	f107 020c 	add.w	r2, r7, #12
 80052e0:	f107 0110 	add.w	r1, r7, #16
 80052e4:	47a0      	blx	r4
 80052e6:	61f8      	str	r0, [r7, #28]

	if ( ret != 0 )
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <L6474_GetParamCommand+0xa4>
		return errcINTERNAL;
 80052ee:	f06f 0303 	mvn.w	r3, #3
 80052f2:	e056      	b.n	80053a2 <L6474_GetParamCommand+0x152>

	int res = errcNONE;
 80052f4:	2300      	movs	r3, #0
 80052f6:	627b      	str	r3, [r7, #36]	@ 0x24
	unsigned int tmp = 0;
 80052f8:	2300      	movs	r3, #0
 80052fa:	61bb      	str	r3, [r7, #24]
	switch (L6474_Parameters[addr].length)
 80052fc:	4a2b      	ldr	r2, [pc, #172]	@ (80053ac <L6474_GetParamCommand+0x15c>)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	011b      	lsls	r3, r3, #4
 8005302:	4413      	add	r3, r2
 8005304:	3302      	adds	r3, #2
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b03      	cmp	r3, #3
 800530a:	d021      	beq.n	8005350 <L6474_GetParamCommand+0x100>
 800530c:	2b03      	cmp	r3, #3
 800530e:	dc31      	bgt.n	8005374 <L6474_GetParamCommand+0x124>
 8005310:	2b01      	cmp	r3, #1
 8005312:	d002      	beq.n	800531a <L6474_GetParamCommand+0xca>
 8005314:	2b02      	cmp	r3, #2
 8005316:	d00c      	beq.n	8005332 <L6474_GetParamCommand+0xe2>
 8005318:	e02c      	b.n	8005374 <L6474_GetParamCommand+0x124>
	{
	    case 1:
	    	tmp = ( rxBuff[1] << 0 );
 800531a:	7c7b      	ldrb	r3, [r7, #17]
 800531c:	61bb      	str	r3, [r7, #24]
	    	res = tmp & L6474_Parameters[addr].mask;
 800531e:	4a23      	ldr	r2, [pc, #140]	@ (80053ac <L6474_GetParamCommand+0x15c>)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	011b      	lsls	r3, r3, #4
 8005324:	4413      	add	r3, r2
 8005326:	3304      	adds	r3, #4
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	4013      	ands	r3, r2
 800532e:	627b      	str	r3, [r7, #36]	@ 0x24
	    	break;
 8005330:	e023      	b.n	800537a <L6474_GetParamCommand+0x12a>
	    case 2:
	    	tmp = ( rxBuff[1] << 8 | rxBuff[2] << 0 );
 8005332:	7c7b      	ldrb	r3, [r7, #17]
 8005334:	021b      	lsls	r3, r3, #8
 8005336:	7cba      	ldrb	r2, [r7, #18]
 8005338:	4313      	orrs	r3, r2
 800533a:	61bb      	str	r3, [r7, #24]
	    	res = tmp & L6474_Parameters[addr].mask;
 800533c:	4a1b      	ldr	r2, [pc, #108]	@ (80053ac <L6474_GetParamCommand+0x15c>)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	011b      	lsls	r3, r3, #4
 8005342:	4413      	add	r3, r2
 8005344:	3304      	adds	r3, #4
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	4013      	ands	r3, r2
 800534c:	627b      	str	r3, [r7, #36]	@ 0x24
	    	//res = ( ( tmp & 0xFF00 ) >> 8 ) | ( ( tmp & 0x00FF ) << 8 );
	    	break;
 800534e:	e014      	b.n	800537a <L6474_GetParamCommand+0x12a>
	    case 3:
	    	tmp = ( rxBuff[1] << 16 | rxBuff[2] << 8 | rxBuff[3] << 0 );
 8005350:	7c7b      	ldrb	r3, [r7, #17]
 8005352:	041a      	lsls	r2, r3, #16
 8005354:	7cbb      	ldrb	r3, [r7, #18]
 8005356:	021b      	lsls	r3, r3, #8
 8005358:	4313      	orrs	r3, r2
 800535a:	7cfa      	ldrb	r2, [r7, #19]
 800535c:	4313      	orrs	r3, r2
 800535e:	61bb      	str	r3, [r7, #24]
	    	res = tmp & L6474_Parameters[addr].mask;
 8005360:	4a12      	ldr	r2, [pc, #72]	@ (80053ac <L6474_GetParamCommand+0x15c>)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	011b      	lsls	r3, r3, #4
 8005366:	4413      	add	r3, r2
 8005368:	3304      	adds	r3, #4
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	4013      	ands	r3, r2
 8005370:	627b      	str	r3, [r7, #36]	@ 0x24
	    	//res = ( ( tmp & 0xFF0000 ) >> 16 ) | ( ( tmp & 0x00FF00 ) << 0 ) | ( ( tmp & 0x0000FF ) << 16 );
	    	break;
 8005372:	e002      	b.n	800537a <L6474_GetParamCommand+0x12a>
	    default:
	    	return errcINTERNAL;
 8005374:	f06f 0303 	mvn.w	r3, #3
 8005378:	e013      	b.n	80053a2 <L6474_GetParamCommand+0x152>
	}

	int opres = 0;
 800537a:	2300      	movs	r3, #0
 800537c:	617b      	str	r3, [r7, #20]
	if ( ( opres = L6474_GetStatusCommand(h) ) < 0 )
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7ff ff22 	bl	80051c8 <L6474_GetStatusCommand>
 8005384:	6178      	str	r0, [r7, #20]
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	2b00      	cmp	r3, #0
 800538a:	da01      	bge.n	8005390 <L6474_GetParamCommand+0x140>
		return opres;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	e008      	b.n	80053a2 <L6474_GetParamCommand+0x152>

	if ( (opres & ( STATUS_NOTPERF_CMD_MASK | STATUS_WRONG_CMD_MASK ) ) != 0 )
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005396:	2b00      	cmp	r3, #0
 8005398:	d002      	beq.n	80053a0 <L6474_GetParamCommand+0x150>
		return errcDEVICE_STATE;
 800539a:	f06f 0305 	mvn.w	r3, #5
 800539e:	e000      	b.n	80053a2 <L6474_GetParamCommand+0x152>

	return res;
 80053a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	372c      	adds	r7, #44	@ 0x2c
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd90      	pop	{r4, r7, pc}
 80053aa:	bf00      	nop
 80053ac:	08019ddc 	.word	0x08019ddc

080053b0 <L6474_SetParamCommand>:

// --------------------------------------------------------------------------------------------------------------------
static int L6474_SetParamCommand(L6474_Handle_t h, int addr, int value)
// --------------------------------------------------------------------------------------------------------------------
{
 80053b0:	b590      	push	{r4, r7, lr}
 80053b2:	b08b      	sub	sp, #44	@ 0x2c
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
	addr &= STEP_REG_RANGE_MASK;
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	f003 031f 	and.w	r3, r3, #31
 80053c2:	60bb      	str	r3, [r7, #8]
	if( L6474_Parameters[addr].defined == 0 )
 80053c4:	4a58      	ldr	r2, [pc, #352]	@ (8005528 <L6474_SetParamCommand+0x178>)
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	011b      	lsls	r3, r3, #4
 80053ca:	4413      	add	r3, r2
 80053cc:	3301      	adds	r3, #1
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d102      	bne.n	80053da <L6474_SetParamCommand+0x2a>
		return errcINV_ARG;
 80053d4:	f04f 33ff 	mov.w	r3, #4294967295
 80053d8:	e0a2      	b.n	8005520 <L6474_SetParamCommand+0x170>

	if( ( L6474_Parameters[addr].flags & ( afWRITE | afWRITE_HighZ ) ) == 0 )
 80053da:	4a53      	ldr	r2, [pc, #332]	@ (8005528 <L6474_SetParamCommand+0x178>)
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	4413      	add	r3, r2
 80053e2:	330c      	adds	r3, #12
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	f003 0306 	and.w	r3, r3, #6
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d102      	bne.n	80053f4 <L6474_SetParamCommand+0x44>
		return errcFORBIDDEN;
 80053ee:	f06f 0307 	mvn.w	r3, #7
 80053f2:	e095      	b.n	8005520 <L6474_SetParamCommand+0x170>

	if ( ( h->state == stRESET ) || ( ( h->state == stENABLED ) && ( ( L6474_Parameters[addr].flags & afWRITE_HighZ ) != 0 ) ) )
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00d      	beq.n	8005418 <L6474_SetParamCommand+0x68>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	2b02      	cmp	r3, #2
 8005402:	d10c      	bne.n	800541e <L6474_SetParamCommand+0x6e>
 8005404:	4a48      	ldr	r2, [pc, #288]	@ (8005528 <L6474_SetParamCommand+0x178>)
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	4413      	add	r3, r2
 800540c:	330c      	adds	r3, #12
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <L6474_SetParamCommand+0x6e>
		return errcINV_STATE;
 8005418:	f06f 0302 	mvn.w	r3, #2
 800541c:	e080      	b.n	8005520 <L6474_SetParamCommand+0x170>

	int length  = L6474_Parameters[addr].length + STEP_CMD_SET_LENGTH;
 800541e:	4a42      	ldr	r2, [pc, #264]	@ (8005528 <L6474_SetParamCommand+0x178>)
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	011b      	lsls	r3, r3, #4
 8005424:	4413      	add	r3, r2
 8005426:	3302      	adds	r3, #2
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	3301      	adds	r3, #1
 800542c:	627b      	str	r3, [r7, #36]	@ 0x24
	if ( length > STEP_CMD_SET_MAX_PAYLOAD )
 800542e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005430:	2b04      	cmp	r3, #4
 8005432:	dd02      	ble.n	800543a <L6474_SetParamCommand+0x8a>
		return errcINTERNAL;
 8005434:	f06f 0303 	mvn.w	r3, #3
 8005438:	e072      	b.n	8005520 <L6474_SetParamCommand+0x170>

	unsigned char rxBuff[STEP_CMD_SET_MAX_PAYLOAD] = { 0 };
 800543a:	2300      	movs	r3, #0
 800543c:	617b      	str	r3, [r7, #20]
	unsigned char txBuff[STEP_CMD_SET_MAX_PAYLOAD] = { 0 };
 800543e:	2300      	movs	r3, #0
 8005440:	613b      	str	r3, [r7, #16]
	unsigned int  tmp = 0;
 8005442:	2300      	movs	r3, #0
 8005444:	623b      	str	r3, [r7, #32]

	txBuff[0] = STEP_CMD_SET_PREFIX | addr;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	b2db      	uxtb	r3, r3
 800544a:	743b      	strb	r3, [r7, #16]

	switch (L6474_Parameters[addr].length)
 800544c:	4a36      	ldr	r2, [pc, #216]	@ (8005528 <L6474_SetParamCommand+0x178>)
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	011b      	lsls	r3, r3, #4
 8005452:	4413      	add	r3, r2
 8005454:	3302      	adds	r3, #2
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	2b03      	cmp	r3, #3
 800545a:	d024      	beq.n	80054a6 <L6474_SetParamCommand+0xf6>
 800545c:	2b03      	cmp	r3, #3
 800545e:	dc37      	bgt.n	80054d0 <L6474_SetParamCommand+0x120>
 8005460:	2b01      	cmp	r3, #1
 8005462:	d002      	beq.n	800546a <L6474_SetParamCommand+0xba>
 8005464:	2b02      	cmp	r3, #2
 8005466:	d00d      	beq.n	8005484 <L6474_SetParamCommand+0xd4>
 8005468:	e032      	b.n	80054d0 <L6474_SetParamCommand+0x120>
	{
	    case 1:
	    	tmp = value & L6474_Parameters[addr].mask;
 800546a:	4a2f      	ldr	r2, [pc, #188]	@ (8005528 <L6474_SetParamCommand+0x178>)
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	011b      	lsls	r3, r3, #4
 8005470:	4413      	add	r3, r2
 8005472:	3304      	adds	r3, #4
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4013      	ands	r3, r2
 800547a:	623b      	str	r3, [r7, #32]
	    	txBuff[1] = tmp >> 0;
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	b2db      	uxtb	r3, r3
 8005480:	747b      	strb	r3, [r7, #17]
	    	break;
 8005482:	e028      	b.n	80054d6 <L6474_SetParamCommand+0x126>
	    case 2:
	    	tmp = value & L6474_Parameters[addr].mask;
 8005484:	4a28      	ldr	r2, [pc, #160]	@ (8005528 <L6474_SetParamCommand+0x178>)
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	011b      	lsls	r3, r3, #4
 800548a:	4413      	add	r3, r2
 800548c:	3304      	adds	r3, #4
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4013      	ands	r3, r2
 8005494:	623b      	str	r3, [r7, #32]
	    	txBuff[1] = tmp >> 8;
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	0a1b      	lsrs	r3, r3, #8
 800549a:	b2db      	uxtb	r3, r3
 800549c:	747b      	strb	r3, [r7, #17]
	    	txBuff[2] = tmp >> 0;
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	74bb      	strb	r3, [r7, #18]
	    	break;
 80054a4:	e017      	b.n	80054d6 <L6474_SetParamCommand+0x126>
	    case 3:
	    	tmp = value & L6474_Parameters[addr].mask;
 80054a6:	4a20      	ldr	r2, [pc, #128]	@ (8005528 <L6474_SetParamCommand+0x178>)
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	011b      	lsls	r3, r3, #4
 80054ac:	4413      	add	r3, r2
 80054ae:	3304      	adds	r3, #4
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4013      	ands	r3, r2
 80054b6:	623b      	str	r3, [r7, #32]
	    	txBuff[1] = tmp >> 16;
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	0c1b      	lsrs	r3, r3, #16
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	747b      	strb	r3, [r7, #17]
	    	txBuff[2] = tmp >> 8;
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	0a1b      	lsrs	r3, r3, #8
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	74bb      	strb	r3, [r7, #18]
	    	txBuff[3] = tmp >> 0;
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	74fb      	strb	r3, [r7, #19]
	    	break;
 80054ce:	e002      	b.n	80054d6 <L6474_SetParamCommand+0x126>
	    default:
	    	return errcINTERNAL;
 80054d0:	f06f 0303 	mvn.w	r3, #3
 80054d4:	e024      	b.n	8005520 <L6474_SetParamCommand+0x170>
	}

	int ret = h->platform.transfer(h->pIO, (char*)rxBuff, (const char*)txBuff, length);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	69dc      	ldr	r4, [r3, #28]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6898      	ldr	r0, [r3, #8]
 80054de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e0:	f107 0210 	add.w	r2, r7, #16
 80054e4:	f107 0114 	add.w	r1, r7, #20
 80054e8:	47a0      	blx	r4
 80054ea:	61f8      	str	r0, [r7, #28]

	if ( ret != 0 )
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <L6474_SetParamCommand+0x148>
		return errcINTERNAL;
 80054f2:	f06f 0303 	mvn.w	r3, #3
 80054f6:	e013      	b.n	8005520 <L6474_SetParamCommand+0x170>

	int res = 0;
 80054f8:	2300      	movs	r3, #0
 80054fa:	61bb      	str	r3, [r7, #24]
	if ( ( res = L6474_GetStatusCommand(h) ) < 0 )
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f7ff fe63 	bl	80051c8 <L6474_GetStatusCommand>
 8005502:	61b8      	str	r0, [r7, #24]
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	2b00      	cmp	r3, #0
 8005508:	da01      	bge.n	800550e <L6474_SetParamCommand+0x15e>
		return res;
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	e008      	b.n	8005520 <L6474_SetParamCommand+0x170>

	if ( ( res & ( STATUS_NOTPERF_CMD_MASK | STATUS_WRONG_CMD_MASK ) ) != 0 )
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005514:	2b00      	cmp	r3, #0
 8005516:	d002      	beq.n	800551e <L6474_SetParamCommand+0x16e>
		return errcDEVICE_STATE;
 8005518:	f06f 0305 	mvn.w	r3, #5
 800551c:	e000      	b.n	8005520 <L6474_SetParamCommand+0x170>

	return errcNONE;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	372c      	adds	r7, #44	@ 0x2c
 8005524:	46bd      	mov	sp, r7
 8005526:	bd90      	pop	{r4, r7, pc}
 8005528:	08019ddc 	.word	0x08019ddc

0800552c <L6474_EnableCommand>:

// --------------------------------------------------------------------------------------------------------------------
static int L6474_EnableCommand(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 800552c:	b590      	push	{r4, r7, lr}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
	if ( h->state == stRESET )
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d102      	bne.n	8005542 <L6474_EnableCommand+0x16>
		return errcINV_STATE;
 800553c:	f06f 0302 	mvn.w	r3, #2
 8005540:	e033      	b.n	80055aa <L6474_EnableCommand+0x7e>

	if ( h->state == stENABLED )
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	2b02      	cmp	r3, #2
 8005548:	d101      	bne.n	800554e <L6474_EnableCommand+0x22>
		return errcNONE;
 800554a:	2300      	movs	r3, #0
 800554c:	e02d      	b.n	80055aa <L6474_EnableCommand+0x7e>

	int length = STEP_CMD_ENA_LENGTH;
 800554e:	2301      	movs	r3, #1
 8005550:	617b      	str	r3, [r7, #20]

	unsigned char rxBuff[STEP_CMD_ENA_LENGTH] = { 0 };
 8005552:	2300      	movs	r3, #0
 8005554:	733b      	strb	r3, [r7, #12]
	unsigned char txBuff[STEP_CMD_ENA_LENGTH] = { 0 };
 8005556:	2300      	movs	r3, #0
 8005558:	723b      	strb	r3, [r7, #8]

	txBuff[0] = STEP_CMD_ENA_PREFIX | 0;
 800555a:	23b8      	movs	r3, #184	@ 0xb8
 800555c:	723b      	strb	r3, [r7, #8]
	int ret = h->platform.transfer(h->pIO, (char*)rxBuff, (const char*)txBuff, length);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	69dc      	ldr	r4, [r3, #28]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6898      	ldr	r0, [r3, #8]
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f107 0208 	add.w	r2, r7, #8
 800556c:	f107 010c 	add.w	r1, r7, #12
 8005570:	47a0      	blx	r4
 8005572:	6138      	str	r0, [r7, #16]

	if ( ret != 0 )
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <L6474_EnableCommand+0x54>
		return errcINTERNAL;
 800557a:	f06f 0303 	mvn.w	r3, #3
 800557e:	e014      	b.n	80055aa <L6474_EnableCommand+0x7e>

	if ( ( ret = L6474_GetStatusCommand(h) ) < 0 )
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f7ff fe21 	bl	80051c8 <L6474_GetStatusCommand>
 8005586:	6138      	str	r0, [r7, #16]
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	2b00      	cmp	r3, #0
 800558c:	da01      	bge.n	8005592 <L6474_EnableCommand+0x66>
		return ret;
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	e00b      	b.n	80055aa <L6474_EnableCommand+0x7e>

	if ( ( ret & ( STATUS_NOTPERF_CMD_MASK | STATUS_WRONG_CMD_MASK ) ) != 0 )
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005598:	2b00      	cmp	r3, #0
 800559a:	d002      	beq.n	80055a2 <L6474_EnableCommand+0x76>
		return errcDEVICE_STATE;
 800559c:	f06f 0305 	mvn.w	r3, #5
 80055a0:	e003      	b.n	80055aa <L6474_EnableCommand+0x7e>

	h->state = stENABLED;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2202      	movs	r2, #2
 80055a6:	701a      	strb	r2, [r3, #0]
	return errcNONE;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	371c      	adds	r7, #28
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd90      	pop	{r4, r7, pc}

080055b2 <L6474_DisableCommand>:

// --------------------------------------------------------------------------------------------------------------------
static int L6474_DisableCommand(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 80055b2:	b590      	push	{r4, r7, lr}
 80055b4:	b087      	sub	sp, #28
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
	if ( h->state == stRESET )
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d102      	bne.n	80055c8 <L6474_DisableCommand+0x16>
		return errcINV_STATE;
 80055c2:	f06f 0302 	mvn.w	r3, #2
 80055c6:	e036      	b.n	8005636 <L6474_DisableCommand+0x84>

	int length = STEP_CMD_DIS_LENGTH;
 80055c8:	2301      	movs	r3, #1
 80055ca:	617b      	str	r3, [r7, #20]

	unsigned char rxBuff[STEP_CMD_DIS_LENGTH] = { 0 };
 80055cc:	2300      	movs	r3, #0
 80055ce:	733b      	strb	r3, [r7, #12]
	unsigned char txBuff[STEP_CMD_DIS_LENGTH] = { 0 };
 80055d0:	2300      	movs	r3, #0
 80055d2:	723b      	strb	r3, [r7, #8]

	txBuff[0] = STEP_CMD_DIS_PREFIX | 0;
 80055d4:	23a8      	movs	r3, #168	@ 0xa8
 80055d6:	723b      	strb	r3, [r7, #8]
	int ret = h->platform.transfer(h->pIO, (char*)rxBuff, (const char*)txBuff, length);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	69dc      	ldr	r4, [r3, #28]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6898      	ldr	r0, [r3, #8]
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	f107 0208 	add.w	r2, r7, #8
 80055e6:	f107 010c 	add.w	r1, r7, #12
 80055ea:	47a0      	blx	r4
 80055ec:	6138      	str	r0, [r7, #16]

	if ( ret != 0 )
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <L6474_DisableCommand+0x48>
		return errcINTERNAL;
 80055f4:	f06f 0303 	mvn.w	r3, #3
 80055f8:	e01d      	b.n	8005636 <L6474_DisableCommand+0x84>

	if ( ( ret = L6474_GetStatusCommand(h) ) < 0 )
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7ff fde4 	bl	80051c8 <L6474_GetStatusCommand>
 8005600:	6138      	str	r0, [r7, #16]
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	2b00      	cmp	r3, #0
 8005606:	da01      	bge.n	800560c <L6474_DisableCommand+0x5a>
		return ret;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	e014      	b.n	8005636 <L6474_DisableCommand+0x84>

	if ( ( ret & ( STATUS_NOTPERF_CMD_MASK | STATUS_WRONG_CMD_MASK ) ) != 0 )
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <L6474_DisableCommand+0x6a>
		return errcDEVICE_STATE;
 8005616:	f06f 0305 	mvn.w	r3, #5
 800561a:	e00c      	b.n	8005636 <L6474_DisableCommand+0x84>

	h->state   = stDISABLED;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	701a      	strb	r2, [r3, #0]
#if defined(LIBL6474_STEP_ASYNC) && ( LIBL6474_STEP_ASYNC == 1 )
	h->pending = 0;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	605a      	str	r2, [r3, #4]
	h->platform.cancelStep(h->pPWM);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	6912      	ldr	r2, [r2, #16]
 8005630:	4610      	mov	r0, r2
 8005632:	4798      	blx	r3
#endif
	return errcNONE;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	371c      	adds	r7, #28
 800563a:	46bd      	mov	sp, r7
 800563c:	bd90      	pop	{r4, r7, pc}

0800563e <L6474_CreateInstance>:


// --------------------------------------------------------------------------------------------------------------------
L6474_Handle_t L6474_CreateInstance(L6474x_Platform_t* p, void* pIO, void* pGPO, void* pPWM)
// --------------------------------------------------------------------------------------------------------------------
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b086      	sub	sp, #24
 8005642:	af00      	add	r7, sp, #0
 8005644:	60f8      	str	r0, [r7, #12]
 8005646:	60b9      	str	r1, [r7, #8]
 8005648:	607a      	str	r2, [r7, #4]
 800564a:	603b      	str	r3, [r7, #0]
	if ( p == 0 )
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <L6474_CreateInstance+0x18>
		return 0;
 8005652:	2300      	movs	r3, #0
 8005654:	e05c      	b.n	8005710 <L6474_CreateInstance+0xd2>

	if ( ( p->reset == 0 ) || ( p->malloc == 0 ) || (p->free == 0) || (p->sleep == 0) || ( p->transfer == 0 ) )
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00f      	beq.n	800567e <L6474_CreateInstance+0x40>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00b      	beq.n	800567e <L6474_CreateInstance+0x40>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d007      	beq.n	800567e <L6474_CreateInstance+0x40>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <L6474_CreateInstance+0x40>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <L6474_CreateInstance+0x44>
		return 0;
 800567e:	2300      	movs	r3, #0
 8005680:	e046      	b.n	8005710 <L6474_CreateInstance+0xd2>
	if ( p->getFlag == 0 )
		return 0;
#endif

#if defined(LIBL6474_STEP_ASYNC) && ( LIBL6474_STEP_ASYNC == 1 )
	if ( ( p->cancelStep == 0 ) || ( p->stepAsync == 0 ) )
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <L6474_CreateInstance+0x54>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <L6474_CreateInstance+0x58>
		return 0;
 8005692:	2300      	movs	r3, #0
 8005694:	e03c      	b.n	8005710 <L6474_CreateInstance+0xd2>
#else
	if ( p->step == 0 )
		return 0;
#endif

	L6474_Handle_t h = p->malloc(sizeof(struct L6474_Handle));
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2030      	movs	r0, #48	@ 0x30
 800569c:	4798      	blx	r3
 800569e:	6178      	str	r0, [r7, #20]
	if ( h == 0 )
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <L6474_CreateInstance+0x6c>
		return 0;
 80056a6:	2300      	movs	r3, #0
 80056a8:	e032      	b.n	8005710 <L6474_CreateInstance+0xd2>

	h->pGPO                = pGPO;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	60da      	str	r2, [r3, #12]
	h->pIO                 = pIO;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	609a      	str	r2, [r3, #8]
	h->pPWM                = pPWM;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	611a      	str	r2, [r3, #16]
#if defined(LIBL6474_STEP_ASYNC) && ( LIBL6474_STEP_ASYNC == 1 )
	h->platform.cancelStep = p->cancelStep;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	699a      	ldr	r2, [r3, #24]
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	62da      	str	r2, [r3, #44]	@ 0x2c
	h->platform.stepAsync  = p->stepAsync;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	695a      	ldr	r2, [r3, #20]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	629a      	str	r2, [r3, #40]	@ 0x28
#else
	h->platform.step       = p->step;
#endif
	h->platform.free       = p->free;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	619a      	str	r2, [r3, #24]
	h->platform.malloc     = p->malloc;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	615a      	str	r2, [r3, #20]
	h->platform.reset      = p->reset;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	68da      	ldr	r2, [r3, #12]
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	621a      	str	r2, [r3, #32]
	h->platform.sleep      = p->sleep;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	691a      	ldr	r2, [r3, #16]
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	625a      	str	r2, [r3, #36]	@ 0x24
	h->platform.transfer   = p->transfer;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	689a      	ldr	r2, [r3, #8]
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	61da      	str	r2, [r3, #28]
	h->pending             = 0;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2200      	movs	r2, #0
 80056f8:	605a      	str	r2, [r3, #4]
	h->state               = stRESET;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2200      	movs	r2, #0
 80056fe:	701a      	strb	r2, [r3, #0]

	h->platform.reset(h->pGPO, 1);
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	68d2      	ldr	r2, [r2, #12]
 8005708:	2101      	movs	r1, #1
 800570a:	4610      	mov	r0, r2
 800570c:	4798      	blx	r3

	(void)L6474_NopCommand;
	return h;
 800570e:	697b      	ldr	r3, [r7, #20]
}
 8005710:	4618      	mov	r0, r3
 8005712:	3718      	adds	r7, #24
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <L6474_ResetStandBy>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_ResetStandBy(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
	if ( h == 0 )
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d102      	bne.n	800572c <L6474_ResetStandBy+0x14>
		return errcNULL_ARG;
 8005726:	f06f 0301 	mvn.w	r3, #1
 800572a:	e040      	b.n	80057ae <L6474_ResetStandBy+0x96>

	if ( L6474_HelperLock(h) != 0 )
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f7ff fd25 	bl	800517c <L6474_HelperLock>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d002      	beq.n	800573e <L6474_ResetStandBy+0x26>
		return errcLOCKING;
 8005738:	f06f 0304 	mvn.w	r3, #4
 800573c:	e037      	b.n	80057ae <L6474_ResetStandBy+0x96>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7ff fd42 	bl	80051c8 <L6474_GetStatusCommand>

	if ( h->state == stENABLED )
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b02      	cmp	r3, #2
 800574a:	d11e      	bne.n	800578a <L6474_ResetStandBy+0x72>
	{
#if defined(LIBL6474_STEP_ASYNC) && ( LIBL6474_STEP_ASYNC == 1 )
		if ( h->pending != 0 )
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00c      	beq.n	800576e <L6474_ResetStandBy+0x56>
		{
			h->platform.cancelStep(h->pPWM);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6912      	ldr	r2, [r2, #16]
 800575c:	4610      	mov	r0, r2
 800575e:	4798      	blx	r3
			h->platform.sleep(IN_MILLISEC(1));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005764:	2001      	movs	r0, #1
 8005766:	4798      	blx	r3
			h->pending = 0;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	605a      	str	r2, [r3, #4]
		}
#endif

		int ret = 0;
 800576e:	2300      	movs	r3, #0
 8005770:	60fb      	str	r3, [r7, #12]
		if ( ( ret = L6474_DisableCommand(h) ) != 0 )
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7ff ff1d 	bl	80055b2 <L6474_DisableCommand>
 8005778:	60f8      	str	r0, [r7, #12]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d004      	beq.n	800578a <L6474_ResetStandBy+0x72>
		{
			L6474_HelperUnlock(h);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7ff fd06 	bl	8005192 <L6474_HelperUnlock>
			return ret;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	e011      	b.n	80057ae <L6474_ResetStandBy+0x96>
		}
	}

	h->platform.reset(h->pGPO, 1);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	68d2      	ldr	r2, [r2, #12]
 8005792:	2101      	movs	r1, #1
 8005794:	4610      	mov	r0, r2
 8005796:	4798      	blx	r3
	h->state = stRESET;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	701a      	strb	r2, [r3, #0]

	h->platform.sleep(IN_MILLISEC(1));
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a2:	2001      	movs	r0, #1
 80057a4:	4798      	blx	r3
	L6474_HelperUnlock(h);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7ff fcf3 	bl	8005192 <L6474_HelperUnlock>

	return errcNONE;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <L6474_SetBaseParameter>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_SetBaseParameter(L6474_BaseParameter_t* p)
// --------------------------------------------------------------------------------------------------------------------
{
 80057b6:	b480      	push	{r7}
 80057b8:	b083      	sub	sp, #12
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
	if ( p == 0 )
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d102      	bne.n	80057ca <L6474_SetBaseParameter+0x14>
		return errcNULL_ARG;
 80057c4:	f06f 0301 	mvn.w	r3, #1
 80057c8:	e012      	b.n	80057f0 <L6474_SetBaseParameter+0x3a>

	p->OcdTh      = ocdth1500mA;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2203      	movs	r2, #3
 80057ce:	705a      	strb	r2, [r3, #1]
	p->TorqueVal  = 0x26; // ~1,2A
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2226      	movs	r2, #38	@ 0x26
 80057d4:	711a      	strb	r2, [r3, #4]
	p->stepMode   = smMICRO16;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2204      	movs	r2, #4
 80057da:	701a      	strb	r2, [r3, #0]
	p->TimeOnMin  = 0x29;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2229      	movs	r2, #41	@ 0x29
 80057e0:	709a      	strb	r2, [r3, #2]
	p->TimeOffMin = 0x29;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2229      	movs	r2, #41	@ 0x29
 80057e6:	70da      	strb	r2, [r3, #3]
	p->TFast      = 0x14; //0x19
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2214      	movs	r2, #20
 80057ec:	715a      	strb	r2, [r3, #5]

	return errcNONE;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <L6474_Initialize>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_Initialize(L6474_Handle_t h, L6474_BaseParameter_t* p)
// --------------------------------------------------------------------------------------------------------------------
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
	int val = 0;
 8005806:	2300      	movs	r3, #0
 8005808:	60fb      	str	r3, [r7, #12]

	if ( h == 0 || p == 0 )
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d002      	beq.n	8005816 <L6474_Initialize+0x1a>
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d102      	bne.n	800581c <L6474_Initialize+0x20>
		return errcNULL_ARG;
 8005816:	f06f 0301 	mvn.w	r3, #1
 800581a:	e130      	b.n	8005a7e <L6474_Initialize+0x282>

	if ( L6474_HelperLock(h) != 0 )
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7ff fcad 	bl	800517c <L6474_HelperLock>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d002      	beq.n	800582e <L6474_Initialize+0x32>
		return errcLOCKING;
 8005828:	f06f 0304 	mvn.w	r3, #4
 800582c:	e127      	b.n	8005a7e <L6474_Initialize+0x282>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff fcca 	bl	80051c8 <L6474_GetStatusCommand>

	if ( h->state != stRESET )
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00b      	beq.n	8005854 <L6474_Initialize+0x58>
	{
		if ( ( val = L6474_ResetStandBy(h) ) != 0 )
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f7ff ff6b 	bl	8005718 <L6474_ResetStandBy>
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d004      	beq.n	8005854 <L6474_Initialize+0x58>
		{
			L6474_HelperUnlock(h);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f7ff fca1 	bl	8005192 <L6474_HelperUnlock>
			return val;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	e114      	b.n	8005a7e <L6474_Initialize+0x282>
		}
	}

	h->platform.reset(h->pGPO, 0);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a1b      	ldr	r3, [r3, #32]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	68d2      	ldr	r2, [r2, #12]
 800585c:	2100      	movs	r1, #0
 800585e:	4610      	mov	r0, r2
 8005860:	4798      	blx	r3
	h->state = stDISABLED;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2201      	movs	r2, #1
 8005866:	701a      	strb	r2, [r3, #0]

	h->platform.sleep(IN_MILLISEC(10));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586c:	200a      	movs	r0, #10
 800586e:	4798      	blx	r3

	//Now we have to write the configuration register
	unsigned int CONFIG = 0x2E88; // reset default value
 8005870:	f642 6388 	movw	r3, #11912	@ 0x2e88
 8005874:	60bb      	str	r3, [r7, #8]
	CONFIG &= ~0xF; // disables all clock outputs and selects internal oscillator
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	f023 030f 	bic.w	r3, r3, #15
 800587c:	60bb      	str	r3, [r7, #8]

#if defined(LIBL6474_DISABLE_OCD) && ( LIBL6474_DISABLE_OCD == 1 )
	CONFIG &= ~(1 << 7); // disable the OCD
#endif

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_CONFIG, CONFIG) ) != 0 )
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	461a      	mov	r2, r3
 8005882:	2118      	movs	r1, #24
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7ff fd93 	bl	80053b0 <L6474_SetParamCommand>
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00e      	beq.n	80058b0 <L6474_Initialize+0xb4>
	{
		h->platform.reset(h->pGPO, 1);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	68d2      	ldr	r2, [r2, #12]
 800589a:	2101      	movs	r1, #1
 800589c:	4610      	mov	r0, r2
 800589e:	4798      	blx	r3
		h->state = stRESET;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7ff fc73 	bl	8005192 <L6474_HelperUnlock>
		return val;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	e0e6      	b.n	8005a7e <L6474_Initialize+0x282>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_OCD_TH, p->OcdTh) ) != 0 )
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	785b      	ldrb	r3, [r3, #1]
 80058b4:	461a      	mov	r2, r3
 80058b6:	2113      	movs	r1, #19
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f7ff fd79 	bl	80053b0 <L6474_SetParamCommand>
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00e      	beq.n	80058e4 <L6474_Initialize+0xe8>
	{
		h->platform.reset(h->pGPO, 1);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	68d2      	ldr	r2, [r2, #12]
 80058ce:	2101      	movs	r1, #1
 80058d0:	4610      	mov	r0, r2
 80058d2:	4798      	blx	r3
		h->state = stRESET;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7ff fc59 	bl	8005192 <L6474_HelperUnlock>
		return val;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	e0cc      	b.n	8005a7e <L6474_Initialize+0x282>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_TVAL, p->TorqueVal) ) != 0 )
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	791b      	ldrb	r3, [r3, #4]
 80058e8:	461a      	mov	r2, r3
 80058ea:	2109      	movs	r1, #9
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7ff fd5f 	bl	80053b0 <L6474_SetParamCommand>
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00e      	beq.n	8005918 <L6474_Initialize+0x11c>
	{
		h->platform.reset(h->pGPO, 1);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	68d2      	ldr	r2, [r2, #12]
 8005902:	2101      	movs	r1, #1
 8005904:	4610      	mov	r0, r2
 8005906:	4798      	blx	r3
		h->state = stRESET;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7ff fc3f 	bl	8005192 <L6474_HelperUnlock>
		return val;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	e0b2      	b.n	8005a7e <L6474_Initialize+0x282>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_TOFF_MIN, p->TimeOffMin) ) != 0 )
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	78db      	ldrb	r3, [r3, #3]
 800591c:	461a      	mov	r2, r3
 800591e:	2110      	movs	r1, #16
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f7ff fd45 	bl	80053b0 <L6474_SetParamCommand>
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00e      	beq.n	800594c <L6474_Initialize+0x150>
	{
		h->platform.reset(h->pGPO, 1);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	68d2      	ldr	r2, [r2, #12]
 8005936:	2101      	movs	r1, #1
 8005938:	4610      	mov	r0, r2
 800593a:	4798      	blx	r3
		h->state = stRESET;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7ff fc25 	bl	8005192 <L6474_HelperUnlock>
		return val;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	e098      	b.n	8005a7e <L6474_Initialize+0x282>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_TON_MIN, p->TimeOnMin) ) != 0 )
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	789b      	ldrb	r3, [r3, #2]
 8005950:	461a      	mov	r2, r3
 8005952:	210f      	movs	r1, #15
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7ff fd2b 	bl	80053b0 <L6474_SetParamCommand>
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00e      	beq.n	8005980 <L6474_Initialize+0x184>
	{
		h->platform.reset(h->pGPO, 1);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	68d2      	ldr	r2, [r2, #12]
 800596a:	2101      	movs	r1, #1
 800596c:	4610      	mov	r0, r2
 800596e:	4798      	blx	r3
		h->state = stRESET;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7ff fc0b 	bl	8005192 <L6474_HelperUnlock>
		return val;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	e07e      	b.n	8005a7e <L6474_Initialize+0x282>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_T_FAST, p->TFast) ) != 0 )
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	795b      	ldrb	r3, [r3, #5]
 8005984:	461a      	mov	r2, r3
 8005986:	210e      	movs	r1, #14
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7ff fd11 	bl	80053b0 <L6474_SetParamCommand>
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00e      	beq.n	80059b4 <L6474_Initialize+0x1b8>
	{
		h->platform.reset(h->pGPO, 1);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	68d2      	ldr	r2, [r2, #12]
 800599e:	2101      	movs	r1, #1
 80059a0:	4610      	mov	r0, r2
 80059a2:	4798      	blx	r3
		h->state = stRESET;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7ff fbf1 	bl	8005192 <L6474_HelperUnlock>
		return val;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	e064      	b.n	8005a7e <L6474_Initialize+0x282>
	}

	if ( ( val = L6474_SetStepMode(h, p->stepMode) ) != 0 )
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	4619      	mov	r1, r3
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f863 	bl	8005a86 <L6474_SetStepMode>
 80059c0:	60f8      	str	r0, [r7, #12]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00e      	beq.n	80059e6 <L6474_Initialize+0x1ea>
	{
		h->platform.reset(h->pGPO, 1);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	68d2      	ldr	r2, [r2, #12]
 80059d0:	2101      	movs	r1, #1
 80059d2:	4610      	mov	r0, r2
 80059d4:	4798      	blx	r3
		h->state = stRESET;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f7ff fbd8 	bl	8005192 <L6474_HelperUnlock>
		return val;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	e04b      	b.n	8005a7e <L6474_Initialize+0x282>
	}

	// enable all alarms
	if ( ( val = L6474_SetParamCommand(h, STEP_REG_ALARM_EN, STEP_MASK_ALARM_EN) ) != 0 )
 80059e6:	22ff      	movs	r2, #255	@ 0xff
 80059e8:	2117      	movs	r1, #23
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7ff fce0 	bl	80053b0 <L6474_SetParamCommand>
 80059f0:	60f8      	str	r0, [r7, #12]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00e      	beq.n	8005a16 <L6474_Initialize+0x21a>
	{
		h->platform.reset(h->pGPO, 1);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	68d2      	ldr	r2, [r2, #12]
 8005a00:	2101      	movs	r1, #1
 8005a02:	4610      	mov	r0, r2
 8005a04:	4798      	blx	r3
		h->state = stRESET;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f7ff fbc0 	bl	8005192 <L6474_HelperUnlock>
		return val;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	e033      	b.n	8005a7e <L6474_Initialize+0x282>
	}

	if ( ( val = L6474_DisableCommand(h) ) != 0 )
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7ff fdcb 	bl	80055b2 <L6474_DisableCommand>
 8005a1c:	60f8      	str	r0, [r7, #12]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00e      	beq.n	8005a42 <L6474_Initialize+0x246>
	{
		h->platform.reset(h->pGPO, 1);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	68d2      	ldr	r2, [r2, #12]
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	4610      	mov	r0, r2
 8005a30:	4798      	blx	r3
		h->state = stRESET;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7ff fbaa 	bl	8005192 <L6474_HelperUnlock>
		return val;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	e01d      	b.n	8005a7e <L6474_Initialize+0x282>
	}

	// now it should not fail when reading status register!
	if ( ( val = L6474_GetStatusCommand(h) ) < 0 )
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f7ff fbc0 	bl	80051c8 <L6474_GetStatusCommand>
 8005a48:	60f8      	str	r0, [r7, #12]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	da0e      	bge.n	8005a6e <L6474_Initialize+0x272>
	{
		h->platform.reset(h->pGPO, 1);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	68d2      	ldr	r2, [r2, #12]
 8005a58:	2101      	movs	r1, #1
 8005a5a:	4610      	mov	r0, r2
 8005a5c:	4798      	blx	r3
		h->state = stRESET;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f7ff fb94 	bl	8005192 <L6474_HelperUnlock>
		return val;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	e007      	b.n	8005a7e <L6474_Initialize+0x282>
	}

	L6474_GetParamCommand(h, STEP_REG_CONFIG);
 8005a6e:	2118      	movs	r1, #24
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f7ff fbed 	bl	8005250 <L6474_GetParamCommand>

	L6474_HelperUnlock(h);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7ff fb8b 	bl	8005192 <L6474_HelperUnlock>
	return errcNONE;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <L6474_SetStepMode>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_SetStepMode(L6474_Handle_t h, L6474x_StepMode_t mode)
// --------------------------------------------------------------------------------------------------------------------
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b084      	sub	sp, #16
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	460b      	mov	r3, r1
 8005a90:	70fb      	strb	r3, [r7, #3]
	int val = 0;
 8005a92:	2300      	movs	r3, #0
 8005a94:	60fb      	str	r3, [r7, #12]

	if ( h == 0 )
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d102      	bne.n	8005aa2 <L6474_SetStepMode+0x1c>
		return errcNULL_ARG;
 8005a9c:	f06f 0301 	mvn.w	r3, #1
 8005aa0:	e032      	b.n	8005b08 <L6474_SetStepMode+0x82>

	if ( mode > smMICRO16 )
 8005aa2:	78fb      	ldrb	r3, [r7, #3]
 8005aa4:	2b04      	cmp	r3, #4
 8005aa6:	d902      	bls.n	8005aae <L6474_SetStepMode+0x28>
		return errcINV_ARG;
 8005aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8005aac:	e02c      	b.n	8005b08 <L6474_SetStepMode+0x82>

	// set this bit. is described in the spec.
	mode |= ( 1 << 3 );
 8005aae:	78fb      	ldrb	r3, [r7, #3]
 8005ab0:	f043 0308 	orr.w	r3, r3, #8
 8005ab4:	70fb      	strb	r3, [r7, #3]

	if ( L6474_HelperLock(h) != 0 )
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7ff fb60 	bl	800517c <L6474_HelperLock>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d002      	beq.n	8005ac8 <L6474_SetStepMode+0x42>
		return errcLOCKING;
 8005ac2:	f06f 0304 	mvn.w	r3, #4
 8005ac6:	e01f      	b.n	8005b08 <L6474_SetStepMode+0x82>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f7ff fb7d 	bl	80051c8 <L6474_GetStatusCommand>

	if ( h->state == stRESET )
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d105      	bne.n	8005ae2 <L6474_SetStepMode+0x5c>
	{
		L6474_HelperUnlock(h);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7ff fb5b 	bl	8005192 <L6474_HelperUnlock>
		return errcINV_STATE;
 8005adc:	f06f 0302 	mvn.w	r3, #2
 8005ae0:	e012      	b.n	8005b08 <L6474_SetStepMode+0x82>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_STEP_MODE, ( ( mode & STEP_MASK_STEP_MODE ) << STEP_OFFSET_STEP_MODE ) ) ) != 0 )
 8005ae2:	78fb      	ldrb	r3, [r7, #3]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	2116      	movs	r1, #22
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f7ff fc61 	bl	80053b0 <L6474_SetParamCommand>
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d004      	beq.n	8005b00 <L6474_SetStepMode+0x7a>
	{
		L6474_HelperUnlock(h);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7ff fb4b 	bl	8005192 <L6474_HelperUnlock>
		return val;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	e003      	b.n	8005b08 <L6474_SetStepMode+0x82>
	}

	L6474_HelperUnlock(h);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f7ff fb46 	bl	8005192 <L6474_HelperUnlock>
	return errcNONE;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <L6474_SetPowerOutputs>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_SetPowerOutputs(L6474_Handle_t h, int ena)
// --------------------------------------------------------------------------------------------------------------------
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
	int val = 0;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60fb      	str	r3, [r7, #12]

	if ( h == 0 )
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d102      	bne.n	8005b2a <L6474_SetPowerOutputs+0x1a>
		return errcNULL_ARG;
 8005b24:	f06f 0301 	mvn.w	r3, #1
 8005b28:	e02e      	b.n	8005b88 <L6474_SetPowerOutputs+0x78>

	if ( L6474_HelperLock(h) != 0 )
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7ff fb26 	bl	800517c <L6474_HelperLock>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <L6474_SetPowerOutputs+0x2c>
		return errcLOCKING;
 8005b36:	f06f 0304 	mvn.w	r3, #4
 8005b3a:	e025      	b.n	8005b88 <L6474_SetPowerOutputs+0x78>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f7ff fb43 	bl	80051c8 <L6474_GetStatusCommand>

	if ( h->state == stRESET )
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d105      	bne.n	8005b56 <L6474_SetPowerOutputs+0x46>
	{
		L6474_HelperUnlock(h);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7ff fb21 	bl	8005192 <L6474_HelperUnlock>
		return errcINV_STATE;
 8005b50:	f06f 0302 	mvn.w	r3, #2
 8005b54:	e018      	b.n	8005b88 <L6474_SetPowerOutputs+0x78>
	}

	if ( ( val = ( ( ( !!ena ) == 0 ) ? L6474_DisableCommand(h) : L6474_EnableCommand(h) ) ) != 0 )
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d104      	bne.n	8005b66 <L6474_SetPowerOutputs+0x56>
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7ff fd28 	bl	80055b2 <L6474_DisableCommand>
 8005b62:	4603      	mov	r3, r0
 8005b64:	e003      	b.n	8005b6e <L6474_SetPowerOutputs+0x5e>
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7ff fce0 	bl	800552c <L6474_EnableCommand>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	60fb      	str	r3, [r7, #12]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d004      	beq.n	8005b80 <L6474_SetPowerOutputs+0x70>
	{
		L6474_HelperUnlock(h);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7ff fb0b 	bl	8005192 <L6474_HelperUnlock>
		return val;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	e003      	b.n	8005b88 <L6474_SetPowerOutputs+0x78>
	}

	L6474_HelperUnlock(h);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f7ff fb06 	bl	8005192 <L6474_HelperUnlock>
	return errcNONE;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <L6474_GetAbsolutePosition>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_GetAbsolutePosition(L6474_Handle_t h, int* position)
// --------------------------------------------------------------------------------------------------------------------
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
	int val = 0;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	60fb      	str	r3, [r7, #12]

	if ( h == 0 || position == 0 )
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d002      	beq.n	8005baa <L6474_GetAbsolutePosition+0x1a>
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d102      	bne.n	8005bb0 <L6474_GetAbsolutePosition+0x20>
		return errcNULL_ARG;
 8005baa:	f06f 0301 	mvn.w	r3, #1
 8005bae:	e034      	b.n	8005c1a <L6474_GetAbsolutePosition+0x8a>

	if ( L6474_HelperLock(h) != 0 )
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f7ff fae3 	bl	800517c <L6474_HelperLock>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d002      	beq.n	8005bc2 <L6474_GetAbsolutePosition+0x32>
		return errcLOCKING;
 8005bbc:	f06f 0304 	mvn.w	r3, #4
 8005bc0:	e02b      	b.n	8005c1a <L6474_GetAbsolutePosition+0x8a>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7ff fb00 	bl	80051c8 <L6474_GetStatusCommand>

	if ( h->state == stRESET )
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d105      	bne.n	8005bdc <L6474_GetAbsolutePosition+0x4c>
	{
		L6474_HelperUnlock(h);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7ff fade 	bl	8005192 <L6474_HelperUnlock>
		return errcINV_STATE;
 8005bd6:	f06f 0302 	mvn.w	r3, #2
 8005bda:	e01e      	b.n	8005c1a <L6474_GetAbsolutePosition+0x8a>
	}

	if ( ( val = L6474_GetParamCommand(h, STEP_REG_ABS_POS) ) < 0 )
 8005bdc:	2101      	movs	r1, #1
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7ff fb36 	bl	8005250 <L6474_GetParamCommand>
 8005be4:	60f8      	str	r0, [r7, #12]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	da04      	bge.n	8005bf6 <L6474_GetAbsolutePosition+0x66>
	{
		L6474_HelperUnlock(h);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f7ff fad0 	bl	8005192 <L6474_HelperUnlock>
		return val;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	e011      	b.n	8005c1a <L6474_GetAbsolutePosition+0x8a>
	}

	if (val & HIGH_POS_BIT)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d005      	beq.n	8005c0c <L6474_GetAbsolutePosition+0x7c>
		val = -(((~val) + 1) & HIGH_POS_MASK);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	425b      	negs	r3, r3
 8005c04:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005c08:	425b      	negs	r3, r3
 8005c0a:	60fb      	str	r3, [r7, #12]
	*position = val;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	601a      	str	r2, [r3, #0]


	L6474_HelperUnlock(h);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7ff fabd 	bl	8005192 <L6474_HelperUnlock>
	return errcNONE;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <L6474_SetAbsolutePosition>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_SetAbsolutePosition(L6474_Handle_t h, int position)
// --------------------------------------------------------------------------------------------------------------------
{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b084      	sub	sp, #16
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
 8005c2a:	6039      	str	r1, [r7, #0]
	int val = 0;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60fb      	str	r3, [r7, #12]

	if ( h == 0 )
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d102      	bne.n	8005c3c <L6474_SetAbsolutePosition+0x1a>
		return errcNULL_ARG;
 8005c36:	f06f 0301 	mvn.w	r3, #1
 8005c3a:	e027      	b.n	8005c8c <L6474_SetAbsolutePosition+0x6a>

	if ( L6474_HelperLock(h) != 0 )
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f7ff fa9d 	bl	800517c <L6474_HelperLock>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <L6474_SetAbsolutePosition+0x2c>
		return errcLOCKING;
 8005c48:	f06f 0304 	mvn.w	r3, #4
 8005c4c:	e01e      	b.n	8005c8c <L6474_SetAbsolutePosition+0x6a>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7ff faba 	bl	80051c8 <L6474_GetStatusCommand>

	if ( h->state == stRESET )
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d105      	bne.n	8005c68 <L6474_SetAbsolutePosition+0x46>
	{
		L6474_HelperUnlock(h);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7ff fa98 	bl	8005192 <L6474_HelperUnlock>
		return errcINV_STATE;
 8005c62:	f06f 0302 	mvn.w	r3, #2
 8005c66:	e011      	b.n	8005c8c <L6474_SetAbsolutePosition+0x6a>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_ABS_POS, position) ) != 0 )
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	2101      	movs	r1, #1
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7ff fb9f 	bl	80053b0 <L6474_SetParamCommand>
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d004      	beq.n	8005c84 <L6474_SetAbsolutePosition+0x62>
	{
		L6474_HelperUnlock(h);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7ff fa89 	bl	8005192 <L6474_HelperUnlock>
		return val;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	e003      	b.n	8005c8c <L6474_SetAbsolutePosition+0x6a>
	}

	L6474_HelperUnlock(h);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f7ff fa84 	bl	8005192 <L6474_HelperUnlock>
	return errcNONE;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <L6474_SetProperty>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_SetProperty(L6474_Handle_t h, L6474_Property_t prop, int value)
// -------------------------------------------------------------------------------------------------------------------
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	72fb      	strb	r3, [r7, #11]
	int val = 0;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	617b      	str	r3, [r7, #20]

	if ( h == 0 )
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d102      	bne.n	8005cb2 <L6474_SetProperty+0x1e>
		return errcNULL_ARG;
 8005cac:	f06f 0301 	mvn.w	r3, #1
 8005cb0:	e028      	b.n	8005d04 <L6474_SetProperty+0x70>

	if ( L6474_HelperLock(h) != 0 )
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f7ff fa62 	bl	800517c <L6474_HelperLock>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <L6474_SetProperty+0x30>
		return errcLOCKING;
 8005cbe:	f06f 0304 	mvn.w	r3, #4
 8005cc2:	e01f      	b.n	8005d04 <L6474_SetProperty+0x70>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f7ff fa7f 	bl	80051c8 <L6474_GetStatusCommand>

	if ( h->state == stRESET )
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d105      	bne.n	8005cde <L6474_SetProperty+0x4a>
	{
		L6474_HelperUnlock(h);
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f7ff fa5d 	bl	8005192 <L6474_HelperUnlock>
		return errcINV_STATE;
 8005cd8:	f06f 0302 	mvn.w	r3, #2
 8005cdc:	e012      	b.n	8005d04 <L6474_SetProperty+0x70>
	}

	if ( ( val = L6474_SetParamCommand(h, prop, value) ) != 0 )
 8005cde:	7afb      	ldrb	r3, [r7, #11]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f7ff fb63 	bl	80053b0 <L6474_SetParamCommand>
 8005cea:	6178      	str	r0, [r7, #20]
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d004      	beq.n	8005cfc <L6474_SetProperty+0x68>
	{
		L6474_HelperUnlock(h);
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f7ff fa4d 	bl	8005192 <L6474_HelperUnlock>
		return val;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	e003      	b.n	8005d04 <L6474_SetProperty+0x70>
	}

	L6474_HelperUnlock(h);
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f7ff fa48 	bl	8005192 <L6474_HelperUnlock>
	return errcNONE;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3718      	adds	r7, #24
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <L6474_GetProperty>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_GetProperty(L6474_Handle_t h, L6474_Property_t prop, int* value)
// --------------------------------------------------------------------------------------------------------------------
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	460b      	mov	r3, r1
 8005d16:	607a      	str	r2, [r7, #4]
 8005d18:	72fb      	strb	r3, [r7, #11]
	int val = 0;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	617b      	str	r3, [r7, #20]

	if ( h == 0 )
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d102      	bne.n	8005d2a <L6474_GetProperty+0x1e>
		return errcNULL_ARG;
 8005d24:	f06f 0301 	mvn.w	r3, #1
 8005d28:	e02a      	b.n	8005d80 <L6474_GetProperty+0x74>

	if ( L6474_HelperLock(h) != 0 )
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f7ff fa26 	bl	800517c <L6474_HelperLock>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d002      	beq.n	8005d3c <L6474_GetProperty+0x30>
		return errcLOCKING;
 8005d36:	f06f 0304 	mvn.w	r3, #4
 8005d3a:	e021      	b.n	8005d80 <L6474_GetProperty+0x74>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f7ff fa43 	bl	80051c8 <L6474_GetStatusCommand>

	if ( h->state == stRESET )
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d105      	bne.n	8005d56 <L6474_GetProperty+0x4a>
	{
		L6474_HelperUnlock(h);
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f7ff fa21 	bl	8005192 <L6474_HelperUnlock>
		return errcINV_STATE;
 8005d50:	f06f 0302 	mvn.w	r3, #2
 8005d54:	e014      	b.n	8005d80 <L6474_GetProperty+0x74>
	}

	if ( ( val = L6474_GetParamCommand(h, prop) ) < 0 )
 8005d56:	7afb      	ldrb	r3, [r7, #11]
 8005d58:	4619      	mov	r1, r3
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f7ff fa78 	bl	8005250 <L6474_GetParamCommand>
 8005d60:	6178      	str	r0, [r7, #20]
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	da04      	bge.n	8005d72 <L6474_GetProperty+0x66>
	{
		L6474_HelperUnlock(h);
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f7ff fa12 	bl	8005192 <L6474_HelperUnlock>
		return val;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	e006      	b.n	8005d80 <L6474_GetProperty+0x74>
	}

	*value = val;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	601a      	str	r2, [r3, #0]
	L6474_HelperUnlock(h);
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f7ff fa0a 	bl	8005192 <L6474_HelperUnlock>
	return errcNONE;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3718      	adds	r7, #24
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <L6474_GetStatus>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_GetStatus(L6474_Handle_t h, L6474_Status_t* status)
// --------------------------------------------------------------------------------------------------------------------
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
	int val = 0;
 8005d92:	2300      	movs	r3, #0
 8005d94:	60fb      	str	r3, [r7, #12]

	if ( h == 0 )
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d102      	bne.n	8005da2 <L6474_GetStatus+0x1a>
		return errcNULL_ARG;
 8005d9c:	f06f 0301 	mvn.w	r3, #1
 8005da0:	e07b      	b.n	8005e9a <L6474_GetStatus+0x112>

	if (status == 0 )
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d102      	bne.n	8005dae <L6474_GetStatus+0x26>
		return errcNULL_ARG;
 8005da8:	f06f 0301 	mvn.w	r3, #1
 8005dac:	e075      	b.n	8005e9a <L6474_GetStatus+0x112>

	if ( L6474_HelperLock(h) != 0 )
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7ff f9e4 	bl	800517c <L6474_HelperLock>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d002      	beq.n	8005dc0 <L6474_GetStatus+0x38>
		return errcLOCKING;
 8005dba:	f06f 0304 	mvn.w	r3, #4
 8005dbe:	e06c      	b.n	8005e9a <L6474_GetStatus+0x112>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f7ff fa01 	bl	80051c8 <L6474_GetStatusCommand>

	if ( ( val = ( L6474_GetStatusCommand(h) ) ) < 0 )
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7ff f9fe 	bl	80051c8 <L6474_GetStatusCommand>
 8005dcc:	60f8      	str	r0, [r7, #12]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	da04      	bge.n	8005dde <L6474_GetStatus+0x56>
	{
		L6474_HelperUnlock(h);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f7ff f9dc 	bl	8005192 <L6474_HelperUnlock>
		return val;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	e05d      	b.n	8005e9a <L6474_GetStatus+0x112>
	}

	if ( h->state == stRESET )
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d105      	bne.n	8005df2 <L6474_GetStatus+0x6a>
	{
		L6474_HelperUnlock(h);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7ff f9d3 	bl	8005192 <L6474_HelperUnlock>
		return errcINV_STATE;
 8005dec:	f06f 0302 	mvn.w	r3, #2
 8005df0:	e053      	b.n	8005e9a <L6474_GetStatus+0x112>
	}

	status->HIGHZ       = (val & STATUS_HIGHZ_MASK)       ? 1 : 0;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	b2da      	uxtb	r2, r3
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	701a      	strb	r2, [r3, #0]
	status->DIR         = (val & STATUS_DIRECTION_MASK)   ? 1 : 0;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	111b      	asrs	r3, r3, #4
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	b2da      	uxtb	r2, r3
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	705a      	strb	r2, [r3, #1]
	status->NOTPERF_CMD = (val & STATUS_NOTPERF_CMD_MASK) ? 1 : 0;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	11db      	asrs	r3, r3, #7
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	b2da      	uxtb	r2, r3
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	709a      	strb	r2, [r3, #2]
	status->WRONG_CMD   = (val & STATUS_WRONG_CMD_MASK)   ? 1 : 0;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	121b      	asrs	r3, r3, #8
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	70da      	strb	r2, [r3, #3]
	status->UVLO        = (val & STATUS_UNDERVOLT_MASK)   ? 0 : 1;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	bf0c      	ite	eq
 8005e3a:	2301      	moveq	r3, #1
 8005e3c:	2300      	movne	r3, #0
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	461a      	mov	r2, r3
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	711a      	strb	r2, [r3, #4]
	status->TH_WARN     = (val & STATUS_THR_WARN_MASK)    ? 0 : 1;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	bf0c      	ite	eq
 8005e50:	2301      	moveq	r3, #1
 8005e52:	2300      	movne	r3, #0
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	461a      	mov	r2, r3
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	715a      	strb	r2, [r3, #5]
	status->TH_SD       = (val & STATUS_THR_SHORTD_MASK)  ? 0 : 1;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	bf0c      	ite	eq
 8005e66:	2301      	moveq	r3, #1
 8005e68:	2300      	movne	r3, #0
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	719a      	strb	r2, [r3, #6]
	status->OCD         = (val & STATUS_OCD_MASK)         ? 0 : 1;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	bf0c      	ite	eq
 8005e7c:	2301      	moveq	r3, #1
 8005e7e:	2300      	movne	r3, #0
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	461a      	mov	r2, r3
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	71da      	strb	r2, [r3, #7]
	status->ONGOING     = h->pending;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	b2da      	uxtb	r2, r3
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	721a      	strb	r2, [r3, #8]

	L6474_HelperUnlock(h);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7ff f97d 	bl	8005192 <L6474_HelperUnlock>
	return errcNONE;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
	...

08005ea4 <L6474_StepIncremental>:
}

// --------------------------------------------------------------------------------------------------------------------
int L6474_StepIncremental(L6474_Handle_t h, int steps )
// --------------------------------------------------------------------------------------------------------------------
{
 8005ea4:	b590      	push	{r4, r7, lr}
 8005ea6:	b087      	sub	sp, #28
 8005ea8:	af02      	add	r7, sp, #8
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
	if ( h == 0 )
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d102      	bne.n	8005eba <L6474_StepIncremental+0x16>
		return errcNULL_ARG;
 8005eb4:	f06f 0301 	mvn.w	r3, #1
 8005eb8:	e050      	b.n	8005f5c <L6474_StepIncremental+0xb8>

	if ( steps == 0 )
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d102      	bne.n	8005ec6 <L6474_StepIncremental+0x22>
		return errcNULL_ARG;
 8005ec0:	f06f 0301 	mvn.w	r3, #1
 8005ec4:	e04a      	b.n	8005f5c <L6474_StepIncremental+0xb8>

	if ( L6474_HelperLock(h) != 0 )
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7ff f958 	bl	800517c <L6474_HelperLock>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <L6474_StepIncremental+0x34>
		return errcLOCKING;
 8005ed2:	f06f 0304 	mvn.w	r3, #4
 8005ed6:	e041      	b.n	8005f5c <L6474_StepIncremental+0xb8>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f7ff f975 	bl	80051c8 <L6474_GetStatusCommand>

	if ( h->state != stENABLED )
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d005      	beq.n	8005ef2 <L6474_StepIncremental+0x4e>
	{
		L6474_HelperUnlock(h);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7ff f953 	bl	8005192 <L6474_HelperUnlock>
		return errcINV_STATE;
 8005eec:	f06f 0302 	mvn.w	r3, #2
 8005ef0:	e034      	b.n	8005f5c <L6474_StepIncremental+0xb8>
	}

	if ( h->pending != 0 )
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d005      	beq.n	8005f06 <L6474_StepIncremental+0x62>
	{
		L6474_HelperUnlock(h);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7ff f949 	bl	8005192 <L6474_HelperUnlock>
		return errcPENDING;
 8005f00:	f06f 0306 	mvn.w	r3, #6
 8005f04:	e02a      	b.n	8005f5c <L6474_StepIncremental+0xb8>
	}

	int ret = 0;
 8005f06:	2300      	movs	r3, #0
 8005f08:	60fb      	str	r3, [r7, #12]
#if defined(LIBL6474_STEP_ASYNC) && ( LIBL6474_STEP_ASYNC == 1 )
	h->pending = 1;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	605a      	str	r2, [r3, #4]
	if ( ( ret = h->platform.stepAsync(h->pPWM, steps >= 0, ( ( steps < 0 ) ? -steps : steps ), L6474_HelperReleaseStep, h) ) != 0 )
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6918      	ldr	r0, [r3, #16]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	43db      	mvns	r3, r3
 8005f1c:	0fdb      	lsrs	r3, r3, #31
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	4619      	mov	r1, r3
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	bfb8      	it	lt
 8005f28:	425b      	neglt	r3, r3
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	4b0c      	ldr	r3, [pc, #48]	@ (8005f64 <L6474_StepIncremental+0xc0>)
 8005f32:	47a0      	blx	r4
 8005f34:	60f8      	str	r0, [r7, #12]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <L6474_StepIncremental+0x9e>
	{
		h->pending = 0;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	605a      	str	r2, [r3, #4]
	(void)L6474_HelperReleaseStep;
	ret = h->platform.step(h->pPWM,  steps >= 0, ( ( steps < 0 ) ? -steps : steps ) );
	h->pending = 0;
#endif

	if ( ret != 0 )
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d005      	beq.n	8005f54 <L6474_StepIncremental+0xb0>
	{
		L6474_HelperUnlock(h);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f7ff f922 	bl	8005192 <L6474_HelperUnlock>
		return errcINTERNAL;
 8005f4e:	f06f 0303 	mvn.w	r3, #3
 8005f52:	e003      	b.n	8005f5c <L6474_StepIncremental+0xb8>
	}

	L6474_HelperUnlock(h);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f7ff f91c 	bl	8005192 <L6474_HelperUnlock>
	return errcNONE;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd90      	pop	{r4, r7, pc}
 8005f64:	080051a7 	.word	0x080051a7

08005f68 <vApplicationMallocFailedHook>:
void InitTask();


extern void initialise_stdlib_abstraction(void);
void vApplicationMallocFailedHook(void)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8005f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f72:	b672      	cpsid	i
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	b662      	cpsie	i
 8005f82:	607b      	str	r3, [r7, #4]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8005f84:	bf00      	nop
  taskDISABLE_INTERRUPTS();
  __asm volatile("bkpt #0");
 8005f86:	be00      	bkpt	0x0000
  for (;;)
 8005f88:	bf00      	nop
 8005f8a:	e7fd      	b.n	8005f88 <vApplicationMallocFailedHook+0x20>

08005f8c <vApplicationStackOverflowHook>:
    ;
  }
}
/*-----------------------------------------------------------*/
void vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
    __asm volatile
 8005f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f9a:	b672      	cpsid	i
 8005f9c:	f383 8811 	msr	BASEPRI, r3
 8005fa0:	f3bf 8f6f 	isb	sy
 8005fa4:	f3bf 8f4f 	dsb	sy
 8005fa8:	b662      	cpsie	i
 8005faa:	60fb      	str	r3, [r7, #12]
}
 8005fac:	bf00      	nop
  (void)pcTaskName;
  (void)pxTask;

  taskDISABLE_INTERRUPTS();
  __asm volatile("bkpt #0");
 8005fae:	be00      	bkpt	0x0000
  for (;;)
 8005fb0:	bf00      	nop
 8005fb2:	e7fd      	b.n	8005fb0 <vApplicationStackOverflowHook+0x24>

08005fb4 <InitTask>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void InitTask()
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af02      	add	r7, sp, #8


  consoleHandle = CONSOLE_CreateInstance(4 * configMINIMAL_STACK_SIZE, configMAX_PRIORITIES - 5);
 8005fba:	2102      	movs	r1, #2
 8005fbc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005fc0:	f7fc ff2c 	bl	8002e1c <CONSOLE_CreateInstance>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	4a0d      	ldr	r2, [pc, #52]	@ (8005ffc <InitTask+0x48>)
 8005fc8:	6013      	str	r3, [r2, #0]

  CONSOLE_RegisterCommand(consoleHandle, "capability", "Shows what the program is capable of", CapabilityFunc, NULL);
 8005fca:	4b0c      	ldr	r3, [pc, #48]	@ (8005ffc <InitTask+0x48>)
 8005fcc:	6818      	ldr	r0, [r3, #0]
 8005fce:	2300      	movs	r3, #0
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8006000 <InitTask+0x4c>)
 8005fd4:	4a0b      	ldr	r2, [pc, #44]	@ (8006004 <InitTask+0x50>)
 8005fd6:	490c      	ldr	r1, [pc, #48]	@ (8006008 <InitTask+0x54>)
 8005fd8:	f7fc ff9c 	bl	8002f14 <CONSOLE_RegisterCommand>
  
  InitStepper(consoleHandle, &hspi1, &htim1, &htim4);
 8005fdc:	4b07      	ldr	r3, [pc, #28]	@ (8005ffc <InitTask+0x48>)
 8005fde:	6818      	ldr	r0, [r3, #0]
 8005fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800600c <InitTask+0x58>)
 8005fe2:	4a0b      	ldr	r2, [pc, #44]	@ (8006010 <InitTask+0x5c>)
 8005fe4:	490b      	ldr	r1, [pc, #44]	@ (8006014 <InitTask+0x60>)
 8005fe6:	f7fe fc59 	bl	800489c <InitStepper>
  InitSpindle(consoleHandle, &htim2);
 8005fea:	4b04      	ldr	r3, [pc, #16]	@ (8005ffc <InitTask+0x48>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	490a      	ldr	r1, [pc, #40]	@ (8006018 <InitTask+0x64>)
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7fd fa27 	bl	8003444 <InitSpindle>


}
 8005ff6:	bf00      	nop
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	200004c8 	.word	0x200004c8
 8006000:	0800601d 	.word	0x0800601d
 8006004:	08019588 	.word	0x08019588
 8006008:	080195b0 	.word	0x080195b0
 800600c:	200003f4 	.word	0x200003f4
 8006010:	2000035c 	.word	0x2000035c
 8006014:	200002f8 	.word	0x200002f8
 8006018:	200003a8 	.word	0x200003a8

0800601c <CapabilityFunc>:

// -------------------------------------------------------------------------------------------------------------------
static int CapabilityFunc(int argc, char **argv, void *ctx)
// --------------------------------------------------------------------------------------------------------------------
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b09c      	sub	sp, #112	@ 0x70
 8006020:	af18      	add	r7, sp, #96	@ 0x60
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
  (void)argc;
  (void)argv;
  (void)ctx;
  printf("%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\r\nOK",
 8006028:	2300      	movs	r3, #0
 800602a:	9317      	str	r3, [sp, #92]	@ 0x5c
 800602c:	2300      	movs	r3, #0
 800602e:	9316      	str	r3, [sp, #88]	@ 0x58
 8006030:	2300      	movs	r3, #0
 8006032:	9315      	str	r3, [sp, #84]	@ 0x54
 8006034:	2300      	movs	r3, #0
 8006036:	9314      	str	r3, [sp, #80]	@ 0x50
 8006038:	2300      	movs	r3, #0
 800603a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800603c:	2300      	movs	r3, #0
 800603e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006040:	2300      	movs	r3, #0
 8006042:	9311      	str	r3, [sp, #68]	@ 0x44
 8006044:	2300      	movs	r3, #0
 8006046:	9310      	str	r3, [sp, #64]	@ 0x40
 8006048:	2300      	movs	r3, #0
 800604a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800604c:	2300      	movs	r3, #0
 800604e:	930e      	str	r3, [sp, #56]	@ 0x38
 8006050:	2300      	movs	r3, #0
 8006052:	930d      	str	r3, [sp, #52]	@ 0x34
 8006054:	2300      	movs	r3, #0
 8006056:	930c      	str	r3, [sp, #48]	@ 0x30
 8006058:	2300      	movs	r3, #0
 800605a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800605c:	2300      	movs	r3, #0
 800605e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006060:	2300      	movs	r3, #0
 8006062:	9309      	str	r3, [sp, #36]	@ 0x24
 8006064:	2300      	movs	r3, #0
 8006066:	9308      	str	r3, [sp, #32]
 8006068:	2300      	movs	r3, #0
 800606a:	9307      	str	r3, [sp, #28]
 800606c:	2300      	movs	r3, #0
 800606e:	9306      	str	r3, [sp, #24]
 8006070:	2300      	movs	r3, #0
 8006072:	9305      	str	r3, [sp, #20]
 8006074:	2300      	movs	r3, #0
 8006076:	9304      	str	r3, [sp, #16]
 8006078:	2300      	movs	r3, #0
 800607a:	9303      	str	r3, [sp, #12]
 800607c:	2300      	movs	r3, #0
 800607e:	9302      	str	r3, [sp, #8]
 8006080:	2300      	movs	r3, #0
 8006082:	9301      	str	r3, [sp, #4]
 8006084:	2300      	movs	r3, #0
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	2300      	movs	r3, #0
 800608a:	2200      	movs	r2, #0
 800608c:	2100      	movs	r1, #0
 800608e:	4804      	ldr	r0, [pc, #16]	@ (80060a0 <CapabilityFunc+0x84>)
 8006090:	f00e f9b0 	bl	80143f4 <iprintf>
         0, // has stepper config posmin
         0, // has stepper config posref
         0, // has stepper config stepsperturn
         0  // has stepper cancel
  );
  return 0;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	080195bc 	.word	0x080195bc

080060a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80060a8:	f000 fc3a 	bl	8006920 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80060ac:	f001 f96d 	bl	800738a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80060b0:	f000 f818 	bl	80060e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80060b4:	f000 fab0 	bl	8006618 <MX_GPIO_Init>
  MX_SPI1_Init();
 80060b8:	f000 f87a 	bl	80061b0 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80060bc:	f000 fa7c 	bl	80065b8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80060c0:	f000 f96a 	bl	8006398 <MX_TIM2_Init>
  MX_TIM1_Init();
 80060c4:	f000 f8b2 	bl	800622c <MX_TIM1_Init>
  MX_TIM4_Init();
 80060c8:	f000 f9e8 	bl	800649c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */


  printf("System init start\r\n");
 80060cc:	4804      	ldr	r0, [pc, #16]	@ (80060e0 <main+0x3c>)
 80060ce:	f00e fa01 	bl	80144d4 <puts>

  //(void)CapabilityFunc;

  InitTask();
 80060d2:	f7ff ff6f 	bl	8005fb4 <InitTask>
  vTaskStartScheduler();
 80060d6:	f00a f915 	bl	8010304 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80060da:	bf00      	nop
 80060dc:	e7fd      	b.n	80060da <main+0x36>
 80060de:	bf00      	nop
 80060e0:	08019614 	.word	0x08019614

080060e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b094      	sub	sp, #80	@ 0x50
 80060e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80060ea:	f107 0320 	add.w	r3, r7, #32
 80060ee:	2230      	movs	r2, #48	@ 0x30
 80060f0:	2100      	movs	r1, #0
 80060f2:	4618      	mov	r0, r3
 80060f4:	f00e fbd4 	bl	80148a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80060f8:	f107 030c 	add.w	r3, r7, #12
 80060fc:	2200      	movs	r2, #0
 80060fe:	601a      	str	r2, [r3, #0]
 8006100:	605a      	str	r2, [r3, #4]
 8006102:	609a      	str	r2, [r3, #8]
 8006104:	60da      	str	r2, [r3, #12]
 8006106:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006108:	4b27      	ldr	r3, [pc, #156]	@ (80061a8 <SystemClock_Config+0xc4>)
 800610a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610c:	4a26      	ldr	r2, [pc, #152]	@ (80061a8 <SystemClock_Config+0xc4>)
 800610e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006112:	6413      	str	r3, [r2, #64]	@ 0x40
 8006114:	4b24      	ldr	r3, [pc, #144]	@ (80061a8 <SystemClock_Config+0xc4>)
 8006116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006118:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800611c:	60bb      	str	r3, [r7, #8]
 800611e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006120:	4b22      	ldr	r3, [pc, #136]	@ (80061ac <SystemClock_Config+0xc8>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a21      	ldr	r2, [pc, #132]	@ (80061ac <SystemClock_Config+0xc8>)
 8006126:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800612a:	6013      	str	r3, [r2, #0]
 800612c:	4b1f      	ldr	r3, [pc, #124]	@ (80061ac <SystemClock_Config+0xc8>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006134:	607b      	str	r3, [r7, #4]
 8006136:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006138:	2302      	movs	r3, #2
 800613a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800613c:	2301      	movs	r3, #1
 800613e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006140:	2310      	movs	r3, #16
 8006142:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006144:	2302      	movs	r3, #2
 8006146:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006148:	2300      	movs	r3, #0
 800614a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800614c:	2308      	movs	r3, #8
 800614e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8006150:	23b4      	movs	r3, #180	@ 0xb4
 8006152:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006154:	2302      	movs	r3, #2
 8006156:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8006158:	2302      	movs	r3, #2
 800615a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800615c:	f107 0320 	add.w	r3, r7, #32
 8006160:	4618      	mov	r0, r3
 8006162:	f002 f83f 	bl	80081e4 <HAL_RCC_OscConfig>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d001      	beq.n	8006170 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800616c:	f000 fc17 	bl	800699e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006170:	230f      	movs	r3, #15
 8006172:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006174:	2302      	movs	r3, #2
 8006176:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006178:	2300      	movs	r3, #0
 800617a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800617c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8006180:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006182:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006186:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006188:	f107 030c 	add.w	r3, r7, #12
 800618c:	2105      	movs	r1, #5
 800618e:	4618      	mov	r0, r3
 8006190:	f002 fb82 	bl	8008898 <HAL_RCC_ClockConfig>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800619a:	f000 fc00 	bl	800699e <Error_Handler>
  }
}
 800619e:	bf00      	nop
 80061a0:	3750      	adds	r7, #80	@ 0x50
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	40023800 	.word	0x40023800
 80061ac:	40007000 	.word	0x40007000

080061b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80061b4:	4b1b      	ldr	r3, [pc, #108]	@ (8006224 <MX_SPI1_Init+0x74>)
 80061b6:	4a1c      	ldr	r2, [pc, #112]	@ (8006228 <MX_SPI1_Init+0x78>)
 80061b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80061ba:	4b1a      	ldr	r3, [pc, #104]	@ (8006224 <MX_SPI1_Init+0x74>)
 80061bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80061c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80061c2:	4b18      	ldr	r3, [pc, #96]	@ (8006224 <MX_SPI1_Init+0x74>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80061c8:	4b16      	ldr	r3, [pc, #88]	@ (8006224 <MX_SPI1_Init+0x74>)
 80061ca:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80061ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80061d0:	4b14      	ldr	r3, [pc, #80]	@ (8006224 <MX_SPI1_Init+0x74>)
 80061d2:	2202      	movs	r2, #2
 80061d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80061d6:	4b13      	ldr	r3, [pc, #76]	@ (8006224 <MX_SPI1_Init+0x74>)
 80061d8:	2201      	movs	r2, #1
 80061da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80061dc:	4b11      	ldr	r3, [pc, #68]	@ (8006224 <MX_SPI1_Init+0x74>)
 80061de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80061e4:	4b0f      	ldr	r3, [pc, #60]	@ (8006224 <MX_SPI1_Init+0x74>)
 80061e6:	2220      	movs	r2, #32
 80061e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80061ea:	4b0e      	ldr	r3, [pc, #56]	@ (8006224 <MX_SPI1_Init+0x74>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80061f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006224 <MX_SPI1_Init+0x74>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006224 <MX_SPI1_Init+0x74>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80061fc:	4b09      	ldr	r3, [pc, #36]	@ (8006224 <MX_SPI1_Init+0x74>)
 80061fe:	2207      	movs	r2, #7
 8006200:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006202:	4b08      	ldr	r3, [pc, #32]	@ (8006224 <MX_SPI1_Init+0x74>)
 8006204:	2200      	movs	r2, #0
 8006206:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8006208:	4b06      	ldr	r3, [pc, #24]	@ (8006224 <MX_SPI1_Init+0x74>)
 800620a:	2200      	movs	r2, #0
 800620c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800620e:	4805      	ldr	r0, [pc, #20]	@ (8006224 <MX_SPI1_Init+0x74>)
 8006210:	f003 fdc8 	bl	8009da4 <HAL_SPI_Init>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800621a:	f000 fbc0 	bl	800699e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800621e:	bf00      	nop
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	200002f8 	.word	0x200002f8
 8006228:	40013000 	.word	0x40013000

0800622c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b09a      	sub	sp, #104	@ 0x68
 8006230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8006232:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006236:	2200      	movs	r2, #0
 8006238:	601a      	str	r2, [r3, #0]
 800623a:	605a      	str	r2, [r3, #4]
 800623c:	609a      	str	r2, [r3, #8]
 800623e:	60da      	str	r2, [r3, #12]
 8006240:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006242:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8006246:	2200      	movs	r2, #0
 8006248:	601a      	str	r2, [r3, #0]
 800624a:	605a      	str	r2, [r3, #4]
 800624c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800624e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006252:	2200      	movs	r2, #0
 8006254:	601a      	str	r2, [r3, #0]
 8006256:	605a      	str	r2, [r3, #4]
 8006258:	609a      	str	r2, [r3, #8]
 800625a:	60da      	str	r2, [r3, #12]
 800625c:	611a      	str	r2, [r3, #16]
 800625e:	615a      	str	r2, [r3, #20]
 8006260:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006262:	463b      	mov	r3, r7
 8006264:	222c      	movs	r2, #44	@ 0x2c
 8006266:	2100      	movs	r1, #0
 8006268:	4618      	mov	r0, r3
 800626a:	f00e fb19 	bl	80148a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800626e:	4b48      	ldr	r3, [pc, #288]	@ (8006390 <MX_TIM1_Init+0x164>)
 8006270:	4a48      	ldr	r2, [pc, #288]	@ (8006394 <MX_TIM1_Init+0x168>)
 8006272:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006274:	4b46      	ldr	r3, [pc, #280]	@ (8006390 <MX_TIM1_Init+0x164>)
 8006276:	2200      	movs	r2, #0
 8006278:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800627a:	4b45      	ldr	r3, [pc, #276]	@ (8006390 <MX_TIM1_Init+0x164>)
 800627c:	2200      	movs	r2, #0
 800627e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8006280:	4b43      	ldr	r3, [pc, #268]	@ (8006390 <MX_TIM1_Init+0x164>)
 8006282:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006286:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006288:	4b41      	ldr	r3, [pc, #260]	@ (8006390 <MX_TIM1_Init+0x164>)
 800628a:	2200      	movs	r2, #0
 800628c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800628e:	4b40      	ldr	r3, [pc, #256]	@ (8006390 <MX_TIM1_Init+0x164>)
 8006290:	2200      	movs	r2, #0
 8006292:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006294:	4b3e      	ldr	r3, [pc, #248]	@ (8006390 <MX_TIM1_Init+0x164>)
 8006296:	2200      	movs	r2, #0
 8006298:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800629a:	483d      	ldr	r0, [pc, #244]	@ (8006390 <MX_TIM1_Init+0x164>)
 800629c:	f004 fc64 	bl	800ab68 <HAL_TIM_Base_Init>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80062a6:	f000 fb7a 	bl	800699e <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80062aa:	4839      	ldr	r0, [pc, #228]	@ (8006390 <MX_TIM1_Init+0x164>)
 80062ac:	f004 fd7c 	bl	800ada8 <HAL_TIM_OC_Init>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80062b6:	f000 fb72 	bl	800699e <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 80062ba:	2108      	movs	r1, #8
 80062bc:	4834      	ldr	r0, [pc, #208]	@ (8006390 <MX_TIM1_Init+0x164>)
 80062be:	f005 f991 	bl	800b5e4 <HAL_TIM_OnePulse_Init>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 80062c8:	f000 fb69 	bl	800699e <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80062cc:	2307      	movs	r3, #7
 80062ce:	657b      	str	r3, [r7, #84]	@ 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 80062d0:	2330      	movs	r3, #48	@ 0x30
 80062d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80062d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80062d8:	4619      	mov	r1, r3
 80062da:	482d      	ldr	r0, [pc, #180]	@ (8006390 <MX_TIM1_Init+0x164>)
 80062dc:	f006 fcb8 	bl	800cc50 <HAL_TIM_SlaveConfigSynchro>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80062e6:	f000 fb5a 	bl	800699e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80062ea:	2310      	movs	r3, #16
 80062ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_ENABLE;
 80062ee:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80062f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80062f4:	2300      	movs	r3, #0
 80062f6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80062f8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80062fc:	4619      	mov	r1, r3
 80062fe:	4824      	ldr	r0, [pc, #144]	@ (8006390 <MX_TIM1_Init+0x164>)
 8006300:	f007 fcae 	bl	800dc60 <HAL_TIMEx_MasterConfigSynchronization>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 800630a:	f000 fb48 	bl	800699e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800630e:	2300      	movs	r3, #0
 8006310:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8006312:	2300      	movs	r3, #0
 8006314:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006316:	2300      	movs	r3, #0
 8006318:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800631a:	2300      	movs	r3, #0
 800631c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800631e:	2300      	movs	r3, #0
 8006320:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006322:	2300      	movs	r3, #0
 8006324:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006326:	2300      	movs	r3, #0
 8006328:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800632a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800632e:	2200      	movs	r2, #0
 8006330:	4619      	mov	r1, r3
 8006332:	4817      	ldr	r0, [pc, #92]	@ (8006390 <MX_TIM1_Init+0x164>)
 8006334:	f005 fc7a 	bl	800bc2c <HAL_TIM_OC_ConfigChannel>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800633e:	f000 fb2e 	bl	800699e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006342:	2300      	movs	r3, #0
 8006344:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006346:	2300      	movs	r3, #0
 8006348:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800634a:	2300      	movs	r3, #0
 800634c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800634e:	2300      	movs	r3, #0
 8006350:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006352:	2300      	movs	r3, #0
 8006354:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006356:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800635a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800635c:	2300      	movs	r3, #0
 800635e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8006360:	2300      	movs	r3, #0
 8006362:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8006364:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006368:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 800636a:	2300      	movs	r3, #0
 800636c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800636e:	2300      	movs	r3, #0
 8006370:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006372:	463b      	mov	r3, r7
 8006374:	4619      	mov	r1, r3
 8006376:	4806      	ldr	r0, [pc, #24]	@ (8006390 <MX_TIM1_Init+0x164>)
 8006378:	f007 fdca 	bl	800df10 <HAL_TIMEx_ConfigBreakDeadTime>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8006382:	f000 fb0c 	bl	800699e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8006386:	bf00      	nop
 8006388:	3768      	adds	r7, #104	@ 0x68
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	2000035c 	.word	0x2000035c
 8006394:	40010000 	.word	0x40010000

08006398 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b08e      	sub	sp, #56	@ 0x38
 800639c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800639e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80063a2:	2200      	movs	r2, #0
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	605a      	str	r2, [r3, #4]
 80063a8:	609a      	str	r2, [r3, #8]
 80063aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80063ac:	f107 031c 	add.w	r3, r7, #28
 80063b0:	2200      	movs	r2, #0
 80063b2:	601a      	str	r2, [r3, #0]
 80063b4:	605a      	str	r2, [r3, #4]
 80063b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80063b8:	463b      	mov	r3, r7
 80063ba:	2200      	movs	r2, #0
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	605a      	str	r2, [r3, #4]
 80063c0:	609a      	str	r2, [r3, #8]
 80063c2:	60da      	str	r2, [r3, #12]
 80063c4:	611a      	str	r2, [r3, #16]
 80063c6:	615a      	str	r2, [r3, #20]
 80063c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80063ca:	4b33      	ldr	r3, [pc, #204]	@ (8006498 <MX_TIM2_Init+0x100>)
 80063cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80063d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80063d2:	4b31      	ldr	r3, [pc, #196]	@ (8006498 <MX_TIM2_Init+0x100>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063d8:	4b2f      	ldr	r3, [pc, #188]	@ (8006498 <MX_TIM2_Init+0x100>)
 80063da:	2200      	movs	r2, #0
 80063dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4499;
 80063de:	4b2e      	ldr	r3, [pc, #184]	@ (8006498 <MX_TIM2_Init+0x100>)
 80063e0:	f241 1293 	movw	r2, #4499	@ 0x1193
 80063e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80063e6:	4b2c      	ldr	r3, [pc, #176]	@ (8006498 <MX_TIM2_Init+0x100>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80063ec:	4b2a      	ldr	r3, [pc, #168]	@ (8006498 <MX_TIM2_Init+0x100>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80063f2:	4829      	ldr	r0, [pc, #164]	@ (8006498 <MX_TIM2_Init+0x100>)
 80063f4:	f004 fbb8 	bl	800ab68 <HAL_TIM_Base_Init>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d001      	beq.n	8006402 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80063fe:	f000 face 	bl	800699e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006402:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006406:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006408:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800640c:	4619      	mov	r1, r3
 800640e:	4822      	ldr	r0, [pc, #136]	@ (8006498 <MX_TIM2_Init+0x100>)
 8006410:	f006 f8cc 	bl	800c5ac <HAL_TIM_ConfigClockSource>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d001      	beq.n	800641e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800641a:	f000 fac0 	bl	800699e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800641e:	481e      	ldr	r0, [pc, #120]	@ (8006498 <MX_TIM2_Init+0x100>)
 8006420:	f004 fdec 	bl	800affc <HAL_TIM_PWM_Init>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d001      	beq.n	800642e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800642a:	f000 fab8 	bl	800699e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800642e:	2300      	movs	r3, #0
 8006430:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006432:	2300      	movs	r3, #0
 8006434:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006436:	f107 031c 	add.w	r3, r7, #28
 800643a:	4619      	mov	r1, r3
 800643c:	4816      	ldr	r0, [pc, #88]	@ (8006498 <MX_TIM2_Init+0x100>)
 800643e:	f007 fc0f 	bl	800dc60 <HAL_TIMEx_MasterConfigSynchronization>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d001      	beq.n	800644c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8006448:	f000 faa9 	bl	800699e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800644c:	2360      	movs	r3, #96	@ 0x60
 800644e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8006450:	2300      	movs	r3, #0
 8006452:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006454:	2300      	movs	r3, #0
 8006456:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006458:	2300      	movs	r3, #0
 800645a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800645c:	463b      	mov	r3, r7
 800645e:	2208      	movs	r2, #8
 8006460:	4619      	mov	r1, r3
 8006462:	480d      	ldr	r0, [pc, #52]	@ (8006498 <MX_TIM2_Init+0x100>)
 8006464:	f005 fda2 	bl	800bfac <HAL_TIM_PWM_ConfigChannel>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800646e:	f000 fa96 	bl	800699e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006472:	463b      	mov	r3, r7
 8006474:	220c      	movs	r2, #12
 8006476:	4619      	mov	r1, r3
 8006478:	4807      	ldr	r0, [pc, #28]	@ (8006498 <MX_TIM2_Init+0x100>)
 800647a:	f005 fd97 	bl	800bfac <HAL_TIM_PWM_ConfigChannel>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8006484:	f000 fa8b 	bl	800699e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8006488:	4803      	ldr	r0, [pc, #12]	@ (8006498 <MX_TIM2_Init+0x100>)
 800648a:	f000 fe43 	bl	8007114 <HAL_TIM_MspPostInit>

}
 800648e:	bf00      	nop
 8006490:	3738      	adds	r7, #56	@ 0x38
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	200003a8 	.word	0x200003a8

0800649c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b094      	sub	sp, #80	@ 0x50
 80064a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80064a2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80064a6:	2200      	movs	r2, #0
 80064a8:	601a      	str	r2, [r3, #0]
 80064aa:	605a      	str	r2, [r3, #4]
 80064ac:	609a      	str	r2, [r3, #8]
 80064ae:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80064b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80064b4:	2200      	movs	r2, #0
 80064b6:	601a      	str	r2, [r3, #0]
 80064b8:	605a      	str	r2, [r3, #4]
 80064ba:	609a      	str	r2, [r3, #8]
 80064bc:	60da      	str	r2, [r3, #12]
 80064be:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80064c0:	f107 0320 	add.w	r3, r7, #32
 80064c4:	2200      	movs	r2, #0
 80064c6:	601a      	str	r2, [r3, #0]
 80064c8:	605a      	str	r2, [r3, #4]
 80064ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80064cc:	1d3b      	adds	r3, r7, #4
 80064ce:	2200      	movs	r2, #0
 80064d0:	601a      	str	r2, [r3, #0]
 80064d2:	605a      	str	r2, [r3, #4]
 80064d4:	609a      	str	r2, [r3, #8]
 80064d6:	60da      	str	r2, [r3, #12]
 80064d8:	611a      	str	r2, [r3, #16]
 80064da:	615a      	str	r2, [r3, #20]
 80064dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80064de:	4b34      	ldr	r3, [pc, #208]	@ (80065b0 <MX_TIM4_Init+0x114>)
 80064e0:	4a34      	ldr	r2, [pc, #208]	@ (80065b4 <MX_TIM4_Init+0x118>)
 80064e2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 80064e4:	4b32      	ldr	r3, [pc, #200]	@ (80065b0 <MX_TIM4_Init+0x114>)
 80064e6:	2201      	movs	r2, #1
 80064e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064ea:	4b31      	ldr	r3, [pc, #196]	@ (80065b0 <MX_TIM4_Init+0x114>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3115;
 80064f0:	4b2f      	ldr	r3, [pc, #188]	@ (80065b0 <MX_TIM4_Init+0x114>)
 80064f2:	f640 422b 	movw	r2, #3115	@ 0xc2b
 80064f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064f8:	4b2d      	ldr	r3, [pc, #180]	@ (80065b0 <MX_TIM4_Init+0x114>)
 80064fa:	2200      	movs	r2, #0
 80064fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80064fe:	4b2c      	ldr	r3, [pc, #176]	@ (80065b0 <MX_TIM4_Init+0x114>)
 8006500:	2280      	movs	r2, #128	@ 0x80
 8006502:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8006504:	482a      	ldr	r0, [pc, #168]	@ (80065b0 <MX_TIM4_Init+0x114>)
 8006506:	f004 fb2f 	bl	800ab68 <HAL_TIM_Base_Init>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8006510:	f000 fa45 	bl	800699e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006514:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006518:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800651a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800651e:	4619      	mov	r1, r3
 8006520:	4823      	ldr	r0, [pc, #140]	@ (80065b0 <MX_TIM4_Init+0x114>)
 8006522:	f006 f843 	bl	800c5ac <HAL_TIM_ConfigClockSource>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d001      	beq.n	8006530 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800652c:	f000 fa37 	bl	800699e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8006530:	481f      	ldr	r0, [pc, #124]	@ (80065b0 <MX_TIM4_Init+0x114>)
 8006532:	f004 fd63 	bl	800affc <HAL_TIM_PWM_Init>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d001      	beq.n	8006540 <MX_TIM4_Init+0xa4>
  {
    Error_Handler();
 800653c:	f000 fa2f 	bl	800699e <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8006540:	2305      	movs	r3, #5
 8006542:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8006544:	2300      	movs	r3, #0
 8006546:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8006548:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800654c:	4619      	mov	r1, r3
 800654e:	4818      	ldr	r0, [pc, #96]	@ (80065b0 <MX_TIM4_Init+0x114>)
 8006550:	f006 fb7e 	bl	800cc50 <HAL_TIM_SlaveConfigSynchro>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 800655a:	f000 fa20 	bl	800699e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800655e:	2320      	movs	r3, #32
 8006560:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006562:	2300      	movs	r3, #0
 8006564:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006566:	f107 0320 	add.w	r3, r7, #32
 800656a:	4619      	mov	r1, r3
 800656c:	4810      	ldr	r0, [pc, #64]	@ (80065b0 <MX_TIM4_Init+0x114>)
 800656e:	f007 fb77 	bl	800dc60 <HAL_TIMEx_MasterConfigSynchronization>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d001      	beq.n	800657c <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8006578:	f000 fa11 	bl	800699e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800657c:	2360      	movs	r3, #96	@ 0x60
 800657e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006580:	2300      	movs	r3, #0
 8006582:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006584:	2300      	movs	r3, #0
 8006586:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006588:	2300      	movs	r3, #0
 800658a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800658c:	1d3b      	adds	r3, r7, #4
 800658e:	220c      	movs	r2, #12
 8006590:	4619      	mov	r1, r3
 8006592:	4807      	ldr	r0, [pc, #28]	@ (80065b0 <MX_TIM4_Init+0x114>)
 8006594:	f005 fd0a 	bl	800bfac <HAL_TIM_PWM_ConfigChannel>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 800659e:	f000 f9fe 	bl	800699e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80065a2:	4803      	ldr	r0, [pc, #12]	@ (80065b0 <MX_TIM4_Init+0x114>)
 80065a4:	f000 fdb6 	bl	8007114 <HAL_TIM_MspPostInit>

}
 80065a8:	bf00      	nop
 80065aa:	3750      	adds	r7, #80	@ 0x50
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	200003f4 	.word	0x200003f4
 80065b4:	40000800 	.word	0x40000800

080065b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80065bc:	4b14      	ldr	r3, [pc, #80]	@ (8006610 <MX_USART3_UART_Init+0x58>)
 80065be:	4a15      	ldr	r2, [pc, #84]	@ (8006614 <MX_USART3_UART_Init+0x5c>)
 80065c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80065c2:	4b13      	ldr	r3, [pc, #76]	@ (8006610 <MX_USART3_UART_Init+0x58>)
 80065c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80065c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80065ca:	4b11      	ldr	r3, [pc, #68]	@ (8006610 <MX_USART3_UART_Init+0x58>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80065d0:	4b0f      	ldr	r3, [pc, #60]	@ (8006610 <MX_USART3_UART_Init+0x58>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80065d6:	4b0e      	ldr	r3, [pc, #56]	@ (8006610 <MX_USART3_UART_Init+0x58>)
 80065d8:	2200      	movs	r2, #0
 80065da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80065dc:	4b0c      	ldr	r3, [pc, #48]	@ (8006610 <MX_USART3_UART_Init+0x58>)
 80065de:	220c      	movs	r2, #12
 80065e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80065e2:	4b0b      	ldr	r3, [pc, #44]	@ (8006610 <MX_USART3_UART_Init+0x58>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80065e8:	4b09      	ldr	r3, [pc, #36]	@ (8006610 <MX_USART3_UART_Init+0x58>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80065ee:	4b08      	ldr	r3, [pc, #32]	@ (8006610 <MX_USART3_UART_Init+0x58>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80065f4:	4b06      	ldr	r3, [pc, #24]	@ (8006610 <MX_USART3_UART_Init+0x58>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80065fa:	4805      	ldr	r0, [pc, #20]	@ (8006610 <MX_USART3_UART_Init+0x58>)
 80065fc:	f007 fdc8 	bl	800e190 <HAL_UART_Init>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8006606:	f000 f9ca 	bl	800699e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800660a:	bf00      	nop
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	20000440 	.word	0x20000440
 8006614:	40004800 	.word	0x40004800

08006618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b08c      	sub	sp, #48	@ 0x30
 800661c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800661e:	f107 031c 	add.w	r3, r7, #28
 8006622:	2200      	movs	r2, #0
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	605a      	str	r2, [r3, #4]
 8006628:	609a      	str	r2, [r3, #8]
 800662a:	60da      	str	r2, [r3, #12]
 800662c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800662e:	4b7d      	ldr	r3, [pc, #500]	@ (8006824 <MX_GPIO_Init+0x20c>)
 8006630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006632:	4a7c      	ldr	r2, [pc, #496]	@ (8006824 <MX_GPIO_Init+0x20c>)
 8006634:	f043 0304 	orr.w	r3, r3, #4
 8006638:	6313      	str	r3, [r2, #48]	@ 0x30
 800663a:	4b7a      	ldr	r3, [pc, #488]	@ (8006824 <MX_GPIO_Init+0x20c>)
 800663c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800663e:	f003 0304 	and.w	r3, r3, #4
 8006642:	61bb      	str	r3, [r7, #24]
 8006644:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006646:	4b77      	ldr	r3, [pc, #476]	@ (8006824 <MX_GPIO_Init+0x20c>)
 8006648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800664a:	4a76      	ldr	r2, [pc, #472]	@ (8006824 <MX_GPIO_Init+0x20c>)
 800664c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006650:	6313      	str	r3, [r2, #48]	@ 0x30
 8006652:	4b74      	ldr	r3, [pc, #464]	@ (8006824 <MX_GPIO_Init+0x20c>)
 8006654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800665a:	617b      	str	r3, [r7, #20]
 800665c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800665e:	4b71      	ldr	r3, [pc, #452]	@ (8006824 <MX_GPIO_Init+0x20c>)
 8006660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006662:	4a70      	ldr	r2, [pc, #448]	@ (8006824 <MX_GPIO_Init+0x20c>)
 8006664:	f043 0301 	orr.w	r3, r3, #1
 8006668:	6313      	str	r3, [r2, #48]	@ 0x30
 800666a:	4b6e      	ldr	r3, [pc, #440]	@ (8006824 <MX_GPIO_Init+0x20c>)
 800666c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	613b      	str	r3, [r7, #16]
 8006674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006676:	4b6b      	ldr	r3, [pc, #428]	@ (8006824 <MX_GPIO_Init+0x20c>)
 8006678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800667a:	4a6a      	ldr	r2, [pc, #424]	@ (8006824 <MX_GPIO_Init+0x20c>)
 800667c:	f043 0302 	orr.w	r3, r3, #2
 8006680:	6313      	str	r3, [r2, #48]	@ 0x30
 8006682:	4b68      	ldr	r3, [pc, #416]	@ (8006824 <MX_GPIO_Init+0x20c>)
 8006684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	60fb      	str	r3, [r7, #12]
 800668c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800668e:	4b65      	ldr	r3, [pc, #404]	@ (8006824 <MX_GPIO_Init+0x20c>)
 8006690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006692:	4a64      	ldr	r2, [pc, #400]	@ (8006824 <MX_GPIO_Init+0x20c>)
 8006694:	f043 0320 	orr.w	r3, r3, #32
 8006698:	6313      	str	r3, [r2, #48]	@ 0x30
 800669a:	4b62      	ldr	r3, [pc, #392]	@ (8006824 <MX_GPIO_Init+0x20c>)
 800669c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800669e:	f003 0320 	and.w	r3, r3, #32
 80066a2:	60bb      	str	r3, [r7, #8]
 80066a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80066a6:	4b5f      	ldr	r3, [pc, #380]	@ (8006824 <MX_GPIO_Init+0x20c>)
 80066a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066aa:	4a5e      	ldr	r2, [pc, #376]	@ (8006824 <MX_GPIO_Init+0x20c>)
 80066ac:	f043 0310 	orr.w	r3, r3, #16
 80066b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80066b2:	4b5c      	ldr	r3, [pc, #368]	@ (8006824 <MX_GPIO_Init+0x20c>)
 80066b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066b6:	f003 0310 	and.w	r3, r3, #16
 80066ba:	607b      	str	r3, [r7, #4]
 80066bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80066be:	4b59      	ldr	r3, [pc, #356]	@ (8006824 <MX_GPIO_Init+0x20c>)
 80066c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c2:	4a58      	ldr	r2, [pc, #352]	@ (8006824 <MX_GPIO_Init+0x20c>)
 80066c4:	f043 0308 	orr.w	r3, r3, #8
 80066c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80066ca:	4b56      	ldr	r3, [pc, #344]	@ (8006824 <MX_GPIO_Init+0x20c>)
 80066cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ce:	f003 0308 	and.w	r3, r3, #8
 80066d2:	603b      	str	r3, [r7, #0]
 80066d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80066d6:	2200      	movs	r2, #0
 80066d8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80066dc:	4852      	ldr	r0, [pc, #328]	@ (8006828 <MX_GPIO_Init+0x210>)
 80066de:	f001 fd55 	bl	800818c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, STEP_RSTN_Pin|STEP_DIR_Pin, GPIO_PIN_RESET);
 80066e2:	2200      	movs	r2, #0
 80066e4:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80066e8:	4850      	ldr	r0, [pc, #320]	@ (800682c <MX_GPIO_Init+0x214>)
 80066ea:	f001 fd4f 	bl	800818c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPINDLE_ENA_L_Pin|SPINDLE_ENA_R_Pin, GPIO_PIN_RESET);
 80066ee:	2200      	movs	r2, #0
 80066f0:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80066f4:	484e      	ldr	r0, [pc, #312]	@ (8006830 <MX_GPIO_Init+0x218>)
 80066f6:	f001 fd49 	bl	800818c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEP_SPI_CS_GPIO_Port, STEP_SPI_CS_Pin, GPIO_PIN_SET);
 80066fa:	2201      	movs	r2, #1
 80066fc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006700:	484c      	ldr	r0, [pc, #304]	@ (8006834 <MX_GPIO_Init+0x21c>)
 8006702:	f001 fd43 	bl	800818c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USR_BUTTON_Pin */
  GPIO_InitStruct.Pin = USR_BUTTON_Pin;
 8006706:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800670a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800670c:	2300      	movs	r3, #0
 800670e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006710:	2300      	movs	r3, #0
 8006712:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USR_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8006714:	f107 031c 	add.w	r3, r7, #28
 8006718:	4619      	mov	r1, r3
 800671a:	4847      	ldr	r0, [pc, #284]	@ (8006838 <MX_GPIO_Init+0x220>)
 800671c:	f001 f9a6 	bl	8007a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPINDLE_SI_R_Pin */
  GPIO_InitStruct.Pin = SPINDLE_SI_R_Pin;
 8006720:	2301      	movs	r3, #1
 8006722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006724:	2300      	movs	r3, #0
 8006726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006728:	2300      	movs	r3, #0
 800672a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPINDLE_SI_R_GPIO_Port, &GPIO_InitStruct);
 800672c:	f107 031c 	add.w	r3, r7, #28
 8006730:	4619      	mov	r1, r3
 8006732:	4842      	ldr	r0, [pc, #264]	@ (800683c <MX_GPIO_Init+0x224>)
 8006734:	f001 f99a 	bl	8007a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8006738:	f244 0381 	movw	r3, #16513	@ 0x4081
 800673c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800673e:	2301      	movs	r3, #1
 8006740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006742:	2300      	movs	r3, #0
 8006744:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006746:	2300      	movs	r3, #0
 8006748:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800674a:	f107 031c 	add.w	r3, r7, #28
 800674e:	4619      	mov	r1, r3
 8006750:	4835      	ldr	r0, [pc, #212]	@ (8006828 <MX_GPIO_Init+0x210>)
 8006752:	f001 f98b 	bl	8007a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_RSTN_Pin */
  GPIO_InitStruct.Pin = STEP_RSTN_Pin;
 8006756:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800675a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800675c:	2301      	movs	r3, #1
 800675e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006760:	2300      	movs	r3, #0
 8006762:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006764:	2300      	movs	r3, #0
 8006766:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP_RSTN_GPIO_Port, &GPIO_InitStruct);
 8006768:	f107 031c 	add.w	r3, r7, #28
 800676c:	4619      	mov	r1, r3
 800676e:	482f      	ldr	r0, [pc, #188]	@ (800682c <MX_GPIO_Init+0x214>)
 8006770:	f001 f97c 	bl	8007a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_DIR_Pin */
  GPIO_InitStruct.Pin = STEP_DIR_Pin;
 8006774:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800677a:	2301      	movs	r3, #1
 800677c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800677e:	2300      	movs	r3, #0
 8006780:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006782:	2303      	movs	r3, #3
 8006784:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP_DIR_GPIO_Port, &GPIO_InitStruct);
 8006786:	f107 031c 	add.w	r3, r7, #28
 800678a:	4619      	mov	r1, r3
 800678c:	4827      	ldr	r0, [pc, #156]	@ (800682c <MX_GPIO_Init+0x214>)
 800678e:	f001 f96d 	bl	8007a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_FLAG_Pin */
  GPIO_InitStruct.Pin = STEP_FLAG_Pin;
 8006792:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006798:	2300      	movs	r3, #0
 800679a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800679c:	2301      	movs	r3, #1
 800679e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(STEP_FLAG_GPIO_Port, &GPIO_InitStruct);
 80067a0:	f107 031c 	add.w	r3, r7, #28
 80067a4:	4619      	mov	r1, r3
 80067a6:	4821      	ldr	r0, [pc, #132]	@ (800682c <MX_GPIO_Init+0x214>)
 80067a8:	f001 f960 	bl	8007a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPINDLE_ENA_L_Pin SPINDLE_ENA_R_Pin */
  GPIO_InitStruct.Pin = SPINDLE_ENA_L_Pin|SPINDLE_ENA_R_Pin;
 80067ac:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80067b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067b2:	2301      	movs	r3, #1
 80067b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067b6:	2300      	movs	r3, #0
 80067b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067ba:	2300      	movs	r3, #0
 80067bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80067be:	f107 031c 	add.w	r3, r7, #28
 80067c2:	4619      	mov	r1, r3
 80067c4:	481a      	ldr	r0, [pc, #104]	@ (8006830 <MX_GPIO_Init+0x218>)
 80067c6:	f001 f951 	bl	8007a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_SPI_CS_Pin */
  GPIO_InitStruct.Pin = STEP_SPI_CS_Pin;
 80067ca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80067ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067d0:	2301      	movs	r3, #1
 80067d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067d4:	2300      	movs	r3, #0
 80067d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067d8:	2303      	movs	r3, #3
 80067da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80067dc:	f107 031c 	add.w	r3, r7, #28
 80067e0:	4619      	mov	r1, r3
 80067e2:	4814      	ldr	r0, [pc, #80]	@ (8006834 <MX_GPIO_Init+0x21c>)
 80067e4:	f001 f942 	bl	8007a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : REFERENCE_MARK_Pin LIMIT_SWITCH_Pin */
  GPIO_InitStruct.Pin = REFERENCE_MARK_Pin|LIMIT_SWITCH_Pin;
 80067e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80067ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80067ee:	2300      	movs	r3, #0
 80067f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067f2:	2300      	movs	r3, #0
 80067f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067f6:	f107 031c 	add.w	r3, r7, #28
 80067fa:	4619      	mov	r1, r3
 80067fc:	480a      	ldr	r0, [pc, #40]	@ (8006828 <MX_GPIO_Init+0x210>)
 80067fe:	f001 f935 	bl	8007a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPINDLE_SI_L_Pin */
  GPIO_InitStruct.Pin = SPINDLE_SI_L_Pin;
 8006802:	2301      	movs	r3, #1
 8006804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006806:	2300      	movs	r3, #0
 8006808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800680a:	2300      	movs	r3, #0
 800680c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPINDLE_SI_L_GPIO_Port, &GPIO_InitStruct);
 800680e:	f107 031c 	add.w	r3, r7, #28
 8006812:	4619      	mov	r1, r3
 8006814:	4806      	ldr	r0, [pc, #24]	@ (8006830 <MX_GPIO_Init+0x218>)
 8006816:	f001 f929 	bl	8007a6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800681a:	bf00      	nop
 800681c:	3730      	adds	r7, #48	@ 0x30
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	40023800 	.word	0x40023800
 8006828:	40020400 	.word	0x40020400
 800682c:	40021400 	.word	0x40021400
 8006830:	40021000 	.word	0x40021000
 8006834:	40020c00 	.word	0x40020c00
 8006838:	40020800 	.word	0x40020800
 800683c:	40020000 	.word	0x40020000

08006840 <vAssertCalled>:

/* USER CODE BEGIN 4 */
void vAssertCalled(const char *const pcFileName, unsigned long ulLine)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  volatile uint32_t ulSetToNonZeroInDebuggerToContinue = 0;
 800684a:	2300      	movs	r3, #0
 800684c:	60fb      	str	r3, [r7, #12]

  /* Parameters are not used. */
  (void)ulLine;
  (void)pcFileName;

  taskENTER_CRITICAL();
 800684e:	f00b fbaf 	bl	8011fb0 <vPortEnterCritical>
  {
    /* You can step out of this function to debug the assertion by using
     the debugger to set ulSetToNonZeroInDebuggerToContinue to a non-zero
     value. */
    while (ulSetToNonZeroInDebuggerToContinue == 0)
 8006852:	bf00      	nop
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d0fc      	beq.n	8006854 <vAssertCalled+0x14>
    {
    }
  }
  taskEXIT_CRITICAL();
 800685a:	f00b fbe1 	bl	8012020 <vPortExitCritical>
}
 800685e:	bf00      	nop
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
	...

08006868 <__stdout_put_char>:

int __stdout_put_char(int ch)
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  uint8_t val = ch;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	73fb      	strb	r3, [r7, #15]
  while ((huart3.Instance->ISR & UART_FLAG_TXE) == 0)
 8006874:	bf00      	nop
 8006876:	4b0d      	ldr	r3, [pc, #52]	@ (80068ac <__stdout_put_char+0x44>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	69db      	ldr	r3, [r3, #28]
 800687c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006880:	2b00      	cmp	r3, #0
 8006882:	d0f8      	beq.n	8006876 <__stdout_put_char+0xe>
    ;
  huart3.Instance->TDR = val;
 8006884:	4b09      	ldr	r3, [pc, #36]	@ (80068ac <__stdout_put_char+0x44>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	7bfa      	ldrb	r2, [r7, #15]
 800688a:	629a      	str	r2, [r3, #40]	@ 0x28
  while ((huart3.Instance->ISR & UART_FLAG_TC) == 0)
 800688c:	bf00      	nop
 800688e:	4b07      	ldr	r3, [pc, #28]	@ (80068ac <__stdout_put_char+0x44>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	69db      	ldr	r3, [r3, #28]
 8006894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006898:	2b00      	cmp	r3, #0
 800689a:	d0f8      	beq.n	800688e <__stdout_put_char+0x26>
    ;
  return 0;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	20000440 	.word	0x20000440

080068b0 <__stdin_get_char>:

int __stdin_get_char(void)
{
 80068b0:	b480      	push	{r7}
 80068b2:	af00      	add	r7, sp, #0
  if (huart3.Instance->ISR & UART_FLAG_ORE)
 80068b4:	4b19      	ldr	r3, [pc, #100]	@ (800691c <__stdin_get_char+0x6c>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	69db      	ldr	r3, [r3, #28]
 80068ba:	f003 0308 	and.w	r3, r3, #8
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <__stdin_get_char+0x1a>
    huart3.Instance->ICR = UART_CLEAR_OREF;
 80068c2:	4b16      	ldr	r3, [pc, #88]	@ (800691c <__stdin_get_char+0x6c>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2208      	movs	r2, #8
 80068c8:	621a      	str	r2, [r3, #32]

  if (huart3.Instance->ISR & UART_FLAG_NE)
 80068ca:	4b14      	ldr	r3, [pc, #80]	@ (800691c <__stdin_get_char+0x6c>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	f003 0304 	and.w	r3, r3, #4
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d003      	beq.n	80068e0 <__stdin_get_char+0x30>
    huart3.Instance->ICR = UART_CLEAR_NEF;
 80068d8:	4b10      	ldr	r3, [pc, #64]	@ (800691c <__stdin_get_char+0x6c>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2204      	movs	r2, #4
 80068de:	621a      	str	r2, [r3, #32]

  if (huart3.Instance->ISR & UART_FLAG_FE)
 80068e0:	4b0e      	ldr	r3, [pc, #56]	@ (800691c <__stdin_get_char+0x6c>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d003      	beq.n	80068f6 <__stdin_get_char+0x46>
    huart3.Instance->ICR = UART_CLEAR_FEF;
 80068ee:	4b0b      	ldr	r3, [pc, #44]	@ (800691c <__stdin_get_char+0x6c>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2202      	movs	r2, #2
 80068f4:	621a      	str	r2, [r3, #32]

  if ((huart3.Instance->ISR & UART_FLAG_RXNE) == 0)
 80068f6:	4b09      	ldr	r3, [pc, #36]	@ (800691c <__stdin_get_char+0x6c>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	69db      	ldr	r3, [r3, #28]
 80068fc:	f003 0320 	and.w	r3, r3, #32
 8006900:	2b00      	cmp	r3, #0
 8006902:	d102      	bne.n	800690a <__stdin_get_char+0x5a>
    return -1;
 8006904:	f04f 33ff 	mov.w	r3, #4294967295
 8006908:	e002      	b.n	8006910 <__stdin_get_char+0x60>
  return huart3.Instance->RDR;
 800690a:	4b04      	ldr	r3, [pc, #16]	@ (800691c <__stdin_get_char+0x6c>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8006910:	4618      	mov	r0, r3
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	20000440 	.word	0x20000440

08006920 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8006926:	463b      	mov	r3, r7
 8006928:	2200      	movs	r2, #0
 800692a:	601a      	str	r2, [r3, #0]
 800692c:	605a      	str	r2, [r3, #4]
 800692e:	609a      	str	r2, [r3, #8]
 8006930:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8006932:	f000 feeb 	bl	800770c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8006936:	2301      	movs	r3, #1
 8006938:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800693a:	2300      	movs	r3, #0
 800693c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800693e:	2300      	movs	r3, #0
 8006940:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8006942:	230d      	movs	r3, #13
 8006944:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8006946:	2300      	movs	r3, #0
 8006948:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800694a:	2300      	movs	r3, #0
 800694c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 800694e:	2306      	movs	r3, #6
 8006950:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8006952:	2300      	movs	r3, #0
 8006954:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8006956:	2300      	movs	r3, #0
 8006958:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800695a:	2300      	movs	r3, #0
 800695c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800695e:	2300      	movs	r3, #0
 8006960:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006962:	463b      	mov	r3, r7
 8006964:	4618      	mov	r0, r3
 8006966:	f000 ff09 	bl	800777c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800696a:	2301      	movs	r3, #1
 800696c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x60000000;
 800696e:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8006972:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8006974:	231f      	movs	r3, #31
 8006976:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8006978:	2387      	movs	r3, #135	@ 0x87
 800697a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800697c:	2300      	movs	r3, #0
 800697e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8006980:	2301      	movs	r3, #1
 8006982:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8006984:	2301      	movs	r3, #1
 8006986:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006988:	463b      	mov	r3, r7
 800698a:	4618      	mov	r0, r3
 800698c:	f000 fef6 	bl	800777c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8006990:	2004      	movs	r0, #4
 8006992:	f000 fed3 	bl	800773c <HAL_MPU_Enable>

}
 8006996:	bf00      	nop
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800699e:	b480      	push	{r7}
 80069a0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80069a2:	b672      	cpsid	i
}
 80069a4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80069a6:	bf00      	nop
 80069a8:	e7fd      	b.n	80069a6 <Error_Handler+0x8>
	...

080069ac <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  portENTER_CRITICAL();
 80069b6:	f00b fafb 	bl	8011fb0 <vPortEnterCritical>

  printf("HAL_ASSERT: %s:::%u\r\n", (char *)file, (unsigned int)line);
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	6879      	ldr	r1, [r7, #4]
 80069be:	4805      	ldr	r0, [pc, #20]	@ (80069d4 <assert_failed+0x28>)
 80069c0:	f00d fd18 	bl	80143f4 <iprintf>
  assert(0);
 80069c4:	4b04      	ldr	r3, [pc, #16]	@ (80069d8 <assert_failed+0x2c>)
 80069c6:	4a05      	ldr	r2, [pc, #20]	@ (80069dc <assert_failed+0x30>)
 80069c8:	f44f 7143 	mov.w	r1, #780	@ 0x30c
 80069cc:	4804      	ldr	r0, [pc, #16]	@ (80069e0 <assert_failed+0x34>)
 80069ce:	f00b fbdf 	bl	8012190 <__assert_func>
 80069d2:	bf00      	nop
 80069d4:	08019628 	.word	0x08019628
 80069d8:	08019640 	.word	0x08019640
 80069dc:	08019fcc 	.word	0x08019fcc
 80069e0:	08019644 	.word	0x08019644

080069e4 <initialise_monitor_handles>:
 * is called. afterwards main would be called.
 */
// ----------------------------------------------------------------------------
void initialise_monitor_handles( void )
// ----------------------------------------------------------------------------
{
 80069e4:	b480      	push	{r7}
 80069e6:	af00      	add	r7, sp, #0

}
 80069e8:	bf00      	nop
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
	...

080069f4 <initialise_stdlib_abstraction>:
 */
// ----------------------------------------------------------------------------
__attribute__((constructor))
void initialise_stdlib_abstraction( void )
// ----------------------------------------------------------------------------
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	af00      	add	r7, sp, #0
    initialise_monitor_handles();
 80069f8:	f7ff fff4 	bl	80069e4 <initialise_monitor_handles>

#if defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_STDOUT)
    stdioSemaphore = xSemaphoreCreateRecursiveMutex();
 80069fc:	2004      	movs	r0, #4
 80069fe:	f008 fbe2 	bl	800f1c6 <xQueueCreateMutex>
 8006a02:	4603      	mov	r3, r0
 8006a04:	4a15      	ldr	r2, [pc, #84]	@ (8006a5c <initialise_stdlib_abstraction+0x68>)
 8006a06:	6013      	str	r3, [r2, #0]

    if ( stdioSemaphore == 0 )
 8006a08:	4b14      	ldr	r3, [pc, #80]	@ (8006a5c <initialise_stdlib_abstraction+0x68>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d104      	bne.n	8006a1a <initialise_stdlib_abstraction+0x26>
    {
        vAssertCalled( __FILE__, __LINE__ );
 8006a10:	f240 110b 	movw	r1, #267	@ 0x10b
 8006a14:	4812      	ldr	r0, [pc, #72]	@ (8006a60 <initialise_stdlib_abstraction+0x6c>)
 8006a16:	f7ff ff13 	bl	8006840 <vAssertCalled>
    }
#endif
#if defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_MALLOC)
    mallocSemaphore = xSemaphoreCreateRecursiveMutex();
 8006a1a:	2004      	movs	r0, #4
 8006a1c:	f008 fbd3 	bl	800f1c6 <xQueueCreateMutex>
 8006a20:	4603      	mov	r3, r0
 8006a22:	4a10      	ldr	r2, [pc, #64]	@ (8006a64 <initialise_stdlib_abstraction+0x70>)
 8006a24:	6013      	str	r3, [r2, #0]

    if ( mallocSemaphore == 0 )
 8006a26:	4b0f      	ldr	r3, [pc, #60]	@ (8006a64 <initialise_stdlib_abstraction+0x70>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d104      	bne.n	8006a38 <initialise_stdlib_abstraction+0x44>
    {
        vAssertCalled( __FILE__, __LINE__ );
 8006a2e:	f240 1113 	movw	r1, #275	@ 0x113
 8006a32:	480b      	ldr	r0, [pc, #44]	@ (8006a60 <initialise_stdlib_abstraction+0x6c>)
 8006a34:	f7ff ff04 	bl	8006840 <vAssertCalled>
    }
#endif
#if defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_ENV)
    envSemaphore = xSemaphoreCreateRecursiveMutex();
 8006a38:	2004      	movs	r0, #4
 8006a3a:	f008 fbc4 	bl	800f1c6 <xQueueCreateMutex>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	4a09      	ldr	r2, [pc, #36]	@ (8006a68 <initialise_stdlib_abstraction+0x74>)
 8006a42:	6013      	str	r3, [r2, #0]

    if ( envSemaphore == 0 )
 8006a44:	4b08      	ldr	r3, [pc, #32]	@ (8006a68 <initialise_stdlib_abstraction+0x74>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d104      	bne.n	8006a56 <initialise_stdlib_abstraction+0x62>
    {
        vAssertCalled( __FILE__, __LINE__ );
 8006a4c:	f240 111b 	movw	r1, #283	@ 0x11b
 8006a50:	4803      	ldr	r0, [pc, #12]	@ (8006a60 <initialise_stdlib_abstraction+0x6c>)
 8006a52:	f7ff fef5 	bl	8006840 <vAssertCalled>
    }
#endif
}
 8006a56:	bf00      	nop
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	200004cc 	.word	0x200004cc
 8006a60:	0801971c 	.word	0x0801971c
 8006a64:	200004d0 	.word	0x200004d0
 8006a68:	200004d4 	.word	0x200004d4

08006a6c <_getpid>:
 * "machine mode"
 */
// ----------------------------------------------------------------------------
int _getpid( void )
// ----------------------------------------------------------------------------
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	af00      	add	r7, sp, #0
    return 1;
 8006a70:	2301      	movs	r3, #1
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <_kill>:
 * process with PID 1
 */
// ----------------------------------------------------------------------------
int _kill( int pid, int sig )
// ----------------------------------------------------------------------------
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
    ( void )pid;
    ( void )sig;

    if ( _impure_ptr != 0 )
 8006a86:	4b09      	ldr	r3, [pc, #36]	@ (8006aac <_kill+0x30>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d003      	beq.n	8006a96 <_kill+0x1a>
    {
        _impure_ptr->_errno = EINVAL;
 8006a8e:	4b07      	ldr	r3, [pc, #28]	@ (8006aac <_kill+0x30>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2216      	movs	r2, #22
 8006a94:	601a      	str	r2, [r3, #0]
    }
    errno = EINVAL;
 8006a96:	f00e f83b 	bl	8014b10 <__errno>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2216      	movs	r2, #22
 8006a9e:	601a      	str	r2, [r3, #0]
    return -1;
 8006aa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3708      	adds	r7, #8
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	200001d4 	.word	0x200001d4

08006ab0 <_exit>:
 */
// ----------------------------------------------------------------------------
__attribute__( ( noreturn ) )
void _exit ( int status )
// ----------------------------------------------------------------------------
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
    _kill( status, -1 );
 8006ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f7ff ffdd 	bl	8006a7c <_kill>
    while ( 1 ) {}
 8006ac2:	bf00      	nop
 8006ac4:	e7fd      	b.n	8006ac2 <_exit+0x12>
	...

08006ac8 <_read>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _read( int file, char* ptr, int len )
// ----------------------------------------------------------------------------
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b088      	sub	sp, #32
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
    ( void )file;

    int DataIdx;
    int resLen = 0;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	61bb      	str	r3, [r7, #24]

    if ( file == STDIN_FILENO )
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d121      	bne.n	8006b22 <_read+0x5a>
    {
        for ( DataIdx = 0; DataIdx < len; )
 8006ade:	2300      	movs	r3, #0
 8006ae0:	61fb      	str	r3, [r7, #28]
 8006ae2:	e019      	b.n	8006b18 <_read+0x50>
        {
            int result = __stdin_get_char();
 8006ae4:	f7ff fee4 	bl	80068b0 <__stdin_get_char>
 8006ae8:	6178      	str	r0, [r7, #20]
            if ( result == EOF )
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af0:	d106      	bne.n	8006b00 <_read+0x38>
            {
                if ( resLen == 0 )
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d124      	bne.n	8006b42 <_read+0x7a>
                {
                    resLen = EOF;
 8006af8:	f04f 33ff 	mov.w	r3, #4294967295
 8006afc:	61bb      	str	r3, [r7, #24]
                }
                break;
 8006afe:	e020      	b.n	8006b42 <_read+0x7a>
            }

            *ptr++ = ( char )result;
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	1c5a      	adds	r2, r3, #1
 8006b04:	60ba      	str	r2, [r7, #8]
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	b2d2      	uxtb	r2, r2
 8006b0a:	701a      	strb	r2, [r3, #0]
            resLen++;
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	61bb      	str	r3, [r7, #24]
            DataIdx++;
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	3301      	adds	r3, #1
 8006b16:	61fb      	str	r3, [r7, #28]
        for ( DataIdx = 0; DataIdx < len; )
 8006b18:	69fa      	ldr	r2, [r7, #28]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	dbe1      	blt.n	8006ae4 <_read+0x1c>
 8006b20:	e010      	b.n	8006b44 <_read+0x7c>

        }
    }
    else
    {
        if ( _impure_ptr != 0 )
 8006b22:	4b0b      	ldr	r3, [pc, #44]	@ (8006b50 <_read+0x88>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <_read+0x6a>
        {
            _impure_ptr->_errno = EBADF;
 8006b2a:	4b09      	ldr	r3, [pc, #36]	@ (8006b50 <_read+0x88>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2209      	movs	r2, #9
 8006b30:	601a      	str	r2, [r3, #0]
        }
        errno = EBADF;
 8006b32:	f00d ffed 	bl	8014b10 <__errno>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2209      	movs	r2, #9
 8006b3a:	601a      	str	r2, [r3, #0]
        return -1;
 8006b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b40:	e001      	b.n	8006b46 <_read+0x7e>
                break;
 8006b42:	bf00      	nop
    }

    return resLen;
 8006b44:	69bb      	ldr	r3, [r7, #24]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3720      	adds	r7, #32
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	200001d4 	.word	0x200001d4

08006b54 <_write>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _write( int file, char* ptr, int len )
// ----------------------------------------------------------------------------
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
    ( void )file;

    int DataIdx, locked = 0;
 8006b60:	2300      	movs	r3, #0
 8006b62:	613b      	str	r3, [r7, #16]

    if ( file == STDOUT_FILENO || file == STDERR_FILENO )
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d002      	beq.n	8006b70 <_write+0x1c>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d149      	bne.n	8006c04 <_write+0xb0>
    {

#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_STDOUT)
        if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006b70:	f00a fb42 	bl	80111f8 <xTaskGetSchedulerState>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d108      	bne.n	8006b8c <_write+0x38>
        {
            xSemaphoreTakeRecursive( stdioSemaphore, -1 );
 8006b7a:	4b2c      	ldr	r3, [pc, #176]	@ (8006c2c <_write+0xd8>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f04f 31ff 	mov.w	r1, #4294967295
 8006b82:	4618      	mov	r0, r3
 8006b84:	f008 fb74 	bl	800f270 <xQueueTakeMutexRecursive>
            locked = 1;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	613b      	str	r3, [r7, #16]
        }
#endif

        if (file == STDERR_FILENO)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d10e      	bne.n	8006bb0 <_write+0x5c>
        {
        	__stdout_put_char('\033');
 8006b92:	201b      	movs	r0, #27
 8006b94:	f7ff fe68 	bl	8006868 <__stdout_put_char>
        	__stdout_put_char('[');
 8006b98:	205b      	movs	r0, #91	@ 0x5b
 8006b9a:	f7ff fe65 	bl	8006868 <__stdout_put_char>
        	__stdout_put_char('3');
 8006b9e:	2033      	movs	r0, #51	@ 0x33
 8006ba0:	f7ff fe62 	bl	8006868 <__stdout_put_char>
        	__stdout_put_char('1');
 8006ba4:	2031      	movs	r0, #49	@ 0x31
 8006ba6:	f7ff fe5f 	bl	8006868 <__stdout_put_char>
        	__stdout_put_char('m');
 8006baa:	206d      	movs	r0, #109	@ 0x6d
 8006bac:	f7ff fe5c 	bl	8006868 <__stdout_put_char>
        }
        for ( DataIdx = 0; DataIdx < len; DataIdx++ )
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	617b      	str	r3, [r7, #20]
 8006bb4:	e009      	b.n	8006bca <_write+0x76>
        {
            __stdout_put_char( ptr[DataIdx] );
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	4413      	add	r3, r2
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7ff fe52 	bl	8006868 <__stdout_put_char>
        for ( DataIdx = 0; DataIdx < len; DataIdx++ )
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	617b      	str	r3, [r7, #20]
 8006bca:	697a      	ldr	r2, [r7, #20]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	dbf1      	blt.n	8006bb6 <_write+0x62>
        }
        if (file == STDERR_FILENO)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d10b      	bne.n	8006bf0 <_write+0x9c>
        {
        	__stdout_put_char('\033');
 8006bd8:	201b      	movs	r0, #27
 8006bda:	f7ff fe45 	bl	8006868 <__stdout_put_char>
        	__stdout_put_char('[');
 8006bde:	205b      	movs	r0, #91	@ 0x5b
 8006be0:	f7ff fe42 	bl	8006868 <__stdout_put_char>
        	__stdout_put_char('0');
 8006be4:	2030      	movs	r0, #48	@ 0x30
 8006be6:	f7ff fe3f 	bl	8006868 <__stdout_put_char>
        	__stdout_put_char('m');
 8006bea:	206d      	movs	r0, #109	@ 0x6d
 8006bec:	f7ff fe3c 	bl	8006868 <__stdout_put_char>
        }

#if defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_STDOUT)
        if ( locked )
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d004      	beq.n	8006c00 <_write+0xac>
        {
            xSemaphoreGiveRecursive( stdioSemaphore );
 8006bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8006c2c <_write+0xd8>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f008 fafc 	bl	800f1f8 <xQueueGiveMutexRecursive>
        }
#endif

        return len;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	e00e      	b.n	8006c22 <_write+0xce>
    }
    else
    {
        if ( _impure_ptr != 0 )
 8006c04:	4b0a      	ldr	r3, [pc, #40]	@ (8006c30 <_write+0xdc>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d003      	beq.n	8006c14 <_write+0xc0>
        {
            _impure_ptr->_errno = EBADF;
 8006c0c:	4b08      	ldr	r3, [pc, #32]	@ (8006c30 <_write+0xdc>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2209      	movs	r2, #9
 8006c12:	601a      	str	r2, [r3, #0]
        }
        errno = EBADF;
 8006c14:	f00d ff7c 	bl	8014b10 <__errno>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2209      	movs	r2, #9
 8006c1c:	601a      	str	r2, [r3, #0]
        return -1;
 8006c1e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3718      	adds	r7, #24
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	200004cc 	.word	0x200004cc
 8006c30:	200001d4 	.word	0x200001d4

08006c34 <_close>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _close( int file )
// ----------------------------------------------------------------------------
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
    ( void )file;

    return -1;
 8006c3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <_fstat>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _fstat( int file, struct stat* st )
// ----------------------------------------------------------------------------
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
    st->st_dev    = file;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	b21a      	sxth	r2, r3
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	801a      	strh	r2, [r3, #0]
    st->st_size   = 0;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	2200      	movs	r2, #0
 8006c62:	611a      	str	r2, [r3, #16]
    st->st_blocks = 0;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	2200      	movs	r2, #0
 8006c68:	64da      	str	r2, [r3, #76]	@ 0x4c

    if ( file >= 1 && file <= 3 )
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	dd08      	ble.n	8006c82 <_fstat+0x36>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	dc05      	bgt.n	8006c82 <_fstat+0x36>
    {
        st->st_mode = S_IFCHR;
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006c7c:	605a      	str	r2, [r3, #4]
        return 0;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	e005      	b.n	8006c8e <_fstat+0x42>
    }
    else
    {
        st->st_mode = S_IFREG;
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006c88:	605a      	str	r2, [r3, #4]
        return -1;
 8006c8a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <_isatty>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _isatty( int file )
// ----------------------------------------------------------------------------
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b083      	sub	sp, #12
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
    // is stdin, stdout or stderror
    if ( file >= 0 && file <= 2 )
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	db04      	blt.n	8006cb2 <_isatty+0x18>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	dc01      	bgt.n	8006cb2 <_isatty+0x18>
    {
        return file;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	e000      	b.n	8006cb4 <_isatty+0x1a>
    }
    return 0;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <_lseek>:

// ----------------------------------------------------------------------------
int _lseek( int file, int ptr, int dir )
// ----------------------------------------------------------------------------
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
    ( void )file;
    ( void )ptr;
    ( void )dir;

    return 0;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3714      	adds	r7, #20
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
	...

08006cdc <_sbrk_r>:
static UBaseType_t malLock_uxSavedInterruptStatus;

// ----------------------------------------------------------------------------
void* _sbrk_r( struct _reent* pReent, int incr )
// ----------------------------------------------------------------------------
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b088      	sub	sp, #32
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
    ( void )pReent;
    ( void )incr;
    register char* stack_ptr asm( "sp" );

    // make sure to calculate the correct heap size and bytes remaining at the first call!
    if( TotalHeapSize == 0 )
 8006ce6:	4b37      	ldr	r3, [pc, #220]	@ (8006dc4 <_sbrk_r+0xe8>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d113      	bne.n	8006d16 <_sbrk_r+0x3a>
    {
        TotalHeapSize = heapBytesRemaining = stickyHeapBytesRemaining
                                             = ( int )( ( &__HeapLimit ) - ( &__HeapBase ) )
 8006cee:	4a36      	ldr	r2, [pc, #216]	@ (8006dc8 <_sbrk_r+0xec>)
 8006cf0:	4b36      	ldr	r3, [pc, #216]	@ (8006dcc <_sbrk_r+0xf0>)
 8006cf2:	1ad3      	subs	r3, r2, r3
#ifdef configISR_STACK_SIZE_WORDS
                                               - ( configISR_STACK_SIZE_WORDS * 4 )
 8006cf4:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8006cf8:	461a      	mov	r2, r3
                                             = ( int )( ( &__HeapLimit ) - ( &__HeapBase ) )
 8006cfa:	4b35      	ldr	r3, [pc, #212]	@ (8006dd0 <_sbrk_r+0xf4>)
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	4a32      	ldr	r2, [pc, #200]	@ (8006dc8 <_sbrk_r+0xec>)
 8006d00:	4b32      	ldr	r3, [pc, #200]	@ (8006dcc <_sbrk_r+0xf0>)
 8006d02:	1ad3      	subs	r3, r2, r3
                                               - ( configISR_STACK_SIZE_WORDS * 4 )
 8006d04:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
        TotalHeapSize = heapBytesRemaining = stickyHeapBytesRemaining
 8006d08:	4a32      	ldr	r2, [pc, #200]	@ (8006dd4 <_sbrk_r+0xf8>)
 8006d0a:	6013      	str	r3, [r2, #0]
 8006d0c:	4b31      	ldr	r3, [pc, #196]	@ (8006dd4 <_sbrk_r+0xf8>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	461a      	mov	r2, r3
 8006d12:	4b2c      	ldr	r3, [pc, #176]	@ (8006dc4 <_sbrk_r+0xe8>)
 8006d14:	601a      	str	r2, [r3, #0]
#endif
                                               ;
    };
    static char* currentHeapEnd = &__HeapBase;
    char* limit = ( xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED ) ?
 8006d16:	f00a fa6f 	bl	80111f8 <xTaskGetSchedulerState>
 8006d1a:	4603      	mov	r3, r0
                  stack_ptr   :  // Before scheduler is started, limit is stack pointer (risky!)
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d101      	bne.n	8006d24 <_sbrk_r+0x48>
 8006d20:	466b      	mov	r3, sp
 8006d22:	e000      	b.n	8006d26 <_sbrk_r+0x4a>
 8006d24:	4b2c      	ldr	r3, [pc, #176]	@ (8006dd8 <_sbrk_r+0xfc>)
    char* limit = ( xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED ) ?
 8006d26:	61fb      	str	r3, [r7, #28]
    __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006d28:	f3ef 8305 	mrs	r3, IPSR
 8006d2c:	613b      	str	r3, [r7, #16]
    if( ulCurrentInterrupt == 0 )
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d102      	bne.n	8006d3a <_sbrk_r+0x5e>
        xReturn = pdFALSE;
 8006d34:	2300      	movs	r3, #0
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	e001      	b.n	8006d3e <_sbrk_r+0x62>
        xReturn = pdTRUE;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	60fb      	str	r3, [r7, #12]
    return xReturn;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
                  &__HeapLimit
#ifdef configISR_STACK_SIZE_WORDS
                  - ( configISR_STACK_SIZE_WORDS * 4 )
#endif
                  ; // Once running, OK to reuse all remaining RAM except ISR stack (MSP) stack
    DRN_ENTER_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
 8006d40:	61bb      	str	r3, [r7, #24]
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d010      	beq.n	8006d6a <_sbrk_r+0x8e>
    __asm volatile
 8006d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d4c:	b672      	cpsid	i
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	b662      	cpsie	i
 8006d5c:	60bb      	str	r3, [r7, #8]
}
 8006d5e:	bf00      	nop
 8006d60:	f240 21c1 	movw	r1, #705	@ 0x2c1
 8006d64:	481d      	ldr	r0, [pc, #116]	@ (8006ddc <_sbrk_r+0x100>)
 8006d66:	f7ff fd6b 	bl	8006840 <vAssertCalled>
    if ( currentHeapEnd + incr > limit )
 8006d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8006de0 <_sbrk_r+0x104>)
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	4413      	add	r3, r2
 8006d72:	69fa      	ldr	r2, [r7, #28]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d204      	bcs.n	8006d82 <_sbrk_r+0xa6>
        // Ooops, no more memory available...
#if( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            extern void vApplicationMallocFailedHook( void );
            DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
            vApplicationMallocFailedHook();
 8006d78:	f7ff f8f6 	bl	8005f68 <vApplicationMallocFailedHook>
#else
        // Default, if you prefer to believe your application will gracefully trap out-of-memory...
        pReent->_errno = ENOMEM; // newlib's thread-specific errno
        DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
#endif
        return ( char* ) -1; // the malloc-family routine that called sbrk will return 0
 8006d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d80:	e01b      	b.n	8006dba <_sbrk_r+0xde>
    }

    char* previousHeapEnd = currentHeapEnd;
 8006d82:	4b17      	ldr	r3, [pc, #92]	@ (8006de0 <_sbrk_r+0x104>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	617b      	str	r3, [r7, #20]
    currentHeapEnd += incr;
 8006d88:	4b15      	ldr	r3, [pc, #84]	@ (8006de0 <_sbrk_r+0x104>)
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	4413      	add	r3, r2
 8006d90:	4a13      	ldr	r2, [pc, #76]	@ (8006de0 <_sbrk_r+0x104>)
 8006d92:	6013      	str	r3, [r2, #0]
    heapBytesRemaining -= incr;
 8006d94:	4b0f      	ldr	r3, [pc, #60]	@ (8006dd4 <_sbrk_r+0xf8>)
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8006dd4 <_sbrk_r+0xf8>)
 8006d9e:	6013      	str	r3, [r2, #0]

    // implement the statistical feature to provide the minimum free heap size feature
    // of FreeRTOS statistics
    if ( stickyHeapBytesRemaining > xPortGetFreeHeapSize() )
 8006da0:	f000 f8d0 	bl	8006f44 <xPortGetFreeHeapSize>
 8006da4:	4602      	mov	r2, r0
 8006da6:	4b0a      	ldr	r3, [pc, #40]	@ (8006dd0 <_sbrk_r+0xf4>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d204      	bcs.n	8006db8 <_sbrk_r+0xdc>
    {
        stickyHeapBytesRemaining = xPortGetFreeHeapSize();
 8006dae:	f000 f8c9 	bl	8006f44 <xPortGetFreeHeapSize>
 8006db2:	4603      	mov	r3, r0
 8006db4:	4a06      	ldr	r2, [pc, #24]	@ (8006dd0 <_sbrk_r+0xf4>)
 8006db6:	6013      	str	r3, [r2, #0]
    }

    DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
    return ( char* ) previousHeapEnd;
 8006db8:	697b      	ldr	r3, [r7, #20]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3720      	adds	r7, #32
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	200004e0 	.word	0x200004e0
 8006dc8:	20050000 	.word	0x20050000
 8006dcc:	200007e0 	.word	0x200007e0
 8006dd0:	200004dc 	.word	0x200004dc
 8006dd4:	200004d8 	.word	0x200004d8
 8006dd8:	2004c000 	.word	0x2004c000
 8006ddc:	0801971c 	.word	0x0801971c
 8006de0:	20000048 	.word	0x20000048

08006de4 <__malloc_lock>:
}

// ----------------------------------------------------------------------------
__attribute__( ( weak ) ) void __malloc_lock( struct _reent* r )
// ----------------------------------------------------------------------------
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
    ( void )r;

#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_MALLOC)
    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING  )
 8006dec:	f00a fa04 	bl	80111f8 <xTaskGetSchedulerState>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d106      	bne.n	8006e04 <__malloc_lock+0x20>
    {
        xSemaphoreTakeRecursive( mallocSemaphore, -1 );
 8006df6:	4b16      	ldr	r3, [pc, #88]	@ (8006e50 <__malloc_lock+0x6c>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f04f 31ff 	mov.w	r1, #4294967295
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f008 fa36 	bl	800f270 <xQueueTakeMutexRecursive>
    __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006e04:	f3ef 8305 	mrs	r3, IPSR
 8006e08:	613b      	str	r3, [r7, #16]
    if( ulCurrentInterrupt == 0 )
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d102      	bne.n	8006e16 <__malloc_lock+0x32>
        xReturn = pdFALSE;
 8006e10:	2300      	movs	r3, #0
 8006e12:	60fb      	str	r3, [r7, #12]
 8006e14:	e001      	b.n	8006e1a <__malloc_lock+0x36>
        xReturn = pdTRUE;
 8006e16:	2301      	movs	r3, #1
 8006e18:	60fb      	str	r3, [r7, #12]
    return xReturn;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
    }
#endif

    DRN_ENTER_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
 8006e1c:	617b      	str	r3, [r7, #20]
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d010      	beq.n	8006e46 <__malloc_lock+0x62>
    __asm volatile
 8006e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e28:	b672      	cpsid	i
 8006e2a:	f383 8811 	msr	BASEPRI, r3
 8006e2e:	f3bf 8f6f 	isb	sy
 8006e32:	f3bf 8f4f 	dsb	sy
 8006e36:	b662      	cpsie	i
 8006e38:	60bb      	str	r3, [r7, #8]
}
 8006e3a:	bf00      	nop
 8006e3c:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8006e40:	4804      	ldr	r0, [pc, #16]	@ (8006e54 <__malloc_lock+0x70>)
 8006e42:	f7ff fcfd 	bl	8006840 <vAssertCalled>
}
 8006e46:	bf00      	nop
 8006e48:	3718      	adds	r7, #24
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	200004d0 	.word	0x200004d0
 8006e54:	0801971c 	.word	0x0801971c

08006e58 <__malloc_unlock>:

// ----------------------------------------------------------------------------
__attribute__( ( weak ) ) void __malloc_unlock( struct _reent* r )
// ----------------------------------------------------------------------------
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
    ( void )r;

#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_MALLOC)
    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e60:	f00a f9ca 	bl	80111f8 <xTaskGetSchedulerState>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d104      	bne.n	8006e74 <__malloc_unlock+0x1c>
    {
        xSemaphoreGiveRecursive( mallocSemaphore );
 8006e6a:	4b04      	ldr	r3, [pc, #16]	@ (8006e7c <__malloc_unlock+0x24>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f008 f9c2 	bl	800f1f8 <xQueueGiveMutexRecursive>
    }
#endif

    DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
}
 8006e74:	bf00      	nop
 8006e76:	3708      	adds	r7, #8
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	200004d0 	.word	0x200004d0

08006e80 <__env_lock>:

// ----------------------------------------------------------------------------
__attribute__( ( weak ) ) void __env_lock( void )
// ----------------------------------------------------------------------------
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_ENV)
    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e86:	f00a f9b7 	bl	80111f8 <xTaskGetSchedulerState>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d106      	bne.n	8006e9e <__env_lock+0x1e>
    {
        xSemaphoreTakeRecursive( envSemaphore, -1 );
 8006e90:	4b15      	ldr	r3, [pc, #84]	@ (8006ee8 <__env_lock+0x68>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f04f 31ff 	mov.w	r1, #4294967295
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f008 f9e9 	bl	800f270 <xQueueTakeMutexRecursive>
    __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006e9e:	f3ef 8305 	mrs	r3, IPSR
 8006ea2:	60bb      	str	r3, [r7, #8]
    if( ulCurrentInterrupt == 0 )
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d102      	bne.n	8006eb0 <__env_lock+0x30>
        xReturn = pdFALSE;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	607b      	str	r3, [r7, #4]
 8006eae:	e001      	b.n	8006eb4 <__env_lock+0x34>
        xReturn = pdTRUE;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	607b      	str	r3, [r7, #4]
    return xReturn;
 8006eb4:	687b      	ldr	r3, [r7, #4]
    }
#endif

    DRN_ENTER_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
 8006eb6:	60fb      	str	r3, [r7, #12]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d010      	beq.n	8006ee0 <__env_lock+0x60>
    __asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec2:	b672      	cpsid	i
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	b662      	cpsie	i
 8006ed2:	603b      	str	r3, [r7, #0]
}
 8006ed4:	bf00      	nop
 8006ed6:	f240 3126 	movw	r1, #806	@ 0x326
 8006eda:	4804      	ldr	r0, [pc, #16]	@ (8006eec <__env_lock+0x6c>)
 8006edc:	f7ff fcb0 	bl	8006840 <vAssertCalled>
}
 8006ee0:	bf00      	nop
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	200004d4 	.word	0x200004d4
 8006eec:	0801971c 	.word	0x0801971c

08006ef0 <__env_unlock>:

// ----------------------------------------------------------------------------
__attribute__( ( weak ) ) void __env_unlock( void )
// ----------------------------------------------------------------------------
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	af00      	add	r7, sp, #0
#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_ENV)
    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006ef4:	f00a f980 	bl	80111f8 <xTaskGetSchedulerState>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d104      	bne.n	8006f08 <__env_unlock+0x18>
    {
        xSemaphoreGiveRecursive( envSemaphore );
 8006efe:	4b03      	ldr	r3, [pc, #12]	@ (8006f0c <__env_unlock+0x1c>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4618      	mov	r0, r3
 8006f04:	f008 f978 	bl	800f1f8 <xQueueGiveMutexRecursive>
    }
#endif

    DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
}
 8006f08:	bf00      	nop
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	200004d4 	.word	0x200004d4

08006f10 <pvPortMalloc>:

// ----------------------------------------------------------------------------
void* pvPortMalloc( size_t xSize )
// ----------------------------------------------------------------------------
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
    void* p = malloc( xSize );
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f00b f9c3 	bl	80122a4 <malloc>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	60fb      	str	r3, [r7, #12]
    return p;
 8006f22:	68fb      	ldr	r3, [r7, #12]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <vPortFree>:

// ----------------------------------------------------------------------------
void vPortFree( void* pv )
// ----------------------------------------------------------------------------
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
    free( pv );
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f00b f9bd 	bl	80122b4 <free>
}
 8006f3a:	bf00      	nop
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
	...

08006f44 <xPortGetFreeHeapSize>:

// ----------------------------------------------------------------------------
size_t xPortGetFreeHeapSize( void )
// ----------------------------------------------------------------------------
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b08c      	sub	sp, #48	@ 0x30
 8006f48:	af00      	add	r7, sp, #0
	static int lockGuard = 0;
	if ( lockGuard != 0 ) return stickyHeapBytesRemaining;
 8006f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8006f80 <xPortGetFreeHeapSize+0x3c>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d002      	beq.n	8006f58 <xPortGetFreeHeapSize+0x14>
 8006f52:	4b0c      	ldr	r3, [pc, #48]	@ (8006f84 <xPortGetFreeHeapSize+0x40>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	e00f      	b.n	8006f78 <xPortGetFreeHeapSize+0x34>
	lockGuard = 1;
 8006f58:	4b09      	ldr	r3, [pc, #36]	@ (8006f80 <xPortGetFreeHeapSize+0x3c>)
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	601a      	str	r2, [r3, #0]
    struct mallinfo mi = mallinfo();
 8006f5e:	1d3b      	adds	r3, r7, #4
 8006f60:	4618      	mov	r0, r3
 8006f62:	f00b fa51 	bl	8012408 <mallinfo>
    size_t result = mi.fordblks + heapBytesRemaining;
 8006f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f68:	4a07      	ldr	r2, [pc, #28]	@ (8006f88 <xPortGetFreeHeapSize+0x44>)
 8006f6a:	6812      	ldr	r2, [r2, #0]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lockGuard = 0;
 8006f70:	4b03      	ldr	r3, [pc, #12]	@ (8006f80 <xPortGetFreeHeapSize+0x3c>)
 8006f72:	2200      	movs	r2, #0
 8006f74:	601a      	str	r2, [r3, #0]
    return result;
 8006f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3730      	adds	r7, #48	@ 0x30
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	200004e4 	.word	0x200004e4
 8006f84:	200004dc 	.word	0x200004dc
 8006f88:	200004d8 	.word	0x200004d8

08006f8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8006f92:	4b0f      	ldr	r3, [pc, #60]	@ (8006fd0 <HAL_MspInit+0x44>)
 8006f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f96:	4a0e      	ldr	r2, [pc, #56]	@ (8006fd0 <HAL_MspInit+0x44>)
 8006f98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8006fd0 <HAL_MspInit+0x44>)
 8006fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fa6:	607b      	str	r3, [r7, #4]
 8006fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006faa:	4b09      	ldr	r3, [pc, #36]	@ (8006fd0 <HAL_MspInit+0x44>)
 8006fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fae:	4a08      	ldr	r2, [pc, #32]	@ (8006fd0 <HAL_MspInit+0x44>)
 8006fb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006fb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8006fb6:	4b06      	ldr	r3, [pc, #24]	@ (8006fd0 <HAL_MspInit+0x44>)
 8006fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fbe:	603b      	str	r3, [r7, #0]
 8006fc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006fc2:	bf00      	nop
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	40023800 	.word	0x40023800

08006fd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b08a      	sub	sp, #40	@ 0x28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fdc:	f107 0314 	add.w	r3, r7, #20
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	601a      	str	r2, [r3, #0]
 8006fe4:	605a      	str	r2, [r3, #4]
 8006fe6:	609a      	str	r2, [r3, #8]
 8006fe8:	60da      	str	r2, [r3, #12]
 8006fea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8007060 <HAL_SPI_MspInit+0x8c>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d12f      	bne.n	8007056 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006ff6:	4b1b      	ldr	r3, [pc, #108]	@ (8007064 <HAL_SPI_MspInit+0x90>)
 8006ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ffa:	4a1a      	ldr	r2, [pc, #104]	@ (8007064 <HAL_SPI_MspInit+0x90>)
 8006ffc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007000:	6453      	str	r3, [r2, #68]	@ 0x44
 8007002:	4b18      	ldr	r3, [pc, #96]	@ (8007064 <HAL_SPI_MspInit+0x90>)
 8007004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007006:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800700a:	613b      	str	r3, [r7, #16]
 800700c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800700e:	4b15      	ldr	r3, [pc, #84]	@ (8007064 <HAL_SPI_MspInit+0x90>)
 8007010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007012:	4a14      	ldr	r2, [pc, #80]	@ (8007064 <HAL_SPI_MspInit+0x90>)
 8007014:	f043 0301 	orr.w	r3, r3, #1
 8007018:	6313      	str	r3, [r2, #48]	@ 0x30
 800701a:	4b12      	ldr	r3, [pc, #72]	@ (8007064 <HAL_SPI_MspInit+0x90>)
 800701c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800701e:	f003 0301 	and.w	r3, r3, #1
 8007022:	60fb      	str	r3, [r7, #12]
 8007024:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = STEP_SPI_SCK_Pin|STEP_SPI_MISO_Pin|STEP_SPI_MOSI_Pin;
 8007026:	23e0      	movs	r3, #224	@ 0xe0
 8007028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800702a:	2302      	movs	r3, #2
 800702c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800702e:	2300      	movs	r3, #0
 8007030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007032:	2303      	movs	r3, #3
 8007034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007036:	2305      	movs	r3, #5
 8007038:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800703a:	f107 0314 	add.w	r3, r7, #20
 800703e:	4619      	mov	r1, r3
 8007040:	4809      	ldr	r0, [pc, #36]	@ (8007068 <HAL_SPI_MspInit+0x94>)
 8007042:	f000 fd13 	bl	8007a6c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8007046:	2200      	movs	r2, #0
 8007048:	2105      	movs	r1, #5
 800704a:	2023      	movs	r0, #35	@ 0x23
 800704c:	f000 fb0e 	bl	800766c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8007050:	2023      	movs	r0, #35	@ 0x23
 8007052:	f000 fb37 	bl	80076c4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8007056:	bf00      	nop
 8007058:	3728      	adds	r7, #40	@ 0x28
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	40013000 	.word	0x40013000
 8007064:	40023800 	.word	0x40023800
 8007068:	40020000 	.word	0x40020000

0800706c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b086      	sub	sp, #24
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a23      	ldr	r2, [pc, #140]	@ (8007108 <HAL_TIM_Base_MspInit+0x9c>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d11c      	bne.n	80070b8 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800707e:	4b23      	ldr	r3, [pc, #140]	@ (800710c <HAL_TIM_Base_MspInit+0xa0>)
 8007080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007082:	4a22      	ldr	r2, [pc, #136]	@ (800710c <HAL_TIM_Base_MspInit+0xa0>)
 8007084:	f043 0301 	orr.w	r3, r3, #1
 8007088:	6453      	str	r3, [r2, #68]	@ 0x44
 800708a:	4b20      	ldr	r3, [pc, #128]	@ (800710c <HAL_TIM_Base_MspInit+0xa0>)
 800708c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	617b      	str	r3, [r7, #20]
 8007094:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8007096:	2200      	movs	r2, #0
 8007098:	2100      	movs	r1, #0
 800709a:	2019      	movs	r0, #25
 800709c:	f000 fae6 	bl	800766c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80070a0:	2019      	movs	r0, #25
 80070a2:	f000 fb0f 	bl	80076c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80070a6:	2200      	movs	r2, #0
 80070a8:	2100      	movs	r1, #0
 80070aa:	201b      	movs	r0, #27
 80070ac:	f000 fade 	bl	800766c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80070b0:	201b      	movs	r0, #27
 80070b2:	f000 fb07 	bl	80076c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80070b6:	e022      	b.n	80070fe <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070c0:	d10c      	bne.n	80070dc <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80070c2:	4b12      	ldr	r3, [pc, #72]	@ (800710c <HAL_TIM_Base_MspInit+0xa0>)
 80070c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070c6:	4a11      	ldr	r2, [pc, #68]	@ (800710c <HAL_TIM_Base_MspInit+0xa0>)
 80070c8:	f043 0301 	orr.w	r3, r3, #1
 80070cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80070ce:	4b0f      	ldr	r3, [pc, #60]	@ (800710c <HAL_TIM_Base_MspInit+0xa0>)
 80070d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	613b      	str	r3, [r7, #16]
 80070d8:	693b      	ldr	r3, [r7, #16]
}
 80070da:	e010      	b.n	80070fe <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a0b      	ldr	r2, [pc, #44]	@ (8007110 <HAL_TIM_Base_MspInit+0xa4>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d10b      	bne.n	80070fe <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80070e6:	4b09      	ldr	r3, [pc, #36]	@ (800710c <HAL_TIM_Base_MspInit+0xa0>)
 80070e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ea:	4a08      	ldr	r2, [pc, #32]	@ (800710c <HAL_TIM_Base_MspInit+0xa0>)
 80070ec:	f043 0304 	orr.w	r3, r3, #4
 80070f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80070f2:	4b06      	ldr	r3, [pc, #24]	@ (800710c <HAL_TIM_Base_MspInit+0xa0>)
 80070f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070f6:	f003 0304 	and.w	r3, r3, #4
 80070fa:	60fb      	str	r3, [r7, #12]
 80070fc:	68fb      	ldr	r3, [r7, #12]
}
 80070fe:	bf00      	nop
 8007100:	3718      	adds	r7, #24
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	40010000 	.word	0x40010000
 800710c:	40023800 	.word	0x40023800
 8007110:	40000800 	.word	0x40000800

08007114 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b08a      	sub	sp, #40	@ 0x28
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800711c:	f107 0314 	add.w	r3, r7, #20
 8007120:	2200      	movs	r2, #0
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	605a      	str	r2, [r3, #4]
 8007126:	609a      	str	r2, [r3, #8]
 8007128:	60da      	str	r2, [r3, #12]
 800712a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007134:	d11d      	bne.n	8007172 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007136:	4b22      	ldr	r3, [pc, #136]	@ (80071c0 <HAL_TIM_MspPostInit+0xac>)
 8007138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800713a:	4a21      	ldr	r2, [pc, #132]	@ (80071c0 <HAL_TIM_MspPostInit+0xac>)
 800713c:	f043 0302 	orr.w	r3, r3, #2
 8007140:	6313      	str	r3, [r2, #48]	@ 0x30
 8007142:	4b1f      	ldr	r3, [pc, #124]	@ (80071c0 <HAL_TIM_MspPostInit+0xac>)
 8007144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007146:	f003 0302 	and.w	r3, r3, #2
 800714a:	613b      	str	r3, [r7, #16]
 800714c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = SPINDLE_PWM_L_Pin|SPINDLE_PWM_R_Pin;
 800714e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007154:	2302      	movs	r3, #2
 8007156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007158:	2300      	movs	r3, #0
 800715a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800715c:	2300      	movs	r3, #0
 800715e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007160:	2301      	movs	r3, #1
 8007162:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007164:	f107 0314 	add.w	r3, r7, #20
 8007168:	4619      	mov	r1, r3
 800716a:	4816      	ldr	r0, [pc, #88]	@ (80071c4 <HAL_TIM_MspPostInit+0xb0>)
 800716c:	f000 fc7e 	bl	8007a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8007170:	e021      	b.n	80071b6 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a14      	ldr	r2, [pc, #80]	@ (80071c8 <HAL_TIM_MspPostInit+0xb4>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d11c      	bne.n	80071b6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800717c:	4b10      	ldr	r3, [pc, #64]	@ (80071c0 <HAL_TIM_MspPostInit+0xac>)
 800717e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007180:	4a0f      	ldr	r2, [pc, #60]	@ (80071c0 <HAL_TIM_MspPostInit+0xac>)
 8007182:	f043 0308 	orr.w	r3, r3, #8
 8007186:	6313      	str	r3, [r2, #48]	@ 0x30
 8007188:	4b0d      	ldr	r3, [pc, #52]	@ (80071c0 <HAL_TIM_MspPostInit+0xac>)
 800718a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800718c:	f003 0308 	and.w	r3, r3, #8
 8007190:	60fb      	str	r3, [r7, #12]
 8007192:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007194:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800719a:	2302      	movs	r3, #2
 800719c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800719e:	2300      	movs	r3, #0
 80071a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071a2:	2300      	movs	r3, #0
 80071a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80071a6:	2302      	movs	r3, #2
 80071a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80071aa:	f107 0314 	add.w	r3, r7, #20
 80071ae:	4619      	mov	r1, r3
 80071b0:	4806      	ldr	r0, [pc, #24]	@ (80071cc <HAL_TIM_MspPostInit+0xb8>)
 80071b2:	f000 fc5b 	bl	8007a6c <HAL_GPIO_Init>
}
 80071b6:	bf00      	nop
 80071b8:	3728      	adds	r7, #40	@ 0x28
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	40023800 	.word	0x40023800
 80071c4:	40020400 	.word	0x40020400
 80071c8:	40000800 	.word	0x40000800
 80071cc:	40020c00 	.word	0x40020c00

080071d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b0aa      	sub	sp, #168	@ 0xa8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071d8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80071dc:	2200      	movs	r2, #0
 80071de:	601a      	str	r2, [r3, #0]
 80071e0:	605a      	str	r2, [r3, #4]
 80071e2:	609a      	str	r2, [r3, #8]
 80071e4:	60da      	str	r2, [r3, #12]
 80071e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80071e8:	f107 0310 	add.w	r3, r7, #16
 80071ec:	2284      	movs	r2, #132	@ 0x84
 80071ee:	2100      	movs	r1, #0
 80071f0:	4618      	mov	r0, r3
 80071f2:	f00d fb55 	bl	80148a0 <memset>
  if(huart->Instance==USART3)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a22      	ldr	r2, [pc, #136]	@ (8007284 <HAL_UART_MspInit+0xb4>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d13c      	bne.n	800727a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8007200:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007204:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8007206:	2300      	movs	r3, #0
 8007208:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800720a:	f107 0310 	add.w	r3, r7, #16
 800720e:	4618      	mov	r0, r3
 8007210:	f001 fde4 	bl	8008ddc <HAL_RCCEx_PeriphCLKConfig>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d001      	beq.n	800721e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800721a:	f7ff fbc0 	bl	800699e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800721e:	4b1a      	ldr	r3, [pc, #104]	@ (8007288 <HAL_UART_MspInit+0xb8>)
 8007220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007222:	4a19      	ldr	r2, [pc, #100]	@ (8007288 <HAL_UART_MspInit+0xb8>)
 8007224:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007228:	6413      	str	r3, [r2, #64]	@ 0x40
 800722a:	4b17      	ldr	r3, [pc, #92]	@ (8007288 <HAL_UART_MspInit+0xb8>)
 800722c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800722e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007232:	60fb      	str	r3, [r7, #12]
 8007234:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007236:	4b14      	ldr	r3, [pc, #80]	@ (8007288 <HAL_UART_MspInit+0xb8>)
 8007238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800723a:	4a13      	ldr	r2, [pc, #76]	@ (8007288 <HAL_UART_MspInit+0xb8>)
 800723c:	f043 0308 	orr.w	r3, r3, #8
 8007240:	6313      	str	r3, [r2, #48]	@ 0x30
 8007242:	4b11      	ldr	r3, [pc, #68]	@ (8007288 <HAL_UART_MspInit+0xb8>)
 8007244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007246:	f003 0308 	and.w	r3, r3, #8
 800724a:	60bb      	str	r3, [r7, #8]
 800724c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART_TX_Pin|DEBUG_UART_RX_Pin;
 800724e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007252:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007256:	2302      	movs	r3, #2
 8007258:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800725c:	2300      	movs	r3, #0
 800725e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007262:	2303      	movs	r3, #3
 8007264:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007268:	2307      	movs	r3, #7
 800726a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800726e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8007272:	4619      	mov	r1, r3
 8007274:	4805      	ldr	r0, [pc, #20]	@ (800728c <HAL_UART_MspInit+0xbc>)
 8007276:	f000 fbf9 	bl	8007a6c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800727a:	bf00      	nop
 800727c:	37a8      	adds	r7, #168	@ 0xa8
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	40004800 	.word	0x40004800
 8007288:	40023800 	.word	0x40023800
 800728c:	40020c00 	.word	0x40020c00

08007290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007290:	b480      	push	{r7}
 8007292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007294:	bf00      	nop
 8007296:	e7fd      	b.n	8007294 <NMI_Handler+0x4>

08007298 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007298:	b480      	push	{r7}
 800729a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800729c:	bf00      	nop
 800729e:	e7fd      	b.n	800729c <HardFault_Handler+0x4>

080072a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80072a0:	b480      	push	{r7}
 80072a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80072a4:	bf00      	nop
 80072a6:	e7fd      	b.n	80072a4 <MemManage_Handler+0x4>

080072a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80072a8:	b480      	push	{r7}
 80072aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80072ac:	bf00      	nop
 80072ae:	e7fd      	b.n	80072ac <BusFault_Handler+0x4>

080072b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80072b0:	b480      	push	{r7}
 80072b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80072b4:	bf00      	nop
 80072b6:	e7fd      	b.n	80072b4 <UsageFault_Handler+0x4>

080072b8 <DebugMon_Handler>:
void DebugMon_Handler(void)
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
#endif
void DebugMon_Handler(void)
{
 80072b8:	b480      	push	{r7}
 80072ba:	af00      	add	r7, sp, #0
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
}
 80072bc:	bf00      	nop
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
#endif
void SysTick_Handler(void)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	af00      	add	r7, sp, #0
  extern void xPortSysTickHandler( void );
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80072ca:	f000 f89b 	bl	8007404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  xPortSysTickHandler();
 80072ce:	f00a ff0b 	bl	80120e8 <xPortSysTickHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80072d2:	bf00      	nop
 80072d4:	bd80      	pop	{r7, pc}
	...

080072d8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80072dc:	4802      	ldr	r0, [pc, #8]	@ (80072e8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80072de:	f004 fb9d 	bl	800ba1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80072e2:	bf00      	nop
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	2000035c 	.word	0x2000035c

080072ec <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80072f0:	4802      	ldr	r0, [pc, #8]	@ (80072fc <TIM1_CC_IRQHandler+0x10>)
 80072f2:	f004 fb93 	bl	800ba1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80072f6:	bf00      	nop
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	2000035c 	.word	0x2000035c

08007300 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8007304:	4802      	ldr	r0, [pc, #8]	@ (8007310 <SPI1_IRQHandler+0x10>)
 8007306:	f003 f987 	bl	800a618 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800730a:	bf00      	nop
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	200002f8 	.word	0x200002f8

08007314 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007314:	b480      	push	{r7}
 8007316:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007318:	4b06      	ldr	r3, [pc, #24]	@ (8007334 <SystemInit+0x20>)
 800731a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800731e:	4a05      	ldr	r2, [pc, #20]	@ (8007334 <SystemInit+0x20>)
 8007320:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007324:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007328:	bf00      	nop
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	e000ed00 	.word	0xe000ed00

08007338 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007338:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007370 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800733c:	f7ff ffea 	bl	8007314 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007340:	480c      	ldr	r0, [pc, #48]	@ (8007374 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007342:	490d      	ldr	r1, [pc, #52]	@ (8007378 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007344:	4a0d      	ldr	r2, [pc, #52]	@ (800737c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007348:	e002      	b.n	8007350 <LoopCopyDataInit>

0800734a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800734a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800734c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800734e:	3304      	adds	r3, #4

08007350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007354:	d3f9      	bcc.n	800734a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007356:	4a0a      	ldr	r2, [pc, #40]	@ (8007380 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007358:	4c0a      	ldr	r4, [pc, #40]	@ (8007384 <LoopFillZerobss+0x22>)
  movs r3, #0
 800735a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800735c:	e001      	b.n	8007362 <LoopFillZerobss>

0800735e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800735e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007360:	3204      	adds	r2, #4

08007362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007364:	d3fb      	bcc.n	800735e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8007366:	f00d fbd9 	bl	8014b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800736a:	f7fe fe9b 	bl	80060a4 <main>
  bx  lr    
 800736e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007370:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8007374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007378:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 800737c:	0801a4cc 	.word	0x0801a4cc
  ldr r2, =_sbss
 8007380:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8007384:	200007dc 	.word	0x200007dc

08007388 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007388:	e7fe      	b.n	8007388 <ADC_IRQHandler>

0800738a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800738e:	2003      	movs	r0, #3
 8007390:	f000 f94c 	bl	800762c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007394:	200f      	movs	r0, #15
 8007396:	f000 f805 	bl	80073a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800739a:	f7ff fdf7 	bl	8006f8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80073ac:	4b12      	ldr	r3, [pc, #72]	@ (80073f8 <HAL_InitTick+0x54>)
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	4b12      	ldr	r3, [pc, #72]	@ (80073fc <HAL_InitTick+0x58>)
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	4619      	mov	r1, r3
 80073b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80073ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80073be:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 f996 	bl	80076f4 <HAL_SYSTICK_Config>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e00e      	b.n	80073f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2b0f      	cmp	r3, #15
 80073d6:	d80a      	bhi.n	80073ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80073d8:	2200      	movs	r2, #0
 80073da:	6879      	ldr	r1, [r7, #4]
 80073dc:	f04f 30ff 	mov.w	r0, #4294967295
 80073e0:	f000 f944 	bl	800766c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80073e4:	4a06      	ldr	r2, [pc, #24]	@ (8007400 <HAL_InitTick+0x5c>)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
 80073ec:	e000      	b.n	80073f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	2000004c 	.word	0x2000004c
 80073fc:	20000054 	.word	0x20000054
 8007400:	20000050 	.word	0x20000050

08007404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007404:	b480      	push	{r7}
 8007406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007408:	4b06      	ldr	r3, [pc, #24]	@ (8007424 <HAL_IncTick+0x20>)
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	461a      	mov	r2, r3
 800740e:	4b06      	ldr	r3, [pc, #24]	@ (8007428 <HAL_IncTick+0x24>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4413      	add	r3, r2
 8007414:	4a04      	ldr	r2, [pc, #16]	@ (8007428 <HAL_IncTick+0x24>)
 8007416:	6013      	str	r3, [r2, #0]
}
 8007418:	bf00      	nop
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	20000054 	.word	0x20000054
 8007428:	200004e8 	.word	0x200004e8

0800742c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800742c:	b480      	push	{r7}
 800742e:	af00      	add	r7, sp, #0
  return uwTick;
 8007430:	4b03      	ldr	r3, [pc, #12]	@ (8007440 <HAL_GetTick+0x14>)
 8007432:	681b      	ldr	r3, [r3, #0]
}
 8007434:	4618      	mov	r0, r3
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	200004e8 	.word	0x200004e8

08007444 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800744c:	f7ff ffee 	bl	800742c <HAL_GetTick>
 8007450:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745c:	d005      	beq.n	800746a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800745e:	4b0a      	ldr	r3, [pc, #40]	@ (8007488 <HAL_Delay+0x44>)
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	461a      	mov	r2, r3
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	4413      	add	r3, r2
 8007468:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800746a:	bf00      	nop
 800746c:	f7ff ffde 	bl	800742c <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	429a      	cmp	r2, r3
 800747a:	d8f7      	bhi.n	800746c <HAL_Delay+0x28>
  {
  }
}
 800747c:	bf00      	nop
 800747e:	bf00      	nop
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	20000054 	.word	0x20000054

0800748c <__NVIC_SetPriorityGrouping>:
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f003 0307 	and.w	r3, r3, #7
 800749a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800749c:	4b0b      	ldr	r3, [pc, #44]	@ (80074cc <__NVIC_SetPriorityGrouping+0x40>)
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80074a8:	4013      	ands	r3, r2
 80074aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80074b4:	4b06      	ldr	r3, [pc, #24]	@ (80074d0 <__NVIC_SetPriorityGrouping+0x44>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80074ba:	4a04      	ldr	r2, [pc, #16]	@ (80074cc <__NVIC_SetPriorityGrouping+0x40>)
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	60d3      	str	r3, [r2, #12]
}
 80074c0:	bf00      	nop
 80074c2:	3714      	adds	r7, #20
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr
 80074cc:	e000ed00 	.word	0xe000ed00
 80074d0:	05fa0000 	.word	0x05fa0000

080074d4 <__NVIC_GetPriorityGrouping>:
{
 80074d4:	b480      	push	{r7}
 80074d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80074d8:	4b04      	ldr	r3, [pc, #16]	@ (80074ec <__NVIC_GetPriorityGrouping+0x18>)
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	0a1b      	lsrs	r3, r3, #8
 80074de:	f003 0307 	and.w	r3, r3, #7
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr
 80074ec:	e000ed00 	.word	0xe000ed00

080074f0 <__NVIC_EnableIRQ>:
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	4603      	mov	r3, r0
 80074f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	db0b      	blt.n	800751a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007502:	79fb      	ldrb	r3, [r7, #7]
 8007504:	f003 021f 	and.w	r2, r3, #31
 8007508:	4907      	ldr	r1, [pc, #28]	@ (8007528 <__NVIC_EnableIRQ+0x38>)
 800750a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800750e:	095b      	lsrs	r3, r3, #5
 8007510:	2001      	movs	r0, #1
 8007512:	fa00 f202 	lsl.w	r2, r0, r2
 8007516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800751a:	bf00      	nop
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	e000e100 	.word	0xe000e100

0800752c <__NVIC_SetPriority>:
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	4603      	mov	r3, r0
 8007534:	6039      	str	r1, [r7, #0]
 8007536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800753c:	2b00      	cmp	r3, #0
 800753e:	db0a      	blt.n	8007556 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	b2da      	uxtb	r2, r3
 8007544:	490c      	ldr	r1, [pc, #48]	@ (8007578 <__NVIC_SetPriority+0x4c>)
 8007546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800754a:	0112      	lsls	r2, r2, #4
 800754c:	b2d2      	uxtb	r2, r2
 800754e:	440b      	add	r3, r1
 8007550:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007554:	e00a      	b.n	800756c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	b2da      	uxtb	r2, r3
 800755a:	4908      	ldr	r1, [pc, #32]	@ (800757c <__NVIC_SetPriority+0x50>)
 800755c:	79fb      	ldrb	r3, [r7, #7]
 800755e:	f003 030f 	and.w	r3, r3, #15
 8007562:	3b04      	subs	r3, #4
 8007564:	0112      	lsls	r2, r2, #4
 8007566:	b2d2      	uxtb	r2, r2
 8007568:	440b      	add	r3, r1
 800756a:	761a      	strb	r2, [r3, #24]
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr
 8007578:	e000e100 	.word	0xe000e100
 800757c:	e000ed00 	.word	0xe000ed00

08007580 <NVIC_EncodePriority>:
{
 8007580:	b480      	push	{r7}
 8007582:	b089      	sub	sp, #36	@ 0x24
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f003 0307 	and.w	r3, r3, #7
 8007592:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	f1c3 0307 	rsb	r3, r3, #7
 800759a:	2b04      	cmp	r3, #4
 800759c:	bf28      	it	cs
 800759e:	2304      	movcs	r3, #4
 80075a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	3304      	adds	r3, #4
 80075a6:	2b06      	cmp	r3, #6
 80075a8:	d902      	bls.n	80075b0 <NVIC_EncodePriority+0x30>
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	3b03      	subs	r3, #3
 80075ae:	e000      	b.n	80075b2 <NVIC_EncodePriority+0x32>
 80075b0:	2300      	movs	r3, #0
 80075b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075b4:	f04f 32ff 	mov.w	r2, #4294967295
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	fa02 f303 	lsl.w	r3, r2, r3
 80075be:	43da      	mvns	r2, r3
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	401a      	ands	r2, r3
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80075c8:	f04f 31ff 	mov.w	r1, #4294967295
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	fa01 f303 	lsl.w	r3, r1, r3
 80075d2:	43d9      	mvns	r1, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075d8:	4313      	orrs	r3, r2
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3724      	adds	r7, #36	@ 0x24
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
	...

080075e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	3b01      	subs	r3, #1
 80075f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80075f8:	d301      	bcc.n	80075fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80075fa:	2301      	movs	r3, #1
 80075fc:	e00f      	b.n	800761e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80075fe:	4a0a      	ldr	r2, [pc, #40]	@ (8007628 <SysTick_Config+0x40>)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	3b01      	subs	r3, #1
 8007604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007606:	210f      	movs	r1, #15
 8007608:	f04f 30ff 	mov.w	r0, #4294967295
 800760c:	f7ff ff8e 	bl	800752c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007610:	4b05      	ldr	r3, [pc, #20]	@ (8007628 <SysTick_Config+0x40>)
 8007612:	2200      	movs	r2, #0
 8007614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007616:	4b04      	ldr	r3, [pc, #16]	@ (8007628 <SysTick_Config+0x40>)
 8007618:	2207      	movs	r2, #7
 800761a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	e000e010 	.word	0xe000e010

0800762c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b07      	cmp	r3, #7
 8007638:	d00f      	beq.n	800765a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2b06      	cmp	r3, #6
 800763e:	d00c      	beq.n	800765a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2b05      	cmp	r3, #5
 8007644:	d009      	beq.n	800765a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2b04      	cmp	r3, #4
 800764a:	d006      	beq.n	800765a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b03      	cmp	r3, #3
 8007650:	d003      	beq.n	800765a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8007652:	2191      	movs	r1, #145	@ 0x91
 8007654:	4804      	ldr	r0, [pc, #16]	@ (8007668 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8007656:	f7ff f9a9 	bl	80069ac <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f7ff ff16 	bl	800748c <__NVIC_SetPriorityGrouping>
}
 8007660:	bf00      	nop
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	08019738 	.word	0x08019738

0800766c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af00      	add	r7, sp, #0
 8007672:	4603      	mov	r3, r0
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
 8007678:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800767a:	2300      	movs	r3, #0
 800767c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2b0f      	cmp	r3, #15
 8007682:	d903      	bls.n	800768c <HAL_NVIC_SetPriority+0x20>
 8007684:	21a9      	movs	r1, #169	@ 0xa9
 8007686:	480e      	ldr	r0, [pc, #56]	@ (80076c0 <HAL_NVIC_SetPriority+0x54>)
 8007688:	f7ff f990 	bl	80069ac <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	2b0f      	cmp	r3, #15
 8007690:	d903      	bls.n	800769a <HAL_NVIC_SetPriority+0x2e>
 8007692:	21aa      	movs	r1, #170	@ 0xaa
 8007694:	480a      	ldr	r0, [pc, #40]	@ (80076c0 <HAL_NVIC_SetPriority+0x54>)
 8007696:	f7ff f989 	bl	80069ac <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800769a:	f7ff ff1b 	bl	80074d4 <__NVIC_GetPriorityGrouping>
 800769e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	68b9      	ldr	r1, [r7, #8]
 80076a4:	6978      	ldr	r0, [r7, #20]
 80076a6:	f7ff ff6b 	bl	8007580 <NVIC_EncodePriority>
 80076aa:	4602      	mov	r2, r0
 80076ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076b0:	4611      	mov	r1, r2
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7ff ff3a 	bl	800752c <__NVIC_SetPriority>
}
 80076b8:	bf00      	nop
 80076ba:	3718      	adds	r7, #24
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	08019738 	.word	0x08019738

080076c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	4603      	mov	r3, r0
 80076cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80076ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	da03      	bge.n	80076de <HAL_NVIC_EnableIRQ+0x1a>
 80076d6:	21bd      	movs	r1, #189	@ 0xbd
 80076d8:	4805      	ldr	r0, [pc, #20]	@ (80076f0 <HAL_NVIC_EnableIRQ+0x2c>)
 80076da:	f7ff f967 	bl	80069ac <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80076de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7ff ff04 	bl	80074f0 <__NVIC_EnableIRQ>
}
 80076e8:	bf00      	nop
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	08019738 	.word	0x08019738

080076f4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f7ff ff73 	bl	80075e8 <SysTick_Config>
 8007702:	4603      	mov	r3, r0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800770c:	b480      	push	{r7}
 800770e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8007710:	f3bf 8f5f 	dmb	sy
}
 8007714:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8007716:	4b07      	ldr	r3, [pc, #28]	@ (8007734 <HAL_MPU_Disable+0x28>)
 8007718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800771a:	4a06      	ldr	r2, [pc, #24]	@ (8007734 <HAL_MPU_Disable+0x28>)
 800771c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007720:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8007722:	4b05      	ldr	r3, [pc, #20]	@ (8007738 <HAL_MPU_Disable+0x2c>)
 8007724:	2200      	movs	r2, #0
 8007726:	605a      	str	r2, [r3, #4]
}
 8007728:	bf00      	nop
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	e000ed00 	.word	0xe000ed00
 8007738:	e000ed90 	.word	0xe000ed90

0800773c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8007744:	4a0b      	ldr	r2, [pc, #44]	@ (8007774 <HAL_MPU_Enable+0x38>)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f043 0301 	orr.w	r3, r3, #1
 800774c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800774e:	4b0a      	ldr	r3, [pc, #40]	@ (8007778 <HAL_MPU_Enable+0x3c>)
 8007750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007752:	4a09      	ldr	r2, [pc, #36]	@ (8007778 <HAL_MPU_Enable+0x3c>)
 8007754:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007758:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800775a:	f3bf 8f4f 	dsb	sy
}
 800775e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007760:	f3bf 8f6f 	isb	sy
}
 8007764:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8007766:	bf00      	nop
 8007768:	370c      	adds	r7, #12
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	e000ed90 	.word	0xe000ed90
 8007778:	e000ed00 	.word	0xe000ed00

0800777c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	785b      	ldrb	r3, [r3, #1]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d020      	beq.n	80077ce <HAL_MPU_ConfigRegion+0x52>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	785b      	ldrb	r3, [r3, #1]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d01c      	beq.n	80077ce <HAL_MPU_ConfigRegion+0x52>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	785b      	ldrb	r3, [r3, #1]
 8007798:	2b02      	cmp	r3, #2
 800779a:	d018      	beq.n	80077ce <HAL_MPU_ConfigRegion+0x52>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	785b      	ldrb	r3, [r3, #1]
 80077a0:	2b03      	cmp	r3, #3
 80077a2:	d014      	beq.n	80077ce <HAL_MPU_ConfigRegion+0x52>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	785b      	ldrb	r3, [r3, #1]
 80077a8:	2b04      	cmp	r3, #4
 80077aa:	d010      	beq.n	80077ce <HAL_MPU_ConfigRegion+0x52>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	785b      	ldrb	r3, [r3, #1]
 80077b0:	2b05      	cmp	r3, #5
 80077b2:	d00c      	beq.n	80077ce <HAL_MPU_ConfigRegion+0x52>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	785b      	ldrb	r3, [r3, #1]
 80077b8:	2b06      	cmp	r3, #6
 80077ba:	d008      	beq.n	80077ce <HAL_MPU_ConfigRegion+0x52>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	785b      	ldrb	r3, [r3, #1]
 80077c0:	2b07      	cmp	r3, #7
 80077c2:	d004      	beq.n	80077ce <HAL_MPU_ConfigRegion+0x52>
 80077c4:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 80077c8:	488c      	ldr	r0, [pc, #560]	@ (80079fc <HAL_MPU_ConfigRegion+0x280>)
 80077ca:	f7ff f8ef 	bl	80069ac <assert_failed>
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d008      	beq.n	80077e8 <HAL_MPU_ConfigRegion+0x6c>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d004      	beq.n	80077e8 <HAL_MPU_ConfigRegion+0x6c>
 80077de:	f240 114f 	movw	r1, #335	@ 0x14f
 80077e2:	4886      	ldr	r0, [pc, #536]	@ (80079fc <HAL_MPU_ConfigRegion+0x280>)
 80077e4:	f7ff f8e2 	bl	80069ac <assert_failed>
  assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	7b1b      	ldrb	r3, [r3, #12]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d008      	beq.n	8007802 <HAL_MPU_ConfigRegion+0x86>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	7b1b      	ldrb	r3, [r3, #12]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d004      	beq.n	8007802 <HAL_MPU_ConfigRegion+0x86>
 80077f8:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 80077fc:	487f      	ldr	r0, [pc, #508]	@ (80079fc <HAL_MPU_ConfigRegion+0x280>)
 80077fe:	f7ff f8d5 	bl	80069ac <assert_failed>
  assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	7adb      	ldrb	r3, [r3, #11]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d018      	beq.n	800783c <HAL_MPU_ConfigRegion+0xc0>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	7adb      	ldrb	r3, [r3, #11]
 800780e:	2b01      	cmp	r3, #1
 8007810:	d014      	beq.n	800783c <HAL_MPU_ConfigRegion+0xc0>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	7adb      	ldrb	r3, [r3, #11]
 8007816:	2b02      	cmp	r3, #2
 8007818:	d010      	beq.n	800783c <HAL_MPU_ConfigRegion+0xc0>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	7adb      	ldrb	r3, [r3, #11]
 800781e:	2b03      	cmp	r3, #3
 8007820:	d00c      	beq.n	800783c <HAL_MPU_ConfigRegion+0xc0>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	7adb      	ldrb	r3, [r3, #11]
 8007826:	2b05      	cmp	r3, #5
 8007828:	d008      	beq.n	800783c <HAL_MPU_ConfigRegion+0xc0>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	7adb      	ldrb	r3, [r3, #11]
 800782e:	2b06      	cmp	r3, #6
 8007830:	d004      	beq.n	800783c <HAL_MPU_ConfigRegion+0xc0>
 8007832:	f240 1151 	movw	r1, #337	@ 0x151
 8007836:	4871      	ldr	r0, [pc, #452]	@ (80079fc <HAL_MPU_ConfigRegion+0x280>)
 8007838:	f7ff f8b8 	bl	80069ac <assert_failed>
  assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	7a9b      	ldrb	r3, [r3, #10]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00c      	beq.n	800785e <HAL_MPU_ConfigRegion+0xe2>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	7a9b      	ldrb	r3, [r3, #10]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d008      	beq.n	800785e <HAL_MPU_ConfigRegion+0xe2>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	7a9b      	ldrb	r3, [r3, #10]
 8007850:	2b02      	cmp	r3, #2
 8007852:	d004      	beq.n	800785e <HAL_MPU_ConfigRegion+0xe2>
 8007854:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8007858:	4868      	ldr	r0, [pc, #416]	@ (80079fc <HAL_MPU_ConfigRegion+0x280>)
 800785a:	f7ff f8a7 	bl	80069ac <assert_failed>
  assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	7b5b      	ldrb	r3, [r3, #13]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d008      	beq.n	8007878 <HAL_MPU_ConfigRegion+0xfc>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	7b5b      	ldrb	r3, [r3, #13]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d004      	beq.n	8007878 <HAL_MPU_ConfigRegion+0xfc>
 800786e:	f240 1153 	movw	r1, #339	@ 0x153
 8007872:	4862      	ldr	r0, [pc, #392]	@ (80079fc <HAL_MPU_ConfigRegion+0x280>)
 8007874:	f7ff f89a 	bl	80069ac <assert_failed>
  assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	7b9b      	ldrb	r3, [r3, #14]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d008      	beq.n	8007892 <HAL_MPU_ConfigRegion+0x116>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	7b9b      	ldrb	r3, [r3, #14]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d004      	beq.n	8007892 <HAL_MPU_ConfigRegion+0x116>
 8007888:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 800788c:	485b      	ldr	r0, [pc, #364]	@ (80079fc <HAL_MPU_ConfigRegion+0x280>)
 800788e:	f7ff f88d 	bl	80069ac <assert_failed>
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	7bdb      	ldrb	r3, [r3, #15]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d008      	beq.n	80078ac <HAL_MPU_ConfigRegion+0x130>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	7bdb      	ldrb	r3, [r3, #15]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d004      	beq.n	80078ac <HAL_MPU_ConfigRegion+0x130>
 80078a2:	f240 1155 	movw	r1, #341	@ 0x155
 80078a6:	4855      	ldr	r0, [pc, #340]	@ (80079fc <HAL_MPU_ConfigRegion+0x280>)
 80078a8:	f7ff f880 	bl	80069ac <assert_failed>
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	7a5b      	ldrb	r3, [r3, #9]
 80078b0:	2bff      	cmp	r3, #255	@ 0xff
 80078b2:	d104      	bne.n	80078be <HAL_MPU_ConfigRegion+0x142>
 80078b4:	f44f 71ab 	mov.w	r1, #342	@ 0x156
 80078b8:	4850      	ldr	r0, [pc, #320]	@ (80079fc <HAL_MPU_ConfigRegion+0x280>)
 80078ba:	f7ff f877 	bl	80069ac <assert_failed>
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	7a1b      	ldrb	r3, [r3, #8]
 80078c2:	2b04      	cmp	r3, #4
 80078c4:	d070      	beq.n	80079a8 <HAL_MPU_ConfigRegion+0x22c>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	7a1b      	ldrb	r3, [r3, #8]
 80078ca:	2b05      	cmp	r3, #5
 80078cc:	d06c      	beq.n	80079a8 <HAL_MPU_ConfigRegion+0x22c>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	7a1b      	ldrb	r3, [r3, #8]
 80078d2:	2b06      	cmp	r3, #6
 80078d4:	d068      	beq.n	80079a8 <HAL_MPU_ConfigRegion+0x22c>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	7a1b      	ldrb	r3, [r3, #8]
 80078da:	2b07      	cmp	r3, #7
 80078dc:	d064      	beq.n	80079a8 <HAL_MPU_ConfigRegion+0x22c>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	7a1b      	ldrb	r3, [r3, #8]
 80078e2:	2b08      	cmp	r3, #8
 80078e4:	d060      	beq.n	80079a8 <HAL_MPU_ConfigRegion+0x22c>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	7a1b      	ldrb	r3, [r3, #8]
 80078ea:	2b09      	cmp	r3, #9
 80078ec:	d05c      	beq.n	80079a8 <HAL_MPU_ConfigRegion+0x22c>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	7a1b      	ldrb	r3, [r3, #8]
 80078f2:	2b0a      	cmp	r3, #10
 80078f4:	d058      	beq.n	80079a8 <HAL_MPU_ConfigRegion+0x22c>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	7a1b      	ldrb	r3, [r3, #8]
 80078fa:	2b0b      	cmp	r3, #11
 80078fc:	d054      	beq.n	80079a8 <HAL_MPU_ConfigRegion+0x22c>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	7a1b      	ldrb	r3, [r3, #8]
 8007902:	2b0c      	cmp	r3, #12
 8007904:	d050      	beq.n	80079a8 <HAL_MPU_ConfigRegion+0x22c>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	7a1b      	ldrb	r3, [r3, #8]
 800790a:	2b0d      	cmp	r3, #13
 800790c:	d04c      	beq.n	80079a8 <HAL_MPU_ConfigRegion+0x22c>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	7a1b      	ldrb	r3, [r3, #8]
 8007912:	2b0e      	cmp	r3, #14
 8007914:	d048      	beq.n	80079a8 <HAL_MPU_ConfigRegion+0x22c>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	7a1b      	ldrb	r3, [r3, #8]
 800791a:	2b0f      	cmp	r3, #15
 800791c:	d044      	beq.n	80079a8 <HAL_MPU_ConfigRegion+0x22c>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	7a1b      	ldrb	r3, [r3, #8]
 8007922:	2b10      	cmp	r3, #16
 8007924:	d040      	beq.n	80079a8 <HAL_MPU_ConfigRegion+0x22c>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	7a1b      	ldrb	r3, [r3, #8]
 800792a:	2b11      	cmp	r3, #17
 800792c:	d03c      	beq.n	80079a8 <HAL_MPU_ConfigRegion+0x22c>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	7a1b      	ldrb	r3, [r3, #8]
 8007932:	2b12      	cmp	r3, #18
 8007934:	d038      	beq.n	80079a8 <HAL_MPU_ConfigRegion+0x22c>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	7a1b      	ldrb	r3, [r3, #8]
 800793a:	2b13      	cmp	r3, #19
 800793c:	d034      	beq.n	80079a8 <HAL_MPU_ConfigRegion+0x22c>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	7a1b      	ldrb	r3, [r3, #8]
 8007942:	2b14      	cmp	r3, #20
 8007944:	d030      	beq.n	80079a8 <HAL_MPU_ConfigRegion+0x22c>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	7a1b      	ldrb	r3, [r3, #8]
 800794a:	2b15      	cmp	r3, #21
 800794c:	d02c      	beq.n	80079a8 <HAL_MPU_ConfigRegion+0x22c>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	7a1b      	ldrb	r3, [r3, #8]
 8007952:	2b16      	cmp	r3, #22
 8007954:	d028      	beq.n	80079a8 <HAL_MPU_ConfigRegion+0x22c>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	7a1b      	ldrb	r3, [r3, #8]
 800795a:	2b17      	cmp	r3, #23
 800795c:	d024      	beq.n	80079a8 <HAL_MPU_ConfigRegion+0x22c>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	7a1b      	ldrb	r3, [r3, #8]
 8007962:	2b18      	cmp	r3, #24
 8007964:	d020      	beq.n	80079a8 <HAL_MPU_ConfigRegion+0x22c>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	7a1b      	ldrb	r3, [r3, #8]
 800796a:	2b19      	cmp	r3, #25
 800796c:	d01c      	beq.n	80079a8 <HAL_MPU_ConfigRegion+0x22c>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	7a1b      	ldrb	r3, [r3, #8]
 8007972:	2b1a      	cmp	r3, #26
 8007974:	d018      	beq.n	80079a8 <HAL_MPU_ConfigRegion+0x22c>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	7a1b      	ldrb	r3, [r3, #8]
 800797a:	2b1b      	cmp	r3, #27
 800797c:	d014      	beq.n	80079a8 <HAL_MPU_ConfigRegion+0x22c>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	7a1b      	ldrb	r3, [r3, #8]
 8007982:	2b1c      	cmp	r3, #28
 8007984:	d010      	beq.n	80079a8 <HAL_MPU_ConfigRegion+0x22c>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	7a1b      	ldrb	r3, [r3, #8]
 800798a:	2b1d      	cmp	r3, #29
 800798c:	d00c      	beq.n	80079a8 <HAL_MPU_ConfigRegion+0x22c>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	7a1b      	ldrb	r3, [r3, #8]
 8007992:	2b1e      	cmp	r3, #30
 8007994:	d008      	beq.n	80079a8 <HAL_MPU_ConfigRegion+0x22c>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	7a1b      	ldrb	r3, [r3, #8]
 800799a:	2b1f      	cmp	r3, #31
 800799c:	d004      	beq.n	80079a8 <HAL_MPU_ConfigRegion+0x22c>
 800799e:	f240 1157 	movw	r1, #343	@ 0x157
 80079a2:	4816      	ldr	r0, [pc, #88]	@ (80079fc <HAL_MPU_ConfigRegion+0x280>)
 80079a4:	f7ff f802 	bl	80069ac <assert_failed>

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	785a      	ldrb	r2, [r3, #1]
 80079ac:	4b14      	ldr	r3, [pc, #80]	@ (8007a00 <HAL_MPU_ConfigRegion+0x284>)
 80079ae:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80079b0:	4b13      	ldr	r3, [pc, #76]	@ (8007a00 <HAL_MPU_ConfigRegion+0x284>)
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	4a12      	ldr	r2, [pc, #72]	@ (8007a00 <HAL_MPU_ConfigRegion+0x284>)
 80079b6:	f023 0301 	bic.w	r3, r3, #1
 80079ba:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80079bc:	4a10      	ldr	r2, [pc, #64]	@ (8007a00 <HAL_MPU_ConfigRegion+0x284>)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	7b1b      	ldrb	r3, [r3, #12]
 80079c8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	7adb      	ldrb	r3, [r3, #11]
 80079ce:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80079d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	7a9b      	ldrb	r3, [r3, #10]
 80079d6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80079d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	7b5b      	ldrb	r3, [r3, #13]
 80079de:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80079e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	7b9b      	ldrb	r3, [r3, #14]
 80079e6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80079e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	7bdb      	ldrb	r3, [r3, #15]
 80079ee:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80079f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	7a5b      	ldrb	r3, [r3, #9]
 80079f6:	021b      	lsls	r3, r3, #8
 80079f8:	e004      	b.n	8007a04 <HAL_MPU_ConfigRegion+0x288>
 80079fa:	bf00      	nop
 80079fc:	08019738 	.word	0x08019738
 8007a00:	e000ed90 	.word	0xe000ed90
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007a04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	7a1b      	ldrb	r3, [r3, #8]
 8007a0a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007a0c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	7812      	ldrb	r2, [r2, #0]
 8007a12:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007a14:	4a03      	ldr	r2, [pc, #12]	@ (8007a24 <HAL_MPU_ConfigRegion+0x2a8>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007a16:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007a18:	6113      	str	r3, [r2, #16]
}
 8007a1a:	bf00      	nop
 8007a1c:	3708      	adds	r7, #8
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	e000ed90 	.word	0xe000ed90

08007a28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d004      	beq.n	8007a46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2280      	movs	r2, #128	@ 0x80
 8007a40:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e00c      	b.n	8007a60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2205      	movs	r2, #5
 8007a4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f022 0201 	bic.w	r2, r2, #1
 8007a5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b088      	sub	sp, #32
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007a76:	2300      	movs	r3, #0
 8007a78:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007a82:	2300      	movs	r3, #0
 8007a84:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a3a      	ldr	r2, [pc, #232]	@ (8007b74 <HAL_GPIO_Init+0x108>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d02b      	beq.n	8007ae6 <HAL_GPIO_Init+0x7a>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a39      	ldr	r2, [pc, #228]	@ (8007b78 <HAL_GPIO_Init+0x10c>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d027      	beq.n	8007ae6 <HAL_GPIO_Init+0x7a>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a38      	ldr	r2, [pc, #224]	@ (8007b7c <HAL_GPIO_Init+0x110>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d023      	beq.n	8007ae6 <HAL_GPIO_Init+0x7a>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a37      	ldr	r2, [pc, #220]	@ (8007b80 <HAL_GPIO_Init+0x114>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d01f      	beq.n	8007ae6 <HAL_GPIO_Init+0x7a>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a36      	ldr	r2, [pc, #216]	@ (8007b84 <HAL_GPIO_Init+0x118>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d01b      	beq.n	8007ae6 <HAL_GPIO_Init+0x7a>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a35      	ldr	r2, [pc, #212]	@ (8007b88 <HAL_GPIO_Init+0x11c>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d017      	beq.n	8007ae6 <HAL_GPIO_Init+0x7a>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a34      	ldr	r2, [pc, #208]	@ (8007b8c <HAL_GPIO_Init+0x120>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d013      	beq.n	8007ae6 <HAL_GPIO_Init+0x7a>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a33      	ldr	r2, [pc, #204]	@ (8007b90 <HAL_GPIO_Init+0x124>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d00f      	beq.n	8007ae6 <HAL_GPIO_Init+0x7a>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a32      	ldr	r2, [pc, #200]	@ (8007b94 <HAL_GPIO_Init+0x128>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d00b      	beq.n	8007ae6 <HAL_GPIO_Init+0x7a>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a31      	ldr	r2, [pc, #196]	@ (8007b98 <HAL_GPIO_Init+0x12c>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d007      	beq.n	8007ae6 <HAL_GPIO_Init+0x7a>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a30      	ldr	r2, [pc, #192]	@ (8007b9c <HAL_GPIO_Init+0x130>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d003      	beq.n	8007ae6 <HAL_GPIO_Init+0x7a>
 8007ade:	21aa      	movs	r1, #170	@ 0xaa
 8007ae0:	482f      	ldr	r0, [pc, #188]	@ (8007ba0 <HAL_GPIO_Init+0x134>)
 8007ae2:	f7fe ff63 	bl	80069ac <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d103      	bne.n	8007af8 <HAL_GPIO_Init+0x8c>
 8007af0:	21ab      	movs	r1, #171	@ 0xab
 8007af2:	482b      	ldr	r0, [pc, #172]	@ (8007ba0 <HAL_GPIO_Init+0x134>)
 8007af4:	f7fe ff5a 	bl	80069ac <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d035      	beq.n	8007b6c <HAL_GPIO_Init+0x100>
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d031      	beq.n	8007b6c <HAL_GPIO_Init+0x100>
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	2b11      	cmp	r3, #17
 8007b0e:	d02d      	beq.n	8007b6c <HAL_GPIO_Init+0x100>
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d029      	beq.n	8007b6c <HAL_GPIO_Init+0x100>
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	2b12      	cmp	r3, #18
 8007b1e:	d025      	beq.n	8007b6c <HAL_GPIO_Init+0x100>
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8007b28:	d020      	beq.n	8007b6c <HAL_GPIO_Init+0x100>
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8007b32:	d01b      	beq.n	8007b6c <HAL_GPIO_Init+0x100>
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8007b3c:	d016      	beq.n	8007b6c <HAL_GPIO_Init+0x100>
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8007b46:	d011      	beq.n	8007b6c <HAL_GPIO_Init+0x100>
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8007b50:	d00c      	beq.n	8007b6c <HAL_GPIO_Init+0x100>
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8007b5a:	d007      	beq.n	8007b6c <HAL_GPIO_Init+0x100>
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	2b03      	cmp	r3, #3
 8007b62:	d003      	beq.n	8007b6c <HAL_GPIO_Init+0x100>
 8007b64:	21ac      	movs	r1, #172	@ 0xac
 8007b66:	480e      	ldr	r0, [pc, #56]	@ (8007ba0 <HAL_GPIO_Init+0x134>)
 8007b68:	f7fe ff20 	bl	80069ac <assert_failed>

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	61fb      	str	r3, [r7, #28]
 8007b70:	e2c7      	b.n	8008102 <HAL_GPIO_Init+0x696>
 8007b72:	bf00      	nop
 8007b74:	40020000 	.word	0x40020000
 8007b78:	40020400 	.word	0x40020400
 8007b7c:	40020800 	.word	0x40020800
 8007b80:	40020c00 	.word	0x40020c00
 8007b84:	40021000 	.word	0x40021000
 8007b88:	40021400 	.word	0x40021400
 8007b8c:	40021800 	.word	0x40021800
 8007b90:	40021c00 	.word	0x40021c00
 8007b94:	40022000 	.word	0x40022000
 8007b98:	40022400 	.word	0x40022400
 8007b9c:	40022800 	.word	0x40022800
 8007ba0:	08019774 	.word	0x08019774
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	f040 829d 	bne.w	80080fc <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	f003 0303 	and.w	r3, r3, #3
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d005      	beq.n	8007bda <HAL_GPIO_Init+0x16e>
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f003 0303 	and.w	r3, r3, #3
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d144      	bne.n	8007c64 <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00f      	beq.n	8007c02 <HAL_GPIO_Init+0x196>
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d00b      	beq.n	8007c02 <HAL_GPIO_Init+0x196>
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d007      	beq.n	8007c02 <HAL_GPIO_Init+0x196>
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	2b03      	cmp	r3, #3
 8007bf8:	d003      	beq.n	8007c02 <HAL_GPIO_Init+0x196>
 8007bfa:	21bd      	movs	r1, #189	@ 0xbd
 8007bfc:	4831      	ldr	r0, [pc, #196]	@ (8007cc4 <HAL_GPIO_Init+0x258>)
 8007bfe:	f7fe fed5 	bl	80069ac <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	005b      	lsls	r3, r3, #1
 8007c0c:	2203      	movs	r2, #3
 8007c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c12:	43db      	mvns	r3, r3
 8007c14:	69ba      	ldr	r2, [r7, #24]
 8007c16:	4013      	ands	r3, r2
 8007c18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	68da      	ldr	r2, [r3, #12]
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	005b      	lsls	r3, r3, #1
 8007c22:	fa02 f303 	lsl.w	r3, r2, r3
 8007c26:	69ba      	ldr	r2, [r7, #24]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	69ba      	ldr	r2, [r7, #24]
 8007c30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007c38:	2201      	movs	r2, #1
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c40:	43db      	mvns	r3, r3
 8007c42:	69ba      	ldr	r2, [r7, #24]
 8007c44:	4013      	ands	r3, r2
 8007c46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	091b      	lsrs	r3, r3, #4
 8007c4e:	f003 0201 	and.w	r2, r3, #1
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	fa02 f303 	lsl.w	r3, r2, r3
 8007c58:	69ba      	ldr	r2, [r7, #24]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	69ba      	ldr	r2, [r7, #24]
 8007c62:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	f003 0303 	and.w	r3, r3, #3
 8007c6c:	2b03      	cmp	r3, #3
 8007c6e:	d02b      	beq.n	8007cc8 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00b      	beq.n	8007c90 <HAL_GPIO_Init+0x224>
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d007      	beq.n	8007c90 <HAL_GPIO_Init+0x224>
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d003      	beq.n	8007c90 <HAL_GPIO_Init+0x224>
 8007c88:	21ce      	movs	r1, #206	@ 0xce
 8007c8a:	480e      	ldr	r0, [pc, #56]	@ (8007cc4 <HAL_GPIO_Init+0x258>)
 8007c8c:	f7fe fe8e 	bl	80069ac <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	005b      	lsls	r3, r3, #1
 8007c9a:	2203      	movs	r2, #3
 8007c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca0:	43db      	mvns	r3, r3
 8007ca2:	69ba      	ldr	r2, [r7, #24]
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	689a      	ldr	r2, [r3, #8]
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	005b      	lsls	r3, r3, #1
 8007cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb4:	69ba      	ldr	r2, [r7, #24]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	69ba      	ldr	r2, [r7, #24]
 8007cbe:	60da      	str	r2, [r3, #12]
 8007cc0:	e002      	b.n	8007cc8 <HAL_GPIO_Init+0x25c>
 8007cc2:	bf00      	nop
 8007cc4:	08019774 	.word	0x08019774
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	f003 0303 	and.w	r3, r3, #3
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	f040 8134 	bne.w	8007f3e <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	f000 810b 	beq.w	8007ef6 <HAL_GPIO_Init+0x48a>
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	f000 8106 	beq.w	8007ef6 <HAL_GPIO_Init+0x48a>
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f000 8101 	beq.w	8007ef6 <HAL_GPIO_Init+0x48a>
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f000 80fc 	beq.w	8007ef6 <HAL_GPIO_Init+0x48a>
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	f000 80f7 	beq.w	8007ef6 <HAL_GPIO_Init+0x48a>
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	f000 80f2 	beq.w	8007ef6 <HAL_GPIO_Init+0x48a>
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	2b02      	cmp	r3, #2
 8007d18:	f000 80ed 	beq.w	8007ef6 <HAL_GPIO_Init+0x48a>
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	f000 80e8 	beq.w	8007ef6 <HAL_GPIO_Init+0x48a>
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	f000 80e3 	beq.w	8007ef6 <HAL_GPIO_Init+0x48a>
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	2b03      	cmp	r3, #3
 8007d36:	f000 80de 	beq.w	8007ef6 <HAL_GPIO_Init+0x48a>
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	2b03      	cmp	r3, #3
 8007d40:	f000 80d9 	beq.w	8007ef6 <HAL_GPIO_Init+0x48a>
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	2b03      	cmp	r3, #3
 8007d4a:	f000 80d4 	beq.w	8007ef6 <HAL_GPIO_Init+0x48a>
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	2b03      	cmp	r3, #3
 8007d54:	f000 80cf 	beq.w	8007ef6 <HAL_GPIO_Init+0x48a>
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	2b03      	cmp	r3, #3
 8007d5e:	f000 80ca 	beq.w	8007ef6 <HAL_GPIO_Init+0x48a>
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	2b03      	cmp	r3, #3
 8007d68:	f000 80c5 	beq.w	8007ef6 <HAL_GPIO_Init+0x48a>
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	2b04      	cmp	r3, #4
 8007d72:	f000 80c0 	beq.w	8007ef6 <HAL_GPIO_Init+0x48a>
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	691b      	ldr	r3, [r3, #16]
 8007d7a:	2b04      	cmp	r3, #4
 8007d7c:	f000 80bb 	beq.w	8007ef6 <HAL_GPIO_Init+0x48a>
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	2b04      	cmp	r3, #4
 8007d86:	f000 80b6 	beq.w	8007ef6 <HAL_GPIO_Init+0x48a>
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	2b04      	cmp	r3, #4
 8007d90:	f000 80b1 	beq.w	8007ef6 <HAL_GPIO_Init+0x48a>
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	2b04      	cmp	r3, #4
 8007d9a:	f000 80ac 	beq.w	8007ef6 <HAL_GPIO_Init+0x48a>
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	2b05      	cmp	r3, #5
 8007da4:	f000 80a7 	beq.w	8007ef6 <HAL_GPIO_Init+0x48a>
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	2b05      	cmp	r3, #5
 8007dae:	f000 80a2 	beq.w	8007ef6 <HAL_GPIO_Init+0x48a>
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	2b05      	cmp	r3, #5
 8007db8:	f000 809d 	beq.w	8007ef6 <HAL_GPIO_Init+0x48a>
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	2b05      	cmp	r3, #5
 8007dc2:	f000 8098 	beq.w	8007ef6 <HAL_GPIO_Init+0x48a>
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	2b05      	cmp	r3, #5
 8007dcc:	f000 8093 	beq.w	8007ef6 <HAL_GPIO_Init+0x48a>
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	2b05      	cmp	r3, #5
 8007dd6:	f000 808e 	beq.w	8007ef6 <HAL_GPIO_Init+0x48a>
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	2b06      	cmp	r3, #6
 8007de0:	f000 8089 	beq.w	8007ef6 <HAL_GPIO_Init+0x48a>
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	2b06      	cmp	r3, #6
 8007dea:	f000 8084 	beq.w	8007ef6 <HAL_GPIO_Init+0x48a>
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	2b07      	cmp	r3, #7
 8007df4:	d07f      	beq.n	8007ef6 <HAL_GPIO_Init+0x48a>
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	2b07      	cmp	r3, #7
 8007dfc:	d07b      	beq.n	8007ef6 <HAL_GPIO_Init+0x48a>
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	2b07      	cmp	r3, #7
 8007e04:	d077      	beq.n	8007ef6 <HAL_GPIO_Init+0x48a>
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	2b07      	cmp	r3, #7
 8007e0c:	d073      	beq.n	8007ef6 <HAL_GPIO_Init+0x48a>
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	2b07      	cmp	r3, #7
 8007e14:	d06f      	beq.n	8007ef6 <HAL_GPIO_Init+0x48a>
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	2b07      	cmp	r3, #7
 8007e1c:	d06b      	beq.n	8007ef6 <HAL_GPIO_Init+0x48a>
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	2b07      	cmp	r3, #7
 8007e24:	d067      	beq.n	8007ef6 <HAL_GPIO_Init+0x48a>
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	2b08      	cmp	r3, #8
 8007e2c:	d063      	beq.n	8007ef6 <HAL_GPIO_Init+0x48a>
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	2b08      	cmp	r3, #8
 8007e34:	d05f      	beq.n	8007ef6 <HAL_GPIO_Init+0x48a>
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	2b08      	cmp	r3, #8
 8007e3c:	d05b      	beq.n	8007ef6 <HAL_GPIO_Init+0x48a>
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	2b08      	cmp	r3, #8
 8007e44:	d057      	beq.n	8007ef6 <HAL_GPIO_Init+0x48a>
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	2b08      	cmp	r3, #8
 8007e4c:	d053      	beq.n	8007ef6 <HAL_GPIO_Init+0x48a>
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	2b08      	cmp	r3, #8
 8007e54:	d04f      	beq.n	8007ef6 <HAL_GPIO_Init+0x48a>
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	2b08      	cmp	r3, #8
 8007e5c:	d04b      	beq.n	8007ef6 <HAL_GPIO_Init+0x48a>
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	2b09      	cmp	r3, #9
 8007e64:	d047      	beq.n	8007ef6 <HAL_GPIO_Init+0x48a>
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	2b09      	cmp	r3, #9
 8007e6c:	d043      	beq.n	8007ef6 <HAL_GPIO_Init+0x48a>
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	2b09      	cmp	r3, #9
 8007e74:	d03f      	beq.n	8007ef6 <HAL_GPIO_Init+0x48a>
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	2b09      	cmp	r3, #9
 8007e7c:	d03b      	beq.n	8007ef6 <HAL_GPIO_Init+0x48a>
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	2b09      	cmp	r3, #9
 8007e84:	d037      	beq.n	8007ef6 <HAL_GPIO_Init+0x48a>
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	2b09      	cmp	r3, #9
 8007e8c:	d033      	beq.n	8007ef6 <HAL_GPIO_Init+0x48a>
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	2b09      	cmp	r3, #9
 8007e94:	d02f      	beq.n	8007ef6 <HAL_GPIO_Init+0x48a>
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	2b0a      	cmp	r3, #10
 8007e9c:	d02b      	beq.n	8007ef6 <HAL_GPIO_Init+0x48a>
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	2b0a      	cmp	r3, #10
 8007ea4:	d027      	beq.n	8007ef6 <HAL_GPIO_Init+0x48a>
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	2b0a      	cmp	r3, #10
 8007eac:	d023      	beq.n	8007ef6 <HAL_GPIO_Init+0x48a>
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	2b0a      	cmp	r3, #10
 8007eb4:	d01f      	beq.n	8007ef6 <HAL_GPIO_Init+0x48a>
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	2b0b      	cmp	r3, #11
 8007ebc:	d01b      	beq.n	8007ef6 <HAL_GPIO_Init+0x48a>
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	2b0c      	cmp	r3, #12
 8007ec4:	d017      	beq.n	8007ef6 <HAL_GPIO_Init+0x48a>
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	2b0c      	cmp	r3, #12
 8007ecc:	d013      	beq.n	8007ef6 <HAL_GPIO_Init+0x48a>
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	2b0c      	cmp	r3, #12
 8007ed4:	d00f      	beq.n	8007ef6 <HAL_GPIO_Init+0x48a>
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	2b0f      	cmp	r3, #15
 8007edc:	d00b      	beq.n	8007ef6 <HAL_GPIO_Init+0x48a>
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	2b0d      	cmp	r3, #13
 8007ee4:	d007      	beq.n	8007ef6 <HAL_GPIO_Init+0x48a>
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	2b0e      	cmp	r3, #14
 8007eec:	d003      	beq.n	8007ef6 <HAL_GPIO_Init+0x48a>
 8007eee:	21db      	movs	r1, #219	@ 0xdb
 8007ef0:	4888      	ldr	r0, [pc, #544]	@ (8008114 <HAL_GPIO_Init+0x6a8>)
 8007ef2:	f7fe fd5b 	bl	80069ac <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	08da      	lsrs	r2, r3, #3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	3208      	adds	r2, #8
 8007efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	f003 0307 	and.w	r3, r3, #7
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	220f      	movs	r2, #15
 8007f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f12:	43db      	mvns	r3, r3
 8007f14:	69ba      	ldr	r2, [r7, #24]
 8007f16:	4013      	ands	r3, r2
 8007f18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	691a      	ldr	r2, [r3, #16]
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	f003 0307 	and.w	r3, r3, #7
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	fa02 f303 	lsl.w	r3, r2, r3
 8007f2a:	69ba      	ldr	r2, [r7, #24]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	08da      	lsrs	r2, r3, #3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	3208      	adds	r2, #8
 8007f38:	69b9      	ldr	r1, [r7, #24]
 8007f3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	005b      	lsls	r3, r3, #1
 8007f48:	2203      	movs	r2, #3
 8007f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f4e:	43db      	mvns	r3, r3
 8007f50:	69ba      	ldr	r2, [r7, #24]
 8007f52:	4013      	ands	r3, r2
 8007f54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	f003 0203 	and.w	r2, r3, #3
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	005b      	lsls	r3, r3, #1
 8007f62:	fa02 f303 	lsl.w	r3, r2, r3
 8007f66:	69ba      	ldr	r2, [r7, #24]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	69ba      	ldr	r2, [r7, #24]
 8007f70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f000 80be 	beq.w	80080fc <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f80:	4b65      	ldr	r3, [pc, #404]	@ (8008118 <HAL_GPIO_Init+0x6ac>)
 8007f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f84:	4a64      	ldr	r2, [pc, #400]	@ (8008118 <HAL_GPIO_Init+0x6ac>)
 8007f86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007f8a:	6453      	str	r3, [r2, #68]	@ 0x44
 8007f8c:	4b62      	ldr	r3, [pc, #392]	@ (8008118 <HAL_GPIO_Init+0x6ac>)
 8007f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f94:	60fb      	str	r3, [r7, #12]
 8007f96:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007f98:	4a60      	ldr	r2, [pc, #384]	@ (800811c <HAL_GPIO_Init+0x6b0>)
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	089b      	lsrs	r3, r3, #2
 8007f9e:	3302      	adds	r3, #2
 8007fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	f003 0303 	and.w	r3, r3, #3
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	220f      	movs	r2, #15
 8007fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb4:	43db      	mvns	r3, r3
 8007fb6:	69ba      	ldr	r2, [r7, #24]
 8007fb8:	4013      	ands	r3, r2
 8007fba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a58      	ldr	r2, [pc, #352]	@ (8008120 <HAL_GPIO_Init+0x6b4>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d037      	beq.n	8008034 <HAL_GPIO_Init+0x5c8>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a57      	ldr	r2, [pc, #348]	@ (8008124 <HAL_GPIO_Init+0x6b8>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d031      	beq.n	8008030 <HAL_GPIO_Init+0x5c4>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a56      	ldr	r2, [pc, #344]	@ (8008128 <HAL_GPIO_Init+0x6bc>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d02b      	beq.n	800802c <HAL_GPIO_Init+0x5c0>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a55      	ldr	r2, [pc, #340]	@ (800812c <HAL_GPIO_Init+0x6c0>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d025      	beq.n	8008028 <HAL_GPIO_Init+0x5bc>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a54      	ldr	r2, [pc, #336]	@ (8008130 <HAL_GPIO_Init+0x6c4>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d01f      	beq.n	8008024 <HAL_GPIO_Init+0x5b8>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a53      	ldr	r2, [pc, #332]	@ (8008134 <HAL_GPIO_Init+0x6c8>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d019      	beq.n	8008020 <HAL_GPIO_Init+0x5b4>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a52      	ldr	r2, [pc, #328]	@ (8008138 <HAL_GPIO_Init+0x6cc>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d013      	beq.n	800801c <HAL_GPIO_Init+0x5b0>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4a51      	ldr	r2, [pc, #324]	@ (800813c <HAL_GPIO_Init+0x6d0>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d00d      	beq.n	8008018 <HAL_GPIO_Init+0x5ac>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	4a50      	ldr	r2, [pc, #320]	@ (8008140 <HAL_GPIO_Init+0x6d4>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d007      	beq.n	8008014 <HAL_GPIO_Init+0x5a8>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a4f      	ldr	r2, [pc, #316]	@ (8008144 <HAL_GPIO_Init+0x6d8>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d101      	bne.n	8008010 <HAL_GPIO_Init+0x5a4>
 800800c:	2309      	movs	r3, #9
 800800e:	e012      	b.n	8008036 <HAL_GPIO_Init+0x5ca>
 8008010:	230a      	movs	r3, #10
 8008012:	e010      	b.n	8008036 <HAL_GPIO_Init+0x5ca>
 8008014:	2308      	movs	r3, #8
 8008016:	e00e      	b.n	8008036 <HAL_GPIO_Init+0x5ca>
 8008018:	2307      	movs	r3, #7
 800801a:	e00c      	b.n	8008036 <HAL_GPIO_Init+0x5ca>
 800801c:	2306      	movs	r3, #6
 800801e:	e00a      	b.n	8008036 <HAL_GPIO_Init+0x5ca>
 8008020:	2305      	movs	r3, #5
 8008022:	e008      	b.n	8008036 <HAL_GPIO_Init+0x5ca>
 8008024:	2304      	movs	r3, #4
 8008026:	e006      	b.n	8008036 <HAL_GPIO_Init+0x5ca>
 8008028:	2303      	movs	r3, #3
 800802a:	e004      	b.n	8008036 <HAL_GPIO_Init+0x5ca>
 800802c:	2302      	movs	r3, #2
 800802e:	e002      	b.n	8008036 <HAL_GPIO_Init+0x5ca>
 8008030:	2301      	movs	r3, #1
 8008032:	e000      	b.n	8008036 <HAL_GPIO_Init+0x5ca>
 8008034:	2300      	movs	r3, #0
 8008036:	69fa      	ldr	r2, [r7, #28]
 8008038:	f002 0203 	and.w	r2, r2, #3
 800803c:	0092      	lsls	r2, r2, #2
 800803e:	4093      	lsls	r3, r2
 8008040:	69ba      	ldr	r2, [r7, #24]
 8008042:	4313      	orrs	r3, r2
 8008044:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008046:	4935      	ldr	r1, [pc, #212]	@ (800811c <HAL_GPIO_Init+0x6b0>)
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	089b      	lsrs	r3, r3, #2
 800804c:	3302      	adds	r3, #2
 800804e:	69ba      	ldr	r2, [r7, #24]
 8008050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008054:	4b3c      	ldr	r3, [pc, #240]	@ (8008148 <HAL_GPIO_Init+0x6dc>)
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	43db      	mvns	r3, r3
 800805e:	69ba      	ldr	r2, [r7, #24]
 8008060:	4013      	ands	r3, r2
 8008062:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800806c:	2b00      	cmp	r3, #0
 800806e:	d003      	beq.n	8008078 <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 8008070:	69ba      	ldr	r2, [r7, #24]
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	4313      	orrs	r3, r2
 8008076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008078:	4a33      	ldr	r2, [pc, #204]	@ (8008148 <HAL_GPIO_Init+0x6dc>)
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800807e:	4b32      	ldr	r3, [pc, #200]	@ (8008148 <HAL_GPIO_Init+0x6dc>)
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	43db      	mvns	r3, r3
 8008088:	69ba      	ldr	r2, [r7, #24]
 800808a:	4013      	ands	r3, r2
 800808c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008096:	2b00      	cmp	r3, #0
 8008098:	d003      	beq.n	80080a2 <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 800809a:	69ba      	ldr	r2, [r7, #24]
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	4313      	orrs	r3, r2
 80080a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80080a2:	4a29      	ldr	r2, [pc, #164]	@ (8008148 <HAL_GPIO_Init+0x6dc>)
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80080a8:	4b27      	ldr	r3, [pc, #156]	@ (8008148 <HAL_GPIO_Init+0x6dc>)
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	43db      	mvns	r3, r3
 80080b2:	69ba      	ldr	r2, [r7, #24]
 80080b4:	4013      	ands	r3, r2
 80080b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d003      	beq.n	80080cc <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 80080c4:	69ba      	ldr	r2, [r7, #24]
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80080cc:	4a1e      	ldr	r2, [pc, #120]	@ (8008148 <HAL_GPIO_Init+0x6dc>)
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80080d2:	4b1d      	ldr	r3, [pc, #116]	@ (8008148 <HAL_GPIO_Init+0x6dc>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	43db      	mvns	r3, r3
 80080dc:	69ba      	ldr	r2, [r7, #24]
 80080de:	4013      	ands	r3, r2
 80080e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d003      	beq.n	80080f6 <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 80080ee:	69ba      	ldr	r2, [r7, #24]
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80080f6:	4a14      	ldr	r2, [pc, #80]	@ (8008148 <HAL_GPIO_Init+0x6dc>)
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	3301      	adds	r3, #1
 8008100:	61fb      	str	r3, [r7, #28]
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	2b0f      	cmp	r3, #15
 8008106:	f67f ad4d 	bls.w	8007ba4 <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 800810a:	bf00      	nop
 800810c:	bf00      	nop
 800810e:	3720      	adds	r7, #32
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	08019774 	.word	0x08019774
 8008118:	40023800 	.word	0x40023800
 800811c:	40013800 	.word	0x40013800
 8008120:	40020000 	.word	0x40020000
 8008124:	40020400 	.word	0x40020400
 8008128:	40020800 	.word	0x40020800
 800812c:	40020c00 	.word	0x40020c00
 8008130:	40021000 	.word	0x40021000
 8008134:	40021400 	.word	0x40021400
 8008138:	40021800 	.word	0x40021800
 800813c:	40021c00 	.word	0x40021c00
 8008140:	40022000 	.word	0x40022000
 8008144:	40022400 	.word	0x40022400
 8008148:	40013c00 	.word	0x40013c00

0800814c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	460b      	mov	r3, r1
 8008156:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8008158:	887b      	ldrh	r3, [r7, #2]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d104      	bne.n	8008168 <HAL_GPIO_ReadPin+0x1c>
 800815e:	f240 1177 	movw	r1, #375	@ 0x177
 8008162:	4809      	ldr	r0, [pc, #36]	@ (8008188 <HAL_GPIO_ReadPin+0x3c>)
 8008164:	f7fe fc22 	bl	80069ac <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	691a      	ldr	r2, [r3, #16]
 800816c:	887b      	ldrh	r3, [r7, #2]
 800816e:	4013      	ands	r3, r2
 8008170:	2b00      	cmp	r3, #0
 8008172:	d002      	beq.n	800817a <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8008174:	2301      	movs	r3, #1
 8008176:	73fb      	strb	r3, [r7, #15]
 8008178:	e001      	b.n	800817e <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800817a:	2300      	movs	r3, #0
 800817c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800817e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008180:	4618      	mov	r0, r3
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}
 8008188:	08019774 	.word	0x08019774

0800818c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	460b      	mov	r3, r1
 8008196:	807b      	strh	r3, [r7, #2]
 8008198:	4613      	mov	r3, r2
 800819a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800819c:	887b      	ldrh	r3, [r7, #2]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d104      	bne.n	80081ac <HAL_GPIO_WritePin+0x20>
 80081a2:	f240 1197 	movw	r1, #407	@ 0x197
 80081a6:	480e      	ldr	r0, [pc, #56]	@ (80081e0 <HAL_GPIO_WritePin+0x54>)
 80081a8:	f7fe fc00 	bl	80069ac <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80081ac:	787b      	ldrb	r3, [r7, #1]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d007      	beq.n	80081c2 <HAL_GPIO_WritePin+0x36>
 80081b2:	787b      	ldrb	r3, [r7, #1]
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d004      	beq.n	80081c2 <HAL_GPIO_WritePin+0x36>
 80081b8:	f44f 71cc 	mov.w	r1, #408	@ 0x198
 80081bc:	4808      	ldr	r0, [pc, #32]	@ (80081e0 <HAL_GPIO_WritePin+0x54>)
 80081be:	f7fe fbf5 	bl	80069ac <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80081c2:	787b      	ldrb	r3, [r7, #1]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d003      	beq.n	80081d0 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 80081c8:	887a      	ldrh	r2, [r7, #2]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80081ce:	e003      	b.n	80081d8 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80081d0:	887b      	ldrh	r3, [r7, #2]
 80081d2:	041a      	lsls	r2, r3, #16
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	619a      	str	r2, [r3, #24]
}
 80081d8:	bf00      	nop
 80081da:	3708      	adds	r7, #8
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	08019774 	.word	0x08019774

080081e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b086      	sub	sp, #24
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80081ec:	2300      	movs	r3, #0
 80081ee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d101      	bne.n	80081fa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	e345      	b.n	8008886 <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2b0f      	cmp	r3, #15
 8008200:	d904      	bls.n	800820c <HAL_RCC_OscConfig+0x28>
 8008202:	f240 1163 	movw	r1, #355	@ 0x163
 8008206:	4892      	ldr	r0, [pc, #584]	@ (8008450 <HAL_RCC_OscConfig+0x26c>)
 8008208:	f7fe fbd0 	bl	80069ac <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 0301 	and.w	r3, r3, #1
 8008214:	2b00      	cmp	r3, #0
 8008216:	f000 809a 	beq.w	800834e <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00e      	beq.n	8008240 <HAL_RCC_OscConfig+0x5c>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800822a:	d009      	beq.n	8008240 <HAL_RCC_OscConfig+0x5c>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008234:	d004      	beq.n	8008240 <HAL_RCC_OscConfig+0x5c>
 8008236:	f240 1169 	movw	r1, #361	@ 0x169
 800823a:	4885      	ldr	r0, [pc, #532]	@ (8008450 <HAL_RCC_OscConfig+0x26c>)
 800823c:	f7fe fbb6 	bl	80069ac <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008240:	4b84      	ldr	r3, [pc, #528]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	f003 030c 	and.w	r3, r3, #12
 8008248:	2b04      	cmp	r3, #4
 800824a:	d00c      	beq.n	8008266 <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800824c:	4b81      	ldr	r3, [pc, #516]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	f003 030c 	and.w	r3, r3, #12
 8008254:	2b08      	cmp	r3, #8
 8008256:	d112      	bne.n	800827e <HAL_RCC_OscConfig+0x9a>
 8008258:	4b7e      	ldr	r3, [pc, #504]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008260:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008264:	d10b      	bne.n	800827e <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008266:	4b7b      	ldr	r3, [pc, #492]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800826e:	2b00      	cmp	r3, #0
 8008270:	d06c      	beq.n	800834c <HAL_RCC_OscConfig+0x168>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d168      	bne.n	800834c <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	e303      	b.n	8008886 <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008286:	d106      	bne.n	8008296 <HAL_RCC_OscConfig+0xb2>
 8008288:	4b72      	ldr	r3, [pc, #456]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a71      	ldr	r2, [pc, #452]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 800828e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008292:	6013      	str	r3, [r2, #0]
 8008294:	e02e      	b.n	80082f4 <HAL_RCC_OscConfig+0x110>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d10c      	bne.n	80082b8 <HAL_RCC_OscConfig+0xd4>
 800829e:	4b6d      	ldr	r3, [pc, #436]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a6c      	ldr	r2, [pc, #432]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 80082a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082a8:	6013      	str	r3, [r2, #0]
 80082aa:	4b6a      	ldr	r3, [pc, #424]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a69      	ldr	r2, [pc, #420]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 80082b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80082b4:	6013      	str	r3, [r2, #0]
 80082b6:	e01d      	b.n	80082f4 <HAL_RCC_OscConfig+0x110>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80082c0:	d10c      	bne.n	80082dc <HAL_RCC_OscConfig+0xf8>
 80082c2:	4b64      	ldr	r3, [pc, #400]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a63      	ldr	r2, [pc, #396]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 80082c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80082cc:	6013      	str	r3, [r2, #0]
 80082ce:	4b61      	ldr	r3, [pc, #388]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a60      	ldr	r2, [pc, #384]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 80082d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80082d8:	6013      	str	r3, [r2, #0]
 80082da:	e00b      	b.n	80082f4 <HAL_RCC_OscConfig+0x110>
 80082dc:	4b5d      	ldr	r3, [pc, #372]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a5c      	ldr	r2, [pc, #368]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 80082e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082e6:	6013      	str	r3, [r2, #0]
 80082e8:	4b5a      	ldr	r3, [pc, #360]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a59      	ldr	r2, [pc, #356]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 80082ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80082f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d013      	beq.n	8008324 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082fc:	f7ff f896 	bl	800742c <HAL_GetTick>
 8008300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008302:	e008      	b.n	8008316 <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008304:	f7ff f892 	bl	800742c <HAL_GetTick>
 8008308:	4602      	mov	r2, r0
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	2b64      	cmp	r3, #100	@ 0x64
 8008310:	d901      	bls.n	8008316 <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8008312:	2303      	movs	r3, #3
 8008314:	e2b7      	b.n	8008886 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008316:	4b4f      	ldr	r3, [pc, #316]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800831e:	2b00      	cmp	r3, #0
 8008320:	d0f0      	beq.n	8008304 <HAL_RCC_OscConfig+0x120>
 8008322:	e014      	b.n	800834e <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008324:	f7ff f882 	bl	800742c <HAL_GetTick>
 8008328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800832a:	e008      	b.n	800833e <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800832c:	f7ff f87e 	bl	800742c <HAL_GetTick>
 8008330:	4602      	mov	r2, r0
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	1ad3      	subs	r3, r2, r3
 8008336:	2b64      	cmp	r3, #100	@ 0x64
 8008338:	d901      	bls.n	800833e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800833a:	2303      	movs	r3, #3
 800833c:	e2a3      	b.n	8008886 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800833e:	4b45      	ldr	r3, [pc, #276]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1f0      	bne.n	800832c <HAL_RCC_OscConfig+0x148>
 800834a:	e000      	b.n	800834e <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800834c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 0302 	and.w	r3, r3, #2
 8008356:	2b00      	cmp	r3, #0
 8008358:	f000 8084 	beq.w	8008464 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d008      	beq.n	8008376 <HAL_RCC_OscConfig+0x192>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	2b01      	cmp	r3, #1
 800836a:	d004      	beq.n	8008376 <HAL_RCC_OscConfig+0x192>
 800836c:	f240 119b 	movw	r1, #411	@ 0x19b
 8008370:	4837      	ldr	r0, [pc, #220]	@ (8008450 <HAL_RCC_OscConfig+0x26c>)
 8008372:	f7fe fb1b 	bl	80069ac <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	2b1f      	cmp	r3, #31
 800837c:	d904      	bls.n	8008388 <HAL_RCC_OscConfig+0x1a4>
 800837e:	f44f 71ce 	mov.w	r1, #412	@ 0x19c
 8008382:	4833      	ldr	r0, [pc, #204]	@ (8008450 <HAL_RCC_OscConfig+0x26c>)
 8008384:	f7fe fb12 	bl	80069ac <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008388:	4b32      	ldr	r3, [pc, #200]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	f003 030c 	and.w	r3, r3, #12
 8008390:	2b00      	cmp	r3, #0
 8008392:	d00b      	beq.n	80083ac <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008394:	4b2f      	ldr	r3, [pc, #188]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	f003 030c 	and.w	r3, r3, #12
 800839c:	2b08      	cmp	r3, #8
 800839e:	d11c      	bne.n	80083da <HAL_RCC_OscConfig+0x1f6>
 80083a0:	4b2c      	ldr	r3, [pc, #176]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d116      	bne.n	80083da <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80083ac:	4b29      	ldr	r3, [pc, #164]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f003 0302 	and.w	r3, r3, #2
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d005      	beq.n	80083c4 <HAL_RCC_OscConfig+0x1e0>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d001      	beq.n	80083c4 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e260      	b.n	8008886 <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083c4:	4b23      	ldr	r3, [pc, #140]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	00db      	lsls	r3, r3, #3
 80083d2:	4920      	ldr	r1, [pc, #128]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 80083d4:	4313      	orrs	r3, r2
 80083d6:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80083d8:	e044      	b.n	8008464 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d023      	beq.n	800842a <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80083e2:	4b1c      	ldr	r3, [pc, #112]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a1b      	ldr	r2, [pc, #108]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 80083e8:	f043 0301 	orr.w	r3, r3, #1
 80083ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083ee:	f7ff f81d 	bl	800742c <HAL_GetTick>
 80083f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083f4:	e008      	b.n	8008408 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80083f6:	f7ff f819 	bl	800742c <HAL_GetTick>
 80083fa:	4602      	mov	r2, r0
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	2b02      	cmp	r3, #2
 8008402:	d901      	bls.n	8008408 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8008404:	2303      	movs	r3, #3
 8008406:	e23e      	b.n	8008886 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008408:	4b12      	ldr	r3, [pc, #72]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f003 0302 	and.w	r3, r3, #2
 8008410:	2b00      	cmp	r3, #0
 8008412:	d0f0      	beq.n	80083f6 <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008414:	4b0f      	ldr	r3, [pc, #60]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	00db      	lsls	r3, r3, #3
 8008422:	490c      	ldr	r1, [pc, #48]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 8008424:	4313      	orrs	r3, r2
 8008426:	600b      	str	r3, [r1, #0]
 8008428:	e01c      	b.n	8008464 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800842a:	4b0a      	ldr	r3, [pc, #40]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a09      	ldr	r2, [pc, #36]	@ (8008454 <HAL_RCC_OscConfig+0x270>)
 8008430:	f023 0301 	bic.w	r3, r3, #1
 8008434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008436:	f7fe fff9 	bl	800742c <HAL_GetTick>
 800843a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800843c:	e00c      	b.n	8008458 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800843e:	f7fe fff5 	bl	800742c <HAL_GetTick>
 8008442:	4602      	mov	r2, r0
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	2b02      	cmp	r3, #2
 800844a:	d905      	bls.n	8008458 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 800844c:	2303      	movs	r3, #3
 800844e:	e21a      	b.n	8008886 <HAL_RCC_OscConfig+0x6a2>
 8008450:	080197b0 	.word	0x080197b0
 8008454:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008458:	4b7e      	ldr	r3, [pc, #504]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 0302 	and.w	r3, r3, #2
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1ec      	bne.n	800843e <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 0308 	and.w	r3, r3, #8
 800846c:	2b00      	cmp	r3, #0
 800846e:	d043      	beq.n	80084f8 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	695b      	ldr	r3, [r3, #20]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d008      	beq.n	800848a <HAL_RCC_OscConfig+0x2a6>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	695b      	ldr	r3, [r3, #20]
 800847c:	2b01      	cmp	r3, #1
 800847e:	d004      	beq.n	800848a <HAL_RCC_OscConfig+0x2a6>
 8008480:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 8008484:	4874      	ldr	r0, [pc, #464]	@ (8008658 <HAL_RCC_OscConfig+0x474>)
 8008486:	f7fe fa91 	bl	80069ac <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d019      	beq.n	80084c6 <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008492:	4b70      	ldr	r3, [pc, #448]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 8008494:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008496:	4a6f      	ldr	r2, [pc, #444]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 8008498:	f043 0301 	orr.w	r3, r3, #1
 800849c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800849e:	f7fe ffc5 	bl	800742c <HAL_GetTick>
 80084a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084a4:	e008      	b.n	80084b8 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084a6:	f7fe ffc1 	bl	800742c <HAL_GetTick>
 80084aa:	4602      	mov	r2, r0
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	1ad3      	subs	r3, r2, r3
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d901      	bls.n	80084b8 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 80084b4:	2303      	movs	r3, #3
 80084b6:	e1e6      	b.n	8008886 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084b8:	4b66      	ldr	r3, [pc, #408]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 80084ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084bc:	f003 0302 	and.w	r3, r3, #2
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d0f0      	beq.n	80084a6 <HAL_RCC_OscConfig+0x2c2>
 80084c4:	e018      	b.n	80084f8 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084c6:	4b63      	ldr	r3, [pc, #396]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 80084c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084ca:	4a62      	ldr	r2, [pc, #392]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 80084cc:	f023 0301 	bic.w	r3, r3, #1
 80084d0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084d2:	f7fe ffab 	bl	800742c <HAL_GetTick>
 80084d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80084d8:	e008      	b.n	80084ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084da:	f7fe ffa7 	bl	800742c <HAL_GetTick>
 80084de:	4602      	mov	r2, r0
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	1ad3      	subs	r3, r2, r3
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d901      	bls.n	80084ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80084e8:	2303      	movs	r3, #3
 80084ea:	e1cc      	b.n	8008886 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80084ec:	4b59      	ldr	r3, [pc, #356]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 80084ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084f0:	f003 0302 	and.w	r3, r3, #2
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1f0      	bne.n	80084da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f003 0304 	and.w	r3, r3, #4
 8008500:	2b00      	cmp	r3, #0
 8008502:	f000 80bc 	beq.w	800867e <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00c      	beq.n	8008528 <HAL_RCC_OscConfig+0x344>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	2b01      	cmp	r3, #1
 8008514:	d008      	beq.n	8008528 <HAL_RCC_OscConfig+0x344>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	2b05      	cmp	r3, #5
 800851c:	d004      	beq.n	8008528 <HAL_RCC_OscConfig+0x344>
 800851e:	f240 2106 	movw	r1, #518	@ 0x206
 8008522:	484d      	ldr	r0, [pc, #308]	@ (8008658 <HAL_RCC_OscConfig+0x474>)
 8008524:	f7fe fa42 	bl	80069ac <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008528:	4b4a      	ldr	r3, [pc, #296]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 800852a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800852c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10d      	bne.n	8008550 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008534:	4b47      	ldr	r3, [pc, #284]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 8008536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008538:	4a46      	ldr	r2, [pc, #280]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 800853a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800853e:	6413      	str	r3, [r2, #64]	@ 0x40
 8008540:	4b44      	ldr	r3, [pc, #272]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 8008542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008544:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008548:	60bb      	str	r3, [r7, #8]
 800854a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800854c:	2301      	movs	r3, #1
 800854e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008550:	4b42      	ldr	r3, [pc, #264]	@ (800865c <HAL_RCC_OscConfig+0x478>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008558:	2b00      	cmp	r3, #0
 800855a:	d118      	bne.n	800858e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800855c:	4b3f      	ldr	r3, [pc, #252]	@ (800865c <HAL_RCC_OscConfig+0x478>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a3e      	ldr	r2, [pc, #248]	@ (800865c <HAL_RCC_OscConfig+0x478>)
 8008562:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008566:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008568:	f7fe ff60 	bl	800742c <HAL_GetTick>
 800856c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800856e:	e008      	b.n	8008582 <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008570:	f7fe ff5c 	bl	800742c <HAL_GetTick>
 8008574:	4602      	mov	r2, r0
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	1ad3      	subs	r3, r2, r3
 800857a:	2b64      	cmp	r3, #100	@ 0x64
 800857c:	d901      	bls.n	8008582 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800857e:	2303      	movs	r3, #3
 8008580:	e181      	b.n	8008886 <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008582:	4b36      	ldr	r3, [pc, #216]	@ (800865c <HAL_RCC_OscConfig+0x478>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800858a:	2b00      	cmp	r3, #0
 800858c:	d0f0      	beq.n	8008570 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	2b01      	cmp	r3, #1
 8008594:	d106      	bne.n	80085a4 <HAL_RCC_OscConfig+0x3c0>
 8008596:	4b2f      	ldr	r3, [pc, #188]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 8008598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800859a:	4a2e      	ldr	r2, [pc, #184]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 800859c:	f043 0301 	orr.w	r3, r3, #1
 80085a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80085a2:	e02d      	b.n	8008600 <HAL_RCC_OscConfig+0x41c>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d10c      	bne.n	80085c6 <HAL_RCC_OscConfig+0x3e2>
 80085ac:	4b29      	ldr	r3, [pc, #164]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 80085ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085b0:	4a28      	ldr	r2, [pc, #160]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 80085b2:	f023 0301 	bic.w	r3, r3, #1
 80085b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80085b8:	4b26      	ldr	r3, [pc, #152]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 80085ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085bc:	4a25      	ldr	r2, [pc, #148]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 80085be:	f023 0304 	bic.w	r3, r3, #4
 80085c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80085c4:	e01c      	b.n	8008600 <HAL_RCC_OscConfig+0x41c>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	2b05      	cmp	r3, #5
 80085cc:	d10c      	bne.n	80085e8 <HAL_RCC_OscConfig+0x404>
 80085ce:	4b21      	ldr	r3, [pc, #132]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 80085d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085d2:	4a20      	ldr	r2, [pc, #128]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 80085d4:	f043 0304 	orr.w	r3, r3, #4
 80085d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80085da:	4b1e      	ldr	r3, [pc, #120]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 80085dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085de:	4a1d      	ldr	r2, [pc, #116]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 80085e0:	f043 0301 	orr.w	r3, r3, #1
 80085e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80085e6:	e00b      	b.n	8008600 <HAL_RCC_OscConfig+0x41c>
 80085e8:	4b1a      	ldr	r3, [pc, #104]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 80085ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085ec:	4a19      	ldr	r2, [pc, #100]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 80085ee:	f023 0301 	bic.w	r3, r3, #1
 80085f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80085f4:	4b17      	ldr	r3, [pc, #92]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 80085f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085f8:	4a16      	ldr	r2, [pc, #88]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 80085fa:	f023 0304 	bic.w	r3, r3, #4
 80085fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d015      	beq.n	8008634 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008608:	f7fe ff10 	bl	800742c <HAL_GetTick>
 800860c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800860e:	e00a      	b.n	8008626 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008610:	f7fe ff0c 	bl	800742c <HAL_GetTick>
 8008614:	4602      	mov	r2, r0
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800861e:	4293      	cmp	r3, r2
 8008620:	d901      	bls.n	8008626 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8008622:	2303      	movs	r3, #3
 8008624:	e12f      	b.n	8008886 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008626:	4b0b      	ldr	r3, [pc, #44]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 8008628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800862a:	f003 0302 	and.w	r3, r3, #2
 800862e:	2b00      	cmp	r3, #0
 8008630:	d0ee      	beq.n	8008610 <HAL_RCC_OscConfig+0x42c>
 8008632:	e01b      	b.n	800866c <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008634:	f7fe fefa 	bl	800742c <HAL_GetTick>
 8008638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800863a:	e011      	b.n	8008660 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800863c:	f7fe fef6 	bl	800742c <HAL_GetTick>
 8008640:	4602      	mov	r2, r0
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800864a:	4293      	cmp	r3, r2
 800864c:	d908      	bls.n	8008660 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 800864e:	2303      	movs	r3, #3
 8008650:	e119      	b.n	8008886 <HAL_RCC_OscConfig+0x6a2>
 8008652:	bf00      	nop
 8008654:	40023800 	.word	0x40023800
 8008658:	080197b0 	.word	0x080197b0
 800865c:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008660:	4b8b      	ldr	r3, [pc, #556]	@ (8008890 <HAL_RCC_OscConfig+0x6ac>)
 8008662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008664:	f003 0302 	and.w	r3, r3, #2
 8008668:	2b00      	cmp	r3, #0
 800866a:	d1e7      	bne.n	800863c <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800866c:	7dfb      	ldrb	r3, [r7, #23]
 800866e:	2b01      	cmp	r3, #1
 8008670:	d105      	bne.n	800867e <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008672:	4b87      	ldr	r3, [pc, #540]	@ (8008890 <HAL_RCC_OscConfig+0x6ac>)
 8008674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008676:	4a86      	ldr	r2, [pc, #536]	@ (8008890 <HAL_RCC_OscConfig+0x6ac>)
 8008678:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800867c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00c      	beq.n	80086a0 <HAL_RCC_OscConfig+0x4bc>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	699b      	ldr	r3, [r3, #24]
 800868a:	2b01      	cmp	r3, #1
 800868c:	d008      	beq.n	80086a0 <HAL_RCC_OscConfig+0x4bc>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	699b      	ldr	r3, [r3, #24]
 8008692:	2b02      	cmp	r3, #2
 8008694:	d004      	beq.n	80086a0 <HAL_RCC_OscConfig+0x4bc>
 8008696:	f240 214a 	movw	r1, #586	@ 0x24a
 800869a:	487e      	ldr	r0, [pc, #504]	@ (8008894 <HAL_RCC_OscConfig+0x6b0>)
 800869c:	f7fe f986 	bl	80069ac <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	699b      	ldr	r3, [r3, #24]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 80ed 	beq.w	8008884 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80086aa:	4b79      	ldr	r3, [pc, #484]	@ (8008890 <HAL_RCC_OscConfig+0x6ac>)
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	f003 030c 	and.w	r3, r3, #12
 80086b2:	2b08      	cmp	r3, #8
 80086b4:	f000 80b4 	beq.w	8008820 <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	2b02      	cmp	r3, #2
 80086be:	f040 8095 	bne.w	80087ec <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	69db      	ldr	r3, [r3, #28]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d009      	beq.n	80086de <HAL_RCC_OscConfig+0x4fa>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	69db      	ldr	r3, [r3, #28]
 80086ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80086d2:	d004      	beq.n	80086de <HAL_RCC_OscConfig+0x4fa>
 80086d4:	f240 2153 	movw	r1, #595	@ 0x253
 80086d8:	486e      	ldr	r0, [pc, #440]	@ (8008894 <HAL_RCC_OscConfig+0x6b0>)
 80086da:	f7fe f967 	bl	80069ac <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a1b      	ldr	r3, [r3, #32]
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d903      	bls.n	80086ee <HAL_RCC_OscConfig+0x50a>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a1b      	ldr	r3, [r3, #32]
 80086ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80086ec:	d904      	bls.n	80086f8 <HAL_RCC_OscConfig+0x514>
 80086ee:	f44f 7115 	mov.w	r1, #596	@ 0x254
 80086f2:	4868      	ldr	r0, [pc, #416]	@ (8008894 <HAL_RCC_OscConfig+0x6b0>)
 80086f4:	f7fe f95a 	bl	80069ac <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086fc:	2b31      	cmp	r3, #49	@ 0x31
 80086fe:	d904      	bls.n	800870a <HAL_RCC_OscConfig+0x526>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008704:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8008708:	d904      	bls.n	8008714 <HAL_RCC_OscConfig+0x530>
 800870a:	f240 2155 	movw	r1, #597	@ 0x255
 800870e:	4861      	ldr	r0, [pc, #388]	@ (8008894 <HAL_RCC_OscConfig+0x6b0>)
 8008710:	f7fe f94c 	bl	80069ac <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008718:	2b02      	cmp	r3, #2
 800871a:	d010      	beq.n	800873e <HAL_RCC_OscConfig+0x55a>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008720:	2b04      	cmp	r3, #4
 8008722:	d00c      	beq.n	800873e <HAL_RCC_OscConfig+0x55a>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008728:	2b06      	cmp	r3, #6
 800872a:	d008      	beq.n	800873e <HAL_RCC_OscConfig+0x55a>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008730:	2b08      	cmp	r3, #8
 8008732:	d004      	beq.n	800873e <HAL_RCC_OscConfig+0x55a>
 8008734:	f240 2156 	movw	r1, #598	@ 0x256
 8008738:	4856      	ldr	r0, [pc, #344]	@ (8008894 <HAL_RCC_OscConfig+0x6b0>)
 800873a:	f7fe f937 	bl	80069ac <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008742:	2b01      	cmp	r3, #1
 8008744:	d903      	bls.n	800874e <HAL_RCC_OscConfig+0x56a>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800874a:	2b0f      	cmp	r3, #15
 800874c:	d904      	bls.n	8008758 <HAL_RCC_OscConfig+0x574>
 800874e:	f240 2157 	movw	r1, #599	@ 0x257
 8008752:	4850      	ldr	r0, [pc, #320]	@ (8008894 <HAL_RCC_OscConfig+0x6b0>)
 8008754:	f7fe f92a 	bl	80069ac <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008758:	4b4d      	ldr	r3, [pc, #308]	@ (8008890 <HAL_RCC_OscConfig+0x6ac>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a4c      	ldr	r2, [pc, #304]	@ (8008890 <HAL_RCC_OscConfig+0x6ac>)
 800875e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008764:	f7fe fe62 	bl	800742c <HAL_GetTick>
 8008768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800876a:	e008      	b.n	800877e <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800876c:	f7fe fe5e 	bl	800742c <HAL_GetTick>
 8008770:	4602      	mov	r2, r0
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	2b02      	cmp	r3, #2
 8008778:	d901      	bls.n	800877e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800877a:	2303      	movs	r3, #3
 800877c:	e083      	b.n	8008886 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800877e:	4b44      	ldr	r3, [pc, #272]	@ (8008890 <HAL_RCC_OscConfig+0x6ac>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1f0      	bne.n	800876c <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	69da      	ldr	r2, [r3, #28]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a1b      	ldr	r3, [r3, #32]
 8008792:	431a      	orrs	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008798:	019b      	lsls	r3, r3, #6
 800879a:	431a      	orrs	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a0:	085b      	lsrs	r3, r3, #1
 80087a2:	3b01      	subs	r3, #1
 80087a4:	041b      	lsls	r3, r3, #16
 80087a6:	431a      	orrs	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ac:	061b      	lsls	r3, r3, #24
 80087ae:	4313      	orrs	r3, r2
 80087b0:	4a37      	ldr	r2, [pc, #220]	@ (8008890 <HAL_RCC_OscConfig+0x6ac>)
 80087b2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80087b6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087b8:	4b35      	ldr	r3, [pc, #212]	@ (8008890 <HAL_RCC_OscConfig+0x6ac>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a34      	ldr	r2, [pc, #208]	@ (8008890 <HAL_RCC_OscConfig+0x6ac>)
 80087be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80087c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087c4:	f7fe fe32 	bl	800742c <HAL_GetTick>
 80087c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087ca:	e008      	b.n	80087de <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087cc:	f7fe fe2e 	bl	800742c <HAL_GetTick>
 80087d0:	4602      	mov	r2, r0
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	d901      	bls.n	80087de <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 80087da:	2303      	movs	r3, #3
 80087dc:	e053      	b.n	8008886 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087de:	4b2c      	ldr	r3, [pc, #176]	@ (8008890 <HAL_RCC_OscConfig+0x6ac>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d0f0      	beq.n	80087cc <HAL_RCC_OscConfig+0x5e8>
 80087ea:	e04b      	b.n	8008884 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087ec:	4b28      	ldr	r3, [pc, #160]	@ (8008890 <HAL_RCC_OscConfig+0x6ac>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a27      	ldr	r2, [pc, #156]	@ (8008890 <HAL_RCC_OscConfig+0x6ac>)
 80087f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80087f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087f8:	f7fe fe18 	bl	800742c <HAL_GetTick>
 80087fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087fe:	e008      	b.n	8008812 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008800:	f7fe fe14 	bl	800742c <HAL_GetTick>
 8008804:	4602      	mov	r2, r0
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	1ad3      	subs	r3, r2, r3
 800880a:	2b02      	cmp	r3, #2
 800880c:	d901      	bls.n	8008812 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 800880e:	2303      	movs	r3, #3
 8008810:	e039      	b.n	8008886 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008812:	4b1f      	ldr	r3, [pc, #124]	@ (8008890 <HAL_RCC_OscConfig+0x6ac>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1f0      	bne.n	8008800 <HAL_RCC_OscConfig+0x61c>
 800881e:	e031      	b.n	8008884 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008820:	4b1b      	ldr	r3, [pc, #108]	@ (8008890 <HAL_RCC_OscConfig+0x6ac>)
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	699b      	ldr	r3, [r3, #24]
 800882a:	2b01      	cmp	r3, #1
 800882c:	d028      	beq.n	8008880 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008838:	429a      	cmp	r2, r3
 800883a:	d121      	bne.n	8008880 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008846:	429a      	cmp	r2, r3
 8008848:	d11a      	bne.n	8008880 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008850:	4013      	ands	r3, r2
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008856:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008858:	4293      	cmp	r3, r2
 800885a:	d111      	bne.n	8008880 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008866:	085b      	lsrs	r3, r3, #1
 8008868:	3b01      	subs	r3, #1
 800886a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800886c:	429a      	cmp	r2, r3
 800886e:	d107      	bne.n	8008880 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800887a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800887c:	429a      	cmp	r2, r3
 800887e:	d001      	beq.n	8008884 <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	e000      	b.n	8008886 <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3718      	adds	r7, #24
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	40023800 	.word	0x40023800
 8008894:	080197b0 	.word	0x080197b0

08008898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80088a2:	2300      	movs	r3, #0
 80088a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d101      	bne.n	80088b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	e18c      	b.n	8008bca <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d003      	beq.n	80088c0 <HAL_RCC_ClockConfig+0x28>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2b0f      	cmp	r3, #15
 80088be:	d904      	bls.n	80088ca <HAL_RCC_ClockConfig+0x32>
 80088c0:	f240 21dd 	movw	r1, #733	@ 0x2dd
 80088c4:	4887      	ldr	r0, [pc, #540]	@ (8008ae4 <HAL_RCC_ClockConfig+0x24c>)
 80088c6:	f7fe f871 	bl	80069ac <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d031      	beq.n	8008934 <HAL_RCC_ClockConfig+0x9c>
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d02e      	beq.n	8008934 <HAL_RCC_ClockConfig+0x9c>
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	2b02      	cmp	r3, #2
 80088da:	d02b      	beq.n	8008934 <HAL_RCC_ClockConfig+0x9c>
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	2b03      	cmp	r3, #3
 80088e0:	d028      	beq.n	8008934 <HAL_RCC_ClockConfig+0x9c>
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	2b04      	cmp	r3, #4
 80088e6:	d025      	beq.n	8008934 <HAL_RCC_ClockConfig+0x9c>
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	2b05      	cmp	r3, #5
 80088ec:	d022      	beq.n	8008934 <HAL_RCC_ClockConfig+0x9c>
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	2b06      	cmp	r3, #6
 80088f2:	d01f      	beq.n	8008934 <HAL_RCC_ClockConfig+0x9c>
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	2b07      	cmp	r3, #7
 80088f8:	d01c      	beq.n	8008934 <HAL_RCC_ClockConfig+0x9c>
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	2b08      	cmp	r3, #8
 80088fe:	d019      	beq.n	8008934 <HAL_RCC_ClockConfig+0x9c>
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	2b09      	cmp	r3, #9
 8008904:	d016      	beq.n	8008934 <HAL_RCC_ClockConfig+0x9c>
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	2b0a      	cmp	r3, #10
 800890a:	d013      	beq.n	8008934 <HAL_RCC_ClockConfig+0x9c>
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	2b0b      	cmp	r3, #11
 8008910:	d010      	beq.n	8008934 <HAL_RCC_ClockConfig+0x9c>
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	2b0c      	cmp	r3, #12
 8008916:	d00d      	beq.n	8008934 <HAL_RCC_ClockConfig+0x9c>
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	2b0d      	cmp	r3, #13
 800891c:	d00a      	beq.n	8008934 <HAL_RCC_ClockConfig+0x9c>
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	2b0e      	cmp	r3, #14
 8008922:	d007      	beq.n	8008934 <HAL_RCC_ClockConfig+0x9c>
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	2b0f      	cmp	r3, #15
 8008928:	d004      	beq.n	8008934 <HAL_RCC_ClockConfig+0x9c>
 800892a:	f240 21de 	movw	r1, #734	@ 0x2de
 800892e:	486d      	ldr	r0, [pc, #436]	@ (8008ae4 <HAL_RCC_ClockConfig+0x24c>)
 8008930:	f7fe f83c 	bl	80069ac <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008934:	4b6c      	ldr	r3, [pc, #432]	@ (8008ae8 <HAL_RCC_ClockConfig+0x250>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f003 030f 	and.w	r3, r3, #15
 800893c:	683a      	ldr	r2, [r7, #0]
 800893e:	429a      	cmp	r2, r3
 8008940:	d910      	bls.n	8008964 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008942:	4b69      	ldr	r3, [pc, #420]	@ (8008ae8 <HAL_RCC_ClockConfig+0x250>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f023 020f 	bic.w	r2, r3, #15
 800894a:	4967      	ldr	r1, [pc, #412]	@ (8008ae8 <HAL_RCC_ClockConfig+0x250>)
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	4313      	orrs	r3, r2
 8008950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008952:	4b65      	ldr	r3, [pc, #404]	@ (8008ae8 <HAL_RCC_ClockConfig+0x250>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 030f 	and.w	r3, r3, #15
 800895a:	683a      	ldr	r2, [r7, #0]
 800895c:	429a      	cmp	r2, r3
 800895e:	d001      	beq.n	8008964 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e132      	b.n	8008bca <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 0302 	and.w	r3, r3, #2
 800896c:	2b00      	cmp	r3, #0
 800896e:	d049      	beq.n	8008a04 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f003 0304 	and.w	r3, r3, #4
 8008978:	2b00      	cmp	r3, #0
 800897a:	d005      	beq.n	8008988 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800897c:	4b5b      	ldr	r3, [pc, #364]	@ (8008aec <HAL_RCC_ClockConfig+0x254>)
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	4a5a      	ldr	r2, [pc, #360]	@ (8008aec <HAL_RCC_ClockConfig+0x254>)
 8008982:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008986:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 0308 	and.w	r3, r3, #8
 8008990:	2b00      	cmp	r3, #0
 8008992:	d005      	beq.n	80089a0 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008994:	4b55      	ldr	r3, [pc, #340]	@ (8008aec <HAL_RCC_ClockConfig+0x254>)
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	4a54      	ldr	r2, [pc, #336]	@ (8008aec <HAL_RCC_ClockConfig+0x254>)
 800899a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800899e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d024      	beq.n	80089f2 <HAL_RCC_ClockConfig+0x15a>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	2b80      	cmp	r3, #128	@ 0x80
 80089ae:	d020      	beq.n	80089f2 <HAL_RCC_ClockConfig+0x15a>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	2b90      	cmp	r3, #144	@ 0x90
 80089b6:	d01c      	beq.n	80089f2 <HAL_RCC_ClockConfig+0x15a>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	2ba0      	cmp	r3, #160	@ 0xa0
 80089be:	d018      	beq.n	80089f2 <HAL_RCC_ClockConfig+0x15a>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	2bb0      	cmp	r3, #176	@ 0xb0
 80089c6:	d014      	beq.n	80089f2 <HAL_RCC_ClockConfig+0x15a>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	2bc0      	cmp	r3, #192	@ 0xc0
 80089ce:	d010      	beq.n	80089f2 <HAL_RCC_ClockConfig+0x15a>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	2bd0      	cmp	r3, #208	@ 0xd0
 80089d6:	d00c      	beq.n	80089f2 <HAL_RCC_ClockConfig+0x15a>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	2be0      	cmp	r3, #224	@ 0xe0
 80089de:	d008      	beq.n	80089f2 <HAL_RCC_ClockConfig+0x15a>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	2bf0      	cmp	r3, #240	@ 0xf0
 80089e6:	d004      	beq.n	80089f2 <HAL_RCC_ClockConfig+0x15a>
 80089e8:	f240 3102 	movw	r1, #770	@ 0x302
 80089ec:	483d      	ldr	r0, [pc, #244]	@ (8008ae4 <HAL_RCC_ClockConfig+0x24c>)
 80089ee:	f7fd ffdd 	bl	80069ac <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089f2:	4b3e      	ldr	r3, [pc, #248]	@ (8008aec <HAL_RCC_ClockConfig+0x254>)
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	493b      	ldr	r1, [pc, #236]	@ (8008aec <HAL_RCC_ClockConfig+0x254>)
 8008a00:	4313      	orrs	r3, r2
 8008a02:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 0301 	and.w	r3, r3, #1
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d051      	beq.n	8008ab4 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d00c      	beq.n	8008a32 <HAL_RCC_ClockConfig+0x19a>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d008      	beq.n	8008a32 <HAL_RCC_ClockConfig+0x19a>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d004      	beq.n	8008a32 <HAL_RCC_ClockConfig+0x19a>
 8008a28:	f240 3109 	movw	r1, #777	@ 0x309
 8008a2c:	482d      	ldr	r0, [pc, #180]	@ (8008ae4 <HAL_RCC_ClockConfig+0x24c>)
 8008a2e:	f7fd ffbd 	bl	80069ac <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d107      	bne.n	8008a4a <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a3a:	4b2c      	ldr	r3, [pc, #176]	@ (8008aec <HAL_RCC_ClockConfig+0x254>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d115      	bne.n	8008a72 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	e0bf      	b.n	8008bca <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d107      	bne.n	8008a62 <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a52:	4b26      	ldr	r3, [pc, #152]	@ (8008aec <HAL_RCC_ClockConfig+0x254>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d109      	bne.n	8008a72 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e0b3      	b.n	8008bca <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a62:	4b22      	ldr	r3, [pc, #136]	@ (8008aec <HAL_RCC_ClockConfig+0x254>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 0302 	and.w	r3, r3, #2
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d101      	bne.n	8008a72 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e0ab      	b.n	8008bca <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a72:	4b1e      	ldr	r3, [pc, #120]	@ (8008aec <HAL_RCC_ClockConfig+0x254>)
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	f023 0203 	bic.w	r2, r3, #3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	491b      	ldr	r1, [pc, #108]	@ (8008aec <HAL_RCC_ClockConfig+0x254>)
 8008a80:	4313      	orrs	r3, r2
 8008a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a84:	f7fe fcd2 	bl	800742c <HAL_GetTick>
 8008a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a8a:	e00a      	b.n	8008aa2 <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a8c:	f7fe fcce 	bl	800742c <HAL_GetTick>
 8008a90:	4602      	mov	r2, r0
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d901      	bls.n	8008aa2 <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	e093      	b.n	8008bca <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008aa2:	4b12      	ldr	r3, [pc, #72]	@ (8008aec <HAL_RCC_ClockConfig+0x254>)
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	f003 020c 	and.w	r2, r3, #12
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d1eb      	bne.n	8008a8c <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8008ae8 <HAL_RCC_ClockConfig+0x250>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f003 030f 	and.w	r3, r3, #15
 8008abc:	683a      	ldr	r2, [r7, #0]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d216      	bcs.n	8008af0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ac2:	4b09      	ldr	r3, [pc, #36]	@ (8008ae8 <HAL_RCC_ClockConfig+0x250>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f023 020f 	bic.w	r2, r3, #15
 8008aca:	4907      	ldr	r1, [pc, #28]	@ (8008ae8 <HAL_RCC_ClockConfig+0x250>)
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ad2:	4b05      	ldr	r3, [pc, #20]	@ (8008ae8 <HAL_RCC_ClockConfig+0x250>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 030f 	and.w	r3, r3, #15
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d007      	beq.n	8008af0 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e072      	b.n	8008bca <HAL_RCC_ClockConfig+0x332>
 8008ae4:	080197b0 	.word	0x080197b0
 8008ae8:	40023c00 	.word	0x40023c00
 8008aec:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f003 0304 	and.w	r3, r3, #4
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d025      	beq.n	8008b48 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d018      	beq.n	8008b36 <HAL_RCC_ClockConfig+0x29e>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b0c:	d013      	beq.n	8008b36 <HAL_RCC_ClockConfig+0x29e>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008b16:	d00e      	beq.n	8008b36 <HAL_RCC_ClockConfig+0x29e>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8008b20:	d009      	beq.n	8008b36 <HAL_RCC_ClockConfig+0x29e>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8008b2a:	d004      	beq.n	8008b36 <HAL_RCC_ClockConfig+0x29e>
 8008b2c:	f240 3146 	movw	r1, #838	@ 0x346
 8008b30:	4828      	ldr	r0, [pc, #160]	@ (8008bd4 <HAL_RCC_ClockConfig+0x33c>)
 8008b32:	f7fd ff3b 	bl	80069ac <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b36:	4b28      	ldr	r3, [pc, #160]	@ (8008bd8 <HAL_RCC_ClockConfig+0x340>)
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	4925      	ldr	r1, [pc, #148]	@ (8008bd8 <HAL_RCC_ClockConfig+0x340>)
 8008b44:	4313      	orrs	r3, r2
 8008b46:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f003 0308 	and.w	r3, r3, #8
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d026      	beq.n	8008ba2 <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	691b      	ldr	r3, [r3, #16]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d018      	beq.n	8008b8e <HAL_RCC_ClockConfig+0x2f6>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b64:	d013      	beq.n	8008b8e <HAL_RCC_ClockConfig+0x2f6>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	691b      	ldr	r3, [r3, #16]
 8008b6a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008b6e:	d00e      	beq.n	8008b8e <HAL_RCC_ClockConfig+0x2f6>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8008b78:	d009      	beq.n	8008b8e <HAL_RCC_ClockConfig+0x2f6>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	691b      	ldr	r3, [r3, #16]
 8008b7e:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8008b82:	d004      	beq.n	8008b8e <HAL_RCC_ClockConfig+0x2f6>
 8008b84:	f240 314d 	movw	r1, #845	@ 0x34d
 8008b88:	4812      	ldr	r0, [pc, #72]	@ (8008bd4 <HAL_RCC_ClockConfig+0x33c>)
 8008b8a:	f7fd ff0f 	bl	80069ac <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008b8e:	4b12      	ldr	r3, [pc, #72]	@ (8008bd8 <HAL_RCC_ClockConfig+0x340>)
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	691b      	ldr	r3, [r3, #16]
 8008b9a:	00db      	lsls	r3, r3, #3
 8008b9c:	490e      	ldr	r1, [pc, #56]	@ (8008bd8 <HAL_RCC_ClockConfig+0x340>)
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008ba2:	f000 f821 	bl	8008be8 <HAL_RCC_GetSysClockFreq>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8008bd8 <HAL_RCC_ClockConfig+0x340>)
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	091b      	lsrs	r3, r3, #4
 8008bae:	f003 030f 	and.w	r3, r3, #15
 8008bb2:	490a      	ldr	r1, [pc, #40]	@ (8008bdc <HAL_RCC_ClockConfig+0x344>)
 8008bb4:	5ccb      	ldrb	r3, [r1, r3]
 8008bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8008bba:	4a09      	ldr	r2, [pc, #36]	@ (8008be0 <HAL_RCC_ClockConfig+0x348>)
 8008bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008bbe:	4b09      	ldr	r3, [pc, #36]	@ (8008be4 <HAL_RCC_ClockConfig+0x34c>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7fe fbee 	bl	80073a4 <HAL_InitTick>

  return HAL_OK;
 8008bc8:	2300      	movs	r3, #0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3710      	adds	r7, #16
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	080197b0 	.word	0x080197b0
 8008bd8:	40023800 	.word	0x40023800
 8008bdc:	08019fdc 	.word	0x08019fdc
 8008be0:	2000004c 	.word	0x2000004c
 8008be4:	20000050 	.word	0x20000050

08008be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bec:	b090      	sub	sp, #64	@ 0x40
 8008bee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c00:	4b59      	ldr	r3, [pc, #356]	@ (8008d68 <HAL_RCC_GetSysClockFreq+0x180>)
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	f003 030c 	and.w	r3, r3, #12
 8008c08:	2b08      	cmp	r3, #8
 8008c0a:	d00d      	beq.n	8008c28 <HAL_RCC_GetSysClockFreq+0x40>
 8008c0c:	2b08      	cmp	r3, #8
 8008c0e:	f200 80a1 	bhi.w	8008d54 <HAL_RCC_GetSysClockFreq+0x16c>
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d002      	beq.n	8008c1c <HAL_RCC_GetSysClockFreq+0x34>
 8008c16:	2b04      	cmp	r3, #4
 8008c18:	d003      	beq.n	8008c22 <HAL_RCC_GetSysClockFreq+0x3a>
 8008c1a:	e09b      	b.n	8008d54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008c1c:	4b53      	ldr	r3, [pc, #332]	@ (8008d6c <HAL_RCC_GetSysClockFreq+0x184>)
 8008c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008c20:	e09b      	b.n	8008d5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008c22:	4b53      	ldr	r3, [pc, #332]	@ (8008d70 <HAL_RCC_GetSysClockFreq+0x188>)
 8008c24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008c26:	e098      	b.n	8008d5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008c28:	4b4f      	ldr	r3, [pc, #316]	@ (8008d68 <HAL_RCC_GetSysClockFreq+0x180>)
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c30:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008c32:	4b4d      	ldr	r3, [pc, #308]	@ (8008d68 <HAL_RCC_GetSysClockFreq+0x180>)
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d028      	beq.n	8008c90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c3e:	4b4a      	ldr	r3, [pc, #296]	@ (8008d68 <HAL_RCC_GetSysClockFreq+0x180>)
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	099b      	lsrs	r3, r3, #6
 8008c44:	2200      	movs	r2, #0
 8008c46:	623b      	str	r3, [r7, #32]
 8008c48:	627a      	str	r2, [r7, #36]	@ 0x24
 8008c4a:	6a3b      	ldr	r3, [r7, #32]
 8008c4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008c50:	2100      	movs	r1, #0
 8008c52:	4b47      	ldr	r3, [pc, #284]	@ (8008d70 <HAL_RCC_GetSysClockFreq+0x188>)
 8008c54:	fb03 f201 	mul.w	r2, r3, r1
 8008c58:	2300      	movs	r3, #0
 8008c5a:	fb00 f303 	mul.w	r3, r0, r3
 8008c5e:	4413      	add	r3, r2
 8008c60:	4a43      	ldr	r2, [pc, #268]	@ (8008d70 <HAL_RCC_GetSysClockFreq+0x188>)
 8008c62:	fba0 1202 	umull	r1, r2, r0, r2
 8008c66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c68:	460a      	mov	r2, r1
 8008c6a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008c6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c6e:	4413      	add	r3, r2
 8008c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c74:	2200      	movs	r2, #0
 8008c76:	61bb      	str	r3, [r7, #24]
 8008c78:	61fa      	str	r2, [r7, #28]
 8008c7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008c82:	f7f8 f831 	bl	8000ce8 <__aeabi_uldivmod>
 8008c86:	4602      	mov	r2, r0
 8008c88:	460b      	mov	r3, r1
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c8e:	e053      	b.n	8008d38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c90:	4b35      	ldr	r3, [pc, #212]	@ (8008d68 <HAL_RCC_GetSysClockFreq+0x180>)
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	099b      	lsrs	r3, r3, #6
 8008c96:	2200      	movs	r2, #0
 8008c98:	613b      	str	r3, [r7, #16]
 8008c9a:	617a      	str	r2, [r7, #20]
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008ca2:	f04f 0b00 	mov.w	fp, #0
 8008ca6:	4652      	mov	r2, sl
 8008ca8:	465b      	mov	r3, fp
 8008caa:	f04f 0000 	mov.w	r0, #0
 8008cae:	f04f 0100 	mov.w	r1, #0
 8008cb2:	0159      	lsls	r1, r3, #5
 8008cb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008cb8:	0150      	lsls	r0, r2, #5
 8008cba:	4602      	mov	r2, r0
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	ebb2 080a 	subs.w	r8, r2, sl
 8008cc2:	eb63 090b 	sbc.w	r9, r3, fp
 8008cc6:	f04f 0200 	mov.w	r2, #0
 8008cca:	f04f 0300 	mov.w	r3, #0
 8008cce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008cd2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008cd6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008cda:	ebb2 0408 	subs.w	r4, r2, r8
 8008cde:	eb63 0509 	sbc.w	r5, r3, r9
 8008ce2:	f04f 0200 	mov.w	r2, #0
 8008ce6:	f04f 0300 	mov.w	r3, #0
 8008cea:	00eb      	lsls	r3, r5, #3
 8008cec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008cf0:	00e2      	lsls	r2, r4, #3
 8008cf2:	4614      	mov	r4, r2
 8008cf4:	461d      	mov	r5, r3
 8008cf6:	eb14 030a 	adds.w	r3, r4, sl
 8008cfa:	603b      	str	r3, [r7, #0]
 8008cfc:	eb45 030b 	adc.w	r3, r5, fp
 8008d00:	607b      	str	r3, [r7, #4]
 8008d02:	f04f 0200 	mov.w	r2, #0
 8008d06:	f04f 0300 	mov.w	r3, #0
 8008d0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008d0e:	4629      	mov	r1, r5
 8008d10:	028b      	lsls	r3, r1, #10
 8008d12:	4621      	mov	r1, r4
 8008d14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008d18:	4621      	mov	r1, r4
 8008d1a:	028a      	lsls	r2, r1, #10
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d22:	2200      	movs	r2, #0
 8008d24:	60bb      	str	r3, [r7, #8]
 8008d26:	60fa      	str	r2, [r7, #12]
 8008d28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d2c:	f7f7 ffdc 	bl	8000ce8 <__aeabi_uldivmod>
 8008d30:	4602      	mov	r2, r0
 8008d32:	460b      	mov	r3, r1
 8008d34:	4613      	mov	r3, r2
 8008d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008d38:	4b0b      	ldr	r3, [pc, #44]	@ (8008d68 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	0c1b      	lsrs	r3, r3, #16
 8008d3e:	f003 0303 	and.w	r3, r3, #3
 8008d42:	3301      	adds	r3, #1
 8008d44:	005b      	lsls	r3, r3, #1
 8008d46:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008d48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008d52:	e002      	b.n	8008d5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008d54:	4b05      	ldr	r3, [pc, #20]	@ (8008d6c <HAL_RCC_GetSysClockFreq+0x184>)
 8008d56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008d58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3740      	adds	r7, #64	@ 0x40
 8008d60:	46bd      	mov	sp, r7
 8008d62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d66:	bf00      	nop
 8008d68:	40023800 	.word	0x40023800
 8008d6c:	00f42400 	.word	0x00f42400
 8008d70:	017d7840 	.word	0x017d7840

08008d74 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d74:	b480      	push	{r7}
 8008d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d78:	4b03      	ldr	r3, [pc, #12]	@ (8008d88 <HAL_RCC_GetHCLKFreq+0x14>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	2000004c 	.word	0x2000004c

08008d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008d90:	f7ff fff0 	bl	8008d74 <HAL_RCC_GetHCLKFreq>
 8008d94:	4602      	mov	r2, r0
 8008d96:	4b05      	ldr	r3, [pc, #20]	@ (8008dac <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	0a9b      	lsrs	r3, r3, #10
 8008d9c:	f003 0307 	and.w	r3, r3, #7
 8008da0:	4903      	ldr	r1, [pc, #12]	@ (8008db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008da2:	5ccb      	ldrb	r3, [r1, r3]
 8008da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	40023800 	.word	0x40023800
 8008db0:	08019fec 	.word	0x08019fec

08008db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008db8:	f7ff ffdc 	bl	8008d74 <HAL_RCC_GetHCLKFreq>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	4b05      	ldr	r3, [pc, #20]	@ (8008dd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	0b5b      	lsrs	r3, r3, #13
 8008dc4:	f003 0307 	and.w	r3, r3, #7
 8008dc8:	4903      	ldr	r1, [pc, #12]	@ (8008dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008dca:	5ccb      	ldrb	r3, [r1, r3]
 8008dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	40023800 	.word	0x40023800
 8008dd8:	08019fec 	.word	0x08019fec

08008ddc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b088      	sub	sp, #32
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008de4:	2300      	movs	r3, #0
 8008de6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008de8:	2300      	movs	r3, #0
 8008dea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008dec:	2300      	movs	r3, #0
 8008dee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008df0:	2300      	movs	r3, #0
 8008df2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008df4:	2300      	movs	r3, #0
 8008df6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 0301 	and.w	r3, r3, #1
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f040 8089 	bne.w	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f003 0308 	and.w	r3, r3, #8
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	f040 8082 	bne.w	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f003 0310 	and.w	r3, r3, #16
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d17b      	bne.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d175      	bne.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d16f      	bne.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d169      	bne.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d163      	bne.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d15d      	bne.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d157      	bne.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d151      	bne.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d14b      	bne.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d145      	bne.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d13f      	bne.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d139      	bne.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d133      	bne.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d12d      	bne.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d127      	bne.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d121      	bne.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d11b      	bne.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d115      	bne.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d10f      	bne.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d109      	bne.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 0320 	and.w	r3, r3, #32
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d103      	bne.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008f10:	2172      	movs	r1, #114	@ 0x72
 8008f12:	4895      	ldr	r0, [pc, #596]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8008f14:	f7fd fd4a 	bl	80069ac <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f003 0301 	and.w	r3, r3, #1
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d01f      	beq.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d008      	beq.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x162>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f30:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008f34:	d003      	beq.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x162>
 8008f36:	2178      	movs	r1, #120	@ 0x78
 8008f38:	488b      	ldr	r0, [pc, #556]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8008f3a:	f7fd fd37 	bl	80069ac <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008f3e:	4b8b      	ldr	r3, [pc, #556]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	4a8a      	ldr	r2, [pc, #552]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8008f44:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008f48:	6093      	str	r3, [r2, #8]
 8008f4a:	4b88      	ldr	r3, [pc, #544]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8008f4c:	689a      	ldr	r2, [r3, #8]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f52:	4986      	ldr	r1, [pc, #536]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8008f54:	4313      	orrs	r3, r2
 8008f56:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d101      	bne.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 8008f60:	2301      	movs	r3, #1
 8008f62:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d029      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00d      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f80:	d008      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008f8a:	d003      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8008f8c:	2188      	movs	r1, #136	@ 0x88
 8008f8e:	4876      	ldr	r0, [pc, #472]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8008f90:	f7fd fd0c 	bl	80069ac <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008f94:	4b75      	ldr	r3, [pc, #468]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8008f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fa2:	4972      	ldr	r1, [pc, #456]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008fb2:	d101      	bne.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d101      	bne.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d029      	beq.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d00d      	beq.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008fe0:	d008      	beq.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fe6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008fea:	d003      	beq.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008fec:	219c      	movs	r1, #156	@ 0x9c
 8008fee:	485e      	ldr	r0, [pc, #376]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8008ff0:	f7fd fcdc 	bl	80069ac <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008ff4:	4b5d      	ldr	r3, [pc, #372]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8008ff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ffa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009002:	495a      	ldr	r1, [pc, #360]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8009004:	4313      	orrs	r3, r2
 8009006:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800900e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009012:	d101      	bne.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 8009014:	2301      	movs	r3, #1
 8009016:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800901c:	2b00      	cmp	r3, #0
 800901e:	d101      	bne.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 8009020:	2301      	movs	r3, #1
 8009022:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800902c:	2b00      	cmp	r3, #0
 800902e:	d001      	beq.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 8009030:	2301      	movs	r3, #1
 8009032:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 0320 	and.w	r3, r3, #32
 800903c:	2b00      	cmp	r3, #0
 800903e:	f000 8186 	beq.w	800934e <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009046:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800904a:	f000 80e4 	beq.w	8009216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009052:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009056:	f000 80de 	beq.w	8009216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800905e:	4a44      	ldr	r2, [pc, #272]	@ (8009170 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8009060:	4293      	cmp	r3, r2
 8009062:	f000 80d8 	beq.w	8009216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800906a:	4a42      	ldr	r2, [pc, #264]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800906c:	4293      	cmp	r3, r2
 800906e:	f000 80d2 	beq.w	8009216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009076:	4a40      	ldr	r2, [pc, #256]	@ (8009178 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8009078:	4293      	cmp	r3, r2
 800907a:	f000 80cc 	beq.w	8009216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009082:	4a3e      	ldr	r2, [pc, #248]	@ (800917c <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8009084:	4293      	cmp	r3, r2
 8009086:	f000 80c6 	beq.w	8009216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800908e:	4a3c      	ldr	r2, [pc, #240]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8009090:	4293      	cmp	r3, r2
 8009092:	f000 80c0 	beq.w	8009216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800909a:	4a3a      	ldr	r2, [pc, #232]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 800909c:	4293      	cmp	r3, r2
 800909e:	f000 80ba 	beq.w	8009216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090a6:	4a38      	ldr	r2, [pc, #224]	@ (8009188 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	f000 80b4 	beq.w	8009216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090b2:	4a36      	ldr	r2, [pc, #216]	@ (800918c <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	f000 80ae 	beq.w	8009216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090be:	4a34      	ldr	r2, [pc, #208]	@ (8009190 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	f000 80a8 	beq.w	8009216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ca:	4a32      	ldr	r2, [pc, #200]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	f000 80a2 	beq.w	8009216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090d6:	4a30      	ldr	r2, [pc, #192]	@ (8009198 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	f000 809c 	beq.w	8009216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090e2:	4a2e      	ldr	r2, [pc, #184]	@ (800919c <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	f000 8096 	beq.w	8009216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ee:	4a2c      	ldr	r2, [pc, #176]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	f000 8090 	beq.w	8009216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090fa:	4a2a      	ldr	r2, [pc, #168]	@ (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	f000 808a 	beq.w	8009216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009106:	4a28      	ldr	r2, [pc, #160]	@ (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8009108:	4293      	cmp	r3, r2
 800910a:	f000 8084 	beq.w	8009216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009112:	4a26      	ldr	r2, [pc, #152]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d07e      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800911c:	4a24      	ldr	r2, [pc, #144]	@ (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d079      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009126:	4a23      	ldr	r2, [pc, #140]	@ (80091b4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d074      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009130:	4a21      	ldr	r2, [pc, #132]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d06f      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800913a:	4a20      	ldr	r2, [pc, #128]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d06a      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009144:	4a1e      	ldr	r2, [pc, #120]	@ (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d065      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800914e:	4a1d      	ldr	r2, [pc, #116]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d060      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009158:	4a1b      	ldr	r2, [pc, #108]	@ (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d05b      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009162:	4a1a      	ldr	r2, [pc, #104]	@ (80091cc <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8009164:	4293      	cmp	r3, r2
 8009166:	e033      	b.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009168:	080197e8 	.word	0x080197e8
 800916c:	40023800 	.word	0x40023800
 8009170:	00020300 	.word	0x00020300
 8009174:	00030300 	.word	0x00030300
 8009178:	00040300 	.word	0x00040300
 800917c:	00050300 	.word	0x00050300
 8009180:	00060300 	.word	0x00060300
 8009184:	00070300 	.word	0x00070300
 8009188:	00080300 	.word	0x00080300
 800918c:	00090300 	.word	0x00090300
 8009190:	000a0300 	.word	0x000a0300
 8009194:	000b0300 	.word	0x000b0300
 8009198:	000c0300 	.word	0x000c0300
 800919c:	000d0300 	.word	0x000d0300
 80091a0:	000e0300 	.word	0x000e0300
 80091a4:	000f0300 	.word	0x000f0300
 80091a8:	00100300 	.word	0x00100300
 80091ac:	00110300 	.word	0x00110300
 80091b0:	00120300 	.word	0x00120300
 80091b4:	00130300 	.word	0x00130300
 80091b8:	00140300 	.word	0x00140300
 80091bc:	00150300 	.word	0x00150300
 80091c0:	00160300 	.word	0x00160300
 80091c4:	00170300 	.word	0x00170300
 80091c8:	00180300 	.word	0x00180300
 80091cc:	00190300 	.word	0x00190300
 80091d0:	d021      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091d6:	4a4c      	ldr	r2, [pc, #304]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d01c      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091e0:	4a4a      	ldr	r2, [pc, #296]	@ (800930c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d017      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ea:	4a49      	ldr	r2, [pc, #292]	@ (8009310 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d012      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091f4:	4a47      	ldr	r2, [pc, #284]	@ (8009314 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d00d      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091fe:	4a46      	ldr	r2, [pc, #280]	@ (8009318 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d008      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009208:	4a44      	ldr	r2, [pc, #272]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d003      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800920e:	21b7      	movs	r1, #183	@ 0xb7
 8009210:	4843      	ldr	r0, [pc, #268]	@ (8009320 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8009212:	f7fd fbcb 	bl	80069ac <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009216:	4b43      	ldr	r3, [pc, #268]	@ (8009324 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800921a:	4a42      	ldr	r2, [pc, #264]	@ (8009324 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800921c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009220:	6413      	str	r3, [r2, #64]	@ 0x40
 8009222:	4b40      	ldr	r3, [pc, #256]	@ (8009324 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800922a:	60bb      	str	r3, [r7, #8]
 800922c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800922e:	4b3e      	ldr	r3, [pc, #248]	@ (8009328 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a3d      	ldr	r2, [pc, #244]	@ (8009328 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8009234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009238:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800923a:	f7fe f8f7 	bl	800742c <HAL_GetTick>
 800923e:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009240:	e009      	b.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009242:	f7fe f8f3 	bl	800742c <HAL_GetTick>
 8009246:	4602      	mov	r2, r0
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	1ad3      	subs	r3, r2, r3
 800924c:	2b64      	cmp	r3, #100	@ 0x64
 800924e:	d902      	bls.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 8009250:	2303      	movs	r3, #3
 8009252:	f000 bd9f 	b.w	8009d94 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009256:	4b34      	ldr	r3, [pc, #208]	@ (8009328 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800925e:	2b00      	cmp	r3, #0
 8009260:	d0ef      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009262:	4b30      	ldr	r3, [pc, #192]	@ (8009324 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009266:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800926a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d036      	beq.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009276:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800927a:	693a      	ldr	r2, [r7, #16]
 800927c:	429a      	cmp	r2, r3
 800927e:	d02f      	beq.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009280:	4b28      	ldr	r3, [pc, #160]	@ (8009324 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009284:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009288:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800928a:	4b26      	ldr	r3, [pc, #152]	@ (8009324 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800928c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800928e:	4a25      	ldr	r2, [pc, #148]	@ (8009324 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009294:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009296:	4b23      	ldr	r3, [pc, #140]	@ (8009324 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800929a:	4a22      	ldr	r2, [pc, #136]	@ (8009324 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800929c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092a0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80092a2:	4a20      	ldr	r2, [pc, #128]	@ (8009324 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80092a8:	4b1e      	ldr	r3, [pc, #120]	@ (8009324 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80092aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092ac:	f003 0301 	and.w	r3, r3, #1
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d115      	bne.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092b4:	f7fe f8ba 	bl	800742c <HAL_GetTick>
 80092b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092ba:	e00b      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092bc:	f7fe f8b6 	bl	800742c <HAL_GetTick>
 80092c0:	4602      	mov	r2, r0
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	1ad3      	subs	r3, r2, r3
 80092c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d902      	bls.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80092ce:	2303      	movs	r3, #3
 80092d0:	f000 bd60 	b.w	8009d94 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092d4:	4b13      	ldr	r3, [pc, #76]	@ (8009324 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80092d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092d8:	f003 0302 	and.w	r3, r3, #2
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d0ed      	beq.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80092e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80092ec:	d120      	bne.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x554>
 80092ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009324 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80092fa:	4b0c      	ldr	r3, [pc, #48]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80092fc:	400b      	ands	r3, r1
 80092fe:	4909      	ldr	r1, [pc, #36]	@ (8009324 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009300:	4313      	orrs	r3, r2
 8009302:	608b      	str	r3, [r1, #8]
 8009304:	e01a      	b.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x560>
 8009306:	bf00      	nop
 8009308:	001a0300 	.word	0x001a0300
 800930c:	001b0300 	.word	0x001b0300
 8009310:	001c0300 	.word	0x001c0300
 8009314:	001d0300 	.word	0x001d0300
 8009318:	001e0300 	.word	0x001e0300
 800931c:	001f0300 	.word	0x001f0300
 8009320:	080197e8 	.word	0x080197e8
 8009324:	40023800 	.word	0x40023800
 8009328:	40007000 	.word	0x40007000
 800932c:	0ffffcff 	.word	0x0ffffcff
 8009330:	4b9a      	ldr	r3, [pc, #616]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	4a99      	ldr	r2, [pc, #612]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009336:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800933a:	6093      	str	r3, [r2, #8]
 800933c:	4b97      	ldr	r3, [pc, #604]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800933e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009348:	4994      	ldr	r1, [pc, #592]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800934a:	4313      	orrs	r3, r2
 800934c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f003 0310 	and.w	r3, r3, #16
 8009356:	2b00      	cmp	r3, #0
 8009358:	d01d      	beq.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800935e:	2b00      	cmp	r3, #0
 8009360:	d008      	beq.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009366:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800936a:	d003      	beq.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800936c:	21f1      	movs	r1, #241	@ 0xf1
 800936e:	488c      	ldr	r0, [pc, #560]	@ (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8009370:	f7fd fb1c 	bl	80069ac <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009374:	4b89      	ldr	r3, [pc, #548]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009376:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800937a:	4a88      	ldr	r2, [pc, #544]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800937c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009380:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8009384:	4b85      	ldr	r3, [pc, #532]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009386:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800938e:	4983      	ldr	r1, [pc, #524]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009390:	4313      	orrs	r3, r2
 8009392:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d01c      	beq.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00d      	beq.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093b2:	d008      	beq.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093bc:	d003      	beq.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 80093be:	21fb      	movs	r1, #251	@ 0xfb
 80093c0:	4877      	ldr	r0, [pc, #476]	@ (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80093c2:	f7fd faf3 	bl	80069ac <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80093c6:	4b75      	ldr	r3, [pc, #468]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80093c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093d4:	4971      	ldr	r1, [pc, #452]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80093d6:	4313      	orrs	r3, r2
 80093d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d01d      	beq.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00e      	beq.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x632>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80093f8:	d009      	beq.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x632>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093fe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009402:	d004      	beq.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x632>
 8009404:	f240 1105 	movw	r1, #261	@ 0x105
 8009408:	4865      	ldr	r0, [pc, #404]	@ (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800940a:	f7fd facf 	bl	80069ac <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800940e:	4b63      	ldr	r3, [pc, #396]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009414:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800941c:	495f      	ldr	r1, [pc, #380]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800941e:	4313      	orrs	r3, r2
 8009420:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800942c:	2b00      	cmp	r3, #0
 800942e:	d01d      	beq.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009434:	2b00      	cmp	r3, #0
 8009436:	d00e      	beq.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800943c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009440:	d009      	beq.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009446:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800944a:	d004      	beq.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 800944c:	f240 110f 	movw	r1, #271	@ 0x10f
 8009450:	4853      	ldr	r0, [pc, #332]	@ (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8009452:	f7fd faab 	bl	80069ac <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009456:	4b51      	ldr	r3, [pc, #324]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800945c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009464:	494d      	ldr	r1, [pc, #308]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009466:	4313      	orrs	r3, r2
 8009468:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009474:	2b00      	cmp	r3, #0
 8009476:	d01d      	beq.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00e      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009484:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009488:	d009      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800948e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009492:	d004      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8009494:	f240 1119 	movw	r1, #281	@ 0x119
 8009498:	4841      	ldr	r0, [pc, #260]	@ (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800949a:	f7fd fa87 	bl	80069ac <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800949e:	4b3f      	ldr	r3, [pc, #252]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80094a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094a4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094ac:	493b      	ldr	r1, [pc, #236]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80094ae:	4313      	orrs	r3, r2
 80094b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d01f      	beq.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d010      	beq.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x70e>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d00c      	beq.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x70e>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094d4:	2b03      	cmp	r3, #3
 80094d6:	d008      	beq.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x70e>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094dc:	2b02      	cmp	r3, #2
 80094de:	d004      	beq.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x70e>
 80094e0:	f240 1123 	movw	r1, #291	@ 0x123
 80094e4:	482e      	ldr	r0, [pc, #184]	@ (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80094e6:	f7fd fa61 	bl	80069ac <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80094ea:	4b2c      	ldr	r3, [pc, #176]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80094ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094f0:	f023 0203 	bic.w	r2, r3, #3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094f8:	4928      	ldr	r1, [pc, #160]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80094fa:	4313      	orrs	r3, r2
 80094fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009508:	2b00      	cmp	r3, #0
 800950a:	d01f      	beq.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009510:	2b00      	cmp	r3, #0
 8009512:	d010      	beq.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009518:	2b04      	cmp	r3, #4
 800951a:	d00c      	beq.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009520:	2b0c      	cmp	r3, #12
 8009522:	d008      	beq.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009528:	2b08      	cmp	r3, #8
 800952a:	d004      	beq.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 800952c:	f240 112d 	movw	r1, #301	@ 0x12d
 8009530:	481b      	ldr	r0, [pc, #108]	@ (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8009532:	f7fd fa3b 	bl	80069ac <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009536:	4b19      	ldr	r3, [pc, #100]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800953c:	f023 020c 	bic.w	r2, r3, #12
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009544:	4915      	ldr	r1, [pc, #84]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009546:	4313      	orrs	r3, r2
 8009548:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009554:	2b00      	cmp	r3, #0
 8009556:	d025      	beq.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800955c:	2b00      	cmp	r3, #0
 800955e:	d010      	beq.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009564:	2b10      	cmp	r3, #16
 8009566:	d00c      	beq.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800956c:	2b30      	cmp	r3, #48	@ 0x30
 800956e:	d008      	beq.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009574:	2b20      	cmp	r3, #32
 8009576:	d004      	beq.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8009578:	f240 1137 	movw	r1, #311	@ 0x137
 800957c:	4808      	ldr	r0, [pc, #32]	@ (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800957e:	f7fd fa15 	bl	80069ac <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009582:	4b06      	ldr	r3, [pc, #24]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009588:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009590:	4902      	ldr	r1, [pc, #8]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009592:	4313      	orrs	r3, r2
 8009594:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009598:	e004      	b.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 800959a:	bf00      	nop
 800959c:	40023800 	.word	0x40023800
 80095a0:	080197e8 	.word	0x080197e8
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d01f      	beq.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d010      	beq.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095bc:	2b40      	cmp	r3, #64	@ 0x40
 80095be:	d00c      	beq.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095c4:	2bc0      	cmp	r3, #192	@ 0xc0
 80095c6:	d008      	beq.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095cc:	2b80      	cmp	r3, #128	@ 0x80
 80095ce:	d004      	beq.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 80095d0:	f240 1141 	movw	r1, #321	@ 0x141
 80095d4:	48a0      	ldr	r0, [pc, #640]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80095d6:	f7fd f9e9 	bl	80069ac <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80095da:	4ba0      	ldr	r3, [pc, #640]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80095dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095e0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095e8:	499c      	ldr	r1, [pc, #624]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80095ea:	4313      	orrs	r3, r2
 80095ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d022      	beq.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009600:	2b00      	cmp	r3, #0
 8009602:	d013      	beq.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x850>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009608:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800960c:	d00e      	beq.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x850>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009612:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009616:	d009      	beq.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x850>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800961c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009620:	d004      	beq.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x850>
 8009622:	f240 114b 	movw	r1, #331	@ 0x14b
 8009626:	488c      	ldr	r0, [pc, #560]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8009628:	f7fd f9c0 	bl	80069ac <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800962c:	4b8b      	ldr	r3, [pc, #556]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800962e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009632:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800963a:	4988      	ldr	r1, [pc, #544]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800963c:	4313      	orrs	r3, r2
 800963e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800964a:	2b00      	cmp	r3, #0
 800964c:	d022      	beq.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009652:	2b00      	cmp	r3, #0
 8009654:	d013      	beq.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800965a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800965e:	d00e      	beq.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009664:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009668:	d009      	beq.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800966e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009672:	d004      	beq.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8009674:	f240 1155 	movw	r1, #341	@ 0x155
 8009678:	4877      	ldr	r0, [pc, #476]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800967a:	f7fd f997 	bl	80069ac <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800967e:	4b77      	ldr	r3, [pc, #476]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8009680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009684:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800968c:	4973      	ldr	r1, [pc, #460]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800968e:	4313      	orrs	r3, r2
 8009690:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800969c:	2b00      	cmp	r3, #0
 800969e:	d022      	beq.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d013      	beq.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80096ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096b0:	d00e      	beq.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80096b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80096ba:	d009      	beq.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80096c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096c4:	d004      	beq.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80096c6:	f240 115f 	movw	r1, #351	@ 0x15f
 80096ca:	4863      	ldr	r0, [pc, #396]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80096cc:	f7fd f96e 	bl	80069ac <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80096d0:	4b62      	ldr	r3, [pc, #392]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80096d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096d6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80096de:	495f      	ldr	r1, [pc, #380]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80096e0:	4313      	orrs	r3, r2
 80096e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d022      	beq.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d013      	beq.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x946>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009702:	d00e      	beq.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009708:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800970c:	d009      	beq.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x946>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009712:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009716:	d004      	beq.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8009718:	f240 1169 	movw	r1, #361	@ 0x169
 800971c:	484e      	ldr	r0, [pc, #312]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800971e:	f7fd f945 	bl	80069ac <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009722:	4b4e      	ldr	r3, [pc, #312]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8009724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009728:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009730:	494a      	ldr	r1, [pc, #296]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8009732:	4313      	orrs	r3, r2
 8009734:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009740:	2b00      	cmp	r3, #0
 8009742:	d018      	beq.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009748:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800974c:	d008      	beq.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009752:	2b00      	cmp	r3, #0
 8009754:	d004      	beq.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8009756:	f240 1173 	movw	r1, #371	@ 0x173
 800975a:	483f      	ldr	r0, [pc, #252]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800975c:	f7fd f926 	bl	80069ac <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009760:	4b3e      	ldr	r3, [pc, #248]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8009762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009766:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800976e:	493b      	ldr	r1, [pc, #236]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8009770:	4313      	orrs	r3, r2
 8009772:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800977e:	2b00      	cmp	r3, #0
 8009780:	d01f      	beq.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009786:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800978a:	d008      	beq.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009790:	2b00      	cmp	r3, #0
 8009792:	d004      	beq.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8009794:	f240 117d 	movw	r1, #381	@ 0x17d
 8009798:	482f      	ldr	r0, [pc, #188]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800979a:	f7fd f907 	bl	80069ac <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800979e:	4b2f      	ldr	r3, [pc, #188]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80097a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097a4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097ac:	492b      	ldr	r1, [pc, #172]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80097ae:	4313      	orrs	r3, r2
 80097b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097bc:	d101      	bne.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 80097be:	2301      	movs	r3, #1
 80097c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f003 0308 	and.w	r3, r3, #8
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d001      	beq.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 80097ce:	2301      	movs	r3, #1
 80097d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d022      	beq.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d013      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80097ee:	d00e      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80097f8:	d009      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009802:	d004      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8009804:	f240 1195 	movw	r1, #405	@ 0x195
 8009808:	4813      	ldr	r0, [pc, #76]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800980a:	f7fd f8cf 	bl	80069ac <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800980e:	4b13      	ldr	r3, [pc, #76]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8009810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009814:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800981c:	490f      	ldr	r1, [pc, #60]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800981e:	4313      	orrs	r3, r2
 8009820:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800982c:	2b00      	cmp	r3, #0
 800982e:	d020      	beq.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009836:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800983a:	d009      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009842:	2b00      	cmp	r3, #0
 8009844:	d004      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009846:	f240 119f 	movw	r1, #415	@ 0x19f
 800984a:	4803      	ldr	r0, [pc, #12]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800984c:	f7fd f8ae 	bl	80069ac <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009850:	4b02      	ldr	r3, [pc, #8]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8009852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009856:	e003      	b.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0xa84>
 8009858:	080197e8 	.word	0x080197e8
 800985c:	40023800 	.word	0x40023800
 8009860:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800986a:	4910      	ldr	r1, [pc, #64]	@ (80098ac <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 800986c:	4313      	orrs	r3, r2
 800986e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	2b01      	cmp	r3, #1
 8009876:	d006      	beq.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009880:	2b00      	cmp	r3, #0
 8009882:	f000 8155 	beq.w	8009b30 <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009886:	4b09      	ldr	r3, [pc, #36]	@ (80098ac <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a08      	ldr	r2, [pc, #32]	@ (80098ac <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 800988c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009890:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009892:	f7fd fdcb 	bl	800742c <HAL_GetTick>
 8009896:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009898:	e00a      	b.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800989a:	f7fd fdc7 	bl	800742c <HAL_GetTick>
 800989e:	4602      	mov	r2, r0
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	1ad3      	subs	r3, r2, r3
 80098a4:	2b64      	cmp	r3, #100	@ 0x64
 80098a6:	d903      	bls.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80098a8:	2303      	movs	r3, #3
 80098aa:	e273      	b.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 80098ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80098b0:	4b9a      	ldr	r3, [pc, #616]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d1ee      	bne.n	800989a <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	2b31      	cmp	r3, #49	@ 0x31
 80098c2:	d904      	bls.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 80098cc:	d904      	bls.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 80098ce:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 80098d2:	4893      	ldr	r0, [pc, #588]	@ (8009b20 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80098d4:	f7fd f86a 	bl	80069ac <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f003 0301 	and.w	r3, r3, #1
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d02e      	beq.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0xb66>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d12a      	bne.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d903      	bls.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0xb20>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	689b      	ldr	r3, [r3, #8]
 80098f8:	2b07      	cmp	r3, #7
 80098fa:	d904      	bls.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80098fc:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8009900:	4887      	ldr	r0, [pc, #540]	@ (8009b20 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8009902:	f7fd f853 	bl	80069ac <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009906:	4b85      	ldr	r3, [pc, #532]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8009908:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800990c:	0c1b      	lsrs	r3, r3, #16
 800990e:	f003 0303 	and.w	r3, r3, #3
 8009912:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009914:	4b81      	ldr	r3, [pc, #516]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8009916:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800991a:	0e1b      	lsrs	r3, r3, #24
 800991c:	f003 030f 	and.w	r3, r3, #15
 8009920:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	019a      	lsls	r2, r3, #6
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	041b      	lsls	r3, r3, #16
 800992c:	431a      	orrs	r2, r3
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	061b      	lsls	r3, r3, #24
 8009932:	431a      	orrs	r2, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	071b      	lsls	r3, r3, #28
 800993a:	4978      	ldr	r1, [pc, #480]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800993c:	4313      	orrs	r3, r2
 800993e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800994a:	2b00      	cmp	r3, #0
 800994c:	d004      	beq.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009952:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009956:	d00a      	beq.n	800996e <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009960:	2b00      	cmp	r3, #0
 8009962:	d048      	beq.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009968:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800996c:	d143      	bne.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	68db      	ldr	r3, [r3, #12]
 8009972:	2b01      	cmp	r3, #1
 8009974:	d903      	bls.n	800997e <HAL_RCCEx_PeriphCLKConfig+0xba2>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	2b0f      	cmp	r3, #15
 800997c:	d904      	bls.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800997e:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 8009982:	4867      	ldr	r0, [pc, #412]	@ (8009b20 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8009984:	f7fd f812 	bl	80069ac <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800998c:	2b00      	cmp	r3, #0
 800998e:	d003      	beq.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009994:	2b20      	cmp	r3, #32
 8009996:	d904      	bls.n	80099a2 <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 8009998:	f44f 71f9 	mov.w	r1, #498	@ 0x1f2
 800999c:	4860      	ldr	r0, [pc, #384]	@ (8009b20 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800999e:	f7fd f805 	bl	80069ac <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80099a2:	4b5e      	ldr	r3, [pc, #376]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80099a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099a8:	0c1b      	lsrs	r3, r3, #16
 80099aa:	f003 0303 	and.w	r3, r3, #3
 80099ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80099b0:	4b5a      	ldr	r3, [pc, #360]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80099b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099b6:	0f1b      	lsrs	r3, r3, #28
 80099b8:	f003 0307 	and.w	r3, r3, #7
 80099bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	019a      	lsls	r2, r3, #6
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	041b      	lsls	r3, r3, #16
 80099c8:	431a      	orrs	r2, r3
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	061b      	lsls	r3, r3, #24
 80099d0:	431a      	orrs	r2, r3
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	071b      	lsls	r3, r3, #28
 80099d6:	4951      	ldr	r1, [pc, #324]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80099d8:	4313      	orrs	r3, r2
 80099da:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80099de:	4b4f      	ldr	r3, [pc, #316]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80099e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099e4:	f023 021f 	bic.w	r2, r3, #31
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ec:	3b01      	subs	r3, #1
 80099ee:	494b      	ldr	r1, [pc, #300]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80099f0:	4313      	orrs	r3, r2
 80099f2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d032      	beq.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d010      	beq.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d00c      	beq.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	691b      	ldr	r3, [r3, #16]
 8009a16:	2b02      	cmp	r3, #2
 8009a18:	d008      	beq.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	691b      	ldr	r3, [r3, #16]
 8009a1e:	2b03      	cmp	r3, #3
 8009a20:	d004      	beq.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8009a22:	f240 2105 	movw	r1, #517	@ 0x205
 8009a26:	483e      	ldr	r0, [pc, #248]	@ (8009b20 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8009a28:	f7fc ffc0 	bl	80069ac <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009a2c:	4b3b      	ldr	r3, [pc, #236]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8009a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a32:	0e1b      	lsrs	r3, r3, #24
 8009a34:	f003 030f 	and.w	r3, r3, #15
 8009a38:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009a3a:	4b38      	ldr	r3, [pc, #224]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8009a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a40:	0f1b      	lsrs	r3, r3, #28
 8009a42:	f003 0307 	and.w	r3, r3, #7
 8009a46:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	019a      	lsls	r2, r3, #6
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	691b      	ldr	r3, [r3, #16]
 8009a52:	041b      	lsls	r3, r3, #16
 8009a54:	431a      	orrs	r2, r3
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	061b      	lsls	r3, r3, #24
 8009a5a:	431a      	orrs	r2, r3
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	071b      	lsls	r3, r3, #28
 8009a60:	492e      	ldr	r1, [pc, #184]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8009a62:	4313      	orrs	r3, r2
 8009a64:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d040      	beq.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	691b      	ldr	r3, [r3, #16]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d010      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d00c      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	d008      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	2b03      	cmp	r3, #3
 8009a92:	d004      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8009a94:	f44f 7105 	mov.w	r1, #532	@ 0x214
 8009a98:	4821      	ldr	r0, [pc, #132]	@ (8009b20 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8009a9a:	f7fc ff87 	bl	80069ac <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d903      	bls.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	2b07      	cmp	r3, #7
 8009aac:	d904      	bls.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8009aae:	f240 2115 	movw	r1, #533	@ 0x215
 8009ab2:	481b      	ldr	r0, [pc, #108]	@ (8009b20 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8009ab4:	f7fc ff7a 	bl	80069ac <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d903      	bls.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	2b0f      	cmp	r3, #15
 8009ac6:	d904      	bls.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 8009ac8:	f240 2116 	movw	r1, #534	@ 0x216
 8009acc:	4814      	ldr	r0, [pc, #80]	@ (8009b20 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8009ace:	f7fc ff6d 	bl	80069ac <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	019a      	lsls	r2, r3, #6
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	691b      	ldr	r3, [r3, #16]
 8009adc:	041b      	lsls	r3, r3, #16
 8009ade:	431a      	orrs	r2, r3
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	061b      	lsls	r3, r3, #24
 8009ae6:	431a      	orrs	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	071b      	lsls	r3, r3, #28
 8009aee:	490b      	ldr	r1, [pc, #44]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8009af0:	4313      	orrs	r3, r2
 8009af2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009af6:	4b09      	ldr	r3, [pc, #36]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a08      	ldr	r2, [pc, #32]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8009afc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009b00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b02:	f7fd fc93 	bl	800742c <HAL_GetTick>
 8009b06:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009b08:	e00c      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009b0a:	f7fd fc8f 	bl	800742c <HAL_GetTick>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	1ad3      	subs	r3, r2, r3
 8009b14:	2b64      	cmp	r3, #100	@ 0x64
 8009b16:	d905      	bls.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009b18:	2303      	movs	r3, #3
 8009b1a:	e13b      	b.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8009b1c:	40023800 	.word	0x40023800
 8009b20:	080197e8 	.word	0x080197e8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009b24:	4b9d      	ldr	r3, [pc, #628]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d0ec      	beq.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	f040 812d 	bne.w	8009d92 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009b38:	4b98      	ldr	r3, [pc, #608]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a97      	ldr	r2, [pc, #604]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009b3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b44:	f7fd fc72 	bl	800742c <HAL_GetTick>
 8009b48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009b4a:	e008      	b.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009b4c:	f7fd fc6e 	bl	800742c <HAL_GetTick>
 8009b50:	4602      	mov	r2, r0
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	1ad3      	subs	r3, r2, r3
 8009b56:	2b64      	cmp	r3, #100	@ 0x64
 8009b58:	d901      	bls.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009b5a:	2303      	movs	r3, #3
 8009b5c:	e11a      	b.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009b5e:	4b8f      	ldr	r3, [pc, #572]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b6a:	d0ef      	beq.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	695b      	ldr	r3, [r3, #20]
 8009b70:	2b31      	cmp	r3, #49	@ 0x31
 8009b72:	d904      	bls.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0xda2>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	695b      	ldr	r3, [r3, #20]
 8009b78:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8009b7c:	d904      	bls.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8009b7e:	f44f 7111 	mov.w	r1, #580	@ 0x244
 8009b82:	4887      	ldr	r0, [pc, #540]	@ (8009da0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8009b84:	f7fc ff12 	bl	80069ac <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d003      	beq.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d009      	beq.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d048      	beq.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d144      	bne.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	699b      	ldr	r3, [r3, #24]
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d903      	bls.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0xde4>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	699b      	ldr	r3, [r3, #24]
 8009bbc:	2b0f      	cmp	r3, #15
 8009bbe:	d904      	bls.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0xdee>
 8009bc0:	f240 214b 	movw	r1, #587	@ 0x24b
 8009bc4:	4876      	ldr	r0, [pc, #472]	@ (8009da0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8009bc6:	f7fc fef1 	bl	80069ac <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d003      	beq.n	8009bda <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bd6:	2b20      	cmp	r3, #32
 8009bd8:	d904      	bls.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8009bda:	f240 214d 	movw	r1, #589	@ 0x24d
 8009bde:	4870      	ldr	r0, [pc, #448]	@ (8009da0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8009be0:	f7fc fee4 	bl	80069ac <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009be4:	4b6d      	ldr	r3, [pc, #436]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bea:	0c1b      	lsrs	r3, r3, #16
 8009bec:	f003 0303 	and.w	r3, r3, #3
 8009bf0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009bf2:	4b6a      	ldr	r3, [pc, #424]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bf8:	0f1b      	lsrs	r3, r3, #28
 8009bfa:	f003 0307 	and.w	r3, r3, #7
 8009bfe:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	695b      	ldr	r3, [r3, #20]
 8009c04:	019a      	lsls	r2, r3, #6
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	041b      	lsls	r3, r3, #16
 8009c0a:	431a      	orrs	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	699b      	ldr	r3, [r3, #24]
 8009c10:	061b      	lsls	r3, r3, #24
 8009c12:	431a      	orrs	r2, r3
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	071b      	lsls	r3, r3, #28
 8009c18:	4960      	ldr	r1, [pc, #384]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009c20:	4b5e      	ldr	r3, [pc, #376]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009c22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c26:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c2e:	3b01      	subs	r3, #1
 8009c30:	021b      	lsls	r3, r3, #8
 8009c32:	495a      	ldr	r1, [pc, #360]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009c34:	4313      	orrs	r3, r2
 8009c36:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d037      	beq.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0xeda>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c4e:	d132      	bne.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6a1b      	ldr	r3, [r3, #32]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d010      	beq.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6a1b      	ldr	r3, [r3, #32]
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d00c      	beq.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6a1b      	ldr	r3, [r3, #32]
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d008      	beq.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6a1b      	ldr	r3, [r3, #32]
 8009c6c:	2b03      	cmp	r3, #3
 8009c6e:	d004      	beq.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8009c70:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8009c74:	484a      	ldr	r0, [pc, #296]	@ (8009da0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8009c76:	f7fc fe99 	bl	80069ac <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009c7a:	4b48      	ldr	r3, [pc, #288]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c80:	0e1b      	lsrs	r3, r3, #24
 8009c82:	f003 030f 	and.w	r3, r3, #15
 8009c86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009c88:	4b44      	ldr	r3, [pc, #272]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c8e:	0f1b      	lsrs	r3, r3, #28
 8009c90:	f003 0307 	and.w	r3, r3, #7
 8009c94:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	695b      	ldr	r3, [r3, #20]
 8009c9a:	019a      	lsls	r2, r3, #6
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6a1b      	ldr	r3, [r3, #32]
 8009ca0:	041b      	lsls	r3, r3, #16
 8009ca2:	431a      	orrs	r2, r3
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	061b      	lsls	r3, r3, #24
 8009ca8:	431a      	orrs	r2, r3
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	071b      	lsls	r3, r3, #28
 8009cae:	493b      	ldr	r1, [pc, #236]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f003 0308 	and.w	r3, r3, #8
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d04d      	beq.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	69db      	ldr	r3, [r3, #28]
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d903      	bls.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0xef6>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	69db      	ldr	r3, [r3, #28]
 8009cce:	2b07      	cmp	r3, #7
 8009cd0:	d904      	bls.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0xf00>
 8009cd2:	f240 216f 	movw	r1, #623	@ 0x26f
 8009cd6:	4832      	ldr	r0, [pc, #200]	@ (8009da0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8009cd8:	f7fc fe68 	bl	80069ac <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d013      	beq.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cec:	d00e      	beq.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cf2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009cf6:	d009      	beq.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cfc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009d00:	d004      	beq.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8009d02:	f44f 711c 	mov.w	r1, #624	@ 0x270
 8009d06:	4826      	ldr	r0, [pc, #152]	@ (8009da0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8009d08:	f7fc fe50 	bl	80069ac <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009d0c:	4b23      	ldr	r3, [pc, #140]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d12:	0e1b      	lsrs	r3, r3, #24
 8009d14:	f003 030f 	and.w	r3, r3, #15
 8009d18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009d1a:	4b20      	ldr	r3, [pc, #128]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d20:	0c1b      	lsrs	r3, r3, #16
 8009d22:	f003 0303 	and.w	r3, r3, #3
 8009d26:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	695b      	ldr	r3, [r3, #20]
 8009d2c:	019a      	lsls	r2, r3, #6
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	041b      	lsls	r3, r3, #16
 8009d32:	431a      	orrs	r2, r3
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	061b      	lsls	r3, r3, #24
 8009d38:	431a      	orrs	r2, r3
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	69db      	ldr	r3, [r3, #28]
 8009d3e:	071b      	lsls	r3, r3, #28
 8009d40:	4916      	ldr	r1, [pc, #88]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009d42:	4313      	orrs	r3, r2
 8009d44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009d48:	4b14      	ldr	r3, [pc, #80]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009d4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d4e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d56:	4911      	ldr	r1, [pc, #68]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a0e      	ldr	r2, [pc, #56]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d6a:	f7fd fb5f 	bl	800742c <HAL_GetTick>
 8009d6e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009d70:	e008      	b.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009d72:	f7fd fb5b 	bl	800742c <HAL_GetTick>
 8009d76:	4602      	mov	r2, r0
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	1ad3      	subs	r3, r2, r3
 8009d7c:	2b64      	cmp	r3, #100	@ 0x64
 8009d7e:	d901      	bls.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009d80:	2303      	movs	r3, #3
 8009d82:	e007      	b.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009d84:	4b05      	ldr	r3, [pc, #20]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d90:	d1ef      	bne.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 8009d92:	2300      	movs	r3, #0
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3720      	adds	r7, #32
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	40023800 	.word	0x40023800
 8009da0:	080197e8 	.word	0x080197e8

08009da4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d101      	bne.n	8009db6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	e1fb      	b.n	800a1ae <HAL_SPI_Init+0x40a>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a83      	ldr	r2, [pc, #524]	@ (8009fc8 <HAL_SPI_Init+0x224>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d01d      	beq.n	8009dfc <HAL_SPI_Init+0x58>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a81      	ldr	r2, [pc, #516]	@ (8009fcc <HAL_SPI_Init+0x228>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d018      	beq.n	8009dfc <HAL_SPI_Init+0x58>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4a80      	ldr	r2, [pc, #512]	@ (8009fd0 <HAL_SPI_Init+0x22c>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d013      	beq.n	8009dfc <HAL_SPI_Init+0x58>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a7e      	ldr	r2, [pc, #504]	@ (8009fd4 <HAL_SPI_Init+0x230>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d00e      	beq.n	8009dfc <HAL_SPI_Init+0x58>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4a7d      	ldr	r2, [pc, #500]	@ (8009fd8 <HAL_SPI_Init+0x234>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d009      	beq.n	8009dfc <HAL_SPI_Init+0x58>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a7b      	ldr	r2, [pc, #492]	@ (8009fdc <HAL_SPI_Init+0x238>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d004      	beq.n	8009dfc <HAL_SPI_Init+0x58>
 8009df2:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 8009df6:	487a      	ldr	r0, [pc, #488]	@ (8009fe0 <HAL_SPI_Init+0x23c>)
 8009df8:	f7fc fdd8 	bl	80069ac <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d009      	beq.n	8009e18 <HAL_SPI_Init+0x74>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009e0c:	d004      	beq.n	8009e18 <HAL_SPI_Init+0x74>
 8009e0e:	f240 1147 	movw	r1, #327	@ 0x147
 8009e12:	4873      	ldr	r0, [pc, #460]	@ (8009fe0 <HAL_SPI_Init+0x23c>)
 8009e14:	f7fc fdca 	bl	80069ac <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d00e      	beq.n	8009e3e <HAL_SPI_Init+0x9a>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e28:	d009      	beq.n	8009e3e <HAL_SPI_Init+0x9a>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e32:	d004      	beq.n	8009e3e <HAL_SPI_Init+0x9a>
 8009e34:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8009e38:	4869      	ldr	r0, [pc, #420]	@ (8009fe0 <HAL_SPI_Init+0x23c>)
 8009e3a:	f7fc fdb7 	bl	80069ac <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009e46:	d040      	beq.n	8009eca <HAL_SPI_Init+0x126>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	68db      	ldr	r3, [r3, #12]
 8009e4c:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8009e50:	d03b      	beq.n	8009eca <HAL_SPI_Init+0x126>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 8009e5a:	d036      	beq.n	8009eca <HAL_SPI_Init+0x126>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009e64:	d031      	beq.n	8009eca <HAL_SPI_Init+0x126>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	68db      	ldr	r3, [r3, #12]
 8009e6a:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8009e6e:	d02c      	beq.n	8009eca <HAL_SPI_Init+0x126>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009e78:	d027      	beq.n	8009eca <HAL_SPI_Init+0x126>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 8009e82:	d022      	beq.n	8009eca <HAL_SPI_Init+0x126>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e8c:	d01d      	beq.n	8009eca <HAL_SPI_Init+0x126>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	68db      	ldr	r3, [r3, #12]
 8009e92:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009e96:	d018      	beq.n	8009eca <HAL_SPI_Init+0x126>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009ea0:	d013      	beq.n	8009eca <HAL_SPI_Init+0x126>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009eaa:	d00e      	beq.n	8009eca <HAL_SPI_Init+0x126>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009eb4:	d009      	beq.n	8009eca <HAL_SPI_Init+0x126>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ebe:	d004      	beq.n	8009eca <HAL_SPI_Init+0x126>
 8009ec0:	f240 1149 	movw	r1, #329	@ 0x149
 8009ec4:	4846      	ldr	r0, [pc, #280]	@ (8009fe0 <HAL_SPI_Init+0x23c>)
 8009ec6:	f7fc fd71 	bl	80069ac <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	699b      	ldr	r3, [r3, #24]
 8009ece:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ed2:	d00d      	beq.n	8009ef0 <HAL_SPI_Init+0x14c>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	699b      	ldr	r3, [r3, #24]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d009      	beq.n	8009ef0 <HAL_SPI_Init+0x14c>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	699b      	ldr	r3, [r3, #24]
 8009ee0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009ee4:	d004      	beq.n	8009ef0 <HAL_SPI_Init+0x14c>
 8009ee6:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8009eea:	483d      	ldr	r0, [pc, #244]	@ (8009fe0 <HAL_SPI_Init+0x23c>)
 8009eec:	f7fc fd5e 	bl	80069ac <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ef4:	2b08      	cmp	r3, #8
 8009ef6:	d008      	beq.n	8009f0a <HAL_SPI_Init+0x166>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d004      	beq.n	8009f0a <HAL_SPI_Init+0x166>
 8009f00:	f240 114b 	movw	r1, #331	@ 0x14b
 8009f04:	4836      	ldr	r0, [pc, #216]	@ (8009fe0 <HAL_SPI_Init+0x23c>)
 8009f06:	f7fc fd51 	bl	80069ac <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	69db      	ldr	r3, [r3, #28]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d020      	beq.n	8009f54 <HAL_SPI_Init+0x1b0>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	69db      	ldr	r3, [r3, #28]
 8009f16:	2b08      	cmp	r3, #8
 8009f18:	d01c      	beq.n	8009f54 <HAL_SPI_Init+0x1b0>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	69db      	ldr	r3, [r3, #28]
 8009f1e:	2b10      	cmp	r3, #16
 8009f20:	d018      	beq.n	8009f54 <HAL_SPI_Init+0x1b0>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	69db      	ldr	r3, [r3, #28]
 8009f26:	2b18      	cmp	r3, #24
 8009f28:	d014      	beq.n	8009f54 <HAL_SPI_Init+0x1b0>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	69db      	ldr	r3, [r3, #28]
 8009f2e:	2b20      	cmp	r3, #32
 8009f30:	d010      	beq.n	8009f54 <HAL_SPI_Init+0x1b0>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	69db      	ldr	r3, [r3, #28]
 8009f36:	2b28      	cmp	r3, #40	@ 0x28
 8009f38:	d00c      	beq.n	8009f54 <HAL_SPI_Init+0x1b0>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	69db      	ldr	r3, [r3, #28]
 8009f3e:	2b30      	cmp	r3, #48	@ 0x30
 8009f40:	d008      	beq.n	8009f54 <HAL_SPI_Init+0x1b0>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	69db      	ldr	r3, [r3, #28]
 8009f46:	2b38      	cmp	r3, #56	@ 0x38
 8009f48:	d004      	beq.n	8009f54 <HAL_SPI_Init+0x1b0>
 8009f4a:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8009f4e:	4824      	ldr	r0, [pc, #144]	@ (8009fe0 <HAL_SPI_Init+0x23c>)
 8009f50:	f7fc fd2c 	bl	80069ac <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6a1b      	ldr	r3, [r3, #32]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d008      	beq.n	8009f6e <HAL_SPI_Init+0x1ca>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6a1b      	ldr	r3, [r3, #32]
 8009f60:	2b80      	cmp	r3, #128	@ 0x80
 8009f62:	d004      	beq.n	8009f6e <HAL_SPI_Init+0x1ca>
 8009f64:	f240 114d 	movw	r1, #333	@ 0x14d
 8009f68:	481d      	ldr	r0, [pc, #116]	@ (8009fe0 <HAL_SPI_Init+0x23c>)
 8009f6a:	f7fc fd1f 	bl	80069ac <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d008      	beq.n	8009f88 <HAL_SPI_Init+0x1e4>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f7a:	2b10      	cmp	r3, #16
 8009f7c:	d004      	beq.n	8009f88 <HAL_SPI_Init+0x1e4>
 8009f7e:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 8009f82:	4817      	ldr	r0, [pc, #92]	@ (8009fe0 <HAL_SPI_Init+0x23c>)
 8009f84:	f7fc fd12 	bl	80069ac <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d158      	bne.n	800a042 <HAL_SPI_Init+0x29e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	691b      	ldr	r3, [r3, #16]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d008      	beq.n	8009faa <HAL_SPI_Init+0x206>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	691b      	ldr	r3, [r3, #16]
 8009f9c:	2b02      	cmp	r3, #2
 8009f9e:	d004      	beq.n	8009faa <HAL_SPI_Init+0x206>
 8009fa0:	f240 1151 	movw	r1, #337	@ 0x151
 8009fa4:	480e      	ldr	r0, [pc, #56]	@ (8009fe0 <HAL_SPI_Init+0x23c>)
 8009fa6:	f7fc fd01 	bl	80069ac <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	695b      	ldr	r3, [r3, #20]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d018      	beq.n	8009fe4 <HAL_SPI_Init+0x240>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	695b      	ldr	r3, [r3, #20]
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d014      	beq.n	8009fe4 <HAL_SPI_Init+0x240>
 8009fba:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8009fbe:	4808      	ldr	r0, [pc, #32]	@ (8009fe0 <HAL_SPI_Init+0x23c>)
 8009fc0:	f7fc fcf4 	bl	80069ac <assert_failed>
 8009fc4:	e00e      	b.n	8009fe4 <HAL_SPI_Init+0x240>
 8009fc6:	bf00      	nop
 8009fc8:	40013000 	.word	0x40013000
 8009fcc:	40003800 	.word	0x40003800
 8009fd0:	40003c00 	.word	0x40003c00
 8009fd4:	40013400 	.word	0x40013400
 8009fd8:	40015000 	.word	0x40015000
 8009fdc:	40015400 	.word	0x40015400
 8009fe0:	08019824 	.word	0x08019824

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009fec:	d125      	bne.n	800a03a <HAL_SPI_Init+0x296>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	69db      	ldr	r3, [r3, #28]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d050      	beq.n	800a098 <HAL_SPI_Init+0x2f4>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	69db      	ldr	r3, [r3, #28]
 8009ffa:	2b08      	cmp	r3, #8
 8009ffc:	d04c      	beq.n	800a098 <HAL_SPI_Init+0x2f4>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	69db      	ldr	r3, [r3, #28]
 800a002:	2b10      	cmp	r3, #16
 800a004:	d048      	beq.n	800a098 <HAL_SPI_Init+0x2f4>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	69db      	ldr	r3, [r3, #28]
 800a00a:	2b18      	cmp	r3, #24
 800a00c:	d044      	beq.n	800a098 <HAL_SPI_Init+0x2f4>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	69db      	ldr	r3, [r3, #28]
 800a012:	2b20      	cmp	r3, #32
 800a014:	d040      	beq.n	800a098 <HAL_SPI_Init+0x2f4>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	69db      	ldr	r3, [r3, #28]
 800a01a:	2b28      	cmp	r3, #40	@ 0x28
 800a01c:	d03c      	beq.n	800a098 <HAL_SPI_Init+0x2f4>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	69db      	ldr	r3, [r3, #28]
 800a022:	2b30      	cmp	r3, #48	@ 0x30
 800a024:	d038      	beq.n	800a098 <HAL_SPI_Init+0x2f4>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	69db      	ldr	r3, [r3, #28]
 800a02a:	2b38      	cmp	r3, #56	@ 0x38
 800a02c:	d034      	beq.n	800a098 <HAL_SPI_Init+0x2f4>
 800a02e:	f44f 71ab 	mov.w	r1, #342	@ 0x156
 800a032:	4861      	ldr	r0, [pc, #388]	@ (800a1b8 <HAL_SPI_Init+0x414>)
 800a034:	f7fc fcba 	bl	80069ac <assert_failed>
 800a038:	e02e      	b.n	800a098 <HAL_SPI_Init+0x2f4>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	61da      	str	r2, [r3, #28]
 800a040:	e02a      	b.n	800a098 <HAL_SPI_Init+0x2f4>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	69db      	ldr	r3, [r3, #28]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d020      	beq.n	800a08c <HAL_SPI_Init+0x2e8>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	69db      	ldr	r3, [r3, #28]
 800a04e:	2b08      	cmp	r3, #8
 800a050:	d01c      	beq.n	800a08c <HAL_SPI_Init+0x2e8>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	69db      	ldr	r3, [r3, #28]
 800a056:	2b10      	cmp	r3, #16
 800a058:	d018      	beq.n	800a08c <HAL_SPI_Init+0x2e8>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	69db      	ldr	r3, [r3, #28]
 800a05e:	2b18      	cmp	r3, #24
 800a060:	d014      	beq.n	800a08c <HAL_SPI_Init+0x2e8>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	69db      	ldr	r3, [r3, #28]
 800a066:	2b20      	cmp	r3, #32
 800a068:	d010      	beq.n	800a08c <HAL_SPI_Init+0x2e8>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	69db      	ldr	r3, [r3, #28]
 800a06e:	2b28      	cmp	r3, #40	@ 0x28
 800a070:	d00c      	beq.n	800a08c <HAL_SPI_Init+0x2e8>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	69db      	ldr	r3, [r3, #28]
 800a076:	2b30      	cmp	r3, #48	@ 0x30
 800a078:	d008      	beq.n	800a08c <HAL_SPI_Init+0x2e8>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	69db      	ldr	r3, [r3, #28]
 800a07e:	2b38      	cmp	r3, #56	@ 0x38
 800a080:	d004      	beq.n	800a08c <HAL_SPI_Init+0x2e8>
 800a082:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 800a086:	484c      	ldr	r0, [pc, #304]	@ (800a1b8 <HAL_SPI_Init+0x414>)
 800a088:	f7fc fc90 	bl	80069ac <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a0a4:	b2db      	uxtb	r3, r3
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d106      	bne.n	800a0b8 <HAL_SPI_Init+0x314>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f7fc ff8e 	bl	8006fd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2202      	movs	r2, #2
 800a0bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a0ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a0d8:	d902      	bls.n	800a0e0 <HAL_SPI_Init+0x33c>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	60fb      	str	r3, [r7, #12]
 800a0de:	e002      	b.n	800a0e6 <HAL_SPI_Init+0x342>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a0e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a0e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800a0ee:	d007      	beq.n	800a100 <HAL_SPI_Init+0x35c>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a0f8:	d002      	beq.n	800a100 <HAL_SPI_Init+0x35c>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a110:	431a      	orrs	r2, r3
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	691b      	ldr	r3, [r3, #16]
 800a116:	f003 0302 	and.w	r3, r3, #2
 800a11a:	431a      	orrs	r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	695b      	ldr	r3, [r3, #20]
 800a120:	f003 0301 	and.w	r3, r3, #1
 800a124:	431a      	orrs	r2, r3
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	699b      	ldr	r3, [r3, #24]
 800a12a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a12e:	431a      	orrs	r2, r3
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	69db      	ldr	r3, [r3, #28]
 800a134:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a138:	431a      	orrs	r2, r3
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6a1b      	ldr	r3, [r3, #32]
 800a13e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a142:	ea42 0103 	orr.w	r1, r2, r3
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a14a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	430a      	orrs	r2, r1
 800a154:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	699b      	ldr	r3, [r3, #24]
 800a15a:	0c1b      	lsrs	r3, r3, #16
 800a15c:	f003 0204 	and.w	r2, r3, #4
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a164:	f003 0310 	and.w	r3, r3, #16
 800a168:	431a      	orrs	r2, r3
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a16e:	f003 0308 	and.w	r3, r3, #8
 800a172:	431a      	orrs	r2, r3
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a17c:	ea42 0103 	orr.w	r1, r2, r3
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	430a      	orrs	r2, r1
 800a18c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	69da      	ldr	r2, [r3, #28]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a19c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3710      	adds	r7, #16
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	08019824 	.word	0x08019824

0800a1bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b08a      	sub	sp, #40	@ 0x28
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	607a      	str	r2, [r7, #4]
 800a1c8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d004      	beq.n	800a1e6 <HAL_SPI_TransmitReceive+0x2a>
 800a1dc:	f240 41fe 	movw	r1, #1278	@ 0x4fe
 800a1e0:	4888      	ldr	r0, [pc, #544]	@ (800a404 <HAL_SPI_TransmitReceive+0x248>)
 800a1e2:	f7fc fbe3 	bl	80069ac <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d101      	bne.n	800a1f4 <HAL_SPI_TransmitReceive+0x38>
 800a1f0:	2302      	movs	r3, #2
 800a1f2:	e20d      	b.n	800a610 <HAL_SPI_TransmitReceive+0x454>
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a1fc:	f7fd f916 	bl	800742c <HAL_GetTick>
 800a200:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a208:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a210:	887b      	ldrh	r3, [r7, #2]
 800a212:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a214:	887b      	ldrh	r3, [r7, #2]
 800a216:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a218:	7efb      	ldrb	r3, [r7, #27]
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d00e      	beq.n	800a23c <HAL_SPI_TransmitReceive+0x80>
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a224:	d106      	bne.n	800a234 <HAL_SPI_TransmitReceive+0x78>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d102      	bne.n	800a234 <HAL_SPI_TransmitReceive+0x78>
 800a22e:	7efb      	ldrb	r3, [r7, #27]
 800a230:	2b04      	cmp	r3, #4
 800a232:	d003      	beq.n	800a23c <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 800a234:	2302      	movs	r3, #2
 800a236:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800a23a:	e1e3      	b.n	800a604 <HAL_SPI_TransmitReceive+0x448>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d005      	beq.n	800a24e <HAL_SPI_TransmitReceive+0x92>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d002      	beq.n	800a24e <HAL_SPI_TransmitReceive+0x92>
 800a248:	887b      	ldrh	r3, [r7, #2]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d103      	bne.n	800a256 <HAL_SPI_TransmitReceive+0x9a>
  {
    errorcode = HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800a254:	e1d6      	b.n	800a604 <HAL_SPI_TransmitReceive+0x448>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	2b04      	cmp	r3, #4
 800a260:	d003      	beq.n	800a26a <HAL_SPI_TransmitReceive+0xae>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2205      	movs	r2, #5
 800a266:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2200      	movs	r2, #0
 800a26e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	887a      	ldrh	r2, [r7, #2]
 800a27a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	887a      	ldrh	r2, [r7, #2]
 800a282:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	68ba      	ldr	r2, [r7, #8]
 800a28a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	887a      	ldrh	r2, [r7, #2]
 800a290:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	887a      	ldrh	r2, [r7, #2]
 800a296:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2200      	movs	r2, #0
 800a29c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a2ac:	d802      	bhi.n	800a2b4 <HAL_SPI_TransmitReceive+0xf8>
 800a2ae:	8a3b      	ldrh	r3, [r7, #16]
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d908      	bls.n	800a2c6 <HAL_SPI_TransmitReceive+0x10a>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	685a      	ldr	r2, [r3, #4]
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a2c2:	605a      	str	r2, [r3, #4]
 800a2c4:	e007      	b.n	800a2d6 <HAL_SPI_TransmitReceive+0x11a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	685a      	ldr	r2, [r3, #4]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a2d4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2e0:	2b40      	cmp	r3, #64	@ 0x40
 800a2e2:	d007      	beq.n	800a2f4 <HAL_SPI_TransmitReceive+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a2f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a2fc:	f240 8084 	bls.w	800a408 <HAL_SPI_TransmitReceive+0x24c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d002      	beq.n	800a30e <HAL_SPI_TransmitReceive+0x152>
 800a308:	8a7b      	ldrh	r3, [r7, #18]
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	d16d      	bne.n	800a3ea <HAL_SPI_TransmitReceive+0x22e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a312:	881a      	ldrh	r2, [r3, #0]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a31e:	1c9a      	adds	r2, r3, #2
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a328:	b29b      	uxth	r3, r3
 800a32a:	3b01      	subs	r3, #1
 800a32c:	b29a      	uxth	r2, r3
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a332:	e05a      	b.n	800a3ea <HAL_SPI_TransmitReceive+0x22e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	f003 0302 	and.w	r3, r3, #2
 800a33e:	2b02      	cmp	r3, #2
 800a340:	d11b      	bne.n	800a37a <HAL_SPI_TransmitReceive+0x1be>
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a346:	b29b      	uxth	r3, r3
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d016      	beq.n	800a37a <HAL_SPI_TransmitReceive+0x1be>
 800a34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d113      	bne.n	800a37a <HAL_SPI_TransmitReceive+0x1be>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a356:	881a      	ldrh	r2, [r3, #0]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a362:	1c9a      	adds	r2, r3, #2
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	3b01      	subs	r3, #1
 800a370:	b29a      	uxth	r2, r3
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a376:	2300      	movs	r3, #0
 800a378:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	689b      	ldr	r3, [r3, #8]
 800a380:	f003 0301 	and.w	r3, r3, #1
 800a384:	2b01      	cmp	r3, #1
 800a386:	d11c      	bne.n	800a3c2 <HAL_SPI_TransmitReceive+0x206>
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a38e:	b29b      	uxth	r3, r3
 800a390:	2b00      	cmp	r3, #0
 800a392:	d016      	beq.n	800a3c2 <HAL_SPI_TransmitReceive+0x206>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	68da      	ldr	r2, [r3, #12]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a39e:	b292      	uxth	r2, r2
 800a3a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3a6:	1c9a      	adds	r2, r3, #2
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	3b01      	subs	r3, #1
 800a3b6:	b29a      	uxth	r2, r3
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a3c2:	f7fd f833 	bl	800742c <HAL_GetTick>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	69fb      	ldr	r3, [r7, #28]
 800a3ca:	1ad3      	subs	r3, r2, r3
 800a3cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d80b      	bhi.n	800a3ea <HAL_SPI_TransmitReceive+0x22e>
 800a3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3d8:	d007      	beq.n	800a3ea <HAL_SPI_TransmitReceive+0x22e>
      {
        errorcode = HAL_TIMEOUT;
 800a3da:	2303      	movs	r3, #3
 800a3dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800a3e8:	e10c      	b.n	800a604 <HAL_SPI_TransmitReceive+0x448>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d19f      	bne.n	800a334 <HAL_SPI_TransmitReceive+0x178>
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d199      	bne.n	800a334 <HAL_SPI_TransmitReceive+0x178>
 800a400:	e0e6      	b.n	800a5d0 <HAL_SPI_TransmitReceive+0x414>
 800a402:	bf00      	nop
 800a404:	08019824 	.word	0x08019824
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d003      	beq.n	800a418 <HAL_SPI_TransmitReceive+0x25c>
 800a410:	8a7b      	ldrh	r3, [r7, #18]
 800a412:	2b01      	cmp	r3, #1
 800a414:	f040 80cf 	bne.w	800a5b6 <HAL_SPI_TransmitReceive+0x3fa>
    {
      if (hspi->TxXferCount > 1U)
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d912      	bls.n	800a448 <HAL_SPI_TransmitReceive+0x28c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a426:	881a      	ldrh	r2, [r3, #0]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a432:	1c9a      	adds	r2, r3, #2
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	3b02      	subs	r3, #2
 800a440:	b29a      	uxth	r2, r3
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a446:	e0b6      	b.n	800a5b6 <HAL_SPI_TransmitReceive+0x3fa>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	330c      	adds	r3, #12
 800a452:	7812      	ldrb	r2, [r2, #0]
 800a454:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a45a:	1c5a      	adds	r2, r3, #1
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a464:	b29b      	uxth	r3, r3
 800a466:	3b01      	subs	r3, #1
 800a468:	b29a      	uxth	r2, r3
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a46e:	e0a2      	b.n	800a5b6 <HAL_SPI_TransmitReceive+0x3fa>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	f003 0302 	and.w	r3, r3, #2
 800a47a:	2b02      	cmp	r3, #2
 800a47c:	d134      	bne.n	800a4e8 <HAL_SPI_TransmitReceive+0x32c>
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a482:	b29b      	uxth	r3, r3
 800a484:	2b00      	cmp	r3, #0
 800a486:	d02f      	beq.n	800a4e8 <HAL_SPI_TransmitReceive+0x32c>
 800a488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d12c      	bne.n	800a4e8 <HAL_SPI_TransmitReceive+0x32c>
      {
        if (hspi->TxXferCount > 1U)
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a492:	b29b      	uxth	r3, r3
 800a494:	2b01      	cmp	r3, #1
 800a496:	d912      	bls.n	800a4be <HAL_SPI_TransmitReceive+0x302>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a49c:	881a      	ldrh	r2, [r3, #0]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4a8:	1c9a      	adds	r2, r3, #2
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	3b02      	subs	r3, #2
 800a4b6:	b29a      	uxth	r2, r3
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a4bc:	e012      	b.n	800a4e4 <HAL_SPI_TransmitReceive+0x328>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	330c      	adds	r3, #12
 800a4c8:	7812      	ldrb	r2, [r2, #0]
 800a4ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4d0:	1c5a      	adds	r2, r3, #1
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	b29a      	uxth	r2, r3
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	689b      	ldr	r3, [r3, #8]
 800a4ee:	f003 0301 	and.w	r3, r3, #1
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d148      	bne.n	800a588 <HAL_SPI_TransmitReceive+0x3cc>
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d042      	beq.n	800a588 <HAL_SPI_TransmitReceive+0x3cc>
      {
        if (hspi->RxXferCount > 1U)
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a508:	b29b      	uxth	r3, r3
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d923      	bls.n	800a556 <HAL_SPI_TransmitReceive+0x39a>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	68da      	ldr	r2, [r3, #12]
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a518:	b292      	uxth	r2, r2
 800a51a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a520:	1c9a      	adds	r2, r3, #2
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	3b02      	subs	r3, #2
 800a530:	b29a      	uxth	r2, r3
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a53e:	b29b      	uxth	r3, r3
 800a540:	2b01      	cmp	r3, #1
 800a542:	d81f      	bhi.n	800a584 <HAL_SPI_TransmitReceive+0x3c8>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	685a      	ldr	r2, [r3, #4]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a552:	605a      	str	r2, [r3, #4]
 800a554:	e016      	b.n	800a584 <HAL_SPI_TransmitReceive+0x3c8>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f103 020c 	add.w	r2, r3, #12
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a562:	7812      	ldrb	r2, [r2, #0]
 800a564:	b2d2      	uxtb	r2, r2
 800a566:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a56c:	1c5a      	adds	r2, r3, #1
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a578:	b29b      	uxth	r3, r3
 800a57a:	3b01      	subs	r3, #1
 800a57c:	b29a      	uxth	r2, r3
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a584:	2301      	movs	r3, #1
 800a586:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a588:	f7fc ff50 	bl	800742c <HAL_GetTick>
 800a58c:	4602      	mov	r2, r0
 800a58e:	69fb      	ldr	r3, [r7, #28]
 800a590:	1ad3      	subs	r3, r2, r3
 800a592:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a594:	429a      	cmp	r2, r3
 800a596:	d803      	bhi.n	800a5a0 <HAL_SPI_TransmitReceive+0x3e4>
 800a598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a59a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a59e:	d102      	bne.n	800a5a6 <HAL_SPI_TransmitReceive+0x3ea>
 800a5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d107      	bne.n	800a5b6 <HAL_SPI_TransmitReceive+0x3fa>
      {
        errorcode = HAL_TIMEOUT;
 800a5a6:	2303      	movs	r3, #3
 800a5a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800a5b4:	e026      	b.n	800a604 <HAL_SPI_TransmitReceive+0x448>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	f47f af57 	bne.w	800a470 <HAL_SPI_TransmitReceive+0x2b4>
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	f47f af50 	bne.w	800a470 <HAL_SPI_TransmitReceive+0x2b4>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a5d0:	69fa      	ldr	r2, [r7, #28]
 800a5d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a5d4:	68f8      	ldr	r0, [r7, #12]
 800a5d6:	f000 fa5d 	bl	800aa94 <SPI_EndRxTxTransaction>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d005      	beq.n	800a5ec <HAL_SPI_TransmitReceive+0x430>
  {
    errorcode = HAL_ERROR;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2220      	movs	r2, #32
 800a5ea:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d003      	beq.n	800a5fc <HAL_SPI_TransmitReceive+0x440>
  {
    errorcode = HAL_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a5fa:	e003      	b.n	800a604 <HAL_SPI_TransmitReceive+0x448>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2201      	movs	r2, #1
 800a600:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2200      	movs	r2, #0
 800a608:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800a60c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800a610:	4618      	mov	r0, r3
 800a612:	3728      	adds	r7, #40	@ 0x28
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b088      	sub	sp, #32
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a630:	69bb      	ldr	r3, [r7, #24]
 800a632:	099b      	lsrs	r3, r3, #6
 800a634:	f003 0301 	and.w	r3, r3, #1
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d10f      	bne.n	800a65c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a63c:	69bb      	ldr	r3, [r7, #24]
 800a63e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00a      	beq.n	800a65c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a646:	69fb      	ldr	r3, [r7, #28]
 800a648:	099b      	lsrs	r3, r3, #6
 800a64a:	f003 0301 	and.w	r3, r3, #1
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d004      	beq.n	800a65c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	4798      	blx	r3
    return;
 800a65a:	e0d7      	b.n	800a80c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a65c:	69bb      	ldr	r3, [r7, #24]
 800a65e:	085b      	lsrs	r3, r3, #1
 800a660:	f003 0301 	and.w	r3, r3, #1
 800a664:	2b00      	cmp	r3, #0
 800a666:	d00a      	beq.n	800a67e <HAL_SPI_IRQHandler+0x66>
 800a668:	69fb      	ldr	r3, [r7, #28]
 800a66a:	09db      	lsrs	r3, r3, #7
 800a66c:	f003 0301 	and.w	r3, r3, #1
 800a670:	2b00      	cmp	r3, #0
 800a672:	d004      	beq.n	800a67e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	4798      	blx	r3
    return;
 800a67c:	e0c6      	b.n	800a80c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a67e:	69bb      	ldr	r3, [r7, #24]
 800a680:	095b      	lsrs	r3, r3, #5
 800a682:	f003 0301 	and.w	r3, r3, #1
 800a686:	2b00      	cmp	r3, #0
 800a688:	d10c      	bne.n	800a6a4 <HAL_SPI_IRQHandler+0x8c>
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	099b      	lsrs	r3, r3, #6
 800a68e:	f003 0301 	and.w	r3, r3, #1
 800a692:	2b00      	cmp	r3, #0
 800a694:	d106      	bne.n	800a6a4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a696:	69bb      	ldr	r3, [r7, #24]
 800a698:	0a1b      	lsrs	r3, r3, #8
 800a69a:	f003 0301 	and.w	r3, r3, #1
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	f000 80b4 	beq.w	800a80c <HAL_SPI_IRQHandler+0x1f4>
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	095b      	lsrs	r3, r3, #5
 800a6a8:	f003 0301 	and.w	r3, r3, #1
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	f000 80ad 	beq.w	800a80c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a6b2:	69bb      	ldr	r3, [r7, #24]
 800a6b4:	099b      	lsrs	r3, r3, #6
 800a6b6:	f003 0301 	and.w	r3, r3, #1
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d023      	beq.n	800a706 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	2b03      	cmp	r3, #3
 800a6c8:	d011      	beq.n	800a6ee <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a6ce:	f043 0204 	orr.w	r2, r3, #4
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	617b      	str	r3, [r7, #20]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	617b      	str	r3, [r7, #20]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	617b      	str	r3, [r7, #20]
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	e00b      	b.n	800a706 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	613b      	str	r3, [r7, #16]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	613b      	str	r3, [r7, #16]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	613b      	str	r3, [r7, #16]
 800a702:	693b      	ldr	r3, [r7, #16]
        return;
 800a704:	e082      	b.n	800a80c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	095b      	lsrs	r3, r3, #5
 800a70a:	f003 0301 	and.w	r3, r3, #1
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d014      	beq.n	800a73c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a716:	f043 0201 	orr.w	r2, r3, #1
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a71e:	2300      	movs	r3, #0
 800a720:	60fb      	str	r3, [r7, #12]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	60fb      	str	r3, [r7, #12]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a738:	601a      	str	r2, [r3, #0]
 800a73a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a73c:	69bb      	ldr	r3, [r7, #24]
 800a73e:	0a1b      	lsrs	r3, r3, #8
 800a740:	f003 0301 	and.w	r3, r3, #1
 800a744:	2b00      	cmp	r3, #0
 800a746:	d00c      	beq.n	800a762 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a74c:	f043 0208 	orr.w	r2, r3, #8
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a754:	2300      	movs	r3, #0
 800a756:	60bb      	str	r3, [r7, #8]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	689b      	ldr	r3, [r3, #8]
 800a75e:	60bb      	str	r3, [r7, #8]
 800a760:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a766:	2b00      	cmp	r3, #0
 800a768:	d04f      	beq.n	800a80a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	685a      	ldr	r2, [r3, #4]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a778:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2201      	movs	r2, #1
 800a77e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a782:	69fb      	ldr	r3, [r7, #28]
 800a784:	f003 0302 	and.w	r3, r3, #2
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d104      	bne.n	800a796 <HAL_SPI_IRQHandler+0x17e>
 800a78c:	69fb      	ldr	r3, [r7, #28]
 800a78e:	f003 0301 	and.w	r3, r3, #1
 800a792:	2b00      	cmp	r3, #0
 800a794:	d034      	beq.n	800a800 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	685a      	ldr	r2, [r3, #4]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f022 0203 	bic.w	r2, r2, #3
 800a7a4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d011      	beq.n	800a7d2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7b2:	4a18      	ldr	r2, [pc, #96]	@ (800a814 <HAL_SPI_IRQHandler+0x1fc>)
 800a7b4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7fd f934 	bl	8007a28 <HAL_DMA_Abort_IT>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d005      	beq.n	800a7d2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d016      	beq.n	800a808 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7de:	4a0d      	ldr	r2, [pc, #52]	@ (800a814 <HAL_SPI_IRQHandler+0x1fc>)
 800a7e0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7fd f91e 	bl	8007a28 <HAL_DMA_Abort_IT>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d00a      	beq.n	800a808 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800a7fe:	e003      	b.n	800a808 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 f809 	bl	800a818 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a806:	e000      	b.n	800a80a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800a808:	bf00      	nop
    return;
 800a80a:	bf00      	nop
  }
}
 800a80c:	3720      	adds	r7, #32
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	0800a82d 	.word	0x0800a82d

0800a818 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a820:	bf00      	nop
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a838:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2200      	movs	r2, #0
 800a83e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2200      	movs	r2, #0
 800a846:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a848:	68f8      	ldr	r0, [r7, #12]
 800a84a:	f7ff ffe5 	bl	800a818 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a84e:	bf00      	nop
 800a850:	3710      	adds	r7, #16
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
	...

0800a858 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b088      	sub	sp, #32
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	603b      	str	r3, [r7, #0]
 800a864:	4613      	mov	r3, r2
 800a866:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a868:	f7fc fde0 	bl	800742c <HAL_GetTick>
 800a86c:	4602      	mov	r2, r0
 800a86e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a870:	1a9b      	subs	r3, r3, r2
 800a872:	683a      	ldr	r2, [r7, #0]
 800a874:	4413      	add	r3, r2
 800a876:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a878:	f7fc fdd8 	bl	800742c <HAL_GetTick>
 800a87c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a87e:	4b39      	ldr	r3, [pc, #228]	@ (800a964 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	015b      	lsls	r3, r3, #5
 800a884:	0d1b      	lsrs	r3, r3, #20
 800a886:	69fa      	ldr	r2, [r7, #28]
 800a888:	fb02 f303 	mul.w	r3, r2, r3
 800a88c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a88e:	e054      	b.n	800a93a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a896:	d050      	beq.n	800a93a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a898:	f7fc fdc8 	bl	800742c <HAL_GetTick>
 800a89c:	4602      	mov	r2, r0
 800a89e:	69bb      	ldr	r3, [r7, #24]
 800a8a0:	1ad3      	subs	r3, r2, r3
 800a8a2:	69fa      	ldr	r2, [r7, #28]
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d902      	bls.n	800a8ae <SPI_WaitFlagStateUntilTimeout+0x56>
 800a8a8:	69fb      	ldr	r3, [r7, #28]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d13d      	bne.n	800a92a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	685a      	ldr	r2, [r3, #4]
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a8bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a8c6:	d111      	bne.n	800a8ec <SPI_WaitFlagStateUntilTimeout+0x94>
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a8d0:	d004      	beq.n	800a8dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a8da:	d107      	bne.n	800a8ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a8ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8f4:	d10f      	bne.n	800a916 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a904:	601a      	str	r2, [r3, #0]
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	681a      	ldr	r2, [r3, #0]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a914:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2201      	movs	r2, #1
 800a91a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2200      	movs	r2, #0
 800a922:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a926:	2303      	movs	r3, #3
 800a928:	e017      	b.n	800a95a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d101      	bne.n	800a934 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a930:	2300      	movs	r3, #0
 800a932:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	3b01      	subs	r3, #1
 800a938:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	689a      	ldr	r2, [r3, #8]
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	4013      	ands	r3, r2
 800a944:	68ba      	ldr	r2, [r7, #8]
 800a946:	429a      	cmp	r2, r3
 800a948:	bf0c      	ite	eq
 800a94a:	2301      	moveq	r3, #1
 800a94c:	2300      	movne	r3, #0
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	461a      	mov	r2, r3
 800a952:	79fb      	ldrb	r3, [r7, #7]
 800a954:	429a      	cmp	r2, r3
 800a956:	d19b      	bne.n	800a890 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a958:	2300      	movs	r3, #0
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3720      	adds	r7, #32
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	2000004c 	.word	0x2000004c

0800a968 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b08a      	sub	sp, #40	@ 0x28
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	60b9      	str	r1, [r7, #8]
 800a972:	607a      	str	r2, [r7, #4]
 800a974:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a976:	2300      	movs	r3, #0
 800a978:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a97a:	f7fc fd57 	bl	800742c <HAL_GetTick>
 800a97e:	4602      	mov	r2, r0
 800a980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a982:	1a9b      	subs	r3, r3, r2
 800a984:	683a      	ldr	r2, [r7, #0]
 800a986:	4413      	add	r3, r2
 800a988:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a98a:	f7fc fd4f 	bl	800742c <HAL_GetTick>
 800a98e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	330c      	adds	r3, #12
 800a996:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a998:	4b3d      	ldr	r3, [pc, #244]	@ (800aa90 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	4613      	mov	r3, r2
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	4413      	add	r3, r2
 800a9a2:	00da      	lsls	r2, r3, #3
 800a9a4:	1ad3      	subs	r3, r2, r3
 800a9a6:	0d1b      	lsrs	r3, r3, #20
 800a9a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9aa:	fb02 f303 	mul.w	r3, r2, r3
 800a9ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a9b0:	e060      	b.n	800aa74 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a9b8:	d107      	bne.n	800a9ca <SPI_WaitFifoStateUntilTimeout+0x62>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d104      	bne.n	800a9ca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a9c0:	69fb      	ldr	r3, [r7, #28]
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	b2db      	uxtb	r3, r3
 800a9c6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a9c8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d0:	d050      	beq.n	800aa74 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a9d2:	f7fc fd2b 	bl	800742c <HAL_GetTick>
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	6a3b      	ldr	r3, [r7, #32]
 800a9da:	1ad3      	subs	r3, r2, r3
 800a9dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d902      	bls.n	800a9e8 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d13d      	bne.n	800aa64 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	685a      	ldr	r2, [r3, #4]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a9f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aa00:	d111      	bne.n	800aa26 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	689b      	ldr	r3, [r3, #8]
 800aa06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa0a:	d004      	beq.n	800aa16 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	689b      	ldr	r3, [r3, #8]
 800aa10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa14:	d107      	bne.n	800aa26 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aa24:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa2e:	d10f      	bne.n	800aa50 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800aa3e:	601a      	str	r2, [r3, #0]
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800aa4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800aa60:	2303      	movs	r3, #3
 800aa62:	e010      	b.n	800aa86 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d101      	bne.n	800aa6e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800aa6e:	69bb      	ldr	r3, [r7, #24]
 800aa70:	3b01      	subs	r3, #1
 800aa72:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	689a      	ldr	r2, [r3, #8]
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	4013      	ands	r3, r2
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d196      	bne.n	800a9b2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800aa84:	2300      	movs	r3, #0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3728      	adds	r7, #40	@ 0x28
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	2000004c 	.word	0x2000004c

0800aa94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b088      	sub	sp, #32
 800aa98:	af02      	add	r7, sp, #8
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	60b9      	str	r1, [r7, #8]
 800aa9e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	9300      	str	r3, [sp, #0]
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	f7ff ff5b 	bl	800a968 <SPI_WaitFifoStateUntilTimeout>
 800aab2:	4603      	mov	r3, r0
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d007      	beq.n	800aac8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aabc:	f043 0220 	orr.w	r2, r3, #32
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800aac4:	2303      	movs	r3, #3
 800aac6:	e046      	b.n	800ab56 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800aac8:	4b25      	ldr	r3, [pc, #148]	@ (800ab60 <SPI_EndRxTxTransaction+0xcc>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4a25      	ldr	r2, [pc, #148]	@ (800ab64 <SPI_EndRxTxTransaction+0xd0>)
 800aace:	fba2 2303 	umull	r2, r3, r2, r3
 800aad2:	0d5b      	lsrs	r3, r3, #21
 800aad4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800aad8:	fb02 f303 	mul.w	r3, r2, r3
 800aadc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aae6:	d112      	bne.n	800ab0e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	9300      	str	r3, [sp, #0]
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	2180      	movs	r1, #128	@ 0x80
 800aaf2:	68f8      	ldr	r0, [r7, #12]
 800aaf4:	f7ff feb0 	bl	800a858 <SPI_WaitFlagStateUntilTimeout>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d016      	beq.n	800ab2c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab02:	f043 0220 	orr.w	r2, r3, #32
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800ab0a:	2303      	movs	r3, #3
 800ab0c:	e023      	b.n	800ab56 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00a      	beq.n	800ab2a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	3b01      	subs	r3, #1
 800ab18:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	689b      	ldr	r3, [r3, #8]
 800ab20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab24:	2b80      	cmp	r3, #128	@ 0x80
 800ab26:	d0f2      	beq.n	800ab0e <SPI_EndRxTxTransaction+0x7a>
 800ab28:	e000      	b.n	800ab2c <SPI_EndRxTxTransaction+0x98>
        break;
 800ab2a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	9300      	str	r3, [sp, #0]
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	2200      	movs	r2, #0
 800ab34:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ab38:	68f8      	ldr	r0, [r7, #12]
 800ab3a:	f7ff ff15 	bl	800a968 <SPI_WaitFifoStateUntilTimeout>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d007      	beq.n	800ab54 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab48:	f043 0220 	orr.w	r2, r3, #32
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ab50:	2303      	movs	r3, #3
 800ab52:	e000      	b.n	800ab56 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800ab54:	2300      	movs	r3, #0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3718      	adds	r7, #24
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
 800ab5e:	bf00      	nop
 800ab60:	2000004c 	.word	0x2000004c
 800ab64:	165e9f81 	.word	0x165e9f81

0800ab68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d101      	bne.n	800ab7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ab76:	2301      	movs	r3, #1
 800ab78:	e0f5      	b.n	800ad66 <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4a7c      	ldr	r2, [pc, #496]	@ (800ad70 <HAL_TIM_Base_Init+0x208>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d045      	beq.n	800ac10 <HAL_TIM_Base_Init+0xa8>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab8c:	d040      	beq.n	800ac10 <HAL_TIM_Base_Init+0xa8>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a78      	ldr	r2, [pc, #480]	@ (800ad74 <HAL_TIM_Base_Init+0x20c>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d03b      	beq.n	800ac10 <HAL_TIM_Base_Init+0xa8>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	4a76      	ldr	r2, [pc, #472]	@ (800ad78 <HAL_TIM_Base_Init+0x210>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d036      	beq.n	800ac10 <HAL_TIM_Base_Init+0xa8>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	4a75      	ldr	r2, [pc, #468]	@ (800ad7c <HAL_TIM_Base_Init+0x214>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d031      	beq.n	800ac10 <HAL_TIM_Base_Init+0xa8>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4a73      	ldr	r2, [pc, #460]	@ (800ad80 <HAL_TIM_Base_Init+0x218>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d02c      	beq.n	800ac10 <HAL_TIM_Base_Init+0xa8>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a72      	ldr	r2, [pc, #456]	@ (800ad84 <HAL_TIM_Base_Init+0x21c>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d027      	beq.n	800ac10 <HAL_TIM_Base_Init+0xa8>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4a70      	ldr	r2, [pc, #448]	@ (800ad88 <HAL_TIM_Base_Init+0x220>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d022      	beq.n	800ac10 <HAL_TIM_Base_Init+0xa8>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4a6f      	ldr	r2, [pc, #444]	@ (800ad8c <HAL_TIM_Base_Init+0x224>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d01d      	beq.n	800ac10 <HAL_TIM_Base_Init+0xa8>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a6d      	ldr	r2, [pc, #436]	@ (800ad90 <HAL_TIM_Base_Init+0x228>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d018      	beq.n	800ac10 <HAL_TIM_Base_Init+0xa8>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4a6c      	ldr	r2, [pc, #432]	@ (800ad94 <HAL_TIM_Base_Init+0x22c>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d013      	beq.n	800ac10 <HAL_TIM_Base_Init+0xa8>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a6a      	ldr	r2, [pc, #424]	@ (800ad98 <HAL_TIM_Base_Init+0x230>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d00e      	beq.n	800ac10 <HAL_TIM_Base_Init+0xa8>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a69      	ldr	r2, [pc, #420]	@ (800ad9c <HAL_TIM_Base_Init+0x234>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d009      	beq.n	800ac10 <HAL_TIM_Base_Init+0xa8>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a67      	ldr	r2, [pc, #412]	@ (800ada0 <HAL_TIM_Base_Init+0x238>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d004      	beq.n	800ac10 <HAL_TIM_Base_Init+0xa8>
 800ac06:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800ac0a:	4866      	ldr	r0, [pc, #408]	@ (800ada4 <HAL_TIM_Base_Init+0x23c>)
 800ac0c:	f7fb fece 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	689b      	ldr	r3, [r3, #8]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d014      	beq.n	800ac42 <HAL_TIM_Base_Init+0xda>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	2b10      	cmp	r3, #16
 800ac1e:	d010      	beq.n	800ac42 <HAL_TIM_Base_Init+0xda>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	689b      	ldr	r3, [r3, #8]
 800ac24:	2b20      	cmp	r3, #32
 800ac26:	d00c      	beq.n	800ac42 <HAL_TIM_Base_Init+0xda>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	689b      	ldr	r3, [r3, #8]
 800ac2c:	2b40      	cmp	r3, #64	@ 0x40
 800ac2e:	d008      	beq.n	800ac42 <HAL_TIM_Base_Init+0xda>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	2b60      	cmp	r3, #96	@ 0x60
 800ac36:	d004      	beq.n	800ac42 <HAL_TIM_Base_Init+0xda>
 800ac38:	f240 1117 	movw	r1, #279	@ 0x117
 800ac3c:	4859      	ldr	r0, [pc, #356]	@ (800ada4 <HAL_TIM_Base_Init+0x23c>)
 800ac3e:	f7fb feb5 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	691b      	ldr	r3, [r3, #16]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00e      	beq.n	800ac68 <HAL_TIM_Base_Init+0x100>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	691b      	ldr	r3, [r3, #16]
 800ac4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac52:	d009      	beq.n	800ac68 <HAL_TIM_Base_Init+0x100>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	691b      	ldr	r3, [r3, #16]
 800ac58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac5c:	d004      	beq.n	800ac68 <HAL_TIM_Base_Init+0x100>
 800ac5e:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800ac62:	4850      	ldr	r0, [pc, #320]	@ (800ada4 <HAL_TIM_Base_Init+0x23c>)
 800ac64:	f7fb fea2 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac70:	d004      	beq.n	800ac7c <HAL_TIM_Base_Init+0x114>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4a41      	ldr	r2, [pc, #260]	@ (800ad7c <HAL_TIM_Base_Init+0x214>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d107      	bne.n	800ac8c <HAL_TIM_Base_Init+0x124>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	bf14      	ite	ne
 800ac84:	2301      	movne	r3, #1
 800ac86:	2300      	moveq	r3, #0
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	e00e      	b.n	800acaa <HAL_TIM_Base_Init+0x142>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	68db      	ldr	r3, [r3, #12]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d006      	beq.n	800aca2 <HAL_TIM_Base_Init+0x13a>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	68db      	ldr	r3, [r3, #12]
 800ac98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac9c:	d201      	bcs.n	800aca2 <HAL_TIM_Base_Init+0x13a>
 800ac9e:	2301      	movs	r3, #1
 800aca0:	e000      	b.n	800aca4 <HAL_TIM_Base_Init+0x13c>
 800aca2:	2300      	movs	r3, #0
 800aca4:	f003 0301 	and.w	r3, r3, #1
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d104      	bne.n	800acb8 <HAL_TIM_Base_Init+0x150>
 800acae:	f240 1119 	movw	r1, #281	@ 0x119
 800acb2:	483c      	ldr	r0, [pc, #240]	@ (800ada4 <HAL_TIM_Base_Init+0x23c>)
 800acb4:	f7fb fe7a 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	699b      	ldr	r3, [r3, #24]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d008      	beq.n	800acd2 <HAL_TIM_Base_Init+0x16a>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	699b      	ldr	r3, [r3, #24]
 800acc4:	2b80      	cmp	r3, #128	@ 0x80
 800acc6:	d004      	beq.n	800acd2 <HAL_TIM_Base_Init+0x16a>
 800acc8:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 800accc:	4835      	ldr	r0, [pc, #212]	@ (800ada4 <HAL_TIM_Base_Init+0x23c>)
 800acce:	f7fb fe6d 	bl	80069ac <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d106      	bne.n	800acec <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2200      	movs	r2, #0
 800ace2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f7fc f9c0 	bl	800706c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2202      	movs	r2, #2
 800acf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	3304      	adds	r3, #4
 800acfc:	4619      	mov	r1, r3
 800acfe:	4610      	mov	r0, r2
 800ad00:	f002 f890 	bl	800ce24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2201      	movs	r2, #1
 800ad08:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2201      	movs	r2, #1
 800ad10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2201      	movs	r2, #1
 800ad18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2201      	movs	r2, #1
 800ad28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2201      	movs	r2, #1
 800ad30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2201      	movs	r2, #1
 800ad38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2201      	movs	r2, #1
 800ad40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2201      	movs	r2, #1
 800ad48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2201      	movs	r2, #1
 800ad50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2201      	movs	r2, #1
 800ad58:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ad64:	2300      	movs	r3, #0
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3708      	adds	r7, #8
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	40010000 	.word	0x40010000
 800ad74:	40000400 	.word	0x40000400
 800ad78:	40000800 	.word	0x40000800
 800ad7c:	40000c00 	.word	0x40000c00
 800ad80:	40001000 	.word	0x40001000
 800ad84:	40001400 	.word	0x40001400
 800ad88:	40010400 	.word	0x40010400
 800ad8c:	40014000 	.word	0x40014000
 800ad90:	40014400 	.word	0x40014400
 800ad94:	40014800 	.word	0x40014800
 800ad98:	40001800 	.word	0x40001800
 800ad9c:	40001c00 	.word	0x40001c00
 800ada0:	40002000 	.word	0x40002000
 800ada4:	0801985c 	.word	0x0801985c

0800ada8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d101      	bne.n	800adba <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800adb6:	2301      	movs	r3, #1
 800adb8:	e0f5      	b.n	800afa6 <HAL_TIM_OC_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4a7c      	ldr	r2, [pc, #496]	@ (800afb0 <HAL_TIM_OC_Init+0x208>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d045      	beq.n	800ae50 <HAL_TIM_OC_Init+0xa8>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adcc:	d040      	beq.n	800ae50 <HAL_TIM_OC_Init+0xa8>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	4a78      	ldr	r2, [pc, #480]	@ (800afb4 <HAL_TIM_OC_Init+0x20c>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d03b      	beq.n	800ae50 <HAL_TIM_OC_Init+0xa8>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4a76      	ldr	r2, [pc, #472]	@ (800afb8 <HAL_TIM_OC_Init+0x210>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d036      	beq.n	800ae50 <HAL_TIM_OC_Init+0xa8>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4a75      	ldr	r2, [pc, #468]	@ (800afbc <HAL_TIM_OC_Init+0x214>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d031      	beq.n	800ae50 <HAL_TIM_OC_Init+0xa8>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4a73      	ldr	r2, [pc, #460]	@ (800afc0 <HAL_TIM_OC_Init+0x218>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d02c      	beq.n	800ae50 <HAL_TIM_OC_Init+0xa8>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4a72      	ldr	r2, [pc, #456]	@ (800afc4 <HAL_TIM_OC_Init+0x21c>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d027      	beq.n	800ae50 <HAL_TIM_OC_Init+0xa8>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4a70      	ldr	r2, [pc, #448]	@ (800afc8 <HAL_TIM_OC_Init+0x220>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d022      	beq.n	800ae50 <HAL_TIM_OC_Init+0xa8>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4a6f      	ldr	r2, [pc, #444]	@ (800afcc <HAL_TIM_OC_Init+0x224>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d01d      	beq.n	800ae50 <HAL_TIM_OC_Init+0xa8>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4a6d      	ldr	r2, [pc, #436]	@ (800afd0 <HAL_TIM_OC_Init+0x228>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d018      	beq.n	800ae50 <HAL_TIM_OC_Init+0xa8>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4a6c      	ldr	r2, [pc, #432]	@ (800afd4 <HAL_TIM_OC_Init+0x22c>)
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d013      	beq.n	800ae50 <HAL_TIM_OC_Init+0xa8>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4a6a      	ldr	r2, [pc, #424]	@ (800afd8 <HAL_TIM_OC_Init+0x230>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d00e      	beq.n	800ae50 <HAL_TIM_OC_Init+0xa8>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4a69      	ldr	r2, [pc, #420]	@ (800afdc <HAL_TIM_OC_Init+0x234>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d009      	beq.n	800ae50 <HAL_TIM_OC_Init+0xa8>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a67      	ldr	r2, [pc, #412]	@ (800afe0 <HAL_TIM_OC_Init+0x238>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d004      	beq.n	800ae50 <HAL_TIM_OC_Init+0xa8>
 800ae46:	f240 2196 	movw	r1, #662	@ 0x296
 800ae4a:	4866      	ldr	r0, [pc, #408]	@ (800afe4 <HAL_TIM_OC_Init+0x23c>)
 800ae4c:	f7fb fdae 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	689b      	ldr	r3, [r3, #8]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d014      	beq.n	800ae82 <HAL_TIM_OC_Init+0xda>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	2b10      	cmp	r3, #16
 800ae5e:	d010      	beq.n	800ae82 <HAL_TIM_OC_Init+0xda>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	2b20      	cmp	r3, #32
 800ae66:	d00c      	beq.n	800ae82 <HAL_TIM_OC_Init+0xda>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	2b40      	cmp	r3, #64	@ 0x40
 800ae6e:	d008      	beq.n	800ae82 <HAL_TIM_OC_Init+0xda>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	689b      	ldr	r3, [r3, #8]
 800ae74:	2b60      	cmp	r3, #96	@ 0x60
 800ae76:	d004      	beq.n	800ae82 <HAL_TIM_OC_Init+0xda>
 800ae78:	f240 2197 	movw	r1, #663	@ 0x297
 800ae7c:	4859      	ldr	r0, [pc, #356]	@ (800afe4 <HAL_TIM_OC_Init+0x23c>)
 800ae7e:	f7fb fd95 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	691b      	ldr	r3, [r3, #16]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d00e      	beq.n	800aea8 <HAL_TIM_OC_Init+0x100>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	691b      	ldr	r3, [r3, #16]
 800ae8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae92:	d009      	beq.n	800aea8 <HAL_TIM_OC_Init+0x100>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	691b      	ldr	r3, [r3, #16]
 800ae98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae9c:	d004      	beq.n	800aea8 <HAL_TIM_OC_Init+0x100>
 800ae9e:	f44f 7126 	mov.w	r1, #664	@ 0x298
 800aea2:	4850      	ldr	r0, [pc, #320]	@ (800afe4 <HAL_TIM_OC_Init+0x23c>)
 800aea4:	f7fb fd82 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aeb0:	d004      	beq.n	800aebc <HAL_TIM_OC_Init+0x114>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	4a41      	ldr	r2, [pc, #260]	@ (800afbc <HAL_TIM_OC_Init+0x214>)
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d107      	bne.n	800aecc <HAL_TIM_OC_Init+0x124>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	68db      	ldr	r3, [r3, #12]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	bf14      	ite	ne
 800aec4:	2301      	movne	r3, #1
 800aec6:	2300      	moveq	r3, #0
 800aec8:	b2db      	uxtb	r3, r3
 800aeca:	e00e      	b.n	800aeea <HAL_TIM_OC_Init+0x142>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	68db      	ldr	r3, [r3, #12]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d006      	beq.n	800aee2 <HAL_TIM_OC_Init+0x13a>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	68db      	ldr	r3, [r3, #12]
 800aed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aedc:	d201      	bcs.n	800aee2 <HAL_TIM_OC_Init+0x13a>
 800aede:	2301      	movs	r3, #1
 800aee0:	e000      	b.n	800aee4 <HAL_TIM_OC_Init+0x13c>
 800aee2:	2300      	movs	r3, #0
 800aee4:	f003 0301 	and.w	r3, r3, #1
 800aee8:	b2db      	uxtb	r3, r3
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d104      	bne.n	800aef8 <HAL_TIM_OC_Init+0x150>
 800aeee:	f240 2199 	movw	r1, #665	@ 0x299
 800aef2:	483c      	ldr	r0, [pc, #240]	@ (800afe4 <HAL_TIM_OC_Init+0x23c>)
 800aef4:	f7fb fd5a 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	699b      	ldr	r3, [r3, #24]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d008      	beq.n	800af12 <HAL_TIM_OC_Init+0x16a>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	699b      	ldr	r3, [r3, #24]
 800af04:	2b80      	cmp	r3, #128	@ 0x80
 800af06:	d004      	beq.n	800af12 <HAL_TIM_OC_Init+0x16a>
 800af08:	f240 219a 	movw	r1, #666	@ 0x29a
 800af0c:	4835      	ldr	r0, [pc, #212]	@ (800afe4 <HAL_TIM_OC_Init+0x23c>)
 800af0e:	f7fb fd4d 	bl	80069ac <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d106      	bne.n	800af2c <HAL_TIM_OC_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2200      	movs	r2, #0
 800af22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 f85e 	bl	800afe8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2202      	movs	r2, #2
 800af30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	3304      	adds	r3, #4
 800af3c:	4619      	mov	r1, r3
 800af3e:	4610      	mov	r0, r2
 800af40:	f001 ff70 	bl	800ce24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2201      	movs	r2, #1
 800af48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2201      	movs	r2, #1
 800af50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2201      	movs	r2, #1
 800af58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2201      	movs	r2, #1
 800af60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2201      	movs	r2, #1
 800af68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2201      	movs	r2, #1
 800af70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2201      	movs	r2, #1
 800af78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2201      	movs	r2, #1
 800af80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2201      	movs	r2, #1
 800af88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2201      	movs	r2, #1
 800af90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2201      	movs	r2, #1
 800af98:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2201      	movs	r2, #1
 800afa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800afa4:	2300      	movs	r3, #0
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3708      	adds	r7, #8
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	40010000 	.word	0x40010000
 800afb4:	40000400 	.word	0x40000400
 800afb8:	40000800 	.word	0x40000800
 800afbc:	40000c00 	.word	0x40000c00
 800afc0:	40001000 	.word	0x40001000
 800afc4:	40001400 	.word	0x40001400
 800afc8:	40010400 	.word	0x40010400
 800afcc:	40014000 	.word	0x40014000
 800afd0:	40014400 	.word	0x40014400
 800afd4:	40014800 	.word	0x40014800
 800afd8:	40001800 	.word	0x40001800
 800afdc:	40001c00 	.word	0x40001c00
 800afe0:	40002000 	.word	0x40002000
 800afe4:	0801985c 	.word	0x0801985c

0800afe8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800afe8:	b480      	push	{r7}
 800afea:	b083      	sub	sp, #12
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800aff0:	bf00      	nop
 800aff2:	370c      	adds	r7, #12
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr

0800affc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b082      	sub	sp, #8
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d101      	bne.n	800b00e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b00a:	2301      	movs	r3, #1
 800b00c:	e0f5      	b.n	800b1fa <HAL_TIM_PWM_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	4a7c      	ldr	r2, [pc, #496]	@ (800b204 <HAL_TIM_PWM_Init+0x208>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d045      	beq.n	800b0a4 <HAL_TIM_PWM_Init+0xa8>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b020:	d040      	beq.n	800b0a4 <HAL_TIM_PWM_Init+0xa8>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	4a78      	ldr	r2, [pc, #480]	@ (800b208 <HAL_TIM_PWM_Init+0x20c>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d03b      	beq.n	800b0a4 <HAL_TIM_PWM_Init+0xa8>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a76      	ldr	r2, [pc, #472]	@ (800b20c <HAL_TIM_PWM_Init+0x210>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d036      	beq.n	800b0a4 <HAL_TIM_PWM_Init+0xa8>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a75      	ldr	r2, [pc, #468]	@ (800b210 <HAL_TIM_PWM_Init+0x214>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d031      	beq.n	800b0a4 <HAL_TIM_PWM_Init+0xa8>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4a73      	ldr	r2, [pc, #460]	@ (800b214 <HAL_TIM_PWM_Init+0x218>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d02c      	beq.n	800b0a4 <HAL_TIM_PWM_Init+0xa8>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	4a72      	ldr	r2, [pc, #456]	@ (800b218 <HAL_TIM_PWM_Init+0x21c>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d027      	beq.n	800b0a4 <HAL_TIM_PWM_Init+0xa8>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a70      	ldr	r2, [pc, #448]	@ (800b21c <HAL_TIM_PWM_Init+0x220>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d022      	beq.n	800b0a4 <HAL_TIM_PWM_Init+0xa8>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4a6f      	ldr	r2, [pc, #444]	@ (800b220 <HAL_TIM_PWM_Init+0x224>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d01d      	beq.n	800b0a4 <HAL_TIM_PWM_Init+0xa8>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a6d      	ldr	r2, [pc, #436]	@ (800b224 <HAL_TIM_PWM_Init+0x228>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d018      	beq.n	800b0a4 <HAL_TIM_PWM_Init+0xa8>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a6c      	ldr	r2, [pc, #432]	@ (800b228 <HAL_TIM_PWM_Init+0x22c>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d013      	beq.n	800b0a4 <HAL_TIM_PWM_Init+0xa8>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a6a      	ldr	r2, [pc, #424]	@ (800b22c <HAL_TIM_PWM_Init+0x230>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d00e      	beq.n	800b0a4 <HAL_TIM_PWM_Init+0xa8>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4a69      	ldr	r2, [pc, #420]	@ (800b230 <HAL_TIM_PWM_Init+0x234>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d009      	beq.n	800b0a4 <HAL_TIM_PWM_Init+0xa8>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4a67      	ldr	r2, [pc, #412]	@ (800b234 <HAL_TIM_PWM_Init+0x238>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d004      	beq.n	800b0a4 <HAL_TIM_PWM_Init+0xa8>
 800b09a:	f240 5133 	movw	r1, #1331	@ 0x533
 800b09e:	4866      	ldr	r0, [pc, #408]	@ (800b238 <HAL_TIM_PWM_Init+0x23c>)
 800b0a0:	f7fb fc84 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	689b      	ldr	r3, [r3, #8]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d014      	beq.n	800b0d6 <HAL_TIM_PWM_Init+0xda>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	689b      	ldr	r3, [r3, #8]
 800b0b0:	2b10      	cmp	r3, #16
 800b0b2:	d010      	beq.n	800b0d6 <HAL_TIM_PWM_Init+0xda>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	2b20      	cmp	r3, #32
 800b0ba:	d00c      	beq.n	800b0d6 <HAL_TIM_PWM_Init+0xda>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	689b      	ldr	r3, [r3, #8]
 800b0c0:	2b40      	cmp	r3, #64	@ 0x40
 800b0c2:	d008      	beq.n	800b0d6 <HAL_TIM_PWM_Init+0xda>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	689b      	ldr	r3, [r3, #8]
 800b0c8:	2b60      	cmp	r3, #96	@ 0x60
 800b0ca:	d004      	beq.n	800b0d6 <HAL_TIM_PWM_Init+0xda>
 800b0cc:	f240 5134 	movw	r1, #1332	@ 0x534
 800b0d0:	4859      	ldr	r0, [pc, #356]	@ (800b238 <HAL_TIM_PWM_Init+0x23c>)
 800b0d2:	f7fb fc6b 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	691b      	ldr	r3, [r3, #16]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d00e      	beq.n	800b0fc <HAL_TIM_PWM_Init+0x100>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	691b      	ldr	r3, [r3, #16]
 800b0e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0e6:	d009      	beq.n	800b0fc <HAL_TIM_PWM_Init+0x100>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	691b      	ldr	r3, [r3, #16]
 800b0ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0f0:	d004      	beq.n	800b0fc <HAL_TIM_PWM_Init+0x100>
 800b0f2:	f240 5135 	movw	r1, #1333	@ 0x535
 800b0f6:	4850      	ldr	r0, [pc, #320]	@ (800b238 <HAL_TIM_PWM_Init+0x23c>)
 800b0f8:	f7fb fc58 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b104:	d004      	beq.n	800b110 <HAL_TIM_PWM_Init+0x114>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4a41      	ldr	r2, [pc, #260]	@ (800b210 <HAL_TIM_PWM_Init+0x214>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d107      	bne.n	800b120 <HAL_TIM_PWM_Init+0x124>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	68db      	ldr	r3, [r3, #12]
 800b114:	2b00      	cmp	r3, #0
 800b116:	bf14      	ite	ne
 800b118:	2301      	movne	r3, #1
 800b11a:	2300      	moveq	r3, #0
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	e00e      	b.n	800b13e <HAL_TIM_PWM_Init+0x142>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	68db      	ldr	r3, [r3, #12]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d006      	beq.n	800b136 <HAL_TIM_PWM_Init+0x13a>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b130:	d201      	bcs.n	800b136 <HAL_TIM_PWM_Init+0x13a>
 800b132:	2301      	movs	r3, #1
 800b134:	e000      	b.n	800b138 <HAL_TIM_PWM_Init+0x13c>
 800b136:	2300      	movs	r3, #0
 800b138:	f003 0301 	and.w	r3, r3, #1
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d104      	bne.n	800b14c <HAL_TIM_PWM_Init+0x150>
 800b142:	f240 5136 	movw	r1, #1334	@ 0x536
 800b146:	483c      	ldr	r0, [pc, #240]	@ (800b238 <HAL_TIM_PWM_Init+0x23c>)
 800b148:	f7fb fc30 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	699b      	ldr	r3, [r3, #24]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d008      	beq.n	800b166 <HAL_TIM_PWM_Init+0x16a>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	699b      	ldr	r3, [r3, #24]
 800b158:	2b80      	cmp	r3, #128	@ 0x80
 800b15a:	d004      	beq.n	800b166 <HAL_TIM_PWM_Init+0x16a>
 800b15c:	f240 5137 	movw	r1, #1335	@ 0x537
 800b160:	4835      	ldr	r0, [pc, #212]	@ (800b238 <HAL_TIM_PWM_Init+0x23c>)
 800b162:	f7fb fc23 	bl	80069ac <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d106      	bne.n	800b180 <HAL_TIM_PWM_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2200      	movs	r2, #0
 800b176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f000 f85e 	bl	800b23c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2202      	movs	r2, #2
 800b184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	3304      	adds	r3, #4
 800b190:	4619      	mov	r1, r3
 800b192:	4610      	mov	r0, r2
 800b194:	f001 fe46 	bl	800ce24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2201      	movs	r2, #1
 800b19c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2201      	movs	r2, #1
 800b1dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b1f8:	2300      	movs	r3, #0
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3708      	adds	r7, #8
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	40010000 	.word	0x40010000
 800b208:	40000400 	.word	0x40000400
 800b20c:	40000800 	.word	0x40000800
 800b210:	40000c00 	.word	0x40000c00
 800b214:	40001000 	.word	0x40001000
 800b218:	40001400 	.word	0x40001400
 800b21c:	40010400 	.word	0x40010400
 800b220:	40014000 	.word	0x40014000
 800b224:	40014400 	.word	0x40014400
 800b228:	40014800 	.word	0x40014800
 800b22c:	40001800 	.word	0x40001800
 800b230:	40001c00 	.word	0x40001c00
 800b234:	40002000 	.word	0x40002000
 800b238:	0801985c 	.word	0x0801985c

0800b23c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b083      	sub	sp, #12
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b244:	bf00      	nop
 800b246:	370c      	adds	r7, #12
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4a89      	ldr	r2, [pc, #548]	@ (800b484 <HAL_TIM_PWM_Start+0x234>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d117      	bne.n	800b294 <HAL_TIM_PWM_Start+0x44>
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	2b00      	cmp	r3, #0
 800b268:	f000 80ae 	beq.w	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	2b04      	cmp	r3, #4
 800b270:	f000 80aa 	beq.w	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	2b08      	cmp	r3, #8
 800b278:	f000 80a6 	beq.w	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	2b0c      	cmp	r3, #12
 800b280:	f000 80a2 	beq.w	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	2b10      	cmp	r3, #16
 800b288:	f000 809e 	beq.w	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	2b14      	cmp	r3, #20
 800b290:	f000 809a 	beq.w	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b29c:	d10f      	bne.n	800b2be <HAL_TIM_PWM_Start+0x6e>
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	f000 8091 	beq.w	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	2b04      	cmp	r3, #4
 800b2aa:	f000 808d 	beq.w	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	2b08      	cmp	r3, #8
 800b2b2:	f000 8089 	beq.w	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	2b0c      	cmp	r3, #12
 800b2ba:	f000 8085 	beq.w	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	4a71      	ldr	r2, [pc, #452]	@ (800b488 <HAL_TIM_PWM_Start+0x238>)
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d10b      	bne.n	800b2e0 <HAL_TIM_PWM_Start+0x90>
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d07c      	beq.n	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	2b04      	cmp	r3, #4
 800b2d2:	d079      	beq.n	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	2b08      	cmp	r3, #8
 800b2d8:	d076      	beq.n	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	2b0c      	cmp	r3, #12
 800b2de:	d073      	beq.n	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4a69      	ldr	r2, [pc, #420]	@ (800b48c <HAL_TIM_PWM_Start+0x23c>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d10b      	bne.n	800b302 <HAL_TIM_PWM_Start+0xb2>
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d06b      	beq.n	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	2b04      	cmp	r3, #4
 800b2f4:	d068      	beq.n	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	2b08      	cmp	r3, #8
 800b2fa:	d065      	beq.n	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	2b0c      	cmp	r3, #12
 800b300:	d062      	beq.n	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4a62      	ldr	r2, [pc, #392]	@ (800b490 <HAL_TIM_PWM_Start+0x240>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d10b      	bne.n	800b324 <HAL_TIM_PWM_Start+0xd4>
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d05a      	beq.n	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	2b04      	cmp	r3, #4
 800b316:	d057      	beq.n	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	2b08      	cmp	r3, #8
 800b31c:	d054      	beq.n	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	2b0c      	cmp	r3, #12
 800b322:	d051      	beq.n	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4a5a      	ldr	r2, [pc, #360]	@ (800b494 <HAL_TIM_PWM_Start+0x244>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d111      	bne.n	800b352 <HAL_TIM_PWM_Start+0x102>
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d049      	beq.n	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	2b04      	cmp	r3, #4
 800b338:	d046      	beq.n	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	2b08      	cmp	r3, #8
 800b33e:	d043      	beq.n	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	2b0c      	cmp	r3, #12
 800b344:	d040      	beq.n	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	2b10      	cmp	r3, #16
 800b34a:	d03d      	beq.n	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	2b14      	cmp	r3, #20
 800b350:	d03a      	beq.n	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	4a50      	ldr	r2, [pc, #320]	@ (800b498 <HAL_TIM_PWM_Start+0x248>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d105      	bne.n	800b368 <HAL_TIM_PWM_Start+0x118>
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d032      	beq.n	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	2b04      	cmp	r3, #4
 800b366:	d02f      	beq.n	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4a4b      	ldr	r2, [pc, #300]	@ (800b49c <HAL_TIM_PWM_Start+0x24c>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d102      	bne.n	800b378 <HAL_TIM_PWM_Start+0x128>
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d027      	beq.n	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a48      	ldr	r2, [pc, #288]	@ (800b4a0 <HAL_TIM_PWM_Start+0x250>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d102      	bne.n	800b388 <HAL_TIM_PWM_Start+0x138>
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d01f      	beq.n	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a45      	ldr	r2, [pc, #276]	@ (800b4a4 <HAL_TIM_PWM_Start+0x254>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d105      	bne.n	800b39e <HAL_TIM_PWM_Start+0x14e>
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d017      	beq.n	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	2b04      	cmp	r3, #4
 800b39c:	d014      	beq.n	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4a41      	ldr	r2, [pc, #260]	@ (800b4a8 <HAL_TIM_PWM_Start+0x258>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d102      	bne.n	800b3ae <HAL_TIM_PWM_Start+0x15e>
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d00c      	beq.n	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4a3e      	ldr	r2, [pc, #248]	@ (800b4ac <HAL_TIM_PWM_Start+0x25c>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d102      	bne.n	800b3be <HAL_TIM_PWM_Start+0x16e>
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d004      	beq.n	800b3c8 <HAL_TIM_PWM_Start+0x178>
 800b3be:	f240 51bc 	movw	r1, #1468	@ 0x5bc
 800b3c2:	483b      	ldr	r0, [pc, #236]	@ (800b4b0 <HAL_TIM_PWM_Start+0x260>)
 800b3c4:	f7fb faf2 	bl	80069ac <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d109      	bne.n	800b3e2 <HAL_TIM_PWM_Start+0x192>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b3d4:	b2db      	uxtb	r3, r3
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	bf14      	ite	ne
 800b3da:	2301      	movne	r3, #1
 800b3dc:	2300      	moveq	r3, #0
 800b3de:	b2db      	uxtb	r3, r3
 800b3e0:	e03c      	b.n	800b45c <HAL_TIM_PWM_Start+0x20c>
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	2b04      	cmp	r3, #4
 800b3e6:	d109      	bne.n	800b3fc <HAL_TIM_PWM_Start+0x1ac>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b3ee:	b2db      	uxtb	r3, r3
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	bf14      	ite	ne
 800b3f4:	2301      	movne	r3, #1
 800b3f6:	2300      	moveq	r3, #0
 800b3f8:	b2db      	uxtb	r3, r3
 800b3fa:	e02f      	b.n	800b45c <HAL_TIM_PWM_Start+0x20c>
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	2b08      	cmp	r3, #8
 800b400:	d109      	bne.n	800b416 <HAL_TIM_PWM_Start+0x1c6>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b408:	b2db      	uxtb	r3, r3
 800b40a:	2b01      	cmp	r3, #1
 800b40c:	bf14      	ite	ne
 800b40e:	2301      	movne	r3, #1
 800b410:	2300      	moveq	r3, #0
 800b412:	b2db      	uxtb	r3, r3
 800b414:	e022      	b.n	800b45c <HAL_TIM_PWM_Start+0x20c>
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	2b0c      	cmp	r3, #12
 800b41a:	d109      	bne.n	800b430 <HAL_TIM_PWM_Start+0x1e0>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b422:	b2db      	uxtb	r3, r3
 800b424:	2b01      	cmp	r3, #1
 800b426:	bf14      	ite	ne
 800b428:	2301      	movne	r3, #1
 800b42a:	2300      	moveq	r3, #0
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	e015      	b.n	800b45c <HAL_TIM_PWM_Start+0x20c>
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	2b10      	cmp	r3, #16
 800b434:	d109      	bne.n	800b44a <HAL_TIM_PWM_Start+0x1fa>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b43c:	b2db      	uxtb	r3, r3
 800b43e:	2b01      	cmp	r3, #1
 800b440:	bf14      	ite	ne
 800b442:	2301      	movne	r3, #1
 800b444:	2300      	moveq	r3, #0
 800b446:	b2db      	uxtb	r3, r3
 800b448:	e008      	b.n	800b45c <HAL_TIM_PWM_Start+0x20c>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b450:	b2db      	uxtb	r3, r3
 800b452:	2b01      	cmp	r3, #1
 800b454:	bf14      	ite	ne
 800b456:	2301      	movne	r3, #1
 800b458:	2300      	moveq	r3, #0
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d001      	beq.n	800b464 <HAL_TIM_PWM_Start+0x214>
  {
    return HAL_ERROR;
 800b460:	2301      	movs	r3, #1
 800b462:	e0aa      	b.n	800b5ba <HAL_TIM_PWM_Start+0x36a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d104      	bne.n	800b474 <HAL_TIM_PWM_Start+0x224>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2202      	movs	r2, #2
 800b46e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b472:	e03b      	b.n	800b4ec <HAL_TIM_PWM_Start+0x29c>
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	2b04      	cmp	r3, #4
 800b478:	d11c      	bne.n	800b4b4 <HAL_TIM_PWM_Start+0x264>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2202      	movs	r2, #2
 800b47e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b482:	e033      	b.n	800b4ec <HAL_TIM_PWM_Start+0x29c>
 800b484:	40010000 	.word	0x40010000
 800b488:	40000400 	.word	0x40000400
 800b48c:	40000800 	.word	0x40000800
 800b490:	40000c00 	.word	0x40000c00
 800b494:	40010400 	.word	0x40010400
 800b498:	40014000 	.word	0x40014000
 800b49c:	40014400 	.word	0x40014400
 800b4a0:	40014800 	.word	0x40014800
 800b4a4:	40001800 	.word	0x40001800
 800b4a8:	40001c00 	.word	0x40001c00
 800b4ac:	40002000 	.word	0x40002000
 800b4b0:	0801985c 	.word	0x0801985c
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	2b08      	cmp	r3, #8
 800b4b8:	d104      	bne.n	800b4c4 <HAL_TIM_PWM_Start+0x274>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2202      	movs	r2, #2
 800b4be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b4c2:	e013      	b.n	800b4ec <HAL_TIM_PWM_Start+0x29c>
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	2b0c      	cmp	r3, #12
 800b4c8:	d104      	bne.n	800b4d4 <HAL_TIM_PWM_Start+0x284>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2202      	movs	r2, #2
 800b4ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b4d2:	e00b      	b.n	800b4ec <HAL_TIM_PWM_Start+0x29c>
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	2b10      	cmp	r3, #16
 800b4d8:	d104      	bne.n	800b4e4 <HAL_TIM_PWM_Start+0x294>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2202      	movs	r2, #2
 800b4de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b4e2:	e003      	b.n	800b4ec <HAL_TIM_PWM_Start+0x29c>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2202      	movs	r2, #2
 800b4e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	6839      	ldr	r1, [r7, #0]
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f002 fb29 	bl	800db4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a31      	ldr	r2, [pc, #196]	@ (800b5c4 <HAL_TIM_PWM_Start+0x374>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d004      	beq.n	800b50e <HAL_TIM_PWM_Start+0x2be>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a2f      	ldr	r2, [pc, #188]	@ (800b5c8 <HAL_TIM_PWM_Start+0x378>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d101      	bne.n	800b512 <HAL_TIM_PWM_Start+0x2c2>
 800b50e:	2301      	movs	r3, #1
 800b510:	e000      	b.n	800b514 <HAL_TIM_PWM_Start+0x2c4>
 800b512:	2300      	movs	r3, #0
 800b514:	2b00      	cmp	r3, #0
 800b516:	d007      	beq.n	800b528 <HAL_TIM_PWM_Start+0x2d8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b526:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4a25      	ldr	r2, [pc, #148]	@ (800b5c4 <HAL_TIM_PWM_Start+0x374>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d022      	beq.n	800b578 <HAL_TIM_PWM_Start+0x328>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b53a:	d01d      	beq.n	800b578 <HAL_TIM_PWM_Start+0x328>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a22      	ldr	r2, [pc, #136]	@ (800b5cc <HAL_TIM_PWM_Start+0x37c>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d018      	beq.n	800b578 <HAL_TIM_PWM_Start+0x328>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4a21      	ldr	r2, [pc, #132]	@ (800b5d0 <HAL_TIM_PWM_Start+0x380>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d013      	beq.n	800b578 <HAL_TIM_PWM_Start+0x328>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	4a1f      	ldr	r2, [pc, #124]	@ (800b5d4 <HAL_TIM_PWM_Start+0x384>)
 800b556:	4293      	cmp	r3, r2
 800b558:	d00e      	beq.n	800b578 <HAL_TIM_PWM_Start+0x328>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	4a1a      	ldr	r2, [pc, #104]	@ (800b5c8 <HAL_TIM_PWM_Start+0x378>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d009      	beq.n	800b578 <HAL_TIM_PWM_Start+0x328>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4a1b      	ldr	r2, [pc, #108]	@ (800b5d8 <HAL_TIM_PWM_Start+0x388>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d004      	beq.n	800b578 <HAL_TIM_PWM_Start+0x328>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	4a1a      	ldr	r2, [pc, #104]	@ (800b5dc <HAL_TIM_PWM_Start+0x38c>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d115      	bne.n	800b5a4 <HAL_TIM_PWM_Start+0x354>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	689a      	ldr	r2, [r3, #8]
 800b57e:	4b18      	ldr	r3, [pc, #96]	@ (800b5e0 <HAL_TIM_PWM_Start+0x390>)
 800b580:	4013      	ands	r3, r2
 800b582:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	2b06      	cmp	r3, #6
 800b588:	d015      	beq.n	800b5b6 <HAL_TIM_PWM_Start+0x366>
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b590:	d011      	beq.n	800b5b6 <HAL_TIM_PWM_Start+0x366>
    {
      __HAL_TIM_ENABLE(htim);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f042 0201 	orr.w	r2, r2, #1
 800b5a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5a2:	e008      	b.n	800b5b6 <HAL_TIM_PWM_Start+0x366>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	681a      	ldr	r2, [r3, #0]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f042 0201 	orr.w	r2, r2, #1
 800b5b2:	601a      	str	r2, [r3, #0]
 800b5b4:	e000      	b.n	800b5b8 <HAL_TIM_PWM_Start+0x368>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b5b8:	2300      	movs	r3, #0
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3710      	adds	r7, #16
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
 800b5c2:	bf00      	nop
 800b5c4:	40010000 	.word	0x40010000
 800b5c8:	40010400 	.word	0x40010400
 800b5cc:	40000400 	.word	0x40000400
 800b5d0:	40000800 	.word	0x40000800
 800b5d4:	40000c00 	.word	0x40000c00
 800b5d8:	40014000 	.word	0x40014000
 800b5dc:	40001800 	.word	0x40001800
 800b5e0:	00010007 	.word	0x00010007

0800b5e4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b082      	sub	sp, #8
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d101      	bne.n	800b5f8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	e0f8      	b.n	800b7ea <HAL_TIM_OnePulse_Init+0x206>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4a7d      	ldr	r2, [pc, #500]	@ (800b7f4 <HAL_TIM_OnePulse_Init+0x210>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d045      	beq.n	800b68e <HAL_TIM_OnePulse_Init+0xaa>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b60a:	d040      	beq.n	800b68e <HAL_TIM_OnePulse_Init+0xaa>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a79      	ldr	r2, [pc, #484]	@ (800b7f8 <HAL_TIM_OnePulse_Init+0x214>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d03b      	beq.n	800b68e <HAL_TIM_OnePulse_Init+0xaa>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4a78      	ldr	r2, [pc, #480]	@ (800b7fc <HAL_TIM_OnePulse_Init+0x218>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d036      	beq.n	800b68e <HAL_TIM_OnePulse_Init+0xaa>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	4a76      	ldr	r2, [pc, #472]	@ (800b800 <HAL_TIM_OnePulse_Init+0x21c>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d031      	beq.n	800b68e <HAL_TIM_OnePulse_Init+0xaa>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	4a75      	ldr	r2, [pc, #468]	@ (800b804 <HAL_TIM_OnePulse_Init+0x220>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d02c      	beq.n	800b68e <HAL_TIM_OnePulse_Init+0xaa>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4a73      	ldr	r2, [pc, #460]	@ (800b808 <HAL_TIM_OnePulse_Init+0x224>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d027      	beq.n	800b68e <HAL_TIM_OnePulse_Init+0xaa>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	4a72      	ldr	r2, [pc, #456]	@ (800b80c <HAL_TIM_OnePulse_Init+0x228>)
 800b644:	4293      	cmp	r3, r2
 800b646:	d022      	beq.n	800b68e <HAL_TIM_OnePulse_Init+0xaa>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4a70      	ldr	r2, [pc, #448]	@ (800b810 <HAL_TIM_OnePulse_Init+0x22c>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d01d      	beq.n	800b68e <HAL_TIM_OnePulse_Init+0xaa>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	4a6f      	ldr	r2, [pc, #444]	@ (800b814 <HAL_TIM_OnePulse_Init+0x230>)
 800b658:	4293      	cmp	r3, r2
 800b65a:	d018      	beq.n	800b68e <HAL_TIM_OnePulse_Init+0xaa>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4a6d      	ldr	r2, [pc, #436]	@ (800b818 <HAL_TIM_OnePulse_Init+0x234>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d013      	beq.n	800b68e <HAL_TIM_OnePulse_Init+0xaa>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4a6c      	ldr	r2, [pc, #432]	@ (800b81c <HAL_TIM_OnePulse_Init+0x238>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d00e      	beq.n	800b68e <HAL_TIM_OnePulse_Init+0xaa>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	4a6a      	ldr	r2, [pc, #424]	@ (800b820 <HAL_TIM_OnePulse_Init+0x23c>)
 800b676:	4293      	cmp	r3, r2
 800b678:	d009      	beq.n	800b68e <HAL_TIM_OnePulse_Init+0xaa>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	4a69      	ldr	r2, [pc, #420]	@ (800b824 <HAL_TIM_OnePulse_Init+0x240>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d004      	beq.n	800b68e <HAL_TIM_OnePulse_Init+0xaa>
 800b684:	f640 2158 	movw	r1, #2648	@ 0xa58
 800b688:	4867      	ldr	r0, [pc, #412]	@ (800b828 <HAL_TIM_OnePulse_Init+0x244>)
 800b68a:	f7fb f98f 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	689b      	ldr	r3, [r3, #8]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d014      	beq.n	800b6c0 <HAL_TIM_OnePulse_Init+0xdc>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	2b10      	cmp	r3, #16
 800b69c:	d010      	beq.n	800b6c0 <HAL_TIM_OnePulse_Init+0xdc>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	689b      	ldr	r3, [r3, #8]
 800b6a2:	2b20      	cmp	r3, #32
 800b6a4:	d00c      	beq.n	800b6c0 <HAL_TIM_OnePulse_Init+0xdc>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	689b      	ldr	r3, [r3, #8]
 800b6aa:	2b40      	cmp	r3, #64	@ 0x40
 800b6ac:	d008      	beq.n	800b6c0 <HAL_TIM_OnePulse_Init+0xdc>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	2b60      	cmp	r3, #96	@ 0x60
 800b6b4:	d004      	beq.n	800b6c0 <HAL_TIM_OnePulse_Init+0xdc>
 800b6b6:	f640 2159 	movw	r1, #2649	@ 0xa59
 800b6ba:	485b      	ldr	r0, [pc, #364]	@ (800b828 <HAL_TIM_OnePulse_Init+0x244>)
 800b6bc:	f7fb f976 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	691b      	ldr	r3, [r3, #16]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d00e      	beq.n	800b6e6 <HAL_TIM_OnePulse_Init+0x102>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	691b      	ldr	r3, [r3, #16]
 800b6cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6d0:	d009      	beq.n	800b6e6 <HAL_TIM_OnePulse_Init+0x102>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	691b      	ldr	r3, [r3, #16]
 800b6d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6da:	d004      	beq.n	800b6e6 <HAL_TIM_OnePulse_Init+0x102>
 800b6dc:	f640 215a 	movw	r1, #2650	@ 0xa5a
 800b6e0:	4851      	ldr	r0, [pc, #324]	@ (800b828 <HAL_TIM_OnePulse_Init+0x244>)
 800b6e2:	f7fb f963 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	2b08      	cmp	r3, #8
 800b6ea:	d007      	beq.n	800b6fc <HAL_TIM_OnePulse_Init+0x118>
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d004      	beq.n	800b6fc <HAL_TIM_OnePulse_Init+0x118>
 800b6f2:	f640 215b 	movw	r1, #2651	@ 0xa5b
 800b6f6:	484c      	ldr	r0, [pc, #304]	@ (800b828 <HAL_TIM_OnePulse_Init+0x244>)
 800b6f8:	f7fb f958 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b704:	d004      	beq.n	800b710 <HAL_TIM_OnePulse_Init+0x12c>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4a3d      	ldr	r2, [pc, #244]	@ (800b800 <HAL_TIM_OnePulse_Init+0x21c>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d107      	bne.n	800b720 <HAL_TIM_OnePulse_Init+0x13c>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	68db      	ldr	r3, [r3, #12]
 800b714:	2b00      	cmp	r3, #0
 800b716:	bf14      	ite	ne
 800b718:	2301      	movne	r3, #1
 800b71a:	2300      	moveq	r3, #0
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	e00e      	b.n	800b73e <HAL_TIM_OnePulse_Init+0x15a>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	68db      	ldr	r3, [r3, #12]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d006      	beq.n	800b736 <HAL_TIM_OnePulse_Init+0x152>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	68db      	ldr	r3, [r3, #12]
 800b72c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b730:	d201      	bcs.n	800b736 <HAL_TIM_OnePulse_Init+0x152>
 800b732:	2301      	movs	r3, #1
 800b734:	e000      	b.n	800b738 <HAL_TIM_OnePulse_Init+0x154>
 800b736:	2300      	movs	r3, #0
 800b738:	f003 0301 	and.w	r3, r3, #1
 800b73c:	b2db      	uxtb	r3, r3
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d104      	bne.n	800b74c <HAL_TIM_OnePulse_Init+0x168>
 800b742:	f640 215c 	movw	r1, #2652	@ 0xa5c
 800b746:	4838      	ldr	r0, [pc, #224]	@ (800b828 <HAL_TIM_OnePulse_Init+0x244>)
 800b748:	f7fb f930 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	699b      	ldr	r3, [r3, #24]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d008      	beq.n	800b766 <HAL_TIM_OnePulse_Init+0x182>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	699b      	ldr	r3, [r3, #24]
 800b758:	2b80      	cmp	r3, #128	@ 0x80
 800b75a:	d004      	beq.n	800b766 <HAL_TIM_OnePulse_Init+0x182>
 800b75c:	f640 215d 	movw	r1, #2653	@ 0xa5d
 800b760:	4831      	ldr	r0, [pc, #196]	@ (800b828 <HAL_TIM_OnePulse_Init+0x244>)
 800b762:	f7fb f923 	bl	80069ac <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b76c:	b2db      	uxtb	r3, r3
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d106      	bne.n	800b780 <HAL_TIM_OnePulse_Init+0x19c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2200      	movs	r2, #0
 800b776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 f856 	bl	800b82c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2202      	movs	r2, #2
 800b784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	3304      	adds	r3, #4
 800b790:	4619      	mov	r1, r3
 800b792:	4610      	mov	r0, r2
 800b794:	f001 fb46 	bl	800ce24 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	681a      	ldr	r2, [r3, #0]
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f022 0208 	bic.w	r2, r2, #8
 800b7a6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	6819      	ldr	r1, [r3, #0]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	683a      	ldr	r2, [r7, #0]
 800b7b4:	430a      	orrs	r2, r1
 800b7b6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2201      	movs	r2, #1
 800b7dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b7e8:	2300      	movs	r3, #0
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3708      	adds	r7, #8
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop
 800b7f4:	40010000 	.word	0x40010000
 800b7f8:	40000400 	.word	0x40000400
 800b7fc:	40000800 	.word	0x40000800
 800b800:	40000c00 	.word	0x40000c00
 800b804:	40001000 	.word	0x40001000
 800b808:	40001400 	.word	0x40001400
 800b80c:	40010400 	.word	0x40010400
 800b810:	40014000 	.word	0x40014000
 800b814:	40014400 	.word	0x40014400
 800b818:	40014800 	.word	0x40014800
 800b81c:	40001800 	.word	0x40001800
 800b820:	40001c00 	.word	0x40001c00
 800b824:	40002000 	.word	0x40002000
 800b828:	0801985c 	.word	0x0801985c

0800b82c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b083      	sub	sp, #12
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800b834:	bf00      	nop
 800b836:	370c      	adds	r7, #12
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr

0800b840 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b084      	sub	sp, #16
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b850:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b858:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b860:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b868:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b86a:	7bfb      	ldrb	r3, [r7, #15]
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d108      	bne.n	800b882 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b870:	7bbb      	ldrb	r3, [r7, #14]
 800b872:	2b01      	cmp	r3, #1
 800b874:	d105      	bne.n	800b882 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b876:	7b7b      	ldrb	r3, [r7, #13]
 800b878:	2b01      	cmp	r3, #1
 800b87a:	d102      	bne.n	800b882 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b87c:	7b3b      	ldrb	r3, [r7, #12]
 800b87e:	2b01      	cmp	r3, #1
 800b880:	d001      	beq.n	800b886 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800b882:	2301      	movs	r3, #1
 800b884:	e045      	b.n	800b912 <HAL_TIM_OnePulse_Start_IT+0xd2>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2202      	movs	r2, #2
 800b88a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2202      	movs	r2, #2
 800b892:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2202      	movs	r2, #2
 800b89a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2202      	movs	r2, #2
 800b8a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	68da      	ldr	r2, [r3, #12]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f042 0202 	orr.w	r2, r2, #2
 800b8b4:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	68da      	ldr	r2, [r3, #12]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f042 0204 	orr.w	r2, r2, #4
 800b8c4:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	2100      	movs	r1, #0
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f002 f93c 	bl	800db4c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	2201      	movs	r2, #1
 800b8da:	2104      	movs	r1, #4
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f002 f935 	bl	800db4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4a0d      	ldr	r2, [pc, #52]	@ (800b91c <HAL_TIM_OnePulse_Start_IT+0xdc>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d004      	beq.n	800b8f6 <HAL_TIM_OnePulse_Start_IT+0xb6>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4a0b      	ldr	r2, [pc, #44]	@ (800b920 <HAL_TIM_OnePulse_Start_IT+0xe0>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d101      	bne.n	800b8fa <HAL_TIM_OnePulse_Start_IT+0xba>
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	e000      	b.n	800b8fc <HAL_TIM_OnePulse_Start_IT+0xbc>
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d007      	beq.n	800b910 <HAL_TIM_OnePulse_Start_IT+0xd0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b90e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800b910:	2300      	movs	r3, #0
}
 800b912:	4618      	mov	r0, r3
 800b914:	3710      	adds	r7, #16
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop
 800b91c:	40010000 	.word	0x40010000
 800b920:	40010400 	.word	0x40010400

0800b924 <HAL_TIM_OnePulse_Stop_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b082      	sub	sp, #8
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	68da      	ldr	r2, [r3, #12]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f022 0202 	bic.w	r2, r2, #2
 800b93c:	60da      	str	r2, [r3, #12]

  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	68da      	ldr	r2, [r3, #12]
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f022 0204 	bic.w	r2, r2, #4
 800b94c:	60da      	str	r2, [r3, #12]
  /* Disable the Capture compare and the Input Capture channels
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
  whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	2200      	movs	r2, #0
 800b954:	2100      	movs	r1, #0
 800b956:	4618      	mov	r0, r3
 800b958:	f002 f8f8 	bl	800db4c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	2200      	movs	r2, #0
 800b962:	2104      	movs	r1, #4
 800b964:	4618      	mov	r0, r3
 800b966:	f002 f8f1 	bl	800db4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	4a29      	ldr	r2, [pc, #164]	@ (800ba14 <HAL_TIM_OnePulse_Stop_IT+0xf0>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d004      	beq.n	800b97e <HAL_TIM_OnePulse_Stop_IT+0x5a>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	4a27      	ldr	r2, [pc, #156]	@ (800ba18 <HAL_TIM_OnePulse_Stop_IT+0xf4>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d101      	bne.n	800b982 <HAL_TIM_OnePulse_Stop_IT+0x5e>
 800b97e:	2301      	movs	r3, #1
 800b980:	e000      	b.n	800b984 <HAL_TIM_OnePulse_Stop_IT+0x60>
 800b982:	2300      	movs	r3, #0
 800b984:	2b00      	cmp	r3, #0
 800b986:	d017      	beq.n	800b9b8 <HAL_TIM_OnePulse_Stop_IT+0x94>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	6a1a      	ldr	r2, [r3, #32]
 800b98e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b992:	4013      	ands	r3, r2
 800b994:	2b00      	cmp	r3, #0
 800b996:	d10f      	bne.n	800b9b8 <HAL_TIM_OnePulse_Stop_IT+0x94>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	6a1a      	ldr	r2, [r3, #32]
 800b99e:	f240 4344 	movw	r3, #1092	@ 0x444
 800b9a2:	4013      	ands	r3, r2
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d107      	bne.n	800b9b8 <HAL_TIM_OnePulse_Stop_IT+0x94>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b9b6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	6a1a      	ldr	r2, [r3, #32]
 800b9be:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b9c2:	4013      	ands	r3, r2
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d10f      	bne.n	800b9e8 <HAL_TIM_OnePulse_Stop_IT+0xc4>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	6a1a      	ldr	r2, [r3, #32]
 800b9ce:	f240 4344 	movw	r3, #1092	@ 0x444
 800b9d2:	4013      	ands	r3, r2
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d107      	bne.n	800b9e8 <HAL_TIM_OnePulse_Stop_IT+0xc4>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	681a      	ldr	r2, [r3, #0]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f022 0201 	bic.w	r2, r2, #1
 800b9e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2201      	movs	r2, #1
 800ba04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 800ba08:	2300      	movs	r3, #0
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3708      	adds	r7, #8
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	40010000 	.word	0x40010000
 800ba18:	40010400 	.word	0x40010400

0800ba1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b084      	sub	sp, #16
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	68db      	ldr	r3, [r3, #12]
 800ba2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	691b      	ldr	r3, [r3, #16]
 800ba32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	f003 0302 	and.w	r3, r3, #2
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d020      	beq.n	800ba80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	f003 0302 	and.w	r3, r3, #2
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d01b      	beq.n	800ba80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f06f 0202 	mvn.w	r2, #2
 800ba50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2201      	movs	r2, #1
 800ba56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	699b      	ldr	r3, [r3, #24]
 800ba5e:	f003 0303 	and.w	r3, r3, #3
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d003      	beq.n	800ba6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f001 f9c8 	bl	800cdfc <HAL_TIM_IC_CaptureCallback>
 800ba6c:	e005      	b.n	800ba7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f001 f9ba 	bl	800cde8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f7f8 fe3f 	bl	80046f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	f003 0304 	and.w	r3, r3, #4
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d020      	beq.n	800bacc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	f003 0304 	and.w	r3, r3, #4
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d01b      	beq.n	800bacc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f06f 0204 	mvn.w	r2, #4
 800ba9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2202      	movs	r2, #2
 800baa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	699b      	ldr	r3, [r3, #24]
 800baaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d003      	beq.n	800baba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f001 f9a2 	bl	800cdfc <HAL_TIM_IC_CaptureCallback>
 800bab8:	e005      	b.n	800bac6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f001 f994 	bl	800cde8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f7f8 fe19 	bl	80046f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2200      	movs	r2, #0
 800baca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	f003 0308 	and.w	r3, r3, #8
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d020      	beq.n	800bb18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f003 0308 	and.w	r3, r3, #8
 800badc:	2b00      	cmp	r3, #0
 800bade:	d01b      	beq.n	800bb18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f06f 0208 	mvn.w	r2, #8
 800bae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2204      	movs	r2, #4
 800baee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	69db      	ldr	r3, [r3, #28]
 800baf6:	f003 0303 	and.w	r3, r3, #3
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d003      	beq.n	800bb06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f001 f97c 	bl	800cdfc <HAL_TIM_IC_CaptureCallback>
 800bb04:	e005      	b.n	800bb12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f001 f96e 	bl	800cde8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f7f8 fdf3 	bl	80046f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2200      	movs	r2, #0
 800bb16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	f003 0310 	and.w	r3, r3, #16
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d020      	beq.n	800bb64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f003 0310 	and.w	r3, r3, #16
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d01b      	beq.n	800bb64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f06f 0210 	mvn.w	r2, #16
 800bb34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2208      	movs	r2, #8
 800bb3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	69db      	ldr	r3, [r3, #28]
 800bb42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d003      	beq.n	800bb52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f001 f956 	bl	800cdfc <HAL_TIM_IC_CaptureCallback>
 800bb50:	e005      	b.n	800bb5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f001 f948 	bl	800cde8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f7f8 fdcd 	bl	80046f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2200      	movs	r2, #0
 800bb62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	f003 0301 	and.w	r3, r3, #1
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d00c      	beq.n	800bb88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	f003 0301 	and.w	r3, r3, #1
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d007      	beq.n	800bb88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f06f 0201 	mvn.w	r2, #1
 800bb80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f001 f926 	bl	800cdd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d104      	bne.n	800bb9c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d00c      	beq.n	800bbb6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d007      	beq.n	800bbb6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bbae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f002 fad9 	bl	800e168 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d00c      	beq.n	800bbda <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d007      	beq.n	800bbda <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bbd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f002 fad1 	bl	800e17c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d00c      	beq.n	800bbfe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d007      	beq.n	800bbfe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bbf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f001 f909 	bl	800ce10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	f003 0320 	and.w	r3, r3, #32
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d00c      	beq.n	800bc22 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f003 0320 	and.w	r3, r3, #32
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d007      	beq.n	800bc22 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f06f 0220 	mvn.w	r2, #32
 800bc1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f002 fa99 	bl	800e154 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bc22:	bf00      	nop
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
	...

0800bc2c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b086      	sub	sp, #24
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	60f8      	str	r0, [r7, #12]
 800bc34:	60b9      	str	r1, [r7, #8]
 800bc36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d016      	beq.n	800bc70 <HAL_TIM_OC_ConfigChannel+0x44>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2b04      	cmp	r3, #4
 800bc46:	d013      	beq.n	800bc70 <HAL_TIM_OC_ConfigChannel+0x44>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2b08      	cmp	r3, #8
 800bc4c:	d010      	beq.n	800bc70 <HAL_TIM_OC_ConfigChannel+0x44>
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2b0c      	cmp	r3, #12
 800bc52:	d00d      	beq.n	800bc70 <HAL_TIM_OC_ConfigChannel+0x44>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2b10      	cmp	r3, #16
 800bc58:	d00a      	beq.n	800bc70 <HAL_TIM_OC_ConfigChannel+0x44>
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2b14      	cmp	r3, #20
 800bc5e:	d007      	beq.n	800bc70 <HAL_TIM_OC_ConfigChannel+0x44>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2b3c      	cmp	r3, #60	@ 0x3c
 800bc64:	d004      	beq.n	800bc70 <HAL_TIM_OC_ConfigChannel+0x44>
 800bc66:	f640 71eb 	movw	r1, #4075	@ 0xfeb
 800bc6a:	488c      	ldr	r0, [pc, #560]	@ (800be9c <HAL_TIM_OC_ConfigChannel+0x270>)
 800bc6c:	f7fa fe9e 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d022      	beq.n	800bcbe <HAL_TIM_OC_ConfigChannel+0x92>
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	2b10      	cmp	r3, #16
 800bc7e:	d01e      	beq.n	800bcbe <HAL_TIM_OC_ConfigChannel+0x92>
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	2b20      	cmp	r3, #32
 800bc86:	d01a      	beq.n	800bcbe <HAL_TIM_OC_ConfigChannel+0x92>
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2b30      	cmp	r3, #48	@ 0x30
 800bc8e:	d016      	beq.n	800bcbe <HAL_TIM_OC_ConfigChannel+0x92>
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	2b50      	cmp	r3, #80	@ 0x50
 800bc96:	d012      	beq.n	800bcbe <HAL_TIM_OC_ConfigChannel+0x92>
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	2b40      	cmp	r3, #64	@ 0x40
 800bc9e:	d00e      	beq.n	800bcbe <HAL_TIM_OC_ConfigChannel+0x92>
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bca8:	d009      	beq.n	800bcbe <HAL_TIM_OC_ConfigChannel+0x92>
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	4a7c      	ldr	r2, [pc, #496]	@ (800bea0 <HAL_TIM_OC_ConfigChannel+0x274>)
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d004      	beq.n	800bcbe <HAL_TIM_OC_ConfigChannel+0x92>
 800bcb4:	f640 71ec 	movw	r1, #4076	@ 0xfec
 800bcb8:	4878      	ldr	r0, [pc, #480]	@ (800be9c <HAL_TIM_OC_ConfigChannel+0x270>)
 800bcba:	f7fa fe77 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	689b      	ldr	r3, [r3, #8]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d008      	beq.n	800bcd8 <HAL_TIM_OC_ConfigChannel+0xac>
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	689b      	ldr	r3, [r3, #8]
 800bcca:	2b02      	cmp	r3, #2
 800bccc:	d004      	beq.n	800bcd8 <HAL_TIM_OC_ConfigChannel+0xac>
 800bcce:	f640 71ed 	movw	r1, #4077	@ 0xfed
 800bcd2:	4872      	ldr	r0, [pc, #456]	@ (800be9c <HAL_TIM_OC_ConfigChannel+0x270>)
 800bcd4:	f7fa fe6a 	bl	80069ac <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bcde:	2b01      	cmp	r3, #1
 800bce0:	d101      	bne.n	800bce6 <HAL_TIM_OC_ConfigChannel+0xba>
 800bce2:	2302      	movs	r3, #2
 800bce4:	e152      	b.n	800bf8c <HAL_TIM_OC_ConfigChannel+0x360>
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	2201      	movs	r2, #1
 800bcea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2b14      	cmp	r3, #20
 800bcf2:	f200 8143 	bhi.w	800bf7c <HAL_TIM_OC_ConfigChannel+0x350>
 800bcf6:	a201      	add	r2, pc, #4	@ (adr r2, 800bcfc <HAL_TIM_OC_ConfigChannel+0xd0>)
 800bcf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcfc:	0800bd51 	.word	0x0800bd51
 800bd00:	0800bf7d 	.word	0x0800bf7d
 800bd04:	0800bf7d 	.word	0x0800bf7d
 800bd08:	0800bf7d 	.word	0x0800bf7d
 800bd0c:	0800bde1 	.word	0x0800bde1
 800bd10:	0800bf7d 	.word	0x0800bf7d
 800bd14:	0800bf7d 	.word	0x0800bf7d
 800bd18:	0800bf7d 	.word	0x0800bf7d
 800bd1c:	0800be49 	.word	0x0800be49
 800bd20:	0800bf7d 	.word	0x0800bf7d
 800bd24:	0800bf7d 	.word	0x0800bf7d
 800bd28:	0800bf7d 	.word	0x0800bf7d
 800bd2c:	0800bed1 	.word	0x0800bed1
 800bd30:	0800bf7d 	.word	0x0800bf7d
 800bd34:	0800bf7d 	.word	0x0800bf7d
 800bd38:	0800bf7d 	.word	0x0800bf7d
 800bd3c:	0800bf25 	.word	0x0800bf25
 800bd40:	0800bf7d 	.word	0x0800bf7d
 800bd44:	0800bf7d 	.word	0x0800bf7d
 800bd48:	0800bf7d 	.word	0x0800bf7d
 800bd4c:	0800bf51 	.word	0x0800bf51
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	4a53      	ldr	r2, [pc, #332]	@ (800bea4 <HAL_TIM_OC_ConfigChannel+0x278>)
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d03b      	beq.n	800bdd2 <HAL_TIM_OC_ConfigChannel+0x1a6>
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd62:	d036      	beq.n	800bdd2 <HAL_TIM_OC_ConfigChannel+0x1a6>
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	4a4f      	ldr	r2, [pc, #316]	@ (800bea8 <HAL_TIM_OC_ConfigChannel+0x27c>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d031      	beq.n	800bdd2 <HAL_TIM_OC_ConfigChannel+0x1a6>
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4a4e      	ldr	r2, [pc, #312]	@ (800beac <HAL_TIM_OC_ConfigChannel+0x280>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d02c      	beq.n	800bdd2 <HAL_TIM_OC_ConfigChannel+0x1a6>
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	4a4c      	ldr	r2, [pc, #304]	@ (800beb0 <HAL_TIM_OC_ConfigChannel+0x284>)
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d027      	beq.n	800bdd2 <HAL_TIM_OC_ConfigChannel+0x1a6>
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	4a4b      	ldr	r2, [pc, #300]	@ (800beb4 <HAL_TIM_OC_ConfigChannel+0x288>)
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d022      	beq.n	800bdd2 <HAL_TIM_OC_ConfigChannel+0x1a6>
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	4a49      	ldr	r2, [pc, #292]	@ (800beb8 <HAL_TIM_OC_ConfigChannel+0x28c>)
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d01d      	beq.n	800bdd2 <HAL_TIM_OC_ConfigChannel+0x1a6>
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	4a48      	ldr	r2, [pc, #288]	@ (800bebc <HAL_TIM_OC_ConfigChannel+0x290>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d018      	beq.n	800bdd2 <HAL_TIM_OC_ConfigChannel+0x1a6>
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	4a46      	ldr	r2, [pc, #280]	@ (800bec0 <HAL_TIM_OC_ConfigChannel+0x294>)
 800bda6:	4293      	cmp	r3, r2
 800bda8:	d013      	beq.n	800bdd2 <HAL_TIM_OC_ConfigChannel+0x1a6>
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4a45      	ldr	r2, [pc, #276]	@ (800bec4 <HAL_TIM_OC_ConfigChannel+0x298>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d00e      	beq.n	800bdd2 <HAL_TIM_OC_ConfigChannel+0x1a6>
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	4a43      	ldr	r2, [pc, #268]	@ (800bec8 <HAL_TIM_OC_ConfigChannel+0x29c>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d009      	beq.n	800bdd2 <HAL_TIM_OC_ConfigChannel+0x1a6>
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	4a42      	ldr	r2, [pc, #264]	@ (800becc <HAL_TIM_OC_ConfigChannel+0x2a0>)
 800bdc4:	4293      	cmp	r3, r2
 800bdc6:	d004      	beq.n	800bdd2 <HAL_TIM_OC_ConfigChannel+0x1a6>
 800bdc8:	f640 71f7 	movw	r1, #4087	@ 0xff7
 800bdcc:	4833      	ldr	r0, [pc, #204]	@ (800be9c <HAL_TIM_OC_ConfigChannel+0x270>)
 800bdce:	f7fa fded 	bl	80069ac <assert_failed>

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	68b9      	ldr	r1, [r7, #8]
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f001 f8cf 	bl	800cf7c <TIM_OC1_SetConfig>
      break;
 800bdde:	e0d0      	b.n	800bf82 <HAL_TIM_OC_ConfigChannel+0x356>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	4a2f      	ldr	r2, [pc, #188]	@ (800bea4 <HAL_TIM_OC_ConfigChannel+0x278>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d027      	beq.n	800be3a <HAL_TIM_OC_ConfigChannel+0x20e>
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bdf2:	d022      	beq.n	800be3a <HAL_TIM_OC_ConfigChannel+0x20e>
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	4a2b      	ldr	r2, [pc, #172]	@ (800bea8 <HAL_TIM_OC_ConfigChannel+0x27c>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d01d      	beq.n	800be3a <HAL_TIM_OC_ConfigChannel+0x20e>
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4a2a      	ldr	r2, [pc, #168]	@ (800beac <HAL_TIM_OC_ConfigChannel+0x280>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d018      	beq.n	800be3a <HAL_TIM_OC_ConfigChannel+0x20e>
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	4a28      	ldr	r2, [pc, #160]	@ (800beb0 <HAL_TIM_OC_ConfigChannel+0x284>)
 800be0e:	4293      	cmp	r3, r2
 800be10:	d013      	beq.n	800be3a <HAL_TIM_OC_ConfigChannel+0x20e>
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	4a27      	ldr	r2, [pc, #156]	@ (800beb4 <HAL_TIM_OC_ConfigChannel+0x288>)
 800be18:	4293      	cmp	r3, r2
 800be1a:	d00e      	beq.n	800be3a <HAL_TIM_OC_ConfigChannel+0x20e>
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	4a25      	ldr	r2, [pc, #148]	@ (800beb8 <HAL_TIM_OC_ConfigChannel+0x28c>)
 800be22:	4293      	cmp	r3, r2
 800be24:	d009      	beq.n	800be3a <HAL_TIM_OC_ConfigChannel+0x20e>
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4a26      	ldr	r2, [pc, #152]	@ (800bec4 <HAL_TIM_OC_ConfigChannel+0x298>)
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d004      	beq.n	800be3a <HAL_TIM_OC_ConfigChannel+0x20e>
 800be30:	f241 0101 	movw	r1, #4097	@ 0x1001
 800be34:	4819      	ldr	r0, [pc, #100]	@ (800be9c <HAL_TIM_OC_ConfigChannel+0x270>)
 800be36:	f7fa fdb9 	bl	80069ac <assert_failed>

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	68b9      	ldr	r1, [r7, #8]
 800be40:	4618      	mov	r0, r3
 800be42:	f001 f937 	bl	800d0b4 <TIM_OC2_SetConfig>
      break;
 800be46:	e09c      	b.n	800bf82 <HAL_TIM_OC_ConfigChannel+0x356>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	4a15      	ldr	r2, [pc, #84]	@ (800bea4 <HAL_TIM_OC_ConfigChannel+0x278>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d01d      	beq.n	800be8e <HAL_TIM_OC_ConfigChannel+0x262>
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be5a:	d018      	beq.n	800be8e <HAL_TIM_OC_ConfigChannel+0x262>
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	4a11      	ldr	r2, [pc, #68]	@ (800bea8 <HAL_TIM_OC_ConfigChannel+0x27c>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d013      	beq.n	800be8e <HAL_TIM_OC_ConfigChannel+0x262>
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4a10      	ldr	r2, [pc, #64]	@ (800beac <HAL_TIM_OC_ConfigChannel+0x280>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d00e      	beq.n	800be8e <HAL_TIM_OC_ConfigChannel+0x262>
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4a0e      	ldr	r2, [pc, #56]	@ (800beb0 <HAL_TIM_OC_ConfigChannel+0x284>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d009      	beq.n	800be8e <HAL_TIM_OC_ConfigChannel+0x262>
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	4a0d      	ldr	r2, [pc, #52]	@ (800beb4 <HAL_TIM_OC_ConfigChannel+0x288>)
 800be80:	4293      	cmp	r3, r2
 800be82:	d004      	beq.n	800be8e <HAL_TIM_OC_ConfigChannel+0x262>
 800be84:	f241 010b 	movw	r1, #4107	@ 0x100b
 800be88:	4804      	ldr	r0, [pc, #16]	@ (800be9c <HAL_TIM_OC_ConfigChannel+0x270>)
 800be8a:	f7fa fd8f 	bl	80069ac <assert_failed>

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	68b9      	ldr	r1, [r7, #8]
 800be94:	4618      	mov	r0, r3
 800be96:	f001 f9ad 	bl	800d1f4 <TIM_OC3_SetConfig>
      break;
 800be9a:	e072      	b.n	800bf82 <HAL_TIM_OC_ConfigChannel+0x356>
 800be9c:	0801985c 	.word	0x0801985c
 800bea0:	00010010 	.word	0x00010010
 800bea4:	40010000 	.word	0x40010000
 800bea8:	40000400 	.word	0x40000400
 800beac:	40000800 	.word	0x40000800
 800beb0:	40000c00 	.word	0x40000c00
 800beb4:	40010400 	.word	0x40010400
 800beb8:	40014000 	.word	0x40014000
 800bebc:	40014400 	.word	0x40014400
 800bec0:	40014800 	.word	0x40014800
 800bec4:	40001800 	.word	0x40001800
 800bec8:	40001c00 	.word	0x40001c00
 800becc:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	4a2f      	ldr	r2, [pc, #188]	@ (800bf94 <HAL_TIM_OC_ConfigChannel+0x368>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d01d      	beq.n	800bf16 <HAL_TIM_OC_ConfigChannel+0x2ea>
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bee2:	d018      	beq.n	800bf16 <HAL_TIM_OC_ConfigChannel+0x2ea>
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	4a2b      	ldr	r2, [pc, #172]	@ (800bf98 <HAL_TIM_OC_ConfigChannel+0x36c>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d013      	beq.n	800bf16 <HAL_TIM_OC_ConfigChannel+0x2ea>
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	4a2a      	ldr	r2, [pc, #168]	@ (800bf9c <HAL_TIM_OC_ConfigChannel+0x370>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d00e      	beq.n	800bf16 <HAL_TIM_OC_ConfigChannel+0x2ea>
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	4a28      	ldr	r2, [pc, #160]	@ (800bfa0 <HAL_TIM_OC_ConfigChannel+0x374>)
 800befe:	4293      	cmp	r3, r2
 800bf00:	d009      	beq.n	800bf16 <HAL_TIM_OC_ConfigChannel+0x2ea>
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	4a27      	ldr	r2, [pc, #156]	@ (800bfa4 <HAL_TIM_OC_ConfigChannel+0x378>)
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d004      	beq.n	800bf16 <HAL_TIM_OC_ConfigChannel+0x2ea>
 800bf0c:	f241 0115 	movw	r1, #4117	@ 0x1015
 800bf10:	4825      	ldr	r0, [pc, #148]	@ (800bfa8 <HAL_TIM_OC_ConfigChannel+0x37c>)
 800bf12:	f7fa fd4b 	bl	80069ac <assert_failed>

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	68b9      	ldr	r1, [r7, #8]
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f001 fa09 	bl	800d334 <TIM_OC4_SetConfig>
      break;
 800bf22:	e02e      	b.n	800bf82 <HAL_TIM_OC_ConfigChannel+0x356>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	4a1a      	ldr	r2, [pc, #104]	@ (800bf94 <HAL_TIM_OC_ConfigChannel+0x368>)
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d009      	beq.n	800bf42 <HAL_TIM_OC_ConfigChannel+0x316>
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	4a1c      	ldr	r2, [pc, #112]	@ (800bfa4 <HAL_TIM_OC_ConfigChannel+0x378>)
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d004      	beq.n	800bf42 <HAL_TIM_OC_ConfigChannel+0x316>
 800bf38:	f241 011f 	movw	r1, #4127	@ 0x101f
 800bf3c:	481a      	ldr	r0, [pc, #104]	@ (800bfa8 <HAL_TIM_OC_ConfigChannel+0x37c>)
 800bf3e:	f7fa fd35 	bl	80069ac <assert_failed>

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	68b9      	ldr	r1, [r7, #8]
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f001 fa59 	bl	800d400 <TIM_OC5_SetConfig>
      break;
 800bf4e:	e018      	b.n	800bf82 <HAL_TIM_OC_ConfigChannel+0x356>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a0f      	ldr	r2, [pc, #60]	@ (800bf94 <HAL_TIM_OC_ConfigChannel+0x368>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d009      	beq.n	800bf6e <HAL_TIM_OC_ConfigChannel+0x342>
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4a11      	ldr	r2, [pc, #68]	@ (800bfa4 <HAL_TIM_OC_ConfigChannel+0x378>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d004      	beq.n	800bf6e <HAL_TIM_OC_ConfigChannel+0x342>
 800bf64:	f241 0129 	movw	r1, #4137	@ 0x1029
 800bf68:	480f      	ldr	r0, [pc, #60]	@ (800bfa8 <HAL_TIM_OC_ConfigChannel+0x37c>)
 800bf6a:	f7fa fd1f 	bl	80069ac <assert_failed>

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	68b9      	ldr	r1, [r7, #8]
 800bf74:	4618      	mov	r0, r3
 800bf76:	f001 fa95 	bl	800d4a4 <TIM_OC6_SetConfig>
      break;
 800bf7a:	e002      	b.n	800bf82 <HAL_TIM_OC_ConfigChannel+0x356>
    }

    default:
      status = HAL_ERROR;
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	75fb      	strb	r3, [r7, #23]
      break;
 800bf80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2200      	movs	r2, #0
 800bf86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bf8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3718      	adds	r7, #24
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}
 800bf94:	40010000 	.word	0x40010000
 800bf98:	40000400 	.word	0x40000400
 800bf9c:	40000800 	.word	0x40000800
 800bfa0:	40000c00 	.word	0x40000c00
 800bfa4:	40010400 	.word	0x40010400
 800bfa8:	0801985c 	.word	0x0801985c

0800bfac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b086      	sub	sp, #24
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	60f8      	str	r0, [r7, #12]
 800bfb4:	60b9      	str	r1, [r7, #8]
 800bfb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d016      	beq.n	800bff0 <HAL_TIM_PWM_ConfigChannel+0x44>
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2b04      	cmp	r3, #4
 800bfc6:	d013      	beq.n	800bff0 <HAL_TIM_PWM_ConfigChannel+0x44>
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2b08      	cmp	r3, #8
 800bfcc:	d010      	beq.n	800bff0 <HAL_TIM_PWM_ConfigChannel+0x44>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2b0c      	cmp	r3, #12
 800bfd2:	d00d      	beq.n	800bff0 <HAL_TIM_PWM_ConfigChannel+0x44>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2b10      	cmp	r3, #16
 800bfd8:	d00a      	beq.n	800bff0 <HAL_TIM_PWM_ConfigChannel+0x44>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2b14      	cmp	r3, #20
 800bfde:	d007      	beq.n	800bff0 <HAL_TIM_PWM_ConfigChannel+0x44>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2b3c      	cmp	r3, #60	@ 0x3c
 800bfe4:	d004      	beq.n	800bff0 <HAL_TIM_PWM_ConfigChannel+0x44>
 800bfe6:	f241 01b3 	movw	r1, #4275	@ 0x10b3
 800bfea:	4895      	ldr	r0, [pc, #596]	@ (800c240 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800bfec:	f7fa fcde 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	2b60      	cmp	r3, #96	@ 0x60
 800bff6:	d01c      	beq.n	800c032 <HAL_TIM_PWM_ConfigChannel+0x86>
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	2b70      	cmp	r3, #112	@ 0x70
 800bffe:	d018      	beq.n	800c032 <HAL_TIM_PWM_ConfigChannel+0x86>
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	4a8f      	ldr	r2, [pc, #572]	@ (800c244 <HAL_TIM_PWM_ConfigChannel+0x298>)
 800c006:	4293      	cmp	r3, r2
 800c008:	d013      	beq.n	800c032 <HAL_TIM_PWM_ConfigChannel+0x86>
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	4a8e      	ldr	r2, [pc, #568]	@ (800c248 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800c010:	4293      	cmp	r3, r2
 800c012:	d00e      	beq.n	800c032 <HAL_TIM_PWM_ConfigChannel+0x86>
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4a8c      	ldr	r2, [pc, #560]	@ (800c24c <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d009      	beq.n	800c032 <HAL_TIM_PWM_ConfigChannel+0x86>
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	4a8b      	ldr	r2, [pc, #556]	@ (800c250 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 800c024:	4293      	cmp	r3, r2
 800c026:	d004      	beq.n	800c032 <HAL_TIM_PWM_ConfigChannel+0x86>
 800c028:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 800c02c:	4884      	ldr	r0, [pc, #528]	@ (800c240 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800c02e:	f7fa fcbd 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	689b      	ldr	r3, [r3, #8]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d008      	beq.n	800c04c <HAL_TIM_PWM_ConfigChannel+0xa0>
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	689b      	ldr	r3, [r3, #8]
 800c03e:	2b02      	cmp	r3, #2
 800c040:	d004      	beq.n	800c04c <HAL_TIM_PWM_ConfigChannel+0xa0>
 800c042:	f241 01b5 	movw	r1, #4277	@ 0x10b5
 800c046:	487e      	ldr	r0, [pc, #504]	@ (800c240 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800c048:	f7fa fcb0 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	691b      	ldr	r3, [r3, #16]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d008      	beq.n	800c066 <HAL_TIM_PWM_ConfigChannel+0xba>
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	691b      	ldr	r3, [r3, #16]
 800c058:	2b04      	cmp	r3, #4
 800c05a:	d004      	beq.n	800c066 <HAL_TIM_PWM_ConfigChannel+0xba>
 800c05c:	f241 01b6 	movw	r1, #4278	@ 0x10b6
 800c060:	4877      	ldr	r0, [pc, #476]	@ (800c240 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800c062:	f7fa fca3 	bl	80069ac <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d101      	bne.n	800c074 <HAL_TIM_PWM_ConfigChannel+0xc8>
 800c070:	2302      	movs	r3, #2
 800c072:	e1f3      	b.n	800c45c <HAL_TIM_PWM_ConfigChannel+0x4b0>
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2201      	movs	r2, #1
 800c078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2b14      	cmp	r3, #20
 800c080:	f200 81e4 	bhi.w	800c44c <HAL_TIM_PWM_ConfigChannel+0x4a0>
 800c084:	a201      	add	r2, pc, #4	@ (adr r2, 800c08c <HAL_TIM_PWM_ConfigChannel+0xe0>)
 800c086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c08a:	bf00      	nop
 800c08c:	0800c0e1 	.word	0x0800c0e1
 800c090:	0800c44d 	.word	0x0800c44d
 800c094:	0800c44d 	.word	0x0800c44d
 800c098:	0800c44d 	.word	0x0800c44d
 800c09c:	0800c1a3 	.word	0x0800c1a3
 800c0a0:	0800c44d 	.word	0x0800c44d
 800c0a4:	0800c44d 	.word	0x0800c44d
 800c0a8:	0800c44d 	.word	0x0800c44d
 800c0ac:	0800c281 	.word	0x0800c281
 800c0b0:	0800c44d 	.word	0x0800c44d
 800c0b4:	0800c44d 	.word	0x0800c44d
 800c0b8:	0800c44d 	.word	0x0800c44d
 800c0bc:	0800c307 	.word	0x0800c307
 800c0c0:	0800c44d 	.word	0x0800c44d
 800c0c4:	0800c44d 	.word	0x0800c44d
 800c0c8:	0800c44d 	.word	0x0800c44d
 800c0cc:	0800c38f 	.word	0x0800c38f
 800c0d0:	0800c44d 	.word	0x0800c44d
 800c0d4:	0800c44d 	.word	0x0800c44d
 800c0d8:	0800c44d 	.word	0x0800c44d
 800c0dc:	0800c3ed 	.word	0x0800c3ed
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4a5b      	ldr	r2, [pc, #364]	@ (800c254 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	d03b      	beq.n	800c162 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0f2:	d036      	beq.n	800c162 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	4a57      	ldr	r2, [pc, #348]	@ (800c258 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d031      	beq.n	800c162 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	4a56      	ldr	r2, [pc, #344]	@ (800c25c <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 800c104:	4293      	cmp	r3, r2
 800c106:	d02c      	beq.n	800c162 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a54      	ldr	r2, [pc, #336]	@ (800c260 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d027      	beq.n	800c162 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	4a53      	ldr	r2, [pc, #332]	@ (800c264 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800c118:	4293      	cmp	r3, r2
 800c11a:	d022      	beq.n	800c162 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4a51      	ldr	r2, [pc, #324]	@ (800c268 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d01d      	beq.n	800c162 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	4a50      	ldr	r2, [pc, #320]	@ (800c26c <HAL_TIM_PWM_ConfigChannel+0x2c0>)
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d018      	beq.n	800c162 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4a4e      	ldr	r2, [pc, #312]	@ (800c270 <HAL_TIM_PWM_ConfigChannel+0x2c4>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d013      	beq.n	800c162 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	4a4d      	ldr	r2, [pc, #308]	@ (800c274 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d00e      	beq.n	800c162 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	4a4b      	ldr	r2, [pc, #300]	@ (800c278 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d009      	beq.n	800c162 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	4a4a      	ldr	r2, [pc, #296]	@ (800c27c <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d004      	beq.n	800c162 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800c158:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 800c15c:	4838      	ldr	r0, [pc, #224]	@ (800c240 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800c15e:	f7fa fc25 	bl	80069ac <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	68b9      	ldr	r1, [r7, #8]
 800c168:	4618      	mov	r0, r3
 800c16a:	f000 ff07 	bl	800cf7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	699a      	ldr	r2, [r3, #24]
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f042 0208 	orr.w	r2, r2, #8
 800c17c:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	699a      	ldr	r2, [r3, #24]
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f022 0204 	bic.w	r2, r2, #4
 800c18c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	6999      	ldr	r1, [r3, #24]
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	691a      	ldr	r2, [r3, #16]
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	430a      	orrs	r2, r1
 800c19e:	619a      	str	r2, [r3, #24]
      break;
 800c1a0:	e157      	b.n	800c452 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	4a2b      	ldr	r2, [pc, #172]	@ (800c254 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d027      	beq.n	800c1fc <HAL_TIM_PWM_ConfigChannel+0x250>
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1b4:	d022      	beq.n	800c1fc <HAL_TIM_PWM_ConfigChannel+0x250>
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4a27      	ldr	r2, [pc, #156]	@ (800c258 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d01d      	beq.n	800c1fc <HAL_TIM_PWM_ConfigChannel+0x250>
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	4a25      	ldr	r2, [pc, #148]	@ (800c25c <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	d018      	beq.n	800c1fc <HAL_TIM_PWM_ConfigChannel+0x250>
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	4a24      	ldr	r2, [pc, #144]	@ (800c260 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d013      	beq.n	800c1fc <HAL_TIM_PWM_ConfigChannel+0x250>
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4a22      	ldr	r2, [pc, #136]	@ (800c264 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d00e      	beq.n	800c1fc <HAL_TIM_PWM_ConfigChannel+0x250>
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	4a21      	ldr	r2, [pc, #132]	@ (800c268 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d009      	beq.n	800c1fc <HAL_TIM_PWM_ConfigChannel+0x250>
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4a21      	ldr	r2, [pc, #132]	@ (800c274 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d004      	beq.n	800c1fc <HAL_TIM_PWM_ConfigChannel+0x250>
 800c1f2:	f241 01d1 	movw	r1, #4305	@ 0x10d1
 800c1f6:	4812      	ldr	r0, [pc, #72]	@ (800c240 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800c1f8:	f7fa fbd8 	bl	80069ac <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	68b9      	ldr	r1, [r7, #8]
 800c202:	4618      	mov	r0, r3
 800c204:	f000 ff56 	bl	800d0b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	699a      	ldr	r2, [r3, #24]
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	699a      	ldr	r2, [r3, #24]
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	6999      	ldr	r1, [r3, #24]
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	691b      	ldr	r3, [r3, #16]
 800c232:	021a      	lsls	r2, r3, #8
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	430a      	orrs	r2, r1
 800c23a:	619a      	str	r2, [r3, #24]
      break;
 800c23c:	e109      	b.n	800c452 <HAL_TIM_PWM_ConfigChannel+0x4a6>
 800c23e:	bf00      	nop
 800c240:	0801985c 	.word	0x0801985c
 800c244:	00010040 	.word	0x00010040
 800c248:	00010050 	.word	0x00010050
 800c24c:	00010060 	.word	0x00010060
 800c250:	00010070 	.word	0x00010070
 800c254:	40010000 	.word	0x40010000
 800c258:	40000400 	.word	0x40000400
 800c25c:	40000800 	.word	0x40000800
 800c260:	40000c00 	.word	0x40000c00
 800c264:	40010400 	.word	0x40010400
 800c268:	40014000 	.word	0x40014000
 800c26c:	40014400 	.word	0x40014400
 800c270:	40014800 	.word	0x40014800
 800c274:	40001800 	.word	0x40001800
 800c278:	40001c00 	.word	0x40001c00
 800c27c:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4a77      	ldr	r2, [pc, #476]	@ (800c464 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d01d      	beq.n	800c2c6 <HAL_TIM_PWM_ConfigChannel+0x31a>
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c292:	d018      	beq.n	800c2c6 <HAL_TIM_PWM_ConfigChannel+0x31a>
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	4a73      	ldr	r2, [pc, #460]	@ (800c468 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d013      	beq.n	800c2c6 <HAL_TIM_PWM_ConfigChannel+0x31a>
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	4a72      	ldr	r2, [pc, #456]	@ (800c46c <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d00e      	beq.n	800c2c6 <HAL_TIM_PWM_ConfigChannel+0x31a>
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	4a70      	ldr	r2, [pc, #448]	@ (800c470 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d009      	beq.n	800c2c6 <HAL_TIM_PWM_ConfigChannel+0x31a>
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	4a6f      	ldr	r2, [pc, #444]	@ (800c474 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800c2b8:	4293      	cmp	r3, r2
 800c2ba:	d004      	beq.n	800c2c6 <HAL_TIM_PWM_ConfigChannel+0x31a>
 800c2bc:	f241 01e2 	movw	r1, #4322	@ 0x10e2
 800c2c0:	486d      	ldr	r0, [pc, #436]	@ (800c478 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800c2c2:	f7fa fb73 	bl	80069ac <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	68b9      	ldr	r1, [r7, #8]
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f000 ff91 	bl	800d1f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	69da      	ldr	r2, [r3, #28]
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f042 0208 	orr.w	r2, r2, #8
 800c2e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	69da      	ldr	r2, [r3, #28]
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f022 0204 	bic.w	r2, r2, #4
 800c2f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	69d9      	ldr	r1, [r3, #28]
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	691a      	ldr	r2, [r3, #16]
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	430a      	orrs	r2, r1
 800c302:	61da      	str	r2, [r3, #28]
      break;
 800c304:	e0a5      	b.n	800c452 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	4a56      	ldr	r2, [pc, #344]	@ (800c464 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d01d      	beq.n	800c34c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c318:	d018      	beq.n	800c34c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	4a52      	ldr	r2, [pc, #328]	@ (800c468 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 800c320:	4293      	cmp	r3, r2
 800c322:	d013      	beq.n	800c34c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	4a50      	ldr	r2, [pc, #320]	@ (800c46c <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d00e      	beq.n	800c34c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	4a4f      	ldr	r2, [pc, #316]	@ (800c470 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 800c334:	4293      	cmp	r3, r2
 800c336:	d009      	beq.n	800c34c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4a4d      	ldr	r2, [pc, #308]	@ (800c474 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d004      	beq.n	800c34c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800c342:	f241 01f3 	movw	r1, #4339	@ 0x10f3
 800c346:	484c      	ldr	r0, [pc, #304]	@ (800c478 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800c348:	f7fa fb30 	bl	80069ac <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	68b9      	ldr	r1, [r7, #8]
 800c352:	4618      	mov	r0, r3
 800c354:	f000 ffee 	bl	800d334 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	69da      	ldr	r2, [r3, #28]
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c366:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	69da      	ldr	r2, [r3, #28]
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c376:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	69d9      	ldr	r1, [r3, #28]
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	691b      	ldr	r3, [r3, #16]
 800c382:	021a      	lsls	r2, r3, #8
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	430a      	orrs	r2, r1
 800c38a:	61da      	str	r2, [r3, #28]
      break;
 800c38c:	e061      	b.n	800c452 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	4a34      	ldr	r2, [pc, #208]	@ (800c464 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 800c394:	4293      	cmp	r3, r2
 800c396:	d009      	beq.n	800c3ac <HAL_TIM_PWM_ConfigChannel+0x400>
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	4a35      	ldr	r2, [pc, #212]	@ (800c474 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800c39e:	4293      	cmp	r3, r2
 800c3a0:	d004      	beq.n	800c3ac <HAL_TIM_PWM_ConfigChannel+0x400>
 800c3a2:	f241 1104 	movw	r1, #4356	@ 0x1104
 800c3a6:	4834      	ldr	r0, [pc, #208]	@ (800c478 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800c3a8:	f7fa fb00 	bl	80069ac <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	68b9      	ldr	r1, [r7, #8]
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f001 f824 	bl	800d400 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f042 0208 	orr.w	r2, r2, #8
 800c3c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f022 0204 	bic.w	r2, r2, #4
 800c3d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	691a      	ldr	r2, [r3, #16]
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	430a      	orrs	r2, r1
 800c3e8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c3ea:	e032      	b.n	800c452 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4a1c      	ldr	r2, [pc, #112]	@ (800c464 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d009      	beq.n	800c40a <HAL_TIM_PWM_ConfigChannel+0x45e>
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4a1e      	ldr	r2, [pc, #120]	@ (800c474 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	d004      	beq.n	800c40a <HAL_TIM_PWM_ConfigChannel+0x45e>
 800c400:	f241 1115 	movw	r1, #4373	@ 0x1115
 800c404:	481c      	ldr	r0, [pc, #112]	@ (800c478 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800c406:	f7fa fad1 	bl	80069ac <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	68b9      	ldr	r1, [r7, #8]
 800c410:	4618      	mov	r0, r3
 800c412:	f001 f847 	bl	800d4a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c424:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c434:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	691b      	ldr	r3, [r3, #16]
 800c440:	021a      	lsls	r2, r3, #8
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	430a      	orrs	r2, r1
 800c448:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c44a:	e002      	b.n	800c452 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    default:
      status = HAL_ERROR;
 800c44c:	2301      	movs	r3, #1
 800c44e:	75fb      	strb	r3, [r7, #23]
      break;
 800c450:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2200      	movs	r2, #0
 800c456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c45a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3718      	adds	r7, #24
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}
 800c464:	40010000 	.word	0x40010000
 800c468:	40000400 	.word	0x40000400
 800c46c:	40000800 	.word	0x40000800
 800c470:	40000c00 	.word	0x40000c00
 800c474:	40010400 	.word	0x40010400
 800c478:	0801985c 	.word	0x0801985c

0800c47c <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	4a3a      	ldr	r2, [pc, #232]	@ (800c574 <HAL_TIM_GenerateEvent+0xf8>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d045      	beq.n	800c51c <HAL_TIM_GenerateEvent+0xa0>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c498:	d040      	beq.n	800c51c <HAL_TIM_GenerateEvent+0xa0>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4a36      	ldr	r2, [pc, #216]	@ (800c578 <HAL_TIM_GenerateEvent+0xfc>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d03b      	beq.n	800c51c <HAL_TIM_GenerateEvent+0xa0>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4a34      	ldr	r2, [pc, #208]	@ (800c57c <HAL_TIM_GenerateEvent+0x100>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d036      	beq.n	800c51c <HAL_TIM_GenerateEvent+0xa0>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a33      	ldr	r2, [pc, #204]	@ (800c580 <HAL_TIM_GenerateEvent+0x104>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d031      	beq.n	800c51c <HAL_TIM_GenerateEvent+0xa0>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a31      	ldr	r2, [pc, #196]	@ (800c584 <HAL_TIM_GenerateEvent+0x108>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d02c      	beq.n	800c51c <HAL_TIM_GenerateEvent+0xa0>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4a30      	ldr	r2, [pc, #192]	@ (800c588 <HAL_TIM_GenerateEvent+0x10c>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d027      	beq.n	800c51c <HAL_TIM_GenerateEvent+0xa0>
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4a2e      	ldr	r2, [pc, #184]	@ (800c58c <HAL_TIM_GenerateEvent+0x110>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d022      	beq.n	800c51c <HAL_TIM_GenerateEvent+0xa0>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4a2d      	ldr	r2, [pc, #180]	@ (800c590 <HAL_TIM_GenerateEvent+0x114>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d01d      	beq.n	800c51c <HAL_TIM_GenerateEvent+0xa0>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	4a2b      	ldr	r2, [pc, #172]	@ (800c594 <HAL_TIM_GenerateEvent+0x118>)
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d018      	beq.n	800c51c <HAL_TIM_GenerateEvent+0xa0>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	4a2a      	ldr	r2, [pc, #168]	@ (800c598 <HAL_TIM_GenerateEvent+0x11c>)
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d013      	beq.n	800c51c <HAL_TIM_GenerateEvent+0xa0>
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4a28      	ldr	r2, [pc, #160]	@ (800c59c <HAL_TIM_GenerateEvent+0x120>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d00e      	beq.n	800c51c <HAL_TIM_GenerateEvent+0xa0>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	4a27      	ldr	r2, [pc, #156]	@ (800c5a0 <HAL_TIM_GenerateEvent+0x124>)
 800c504:	4293      	cmp	r3, r2
 800c506:	d009      	beq.n	800c51c <HAL_TIM_GenerateEvent+0xa0>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	4a25      	ldr	r2, [pc, #148]	@ (800c5a4 <HAL_TIM_GenerateEvent+0x128>)
 800c50e:	4293      	cmp	r3, r2
 800c510:	d004      	beq.n	800c51c <HAL_TIM_GenerateEvent+0xa0>
 800c512:	f241 4184 	movw	r1, #5252	@ 0x1484
 800c516:	4824      	ldr	r0, [pc, #144]	@ (800c5a8 <HAL_TIM_GenerateEvent+0x12c>)
 800c518:	f7fa fa48 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c522:	d202      	bcs.n	800c52a <HAL_TIM_GenerateEvent+0xae>
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d104      	bne.n	800c534 <HAL_TIM_GenerateEvent+0xb8>
 800c52a:	f241 4185 	movw	r1, #5253	@ 0x1485
 800c52e:	481e      	ldr	r0, [pc, #120]	@ (800c5a8 <HAL_TIM_GenerateEvent+0x12c>)
 800c530:	f7fa fa3c 	bl	80069ac <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d101      	bne.n	800c542 <HAL_TIM_GenerateEvent+0xc6>
 800c53e:	2302      	movs	r3, #2
 800c540:	e014      	b.n	800c56c <HAL_TIM_GenerateEvent+0xf0>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2201      	movs	r2, #1
 800c546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2202      	movs	r2, #2
 800c54e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	683a      	ldr	r2, [r7, #0]
 800c558:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2201      	movs	r2, #1
 800c55e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2200      	movs	r2, #0
 800c566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800c56a:	2300      	movs	r3, #0
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3708      	adds	r7, #8
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}
 800c574:	40010000 	.word	0x40010000
 800c578:	40000400 	.word	0x40000400
 800c57c:	40000800 	.word	0x40000800
 800c580:	40000c00 	.word	0x40000c00
 800c584:	40001000 	.word	0x40001000
 800c588:	40001400 	.word	0x40001400
 800c58c:	40010400 	.word	0x40010400
 800c590:	40014000 	.word	0x40014000
 800c594:	40014400 	.word	0x40014400
 800c598:	40014800 	.word	0x40014800
 800c59c:	40001800 	.word	0x40001800
 800c5a0:	40001c00 	.word	0x40001c00
 800c5a4:	40002000 	.word	0x40002000
 800c5a8:	0801985c 	.word	0x0801985c

0800c5ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b084      	sub	sp, #16
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c5c0:	2b01      	cmp	r3, #1
 800c5c2:	d101      	bne.n	800c5c8 <HAL_TIM_ConfigClockSource+0x1c>
 800c5c4:	2302      	movs	r3, #2
 800c5c6:	e332      	b.n	800cc2e <HAL_TIM_ConfigClockSource+0x682>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2202      	movs	r2, #2
 800c5d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c5e0:	d029      	beq.n	800c636 <HAL_TIM_ConfigClockSource+0x8a>
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	2b70      	cmp	r3, #112	@ 0x70
 800c5e8:	d025      	beq.n	800c636 <HAL_TIM_ConfigClockSource+0x8a>
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c5f2:	d020      	beq.n	800c636 <HAL_TIM_ConfigClockSource+0x8a>
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	2b40      	cmp	r3, #64	@ 0x40
 800c5fa:	d01c      	beq.n	800c636 <HAL_TIM_ConfigClockSource+0x8a>
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	2b50      	cmp	r3, #80	@ 0x50
 800c602:	d018      	beq.n	800c636 <HAL_TIM_ConfigClockSource+0x8a>
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	2b60      	cmp	r3, #96	@ 0x60
 800c60a:	d014      	beq.n	800c636 <HAL_TIM_ConfigClockSource+0x8a>
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d010      	beq.n	800c636 <HAL_TIM_ConfigClockSource+0x8a>
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	2b10      	cmp	r3, #16
 800c61a:	d00c      	beq.n	800c636 <HAL_TIM_ConfigClockSource+0x8a>
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	2b20      	cmp	r3, #32
 800c622:	d008      	beq.n	800c636 <HAL_TIM_ConfigClockSource+0x8a>
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	2b30      	cmp	r3, #48	@ 0x30
 800c62a:	d004      	beq.n	800c636 <HAL_TIM_ConfigClockSource+0x8a>
 800c62c:	f241 5151 	movw	r1, #5457	@ 0x1551
 800c630:	4893      	ldr	r0, [pc, #588]	@ (800c880 <HAL_TIM_ConfigClockSource+0x2d4>)
 800c632:	f7fa f9bb 	bl	80069ac <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	689b      	ldr	r3, [r3, #8]
 800c63c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c63e:	68ba      	ldr	r2, [r7, #8]
 800c640:	4b90      	ldr	r3, [pc, #576]	@ (800c884 <HAL_TIM_ConfigClockSource+0x2d8>)
 800c642:	4013      	ands	r3, r2
 800c644:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c64c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	68ba      	ldr	r2, [r7, #8]
 800c654:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c65e:	f000 812d 	beq.w	800c8bc <HAL_TIM_ConfigClockSource+0x310>
 800c662:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c666:	f200 82d5 	bhi.w	800cc14 <HAL_TIM_ConfigClockSource+0x668>
 800c66a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c66e:	d02e      	beq.n	800c6ce <HAL_TIM_ConfigClockSource+0x122>
 800c670:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c674:	f200 82ce 	bhi.w	800cc14 <HAL_TIM_ConfigClockSource+0x668>
 800c678:	2b70      	cmp	r3, #112	@ 0x70
 800c67a:	f000 8082 	beq.w	800c782 <HAL_TIM_ConfigClockSource+0x1d6>
 800c67e:	2b70      	cmp	r3, #112	@ 0x70
 800c680:	f200 82c8 	bhi.w	800cc14 <HAL_TIM_ConfigClockSource+0x668>
 800c684:	2b60      	cmp	r3, #96	@ 0x60
 800c686:	f000 81e0 	beq.w	800ca4a <HAL_TIM_ConfigClockSource+0x49e>
 800c68a:	2b60      	cmp	r3, #96	@ 0x60
 800c68c:	f200 82c2 	bhi.w	800cc14 <HAL_TIM_ConfigClockSource+0x668>
 800c690:	2b50      	cmp	r3, #80	@ 0x50
 800c692:	f000 8184 	beq.w	800c99e <HAL_TIM_ConfigClockSource+0x3f2>
 800c696:	2b50      	cmp	r3, #80	@ 0x50
 800c698:	f200 82bc 	bhi.w	800cc14 <HAL_TIM_ConfigClockSource+0x668>
 800c69c:	2b40      	cmp	r3, #64	@ 0x40
 800c69e:	f000 8237 	beq.w	800cb10 <HAL_TIM_ConfigClockSource+0x564>
 800c6a2:	2b40      	cmp	r3, #64	@ 0x40
 800c6a4:	f200 82b6 	bhi.w	800cc14 <HAL_TIM_ConfigClockSource+0x668>
 800c6a8:	2b30      	cmp	r3, #48	@ 0x30
 800c6aa:	f000 8287 	beq.w	800cbbc <HAL_TIM_ConfigClockSource+0x610>
 800c6ae:	2b30      	cmp	r3, #48	@ 0x30
 800c6b0:	f200 82b0 	bhi.w	800cc14 <HAL_TIM_ConfigClockSource+0x668>
 800c6b4:	2b20      	cmp	r3, #32
 800c6b6:	f000 8281 	beq.w	800cbbc <HAL_TIM_ConfigClockSource+0x610>
 800c6ba:	2b20      	cmp	r3, #32
 800c6bc:	f200 82aa 	bhi.w	800cc14 <HAL_TIM_ConfigClockSource+0x668>
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	f000 827b 	beq.w	800cbbc <HAL_TIM_ConfigClockSource+0x610>
 800c6c6:	2b10      	cmp	r3, #16
 800c6c8:	f000 8278 	beq.w	800cbbc <HAL_TIM_ConfigClockSource+0x610>
 800c6cc:	e2a2      	b.n	800cc14 <HAL_TIM_ConfigClockSource+0x668>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	4a6d      	ldr	r2, [pc, #436]	@ (800c888 <HAL_TIM_ConfigClockSource+0x2dc>)
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	f000 82a0 	beq.w	800cc1a <HAL_TIM_ConfigClockSource+0x66e>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6e2:	f000 829a 	beq.w	800cc1a <HAL_TIM_ConfigClockSource+0x66e>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4a68      	ldr	r2, [pc, #416]	@ (800c88c <HAL_TIM_ConfigClockSource+0x2e0>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	f000 8294 	beq.w	800cc1a <HAL_TIM_ConfigClockSource+0x66e>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	4a66      	ldr	r2, [pc, #408]	@ (800c890 <HAL_TIM_ConfigClockSource+0x2e4>)
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	f000 828e 	beq.w	800cc1a <HAL_TIM_ConfigClockSource+0x66e>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4a64      	ldr	r2, [pc, #400]	@ (800c894 <HAL_TIM_ConfigClockSource+0x2e8>)
 800c704:	4293      	cmp	r3, r2
 800c706:	f000 8288 	beq.w	800cc1a <HAL_TIM_ConfigClockSource+0x66e>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	4a62      	ldr	r2, [pc, #392]	@ (800c898 <HAL_TIM_ConfigClockSource+0x2ec>)
 800c710:	4293      	cmp	r3, r2
 800c712:	f000 8282 	beq.w	800cc1a <HAL_TIM_ConfigClockSource+0x66e>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4a60      	ldr	r2, [pc, #384]	@ (800c89c <HAL_TIM_ConfigClockSource+0x2f0>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	f000 827c 	beq.w	800cc1a <HAL_TIM_ConfigClockSource+0x66e>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4a5e      	ldr	r2, [pc, #376]	@ (800c8a0 <HAL_TIM_ConfigClockSource+0x2f4>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	f000 8276 	beq.w	800cc1a <HAL_TIM_ConfigClockSource+0x66e>
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	4a5c      	ldr	r2, [pc, #368]	@ (800c8a4 <HAL_TIM_ConfigClockSource+0x2f8>)
 800c734:	4293      	cmp	r3, r2
 800c736:	f000 8270 	beq.w	800cc1a <HAL_TIM_ConfigClockSource+0x66e>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	4a5a      	ldr	r2, [pc, #360]	@ (800c8a8 <HAL_TIM_ConfigClockSource+0x2fc>)
 800c740:	4293      	cmp	r3, r2
 800c742:	f000 826a 	beq.w	800cc1a <HAL_TIM_ConfigClockSource+0x66e>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	4a58      	ldr	r2, [pc, #352]	@ (800c8ac <HAL_TIM_ConfigClockSource+0x300>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	f000 8264 	beq.w	800cc1a <HAL_TIM_ConfigClockSource+0x66e>
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4a56      	ldr	r2, [pc, #344]	@ (800c8b0 <HAL_TIM_ConfigClockSource+0x304>)
 800c758:	4293      	cmp	r3, r2
 800c75a:	f000 825e 	beq.w	800cc1a <HAL_TIM_ConfigClockSource+0x66e>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	4a54      	ldr	r2, [pc, #336]	@ (800c8b4 <HAL_TIM_ConfigClockSource+0x308>)
 800c764:	4293      	cmp	r3, r2
 800c766:	f000 8258 	beq.w	800cc1a <HAL_TIM_ConfigClockSource+0x66e>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	4a52      	ldr	r2, [pc, #328]	@ (800c8b8 <HAL_TIM_ConfigClockSource+0x30c>)
 800c770:	4293      	cmp	r3, r2
 800c772:	f000 8252 	beq.w	800cc1a <HAL_TIM_ConfigClockSource+0x66e>
 800c776:	f241 515d 	movw	r1, #5469	@ 0x155d
 800c77a:	4841      	ldr	r0, [pc, #260]	@ (800c880 <HAL_TIM_ConfigClockSource+0x2d4>)
 800c77c:	f7fa f916 	bl	80069ac <assert_failed>
      break;
 800c780:	e24b      	b.n	800cc1a <HAL_TIM_ConfigClockSource+0x66e>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	4a40      	ldr	r2, [pc, #256]	@ (800c888 <HAL_TIM_ConfigClockSource+0x2dc>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	d027      	beq.n	800c7dc <HAL_TIM_ConfigClockSource+0x230>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c794:	d022      	beq.n	800c7dc <HAL_TIM_ConfigClockSource+0x230>
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	4a3c      	ldr	r2, [pc, #240]	@ (800c88c <HAL_TIM_ConfigClockSource+0x2e0>)
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d01d      	beq.n	800c7dc <HAL_TIM_ConfigClockSource+0x230>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	4a3a      	ldr	r2, [pc, #232]	@ (800c890 <HAL_TIM_ConfigClockSource+0x2e4>)
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d018      	beq.n	800c7dc <HAL_TIM_ConfigClockSource+0x230>
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	4a39      	ldr	r2, [pc, #228]	@ (800c894 <HAL_TIM_ConfigClockSource+0x2e8>)
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	d013      	beq.n	800c7dc <HAL_TIM_ConfigClockSource+0x230>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	4a39      	ldr	r2, [pc, #228]	@ (800c8a0 <HAL_TIM_ConfigClockSource+0x2f4>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	d00e      	beq.n	800c7dc <HAL_TIM_ConfigClockSource+0x230>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	4a38      	ldr	r2, [pc, #224]	@ (800c8a4 <HAL_TIM_ConfigClockSource+0x2f8>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d009      	beq.n	800c7dc <HAL_TIM_ConfigClockSource+0x230>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	4a38      	ldr	r2, [pc, #224]	@ (800c8b0 <HAL_TIM_ConfigClockSource+0x304>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d004      	beq.n	800c7dc <HAL_TIM_ConfigClockSource+0x230>
 800c7d2:	f241 5164 	movw	r1, #5476	@ 0x1564
 800c7d6:	482a      	ldr	r0, [pc, #168]	@ (800c880 <HAL_TIM_ConfigClockSource+0x2d4>)
 800c7d8:	f7fa f8e8 	bl	80069ac <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	689b      	ldr	r3, [r3, #8]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d013      	beq.n	800c80c <HAL_TIM_ConfigClockSource+0x260>
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	689b      	ldr	r3, [r3, #8]
 800c7e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c7ec:	d00e      	beq.n	800c80c <HAL_TIM_ConfigClockSource+0x260>
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	689b      	ldr	r3, [r3, #8]
 800c7f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c7f6:	d009      	beq.n	800c80c <HAL_TIM_ConfigClockSource+0x260>
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	689b      	ldr	r3, [r3, #8]
 800c7fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c800:	d004      	beq.n	800c80c <HAL_TIM_ConfigClockSource+0x260>
 800c802:	f241 5167 	movw	r1, #5479	@ 0x1567
 800c806:	481e      	ldr	r0, [pc, #120]	@ (800c880 <HAL_TIM_ConfigClockSource+0x2d4>)
 800c808:	f7fa f8d0 	bl	80069ac <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	685b      	ldr	r3, [r3, #4]
 800c810:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c814:	d014      	beq.n	800c840 <HAL_TIM_ConfigClockSource+0x294>
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	685b      	ldr	r3, [r3, #4]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d010      	beq.n	800c840 <HAL_TIM_ConfigClockSource+0x294>
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d00c      	beq.n	800c840 <HAL_TIM_ConfigClockSource+0x294>
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	685b      	ldr	r3, [r3, #4]
 800c82a:	2b02      	cmp	r3, #2
 800c82c:	d008      	beq.n	800c840 <HAL_TIM_ConfigClockSource+0x294>
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	2b0a      	cmp	r3, #10
 800c834:	d004      	beq.n	800c840 <HAL_TIM_ConfigClockSource+0x294>
 800c836:	f241 5168 	movw	r1, #5480	@ 0x1568
 800c83a:	4811      	ldr	r0, [pc, #68]	@ (800c880 <HAL_TIM_ConfigClockSource+0x2d4>)
 800c83c:	f7fa f8b6 	bl	80069ac <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	68db      	ldr	r3, [r3, #12]
 800c844:	2b0f      	cmp	r3, #15
 800c846:	d904      	bls.n	800c852 <HAL_TIM_ConfigClockSource+0x2a6>
 800c848:	f241 5169 	movw	r1, #5481	@ 0x1569
 800c84c:	480c      	ldr	r0, [pc, #48]	@ (800c880 <HAL_TIM_ConfigClockSource+0x2d4>)
 800c84e:	f7fa f8ad 	bl	80069ac <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c862:	f001 f953 	bl	800db0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	689b      	ldr	r3, [r3, #8]
 800c86c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c874:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	68ba      	ldr	r2, [r7, #8]
 800c87c:	609a      	str	r2, [r3, #8]
      break;
 800c87e:	e1cd      	b.n	800cc1c <HAL_TIM_ConfigClockSource+0x670>
 800c880:	0801985c 	.word	0x0801985c
 800c884:	fffeff88 	.word	0xfffeff88
 800c888:	40010000 	.word	0x40010000
 800c88c:	40000400 	.word	0x40000400
 800c890:	40000800 	.word	0x40000800
 800c894:	40000c00 	.word	0x40000c00
 800c898:	40001000 	.word	0x40001000
 800c89c:	40001400 	.word	0x40001400
 800c8a0:	40010400 	.word	0x40010400
 800c8a4:	40014000 	.word	0x40014000
 800c8a8:	40014400 	.word	0x40014400
 800c8ac:	40014800 	.word	0x40014800
 800c8b0:	40001800 	.word	0x40001800
 800c8b4:	40001c00 	.word	0x40001c00
 800c8b8:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	4a8d      	ldr	r2, [pc, #564]	@ (800caf8 <HAL_TIM_ConfigClockSource+0x54c>)
 800c8c2:	4293      	cmp	r3, r2
 800c8c4:	d01d      	beq.n	800c902 <HAL_TIM_ConfigClockSource+0x356>
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8ce:	d018      	beq.n	800c902 <HAL_TIM_ConfigClockSource+0x356>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	4a89      	ldr	r2, [pc, #548]	@ (800cafc <HAL_TIM_ConfigClockSource+0x550>)
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	d013      	beq.n	800c902 <HAL_TIM_ConfigClockSource+0x356>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	4a88      	ldr	r2, [pc, #544]	@ (800cb00 <HAL_TIM_ConfigClockSource+0x554>)
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d00e      	beq.n	800c902 <HAL_TIM_ConfigClockSource+0x356>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	4a86      	ldr	r2, [pc, #536]	@ (800cb04 <HAL_TIM_ConfigClockSource+0x558>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d009      	beq.n	800c902 <HAL_TIM_ConfigClockSource+0x356>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	4a85      	ldr	r2, [pc, #532]	@ (800cb08 <HAL_TIM_ConfigClockSource+0x55c>)
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d004      	beq.n	800c902 <HAL_TIM_ConfigClockSource+0x356>
 800c8f8:	f241 517c 	movw	r1, #5500	@ 0x157c
 800c8fc:	4883      	ldr	r0, [pc, #524]	@ (800cb0c <HAL_TIM_ConfigClockSource+0x560>)
 800c8fe:	f7fa f855 	bl	80069ac <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	689b      	ldr	r3, [r3, #8]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d013      	beq.n	800c932 <HAL_TIM_ConfigClockSource+0x386>
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	689b      	ldr	r3, [r3, #8]
 800c90e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c912:	d00e      	beq.n	800c932 <HAL_TIM_ConfigClockSource+0x386>
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	689b      	ldr	r3, [r3, #8]
 800c918:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c91c:	d009      	beq.n	800c932 <HAL_TIM_ConfigClockSource+0x386>
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	689b      	ldr	r3, [r3, #8]
 800c922:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c926:	d004      	beq.n	800c932 <HAL_TIM_ConfigClockSource+0x386>
 800c928:	f241 517f 	movw	r1, #5503	@ 0x157f
 800c92c:	4877      	ldr	r0, [pc, #476]	@ (800cb0c <HAL_TIM_ConfigClockSource+0x560>)
 800c92e:	f7fa f83d 	bl	80069ac <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	685b      	ldr	r3, [r3, #4]
 800c936:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c93a:	d014      	beq.n	800c966 <HAL_TIM_ConfigClockSource+0x3ba>
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d010      	beq.n	800c966 <HAL_TIM_ConfigClockSource+0x3ba>
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	685b      	ldr	r3, [r3, #4]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d00c      	beq.n	800c966 <HAL_TIM_ConfigClockSource+0x3ba>
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	2b02      	cmp	r3, #2
 800c952:	d008      	beq.n	800c966 <HAL_TIM_ConfigClockSource+0x3ba>
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	685b      	ldr	r3, [r3, #4]
 800c958:	2b0a      	cmp	r3, #10
 800c95a:	d004      	beq.n	800c966 <HAL_TIM_ConfigClockSource+0x3ba>
 800c95c:	f44f 51ac 	mov.w	r1, #5504	@ 0x1580
 800c960:	486a      	ldr	r0, [pc, #424]	@ (800cb0c <HAL_TIM_ConfigClockSource+0x560>)
 800c962:	f7fa f823 	bl	80069ac <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	68db      	ldr	r3, [r3, #12]
 800c96a:	2b0f      	cmp	r3, #15
 800c96c:	d904      	bls.n	800c978 <HAL_TIM_ConfigClockSource+0x3cc>
 800c96e:	f241 5181 	movw	r1, #5505	@ 0x1581
 800c972:	4866      	ldr	r0, [pc, #408]	@ (800cb0c <HAL_TIM_ConfigClockSource+0x560>)
 800c974:	f7fa f81a 	bl	80069ac <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c988:	f001 f8c0 	bl	800db0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	689a      	ldr	r2, [r3, #8]
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c99a:	609a      	str	r2, [r3, #8]
      break;
 800c99c:	e13e      	b.n	800cc1c <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	4a55      	ldr	r2, [pc, #340]	@ (800caf8 <HAL_TIM_ConfigClockSource+0x54c>)
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d01d      	beq.n	800c9e4 <HAL_TIM_ConfigClockSource+0x438>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c9b0:	d018      	beq.n	800c9e4 <HAL_TIM_ConfigClockSource+0x438>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	4a51      	ldr	r2, [pc, #324]	@ (800cafc <HAL_TIM_ConfigClockSource+0x550>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d013      	beq.n	800c9e4 <HAL_TIM_ConfigClockSource+0x438>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a4f      	ldr	r2, [pc, #316]	@ (800cb00 <HAL_TIM_ConfigClockSource+0x554>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d00e      	beq.n	800c9e4 <HAL_TIM_ConfigClockSource+0x438>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	4a4e      	ldr	r2, [pc, #312]	@ (800cb04 <HAL_TIM_ConfigClockSource+0x558>)
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d009      	beq.n	800c9e4 <HAL_TIM_ConfigClockSource+0x438>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4a4c      	ldr	r2, [pc, #304]	@ (800cb08 <HAL_TIM_ConfigClockSource+0x55c>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d004      	beq.n	800c9e4 <HAL_TIM_ConfigClockSource+0x438>
 800c9da:	f241 5190 	movw	r1, #5520	@ 0x1590
 800c9de:	484b      	ldr	r0, [pc, #300]	@ (800cb0c <HAL_TIM_ConfigClockSource+0x560>)
 800c9e0:	f7f9 ffe4 	bl	80069ac <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c9ec:	d014      	beq.n	800ca18 <HAL_TIM_ConfigClockSource+0x46c>
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d010      	beq.n	800ca18 <HAL_TIM_ConfigClockSource+0x46c>
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	685b      	ldr	r3, [r3, #4]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d00c      	beq.n	800ca18 <HAL_TIM_ConfigClockSource+0x46c>
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	685b      	ldr	r3, [r3, #4]
 800ca02:	2b02      	cmp	r3, #2
 800ca04:	d008      	beq.n	800ca18 <HAL_TIM_ConfigClockSource+0x46c>
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	2b0a      	cmp	r3, #10
 800ca0c:	d004      	beq.n	800ca18 <HAL_TIM_ConfigClockSource+0x46c>
 800ca0e:	f241 5193 	movw	r1, #5523	@ 0x1593
 800ca12:	483e      	ldr	r0, [pc, #248]	@ (800cb0c <HAL_TIM_ConfigClockSource+0x560>)
 800ca14:	f7f9 ffca 	bl	80069ac <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	68db      	ldr	r3, [r3, #12]
 800ca1c:	2b0f      	cmp	r3, #15
 800ca1e:	d904      	bls.n	800ca2a <HAL_TIM_ConfigClockSource+0x47e>
 800ca20:	f241 5194 	movw	r1, #5524	@ 0x1594
 800ca24:	4839      	ldr	r0, [pc, #228]	@ (800cb0c <HAL_TIM_ConfigClockSource+0x560>)
 800ca26:	f7f9 ffc1 	bl	80069ac <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca36:	461a      	mov	r2, r3
 800ca38:	f000 ffee 	bl	800da18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	2150      	movs	r1, #80	@ 0x50
 800ca42:	4618      	mov	r0, r3
 800ca44:	f001 f847 	bl	800dad6 <TIM_ITRx_SetConfig>
      break;
 800ca48:	e0e8      	b.n	800cc1c <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	4a2a      	ldr	r2, [pc, #168]	@ (800caf8 <HAL_TIM_ConfigClockSource+0x54c>)
 800ca50:	4293      	cmp	r3, r2
 800ca52:	d01d      	beq.n	800ca90 <HAL_TIM_ConfigClockSource+0x4e4>
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca5c:	d018      	beq.n	800ca90 <HAL_TIM_ConfigClockSource+0x4e4>
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	4a26      	ldr	r2, [pc, #152]	@ (800cafc <HAL_TIM_ConfigClockSource+0x550>)
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d013      	beq.n	800ca90 <HAL_TIM_ConfigClockSource+0x4e4>
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	4a24      	ldr	r2, [pc, #144]	@ (800cb00 <HAL_TIM_ConfigClockSource+0x554>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d00e      	beq.n	800ca90 <HAL_TIM_ConfigClockSource+0x4e4>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	4a23      	ldr	r2, [pc, #140]	@ (800cb04 <HAL_TIM_ConfigClockSource+0x558>)
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	d009      	beq.n	800ca90 <HAL_TIM_ConfigClockSource+0x4e4>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4a21      	ldr	r2, [pc, #132]	@ (800cb08 <HAL_TIM_ConfigClockSource+0x55c>)
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d004      	beq.n	800ca90 <HAL_TIM_ConfigClockSource+0x4e4>
 800ca86:	f44f 51ad 	mov.w	r1, #5536	@ 0x15a0
 800ca8a:	4820      	ldr	r0, [pc, #128]	@ (800cb0c <HAL_TIM_ConfigClockSource+0x560>)
 800ca8c:	f7f9 ff8e 	bl	80069ac <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	685b      	ldr	r3, [r3, #4]
 800ca94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ca98:	d014      	beq.n	800cac4 <HAL_TIM_ConfigClockSource+0x518>
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d010      	beq.n	800cac4 <HAL_TIM_ConfigClockSource+0x518>
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	685b      	ldr	r3, [r3, #4]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d00c      	beq.n	800cac4 <HAL_TIM_ConfigClockSource+0x518>
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	685b      	ldr	r3, [r3, #4]
 800caae:	2b02      	cmp	r3, #2
 800cab0:	d008      	beq.n	800cac4 <HAL_TIM_ConfigClockSource+0x518>
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	685b      	ldr	r3, [r3, #4]
 800cab6:	2b0a      	cmp	r3, #10
 800cab8:	d004      	beq.n	800cac4 <HAL_TIM_ConfigClockSource+0x518>
 800caba:	f241 51a3 	movw	r1, #5539	@ 0x15a3
 800cabe:	4813      	ldr	r0, [pc, #76]	@ (800cb0c <HAL_TIM_ConfigClockSource+0x560>)
 800cac0:	f7f9 ff74 	bl	80069ac <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	68db      	ldr	r3, [r3, #12]
 800cac8:	2b0f      	cmp	r3, #15
 800caca:	d904      	bls.n	800cad6 <HAL_TIM_ConfigClockSource+0x52a>
 800cacc:	f241 51a4 	movw	r1, #5540	@ 0x15a4
 800cad0:	480e      	ldr	r0, [pc, #56]	@ (800cb0c <HAL_TIM_ConfigClockSource+0x560>)
 800cad2:	f7f9 ff6b 	bl	80069ac <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cae2:	461a      	mov	r2, r3
 800cae4:	f000 ffc7 	bl	800da76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	2160      	movs	r1, #96	@ 0x60
 800caee:	4618      	mov	r0, r3
 800caf0:	f000 fff1 	bl	800dad6 <TIM_ITRx_SetConfig>
      break;
 800caf4:	e092      	b.n	800cc1c <HAL_TIM_ConfigClockSource+0x670>
 800caf6:	bf00      	nop
 800caf8:	40010000 	.word	0x40010000
 800cafc:	40000400 	.word	0x40000400
 800cb00:	40000800 	.word	0x40000800
 800cb04:	40000c00 	.word	0x40000c00
 800cb08:	40010400 	.word	0x40010400
 800cb0c:	0801985c 	.word	0x0801985c
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	4a48      	ldr	r2, [pc, #288]	@ (800cc38 <HAL_TIM_ConfigClockSource+0x68c>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d01d      	beq.n	800cb56 <HAL_TIM_ConfigClockSource+0x5aa>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb22:	d018      	beq.n	800cb56 <HAL_TIM_ConfigClockSource+0x5aa>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	4a44      	ldr	r2, [pc, #272]	@ (800cc3c <HAL_TIM_ConfigClockSource+0x690>)
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	d013      	beq.n	800cb56 <HAL_TIM_ConfigClockSource+0x5aa>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	4a43      	ldr	r2, [pc, #268]	@ (800cc40 <HAL_TIM_ConfigClockSource+0x694>)
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d00e      	beq.n	800cb56 <HAL_TIM_ConfigClockSource+0x5aa>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4a41      	ldr	r2, [pc, #260]	@ (800cc44 <HAL_TIM_ConfigClockSource+0x698>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d009      	beq.n	800cb56 <HAL_TIM_ConfigClockSource+0x5aa>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	4a40      	ldr	r2, [pc, #256]	@ (800cc48 <HAL_TIM_ConfigClockSource+0x69c>)
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d004      	beq.n	800cb56 <HAL_TIM_ConfigClockSource+0x5aa>
 800cb4c:	f241 51b0 	movw	r1, #5552	@ 0x15b0
 800cb50:	483e      	ldr	r0, [pc, #248]	@ (800cc4c <HAL_TIM_ConfigClockSource+0x6a0>)
 800cb52:	f7f9 ff2b 	bl	80069ac <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cb5e:	d014      	beq.n	800cb8a <HAL_TIM_ConfigClockSource+0x5de>
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	685b      	ldr	r3, [r3, #4]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d010      	beq.n	800cb8a <HAL_TIM_ConfigClockSource+0x5de>
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	685b      	ldr	r3, [r3, #4]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d00c      	beq.n	800cb8a <HAL_TIM_ConfigClockSource+0x5de>
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	685b      	ldr	r3, [r3, #4]
 800cb74:	2b02      	cmp	r3, #2
 800cb76:	d008      	beq.n	800cb8a <HAL_TIM_ConfigClockSource+0x5de>
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	685b      	ldr	r3, [r3, #4]
 800cb7c:	2b0a      	cmp	r3, #10
 800cb7e:	d004      	beq.n	800cb8a <HAL_TIM_ConfigClockSource+0x5de>
 800cb80:	f241 51b3 	movw	r1, #5555	@ 0x15b3
 800cb84:	4831      	ldr	r0, [pc, #196]	@ (800cc4c <HAL_TIM_ConfigClockSource+0x6a0>)
 800cb86:	f7f9 ff11 	bl	80069ac <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	2b0f      	cmp	r3, #15
 800cb90:	d904      	bls.n	800cb9c <HAL_TIM_ConfigClockSource+0x5f0>
 800cb92:	f241 51b4 	movw	r1, #5556	@ 0x15b4
 800cb96:	482d      	ldr	r0, [pc, #180]	@ (800cc4c <HAL_TIM_ConfigClockSource+0x6a0>)
 800cb98:	f7f9 ff08 	bl	80069ac <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cba8:	461a      	mov	r2, r3
 800cbaa:	f000 ff35 	bl	800da18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	2140      	movs	r1, #64	@ 0x40
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f000 ff8e 	bl	800dad6 <TIM_ITRx_SetConfig>
      break;
 800cbba:	e02f      	b.n	800cc1c <HAL_TIM_ConfigClockSource+0x670>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4a1d      	ldr	r2, [pc, #116]	@ (800cc38 <HAL_TIM_ConfigClockSource+0x68c>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d01d      	beq.n	800cc02 <HAL_TIM_ConfigClockSource+0x656>
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cbce:	d018      	beq.n	800cc02 <HAL_TIM_ConfigClockSource+0x656>
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	4a19      	ldr	r2, [pc, #100]	@ (800cc3c <HAL_TIM_ConfigClockSource+0x690>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d013      	beq.n	800cc02 <HAL_TIM_ConfigClockSource+0x656>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	4a18      	ldr	r2, [pc, #96]	@ (800cc40 <HAL_TIM_ConfigClockSource+0x694>)
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	d00e      	beq.n	800cc02 <HAL_TIM_ConfigClockSource+0x656>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	4a16      	ldr	r2, [pc, #88]	@ (800cc44 <HAL_TIM_ConfigClockSource+0x698>)
 800cbea:	4293      	cmp	r3, r2
 800cbec:	d009      	beq.n	800cc02 <HAL_TIM_ConfigClockSource+0x656>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	4a15      	ldr	r2, [pc, #84]	@ (800cc48 <HAL_TIM_ConfigClockSource+0x69c>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d004      	beq.n	800cc02 <HAL_TIM_ConfigClockSource+0x656>
 800cbf8:	f241 51c3 	movw	r1, #5571	@ 0x15c3
 800cbfc:	4813      	ldr	r0, [pc, #76]	@ (800cc4c <HAL_TIM_ConfigClockSource+0x6a0>)
 800cbfe:	f7f9 fed5 	bl	80069ac <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681a      	ldr	r2, [r3, #0]
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	4610      	mov	r0, r2
 800cc0e:	f000 ff62 	bl	800dad6 <TIM_ITRx_SetConfig>
      break;
 800cc12:	e003      	b.n	800cc1c <HAL_TIM_ConfigClockSource+0x670>
    }

    default:
      status = HAL_ERROR;
 800cc14:	2301      	movs	r3, #1
 800cc16:	73fb      	strb	r3, [r7, #15]
      break;
 800cc18:	e000      	b.n	800cc1c <HAL_TIM_ConfigClockSource+0x670>
      break;
 800cc1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2201      	movs	r2, #1
 800cc20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2200      	movs	r2, #0
 800cc28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cc2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3710      	adds	r7, #16
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	40010000 	.word	0x40010000
 800cc3c:	40000400 	.word	0x40000400
 800cc40:	40000800 	.word	0x40000800
 800cc44:	40000c00 	.word	0x40000c00
 800cc48:	40010400 	.word	0x40010400
 800cc4c:	0801985c 	.word	0x0801985c

0800cc50 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b082      	sub	sp, #8
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	4a55      	ldr	r2, [pc, #340]	@ (800cdb4 <HAL_TIM_SlaveConfigSynchro+0x164>)
 800cc60:	4293      	cmp	r3, r2
 800cc62:	d027      	beq.n	800ccb4 <HAL_TIM_SlaveConfigSynchro+0x64>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc6c:	d022      	beq.n	800ccb4 <HAL_TIM_SlaveConfigSynchro+0x64>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	4a51      	ldr	r2, [pc, #324]	@ (800cdb8 <HAL_TIM_SlaveConfigSynchro+0x168>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d01d      	beq.n	800ccb4 <HAL_TIM_SlaveConfigSynchro+0x64>
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a4f      	ldr	r2, [pc, #316]	@ (800cdbc <HAL_TIM_SlaveConfigSynchro+0x16c>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d018      	beq.n	800ccb4 <HAL_TIM_SlaveConfigSynchro+0x64>
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	4a4e      	ldr	r2, [pc, #312]	@ (800cdc0 <HAL_TIM_SlaveConfigSynchro+0x170>)
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d013      	beq.n	800ccb4 <HAL_TIM_SlaveConfigSynchro+0x64>
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	4a4c      	ldr	r2, [pc, #304]	@ (800cdc4 <HAL_TIM_SlaveConfigSynchro+0x174>)
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d00e      	beq.n	800ccb4 <HAL_TIM_SlaveConfigSynchro+0x64>
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	4a4b      	ldr	r2, [pc, #300]	@ (800cdc8 <HAL_TIM_SlaveConfigSynchro+0x178>)
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d009      	beq.n	800ccb4 <HAL_TIM_SlaveConfigSynchro+0x64>
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	4a49      	ldr	r2, [pc, #292]	@ (800cdcc <HAL_TIM_SlaveConfigSynchro+0x17c>)
 800cca6:	4293      	cmp	r3, r2
 800cca8:	d004      	beq.n	800ccb4 <HAL_TIM_SlaveConfigSynchro+0x64>
 800ccaa:	f241 6103 	movw	r1, #5635	@ 0x1603
 800ccae:	4848      	ldr	r0, [pc, #288]	@ (800cdd0 <HAL_TIM_SlaveConfigSynchro+0x180>)
 800ccb0:	f7f9 fe7c 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d019      	beq.n	800ccf0 <HAL_TIM_SlaveConfigSynchro+0xa0>
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	2b04      	cmp	r3, #4
 800ccc2:	d015      	beq.n	800ccf0 <HAL_TIM_SlaveConfigSynchro+0xa0>
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	2b05      	cmp	r3, #5
 800ccca:	d011      	beq.n	800ccf0 <HAL_TIM_SlaveConfigSynchro+0xa0>
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	2b06      	cmp	r3, #6
 800ccd2:	d00d      	beq.n	800ccf0 <HAL_TIM_SlaveConfigSynchro+0xa0>
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	2b07      	cmp	r3, #7
 800ccda:	d009      	beq.n	800ccf0 <HAL_TIM_SlaveConfigSynchro+0xa0>
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cce4:	d004      	beq.n	800ccf0 <HAL_TIM_SlaveConfigSynchro+0xa0>
 800cce6:	f241 6104 	movw	r1, #5636	@ 0x1604
 800ccea:	4839      	ldr	r0, [pc, #228]	@ (800cdd0 <HAL_TIM_SlaveConfigSynchro+0x180>)
 800ccec:	f7f9 fe5e 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	685b      	ldr	r3, [r3, #4]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d020      	beq.n	800cd3a <HAL_TIM_SlaveConfigSynchro+0xea>
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	685b      	ldr	r3, [r3, #4]
 800ccfc:	2b10      	cmp	r3, #16
 800ccfe:	d01c      	beq.n	800cd3a <HAL_TIM_SlaveConfigSynchro+0xea>
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	2b20      	cmp	r3, #32
 800cd06:	d018      	beq.n	800cd3a <HAL_TIM_SlaveConfigSynchro+0xea>
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	685b      	ldr	r3, [r3, #4]
 800cd0c:	2b30      	cmp	r3, #48	@ 0x30
 800cd0e:	d014      	beq.n	800cd3a <HAL_TIM_SlaveConfigSynchro+0xea>
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	685b      	ldr	r3, [r3, #4]
 800cd14:	2b40      	cmp	r3, #64	@ 0x40
 800cd16:	d010      	beq.n	800cd3a <HAL_TIM_SlaveConfigSynchro+0xea>
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	685b      	ldr	r3, [r3, #4]
 800cd1c:	2b50      	cmp	r3, #80	@ 0x50
 800cd1e:	d00c      	beq.n	800cd3a <HAL_TIM_SlaveConfigSynchro+0xea>
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	685b      	ldr	r3, [r3, #4]
 800cd24:	2b60      	cmp	r3, #96	@ 0x60
 800cd26:	d008      	beq.n	800cd3a <HAL_TIM_SlaveConfigSynchro+0xea>
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	685b      	ldr	r3, [r3, #4]
 800cd2c:	2b70      	cmp	r3, #112	@ 0x70
 800cd2e:	d004      	beq.n	800cd3a <HAL_TIM_SlaveConfigSynchro+0xea>
 800cd30:	f241 6105 	movw	r1, #5637	@ 0x1605
 800cd34:	4826      	ldr	r0, [pc, #152]	@ (800cdd0 <HAL_TIM_SlaveConfigSynchro+0x180>)
 800cd36:	f7f9 fe39 	bl	80069ac <assert_failed>

  __HAL_LOCK(htim);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cd40:	2b01      	cmp	r3, #1
 800cd42:	d101      	bne.n	800cd48 <HAL_TIM_SlaveConfigSynchro+0xf8>
 800cd44:	2302      	movs	r3, #2
 800cd46:	e031      	b.n	800cdac <HAL_TIM_SlaveConfigSynchro+0x15c>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2201      	movs	r2, #1
 800cd4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2202      	movs	r2, #2
 800cd54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800cd58:	6839      	ldr	r1, [r7, #0]
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f000 fbf6 	bl	800d54c <TIM_SlaveTimer_SetConfig>
 800cd60:	4603      	mov	r3, r0
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d009      	beq.n	800cd7a <HAL_TIM_SlaveConfigSynchro+0x12a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2201      	movs	r2, #1
 800cd6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2200      	movs	r2, #0
 800cd72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800cd76:	2301      	movs	r3, #1
 800cd78:	e018      	b.n	800cdac <HAL_TIM_SlaveConfigSynchro+0x15c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	68da      	ldr	r2, [r3, #12]
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cd88:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	68da      	ldr	r2, [r3, #12]
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800cd98:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2200      	movs	r2, #0
 800cda6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cdaa:	2300      	movs	r3, #0
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	3708      	adds	r7, #8
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}
 800cdb4:	40010000 	.word	0x40010000
 800cdb8:	40000400 	.word	0x40000400
 800cdbc:	40000800 	.word	0x40000800
 800cdc0:	40000c00 	.word	0x40000c00
 800cdc4:	40010400 	.word	0x40010400
 800cdc8:	40014000 	.word	0x40014000
 800cdcc:	40001800 	.word	0x40001800
 800cdd0:	0801985c 	.word	0x0801985c

0800cdd4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b083      	sub	sp, #12
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800cddc:	bf00      	nop
 800cdde:	370c      	adds	r7, #12
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr

0800cde8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b083      	sub	sp, #12
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cdf0:	bf00      	nop
 800cdf2:	370c      	adds	r7, #12
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfa:	4770      	bx	lr

0800cdfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b083      	sub	sp, #12
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ce04:	bf00      	nop
 800ce06:	370c      	adds	r7, #12
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr

0800ce10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b083      	sub	sp, #12
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ce18:	bf00      	nop
 800ce1a:	370c      	adds	r7, #12
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce22:	4770      	bx	lr

0800ce24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ce24:	b480      	push	{r7}
 800ce26:	b085      	sub	sp, #20
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	4a46      	ldr	r2, [pc, #280]	@ (800cf50 <TIM_Base_SetConfig+0x12c>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d013      	beq.n	800ce64 <TIM_Base_SetConfig+0x40>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce42:	d00f      	beq.n	800ce64 <TIM_Base_SetConfig+0x40>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	4a43      	ldr	r2, [pc, #268]	@ (800cf54 <TIM_Base_SetConfig+0x130>)
 800ce48:	4293      	cmp	r3, r2
 800ce4a:	d00b      	beq.n	800ce64 <TIM_Base_SetConfig+0x40>
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	4a42      	ldr	r2, [pc, #264]	@ (800cf58 <TIM_Base_SetConfig+0x134>)
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d007      	beq.n	800ce64 <TIM_Base_SetConfig+0x40>
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	4a41      	ldr	r2, [pc, #260]	@ (800cf5c <TIM_Base_SetConfig+0x138>)
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	d003      	beq.n	800ce64 <TIM_Base_SetConfig+0x40>
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	4a40      	ldr	r2, [pc, #256]	@ (800cf60 <TIM_Base_SetConfig+0x13c>)
 800ce60:	4293      	cmp	r3, r2
 800ce62:	d108      	bne.n	800ce76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	685b      	ldr	r3, [r3, #4]
 800ce70:	68fa      	ldr	r2, [r7, #12]
 800ce72:	4313      	orrs	r3, r2
 800ce74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	4a35      	ldr	r2, [pc, #212]	@ (800cf50 <TIM_Base_SetConfig+0x12c>)
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d02b      	beq.n	800ced6 <TIM_Base_SetConfig+0xb2>
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce84:	d027      	beq.n	800ced6 <TIM_Base_SetConfig+0xb2>
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	4a32      	ldr	r2, [pc, #200]	@ (800cf54 <TIM_Base_SetConfig+0x130>)
 800ce8a:	4293      	cmp	r3, r2
 800ce8c:	d023      	beq.n	800ced6 <TIM_Base_SetConfig+0xb2>
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	4a31      	ldr	r2, [pc, #196]	@ (800cf58 <TIM_Base_SetConfig+0x134>)
 800ce92:	4293      	cmp	r3, r2
 800ce94:	d01f      	beq.n	800ced6 <TIM_Base_SetConfig+0xb2>
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	4a30      	ldr	r2, [pc, #192]	@ (800cf5c <TIM_Base_SetConfig+0x138>)
 800ce9a:	4293      	cmp	r3, r2
 800ce9c:	d01b      	beq.n	800ced6 <TIM_Base_SetConfig+0xb2>
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	4a2f      	ldr	r2, [pc, #188]	@ (800cf60 <TIM_Base_SetConfig+0x13c>)
 800cea2:	4293      	cmp	r3, r2
 800cea4:	d017      	beq.n	800ced6 <TIM_Base_SetConfig+0xb2>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	4a2e      	ldr	r2, [pc, #184]	@ (800cf64 <TIM_Base_SetConfig+0x140>)
 800ceaa:	4293      	cmp	r3, r2
 800ceac:	d013      	beq.n	800ced6 <TIM_Base_SetConfig+0xb2>
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	4a2d      	ldr	r2, [pc, #180]	@ (800cf68 <TIM_Base_SetConfig+0x144>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d00f      	beq.n	800ced6 <TIM_Base_SetConfig+0xb2>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	4a2c      	ldr	r2, [pc, #176]	@ (800cf6c <TIM_Base_SetConfig+0x148>)
 800ceba:	4293      	cmp	r3, r2
 800cebc:	d00b      	beq.n	800ced6 <TIM_Base_SetConfig+0xb2>
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	4a2b      	ldr	r2, [pc, #172]	@ (800cf70 <TIM_Base_SetConfig+0x14c>)
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d007      	beq.n	800ced6 <TIM_Base_SetConfig+0xb2>
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	4a2a      	ldr	r2, [pc, #168]	@ (800cf74 <TIM_Base_SetConfig+0x150>)
 800ceca:	4293      	cmp	r3, r2
 800cecc:	d003      	beq.n	800ced6 <TIM_Base_SetConfig+0xb2>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	4a29      	ldr	r2, [pc, #164]	@ (800cf78 <TIM_Base_SetConfig+0x154>)
 800ced2:	4293      	cmp	r3, r2
 800ced4:	d108      	bne.n	800cee8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cedc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	68db      	ldr	r3, [r3, #12]
 800cee2:	68fa      	ldr	r2, [r7, #12]
 800cee4:	4313      	orrs	r3, r2
 800cee6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	695b      	ldr	r3, [r3, #20]
 800cef2:	4313      	orrs	r3, r2
 800cef4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	68fa      	ldr	r2, [r7, #12]
 800cefa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	689a      	ldr	r2, [r3, #8]
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	681a      	ldr	r2, [r3, #0]
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	4a10      	ldr	r2, [pc, #64]	@ (800cf50 <TIM_Base_SetConfig+0x12c>)
 800cf10:	4293      	cmp	r3, r2
 800cf12:	d003      	beq.n	800cf1c <TIM_Base_SetConfig+0xf8>
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	4a12      	ldr	r2, [pc, #72]	@ (800cf60 <TIM_Base_SetConfig+0x13c>)
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	d103      	bne.n	800cf24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	691a      	ldr	r2, [r3, #16]
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2201      	movs	r2, #1
 800cf28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	691b      	ldr	r3, [r3, #16]
 800cf2e:	f003 0301 	and.w	r3, r3, #1
 800cf32:	2b01      	cmp	r3, #1
 800cf34:	d105      	bne.n	800cf42 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	691b      	ldr	r3, [r3, #16]
 800cf3a:	f023 0201 	bic.w	r2, r3, #1
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	611a      	str	r2, [r3, #16]
  }
}
 800cf42:	bf00      	nop
 800cf44:	3714      	adds	r7, #20
 800cf46:	46bd      	mov	sp, r7
 800cf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4c:	4770      	bx	lr
 800cf4e:	bf00      	nop
 800cf50:	40010000 	.word	0x40010000
 800cf54:	40000400 	.word	0x40000400
 800cf58:	40000800 	.word	0x40000800
 800cf5c:	40000c00 	.word	0x40000c00
 800cf60:	40010400 	.word	0x40010400
 800cf64:	40014000 	.word	0x40014000
 800cf68:	40014400 	.word	0x40014400
 800cf6c:	40014800 	.word	0x40014800
 800cf70:	40001800 	.word	0x40001800
 800cf74:	40001c00 	.word	0x40001c00
 800cf78:	40002000 	.word	0x40002000

0800cf7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b086      	sub	sp, #24
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6a1b      	ldr	r3, [r3, #32]
 800cf8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6a1b      	ldr	r3, [r3, #32]
 800cf90:	f023 0201 	bic.w	r2, r3, #1
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	685b      	ldr	r3, [r3, #4]
 800cf9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	699b      	ldr	r3, [r3, #24]
 800cfa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cfa4:	68fa      	ldr	r2, [r7, #12]
 800cfa6:	4b3f      	ldr	r3, [pc, #252]	@ (800d0a4 <TIM_OC1_SetConfig+0x128>)
 800cfa8:	4013      	ands	r3, r2
 800cfaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	f023 0303 	bic.w	r3, r3, #3
 800cfb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	68fa      	ldr	r2, [r7, #12]
 800cfba:	4313      	orrs	r3, r2
 800cfbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	f023 0302 	bic.w	r3, r3, #2
 800cfc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	689b      	ldr	r3, [r3, #8]
 800cfca:	697a      	ldr	r2, [r7, #20]
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	4a35      	ldr	r2, [pc, #212]	@ (800d0a8 <TIM_OC1_SetConfig+0x12c>)
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d003      	beq.n	800cfe0 <TIM_OC1_SetConfig+0x64>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	4a34      	ldr	r2, [pc, #208]	@ (800d0ac <TIM_OC1_SetConfig+0x130>)
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	d119      	bne.n	800d014 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	68db      	ldr	r3, [r3, #12]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d008      	beq.n	800cffa <TIM_OC1_SetConfig+0x7e>
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	68db      	ldr	r3, [r3, #12]
 800cfec:	2b08      	cmp	r3, #8
 800cfee:	d004      	beq.n	800cffa <TIM_OC1_SetConfig+0x7e>
 800cff0:	f641 3169 	movw	r1, #7017	@ 0x1b69
 800cff4:	482e      	ldr	r0, [pc, #184]	@ (800d0b0 <TIM_OC1_SetConfig+0x134>)
 800cff6:	f7f9 fcd9 	bl	80069ac <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	f023 0308 	bic.w	r3, r3, #8
 800d000:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	68db      	ldr	r3, [r3, #12]
 800d006:	697a      	ldr	r2, [r7, #20]
 800d008:	4313      	orrs	r3, r2
 800d00a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	f023 0304 	bic.w	r3, r3, #4
 800d012:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	4a24      	ldr	r2, [pc, #144]	@ (800d0a8 <TIM_OC1_SetConfig+0x12c>)
 800d018:	4293      	cmp	r3, r2
 800d01a:	d003      	beq.n	800d024 <TIM_OC1_SetConfig+0xa8>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	4a23      	ldr	r2, [pc, #140]	@ (800d0ac <TIM_OC1_SetConfig+0x130>)
 800d020:	4293      	cmp	r3, r2
 800d022:	d12d      	bne.n	800d080 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	699b      	ldr	r3, [r3, #24]
 800d028:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d02c:	d008      	beq.n	800d040 <TIM_OC1_SetConfig+0xc4>
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	699b      	ldr	r3, [r3, #24]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d004      	beq.n	800d040 <TIM_OC1_SetConfig+0xc4>
 800d036:	f641 3176 	movw	r1, #7030	@ 0x1b76
 800d03a:	481d      	ldr	r0, [pc, #116]	@ (800d0b0 <TIM_OC1_SetConfig+0x134>)
 800d03c:	f7f9 fcb6 	bl	80069ac <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	695b      	ldr	r3, [r3, #20]
 800d044:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d048:	d008      	beq.n	800d05c <TIM_OC1_SetConfig+0xe0>
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	695b      	ldr	r3, [r3, #20]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d004      	beq.n	800d05c <TIM_OC1_SetConfig+0xe0>
 800d052:	f641 3177 	movw	r1, #7031	@ 0x1b77
 800d056:	4816      	ldr	r0, [pc, #88]	@ (800d0b0 <TIM_OC1_SetConfig+0x134>)
 800d058:	f7f9 fca8 	bl	80069ac <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d062:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d06a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	695b      	ldr	r3, [r3, #20]
 800d070:	693a      	ldr	r2, [r7, #16]
 800d072:	4313      	orrs	r3, r2
 800d074:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	699b      	ldr	r3, [r3, #24]
 800d07a:	693a      	ldr	r2, [r7, #16]
 800d07c:	4313      	orrs	r3, r2
 800d07e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	693a      	ldr	r2, [r7, #16]
 800d084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	68fa      	ldr	r2, [r7, #12]
 800d08a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	685a      	ldr	r2, [r3, #4]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	697a      	ldr	r2, [r7, #20]
 800d098:	621a      	str	r2, [r3, #32]
}
 800d09a:	bf00      	nop
 800d09c:	3718      	adds	r7, #24
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}
 800d0a2:	bf00      	nop
 800d0a4:	fffeff8f 	.word	0xfffeff8f
 800d0a8:	40010000 	.word	0x40010000
 800d0ac:	40010400 	.word	0x40010400
 800d0b0:	0801985c 	.word	0x0801985c

0800d0b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b086      	sub	sp, #24
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6a1b      	ldr	r3, [r3, #32]
 800d0c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	6a1b      	ldr	r3, [r3, #32]
 800d0c8:	f023 0210 	bic.w	r2, r3, #16
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	685b      	ldr	r3, [r3, #4]
 800d0d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	699b      	ldr	r3, [r3, #24]
 800d0da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d0dc:	68fa      	ldr	r2, [r7, #12]
 800d0de:	4b41      	ldr	r3, [pc, #260]	@ (800d1e4 <TIM_OC2_SetConfig+0x130>)
 800d0e0:	4013      	ands	r3, r2
 800d0e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d0ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	021b      	lsls	r3, r3, #8
 800d0f2:	68fa      	ldr	r2, [r7, #12]
 800d0f4:	4313      	orrs	r3, r2
 800d0f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	f023 0320 	bic.w	r3, r3, #32
 800d0fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	689b      	ldr	r3, [r3, #8]
 800d104:	011b      	lsls	r3, r3, #4
 800d106:	697a      	ldr	r2, [r7, #20]
 800d108:	4313      	orrs	r3, r2
 800d10a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	4a36      	ldr	r2, [pc, #216]	@ (800d1e8 <TIM_OC2_SetConfig+0x134>)
 800d110:	4293      	cmp	r3, r2
 800d112:	d003      	beq.n	800d11c <TIM_OC2_SetConfig+0x68>
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	4a35      	ldr	r2, [pc, #212]	@ (800d1ec <TIM_OC2_SetConfig+0x138>)
 800d118:	4293      	cmp	r3, r2
 800d11a:	d11a      	bne.n	800d152 <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	68db      	ldr	r3, [r3, #12]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d008      	beq.n	800d136 <TIM_OC2_SetConfig+0x82>
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	68db      	ldr	r3, [r3, #12]
 800d128:	2b08      	cmp	r3, #8
 800d12a:	d004      	beq.n	800d136 <TIM_OC2_SetConfig+0x82>
 800d12c:	f641 31b5 	movw	r1, #7093	@ 0x1bb5
 800d130:	482f      	ldr	r0, [pc, #188]	@ (800d1f0 <TIM_OC2_SetConfig+0x13c>)
 800d132:	f7f9 fc3b 	bl	80069ac <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d13c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	68db      	ldr	r3, [r3, #12]
 800d142:	011b      	lsls	r3, r3, #4
 800d144:	697a      	ldr	r2, [r7, #20]
 800d146:	4313      	orrs	r3, r2
 800d148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	4a24      	ldr	r2, [pc, #144]	@ (800d1e8 <TIM_OC2_SetConfig+0x134>)
 800d156:	4293      	cmp	r3, r2
 800d158:	d003      	beq.n	800d162 <TIM_OC2_SetConfig+0xae>
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	4a23      	ldr	r2, [pc, #140]	@ (800d1ec <TIM_OC2_SetConfig+0x138>)
 800d15e:	4293      	cmp	r3, r2
 800d160:	d12f      	bne.n	800d1c2 <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	699b      	ldr	r3, [r3, #24]
 800d166:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d16a:	d008      	beq.n	800d17e <TIM_OC2_SetConfig+0xca>
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	699b      	ldr	r3, [r3, #24]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d004      	beq.n	800d17e <TIM_OC2_SetConfig+0xca>
 800d174:	f641 31c2 	movw	r1, #7106	@ 0x1bc2
 800d178:	481d      	ldr	r0, [pc, #116]	@ (800d1f0 <TIM_OC2_SetConfig+0x13c>)
 800d17a:	f7f9 fc17 	bl	80069ac <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	695b      	ldr	r3, [r3, #20]
 800d182:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d186:	d008      	beq.n	800d19a <TIM_OC2_SetConfig+0xe6>
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	695b      	ldr	r3, [r3, #20]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d004      	beq.n	800d19a <TIM_OC2_SetConfig+0xe6>
 800d190:	f641 31c3 	movw	r1, #7107	@ 0x1bc3
 800d194:	4816      	ldr	r0, [pc, #88]	@ (800d1f0 <TIM_OC2_SetConfig+0x13c>)
 800d196:	f7f9 fc09 	bl	80069ac <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d1a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d1a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	695b      	ldr	r3, [r3, #20]
 800d1ae:	009b      	lsls	r3, r3, #2
 800d1b0:	693a      	ldr	r2, [r7, #16]
 800d1b2:	4313      	orrs	r3, r2
 800d1b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	699b      	ldr	r3, [r3, #24]
 800d1ba:	009b      	lsls	r3, r3, #2
 800d1bc:	693a      	ldr	r2, [r7, #16]
 800d1be:	4313      	orrs	r3, r2
 800d1c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	693a      	ldr	r2, [r7, #16]
 800d1c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	68fa      	ldr	r2, [r7, #12]
 800d1cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	685a      	ldr	r2, [r3, #4]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	697a      	ldr	r2, [r7, #20]
 800d1da:	621a      	str	r2, [r3, #32]
}
 800d1dc:	bf00      	nop
 800d1de:	3718      	adds	r7, #24
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}
 800d1e4:	feff8fff 	.word	0xfeff8fff
 800d1e8:	40010000 	.word	0x40010000
 800d1ec:	40010400 	.word	0x40010400
 800d1f0:	0801985c 	.word	0x0801985c

0800d1f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b086      	sub	sp, #24
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
 800d1fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6a1b      	ldr	r3, [r3, #32]
 800d202:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6a1b      	ldr	r3, [r3, #32]
 800d208:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	685b      	ldr	r3, [r3, #4]
 800d214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	69db      	ldr	r3, [r3, #28]
 800d21a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d21c:	68fa      	ldr	r2, [r7, #12]
 800d21e:	4b41      	ldr	r3, [pc, #260]	@ (800d324 <TIM_OC3_SetConfig+0x130>)
 800d220:	4013      	ands	r3, r2
 800d222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	f023 0303 	bic.w	r3, r3, #3
 800d22a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	68fa      	ldr	r2, [r7, #12]
 800d232:	4313      	orrs	r3, r2
 800d234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d23c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	689b      	ldr	r3, [r3, #8]
 800d242:	021b      	lsls	r3, r3, #8
 800d244:	697a      	ldr	r2, [r7, #20]
 800d246:	4313      	orrs	r3, r2
 800d248:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	4a36      	ldr	r2, [pc, #216]	@ (800d328 <TIM_OC3_SetConfig+0x134>)
 800d24e:	4293      	cmp	r3, r2
 800d250:	d003      	beq.n	800d25a <TIM_OC3_SetConfig+0x66>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	4a35      	ldr	r2, [pc, #212]	@ (800d32c <TIM_OC3_SetConfig+0x138>)
 800d256:	4293      	cmp	r3, r2
 800d258:	d11a      	bne.n	800d290 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	68db      	ldr	r3, [r3, #12]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d008      	beq.n	800d274 <TIM_OC3_SetConfig+0x80>
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	68db      	ldr	r3, [r3, #12]
 800d266:	2b08      	cmp	r3, #8
 800d268:	d004      	beq.n	800d274 <TIM_OC3_SetConfig+0x80>
 800d26a:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 800d26e:	4830      	ldr	r0, [pc, #192]	@ (800d330 <TIM_OC3_SetConfig+0x13c>)
 800d270:	f7f9 fb9c 	bl	80069ac <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d27a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	68db      	ldr	r3, [r3, #12]
 800d280:	021b      	lsls	r3, r3, #8
 800d282:	697a      	ldr	r2, [r7, #20]
 800d284:	4313      	orrs	r3, r2
 800d286:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d28e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	4a25      	ldr	r2, [pc, #148]	@ (800d328 <TIM_OC3_SetConfig+0x134>)
 800d294:	4293      	cmp	r3, r2
 800d296:	d003      	beq.n	800d2a0 <TIM_OC3_SetConfig+0xac>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	4a24      	ldr	r2, [pc, #144]	@ (800d32c <TIM_OC3_SetConfig+0x138>)
 800d29c:	4293      	cmp	r3, r2
 800d29e:	d12f      	bne.n	800d300 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	699b      	ldr	r3, [r3, #24]
 800d2a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d2a8:	d008      	beq.n	800d2bc <TIM_OC3_SetConfig+0xc8>
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	699b      	ldr	r3, [r3, #24]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d004      	beq.n	800d2bc <TIM_OC3_SetConfig+0xc8>
 800d2b2:	f641 410d 	movw	r1, #7181	@ 0x1c0d
 800d2b6:	481e      	ldr	r0, [pc, #120]	@ (800d330 <TIM_OC3_SetConfig+0x13c>)
 800d2b8:	f7f9 fb78 	bl	80069ac <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	695b      	ldr	r3, [r3, #20]
 800d2c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d2c4:	d008      	beq.n	800d2d8 <TIM_OC3_SetConfig+0xe4>
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	695b      	ldr	r3, [r3, #20]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d004      	beq.n	800d2d8 <TIM_OC3_SetConfig+0xe4>
 800d2ce:	f641 410e 	movw	r1, #7182	@ 0x1c0e
 800d2d2:	4817      	ldr	r0, [pc, #92]	@ (800d330 <TIM_OC3_SetConfig+0x13c>)
 800d2d4:	f7f9 fb6a 	bl	80069ac <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d2de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d2e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	695b      	ldr	r3, [r3, #20]
 800d2ec:	011b      	lsls	r3, r3, #4
 800d2ee:	693a      	ldr	r2, [r7, #16]
 800d2f0:	4313      	orrs	r3, r2
 800d2f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	699b      	ldr	r3, [r3, #24]
 800d2f8:	011b      	lsls	r3, r3, #4
 800d2fa:	693a      	ldr	r2, [r7, #16]
 800d2fc:	4313      	orrs	r3, r2
 800d2fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	693a      	ldr	r2, [r7, #16]
 800d304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	68fa      	ldr	r2, [r7, #12]
 800d30a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	685a      	ldr	r2, [r3, #4]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	697a      	ldr	r2, [r7, #20]
 800d318:	621a      	str	r2, [r3, #32]
}
 800d31a:	bf00      	nop
 800d31c:	3718      	adds	r7, #24
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	fffeff8f 	.word	0xfffeff8f
 800d328:	40010000 	.word	0x40010000
 800d32c:	40010400 	.word	0x40010400
 800d330:	0801985c 	.word	0x0801985c

0800d334 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b086      	sub	sp, #24
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
 800d33c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6a1b      	ldr	r3, [r3, #32]
 800d342:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6a1b      	ldr	r3, [r3, #32]
 800d348:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	685b      	ldr	r3, [r3, #4]
 800d354:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	69db      	ldr	r3, [r3, #28]
 800d35a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d35c:	68fa      	ldr	r2, [r7, #12]
 800d35e:	4b24      	ldr	r3, [pc, #144]	@ (800d3f0 <TIM_OC4_SetConfig+0xbc>)
 800d360:	4013      	ands	r3, r2
 800d362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d36a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	021b      	lsls	r3, r3, #8
 800d372:	68fa      	ldr	r2, [r7, #12]
 800d374:	4313      	orrs	r3, r2
 800d376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d37e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	689b      	ldr	r3, [r3, #8]
 800d384:	031b      	lsls	r3, r3, #12
 800d386:	693a      	ldr	r2, [r7, #16]
 800d388:	4313      	orrs	r3, r2
 800d38a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	4a19      	ldr	r2, [pc, #100]	@ (800d3f4 <TIM_OC4_SetConfig+0xc0>)
 800d390:	4293      	cmp	r3, r2
 800d392:	d003      	beq.n	800d39c <TIM_OC4_SetConfig+0x68>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	4a18      	ldr	r2, [pc, #96]	@ (800d3f8 <TIM_OC4_SetConfig+0xc4>)
 800d398:	4293      	cmp	r3, r2
 800d39a:	d117      	bne.n	800d3cc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	695b      	ldr	r3, [r3, #20]
 800d3a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d3a4:	d008      	beq.n	800d3b8 <TIM_OC4_SetConfig+0x84>
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	695b      	ldr	r3, [r3, #20]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d004      	beq.n	800d3b8 <TIM_OC4_SetConfig+0x84>
 800d3ae:	f641 414d 	movw	r1, #7245	@ 0x1c4d
 800d3b2:	4812      	ldr	r0, [pc, #72]	@ (800d3fc <TIM_OC4_SetConfig+0xc8>)
 800d3b4:	f7f9 fafa 	bl	80069ac <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d3be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	695b      	ldr	r3, [r3, #20]
 800d3c4:	019b      	lsls	r3, r3, #6
 800d3c6:	697a      	ldr	r2, [r7, #20]
 800d3c8:	4313      	orrs	r3, r2
 800d3ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	697a      	ldr	r2, [r7, #20]
 800d3d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	68fa      	ldr	r2, [r7, #12]
 800d3d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	685a      	ldr	r2, [r3, #4]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	693a      	ldr	r2, [r7, #16]
 800d3e4:	621a      	str	r2, [r3, #32]
}
 800d3e6:	bf00      	nop
 800d3e8:	3718      	adds	r7, #24
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
 800d3ee:	bf00      	nop
 800d3f0:	feff8fff 	.word	0xfeff8fff
 800d3f4:	40010000 	.word	0x40010000
 800d3f8:	40010400 	.word	0x40010400
 800d3fc:	0801985c 	.word	0x0801985c

0800d400 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d400:	b480      	push	{r7}
 800d402:	b087      	sub	sp, #28
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
 800d408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6a1b      	ldr	r3, [r3, #32]
 800d40e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6a1b      	ldr	r3, [r3, #32]
 800d414:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	685b      	ldr	r3, [r3, #4]
 800d420:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d428:	68fa      	ldr	r2, [r7, #12]
 800d42a:	4b1b      	ldr	r3, [pc, #108]	@ (800d498 <TIM_OC5_SetConfig+0x98>)
 800d42c:	4013      	ands	r3, r2
 800d42e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	68fa      	ldr	r2, [r7, #12]
 800d436:	4313      	orrs	r3, r2
 800d438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d440:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	689b      	ldr	r3, [r3, #8]
 800d446:	041b      	lsls	r3, r3, #16
 800d448:	693a      	ldr	r2, [r7, #16]
 800d44a:	4313      	orrs	r3, r2
 800d44c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	4a12      	ldr	r2, [pc, #72]	@ (800d49c <TIM_OC5_SetConfig+0x9c>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d003      	beq.n	800d45e <TIM_OC5_SetConfig+0x5e>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	4a11      	ldr	r2, [pc, #68]	@ (800d4a0 <TIM_OC5_SetConfig+0xa0>)
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d109      	bne.n	800d472 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d45e:	697b      	ldr	r3, [r7, #20]
 800d460:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d464:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	695b      	ldr	r3, [r3, #20]
 800d46a:	021b      	lsls	r3, r3, #8
 800d46c:	697a      	ldr	r2, [r7, #20]
 800d46e:	4313      	orrs	r3, r2
 800d470:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	697a      	ldr	r2, [r7, #20]
 800d476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	68fa      	ldr	r2, [r7, #12]
 800d47c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	685a      	ldr	r2, [r3, #4]
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	693a      	ldr	r2, [r7, #16]
 800d48a:	621a      	str	r2, [r3, #32]
}
 800d48c:	bf00      	nop
 800d48e:	371c      	adds	r7, #28
 800d490:	46bd      	mov	sp, r7
 800d492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d496:	4770      	bx	lr
 800d498:	fffeff8f 	.word	0xfffeff8f
 800d49c:	40010000 	.word	0x40010000
 800d4a0:	40010400 	.word	0x40010400

0800d4a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b087      	sub	sp, #28
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6a1b      	ldr	r3, [r3, #32]
 800d4b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6a1b      	ldr	r3, [r3, #32]
 800d4b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	685b      	ldr	r3, [r3, #4]
 800d4c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d4ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d4cc:	68fa      	ldr	r2, [r7, #12]
 800d4ce:	4b1c      	ldr	r3, [pc, #112]	@ (800d540 <TIM_OC6_SetConfig+0x9c>)
 800d4d0:	4013      	ands	r3, r2
 800d4d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	021b      	lsls	r3, r3, #8
 800d4da:	68fa      	ldr	r2, [r7, #12]
 800d4dc:	4313      	orrs	r3, r2
 800d4de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d4e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	689b      	ldr	r3, [r3, #8]
 800d4ec:	051b      	lsls	r3, r3, #20
 800d4ee:	693a      	ldr	r2, [r7, #16]
 800d4f0:	4313      	orrs	r3, r2
 800d4f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	4a13      	ldr	r2, [pc, #76]	@ (800d544 <TIM_OC6_SetConfig+0xa0>)
 800d4f8:	4293      	cmp	r3, r2
 800d4fa:	d003      	beq.n	800d504 <TIM_OC6_SetConfig+0x60>
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	4a12      	ldr	r2, [pc, #72]	@ (800d548 <TIM_OC6_SetConfig+0xa4>)
 800d500:	4293      	cmp	r3, r2
 800d502:	d109      	bne.n	800d518 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d50a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	695b      	ldr	r3, [r3, #20]
 800d510:	029b      	lsls	r3, r3, #10
 800d512:	697a      	ldr	r2, [r7, #20]
 800d514:	4313      	orrs	r3, r2
 800d516:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	697a      	ldr	r2, [r7, #20]
 800d51c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	68fa      	ldr	r2, [r7, #12]
 800d522:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	685a      	ldr	r2, [r3, #4]
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	693a      	ldr	r2, [r7, #16]
 800d530:	621a      	str	r2, [r3, #32]
}
 800d532:	bf00      	nop
 800d534:	371c      	adds	r7, #28
 800d536:	46bd      	mov	sp, r7
 800d538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53c:	4770      	bx	lr
 800d53e:	bf00      	nop
 800d540:	feff8fff 	.word	0xfeff8fff
 800d544:	40010000 	.word	0x40010000
 800d548:	40010400 	.word	0x40010400

0800d54c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b086      	sub	sp, #24
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
 800d554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d556:	2300      	movs	r3, #0
 800d558:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	689b      	ldr	r3, [r3, #8]
 800d560:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d562:	693b      	ldr	r3, [r7, #16]
 800d564:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d568:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	685b      	ldr	r3, [r3, #4]
 800d56e:	693a      	ldr	r2, [r7, #16]
 800d570:	4313      	orrs	r3, r2
 800d572:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800d574:	693a      	ldr	r2, [r7, #16]
 800d576:	4b8f      	ldr	r3, [pc, #572]	@ (800d7b4 <TIM_SlaveTimer_SetConfig+0x268>)
 800d578:	4013      	ands	r3, r2
 800d57a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	693a      	ldr	r2, [r7, #16]
 800d582:	4313      	orrs	r3, r2
 800d584:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	693a      	ldr	r2, [r7, #16]
 800d58c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	685b      	ldr	r3, [r3, #4]
 800d592:	2b70      	cmp	r3, #112	@ 0x70
 800d594:	d027      	beq.n	800d5e6 <TIM_SlaveTimer_SetConfig+0x9a>
 800d596:	2b70      	cmp	r3, #112	@ 0x70
 800d598:	f200 821c 	bhi.w	800d9d4 <TIM_SlaveTimer_SetConfig+0x488>
 800d59c:	2b60      	cmp	r3, #96	@ 0x60
 800d59e:	f000 8191 	beq.w	800d8c4 <TIM_SlaveTimer_SetConfig+0x378>
 800d5a2:	2b60      	cmp	r3, #96	@ 0x60
 800d5a4:	f200 8216 	bhi.w	800d9d4 <TIM_SlaveTimer_SetConfig+0x488>
 800d5a8:	2b50      	cmp	r3, #80	@ 0x50
 800d5aa:	f000 811d 	beq.w	800d7e8 <TIM_SlaveTimer_SetConfig+0x29c>
 800d5ae:	2b50      	cmp	r3, #80	@ 0x50
 800d5b0:	f200 8210 	bhi.w	800d9d4 <TIM_SlaveTimer_SetConfig+0x488>
 800d5b4:	2b40      	cmp	r3, #64	@ 0x40
 800d5b6:	f000 8089 	beq.w	800d6cc <TIM_SlaveTimer_SetConfig+0x180>
 800d5ba:	2b40      	cmp	r3, #64	@ 0x40
 800d5bc:	f200 820a 	bhi.w	800d9d4 <TIM_SlaveTimer_SetConfig+0x488>
 800d5c0:	2b30      	cmp	r3, #48	@ 0x30
 800d5c2:	f000 81d9 	beq.w	800d978 <TIM_SlaveTimer_SetConfig+0x42c>
 800d5c6:	2b30      	cmp	r3, #48	@ 0x30
 800d5c8:	f200 8204 	bhi.w	800d9d4 <TIM_SlaveTimer_SetConfig+0x488>
 800d5cc:	2b20      	cmp	r3, #32
 800d5ce:	f000 81d3 	beq.w	800d978 <TIM_SlaveTimer_SetConfig+0x42c>
 800d5d2:	2b20      	cmp	r3, #32
 800d5d4:	f200 81fe 	bhi.w	800d9d4 <TIM_SlaveTimer_SetConfig+0x488>
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	f000 81cd 	beq.w	800d978 <TIM_SlaveTimer_SetConfig+0x42c>
 800d5de:	2b10      	cmp	r3, #16
 800d5e0:	f000 81ca 	beq.w	800d978 <TIM_SlaveTimer_SetConfig+0x42c>
 800d5e4:	e1f6      	b.n	800d9d4 <TIM_SlaveTimer_SetConfig+0x488>
  {
    case TIM_TS_ETRF:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	4a73      	ldr	r2, [pc, #460]	@ (800d7b8 <TIM_SlaveTimer_SetConfig+0x26c>)
 800d5ec:	4293      	cmp	r3, r2
 800d5ee:	d027      	beq.n	800d640 <TIM_SlaveTimer_SetConfig+0xf4>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d5f8:	d022      	beq.n	800d640 <TIM_SlaveTimer_SetConfig+0xf4>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	4a6f      	ldr	r2, [pc, #444]	@ (800d7bc <TIM_SlaveTimer_SetConfig+0x270>)
 800d600:	4293      	cmp	r3, r2
 800d602:	d01d      	beq.n	800d640 <TIM_SlaveTimer_SetConfig+0xf4>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	4a6d      	ldr	r2, [pc, #436]	@ (800d7c0 <TIM_SlaveTimer_SetConfig+0x274>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d018      	beq.n	800d640 <TIM_SlaveTimer_SetConfig+0xf4>
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	4a6c      	ldr	r2, [pc, #432]	@ (800d7c4 <TIM_SlaveTimer_SetConfig+0x278>)
 800d614:	4293      	cmp	r3, r2
 800d616:	d013      	beq.n	800d640 <TIM_SlaveTimer_SetConfig+0xf4>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4a6a      	ldr	r2, [pc, #424]	@ (800d7c8 <TIM_SlaveTimer_SetConfig+0x27c>)
 800d61e:	4293      	cmp	r3, r2
 800d620:	d00e      	beq.n	800d640 <TIM_SlaveTimer_SetConfig+0xf4>
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	4a69      	ldr	r2, [pc, #420]	@ (800d7cc <TIM_SlaveTimer_SetConfig+0x280>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d009      	beq.n	800d640 <TIM_SlaveTimer_SetConfig+0xf4>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	4a67      	ldr	r2, [pc, #412]	@ (800d7d0 <TIM_SlaveTimer_SetConfig+0x284>)
 800d632:	4293      	cmp	r3, r2
 800d634:	d004      	beq.n	800d640 <TIM_SlaveTimer_SetConfig+0xf4>
 800d636:	f641 41f4 	movw	r1, #7412	@ 0x1cf4
 800d63a:	4866      	ldr	r0, [pc, #408]	@ (800d7d4 <TIM_SlaveTimer_SetConfig+0x288>)
 800d63c:	f7f9 f9b6 	bl	80069ac <assert_failed>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	68db      	ldr	r3, [r3, #12]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d013      	beq.n	800d670 <TIM_SlaveTimer_SetConfig+0x124>
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	68db      	ldr	r3, [r3, #12]
 800d64c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d650:	d00e      	beq.n	800d670 <TIM_SlaveTimer_SetConfig+0x124>
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	68db      	ldr	r3, [r3, #12]
 800d656:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d65a:	d009      	beq.n	800d670 <TIM_SlaveTimer_SetConfig+0x124>
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	68db      	ldr	r3, [r3, #12]
 800d660:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d664:	d004      	beq.n	800d670 <TIM_SlaveTimer_SetConfig+0x124>
 800d666:	f641 41f5 	movw	r1, #7413	@ 0x1cf5
 800d66a:	485a      	ldr	r0, [pc, #360]	@ (800d7d4 <TIM_SlaveTimer_SetConfig+0x288>)
 800d66c:	f7f9 f99e 	bl	80069ac <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	689b      	ldr	r3, [r3, #8]
 800d674:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d678:	d014      	beq.n	800d6a4 <TIM_SlaveTimer_SetConfig+0x158>
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	689b      	ldr	r3, [r3, #8]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d010      	beq.n	800d6a4 <TIM_SlaveTimer_SetConfig+0x158>
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	689b      	ldr	r3, [r3, #8]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d00c      	beq.n	800d6a4 <TIM_SlaveTimer_SetConfig+0x158>
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	689b      	ldr	r3, [r3, #8]
 800d68e:	2b02      	cmp	r3, #2
 800d690:	d008      	beq.n	800d6a4 <TIM_SlaveTimer_SetConfig+0x158>
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	689b      	ldr	r3, [r3, #8]
 800d696:	2b0a      	cmp	r3, #10
 800d698:	d004      	beq.n	800d6a4 <TIM_SlaveTimer_SetConfig+0x158>
 800d69a:	f641 41f6 	movw	r1, #7414	@ 0x1cf6
 800d69e:	484d      	ldr	r0, [pc, #308]	@ (800d7d4 <TIM_SlaveTimer_SetConfig+0x288>)
 800d6a0:	f7f9 f984 	bl	80069ac <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	691b      	ldr	r3, [r3, #16]
 800d6a8:	2b0f      	cmp	r3, #15
 800d6aa:	d904      	bls.n	800d6b6 <TIM_SlaveTimer_SetConfig+0x16a>
 800d6ac:	f641 41f7 	movw	r1, #7415	@ 0x1cf7
 800d6b0:	4848      	ldr	r0, [pc, #288]	@ (800d7d4 <TIM_SlaveTimer_SetConfig+0x288>)
 800d6b2:	f7f9 f97b 	bl	80069ac <assert_failed>
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800d6c6:	f000 fa21 	bl	800db0c <TIM_ETR_SetConfig>
      break;
 800d6ca:	e187      	b.n	800d9dc <TIM_SlaveTimer_SetConfig+0x490>
    }

    case TIM_TS_TI1F_ED:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4a39      	ldr	r2, [pc, #228]	@ (800d7b8 <TIM_SlaveTimer_SetConfig+0x26c>)
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	d03b      	beq.n	800d74e <TIM_SlaveTimer_SetConfig+0x202>
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d6de:	d036      	beq.n	800d74e <TIM_SlaveTimer_SetConfig+0x202>
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	4a35      	ldr	r2, [pc, #212]	@ (800d7bc <TIM_SlaveTimer_SetConfig+0x270>)
 800d6e6:	4293      	cmp	r3, r2
 800d6e8:	d031      	beq.n	800d74e <TIM_SlaveTimer_SetConfig+0x202>
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	4a34      	ldr	r2, [pc, #208]	@ (800d7c0 <TIM_SlaveTimer_SetConfig+0x274>)
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	d02c      	beq.n	800d74e <TIM_SlaveTimer_SetConfig+0x202>
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	4a32      	ldr	r2, [pc, #200]	@ (800d7c4 <TIM_SlaveTimer_SetConfig+0x278>)
 800d6fa:	4293      	cmp	r3, r2
 800d6fc:	d027      	beq.n	800d74e <TIM_SlaveTimer_SetConfig+0x202>
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	4a31      	ldr	r2, [pc, #196]	@ (800d7c8 <TIM_SlaveTimer_SetConfig+0x27c>)
 800d704:	4293      	cmp	r3, r2
 800d706:	d022      	beq.n	800d74e <TIM_SlaveTimer_SetConfig+0x202>
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	4a2f      	ldr	r2, [pc, #188]	@ (800d7cc <TIM_SlaveTimer_SetConfig+0x280>)
 800d70e:	4293      	cmp	r3, r2
 800d710:	d01d      	beq.n	800d74e <TIM_SlaveTimer_SetConfig+0x202>
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	4a30      	ldr	r2, [pc, #192]	@ (800d7d8 <TIM_SlaveTimer_SetConfig+0x28c>)
 800d718:	4293      	cmp	r3, r2
 800d71a:	d018      	beq.n	800d74e <TIM_SlaveTimer_SetConfig+0x202>
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	4a2e      	ldr	r2, [pc, #184]	@ (800d7dc <TIM_SlaveTimer_SetConfig+0x290>)
 800d722:	4293      	cmp	r3, r2
 800d724:	d013      	beq.n	800d74e <TIM_SlaveTimer_SetConfig+0x202>
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	4a29      	ldr	r2, [pc, #164]	@ (800d7d0 <TIM_SlaveTimer_SetConfig+0x284>)
 800d72c:	4293      	cmp	r3, r2
 800d72e:	d00e      	beq.n	800d74e <TIM_SlaveTimer_SetConfig+0x202>
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	4a2a      	ldr	r2, [pc, #168]	@ (800d7e0 <TIM_SlaveTimer_SetConfig+0x294>)
 800d736:	4293      	cmp	r3, r2
 800d738:	d009      	beq.n	800d74e <TIM_SlaveTimer_SetConfig+0x202>
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	4a29      	ldr	r2, [pc, #164]	@ (800d7e4 <TIM_SlaveTimer_SetConfig+0x298>)
 800d740:	4293      	cmp	r3, r2
 800d742:	d004      	beq.n	800d74e <TIM_SlaveTimer_SetConfig+0x202>
 800d744:	f641 5103 	movw	r1, #7427	@ 0x1d03
 800d748:	4822      	ldr	r0, [pc, #136]	@ (800d7d4 <TIM_SlaveTimer_SetConfig+0x288>)
 800d74a:	f7f9 f92f 	bl	80069ac <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	691b      	ldr	r3, [r3, #16]
 800d752:	2b0f      	cmp	r3, #15
 800d754:	d904      	bls.n	800d760 <TIM_SlaveTimer_SetConfig+0x214>
 800d756:	f641 5104 	movw	r1, #7428	@ 0x1d04
 800d75a:	481e      	ldr	r0, [pc, #120]	@ (800d7d4 <TIM_SlaveTimer_SetConfig+0x288>)
 800d75c:	f7f9 f926 	bl	80069ac <assert_failed>

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	2b05      	cmp	r3, #5
 800d766:	d101      	bne.n	800d76c <TIM_SlaveTimer_SetConfig+0x220>
      {
        return HAL_ERROR;
 800d768:	2301      	movs	r3, #1
 800d76a:	e138      	b.n	800d9de <TIM_SlaveTimer_SetConfig+0x492>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	6a1b      	ldr	r3, [r3, #32]
 800d772:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	6a1a      	ldr	r2, [r3, #32]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	f022 0201 	bic.w	r2, r2, #1
 800d782:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	699b      	ldr	r3, [r3, #24]
 800d78a:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d792:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	691b      	ldr	r3, [r3, #16]
 800d798:	011b      	lsls	r3, r3, #4
 800d79a:	68ba      	ldr	r2, [r7, #8]
 800d79c:	4313      	orrs	r3, r2
 800d79e:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	68ba      	ldr	r2, [r7, #8]
 800d7a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	68fa      	ldr	r2, [r7, #12]
 800d7ae:	621a      	str	r2, [r3, #32]
      break;
 800d7b0:	e114      	b.n	800d9dc <TIM_SlaveTimer_SetConfig+0x490>
 800d7b2:	bf00      	nop
 800d7b4:	fffefff8 	.word	0xfffefff8
 800d7b8:	40010000 	.word	0x40010000
 800d7bc:	40000400 	.word	0x40000400
 800d7c0:	40000800 	.word	0x40000800
 800d7c4:	40000c00 	.word	0x40000c00
 800d7c8:	40010400 	.word	0x40010400
 800d7cc:	40014000 	.word	0x40014000
 800d7d0:	40001800 	.word	0x40001800
 800d7d4:	0801985c 	.word	0x0801985c
 800d7d8:	40014400 	.word	0x40014400
 800d7dc:	40014800 	.word	0x40014800
 800d7e0:	40001c00 	.word	0x40001c00
 800d7e4:	40002000 	.word	0x40002000
    }

    case TIM_TS_TI1FP1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	4a7e      	ldr	r2, [pc, #504]	@ (800d9e8 <TIM_SlaveTimer_SetConfig+0x49c>)
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	d03b      	beq.n	800d86a <TIM_SlaveTimer_SetConfig+0x31e>
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7fa:	d036      	beq.n	800d86a <TIM_SlaveTimer_SetConfig+0x31e>
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	4a7a      	ldr	r2, [pc, #488]	@ (800d9ec <TIM_SlaveTimer_SetConfig+0x4a0>)
 800d802:	4293      	cmp	r3, r2
 800d804:	d031      	beq.n	800d86a <TIM_SlaveTimer_SetConfig+0x31e>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	4a79      	ldr	r2, [pc, #484]	@ (800d9f0 <TIM_SlaveTimer_SetConfig+0x4a4>)
 800d80c:	4293      	cmp	r3, r2
 800d80e:	d02c      	beq.n	800d86a <TIM_SlaveTimer_SetConfig+0x31e>
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	4a77      	ldr	r2, [pc, #476]	@ (800d9f4 <TIM_SlaveTimer_SetConfig+0x4a8>)
 800d816:	4293      	cmp	r3, r2
 800d818:	d027      	beq.n	800d86a <TIM_SlaveTimer_SetConfig+0x31e>
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	4a76      	ldr	r2, [pc, #472]	@ (800d9f8 <TIM_SlaveTimer_SetConfig+0x4ac>)
 800d820:	4293      	cmp	r3, r2
 800d822:	d022      	beq.n	800d86a <TIM_SlaveTimer_SetConfig+0x31e>
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	4a74      	ldr	r2, [pc, #464]	@ (800d9fc <TIM_SlaveTimer_SetConfig+0x4b0>)
 800d82a:	4293      	cmp	r3, r2
 800d82c:	d01d      	beq.n	800d86a <TIM_SlaveTimer_SetConfig+0x31e>
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	4a73      	ldr	r2, [pc, #460]	@ (800da00 <TIM_SlaveTimer_SetConfig+0x4b4>)
 800d834:	4293      	cmp	r3, r2
 800d836:	d018      	beq.n	800d86a <TIM_SlaveTimer_SetConfig+0x31e>
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	4a71      	ldr	r2, [pc, #452]	@ (800da04 <TIM_SlaveTimer_SetConfig+0x4b8>)
 800d83e:	4293      	cmp	r3, r2
 800d840:	d013      	beq.n	800d86a <TIM_SlaveTimer_SetConfig+0x31e>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	4a70      	ldr	r2, [pc, #448]	@ (800da08 <TIM_SlaveTimer_SetConfig+0x4bc>)
 800d848:	4293      	cmp	r3, r2
 800d84a:	d00e      	beq.n	800d86a <TIM_SlaveTimer_SetConfig+0x31e>
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	4a6e      	ldr	r2, [pc, #440]	@ (800da0c <TIM_SlaveTimer_SetConfig+0x4c0>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d009      	beq.n	800d86a <TIM_SlaveTimer_SetConfig+0x31e>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	4a6d      	ldr	r2, [pc, #436]	@ (800da10 <TIM_SlaveTimer_SetConfig+0x4c4>)
 800d85c:	4293      	cmp	r3, r2
 800d85e:	d004      	beq.n	800d86a <TIM_SlaveTimer_SetConfig+0x31e>
 800d860:	f641 511d 	movw	r1, #7453	@ 0x1d1d
 800d864:	486b      	ldr	r0, [pc, #428]	@ (800da14 <TIM_SlaveTimer_SetConfig+0x4c8>)
 800d866:	f7f9 f8a1 	bl	80069ac <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	689b      	ldr	r3, [r3, #8]
 800d86e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d872:	d014      	beq.n	800d89e <TIM_SlaveTimer_SetConfig+0x352>
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	689b      	ldr	r3, [r3, #8]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d010      	beq.n	800d89e <TIM_SlaveTimer_SetConfig+0x352>
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	689b      	ldr	r3, [r3, #8]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d00c      	beq.n	800d89e <TIM_SlaveTimer_SetConfig+0x352>
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	689b      	ldr	r3, [r3, #8]
 800d888:	2b02      	cmp	r3, #2
 800d88a:	d008      	beq.n	800d89e <TIM_SlaveTimer_SetConfig+0x352>
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	689b      	ldr	r3, [r3, #8]
 800d890:	2b0a      	cmp	r3, #10
 800d892:	d004      	beq.n	800d89e <TIM_SlaveTimer_SetConfig+0x352>
 800d894:	f641 511e 	movw	r1, #7454	@ 0x1d1e
 800d898:	485e      	ldr	r0, [pc, #376]	@ (800da14 <TIM_SlaveTimer_SetConfig+0x4c8>)
 800d89a:	f7f9 f887 	bl	80069ac <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	691b      	ldr	r3, [r3, #16]
 800d8a2:	2b0f      	cmp	r3, #15
 800d8a4:	d904      	bls.n	800d8b0 <TIM_SlaveTimer_SetConfig+0x364>
 800d8a6:	f641 511f 	movw	r1, #7455	@ 0x1d1f
 800d8aa:	485a      	ldr	r0, [pc, #360]	@ (800da14 <TIM_SlaveTimer_SetConfig+0x4c8>)
 800d8ac:	f7f9 f87e 	bl	80069ac <assert_failed>

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d8bc:	461a      	mov	r2, r3
 800d8be:	f000 f8ab 	bl	800da18 <TIM_TI1_ConfigInputStage>
      break;
 800d8c2:	e08b      	b.n	800d9dc <TIM_SlaveTimer_SetConfig+0x490>
    }

    case TIM_TS_TI2FP2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	4a47      	ldr	r2, [pc, #284]	@ (800d9e8 <TIM_SlaveTimer_SetConfig+0x49c>)
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	d027      	beq.n	800d91e <TIM_SlaveTimer_SetConfig+0x3d2>
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d8d6:	d022      	beq.n	800d91e <TIM_SlaveTimer_SetConfig+0x3d2>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	4a43      	ldr	r2, [pc, #268]	@ (800d9ec <TIM_SlaveTimer_SetConfig+0x4a0>)
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d01d      	beq.n	800d91e <TIM_SlaveTimer_SetConfig+0x3d2>
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	4a42      	ldr	r2, [pc, #264]	@ (800d9f0 <TIM_SlaveTimer_SetConfig+0x4a4>)
 800d8e8:	4293      	cmp	r3, r2
 800d8ea:	d018      	beq.n	800d91e <TIM_SlaveTimer_SetConfig+0x3d2>
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	4a40      	ldr	r2, [pc, #256]	@ (800d9f4 <TIM_SlaveTimer_SetConfig+0x4a8>)
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d013      	beq.n	800d91e <TIM_SlaveTimer_SetConfig+0x3d2>
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	4a3f      	ldr	r2, [pc, #252]	@ (800d9f8 <TIM_SlaveTimer_SetConfig+0x4ac>)
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d00e      	beq.n	800d91e <TIM_SlaveTimer_SetConfig+0x3d2>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	4a3d      	ldr	r2, [pc, #244]	@ (800d9fc <TIM_SlaveTimer_SetConfig+0x4b0>)
 800d906:	4293      	cmp	r3, r2
 800d908:	d009      	beq.n	800d91e <TIM_SlaveTimer_SetConfig+0x3d2>
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	4a3e      	ldr	r2, [pc, #248]	@ (800da08 <TIM_SlaveTimer_SetConfig+0x4bc>)
 800d910:	4293      	cmp	r3, r2
 800d912:	d004      	beq.n	800d91e <TIM_SlaveTimer_SetConfig+0x3d2>
 800d914:	f641 512b 	movw	r1, #7467	@ 0x1d2b
 800d918:	483e      	ldr	r0, [pc, #248]	@ (800da14 <TIM_SlaveTimer_SetConfig+0x4c8>)
 800d91a:	f7f9 f847 	bl	80069ac <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	689b      	ldr	r3, [r3, #8]
 800d922:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d926:	d014      	beq.n	800d952 <TIM_SlaveTimer_SetConfig+0x406>
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	689b      	ldr	r3, [r3, #8]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d010      	beq.n	800d952 <TIM_SlaveTimer_SetConfig+0x406>
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	689b      	ldr	r3, [r3, #8]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d00c      	beq.n	800d952 <TIM_SlaveTimer_SetConfig+0x406>
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	689b      	ldr	r3, [r3, #8]
 800d93c:	2b02      	cmp	r3, #2
 800d93e:	d008      	beq.n	800d952 <TIM_SlaveTimer_SetConfig+0x406>
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	689b      	ldr	r3, [r3, #8]
 800d944:	2b0a      	cmp	r3, #10
 800d946:	d004      	beq.n	800d952 <TIM_SlaveTimer_SetConfig+0x406>
 800d948:	f641 512c 	movw	r1, #7468	@ 0x1d2c
 800d94c:	4831      	ldr	r0, [pc, #196]	@ (800da14 <TIM_SlaveTimer_SetConfig+0x4c8>)
 800d94e:	f7f9 f82d 	bl	80069ac <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	691b      	ldr	r3, [r3, #16]
 800d956:	2b0f      	cmp	r3, #15
 800d958:	d904      	bls.n	800d964 <TIM_SlaveTimer_SetConfig+0x418>
 800d95a:	f641 512d 	movw	r1, #7469	@ 0x1d2d
 800d95e:	482d      	ldr	r0, [pc, #180]	@ (800da14 <TIM_SlaveTimer_SetConfig+0x4c8>)
 800d960:	f7f9 f824 	bl	80069ac <assert_failed>

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d970:	461a      	mov	r2, r3
 800d972:	f000 f880 	bl	800da76 <TIM_TI2_ConfigInputStage>
      break;
 800d976:	e031      	b.n	800d9dc <TIM_SlaveTimer_SetConfig+0x490>
    case TIM_TS_ITR1:
    case TIM_TS_ITR2:
    case TIM_TS_ITR3:
    {
      /* Check the parameter */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4a1a      	ldr	r2, [pc, #104]	@ (800d9e8 <TIM_SlaveTimer_SetConfig+0x49c>)
 800d97e:	4293      	cmp	r3, r2
 800d980:	d02b      	beq.n	800d9da <TIM_SlaveTimer_SetConfig+0x48e>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d98a:	d026      	beq.n	800d9da <TIM_SlaveTimer_SetConfig+0x48e>
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4a16      	ldr	r2, [pc, #88]	@ (800d9ec <TIM_SlaveTimer_SetConfig+0x4a0>)
 800d992:	4293      	cmp	r3, r2
 800d994:	d021      	beq.n	800d9da <TIM_SlaveTimer_SetConfig+0x48e>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	4a15      	ldr	r2, [pc, #84]	@ (800d9f0 <TIM_SlaveTimer_SetConfig+0x4a4>)
 800d99c:	4293      	cmp	r3, r2
 800d99e:	d01c      	beq.n	800d9da <TIM_SlaveTimer_SetConfig+0x48e>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	4a13      	ldr	r2, [pc, #76]	@ (800d9f4 <TIM_SlaveTimer_SetConfig+0x4a8>)
 800d9a6:	4293      	cmp	r3, r2
 800d9a8:	d017      	beq.n	800d9da <TIM_SlaveTimer_SetConfig+0x48e>
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	4a12      	ldr	r2, [pc, #72]	@ (800d9f8 <TIM_SlaveTimer_SetConfig+0x4ac>)
 800d9b0:	4293      	cmp	r3, r2
 800d9b2:	d012      	beq.n	800d9da <TIM_SlaveTimer_SetConfig+0x48e>
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	4a10      	ldr	r2, [pc, #64]	@ (800d9fc <TIM_SlaveTimer_SetConfig+0x4b0>)
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	d00d      	beq.n	800d9da <TIM_SlaveTimer_SetConfig+0x48e>
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	4a11      	ldr	r2, [pc, #68]	@ (800da08 <TIM_SlaveTimer_SetConfig+0x4bc>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d008      	beq.n	800d9da <TIM_SlaveTimer_SetConfig+0x48e>
 800d9c8:	f641 513c 	movw	r1, #7484	@ 0x1d3c
 800d9cc:	4811      	ldr	r0, [pc, #68]	@ (800da14 <TIM_SlaveTimer_SetConfig+0x4c8>)
 800d9ce:	f7f8 ffed 	bl	80069ac <assert_failed>
      break;
 800d9d2:	e002      	b.n	800d9da <TIM_SlaveTimer_SetConfig+0x48e>
    }

    default:
      status = HAL_ERROR;
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	75fb      	strb	r3, [r7, #23]
      break;
 800d9d8:	e000      	b.n	800d9dc <TIM_SlaveTimer_SetConfig+0x490>
      break;
 800d9da:	bf00      	nop
  }

  return status;
 800d9dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	3718      	adds	r7, #24
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}
 800d9e6:	bf00      	nop
 800d9e8:	40010000 	.word	0x40010000
 800d9ec:	40000400 	.word	0x40000400
 800d9f0:	40000800 	.word	0x40000800
 800d9f4:	40000c00 	.word	0x40000c00
 800d9f8:	40010400 	.word	0x40010400
 800d9fc:	40014000 	.word	0x40014000
 800da00:	40014400 	.word	0x40014400
 800da04:	40014800 	.word	0x40014800
 800da08:	40001800 	.word	0x40001800
 800da0c:	40001c00 	.word	0x40001c00
 800da10:	40002000 	.word	0x40002000
 800da14:	0801985c 	.word	0x0801985c

0800da18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800da18:	b480      	push	{r7}
 800da1a:	b087      	sub	sp, #28
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	60f8      	str	r0, [r7, #12]
 800da20:	60b9      	str	r1, [r7, #8]
 800da22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	6a1b      	ldr	r3, [r3, #32]
 800da28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	6a1b      	ldr	r3, [r3, #32]
 800da2e:	f023 0201 	bic.w	r2, r3, #1
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	699b      	ldr	r3, [r3, #24]
 800da3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800da42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	011b      	lsls	r3, r3, #4
 800da48:	693a      	ldr	r2, [r7, #16]
 800da4a:	4313      	orrs	r3, r2
 800da4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800da4e:	697b      	ldr	r3, [r7, #20]
 800da50:	f023 030a 	bic.w	r3, r3, #10
 800da54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800da56:	697a      	ldr	r2, [r7, #20]
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	4313      	orrs	r3, r2
 800da5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	693a      	ldr	r2, [r7, #16]
 800da62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	697a      	ldr	r2, [r7, #20]
 800da68:	621a      	str	r2, [r3, #32]
}
 800da6a:	bf00      	nop
 800da6c:	371c      	adds	r7, #28
 800da6e:	46bd      	mov	sp, r7
 800da70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da74:	4770      	bx	lr

0800da76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800da76:	b480      	push	{r7}
 800da78:	b087      	sub	sp, #28
 800da7a:	af00      	add	r7, sp, #0
 800da7c:	60f8      	str	r0, [r7, #12]
 800da7e:	60b9      	str	r1, [r7, #8]
 800da80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	6a1b      	ldr	r3, [r3, #32]
 800da86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	6a1b      	ldr	r3, [r3, #32]
 800da8c:	f023 0210 	bic.w	r2, r3, #16
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	699b      	ldr	r3, [r3, #24]
 800da98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800da9a:	693b      	ldr	r3, [r7, #16]
 800da9c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800daa0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	031b      	lsls	r3, r3, #12
 800daa6:	693a      	ldr	r2, [r7, #16]
 800daa8:	4313      	orrs	r3, r2
 800daaa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800daac:	697b      	ldr	r3, [r7, #20]
 800daae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800dab2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	011b      	lsls	r3, r3, #4
 800dab8:	697a      	ldr	r2, [r7, #20]
 800daba:	4313      	orrs	r3, r2
 800dabc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	693a      	ldr	r2, [r7, #16]
 800dac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	697a      	ldr	r2, [r7, #20]
 800dac8:	621a      	str	r2, [r3, #32]
}
 800daca:	bf00      	nop
 800dacc:	371c      	adds	r7, #28
 800dace:	46bd      	mov	sp, r7
 800dad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad4:	4770      	bx	lr

0800dad6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dad6:	b480      	push	{r7}
 800dad8:	b085      	sub	sp, #20
 800dada:	af00      	add	r7, sp, #0
 800dadc:	6078      	str	r0, [r7, #4]
 800dade:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	689b      	ldr	r3, [r3, #8]
 800dae4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800daec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800daee:	683a      	ldr	r2, [r7, #0]
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	4313      	orrs	r3, r2
 800daf4:	f043 0307 	orr.w	r3, r3, #7
 800daf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	68fa      	ldr	r2, [r7, #12]
 800dafe:	609a      	str	r2, [r3, #8]
}
 800db00:	bf00      	nop
 800db02:	3714      	adds	r7, #20
 800db04:	46bd      	mov	sp, r7
 800db06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0a:	4770      	bx	lr

0800db0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800db0c:	b480      	push	{r7}
 800db0e:	b087      	sub	sp, #28
 800db10:	af00      	add	r7, sp, #0
 800db12:	60f8      	str	r0, [r7, #12]
 800db14:	60b9      	str	r1, [r7, #8]
 800db16:	607a      	str	r2, [r7, #4]
 800db18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	689b      	ldr	r3, [r3, #8]
 800db1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800db20:	697b      	ldr	r3, [r7, #20]
 800db22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800db26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	021a      	lsls	r2, r3, #8
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	431a      	orrs	r2, r3
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	4313      	orrs	r3, r2
 800db34:	697a      	ldr	r2, [r7, #20]
 800db36:	4313      	orrs	r3, r2
 800db38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	697a      	ldr	r2, [r7, #20]
 800db3e:	609a      	str	r2, [r3, #8]
}
 800db40:	bf00      	nop
 800db42:	371c      	adds	r7, #28
 800db44:	46bd      	mov	sp, r7
 800db46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4a:	4770      	bx	lr

0800db4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b086      	sub	sp, #24
 800db50:	af00      	add	r7, sp, #0
 800db52:	60f8      	str	r0, [r7, #12]
 800db54:	60b9      	str	r1, [r7, #8]
 800db56:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	4a35      	ldr	r2, [pc, #212]	@ (800dc30 <TIM_CCxChannelCmd+0xe4>)
 800db5c:	4293      	cmp	r3, r2
 800db5e:	d030      	beq.n	800dbc2 <TIM_CCxChannelCmd+0x76>
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db66:	d02c      	beq.n	800dbc2 <TIM_CCxChannelCmd+0x76>
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	4a32      	ldr	r2, [pc, #200]	@ (800dc34 <TIM_CCxChannelCmd+0xe8>)
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d028      	beq.n	800dbc2 <TIM_CCxChannelCmd+0x76>
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	4a31      	ldr	r2, [pc, #196]	@ (800dc38 <TIM_CCxChannelCmd+0xec>)
 800db74:	4293      	cmp	r3, r2
 800db76:	d024      	beq.n	800dbc2 <TIM_CCxChannelCmd+0x76>
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	4a30      	ldr	r2, [pc, #192]	@ (800dc3c <TIM_CCxChannelCmd+0xf0>)
 800db7c:	4293      	cmp	r3, r2
 800db7e:	d020      	beq.n	800dbc2 <TIM_CCxChannelCmd+0x76>
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	4a2f      	ldr	r2, [pc, #188]	@ (800dc40 <TIM_CCxChannelCmd+0xf4>)
 800db84:	4293      	cmp	r3, r2
 800db86:	d01c      	beq.n	800dbc2 <TIM_CCxChannelCmd+0x76>
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	4a2e      	ldr	r2, [pc, #184]	@ (800dc44 <TIM_CCxChannelCmd+0xf8>)
 800db8c:	4293      	cmp	r3, r2
 800db8e:	d018      	beq.n	800dbc2 <TIM_CCxChannelCmd+0x76>
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	4a2d      	ldr	r2, [pc, #180]	@ (800dc48 <TIM_CCxChannelCmd+0xfc>)
 800db94:	4293      	cmp	r3, r2
 800db96:	d014      	beq.n	800dbc2 <TIM_CCxChannelCmd+0x76>
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	4a2c      	ldr	r2, [pc, #176]	@ (800dc4c <TIM_CCxChannelCmd+0x100>)
 800db9c:	4293      	cmp	r3, r2
 800db9e:	d010      	beq.n	800dbc2 <TIM_CCxChannelCmd+0x76>
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	4a2b      	ldr	r2, [pc, #172]	@ (800dc50 <TIM_CCxChannelCmd+0x104>)
 800dba4:	4293      	cmp	r3, r2
 800dba6:	d00c      	beq.n	800dbc2 <TIM_CCxChannelCmd+0x76>
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	4a2a      	ldr	r2, [pc, #168]	@ (800dc54 <TIM_CCxChannelCmd+0x108>)
 800dbac:	4293      	cmp	r3, r2
 800dbae:	d008      	beq.n	800dbc2 <TIM_CCxChannelCmd+0x76>
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	4a29      	ldr	r2, [pc, #164]	@ (800dc58 <TIM_CCxChannelCmd+0x10c>)
 800dbb4:	4293      	cmp	r3, r2
 800dbb6:	d004      	beq.n	800dbc2 <TIM_CCxChannelCmd+0x76>
 800dbb8:	f641 61a7 	movw	r1, #7847	@ 0x1ea7
 800dbbc:	4827      	ldr	r0, [pc, #156]	@ (800dc5c <TIM_CCxChannelCmd+0x110>)
 800dbbe:	f7f8 fef5 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d016      	beq.n	800dbf6 <TIM_CCxChannelCmd+0xaa>
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	2b04      	cmp	r3, #4
 800dbcc:	d013      	beq.n	800dbf6 <TIM_CCxChannelCmd+0xaa>
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	2b08      	cmp	r3, #8
 800dbd2:	d010      	beq.n	800dbf6 <TIM_CCxChannelCmd+0xaa>
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	2b0c      	cmp	r3, #12
 800dbd8:	d00d      	beq.n	800dbf6 <TIM_CCxChannelCmd+0xaa>
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	2b10      	cmp	r3, #16
 800dbde:	d00a      	beq.n	800dbf6 <TIM_CCxChannelCmd+0xaa>
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	2b14      	cmp	r3, #20
 800dbe4:	d007      	beq.n	800dbf6 <TIM_CCxChannelCmd+0xaa>
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	2b3c      	cmp	r3, #60	@ 0x3c
 800dbea:	d004      	beq.n	800dbf6 <TIM_CCxChannelCmd+0xaa>
 800dbec:	f641 61a8 	movw	r1, #7848	@ 0x1ea8
 800dbf0:	481a      	ldr	r0, [pc, #104]	@ (800dc5c <TIM_CCxChannelCmd+0x110>)
 800dbf2:	f7f8 fedb 	bl	80069ac <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	f003 031f 	and.w	r3, r3, #31
 800dbfc:	2201      	movs	r2, #1
 800dbfe:	fa02 f303 	lsl.w	r3, r2, r3
 800dc02:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	6a1a      	ldr	r2, [r3, #32]
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	43db      	mvns	r3, r3
 800dc0c:	401a      	ands	r2, r3
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	6a1a      	ldr	r2, [r3, #32]
 800dc16:	68bb      	ldr	r3, [r7, #8]
 800dc18:	f003 031f 	and.w	r3, r3, #31
 800dc1c:	6879      	ldr	r1, [r7, #4]
 800dc1e:	fa01 f303 	lsl.w	r3, r1, r3
 800dc22:	431a      	orrs	r2, r3
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	621a      	str	r2, [r3, #32]
}
 800dc28:	bf00      	nop
 800dc2a:	3718      	adds	r7, #24
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}
 800dc30:	40010000 	.word	0x40010000
 800dc34:	40000400 	.word	0x40000400
 800dc38:	40000800 	.word	0x40000800
 800dc3c:	40000c00 	.word	0x40000c00
 800dc40:	40010400 	.word	0x40010400
 800dc44:	40014000 	.word	0x40014000
 800dc48:	40014400 	.word	0x40014400
 800dc4c:	40014800 	.word	0x40014800
 800dc50:	40001800 	.word	0x40001800
 800dc54:	40001c00 	.word	0x40001c00
 800dc58:	40002000 	.word	0x40002000
 800dc5c:	0801985c 	.word	0x0801985c

0800dc60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b084      	sub	sp, #16
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
 800dc68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	4a32      	ldr	r2, [pc, #200]	@ (800dd38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800dc70:	4293      	cmp	r3, r2
 800dc72:	d027      	beq.n	800dcc4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc7c:	d022      	beq.n	800dcc4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	4a2e      	ldr	r2, [pc, #184]	@ (800dd3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800dc84:	4293      	cmp	r3, r2
 800dc86:	d01d      	beq.n	800dcc4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	4a2c      	ldr	r2, [pc, #176]	@ (800dd40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800dc8e:	4293      	cmp	r3, r2
 800dc90:	d018      	beq.n	800dcc4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	4a2b      	ldr	r2, [pc, #172]	@ (800dd44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800dc98:	4293      	cmp	r3, r2
 800dc9a:	d013      	beq.n	800dcc4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	4a29      	ldr	r2, [pc, #164]	@ (800dd48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d00e      	beq.n	800dcc4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	4a28      	ldr	r2, [pc, #160]	@ (800dd4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800dcac:	4293      	cmp	r3, r2
 800dcae:	d009      	beq.n	800dcc4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	4a26      	ldr	r2, [pc, #152]	@ (800dd50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d004      	beq.n	800dcc4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800dcba:	f240 71ab 	movw	r1, #1963	@ 0x7ab
 800dcbe:	4825      	ldr	r0, [pc, #148]	@ (800dd54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800dcc0:	f7f8 fe74 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d020      	beq.n	800dd0e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	2b10      	cmp	r3, #16
 800dcd2:	d01c      	beq.n	800dd0e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800dcd4:	683b      	ldr	r3, [r7, #0]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	2b20      	cmp	r3, #32
 800dcda:	d018      	beq.n	800dd0e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	2b30      	cmp	r3, #48	@ 0x30
 800dce2:	d014      	beq.n	800dd0e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	2b40      	cmp	r3, #64	@ 0x40
 800dcea:	d010      	beq.n	800dd0e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	2b50      	cmp	r3, #80	@ 0x50
 800dcf2:	d00c      	beq.n	800dd0e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	2b60      	cmp	r3, #96	@ 0x60
 800dcfa:	d008      	beq.n	800dd0e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	2b70      	cmp	r3, #112	@ 0x70
 800dd02:	d004      	beq.n	800dd0e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800dd04:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 800dd08:	4812      	ldr	r0, [pc, #72]	@ (800dd54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800dd0a:	f7f8 fe4f 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	689b      	ldr	r3, [r3, #8]
 800dd12:	2b80      	cmp	r3, #128	@ 0x80
 800dd14:	d008      	beq.n	800dd28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	689b      	ldr	r3, [r3, #8]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d004      	beq.n	800dd28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd1e:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 800dd22:	480c      	ldr	r0, [pc, #48]	@ (800dd54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800dd24:	f7f8 fe42 	bl	80069ac <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dd2e:	2b01      	cmp	r3, #1
 800dd30:	d112      	bne.n	800dd58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800dd32:	2302      	movs	r3, #2
 800dd34:	e0d7      	b.n	800dee6 <HAL_TIMEx_MasterConfigSynchronization+0x286>
 800dd36:	bf00      	nop
 800dd38:	40010000 	.word	0x40010000
 800dd3c:	40000400 	.word	0x40000400
 800dd40:	40000800 	.word	0x40000800
 800dd44:	40000c00 	.word	0x40000c00
 800dd48:	40001000 	.word	0x40001000
 800dd4c:	40001400 	.word	0x40001400
 800dd50:	40010400 	.word	0x40010400
 800dd54:	08019894 	.word	0x08019894
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2201      	movs	r2, #1
 800dd5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2202      	movs	r2, #2
 800dd64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	685b      	ldr	r3, [r3, #4]
 800dd6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	689b      	ldr	r3, [r3, #8]
 800dd76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	4a5c      	ldr	r2, [pc, #368]	@ (800def0 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d004      	beq.n	800dd8c <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	4a5b      	ldr	r2, [pc, #364]	@ (800def4 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800dd88:	4293      	cmp	r3, r2
 800dd8a:	d161      	bne.n	800de50 <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	685b      	ldr	r3, [r3, #4]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d054      	beq.n	800de3e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	685b      	ldr	r3, [r3, #4]
 800dd98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dd9c:	d04f      	beq.n	800de3e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	685b      	ldr	r3, [r3, #4]
 800dda2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dda6:	d04a      	beq.n	800de3e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	685b      	ldr	r3, [r3, #4]
 800ddac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ddb0:	d045      	beq.n	800de3e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	685b      	ldr	r3, [r3, #4]
 800ddb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ddba:	d040      	beq.n	800de3e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	685b      	ldr	r3, [r3, #4]
 800ddc0:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800ddc4:	d03b      	beq.n	800de3e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	685b      	ldr	r3, [r3, #4]
 800ddca:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ddce:	d036      	beq.n	800de3e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	685b      	ldr	r3, [r3, #4]
 800ddd4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ddd8:	d031      	beq.n	800de3e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	685b      	ldr	r3, [r3, #4]
 800ddde:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 800dde2:	d02c      	beq.n	800de3e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	685b      	ldr	r3, [r3, #4]
 800dde8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ddec:	d027      	beq.n	800de3e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	685b      	ldr	r3, [r3, #4]
 800ddf2:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 800ddf6:	d022      	beq.n	800de3e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	685b      	ldr	r3, [r3, #4]
 800ddfc:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800de00:	d01d      	beq.n	800de3e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	685b      	ldr	r3, [r3, #4]
 800de06:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 800de0a:	d018      	beq.n	800de3e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	685b      	ldr	r3, [r3, #4]
 800de10:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800de14:	d013      	beq.n	800de3e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	685b      	ldr	r3, [r3, #4]
 800de1a:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 800de1e:	d00e      	beq.n	800de3e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	685b      	ldr	r3, [r3, #4]
 800de24:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 800de28:	d009      	beq.n	800de3e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	685b      	ldr	r3, [r3, #4]
 800de2e:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 800de32:	d004      	beq.n	800de3e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800de34:	f240 71bf 	movw	r1, #1983	@ 0x7bf
 800de38:	482f      	ldr	r0, [pc, #188]	@ (800def8 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800de3a:	f7f8 fdb7 	bl	80069ac <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800de44:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	685b      	ldr	r3, [r3, #4]
 800de4a:	68fa      	ldr	r2, [r7, #12]
 800de4c:	4313      	orrs	r3, r2
 800de4e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800de56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	68fa      	ldr	r2, [r7, #12]
 800de5e:	4313      	orrs	r3, r2
 800de60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	68fa      	ldr	r2, [r7, #12]
 800de68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	4a20      	ldr	r2, [pc, #128]	@ (800def0 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800de70:	4293      	cmp	r3, r2
 800de72:	d022      	beq.n	800deba <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de7c:	d01d      	beq.n	800deba <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	4a1e      	ldr	r2, [pc, #120]	@ (800defc <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 800de84:	4293      	cmp	r3, r2
 800de86:	d018      	beq.n	800deba <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	4a1c      	ldr	r2, [pc, #112]	@ (800df00 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 800de8e:	4293      	cmp	r3, r2
 800de90:	d013      	beq.n	800deba <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	4a1b      	ldr	r2, [pc, #108]	@ (800df04 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 800de98:	4293      	cmp	r3, r2
 800de9a:	d00e      	beq.n	800deba <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	4a14      	ldr	r2, [pc, #80]	@ (800def4 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800dea2:	4293      	cmp	r3, r2
 800dea4:	d009      	beq.n	800deba <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	4a17      	ldr	r2, [pc, #92]	@ (800df08 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 800deac:	4293      	cmp	r3, r2
 800deae:	d004      	beq.n	800deba <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	4a15      	ldr	r2, [pc, #84]	@ (800df0c <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 800deb6:	4293      	cmp	r3, r2
 800deb8:	d10c      	bne.n	800ded4 <HAL_TIMEx_MasterConfigSynchronization+0x274>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dec0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	689b      	ldr	r3, [r3, #8]
 800dec6:	68ba      	ldr	r2, [r7, #8]
 800dec8:	4313      	orrs	r3, r2
 800deca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	68ba      	ldr	r2, [r7, #8]
 800ded2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2201      	movs	r2, #1
 800ded8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2200      	movs	r2, #0
 800dee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800dee4:	2300      	movs	r3, #0
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3710      	adds	r7, #16
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}
 800deee:	bf00      	nop
 800def0:	40010000 	.word	0x40010000
 800def4:	40010400 	.word	0x40010400
 800def8:	08019894 	.word	0x08019894
 800defc:	40000400 	.word	0x40000400
 800df00:	40000800 	.word	0x40000800
 800df04:	40000c00 	.word	0x40000c00
 800df08:	40014000 	.word	0x40014000
 800df0c:	40001800 	.word	0x40001800

0800df10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b084      	sub	sp, #16
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
 800df18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800df1a:	2300      	movs	r3, #0
 800df1c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	4a89      	ldr	r2, [pc, #548]	@ (800e148 <HAL_TIMEx_ConfigBreakDeadTime+0x238>)
 800df24:	4293      	cmp	r3, r2
 800df26:	d009      	beq.n	800df3c <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	4a87      	ldr	r2, [pc, #540]	@ (800e14c <HAL_TIMEx_ConfigBreakDeadTime+0x23c>)
 800df2e:	4293      	cmp	r3, r2
 800df30:	d004      	beq.n	800df3c <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800df32:	f240 71f4 	movw	r1, #2036	@ 0x7f4
 800df36:	4886      	ldr	r0, [pc, #536]	@ (800e150 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800df38:	f7f8 fd38 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800df44:	d008      	beq.n	800df58 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d004      	beq.n	800df58 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800df4e:	f240 71f5 	movw	r1, #2037	@ 0x7f5
 800df52:	487f      	ldr	r0, [pc, #508]	@ (800e150 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800df54:	f7f8 fd2a 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	685b      	ldr	r3, [r3, #4]
 800df5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800df60:	d008      	beq.n	800df74 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d004      	beq.n	800df74 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800df6a:	f240 71f6 	movw	r1, #2038	@ 0x7f6
 800df6e:	4878      	ldr	r0, [pc, #480]	@ (800e150 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800df70:	f7f8 fd1c 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	689b      	ldr	r3, [r3, #8]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d013      	beq.n	800dfa4 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	689b      	ldr	r3, [r3, #8]
 800df80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800df84:	d00e      	beq.n	800dfa4 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	689b      	ldr	r3, [r3, #8]
 800df8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800df8e:	d009      	beq.n	800dfa4 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	689b      	ldr	r3, [r3, #8]
 800df94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800df98:	d004      	beq.n	800dfa4 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800df9a:	f240 71f7 	movw	r1, #2039	@ 0x7f7
 800df9e:	486c      	ldr	r0, [pc, #432]	@ (800e150 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800dfa0:	f7f8 fd04 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	68db      	ldr	r3, [r3, #12]
 800dfa8:	2bff      	cmp	r3, #255	@ 0xff
 800dfaa:	d904      	bls.n	800dfb6 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 800dfac:	f44f 61ff 	mov.w	r1, #2040	@ 0x7f8
 800dfb0:	4867      	ldr	r0, [pc, #412]	@ (800e150 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800dfb2:	f7f8 fcfb 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	691b      	ldr	r3, [r3, #16]
 800dfba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dfbe:	d008      	beq.n	800dfd2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	691b      	ldr	r3, [r3, #16]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d004      	beq.n	800dfd2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800dfc8:	f240 71f9 	movw	r1, #2041	@ 0x7f9
 800dfcc:	4860      	ldr	r0, [pc, #384]	@ (800e150 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800dfce:	f7f8 fced 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	695b      	ldr	r3, [r3, #20]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d009      	beq.n	800dfee <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	695b      	ldr	r3, [r3, #20]
 800dfde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dfe2:	d004      	beq.n	800dfee <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800dfe4:	f240 71fa 	movw	r1, #2042	@ 0x7fa
 800dfe8:	4859      	ldr	r0, [pc, #356]	@ (800e150 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800dfea:	f7f8 fcdf 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	699b      	ldr	r3, [r3, #24]
 800dff2:	2b0f      	cmp	r3, #15
 800dff4:	d904      	bls.n	800e000 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 800dff6:	f240 71fb 	movw	r1, #2043	@ 0x7fb
 800dffa:	4855      	ldr	r0, [pc, #340]	@ (800e150 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800dffc:	f7f8 fcd6 	bl	80069ac <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e004:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e008:	d008      	beq.n	800e01c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d004      	beq.n	800e01c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800e012:	f240 71fc 	movw	r1, #2044	@ 0x7fc
 800e016:	484e      	ldr	r0, [pc, #312]	@ (800e150 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800e018:	f7f8 fcc8 	bl	80069ac <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e022:	2b01      	cmp	r3, #1
 800e024:	d101      	bne.n	800e02a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
 800e026:	2302      	movs	r3, #2
 800e028:	e08a      	b.n	800e140 <HAL_TIMEx_ConfigBreakDeadTime+0x230>
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2201      	movs	r2, #1
 800e02e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	68db      	ldr	r3, [r3, #12]
 800e03c:	4313      	orrs	r3, r2
 800e03e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	689b      	ldr	r3, [r3, #8]
 800e04a:	4313      	orrs	r3, r2
 800e04c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	685b      	ldr	r3, [r3, #4]
 800e058:	4313      	orrs	r3, r2
 800e05a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	4313      	orrs	r3, r2
 800e068:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	691b      	ldr	r3, [r3, #16]
 800e074:	4313      	orrs	r3, r2
 800e076:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800e07e:	683b      	ldr	r3, [r7, #0]
 800e080:	695b      	ldr	r3, [r3, #20]
 800e082:	4313      	orrs	r3, r2
 800e084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e090:	4313      	orrs	r3, r2
 800e092:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	699b      	ldr	r3, [r3, #24]
 800e09e:	041b      	lsls	r3, r3, #16
 800e0a0:	4313      	orrs	r3, r2
 800e0a2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	4a27      	ldr	r2, [pc, #156]	@ (800e148 <HAL_TIMEx_ConfigBreakDeadTime+0x238>)
 800e0aa:	4293      	cmp	r3, r2
 800e0ac:	d004      	beq.n	800e0b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1a8>
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	4a26      	ldr	r2, [pc, #152]	@ (800e14c <HAL_TIMEx_ConfigBreakDeadTime+0x23c>)
 800e0b4:	4293      	cmp	r3, r2
 800e0b6:	d13a      	bne.n	800e12e <HAL_TIMEx_ConfigBreakDeadTime+0x21e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	69db      	ldr	r3, [r3, #28]
 800e0bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e0c0:	d008      	beq.n	800e0d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c4>
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	69db      	ldr	r3, [r3, #28]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d004      	beq.n	800e0d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c4>
 800e0ca:	f640 0111 	movw	r1, #2065	@ 0x811
 800e0ce:	4820      	ldr	r0, [pc, #128]	@ (800e150 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800e0d0:	f7f8 fc6c 	bl	80069ac <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	6a1b      	ldr	r3, [r3, #32]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d009      	beq.n	800e0f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1e0>
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	6a1b      	ldr	r3, [r3, #32]
 800e0e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e0e4:	d004      	beq.n	800e0f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1e0>
 800e0e6:	f640 0112 	movw	r1, #2066	@ 0x812
 800e0ea:	4819      	ldr	r0, [pc, #100]	@ (800e150 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800e0ec:	f7f8 fc5e 	bl	80069ac <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0f4:	2b0f      	cmp	r3, #15
 800e0f6:	d904      	bls.n	800e102 <HAL_TIMEx_ConfigBreakDeadTime+0x1f2>
 800e0f8:	f640 0113 	movw	r1, #2067	@ 0x813
 800e0fc:	4814      	ldr	r0, [pc, #80]	@ (800e150 <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 800e0fe:	f7f8 fc55 	bl	80069ac <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e10c:	051b      	lsls	r3, r3, #20
 800e10e:	4313      	orrs	r3, r2
 800e110:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	69db      	ldr	r3, [r3, #28]
 800e11c:	4313      	orrs	r3, r2
 800e11e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	6a1b      	ldr	r3, [r3, #32]
 800e12a:	4313      	orrs	r3, r2
 800e12c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	68fa      	ldr	r2, [r7, #12]
 800e134:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2200      	movs	r2, #0
 800e13a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e13e:	2300      	movs	r3, #0
}
 800e140:	4618      	mov	r0, r3
 800e142:	3710      	adds	r7, #16
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}
 800e148:	40010000 	.word	0x40010000
 800e14c:	40010400 	.word	0x40010400
 800e150:	08019894 	.word	0x08019894

0800e154 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e154:	b480      	push	{r7}
 800e156:	b083      	sub	sp, #12
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e15c:	bf00      	nop
 800e15e:	370c      	adds	r7, #12
 800e160:	46bd      	mov	sp, r7
 800e162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e166:	4770      	bx	lr

0800e168 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e168:	b480      	push	{r7}
 800e16a:	b083      	sub	sp, #12
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e170:	bf00      	nop
 800e172:	370c      	adds	r7, #12
 800e174:	46bd      	mov	sp, r7
 800e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17a:	4770      	bx	lr

0800e17c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e17c:	b480      	push	{r7}
 800e17e:	b083      	sub	sp, #12
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e184:	bf00      	nop
 800e186:	370c      	adds	r7, #12
 800e188:	46bd      	mov	sp, r7
 800e18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18e:	4770      	bx	lr

0800e190 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b082      	sub	sp, #8
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d101      	bne.n	800e1a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e19e:	2301      	movs	r3, #1
 800e1a0:	e09f      	b.n	800e2e2 <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	699b      	ldr	r3, [r3, #24]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d02d      	beq.n	800e206 <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	4a4f      	ldr	r2, [pc, #316]	@ (800e2ec <HAL_UART_Init+0x15c>)
 800e1b0:	4293      	cmp	r3, r2
 800e1b2:	d055      	beq.n	800e260 <HAL_UART_Init+0xd0>
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	4a4d      	ldr	r2, [pc, #308]	@ (800e2f0 <HAL_UART_Init+0x160>)
 800e1ba:	4293      	cmp	r3, r2
 800e1bc:	d050      	beq.n	800e260 <HAL_UART_Init+0xd0>
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	4a4c      	ldr	r2, [pc, #304]	@ (800e2f4 <HAL_UART_Init+0x164>)
 800e1c4:	4293      	cmp	r3, r2
 800e1c6:	d04b      	beq.n	800e260 <HAL_UART_Init+0xd0>
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	4a4a      	ldr	r2, [pc, #296]	@ (800e2f8 <HAL_UART_Init+0x168>)
 800e1ce:	4293      	cmp	r3, r2
 800e1d0:	d046      	beq.n	800e260 <HAL_UART_Init+0xd0>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	4a49      	ldr	r2, [pc, #292]	@ (800e2fc <HAL_UART_Init+0x16c>)
 800e1d8:	4293      	cmp	r3, r2
 800e1da:	d041      	beq.n	800e260 <HAL_UART_Init+0xd0>
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	4a47      	ldr	r2, [pc, #284]	@ (800e300 <HAL_UART_Init+0x170>)
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	d03c      	beq.n	800e260 <HAL_UART_Init+0xd0>
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	4a46      	ldr	r2, [pc, #280]	@ (800e304 <HAL_UART_Init+0x174>)
 800e1ec:	4293      	cmp	r3, r2
 800e1ee:	d037      	beq.n	800e260 <HAL_UART_Init+0xd0>
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	4a44      	ldr	r2, [pc, #272]	@ (800e308 <HAL_UART_Init+0x178>)
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	d032      	beq.n	800e260 <HAL_UART_Init+0xd0>
 800e1fa:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800e1fe:	4843      	ldr	r0, [pc, #268]	@ (800e30c <HAL_UART_Init+0x17c>)
 800e200:	f7f8 fbd4 	bl	80069ac <assert_failed>
 800e204:	e02c      	b.n	800e260 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	4a38      	ldr	r2, [pc, #224]	@ (800e2ec <HAL_UART_Init+0x15c>)
 800e20c:	4293      	cmp	r3, r2
 800e20e:	d027      	beq.n	800e260 <HAL_UART_Init+0xd0>
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	4a36      	ldr	r2, [pc, #216]	@ (800e2f0 <HAL_UART_Init+0x160>)
 800e216:	4293      	cmp	r3, r2
 800e218:	d022      	beq.n	800e260 <HAL_UART_Init+0xd0>
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	4a35      	ldr	r2, [pc, #212]	@ (800e2f4 <HAL_UART_Init+0x164>)
 800e220:	4293      	cmp	r3, r2
 800e222:	d01d      	beq.n	800e260 <HAL_UART_Init+0xd0>
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	4a33      	ldr	r2, [pc, #204]	@ (800e2f8 <HAL_UART_Init+0x168>)
 800e22a:	4293      	cmp	r3, r2
 800e22c:	d018      	beq.n	800e260 <HAL_UART_Init+0xd0>
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	4a32      	ldr	r2, [pc, #200]	@ (800e2fc <HAL_UART_Init+0x16c>)
 800e234:	4293      	cmp	r3, r2
 800e236:	d013      	beq.n	800e260 <HAL_UART_Init+0xd0>
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	4a30      	ldr	r2, [pc, #192]	@ (800e300 <HAL_UART_Init+0x170>)
 800e23e:	4293      	cmp	r3, r2
 800e240:	d00e      	beq.n	800e260 <HAL_UART_Init+0xd0>
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	4a2f      	ldr	r2, [pc, #188]	@ (800e304 <HAL_UART_Init+0x174>)
 800e248:	4293      	cmp	r3, r2
 800e24a:	d009      	beq.n	800e260 <HAL_UART_Init+0xd0>
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	4a2d      	ldr	r2, [pc, #180]	@ (800e308 <HAL_UART_Init+0x178>)
 800e252:	4293      	cmp	r3, r2
 800e254:	d004      	beq.n	800e260 <HAL_UART_Init+0xd0>
 800e256:	f240 1131 	movw	r1, #305	@ 0x131
 800e25a:	482c      	ldr	r0, [pc, #176]	@ (800e30c <HAL_UART_Init+0x17c>)
 800e25c:	f7f8 fba6 	bl	80069ac <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e264:	2b00      	cmp	r3, #0
 800e266:	d106      	bne.n	800e276 <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2200      	movs	r2, #0
 800e26c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e270:	6878      	ldr	r0, [r7, #4]
 800e272:	f7f8 ffad 	bl	80071d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2224      	movs	r2, #36	@ 0x24
 800e27a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	681a      	ldr	r2, [r3, #0]
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	f022 0201 	bic.w	r2, r2, #1
 800e28a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e290:	2b00      	cmp	r3, #0
 800e292:	d002      	beq.n	800e29a <HAL_UART_Init+0x10a>
  {
    UART_AdvFeatureConfig(huart);
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f000 fb31 	bl	800e8fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f000 f838 	bl	800e310 <UART_SetConfig>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	2b01      	cmp	r3, #1
 800e2a4:	d101      	bne.n	800e2aa <HAL_UART_Init+0x11a>
  {
    return HAL_ERROR;
 800e2a6:	2301      	movs	r3, #1
 800e2a8:	e01b      	b.n	800e2e2 <HAL_UART_Init+0x152>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	685a      	ldr	r2, [r3, #4]
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e2b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	689a      	ldr	r2, [r3, #8]
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e2c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	681a      	ldr	r2, [r3, #0]
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	f042 0201 	orr.w	r2, r2, #1
 800e2d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f000 fc66 	bl	800ebac <UART_CheckIdleState>
 800e2e0:	4603      	mov	r3, r0
}
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	3708      	adds	r7, #8
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}
 800e2ea:	bf00      	nop
 800e2ec:	40011000 	.word	0x40011000
 800e2f0:	40004400 	.word	0x40004400
 800e2f4:	40004800 	.word	0x40004800
 800e2f8:	40004c00 	.word	0x40004c00
 800e2fc:	40005000 	.word	0x40005000
 800e300:	40011400 	.word	0x40011400
 800e304:	40007800 	.word	0x40007800
 800e308:	40007c00 	.word	0x40007c00
 800e30c:	080198d0 	.word	0x080198d0

0800e310 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b088      	sub	sp, #32
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e318:	2300      	movs	r3, #0
 800e31a:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	685b      	ldr	r3, [r3, #4]
 800e320:	4aa0      	ldr	r2, [pc, #640]	@ (800e5a4 <UART_SetConfig+0x294>)
 800e322:	4293      	cmp	r3, r2
 800e324:	d904      	bls.n	800e330 <UART_SetConfig+0x20>
 800e326:	f640 315f 	movw	r1, #2911	@ 0xb5f
 800e32a:	489f      	ldr	r0, [pc, #636]	@ (800e5a8 <UART_SetConfig+0x298>)
 800e32c:	f7f8 fb3e 	bl	80069ac <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	689b      	ldr	r3, [r3, #8]
 800e334:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e338:	d00d      	beq.n	800e356 <UART_SetConfig+0x46>
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	689b      	ldr	r3, [r3, #8]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d009      	beq.n	800e356 <UART_SetConfig+0x46>
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	689b      	ldr	r3, [r3, #8]
 800e346:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e34a:	d004      	beq.n	800e356 <UART_SetConfig+0x46>
 800e34c:	f44f 6136 	mov.w	r1, #2912	@ 0xb60
 800e350:	4895      	ldr	r0, [pc, #596]	@ (800e5a8 <UART_SetConfig+0x298>)
 800e352:	f7f8 fb2b 	bl	80069ac <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	68db      	ldr	r3, [r3, #12]
 800e35a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e35e:	d012      	beq.n	800e386 <UART_SetConfig+0x76>
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	68db      	ldr	r3, [r3, #12]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d00e      	beq.n	800e386 <UART_SetConfig+0x76>
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	68db      	ldr	r3, [r3, #12]
 800e36c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e370:	d009      	beq.n	800e386 <UART_SetConfig+0x76>
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	68db      	ldr	r3, [r3, #12]
 800e376:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e37a:	d004      	beq.n	800e386 <UART_SetConfig+0x76>
 800e37c:	f640 3161 	movw	r1, #2913	@ 0xb61
 800e380:	4889      	ldr	r0, [pc, #548]	@ (800e5a8 <UART_SetConfig+0x298>)
 800e382:	f7f8 fb13 	bl	80069ac <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6a1b      	ldr	r3, [r3, #32]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d009      	beq.n	800e3a2 <UART_SetConfig+0x92>
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6a1b      	ldr	r3, [r3, #32]
 800e392:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e396:	d004      	beq.n	800e3a2 <UART_SetConfig+0x92>
 800e398:	f640 3162 	movw	r1, #2914	@ 0xb62
 800e39c:	4882      	ldr	r0, [pc, #520]	@ (800e5a8 <UART_SetConfig+0x298>)
 800e39e:	f7f8 fb05 	bl	80069ac <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	691b      	ldr	r3, [r3, #16]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d00e      	beq.n	800e3c8 <UART_SetConfig+0xb8>
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	691b      	ldr	r3, [r3, #16]
 800e3ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e3b2:	d009      	beq.n	800e3c8 <UART_SetConfig+0xb8>
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	691b      	ldr	r3, [r3, #16]
 800e3b8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800e3bc:	d004      	beq.n	800e3c8 <UART_SetConfig+0xb8>
 800e3be:	f640 3164 	movw	r1, #2916	@ 0xb64
 800e3c2:	4879      	ldr	r0, [pc, #484]	@ (800e5a8 <UART_SetConfig+0x298>)
 800e3c4:	f7f8 faf2 	bl	80069ac <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	695b      	ldr	r3, [r3, #20]
 800e3cc:	f023 030c 	bic.w	r3, r3, #12
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d103      	bne.n	800e3dc <UART_SetConfig+0xcc>
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	695b      	ldr	r3, [r3, #20]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d104      	bne.n	800e3e6 <UART_SetConfig+0xd6>
 800e3dc:	f640 3165 	movw	r1, #2917	@ 0xb65
 800e3e0:	4871      	ldr	r0, [pc, #452]	@ (800e5a8 <UART_SetConfig+0x298>)
 800e3e2:	f7f8 fae3 	bl	80069ac <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	699b      	ldr	r3, [r3, #24]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d013      	beq.n	800e416 <UART_SetConfig+0x106>
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	699b      	ldr	r3, [r3, #24]
 800e3f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e3f6:	d00e      	beq.n	800e416 <UART_SetConfig+0x106>
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	699b      	ldr	r3, [r3, #24]
 800e3fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e400:	d009      	beq.n	800e416 <UART_SetConfig+0x106>
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	699b      	ldr	r3, [r3, #24]
 800e406:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e40a:	d004      	beq.n	800e416 <UART_SetConfig+0x106>
 800e40c:	f640 3166 	movw	r1, #2918	@ 0xb66
 800e410:	4865      	ldr	r0, [pc, #404]	@ (800e5a8 <UART_SetConfig+0x298>)
 800e412:	f7f8 facb 	bl	80069ac <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	69db      	ldr	r3, [r3, #28]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d009      	beq.n	800e432 <UART_SetConfig+0x122>
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	69db      	ldr	r3, [r3, #28]
 800e422:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e426:	d004      	beq.n	800e432 <UART_SetConfig+0x122>
 800e428:	f640 3167 	movw	r1, #2919	@ 0xb67
 800e42c:	485e      	ldr	r0, [pc, #376]	@ (800e5a8 <UART_SetConfig+0x298>)
 800e42e:	f7f8 fabd 	bl	80069ac <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	689a      	ldr	r2, [r3, #8]
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	691b      	ldr	r3, [r3, #16]
 800e43a:	431a      	orrs	r2, r3
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	695b      	ldr	r3, [r3, #20]
 800e440:	431a      	orrs	r2, r3
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	69db      	ldr	r3, [r3, #28]
 800e446:	4313      	orrs	r3, r2
 800e448:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	681a      	ldr	r2, [r3, #0]
 800e450:	4b56      	ldr	r3, [pc, #344]	@ (800e5ac <UART_SetConfig+0x29c>)
 800e452:	4013      	ands	r3, r2
 800e454:	687a      	ldr	r2, [r7, #4]
 800e456:	6812      	ldr	r2, [r2, #0]
 800e458:	6979      	ldr	r1, [r7, #20]
 800e45a:	430b      	orrs	r3, r1
 800e45c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	685b      	ldr	r3, [r3, #4]
 800e464:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	68da      	ldr	r2, [r3, #12]
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	430a      	orrs	r2, r1
 800e472:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	699b      	ldr	r3, [r3, #24]
 800e478:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6a1b      	ldr	r3, [r3, #32]
 800e47e:	697a      	ldr	r2, [r7, #20]
 800e480:	4313      	orrs	r3, r2
 800e482:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	689b      	ldr	r3, [r3, #8]
 800e48a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	697a      	ldr	r2, [r7, #20]
 800e494:	430a      	orrs	r2, r1
 800e496:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	4a44      	ldr	r2, [pc, #272]	@ (800e5b0 <UART_SetConfig+0x2a0>)
 800e49e:	4293      	cmp	r3, r2
 800e4a0:	d121      	bne.n	800e4e6 <UART_SetConfig+0x1d6>
 800e4a2:	4b44      	ldr	r3, [pc, #272]	@ (800e5b4 <UART_SetConfig+0x2a4>)
 800e4a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e4a8:	f003 0303 	and.w	r3, r3, #3
 800e4ac:	2b03      	cmp	r3, #3
 800e4ae:	d817      	bhi.n	800e4e0 <UART_SetConfig+0x1d0>
 800e4b0:	a201      	add	r2, pc, #4	@ (adr r2, 800e4b8 <UART_SetConfig+0x1a8>)
 800e4b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4b6:	bf00      	nop
 800e4b8:	0800e4c9 	.word	0x0800e4c9
 800e4bc:	0800e4d5 	.word	0x0800e4d5
 800e4c0:	0800e4cf 	.word	0x0800e4cf
 800e4c4:	0800e4db 	.word	0x0800e4db
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	77fb      	strb	r3, [r7, #31]
 800e4cc:	e14c      	b.n	800e768 <UART_SetConfig+0x458>
 800e4ce:	2302      	movs	r3, #2
 800e4d0:	77fb      	strb	r3, [r7, #31]
 800e4d2:	e149      	b.n	800e768 <UART_SetConfig+0x458>
 800e4d4:	2304      	movs	r3, #4
 800e4d6:	77fb      	strb	r3, [r7, #31]
 800e4d8:	e146      	b.n	800e768 <UART_SetConfig+0x458>
 800e4da:	2308      	movs	r3, #8
 800e4dc:	77fb      	strb	r3, [r7, #31]
 800e4de:	e143      	b.n	800e768 <UART_SetConfig+0x458>
 800e4e0:	2310      	movs	r3, #16
 800e4e2:	77fb      	strb	r3, [r7, #31]
 800e4e4:	e140      	b.n	800e768 <UART_SetConfig+0x458>
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	4a33      	ldr	r2, [pc, #204]	@ (800e5b8 <UART_SetConfig+0x2a8>)
 800e4ec:	4293      	cmp	r3, r2
 800e4ee:	d132      	bne.n	800e556 <UART_SetConfig+0x246>
 800e4f0:	4b30      	ldr	r3, [pc, #192]	@ (800e5b4 <UART_SetConfig+0x2a4>)
 800e4f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e4f6:	f003 030c 	and.w	r3, r3, #12
 800e4fa:	2b0c      	cmp	r3, #12
 800e4fc:	d828      	bhi.n	800e550 <UART_SetConfig+0x240>
 800e4fe:	a201      	add	r2, pc, #4	@ (adr r2, 800e504 <UART_SetConfig+0x1f4>)
 800e500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e504:	0800e539 	.word	0x0800e539
 800e508:	0800e551 	.word	0x0800e551
 800e50c:	0800e551 	.word	0x0800e551
 800e510:	0800e551 	.word	0x0800e551
 800e514:	0800e545 	.word	0x0800e545
 800e518:	0800e551 	.word	0x0800e551
 800e51c:	0800e551 	.word	0x0800e551
 800e520:	0800e551 	.word	0x0800e551
 800e524:	0800e53f 	.word	0x0800e53f
 800e528:	0800e551 	.word	0x0800e551
 800e52c:	0800e551 	.word	0x0800e551
 800e530:	0800e551 	.word	0x0800e551
 800e534:	0800e54b 	.word	0x0800e54b
 800e538:	2300      	movs	r3, #0
 800e53a:	77fb      	strb	r3, [r7, #31]
 800e53c:	e114      	b.n	800e768 <UART_SetConfig+0x458>
 800e53e:	2302      	movs	r3, #2
 800e540:	77fb      	strb	r3, [r7, #31]
 800e542:	e111      	b.n	800e768 <UART_SetConfig+0x458>
 800e544:	2304      	movs	r3, #4
 800e546:	77fb      	strb	r3, [r7, #31]
 800e548:	e10e      	b.n	800e768 <UART_SetConfig+0x458>
 800e54a:	2308      	movs	r3, #8
 800e54c:	77fb      	strb	r3, [r7, #31]
 800e54e:	e10b      	b.n	800e768 <UART_SetConfig+0x458>
 800e550:	2310      	movs	r3, #16
 800e552:	77fb      	strb	r3, [r7, #31]
 800e554:	e108      	b.n	800e768 <UART_SetConfig+0x458>
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	4a18      	ldr	r2, [pc, #96]	@ (800e5bc <UART_SetConfig+0x2ac>)
 800e55c:	4293      	cmp	r3, r2
 800e55e:	d12f      	bne.n	800e5c0 <UART_SetConfig+0x2b0>
 800e560:	4b14      	ldr	r3, [pc, #80]	@ (800e5b4 <UART_SetConfig+0x2a4>)
 800e562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e566:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800e56a:	2b30      	cmp	r3, #48	@ 0x30
 800e56c:	d013      	beq.n	800e596 <UART_SetConfig+0x286>
 800e56e:	2b30      	cmp	r3, #48	@ 0x30
 800e570:	d814      	bhi.n	800e59c <UART_SetConfig+0x28c>
 800e572:	2b20      	cmp	r3, #32
 800e574:	d009      	beq.n	800e58a <UART_SetConfig+0x27a>
 800e576:	2b20      	cmp	r3, #32
 800e578:	d810      	bhi.n	800e59c <UART_SetConfig+0x28c>
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d002      	beq.n	800e584 <UART_SetConfig+0x274>
 800e57e:	2b10      	cmp	r3, #16
 800e580:	d006      	beq.n	800e590 <UART_SetConfig+0x280>
 800e582:	e00b      	b.n	800e59c <UART_SetConfig+0x28c>
 800e584:	2300      	movs	r3, #0
 800e586:	77fb      	strb	r3, [r7, #31]
 800e588:	e0ee      	b.n	800e768 <UART_SetConfig+0x458>
 800e58a:	2302      	movs	r3, #2
 800e58c:	77fb      	strb	r3, [r7, #31]
 800e58e:	e0eb      	b.n	800e768 <UART_SetConfig+0x458>
 800e590:	2304      	movs	r3, #4
 800e592:	77fb      	strb	r3, [r7, #31]
 800e594:	e0e8      	b.n	800e768 <UART_SetConfig+0x458>
 800e596:	2308      	movs	r3, #8
 800e598:	77fb      	strb	r3, [r7, #31]
 800e59a:	e0e5      	b.n	800e768 <UART_SetConfig+0x458>
 800e59c:	2310      	movs	r3, #16
 800e59e:	77fb      	strb	r3, [r7, #31]
 800e5a0:	e0e2      	b.n	800e768 <UART_SetConfig+0x458>
 800e5a2:	bf00      	nop
 800e5a4:	019bfcc0 	.word	0x019bfcc0
 800e5a8:	080198d0 	.word	0x080198d0
 800e5ac:	efff69f3 	.word	0xefff69f3
 800e5b0:	40011000 	.word	0x40011000
 800e5b4:	40023800 	.word	0x40023800
 800e5b8:	40004400 	.word	0x40004400
 800e5bc:	40004800 	.word	0x40004800
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	4aa5      	ldr	r2, [pc, #660]	@ (800e85c <UART_SetConfig+0x54c>)
 800e5c6:	4293      	cmp	r3, r2
 800e5c8:	d120      	bne.n	800e60c <UART_SetConfig+0x2fc>
 800e5ca:	4ba5      	ldr	r3, [pc, #660]	@ (800e860 <UART_SetConfig+0x550>)
 800e5cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e5d0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800e5d4:	2bc0      	cmp	r3, #192	@ 0xc0
 800e5d6:	d013      	beq.n	800e600 <UART_SetConfig+0x2f0>
 800e5d8:	2bc0      	cmp	r3, #192	@ 0xc0
 800e5da:	d814      	bhi.n	800e606 <UART_SetConfig+0x2f6>
 800e5dc:	2b80      	cmp	r3, #128	@ 0x80
 800e5de:	d009      	beq.n	800e5f4 <UART_SetConfig+0x2e4>
 800e5e0:	2b80      	cmp	r3, #128	@ 0x80
 800e5e2:	d810      	bhi.n	800e606 <UART_SetConfig+0x2f6>
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d002      	beq.n	800e5ee <UART_SetConfig+0x2de>
 800e5e8:	2b40      	cmp	r3, #64	@ 0x40
 800e5ea:	d006      	beq.n	800e5fa <UART_SetConfig+0x2ea>
 800e5ec:	e00b      	b.n	800e606 <UART_SetConfig+0x2f6>
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	77fb      	strb	r3, [r7, #31]
 800e5f2:	e0b9      	b.n	800e768 <UART_SetConfig+0x458>
 800e5f4:	2302      	movs	r3, #2
 800e5f6:	77fb      	strb	r3, [r7, #31]
 800e5f8:	e0b6      	b.n	800e768 <UART_SetConfig+0x458>
 800e5fa:	2304      	movs	r3, #4
 800e5fc:	77fb      	strb	r3, [r7, #31]
 800e5fe:	e0b3      	b.n	800e768 <UART_SetConfig+0x458>
 800e600:	2308      	movs	r3, #8
 800e602:	77fb      	strb	r3, [r7, #31]
 800e604:	e0b0      	b.n	800e768 <UART_SetConfig+0x458>
 800e606:	2310      	movs	r3, #16
 800e608:	77fb      	strb	r3, [r7, #31]
 800e60a:	e0ad      	b.n	800e768 <UART_SetConfig+0x458>
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	4a94      	ldr	r2, [pc, #592]	@ (800e864 <UART_SetConfig+0x554>)
 800e612:	4293      	cmp	r3, r2
 800e614:	d125      	bne.n	800e662 <UART_SetConfig+0x352>
 800e616:	4b92      	ldr	r3, [pc, #584]	@ (800e860 <UART_SetConfig+0x550>)
 800e618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e61c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e620:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e624:	d017      	beq.n	800e656 <UART_SetConfig+0x346>
 800e626:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e62a:	d817      	bhi.n	800e65c <UART_SetConfig+0x34c>
 800e62c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e630:	d00b      	beq.n	800e64a <UART_SetConfig+0x33a>
 800e632:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e636:	d811      	bhi.n	800e65c <UART_SetConfig+0x34c>
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d003      	beq.n	800e644 <UART_SetConfig+0x334>
 800e63c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e640:	d006      	beq.n	800e650 <UART_SetConfig+0x340>
 800e642:	e00b      	b.n	800e65c <UART_SetConfig+0x34c>
 800e644:	2300      	movs	r3, #0
 800e646:	77fb      	strb	r3, [r7, #31]
 800e648:	e08e      	b.n	800e768 <UART_SetConfig+0x458>
 800e64a:	2302      	movs	r3, #2
 800e64c:	77fb      	strb	r3, [r7, #31]
 800e64e:	e08b      	b.n	800e768 <UART_SetConfig+0x458>
 800e650:	2304      	movs	r3, #4
 800e652:	77fb      	strb	r3, [r7, #31]
 800e654:	e088      	b.n	800e768 <UART_SetConfig+0x458>
 800e656:	2308      	movs	r3, #8
 800e658:	77fb      	strb	r3, [r7, #31]
 800e65a:	e085      	b.n	800e768 <UART_SetConfig+0x458>
 800e65c:	2310      	movs	r3, #16
 800e65e:	77fb      	strb	r3, [r7, #31]
 800e660:	e082      	b.n	800e768 <UART_SetConfig+0x458>
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	4a80      	ldr	r2, [pc, #512]	@ (800e868 <UART_SetConfig+0x558>)
 800e668:	4293      	cmp	r3, r2
 800e66a:	d125      	bne.n	800e6b8 <UART_SetConfig+0x3a8>
 800e66c:	4b7c      	ldr	r3, [pc, #496]	@ (800e860 <UART_SetConfig+0x550>)
 800e66e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e672:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800e676:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e67a:	d017      	beq.n	800e6ac <UART_SetConfig+0x39c>
 800e67c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e680:	d817      	bhi.n	800e6b2 <UART_SetConfig+0x3a2>
 800e682:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e686:	d00b      	beq.n	800e6a0 <UART_SetConfig+0x390>
 800e688:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e68c:	d811      	bhi.n	800e6b2 <UART_SetConfig+0x3a2>
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d003      	beq.n	800e69a <UART_SetConfig+0x38a>
 800e692:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e696:	d006      	beq.n	800e6a6 <UART_SetConfig+0x396>
 800e698:	e00b      	b.n	800e6b2 <UART_SetConfig+0x3a2>
 800e69a:	2301      	movs	r3, #1
 800e69c:	77fb      	strb	r3, [r7, #31]
 800e69e:	e063      	b.n	800e768 <UART_SetConfig+0x458>
 800e6a0:	2302      	movs	r3, #2
 800e6a2:	77fb      	strb	r3, [r7, #31]
 800e6a4:	e060      	b.n	800e768 <UART_SetConfig+0x458>
 800e6a6:	2304      	movs	r3, #4
 800e6a8:	77fb      	strb	r3, [r7, #31]
 800e6aa:	e05d      	b.n	800e768 <UART_SetConfig+0x458>
 800e6ac:	2308      	movs	r3, #8
 800e6ae:	77fb      	strb	r3, [r7, #31]
 800e6b0:	e05a      	b.n	800e768 <UART_SetConfig+0x458>
 800e6b2:	2310      	movs	r3, #16
 800e6b4:	77fb      	strb	r3, [r7, #31]
 800e6b6:	e057      	b.n	800e768 <UART_SetConfig+0x458>
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	4a6b      	ldr	r2, [pc, #428]	@ (800e86c <UART_SetConfig+0x55c>)
 800e6be:	4293      	cmp	r3, r2
 800e6c0:	d125      	bne.n	800e70e <UART_SetConfig+0x3fe>
 800e6c2:	4b67      	ldr	r3, [pc, #412]	@ (800e860 <UART_SetConfig+0x550>)
 800e6c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e6c8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800e6cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e6d0:	d017      	beq.n	800e702 <UART_SetConfig+0x3f2>
 800e6d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e6d6:	d817      	bhi.n	800e708 <UART_SetConfig+0x3f8>
 800e6d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e6dc:	d00b      	beq.n	800e6f6 <UART_SetConfig+0x3e6>
 800e6de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e6e2:	d811      	bhi.n	800e708 <UART_SetConfig+0x3f8>
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d003      	beq.n	800e6f0 <UART_SetConfig+0x3e0>
 800e6e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e6ec:	d006      	beq.n	800e6fc <UART_SetConfig+0x3ec>
 800e6ee:	e00b      	b.n	800e708 <UART_SetConfig+0x3f8>
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	77fb      	strb	r3, [r7, #31]
 800e6f4:	e038      	b.n	800e768 <UART_SetConfig+0x458>
 800e6f6:	2302      	movs	r3, #2
 800e6f8:	77fb      	strb	r3, [r7, #31]
 800e6fa:	e035      	b.n	800e768 <UART_SetConfig+0x458>
 800e6fc:	2304      	movs	r3, #4
 800e6fe:	77fb      	strb	r3, [r7, #31]
 800e700:	e032      	b.n	800e768 <UART_SetConfig+0x458>
 800e702:	2308      	movs	r3, #8
 800e704:	77fb      	strb	r3, [r7, #31]
 800e706:	e02f      	b.n	800e768 <UART_SetConfig+0x458>
 800e708:	2310      	movs	r3, #16
 800e70a:	77fb      	strb	r3, [r7, #31]
 800e70c:	e02c      	b.n	800e768 <UART_SetConfig+0x458>
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	4a57      	ldr	r2, [pc, #348]	@ (800e870 <UART_SetConfig+0x560>)
 800e714:	4293      	cmp	r3, r2
 800e716:	d125      	bne.n	800e764 <UART_SetConfig+0x454>
 800e718:	4b51      	ldr	r3, [pc, #324]	@ (800e860 <UART_SetConfig+0x550>)
 800e71a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e71e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800e722:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800e726:	d017      	beq.n	800e758 <UART_SetConfig+0x448>
 800e728:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800e72c:	d817      	bhi.n	800e75e <UART_SetConfig+0x44e>
 800e72e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e732:	d00b      	beq.n	800e74c <UART_SetConfig+0x43c>
 800e734:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e738:	d811      	bhi.n	800e75e <UART_SetConfig+0x44e>
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d003      	beq.n	800e746 <UART_SetConfig+0x436>
 800e73e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e742:	d006      	beq.n	800e752 <UART_SetConfig+0x442>
 800e744:	e00b      	b.n	800e75e <UART_SetConfig+0x44e>
 800e746:	2300      	movs	r3, #0
 800e748:	77fb      	strb	r3, [r7, #31]
 800e74a:	e00d      	b.n	800e768 <UART_SetConfig+0x458>
 800e74c:	2302      	movs	r3, #2
 800e74e:	77fb      	strb	r3, [r7, #31]
 800e750:	e00a      	b.n	800e768 <UART_SetConfig+0x458>
 800e752:	2304      	movs	r3, #4
 800e754:	77fb      	strb	r3, [r7, #31]
 800e756:	e007      	b.n	800e768 <UART_SetConfig+0x458>
 800e758:	2308      	movs	r3, #8
 800e75a:	77fb      	strb	r3, [r7, #31]
 800e75c:	e004      	b.n	800e768 <UART_SetConfig+0x458>
 800e75e:	2310      	movs	r3, #16
 800e760:	77fb      	strb	r3, [r7, #31]
 800e762:	e001      	b.n	800e768 <UART_SetConfig+0x458>
 800e764:	2310      	movs	r3, #16
 800e766:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	69db      	ldr	r3, [r3, #28]
 800e76c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e770:	d15c      	bne.n	800e82c <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 800e772:	7ffb      	ldrb	r3, [r7, #31]
 800e774:	2b08      	cmp	r3, #8
 800e776:	d828      	bhi.n	800e7ca <UART_SetConfig+0x4ba>
 800e778:	a201      	add	r2, pc, #4	@ (adr r2, 800e780 <UART_SetConfig+0x470>)
 800e77a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e77e:	bf00      	nop
 800e780:	0800e7a5 	.word	0x0800e7a5
 800e784:	0800e7ad 	.word	0x0800e7ad
 800e788:	0800e7b5 	.word	0x0800e7b5
 800e78c:	0800e7cb 	.word	0x0800e7cb
 800e790:	0800e7bb 	.word	0x0800e7bb
 800e794:	0800e7cb 	.word	0x0800e7cb
 800e798:	0800e7cb 	.word	0x0800e7cb
 800e79c:	0800e7cb 	.word	0x0800e7cb
 800e7a0:	0800e7c3 	.word	0x0800e7c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e7a4:	f7fa faf2 	bl	8008d8c <HAL_RCC_GetPCLK1Freq>
 800e7a8:	61b8      	str	r0, [r7, #24]
        break;
 800e7aa:	e013      	b.n	800e7d4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e7ac:	f7fa fb02 	bl	8008db4 <HAL_RCC_GetPCLK2Freq>
 800e7b0:	61b8      	str	r0, [r7, #24]
        break;
 800e7b2:	e00f      	b.n	800e7d4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e7b4:	4b2f      	ldr	r3, [pc, #188]	@ (800e874 <UART_SetConfig+0x564>)
 800e7b6:	61bb      	str	r3, [r7, #24]
        break;
 800e7b8:	e00c      	b.n	800e7d4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e7ba:	f7fa fa15 	bl	8008be8 <HAL_RCC_GetSysClockFreq>
 800e7be:	61b8      	str	r0, [r7, #24]
        break;
 800e7c0:	e008      	b.n	800e7d4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e7c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e7c6:	61bb      	str	r3, [r7, #24]
        break;
 800e7c8:	e004      	b.n	800e7d4 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	77bb      	strb	r3, [r7, #30]
        break;
 800e7d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e7d4:	69bb      	ldr	r3, [r7, #24]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	f000 8082 	beq.w	800e8e0 <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e7dc:	69bb      	ldr	r3, [r7, #24]
 800e7de:	005a      	lsls	r2, r3, #1
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	685b      	ldr	r3, [r3, #4]
 800e7e4:	085b      	lsrs	r3, r3, #1
 800e7e6:	441a      	add	r2, r3
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	685b      	ldr	r3, [r3, #4]
 800e7ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e7f2:	693b      	ldr	r3, [r7, #16]
 800e7f4:	2b0f      	cmp	r3, #15
 800e7f6:	d916      	bls.n	800e826 <UART_SetConfig+0x516>
 800e7f8:	693b      	ldr	r3, [r7, #16]
 800e7fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e7fe:	d212      	bcs.n	800e826 <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	b29b      	uxth	r3, r3
 800e804:	f023 030f 	bic.w	r3, r3, #15
 800e808:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e80a:	693b      	ldr	r3, [r7, #16]
 800e80c:	085b      	lsrs	r3, r3, #1
 800e80e:	b29b      	uxth	r3, r3
 800e810:	f003 0307 	and.w	r3, r3, #7
 800e814:	b29a      	uxth	r2, r3
 800e816:	89fb      	ldrh	r3, [r7, #14]
 800e818:	4313      	orrs	r3, r2
 800e81a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	89fa      	ldrh	r2, [r7, #14]
 800e822:	60da      	str	r2, [r3, #12]
 800e824:	e05c      	b.n	800e8e0 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800e826:	2301      	movs	r3, #1
 800e828:	77bb      	strb	r3, [r7, #30]
 800e82a:	e059      	b.n	800e8e0 <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e82c:	7ffb      	ldrb	r3, [r7, #31]
 800e82e:	2b08      	cmp	r3, #8
 800e830:	d835      	bhi.n	800e89e <UART_SetConfig+0x58e>
 800e832:	a201      	add	r2, pc, #4	@ (adr r2, 800e838 <UART_SetConfig+0x528>)
 800e834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e838:	0800e879 	.word	0x0800e879
 800e83c:	0800e881 	.word	0x0800e881
 800e840:	0800e889 	.word	0x0800e889
 800e844:	0800e89f 	.word	0x0800e89f
 800e848:	0800e88f 	.word	0x0800e88f
 800e84c:	0800e89f 	.word	0x0800e89f
 800e850:	0800e89f 	.word	0x0800e89f
 800e854:	0800e89f 	.word	0x0800e89f
 800e858:	0800e897 	.word	0x0800e897
 800e85c:	40004c00 	.word	0x40004c00
 800e860:	40023800 	.word	0x40023800
 800e864:	40005000 	.word	0x40005000
 800e868:	40011400 	.word	0x40011400
 800e86c:	40007800 	.word	0x40007800
 800e870:	40007c00 	.word	0x40007c00
 800e874:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e878:	f7fa fa88 	bl	8008d8c <HAL_RCC_GetPCLK1Freq>
 800e87c:	61b8      	str	r0, [r7, #24]
        break;
 800e87e:	e013      	b.n	800e8a8 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e880:	f7fa fa98 	bl	8008db4 <HAL_RCC_GetPCLK2Freq>
 800e884:	61b8      	str	r0, [r7, #24]
        break;
 800e886:	e00f      	b.n	800e8a8 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e888:	4b1b      	ldr	r3, [pc, #108]	@ (800e8f8 <UART_SetConfig+0x5e8>)
 800e88a:	61bb      	str	r3, [r7, #24]
        break;
 800e88c:	e00c      	b.n	800e8a8 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e88e:	f7fa f9ab 	bl	8008be8 <HAL_RCC_GetSysClockFreq>
 800e892:	61b8      	str	r0, [r7, #24]
        break;
 800e894:	e008      	b.n	800e8a8 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e896:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e89a:	61bb      	str	r3, [r7, #24]
        break;
 800e89c:	e004      	b.n	800e8a8 <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	77bb      	strb	r3, [r7, #30]
        break;
 800e8a6:	bf00      	nop
    }

    if (pclk != 0U)
 800e8a8:	69bb      	ldr	r3, [r7, #24]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d018      	beq.n	800e8e0 <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	685b      	ldr	r3, [r3, #4]
 800e8b2:	085a      	lsrs	r2, r3, #1
 800e8b4:	69bb      	ldr	r3, [r7, #24]
 800e8b6:	441a      	add	r2, r3
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	685b      	ldr	r3, [r3, #4]
 800e8bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e8c2:	693b      	ldr	r3, [r7, #16]
 800e8c4:	2b0f      	cmp	r3, #15
 800e8c6:	d909      	bls.n	800e8dc <UART_SetConfig+0x5cc>
 800e8c8:	693b      	ldr	r3, [r7, #16]
 800e8ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e8ce:	d205      	bcs.n	800e8dc <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e8d0:	693b      	ldr	r3, [r7, #16]
 800e8d2:	b29a      	uxth	r2, r3
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	60da      	str	r2, [r3, #12]
 800e8da:	e001      	b.n	800e8e0 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800e8dc:	2301      	movs	r3, #1
 800e8de:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800e8ec:	7fbb      	ldrb	r3, [r7, #30]
}
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	3720      	adds	r7, #32
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}
 800e8f6:	bf00      	nop
 800e8f8:	00f42400 	.word	0x00f42400

0800e8fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b082      	sub	sp, #8
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e908:	2bff      	cmp	r3, #255	@ 0xff
 800e90a:	d904      	bls.n	800e916 <UART_AdvFeatureConfig+0x1a>
 800e90c:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 800e910:	488e      	ldr	r0, [pc, #568]	@ (800eb4c <UART_AdvFeatureConfig+0x250>)
 800e912:	f7f8 f84b 	bl	80069ac <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e91a:	f003 0308 	and.w	r3, r3, #8
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d018      	beq.n	800e954 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e926:	2b00      	cmp	r3, #0
 800e928:	d009      	beq.n	800e93e <UART_AdvFeatureConfig+0x42>
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e92e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e932:	d004      	beq.n	800e93e <UART_AdvFeatureConfig+0x42>
 800e934:	f640 31ed 	movw	r1, #3053	@ 0xbed
 800e938:	4884      	ldr	r0, [pc, #528]	@ (800eb4c <UART_AdvFeatureConfig+0x250>)
 800e93a:	f7f8 f837 	bl	80069ac <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	685b      	ldr	r3, [r3, #4]
 800e944:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	430a      	orrs	r2, r1
 800e952:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e958:	f003 0301 	and.w	r3, r3, #1
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d018      	beq.n	800e992 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e964:	2b00      	cmp	r3, #0
 800e966:	d009      	beq.n	800e97c <UART_AdvFeatureConfig+0x80>
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e96c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e970:	d004      	beq.n	800e97c <UART_AdvFeatureConfig+0x80>
 800e972:	f640 31f4 	movw	r1, #3060	@ 0xbf4
 800e976:	4875      	ldr	r0, [pc, #468]	@ (800eb4c <UART_AdvFeatureConfig+0x250>)
 800e978:	f7f8 f818 	bl	80069ac <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	685b      	ldr	r3, [r3, #4]
 800e982:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	430a      	orrs	r2, r1
 800e990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e996:	f003 0302 	and.w	r3, r3, #2
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d018      	beq.n	800e9d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d009      	beq.n	800e9ba <UART_AdvFeatureConfig+0xbe>
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e9ae:	d004      	beq.n	800e9ba <UART_AdvFeatureConfig+0xbe>
 800e9b0:	f640 31fb 	movw	r1, #3067	@ 0xbfb
 800e9b4:	4865      	ldr	r0, [pc, #404]	@ (800eb4c <UART_AdvFeatureConfig+0x250>)
 800e9b6:	f7f7 fff9 	bl	80069ac <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	685b      	ldr	r3, [r3, #4]
 800e9c0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	430a      	orrs	r2, r1
 800e9ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9d4:	f003 0304 	and.w	r3, r3, #4
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d018      	beq.n	800ea0e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d009      	beq.n	800e9f8 <UART_AdvFeatureConfig+0xfc>
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e9ec:	d004      	beq.n	800e9f8 <UART_AdvFeatureConfig+0xfc>
 800e9ee:	f640 4102 	movw	r1, #3074	@ 0xc02
 800e9f2:	4856      	ldr	r0, [pc, #344]	@ (800eb4c <UART_AdvFeatureConfig+0x250>)
 800e9f4:	f7f7 ffda 	bl	80069ac <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	685b      	ldr	r3, [r3, #4]
 800e9fe:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	430a      	orrs	r2, r1
 800ea0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea12:	f003 0310 	and.w	r3, r3, #16
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d018      	beq.n	800ea4c <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d009      	beq.n	800ea36 <UART_AdvFeatureConfig+0x13a>
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ea2a:	d004      	beq.n	800ea36 <UART_AdvFeatureConfig+0x13a>
 800ea2c:	f640 4109 	movw	r1, #3081	@ 0xc09
 800ea30:	4846      	ldr	r0, [pc, #280]	@ (800eb4c <UART_AdvFeatureConfig+0x250>)
 800ea32:	f7f7 ffbb 	bl	80069ac <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	689b      	ldr	r3, [r3, #8]
 800ea3c:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	430a      	orrs	r2, r1
 800ea4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea50:	f003 0320 	and.w	r3, r3, #32
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d018      	beq.n	800ea8a <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d009      	beq.n	800ea74 <UART_AdvFeatureConfig+0x178>
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ea64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ea68:	d004      	beq.n	800ea74 <UART_AdvFeatureConfig+0x178>
 800ea6a:	f44f 6141 	mov.w	r1, #3088	@ 0xc10
 800ea6e:	4837      	ldr	r0, [pc, #220]	@ (800eb4c <UART_AdvFeatureConfig+0x250>)
 800ea70:	f7f7 ff9c 	bl	80069ac <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	689b      	ldr	r3, [r3, #8]
 800ea7a:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	430a      	orrs	r2, r1
 800ea88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d064      	beq.n	800eb60 <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	4a2d      	ldr	r2, [pc, #180]	@ (800eb50 <UART_AdvFeatureConfig+0x254>)
 800ea9c:	4293      	cmp	r3, r2
 800ea9e:	d013      	beq.n	800eac8 <UART_AdvFeatureConfig+0x1cc>
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	4a2b      	ldr	r2, [pc, #172]	@ (800eb54 <UART_AdvFeatureConfig+0x258>)
 800eaa6:	4293      	cmp	r3, r2
 800eaa8:	d00e      	beq.n	800eac8 <UART_AdvFeatureConfig+0x1cc>
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	4a2a      	ldr	r2, [pc, #168]	@ (800eb58 <UART_AdvFeatureConfig+0x25c>)
 800eab0:	4293      	cmp	r3, r2
 800eab2:	d009      	beq.n	800eac8 <UART_AdvFeatureConfig+0x1cc>
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	4a28      	ldr	r2, [pc, #160]	@ (800eb5c <UART_AdvFeatureConfig+0x260>)
 800eaba:	4293      	cmp	r3, r2
 800eabc:	d004      	beq.n	800eac8 <UART_AdvFeatureConfig+0x1cc>
 800eabe:	f640 4117 	movw	r1, #3095	@ 0xc17
 800eac2:	4822      	ldr	r0, [pc, #136]	@ (800eb4c <UART_AdvFeatureConfig+0x250>)
 800eac4:	f7f7 ff72 	bl	80069ac <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d009      	beq.n	800eae4 <UART_AdvFeatureConfig+0x1e8>
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ead4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ead8:	d004      	beq.n	800eae4 <UART_AdvFeatureConfig+0x1e8>
 800eada:	f640 4118 	movw	r1, #3096	@ 0xc18
 800eade:	481b      	ldr	r0, [pc, #108]	@ (800eb4c <UART_AdvFeatureConfig+0x250>)
 800eae0:	f7f7 ff64 	bl	80069ac <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	685b      	ldr	r3, [r3, #4]
 800eaea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	430a      	orrs	r2, r1
 800eaf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eafe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eb02:	d12d      	bne.n	800eb60 <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d013      	beq.n	800eb34 <UART_AdvFeatureConfig+0x238>
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800eb14:	d00e      	beq.n	800eb34 <UART_AdvFeatureConfig+0x238>
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800eb1e:	d009      	beq.n	800eb34 <UART_AdvFeatureConfig+0x238>
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb24:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800eb28:	d004      	beq.n	800eb34 <UART_AdvFeatureConfig+0x238>
 800eb2a:	f640 411d 	movw	r1, #3101	@ 0xc1d
 800eb2e:	4807      	ldr	r0, [pc, #28]	@ (800eb4c <UART_AdvFeatureConfig+0x250>)
 800eb30:	f7f7 ff3c 	bl	80069ac <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	685b      	ldr	r3, [r3, #4]
 800eb3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	430a      	orrs	r2, r1
 800eb48:	605a      	str	r2, [r3, #4]
 800eb4a:	e009      	b.n	800eb60 <UART_AdvFeatureConfig+0x264>
 800eb4c:	080198d0 	.word	0x080198d0
 800eb50:	40011000 	.word	0x40011000
 800eb54:	40004400 	.word	0x40004400
 800eb58:	40004800 	.word	0x40004800
 800eb5c:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d018      	beq.n	800eb9e <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d009      	beq.n	800eb88 <UART_AdvFeatureConfig+0x28c>
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eb78:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800eb7c:	d004      	beq.n	800eb88 <UART_AdvFeatureConfig+0x28c>
 800eb7e:	f640 4125 	movw	r1, #3109	@ 0xc25
 800eb82:	4809      	ldr	r0, [pc, #36]	@ (800eba8 <UART_AdvFeatureConfig+0x2ac>)
 800eb84:	f7f7 ff12 	bl	80069ac <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	685b      	ldr	r3, [r3, #4]
 800eb8e:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	430a      	orrs	r2, r1
 800eb9c:	605a      	str	r2, [r3, #4]
  }
}
 800eb9e:	bf00      	nop
 800eba0:	3708      	adds	r7, #8
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}
 800eba6:	bf00      	nop
 800eba8:	080198d0 	.word	0x080198d0

0800ebac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b08c      	sub	sp, #48	@ 0x30
 800ebb0:	af02      	add	r7, sp, #8
 800ebb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ebbc:	f7f8 fc36 	bl	800742c <HAL_GetTick>
 800ebc0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f003 0308 	and.w	r3, r3, #8
 800ebcc:	2b08      	cmp	r3, #8
 800ebce:	d12e      	bne.n	800ec2e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ebd0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ebd4:	9300      	str	r3, [sp, #0]
 800ebd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebd8:	2200      	movs	r2, #0
 800ebda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ebde:	6878      	ldr	r0, [r7, #4]
 800ebe0:	f000 f83b 	bl	800ec5a <UART_WaitOnFlagUntilTimeout>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d021      	beq.n	800ec2e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebf0:	693b      	ldr	r3, [r7, #16]
 800ebf2:	e853 3f00 	ldrex	r3, [r3]
 800ebf6:	60fb      	str	r3, [r7, #12]
   return(result);
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ebfe:	623b      	str	r3, [r7, #32]
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	461a      	mov	r2, r3
 800ec06:	6a3b      	ldr	r3, [r7, #32]
 800ec08:	61fb      	str	r3, [r7, #28]
 800ec0a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec0c:	69b9      	ldr	r1, [r7, #24]
 800ec0e:	69fa      	ldr	r2, [r7, #28]
 800ec10:	e841 2300 	strex	r3, r2, [r1]
 800ec14:	617b      	str	r3, [r7, #20]
   return(result);
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d1e6      	bne.n	800ebea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2220      	movs	r2, #32
 800ec20:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2200      	movs	r2, #0
 800ec26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ec2a:	2303      	movs	r3, #3
 800ec2c:	e011      	b.n	800ec52 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2220      	movs	r2, #32
 800ec32:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2220      	movs	r2, #32
 800ec38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	2200      	movs	r2, #0
 800ec46:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800ec50:	2300      	movs	r3, #0
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	3728      	adds	r7, #40	@ 0x28
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}

0800ec5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ec5a:	b580      	push	{r7, lr}
 800ec5c:	b084      	sub	sp, #16
 800ec5e:	af00      	add	r7, sp, #0
 800ec60:	60f8      	str	r0, [r7, #12]
 800ec62:	60b9      	str	r1, [r7, #8]
 800ec64:	603b      	str	r3, [r7, #0]
 800ec66:	4613      	mov	r3, r2
 800ec68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ec6a:	e04f      	b.n	800ed0c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ec6c:	69bb      	ldr	r3, [r7, #24]
 800ec6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec72:	d04b      	beq.n	800ed0c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ec74:	f7f8 fbda 	bl	800742c <HAL_GetTick>
 800ec78:	4602      	mov	r2, r0
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	1ad3      	subs	r3, r2, r3
 800ec7e:	69ba      	ldr	r2, [r7, #24]
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d302      	bcc.n	800ec8a <UART_WaitOnFlagUntilTimeout+0x30>
 800ec84:	69bb      	ldr	r3, [r7, #24]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d101      	bne.n	800ec8e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ec8a:	2303      	movs	r3, #3
 800ec8c:	e04e      	b.n	800ed2c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	f003 0304 	and.w	r3, r3, #4
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d037      	beq.n	800ed0c <UART_WaitOnFlagUntilTimeout+0xb2>
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	2b80      	cmp	r3, #128	@ 0x80
 800eca0:	d034      	beq.n	800ed0c <UART_WaitOnFlagUntilTimeout+0xb2>
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	2b40      	cmp	r3, #64	@ 0x40
 800eca6:	d031      	beq.n	800ed0c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	69db      	ldr	r3, [r3, #28]
 800ecae:	f003 0308 	and.w	r3, r3, #8
 800ecb2:	2b08      	cmp	r3, #8
 800ecb4:	d110      	bne.n	800ecd8 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	2208      	movs	r2, #8
 800ecbc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ecbe:	68f8      	ldr	r0, [r7, #12]
 800ecc0:	f000 f838 	bl	800ed34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	2208      	movs	r2, #8
 800ecc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	2200      	movs	r2, #0
 800ecd0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800ecd4:	2301      	movs	r3, #1
 800ecd6:	e029      	b.n	800ed2c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	69db      	ldr	r3, [r3, #28]
 800ecde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ece2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ece6:	d111      	bne.n	800ed0c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ecf0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ecf2:	68f8      	ldr	r0, [r7, #12]
 800ecf4:	f000 f81e 	bl	800ed34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	2220      	movs	r2, #32
 800ecfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	2200      	movs	r2, #0
 800ed04:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800ed08:	2303      	movs	r3, #3
 800ed0a:	e00f      	b.n	800ed2c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	69da      	ldr	r2, [r3, #28]
 800ed12:	68bb      	ldr	r3, [r7, #8]
 800ed14:	4013      	ands	r3, r2
 800ed16:	68ba      	ldr	r2, [r7, #8]
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	bf0c      	ite	eq
 800ed1c:	2301      	moveq	r3, #1
 800ed1e:	2300      	movne	r3, #0
 800ed20:	b2db      	uxtb	r3, r3
 800ed22:	461a      	mov	r2, r3
 800ed24:	79fb      	ldrb	r3, [r7, #7]
 800ed26:	429a      	cmp	r2, r3
 800ed28:	d0a0      	beq.n	800ec6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ed2a:	2300      	movs	r3, #0
}
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	3710      	adds	r7, #16
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd80      	pop	{r7, pc}

0800ed34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ed34:	b480      	push	{r7}
 800ed36:	b095      	sub	sp, #84	@ 0x54
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed44:	e853 3f00 	ldrex	r3, [r3]
 800ed48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ed4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ed50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	461a      	mov	r2, r3
 800ed58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed5a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ed5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ed60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ed62:	e841 2300 	strex	r3, r2, [r1]
 800ed66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ed68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d1e6      	bne.n	800ed3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	3308      	adds	r3, #8
 800ed74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed76:	6a3b      	ldr	r3, [r7, #32]
 800ed78:	e853 3f00 	ldrex	r3, [r3]
 800ed7c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ed7e:	69fb      	ldr	r3, [r7, #28]
 800ed80:	f023 0301 	bic.w	r3, r3, #1
 800ed84:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	3308      	adds	r3, #8
 800ed8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ed8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ed90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ed94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed96:	e841 2300 	strex	r3, r2, [r1]
 800ed9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ed9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d1e5      	bne.n	800ed6e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eda6:	2b01      	cmp	r3, #1
 800eda8:	d118      	bne.n	800eddc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	e853 3f00 	ldrex	r3, [r3]
 800edb6:	60bb      	str	r3, [r7, #8]
   return(result);
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	f023 0310 	bic.w	r3, r3, #16
 800edbe:	647b      	str	r3, [r7, #68]	@ 0x44
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	461a      	mov	r2, r3
 800edc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edc8:	61bb      	str	r3, [r7, #24]
 800edca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edcc:	6979      	ldr	r1, [r7, #20]
 800edce:	69ba      	ldr	r2, [r7, #24]
 800edd0:	e841 2300 	strex	r3, r2, [r1]
 800edd4:	613b      	str	r3, [r7, #16]
   return(result);
 800edd6:	693b      	ldr	r3, [r7, #16]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d1e6      	bne.n	800edaa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2220      	movs	r2, #32
 800ede0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2200      	movs	r2, #0
 800ede8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2200      	movs	r2, #0
 800edee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800edf0:	bf00      	nop
 800edf2:	3754      	adds	r7, #84	@ 0x54
 800edf4:	46bd      	mov	sp, r7
 800edf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfa:	4770      	bx	lr

0800edfc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800edfc:	b480      	push	{r7}
 800edfe:	b083      	sub	sp, #12
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f103 0208 	add.w	r2, r3, #8
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f04f 32ff 	mov.w	r2, #4294967295
 800ee14:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	f103 0208 	add.w	r2, r3, #8
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	f103 0208 	add.w	r2, r3, #8
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 800ee30:	bf00      	nop
 800ee32:	370c      	adds	r7, #12
 800ee34:	46bd      	mov	sp, r7
 800ee36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3a:	4770      	bx	lr

0800ee3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ee3c:	b480      	push	{r7}
 800ee3e:	b083      	sub	sp, #12
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2200      	movs	r2, #0
 800ee48:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 800ee4a:	bf00      	nop
 800ee4c:	370c      	adds	r7, #12
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee54:	4770      	bx	lr

0800ee56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800ee56:	b480      	push	{r7}
 800ee58:	b085      	sub	sp, #20
 800ee5a:	af00      	add	r7, sp, #0
 800ee5c:	6078      	str	r0, [r7, #4]
 800ee5e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	685b      	ldr	r3, [r3, #4]
 800ee64:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	68fa      	ldr	r2, [r7, #12]
 800ee6a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	689a      	ldr	r2, [r3, #8]
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	689b      	ldr	r3, [r3, #8]
 800ee78:	683a      	ldr	r2, [r7, #0]
 800ee7a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	683a      	ldr	r2, [r7, #0]
 800ee80:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	687a      	ldr	r2, [r7, #4]
 800ee86:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	1c5a      	adds	r2, r3, #1
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 800ee92:	bf00      	nop
 800ee94:	3714      	adds	r7, #20
 800ee96:	46bd      	mov	sp, r7
 800ee98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9c:	4770      	bx	lr

0800ee9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800ee9e:	b480      	push	{r7}
 800eea0:	b085      	sub	sp, #20
 800eea2:	af00      	add	r7, sp, #0
 800eea4:	6078      	str	r0, [r7, #4]
 800eea6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eeb4:	d103      	bne.n	800eebe <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	691b      	ldr	r3, [r3, #16]
 800eeba:	60fb      	str	r3, [r7, #12]
 800eebc:	e00c      	b.n	800eed8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	3308      	adds	r3, #8
 800eec2:	60fb      	str	r3, [r7, #12]
 800eec4:	e002      	b.n	800eecc <vListInsert+0x2e>
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	685b      	ldr	r3, [r3, #4]
 800eeca:	60fb      	str	r3, [r7, #12]
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	685b      	ldr	r3, [r3, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	68ba      	ldr	r2, [r7, #8]
 800eed4:	429a      	cmp	r2, r3
 800eed6:	d2f6      	bcs.n	800eec6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	685a      	ldr	r2, [r3, #4]
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	685b      	ldr	r3, [r3, #4]
 800eee4:	683a      	ldr	r2, [r7, #0]
 800eee6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	68fa      	ldr	r2, [r7, #12]
 800eeec:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	683a      	ldr	r2, [r7, #0]
 800eef2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	687a      	ldr	r2, [r7, #4]
 800eef8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	1c5a      	adds	r2, r3, #1
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 800ef04:	bf00      	nop
 800ef06:	3714      	adds	r7, #20
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0e:	4770      	bx	lr

0800ef10 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ef10:	b480      	push	{r7}
 800ef12:	b085      	sub	sp, #20
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	691b      	ldr	r3, [r3, #16]
 800ef1c:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	685b      	ldr	r3, [r3, #4]
 800ef22:	687a      	ldr	r2, [r7, #4]
 800ef24:	6892      	ldr	r2, [r2, #8]
 800ef26:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	689b      	ldr	r3, [r3, #8]
 800ef2c:	687a      	ldr	r2, [r7, #4]
 800ef2e:	6852      	ldr	r2, [r2, #4]
 800ef30:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	685b      	ldr	r3, [r3, #4]
 800ef36:	687a      	ldr	r2, [r7, #4]
 800ef38:	429a      	cmp	r2, r3
 800ef3a:	d103      	bne.n	800ef44 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	689a      	ldr	r2, [r3, #8]
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2200      	movs	r2, #0
 800ef48:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	1e5a      	subs	r2, r3, #1
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	681b      	ldr	r3, [r3, #0]
}
 800ef58:	4618      	mov	r0, r3
 800ef5a:	3714      	adds	r7, #20
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef62:	4770      	bx	lr

0800ef64 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b086      	sub	sp, #24
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
 800ef6c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800ef6e:	2301      	movs	r3, #1
 800ef70:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 800ef76:	693b      	ldr	r3, [r7, #16]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d110      	bne.n	800ef9e <xQueueGenericReset+0x3a>
    __asm volatile
 800ef7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef80:	b672      	cpsid	i
 800ef82:	f383 8811 	msr	BASEPRI, r3
 800ef86:	f3bf 8f6f 	isb	sy
 800ef8a:	f3bf 8f4f 	dsb	sy
 800ef8e:	b662      	cpsie	i
 800ef90:	60fb      	str	r3, [r7, #12]
}
 800ef92:	bf00      	nop
 800ef94:	f240 1137 	movw	r1, #311	@ 0x137
 800ef98:	483f      	ldr	r0, [pc, #252]	@ (800f098 <xQueueGenericReset+0x134>)
 800ef9a:	f7f7 fc51 	bl	8006840 <vAssertCalled>

    if( ( pxQueue != NULL ) &&
 800ef9e:	693b      	ldr	r3, [r7, #16]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d05d      	beq.n	800f060 <xQueueGenericReset+0xfc>
        ( pxQueue->uxLength >= 1U ) &&
 800efa4:	693b      	ldr	r3, [r7, #16]
 800efa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d059      	beq.n	800f060 <xQueueGenericReset+0xfc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800efac:	693b      	ldr	r3, [r7, #16]
 800efae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800efb0:	693b      	ldr	r3, [r7, #16]
 800efb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800efb4:	2100      	movs	r1, #0
 800efb6:	fba3 2302 	umull	r2, r3, r3, r2
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d000      	beq.n	800efc0 <xQueueGenericReset+0x5c>
 800efbe:	2101      	movs	r1, #1
 800efc0:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d14c      	bne.n	800f060 <xQueueGenericReset+0xfc>
    {
        taskENTER_CRITICAL();
 800efc6:	f002 fff3 	bl	8011fb0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800efca:	693b      	ldr	r3, [r7, #16]
 800efcc:	681a      	ldr	r2, [r3, #0]
 800efce:	693b      	ldr	r3, [r7, #16]
 800efd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800efd2:	6939      	ldr	r1, [r7, #16]
 800efd4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800efd6:	fb01 f303 	mul.w	r3, r1, r3
 800efda:	441a      	add	r2, r3
 800efdc:	693b      	ldr	r3, [r7, #16]
 800efde:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800efe0:	693b      	ldr	r3, [r7, #16]
 800efe2:	2200      	movs	r2, #0
 800efe4:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800efe6:	693b      	ldr	r3, [r7, #16]
 800efe8:	681a      	ldr	r2, [r3, #0]
 800efea:	693b      	ldr	r3, [r7, #16]
 800efec:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 800efee:	693b      	ldr	r3, [r7, #16]
 800eff0:	681a      	ldr	r2, [r3, #0]
 800eff2:	693b      	ldr	r3, [r7, #16]
 800eff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eff6:	3b01      	subs	r3, #1
 800eff8:	6939      	ldr	r1, [r7, #16]
 800effa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800effc:	fb01 f303 	mul.w	r3, r1, r3
 800f000:	441a      	add	r2, r3
 800f002:	693b      	ldr	r3, [r7, #16]
 800f004:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800f006:	693b      	ldr	r3, [r7, #16]
 800f008:	22ff      	movs	r2, #255	@ 0xff
 800f00a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800f00e:	693b      	ldr	r3, [r7, #16]
 800f010:	22ff      	movs	r2, #255	@ 0xff
 800f012:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d114      	bne.n	800f046 <xQueueGenericReset+0xe2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f01c:	693b      	ldr	r3, [r7, #16]
 800f01e:	691b      	ldr	r3, [r3, #16]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d01a      	beq.n	800f05a <xQueueGenericReset+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f024:	693b      	ldr	r3, [r7, #16]
 800f026:	3310      	adds	r3, #16
 800f028:	4618      	mov	r0, r3
 800f02a:	f001 fdc9 	bl	8010bc0 <xTaskRemoveFromEventList>
 800f02e:	4603      	mov	r3, r0
 800f030:	2b00      	cmp	r3, #0
 800f032:	d012      	beq.n	800f05a <xQueueGenericReset+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800f034:	4b19      	ldr	r3, [pc, #100]	@ (800f09c <xQueueGenericReset+0x138>)
 800f036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f03a:	601a      	str	r2, [r3, #0]
 800f03c:	f3bf 8f4f 	dsb	sy
 800f040:	f3bf 8f6f 	isb	sy
 800f044:	e009      	b.n	800f05a <xQueueGenericReset+0xf6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f046:	693b      	ldr	r3, [r7, #16]
 800f048:	3310      	adds	r3, #16
 800f04a:	4618      	mov	r0, r3
 800f04c:	f7ff fed6 	bl	800edfc <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f050:	693b      	ldr	r3, [r7, #16]
 800f052:	3324      	adds	r3, #36	@ 0x24
 800f054:	4618      	mov	r0, r3
 800f056:	f7ff fed1 	bl	800edfc <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800f05a:	f002 ffe1 	bl	8012020 <vPortExitCritical>
 800f05e:	e001      	b.n	800f064 <xQueueGenericReset+0x100>
    }
    else
    {
        xReturn = pdFAIL;
 800f060:	2300      	movs	r3, #0
 800f062:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800f064:	697b      	ldr	r3, [r7, #20]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d110      	bne.n	800f08c <xQueueGenericReset+0x128>
    __asm volatile
 800f06a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f06e:	b672      	cpsid	i
 800f070:	f383 8811 	msr	BASEPRI, r3
 800f074:	f3bf 8f6f 	isb	sy
 800f078:	f3bf 8f4f 	dsb	sy
 800f07c:	b662      	cpsie	i
 800f07e:	60bb      	str	r3, [r7, #8]
}
 800f080:	bf00      	nop
 800f082:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 800f086:	4804      	ldr	r0, [pc, #16]	@ (800f098 <xQueueGenericReset+0x134>)
 800f088:	f7f7 fbda 	bl	8006840 <vAssertCalled>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 800f08c:	697b      	ldr	r3, [r7, #20]
}
 800f08e:	4618      	mov	r0, r3
 800f090:	3718      	adds	r7, #24
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}
 800f096:	bf00      	nop
 800f098:	0801990c 	.word	0x0801990c
 800f09c:	e000ed04 	.word	0xe000ed04

0800f0a0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b08a      	sub	sp, #40	@ 0x28
 800f0a4:	af02      	add	r7, sp, #8
 800f0a6:	60f8      	str	r0, [r7, #12]
 800f0a8:	60b9      	str	r1, [r7, #8]
 800f0aa:	4613      	mov	r3, r2
 800f0ac:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d02e      	beq.n	800f116 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800f0b8:	2100      	movs	r1, #0
 800f0ba:	68ba      	ldr	r2, [r7, #8]
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	fba3 2302 	umull	r2, r3, r3, r2
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d000      	beq.n	800f0c8 <xQueueGenericCreate+0x28>
 800f0c6:	2101      	movs	r1, #1
 800f0c8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d123      	bne.n	800f116 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	68ba      	ldr	r2, [r7, #8]
 800f0d2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800f0d6:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800f0da:	d81c      	bhi.n	800f116 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	68ba      	ldr	r2, [r7, #8]
 800f0e0:	fb02 f303 	mul.w	r3, r2, r3
 800f0e4:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800f0e6:	69bb      	ldr	r3, [r7, #24]
 800f0e8:	3350      	adds	r3, #80	@ 0x50
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f7f7 ff10 	bl	8006f10 <pvPortMalloc>
 800f0f0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800f0f2:	69fb      	ldr	r3, [r7, #28]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d022      	beq.n	800f13e <xQueueGenericCreate+0x9e>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f0f8:	69fb      	ldr	r3, [r7, #28]
 800f0fa:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 800f0fc:	697b      	ldr	r3, [r7, #20]
 800f0fe:	3350      	adds	r3, #80	@ 0x50
 800f100:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f102:	79fa      	ldrb	r2, [r7, #7]
 800f104:	69fb      	ldr	r3, [r7, #28]
 800f106:	9300      	str	r3, [sp, #0]
 800f108:	4613      	mov	r3, r2
 800f10a:	697a      	ldr	r2, [r7, #20]
 800f10c:	68b9      	ldr	r1, [r7, #8]
 800f10e:	68f8      	ldr	r0, [r7, #12]
 800f110:	f000 f81c 	bl	800f14c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800f114:	e013      	b.n	800f13e <xQueueGenericCreate+0x9e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800f116:	69fb      	ldr	r3, [r7, #28]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d110      	bne.n	800f13e <xQueueGenericCreate+0x9e>
    __asm volatile
 800f11c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f120:	b672      	cpsid	i
 800f122:	f383 8811 	msr	BASEPRI, r3
 800f126:	f3bf 8f6f 	isb	sy
 800f12a:	f3bf 8f4f 	dsb	sy
 800f12e:	b662      	cpsie	i
 800f130:	613b      	str	r3, [r7, #16]
}
 800f132:	bf00      	nop
 800f134:	f240 212a 	movw	r1, #554	@ 0x22a
 800f138:	4803      	ldr	r0, [pc, #12]	@ (800f148 <xQueueGenericCreate+0xa8>)
 800f13a:	f7f7 fb81 	bl	8006840 <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 800f13e:	69fb      	ldr	r3, [r7, #28]
    }
 800f140:	4618      	mov	r0, r3
 800f142:	3720      	adds	r7, #32
 800f144:	46bd      	mov	sp, r7
 800f146:	bd80      	pop	{r7, pc}
 800f148:	0801990c 	.word	0x0801990c

0800f14c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b084      	sub	sp, #16
 800f150:	af00      	add	r7, sp, #0
 800f152:	60f8      	str	r0, [r7, #12]
 800f154:	60b9      	str	r1, [r7, #8]
 800f156:	607a      	str	r2, [r7, #4]
 800f158:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800f15a:	68bb      	ldr	r3, [r7, #8]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d103      	bne.n	800f168 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f160:	69bb      	ldr	r3, [r7, #24]
 800f162:	69ba      	ldr	r2, [r7, #24]
 800f164:	601a      	str	r2, [r3, #0]
 800f166:	e002      	b.n	800f16e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f168:	69bb      	ldr	r3, [r7, #24]
 800f16a:	687a      	ldr	r2, [r7, #4]
 800f16c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800f16e:	69bb      	ldr	r3, [r7, #24]
 800f170:	68fa      	ldr	r2, [r7, #12]
 800f172:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800f174:	69bb      	ldr	r3, [r7, #24]
 800f176:	68ba      	ldr	r2, [r7, #8]
 800f178:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f17a:	2101      	movs	r1, #1
 800f17c:	69b8      	ldr	r0, [r7, #24]
 800f17e:	f7ff fef1 	bl	800ef64 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800f182:	69bb      	ldr	r3, [r7, #24]
 800f184:	78fa      	ldrb	r2, [r7, #3]
 800f186:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800f18a:	bf00      	nop
 800f18c:	3710      	adds	r7, #16
 800f18e:	46bd      	mov	sp, r7
 800f190:	bd80      	pop	{r7, pc}

0800f192 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 800f192:	b580      	push	{r7, lr}
 800f194:	b082      	sub	sp, #8
 800f196:	af00      	add	r7, sp, #0
 800f198:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d00e      	beq.n	800f1be <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	2100      	movs	r1, #0
 800f1b8:	6878      	ldr	r0, [r7, #4]
 800f1ba:	f000 f897 	bl	800f2ec <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 800f1be:	bf00      	nop
 800f1c0:	3708      	adds	r7, #8
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}

0800f1c6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 800f1c6:	b580      	push	{r7, lr}
 800f1c8:	b086      	sub	sp, #24
 800f1ca:	af00      	add	r7, sp, #0
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f1d0:	2301      	movs	r3, #1
 800f1d2:	617b      	str	r3, [r7, #20]
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueCreateMutex( ucQueueType );

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f1d8:	79fb      	ldrb	r3, [r7, #7]
 800f1da:	461a      	mov	r2, r3
 800f1dc:	6939      	ldr	r1, [r7, #16]
 800f1de:	6978      	ldr	r0, [r7, #20]
 800f1e0:	f7ff ff5e 	bl	800f0a0 <xQueueGenericCreate>
 800f1e4:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f1e6:	68f8      	ldr	r0, [r7, #12]
 800f1e8:	f7ff ffd3 	bl	800f192 <prvInitialiseMutex>

        traceRETURN_xQueueCreateMutex( xNewQueue );

        return xNewQueue;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
    }
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3718      	adds	r7, #24
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}
	...

0800f1f8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
    {
 800f1f8:	b590      	push	{r4, r7, lr}
 800f1fa:	b087      	sub	sp, #28
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueGiveMutexRecursive( xMutex );

        configASSERT( pxMutex );
 800f204:	693b      	ldr	r3, [r7, #16]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d110      	bne.n	800f22c <xQueueGiveMutexRecursive+0x34>
    __asm volatile
 800f20a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f20e:	b672      	cpsid	i
 800f210:	f383 8811 	msr	BASEPRI, r3
 800f214:	f3bf 8f6f 	isb	sy
 800f218:	f3bf 8f4f 	dsb	sy
 800f21c:	b662      	cpsie	i
 800f21e:	60fb      	str	r3, [r7, #12]
}
 800f220:	bf00      	nop
 800f222:	f240 21fb 	movw	r1, #763	@ 0x2fb
 800f226:	4811      	ldr	r0, [pc, #68]	@ (800f26c <xQueueGiveMutexRecursive+0x74>)
 800f228:	f7f7 fb0a 	bl	8006840 <vAssertCalled>
         * change outside of this task.  If this task does not hold the mutex then
         * pxMutexHolder can never coincidentally equal the tasks handle, and as
         * this is the only condition we are interested in it does not matter if
         * pxMutexHolder is accessed simultaneously by another task.  Therefore no
         * mutual exclusion is required to test the pxMutexHolder variable. */
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f22c:	693b      	ldr	r3, [r7, #16]
 800f22e:	689c      	ldr	r4, [r3, #8]
 800f230:	f001 ffd2 	bl	80111d8 <xTaskGetCurrentTaskHandle>
 800f234:	4603      	mov	r3, r0
 800f236:	429c      	cmp	r4, r3
 800f238:	d111      	bne.n	800f25e <xQueueGiveMutexRecursive+0x66>
            /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
             * the task handle, therefore no underflow check is required.  Also,
             * uxRecursiveCallCount is only modified by the mutex holder, and as
             * there can only be one, no mutual exclusion is required to modify the
             * uxRecursiveCallCount member. */
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800f23a:	693b      	ldr	r3, [r7, #16]
 800f23c:	68db      	ldr	r3, [r3, #12]
 800f23e:	1e5a      	subs	r2, r3, #1
 800f240:	693b      	ldr	r3, [r7, #16]
 800f242:	60da      	str	r2, [r3, #12]

            /* Has the recursive call count unwound to 0? */
            if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800f244:	693b      	ldr	r3, [r7, #16]
 800f246:	68db      	ldr	r3, [r3, #12]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d105      	bne.n	800f258 <xQueueGiveMutexRecursive+0x60>
            {
                /* Return the mutex.  This will automatically unblock any other
                 * task that might be waiting to access the mutex. */
                ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800f24c:	2300      	movs	r3, #0
 800f24e:	2200      	movs	r2, #0
 800f250:	2100      	movs	r1, #0
 800f252:	6938      	ldr	r0, [r7, #16]
 800f254:	f000 f84a 	bl	800f2ec <xQueueGenericSend>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            xReturn = pdPASS;
 800f258:	2301      	movs	r3, #1
 800f25a:	617b      	str	r3, [r7, #20]
 800f25c:	e001      	b.n	800f262 <xQueueGiveMutexRecursive+0x6a>
        }
        else
        {
            /* The mutex cannot be given because the calling task is not the
             * holder. */
            xReturn = pdFAIL;
 800f25e:	2300      	movs	r3, #0
 800f260:	617b      	str	r3, [r7, #20]
            traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
        }

        traceRETURN_xQueueGiveMutexRecursive( xReturn );

        return xReturn;
 800f262:	697b      	ldr	r3, [r7, #20]
    }
 800f264:	4618      	mov	r0, r3
 800f266:	371c      	adds	r7, #28
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd90      	pop	{r4, r7, pc}
 800f26c:	0801990c 	.word	0x0801990c

0800f270 <xQueueTakeMutexRecursive>:

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
                                         TickType_t xTicksToWait )
    {
 800f270:	b590      	push	{r4, r7, lr}
 800f272:	b087      	sub	sp, #28
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
 800f278:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueTakeMutexRecursive( xMutex, xTicksToWait );

        configASSERT( pxMutex );
 800f27e:	693b      	ldr	r3, [r7, #16]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d110      	bne.n	800f2a6 <xQueueTakeMutexRecursive+0x36>
    __asm volatile
 800f284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f288:	b672      	cpsid	i
 800f28a:	f383 8811 	msr	BASEPRI, r3
 800f28e:	f3bf 8f6f 	isb	sy
 800f292:	f3bf 8f4f 	dsb	sy
 800f296:	b662      	cpsie	i
 800f298:	60fb      	str	r3, [r7, #12]
}
 800f29a:	bf00      	nop
 800f29c:	f240 3137 	movw	r1, #823	@ 0x337
 800f2a0:	4811      	ldr	r0, [pc, #68]	@ (800f2e8 <xQueueTakeMutexRecursive+0x78>)
 800f2a2:	f7f7 facd 	bl	8006840 <vAssertCalled>
        /* Comments regarding mutual exclusion as per those within
         * xQueueGiveMutexRecursive(). */

        traceTAKE_MUTEX_RECURSIVE( pxMutex );

        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f2a6:	693b      	ldr	r3, [r7, #16]
 800f2a8:	689c      	ldr	r4, [r3, #8]
 800f2aa:	f001 ff95 	bl	80111d8 <xTaskGetCurrentTaskHandle>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	429c      	cmp	r4, r3
 800f2b2:	d107      	bne.n	800f2c4 <xQueueTakeMutexRecursive+0x54>
        {
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f2b4:	693b      	ldr	r3, [r7, #16]
 800f2b6:	68db      	ldr	r3, [r3, #12]
 800f2b8:	1c5a      	adds	r2, r3, #1
 800f2ba:	693b      	ldr	r3, [r7, #16]
 800f2bc:	60da      	str	r2, [r3, #12]
            xReturn = pdPASS;
 800f2be:	2301      	movs	r3, #1
 800f2c0:	617b      	str	r3, [r7, #20]
 800f2c2:	e00c      	b.n	800f2de <xQueueTakeMutexRecursive+0x6e>
        }
        else
        {
            xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800f2c4:	6839      	ldr	r1, [r7, #0]
 800f2c6:	6938      	ldr	r0, [r7, #16]
 800f2c8:	f000 fa1c 	bl	800f704 <xQueueSemaphoreTake>
 800f2cc:	6178      	str	r0, [r7, #20]

            /* pdPASS will only be returned if the mutex was successfully
             * obtained.  The calling task may have entered the Blocked state
             * before reaching here. */
            if( xReturn != pdFAIL )
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d004      	beq.n	800f2de <xQueueTakeMutexRecursive+0x6e>
            {
                ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f2d4:	693b      	ldr	r3, [r7, #16]
 800f2d6:	68db      	ldr	r3, [r3, #12]
 800f2d8:	1c5a      	adds	r2, r3, #1
 800f2da:	693b      	ldr	r3, [r7, #16]
 800f2dc:	60da      	str	r2, [r3, #12]
            }
        }

        traceRETURN_xQueueTakeMutexRecursive( xReturn );

        return xReturn;
 800f2de:	697b      	ldr	r3, [r7, #20]
    }
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	371c      	adds	r7, #28
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd90      	pop	{r4, r7, pc}
 800f2e8:	0801990c 	.word	0x0801990c

0800f2ec <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b08e      	sub	sp, #56	@ 0x38
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	60f8      	str	r0, [r7, #12]
 800f2f4:	60b9      	str	r1, [r7, #8]
 800f2f6:	607a      	str	r2, [r7, #4]
 800f2f8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 800f302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f304:	2b00      	cmp	r3, #0
 800f306:	d110      	bne.n	800f32a <xQueueGenericSend+0x3e>
    __asm volatile
 800f308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f30c:	b672      	cpsid	i
 800f30e:	f383 8811 	msr	BASEPRI, r3
 800f312:	f3bf 8f6f 	isb	sy
 800f316:	f3bf 8f4f 	dsb	sy
 800f31a:	b662      	cpsie	i
 800f31c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f31e:	bf00      	nop
 800f320:	f240 31b6 	movw	r1, #950	@ 0x3b6
 800f324:	487b      	ldr	r0, [pc, #492]	@ (800f514 <xQueueGenericSend+0x228>)
 800f326:	f7f7 fa8b 	bl	8006840 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f32a:	68bb      	ldr	r3, [r7, #8]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d103      	bne.n	800f338 <xQueueGenericSend+0x4c>
 800f330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f334:	2b00      	cmp	r3, #0
 800f336:	d101      	bne.n	800f33c <xQueueGenericSend+0x50>
 800f338:	2301      	movs	r3, #1
 800f33a:	e000      	b.n	800f33e <xQueueGenericSend+0x52>
 800f33c:	2300      	movs	r3, #0
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d110      	bne.n	800f364 <xQueueGenericSend+0x78>
    __asm volatile
 800f342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f346:	b672      	cpsid	i
 800f348:	f383 8811 	msr	BASEPRI, r3
 800f34c:	f3bf 8f6f 	isb	sy
 800f350:	f3bf 8f4f 	dsb	sy
 800f354:	b662      	cpsie	i
 800f356:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f358:	bf00      	nop
 800f35a:	f240 31b7 	movw	r1, #951	@ 0x3b7
 800f35e:	486d      	ldr	r0, [pc, #436]	@ (800f514 <xQueueGenericSend+0x228>)
 800f360:	f7f7 fa6e 	bl	8006840 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	2b02      	cmp	r3, #2
 800f368:	d103      	bne.n	800f372 <xQueueGenericSend+0x86>
 800f36a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f36c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f36e:	2b01      	cmp	r3, #1
 800f370:	d101      	bne.n	800f376 <xQueueGenericSend+0x8a>
 800f372:	2301      	movs	r3, #1
 800f374:	e000      	b.n	800f378 <xQueueGenericSend+0x8c>
 800f376:	2300      	movs	r3, #0
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d110      	bne.n	800f39e <xQueueGenericSend+0xb2>
    __asm volatile
 800f37c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f380:	b672      	cpsid	i
 800f382:	f383 8811 	msr	BASEPRI, r3
 800f386:	f3bf 8f6f 	isb	sy
 800f38a:	f3bf 8f4f 	dsb	sy
 800f38e:	b662      	cpsie	i
 800f390:	623b      	str	r3, [r7, #32]
}
 800f392:	bf00      	nop
 800f394:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
 800f398:	485e      	ldr	r0, [pc, #376]	@ (800f514 <xQueueGenericSend+0x228>)
 800f39a:	f7f7 fa51 	bl	8006840 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f39e:	f001 ff2b 	bl	80111f8 <xTaskGetSchedulerState>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d102      	bne.n	800f3ae <xQueueGenericSend+0xc2>
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d101      	bne.n	800f3b2 <xQueueGenericSend+0xc6>
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	e000      	b.n	800f3b4 <xQueueGenericSend+0xc8>
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d110      	bne.n	800f3da <xQueueGenericSend+0xee>
    __asm volatile
 800f3b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3bc:	b672      	cpsid	i
 800f3be:	f383 8811 	msr	BASEPRI, r3
 800f3c2:	f3bf 8f6f 	isb	sy
 800f3c6:	f3bf 8f4f 	dsb	sy
 800f3ca:	b662      	cpsie	i
 800f3cc:	61fb      	str	r3, [r7, #28]
}
 800f3ce:	bf00      	nop
 800f3d0:	f240 31bb 	movw	r1, #955	@ 0x3bb
 800f3d4:	484f      	ldr	r0, [pc, #316]	@ (800f514 <xQueueGenericSend+0x228>)
 800f3d6:	f7f7 fa33 	bl	8006840 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800f3da:	f002 fde9 	bl	8011fb0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f3e6:	429a      	cmp	r2, r3
 800f3e8:	d302      	bcc.n	800f3f0 <xQueueGenericSend+0x104>
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	2b02      	cmp	r3, #2
 800f3ee:	d129      	bne.n	800f444 <xQueueGenericSend+0x158>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f3f0:	683a      	ldr	r2, [r7, #0]
 800f3f2:	68b9      	ldr	r1, [r7, #8]
 800f3f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f3f6:	f000 fad3 	bl	800f9a0 <prvCopyDataToQueue>
 800f3fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f3fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f400:	2b00      	cmp	r3, #0
 800f402:	d010      	beq.n	800f426 <xQueueGenericSend+0x13a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f406:	3324      	adds	r3, #36	@ 0x24
 800f408:	4618      	mov	r0, r3
 800f40a:	f001 fbd9 	bl	8010bc0 <xTaskRemoveFromEventList>
 800f40e:	4603      	mov	r3, r0
 800f410:	2b00      	cmp	r3, #0
 800f412:	d013      	beq.n	800f43c <xQueueGenericSend+0x150>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800f414:	4b40      	ldr	r3, [pc, #256]	@ (800f518 <xQueueGenericSend+0x22c>)
 800f416:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f41a:	601a      	str	r2, [r3, #0]
 800f41c:	f3bf 8f4f 	dsb	sy
 800f420:	f3bf 8f6f 	isb	sy
 800f424:	e00a      	b.n	800f43c <xQueueGenericSend+0x150>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800f426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d007      	beq.n	800f43c <xQueueGenericSend+0x150>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800f42c:	4b3a      	ldr	r3, [pc, #232]	@ (800f518 <xQueueGenericSend+0x22c>)
 800f42e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f432:	601a      	str	r2, [r3, #0]
 800f434:	f3bf 8f4f 	dsb	sy
 800f438:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800f43c:	f002 fdf0 	bl	8012020 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 800f440:	2301      	movs	r3, #1
 800f442:	e063      	b.n	800f50c <xQueueGenericSend+0x220>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d103      	bne.n	800f452 <xQueueGenericSend+0x166>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800f44a:	f002 fde9 	bl	8012020 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 800f44e:	2300      	movs	r3, #0
 800f450:	e05c      	b.n	800f50c <xQueueGenericSend+0x220>
                }
                else if( xEntryTimeSet == pdFALSE )
 800f452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f454:	2b00      	cmp	r3, #0
 800f456:	d106      	bne.n	800f466 <xQueueGenericSend+0x17a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800f458:	f107 0314 	add.w	r3, r7, #20
 800f45c:	4618      	mov	r0, r3
 800f45e:	f001 fc8d 	bl	8010d7c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800f462:	2301      	movs	r3, #1
 800f464:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800f466:	f002 fddb 	bl	8012020 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800f46a:	f000 ffa1 	bl	80103b0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800f46e:	f002 fd9f 	bl	8011fb0 <vPortEnterCritical>
 800f472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f474:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f478:	b25b      	sxtb	r3, r3
 800f47a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f47e:	d103      	bne.n	800f488 <xQueueGenericSend+0x19c>
 800f480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f482:	2200      	movs	r2, #0
 800f484:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f48a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f48e:	b25b      	sxtb	r3, r3
 800f490:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f494:	d103      	bne.n	800f49e <xQueueGenericSend+0x1b2>
 800f496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f498:	2200      	movs	r2, #0
 800f49a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f49e:	f002 fdbf 	bl	8012020 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f4a2:	1d3a      	adds	r2, r7, #4
 800f4a4:	f107 0314 	add.w	r3, r7, #20
 800f4a8:	4611      	mov	r1, r2
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f001 fc7c 	bl	8010da8 <xTaskCheckForTimeOut>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d124      	bne.n	800f500 <xQueueGenericSend+0x214>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f4b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f4b8:	f000 fb6a 	bl	800fb90 <prvIsQueueFull>
 800f4bc:	4603      	mov	r3, r0
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d018      	beq.n	800f4f4 <xQueueGenericSend+0x208>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f4c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4c4:	3310      	adds	r3, #16
 800f4c6:	687a      	ldr	r2, [r7, #4]
 800f4c8:	4611      	mov	r1, r2
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	f001 fafe 	bl	8010acc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800f4d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f4d2:	f000 faf5 	bl	800fac0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800f4d6:	f000 ff79 	bl	80103cc <xTaskResumeAll>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	f47f af7c 	bne.w	800f3da <xQueueGenericSend+0xee>
                {
                    taskYIELD_WITHIN_API();
 800f4e2:	4b0d      	ldr	r3, [pc, #52]	@ (800f518 <xQueueGenericSend+0x22c>)
 800f4e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f4e8:	601a      	str	r2, [r3, #0]
 800f4ea:	f3bf 8f4f 	dsb	sy
 800f4ee:	f3bf 8f6f 	isb	sy
 800f4f2:	e772      	b.n	800f3da <xQueueGenericSend+0xee>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800f4f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f4f6:	f000 fae3 	bl	800fac0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800f4fa:	f000 ff67 	bl	80103cc <xTaskResumeAll>
 800f4fe:	e76c      	b.n	800f3da <xQueueGenericSend+0xee>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800f500:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f502:	f000 fadd 	bl	800fac0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800f506:	f000 ff61 	bl	80103cc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 800f50a:	2300      	movs	r3, #0
        }
    }
}
 800f50c:	4618      	mov	r0, r3
 800f50e:	3738      	adds	r7, #56	@ 0x38
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}
 800f514:	0801990c 	.word	0x0801990c
 800f518:	e000ed04 	.word	0xe000ed04

0800f51c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b08c      	sub	sp, #48	@ 0x30
 800f520:	af00      	add	r7, sp, #0
 800f522:	60f8      	str	r0, [r7, #12]
 800f524:	60b9      	str	r1, [r7, #8]
 800f526:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800f528:	2300      	movs	r3, #0
 800f52a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800f530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f532:	2b00      	cmp	r3, #0
 800f534:	d110      	bne.n	800f558 <xQueueReceive+0x3c>
    __asm volatile
 800f536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f53a:	b672      	cpsid	i
 800f53c:	f383 8811 	msr	BASEPRI, r3
 800f540:	f3bf 8f6f 	isb	sy
 800f544:	f3bf 8f4f 	dsb	sy
 800f548:	b662      	cpsie	i
 800f54a:	623b      	str	r3, [r7, #32]
}
 800f54c:	bf00      	nop
 800f54e:	f240 51e9 	movw	r1, #1513	@ 0x5e9
 800f552:	486a      	ldr	r0, [pc, #424]	@ (800f6fc <xQueueReceive+0x1e0>)
 800f554:	f7f7 f974 	bl	8006840 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f558:	68bb      	ldr	r3, [r7, #8]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d103      	bne.n	800f566 <xQueueReceive+0x4a>
 800f55e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f562:	2b00      	cmp	r3, #0
 800f564:	d101      	bne.n	800f56a <xQueueReceive+0x4e>
 800f566:	2301      	movs	r3, #1
 800f568:	e000      	b.n	800f56c <xQueueReceive+0x50>
 800f56a:	2300      	movs	r3, #0
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d110      	bne.n	800f592 <xQueueReceive+0x76>
    __asm volatile
 800f570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f574:	b672      	cpsid	i
 800f576:	f383 8811 	msr	BASEPRI, r3
 800f57a:	f3bf 8f6f 	isb	sy
 800f57e:	f3bf 8f4f 	dsb	sy
 800f582:	b662      	cpsie	i
 800f584:	61fb      	str	r3, [r7, #28]
}
 800f586:	bf00      	nop
 800f588:	f240 51ed 	movw	r1, #1517	@ 0x5ed
 800f58c:	485b      	ldr	r0, [pc, #364]	@ (800f6fc <xQueueReceive+0x1e0>)
 800f58e:	f7f7 f957 	bl	8006840 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f592:	f001 fe31 	bl	80111f8 <xTaskGetSchedulerState>
 800f596:	4603      	mov	r3, r0
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d102      	bne.n	800f5a2 <xQueueReceive+0x86>
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d101      	bne.n	800f5a6 <xQueueReceive+0x8a>
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	e000      	b.n	800f5a8 <xQueueReceive+0x8c>
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d110      	bne.n	800f5ce <xQueueReceive+0xb2>
    __asm volatile
 800f5ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5b0:	b672      	cpsid	i
 800f5b2:	f383 8811 	msr	BASEPRI, r3
 800f5b6:	f3bf 8f6f 	isb	sy
 800f5ba:	f3bf 8f4f 	dsb	sy
 800f5be:	b662      	cpsie	i
 800f5c0:	61bb      	str	r3, [r7, #24]
}
 800f5c2:	bf00      	nop
 800f5c4:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 800f5c8:	484c      	ldr	r0, [pc, #304]	@ (800f6fc <xQueueReceive+0x1e0>)
 800f5ca:	f7f7 f939 	bl	8006840 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800f5ce:	f002 fcef 	bl	8011fb0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f5d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5d6:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d01f      	beq.n	800f61e <xQueueReceive+0x102>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f5de:	68b9      	ldr	r1, [r7, #8]
 800f5e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f5e2:	f000 fa47 	bl	800fa74 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 800f5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5e8:	1e5a      	subs	r2, r3, #1
 800f5ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5ec:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f5ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5f0:	691b      	ldr	r3, [r3, #16]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d00f      	beq.n	800f616 <xQueueReceive+0xfa>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f5f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5f8:	3310      	adds	r3, #16
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f001 fae0 	bl	8010bc0 <xTaskRemoveFromEventList>
 800f600:	4603      	mov	r3, r0
 800f602:	2b00      	cmp	r3, #0
 800f604:	d007      	beq.n	800f616 <xQueueReceive+0xfa>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800f606:	4b3e      	ldr	r3, [pc, #248]	@ (800f700 <xQueueReceive+0x1e4>)
 800f608:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f60c:	601a      	str	r2, [r3, #0]
 800f60e:	f3bf 8f4f 	dsb	sy
 800f612:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800f616:	f002 fd03 	bl	8012020 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 800f61a:	2301      	movs	r3, #1
 800f61c:	e069      	b.n	800f6f2 <xQueueReceive+0x1d6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d103      	bne.n	800f62c <xQueueReceive+0x110>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800f624:	f002 fcfc 	bl	8012020 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 800f628:	2300      	movs	r3, #0
 800f62a:	e062      	b.n	800f6f2 <xQueueReceive+0x1d6>
                }
                else if( xEntryTimeSet == pdFALSE )
 800f62c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d106      	bne.n	800f640 <xQueueReceive+0x124>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800f632:	f107 0310 	add.w	r3, r7, #16
 800f636:	4618      	mov	r0, r3
 800f638:	f001 fba0 	bl	8010d7c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800f63c:	2301      	movs	r3, #1
 800f63e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800f640:	f002 fcee 	bl	8012020 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800f644:	f000 feb4 	bl	80103b0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800f648:	f002 fcb2 	bl	8011fb0 <vPortEnterCritical>
 800f64c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f64e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f652:	b25b      	sxtb	r3, r3
 800f654:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f658:	d103      	bne.n	800f662 <xQueueReceive+0x146>
 800f65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f65c:	2200      	movs	r2, #0
 800f65e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f664:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f668:	b25b      	sxtb	r3, r3
 800f66a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f66e:	d103      	bne.n	800f678 <xQueueReceive+0x15c>
 800f670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f672:	2200      	movs	r2, #0
 800f674:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f678:	f002 fcd2 	bl	8012020 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f67c:	1d3a      	adds	r2, r7, #4
 800f67e:	f107 0310 	add.w	r3, r7, #16
 800f682:	4611      	mov	r1, r2
 800f684:	4618      	mov	r0, r3
 800f686:	f001 fb8f 	bl	8010da8 <xTaskCheckForTimeOut>
 800f68a:	4603      	mov	r3, r0
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d123      	bne.n	800f6d8 <xQueueReceive+0x1bc>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f690:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f692:	f000 fa67 	bl	800fb64 <prvIsQueueEmpty>
 800f696:	4603      	mov	r3, r0
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d017      	beq.n	800f6cc <xQueueReceive+0x1b0>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f69c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f69e:	3324      	adds	r3, #36	@ 0x24
 800f6a0:	687a      	ldr	r2, [r7, #4]
 800f6a2:	4611      	mov	r1, r2
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f001 fa11 	bl	8010acc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800f6aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f6ac:	f000 fa08 	bl	800fac0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800f6b0:	f000 fe8c 	bl	80103cc <xTaskResumeAll>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d189      	bne.n	800f5ce <xQueueReceive+0xb2>
                {
                    taskYIELD_WITHIN_API();
 800f6ba:	4b11      	ldr	r3, [pc, #68]	@ (800f700 <xQueueReceive+0x1e4>)
 800f6bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f6c0:	601a      	str	r2, [r3, #0]
 800f6c2:	f3bf 8f4f 	dsb	sy
 800f6c6:	f3bf 8f6f 	isb	sy
 800f6ca:	e780      	b.n	800f5ce <xQueueReceive+0xb2>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800f6cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f6ce:	f000 f9f7 	bl	800fac0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800f6d2:	f000 fe7b 	bl	80103cc <xTaskResumeAll>
 800f6d6:	e77a      	b.n	800f5ce <xQueueReceive+0xb2>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800f6d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f6da:	f000 f9f1 	bl	800fac0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800f6de:	f000 fe75 	bl	80103cc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f6e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f6e4:	f000 fa3e 	bl	800fb64 <prvIsQueueEmpty>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	f43f af6f 	beq.w	800f5ce <xQueueReceive+0xb2>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 800f6f0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	3730      	adds	r7, #48	@ 0x30
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bd80      	pop	{r7, pc}
 800f6fa:	bf00      	nop
 800f6fc:	0801990c 	.word	0x0801990c
 800f700:	e000ed04 	.word	0xe000ed04

0800f704 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b08c      	sub	sp, #48	@ 0x30
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800f70e:	2300      	movs	r3, #0
 800f710:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800f716:	2300      	movs	r3, #0
 800f718:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800f71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d110      	bne.n	800f742 <xQueueSemaphoreTake+0x3e>
    __asm volatile
 800f720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f724:	b672      	cpsid	i
 800f726:	f383 8811 	msr	BASEPRI, r3
 800f72a:	f3bf 8f6f 	isb	sy
 800f72e:	f3bf 8f4f 	dsb	sy
 800f732:	b662      	cpsie	i
 800f734:	61bb      	str	r3, [r7, #24]
}
 800f736:	bf00      	nop
 800f738:	f240 6182 	movw	r1, #1666	@ 0x682
 800f73c:	4878      	ldr	r0, [pc, #480]	@ (800f920 <xQueueSemaphoreTake+0x21c>)
 800f73e:	f7f7 f87f 	bl	8006840 <vAssertCalled>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800f742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f746:	2b00      	cmp	r3, #0
 800f748:	d010      	beq.n	800f76c <xQueueSemaphoreTake+0x68>
    __asm volatile
 800f74a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f74e:	b672      	cpsid	i
 800f750:	f383 8811 	msr	BASEPRI, r3
 800f754:	f3bf 8f6f 	isb	sy
 800f758:	f3bf 8f4f 	dsb	sy
 800f75c:	b662      	cpsie	i
 800f75e:	617b      	str	r3, [r7, #20]
}
 800f760:	bf00      	nop
 800f762:	f240 6186 	movw	r1, #1670	@ 0x686
 800f766:	486e      	ldr	r0, [pc, #440]	@ (800f920 <xQueueSemaphoreTake+0x21c>)
 800f768:	f7f7 f86a 	bl	8006840 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f76c:	f001 fd44 	bl	80111f8 <xTaskGetSchedulerState>
 800f770:	4603      	mov	r3, r0
 800f772:	2b00      	cmp	r3, #0
 800f774:	d102      	bne.n	800f77c <xQueueSemaphoreTake+0x78>
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d101      	bne.n	800f780 <xQueueSemaphoreTake+0x7c>
 800f77c:	2301      	movs	r3, #1
 800f77e:	e000      	b.n	800f782 <xQueueSemaphoreTake+0x7e>
 800f780:	2300      	movs	r3, #0
 800f782:	2b00      	cmp	r3, #0
 800f784:	d110      	bne.n	800f7a8 <xQueueSemaphoreTake+0xa4>
    __asm volatile
 800f786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f78a:	b672      	cpsid	i
 800f78c:	f383 8811 	msr	BASEPRI, r3
 800f790:	f3bf 8f6f 	isb	sy
 800f794:	f3bf 8f4f 	dsb	sy
 800f798:	b662      	cpsie	i
 800f79a:	613b      	str	r3, [r7, #16]
}
 800f79c:	bf00      	nop
 800f79e:	f240 618b 	movw	r1, #1675	@ 0x68b
 800f7a2:	485f      	ldr	r0, [pc, #380]	@ (800f920 <xQueueSemaphoreTake+0x21c>)
 800f7a4:	f7f7 f84c 	bl	8006840 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800f7a8:	f002 fc02 	bl	8011fb0 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f7ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7b0:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f7b2:	6a3b      	ldr	r3, [r7, #32]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d024      	beq.n	800f802 <xQueueSemaphoreTake+0xfe>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 800f7b8:	6a3b      	ldr	r3, [r7, #32]
 800f7ba:	1e5a      	subs	r2, r3, #1
 800f7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7be:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f7c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d104      	bne.n	800f7d2 <xQueueSemaphoreTake+0xce>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f7c8:	f001 ff52 	bl	8011670 <pvTaskIncrementMutexHeldCount>
 800f7cc:	4602      	mov	r2, r0
 800f7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7d0:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7d4:	691b      	ldr	r3, [r3, #16]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d00f      	beq.n	800f7fa <xQueueSemaphoreTake+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7dc:	3310      	adds	r3, #16
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f001 f9ee 	bl	8010bc0 <xTaskRemoveFromEventList>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d007      	beq.n	800f7fa <xQueueSemaphoreTake+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800f7ea:	4b4e      	ldr	r3, [pc, #312]	@ (800f924 <xQueueSemaphoreTake+0x220>)
 800f7ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f7f0:	601a      	str	r2, [r3, #0]
 800f7f2:	f3bf 8f4f 	dsb	sy
 800f7f6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800f7fa:	f002 fc11 	bl	8012020 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 800f7fe:	2301      	movs	r3, #1
 800f800:	e089      	b.n	800f916 <xQueueSemaphoreTake+0x212>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d103      	bne.n	800f810 <xQueueSemaphoreTake+0x10c>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800f808:	f002 fc0a 	bl	8012020 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 800f80c:	2300      	movs	r3, #0
 800f80e:	e082      	b.n	800f916 <xQueueSemaphoreTake+0x212>
                }
                else if( xEntryTimeSet == pdFALSE )
 800f810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f812:	2b00      	cmp	r3, #0
 800f814:	d106      	bne.n	800f824 <xQueueSemaphoreTake+0x120>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800f816:	f107 0308 	add.w	r3, r7, #8
 800f81a:	4618      	mov	r0, r3
 800f81c:	f001 faae 	bl	8010d7c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800f820:	2301      	movs	r3, #1
 800f822:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800f824:	f002 fbfc 	bl	8012020 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800f828:	f000 fdc2 	bl	80103b0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800f82c:	f002 fbc0 	bl	8011fb0 <vPortEnterCritical>
 800f830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f832:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f836:	b25b      	sxtb	r3, r3
 800f838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f83c:	d103      	bne.n	800f846 <xQueueSemaphoreTake+0x142>
 800f83e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f840:	2200      	movs	r2, #0
 800f842:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f848:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f84c:	b25b      	sxtb	r3, r3
 800f84e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f852:	d103      	bne.n	800f85c <xQueueSemaphoreTake+0x158>
 800f854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f856:	2200      	movs	r2, #0
 800f858:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f85c:	f002 fbe0 	bl	8012020 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f860:	463a      	mov	r2, r7
 800f862:	f107 0308 	add.w	r3, r7, #8
 800f866:	4611      	mov	r1, r2
 800f868:	4618      	mov	r0, r3
 800f86a:	f001 fa9d 	bl	8010da8 <xTaskCheckForTimeOut>
 800f86e:	4603      	mov	r3, r0
 800f870:	2b00      	cmp	r3, #0
 800f872:	d132      	bne.n	800f8da <xQueueSemaphoreTake+0x1d6>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f874:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f876:	f000 f975 	bl	800fb64 <prvIsQueueEmpty>
 800f87a:	4603      	mov	r3, r0
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d026      	beq.n	800f8ce <xQueueSemaphoreTake+0x1ca>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d109      	bne.n	800f89c <xQueueSemaphoreTake+0x198>
                    {
                        taskENTER_CRITICAL();
 800f888:	f002 fb92 	bl	8011fb0 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f88e:	689b      	ldr	r3, [r3, #8]
 800f890:	4618      	mov	r0, r3
 800f892:	f001 fccf 	bl	8011234 <xTaskPriorityInherit>
 800f896:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 800f898:	f002 fbc2 	bl	8012020 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f89c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f89e:	3324      	adds	r3, #36	@ 0x24
 800f8a0:	683a      	ldr	r2, [r7, #0]
 800f8a2:	4611      	mov	r1, r2
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	f001 f911 	bl	8010acc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800f8aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f8ac:	f000 f908 	bl	800fac0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800f8b0:	f000 fd8c 	bl	80103cc <xTaskResumeAll>
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	f47f af76 	bne.w	800f7a8 <xQueueSemaphoreTake+0xa4>
                {
                    taskYIELD_WITHIN_API();
 800f8bc:	4b19      	ldr	r3, [pc, #100]	@ (800f924 <xQueueSemaphoreTake+0x220>)
 800f8be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f8c2:	601a      	str	r2, [r3, #0]
 800f8c4:	f3bf 8f4f 	dsb	sy
 800f8c8:	f3bf 8f6f 	isb	sy
 800f8cc:	e76c      	b.n	800f7a8 <xQueueSemaphoreTake+0xa4>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800f8ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f8d0:	f000 f8f6 	bl	800fac0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800f8d4:	f000 fd7a 	bl	80103cc <xTaskResumeAll>
 800f8d8:	e766      	b.n	800f7a8 <xQueueSemaphoreTake+0xa4>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800f8da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f8dc:	f000 f8f0 	bl	800fac0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800f8e0:	f000 fd74 	bl	80103cc <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f8e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f8e6:	f000 f93d 	bl	800fb64 <prvIsQueueEmpty>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	f43f af5b 	beq.w	800f7a8 <xQueueSemaphoreTake+0xa4>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 800f8f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d00d      	beq.n	800f914 <xQueueSemaphoreTake+0x210>
                    {
                        taskENTER_CRITICAL();
 800f8f8:	f002 fb5a 	bl	8011fb0 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f8fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f8fe:	f000 f837 	bl	800f970 <prvGetDisinheritPriorityAfterTimeout>
 800f902:	61f8      	str	r0, [r7, #28]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f906:	689b      	ldr	r3, [r3, #8]
 800f908:	69f9      	ldr	r1, [r7, #28]
 800f90a:	4618      	mov	r0, r3
 800f90c:	f001 fde6 	bl	80114dc <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 800f910:	f002 fb86 	bl	8012020 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 800f914:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 800f916:	4618      	mov	r0, r3
 800f918:	3730      	adds	r7, #48	@ 0x30
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}
 800f91e:	bf00      	nop
 800f920:	0801990c 	.word	0x0801990c
 800f924:	e000ed04 	.word	0xe000ed04

0800f928 <vQueueDelete>:
    return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b084      	sub	sp, #16
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	60fb      	str	r3, [r7, #12]

    traceENTER_vQueueDelete( xQueue );

    configASSERT( pxQueue );
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d110      	bne.n	800f95c <vQueueDelete+0x34>
    __asm volatile
 800f93a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f93e:	b672      	cpsid	i
 800f940:	f383 8811 	msr	BASEPRI, r3
 800f944:	f3bf 8f6f 	isb	sy
 800f948:	f3bf 8f4f 	dsb	sy
 800f94c:	b662      	cpsie	i
 800f94e:	60bb      	str	r3, [r7, #8]
}
 800f950:	bf00      	nop
 800f952:	f640 01d4 	movw	r1, #2260	@ 0x8d4
 800f956:	4805      	ldr	r0, [pc, #20]	@ (800f96c <vQueueDelete+0x44>)
 800f958:	f7f6 ff72 	bl	8006840 <vAssertCalled>

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
    {
        /* The queue can only have been allocated dynamically - free it
         * again. */
        vPortFree( pxQueue );
 800f95c:	68f8      	ldr	r0, [r7, #12]
 800f95e:	f7f7 fae5 	bl	8006f2c <vPortFree>
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

    traceRETURN_vQueueDelete();
}
 800f962:	bf00      	nop
 800f964:	3710      	adds	r7, #16
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}
 800f96a:	bf00      	nop
 800f96c:	0801990c 	.word	0x0801990c

0800f970 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800f970:	b480      	push	{r7}
 800f972:	b085      	sub	sp, #20
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d006      	beq.n	800f98e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	f1c3 0307 	rsb	r3, r3, #7
 800f98a:	60fb      	str	r3, [r7, #12]
 800f98c:	e001      	b.n	800f992 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f98e:	2300      	movs	r3, #0
 800f990:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800f992:	68fb      	ldr	r3, [r7, #12]
    }
 800f994:	4618      	mov	r0, r3
 800f996:	3714      	adds	r7, #20
 800f998:	46bd      	mov	sp, r7
 800f99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99e:	4770      	bx	lr

0800f9a0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b086      	sub	sp, #24
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	60f8      	str	r0, [r7, #12]
 800f9a8:	60b9      	str	r1, [r7, #8]
 800f9aa:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9b4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d10d      	bne.n	800f9da <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d14d      	bne.n	800fa62 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	689b      	ldr	r3, [r3, #8]
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	f001 fcd2 	bl	8011374 <xTaskPriorityDisinherit>
 800f9d0:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	609a      	str	r2, [r3, #8]
 800f9d8:	e043      	b.n	800fa62 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d119      	bne.n	800fa14 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	6858      	ldr	r0, [r3, #4]
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9e8:	461a      	mov	r2, r3
 800f9ea:	68b9      	ldr	r1, [r7, #8]
 800f9ec:	f005 f8be 	bl	8014b6c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	685a      	ldr	r2, [r3, #4]
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9f8:	441a      	add	r2, r3
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	685a      	ldr	r2, [r3, #4]
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	689b      	ldr	r3, [r3, #8]
 800fa06:	429a      	cmp	r2, r3
 800fa08:	d32b      	bcc.n	800fa62 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	681a      	ldr	r2, [r3, #0]
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	605a      	str	r2, [r3, #4]
 800fa12:	e026      	b.n	800fa62 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	68d8      	ldr	r0, [r3, #12]
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa1c:	461a      	mov	r2, r3
 800fa1e:	68b9      	ldr	r1, [r7, #8]
 800fa20:	f005 f8a4 	bl	8014b6c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	68da      	ldr	r2, [r3, #12]
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa2c:	425b      	negs	r3, r3
 800fa2e:	441a      	add	r2, r3
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	68da      	ldr	r2, [r3, #12]
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	429a      	cmp	r2, r3
 800fa3e:	d207      	bcs.n	800fa50 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	689a      	ldr	r2, [r3, #8]
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa48:	425b      	negs	r3, r3
 800fa4a:	441a      	add	r2, r3
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2b02      	cmp	r3, #2
 800fa54:	d105      	bne.n	800fa62 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fa56:	693b      	ldr	r3, [r7, #16]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d002      	beq.n	800fa62 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800fa5c:	693b      	ldr	r3, [r7, #16]
 800fa5e:	3b01      	subs	r3, #1
 800fa60:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800fa62:	693b      	ldr	r3, [r7, #16]
 800fa64:	1c5a      	adds	r2, r3, #1
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800fa6a:	697b      	ldr	r3, [r7, #20]
}
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	3718      	adds	r7, #24
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}

0800fa74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b082      	sub	sp, #8
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d018      	beq.n	800fab8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	68da      	ldr	r2, [r3, #12]
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa8e:	441a      	add	r2, r3
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	68da      	ldr	r2, [r3, #12]
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	689b      	ldr	r3, [r3, #8]
 800fa9c:	429a      	cmp	r2, r3
 800fa9e:	d303      	bcc.n	800faa8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681a      	ldr	r2, [r3, #0]
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	68d9      	ldr	r1, [r3, #12]
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fab0:	461a      	mov	r2, r3
 800fab2:	6838      	ldr	r0, [r7, #0]
 800fab4:	f005 f85a 	bl	8014b6c <memcpy>
    }
}
 800fab8:	bf00      	nop
 800faba:	3708      	adds	r7, #8
 800fabc:	46bd      	mov	sp, r7
 800fabe:	bd80      	pop	{r7, pc}

0800fac0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b084      	sub	sp, #16
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800fac8:	f002 fa72 	bl	8011fb0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fad2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800fad4:	e011      	b.n	800fafa <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d012      	beq.n	800fb04 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	3324      	adds	r3, #36	@ 0x24
 800fae2:	4618      	mov	r0, r3
 800fae4:	f001 f86c 	bl	8010bc0 <xTaskRemoveFromEventList>
 800fae8:	4603      	mov	r3, r0
 800faea:	2b00      	cmp	r3, #0
 800faec:	d001      	beq.n	800faf2 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800faee:	f001 f9cf 	bl	8010e90 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800faf2:	7bfb      	ldrb	r3, [r7, #15]
 800faf4:	3b01      	subs	r3, #1
 800faf6:	b2db      	uxtb	r3, r3
 800faf8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800fafa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	dce9      	bgt.n	800fad6 <prvUnlockQueue+0x16>
 800fb02:	e000      	b.n	800fb06 <prvUnlockQueue+0x46>
                    break;
 800fb04:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	22ff      	movs	r2, #255	@ 0xff
 800fb0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800fb0e:	f002 fa87 	bl	8012020 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800fb12:	f002 fa4d 	bl	8011fb0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fb1c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800fb1e:	e011      	b.n	800fb44 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	691b      	ldr	r3, [r3, #16]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d012      	beq.n	800fb4e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	3310      	adds	r3, #16
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	f001 f847 	bl	8010bc0 <xTaskRemoveFromEventList>
 800fb32:	4603      	mov	r3, r0
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d001      	beq.n	800fb3c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800fb38:	f001 f9aa 	bl	8010e90 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800fb3c:	7bbb      	ldrb	r3, [r7, #14]
 800fb3e:	3b01      	subs	r3, #1
 800fb40:	b2db      	uxtb	r3, r3
 800fb42:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800fb44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	dce9      	bgt.n	800fb20 <prvUnlockQueue+0x60>
 800fb4c:	e000      	b.n	800fb50 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800fb4e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	22ff      	movs	r2, #255	@ 0xff
 800fb54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800fb58:	f002 fa62 	bl	8012020 <vPortExitCritical>
}
 800fb5c:	bf00      	nop
 800fb5e:	3710      	adds	r7, #16
 800fb60:	46bd      	mov	sp, r7
 800fb62:	bd80      	pop	{r7, pc}

0800fb64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b084      	sub	sp, #16
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800fb6c:	f002 fa20 	bl	8011fb0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d102      	bne.n	800fb7e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800fb78:	2301      	movs	r3, #1
 800fb7a:	60fb      	str	r3, [r7, #12]
 800fb7c:	e001      	b.n	800fb82 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800fb7e:	2300      	movs	r3, #0
 800fb80:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800fb82:	f002 fa4d 	bl	8012020 <vPortExitCritical>

    return xReturn;
 800fb86:	68fb      	ldr	r3, [r7, #12]
}
 800fb88:	4618      	mov	r0, r3
 800fb8a:	3710      	adds	r7, #16
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bd80      	pop	{r7, pc}

0800fb90 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b084      	sub	sp, #16
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800fb98:	f002 fa0a 	bl	8011fb0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fba4:	429a      	cmp	r2, r3
 800fba6:	d102      	bne.n	800fbae <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800fba8:	2301      	movs	r3, #1
 800fbaa:	60fb      	str	r3, [r7, #12]
 800fbac:	e001      	b.n	800fbb2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800fbae:	2300      	movs	r3, #0
 800fbb0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800fbb2:	f002 fa35 	bl	8012020 <vPortExitCritical>

    return xReturn;
 800fbb6:	68fb      	ldr	r3, [r7, #12]
}
 800fbb8:	4618      	mov	r0, r3
 800fbba:	3710      	adds	r7, #16
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	bd80      	pop	{r7, pc}

0800fbc0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b086      	sub	sp, #24
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	60f8      	str	r0, [r7, #12]
 800fbc8:	60b9      	str	r1, [r7, #8]
 800fbca:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800fbd0:	f002 f9ee 	bl	8011fb0 <vPortEnterCritical>
 800fbd4:	697b      	ldr	r3, [r7, #20]
 800fbd6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fbda:	b25b      	sxtb	r3, r3
 800fbdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbe0:	d103      	bne.n	800fbea <vQueueWaitForMessageRestricted+0x2a>
 800fbe2:	697b      	ldr	r3, [r7, #20]
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fbea:	697b      	ldr	r3, [r7, #20]
 800fbec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fbf0:	b25b      	sxtb	r3, r3
 800fbf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbf6:	d103      	bne.n	800fc00 <vQueueWaitForMessageRestricted+0x40>
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fc00:	f002 fa0e 	bl	8012020 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fc04:	697b      	ldr	r3, [r7, #20]
 800fc06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d106      	bne.n	800fc1a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	3324      	adds	r3, #36	@ 0x24
 800fc10:	687a      	ldr	r2, [r7, #4]
 800fc12:	68b9      	ldr	r1, [r7, #8]
 800fc14:	4618      	mov	r0, r3
 800fc16:	f000 ff85 	bl	8010b24 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800fc1a:	6978      	ldr	r0, [r7, #20]
 800fc1c:	f7ff ff50 	bl	800fac0 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 800fc20:	bf00      	nop
 800fc22:	3718      	adds	r7, #24
 800fc24:	46bd      	mov	sp, r7
 800fc26:	bd80      	pop	{r7, pc}

0800fc28 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b08a      	sub	sp, #40	@ 0x28
 800fc2c:	af04      	add	r7, sp, #16
 800fc2e:	60f8      	str	r0, [r7, #12]
 800fc30:	60b9      	str	r1, [r7, #8]
 800fc32:	607a      	str	r2, [r7, #4]
 800fc34:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	009b      	lsls	r3, r3, #2
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f7f7 f968 	bl	8006f10 <pvPortMalloc>
 800fc40:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 800fc42:	693b      	ldr	r3, [r7, #16]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d013      	beq.n	800fc70 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800fc48:	20b0      	movs	r0, #176	@ 0xb0
 800fc4a:	f7f7 f961 	bl	8006f10 <pvPortMalloc>
 800fc4e:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 800fc50:	697b      	ldr	r3, [r7, #20]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d008      	beq.n	800fc68 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800fc56:	22b0      	movs	r2, #176	@ 0xb0
 800fc58:	2100      	movs	r1, #0
 800fc5a:	6978      	ldr	r0, [r7, #20]
 800fc5c:	f004 fe20 	bl	80148a0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800fc60:	697b      	ldr	r3, [r7, #20]
 800fc62:	693a      	ldr	r2, [r7, #16]
 800fc64:	631a      	str	r2, [r3, #48]	@ 0x30
 800fc66:	e005      	b.n	800fc74 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800fc68:	6938      	ldr	r0, [r7, #16]
 800fc6a:	f7f7 f95f 	bl	8006f2c <vPortFree>
 800fc6e:	e001      	b.n	800fc74 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800fc70:	2300      	movs	r3, #0
 800fc72:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800fc74:	697b      	ldr	r3, [r7, #20]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d00d      	beq.n	800fc96 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	9303      	str	r3, [sp, #12]
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	9302      	str	r3, [sp, #8]
 800fc82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc84:	9301      	str	r3, [sp, #4]
 800fc86:	6a3b      	ldr	r3, [r7, #32]
 800fc88:	9300      	str	r3, [sp, #0]
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	687a      	ldr	r2, [r7, #4]
 800fc8e:	68b9      	ldr	r1, [r7, #8]
 800fc90:	68f8      	ldr	r0, [r7, #12]
 800fc92:	f000 f829 	bl	800fce8 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 800fc96:	697b      	ldr	r3, [r7, #20]
    }
 800fc98:	4618      	mov	r0, r3
 800fc9a:	3718      	adds	r7, #24
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}

0800fca0 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b088      	sub	sp, #32
 800fca4:	af02      	add	r7, sp, #8
 800fca6:	60f8      	str	r0, [r7, #12]
 800fca8:	60b9      	str	r1, [r7, #8]
 800fcaa:	607a      	str	r2, [r7, #4]
 800fcac:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800fcae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcb0:	9301      	str	r3, [sp, #4]
 800fcb2:	6a3b      	ldr	r3, [r7, #32]
 800fcb4:	9300      	str	r3, [sp, #0]
 800fcb6:	683b      	ldr	r3, [r7, #0]
 800fcb8:	687a      	ldr	r2, [r7, #4]
 800fcba:	68b9      	ldr	r1, [r7, #8]
 800fcbc:	68f8      	ldr	r0, [r7, #12]
 800fcbe:	f7ff ffb3 	bl	800fc28 <prvCreateTask>
 800fcc2:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 800fcc4:	693b      	ldr	r3, [r7, #16]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d005      	beq.n	800fcd6 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800fcca:	6938      	ldr	r0, [r7, #16]
 800fccc:	f000 f8c2 	bl	800fe54 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800fcd0:	2301      	movs	r3, #1
 800fcd2:	617b      	str	r3, [r7, #20]
 800fcd4:	e002      	b.n	800fcdc <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fcd6:	f04f 33ff 	mov.w	r3, #4294967295
 800fcda:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 800fcdc:	697b      	ldr	r3, [r7, #20]
    }
 800fcde:	4618      	mov	r0, r3
 800fce0:	3718      	adds	r7, #24
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd80      	pop	{r7, pc}
	...

0800fce8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b088      	sub	sp, #32
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	60f8      	str	r0, [r7, #12]
 800fcf0:	60b9      	str	r1, [r7, #8]
 800fcf2:	607a      	str	r2, [r7, #4]
 800fcf4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800fcf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcf8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	009b      	lsls	r3, r3, #2
 800fcfe:	461a      	mov	r2, r3
 800fd00:	21a5      	movs	r1, #165	@ 0xa5
 800fd02:	f004 fdcd 	bl	80148a0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800fd06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fd0a:	6879      	ldr	r1, [r7, #4]
 800fd0c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800fd10:	440b      	add	r3, r1
 800fd12:	009b      	lsls	r3, r3, #2
 800fd14:	4413      	add	r3, r2
 800fd16:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800fd18:	69bb      	ldr	r3, [r7, #24]
 800fd1a:	f023 0307 	bic.w	r3, r3, #7
 800fd1e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 800fd20:	69bb      	ldr	r3, [r7, #24]
 800fd22:	f003 0307 	and.w	r3, r3, #7
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d010      	beq.n	800fd4c <prvInitialiseNewTask+0x64>
    __asm volatile
 800fd2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd2e:	b672      	cpsid	i
 800fd30:	f383 8811 	msr	BASEPRI, r3
 800fd34:	f3bf 8f6f 	isb	sy
 800fd38:	f3bf 8f4f 	dsb	sy
 800fd3c:	b662      	cpsie	i
 800fd3e:	617b      	str	r3, [r7, #20]
}
 800fd40:	bf00      	nop
 800fd42:	f240 712e 	movw	r1, #1838	@ 0x72e
 800fd46:	483f      	ldr	r0, [pc, #252]	@ (800fe44 <prvInitialiseNewTask+0x15c>)
 800fd48:	f7f6 fd7a 	bl	8006840 <vAssertCalled>

        #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
        {
            /* Also record the stack's high address, which may assist
             * debugging. */
            pxNewTCB->pxEndOfStack = pxTopOfStack;
 800fd4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd4e:	69ba      	ldr	r2, [r7, #24]
 800fd50:	645a      	str	r2, [r3, #68]	@ 0x44
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800fd52:	68bb      	ldr	r3, [r7, #8]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d01e      	beq.n	800fd96 <prvInitialiseNewTask+0xae>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fd58:	2300      	movs	r3, #0
 800fd5a:	61fb      	str	r3, [r7, #28]
 800fd5c:	e012      	b.n	800fd84 <prvInitialiseNewTask+0x9c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fd5e:	68ba      	ldr	r2, [r7, #8]
 800fd60:	69fb      	ldr	r3, [r7, #28]
 800fd62:	4413      	add	r3, r2
 800fd64:	7819      	ldrb	r1, [r3, #0]
 800fd66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd68:	69fb      	ldr	r3, [r7, #28]
 800fd6a:	4413      	add	r3, r2
 800fd6c:	3334      	adds	r3, #52	@ 0x34
 800fd6e:	460a      	mov	r2, r1
 800fd70:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800fd72:	68ba      	ldr	r2, [r7, #8]
 800fd74:	69fb      	ldr	r3, [r7, #28]
 800fd76:	4413      	add	r3, r2
 800fd78:	781b      	ldrb	r3, [r3, #0]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d006      	beq.n	800fd8c <prvInitialiseNewTask+0xa4>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fd7e:	69fb      	ldr	r3, [r7, #28]
 800fd80:	3301      	adds	r3, #1
 800fd82:	61fb      	str	r3, [r7, #28]
 800fd84:	69fb      	ldr	r3, [r7, #28]
 800fd86:	2b0f      	cmp	r3, #15
 800fd88:	d9e9      	bls.n	800fd5e <prvInitialiseNewTask+0x76>
 800fd8a:	e000      	b.n	800fd8e <prvInitialiseNewTask+0xa6>
            {
                break;
 800fd8c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 800fd8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd90:	2200      	movs	r2, #0
 800fd92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800fd96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd98:	2b06      	cmp	r3, #6
 800fd9a:	d910      	bls.n	800fdbe <prvInitialiseNewTask+0xd6>
    __asm volatile
 800fd9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fda0:	b672      	cpsid	i
 800fda2:	f383 8811 	msr	BASEPRI, r3
 800fda6:	f3bf 8f6f 	isb	sy
 800fdaa:	f3bf 8f4f 	dsb	sy
 800fdae:	b662      	cpsie	i
 800fdb0:	613b      	str	r3, [r7, #16]
}
 800fdb2:	bf00      	nop
 800fdb4:	f240 7164 	movw	r1, #1892	@ 0x764
 800fdb8:	4822      	ldr	r0, [pc, #136]	@ (800fe44 <prvInitialiseNewTask+0x15c>)
 800fdba:	f7f6 fd41 	bl	8006840 <vAssertCalled>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fdbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdc0:	2b06      	cmp	r3, #6
 800fdc2:	d901      	bls.n	800fdc8 <prvInitialiseNewTask+0xe0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fdc4:	2306      	movs	r3, #6
 800fdc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800fdc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fdcc:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800fdce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fdd2:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fdd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdd6:	3304      	adds	r3, #4
 800fdd8:	4618      	mov	r0, r3
 800fdda:	f7ff f82f 	bl	800ee3c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fdde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fde0:	3318      	adds	r3, #24
 800fde2:	4618      	mov	r0, r3
 800fde4:	f7ff f82a 	bl	800ee3c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fde8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fdec:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800fdee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdf0:	f1c3 0207 	rsb	r2, r3, #7
 800fdf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdf6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fdf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fdfc:	625a      	str	r2, [r3, #36]	@ 0x24
    #endif

    #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 800fdfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe00:	335c      	adds	r3, #92	@ 0x5c
 800fe02:	224c      	movs	r2, #76	@ 0x4c
 800fe04:	2100      	movs	r1, #0
 800fe06:	4618      	mov	r0, r3
 800fe08:	f004 fd4a 	bl	80148a0 <memset>
 800fe0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe0e:	4a0e      	ldr	r2, [pc, #56]	@ (800fe48 <prvInitialiseNewTask+0x160>)
 800fe10:	661a      	str	r2, [r3, #96]	@ 0x60
 800fe12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe14:	4a0d      	ldr	r2, [pc, #52]	@ (800fe4c <prvInitialiseNewTask+0x164>)
 800fe16:	665a      	str	r2, [r3, #100]	@ 0x64
 800fe18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe1a:	4a0d      	ldr	r2, [pc, #52]	@ (800fe50 <prvInitialiseNewTask+0x168>)
 800fe1c:	669a      	str	r2, [r3, #104]	@ 0x68
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fe1e:	683a      	ldr	r2, [r7, #0]
 800fe20:	68f9      	ldr	r1, [r7, #12]
 800fe22:	69b8      	ldr	r0, [r7, #24]
 800fe24:	f001 ff50 	bl	8011cc8 <pxPortInitialiseStack>
 800fe28:	4602      	mov	r2, r0
 800fe2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe2c:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 800fe2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d002      	beq.n	800fe3a <prvInitialiseNewTask+0x152>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fe34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fe38:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800fe3a:	bf00      	nop
 800fe3c:	3720      	adds	r7, #32
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	bd80      	pop	{r7, pc}
 800fe42:	bf00      	nop
 800fe44:	08019980 	.word	0x08019980
 800fe48:	20000670 	.word	0x20000670
 800fe4c:	200006d8 	.word	0x200006d8
 800fe50:	20000740 	.word	0x20000740

0800fe54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b084      	sub	sp, #16
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 800fe5c:	f002 f8a8 	bl	8011fb0 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 800fe60:	4b41      	ldr	r3, [pc, #260]	@ (800ff68 <prvAddNewTaskToReadyList+0x114>)
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	3301      	adds	r3, #1
 800fe66:	4a40      	ldr	r2, [pc, #256]	@ (800ff68 <prvAddNewTaskToReadyList+0x114>)
 800fe68:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800fe6a:	4b40      	ldr	r3, [pc, #256]	@ (800ff6c <prvAddNewTaskToReadyList+0x118>)
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d109      	bne.n	800fe86 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 800fe72:	4a3e      	ldr	r2, [pc, #248]	@ (800ff6c <prvAddNewTaskToReadyList+0x118>)
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fe78:	4b3b      	ldr	r3, [pc, #236]	@ (800ff68 <prvAddNewTaskToReadyList+0x114>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	2b01      	cmp	r3, #1
 800fe7e:	d110      	bne.n	800fea2 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 800fe80:	f001 f82a 	bl	8010ed8 <prvInitialiseTaskLists>
 800fe84:	e00d      	b.n	800fea2 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800fe86:	4b3a      	ldr	r3, [pc, #232]	@ (800ff70 <prvAddNewTaskToReadyList+0x11c>)
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d109      	bne.n	800fea2 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fe8e:	4b37      	ldr	r3, [pc, #220]	@ (800ff6c <prvAddNewTaskToReadyList+0x118>)
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe98:	429a      	cmp	r2, r3
 800fe9a:	d802      	bhi.n	800fea2 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 800fe9c:	4a33      	ldr	r2, [pc, #204]	@ (800ff6c <prvAddNewTaskToReadyList+0x118>)
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 800fea2:	4b34      	ldr	r3, [pc, #208]	@ (800ff74 <prvAddNewTaskToReadyList+0x120>)
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	3301      	adds	r3, #1
 800fea8:	4a32      	ldr	r2, [pc, #200]	@ (800ff74 <prvAddNewTaskToReadyList+0x120>)
 800feaa:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800feac:	4b31      	ldr	r3, [pc, #196]	@ (800ff74 <prvAddNewTaskToReadyList+0x120>)
 800feae:	681a      	ldr	r2, [r3, #0]
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	649a      	str	r2, [r3, #72]	@ 0x48
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800feb8:	2201      	movs	r2, #1
 800feba:	409a      	lsls	r2, r3
 800febc:	4b2e      	ldr	r3, [pc, #184]	@ (800ff78 <prvAddNewTaskToReadyList+0x124>)
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	4313      	orrs	r3, r2
 800fec2:	4a2d      	ldr	r2, [pc, #180]	@ (800ff78 <prvAddNewTaskToReadyList+0x124>)
 800fec4:	6013      	str	r3, [r2, #0]
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800feca:	492c      	ldr	r1, [pc, #176]	@ (800ff7c <prvAddNewTaskToReadyList+0x128>)
 800fecc:	4613      	mov	r3, r2
 800fece:	009b      	lsls	r3, r3, #2
 800fed0:	4413      	add	r3, r2
 800fed2:	009b      	lsls	r3, r3, #2
 800fed4:	440b      	add	r3, r1
 800fed6:	3304      	adds	r3, #4
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	60fb      	str	r3, [r7, #12]
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	68fa      	ldr	r2, [r7, #12]
 800fee0:	609a      	str	r2, [r3, #8]
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	689a      	ldr	r2, [r3, #8]
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	60da      	str	r2, [r3, #12]
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	689b      	ldr	r3, [r3, #8]
 800feee:	687a      	ldr	r2, [r7, #4]
 800fef0:	3204      	adds	r2, #4
 800fef2:	605a      	str	r2, [r3, #4]
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	1d1a      	adds	r2, r3, #4
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	609a      	str	r2, [r3, #8]
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff00:	4613      	mov	r3, r2
 800ff02:	009b      	lsls	r3, r3, #2
 800ff04:	4413      	add	r3, r2
 800ff06:	009b      	lsls	r3, r3, #2
 800ff08:	4a1c      	ldr	r2, [pc, #112]	@ (800ff7c <prvAddNewTaskToReadyList+0x128>)
 800ff0a:	441a      	add	r2, r3
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	615a      	str	r2, [r3, #20]
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff14:	4919      	ldr	r1, [pc, #100]	@ (800ff7c <prvAddNewTaskToReadyList+0x128>)
 800ff16:	4613      	mov	r3, r2
 800ff18:	009b      	lsls	r3, r3, #2
 800ff1a:	4413      	add	r3, r2
 800ff1c:	009b      	lsls	r3, r3, #2
 800ff1e:	440b      	add	r3, r1
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	687a      	ldr	r2, [r7, #4]
 800ff24:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ff26:	1c59      	adds	r1, r3, #1
 800ff28:	4814      	ldr	r0, [pc, #80]	@ (800ff7c <prvAddNewTaskToReadyList+0x128>)
 800ff2a:	4613      	mov	r3, r2
 800ff2c:	009b      	lsls	r3, r3, #2
 800ff2e:	4413      	add	r3, r2
 800ff30:	009b      	lsls	r3, r3, #2
 800ff32:	4403      	add	r3, r0
 800ff34:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800ff36:	f002 f873 	bl	8012020 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800ff3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ff70 <prvAddNewTaskToReadyList+0x11c>)
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d00e      	beq.n	800ff60 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800ff42:	4b0a      	ldr	r3, [pc, #40]	@ (800ff6c <prvAddNewTaskToReadyList+0x118>)
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff4c:	429a      	cmp	r2, r3
 800ff4e:	d207      	bcs.n	800ff60 <prvAddNewTaskToReadyList+0x10c>
 800ff50:	4b0b      	ldr	r3, [pc, #44]	@ (800ff80 <prvAddNewTaskToReadyList+0x12c>)
 800ff52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ff56:	601a      	str	r2, [r3, #0]
 800ff58:	f3bf 8f4f 	dsb	sy
 800ff5c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800ff60:	bf00      	nop
 800ff62:	3710      	adds	r7, #16
 800ff64:	46bd      	mov	sp, r7
 800ff66:	bd80      	pop	{r7, pc}
 800ff68:	200005ec 	.word	0x200005ec
 800ff6c:	200004ec 	.word	0x200004ec
 800ff70:	200005f8 	.word	0x200005f8
 800ff74:	20000608 	.word	0x20000608
 800ff78:	200005f4 	.word	0x200005f4
 800ff7c:	200004f0 	.word	0x200004f0
 800ff80:	e000ed04 	.word	0xe000ed04

0800ff84 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b086      	sub	sp, #24
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 800ff90:	f002 f80e 	bl	8011fb0 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d102      	bne.n	800ffa0 <vTaskDelete+0x1c>
 800ff9a:	4b44      	ldr	r3, [pc, #272]	@ (80100ac <vTaskDelete+0x128>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	e000      	b.n	800ffa2 <vTaskDelete+0x1e>
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ffa4:	693b      	ldr	r3, [r7, #16]
 800ffa6:	3304      	adds	r3, #4
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	f7fe ffb1 	bl	800ef10 <uxListRemove>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d115      	bne.n	800ffe0 <vTaskDelete+0x5c>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ffb4:	693b      	ldr	r3, [r7, #16]
 800ffb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ffb8:	493d      	ldr	r1, [pc, #244]	@ (80100b0 <vTaskDelete+0x12c>)
 800ffba:	4613      	mov	r3, r2
 800ffbc:	009b      	lsls	r3, r3, #2
 800ffbe:	4413      	add	r3, r2
 800ffc0:	009b      	lsls	r3, r3, #2
 800ffc2:	440b      	add	r3, r1
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d10a      	bne.n	800ffe0 <vTaskDelete+0x5c>
 800ffca:	693b      	ldr	r3, [r7, #16]
 800ffcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffce:	2201      	movs	r2, #1
 800ffd0:	fa02 f303 	lsl.w	r3, r2, r3
 800ffd4:	43da      	mvns	r2, r3
 800ffd6:	4b37      	ldr	r3, [pc, #220]	@ (80100b4 <vTaskDelete+0x130>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	4013      	ands	r3, r2
 800ffdc:	4a35      	ldr	r2, [pc, #212]	@ (80100b4 <vTaskDelete+0x130>)
 800ffde:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ffe0:	693b      	ldr	r3, [r7, #16]
 800ffe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d004      	beq.n	800fff2 <vTaskDelete+0x6e>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ffe8:	693b      	ldr	r3, [r7, #16]
 800ffea:	3318      	adds	r3, #24
 800ffec:	4618      	mov	r0, r3
 800ffee:	f7fe ff8f 	bl	800ef10 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800fff2:	4b31      	ldr	r3, [pc, #196]	@ (80100b8 <vTaskDelete+0x134>)
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	3301      	adds	r3, #1
 800fff8:	4a2f      	ldr	r2, [pc, #188]	@ (80100b8 <vTaskDelete+0x134>)
 800fffa:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 800fffc:	4b2b      	ldr	r3, [pc, #172]	@ (80100ac <vTaskDelete+0x128>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	693a      	ldr	r2, [r7, #16]
 8010002:	429a      	cmp	r2, r3
 8010004:	d101      	bne.n	801000a <vTaskDelete+0x86>
 8010006:	2301      	movs	r3, #1
 8010008:	e000      	b.n	801000c <vTaskDelete+0x88>
 801000a:	2300      	movs	r3, #0
 801000c:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 801000e:	4b2b      	ldr	r3, [pc, #172]	@ (80100bc <vTaskDelete+0x138>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d010      	beq.n	8010038 <vTaskDelete+0xb4>
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d00d      	beq.n	8010038 <vTaskDelete+0xb4>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 801001c:	693b      	ldr	r3, [r7, #16]
 801001e:	3304      	adds	r3, #4
 8010020:	4619      	mov	r1, r3
 8010022:	4827      	ldr	r0, [pc, #156]	@ (80100c0 <vTaskDelete+0x13c>)
 8010024:	f7fe ff17 	bl	800ee56 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8010028:	4b26      	ldr	r3, [pc, #152]	@ (80100c4 <vTaskDelete+0x140>)
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	3301      	adds	r3, #1
 801002e:	4a25      	ldr	r2, [pc, #148]	@ (80100c4 <vTaskDelete+0x140>)
 8010030:	6013      	str	r3, [r2, #0]
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 8010032:	2301      	movs	r3, #1
 8010034:	617b      	str	r3, [r7, #20]
 8010036:	e006      	b.n	8010046 <vTaskDelete+0xc2>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8010038:	4b23      	ldr	r3, [pc, #140]	@ (80100c8 <vTaskDelete+0x144>)
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	3b01      	subs	r3, #1
 801003e:	4a22      	ldr	r2, [pc, #136]	@ (80100c8 <vTaskDelete+0x144>)
 8010040:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8010042:	f001 f8ad 	bl	80111a0 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8010046:	f001 ffeb 	bl	8012020 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 801004a:	697b      	ldr	r3, [r7, #20]
 801004c:	2b01      	cmp	r3, #1
 801004e:	d002      	beq.n	8010056 <vTaskDelete+0xd2>
        {
            prvDeleteTCB( pxTCB );
 8010050:	6938      	ldr	r0, [r7, #16]
 8010052:	f001 f88f 	bl	8011174 <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 8010056:	4b19      	ldr	r3, [pc, #100]	@ (80100bc <vTaskDelete+0x138>)
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d021      	beq.n	80100a2 <vTaskDelete+0x11e>
            {
                if( pxTCB == pxCurrentTCB )
 801005e:	4b13      	ldr	r3, [pc, #76]	@ (80100ac <vTaskDelete+0x128>)
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	693a      	ldr	r2, [r7, #16]
 8010064:	429a      	cmp	r2, r3
 8010066:	d11c      	bne.n	80100a2 <vTaskDelete+0x11e>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 8010068:	4b18      	ldr	r3, [pc, #96]	@ (80100cc <vTaskDelete+0x148>)
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d010      	beq.n	8010092 <vTaskDelete+0x10e>
    __asm volatile
 8010070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010074:	b672      	cpsid	i
 8010076:	f383 8811 	msr	BASEPRI, r3
 801007a:	f3bf 8f6f 	isb	sy
 801007e:	f3bf 8f4f 	dsb	sy
 8010082:	b662      	cpsie	i
 8010084:	60bb      	str	r3, [r7, #8]
}
 8010086:	bf00      	nop
 8010088:	f640 1114 	movw	r1, #2324	@ 0x914
 801008c:	4810      	ldr	r0, [pc, #64]	@ (80100d0 <vTaskDelete+0x14c>)
 801008e:	f7f6 fbd7 	bl	8006840 <vAssertCalled>
                    taskYIELD_WITHIN_API();
 8010092:	4b10      	ldr	r3, [pc, #64]	@ (80100d4 <vTaskDelete+0x150>)
 8010094:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010098:	601a      	str	r2, [r3, #0]
 801009a:	f3bf 8f4f 	dsb	sy
 801009e:	f3bf 8f6f 	isb	sy
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
 80100a2:	bf00      	nop
 80100a4:	3718      	adds	r7, #24
 80100a6:	46bd      	mov	sp, r7
 80100a8:	bd80      	pop	{r7, pc}
 80100aa:	bf00      	nop
 80100ac:	200004ec 	.word	0x200004ec
 80100b0:	200004f0 	.word	0x200004f0
 80100b4:	200005f4 	.word	0x200005f4
 80100b8:	20000608 	.word	0x20000608
 80100bc:	200005f8 	.word	0x200005f8
 80100c0:	200005c0 	.word	0x200005c0
 80100c4:	200005d4 	.word	0x200005d4
 80100c8:	200005ec 	.word	0x200005ec
 80100cc:	20000614 	.word	0x20000614
 80100d0:	08019980 	.word	0x08019980
 80100d4:	e000ed04 	.word	0xe000ed04

080100d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80100d8:	b580      	push	{r7, lr}
 80100da:	b084      	sub	sp, #16
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80100e0:	2300      	movs	r3, #0
 80100e2:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d01d      	beq.n	8010126 <vTaskDelay+0x4e>
        {
            vTaskSuspendAll();
 80100ea:	f000 f961 	bl	80103b0 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 80100ee:	4b15      	ldr	r3, [pc, #84]	@ (8010144 <vTaskDelay+0x6c>)
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	2b01      	cmp	r3, #1
 80100f4:	d010      	beq.n	8010118 <vTaskDelay+0x40>
    __asm volatile
 80100f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100fa:	b672      	cpsid	i
 80100fc:	f383 8811 	msr	BASEPRI, r3
 8010100:	f3bf 8f6f 	isb	sy
 8010104:	f3bf 8f4f 	dsb	sy
 8010108:	b662      	cpsie	i
 801010a:	60bb      	str	r3, [r7, #8]
}
 801010c:	bf00      	nop
 801010e:	f640 118e 	movw	r1, #2446	@ 0x98e
 8010112:	480d      	ldr	r0, [pc, #52]	@ (8010148 <vTaskDelay+0x70>)
 8010114:	f7f6 fb94 	bl	8006840 <vAssertCalled>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010118:	2100      	movs	r1, #0
 801011a:	6878      	ldr	r0, [r7, #4]
 801011c:	f001 fac0 	bl	80116a0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8010120:	f000 f954 	bl	80103cc <xTaskResumeAll>
 8010124:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d107      	bne.n	801013c <vTaskDelay+0x64>
        {
            taskYIELD_WITHIN_API();
 801012c:	4b07      	ldr	r3, [pc, #28]	@ (801014c <vTaskDelay+0x74>)
 801012e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010132:	601a      	str	r2, [r3, #0]
 8010134:	f3bf 8f4f 	dsb	sy
 8010138:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 801013c:	bf00      	nop
 801013e:	3710      	adds	r7, #16
 8010140:	46bd      	mov	sp, r7
 8010142:	bd80      	pop	{r7, pc}
 8010144:	20000614 	.word	0x20000614
 8010148:	08019980 	.word	0x08019980
 801014c:	e000ed04 	.word	0xe000ed04

08010150 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

    eTaskState eTaskGetState( TaskHandle_t xTask )
    {
 8010150:	b580      	push	{r7, lr}
 8010152:	b08a      	sub	sp, #40	@ 0x28
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
        eTaskState eReturn;
        List_t const * pxStateList;
        List_t const * pxEventList;
        List_t const * pxDelayedList;
        List_t const * pxOverflowedDelayedList;
        const TCB_t * const pxTCB = xTask;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	61fb      	str	r3, [r7, #28]

        traceENTER_eTaskGetState( xTask );

        configASSERT( pxTCB );
 801015c:	69fb      	ldr	r3, [r7, #28]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d110      	bne.n	8010184 <eTaskGetState+0x34>
    __asm volatile
 8010162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010166:	b672      	cpsid	i
 8010168:	f383 8811 	msr	BASEPRI, r3
 801016c:	f3bf 8f6f 	isb	sy
 8010170:	f3bf 8f4f 	dsb	sy
 8010174:	b662      	cpsie	i
 8010176:	60bb      	str	r3, [r7, #8]
}
 8010178:	bf00      	nop
 801017a:	f44f 611c 	mov.w	r1, #2496	@ 0x9c0
 801017e:	4834      	ldr	r0, [pc, #208]	@ (8010250 <eTaskGetState+0x100>)
 8010180:	f7f6 fb5e 	bl	8006840 <vAssertCalled>

        #if ( configNUMBER_OF_CORES == 1 )
            if( pxTCB == pxCurrentTCB )
 8010184:	4b33      	ldr	r3, [pc, #204]	@ (8010254 <eTaskGetState+0x104>)
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	69fa      	ldr	r2, [r7, #28]
 801018a:	429a      	cmp	r2, r3
 801018c:	d103      	bne.n	8010196 <eTaskGetState+0x46>
            {
                /* The task calling this function is querying its own state. */
                eReturn = eRunning;
 801018e:	2300      	movs	r3, #0
 8010190:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010194:	e056      	b.n	8010244 <eTaskGetState+0xf4>
            }
            else
        #endif
        {
            taskENTER_CRITICAL();
 8010196:	f001 ff0b 	bl	8011fb0 <vPortEnterCritical>
            {
                pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 801019a:	69fb      	ldr	r3, [r7, #28]
 801019c:	695b      	ldr	r3, [r3, #20]
 801019e:	61bb      	str	r3, [r7, #24]
                pxEventList = listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) );
 80101a0:	69fb      	ldr	r3, [r7, #28]
 80101a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101a4:	617b      	str	r3, [r7, #20]
                pxDelayedList = pxDelayedTaskList;
 80101a6:	4b2c      	ldr	r3, [pc, #176]	@ (8010258 <eTaskGetState+0x108>)
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	613b      	str	r3, [r7, #16]
                pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80101ac:	4b2b      	ldr	r3, [pc, #172]	@ (801025c <eTaskGetState+0x10c>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	60fb      	str	r3, [r7, #12]
            }
            taskEXIT_CRITICAL();
 80101b2:	f001 ff35 	bl	8012020 <vPortExitCritical>

            if( pxEventList == &xPendingReadyList )
 80101b6:	697b      	ldr	r3, [r7, #20]
 80101b8:	4a29      	ldr	r2, [pc, #164]	@ (8010260 <eTaskGetState+0x110>)
 80101ba:	4293      	cmp	r3, r2
 80101bc:	d103      	bne.n	80101c6 <eTaskGetState+0x76>
            {
                /* The task has been placed on the pending ready list, so its
                 * state is eReady regardless of what list the task's state list
                 * item is currently placed on. */
                eReturn = eReady;
 80101be:	2301      	movs	r3, #1
 80101c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80101c4:	e03e      	b.n	8010244 <eTaskGetState+0xf4>
            }
            else if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80101c6:	69ba      	ldr	r2, [r7, #24]
 80101c8:	693b      	ldr	r3, [r7, #16]
 80101ca:	429a      	cmp	r2, r3
 80101cc:	d003      	beq.n	80101d6 <eTaskGetState+0x86>
 80101ce:	69ba      	ldr	r2, [r7, #24]
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	429a      	cmp	r2, r3
 80101d4:	d103      	bne.n	80101de <eTaskGetState+0x8e>
            {
                /* The task being queried is referenced from one of the Blocked
                 * lists. */
                eReturn = eBlocked;
 80101d6:	2302      	movs	r3, #2
 80101d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80101dc:	e032      	b.n	8010244 <eTaskGetState+0xf4>
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                else if( pxStateList == &xSuspendedTaskList )
 80101de:	69bb      	ldr	r3, [r7, #24]
 80101e0:	4a20      	ldr	r2, [pc, #128]	@ (8010264 <eTaskGetState+0x114>)
 80101e2:	4293      	cmp	r3, r2
 80101e4:	d120      	bne.n	8010228 <eTaskGetState+0xd8>
                {
                    /* The task being queried is referenced from the suspended
                     * list.  Is it genuinely suspended or is it blocked
                     * indefinitely? */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80101e6:	69fb      	ldr	r3, [r7, #28]
 80101e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d118      	bne.n	8010220 <eTaskGetState+0xd0>
                            /* The task does not appear on the event list item of
                             * and of the RTOS objects, but could still be in the
                             * blocked state if it is waiting on its notification
                             * rather than waiting on an object.  If not, is
                             * suspended. */
                            eReturn = eSuspended;
 80101ee:	2303      	movs	r3, #3
 80101f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                            for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80101f4:	2300      	movs	r3, #0
 80101f6:	623b      	str	r3, [r7, #32]
 80101f8:	e00e      	b.n	8010218 <eTaskGetState+0xc8>
                            {
                                if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 80101fa:	69fa      	ldr	r2, [r7, #28]
 80101fc:	6a3b      	ldr	r3, [r7, #32]
 80101fe:	4413      	add	r3, r2
 8010200:	33ac      	adds	r3, #172	@ 0xac
 8010202:	781b      	ldrb	r3, [r3, #0]
 8010204:	b2db      	uxtb	r3, r3
 8010206:	2b01      	cmp	r3, #1
 8010208:	d103      	bne.n	8010212 <eTaskGetState+0xc2>
                                {
                                    eReturn = eBlocked;
 801020a:	2302      	movs	r3, #2
 801020c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                    break;
 8010210:	e018      	b.n	8010244 <eTaskGetState+0xf4>
                            for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8010212:	6a3b      	ldr	r3, [r7, #32]
 8010214:	3301      	adds	r3, #1
 8010216:	623b      	str	r3, [r7, #32]
 8010218:	6a3b      	ldr	r3, [r7, #32]
 801021a:	2b00      	cmp	r3, #0
 801021c:	dded      	ble.n	80101fa <eTaskGetState+0xaa>
 801021e:	e011      	b.n	8010244 <eTaskGetState+0xf4>
                        }
                        #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
                    }
                    else
                    {
                        eReturn = eBlocked;
 8010220:	2302      	movs	r3, #2
 8010222:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010226:	e00d      	b.n	8010244 <eTaskGetState+0xf4>
                    }
                }
            #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */

            #if ( INCLUDE_vTaskDelete == 1 )
                else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8010228:	69bb      	ldr	r3, [r7, #24]
 801022a:	4a0f      	ldr	r2, [pc, #60]	@ (8010268 <eTaskGetState+0x118>)
 801022c:	4293      	cmp	r3, r2
 801022e:	d002      	beq.n	8010236 <eTaskGetState+0xe6>
 8010230:	69bb      	ldr	r3, [r7, #24]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d103      	bne.n	801023e <eTaskGetState+0xee>
                {
                    /* The task being queried is referenced from the deleted
                     * tasks list, or it is not referenced from any lists at
                     * all. */
                    eReturn = eDeleted;
 8010236:	2304      	movs	r3, #4
 8010238:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801023c:	e002      	b.n	8010244 <eTaskGetState+0xf4>
            {
                #if ( configNUMBER_OF_CORES == 1 )
                {
                    /* If the task is not in any other state, it must be in the
                     * Ready (including pending ready) state. */
                    eReturn = eReady;
 801023e:	2301      	movs	r3, #1
 8010240:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
        }

        traceRETURN_eTaskGetState( eReturn );

        return eReturn;
 8010244:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
    }
 8010248:	4618      	mov	r0, r3
 801024a:	3728      	adds	r7, #40	@ 0x28
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}
 8010250:	08019980 	.word	0x08019980
 8010254:	200004ec 	.word	0x200004ec
 8010258:	200005a4 	.word	0x200005a4
 801025c:	200005a8 	.word	0x200005a8
 8010260:	200005ac 	.word	0x200005ac
 8010264:	200005d8 	.word	0x200005d8
 8010268:	200005c0 	.word	0x200005c0

0801026c <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b08a      	sub	sp, #40	@ 0x28
 8010270:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8010272:	2301      	movs	r3, #1
 8010274:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8010276:	2300      	movs	r3, #0
 8010278:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 801027a:	2300      	movs	r3, #0
 801027c:	617b      	str	r3, [r7, #20]
 801027e:	e011      	b.n	80102a4 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8010280:	4a1d      	ldr	r2, [pc, #116]	@ (80102f8 <prvCreateIdleTasks+0x8c>)
 8010282:	697b      	ldr	r3, [r7, #20]
 8010284:	4413      	add	r3, r2
 8010286:	7819      	ldrb	r1, [r3, #0]
 8010288:	463a      	mov	r2, r7
 801028a:	697b      	ldr	r3, [r7, #20]
 801028c:	4413      	add	r3, r2
 801028e:	460a      	mov	r2, r1
 8010290:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8010292:	463a      	mov	r2, r7
 8010294:	697b      	ldr	r3, [r7, #20]
 8010296:	4413      	add	r3, r2
 8010298:	781b      	ldrb	r3, [r3, #0]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d006      	beq.n	80102ac <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 801029e:	697b      	ldr	r3, [r7, #20]
 80102a0:	3301      	adds	r3, #1
 80102a2:	617b      	str	r3, [r7, #20]
 80102a4:	697b      	ldr	r3, [r7, #20]
 80102a6:	2b0f      	cmp	r3, #15
 80102a8:	ddea      	ble.n	8010280 <prvCreateIdleTasks+0x14>
 80102aa:	e000      	b.n	80102ae <prvCreateIdleTasks+0x42>
        {
            break;
 80102ac:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80102ae:	2300      	movs	r3, #0
 80102b0:	61bb      	str	r3, [r7, #24]
 80102b2:	e016      	b.n	80102e2 <prvCreateIdleTasks+0x76>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80102b4:	4b11      	ldr	r3, [pc, #68]	@ (80102fc <prvCreateIdleTasks+0x90>)
 80102b6:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80102b8:	69bb      	ldr	r3, [r7, #24]
 80102ba:	009b      	lsls	r3, r3, #2
 80102bc:	4a10      	ldr	r2, [pc, #64]	@ (8010300 <prvCreateIdleTasks+0x94>)
 80102be:	4413      	add	r3, r2
 80102c0:	4639      	mov	r1, r7
 80102c2:	9301      	str	r3, [sp, #4]
 80102c4:	2300      	movs	r3, #0
 80102c6:	9300      	str	r3, [sp, #0]
 80102c8:	2300      	movs	r3, #0
 80102ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80102ce:	6938      	ldr	r0, [r7, #16]
 80102d0:	f7ff fce6 	bl	800fca0 <xTaskCreate>
 80102d4:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80102d6:	69fb      	ldr	r3, [r7, #28]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d006      	beq.n	80102ea <prvCreateIdleTasks+0x7e>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80102dc:	69bb      	ldr	r3, [r7, #24]
 80102de:	3301      	adds	r3, #1
 80102e0:	61bb      	str	r3, [r7, #24]
 80102e2:	69bb      	ldr	r3, [r7, #24]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	dde5      	ble.n	80102b4 <prvCreateIdleTasks+0x48>
 80102e8:	e000      	b.n	80102ec <prvCreateIdleTasks+0x80>
        {
            break;
 80102ea:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80102ec:	69fb      	ldr	r3, [r7, #28]
}
 80102ee:	4618      	mov	r0, r3
 80102f0:	3720      	adds	r7, #32
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bd80      	pop	{r7, pc}
 80102f6:	bf00      	nop
 80102f8:	080199f4 	.word	0x080199f4
 80102fc:	08010ea9 	.word	0x08010ea9
 8010300:	20000610 	.word	0x20000610

08010304 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b084      	sub	sp, #16
 8010308:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 801030a:	f7ff ffaf 	bl	801026c <prvCreateIdleTasks>
 801030e:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	2b01      	cmp	r3, #1
 8010314:	d102      	bne.n	801031c <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8010316:	f001 fa45 	bl	80117a4 <xTimerCreateTimerTask>
 801031a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	2b01      	cmp	r3, #1
 8010320:	d11d      	bne.n	801035e <vTaskStartScheduler+0x5a>
    __asm volatile
 8010322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010326:	b672      	cpsid	i
 8010328:	f383 8811 	msr	BASEPRI, r3
 801032c:	f3bf 8f6f 	isb	sy
 8010330:	f3bf 8f4f 	dsb	sy
 8010334:	b662      	cpsie	i
 8010336:	60bb      	str	r3, [r7, #8]
}
 8010338:	bf00      	nop

        #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 801033a:	4b16      	ldr	r3, [pc, #88]	@ (8010394 <vTaskStartScheduler+0x90>)
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	335c      	adds	r3, #92	@ 0x5c
 8010340:	4a15      	ldr	r2, [pc, #84]	@ (8010398 <vTaskStartScheduler+0x94>)
 8010342:	6013      	str	r3, [r2, #0]
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8010344:	4b15      	ldr	r3, [pc, #84]	@ (801039c <vTaskStartScheduler+0x98>)
 8010346:	f04f 32ff 	mov.w	r2, #4294967295
 801034a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 801034c:	4b14      	ldr	r3, [pc, #80]	@ (80103a0 <vTaskStartScheduler+0x9c>)
 801034e:	2201      	movs	r2, #1
 8010350:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010352:	4b14      	ldr	r3, [pc, #80]	@ (80103a4 <vTaskStartScheduler+0xa0>)
 8010354:	2200      	movs	r2, #0
 8010356:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8010358:	f001 fd4c 	bl	8011df4 <xPortStartScheduler>
 801035c:	e014      	b.n	8010388 <vTaskStartScheduler+0x84>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010364:	d110      	bne.n	8010388 <vTaskStartScheduler+0x84>
    __asm volatile
 8010366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801036a:	b672      	cpsid	i
 801036c:	f383 8811 	msr	BASEPRI, r3
 8010370:	f3bf 8f6f 	isb	sy
 8010374:	f3bf 8f4f 	dsb	sy
 8010378:	b662      	cpsie	i
 801037a:	607b      	str	r3, [r7, #4]
}
 801037c:	bf00      	nop
 801037e:	f640 61a9 	movw	r1, #3753	@ 0xea9
 8010382:	4809      	ldr	r0, [pc, #36]	@ (80103a8 <vTaskStartScheduler+0xa4>)
 8010384:	f7f6 fa5c 	bl	8006840 <vAssertCalled>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8010388:	4b08      	ldr	r3, [pc, #32]	@ (80103ac <vTaskStartScheduler+0xa8>)
 801038a:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 801038c:	bf00      	nop
 801038e:	3710      	adds	r7, #16
 8010390:	46bd      	mov	sp, r7
 8010392:	bd80      	pop	{r7, pc}
 8010394:	200004ec 	.word	0x200004ec
 8010398:	200001d4 	.word	0x200001d4
 801039c:	2000060c 	.word	0x2000060c
 80103a0:	200005f8 	.word	0x200005f8
 80103a4:	200005f0 	.word	0x200005f0
 80103a8:	08019980 	.word	0x08019980
 80103ac:	08019ff4 	.word	0x08019ff4

080103b0 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80103b0:	b480      	push	{r7}
 80103b2:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80103b4:	4b04      	ldr	r3, [pc, #16]	@ (80103c8 <vTaskSuspendAll+0x18>)
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	3301      	adds	r3, #1
 80103ba:	4a03      	ldr	r2, [pc, #12]	@ (80103c8 <vTaskSuspendAll+0x18>)
 80103bc:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 80103be:	bf00      	nop
 80103c0:	46bd      	mov	sp, r7
 80103c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c6:	4770      	bx	lr
 80103c8:	20000614 	.word	0x20000614

080103cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b088      	sub	sp, #32
 80103d0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80103d2:	2300      	movs	r3, #0
 80103d4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80103d6:	2300      	movs	r3, #0
 80103d8:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80103da:	f001 fde9 	bl	8011fb0 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80103de:	2300      	movs	r3, #0
 80103e0:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80103e2:	4b78      	ldr	r3, [pc, #480]	@ (80105c4 <xTaskResumeAll+0x1f8>)
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d110      	bne.n	801040c <xTaskResumeAll+0x40>
    __asm volatile
 80103ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103ee:	b672      	cpsid	i
 80103f0:	f383 8811 	msr	BASEPRI, r3
 80103f4:	f3bf 8f6f 	isb	sy
 80103f8:	f3bf 8f4f 	dsb	sy
 80103fc:	b662      	cpsie	i
 80103fe:	603b      	str	r3, [r7, #0]
}
 8010400:	bf00      	nop
 8010402:	f640 718b 	movw	r1, #3979	@ 0xf8b
 8010406:	4870      	ldr	r0, [pc, #448]	@ (80105c8 <xTaskResumeAll+0x1fc>)
 8010408:	f7f6 fa1a 	bl	8006840 <vAssertCalled>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 801040c:	4b6d      	ldr	r3, [pc, #436]	@ (80105c4 <xTaskResumeAll+0x1f8>)
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	3b01      	subs	r3, #1
 8010412:	4a6c      	ldr	r2, [pc, #432]	@ (80105c4 <xTaskResumeAll+0x1f8>)
 8010414:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8010416:	4b6b      	ldr	r3, [pc, #428]	@ (80105c4 <xTaskResumeAll+0x1f8>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	2b00      	cmp	r3, #0
 801041c:	f040 80ca 	bne.w	80105b4 <xTaskResumeAll+0x1e8>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010420:	4b6a      	ldr	r3, [pc, #424]	@ (80105cc <xTaskResumeAll+0x200>)
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	2b00      	cmp	r3, #0
 8010426:	f000 80c5 	beq.w	80105b4 <xTaskResumeAll+0x1e8>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801042a:	e08e      	b.n	801054a <xTaskResumeAll+0x17e>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 801042c:	4b68      	ldr	r3, [pc, #416]	@ (80105d0 <xTaskResumeAll+0x204>)
 801042e:	68db      	ldr	r3, [r3, #12]
 8010430:	68db      	ldr	r3, [r3, #12]
 8010432:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8010434:	69fb      	ldr	r3, [r7, #28]
 8010436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010438:	60fb      	str	r3, [r7, #12]
 801043a:	69fb      	ldr	r3, [r7, #28]
 801043c:	69db      	ldr	r3, [r3, #28]
 801043e:	69fa      	ldr	r2, [r7, #28]
 8010440:	6a12      	ldr	r2, [r2, #32]
 8010442:	609a      	str	r2, [r3, #8]
 8010444:	69fb      	ldr	r3, [r7, #28]
 8010446:	6a1b      	ldr	r3, [r3, #32]
 8010448:	69fa      	ldr	r2, [r7, #28]
 801044a:	69d2      	ldr	r2, [r2, #28]
 801044c:	605a      	str	r2, [r3, #4]
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	685a      	ldr	r2, [r3, #4]
 8010452:	69fb      	ldr	r3, [r7, #28]
 8010454:	3318      	adds	r3, #24
 8010456:	429a      	cmp	r2, r3
 8010458:	d103      	bne.n	8010462 <xTaskResumeAll+0x96>
 801045a:	69fb      	ldr	r3, [r7, #28]
 801045c:	6a1a      	ldr	r2, [r3, #32]
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	605a      	str	r2, [r3, #4]
 8010462:	69fb      	ldr	r3, [r7, #28]
 8010464:	2200      	movs	r2, #0
 8010466:	629a      	str	r2, [r3, #40]	@ 0x28
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	1e5a      	subs	r2, r3, #1
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8010472:	69fb      	ldr	r3, [r7, #28]
 8010474:	695b      	ldr	r3, [r3, #20]
 8010476:	60bb      	str	r3, [r7, #8]
 8010478:	69fb      	ldr	r3, [r7, #28]
 801047a:	689b      	ldr	r3, [r3, #8]
 801047c:	69fa      	ldr	r2, [r7, #28]
 801047e:	68d2      	ldr	r2, [r2, #12]
 8010480:	609a      	str	r2, [r3, #8]
 8010482:	69fb      	ldr	r3, [r7, #28]
 8010484:	68db      	ldr	r3, [r3, #12]
 8010486:	69fa      	ldr	r2, [r7, #28]
 8010488:	6892      	ldr	r2, [r2, #8]
 801048a:	605a      	str	r2, [r3, #4]
 801048c:	68bb      	ldr	r3, [r7, #8]
 801048e:	685a      	ldr	r2, [r3, #4]
 8010490:	69fb      	ldr	r3, [r7, #28]
 8010492:	3304      	adds	r3, #4
 8010494:	429a      	cmp	r2, r3
 8010496:	d103      	bne.n	80104a0 <xTaskResumeAll+0xd4>
 8010498:	69fb      	ldr	r3, [r7, #28]
 801049a:	68da      	ldr	r2, [r3, #12]
 801049c:	68bb      	ldr	r3, [r7, #8]
 801049e:	605a      	str	r2, [r3, #4]
 80104a0:	69fb      	ldr	r3, [r7, #28]
 80104a2:	2200      	movs	r2, #0
 80104a4:	615a      	str	r2, [r3, #20]
 80104a6:	68bb      	ldr	r3, [r7, #8]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	1e5a      	subs	r2, r3, #1
 80104ac:	68bb      	ldr	r3, [r7, #8]
 80104ae:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80104b0:	69fb      	ldr	r3, [r7, #28]
 80104b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104b4:	2201      	movs	r2, #1
 80104b6:	409a      	lsls	r2, r3
 80104b8:	4b46      	ldr	r3, [pc, #280]	@ (80105d4 <xTaskResumeAll+0x208>)
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	4313      	orrs	r3, r2
 80104be:	4a45      	ldr	r2, [pc, #276]	@ (80105d4 <xTaskResumeAll+0x208>)
 80104c0:	6013      	str	r3, [r2, #0]
 80104c2:	69fb      	ldr	r3, [r7, #28]
 80104c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80104c6:	4944      	ldr	r1, [pc, #272]	@ (80105d8 <xTaskResumeAll+0x20c>)
 80104c8:	4613      	mov	r3, r2
 80104ca:	009b      	lsls	r3, r3, #2
 80104cc:	4413      	add	r3, r2
 80104ce:	009b      	lsls	r3, r3, #2
 80104d0:	440b      	add	r3, r1
 80104d2:	3304      	adds	r3, #4
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	607b      	str	r3, [r7, #4]
 80104d8:	69fb      	ldr	r3, [r7, #28]
 80104da:	687a      	ldr	r2, [r7, #4]
 80104dc:	609a      	str	r2, [r3, #8]
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	689a      	ldr	r2, [r3, #8]
 80104e2:	69fb      	ldr	r3, [r7, #28]
 80104e4:	60da      	str	r2, [r3, #12]
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	689b      	ldr	r3, [r3, #8]
 80104ea:	69fa      	ldr	r2, [r7, #28]
 80104ec:	3204      	adds	r2, #4
 80104ee:	605a      	str	r2, [r3, #4]
 80104f0:	69fb      	ldr	r3, [r7, #28]
 80104f2:	1d1a      	adds	r2, r3, #4
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	609a      	str	r2, [r3, #8]
 80104f8:	69fb      	ldr	r3, [r7, #28]
 80104fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80104fc:	4613      	mov	r3, r2
 80104fe:	009b      	lsls	r3, r3, #2
 8010500:	4413      	add	r3, r2
 8010502:	009b      	lsls	r3, r3, #2
 8010504:	4a34      	ldr	r2, [pc, #208]	@ (80105d8 <xTaskResumeAll+0x20c>)
 8010506:	441a      	add	r2, r3
 8010508:	69fb      	ldr	r3, [r7, #28]
 801050a:	615a      	str	r2, [r3, #20]
 801050c:	69fb      	ldr	r3, [r7, #28]
 801050e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010510:	4931      	ldr	r1, [pc, #196]	@ (80105d8 <xTaskResumeAll+0x20c>)
 8010512:	4613      	mov	r3, r2
 8010514:	009b      	lsls	r3, r3, #2
 8010516:	4413      	add	r3, r2
 8010518:	009b      	lsls	r3, r3, #2
 801051a:	440b      	add	r3, r1
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	69fa      	ldr	r2, [r7, #28]
 8010520:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8010522:	1c59      	adds	r1, r3, #1
 8010524:	482c      	ldr	r0, [pc, #176]	@ (80105d8 <xTaskResumeAll+0x20c>)
 8010526:	4613      	mov	r3, r2
 8010528:	009b      	lsls	r3, r3, #2
 801052a:	4413      	add	r3, r2
 801052c:	009b      	lsls	r3, r3, #2
 801052e:	4403      	add	r3, r0
 8010530:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010532:	69fb      	ldr	r3, [r7, #28]
 8010534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010536:	4b29      	ldr	r3, [pc, #164]	@ (80105dc <xTaskResumeAll+0x210>)
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801053c:	429a      	cmp	r2, r3
 801053e:	d904      	bls.n	801054a <xTaskResumeAll+0x17e>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8010540:	4a27      	ldr	r2, [pc, #156]	@ (80105e0 <xTaskResumeAll+0x214>)
 8010542:	693b      	ldr	r3, [r7, #16]
 8010544:	2101      	movs	r1, #1
 8010546:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801054a:	4b21      	ldr	r3, [pc, #132]	@ (80105d0 <xTaskResumeAll+0x204>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	2b00      	cmp	r3, #0
 8010550:	f47f af6c 	bne.w	801042c <xTaskResumeAll+0x60>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8010554:	69fb      	ldr	r3, [r7, #28]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d001      	beq.n	801055e <xTaskResumeAll+0x192>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 801055a:	f000 fe21 	bl	80111a0 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801055e:	4b21      	ldr	r3, [pc, #132]	@ (80105e4 <xTaskResumeAll+0x218>)
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8010564:	697b      	ldr	r3, [r7, #20]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d012      	beq.n	8010590 <xTaskResumeAll+0x1c4>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 801056a:	f000 f8e1 	bl	8010730 <xTaskIncrementTick>
 801056e:	4603      	mov	r3, r0
 8010570:	2b00      	cmp	r3, #0
 8010572:	d004      	beq.n	801057e <xTaskResumeAll+0x1b2>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8010574:	4a1a      	ldr	r2, [pc, #104]	@ (80105e0 <xTaskResumeAll+0x214>)
 8010576:	693b      	ldr	r3, [r7, #16]
 8010578:	2101      	movs	r1, #1
 801057a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 801057e:	697b      	ldr	r3, [r7, #20]
 8010580:	3b01      	subs	r3, #1
 8010582:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8010584:	697b      	ldr	r3, [r7, #20]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d1ef      	bne.n	801056a <xTaskResumeAll+0x19e>

                            xPendedTicks = 0;
 801058a:	4b16      	ldr	r3, [pc, #88]	@ (80105e4 <xTaskResumeAll+0x218>)
 801058c:	2200      	movs	r2, #0
 801058e:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8010590:	4a13      	ldr	r2, [pc, #76]	@ (80105e0 <xTaskResumeAll+0x214>)
 8010592:	693b      	ldr	r3, [r7, #16]
 8010594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d00b      	beq.n	80105b4 <xTaskResumeAll+0x1e8>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 801059c:	2301      	movs	r3, #1
 801059e:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80105a0:	4b0e      	ldr	r3, [pc, #56]	@ (80105dc <xTaskResumeAll+0x210>)
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	4b10      	ldr	r3, [pc, #64]	@ (80105e8 <xTaskResumeAll+0x21c>)
 80105a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80105aa:	601a      	str	r2, [r3, #0]
 80105ac:	f3bf 8f4f 	dsb	sy
 80105b0:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80105b4:	f001 fd34 	bl	8012020 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 80105b8:	69bb      	ldr	r3, [r7, #24]
}
 80105ba:	4618      	mov	r0, r3
 80105bc:	3720      	adds	r7, #32
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}
 80105c2:	bf00      	nop
 80105c4:	20000614 	.word	0x20000614
 80105c8:	08019980 	.word	0x08019980
 80105cc:	200005ec 	.word	0x200005ec
 80105d0:	200005ac 	.word	0x200005ac
 80105d4:	200005f4 	.word	0x200005f4
 80105d8:	200004f0 	.word	0x200004f0
 80105dc:	200004ec 	.word	0x200004ec
 80105e0:	20000600 	.word	0x20000600
 80105e4:	200005fc 	.word	0x200005fc
 80105e8:	e000ed04 	.word	0xe000ed04

080105ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80105ec:	b480      	push	{r7}
 80105ee:	b083      	sub	sp, #12
 80105f0:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80105f2:	4b05      	ldr	r3, [pc, #20]	@ (8010608 <xTaskGetTickCount+0x1c>)
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 80105f8:	687b      	ldr	r3, [r7, #4]
}
 80105fa:	4618      	mov	r0, r3
 80105fc:	370c      	adds	r7, #12
 80105fe:	46bd      	mov	sp, r7
 8010600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010604:	4770      	bx	lr
 8010606:	bf00      	nop
 8010608:	200005f0 	.word	0x200005f0

0801060c <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 801060c:	b480      	push	{r7}
 801060e:	af00      	add	r7, sp, #0

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
 8010610:	4b03      	ldr	r3, [pc, #12]	@ (8010620 <uxTaskGetNumberOfTasks+0x14>)
 8010612:	681b      	ldr	r3, [r3, #0]
}
 8010614:	4618      	mov	r0, r3
 8010616:	46bd      	mov	sp, r7
 8010618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061c:	4770      	bx	lr
 801061e:	bf00      	nop
 8010620:	200005ec 	.word	0x200005ec

08010624 <uxTaskGetSystemState>:
#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
                                      const UBaseType_t uxArraySize,
                                      configRUN_TIME_COUNTER_TYPE * const pulTotalRunTime )
    {
 8010624:	b580      	push	{r7, lr}
 8010626:	b086      	sub	sp, #24
 8010628:	af00      	add	r7, sp, #0
 801062a:	60f8      	str	r0, [r7, #12]
 801062c:	60b9      	str	r1, [r7, #8]
 801062e:	607a      	str	r2, [r7, #4]
        UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8010630:	2300      	movs	r3, #0
 8010632:	617b      	str	r3, [r7, #20]
 8010634:	2307      	movs	r3, #7
 8010636:	613b      	str	r3, [r7, #16]

        traceENTER_uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, pulTotalRunTime );

        vTaskSuspendAll();
 8010638:	f7ff feba 	bl	80103b0 <vTaskSuspendAll>
        {
            /* Is there a space in the array for each task in the system? */
            if( uxArraySize >= uxCurrentNumberOfTasks )
 801063c:	4b36      	ldr	r3, [pc, #216]	@ (8010718 <uxTaskGetSystemState+0xf4>)
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	68ba      	ldr	r2, [r7, #8]
 8010642:	429a      	cmp	r2, r3
 8010644:	d360      	bcc.n	8010708 <uxTaskGetSystemState+0xe4>
            {
                /* Fill in an TaskStatus_t structure with information on each
                 * task in the Ready state. */
                do
                {
                    uxQueue--;
 8010646:	693b      	ldr	r3, [r7, #16]
 8010648:	3b01      	subs	r3, #1
 801064a:	613b      	str	r3, [r7, #16]
                    uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady ) );
 801064c:	697b      	ldr	r3, [r7, #20]
 801064e:	222c      	movs	r2, #44	@ 0x2c
 8010650:	fb02 f303 	mul.w	r3, r2, r3
 8010654:	68fa      	ldr	r2, [r7, #12]
 8010656:	18d0      	adds	r0, r2, r3
 8010658:	693a      	ldr	r2, [r7, #16]
 801065a:	4613      	mov	r3, r2
 801065c:	009b      	lsls	r3, r3, #2
 801065e:	4413      	add	r3, r2
 8010660:	009b      	lsls	r3, r3, #2
 8010662:	4a2e      	ldr	r2, [pc, #184]	@ (801071c <uxTaskGetSystemState+0xf8>)
 8010664:	4413      	add	r3, r2
 8010666:	2201      	movs	r2, #1
 8010668:	4619      	mov	r1, r3
 801066a:	f000 fd35 	bl	80110d8 <prvListTasksWithinSingleList>
 801066e:	4602      	mov	r2, r0
 8010670:	697b      	ldr	r3, [r7, #20]
 8010672:	4413      	add	r3, r2
 8010674:	617b      	str	r3, [r7, #20]
                } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY );
 8010676:	693b      	ldr	r3, [r7, #16]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d1e4      	bne.n	8010646 <uxTaskGetSystemState+0x22>

                /* Fill in an TaskStatus_t structure with information on each
                 * task in the Blocked state. */
                uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked ) );
 801067c:	697b      	ldr	r3, [r7, #20]
 801067e:	222c      	movs	r2, #44	@ 0x2c
 8010680:	fb02 f303 	mul.w	r3, r2, r3
 8010684:	68fa      	ldr	r2, [r7, #12]
 8010686:	4413      	add	r3, r2
 8010688:	4a25      	ldr	r2, [pc, #148]	@ (8010720 <uxTaskGetSystemState+0xfc>)
 801068a:	6811      	ldr	r1, [r2, #0]
 801068c:	2202      	movs	r2, #2
 801068e:	4618      	mov	r0, r3
 8010690:	f000 fd22 	bl	80110d8 <prvListTasksWithinSingleList>
 8010694:	4602      	mov	r2, r0
 8010696:	697b      	ldr	r3, [r7, #20]
 8010698:	4413      	add	r3, r2
 801069a:	617b      	str	r3, [r7, #20]
                uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked ) );
 801069c:	697b      	ldr	r3, [r7, #20]
 801069e:	222c      	movs	r2, #44	@ 0x2c
 80106a0:	fb02 f303 	mul.w	r3, r2, r3
 80106a4:	68fa      	ldr	r2, [r7, #12]
 80106a6:	4413      	add	r3, r2
 80106a8:	4a1e      	ldr	r2, [pc, #120]	@ (8010724 <uxTaskGetSystemState+0x100>)
 80106aa:	6811      	ldr	r1, [r2, #0]
 80106ac:	2202      	movs	r2, #2
 80106ae:	4618      	mov	r0, r3
 80106b0:	f000 fd12 	bl	80110d8 <prvListTasksWithinSingleList>
 80106b4:	4602      	mov	r2, r0
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	4413      	add	r3, r2
 80106ba:	617b      	str	r3, [r7, #20]

                #if ( INCLUDE_vTaskDelete == 1 )
                {
                    /* Fill in an TaskStatus_t structure with information on
                     * each task that has been deleted but not yet cleaned up. */
                    uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted ) );
 80106bc:	697b      	ldr	r3, [r7, #20]
 80106be:	222c      	movs	r2, #44	@ 0x2c
 80106c0:	fb02 f303 	mul.w	r3, r2, r3
 80106c4:	68fa      	ldr	r2, [r7, #12]
 80106c6:	4413      	add	r3, r2
 80106c8:	2204      	movs	r2, #4
 80106ca:	4917      	ldr	r1, [pc, #92]	@ (8010728 <uxTaskGetSystemState+0x104>)
 80106cc:	4618      	mov	r0, r3
 80106ce:	f000 fd03 	bl	80110d8 <prvListTasksWithinSingleList>
 80106d2:	4602      	mov	r2, r0
 80106d4:	697b      	ldr	r3, [r7, #20]
 80106d6:	4413      	add	r3, r2
 80106d8:	617b      	str	r3, [r7, #20]

                #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    /* Fill in an TaskStatus_t structure with information on
                     * each task in the Suspended state. */
                    uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended ) );
 80106da:	697b      	ldr	r3, [r7, #20]
 80106dc:	222c      	movs	r2, #44	@ 0x2c
 80106de:	fb02 f303 	mul.w	r3, r2, r3
 80106e2:	68fa      	ldr	r2, [r7, #12]
 80106e4:	4413      	add	r3, r2
 80106e6:	2203      	movs	r2, #3
 80106e8:	4910      	ldr	r1, [pc, #64]	@ (801072c <uxTaskGetSystemState+0x108>)
 80106ea:	4618      	mov	r0, r3
 80106ec:	f000 fcf4 	bl	80110d8 <prvListTasksWithinSingleList>
 80106f0:	4602      	mov	r2, r0
 80106f2:	697b      	ldr	r3, [r7, #20]
 80106f4:	4413      	add	r3, r2
 80106f6:	617b      	str	r3, [r7, #20]
                }
                #endif

                #if ( configGENERATE_RUN_TIME_STATS == 1 )
                {
                    if( pulTotalRunTime != NULL )
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d004      	beq.n	8010708 <uxTaskGetSystemState+0xe4>
                    {
                        #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
                            portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
                        #else
                            *pulTotalRunTime = ( configRUN_TIME_COUNTER_TYPE ) portGET_RUN_TIME_COUNTER_VALUE();
 80106fe:	f7ff ff75 	bl	80105ec <xTaskGetTickCount>
 8010702:	4602      	mov	r2, r0
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	601a      	str	r2, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        ( void ) xTaskResumeAll();
 8010708:	f7ff fe60 	bl	80103cc <xTaskResumeAll>

        traceRETURN_uxTaskGetSystemState( uxTask );

        return uxTask;
 801070c:	697b      	ldr	r3, [r7, #20]
    }
 801070e:	4618      	mov	r0, r3
 8010710:	3718      	adds	r7, #24
 8010712:	46bd      	mov	sp, r7
 8010714:	bd80      	pop	{r7, pc}
 8010716:	bf00      	nop
 8010718:	200005ec 	.word	0x200005ec
 801071c:	200004f0 	.word	0x200004f0
 8010720:	200005a4 	.word	0x200005a4
 8010724:	200005a8 	.word	0x200005a8
 8010728:	200005c0 	.word	0x200005c0
 801072c:	200005d8 	.word	0x200005d8

08010730 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b08a      	sub	sp, #40	@ 0x28
 8010734:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8010736:	2300      	movs	r3, #0
 8010738:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 801073a:	4b81      	ldr	r3, [pc, #516]	@ (8010940 <xTaskIncrementTick+0x210>)
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	2b00      	cmp	r3, #0
 8010740:	f040 80f4 	bne.w	801092c <xTaskIncrementTick+0x1fc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010744:	4b7f      	ldr	r3, [pc, #508]	@ (8010944 <xTaskIncrementTick+0x214>)
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	3301      	adds	r3, #1
 801074a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 801074c:	4a7d      	ldr	r2, [pc, #500]	@ (8010944 <xTaskIncrementTick+0x214>)
 801074e:	6a3b      	ldr	r3, [r7, #32]
 8010750:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8010752:	6a3b      	ldr	r3, [r7, #32]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d126      	bne.n	80107a6 <xTaskIncrementTick+0x76>
        {
            taskSWITCH_DELAYED_LISTS();
 8010758:	4b7b      	ldr	r3, [pc, #492]	@ (8010948 <xTaskIncrementTick+0x218>)
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d010      	beq.n	8010784 <xTaskIncrementTick+0x54>
    __asm volatile
 8010762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010766:	b672      	cpsid	i
 8010768:	f383 8811 	msr	BASEPRI, r3
 801076c:	f3bf 8f6f 	isb	sy
 8010770:	f3bf 8f4f 	dsb	sy
 8010774:	b662      	cpsie	i
 8010776:	607b      	str	r3, [r7, #4]
}
 8010778:	bf00      	nop
 801077a:	f241 215f 	movw	r1, #4703	@ 0x125f
 801077e:	4873      	ldr	r0, [pc, #460]	@ (801094c <xTaskIncrementTick+0x21c>)
 8010780:	f7f6 f85e 	bl	8006840 <vAssertCalled>
 8010784:	4b70      	ldr	r3, [pc, #448]	@ (8010948 <xTaskIncrementTick+0x218>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	61fb      	str	r3, [r7, #28]
 801078a:	4b71      	ldr	r3, [pc, #452]	@ (8010950 <xTaskIncrementTick+0x220>)
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	4a6e      	ldr	r2, [pc, #440]	@ (8010948 <xTaskIncrementTick+0x218>)
 8010790:	6013      	str	r3, [r2, #0]
 8010792:	4a6f      	ldr	r2, [pc, #444]	@ (8010950 <xTaskIncrementTick+0x220>)
 8010794:	69fb      	ldr	r3, [r7, #28]
 8010796:	6013      	str	r3, [r2, #0]
 8010798:	4b6e      	ldr	r3, [pc, #440]	@ (8010954 <xTaskIncrementTick+0x224>)
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	3301      	adds	r3, #1
 801079e:	4a6d      	ldr	r2, [pc, #436]	@ (8010954 <xTaskIncrementTick+0x224>)
 80107a0:	6013      	str	r3, [r2, #0]
 80107a2:	f000 fcfd 	bl	80111a0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80107a6:	4b6c      	ldr	r3, [pc, #432]	@ (8010958 <xTaskIncrementTick+0x228>)
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	6a3a      	ldr	r2, [r7, #32]
 80107ac:	429a      	cmp	r2, r3
 80107ae:	f0c0 80a8 	bcc.w	8010902 <xTaskIncrementTick+0x1d2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80107b2:	4b65      	ldr	r3, [pc, #404]	@ (8010948 <xTaskIncrementTick+0x218>)
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d104      	bne.n	80107c6 <xTaskIncrementTick+0x96>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 80107bc:	4b66      	ldr	r3, [pc, #408]	@ (8010958 <xTaskIncrementTick+0x228>)
 80107be:	f04f 32ff 	mov.w	r2, #4294967295
 80107c2:	601a      	str	r2, [r3, #0]
                    break;
 80107c4:	e09d      	b.n	8010902 <xTaskIncrementTick+0x1d2>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80107c6:	4b60      	ldr	r3, [pc, #384]	@ (8010948 <xTaskIncrementTick+0x218>)
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	68db      	ldr	r3, [r3, #12]
 80107cc:	68db      	ldr	r3, [r3, #12]
 80107ce:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80107d0:	69bb      	ldr	r3, [r7, #24]
 80107d2:	685b      	ldr	r3, [r3, #4]
 80107d4:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80107d6:	6a3a      	ldr	r2, [r7, #32]
 80107d8:	697b      	ldr	r3, [r7, #20]
 80107da:	429a      	cmp	r2, r3
 80107dc:	d203      	bcs.n	80107e6 <xTaskIncrementTick+0xb6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80107de:	4a5e      	ldr	r2, [pc, #376]	@ (8010958 <xTaskIncrementTick+0x228>)
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	6013      	str	r3, [r2, #0]
                        break;
 80107e4:	e08d      	b.n	8010902 <xTaskIncrementTick+0x1d2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80107e6:	69bb      	ldr	r3, [r7, #24]
 80107e8:	695b      	ldr	r3, [r3, #20]
 80107ea:	613b      	str	r3, [r7, #16]
 80107ec:	69bb      	ldr	r3, [r7, #24]
 80107ee:	689b      	ldr	r3, [r3, #8]
 80107f0:	69ba      	ldr	r2, [r7, #24]
 80107f2:	68d2      	ldr	r2, [r2, #12]
 80107f4:	609a      	str	r2, [r3, #8]
 80107f6:	69bb      	ldr	r3, [r7, #24]
 80107f8:	68db      	ldr	r3, [r3, #12]
 80107fa:	69ba      	ldr	r2, [r7, #24]
 80107fc:	6892      	ldr	r2, [r2, #8]
 80107fe:	605a      	str	r2, [r3, #4]
 8010800:	693b      	ldr	r3, [r7, #16]
 8010802:	685a      	ldr	r2, [r3, #4]
 8010804:	69bb      	ldr	r3, [r7, #24]
 8010806:	3304      	adds	r3, #4
 8010808:	429a      	cmp	r2, r3
 801080a:	d103      	bne.n	8010814 <xTaskIncrementTick+0xe4>
 801080c:	69bb      	ldr	r3, [r7, #24]
 801080e:	68da      	ldr	r2, [r3, #12]
 8010810:	693b      	ldr	r3, [r7, #16]
 8010812:	605a      	str	r2, [r3, #4]
 8010814:	69bb      	ldr	r3, [r7, #24]
 8010816:	2200      	movs	r2, #0
 8010818:	615a      	str	r2, [r3, #20]
 801081a:	693b      	ldr	r3, [r7, #16]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	1e5a      	subs	r2, r3, #1
 8010820:	693b      	ldr	r3, [r7, #16]
 8010822:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010824:	69bb      	ldr	r3, [r7, #24]
 8010826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010828:	2b00      	cmp	r3, #0
 801082a:	d01e      	beq.n	801086a <xTaskIncrementTick+0x13a>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 801082c:	69bb      	ldr	r3, [r7, #24]
 801082e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010830:	60fb      	str	r3, [r7, #12]
 8010832:	69bb      	ldr	r3, [r7, #24]
 8010834:	69db      	ldr	r3, [r3, #28]
 8010836:	69ba      	ldr	r2, [r7, #24]
 8010838:	6a12      	ldr	r2, [r2, #32]
 801083a:	609a      	str	r2, [r3, #8]
 801083c:	69bb      	ldr	r3, [r7, #24]
 801083e:	6a1b      	ldr	r3, [r3, #32]
 8010840:	69ba      	ldr	r2, [r7, #24]
 8010842:	69d2      	ldr	r2, [r2, #28]
 8010844:	605a      	str	r2, [r3, #4]
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	685a      	ldr	r2, [r3, #4]
 801084a:	69bb      	ldr	r3, [r7, #24]
 801084c:	3318      	adds	r3, #24
 801084e:	429a      	cmp	r2, r3
 8010850:	d103      	bne.n	801085a <xTaskIncrementTick+0x12a>
 8010852:	69bb      	ldr	r3, [r7, #24]
 8010854:	6a1a      	ldr	r2, [r3, #32]
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	605a      	str	r2, [r3, #4]
 801085a:	69bb      	ldr	r3, [r7, #24]
 801085c:	2200      	movs	r2, #0
 801085e:	629a      	str	r2, [r3, #40]	@ 0x28
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	1e5a      	subs	r2, r3, #1
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 801086a:	69bb      	ldr	r3, [r7, #24]
 801086c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801086e:	2201      	movs	r2, #1
 8010870:	409a      	lsls	r2, r3
 8010872:	4b3a      	ldr	r3, [pc, #232]	@ (801095c <xTaskIncrementTick+0x22c>)
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	4313      	orrs	r3, r2
 8010878:	4a38      	ldr	r2, [pc, #224]	@ (801095c <xTaskIncrementTick+0x22c>)
 801087a:	6013      	str	r3, [r2, #0]
 801087c:	69bb      	ldr	r3, [r7, #24]
 801087e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010880:	4937      	ldr	r1, [pc, #220]	@ (8010960 <xTaskIncrementTick+0x230>)
 8010882:	4613      	mov	r3, r2
 8010884:	009b      	lsls	r3, r3, #2
 8010886:	4413      	add	r3, r2
 8010888:	009b      	lsls	r3, r3, #2
 801088a:	440b      	add	r3, r1
 801088c:	3304      	adds	r3, #4
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	60bb      	str	r3, [r7, #8]
 8010892:	69bb      	ldr	r3, [r7, #24]
 8010894:	68ba      	ldr	r2, [r7, #8]
 8010896:	609a      	str	r2, [r3, #8]
 8010898:	68bb      	ldr	r3, [r7, #8]
 801089a:	689a      	ldr	r2, [r3, #8]
 801089c:	69bb      	ldr	r3, [r7, #24]
 801089e:	60da      	str	r2, [r3, #12]
 80108a0:	68bb      	ldr	r3, [r7, #8]
 80108a2:	689b      	ldr	r3, [r3, #8]
 80108a4:	69ba      	ldr	r2, [r7, #24]
 80108a6:	3204      	adds	r2, #4
 80108a8:	605a      	str	r2, [r3, #4]
 80108aa:	69bb      	ldr	r3, [r7, #24]
 80108ac:	1d1a      	adds	r2, r3, #4
 80108ae:	68bb      	ldr	r3, [r7, #8]
 80108b0:	609a      	str	r2, [r3, #8]
 80108b2:	69bb      	ldr	r3, [r7, #24]
 80108b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108b6:	4613      	mov	r3, r2
 80108b8:	009b      	lsls	r3, r3, #2
 80108ba:	4413      	add	r3, r2
 80108bc:	009b      	lsls	r3, r3, #2
 80108be:	4a28      	ldr	r2, [pc, #160]	@ (8010960 <xTaskIncrementTick+0x230>)
 80108c0:	441a      	add	r2, r3
 80108c2:	69bb      	ldr	r3, [r7, #24]
 80108c4:	615a      	str	r2, [r3, #20]
 80108c6:	69bb      	ldr	r3, [r7, #24]
 80108c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108ca:	4925      	ldr	r1, [pc, #148]	@ (8010960 <xTaskIncrementTick+0x230>)
 80108cc:	4613      	mov	r3, r2
 80108ce:	009b      	lsls	r3, r3, #2
 80108d0:	4413      	add	r3, r2
 80108d2:	009b      	lsls	r3, r3, #2
 80108d4:	440b      	add	r3, r1
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	69ba      	ldr	r2, [r7, #24]
 80108da:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80108dc:	1c59      	adds	r1, r3, #1
 80108de:	4820      	ldr	r0, [pc, #128]	@ (8010960 <xTaskIncrementTick+0x230>)
 80108e0:	4613      	mov	r3, r2
 80108e2:	009b      	lsls	r3, r3, #2
 80108e4:	4413      	add	r3, r2
 80108e6:	009b      	lsls	r3, r3, #2
 80108e8:	4403      	add	r3, r0
 80108ea:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80108ec:	69bb      	ldr	r3, [r7, #24]
 80108ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108f0:	4b1c      	ldr	r3, [pc, #112]	@ (8010964 <xTaskIncrementTick+0x234>)
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108f6:	429a      	cmp	r2, r3
 80108f8:	f67f af5b 	bls.w	80107b2 <xTaskIncrementTick+0x82>
                            {
                                xSwitchRequired = pdTRUE;
 80108fc:	2301      	movs	r3, #1
 80108fe:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010900:	e757      	b.n	80107b2 <xTaskIncrementTick+0x82>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8010902:	4b18      	ldr	r3, [pc, #96]	@ (8010964 <xTaskIncrementTick+0x234>)
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010908:	4915      	ldr	r1, [pc, #84]	@ (8010960 <xTaskIncrementTick+0x230>)
 801090a:	4613      	mov	r3, r2
 801090c:	009b      	lsls	r3, r3, #2
 801090e:	4413      	add	r3, r2
 8010910:	009b      	lsls	r3, r3, #2
 8010912:	440b      	add	r3, r1
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	2b01      	cmp	r3, #1
 8010918:	d901      	bls.n	801091e <xTaskIncrementTick+0x1ee>
                {
                    xSwitchRequired = pdTRUE;
 801091a:	2301      	movs	r3, #1
 801091c:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 801091e:	4b12      	ldr	r3, [pc, #72]	@ (8010968 <xTaskIncrementTick+0x238>)
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d007      	beq.n	8010936 <xTaskIncrementTick+0x206>
                {
                    xSwitchRequired = pdTRUE;
 8010926:	2301      	movs	r3, #1
 8010928:	627b      	str	r3, [r7, #36]	@ 0x24
 801092a:	e004      	b.n	8010936 <xTaskIncrementTick+0x206>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 801092c:	4b0f      	ldr	r3, [pc, #60]	@ (801096c <xTaskIncrementTick+0x23c>)
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	3301      	adds	r3, #1
 8010932:	4a0e      	ldr	r2, [pc, #56]	@ (801096c <xTaskIncrementTick+0x23c>)
 8010934:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8010936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010938:	4618      	mov	r0, r3
 801093a:	3728      	adds	r7, #40	@ 0x28
 801093c:	46bd      	mov	sp, r7
 801093e:	bd80      	pop	{r7, pc}
 8010940:	20000614 	.word	0x20000614
 8010944:	200005f0 	.word	0x200005f0
 8010948:	200005a4 	.word	0x200005a4
 801094c:	08019980 	.word	0x08019980
 8010950:	200005a8 	.word	0x200005a8
 8010954:	20000604 	.word	0x20000604
 8010958:	2000060c 	.word	0x2000060c
 801095c:	200005f4 	.word	0x200005f4
 8010960:	200004f0 	.word	0x200004f0
 8010964:	200004ec 	.word	0x200004ec
 8010968:	20000600 	.word	0x20000600
 801096c:	200005fc 	.word	0x200005fc

08010970 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8010970:	b580      	push	{r7, lr}
 8010972:	b088      	sub	sp, #32
 8010974:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8010976:	4b4c      	ldr	r3, [pc, #304]	@ (8010aa8 <vTaskSwitchContext+0x138>)
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d003      	beq.n	8010986 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 801097e:	4b4b      	ldr	r3, [pc, #300]	@ (8010aac <vTaskSwitchContext+0x13c>)
 8010980:	2201      	movs	r2, #1
 8010982:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8010984:	e08c      	b.n	8010aa0 <vTaskSwitchContext+0x130>
            xYieldPendings[ 0 ] = pdFALSE;
 8010986:	4b49      	ldr	r3, [pc, #292]	@ (8010aac <vTaskSwitchContext+0x13c>)
 8010988:	2200      	movs	r2, #0
 801098a:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime[ 0 ] = portGET_RUN_TIME_COUNTER_VALUE();
 801098c:	f7ff fe2e 	bl	80105ec <xTaskGetTickCount>
 8010990:	4603      	mov	r3, r0
 8010992:	4a47      	ldr	r2, [pc, #284]	@ (8010ab0 <vTaskSwitchContext+0x140>)
 8010994:	6013      	str	r3, [r2, #0]
                if( ulTotalRunTime[ 0 ] > ulTaskSwitchedInTime[ 0 ] )
 8010996:	4b46      	ldr	r3, [pc, #280]	@ (8010ab0 <vTaskSwitchContext+0x140>)
 8010998:	681a      	ldr	r2, [r3, #0]
 801099a:	4b46      	ldr	r3, [pc, #280]	@ (8010ab4 <vTaskSwitchContext+0x144>)
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	429a      	cmp	r2, r3
 80109a0:	d909      	bls.n	80109b6 <vTaskSwitchContext+0x46>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime[ 0 ] - ulTaskSwitchedInTime[ 0 ] );
 80109a2:	4b43      	ldr	r3, [pc, #268]	@ (8010ab0 <vTaskSwitchContext+0x140>)
 80109a4:	681a      	ldr	r2, [r3, #0]
 80109a6:	4b43      	ldr	r3, [pc, #268]	@ (8010ab4 <vTaskSwitchContext+0x144>)
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	1ad1      	subs	r1, r2, r3
 80109ac:	4b42      	ldr	r3, [pc, #264]	@ (8010ab8 <vTaskSwitchContext+0x148>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80109b2:	440a      	add	r2, r1
 80109b4:	659a      	str	r2, [r3, #88]	@ 0x58
                ulTaskSwitchedInTime[ 0 ] = ulTotalRunTime[ 0 ];
 80109b6:	4b3e      	ldr	r3, [pc, #248]	@ (8010ab0 <vTaskSwitchContext+0x140>)
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	4a3e      	ldr	r2, [pc, #248]	@ (8010ab4 <vTaskSwitchContext+0x144>)
 80109bc:	6013      	str	r3, [r2, #0]
            taskCHECK_FOR_STACK_OVERFLOW();
 80109be:	4b3e      	ldr	r3, [pc, #248]	@ (8010ab8 <vTaskSwitchContext+0x148>)
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109c4:	61fb      	str	r3, [r7, #28]
 80109c6:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 80109ca:	61bb      	str	r3, [r7, #24]
 80109cc:	69fb      	ldr	r3, [r7, #28]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	69ba      	ldr	r2, [r7, #24]
 80109d2:	429a      	cmp	r2, r3
 80109d4:	d111      	bne.n	80109fa <vTaskSwitchContext+0x8a>
 80109d6:	69fb      	ldr	r3, [r7, #28]
 80109d8:	3304      	adds	r3, #4
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	69ba      	ldr	r2, [r7, #24]
 80109de:	429a      	cmp	r2, r3
 80109e0:	d10b      	bne.n	80109fa <vTaskSwitchContext+0x8a>
 80109e2:	69fb      	ldr	r3, [r7, #28]
 80109e4:	3308      	adds	r3, #8
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	69ba      	ldr	r2, [r7, #24]
 80109ea:	429a      	cmp	r2, r3
 80109ec:	d105      	bne.n	80109fa <vTaskSwitchContext+0x8a>
 80109ee:	69fb      	ldr	r3, [r7, #28]
 80109f0:	330c      	adds	r3, #12
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	69ba      	ldr	r2, [r7, #24]
 80109f6:	429a      	cmp	r2, r3
 80109f8:	d009      	beq.n	8010a0e <vTaskSwitchContext+0x9e>
 80109fa:	4b2f      	ldr	r3, [pc, #188]	@ (8010ab8 <vTaskSwitchContext+0x148>)
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	3334      	adds	r3, #52	@ 0x34
 8010a00:	617b      	str	r3, [r7, #20]
 8010a02:	4b2d      	ldr	r3, [pc, #180]	@ (8010ab8 <vTaskSwitchContext+0x148>)
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	6979      	ldr	r1, [r7, #20]
 8010a08:	4618      	mov	r0, r3
 8010a0a:	f7f5 fabf 	bl	8005f8c <vApplicationStackOverflowHook>
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8010a0e:	4b2b      	ldr	r3, [pc, #172]	@ (8010abc <vTaskSwitchContext+0x14c>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	60bb      	str	r3, [r7, #8]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010a14:	68bb      	ldr	r3, [r7, #8]
 8010a16:	fab3 f383 	clz	r3, r3
 8010a1a:	71fb      	strb	r3, [r7, #7]
        return ucReturn;
 8010a1c:	79fb      	ldrb	r3, [r7, #7]
 8010a1e:	f1c3 031f 	rsb	r3, r3, #31
 8010a22:	613b      	str	r3, [r7, #16]
 8010a24:	4926      	ldr	r1, [pc, #152]	@ (8010ac0 <vTaskSwitchContext+0x150>)
 8010a26:	693a      	ldr	r2, [r7, #16]
 8010a28:	4613      	mov	r3, r2
 8010a2a:	009b      	lsls	r3, r3, #2
 8010a2c:	4413      	add	r3, r2
 8010a2e:	009b      	lsls	r3, r3, #2
 8010a30:	440b      	add	r3, r1
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d110      	bne.n	8010a5a <vTaskSwitchContext+0xea>
    __asm volatile
 8010a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a3c:	b672      	cpsid	i
 8010a3e:	f383 8811 	msr	BASEPRI, r3
 8010a42:	f3bf 8f6f 	isb	sy
 8010a46:	f3bf 8f4f 	dsb	sy
 8010a4a:	b662      	cpsie	i
 8010a4c:	603b      	str	r3, [r7, #0]
}
 8010a4e:	bf00      	nop
 8010a50:	f241 31fa 	movw	r1, #5114	@ 0x13fa
 8010a54:	481b      	ldr	r0, [pc, #108]	@ (8010ac4 <vTaskSwitchContext+0x154>)
 8010a56:	f7f5 fef3 	bl	8006840 <vAssertCalled>
 8010a5a:	693a      	ldr	r2, [r7, #16]
 8010a5c:	4613      	mov	r3, r2
 8010a5e:	009b      	lsls	r3, r3, #2
 8010a60:	4413      	add	r3, r2
 8010a62:	009b      	lsls	r3, r3, #2
 8010a64:	4a16      	ldr	r2, [pc, #88]	@ (8010ac0 <vTaskSwitchContext+0x150>)
 8010a66:	4413      	add	r3, r2
 8010a68:	60fb      	str	r3, [r7, #12]
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	685b      	ldr	r3, [r3, #4]
 8010a6e:	685a      	ldr	r2, [r3, #4]
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	605a      	str	r2, [r3, #4]
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	685a      	ldr	r2, [r3, #4]
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	3308      	adds	r3, #8
 8010a7c:	429a      	cmp	r2, r3
 8010a7e:	d103      	bne.n	8010a88 <vTaskSwitchContext+0x118>
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	68da      	ldr	r2, [r3, #12]
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	605a      	str	r2, [r3, #4]
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	685b      	ldr	r3, [r3, #4]
 8010a8c:	68db      	ldr	r3, [r3, #12]
 8010a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8010ab8 <vTaskSwitchContext+0x148>)
 8010a90:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8010a92:	4b09      	ldr	r3, [pc, #36]	@ (8010ab8 <vTaskSwitchContext+0x148>)
 8010a94:	681b      	ldr	r3, [r3, #0]
                configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8010a96:	4b08      	ldr	r3, [pc, #32]	@ (8010ab8 <vTaskSwitchContext+0x148>)
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	335c      	adds	r3, #92	@ 0x5c
 8010a9c:	4a0a      	ldr	r2, [pc, #40]	@ (8010ac8 <vTaskSwitchContext+0x158>)
 8010a9e:	6013      	str	r3, [r2, #0]
    }
 8010aa0:	bf00      	nop
 8010aa2:	3720      	adds	r7, #32
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bd80      	pop	{r7, pc}
 8010aa8:	20000614 	.word	0x20000614
 8010aac:	20000600 	.word	0x20000600
 8010ab0:	2000061c 	.word	0x2000061c
 8010ab4:	20000618 	.word	0x20000618
 8010ab8:	200004ec 	.word	0x200004ec
 8010abc:	200005f4 	.word	0x200005f4
 8010ac0:	200004f0 	.word	0x200004f0
 8010ac4:	08019980 	.word	0x08019980
 8010ac8:	200001d4 	.word	0x200001d4

08010acc <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b084      	sub	sp, #16
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
 8010ad4:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d110      	bne.n	8010afe <vTaskPlaceOnEventList+0x32>
    __asm volatile
 8010adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ae0:	b672      	cpsid	i
 8010ae2:	f383 8811 	msr	BASEPRI, r3
 8010ae6:	f3bf 8f6f 	isb	sy
 8010aea:	f3bf 8f4f 	dsb	sy
 8010aee:	b662      	cpsie	i
 8010af0:	60fb      	str	r3, [r7, #12]
}
 8010af2:	bf00      	nop
 8010af4:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 8010af8:	4808      	ldr	r0, [pc, #32]	@ (8010b1c <vTaskPlaceOnEventList+0x50>)
 8010afa:	f7f5 fea1 	bl	8006840 <vAssertCalled>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010afe:	4b08      	ldr	r3, [pc, #32]	@ (8010b20 <vTaskPlaceOnEventList+0x54>)
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	3318      	adds	r3, #24
 8010b04:	4619      	mov	r1, r3
 8010b06:	6878      	ldr	r0, [r7, #4]
 8010b08:	f7fe f9c9 	bl	800ee9e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010b0c:	2101      	movs	r1, #1
 8010b0e:	6838      	ldr	r0, [r7, #0]
 8010b10:	f000 fdc6 	bl	80116a0 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8010b14:	bf00      	nop
 8010b16:	3710      	adds	r7, #16
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	bd80      	pop	{r7, pc}
 8010b1c:	08019980 	.word	0x08019980
 8010b20:	200004ec 	.word	0x200004ec

08010b24 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b086      	sub	sp, #24
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	60f8      	str	r0, [r7, #12]
 8010b2c:	60b9      	str	r1, [r7, #8]
 8010b2e:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d110      	bne.n	8010b58 <vTaskPlaceOnEventListRestricted+0x34>
    __asm volatile
 8010b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b3a:	b672      	cpsid	i
 8010b3c:	f383 8811 	msr	BASEPRI, r3
 8010b40:	f3bf 8f6f 	isb	sy
 8010b44:	f3bf 8f4f 	dsb	sy
 8010b48:	b662      	cpsie	i
 8010b4a:	613b      	str	r3, [r7, #16]
}
 8010b4c:	bf00      	nop
 8010b4e:	f241 41be 	movw	r1, #5310	@ 0x14be
 8010b52:	4819      	ldr	r0, [pc, #100]	@ (8010bb8 <vTaskPlaceOnEventListRestricted+0x94>)
 8010b54:	f7f5 fe74 	bl	8006840 <vAssertCalled>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	685b      	ldr	r3, [r3, #4]
 8010b5c:	617b      	str	r3, [r7, #20]
 8010b5e:	4b17      	ldr	r3, [pc, #92]	@ (8010bbc <vTaskPlaceOnEventListRestricted+0x98>)
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	697a      	ldr	r2, [r7, #20]
 8010b64:	61da      	str	r2, [r3, #28]
 8010b66:	4b15      	ldr	r3, [pc, #84]	@ (8010bbc <vTaskPlaceOnEventListRestricted+0x98>)
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	697a      	ldr	r2, [r7, #20]
 8010b6c:	6892      	ldr	r2, [r2, #8]
 8010b6e:	621a      	str	r2, [r3, #32]
 8010b70:	4b12      	ldr	r3, [pc, #72]	@ (8010bbc <vTaskPlaceOnEventListRestricted+0x98>)
 8010b72:	681a      	ldr	r2, [r3, #0]
 8010b74:	697b      	ldr	r3, [r7, #20]
 8010b76:	689b      	ldr	r3, [r3, #8]
 8010b78:	3218      	adds	r2, #24
 8010b7a:	605a      	str	r2, [r3, #4]
 8010b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8010bbc <vTaskPlaceOnEventListRestricted+0x98>)
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	f103 0218 	add.w	r2, r3, #24
 8010b84:	697b      	ldr	r3, [r7, #20]
 8010b86:	609a      	str	r2, [r3, #8]
 8010b88:	4b0c      	ldr	r3, [pc, #48]	@ (8010bbc <vTaskPlaceOnEventListRestricted+0x98>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	68fa      	ldr	r2, [r7, #12]
 8010b8e:	629a      	str	r2, [r3, #40]	@ 0x28
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	1c5a      	adds	r2, r3, #1
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d002      	beq.n	8010ba6 <vTaskPlaceOnEventListRestricted+0x82>
        {
            xTicksToWait = portMAX_DELAY;
 8010ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8010ba4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010ba6:	6879      	ldr	r1, [r7, #4]
 8010ba8:	68b8      	ldr	r0, [r7, #8]
 8010baa:	f000 fd79 	bl	80116a0 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 8010bae:	bf00      	nop
 8010bb0:	3718      	adds	r7, #24
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	bd80      	pop	{r7, pc}
 8010bb6:	bf00      	nop
 8010bb8:	08019980 	.word	0x08019980
 8010bbc:	200004ec 	.word	0x200004ec

08010bc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b08a      	sub	sp, #40	@ 0x28
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	68db      	ldr	r3, [r3, #12]
 8010bcc:	68db      	ldr	r3, [r3, #12]
 8010bce:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8010bd0:	6a3b      	ldr	r3, [r7, #32]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d110      	bne.n	8010bf8 <xTaskRemoveFromEventList+0x38>
    __asm volatile
 8010bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bda:	b672      	cpsid	i
 8010bdc:	f383 8811 	msr	BASEPRI, r3
 8010be0:	f3bf 8f6f 	isb	sy
 8010be4:	f3bf 8f4f 	dsb	sy
 8010be8:	b662      	cpsie	i
 8010bea:	60fb      	str	r3, [r7, #12]
}
 8010bec:	bf00      	nop
 8010bee:	f241 41f5 	movw	r1, #5365	@ 0x14f5
 8010bf2:	485b      	ldr	r0, [pc, #364]	@ (8010d60 <xTaskRemoveFromEventList+0x1a0>)
 8010bf4:	f7f5 fe24 	bl	8006840 <vAssertCalled>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8010bf8:	6a3b      	ldr	r3, [r7, #32]
 8010bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010bfc:	61fb      	str	r3, [r7, #28]
 8010bfe:	6a3b      	ldr	r3, [r7, #32]
 8010c00:	69db      	ldr	r3, [r3, #28]
 8010c02:	6a3a      	ldr	r2, [r7, #32]
 8010c04:	6a12      	ldr	r2, [r2, #32]
 8010c06:	609a      	str	r2, [r3, #8]
 8010c08:	6a3b      	ldr	r3, [r7, #32]
 8010c0a:	6a1b      	ldr	r3, [r3, #32]
 8010c0c:	6a3a      	ldr	r2, [r7, #32]
 8010c0e:	69d2      	ldr	r2, [r2, #28]
 8010c10:	605a      	str	r2, [r3, #4]
 8010c12:	69fb      	ldr	r3, [r7, #28]
 8010c14:	685a      	ldr	r2, [r3, #4]
 8010c16:	6a3b      	ldr	r3, [r7, #32]
 8010c18:	3318      	adds	r3, #24
 8010c1a:	429a      	cmp	r2, r3
 8010c1c:	d103      	bne.n	8010c26 <xTaskRemoveFromEventList+0x66>
 8010c1e:	6a3b      	ldr	r3, [r7, #32]
 8010c20:	6a1a      	ldr	r2, [r3, #32]
 8010c22:	69fb      	ldr	r3, [r7, #28]
 8010c24:	605a      	str	r2, [r3, #4]
 8010c26:	6a3b      	ldr	r3, [r7, #32]
 8010c28:	2200      	movs	r2, #0
 8010c2a:	629a      	str	r2, [r3, #40]	@ 0x28
 8010c2c:	69fb      	ldr	r3, [r7, #28]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	1e5a      	subs	r2, r3, #1
 8010c32:	69fb      	ldr	r3, [r7, #28]
 8010c34:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8010c36:	4b4b      	ldr	r3, [pc, #300]	@ (8010d64 <xTaskRemoveFromEventList+0x1a4>)
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d160      	bne.n	8010d00 <xTaskRemoveFromEventList+0x140>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8010c3e:	6a3b      	ldr	r3, [r7, #32]
 8010c40:	695b      	ldr	r3, [r3, #20]
 8010c42:	617b      	str	r3, [r7, #20]
 8010c44:	6a3b      	ldr	r3, [r7, #32]
 8010c46:	689b      	ldr	r3, [r3, #8]
 8010c48:	6a3a      	ldr	r2, [r7, #32]
 8010c4a:	68d2      	ldr	r2, [r2, #12]
 8010c4c:	609a      	str	r2, [r3, #8]
 8010c4e:	6a3b      	ldr	r3, [r7, #32]
 8010c50:	68db      	ldr	r3, [r3, #12]
 8010c52:	6a3a      	ldr	r2, [r7, #32]
 8010c54:	6892      	ldr	r2, [r2, #8]
 8010c56:	605a      	str	r2, [r3, #4]
 8010c58:	697b      	ldr	r3, [r7, #20]
 8010c5a:	685a      	ldr	r2, [r3, #4]
 8010c5c:	6a3b      	ldr	r3, [r7, #32]
 8010c5e:	3304      	adds	r3, #4
 8010c60:	429a      	cmp	r2, r3
 8010c62:	d103      	bne.n	8010c6c <xTaskRemoveFromEventList+0xac>
 8010c64:	6a3b      	ldr	r3, [r7, #32]
 8010c66:	68da      	ldr	r2, [r3, #12]
 8010c68:	697b      	ldr	r3, [r7, #20]
 8010c6a:	605a      	str	r2, [r3, #4]
 8010c6c:	6a3b      	ldr	r3, [r7, #32]
 8010c6e:	2200      	movs	r2, #0
 8010c70:	615a      	str	r2, [r3, #20]
 8010c72:	697b      	ldr	r3, [r7, #20]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	1e5a      	subs	r2, r3, #1
 8010c78:	697b      	ldr	r3, [r7, #20]
 8010c7a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8010c7c:	6a3b      	ldr	r3, [r7, #32]
 8010c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c80:	2201      	movs	r2, #1
 8010c82:	409a      	lsls	r2, r3
 8010c84:	4b38      	ldr	r3, [pc, #224]	@ (8010d68 <xTaskRemoveFromEventList+0x1a8>)
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	4313      	orrs	r3, r2
 8010c8a:	4a37      	ldr	r2, [pc, #220]	@ (8010d68 <xTaskRemoveFromEventList+0x1a8>)
 8010c8c:	6013      	str	r3, [r2, #0]
 8010c8e:	6a3b      	ldr	r3, [r7, #32]
 8010c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c92:	4936      	ldr	r1, [pc, #216]	@ (8010d6c <xTaskRemoveFromEventList+0x1ac>)
 8010c94:	4613      	mov	r3, r2
 8010c96:	009b      	lsls	r3, r3, #2
 8010c98:	4413      	add	r3, r2
 8010c9a:	009b      	lsls	r3, r3, #2
 8010c9c:	440b      	add	r3, r1
 8010c9e:	3304      	adds	r3, #4
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	613b      	str	r3, [r7, #16]
 8010ca4:	6a3b      	ldr	r3, [r7, #32]
 8010ca6:	693a      	ldr	r2, [r7, #16]
 8010ca8:	609a      	str	r2, [r3, #8]
 8010caa:	693b      	ldr	r3, [r7, #16]
 8010cac:	689a      	ldr	r2, [r3, #8]
 8010cae:	6a3b      	ldr	r3, [r7, #32]
 8010cb0:	60da      	str	r2, [r3, #12]
 8010cb2:	693b      	ldr	r3, [r7, #16]
 8010cb4:	689b      	ldr	r3, [r3, #8]
 8010cb6:	6a3a      	ldr	r2, [r7, #32]
 8010cb8:	3204      	adds	r2, #4
 8010cba:	605a      	str	r2, [r3, #4]
 8010cbc:	6a3b      	ldr	r3, [r7, #32]
 8010cbe:	1d1a      	adds	r2, r3, #4
 8010cc0:	693b      	ldr	r3, [r7, #16]
 8010cc2:	609a      	str	r2, [r3, #8]
 8010cc4:	6a3b      	ldr	r3, [r7, #32]
 8010cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010cc8:	4613      	mov	r3, r2
 8010cca:	009b      	lsls	r3, r3, #2
 8010ccc:	4413      	add	r3, r2
 8010cce:	009b      	lsls	r3, r3, #2
 8010cd0:	4a26      	ldr	r2, [pc, #152]	@ (8010d6c <xTaskRemoveFromEventList+0x1ac>)
 8010cd2:	441a      	add	r2, r3
 8010cd4:	6a3b      	ldr	r3, [r7, #32]
 8010cd6:	615a      	str	r2, [r3, #20]
 8010cd8:	6a3b      	ldr	r3, [r7, #32]
 8010cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010cdc:	4923      	ldr	r1, [pc, #140]	@ (8010d6c <xTaskRemoveFromEventList+0x1ac>)
 8010cde:	4613      	mov	r3, r2
 8010ce0:	009b      	lsls	r3, r3, #2
 8010ce2:	4413      	add	r3, r2
 8010ce4:	009b      	lsls	r3, r3, #2
 8010ce6:	440b      	add	r3, r1
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	6a3a      	ldr	r2, [r7, #32]
 8010cec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8010cee:	1c59      	adds	r1, r3, #1
 8010cf0:	481e      	ldr	r0, [pc, #120]	@ (8010d6c <xTaskRemoveFromEventList+0x1ac>)
 8010cf2:	4613      	mov	r3, r2
 8010cf4:	009b      	lsls	r3, r3, #2
 8010cf6:	4413      	add	r3, r2
 8010cf8:	009b      	lsls	r3, r3, #2
 8010cfa:	4403      	add	r3, r0
 8010cfc:	6019      	str	r1, [r3, #0]
 8010cfe:	e01b      	b.n	8010d38 <xTaskRemoveFromEventList+0x178>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010d00:	4b1b      	ldr	r3, [pc, #108]	@ (8010d70 <xTaskRemoveFromEventList+0x1b0>)
 8010d02:	685b      	ldr	r3, [r3, #4]
 8010d04:	61bb      	str	r3, [r7, #24]
 8010d06:	6a3b      	ldr	r3, [r7, #32]
 8010d08:	69ba      	ldr	r2, [r7, #24]
 8010d0a:	61da      	str	r2, [r3, #28]
 8010d0c:	69bb      	ldr	r3, [r7, #24]
 8010d0e:	689a      	ldr	r2, [r3, #8]
 8010d10:	6a3b      	ldr	r3, [r7, #32]
 8010d12:	621a      	str	r2, [r3, #32]
 8010d14:	69bb      	ldr	r3, [r7, #24]
 8010d16:	689b      	ldr	r3, [r3, #8]
 8010d18:	6a3a      	ldr	r2, [r7, #32]
 8010d1a:	3218      	adds	r2, #24
 8010d1c:	605a      	str	r2, [r3, #4]
 8010d1e:	6a3b      	ldr	r3, [r7, #32]
 8010d20:	f103 0218 	add.w	r2, r3, #24
 8010d24:	69bb      	ldr	r3, [r7, #24]
 8010d26:	609a      	str	r2, [r3, #8]
 8010d28:	6a3b      	ldr	r3, [r7, #32]
 8010d2a:	4a11      	ldr	r2, [pc, #68]	@ (8010d70 <xTaskRemoveFromEventList+0x1b0>)
 8010d2c:	629a      	str	r2, [r3, #40]	@ 0x28
 8010d2e:	4b10      	ldr	r3, [pc, #64]	@ (8010d70 <xTaskRemoveFromEventList+0x1b0>)
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	3301      	adds	r3, #1
 8010d34:	4a0e      	ldr	r2, [pc, #56]	@ (8010d70 <xTaskRemoveFromEventList+0x1b0>)
 8010d36:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010d38:	6a3b      	ldr	r3, [r7, #32]
 8010d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8010d74 <xTaskRemoveFromEventList+0x1b4>)
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d42:	429a      	cmp	r2, r3
 8010d44:	d905      	bls.n	8010d52 <xTaskRemoveFromEventList+0x192>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8010d46:	2301      	movs	r3, #1
 8010d48:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8010d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8010d78 <xTaskRemoveFromEventList+0x1b8>)
 8010d4c:	2201      	movs	r2, #1
 8010d4e:	601a      	str	r2, [r3, #0]
 8010d50:	e001      	b.n	8010d56 <xTaskRemoveFromEventList+0x196>
        }
        else
        {
            xReturn = pdFALSE;
 8010d52:	2300      	movs	r3, #0
 8010d54:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8010d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010d58:	4618      	mov	r0, r3
 8010d5a:	3728      	adds	r7, #40	@ 0x28
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	bd80      	pop	{r7, pc}
 8010d60:	08019980 	.word	0x08019980
 8010d64:	20000614 	.word	0x20000614
 8010d68:	200005f4 	.word	0x200005f4
 8010d6c:	200004f0 	.word	0x200004f0
 8010d70:	200005ac 	.word	0x200005ac
 8010d74:	200004ec 	.word	0x200004ec
 8010d78:	20000600 	.word	0x20000600

08010d7c <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010d7c:	b480      	push	{r7}
 8010d7e:	b083      	sub	sp, #12
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010d84:	4b06      	ldr	r3, [pc, #24]	@ (8010da0 <vTaskInternalSetTimeOutState+0x24>)
 8010d86:	681a      	ldr	r2, [r3, #0]
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8010d8c:	4b05      	ldr	r3, [pc, #20]	@ (8010da4 <vTaskInternalSetTimeOutState+0x28>)
 8010d8e:	681a      	ldr	r2, [r3, #0]
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8010d94:	bf00      	nop
 8010d96:	370c      	adds	r7, #12
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9e:	4770      	bx	lr
 8010da0:	20000604 	.word	0x20000604
 8010da4:	200005f0 	.word	0x200005f0

08010da8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b088      	sub	sp, #32
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
 8010db0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d110      	bne.n	8010dda <xTaskCheckForTimeOut+0x32>
    __asm volatile
 8010db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dbc:	b672      	cpsid	i
 8010dbe:	f383 8811 	msr	BASEPRI, r3
 8010dc2:	f3bf 8f6f 	isb	sy
 8010dc6:	f3bf 8f4f 	dsb	sy
 8010dca:	b662      	cpsie	i
 8010dcc:	613b      	str	r3, [r7, #16]
}
 8010dce:	bf00      	nop
 8010dd0:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 8010dd4:	482b      	ldr	r0, [pc, #172]	@ (8010e84 <xTaskCheckForTimeOut+0xdc>)
 8010dd6:	f7f5 fd33 	bl	8006840 <vAssertCalled>
    configASSERT( pxTicksToWait );
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d110      	bne.n	8010e02 <xTaskCheckForTimeOut+0x5a>
    __asm volatile
 8010de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010de4:	b672      	cpsid	i
 8010de6:	f383 8811 	msr	BASEPRI, r3
 8010dea:	f3bf 8f6f 	isb	sy
 8010dee:	f3bf 8f4f 	dsb	sy
 8010df2:	b662      	cpsie	i
 8010df4:	60fb      	str	r3, [r7, #12]
}
 8010df6:	bf00      	nop
 8010df8:	f241 51a6 	movw	r1, #5542	@ 0x15a6
 8010dfc:	4821      	ldr	r0, [pc, #132]	@ (8010e84 <xTaskCheckForTimeOut+0xdc>)
 8010dfe:	f7f5 fd1f 	bl	8006840 <vAssertCalled>

    taskENTER_CRITICAL();
 8010e02:	f001 f8d5 	bl	8011fb0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8010e06:	4b20      	ldr	r3, [pc, #128]	@ (8010e88 <xTaskCheckForTimeOut+0xe0>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	685b      	ldr	r3, [r3, #4]
 8010e10:	69ba      	ldr	r2, [r7, #24]
 8010e12:	1ad3      	subs	r3, r2, r3
 8010e14:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8010e16:	683b      	ldr	r3, [r7, #0]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e1e:	d102      	bne.n	8010e26 <xTaskCheckForTimeOut+0x7e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8010e20:	2300      	movs	r3, #0
 8010e22:	61fb      	str	r3, [r7, #28]
 8010e24:	e026      	b.n	8010e74 <xTaskCheckForTimeOut+0xcc>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	681a      	ldr	r2, [r3, #0]
 8010e2a:	4b18      	ldr	r3, [pc, #96]	@ (8010e8c <xTaskCheckForTimeOut+0xe4>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	429a      	cmp	r2, r3
 8010e30:	d00a      	beq.n	8010e48 <xTaskCheckForTimeOut+0xa0>
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	685b      	ldr	r3, [r3, #4]
 8010e36:	69ba      	ldr	r2, [r7, #24]
 8010e38:	429a      	cmp	r2, r3
 8010e3a:	d305      	bcc.n	8010e48 <xTaskCheckForTimeOut+0xa0>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8010e3c:	2301      	movs	r3, #1
 8010e3e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8010e40:	683b      	ldr	r3, [r7, #0]
 8010e42:	2200      	movs	r2, #0
 8010e44:	601a      	str	r2, [r3, #0]
 8010e46:	e015      	b.n	8010e74 <xTaskCheckForTimeOut+0xcc>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8010e48:	683b      	ldr	r3, [r7, #0]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	697a      	ldr	r2, [r7, #20]
 8010e4e:	429a      	cmp	r2, r3
 8010e50:	d20b      	bcs.n	8010e6a <xTaskCheckForTimeOut+0xc2>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8010e52:	683b      	ldr	r3, [r7, #0]
 8010e54:	681a      	ldr	r2, [r3, #0]
 8010e56:	697b      	ldr	r3, [r7, #20]
 8010e58:	1ad2      	subs	r2, r2, r3
 8010e5a:	683b      	ldr	r3, [r7, #0]
 8010e5c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8010e5e:	6878      	ldr	r0, [r7, #4]
 8010e60:	f7ff ff8c 	bl	8010d7c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8010e64:	2300      	movs	r3, #0
 8010e66:	61fb      	str	r3, [r7, #28]
 8010e68:	e004      	b.n	8010e74 <xTaskCheckForTimeOut+0xcc>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8010e6a:	683b      	ldr	r3, [r7, #0]
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8010e70:	2301      	movs	r3, #1
 8010e72:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8010e74:	f001 f8d4 	bl	8012020 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8010e78:	69fb      	ldr	r3, [r7, #28]
}
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	3720      	adds	r7, #32
 8010e7e:	46bd      	mov	sp, r7
 8010e80:	bd80      	pop	{r7, pc}
 8010e82:	bf00      	nop
 8010e84:	08019980 	.word	0x08019980
 8010e88:	200005f0 	.word	0x200005f0
 8010e8c:	20000604 	.word	0x20000604

08010e90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010e90:	b480      	push	{r7}
 8010e92:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8010e94:	4b03      	ldr	r3, [pc, #12]	@ (8010ea4 <vTaskMissedYield+0x14>)
 8010e96:	2201      	movs	r2, #1
 8010e98:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8010e9a:	bf00      	nop
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea2:	4770      	bx	lr
 8010ea4:	20000600 	.word	0x20000600

08010ea8 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b082      	sub	sp, #8
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8010eb0:	f000 f852 	bl	8010f58 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8010eb4:	4b06      	ldr	r3, [pc, #24]	@ (8010ed0 <prvIdleTask+0x28>)
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	2b01      	cmp	r3, #1
 8010eba:	d9f9      	bls.n	8010eb0 <prvIdleTask+0x8>
            {
                taskYIELD();
 8010ebc:	4b05      	ldr	r3, [pc, #20]	@ (8010ed4 <prvIdleTask+0x2c>)
 8010ebe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010ec2:	601a      	str	r2, [r3, #0]
 8010ec4:	f3bf 8f4f 	dsb	sy
 8010ec8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8010ecc:	e7f0      	b.n	8010eb0 <prvIdleTask+0x8>
 8010ece:	bf00      	nop
 8010ed0:	200004f0 	.word	0x200004f0
 8010ed4:	e000ed04 	.word	0xe000ed04

08010ed8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b082      	sub	sp, #8
 8010edc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010ede:	2300      	movs	r3, #0
 8010ee0:	607b      	str	r3, [r7, #4]
 8010ee2:	e00c      	b.n	8010efe <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010ee4:	687a      	ldr	r2, [r7, #4]
 8010ee6:	4613      	mov	r3, r2
 8010ee8:	009b      	lsls	r3, r3, #2
 8010eea:	4413      	add	r3, r2
 8010eec:	009b      	lsls	r3, r3, #2
 8010eee:	4a12      	ldr	r2, [pc, #72]	@ (8010f38 <prvInitialiseTaskLists+0x60>)
 8010ef0:	4413      	add	r3, r2
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	f7fd ff82 	bl	800edfc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	3301      	adds	r3, #1
 8010efc:	607b      	str	r3, [r7, #4]
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	2b06      	cmp	r3, #6
 8010f02:	d9ef      	bls.n	8010ee4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8010f04:	480d      	ldr	r0, [pc, #52]	@ (8010f3c <prvInitialiseTaskLists+0x64>)
 8010f06:	f7fd ff79 	bl	800edfc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8010f0a:	480d      	ldr	r0, [pc, #52]	@ (8010f40 <prvInitialiseTaskLists+0x68>)
 8010f0c:	f7fd ff76 	bl	800edfc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8010f10:	480c      	ldr	r0, [pc, #48]	@ (8010f44 <prvInitialiseTaskLists+0x6c>)
 8010f12:	f7fd ff73 	bl	800edfc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8010f16:	480c      	ldr	r0, [pc, #48]	@ (8010f48 <prvInitialiseTaskLists+0x70>)
 8010f18:	f7fd ff70 	bl	800edfc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8010f1c:	480b      	ldr	r0, [pc, #44]	@ (8010f4c <prvInitialiseTaskLists+0x74>)
 8010f1e:	f7fd ff6d 	bl	800edfc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8010f22:	4b0b      	ldr	r3, [pc, #44]	@ (8010f50 <prvInitialiseTaskLists+0x78>)
 8010f24:	4a05      	ldr	r2, [pc, #20]	@ (8010f3c <prvInitialiseTaskLists+0x64>)
 8010f26:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010f28:	4b0a      	ldr	r3, [pc, #40]	@ (8010f54 <prvInitialiseTaskLists+0x7c>)
 8010f2a:	4a05      	ldr	r2, [pc, #20]	@ (8010f40 <prvInitialiseTaskLists+0x68>)
 8010f2c:	601a      	str	r2, [r3, #0]
}
 8010f2e:	bf00      	nop
 8010f30:	3708      	adds	r7, #8
 8010f32:	46bd      	mov	sp, r7
 8010f34:	bd80      	pop	{r7, pc}
 8010f36:	bf00      	nop
 8010f38:	200004f0 	.word	0x200004f0
 8010f3c:	2000057c 	.word	0x2000057c
 8010f40:	20000590 	.word	0x20000590
 8010f44:	200005ac 	.word	0x200005ac
 8010f48:	200005c0 	.word	0x200005c0
 8010f4c:	200005d8 	.word	0x200005d8
 8010f50:	200005a4 	.word	0x200005a4
 8010f54:	200005a8 	.word	0x200005a8

08010f58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b082      	sub	sp, #8
 8010f5c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010f5e:	e019      	b.n	8010f94 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8010f60:	f001 f826 	bl	8011fb0 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8010f64:	4b10      	ldr	r3, [pc, #64]	@ (8010fa8 <prvCheckTasksWaitingTermination+0x50>)
 8010f66:	68db      	ldr	r3, [r3, #12]
 8010f68:	68db      	ldr	r3, [r3, #12]
 8010f6a:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	3304      	adds	r3, #4
 8010f70:	4618      	mov	r0, r3
 8010f72:	f7fd ffcd 	bl	800ef10 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8010f76:	4b0d      	ldr	r3, [pc, #52]	@ (8010fac <prvCheckTasksWaitingTermination+0x54>)
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	3b01      	subs	r3, #1
 8010f7c:	4a0b      	ldr	r2, [pc, #44]	@ (8010fac <prvCheckTasksWaitingTermination+0x54>)
 8010f7e:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8010f80:	4b0b      	ldr	r3, [pc, #44]	@ (8010fb0 <prvCheckTasksWaitingTermination+0x58>)
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	3b01      	subs	r3, #1
 8010f86:	4a0a      	ldr	r2, [pc, #40]	@ (8010fb0 <prvCheckTasksWaitingTermination+0x58>)
 8010f88:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8010f8a:	f001 f849 	bl	8012020 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8010f8e:	6878      	ldr	r0, [r7, #4]
 8010f90:	f000 f8f0 	bl	8011174 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010f94:	4b06      	ldr	r3, [pc, #24]	@ (8010fb0 <prvCheckTasksWaitingTermination+0x58>)
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d1e1      	bne.n	8010f60 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8010f9c:	bf00      	nop
 8010f9e:	bf00      	nop
 8010fa0:	3708      	adds	r7, #8
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	bd80      	pop	{r7, pc}
 8010fa6:	bf00      	nop
 8010fa8:	200005c0 	.word	0x200005c0
 8010fac:	200005ec 	.word	0x200005ec
 8010fb0:	200005d4 	.word	0x200005d4

08010fb4 <vTaskGetInfo>:

    void vTaskGetInfo( TaskHandle_t xTask,
                       TaskStatus_t * pxTaskStatus,
                       BaseType_t xGetFreeStackSpace,
                       eTaskState eState )
    {
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b086      	sub	sp, #24
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	60f8      	str	r0, [r7, #12]
 8010fbc:	60b9      	str	r1, [r7, #8]
 8010fbe:	607a      	str	r2, [r7, #4]
 8010fc0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;

        traceENTER_vTaskGetInfo( xTask, pxTaskStatus, xGetFreeStackSpace, eState );

        /* xTask is NULL then get the state of the calling task. */
        pxTCB = prvGetTCBFromHandle( xTask );
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d102      	bne.n	8010fce <vTaskGetInfo+0x1a>
 8010fc8:	4b41      	ldr	r3, [pc, #260]	@ (80110d0 <vTaskGetInfo+0x11c>)
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	e000      	b.n	8010fd0 <vTaskGetInfo+0x1c>
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	613b      	str	r3, [r7, #16]

        pxTaskStatus->xHandle = pxTCB;
 8010fd2:	68bb      	ldr	r3, [r7, #8]
 8010fd4:	693a      	ldr	r2, [r7, #16]
 8010fd6:	601a      	str	r2, [r3, #0]
        pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 8010fd8:	693b      	ldr	r3, [r7, #16]
 8010fda:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010fde:	68bb      	ldr	r3, [r7, #8]
 8010fe0:	605a      	str	r2, [r3, #4]
        pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8010fe2:	693b      	ldr	r3, [r7, #16]
 8010fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010fe6:	68bb      	ldr	r3, [r7, #8]
 8010fe8:	611a      	str	r2, [r3, #16]
        pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8010fea:	693b      	ldr	r3, [r7, #16]
 8010fec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010fee:	68bb      	ldr	r3, [r7, #8]
 8010ff0:	61da      	str	r2, [r3, #28]
        #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
            pxTaskStatus->pxTopOfStack = ( StackType_t * ) pxTCB->pxTopOfStack;
 8010ff2:	693b      	ldr	r3, [r7, #16]
 8010ff4:	681a      	ldr	r2, [r3, #0]
 8010ff6:	68bb      	ldr	r3, [r7, #8]
 8010ff8:	621a      	str	r2, [r3, #32]
            pxTaskStatus->pxEndOfStack = pxTCB->pxEndOfStack;
 8010ffa:	693b      	ldr	r3, [r7, #16]
 8010ffc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010ffe:	68bb      	ldr	r3, [r7, #8]
 8011000:	625a      	str	r2, [r3, #36]	@ 0x24
        #endif
        pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8011002:	693b      	ldr	r3, [r7, #16]
 8011004:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011006:	68bb      	ldr	r3, [r7, #8]
 8011008:	609a      	str	r2, [r3, #8]
        }
        #endif

        #if ( configUSE_MUTEXES == 1 )
        {
            pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 801100a:	693b      	ldr	r3, [r7, #16]
 801100c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801100e:	68bb      	ldr	r3, [r7, #8]
 8011010:	615a      	str	r2, [r3, #20]
        }
        #endif

        #if ( configGENERATE_RUN_TIME_STATS == 1 )
        {
            pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8011012:	693b      	ldr	r3, [r7, #16]
 8011014:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011016:	68bb      	ldr	r3, [r7, #8]
 8011018:	619a      	str	r2, [r3, #24]
        #endif

        /* Obtaining the task state is a little fiddly, so is only done if the
         * value of eState passed into this function is eInvalid - otherwise the
         * state is just set to whatever is passed in. */
        if( eState != eInvalid )
 801101a:	78fb      	ldrb	r3, [r7, #3]
 801101c:	2b05      	cmp	r3, #5
 801101e:	d03c      	beq.n	801109a <vTaskGetInfo+0xe6>
        {
            if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
 8011020:	4b2b      	ldr	r3, [pc, #172]	@ (80110d0 <vTaskGetInfo+0x11c>)
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	693a      	ldr	r2, [r7, #16]
 8011026:	429a      	cmp	r2, r3
 8011028:	d103      	bne.n	8011032 <vTaskGetInfo+0x7e>
            {
                pxTaskStatus->eCurrentState = eRunning;
 801102a:	68bb      	ldr	r3, [r7, #8]
 801102c:	2200      	movs	r2, #0
 801102e:	731a      	strb	r2, [r3, #12]
 8011030:	e03a      	b.n	80110a8 <vTaskGetInfo+0xf4>
            }
            else
            {
                pxTaskStatus->eCurrentState = eState;
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	78fa      	ldrb	r2, [r7, #3]
 8011036:	731a      	strb	r2, [r3, #12]
                #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    /* If the task is in the suspended list then there is a
                     *  chance it is actually just blocked indefinitely - so really
                     *  it should be reported as being in the Blocked state. */
                    if( eState == eSuspended )
 8011038:	78fb      	ldrb	r3, [r7, #3]
 801103a:	2b03      	cmp	r3, #3
 801103c:	d120      	bne.n	8011080 <vTaskGetInfo+0xcc>
                    {
                        vTaskSuspendAll();
 801103e:	f7ff f9b7 	bl	80103b0 <vTaskSuspendAll>
                        {
                            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011042:	693b      	ldr	r3, [r7, #16]
 8011044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011046:	2b00      	cmp	r3, #0
 8011048:	d003      	beq.n	8011052 <vTaskGetInfo+0x9e>
                            {
                                pxTaskStatus->eCurrentState = eBlocked;
 801104a:	68bb      	ldr	r3, [r7, #8]
 801104c:	2202      	movs	r2, #2
 801104e:	731a      	strb	r2, [r3, #12]
 8011050:	e014      	b.n	801107c <vTaskGetInfo+0xc8>
                                    /* The task does not appear on the event list item of
                                     * and of the RTOS objects, but could still be in the
                                     * blocked state if it is waiting on its notification
                                     * rather than waiting on an object.  If not, is
                                     * suspended. */
                                    for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8011052:	2300      	movs	r3, #0
 8011054:	617b      	str	r3, [r7, #20]
 8011056:	e00e      	b.n	8011076 <vTaskGetInfo+0xc2>
                                    {
                                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8011058:	693a      	ldr	r2, [r7, #16]
 801105a:	697b      	ldr	r3, [r7, #20]
 801105c:	4413      	add	r3, r2
 801105e:	33ac      	adds	r3, #172	@ 0xac
 8011060:	781b      	ldrb	r3, [r3, #0]
 8011062:	b2db      	uxtb	r3, r3
 8011064:	2b01      	cmp	r3, #1
 8011066:	d103      	bne.n	8011070 <vTaskGetInfo+0xbc>
                                        {
                                            pxTaskStatus->eCurrentState = eBlocked;
 8011068:	68bb      	ldr	r3, [r7, #8]
 801106a:	2202      	movs	r2, #2
 801106c:	731a      	strb	r2, [r3, #12]
                                            break;
 801106e:	e005      	b.n	801107c <vTaskGetInfo+0xc8>
                                    for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8011070:	697b      	ldr	r3, [r7, #20]
 8011072:	3301      	adds	r3, #1
 8011074:	617b      	str	r3, [r7, #20]
 8011076:	697b      	ldr	r3, [r7, #20]
 8011078:	2b00      	cmp	r3, #0
 801107a:	dded      	ble.n	8011058 <vTaskGetInfo+0xa4>
                                    }
                                }
                                #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
                            }
                        }
                        ( void ) xTaskResumeAll();
 801107c:	f7ff f9a6 	bl	80103cc <xTaskResumeAll>
                #endif /* INCLUDE_vTaskSuspend */

                /* Tasks can be in pending ready list and other state list at the
                 * same time. These tasks are in ready state no matter what state
                 * list the task is in. */
                taskENTER_CRITICAL();
 8011080:	f000 ff96 	bl	8011fb0 <vPortEnterCritical>
                {
                    if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8011084:	693b      	ldr	r3, [r7, #16]
 8011086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011088:	4a12      	ldr	r2, [pc, #72]	@ (80110d4 <vTaskGetInfo+0x120>)
 801108a:	4293      	cmp	r3, r2
 801108c:	d102      	bne.n	8011094 <vTaskGetInfo+0xe0>
                    {
                        pxTaskStatus->eCurrentState = eReady;
 801108e:	68bb      	ldr	r3, [r7, #8]
 8011090:	2201      	movs	r2, #1
 8011092:	731a      	strb	r2, [r3, #12]
                    }
                }
                taskEXIT_CRITICAL();
 8011094:	f000 ffc4 	bl	8012020 <vPortExitCritical>
 8011098:	e006      	b.n	80110a8 <vTaskGetInfo+0xf4>
            }
        }
        else
        {
            pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 801109a:	6938      	ldr	r0, [r7, #16]
 801109c:	f7ff f858 	bl	8010150 <eTaskGetState>
 80110a0:	4603      	mov	r3, r0
 80110a2:	461a      	mov	r2, r3
 80110a4:	68bb      	ldr	r3, [r7, #8]
 80110a6:	731a      	strb	r2, [r3, #12]
        }

        /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
         * parameter is provided to allow it to be skipped. */
        if( xGetFreeStackSpace != pdFALSE )
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d008      	beq.n	80110c0 <vTaskGetInfo+0x10c>
            {
                pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
            }
            #else
            {
                pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 80110ae:	693b      	ldr	r3, [r7, #16]
 80110b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80110b2:	4618      	mov	r0, r3
 80110b4:	f000 f843 	bl	801113e <prvTaskCheckFreeStackSpace>
 80110b8:	4602      	mov	r2, r0
 80110ba:	68bb      	ldr	r3, [r7, #8]
 80110bc:	629a      	str	r2, [r3, #40]	@ 0x28
        {
            pxTaskStatus->usStackHighWaterMark = 0;
        }

        traceRETURN_vTaskGetInfo();
    }
 80110be:	e002      	b.n	80110c6 <vTaskGetInfo+0x112>
            pxTaskStatus->usStackHighWaterMark = 0;
 80110c0:	68bb      	ldr	r3, [r7, #8]
 80110c2:	2200      	movs	r2, #0
 80110c4:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 80110c6:	bf00      	nop
 80110c8:	3718      	adds	r7, #24
 80110ca:	46bd      	mov	sp, r7
 80110cc:	bd80      	pop	{r7, pc}
 80110ce:	bf00      	nop
 80110d0:	200004ec 	.word	0x200004ec
 80110d4:	200005ac 	.word	0x200005ac

080110d8 <prvListTasksWithinSingleList>:
#if ( configUSE_TRACE_FACILITY == 1 )

    static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
                                                     List_t * pxList,
                                                     eTaskState eState )
    {
 80110d8:	b580      	push	{r7, lr}
 80110da:	b088      	sub	sp, #32
 80110dc:	af00      	add	r7, sp, #0
 80110de:	60f8      	str	r0, [r7, #12]
 80110e0:	60b9      	str	r1, [r7, #8]
 80110e2:	4613      	mov	r3, r2
 80110e4:	71fb      	strb	r3, [r7, #7]
        UBaseType_t uxTask = 0;
 80110e6:	2300      	movs	r3, #0
 80110e8:	61fb      	str	r3, [r7, #28]
        const ListItem_t * pxEndMarker = listGET_END_MARKER( pxList );
 80110ea:	68bb      	ldr	r3, [r7, #8]
 80110ec:	3308      	adds	r3, #8
 80110ee:	617b      	str	r3, [r7, #20]
        ListItem_t * pxIterator;
        TCB_t * pxTCB = NULL;
 80110f0:	2300      	movs	r3, #0
 80110f2:	613b      	str	r3, [r7, #16]

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80110f4:	68bb      	ldr	r3, [r7, #8]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d01b      	beq.n	8011134 <prvListTasksWithinSingleList+0x5c>
        {
            /* Populate an TaskStatus_t structure within the
             * pxTaskStatusArray array for each task that is referenced from
             * pxList.  See the definition of TaskStatus_t in task.h for the
             * meaning of each TaskStatus_t structure member. */
            for( pxIterator = listGET_HEAD_ENTRY( pxList ); pxIterator != pxEndMarker; pxIterator = listGET_NEXT( pxIterator ) )
 80110fc:	68bb      	ldr	r3, [r7, #8]
 80110fe:	68db      	ldr	r3, [r3, #12]
 8011100:	61bb      	str	r3, [r7, #24]
 8011102:	e013      	b.n	801112c <prvListTasksWithinSingleList+0x54>
            {
                /* MISRA Ref 11.5.3 [Void pointer assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxTCB = listGET_LIST_ITEM_OWNER( pxIterator );
 8011104:	69bb      	ldr	r3, [r7, #24]
 8011106:	68db      	ldr	r3, [r3, #12]
 8011108:	613b      	str	r3, [r7, #16]

                vTaskGetInfo( ( TaskHandle_t ) pxTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 801110a:	69fb      	ldr	r3, [r7, #28]
 801110c:	222c      	movs	r2, #44	@ 0x2c
 801110e:	fb02 f303 	mul.w	r3, r2, r3
 8011112:	68fa      	ldr	r2, [r7, #12]
 8011114:	18d1      	adds	r1, r2, r3
 8011116:	79fb      	ldrb	r3, [r7, #7]
 8011118:	2201      	movs	r2, #1
 801111a:	6938      	ldr	r0, [r7, #16]
 801111c:	f7ff ff4a 	bl	8010fb4 <vTaskGetInfo>
                uxTask++;
 8011120:	69fb      	ldr	r3, [r7, #28]
 8011122:	3301      	adds	r3, #1
 8011124:	61fb      	str	r3, [r7, #28]
            for( pxIterator = listGET_HEAD_ENTRY( pxList ); pxIterator != pxEndMarker; pxIterator = listGET_NEXT( pxIterator ) )
 8011126:	69bb      	ldr	r3, [r7, #24]
 8011128:	685b      	ldr	r3, [r3, #4]
 801112a:	61bb      	str	r3, [r7, #24]
 801112c:	69ba      	ldr	r2, [r7, #24]
 801112e:	697b      	ldr	r3, [r7, #20]
 8011130:	429a      	cmp	r2, r3
 8011132:	d1e7      	bne.n	8011104 <prvListTasksWithinSingleList+0x2c>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return uxTask;
 8011134:	69fb      	ldr	r3, [r7, #28]
    }
 8011136:	4618      	mov	r0, r3
 8011138:	3720      	adds	r7, #32
 801113a:	46bd      	mov	sp, r7
 801113c:	bd80      	pop	{r7, pc}

0801113e <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 801113e:	b480      	push	{r7}
 8011140:	b085      	sub	sp, #20
 8011142:	af00      	add	r7, sp, #0
 8011144:	6078      	str	r0, [r7, #4]
        configSTACK_DEPTH_TYPE uxCount = 0U;
 8011146:	2300      	movs	r3, #0
 8011148:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 801114a:	e005      	b.n	8011158 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	3301      	adds	r3, #1
 8011150:	607b      	str	r3, [r7, #4]
            uxCount++;
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	3301      	adds	r3, #1
 8011156:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	781b      	ldrb	r3, [r3, #0]
 801115c:	2ba5      	cmp	r3, #165	@ 0xa5
 801115e:	d0f5      	beq.n	801114c <prvTaskCheckFreeStackSpace+0xe>
        }

        uxCount /= ( configSTACK_DEPTH_TYPE ) sizeof( StackType_t );
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	089b      	lsrs	r3, r3, #2
 8011164:	60fb      	str	r3, [r7, #12]

        return uxCount;
 8011166:	68fb      	ldr	r3, [r7, #12]
    }
 8011168:	4618      	mov	r0, r3
 801116a:	3714      	adds	r7, #20
 801116c:	46bd      	mov	sp, r7
 801116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011172:	4770      	bx	lr

08011174 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8011174:	b580      	push	{r7, lr}
 8011176:	b082      	sub	sp, #8
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
        portCLEAN_UP_TCB( pxTCB );

        #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxTCB->xTLSBlock );
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	335c      	adds	r3, #92	@ 0x5c
 8011180:	4618      	mov	r0, r3
 8011182:	f003 fc31 	bl	80149e8 <_reclaim_reent>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801118a:	4618      	mov	r0, r3
 801118c:	f7f5 fece 	bl	8006f2c <vPortFree>
            vPortFree( pxTCB );
 8011190:	6878      	ldr	r0, [r7, #4]
 8011192:	f7f5 fecb 	bl	8006f2c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8011196:	bf00      	nop
 8011198:	3708      	adds	r7, #8
 801119a:	46bd      	mov	sp, r7
 801119c:	bd80      	pop	{r7, pc}
	...

080111a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80111a0:	b480      	push	{r7}
 80111a2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80111a4:	4b0a      	ldr	r3, [pc, #40]	@ (80111d0 <prvResetNextTaskUnblockTime+0x30>)
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d104      	bne.n	80111b8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80111ae:	4b09      	ldr	r3, [pc, #36]	@ (80111d4 <prvResetNextTaskUnblockTime+0x34>)
 80111b0:	f04f 32ff 	mov.w	r2, #4294967295
 80111b4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80111b6:	e005      	b.n	80111c4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80111b8:	4b05      	ldr	r3, [pc, #20]	@ (80111d0 <prvResetNextTaskUnblockTime+0x30>)
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	68db      	ldr	r3, [r3, #12]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	4a04      	ldr	r2, [pc, #16]	@ (80111d4 <prvResetNextTaskUnblockTime+0x34>)
 80111c2:	6013      	str	r3, [r2, #0]
}
 80111c4:	bf00      	nop
 80111c6:	46bd      	mov	sp, r7
 80111c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111cc:	4770      	bx	lr
 80111ce:	bf00      	nop
 80111d0:	200005a4 	.word	0x200005a4
 80111d4:	2000060c 	.word	0x2000060c

080111d8 <xTaskGetCurrentTaskHandle>:

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) || ( configNUMBER_OF_CORES > 1 )

    #if ( configNUMBER_OF_CORES == 1 )
        TaskHandle_t xTaskGetCurrentTaskHandle( void )
        {
 80111d8:	b480      	push	{r7}
 80111da:	b083      	sub	sp, #12
 80111dc:	af00      	add	r7, sp, #0
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
 80111de:	4b05      	ldr	r3, [pc, #20]	@ (80111f4 <xTaskGetCurrentTaskHandle+0x1c>)
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	607b      	str	r3, [r7, #4]

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
 80111e4:	687b      	ldr	r3, [r7, #4]
        }
 80111e6:	4618      	mov	r0, r3
 80111e8:	370c      	adds	r7, #12
 80111ea:	46bd      	mov	sp, r7
 80111ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f0:	4770      	bx	lr
 80111f2:	bf00      	nop
 80111f4:	200004ec 	.word	0x200004ec

080111f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80111f8:	b480      	push	{r7}
 80111fa:	b083      	sub	sp, #12
 80111fc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 80111fe:	4b0b      	ldr	r3, [pc, #44]	@ (801122c <xTaskGetSchedulerState+0x34>)
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d102      	bne.n	801120c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8011206:	2301      	movs	r3, #1
 8011208:	607b      	str	r3, [r7, #4]
 801120a:	e008      	b.n	801121e <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 801120c:	4b08      	ldr	r3, [pc, #32]	@ (8011230 <xTaskGetSchedulerState+0x38>)
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d102      	bne.n	801121a <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8011214:	2302      	movs	r3, #2
 8011216:	607b      	str	r3, [r7, #4]
 8011218:	e001      	b.n	801121e <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 801121a:	2300      	movs	r3, #0
 801121c:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 801121e:	687b      	ldr	r3, [r7, #4]
    }
 8011220:	4618      	mov	r0, r3
 8011222:	370c      	adds	r7, #12
 8011224:	46bd      	mov	sp, r7
 8011226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122a:	4770      	bx	lr
 801122c:	200005f8 	.word	0x200005f8
 8011230:	20000614 	.word	0x20000614

08011234 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8011234:	b580      	push	{r7, lr}
 8011236:	b086      	sub	sp, #24
 8011238:	af00      	add	r7, sp, #0
 801123a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8011240:	2300      	movs	r3, #0
 8011242:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	2b00      	cmp	r3, #0
 8011248:	f000 8089 	beq.w	801135e <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801124c:	693b      	ldr	r3, [r7, #16]
 801124e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011250:	4b45      	ldr	r3, [pc, #276]	@ (8011368 <xTaskPriorityInherit+0x134>)
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011256:	429a      	cmp	r2, r3
 8011258:	d278      	bcs.n	801134c <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 801125a:	693b      	ldr	r3, [r7, #16]
 801125c:	699b      	ldr	r3, [r3, #24]
 801125e:	2b00      	cmp	r3, #0
 8011260:	db06      	blt.n	8011270 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 8011262:	4b41      	ldr	r3, [pc, #260]	@ (8011368 <xTaskPriorityInherit+0x134>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011268:	f1c3 0207 	rsb	r2, r3, #7
 801126c:	693b      	ldr	r3, [r7, #16]
 801126e:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011270:	693b      	ldr	r3, [r7, #16]
 8011272:	6959      	ldr	r1, [r3, #20]
 8011274:	693b      	ldr	r3, [r7, #16]
 8011276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011278:	4613      	mov	r3, r2
 801127a:	009b      	lsls	r3, r3, #2
 801127c:	4413      	add	r3, r2
 801127e:	009b      	lsls	r3, r3, #2
 8011280:	4a3a      	ldr	r2, [pc, #232]	@ (801136c <xTaskPriorityInherit+0x138>)
 8011282:	4413      	add	r3, r2
 8011284:	4299      	cmp	r1, r3
 8011286:	d159      	bne.n	801133c <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011288:	693b      	ldr	r3, [r7, #16]
 801128a:	3304      	adds	r3, #4
 801128c:	4618      	mov	r0, r3
 801128e:	f7fd fe3f 	bl	800ef10 <uxListRemove>
 8011292:	4603      	mov	r3, r0
 8011294:	2b00      	cmp	r3, #0
 8011296:	d10a      	bne.n	80112ae <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8011298:	693b      	ldr	r3, [r7, #16]
 801129a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801129c:	2201      	movs	r2, #1
 801129e:	fa02 f303 	lsl.w	r3, r2, r3
 80112a2:	43da      	mvns	r2, r3
 80112a4:	4b32      	ldr	r3, [pc, #200]	@ (8011370 <xTaskPriorityInherit+0x13c>)
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	4013      	ands	r3, r2
 80112aa:	4a31      	ldr	r2, [pc, #196]	@ (8011370 <xTaskPriorityInherit+0x13c>)
 80112ac:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80112ae:	4b2e      	ldr	r3, [pc, #184]	@ (8011368 <xTaskPriorityInherit+0x134>)
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80112b4:	693b      	ldr	r3, [r7, #16]
 80112b6:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80112b8:	693b      	ldr	r3, [r7, #16]
 80112ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112bc:	2201      	movs	r2, #1
 80112be:	409a      	lsls	r2, r3
 80112c0:	4b2b      	ldr	r3, [pc, #172]	@ (8011370 <xTaskPriorityInherit+0x13c>)
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	4313      	orrs	r3, r2
 80112c6:	4a2a      	ldr	r2, [pc, #168]	@ (8011370 <xTaskPriorityInherit+0x13c>)
 80112c8:	6013      	str	r3, [r2, #0]
 80112ca:	693b      	ldr	r3, [r7, #16]
 80112cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80112ce:	4927      	ldr	r1, [pc, #156]	@ (801136c <xTaskPriorityInherit+0x138>)
 80112d0:	4613      	mov	r3, r2
 80112d2:	009b      	lsls	r3, r3, #2
 80112d4:	4413      	add	r3, r2
 80112d6:	009b      	lsls	r3, r3, #2
 80112d8:	440b      	add	r3, r1
 80112da:	3304      	adds	r3, #4
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	60fb      	str	r3, [r7, #12]
 80112e0:	693b      	ldr	r3, [r7, #16]
 80112e2:	68fa      	ldr	r2, [r7, #12]
 80112e4:	609a      	str	r2, [r3, #8]
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	689a      	ldr	r2, [r3, #8]
 80112ea:	693b      	ldr	r3, [r7, #16]
 80112ec:	60da      	str	r2, [r3, #12]
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	689b      	ldr	r3, [r3, #8]
 80112f2:	693a      	ldr	r2, [r7, #16]
 80112f4:	3204      	adds	r2, #4
 80112f6:	605a      	str	r2, [r3, #4]
 80112f8:	693b      	ldr	r3, [r7, #16]
 80112fa:	1d1a      	adds	r2, r3, #4
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	609a      	str	r2, [r3, #8]
 8011300:	693b      	ldr	r3, [r7, #16]
 8011302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011304:	4613      	mov	r3, r2
 8011306:	009b      	lsls	r3, r3, #2
 8011308:	4413      	add	r3, r2
 801130a:	009b      	lsls	r3, r3, #2
 801130c:	4a17      	ldr	r2, [pc, #92]	@ (801136c <xTaskPriorityInherit+0x138>)
 801130e:	441a      	add	r2, r3
 8011310:	693b      	ldr	r3, [r7, #16]
 8011312:	615a      	str	r2, [r3, #20]
 8011314:	693b      	ldr	r3, [r7, #16]
 8011316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011318:	4914      	ldr	r1, [pc, #80]	@ (801136c <xTaskPriorityInherit+0x138>)
 801131a:	4613      	mov	r3, r2
 801131c:	009b      	lsls	r3, r3, #2
 801131e:	4413      	add	r3, r2
 8011320:	009b      	lsls	r3, r3, #2
 8011322:	440b      	add	r3, r1
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	693a      	ldr	r2, [r7, #16]
 8011328:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801132a:	1c59      	adds	r1, r3, #1
 801132c:	480f      	ldr	r0, [pc, #60]	@ (801136c <xTaskPriorityInherit+0x138>)
 801132e:	4613      	mov	r3, r2
 8011330:	009b      	lsls	r3, r3, #2
 8011332:	4413      	add	r3, r2
 8011334:	009b      	lsls	r3, r3, #2
 8011336:	4403      	add	r3, r0
 8011338:	6019      	str	r1, [r3, #0]
 801133a:	e004      	b.n	8011346 <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801133c:	4b0a      	ldr	r3, [pc, #40]	@ (8011368 <xTaskPriorityInherit+0x134>)
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011342:	693b      	ldr	r3, [r7, #16]
 8011344:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8011346:	2301      	movs	r3, #1
 8011348:	617b      	str	r3, [r7, #20]
 801134a:	e008      	b.n	801135e <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801134c:	693b      	ldr	r3, [r7, #16]
 801134e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011350:	4b05      	ldr	r3, [pc, #20]	@ (8011368 <xTaskPriorityInherit+0x134>)
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011356:	429a      	cmp	r2, r3
 8011358:	d201      	bcs.n	801135e <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 801135a:	2301      	movs	r3, #1
 801135c:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 801135e:	697b      	ldr	r3, [r7, #20]
    }
 8011360:	4618      	mov	r0, r3
 8011362:	3718      	adds	r7, #24
 8011364:	46bd      	mov	sp, r7
 8011366:	bd80      	pop	{r7, pc}
 8011368:	200004ec 	.word	0x200004ec
 801136c:	200004f0 	.word	0x200004f0
 8011370:	200005f4 	.word	0x200005f4

08011374 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8011374:	b580      	push	{r7, lr}
 8011376:	b088      	sub	sp, #32
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8011380:	2300      	movs	r3, #0
 8011382:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	2b00      	cmp	r3, #0
 8011388:	f000 809a 	beq.w	80114c0 <xTaskPriorityDisinherit+0x14c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 801138c:	4b4f      	ldr	r3, [pc, #316]	@ (80114cc <xTaskPriorityDisinherit+0x158>)
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	69ba      	ldr	r2, [r7, #24]
 8011392:	429a      	cmp	r2, r3
 8011394:	d010      	beq.n	80113b8 <xTaskPriorityDisinherit+0x44>
    __asm volatile
 8011396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801139a:	b672      	cpsid	i
 801139c:	f383 8811 	msr	BASEPRI, r3
 80113a0:	f3bf 8f6f 	isb	sy
 80113a4:	f3bf 8f4f 	dsb	sy
 80113a8:	b662      	cpsie	i
 80113aa:	613b      	str	r3, [r7, #16]
}
 80113ac:	bf00      	nop
 80113ae:	f641 2128 	movw	r1, #6696	@ 0x1a28
 80113b2:	4847      	ldr	r0, [pc, #284]	@ (80114d0 <xTaskPriorityDisinherit+0x15c>)
 80113b4:	f7f5 fa44 	bl	8006840 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 80113b8:	69bb      	ldr	r3, [r7, #24]
 80113ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d110      	bne.n	80113e2 <xTaskPriorityDisinherit+0x6e>
    __asm volatile
 80113c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113c4:	b672      	cpsid	i
 80113c6:	f383 8811 	msr	BASEPRI, r3
 80113ca:	f3bf 8f6f 	isb	sy
 80113ce:	f3bf 8f4f 	dsb	sy
 80113d2:	b662      	cpsie	i
 80113d4:	60fb      	str	r3, [r7, #12]
}
 80113d6:	bf00      	nop
 80113d8:	f641 2129 	movw	r1, #6697	@ 0x1a29
 80113dc:	483c      	ldr	r0, [pc, #240]	@ (80114d0 <xTaskPriorityDisinherit+0x15c>)
 80113de:	f7f5 fa2f 	bl	8006840 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 80113e2:	69bb      	ldr	r3, [r7, #24]
 80113e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80113e6:	1e5a      	subs	r2, r3, #1
 80113e8:	69bb      	ldr	r3, [r7, #24]
 80113ea:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80113ec:	69bb      	ldr	r3, [r7, #24]
 80113ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80113f0:	69bb      	ldr	r3, [r7, #24]
 80113f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80113f4:	429a      	cmp	r2, r3
 80113f6:	d063      	beq.n	80114c0 <xTaskPriorityDisinherit+0x14c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80113f8:	69bb      	ldr	r3, [r7, #24]
 80113fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d15f      	bne.n	80114c0 <xTaskPriorityDisinherit+0x14c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011400:	69bb      	ldr	r3, [r7, #24]
 8011402:	3304      	adds	r3, #4
 8011404:	4618      	mov	r0, r3
 8011406:	f7fd fd83 	bl	800ef10 <uxListRemove>
 801140a:	4603      	mov	r3, r0
 801140c:	2b00      	cmp	r3, #0
 801140e:	d10a      	bne.n	8011426 <xTaskPriorityDisinherit+0xb2>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8011410:	69bb      	ldr	r3, [r7, #24]
 8011412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011414:	2201      	movs	r2, #1
 8011416:	fa02 f303 	lsl.w	r3, r2, r3
 801141a:	43da      	mvns	r2, r3
 801141c:	4b2d      	ldr	r3, [pc, #180]	@ (80114d4 <xTaskPriorityDisinherit+0x160>)
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	4013      	ands	r3, r2
 8011422:	4a2c      	ldr	r2, [pc, #176]	@ (80114d4 <xTaskPriorityDisinherit+0x160>)
 8011424:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011426:	69bb      	ldr	r3, [r7, #24]
 8011428:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801142a:	69bb      	ldr	r3, [r7, #24]
 801142c:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 801142e:	69bb      	ldr	r3, [r7, #24]
 8011430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011432:	f1c3 0207 	rsb	r2, r3, #7
 8011436:	69bb      	ldr	r3, [r7, #24]
 8011438:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 801143a:	69bb      	ldr	r3, [r7, #24]
 801143c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801143e:	2201      	movs	r2, #1
 8011440:	409a      	lsls	r2, r3
 8011442:	4b24      	ldr	r3, [pc, #144]	@ (80114d4 <xTaskPriorityDisinherit+0x160>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	4313      	orrs	r3, r2
 8011448:	4a22      	ldr	r2, [pc, #136]	@ (80114d4 <xTaskPriorityDisinherit+0x160>)
 801144a:	6013      	str	r3, [r2, #0]
 801144c:	69bb      	ldr	r3, [r7, #24]
 801144e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011450:	4921      	ldr	r1, [pc, #132]	@ (80114d8 <xTaskPriorityDisinherit+0x164>)
 8011452:	4613      	mov	r3, r2
 8011454:	009b      	lsls	r3, r3, #2
 8011456:	4413      	add	r3, r2
 8011458:	009b      	lsls	r3, r3, #2
 801145a:	440b      	add	r3, r1
 801145c:	3304      	adds	r3, #4
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	617b      	str	r3, [r7, #20]
 8011462:	69bb      	ldr	r3, [r7, #24]
 8011464:	697a      	ldr	r2, [r7, #20]
 8011466:	609a      	str	r2, [r3, #8]
 8011468:	697b      	ldr	r3, [r7, #20]
 801146a:	689a      	ldr	r2, [r3, #8]
 801146c:	69bb      	ldr	r3, [r7, #24]
 801146e:	60da      	str	r2, [r3, #12]
 8011470:	697b      	ldr	r3, [r7, #20]
 8011472:	689b      	ldr	r3, [r3, #8]
 8011474:	69ba      	ldr	r2, [r7, #24]
 8011476:	3204      	adds	r2, #4
 8011478:	605a      	str	r2, [r3, #4]
 801147a:	69bb      	ldr	r3, [r7, #24]
 801147c:	1d1a      	adds	r2, r3, #4
 801147e:	697b      	ldr	r3, [r7, #20]
 8011480:	609a      	str	r2, [r3, #8]
 8011482:	69bb      	ldr	r3, [r7, #24]
 8011484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011486:	4613      	mov	r3, r2
 8011488:	009b      	lsls	r3, r3, #2
 801148a:	4413      	add	r3, r2
 801148c:	009b      	lsls	r3, r3, #2
 801148e:	4a12      	ldr	r2, [pc, #72]	@ (80114d8 <xTaskPriorityDisinherit+0x164>)
 8011490:	441a      	add	r2, r3
 8011492:	69bb      	ldr	r3, [r7, #24]
 8011494:	615a      	str	r2, [r3, #20]
 8011496:	69bb      	ldr	r3, [r7, #24]
 8011498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801149a:	490f      	ldr	r1, [pc, #60]	@ (80114d8 <xTaskPriorityDisinherit+0x164>)
 801149c:	4613      	mov	r3, r2
 801149e:	009b      	lsls	r3, r3, #2
 80114a0:	4413      	add	r3, r2
 80114a2:	009b      	lsls	r3, r3, #2
 80114a4:	440b      	add	r3, r1
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	69ba      	ldr	r2, [r7, #24]
 80114aa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80114ac:	1c59      	adds	r1, r3, #1
 80114ae:	480a      	ldr	r0, [pc, #40]	@ (80114d8 <xTaskPriorityDisinherit+0x164>)
 80114b0:	4613      	mov	r3, r2
 80114b2:	009b      	lsls	r3, r3, #2
 80114b4:	4413      	add	r3, r2
 80114b6:	009b      	lsls	r3, r3, #2
 80114b8:	4403      	add	r3, r0
 80114ba:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80114bc:	2301      	movs	r3, #1
 80114be:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 80114c0:	69fb      	ldr	r3, [r7, #28]
    }
 80114c2:	4618      	mov	r0, r3
 80114c4:	3720      	adds	r7, #32
 80114c6:	46bd      	mov	sp, r7
 80114c8:	bd80      	pop	{r7, pc}
 80114ca:	bf00      	nop
 80114cc:	200004ec 	.word	0x200004ec
 80114d0:	08019980 	.word	0x08019980
 80114d4:	200005f4 	.word	0x200005f4
 80114d8:	200004f0 	.word	0x200004f0

080114dc <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80114dc:	b580      	push	{r7, lr}
 80114de:	b08a      	sub	sp, #40	@ 0x28
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
 80114e4:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80114ea:	2301      	movs	r3, #1
 80114ec:	61fb      	str	r3, [r7, #28]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	f000 80b0 	beq.w	8011656 <vTaskPriorityDisinheritAfterTimeout+0x17a>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80114f6:	6a3b      	ldr	r3, [r7, #32]
 80114f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d110      	bne.n	8011520 <vTaskPriorityDisinheritAfterTimeout+0x44>
    __asm volatile
 80114fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011502:	b672      	cpsid	i
 8011504:	f383 8811 	msr	BASEPRI, r3
 8011508:	f3bf 8f6f 	isb	sy
 801150c:	f3bf 8f4f 	dsb	sy
 8011510:	b662      	cpsie	i
 8011512:	613b      	str	r3, [r7, #16]
}
 8011514:	bf00      	nop
 8011516:	f641 2186 	movw	r1, #6790	@ 0x1a86
 801151a:	4851      	ldr	r0, [pc, #324]	@ (8011660 <vTaskPriorityDisinheritAfterTimeout+0x184>)
 801151c:	f7f5 f990 	bl	8006840 <vAssertCalled>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011520:	6a3b      	ldr	r3, [r7, #32]
 8011522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011524:	683a      	ldr	r2, [r7, #0]
 8011526:	429a      	cmp	r2, r3
 8011528:	d902      	bls.n	8011530 <vTaskPriorityDisinheritAfterTimeout+0x54>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 801152a:	683b      	ldr	r3, [r7, #0]
 801152c:	627b      	str	r3, [r7, #36]	@ 0x24
 801152e:	e002      	b.n	8011536 <vTaskPriorityDisinheritAfterTimeout+0x5a>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8011530:	6a3b      	ldr	r3, [r7, #32]
 8011532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011534:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8011536:	6a3b      	ldr	r3, [r7, #32]
 8011538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801153a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801153c:	429a      	cmp	r2, r3
 801153e:	f000 808a 	beq.w	8011656 <vTaskPriorityDisinheritAfterTimeout+0x17a>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011542:	6a3b      	ldr	r3, [r7, #32]
 8011544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011546:	69fa      	ldr	r2, [r7, #28]
 8011548:	429a      	cmp	r2, r3
 801154a:	f040 8084 	bne.w	8011656 <vTaskPriorityDisinheritAfterTimeout+0x17a>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 801154e:	4b45      	ldr	r3, [pc, #276]	@ (8011664 <vTaskPriorityDisinheritAfterTimeout+0x188>)
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	6a3a      	ldr	r2, [r7, #32]
 8011554:	429a      	cmp	r2, r3
 8011556:	d110      	bne.n	801157a <vTaskPriorityDisinheritAfterTimeout+0x9e>
    __asm volatile
 8011558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801155c:	b672      	cpsid	i
 801155e:	f383 8811 	msr	BASEPRI, r3
 8011562:	f3bf 8f6f 	isb	sy
 8011566:	f3bf 8f4f 	dsb	sy
 801156a:	b662      	cpsie	i
 801156c:	60fb      	str	r3, [r7, #12]
}
 801156e:	bf00      	nop
 8011570:	f641 21a1 	movw	r1, #6817	@ 0x1aa1
 8011574:	483a      	ldr	r0, [pc, #232]	@ (8011660 <vTaskPriorityDisinheritAfterTimeout+0x184>)
 8011576:	f7f5 f963 	bl	8006840 <vAssertCalled>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801157a:	6a3b      	ldr	r3, [r7, #32]
 801157c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801157e:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8011580:	6a3b      	ldr	r3, [r7, #32]
 8011582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011584:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8011586:	6a3b      	ldr	r3, [r7, #32]
 8011588:	699b      	ldr	r3, [r3, #24]
 801158a:	2b00      	cmp	r3, #0
 801158c:	db04      	blt.n	8011598 <vTaskPriorityDisinheritAfterTimeout+0xbc>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 801158e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011590:	f1c3 0207 	rsb	r2, r3, #7
 8011594:	6a3b      	ldr	r3, [r7, #32]
 8011596:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011598:	6a3b      	ldr	r3, [r7, #32]
 801159a:	6959      	ldr	r1, [r3, #20]
 801159c:	69ba      	ldr	r2, [r7, #24]
 801159e:	4613      	mov	r3, r2
 80115a0:	009b      	lsls	r3, r3, #2
 80115a2:	4413      	add	r3, r2
 80115a4:	009b      	lsls	r3, r3, #2
 80115a6:	4a30      	ldr	r2, [pc, #192]	@ (8011668 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 80115a8:	4413      	add	r3, r2
 80115aa:	4299      	cmp	r1, r3
 80115ac:	d153      	bne.n	8011656 <vTaskPriorityDisinheritAfterTimeout+0x17a>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80115ae:	6a3b      	ldr	r3, [r7, #32]
 80115b0:	3304      	adds	r3, #4
 80115b2:	4618      	mov	r0, r3
 80115b4:	f7fd fcac 	bl	800ef10 <uxListRemove>
 80115b8:	4603      	mov	r3, r0
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d10a      	bne.n	80115d4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80115be:	6a3b      	ldr	r3, [r7, #32]
 80115c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115c2:	2201      	movs	r2, #1
 80115c4:	fa02 f303 	lsl.w	r3, r2, r3
 80115c8:	43da      	mvns	r2, r3
 80115ca:	4b28      	ldr	r3, [pc, #160]	@ (801166c <vTaskPriorityDisinheritAfterTimeout+0x190>)
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	4013      	ands	r3, r2
 80115d0:	4a26      	ldr	r2, [pc, #152]	@ (801166c <vTaskPriorityDisinheritAfterTimeout+0x190>)
 80115d2:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80115d4:	6a3b      	ldr	r3, [r7, #32]
 80115d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115d8:	2201      	movs	r2, #1
 80115da:	409a      	lsls	r2, r3
 80115dc:	4b23      	ldr	r3, [pc, #140]	@ (801166c <vTaskPriorityDisinheritAfterTimeout+0x190>)
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	4313      	orrs	r3, r2
 80115e2:	4a22      	ldr	r2, [pc, #136]	@ (801166c <vTaskPriorityDisinheritAfterTimeout+0x190>)
 80115e4:	6013      	str	r3, [r2, #0]
 80115e6:	6a3b      	ldr	r3, [r7, #32]
 80115e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115ea:	491f      	ldr	r1, [pc, #124]	@ (8011668 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 80115ec:	4613      	mov	r3, r2
 80115ee:	009b      	lsls	r3, r3, #2
 80115f0:	4413      	add	r3, r2
 80115f2:	009b      	lsls	r3, r3, #2
 80115f4:	440b      	add	r3, r1
 80115f6:	3304      	adds	r3, #4
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	617b      	str	r3, [r7, #20]
 80115fc:	6a3b      	ldr	r3, [r7, #32]
 80115fe:	697a      	ldr	r2, [r7, #20]
 8011600:	609a      	str	r2, [r3, #8]
 8011602:	697b      	ldr	r3, [r7, #20]
 8011604:	689a      	ldr	r2, [r3, #8]
 8011606:	6a3b      	ldr	r3, [r7, #32]
 8011608:	60da      	str	r2, [r3, #12]
 801160a:	697b      	ldr	r3, [r7, #20]
 801160c:	689b      	ldr	r3, [r3, #8]
 801160e:	6a3a      	ldr	r2, [r7, #32]
 8011610:	3204      	adds	r2, #4
 8011612:	605a      	str	r2, [r3, #4]
 8011614:	6a3b      	ldr	r3, [r7, #32]
 8011616:	1d1a      	adds	r2, r3, #4
 8011618:	697b      	ldr	r3, [r7, #20]
 801161a:	609a      	str	r2, [r3, #8]
 801161c:	6a3b      	ldr	r3, [r7, #32]
 801161e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011620:	4613      	mov	r3, r2
 8011622:	009b      	lsls	r3, r3, #2
 8011624:	4413      	add	r3, r2
 8011626:	009b      	lsls	r3, r3, #2
 8011628:	4a0f      	ldr	r2, [pc, #60]	@ (8011668 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 801162a:	441a      	add	r2, r3
 801162c:	6a3b      	ldr	r3, [r7, #32]
 801162e:	615a      	str	r2, [r3, #20]
 8011630:	6a3b      	ldr	r3, [r7, #32]
 8011632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011634:	490c      	ldr	r1, [pc, #48]	@ (8011668 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 8011636:	4613      	mov	r3, r2
 8011638:	009b      	lsls	r3, r3, #2
 801163a:	4413      	add	r3, r2
 801163c:	009b      	lsls	r3, r3, #2
 801163e:	440b      	add	r3, r1
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	6a3a      	ldr	r2, [r7, #32]
 8011644:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8011646:	1c59      	adds	r1, r3, #1
 8011648:	4807      	ldr	r0, [pc, #28]	@ (8011668 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 801164a:	4613      	mov	r3, r2
 801164c:	009b      	lsls	r3, r3, #2
 801164e:	4413      	add	r3, r2
 8011650:	009b      	lsls	r3, r3, #2
 8011652:	4403      	add	r3, r0
 8011654:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 8011656:	bf00      	nop
 8011658:	3728      	adds	r7, #40	@ 0x28
 801165a:	46bd      	mov	sp, r7
 801165c:	bd80      	pop	{r7, pc}
 801165e:	bf00      	nop
 8011660:	08019980 	.word	0x08019980
 8011664:	200004ec 	.word	0x200004ec
 8011668:	200004f0 	.word	0x200004f0
 801166c:	200005f4 	.word	0x200005f4

08011670 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8011670:	b480      	push	{r7}
 8011672:	b083      	sub	sp, #12
 8011674:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 8011676:	4b09      	ldr	r3, [pc, #36]	@ (801169c <pvTaskIncrementMutexHeldCount+0x2c>)
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d004      	beq.n	801168c <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011686:	1c5a      	adds	r2, r3, #1
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 801168c:	687b      	ldr	r3, [r7, #4]
    }
 801168e:	4618      	mov	r0, r3
 8011690:	370c      	adds	r7, #12
 8011692:	46bd      	mov	sp, r7
 8011694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011698:	4770      	bx	lr
 801169a:	bf00      	nop
 801169c:	200004ec 	.word	0x200004ec

080116a0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80116a0:	b580      	push	{r7, lr}
 80116a2:	b088      	sub	sp, #32
 80116a4:	af00      	add	r7, sp, #0
 80116a6:	6078      	str	r0, [r7, #4]
 80116a8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80116aa:	4b37      	ldr	r3, [pc, #220]	@ (8011788 <prvAddCurrentTaskToDelayedList+0xe8>)
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80116b0:	4b36      	ldr	r3, [pc, #216]	@ (801178c <prvAddCurrentTaskToDelayedList+0xec>)
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80116b6:	4b36      	ldr	r3, [pc, #216]	@ (8011790 <prvAddCurrentTaskToDelayedList+0xf0>)
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80116bc:	4b35      	ldr	r3, [pc, #212]	@ (8011794 <prvAddCurrentTaskToDelayedList+0xf4>)
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	3304      	adds	r3, #4
 80116c2:	4618      	mov	r0, r3
 80116c4:	f7fd fc24 	bl	800ef10 <uxListRemove>
 80116c8:	4603      	mov	r3, r0
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d10b      	bne.n	80116e6 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80116ce:	4b31      	ldr	r3, [pc, #196]	@ (8011794 <prvAddCurrentTaskToDelayedList+0xf4>)
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116d4:	2201      	movs	r2, #1
 80116d6:	fa02 f303 	lsl.w	r3, r2, r3
 80116da:	43da      	mvns	r2, r3
 80116dc:	4b2e      	ldr	r3, [pc, #184]	@ (8011798 <prvAddCurrentTaskToDelayedList+0xf8>)
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	4013      	ands	r3, r2
 80116e2:	4a2d      	ldr	r2, [pc, #180]	@ (8011798 <prvAddCurrentTaskToDelayedList+0xf8>)
 80116e4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116ec:	d124      	bne.n	8011738 <prvAddCurrentTaskToDelayedList+0x98>
 80116ee:	683b      	ldr	r3, [r7, #0]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d021      	beq.n	8011738 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80116f4:	4b29      	ldr	r3, [pc, #164]	@ (801179c <prvAddCurrentTaskToDelayedList+0xfc>)
 80116f6:	685b      	ldr	r3, [r3, #4]
 80116f8:	613b      	str	r3, [r7, #16]
 80116fa:	4b26      	ldr	r3, [pc, #152]	@ (8011794 <prvAddCurrentTaskToDelayedList+0xf4>)
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	693a      	ldr	r2, [r7, #16]
 8011700:	609a      	str	r2, [r3, #8]
 8011702:	4b24      	ldr	r3, [pc, #144]	@ (8011794 <prvAddCurrentTaskToDelayedList+0xf4>)
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	693a      	ldr	r2, [r7, #16]
 8011708:	6892      	ldr	r2, [r2, #8]
 801170a:	60da      	str	r2, [r3, #12]
 801170c:	4b21      	ldr	r3, [pc, #132]	@ (8011794 <prvAddCurrentTaskToDelayedList+0xf4>)
 801170e:	681a      	ldr	r2, [r3, #0]
 8011710:	693b      	ldr	r3, [r7, #16]
 8011712:	689b      	ldr	r3, [r3, #8]
 8011714:	3204      	adds	r2, #4
 8011716:	605a      	str	r2, [r3, #4]
 8011718:	4b1e      	ldr	r3, [pc, #120]	@ (8011794 <prvAddCurrentTaskToDelayedList+0xf4>)
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	1d1a      	adds	r2, r3, #4
 801171e:	693b      	ldr	r3, [r7, #16]
 8011720:	609a      	str	r2, [r3, #8]
 8011722:	4b1c      	ldr	r3, [pc, #112]	@ (8011794 <prvAddCurrentTaskToDelayedList+0xf4>)
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	4a1d      	ldr	r2, [pc, #116]	@ (801179c <prvAddCurrentTaskToDelayedList+0xfc>)
 8011728:	615a      	str	r2, [r3, #20]
 801172a:	4b1c      	ldr	r3, [pc, #112]	@ (801179c <prvAddCurrentTaskToDelayedList+0xfc>)
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	3301      	adds	r3, #1
 8011730:	4a1a      	ldr	r2, [pc, #104]	@ (801179c <prvAddCurrentTaskToDelayedList+0xfc>)
 8011732:	6013      	str	r3, [r2, #0]
 8011734:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8011736:	e022      	b.n	801177e <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8011738:	69fa      	ldr	r2, [r7, #28]
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	4413      	add	r3, r2
 801173e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011740:	4b14      	ldr	r3, [pc, #80]	@ (8011794 <prvAddCurrentTaskToDelayedList+0xf4>)
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	68fa      	ldr	r2, [r7, #12]
 8011746:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8011748:	68fa      	ldr	r2, [r7, #12]
 801174a:	69fb      	ldr	r3, [r7, #28]
 801174c:	429a      	cmp	r2, r3
 801174e:	d207      	bcs.n	8011760 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8011750:	4b10      	ldr	r3, [pc, #64]	@ (8011794 <prvAddCurrentTaskToDelayedList+0xf4>)
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	3304      	adds	r3, #4
 8011756:	4619      	mov	r1, r3
 8011758:	6978      	ldr	r0, [r7, #20]
 801175a:	f7fd fba0 	bl	800ee9e <vListInsert>
}
 801175e:	e00e      	b.n	801177e <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8011760:	4b0c      	ldr	r3, [pc, #48]	@ (8011794 <prvAddCurrentTaskToDelayedList+0xf4>)
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	3304      	adds	r3, #4
 8011766:	4619      	mov	r1, r3
 8011768:	69b8      	ldr	r0, [r7, #24]
 801176a:	f7fd fb98 	bl	800ee9e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 801176e:	4b0c      	ldr	r3, [pc, #48]	@ (80117a0 <prvAddCurrentTaskToDelayedList+0x100>)
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	68fa      	ldr	r2, [r7, #12]
 8011774:	429a      	cmp	r2, r3
 8011776:	d202      	bcs.n	801177e <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8011778:	4a09      	ldr	r2, [pc, #36]	@ (80117a0 <prvAddCurrentTaskToDelayedList+0x100>)
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	6013      	str	r3, [r2, #0]
}
 801177e:	bf00      	nop
 8011780:	3720      	adds	r7, #32
 8011782:	46bd      	mov	sp, r7
 8011784:	bd80      	pop	{r7, pc}
 8011786:	bf00      	nop
 8011788:	200005f0 	.word	0x200005f0
 801178c:	200005a4 	.word	0x200005a4
 8011790:	200005a8 	.word	0x200005a8
 8011794:	200004ec 	.word	0x200004ec
 8011798:	200005f4 	.word	0x200005f4
 801179c:	200005d8 	.word	0x200005d8
 80117a0:	2000060c 	.word	0x2000060c

080117a4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b084      	sub	sp, #16
 80117a8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80117aa:	2300      	movs	r3, #0
 80117ac:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80117ae:	f000 fa61 	bl	8011c74 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80117b2:	4b14      	ldr	r3, [pc, #80]	@ (8011804 <xTimerCreateTimerTask+0x60>)
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d00b      	beq.n	80117d2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80117ba:	4b13      	ldr	r3, [pc, #76]	@ (8011808 <xTimerCreateTimerTask+0x64>)
 80117bc:	9301      	str	r3, [sp, #4]
 80117be:	2306      	movs	r3, #6
 80117c0:	9300      	str	r3, [sp, #0]
 80117c2:	2300      	movs	r3, #0
 80117c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80117c8:	4910      	ldr	r1, [pc, #64]	@ (801180c <xTimerCreateTimerTask+0x68>)
 80117ca:	4811      	ldr	r0, [pc, #68]	@ (8011810 <xTimerCreateTimerTask+0x6c>)
 80117cc:	f7fe fa68 	bl	800fca0 <xTaskCreate>
 80117d0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d110      	bne.n	80117fa <xTimerCreateTimerTask+0x56>
    __asm volatile
 80117d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117dc:	b672      	cpsid	i
 80117de:	f383 8811 	msr	BASEPRI, r3
 80117e2:	f3bf 8f6f 	isb	sy
 80117e6:	f3bf 8f4f 	dsb	sy
 80117ea:	b662      	cpsie	i
 80117ec:	603b      	str	r3, [r7, #0]
}
 80117ee:	bf00      	nop
 80117f0:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 80117f4:	4807      	ldr	r0, [pc, #28]	@ (8011814 <xTimerCreateTimerTask+0x70>)
 80117f6:	f7f5 f823 	bl	8006840 <vAssertCalled>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 80117fa:	687b      	ldr	r3, [r7, #4]
    }
 80117fc:	4618      	mov	r0, r3
 80117fe:	3708      	adds	r7, #8
 8011800:	46bd      	mov	sp, r7
 8011802:	bd80      	pop	{r7, pc}
 8011804:	20000650 	.word	0x20000650
 8011808:	20000654 	.word	0x20000654
 801180c:	08019a24 	.word	0x08019a24
 8011810:	080118bd 	.word	0x080118bd
 8011814:	08019a2c 	.word	0x08019a2c

08011818 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8011818:	b580      	push	{r7, lr}
 801181a:	b084      	sub	sp, #16
 801181c:	af00      	add	r7, sp, #0
 801181e:	60f8      	str	r0, [r7, #12]
 8011820:	60b9      	str	r1, [r7, #8]
 8011822:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8011824:	e008      	b.n	8011838 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	699b      	ldr	r3, [r3, #24]
 801182a:	68ba      	ldr	r2, [r7, #8]
 801182c:	4413      	add	r3, r2
 801182e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	6a1b      	ldr	r3, [r3, #32]
 8011834:	68f8      	ldr	r0, [r7, #12]
 8011836:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	699a      	ldr	r2, [r3, #24]
 801183c:	68bb      	ldr	r3, [r7, #8]
 801183e:	18d1      	adds	r1, r2, r3
 8011840:	68bb      	ldr	r3, [r7, #8]
 8011842:	687a      	ldr	r2, [r7, #4]
 8011844:	68f8      	ldr	r0, [r7, #12]
 8011846:	f000 f8df 	bl	8011a08 <prvInsertTimerInActiveList>
 801184a:	4603      	mov	r3, r0
 801184c:	2b00      	cmp	r3, #0
 801184e:	d1ea      	bne.n	8011826 <prvReloadTimer+0xe>
        }
    }
 8011850:	bf00      	nop
 8011852:	bf00      	nop
 8011854:	3710      	adds	r7, #16
 8011856:	46bd      	mov	sp, r7
 8011858:	bd80      	pop	{r7, pc}
	...

0801185c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 801185c:	b580      	push	{r7, lr}
 801185e:	b084      	sub	sp, #16
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]
 8011864:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011866:	4b14      	ldr	r3, [pc, #80]	@ (80118b8 <prvProcessExpiredTimer+0x5c>)
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	68db      	ldr	r3, [r3, #12]
 801186c:	68db      	ldr	r3, [r3, #12]
 801186e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	3304      	adds	r3, #4
 8011874:	4618      	mov	r0, r3
 8011876:	f7fd fb4b 	bl	800ef10 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011880:	f003 0304 	and.w	r3, r3, #4
 8011884:	2b00      	cmp	r3, #0
 8011886:	d005      	beq.n	8011894 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8011888:	683a      	ldr	r2, [r7, #0]
 801188a:	6879      	ldr	r1, [r7, #4]
 801188c:	68f8      	ldr	r0, [r7, #12]
 801188e:	f7ff ffc3 	bl	8011818 <prvReloadTimer>
 8011892:	e008      	b.n	80118a6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801189a:	f023 0301 	bic.w	r3, r3, #1
 801189e:	b2da      	uxtb	r2, r3
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	6a1b      	ldr	r3, [r3, #32]
 80118aa:	68f8      	ldr	r0, [r7, #12]
 80118ac:	4798      	blx	r3
    }
 80118ae:	bf00      	nop
 80118b0:	3710      	adds	r7, #16
 80118b2:	46bd      	mov	sp, r7
 80118b4:	bd80      	pop	{r7, pc}
 80118b6:	bf00      	nop
 80118b8:	20000648 	.word	0x20000648

080118bc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80118bc:	b580      	push	{r7, lr}
 80118be:	b084      	sub	sp, #16
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80118c4:	f107 0308 	add.w	r3, r7, #8
 80118c8:	4618      	mov	r0, r3
 80118ca:	f000 f859 	bl	8011980 <prvGetNextExpireTime>
 80118ce:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80118d0:	68bb      	ldr	r3, [r7, #8]
 80118d2:	4619      	mov	r1, r3
 80118d4:	68f8      	ldr	r0, [r7, #12]
 80118d6:	f000 f805 	bl	80118e4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80118da:	f000 f8d7 	bl	8011a8c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80118de:	bf00      	nop
 80118e0:	e7f0      	b.n	80118c4 <prvTimerTask+0x8>
	...

080118e4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80118e4:	b580      	push	{r7, lr}
 80118e6:	b084      	sub	sp, #16
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
 80118ec:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80118ee:	f7fe fd5f 	bl	80103b0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80118f2:	f107 0308 	add.w	r3, r7, #8
 80118f6:	4618      	mov	r0, r3
 80118f8:	f000 f866 	bl	80119c8 <prvSampleTimeNow>
 80118fc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80118fe:	68bb      	ldr	r3, [r7, #8]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d130      	bne.n	8011966 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011904:	683b      	ldr	r3, [r7, #0]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d10a      	bne.n	8011920 <prvProcessTimerOrBlockTask+0x3c>
 801190a:	687a      	ldr	r2, [r7, #4]
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	429a      	cmp	r2, r3
 8011910:	d806      	bhi.n	8011920 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8011912:	f7fe fd5b 	bl	80103cc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011916:	68f9      	ldr	r1, [r7, #12]
 8011918:	6878      	ldr	r0, [r7, #4]
 801191a:	f7ff ff9f 	bl	801185c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 801191e:	e024      	b.n	801196a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d008      	beq.n	8011938 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011926:	4b13      	ldr	r3, [pc, #76]	@ (8011974 <prvProcessTimerOrBlockTask+0x90>)
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d101      	bne.n	8011934 <prvProcessTimerOrBlockTask+0x50>
 8011930:	2301      	movs	r3, #1
 8011932:	e000      	b.n	8011936 <prvProcessTimerOrBlockTask+0x52>
 8011934:	2300      	movs	r3, #0
 8011936:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011938:	4b0f      	ldr	r3, [pc, #60]	@ (8011978 <prvProcessTimerOrBlockTask+0x94>)
 801193a:	6818      	ldr	r0, [r3, #0]
 801193c:	687a      	ldr	r2, [r7, #4]
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	1ad3      	subs	r3, r2, r3
 8011942:	683a      	ldr	r2, [r7, #0]
 8011944:	4619      	mov	r1, r3
 8011946:	f7fe f93b 	bl	800fbc0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 801194a:	f7fe fd3f 	bl	80103cc <xTaskResumeAll>
 801194e:	4603      	mov	r3, r0
 8011950:	2b00      	cmp	r3, #0
 8011952:	d10a      	bne.n	801196a <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8011954:	4b09      	ldr	r3, [pc, #36]	@ (801197c <prvProcessTimerOrBlockTask+0x98>)
 8011956:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801195a:	601a      	str	r2, [r3, #0]
 801195c:	f3bf 8f4f 	dsb	sy
 8011960:	f3bf 8f6f 	isb	sy
    }
 8011964:	e001      	b.n	801196a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8011966:	f7fe fd31 	bl	80103cc <xTaskResumeAll>
    }
 801196a:	bf00      	nop
 801196c:	3710      	adds	r7, #16
 801196e:	46bd      	mov	sp, r7
 8011970:	bd80      	pop	{r7, pc}
 8011972:	bf00      	nop
 8011974:	2000064c 	.word	0x2000064c
 8011978:	20000650 	.word	0x20000650
 801197c:	e000ed04 	.word	0xe000ed04

08011980 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8011980:	b480      	push	{r7}
 8011982:	b085      	sub	sp, #20
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011988:	4b0e      	ldr	r3, [pc, #56]	@ (80119c4 <prvGetNextExpireTime+0x44>)
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d101      	bne.n	8011996 <prvGetNextExpireTime+0x16>
 8011992:	2201      	movs	r2, #1
 8011994:	e000      	b.n	8011998 <prvGetNextExpireTime+0x18>
 8011996:	2200      	movs	r2, #0
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d105      	bne.n	80119b0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80119a4:	4b07      	ldr	r3, [pc, #28]	@ (80119c4 <prvGetNextExpireTime+0x44>)
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	68db      	ldr	r3, [r3, #12]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	60fb      	str	r3, [r7, #12]
 80119ae:	e001      	b.n	80119b4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80119b0:	2300      	movs	r3, #0
 80119b2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80119b4:	68fb      	ldr	r3, [r7, #12]
    }
 80119b6:	4618      	mov	r0, r3
 80119b8:	3714      	adds	r7, #20
 80119ba:	46bd      	mov	sp, r7
 80119bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c0:	4770      	bx	lr
 80119c2:	bf00      	nop
 80119c4:	20000648 	.word	0x20000648

080119c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b084      	sub	sp, #16
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 80119d0:	f7fe fe0c 	bl	80105ec <xTaskGetTickCount>
 80119d4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80119d6:	4b0b      	ldr	r3, [pc, #44]	@ (8011a04 <prvSampleTimeNow+0x3c>)
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	68fa      	ldr	r2, [r7, #12]
 80119dc:	429a      	cmp	r2, r3
 80119de:	d205      	bcs.n	80119ec <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80119e0:	f000 f922 	bl	8011c28 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	2201      	movs	r2, #1
 80119e8:	601a      	str	r2, [r3, #0]
 80119ea:	e002      	b.n	80119f2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	2200      	movs	r2, #0
 80119f0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80119f2:	4a04      	ldr	r2, [pc, #16]	@ (8011a04 <prvSampleTimeNow+0x3c>)
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80119f8:	68fb      	ldr	r3, [r7, #12]
    }
 80119fa:	4618      	mov	r0, r3
 80119fc:	3710      	adds	r7, #16
 80119fe:	46bd      	mov	sp, r7
 8011a00:	bd80      	pop	{r7, pc}
 8011a02:	bf00      	nop
 8011a04:	20000658 	.word	0x20000658

08011a08 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b086      	sub	sp, #24
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	60f8      	str	r0, [r7, #12]
 8011a10:	60b9      	str	r1, [r7, #8]
 8011a12:	607a      	str	r2, [r7, #4]
 8011a14:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8011a16:	2300      	movs	r3, #0
 8011a18:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	68ba      	ldr	r2, [r7, #8]
 8011a1e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	68fa      	ldr	r2, [r7, #12]
 8011a24:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8011a26:	68ba      	ldr	r2, [r7, #8]
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	429a      	cmp	r2, r3
 8011a2c:	d812      	bhi.n	8011a54 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8011a2e:	687a      	ldr	r2, [r7, #4]
 8011a30:	683b      	ldr	r3, [r7, #0]
 8011a32:	1ad2      	subs	r2, r2, r3
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	699b      	ldr	r3, [r3, #24]
 8011a38:	429a      	cmp	r2, r3
 8011a3a:	d302      	bcc.n	8011a42 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8011a3c:	2301      	movs	r3, #1
 8011a3e:	617b      	str	r3, [r7, #20]
 8011a40:	e01b      	b.n	8011a7a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011a42:	4b10      	ldr	r3, [pc, #64]	@ (8011a84 <prvInsertTimerInActiveList+0x7c>)
 8011a44:	681a      	ldr	r2, [r3, #0]
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	3304      	adds	r3, #4
 8011a4a:	4619      	mov	r1, r3
 8011a4c:	4610      	mov	r0, r2
 8011a4e:	f7fd fa26 	bl	800ee9e <vListInsert>
 8011a52:	e012      	b.n	8011a7a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011a54:	687a      	ldr	r2, [r7, #4]
 8011a56:	683b      	ldr	r3, [r7, #0]
 8011a58:	429a      	cmp	r2, r3
 8011a5a:	d206      	bcs.n	8011a6a <prvInsertTimerInActiveList+0x62>
 8011a5c:	68ba      	ldr	r2, [r7, #8]
 8011a5e:	683b      	ldr	r3, [r7, #0]
 8011a60:	429a      	cmp	r2, r3
 8011a62:	d302      	bcc.n	8011a6a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8011a64:	2301      	movs	r3, #1
 8011a66:	617b      	str	r3, [r7, #20]
 8011a68:	e007      	b.n	8011a7a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011a6a:	4b07      	ldr	r3, [pc, #28]	@ (8011a88 <prvInsertTimerInActiveList+0x80>)
 8011a6c:	681a      	ldr	r2, [r3, #0]
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	3304      	adds	r3, #4
 8011a72:	4619      	mov	r1, r3
 8011a74:	4610      	mov	r0, r2
 8011a76:	f7fd fa12 	bl	800ee9e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8011a7a:	697b      	ldr	r3, [r7, #20]
    }
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	3718      	adds	r7, #24
 8011a80:	46bd      	mov	sp, r7
 8011a82:	bd80      	pop	{r7, pc}
 8011a84:	2000064c 	.word	0x2000064c
 8011a88:	20000648 	.word	0x20000648

08011a8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b088      	sub	sp, #32
 8011a90:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8011a92:	f107 0308 	add.w	r3, r7, #8
 8011a96:	2200      	movs	r2, #0
 8011a98:	601a      	str	r2, [r3, #0]
 8011a9a:	605a      	str	r2, [r3, #4]
 8011a9c:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8011a9e:	e0ae      	b.n	8011bfe <prvProcessReceivedCommands+0x172>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011aa0:	68bb      	ldr	r3, [r7, #8]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	f2c0 80ab 	blt.w	8011bfe <prvProcessReceivedCommands+0x172>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011aa8:	693b      	ldr	r3, [r7, #16]
 8011aaa:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8011aac:	69fb      	ldr	r3, [r7, #28]
 8011aae:	695b      	ldr	r3, [r3, #20]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d004      	beq.n	8011abe <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011ab4:	69fb      	ldr	r3, [r7, #28]
 8011ab6:	3304      	adds	r3, #4
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f7fd fa29 	bl	800ef10 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011abe:	1d3b      	adds	r3, r7, #4
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	f7ff ff81 	bl	80119c8 <prvSampleTimeNow>
 8011ac6:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8011ac8:	68bb      	ldr	r3, [r7, #8]
 8011aca:	3b01      	subs	r3, #1
 8011acc:	2b08      	cmp	r3, #8
 8011ace:	f200 8093 	bhi.w	8011bf8 <prvProcessReceivedCommands+0x16c>
 8011ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8011ad8 <prvProcessReceivedCommands+0x4c>)
 8011ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ad8:	08011afd 	.word	0x08011afd
 8011adc:	08011afd 	.word	0x08011afd
 8011ae0:	08011b65 	.word	0x08011b65
 8011ae4:	08011b79 	.word	0x08011b79
 8011ae8:	08011bcf 	.word	0x08011bcf
 8011aec:	08011afd 	.word	0x08011afd
 8011af0:	08011afd 	.word	0x08011afd
 8011af4:	08011b65 	.word	0x08011b65
 8011af8:	08011b79 	.word	0x08011b79
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8011afc:	69fb      	ldr	r3, [r7, #28]
 8011afe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011b02:	f043 0301 	orr.w	r3, r3, #1
 8011b06:	b2da      	uxtb	r2, r3
 8011b08:	69fb      	ldr	r3, [r7, #28]
 8011b0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011b0e:	68fa      	ldr	r2, [r7, #12]
 8011b10:	69fb      	ldr	r3, [r7, #28]
 8011b12:	699b      	ldr	r3, [r3, #24]
 8011b14:	18d1      	adds	r1, r2, r3
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	69ba      	ldr	r2, [r7, #24]
 8011b1a:	69f8      	ldr	r0, [r7, #28]
 8011b1c:	f7ff ff74 	bl	8011a08 <prvInsertTimerInActiveList>
 8011b20:	4603      	mov	r3, r0
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d06a      	beq.n	8011bfc <prvProcessReceivedCommands+0x170>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8011b26:	69fb      	ldr	r3, [r7, #28]
 8011b28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011b2c:	f003 0304 	and.w	r3, r3, #4
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d009      	beq.n	8011b48 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8011b34:	68fa      	ldr	r2, [r7, #12]
 8011b36:	69fb      	ldr	r3, [r7, #28]
 8011b38:	699b      	ldr	r3, [r3, #24]
 8011b3a:	4413      	add	r3, r2
 8011b3c:	69ba      	ldr	r2, [r7, #24]
 8011b3e:	4619      	mov	r1, r3
 8011b40:	69f8      	ldr	r0, [r7, #28]
 8011b42:	f7ff fe69 	bl	8011818 <prvReloadTimer>
 8011b46:	e008      	b.n	8011b5a <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8011b48:	69fb      	ldr	r3, [r7, #28]
 8011b4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011b4e:	f023 0301 	bic.w	r3, r3, #1
 8011b52:	b2da      	uxtb	r2, r3
 8011b54:	69fb      	ldr	r3, [r7, #28]
 8011b56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011b5a:	69fb      	ldr	r3, [r7, #28]
 8011b5c:	6a1b      	ldr	r3, [r3, #32]
 8011b5e:	69f8      	ldr	r0, [r7, #28]
 8011b60:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8011b62:	e04b      	b.n	8011bfc <prvProcessReceivedCommands+0x170>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8011b64:	69fb      	ldr	r3, [r7, #28]
 8011b66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011b6a:	f023 0301 	bic.w	r3, r3, #1
 8011b6e:	b2da      	uxtb	r2, r3
 8011b70:	69fb      	ldr	r3, [r7, #28]
 8011b72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8011b76:	e042      	b.n	8011bfe <prvProcessReceivedCommands+0x172>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8011b78:	69fb      	ldr	r3, [r7, #28]
 8011b7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011b7e:	f043 0301 	orr.w	r3, r3, #1
 8011b82:	b2da      	uxtb	r2, r3
 8011b84:	69fb      	ldr	r3, [r7, #28]
 8011b86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011b8a:	68fa      	ldr	r2, [r7, #12]
 8011b8c:	69fb      	ldr	r3, [r7, #28]
 8011b8e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011b90:	69fb      	ldr	r3, [r7, #28]
 8011b92:	699b      	ldr	r3, [r3, #24]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d110      	bne.n	8011bba <prvProcessReceivedCommands+0x12e>
    __asm volatile
 8011b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b9c:	b672      	cpsid	i
 8011b9e:	f383 8811 	msr	BASEPRI, r3
 8011ba2:	f3bf 8f6f 	isb	sy
 8011ba6:	f3bf 8f4f 	dsb	sy
 8011baa:	b662      	cpsie	i
 8011bac:	617b      	str	r3, [r7, #20]
}
 8011bae:	bf00      	nop
 8011bb0:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8011bb4:	481a      	ldr	r0, [pc, #104]	@ (8011c20 <prvProcessReceivedCommands+0x194>)
 8011bb6:	f7f4 fe43 	bl	8006840 <vAssertCalled>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011bba:	69fb      	ldr	r3, [r7, #28]
 8011bbc:	699a      	ldr	r2, [r3, #24]
 8011bbe:	69bb      	ldr	r3, [r7, #24]
 8011bc0:	18d1      	adds	r1, r2, r3
 8011bc2:	69bb      	ldr	r3, [r7, #24]
 8011bc4:	69ba      	ldr	r2, [r7, #24]
 8011bc6:	69f8      	ldr	r0, [r7, #28]
 8011bc8:	f7ff ff1e 	bl	8011a08 <prvInsertTimerInActiveList>
                        break;
 8011bcc:	e017      	b.n	8011bfe <prvProcessReceivedCommands+0x172>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011bce:	69fb      	ldr	r3, [r7, #28]
 8011bd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011bd4:	f003 0302 	and.w	r3, r3, #2
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d103      	bne.n	8011be4 <prvProcessReceivedCommands+0x158>
                            {
                                vPortFree( pxTimer );
 8011bdc:	69f8      	ldr	r0, [r7, #28]
 8011bde:	f7f5 f9a5 	bl	8006f2c <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8011be2:	e00c      	b.n	8011bfe <prvProcessReceivedCommands+0x172>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8011be4:	69fb      	ldr	r3, [r7, #28]
 8011be6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011bea:	f023 0301 	bic.w	r3, r3, #1
 8011bee:	b2da      	uxtb	r2, r3
 8011bf0:	69fb      	ldr	r3, [r7, #28]
 8011bf2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8011bf6:	e002      	b.n	8011bfe <prvProcessReceivedCommands+0x172>

                    default:
                        /* Don't expect to get here. */
                        break;
 8011bf8:	bf00      	nop
 8011bfa:	e000      	b.n	8011bfe <prvProcessReceivedCommands+0x172>
                        break;
 8011bfc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8011bfe:	4b09      	ldr	r3, [pc, #36]	@ (8011c24 <prvProcessReceivedCommands+0x198>)
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	f107 0108 	add.w	r1, r7, #8
 8011c06:	2200      	movs	r2, #0
 8011c08:	4618      	mov	r0, r3
 8011c0a:	f7fd fc87 	bl	800f51c <xQueueReceive>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	f47f af45 	bne.w	8011aa0 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8011c16:	bf00      	nop
 8011c18:	bf00      	nop
 8011c1a:	3720      	adds	r7, #32
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	bd80      	pop	{r7, pc}
 8011c20:	08019a2c 	.word	0x08019a2c
 8011c24:	20000650 	.word	0x20000650

08011c28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b082      	sub	sp, #8
 8011c2c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011c2e:	e009      	b.n	8011c44 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011c30:	4b0e      	ldr	r3, [pc, #56]	@ (8011c6c <prvSwitchTimerLists+0x44>)
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	68db      	ldr	r3, [r3, #12]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8011c3a:	f04f 31ff 	mov.w	r1, #4294967295
 8011c3e:	6838      	ldr	r0, [r7, #0]
 8011c40:	f7ff fe0c 	bl	801185c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011c44:	4b09      	ldr	r3, [pc, #36]	@ (8011c6c <prvSwitchTimerLists+0x44>)
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d1f0      	bne.n	8011c30 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8011c4e:	4b07      	ldr	r3, [pc, #28]	@ (8011c6c <prvSwitchTimerLists+0x44>)
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8011c54:	4b06      	ldr	r3, [pc, #24]	@ (8011c70 <prvSwitchTimerLists+0x48>)
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	4a04      	ldr	r2, [pc, #16]	@ (8011c6c <prvSwitchTimerLists+0x44>)
 8011c5a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8011c5c:	4a04      	ldr	r2, [pc, #16]	@ (8011c70 <prvSwitchTimerLists+0x48>)
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	6013      	str	r3, [r2, #0]
    }
 8011c62:	bf00      	nop
 8011c64:	3708      	adds	r7, #8
 8011c66:	46bd      	mov	sp, r7
 8011c68:	bd80      	pop	{r7, pc}
 8011c6a:	bf00      	nop
 8011c6c:	20000648 	.word	0x20000648
 8011c70:	2000064c 	.word	0x2000064c

08011c74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8011c74:	b580      	push	{r7, lr}
 8011c76:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8011c78:	f000 f99a 	bl	8011fb0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8011c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8011cb4 <prvCheckForValidListAndQueue+0x40>)
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d113      	bne.n	8011cac <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 8011c84:	480c      	ldr	r0, [pc, #48]	@ (8011cb8 <prvCheckForValidListAndQueue+0x44>)
 8011c86:	f7fd f8b9 	bl	800edfc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8011c8a:	480c      	ldr	r0, [pc, #48]	@ (8011cbc <prvCheckForValidListAndQueue+0x48>)
 8011c8c:	f7fd f8b6 	bl	800edfc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8011c90:	4b0b      	ldr	r3, [pc, #44]	@ (8011cc0 <prvCheckForValidListAndQueue+0x4c>)
 8011c92:	4a09      	ldr	r2, [pc, #36]	@ (8011cb8 <prvCheckForValidListAndQueue+0x44>)
 8011c94:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8011c96:	4b0b      	ldr	r3, [pc, #44]	@ (8011cc4 <prvCheckForValidListAndQueue+0x50>)
 8011c98:	4a08      	ldr	r2, [pc, #32]	@ (8011cbc <prvCheckForValidListAndQueue+0x48>)
 8011c9a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	210c      	movs	r1, #12
 8011ca0:	2008      	movs	r0, #8
 8011ca2:	f7fd f9fd 	bl	800f0a0 <xQueueGenericCreate>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	4a02      	ldr	r2, [pc, #8]	@ (8011cb4 <prvCheckForValidListAndQueue+0x40>)
 8011caa:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8011cac:	f000 f9b8 	bl	8012020 <vPortExitCritical>
    }
 8011cb0:	bf00      	nop
 8011cb2:	bd80      	pop	{r7, pc}
 8011cb4:	20000650 	.word	0x20000650
 8011cb8:	20000620 	.word	0x20000620
 8011cbc:	20000634 	.word	0x20000634
 8011cc0:	20000648 	.word	0x20000648
 8011cc4:	2000064c 	.word	0x2000064c

08011cc8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8011cc8:	b480      	push	{r7}
 8011cca:	b085      	sub	sp, #20
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	60f8      	str	r0, [r7, #12]
 8011cd0:	60b9      	str	r1, [r7, #8]
 8011cd2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	3b04      	subs	r3, #4
 8011cd8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8011ce0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	3b04      	subs	r3, #4
 8011ce6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8011ce8:	68bb      	ldr	r3, [r7, #8]
 8011cea:	f023 0201 	bic.w	r2, r3, #1
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	3b04      	subs	r3, #4
 8011cf6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8011cf8:	4a0c      	ldr	r2, [pc, #48]	@ (8011d2c <pxPortInitialiseStack+0x64>)
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	3b14      	subs	r3, #20
 8011d02:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8011d04:	687a      	ldr	r2, [r7, #4]
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	3b04      	subs	r3, #4
 8011d0e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	f06f 0202 	mvn.w	r2, #2
 8011d16:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	3b20      	subs	r3, #32
 8011d1c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8011d1e:	68fb      	ldr	r3, [r7, #12]
}
 8011d20:	4618      	mov	r0, r3
 8011d22:	3714      	adds	r7, #20
 8011d24:	46bd      	mov	sp, r7
 8011d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2a:	4770      	bx	lr
 8011d2c:	08011d31 	.word	0x08011d31

08011d30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011d30:	b580      	push	{r7, lr}
 8011d32:	b084      	sub	sp, #16
 8011d34:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8011d36:	2300      	movs	r3, #0
 8011d38:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8011d3a:	4b15      	ldr	r3, [pc, #84]	@ (8011d90 <prvTaskExitError+0x60>)
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d42:	d00f      	beq.n	8011d64 <prvTaskExitError+0x34>
    __asm volatile
 8011d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d48:	b672      	cpsid	i
 8011d4a:	f383 8811 	msr	BASEPRI, r3
 8011d4e:	f3bf 8f6f 	isb	sy
 8011d52:	f3bf 8f4f 	dsb	sy
 8011d56:	b662      	cpsie	i
 8011d58:	60fb      	str	r3, [r7, #12]
}
 8011d5a:	bf00      	nop
 8011d5c:	21ee      	movs	r1, #238	@ 0xee
 8011d5e:	480d      	ldr	r0, [pc, #52]	@ (8011d94 <prvTaskExitError+0x64>)
 8011d60:	f7f4 fd6e 	bl	8006840 <vAssertCalled>
    __asm volatile
 8011d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d68:	b672      	cpsid	i
 8011d6a:	f383 8811 	msr	BASEPRI, r3
 8011d6e:	f3bf 8f6f 	isb	sy
 8011d72:	f3bf 8f4f 	dsb	sy
 8011d76:	b662      	cpsie	i
 8011d78:	60bb      	str	r3, [r7, #8]
}
 8011d7a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8011d7c:	bf00      	nop
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d0fc      	beq.n	8011d7e <prvTaskExitError+0x4e>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8011d84:	bf00      	nop
 8011d86:	bf00      	nop
 8011d88:	3710      	adds	r7, #16
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	bd80      	pop	{r7, pc}
 8011d8e:	bf00      	nop
 8011d90:	20000058 	.word	0x20000058
 8011d94:	08019aa0 	.word	0x08019aa0
	...

08011da0 <SVC_Handler>:
/*-----------------------------------------------------------*/
void vPortSVCHandler( void )
{
	__asm volatile (
 8011da0:	4b07      	ldr	r3, [pc, #28]	@ (8011dc0 <pxCurrentTCBConst2>)
 8011da2:	6819      	ldr	r1, [r3, #0]
 8011da4:	6808      	ldr	r0, [r1, #0]
 8011da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011daa:	f380 8809 	msr	PSP, r0
 8011dae:	f3bf 8f6f 	isb	sy
 8011db2:	f04f 0000 	mov.w	r0, #0
 8011db6:	f380 8811 	msr	BASEPRI, r0
 8011dba:	4770      	bx	lr
 8011dbc:	f3af 8000 	nop.w

08011dc0 <pxCurrentTCBConst2>:
 8011dc0:	200004ec 	.word	0x200004ec
	        "   bx r14                          \n"
	        "                                   \n"
	        "   .align 4                        \n"
	        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
	        );
}
 8011dc4:	bf00      	nop
 8011dc6:	bf00      	nop

08011dc8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8011dc8:	4808      	ldr	r0, [pc, #32]	@ (8011dec <prvPortStartFirstTask+0x24>)
 8011dca:	6800      	ldr	r0, [r0, #0]
 8011dcc:	6800      	ldr	r0, [r0, #0]
 8011dce:	f380 8808 	msr	MSP, r0
 8011dd2:	f04f 0000 	mov.w	r0, #0
 8011dd6:	f380 8814 	msr	CONTROL, r0
 8011dda:	b662      	cpsie	i
 8011ddc:	b661      	cpsie	f
 8011dde:	f3bf 8f4f 	dsb	sy
 8011de2:	f3bf 8f6f 	isb	sy
 8011de6:	df00      	svc	0
 8011de8:	bf00      	nop
 8011dea:	0000      	.short	0x0000
 8011dec:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8011df0:	bf00      	nop
 8011df2:	bf00      	nop

08011df4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b08a      	sub	sp, #40	@ 0x28
 8011df8:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8011dfa:	4b62      	ldr	r3, [pc, #392]	@ (8011f84 <xPortStartScheduler+0x190>)
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8011e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e02:	332c      	adds	r3, #44	@ 0x2c
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	4a60      	ldr	r2, [pc, #384]	@ (8011f88 <xPortStartScheduler+0x194>)
 8011e08:	4293      	cmp	r3, r2
 8011e0a:	d010      	beq.n	8011e2e <xPortStartScheduler+0x3a>
    __asm volatile
 8011e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e10:	b672      	cpsid	i
 8011e12:	f383 8811 	msr	BASEPRI, r3
 8011e16:	f3bf 8f6f 	isb	sy
 8011e1a:	f3bf 8f4f 	dsb	sy
 8011e1e:	b662      	cpsie	i
 8011e20:	61bb      	str	r3, [r7, #24]
}
 8011e22:	bf00      	nop
 8011e24:	f240 114b 	movw	r1, #331	@ 0x14b
 8011e28:	4858      	ldr	r0, [pc, #352]	@ (8011f8c <xPortStartScheduler+0x198>)
 8011e2a:	f7f4 fd09 	bl	8006840 <vAssertCalled>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8011e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e30:	3338      	adds	r3, #56	@ 0x38
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	4a56      	ldr	r2, [pc, #344]	@ (8011f90 <xPortStartScheduler+0x19c>)
 8011e36:	4293      	cmp	r3, r2
 8011e38:	d010      	beq.n	8011e5c <xPortStartScheduler+0x68>
    __asm volatile
 8011e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e3e:	b672      	cpsid	i
 8011e40:	f383 8811 	msr	BASEPRI, r3
 8011e44:	f3bf 8f6f 	isb	sy
 8011e48:	f3bf 8f4f 	dsb	sy
 8011e4c:	b662      	cpsie	i
 8011e4e:	61fb      	str	r3, [r7, #28]
}
 8011e50:	bf00      	nop
 8011e52:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8011e56:	484d      	ldr	r0, [pc, #308]	@ (8011f8c <xPortStartScheduler+0x198>)
 8011e58:	f7f4 fcf2 	bl	8006840 <vAssertCalled>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011e60:	4b4c      	ldr	r3, [pc, #304]	@ (8011f94 <xPortStartScheduler+0x1a0>)
 8011e62:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8011e64:	6a3b      	ldr	r3, [r7, #32]
 8011e66:	781b      	ldrb	r3, [r3, #0]
 8011e68:	b2db      	uxtb	r3, r3
 8011e6a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011e6c:	6a3b      	ldr	r3, [r7, #32]
 8011e6e:	22ff      	movs	r2, #255	@ 0xff
 8011e70:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011e72:	6a3b      	ldr	r3, [r7, #32]
 8011e74:	781b      	ldrb	r3, [r3, #0]
 8011e76:	b2db      	uxtb	r3, r3
 8011e78:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011e7a:	79fb      	ldrb	r3, [r7, #7]
 8011e7c:	b2db      	uxtb	r3, r3
 8011e7e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8011e82:	b2da      	uxtb	r2, r3
 8011e84:	4b44      	ldr	r3, [pc, #272]	@ (8011f98 <xPortStartScheduler+0x1a4>)
 8011e86:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8011e88:	4b43      	ldr	r3, [pc, #268]	@ (8011f98 <xPortStartScheduler+0x1a4>)
 8011e8a:	781b      	ldrb	r3, [r3, #0]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d110      	bne.n	8011eb2 <xPortStartScheduler+0xbe>
    __asm volatile
 8011e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e94:	b672      	cpsid	i
 8011e96:	f383 8811 	msr	BASEPRI, r3
 8011e9a:	f3bf 8f6f 	isb	sy
 8011e9e:	f3bf 8f4f 	dsb	sy
 8011ea2:	b662      	cpsie	i
 8011ea4:	617b      	str	r3, [r7, #20]
}
 8011ea6:	bf00      	nop
 8011ea8:	f240 116f 	movw	r1, #367	@ 0x16f
 8011eac:	4837      	ldr	r0, [pc, #220]	@ (8011f8c <xPortStartScheduler+0x198>)
 8011eae:	f7f4 fcc7 	bl	8006840 <vAssertCalled>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8011eb2:	79fb      	ldrb	r3, [r7, #7]
 8011eb4:	b2db      	uxtb	r3, r3
 8011eb6:	43db      	mvns	r3, r3
 8011eb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d019      	beq.n	8011ef4 <xPortStartScheduler+0x100>
    __asm volatile
 8011ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ec4:	b672      	cpsid	i
 8011ec6:	f383 8811 	msr	BASEPRI, r3
 8011eca:	f3bf 8f6f 	isb	sy
 8011ece:	f3bf 8f4f 	dsb	sy
 8011ed2:	b662      	cpsie	i
 8011ed4:	613b      	str	r3, [r7, #16]
}
 8011ed6:	bf00      	nop
 8011ed8:	f240 1173 	movw	r1, #371	@ 0x173
 8011edc:	482b      	ldr	r0, [pc, #172]	@ (8011f8c <xPortStartScheduler+0x198>)
 8011ede:	f7f4 fcaf 	bl	8006840 <vAssertCalled>

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011ee2:	e007      	b.n	8011ef4 <xPortStartScheduler+0x100>
        {
            ulImplementedPrioBits++;
 8011ee4:	68bb      	ldr	r3, [r7, #8]
 8011ee6:	3301      	adds	r3, #1
 8011ee8:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011eea:	79fb      	ldrb	r3, [r7, #7]
 8011eec:	b2db      	uxtb	r3, r3
 8011eee:	005b      	lsls	r3, r3, #1
 8011ef0:	b2db      	uxtb	r3, r3
 8011ef2:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011ef4:	79fb      	ldrb	r3, [r7, #7]
 8011ef6:	b2db      	uxtb	r3, r3
 8011ef8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011efc:	2b80      	cmp	r3, #128	@ 0x80
 8011efe:	d0f1      	beq.n	8011ee4 <xPortStartScheduler+0xf0>
        }

        if( ulImplementedPrioBits == 8 )
 8011f00:	68bb      	ldr	r3, [r7, #8]
 8011f02:	2b08      	cmp	r3, #8
 8011f04:	d103      	bne.n	8011f0e <xPortStartScheduler+0x11a>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8011f06:	4b25      	ldr	r3, [pc, #148]	@ (8011f9c <xPortStartScheduler+0x1a8>)
 8011f08:	2200      	movs	r2, #0
 8011f0a:	601a      	str	r2, [r3, #0]
 8011f0c:	e004      	b.n	8011f18 <xPortStartScheduler+0x124>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8011f0e:	68bb      	ldr	r3, [r7, #8]
 8011f10:	f1c3 0307 	rsb	r3, r3, #7
 8011f14:	4a21      	ldr	r2, [pc, #132]	@ (8011f9c <xPortStartScheduler+0x1a8>)
 8011f16:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011f18:	4b20      	ldr	r3, [pc, #128]	@ (8011f9c <xPortStartScheduler+0x1a8>)
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	021b      	lsls	r3, r3, #8
 8011f1e:	4a1f      	ldr	r2, [pc, #124]	@ (8011f9c <xPortStartScheduler+0x1a8>)
 8011f20:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011f22:	4b1e      	ldr	r3, [pc, #120]	@ (8011f9c <xPortStartScheduler+0x1a8>)
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011f2a:	4a1c      	ldr	r2, [pc, #112]	@ (8011f9c <xPortStartScheduler+0x1a8>)
 8011f2c:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8011f2e:	7bfb      	ldrb	r3, [r7, #15]
 8011f30:	b2da      	uxtb	r2, r3
 8011f32:	6a3b      	ldr	r3, [r7, #32]
 8011f34:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8011f36:	4b1a      	ldr	r3, [pc, #104]	@ (8011fa0 <xPortStartScheduler+0x1ac>)
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	4a19      	ldr	r2, [pc, #100]	@ (8011fa0 <xPortStartScheduler+0x1ac>)
 8011f3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011f40:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8011f42:	4b17      	ldr	r3, [pc, #92]	@ (8011fa0 <xPortStartScheduler+0x1ac>)
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	4a16      	ldr	r2, [pc, #88]	@ (8011fa0 <xPortStartScheduler+0x1ac>)
 8011f48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011f4c:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8011f4e:	4b15      	ldr	r3, [pc, #84]	@ (8011fa4 <xPortStartScheduler+0x1b0>)
 8011f50:	2200      	movs	r2, #0
 8011f52:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8011f54:	f000 f8ec 	bl	8012130 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8011f58:	4b13      	ldr	r3, [pc, #76]	@ (8011fa8 <xPortStartScheduler+0x1b4>)
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8011f5e:	f000 f90b 	bl	8012178 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011f62:	4b12      	ldr	r3, [pc, #72]	@ (8011fac <xPortStartScheduler+0x1b8>)
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	4a11      	ldr	r2, [pc, #68]	@ (8011fac <xPortStartScheduler+0x1b8>)
 8011f68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8011f6c:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8011f6e:	f7ff ff2b 	bl	8011dc8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8011f72:	f7fe fcfd 	bl	8010970 <vTaskSwitchContext>
    prvTaskExitError();
 8011f76:	f7ff fedb 	bl	8011d30 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8011f7a:	2300      	movs	r3, #0
}
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	3728      	adds	r7, #40	@ 0x28
 8011f80:	46bd      	mov	sp, r7
 8011f82:	bd80      	pop	{r7, pc}
 8011f84:	e000ed08 	.word	0xe000ed08
 8011f88:	08011da1 	.word	0x08011da1
 8011f8c:	08019aa0 	.word	0x08019aa0
 8011f90:	08012081 	.word	0x08012081
 8011f94:	e000e400 	.word	0xe000e400
 8011f98:	2000065c 	.word	0x2000065c
 8011f9c:	20000660 	.word	0x20000660
 8011fa0:	e000ed20 	.word	0xe000ed20
 8011fa4:	e000ed1c 	.word	0xe000ed1c
 8011fa8:	20000058 	.word	0x20000058
 8011fac:	e000ef34 	.word	0xe000ef34

08011fb0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b082      	sub	sp, #8
 8011fb4:	af00      	add	r7, sp, #0
    __asm volatile
 8011fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fba:	b672      	cpsid	i
 8011fbc:	f383 8811 	msr	BASEPRI, r3
 8011fc0:	f3bf 8f6f 	isb	sy
 8011fc4:	f3bf 8f4f 	dsb	sy
 8011fc8:	b662      	cpsie	i
 8011fca:	607b      	str	r3, [r7, #4]
}
 8011fcc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8011fce:	4b11      	ldr	r3, [pc, #68]	@ (8012014 <vPortEnterCritical+0x64>)
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	3301      	adds	r3, #1
 8011fd4:	4a0f      	ldr	r2, [pc, #60]	@ (8012014 <vPortEnterCritical+0x64>)
 8011fd6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8011fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8012014 <vPortEnterCritical+0x64>)
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	2b01      	cmp	r3, #1
 8011fde:	d115      	bne.n	801200c <vPortEnterCritical+0x5c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8012018 <vPortEnterCritical+0x68>)
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	b2db      	uxtb	r3, r3
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d010      	beq.n	801200c <vPortEnterCritical+0x5c>
    __asm volatile
 8011fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fee:	b672      	cpsid	i
 8011ff0:	f383 8811 	msr	BASEPRI, r3
 8011ff4:	f3bf 8f6f 	isb	sy
 8011ff8:	f3bf 8f4f 	dsb	sy
 8011ffc:	b662      	cpsie	i
 8011ffe:	603b      	str	r3, [r7, #0]
}
 8012000:	bf00      	nop
 8012002:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 8012006:	4805      	ldr	r0, [pc, #20]	@ (801201c <vPortEnterCritical+0x6c>)
 8012008:	f7f4 fc1a 	bl	8006840 <vAssertCalled>
    }
}
 801200c:	bf00      	nop
 801200e:	3708      	adds	r7, #8
 8012010:	46bd      	mov	sp, r7
 8012012:	bd80      	pop	{r7, pc}
 8012014:	20000058 	.word	0x20000058
 8012018:	e000ed04 	.word	0xe000ed04
 801201c:	08019aa0 	.word	0x08019aa0

08012020 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b082      	sub	sp, #8
 8012024:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8012026:	4b14      	ldr	r3, [pc, #80]	@ (8012078 <vPortExitCritical+0x58>)
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d110      	bne.n	8012050 <vPortExitCritical+0x30>
    __asm volatile
 801202e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012032:	b672      	cpsid	i
 8012034:	f383 8811 	msr	BASEPRI, r3
 8012038:	f3bf 8f6f 	isb	sy
 801203c:	f3bf 8f4f 	dsb	sy
 8012040:	b662      	cpsie	i
 8012042:	607b      	str	r3, [r7, #4]
}
 8012044:	bf00      	nop
 8012046:	f240 11e3 	movw	r1, #483	@ 0x1e3
 801204a:	480c      	ldr	r0, [pc, #48]	@ (801207c <vPortExitCritical+0x5c>)
 801204c:	f7f4 fbf8 	bl	8006840 <vAssertCalled>
    uxCriticalNesting--;
 8012050:	4b09      	ldr	r3, [pc, #36]	@ (8012078 <vPortExitCritical+0x58>)
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	3b01      	subs	r3, #1
 8012056:	4a08      	ldr	r2, [pc, #32]	@ (8012078 <vPortExitCritical+0x58>)
 8012058:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 801205a:	4b07      	ldr	r3, [pc, #28]	@ (8012078 <vPortExitCritical+0x58>)
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d105      	bne.n	801206e <vPortExitCritical+0x4e>
 8012062:	2300      	movs	r3, #0
 8012064:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8012066:	683b      	ldr	r3, [r7, #0]
 8012068:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 801206c:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 801206e:	bf00      	nop
 8012070:	3708      	adds	r7, #8
 8012072:	46bd      	mov	sp, r7
 8012074:	bd80      	pop	{r7, pc}
 8012076:	bf00      	nop
 8012078:	20000058 	.word	0x20000058
 801207c:	08019aa0 	.word	0x08019aa0

08012080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8012080:	f3ef 8009 	mrs	r0, PSP
 8012084:	f3bf 8f6f 	isb	sy
 8012088:	4b15      	ldr	r3, [pc, #84]	@ (80120e0 <pxCurrentTCBConst>)
 801208a:	681a      	ldr	r2, [r3, #0]
 801208c:	f01e 0f10 	tst.w	lr, #16
 8012090:	bf08      	it	eq
 8012092:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012096:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801209a:	6010      	str	r0, [r2, #0]
 801209c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80120a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80120a4:	b672      	cpsid	i
 80120a6:	f380 8811 	msr	BASEPRI, r0
 80120aa:	f3bf 8f4f 	dsb	sy
 80120ae:	f3bf 8f6f 	isb	sy
 80120b2:	b662      	cpsie	i
 80120b4:	f7fe fc5c 	bl	8010970 <vTaskSwitchContext>
 80120b8:	f04f 0000 	mov.w	r0, #0
 80120bc:	f380 8811 	msr	BASEPRI, r0
 80120c0:	bc09      	pop	{r0, r3}
 80120c2:	6819      	ldr	r1, [r3, #0]
 80120c4:	6808      	ldr	r0, [r1, #0]
 80120c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120ca:	f01e 0f10 	tst.w	lr, #16
 80120ce:	bf08      	it	eq
 80120d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80120d4:	f380 8809 	msr	PSP, r0
 80120d8:	f3bf 8f6f 	isb	sy
 80120dc:	4770      	bx	lr
 80120de:	bf00      	nop

080120e0 <pxCurrentTCBConst>:
 80120e0:	200004ec 	.word	0x200004ec
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80120e4:	bf00      	nop
 80120e6:	bf00      	nop

080120e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b082      	sub	sp, #8
 80120ec:	af00      	add	r7, sp, #0
    __asm volatile
 80120ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120f2:	b672      	cpsid	i
 80120f4:	f383 8811 	msr	BASEPRI, r3
 80120f8:	f3bf 8f6f 	isb	sy
 80120fc:	f3bf 8f4f 	dsb	sy
 8012100:	b662      	cpsie	i
 8012102:	607b      	str	r3, [r7, #4]
}
 8012104:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8012106:	f7fe fb13 	bl	8010730 <xTaskIncrementTick>
 801210a:	4603      	mov	r3, r0
 801210c:	2b00      	cmp	r3, #0
 801210e:	d003      	beq.n	8012118 <xPortSysTickHandler+0x30>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012110:	4b06      	ldr	r3, [pc, #24]	@ (801212c <xPortSysTickHandler+0x44>)
 8012112:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012116:	601a      	str	r2, [r3, #0]
 8012118:	2300      	movs	r3, #0
 801211a:	603b      	str	r3, [r7, #0]
    __asm volatile
 801211c:	683b      	ldr	r3, [r7, #0]
 801211e:	f383 8811 	msr	BASEPRI, r3
}
 8012122:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8012124:	bf00      	nop
 8012126:	3708      	adds	r7, #8
 8012128:	46bd      	mov	sp, r7
 801212a:	bd80      	pop	{r7, pc}
 801212c:	e000ed04 	.word	0xe000ed04

08012130 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8012130:	b480      	push	{r7}
 8012132:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012134:	4b0b      	ldr	r3, [pc, #44]	@ (8012164 <vPortSetupTimerInterrupt+0x34>)
 8012136:	2200      	movs	r2, #0
 8012138:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801213a:	4b0b      	ldr	r3, [pc, #44]	@ (8012168 <vPortSetupTimerInterrupt+0x38>)
 801213c:	2200      	movs	r2, #0
 801213e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012140:	4b0a      	ldr	r3, [pc, #40]	@ (801216c <vPortSetupTimerInterrupt+0x3c>)
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	4a0a      	ldr	r2, [pc, #40]	@ (8012170 <vPortSetupTimerInterrupt+0x40>)
 8012146:	fba2 2303 	umull	r2, r3, r2, r3
 801214a:	099b      	lsrs	r3, r3, #6
 801214c:	4a09      	ldr	r2, [pc, #36]	@ (8012174 <vPortSetupTimerInterrupt+0x44>)
 801214e:	3b01      	subs	r3, #1
 8012150:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012152:	4b04      	ldr	r3, [pc, #16]	@ (8012164 <vPortSetupTimerInterrupt+0x34>)
 8012154:	2207      	movs	r2, #7
 8012156:	601a      	str	r2, [r3, #0]
}
 8012158:	bf00      	nop
 801215a:	46bd      	mov	sp, r7
 801215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012160:	4770      	bx	lr
 8012162:	bf00      	nop
 8012164:	e000e010 	.word	0xe000e010
 8012168:	e000e018 	.word	0xe000e018
 801216c:	2000004c 	.word	0x2000004c
 8012170:	10624dd3 	.word	0x10624dd3
 8012174:	e000e014 	.word	0xe000e014

08012178 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8012178:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8012188 <vPortEnableVFP+0x10>
 801217c:	6801      	ldr	r1, [r0, #0]
 801217e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8012182:	6001      	str	r1, [r0, #0]
 8012184:	4770      	bx	lr
 8012186:	0000      	.short	0x0000
 8012188:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 801218c:	bf00      	nop
 801218e:	bf00      	nop

08012190 <__assert_func>:
 8012190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012192:	4614      	mov	r4, r2
 8012194:	461a      	mov	r2, r3
 8012196:	4b09      	ldr	r3, [pc, #36]	@ (80121bc <__assert_func+0x2c>)
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	4605      	mov	r5, r0
 801219c:	68d8      	ldr	r0, [r3, #12]
 801219e:	b14c      	cbz	r4, 80121b4 <__assert_func+0x24>
 80121a0:	4b07      	ldr	r3, [pc, #28]	@ (80121c0 <__assert_func+0x30>)
 80121a2:	9100      	str	r1, [sp, #0]
 80121a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80121a8:	4906      	ldr	r1, [pc, #24]	@ (80121c4 <__assert_func+0x34>)
 80121aa:	462b      	mov	r3, r5
 80121ac:	f002 f8ea 	bl	8014384 <fiprintf>
 80121b0:	f002 fcf8 	bl	8014ba4 <abort>
 80121b4:	4b04      	ldr	r3, [pc, #16]	@ (80121c8 <__assert_func+0x38>)
 80121b6:	461c      	mov	r4, r3
 80121b8:	e7f3      	b.n	80121a2 <__assert_func+0x12>
 80121ba:	bf00      	nop
 80121bc:	200001d4 	.word	0x200001d4
 80121c0:	08019ff8 	.word	0x08019ff8
 80121c4:	0801a005 	.word	0x0801a005
 80121c8:	0801a033 	.word	0x0801a033

080121cc <atof>:
 80121cc:	2100      	movs	r1, #0
 80121ce:	f000 bf2d 	b.w	801302c <strtod>

080121d2 <atoi>:
 80121d2:	220a      	movs	r2, #10
 80121d4:	2100      	movs	r1, #0
 80121d6:	f000 bfb1 	b.w	801313c <strtol>
	...

080121dc <calloc>:
 80121dc:	4b02      	ldr	r3, [pc, #8]	@ (80121e8 <calloc+0xc>)
 80121de:	460a      	mov	r2, r1
 80121e0:	4601      	mov	r1, r0
 80121e2:	6818      	ldr	r0, [r3, #0]
 80121e4:	f000 b802 	b.w	80121ec <_calloc_r>
 80121e8:	200001d4 	.word	0x200001d4

080121ec <_calloc_r>:
 80121ec:	b570      	push	{r4, r5, r6, lr}
 80121ee:	fba1 5402 	umull	r5, r4, r1, r2
 80121f2:	b934      	cbnz	r4, 8012202 <_calloc_r+0x16>
 80121f4:	4629      	mov	r1, r5
 80121f6:	f000 f887 	bl	8012308 <_malloc_r>
 80121fa:	4606      	mov	r6, r0
 80121fc:	b928      	cbnz	r0, 801220a <_calloc_r+0x1e>
 80121fe:	4630      	mov	r0, r6
 8012200:	bd70      	pop	{r4, r5, r6, pc}
 8012202:	220c      	movs	r2, #12
 8012204:	6002      	str	r2, [r0, #0]
 8012206:	2600      	movs	r6, #0
 8012208:	e7f9      	b.n	80121fe <_calloc_r+0x12>
 801220a:	462a      	mov	r2, r5
 801220c:	4621      	mov	r1, r4
 801220e:	f002 fb47 	bl	80148a0 <memset>
 8012212:	e7f4      	b.n	80121fe <_calloc_r+0x12>

08012214 <getenv>:
 8012214:	b507      	push	{r0, r1, r2, lr}
 8012216:	4b04      	ldr	r3, [pc, #16]	@ (8012228 <getenv+0x14>)
 8012218:	4601      	mov	r1, r0
 801221a:	aa01      	add	r2, sp, #4
 801221c:	6818      	ldr	r0, [r3, #0]
 801221e:	f000 f805 	bl	801222c <_findenv_r>
 8012222:	b003      	add	sp, #12
 8012224:	f85d fb04 	ldr.w	pc, [sp], #4
 8012228:	200001d4 	.word	0x200001d4

0801222c <_findenv_r>:
 801222c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012230:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80122a0 <_findenv_r+0x74>
 8012234:	4606      	mov	r6, r0
 8012236:	4689      	mov	r9, r1
 8012238:	4617      	mov	r7, r2
 801223a:	f7f4 fe21 	bl	8006e80 <__env_lock>
 801223e:	f8da 4000 	ldr.w	r4, [sl]
 8012242:	b134      	cbz	r4, 8012252 <_findenv_r+0x26>
 8012244:	464b      	mov	r3, r9
 8012246:	4698      	mov	r8, r3
 8012248:	f813 2b01 	ldrb.w	r2, [r3], #1
 801224c:	b13a      	cbz	r2, 801225e <_findenv_r+0x32>
 801224e:	2a3d      	cmp	r2, #61	@ 0x3d
 8012250:	d1f9      	bne.n	8012246 <_findenv_r+0x1a>
 8012252:	4630      	mov	r0, r6
 8012254:	f7f4 fe4c 	bl	8006ef0 <__env_unlock>
 8012258:	2000      	movs	r0, #0
 801225a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801225e:	eba8 0809 	sub.w	r8, r8, r9
 8012262:	46a3      	mov	fp, r4
 8012264:	f854 0b04 	ldr.w	r0, [r4], #4
 8012268:	2800      	cmp	r0, #0
 801226a:	d0f2      	beq.n	8012252 <_findenv_r+0x26>
 801226c:	4642      	mov	r2, r8
 801226e:	4649      	mov	r1, r9
 8012270:	f002 fb2b 	bl	80148ca <strncmp>
 8012274:	2800      	cmp	r0, #0
 8012276:	d1f4      	bne.n	8012262 <_findenv_r+0x36>
 8012278:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801227c:	eb03 0508 	add.w	r5, r3, r8
 8012280:	f813 3008 	ldrb.w	r3, [r3, r8]
 8012284:	2b3d      	cmp	r3, #61	@ 0x3d
 8012286:	d1ec      	bne.n	8012262 <_findenv_r+0x36>
 8012288:	f8da 3000 	ldr.w	r3, [sl]
 801228c:	ebab 0303 	sub.w	r3, fp, r3
 8012290:	109b      	asrs	r3, r3, #2
 8012292:	4630      	mov	r0, r6
 8012294:	603b      	str	r3, [r7, #0]
 8012296:	f7f4 fe2b 	bl	8006ef0 <__env_unlock>
 801229a:	1c68      	adds	r0, r5, #1
 801229c:	e7dd      	b.n	801225a <_findenv_r+0x2e>
 801229e:	bf00      	nop
 80122a0:	20000044 	.word	0x20000044

080122a4 <malloc>:
 80122a4:	4b02      	ldr	r3, [pc, #8]	@ (80122b0 <malloc+0xc>)
 80122a6:	4601      	mov	r1, r0
 80122a8:	6818      	ldr	r0, [r3, #0]
 80122aa:	f000 b82d 	b.w	8012308 <_malloc_r>
 80122ae:	bf00      	nop
 80122b0:	200001d4 	.word	0x200001d4

080122b4 <free>:
 80122b4:	4b02      	ldr	r3, [pc, #8]	@ (80122c0 <free+0xc>)
 80122b6:	4601      	mov	r1, r0
 80122b8:	6818      	ldr	r0, [r3, #0]
 80122ba:	f003 bad5 	b.w	8015868 <_free_r>
 80122be:	bf00      	nop
 80122c0:	200001d4 	.word	0x200001d4

080122c4 <sbrk_aligned>:
 80122c4:	b570      	push	{r4, r5, r6, lr}
 80122c6:	4e0f      	ldr	r6, [pc, #60]	@ (8012304 <sbrk_aligned+0x40>)
 80122c8:	460c      	mov	r4, r1
 80122ca:	6831      	ldr	r1, [r6, #0]
 80122cc:	4605      	mov	r5, r0
 80122ce:	b911      	cbnz	r1, 80122d6 <sbrk_aligned+0x12>
 80122d0:	f7f4 fd04 	bl	8006cdc <_sbrk_r>
 80122d4:	6030      	str	r0, [r6, #0]
 80122d6:	4621      	mov	r1, r4
 80122d8:	4628      	mov	r0, r5
 80122da:	f7f4 fcff 	bl	8006cdc <_sbrk_r>
 80122de:	1c43      	adds	r3, r0, #1
 80122e0:	d103      	bne.n	80122ea <sbrk_aligned+0x26>
 80122e2:	f04f 34ff 	mov.w	r4, #4294967295
 80122e6:	4620      	mov	r0, r4
 80122e8:	bd70      	pop	{r4, r5, r6, pc}
 80122ea:	1cc4      	adds	r4, r0, #3
 80122ec:	f024 0403 	bic.w	r4, r4, #3
 80122f0:	42a0      	cmp	r0, r4
 80122f2:	d0f8      	beq.n	80122e6 <sbrk_aligned+0x22>
 80122f4:	1a21      	subs	r1, r4, r0
 80122f6:	4628      	mov	r0, r5
 80122f8:	f7f4 fcf0 	bl	8006cdc <_sbrk_r>
 80122fc:	3001      	adds	r0, #1
 80122fe:	d1f2      	bne.n	80122e6 <sbrk_aligned+0x22>
 8012300:	e7ef      	b.n	80122e2 <sbrk_aligned+0x1e>
 8012302:	bf00      	nop
 8012304:	20000664 	.word	0x20000664

08012308 <_malloc_r>:
 8012308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801230c:	1ccd      	adds	r5, r1, #3
 801230e:	f025 0503 	bic.w	r5, r5, #3
 8012312:	3508      	adds	r5, #8
 8012314:	2d0c      	cmp	r5, #12
 8012316:	bf38      	it	cc
 8012318:	250c      	movcc	r5, #12
 801231a:	2d00      	cmp	r5, #0
 801231c:	4606      	mov	r6, r0
 801231e:	db01      	blt.n	8012324 <_malloc_r+0x1c>
 8012320:	42a9      	cmp	r1, r5
 8012322:	d904      	bls.n	801232e <_malloc_r+0x26>
 8012324:	230c      	movs	r3, #12
 8012326:	6033      	str	r3, [r6, #0]
 8012328:	2000      	movs	r0, #0
 801232a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801232e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012404 <_malloc_r+0xfc>
 8012332:	f7f4 fd57 	bl	8006de4 <__malloc_lock>
 8012336:	f8d8 3000 	ldr.w	r3, [r8]
 801233a:	461c      	mov	r4, r3
 801233c:	bb44      	cbnz	r4, 8012390 <_malloc_r+0x88>
 801233e:	4629      	mov	r1, r5
 8012340:	4630      	mov	r0, r6
 8012342:	f7ff ffbf 	bl	80122c4 <sbrk_aligned>
 8012346:	1c43      	adds	r3, r0, #1
 8012348:	4604      	mov	r4, r0
 801234a:	d158      	bne.n	80123fe <_malloc_r+0xf6>
 801234c:	f8d8 4000 	ldr.w	r4, [r8]
 8012350:	4627      	mov	r7, r4
 8012352:	2f00      	cmp	r7, #0
 8012354:	d143      	bne.n	80123de <_malloc_r+0xd6>
 8012356:	2c00      	cmp	r4, #0
 8012358:	d04b      	beq.n	80123f2 <_malloc_r+0xea>
 801235a:	6823      	ldr	r3, [r4, #0]
 801235c:	4639      	mov	r1, r7
 801235e:	4630      	mov	r0, r6
 8012360:	eb04 0903 	add.w	r9, r4, r3
 8012364:	f7f4 fcba 	bl	8006cdc <_sbrk_r>
 8012368:	4581      	cmp	r9, r0
 801236a:	d142      	bne.n	80123f2 <_malloc_r+0xea>
 801236c:	6821      	ldr	r1, [r4, #0]
 801236e:	1a6d      	subs	r5, r5, r1
 8012370:	4629      	mov	r1, r5
 8012372:	4630      	mov	r0, r6
 8012374:	f7ff ffa6 	bl	80122c4 <sbrk_aligned>
 8012378:	3001      	adds	r0, #1
 801237a:	d03a      	beq.n	80123f2 <_malloc_r+0xea>
 801237c:	6823      	ldr	r3, [r4, #0]
 801237e:	442b      	add	r3, r5
 8012380:	6023      	str	r3, [r4, #0]
 8012382:	f8d8 3000 	ldr.w	r3, [r8]
 8012386:	685a      	ldr	r2, [r3, #4]
 8012388:	bb62      	cbnz	r2, 80123e4 <_malloc_r+0xdc>
 801238a:	f8c8 7000 	str.w	r7, [r8]
 801238e:	e00f      	b.n	80123b0 <_malloc_r+0xa8>
 8012390:	6822      	ldr	r2, [r4, #0]
 8012392:	1b52      	subs	r2, r2, r5
 8012394:	d420      	bmi.n	80123d8 <_malloc_r+0xd0>
 8012396:	2a0b      	cmp	r2, #11
 8012398:	d917      	bls.n	80123ca <_malloc_r+0xc2>
 801239a:	1961      	adds	r1, r4, r5
 801239c:	42a3      	cmp	r3, r4
 801239e:	6025      	str	r5, [r4, #0]
 80123a0:	bf18      	it	ne
 80123a2:	6059      	strne	r1, [r3, #4]
 80123a4:	6863      	ldr	r3, [r4, #4]
 80123a6:	bf08      	it	eq
 80123a8:	f8c8 1000 	streq.w	r1, [r8]
 80123ac:	5162      	str	r2, [r4, r5]
 80123ae:	604b      	str	r3, [r1, #4]
 80123b0:	4630      	mov	r0, r6
 80123b2:	f7f4 fd51 	bl	8006e58 <__malloc_unlock>
 80123b6:	f104 000b 	add.w	r0, r4, #11
 80123ba:	1d23      	adds	r3, r4, #4
 80123bc:	f020 0007 	bic.w	r0, r0, #7
 80123c0:	1ac2      	subs	r2, r0, r3
 80123c2:	bf1c      	itt	ne
 80123c4:	1a1b      	subne	r3, r3, r0
 80123c6:	50a3      	strne	r3, [r4, r2]
 80123c8:	e7af      	b.n	801232a <_malloc_r+0x22>
 80123ca:	6862      	ldr	r2, [r4, #4]
 80123cc:	42a3      	cmp	r3, r4
 80123ce:	bf0c      	ite	eq
 80123d0:	f8c8 2000 	streq.w	r2, [r8]
 80123d4:	605a      	strne	r2, [r3, #4]
 80123d6:	e7eb      	b.n	80123b0 <_malloc_r+0xa8>
 80123d8:	4623      	mov	r3, r4
 80123da:	6864      	ldr	r4, [r4, #4]
 80123dc:	e7ae      	b.n	801233c <_malloc_r+0x34>
 80123de:	463c      	mov	r4, r7
 80123e0:	687f      	ldr	r7, [r7, #4]
 80123e2:	e7b6      	b.n	8012352 <_malloc_r+0x4a>
 80123e4:	461a      	mov	r2, r3
 80123e6:	685b      	ldr	r3, [r3, #4]
 80123e8:	42a3      	cmp	r3, r4
 80123ea:	d1fb      	bne.n	80123e4 <_malloc_r+0xdc>
 80123ec:	2300      	movs	r3, #0
 80123ee:	6053      	str	r3, [r2, #4]
 80123f0:	e7de      	b.n	80123b0 <_malloc_r+0xa8>
 80123f2:	230c      	movs	r3, #12
 80123f4:	6033      	str	r3, [r6, #0]
 80123f6:	4630      	mov	r0, r6
 80123f8:	f7f4 fd2e 	bl	8006e58 <__malloc_unlock>
 80123fc:	e794      	b.n	8012328 <_malloc_r+0x20>
 80123fe:	6005      	str	r5, [r0, #0]
 8012400:	e7d6      	b.n	80123b0 <_malloc_r+0xa8>
 8012402:	bf00      	nop
 8012404:	20000668 	.word	0x20000668

08012408 <mallinfo>:
 8012408:	b510      	push	{r4, lr}
 801240a:	4b03      	ldr	r3, [pc, #12]	@ (8012418 <mallinfo+0x10>)
 801240c:	4604      	mov	r4, r0
 801240e:	6819      	ldr	r1, [r3, #0]
 8012410:	f003 fdae 	bl	8015f70 <_mallinfo_r>
 8012414:	4620      	mov	r0, r4
 8012416:	bd10      	pop	{r4, pc}
 8012418:	200001d4 	.word	0x200001d4

0801241c <sulp>:
 801241c:	b570      	push	{r4, r5, r6, lr}
 801241e:	4604      	mov	r4, r0
 8012420:	460d      	mov	r5, r1
 8012422:	ec45 4b10 	vmov	d0, r4, r5
 8012426:	4616      	mov	r6, r2
 8012428:	f004 f954 	bl	80166d4 <__ulp>
 801242c:	ec51 0b10 	vmov	r0, r1, d0
 8012430:	b17e      	cbz	r6, 8012452 <sulp+0x36>
 8012432:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012436:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801243a:	2b00      	cmp	r3, #0
 801243c:	dd09      	ble.n	8012452 <sulp+0x36>
 801243e:	051b      	lsls	r3, r3, #20
 8012440:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8012444:	2400      	movs	r4, #0
 8012446:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801244a:	4622      	mov	r2, r4
 801244c:	462b      	mov	r3, r5
 801244e:	f7ee f903 	bl	8000658 <__aeabi_dmul>
 8012452:	ec41 0b10 	vmov	d0, r0, r1
 8012456:	bd70      	pop	{r4, r5, r6, pc}

08012458 <_strtod_l>:
 8012458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801245c:	b09f      	sub	sp, #124	@ 0x7c
 801245e:	460c      	mov	r4, r1
 8012460:	9217      	str	r2, [sp, #92]	@ 0x5c
 8012462:	2200      	movs	r2, #0
 8012464:	921a      	str	r2, [sp, #104]	@ 0x68
 8012466:	9005      	str	r0, [sp, #20]
 8012468:	f04f 0a00 	mov.w	sl, #0
 801246c:	f04f 0b00 	mov.w	fp, #0
 8012470:	460a      	mov	r2, r1
 8012472:	9219      	str	r2, [sp, #100]	@ 0x64
 8012474:	7811      	ldrb	r1, [r2, #0]
 8012476:	292b      	cmp	r1, #43	@ 0x2b
 8012478:	d04a      	beq.n	8012510 <_strtod_l+0xb8>
 801247a:	d838      	bhi.n	80124ee <_strtod_l+0x96>
 801247c:	290d      	cmp	r1, #13
 801247e:	d832      	bhi.n	80124e6 <_strtod_l+0x8e>
 8012480:	2908      	cmp	r1, #8
 8012482:	d832      	bhi.n	80124ea <_strtod_l+0x92>
 8012484:	2900      	cmp	r1, #0
 8012486:	d03b      	beq.n	8012500 <_strtod_l+0xa8>
 8012488:	2200      	movs	r2, #0
 801248a:	920e      	str	r2, [sp, #56]	@ 0x38
 801248c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801248e:	782a      	ldrb	r2, [r5, #0]
 8012490:	2a30      	cmp	r2, #48	@ 0x30
 8012492:	f040 80b2 	bne.w	80125fa <_strtod_l+0x1a2>
 8012496:	786a      	ldrb	r2, [r5, #1]
 8012498:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801249c:	2a58      	cmp	r2, #88	@ 0x58
 801249e:	d16e      	bne.n	801257e <_strtod_l+0x126>
 80124a0:	9302      	str	r3, [sp, #8]
 80124a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80124a4:	9301      	str	r3, [sp, #4]
 80124a6:	ab1a      	add	r3, sp, #104	@ 0x68
 80124a8:	9300      	str	r3, [sp, #0]
 80124aa:	4a8f      	ldr	r2, [pc, #572]	@ (80126e8 <_strtod_l+0x290>)
 80124ac:	9805      	ldr	r0, [sp, #20]
 80124ae:	ab1b      	add	r3, sp, #108	@ 0x6c
 80124b0:	a919      	add	r1, sp, #100	@ 0x64
 80124b2:	f003 fa8b 	bl	80159cc <__gethex>
 80124b6:	f010 060f 	ands.w	r6, r0, #15
 80124ba:	4604      	mov	r4, r0
 80124bc:	d005      	beq.n	80124ca <_strtod_l+0x72>
 80124be:	2e06      	cmp	r6, #6
 80124c0:	d128      	bne.n	8012514 <_strtod_l+0xbc>
 80124c2:	3501      	adds	r5, #1
 80124c4:	2300      	movs	r3, #0
 80124c6:	9519      	str	r5, [sp, #100]	@ 0x64
 80124c8:	930e      	str	r3, [sp, #56]	@ 0x38
 80124ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	f040 858e 	bne.w	8012fee <_strtod_l+0xb96>
 80124d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80124d4:	b1cb      	cbz	r3, 801250a <_strtod_l+0xb2>
 80124d6:	4652      	mov	r2, sl
 80124d8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80124dc:	ec43 2b10 	vmov	d0, r2, r3
 80124e0:	b01f      	add	sp, #124	@ 0x7c
 80124e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124e6:	2920      	cmp	r1, #32
 80124e8:	d1ce      	bne.n	8012488 <_strtod_l+0x30>
 80124ea:	3201      	adds	r2, #1
 80124ec:	e7c1      	b.n	8012472 <_strtod_l+0x1a>
 80124ee:	292d      	cmp	r1, #45	@ 0x2d
 80124f0:	d1ca      	bne.n	8012488 <_strtod_l+0x30>
 80124f2:	2101      	movs	r1, #1
 80124f4:	910e      	str	r1, [sp, #56]	@ 0x38
 80124f6:	1c51      	adds	r1, r2, #1
 80124f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80124fa:	7852      	ldrb	r2, [r2, #1]
 80124fc:	2a00      	cmp	r2, #0
 80124fe:	d1c5      	bne.n	801248c <_strtod_l+0x34>
 8012500:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012502:	9419      	str	r4, [sp, #100]	@ 0x64
 8012504:	2b00      	cmp	r3, #0
 8012506:	f040 8570 	bne.w	8012fea <_strtod_l+0xb92>
 801250a:	4652      	mov	r2, sl
 801250c:	465b      	mov	r3, fp
 801250e:	e7e5      	b.n	80124dc <_strtod_l+0x84>
 8012510:	2100      	movs	r1, #0
 8012512:	e7ef      	b.n	80124f4 <_strtod_l+0x9c>
 8012514:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012516:	b13a      	cbz	r2, 8012528 <_strtod_l+0xd0>
 8012518:	2135      	movs	r1, #53	@ 0x35
 801251a:	a81c      	add	r0, sp, #112	@ 0x70
 801251c:	f004 f9d4 	bl	80168c8 <__copybits>
 8012520:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012522:	9805      	ldr	r0, [sp, #20]
 8012524:	f003 fdaa 	bl	801607c <_Bfree>
 8012528:	3e01      	subs	r6, #1
 801252a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801252c:	2e04      	cmp	r6, #4
 801252e:	d806      	bhi.n	801253e <_strtod_l+0xe6>
 8012530:	e8df f006 	tbb	[pc, r6]
 8012534:	201d0314 	.word	0x201d0314
 8012538:	14          	.byte	0x14
 8012539:	00          	.byte	0x00
 801253a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801253e:	05e1      	lsls	r1, r4, #23
 8012540:	bf48      	it	mi
 8012542:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8012546:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801254a:	0d1b      	lsrs	r3, r3, #20
 801254c:	051b      	lsls	r3, r3, #20
 801254e:	2b00      	cmp	r3, #0
 8012550:	d1bb      	bne.n	80124ca <_strtod_l+0x72>
 8012552:	f002 fadd 	bl	8014b10 <__errno>
 8012556:	2322      	movs	r3, #34	@ 0x22
 8012558:	6003      	str	r3, [r0, #0]
 801255a:	e7b6      	b.n	80124ca <_strtod_l+0x72>
 801255c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8012560:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012564:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8012568:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801256c:	e7e7      	b.n	801253e <_strtod_l+0xe6>
 801256e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80126f0 <_strtod_l+0x298>
 8012572:	e7e4      	b.n	801253e <_strtod_l+0xe6>
 8012574:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8012578:	f04f 3aff 	mov.w	sl, #4294967295
 801257c:	e7df      	b.n	801253e <_strtod_l+0xe6>
 801257e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012580:	1c5a      	adds	r2, r3, #1
 8012582:	9219      	str	r2, [sp, #100]	@ 0x64
 8012584:	785b      	ldrb	r3, [r3, #1]
 8012586:	2b30      	cmp	r3, #48	@ 0x30
 8012588:	d0f9      	beq.n	801257e <_strtod_l+0x126>
 801258a:	2b00      	cmp	r3, #0
 801258c:	d09d      	beq.n	80124ca <_strtod_l+0x72>
 801258e:	2301      	movs	r3, #1
 8012590:	2700      	movs	r7, #0
 8012592:	9308      	str	r3, [sp, #32]
 8012594:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012596:	930c      	str	r3, [sp, #48]	@ 0x30
 8012598:	970b      	str	r7, [sp, #44]	@ 0x2c
 801259a:	46b9      	mov	r9, r7
 801259c:	220a      	movs	r2, #10
 801259e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80125a0:	7805      	ldrb	r5, [r0, #0]
 80125a2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80125a6:	b2d9      	uxtb	r1, r3
 80125a8:	2909      	cmp	r1, #9
 80125aa:	d928      	bls.n	80125fe <_strtod_l+0x1a6>
 80125ac:	494f      	ldr	r1, [pc, #316]	@ (80126ec <_strtod_l+0x294>)
 80125ae:	2201      	movs	r2, #1
 80125b0:	f002 f98b 	bl	80148ca <strncmp>
 80125b4:	2800      	cmp	r0, #0
 80125b6:	d032      	beq.n	801261e <_strtod_l+0x1c6>
 80125b8:	2000      	movs	r0, #0
 80125ba:	462a      	mov	r2, r5
 80125bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80125be:	464d      	mov	r5, r9
 80125c0:	4603      	mov	r3, r0
 80125c2:	2a65      	cmp	r2, #101	@ 0x65
 80125c4:	d001      	beq.n	80125ca <_strtod_l+0x172>
 80125c6:	2a45      	cmp	r2, #69	@ 0x45
 80125c8:	d114      	bne.n	80125f4 <_strtod_l+0x19c>
 80125ca:	b91d      	cbnz	r5, 80125d4 <_strtod_l+0x17c>
 80125cc:	9a08      	ldr	r2, [sp, #32]
 80125ce:	4302      	orrs	r2, r0
 80125d0:	d096      	beq.n	8012500 <_strtod_l+0xa8>
 80125d2:	2500      	movs	r5, #0
 80125d4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80125d6:	1c62      	adds	r2, r4, #1
 80125d8:	9219      	str	r2, [sp, #100]	@ 0x64
 80125da:	7862      	ldrb	r2, [r4, #1]
 80125dc:	2a2b      	cmp	r2, #43	@ 0x2b
 80125de:	d07a      	beq.n	80126d6 <_strtod_l+0x27e>
 80125e0:	2a2d      	cmp	r2, #45	@ 0x2d
 80125e2:	d07e      	beq.n	80126e2 <_strtod_l+0x28a>
 80125e4:	f04f 0c00 	mov.w	ip, #0
 80125e8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80125ec:	2909      	cmp	r1, #9
 80125ee:	f240 8085 	bls.w	80126fc <_strtod_l+0x2a4>
 80125f2:	9419      	str	r4, [sp, #100]	@ 0x64
 80125f4:	f04f 0800 	mov.w	r8, #0
 80125f8:	e0a5      	b.n	8012746 <_strtod_l+0x2ee>
 80125fa:	2300      	movs	r3, #0
 80125fc:	e7c8      	b.n	8012590 <_strtod_l+0x138>
 80125fe:	f1b9 0f08 	cmp.w	r9, #8
 8012602:	bfd8      	it	le
 8012604:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8012606:	f100 0001 	add.w	r0, r0, #1
 801260a:	bfda      	itte	le
 801260c:	fb02 3301 	mlale	r3, r2, r1, r3
 8012610:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8012612:	fb02 3707 	mlagt	r7, r2, r7, r3
 8012616:	f109 0901 	add.w	r9, r9, #1
 801261a:	9019      	str	r0, [sp, #100]	@ 0x64
 801261c:	e7bf      	b.n	801259e <_strtod_l+0x146>
 801261e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012620:	1c5a      	adds	r2, r3, #1
 8012622:	9219      	str	r2, [sp, #100]	@ 0x64
 8012624:	785a      	ldrb	r2, [r3, #1]
 8012626:	f1b9 0f00 	cmp.w	r9, #0
 801262a:	d03b      	beq.n	80126a4 <_strtod_l+0x24c>
 801262c:	900a      	str	r0, [sp, #40]	@ 0x28
 801262e:	464d      	mov	r5, r9
 8012630:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8012634:	2b09      	cmp	r3, #9
 8012636:	d912      	bls.n	801265e <_strtod_l+0x206>
 8012638:	2301      	movs	r3, #1
 801263a:	e7c2      	b.n	80125c2 <_strtod_l+0x16a>
 801263c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801263e:	1c5a      	adds	r2, r3, #1
 8012640:	9219      	str	r2, [sp, #100]	@ 0x64
 8012642:	785a      	ldrb	r2, [r3, #1]
 8012644:	3001      	adds	r0, #1
 8012646:	2a30      	cmp	r2, #48	@ 0x30
 8012648:	d0f8      	beq.n	801263c <_strtod_l+0x1e4>
 801264a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801264e:	2b08      	cmp	r3, #8
 8012650:	f200 84d2 	bhi.w	8012ff8 <_strtod_l+0xba0>
 8012654:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012656:	900a      	str	r0, [sp, #40]	@ 0x28
 8012658:	2000      	movs	r0, #0
 801265a:	930c      	str	r3, [sp, #48]	@ 0x30
 801265c:	4605      	mov	r5, r0
 801265e:	3a30      	subs	r2, #48	@ 0x30
 8012660:	f100 0301 	add.w	r3, r0, #1
 8012664:	d018      	beq.n	8012698 <_strtod_l+0x240>
 8012666:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012668:	4419      	add	r1, r3
 801266a:	910a      	str	r1, [sp, #40]	@ 0x28
 801266c:	462e      	mov	r6, r5
 801266e:	f04f 0e0a 	mov.w	lr, #10
 8012672:	1c71      	adds	r1, r6, #1
 8012674:	eba1 0c05 	sub.w	ip, r1, r5
 8012678:	4563      	cmp	r3, ip
 801267a:	dc15      	bgt.n	80126a8 <_strtod_l+0x250>
 801267c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8012680:	182b      	adds	r3, r5, r0
 8012682:	2b08      	cmp	r3, #8
 8012684:	f105 0501 	add.w	r5, r5, #1
 8012688:	4405      	add	r5, r0
 801268a:	dc1a      	bgt.n	80126c2 <_strtod_l+0x26a>
 801268c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801268e:	230a      	movs	r3, #10
 8012690:	fb03 2301 	mla	r3, r3, r1, r2
 8012694:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012696:	2300      	movs	r3, #0
 8012698:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801269a:	1c51      	adds	r1, r2, #1
 801269c:	9119      	str	r1, [sp, #100]	@ 0x64
 801269e:	7852      	ldrb	r2, [r2, #1]
 80126a0:	4618      	mov	r0, r3
 80126a2:	e7c5      	b.n	8012630 <_strtod_l+0x1d8>
 80126a4:	4648      	mov	r0, r9
 80126a6:	e7ce      	b.n	8012646 <_strtod_l+0x1ee>
 80126a8:	2e08      	cmp	r6, #8
 80126aa:	dc05      	bgt.n	80126b8 <_strtod_l+0x260>
 80126ac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80126ae:	fb0e f606 	mul.w	r6, lr, r6
 80126b2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80126b4:	460e      	mov	r6, r1
 80126b6:	e7dc      	b.n	8012672 <_strtod_l+0x21a>
 80126b8:	2910      	cmp	r1, #16
 80126ba:	bfd8      	it	le
 80126bc:	fb0e f707 	mulle.w	r7, lr, r7
 80126c0:	e7f8      	b.n	80126b4 <_strtod_l+0x25c>
 80126c2:	2b0f      	cmp	r3, #15
 80126c4:	bfdc      	itt	le
 80126c6:	230a      	movle	r3, #10
 80126c8:	fb03 2707 	mlale	r7, r3, r7, r2
 80126cc:	e7e3      	b.n	8012696 <_strtod_l+0x23e>
 80126ce:	2300      	movs	r3, #0
 80126d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80126d2:	2301      	movs	r3, #1
 80126d4:	e77a      	b.n	80125cc <_strtod_l+0x174>
 80126d6:	f04f 0c00 	mov.w	ip, #0
 80126da:	1ca2      	adds	r2, r4, #2
 80126dc:	9219      	str	r2, [sp, #100]	@ 0x64
 80126de:	78a2      	ldrb	r2, [r4, #2]
 80126e0:	e782      	b.n	80125e8 <_strtod_l+0x190>
 80126e2:	f04f 0c01 	mov.w	ip, #1
 80126e6:	e7f8      	b.n	80126da <_strtod_l+0x282>
 80126e8:	0801a23c 	.word	0x0801a23c
 80126ec:	0801a034 	.word	0x0801a034
 80126f0:	7ff00000 	.word	0x7ff00000
 80126f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80126f6:	1c51      	adds	r1, r2, #1
 80126f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80126fa:	7852      	ldrb	r2, [r2, #1]
 80126fc:	2a30      	cmp	r2, #48	@ 0x30
 80126fe:	d0f9      	beq.n	80126f4 <_strtod_l+0x29c>
 8012700:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8012704:	2908      	cmp	r1, #8
 8012706:	f63f af75 	bhi.w	80125f4 <_strtod_l+0x19c>
 801270a:	3a30      	subs	r2, #48	@ 0x30
 801270c:	9209      	str	r2, [sp, #36]	@ 0x24
 801270e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012710:	920f      	str	r2, [sp, #60]	@ 0x3c
 8012712:	f04f 080a 	mov.w	r8, #10
 8012716:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012718:	1c56      	adds	r6, r2, #1
 801271a:	9619      	str	r6, [sp, #100]	@ 0x64
 801271c:	7852      	ldrb	r2, [r2, #1]
 801271e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8012722:	f1be 0f09 	cmp.w	lr, #9
 8012726:	d939      	bls.n	801279c <_strtod_l+0x344>
 8012728:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801272a:	1a76      	subs	r6, r6, r1
 801272c:	2e08      	cmp	r6, #8
 801272e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8012732:	dc03      	bgt.n	801273c <_strtod_l+0x2e4>
 8012734:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012736:	4588      	cmp	r8, r1
 8012738:	bfa8      	it	ge
 801273a:	4688      	movge	r8, r1
 801273c:	f1bc 0f00 	cmp.w	ip, #0
 8012740:	d001      	beq.n	8012746 <_strtod_l+0x2ee>
 8012742:	f1c8 0800 	rsb	r8, r8, #0
 8012746:	2d00      	cmp	r5, #0
 8012748:	d14e      	bne.n	80127e8 <_strtod_l+0x390>
 801274a:	9908      	ldr	r1, [sp, #32]
 801274c:	4308      	orrs	r0, r1
 801274e:	f47f aebc 	bne.w	80124ca <_strtod_l+0x72>
 8012752:	2b00      	cmp	r3, #0
 8012754:	f47f aed4 	bne.w	8012500 <_strtod_l+0xa8>
 8012758:	2a69      	cmp	r2, #105	@ 0x69
 801275a:	d028      	beq.n	80127ae <_strtod_l+0x356>
 801275c:	dc25      	bgt.n	80127aa <_strtod_l+0x352>
 801275e:	2a49      	cmp	r2, #73	@ 0x49
 8012760:	d025      	beq.n	80127ae <_strtod_l+0x356>
 8012762:	2a4e      	cmp	r2, #78	@ 0x4e
 8012764:	f47f aecc 	bne.w	8012500 <_strtod_l+0xa8>
 8012768:	499a      	ldr	r1, [pc, #616]	@ (80129d4 <_strtod_l+0x57c>)
 801276a:	a819      	add	r0, sp, #100	@ 0x64
 801276c:	f003 fb50 	bl	8015e10 <__match>
 8012770:	2800      	cmp	r0, #0
 8012772:	f43f aec5 	beq.w	8012500 <_strtod_l+0xa8>
 8012776:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012778:	781b      	ldrb	r3, [r3, #0]
 801277a:	2b28      	cmp	r3, #40	@ 0x28
 801277c:	d12e      	bne.n	80127dc <_strtod_l+0x384>
 801277e:	4996      	ldr	r1, [pc, #600]	@ (80129d8 <_strtod_l+0x580>)
 8012780:	aa1c      	add	r2, sp, #112	@ 0x70
 8012782:	a819      	add	r0, sp, #100	@ 0x64
 8012784:	f003 fb58 	bl	8015e38 <__hexnan>
 8012788:	2805      	cmp	r0, #5
 801278a:	d127      	bne.n	80127dc <_strtod_l+0x384>
 801278c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801278e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8012792:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8012796:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801279a:	e696      	b.n	80124ca <_strtod_l+0x72>
 801279c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801279e:	fb08 2101 	mla	r1, r8, r1, r2
 80127a2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80127a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80127a8:	e7b5      	b.n	8012716 <_strtod_l+0x2be>
 80127aa:	2a6e      	cmp	r2, #110	@ 0x6e
 80127ac:	e7da      	b.n	8012764 <_strtod_l+0x30c>
 80127ae:	498b      	ldr	r1, [pc, #556]	@ (80129dc <_strtod_l+0x584>)
 80127b0:	a819      	add	r0, sp, #100	@ 0x64
 80127b2:	f003 fb2d 	bl	8015e10 <__match>
 80127b6:	2800      	cmp	r0, #0
 80127b8:	f43f aea2 	beq.w	8012500 <_strtod_l+0xa8>
 80127bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80127be:	4988      	ldr	r1, [pc, #544]	@ (80129e0 <_strtod_l+0x588>)
 80127c0:	3b01      	subs	r3, #1
 80127c2:	a819      	add	r0, sp, #100	@ 0x64
 80127c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80127c6:	f003 fb23 	bl	8015e10 <__match>
 80127ca:	b910      	cbnz	r0, 80127d2 <_strtod_l+0x37a>
 80127cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80127ce:	3301      	adds	r3, #1
 80127d0:	9319      	str	r3, [sp, #100]	@ 0x64
 80127d2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80129f0 <_strtod_l+0x598>
 80127d6:	f04f 0a00 	mov.w	sl, #0
 80127da:	e676      	b.n	80124ca <_strtod_l+0x72>
 80127dc:	4881      	ldr	r0, [pc, #516]	@ (80129e4 <_strtod_l+0x58c>)
 80127de:	f002 f9d3 	bl	8014b88 <nan>
 80127e2:	ec5b ab10 	vmov	sl, fp, d0
 80127e6:	e670      	b.n	80124ca <_strtod_l+0x72>
 80127e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80127ea:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80127ec:	eba8 0303 	sub.w	r3, r8, r3
 80127f0:	f1b9 0f00 	cmp.w	r9, #0
 80127f4:	bf08      	it	eq
 80127f6:	46a9      	moveq	r9, r5
 80127f8:	2d10      	cmp	r5, #16
 80127fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80127fc:	462c      	mov	r4, r5
 80127fe:	bfa8      	it	ge
 8012800:	2410      	movge	r4, #16
 8012802:	f7ed feaf 	bl	8000564 <__aeabi_ui2d>
 8012806:	2d09      	cmp	r5, #9
 8012808:	4682      	mov	sl, r0
 801280a:	468b      	mov	fp, r1
 801280c:	dc13      	bgt.n	8012836 <_strtod_l+0x3de>
 801280e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012810:	2b00      	cmp	r3, #0
 8012812:	f43f ae5a 	beq.w	80124ca <_strtod_l+0x72>
 8012816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012818:	dd78      	ble.n	801290c <_strtod_l+0x4b4>
 801281a:	2b16      	cmp	r3, #22
 801281c:	dc5f      	bgt.n	80128de <_strtod_l+0x486>
 801281e:	4972      	ldr	r1, [pc, #456]	@ (80129e8 <_strtod_l+0x590>)
 8012820:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012824:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012828:	4652      	mov	r2, sl
 801282a:	465b      	mov	r3, fp
 801282c:	f7ed ff14 	bl	8000658 <__aeabi_dmul>
 8012830:	4682      	mov	sl, r0
 8012832:	468b      	mov	fp, r1
 8012834:	e649      	b.n	80124ca <_strtod_l+0x72>
 8012836:	4b6c      	ldr	r3, [pc, #432]	@ (80129e8 <_strtod_l+0x590>)
 8012838:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801283c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8012840:	f7ed ff0a 	bl	8000658 <__aeabi_dmul>
 8012844:	4682      	mov	sl, r0
 8012846:	4638      	mov	r0, r7
 8012848:	468b      	mov	fp, r1
 801284a:	f7ed fe8b 	bl	8000564 <__aeabi_ui2d>
 801284e:	4602      	mov	r2, r0
 8012850:	460b      	mov	r3, r1
 8012852:	4650      	mov	r0, sl
 8012854:	4659      	mov	r1, fp
 8012856:	f7ed fd49 	bl	80002ec <__adddf3>
 801285a:	2d0f      	cmp	r5, #15
 801285c:	4682      	mov	sl, r0
 801285e:	468b      	mov	fp, r1
 8012860:	ddd5      	ble.n	801280e <_strtod_l+0x3b6>
 8012862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012864:	1b2c      	subs	r4, r5, r4
 8012866:	441c      	add	r4, r3
 8012868:	2c00      	cmp	r4, #0
 801286a:	f340 8093 	ble.w	8012994 <_strtod_l+0x53c>
 801286e:	f014 030f 	ands.w	r3, r4, #15
 8012872:	d00a      	beq.n	801288a <_strtod_l+0x432>
 8012874:	495c      	ldr	r1, [pc, #368]	@ (80129e8 <_strtod_l+0x590>)
 8012876:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801287a:	4652      	mov	r2, sl
 801287c:	465b      	mov	r3, fp
 801287e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012882:	f7ed fee9 	bl	8000658 <__aeabi_dmul>
 8012886:	4682      	mov	sl, r0
 8012888:	468b      	mov	fp, r1
 801288a:	f034 040f 	bics.w	r4, r4, #15
 801288e:	d073      	beq.n	8012978 <_strtod_l+0x520>
 8012890:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8012894:	dd49      	ble.n	801292a <_strtod_l+0x4d2>
 8012896:	2400      	movs	r4, #0
 8012898:	46a0      	mov	r8, r4
 801289a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801289c:	46a1      	mov	r9, r4
 801289e:	9a05      	ldr	r2, [sp, #20]
 80128a0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80129f0 <_strtod_l+0x598>
 80128a4:	2322      	movs	r3, #34	@ 0x22
 80128a6:	6013      	str	r3, [r2, #0]
 80128a8:	f04f 0a00 	mov.w	sl, #0
 80128ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	f43f ae0b 	beq.w	80124ca <_strtod_l+0x72>
 80128b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80128b6:	9805      	ldr	r0, [sp, #20]
 80128b8:	f003 fbe0 	bl	801607c <_Bfree>
 80128bc:	9805      	ldr	r0, [sp, #20]
 80128be:	4649      	mov	r1, r9
 80128c0:	f003 fbdc 	bl	801607c <_Bfree>
 80128c4:	9805      	ldr	r0, [sp, #20]
 80128c6:	4641      	mov	r1, r8
 80128c8:	f003 fbd8 	bl	801607c <_Bfree>
 80128cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80128ce:	9805      	ldr	r0, [sp, #20]
 80128d0:	f003 fbd4 	bl	801607c <_Bfree>
 80128d4:	9805      	ldr	r0, [sp, #20]
 80128d6:	4621      	mov	r1, r4
 80128d8:	f003 fbd0 	bl	801607c <_Bfree>
 80128dc:	e5f5      	b.n	80124ca <_strtod_l+0x72>
 80128de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80128e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80128e4:	4293      	cmp	r3, r2
 80128e6:	dbbc      	blt.n	8012862 <_strtod_l+0x40a>
 80128e8:	4c3f      	ldr	r4, [pc, #252]	@ (80129e8 <_strtod_l+0x590>)
 80128ea:	f1c5 050f 	rsb	r5, r5, #15
 80128ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80128f2:	4652      	mov	r2, sl
 80128f4:	465b      	mov	r3, fp
 80128f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80128fa:	f7ed fead 	bl	8000658 <__aeabi_dmul>
 80128fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012900:	1b5d      	subs	r5, r3, r5
 8012902:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8012906:	e9d4 2300 	ldrd	r2, r3, [r4]
 801290a:	e78f      	b.n	801282c <_strtod_l+0x3d4>
 801290c:	3316      	adds	r3, #22
 801290e:	dba8      	blt.n	8012862 <_strtod_l+0x40a>
 8012910:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012912:	eba3 0808 	sub.w	r8, r3, r8
 8012916:	4b34      	ldr	r3, [pc, #208]	@ (80129e8 <_strtod_l+0x590>)
 8012918:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801291c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8012920:	4650      	mov	r0, sl
 8012922:	4659      	mov	r1, fp
 8012924:	f7ed ffc2 	bl	80008ac <__aeabi_ddiv>
 8012928:	e782      	b.n	8012830 <_strtod_l+0x3d8>
 801292a:	2300      	movs	r3, #0
 801292c:	4f2f      	ldr	r7, [pc, #188]	@ (80129ec <_strtod_l+0x594>)
 801292e:	1124      	asrs	r4, r4, #4
 8012930:	4650      	mov	r0, sl
 8012932:	4659      	mov	r1, fp
 8012934:	461e      	mov	r6, r3
 8012936:	2c01      	cmp	r4, #1
 8012938:	dc21      	bgt.n	801297e <_strtod_l+0x526>
 801293a:	b10b      	cbz	r3, 8012940 <_strtod_l+0x4e8>
 801293c:	4682      	mov	sl, r0
 801293e:	468b      	mov	fp, r1
 8012940:	492a      	ldr	r1, [pc, #168]	@ (80129ec <_strtod_l+0x594>)
 8012942:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8012946:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801294a:	4652      	mov	r2, sl
 801294c:	465b      	mov	r3, fp
 801294e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012952:	f7ed fe81 	bl	8000658 <__aeabi_dmul>
 8012956:	4b26      	ldr	r3, [pc, #152]	@ (80129f0 <_strtod_l+0x598>)
 8012958:	460a      	mov	r2, r1
 801295a:	400b      	ands	r3, r1
 801295c:	4925      	ldr	r1, [pc, #148]	@ (80129f4 <_strtod_l+0x59c>)
 801295e:	428b      	cmp	r3, r1
 8012960:	4682      	mov	sl, r0
 8012962:	d898      	bhi.n	8012896 <_strtod_l+0x43e>
 8012964:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8012968:	428b      	cmp	r3, r1
 801296a:	bf86      	itte	hi
 801296c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80129f8 <_strtod_l+0x5a0>
 8012970:	f04f 3aff 	movhi.w	sl, #4294967295
 8012974:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8012978:	2300      	movs	r3, #0
 801297a:	9308      	str	r3, [sp, #32]
 801297c:	e076      	b.n	8012a6c <_strtod_l+0x614>
 801297e:	07e2      	lsls	r2, r4, #31
 8012980:	d504      	bpl.n	801298c <_strtod_l+0x534>
 8012982:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012986:	f7ed fe67 	bl	8000658 <__aeabi_dmul>
 801298a:	2301      	movs	r3, #1
 801298c:	3601      	adds	r6, #1
 801298e:	1064      	asrs	r4, r4, #1
 8012990:	3708      	adds	r7, #8
 8012992:	e7d0      	b.n	8012936 <_strtod_l+0x4de>
 8012994:	d0f0      	beq.n	8012978 <_strtod_l+0x520>
 8012996:	4264      	negs	r4, r4
 8012998:	f014 020f 	ands.w	r2, r4, #15
 801299c:	d00a      	beq.n	80129b4 <_strtod_l+0x55c>
 801299e:	4b12      	ldr	r3, [pc, #72]	@ (80129e8 <_strtod_l+0x590>)
 80129a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80129a4:	4650      	mov	r0, sl
 80129a6:	4659      	mov	r1, fp
 80129a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ac:	f7ed ff7e 	bl	80008ac <__aeabi_ddiv>
 80129b0:	4682      	mov	sl, r0
 80129b2:	468b      	mov	fp, r1
 80129b4:	1124      	asrs	r4, r4, #4
 80129b6:	d0df      	beq.n	8012978 <_strtod_l+0x520>
 80129b8:	2c1f      	cmp	r4, #31
 80129ba:	dd1f      	ble.n	80129fc <_strtod_l+0x5a4>
 80129bc:	2400      	movs	r4, #0
 80129be:	46a0      	mov	r8, r4
 80129c0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80129c2:	46a1      	mov	r9, r4
 80129c4:	9a05      	ldr	r2, [sp, #20]
 80129c6:	2322      	movs	r3, #34	@ 0x22
 80129c8:	f04f 0a00 	mov.w	sl, #0
 80129cc:	f04f 0b00 	mov.w	fp, #0
 80129d0:	6013      	str	r3, [r2, #0]
 80129d2:	e76b      	b.n	80128ac <_strtod_l+0x454>
 80129d4:	0801a043 	.word	0x0801a043
 80129d8:	0801a228 	.word	0x0801a228
 80129dc:	0801a03b 	.word	0x0801a03b
 80129e0:	0801a0eb 	.word	0x0801a0eb
 80129e4:	0801a033 	.word	0x0801a033
 80129e8:	0801a3b0 	.word	0x0801a3b0
 80129ec:	0801a388 	.word	0x0801a388
 80129f0:	7ff00000 	.word	0x7ff00000
 80129f4:	7ca00000 	.word	0x7ca00000
 80129f8:	7fefffff 	.word	0x7fefffff
 80129fc:	f014 0310 	ands.w	r3, r4, #16
 8012a00:	bf18      	it	ne
 8012a02:	236a      	movne	r3, #106	@ 0x6a
 8012a04:	4ea9      	ldr	r6, [pc, #676]	@ (8012cac <_strtod_l+0x854>)
 8012a06:	9308      	str	r3, [sp, #32]
 8012a08:	4650      	mov	r0, sl
 8012a0a:	4659      	mov	r1, fp
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	07e7      	lsls	r7, r4, #31
 8012a10:	d504      	bpl.n	8012a1c <_strtod_l+0x5c4>
 8012a12:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012a16:	f7ed fe1f 	bl	8000658 <__aeabi_dmul>
 8012a1a:	2301      	movs	r3, #1
 8012a1c:	1064      	asrs	r4, r4, #1
 8012a1e:	f106 0608 	add.w	r6, r6, #8
 8012a22:	d1f4      	bne.n	8012a0e <_strtod_l+0x5b6>
 8012a24:	b10b      	cbz	r3, 8012a2a <_strtod_l+0x5d2>
 8012a26:	4682      	mov	sl, r0
 8012a28:	468b      	mov	fp, r1
 8012a2a:	9b08      	ldr	r3, [sp, #32]
 8012a2c:	b1b3      	cbz	r3, 8012a5c <_strtod_l+0x604>
 8012a2e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8012a32:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	4659      	mov	r1, fp
 8012a3a:	dd0f      	ble.n	8012a5c <_strtod_l+0x604>
 8012a3c:	2b1f      	cmp	r3, #31
 8012a3e:	dd56      	ble.n	8012aee <_strtod_l+0x696>
 8012a40:	2b34      	cmp	r3, #52	@ 0x34
 8012a42:	bfde      	ittt	le
 8012a44:	f04f 33ff 	movle.w	r3, #4294967295
 8012a48:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8012a4c:	4093      	lslle	r3, r2
 8012a4e:	f04f 0a00 	mov.w	sl, #0
 8012a52:	bfcc      	ite	gt
 8012a54:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8012a58:	ea03 0b01 	andle.w	fp, r3, r1
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	2300      	movs	r3, #0
 8012a60:	4650      	mov	r0, sl
 8012a62:	4659      	mov	r1, fp
 8012a64:	f7ee f860 	bl	8000b28 <__aeabi_dcmpeq>
 8012a68:	2800      	cmp	r0, #0
 8012a6a:	d1a7      	bne.n	80129bc <_strtod_l+0x564>
 8012a6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012a6e:	9300      	str	r3, [sp, #0]
 8012a70:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012a72:	9805      	ldr	r0, [sp, #20]
 8012a74:	462b      	mov	r3, r5
 8012a76:	464a      	mov	r2, r9
 8012a78:	f003 fb68 	bl	801614c <__s2b>
 8012a7c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8012a7e:	2800      	cmp	r0, #0
 8012a80:	f43f af09 	beq.w	8012896 <_strtod_l+0x43e>
 8012a84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012a86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012a88:	2a00      	cmp	r2, #0
 8012a8a:	eba3 0308 	sub.w	r3, r3, r8
 8012a8e:	bfa8      	it	ge
 8012a90:	2300      	movge	r3, #0
 8012a92:	9312      	str	r3, [sp, #72]	@ 0x48
 8012a94:	2400      	movs	r4, #0
 8012a96:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012a9a:	9316      	str	r3, [sp, #88]	@ 0x58
 8012a9c:	46a0      	mov	r8, r4
 8012a9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012aa0:	9805      	ldr	r0, [sp, #20]
 8012aa2:	6859      	ldr	r1, [r3, #4]
 8012aa4:	f003 faaa 	bl	8015ffc <_Balloc>
 8012aa8:	4681      	mov	r9, r0
 8012aaa:	2800      	cmp	r0, #0
 8012aac:	f43f aef7 	beq.w	801289e <_strtod_l+0x446>
 8012ab0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012ab2:	691a      	ldr	r2, [r3, #16]
 8012ab4:	3202      	adds	r2, #2
 8012ab6:	f103 010c 	add.w	r1, r3, #12
 8012aba:	0092      	lsls	r2, r2, #2
 8012abc:	300c      	adds	r0, #12
 8012abe:	f002 f855 	bl	8014b6c <memcpy>
 8012ac2:	ec4b ab10 	vmov	d0, sl, fp
 8012ac6:	9805      	ldr	r0, [sp, #20]
 8012ac8:	aa1c      	add	r2, sp, #112	@ 0x70
 8012aca:	a91b      	add	r1, sp, #108	@ 0x6c
 8012acc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8012ad0:	f003 fe70 	bl	80167b4 <__d2b>
 8012ad4:	901a      	str	r0, [sp, #104]	@ 0x68
 8012ad6:	2800      	cmp	r0, #0
 8012ad8:	f43f aee1 	beq.w	801289e <_strtod_l+0x446>
 8012adc:	9805      	ldr	r0, [sp, #20]
 8012ade:	2101      	movs	r1, #1
 8012ae0:	f003 fbca 	bl	8016278 <__i2b>
 8012ae4:	4680      	mov	r8, r0
 8012ae6:	b948      	cbnz	r0, 8012afc <_strtod_l+0x6a4>
 8012ae8:	f04f 0800 	mov.w	r8, #0
 8012aec:	e6d7      	b.n	801289e <_strtod_l+0x446>
 8012aee:	f04f 32ff 	mov.w	r2, #4294967295
 8012af2:	fa02 f303 	lsl.w	r3, r2, r3
 8012af6:	ea03 0a0a 	and.w	sl, r3, sl
 8012afa:	e7af      	b.n	8012a5c <_strtod_l+0x604>
 8012afc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8012afe:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012b00:	2d00      	cmp	r5, #0
 8012b02:	bfab      	itete	ge
 8012b04:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8012b06:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8012b08:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8012b0a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8012b0c:	bfac      	ite	ge
 8012b0e:	18ef      	addge	r7, r5, r3
 8012b10:	1b5e      	sublt	r6, r3, r5
 8012b12:	9b08      	ldr	r3, [sp, #32]
 8012b14:	1aed      	subs	r5, r5, r3
 8012b16:	4415      	add	r5, r2
 8012b18:	4b65      	ldr	r3, [pc, #404]	@ (8012cb0 <_strtod_l+0x858>)
 8012b1a:	3d01      	subs	r5, #1
 8012b1c:	429d      	cmp	r5, r3
 8012b1e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8012b22:	da50      	bge.n	8012bc6 <_strtod_l+0x76e>
 8012b24:	1b5b      	subs	r3, r3, r5
 8012b26:	2b1f      	cmp	r3, #31
 8012b28:	eba2 0203 	sub.w	r2, r2, r3
 8012b2c:	f04f 0101 	mov.w	r1, #1
 8012b30:	dc3d      	bgt.n	8012bae <_strtod_l+0x756>
 8012b32:	fa01 f303 	lsl.w	r3, r1, r3
 8012b36:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012b38:	2300      	movs	r3, #0
 8012b3a:	9310      	str	r3, [sp, #64]	@ 0x40
 8012b3c:	18bd      	adds	r5, r7, r2
 8012b3e:	9b08      	ldr	r3, [sp, #32]
 8012b40:	42af      	cmp	r7, r5
 8012b42:	4416      	add	r6, r2
 8012b44:	441e      	add	r6, r3
 8012b46:	463b      	mov	r3, r7
 8012b48:	bfa8      	it	ge
 8012b4a:	462b      	movge	r3, r5
 8012b4c:	42b3      	cmp	r3, r6
 8012b4e:	bfa8      	it	ge
 8012b50:	4633      	movge	r3, r6
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	bfc2      	ittt	gt
 8012b56:	1aed      	subgt	r5, r5, r3
 8012b58:	1af6      	subgt	r6, r6, r3
 8012b5a:	1aff      	subgt	r7, r7, r3
 8012b5c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	dd16      	ble.n	8012b90 <_strtod_l+0x738>
 8012b62:	4641      	mov	r1, r8
 8012b64:	9805      	ldr	r0, [sp, #20]
 8012b66:	461a      	mov	r2, r3
 8012b68:	f003 fc3e 	bl	80163e8 <__pow5mult>
 8012b6c:	4680      	mov	r8, r0
 8012b6e:	2800      	cmp	r0, #0
 8012b70:	d0ba      	beq.n	8012ae8 <_strtod_l+0x690>
 8012b72:	4601      	mov	r1, r0
 8012b74:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012b76:	9805      	ldr	r0, [sp, #20]
 8012b78:	f003 fb94 	bl	80162a4 <__multiply>
 8012b7c:	900a      	str	r0, [sp, #40]	@ 0x28
 8012b7e:	2800      	cmp	r0, #0
 8012b80:	f43f ae8d 	beq.w	801289e <_strtod_l+0x446>
 8012b84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012b86:	9805      	ldr	r0, [sp, #20]
 8012b88:	f003 fa78 	bl	801607c <_Bfree>
 8012b8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012b8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8012b90:	2d00      	cmp	r5, #0
 8012b92:	dc1d      	bgt.n	8012bd0 <_strtod_l+0x778>
 8012b94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	dd23      	ble.n	8012be2 <_strtod_l+0x78a>
 8012b9a:	4649      	mov	r1, r9
 8012b9c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8012b9e:	9805      	ldr	r0, [sp, #20]
 8012ba0:	f003 fc22 	bl	80163e8 <__pow5mult>
 8012ba4:	4681      	mov	r9, r0
 8012ba6:	b9e0      	cbnz	r0, 8012be2 <_strtod_l+0x78a>
 8012ba8:	f04f 0900 	mov.w	r9, #0
 8012bac:	e677      	b.n	801289e <_strtod_l+0x446>
 8012bae:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8012bb2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8012bb6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8012bba:	35e2      	adds	r5, #226	@ 0xe2
 8012bbc:	fa01 f305 	lsl.w	r3, r1, r5
 8012bc0:	9310      	str	r3, [sp, #64]	@ 0x40
 8012bc2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8012bc4:	e7ba      	b.n	8012b3c <_strtod_l+0x6e4>
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	9310      	str	r3, [sp, #64]	@ 0x40
 8012bca:	2301      	movs	r3, #1
 8012bcc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012bce:	e7b5      	b.n	8012b3c <_strtod_l+0x6e4>
 8012bd0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012bd2:	9805      	ldr	r0, [sp, #20]
 8012bd4:	462a      	mov	r2, r5
 8012bd6:	f003 fc61 	bl	801649c <__lshift>
 8012bda:	901a      	str	r0, [sp, #104]	@ 0x68
 8012bdc:	2800      	cmp	r0, #0
 8012bde:	d1d9      	bne.n	8012b94 <_strtod_l+0x73c>
 8012be0:	e65d      	b.n	801289e <_strtod_l+0x446>
 8012be2:	2e00      	cmp	r6, #0
 8012be4:	dd07      	ble.n	8012bf6 <_strtod_l+0x79e>
 8012be6:	4649      	mov	r1, r9
 8012be8:	9805      	ldr	r0, [sp, #20]
 8012bea:	4632      	mov	r2, r6
 8012bec:	f003 fc56 	bl	801649c <__lshift>
 8012bf0:	4681      	mov	r9, r0
 8012bf2:	2800      	cmp	r0, #0
 8012bf4:	d0d8      	beq.n	8012ba8 <_strtod_l+0x750>
 8012bf6:	2f00      	cmp	r7, #0
 8012bf8:	dd08      	ble.n	8012c0c <_strtod_l+0x7b4>
 8012bfa:	4641      	mov	r1, r8
 8012bfc:	9805      	ldr	r0, [sp, #20]
 8012bfe:	463a      	mov	r2, r7
 8012c00:	f003 fc4c 	bl	801649c <__lshift>
 8012c04:	4680      	mov	r8, r0
 8012c06:	2800      	cmp	r0, #0
 8012c08:	f43f ae49 	beq.w	801289e <_strtod_l+0x446>
 8012c0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012c0e:	9805      	ldr	r0, [sp, #20]
 8012c10:	464a      	mov	r2, r9
 8012c12:	f003 fccb 	bl	80165ac <__mdiff>
 8012c16:	4604      	mov	r4, r0
 8012c18:	2800      	cmp	r0, #0
 8012c1a:	f43f ae40 	beq.w	801289e <_strtod_l+0x446>
 8012c1e:	68c3      	ldr	r3, [r0, #12]
 8012c20:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012c22:	2300      	movs	r3, #0
 8012c24:	60c3      	str	r3, [r0, #12]
 8012c26:	4641      	mov	r1, r8
 8012c28:	f003 fca4 	bl	8016574 <__mcmp>
 8012c2c:	2800      	cmp	r0, #0
 8012c2e:	da45      	bge.n	8012cbc <_strtod_l+0x864>
 8012c30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c32:	ea53 030a 	orrs.w	r3, r3, sl
 8012c36:	d16b      	bne.n	8012d10 <_strtod_l+0x8b8>
 8012c38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d167      	bne.n	8012d10 <_strtod_l+0x8b8>
 8012c40:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012c44:	0d1b      	lsrs	r3, r3, #20
 8012c46:	051b      	lsls	r3, r3, #20
 8012c48:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012c4c:	d960      	bls.n	8012d10 <_strtod_l+0x8b8>
 8012c4e:	6963      	ldr	r3, [r4, #20]
 8012c50:	b913      	cbnz	r3, 8012c58 <_strtod_l+0x800>
 8012c52:	6923      	ldr	r3, [r4, #16]
 8012c54:	2b01      	cmp	r3, #1
 8012c56:	dd5b      	ble.n	8012d10 <_strtod_l+0x8b8>
 8012c58:	4621      	mov	r1, r4
 8012c5a:	2201      	movs	r2, #1
 8012c5c:	9805      	ldr	r0, [sp, #20]
 8012c5e:	f003 fc1d 	bl	801649c <__lshift>
 8012c62:	4641      	mov	r1, r8
 8012c64:	4604      	mov	r4, r0
 8012c66:	f003 fc85 	bl	8016574 <__mcmp>
 8012c6a:	2800      	cmp	r0, #0
 8012c6c:	dd50      	ble.n	8012d10 <_strtod_l+0x8b8>
 8012c6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012c72:	9a08      	ldr	r2, [sp, #32]
 8012c74:	0d1b      	lsrs	r3, r3, #20
 8012c76:	051b      	lsls	r3, r3, #20
 8012c78:	2a00      	cmp	r2, #0
 8012c7a:	d06a      	beq.n	8012d52 <_strtod_l+0x8fa>
 8012c7c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012c80:	d867      	bhi.n	8012d52 <_strtod_l+0x8fa>
 8012c82:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8012c86:	f67f ae9d 	bls.w	80129c4 <_strtod_l+0x56c>
 8012c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8012cb4 <_strtod_l+0x85c>)
 8012c8c:	4650      	mov	r0, sl
 8012c8e:	4659      	mov	r1, fp
 8012c90:	2200      	movs	r2, #0
 8012c92:	f7ed fce1 	bl	8000658 <__aeabi_dmul>
 8012c96:	4b08      	ldr	r3, [pc, #32]	@ (8012cb8 <_strtod_l+0x860>)
 8012c98:	400b      	ands	r3, r1
 8012c9a:	4682      	mov	sl, r0
 8012c9c:	468b      	mov	fp, r1
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	f47f ae08 	bne.w	80128b4 <_strtod_l+0x45c>
 8012ca4:	9a05      	ldr	r2, [sp, #20]
 8012ca6:	2322      	movs	r3, #34	@ 0x22
 8012ca8:	6013      	str	r3, [r2, #0]
 8012caa:	e603      	b.n	80128b4 <_strtod_l+0x45c>
 8012cac:	0801a250 	.word	0x0801a250
 8012cb0:	fffffc02 	.word	0xfffffc02
 8012cb4:	39500000 	.word	0x39500000
 8012cb8:	7ff00000 	.word	0x7ff00000
 8012cbc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8012cc0:	d165      	bne.n	8012d8e <_strtod_l+0x936>
 8012cc2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012cc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012cc8:	b35a      	cbz	r2, 8012d22 <_strtod_l+0x8ca>
 8012cca:	4a9f      	ldr	r2, [pc, #636]	@ (8012f48 <_strtod_l+0xaf0>)
 8012ccc:	4293      	cmp	r3, r2
 8012cce:	d12b      	bne.n	8012d28 <_strtod_l+0x8d0>
 8012cd0:	9b08      	ldr	r3, [sp, #32]
 8012cd2:	4651      	mov	r1, sl
 8012cd4:	b303      	cbz	r3, 8012d18 <_strtod_l+0x8c0>
 8012cd6:	4b9d      	ldr	r3, [pc, #628]	@ (8012f4c <_strtod_l+0xaf4>)
 8012cd8:	465a      	mov	r2, fp
 8012cda:	4013      	ands	r3, r2
 8012cdc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8012ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8012ce4:	d81b      	bhi.n	8012d1e <_strtod_l+0x8c6>
 8012ce6:	0d1b      	lsrs	r3, r3, #20
 8012ce8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012cec:	fa02 f303 	lsl.w	r3, r2, r3
 8012cf0:	4299      	cmp	r1, r3
 8012cf2:	d119      	bne.n	8012d28 <_strtod_l+0x8d0>
 8012cf4:	4b96      	ldr	r3, [pc, #600]	@ (8012f50 <_strtod_l+0xaf8>)
 8012cf6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012cf8:	429a      	cmp	r2, r3
 8012cfa:	d102      	bne.n	8012d02 <_strtod_l+0x8aa>
 8012cfc:	3101      	adds	r1, #1
 8012cfe:	f43f adce 	beq.w	801289e <_strtod_l+0x446>
 8012d02:	4b92      	ldr	r3, [pc, #584]	@ (8012f4c <_strtod_l+0xaf4>)
 8012d04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012d06:	401a      	ands	r2, r3
 8012d08:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8012d0c:	f04f 0a00 	mov.w	sl, #0
 8012d10:	9b08      	ldr	r3, [sp, #32]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d1b9      	bne.n	8012c8a <_strtod_l+0x832>
 8012d16:	e5cd      	b.n	80128b4 <_strtod_l+0x45c>
 8012d18:	f04f 33ff 	mov.w	r3, #4294967295
 8012d1c:	e7e8      	b.n	8012cf0 <_strtod_l+0x898>
 8012d1e:	4613      	mov	r3, r2
 8012d20:	e7e6      	b.n	8012cf0 <_strtod_l+0x898>
 8012d22:	ea53 030a 	orrs.w	r3, r3, sl
 8012d26:	d0a2      	beq.n	8012c6e <_strtod_l+0x816>
 8012d28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012d2a:	b1db      	cbz	r3, 8012d64 <_strtod_l+0x90c>
 8012d2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012d2e:	4213      	tst	r3, r2
 8012d30:	d0ee      	beq.n	8012d10 <_strtod_l+0x8b8>
 8012d32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012d34:	9a08      	ldr	r2, [sp, #32]
 8012d36:	4650      	mov	r0, sl
 8012d38:	4659      	mov	r1, fp
 8012d3a:	b1bb      	cbz	r3, 8012d6c <_strtod_l+0x914>
 8012d3c:	f7ff fb6e 	bl	801241c <sulp>
 8012d40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012d44:	ec53 2b10 	vmov	r2, r3, d0
 8012d48:	f7ed fad0 	bl	80002ec <__adddf3>
 8012d4c:	4682      	mov	sl, r0
 8012d4e:	468b      	mov	fp, r1
 8012d50:	e7de      	b.n	8012d10 <_strtod_l+0x8b8>
 8012d52:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8012d56:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012d5a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012d5e:	f04f 3aff 	mov.w	sl, #4294967295
 8012d62:	e7d5      	b.n	8012d10 <_strtod_l+0x8b8>
 8012d64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012d66:	ea13 0f0a 	tst.w	r3, sl
 8012d6a:	e7e1      	b.n	8012d30 <_strtod_l+0x8d8>
 8012d6c:	f7ff fb56 	bl	801241c <sulp>
 8012d70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012d74:	ec53 2b10 	vmov	r2, r3, d0
 8012d78:	f7ed fab6 	bl	80002e8 <__aeabi_dsub>
 8012d7c:	2200      	movs	r2, #0
 8012d7e:	2300      	movs	r3, #0
 8012d80:	4682      	mov	sl, r0
 8012d82:	468b      	mov	fp, r1
 8012d84:	f7ed fed0 	bl	8000b28 <__aeabi_dcmpeq>
 8012d88:	2800      	cmp	r0, #0
 8012d8a:	d0c1      	beq.n	8012d10 <_strtod_l+0x8b8>
 8012d8c:	e61a      	b.n	80129c4 <_strtod_l+0x56c>
 8012d8e:	4641      	mov	r1, r8
 8012d90:	4620      	mov	r0, r4
 8012d92:	f003 fd67 	bl	8016864 <__ratio>
 8012d96:	ec57 6b10 	vmov	r6, r7, d0
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012da0:	4630      	mov	r0, r6
 8012da2:	4639      	mov	r1, r7
 8012da4:	f7ed fed4 	bl	8000b50 <__aeabi_dcmple>
 8012da8:	2800      	cmp	r0, #0
 8012daa:	d06f      	beq.n	8012e8c <_strtod_l+0xa34>
 8012dac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d17a      	bne.n	8012ea8 <_strtod_l+0xa50>
 8012db2:	f1ba 0f00 	cmp.w	sl, #0
 8012db6:	d158      	bne.n	8012e6a <_strtod_l+0xa12>
 8012db8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012dba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d15a      	bne.n	8012e78 <_strtod_l+0xa20>
 8012dc2:	4b64      	ldr	r3, [pc, #400]	@ (8012f54 <_strtod_l+0xafc>)
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	4630      	mov	r0, r6
 8012dc8:	4639      	mov	r1, r7
 8012dca:	f7ed feb7 	bl	8000b3c <__aeabi_dcmplt>
 8012dce:	2800      	cmp	r0, #0
 8012dd0:	d159      	bne.n	8012e86 <_strtod_l+0xa2e>
 8012dd2:	4630      	mov	r0, r6
 8012dd4:	4639      	mov	r1, r7
 8012dd6:	4b60      	ldr	r3, [pc, #384]	@ (8012f58 <_strtod_l+0xb00>)
 8012dd8:	2200      	movs	r2, #0
 8012dda:	f7ed fc3d 	bl	8000658 <__aeabi_dmul>
 8012dde:	4606      	mov	r6, r0
 8012de0:	460f      	mov	r7, r1
 8012de2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8012de6:	9606      	str	r6, [sp, #24]
 8012de8:	9307      	str	r3, [sp, #28]
 8012dea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012dee:	4d57      	ldr	r5, [pc, #348]	@ (8012f4c <_strtod_l+0xaf4>)
 8012df0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012df4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012df6:	401d      	ands	r5, r3
 8012df8:	4b58      	ldr	r3, [pc, #352]	@ (8012f5c <_strtod_l+0xb04>)
 8012dfa:	429d      	cmp	r5, r3
 8012dfc:	f040 80b2 	bne.w	8012f64 <_strtod_l+0xb0c>
 8012e00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012e02:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8012e06:	ec4b ab10 	vmov	d0, sl, fp
 8012e0a:	f003 fc63 	bl	80166d4 <__ulp>
 8012e0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012e12:	ec51 0b10 	vmov	r0, r1, d0
 8012e16:	f7ed fc1f 	bl	8000658 <__aeabi_dmul>
 8012e1a:	4652      	mov	r2, sl
 8012e1c:	465b      	mov	r3, fp
 8012e1e:	f7ed fa65 	bl	80002ec <__adddf3>
 8012e22:	460b      	mov	r3, r1
 8012e24:	4949      	ldr	r1, [pc, #292]	@ (8012f4c <_strtod_l+0xaf4>)
 8012e26:	4a4e      	ldr	r2, [pc, #312]	@ (8012f60 <_strtod_l+0xb08>)
 8012e28:	4019      	ands	r1, r3
 8012e2a:	4291      	cmp	r1, r2
 8012e2c:	4682      	mov	sl, r0
 8012e2e:	d942      	bls.n	8012eb6 <_strtod_l+0xa5e>
 8012e30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012e32:	4b47      	ldr	r3, [pc, #284]	@ (8012f50 <_strtod_l+0xaf8>)
 8012e34:	429a      	cmp	r2, r3
 8012e36:	d103      	bne.n	8012e40 <_strtod_l+0x9e8>
 8012e38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012e3a:	3301      	adds	r3, #1
 8012e3c:	f43f ad2f 	beq.w	801289e <_strtod_l+0x446>
 8012e40:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8012f50 <_strtod_l+0xaf8>
 8012e44:	f04f 3aff 	mov.w	sl, #4294967295
 8012e48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012e4a:	9805      	ldr	r0, [sp, #20]
 8012e4c:	f003 f916 	bl	801607c <_Bfree>
 8012e50:	9805      	ldr	r0, [sp, #20]
 8012e52:	4649      	mov	r1, r9
 8012e54:	f003 f912 	bl	801607c <_Bfree>
 8012e58:	9805      	ldr	r0, [sp, #20]
 8012e5a:	4641      	mov	r1, r8
 8012e5c:	f003 f90e 	bl	801607c <_Bfree>
 8012e60:	9805      	ldr	r0, [sp, #20]
 8012e62:	4621      	mov	r1, r4
 8012e64:	f003 f90a 	bl	801607c <_Bfree>
 8012e68:	e619      	b.n	8012a9e <_strtod_l+0x646>
 8012e6a:	f1ba 0f01 	cmp.w	sl, #1
 8012e6e:	d103      	bne.n	8012e78 <_strtod_l+0xa20>
 8012e70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	f43f ada6 	beq.w	80129c4 <_strtod_l+0x56c>
 8012e78:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8012f28 <_strtod_l+0xad0>
 8012e7c:	4f35      	ldr	r7, [pc, #212]	@ (8012f54 <_strtod_l+0xafc>)
 8012e7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012e82:	2600      	movs	r6, #0
 8012e84:	e7b1      	b.n	8012dea <_strtod_l+0x992>
 8012e86:	4f34      	ldr	r7, [pc, #208]	@ (8012f58 <_strtod_l+0xb00>)
 8012e88:	2600      	movs	r6, #0
 8012e8a:	e7aa      	b.n	8012de2 <_strtod_l+0x98a>
 8012e8c:	4b32      	ldr	r3, [pc, #200]	@ (8012f58 <_strtod_l+0xb00>)
 8012e8e:	4630      	mov	r0, r6
 8012e90:	4639      	mov	r1, r7
 8012e92:	2200      	movs	r2, #0
 8012e94:	f7ed fbe0 	bl	8000658 <__aeabi_dmul>
 8012e98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012e9a:	4606      	mov	r6, r0
 8012e9c:	460f      	mov	r7, r1
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d09f      	beq.n	8012de2 <_strtod_l+0x98a>
 8012ea2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8012ea6:	e7a0      	b.n	8012dea <_strtod_l+0x992>
 8012ea8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012f30 <_strtod_l+0xad8>
 8012eac:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012eb0:	ec57 6b17 	vmov	r6, r7, d7
 8012eb4:	e799      	b.n	8012dea <_strtod_l+0x992>
 8012eb6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8012eba:	9b08      	ldr	r3, [sp, #32]
 8012ebc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d1c1      	bne.n	8012e48 <_strtod_l+0x9f0>
 8012ec4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012ec8:	0d1b      	lsrs	r3, r3, #20
 8012eca:	051b      	lsls	r3, r3, #20
 8012ecc:	429d      	cmp	r5, r3
 8012ece:	d1bb      	bne.n	8012e48 <_strtod_l+0x9f0>
 8012ed0:	4630      	mov	r0, r6
 8012ed2:	4639      	mov	r1, r7
 8012ed4:	f7ed ff20 	bl	8000d18 <__aeabi_d2lz>
 8012ed8:	f7ed fb90 	bl	80005fc <__aeabi_l2d>
 8012edc:	4602      	mov	r2, r0
 8012ede:	460b      	mov	r3, r1
 8012ee0:	4630      	mov	r0, r6
 8012ee2:	4639      	mov	r1, r7
 8012ee4:	f7ed fa00 	bl	80002e8 <__aeabi_dsub>
 8012ee8:	460b      	mov	r3, r1
 8012eea:	4602      	mov	r2, r0
 8012eec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8012ef0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8012ef4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ef6:	ea46 060a 	orr.w	r6, r6, sl
 8012efa:	431e      	orrs	r6, r3
 8012efc:	d06f      	beq.n	8012fde <_strtod_l+0xb86>
 8012efe:	a30e      	add	r3, pc, #56	@ (adr r3, 8012f38 <_strtod_l+0xae0>)
 8012f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f04:	f7ed fe1a 	bl	8000b3c <__aeabi_dcmplt>
 8012f08:	2800      	cmp	r0, #0
 8012f0a:	f47f acd3 	bne.w	80128b4 <_strtod_l+0x45c>
 8012f0e:	a30c      	add	r3, pc, #48	@ (adr r3, 8012f40 <_strtod_l+0xae8>)
 8012f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012f18:	f7ed fe2e 	bl	8000b78 <__aeabi_dcmpgt>
 8012f1c:	2800      	cmp	r0, #0
 8012f1e:	d093      	beq.n	8012e48 <_strtod_l+0x9f0>
 8012f20:	e4c8      	b.n	80128b4 <_strtod_l+0x45c>
 8012f22:	bf00      	nop
 8012f24:	f3af 8000 	nop.w
 8012f28:	00000000 	.word	0x00000000
 8012f2c:	bff00000 	.word	0xbff00000
 8012f30:	00000000 	.word	0x00000000
 8012f34:	3ff00000 	.word	0x3ff00000
 8012f38:	94a03595 	.word	0x94a03595
 8012f3c:	3fdfffff 	.word	0x3fdfffff
 8012f40:	35afe535 	.word	0x35afe535
 8012f44:	3fe00000 	.word	0x3fe00000
 8012f48:	000fffff 	.word	0x000fffff
 8012f4c:	7ff00000 	.word	0x7ff00000
 8012f50:	7fefffff 	.word	0x7fefffff
 8012f54:	3ff00000 	.word	0x3ff00000
 8012f58:	3fe00000 	.word	0x3fe00000
 8012f5c:	7fe00000 	.word	0x7fe00000
 8012f60:	7c9fffff 	.word	0x7c9fffff
 8012f64:	9b08      	ldr	r3, [sp, #32]
 8012f66:	b323      	cbz	r3, 8012fb2 <_strtod_l+0xb5a>
 8012f68:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8012f6c:	d821      	bhi.n	8012fb2 <_strtod_l+0xb5a>
 8012f6e:	a328      	add	r3, pc, #160	@ (adr r3, 8013010 <_strtod_l+0xbb8>)
 8012f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f74:	4630      	mov	r0, r6
 8012f76:	4639      	mov	r1, r7
 8012f78:	f7ed fdea 	bl	8000b50 <__aeabi_dcmple>
 8012f7c:	b1a0      	cbz	r0, 8012fa8 <_strtod_l+0xb50>
 8012f7e:	4639      	mov	r1, r7
 8012f80:	4630      	mov	r0, r6
 8012f82:	f7ed fe41 	bl	8000c08 <__aeabi_d2uiz>
 8012f86:	2801      	cmp	r0, #1
 8012f88:	bf38      	it	cc
 8012f8a:	2001      	movcc	r0, #1
 8012f8c:	f7ed faea 	bl	8000564 <__aeabi_ui2d>
 8012f90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012f92:	4606      	mov	r6, r0
 8012f94:	460f      	mov	r7, r1
 8012f96:	b9fb      	cbnz	r3, 8012fd8 <_strtod_l+0xb80>
 8012f98:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012f9c:	9014      	str	r0, [sp, #80]	@ 0x50
 8012f9e:	9315      	str	r3, [sp, #84]	@ 0x54
 8012fa0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8012fa4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012fa8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012faa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8012fae:	1b5b      	subs	r3, r3, r5
 8012fb0:	9311      	str	r3, [sp, #68]	@ 0x44
 8012fb2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012fb6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8012fba:	f003 fb8b 	bl	80166d4 <__ulp>
 8012fbe:	4650      	mov	r0, sl
 8012fc0:	ec53 2b10 	vmov	r2, r3, d0
 8012fc4:	4659      	mov	r1, fp
 8012fc6:	f7ed fb47 	bl	8000658 <__aeabi_dmul>
 8012fca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8012fce:	f7ed f98d 	bl	80002ec <__adddf3>
 8012fd2:	4682      	mov	sl, r0
 8012fd4:	468b      	mov	fp, r1
 8012fd6:	e770      	b.n	8012eba <_strtod_l+0xa62>
 8012fd8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8012fdc:	e7e0      	b.n	8012fa0 <_strtod_l+0xb48>
 8012fde:	a30e      	add	r3, pc, #56	@ (adr r3, 8013018 <_strtod_l+0xbc0>)
 8012fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fe4:	f7ed fdaa 	bl	8000b3c <__aeabi_dcmplt>
 8012fe8:	e798      	b.n	8012f1c <_strtod_l+0xac4>
 8012fea:	2300      	movs	r3, #0
 8012fec:	930e      	str	r3, [sp, #56]	@ 0x38
 8012fee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8012ff0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012ff2:	6013      	str	r3, [r2, #0]
 8012ff4:	f7ff ba6d 	b.w	80124d2 <_strtod_l+0x7a>
 8012ff8:	2a65      	cmp	r2, #101	@ 0x65
 8012ffa:	f43f ab68 	beq.w	80126ce <_strtod_l+0x276>
 8012ffe:	2a45      	cmp	r2, #69	@ 0x45
 8013000:	f43f ab65 	beq.w	80126ce <_strtod_l+0x276>
 8013004:	2301      	movs	r3, #1
 8013006:	f7ff bba0 	b.w	801274a <_strtod_l+0x2f2>
 801300a:	bf00      	nop
 801300c:	f3af 8000 	nop.w
 8013010:	ffc00000 	.word	0xffc00000
 8013014:	41dfffff 	.word	0x41dfffff
 8013018:	94a03595 	.word	0x94a03595
 801301c:	3fcfffff 	.word	0x3fcfffff

08013020 <_strtod_r>:
 8013020:	4b01      	ldr	r3, [pc, #4]	@ (8013028 <_strtod_r+0x8>)
 8013022:	f7ff ba19 	b.w	8012458 <_strtod_l>
 8013026:	bf00      	nop
 8013028:	20000068 	.word	0x20000068

0801302c <strtod>:
 801302c:	460a      	mov	r2, r1
 801302e:	4601      	mov	r1, r0
 8013030:	4802      	ldr	r0, [pc, #8]	@ (801303c <strtod+0x10>)
 8013032:	4b03      	ldr	r3, [pc, #12]	@ (8013040 <strtod+0x14>)
 8013034:	6800      	ldr	r0, [r0, #0]
 8013036:	f7ff ba0f 	b.w	8012458 <_strtod_l>
 801303a:	bf00      	nop
 801303c:	200001d4 	.word	0x200001d4
 8013040:	20000068 	.word	0x20000068

08013044 <_strtol_l.isra.0>:
 8013044:	2b24      	cmp	r3, #36	@ 0x24
 8013046:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801304a:	4686      	mov	lr, r0
 801304c:	4690      	mov	r8, r2
 801304e:	d801      	bhi.n	8013054 <_strtol_l.isra.0+0x10>
 8013050:	2b01      	cmp	r3, #1
 8013052:	d106      	bne.n	8013062 <_strtol_l.isra.0+0x1e>
 8013054:	f001 fd5c 	bl	8014b10 <__errno>
 8013058:	2316      	movs	r3, #22
 801305a:	6003      	str	r3, [r0, #0]
 801305c:	2000      	movs	r0, #0
 801305e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013062:	4834      	ldr	r0, [pc, #208]	@ (8013134 <_strtol_l.isra.0+0xf0>)
 8013064:	460d      	mov	r5, r1
 8013066:	462a      	mov	r2, r5
 8013068:	f815 4b01 	ldrb.w	r4, [r5], #1
 801306c:	5d06      	ldrb	r6, [r0, r4]
 801306e:	f016 0608 	ands.w	r6, r6, #8
 8013072:	d1f8      	bne.n	8013066 <_strtol_l.isra.0+0x22>
 8013074:	2c2d      	cmp	r4, #45	@ 0x2d
 8013076:	d110      	bne.n	801309a <_strtol_l.isra.0+0x56>
 8013078:	782c      	ldrb	r4, [r5, #0]
 801307a:	2601      	movs	r6, #1
 801307c:	1c95      	adds	r5, r2, #2
 801307e:	f033 0210 	bics.w	r2, r3, #16
 8013082:	d115      	bne.n	80130b0 <_strtol_l.isra.0+0x6c>
 8013084:	2c30      	cmp	r4, #48	@ 0x30
 8013086:	d10d      	bne.n	80130a4 <_strtol_l.isra.0+0x60>
 8013088:	782a      	ldrb	r2, [r5, #0]
 801308a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801308e:	2a58      	cmp	r2, #88	@ 0x58
 8013090:	d108      	bne.n	80130a4 <_strtol_l.isra.0+0x60>
 8013092:	786c      	ldrb	r4, [r5, #1]
 8013094:	3502      	adds	r5, #2
 8013096:	2310      	movs	r3, #16
 8013098:	e00a      	b.n	80130b0 <_strtol_l.isra.0+0x6c>
 801309a:	2c2b      	cmp	r4, #43	@ 0x2b
 801309c:	bf04      	itt	eq
 801309e:	782c      	ldrbeq	r4, [r5, #0]
 80130a0:	1c95      	addeq	r5, r2, #2
 80130a2:	e7ec      	b.n	801307e <_strtol_l.isra.0+0x3a>
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d1f6      	bne.n	8013096 <_strtol_l.isra.0+0x52>
 80130a8:	2c30      	cmp	r4, #48	@ 0x30
 80130aa:	bf14      	ite	ne
 80130ac:	230a      	movne	r3, #10
 80130ae:	2308      	moveq	r3, #8
 80130b0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80130b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80130b8:	2200      	movs	r2, #0
 80130ba:	fbbc f9f3 	udiv	r9, ip, r3
 80130be:	4610      	mov	r0, r2
 80130c0:	fb03 ca19 	mls	sl, r3, r9, ip
 80130c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80130c8:	2f09      	cmp	r7, #9
 80130ca:	d80f      	bhi.n	80130ec <_strtol_l.isra.0+0xa8>
 80130cc:	463c      	mov	r4, r7
 80130ce:	42a3      	cmp	r3, r4
 80130d0:	dd1b      	ble.n	801310a <_strtol_l.isra.0+0xc6>
 80130d2:	1c57      	adds	r7, r2, #1
 80130d4:	d007      	beq.n	80130e6 <_strtol_l.isra.0+0xa2>
 80130d6:	4581      	cmp	r9, r0
 80130d8:	d314      	bcc.n	8013104 <_strtol_l.isra.0+0xc0>
 80130da:	d101      	bne.n	80130e0 <_strtol_l.isra.0+0x9c>
 80130dc:	45a2      	cmp	sl, r4
 80130de:	db11      	blt.n	8013104 <_strtol_l.isra.0+0xc0>
 80130e0:	fb00 4003 	mla	r0, r0, r3, r4
 80130e4:	2201      	movs	r2, #1
 80130e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80130ea:	e7eb      	b.n	80130c4 <_strtol_l.isra.0+0x80>
 80130ec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80130f0:	2f19      	cmp	r7, #25
 80130f2:	d801      	bhi.n	80130f8 <_strtol_l.isra.0+0xb4>
 80130f4:	3c37      	subs	r4, #55	@ 0x37
 80130f6:	e7ea      	b.n	80130ce <_strtol_l.isra.0+0x8a>
 80130f8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80130fc:	2f19      	cmp	r7, #25
 80130fe:	d804      	bhi.n	801310a <_strtol_l.isra.0+0xc6>
 8013100:	3c57      	subs	r4, #87	@ 0x57
 8013102:	e7e4      	b.n	80130ce <_strtol_l.isra.0+0x8a>
 8013104:	f04f 32ff 	mov.w	r2, #4294967295
 8013108:	e7ed      	b.n	80130e6 <_strtol_l.isra.0+0xa2>
 801310a:	1c53      	adds	r3, r2, #1
 801310c:	d108      	bne.n	8013120 <_strtol_l.isra.0+0xdc>
 801310e:	2322      	movs	r3, #34	@ 0x22
 8013110:	f8ce 3000 	str.w	r3, [lr]
 8013114:	4660      	mov	r0, ip
 8013116:	f1b8 0f00 	cmp.w	r8, #0
 801311a:	d0a0      	beq.n	801305e <_strtol_l.isra.0+0x1a>
 801311c:	1e69      	subs	r1, r5, #1
 801311e:	e006      	b.n	801312e <_strtol_l.isra.0+0xea>
 8013120:	b106      	cbz	r6, 8013124 <_strtol_l.isra.0+0xe0>
 8013122:	4240      	negs	r0, r0
 8013124:	f1b8 0f00 	cmp.w	r8, #0
 8013128:	d099      	beq.n	801305e <_strtol_l.isra.0+0x1a>
 801312a:	2a00      	cmp	r2, #0
 801312c:	d1f6      	bne.n	801311c <_strtol_l.isra.0+0xd8>
 801312e:	f8c8 1000 	str.w	r1, [r8]
 8013132:	e794      	b.n	801305e <_strtol_l.isra.0+0x1a>
 8013134:	0801a279 	.word	0x0801a279

08013138 <_strtol_r>:
 8013138:	f7ff bf84 	b.w	8013044 <_strtol_l.isra.0>

0801313c <strtol>:
 801313c:	4613      	mov	r3, r2
 801313e:	460a      	mov	r2, r1
 8013140:	4601      	mov	r1, r0
 8013142:	4802      	ldr	r0, [pc, #8]	@ (801314c <strtol+0x10>)
 8013144:	6800      	ldr	r0, [r0, #0]
 8013146:	f7ff bf7d 	b.w	8013044 <_strtol_l.isra.0>
 801314a:	bf00      	nop
 801314c:	200001d4 	.word	0x200001d4

08013150 <setenv>:
 8013150:	4613      	mov	r3, r2
 8013152:	460a      	mov	r2, r1
 8013154:	4601      	mov	r1, r0
 8013156:	4802      	ldr	r0, [pc, #8]	@ (8013160 <setenv+0x10>)
 8013158:	6800      	ldr	r0, [r0, #0]
 801315a:	f000 b803 	b.w	8013164 <_setenv_r>
 801315e:	bf00      	nop
 8013160:	200001d4 	.word	0x200001d4

08013164 <_setenv_r>:
 8013164:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013168:	460e      	mov	r6, r1
 801316a:	4605      	mov	r5, r0
 801316c:	213d      	movs	r1, #61	@ 0x3d
 801316e:	4630      	mov	r0, r6
 8013170:	4617      	mov	r7, r2
 8013172:	4698      	mov	r8, r3
 8013174:	f001 fb9c 	bl	80148b0 <strchr>
 8013178:	b130      	cbz	r0, 8013188 <_setenv_r+0x24>
 801317a:	f001 fcc9 	bl	8014b10 <__errno>
 801317e:	2316      	movs	r3, #22
 8013180:	6003      	str	r3, [r0, #0]
 8013182:	f04f 30ff 	mov.w	r0, #4294967295
 8013186:	e014      	b.n	80131b2 <_setenv_r+0x4e>
 8013188:	4628      	mov	r0, r5
 801318a:	f7f3 fe79 	bl	8006e80 <__env_lock>
 801318e:	4638      	mov	r0, r7
 8013190:	f7ed f89e 	bl	80002d0 <strlen>
 8013194:	aa01      	add	r2, sp, #4
 8013196:	4681      	mov	r9, r0
 8013198:	4631      	mov	r1, r6
 801319a:	4628      	mov	r0, r5
 801319c:	f7ff f846 	bl	801222c <_findenv_r>
 80131a0:	4604      	mov	r4, r0
 80131a2:	b1a8      	cbz	r0, 80131d0 <_setenv_r+0x6c>
 80131a4:	f1b8 0f00 	cmp.w	r8, #0
 80131a8:	d106      	bne.n	80131b8 <_setenv_r+0x54>
 80131aa:	4628      	mov	r0, r5
 80131ac:	f7f3 fea0 	bl	8006ef0 <__env_unlock>
 80131b0:	2000      	movs	r0, #0
 80131b2:	b003      	add	sp, #12
 80131b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131b8:	f7ed f88a 	bl	80002d0 <strlen>
 80131bc:	4581      	cmp	r9, r0
 80131be:	d83a      	bhi.n	8013236 <_setenv_r+0xd2>
 80131c0:	3c01      	subs	r4, #1
 80131c2:	f817 3b01 	ldrb.w	r3, [r7], #1
 80131c6:	f804 3f01 	strb.w	r3, [r4, #1]!
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d1f9      	bne.n	80131c2 <_setenv_r+0x5e>
 80131ce:	e7ec      	b.n	80131aa <_setenv_r+0x46>
 80131d0:	f8df a0bc 	ldr.w	sl, [pc, #188]	@ 8013290 <_setenv_r+0x12c>
 80131d4:	f8da 1000 	ldr.w	r1, [sl]
 80131d8:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
 80131dc:	b98b      	cbnz	r3, 8013202 <_setenv_r+0x9e>
 80131de:	4b2b      	ldr	r3, [pc, #172]	@ (801328c <_setenv_r+0x128>)
 80131e0:	681a      	ldr	r2, [r3, #0]
 80131e2:	f104 0802 	add.w	r8, r4, #2
 80131e6:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80131ea:	b162      	cbz	r2, 8013206 <_setenv_r+0xa2>
 80131ec:	4642      	mov	r2, r8
 80131ee:	4628      	mov	r0, r5
 80131f0:	f003 fbae 	bl	8016950 <_realloc_r>
 80131f4:	f8ca 0000 	str.w	r0, [sl]
 80131f8:	b9b0      	cbnz	r0, 8013228 <_setenv_r+0xc4>
 80131fa:	4628      	mov	r0, r5
 80131fc:	f7f3 fe78 	bl	8006ef0 <__env_unlock>
 8013200:	e7bf      	b.n	8013182 <_setenv_r+0x1e>
 8013202:	3401      	adds	r4, #1
 8013204:	e7e8      	b.n	80131d8 <_setenv_r+0x74>
 8013206:	2201      	movs	r2, #1
 8013208:	4641      	mov	r1, r8
 801320a:	4628      	mov	r0, r5
 801320c:	601a      	str	r2, [r3, #0]
 801320e:	f7ff f87b 	bl	8012308 <_malloc_r>
 8013212:	4683      	mov	fp, r0
 8013214:	2800      	cmp	r0, #0
 8013216:	d0f0      	beq.n	80131fa <_setenv_r+0x96>
 8013218:	f8da 1000 	ldr.w	r1, [sl]
 801321c:	f1a8 0208 	sub.w	r2, r8, #8
 8013220:	f001 fca4 	bl	8014b6c <memcpy>
 8013224:	f8ca b000 	str.w	fp, [sl]
 8013228:	f8da 3000 	ldr.w	r3, [sl]
 801322c:	4443      	add	r3, r8
 801322e:	2200      	movs	r2, #0
 8013230:	f843 2c04 	str.w	r2, [r3, #-4]
 8013234:	9401      	str	r4, [sp, #4]
 8013236:	4633      	mov	r3, r6
 8013238:	4619      	mov	r1, r3
 801323a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801323e:	b10a      	cbz	r2, 8013244 <_setenv_r+0xe0>
 8013240:	2a3d      	cmp	r2, #61	@ 0x3d
 8013242:	d1f9      	bne.n	8013238 <_setenv_r+0xd4>
 8013244:	1b89      	subs	r1, r1, r6
 8013246:	4c12      	ldr	r4, [pc, #72]	@ (8013290 <_setenv_r+0x12c>)
 8013248:	f8dd a004 	ldr.w	sl, [sp, #4]
 801324c:	f8d4 8000 	ldr.w	r8, [r4]
 8013250:	4449      	add	r1, r9
 8013252:	3102      	adds	r1, #2
 8013254:	4628      	mov	r0, r5
 8013256:	f7ff f857 	bl	8012308 <_malloc_r>
 801325a:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 801325e:	2800      	cmp	r0, #0
 8013260:	d0cb      	beq.n	80131fa <_setenv_r+0x96>
 8013262:	6823      	ldr	r3, [r4, #0]
 8013264:	9a01      	ldr	r2, [sp, #4]
 8013266:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801326a:	f816 1b01 	ldrb.w	r1, [r6], #1
 801326e:	7011      	strb	r1, [r2, #0]
 8013270:	4613      	mov	r3, r2
 8013272:	3201      	adds	r2, #1
 8013274:	b109      	cbz	r1, 801327a <_setenv_r+0x116>
 8013276:	293d      	cmp	r1, #61	@ 0x3d
 8013278:	d1f7      	bne.n	801326a <_setenv_r+0x106>
 801327a:	223d      	movs	r2, #61	@ 0x3d
 801327c:	701a      	strb	r2, [r3, #0]
 801327e:	f817 2b01 	ldrb.w	r2, [r7], #1
 8013282:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013286:	2a00      	cmp	r2, #0
 8013288:	d1f9      	bne.n	801327e <_setenv_r+0x11a>
 801328a:	e78e      	b.n	80131aa <_setenv_r+0x46>
 801328c:	2000066c 	.word	0x2000066c
 8013290:	20000044 	.word	0x20000044

08013294 <__cvt>:
 8013294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013298:	ec57 6b10 	vmov	r6, r7, d0
 801329c:	2f00      	cmp	r7, #0
 801329e:	460c      	mov	r4, r1
 80132a0:	4619      	mov	r1, r3
 80132a2:	463b      	mov	r3, r7
 80132a4:	bfbb      	ittet	lt
 80132a6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80132aa:	461f      	movlt	r7, r3
 80132ac:	2300      	movge	r3, #0
 80132ae:	232d      	movlt	r3, #45	@ 0x2d
 80132b0:	700b      	strb	r3, [r1, #0]
 80132b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80132b4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80132b8:	4691      	mov	r9, r2
 80132ba:	f023 0820 	bic.w	r8, r3, #32
 80132be:	bfbc      	itt	lt
 80132c0:	4632      	movlt	r2, r6
 80132c2:	4616      	movlt	r6, r2
 80132c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80132c8:	d005      	beq.n	80132d6 <__cvt+0x42>
 80132ca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80132ce:	d100      	bne.n	80132d2 <__cvt+0x3e>
 80132d0:	3401      	adds	r4, #1
 80132d2:	2102      	movs	r1, #2
 80132d4:	e000      	b.n	80132d8 <__cvt+0x44>
 80132d6:	2103      	movs	r1, #3
 80132d8:	ab03      	add	r3, sp, #12
 80132da:	9301      	str	r3, [sp, #4]
 80132dc:	ab02      	add	r3, sp, #8
 80132de:	9300      	str	r3, [sp, #0]
 80132e0:	ec47 6b10 	vmov	d0, r6, r7
 80132e4:	4653      	mov	r3, sl
 80132e6:	4622      	mov	r2, r4
 80132e8:	f001 fcee 	bl	8014cc8 <_dtoa_r>
 80132ec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80132f0:	4605      	mov	r5, r0
 80132f2:	d119      	bne.n	8013328 <__cvt+0x94>
 80132f4:	f019 0f01 	tst.w	r9, #1
 80132f8:	d00e      	beq.n	8013318 <__cvt+0x84>
 80132fa:	eb00 0904 	add.w	r9, r0, r4
 80132fe:	2200      	movs	r2, #0
 8013300:	2300      	movs	r3, #0
 8013302:	4630      	mov	r0, r6
 8013304:	4639      	mov	r1, r7
 8013306:	f7ed fc0f 	bl	8000b28 <__aeabi_dcmpeq>
 801330a:	b108      	cbz	r0, 8013310 <__cvt+0x7c>
 801330c:	f8cd 900c 	str.w	r9, [sp, #12]
 8013310:	2230      	movs	r2, #48	@ 0x30
 8013312:	9b03      	ldr	r3, [sp, #12]
 8013314:	454b      	cmp	r3, r9
 8013316:	d31e      	bcc.n	8013356 <__cvt+0xc2>
 8013318:	9b03      	ldr	r3, [sp, #12]
 801331a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801331c:	1b5b      	subs	r3, r3, r5
 801331e:	4628      	mov	r0, r5
 8013320:	6013      	str	r3, [r2, #0]
 8013322:	b004      	add	sp, #16
 8013324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013328:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801332c:	eb00 0904 	add.w	r9, r0, r4
 8013330:	d1e5      	bne.n	80132fe <__cvt+0x6a>
 8013332:	7803      	ldrb	r3, [r0, #0]
 8013334:	2b30      	cmp	r3, #48	@ 0x30
 8013336:	d10a      	bne.n	801334e <__cvt+0xba>
 8013338:	2200      	movs	r2, #0
 801333a:	2300      	movs	r3, #0
 801333c:	4630      	mov	r0, r6
 801333e:	4639      	mov	r1, r7
 8013340:	f7ed fbf2 	bl	8000b28 <__aeabi_dcmpeq>
 8013344:	b918      	cbnz	r0, 801334e <__cvt+0xba>
 8013346:	f1c4 0401 	rsb	r4, r4, #1
 801334a:	f8ca 4000 	str.w	r4, [sl]
 801334e:	f8da 3000 	ldr.w	r3, [sl]
 8013352:	4499      	add	r9, r3
 8013354:	e7d3      	b.n	80132fe <__cvt+0x6a>
 8013356:	1c59      	adds	r1, r3, #1
 8013358:	9103      	str	r1, [sp, #12]
 801335a:	701a      	strb	r2, [r3, #0]
 801335c:	e7d9      	b.n	8013312 <__cvt+0x7e>

0801335e <__exponent>:
 801335e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013360:	2900      	cmp	r1, #0
 8013362:	bfba      	itte	lt
 8013364:	4249      	neglt	r1, r1
 8013366:	232d      	movlt	r3, #45	@ 0x2d
 8013368:	232b      	movge	r3, #43	@ 0x2b
 801336a:	2909      	cmp	r1, #9
 801336c:	7002      	strb	r2, [r0, #0]
 801336e:	7043      	strb	r3, [r0, #1]
 8013370:	dd29      	ble.n	80133c6 <__exponent+0x68>
 8013372:	f10d 0307 	add.w	r3, sp, #7
 8013376:	461d      	mov	r5, r3
 8013378:	270a      	movs	r7, #10
 801337a:	461a      	mov	r2, r3
 801337c:	fbb1 f6f7 	udiv	r6, r1, r7
 8013380:	fb07 1416 	mls	r4, r7, r6, r1
 8013384:	3430      	adds	r4, #48	@ 0x30
 8013386:	f802 4c01 	strb.w	r4, [r2, #-1]
 801338a:	460c      	mov	r4, r1
 801338c:	2c63      	cmp	r4, #99	@ 0x63
 801338e:	f103 33ff 	add.w	r3, r3, #4294967295
 8013392:	4631      	mov	r1, r6
 8013394:	dcf1      	bgt.n	801337a <__exponent+0x1c>
 8013396:	3130      	adds	r1, #48	@ 0x30
 8013398:	1e94      	subs	r4, r2, #2
 801339a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801339e:	1c41      	adds	r1, r0, #1
 80133a0:	4623      	mov	r3, r4
 80133a2:	42ab      	cmp	r3, r5
 80133a4:	d30a      	bcc.n	80133bc <__exponent+0x5e>
 80133a6:	f10d 0309 	add.w	r3, sp, #9
 80133aa:	1a9b      	subs	r3, r3, r2
 80133ac:	42ac      	cmp	r4, r5
 80133ae:	bf88      	it	hi
 80133b0:	2300      	movhi	r3, #0
 80133b2:	3302      	adds	r3, #2
 80133b4:	4403      	add	r3, r0
 80133b6:	1a18      	subs	r0, r3, r0
 80133b8:	b003      	add	sp, #12
 80133ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80133c0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80133c4:	e7ed      	b.n	80133a2 <__exponent+0x44>
 80133c6:	2330      	movs	r3, #48	@ 0x30
 80133c8:	3130      	adds	r1, #48	@ 0x30
 80133ca:	7083      	strb	r3, [r0, #2]
 80133cc:	70c1      	strb	r1, [r0, #3]
 80133ce:	1d03      	adds	r3, r0, #4
 80133d0:	e7f1      	b.n	80133b6 <__exponent+0x58>
	...

080133d4 <_printf_float>:
 80133d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133d8:	b08d      	sub	sp, #52	@ 0x34
 80133da:	460c      	mov	r4, r1
 80133dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80133e0:	4616      	mov	r6, r2
 80133e2:	461f      	mov	r7, r3
 80133e4:	4605      	mov	r5, r0
 80133e6:	f001 faeb 	bl	80149c0 <_localeconv_r>
 80133ea:	6803      	ldr	r3, [r0, #0]
 80133ec:	9304      	str	r3, [sp, #16]
 80133ee:	4618      	mov	r0, r3
 80133f0:	f7ec ff6e 	bl	80002d0 <strlen>
 80133f4:	2300      	movs	r3, #0
 80133f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80133f8:	f8d8 3000 	ldr.w	r3, [r8]
 80133fc:	9005      	str	r0, [sp, #20]
 80133fe:	3307      	adds	r3, #7
 8013400:	f023 0307 	bic.w	r3, r3, #7
 8013404:	f103 0208 	add.w	r2, r3, #8
 8013408:	f894 a018 	ldrb.w	sl, [r4, #24]
 801340c:	f8d4 b000 	ldr.w	fp, [r4]
 8013410:	f8c8 2000 	str.w	r2, [r8]
 8013414:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013418:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801341c:	9307      	str	r3, [sp, #28]
 801341e:	f8cd 8018 	str.w	r8, [sp, #24]
 8013422:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8013426:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801342a:	4b9c      	ldr	r3, [pc, #624]	@ (801369c <_printf_float+0x2c8>)
 801342c:	f04f 32ff 	mov.w	r2, #4294967295
 8013430:	f7ed fbac 	bl	8000b8c <__aeabi_dcmpun>
 8013434:	bb70      	cbnz	r0, 8013494 <_printf_float+0xc0>
 8013436:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801343a:	4b98      	ldr	r3, [pc, #608]	@ (801369c <_printf_float+0x2c8>)
 801343c:	f04f 32ff 	mov.w	r2, #4294967295
 8013440:	f7ed fb86 	bl	8000b50 <__aeabi_dcmple>
 8013444:	bb30      	cbnz	r0, 8013494 <_printf_float+0xc0>
 8013446:	2200      	movs	r2, #0
 8013448:	2300      	movs	r3, #0
 801344a:	4640      	mov	r0, r8
 801344c:	4649      	mov	r1, r9
 801344e:	f7ed fb75 	bl	8000b3c <__aeabi_dcmplt>
 8013452:	b110      	cbz	r0, 801345a <_printf_float+0x86>
 8013454:	232d      	movs	r3, #45	@ 0x2d
 8013456:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801345a:	4a91      	ldr	r2, [pc, #580]	@ (80136a0 <_printf_float+0x2cc>)
 801345c:	4b91      	ldr	r3, [pc, #580]	@ (80136a4 <_printf_float+0x2d0>)
 801345e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013462:	bf8c      	ite	hi
 8013464:	4690      	movhi	r8, r2
 8013466:	4698      	movls	r8, r3
 8013468:	2303      	movs	r3, #3
 801346a:	6123      	str	r3, [r4, #16]
 801346c:	f02b 0304 	bic.w	r3, fp, #4
 8013470:	6023      	str	r3, [r4, #0]
 8013472:	f04f 0900 	mov.w	r9, #0
 8013476:	9700      	str	r7, [sp, #0]
 8013478:	4633      	mov	r3, r6
 801347a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801347c:	4621      	mov	r1, r4
 801347e:	4628      	mov	r0, r5
 8013480:	f000 f9d2 	bl	8013828 <_printf_common>
 8013484:	3001      	adds	r0, #1
 8013486:	f040 808d 	bne.w	80135a4 <_printf_float+0x1d0>
 801348a:	f04f 30ff 	mov.w	r0, #4294967295
 801348e:	b00d      	add	sp, #52	@ 0x34
 8013490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013494:	4642      	mov	r2, r8
 8013496:	464b      	mov	r3, r9
 8013498:	4640      	mov	r0, r8
 801349a:	4649      	mov	r1, r9
 801349c:	f7ed fb76 	bl	8000b8c <__aeabi_dcmpun>
 80134a0:	b140      	cbz	r0, 80134b4 <_printf_float+0xe0>
 80134a2:	464b      	mov	r3, r9
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	bfbc      	itt	lt
 80134a8:	232d      	movlt	r3, #45	@ 0x2d
 80134aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80134ae:	4a7e      	ldr	r2, [pc, #504]	@ (80136a8 <_printf_float+0x2d4>)
 80134b0:	4b7e      	ldr	r3, [pc, #504]	@ (80136ac <_printf_float+0x2d8>)
 80134b2:	e7d4      	b.n	801345e <_printf_float+0x8a>
 80134b4:	6863      	ldr	r3, [r4, #4]
 80134b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80134ba:	9206      	str	r2, [sp, #24]
 80134bc:	1c5a      	adds	r2, r3, #1
 80134be:	d13b      	bne.n	8013538 <_printf_float+0x164>
 80134c0:	2306      	movs	r3, #6
 80134c2:	6063      	str	r3, [r4, #4]
 80134c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80134c8:	2300      	movs	r3, #0
 80134ca:	6022      	str	r2, [r4, #0]
 80134cc:	9303      	str	r3, [sp, #12]
 80134ce:	ab0a      	add	r3, sp, #40	@ 0x28
 80134d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80134d4:	ab09      	add	r3, sp, #36	@ 0x24
 80134d6:	9300      	str	r3, [sp, #0]
 80134d8:	6861      	ldr	r1, [r4, #4]
 80134da:	ec49 8b10 	vmov	d0, r8, r9
 80134de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80134e2:	4628      	mov	r0, r5
 80134e4:	f7ff fed6 	bl	8013294 <__cvt>
 80134e8:	9b06      	ldr	r3, [sp, #24]
 80134ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80134ec:	2b47      	cmp	r3, #71	@ 0x47
 80134ee:	4680      	mov	r8, r0
 80134f0:	d129      	bne.n	8013546 <_printf_float+0x172>
 80134f2:	1cc8      	adds	r0, r1, #3
 80134f4:	db02      	blt.n	80134fc <_printf_float+0x128>
 80134f6:	6863      	ldr	r3, [r4, #4]
 80134f8:	4299      	cmp	r1, r3
 80134fa:	dd41      	ble.n	8013580 <_printf_float+0x1ac>
 80134fc:	f1aa 0a02 	sub.w	sl, sl, #2
 8013500:	fa5f fa8a 	uxtb.w	sl, sl
 8013504:	3901      	subs	r1, #1
 8013506:	4652      	mov	r2, sl
 8013508:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801350c:	9109      	str	r1, [sp, #36]	@ 0x24
 801350e:	f7ff ff26 	bl	801335e <__exponent>
 8013512:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013514:	1813      	adds	r3, r2, r0
 8013516:	2a01      	cmp	r2, #1
 8013518:	4681      	mov	r9, r0
 801351a:	6123      	str	r3, [r4, #16]
 801351c:	dc02      	bgt.n	8013524 <_printf_float+0x150>
 801351e:	6822      	ldr	r2, [r4, #0]
 8013520:	07d2      	lsls	r2, r2, #31
 8013522:	d501      	bpl.n	8013528 <_printf_float+0x154>
 8013524:	3301      	adds	r3, #1
 8013526:	6123      	str	r3, [r4, #16]
 8013528:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801352c:	2b00      	cmp	r3, #0
 801352e:	d0a2      	beq.n	8013476 <_printf_float+0xa2>
 8013530:	232d      	movs	r3, #45	@ 0x2d
 8013532:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013536:	e79e      	b.n	8013476 <_printf_float+0xa2>
 8013538:	9a06      	ldr	r2, [sp, #24]
 801353a:	2a47      	cmp	r2, #71	@ 0x47
 801353c:	d1c2      	bne.n	80134c4 <_printf_float+0xf0>
 801353e:	2b00      	cmp	r3, #0
 8013540:	d1c0      	bne.n	80134c4 <_printf_float+0xf0>
 8013542:	2301      	movs	r3, #1
 8013544:	e7bd      	b.n	80134c2 <_printf_float+0xee>
 8013546:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801354a:	d9db      	bls.n	8013504 <_printf_float+0x130>
 801354c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8013550:	d118      	bne.n	8013584 <_printf_float+0x1b0>
 8013552:	2900      	cmp	r1, #0
 8013554:	6863      	ldr	r3, [r4, #4]
 8013556:	dd0b      	ble.n	8013570 <_printf_float+0x19c>
 8013558:	6121      	str	r1, [r4, #16]
 801355a:	b913      	cbnz	r3, 8013562 <_printf_float+0x18e>
 801355c:	6822      	ldr	r2, [r4, #0]
 801355e:	07d0      	lsls	r0, r2, #31
 8013560:	d502      	bpl.n	8013568 <_printf_float+0x194>
 8013562:	3301      	adds	r3, #1
 8013564:	440b      	add	r3, r1
 8013566:	6123      	str	r3, [r4, #16]
 8013568:	65a1      	str	r1, [r4, #88]	@ 0x58
 801356a:	f04f 0900 	mov.w	r9, #0
 801356e:	e7db      	b.n	8013528 <_printf_float+0x154>
 8013570:	b913      	cbnz	r3, 8013578 <_printf_float+0x1a4>
 8013572:	6822      	ldr	r2, [r4, #0]
 8013574:	07d2      	lsls	r2, r2, #31
 8013576:	d501      	bpl.n	801357c <_printf_float+0x1a8>
 8013578:	3302      	adds	r3, #2
 801357a:	e7f4      	b.n	8013566 <_printf_float+0x192>
 801357c:	2301      	movs	r3, #1
 801357e:	e7f2      	b.n	8013566 <_printf_float+0x192>
 8013580:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8013584:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013586:	4299      	cmp	r1, r3
 8013588:	db05      	blt.n	8013596 <_printf_float+0x1c2>
 801358a:	6823      	ldr	r3, [r4, #0]
 801358c:	6121      	str	r1, [r4, #16]
 801358e:	07d8      	lsls	r0, r3, #31
 8013590:	d5ea      	bpl.n	8013568 <_printf_float+0x194>
 8013592:	1c4b      	adds	r3, r1, #1
 8013594:	e7e7      	b.n	8013566 <_printf_float+0x192>
 8013596:	2900      	cmp	r1, #0
 8013598:	bfd4      	ite	le
 801359a:	f1c1 0202 	rsble	r2, r1, #2
 801359e:	2201      	movgt	r2, #1
 80135a0:	4413      	add	r3, r2
 80135a2:	e7e0      	b.n	8013566 <_printf_float+0x192>
 80135a4:	6823      	ldr	r3, [r4, #0]
 80135a6:	055a      	lsls	r2, r3, #21
 80135a8:	d407      	bmi.n	80135ba <_printf_float+0x1e6>
 80135aa:	6923      	ldr	r3, [r4, #16]
 80135ac:	4642      	mov	r2, r8
 80135ae:	4631      	mov	r1, r6
 80135b0:	4628      	mov	r0, r5
 80135b2:	47b8      	blx	r7
 80135b4:	3001      	adds	r0, #1
 80135b6:	d12b      	bne.n	8013610 <_printf_float+0x23c>
 80135b8:	e767      	b.n	801348a <_printf_float+0xb6>
 80135ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80135be:	f240 80dd 	bls.w	801377c <_printf_float+0x3a8>
 80135c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80135c6:	2200      	movs	r2, #0
 80135c8:	2300      	movs	r3, #0
 80135ca:	f7ed faad 	bl	8000b28 <__aeabi_dcmpeq>
 80135ce:	2800      	cmp	r0, #0
 80135d0:	d033      	beq.n	801363a <_printf_float+0x266>
 80135d2:	4a37      	ldr	r2, [pc, #220]	@ (80136b0 <_printf_float+0x2dc>)
 80135d4:	2301      	movs	r3, #1
 80135d6:	4631      	mov	r1, r6
 80135d8:	4628      	mov	r0, r5
 80135da:	47b8      	blx	r7
 80135dc:	3001      	adds	r0, #1
 80135de:	f43f af54 	beq.w	801348a <_printf_float+0xb6>
 80135e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80135e6:	4543      	cmp	r3, r8
 80135e8:	db02      	blt.n	80135f0 <_printf_float+0x21c>
 80135ea:	6823      	ldr	r3, [r4, #0]
 80135ec:	07d8      	lsls	r0, r3, #31
 80135ee:	d50f      	bpl.n	8013610 <_printf_float+0x23c>
 80135f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80135f4:	4631      	mov	r1, r6
 80135f6:	4628      	mov	r0, r5
 80135f8:	47b8      	blx	r7
 80135fa:	3001      	adds	r0, #1
 80135fc:	f43f af45 	beq.w	801348a <_printf_float+0xb6>
 8013600:	f04f 0900 	mov.w	r9, #0
 8013604:	f108 38ff 	add.w	r8, r8, #4294967295
 8013608:	f104 0a1a 	add.w	sl, r4, #26
 801360c:	45c8      	cmp	r8, r9
 801360e:	dc09      	bgt.n	8013624 <_printf_float+0x250>
 8013610:	6823      	ldr	r3, [r4, #0]
 8013612:	079b      	lsls	r3, r3, #30
 8013614:	f100 8103 	bmi.w	801381e <_printf_float+0x44a>
 8013618:	68e0      	ldr	r0, [r4, #12]
 801361a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801361c:	4298      	cmp	r0, r3
 801361e:	bfb8      	it	lt
 8013620:	4618      	movlt	r0, r3
 8013622:	e734      	b.n	801348e <_printf_float+0xba>
 8013624:	2301      	movs	r3, #1
 8013626:	4652      	mov	r2, sl
 8013628:	4631      	mov	r1, r6
 801362a:	4628      	mov	r0, r5
 801362c:	47b8      	blx	r7
 801362e:	3001      	adds	r0, #1
 8013630:	f43f af2b 	beq.w	801348a <_printf_float+0xb6>
 8013634:	f109 0901 	add.w	r9, r9, #1
 8013638:	e7e8      	b.n	801360c <_printf_float+0x238>
 801363a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801363c:	2b00      	cmp	r3, #0
 801363e:	dc39      	bgt.n	80136b4 <_printf_float+0x2e0>
 8013640:	4a1b      	ldr	r2, [pc, #108]	@ (80136b0 <_printf_float+0x2dc>)
 8013642:	2301      	movs	r3, #1
 8013644:	4631      	mov	r1, r6
 8013646:	4628      	mov	r0, r5
 8013648:	47b8      	blx	r7
 801364a:	3001      	adds	r0, #1
 801364c:	f43f af1d 	beq.w	801348a <_printf_float+0xb6>
 8013650:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8013654:	ea59 0303 	orrs.w	r3, r9, r3
 8013658:	d102      	bne.n	8013660 <_printf_float+0x28c>
 801365a:	6823      	ldr	r3, [r4, #0]
 801365c:	07d9      	lsls	r1, r3, #31
 801365e:	d5d7      	bpl.n	8013610 <_printf_float+0x23c>
 8013660:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013664:	4631      	mov	r1, r6
 8013666:	4628      	mov	r0, r5
 8013668:	47b8      	blx	r7
 801366a:	3001      	adds	r0, #1
 801366c:	f43f af0d 	beq.w	801348a <_printf_float+0xb6>
 8013670:	f04f 0a00 	mov.w	sl, #0
 8013674:	f104 0b1a 	add.w	fp, r4, #26
 8013678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801367a:	425b      	negs	r3, r3
 801367c:	4553      	cmp	r3, sl
 801367e:	dc01      	bgt.n	8013684 <_printf_float+0x2b0>
 8013680:	464b      	mov	r3, r9
 8013682:	e793      	b.n	80135ac <_printf_float+0x1d8>
 8013684:	2301      	movs	r3, #1
 8013686:	465a      	mov	r2, fp
 8013688:	4631      	mov	r1, r6
 801368a:	4628      	mov	r0, r5
 801368c:	47b8      	blx	r7
 801368e:	3001      	adds	r0, #1
 8013690:	f43f aefb 	beq.w	801348a <_printf_float+0xb6>
 8013694:	f10a 0a01 	add.w	sl, sl, #1
 8013698:	e7ee      	b.n	8013678 <_printf_float+0x2a4>
 801369a:	bf00      	nop
 801369c:	7fefffff 	.word	0x7fefffff
 80136a0:	0801a03a 	.word	0x0801a03a
 80136a4:	0801a036 	.word	0x0801a036
 80136a8:	0801a042 	.word	0x0801a042
 80136ac:	0801a03e 	.word	0x0801a03e
 80136b0:	0801a046 	.word	0x0801a046
 80136b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80136b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80136ba:	4553      	cmp	r3, sl
 80136bc:	bfa8      	it	ge
 80136be:	4653      	movge	r3, sl
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	4699      	mov	r9, r3
 80136c4:	dc36      	bgt.n	8013734 <_printf_float+0x360>
 80136c6:	f04f 0b00 	mov.w	fp, #0
 80136ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80136ce:	f104 021a 	add.w	r2, r4, #26
 80136d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80136d4:	9306      	str	r3, [sp, #24]
 80136d6:	eba3 0309 	sub.w	r3, r3, r9
 80136da:	455b      	cmp	r3, fp
 80136dc:	dc31      	bgt.n	8013742 <_printf_float+0x36e>
 80136de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80136e0:	459a      	cmp	sl, r3
 80136e2:	dc3a      	bgt.n	801375a <_printf_float+0x386>
 80136e4:	6823      	ldr	r3, [r4, #0]
 80136e6:	07da      	lsls	r2, r3, #31
 80136e8:	d437      	bmi.n	801375a <_printf_float+0x386>
 80136ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80136ec:	ebaa 0903 	sub.w	r9, sl, r3
 80136f0:	9b06      	ldr	r3, [sp, #24]
 80136f2:	ebaa 0303 	sub.w	r3, sl, r3
 80136f6:	4599      	cmp	r9, r3
 80136f8:	bfa8      	it	ge
 80136fa:	4699      	movge	r9, r3
 80136fc:	f1b9 0f00 	cmp.w	r9, #0
 8013700:	dc33      	bgt.n	801376a <_printf_float+0x396>
 8013702:	f04f 0800 	mov.w	r8, #0
 8013706:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801370a:	f104 0b1a 	add.w	fp, r4, #26
 801370e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013710:	ebaa 0303 	sub.w	r3, sl, r3
 8013714:	eba3 0309 	sub.w	r3, r3, r9
 8013718:	4543      	cmp	r3, r8
 801371a:	f77f af79 	ble.w	8013610 <_printf_float+0x23c>
 801371e:	2301      	movs	r3, #1
 8013720:	465a      	mov	r2, fp
 8013722:	4631      	mov	r1, r6
 8013724:	4628      	mov	r0, r5
 8013726:	47b8      	blx	r7
 8013728:	3001      	adds	r0, #1
 801372a:	f43f aeae 	beq.w	801348a <_printf_float+0xb6>
 801372e:	f108 0801 	add.w	r8, r8, #1
 8013732:	e7ec      	b.n	801370e <_printf_float+0x33a>
 8013734:	4642      	mov	r2, r8
 8013736:	4631      	mov	r1, r6
 8013738:	4628      	mov	r0, r5
 801373a:	47b8      	blx	r7
 801373c:	3001      	adds	r0, #1
 801373e:	d1c2      	bne.n	80136c6 <_printf_float+0x2f2>
 8013740:	e6a3      	b.n	801348a <_printf_float+0xb6>
 8013742:	2301      	movs	r3, #1
 8013744:	4631      	mov	r1, r6
 8013746:	4628      	mov	r0, r5
 8013748:	9206      	str	r2, [sp, #24]
 801374a:	47b8      	blx	r7
 801374c:	3001      	adds	r0, #1
 801374e:	f43f ae9c 	beq.w	801348a <_printf_float+0xb6>
 8013752:	9a06      	ldr	r2, [sp, #24]
 8013754:	f10b 0b01 	add.w	fp, fp, #1
 8013758:	e7bb      	b.n	80136d2 <_printf_float+0x2fe>
 801375a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801375e:	4631      	mov	r1, r6
 8013760:	4628      	mov	r0, r5
 8013762:	47b8      	blx	r7
 8013764:	3001      	adds	r0, #1
 8013766:	d1c0      	bne.n	80136ea <_printf_float+0x316>
 8013768:	e68f      	b.n	801348a <_printf_float+0xb6>
 801376a:	9a06      	ldr	r2, [sp, #24]
 801376c:	464b      	mov	r3, r9
 801376e:	4442      	add	r2, r8
 8013770:	4631      	mov	r1, r6
 8013772:	4628      	mov	r0, r5
 8013774:	47b8      	blx	r7
 8013776:	3001      	adds	r0, #1
 8013778:	d1c3      	bne.n	8013702 <_printf_float+0x32e>
 801377a:	e686      	b.n	801348a <_printf_float+0xb6>
 801377c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013780:	f1ba 0f01 	cmp.w	sl, #1
 8013784:	dc01      	bgt.n	801378a <_printf_float+0x3b6>
 8013786:	07db      	lsls	r3, r3, #31
 8013788:	d536      	bpl.n	80137f8 <_printf_float+0x424>
 801378a:	2301      	movs	r3, #1
 801378c:	4642      	mov	r2, r8
 801378e:	4631      	mov	r1, r6
 8013790:	4628      	mov	r0, r5
 8013792:	47b8      	blx	r7
 8013794:	3001      	adds	r0, #1
 8013796:	f43f ae78 	beq.w	801348a <_printf_float+0xb6>
 801379a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801379e:	4631      	mov	r1, r6
 80137a0:	4628      	mov	r0, r5
 80137a2:	47b8      	blx	r7
 80137a4:	3001      	adds	r0, #1
 80137a6:	f43f ae70 	beq.w	801348a <_printf_float+0xb6>
 80137aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80137ae:	2200      	movs	r2, #0
 80137b0:	2300      	movs	r3, #0
 80137b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80137b6:	f7ed f9b7 	bl	8000b28 <__aeabi_dcmpeq>
 80137ba:	b9c0      	cbnz	r0, 80137ee <_printf_float+0x41a>
 80137bc:	4653      	mov	r3, sl
 80137be:	f108 0201 	add.w	r2, r8, #1
 80137c2:	4631      	mov	r1, r6
 80137c4:	4628      	mov	r0, r5
 80137c6:	47b8      	blx	r7
 80137c8:	3001      	adds	r0, #1
 80137ca:	d10c      	bne.n	80137e6 <_printf_float+0x412>
 80137cc:	e65d      	b.n	801348a <_printf_float+0xb6>
 80137ce:	2301      	movs	r3, #1
 80137d0:	465a      	mov	r2, fp
 80137d2:	4631      	mov	r1, r6
 80137d4:	4628      	mov	r0, r5
 80137d6:	47b8      	blx	r7
 80137d8:	3001      	adds	r0, #1
 80137da:	f43f ae56 	beq.w	801348a <_printf_float+0xb6>
 80137de:	f108 0801 	add.w	r8, r8, #1
 80137e2:	45d0      	cmp	r8, sl
 80137e4:	dbf3      	blt.n	80137ce <_printf_float+0x3fa>
 80137e6:	464b      	mov	r3, r9
 80137e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80137ec:	e6df      	b.n	80135ae <_printf_float+0x1da>
 80137ee:	f04f 0800 	mov.w	r8, #0
 80137f2:	f104 0b1a 	add.w	fp, r4, #26
 80137f6:	e7f4      	b.n	80137e2 <_printf_float+0x40e>
 80137f8:	2301      	movs	r3, #1
 80137fa:	4642      	mov	r2, r8
 80137fc:	e7e1      	b.n	80137c2 <_printf_float+0x3ee>
 80137fe:	2301      	movs	r3, #1
 8013800:	464a      	mov	r2, r9
 8013802:	4631      	mov	r1, r6
 8013804:	4628      	mov	r0, r5
 8013806:	47b8      	blx	r7
 8013808:	3001      	adds	r0, #1
 801380a:	f43f ae3e 	beq.w	801348a <_printf_float+0xb6>
 801380e:	f108 0801 	add.w	r8, r8, #1
 8013812:	68e3      	ldr	r3, [r4, #12]
 8013814:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013816:	1a5b      	subs	r3, r3, r1
 8013818:	4543      	cmp	r3, r8
 801381a:	dcf0      	bgt.n	80137fe <_printf_float+0x42a>
 801381c:	e6fc      	b.n	8013618 <_printf_float+0x244>
 801381e:	f04f 0800 	mov.w	r8, #0
 8013822:	f104 0919 	add.w	r9, r4, #25
 8013826:	e7f4      	b.n	8013812 <_printf_float+0x43e>

08013828 <_printf_common>:
 8013828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801382c:	4616      	mov	r6, r2
 801382e:	4698      	mov	r8, r3
 8013830:	688a      	ldr	r2, [r1, #8]
 8013832:	690b      	ldr	r3, [r1, #16]
 8013834:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013838:	4293      	cmp	r3, r2
 801383a:	bfb8      	it	lt
 801383c:	4613      	movlt	r3, r2
 801383e:	6033      	str	r3, [r6, #0]
 8013840:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013844:	4607      	mov	r7, r0
 8013846:	460c      	mov	r4, r1
 8013848:	b10a      	cbz	r2, 801384e <_printf_common+0x26>
 801384a:	3301      	adds	r3, #1
 801384c:	6033      	str	r3, [r6, #0]
 801384e:	6823      	ldr	r3, [r4, #0]
 8013850:	0699      	lsls	r1, r3, #26
 8013852:	bf42      	ittt	mi
 8013854:	6833      	ldrmi	r3, [r6, #0]
 8013856:	3302      	addmi	r3, #2
 8013858:	6033      	strmi	r3, [r6, #0]
 801385a:	6825      	ldr	r5, [r4, #0]
 801385c:	f015 0506 	ands.w	r5, r5, #6
 8013860:	d106      	bne.n	8013870 <_printf_common+0x48>
 8013862:	f104 0a19 	add.w	sl, r4, #25
 8013866:	68e3      	ldr	r3, [r4, #12]
 8013868:	6832      	ldr	r2, [r6, #0]
 801386a:	1a9b      	subs	r3, r3, r2
 801386c:	42ab      	cmp	r3, r5
 801386e:	dc26      	bgt.n	80138be <_printf_common+0x96>
 8013870:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013874:	6822      	ldr	r2, [r4, #0]
 8013876:	3b00      	subs	r3, #0
 8013878:	bf18      	it	ne
 801387a:	2301      	movne	r3, #1
 801387c:	0692      	lsls	r2, r2, #26
 801387e:	d42b      	bmi.n	80138d8 <_printf_common+0xb0>
 8013880:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013884:	4641      	mov	r1, r8
 8013886:	4638      	mov	r0, r7
 8013888:	47c8      	blx	r9
 801388a:	3001      	adds	r0, #1
 801388c:	d01e      	beq.n	80138cc <_printf_common+0xa4>
 801388e:	6823      	ldr	r3, [r4, #0]
 8013890:	6922      	ldr	r2, [r4, #16]
 8013892:	f003 0306 	and.w	r3, r3, #6
 8013896:	2b04      	cmp	r3, #4
 8013898:	bf02      	ittt	eq
 801389a:	68e5      	ldreq	r5, [r4, #12]
 801389c:	6833      	ldreq	r3, [r6, #0]
 801389e:	1aed      	subeq	r5, r5, r3
 80138a0:	68a3      	ldr	r3, [r4, #8]
 80138a2:	bf0c      	ite	eq
 80138a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80138a8:	2500      	movne	r5, #0
 80138aa:	4293      	cmp	r3, r2
 80138ac:	bfc4      	itt	gt
 80138ae:	1a9b      	subgt	r3, r3, r2
 80138b0:	18ed      	addgt	r5, r5, r3
 80138b2:	2600      	movs	r6, #0
 80138b4:	341a      	adds	r4, #26
 80138b6:	42b5      	cmp	r5, r6
 80138b8:	d11a      	bne.n	80138f0 <_printf_common+0xc8>
 80138ba:	2000      	movs	r0, #0
 80138bc:	e008      	b.n	80138d0 <_printf_common+0xa8>
 80138be:	2301      	movs	r3, #1
 80138c0:	4652      	mov	r2, sl
 80138c2:	4641      	mov	r1, r8
 80138c4:	4638      	mov	r0, r7
 80138c6:	47c8      	blx	r9
 80138c8:	3001      	adds	r0, #1
 80138ca:	d103      	bne.n	80138d4 <_printf_common+0xac>
 80138cc:	f04f 30ff 	mov.w	r0, #4294967295
 80138d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138d4:	3501      	adds	r5, #1
 80138d6:	e7c6      	b.n	8013866 <_printf_common+0x3e>
 80138d8:	18e1      	adds	r1, r4, r3
 80138da:	1c5a      	adds	r2, r3, #1
 80138dc:	2030      	movs	r0, #48	@ 0x30
 80138de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80138e2:	4422      	add	r2, r4
 80138e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80138e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80138ec:	3302      	adds	r3, #2
 80138ee:	e7c7      	b.n	8013880 <_printf_common+0x58>
 80138f0:	2301      	movs	r3, #1
 80138f2:	4622      	mov	r2, r4
 80138f4:	4641      	mov	r1, r8
 80138f6:	4638      	mov	r0, r7
 80138f8:	47c8      	blx	r9
 80138fa:	3001      	adds	r0, #1
 80138fc:	d0e6      	beq.n	80138cc <_printf_common+0xa4>
 80138fe:	3601      	adds	r6, #1
 8013900:	e7d9      	b.n	80138b6 <_printf_common+0x8e>
	...

08013904 <_printf_i>:
 8013904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013908:	7e0f      	ldrb	r7, [r1, #24]
 801390a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801390c:	2f78      	cmp	r7, #120	@ 0x78
 801390e:	4691      	mov	r9, r2
 8013910:	4680      	mov	r8, r0
 8013912:	460c      	mov	r4, r1
 8013914:	469a      	mov	sl, r3
 8013916:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801391a:	d807      	bhi.n	801392c <_printf_i+0x28>
 801391c:	2f62      	cmp	r7, #98	@ 0x62
 801391e:	d80a      	bhi.n	8013936 <_printf_i+0x32>
 8013920:	2f00      	cmp	r7, #0
 8013922:	f000 80d1 	beq.w	8013ac8 <_printf_i+0x1c4>
 8013926:	2f58      	cmp	r7, #88	@ 0x58
 8013928:	f000 80b8 	beq.w	8013a9c <_printf_i+0x198>
 801392c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013930:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013934:	e03a      	b.n	80139ac <_printf_i+0xa8>
 8013936:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801393a:	2b15      	cmp	r3, #21
 801393c:	d8f6      	bhi.n	801392c <_printf_i+0x28>
 801393e:	a101      	add	r1, pc, #4	@ (adr r1, 8013944 <_printf_i+0x40>)
 8013940:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013944:	0801399d 	.word	0x0801399d
 8013948:	080139b1 	.word	0x080139b1
 801394c:	0801392d 	.word	0x0801392d
 8013950:	0801392d 	.word	0x0801392d
 8013954:	0801392d 	.word	0x0801392d
 8013958:	0801392d 	.word	0x0801392d
 801395c:	080139b1 	.word	0x080139b1
 8013960:	0801392d 	.word	0x0801392d
 8013964:	0801392d 	.word	0x0801392d
 8013968:	0801392d 	.word	0x0801392d
 801396c:	0801392d 	.word	0x0801392d
 8013970:	08013aaf 	.word	0x08013aaf
 8013974:	080139db 	.word	0x080139db
 8013978:	08013a69 	.word	0x08013a69
 801397c:	0801392d 	.word	0x0801392d
 8013980:	0801392d 	.word	0x0801392d
 8013984:	08013ad1 	.word	0x08013ad1
 8013988:	0801392d 	.word	0x0801392d
 801398c:	080139db 	.word	0x080139db
 8013990:	0801392d 	.word	0x0801392d
 8013994:	0801392d 	.word	0x0801392d
 8013998:	08013a71 	.word	0x08013a71
 801399c:	6833      	ldr	r3, [r6, #0]
 801399e:	1d1a      	adds	r2, r3, #4
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	6032      	str	r2, [r6, #0]
 80139a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80139a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80139ac:	2301      	movs	r3, #1
 80139ae:	e09c      	b.n	8013aea <_printf_i+0x1e6>
 80139b0:	6833      	ldr	r3, [r6, #0]
 80139b2:	6820      	ldr	r0, [r4, #0]
 80139b4:	1d19      	adds	r1, r3, #4
 80139b6:	6031      	str	r1, [r6, #0]
 80139b8:	0606      	lsls	r6, r0, #24
 80139ba:	d501      	bpl.n	80139c0 <_printf_i+0xbc>
 80139bc:	681d      	ldr	r5, [r3, #0]
 80139be:	e003      	b.n	80139c8 <_printf_i+0xc4>
 80139c0:	0645      	lsls	r5, r0, #25
 80139c2:	d5fb      	bpl.n	80139bc <_printf_i+0xb8>
 80139c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80139c8:	2d00      	cmp	r5, #0
 80139ca:	da03      	bge.n	80139d4 <_printf_i+0xd0>
 80139cc:	232d      	movs	r3, #45	@ 0x2d
 80139ce:	426d      	negs	r5, r5
 80139d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80139d4:	4858      	ldr	r0, [pc, #352]	@ (8013b38 <_printf_i+0x234>)
 80139d6:	230a      	movs	r3, #10
 80139d8:	e011      	b.n	80139fe <_printf_i+0xfa>
 80139da:	6821      	ldr	r1, [r4, #0]
 80139dc:	6833      	ldr	r3, [r6, #0]
 80139de:	0608      	lsls	r0, r1, #24
 80139e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80139e4:	d402      	bmi.n	80139ec <_printf_i+0xe8>
 80139e6:	0649      	lsls	r1, r1, #25
 80139e8:	bf48      	it	mi
 80139ea:	b2ad      	uxthmi	r5, r5
 80139ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80139ee:	4852      	ldr	r0, [pc, #328]	@ (8013b38 <_printf_i+0x234>)
 80139f0:	6033      	str	r3, [r6, #0]
 80139f2:	bf14      	ite	ne
 80139f4:	230a      	movne	r3, #10
 80139f6:	2308      	moveq	r3, #8
 80139f8:	2100      	movs	r1, #0
 80139fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80139fe:	6866      	ldr	r6, [r4, #4]
 8013a00:	60a6      	str	r6, [r4, #8]
 8013a02:	2e00      	cmp	r6, #0
 8013a04:	db05      	blt.n	8013a12 <_printf_i+0x10e>
 8013a06:	6821      	ldr	r1, [r4, #0]
 8013a08:	432e      	orrs	r6, r5
 8013a0a:	f021 0104 	bic.w	r1, r1, #4
 8013a0e:	6021      	str	r1, [r4, #0]
 8013a10:	d04b      	beq.n	8013aaa <_printf_i+0x1a6>
 8013a12:	4616      	mov	r6, r2
 8013a14:	fbb5 f1f3 	udiv	r1, r5, r3
 8013a18:	fb03 5711 	mls	r7, r3, r1, r5
 8013a1c:	5dc7      	ldrb	r7, [r0, r7]
 8013a1e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013a22:	462f      	mov	r7, r5
 8013a24:	42bb      	cmp	r3, r7
 8013a26:	460d      	mov	r5, r1
 8013a28:	d9f4      	bls.n	8013a14 <_printf_i+0x110>
 8013a2a:	2b08      	cmp	r3, #8
 8013a2c:	d10b      	bne.n	8013a46 <_printf_i+0x142>
 8013a2e:	6823      	ldr	r3, [r4, #0]
 8013a30:	07df      	lsls	r7, r3, #31
 8013a32:	d508      	bpl.n	8013a46 <_printf_i+0x142>
 8013a34:	6923      	ldr	r3, [r4, #16]
 8013a36:	6861      	ldr	r1, [r4, #4]
 8013a38:	4299      	cmp	r1, r3
 8013a3a:	bfde      	ittt	le
 8013a3c:	2330      	movle	r3, #48	@ 0x30
 8013a3e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013a42:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013a46:	1b92      	subs	r2, r2, r6
 8013a48:	6122      	str	r2, [r4, #16]
 8013a4a:	f8cd a000 	str.w	sl, [sp]
 8013a4e:	464b      	mov	r3, r9
 8013a50:	aa03      	add	r2, sp, #12
 8013a52:	4621      	mov	r1, r4
 8013a54:	4640      	mov	r0, r8
 8013a56:	f7ff fee7 	bl	8013828 <_printf_common>
 8013a5a:	3001      	adds	r0, #1
 8013a5c:	d14a      	bne.n	8013af4 <_printf_i+0x1f0>
 8013a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8013a62:	b004      	add	sp, #16
 8013a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a68:	6823      	ldr	r3, [r4, #0]
 8013a6a:	f043 0320 	orr.w	r3, r3, #32
 8013a6e:	6023      	str	r3, [r4, #0]
 8013a70:	4832      	ldr	r0, [pc, #200]	@ (8013b3c <_printf_i+0x238>)
 8013a72:	2778      	movs	r7, #120	@ 0x78
 8013a74:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013a78:	6823      	ldr	r3, [r4, #0]
 8013a7a:	6831      	ldr	r1, [r6, #0]
 8013a7c:	061f      	lsls	r7, r3, #24
 8013a7e:	f851 5b04 	ldr.w	r5, [r1], #4
 8013a82:	d402      	bmi.n	8013a8a <_printf_i+0x186>
 8013a84:	065f      	lsls	r7, r3, #25
 8013a86:	bf48      	it	mi
 8013a88:	b2ad      	uxthmi	r5, r5
 8013a8a:	6031      	str	r1, [r6, #0]
 8013a8c:	07d9      	lsls	r1, r3, #31
 8013a8e:	bf44      	itt	mi
 8013a90:	f043 0320 	orrmi.w	r3, r3, #32
 8013a94:	6023      	strmi	r3, [r4, #0]
 8013a96:	b11d      	cbz	r5, 8013aa0 <_printf_i+0x19c>
 8013a98:	2310      	movs	r3, #16
 8013a9a:	e7ad      	b.n	80139f8 <_printf_i+0xf4>
 8013a9c:	4826      	ldr	r0, [pc, #152]	@ (8013b38 <_printf_i+0x234>)
 8013a9e:	e7e9      	b.n	8013a74 <_printf_i+0x170>
 8013aa0:	6823      	ldr	r3, [r4, #0]
 8013aa2:	f023 0320 	bic.w	r3, r3, #32
 8013aa6:	6023      	str	r3, [r4, #0]
 8013aa8:	e7f6      	b.n	8013a98 <_printf_i+0x194>
 8013aaa:	4616      	mov	r6, r2
 8013aac:	e7bd      	b.n	8013a2a <_printf_i+0x126>
 8013aae:	6833      	ldr	r3, [r6, #0]
 8013ab0:	6825      	ldr	r5, [r4, #0]
 8013ab2:	6961      	ldr	r1, [r4, #20]
 8013ab4:	1d18      	adds	r0, r3, #4
 8013ab6:	6030      	str	r0, [r6, #0]
 8013ab8:	062e      	lsls	r6, r5, #24
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	d501      	bpl.n	8013ac2 <_printf_i+0x1be>
 8013abe:	6019      	str	r1, [r3, #0]
 8013ac0:	e002      	b.n	8013ac8 <_printf_i+0x1c4>
 8013ac2:	0668      	lsls	r0, r5, #25
 8013ac4:	d5fb      	bpl.n	8013abe <_printf_i+0x1ba>
 8013ac6:	8019      	strh	r1, [r3, #0]
 8013ac8:	2300      	movs	r3, #0
 8013aca:	6123      	str	r3, [r4, #16]
 8013acc:	4616      	mov	r6, r2
 8013ace:	e7bc      	b.n	8013a4a <_printf_i+0x146>
 8013ad0:	6833      	ldr	r3, [r6, #0]
 8013ad2:	1d1a      	adds	r2, r3, #4
 8013ad4:	6032      	str	r2, [r6, #0]
 8013ad6:	681e      	ldr	r6, [r3, #0]
 8013ad8:	6862      	ldr	r2, [r4, #4]
 8013ada:	2100      	movs	r1, #0
 8013adc:	4630      	mov	r0, r6
 8013ade:	f7ec fba7 	bl	8000230 <memchr>
 8013ae2:	b108      	cbz	r0, 8013ae8 <_printf_i+0x1e4>
 8013ae4:	1b80      	subs	r0, r0, r6
 8013ae6:	6060      	str	r0, [r4, #4]
 8013ae8:	6863      	ldr	r3, [r4, #4]
 8013aea:	6123      	str	r3, [r4, #16]
 8013aec:	2300      	movs	r3, #0
 8013aee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013af2:	e7aa      	b.n	8013a4a <_printf_i+0x146>
 8013af4:	6923      	ldr	r3, [r4, #16]
 8013af6:	4632      	mov	r2, r6
 8013af8:	4649      	mov	r1, r9
 8013afa:	4640      	mov	r0, r8
 8013afc:	47d0      	blx	sl
 8013afe:	3001      	adds	r0, #1
 8013b00:	d0ad      	beq.n	8013a5e <_printf_i+0x15a>
 8013b02:	6823      	ldr	r3, [r4, #0]
 8013b04:	079b      	lsls	r3, r3, #30
 8013b06:	d413      	bmi.n	8013b30 <_printf_i+0x22c>
 8013b08:	68e0      	ldr	r0, [r4, #12]
 8013b0a:	9b03      	ldr	r3, [sp, #12]
 8013b0c:	4298      	cmp	r0, r3
 8013b0e:	bfb8      	it	lt
 8013b10:	4618      	movlt	r0, r3
 8013b12:	e7a6      	b.n	8013a62 <_printf_i+0x15e>
 8013b14:	2301      	movs	r3, #1
 8013b16:	4632      	mov	r2, r6
 8013b18:	4649      	mov	r1, r9
 8013b1a:	4640      	mov	r0, r8
 8013b1c:	47d0      	blx	sl
 8013b1e:	3001      	adds	r0, #1
 8013b20:	d09d      	beq.n	8013a5e <_printf_i+0x15a>
 8013b22:	3501      	adds	r5, #1
 8013b24:	68e3      	ldr	r3, [r4, #12]
 8013b26:	9903      	ldr	r1, [sp, #12]
 8013b28:	1a5b      	subs	r3, r3, r1
 8013b2a:	42ab      	cmp	r3, r5
 8013b2c:	dcf2      	bgt.n	8013b14 <_printf_i+0x210>
 8013b2e:	e7eb      	b.n	8013b08 <_printf_i+0x204>
 8013b30:	2500      	movs	r5, #0
 8013b32:	f104 0619 	add.w	r6, r4, #25
 8013b36:	e7f5      	b.n	8013b24 <_printf_i+0x220>
 8013b38:	0801a048 	.word	0x0801a048
 8013b3c:	0801a059 	.word	0x0801a059

08013b40 <_scanf_float>:
 8013b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b44:	b087      	sub	sp, #28
 8013b46:	4691      	mov	r9, r2
 8013b48:	9303      	str	r3, [sp, #12]
 8013b4a:	688b      	ldr	r3, [r1, #8]
 8013b4c:	1e5a      	subs	r2, r3, #1
 8013b4e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8013b52:	bf81      	itttt	hi
 8013b54:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8013b58:	eb03 0b05 	addhi.w	fp, r3, r5
 8013b5c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8013b60:	608b      	strhi	r3, [r1, #8]
 8013b62:	680b      	ldr	r3, [r1, #0]
 8013b64:	460a      	mov	r2, r1
 8013b66:	f04f 0500 	mov.w	r5, #0
 8013b6a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8013b6e:	f842 3b1c 	str.w	r3, [r2], #28
 8013b72:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8013b76:	4680      	mov	r8, r0
 8013b78:	460c      	mov	r4, r1
 8013b7a:	bf98      	it	ls
 8013b7c:	f04f 0b00 	movls.w	fp, #0
 8013b80:	9201      	str	r2, [sp, #4]
 8013b82:	4616      	mov	r6, r2
 8013b84:	46aa      	mov	sl, r5
 8013b86:	462f      	mov	r7, r5
 8013b88:	9502      	str	r5, [sp, #8]
 8013b8a:	68a2      	ldr	r2, [r4, #8]
 8013b8c:	b15a      	cbz	r2, 8013ba6 <_scanf_float+0x66>
 8013b8e:	f8d9 3000 	ldr.w	r3, [r9]
 8013b92:	781b      	ldrb	r3, [r3, #0]
 8013b94:	2b4e      	cmp	r3, #78	@ 0x4e
 8013b96:	d863      	bhi.n	8013c60 <_scanf_float+0x120>
 8013b98:	2b40      	cmp	r3, #64	@ 0x40
 8013b9a:	d83b      	bhi.n	8013c14 <_scanf_float+0xd4>
 8013b9c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8013ba0:	b2c8      	uxtb	r0, r1
 8013ba2:	280e      	cmp	r0, #14
 8013ba4:	d939      	bls.n	8013c1a <_scanf_float+0xda>
 8013ba6:	b11f      	cbz	r7, 8013bb0 <_scanf_float+0x70>
 8013ba8:	6823      	ldr	r3, [r4, #0]
 8013baa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013bae:	6023      	str	r3, [r4, #0]
 8013bb0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013bb4:	f1ba 0f01 	cmp.w	sl, #1
 8013bb8:	f200 8114 	bhi.w	8013de4 <_scanf_float+0x2a4>
 8013bbc:	9b01      	ldr	r3, [sp, #4]
 8013bbe:	429e      	cmp	r6, r3
 8013bc0:	f200 8105 	bhi.w	8013dce <_scanf_float+0x28e>
 8013bc4:	2001      	movs	r0, #1
 8013bc6:	b007      	add	sp, #28
 8013bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bcc:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8013bd0:	2a0d      	cmp	r2, #13
 8013bd2:	d8e8      	bhi.n	8013ba6 <_scanf_float+0x66>
 8013bd4:	a101      	add	r1, pc, #4	@ (adr r1, 8013bdc <_scanf_float+0x9c>)
 8013bd6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013bda:	bf00      	nop
 8013bdc:	08013d25 	.word	0x08013d25
 8013be0:	08013ba7 	.word	0x08013ba7
 8013be4:	08013ba7 	.word	0x08013ba7
 8013be8:	08013ba7 	.word	0x08013ba7
 8013bec:	08013d81 	.word	0x08013d81
 8013bf0:	08013d5b 	.word	0x08013d5b
 8013bf4:	08013ba7 	.word	0x08013ba7
 8013bf8:	08013ba7 	.word	0x08013ba7
 8013bfc:	08013d33 	.word	0x08013d33
 8013c00:	08013ba7 	.word	0x08013ba7
 8013c04:	08013ba7 	.word	0x08013ba7
 8013c08:	08013ba7 	.word	0x08013ba7
 8013c0c:	08013ba7 	.word	0x08013ba7
 8013c10:	08013cef 	.word	0x08013cef
 8013c14:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8013c18:	e7da      	b.n	8013bd0 <_scanf_float+0x90>
 8013c1a:	290e      	cmp	r1, #14
 8013c1c:	d8c3      	bhi.n	8013ba6 <_scanf_float+0x66>
 8013c1e:	a001      	add	r0, pc, #4	@ (adr r0, 8013c24 <_scanf_float+0xe4>)
 8013c20:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8013c24:	08013cdf 	.word	0x08013cdf
 8013c28:	08013ba7 	.word	0x08013ba7
 8013c2c:	08013cdf 	.word	0x08013cdf
 8013c30:	08013d6f 	.word	0x08013d6f
 8013c34:	08013ba7 	.word	0x08013ba7
 8013c38:	08013c81 	.word	0x08013c81
 8013c3c:	08013cc5 	.word	0x08013cc5
 8013c40:	08013cc5 	.word	0x08013cc5
 8013c44:	08013cc5 	.word	0x08013cc5
 8013c48:	08013cc5 	.word	0x08013cc5
 8013c4c:	08013cc5 	.word	0x08013cc5
 8013c50:	08013cc5 	.word	0x08013cc5
 8013c54:	08013cc5 	.word	0x08013cc5
 8013c58:	08013cc5 	.word	0x08013cc5
 8013c5c:	08013cc5 	.word	0x08013cc5
 8013c60:	2b6e      	cmp	r3, #110	@ 0x6e
 8013c62:	d809      	bhi.n	8013c78 <_scanf_float+0x138>
 8013c64:	2b60      	cmp	r3, #96	@ 0x60
 8013c66:	d8b1      	bhi.n	8013bcc <_scanf_float+0x8c>
 8013c68:	2b54      	cmp	r3, #84	@ 0x54
 8013c6a:	d07b      	beq.n	8013d64 <_scanf_float+0x224>
 8013c6c:	2b59      	cmp	r3, #89	@ 0x59
 8013c6e:	d19a      	bne.n	8013ba6 <_scanf_float+0x66>
 8013c70:	2d07      	cmp	r5, #7
 8013c72:	d198      	bne.n	8013ba6 <_scanf_float+0x66>
 8013c74:	2508      	movs	r5, #8
 8013c76:	e02f      	b.n	8013cd8 <_scanf_float+0x198>
 8013c78:	2b74      	cmp	r3, #116	@ 0x74
 8013c7a:	d073      	beq.n	8013d64 <_scanf_float+0x224>
 8013c7c:	2b79      	cmp	r3, #121	@ 0x79
 8013c7e:	e7f6      	b.n	8013c6e <_scanf_float+0x12e>
 8013c80:	6821      	ldr	r1, [r4, #0]
 8013c82:	05c8      	lsls	r0, r1, #23
 8013c84:	d51e      	bpl.n	8013cc4 <_scanf_float+0x184>
 8013c86:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8013c8a:	6021      	str	r1, [r4, #0]
 8013c8c:	3701      	adds	r7, #1
 8013c8e:	f1bb 0f00 	cmp.w	fp, #0
 8013c92:	d003      	beq.n	8013c9c <_scanf_float+0x15c>
 8013c94:	3201      	adds	r2, #1
 8013c96:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013c9a:	60a2      	str	r2, [r4, #8]
 8013c9c:	68a3      	ldr	r3, [r4, #8]
 8013c9e:	3b01      	subs	r3, #1
 8013ca0:	60a3      	str	r3, [r4, #8]
 8013ca2:	6923      	ldr	r3, [r4, #16]
 8013ca4:	3301      	adds	r3, #1
 8013ca6:	6123      	str	r3, [r4, #16]
 8013ca8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013cac:	3b01      	subs	r3, #1
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	f8c9 3004 	str.w	r3, [r9, #4]
 8013cb4:	f340 8082 	ble.w	8013dbc <_scanf_float+0x27c>
 8013cb8:	f8d9 3000 	ldr.w	r3, [r9]
 8013cbc:	3301      	adds	r3, #1
 8013cbe:	f8c9 3000 	str.w	r3, [r9]
 8013cc2:	e762      	b.n	8013b8a <_scanf_float+0x4a>
 8013cc4:	eb1a 0105 	adds.w	r1, sl, r5
 8013cc8:	f47f af6d 	bne.w	8013ba6 <_scanf_float+0x66>
 8013ccc:	6822      	ldr	r2, [r4, #0]
 8013cce:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8013cd2:	6022      	str	r2, [r4, #0]
 8013cd4:	460d      	mov	r5, r1
 8013cd6:	468a      	mov	sl, r1
 8013cd8:	f806 3b01 	strb.w	r3, [r6], #1
 8013cdc:	e7de      	b.n	8013c9c <_scanf_float+0x15c>
 8013cde:	6822      	ldr	r2, [r4, #0]
 8013ce0:	0610      	lsls	r0, r2, #24
 8013ce2:	f57f af60 	bpl.w	8013ba6 <_scanf_float+0x66>
 8013ce6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8013cea:	6022      	str	r2, [r4, #0]
 8013cec:	e7f4      	b.n	8013cd8 <_scanf_float+0x198>
 8013cee:	f1ba 0f00 	cmp.w	sl, #0
 8013cf2:	d10c      	bne.n	8013d0e <_scanf_float+0x1ce>
 8013cf4:	b977      	cbnz	r7, 8013d14 <_scanf_float+0x1d4>
 8013cf6:	6822      	ldr	r2, [r4, #0]
 8013cf8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8013cfc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8013d00:	d108      	bne.n	8013d14 <_scanf_float+0x1d4>
 8013d02:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013d06:	6022      	str	r2, [r4, #0]
 8013d08:	f04f 0a01 	mov.w	sl, #1
 8013d0c:	e7e4      	b.n	8013cd8 <_scanf_float+0x198>
 8013d0e:	f1ba 0f02 	cmp.w	sl, #2
 8013d12:	d050      	beq.n	8013db6 <_scanf_float+0x276>
 8013d14:	2d01      	cmp	r5, #1
 8013d16:	d002      	beq.n	8013d1e <_scanf_float+0x1de>
 8013d18:	2d04      	cmp	r5, #4
 8013d1a:	f47f af44 	bne.w	8013ba6 <_scanf_float+0x66>
 8013d1e:	3501      	adds	r5, #1
 8013d20:	b2ed      	uxtb	r5, r5
 8013d22:	e7d9      	b.n	8013cd8 <_scanf_float+0x198>
 8013d24:	f1ba 0f01 	cmp.w	sl, #1
 8013d28:	f47f af3d 	bne.w	8013ba6 <_scanf_float+0x66>
 8013d2c:	f04f 0a02 	mov.w	sl, #2
 8013d30:	e7d2      	b.n	8013cd8 <_scanf_float+0x198>
 8013d32:	b975      	cbnz	r5, 8013d52 <_scanf_float+0x212>
 8013d34:	2f00      	cmp	r7, #0
 8013d36:	f47f af37 	bne.w	8013ba8 <_scanf_float+0x68>
 8013d3a:	6822      	ldr	r2, [r4, #0]
 8013d3c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8013d40:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8013d44:	f040 8103 	bne.w	8013f4e <_scanf_float+0x40e>
 8013d48:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013d4c:	6022      	str	r2, [r4, #0]
 8013d4e:	2501      	movs	r5, #1
 8013d50:	e7c2      	b.n	8013cd8 <_scanf_float+0x198>
 8013d52:	2d03      	cmp	r5, #3
 8013d54:	d0e3      	beq.n	8013d1e <_scanf_float+0x1de>
 8013d56:	2d05      	cmp	r5, #5
 8013d58:	e7df      	b.n	8013d1a <_scanf_float+0x1da>
 8013d5a:	2d02      	cmp	r5, #2
 8013d5c:	f47f af23 	bne.w	8013ba6 <_scanf_float+0x66>
 8013d60:	2503      	movs	r5, #3
 8013d62:	e7b9      	b.n	8013cd8 <_scanf_float+0x198>
 8013d64:	2d06      	cmp	r5, #6
 8013d66:	f47f af1e 	bne.w	8013ba6 <_scanf_float+0x66>
 8013d6a:	2507      	movs	r5, #7
 8013d6c:	e7b4      	b.n	8013cd8 <_scanf_float+0x198>
 8013d6e:	6822      	ldr	r2, [r4, #0]
 8013d70:	0591      	lsls	r1, r2, #22
 8013d72:	f57f af18 	bpl.w	8013ba6 <_scanf_float+0x66>
 8013d76:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8013d7a:	6022      	str	r2, [r4, #0]
 8013d7c:	9702      	str	r7, [sp, #8]
 8013d7e:	e7ab      	b.n	8013cd8 <_scanf_float+0x198>
 8013d80:	6822      	ldr	r2, [r4, #0]
 8013d82:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8013d86:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8013d8a:	d005      	beq.n	8013d98 <_scanf_float+0x258>
 8013d8c:	0550      	lsls	r0, r2, #21
 8013d8e:	f57f af0a 	bpl.w	8013ba6 <_scanf_float+0x66>
 8013d92:	2f00      	cmp	r7, #0
 8013d94:	f000 80db 	beq.w	8013f4e <_scanf_float+0x40e>
 8013d98:	0591      	lsls	r1, r2, #22
 8013d9a:	bf58      	it	pl
 8013d9c:	9902      	ldrpl	r1, [sp, #8]
 8013d9e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013da2:	bf58      	it	pl
 8013da4:	1a79      	subpl	r1, r7, r1
 8013da6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8013daa:	bf58      	it	pl
 8013dac:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8013db0:	6022      	str	r2, [r4, #0]
 8013db2:	2700      	movs	r7, #0
 8013db4:	e790      	b.n	8013cd8 <_scanf_float+0x198>
 8013db6:	f04f 0a03 	mov.w	sl, #3
 8013dba:	e78d      	b.n	8013cd8 <_scanf_float+0x198>
 8013dbc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013dc0:	4649      	mov	r1, r9
 8013dc2:	4640      	mov	r0, r8
 8013dc4:	4798      	blx	r3
 8013dc6:	2800      	cmp	r0, #0
 8013dc8:	f43f aedf 	beq.w	8013b8a <_scanf_float+0x4a>
 8013dcc:	e6eb      	b.n	8013ba6 <_scanf_float+0x66>
 8013dce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013dd2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013dd6:	464a      	mov	r2, r9
 8013dd8:	4640      	mov	r0, r8
 8013dda:	4798      	blx	r3
 8013ddc:	6923      	ldr	r3, [r4, #16]
 8013dde:	3b01      	subs	r3, #1
 8013de0:	6123      	str	r3, [r4, #16]
 8013de2:	e6eb      	b.n	8013bbc <_scanf_float+0x7c>
 8013de4:	1e6b      	subs	r3, r5, #1
 8013de6:	2b06      	cmp	r3, #6
 8013de8:	d824      	bhi.n	8013e34 <_scanf_float+0x2f4>
 8013dea:	2d02      	cmp	r5, #2
 8013dec:	d836      	bhi.n	8013e5c <_scanf_float+0x31c>
 8013dee:	9b01      	ldr	r3, [sp, #4]
 8013df0:	429e      	cmp	r6, r3
 8013df2:	f67f aee7 	bls.w	8013bc4 <_scanf_float+0x84>
 8013df6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013dfa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013dfe:	464a      	mov	r2, r9
 8013e00:	4640      	mov	r0, r8
 8013e02:	4798      	blx	r3
 8013e04:	6923      	ldr	r3, [r4, #16]
 8013e06:	3b01      	subs	r3, #1
 8013e08:	6123      	str	r3, [r4, #16]
 8013e0a:	e7f0      	b.n	8013dee <_scanf_float+0x2ae>
 8013e0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013e10:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8013e14:	464a      	mov	r2, r9
 8013e16:	4640      	mov	r0, r8
 8013e18:	4798      	blx	r3
 8013e1a:	6923      	ldr	r3, [r4, #16]
 8013e1c:	3b01      	subs	r3, #1
 8013e1e:	6123      	str	r3, [r4, #16]
 8013e20:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013e24:	fa5f fa8a 	uxtb.w	sl, sl
 8013e28:	f1ba 0f02 	cmp.w	sl, #2
 8013e2c:	d1ee      	bne.n	8013e0c <_scanf_float+0x2cc>
 8013e2e:	3d03      	subs	r5, #3
 8013e30:	b2ed      	uxtb	r5, r5
 8013e32:	1b76      	subs	r6, r6, r5
 8013e34:	6823      	ldr	r3, [r4, #0]
 8013e36:	05da      	lsls	r2, r3, #23
 8013e38:	d530      	bpl.n	8013e9c <_scanf_float+0x35c>
 8013e3a:	055b      	lsls	r3, r3, #21
 8013e3c:	d511      	bpl.n	8013e62 <_scanf_float+0x322>
 8013e3e:	9b01      	ldr	r3, [sp, #4]
 8013e40:	429e      	cmp	r6, r3
 8013e42:	f67f aebf 	bls.w	8013bc4 <_scanf_float+0x84>
 8013e46:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013e4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013e4e:	464a      	mov	r2, r9
 8013e50:	4640      	mov	r0, r8
 8013e52:	4798      	blx	r3
 8013e54:	6923      	ldr	r3, [r4, #16]
 8013e56:	3b01      	subs	r3, #1
 8013e58:	6123      	str	r3, [r4, #16]
 8013e5a:	e7f0      	b.n	8013e3e <_scanf_float+0x2fe>
 8013e5c:	46aa      	mov	sl, r5
 8013e5e:	46b3      	mov	fp, r6
 8013e60:	e7de      	b.n	8013e20 <_scanf_float+0x2e0>
 8013e62:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8013e66:	6923      	ldr	r3, [r4, #16]
 8013e68:	2965      	cmp	r1, #101	@ 0x65
 8013e6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8013e6e:	f106 35ff 	add.w	r5, r6, #4294967295
 8013e72:	6123      	str	r3, [r4, #16]
 8013e74:	d00c      	beq.n	8013e90 <_scanf_float+0x350>
 8013e76:	2945      	cmp	r1, #69	@ 0x45
 8013e78:	d00a      	beq.n	8013e90 <_scanf_float+0x350>
 8013e7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013e7e:	464a      	mov	r2, r9
 8013e80:	4640      	mov	r0, r8
 8013e82:	4798      	blx	r3
 8013e84:	6923      	ldr	r3, [r4, #16]
 8013e86:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8013e8a:	3b01      	subs	r3, #1
 8013e8c:	1eb5      	subs	r5, r6, #2
 8013e8e:	6123      	str	r3, [r4, #16]
 8013e90:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013e94:	464a      	mov	r2, r9
 8013e96:	4640      	mov	r0, r8
 8013e98:	4798      	blx	r3
 8013e9a:	462e      	mov	r6, r5
 8013e9c:	6822      	ldr	r2, [r4, #0]
 8013e9e:	f012 0210 	ands.w	r2, r2, #16
 8013ea2:	d001      	beq.n	8013ea8 <_scanf_float+0x368>
 8013ea4:	2000      	movs	r0, #0
 8013ea6:	e68e      	b.n	8013bc6 <_scanf_float+0x86>
 8013ea8:	7032      	strb	r2, [r6, #0]
 8013eaa:	6823      	ldr	r3, [r4, #0]
 8013eac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8013eb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013eb4:	d125      	bne.n	8013f02 <_scanf_float+0x3c2>
 8013eb6:	9b02      	ldr	r3, [sp, #8]
 8013eb8:	429f      	cmp	r7, r3
 8013eba:	d00a      	beq.n	8013ed2 <_scanf_float+0x392>
 8013ebc:	1bda      	subs	r2, r3, r7
 8013ebe:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8013ec2:	429e      	cmp	r6, r3
 8013ec4:	bf28      	it	cs
 8013ec6:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8013eca:	4922      	ldr	r1, [pc, #136]	@ (8013f54 <_scanf_float+0x414>)
 8013ecc:	4630      	mov	r0, r6
 8013ece:	f000 fb09 	bl	80144e4 <siprintf>
 8013ed2:	9901      	ldr	r1, [sp, #4]
 8013ed4:	2200      	movs	r2, #0
 8013ed6:	4640      	mov	r0, r8
 8013ed8:	f7ff f8a2 	bl	8013020 <_strtod_r>
 8013edc:	9b03      	ldr	r3, [sp, #12]
 8013ede:	6821      	ldr	r1, [r4, #0]
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	f011 0f02 	tst.w	r1, #2
 8013ee6:	ec57 6b10 	vmov	r6, r7, d0
 8013eea:	f103 0204 	add.w	r2, r3, #4
 8013eee:	d015      	beq.n	8013f1c <_scanf_float+0x3dc>
 8013ef0:	9903      	ldr	r1, [sp, #12]
 8013ef2:	600a      	str	r2, [r1, #0]
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	e9c3 6700 	strd	r6, r7, [r3]
 8013efa:	68e3      	ldr	r3, [r4, #12]
 8013efc:	3301      	adds	r3, #1
 8013efe:	60e3      	str	r3, [r4, #12]
 8013f00:	e7d0      	b.n	8013ea4 <_scanf_float+0x364>
 8013f02:	9b04      	ldr	r3, [sp, #16]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d0e4      	beq.n	8013ed2 <_scanf_float+0x392>
 8013f08:	9905      	ldr	r1, [sp, #20]
 8013f0a:	230a      	movs	r3, #10
 8013f0c:	3101      	adds	r1, #1
 8013f0e:	4640      	mov	r0, r8
 8013f10:	f7ff f912 	bl	8013138 <_strtol_r>
 8013f14:	9b04      	ldr	r3, [sp, #16]
 8013f16:	9e05      	ldr	r6, [sp, #20]
 8013f18:	1ac2      	subs	r2, r0, r3
 8013f1a:	e7d0      	b.n	8013ebe <_scanf_float+0x37e>
 8013f1c:	f011 0f04 	tst.w	r1, #4
 8013f20:	9903      	ldr	r1, [sp, #12]
 8013f22:	600a      	str	r2, [r1, #0]
 8013f24:	d1e6      	bne.n	8013ef4 <_scanf_float+0x3b4>
 8013f26:	681d      	ldr	r5, [r3, #0]
 8013f28:	4632      	mov	r2, r6
 8013f2a:	463b      	mov	r3, r7
 8013f2c:	4630      	mov	r0, r6
 8013f2e:	4639      	mov	r1, r7
 8013f30:	f7ec fe2c 	bl	8000b8c <__aeabi_dcmpun>
 8013f34:	b128      	cbz	r0, 8013f42 <_scanf_float+0x402>
 8013f36:	4808      	ldr	r0, [pc, #32]	@ (8013f58 <_scanf_float+0x418>)
 8013f38:	f000 fe2e 	bl	8014b98 <nanf>
 8013f3c:	ed85 0a00 	vstr	s0, [r5]
 8013f40:	e7db      	b.n	8013efa <_scanf_float+0x3ba>
 8013f42:	4630      	mov	r0, r6
 8013f44:	4639      	mov	r1, r7
 8013f46:	f7ec fe7f 	bl	8000c48 <__aeabi_d2f>
 8013f4a:	6028      	str	r0, [r5, #0]
 8013f4c:	e7d5      	b.n	8013efa <_scanf_float+0x3ba>
 8013f4e:	2700      	movs	r7, #0
 8013f50:	e62e      	b.n	8013bb0 <_scanf_float+0x70>
 8013f52:	bf00      	nop
 8013f54:	0801a06a 	.word	0x0801a06a
 8013f58:	0801a033 	.word	0x0801a033

08013f5c <_fclose_r>:
 8013f5c:	b570      	push	{r4, r5, r6, lr}
 8013f5e:	4605      	mov	r5, r0
 8013f60:	460c      	mov	r4, r1
 8013f62:	b1b9      	cbz	r1, 8013f94 <_fclose_r+0x38>
 8013f64:	b118      	cbz	r0, 8013f6e <_fclose_r+0x12>
 8013f66:	6a03      	ldr	r3, [r0, #32]
 8013f68:	b90b      	cbnz	r3, 8013f6e <_fclose_r+0x12>
 8013f6a:	f000 f9f3 	bl	8014354 <__sinit>
 8013f6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013f70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f74:	07d6      	lsls	r6, r2, #31
 8013f76:	d404      	bmi.n	8013f82 <_fclose_r+0x26>
 8013f78:	0598      	lsls	r0, r3, #22
 8013f7a:	d40e      	bmi.n	8013f9a <_fclose_r+0x3e>
 8013f7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013f7e:	f000 fdf3 	bl	8014b68 <__retarget_lock_acquire_recursive>
 8013f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f86:	b943      	cbnz	r3, 8013f9a <_fclose_r+0x3e>
 8013f88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013f8a:	07d9      	lsls	r1, r3, #31
 8013f8c:	d402      	bmi.n	8013f94 <_fclose_r+0x38>
 8013f8e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013f90:	f000 fdeb 	bl	8014b6a <__retarget_lock_release_recursive>
 8013f94:	2600      	movs	r6, #0
 8013f96:	4630      	mov	r0, r6
 8013f98:	bd70      	pop	{r4, r5, r6, pc}
 8013f9a:	4621      	mov	r1, r4
 8013f9c:	4628      	mov	r0, r5
 8013f9e:	f000 f83b 	bl	8014018 <__sflush_r>
 8013fa2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013fa4:	4606      	mov	r6, r0
 8013fa6:	b133      	cbz	r3, 8013fb6 <_fclose_r+0x5a>
 8013fa8:	6a21      	ldr	r1, [r4, #32]
 8013faa:	4628      	mov	r0, r5
 8013fac:	4798      	blx	r3
 8013fae:	2800      	cmp	r0, #0
 8013fb0:	bfb8      	it	lt
 8013fb2:	f04f 36ff 	movlt.w	r6, #4294967295
 8013fb6:	89a3      	ldrh	r3, [r4, #12]
 8013fb8:	061a      	lsls	r2, r3, #24
 8013fba:	d503      	bpl.n	8013fc4 <_fclose_r+0x68>
 8013fbc:	6921      	ldr	r1, [r4, #16]
 8013fbe:	4628      	mov	r0, r5
 8013fc0:	f001 fc52 	bl	8015868 <_free_r>
 8013fc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013fc6:	b141      	cbz	r1, 8013fda <_fclose_r+0x7e>
 8013fc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013fcc:	4299      	cmp	r1, r3
 8013fce:	d002      	beq.n	8013fd6 <_fclose_r+0x7a>
 8013fd0:	4628      	mov	r0, r5
 8013fd2:	f001 fc49 	bl	8015868 <_free_r>
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8013fda:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8013fdc:	b121      	cbz	r1, 8013fe8 <_fclose_r+0x8c>
 8013fde:	4628      	mov	r0, r5
 8013fe0:	f001 fc42 	bl	8015868 <_free_r>
 8013fe4:	2300      	movs	r3, #0
 8013fe6:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013fe8:	f000 f956 	bl	8014298 <__sfp_lock_acquire>
 8013fec:	2300      	movs	r3, #0
 8013fee:	81a3      	strh	r3, [r4, #12]
 8013ff0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013ff2:	07db      	lsls	r3, r3, #31
 8013ff4:	d402      	bmi.n	8013ffc <_fclose_r+0xa0>
 8013ff6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013ff8:	f000 fdb7 	bl	8014b6a <__retarget_lock_release_recursive>
 8013ffc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013ffe:	f000 fdb2 	bl	8014b66 <__retarget_lock_close_recursive>
 8014002:	f000 f94f 	bl	80142a4 <__sfp_lock_release>
 8014006:	e7c6      	b.n	8013f96 <_fclose_r+0x3a>

08014008 <fclose>:
 8014008:	4b02      	ldr	r3, [pc, #8]	@ (8014014 <fclose+0xc>)
 801400a:	4601      	mov	r1, r0
 801400c:	6818      	ldr	r0, [r3, #0]
 801400e:	f7ff bfa5 	b.w	8013f5c <_fclose_r>
 8014012:	bf00      	nop
 8014014:	200001d4 	.word	0x200001d4

08014018 <__sflush_r>:
 8014018:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801401c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014020:	0716      	lsls	r6, r2, #28
 8014022:	4605      	mov	r5, r0
 8014024:	460c      	mov	r4, r1
 8014026:	d454      	bmi.n	80140d2 <__sflush_r+0xba>
 8014028:	684b      	ldr	r3, [r1, #4]
 801402a:	2b00      	cmp	r3, #0
 801402c:	dc02      	bgt.n	8014034 <__sflush_r+0x1c>
 801402e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014030:	2b00      	cmp	r3, #0
 8014032:	dd48      	ble.n	80140c6 <__sflush_r+0xae>
 8014034:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014036:	2e00      	cmp	r6, #0
 8014038:	d045      	beq.n	80140c6 <__sflush_r+0xae>
 801403a:	2300      	movs	r3, #0
 801403c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014040:	682f      	ldr	r7, [r5, #0]
 8014042:	6a21      	ldr	r1, [r4, #32]
 8014044:	602b      	str	r3, [r5, #0]
 8014046:	d030      	beq.n	80140aa <__sflush_r+0x92>
 8014048:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801404a:	89a3      	ldrh	r3, [r4, #12]
 801404c:	0759      	lsls	r1, r3, #29
 801404e:	d505      	bpl.n	801405c <__sflush_r+0x44>
 8014050:	6863      	ldr	r3, [r4, #4]
 8014052:	1ad2      	subs	r2, r2, r3
 8014054:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014056:	b10b      	cbz	r3, 801405c <__sflush_r+0x44>
 8014058:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801405a:	1ad2      	subs	r2, r2, r3
 801405c:	2300      	movs	r3, #0
 801405e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014060:	6a21      	ldr	r1, [r4, #32]
 8014062:	4628      	mov	r0, r5
 8014064:	47b0      	blx	r6
 8014066:	1c43      	adds	r3, r0, #1
 8014068:	89a3      	ldrh	r3, [r4, #12]
 801406a:	d106      	bne.n	801407a <__sflush_r+0x62>
 801406c:	6829      	ldr	r1, [r5, #0]
 801406e:	291d      	cmp	r1, #29
 8014070:	d82b      	bhi.n	80140ca <__sflush_r+0xb2>
 8014072:	4a2a      	ldr	r2, [pc, #168]	@ (801411c <__sflush_r+0x104>)
 8014074:	40ca      	lsrs	r2, r1
 8014076:	07d6      	lsls	r6, r2, #31
 8014078:	d527      	bpl.n	80140ca <__sflush_r+0xb2>
 801407a:	2200      	movs	r2, #0
 801407c:	6062      	str	r2, [r4, #4]
 801407e:	04d9      	lsls	r1, r3, #19
 8014080:	6922      	ldr	r2, [r4, #16]
 8014082:	6022      	str	r2, [r4, #0]
 8014084:	d504      	bpl.n	8014090 <__sflush_r+0x78>
 8014086:	1c42      	adds	r2, r0, #1
 8014088:	d101      	bne.n	801408e <__sflush_r+0x76>
 801408a:	682b      	ldr	r3, [r5, #0]
 801408c:	b903      	cbnz	r3, 8014090 <__sflush_r+0x78>
 801408e:	6560      	str	r0, [r4, #84]	@ 0x54
 8014090:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014092:	602f      	str	r7, [r5, #0]
 8014094:	b1b9      	cbz	r1, 80140c6 <__sflush_r+0xae>
 8014096:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801409a:	4299      	cmp	r1, r3
 801409c:	d002      	beq.n	80140a4 <__sflush_r+0x8c>
 801409e:	4628      	mov	r0, r5
 80140a0:	f001 fbe2 	bl	8015868 <_free_r>
 80140a4:	2300      	movs	r3, #0
 80140a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80140a8:	e00d      	b.n	80140c6 <__sflush_r+0xae>
 80140aa:	2301      	movs	r3, #1
 80140ac:	4628      	mov	r0, r5
 80140ae:	47b0      	blx	r6
 80140b0:	4602      	mov	r2, r0
 80140b2:	1c50      	adds	r0, r2, #1
 80140b4:	d1c9      	bne.n	801404a <__sflush_r+0x32>
 80140b6:	682b      	ldr	r3, [r5, #0]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d0c6      	beq.n	801404a <__sflush_r+0x32>
 80140bc:	2b1d      	cmp	r3, #29
 80140be:	d001      	beq.n	80140c4 <__sflush_r+0xac>
 80140c0:	2b16      	cmp	r3, #22
 80140c2:	d11e      	bne.n	8014102 <__sflush_r+0xea>
 80140c4:	602f      	str	r7, [r5, #0]
 80140c6:	2000      	movs	r0, #0
 80140c8:	e022      	b.n	8014110 <__sflush_r+0xf8>
 80140ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80140ce:	b21b      	sxth	r3, r3
 80140d0:	e01b      	b.n	801410a <__sflush_r+0xf2>
 80140d2:	690f      	ldr	r7, [r1, #16]
 80140d4:	2f00      	cmp	r7, #0
 80140d6:	d0f6      	beq.n	80140c6 <__sflush_r+0xae>
 80140d8:	0793      	lsls	r3, r2, #30
 80140da:	680e      	ldr	r6, [r1, #0]
 80140dc:	bf08      	it	eq
 80140de:	694b      	ldreq	r3, [r1, #20]
 80140e0:	600f      	str	r7, [r1, #0]
 80140e2:	bf18      	it	ne
 80140e4:	2300      	movne	r3, #0
 80140e6:	eba6 0807 	sub.w	r8, r6, r7
 80140ea:	608b      	str	r3, [r1, #8]
 80140ec:	f1b8 0f00 	cmp.w	r8, #0
 80140f0:	dde9      	ble.n	80140c6 <__sflush_r+0xae>
 80140f2:	6a21      	ldr	r1, [r4, #32]
 80140f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80140f6:	4643      	mov	r3, r8
 80140f8:	463a      	mov	r2, r7
 80140fa:	4628      	mov	r0, r5
 80140fc:	47b0      	blx	r6
 80140fe:	2800      	cmp	r0, #0
 8014100:	dc08      	bgt.n	8014114 <__sflush_r+0xfc>
 8014102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014106:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801410a:	81a3      	strh	r3, [r4, #12]
 801410c:	f04f 30ff 	mov.w	r0, #4294967295
 8014110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014114:	4407      	add	r7, r0
 8014116:	eba8 0800 	sub.w	r8, r8, r0
 801411a:	e7e7      	b.n	80140ec <__sflush_r+0xd4>
 801411c:	20400001 	.word	0x20400001

08014120 <_fflush_r>:
 8014120:	b538      	push	{r3, r4, r5, lr}
 8014122:	690b      	ldr	r3, [r1, #16]
 8014124:	4605      	mov	r5, r0
 8014126:	460c      	mov	r4, r1
 8014128:	b913      	cbnz	r3, 8014130 <_fflush_r+0x10>
 801412a:	2500      	movs	r5, #0
 801412c:	4628      	mov	r0, r5
 801412e:	bd38      	pop	{r3, r4, r5, pc}
 8014130:	b118      	cbz	r0, 801413a <_fflush_r+0x1a>
 8014132:	6a03      	ldr	r3, [r0, #32]
 8014134:	b90b      	cbnz	r3, 801413a <_fflush_r+0x1a>
 8014136:	f000 f90d 	bl	8014354 <__sinit>
 801413a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d0f3      	beq.n	801412a <_fflush_r+0xa>
 8014142:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014144:	07d0      	lsls	r0, r2, #31
 8014146:	d404      	bmi.n	8014152 <_fflush_r+0x32>
 8014148:	0599      	lsls	r1, r3, #22
 801414a:	d402      	bmi.n	8014152 <_fflush_r+0x32>
 801414c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801414e:	f000 fd0b 	bl	8014b68 <__retarget_lock_acquire_recursive>
 8014152:	4628      	mov	r0, r5
 8014154:	4621      	mov	r1, r4
 8014156:	f7ff ff5f 	bl	8014018 <__sflush_r>
 801415a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801415c:	07da      	lsls	r2, r3, #31
 801415e:	4605      	mov	r5, r0
 8014160:	d4e4      	bmi.n	801412c <_fflush_r+0xc>
 8014162:	89a3      	ldrh	r3, [r4, #12]
 8014164:	059b      	lsls	r3, r3, #22
 8014166:	d4e1      	bmi.n	801412c <_fflush_r+0xc>
 8014168:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801416a:	f000 fcfe 	bl	8014b6a <__retarget_lock_release_recursive>
 801416e:	e7dd      	b.n	801412c <_fflush_r+0xc>

08014170 <fflush>:
 8014170:	4601      	mov	r1, r0
 8014172:	b920      	cbnz	r0, 801417e <fflush+0xe>
 8014174:	4a04      	ldr	r2, [pc, #16]	@ (8014188 <fflush+0x18>)
 8014176:	4905      	ldr	r1, [pc, #20]	@ (801418c <fflush+0x1c>)
 8014178:	4805      	ldr	r0, [pc, #20]	@ (8014190 <fflush+0x20>)
 801417a:	f000 b915 	b.w	80143a8 <_fwalk_sglue>
 801417e:	4b05      	ldr	r3, [pc, #20]	@ (8014194 <fflush+0x24>)
 8014180:	6818      	ldr	r0, [r3, #0]
 8014182:	f7ff bfcd 	b.w	8014120 <_fflush_r>
 8014186:	bf00      	nop
 8014188:	2000005c 	.word	0x2000005c
 801418c:	08014121 	.word	0x08014121
 8014190:	200001d8 	.word	0x200001d8
 8014194:	200001d4 	.word	0x200001d4

08014198 <std>:
 8014198:	2300      	movs	r3, #0
 801419a:	b510      	push	{r4, lr}
 801419c:	4604      	mov	r4, r0
 801419e:	e9c0 3300 	strd	r3, r3, [r0]
 80141a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80141a6:	6083      	str	r3, [r0, #8]
 80141a8:	8181      	strh	r1, [r0, #12]
 80141aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80141ac:	81c2      	strh	r2, [r0, #14]
 80141ae:	6183      	str	r3, [r0, #24]
 80141b0:	4619      	mov	r1, r3
 80141b2:	2208      	movs	r2, #8
 80141b4:	305c      	adds	r0, #92	@ 0x5c
 80141b6:	f000 fb73 	bl	80148a0 <memset>
 80141ba:	4b0d      	ldr	r3, [pc, #52]	@ (80141f0 <std+0x58>)
 80141bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80141be:	4b0d      	ldr	r3, [pc, #52]	@ (80141f4 <std+0x5c>)
 80141c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80141c2:	4b0d      	ldr	r3, [pc, #52]	@ (80141f8 <std+0x60>)
 80141c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80141c6:	4b0d      	ldr	r3, [pc, #52]	@ (80141fc <std+0x64>)
 80141c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80141ca:	4b0d      	ldr	r3, [pc, #52]	@ (8014200 <std+0x68>)
 80141cc:	6224      	str	r4, [r4, #32]
 80141ce:	429c      	cmp	r4, r3
 80141d0:	d006      	beq.n	80141e0 <std+0x48>
 80141d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80141d6:	4294      	cmp	r4, r2
 80141d8:	d002      	beq.n	80141e0 <std+0x48>
 80141da:	33d0      	adds	r3, #208	@ 0xd0
 80141dc:	429c      	cmp	r4, r3
 80141de:	d105      	bne.n	80141ec <std+0x54>
 80141e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80141e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80141e8:	f000 bcbc 	b.w	8014b64 <__retarget_lock_init_recursive>
 80141ec:	bd10      	pop	{r4, pc}
 80141ee:	bf00      	nop
 80141f0:	08014529 	.word	0x08014529
 80141f4:	0801454b 	.word	0x0801454b
 80141f8:	08014583 	.word	0x08014583
 80141fc:	080145a7 	.word	0x080145a7
 8014200:	20000670 	.word	0x20000670

08014204 <stdio_exit_handler>:
 8014204:	4a02      	ldr	r2, [pc, #8]	@ (8014210 <stdio_exit_handler+0xc>)
 8014206:	4903      	ldr	r1, [pc, #12]	@ (8014214 <stdio_exit_handler+0x10>)
 8014208:	4803      	ldr	r0, [pc, #12]	@ (8014218 <stdio_exit_handler+0x14>)
 801420a:	f000 b8cd 	b.w	80143a8 <_fwalk_sglue>
 801420e:	bf00      	nop
 8014210:	2000005c 	.word	0x2000005c
 8014214:	08014121 	.word	0x08014121
 8014218:	200001d8 	.word	0x200001d8

0801421c <cleanup_stdio>:
 801421c:	6841      	ldr	r1, [r0, #4]
 801421e:	4b0c      	ldr	r3, [pc, #48]	@ (8014250 <cleanup_stdio+0x34>)
 8014220:	4299      	cmp	r1, r3
 8014222:	b510      	push	{r4, lr}
 8014224:	4604      	mov	r4, r0
 8014226:	d001      	beq.n	801422c <cleanup_stdio+0x10>
 8014228:	f7ff ff7a 	bl	8014120 <_fflush_r>
 801422c:	68a1      	ldr	r1, [r4, #8]
 801422e:	4b09      	ldr	r3, [pc, #36]	@ (8014254 <cleanup_stdio+0x38>)
 8014230:	4299      	cmp	r1, r3
 8014232:	d002      	beq.n	801423a <cleanup_stdio+0x1e>
 8014234:	4620      	mov	r0, r4
 8014236:	f7ff ff73 	bl	8014120 <_fflush_r>
 801423a:	68e1      	ldr	r1, [r4, #12]
 801423c:	4b06      	ldr	r3, [pc, #24]	@ (8014258 <cleanup_stdio+0x3c>)
 801423e:	4299      	cmp	r1, r3
 8014240:	d004      	beq.n	801424c <cleanup_stdio+0x30>
 8014242:	4620      	mov	r0, r4
 8014244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014248:	f7ff bf6a 	b.w	8014120 <_fflush_r>
 801424c:	bd10      	pop	{r4, pc}
 801424e:	bf00      	nop
 8014250:	20000670 	.word	0x20000670
 8014254:	200006d8 	.word	0x200006d8
 8014258:	20000740 	.word	0x20000740

0801425c <global_stdio_init.part.0>:
 801425c:	b510      	push	{r4, lr}
 801425e:	4b0b      	ldr	r3, [pc, #44]	@ (801428c <global_stdio_init.part.0+0x30>)
 8014260:	4c0b      	ldr	r4, [pc, #44]	@ (8014290 <global_stdio_init.part.0+0x34>)
 8014262:	4a0c      	ldr	r2, [pc, #48]	@ (8014294 <global_stdio_init.part.0+0x38>)
 8014264:	601a      	str	r2, [r3, #0]
 8014266:	4620      	mov	r0, r4
 8014268:	2200      	movs	r2, #0
 801426a:	2104      	movs	r1, #4
 801426c:	f7ff ff94 	bl	8014198 <std>
 8014270:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014274:	2201      	movs	r2, #1
 8014276:	2109      	movs	r1, #9
 8014278:	f7ff ff8e 	bl	8014198 <std>
 801427c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014280:	2202      	movs	r2, #2
 8014282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014286:	2112      	movs	r1, #18
 8014288:	f7ff bf86 	b.w	8014198 <std>
 801428c:	200007a8 	.word	0x200007a8
 8014290:	20000670 	.word	0x20000670
 8014294:	08014205 	.word	0x08014205

08014298 <__sfp_lock_acquire>:
 8014298:	4801      	ldr	r0, [pc, #4]	@ (80142a0 <__sfp_lock_acquire+0x8>)
 801429a:	f000 bc65 	b.w	8014b68 <__retarget_lock_acquire_recursive>
 801429e:	bf00      	nop
 80142a0:	200007b0 	.word	0x200007b0

080142a4 <__sfp_lock_release>:
 80142a4:	4801      	ldr	r0, [pc, #4]	@ (80142ac <__sfp_lock_release+0x8>)
 80142a6:	f000 bc60 	b.w	8014b6a <__retarget_lock_release_recursive>
 80142aa:	bf00      	nop
 80142ac:	200007b0 	.word	0x200007b0

080142b0 <__sfp>:
 80142b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142b2:	4607      	mov	r7, r0
 80142b4:	f7ff fff0 	bl	8014298 <__sfp_lock_acquire>
 80142b8:	4b23      	ldr	r3, [pc, #140]	@ (8014348 <__sfp+0x98>)
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	b90b      	cbnz	r3, 80142c2 <__sfp+0x12>
 80142be:	f7ff ffcd 	bl	801425c <global_stdio_init.part.0>
 80142c2:	4e22      	ldr	r6, [pc, #136]	@ (801434c <__sfp+0x9c>)
 80142c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80142c8:	3b01      	subs	r3, #1
 80142ca:	d50f      	bpl.n	80142ec <__sfp+0x3c>
 80142cc:	6835      	ldr	r5, [r6, #0]
 80142ce:	2d00      	cmp	r5, #0
 80142d0:	d137      	bne.n	8014342 <__sfp+0x92>
 80142d2:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 80142d6:	4638      	mov	r0, r7
 80142d8:	f7fe f816 	bl	8012308 <_malloc_r>
 80142dc:	4604      	mov	r4, r0
 80142de:	bb28      	cbnz	r0, 801432c <__sfp+0x7c>
 80142e0:	6030      	str	r0, [r6, #0]
 80142e2:	f7ff ffdf 	bl	80142a4 <__sfp_lock_release>
 80142e6:	230c      	movs	r3, #12
 80142e8:	603b      	str	r3, [r7, #0]
 80142ea:	e01b      	b.n	8014324 <__sfp+0x74>
 80142ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80142f0:	b9d5      	cbnz	r5, 8014328 <__sfp+0x78>
 80142f2:	4b17      	ldr	r3, [pc, #92]	@ (8014350 <__sfp+0xa0>)
 80142f4:	60e3      	str	r3, [r4, #12]
 80142f6:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80142fa:	6665      	str	r5, [r4, #100]	@ 0x64
 80142fc:	f000 fc32 	bl	8014b64 <__retarget_lock_init_recursive>
 8014300:	f7ff ffd0 	bl	80142a4 <__sfp_lock_release>
 8014304:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014308:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801430c:	6025      	str	r5, [r4, #0]
 801430e:	61a5      	str	r5, [r4, #24]
 8014310:	2208      	movs	r2, #8
 8014312:	4629      	mov	r1, r5
 8014314:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8014318:	f000 fac2 	bl	80148a0 <memset>
 801431c:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8014320:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 8014324:	4620      	mov	r0, r4
 8014326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014328:	3468      	adds	r4, #104	@ 0x68
 801432a:	e7cd      	b.n	80142c8 <__sfp+0x18>
 801432c:	2304      	movs	r3, #4
 801432e:	6005      	str	r5, [r0, #0]
 8014330:	6043      	str	r3, [r0, #4]
 8014332:	300c      	adds	r0, #12
 8014334:	60a0      	str	r0, [r4, #8]
 8014336:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 801433a:	4629      	mov	r1, r5
 801433c:	f000 fab0 	bl	80148a0 <memset>
 8014340:	6034      	str	r4, [r6, #0]
 8014342:	6836      	ldr	r6, [r6, #0]
 8014344:	e7be      	b.n	80142c4 <__sfp+0x14>
 8014346:	bf00      	nop
 8014348:	200007a8 	.word	0x200007a8
 801434c:	2000005c 	.word	0x2000005c
 8014350:	ffff0001 	.word	0xffff0001

08014354 <__sinit>:
 8014354:	b510      	push	{r4, lr}
 8014356:	4604      	mov	r4, r0
 8014358:	f7ff ff9e 	bl	8014298 <__sfp_lock_acquire>
 801435c:	6a23      	ldr	r3, [r4, #32]
 801435e:	b11b      	cbz	r3, 8014368 <__sinit+0x14>
 8014360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014364:	f7ff bf9e 	b.w	80142a4 <__sfp_lock_release>
 8014368:	4b04      	ldr	r3, [pc, #16]	@ (801437c <__sinit+0x28>)
 801436a:	6223      	str	r3, [r4, #32]
 801436c:	4b04      	ldr	r3, [pc, #16]	@ (8014380 <__sinit+0x2c>)
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d1f5      	bne.n	8014360 <__sinit+0xc>
 8014374:	f7ff ff72 	bl	801425c <global_stdio_init.part.0>
 8014378:	e7f2      	b.n	8014360 <__sinit+0xc>
 801437a:	bf00      	nop
 801437c:	0801421d 	.word	0x0801421d
 8014380:	200007a8 	.word	0x200007a8

08014384 <fiprintf>:
 8014384:	b40e      	push	{r1, r2, r3}
 8014386:	b503      	push	{r0, r1, lr}
 8014388:	4601      	mov	r1, r0
 801438a:	ab03      	add	r3, sp, #12
 801438c:	4805      	ldr	r0, [pc, #20]	@ (80143a4 <fiprintf+0x20>)
 801438e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014392:	6800      	ldr	r0, [r0, #0]
 8014394:	9301      	str	r3, [sp, #4]
 8014396:	f002 fc97 	bl	8016cc8 <_vfiprintf_r>
 801439a:	b002      	add	sp, #8
 801439c:	f85d eb04 	ldr.w	lr, [sp], #4
 80143a0:	b003      	add	sp, #12
 80143a2:	4770      	bx	lr
 80143a4:	200001d4 	.word	0x200001d4

080143a8 <_fwalk_sglue>:
 80143a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80143ac:	4607      	mov	r7, r0
 80143ae:	4688      	mov	r8, r1
 80143b0:	4614      	mov	r4, r2
 80143b2:	2600      	movs	r6, #0
 80143b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80143b8:	f1b9 0901 	subs.w	r9, r9, #1
 80143bc:	d505      	bpl.n	80143ca <_fwalk_sglue+0x22>
 80143be:	6824      	ldr	r4, [r4, #0]
 80143c0:	2c00      	cmp	r4, #0
 80143c2:	d1f7      	bne.n	80143b4 <_fwalk_sglue+0xc>
 80143c4:	4630      	mov	r0, r6
 80143c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80143ca:	89ab      	ldrh	r3, [r5, #12]
 80143cc:	2b01      	cmp	r3, #1
 80143ce:	d907      	bls.n	80143e0 <_fwalk_sglue+0x38>
 80143d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80143d4:	3301      	adds	r3, #1
 80143d6:	d003      	beq.n	80143e0 <_fwalk_sglue+0x38>
 80143d8:	4629      	mov	r1, r5
 80143da:	4638      	mov	r0, r7
 80143dc:	47c0      	blx	r8
 80143de:	4306      	orrs	r6, r0
 80143e0:	3568      	adds	r5, #104	@ 0x68
 80143e2:	e7e9      	b.n	80143b8 <_fwalk_sglue+0x10>

080143e4 <getchar>:
 80143e4:	4b02      	ldr	r3, [pc, #8]	@ (80143f0 <getchar+0xc>)
 80143e6:	6818      	ldr	r0, [r3, #0]
 80143e8:	6841      	ldr	r1, [r0, #4]
 80143ea:	f002 bd85 	b.w	8016ef8 <_getc_r>
 80143ee:	bf00      	nop
 80143f0:	200001d4 	.word	0x200001d4

080143f4 <iprintf>:
 80143f4:	b40f      	push	{r0, r1, r2, r3}
 80143f6:	b507      	push	{r0, r1, r2, lr}
 80143f8:	4906      	ldr	r1, [pc, #24]	@ (8014414 <iprintf+0x20>)
 80143fa:	ab04      	add	r3, sp, #16
 80143fc:	6808      	ldr	r0, [r1, #0]
 80143fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8014402:	6881      	ldr	r1, [r0, #8]
 8014404:	9301      	str	r3, [sp, #4]
 8014406:	f002 fc5f 	bl	8016cc8 <_vfiprintf_r>
 801440a:	b003      	add	sp, #12
 801440c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014410:	b004      	add	sp, #16
 8014412:	4770      	bx	lr
 8014414:	200001d4 	.word	0x200001d4

08014418 <putchar>:
 8014418:	4b02      	ldr	r3, [pc, #8]	@ (8014424 <putchar+0xc>)
 801441a:	4601      	mov	r1, r0
 801441c:	6818      	ldr	r0, [r3, #0]
 801441e:	6882      	ldr	r2, [r0, #8]
 8014420:	f002 bdf7 	b.w	8017012 <_putc_r>
 8014424:	200001d4 	.word	0x200001d4

08014428 <_puts_r>:
 8014428:	6a03      	ldr	r3, [r0, #32]
 801442a:	b570      	push	{r4, r5, r6, lr}
 801442c:	6884      	ldr	r4, [r0, #8]
 801442e:	4605      	mov	r5, r0
 8014430:	460e      	mov	r6, r1
 8014432:	b90b      	cbnz	r3, 8014438 <_puts_r+0x10>
 8014434:	f7ff ff8e 	bl	8014354 <__sinit>
 8014438:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801443a:	07db      	lsls	r3, r3, #31
 801443c:	d405      	bmi.n	801444a <_puts_r+0x22>
 801443e:	89a3      	ldrh	r3, [r4, #12]
 8014440:	0598      	lsls	r0, r3, #22
 8014442:	d402      	bmi.n	801444a <_puts_r+0x22>
 8014444:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014446:	f000 fb8f 	bl	8014b68 <__retarget_lock_acquire_recursive>
 801444a:	89a3      	ldrh	r3, [r4, #12]
 801444c:	0719      	lsls	r1, r3, #28
 801444e:	d502      	bpl.n	8014456 <_puts_r+0x2e>
 8014450:	6923      	ldr	r3, [r4, #16]
 8014452:	2b00      	cmp	r3, #0
 8014454:	d135      	bne.n	80144c2 <_puts_r+0x9a>
 8014456:	4621      	mov	r1, r4
 8014458:	4628      	mov	r0, r5
 801445a:	f000 f8e7 	bl	801462c <__swsetup_r>
 801445e:	b380      	cbz	r0, 80144c2 <_puts_r+0x9a>
 8014460:	f04f 35ff 	mov.w	r5, #4294967295
 8014464:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014466:	07da      	lsls	r2, r3, #31
 8014468:	d405      	bmi.n	8014476 <_puts_r+0x4e>
 801446a:	89a3      	ldrh	r3, [r4, #12]
 801446c:	059b      	lsls	r3, r3, #22
 801446e:	d402      	bmi.n	8014476 <_puts_r+0x4e>
 8014470:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014472:	f000 fb7a 	bl	8014b6a <__retarget_lock_release_recursive>
 8014476:	4628      	mov	r0, r5
 8014478:	bd70      	pop	{r4, r5, r6, pc}
 801447a:	2b00      	cmp	r3, #0
 801447c:	da04      	bge.n	8014488 <_puts_r+0x60>
 801447e:	69a2      	ldr	r2, [r4, #24]
 8014480:	429a      	cmp	r2, r3
 8014482:	dc17      	bgt.n	80144b4 <_puts_r+0x8c>
 8014484:	290a      	cmp	r1, #10
 8014486:	d015      	beq.n	80144b4 <_puts_r+0x8c>
 8014488:	6823      	ldr	r3, [r4, #0]
 801448a:	1c5a      	adds	r2, r3, #1
 801448c:	6022      	str	r2, [r4, #0]
 801448e:	7019      	strb	r1, [r3, #0]
 8014490:	68a3      	ldr	r3, [r4, #8]
 8014492:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014496:	3b01      	subs	r3, #1
 8014498:	60a3      	str	r3, [r4, #8]
 801449a:	2900      	cmp	r1, #0
 801449c:	d1ed      	bne.n	801447a <_puts_r+0x52>
 801449e:	2b00      	cmp	r3, #0
 80144a0:	da11      	bge.n	80144c6 <_puts_r+0x9e>
 80144a2:	4622      	mov	r2, r4
 80144a4:	210a      	movs	r1, #10
 80144a6:	4628      	mov	r0, r5
 80144a8:	f000 f881 	bl	80145ae <__swbuf_r>
 80144ac:	3001      	adds	r0, #1
 80144ae:	d0d7      	beq.n	8014460 <_puts_r+0x38>
 80144b0:	250a      	movs	r5, #10
 80144b2:	e7d7      	b.n	8014464 <_puts_r+0x3c>
 80144b4:	4622      	mov	r2, r4
 80144b6:	4628      	mov	r0, r5
 80144b8:	f000 f879 	bl	80145ae <__swbuf_r>
 80144bc:	3001      	adds	r0, #1
 80144be:	d1e7      	bne.n	8014490 <_puts_r+0x68>
 80144c0:	e7ce      	b.n	8014460 <_puts_r+0x38>
 80144c2:	3e01      	subs	r6, #1
 80144c4:	e7e4      	b.n	8014490 <_puts_r+0x68>
 80144c6:	6823      	ldr	r3, [r4, #0]
 80144c8:	1c5a      	adds	r2, r3, #1
 80144ca:	6022      	str	r2, [r4, #0]
 80144cc:	220a      	movs	r2, #10
 80144ce:	701a      	strb	r2, [r3, #0]
 80144d0:	e7ee      	b.n	80144b0 <_puts_r+0x88>
	...

080144d4 <puts>:
 80144d4:	4b02      	ldr	r3, [pc, #8]	@ (80144e0 <puts+0xc>)
 80144d6:	4601      	mov	r1, r0
 80144d8:	6818      	ldr	r0, [r3, #0]
 80144da:	f7ff bfa5 	b.w	8014428 <_puts_r>
 80144de:	bf00      	nop
 80144e0:	200001d4 	.word	0x200001d4

080144e4 <siprintf>:
 80144e4:	b40e      	push	{r1, r2, r3}
 80144e6:	b510      	push	{r4, lr}
 80144e8:	b09d      	sub	sp, #116	@ 0x74
 80144ea:	ab1f      	add	r3, sp, #124	@ 0x7c
 80144ec:	9002      	str	r0, [sp, #8]
 80144ee:	9006      	str	r0, [sp, #24]
 80144f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80144f4:	480a      	ldr	r0, [pc, #40]	@ (8014520 <siprintf+0x3c>)
 80144f6:	9107      	str	r1, [sp, #28]
 80144f8:	9104      	str	r1, [sp, #16]
 80144fa:	490a      	ldr	r1, [pc, #40]	@ (8014524 <siprintf+0x40>)
 80144fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8014500:	9105      	str	r1, [sp, #20]
 8014502:	2400      	movs	r4, #0
 8014504:	a902      	add	r1, sp, #8
 8014506:	6800      	ldr	r0, [r0, #0]
 8014508:	9301      	str	r3, [sp, #4]
 801450a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801450c:	f002 fab6 	bl	8016a7c <_svfiprintf_r>
 8014510:	9b02      	ldr	r3, [sp, #8]
 8014512:	701c      	strb	r4, [r3, #0]
 8014514:	b01d      	add	sp, #116	@ 0x74
 8014516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801451a:	b003      	add	sp, #12
 801451c:	4770      	bx	lr
 801451e:	bf00      	nop
 8014520:	200001d4 	.word	0x200001d4
 8014524:	ffff0208 	.word	0xffff0208

08014528 <__sread>:
 8014528:	b510      	push	{r4, lr}
 801452a:	460c      	mov	r4, r1
 801452c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014530:	f000 faca 	bl	8014ac8 <_read_r>
 8014534:	2800      	cmp	r0, #0
 8014536:	bfab      	itete	ge
 8014538:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801453a:	89a3      	ldrhlt	r3, [r4, #12]
 801453c:	181b      	addge	r3, r3, r0
 801453e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014542:	bfac      	ite	ge
 8014544:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014546:	81a3      	strhlt	r3, [r4, #12]
 8014548:	bd10      	pop	{r4, pc}

0801454a <__swrite>:
 801454a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801454e:	461f      	mov	r7, r3
 8014550:	898b      	ldrh	r3, [r1, #12]
 8014552:	05db      	lsls	r3, r3, #23
 8014554:	4605      	mov	r5, r0
 8014556:	460c      	mov	r4, r1
 8014558:	4616      	mov	r6, r2
 801455a:	d505      	bpl.n	8014568 <__swrite+0x1e>
 801455c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014560:	2302      	movs	r3, #2
 8014562:	2200      	movs	r2, #0
 8014564:	f000 fa9e 	bl	8014aa4 <_lseek_r>
 8014568:	89a3      	ldrh	r3, [r4, #12]
 801456a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801456e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014572:	81a3      	strh	r3, [r4, #12]
 8014574:	4632      	mov	r2, r6
 8014576:	463b      	mov	r3, r7
 8014578:	4628      	mov	r0, r5
 801457a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801457e:	f000 bab5 	b.w	8014aec <_write_r>

08014582 <__sseek>:
 8014582:	b510      	push	{r4, lr}
 8014584:	460c      	mov	r4, r1
 8014586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801458a:	f000 fa8b 	bl	8014aa4 <_lseek_r>
 801458e:	1c43      	adds	r3, r0, #1
 8014590:	89a3      	ldrh	r3, [r4, #12]
 8014592:	bf15      	itete	ne
 8014594:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014596:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801459a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801459e:	81a3      	strheq	r3, [r4, #12]
 80145a0:	bf18      	it	ne
 80145a2:	81a3      	strhne	r3, [r4, #12]
 80145a4:	bd10      	pop	{r4, pc}

080145a6 <__sclose>:
 80145a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145aa:	f000 ba0d 	b.w	80149c8 <_close_r>

080145ae <__swbuf_r>:
 80145ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145b0:	460e      	mov	r6, r1
 80145b2:	4614      	mov	r4, r2
 80145b4:	4605      	mov	r5, r0
 80145b6:	b118      	cbz	r0, 80145c0 <__swbuf_r+0x12>
 80145b8:	6a03      	ldr	r3, [r0, #32]
 80145ba:	b90b      	cbnz	r3, 80145c0 <__swbuf_r+0x12>
 80145bc:	f7ff feca 	bl	8014354 <__sinit>
 80145c0:	69a3      	ldr	r3, [r4, #24]
 80145c2:	60a3      	str	r3, [r4, #8]
 80145c4:	89a3      	ldrh	r3, [r4, #12]
 80145c6:	071a      	lsls	r2, r3, #28
 80145c8:	d501      	bpl.n	80145ce <__swbuf_r+0x20>
 80145ca:	6923      	ldr	r3, [r4, #16]
 80145cc:	b943      	cbnz	r3, 80145e0 <__swbuf_r+0x32>
 80145ce:	4621      	mov	r1, r4
 80145d0:	4628      	mov	r0, r5
 80145d2:	f000 f82b 	bl	801462c <__swsetup_r>
 80145d6:	b118      	cbz	r0, 80145e0 <__swbuf_r+0x32>
 80145d8:	f04f 37ff 	mov.w	r7, #4294967295
 80145dc:	4638      	mov	r0, r7
 80145de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145e0:	6823      	ldr	r3, [r4, #0]
 80145e2:	6922      	ldr	r2, [r4, #16]
 80145e4:	1a98      	subs	r0, r3, r2
 80145e6:	6963      	ldr	r3, [r4, #20]
 80145e8:	b2f6      	uxtb	r6, r6
 80145ea:	4283      	cmp	r3, r0
 80145ec:	4637      	mov	r7, r6
 80145ee:	dc05      	bgt.n	80145fc <__swbuf_r+0x4e>
 80145f0:	4621      	mov	r1, r4
 80145f2:	4628      	mov	r0, r5
 80145f4:	f7ff fd94 	bl	8014120 <_fflush_r>
 80145f8:	2800      	cmp	r0, #0
 80145fa:	d1ed      	bne.n	80145d8 <__swbuf_r+0x2a>
 80145fc:	68a3      	ldr	r3, [r4, #8]
 80145fe:	3b01      	subs	r3, #1
 8014600:	60a3      	str	r3, [r4, #8]
 8014602:	6823      	ldr	r3, [r4, #0]
 8014604:	1c5a      	adds	r2, r3, #1
 8014606:	6022      	str	r2, [r4, #0]
 8014608:	701e      	strb	r6, [r3, #0]
 801460a:	6962      	ldr	r2, [r4, #20]
 801460c:	1c43      	adds	r3, r0, #1
 801460e:	429a      	cmp	r2, r3
 8014610:	d004      	beq.n	801461c <__swbuf_r+0x6e>
 8014612:	89a3      	ldrh	r3, [r4, #12]
 8014614:	07db      	lsls	r3, r3, #31
 8014616:	d5e1      	bpl.n	80145dc <__swbuf_r+0x2e>
 8014618:	2e0a      	cmp	r6, #10
 801461a:	d1df      	bne.n	80145dc <__swbuf_r+0x2e>
 801461c:	4621      	mov	r1, r4
 801461e:	4628      	mov	r0, r5
 8014620:	f7ff fd7e 	bl	8014120 <_fflush_r>
 8014624:	2800      	cmp	r0, #0
 8014626:	d0d9      	beq.n	80145dc <__swbuf_r+0x2e>
 8014628:	e7d6      	b.n	80145d8 <__swbuf_r+0x2a>
	...

0801462c <__swsetup_r>:
 801462c:	b538      	push	{r3, r4, r5, lr}
 801462e:	4b29      	ldr	r3, [pc, #164]	@ (80146d4 <__swsetup_r+0xa8>)
 8014630:	4605      	mov	r5, r0
 8014632:	6818      	ldr	r0, [r3, #0]
 8014634:	460c      	mov	r4, r1
 8014636:	b118      	cbz	r0, 8014640 <__swsetup_r+0x14>
 8014638:	6a03      	ldr	r3, [r0, #32]
 801463a:	b90b      	cbnz	r3, 8014640 <__swsetup_r+0x14>
 801463c:	f7ff fe8a 	bl	8014354 <__sinit>
 8014640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014644:	0719      	lsls	r1, r3, #28
 8014646:	d422      	bmi.n	801468e <__swsetup_r+0x62>
 8014648:	06da      	lsls	r2, r3, #27
 801464a:	d407      	bmi.n	801465c <__swsetup_r+0x30>
 801464c:	2209      	movs	r2, #9
 801464e:	602a      	str	r2, [r5, #0]
 8014650:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014654:	81a3      	strh	r3, [r4, #12]
 8014656:	f04f 30ff 	mov.w	r0, #4294967295
 801465a:	e033      	b.n	80146c4 <__swsetup_r+0x98>
 801465c:	0758      	lsls	r0, r3, #29
 801465e:	d512      	bpl.n	8014686 <__swsetup_r+0x5a>
 8014660:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014662:	b141      	cbz	r1, 8014676 <__swsetup_r+0x4a>
 8014664:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014668:	4299      	cmp	r1, r3
 801466a:	d002      	beq.n	8014672 <__swsetup_r+0x46>
 801466c:	4628      	mov	r0, r5
 801466e:	f001 f8fb 	bl	8015868 <_free_r>
 8014672:	2300      	movs	r3, #0
 8014674:	6363      	str	r3, [r4, #52]	@ 0x34
 8014676:	89a3      	ldrh	r3, [r4, #12]
 8014678:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801467c:	81a3      	strh	r3, [r4, #12]
 801467e:	2300      	movs	r3, #0
 8014680:	6063      	str	r3, [r4, #4]
 8014682:	6923      	ldr	r3, [r4, #16]
 8014684:	6023      	str	r3, [r4, #0]
 8014686:	89a3      	ldrh	r3, [r4, #12]
 8014688:	f043 0308 	orr.w	r3, r3, #8
 801468c:	81a3      	strh	r3, [r4, #12]
 801468e:	6923      	ldr	r3, [r4, #16]
 8014690:	b94b      	cbnz	r3, 80146a6 <__swsetup_r+0x7a>
 8014692:	89a3      	ldrh	r3, [r4, #12]
 8014694:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014698:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801469c:	d003      	beq.n	80146a6 <__swsetup_r+0x7a>
 801469e:	4621      	mov	r1, r4
 80146a0:	4628      	mov	r0, r5
 80146a2:	f002 fc7a 	bl	8016f9a <__smakebuf_r>
 80146a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146aa:	f013 0201 	ands.w	r2, r3, #1
 80146ae:	d00a      	beq.n	80146c6 <__swsetup_r+0x9a>
 80146b0:	2200      	movs	r2, #0
 80146b2:	60a2      	str	r2, [r4, #8]
 80146b4:	6962      	ldr	r2, [r4, #20]
 80146b6:	4252      	negs	r2, r2
 80146b8:	61a2      	str	r2, [r4, #24]
 80146ba:	6922      	ldr	r2, [r4, #16]
 80146bc:	b942      	cbnz	r2, 80146d0 <__swsetup_r+0xa4>
 80146be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80146c2:	d1c5      	bne.n	8014650 <__swsetup_r+0x24>
 80146c4:	bd38      	pop	{r3, r4, r5, pc}
 80146c6:	0799      	lsls	r1, r3, #30
 80146c8:	bf58      	it	pl
 80146ca:	6962      	ldrpl	r2, [r4, #20]
 80146cc:	60a2      	str	r2, [r4, #8]
 80146ce:	e7f4      	b.n	80146ba <__swsetup_r+0x8e>
 80146d0:	2000      	movs	r0, #0
 80146d2:	e7f7      	b.n	80146c4 <__swsetup_r+0x98>
 80146d4:	200001d4 	.word	0x200001d4

080146d8 <funcloser>:
 80146d8:	b570      	push	{r4, r5, r6, lr}
 80146da:	690c      	ldr	r4, [r1, #16]
 80146dc:	4606      	mov	r6, r0
 80146de:	460d      	mov	r5, r1
 80146e0:	b184      	cbz	r4, 8014704 <funcloser+0x2c>
 80146e2:	f000 fa15 	bl	8014b10 <__errno>
 80146e6:	2300      	movs	r3, #0
 80146e8:	6003      	str	r3, [r0, #0]
 80146ea:	692b      	ldr	r3, [r5, #16]
 80146ec:	6828      	ldr	r0, [r5, #0]
 80146ee:	4798      	blx	r3
 80146f0:	1e04      	subs	r4, r0, #0
 80146f2:	da07      	bge.n	8014704 <funcloser+0x2c>
 80146f4:	f000 fa0c 	bl	8014b10 <__errno>
 80146f8:	6803      	ldr	r3, [r0, #0]
 80146fa:	b11b      	cbz	r3, 8014704 <funcloser+0x2c>
 80146fc:	f000 fa08 	bl	8014b10 <__errno>
 8014700:	6803      	ldr	r3, [r0, #0]
 8014702:	6033      	str	r3, [r6, #0]
 8014704:	4630      	mov	r0, r6
 8014706:	4629      	mov	r1, r5
 8014708:	f001 f8ae 	bl	8015868 <_free_r>
 801470c:	4620      	mov	r0, r4
 801470e:	bd70      	pop	{r4, r5, r6, pc}

08014710 <funwriter>:
 8014710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014712:	460c      	mov	r4, r1
 8014714:	4616      	mov	r6, r2
 8014716:	461f      	mov	r7, r3
 8014718:	4605      	mov	r5, r0
 801471a:	f000 f9f9 	bl	8014b10 <__errno>
 801471e:	2300      	movs	r3, #0
 8014720:	6003      	str	r3, [r0, #0]
 8014722:	463a      	mov	r2, r7
 8014724:	68a3      	ldr	r3, [r4, #8]
 8014726:	6820      	ldr	r0, [r4, #0]
 8014728:	4631      	mov	r1, r6
 801472a:	4798      	blx	r3
 801472c:	1e04      	subs	r4, r0, #0
 801472e:	da07      	bge.n	8014740 <funwriter+0x30>
 8014730:	f000 f9ee 	bl	8014b10 <__errno>
 8014734:	6803      	ldr	r3, [r0, #0]
 8014736:	b11b      	cbz	r3, 8014740 <funwriter+0x30>
 8014738:	f000 f9ea 	bl	8014b10 <__errno>
 801473c:	6803      	ldr	r3, [r0, #0]
 801473e:	602b      	str	r3, [r5, #0]
 8014740:	4620      	mov	r0, r4
 8014742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014744 <funseeker>:
 8014744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014746:	460c      	mov	r4, r1
 8014748:	4616      	mov	r6, r2
 801474a:	461f      	mov	r7, r3
 801474c:	4605      	mov	r5, r0
 801474e:	f000 f9df 	bl	8014b10 <__errno>
 8014752:	2300      	movs	r3, #0
 8014754:	6003      	str	r3, [r0, #0]
 8014756:	463a      	mov	r2, r7
 8014758:	68e3      	ldr	r3, [r4, #12]
 801475a:	6820      	ldr	r0, [r4, #0]
 801475c:	4631      	mov	r1, r6
 801475e:	4798      	blx	r3
 8014760:	1e04      	subs	r4, r0, #0
 8014762:	da07      	bge.n	8014774 <funseeker+0x30>
 8014764:	f000 f9d4 	bl	8014b10 <__errno>
 8014768:	6803      	ldr	r3, [r0, #0]
 801476a:	b11b      	cbz	r3, 8014774 <funseeker+0x30>
 801476c:	f000 f9d0 	bl	8014b10 <__errno>
 8014770:	6803      	ldr	r3, [r0, #0]
 8014772:	602b      	str	r3, [r5, #0]
 8014774:	4620      	mov	r0, r4
 8014776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014778 <funreader>:
 8014778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801477a:	460c      	mov	r4, r1
 801477c:	4616      	mov	r6, r2
 801477e:	461f      	mov	r7, r3
 8014780:	4605      	mov	r5, r0
 8014782:	f000 f9c5 	bl	8014b10 <__errno>
 8014786:	2300      	movs	r3, #0
 8014788:	6003      	str	r3, [r0, #0]
 801478a:	463a      	mov	r2, r7
 801478c:	6863      	ldr	r3, [r4, #4]
 801478e:	6820      	ldr	r0, [r4, #0]
 8014790:	4631      	mov	r1, r6
 8014792:	4798      	blx	r3
 8014794:	1e04      	subs	r4, r0, #0
 8014796:	da07      	bge.n	80147a8 <funreader+0x30>
 8014798:	f000 f9ba 	bl	8014b10 <__errno>
 801479c:	6803      	ldr	r3, [r0, #0]
 801479e:	b11b      	cbz	r3, 80147a8 <funreader+0x30>
 80147a0:	f000 f9b6 	bl	8014b10 <__errno>
 80147a4:	6803      	ldr	r3, [r0, #0]
 80147a6:	602b      	str	r3, [r5, #0]
 80147a8:	4620      	mov	r0, r4
 80147aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080147ac <_funopen_r>:
 80147ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80147b4:	4605      	mov	r5, r0
 80147b6:	4689      	mov	r9, r1
 80147b8:	461e      	mov	r6, r3
 80147ba:	4617      	mov	r7, r2
 80147bc:	b932      	cbnz	r2, 80147cc <_funopen_r+0x20>
 80147be:	b92b      	cbnz	r3, 80147cc <_funopen_r+0x20>
 80147c0:	2316      	movs	r3, #22
 80147c2:	6003      	str	r3, [r0, #0]
 80147c4:	2400      	movs	r4, #0
 80147c6:	4620      	mov	r0, r4
 80147c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147cc:	4628      	mov	r0, r5
 80147ce:	f7ff fd6f 	bl	80142b0 <__sfp>
 80147d2:	4604      	mov	r4, r0
 80147d4:	2800      	cmp	r0, #0
 80147d6:	d0f5      	beq.n	80147c4 <_funopen_r+0x18>
 80147d8:	4628      	mov	r0, r5
 80147da:	2114      	movs	r1, #20
 80147dc:	f7fd fd94 	bl	8012308 <_malloc_r>
 80147e0:	4605      	mov	r5, r0
 80147e2:	b940      	cbnz	r0, 80147f6 <_funopen_r+0x4a>
 80147e4:	f7ff fd58 	bl	8014298 <__sfp_lock_acquire>
 80147e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80147ea:	81a5      	strh	r5, [r4, #12]
 80147ec:	f000 f9bb 	bl	8014b66 <__retarget_lock_close_recursive>
 80147f0:	f7ff fd58 	bl	80142a4 <__sfp_lock_release>
 80147f4:	e7e6      	b.n	80147c4 <_funopen_r+0x18>
 80147f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80147f8:	07d8      	lsls	r0, r3, #31
 80147fa:	d405      	bmi.n	8014808 <_funopen_r+0x5c>
 80147fc:	89a3      	ldrh	r3, [r4, #12]
 80147fe:	0599      	lsls	r1, r3, #22
 8014800:	d402      	bmi.n	8014808 <_funopen_r+0x5c>
 8014802:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014804:	f000 f9b0 	bl	8014b68 <__retarget_lock_acquire_recursive>
 8014808:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801480c:	81e3      	strh	r3, [r4, #14]
 801480e:	f8c5 9000 	str.w	r9, [r5]
 8014812:	6225      	str	r5, [r4, #32]
 8014814:	b327      	cbz	r7, 8014860 <_funopen_r+0xb4>
 8014816:	4b16      	ldr	r3, [pc, #88]	@ (8014870 <_funopen_r+0xc4>)
 8014818:	606f      	str	r7, [r5, #4]
 801481a:	6263      	str	r3, [r4, #36]	@ 0x24
 801481c:	b1de      	cbz	r6, 8014856 <_funopen_r+0xaa>
 801481e:	2310      	movs	r3, #16
 8014820:	81a3      	strh	r3, [r4, #12]
 8014822:	4b14      	ldr	r3, [pc, #80]	@ (8014874 <_funopen_r+0xc8>)
 8014824:	60ae      	str	r6, [r5, #8]
 8014826:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014828:	4b13      	ldr	r3, [pc, #76]	@ (8014878 <_funopen_r+0xcc>)
 801482a:	f8c5 800c 	str.w	r8, [r5, #12]
 801482e:	f1b8 0f00 	cmp.w	r8, #0
 8014832:	bf18      	it	ne
 8014834:	4698      	movne	r8, r3
 8014836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014838:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 801483c:	612b      	str	r3, [r5, #16]
 801483e:	4b0f      	ldr	r3, [pc, #60]	@ (801487c <_funopen_r+0xd0>)
 8014840:	6323      	str	r3, [r4, #48]	@ 0x30
 8014842:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014844:	07da      	lsls	r2, r3, #31
 8014846:	d4be      	bmi.n	80147c6 <_funopen_r+0x1a>
 8014848:	89a3      	ldrh	r3, [r4, #12]
 801484a:	059b      	lsls	r3, r3, #22
 801484c:	d4bb      	bmi.n	80147c6 <_funopen_r+0x1a>
 801484e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014850:	f000 f98b 	bl	8014b6a <__retarget_lock_release_recursive>
 8014854:	e7b7      	b.n	80147c6 <_funopen_r+0x1a>
 8014856:	2304      	movs	r3, #4
 8014858:	81a3      	strh	r3, [r4, #12]
 801485a:	60ae      	str	r6, [r5, #8]
 801485c:	62a6      	str	r6, [r4, #40]	@ 0x28
 801485e:	e7e3      	b.n	8014828 <_funopen_r+0x7c>
 8014860:	2308      	movs	r3, #8
 8014862:	81a3      	strh	r3, [r4, #12]
 8014864:	4b03      	ldr	r3, [pc, #12]	@ (8014874 <_funopen_r+0xc8>)
 8014866:	60ae      	str	r6, [r5, #8]
 8014868:	62a3      	str	r3, [r4, #40]	@ 0x28
 801486a:	606f      	str	r7, [r5, #4]
 801486c:	6267      	str	r7, [r4, #36]	@ 0x24
 801486e:	e7db      	b.n	8014828 <_funopen_r+0x7c>
 8014870:	08014779 	.word	0x08014779
 8014874:	08014711 	.word	0x08014711
 8014878:	08014745 	.word	0x08014745
 801487c:	080146d9 	.word	0x080146d9

08014880 <funopen>:
 8014880:	b513      	push	{r0, r1, r4, lr}
 8014882:	9c04      	ldr	r4, [sp, #16]
 8014884:	e9cd 3400 	strd	r3, r4, [sp]
 8014888:	4613      	mov	r3, r2
 801488a:	460a      	mov	r2, r1
 801488c:	4601      	mov	r1, r0
 801488e:	4803      	ldr	r0, [pc, #12]	@ (801489c <funopen+0x1c>)
 8014890:	6800      	ldr	r0, [r0, #0]
 8014892:	f7ff ff8b 	bl	80147ac <_funopen_r>
 8014896:	b002      	add	sp, #8
 8014898:	bd10      	pop	{r4, pc}
 801489a:	bf00      	nop
 801489c:	200001d4 	.word	0x200001d4

080148a0 <memset>:
 80148a0:	4402      	add	r2, r0
 80148a2:	4603      	mov	r3, r0
 80148a4:	4293      	cmp	r3, r2
 80148a6:	d100      	bne.n	80148aa <memset+0xa>
 80148a8:	4770      	bx	lr
 80148aa:	f803 1b01 	strb.w	r1, [r3], #1
 80148ae:	e7f9      	b.n	80148a4 <memset+0x4>

080148b0 <strchr>:
 80148b0:	b2c9      	uxtb	r1, r1
 80148b2:	4603      	mov	r3, r0
 80148b4:	4618      	mov	r0, r3
 80148b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80148ba:	b112      	cbz	r2, 80148c2 <strchr+0x12>
 80148bc:	428a      	cmp	r2, r1
 80148be:	d1f9      	bne.n	80148b4 <strchr+0x4>
 80148c0:	4770      	bx	lr
 80148c2:	2900      	cmp	r1, #0
 80148c4:	bf18      	it	ne
 80148c6:	2000      	movne	r0, #0
 80148c8:	4770      	bx	lr

080148ca <strncmp>:
 80148ca:	b510      	push	{r4, lr}
 80148cc:	b16a      	cbz	r2, 80148ea <strncmp+0x20>
 80148ce:	3901      	subs	r1, #1
 80148d0:	1884      	adds	r4, r0, r2
 80148d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80148d6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80148da:	429a      	cmp	r2, r3
 80148dc:	d103      	bne.n	80148e6 <strncmp+0x1c>
 80148de:	42a0      	cmp	r0, r4
 80148e0:	d001      	beq.n	80148e6 <strncmp+0x1c>
 80148e2:	2a00      	cmp	r2, #0
 80148e4:	d1f5      	bne.n	80148d2 <strncmp+0x8>
 80148e6:	1ad0      	subs	r0, r2, r3
 80148e8:	bd10      	pop	{r4, pc}
 80148ea:	4610      	mov	r0, r2
 80148ec:	e7fc      	b.n	80148e8 <strncmp+0x1e>

080148ee <strnlen>:
 80148ee:	b510      	push	{r4, lr}
 80148f0:	4602      	mov	r2, r0
 80148f2:	4401      	add	r1, r0
 80148f4:	428a      	cmp	r2, r1
 80148f6:	4613      	mov	r3, r2
 80148f8:	d003      	beq.n	8014902 <strnlen+0x14>
 80148fa:	781c      	ldrb	r4, [r3, #0]
 80148fc:	3201      	adds	r2, #1
 80148fe:	2c00      	cmp	r4, #0
 8014900:	d1f8      	bne.n	80148f4 <strnlen+0x6>
 8014902:	1a18      	subs	r0, r3, r0
 8014904:	bd10      	pop	{r4, pc}
	...

08014908 <strtok>:
 8014908:	4b16      	ldr	r3, [pc, #88]	@ (8014964 <strtok+0x5c>)
 801490a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801490e:	681f      	ldr	r7, [r3, #0]
 8014910:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8014912:	4605      	mov	r5, r0
 8014914:	460e      	mov	r6, r1
 8014916:	b9ec      	cbnz	r4, 8014954 <strtok+0x4c>
 8014918:	2050      	movs	r0, #80	@ 0x50
 801491a:	f7fd fcc3 	bl	80122a4 <malloc>
 801491e:	4602      	mov	r2, r0
 8014920:	6478      	str	r0, [r7, #68]	@ 0x44
 8014922:	b920      	cbnz	r0, 801492e <strtok+0x26>
 8014924:	4b10      	ldr	r3, [pc, #64]	@ (8014968 <strtok+0x60>)
 8014926:	4811      	ldr	r0, [pc, #68]	@ (801496c <strtok+0x64>)
 8014928:	215b      	movs	r1, #91	@ 0x5b
 801492a:	f7fd fc31 	bl	8012190 <__assert_func>
 801492e:	e9c0 4400 	strd	r4, r4, [r0]
 8014932:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8014936:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801493a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801493e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8014942:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8014946:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801494a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801494e:	6184      	str	r4, [r0, #24]
 8014950:	7704      	strb	r4, [r0, #28]
 8014952:	6244      	str	r4, [r0, #36]	@ 0x24
 8014954:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014956:	4631      	mov	r1, r6
 8014958:	4628      	mov	r0, r5
 801495a:	2301      	movs	r3, #1
 801495c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014960:	f000 b806 	b.w	8014970 <__strtok_r>
 8014964:	200001d4 	.word	0x200001d4
 8014968:	0801a06f 	.word	0x0801a06f
 801496c:	0801a086 	.word	0x0801a086

08014970 <__strtok_r>:
 8014970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014972:	4604      	mov	r4, r0
 8014974:	b908      	cbnz	r0, 801497a <__strtok_r+0xa>
 8014976:	6814      	ldr	r4, [r2, #0]
 8014978:	b144      	cbz	r4, 801498c <__strtok_r+0x1c>
 801497a:	4620      	mov	r0, r4
 801497c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8014980:	460f      	mov	r7, r1
 8014982:	f817 6b01 	ldrb.w	r6, [r7], #1
 8014986:	b91e      	cbnz	r6, 8014990 <__strtok_r+0x20>
 8014988:	b965      	cbnz	r5, 80149a4 <__strtok_r+0x34>
 801498a:	6015      	str	r5, [r2, #0]
 801498c:	2000      	movs	r0, #0
 801498e:	e005      	b.n	801499c <__strtok_r+0x2c>
 8014990:	42b5      	cmp	r5, r6
 8014992:	d1f6      	bne.n	8014982 <__strtok_r+0x12>
 8014994:	2b00      	cmp	r3, #0
 8014996:	d1f0      	bne.n	801497a <__strtok_r+0xa>
 8014998:	6014      	str	r4, [r2, #0]
 801499a:	7003      	strb	r3, [r0, #0]
 801499c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801499e:	461c      	mov	r4, r3
 80149a0:	e00c      	b.n	80149bc <__strtok_r+0x4c>
 80149a2:	b91d      	cbnz	r5, 80149ac <__strtok_r+0x3c>
 80149a4:	4627      	mov	r7, r4
 80149a6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80149aa:	460e      	mov	r6, r1
 80149ac:	f816 5b01 	ldrb.w	r5, [r6], #1
 80149b0:	42ab      	cmp	r3, r5
 80149b2:	d1f6      	bne.n	80149a2 <__strtok_r+0x32>
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d0f2      	beq.n	801499e <__strtok_r+0x2e>
 80149b8:	2300      	movs	r3, #0
 80149ba:	703b      	strb	r3, [r7, #0]
 80149bc:	6014      	str	r4, [r2, #0]
 80149be:	e7ed      	b.n	801499c <__strtok_r+0x2c>

080149c0 <_localeconv_r>:
 80149c0:	4800      	ldr	r0, [pc, #0]	@ (80149c4 <_localeconv_r+0x4>)
 80149c2:	4770      	bx	lr
 80149c4:	20000158 	.word	0x20000158

080149c8 <_close_r>:
 80149c8:	b538      	push	{r3, r4, r5, lr}
 80149ca:	4d06      	ldr	r5, [pc, #24]	@ (80149e4 <_close_r+0x1c>)
 80149cc:	2300      	movs	r3, #0
 80149ce:	4604      	mov	r4, r0
 80149d0:	4608      	mov	r0, r1
 80149d2:	602b      	str	r3, [r5, #0]
 80149d4:	f7f2 f92e 	bl	8006c34 <_close>
 80149d8:	1c43      	adds	r3, r0, #1
 80149da:	d102      	bne.n	80149e2 <_close_r+0x1a>
 80149dc:	682b      	ldr	r3, [r5, #0]
 80149de:	b103      	cbz	r3, 80149e2 <_close_r+0x1a>
 80149e0:	6023      	str	r3, [r4, #0]
 80149e2:	bd38      	pop	{r3, r4, r5, pc}
 80149e4:	200007ac 	.word	0x200007ac

080149e8 <_reclaim_reent>:
 80149e8:	4b2d      	ldr	r3, [pc, #180]	@ (8014aa0 <_reclaim_reent+0xb8>)
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	4283      	cmp	r3, r0
 80149ee:	b570      	push	{r4, r5, r6, lr}
 80149f0:	4604      	mov	r4, r0
 80149f2:	d053      	beq.n	8014a9c <_reclaim_reent+0xb4>
 80149f4:	69c3      	ldr	r3, [r0, #28]
 80149f6:	b31b      	cbz	r3, 8014a40 <_reclaim_reent+0x58>
 80149f8:	68db      	ldr	r3, [r3, #12]
 80149fa:	b163      	cbz	r3, 8014a16 <_reclaim_reent+0x2e>
 80149fc:	2500      	movs	r5, #0
 80149fe:	69e3      	ldr	r3, [r4, #28]
 8014a00:	68db      	ldr	r3, [r3, #12]
 8014a02:	5959      	ldr	r1, [r3, r5]
 8014a04:	b9b1      	cbnz	r1, 8014a34 <_reclaim_reent+0x4c>
 8014a06:	3504      	adds	r5, #4
 8014a08:	2d80      	cmp	r5, #128	@ 0x80
 8014a0a:	d1f8      	bne.n	80149fe <_reclaim_reent+0x16>
 8014a0c:	69e3      	ldr	r3, [r4, #28]
 8014a0e:	4620      	mov	r0, r4
 8014a10:	68d9      	ldr	r1, [r3, #12]
 8014a12:	f000 ff29 	bl	8015868 <_free_r>
 8014a16:	69e3      	ldr	r3, [r4, #28]
 8014a18:	6819      	ldr	r1, [r3, #0]
 8014a1a:	b111      	cbz	r1, 8014a22 <_reclaim_reent+0x3a>
 8014a1c:	4620      	mov	r0, r4
 8014a1e:	f000 ff23 	bl	8015868 <_free_r>
 8014a22:	69e3      	ldr	r3, [r4, #28]
 8014a24:	689d      	ldr	r5, [r3, #8]
 8014a26:	b15d      	cbz	r5, 8014a40 <_reclaim_reent+0x58>
 8014a28:	4629      	mov	r1, r5
 8014a2a:	4620      	mov	r0, r4
 8014a2c:	682d      	ldr	r5, [r5, #0]
 8014a2e:	f000 ff1b 	bl	8015868 <_free_r>
 8014a32:	e7f8      	b.n	8014a26 <_reclaim_reent+0x3e>
 8014a34:	680e      	ldr	r6, [r1, #0]
 8014a36:	4620      	mov	r0, r4
 8014a38:	f000 ff16 	bl	8015868 <_free_r>
 8014a3c:	4631      	mov	r1, r6
 8014a3e:	e7e1      	b.n	8014a04 <_reclaim_reent+0x1c>
 8014a40:	6961      	ldr	r1, [r4, #20]
 8014a42:	b111      	cbz	r1, 8014a4a <_reclaim_reent+0x62>
 8014a44:	4620      	mov	r0, r4
 8014a46:	f000 ff0f 	bl	8015868 <_free_r>
 8014a4a:	69e1      	ldr	r1, [r4, #28]
 8014a4c:	b111      	cbz	r1, 8014a54 <_reclaim_reent+0x6c>
 8014a4e:	4620      	mov	r0, r4
 8014a50:	f000 ff0a 	bl	8015868 <_free_r>
 8014a54:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014a56:	b111      	cbz	r1, 8014a5e <_reclaim_reent+0x76>
 8014a58:	4620      	mov	r0, r4
 8014a5a:	f000 ff05 	bl	8015868 <_free_r>
 8014a5e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014a60:	b111      	cbz	r1, 8014a68 <_reclaim_reent+0x80>
 8014a62:	4620      	mov	r0, r4
 8014a64:	f000 ff00 	bl	8015868 <_free_r>
 8014a68:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8014a6a:	b111      	cbz	r1, 8014a72 <_reclaim_reent+0x8a>
 8014a6c:	4620      	mov	r0, r4
 8014a6e:	f000 fefb 	bl	8015868 <_free_r>
 8014a72:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8014a74:	b111      	cbz	r1, 8014a7c <_reclaim_reent+0x94>
 8014a76:	4620      	mov	r0, r4
 8014a78:	f000 fef6 	bl	8015868 <_free_r>
 8014a7c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8014a7e:	b111      	cbz	r1, 8014a86 <_reclaim_reent+0x9e>
 8014a80:	4620      	mov	r0, r4
 8014a82:	f000 fef1 	bl	8015868 <_free_r>
 8014a86:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014a88:	b111      	cbz	r1, 8014a90 <_reclaim_reent+0xa8>
 8014a8a:	4620      	mov	r0, r4
 8014a8c:	f000 feec 	bl	8015868 <_free_r>
 8014a90:	6a23      	ldr	r3, [r4, #32]
 8014a92:	b11b      	cbz	r3, 8014a9c <_reclaim_reent+0xb4>
 8014a94:	4620      	mov	r0, r4
 8014a96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014a9a:	4718      	bx	r3
 8014a9c:	bd70      	pop	{r4, r5, r6, pc}
 8014a9e:	bf00      	nop
 8014aa0:	200001d4 	.word	0x200001d4

08014aa4 <_lseek_r>:
 8014aa4:	b538      	push	{r3, r4, r5, lr}
 8014aa6:	4d07      	ldr	r5, [pc, #28]	@ (8014ac4 <_lseek_r+0x20>)
 8014aa8:	4604      	mov	r4, r0
 8014aaa:	4608      	mov	r0, r1
 8014aac:	4611      	mov	r1, r2
 8014aae:	2200      	movs	r2, #0
 8014ab0:	602a      	str	r2, [r5, #0]
 8014ab2:	461a      	mov	r2, r3
 8014ab4:	f7f2 f904 	bl	8006cc0 <_lseek>
 8014ab8:	1c43      	adds	r3, r0, #1
 8014aba:	d102      	bne.n	8014ac2 <_lseek_r+0x1e>
 8014abc:	682b      	ldr	r3, [r5, #0]
 8014abe:	b103      	cbz	r3, 8014ac2 <_lseek_r+0x1e>
 8014ac0:	6023      	str	r3, [r4, #0]
 8014ac2:	bd38      	pop	{r3, r4, r5, pc}
 8014ac4:	200007ac 	.word	0x200007ac

08014ac8 <_read_r>:
 8014ac8:	b538      	push	{r3, r4, r5, lr}
 8014aca:	4d07      	ldr	r5, [pc, #28]	@ (8014ae8 <_read_r+0x20>)
 8014acc:	4604      	mov	r4, r0
 8014ace:	4608      	mov	r0, r1
 8014ad0:	4611      	mov	r1, r2
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	602a      	str	r2, [r5, #0]
 8014ad6:	461a      	mov	r2, r3
 8014ad8:	f7f1 fff6 	bl	8006ac8 <_read>
 8014adc:	1c43      	adds	r3, r0, #1
 8014ade:	d102      	bne.n	8014ae6 <_read_r+0x1e>
 8014ae0:	682b      	ldr	r3, [r5, #0]
 8014ae2:	b103      	cbz	r3, 8014ae6 <_read_r+0x1e>
 8014ae4:	6023      	str	r3, [r4, #0]
 8014ae6:	bd38      	pop	{r3, r4, r5, pc}
 8014ae8:	200007ac 	.word	0x200007ac

08014aec <_write_r>:
 8014aec:	b538      	push	{r3, r4, r5, lr}
 8014aee:	4d07      	ldr	r5, [pc, #28]	@ (8014b0c <_write_r+0x20>)
 8014af0:	4604      	mov	r4, r0
 8014af2:	4608      	mov	r0, r1
 8014af4:	4611      	mov	r1, r2
 8014af6:	2200      	movs	r2, #0
 8014af8:	602a      	str	r2, [r5, #0]
 8014afa:	461a      	mov	r2, r3
 8014afc:	f7f2 f82a 	bl	8006b54 <_write>
 8014b00:	1c43      	adds	r3, r0, #1
 8014b02:	d102      	bne.n	8014b0a <_write_r+0x1e>
 8014b04:	682b      	ldr	r3, [r5, #0]
 8014b06:	b103      	cbz	r3, 8014b0a <_write_r+0x1e>
 8014b08:	6023      	str	r3, [r4, #0]
 8014b0a:	bd38      	pop	{r3, r4, r5, pc}
 8014b0c:	200007ac 	.word	0x200007ac

08014b10 <__errno>:
 8014b10:	4b01      	ldr	r3, [pc, #4]	@ (8014b18 <__errno+0x8>)
 8014b12:	6818      	ldr	r0, [r3, #0]
 8014b14:	4770      	bx	lr
 8014b16:	bf00      	nop
 8014b18:	200001d4 	.word	0x200001d4

08014b1c <__libc_init_array>:
 8014b1c:	b570      	push	{r4, r5, r6, lr}
 8014b1e:	4d0d      	ldr	r5, [pc, #52]	@ (8014b54 <__libc_init_array+0x38>)
 8014b20:	4c0d      	ldr	r4, [pc, #52]	@ (8014b58 <__libc_init_array+0x3c>)
 8014b22:	1b64      	subs	r4, r4, r5
 8014b24:	10a4      	asrs	r4, r4, #2
 8014b26:	2600      	movs	r6, #0
 8014b28:	42a6      	cmp	r6, r4
 8014b2a:	d109      	bne.n	8014b40 <__libc_init_array+0x24>
 8014b2c:	4d0b      	ldr	r5, [pc, #44]	@ (8014b5c <__libc_init_array+0x40>)
 8014b2e:	4c0c      	ldr	r4, [pc, #48]	@ (8014b60 <__libc_init_array+0x44>)
 8014b30:	f003 fb24 	bl	801817c <_init>
 8014b34:	1b64      	subs	r4, r4, r5
 8014b36:	10a4      	asrs	r4, r4, #2
 8014b38:	2600      	movs	r6, #0
 8014b3a:	42a6      	cmp	r6, r4
 8014b3c:	d105      	bne.n	8014b4a <__libc_init_array+0x2e>
 8014b3e:	bd70      	pop	{r4, r5, r6, pc}
 8014b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8014b44:	4798      	blx	r3
 8014b46:	3601      	adds	r6, #1
 8014b48:	e7ee      	b.n	8014b28 <__libc_init_array+0xc>
 8014b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8014b4e:	4798      	blx	r3
 8014b50:	3601      	adds	r6, #1
 8014b52:	e7f2      	b.n	8014b3a <__libc_init_array+0x1e>
 8014b54:	0801a4c0 	.word	0x0801a4c0
 8014b58:	0801a4c0 	.word	0x0801a4c0
 8014b5c:	0801a4c0 	.word	0x0801a4c0
 8014b60:	0801a4c8 	.word	0x0801a4c8

08014b64 <__retarget_lock_init_recursive>:
 8014b64:	4770      	bx	lr

08014b66 <__retarget_lock_close_recursive>:
 8014b66:	4770      	bx	lr

08014b68 <__retarget_lock_acquire_recursive>:
 8014b68:	4770      	bx	lr

08014b6a <__retarget_lock_release_recursive>:
 8014b6a:	4770      	bx	lr

08014b6c <memcpy>:
 8014b6c:	440a      	add	r2, r1
 8014b6e:	4291      	cmp	r1, r2
 8014b70:	f100 33ff 	add.w	r3, r0, #4294967295
 8014b74:	d100      	bne.n	8014b78 <memcpy+0xc>
 8014b76:	4770      	bx	lr
 8014b78:	b510      	push	{r4, lr}
 8014b7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014b7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014b82:	4291      	cmp	r1, r2
 8014b84:	d1f9      	bne.n	8014b7a <memcpy+0xe>
 8014b86:	bd10      	pop	{r4, pc}

08014b88 <nan>:
 8014b88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014b90 <nan+0x8>
 8014b8c:	4770      	bx	lr
 8014b8e:	bf00      	nop
 8014b90:	00000000 	.word	0x00000000
 8014b94:	7ff80000 	.word	0x7ff80000

08014b98 <nanf>:
 8014b98:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8014ba0 <nanf+0x8>
 8014b9c:	4770      	bx	lr
 8014b9e:	bf00      	nop
 8014ba0:	7fc00000 	.word	0x7fc00000

08014ba4 <abort>:
 8014ba4:	b508      	push	{r3, lr}
 8014ba6:	2006      	movs	r0, #6
 8014ba8:	f002 fac2 	bl	8017130 <raise>
 8014bac:	2001      	movs	r0, #1
 8014bae:	f7f1 ff7f 	bl	8006ab0 <_exit>

08014bb2 <quorem>:
 8014bb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bb6:	6903      	ldr	r3, [r0, #16]
 8014bb8:	690c      	ldr	r4, [r1, #16]
 8014bba:	42a3      	cmp	r3, r4
 8014bbc:	4607      	mov	r7, r0
 8014bbe:	db7e      	blt.n	8014cbe <quorem+0x10c>
 8014bc0:	3c01      	subs	r4, #1
 8014bc2:	f101 0814 	add.w	r8, r1, #20
 8014bc6:	00a3      	lsls	r3, r4, #2
 8014bc8:	f100 0514 	add.w	r5, r0, #20
 8014bcc:	9300      	str	r3, [sp, #0]
 8014bce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014bd2:	9301      	str	r3, [sp, #4]
 8014bd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014bd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014bdc:	3301      	adds	r3, #1
 8014bde:	429a      	cmp	r2, r3
 8014be0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014be4:	fbb2 f6f3 	udiv	r6, r2, r3
 8014be8:	d32e      	bcc.n	8014c48 <quorem+0x96>
 8014bea:	f04f 0a00 	mov.w	sl, #0
 8014bee:	46c4      	mov	ip, r8
 8014bf0:	46ae      	mov	lr, r5
 8014bf2:	46d3      	mov	fp, sl
 8014bf4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014bf8:	b298      	uxth	r0, r3
 8014bfa:	fb06 a000 	mla	r0, r6, r0, sl
 8014bfe:	0c02      	lsrs	r2, r0, #16
 8014c00:	0c1b      	lsrs	r3, r3, #16
 8014c02:	fb06 2303 	mla	r3, r6, r3, r2
 8014c06:	f8de 2000 	ldr.w	r2, [lr]
 8014c0a:	b280      	uxth	r0, r0
 8014c0c:	b292      	uxth	r2, r2
 8014c0e:	1a12      	subs	r2, r2, r0
 8014c10:	445a      	add	r2, fp
 8014c12:	f8de 0000 	ldr.w	r0, [lr]
 8014c16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014c1a:	b29b      	uxth	r3, r3
 8014c1c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014c20:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014c24:	b292      	uxth	r2, r2
 8014c26:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014c2a:	45e1      	cmp	r9, ip
 8014c2c:	f84e 2b04 	str.w	r2, [lr], #4
 8014c30:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014c34:	d2de      	bcs.n	8014bf4 <quorem+0x42>
 8014c36:	9b00      	ldr	r3, [sp, #0]
 8014c38:	58eb      	ldr	r3, [r5, r3]
 8014c3a:	b92b      	cbnz	r3, 8014c48 <quorem+0x96>
 8014c3c:	9b01      	ldr	r3, [sp, #4]
 8014c3e:	3b04      	subs	r3, #4
 8014c40:	429d      	cmp	r5, r3
 8014c42:	461a      	mov	r2, r3
 8014c44:	d32f      	bcc.n	8014ca6 <quorem+0xf4>
 8014c46:	613c      	str	r4, [r7, #16]
 8014c48:	4638      	mov	r0, r7
 8014c4a:	f001 fc93 	bl	8016574 <__mcmp>
 8014c4e:	2800      	cmp	r0, #0
 8014c50:	db25      	blt.n	8014c9e <quorem+0xec>
 8014c52:	4629      	mov	r1, r5
 8014c54:	2000      	movs	r0, #0
 8014c56:	f858 2b04 	ldr.w	r2, [r8], #4
 8014c5a:	f8d1 c000 	ldr.w	ip, [r1]
 8014c5e:	fa1f fe82 	uxth.w	lr, r2
 8014c62:	fa1f f38c 	uxth.w	r3, ip
 8014c66:	eba3 030e 	sub.w	r3, r3, lr
 8014c6a:	4403      	add	r3, r0
 8014c6c:	0c12      	lsrs	r2, r2, #16
 8014c6e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014c72:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014c76:	b29b      	uxth	r3, r3
 8014c78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014c7c:	45c1      	cmp	r9, r8
 8014c7e:	f841 3b04 	str.w	r3, [r1], #4
 8014c82:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014c86:	d2e6      	bcs.n	8014c56 <quorem+0xa4>
 8014c88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014c8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014c90:	b922      	cbnz	r2, 8014c9c <quorem+0xea>
 8014c92:	3b04      	subs	r3, #4
 8014c94:	429d      	cmp	r5, r3
 8014c96:	461a      	mov	r2, r3
 8014c98:	d30b      	bcc.n	8014cb2 <quorem+0x100>
 8014c9a:	613c      	str	r4, [r7, #16]
 8014c9c:	3601      	adds	r6, #1
 8014c9e:	4630      	mov	r0, r6
 8014ca0:	b003      	add	sp, #12
 8014ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ca6:	6812      	ldr	r2, [r2, #0]
 8014ca8:	3b04      	subs	r3, #4
 8014caa:	2a00      	cmp	r2, #0
 8014cac:	d1cb      	bne.n	8014c46 <quorem+0x94>
 8014cae:	3c01      	subs	r4, #1
 8014cb0:	e7c6      	b.n	8014c40 <quorem+0x8e>
 8014cb2:	6812      	ldr	r2, [r2, #0]
 8014cb4:	3b04      	subs	r3, #4
 8014cb6:	2a00      	cmp	r2, #0
 8014cb8:	d1ef      	bne.n	8014c9a <quorem+0xe8>
 8014cba:	3c01      	subs	r4, #1
 8014cbc:	e7ea      	b.n	8014c94 <quorem+0xe2>
 8014cbe:	2000      	movs	r0, #0
 8014cc0:	e7ee      	b.n	8014ca0 <quorem+0xee>
 8014cc2:	0000      	movs	r0, r0
 8014cc4:	0000      	movs	r0, r0
	...

08014cc8 <_dtoa_r>:
 8014cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ccc:	69c7      	ldr	r7, [r0, #28]
 8014cce:	b097      	sub	sp, #92	@ 0x5c
 8014cd0:	ed8d 0b04 	vstr	d0, [sp, #16]
 8014cd4:	ec55 4b10 	vmov	r4, r5, d0
 8014cd8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8014cda:	9107      	str	r1, [sp, #28]
 8014cdc:	4681      	mov	r9, r0
 8014cde:	920c      	str	r2, [sp, #48]	@ 0x30
 8014ce0:	9311      	str	r3, [sp, #68]	@ 0x44
 8014ce2:	b97f      	cbnz	r7, 8014d04 <_dtoa_r+0x3c>
 8014ce4:	2010      	movs	r0, #16
 8014ce6:	f7fd fadd 	bl	80122a4 <malloc>
 8014cea:	4602      	mov	r2, r0
 8014cec:	f8c9 001c 	str.w	r0, [r9, #28]
 8014cf0:	b920      	cbnz	r0, 8014cfc <_dtoa_r+0x34>
 8014cf2:	4ba9      	ldr	r3, [pc, #676]	@ (8014f98 <_dtoa_r+0x2d0>)
 8014cf4:	21ef      	movs	r1, #239	@ 0xef
 8014cf6:	48a9      	ldr	r0, [pc, #676]	@ (8014f9c <_dtoa_r+0x2d4>)
 8014cf8:	f7fd fa4a 	bl	8012190 <__assert_func>
 8014cfc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014d00:	6007      	str	r7, [r0, #0]
 8014d02:	60c7      	str	r7, [r0, #12]
 8014d04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014d08:	6819      	ldr	r1, [r3, #0]
 8014d0a:	b159      	cbz	r1, 8014d24 <_dtoa_r+0x5c>
 8014d0c:	685a      	ldr	r2, [r3, #4]
 8014d0e:	604a      	str	r2, [r1, #4]
 8014d10:	2301      	movs	r3, #1
 8014d12:	4093      	lsls	r3, r2
 8014d14:	608b      	str	r3, [r1, #8]
 8014d16:	4648      	mov	r0, r9
 8014d18:	f001 f9b0 	bl	801607c <_Bfree>
 8014d1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014d20:	2200      	movs	r2, #0
 8014d22:	601a      	str	r2, [r3, #0]
 8014d24:	1e2b      	subs	r3, r5, #0
 8014d26:	bfb9      	ittee	lt
 8014d28:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014d2c:	9305      	strlt	r3, [sp, #20]
 8014d2e:	2300      	movge	r3, #0
 8014d30:	6033      	strge	r3, [r6, #0]
 8014d32:	9f05      	ldr	r7, [sp, #20]
 8014d34:	4b9a      	ldr	r3, [pc, #616]	@ (8014fa0 <_dtoa_r+0x2d8>)
 8014d36:	bfbc      	itt	lt
 8014d38:	2201      	movlt	r2, #1
 8014d3a:	6032      	strlt	r2, [r6, #0]
 8014d3c:	43bb      	bics	r3, r7
 8014d3e:	d112      	bne.n	8014d66 <_dtoa_r+0x9e>
 8014d40:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014d42:	f242 730f 	movw	r3, #9999	@ 0x270f
 8014d46:	6013      	str	r3, [r2, #0]
 8014d48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014d4c:	4323      	orrs	r3, r4
 8014d4e:	f000 855a 	beq.w	8015806 <_dtoa_r+0xb3e>
 8014d52:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014d54:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8014fb4 <_dtoa_r+0x2ec>
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	f000 855c 	beq.w	8015816 <_dtoa_r+0xb4e>
 8014d5e:	f10a 0303 	add.w	r3, sl, #3
 8014d62:	f000 bd56 	b.w	8015812 <_dtoa_r+0xb4a>
 8014d66:	ed9d 7b04 	vldr	d7, [sp, #16]
 8014d6a:	2200      	movs	r2, #0
 8014d6c:	ec51 0b17 	vmov	r0, r1, d7
 8014d70:	2300      	movs	r3, #0
 8014d72:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8014d76:	f7eb fed7 	bl	8000b28 <__aeabi_dcmpeq>
 8014d7a:	4680      	mov	r8, r0
 8014d7c:	b158      	cbz	r0, 8014d96 <_dtoa_r+0xce>
 8014d7e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014d80:	2301      	movs	r3, #1
 8014d82:	6013      	str	r3, [r2, #0]
 8014d84:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014d86:	b113      	cbz	r3, 8014d8e <_dtoa_r+0xc6>
 8014d88:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8014d8a:	4b86      	ldr	r3, [pc, #536]	@ (8014fa4 <_dtoa_r+0x2dc>)
 8014d8c:	6013      	str	r3, [r2, #0]
 8014d8e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8014fb8 <_dtoa_r+0x2f0>
 8014d92:	f000 bd40 	b.w	8015816 <_dtoa_r+0xb4e>
 8014d96:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8014d9a:	aa14      	add	r2, sp, #80	@ 0x50
 8014d9c:	a915      	add	r1, sp, #84	@ 0x54
 8014d9e:	4648      	mov	r0, r9
 8014da0:	f001 fd08 	bl	80167b4 <__d2b>
 8014da4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8014da8:	9002      	str	r0, [sp, #8]
 8014daa:	2e00      	cmp	r6, #0
 8014dac:	d078      	beq.n	8014ea0 <_dtoa_r+0x1d8>
 8014dae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014db0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8014db4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014db8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8014dbc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8014dc0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8014dc4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8014dc8:	4619      	mov	r1, r3
 8014dca:	2200      	movs	r2, #0
 8014dcc:	4b76      	ldr	r3, [pc, #472]	@ (8014fa8 <_dtoa_r+0x2e0>)
 8014dce:	f7eb fa8b 	bl	80002e8 <__aeabi_dsub>
 8014dd2:	a36b      	add	r3, pc, #428	@ (adr r3, 8014f80 <_dtoa_r+0x2b8>)
 8014dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dd8:	f7eb fc3e 	bl	8000658 <__aeabi_dmul>
 8014ddc:	a36a      	add	r3, pc, #424	@ (adr r3, 8014f88 <_dtoa_r+0x2c0>)
 8014dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014de2:	f7eb fa83 	bl	80002ec <__adddf3>
 8014de6:	4604      	mov	r4, r0
 8014de8:	4630      	mov	r0, r6
 8014dea:	460d      	mov	r5, r1
 8014dec:	f7eb fbca 	bl	8000584 <__aeabi_i2d>
 8014df0:	a367      	add	r3, pc, #412	@ (adr r3, 8014f90 <_dtoa_r+0x2c8>)
 8014df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014df6:	f7eb fc2f 	bl	8000658 <__aeabi_dmul>
 8014dfa:	4602      	mov	r2, r0
 8014dfc:	460b      	mov	r3, r1
 8014dfe:	4620      	mov	r0, r4
 8014e00:	4629      	mov	r1, r5
 8014e02:	f7eb fa73 	bl	80002ec <__adddf3>
 8014e06:	4604      	mov	r4, r0
 8014e08:	460d      	mov	r5, r1
 8014e0a:	f7eb fed5 	bl	8000bb8 <__aeabi_d2iz>
 8014e0e:	2200      	movs	r2, #0
 8014e10:	4607      	mov	r7, r0
 8014e12:	2300      	movs	r3, #0
 8014e14:	4620      	mov	r0, r4
 8014e16:	4629      	mov	r1, r5
 8014e18:	f7eb fe90 	bl	8000b3c <__aeabi_dcmplt>
 8014e1c:	b140      	cbz	r0, 8014e30 <_dtoa_r+0x168>
 8014e1e:	4638      	mov	r0, r7
 8014e20:	f7eb fbb0 	bl	8000584 <__aeabi_i2d>
 8014e24:	4622      	mov	r2, r4
 8014e26:	462b      	mov	r3, r5
 8014e28:	f7eb fe7e 	bl	8000b28 <__aeabi_dcmpeq>
 8014e2c:	b900      	cbnz	r0, 8014e30 <_dtoa_r+0x168>
 8014e2e:	3f01      	subs	r7, #1
 8014e30:	2f16      	cmp	r7, #22
 8014e32:	d852      	bhi.n	8014eda <_dtoa_r+0x212>
 8014e34:	4b5d      	ldr	r3, [pc, #372]	@ (8014fac <_dtoa_r+0x2e4>)
 8014e36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8014e42:	f7eb fe7b 	bl	8000b3c <__aeabi_dcmplt>
 8014e46:	2800      	cmp	r0, #0
 8014e48:	d049      	beq.n	8014ede <_dtoa_r+0x216>
 8014e4a:	3f01      	subs	r7, #1
 8014e4c:	2300      	movs	r3, #0
 8014e4e:	9310      	str	r3, [sp, #64]	@ 0x40
 8014e50:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8014e52:	1b9b      	subs	r3, r3, r6
 8014e54:	1e5a      	subs	r2, r3, #1
 8014e56:	bf45      	ittet	mi
 8014e58:	f1c3 0301 	rsbmi	r3, r3, #1
 8014e5c:	9300      	strmi	r3, [sp, #0]
 8014e5e:	2300      	movpl	r3, #0
 8014e60:	2300      	movmi	r3, #0
 8014e62:	9206      	str	r2, [sp, #24]
 8014e64:	bf54      	ite	pl
 8014e66:	9300      	strpl	r3, [sp, #0]
 8014e68:	9306      	strmi	r3, [sp, #24]
 8014e6a:	2f00      	cmp	r7, #0
 8014e6c:	db39      	blt.n	8014ee2 <_dtoa_r+0x21a>
 8014e6e:	9b06      	ldr	r3, [sp, #24]
 8014e70:	970d      	str	r7, [sp, #52]	@ 0x34
 8014e72:	443b      	add	r3, r7
 8014e74:	9306      	str	r3, [sp, #24]
 8014e76:	2300      	movs	r3, #0
 8014e78:	9308      	str	r3, [sp, #32]
 8014e7a:	9b07      	ldr	r3, [sp, #28]
 8014e7c:	2b09      	cmp	r3, #9
 8014e7e:	d863      	bhi.n	8014f48 <_dtoa_r+0x280>
 8014e80:	2b05      	cmp	r3, #5
 8014e82:	bfc4      	itt	gt
 8014e84:	3b04      	subgt	r3, #4
 8014e86:	9307      	strgt	r3, [sp, #28]
 8014e88:	9b07      	ldr	r3, [sp, #28]
 8014e8a:	f1a3 0302 	sub.w	r3, r3, #2
 8014e8e:	bfcc      	ite	gt
 8014e90:	2400      	movgt	r4, #0
 8014e92:	2401      	movle	r4, #1
 8014e94:	2b03      	cmp	r3, #3
 8014e96:	d863      	bhi.n	8014f60 <_dtoa_r+0x298>
 8014e98:	e8df f003 	tbb	[pc, r3]
 8014e9c:	2b375452 	.word	0x2b375452
 8014ea0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8014ea4:	441e      	add	r6, r3
 8014ea6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8014eaa:	2b20      	cmp	r3, #32
 8014eac:	bfc1      	itttt	gt
 8014eae:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8014eb2:	409f      	lslgt	r7, r3
 8014eb4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8014eb8:	fa24 f303 	lsrgt.w	r3, r4, r3
 8014ebc:	bfd6      	itet	le
 8014ebe:	f1c3 0320 	rsble	r3, r3, #32
 8014ec2:	ea47 0003 	orrgt.w	r0, r7, r3
 8014ec6:	fa04 f003 	lslle.w	r0, r4, r3
 8014eca:	f7eb fb4b 	bl	8000564 <__aeabi_ui2d>
 8014ece:	2201      	movs	r2, #1
 8014ed0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8014ed4:	3e01      	subs	r6, #1
 8014ed6:	9212      	str	r2, [sp, #72]	@ 0x48
 8014ed8:	e776      	b.n	8014dc8 <_dtoa_r+0x100>
 8014eda:	2301      	movs	r3, #1
 8014edc:	e7b7      	b.n	8014e4e <_dtoa_r+0x186>
 8014ede:	9010      	str	r0, [sp, #64]	@ 0x40
 8014ee0:	e7b6      	b.n	8014e50 <_dtoa_r+0x188>
 8014ee2:	9b00      	ldr	r3, [sp, #0]
 8014ee4:	1bdb      	subs	r3, r3, r7
 8014ee6:	9300      	str	r3, [sp, #0]
 8014ee8:	427b      	negs	r3, r7
 8014eea:	9308      	str	r3, [sp, #32]
 8014eec:	2300      	movs	r3, #0
 8014eee:	930d      	str	r3, [sp, #52]	@ 0x34
 8014ef0:	e7c3      	b.n	8014e7a <_dtoa_r+0x1b2>
 8014ef2:	2301      	movs	r3, #1
 8014ef4:	9309      	str	r3, [sp, #36]	@ 0x24
 8014ef6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014ef8:	eb07 0b03 	add.w	fp, r7, r3
 8014efc:	f10b 0301 	add.w	r3, fp, #1
 8014f00:	2b01      	cmp	r3, #1
 8014f02:	9303      	str	r3, [sp, #12]
 8014f04:	bfb8      	it	lt
 8014f06:	2301      	movlt	r3, #1
 8014f08:	e006      	b.n	8014f18 <_dtoa_r+0x250>
 8014f0a:	2301      	movs	r3, #1
 8014f0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8014f0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	dd28      	ble.n	8014f66 <_dtoa_r+0x29e>
 8014f14:	469b      	mov	fp, r3
 8014f16:	9303      	str	r3, [sp, #12]
 8014f18:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8014f1c:	2100      	movs	r1, #0
 8014f1e:	2204      	movs	r2, #4
 8014f20:	f102 0514 	add.w	r5, r2, #20
 8014f24:	429d      	cmp	r5, r3
 8014f26:	d926      	bls.n	8014f76 <_dtoa_r+0x2ae>
 8014f28:	6041      	str	r1, [r0, #4]
 8014f2a:	4648      	mov	r0, r9
 8014f2c:	f001 f866 	bl	8015ffc <_Balloc>
 8014f30:	4682      	mov	sl, r0
 8014f32:	2800      	cmp	r0, #0
 8014f34:	d142      	bne.n	8014fbc <_dtoa_r+0x2f4>
 8014f36:	4b1e      	ldr	r3, [pc, #120]	@ (8014fb0 <_dtoa_r+0x2e8>)
 8014f38:	4602      	mov	r2, r0
 8014f3a:	f240 11af 	movw	r1, #431	@ 0x1af
 8014f3e:	e6da      	b.n	8014cf6 <_dtoa_r+0x2e>
 8014f40:	2300      	movs	r3, #0
 8014f42:	e7e3      	b.n	8014f0c <_dtoa_r+0x244>
 8014f44:	2300      	movs	r3, #0
 8014f46:	e7d5      	b.n	8014ef4 <_dtoa_r+0x22c>
 8014f48:	2401      	movs	r4, #1
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	9307      	str	r3, [sp, #28]
 8014f4e:	9409      	str	r4, [sp, #36]	@ 0x24
 8014f50:	f04f 3bff 	mov.w	fp, #4294967295
 8014f54:	2200      	movs	r2, #0
 8014f56:	f8cd b00c 	str.w	fp, [sp, #12]
 8014f5a:	2312      	movs	r3, #18
 8014f5c:	920c      	str	r2, [sp, #48]	@ 0x30
 8014f5e:	e7db      	b.n	8014f18 <_dtoa_r+0x250>
 8014f60:	2301      	movs	r3, #1
 8014f62:	9309      	str	r3, [sp, #36]	@ 0x24
 8014f64:	e7f4      	b.n	8014f50 <_dtoa_r+0x288>
 8014f66:	f04f 0b01 	mov.w	fp, #1
 8014f6a:	f8cd b00c 	str.w	fp, [sp, #12]
 8014f6e:	465b      	mov	r3, fp
 8014f70:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8014f74:	e7d0      	b.n	8014f18 <_dtoa_r+0x250>
 8014f76:	3101      	adds	r1, #1
 8014f78:	0052      	lsls	r2, r2, #1
 8014f7a:	e7d1      	b.n	8014f20 <_dtoa_r+0x258>
 8014f7c:	f3af 8000 	nop.w
 8014f80:	636f4361 	.word	0x636f4361
 8014f84:	3fd287a7 	.word	0x3fd287a7
 8014f88:	8b60c8b3 	.word	0x8b60c8b3
 8014f8c:	3fc68a28 	.word	0x3fc68a28
 8014f90:	509f79fb 	.word	0x509f79fb
 8014f94:	3fd34413 	.word	0x3fd34413
 8014f98:	0801a06f 	.word	0x0801a06f
 8014f9c:	0801a0f5 	.word	0x0801a0f5
 8014fa0:	7ff00000 	.word	0x7ff00000
 8014fa4:	0801a047 	.word	0x0801a047
 8014fa8:	3ff80000 	.word	0x3ff80000
 8014fac:	0801a3b0 	.word	0x0801a3b0
 8014fb0:	0801a14d 	.word	0x0801a14d
 8014fb4:	0801a0f1 	.word	0x0801a0f1
 8014fb8:	0801a046 	.word	0x0801a046
 8014fbc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014fc0:	6018      	str	r0, [r3, #0]
 8014fc2:	9b03      	ldr	r3, [sp, #12]
 8014fc4:	2b0e      	cmp	r3, #14
 8014fc6:	f200 80a1 	bhi.w	801510c <_dtoa_r+0x444>
 8014fca:	2c00      	cmp	r4, #0
 8014fcc:	f000 809e 	beq.w	801510c <_dtoa_r+0x444>
 8014fd0:	2f00      	cmp	r7, #0
 8014fd2:	dd33      	ble.n	801503c <_dtoa_r+0x374>
 8014fd4:	4b9c      	ldr	r3, [pc, #624]	@ (8015248 <_dtoa_r+0x580>)
 8014fd6:	f007 020f 	and.w	r2, r7, #15
 8014fda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014fde:	ed93 7b00 	vldr	d7, [r3]
 8014fe2:	05f8      	lsls	r0, r7, #23
 8014fe4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8014fe8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8014fec:	d516      	bpl.n	801501c <_dtoa_r+0x354>
 8014fee:	4b97      	ldr	r3, [pc, #604]	@ (801524c <_dtoa_r+0x584>)
 8014ff0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8014ff4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014ff8:	f7eb fc58 	bl	80008ac <__aeabi_ddiv>
 8014ffc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015000:	f004 040f 	and.w	r4, r4, #15
 8015004:	2603      	movs	r6, #3
 8015006:	4d91      	ldr	r5, [pc, #580]	@ (801524c <_dtoa_r+0x584>)
 8015008:	b954      	cbnz	r4, 8015020 <_dtoa_r+0x358>
 801500a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801500e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015012:	f7eb fc4b 	bl	80008ac <__aeabi_ddiv>
 8015016:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801501a:	e028      	b.n	801506e <_dtoa_r+0x3a6>
 801501c:	2602      	movs	r6, #2
 801501e:	e7f2      	b.n	8015006 <_dtoa_r+0x33e>
 8015020:	07e1      	lsls	r1, r4, #31
 8015022:	d508      	bpl.n	8015036 <_dtoa_r+0x36e>
 8015024:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8015028:	e9d5 2300 	ldrd	r2, r3, [r5]
 801502c:	f7eb fb14 	bl	8000658 <__aeabi_dmul>
 8015030:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8015034:	3601      	adds	r6, #1
 8015036:	1064      	asrs	r4, r4, #1
 8015038:	3508      	adds	r5, #8
 801503a:	e7e5      	b.n	8015008 <_dtoa_r+0x340>
 801503c:	f000 80af 	beq.w	801519e <_dtoa_r+0x4d6>
 8015040:	427c      	negs	r4, r7
 8015042:	4b81      	ldr	r3, [pc, #516]	@ (8015248 <_dtoa_r+0x580>)
 8015044:	4d81      	ldr	r5, [pc, #516]	@ (801524c <_dtoa_r+0x584>)
 8015046:	f004 020f 	and.w	r2, r4, #15
 801504a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801504e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015052:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8015056:	f7eb faff 	bl	8000658 <__aeabi_dmul>
 801505a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801505e:	1124      	asrs	r4, r4, #4
 8015060:	2300      	movs	r3, #0
 8015062:	2602      	movs	r6, #2
 8015064:	2c00      	cmp	r4, #0
 8015066:	f040 808f 	bne.w	8015188 <_dtoa_r+0x4c0>
 801506a:	2b00      	cmp	r3, #0
 801506c:	d1d3      	bne.n	8015016 <_dtoa_r+0x34e>
 801506e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015070:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8015074:	2b00      	cmp	r3, #0
 8015076:	f000 8094 	beq.w	80151a2 <_dtoa_r+0x4da>
 801507a:	4b75      	ldr	r3, [pc, #468]	@ (8015250 <_dtoa_r+0x588>)
 801507c:	2200      	movs	r2, #0
 801507e:	4620      	mov	r0, r4
 8015080:	4629      	mov	r1, r5
 8015082:	f7eb fd5b 	bl	8000b3c <__aeabi_dcmplt>
 8015086:	2800      	cmp	r0, #0
 8015088:	f000 808b 	beq.w	80151a2 <_dtoa_r+0x4da>
 801508c:	9b03      	ldr	r3, [sp, #12]
 801508e:	2b00      	cmp	r3, #0
 8015090:	f000 8087 	beq.w	80151a2 <_dtoa_r+0x4da>
 8015094:	f1bb 0f00 	cmp.w	fp, #0
 8015098:	dd34      	ble.n	8015104 <_dtoa_r+0x43c>
 801509a:	4620      	mov	r0, r4
 801509c:	4b6d      	ldr	r3, [pc, #436]	@ (8015254 <_dtoa_r+0x58c>)
 801509e:	2200      	movs	r2, #0
 80150a0:	4629      	mov	r1, r5
 80150a2:	f7eb fad9 	bl	8000658 <__aeabi_dmul>
 80150a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80150aa:	f107 38ff 	add.w	r8, r7, #4294967295
 80150ae:	3601      	adds	r6, #1
 80150b0:	465c      	mov	r4, fp
 80150b2:	4630      	mov	r0, r6
 80150b4:	f7eb fa66 	bl	8000584 <__aeabi_i2d>
 80150b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80150bc:	f7eb facc 	bl	8000658 <__aeabi_dmul>
 80150c0:	4b65      	ldr	r3, [pc, #404]	@ (8015258 <_dtoa_r+0x590>)
 80150c2:	2200      	movs	r2, #0
 80150c4:	f7eb f912 	bl	80002ec <__adddf3>
 80150c8:	4605      	mov	r5, r0
 80150ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80150ce:	2c00      	cmp	r4, #0
 80150d0:	d16a      	bne.n	80151a8 <_dtoa_r+0x4e0>
 80150d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80150d6:	4b61      	ldr	r3, [pc, #388]	@ (801525c <_dtoa_r+0x594>)
 80150d8:	2200      	movs	r2, #0
 80150da:	f7eb f905 	bl	80002e8 <__aeabi_dsub>
 80150de:	4602      	mov	r2, r0
 80150e0:	460b      	mov	r3, r1
 80150e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80150e6:	462a      	mov	r2, r5
 80150e8:	4633      	mov	r3, r6
 80150ea:	f7eb fd45 	bl	8000b78 <__aeabi_dcmpgt>
 80150ee:	2800      	cmp	r0, #0
 80150f0:	f040 8298 	bne.w	8015624 <_dtoa_r+0x95c>
 80150f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80150f8:	462a      	mov	r2, r5
 80150fa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80150fe:	f7eb fd1d 	bl	8000b3c <__aeabi_dcmplt>
 8015102:	bb38      	cbnz	r0, 8015154 <_dtoa_r+0x48c>
 8015104:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8015108:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801510c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801510e:	2b00      	cmp	r3, #0
 8015110:	f2c0 8157 	blt.w	80153c2 <_dtoa_r+0x6fa>
 8015114:	2f0e      	cmp	r7, #14
 8015116:	f300 8154 	bgt.w	80153c2 <_dtoa_r+0x6fa>
 801511a:	4b4b      	ldr	r3, [pc, #300]	@ (8015248 <_dtoa_r+0x580>)
 801511c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015120:	ed93 7b00 	vldr	d7, [r3]
 8015124:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015126:	2b00      	cmp	r3, #0
 8015128:	ed8d 7b00 	vstr	d7, [sp]
 801512c:	f280 80e5 	bge.w	80152fa <_dtoa_r+0x632>
 8015130:	9b03      	ldr	r3, [sp, #12]
 8015132:	2b00      	cmp	r3, #0
 8015134:	f300 80e1 	bgt.w	80152fa <_dtoa_r+0x632>
 8015138:	d10c      	bne.n	8015154 <_dtoa_r+0x48c>
 801513a:	4b48      	ldr	r3, [pc, #288]	@ (801525c <_dtoa_r+0x594>)
 801513c:	2200      	movs	r2, #0
 801513e:	ec51 0b17 	vmov	r0, r1, d7
 8015142:	f7eb fa89 	bl	8000658 <__aeabi_dmul>
 8015146:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801514a:	f7eb fd0b 	bl	8000b64 <__aeabi_dcmpge>
 801514e:	2800      	cmp	r0, #0
 8015150:	f000 8266 	beq.w	8015620 <_dtoa_r+0x958>
 8015154:	2400      	movs	r4, #0
 8015156:	4625      	mov	r5, r4
 8015158:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801515a:	4656      	mov	r6, sl
 801515c:	ea6f 0803 	mvn.w	r8, r3
 8015160:	2700      	movs	r7, #0
 8015162:	4621      	mov	r1, r4
 8015164:	4648      	mov	r0, r9
 8015166:	f000 ff89 	bl	801607c <_Bfree>
 801516a:	2d00      	cmp	r5, #0
 801516c:	f000 80bd 	beq.w	80152ea <_dtoa_r+0x622>
 8015170:	b12f      	cbz	r7, 801517e <_dtoa_r+0x4b6>
 8015172:	42af      	cmp	r7, r5
 8015174:	d003      	beq.n	801517e <_dtoa_r+0x4b6>
 8015176:	4639      	mov	r1, r7
 8015178:	4648      	mov	r0, r9
 801517a:	f000 ff7f 	bl	801607c <_Bfree>
 801517e:	4629      	mov	r1, r5
 8015180:	4648      	mov	r0, r9
 8015182:	f000 ff7b 	bl	801607c <_Bfree>
 8015186:	e0b0      	b.n	80152ea <_dtoa_r+0x622>
 8015188:	07e2      	lsls	r2, r4, #31
 801518a:	d505      	bpl.n	8015198 <_dtoa_r+0x4d0>
 801518c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015190:	f7eb fa62 	bl	8000658 <__aeabi_dmul>
 8015194:	3601      	adds	r6, #1
 8015196:	2301      	movs	r3, #1
 8015198:	1064      	asrs	r4, r4, #1
 801519a:	3508      	adds	r5, #8
 801519c:	e762      	b.n	8015064 <_dtoa_r+0x39c>
 801519e:	2602      	movs	r6, #2
 80151a0:	e765      	b.n	801506e <_dtoa_r+0x3a6>
 80151a2:	9c03      	ldr	r4, [sp, #12]
 80151a4:	46b8      	mov	r8, r7
 80151a6:	e784      	b.n	80150b2 <_dtoa_r+0x3ea>
 80151a8:	4b27      	ldr	r3, [pc, #156]	@ (8015248 <_dtoa_r+0x580>)
 80151aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80151ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80151b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80151b4:	4454      	add	r4, sl
 80151b6:	2900      	cmp	r1, #0
 80151b8:	d054      	beq.n	8015264 <_dtoa_r+0x59c>
 80151ba:	4929      	ldr	r1, [pc, #164]	@ (8015260 <_dtoa_r+0x598>)
 80151bc:	2000      	movs	r0, #0
 80151be:	f7eb fb75 	bl	80008ac <__aeabi_ddiv>
 80151c2:	4633      	mov	r3, r6
 80151c4:	462a      	mov	r2, r5
 80151c6:	f7eb f88f 	bl	80002e8 <__aeabi_dsub>
 80151ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80151ce:	4656      	mov	r6, sl
 80151d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80151d4:	f7eb fcf0 	bl	8000bb8 <__aeabi_d2iz>
 80151d8:	4605      	mov	r5, r0
 80151da:	f7eb f9d3 	bl	8000584 <__aeabi_i2d>
 80151de:	4602      	mov	r2, r0
 80151e0:	460b      	mov	r3, r1
 80151e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80151e6:	f7eb f87f 	bl	80002e8 <__aeabi_dsub>
 80151ea:	3530      	adds	r5, #48	@ 0x30
 80151ec:	4602      	mov	r2, r0
 80151ee:	460b      	mov	r3, r1
 80151f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80151f4:	f806 5b01 	strb.w	r5, [r6], #1
 80151f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80151fc:	f7eb fc9e 	bl	8000b3c <__aeabi_dcmplt>
 8015200:	2800      	cmp	r0, #0
 8015202:	d172      	bne.n	80152ea <_dtoa_r+0x622>
 8015204:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015208:	4911      	ldr	r1, [pc, #68]	@ (8015250 <_dtoa_r+0x588>)
 801520a:	2000      	movs	r0, #0
 801520c:	f7eb f86c 	bl	80002e8 <__aeabi_dsub>
 8015210:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8015214:	f7eb fc92 	bl	8000b3c <__aeabi_dcmplt>
 8015218:	2800      	cmp	r0, #0
 801521a:	f040 80b4 	bne.w	8015386 <_dtoa_r+0x6be>
 801521e:	42a6      	cmp	r6, r4
 8015220:	f43f af70 	beq.w	8015104 <_dtoa_r+0x43c>
 8015224:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8015228:	4b0a      	ldr	r3, [pc, #40]	@ (8015254 <_dtoa_r+0x58c>)
 801522a:	2200      	movs	r2, #0
 801522c:	f7eb fa14 	bl	8000658 <__aeabi_dmul>
 8015230:	4b08      	ldr	r3, [pc, #32]	@ (8015254 <_dtoa_r+0x58c>)
 8015232:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8015236:	2200      	movs	r2, #0
 8015238:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801523c:	f7eb fa0c 	bl	8000658 <__aeabi_dmul>
 8015240:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015244:	e7c4      	b.n	80151d0 <_dtoa_r+0x508>
 8015246:	bf00      	nop
 8015248:	0801a3b0 	.word	0x0801a3b0
 801524c:	0801a388 	.word	0x0801a388
 8015250:	3ff00000 	.word	0x3ff00000
 8015254:	40240000 	.word	0x40240000
 8015258:	401c0000 	.word	0x401c0000
 801525c:	40140000 	.word	0x40140000
 8015260:	3fe00000 	.word	0x3fe00000
 8015264:	4631      	mov	r1, r6
 8015266:	4628      	mov	r0, r5
 8015268:	f7eb f9f6 	bl	8000658 <__aeabi_dmul>
 801526c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8015270:	9413      	str	r4, [sp, #76]	@ 0x4c
 8015272:	4656      	mov	r6, sl
 8015274:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015278:	f7eb fc9e 	bl	8000bb8 <__aeabi_d2iz>
 801527c:	4605      	mov	r5, r0
 801527e:	f7eb f981 	bl	8000584 <__aeabi_i2d>
 8015282:	4602      	mov	r2, r0
 8015284:	460b      	mov	r3, r1
 8015286:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801528a:	f7eb f82d 	bl	80002e8 <__aeabi_dsub>
 801528e:	3530      	adds	r5, #48	@ 0x30
 8015290:	f806 5b01 	strb.w	r5, [r6], #1
 8015294:	4602      	mov	r2, r0
 8015296:	460b      	mov	r3, r1
 8015298:	42a6      	cmp	r6, r4
 801529a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801529e:	f04f 0200 	mov.w	r2, #0
 80152a2:	d124      	bne.n	80152ee <_dtoa_r+0x626>
 80152a4:	4baf      	ldr	r3, [pc, #700]	@ (8015564 <_dtoa_r+0x89c>)
 80152a6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80152aa:	f7eb f81f 	bl	80002ec <__adddf3>
 80152ae:	4602      	mov	r2, r0
 80152b0:	460b      	mov	r3, r1
 80152b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80152b6:	f7eb fc5f 	bl	8000b78 <__aeabi_dcmpgt>
 80152ba:	2800      	cmp	r0, #0
 80152bc:	d163      	bne.n	8015386 <_dtoa_r+0x6be>
 80152be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80152c2:	49a8      	ldr	r1, [pc, #672]	@ (8015564 <_dtoa_r+0x89c>)
 80152c4:	2000      	movs	r0, #0
 80152c6:	f7eb f80f 	bl	80002e8 <__aeabi_dsub>
 80152ca:	4602      	mov	r2, r0
 80152cc:	460b      	mov	r3, r1
 80152ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80152d2:	f7eb fc33 	bl	8000b3c <__aeabi_dcmplt>
 80152d6:	2800      	cmp	r0, #0
 80152d8:	f43f af14 	beq.w	8015104 <_dtoa_r+0x43c>
 80152dc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80152de:	1e73      	subs	r3, r6, #1
 80152e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80152e2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80152e6:	2b30      	cmp	r3, #48	@ 0x30
 80152e8:	d0f8      	beq.n	80152dc <_dtoa_r+0x614>
 80152ea:	4647      	mov	r7, r8
 80152ec:	e03b      	b.n	8015366 <_dtoa_r+0x69e>
 80152ee:	4b9e      	ldr	r3, [pc, #632]	@ (8015568 <_dtoa_r+0x8a0>)
 80152f0:	f7eb f9b2 	bl	8000658 <__aeabi_dmul>
 80152f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80152f8:	e7bc      	b.n	8015274 <_dtoa_r+0x5ac>
 80152fa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80152fe:	4656      	mov	r6, sl
 8015300:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015304:	4620      	mov	r0, r4
 8015306:	4629      	mov	r1, r5
 8015308:	f7eb fad0 	bl	80008ac <__aeabi_ddiv>
 801530c:	f7eb fc54 	bl	8000bb8 <__aeabi_d2iz>
 8015310:	4680      	mov	r8, r0
 8015312:	f7eb f937 	bl	8000584 <__aeabi_i2d>
 8015316:	e9dd 2300 	ldrd	r2, r3, [sp]
 801531a:	f7eb f99d 	bl	8000658 <__aeabi_dmul>
 801531e:	4602      	mov	r2, r0
 8015320:	460b      	mov	r3, r1
 8015322:	4620      	mov	r0, r4
 8015324:	4629      	mov	r1, r5
 8015326:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801532a:	f7ea ffdd 	bl	80002e8 <__aeabi_dsub>
 801532e:	f806 4b01 	strb.w	r4, [r6], #1
 8015332:	9d03      	ldr	r5, [sp, #12]
 8015334:	eba6 040a 	sub.w	r4, r6, sl
 8015338:	42a5      	cmp	r5, r4
 801533a:	4602      	mov	r2, r0
 801533c:	460b      	mov	r3, r1
 801533e:	d133      	bne.n	80153a8 <_dtoa_r+0x6e0>
 8015340:	f7ea ffd4 	bl	80002ec <__adddf3>
 8015344:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015348:	4604      	mov	r4, r0
 801534a:	460d      	mov	r5, r1
 801534c:	f7eb fc14 	bl	8000b78 <__aeabi_dcmpgt>
 8015350:	b9c0      	cbnz	r0, 8015384 <_dtoa_r+0x6bc>
 8015352:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015356:	4620      	mov	r0, r4
 8015358:	4629      	mov	r1, r5
 801535a:	f7eb fbe5 	bl	8000b28 <__aeabi_dcmpeq>
 801535e:	b110      	cbz	r0, 8015366 <_dtoa_r+0x69e>
 8015360:	f018 0f01 	tst.w	r8, #1
 8015364:	d10e      	bne.n	8015384 <_dtoa_r+0x6bc>
 8015366:	9902      	ldr	r1, [sp, #8]
 8015368:	4648      	mov	r0, r9
 801536a:	f000 fe87 	bl	801607c <_Bfree>
 801536e:	2300      	movs	r3, #0
 8015370:	7033      	strb	r3, [r6, #0]
 8015372:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015374:	3701      	adds	r7, #1
 8015376:	601f      	str	r7, [r3, #0]
 8015378:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801537a:	2b00      	cmp	r3, #0
 801537c:	f000 824b 	beq.w	8015816 <_dtoa_r+0xb4e>
 8015380:	601e      	str	r6, [r3, #0]
 8015382:	e248      	b.n	8015816 <_dtoa_r+0xb4e>
 8015384:	46b8      	mov	r8, r7
 8015386:	4633      	mov	r3, r6
 8015388:	461e      	mov	r6, r3
 801538a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801538e:	2a39      	cmp	r2, #57	@ 0x39
 8015390:	d106      	bne.n	80153a0 <_dtoa_r+0x6d8>
 8015392:	459a      	cmp	sl, r3
 8015394:	d1f8      	bne.n	8015388 <_dtoa_r+0x6c0>
 8015396:	2230      	movs	r2, #48	@ 0x30
 8015398:	f108 0801 	add.w	r8, r8, #1
 801539c:	f88a 2000 	strb.w	r2, [sl]
 80153a0:	781a      	ldrb	r2, [r3, #0]
 80153a2:	3201      	adds	r2, #1
 80153a4:	701a      	strb	r2, [r3, #0]
 80153a6:	e7a0      	b.n	80152ea <_dtoa_r+0x622>
 80153a8:	4b6f      	ldr	r3, [pc, #444]	@ (8015568 <_dtoa_r+0x8a0>)
 80153aa:	2200      	movs	r2, #0
 80153ac:	f7eb f954 	bl	8000658 <__aeabi_dmul>
 80153b0:	2200      	movs	r2, #0
 80153b2:	2300      	movs	r3, #0
 80153b4:	4604      	mov	r4, r0
 80153b6:	460d      	mov	r5, r1
 80153b8:	f7eb fbb6 	bl	8000b28 <__aeabi_dcmpeq>
 80153bc:	2800      	cmp	r0, #0
 80153be:	d09f      	beq.n	8015300 <_dtoa_r+0x638>
 80153c0:	e7d1      	b.n	8015366 <_dtoa_r+0x69e>
 80153c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80153c4:	2a00      	cmp	r2, #0
 80153c6:	f000 80ea 	beq.w	801559e <_dtoa_r+0x8d6>
 80153ca:	9a07      	ldr	r2, [sp, #28]
 80153cc:	2a01      	cmp	r2, #1
 80153ce:	f300 80cd 	bgt.w	801556c <_dtoa_r+0x8a4>
 80153d2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80153d4:	2a00      	cmp	r2, #0
 80153d6:	f000 80c1 	beq.w	801555c <_dtoa_r+0x894>
 80153da:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80153de:	9c08      	ldr	r4, [sp, #32]
 80153e0:	9e00      	ldr	r6, [sp, #0]
 80153e2:	9a00      	ldr	r2, [sp, #0]
 80153e4:	441a      	add	r2, r3
 80153e6:	9200      	str	r2, [sp, #0]
 80153e8:	9a06      	ldr	r2, [sp, #24]
 80153ea:	2101      	movs	r1, #1
 80153ec:	441a      	add	r2, r3
 80153ee:	4648      	mov	r0, r9
 80153f0:	9206      	str	r2, [sp, #24]
 80153f2:	f000 ff41 	bl	8016278 <__i2b>
 80153f6:	4605      	mov	r5, r0
 80153f8:	b166      	cbz	r6, 8015414 <_dtoa_r+0x74c>
 80153fa:	9b06      	ldr	r3, [sp, #24]
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	dd09      	ble.n	8015414 <_dtoa_r+0x74c>
 8015400:	42b3      	cmp	r3, r6
 8015402:	9a00      	ldr	r2, [sp, #0]
 8015404:	bfa8      	it	ge
 8015406:	4633      	movge	r3, r6
 8015408:	1ad2      	subs	r2, r2, r3
 801540a:	9200      	str	r2, [sp, #0]
 801540c:	9a06      	ldr	r2, [sp, #24]
 801540e:	1af6      	subs	r6, r6, r3
 8015410:	1ad3      	subs	r3, r2, r3
 8015412:	9306      	str	r3, [sp, #24]
 8015414:	9b08      	ldr	r3, [sp, #32]
 8015416:	b30b      	cbz	r3, 801545c <_dtoa_r+0x794>
 8015418:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801541a:	2b00      	cmp	r3, #0
 801541c:	f000 80c6 	beq.w	80155ac <_dtoa_r+0x8e4>
 8015420:	2c00      	cmp	r4, #0
 8015422:	f000 80c0 	beq.w	80155a6 <_dtoa_r+0x8de>
 8015426:	4629      	mov	r1, r5
 8015428:	4622      	mov	r2, r4
 801542a:	4648      	mov	r0, r9
 801542c:	f000 ffdc 	bl	80163e8 <__pow5mult>
 8015430:	9a02      	ldr	r2, [sp, #8]
 8015432:	4601      	mov	r1, r0
 8015434:	4605      	mov	r5, r0
 8015436:	4648      	mov	r0, r9
 8015438:	f000 ff34 	bl	80162a4 <__multiply>
 801543c:	9902      	ldr	r1, [sp, #8]
 801543e:	4680      	mov	r8, r0
 8015440:	4648      	mov	r0, r9
 8015442:	f000 fe1b 	bl	801607c <_Bfree>
 8015446:	9b08      	ldr	r3, [sp, #32]
 8015448:	1b1b      	subs	r3, r3, r4
 801544a:	9308      	str	r3, [sp, #32]
 801544c:	f000 80b1 	beq.w	80155b2 <_dtoa_r+0x8ea>
 8015450:	9a08      	ldr	r2, [sp, #32]
 8015452:	4641      	mov	r1, r8
 8015454:	4648      	mov	r0, r9
 8015456:	f000 ffc7 	bl	80163e8 <__pow5mult>
 801545a:	9002      	str	r0, [sp, #8]
 801545c:	2101      	movs	r1, #1
 801545e:	4648      	mov	r0, r9
 8015460:	f000 ff0a 	bl	8016278 <__i2b>
 8015464:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015466:	4604      	mov	r4, r0
 8015468:	2b00      	cmp	r3, #0
 801546a:	f000 81d8 	beq.w	801581e <_dtoa_r+0xb56>
 801546e:	461a      	mov	r2, r3
 8015470:	4601      	mov	r1, r0
 8015472:	4648      	mov	r0, r9
 8015474:	f000 ffb8 	bl	80163e8 <__pow5mult>
 8015478:	9b07      	ldr	r3, [sp, #28]
 801547a:	2b01      	cmp	r3, #1
 801547c:	4604      	mov	r4, r0
 801547e:	f300 809f 	bgt.w	80155c0 <_dtoa_r+0x8f8>
 8015482:	9b04      	ldr	r3, [sp, #16]
 8015484:	2b00      	cmp	r3, #0
 8015486:	f040 8097 	bne.w	80155b8 <_dtoa_r+0x8f0>
 801548a:	9b05      	ldr	r3, [sp, #20]
 801548c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015490:	2b00      	cmp	r3, #0
 8015492:	f040 8093 	bne.w	80155bc <_dtoa_r+0x8f4>
 8015496:	9b05      	ldr	r3, [sp, #20]
 8015498:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801549c:	0d1b      	lsrs	r3, r3, #20
 801549e:	051b      	lsls	r3, r3, #20
 80154a0:	b133      	cbz	r3, 80154b0 <_dtoa_r+0x7e8>
 80154a2:	9b00      	ldr	r3, [sp, #0]
 80154a4:	3301      	adds	r3, #1
 80154a6:	9300      	str	r3, [sp, #0]
 80154a8:	9b06      	ldr	r3, [sp, #24]
 80154aa:	3301      	adds	r3, #1
 80154ac:	9306      	str	r3, [sp, #24]
 80154ae:	2301      	movs	r3, #1
 80154b0:	9308      	str	r3, [sp, #32]
 80154b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	f000 81b8 	beq.w	801582a <_dtoa_r+0xb62>
 80154ba:	6923      	ldr	r3, [r4, #16]
 80154bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80154c0:	6918      	ldr	r0, [r3, #16]
 80154c2:	f000 fe8d 	bl	80161e0 <__hi0bits>
 80154c6:	f1c0 0020 	rsb	r0, r0, #32
 80154ca:	9b06      	ldr	r3, [sp, #24]
 80154cc:	4418      	add	r0, r3
 80154ce:	f010 001f 	ands.w	r0, r0, #31
 80154d2:	f000 8082 	beq.w	80155da <_dtoa_r+0x912>
 80154d6:	f1c0 0320 	rsb	r3, r0, #32
 80154da:	2b04      	cmp	r3, #4
 80154dc:	dd73      	ble.n	80155c6 <_dtoa_r+0x8fe>
 80154de:	9b00      	ldr	r3, [sp, #0]
 80154e0:	f1c0 001c 	rsb	r0, r0, #28
 80154e4:	4403      	add	r3, r0
 80154e6:	9300      	str	r3, [sp, #0]
 80154e8:	9b06      	ldr	r3, [sp, #24]
 80154ea:	4403      	add	r3, r0
 80154ec:	4406      	add	r6, r0
 80154ee:	9306      	str	r3, [sp, #24]
 80154f0:	9b00      	ldr	r3, [sp, #0]
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	dd05      	ble.n	8015502 <_dtoa_r+0x83a>
 80154f6:	9902      	ldr	r1, [sp, #8]
 80154f8:	461a      	mov	r2, r3
 80154fa:	4648      	mov	r0, r9
 80154fc:	f000 ffce 	bl	801649c <__lshift>
 8015500:	9002      	str	r0, [sp, #8]
 8015502:	9b06      	ldr	r3, [sp, #24]
 8015504:	2b00      	cmp	r3, #0
 8015506:	dd05      	ble.n	8015514 <_dtoa_r+0x84c>
 8015508:	4621      	mov	r1, r4
 801550a:	461a      	mov	r2, r3
 801550c:	4648      	mov	r0, r9
 801550e:	f000 ffc5 	bl	801649c <__lshift>
 8015512:	4604      	mov	r4, r0
 8015514:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015516:	2b00      	cmp	r3, #0
 8015518:	d061      	beq.n	80155de <_dtoa_r+0x916>
 801551a:	9802      	ldr	r0, [sp, #8]
 801551c:	4621      	mov	r1, r4
 801551e:	f001 f829 	bl	8016574 <__mcmp>
 8015522:	2800      	cmp	r0, #0
 8015524:	da5b      	bge.n	80155de <_dtoa_r+0x916>
 8015526:	2300      	movs	r3, #0
 8015528:	9902      	ldr	r1, [sp, #8]
 801552a:	220a      	movs	r2, #10
 801552c:	4648      	mov	r0, r9
 801552e:	f000 fdc7 	bl	80160c0 <__multadd>
 8015532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015534:	9002      	str	r0, [sp, #8]
 8015536:	f107 38ff 	add.w	r8, r7, #4294967295
 801553a:	2b00      	cmp	r3, #0
 801553c:	f000 8177 	beq.w	801582e <_dtoa_r+0xb66>
 8015540:	4629      	mov	r1, r5
 8015542:	2300      	movs	r3, #0
 8015544:	220a      	movs	r2, #10
 8015546:	4648      	mov	r0, r9
 8015548:	f000 fdba 	bl	80160c0 <__multadd>
 801554c:	f1bb 0f00 	cmp.w	fp, #0
 8015550:	4605      	mov	r5, r0
 8015552:	dc6f      	bgt.n	8015634 <_dtoa_r+0x96c>
 8015554:	9b07      	ldr	r3, [sp, #28]
 8015556:	2b02      	cmp	r3, #2
 8015558:	dc49      	bgt.n	80155ee <_dtoa_r+0x926>
 801555a:	e06b      	b.n	8015634 <_dtoa_r+0x96c>
 801555c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801555e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8015562:	e73c      	b.n	80153de <_dtoa_r+0x716>
 8015564:	3fe00000 	.word	0x3fe00000
 8015568:	40240000 	.word	0x40240000
 801556c:	9b03      	ldr	r3, [sp, #12]
 801556e:	1e5c      	subs	r4, r3, #1
 8015570:	9b08      	ldr	r3, [sp, #32]
 8015572:	42a3      	cmp	r3, r4
 8015574:	db09      	blt.n	801558a <_dtoa_r+0x8c2>
 8015576:	1b1c      	subs	r4, r3, r4
 8015578:	9b03      	ldr	r3, [sp, #12]
 801557a:	2b00      	cmp	r3, #0
 801557c:	f6bf af30 	bge.w	80153e0 <_dtoa_r+0x718>
 8015580:	9b00      	ldr	r3, [sp, #0]
 8015582:	9a03      	ldr	r2, [sp, #12]
 8015584:	1a9e      	subs	r6, r3, r2
 8015586:	2300      	movs	r3, #0
 8015588:	e72b      	b.n	80153e2 <_dtoa_r+0x71a>
 801558a:	9b08      	ldr	r3, [sp, #32]
 801558c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801558e:	9408      	str	r4, [sp, #32]
 8015590:	1ae3      	subs	r3, r4, r3
 8015592:	441a      	add	r2, r3
 8015594:	9e00      	ldr	r6, [sp, #0]
 8015596:	9b03      	ldr	r3, [sp, #12]
 8015598:	920d      	str	r2, [sp, #52]	@ 0x34
 801559a:	2400      	movs	r4, #0
 801559c:	e721      	b.n	80153e2 <_dtoa_r+0x71a>
 801559e:	9c08      	ldr	r4, [sp, #32]
 80155a0:	9e00      	ldr	r6, [sp, #0]
 80155a2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80155a4:	e728      	b.n	80153f8 <_dtoa_r+0x730>
 80155a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80155aa:	e751      	b.n	8015450 <_dtoa_r+0x788>
 80155ac:	9a08      	ldr	r2, [sp, #32]
 80155ae:	9902      	ldr	r1, [sp, #8]
 80155b0:	e750      	b.n	8015454 <_dtoa_r+0x78c>
 80155b2:	f8cd 8008 	str.w	r8, [sp, #8]
 80155b6:	e751      	b.n	801545c <_dtoa_r+0x794>
 80155b8:	2300      	movs	r3, #0
 80155ba:	e779      	b.n	80154b0 <_dtoa_r+0x7e8>
 80155bc:	9b04      	ldr	r3, [sp, #16]
 80155be:	e777      	b.n	80154b0 <_dtoa_r+0x7e8>
 80155c0:	2300      	movs	r3, #0
 80155c2:	9308      	str	r3, [sp, #32]
 80155c4:	e779      	b.n	80154ba <_dtoa_r+0x7f2>
 80155c6:	d093      	beq.n	80154f0 <_dtoa_r+0x828>
 80155c8:	9a00      	ldr	r2, [sp, #0]
 80155ca:	331c      	adds	r3, #28
 80155cc:	441a      	add	r2, r3
 80155ce:	9200      	str	r2, [sp, #0]
 80155d0:	9a06      	ldr	r2, [sp, #24]
 80155d2:	441a      	add	r2, r3
 80155d4:	441e      	add	r6, r3
 80155d6:	9206      	str	r2, [sp, #24]
 80155d8:	e78a      	b.n	80154f0 <_dtoa_r+0x828>
 80155da:	4603      	mov	r3, r0
 80155dc:	e7f4      	b.n	80155c8 <_dtoa_r+0x900>
 80155de:	9b03      	ldr	r3, [sp, #12]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	46b8      	mov	r8, r7
 80155e4:	dc20      	bgt.n	8015628 <_dtoa_r+0x960>
 80155e6:	469b      	mov	fp, r3
 80155e8:	9b07      	ldr	r3, [sp, #28]
 80155ea:	2b02      	cmp	r3, #2
 80155ec:	dd1e      	ble.n	801562c <_dtoa_r+0x964>
 80155ee:	f1bb 0f00 	cmp.w	fp, #0
 80155f2:	f47f adb1 	bne.w	8015158 <_dtoa_r+0x490>
 80155f6:	4621      	mov	r1, r4
 80155f8:	465b      	mov	r3, fp
 80155fa:	2205      	movs	r2, #5
 80155fc:	4648      	mov	r0, r9
 80155fe:	f000 fd5f 	bl	80160c0 <__multadd>
 8015602:	4601      	mov	r1, r0
 8015604:	4604      	mov	r4, r0
 8015606:	9802      	ldr	r0, [sp, #8]
 8015608:	f000 ffb4 	bl	8016574 <__mcmp>
 801560c:	2800      	cmp	r0, #0
 801560e:	f77f ada3 	ble.w	8015158 <_dtoa_r+0x490>
 8015612:	4656      	mov	r6, sl
 8015614:	2331      	movs	r3, #49	@ 0x31
 8015616:	f806 3b01 	strb.w	r3, [r6], #1
 801561a:	f108 0801 	add.w	r8, r8, #1
 801561e:	e59f      	b.n	8015160 <_dtoa_r+0x498>
 8015620:	9c03      	ldr	r4, [sp, #12]
 8015622:	46b8      	mov	r8, r7
 8015624:	4625      	mov	r5, r4
 8015626:	e7f4      	b.n	8015612 <_dtoa_r+0x94a>
 8015628:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801562c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801562e:	2b00      	cmp	r3, #0
 8015630:	f000 8101 	beq.w	8015836 <_dtoa_r+0xb6e>
 8015634:	2e00      	cmp	r6, #0
 8015636:	dd05      	ble.n	8015644 <_dtoa_r+0x97c>
 8015638:	4629      	mov	r1, r5
 801563a:	4632      	mov	r2, r6
 801563c:	4648      	mov	r0, r9
 801563e:	f000 ff2d 	bl	801649c <__lshift>
 8015642:	4605      	mov	r5, r0
 8015644:	9b08      	ldr	r3, [sp, #32]
 8015646:	2b00      	cmp	r3, #0
 8015648:	d05c      	beq.n	8015704 <_dtoa_r+0xa3c>
 801564a:	6869      	ldr	r1, [r5, #4]
 801564c:	4648      	mov	r0, r9
 801564e:	f000 fcd5 	bl	8015ffc <_Balloc>
 8015652:	4606      	mov	r6, r0
 8015654:	b928      	cbnz	r0, 8015662 <_dtoa_r+0x99a>
 8015656:	4b82      	ldr	r3, [pc, #520]	@ (8015860 <_dtoa_r+0xb98>)
 8015658:	4602      	mov	r2, r0
 801565a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801565e:	f7ff bb4a 	b.w	8014cf6 <_dtoa_r+0x2e>
 8015662:	692a      	ldr	r2, [r5, #16]
 8015664:	3202      	adds	r2, #2
 8015666:	0092      	lsls	r2, r2, #2
 8015668:	f105 010c 	add.w	r1, r5, #12
 801566c:	300c      	adds	r0, #12
 801566e:	f7ff fa7d 	bl	8014b6c <memcpy>
 8015672:	2201      	movs	r2, #1
 8015674:	4631      	mov	r1, r6
 8015676:	4648      	mov	r0, r9
 8015678:	f000 ff10 	bl	801649c <__lshift>
 801567c:	f10a 0301 	add.w	r3, sl, #1
 8015680:	9300      	str	r3, [sp, #0]
 8015682:	eb0a 030b 	add.w	r3, sl, fp
 8015686:	9308      	str	r3, [sp, #32]
 8015688:	9b04      	ldr	r3, [sp, #16]
 801568a:	f003 0301 	and.w	r3, r3, #1
 801568e:	462f      	mov	r7, r5
 8015690:	9306      	str	r3, [sp, #24]
 8015692:	4605      	mov	r5, r0
 8015694:	9b00      	ldr	r3, [sp, #0]
 8015696:	9802      	ldr	r0, [sp, #8]
 8015698:	4621      	mov	r1, r4
 801569a:	f103 3bff 	add.w	fp, r3, #4294967295
 801569e:	f7ff fa88 	bl	8014bb2 <quorem>
 80156a2:	4603      	mov	r3, r0
 80156a4:	3330      	adds	r3, #48	@ 0x30
 80156a6:	9003      	str	r0, [sp, #12]
 80156a8:	4639      	mov	r1, r7
 80156aa:	9802      	ldr	r0, [sp, #8]
 80156ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80156ae:	f000 ff61 	bl	8016574 <__mcmp>
 80156b2:	462a      	mov	r2, r5
 80156b4:	9004      	str	r0, [sp, #16]
 80156b6:	4621      	mov	r1, r4
 80156b8:	4648      	mov	r0, r9
 80156ba:	f000 ff77 	bl	80165ac <__mdiff>
 80156be:	68c2      	ldr	r2, [r0, #12]
 80156c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80156c2:	4606      	mov	r6, r0
 80156c4:	bb02      	cbnz	r2, 8015708 <_dtoa_r+0xa40>
 80156c6:	4601      	mov	r1, r0
 80156c8:	9802      	ldr	r0, [sp, #8]
 80156ca:	f000 ff53 	bl	8016574 <__mcmp>
 80156ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80156d0:	4602      	mov	r2, r0
 80156d2:	4631      	mov	r1, r6
 80156d4:	4648      	mov	r0, r9
 80156d6:	920c      	str	r2, [sp, #48]	@ 0x30
 80156d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80156da:	f000 fccf 	bl	801607c <_Bfree>
 80156de:	9b07      	ldr	r3, [sp, #28]
 80156e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80156e2:	9e00      	ldr	r6, [sp, #0]
 80156e4:	ea42 0103 	orr.w	r1, r2, r3
 80156e8:	9b06      	ldr	r3, [sp, #24]
 80156ea:	4319      	orrs	r1, r3
 80156ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80156ee:	d10d      	bne.n	801570c <_dtoa_r+0xa44>
 80156f0:	2b39      	cmp	r3, #57	@ 0x39
 80156f2:	d027      	beq.n	8015744 <_dtoa_r+0xa7c>
 80156f4:	9a04      	ldr	r2, [sp, #16]
 80156f6:	2a00      	cmp	r2, #0
 80156f8:	dd01      	ble.n	80156fe <_dtoa_r+0xa36>
 80156fa:	9b03      	ldr	r3, [sp, #12]
 80156fc:	3331      	adds	r3, #49	@ 0x31
 80156fe:	f88b 3000 	strb.w	r3, [fp]
 8015702:	e52e      	b.n	8015162 <_dtoa_r+0x49a>
 8015704:	4628      	mov	r0, r5
 8015706:	e7b9      	b.n	801567c <_dtoa_r+0x9b4>
 8015708:	2201      	movs	r2, #1
 801570a:	e7e2      	b.n	80156d2 <_dtoa_r+0xa0a>
 801570c:	9904      	ldr	r1, [sp, #16]
 801570e:	2900      	cmp	r1, #0
 8015710:	db04      	blt.n	801571c <_dtoa_r+0xa54>
 8015712:	9807      	ldr	r0, [sp, #28]
 8015714:	4301      	orrs	r1, r0
 8015716:	9806      	ldr	r0, [sp, #24]
 8015718:	4301      	orrs	r1, r0
 801571a:	d120      	bne.n	801575e <_dtoa_r+0xa96>
 801571c:	2a00      	cmp	r2, #0
 801571e:	ddee      	ble.n	80156fe <_dtoa_r+0xa36>
 8015720:	9902      	ldr	r1, [sp, #8]
 8015722:	9300      	str	r3, [sp, #0]
 8015724:	2201      	movs	r2, #1
 8015726:	4648      	mov	r0, r9
 8015728:	f000 feb8 	bl	801649c <__lshift>
 801572c:	4621      	mov	r1, r4
 801572e:	9002      	str	r0, [sp, #8]
 8015730:	f000 ff20 	bl	8016574 <__mcmp>
 8015734:	2800      	cmp	r0, #0
 8015736:	9b00      	ldr	r3, [sp, #0]
 8015738:	dc02      	bgt.n	8015740 <_dtoa_r+0xa78>
 801573a:	d1e0      	bne.n	80156fe <_dtoa_r+0xa36>
 801573c:	07da      	lsls	r2, r3, #31
 801573e:	d5de      	bpl.n	80156fe <_dtoa_r+0xa36>
 8015740:	2b39      	cmp	r3, #57	@ 0x39
 8015742:	d1da      	bne.n	80156fa <_dtoa_r+0xa32>
 8015744:	2339      	movs	r3, #57	@ 0x39
 8015746:	f88b 3000 	strb.w	r3, [fp]
 801574a:	4633      	mov	r3, r6
 801574c:	461e      	mov	r6, r3
 801574e:	3b01      	subs	r3, #1
 8015750:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015754:	2a39      	cmp	r2, #57	@ 0x39
 8015756:	d04e      	beq.n	80157f6 <_dtoa_r+0xb2e>
 8015758:	3201      	adds	r2, #1
 801575a:	701a      	strb	r2, [r3, #0]
 801575c:	e501      	b.n	8015162 <_dtoa_r+0x49a>
 801575e:	2a00      	cmp	r2, #0
 8015760:	dd03      	ble.n	801576a <_dtoa_r+0xaa2>
 8015762:	2b39      	cmp	r3, #57	@ 0x39
 8015764:	d0ee      	beq.n	8015744 <_dtoa_r+0xa7c>
 8015766:	3301      	adds	r3, #1
 8015768:	e7c9      	b.n	80156fe <_dtoa_r+0xa36>
 801576a:	9a00      	ldr	r2, [sp, #0]
 801576c:	9908      	ldr	r1, [sp, #32]
 801576e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015772:	428a      	cmp	r2, r1
 8015774:	d028      	beq.n	80157c8 <_dtoa_r+0xb00>
 8015776:	9902      	ldr	r1, [sp, #8]
 8015778:	2300      	movs	r3, #0
 801577a:	220a      	movs	r2, #10
 801577c:	4648      	mov	r0, r9
 801577e:	f000 fc9f 	bl	80160c0 <__multadd>
 8015782:	42af      	cmp	r7, r5
 8015784:	9002      	str	r0, [sp, #8]
 8015786:	f04f 0300 	mov.w	r3, #0
 801578a:	f04f 020a 	mov.w	r2, #10
 801578e:	4639      	mov	r1, r7
 8015790:	4648      	mov	r0, r9
 8015792:	d107      	bne.n	80157a4 <_dtoa_r+0xadc>
 8015794:	f000 fc94 	bl	80160c0 <__multadd>
 8015798:	4607      	mov	r7, r0
 801579a:	4605      	mov	r5, r0
 801579c:	9b00      	ldr	r3, [sp, #0]
 801579e:	3301      	adds	r3, #1
 80157a0:	9300      	str	r3, [sp, #0]
 80157a2:	e777      	b.n	8015694 <_dtoa_r+0x9cc>
 80157a4:	f000 fc8c 	bl	80160c0 <__multadd>
 80157a8:	4629      	mov	r1, r5
 80157aa:	4607      	mov	r7, r0
 80157ac:	2300      	movs	r3, #0
 80157ae:	220a      	movs	r2, #10
 80157b0:	4648      	mov	r0, r9
 80157b2:	f000 fc85 	bl	80160c0 <__multadd>
 80157b6:	4605      	mov	r5, r0
 80157b8:	e7f0      	b.n	801579c <_dtoa_r+0xad4>
 80157ba:	f1bb 0f00 	cmp.w	fp, #0
 80157be:	bfcc      	ite	gt
 80157c0:	465e      	movgt	r6, fp
 80157c2:	2601      	movle	r6, #1
 80157c4:	4456      	add	r6, sl
 80157c6:	2700      	movs	r7, #0
 80157c8:	9902      	ldr	r1, [sp, #8]
 80157ca:	9300      	str	r3, [sp, #0]
 80157cc:	2201      	movs	r2, #1
 80157ce:	4648      	mov	r0, r9
 80157d0:	f000 fe64 	bl	801649c <__lshift>
 80157d4:	4621      	mov	r1, r4
 80157d6:	9002      	str	r0, [sp, #8]
 80157d8:	f000 fecc 	bl	8016574 <__mcmp>
 80157dc:	2800      	cmp	r0, #0
 80157de:	dcb4      	bgt.n	801574a <_dtoa_r+0xa82>
 80157e0:	d102      	bne.n	80157e8 <_dtoa_r+0xb20>
 80157e2:	9b00      	ldr	r3, [sp, #0]
 80157e4:	07db      	lsls	r3, r3, #31
 80157e6:	d4b0      	bmi.n	801574a <_dtoa_r+0xa82>
 80157e8:	4633      	mov	r3, r6
 80157ea:	461e      	mov	r6, r3
 80157ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80157f0:	2a30      	cmp	r2, #48	@ 0x30
 80157f2:	d0fa      	beq.n	80157ea <_dtoa_r+0xb22>
 80157f4:	e4b5      	b.n	8015162 <_dtoa_r+0x49a>
 80157f6:	459a      	cmp	sl, r3
 80157f8:	d1a8      	bne.n	801574c <_dtoa_r+0xa84>
 80157fa:	2331      	movs	r3, #49	@ 0x31
 80157fc:	f108 0801 	add.w	r8, r8, #1
 8015800:	f88a 3000 	strb.w	r3, [sl]
 8015804:	e4ad      	b.n	8015162 <_dtoa_r+0x49a>
 8015806:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015808:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8015864 <_dtoa_r+0xb9c>
 801580c:	b11b      	cbz	r3, 8015816 <_dtoa_r+0xb4e>
 801580e:	f10a 0308 	add.w	r3, sl, #8
 8015812:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8015814:	6013      	str	r3, [r2, #0]
 8015816:	4650      	mov	r0, sl
 8015818:	b017      	add	sp, #92	@ 0x5c
 801581a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801581e:	9b07      	ldr	r3, [sp, #28]
 8015820:	2b01      	cmp	r3, #1
 8015822:	f77f ae2e 	ble.w	8015482 <_dtoa_r+0x7ba>
 8015826:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015828:	9308      	str	r3, [sp, #32]
 801582a:	2001      	movs	r0, #1
 801582c:	e64d      	b.n	80154ca <_dtoa_r+0x802>
 801582e:	f1bb 0f00 	cmp.w	fp, #0
 8015832:	f77f aed9 	ble.w	80155e8 <_dtoa_r+0x920>
 8015836:	4656      	mov	r6, sl
 8015838:	9802      	ldr	r0, [sp, #8]
 801583a:	4621      	mov	r1, r4
 801583c:	f7ff f9b9 	bl	8014bb2 <quorem>
 8015840:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8015844:	f806 3b01 	strb.w	r3, [r6], #1
 8015848:	eba6 020a 	sub.w	r2, r6, sl
 801584c:	4593      	cmp	fp, r2
 801584e:	ddb4      	ble.n	80157ba <_dtoa_r+0xaf2>
 8015850:	9902      	ldr	r1, [sp, #8]
 8015852:	2300      	movs	r3, #0
 8015854:	220a      	movs	r2, #10
 8015856:	4648      	mov	r0, r9
 8015858:	f000 fc32 	bl	80160c0 <__multadd>
 801585c:	9002      	str	r0, [sp, #8]
 801585e:	e7eb      	b.n	8015838 <_dtoa_r+0xb70>
 8015860:	0801a14d 	.word	0x0801a14d
 8015864:	0801a0e8 	.word	0x0801a0e8

08015868 <_free_r>:
 8015868:	b538      	push	{r3, r4, r5, lr}
 801586a:	4605      	mov	r5, r0
 801586c:	2900      	cmp	r1, #0
 801586e:	d041      	beq.n	80158f4 <_free_r+0x8c>
 8015870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015874:	1f0c      	subs	r4, r1, #4
 8015876:	2b00      	cmp	r3, #0
 8015878:	bfb8      	it	lt
 801587a:	18e4      	addlt	r4, r4, r3
 801587c:	f7f1 fab2 	bl	8006de4 <__malloc_lock>
 8015880:	4a1d      	ldr	r2, [pc, #116]	@ (80158f8 <_free_r+0x90>)
 8015882:	6813      	ldr	r3, [r2, #0]
 8015884:	b933      	cbnz	r3, 8015894 <_free_r+0x2c>
 8015886:	6063      	str	r3, [r4, #4]
 8015888:	6014      	str	r4, [r2, #0]
 801588a:	4628      	mov	r0, r5
 801588c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015890:	f7f1 bae2 	b.w	8006e58 <__malloc_unlock>
 8015894:	42a3      	cmp	r3, r4
 8015896:	d908      	bls.n	80158aa <_free_r+0x42>
 8015898:	6820      	ldr	r0, [r4, #0]
 801589a:	1821      	adds	r1, r4, r0
 801589c:	428b      	cmp	r3, r1
 801589e:	bf01      	itttt	eq
 80158a0:	6819      	ldreq	r1, [r3, #0]
 80158a2:	685b      	ldreq	r3, [r3, #4]
 80158a4:	1809      	addeq	r1, r1, r0
 80158a6:	6021      	streq	r1, [r4, #0]
 80158a8:	e7ed      	b.n	8015886 <_free_r+0x1e>
 80158aa:	461a      	mov	r2, r3
 80158ac:	685b      	ldr	r3, [r3, #4]
 80158ae:	b10b      	cbz	r3, 80158b4 <_free_r+0x4c>
 80158b0:	42a3      	cmp	r3, r4
 80158b2:	d9fa      	bls.n	80158aa <_free_r+0x42>
 80158b4:	6811      	ldr	r1, [r2, #0]
 80158b6:	1850      	adds	r0, r2, r1
 80158b8:	42a0      	cmp	r0, r4
 80158ba:	d10b      	bne.n	80158d4 <_free_r+0x6c>
 80158bc:	6820      	ldr	r0, [r4, #0]
 80158be:	4401      	add	r1, r0
 80158c0:	1850      	adds	r0, r2, r1
 80158c2:	4283      	cmp	r3, r0
 80158c4:	6011      	str	r1, [r2, #0]
 80158c6:	d1e0      	bne.n	801588a <_free_r+0x22>
 80158c8:	6818      	ldr	r0, [r3, #0]
 80158ca:	685b      	ldr	r3, [r3, #4]
 80158cc:	6053      	str	r3, [r2, #4]
 80158ce:	4408      	add	r0, r1
 80158d0:	6010      	str	r0, [r2, #0]
 80158d2:	e7da      	b.n	801588a <_free_r+0x22>
 80158d4:	d902      	bls.n	80158dc <_free_r+0x74>
 80158d6:	230c      	movs	r3, #12
 80158d8:	602b      	str	r3, [r5, #0]
 80158da:	e7d6      	b.n	801588a <_free_r+0x22>
 80158dc:	6820      	ldr	r0, [r4, #0]
 80158de:	1821      	adds	r1, r4, r0
 80158e0:	428b      	cmp	r3, r1
 80158e2:	bf04      	itt	eq
 80158e4:	6819      	ldreq	r1, [r3, #0]
 80158e6:	685b      	ldreq	r3, [r3, #4]
 80158e8:	6063      	str	r3, [r4, #4]
 80158ea:	bf04      	itt	eq
 80158ec:	1809      	addeq	r1, r1, r0
 80158ee:	6021      	streq	r1, [r4, #0]
 80158f0:	6054      	str	r4, [r2, #4]
 80158f2:	e7ca      	b.n	801588a <_free_r+0x22>
 80158f4:	bd38      	pop	{r3, r4, r5, pc}
 80158f6:	bf00      	nop
 80158f8:	20000668 	.word	0x20000668

080158fc <rshift>:
 80158fc:	6903      	ldr	r3, [r0, #16]
 80158fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015902:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015906:	ea4f 1261 	mov.w	r2, r1, asr #5
 801590a:	f100 0414 	add.w	r4, r0, #20
 801590e:	dd45      	ble.n	801599c <rshift+0xa0>
 8015910:	f011 011f 	ands.w	r1, r1, #31
 8015914:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015918:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801591c:	d10c      	bne.n	8015938 <rshift+0x3c>
 801591e:	f100 0710 	add.w	r7, r0, #16
 8015922:	4629      	mov	r1, r5
 8015924:	42b1      	cmp	r1, r6
 8015926:	d334      	bcc.n	8015992 <rshift+0x96>
 8015928:	1a9b      	subs	r3, r3, r2
 801592a:	009b      	lsls	r3, r3, #2
 801592c:	1eea      	subs	r2, r5, #3
 801592e:	4296      	cmp	r6, r2
 8015930:	bf38      	it	cc
 8015932:	2300      	movcc	r3, #0
 8015934:	4423      	add	r3, r4
 8015936:	e015      	b.n	8015964 <rshift+0x68>
 8015938:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801593c:	f1c1 0820 	rsb	r8, r1, #32
 8015940:	40cf      	lsrs	r7, r1
 8015942:	f105 0e04 	add.w	lr, r5, #4
 8015946:	46a1      	mov	r9, r4
 8015948:	4576      	cmp	r6, lr
 801594a:	46f4      	mov	ip, lr
 801594c:	d815      	bhi.n	801597a <rshift+0x7e>
 801594e:	1a9a      	subs	r2, r3, r2
 8015950:	0092      	lsls	r2, r2, #2
 8015952:	3a04      	subs	r2, #4
 8015954:	3501      	adds	r5, #1
 8015956:	42ae      	cmp	r6, r5
 8015958:	bf38      	it	cc
 801595a:	2200      	movcc	r2, #0
 801595c:	18a3      	adds	r3, r4, r2
 801595e:	50a7      	str	r7, [r4, r2]
 8015960:	b107      	cbz	r7, 8015964 <rshift+0x68>
 8015962:	3304      	adds	r3, #4
 8015964:	1b1a      	subs	r2, r3, r4
 8015966:	42a3      	cmp	r3, r4
 8015968:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801596c:	bf08      	it	eq
 801596e:	2300      	moveq	r3, #0
 8015970:	6102      	str	r2, [r0, #16]
 8015972:	bf08      	it	eq
 8015974:	6143      	streq	r3, [r0, #20]
 8015976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801597a:	f8dc c000 	ldr.w	ip, [ip]
 801597e:	fa0c fc08 	lsl.w	ip, ip, r8
 8015982:	ea4c 0707 	orr.w	r7, ip, r7
 8015986:	f849 7b04 	str.w	r7, [r9], #4
 801598a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801598e:	40cf      	lsrs	r7, r1
 8015990:	e7da      	b.n	8015948 <rshift+0x4c>
 8015992:	f851 cb04 	ldr.w	ip, [r1], #4
 8015996:	f847 cf04 	str.w	ip, [r7, #4]!
 801599a:	e7c3      	b.n	8015924 <rshift+0x28>
 801599c:	4623      	mov	r3, r4
 801599e:	e7e1      	b.n	8015964 <rshift+0x68>

080159a0 <__hexdig_fun>:
 80159a0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80159a4:	2b09      	cmp	r3, #9
 80159a6:	d802      	bhi.n	80159ae <__hexdig_fun+0xe>
 80159a8:	3820      	subs	r0, #32
 80159aa:	b2c0      	uxtb	r0, r0
 80159ac:	4770      	bx	lr
 80159ae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80159b2:	2b05      	cmp	r3, #5
 80159b4:	d801      	bhi.n	80159ba <__hexdig_fun+0x1a>
 80159b6:	3847      	subs	r0, #71	@ 0x47
 80159b8:	e7f7      	b.n	80159aa <__hexdig_fun+0xa>
 80159ba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80159be:	2b05      	cmp	r3, #5
 80159c0:	d801      	bhi.n	80159c6 <__hexdig_fun+0x26>
 80159c2:	3827      	subs	r0, #39	@ 0x27
 80159c4:	e7f1      	b.n	80159aa <__hexdig_fun+0xa>
 80159c6:	2000      	movs	r0, #0
 80159c8:	4770      	bx	lr
	...

080159cc <__gethex>:
 80159cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159d0:	b085      	sub	sp, #20
 80159d2:	468a      	mov	sl, r1
 80159d4:	9302      	str	r3, [sp, #8]
 80159d6:	680b      	ldr	r3, [r1, #0]
 80159d8:	9001      	str	r0, [sp, #4]
 80159da:	4690      	mov	r8, r2
 80159dc:	1c9c      	adds	r4, r3, #2
 80159de:	46a1      	mov	r9, r4
 80159e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80159e4:	2830      	cmp	r0, #48	@ 0x30
 80159e6:	d0fa      	beq.n	80159de <__gethex+0x12>
 80159e8:	eba9 0303 	sub.w	r3, r9, r3
 80159ec:	f1a3 0b02 	sub.w	fp, r3, #2
 80159f0:	f7ff ffd6 	bl	80159a0 <__hexdig_fun>
 80159f4:	4605      	mov	r5, r0
 80159f6:	2800      	cmp	r0, #0
 80159f8:	d168      	bne.n	8015acc <__gethex+0x100>
 80159fa:	49a0      	ldr	r1, [pc, #640]	@ (8015c7c <__gethex+0x2b0>)
 80159fc:	2201      	movs	r2, #1
 80159fe:	4648      	mov	r0, r9
 8015a00:	f7fe ff63 	bl	80148ca <strncmp>
 8015a04:	4607      	mov	r7, r0
 8015a06:	2800      	cmp	r0, #0
 8015a08:	d167      	bne.n	8015ada <__gethex+0x10e>
 8015a0a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8015a0e:	4626      	mov	r6, r4
 8015a10:	f7ff ffc6 	bl	80159a0 <__hexdig_fun>
 8015a14:	2800      	cmp	r0, #0
 8015a16:	d062      	beq.n	8015ade <__gethex+0x112>
 8015a18:	4623      	mov	r3, r4
 8015a1a:	7818      	ldrb	r0, [r3, #0]
 8015a1c:	2830      	cmp	r0, #48	@ 0x30
 8015a1e:	4699      	mov	r9, r3
 8015a20:	f103 0301 	add.w	r3, r3, #1
 8015a24:	d0f9      	beq.n	8015a1a <__gethex+0x4e>
 8015a26:	f7ff ffbb 	bl	80159a0 <__hexdig_fun>
 8015a2a:	fab0 f580 	clz	r5, r0
 8015a2e:	096d      	lsrs	r5, r5, #5
 8015a30:	f04f 0b01 	mov.w	fp, #1
 8015a34:	464a      	mov	r2, r9
 8015a36:	4616      	mov	r6, r2
 8015a38:	3201      	adds	r2, #1
 8015a3a:	7830      	ldrb	r0, [r6, #0]
 8015a3c:	f7ff ffb0 	bl	80159a0 <__hexdig_fun>
 8015a40:	2800      	cmp	r0, #0
 8015a42:	d1f8      	bne.n	8015a36 <__gethex+0x6a>
 8015a44:	498d      	ldr	r1, [pc, #564]	@ (8015c7c <__gethex+0x2b0>)
 8015a46:	2201      	movs	r2, #1
 8015a48:	4630      	mov	r0, r6
 8015a4a:	f7fe ff3e 	bl	80148ca <strncmp>
 8015a4e:	2800      	cmp	r0, #0
 8015a50:	d13f      	bne.n	8015ad2 <__gethex+0x106>
 8015a52:	b944      	cbnz	r4, 8015a66 <__gethex+0x9a>
 8015a54:	1c74      	adds	r4, r6, #1
 8015a56:	4622      	mov	r2, r4
 8015a58:	4616      	mov	r6, r2
 8015a5a:	3201      	adds	r2, #1
 8015a5c:	7830      	ldrb	r0, [r6, #0]
 8015a5e:	f7ff ff9f 	bl	80159a0 <__hexdig_fun>
 8015a62:	2800      	cmp	r0, #0
 8015a64:	d1f8      	bne.n	8015a58 <__gethex+0x8c>
 8015a66:	1ba4      	subs	r4, r4, r6
 8015a68:	00a7      	lsls	r7, r4, #2
 8015a6a:	7833      	ldrb	r3, [r6, #0]
 8015a6c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8015a70:	2b50      	cmp	r3, #80	@ 0x50
 8015a72:	d13e      	bne.n	8015af2 <__gethex+0x126>
 8015a74:	7873      	ldrb	r3, [r6, #1]
 8015a76:	2b2b      	cmp	r3, #43	@ 0x2b
 8015a78:	d033      	beq.n	8015ae2 <__gethex+0x116>
 8015a7a:	2b2d      	cmp	r3, #45	@ 0x2d
 8015a7c:	d034      	beq.n	8015ae8 <__gethex+0x11c>
 8015a7e:	1c71      	adds	r1, r6, #1
 8015a80:	2400      	movs	r4, #0
 8015a82:	7808      	ldrb	r0, [r1, #0]
 8015a84:	f7ff ff8c 	bl	80159a0 <__hexdig_fun>
 8015a88:	1e43      	subs	r3, r0, #1
 8015a8a:	b2db      	uxtb	r3, r3
 8015a8c:	2b18      	cmp	r3, #24
 8015a8e:	d830      	bhi.n	8015af2 <__gethex+0x126>
 8015a90:	f1a0 0210 	sub.w	r2, r0, #16
 8015a94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015a98:	f7ff ff82 	bl	80159a0 <__hexdig_fun>
 8015a9c:	f100 3cff 	add.w	ip, r0, #4294967295
 8015aa0:	fa5f fc8c 	uxtb.w	ip, ip
 8015aa4:	f1bc 0f18 	cmp.w	ip, #24
 8015aa8:	f04f 030a 	mov.w	r3, #10
 8015aac:	d91e      	bls.n	8015aec <__gethex+0x120>
 8015aae:	b104      	cbz	r4, 8015ab2 <__gethex+0xe6>
 8015ab0:	4252      	negs	r2, r2
 8015ab2:	4417      	add	r7, r2
 8015ab4:	f8ca 1000 	str.w	r1, [sl]
 8015ab8:	b1ed      	cbz	r5, 8015af6 <__gethex+0x12a>
 8015aba:	f1bb 0f00 	cmp.w	fp, #0
 8015abe:	bf0c      	ite	eq
 8015ac0:	2506      	moveq	r5, #6
 8015ac2:	2500      	movne	r5, #0
 8015ac4:	4628      	mov	r0, r5
 8015ac6:	b005      	add	sp, #20
 8015ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015acc:	2500      	movs	r5, #0
 8015ace:	462c      	mov	r4, r5
 8015ad0:	e7b0      	b.n	8015a34 <__gethex+0x68>
 8015ad2:	2c00      	cmp	r4, #0
 8015ad4:	d1c7      	bne.n	8015a66 <__gethex+0x9a>
 8015ad6:	4627      	mov	r7, r4
 8015ad8:	e7c7      	b.n	8015a6a <__gethex+0x9e>
 8015ada:	464e      	mov	r6, r9
 8015adc:	462f      	mov	r7, r5
 8015ade:	2501      	movs	r5, #1
 8015ae0:	e7c3      	b.n	8015a6a <__gethex+0x9e>
 8015ae2:	2400      	movs	r4, #0
 8015ae4:	1cb1      	adds	r1, r6, #2
 8015ae6:	e7cc      	b.n	8015a82 <__gethex+0xb6>
 8015ae8:	2401      	movs	r4, #1
 8015aea:	e7fb      	b.n	8015ae4 <__gethex+0x118>
 8015aec:	fb03 0002 	mla	r0, r3, r2, r0
 8015af0:	e7ce      	b.n	8015a90 <__gethex+0xc4>
 8015af2:	4631      	mov	r1, r6
 8015af4:	e7de      	b.n	8015ab4 <__gethex+0xe8>
 8015af6:	eba6 0309 	sub.w	r3, r6, r9
 8015afa:	3b01      	subs	r3, #1
 8015afc:	4629      	mov	r1, r5
 8015afe:	2b07      	cmp	r3, #7
 8015b00:	dc0a      	bgt.n	8015b18 <__gethex+0x14c>
 8015b02:	9801      	ldr	r0, [sp, #4]
 8015b04:	f000 fa7a 	bl	8015ffc <_Balloc>
 8015b08:	4604      	mov	r4, r0
 8015b0a:	b940      	cbnz	r0, 8015b1e <__gethex+0x152>
 8015b0c:	4b5c      	ldr	r3, [pc, #368]	@ (8015c80 <__gethex+0x2b4>)
 8015b0e:	4602      	mov	r2, r0
 8015b10:	21e4      	movs	r1, #228	@ 0xe4
 8015b12:	485c      	ldr	r0, [pc, #368]	@ (8015c84 <__gethex+0x2b8>)
 8015b14:	f7fc fb3c 	bl	8012190 <__assert_func>
 8015b18:	3101      	adds	r1, #1
 8015b1a:	105b      	asrs	r3, r3, #1
 8015b1c:	e7ef      	b.n	8015afe <__gethex+0x132>
 8015b1e:	f100 0a14 	add.w	sl, r0, #20
 8015b22:	2300      	movs	r3, #0
 8015b24:	4655      	mov	r5, sl
 8015b26:	469b      	mov	fp, r3
 8015b28:	45b1      	cmp	r9, r6
 8015b2a:	d337      	bcc.n	8015b9c <__gethex+0x1d0>
 8015b2c:	f845 bb04 	str.w	fp, [r5], #4
 8015b30:	eba5 050a 	sub.w	r5, r5, sl
 8015b34:	10ad      	asrs	r5, r5, #2
 8015b36:	6125      	str	r5, [r4, #16]
 8015b38:	4658      	mov	r0, fp
 8015b3a:	f000 fb51 	bl	80161e0 <__hi0bits>
 8015b3e:	016d      	lsls	r5, r5, #5
 8015b40:	f8d8 6000 	ldr.w	r6, [r8]
 8015b44:	1a2d      	subs	r5, r5, r0
 8015b46:	42b5      	cmp	r5, r6
 8015b48:	dd54      	ble.n	8015bf4 <__gethex+0x228>
 8015b4a:	1bad      	subs	r5, r5, r6
 8015b4c:	4629      	mov	r1, r5
 8015b4e:	4620      	mov	r0, r4
 8015b50:	f000 fedd 	bl	801690e <__any_on>
 8015b54:	4681      	mov	r9, r0
 8015b56:	b178      	cbz	r0, 8015b78 <__gethex+0x1ac>
 8015b58:	1e6b      	subs	r3, r5, #1
 8015b5a:	1159      	asrs	r1, r3, #5
 8015b5c:	f003 021f 	and.w	r2, r3, #31
 8015b60:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8015b64:	f04f 0901 	mov.w	r9, #1
 8015b68:	fa09 f202 	lsl.w	r2, r9, r2
 8015b6c:	420a      	tst	r2, r1
 8015b6e:	d003      	beq.n	8015b78 <__gethex+0x1ac>
 8015b70:	454b      	cmp	r3, r9
 8015b72:	dc36      	bgt.n	8015be2 <__gethex+0x216>
 8015b74:	f04f 0902 	mov.w	r9, #2
 8015b78:	4629      	mov	r1, r5
 8015b7a:	4620      	mov	r0, r4
 8015b7c:	f7ff febe 	bl	80158fc <rshift>
 8015b80:	442f      	add	r7, r5
 8015b82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015b86:	42bb      	cmp	r3, r7
 8015b88:	da42      	bge.n	8015c10 <__gethex+0x244>
 8015b8a:	9801      	ldr	r0, [sp, #4]
 8015b8c:	4621      	mov	r1, r4
 8015b8e:	f000 fa75 	bl	801607c <_Bfree>
 8015b92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015b94:	2300      	movs	r3, #0
 8015b96:	6013      	str	r3, [r2, #0]
 8015b98:	25a3      	movs	r5, #163	@ 0xa3
 8015b9a:	e793      	b.n	8015ac4 <__gethex+0xf8>
 8015b9c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8015ba0:	2a2e      	cmp	r2, #46	@ 0x2e
 8015ba2:	d012      	beq.n	8015bca <__gethex+0x1fe>
 8015ba4:	2b20      	cmp	r3, #32
 8015ba6:	d104      	bne.n	8015bb2 <__gethex+0x1e6>
 8015ba8:	f845 bb04 	str.w	fp, [r5], #4
 8015bac:	f04f 0b00 	mov.w	fp, #0
 8015bb0:	465b      	mov	r3, fp
 8015bb2:	7830      	ldrb	r0, [r6, #0]
 8015bb4:	9303      	str	r3, [sp, #12]
 8015bb6:	f7ff fef3 	bl	80159a0 <__hexdig_fun>
 8015bba:	9b03      	ldr	r3, [sp, #12]
 8015bbc:	f000 000f 	and.w	r0, r0, #15
 8015bc0:	4098      	lsls	r0, r3
 8015bc2:	ea4b 0b00 	orr.w	fp, fp, r0
 8015bc6:	3304      	adds	r3, #4
 8015bc8:	e7ae      	b.n	8015b28 <__gethex+0x15c>
 8015bca:	45b1      	cmp	r9, r6
 8015bcc:	d8ea      	bhi.n	8015ba4 <__gethex+0x1d8>
 8015bce:	492b      	ldr	r1, [pc, #172]	@ (8015c7c <__gethex+0x2b0>)
 8015bd0:	9303      	str	r3, [sp, #12]
 8015bd2:	2201      	movs	r2, #1
 8015bd4:	4630      	mov	r0, r6
 8015bd6:	f7fe fe78 	bl	80148ca <strncmp>
 8015bda:	9b03      	ldr	r3, [sp, #12]
 8015bdc:	2800      	cmp	r0, #0
 8015bde:	d1e1      	bne.n	8015ba4 <__gethex+0x1d8>
 8015be0:	e7a2      	b.n	8015b28 <__gethex+0x15c>
 8015be2:	1ea9      	subs	r1, r5, #2
 8015be4:	4620      	mov	r0, r4
 8015be6:	f000 fe92 	bl	801690e <__any_on>
 8015bea:	2800      	cmp	r0, #0
 8015bec:	d0c2      	beq.n	8015b74 <__gethex+0x1a8>
 8015bee:	f04f 0903 	mov.w	r9, #3
 8015bf2:	e7c1      	b.n	8015b78 <__gethex+0x1ac>
 8015bf4:	da09      	bge.n	8015c0a <__gethex+0x23e>
 8015bf6:	1b75      	subs	r5, r6, r5
 8015bf8:	4621      	mov	r1, r4
 8015bfa:	9801      	ldr	r0, [sp, #4]
 8015bfc:	462a      	mov	r2, r5
 8015bfe:	f000 fc4d 	bl	801649c <__lshift>
 8015c02:	1b7f      	subs	r7, r7, r5
 8015c04:	4604      	mov	r4, r0
 8015c06:	f100 0a14 	add.w	sl, r0, #20
 8015c0a:	f04f 0900 	mov.w	r9, #0
 8015c0e:	e7b8      	b.n	8015b82 <__gethex+0x1b6>
 8015c10:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015c14:	42bd      	cmp	r5, r7
 8015c16:	dd6f      	ble.n	8015cf8 <__gethex+0x32c>
 8015c18:	1bed      	subs	r5, r5, r7
 8015c1a:	42ae      	cmp	r6, r5
 8015c1c:	dc34      	bgt.n	8015c88 <__gethex+0x2bc>
 8015c1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015c22:	2b02      	cmp	r3, #2
 8015c24:	d022      	beq.n	8015c6c <__gethex+0x2a0>
 8015c26:	2b03      	cmp	r3, #3
 8015c28:	d024      	beq.n	8015c74 <__gethex+0x2a8>
 8015c2a:	2b01      	cmp	r3, #1
 8015c2c:	d115      	bne.n	8015c5a <__gethex+0x28e>
 8015c2e:	42ae      	cmp	r6, r5
 8015c30:	d113      	bne.n	8015c5a <__gethex+0x28e>
 8015c32:	2e01      	cmp	r6, #1
 8015c34:	d10b      	bne.n	8015c4e <__gethex+0x282>
 8015c36:	9a02      	ldr	r2, [sp, #8]
 8015c38:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015c3c:	6013      	str	r3, [r2, #0]
 8015c3e:	2301      	movs	r3, #1
 8015c40:	6123      	str	r3, [r4, #16]
 8015c42:	f8ca 3000 	str.w	r3, [sl]
 8015c46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015c48:	2562      	movs	r5, #98	@ 0x62
 8015c4a:	601c      	str	r4, [r3, #0]
 8015c4c:	e73a      	b.n	8015ac4 <__gethex+0xf8>
 8015c4e:	1e71      	subs	r1, r6, #1
 8015c50:	4620      	mov	r0, r4
 8015c52:	f000 fe5c 	bl	801690e <__any_on>
 8015c56:	2800      	cmp	r0, #0
 8015c58:	d1ed      	bne.n	8015c36 <__gethex+0x26a>
 8015c5a:	9801      	ldr	r0, [sp, #4]
 8015c5c:	4621      	mov	r1, r4
 8015c5e:	f000 fa0d 	bl	801607c <_Bfree>
 8015c62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015c64:	2300      	movs	r3, #0
 8015c66:	6013      	str	r3, [r2, #0]
 8015c68:	2550      	movs	r5, #80	@ 0x50
 8015c6a:	e72b      	b.n	8015ac4 <__gethex+0xf8>
 8015c6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d1f3      	bne.n	8015c5a <__gethex+0x28e>
 8015c72:	e7e0      	b.n	8015c36 <__gethex+0x26a>
 8015c74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d1dd      	bne.n	8015c36 <__gethex+0x26a>
 8015c7a:	e7ee      	b.n	8015c5a <__gethex+0x28e>
 8015c7c:	0801a034 	.word	0x0801a034
 8015c80:	0801a14d 	.word	0x0801a14d
 8015c84:	0801a15e 	.word	0x0801a15e
 8015c88:	1e6f      	subs	r7, r5, #1
 8015c8a:	f1b9 0f00 	cmp.w	r9, #0
 8015c8e:	d130      	bne.n	8015cf2 <__gethex+0x326>
 8015c90:	b127      	cbz	r7, 8015c9c <__gethex+0x2d0>
 8015c92:	4639      	mov	r1, r7
 8015c94:	4620      	mov	r0, r4
 8015c96:	f000 fe3a 	bl	801690e <__any_on>
 8015c9a:	4681      	mov	r9, r0
 8015c9c:	117a      	asrs	r2, r7, #5
 8015c9e:	2301      	movs	r3, #1
 8015ca0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8015ca4:	f007 071f 	and.w	r7, r7, #31
 8015ca8:	40bb      	lsls	r3, r7
 8015caa:	4213      	tst	r3, r2
 8015cac:	4629      	mov	r1, r5
 8015cae:	4620      	mov	r0, r4
 8015cb0:	bf18      	it	ne
 8015cb2:	f049 0902 	orrne.w	r9, r9, #2
 8015cb6:	f7ff fe21 	bl	80158fc <rshift>
 8015cba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8015cbe:	1b76      	subs	r6, r6, r5
 8015cc0:	2502      	movs	r5, #2
 8015cc2:	f1b9 0f00 	cmp.w	r9, #0
 8015cc6:	d047      	beq.n	8015d58 <__gethex+0x38c>
 8015cc8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015ccc:	2b02      	cmp	r3, #2
 8015cce:	d015      	beq.n	8015cfc <__gethex+0x330>
 8015cd0:	2b03      	cmp	r3, #3
 8015cd2:	d017      	beq.n	8015d04 <__gethex+0x338>
 8015cd4:	2b01      	cmp	r3, #1
 8015cd6:	d109      	bne.n	8015cec <__gethex+0x320>
 8015cd8:	f019 0f02 	tst.w	r9, #2
 8015cdc:	d006      	beq.n	8015cec <__gethex+0x320>
 8015cde:	f8da 3000 	ldr.w	r3, [sl]
 8015ce2:	ea49 0903 	orr.w	r9, r9, r3
 8015ce6:	f019 0f01 	tst.w	r9, #1
 8015cea:	d10e      	bne.n	8015d0a <__gethex+0x33e>
 8015cec:	f045 0510 	orr.w	r5, r5, #16
 8015cf0:	e032      	b.n	8015d58 <__gethex+0x38c>
 8015cf2:	f04f 0901 	mov.w	r9, #1
 8015cf6:	e7d1      	b.n	8015c9c <__gethex+0x2d0>
 8015cf8:	2501      	movs	r5, #1
 8015cfa:	e7e2      	b.n	8015cc2 <__gethex+0x2f6>
 8015cfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015cfe:	f1c3 0301 	rsb	r3, r3, #1
 8015d02:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015d04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d0f0      	beq.n	8015cec <__gethex+0x320>
 8015d0a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015d0e:	f104 0314 	add.w	r3, r4, #20
 8015d12:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015d16:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015d1a:	f04f 0c00 	mov.w	ip, #0
 8015d1e:	4618      	mov	r0, r3
 8015d20:	f853 2b04 	ldr.w	r2, [r3], #4
 8015d24:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015d28:	d01b      	beq.n	8015d62 <__gethex+0x396>
 8015d2a:	3201      	adds	r2, #1
 8015d2c:	6002      	str	r2, [r0, #0]
 8015d2e:	2d02      	cmp	r5, #2
 8015d30:	f104 0314 	add.w	r3, r4, #20
 8015d34:	d13c      	bne.n	8015db0 <__gethex+0x3e4>
 8015d36:	f8d8 2000 	ldr.w	r2, [r8]
 8015d3a:	3a01      	subs	r2, #1
 8015d3c:	42b2      	cmp	r2, r6
 8015d3e:	d109      	bne.n	8015d54 <__gethex+0x388>
 8015d40:	1171      	asrs	r1, r6, #5
 8015d42:	2201      	movs	r2, #1
 8015d44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015d48:	f006 061f 	and.w	r6, r6, #31
 8015d4c:	fa02 f606 	lsl.w	r6, r2, r6
 8015d50:	421e      	tst	r6, r3
 8015d52:	d13a      	bne.n	8015dca <__gethex+0x3fe>
 8015d54:	f045 0520 	orr.w	r5, r5, #32
 8015d58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015d5a:	601c      	str	r4, [r3, #0]
 8015d5c:	9b02      	ldr	r3, [sp, #8]
 8015d5e:	601f      	str	r7, [r3, #0]
 8015d60:	e6b0      	b.n	8015ac4 <__gethex+0xf8>
 8015d62:	4299      	cmp	r1, r3
 8015d64:	f843 cc04 	str.w	ip, [r3, #-4]
 8015d68:	d8d9      	bhi.n	8015d1e <__gethex+0x352>
 8015d6a:	68a3      	ldr	r3, [r4, #8]
 8015d6c:	459b      	cmp	fp, r3
 8015d6e:	db17      	blt.n	8015da0 <__gethex+0x3d4>
 8015d70:	6861      	ldr	r1, [r4, #4]
 8015d72:	9801      	ldr	r0, [sp, #4]
 8015d74:	3101      	adds	r1, #1
 8015d76:	f000 f941 	bl	8015ffc <_Balloc>
 8015d7a:	4681      	mov	r9, r0
 8015d7c:	b918      	cbnz	r0, 8015d86 <__gethex+0x3ba>
 8015d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8015de8 <__gethex+0x41c>)
 8015d80:	4602      	mov	r2, r0
 8015d82:	2184      	movs	r1, #132	@ 0x84
 8015d84:	e6c5      	b.n	8015b12 <__gethex+0x146>
 8015d86:	6922      	ldr	r2, [r4, #16]
 8015d88:	3202      	adds	r2, #2
 8015d8a:	f104 010c 	add.w	r1, r4, #12
 8015d8e:	0092      	lsls	r2, r2, #2
 8015d90:	300c      	adds	r0, #12
 8015d92:	f7fe feeb 	bl	8014b6c <memcpy>
 8015d96:	4621      	mov	r1, r4
 8015d98:	9801      	ldr	r0, [sp, #4]
 8015d9a:	f000 f96f 	bl	801607c <_Bfree>
 8015d9e:	464c      	mov	r4, r9
 8015da0:	6923      	ldr	r3, [r4, #16]
 8015da2:	1c5a      	adds	r2, r3, #1
 8015da4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015da8:	6122      	str	r2, [r4, #16]
 8015daa:	2201      	movs	r2, #1
 8015dac:	615a      	str	r2, [r3, #20]
 8015dae:	e7be      	b.n	8015d2e <__gethex+0x362>
 8015db0:	6922      	ldr	r2, [r4, #16]
 8015db2:	455a      	cmp	r2, fp
 8015db4:	dd0b      	ble.n	8015dce <__gethex+0x402>
 8015db6:	2101      	movs	r1, #1
 8015db8:	4620      	mov	r0, r4
 8015dba:	f7ff fd9f 	bl	80158fc <rshift>
 8015dbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015dc2:	3701      	adds	r7, #1
 8015dc4:	42bb      	cmp	r3, r7
 8015dc6:	f6ff aee0 	blt.w	8015b8a <__gethex+0x1be>
 8015dca:	2501      	movs	r5, #1
 8015dcc:	e7c2      	b.n	8015d54 <__gethex+0x388>
 8015dce:	f016 061f 	ands.w	r6, r6, #31
 8015dd2:	d0fa      	beq.n	8015dca <__gethex+0x3fe>
 8015dd4:	4453      	add	r3, sl
 8015dd6:	f1c6 0620 	rsb	r6, r6, #32
 8015dda:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015dde:	f000 f9ff 	bl	80161e0 <__hi0bits>
 8015de2:	42b0      	cmp	r0, r6
 8015de4:	dbe7      	blt.n	8015db6 <__gethex+0x3ea>
 8015de6:	e7f0      	b.n	8015dca <__gethex+0x3fe>
 8015de8:	0801a14d 	.word	0x0801a14d

08015dec <L_shift>:
 8015dec:	f1c2 0208 	rsb	r2, r2, #8
 8015df0:	0092      	lsls	r2, r2, #2
 8015df2:	b570      	push	{r4, r5, r6, lr}
 8015df4:	f1c2 0620 	rsb	r6, r2, #32
 8015df8:	6843      	ldr	r3, [r0, #4]
 8015dfa:	6804      	ldr	r4, [r0, #0]
 8015dfc:	fa03 f506 	lsl.w	r5, r3, r6
 8015e00:	432c      	orrs	r4, r5
 8015e02:	40d3      	lsrs	r3, r2
 8015e04:	6004      	str	r4, [r0, #0]
 8015e06:	f840 3f04 	str.w	r3, [r0, #4]!
 8015e0a:	4288      	cmp	r0, r1
 8015e0c:	d3f4      	bcc.n	8015df8 <L_shift+0xc>
 8015e0e:	bd70      	pop	{r4, r5, r6, pc}

08015e10 <__match>:
 8015e10:	b530      	push	{r4, r5, lr}
 8015e12:	6803      	ldr	r3, [r0, #0]
 8015e14:	3301      	adds	r3, #1
 8015e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015e1a:	b914      	cbnz	r4, 8015e22 <__match+0x12>
 8015e1c:	6003      	str	r3, [r0, #0]
 8015e1e:	2001      	movs	r0, #1
 8015e20:	bd30      	pop	{r4, r5, pc}
 8015e22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015e26:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8015e2a:	2d19      	cmp	r5, #25
 8015e2c:	bf98      	it	ls
 8015e2e:	3220      	addls	r2, #32
 8015e30:	42a2      	cmp	r2, r4
 8015e32:	d0f0      	beq.n	8015e16 <__match+0x6>
 8015e34:	2000      	movs	r0, #0
 8015e36:	e7f3      	b.n	8015e20 <__match+0x10>

08015e38 <__hexnan>:
 8015e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e3c:	680b      	ldr	r3, [r1, #0]
 8015e3e:	6801      	ldr	r1, [r0, #0]
 8015e40:	115e      	asrs	r6, r3, #5
 8015e42:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015e46:	f013 031f 	ands.w	r3, r3, #31
 8015e4a:	b087      	sub	sp, #28
 8015e4c:	bf18      	it	ne
 8015e4e:	3604      	addne	r6, #4
 8015e50:	2500      	movs	r5, #0
 8015e52:	1f37      	subs	r7, r6, #4
 8015e54:	4682      	mov	sl, r0
 8015e56:	4690      	mov	r8, r2
 8015e58:	9301      	str	r3, [sp, #4]
 8015e5a:	f846 5c04 	str.w	r5, [r6, #-4]
 8015e5e:	46b9      	mov	r9, r7
 8015e60:	463c      	mov	r4, r7
 8015e62:	9502      	str	r5, [sp, #8]
 8015e64:	46ab      	mov	fp, r5
 8015e66:	784a      	ldrb	r2, [r1, #1]
 8015e68:	1c4b      	adds	r3, r1, #1
 8015e6a:	9303      	str	r3, [sp, #12]
 8015e6c:	b342      	cbz	r2, 8015ec0 <__hexnan+0x88>
 8015e6e:	4610      	mov	r0, r2
 8015e70:	9105      	str	r1, [sp, #20]
 8015e72:	9204      	str	r2, [sp, #16]
 8015e74:	f7ff fd94 	bl	80159a0 <__hexdig_fun>
 8015e78:	2800      	cmp	r0, #0
 8015e7a:	d151      	bne.n	8015f20 <__hexnan+0xe8>
 8015e7c:	9a04      	ldr	r2, [sp, #16]
 8015e7e:	9905      	ldr	r1, [sp, #20]
 8015e80:	2a20      	cmp	r2, #32
 8015e82:	d818      	bhi.n	8015eb6 <__hexnan+0x7e>
 8015e84:	9b02      	ldr	r3, [sp, #8]
 8015e86:	459b      	cmp	fp, r3
 8015e88:	dd13      	ble.n	8015eb2 <__hexnan+0x7a>
 8015e8a:	454c      	cmp	r4, r9
 8015e8c:	d206      	bcs.n	8015e9c <__hexnan+0x64>
 8015e8e:	2d07      	cmp	r5, #7
 8015e90:	dc04      	bgt.n	8015e9c <__hexnan+0x64>
 8015e92:	462a      	mov	r2, r5
 8015e94:	4649      	mov	r1, r9
 8015e96:	4620      	mov	r0, r4
 8015e98:	f7ff ffa8 	bl	8015dec <L_shift>
 8015e9c:	4544      	cmp	r4, r8
 8015e9e:	d952      	bls.n	8015f46 <__hexnan+0x10e>
 8015ea0:	2300      	movs	r3, #0
 8015ea2:	f1a4 0904 	sub.w	r9, r4, #4
 8015ea6:	f844 3c04 	str.w	r3, [r4, #-4]
 8015eaa:	f8cd b008 	str.w	fp, [sp, #8]
 8015eae:	464c      	mov	r4, r9
 8015eb0:	461d      	mov	r5, r3
 8015eb2:	9903      	ldr	r1, [sp, #12]
 8015eb4:	e7d7      	b.n	8015e66 <__hexnan+0x2e>
 8015eb6:	2a29      	cmp	r2, #41	@ 0x29
 8015eb8:	d157      	bne.n	8015f6a <__hexnan+0x132>
 8015eba:	3102      	adds	r1, #2
 8015ebc:	f8ca 1000 	str.w	r1, [sl]
 8015ec0:	f1bb 0f00 	cmp.w	fp, #0
 8015ec4:	d051      	beq.n	8015f6a <__hexnan+0x132>
 8015ec6:	454c      	cmp	r4, r9
 8015ec8:	d206      	bcs.n	8015ed8 <__hexnan+0xa0>
 8015eca:	2d07      	cmp	r5, #7
 8015ecc:	dc04      	bgt.n	8015ed8 <__hexnan+0xa0>
 8015ece:	462a      	mov	r2, r5
 8015ed0:	4649      	mov	r1, r9
 8015ed2:	4620      	mov	r0, r4
 8015ed4:	f7ff ff8a 	bl	8015dec <L_shift>
 8015ed8:	4544      	cmp	r4, r8
 8015eda:	d936      	bls.n	8015f4a <__hexnan+0x112>
 8015edc:	f1a8 0204 	sub.w	r2, r8, #4
 8015ee0:	4623      	mov	r3, r4
 8015ee2:	f853 1b04 	ldr.w	r1, [r3], #4
 8015ee6:	f842 1f04 	str.w	r1, [r2, #4]!
 8015eea:	429f      	cmp	r7, r3
 8015eec:	d2f9      	bcs.n	8015ee2 <__hexnan+0xaa>
 8015eee:	1b3b      	subs	r3, r7, r4
 8015ef0:	f023 0303 	bic.w	r3, r3, #3
 8015ef4:	3304      	adds	r3, #4
 8015ef6:	3401      	adds	r4, #1
 8015ef8:	3e03      	subs	r6, #3
 8015efa:	42b4      	cmp	r4, r6
 8015efc:	bf88      	it	hi
 8015efe:	2304      	movhi	r3, #4
 8015f00:	4443      	add	r3, r8
 8015f02:	2200      	movs	r2, #0
 8015f04:	f843 2b04 	str.w	r2, [r3], #4
 8015f08:	429f      	cmp	r7, r3
 8015f0a:	d2fb      	bcs.n	8015f04 <__hexnan+0xcc>
 8015f0c:	683b      	ldr	r3, [r7, #0]
 8015f0e:	b91b      	cbnz	r3, 8015f18 <__hexnan+0xe0>
 8015f10:	4547      	cmp	r7, r8
 8015f12:	d128      	bne.n	8015f66 <__hexnan+0x12e>
 8015f14:	2301      	movs	r3, #1
 8015f16:	603b      	str	r3, [r7, #0]
 8015f18:	2005      	movs	r0, #5
 8015f1a:	b007      	add	sp, #28
 8015f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f20:	3501      	adds	r5, #1
 8015f22:	2d08      	cmp	r5, #8
 8015f24:	f10b 0b01 	add.w	fp, fp, #1
 8015f28:	dd06      	ble.n	8015f38 <__hexnan+0x100>
 8015f2a:	4544      	cmp	r4, r8
 8015f2c:	d9c1      	bls.n	8015eb2 <__hexnan+0x7a>
 8015f2e:	2300      	movs	r3, #0
 8015f30:	f844 3c04 	str.w	r3, [r4, #-4]
 8015f34:	2501      	movs	r5, #1
 8015f36:	3c04      	subs	r4, #4
 8015f38:	6822      	ldr	r2, [r4, #0]
 8015f3a:	f000 000f 	and.w	r0, r0, #15
 8015f3e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015f42:	6020      	str	r0, [r4, #0]
 8015f44:	e7b5      	b.n	8015eb2 <__hexnan+0x7a>
 8015f46:	2508      	movs	r5, #8
 8015f48:	e7b3      	b.n	8015eb2 <__hexnan+0x7a>
 8015f4a:	9b01      	ldr	r3, [sp, #4]
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d0dd      	beq.n	8015f0c <__hexnan+0xd4>
 8015f50:	f1c3 0320 	rsb	r3, r3, #32
 8015f54:	f04f 32ff 	mov.w	r2, #4294967295
 8015f58:	40da      	lsrs	r2, r3
 8015f5a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8015f5e:	4013      	ands	r3, r2
 8015f60:	f846 3c04 	str.w	r3, [r6, #-4]
 8015f64:	e7d2      	b.n	8015f0c <__hexnan+0xd4>
 8015f66:	3f04      	subs	r7, #4
 8015f68:	e7d0      	b.n	8015f0c <__hexnan+0xd4>
 8015f6a:	2004      	movs	r0, #4
 8015f6c:	e7d5      	b.n	8015f1a <__hexnan+0xe2>
	...

08015f70 <_mallinfo_r>:
 8015f70:	b570      	push	{r4, r5, r6, lr}
 8015f72:	4c16      	ldr	r4, [pc, #88]	@ (8015fcc <_mallinfo_r+0x5c>)
 8015f74:	4605      	mov	r5, r0
 8015f76:	4608      	mov	r0, r1
 8015f78:	460e      	mov	r6, r1
 8015f7a:	f7f0 ff33 	bl	8006de4 <__malloc_lock>
 8015f7e:	6823      	ldr	r3, [r4, #0]
 8015f80:	b14b      	cbz	r3, 8015f96 <_mallinfo_r+0x26>
 8015f82:	2100      	movs	r1, #0
 8015f84:	4630      	mov	r0, r6
 8015f86:	f7f0 fea9 	bl	8006cdc <_sbrk_r>
 8015f8a:	1c42      	adds	r2, r0, #1
 8015f8c:	bf18      	it	ne
 8015f8e:	6822      	ldrne	r2, [r4, #0]
 8015f90:	4603      	mov	r3, r0
 8015f92:	bf18      	it	ne
 8015f94:	1a83      	subne	r3, r0, r2
 8015f96:	4a0e      	ldr	r2, [pc, #56]	@ (8015fd0 <_mallinfo_r+0x60>)
 8015f98:	6811      	ldr	r1, [r2, #0]
 8015f9a:	2200      	movs	r2, #0
 8015f9c:	b991      	cbnz	r1, 8015fc4 <_mallinfo_r+0x54>
 8015f9e:	4c0d      	ldr	r4, [pc, #52]	@ (8015fd4 <_mallinfo_r+0x64>)
 8015fa0:	4630      	mov	r0, r6
 8015fa2:	6023      	str	r3, [r4, #0]
 8015fa4:	1a9b      	subs	r3, r3, r2
 8015fa6:	6222      	str	r2, [r4, #32]
 8015fa8:	61e3      	str	r3, [r4, #28]
 8015faa:	f7f0 ff55 	bl	8006e58 <__malloc_unlock>
 8015fae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015fb0:	462e      	mov	r6, r5
 8015fb2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015fb6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015fb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015fbc:	e886 0003 	stmia.w	r6, {r0, r1}
 8015fc0:	4628      	mov	r0, r5
 8015fc2:	bd70      	pop	{r4, r5, r6, pc}
 8015fc4:	6808      	ldr	r0, [r1, #0]
 8015fc6:	6849      	ldr	r1, [r1, #4]
 8015fc8:	4402      	add	r2, r0
 8015fca:	e7e7      	b.n	8015f9c <_mallinfo_r+0x2c>
 8015fcc:	20000664 	.word	0x20000664
 8015fd0:	20000668 	.word	0x20000668
 8015fd4:	200007b4 	.word	0x200007b4

08015fd8 <__ascii_mbtowc>:
 8015fd8:	b082      	sub	sp, #8
 8015fda:	b901      	cbnz	r1, 8015fde <__ascii_mbtowc+0x6>
 8015fdc:	a901      	add	r1, sp, #4
 8015fde:	b142      	cbz	r2, 8015ff2 <__ascii_mbtowc+0x1a>
 8015fe0:	b14b      	cbz	r3, 8015ff6 <__ascii_mbtowc+0x1e>
 8015fe2:	7813      	ldrb	r3, [r2, #0]
 8015fe4:	600b      	str	r3, [r1, #0]
 8015fe6:	7812      	ldrb	r2, [r2, #0]
 8015fe8:	1e10      	subs	r0, r2, #0
 8015fea:	bf18      	it	ne
 8015fec:	2001      	movne	r0, #1
 8015fee:	b002      	add	sp, #8
 8015ff0:	4770      	bx	lr
 8015ff2:	4610      	mov	r0, r2
 8015ff4:	e7fb      	b.n	8015fee <__ascii_mbtowc+0x16>
 8015ff6:	f06f 0001 	mvn.w	r0, #1
 8015ffa:	e7f8      	b.n	8015fee <__ascii_mbtowc+0x16>

08015ffc <_Balloc>:
 8015ffc:	b570      	push	{r4, r5, r6, lr}
 8015ffe:	69c6      	ldr	r6, [r0, #28]
 8016000:	4604      	mov	r4, r0
 8016002:	460d      	mov	r5, r1
 8016004:	b976      	cbnz	r6, 8016024 <_Balloc+0x28>
 8016006:	2010      	movs	r0, #16
 8016008:	f7fc f94c 	bl	80122a4 <malloc>
 801600c:	4602      	mov	r2, r0
 801600e:	61e0      	str	r0, [r4, #28]
 8016010:	b920      	cbnz	r0, 801601c <_Balloc+0x20>
 8016012:	4b18      	ldr	r3, [pc, #96]	@ (8016074 <_Balloc+0x78>)
 8016014:	4818      	ldr	r0, [pc, #96]	@ (8016078 <_Balloc+0x7c>)
 8016016:	216b      	movs	r1, #107	@ 0x6b
 8016018:	f7fc f8ba 	bl	8012190 <__assert_func>
 801601c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016020:	6006      	str	r6, [r0, #0]
 8016022:	60c6      	str	r6, [r0, #12]
 8016024:	69e6      	ldr	r6, [r4, #28]
 8016026:	68f3      	ldr	r3, [r6, #12]
 8016028:	b183      	cbz	r3, 801604c <_Balloc+0x50>
 801602a:	69e3      	ldr	r3, [r4, #28]
 801602c:	68db      	ldr	r3, [r3, #12]
 801602e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016032:	b9b8      	cbnz	r0, 8016064 <_Balloc+0x68>
 8016034:	2101      	movs	r1, #1
 8016036:	fa01 f605 	lsl.w	r6, r1, r5
 801603a:	1d72      	adds	r2, r6, #5
 801603c:	0092      	lsls	r2, r2, #2
 801603e:	4620      	mov	r0, r4
 8016040:	f7fc f8d4 	bl	80121ec <_calloc_r>
 8016044:	b160      	cbz	r0, 8016060 <_Balloc+0x64>
 8016046:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801604a:	e00e      	b.n	801606a <_Balloc+0x6e>
 801604c:	2221      	movs	r2, #33	@ 0x21
 801604e:	2104      	movs	r1, #4
 8016050:	4620      	mov	r0, r4
 8016052:	f7fc f8cb 	bl	80121ec <_calloc_r>
 8016056:	69e3      	ldr	r3, [r4, #28]
 8016058:	60f0      	str	r0, [r6, #12]
 801605a:	68db      	ldr	r3, [r3, #12]
 801605c:	2b00      	cmp	r3, #0
 801605e:	d1e4      	bne.n	801602a <_Balloc+0x2e>
 8016060:	2000      	movs	r0, #0
 8016062:	bd70      	pop	{r4, r5, r6, pc}
 8016064:	6802      	ldr	r2, [r0, #0]
 8016066:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801606a:	2300      	movs	r3, #0
 801606c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016070:	e7f7      	b.n	8016062 <_Balloc+0x66>
 8016072:	bf00      	nop
 8016074:	0801a06f 	.word	0x0801a06f
 8016078:	0801a1be 	.word	0x0801a1be

0801607c <_Bfree>:
 801607c:	b570      	push	{r4, r5, r6, lr}
 801607e:	69c6      	ldr	r6, [r0, #28]
 8016080:	4605      	mov	r5, r0
 8016082:	460c      	mov	r4, r1
 8016084:	b976      	cbnz	r6, 80160a4 <_Bfree+0x28>
 8016086:	2010      	movs	r0, #16
 8016088:	f7fc f90c 	bl	80122a4 <malloc>
 801608c:	4602      	mov	r2, r0
 801608e:	61e8      	str	r0, [r5, #28]
 8016090:	b920      	cbnz	r0, 801609c <_Bfree+0x20>
 8016092:	4b09      	ldr	r3, [pc, #36]	@ (80160b8 <_Bfree+0x3c>)
 8016094:	4809      	ldr	r0, [pc, #36]	@ (80160bc <_Bfree+0x40>)
 8016096:	218f      	movs	r1, #143	@ 0x8f
 8016098:	f7fc f87a 	bl	8012190 <__assert_func>
 801609c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80160a0:	6006      	str	r6, [r0, #0]
 80160a2:	60c6      	str	r6, [r0, #12]
 80160a4:	b13c      	cbz	r4, 80160b6 <_Bfree+0x3a>
 80160a6:	69eb      	ldr	r3, [r5, #28]
 80160a8:	6862      	ldr	r2, [r4, #4]
 80160aa:	68db      	ldr	r3, [r3, #12]
 80160ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80160b0:	6021      	str	r1, [r4, #0]
 80160b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80160b6:	bd70      	pop	{r4, r5, r6, pc}
 80160b8:	0801a06f 	.word	0x0801a06f
 80160bc:	0801a1be 	.word	0x0801a1be

080160c0 <__multadd>:
 80160c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160c4:	690d      	ldr	r5, [r1, #16]
 80160c6:	4607      	mov	r7, r0
 80160c8:	460c      	mov	r4, r1
 80160ca:	461e      	mov	r6, r3
 80160cc:	f101 0c14 	add.w	ip, r1, #20
 80160d0:	2000      	movs	r0, #0
 80160d2:	f8dc 3000 	ldr.w	r3, [ip]
 80160d6:	b299      	uxth	r1, r3
 80160d8:	fb02 6101 	mla	r1, r2, r1, r6
 80160dc:	0c1e      	lsrs	r6, r3, #16
 80160de:	0c0b      	lsrs	r3, r1, #16
 80160e0:	fb02 3306 	mla	r3, r2, r6, r3
 80160e4:	b289      	uxth	r1, r1
 80160e6:	3001      	adds	r0, #1
 80160e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80160ec:	4285      	cmp	r5, r0
 80160ee:	f84c 1b04 	str.w	r1, [ip], #4
 80160f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80160f6:	dcec      	bgt.n	80160d2 <__multadd+0x12>
 80160f8:	b30e      	cbz	r6, 801613e <__multadd+0x7e>
 80160fa:	68a3      	ldr	r3, [r4, #8]
 80160fc:	42ab      	cmp	r3, r5
 80160fe:	dc19      	bgt.n	8016134 <__multadd+0x74>
 8016100:	6861      	ldr	r1, [r4, #4]
 8016102:	4638      	mov	r0, r7
 8016104:	3101      	adds	r1, #1
 8016106:	f7ff ff79 	bl	8015ffc <_Balloc>
 801610a:	4680      	mov	r8, r0
 801610c:	b928      	cbnz	r0, 801611a <__multadd+0x5a>
 801610e:	4602      	mov	r2, r0
 8016110:	4b0c      	ldr	r3, [pc, #48]	@ (8016144 <__multadd+0x84>)
 8016112:	480d      	ldr	r0, [pc, #52]	@ (8016148 <__multadd+0x88>)
 8016114:	21ba      	movs	r1, #186	@ 0xba
 8016116:	f7fc f83b 	bl	8012190 <__assert_func>
 801611a:	6922      	ldr	r2, [r4, #16]
 801611c:	3202      	adds	r2, #2
 801611e:	f104 010c 	add.w	r1, r4, #12
 8016122:	0092      	lsls	r2, r2, #2
 8016124:	300c      	adds	r0, #12
 8016126:	f7fe fd21 	bl	8014b6c <memcpy>
 801612a:	4621      	mov	r1, r4
 801612c:	4638      	mov	r0, r7
 801612e:	f7ff ffa5 	bl	801607c <_Bfree>
 8016132:	4644      	mov	r4, r8
 8016134:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016138:	3501      	adds	r5, #1
 801613a:	615e      	str	r6, [r3, #20]
 801613c:	6125      	str	r5, [r4, #16]
 801613e:	4620      	mov	r0, r4
 8016140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016144:	0801a14d 	.word	0x0801a14d
 8016148:	0801a1be 	.word	0x0801a1be

0801614c <__s2b>:
 801614c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016150:	460c      	mov	r4, r1
 8016152:	4615      	mov	r5, r2
 8016154:	461f      	mov	r7, r3
 8016156:	2209      	movs	r2, #9
 8016158:	3308      	adds	r3, #8
 801615a:	4606      	mov	r6, r0
 801615c:	fb93 f3f2 	sdiv	r3, r3, r2
 8016160:	2100      	movs	r1, #0
 8016162:	2201      	movs	r2, #1
 8016164:	429a      	cmp	r2, r3
 8016166:	db09      	blt.n	801617c <__s2b+0x30>
 8016168:	4630      	mov	r0, r6
 801616a:	f7ff ff47 	bl	8015ffc <_Balloc>
 801616e:	b940      	cbnz	r0, 8016182 <__s2b+0x36>
 8016170:	4602      	mov	r2, r0
 8016172:	4b19      	ldr	r3, [pc, #100]	@ (80161d8 <__s2b+0x8c>)
 8016174:	4819      	ldr	r0, [pc, #100]	@ (80161dc <__s2b+0x90>)
 8016176:	21d3      	movs	r1, #211	@ 0xd3
 8016178:	f7fc f80a 	bl	8012190 <__assert_func>
 801617c:	0052      	lsls	r2, r2, #1
 801617e:	3101      	adds	r1, #1
 8016180:	e7f0      	b.n	8016164 <__s2b+0x18>
 8016182:	9b08      	ldr	r3, [sp, #32]
 8016184:	6143      	str	r3, [r0, #20]
 8016186:	2d09      	cmp	r5, #9
 8016188:	f04f 0301 	mov.w	r3, #1
 801618c:	6103      	str	r3, [r0, #16]
 801618e:	dd16      	ble.n	80161be <__s2b+0x72>
 8016190:	f104 0909 	add.w	r9, r4, #9
 8016194:	46c8      	mov	r8, r9
 8016196:	442c      	add	r4, r5
 8016198:	f818 3b01 	ldrb.w	r3, [r8], #1
 801619c:	4601      	mov	r1, r0
 801619e:	3b30      	subs	r3, #48	@ 0x30
 80161a0:	220a      	movs	r2, #10
 80161a2:	4630      	mov	r0, r6
 80161a4:	f7ff ff8c 	bl	80160c0 <__multadd>
 80161a8:	45a0      	cmp	r8, r4
 80161aa:	d1f5      	bne.n	8016198 <__s2b+0x4c>
 80161ac:	f1a5 0408 	sub.w	r4, r5, #8
 80161b0:	444c      	add	r4, r9
 80161b2:	1b2d      	subs	r5, r5, r4
 80161b4:	1963      	adds	r3, r4, r5
 80161b6:	42bb      	cmp	r3, r7
 80161b8:	db04      	blt.n	80161c4 <__s2b+0x78>
 80161ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80161be:	340a      	adds	r4, #10
 80161c0:	2509      	movs	r5, #9
 80161c2:	e7f6      	b.n	80161b2 <__s2b+0x66>
 80161c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80161c8:	4601      	mov	r1, r0
 80161ca:	3b30      	subs	r3, #48	@ 0x30
 80161cc:	220a      	movs	r2, #10
 80161ce:	4630      	mov	r0, r6
 80161d0:	f7ff ff76 	bl	80160c0 <__multadd>
 80161d4:	e7ee      	b.n	80161b4 <__s2b+0x68>
 80161d6:	bf00      	nop
 80161d8:	0801a14d 	.word	0x0801a14d
 80161dc:	0801a1be 	.word	0x0801a1be

080161e0 <__hi0bits>:
 80161e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80161e4:	4603      	mov	r3, r0
 80161e6:	bf36      	itet	cc
 80161e8:	0403      	lslcc	r3, r0, #16
 80161ea:	2000      	movcs	r0, #0
 80161ec:	2010      	movcc	r0, #16
 80161ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80161f2:	bf3c      	itt	cc
 80161f4:	021b      	lslcc	r3, r3, #8
 80161f6:	3008      	addcc	r0, #8
 80161f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80161fc:	bf3c      	itt	cc
 80161fe:	011b      	lslcc	r3, r3, #4
 8016200:	3004      	addcc	r0, #4
 8016202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016206:	bf3c      	itt	cc
 8016208:	009b      	lslcc	r3, r3, #2
 801620a:	3002      	addcc	r0, #2
 801620c:	2b00      	cmp	r3, #0
 801620e:	db05      	blt.n	801621c <__hi0bits+0x3c>
 8016210:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8016214:	f100 0001 	add.w	r0, r0, #1
 8016218:	bf08      	it	eq
 801621a:	2020      	moveq	r0, #32
 801621c:	4770      	bx	lr

0801621e <__lo0bits>:
 801621e:	6803      	ldr	r3, [r0, #0]
 8016220:	4602      	mov	r2, r0
 8016222:	f013 0007 	ands.w	r0, r3, #7
 8016226:	d00b      	beq.n	8016240 <__lo0bits+0x22>
 8016228:	07d9      	lsls	r1, r3, #31
 801622a:	d421      	bmi.n	8016270 <__lo0bits+0x52>
 801622c:	0798      	lsls	r0, r3, #30
 801622e:	bf49      	itett	mi
 8016230:	085b      	lsrmi	r3, r3, #1
 8016232:	089b      	lsrpl	r3, r3, #2
 8016234:	2001      	movmi	r0, #1
 8016236:	6013      	strmi	r3, [r2, #0]
 8016238:	bf5c      	itt	pl
 801623a:	6013      	strpl	r3, [r2, #0]
 801623c:	2002      	movpl	r0, #2
 801623e:	4770      	bx	lr
 8016240:	b299      	uxth	r1, r3
 8016242:	b909      	cbnz	r1, 8016248 <__lo0bits+0x2a>
 8016244:	0c1b      	lsrs	r3, r3, #16
 8016246:	2010      	movs	r0, #16
 8016248:	b2d9      	uxtb	r1, r3
 801624a:	b909      	cbnz	r1, 8016250 <__lo0bits+0x32>
 801624c:	3008      	adds	r0, #8
 801624e:	0a1b      	lsrs	r3, r3, #8
 8016250:	0719      	lsls	r1, r3, #28
 8016252:	bf04      	itt	eq
 8016254:	091b      	lsreq	r3, r3, #4
 8016256:	3004      	addeq	r0, #4
 8016258:	0799      	lsls	r1, r3, #30
 801625a:	bf04      	itt	eq
 801625c:	089b      	lsreq	r3, r3, #2
 801625e:	3002      	addeq	r0, #2
 8016260:	07d9      	lsls	r1, r3, #31
 8016262:	d403      	bmi.n	801626c <__lo0bits+0x4e>
 8016264:	085b      	lsrs	r3, r3, #1
 8016266:	f100 0001 	add.w	r0, r0, #1
 801626a:	d003      	beq.n	8016274 <__lo0bits+0x56>
 801626c:	6013      	str	r3, [r2, #0]
 801626e:	4770      	bx	lr
 8016270:	2000      	movs	r0, #0
 8016272:	4770      	bx	lr
 8016274:	2020      	movs	r0, #32
 8016276:	4770      	bx	lr

08016278 <__i2b>:
 8016278:	b510      	push	{r4, lr}
 801627a:	460c      	mov	r4, r1
 801627c:	2101      	movs	r1, #1
 801627e:	f7ff febd 	bl	8015ffc <_Balloc>
 8016282:	4602      	mov	r2, r0
 8016284:	b928      	cbnz	r0, 8016292 <__i2b+0x1a>
 8016286:	4b05      	ldr	r3, [pc, #20]	@ (801629c <__i2b+0x24>)
 8016288:	4805      	ldr	r0, [pc, #20]	@ (80162a0 <__i2b+0x28>)
 801628a:	f240 1145 	movw	r1, #325	@ 0x145
 801628e:	f7fb ff7f 	bl	8012190 <__assert_func>
 8016292:	2301      	movs	r3, #1
 8016294:	6144      	str	r4, [r0, #20]
 8016296:	6103      	str	r3, [r0, #16]
 8016298:	bd10      	pop	{r4, pc}
 801629a:	bf00      	nop
 801629c:	0801a14d 	.word	0x0801a14d
 80162a0:	0801a1be 	.word	0x0801a1be

080162a4 <__multiply>:
 80162a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162a8:	4617      	mov	r7, r2
 80162aa:	690a      	ldr	r2, [r1, #16]
 80162ac:	693b      	ldr	r3, [r7, #16]
 80162ae:	429a      	cmp	r2, r3
 80162b0:	bfa8      	it	ge
 80162b2:	463b      	movge	r3, r7
 80162b4:	4689      	mov	r9, r1
 80162b6:	bfa4      	itt	ge
 80162b8:	460f      	movge	r7, r1
 80162ba:	4699      	movge	r9, r3
 80162bc:	693d      	ldr	r5, [r7, #16]
 80162be:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80162c2:	68bb      	ldr	r3, [r7, #8]
 80162c4:	6879      	ldr	r1, [r7, #4]
 80162c6:	eb05 060a 	add.w	r6, r5, sl
 80162ca:	42b3      	cmp	r3, r6
 80162cc:	b085      	sub	sp, #20
 80162ce:	bfb8      	it	lt
 80162d0:	3101      	addlt	r1, #1
 80162d2:	f7ff fe93 	bl	8015ffc <_Balloc>
 80162d6:	b930      	cbnz	r0, 80162e6 <__multiply+0x42>
 80162d8:	4602      	mov	r2, r0
 80162da:	4b41      	ldr	r3, [pc, #260]	@ (80163e0 <__multiply+0x13c>)
 80162dc:	4841      	ldr	r0, [pc, #260]	@ (80163e4 <__multiply+0x140>)
 80162de:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80162e2:	f7fb ff55 	bl	8012190 <__assert_func>
 80162e6:	f100 0414 	add.w	r4, r0, #20
 80162ea:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80162ee:	4623      	mov	r3, r4
 80162f0:	2200      	movs	r2, #0
 80162f2:	4573      	cmp	r3, lr
 80162f4:	d320      	bcc.n	8016338 <__multiply+0x94>
 80162f6:	f107 0814 	add.w	r8, r7, #20
 80162fa:	f109 0114 	add.w	r1, r9, #20
 80162fe:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8016302:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8016306:	9302      	str	r3, [sp, #8]
 8016308:	1beb      	subs	r3, r5, r7
 801630a:	3b15      	subs	r3, #21
 801630c:	f023 0303 	bic.w	r3, r3, #3
 8016310:	3304      	adds	r3, #4
 8016312:	3715      	adds	r7, #21
 8016314:	42bd      	cmp	r5, r7
 8016316:	bf38      	it	cc
 8016318:	2304      	movcc	r3, #4
 801631a:	9301      	str	r3, [sp, #4]
 801631c:	9b02      	ldr	r3, [sp, #8]
 801631e:	9103      	str	r1, [sp, #12]
 8016320:	428b      	cmp	r3, r1
 8016322:	d80c      	bhi.n	801633e <__multiply+0x9a>
 8016324:	2e00      	cmp	r6, #0
 8016326:	dd03      	ble.n	8016330 <__multiply+0x8c>
 8016328:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801632c:	2b00      	cmp	r3, #0
 801632e:	d055      	beq.n	80163dc <__multiply+0x138>
 8016330:	6106      	str	r6, [r0, #16]
 8016332:	b005      	add	sp, #20
 8016334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016338:	f843 2b04 	str.w	r2, [r3], #4
 801633c:	e7d9      	b.n	80162f2 <__multiply+0x4e>
 801633e:	f8b1 a000 	ldrh.w	sl, [r1]
 8016342:	f1ba 0f00 	cmp.w	sl, #0
 8016346:	d01f      	beq.n	8016388 <__multiply+0xe4>
 8016348:	46c4      	mov	ip, r8
 801634a:	46a1      	mov	r9, r4
 801634c:	2700      	movs	r7, #0
 801634e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016352:	f8d9 3000 	ldr.w	r3, [r9]
 8016356:	fa1f fb82 	uxth.w	fp, r2
 801635a:	b29b      	uxth	r3, r3
 801635c:	fb0a 330b 	mla	r3, sl, fp, r3
 8016360:	443b      	add	r3, r7
 8016362:	f8d9 7000 	ldr.w	r7, [r9]
 8016366:	0c12      	lsrs	r2, r2, #16
 8016368:	0c3f      	lsrs	r7, r7, #16
 801636a:	fb0a 7202 	mla	r2, sl, r2, r7
 801636e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8016372:	b29b      	uxth	r3, r3
 8016374:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016378:	4565      	cmp	r5, ip
 801637a:	f849 3b04 	str.w	r3, [r9], #4
 801637e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8016382:	d8e4      	bhi.n	801634e <__multiply+0xaa>
 8016384:	9b01      	ldr	r3, [sp, #4]
 8016386:	50e7      	str	r7, [r4, r3]
 8016388:	9b03      	ldr	r3, [sp, #12]
 801638a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801638e:	3104      	adds	r1, #4
 8016390:	f1b9 0f00 	cmp.w	r9, #0
 8016394:	d020      	beq.n	80163d8 <__multiply+0x134>
 8016396:	6823      	ldr	r3, [r4, #0]
 8016398:	4647      	mov	r7, r8
 801639a:	46a4      	mov	ip, r4
 801639c:	f04f 0a00 	mov.w	sl, #0
 80163a0:	f8b7 b000 	ldrh.w	fp, [r7]
 80163a4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80163a8:	fb09 220b 	mla	r2, r9, fp, r2
 80163ac:	4452      	add	r2, sl
 80163ae:	b29b      	uxth	r3, r3
 80163b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80163b4:	f84c 3b04 	str.w	r3, [ip], #4
 80163b8:	f857 3b04 	ldr.w	r3, [r7], #4
 80163bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80163c0:	f8bc 3000 	ldrh.w	r3, [ip]
 80163c4:	fb09 330a 	mla	r3, r9, sl, r3
 80163c8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80163cc:	42bd      	cmp	r5, r7
 80163ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80163d2:	d8e5      	bhi.n	80163a0 <__multiply+0xfc>
 80163d4:	9a01      	ldr	r2, [sp, #4]
 80163d6:	50a3      	str	r3, [r4, r2]
 80163d8:	3404      	adds	r4, #4
 80163da:	e79f      	b.n	801631c <__multiply+0x78>
 80163dc:	3e01      	subs	r6, #1
 80163de:	e7a1      	b.n	8016324 <__multiply+0x80>
 80163e0:	0801a14d 	.word	0x0801a14d
 80163e4:	0801a1be 	.word	0x0801a1be

080163e8 <__pow5mult>:
 80163e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80163ec:	4615      	mov	r5, r2
 80163ee:	f012 0203 	ands.w	r2, r2, #3
 80163f2:	4607      	mov	r7, r0
 80163f4:	460e      	mov	r6, r1
 80163f6:	d007      	beq.n	8016408 <__pow5mult+0x20>
 80163f8:	4c25      	ldr	r4, [pc, #148]	@ (8016490 <__pow5mult+0xa8>)
 80163fa:	3a01      	subs	r2, #1
 80163fc:	2300      	movs	r3, #0
 80163fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016402:	f7ff fe5d 	bl	80160c0 <__multadd>
 8016406:	4606      	mov	r6, r0
 8016408:	10ad      	asrs	r5, r5, #2
 801640a:	d03d      	beq.n	8016488 <__pow5mult+0xa0>
 801640c:	69fc      	ldr	r4, [r7, #28]
 801640e:	b97c      	cbnz	r4, 8016430 <__pow5mult+0x48>
 8016410:	2010      	movs	r0, #16
 8016412:	f7fb ff47 	bl	80122a4 <malloc>
 8016416:	4602      	mov	r2, r0
 8016418:	61f8      	str	r0, [r7, #28]
 801641a:	b928      	cbnz	r0, 8016428 <__pow5mult+0x40>
 801641c:	4b1d      	ldr	r3, [pc, #116]	@ (8016494 <__pow5mult+0xac>)
 801641e:	481e      	ldr	r0, [pc, #120]	@ (8016498 <__pow5mult+0xb0>)
 8016420:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8016424:	f7fb feb4 	bl	8012190 <__assert_func>
 8016428:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801642c:	6004      	str	r4, [r0, #0]
 801642e:	60c4      	str	r4, [r0, #12]
 8016430:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8016434:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016438:	b94c      	cbnz	r4, 801644e <__pow5mult+0x66>
 801643a:	f240 2171 	movw	r1, #625	@ 0x271
 801643e:	4638      	mov	r0, r7
 8016440:	f7ff ff1a 	bl	8016278 <__i2b>
 8016444:	2300      	movs	r3, #0
 8016446:	f8c8 0008 	str.w	r0, [r8, #8]
 801644a:	4604      	mov	r4, r0
 801644c:	6003      	str	r3, [r0, #0]
 801644e:	f04f 0900 	mov.w	r9, #0
 8016452:	07eb      	lsls	r3, r5, #31
 8016454:	d50a      	bpl.n	801646c <__pow5mult+0x84>
 8016456:	4631      	mov	r1, r6
 8016458:	4622      	mov	r2, r4
 801645a:	4638      	mov	r0, r7
 801645c:	f7ff ff22 	bl	80162a4 <__multiply>
 8016460:	4631      	mov	r1, r6
 8016462:	4680      	mov	r8, r0
 8016464:	4638      	mov	r0, r7
 8016466:	f7ff fe09 	bl	801607c <_Bfree>
 801646a:	4646      	mov	r6, r8
 801646c:	106d      	asrs	r5, r5, #1
 801646e:	d00b      	beq.n	8016488 <__pow5mult+0xa0>
 8016470:	6820      	ldr	r0, [r4, #0]
 8016472:	b938      	cbnz	r0, 8016484 <__pow5mult+0x9c>
 8016474:	4622      	mov	r2, r4
 8016476:	4621      	mov	r1, r4
 8016478:	4638      	mov	r0, r7
 801647a:	f7ff ff13 	bl	80162a4 <__multiply>
 801647e:	6020      	str	r0, [r4, #0]
 8016480:	f8c0 9000 	str.w	r9, [r0]
 8016484:	4604      	mov	r4, r0
 8016486:	e7e4      	b.n	8016452 <__pow5mult+0x6a>
 8016488:	4630      	mov	r0, r6
 801648a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801648e:	bf00      	nop
 8016490:	0801a37c 	.word	0x0801a37c
 8016494:	0801a06f 	.word	0x0801a06f
 8016498:	0801a1be 	.word	0x0801a1be

0801649c <__lshift>:
 801649c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164a0:	460c      	mov	r4, r1
 80164a2:	6849      	ldr	r1, [r1, #4]
 80164a4:	6923      	ldr	r3, [r4, #16]
 80164a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80164aa:	68a3      	ldr	r3, [r4, #8]
 80164ac:	4607      	mov	r7, r0
 80164ae:	4691      	mov	r9, r2
 80164b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80164b4:	f108 0601 	add.w	r6, r8, #1
 80164b8:	42b3      	cmp	r3, r6
 80164ba:	db0b      	blt.n	80164d4 <__lshift+0x38>
 80164bc:	4638      	mov	r0, r7
 80164be:	f7ff fd9d 	bl	8015ffc <_Balloc>
 80164c2:	4605      	mov	r5, r0
 80164c4:	b948      	cbnz	r0, 80164da <__lshift+0x3e>
 80164c6:	4602      	mov	r2, r0
 80164c8:	4b28      	ldr	r3, [pc, #160]	@ (801656c <__lshift+0xd0>)
 80164ca:	4829      	ldr	r0, [pc, #164]	@ (8016570 <__lshift+0xd4>)
 80164cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80164d0:	f7fb fe5e 	bl	8012190 <__assert_func>
 80164d4:	3101      	adds	r1, #1
 80164d6:	005b      	lsls	r3, r3, #1
 80164d8:	e7ee      	b.n	80164b8 <__lshift+0x1c>
 80164da:	2300      	movs	r3, #0
 80164dc:	f100 0114 	add.w	r1, r0, #20
 80164e0:	f100 0210 	add.w	r2, r0, #16
 80164e4:	4618      	mov	r0, r3
 80164e6:	4553      	cmp	r3, sl
 80164e8:	db33      	blt.n	8016552 <__lshift+0xb6>
 80164ea:	6920      	ldr	r0, [r4, #16]
 80164ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80164f0:	f104 0314 	add.w	r3, r4, #20
 80164f4:	f019 091f 	ands.w	r9, r9, #31
 80164f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80164fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016500:	d02b      	beq.n	801655a <__lshift+0xbe>
 8016502:	f1c9 0e20 	rsb	lr, r9, #32
 8016506:	468a      	mov	sl, r1
 8016508:	2200      	movs	r2, #0
 801650a:	6818      	ldr	r0, [r3, #0]
 801650c:	fa00 f009 	lsl.w	r0, r0, r9
 8016510:	4310      	orrs	r0, r2
 8016512:	f84a 0b04 	str.w	r0, [sl], #4
 8016516:	f853 2b04 	ldr.w	r2, [r3], #4
 801651a:	459c      	cmp	ip, r3
 801651c:	fa22 f20e 	lsr.w	r2, r2, lr
 8016520:	d8f3      	bhi.n	801650a <__lshift+0x6e>
 8016522:	ebac 0304 	sub.w	r3, ip, r4
 8016526:	3b15      	subs	r3, #21
 8016528:	f023 0303 	bic.w	r3, r3, #3
 801652c:	3304      	adds	r3, #4
 801652e:	f104 0015 	add.w	r0, r4, #21
 8016532:	4560      	cmp	r0, ip
 8016534:	bf88      	it	hi
 8016536:	2304      	movhi	r3, #4
 8016538:	50ca      	str	r2, [r1, r3]
 801653a:	b10a      	cbz	r2, 8016540 <__lshift+0xa4>
 801653c:	f108 0602 	add.w	r6, r8, #2
 8016540:	3e01      	subs	r6, #1
 8016542:	4638      	mov	r0, r7
 8016544:	612e      	str	r6, [r5, #16]
 8016546:	4621      	mov	r1, r4
 8016548:	f7ff fd98 	bl	801607c <_Bfree>
 801654c:	4628      	mov	r0, r5
 801654e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016552:	f842 0f04 	str.w	r0, [r2, #4]!
 8016556:	3301      	adds	r3, #1
 8016558:	e7c5      	b.n	80164e6 <__lshift+0x4a>
 801655a:	3904      	subs	r1, #4
 801655c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016560:	f841 2f04 	str.w	r2, [r1, #4]!
 8016564:	459c      	cmp	ip, r3
 8016566:	d8f9      	bhi.n	801655c <__lshift+0xc0>
 8016568:	e7ea      	b.n	8016540 <__lshift+0xa4>
 801656a:	bf00      	nop
 801656c:	0801a14d 	.word	0x0801a14d
 8016570:	0801a1be 	.word	0x0801a1be

08016574 <__mcmp>:
 8016574:	690a      	ldr	r2, [r1, #16]
 8016576:	4603      	mov	r3, r0
 8016578:	6900      	ldr	r0, [r0, #16]
 801657a:	1a80      	subs	r0, r0, r2
 801657c:	b530      	push	{r4, r5, lr}
 801657e:	d10e      	bne.n	801659e <__mcmp+0x2a>
 8016580:	3314      	adds	r3, #20
 8016582:	3114      	adds	r1, #20
 8016584:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016588:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801658c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016590:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016594:	4295      	cmp	r5, r2
 8016596:	d003      	beq.n	80165a0 <__mcmp+0x2c>
 8016598:	d205      	bcs.n	80165a6 <__mcmp+0x32>
 801659a:	f04f 30ff 	mov.w	r0, #4294967295
 801659e:	bd30      	pop	{r4, r5, pc}
 80165a0:	42a3      	cmp	r3, r4
 80165a2:	d3f3      	bcc.n	801658c <__mcmp+0x18>
 80165a4:	e7fb      	b.n	801659e <__mcmp+0x2a>
 80165a6:	2001      	movs	r0, #1
 80165a8:	e7f9      	b.n	801659e <__mcmp+0x2a>
	...

080165ac <__mdiff>:
 80165ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165b0:	4689      	mov	r9, r1
 80165b2:	4606      	mov	r6, r0
 80165b4:	4611      	mov	r1, r2
 80165b6:	4648      	mov	r0, r9
 80165b8:	4614      	mov	r4, r2
 80165ba:	f7ff ffdb 	bl	8016574 <__mcmp>
 80165be:	1e05      	subs	r5, r0, #0
 80165c0:	d112      	bne.n	80165e8 <__mdiff+0x3c>
 80165c2:	4629      	mov	r1, r5
 80165c4:	4630      	mov	r0, r6
 80165c6:	f7ff fd19 	bl	8015ffc <_Balloc>
 80165ca:	4602      	mov	r2, r0
 80165cc:	b928      	cbnz	r0, 80165da <__mdiff+0x2e>
 80165ce:	4b3f      	ldr	r3, [pc, #252]	@ (80166cc <__mdiff+0x120>)
 80165d0:	f240 2137 	movw	r1, #567	@ 0x237
 80165d4:	483e      	ldr	r0, [pc, #248]	@ (80166d0 <__mdiff+0x124>)
 80165d6:	f7fb fddb 	bl	8012190 <__assert_func>
 80165da:	2301      	movs	r3, #1
 80165dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80165e0:	4610      	mov	r0, r2
 80165e2:	b003      	add	sp, #12
 80165e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165e8:	bfbc      	itt	lt
 80165ea:	464b      	movlt	r3, r9
 80165ec:	46a1      	movlt	r9, r4
 80165ee:	4630      	mov	r0, r6
 80165f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80165f4:	bfba      	itte	lt
 80165f6:	461c      	movlt	r4, r3
 80165f8:	2501      	movlt	r5, #1
 80165fa:	2500      	movge	r5, #0
 80165fc:	f7ff fcfe 	bl	8015ffc <_Balloc>
 8016600:	4602      	mov	r2, r0
 8016602:	b918      	cbnz	r0, 801660c <__mdiff+0x60>
 8016604:	4b31      	ldr	r3, [pc, #196]	@ (80166cc <__mdiff+0x120>)
 8016606:	f240 2145 	movw	r1, #581	@ 0x245
 801660a:	e7e3      	b.n	80165d4 <__mdiff+0x28>
 801660c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016610:	6926      	ldr	r6, [r4, #16]
 8016612:	60c5      	str	r5, [r0, #12]
 8016614:	f109 0310 	add.w	r3, r9, #16
 8016618:	f109 0514 	add.w	r5, r9, #20
 801661c:	f104 0e14 	add.w	lr, r4, #20
 8016620:	f100 0b14 	add.w	fp, r0, #20
 8016624:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016628:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801662c:	9301      	str	r3, [sp, #4]
 801662e:	46d9      	mov	r9, fp
 8016630:	f04f 0c00 	mov.w	ip, #0
 8016634:	9b01      	ldr	r3, [sp, #4]
 8016636:	f85e 0b04 	ldr.w	r0, [lr], #4
 801663a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801663e:	9301      	str	r3, [sp, #4]
 8016640:	fa1f f38a 	uxth.w	r3, sl
 8016644:	4619      	mov	r1, r3
 8016646:	b283      	uxth	r3, r0
 8016648:	1acb      	subs	r3, r1, r3
 801664a:	0c00      	lsrs	r0, r0, #16
 801664c:	4463      	add	r3, ip
 801664e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8016652:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8016656:	b29b      	uxth	r3, r3
 8016658:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801665c:	4576      	cmp	r6, lr
 801665e:	f849 3b04 	str.w	r3, [r9], #4
 8016662:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016666:	d8e5      	bhi.n	8016634 <__mdiff+0x88>
 8016668:	1b33      	subs	r3, r6, r4
 801666a:	3b15      	subs	r3, #21
 801666c:	f023 0303 	bic.w	r3, r3, #3
 8016670:	3415      	adds	r4, #21
 8016672:	3304      	adds	r3, #4
 8016674:	42a6      	cmp	r6, r4
 8016676:	bf38      	it	cc
 8016678:	2304      	movcc	r3, #4
 801667a:	441d      	add	r5, r3
 801667c:	445b      	add	r3, fp
 801667e:	461e      	mov	r6, r3
 8016680:	462c      	mov	r4, r5
 8016682:	4544      	cmp	r4, r8
 8016684:	d30e      	bcc.n	80166a4 <__mdiff+0xf8>
 8016686:	f108 0103 	add.w	r1, r8, #3
 801668a:	1b49      	subs	r1, r1, r5
 801668c:	f021 0103 	bic.w	r1, r1, #3
 8016690:	3d03      	subs	r5, #3
 8016692:	45a8      	cmp	r8, r5
 8016694:	bf38      	it	cc
 8016696:	2100      	movcc	r1, #0
 8016698:	440b      	add	r3, r1
 801669a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801669e:	b191      	cbz	r1, 80166c6 <__mdiff+0x11a>
 80166a0:	6117      	str	r7, [r2, #16]
 80166a2:	e79d      	b.n	80165e0 <__mdiff+0x34>
 80166a4:	f854 1b04 	ldr.w	r1, [r4], #4
 80166a8:	46e6      	mov	lr, ip
 80166aa:	0c08      	lsrs	r0, r1, #16
 80166ac:	fa1c fc81 	uxtah	ip, ip, r1
 80166b0:	4471      	add	r1, lr
 80166b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80166b6:	b289      	uxth	r1, r1
 80166b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80166bc:	f846 1b04 	str.w	r1, [r6], #4
 80166c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80166c4:	e7dd      	b.n	8016682 <__mdiff+0xd6>
 80166c6:	3f01      	subs	r7, #1
 80166c8:	e7e7      	b.n	801669a <__mdiff+0xee>
 80166ca:	bf00      	nop
 80166cc:	0801a14d 	.word	0x0801a14d
 80166d0:	0801a1be 	.word	0x0801a1be

080166d4 <__ulp>:
 80166d4:	b082      	sub	sp, #8
 80166d6:	ed8d 0b00 	vstr	d0, [sp]
 80166da:	9a01      	ldr	r2, [sp, #4]
 80166dc:	4b0f      	ldr	r3, [pc, #60]	@ (801671c <__ulp+0x48>)
 80166de:	4013      	ands	r3, r2
 80166e0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	dc08      	bgt.n	80166fa <__ulp+0x26>
 80166e8:	425b      	negs	r3, r3
 80166ea:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80166ee:	ea4f 5223 	mov.w	r2, r3, asr #20
 80166f2:	da04      	bge.n	80166fe <__ulp+0x2a>
 80166f4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80166f8:	4113      	asrs	r3, r2
 80166fa:	2200      	movs	r2, #0
 80166fc:	e008      	b.n	8016710 <__ulp+0x3c>
 80166fe:	f1a2 0314 	sub.w	r3, r2, #20
 8016702:	2b1e      	cmp	r3, #30
 8016704:	bfda      	itte	le
 8016706:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801670a:	40da      	lsrle	r2, r3
 801670c:	2201      	movgt	r2, #1
 801670e:	2300      	movs	r3, #0
 8016710:	4619      	mov	r1, r3
 8016712:	4610      	mov	r0, r2
 8016714:	ec41 0b10 	vmov	d0, r0, r1
 8016718:	b002      	add	sp, #8
 801671a:	4770      	bx	lr
 801671c:	7ff00000 	.word	0x7ff00000

08016720 <__b2d>:
 8016720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016724:	6906      	ldr	r6, [r0, #16]
 8016726:	f100 0814 	add.w	r8, r0, #20
 801672a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801672e:	1f37      	subs	r7, r6, #4
 8016730:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016734:	4610      	mov	r0, r2
 8016736:	f7ff fd53 	bl	80161e0 <__hi0bits>
 801673a:	f1c0 0320 	rsb	r3, r0, #32
 801673e:	280a      	cmp	r0, #10
 8016740:	600b      	str	r3, [r1, #0]
 8016742:	491b      	ldr	r1, [pc, #108]	@ (80167b0 <__b2d+0x90>)
 8016744:	dc15      	bgt.n	8016772 <__b2d+0x52>
 8016746:	f1c0 0c0b 	rsb	ip, r0, #11
 801674a:	fa22 f30c 	lsr.w	r3, r2, ip
 801674e:	45b8      	cmp	r8, r7
 8016750:	ea43 0501 	orr.w	r5, r3, r1
 8016754:	bf34      	ite	cc
 8016756:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801675a:	2300      	movcs	r3, #0
 801675c:	3015      	adds	r0, #21
 801675e:	fa02 f000 	lsl.w	r0, r2, r0
 8016762:	fa23 f30c 	lsr.w	r3, r3, ip
 8016766:	4303      	orrs	r3, r0
 8016768:	461c      	mov	r4, r3
 801676a:	ec45 4b10 	vmov	d0, r4, r5
 801676e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016772:	45b8      	cmp	r8, r7
 8016774:	bf3a      	itte	cc
 8016776:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801677a:	f1a6 0708 	subcc.w	r7, r6, #8
 801677e:	2300      	movcs	r3, #0
 8016780:	380b      	subs	r0, #11
 8016782:	d012      	beq.n	80167aa <__b2d+0x8a>
 8016784:	f1c0 0120 	rsb	r1, r0, #32
 8016788:	fa23 f401 	lsr.w	r4, r3, r1
 801678c:	4082      	lsls	r2, r0
 801678e:	4322      	orrs	r2, r4
 8016790:	4547      	cmp	r7, r8
 8016792:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8016796:	bf8c      	ite	hi
 8016798:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801679c:	2200      	movls	r2, #0
 801679e:	4083      	lsls	r3, r0
 80167a0:	40ca      	lsrs	r2, r1
 80167a2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80167a6:	4313      	orrs	r3, r2
 80167a8:	e7de      	b.n	8016768 <__b2d+0x48>
 80167aa:	ea42 0501 	orr.w	r5, r2, r1
 80167ae:	e7db      	b.n	8016768 <__b2d+0x48>
 80167b0:	3ff00000 	.word	0x3ff00000

080167b4 <__d2b>:
 80167b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80167b8:	460f      	mov	r7, r1
 80167ba:	2101      	movs	r1, #1
 80167bc:	ec59 8b10 	vmov	r8, r9, d0
 80167c0:	4616      	mov	r6, r2
 80167c2:	f7ff fc1b 	bl	8015ffc <_Balloc>
 80167c6:	4604      	mov	r4, r0
 80167c8:	b930      	cbnz	r0, 80167d8 <__d2b+0x24>
 80167ca:	4602      	mov	r2, r0
 80167cc:	4b23      	ldr	r3, [pc, #140]	@ (801685c <__d2b+0xa8>)
 80167ce:	4824      	ldr	r0, [pc, #144]	@ (8016860 <__d2b+0xac>)
 80167d0:	f240 310f 	movw	r1, #783	@ 0x30f
 80167d4:	f7fb fcdc 	bl	8012190 <__assert_func>
 80167d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80167dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80167e0:	b10d      	cbz	r5, 80167e6 <__d2b+0x32>
 80167e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80167e6:	9301      	str	r3, [sp, #4]
 80167e8:	f1b8 0300 	subs.w	r3, r8, #0
 80167ec:	d023      	beq.n	8016836 <__d2b+0x82>
 80167ee:	4668      	mov	r0, sp
 80167f0:	9300      	str	r3, [sp, #0]
 80167f2:	f7ff fd14 	bl	801621e <__lo0bits>
 80167f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80167fa:	b1d0      	cbz	r0, 8016832 <__d2b+0x7e>
 80167fc:	f1c0 0320 	rsb	r3, r0, #32
 8016800:	fa02 f303 	lsl.w	r3, r2, r3
 8016804:	430b      	orrs	r3, r1
 8016806:	40c2      	lsrs	r2, r0
 8016808:	6163      	str	r3, [r4, #20]
 801680a:	9201      	str	r2, [sp, #4]
 801680c:	9b01      	ldr	r3, [sp, #4]
 801680e:	61a3      	str	r3, [r4, #24]
 8016810:	2b00      	cmp	r3, #0
 8016812:	bf0c      	ite	eq
 8016814:	2201      	moveq	r2, #1
 8016816:	2202      	movne	r2, #2
 8016818:	6122      	str	r2, [r4, #16]
 801681a:	b1a5      	cbz	r5, 8016846 <__d2b+0x92>
 801681c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016820:	4405      	add	r5, r0
 8016822:	603d      	str	r5, [r7, #0]
 8016824:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016828:	6030      	str	r0, [r6, #0]
 801682a:	4620      	mov	r0, r4
 801682c:	b003      	add	sp, #12
 801682e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016832:	6161      	str	r1, [r4, #20]
 8016834:	e7ea      	b.n	801680c <__d2b+0x58>
 8016836:	a801      	add	r0, sp, #4
 8016838:	f7ff fcf1 	bl	801621e <__lo0bits>
 801683c:	9b01      	ldr	r3, [sp, #4]
 801683e:	6163      	str	r3, [r4, #20]
 8016840:	3020      	adds	r0, #32
 8016842:	2201      	movs	r2, #1
 8016844:	e7e8      	b.n	8016818 <__d2b+0x64>
 8016846:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801684a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801684e:	6038      	str	r0, [r7, #0]
 8016850:	6918      	ldr	r0, [r3, #16]
 8016852:	f7ff fcc5 	bl	80161e0 <__hi0bits>
 8016856:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801685a:	e7e5      	b.n	8016828 <__d2b+0x74>
 801685c:	0801a14d 	.word	0x0801a14d
 8016860:	0801a1be 	.word	0x0801a1be

08016864 <__ratio>:
 8016864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016868:	b085      	sub	sp, #20
 801686a:	e9cd 1000 	strd	r1, r0, [sp]
 801686e:	a902      	add	r1, sp, #8
 8016870:	f7ff ff56 	bl	8016720 <__b2d>
 8016874:	9800      	ldr	r0, [sp, #0]
 8016876:	a903      	add	r1, sp, #12
 8016878:	ec55 4b10 	vmov	r4, r5, d0
 801687c:	f7ff ff50 	bl	8016720 <__b2d>
 8016880:	9b01      	ldr	r3, [sp, #4]
 8016882:	6919      	ldr	r1, [r3, #16]
 8016884:	9b00      	ldr	r3, [sp, #0]
 8016886:	691b      	ldr	r3, [r3, #16]
 8016888:	1ac9      	subs	r1, r1, r3
 801688a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801688e:	1a9b      	subs	r3, r3, r2
 8016890:	ec5b ab10 	vmov	sl, fp, d0
 8016894:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8016898:	2b00      	cmp	r3, #0
 801689a:	bfce      	itee	gt
 801689c:	462a      	movgt	r2, r5
 801689e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80168a2:	465a      	movle	r2, fp
 80168a4:	462f      	mov	r7, r5
 80168a6:	46d9      	mov	r9, fp
 80168a8:	bfcc      	ite	gt
 80168aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80168ae:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80168b2:	464b      	mov	r3, r9
 80168b4:	4652      	mov	r2, sl
 80168b6:	4620      	mov	r0, r4
 80168b8:	4639      	mov	r1, r7
 80168ba:	f7e9 fff7 	bl	80008ac <__aeabi_ddiv>
 80168be:	ec41 0b10 	vmov	d0, r0, r1
 80168c2:	b005      	add	sp, #20
 80168c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080168c8 <__copybits>:
 80168c8:	3901      	subs	r1, #1
 80168ca:	b570      	push	{r4, r5, r6, lr}
 80168cc:	1149      	asrs	r1, r1, #5
 80168ce:	6914      	ldr	r4, [r2, #16]
 80168d0:	3101      	adds	r1, #1
 80168d2:	f102 0314 	add.w	r3, r2, #20
 80168d6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80168da:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80168de:	1f05      	subs	r5, r0, #4
 80168e0:	42a3      	cmp	r3, r4
 80168e2:	d30c      	bcc.n	80168fe <__copybits+0x36>
 80168e4:	1aa3      	subs	r3, r4, r2
 80168e6:	3b11      	subs	r3, #17
 80168e8:	f023 0303 	bic.w	r3, r3, #3
 80168ec:	3211      	adds	r2, #17
 80168ee:	42a2      	cmp	r2, r4
 80168f0:	bf88      	it	hi
 80168f2:	2300      	movhi	r3, #0
 80168f4:	4418      	add	r0, r3
 80168f6:	2300      	movs	r3, #0
 80168f8:	4288      	cmp	r0, r1
 80168fa:	d305      	bcc.n	8016908 <__copybits+0x40>
 80168fc:	bd70      	pop	{r4, r5, r6, pc}
 80168fe:	f853 6b04 	ldr.w	r6, [r3], #4
 8016902:	f845 6f04 	str.w	r6, [r5, #4]!
 8016906:	e7eb      	b.n	80168e0 <__copybits+0x18>
 8016908:	f840 3b04 	str.w	r3, [r0], #4
 801690c:	e7f4      	b.n	80168f8 <__copybits+0x30>

0801690e <__any_on>:
 801690e:	f100 0214 	add.w	r2, r0, #20
 8016912:	6900      	ldr	r0, [r0, #16]
 8016914:	114b      	asrs	r3, r1, #5
 8016916:	4298      	cmp	r0, r3
 8016918:	b510      	push	{r4, lr}
 801691a:	db11      	blt.n	8016940 <__any_on+0x32>
 801691c:	dd0a      	ble.n	8016934 <__any_on+0x26>
 801691e:	f011 011f 	ands.w	r1, r1, #31
 8016922:	d007      	beq.n	8016934 <__any_on+0x26>
 8016924:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016928:	fa24 f001 	lsr.w	r0, r4, r1
 801692c:	fa00 f101 	lsl.w	r1, r0, r1
 8016930:	428c      	cmp	r4, r1
 8016932:	d10b      	bne.n	801694c <__any_on+0x3e>
 8016934:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016938:	4293      	cmp	r3, r2
 801693a:	d803      	bhi.n	8016944 <__any_on+0x36>
 801693c:	2000      	movs	r0, #0
 801693e:	bd10      	pop	{r4, pc}
 8016940:	4603      	mov	r3, r0
 8016942:	e7f7      	b.n	8016934 <__any_on+0x26>
 8016944:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016948:	2900      	cmp	r1, #0
 801694a:	d0f5      	beq.n	8016938 <__any_on+0x2a>
 801694c:	2001      	movs	r0, #1
 801694e:	e7f6      	b.n	801693e <__any_on+0x30>

08016950 <_realloc_r>:
 8016950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016954:	4607      	mov	r7, r0
 8016956:	4614      	mov	r4, r2
 8016958:	460d      	mov	r5, r1
 801695a:	b921      	cbnz	r1, 8016966 <_realloc_r+0x16>
 801695c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016960:	4611      	mov	r1, r2
 8016962:	f7fb bcd1 	b.w	8012308 <_malloc_r>
 8016966:	b92a      	cbnz	r2, 8016974 <_realloc_r+0x24>
 8016968:	f7fe ff7e 	bl	8015868 <_free_r>
 801696c:	4625      	mov	r5, r4
 801696e:	4628      	mov	r0, r5
 8016970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016974:	f000 fc1a 	bl	80171ac <_malloc_usable_size_r>
 8016978:	4284      	cmp	r4, r0
 801697a:	4606      	mov	r6, r0
 801697c:	d802      	bhi.n	8016984 <_realloc_r+0x34>
 801697e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016982:	d8f4      	bhi.n	801696e <_realloc_r+0x1e>
 8016984:	4621      	mov	r1, r4
 8016986:	4638      	mov	r0, r7
 8016988:	f7fb fcbe 	bl	8012308 <_malloc_r>
 801698c:	4680      	mov	r8, r0
 801698e:	b908      	cbnz	r0, 8016994 <_realloc_r+0x44>
 8016990:	4645      	mov	r5, r8
 8016992:	e7ec      	b.n	801696e <_realloc_r+0x1e>
 8016994:	42b4      	cmp	r4, r6
 8016996:	4622      	mov	r2, r4
 8016998:	4629      	mov	r1, r5
 801699a:	bf28      	it	cs
 801699c:	4632      	movcs	r2, r6
 801699e:	f7fe f8e5 	bl	8014b6c <memcpy>
 80169a2:	4629      	mov	r1, r5
 80169a4:	4638      	mov	r0, r7
 80169a6:	f7fe ff5f 	bl	8015868 <_free_r>
 80169aa:	e7f1      	b.n	8016990 <_realloc_r+0x40>

080169ac <__ascii_wctomb>:
 80169ac:	4603      	mov	r3, r0
 80169ae:	4608      	mov	r0, r1
 80169b0:	b141      	cbz	r1, 80169c4 <__ascii_wctomb+0x18>
 80169b2:	2aff      	cmp	r2, #255	@ 0xff
 80169b4:	d904      	bls.n	80169c0 <__ascii_wctomb+0x14>
 80169b6:	228a      	movs	r2, #138	@ 0x8a
 80169b8:	601a      	str	r2, [r3, #0]
 80169ba:	f04f 30ff 	mov.w	r0, #4294967295
 80169be:	4770      	bx	lr
 80169c0:	700a      	strb	r2, [r1, #0]
 80169c2:	2001      	movs	r0, #1
 80169c4:	4770      	bx	lr

080169c6 <__ssputs_r>:
 80169c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80169ca:	688e      	ldr	r6, [r1, #8]
 80169cc:	461f      	mov	r7, r3
 80169ce:	42be      	cmp	r6, r7
 80169d0:	680b      	ldr	r3, [r1, #0]
 80169d2:	4682      	mov	sl, r0
 80169d4:	460c      	mov	r4, r1
 80169d6:	4690      	mov	r8, r2
 80169d8:	d82d      	bhi.n	8016a36 <__ssputs_r+0x70>
 80169da:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80169de:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80169e2:	d026      	beq.n	8016a32 <__ssputs_r+0x6c>
 80169e4:	6965      	ldr	r5, [r4, #20]
 80169e6:	6909      	ldr	r1, [r1, #16]
 80169e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80169ec:	eba3 0901 	sub.w	r9, r3, r1
 80169f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80169f4:	1c7b      	adds	r3, r7, #1
 80169f6:	444b      	add	r3, r9
 80169f8:	106d      	asrs	r5, r5, #1
 80169fa:	429d      	cmp	r5, r3
 80169fc:	bf38      	it	cc
 80169fe:	461d      	movcc	r5, r3
 8016a00:	0553      	lsls	r3, r2, #21
 8016a02:	d527      	bpl.n	8016a54 <__ssputs_r+0x8e>
 8016a04:	4629      	mov	r1, r5
 8016a06:	f7fb fc7f 	bl	8012308 <_malloc_r>
 8016a0a:	4606      	mov	r6, r0
 8016a0c:	b360      	cbz	r0, 8016a68 <__ssputs_r+0xa2>
 8016a0e:	6921      	ldr	r1, [r4, #16]
 8016a10:	464a      	mov	r2, r9
 8016a12:	f7fe f8ab 	bl	8014b6c <memcpy>
 8016a16:	89a3      	ldrh	r3, [r4, #12]
 8016a18:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016a20:	81a3      	strh	r3, [r4, #12]
 8016a22:	6126      	str	r6, [r4, #16]
 8016a24:	6165      	str	r5, [r4, #20]
 8016a26:	444e      	add	r6, r9
 8016a28:	eba5 0509 	sub.w	r5, r5, r9
 8016a2c:	6026      	str	r6, [r4, #0]
 8016a2e:	60a5      	str	r5, [r4, #8]
 8016a30:	463e      	mov	r6, r7
 8016a32:	42be      	cmp	r6, r7
 8016a34:	d900      	bls.n	8016a38 <__ssputs_r+0x72>
 8016a36:	463e      	mov	r6, r7
 8016a38:	6820      	ldr	r0, [r4, #0]
 8016a3a:	4632      	mov	r2, r6
 8016a3c:	4641      	mov	r1, r8
 8016a3e:	f000 fb34 	bl	80170aa <memmove>
 8016a42:	68a3      	ldr	r3, [r4, #8]
 8016a44:	1b9b      	subs	r3, r3, r6
 8016a46:	60a3      	str	r3, [r4, #8]
 8016a48:	6823      	ldr	r3, [r4, #0]
 8016a4a:	4433      	add	r3, r6
 8016a4c:	6023      	str	r3, [r4, #0]
 8016a4e:	2000      	movs	r0, #0
 8016a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a54:	462a      	mov	r2, r5
 8016a56:	f7ff ff7b 	bl	8016950 <_realloc_r>
 8016a5a:	4606      	mov	r6, r0
 8016a5c:	2800      	cmp	r0, #0
 8016a5e:	d1e0      	bne.n	8016a22 <__ssputs_r+0x5c>
 8016a60:	6921      	ldr	r1, [r4, #16]
 8016a62:	4650      	mov	r0, sl
 8016a64:	f7fe ff00 	bl	8015868 <_free_r>
 8016a68:	230c      	movs	r3, #12
 8016a6a:	f8ca 3000 	str.w	r3, [sl]
 8016a6e:	89a3      	ldrh	r3, [r4, #12]
 8016a70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016a74:	81a3      	strh	r3, [r4, #12]
 8016a76:	f04f 30ff 	mov.w	r0, #4294967295
 8016a7a:	e7e9      	b.n	8016a50 <__ssputs_r+0x8a>

08016a7c <_svfiprintf_r>:
 8016a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a80:	4698      	mov	r8, r3
 8016a82:	898b      	ldrh	r3, [r1, #12]
 8016a84:	061b      	lsls	r3, r3, #24
 8016a86:	b09d      	sub	sp, #116	@ 0x74
 8016a88:	4607      	mov	r7, r0
 8016a8a:	460d      	mov	r5, r1
 8016a8c:	4614      	mov	r4, r2
 8016a8e:	d510      	bpl.n	8016ab2 <_svfiprintf_r+0x36>
 8016a90:	690b      	ldr	r3, [r1, #16]
 8016a92:	b973      	cbnz	r3, 8016ab2 <_svfiprintf_r+0x36>
 8016a94:	2140      	movs	r1, #64	@ 0x40
 8016a96:	f7fb fc37 	bl	8012308 <_malloc_r>
 8016a9a:	6028      	str	r0, [r5, #0]
 8016a9c:	6128      	str	r0, [r5, #16]
 8016a9e:	b930      	cbnz	r0, 8016aae <_svfiprintf_r+0x32>
 8016aa0:	230c      	movs	r3, #12
 8016aa2:	603b      	str	r3, [r7, #0]
 8016aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8016aa8:	b01d      	add	sp, #116	@ 0x74
 8016aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016aae:	2340      	movs	r3, #64	@ 0x40
 8016ab0:	616b      	str	r3, [r5, #20]
 8016ab2:	2300      	movs	r3, #0
 8016ab4:	9309      	str	r3, [sp, #36]	@ 0x24
 8016ab6:	2320      	movs	r3, #32
 8016ab8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016abc:	f8cd 800c 	str.w	r8, [sp, #12]
 8016ac0:	2330      	movs	r3, #48	@ 0x30
 8016ac2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016c60 <_svfiprintf_r+0x1e4>
 8016ac6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016aca:	f04f 0901 	mov.w	r9, #1
 8016ace:	4623      	mov	r3, r4
 8016ad0:	469a      	mov	sl, r3
 8016ad2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016ad6:	b10a      	cbz	r2, 8016adc <_svfiprintf_r+0x60>
 8016ad8:	2a25      	cmp	r2, #37	@ 0x25
 8016ada:	d1f9      	bne.n	8016ad0 <_svfiprintf_r+0x54>
 8016adc:	ebba 0b04 	subs.w	fp, sl, r4
 8016ae0:	d00b      	beq.n	8016afa <_svfiprintf_r+0x7e>
 8016ae2:	465b      	mov	r3, fp
 8016ae4:	4622      	mov	r2, r4
 8016ae6:	4629      	mov	r1, r5
 8016ae8:	4638      	mov	r0, r7
 8016aea:	f7ff ff6c 	bl	80169c6 <__ssputs_r>
 8016aee:	3001      	adds	r0, #1
 8016af0:	f000 80a7 	beq.w	8016c42 <_svfiprintf_r+0x1c6>
 8016af4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016af6:	445a      	add	r2, fp
 8016af8:	9209      	str	r2, [sp, #36]	@ 0x24
 8016afa:	f89a 3000 	ldrb.w	r3, [sl]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	f000 809f 	beq.w	8016c42 <_svfiprintf_r+0x1c6>
 8016b04:	2300      	movs	r3, #0
 8016b06:	f04f 32ff 	mov.w	r2, #4294967295
 8016b0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016b0e:	f10a 0a01 	add.w	sl, sl, #1
 8016b12:	9304      	str	r3, [sp, #16]
 8016b14:	9307      	str	r3, [sp, #28]
 8016b16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016b1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8016b1c:	4654      	mov	r4, sl
 8016b1e:	2205      	movs	r2, #5
 8016b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b24:	484e      	ldr	r0, [pc, #312]	@ (8016c60 <_svfiprintf_r+0x1e4>)
 8016b26:	f7e9 fb83 	bl	8000230 <memchr>
 8016b2a:	9a04      	ldr	r2, [sp, #16]
 8016b2c:	b9d8      	cbnz	r0, 8016b66 <_svfiprintf_r+0xea>
 8016b2e:	06d0      	lsls	r0, r2, #27
 8016b30:	bf44      	itt	mi
 8016b32:	2320      	movmi	r3, #32
 8016b34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016b38:	0711      	lsls	r1, r2, #28
 8016b3a:	bf44      	itt	mi
 8016b3c:	232b      	movmi	r3, #43	@ 0x2b
 8016b3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016b42:	f89a 3000 	ldrb.w	r3, [sl]
 8016b46:	2b2a      	cmp	r3, #42	@ 0x2a
 8016b48:	d015      	beq.n	8016b76 <_svfiprintf_r+0xfa>
 8016b4a:	9a07      	ldr	r2, [sp, #28]
 8016b4c:	4654      	mov	r4, sl
 8016b4e:	2000      	movs	r0, #0
 8016b50:	f04f 0c0a 	mov.w	ip, #10
 8016b54:	4621      	mov	r1, r4
 8016b56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016b5a:	3b30      	subs	r3, #48	@ 0x30
 8016b5c:	2b09      	cmp	r3, #9
 8016b5e:	d94b      	bls.n	8016bf8 <_svfiprintf_r+0x17c>
 8016b60:	b1b0      	cbz	r0, 8016b90 <_svfiprintf_r+0x114>
 8016b62:	9207      	str	r2, [sp, #28]
 8016b64:	e014      	b.n	8016b90 <_svfiprintf_r+0x114>
 8016b66:	eba0 0308 	sub.w	r3, r0, r8
 8016b6a:	fa09 f303 	lsl.w	r3, r9, r3
 8016b6e:	4313      	orrs	r3, r2
 8016b70:	9304      	str	r3, [sp, #16]
 8016b72:	46a2      	mov	sl, r4
 8016b74:	e7d2      	b.n	8016b1c <_svfiprintf_r+0xa0>
 8016b76:	9b03      	ldr	r3, [sp, #12]
 8016b78:	1d19      	adds	r1, r3, #4
 8016b7a:	681b      	ldr	r3, [r3, #0]
 8016b7c:	9103      	str	r1, [sp, #12]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	bfbb      	ittet	lt
 8016b82:	425b      	neglt	r3, r3
 8016b84:	f042 0202 	orrlt.w	r2, r2, #2
 8016b88:	9307      	strge	r3, [sp, #28]
 8016b8a:	9307      	strlt	r3, [sp, #28]
 8016b8c:	bfb8      	it	lt
 8016b8e:	9204      	strlt	r2, [sp, #16]
 8016b90:	7823      	ldrb	r3, [r4, #0]
 8016b92:	2b2e      	cmp	r3, #46	@ 0x2e
 8016b94:	d10a      	bne.n	8016bac <_svfiprintf_r+0x130>
 8016b96:	7863      	ldrb	r3, [r4, #1]
 8016b98:	2b2a      	cmp	r3, #42	@ 0x2a
 8016b9a:	d132      	bne.n	8016c02 <_svfiprintf_r+0x186>
 8016b9c:	9b03      	ldr	r3, [sp, #12]
 8016b9e:	1d1a      	adds	r2, r3, #4
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	9203      	str	r2, [sp, #12]
 8016ba4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016ba8:	3402      	adds	r4, #2
 8016baa:	9305      	str	r3, [sp, #20]
 8016bac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016c70 <_svfiprintf_r+0x1f4>
 8016bb0:	7821      	ldrb	r1, [r4, #0]
 8016bb2:	2203      	movs	r2, #3
 8016bb4:	4650      	mov	r0, sl
 8016bb6:	f7e9 fb3b 	bl	8000230 <memchr>
 8016bba:	b138      	cbz	r0, 8016bcc <_svfiprintf_r+0x150>
 8016bbc:	9b04      	ldr	r3, [sp, #16]
 8016bbe:	eba0 000a 	sub.w	r0, r0, sl
 8016bc2:	2240      	movs	r2, #64	@ 0x40
 8016bc4:	4082      	lsls	r2, r0
 8016bc6:	4313      	orrs	r3, r2
 8016bc8:	3401      	adds	r4, #1
 8016bca:	9304      	str	r3, [sp, #16]
 8016bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016bd0:	4824      	ldr	r0, [pc, #144]	@ (8016c64 <_svfiprintf_r+0x1e8>)
 8016bd2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016bd6:	2206      	movs	r2, #6
 8016bd8:	f7e9 fb2a 	bl	8000230 <memchr>
 8016bdc:	2800      	cmp	r0, #0
 8016bde:	d036      	beq.n	8016c4e <_svfiprintf_r+0x1d2>
 8016be0:	4b21      	ldr	r3, [pc, #132]	@ (8016c68 <_svfiprintf_r+0x1ec>)
 8016be2:	bb1b      	cbnz	r3, 8016c2c <_svfiprintf_r+0x1b0>
 8016be4:	9b03      	ldr	r3, [sp, #12]
 8016be6:	3307      	adds	r3, #7
 8016be8:	f023 0307 	bic.w	r3, r3, #7
 8016bec:	3308      	adds	r3, #8
 8016bee:	9303      	str	r3, [sp, #12]
 8016bf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016bf2:	4433      	add	r3, r6
 8016bf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8016bf6:	e76a      	b.n	8016ace <_svfiprintf_r+0x52>
 8016bf8:	fb0c 3202 	mla	r2, ip, r2, r3
 8016bfc:	460c      	mov	r4, r1
 8016bfe:	2001      	movs	r0, #1
 8016c00:	e7a8      	b.n	8016b54 <_svfiprintf_r+0xd8>
 8016c02:	2300      	movs	r3, #0
 8016c04:	3401      	adds	r4, #1
 8016c06:	9305      	str	r3, [sp, #20]
 8016c08:	4619      	mov	r1, r3
 8016c0a:	f04f 0c0a 	mov.w	ip, #10
 8016c0e:	4620      	mov	r0, r4
 8016c10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016c14:	3a30      	subs	r2, #48	@ 0x30
 8016c16:	2a09      	cmp	r2, #9
 8016c18:	d903      	bls.n	8016c22 <_svfiprintf_r+0x1a6>
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d0c6      	beq.n	8016bac <_svfiprintf_r+0x130>
 8016c1e:	9105      	str	r1, [sp, #20]
 8016c20:	e7c4      	b.n	8016bac <_svfiprintf_r+0x130>
 8016c22:	fb0c 2101 	mla	r1, ip, r1, r2
 8016c26:	4604      	mov	r4, r0
 8016c28:	2301      	movs	r3, #1
 8016c2a:	e7f0      	b.n	8016c0e <_svfiprintf_r+0x192>
 8016c2c:	ab03      	add	r3, sp, #12
 8016c2e:	9300      	str	r3, [sp, #0]
 8016c30:	462a      	mov	r2, r5
 8016c32:	4b0e      	ldr	r3, [pc, #56]	@ (8016c6c <_svfiprintf_r+0x1f0>)
 8016c34:	a904      	add	r1, sp, #16
 8016c36:	4638      	mov	r0, r7
 8016c38:	f7fc fbcc 	bl	80133d4 <_printf_float>
 8016c3c:	1c42      	adds	r2, r0, #1
 8016c3e:	4606      	mov	r6, r0
 8016c40:	d1d6      	bne.n	8016bf0 <_svfiprintf_r+0x174>
 8016c42:	89ab      	ldrh	r3, [r5, #12]
 8016c44:	065b      	lsls	r3, r3, #25
 8016c46:	f53f af2d 	bmi.w	8016aa4 <_svfiprintf_r+0x28>
 8016c4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016c4c:	e72c      	b.n	8016aa8 <_svfiprintf_r+0x2c>
 8016c4e:	ab03      	add	r3, sp, #12
 8016c50:	9300      	str	r3, [sp, #0]
 8016c52:	462a      	mov	r2, r5
 8016c54:	4b05      	ldr	r3, [pc, #20]	@ (8016c6c <_svfiprintf_r+0x1f0>)
 8016c56:	a904      	add	r1, sp, #16
 8016c58:	4638      	mov	r0, r7
 8016c5a:	f7fc fe53 	bl	8013904 <_printf_i>
 8016c5e:	e7ed      	b.n	8016c3c <_svfiprintf_r+0x1c0>
 8016c60:	0801a217 	.word	0x0801a217
 8016c64:	0801a221 	.word	0x0801a221
 8016c68:	080133d5 	.word	0x080133d5
 8016c6c:	080169c7 	.word	0x080169c7
 8016c70:	0801a21d 	.word	0x0801a21d

08016c74 <__sfputc_r>:
 8016c74:	6893      	ldr	r3, [r2, #8]
 8016c76:	3b01      	subs	r3, #1
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	b410      	push	{r4}
 8016c7c:	6093      	str	r3, [r2, #8]
 8016c7e:	da08      	bge.n	8016c92 <__sfputc_r+0x1e>
 8016c80:	6994      	ldr	r4, [r2, #24]
 8016c82:	42a3      	cmp	r3, r4
 8016c84:	db01      	blt.n	8016c8a <__sfputc_r+0x16>
 8016c86:	290a      	cmp	r1, #10
 8016c88:	d103      	bne.n	8016c92 <__sfputc_r+0x1e>
 8016c8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016c8e:	f7fd bc8e 	b.w	80145ae <__swbuf_r>
 8016c92:	6813      	ldr	r3, [r2, #0]
 8016c94:	1c58      	adds	r0, r3, #1
 8016c96:	6010      	str	r0, [r2, #0]
 8016c98:	7019      	strb	r1, [r3, #0]
 8016c9a:	4608      	mov	r0, r1
 8016c9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016ca0:	4770      	bx	lr

08016ca2 <__sfputs_r>:
 8016ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ca4:	4606      	mov	r6, r0
 8016ca6:	460f      	mov	r7, r1
 8016ca8:	4614      	mov	r4, r2
 8016caa:	18d5      	adds	r5, r2, r3
 8016cac:	42ac      	cmp	r4, r5
 8016cae:	d101      	bne.n	8016cb4 <__sfputs_r+0x12>
 8016cb0:	2000      	movs	r0, #0
 8016cb2:	e007      	b.n	8016cc4 <__sfputs_r+0x22>
 8016cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016cb8:	463a      	mov	r2, r7
 8016cba:	4630      	mov	r0, r6
 8016cbc:	f7ff ffda 	bl	8016c74 <__sfputc_r>
 8016cc0:	1c43      	adds	r3, r0, #1
 8016cc2:	d1f3      	bne.n	8016cac <__sfputs_r+0xa>
 8016cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016cc8 <_vfiprintf_r>:
 8016cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ccc:	460d      	mov	r5, r1
 8016cce:	b09d      	sub	sp, #116	@ 0x74
 8016cd0:	4614      	mov	r4, r2
 8016cd2:	4698      	mov	r8, r3
 8016cd4:	4606      	mov	r6, r0
 8016cd6:	b118      	cbz	r0, 8016ce0 <_vfiprintf_r+0x18>
 8016cd8:	6a03      	ldr	r3, [r0, #32]
 8016cda:	b90b      	cbnz	r3, 8016ce0 <_vfiprintf_r+0x18>
 8016cdc:	f7fd fb3a 	bl	8014354 <__sinit>
 8016ce0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016ce2:	07d9      	lsls	r1, r3, #31
 8016ce4:	d405      	bmi.n	8016cf2 <_vfiprintf_r+0x2a>
 8016ce6:	89ab      	ldrh	r3, [r5, #12]
 8016ce8:	059a      	lsls	r2, r3, #22
 8016cea:	d402      	bmi.n	8016cf2 <_vfiprintf_r+0x2a>
 8016cec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016cee:	f7fd ff3b 	bl	8014b68 <__retarget_lock_acquire_recursive>
 8016cf2:	89ab      	ldrh	r3, [r5, #12]
 8016cf4:	071b      	lsls	r3, r3, #28
 8016cf6:	d501      	bpl.n	8016cfc <_vfiprintf_r+0x34>
 8016cf8:	692b      	ldr	r3, [r5, #16]
 8016cfa:	b99b      	cbnz	r3, 8016d24 <_vfiprintf_r+0x5c>
 8016cfc:	4629      	mov	r1, r5
 8016cfe:	4630      	mov	r0, r6
 8016d00:	f7fd fc94 	bl	801462c <__swsetup_r>
 8016d04:	b170      	cbz	r0, 8016d24 <_vfiprintf_r+0x5c>
 8016d06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016d08:	07dc      	lsls	r4, r3, #31
 8016d0a:	d504      	bpl.n	8016d16 <_vfiprintf_r+0x4e>
 8016d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8016d10:	b01d      	add	sp, #116	@ 0x74
 8016d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d16:	89ab      	ldrh	r3, [r5, #12]
 8016d18:	0598      	lsls	r0, r3, #22
 8016d1a:	d4f7      	bmi.n	8016d0c <_vfiprintf_r+0x44>
 8016d1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016d1e:	f7fd ff24 	bl	8014b6a <__retarget_lock_release_recursive>
 8016d22:	e7f3      	b.n	8016d0c <_vfiprintf_r+0x44>
 8016d24:	2300      	movs	r3, #0
 8016d26:	9309      	str	r3, [sp, #36]	@ 0x24
 8016d28:	2320      	movs	r3, #32
 8016d2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016d2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8016d32:	2330      	movs	r3, #48	@ 0x30
 8016d34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016ee4 <_vfiprintf_r+0x21c>
 8016d38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016d3c:	f04f 0901 	mov.w	r9, #1
 8016d40:	4623      	mov	r3, r4
 8016d42:	469a      	mov	sl, r3
 8016d44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016d48:	b10a      	cbz	r2, 8016d4e <_vfiprintf_r+0x86>
 8016d4a:	2a25      	cmp	r2, #37	@ 0x25
 8016d4c:	d1f9      	bne.n	8016d42 <_vfiprintf_r+0x7a>
 8016d4e:	ebba 0b04 	subs.w	fp, sl, r4
 8016d52:	d00b      	beq.n	8016d6c <_vfiprintf_r+0xa4>
 8016d54:	465b      	mov	r3, fp
 8016d56:	4622      	mov	r2, r4
 8016d58:	4629      	mov	r1, r5
 8016d5a:	4630      	mov	r0, r6
 8016d5c:	f7ff ffa1 	bl	8016ca2 <__sfputs_r>
 8016d60:	3001      	adds	r0, #1
 8016d62:	f000 80a7 	beq.w	8016eb4 <_vfiprintf_r+0x1ec>
 8016d66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016d68:	445a      	add	r2, fp
 8016d6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8016d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	f000 809f 	beq.w	8016eb4 <_vfiprintf_r+0x1ec>
 8016d76:	2300      	movs	r3, #0
 8016d78:	f04f 32ff 	mov.w	r2, #4294967295
 8016d7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016d80:	f10a 0a01 	add.w	sl, sl, #1
 8016d84:	9304      	str	r3, [sp, #16]
 8016d86:	9307      	str	r3, [sp, #28]
 8016d88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016d8c:	931a      	str	r3, [sp, #104]	@ 0x68
 8016d8e:	4654      	mov	r4, sl
 8016d90:	2205      	movs	r2, #5
 8016d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d96:	4853      	ldr	r0, [pc, #332]	@ (8016ee4 <_vfiprintf_r+0x21c>)
 8016d98:	f7e9 fa4a 	bl	8000230 <memchr>
 8016d9c:	9a04      	ldr	r2, [sp, #16]
 8016d9e:	b9d8      	cbnz	r0, 8016dd8 <_vfiprintf_r+0x110>
 8016da0:	06d1      	lsls	r1, r2, #27
 8016da2:	bf44      	itt	mi
 8016da4:	2320      	movmi	r3, #32
 8016da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016daa:	0713      	lsls	r3, r2, #28
 8016dac:	bf44      	itt	mi
 8016dae:	232b      	movmi	r3, #43	@ 0x2b
 8016db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016db4:	f89a 3000 	ldrb.w	r3, [sl]
 8016db8:	2b2a      	cmp	r3, #42	@ 0x2a
 8016dba:	d015      	beq.n	8016de8 <_vfiprintf_r+0x120>
 8016dbc:	9a07      	ldr	r2, [sp, #28]
 8016dbe:	4654      	mov	r4, sl
 8016dc0:	2000      	movs	r0, #0
 8016dc2:	f04f 0c0a 	mov.w	ip, #10
 8016dc6:	4621      	mov	r1, r4
 8016dc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016dcc:	3b30      	subs	r3, #48	@ 0x30
 8016dce:	2b09      	cmp	r3, #9
 8016dd0:	d94b      	bls.n	8016e6a <_vfiprintf_r+0x1a2>
 8016dd2:	b1b0      	cbz	r0, 8016e02 <_vfiprintf_r+0x13a>
 8016dd4:	9207      	str	r2, [sp, #28]
 8016dd6:	e014      	b.n	8016e02 <_vfiprintf_r+0x13a>
 8016dd8:	eba0 0308 	sub.w	r3, r0, r8
 8016ddc:	fa09 f303 	lsl.w	r3, r9, r3
 8016de0:	4313      	orrs	r3, r2
 8016de2:	9304      	str	r3, [sp, #16]
 8016de4:	46a2      	mov	sl, r4
 8016de6:	e7d2      	b.n	8016d8e <_vfiprintf_r+0xc6>
 8016de8:	9b03      	ldr	r3, [sp, #12]
 8016dea:	1d19      	adds	r1, r3, #4
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	9103      	str	r1, [sp, #12]
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	bfbb      	ittet	lt
 8016df4:	425b      	neglt	r3, r3
 8016df6:	f042 0202 	orrlt.w	r2, r2, #2
 8016dfa:	9307      	strge	r3, [sp, #28]
 8016dfc:	9307      	strlt	r3, [sp, #28]
 8016dfe:	bfb8      	it	lt
 8016e00:	9204      	strlt	r2, [sp, #16]
 8016e02:	7823      	ldrb	r3, [r4, #0]
 8016e04:	2b2e      	cmp	r3, #46	@ 0x2e
 8016e06:	d10a      	bne.n	8016e1e <_vfiprintf_r+0x156>
 8016e08:	7863      	ldrb	r3, [r4, #1]
 8016e0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8016e0c:	d132      	bne.n	8016e74 <_vfiprintf_r+0x1ac>
 8016e0e:	9b03      	ldr	r3, [sp, #12]
 8016e10:	1d1a      	adds	r2, r3, #4
 8016e12:	681b      	ldr	r3, [r3, #0]
 8016e14:	9203      	str	r2, [sp, #12]
 8016e16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016e1a:	3402      	adds	r4, #2
 8016e1c:	9305      	str	r3, [sp, #20]
 8016e1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016ef4 <_vfiprintf_r+0x22c>
 8016e22:	7821      	ldrb	r1, [r4, #0]
 8016e24:	2203      	movs	r2, #3
 8016e26:	4650      	mov	r0, sl
 8016e28:	f7e9 fa02 	bl	8000230 <memchr>
 8016e2c:	b138      	cbz	r0, 8016e3e <_vfiprintf_r+0x176>
 8016e2e:	9b04      	ldr	r3, [sp, #16]
 8016e30:	eba0 000a 	sub.w	r0, r0, sl
 8016e34:	2240      	movs	r2, #64	@ 0x40
 8016e36:	4082      	lsls	r2, r0
 8016e38:	4313      	orrs	r3, r2
 8016e3a:	3401      	adds	r4, #1
 8016e3c:	9304      	str	r3, [sp, #16]
 8016e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e42:	4829      	ldr	r0, [pc, #164]	@ (8016ee8 <_vfiprintf_r+0x220>)
 8016e44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016e48:	2206      	movs	r2, #6
 8016e4a:	f7e9 f9f1 	bl	8000230 <memchr>
 8016e4e:	2800      	cmp	r0, #0
 8016e50:	d03f      	beq.n	8016ed2 <_vfiprintf_r+0x20a>
 8016e52:	4b26      	ldr	r3, [pc, #152]	@ (8016eec <_vfiprintf_r+0x224>)
 8016e54:	bb1b      	cbnz	r3, 8016e9e <_vfiprintf_r+0x1d6>
 8016e56:	9b03      	ldr	r3, [sp, #12]
 8016e58:	3307      	adds	r3, #7
 8016e5a:	f023 0307 	bic.w	r3, r3, #7
 8016e5e:	3308      	adds	r3, #8
 8016e60:	9303      	str	r3, [sp, #12]
 8016e62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016e64:	443b      	add	r3, r7
 8016e66:	9309      	str	r3, [sp, #36]	@ 0x24
 8016e68:	e76a      	b.n	8016d40 <_vfiprintf_r+0x78>
 8016e6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8016e6e:	460c      	mov	r4, r1
 8016e70:	2001      	movs	r0, #1
 8016e72:	e7a8      	b.n	8016dc6 <_vfiprintf_r+0xfe>
 8016e74:	2300      	movs	r3, #0
 8016e76:	3401      	adds	r4, #1
 8016e78:	9305      	str	r3, [sp, #20]
 8016e7a:	4619      	mov	r1, r3
 8016e7c:	f04f 0c0a 	mov.w	ip, #10
 8016e80:	4620      	mov	r0, r4
 8016e82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016e86:	3a30      	subs	r2, #48	@ 0x30
 8016e88:	2a09      	cmp	r2, #9
 8016e8a:	d903      	bls.n	8016e94 <_vfiprintf_r+0x1cc>
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d0c6      	beq.n	8016e1e <_vfiprintf_r+0x156>
 8016e90:	9105      	str	r1, [sp, #20]
 8016e92:	e7c4      	b.n	8016e1e <_vfiprintf_r+0x156>
 8016e94:	fb0c 2101 	mla	r1, ip, r1, r2
 8016e98:	4604      	mov	r4, r0
 8016e9a:	2301      	movs	r3, #1
 8016e9c:	e7f0      	b.n	8016e80 <_vfiprintf_r+0x1b8>
 8016e9e:	ab03      	add	r3, sp, #12
 8016ea0:	9300      	str	r3, [sp, #0]
 8016ea2:	462a      	mov	r2, r5
 8016ea4:	4b12      	ldr	r3, [pc, #72]	@ (8016ef0 <_vfiprintf_r+0x228>)
 8016ea6:	a904      	add	r1, sp, #16
 8016ea8:	4630      	mov	r0, r6
 8016eaa:	f7fc fa93 	bl	80133d4 <_printf_float>
 8016eae:	4607      	mov	r7, r0
 8016eb0:	1c78      	adds	r0, r7, #1
 8016eb2:	d1d6      	bne.n	8016e62 <_vfiprintf_r+0x19a>
 8016eb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016eb6:	07d9      	lsls	r1, r3, #31
 8016eb8:	d405      	bmi.n	8016ec6 <_vfiprintf_r+0x1fe>
 8016eba:	89ab      	ldrh	r3, [r5, #12]
 8016ebc:	059a      	lsls	r2, r3, #22
 8016ebe:	d402      	bmi.n	8016ec6 <_vfiprintf_r+0x1fe>
 8016ec0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016ec2:	f7fd fe52 	bl	8014b6a <__retarget_lock_release_recursive>
 8016ec6:	89ab      	ldrh	r3, [r5, #12]
 8016ec8:	065b      	lsls	r3, r3, #25
 8016eca:	f53f af1f 	bmi.w	8016d0c <_vfiprintf_r+0x44>
 8016ece:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016ed0:	e71e      	b.n	8016d10 <_vfiprintf_r+0x48>
 8016ed2:	ab03      	add	r3, sp, #12
 8016ed4:	9300      	str	r3, [sp, #0]
 8016ed6:	462a      	mov	r2, r5
 8016ed8:	4b05      	ldr	r3, [pc, #20]	@ (8016ef0 <_vfiprintf_r+0x228>)
 8016eda:	a904      	add	r1, sp, #16
 8016edc:	4630      	mov	r0, r6
 8016ede:	f7fc fd11 	bl	8013904 <_printf_i>
 8016ee2:	e7e4      	b.n	8016eae <_vfiprintf_r+0x1e6>
 8016ee4:	0801a217 	.word	0x0801a217
 8016ee8:	0801a221 	.word	0x0801a221
 8016eec:	080133d5 	.word	0x080133d5
 8016ef0:	08016ca3 	.word	0x08016ca3
 8016ef4:	0801a21d 	.word	0x0801a21d

08016ef8 <_getc_r>:
 8016ef8:	b538      	push	{r3, r4, r5, lr}
 8016efa:	460c      	mov	r4, r1
 8016efc:	4605      	mov	r5, r0
 8016efe:	b118      	cbz	r0, 8016f08 <_getc_r+0x10>
 8016f00:	6a03      	ldr	r3, [r0, #32]
 8016f02:	b90b      	cbnz	r3, 8016f08 <_getc_r+0x10>
 8016f04:	f7fd fa26 	bl	8014354 <__sinit>
 8016f08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016f0a:	07d8      	lsls	r0, r3, #31
 8016f0c:	d405      	bmi.n	8016f1a <_getc_r+0x22>
 8016f0e:	89a3      	ldrh	r3, [r4, #12]
 8016f10:	0599      	lsls	r1, r3, #22
 8016f12:	d402      	bmi.n	8016f1a <_getc_r+0x22>
 8016f14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016f16:	f7fd fe27 	bl	8014b68 <__retarget_lock_acquire_recursive>
 8016f1a:	6863      	ldr	r3, [r4, #4]
 8016f1c:	3b01      	subs	r3, #1
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	6063      	str	r3, [r4, #4]
 8016f22:	da0f      	bge.n	8016f44 <_getc_r+0x4c>
 8016f24:	4628      	mov	r0, r5
 8016f26:	4621      	mov	r1, r4
 8016f28:	f000 f8a7 	bl	801707a <__srget_r>
 8016f2c:	4605      	mov	r5, r0
 8016f2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016f30:	07da      	lsls	r2, r3, #31
 8016f32:	d405      	bmi.n	8016f40 <_getc_r+0x48>
 8016f34:	89a3      	ldrh	r3, [r4, #12]
 8016f36:	059b      	lsls	r3, r3, #22
 8016f38:	d402      	bmi.n	8016f40 <_getc_r+0x48>
 8016f3a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016f3c:	f7fd fe15 	bl	8014b6a <__retarget_lock_release_recursive>
 8016f40:	4628      	mov	r0, r5
 8016f42:	bd38      	pop	{r3, r4, r5, pc}
 8016f44:	6823      	ldr	r3, [r4, #0]
 8016f46:	1c5a      	adds	r2, r3, #1
 8016f48:	6022      	str	r2, [r4, #0]
 8016f4a:	781d      	ldrb	r5, [r3, #0]
 8016f4c:	e7ef      	b.n	8016f2e <_getc_r+0x36>

08016f4e <__swhatbuf_r>:
 8016f4e:	b570      	push	{r4, r5, r6, lr}
 8016f50:	460c      	mov	r4, r1
 8016f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f56:	2900      	cmp	r1, #0
 8016f58:	b096      	sub	sp, #88	@ 0x58
 8016f5a:	4615      	mov	r5, r2
 8016f5c:	461e      	mov	r6, r3
 8016f5e:	da0d      	bge.n	8016f7c <__swhatbuf_r+0x2e>
 8016f60:	89a3      	ldrh	r3, [r4, #12]
 8016f62:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016f66:	f04f 0100 	mov.w	r1, #0
 8016f6a:	bf14      	ite	ne
 8016f6c:	2340      	movne	r3, #64	@ 0x40
 8016f6e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016f72:	2000      	movs	r0, #0
 8016f74:	6031      	str	r1, [r6, #0]
 8016f76:	602b      	str	r3, [r5, #0]
 8016f78:	b016      	add	sp, #88	@ 0x58
 8016f7a:	bd70      	pop	{r4, r5, r6, pc}
 8016f7c:	466a      	mov	r2, sp
 8016f7e:	f000 f8df 	bl	8017140 <_fstat_r>
 8016f82:	2800      	cmp	r0, #0
 8016f84:	dbec      	blt.n	8016f60 <__swhatbuf_r+0x12>
 8016f86:	9901      	ldr	r1, [sp, #4]
 8016f88:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016f8c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016f90:	4259      	negs	r1, r3
 8016f92:	4159      	adcs	r1, r3
 8016f94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016f98:	e7eb      	b.n	8016f72 <__swhatbuf_r+0x24>

08016f9a <__smakebuf_r>:
 8016f9a:	898b      	ldrh	r3, [r1, #12]
 8016f9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016f9e:	079d      	lsls	r5, r3, #30
 8016fa0:	4606      	mov	r6, r0
 8016fa2:	460c      	mov	r4, r1
 8016fa4:	d507      	bpl.n	8016fb6 <__smakebuf_r+0x1c>
 8016fa6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016faa:	6023      	str	r3, [r4, #0]
 8016fac:	6123      	str	r3, [r4, #16]
 8016fae:	2301      	movs	r3, #1
 8016fb0:	6163      	str	r3, [r4, #20]
 8016fb2:	b003      	add	sp, #12
 8016fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016fb6:	ab01      	add	r3, sp, #4
 8016fb8:	466a      	mov	r2, sp
 8016fba:	f7ff ffc8 	bl	8016f4e <__swhatbuf_r>
 8016fbe:	9f00      	ldr	r7, [sp, #0]
 8016fc0:	4605      	mov	r5, r0
 8016fc2:	4639      	mov	r1, r7
 8016fc4:	4630      	mov	r0, r6
 8016fc6:	f7fb f99f 	bl	8012308 <_malloc_r>
 8016fca:	b948      	cbnz	r0, 8016fe0 <__smakebuf_r+0x46>
 8016fcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016fd0:	059a      	lsls	r2, r3, #22
 8016fd2:	d4ee      	bmi.n	8016fb2 <__smakebuf_r+0x18>
 8016fd4:	f023 0303 	bic.w	r3, r3, #3
 8016fd8:	f043 0302 	orr.w	r3, r3, #2
 8016fdc:	81a3      	strh	r3, [r4, #12]
 8016fde:	e7e2      	b.n	8016fa6 <__smakebuf_r+0xc>
 8016fe0:	89a3      	ldrh	r3, [r4, #12]
 8016fe2:	6020      	str	r0, [r4, #0]
 8016fe4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016fe8:	81a3      	strh	r3, [r4, #12]
 8016fea:	9b01      	ldr	r3, [sp, #4]
 8016fec:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016ff0:	b15b      	cbz	r3, 801700a <__smakebuf_r+0x70>
 8016ff2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016ff6:	4630      	mov	r0, r6
 8016ff8:	f000 f8b4 	bl	8017164 <_isatty_r>
 8016ffc:	b128      	cbz	r0, 801700a <__smakebuf_r+0x70>
 8016ffe:	89a3      	ldrh	r3, [r4, #12]
 8017000:	f023 0303 	bic.w	r3, r3, #3
 8017004:	f043 0301 	orr.w	r3, r3, #1
 8017008:	81a3      	strh	r3, [r4, #12]
 801700a:	89a3      	ldrh	r3, [r4, #12]
 801700c:	431d      	orrs	r5, r3
 801700e:	81a5      	strh	r5, [r4, #12]
 8017010:	e7cf      	b.n	8016fb2 <__smakebuf_r+0x18>

08017012 <_putc_r>:
 8017012:	b570      	push	{r4, r5, r6, lr}
 8017014:	460d      	mov	r5, r1
 8017016:	4614      	mov	r4, r2
 8017018:	4606      	mov	r6, r0
 801701a:	b118      	cbz	r0, 8017024 <_putc_r+0x12>
 801701c:	6a03      	ldr	r3, [r0, #32]
 801701e:	b90b      	cbnz	r3, 8017024 <_putc_r+0x12>
 8017020:	f7fd f998 	bl	8014354 <__sinit>
 8017024:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017026:	07d8      	lsls	r0, r3, #31
 8017028:	d405      	bmi.n	8017036 <_putc_r+0x24>
 801702a:	89a3      	ldrh	r3, [r4, #12]
 801702c:	0599      	lsls	r1, r3, #22
 801702e:	d402      	bmi.n	8017036 <_putc_r+0x24>
 8017030:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017032:	f7fd fd99 	bl	8014b68 <__retarget_lock_acquire_recursive>
 8017036:	68a3      	ldr	r3, [r4, #8]
 8017038:	3b01      	subs	r3, #1
 801703a:	2b00      	cmp	r3, #0
 801703c:	60a3      	str	r3, [r4, #8]
 801703e:	da05      	bge.n	801704c <_putc_r+0x3a>
 8017040:	69a2      	ldr	r2, [r4, #24]
 8017042:	4293      	cmp	r3, r2
 8017044:	db12      	blt.n	801706c <_putc_r+0x5a>
 8017046:	b2eb      	uxtb	r3, r5
 8017048:	2b0a      	cmp	r3, #10
 801704a:	d00f      	beq.n	801706c <_putc_r+0x5a>
 801704c:	6823      	ldr	r3, [r4, #0]
 801704e:	1c5a      	adds	r2, r3, #1
 8017050:	6022      	str	r2, [r4, #0]
 8017052:	701d      	strb	r5, [r3, #0]
 8017054:	b2ed      	uxtb	r5, r5
 8017056:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017058:	07da      	lsls	r2, r3, #31
 801705a:	d405      	bmi.n	8017068 <_putc_r+0x56>
 801705c:	89a3      	ldrh	r3, [r4, #12]
 801705e:	059b      	lsls	r3, r3, #22
 8017060:	d402      	bmi.n	8017068 <_putc_r+0x56>
 8017062:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017064:	f7fd fd81 	bl	8014b6a <__retarget_lock_release_recursive>
 8017068:	4628      	mov	r0, r5
 801706a:	bd70      	pop	{r4, r5, r6, pc}
 801706c:	4629      	mov	r1, r5
 801706e:	4622      	mov	r2, r4
 8017070:	4630      	mov	r0, r6
 8017072:	f7fd fa9c 	bl	80145ae <__swbuf_r>
 8017076:	4605      	mov	r5, r0
 8017078:	e7ed      	b.n	8017056 <_putc_r+0x44>

0801707a <__srget_r>:
 801707a:	b538      	push	{r3, r4, r5, lr}
 801707c:	460c      	mov	r4, r1
 801707e:	4605      	mov	r5, r0
 8017080:	b118      	cbz	r0, 801708a <__srget_r+0x10>
 8017082:	6a03      	ldr	r3, [r0, #32]
 8017084:	b90b      	cbnz	r3, 801708a <__srget_r+0x10>
 8017086:	f7fd f965 	bl	8014354 <__sinit>
 801708a:	4621      	mov	r1, r4
 801708c:	4628      	mov	r0, r5
 801708e:	f000 f8a3 	bl	80171d8 <__srefill_r>
 8017092:	b938      	cbnz	r0, 80170a4 <__srget_r+0x2a>
 8017094:	6863      	ldr	r3, [r4, #4]
 8017096:	3b01      	subs	r3, #1
 8017098:	6063      	str	r3, [r4, #4]
 801709a:	6823      	ldr	r3, [r4, #0]
 801709c:	1c5a      	adds	r2, r3, #1
 801709e:	6022      	str	r2, [r4, #0]
 80170a0:	7818      	ldrb	r0, [r3, #0]
 80170a2:	bd38      	pop	{r3, r4, r5, pc}
 80170a4:	f04f 30ff 	mov.w	r0, #4294967295
 80170a8:	e7fb      	b.n	80170a2 <__srget_r+0x28>

080170aa <memmove>:
 80170aa:	4288      	cmp	r0, r1
 80170ac:	b510      	push	{r4, lr}
 80170ae:	eb01 0402 	add.w	r4, r1, r2
 80170b2:	d902      	bls.n	80170ba <memmove+0x10>
 80170b4:	4284      	cmp	r4, r0
 80170b6:	4623      	mov	r3, r4
 80170b8:	d807      	bhi.n	80170ca <memmove+0x20>
 80170ba:	1e43      	subs	r3, r0, #1
 80170bc:	42a1      	cmp	r1, r4
 80170be:	d008      	beq.n	80170d2 <memmove+0x28>
 80170c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80170c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80170c8:	e7f8      	b.n	80170bc <memmove+0x12>
 80170ca:	4402      	add	r2, r0
 80170cc:	4601      	mov	r1, r0
 80170ce:	428a      	cmp	r2, r1
 80170d0:	d100      	bne.n	80170d4 <memmove+0x2a>
 80170d2:	bd10      	pop	{r4, pc}
 80170d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80170d8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80170dc:	e7f7      	b.n	80170ce <memmove+0x24>

080170de <_raise_r>:
 80170de:	291f      	cmp	r1, #31
 80170e0:	b538      	push	{r3, r4, r5, lr}
 80170e2:	4605      	mov	r5, r0
 80170e4:	460c      	mov	r4, r1
 80170e6:	d904      	bls.n	80170f2 <_raise_r+0x14>
 80170e8:	2316      	movs	r3, #22
 80170ea:	6003      	str	r3, [r0, #0]
 80170ec:	f04f 30ff 	mov.w	r0, #4294967295
 80170f0:	bd38      	pop	{r3, r4, r5, pc}
 80170f2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80170f4:	b112      	cbz	r2, 80170fc <_raise_r+0x1e>
 80170f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80170fa:	b94b      	cbnz	r3, 8017110 <_raise_r+0x32>
 80170fc:	4628      	mov	r0, r5
 80170fe:	f000 f853 	bl	80171a8 <_getpid_r>
 8017102:	4622      	mov	r2, r4
 8017104:	4601      	mov	r1, r0
 8017106:	4628      	mov	r0, r5
 8017108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801710c:	f000 b83a 	b.w	8017184 <_kill_r>
 8017110:	2b01      	cmp	r3, #1
 8017112:	d00a      	beq.n	801712a <_raise_r+0x4c>
 8017114:	1c59      	adds	r1, r3, #1
 8017116:	d103      	bne.n	8017120 <_raise_r+0x42>
 8017118:	2316      	movs	r3, #22
 801711a:	6003      	str	r3, [r0, #0]
 801711c:	2001      	movs	r0, #1
 801711e:	e7e7      	b.n	80170f0 <_raise_r+0x12>
 8017120:	2100      	movs	r1, #0
 8017122:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017126:	4620      	mov	r0, r4
 8017128:	4798      	blx	r3
 801712a:	2000      	movs	r0, #0
 801712c:	e7e0      	b.n	80170f0 <_raise_r+0x12>
	...

08017130 <raise>:
 8017130:	4b02      	ldr	r3, [pc, #8]	@ (801713c <raise+0xc>)
 8017132:	4601      	mov	r1, r0
 8017134:	6818      	ldr	r0, [r3, #0]
 8017136:	f7ff bfd2 	b.w	80170de <_raise_r>
 801713a:	bf00      	nop
 801713c:	200001d4 	.word	0x200001d4

08017140 <_fstat_r>:
 8017140:	b538      	push	{r3, r4, r5, lr}
 8017142:	4d07      	ldr	r5, [pc, #28]	@ (8017160 <_fstat_r+0x20>)
 8017144:	2300      	movs	r3, #0
 8017146:	4604      	mov	r4, r0
 8017148:	4608      	mov	r0, r1
 801714a:	4611      	mov	r1, r2
 801714c:	602b      	str	r3, [r5, #0]
 801714e:	f7ef fd7d 	bl	8006c4c <_fstat>
 8017152:	1c43      	adds	r3, r0, #1
 8017154:	d102      	bne.n	801715c <_fstat_r+0x1c>
 8017156:	682b      	ldr	r3, [r5, #0]
 8017158:	b103      	cbz	r3, 801715c <_fstat_r+0x1c>
 801715a:	6023      	str	r3, [r4, #0]
 801715c:	bd38      	pop	{r3, r4, r5, pc}
 801715e:	bf00      	nop
 8017160:	200007ac 	.word	0x200007ac

08017164 <_isatty_r>:
 8017164:	b538      	push	{r3, r4, r5, lr}
 8017166:	4d06      	ldr	r5, [pc, #24]	@ (8017180 <_isatty_r+0x1c>)
 8017168:	2300      	movs	r3, #0
 801716a:	4604      	mov	r4, r0
 801716c:	4608      	mov	r0, r1
 801716e:	602b      	str	r3, [r5, #0]
 8017170:	f7ef fd93 	bl	8006c9a <_isatty>
 8017174:	1c43      	adds	r3, r0, #1
 8017176:	d102      	bne.n	801717e <_isatty_r+0x1a>
 8017178:	682b      	ldr	r3, [r5, #0]
 801717a:	b103      	cbz	r3, 801717e <_isatty_r+0x1a>
 801717c:	6023      	str	r3, [r4, #0]
 801717e:	bd38      	pop	{r3, r4, r5, pc}
 8017180:	200007ac 	.word	0x200007ac

08017184 <_kill_r>:
 8017184:	b538      	push	{r3, r4, r5, lr}
 8017186:	4d07      	ldr	r5, [pc, #28]	@ (80171a4 <_kill_r+0x20>)
 8017188:	2300      	movs	r3, #0
 801718a:	4604      	mov	r4, r0
 801718c:	4608      	mov	r0, r1
 801718e:	4611      	mov	r1, r2
 8017190:	602b      	str	r3, [r5, #0]
 8017192:	f7ef fc73 	bl	8006a7c <_kill>
 8017196:	1c43      	adds	r3, r0, #1
 8017198:	d102      	bne.n	80171a0 <_kill_r+0x1c>
 801719a:	682b      	ldr	r3, [r5, #0]
 801719c:	b103      	cbz	r3, 80171a0 <_kill_r+0x1c>
 801719e:	6023      	str	r3, [r4, #0]
 80171a0:	bd38      	pop	{r3, r4, r5, pc}
 80171a2:	bf00      	nop
 80171a4:	200007ac 	.word	0x200007ac

080171a8 <_getpid_r>:
 80171a8:	f7ef bc60 	b.w	8006a6c <_getpid>

080171ac <_malloc_usable_size_r>:
 80171ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80171b0:	1f18      	subs	r0, r3, #4
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	bfbc      	itt	lt
 80171b6:	580b      	ldrlt	r3, [r1, r0]
 80171b8:	18c0      	addlt	r0, r0, r3
 80171ba:	4770      	bx	lr

080171bc <lflush>:
 80171bc:	898b      	ldrh	r3, [r1, #12]
 80171be:	f003 0309 	and.w	r3, r3, #9
 80171c2:	2b09      	cmp	r3, #9
 80171c4:	d103      	bne.n	80171ce <lflush+0x12>
 80171c6:	4b03      	ldr	r3, [pc, #12]	@ (80171d4 <lflush+0x18>)
 80171c8:	6818      	ldr	r0, [r3, #0]
 80171ca:	f7fc bfa9 	b.w	8014120 <_fflush_r>
 80171ce:	2000      	movs	r0, #0
 80171d0:	4770      	bx	lr
 80171d2:	bf00      	nop
 80171d4:	200001d4 	.word	0x200001d4

080171d8 <__srefill_r>:
 80171d8:	b570      	push	{r4, r5, r6, lr}
 80171da:	460c      	mov	r4, r1
 80171dc:	4605      	mov	r5, r0
 80171de:	b118      	cbz	r0, 80171e8 <__srefill_r+0x10>
 80171e0:	6a03      	ldr	r3, [r0, #32]
 80171e2:	b90b      	cbnz	r3, 80171e8 <__srefill_r+0x10>
 80171e4:	f7fd f8b6 	bl	8014354 <__sinit>
 80171e8:	2300      	movs	r3, #0
 80171ea:	6063      	str	r3, [r4, #4]
 80171ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80171f0:	069e      	lsls	r6, r3, #26
 80171f2:	d408      	bmi.n	8017206 <__srefill_r+0x2e>
 80171f4:	0758      	lsls	r0, r3, #29
 80171f6:	d445      	bmi.n	8017284 <__srefill_r+0xac>
 80171f8:	06d9      	lsls	r1, r3, #27
 80171fa:	d407      	bmi.n	801720c <__srefill_r+0x34>
 80171fc:	2209      	movs	r2, #9
 80171fe:	602a      	str	r2, [r5, #0]
 8017200:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017204:	81a3      	strh	r3, [r4, #12]
 8017206:	f04f 30ff 	mov.w	r0, #4294967295
 801720a:	bd70      	pop	{r4, r5, r6, pc}
 801720c:	071a      	lsls	r2, r3, #28
 801720e:	d50b      	bpl.n	8017228 <__srefill_r+0x50>
 8017210:	4621      	mov	r1, r4
 8017212:	4628      	mov	r0, r5
 8017214:	f7fc ff84 	bl	8014120 <_fflush_r>
 8017218:	2800      	cmp	r0, #0
 801721a:	d1f4      	bne.n	8017206 <__srefill_r+0x2e>
 801721c:	89a3      	ldrh	r3, [r4, #12]
 801721e:	60a0      	str	r0, [r4, #8]
 8017220:	f023 0308 	bic.w	r3, r3, #8
 8017224:	81a3      	strh	r3, [r4, #12]
 8017226:	61a0      	str	r0, [r4, #24]
 8017228:	89a3      	ldrh	r3, [r4, #12]
 801722a:	f043 0304 	orr.w	r3, r3, #4
 801722e:	81a3      	strh	r3, [r4, #12]
 8017230:	6923      	ldr	r3, [r4, #16]
 8017232:	b91b      	cbnz	r3, 801723c <__srefill_r+0x64>
 8017234:	4621      	mov	r1, r4
 8017236:	4628      	mov	r0, r5
 8017238:	f7ff feaf 	bl	8016f9a <__smakebuf_r>
 801723c:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8017240:	07b3      	lsls	r3, r6, #30
 8017242:	d00f      	beq.n	8017264 <__srefill_r+0x8c>
 8017244:	2301      	movs	r3, #1
 8017246:	4a1b      	ldr	r2, [pc, #108]	@ (80172b4 <__srefill_r+0xdc>)
 8017248:	491b      	ldr	r1, [pc, #108]	@ (80172b8 <__srefill_r+0xe0>)
 801724a:	481c      	ldr	r0, [pc, #112]	@ (80172bc <__srefill_r+0xe4>)
 801724c:	81a3      	strh	r3, [r4, #12]
 801724e:	f7fd f8ab 	bl	80143a8 <_fwalk_sglue>
 8017252:	81a6      	strh	r6, [r4, #12]
 8017254:	f006 0609 	and.w	r6, r6, #9
 8017258:	2e09      	cmp	r6, #9
 801725a:	d103      	bne.n	8017264 <__srefill_r+0x8c>
 801725c:	4621      	mov	r1, r4
 801725e:	4628      	mov	r0, r5
 8017260:	f7fc feda 	bl	8014018 <__sflush_r>
 8017264:	6922      	ldr	r2, [r4, #16]
 8017266:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8017268:	6963      	ldr	r3, [r4, #20]
 801726a:	6a21      	ldr	r1, [r4, #32]
 801726c:	6022      	str	r2, [r4, #0]
 801726e:	4628      	mov	r0, r5
 8017270:	47b0      	blx	r6
 8017272:	2800      	cmp	r0, #0
 8017274:	6060      	str	r0, [r4, #4]
 8017276:	dc17      	bgt.n	80172a8 <__srefill_r+0xd0>
 8017278:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801727c:	d116      	bne.n	80172ac <__srefill_r+0xd4>
 801727e:	f043 0320 	orr.w	r3, r3, #32
 8017282:	e7bf      	b.n	8017204 <__srefill_r+0x2c>
 8017284:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017286:	2900      	cmp	r1, #0
 8017288:	d0d2      	beq.n	8017230 <__srefill_r+0x58>
 801728a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801728e:	4299      	cmp	r1, r3
 8017290:	d002      	beq.n	8017298 <__srefill_r+0xc0>
 8017292:	4628      	mov	r0, r5
 8017294:	f7fe fae8 	bl	8015868 <_free_r>
 8017298:	2300      	movs	r3, #0
 801729a:	6363      	str	r3, [r4, #52]	@ 0x34
 801729c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801729e:	6063      	str	r3, [r4, #4]
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d0c5      	beq.n	8017230 <__srefill_r+0x58>
 80172a4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80172a6:	6023      	str	r3, [r4, #0]
 80172a8:	2000      	movs	r0, #0
 80172aa:	e7ae      	b.n	801720a <__srefill_r+0x32>
 80172ac:	2200      	movs	r2, #0
 80172ae:	6062      	str	r2, [r4, #4]
 80172b0:	e7a6      	b.n	8017200 <__srefill_r+0x28>
 80172b2:	bf00      	nop
 80172b4:	2000005c 	.word	0x2000005c
 80172b8:	080171bd 	.word	0x080171bd
 80172bc:	200001d8 	.word	0x200001d8

080172c0 <pow>:
 80172c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172c2:	ed2d 8b02 	vpush	{d8}
 80172c6:	eeb0 8a40 	vmov.f32	s16, s0
 80172ca:	eef0 8a60 	vmov.f32	s17, s1
 80172ce:	ec55 4b11 	vmov	r4, r5, d1
 80172d2:	f000 f871 	bl	80173b8 <__ieee754_pow>
 80172d6:	4622      	mov	r2, r4
 80172d8:	462b      	mov	r3, r5
 80172da:	4620      	mov	r0, r4
 80172dc:	4629      	mov	r1, r5
 80172de:	ec57 6b10 	vmov	r6, r7, d0
 80172e2:	f7e9 fc53 	bl	8000b8c <__aeabi_dcmpun>
 80172e6:	2800      	cmp	r0, #0
 80172e8:	d13b      	bne.n	8017362 <pow+0xa2>
 80172ea:	ec51 0b18 	vmov	r0, r1, d8
 80172ee:	2200      	movs	r2, #0
 80172f0:	2300      	movs	r3, #0
 80172f2:	f7e9 fc19 	bl	8000b28 <__aeabi_dcmpeq>
 80172f6:	b1b8      	cbz	r0, 8017328 <pow+0x68>
 80172f8:	2200      	movs	r2, #0
 80172fa:	2300      	movs	r3, #0
 80172fc:	4620      	mov	r0, r4
 80172fe:	4629      	mov	r1, r5
 8017300:	f7e9 fc12 	bl	8000b28 <__aeabi_dcmpeq>
 8017304:	2800      	cmp	r0, #0
 8017306:	d146      	bne.n	8017396 <pow+0xd6>
 8017308:	ec45 4b10 	vmov	d0, r4, r5
 801730c:	f000 f848 	bl	80173a0 <finite>
 8017310:	b338      	cbz	r0, 8017362 <pow+0xa2>
 8017312:	2200      	movs	r2, #0
 8017314:	2300      	movs	r3, #0
 8017316:	4620      	mov	r0, r4
 8017318:	4629      	mov	r1, r5
 801731a:	f7e9 fc0f 	bl	8000b3c <__aeabi_dcmplt>
 801731e:	b300      	cbz	r0, 8017362 <pow+0xa2>
 8017320:	f7fd fbf6 	bl	8014b10 <__errno>
 8017324:	2322      	movs	r3, #34	@ 0x22
 8017326:	e01b      	b.n	8017360 <pow+0xa0>
 8017328:	ec47 6b10 	vmov	d0, r6, r7
 801732c:	f000 f838 	bl	80173a0 <finite>
 8017330:	b9e0      	cbnz	r0, 801736c <pow+0xac>
 8017332:	eeb0 0a48 	vmov.f32	s0, s16
 8017336:	eef0 0a68 	vmov.f32	s1, s17
 801733a:	f000 f831 	bl	80173a0 <finite>
 801733e:	b1a8      	cbz	r0, 801736c <pow+0xac>
 8017340:	ec45 4b10 	vmov	d0, r4, r5
 8017344:	f000 f82c 	bl	80173a0 <finite>
 8017348:	b180      	cbz	r0, 801736c <pow+0xac>
 801734a:	4632      	mov	r2, r6
 801734c:	463b      	mov	r3, r7
 801734e:	4630      	mov	r0, r6
 8017350:	4639      	mov	r1, r7
 8017352:	f7e9 fc1b 	bl	8000b8c <__aeabi_dcmpun>
 8017356:	2800      	cmp	r0, #0
 8017358:	d0e2      	beq.n	8017320 <pow+0x60>
 801735a:	f7fd fbd9 	bl	8014b10 <__errno>
 801735e:	2321      	movs	r3, #33	@ 0x21
 8017360:	6003      	str	r3, [r0, #0]
 8017362:	ecbd 8b02 	vpop	{d8}
 8017366:	ec47 6b10 	vmov	d0, r6, r7
 801736a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801736c:	2200      	movs	r2, #0
 801736e:	2300      	movs	r3, #0
 8017370:	4630      	mov	r0, r6
 8017372:	4639      	mov	r1, r7
 8017374:	f7e9 fbd8 	bl	8000b28 <__aeabi_dcmpeq>
 8017378:	2800      	cmp	r0, #0
 801737a:	d0f2      	beq.n	8017362 <pow+0xa2>
 801737c:	eeb0 0a48 	vmov.f32	s0, s16
 8017380:	eef0 0a68 	vmov.f32	s1, s17
 8017384:	f000 f80c 	bl	80173a0 <finite>
 8017388:	2800      	cmp	r0, #0
 801738a:	d0ea      	beq.n	8017362 <pow+0xa2>
 801738c:	ec45 4b10 	vmov	d0, r4, r5
 8017390:	f000 f806 	bl	80173a0 <finite>
 8017394:	e7c3      	b.n	801731e <pow+0x5e>
 8017396:	4f01      	ldr	r7, [pc, #4]	@ (801739c <pow+0xdc>)
 8017398:	2600      	movs	r6, #0
 801739a:	e7e2      	b.n	8017362 <pow+0xa2>
 801739c:	3ff00000 	.word	0x3ff00000

080173a0 <finite>:
 80173a0:	b082      	sub	sp, #8
 80173a2:	ed8d 0b00 	vstr	d0, [sp]
 80173a6:	9801      	ldr	r0, [sp, #4]
 80173a8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80173ac:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80173b0:	0fc0      	lsrs	r0, r0, #31
 80173b2:	b002      	add	sp, #8
 80173b4:	4770      	bx	lr
	...

080173b8 <__ieee754_pow>:
 80173b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173bc:	b091      	sub	sp, #68	@ 0x44
 80173be:	ed8d 1b00 	vstr	d1, [sp]
 80173c2:	e9dd 1900 	ldrd	r1, r9, [sp]
 80173c6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80173ca:	ea5a 0001 	orrs.w	r0, sl, r1
 80173ce:	ec57 6b10 	vmov	r6, r7, d0
 80173d2:	d113      	bne.n	80173fc <__ieee754_pow+0x44>
 80173d4:	19b3      	adds	r3, r6, r6
 80173d6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80173da:	4152      	adcs	r2, r2
 80173dc:	4298      	cmp	r0, r3
 80173de:	4b9a      	ldr	r3, [pc, #616]	@ (8017648 <__ieee754_pow+0x290>)
 80173e0:	4193      	sbcs	r3, r2
 80173e2:	f080 84ee 	bcs.w	8017dc2 <__ieee754_pow+0xa0a>
 80173e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80173ea:	4630      	mov	r0, r6
 80173ec:	4639      	mov	r1, r7
 80173ee:	f7e8 ff7d 	bl	80002ec <__adddf3>
 80173f2:	ec41 0b10 	vmov	d0, r0, r1
 80173f6:	b011      	add	sp, #68	@ 0x44
 80173f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173fc:	4a93      	ldr	r2, [pc, #588]	@ (801764c <__ieee754_pow+0x294>)
 80173fe:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8017402:	4295      	cmp	r5, r2
 8017404:	46b8      	mov	r8, r7
 8017406:	4633      	mov	r3, r6
 8017408:	d80a      	bhi.n	8017420 <__ieee754_pow+0x68>
 801740a:	d104      	bne.n	8017416 <__ieee754_pow+0x5e>
 801740c:	2e00      	cmp	r6, #0
 801740e:	d1ea      	bne.n	80173e6 <__ieee754_pow+0x2e>
 8017410:	45aa      	cmp	sl, r5
 8017412:	d8e8      	bhi.n	80173e6 <__ieee754_pow+0x2e>
 8017414:	e001      	b.n	801741a <__ieee754_pow+0x62>
 8017416:	4592      	cmp	sl, r2
 8017418:	d802      	bhi.n	8017420 <__ieee754_pow+0x68>
 801741a:	4592      	cmp	sl, r2
 801741c:	d10f      	bne.n	801743e <__ieee754_pow+0x86>
 801741e:	b171      	cbz	r1, 801743e <__ieee754_pow+0x86>
 8017420:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8017424:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8017428:	ea58 0803 	orrs.w	r8, r8, r3
 801742c:	d1db      	bne.n	80173e6 <__ieee754_pow+0x2e>
 801742e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017432:	18db      	adds	r3, r3, r3
 8017434:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8017438:	4152      	adcs	r2, r2
 801743a:	4598      	cmp	r8, r3
 801743c:	e7cf      	b.n	80173de <__ieee754_pow+0x26>
 801743e:	f1b8 0f00 	cmp.w	r8, #0
 8017442:	46ab      	mov	fp, r5
 8017444:	da43      	bge.n	80174ce <__ieee754_pow+0x116>
 8017446:	4a82      	ldr	r2, [pc, #520]	@ (8017650 <__ieee754_pow+0x298>)
 8017448:	4592      	cmp	sl, r2
 801744a:	d856      	bhi.n	80174fa <__ieee754_pow+0x142>
 801744c:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8017450:	4592      	cmp	sl, r2
 8017452:	f240 84c5 	bls.w	8017de0 <__ieee754_pow+0xa28>
 8017456:	ea4f 522a 	mov.w	r2, sl, asr #20
 801745a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801745e:	2a14      	cmp	r2, #20
 8017460:	dd18      	ble.n	8017494 <__ieee754_pow+0xdc>
 8017462:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8017466:	fa21 f402 	lsr.w	r4, r1, r2
 801746a:	fa04 f202 	lsl.w	r2, r4, r2
 801746e:	428a      	cmp	r2, r1
 8017470:	f040 84b6 	bne.w	8017de0 <__ieee754_pow+0xa28>
 8017474:	f004 0401 	and.w	r4, r4, #1
 8017478:	f1c4 0402 	rsb	r4, r4, #2
 801747c:	2900      	cmp	r1, #0
 801747e:	d159      	bne.n	8017534 <__ieee754_pow+0x17c>
 8017480:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8017484:	d148      	bne.n	8017518 <__ieee754_pow+0x160>
 8017486:	4632      	mov	r2, r6
 8017488:	463b      	mov	r3, r7
 801748a:	4630      	mov	r0, r6
 801748c:	4639      	mov	r1, r7
 801748e:	f7e9 f8e3 	bl	8000658 <__aeabi_dmul>
 8017492:	e7ae      	b.n	80173f2 <__ieee754_pow+0x3a>
 8017494:	2900      	cmp	r1, #0
 8017496:	d14c      	bne.n	8017532 <__ieee754_pow+0x17a>
 8017498:	f1c2 0214 	rsb	r2, r2, #20
 801749c:	fa4a f402 	asr.w	r4, sl, r2
 80174a0:	fa04 f202 	lsl.w	r2, r4, r2
 80174a4:	4552      	cmp	r2, sl
 80174a6:	f040 8498 	bne.w	8017dda <__ieee754_pow+0xa22>
 80174aa:	f004 0401 	and.w	r4, r4, #1
 80174ae:	f1c4 0402 	rsb	r4, r4, #2
 80174b2:	4a68      	ldr	r2, [pc, #416]	@ (8017654 <__ieee754_pow+0x29c>)
 80174b4:	4592      	cmp	sl, r2
 80174b6:	d1e3      	bne.n	8017480 <__ieee754_pow+0xc8>
 80174b8:	f1b9 0f00 	cmp.w	r9, #0
 80174bc:	f280 8489 	bge.w	8017dd2 <__ieee754_pow+0xa1a>
 80174c0:	4964      	ldr	r1, [pc, #400]	@ (8017654 <__ieee754_pow+0x29c>)
 80174c2:	4632      	mov	r2, r6
 80174c4:	463b      	mov	r3, r7
 80174c6:	2000      	movs	r0, #0
 80174c8:	f7e9 f9f0 	bl	80008ac <__aeabi_ddiv>
 80174cc:	e791      	b.n	80173f2 <__ieee754_pow+0x3a>
 80174ce:	2400      	movs	r4, #0
 80174d0:	bb81      	cbnz	r1, 8017534 <__ieee754_pow+0x17c>
 80174d2:	4a5e      	ldr	r2, [pc, #376]	@ (801764c <__ieee754_pow+0x294>)
 80174d4:	4592      	cmp	sl, r2
 80174d6:	d1ec      	bne.n	80174b2 <__ieee754_pow+0xfa>
 80174d8:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 80174dc:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80174e0:	431a      	orrs	r2, r3
 80174e2:	f000 846e 	beq.w	8017dc2 <__ieee754_pow+0xa0a>
 80174e6:	4b5c      	ldr	r3, [pc, #368]	@ (8017658 <__ieee754_pow+0x2a0>)
 80174e8:	429d      	cmp	r5, r3
 80174ea:	d908      	bls.n	80174fe <__ieee754_pow+0x146>
 80174ec:	f1b9 0f00 	cmp.w	r9, #0
 80174f0:	f280 846b 	bge.w	8017dca <__ieee754_pow+0xa12>
 80174f4:	2000      	movs	r0, #0
 80174f6:	2100      	movs	r1, #0
 80174f8:	e77b      	b.n	80173f2 <__ieee754_pow+0x3a>
 80174fa:	2402      	movs	r4, #2
 80174fc:	e7e8      	b.n	80174d0 <__ieee754_pow+0x118>
 80174fe:	f1b9 0f00 	cmp.w	r9, #0
 8017502:	f04f 0000 	mov.w	r0, #0
 8017506:	f04f 0100 	mov.w	r1, #0
 801750a:	f6bf af72 	bge.w	80173f2 <__ieee754_pow+0x3a>
 801750e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8017512:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8017516:	e76c      	b.n	80173f2 <__ieee754_pow+0x3a>
 8017518:	4a50      	ldr	r2, [pc, #320]	@ (801765c <__ieee754_pow+0x2a4>)
 801751a:	4591      	cmp	r9, r2
 801751c:	d10a      	bne.n	8017534 <__ieee754_pow+0x17c>
 801751e:	f1b8 0f00 	cmp.w	r8, #0
 8017522:	db07      	blt.n	8017534 <__ieee754_pow+0x17c>
 8017524:	ec47 6b10 	vmov	d0, r6, r7
 8017528:	b011      	add	sp, #68	@ 0x44
 801752a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801752e:	f000 bd4f 	b.w	8017fd0 <__ieee754_sqrt>
 8017532:	2400      	movs	r4, #0
 8017534:	ec47 6b10 	vmov	d0, r6, r7
 8017538:	9302      	str	r3, [sp, #8]
 801753a:	f000 fc87 	bl	8017e4c <fabs>
 801753e:	9b02      	ldr	r3, [sp, #8]
 8017540:	ec51 0b10 	vmov	r0, r1, d0
 8017544:	bb43      	cbnz	r3, 8017598 <__ieee754_pow+0x1e0>
 8017546:	4b43      	ldr	r3, [pc, #268]	@ (8017654 <__ieee754_pow+0x29c>)
 8017548:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 801754c:	429a      	cmp	r2, r3
 801754e:	d000      	beq.n	8017552 <__ieee754_pow+0x19a>
 8017550:	bb15      	cbnz	r5, 8017598 <__ieee754_pow+0x1e0>
 8017552:	f1b9 0f00 	cmp.w	r9, #0
 8017556:	da05      	bge.n	8017564 <__ieee754_pow+0x1ac>
 8017558:	4602      	mov	r2, r0
 801755a:	460b      	mov	r3, r1
 801755c:	2000      	movs	r0, #0
 801755e:	493d      	ldr	r1, [pc, #244]	@ (8017654 <__ieee754_pow+0x29c>)
 8017560:	f7e9 f9a4 	bl	80008ac <__aeabi_ddiv>
 8017564:	f1b8 0f00 	cmp.w	r8, #0
 8017568:	f6bf af43 	bge.w	80173f2 <__ieee754_pow+0x3a>
 801756c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8017570:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8017574:	4325      	orrs	r5, r4
 8017576:	d108      	bne.n	801758a <__ieee754_pow+0x1d2>
 8017578:	4602      	mov	r2, r0
 801757a:	460b      	mov	r3, r1
 801757c:	4610      	mov	r0, r2
 801757e:	4619      	mov	r1, r3
 8017580:	f7e8 feb2 	bl	80002e8 <__aeabi_dsub>
 8017584:	4602      	mov	r2, r0
 8017586:	460b      	mov	r3, r1
 8017588:	e79e      	b.n	80174c8 <__ieee754_pow+0x110>
 801758a:	2c01      	cmp	r4, #1
 801758c:	f47f af31 	bne.w	80173f2 <__ieee754_pow+0x3a>
 8017590:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017594:	4619      	mov	r1, r3
 8017596:	e72c      	b.n	80173f2 <__ieee754_pow+0x3a>
 8017598:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 801759c:	3b01      	subs	r3, #1
 801759e:	ea53 0204 	orrs.w	r2, r3, r4
 80175a2:	d102      	bne.n	80175aa <__ieee754_pow+0x1f2>
 80175a4:	4632      	mov	r2, r6
 80175a6:	463b      	mov	r3, r7
 80175a8:	e7e8      	b.n	801757c <__ieee754_pow+0x1c4>
 80175aa:	3c01      	subs	r4, #1
 80175ac:	431c      	orrs	r4, r3
 80175ae:	d016      	beq.n	80175de <__ieee754_pow+0x226>
 80175b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8017638 <__ieee754_pow+0x280>
 80175b4:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80175b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80175bc:	f240 8110 	bls.w	80177e0 <__ieee754_pow+0x428>
 80175c0:	4b27      	ldr	r3, [pc, #156]	@ (8017660 <__ieee754_pow+0x2a8>)
 80175c2:	459a      	cmp	sl, r3
 80175c4:	4b24      	ldr	r3, [pc, #144]	@ (8017658 <__ieee754_pow+0x2a0>)
 80175c6:	d916      	bls.n	80175f6 <__ieee754_pow+0x23e>
 80175c8:	429d      	cmp	r5, r3
 80175ca:	d80b      	bhi.n	80175e4 <__ieee754_pow+0x22c>
 80175cc:	f1b9 0f00 	cmp.w	r9, #0
 80175d0:	da0b      	bge.n	80175ea <__ieee754_pow+0x232>
 80175d2:	2000      	movs	r0, #0
 80175d4:	b011      	add	sp, #68	@ 0x44
 80175d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175da:	f000 bcf1 	b.w	8017fc0 <__math_oflow>
 80175de:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8017640 <__ieee754_pow+0x288>
 80175e2:	e7e7      	b.n	80175b4 <__ieee754_pow+0x1fc>
 80175e4:	f1b9 0f00 	cmp.w	r9, #0
 80175e8:	dcf3      	bgt.n	80175d2 <__ieee754_pow+0x21a>
 80175ea:	2000      	movs	r0, #0
 80175ec:	b011      	add	sp, #68	@ 0x44
 80175ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175f2:	f000 bcdd 	b.w	8017fb0 <__math_uflow>
 80175f6:	429d      	cmp	r5, r3
 80175f8:	d20c      	bcs.n	8017614 <__ieee754_pow+0x25c>
 80175fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80175fe:	2200      	movs	r2, #0
 8017600:	2300      	movs	r3, #0
 8017602:	f7e9 fa9b 	bl	8000b3c <__aeabi_dcmplt>
 8017606:	3800      	subs	r0, #0
 8017608:	bf18      	it	ne
 801760a:	2001      	movne	r0, #1
 801760c:	f1b9 0f00 	cmp.w	r9, #0
 8017610:	daec      	bge.n	80175ec <__ieee754_pow+0x234>
 8017612:	e7df      	b.n	80175d4 <__ieee754_pow+0x21c>
 8017614:	4b0f      	ldr	r3, [pc, #60]	@ (8017654 <__ieee754_pow+0x29c>)
 8017616:	429d      	cmp	r5, r3
 8017618:	f04f 0200 	mov.w	r2, #0
 801761c:	d922      	bls.n	8017664 <__ieee754_pow+0x2ac>
 801761e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017622:	2300      	movs	r3, #0
 8017624:	f7e9 fa8a 	bl	8000b3c <__aeabi_dcmplt>
 8017628:	3800      	subs	r0, #0
 801762a:	bf18      	it	ne
 801762c:	2001      	movne	r0, #1
 801762e:	f1b9 0f00 	cmp.w	r9, #0
 8017632:	dccf      	bgt.n	80175d4 <__ieee754_pow+0x21c>
 8017634:	e7da      	b.n	80175ec <__ieee754_pow+0x234>
 8017636:	bf00      	nop
 8017638:	00000000 	.word	0x00000000
 801763c:	3ff00000 	.word	0x3ff00000
 8017640:	00000000 	.word	0x00000000
 8017644:	bff00000 	.word	0xbff00000
 8017648:	fff00000 	.word	0xfff00000
 801764c:	7ff00000 	.word	0x7ff00000
 8017650:	433fffff 	.word	0x433fffff
 8017654:	3ff00000 	.word	0x3ff00000
 8017658:	3fefffff 	.word	0x3fefffff
 801765c:	3fe00000 	.word	0x3fe00000
 8017660:	43f00000 	.word	0x43f00000
 8017664:	4b5a      	ldr	r3, [pc, #360]	@ (80177d0 <__ieee754_pow+0x418>)
 8017666:	f7e8 fe3f 	bl	80002e8 <__aeabi_dsub>
 801766a:	a351      	add	r3, pc, #324	@ (adr r3, 80177b0 <__ieee754_pow+0x3f8>)
 801766c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017670:	4604      	mov	r4, r0
 8017672:	460d      	mov	r5, r1
 8017674:	f7e8 fff0 	bl	8000658 <__aeabi_dmul>
 8017678:	a34f      	add	r3, pc, #316	@ (adr r3, 80177b8 <__ieee754_pow+0x400>)
 801767a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801767e:	4606      	mov	r6, r0
 8017680:	460f      	mov	r7, r1
 8017682:	4620      	mov	r0, r4
 8017684:	4629      	mov	r1, r5
 8017686:	f7e8 ffe7 	bl	8000658 <__aeabi_dmul>
 801768a:	4b52      	ldr	r3, [pc, #328]	@ (80177d4 <__ieee754_pow+0x41c>)
 801768c:	4682      	mov	sl, r0
 801768e:	468b      	mov	fp, r1
 8017690:	2200      	movs	r2, #0
 8017692:	4620      	mov	r0, r4
 8017694:	4629      	mov	r1, r5
 8017696:	f7e8 ffdf 	bl	8000658 <__aeabi_dmul>
 801769a:	4602      	mov	r2, r0
 801769c:	460b      	mov	r3, r1
 801769e:	a148      	add	r1, pc, #288	@ (adr r1, 80177c0 <__ieee754_pow+0x408>)
 80176a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80176a4:	f7e8 fe20 	bl	80002e8 <__aeabi_dsub>
 80176a8:	4622      	mov	r2, r4
 80176aa:	462b      	mov	r3, r5
 80176ac:	f7e8 ffd4 	bl	8000658 <__aeabi_dmul>
 80176b0:	4602      	mov	r2, r0
 80176b2:	460b      	mov	r3, r1
 80176b4:	2000      	movs	r0, #0
 80176b6:	4948      	ldr	r1, [pc, #288]	@ (80177d8 <__ieee754_pow+0x420>)
 80176b8:	f7e8 fe16 	bl	80002e8 <__aeabi_dsub>
 80176bc:	4622      	mov	r2, r4
 80176be:	4680      	mov	r8, r0
 80176c0:	4689      	mov	r9, r1
 80176c2:	462b      	mov	r3, r5
 80176c4:	4620      	mov	r0, r4
 80176c6:	4629      	mov	r1, r5
 80176c8:	f7e8 ffc6 	bl	8000658 <__aeabi_dmul>
 80176cc:	4602      	mov	r2, r0
 80176ce:	460b      	mov	r3, r1
 80176d0:	4640      	mov	r0, r8
 80176d2:	4649      	mov	r1, r9
 80176d4:	f7e8 ffc0 	bl	8000658 <__aeabi_dmul>
 80176d8:	a33b      	add	r3, pc, #236	@ (adr r3, 80177c8 <__ieee754_pow+0x410>)
 80176da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176de:	f7e8 ffbb 	bl	8000658 <__aeabi_dmul>
 80176e2:	4602      	mov	r2, r0
 80176e4:	460b      	mov	r3, r1
 80176e6:	4650      	mov	r0, sl
 80176e8:	4659      	mov	r1, fp
 80176ea:	f7e8 fdfd 	bl	80002e8 <__aeabi_dsub>
 80176ee:	4602      	mov	r2, r0
 80176f0:	460b      	mov	r3, r1
 80176f2:	4680      	mov	r8, r0
 80176f4:	4689      	mov	r9, r1
 80176f6:	4630      	mov	r0, r6
 80176f8:	4639      	mov	r1, r7
 80176fa:	f7e8 fdf7 	bl	80002ec <__adddf3>
 80176fe:	2400      	movs	r4, #0
 8017700:	4632      	mov	r2, r6
 8017702:	463b      	mov	r3, r7
 8017704:	4620      	mov	r0, r4
 8017706:	460d      	mov	r5, r1
 8017708:	f7e8 fdee 	bl	80002e8 <__aeabi_dsub>
 801770c:	4602      	mov	r2, r0
 801770e:	460b      	mov	r3, r1
 8017710:	4640      	mov	r0, r8
 8017712:	4649      	mov	r1, r9
 8017714:	f7e8 fde8 	bl	80002e8 <__aeabi_dsub>
 8017718:	e9dd 2300 	ldrd	r2, r3, [sp]
 801771c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8017720:	2300      	movs	r3, #0
 8017722:	9304      	str	r3, [sp, #16]
 8017724:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8017728:	4606      	mov	r6, r0
 801772a:	460f      	mov	r7, r1
 801772c:	465b      	mov	r3, fp
 801772e:	4652      	mov	r2, sl
 8017730:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017734:	f7e8 fdd8 	bl	80002e8 <__aeabi_dsub>
 8017738:	4622      	mov	r2, r4
 801773a:	462b      	mov	r3, r5
 801773c:	f7e8 ff8c 	bl	8000658 <__aeabi_dmul>
 8017740:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017744:	4680      	mov	r8, r0
 8017746:	4689      	mov	r9, r1
 8017748:	4630      	mov	r0, r6
 801774a:	4639      	mov	r1, r7
 801774c:	f7e8 ff84 	bl	8000658 <__aeabi_dmul>
 8017750:	4602      	mov	r2, r0
 8017752:	460b      	mov	r3, r1
 8017754:	4640      	mov	r0, r8
 8017756:	4649      	mov	r1, r9
 8017758:	f7e8 fdc8 	bl	80002ec <__adddf3>
 801775c:	465b      	mov	r3, fp
 801775e:	4606      	mov	r6, r0
 8017760:	460f      	mov	r7, r1
 8017762:	4652      	mov	r2, sl
 8017764:	4620      	mov	r0, r4
 8017766:	4629      	mov	r1, r5
 8017768:	f7e8 ff76 	bl	8000658 <__aeabi_dmul>
 801776c:	460b      	mov	r3, r1
 801776e:	4602      	mov	r2, r0
 8017770:	4680      	mov	r8, r0
 8017772:	4689      	mov	r9, r1
 8017774:	4630      	mov	r0, r6
 8017776:	4639      	mov	r1, r7
 8017778:	f7e8 fdb8 	bl	80002ec <__adddf3>
 801777c:	4b17      	ldr	r3, [pc, #92]	@ (80177dc <__ieee754_pow+0x424>)
 801777e:	4299      	cmp	r1, r3
 8017780:	4604      	mov	r4, r0
 8017782:	460d      	mov	r5, r1
 8017784:	468b      	mov	fp, r1
 8017786:	f340 820b 	ble.w	8017ba0 <__ieee754_pow+0x7e8>
 801778a:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 801778e:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8017792:	4303      	orrs	r3, r0
 8017794:	f000 81ea 	beq.w	8017b6c <__ieee754_pow+0x7b4>
 8017798:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801779c:	2200      	movs	r2, #0
 801779e:	2300      	movs	r3, #0
 80177a0:	f7e9 f9cc 	bl	8000b3c <__aeabi_dcmplt>
 80177a4:	3800      	subs	r0, #0
 80177a6:	bf18      	it	ne
 80177a8:	2001      	movne	r0, #1
 80177aa:	e713      	b.n	80175d4 <__ieee754_pow+0x21c>
 80177ac:	f3af 8000 	nop.w
 80177b0:	60000000 	.word	0x60000000
 80177b4:	3ff71547 	.word	0x3ff71547
 80177b8:	f85ddf44 	.word	0xf85ddf44
 80177bc:	3e54ae0b 	.word	0x3e54ae0b
 80177c0:	55555555 	.word	0x55555555
 80177c4:	3fd55555 	.word	0x3fd55555
 80177c8:	652b82fe 	.word	0x652b82fe
 80177cc:	3ff71547 	.word	0x3ff71547
 80177d0:	3ff00000 	.word	0x3ff00000
 80177d4:	3fd00000 	.word	0x3fd00000
 80177d8:	3fe00000 	.word	0x3fe00000
 80177dc:	408fffff 	.word	0x408fffff
 80177e0:	4bd5      	ldr	r3, [pc, #852]	@ (8017b38 <__ieee754_pow+0x780>)
 80177e2:	ea08 0303 	and.w	r3, r8, r3
 80177e6:	2200      	movs	r2, #0
 80177e8:	b92b      	cbnz	r3, 80177f6 <__ieee754_pow+0x43e>
 80177ea:	4bd4      	ldr	r3, [pc, #848]	@ (8017b3c <__ieee754_pow+0x784>)
 80177ec:	f7e8 ff34 	bl	8000658 <__aeabi_dmul>
 80177f0:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80177f4:	468b      	mov	fp, r1
 80177f6:	ea4f 532b 	mov.w	r3, fp, asr #20
 80177fa:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80177fe:	4413      	add	r3, r2
 8017800:	930a      	str	r3, [sp, #40]	@ 0x28
 8017802:	4bcf      	ldr	r3, [pc, #828]	@ (8017b40 <__ieee754_pow+0x788>)
 8017804:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8017808:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801780c:	459b      	cmp	fp, r3
 801780e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8017812:	dd08      	ble.n	8017826 <__ieee754_pow+0x46e>
 8017814:	4bcb      	ldr	r3, [pc, #812]	@ (8017b44 <__ieee754_pow+0x78c>)
 8017816:	459b      	cmp	fp, r3
 8017818:	f340 81a5 	ble.w	8017b66 <__ieee754_pow+0x7ae>
 801781c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801781e:	3301      	adds	r3, #1
 8017820:	930a      	str	r3, [sp, #40]	@ 0x28
 8017822:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8017826:	f04f 0a00 	mov.w	sl, #0
 801782a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801782e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017830:	4bc5      	ldr	r3, [pc, #788]	@ (8017b48 <__ieee754_pow+0x790>)
 8017832:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017836:	ed93 7b00 	vldr	d7, [r3]
 801783a:	4629      	mov	r1, r5
 801783c:	ec53 2b17 	vmov	r2, r3, d7
 8017840:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017844:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017848:	f7e8 fd4e 	bl	80002e8 <__aeabi_dsub>
 801784c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017850:	4606      	mov	r6, r0
 8017852:	460f      	mov	r7, r1
 8017854:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017858:	f7e8 fd48 	bl	80002ec <__adddf3>
 801785c:	4602      	mov	r2, r0
 801785e:	460b      	mov	r3, r1
 8017860:	2000      	movs	r0, #0
 8017862:	49ba      	ldr	r1, [pc, #744]	@ (8017b4c <__ieee754_pow+0x794>)
 8017864:	f7e9 f822 	bl	80008ac <__aeabi_ddiv>
 8017868:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801786c:	4602      	mov	r2, r0
 801786e:	460b      	mov	r3, r1
 8017870:	4630      	mov	r0, r6
 8017872:	4639      	mov	r1, r7
 8017874:	f7e8 fef0 	bl	8000658 <__aeabi_dmul>
 8017878:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801787c:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8017880:	106d      	asrs	r5, r5, #1
 8017882:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8017886:	f04f 0b00 	mov.w	fp, #0
 801788a:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801788e:	4661      	mov	r1, ip
 8017890:	2200      	movs	r2, #0
 8017892:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8017896:	4658      	mov	r0, fp
 8017898:	46e1      	mov	r9, ip
 801789a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801789e:	4614      	mov	r4, r2
 80178a0:	461d      	mov	r5, r3
 80178a2:	f7e8 fed9 	bl	8000658 <__aeabi_dmul>
 80178a6:	4602      	mov	r2, r0
 80178a8:	460b      	mov	r3, r1
 80178aa:	4630      	mov	r0, r6
 80178ac:	4639      	mov	r1, r7
 80178ae:	f7e8 fd1b 	bl	80002e8 <__aeabi_dsub>
 80178b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80178b6:	4606      	mov	r6, r0
 80178b8:	460f      	mov	r7, r1
 80178ba:	4620      	mov	r0, r4
 80178bc:	4629      	mov	r1, r5
 80178be:	f7e8 fd13 	bl	80002e8 <__aeabi_dsub>
 80178c2:	4602      	mov	r2, r0
 80178c4:	460b      	mov	r3, r1
 80178c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80178ca:	f7e8 fd0d 	bl	80002e8 <__aeabi_dsub>
 80178ce:	465a      	mov	r2, fp
 80178d0:	464b      	mov	r3, r9
 80178d2:	f7e8 fec1 	bl	8000658 <__aeabi_dmul>
 80178d6:	4602      	mov	r2, r0
 80178d8:	460b      	mov	r3, r1
 80178da:	4630      	mov	r0, r6
 80178dc:	4639      	mov	r1, r7
 80178de:	f7e8 fd03 	bl	80002e8 <__aeabi_dsub>
 80178e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80178e6:	f7e8 feb7 	bl	8000658 <__aeabi_dmul>
 80178ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80178ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80178f2:	4610      	mov	r0, r2
 80178f4:	4619      	mov	r1, r3
 80178f6:	f7e8 feaf 	bl	8000658 <__aeabi_dmul>
 80178fa:	a37d      	add	r3, pc, #500	@ (adr r3, 8017af0 <__ieee754_pow+0x738>)
 80178fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017900:	4604      	mov	r4, r0
 8017902:	460d      	mov	r5, r1
 8017904:	f7e8 fea8 	bl	8000658 <__aeabi_dmul>
 8017908:	a37b      	add	r3, pc, #492	@ (adr r3, 8017af8 <__ieee754_pow+0x740>)
 801790a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801790e:	f7e8 fced 	bl	80002ec <__adddf3>
 8017912:	4622      	mov	r2, r4
 8017914:	462b      	mov	r3, r5
 8017916:	f7e8 fe9f 	bl	8000658 <__aeabi_dmul>
 801791a:	a379      	add	r3, pc, #484	@ (adr r3, 8017b00 <__ieee754_pow+0x748>)
 801791c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017920:	f7e8 fce4 	bl	80002ec <__adddf3>
 8017924:	4622      	mov	r2, r4
 8017926:	462b      	mov	r3, r5
 8017928:	f7e8 fe96 	bl	8000658 <__aeabi_dmul>
 801792c:	a376      	add	r3, pc, #472	@ (adr r3, 8017b08 <__ieee754_pow+0x750>)
 801792e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017932:	f7e8 fcdb 	bl	80002ec <__adddf3>
 8017936:	4622      	mov	r2, r4
 8017938:	462b      	mov	r3, r5
 801793a:	f7e8 fe8d 	bl	8000658 <__aeabi_dmul>
 801793e:	a374      	add	r3, pc, #464	@ (adr r3, 8017b10 <__ieee754_pow+0x758>)
 8017940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017944:	f7e8 fcd2 	bl	80002ec <__adddf3>
 8017948:	4622      	mov	r2, r4
 801794a:	462b      	mov	r3, r5
 801794c:	f7e8 fe84 	bl	8000658 <__aeabi_dmul>
 8017950:	a371      	add	r3, pc, #452	@ (adr r3, 8017b18 <__ieee754_pow+0x760>)
 8017952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017956:	f7e8 fcc9 	bl	80002ec <__adddf3>
 801795a:	4622      	mov	r2, r4
 801795c:	4606      	mov	r6, r0
 801795e:	460f      	mov	r7, r1
 8017960:	462b      	mov	r3, r5
 8017962:	4620      	mov	r0, r4
 8017964:	4629      	mov	r1, r5
 8017966:	f7e8 fe77 	bl	8000658 <__aeabi_dmul>
 801796a:	4602      	mov	r2, r0
 801796c:	460b      	mov	r3, r1
 801796e:	4630      	mov	r0, r6
 8017970:	4639      	mov	r1, r7
 8017972:	f7e8 fe71 	bl	8000658 <__aeabi_dmul>
 8017976:	465a      	mov	r2, fp
 8017978:	4604      	mov	r4, r0
 801797a:	460d      	mov	r5, r1
 801797c:	464b      	mov	r3, r9
 801797e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017982:	f7e8 fcb3 	bl	80002ec <__adddf3>
 8017986:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801798a:	f7e8 fe65 	bl	8000658 <__aeabi_dmul>
 801798e:	4622      	mov	r2, r4
 8017990:	462b      	mov	r3, r5
 8017992:	f7e8 fcab 	bl	80002ec <__adddf3>
 8017996:	465a      	mov	r2, fp
 8017998:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801799c:	464b      	mov	r3, r9
 801799e:	4658      	mov	r0, fp
 80179a0:	4649      	mov	r1, r9
 80179a2:	f7e8 fe59 	bl	8000658 <__aeabi_dmul>
 80179a6:	4b6a      	ldr	r3, [pc, #424]	@ (8017b50 <__ieee754_pow+0x798>)
 80179a8:	2200      	movs	r2, #0
 80179aa:	4606      	mov	r6, r0
 80179ac:	460f      	mov	r7, r1
 80179ae:	f7e8 fc9d 	bl	80002ec <__adddf3>
 80179b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80179b6:	f7e8 fc99 	bl	80002ec <__adddf3>
 80179ba:	46d8      	mov	r8, fp
 80179bc:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80179c0:	460d      	mov	r5, r1
 80179c2:	465a      	mov	r2, fp
 80179c4:	460b      	mov	r3, r1
 80179c6:	4640      	mov	r0, r8
 80179c8:	4649      	mov	r1, r9
 80179ca:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80179ce:	f7e8 fe43 	bl	8000658 <__aeabi_dmul>
 80179d2:	465c      	mov	r4, fp
 80179d4:	4680      	mov	r8, r0
 80179d6:	4689      	mov	r9, r1
 80179d8:	4b5d      	ldr	r3, [pc, #372]	@ (8017b50 <__ieee754_pow+0x798>)
 80179da:	2200      	movs	r2, #0
 80179dc:	4620      	mov	r0, r4
 80179de:	4629      	mov	r1, r5
 80179e0:	f7e8 fc82 	bl	80002e8 <__aeabi_dsub>
 80179e4:	4632      	mov	r2, r6
 80179e6:	463b      	mov	r3, r7
 80179e8:	f7e8 fc7e 	bl	80002e8 <__aeabi_dsub>
 80179ec:	4602      	mov	r2, r0
 80179ee:	460b      	mov	r3, r1
 80179f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80179f4:	f7e8 fc78 	bl	80002e8 <__aeabi_dsub>
 80179f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80179fc:	f7e8 fe2c 	bl	8000658 <__aeabi_dmul>
 8017a00:	4622      	mov	r2, r4
 8017a02:	4606      	mov	r6, r0
 8017a04:	460f      	mov	r7, r1
 8017a06:	462b      	mov	r3, r5
 8017a08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017a0c:	f7e8 fe24 	bl	8000658 <__aeabi_dmul>
 8017a10:	4602      	mov	r2, r0
 8017a12:	460b      	mov	r3, r1
 8017a14:	4630      	mov	r0, r6
 8017a16:	4639      	mov	r1, r7
 8017a18:	f7e8 fc68 	bl	80002ec <__adddf3>
 8017a1c:	4606      	mov	r6, r0
 8017a1e:	460f      	mov	r7, r1
 8017a20:	4602      	mov	r2, r0
 8017a22:	460b      	mov	r3, r1
 8017a24:	4640      	mov	r0, r8
 8017a26:	4649      	mov	r1, r9
 8017a28:	f7e8 fc60 	bl	80002ec <__adddf3>
 8017a2c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8017a30:	a33b      	add	r3, pc, #236	@ (adr r3, 8017b20 <__ieee754_pow+0x768>)
 8017a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a36:	4658      	mov	r0, fp
 8017a38:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8017a3c:	460d      	mov	r5, r1
 8017a3e:	f7e8 fe0b 	bl	8000658 <__aeabi_dmul>
 8017a42:	465c      	mov	r4, fp
 8017a44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017a48:	4642      	mov	r2, r8
 8017a4a:	464b      	mov	r3, r9
 8017a4c:	4620      	mov	r0, r4
 8017a4e:	4629      	mov	r1, r5
 8017a50:	f7e8 fc4a 	bl	80002e8 <__aeabi_dsub>
 8017a54:	4602      	mov	r2, r0
 8017a56:	460b      	mov	r3, r1
 8017a58:	4630      	mov	r0, r6
 8017a5a:	4639      	mov	r1, r7
 8017a5c:	f7e8 fc44 	bl	80002e8 <__aeabi_dsub>
 8017a60:	a331      	add	r3, pc, #196	@ (adr r3, 8017b28 <__ieee754_pow+0x770>)
 8017a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a66:	f7e8 fdf7 	bl	8000658 <__aeabi_dmul>
 8017a6a:	a331      	add	r3, pc, #196	@ (adr r3, 8017b30 <__ieee754_pow+0x778>)
 8017a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a70:	4606      	mov	r6, r0
 8017a72:	460f      	mov	r7, r1
 8017a74:	4620      	mov	r0, r4
 8017a76:	4629      	mov	r1, r5
 8017a78:	f7e8 fdee 	bl	8000658 <__aeabi_dmul>
 8017a7c:	4602      	mov	r2, r0
 8017a7e:	460b      	mov	r3, r1
 8017a80:	4630      	mov	r0, r6
 8017a82:	4639      	mov	r1, r7
 8017a84:	f7e8 fc32 	bl	80002ec <__adddf3>
 8017a88:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8017a8a:	4b32      	ldr	r3, [pc, #200]	@ (8017b54 <__ieee754_pow+0x79c>)
 8017a8c:	4413      	add	r3, r2
 8017a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a92:	f7e8 fc2b 	bl	80002ec <__adddf3>
 8017a96:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8017a9a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8017a9c:	f7e8 fd72 	bl	8000584 <__aeabi_i2d>
 8017aa0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8017aa2:	4b2d      	ldr	r3, [pc, #180]	@ (8017b58 <__ieee754_pow+0x7a0>)
 8017aa4:	4413      	add	r3, r2
 8017aa6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017aaa:	4606      	mov	r6, r0
 8017aac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017ab0:	460f      	mov	r7, r1
 8017ab2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017ab6:	f7e8 fc19 	bl	80002ec <__adddf3>
 8017aba:	4642      	mov	r2, r8
 8017abc:	464b      	mov	r3, r9
 8017abe:	f7e8 fc15 	bl	80002ec <__adddf3>
 8017ac2:	4632      	mov	r2, r6
 8017ac4:	463b      	mov	r3, r7
 8017ac6:	f7e8 fc11 	bl	80002ec <__adddf3>
 8017aca:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8017ace:	4632      	mov	r2, r6
 8017ad0:	463b      	mov	r3, r7
 8017ad2:	4658      	mov	r0, fp
 8017ad4:	460d      	mov	r5, r1
 8017ad6:	f7e8 fc07 	bl	80002e8 <__aeabi_dsub>
 8017ada:	4642      	mov	r2, r8
 8017adc:	464b      	mov	r3, r9
 8017ade:	f7e8 fc03 	bl	80002e8 <__aeabi_dsub>
 8017ae2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017ae6:	f7e8 fbff 	bl	80002e8 <__aeabi_dsub>
 8017aea:	465c      	mov	r4, fp
 8017aec:	e036      	b.n	8017b5c <__ieee754_pow+0x7a4>
 8017aee:	bf00      	nop
 8017af0:	4a454eef 	.word	0x4a454eef
 8017af4:	3fca7e28 	.word	0x3fca7e28
 8017af8:	93c9db65 	.word	0x93c9db65
 8017afc:	3fcd864a 	.word	0x3fcd864a
 8017b00:	a91d4101 	.word	0xa91d4101
 8017b04:	3fd17460 	.word	0x3fd17460
 8017b08:	518f264d 	.word	0x518f264d
 8017b0c:	3fd55555 	.word	0x3fd55555
 8017b10:	db6fabff 	.word	0xdb6fabff
 8017b14:	3fdb6db6 	.word	0x3fdb6db6
 8017b18:	33333303 	.word	0x33333303
 8017b1c:	3fe33333 	.word	0x3fe33333
 8017b20:	e0000000 	.word	0xe0000000
 8017b24:	3feec709 	.word	0x3feec709
 8017b28:	dc3a03fd 	.word	0xdc3a03fd
 8017b2c:	3feec709 	.word	0x3feec709
 8017b30:	145b01f5 	.word	0x145b01f5
 8017b34:	be3e2fe0 	.word	0xbe3e2fe0
 8017b38:	7ff00000 	.word	0x7ff00000
 8017b3c:	43400000 	.word	0x43400000
 8017b40:	0003988e 	.word	0x0003988e
 8017b44:	000bb679 	.word	0x000bb679
 8017b48:	0801a498 	.word	0x0801a498
 8017b4c:	3ff00000 	.word	0x3ff00000
 8017b50:	40080000 	.word	0x40080000
 8017b54:	0801a478 	.word	0x0801a478
 8017b58:	0801a488 	.word	0x0801a488
 8017b5c:	4602      	mov	r2, r0
 8017b5e:	460b      	mov	r3, r1
 8017b60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017b64:	e5d6      	b.n	8017714 <__ieee754_pow+0x35c>
 8017b66:	f04f 0a01 	mov.w	sl, #1
 8017b6a:	e65e      	b.n	801782a <__ieee754_pow+0x472>
 8017b6c:	a3b5      	add	r3, pc, #724	@ (adr r3, 8017e44 <__ieee754_pow+0xa8c>)
 8017b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b72:	4630      	mov	r0, r6
 8017b74:	4639      	mov	r1, r7
 8017b76:	f7e8 fbb9 	bl	80002ec <__adddf3>
 8017b7a:	4642      	mov	r2, r8
 8017b7c:	e9cd 0100 	strd	r0, r1, [sp]
 8017b80:	464b      	mov	r3, r9
 8017b82:	4620      	mov	r0, r4
 8017b84:	4629      	mov	r1, r5
 8017b86:	f7e8 fbaf 	bl	80002e8 <__aeabi_dsub>
 8017b8a:	4602      	mov	r2, r0
 8017b8c:	460b      	mov	r3, r1
 8017b8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b92:	f7e8 fff1 	bl	8000b78 <__aeabi_dcmpgt>
 8017b96:	2800      	cmp	r0, #0
 8017b98:	f47f adfe 	bne.w	8017798 <__ieee754_pow+0x3e0>
 8017b9c:	4ba2      	ldr	r3, [pc, #648]	@ (8017e28 <__ieee754_pow+0xa70>)
 8017b9e:	e022      	b.n	8017be6 <__ieee754_pow+0x82e>
 8017ba0:	4ca2      	ldr	r4, [pc, #648]	@ (8017e2c <__ieee754_pow+0xa74>)
 8017ba2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8017ba6:	42a3      	cmp	r3, r4
 8017ba8:	d919      	bls.n	8017bde <__ieee754_pow+0x826>
 8017baa:	4ba1      	ldr	r3, [pc, #644]	@ (8017e30 <__ieee754_pow+0xa78>)
 8017bac:	440b      	add	r3, r1
 8017bae:	4303      	orrs	r3, r0
 8017bb0:	d009      	beq.n	8017bc6 <__ieee754_pow+0x80e>
 8017bb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017bb6:	2200      	movs	r2, #0
 8017bb8:	2300      	movs	r3, #0
 8017bba:	f7e8 ffbf 	bl	8000b3c <__aeabi_dcmplt>
 8017bbe:	3800      	subs	r0, #0
 8017bc0:	bf18      	it	ne
 8017bc2:	2001      	movne	r0, #1
 8017bc4:	e512      	b.n	80175ec <__ieee754_pow+0x234>
 8017bc6:	4642      	mov	r2, r8
 8017bc8:	464b      	mov	r3, r9
 8017bca:	f7e8 fb8d 	bl	80002e8 <__aeabi_dsub>
 8017bce:	4632      	mov	r2, r6
 8017bd0:	463b      	mov	r3, r7
 8017bd2:	f7e8 ffc7 	bl	8000b64 <__aeabi_dcmpge>
 8017bd6:	2800      	cmp	r0, #0
 8017bd8:	d1eb      	bne.n	8017bb2 <__ieee754_pow+0x7fa>
 8017bda:	4b96      	ldr	r3, [pc, #600]	@ (8017e34 <__ieee754_pow+0xa7c>)
 8017bdc:	e003      	b.n	8017be6 <__ieee754_pow+0x82e>
 8017bde:	4a96      	ldr	r2, [pc, #600]	@ (8017e38 <__ieee754_pow+0xa80>)
 8017be0:	4293      	cmp	r3, r2
 8017be2:	f240 80e7 	bls.w	8017db4 <__ieee754_pow+0x9fc>
 8017be6:	151b      	asrs	r3, r3, #20
 8017be8:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8017bec:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8017bf0:	fa4a fa03 	asr.w	sl, sl, r3
 8017bf4:	44da      	add	sl, fp
 8017bf6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8017bfa:	4890      	ldr	r0, [pc, #576]	@ (8017e3c <__ieee754_pow+0xa84>)
 8017bfc:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8017c00:	4108      	asrs	r0, r1
 8017c02:	ea00 030a 	and.w	r3, r0, sl
 8017c06:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8017c0a:	f1c1 0114 	rsb	r1, r1, #20
 8017c0e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8017c12:	fa4a fa01 	asr.w	sl, sl, r1
 8017c16:	f1bb 0f00 	cmp.w	fp, #0
 8017c1a:	4640      	mov	r0, r8
 8017c1c:	4649      	mov	r1, r9
 8017c1e:	f04f 0200 	mov.w	r2, #0
 8017c22:	bfb8      	it	lt
 8017c24:	f1ca 0a00 	rsblt	sl, sl, #0
 8017c28:	f7e8 fb5e 	bl	80002e8 <__aeabi_dsub>
 8017c2c:	4680      	mov	r8, r0
 8017c2e:	4689      	mov	r9, r1
 8017c30:	4632      	mov	r2, r6
 8017c32:	463b      	mov	r3, r7
 8017c34:	4640      	mov	r0, r8
 8017c36:	4649      	mov	r1, r9
 8017c38:	f7e8 fb58 	bl	80002ec <__adddf3>
 8017c3c:	2400      	movs	r4, #0
 8017c3e:	a36a      	add	r3, pc, #424	@ (adr r3, 8017de8 <__ieee754_pow+0xa30>)
 8017c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c44:	4620      	mov	r0, r4
 8017c46:	460d      	mov	r5, r1
 8017c48:	f7e8 fd06 	bl	8000658 <__aeabi_dmul>
 8017c4c:	4642      	mov	r2, r8
 8017c4e:	e9cd 0100 	strd	r0, r1, [sp]
 8017c52:	464b      	mov	r3, r9
 8017c54:	4620      	mov	r0, r4
 8017c56:	4629      	mov	r1, r5
 8017c58:	f7e8 fb46 	bl	80002e8 <__aeabi_dsub>
 8017c5c:	4602      	mov	r2, r0
 8017c5e:	460b      	mov	r3, r1
 8017c60:	4630      	mov	r0, r6
 8017c62:	4639      	mov	r1, r7
 8017c64:	f7e8 fb40 	bl	80002e8 <__aeabi_dsub>
 8017c68:	a361      	add	r3, pc, #388	@ (adr r3, 8017df0 <__ieee754_pow+0xa38>)
 8017c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c6e:	f7e8 fcf3 	bl	8000658 <__aeabi_dmul>
 8017c72:	a361      	add	r3, pc, #388	@ (adr r3, 8017df8 <__ieee754_pow+0xa40>)
 8017c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c78:	4680      	mov	r8, r0
 8017c7a:	4689      	mov	r9, r1
 8017c7c:	4620      	mov	r0, r4
 8017c7e:	4629      	mov	r1, r5
 8017c80:	f7e8 fcea 	bl	8000658 <__aeabi_dmul>
 8017c84:	4602      	mov	r2, r0
 8017c86:	460b      	mov	r3, r1
 8017c88:	4640      	mov	r0, r8
 8017c8a:	4649      	mov	r1, r9
 8017c8c:	f7e8 fb2e 	bl	80002ec <__adddf3>
 8017c90:	4604      	mov	r4, r0
 8017c92:	460d      	mov	r5, r1
 8017c94:	4602      	mov	r2, r0
 8017c96:	460b      	mov	r3, r1
 8017c98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017c9c:	f7e8 fb26 	bl	80002ec <__adddf3>
 8017ca0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017ca4:	4680      	mov	r8, r0
 8017ca6:	4689      	mov	r9, r1
 8017ca8:	f7e8 fb1e 	bl	80002e8 <__aeabi_dsub>
 8017cac:	4602      	mov	r2, r0
 8017cae:	460b      	mov	r3, r1
 8017cb0:	4620      	mov	r0, r4
 8017cb2:	4629      	mov	r1, r5
 8017cb4:	f7e8 fb18 	bl	80002e8 <__aeabi_dsub>
 8017cb8:	4642      	mov	r2, r8
 8017cba:	4606      	mov	r6, r0
 8017cbc:	460f      	mov	r7, r1
 8017cbe:	464b      	mov	r3, r9
 8017cc0:	4640      	mov	r0, r8
 8017cc2:	4649      	mov	r1, r9
 8017cc4:	f7e8 fcc8 	bl	8000658 <__aeabi_dmul>
 8017cc8:	a34d      	add	r3, pc, #308	@ (adr r3, 8017e00 <__ieee754_pow+0xa48>)
 8017cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cce:	4604      	mov	r4, r0
 8017cd0:	460d      	mov	r5, r1
 8017cd2:	f7e8 fcc1 	bl	8000658 <__aeabi_dmul>
 8017cd6:	a34c      	add	r3, pc, #304	@ (adr r3, 8017e08 <__ieee754_pow+0xa50>)
 8017cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cdc:	f7e8 fb04 	bl	80002e8 <__aeabi_dsub>
 8017ce0:	4622      	mov	r2, r4
 8017ce2:	462b      	mov	r3, r5
 8017ce4:	f7e8 fcb8 	bl	8000658 <__aeabi_dmul>
 8017ce8:	a349      	add	r3, pc, #292	@ (adr r3, 8017e10 <__ieee754_pow+0xa58>)
 8017cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cee:	f7e8 fafd 	bl	80002ec <__adddf3>
 8017cf2:	4622      	mov	r2, r4
 8017cf4:	462b      	mov	r3, r5
 8017cf6:	f7e8 fcaf 	bl	8000658 <__aeabi_dmul>
 8017cfa:	a347      	add	r3, pc, #284	@ (adr r3, 8017e18 <__ieee754_pow+0xa60>)
 8017cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d00:	f7e8 faf2 	bl	80002e8 <__aeabi_dsub>
 8017d04:	4622      	mov	r2, r4
 8017d06:	462b      	mov	r3, r5
 8017d08:	f7e8 fca6 	bl	8000658 <__aeabi_dmul>
 8017d0c:	a344      	add	r3, pc, #272	@ (adr r3, 8017e20 <__ieee754_pow+0xa68>)
 8017d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d12:	f7e8 faeb 	bl	80002ec <__adddf3>
 8017d16:	4622      	mov	r2, r4
 8017d18:	462b      	mov	r3, r5
 8017d1a:	f7e8 fc9d 	bl	8000658 <__aeabi_dmul>
 8017d1e:	4602      	mov	r2, r0
 8017d20:	460b      	mov	r3, r1
 8017d22:	4640      	mov	r0, r8
 8017d24:	4649      	mov	r1, r9
 8017d26:	f7e8 fadf 	bl	80002e8 <__aeabi_dsub>
 8017d2a:	4604      	mov	r4, r0
 8017d2c:	460d      	mov	r5, r1
 8017d2e:	4602      	mov	r2, r0
 8017d30:	460b      	mov	r3, r1
 8017d32:	4640      	mov	r0, r8
 8017d34:	4649      	mov	r1, r9
 8017d36:	f7e8 fc8f 	bl	8000658 <__aeabi_dmul>
 8017d3a:	2200      	movs	r2, #0
 8017d3c:	e9cd 0100 	strd	r0, r1, [sp]
 8017d40:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8017d44:	4620      	mov	r0, r4
 8017d46:	4629      	mov	r1, r5
 8017d48:	f7e8 face 	bl	80002e8 <__aeabi_dsub>
 8017d4c:	4602      	mov	r2, r0
 8017d4e:	460b      	mov	r3, r1
 8017d50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017d54:	f7e8 fdaa 	bl	80008ac <__aeabi_ddiv>
 8017d58:	4632      	mov	r2, r6
 8017d5a:	4604      	mov	r4, r0
 8017d5c:	460d      	mov	r5, r1
 8017d5e:	463b      	mov	r3, r7
 8017d60:	4640      	mov	r0, r8
 8017d62:	4649      	mov	r1, r9
 8017d64:	f7e8 fc78 	bl	8000658 <__aeabi_dmul>
 8017d68:	4632      	mov	r2, r6
 8017d6a:	463b      	mov	r3, r7
 8017d6c:	f7e8 fabe 	bl	80002ec <__adddf3>
 8017d70:	4602      	mov	r2, r0
 8017d72:	460b      	mov	r3, r1
 8017d74:	4620      	mov	r0, r4
 8017d76:	4629      	mov	r1, r5
 8017d78:	f7e8 fab6 	bl	80002e8 <__aeabi_dsub>
 8017d7c:	4642      	mov	r2, r8
 8017d7e:	464b      	mov	r3, r9
 8017d80:	f7e8 fab2 	bl	80002e8 <__aeabi_dsub>
 8017d84:	460b      	mov	r3, r1
 8017d86:	4602      	mov	r2, r0
 8017d88:	492d      	ldr	r1, [pc, #180]	@ (8017e40 <__ieee754_pow+0xa88>)
 8017d8a:	2000      	movs	r0, #0
 8017d8c:	f7e8 faac 	bl	80002e8 <__aeabi_dsub>
 8017d90:	ec41 0b10 	vmov	d0, r0, r1
 8017d94:	ee10 3a90 	vmov	r3, s1
 8017d98:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8017d9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8017da0:	da0b      	bge.n	8017dba <__ieee754_pow+0xa02>
 8017da2:	4650      	mov	r0, sl
 8017da4:	f000 f85c 	bl	8017e60 <scalbn>
 8017da8:	ec51 0b10 	vmov	r0, r1, d0
 8017dac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017db0:	f7ff bb6d 	b.w	801748e <__ieee754_pow+0xd6>
 8017db4:	f8dd a010 	ldr.w	sl, [sp, #16]
 8017db8:	e73a      	b.n	8017c30 <__ieee754_pow+0x878>
 8017dba:	ec51 0b10 	vmov	r0, r1, d0
 8017dbe:	4619      	mov	r1, r3
 8017dc0:	e7f4      	b.n	8017dac <__ieee754_pow+0x9f4>
 8017dc2:	491f      	ldr	r1, [pc, #124]	@ (8017e40 <__ieee754_pow+0xa88>)
 8017dc4:	2000      	movs	r0, #0
 8017dc6:	f7ff bb14 	b.w	80173f2 <__ieee754_pow+0x3a>
 8017dca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017dce:	f7ff bb10 	b.w	80173f2 <__ieee754_pow+0x3a>
 8017dd2:	4630      	mov	r0, r6
 8017dd4:	4639      	mov	r1, r7
 8017dd6:	f7ff bb0c 	b.w	80173f2 <__ieee754_pow+0x3a>
 8017dda:	460c      	mov	r4, r1
 8017ddc:	f7ff bb69 	b.w	80174b2 <__ieee754_pow+0xfa>
 8017de0:	2400      	movs	r4, #0
 8017de2:	f7ff bb4b 	b.w	801747c <__ieee754_pow+0xc4>
 8017de6:	bf00      	nop
 8017de8:	00000000 	.word	0x00000000
 8017dec:	3fe62e43 	.word	0x3fe62e43
 8017df0:	fefa39ef 	.word	0xfefa39ef
 8017df4:	3fe62e42 	.word	0x3fe62e42
 8017df8:	0ca86c39 	.word	0x0ca86c39
 8017dfc:	be205c61 	.word	0xbe205c61
 8017e00:	72bea4d0 	.word	0x72bea4d0
 8017e04:	3e663769 	.word	0x3e663769
 8017e08:	c5d26bf1 	.word	0xc5d26bf1
 8017e0c:	3ebbbd41 	.word	0x3ebbbd41
 8017e10:	af25de2c 	.word	0xaf25de2c
 8017e14:	3f11566a 	.word	0x3f11566a
 8017e18:	16bebd93 	.word	0x16bebd93
 8017e1c:	3f66c16c 	.word	0x3f66c16c
 8017e20:	5555553e 	.word	0x5555553e
 8017e24:	3fc55555 	.word	0x3fc55555
 8017e28:	40900000 	.word	0x40900000
 8017e2c:	4090cbff 	.word	0x4090cbff
 8017e30:	3f6f3400 	.word	0x3f6f3400
 8017e34:	4090cc00 	.word	0x4090cc00
 8017e38:	3fe00000 	.word	0x3fe00000
 8017e3c:	fff00000 	.word	0xfff00000
 8017e40:	3ff00000 	.word	0x3ff00000
 8017e44:	652b82fe 	.word	0x652b82fe
 8017e48:	3c971547 	.word	0x3c971547

08017e4c <fabs>:
 8017e4c:	ec51 0b10 	vmov	r0, r1, d0
 8017e50:	4602      	mov	r2, r0
 8017e52:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8017e56:	ec43 2b10 	vmov	d0, r2, r3
 8017e5a:	4770      	bx	lr
 8017e5c:	0000      	movs	r0, r0
	...

08017e60 <scalbn>:
 8017e60:	b570      	push	{r4, r5, r6, lr}
 8017e62:	ec55 4b10 	vmov	r4, r5, d0
 8017e66:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8017e6a:	4606      	mov	r6, r0
 8017e6c:	462b      	mov	r3, r5
 8017e6e:	b991      	cbnz	r1, 8017e96 <scalbn+0x36>
 8017e70:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8017e74:	4323      	orrs	r3, r4
 8017e76:	d03b      	beq.n	8017ef0 <scalbn+0x90>
 8017e78:	4b33      	ldr	r3, [pc, #204]	@ (8017f48 <scalbn+0xe8>)
 8017e7a:	4620      	mov	r0, r4
 8017e7c:	4629      	mov	r1, r5
 8017e7e:	2200      	movs	r2, #0
 8017e80:	f7e8 fbea 	bl	8000658 <__aeabi_dmul>
 8017e84:	4b31      	ldr	r3, [pc, #196]	@ (8017f4c <scalbn+0xec>)
 8017e86:	429e      	cmp	r6, r3
 8017e88:	4604      	mov	r4, r0
 8017e8a:	460d      	mov	r5, r1
 8017e8c:	da0f      	bge.n	8017eae <scalbn+0x4e>
 8017e8e:	a326      	add	r3, pc, #152	@ (adr r3, 8017f28 <scalbn+0xc8>)
 8017e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e94:	e01e      	b.n	8017ed4 <scalbn+0x74>
 8017e96:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8017e9a:	4291      	cmp	r1, r2
 8017e9c:	d10b      	bne.n	8017eb6 <scalbn+0x56>
 8017e9e:	4622      	mov	r2, r4
 8017ea0:	4620      	mov	r0, r4
 8017ea2:	4629      	mov	r1, r5
 8017ea4:	f7e8 fa22 	bl	80002ec <__adddf3>
 8017ea8:	4604      	mov	r4, r0
 8017eaa:	460d      	mov	r5, r1
 8017eac:	e020      	b.n	8017ef0 <scalbn+0x90>
 8017eae:	460b      	mov	r3, r1
 8017eb0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8017eb4:	3936      	subs	r1, #54	@ 0x36
 8017eb6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8017eba:	4296      	cmp	r6, r2
 8017ebc:	dd0d      	ble.n	8017eda <scalbn+0x7a>
 8017ebe:	2d00      	cmp	r5, #0
 8017ec0:	a11b      	add	r1, pc, #108	@ (adr r1, 8017f30 <scalbn+0xd0>)
 8017ec2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017ec6:	da02      	bge.n	8017ece <scalbn+0x6e>
 8017ec8:	a11b      	add	r1, pc, #108	@ (adr r1, 8017f38 <scalbn+0xd8>)
 8017eca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017ece:	a318      	add	r3, pc, #96	@ (adr r3, 8017f30 <scalbn+0xd0>)
 8017ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ed4:	f7e8 fbc0 	bl	8000658 <__aeabi_dmul>
 8017ed8:	e7e6      	b.n	8017ea8 <scalbn+0x48>
 8017eda:	1872      	adds	r2, r6, r1
 8017edc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8017ee0:	428a      	cmp	r2, r1
 8017ee2:	dcec      	bgt.n	8017ebe <scalbn+0x5e>
 8017ee4:	2a00      	cmp	r2, #0
 8017ee6:	dd06      	ble.n	8017ef6 <scalbn+0x96>
 8017ee8:	f36f 531e 	bfc	r3, #20, #11
 8017eec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017ef0:	ec45 4b10 	vmov	d0, r4, r5
 8017ef4:	bd70      	pop	{r4, r5, r6, pc}
 8017ef6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8017efa:	da08      	bge.n	8017f0e <scalbn+0xae>
 8017efc:	2d00      	cmp	r5, #0
 8017efe:	a10a      	add	r1, pc, #40	@ (adr r1, 8017f28 <scalbn+0xc8>)
 8017f00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017f04:	dac3      	bge.n	8017e8e <scalbn+0x2e>
 8017f06:	a10e      	add	r1, pc, #56	@ (adr r1, 8017f40 <scalbn+0xe0>)
 8017f08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017f0c:	e7bf      	b.n	8017e8e <scalbn+0x2e>
 8017f0e:	3236      	adds	r2, #54	@ 0x36
 8017f10:	f36f 531e 	bfc	r3, #20, #11
 8017f14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017f18:	4620      	mov	r0, r4
 8017f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8017f50 <scalbn+0xf0>)
 8017f1c:	4629      	mov	r1, r5
 8017f1e:	2200      	movs	r2, #0
 8017f20:	e7d8      	b.n	8017ed4 <scalbn+0x74>
 8017f22:	bf00      	nop
 8017f24:	f3af 8000 	nop.w
 8017f28:	c2f8f359 	.word	0xc2f8f359
 8017f2c:	01a56e1f 	.word	0x01a56e1f
 8017f30:	8800759c 	.word	0x8800759c
 8017f34:	7e37e43c 	.word	0x7e37e43c
 8017f38:	8800759c 	.word	0x8800759c
 8017f3c:	fe37e43c 	.word	0xfe37e43c
 8017f40:	c2f8f359 	.word	0xc2f8f359
 8017f44:	81a56e1f 	.word	0x81a56e1f
 8017f48:	43500000 	.word	0x43500000
 8017f4c:	ffff3cb0 	.word	0xffff3cb0
 8017f50:	3c900000 	.word	0x3c900000

08017f54 <with_errno>:
 8017f54:	b510      	push	{r4, lr}
 8017f56:	ed2d 8b02 	vpush	{d8}
 8017f5a:	eeb0 8a40 	vmov.f32	s16, s0
 8017f5e:	eef0 8a60 	vmov.f32	s17, s1
 8017f62:	4604      	mov	r4, r0
 8017f64:	f7fc fdd4 	bl	8014b10 <__errno>
 8017f68:	eeb0 0a48 	vmov.f32	s0, s16
 8017f6c:	eef0 0a68 	vmov.f32	s1, s17
 8017f70:	ecbd 8b02 	vpop	{d8}
 8017f74:	6004      	str	r4, [r0, #0]
 8017f76:	bd10      	pop	{r4, pc}

08017f78 <xflow>:
 8017f78:	4603      	mov	r3, r0
 8017f7a:	b507      	push	{r0, r1, r2, lr}
 8017f7c:	ec51 0b10 	vmov	r0, r1, d0
 8017f80:	b183      	cbz	r3, 8017fa4 <xflow+0x2c>
 8017f82:	4602      	mov	r2, r0
 8017f84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017f88:	e9cd 2300 	strd	r2, r3, [sp]
 8017f8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017f90:	f7e8 fb62 	bl	8000658 <__aeabi_dmul>
 8017f94:	ec41 0b10 	vmov	d0, r0, r1
 8017f98:	2022      	movs	r0, #34	@ 0x22
 8017f9a:	b003      	add	sp, #12
 8017f9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017fa0:	f7ff bfd8 	b.w	8017f54 <with_errno>
 8017fa4:	4602      	mov	r2, r0
 8017fa6:	460b      	mov	r3, r1
 8017fa8:	e7ee      	b.n	8017f88 <xflow+0x10>
 8017faa:	0000      	movs	r0, r0
 8017fac:	0000      	movs	r0, r0
	...

08017fb0 <__math_uflow>:
 8017fb0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8017fb8 <__math_uflow+0x8>
 8017fb4:	f7ff bfe0 	b.w	8017f78 <xflow>
 8017fb8:	00000000 	.word	0x00000000
 8017fbc:	10000000 	.word	0x10000000

08017fc0 <__math_oflow>:
 8017fc0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8017fc8 <__math_oflow+0x8>
 8017fc4:	f7ff bfd8 	b.w	8017f78 <xflow>
 8017fc8:	00000000 	.word	0x00000000
 8017fcc:	70000000 	.word	0x70000000

08017fd0 <__ieee754_sqrt>:
 8017fd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fd4:	4a66      	ldr	r2, [pc, #408]	@ (8018170 <__ieee754_sqrt+0x1a0>)
 8017fd6:	ec55 4b10 	vmov	r4, r5, d0
 8017fda:	43aa      	bics	r2, r5
 8017fdc:	462b      	mov	r3, r5
 8017fde:	4621      	mov	r1, r4
 8017fe0:	d110      	bne.n	8018004 <__ieee754_sqrt+0x34>
 8017fe2:	4622      	mov	r2, r4
 8017fe4:	4620      	mov	r0, r4
 8017fe6:	4629      	mov	r1, r5
 8017fe8:	f7e8 fb36 	bl	8000658 <__aeabi_dmul>
 8017fec:	4602      	mov	r2, r0
 8017fee:	460b      	mov	r3, r1
 8017ff0:	4620      	mov	r0, r4
 8017ff2:	4629      	mov	r1, r5
 8017ff4:	f7e8 f97a 	bl	80002ec <__adddf3>
 8017ff8:	4604      	mov	r4, r0
 8017ffa:	460d      	mov	r5, r1
 8017ffc:	ec45 4b10 	vmov	d0, r4, r5
 8018000:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018004:	2d00      	cmp	r5, #0
 8018006:	dc0e      	bgt.n	8018026 <__ieee754_sqrt+0x56>
 8018008:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801800c:	4322      	orrs	r2, r4
 801800e:	d0f5      	beq.n	8017ffc <__ieee754_sqrt+0x2c>
 8018010:	b19d      	cbz	r5, 801803a <__ieee754_sqrt+0x6a>
 8018012:	4622      	mov	r2, r4
 8018014:	4620      	mov	r0, r4
 8018016:	4629      	mov	r1, r5
 8018018:	f7e8 f966 	bl	80002e8 <__aeabi_dsub>
 801801c:	4602      	mov	r2, r0
 801801e:	460b      	mov	r3, r1
 8018020:	f7e8 fc44 	bl	80008ac <__aeabi_ddiv>
 8018024:	e7e8      	b.n	8017ff8 <__ieee754_sqrt+0x28>
 8018026:	152a      	asrs	r2, r5, #20
 8018028:	d115      	bne.n	8018056 <__ieee754_sqrt+0x86>
 801802a:	2000      	movs	r0, #0
 801802c:	e009      	b.n	8018042 <__ieee754_sqrt+0x72>
 801802e:	0acb      	lsrs	r3, r1, #11
 8018030:	3a15      	subs	r2, #21
 8018032:	0549      	lsls	r1, r1, #21
 8018034:	2b00      	cmp	r3, #0
 8018036:	d0fa      	beq.n	801802e <__ieee754_sqrt+0x5e>
 8018038:	e7f7      	b.n	801802a <__ieee754_sqrt+0x5a>
 801803a:	462a      	mov	r2, r5
 801803c:	e7fa      	b.n	8018034 <__ieee754_sqrt+0x64>
 801803e:	005b      	lsls	r3, r3, #1
 8018040:	3001      	adds	r0, #1
 8018042:	02dc      	lsls	r4, r3, #11
 8018044:	d5fb      	bpl.n	801803e <__ieee754_sqrt+0x6e>
 8018046:	1e44      	subs	r4, r0, #1
 8018048:	1b12      	subs	r2, r2, r4
 801804a:	f1c0 0420 	rsb	r4, r0, #32
 801804e:	fa21 f404 	lsr.w	r4, r1, r4
 8018052:	4323      	orrs	r3, r4
 8018054:	4081      	lsls	r1, r0
 8018056:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801805a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 801805e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8018062:	07d2      	lsls	r2, r2, #31
 8018064:	bf5c      	itt	pl
 8018066:	005b      	lslpl	r3, r3, #1
 8018068:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801806c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018070:	bf58      	it	pl
 8018072:	0049      	lslpl	r1, r1, #1
 8018074:	2600      	movs	r6, #0
 8018076:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801807a:	107f      	asrs	r7, r7, #1
 801807c:	0049      	lsls	r1, r1, #1
 801807e:	2016      	movs	r0, #22
 8018080:	4632      	mov	r2, r6
 8018082:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8018086:	1915      	adds	r5, r2, r4
 8018088:	429d      	cmp	r5, r3
 801808a:	bfde      	ittt	le
 801808c:	192a      	addle	r2, r5, r4
 801808e:	1b5b      	suble	r3, r3, r5
 8018090:	1936      	addle	r6, r6, r4
 8018092:	0fcd      	lsrs	r5, r1, #31
 8018094:	3801      	subs	r0, #1
 8018096:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801809a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801809e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80180a2:	d1f0      	bne.n	8018086 <__ieee754_sqrt+0xb6>
 80180a4:	4605      	mov	r5, r0
 80180a6:	2420      	movs	r4, #32
 80180a8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80180ac:	4293      	cmp	r3, r2
 80180ae:	eb0c 0e00 	add.w	lr, ip, r0
 80180b2:	dc02      	bgt.n	80180ba <__ieee754_sqrt+0xea>
 80180b4:	d113      	bne.n	80180de <__ieee754_sqrt+0x10e>
 80180b6:	458e      	cmp	lr, r1
 80180b8:	d811      	bhi.n	80180de <__ieee754_sqrt+0x10e>
 80180ba:	f1be 0f00 	cmp.w	lr, #0
 80180be:	eb0e 000c 	add.w	r0, lr, ip
 80180c2:	da3f      	bge.n	8018144 <__ieee754_sqrt+0x174>
 80180c4:	2800      	cmp	r0, #0
 80180c6:	db3d      	blt.n	8018144 <__ieee754_sqrt+0x174>
 80180c8:	f102 0801 	add.w	r8, r2, #1
 80180cc:	1a9b      	subs	r3, r3, r2
 80180ce:	458e      	cmp	lr, r1
 80180d0:	bf88      	it	hi
 80180d2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80180d6:	eba1 010e 	sub.w	r1, r1, lr
 80180da:	4465      	add	r5, ip
 80180dc:	4642      	mov	r2, r8
 80180de:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80180e2:	3c01      	subs	r4, #1
 80180e4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80180e8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80180ec:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80180f0:	d1dc      	bne.n	80180ac <__ieee754_sqrt+0xdc>
 80180f2:	4319      	orrs	r1, r3
 80180f4:	d01b      	beq.n	801812e <__ieee754_sqrt+0x15e>
 80180f6:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8018174 <__ieee754_sqrt+0x1a4>
 80180fa:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8018178 <__ieee754_sqrt+0x1a8>
 80180fe:	e9da 0100 	ldrd	r0, r1, [sl]
 8018102:	e9db 2300 	ldrd	r2, r3, [fp]
 8018106:	f7e8 f8ef 	bl	80002e8 <__aeabi_dsub>
 801810a:	e9da 8900 	ldrd	r8, r9, [sl]
 801810e:	4602      	mov	r2, r0
 8018110:	460b      	mov	r3, r1
 8018112:	4640      	mov	r0, r8
 8018114:	4649      	mov	r1, r9
 8018116:	f7e8 fd1b 	bl	8000b50 <__aeabi_dcmple>
 801811a:	b140      	cbz	r0, 801812e <__ieee754_sqrt+0x15e>
 801811c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8018120:	e9da 0100 	ldrd	r0, r1, [sl]
 8018124:	e9db 2300 	ldrd	r2, r3, [fp]
 8018128:	d10e      	bne.n	8018148 <__ieee754_sqrt+0x178>
 801812a:	3601      	adds	r6, #1
 801812c:	4625      	mov	r5, r4
 801812e:	1073      	asrs	r3, r6, #1
 8018130:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8018134:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8018138:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 801813c:	086b      	lsrs	r3, r5, #1
 801813e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8018142:	e759      	b.n	8017ff8 <__ieee754_sqrt+0x28>
 8018144:	4690      	mov	r8, r2
 8018146:	e7c1      	b.n	80180cc <__ieee754_sqrt+0xfc>
 8018148:	f7e8 f8d0 	bl	80002ec <__adddf3>
 801814c:	e9da 8900 	ldrd	r8, r9, [sl]
 8018150:	4602      	mov	r2, r0
 8018152:	460b      	mov	r3, r1
 8018154:	4640      	mov	r0, r8
 8018156:	4649      	mov	r1, r9
 8018158:	f7e8 fcf0 	bl	8000b3c <__aeabi_dcmplt>
 801815c:	b120      	cbz	r0, 8018168 <__ieee754_sqrt+0x198>
 801815e:	1cab      	adds	r3, r5, #2
 8018160:	bf08      	it	eq
 8018162:	3601      	addeq	r6, #1
 8018164:	3502      	adds	r5, #2
 8018166:	e7e2      	b.n	801812e <__ieee754_sqrt+0x15e>
 8018168:	1c6b      	adds	r3, r5, #1
 801816a:	f023 0501 	bic.w	r5, r3, #1
 801816e:	e7de      	b.n	801812e <__ieee754_sqrt+0x15e>
 8018170:	7ff00000 	.word	0x7ff00000
 8018174:	0801a4b0 	.word	0x0801a4b0
 8018178:	0801a4a8 	.word	0x0801a4a8

0801817c <_init>:
 801817c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801817e:	bf00      	nop
 8018180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018182:	bc08      	pop	{r3}
 8018184:	469e      	mov	lr, r3
 8018186:	4770      	bx	lr

08018188 <_fini>:
 8018188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801818a:	bf00      	nop
 801818c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801818e:	bc08      	pop	{r3}
 8018190:	469e      	mov	lr, r3
 8018192:	4770      	bx	lr
